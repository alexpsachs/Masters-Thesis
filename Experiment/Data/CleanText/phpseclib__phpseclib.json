{
    "RobLoach": "Nicely done! I ran the tests and they're passing. +1\n. Beat you to it! :-) ... https://github.com/phpseclib/phpseclib/pull/5 .... Definitely like your \"require\" and \"suggest\" additions though. I'll add that to #5 . We probably don't need the deprecated include-path changes in there if we use class_exists on those require_once statements.\n. There definitely are areas where this could improve. Autoloading already kind of works. With the addition of https://github.com/phpseclib/phpseclib/pull/5 , you can use Composer's autoloader, or Symfony's ClassLoader (with a prefix), for example, to have the classes autoload.\nI suppose we could go one step further and provide a ClassLoader directly within phpseclib. I do think we could split this issue up into a few different PR to simplify the amount of steps we're taking here though.\nI'm with you for the classed constants!\n. Does http://travis-ci.org/#!/phpseclib/phpseclib support testing PHP4?\n. @syntaqx I mean, does it support testing PHP 4, not PHP 5.4 :-P . \"PHP workers on travis-ci.org provide PHP 5.2, 5.3, 5.4 including XDebug as well as PHPUnit.\"........ I suppose not. Ah well!\n. Yes, this is correct. Using dirname(__FILE__) instead of just __DIR__ also keeps compatibility with PHP4. +1\nThere arn't anymore includes, are there?\n. Think we should reference \"TerraFrost\" as the name?\n. Thanks! 8d8b5e09dd9ad5db786c76b8b41891b1b307578b\n. Thanks! 08417f0b1a18f2fa9c44179a5c709dcabfe8aebe\n. Sounds good with me! 6117e9d9a682da96bbd79457b8e222f7a9024bbc\n. In other words, it doesn't hurt to have them in the .gitignore! I'm indifferent with it. Happy with, or without them.\n. Isn't the default \"auto\" anyway? I could be wrong...\n. I like this README file! Well done.\n. ",
    "bantu": "You probably should not be changing last lines.\n. Not sure about sneaking in include_path changes into the composer feature. Should be handled independently IMO.\n. As far as I know, PEAR-style class names and PSR-0 are compatible. A PSR-0 loader can load PEAR-style classes just fine.\n. I agree that phpseclib should be made \"more PHP 5.3 friendly\". This does however involve a lot more things IMO. For example the bcmath and gmp implementations should not be in the same class but should just implement the same interface.\nBtw, you really should use class constants (i.e. const KARATSUBA_CUTOFF = 25; instead of public static $KARATSUBA_CUTOFF = 25; for real constants.\n. See https://gist.github.com/fcbb03585f68ac9812fc for my list of ideas for \"Towards PHP 5.3\"\n. Could just do multiple branches. Basically keep what currently exists in a stable PHP4 branch and convert stuff to PHP 5.3 in another branch. Merge from stable into develop after changes to stable have been made.\nAs for the PHP 5 version: PHP 5.3 is pretty widespread already and even PHP 5.2 has been EOLed on 2010-12-16. And there would still be the PHP4-branch.\n. Composer and Autoloading is working for me, by the way.\n. Yeah, exactly. The PHP4 branch wouldn't have that many changes anyway (basically just bugfixes), so there wouldn't be that much merging necessary.\n. Please add newlines at the end of files.\n. Feel free to add Travis CI to README: http://travis-ci.org/phpseclib/phpseclib\n. I think the includes have been intentionally like this. It probably has to do with how PEAR packages can be generated from phpseclib and the fact that PEAR packages can be installed system-wide and locally.\n. @KendallHopkins phpseclib consists of multiple PEAR packages as per http://phpseclib.sourceforge.net/pear.htm That's why it does not have a single namespace. For example Math_BigInteger can be used independently just fine.\nPutting everything under one PhpSecLib namespace makes sense to me when proper PHP 5.3 namespacing is introduced.\n. @terrafrost The SPL autoloader basically only works for classes. Crypt/Random.php however is a set of functions.\nThe proposed patch is a hack that works as follows: class_exists calls the autoloader and includes Crypt/Random.php, then function_exists('crypt_random') is true and the \"manual\" require_once will not be called.\n. @terrafrost Autoloaders used in practice are SPL autoloaders as per \"spl_autoload_register() provides a more flexible alternative for autoloading classes. For this reason, using __autoload() is discouraged and may be deprecated or removed in the future.\"\n. In my opinion this discussion is moot. There should be one old-stable branch that is PHP 4 compatible and another one which is PHP 5.3 compatible (this should be fine since 5.3 is supported on all major OS distributions) with PSR compatible namespacing (using PHP namespaces) and no manual loading.\n. As for static, it is usually a bad idea. Objects and Dependency Injection should be used where possible.\n. @terrafrost Where was this PHP 6 change announced?\n. I wouldn't consider PHP 6 at all until it gets released or a feature list gets published. After all, it feels like we have been talking about PHP 6 for about 10 years already. ;-)\nThe download for PHP4 does not have to be \"advertised\" as PHP4 should really be dead. Repository-only should be fine.\n. About conflicts: If a bug affects the PHP4 branch as well as the PHP5 branch, you should fix it in the PHP4 branch and then merge the PHP4 branch into the PHP5 branch right away.\n. @skydiablo I fail to see how a class loader could not be implemented using objects instead. See e.g. http://kore-nordmann.de/blog/0103_static_considered_harmful.html\n. I have some network tests at https://github.com/bantu/phpseclib/compare/feature/network-tests\n. @terrafrost What do we want to do here?\n. Please don't use static calls such as System_SSH_Config::load('/home/user/.ssh/config');. This is an absolute no-go. Use objects that you pass around.\n. The constructor of Net_SSH2 probably should not establish a connection.\n. If the agent is only used for login and no other functionality of SSH (which seems to be the case), then passing the agent to the login function seems to be a good idea. This is also consistent with the ability to pass an RSA key instance directly.\n. Ideally, something like\nphp\n$ssh = new Net_SSH2;\n$ssh->setConfig(new System_SSH_Config('/home/user/.ssh/config'));\n$ssh->connect('alias');\n$ssh->login('username', new System_SSH_Agent());\nbut something like the following is probably a better idea\nphp\n$ssh = new Net_SSH2('alias');\n$ssh->setConfig(new System_SSH_Config('/home/user/.ssh/config'));\n$ssh->login('username', new System_SSH_Agent()); // Only connect once necessary\n. I am closing this in favour of #265 \n. I would probably be willing to maintain and coordinate a development branch that is PHP 5.3 only if that is fine with you guys. I think the current branch should certainly stay around for some time.\n. Composer supports different branches just fine.\nYou don't have to give everyone access to the repository. That's what pull requests are there for. You just have to make sure they get merged within reasonable time.\n. There is an ECDH implementation at https://github.com/scintill/danter-php-ecc which maybe could partially be reused. GMP and BCMath should obviously be replaced with Math_BigInteger. Most of my SSH servers seem to support ECDH. Feel free to send me an SSH public key.\n. Please let me know when you're starting to work on anything related to this. Doesn't really make sense to have two implementations in the end.\n. I would like to write an implementation. But I probably won't have the time to do so within the next months. Certainly not this month.\n. See #116 \n. @sarciszewski \"I'd really like to have\" the NaCl primitives, especially for SSH2. Unfortunately, the Salt project you linked to is not using composer and, more importantly, has no tests. Furthermore, libsodium-php does not seem to be API compatible with Salt. Are you aware of a project addressing all of those issues?\n. Depends #42 \n. This also shows a bug in OFB now. See https://travis-ci.org/phpseclib/phpseclib/jobs/3950813\n. Rebased onto master. CTR no longer fails. https://travis-ci.org/phpseclib/phpseclib/builds/3974596\n. #40 discovers this now. See https://travis-ci.org/bantu/phpseclib/jobs/3950809\n. I would really like to have unit tests for all of those issues. However, all the constants make testing rather hard.\n. Found a way to redefine constants. See #48.\n. This is probably just a \"long time goal\". :-D\n. AES128-GCM and AES256-GCM are part of OpenSSH 6.2 (which will for example be part of Ubuntu 13.10 Saucy). See http://www.openssh.org/txt/release-6.2\n. Not sure whether this is actually working yet.\n. Seems to work. It runs BCMath and Internal in the same run. GMP is skipped because the extension is missing.\n. Possible bug discovered by this patch:\n1) Math_BigInteger_InternalTest::testModInverse\narray_pad() expects parameter 1 to be array, string given\n/home/travis/builds/bantu/phpseclib/phpseclib/Math/BigInteger.php:2650\n/home/travis/builds/bantu/phpseclib/phpseclib/Math/BigInteger.php:2622\n/home/travis/builds/bantu/phpseclib/phpseclib/Math/BigInteger.php:2387\n/home/travis/builds/bantu/phpseclib/tests/Math/BigInteger/TestCase.php:119\n. It's because of the use of \"static\" in Math_BigInteger. The MATH_BIGINTEGER_MODE_BCMATH tests run first and static $zero, $one are still BCMATH based in MATH_BIGINTEGER_MODE_INTERNAL test. It's entirely caused by this patch and not a real bug.\n. Hopefully nailed it.\n. Indeed. #50\n. GMP support has been added to travis (for a while now, I guess). See e.g. https://travis-ci.org/phpseclib/phpseclib/builds/5379815\n. This especially allows you to hash data that comes from the network and goes onto the disk with low memory usage.\n. Yes, neither hash() nor hashFile() are sufficient. Even if you end up storing data on disk, you don't want to reread it just to calculate the hash.\n``` PHP\n$hasher = new Crypt_Hash('sha256');\n$digestOfFile = $hasher->hashFile($filename);\n$digestOfString = $hasher->hash($string);\n// Progressive\n$hasher->update('Msg1');\n$hasher->update('Msg2');\n$hasher->update('Msg3');\n$result = $hasher->hash(); // hash without argument or finalize()\n```\nInspired by http://code.google.com/p/crypto-js/#Progressive_Hashing\nNot sure whether setContinuousMode() would be a better idea. Maybe it is for consistency.\n. Also see PHP functions hash_init(), hash_update() and hash_final() etc.\nhttp://www.php.net/manual/en/ref.hash.php\n. The problem with PHP progressive hashing is that the hashing process can bot be interrupted and resumed in another PHP process. This is because there is no way to get the current state of a hash without finalising it. This is pretty bad for calculating a checksum of a file that is uploaded in chunks.\n. Also see https://github.com/bantuXorg/php-stream-filter-hash\n. @terrafrost Yes, the conflict is trivial to resolve. I updated the pull request anyway.\n. I am not sure I understand the problem or resolution here.\n- Does PEAR require HTTPS? I doubt it.\n- Does PEAR require HTTP redirects not to be used?\n- @terrafrost Have you changed anything to the sourceforge setup that fixed this issue?\n- Where are the HTTP redirects coming from? Sourceforge or the phpseclib website?\n. phpseclib is PHP4 compatible as of now. I'm pretty sure this is not causing any real problems.\n. I don't see why __construct() is necessary at all. It's not like PHP supports loading phpseclib into a custom/user-defined namespace. Namespaces aren't used as long as phpseclib doesn't define them.\n. Are people really manually adding namespacing to phpseclib instead of having it in the root namespace? I really doubt this is a good idea. Suggesting to revert bfb04dcf4daa36d8f95d2c673ed1585e815e6724 because it's just not worth it (and apparently doesn't work without causing other problems).\n. For the record: https://github.com/singpolyma/openpgp-php uses phpseclib to implement OpenPGP. Right now it depends on version 2.0.\n. Let's check the default behavior of the scp command.\n. Instead of using a single commit with the message \"minor fixes\" (which is completely meaningless and not useful), please group changes together into multiple commits and give them a proper commit message in the future. Also, consider sending multiple pull requests for independent problems.\n. Patch seems to have some character problems. Or is this an actual fix?\n. Please have a look at other pull requests trying to add dirname() that have been closed.\n. I'm not saying this patch is wrong. Maybe the situation/problem is different for the openssl file.\n. I never really liked the hack that this patch removes. So, so far so good. Without looking any deeper into the issue, it sounds like listing the flle under \"files\" unconditionally includes the files, which may be desired or not. If this is not desired, another solution would be to just provide a Crypt_Random class (and possibly deprecating the existing function).\n. @yogeshcs89 Bump\n. See http://getcomposer.org/doc/articles/aliases.md for documentation.\n. I'm not 100% sure about the implications of adding the alias. For example: Let's assume master reaches version 0.4. What will the alias point to? Still the latest version of master or an older version of master?\n. No, haven't used any or looked into it yet.\n. Looks good to me.\n. Please provide your example code.\n. You might want to try reducing minimal code for reproduction.\n. Please also provide your PHP version.\n. Unfortunately, the SSH2 file still says \"@version $Id: SSH2.php,v 1.53 2010-10-24 01:24:30 terrafrost Exp $\" in it's current state, so it is not really clear which version you are using. The date maps to commit dd4f0036f2abf599144fa63429aae75771a9af30.\n. This seems to be caused by the destructors of Net_SSH2 and Crypt_RC4. The PHP manual says\n\nThe destructor method will be called as soon as there are no other references to a particular object, or in any order during the shutdown sequence.\n\nThe last part seems to be important here and it looks like the Crypt_RC4 destructor is called before the Net_SSH2 destructor, Net_SSH2's destructor however uses Crypt_RC4 in send_binary_packet().\n. @petrich Do you know whether calling mcrypt_module_close() is actually necessary? Are there any resources wasted if it is not called? The Net_SSH2 descructor seems to be more important because it closes a network connection, so I agree with you. It might be possible to force an order using register_shutdown_function or so, but it probably isn't straight forward.\n. Have to look at all other destructors as well, this might not be a problem with RC4 only.\n. Also, let us remove the outdated @version data generated by SVN.\n. Also, the PHP manual should probably clearify what happens when two object reference are cleared at the same time as seems to be the case here.\n. Grep for destruct:\nshell\n./Net/SSH2.php:    function __destruct()\n./Net/SSH1.php:    function __destruct()\n./Crypt/RC4.php:    function __destruct()\n. Okay, in that case, let's just remove it. Want to do that?\n. Fixed for me. Closing.\n. @petrich Please send a pull request for your changes so we can leave comments and travis runs the test suite on your changes.\n. > Terra seems busy as he/you mentioned before... no problem... but i will wait until he's/you're back and for his/your comments ... and if all ok then, i'll send the pull request.\nAgain, please send a pull request NOW. Pull requests make it easier to review patches because they for example allow proper line comments.\n\nI was strong testing and long all ciphers and the behavior of the objects to be 100% compatible to the current master-branch of phpseclib.\n\nI would appreciate if you could take some time to look into how to write tests for PHPUnit, so those tests can be added to the repository and run automatically whenever something is changed.\n. Please extract the fix for #107 onto its own branch. The Crypt_Base patch is rather big and takes some time to review. The fix for #107 has nothing to do with the Crypt_Base rewrite and is trivial to review. Even if merging the #107 fix produces a conflict with the Crypt_Base patch, it can be trivially resolved by either you or the merger.\n. @terrafrost I'm sorry to hear that. :-D Happy belated birthday. :-)\n. Sounds good. :-)\n. Ugh. It really is time that phpseclib arrives in this century.\nOn 25 May 2013 18:08, \"terrafrost\" notifications@github.com wrote:\n\nThe original reason this wasn't done was to minimize the number of extra\nfiles one would have to include to utilize select Crypt_* files. Like\npersonally, I don't like it when libraries have 50,000 files. I like to\nminimize it. So before, to include Crypt_DES, all you had to do was include\nCrypt/DES.php in your file and that was it. With Crypt_Base, you'll have to\ninclude both Crypt/Base.php and Crypt/DES.php.\nAnyway, as petrich noted, this is changing.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/109#issuecomment-18449522\n.\n. @terrafrost On second thought, this sounds like nonsense to me. Why does Crypt/DES.php not load its dependencies? As far as I remember, most of the phpseclib class files do that. See for example AES: https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/AES.php#L69\n\nAgain, as far I can tell, using proper abstraction instead of repeating yourself or copy and pasting code is one of the software engineering basics. And even laziness suggests doing it like that.\nAnthony does these things more properly: https://github.com/ircmaxell/PHP-CryptLib/tree/master/lib/CryptLib\nAlso, technically, since Crypt_Base has not been merged, this is still a valid bug and the ticket should stay open until it has been fixed.\n. @terrafrost My gut feeling / experience tells me that tickets should stay open until they are actually resolved in code.\nDiffie-Hellman and the underlying groups is just one (separate) aspect of SSH and Diffie-Hellman and the groups could be used for other purposes as well (say TLS). By including them into the SSH class, we make it impossible to (re-)use them on their own. So, yes, paramikojs looks like it has a better design.\nIf my project includes X509.php but does not use it and there is a security issue in X509.php, nothing happens and the project has nothing to do if it is aware of its dependencies. This is because X509.php is not an end-user application.\nClasses do not always have to extend each other, it is usually better to decouple separate aspects (PBKDF2 has little to do with AES) instead (Composition over Inheritance). The basic idea is to decouple stuff that is of any use on its own, not only to phpseclib itself, but to other external users as well.\nMost users of phpseclib are probably other projects like magento that bundle phpseclib as a whole. So it is hard to say how many installs (and of what type) there are.\n. Rebased onto master with #113 \n. Conflicts #112\n. @terrafrost How about we use @return null because that's what it returns?\n. I am aware of coding style and PHP4 issues. However, the next thing to do in my opinion is to speed up the point multiplication implementation, because that seems to be quite suboptimal. At least when connecting to OpenSSH, the first curve seems to be slower than DH. This could also be caused by the stronger hash function (sha2 instead of sha1) or be just a better security tradeoff, but I believe there is quite some room left for improvement.\nMy original idea was to have this as a PHP5.2/3-only feature in order to encourage people to upgrade their php version. But now it seems like little PHP 5 features are used and stuff can probably easily be made PHP4 compatible. I do not claim to be PHP4 compatible, so please don't review that aspect for now.\nI extracted some commits that are ready for merge into #117\n\nI think it'd be better if ECDH were in the Crypt directory and not the Math one. I mean, Crypt_RSA, in theory, could be in the Math directory, too, but I think the Crypt directory is a better fit.\n\nI agree.\n\nAlso, cosmetically, I think it'd just look better as ECDH, all caps, instead of EcDH. idk that's just me.\n\nI actually hated reading all the abbreviations in filenames used by other projects, how about EllipticCurveDiffieHellman?\n\nI think some of the helper classes would be better moved to ECDH subdirectories unless there's a (realistic) chance they can and would be re-used by third parties.\n\nHelper classes and filenames need some more thinking, in my opinion. Helper classes might need some redesign when other EC stuff enters the game, e.g. ECDSA which shouldn't be too far away from here.\n\nI don't pretend to be the biggest phpdoc expert but I think phpdoc wants a function name and optionally a function description?\n\nNot sure what you mean with \"function name\". Most of the doc blocks are incomplete and need to be expanded.\n\nAnd I think if we're going to do @return null we ought to do it consistently. I'll try to find out the phpDoc people think on the matter at some point.\n\nLet's not try to change all function/method documentation at once, but file-by-file instead. In PHP, a function that has no return statement returns null. This means that @return null is certainly not wrong. Adding the statement might be optional however. Explicitly adding @return null however is a good idea because otherwise the reader will likely think the return value is just undocumented and will search for the return statement in the function/method. It might not make a difference in generated API documentation at all if null is the default.\n\nI realize the unit tests that have already been committed violate phpseclib's / PEAR's CS but, in my mind, they're a little exempt, anyway, since they're not included with the release zips. Really, I see them as a separate project that just happens to be in the phpseclib repo.\n\nYeah, having tests with broken coding style is certainly better than having no tests. I probably wouldn't enforce coding style in tests.\n\nFinally, could you make examples demo'ing how to use it?\n\nWhat exactly are you interested in? If your SSH server supports ECDH, ECDH will be used for the key exchange. Other than that, example code explaining how to use the classes should be added to them. This is something still left to do.\n. Closing for now as this is outdated.\n. patch requires php 5.3 and thus is not acceptable as is\n. @smergler As far as I know, composer handles the includes for phpseclib just fine. If you're not using composer, you may have to add phpseclib to the includes path or change the autoloader you are using.\n. Yeah, that's pretty suboptimal.\n. Ideally, all phpseclib classes would be namespaced by prefixing them with Phpseclib_ or so.\n. This has been achieved via https://github.com/phpseclib/phpseclib/pull/569/files#diff-2\n. Hi. These constants are (probably all) defined in the constructor of Net_SSH2. Please provide a use case that is reproducible. The amount of lines changed suggest that something else is wrong (possibly on your end). This patch does not seem to be of any use to me.\n. No problem.\n. Hi and thanks for your report. Could you use git bisect to find out which commit(s) caused your problems? Otherwise I guess it will be much harder to find the root cause for this.\n. @terrafrost Nice work, but please explain what is being changed in the commit message. :-)\n. Yeah, please create a branch, cherry pick that commit, adjust the commit\nmessage, and send a pull request.\n. I agree. I was not aware this is the implemented behaviour. This is not\nsomething we should do. I don't care about breaking anything relying on it.\nThe solution also is less efficient for large plaintexts compared to using\na symmetric cipher.\nOn 27 Jul 2013 06:13, \"Ruy Asan\" notifications@github.com wrote:\n\nThis behaviourhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/RSA.php#L2566of splitting up large messages (quite silently to boot) is not\nsecurehttp://stackoverflow.com/questions/13356656/split-data-to-smaller-pieces-then-encrypt-with-rsa(I think, crypto is not area of expertise, though the code seems to be\ndoing exactly what that stackoverflow discussion specifies not to do).\nIt is also sort of surprising behaviour - I don't know of any other crypto\nlibrary that does this. The more common course of action is to throw an\nexception. Certainly lead to some surprising behaviour trying to work\nbetween phpseclib and other libraries that should in theory have been\nexactly equivalent.\nAnyway, I understand changing this is very likely to break existing code\ndepending on phpseclib, but considering that code relying on it very\nprobably contains a security vulnerability, that might not actually be a\nbad thing. Perhaps an explanation and hints towards alternate course of\nactions (using RSA to encrypt an AES key instead) in the error message\nwould alleviate some headaches.\nCheers!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/135\n.\n. Thanks. Fixed via 25a60ff9a370e400b328eda3e508fd6adc93a8e4\n. @skunkbad Please open a new ticket describing what exactly you are doing with composer and explain what is not working.\n. Works for me.\n\n```\nafischer@leonard:/tmp/phpseclib-project$ cat composer.json \n{\n    \"require\": {\n        \"phpseclib/phpseclib\": \"0.3.*@dev\"\n    }\n}\nafischer@leonard:/tmp/phpseclib-project$ cat test.php \n<?php\nrequire DIR . '/vendor/autoload.php';\n$sftp = new \\Net_SFTP('localhost', 22, 10);\nvar_dump($sftp->login('afischer', 'foo'));\necho 'end';\nafischer@leonard:/tmp/phpseclib-project$ php test.php \nbool(false)\nend\n```\nThere seems to be an endless loop somewhere for you.\n. Are you sure you are getting the exact same version?\n. @dev should give you the latest development version from git.\n. There have been quite a few changes between 0.3.5 and the current development branch. \"phpseclib/phpseclib\": \"0.3.*\" should give you the more stable version 0.3.5.\n. phpseclib is supposed to work without OpenSSL support. So, was OpenSSL absent or broken?\n. I see. Nothing we can do there. Closing.\n. Thanks. Feel free to send a patch.\n. Feel free to just create a new ticket for FISH. Thanks. :-)\n. #529 reproduces this.\n. @terrafrost I think this is a rather odd problem. I've changed the tests back and forth (one byte) in #529, but the PHP 5.3 branch seems to always fail. I am not exactly sure what the underlying problem is, but we might just want to look into what the scp CLI command does. From OpenSSH, I assume.\n. I've merged #529 with the degree of freedom of the null byte. Once this issue is resolved, 51ea6255c89dc45e32d064708a5b759473e9f543 should be reverted and the tests adjusted to expected behaviour.\n. Ubuntu 12.04 LTS has PHP 5.3.10-1ubuntu3.8 and Travis-CI will happily test on PHP 5.3.3 for you.\nOr do you think this is a Windows-only issue?\n. Also see https://github.com/lt/PHP-Curve25519/issues/3#issuecomment-72666184\n. Also see other (closed) tickets.\n. No. See http://www.php.net/manual/en/language.variables.superglobals.php and http://php.net/manual/en/reserved.variables.globals.php\n. Me neither. Maybe you can create a composer.json in the subdirectory.\n. I am aware of that now. It is just a matter of setting it up (properly).\n. I think the PEAR directory layout should be scrapped in favour of a software component based directory layout, e.g. as used by Symfony. For one reason, because the PEAR directory layout is rather weird (e.g. SSH Agent clearly belongs to SSH and not to \"File\"). Second, this makes publishing futher composer packages a lot easier.\nE.g. the BigInteger class should be namespaced as phpseclib\\BigInteger\\BigInteger such that the phpseclib\\BigInteger folder can easily be published as its own composer package phpseclib/biginteger.\n. @terrafrost Oh sure, I meant System. Yeah, this is surely not for the master branch. Git is able to detect such renames such that merges are applied to the correct files.\n. This should probably depend on #277 \n. This should now (https://github.com/phpseclib/phpseclib/issues/243#issuecomment-67274933) be as easy as turning phpseclib\\Math\\BigInteger into phpselib\\BigInteger\\BigInteger and adding another composer.json file. This would be a step into the direction of components and leaves room for the BigInteger class to be further decomposed.\n. Argh ... these constants are annoying the crap out of me. Constants are for values that do not change. This is not the case here as the constant can take multiple values.\n. @terrafrost Looking into this, I agree with you. Do you think we should revert the patch?\n. You will have to rename the constructors as well. I guess you can use __construct.\n. You will also have to change the tests accordingly.\n. We will (probably) have to agree on whether https://github.com/phpseclib/phpseclib-php5/issues/1#issuecomment-27766802 is how we want to do it, before we can do anything. What do @monnerat and @petrich think?\nOn the other hand, given @terrafrost's situation we might just want to give this a try right away.\n. @terrafrost This patch has outstanding and unaddressed comments and fails to pass unit testing. I have absolutely no idea why this patch was merged. Please revert completely until comments have been addressed.\n. Please use independent branches for independent changes. The vim changes have nothing to do with this pull request.\n. There are too many empty lines in the front of (some) files.\n. The namespace statements should probably be after the initial comment block.\n. I have recreated the php5 branch. Please submit new pull requests using topic branches and addressing the remaining comments.\n. Namespacing depends on #177 to pass Travis.\n. @mpscholten You can for example cherry-pick realted commits onto a new branch.\nAlso, I would appreciate if you could review #177 (although it is a quite trivial change).\n. @PVince81 Probably fixed by b0ee4d559198009794e5aaf30528865ebabc6bb7\n. @PVince81 Yeah, hehe. Been there. I don't think using extract() is all that wise.\n. The default value foreof is null as per https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SFTP/Stream.php#L110. The stream specification says public bool streamWrapper::stream_eof ( void ), so you seem to be spot on. Instead of casting the property however, I think that the default value should be changed to false. Feel free to submit a pull request for that. Thanks.\n. This parameter does not exist on PHP4, so this patch is likely not acceptable.\n. The PHP5 branch should have autoloading and the manual inclusion should go completely. Therefore closing this.\n. I was more thinking about changing the property definition itself, but this will probably work as well.\n. @PVince81 Does this guarantee that eof can not be returned as null? Must open() always be called before eof()? What do you think about changing he property definition instead?\n. Patch is likely not acceptable. For $dir = '0', !$dir will be true. Should be $dir === ''.\nOr as an alternative: What do you think about if ($dir === '') { $dir = './'; } instead?\n. @terrafrost This was likely closed by deletion of the php5 branch.\n. This should be against master, in my opinion.\n. The .gitignore file contains all sort of this crap as well.\n. @mpscholten Yes, I would like to see this vim stuff gone in master too.\n. @mpscholten It should suffice to cherry-pick the two commits onto a new branch. ;-)\n. Closed via #180 \n. cc @mpscholten\n. @terrafrost Please merge master into php5. git merge --no-ff master\n. No, this won't work in the long run as you will have to resolve some conflicts.\n. I have performed the merge now.\n. First of all, I agree that tags and stable releases should not just be created for the sake of it. Stable releases should happen when deemed necessary/ready. Nevertheless, it sounds like the release process (packaging etc.) is quite time consuming. There probably are a few things that could be automated.\n. https://github.com/phpseclib/phpseclib/pull/174#issuecomment-28919575 sounds like terrafrost would be okay with this. Merging.\n. This can not be tested with pull-requests only. Thus merging this to see whether it is working as expected.\n. @mpscholten There really is no reason to do that. Commit messages explain in detail what has been done for what reason.\n. @terrafrost Took care of that.\n. A demo would be here: https://travis-ci.org/phpseclib/phpseclib/jobs/14425256#L178 But the output is empty because we pass all rules.\n. @terrafrost I only enabled those rules that make sense and we currently follow to get us started. Validation against the PEAR ruleset results in https://gist.github.com/bantu/dd1fae3f9eb9fabb33d4\n. @terrafrost Changing line length to something that can always be viewed n Github for prettier diffs would be useful. Github shows about 120 characters without scrolling sideway. So maybe 100 or 115 instead of 80.\n. Please have a look at stuff we fail for possible exceptions to the PEAR standard. https://gist.github.com/bantu/dd1fae3f9eb9fabb33d4\n. I do not want to add \"We follow the PEAR Coding Standard\" statement as long as we are not 100% sure we do not want exceptions or not. So, I think that CodeSniffer should be fixed first and should block this pull request.\n. I agree with using integer over Integer. Types starting with upper case usually refer to classes.\n. As a first step, I guess we should get the phpDoc output published after every push, just like code coverage.\n. This pull request is somewhat incomplete. Most of the hunks replace Integer with integer. This is incomplete in the sense that String should also be string und Boolean should be boolean and Array should be array. Next, there is also the problem of int vs integer and bool vs boolean. Does the PEAR standard say anything about that?\nI would suggest to procede as follows:\n1. Check whether PEAR standard says anything about boolean vs bool etc.\n2. Pull request for changing all basic types to lower case\n3. Pull request for fixing everything that is remaining (optional parameter) \n. For now please review pull requests anyway and just post you're okay with them.\n. @Esysteme This ticket is not related to your question at all. If you want to see the difference between master and php5 I would suggest you use git diff. ;-)\n. I am closing this as investing time into such a thing is basically a waste of time because things can no longer be done automatically as soon as conflicts arise. There will very very likely be conflicts in the future when merging master into php5.\n. Yes, all PHP4-compatible changes should be against master. Please send a new PR against master.\nI am not sure I see the point of replacing var with public. This will likely just cause unnecessary merge conflicts without any benefits.\nIdeally, use at least one commit per rule you are fixing and also add the rule to the code sniffer ruleset. Maybe the ruleset should be changed to PEAR + ignore first to make this easier.\n. @mpscholten Feel free to take a shot at the stuff that is left. See #197, #198, #199, #200 for how I did it.\n. phpseclib is using relative includes/paths and expects to be in the include path (set via set_include_path()). i am not sure what the consequences of this are for phar, but this is likely going to change in the php5 branch.\n. @Anahkiasen Minimum for master is PHP 4.3.3 or so, bare minimum for php5 branch is currently PHP 5.3.0, but we could increse that. This should probably be put into master with a fallback to the old code.\n. I dont think that is necessary. It should be safe to assume that stream\nresolve is available when phar is.\n. The phar class documentation says it is 5.3.0 or later. Maybe phar was\nintroduced earlier without the phar class. Not sure.\n. @terrafrost The PHP 5.3 series has many severe bugs in versions before 5.3.8. Most people either use a recent version of PHP 5.3 or they are using their distros PHP which is usually an older PHP version like 5.3.3 but with patches for the severe problems. Since this seems to be such an easy fix, either way is fine with me.\n. Fixed by #233\n. I did not know PEAR has such a rule, btw. Here it is http://pear.php.net/manual/en/standards.including.php\n. I was referring to the fact that execution continues when \"include\" is used, in comparison to \"require\" throwing a fatal error.\n. In general I don't care whether the equal sign is on the same line or the next line. So changing that to what the standard says is totally fine with me. For multiple assignments of the same value, CodeSniffer expects each assignment to be indented another 4 spaces if it involves multiple lines, which is why I changed it to use a variable instead. This change may also get rid of various array hash lookups, depending on how these multiple assignments are evaluated by PHP. See especially https://github.com/phpseclib/phpseclib/pull/204/files#diff-4576c6a18d6e9d5b55bee6b51a1ea4a1L1509\n. @monnerat @petrich \n. How did you check/search? Try searching for preg_replace. I have seen at\nleast two multiline calls using the e modifier.\n. This should be fixed in master as well if possible.\n. I don't think the old version of TripleDES is very readable. It is not clear which function call is part of which function call and all parentheses are closed on the last line, but not opened in the same way. For Twofish I would argue that both versions are equally readable. I put the \"V4\" onto a new line because there seems to be another rule mandating that, btw. So I would be in favor of merging this instead of adding an exception.\n. For the record: When I said \"I don't think the old version of TripleDES is very readable\" I was referring to the parts of TripleDES affected by this patch, not TripeDES as a whole.\n. @terrafrost Should be one of the other PEAR.Functions.FunctionCallSignature rules.\n. This has been rebased onto recent master. Changes to SSH1/2 were no longer necessary.\n. @terrafrost Updated accordingly.\n. No longer skeptical? :-P\n. You are using PHP 5.4 array syntax which causes tests to fail on pre 5.4.\n. Please use a new topic branch in the future.\n. Please add a PHP file header containing the license information.\n. Does not work with phpize/runkit.\n. Looks good to me.\n. @terrafrost Doing this in master has been considered. The conclusion was that it was a waste of time to do this with PHP4 compatibility and it was not very clear whether the solution would work as expected on PHP4. As such this is targeting the php5 branch.\n. To be more precise: A PHP4 compatible callback would require passing $this as a reference (in order to have the same behaviour as on PHP5), i.e. array(&$this, 'someMethod'). This however would be call-time-by-reference which is also discouraged in PHP5 world. Also, phpseclib does currently not use preg_replace_callback anywhere, so it seemed safer to just do this in php5.\n. We should probably have the test on master though and E_DEPRECATED errors ignored in the master test suite.\n. php4 creates a copy of $this\nOn 16 Dec 2013 18:28, \"terrafrost\" notifications@github.com wrote:\n\nWhy would $this need to be passed as a reference? Seems to be working fine\nwithout me doing it:\nterrafrost@6ac9227https://github.com/terrafrost/phpseclib/commit/6ac922726d71381d696c4e97b21549542e9e331c\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/phpseclib/phpseclib/pull/212#issuecomment-30680746\n.\n. @mpscholten This conflicts now. Feel free to rebase.\n. @mpscholten yes, ssh1 still needs to be fixed.\n. @BT643 Now it is. :-)\n\nSee https://github.com/phpseclib/phpseclib/issues?labels=feature&page=1&state=open\n. I think DSA signing is not a good idea as using poor randomness will lead to leaking of the signature key. As such I would strongly recommend a) not making this too much of a priority to implement and b) reconsidering how randomness is collected.\n. > Or are you perchance referring to the fallback implementation? The odds of the fallback implementation being used are pretty low, for one, and for two, even in those situations where it is used, I still stand by it. It is based off of the Yarrow algorithm (wikipedia it) and I have pretty high confidence in the method utilized to gather the initial entropy as well. The comments elaborate.\n@terrafrost Yes, the problem I have with crypt_random_string() is that it continues with \"Better Than Nothing\" randomness while it should probably throw a \"I have no proper randomness\" error instead. This means that basically everything below https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Random.php#L116 should be dropped. We might just want to use https://github.com/ircmaxell/RandomLib instead which provides a much better interface (but is PHP 5.3) for randomness.\n. > In any event, is there a particular \"big\" feature you'd prefer I work on instead?\nI would prefer if time was spent on upcoming primitives like Salsa/ChaCha, Poly1305, Ed25519, Curve25519 or AES/GCM rather than primitives that the community is moving away from such as DSA (ECDSA has the same problem as DSA, AFAIR).\n. http://tools.ietf.org/html/rfc6979 explains how to produce DSA and ECDSA signatures deterministically in order to prevent leaking the private signing key when using low entropy randomness.\n. @terrafrost Let's remove the file from composer.json and include the file manually whereever the function is required? This is consistent with how classes are loaded without an autoloader.\n. In php5 branch, refactor this into a proper class after PSR4.\n. @aequasi There is no autoloading in the php5 branch yet.\nCreated a ticket for turning random into a class. It seems to need a better way to keep state anyway. #322\n. You are calling utf8_encode() on the ciphertext.\n. Please also note that it is not a good idea to pass these messages around via GET, as GET implementations usually have a shorter limit than POST etc.\n. xdg-open http://phpseclib.sourceforge.net\n. Well, you need to add your phpseclib path to the include path.\n. Tests are failing with Constant NET_SSH2_LOG_REALTIME already defined. Hmm.\n. Depends on #227 \n. Fantastic idea. Let's do that. Please send the money my way.\n. Can tests be added that ensure new keys can be read as well as old style keys still working?\n. @terrafrost This is a copy and paste error and these should be prefixed with Net_SSH1 instead, right?\n. https://github.com/phpseclib/phpseclib/pull/229/files?w=0 may be helpful. It is empty, implying this is a whitespace only change.\n. @terrafrost If you put \"Fixes #idhere\" into the description, the mentioned ticket will be automatically closed when this pull request is merged. ;-)\n. Spaces vs tabs. testBadKey is failing on 5.2.\n. I have restarted the test and it is still failing. This is likely not a glitch.\n. @terrafrost I can merge this tomorrow then.\n@mpscholten Feel free to rebase. I can also resolve the conflict, though.\n. Why is this necessary? What are the benefits?\n. @terrafrost I think there is. Use instanceof against an interface.\n. ```\ninterface PasswordEquivalent {\n  method($var);\n  bla bla\n}\nCrypt_RSA implements PasswordEquivalent {\n...\n}\nSystem_SSH_Agent implements PasswordEquivalent {\n...\n}\nIn SSH2:\nif ($password instanceof PasswordEquivalent) {\n  bla bla $password->sign();\n} else {\n // plaintext password\n}\n```\n. Ideally, the order of patches would be\n- SSH Agent\n- Instanceof + Interface\nbut I am fine with having this patch now, then using if/else when SSH Agent gets merged, then adding the interface.\n. Hmm, there is logic in SSH2 handling RSA Keys and SSH Agent, so you won't get extendability by using an interface. See https://github.com/terrafrost/phpseclib/commit/e90648c7a54f0cb4dfe11ffc725be84235c15d8c#diff-82a5983a6daace4acbcc65edf2dfb605R2016\n. > I think switch statements are a lot more readable than a bunch of if's / elseif's.\nCould just use switch(true).\n. @terrafrost Let's discuss how our namespace should be called. phpseclib or PhpSecLib or ... ?\n. So be it. phpBB uses phpbb, btw.\n. @terrafrost Do we want to keep the phpseclib folder or do we want to rename it to src? I really do not see a reason to rename it.\n. Actually, this might be a good idea. Will have to give this some more thought.\n. For the record: The decision whether to use \"phpseclib\" or \"PhpSecLib\" is kind of a marketing decision. The decision to use \"phpseclib\" has the benefit of being compatible to what is currently in use. Also, that is the name of the project and repository on github.\nafischer@leonard:~/code/phpseclib (master) phpseclib $ grep \"phpseclib\" . -Ri\n./File/ASN1.php: * @link      http://phpseclib.sourceforge.net\n./File/ANSI.php: * @link      http://phpseclib.sourceforge.net\n./File/X509.php: * @link      http://phpseclib.sourceforge.net\n./File/X509.php:            // the following are X.509 extensions not supported by phpseclib\n./File/X509.php:     * Reformats a public key to a format supported by phpseclib (if applicable)\n./Net/SSH2.php: * @link      http://phpseclib.sourceforge.net\n./Net/SSH2.php:        $identifier = 'SSH-2.0-phpseclib_0.3';\n./Net/SSH2.php:                // maybe phpseclib should force close the connection after x request / responses?  unless something like that is done\n./Net/SSH2.php:        // honestly, if you're transfering more than 2GB, you probably shouldn't be using phpseclib, anyway.\n./Net/SFTP/Stream.php: * @link      http://phpseclib.sourceforge.net\n./Net/SSH1.php: * @link      http://phpseclib.sourceforge.net\n./Net/SSH1.php:    var $identifier = 'SSH-1.5-phpseclib';\n./Net/SCP.php: * @link      http://phpseclib.sourceforge.net\n./Net/SFTP.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Rijndael.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Rijndael.php:    var $password_default_salt = 'phpseclib';\n./Crypt/Rijndael.php:     * Note: phpseclib extends Rijndael (and AES) for using 160- and 224-bit keys but they are officially not defined\n./Crypt/Rijndael.php:     * Additional: In case of 160- and 224-bit keys, phpseclib will/can, for that reason, not use\n./Crypt/TripleDES.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/TripleDES.php:    var $password_default_salt = 'phpseclib';\n./Crypt/AES.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Hash.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/RSA.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/RSA.php:    var $comment = 'phpseclib-generated-key';\n./Crypt/Blowfish.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Base.php: * Internally for phpseclib developers:\n./Crypt/Base.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Base.php:     * is broken, so phpseclib implements the CFB mode by it self,\n./Crypt/Base.php:     * In order to do the CFB-mode work (fast) phpseclib\n./Crypt/Base.php:     * @link http://phpseclib.sourceforge.net/cfb-demo.phps\n./Crypt/Base.php:    var $password_default_salt = 'phpseclib/salt';\n./Crypt/Base.php:            // re: {@link http://phpseclib.sourceforge.net/cfb-demo.phps}\n./Crypt/Base.php:            // using mcrypt's default handing of CFB the above would output two different things.  using phpseclib's\n./Crypt/Base.php:            // see: {@link http://phpseclib.sourceforge.net/cfb-demo.phps}\n./Crypt/Base.php:     * Internally for phpseclib developers:\n./Crypt/Base.php:     * Internally for phpseclib developers:\n./Crypt/DES.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Twofish.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/RC2.php: * @link     http://phpseclib.sourceforge.net\n./Crypt/RC4.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Random.php: * @link      http://phpseclib.sourceforge.net\n./Crypt/Random.php:        // ANSI X9.31 recommends ciphers be used and phpseclib does use them if they're available (see\n./openssl.cnf:# minimalist openssl.cnf file for use with phpseclib\n./Math/BigInteger.php:            phpseclib works around this using the technique described here:\n. The autoloading shall be PSR-4 and it should just map the \"phpseclib\\\" namespace to the \"phpseclib/\" directory. No renaming or addition of directory levels required as far as I can see.\ncomposer.json:\n...\n    \"autoload\": {\n        \"psr-4\": {\n            \"phpseclib\\\\\": \"phpseclib/\"\n        }\n    },\n...\n. Yes, we do want everything under the phpseclib namespace in the php5 branch.\n. @Esysteme Hey. There is a pull request for PSR4. If you want to contribute please make sure you read related discussions. Otherwise you are probably going to waste your time and your changes won't be accepted upstream.\n. @Esysteme #277 and the whole dependency tree behind it.\n. @Esysteme ?_?\nI guess you've been meaning to post https://github.com/phpseclib/phpseclib/issues/191#issuecomment-37753343 to this ticket instead.\n. The php5 branch is now PSR-4 namespaced thanks to the fantastic work of @cnelissen (#508 #509 #510 #523 #524 #532 #548 #554 #555 #567 #569). Furthermore, some of the PSR-4 goals are witnessed by Code Sniffer rules (#551).\n. Thank you for your work, here are some issues that I see:\n- Adding  .DS_Store is not acceptable\n- Adding these things to .gitignore is not acceptable. This is a local problem for you, not everyone working on this project. You should deal with it accordingly, using a local system-wide gitignore file.\n- This patch does not seem to apply without conflicts right now\n- Having all constants in one file is not acceptable. Constants belong to a subset of the code and should be organised as such. Furthermore, they should be turned into class constants at some point. Having defined constants in class files is probably acceptable according to PSR etc.\n- You seem to have done a lot of these changes using search/replace. You replaced \"private keys\" with \"protected keys\" which does not make much sense. Also, it would be useful too know which search/replaces you performed.\n- Tests are unlikely to pass. Search/replace, but no use statements.\n. Can we please try to do things properly, i.e. make this pull request smaller such that it can be properly reviewed, instead of trying to do everything at once (again!)?\nI would appreciate if you could come up with a pull request that adds PSR4 autoloading without adding visibility and converting to class constants. These should be seperate pull requests after autoloading has been accepted. Do you think this would be possible or are there any dependencies between these seamingly distinct topics? Also, please see https://github.com/phpseclib/phpseclib/issues/243#issuecomment-33162133 for why it should be PSR4 instead of PSR0.\nAlso, I would like to point out that commenting out calls to self::ensureConstant('MATH_BIGINTEGER_MODE', MATH_BIGINTEGER_MODE_INTERNAL); does not constitute as \"fixing the tests\".\nThank you for your hard work.\n. @cnelissen Thanks for pointing that out.\n. We can ship a PSR4 autoloader or just link to one that people can use. An\nautoloader also means that you dont have to require files manually which\nmakes using the library in general a lot easier.\n. Closing this in favour of #255\n. Adding hhvm does not belong here. It is also pointless. See #211.\n. In general (but especially if you have never contributed to a project), please try to make small \"well-defined\" pull requests.\n. Please split lib whitespace changes and test CS changes into different pull requests. There are codesniffer rules that should be enabled for both things, too.\n. I actually think I fixed the whitespace at end-of-line already and added the codesniffer rule.\n. There is\n<!-- There MUST NOT be trailing whitespace at the end of lines. -->\n <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace\" />\nin the ruleset. Maybe there is something wrong with that.\n. Squiz.WhiteSpace.SuperfluousWhitespace might be broken.\n. Ah, it might not apply to comments, but only lines containing code.\n. It's all right. No problem at all.\n. Looks good to me. Thanks.\n. This is interesting. The first two environments seem to be hanging.\n. Surely we should do this. This pull request was more meant as a proof of concept. It turns out that ssh is already installed on travis.\nWe also have to come up with a way that allows specifying the variables (e.g. ssh servername) from a config file instead, so this also runs properly at home.\n. First of all, I think someone will have to look into the hanging environments.\n. Replaced by #278 \n. Added, thanks for the hint. As you may have seen, that page is kind of new. :-)\n. Your commit seem to undo changes that have been made in the blessed branches.\n. When accessing a constant from the class (or parent class) it is defined in, you can use self instead of the class name. Not sure whether we want to enforce that, probably not.\n. I will try to review the rest tomorrow.\n. It should be possible to have two SSH2 instances with different logging configuration. The problem here is that SSH2 performs too many things in the constructor, which we should fix instead of using crappy workarounds. A constructor should setup dependencies, it should not cause any side effects such as opening network connections.\nFor the \"mode of operation\" constants it seems most desirable to have a setMode() method, that allows changing the mode after an object has been generated. In my experience however, this may not be practically possible, because having two instances of the same class (e.g. BigInteger) with different modes, can make these two object incompatible.\nMaybe it should not be possible to change the mode via public methods at all. It would probably still be possible to force a specific mode in testing via the PHPUnit framework as long as defined constants are not used.\nIn the meantime I guess that static methods are better than the constants we currently have in master, albeit there is still room for improvement.\nFYI: I replaced my previous comment.\n. I agree with @mpscholten. The other configuration options are only useful for testing and as I said, it should be possible to set these things up as required within the PHPUnit framework, as long as the modes are not defined constants as is the case in master.\nI would suggest to move on as follows\n- Use static methods instead of mode constants\n- Get this namespacing PR done\n- Replace static methods with proper API where necessary\nCan we agree on that?\n. For SSH2 the problem can be easily fixed without changing any API by deferring connection establishment until the connection is actually required (e.g. login()). A public connect() method could be exposed as well, but calling it would only be required if connection is suppossed to be established right away without login in or performing any other task.\n. You have made quite a few unnecessary changes to the tests folder that make reading the diff really hard. Any change you can undo tab/space replacement? Please also ensure you do not undo any changes previously made. I have marked a few of these.\n. Awesome\n. @terrafrost An extra connect method makes sense for applications where it is desirable to first check whether the remote host is alive before investing time into getting the username and password/key/whatever to login.\n\nphp\nBigInteger::setMode(BigInteger::MODE_INTERNAL)\n\nYes, like this.\n. setMode() might be a bit ambiguous, though. The name might even conflict with \"the mode of operation\" of ciphers (e.g. CBC). Maybe we can come up with something a tad better.\n. @terrafrost et al.\nCrypt_Base already has a (non-static) property called $engine which determines whether internal or mcrypt. So this thing should be called \"engine\" for consistency. We may have to make the \"engine\" property static in some other cases though.\n. File permissions have been changed from 0644 to 0755. You will have to undo that.\n. @petrich Please send a pull request or link us to a branch with your changes, so we can pick what we need. I would like to get this pull request merged ASAP so we can move on. Not in 2 or 3 weeks. ;-)\n. I can take this over, but let's do SSH Agent and a release first.\n. I've got this scheduled for friday/saturday/sunday right now.\n. Closing in favour of #277 \n. Once the php5 branch has been completely namespaced, the composer autoloader (https://github.com/composer/composer/blob/master/src/Composer/Autoload/ClassLoader.php) can be easily used in a manual fashion. Basically just registering phpseclib as a prefix.\n. Please provide more information. Which ssh server is this?\n. \"find /var/www\" ?\n. @simplewhite Please try with the latest git master branch. Download from https://github.com/phpseclib/phpseclib/archive/master.zip\n. Thanks\n. code sniffer only runs in 5.5. the result does not change if run in another\nenv. so we only run it once.\n. Closing this in favour of #259.\n. Which version of phpseclib are you using? Which SSH server is this?\n. Can you try with the latest master branch, please? Download https://github.com/phpseclib/phpseclib/archive/master.zip\n. @cyberpower678 Are you looking for something like ProxyCommand in OpenSSH? In that case I think #461 has a better description for the wanted functionality.\n. @terrafrost Please document the release process, so we can automate most of it and do releases more regularly.\n. @terrafrost It should be possible to automate quite a few of these steps and make them less depend on an individual's setup (in this case your new laptop), thus also reducing the bus factor.\nFirst of all, can we turn the website (sourceforge) into a git repository on github?\n. I am testing this now. Travis fails due to missing newline at end of file.\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/System/SSH_Agent.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n324 | ERROR | Expected 1 newline at end of file; 0 found\n| | (PSR2.Files.EndFileNewline.NoneFound)\n\n```\n. The functionality works like a charm for me, thus I am merging this. I have fixed the missing newline at end of file. Please consider fixing remaining issues via new pull requests.\n. it is confusing if you do not consider a file to be a character sequence.\nin the diffs two newlines have been replaced with one. your editor may play\ntricks on you as well. make sure you enable line numbers. you should see a\nsingle empty line at end.\n. ah yeah, didn't see that the github display is kind of suboptimal in this case\n. @petrich Can you explicitly confirm that you are okay with this change? Thanks :-)\n. See https://github.com/phpseclib/phpseclib/pull/269/files?w=0 for patch without whitespace changes.\n. I'll probably end up merging this today so I can easily continue with other phpunit work. Considering that there are basically no code changes and these are mostly whitespace changes, this should be fine.\n. I am assuming this is supposed to be closed then. Let me know if you disagree.\n. Thanks for pointing that out. Please create individual tickets for individual problems.\n@terrafrost Disable the sourceforge bug tracker and link here?\n. I'm not sure openssl.cfg of phpseclib should be user-controllable. Probably not. Whatever the library user has to control should be done via method calls or a yet to introduce other mean to configure phpseclib.\n. That sounds pretty much like what I was saying (or at least thinking). I don't see why phpseclib's openssl.cfg file should be placed in /etc/pear.\n. @terrafrost As far as I understand and can see on my system, php files are installed into /usr/share/php (and subdirectories) and configuration files (that are supposed to be used for actual configuration) are installed into /etc/pear.\nNet/SSH2.php does certainly not belong into /etc/.\nopenssl.cnf is however not a configuration file that a user is supposed to edit, thus it does not belong into /etc in my opinion. @remicollet The role of openssl.cnf is to make the functionality of the PHP OpenSSL extension we use actually work. It was introduced by 1417463eba50c55a0a5b8f69f8f596c3d01e5b73\n. > Whether or not it ought to go into /etc/ or whether or not the stuff in /etc/ is supposed to be user-editable... I can't answer that. Some of that goes to the intentions of the PEAR devs, which I can only speculate upon.\nI am not sure this is the case. My understanding is that phpseclib has explicit control over whether the file ends up in /usr/share or /etc by marking it as code or config.\n. @remicollet The bug report at https://bugzilla.redhat.com/show_bug.cgi?id=1047608#c2 says the definition \"is obviously wrong\", yet the ticket does not seem to explain why exactly it is wrong (what actual problems does the \"incorrect\" definition cause?). My impression is that the definition is exactly as intended.\n. > this file is not a PHP script (so role=\"php\" is bad in all cases)\nI am not sure what roles there are. What role does one assign to a data file, say a text file or a jpeg?\n\n/usr/share/pear/openssl.cnf is very bad, outside of Crypt tree, can create bad conflicts with other packages.\n\nThat sounds suboptimal indeed. Maybe we should just ditch PEAR support altogether, but @terrafrost probably doesn't want that, hehe.\n. > There's actually one thing about PEAR that I really like over Composer. You can have a package broken up into multiple files. With Composer it's all or none. If you want Net_SSH2 you're going to get File_X509 as well. With PEAR you just get Net_SSH2. ie. you get only what you need.\nThat's not really true. You can do that as well with composer. The symfony framework does that at large.\n. Try running $ssh->exec('locale');\n. Please provide more details (at least the basics). Which version? Example code? Stack trace?\n. @jonathanvaughn Would your Kerberos implementation be something you would want to contribute back to phpseclib?\n. Have fun and enjoy your trip.\n. @Esysteme Still needs more work.\n. @nVitius The php5 branch needs to be merged into this branch and then I will have to look at it again to see what is missing.\n. @GrahamCampbell This library has development dependencies.\n. @GrahamCampbell Development is supposed to happen against known versions of dependencies. This is one of the key concepts of composer. See https://getcomposer.org/doc/01-basic-usage.md.\n. Anyway, this is in no way related to adding namespacing.\n. @GrahamCampbell @nVitius @Esysteme See https://github.com/phpseclib/phpseclib/issues/361\n. I think we should have this now, we can investigate the hang later on. I'll create a ticket.\n. @mpscholten Did you review the rest as well? :)\n. See #279 \n. @mpscholten I don't know. I edited this into the description earlier. Feel free to find out.\n. #331 fixed hanging on PHP 5.2.\n. #317 has been adjusted to be skip on PHP 5.3.3. Everything else passes. So the issue basically only remains in internal mode on PHP 5.3.3. This is possibly a weirdness in PHP that has been fixed in later PHP 5.3 releases, as the PHP 5.3 environment passes. cc @terrafrost \n. #317 used to also affect GMP as per https://github.com/phpseclib/phpseclib/pull/317#issuecomment-40294028. The conclusion with regards to that is that maybe because the test used to use randomness instead of a fixed value, there may also be values where the hang is reproducible with GMP.\n. How does your callback look like? I have the feeling (without looking into it) it might work with a function but not with a method on an object.\n. I agree with the patch and think this should be changed. Do you know whether this patch is complete, i.e. whether there are any other such callbacks that should be changed?\n. What did you grep for?\n. Reproduction:\nphp -r \"class c { function m() { echo 'm'; } } \\$c = new c; \\$d = array(\\$c, 'm'); \\$d();\"\nthrows\n\"PHP Fatal error:  Function name must be a string in Command line code on line 1\"\non PHP 5.3\n. This is weird indeed. https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/BigInteger.php#L1723\n. This is expected to fail in the PHP 5.3 environment only.\n. Working as expected.\n. Please include steps to reproduce.\n. There happens to be a test case for exactly this, assuming I am not missing anything. https://github.com/phpseclib/phpseclib/blob/master/tests/Math/BigInteger/TestCase.php#L245\nWhich version are you using?\n. Please provide (a lot) more info. Which OS? Which PHP version? 32bit or 64bit?\n. > phpseclib 0.1.0\nThat is pretty pretty pretty old. Please upgrade to the latest version.\n. The first code block you quoted is never reached when bcmath is used, it is only used in native mode.\n``` php\n        switch ( MATH_BIGINTEGER_MODE ) {\n            case MATH_BIGINTEGER_MODE_GMP:\n                return gmp_strval($this->value);\n            case MATH_BIGINTEGER_MODE_BCMATH:\n                if ($this->value === '0') {\n                    return '0';\n                }\n            return ltrim($this->value, '0');\n    }\n\n```\n. No problem.\n. The latest version is 0.3.6\nafischer@leonard:~/code/phpseclib (master) phpseclib $ grep \"@version\" . -Ri\n./File/ASN1.php: * @version 0.3.0\n./File/ASN1.php: * @version 0.3.0\n./File/ASN1/Element.php: * @version 0.3.0\n./File/ANSI.php: * @version 0.3.0\n./File/X509.php: * @version 0.3.1\n./Net/SSH2.php: * @version 0.1.0\n./Net/SFTP/Stream.php: * @version 0.3.2\n./Net/SSH1.php: * @version 0.1.0\n./Net/SCP.php: * @version 0.1.0\n./Net/SFTP.php: * @version 0.1.0\n./Crypt/Rijndael.php: * @version 0.1.0\n./Crypt/TripleDES.php: * @version 0.1.0\n./Crypt/AES.php: * @version 0.1.0\n./Crypt/Hash.php: * @version 0.1.0\n./Crypt/RSA.php: * @version 0.1.0\n./Crypt/Blowfish.php: * @version   1.0\n./Crypt/Blowfish.php: * @version 1.0\n./Crypt/Base.php: * @version   1.0.1\n./Crypt/Base.php: * @version 1.0.0\n./Crypt/DES.php: * @version 0.1.0\n./Crypt/Twofish.php: * @version   1.0\n./Crypt/Twofish.php: * @version 1.0\n./Crypt/RC2.php: * @version 0.1.1\n./Crypt/RC4.php: * @version 0.1.0\n./Math/BigInteger.php: * @version 1.0.0RC4\n./System/SSH_Agent.php: * @version 0.1.0\n./System/SSH_Agent.php: * @version 0.1.0\n. Or is @version supposed to mean the version of introduction of the file/class/method/function/whatever (@since is usually used for that)? But then 1.0.0RC4 doesn't make any sense becase we are not there yet. Or are we using different versions for each PEAR package?\n. Oh sorry for the confusion. Thats why i was thinking we should maybe just\ndrop them. People use them to tell us the version when reporting issues but\nthese dont contribute any actual information.\n. See https://github.com/phpseclib/phpseclib/issues/272#issuecomment-36950224\n. I don't think we should have this patch before the actual issue that is being fixed is explained in more detail. See https://github.com/phpseclib/phpseclib/issues/272#issuecomment-37197786\n. @terrafrost Hmm. This is a rather ugly problem. Maybe we should just break BC and move on.\n. Closing this in favour of #300.\n. @petrich @terrafrost \n. Yeah, CodeSniffer does not complain either.\n. See https://github.com/phpseclib/phpseclib/pull/217#issuecomment-31058558 and all the other pull requests/issues where this issue has been discussed previously.\n. Net_SFTP/Net_SSH2 has been designed like that back then. It is probably time to rethink it.\nSee e.g. https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SFTP.php#L1924\n. @terrafrost See https://gist.github.com/bantu/886ac680b0aef5812f71 ;-)\n. Not sure we want to work around that, having a correct timezone set is a rather basic assumption nowadays.\n. A possible workaround that could be used by phpseclib can be found at https://github.com/phpbb/phpbb/blob/develop/phpBB/includes/startup.php#L122, but I would argue that we are just a library and setting a correct timezone is the responsibility of the application. I would suggest you do what the error message suggests, i.e. set a timezone in your php.ini.\n. @michael-dev And resolution to this is? :-P\n. Good catch.\n. I'm not sure what happened to the commit 3caaa91160d7e59569362928241f685d967d3722. It seems to be on master, but probably was reverted later on.\nI would haved voted against accepting 3caaa91160d7e59569362928241f685d967d3722 into phpseclib. Exceptions should be done properly, by defining our own exceptions where necessary and reusing SPL exceptions where possible.\nI would suggest you just register an error handler that turns errors into exceptions. Granularity wise this is just as good as 3caaa91160d7e59569362928241f685d967d3722.\n. @alexandresalome The master branch is living in PHP4 land. There is a php5 branch which I am (slowly) trying to bring up to Symfony-like quality, but there is only so much I can do in my free time. If this is a priority for you, consider sending money my way so I can allocate some of my work time.\n. > very strange thing: only when I add define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); the upload is working (with the log prints on the screen)\nI think we have seen this \"fixing effect\" of logging before. It is possible that logging changes timings a bit and magically makes things work.\n. CentOS 6.3 seems to have OpenSSH 5.3p1 and PHP 5.3.3 (probably with patches).\n. @Adidi I guess it would also be useful to debugging if you would post a list of PHP extensions you have installed as this may influence the execution path in some of our crypto classes.\n. @Adidi Can you please try the latest master branch? This should be fixed by #538\n. Accepting due to https://github.com/phpseclib/phpseclib/issues/292#issuecomment-37636699\n. CodeSniffer complains about\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/System/SSH_Agent.php\n\nFOUND 2 ERROR(S) AFFECTING 1 LINE(S)\n\n2 | ERROR | Missing file doc comment (PEAR.Commenting.FileComment.Missing)\n2 | ERROR | File is being unconditionally included; use \"require_once\" instead\n| | (PEAR.Files.IncludingFile.UseRequireOnce)\n\n```\n. Add empty line at end of file and we are good to go.\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/System/SSH_Agent.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n\n39 | ERROR | Expected 1 newline at end of file; 0 found\n| | (PSR2.Files.EndFileNewline.NoneFound)\n\n```\n. @terrafrost It seems you changed the wrong file.\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n\n313 | ERROR | Expected 1 blank line at end of file; 2 found\n| | (PSR2.Files.EndFileNewline.TooMany)\n\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/System/SSH_Agent.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n\n39 | ERROR | Expected 1 newline at end of file; 0 found\n| | (PSR2.Files.EndFileNewline.NoneFound)\n\n. Closing in favour of #304.\n.\nfind . -type f -name \".php\" -exec sed -i \"s/include((.));/include \\1;/\" {} \\;\n```\n. @PVince81 If you are able to consistently reproduce this, please try the latest release of phpseclib and then the latest development version and see whether it is fixed.\n. @PVince81 Specifically 466f9354dfe49554b23f10e723903c14d81dbc07 which follows 0.3.5 and precedes 0.3.6 might be related here. The diff between the two versions is rather huge, btw. ownCloud should probably upgrade as there are also speed improvements.\nAlso I am not able to reproduce your issue with the following work-in-progress phpseclib testcase.\n``` php\nrequire_once 'Net/SFTP/Stream.php';\nclass Net_SFTPStreamFunctionalTest extends PhpseclibFunctionalTestCase\n{\n    protected $urlBase;\npublic function setUp()\n{\n    if (getenv('TRAVIS') && version_compare(PHP_VERSION, '5.3.3', '<=')) {\n        /*$this->markTestIncomplete(\n            'This test hangs on Travis CI on PHP 5.3.3 and below.'\n        );*/\n    }\n    parent::setUp();\n    $this->urlBase = sprintf(\n        'sftp://%s:%s@%s',\n        $this->getEnv('SSH_USERNAME'),\n        $this->getEnv('SSH_PASSWORD'),\n        $this->getEnv('SSH_HOSTNAME')\n    );\n}\n\npublic function testStreamRead()\n{\n    $handle = fopen(\"{$this->urlBase}/home/phpseclib/examples.desktop\", 'r');\n    $data = stream_get_contents($handle);\n    fclose($handle);\n    var_dump(strlen($data));\n}\n\n}\n```\noutputs\nint(8980)\n. The SSH tests started failing after setting home directory. This is weird\nand needs debugging.\n. @terrafrost This PR contains the actual test code now. I had it removed earlier to test something. Setup of the home directory has been extracted into #307 now.\n. Rebased onto master. This should no longer fail now.\n. @terrafrost Please have a look at why this is failing.\nHere is the log. https://travis-ci.org/phpseclib/phpseclib/jobs/22406641#L487\n. I think I got this. The callback is never called because executing \"ls\" in an empty folder returns nothing and thus the callback is not called. Not sure whether this is expected behaviour.\n. @terrafrost Prior to this patch, the home folder of the phpseclib user on Travis CI was / which clearly is not empty, but also not writable and thus can not be used for write tests. With this patch the home folder is now set to /home/phpseclib and the folder is created and made writable. Since this is a new folder without template, it is just empty. Running ls via exec() does not contain . and .. and this is the expected behaviour. I have a similar setup locally but because new users get a default template, the phpseclib user home folder contains an examples.desktop file or so here.\n. The only remaining question here is whether the callback should be called when no data is returned at all, i.e. whether it should be called with an empty string or so.\n. I am using pwd instead of ls now which does not return empty data.\n. Let's try to have #306 first for better testing.\n. The newly added SFTP tests fail with these changes now.\n. @terrafrost This only happens on PHP 5.3.3. The problem was probably fixed in a later version of PHP 5.3.\n. @terrafrost Can you construct a test case that fails without this patch and passes with this patch (regression testing)? It seems like the information in #275 is sufficient to construct one.\n. ```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/File/ASN1.php\n\nFOUND 2 ERROR(S) AFFECTING 1 LINE(S)\n\n983 | ERROR | Expected \"if (...) {\\n\"; found \"if (...)\\n\n| | {\\n\" (PEAR.ControlStructures.ControlSignature)\n983 | ERROR | There must be a single space between the closing parenthesis and\n| | the opening brace of a multi-line IF statement; found newline\n| | (PEAR.ControlStructures.MultiLineCondition.NewlineBeforeOpenBrace)\n\n``\n. @terrafrost There are logs now. The hang seems to be in-> NET_SSH2_MSG_KEXINIT`.\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/22854815#L321\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/22854816#L413\n. The problem seems to be somewhere in this block\n``` php\n        // For both diffie-hellman-group1-sha1 and diffie-hellman-group14-sha1\n        // the generator field element is 2 (decimal) and the hash function is sha1.\n        $g = new Math_BigInteger(2);\n        $prime = new Math_BigInteger($prime, 16);\n        $kexHash = new Crypt_Hash('sha1');\n        //$q = $p->bitwise_rightShift(1);\n    /* To increase the speed of the key exchange, both client and server may\n       reduce the size of their private exponents.  It should be at least\n       twice as long as the key material that is generated from the shared\n       secret.  For more details, see the paper by van Oorschot and Wiener\n       [VAN-OORSCHOT].\n\n       -- http://tools.ietf.org/html/rfc4419#section-6.2 */\n    $one = new Math_BigInteger(1);\n    $keyLength = min($keyLength, $kexHash->getLength());\n    $max = $one->bitwise_leftShift(16 * $keyLength); // 2 * 8 * $keyLength\n    $max = $max->subtract($one);\n\n    $x = $one->random($one, $max);\n    $e = $g->modPow($x, $prime);\n\n    $eBytes = $e->toBytes(true);\n    $data = pack('CNa*', NET_SSH2_MSG_KEXDH_INIT, strlen($eBytes), $eBytes);\n\n``\n. Problem seems to be in$e = $g->modPow($x, $prime);`\n. This pull request has been cleaned up as #317 reproduces the problem.\n. @terrafrost Please review\n. @terrafrost You are correct that phpseclib does not have any dependencies for production. It has phpunit, codesniffer and phing as development dependencies. Do you think it would be a good idea to make this more clear by using \"Development Dependencies\" instead of \"Dependencies\"?\n. @terrafrost Updated\n. This indeed reproduces #279.\n. This affects bcmath on PHP 5.2 as per https://travis-ci.org/phpseclib/phpseclib/jobs/22854815#L210\nThis affects gmp on PHP 5.3.3 as per https://travis-ci.org/phpseclib/phpseclib/jobs/22854816#L302\n. Also affects internal on 5.3.3.\n. It would probably make sense to fix the private values instead of generating them.\n. I have the feeling there is an endless loop somewhere. Possibly involving the following block in Math_BigInteger.\nphp\n        while ( $x->compare($temp) >= 0 ) {\n            // calculate the \"common residue\"\n            ++$quotient_value[$x_max - $y_max];\n            $x = $x->subtract($temp);\n            $x_max = count($x->value) - 1;\n        }\n. Depends on #331 \n. #331 has been merged. This test hangs on PHP 5.3.3, so I am going to mark the test incomplete on that version, so this can be merged, as it is useful to prevent regressions.\n. > Does that mean that prior to the #331 fix that, on Travis, 5.2 and 5.3 froze, and that after that fix that only 5.3 froze and that 5.2 worked fine?\nThat is correct and also why I merged your fix albeit it didn't fix all problems.\nTravis CI results including this test case:\n- Test Suite on PHP 5.2 passes in about 2 minutes.\n- Test Suite on PHP 5.3 (this is usually the latest release) passes in about 2 minutes.\n- Test Suite on PHP 5.3.3 takes more than 10 minutes and eventually gets aborted due to timeout.\nThis suggests incompatibility with 5.3.3, possibly due to PHP bugs.\nThe current DiffieHellman Test Case I have here in this PR fails in the 5.3.3 Internal Test. And then there is https://travis-ci.org/phpseclib/phpseclib/jobs/22854816#L302 which hangs on 5.3.3 and seems to use GMP. My current explaination for this test case not reproducing the GMP hang is that the values are no longer taken from random but fixed. Maybe GMP hang can be reproduced with different Diffie-Hellman parameters.\n. > Fatal error: Class 'Phar' not found in /home/travis/.phpenv/versions/5.2.17/bin/composer.phar on line 13\nThat is an unrelated error.\n. @terrafrost You might want to try a different (probably older) compiler or just Ubuntu 12.04. I can compile 5.3.3 on there just fine.\n. This is a PR with a useful patch that should be merged to test all the other environments.\n. @terrafrost Please review\n. Bump. @sobit \n. See all the other issues that have been closed ...\n. Laravel?\n. See e.g. #217\n. Installed packages\ni   php5-cli                        - command-line interpreter for the php5 scri\ni A php5-common                     - Common files for packages built from the p\ni   php5-fpm                        - server-side, HTML-embedded scripting langu\ni   php5-memcached                  - memcached extension module for PHP5, uses \ni   php5-pgsql                      - PostgreSQL module for php5\n. mcrypt would be an extra module in this case, not sure why we expect it to be there.\np   php5-mcrypt                     - MCrypt module for php5\n. Well, sure, this is kind of contained in #322.\n. @aequasi Errm, sorry, yes. I was confused for a moment.\n. 28f18f83ec1476a028a81fe71152978ed792b8a6 is related. Needs more research.\n. @terrafrost It (http://www.phptherightway.com/) does not mention function_exists because it largely uses object orientation and autoloading. Which means you'll just have this as a method and the class definition can be autoloaded. No need for function_exists at all.\n. Closed by #508\n. What is deployer.phar? How do you load the Net_SSH2 class? Sounds like broken autoloading for the Crypt_ classes.\n. I think that \"lack of proper architecture\" and \"bad organisation of code\" are very legitimate reasons and this patch is not of acceptable quality.\n. Confirming fix. Great work.\n. Consider squashing all commits into one commit.\n. Tests with only Diffie-Hellman Test (#317) hang on PHP 5.2 and PHP 5.3 as per https://travis-ci.org/phpseclib/phpseclib/builds/23634384\nTests with Diffie-Hellman Test (#317) and this fix (#331) have the hang on PHP 5.2 fixed, but still hang on PHP 5.3. See https://travis-ci.org/bantu/phpseclib/builds/23634661\n. You can use interactive rebase to squash. E.g. git rebase -i HEAD~4 if you have 4 commits. Then mark the second and third commit as \"fixup\" (by changing from \"pick\").\n. Ubuntu only has one version of PHP. Ubuntu 12.04 has 5.3.10 with patches on top. The 5.3.3 version run on Travis was compiled by Travis and should not have any additional patches.\n. The whole test suite takes more than 10 Minutes while it takes about 1 Minute on a passing PHP version.\nSmeans that a test has been skipped. You can look at a test run where the test suite completed to get an indication of which tests were skipped.\n. The hang is gone on 5.3.10-1ubuntu3.11.\n``` shell\n$:~/phpseclib (master) $ git reset --hard origin/master \nHEAD is now at 60a9631 Merge pull request #206 from bantu/cs-function-call-signature-indent\n$:~/phpseclib (master) $ git merge --no-ff origin/BigInteger-DiffieHellman-Test \nMerge made by the 'recursive' strategy.\n tests/Math/BigInteger/TestCase.php |   57 ++++++++++++++++++++++++++++++++++++\n 1 file changed, 57 insertions(+)\n$:~/phpseclib (master) $ git merge --no-ff terrafrost/int64-fix \nMerge made by the 'recursive' strategy.\n phpseclib/Math/BigInteger.php          |   89 +++++++++++++++++++++++++-------\n tests/Math/BigInteger/InternalTest.php |    7 +++\n 2 files changed, 76 insertions(+), 20 deletions(-)\n$:~/phpseclib (master) $ find tests/Math/BigInteger -type f -name \"*Test.php\" -exec sh -c \"echo Running {}; vendor/bin/phpunit {}\" \\;\nRunning tests/Math/BigInteger/InternalOpenSSLTest.php\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/.../phpseclib/phpunit.xml.dist\n...........................\nTime: 186 ms, Memory: 7.25Mb\nOK (27 tests, 54 assertions)\nRunning tests/Math/BigInteger/GMPTest.php\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/.../phpseclib/phpunit.xml.dist\nSSSSSSSSSSSSSSSSSSSSSSSSSSS\nTime: 0 ms, Memory: 7.00Mb\nNo tests executed!\nRunning tests/Math/BigInteger/BCMathTest.php\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/.../phpseclib/phpunit.xml.dist\n...........................\nTime: 105 ms, Memory: 7.25Mb\nOK (27 tests, 54 assertions)\nRunning tests/Math/BigInteger/InternalTest.php\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/.../phpseclib/phpunit.xml.dist\n............................\nTime: 21.75 seconds, Memory: 7.75Mb\nOK (28 tests, 55 assertions)\n$:~/phpseclib (master) $ php -v\nPHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Apr  4 2014 01:30:04) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies\n``\n. Squashed + Merged via 431e3a04c73c72b516b6b11bd23d93c36115f01d\n. @terrafrost This is a pull request that has been merged, so it should be closed. The initial hang problem ticket is #279, which is still open.\n. mcrypt is not a dependency, not even a dev dependency. This is either a bug in the test or the ssh identifier implmenetation as per #321 \n. @terrafrost will be interested in the use case for this as you are not supposed to define this on your own and including the file twice will result in a \"can not redeclare function crypt_random_string\" error.\n. @mbfisher Care to explain why this is necessary? See above. Thanks.\n. @mbfisher phpunit does not undefine constants, even when running with process isolation. That might be it.\n. Everything would be so much nicer if there would be a Float64 and Int64 driver for BigInteger.\n. Are any additional properties of$source` known at this point? Is the integer known to be unsigned/signed?\n. Sorry, I missed this. I'll write some tests for the new public functions and then merge this.\n. Please merge https://github.com/terrafrost/phpseclib/pull/2 into this.\n. > terrafrost#2 has been merged into this along with a new commit.\nThis does not seem to have happened.\n\nAlthough tbh I think it'd make more sense (esp. given the title of this PR) if the other PR were kept.\n\nThen you do not know whether the code you're adding actually works. It is quite common to require tests for every new feature and regression tests for every bug fix commited alongside with the actual code.\n. I'll review this again as soon as the tests are merged into this and pass.\n. > I thought you were going to be writing the tests for this?\nYes, that is what I did. In the PR I linked to I'm requesting these tests to be merged into the branch of this PR such that both can be merged at the same time into master. The screenshot only shows that I referenced this PR from my PR. On the right you can see that it is still open.\n. I think you may have misunderstood. I never requested nlist etc. being merged into this PR. I requested https://github.com/terrafrost/phpseclib/pull/2 to be merged into this PR which contains tests for file_exists, is_dir and is_file.\n. It seems I misread too, since it is #339 that is referenced on your screenshot. Anyway, let me clean up the confusion.\n. @terrafrost Can we merge this and handle the outstanding issues in new PRs?\n. @terrafrost I think this information might be something that you might want to document in the actual source file instead of tracker tickets. :-)\n. Please remove the static variables. We want to be able to have multiple Net_SFTP objects and static variables are ugly for testing.\n. E.g. to get rid of static $depth, just pass it around as a method argument (default 0). If you do not want to expose that parameter to the public, wrap a public method around an internal method.\n. You might want to just search for articles explaining why they are bad. There are probably people who can explain this in more detail and a lot better than I can.\nIn these two cases you are basically abusing a static variable to pass a function argument that you do not actually want to be a function argument. Using a global variable would basically have had the same effect. The assignment $depth = 0 only \"works\" on first visit of that line and as such you have to be very careful to always restore the previous value when you're done. It is neither clean nor robust.\nThe better solution to this is to have a non-public method where you can use the actual function arguments as you would actually want to. On second thought it does not even seem to be necessary to use recursion, which has its own set of disadvantages (the only advantage usually being that it is easy to implement/understand). So you can probably rather easily get rid of both \"problems\" just by refactoring into non-recursive style.\nhttp://r.je/static-methods-bad-practice.html has some OOP thoughts about static in general I find rather interesting, not static function variables in particular.\n. By the way, the proper PHP5 OOP solution to this is to implement an Iterator (see e.g. http://www.php.net/manual/en/class.iterator.php, but more importantly http://www.php.net/manual/de/class.directoryiterator.php and http://www.php.net/manual/de/class.recursivedirectoryiterator.php) which can be used in e.g. a foreach loop.\nBenefits:\n- Return earlier (no need to read the whole directory tree right away)\n- Less memory (no need to keep the whole directory tree in memory, e.g. in an array)\n- No unnecessary transfer (maybe someone just wants the first 120 files and then breaks out of the loop)\nIf someone really needs an array with the whole structure, they can call iterator_to_array().\n. For reference: https://github.com/phpseclib/phpseclib/issues/434#issuecomment-50597527\n. @terrafrost You may have broken is_file.\n. You will have to define some environment constants (or manually hack them into $_SERVER) in order to run functional tests. See https://github.com/phpseclib/phpseclib/blob/master/travis/run-phpunit.sh#L5\n. SFTPFunctionalTest is kind of a scenario that gets walked through from top to bottom. The whole thing starts here https://github.com/phpseclib/phpseclib/blob/master/tests/Net/SFTPFunctionalTest.php#L30 The file is created here https://github.com/phpseclib/phpseclib/blob/master/tests/Net/SFTPFunctionalTest.php#L132\n. $result = $this->_query_stat_cache($path); returns an array which is not false, but is an array, so !is_array($result) is false.\n. The put() method does not seem to have any cache handling.\n. Passes with disableStatCache().\n. @terrafrost Please add documentation for value the stat cache can hold. This array to object and back is scary. What is the meaning of an empty array? What is the meaning of int(0)?\n. > Why? Files are objects and directories are arrays. If both were arrays than how would you know? \nBoth an object and an array are actually stat arrays, right? So I would know if it's a directory by checking whatever is_dir checks, possibly $stat['type'] == 1 or so.\n. I would also appreciate if the benefits of using a hierarchical cache (using sub-arrays) over a key-value cache mapping filename to stat array, could be documented.\n. Github says this conflicts now since I merged #341 and #342. This does not seem to be true as this merges cleanly into master. I suspect Github will pick this up as you add further changes to this branch.\n. Replaced by #344\n. ```\nPHP Fatal error: Cannot use object of type stdClass as array in /home/travis/build/bantu/phpseclib/phpseclib/Net/SFTP.php on line 996\nPHP Stack trace:\nPHP 1. {main}() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/phpunit:0\nPHP 2. PHPUnit_TextUI_Command::main() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/phpunit:55\nPHP 3. PHPUnit_TextUI_Command->run() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/TextUI/Command.php:132\nPHP 4. PHPUnit_TextUI_TestRunner->doRun() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/TextUI/Command.php:179\nPHP 5. PHPUnit_Framework_TestSuite->run() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:421\nPHP 6. PHPUnit_Framework_TestSuite->run() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestSuite.php:675\nPHP 7. PHPUnit_Framework_TestCase->run() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestSuite.php:675\nPHP 8. PHPUnit_Framework_TestResult->run() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestCase.php:754\nPHP 9. PHPUnit_Framework_TestCase->runBare() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestResult.php:686\nPHP 10. PHPUnit_Framework_TestCase->runTest() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestCase.php:818\nPHP 11. ReflectionMethod->invokeArgs() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestCase.php:952\nPHP 12. Net_SFTPFunctionalTest->testPutSizeGetFile() /home/travis/build/bantu/phpseclib/vendor/phpunit/phpunit/src/Framework/TestCase.php:952\nPHP 13. Net_SFTP->size() /home/travis/build/bantu/phpseclib/tests/Net/SFTPFunctionalTest.php:153\nPHP 14. Net_SFTP->stat() /home/travis/build/bantu/phpseclib/phpseclib/Net/SFTP.php:926\nPHP 15. Net_SFTP->_query_stat_cache() /home/travis/build/bantu/phpseclib/phpseclib/Net/SFTP.php:1025\n```\nYAY\n. I do not like the repetition of the $filename.= '/.'; block, but from the looks of it, it seems fine otherwise.\n. You previously suggested using if (!function_exists('crypt_random_string')) { return; } instead.\n. Okay. https://github.com/phpseclib/phpseclib/pull/350/files?w=1 looks good.\n. For potential issues to fix, see https://scrutinizer-ci.com/g/phpseclib/phpseclib/issues/master\n. Please note that Scrutinizer itself is a rather new service, although the tools used in the background have been existing for some time already. I have noticed myself that not everything is correct and it is far from perfect.\n. This seems to be working okay for analysing pull requests, so let's close this ticket.\n. Okay, I was about to ask whether $scheme can be undefined. Also, this is one of the reasons why one does not use the extract function (it hides data flow).\n. > It's not clear to me what new issues this inspection found.\nDitto.\n. HHVM does not seem to like that phar file. Hrm.\n. No idea what is going on here. clover.xml was successfully uploaded 5 times, yet Scrutinizer is still waiting for more data.\n. @GrahamCampbell https://scrutinizer-ci.com/docs/tools/external-code-coverage/ seems to be pretty clear about this.\n. This apparently was an issue with Scrutinizer and was resolved via IRC.\n. Ah. Now I remember why I didn't do it like that in the first place. This will not end up PSR0 compatible because Phpseclib/Test is not used in the directry structure. So let's go without the prefix.\n. @Esysteme Review of this would be cool\n. I am not able to comment on the actual content of this change, so I only commented on coding style.\n. @terrafrost Code Sniffer is correct. There is whitespace at the end of this line. https://github.com/phpseclib/phpseclib/pull/364/files#diff-f0500f119a16ba4ff6303ba9008b1ce1R986\n. Consider adding a test case. Possibly into tests/Functional/Net/SFTPUserStoryTest.php.\nIn general, you must have tested this somehow. So you should already have test cases somewhere. Ideally these would go into the repository with the implementation. I usually just do my testing with PHPUnit from the start and then end up with test cases basically for free.\n. I am not sure whether there is a difference for arrays, but you should basically always use assertSame instead of assertEquals.\n. The shebang only works with LF line termination AFAIK.\n. Please note that there is a php5 branch in the phpseclib repository and that the php5 repository has been abandoned in favour of that. Please also have a look at our list of issues for things that we would like to fix in there. The php5 branch also already has partial namespacing and PSR-4 autoloading.\nYou seem to have done a lot of work and we are certainly interested in incorporating at least some of that into our repository. However, in order for this to work properly, you will have to submit pull requests that are to the point (i.e. only fix a single issue) such that it can be reviewed properly.\nI would be happy to work with you on getting your change into phpseclib. You can also find me on Freenode IRC #phpseclib-dev. If you would like to start work a right away, I suppose __construct would be good to have next because that is basically a prerequisite for adding namespacing.\n. > I propose you just remove the current PHP fork and replace it with the my new version.\nThis is not going to happen. Code needs to be properly reviewed.\n\nAll other classes don't even use namespaces at all.\n\nI said \"partial\".\n\nAlso, I would recommend against using PSR-4, because PSR-4 forces compliance with the following two rules.\n\nI want all of that and I want to move towards proper abstraction and hierarchy and organise the project into proper components. Adding a top level namespace is good, but not good enough.\n\nIf you want, I could make a fork of the official repo, and replace it with my code. You'll see that the changes are pretty limited and generic, which means there's no point in fixing every single issue one by one.\n\nFeel free to do so and we'll see.\n. The php5 branch is a development branch that is not only supposed to add namespaces. It is supposed to bring phpseclib up to par with other projects such as Symfony architecture wise (https://github.com/symfony/symfony/tree/master/src/Symfony/Component). For example, you may have come across copy-pasted code, huge classes, huge methods and use of defined constants where a driver architecture should be used instead.\nLet's take the BigInteger class as an example. It contains three or four different driver implementations that should be extracted into their own classes. Furthermore, it works perfectly on its own without any other dependencies in phpseclib, so it should be published as its own package too (hence PSR4).\nI see that your changes may be useful to others who really just want namespaces on top of the master branch. Please publish them and maybe we can agree on adding another branch that is master + namespacing only.\n. I didn't review this too carefully. I think it looks kind of good. It looks like the Scrutinizer inspection never finished, though. \n. > I would really love to know how that last commit introduced this as an error (from Travis CI)\nThat was actually my fault then. Fixing.\n. See #381\n. One of the tests must be leading to the use of Crypt_TripleDES with this patch. It might also just be random.\n. > Does closing / re-opening cause Travis CI to rerun?\nYes, I think so.\n. This is the first time I actually did this myself.\n. This should be good to go. Are you aware that this breaks BC because false is no longer replaced with an instance of 0 etc?\n. I agree. Just making sure. ;-)\n. Thanks for your submission. Don't bother trying to make this pass on Travis. I don't think this is something we would like to accept as is.\n. > I still don't see why.\nIt was decided that the phpseclib namespace is \"phpseclib\". The class loader is not object oriented and furthermore just not required (we are already using composer). There are arbitrary changes such as removal of spaces. The move into the vendors folder is not necessary. The submission of a patch does not make you an author of phpseclib. The only useful thing I see is the introduction of the namespace, which we can consider adding another branch for.\n\nIf you want to evolve towards a Symfony-like framework, it would make most sense to follow this procedure\n\nWe have tried this and I strongly disagree. When a patch gets merged into master, master needs to be merged into the new branch and whoever does that has to resolve the conflicts right away. The master branch will eventually die and PHP4 support is dropped.\nI am sorry for wasting your time, but I have the feeling I am also wasting mine here.\n. Hehe, now Code Sniffer realises these are pointless parent calls. Hmm.\n. @terrafrost Sounds good. Only here or in master too?\n. Rebased.\n. Yeah, I have been thinking about that too and agree with you.\n. stream_resolve_include_path is PHP 5.3.2\n. > stream_resolve_include_path is PHP 5.3.2\nI missed that you actually added the function.\n. @terrafrost No idea. Can you try PHP 5.2 locally?\n. PHPUnit has many branches and rapid development. The PHP 5.2 environment is using 3.6, so that is the branch you have to be looking at. I don' think Travis CI is using custom version.\nPlease revert this pull request to its original state. I am pretty sure this is caused by our definition of stream_resolve_include_path which is not 100% compatible with PHPs. This should either be fixed or the function should be renamed.\n. See https://github.com/sebastianbergmann/phpunit/blob/3.6.12/PHPUnit/Util/Filesystem.php#L83\n. Travis CI is using a phar, so this might be caused by this line https://github.com/phpseclib/phpseclib/pull/379/files#diff-b08ee4e00815fdb38838fb5016bd2ee4R277\n. If we define a broken PHP function, this does not only affect our testing, this can also affect production environments.\n. I would propose to define phpseclib_is_includable instead which uses stream_resolve_include_path if available.\n. I was wrong, it's not using a phar, it's using pear. https://travis-ci.org/phpseclib/phpseclib/jobs/27736146#L212\n. Pleaes remove the last two commits. E.g. by running git reset --hard 82b5e02\n. I'll take care of this.\n. Closing this in favour of #385.\n. Can you add a functional test for this? Basically just make sure that a string is returned without being logged in. This should fail without this patch, right?\n. > Maybe I could just add a new function while retaining all the old ones\nYeah that sounds okay. Just add further test methods to the end. You don't have to check the constructor again, though, since that's checked by another method already.\n. > Oh - I wonder if this should be submitted as a bug to HHVM?\nI am pretty sure they don't care much about PHP4 compatibility, but feel free to report it.\n. @terrafrost This seems to work for what we are using it for. Coming up with a fully compatible stream_resolve_include_path function is just not something we have to do.\n. Furthermore PHP 5.2 is just almost as dead as PHP 4 is, so I would not invest more time into this.\n. I am not sure. I remember realpath() having issues on some platforms, not sure, though. I think it might be safer to just use this PR as is. Afterall, we can not be sure there are not any other stream_resolve_include_path incompatibilities.\n. Cherry-picked commit.\n. I think we probably should drop this method https://github.com/bantu/phpseclib/blob/cbac8768ef4237a49215adbe958d816b4b7326f1/phpseclib/Net/SSH2.php#L3782\n. @terrafrost Don't worry. It's trivial to do. Done. I will be leaving shortly, though.\n. Sure. Was thinking of that already. Lets merge this first though.\n. Consider adding some tests. In the existing SFTP scenario you can at least test readlink against symlink. Another test case testing SFTP against the local file system functions would probably be useful, but can be done in another PR.\n. @terrafrost I don't think so.\n. Please make sure to remove whitespace at the end of lines. Most editors also have an option for that.\n. How does one test this? What is your use case?\n. > I mean, really, for most commands, the width and height don't even matter. \nThat was my impression as well and is why I was asking for their use case. I would at least try to reproduce that. The patch looks fine to me otherwise (with the spaces fixed).\n. Okay, great. I assume it is save to assume that function stream_wrapper_register exists then.\n. Ref b242259d17b0f56614a3fa7736b7834d1129c3e6 o_O\n. The static keyword will probably produce a parse error when used on PHP4. There is not much that can be done about that.\n. There is no harm in always just quoting the filename.\n. \"scp -t '$filename'\" should work\n. @terrafrost Any objections?\n. RFC7465 now prohibits the use of RC4 in TLS.\n. > Do you need help with this one?\nFeel free to (help) implement this via libsodium. I believe this will be a bit more complex than https://github.com/phpseclib/phpseclib/pull/755/files?w=0 though.\n. > If the only encryption algorithm the destination server supports is 'arcfour' then removing it will prevent phpseclib from connecting all together.\nThat is the idea. \"Secure or fail\" instead of \"Better than nothing\".\n. @terrafrost I am not too sure about how SSH2 works right now, but isn't it the case that a man in the middle can replace the list of offered ciphers and as such downgrade to arcfour (or even none, if the server allows that)?\nThere seems to have been an attempt to get the arcfour ciphers deprecated via specification (see http://www.ietf.org/mail-archive/web/ietf/current/msg35524.html and following). I have no idea why this has not gone anywhere (as this was 10 years ago). At least distributions still seem to deliver OpenSSH that support arcfour right now. I could also be missing something here.\n. > And if the server supports the algorithm it seems the server would be just as \"guilty\".\nYes, possibly. But just blaming each other leads to no progress.\n. @tseugasa This should, if at all, be a new independent issue/ticket.\n. @bweston92 Which version? This should be fixed in 0.3.6.\n. Apparently not fixed in 0.3.6 (https://github.com/phpseclib/phpseclib/tree/0.3.6/phpseclib/System). Fixed in master, though.\n. Sorry, ticket closing was not intentional at all.\n. @terrafrost We might just want to release 0.3.7 soon. https://github.com/phpseclib/phpseclib/compare/0.3.6...master\n. I am not sure we should be checking return code. This sounds more like an\nissue that is better resolved using a \"requested more than available\"\nexception.\n. - return value\n. I don't see why this patch should be accepted. The remaining classes should eventually be namespaced in phpseclib. Anyone adding namespacing before packaging phpseclib will just also have to apply this patch if that is required for their namespacing.\n. @xrobau Can you please provide more details? Example code? Reproduction instructions?\n. @xrobau These are generic examples. Please demonstrate how this affects phpseclib.\n. As per our discussion on IRC:\n- This patch is only required when someone patches phpseclib to add namespacing.\n- We do not want this patch, instead we want to have proper PSR4 namespacing.\n- Anyone patching phpseclib \"manually\" to add namespacing will just have to also have this patch.\n- @xrobau wants to help with further PSR4 namespacing phpseclib.\n  Closing as such.\n. @livevilfr Which version of phpseclib are you using?\n. > If known_hosts support were to be added to be phpseclib I'd greatly prefer it if it was done in it's own file. \nYes, certainly a new class should be added.\n\nBut if it were what would the API look like?\n\nHaven't thought too much about that. It is basically about storing public host keys and telling whether host keys of hosts have changed:\n- The constructor should take the path to the known_hosts file\n- verify/isKnown/validate/whatever() takes an instance of Net_SSH2 $ssh2 and returns a boolean saying whether the public host key is known using the hostname it gets from $ssh2 and $ssh2->getServerPublicHostKey().\n- add() takes an instance of Net_SSH2 and adds the SSH host key to the file and returns null.\n. Actually, verify() will have to return 3-state, e.g.\n- false (host key mismatch)\n- null (host key unknown)\n- true (host key match)\n. Strict usage (Man in the middle protection starting with first connection):\nif (!$knownHosts->verify($ssh2)) {\n    // abort \n}\nNon-strict usage (Man in the middle protection starting with second connection):\nif ($knownHosts->verify($ssh2) === false) {\n    // abort \n} else {\n    $knownHosts->add($ssh2)\n}\n. add() could return feedback whether the key was already in the file, if that is easily possible (probably yes because duplicates should probably be checked).\n. $knownHosts->verify($ssh2) must be called before login().\n. Then maybe also delete($hostname) for completeness.\n. > Seems like it could be a good Google Summer of Code project!\nThis is probably a day of work, if at all, not a summer of work. ;)\n. I am fine with only supporting the hashed 4.0 format.\n. @terrafrost Done.\n. @terrafrost Could this be caused by 7a2c7a414c08d28f0700c7f6f8686a9e0e246a44 ? I have this commit somehow in mind, but can't remember exactly why. I will try to reproduce this myself tomorrow or so.\n. Should probably keep the \"invalid size\" problem in this ticket, but see #415 for reproduction. I kind of found this by accident.\n. You will have to return the sftp object for the next test. :-)\n. Verified this fails with \"PHP Fatal error:  Cannot use object of type stdClass as array\" after reverting fe7fd97b59fb9ae208eec8fe79129c54f8e57683.\n. Tests on Travis fail: https://travis-ci.org/phpseclib/phpseclib/builds/30189492\n. PHP Fatal error:  Cannot use object of type stdClass as array in /home/travis/build/phpseclib/phpseclib/phpseclib/Net/SFTP.php on line 1065\n. That the test is failing very likely just indicates there is still a\nproblem that needs to be addressed in actual code. Did you look into that?\n. @terrafrost https://github.com/bantu/phpseclib/compare/terrafrost:stat-cache-fix...bantu:stat-cache-fix fails at $this->assertTrue($sftp->is_dir($name)); at line 362.\n. This is good, but I think we should have the assertions too. Even if they do not have pretty fail messages. Will create a new PR for that.\n. @terrafrost Would be cool if you could look into the \"invalid size\" problem (#408) which seems to be consistently reproducable by these tests.\n. Rebased\n. Rebased again to add github408.\n. Not all of these issues seem to be actual issues. Some seem to be related to the use of func_get_args() and friends.\n. Awesome :+1: \n. This is a rather minor issue because it's in the error path.\n. Thanks a lot for this patch. Seems to be rather low hanging fruit easy to review. What do you think about swapping hmac-sha2-512 and hmac-sha2-256?\n. > Some security standards now recommend to disable MD5 and SHA1\nI think this makes sense. It is similar to https://github.com/phpseclib/phpseclib/pull/406#issuecomment-49572156. I have written this up somewhat properly at #424 now.\n\nbut if the server would support both hmac-sha2-256 and hmac-sha2-512, I would expect the client to prefer the most secure option.\n\nThat's not really how it works because there is a performance penalty for using the \"better\" SHA2-512. It is kind of similar to using AES-256 instead of AES-128, while the latter is sufficient for most if not all applications.\n\nBut from paramiko I can see that aes128-ctr is preferred over aes256-ctr, and over aes128-cbc, possibly because of performance reasons.\n\nExactly.\n\nit is preferring 3DES (even CTR) over AES\n\nI can't imagine that. Doesn't sound like a good idea to me. 3DES should be rather slow. Can you point to where this is happening?\n. https://github.com/dagwieers/phpseclib/commit/33d0191bbb642dd914203aed40184417392c3d97 failed functional tests while https://github.com/dagwieers/phpseclib/commit/67928d3cb2b1f8f860316c21f7997b773af6e1a6 passed. This indicates that there likely still is a problem with SHA512 as of now.\n. > it is preferring 3DES (even CTR) over AES\nYou may have misread. The cipher order should be here: https://github.com/dagwieers/phpseclib/blob/patch-1/phpseclib/Net/SSH2.php#L1096\n. @dagwieers Yes, that might be the cause. Would be great if you could look into it. If you want to get the SHA256 merged, feel free to extract it from this PR into a new PR.\n. @dagwieers Would be great if you could add some very basic tests for SHA512 here https://github.com/phpseclib/phpseclib/tree/master/tests/Unit/Crypt/Hash\n. See https://github.com/phpseclib/phpseclib/pull/426#issuecomment-50231632 for why SHA512 might fail.\n. Replaced by #432\n. Please drop whitespace at end of line 1168.\n. Closing in favour of #429\n. @terrafrost These are not proper test vectors, in particular 'zzzz' is too short. We need proper test vectors in the test suite (e.g. http://tools.ietf.org/html/rfc4231). See #430 for potential cause.\n. Can you remind me of the purpose of the NET_SSH2_MASK_CONSTRUCTOR flag again?\n. Okay, thanks.\nI do not like the duplication that is being introduced. All of these statements should be reducable to something like:\n$this->_try_connect();\nreturn $this->property; // Make the default false and _try_connect() not do any changes to these properties.\nI guess we can merge this as is as a short term solution, unless you want to look into reducing the duplication right now.\n. > I guess we can merge this as is as a short term solution, unless you want to look into reducing the duplication right now.\n@terrafrost Want to look into that any time soon or should this be merged?\n. Let's merge this and see what Sami does with the doc blocks.\n. Useful. I Agree.\n. @FrenkyNet @aramonc I have currently not planned to work in this, but welcome PRs. Thanks.\n. @terrafrost Indeed.\n. This consistently fails locally with\n```\n1) Functional_Net_SSH2Test::testPasswordLogin\nInvalid HMAC\n/home/.../code/phpseclib/phpseclib/Net/SSH2.php:2757\n/home/.../code/phpseclib/phpseclib/Net/SSH2.php:1868\n/home/.../code/phpseclib/phpseclib/Net/SSH2.php:1836\n/home/.../code/phpseclib/phpseclib/Net/SSH2.php:1808\n/home/.../code/phpseclib/tests/Functional/Net/SSH2Test.php:71\n```\n. Fails with 'Connection closed prematurely' on Travis.\n. @terrafrost\nI have fixed the incorrect variable name. Good catch.\nIt still fails with 'Connection closed prematurely' on Travis (should be OpenSSH 5.9).\nIt passes locally (OpenSSH 6.6).\nWhen testing master against an Ubuntu Precise Host (OpenSSH 5.9), it passes.\nWhen testing this against an Ubuntu Precise Host (OpenSSH 5.9), it consistently fails as follows:\n```\nafischer@leonard:~/code/phpseclib (ssh-hmac-sha2-512) $ phpunit\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/afischer/code/phpseclib/phpunit.xml.dist\n...............................................................  63 / 256 ( 24%)\n......................................SSSSSSSSSSSSSSSSSSSSSSSSS 126 / 256 ( 49%)\nSSSS............................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 189 / 256 ( 73%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS............ESSSSSSSSSSSSSSSSSSSESS 252 / 256 ( 98%)\nE\nTime: 2.83 seconds, Memory: 17.75Mb\nThere were 3 errors:\n1) Functional_Net_SFTPUserStoryTest::testPasswordLogin\nunpack(): Type C: not enough input, need 1, have 0\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1415\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1037\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1825\n/home/afischer/code/phpseclib/phpseclib/Net/SFTP.php:426\n/home/afischer/code/phpseclib/tests/Functional/Net/SFTPUserStoryTest.php:51\n2) Functional_Net_SSH2Test::testPreLogin\nunpack(): Type C: not enough input, need 1, have 0\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1415\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1037\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3675\n/home/afischer/code/phpseclib/tests/Functional/Net/SSH2Test.php:46\n3) Functional_Net_SSH2Test::testGetServerPublicHostKey\nConnection closed prematurely\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3149\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1415\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1037\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3675\n/home/afischer/code/phpseclib/tests/Functional/Net/SSH2Test.php:96\nCaused by\nunpack(): Type C: not enough input, need 1, have 0\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1415\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:1037\n/home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3675\n/home/afischer/code/phpseclib/tests/Functional/Net/SSH2Test.php:96\nFAILURES!                                          \nTests: 147, Assertions: 206, Errors: 3, Skipped: 109.\nPHP Notice:  Connection closed prematurely in /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php on line 3149\nPHP Stack trace:\nPHP   1. {main}() /usr/bin/phpunit:0\nPHP   2. PHPUnit_TextUI_Command::main() /usr/bin/phpunit:583\nPHP   3. PHPUnit_TextUI_Command->run() phar:///usr/bin/phpunit/phpunit/TextUI/Command.php:132\nPHP   4. Net_SSH2->__destruct() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:0\nPHP   5. Net_SSH2->disconnect() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:2673\nPHP   6. Net_SFTP->_disconnect() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:2657\nPHP   7. Net_SSH2->_disconnect() /home/afischer/code/phpseclib/phpseclib/Net/SFTP.php:2757\nPHP   8. Net_SSH2->_send_binary_packet() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3383\nPHP   9. user_error() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3149\nPHP Notice:  Connection closed prematurely in /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php on line 3149\nPHP Stack trace:\nPHP   1. {main}() /usr/bin/phpunit:0\nPHP   2. PHPUnit_TextUI_Command::main() /usr/bin/phpunit:583\nPHP   3. PHPUnit_TextUI_Command->run() phar:///usr/bin/phpunit/phpunit/TextUI/Command.php:132\nPHP   4. Net_SSH2->__destruct() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:0\nPHP   5. Net_SSH2->disconnect() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:2673\nPHP   6. Net_SSH2->_disconnect() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:2657\nPHP   7. Net_SSH2->_send_binary_packet() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3383\nPHP   8. user_error() /home/afischer/code/phpseclib/phpseclib/Net/SSH2.php:3149\n```\n. Considering that OpenSSH is probably the main target of SSH2.php, I think it is good that this has been caught, although time-consuming. I think we should just push this back, maybe until after #151 or so. hmac-sha2-256 really should be sufficient and a lot less costly.\n. From a mathematical perspective and without looking too much into the details, I agree that diffie-hellman-group1-sha1 is a too small group for hmac-sha2-512 (requiring 512 random bits).\n. An alternative solution to just doing nothing would be to only offer hmac-sha2-512 if the larger group14 has been chosen.\n. Also, I think that https://github.com/phpseclib/phpseclib/blob/d44e3ccfc9f208cd51761a5427d0689f29012c18/phpseclib/Net/SSH2.php#L1387 might need an adjustment to 2 * sum of any random bits instead of 2 * number of random bits required for encryption, i.e. it should include the number of bits required for MAC etc.\n. diffie-hellman-group1-sha1 is \"Oakley Group 2\", a 1024-bit modular exponentiation group. This is another of these components that are rather to be deprecated.\n. From a mathematical perspective I think there is not much point in artifically extending the key if the diffie-hellman group used can not supply/transport enough random bits. You can extend the key if your encryption or MAC primitives expect keys of a certain size (which is what the spec says), but this will not change total entropy. That will still be limited by the DH parameters.\nSo, practically we might as well just use the faster SHA2-256 in that case.\n. Interesting question I am not sure https://github.com/phpseclib/phpseclib/pull/432#issuecomment-50574560 answers: When you agree with the Ubuntu 14.04 OpenSSH to use DH group 1, does it actually offer hmac-sha2-512 as MAC? It might be that Ubuntu 12.04 OpenSSH offers the MAC but then aborts while the newer version does just not offer it, which means it works because you just agree on another MAC (or maybe it disallows group 1 and uses group 14 instead).\n. I verified that group1 is used with sha512 on Ubuntu 14.04.\n. You might want to nuke additional environments from the travis.yml file, so this works a little faster.\n. @terrafrost Found anything yet?\n. I am not sure what you are asking for. You will have to provide more information. This is not a working example because it's missing composer autoloading.\n. I am unable to reproduce that. Composer is taking care of the include path. You may have another dependency that changes the include path.\ncurl -sS https://getcomposer.org/installer | php\n./composer.phar require phpseclib/phpseclib \"*\"\n```\n$cat sftp.php \n<?php\nrequire DIR . '/vendor/autoload.php';\n$sftp = new Net_SFTP('localhost');\nvar_dump($sftp->login('phpseclib', 'password'));\n```\n$php sftp.php \nbool(false)\n. Please provide a complete minimum set of instructions to reproduce. Your use of $config means that your snippet is not complete.\n. > Also i think it's really depends on machine configuration. I use php-osx.liip.ch on Mac OS X. And i have different include paths than you.\nSo the bug might not be in phpseclib at all.\n\nWhy are you not using psr-4? It will solve all king of this errors. \n\nThe master branch is PHP4 compatible. There is a php5 branch that is supposed to get PSR4. Feel free to work on that or sponsor it. Also see all the other tickets about namespacing etc.\n. Exactly what I was saying. Don't do that. What you can do is append to the include path. Closing.\n. @elfet The idea is to move away from include_path to PSR4 in the php5 branch. include_path is a legacy thing, which also means that your application should probably not be using include_path but proper autoloading instead.\n. Just use set_include_path(__DIR__ . '/' . PATH_SEPARATOR . get_include_path()); instead of set_include_path(__DIR__ . '/'); ?\n. Also see https://github.com/phpseclib/phpseclib/pull/432#issuecomment-50623397\n. While it might be possible that runkit causes some unwanted side effects, I am able to reproduce the HMAC-SHA2-512 problem locally (without runkit) against my Ubuntu 12.04 machine.\n. Sorry, I was not aware you were proposing this as a new issue. Please disregard what I said.\n. Calling self::reRequireFile() in the test should unset all static variables. If you want to force a particular constant, you can additionally call self::ensureConstant().\nSee how this is done with the BigInteger test:\nabstract class Unit_Math_BigInteger_TestCase extends PhpseclibTestCase:\n```\n    static public function setUpBeforeClass()\n    {\n        parent::setUpBeforeClass();\n    self::reRequireFile('Math/BigInteger.php');\n}\n\n```\nclass Math_BigInteger_InternalTest extends Unit_Math_BigInteger_TestCase\n```\n    static public function setUpBeforeClass()\n    {\n        parent::setUpBeforeClass();\n    self::ensureConstant('MATH_BIGINTEGER_MODE', MATH_BIGINTEGER_MODE_INTERNAL);\n    self::ensureConstant('MATH_BIGINTEGER_OPENSSL_DISABLE', true);\n}\n\n```\nSo I think that SFTP/SSH should just request a new set of files containing static variables.\n. > Do you have any idea why Travis CI is not running for #436 ?\nThere have been travis or github problems apparently. Just touch the last commit using git commit --amend and force push (or just add further commits).\n. Close/Reopen might work as well.\n. Errm. I already merged this. Just forgot to push.\n. This is not a phpseclib problem, but a PHP problem. See e.g. https://bugs.php.net/bug.php?id=48614\n. Yes, that would be my suspection as well. Anyway, I don't think we are going to do anything about this as it really is just a PHP or extension bug. Closing as such.\n. I was wondering whether we should traverse all files and reload them all.\n. Hmm. I don't have runkit locally and with this patch a lot of tests get skipped instead of being executed with whatever engine is available.\nMost importantly:\n114) Functional_Net_SSH2Test\nSkipping test because constant CRYPT_HASH_MODE is 1 instead of 3\n109) Functional_Net_SFTPUserStoryTest\nSkipping test because constant CRYPT_HASH_MODE is 1 instead of 3\n. @terrafrost I am not talking about travis, I am talking about my local environment which does not have runkit.\n. @terrafrost This broke #458 #552 and https://github.com/phpseclib/phpseclib/blob/master/tests/Functional/Net/SCPSSH2UserStoryTest.php#L19 due to lack of GMP in PHP 5.2. This needs to be changed to behave more gracefully.\n. Might want to add test cases for both right away?\n. #447 is a rather poor test.\n1) It is not persistent.\n2) It is a functional test via other class. It is not a unit test.\nPlease just add a very simple unit test like https://github.com/phpseclib/phpseclib/blob/master/tests/Unit/Crypt/Hash/SHA512Test.php. Given a few inputs, assert that their outputs match. This will ensure that basic functionality (such as correct output lenght) can not be broken without anyone noticing. Also, these existing tests test both, HMAC and hashing.\n. Good work. :-)\n. Excellent.\n. > Found a workaround.\nSo. What is the workaround?\n. Thanks.\n. @terrafrost In order to understand how the test works, I think it would be best if you'd quickly read up on \"PHPUnit dataProvider\". It is rather simple. See http://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.dataProvider\n. I suppose this patch is good otherwise.\n. Removing \"wontfix\" because there isn't anything to fix.\n. The memory usage is a result of using define('NET_SFTP_LOGGING', NET_SFTP_LOG_COMPLEX); which stores log messages in an array until they are fetched. You can use NET_SFTP_LOG_REALTIME instead for having log messages printed instead of stored.\n. Which version of phpseclib is this? Did you try the master branch? Which SSH/SFTP server is this?\n. Closing this as #463 should have fixed this.\n. Besides the mentioned issues, this looks good to me.\nThe tests are great, but unfortunatly only cover the rather basic case. More exotic use cases using the other parameters of get() and put() are not covered.\n. Also see #455\n. Please provide example code. How are you using put()? Which SFTP/SSH server is this?\n. I was talking about the version of the software using, e.g. OpenSSH 6.6.\n. Considering that you're also uploading from a local file, this might be the exact same issue as in #455.\n. xz -d < archive.tar.xz | tar tf -\nshould do it.\nwith this change, the sftp user story takes about 13min on my ubuntu 14.04\nlaptop, which is a lot. didnt look into it though.\n. @terrafrost I am using the PHP provided by Ubuntu 14.04 (5.5.9-1ubuntu4.3) on my laptop. I've got the following packages installed:\ni   php5-apcu                       - APC User Cache for PHP 5                  \ni   php5-cli                        - command-line interpreter for the php5 scri\ni A php5-common                     - Common files for packages built from the p\ni   php5-curl                       - CURL module for php5                      \ni   php5-dev                        - Files for PHP5 module development         \ni   php5-fpm                        - server-side, HTML-embedded scripting langu\ni   php5-gd                         - GD module for php5                        \ni   php5-gmp                        - GMP module for php5                       \ni   php5-imagick                    - ImageMagick module for php5               \ni   php5-intl                       - internationalisation module for php5      \ni   php5-json                       - JSON module for php5                      \ni   php5-memcache                   - memcache extension module for PHP5        \ni   php5-memcached                  - memcached extension module for PHP5, uses \ni   php5-mysql                      - MySQL module for php5                     \ni   php5-pgsql                      - PostgreSQL module for php5                \ni A php5-readline                   - Readline module for php5                  \ni   php5-sqlite                     - SQLite module for php5                    \ni   php5-xdebug                     - Xdebug Module for PHP 5                   \ni   php5-xsl                        - XSL module for php5\n. Reproduction using Vagrant\nvagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box\nvagrant init trusty64\nvagrant up\nvagrant ssh\nsudo aptitude install git php5-cli php5-gmp\ngit clone https://github.com/bantu/phpseclib.git\ncd phpseclib\ngit checkout sftp-put-from-local\ncurl -sS https://getcomposer.org/installer | php\nphp composer.phar install --dev\nsudo travis/setup-secure-shell.sh\ntravis/run-phpunit.sh\n. > You appear to be missing mcrypt.\nHmm. You're correct. However, the php5-mcrypt package seems to be available in version 5.4.6-0ubuntu5 only, not in 5.5.9-1ubuntu4.3. See http://packages.ubuntu.com/search?suite=trusty&section=all&arch=any&keywords=php5&searchon=names\n. I had to enable mcrypt via \"php5enmod mcrypt\" for some reason. I wasn't even aware such a system existed now for PHP. You are correct, this test is incredibly slow without mcrypt and fast with mcrypt.\n. This fails on PHP 5.6 because that doesn't have runkit in order to redefine to mcrypt. And HHVM doesn't have runkit either.\n. Moved the test into a new test class now.\n. PHP 5.2 failures are possibly caused by #443\n. This still is a rather expensive test when you look at the times. Originally, I wanted to go over 4GiB, but it's only using 512 MiB right now.\n. @terrafrost Think we should have this as is? Or maybe with 128 MiB?\n. Let's have this with a 128 MiB file.\n. Looks good to me. Please turn \"case true:\" into \"default:\". Thanks.\n. Additionally, it seems like the three cases with define('CRYPT_RSA_MODE', CRYPT_RSA_MODE_INTERNAL); could be combined together.\n. I personally would like to see most of the switch/case blocks replaced with simpler if/else blocks.\n\nActually whole switch(true) block can be replaced with one if-else check. Because default value of CRYPT_RSA_MODE is CRYPT_RSA_MODE_INTERNAL checks for MATH_BIGINTEGER_OPENSSL_DISABLE and openssl_pkey_get_details are unnecessary.\n\nI don't think that is true. At least not in the exact/trivial sense of just removing the other two cases from the switch block. You would have to add the negated forms to the extension_loaded('openssl') && version_compare(PHP_VERSION, '4.2.0', '>=') && file_exists($this->configFile) expression.\nFeel free to try that refactoring as a new PR. I am going to merge this as is.\n. > Is there a way/config to use this functionality also in phpseclib?\nNo. Also see #261\n. See #505 for Implementing Agent Forwarding.\n. @terrafrost Just put it whereever you think it should go. We can move it afterwards. Not a big deal with git.\n. You're renaming DevTest.php. Because there is supposed to be a 1:1 relationship between classes and files, you also have to rename the class.\n. Considering that you're adding another file which seems to be only relavant to ASN1, keeping the ASN1 subfolder might actually make sense. Plus moving FE.pdf.p7m into it.\n. I am not sure I fully understand. Please explain the relationship between linked commits. Also, which tickets is this supposed to fix (if any)?\n. Ah okay. That make sense. Thanks for the explanation.\n. @terrafrost Feel free to close #455 manually.\n. This seems to have fixed problems discussed in https://github.com/owncloud/core/issues/9632, but the person is now complaining about slowness.\n. Also see https://github.com/zenovich/runkit/pull/71#issuecomment-54542060\n. Err okay, checking type is rather pointless, but let's do it anyway. We should always use assertSame over assertEquals, just like === over ==.\n. Even better, let's use assertCount.\n. We should have unit tests testing our implementiation. If the behaviour is changed again, the test should be also changed. This is not a reason not to have unit tests.\n. On an unrelated note: I think the return type is actually wrong.\n. > Any objections?\nNo, I don't think so.\n. You may have to use hex2bin() because setKey() and setIV() probably do not expect a hex string. Just a guess, without looking into it.\n. See #216 for DSA feature.\n. @terrafrost The first thing i noticed is: In https://github.com/phpseclib/phpseclib/blob/master/phpseclib/File/ASN1.php#L744, if $mapping['mapping'] is not set, there is no return or break statement and execution with fall through to https://github.com/phpseclib/phpseclib/blob/master/phpseclib/File/ASN1.php#L774\n. Getting what @Virsacer has for https://github.com/phpseclib/phpseclib/issues/477#issuecomment-56214582 on PHP 5.5.9-1ubuntu4.4 (cli) (built: Sep  4 2014 06:56:34)\nYToxOntpOjA7YTo0OntzOjU6InN0YXJ0IjtpOjA7czoxMjoiaGVhZGVybGVuZ3RoIjtpOjI7czo0OiJ0eXBlIjtpOjEzO3M6NjoibGVuZ3RoIjtpOjQ3O319\n. I am also able to reproduce https://github.com/phpseclib/phpseclib/issues/477#issuecomment-56168274\n. https://github.com/phpseclib/phpseclib/issues/477#issuecomment-55978628 reproduces the initial error for me.\n. Tests?\n. Please provide more information. How do you run your script via console? How do you run it via cron? How does your script look like?\n. Try \"cd /path && php script.php\". Just a guess.\n. Also see Usage section on http://phpseclib.sourceforge.net (set include path)\n. Err. Lol. :-D\n. Thanks.\n. Please provide more information and more complete examples. Running this as is will result in undefined class errors.\n. @RoelDeveloper Are you still having issues?\n. Clearly, NET_SFTP_BLOCK_DEVICE is not defined. So good catch. :-)\nThis patch isn't complete though, because there is another NET_SFTP_BLOCK_DEVICE left. Please fix that too. Thanks.\n. Regression from 51d106b6 and a7fa4cc4.\n. @vvolodko Want to take care of that?\n. #487 already fixed this.\n. This is intended behaviour. Use set_include_path() as per http://phpseclib.sourceforge.net or composer autoloading.\n. The construction in question (both affected lines) looks like:\nphp\n        for ($i = count($value) - 1; $i >= 0; --$i) {\n            if ( $value[$i] ) {\n                break;\n            }\n            unset($value[$i]);\n        }\nProbably a valid issue.\n. Array contains a gap, e.g.\nArray\n(\n    [0] => 1215752191\n    [1] => 46\n    [2] => 4\n    [4] => 0\n)\n. var_dump($value);\n        $value[] = 0; // just in case the carry adds an extra digit\nvar_dump($value);\nyields\narray(3) {\n  [0]=>\n  int(2147483647)\n  [1]=>\n  int(2147483647)\n  [2]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n  int(2147483647)\n  [1]=>\n  int(2147483647)\n  [2]=>\n  int(3)\n  [4]=>\n  int(0)\n}\non 5.6, but\narray(3) {\n  [0] =>\n  int(2147483647)\n  [1] =>\n  int(2147483647)\n  [2] =>\n  int(3)\n}\narray(4) {\n  [0] =>\n  int(2147483647)\n  [1] =>\n  int(2147483647)\n  [2] =>\n  int(3)\n  [3] =>\n  int(0)\n}\non 5.5\n. This behaviour is actually documented on http://php.net/manual/en/language.types.array.php \"As mentioned above, if no key is specified, [...]\"\n. This behaviour seems to have changed between PHP 5.6.0 and 5.6.1.\n. The PHP 5.6.1 changelog lists https://bugs.php.net/bug.php?id=67985 which is likely related.\n. Reproduction (for the record): e.g. ~/Incoming/php-5.6.1/sapi/cli/php -d error_reporting=-1 vendor/bin/phpunit --verbose --filter Unit_Math_BigInteger_InternalTest\n. Was playing around with a fix a little, but it seems incomplete: https://github.com/bantu/phpseclib/compare/phpseclib:master...bantu:php-5.6-list-iteration?expand=1\n. Confirming working on 5.6.0, not working on 5.6.2.\n. #493 contains a much easier fix.\n. Also see https://github.com/bantu/phpseclib/commit/22085a0966c1ba054d9a933f6250248207a8cb95#commitcomment-8211913\n. Also tested this on 32-bit PHP 5.4.4. testTruncateLargeFile should cover this. https://github.com/phpseclib/phpseclib/blob/master/tests/Functional/Net/SFTPUserStoryTest.php#L434\n. PHP 5.6.1? See Issue #491 and Patch #493\n. As far as I know this problem only affects the internal BigInteger implementation which is a rather slow fallback. Faster implementations will be used when the gmp or bcmath extensions are installed. I would recommend installing the gmp PHP extension both as a workaround and for performance reasons.\nFurthermore, see #498 for releasing the fix.\n. @cedric-dufour Thanks. Feel free to link to a downstream ticket if you have one in ownCloud too.\n. As far as I know this is not possible currently. I've thus turned your ticket into a feature request.\n. Please also be aware that Agent Forwarding has potential security implications and thus will have to be explicitly enabled. OpenSSH allows this by passing -A to the ssh command (or using SSH config file, of course).\n. This basically involves two things:\n- Forwarding the agent socket.\n- Defining the SSH_AUTH_SOCK environment variable on the remote host.\nE.g., when I use agent forwarding, OpenSSH defines SSH_AUTH_SOCK=/tmp/ssh-BNGUYP3KZE/agent.31253 on the remote host where the specified path is a temporary socket forwarded to the local SSH_AUTH_SOCK, e.g. SSH_AUTH_SOCK=/run/user/1000/keyring-61QXCw/ssh.\nNote: Once implemented, both phpseclib and OpenSSH will be able to use the forwarded socket. System_SSH_Agent defaults to SSH_AUTH_SOCK.\n. I know this is based on #259, but still: This patch is huge and does too many things at once and as a result is hard to review (if at all). I would have appreciated if parts from #259 were extracted into their own PRs. E.g. why not send a pull request only implementing _setEngine? OpenSSL can hardly be required for that.\n. I think ideally, this would be split as follows:\nFirst of all, unit tests for all classes affected by this giant patch ensuring that adding the OpenSSL implementation does not actually break anything. I am not sure the way the unit tests contained in this patch are designed makes sense. Instead of encrypting with one engine and then decrypting with another engine, all engines should be tested independenty, against known vectors. Parties like NIST publish such vectors.\nNext, setEngine(). When testing engines against known vectors, point 1 no longer depends on this.\nThen, OpenSSL support.\n. > If you're referring to Crypt/DES.php, the idea is to establish that the padding is done in a consistent manner, be it null padding or something else.\nHmm, okay. I still think it would be useful to have each implementation tested against known test vectors. And then, you could also just fix (as in fixture) the expected padding behaviour of each implementation in the same manner, instead of testing implementations against each other. Most importantly, this test will not detect when you break multiple padding behaviours at the same time.\n. @terrafrost hhvm is timing out because the order in which tests are executed screws with the mode constants. https://github.com/phpseclib/phpseclib/pull/565 is supposed to address that.\n. > One thing that does scare me about trying to split this out into multiple PR's... that's going to require I take these 99% completed files and copy / paste select lines into the copies of these files currently in master. And I'll have to do this over multiple iterations and just hope nothing gets missed in the copy / paste process.\nIf it's only about selecting lines, that can be rather easily achieved by resetting and then using git add . -p or so.\n\nI suppose we could say \"absolutely no one is to touch the Crypt_* files until the OpenSSL stuff has been merged\" and then once everything has been merged we do a diff against this branch to see if anything was left out but then it could be a while before the OpenSSL stuff is merged.\n\nNo, that would be rather unreasonable.\n\nIs https://github.com/terrafrost/phpseclib/blob/openssl-support/tests/Unit/Crypt/DES.php more like what you're wanting?\n\nYou are comparing to a fixed expected value. Yes, that is better.\n\nSo like what happens if, in the future, a data provider is used to test more strings? Does the person adding those additional tests need to hard-code the output of each string?\n\nYes.\n\nIt seems like having the unit test test against itself (or rather it's other engines) seems like it'd serve the same purpose with less work on the part of the devs.\n\nIt certainly is not. The implementations are even contained in the same class, so they can easily share code. So you can easily end up making changes that break both without noticing it.\nYou can make a new test category and maybe call that \"interoperability test\", but I wouldn't call it a unit test. But then, I think you would also rather want to compare to an external implementation instead of another one of your own project.\n. > hhvm is timing out because the order in which tests are executed screws with the mode constants. #565 is supposed to address that.\nThis should be fixed. Sorry for the inconvenience.\n. > So it's saying F even before \"testing load key\" is printed out. Only problem with that is that \"testing load key\" is the first thing that is printed out in the only unit test for that branch / commit.\nI wouldn't interpret too much into that. phpunit might be buffering the output of the test method and thus change the order.\n. @terrafrost What is the status here. Is this just for testing?\n. Please run \"composer updating nothing\" to regenerate the composer.lock file.\n. Agree with @terrafrost \n. I believe you can also outright remove all manual inclusion of Random as we already assume autoloading for BigInteger.\n. Code Sniffer complains about \"PHP version not specified\" on line 28. Not sure whether that is correct and other files specify a version. Hmm.\n. Hey. Your changes break PEAR. The general idea is to change the php5 branch to use PSR-4 autoloading and namespaces. It should be possible to produce a PHAR afterwards. I even think that phpseclib should provide a phpseclib.phar.\n. @sebastianfeldmann I might have some time to work on this torwards the end of the year.\n. Alternatively, it might be possible to perform other changes to make phpseclib compatible with phar. For publishing phpseclib.phar, I have created #513.\n. @sebastianfeldmann Can you provide code? E.g. how are you generating the phar?\n. @terrafrost Do you want to keep on maintaining the master branch as a long term support release with PHP4 support? In that case, we should probably assign it 1.0.0 and start the current php5 branch at 2.0.0. Following semantic versioning, this will allow you to make bugfix releases 1.0.x and API compatible changes 1.y.z, but no API incompatible changes, as that would require a new major version.\n. > What would the branches then be?\nSome projects use code names, e.g. phpBB, which is confusing to novices. Other projects have two digit branches and three digits tags. Additionally, there is a development branch, e.g. develop or master.\nConcrete process:\n- Before the next release of the master branch, it is renamed to 1.0. The release tag will be 1.0.0.\n- The php5 branch becomes the master branch.\n- On release of 2.0.0, the master branch is branched off as 2.0. Then we have 1.0, 2.0 and the master branch.\n- Bug fixes happen in the lowest version branch deemed necessary and are merged down into versions still supported.\n- New features / API incompatible changes happen in the master branch.\n- Once feature set for 3.0 is complete, 3.0 branch is branched off from master.\n- At some point 2.0 is no longer supported\n- If 1.0 is supposed to be kept, 2.0 will just be skipped when merging bugfixes down into 3.0\n\nUntil the next minor version is released?\n\nI was referring to major releases.\n. > PHP 5.3+ for version 2 would be great.\nYup, we already have that in the php5 branch which is to become 2.0.0\n. Checkout https://github.com/phpseclib/phpseclib/wiki/Roadmap\n. This has been discussed before. The name of this library is phpseclib just like my name is bantu. I don't want to be called Bantu or BAntu either. ;-)\n. I looked at the diff between master and php5 and added stuff to the Roadmap we already have.\n. @virgofx I am open for pull requests, always have been against the php5 branch. But they have to be reviewable and to the point. So, commit often, PR often, submit small reviewable pieces of work. Get feedback, defend your PR, finish task, merge. Repeat. Ideally add test coverage before refactoring.\nLet's first implement what is currently on the 2.0 roadmap. Most of those tasks are in some way related to each other. Then let's release 2.0 to make people happy by offering autoloading in a stable version. Probably shouldn't add exceptions, although not sure how big of a patch that would be. Certainly shouldn't do any code transformations just for the sake of it (e.g. changing PEAR style to PSR2 style).\nWe can do exceptions for 3.0 and maybe also a more component based architecture (maybe that will have to go into 4.0). Maybe at 5.0 or 6.0 we can slow down with the API breaking.\nAs for exceptions in detail: Just replacing all user_error() calls with exceptions is a bit pointless. You could probably also just register an error handler turning those calls into an \\Exception. Instead, exceptions should be done properly, i.e. by defining new exception classes where necessary and reusing SPL exceptions where appropriate.\n. > I'm actually more in support of breaking everything at once. ie. if we're gonna break BC let's break it once and break it big. Not break it in an ever so subtle way 10x times.\nThere is just too much technical debt to fix. It can not be fixed all at once. Otherwise we will be developing for months or years. Let's do small steps and release more often. The roadmap document is public, so users have the information available to decide whether they want to skip a version or not.\n\nAs for a component based architecture... honestly, idk that I'd object to that being in the php4 version so long as it didn't break BC (and as long as it was a good PR).\n\nI don't think a component based architecture like Symfony is possible at all on PHP4. And it would certainly break BC.\n. > I don't necessarily have a problem with more frequent releases but I do have a problem with frequent major releases. Like when phpBB went from v2 to v3 it was a big massive change and there wasn't anyone who disputed that it should be a whole new version number. Same thing with PHP 4 and PHP 5. When PHP 5.3 added namespaces they didn't start calling it PHP 6 - they called it PHP 5.3.\nIt took phpBB way too long to release 3.0 and then it took phpBB way to long to release 3.1, which btw. probably should have been 4.0 considering API changes. But phpBB does not follow semantic versioning (right now ;-)). This is exactly the mistake that should not be made. Release often to get your features to your users. I don't see any problem with having higher version numbers. It's just a stupid number / name.\n\nAnother idea: So maybe php4 version is 0.x.0 and php5 version is 1.x.0. 1.1.0 has namespaces, 1.2.0 has exceptions, etc. 0.x.0 is stable between multiple versions of x. 1.x.0 does not make that same guarantee. The 1.1.x series should all have a compatible API but not 1.2.0 and 1.3.0.\n\nThat breaks semantic versioning. The class names are API. Introducing namespaces breaks API BC. What you however can do is have 2.0 and then add a few more classes and have 2.1.\n\nFor that matter - and this is a little extreme... we could just rename the php5 version of phpseclib. In so far as a name goes idk how imaginative phpseclib is. Laravel is an imaginative name. Symfony is. phpseclib is not.\n\nWe could also just fork phpseclib and give it a completely new name. I am not sure that would be helpful or would change anything, besides not using as many major versions of phpseclib.\n\nThis renamed php5-only version of phpseclib could have frequent (minor) releases, with the caveat that the API is not stable until it is.\n\nThe goal is to actually follow semantic versioning, such that version numbers make sense. There is absolutely no point in doing that. You just use major versions for major API changes. I'd rather fork phpseclib than do that.\n. As for a timeframe for 2.0: I think the tasks on the list can be completeled in december and/or january.\n. > I don't know if I want to maintain a ton of different versions of phpseclib.\nYou don't have to. We can have 1.0 and 2.0 and when we have 3.0 we can deprecate 1.0. Or we can wait and deprecate 2.0 when we have 4.0 and keep 1.0 as an LTS version.\n\nDo we have to merge a hypothetical bug fix for SSH into each and every one of those and release each and every one of those all at the same time? I already find making releases to be tedious. Now we're gonna make it more tedious?\n\nYes. But, this has nothing to do with making releases. This is just how regular development works. Dropping supported versions can make regular development easier, though.\n\nReleases take time.\n\nThey should not. It should be as easy as making a git tag. This is a problem with the release process itself and lack of automation. Let's add dropping PEAR package support to the roadmap, if that is the core problem.\n\nIf you dump phpseclib 3 into a project using phpseclib 2 and phpseclib 2 worked the fact that Exceptions are being used isn't a huge issue.\n\nExceptions are there to be caught by code. They are part of the API.\n\nI mean I suppose each version will have some sort of EOL timeline but what would that timeline be?\n\nThat's up for discussion I suppose. I don't think we even have to decide on this soon. We don't know what will happen, so we can do ad-hoc style for the time being.\n\nThe PHP4 compatible one ought to have a really long time line since that's been available for seven years. That's a lot of time for people to download it.\n\nI think this is the wrong approach for argumentation. It doesn't matter how long something has been available. What matters is how many users still use it. Especially after new major versions have been made available.\n\nIf phpseclib 2.0 is the latest for just a few months then the window during which people would have downloaded it isn't going to be as high as the number of people that downloaded the PHP4 version (ie. 1.0) so that one, in my mind, should reach EOL much sooner than the PHP4 version.\n\nYes, that should be fine, \n\nCertainly not every BC change merits a major release. Like if I remove setRandomGenerator as a function from Math_BigInteger - a function that I'm pretty sure no one ever used anyway - does that merit a major release? I mean, it's a technical BC break, but it's pretty much a zero-impact one.\n\nSemantic versioning tells you to take everything the \"technical\" way. You remove the method, you have to use a new major version. It's really just as simple as that. In reality you would thus just keep the method.\n. > Class based constants have to be implemented before PSR-4 can be fully completed. The class based constants can be completed before autoloading is done, but there are many places that functionality is being imposed by defining various global constants (CRYPT_*_MODE, NET_SSH2_LOGGING, etc). There are also places where defined constants are set on a variable basis, such as in the Crypt_RSA class.\nAs per https://github.com/phpseclib/phpseclib/wiki/Roadmap, I would be fine with keeping defined constants with variable values for 2.0 to make things easier. They are AFAIK only used internally and are no side effects of class files.\n\nSo do we have 1.0 for PHP4, 2.0 for namespacing and... 3.0 for PHP4 with setPreferredEngine()?\n\nI think you'd have two options. If you can do it in a non-API breaking way, you can do 1.1.0. If that is not possible, you add it to the master branch and this just won't go into 1.0.\n. > I suppose there will be room for discussion with each PR. Like even if the OpenSSL stuff wasn't 99% finished I'd still strongly advocate merging that for 1.0 on the basis that that majorily effects performance. \nI would consider \"Adding better OpenSSL support for increased performance\" a new feature (or an enhancement) which should ideally go into the development branch. It has massive code changes, there is very low code coverage, thus there is high probability that this change breaks things. This in turn jeopardises the stability of a branch that is defined to be stable.\n\nMy point is... we can say \"no new features or no BC breaks for 1.0\" as a general rule but let's not make that rule a hard and fast rule.\n\nI suppose I am fine with that. I guess I don't care too about the 1.0 branch at all. However, please keep in mind that massive code changes for 1.0 will lead to massive conflicts when merging 1.0 into the next branch.\n. Added ticks to the Roadmap (https://github.com/phpseclib/phpseclib/wiki/Roadmap) for done tasks. Added milestones to the tracker.\n. @terrafrost How do we procede? It looks like all defined goals are reached and 2.0 is ready for relase.\n. I would like to release now as is.\n\nIs there a reason we need to rush it out the door asap?\n\nPeople want to start using the features we have now. See e.g. https://github.com/phpseclib/phpseclib/issues/243#issuecomment-70236357\nCan we release 1.0 and 2.0 now and 1.1 and 2.1 with OpenSSL (without breaking BC)?\n. @terrafrost That sounds good to me. I assume we can rename the branches then: 0.3, 2.0, master\n. Actually, in which branch are we developing 1.0 then?\n. @terrafrost When I said \"1.0 2.0 master\" I was talking about branch names. So let's drop the \"dev-\" prefix from your suggestion and we have an agreement. ;-)\n1.0 - currently master; contains 0.3.x releases until OpenSSL support, then contains 1.0.x releases.\n2.0 - branched off from current php5 on release of 2.0.0\nmaster - currently php5, the branch where new features are supposed to be added.\nSo the next steps would be renaming master to 1.0 and php5 to master. Then releasing 2.0.0 and branching off the 2.0 branch.\nThe version number branches make it easy to see which branches are supposed to be merged into which other branches. E.g. 1.0 -> 2.0 -> 2.1 -> 3.0 -> master\n. git checkout master\ngit branch -m 1.0\ngit checkout php5\ngit branch -m master\ngit branch 2.0\ngit push origin master 1.0 2.0 :php5\n. I would have done the branch renaming first before the release. The API generation config needs work after changing branches.\n. > Oh. Should I delete the tags?\nYou did not push tags to phpseclib repository yet. So this should be fine. So we only have to worry about people who already downloaded the 0.3.10 packages. I'd say let's just keep that release and that tag.\n\nCan you do the branches?\n\nYes.\n. > I would actually like to move direct download links onto the wiki and include checksums.\nSo no more download links in the README.md file?\n\nI updated the README.md file in master to say 0.3.10 (did so via github.com) altho now that I think about it I probably should have done it in the 1.0 branch and had it merged all the way up. Meh.\n\nI would actually like to move direct download links onto the wiki and include checksums.\nPlease push the 0.3.10 tag corresponding to the packages you published. Don't push the 2.0.0 tag, though. Delete that instead.\nCan we establish that the preferred method to install 2.0 is via composer? We do not provide PEAR packages at all, right?\n. Closing this in favour of #756\n. I think that php5 should actual stay php5 to mitigate the situation a bit. master should be renamed to 1.0 on release. then we'll have 1.0 and php5. On 2.0 release, we will add master back. Then we have 1.0, 2.0 and master as it is supposed to be.\n. I don't think so, but do we need this in the master branch too?\n. I didn't look into updating phing myself because I was too lazy to test it. Also, I was considering looking into alternative solutions. Especially with regards to better windows support, avoiding e.g. https://github.com/phpbb-de/phpbb-translation/blob/develop-ascraeus/build.xml#L80.\n. I don't know. Would have to take a deeper look.\n. @montdidier Hey. Does it work as described in https://github.com/phpseclib/phpseclib/issues/505#issuecomment-64956366 or is SSH Agent Forwarding a separate thing from socket forwarding?\n. I think first we should look into writing a test case for Agent SSH login that purely runs on Travis CI. This probably entails generating a key pair and starting an ssh-agent on Travis CI. This should be done as an extra pull request. I might have some time to look into that later.\nThen, on top of that, we should have this pull request implementing agent forwarding with a test case logging into localhost via the agent, and then logging into localhost again using forwarded agent.\n. See #552 for an attempt to get ssh agent login working on Travis CI.\n. @montdidier I've added a functional test testing agent login via #552. Please reuse that instead of adding a new file. For testing forwarding, you should be able to do something like the following.\nphp\n$hostname = $this->getEnv('SSH_HOSTNAME');\n$username = $this->getEnv('SSH_USERNAME');\n$ssh->exec(\"ssh $username@$hostname\");\n. I assume this can be closed in favour of the newer PR #592. Please let me know when this is wrong.\n. I am going to assume this is fine, given https://github.com/phpseclib/phpseclib/issues/511#issuecomment-65266983. All licenses seems to be identical and MIT.\n. I verified all files have an @license tag.\n. Ref #508\n. I actually saw that this is how it is implemented in the PR. I think this is consistent with the master branch in terms of allowing the file to be deleted. I think ideally, an object would be injected. Let's reevaluate this later.\n. @cnelissen The key point is that the Travis CI environment compiles the runkit PHP extensions which allows constants to be redefined. This is required to redefine constants allowing variable values, e.g. whether GMP or BCMath is used for BigInteger. If you do not want to compile runkit, you can use something like the following as a workaround.\nfind tests/ -type f -name \"*Test.php\" -exec vendor/bin/phpunit --verbose {} \\;\n. I am not concerned about BigInteger at all since that has the most code coverage. I shall review this soon. :-)\n. I think this should be squashed because there is no information in most of the commit messages. Feel free to do that. Otherwise I can also do that.\n. I'll take care of that.\n. Replaced by #544\n. fopen() either returns a resource or false, so I guess this makes sense.\n. Introduced by bafbf127\n. This removes SYSTEM_SSH_AGENT_FAILURE which isn't used. Not sure that is fine. @terrafrost \n. If the constant values are not in phpseclib's scope, but are defined in an external RFC, I am fine with keeping them.\n. > Let's hold off on this one until the OpenSSL stuff is merged.\nUnless this is done by tomorrow, I don't think this reasonable.\n. Closing as per https://github.com/phpseclib/phpseclib/pull/525/files#r21543418\n. I suppose this makes sense. @terrafrost \n. I am going to change this to what is implemented. #535 contains the bug report. Maybe this is even intentional.\n. This seems to actually reproduce #146\n. Seems to conflict now.\n. This conflicts. Didn't look into why. Feel free to rebase.\n. Conflicts with #538\n. I've added SCP tests, so let's retest this.\n. > I want implement RSA SHA1 1024 encryption.\n1024 bit RSA keys might be a bit weak nowadays.\n\nActually I have tried implementing it, but I am getting the encrypted data as\n\nWhat exactly have you tried? Feel free to share your code.\n\nAny help is appreciated.\n\nDid you have a look at the manual at http://phpseclib.sourceforge.net/rsa/intro.html ?\n. More information is available. The file is written correctly. It's get() appending a null byte. Thus this is a duplicate of #146\n. @cnelissen Why do I not need a getString() method. Imagine not having any local filesystem access at all, but say a database and I have to download data into it.\n. I can't remember where I got the idea from. The core idea was just to have some more interoperability testing.\n. This is not just some cleanup, this actually fixes #502, right? As a result this might also fix various \"Connection closed prematurely\" bugs I've seen reported against ownCloud.\n. Also fixes #298 ?\n. Apparently caused by lack of public keyword.\n. @cnelissen Are you sure it's just caused by the package name and not a bug in sami?\n. Tested. Seems to be indeed caused by the package.\n. @cnelissen I explicitly rerun sami after this PR was merged. Other than that, there is a cron job running sami every hour. So this appears not to be fixed. Could be a sami bug, though, as both branches are considered in the same sami run.\n. @cnelissen I have reported numerous other bugs to sami. Feel free to report that one too. Maybe it can be easily addressed.\n. It seems to work fine for the rest.\n. @GrahamCampbell et al., do you have any useful input with regards to this?\n. @terrafrost updated\n. 1. Markdown\n2. sucks\n3. hard!\n4. The goal is to get rid of any aliasing.\n5. Not sure this should go into the repository. A wiki page might be better.\n6. Why do tags have to be on the master branch? I don't think that matters.\n. > Tags are required for composer stability... For example, if in your composer.json you are using:\nI understand that. It was the \"Tags on master\" (specifically mentioning the branch) that confuesd me.\n. I agree with https://github.com/phpseclib/phpseclib/issues/243#issuecomment-70236357 we should release soon. As is, if necessary.\n. Closing this in favour of #514\n. Autoloading should work, if you install with composer.\n. @callofsorrow The phpseclib master branch currently is not namespaced.\n. @callofsorrow This is work in progress, see #243 and #514.\nPlease start doing your homework. There is user documentation, API documentation and tickets documenting what is going on.\n. @terrafrost master also?\n. Thanks a lot.\n. This seems to work correctly now. Only fails on PHP 5.2 due to requiring GMP in test setup.\n. Missing transformation in SSH2::_login_helper(). Please rebase to include Functional_Net_SFTPLargeFileTest.\n. This should be good.\n. Please update to cover Functional_Net_SFTPLargeFileTest\n. I think the error (grey) was my fault.\n. Sounds like a bug in code sniffer. PHP4 constructors don't work with namespaces.\n. Feel free to coordinate a fix and release with upstream and send a PR updating to a fixed version of Code Sniffer. If that is not possible, the method definition has to be marked such that it is ignored by code sniffer.\n. > I think it's odd that the code sniffer only errors on PHP 5.5 though\nIt does not run on any other version. ;-)\n. See https://github.com/phpseclib/phpseclib/blob/master/tests/bootstrap.php#L25 for the workaround.\n. Feel free to rebase. Feel free to extract the codesniffer update into its own PR.\n. Let's define the order in which the PRs are to be merged: #553 #555 #558\n. This PR (as far as I know unlike the other PRs) contains changes not related to adding namespaces. E.g. changing var to public, but also changing logic. Why are those necessary? Please keep this PR to its purpose. If additional changes are required, the problems these changes fix need to be explicitly documented.\n. This looks good. Please squash everything into a commit with a useful commit message. E.g. \"Namespace Crypt classes\". E.g. see https://github.com/phpseclib/phpseclib/pull/558#issuecomment-66804989\n. This won't work well when merged into php5.\n. Oh, that reminds me. This should be against master.\n. Sorry, I missed that earlier.\n. Replaced by #563\n. This is good to go. Thanks a lot.\n. This should be fixed via #581\n. This is about calculating/determining the bare minimum requirement, not an arbitrary \"sane to use PHP version\" or \"recommended PHP version\". It is not wise to use any of 5.3.x due to EoL.\n@terrafrost I don't see that used anywhere yet. Furthermore, your patch against master just doesn't make use of openssl_encrypt when it's known to be broken. So this is not a minimum requirement.\n@GrahamCampbell No particular reason, I assume.\n. @GrahamCampbell That sounds like a much better idea and reasoning.\n. @terrafrost Do you agree with 5.3.3.?\n. Closed via #599 \n. @terrafrost I would even go further and require an SFTP object to be injected. Otherwise the stream wrapper is not secure against man in the middle anyway, as far as I remember.\n. @terrafrost When e.g. using sftp:// to download a file, the stream wrapper will create a new instance of Net_SFTP and then does not verify the host key in any way (there is no room for that in stream wrappers). Thus this can not be secure against man in the middle attacks. You have to first establish a Net_SFTP connection, verify the host key, then pass that into SFTP stream wrapper as a context option, for it to be secure against man in the middle.\n. > I'm not necessarily the biggest expert on dependency injection. How would this be able to use dependency injection if the \"global $$host;\" hack were removed? \nI am sorry. It's only related to dependency injection in so far as dependency injetion usually leads to the removal of global variables. Maybe I should have just said \"do not use global variables / state\" instead of mentioning dependency injection.\n. > It's not actually setting global variables. The idea is... say you have $zzz = new Net_SFTP(...). Then you do sftp://$zzz/path/to/filename.php. The method will declare $zzz global and try to access it with a scope that'd let it be accessed.\nThis only works when $zzz is in global scope, which it should not (have to) be. The stream_context_get_options() function should be used to dependency-inject the Net_SFTP object into the stream that is being created (now I remember why i mentioned \"dependency injection\").\n. > And if we do that then what about straight up password auth?\nPasswords tend to be less secure than pubkey-auth, but a password of sufficient length should still be secure.\n\nEIther way I think, at the end of the day, I don't think it's phpseclib's place to enforce best practices. Circumstances may not always warrant it anyway.\n\nphpseclib should not provide an environment that has to be explicitly assembled or configured to be secure. It should be reasonably secure by default and should require explicit configuration for making it insecure.\n. See https://github.com/phpseclib/phpseclib/issues/574#issuecomment-67776278\n. I think related classes should be grouped together using namespaces. Identity and Agent are clearly related, thus should be grouped together. This has the benefit of not requiring use statements. Option 2 provided in the previous post is probably the saner solution in the long run.\nFor SSH this would yield\n./SSH/Agent/Agent.php\n./SSH/Agent/Identity.php\n./SSH/SCP.php\n./SSH/SFTP/SFTP.php\n./SSH/SFTP/Stream.php\n./SSH/SSH1.php\n./SSH/SSH2.php\nCan we agree on that?\n. It's gone. This is the SSH component holding everything related to SSH.\n. > Where does everything else live? Is it Crypt/RC2.php still or, under your proposal, is it supposed to be RC2/RC2.php?\nAs long as there is the Crypt_Base class, all symmetric ciphers should probably be grouped together in a single component. Not sure about the name of said component. I've just kept it as Crypt above and extracted RSA and Random into their own components.\n\nWhat about File/X509.php?\n\nI am not sure about the dependencies of X509, but it sounds more like it should be its own component.\n\nNet/TLS.php (as an example) makes sense. Or do we do TLS/TLS.php?\n\nI'd say TLS would surely be a new component. Depending on the exact interface, TLS/TLS.php can make sense. But maybe also TLS/Client.php and TLS/Server.php. And you'll probably also have other classes e.g. maybe Stream implementation like SFTP.\n. I would suggest to use dataProvider. Then you can either explicitly mark a test as skipped ($this->markSkipped() ?) or you can silently skip using $this->assertTrue(true); return;.\n. A specific problem of the code provided above is that when a $this->assertEquals assertion fails, following test vectors are not tested. They are however executed when using dataProvider.\n. This also affects master?\n. Replaced by #583 \n. @terrafrost This results in multiple open/close calls (possibly also process spawning?) on the SFTP server and thus is less efficient?\n. See https://github.com/phpseclib/phpseclib/issues/543\n. @GrahamCampbell Yes, we'd like to change that globally. I don't think accepting a partial PR makes sense for consistentcy reasons. Feel free to submit complete PRs against master and also php5.\n. This PR looks pretty good to me. I've marked a few occurrences of \"string\" which should stay as \"String\". Please ensure these and following are changed back.\n. I agree it should be \"bool\" instead of \"boolean\" and \"int\" instead of \"integer\". We have to write that down somewhere.\n. @GrahamCampbell Want to fix those anytime soon? Otherwise, I can also take care of it.\n. I agree that \"it is not a thing\". Regardless, it's redundant because the static keyword is used. Merging.\n. As I've explained elsewhere: This might not be as simple as just replacing user_error() with throw Exception(). Appropriate exception classes/types should be introduced/used, allowing exceptions to be used more appropriately. This requires at least some thinking.\n. Do we want to start using inheritdoc (possibly overall and in a new PR)?\n. @cnelissen Do you know how much duplication there already is. Is this the only duplication?\n. @cnelissen Thanks for your analysis.\nAs for the patch, I think the new variant with the empty method in RC4 is almost as bad/weird as the previous version. Maybe an even better abstraction can be found in the future.\n. @terrafrost Do you want to look into performance implications of this PR?\n. This will be closed as the php5 will be going away. Feel free to send a new PR.\n. > I suspect the credentials might be cached during the session by the SSH server.\nThat is rather unlikely. Actually, I am almost certain that is not the case. The more likely cause is that the agent forwarding is not closed correctly.\n. Yes, there is interest in having this. But this uses lower case primitive types, which is related (conflicts) with #585. I think we should have #585 first.\n. We probably also want this in master.\n. This will be closed as the php5 will be going away. Feel free to send a new PR after #585 issues have been resolved.\n. Can you describe pre-patch and post-patch behaviour? It is not very clear to me, even after reading #597.\n. @haphan Can you please add spaces after \"//\" and squash all your commits?\n. @haphan Thanks.\n. Possibly 5.6.1+ issue similar to #493\n. https://travis-ci.org/bantu/phpseclib/jobs/46190457 does not reproduce on 5.6.3.\n. You can configure Travis CI to also run on your own fork such that you do not have to send pull requests just for testing. See https://travis-ci.org/profile/terrafrost\n. @terrafrost https://travis-ci.org/terrafrost/phpseclib\n. This probably contradicts #513\n. Maybe there is an RFC deprecating those. I however doubt that. I rather expect distributions to disable insecure primitives because IETF processes are rather slow (too slow). The same probably applies to arcfour.\n. RFC4419 is relevant here. No deprecation as far as I can see. https://tools.ietf.org/html/rfc4419\n. @GregOriol Please test #714 \n. Also see #151\n. @terrafrost Here is a work in progress, but the SSH2 tests are not working correctly permanently yet. https://github.com/bantu/phpseclib/compare/phpseclib:php5...bantu:ssh-curve25519 Not I'll have time to look into it again any time soon.\n. #755 added support for this via libsodium.\n. Please try the latest version of phpseclib and if that does not help, the master branch.\n. I do not know the cause of this, but believe this will go away when the 2.0 branch is created and aliases removed.\n. https://packagist.org/packages/phpseclib/phpseclib looks good to me as is.\n. @GrahamCampbell Okay. Forced update.\n. There is a real 2.0 branch now.\n. Try 2.0.x-dev@dev ?\n. I guess deployer should have used that. But anyway, there will be a 2.0.0 soon.\n. You will have to update the composer.lock file.\n. Hmm. Where does Travis CI document changes? Was PHP 5.2 removed?\n. This may have been due to the Travis PHP 5.2 environment.\n. Actually no, since we don't do coverage on there.\n. Disabled due to issues with timeouts.\n. For this record. This PR does three things:\n- Update dependencies\n- Remove 5.2 Travis environment\n- Remove the 1.0 branch alias\n. I am dropping the 2.0 alias on merge.\n. You should be requesting this to be merged into 1.0 then, right?\n. Not sure about the best way to handle changelog. Symfony uses version specific changelogs. E.g. CHANGELOG-1.0.md and CHANGELOG-2.0.md.\n. @GrahamCampbell 0.3.x becomes 1.0.0 when OpenSSL support is implemented. So 0.3 is in the 1.0 branch right now and 1.0.0 will be fully BC with 0.3.x as far as I understand.\n. @GrahamCampbell My understanding is that terrafrost wants to maintain 1.0 for a longer time. Possibly longer than 2.0. Kind of as an LTS release.\n. > Yup. idk how this should be handled for the 2.0 series.\nRename CHANGELOG.md to CHANGELOG-1.0.md in 1.0 branch. Merge down. Add CHANGELOG-2.0 to 2.0 branch. Merge down. ?\n. A single changelog per branch likely results in merge conflicts when merging e.g. 1.0 into 2.0. This is not a big problem, but should be considered.\n. Replaced by #624\n. I'd say this problem is outside of the scope of this project. I would suggest you read up on how to correctly use composer together with zf2.\n. I am closing this because you also posted on another platform.\n. For some reason I missed that this PR was sent. Sorry.\n. Will try to look at this again tomorrow.\n. For next time: This should obviously be included in the tag (0.3.10 in this case).\n. Err yes. Retagging is an absolute no-go.\n. Tests?\n. This should be against 1.0 instead\n. Tests?\n. > Btw, I am still curious if it is possible to change the branch a PR is made against. Any ideas?\nUnfortunately it's not.\n. This looks good. The test fails without the patch. :-)\n. Changed class name on merge.\n. \"$self::\" doesn't sound correct, though. Constants are supposed to be accessed statically. I am not sure whether non-static access works properly in all PHP versions. So, besides passing $self, which is an instance, we might just want to also pass $class which is the class name of $self. Then we can do $class::ENCRYPT.\n. @sapzxc Indeed. Good point. This might affect the 1.0 branch too, however.\n. I believe this has been replaced with #639 .\n. This patch is not good in so far that the connectionTimeout property is no longer used.\n. Generally, I think it would make sense to have multiple / different timeout settings. E.g. different ones for connect() and read(). I am not sure whether that is already the case and didn't look too deep into the pull request.\n. @GrahamCampbell They are done (at least should be done). However, sometimes it is useful to have an additional PR for the merge, e.g. for complicated changes, because they run through CI.\n. We should actually specify that we want PSR2. The code sniffer xml still checks for PEAR.\n. Hmm. Not sure we also want to switch the 1.0 branch to PSR2.\n. I'll take care of it.\n. Discovered #671\n. Here is an extended version for changing to PSR2 https://github.com/phpseclib/phpseclib/compare/phpseclib:2.0...bantu:PSR2. Do we want that for 1.0 too?\n. @GrahamCampbell I'll convert everything to PSR2, so closing this.\n. Do you want to forward MySQL to the SSH server you're connecting to or do you want to have MySQL available on the host running the PHP script?\n. Which version are you using?\n. @terrafrost The put() function already had support for a $callback paramter (via #660). Now $data can be a callback too. What's going on here?\n. @andrey012 The tests you added seem to be failing too, now.\n. @andrey012 I am talking about SFTP. Something is just not right, here.\n$callback function parameter\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1801\n$callback thrown away\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1849\n$callback taken from $data\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1855\ncall to $callback\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1899\nanother call to $callback\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1916\n. @a432511 Hey Adam, any updates?\n. The tests failure seem to have been introduced by #655\nThe main question here is whether we want to add the Code Climate badge. ;-)\n. This should be fixed by #737\n. This looks good to me. Thanks a bunch.\n. @terrafrost There seems to be something wrong with the branching. 1.0 is not merged into 2.0 and produces a conflict. Please avoid this in the future. 1.0 needs to be merged into 2.0 at all times, 2.0 needs to be merged into master at all times.\n. Please document the return value.\n. Why only md5 and sha256?\n. Which version of phpseclib are you using?\n. I am not sure having this ticket makes sense. There already are tickets for implementing more up to date primitives.\n. Consider testing #714\n. ;-)\n. @JAYSONLACSON Asymmetric encryption basics:\nSignatures\n- Private key is used for signing\n- Public key is used for signature verification\nEncryption\n- Private key is used for decryption\n- Public key is used for encryption\n. What is the output of var_dump(ini_get('mbstring.func_overload')); ?\n. git checkout 2.0\ngit log phpseclib/Crypt/RC4.php\nTop three:\nd75f703c0ae93dbd99dab5c259c98f47759c87af\nebcb3130b728420569028936a89f93cfb03a50f7\n71c2d4395695c4b2f12d968a5432ba83231e07a3\nThe first one does not seem relevant. 71c2d4395695c4b2f12d968a5432ba83231e07a3 does not seem to have caused this either. It looks more like an incorrect conflict resolution in ebcb3130b728420569028936a89f93cfb03a50f7, which basically means RC4 never had isValidEngine in the 2.0 branch. Indeed this commit added isValidEngine for some classes, but not RC4. See https://github.com/phpseclib/phpseclib/commit/ebcb3130b728420569028936a89f93cfb03a50f7#diff-268ec080c4caed62d72448f741d29e2f\n. Would be good to have a test for this too.\n. This is supposed to fix #706 right?\n. This doesn't seem to have anything to do with Windows in particular. The problem is related to 32-bit PHP platforms in general. The \"Caution\" notes on http://php.net/manual/en/function.unpack.php apply.\n. We are claiming this was fixed by #717. Closing as such.\n. I'd say that disableStatCache() should empty the cache and then there should be no further writes to the cache.\n. Added fixes to this PR and updated the description.\n. @terrafrost This should be ready for review.\n. This does not cleanly merge into 2.0. I will prepare a patch for 2.0 after this has received initial review.\n. > Maybe move diffie-hellman-group-exchange-sha1 and diffie-hellman-group-exchange-sha256 up at the top? The order determines which algorithms are used and it's my understanding group exchange is supposed to be more secure than either diffie-hellman-group1-sha1 or diffie-hellman-group14-sha1.\nIn that case, should group1 and group14 also swap places, because it is the bigger group and thus more secure? This would yield\nphp\n        static $kex_algorithms = array(\n            'diffie-hellman-group-exchange-sha256', // RFC 4419\n            'diffie-hellman-group-exchange-sha1', // RFC 4419\n            'diffie-hellman-group14-sha1', // REQUIRED\n            'diffie-hellman-group1-sha1', // REQUIRED\n        );\n. The same speed/security tradeoff applies to the newly introduced ones here. Basically, assuming we get the group size we request, all sizes besides diffie-hellman-group1-sha1 are 2048 bits, which is 1024 bits.\nMaybe the order should be changed based on the BigInteger engine. More complex, but probably more secure in the default case.\n. Your comments here were lost because you made them on the commit instead of the PR and I rebased/amended the commit.\n. The constants are defined individually now. I've left the KEX order as is. We can do benchmarks later and swap them around. Let's get this merged and then release 0.3.11?\n. Ah yeah. 1.0.0 and 2.0.0 is fine too. Lets switch to PSR2 before that then.\nIs this PR fine now?\n. Will send a PR for PSR2 shortly.\n. Not sending a 2.0 PR for this since the conflict seems rather easy to resolve.\n. We are claiming this was fixed by #719. Closing as such. Please test.\n. This PR is not necessary as #717 merges cleanly into 2.0 and further down.\n. Closing this PR becauase #719 merges cleanly into 2.0 and then master.\n. Nice work on all those tests.\n. Hmm.\n```\n$ hub merge https://github.com/phpseclib/phpseclib/pull/729\nMerge made by the 'recursive' strategy.\n phpseclib/Net/SFTP.php                     |  4 ++++\n tests/Functional/Net/SFTPUserStoryTest.php | 10 ++++++++++\n 2 files changed, 14 insertions(+)\n$ vendor/bin/phpunit tests/Functional/Net/SFTPUserStoryTest.php\nPHPUnit 4.5.0 by Sebastian Bergmann and contributors.\nConfiguration read from [...]/phpunit.xml.dist\n...........................\nTime: 1.05 seconds, Memory: 7.25Mb\nOK (27 tests, 70 assertions)\n$ git checkout phpseclib/1.0 phpseclib/Net/SFTP.php # Undo changes\n$ vendor/bin/phpunit tests/Functional/Net/SFTPUserStoryTest.php\nPHPUnit 4.5.0 by Sebastian Bergmann and contributors.\nConfiguration read from [...]/phpunit.xml.dist\n...........................\nTime: 1 second, Memory: 7.25Mb\nOK (27 tests, 70 assertions)\n```\n. Can we test this easily? Maybe using another instance of Net_SFTP?\n. Patch looks good to me. It's also described in #712. Merging. Feel free to make another PR with tests, though. \n. The for loop thing is weird and probably a bug in the automatic syntax changer. The validator still accepts it after changing it back.\n. About 2. https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md says that \"Comments and documentation blocks\" are not covered.\n. The for loops in SSH2 we should probably replace with a method as all loops basically do the same thing and this likely is not performance-critical.\n. @terrafrost Updated.\n. @terrafrost Ah yeah, I made two extra commits for the whitespace changes, so we can more easily (re-)evaluate whether we want to have them. My recommendation would be to have both.\naffe884c70b6047f4413b5044469953f06e751f9 is rather small. Could use an ignore statement if we want to keep rightRotate and rightShift aligned.\n8524560ccafc9db3b9a999a7538584a1576cba0e seems acceptable to me as well. Keeping things aligned with doc blocks or comments in between does not seem to make too much sense. Also, it's probably a tradeoff. Specifically, you will probably have to respace all existing spacing when adding another line that is longer (e.g. longer constant name). This will result in unnecessarily large diffs. Maybe we could also add an ignore statement for values like 0x00000001.\n. @terrafrost No, PSR2.Methods.FunctionCallSignature.SpaceAfterOpenBracket seems to only affect what is in the relevant commit. It does not seem to be related to for loops.\n. The for loops example you made is covered by Squiz.ControlStructures.ControlSignature.SpaceAfterCloseParenthesis.\n. Rebased.\n. Already fixed in 2.0 and master\n. This can not be implemented for 1.0 due to PHP4 compatibility.\n. Fixed by #743\n. Let's please always use assertSame instead of assertEquals (=== vs ==).\n. Please squash  eab2740 into fe05dbd and 36b6324 into 66a7f4a.\n. @terrafrost Your rebase looks good.\nWhen rewriting history like this and pushing to a PR branch on terrafrost, you will have to use the -f or --force option to replace the old commits with new commits, overwriting the rejection.\nPlease note that this option MUST NOT be used for the \"blessed\" branches, i.e. 1.0, 2.0 and master in the phpseclib repository. Unfortunately Github provides no option to enforce this for blessed repositories like phpseclib/phpseclib.\nFinally, by using the --delete option, you deleted the remote branch and github subsequently closed the associated PR.\n. #670 talks about a disclaimer. It also lists some concerns, e.g. \"My fear in suggesting such a change is unintended consequences for other users with vastly different use cases.\" I assume those have been considered.\n. Arrrr. Looks like the rebase in #736 was not so good. Looks like repicking commits creates new commits that we do not want. So you have to refrain from using interactive rebase further than the point in history you want to change.\n. No, we don't want to duplicate those commits.\n. Replaced by #743 \n. We might have to look into (whether and) how to properly document Exceptions so they show up in the API docs.\n. Thanks for the explanation. I think the application of the bitmap is a bit weird or at least complex. Couldn't the random method on BigInteger be used to do this in a less complex way? https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/BigInteger.php#L3061\n. Fixed by #746\n. Hummm. The Hash class isn't really a wrapper around hash() post-patch. For example new Hash('whirlpool'); will silently do sha1, which is just weird.\nSeeing how hash() does not support truncated hashes such as sha512-96 (at least hash_algos() does not return them in the list of supported hash functions) I think it makes sense to keep the Hash class (and also some of the unit tests testing the functionality it provides). However, here are some improvements that are kind if necessary IMO:\n1. If the specified hash is not supported, throw an \\InvalidArgumentException. This can be checked using hash_algos() and keeping in mind the following point.\n2. More generic support for truncated hashing, e.g. whirlpool-96 should return the first 96 bits of the full whirlpool hash. Maybe also check that the lengths are within bounds, e.g. throw an Exception for sha256-384\n. @terrafrost If there is an exact match for sha256-96 in hash_algos(), use that hash instead of applying our own truncation logic.\n. Maybe keep the lenghts of well-known hash algorithms such as SHA and call strlen(hash('')) otherwise.\n. Remaining question is whether it is a good idea to always truncate the right hand side of the output hash.\n. Let's not silently fall back to sha1 but rather present some form of error.\n. I think some of the existing hash tests should be combined into a new Hash Test testing the functionality that is left, e.g. truncated hashes, hash with key, hash without key, known lenght (e.g. sha256), unknown length (e.g. whirlpool).\n. Looks like this misses 2.0?\n. This should be merged into master now.\n. Don't fall back to sha1 but throw an exception instead?\n. Also remove the sha1 default argument from the constructor?\n. Add tests for getHash() and getLength()?\n. This should indeed almost be ready. Feel free to reopen this against master for correct bookkeeping, though.\n. @terrafrost I don't think the order in which exceptions are introduced matter too much with regards to the unstable development branch master. In fact, the other PR looks good too.\n@terrafrost sha1 should no longer be used (use sha2 or even sha3). Same for AES-CBC (in most cases, one should rather use AES-GCM or another AEAD cipher). As such I don't think those defaults are usuful in general as they likely lead to novice users using deprecated crypto. If you want a default, I'd rather change it to sha256.\n. #777 has some work for this. It looks like this should rather go into 2.0. I've adjusted the description.\n. Sending this to master instead and allowing failure.\n. I am sorry, but I guess you will have to give reasons for each of these changes besides \"Static Code Analysis with Php Inspections (EA Extended)\" in order to have them accepted. \n. @kalessil Thanks for the explanation. Unfortunately I think the situation isn't as easy as it looks. I will be leaving inline comments.\n. @kalessil Yes ;-)\n. @kalessil Yeah, indeed. Sure, feel free to contact me. You can find one of my email addresses in the code. E.g. https://github.com/phpseclib/phpseclib/blob/master/tests/PhpseclibFunctionalTestCase.php#L3\n. @terrafrost Do you expect any problems with intval vs casting in PHP4 world?\n. @kalessil Not necessary. We can probably easily fix them on merge.\n. This looks good to me, besides the & additions, which I can not comment on right now. @terrafrost Do you want to look into that?\n. @kalessil This is seems to conflict heavily in 2.0. Can you provide a branch based on 2.0 with this PR merged into it?\n. @terrafrost Please review.\n. Diff is easier to read without indentation changes: https://github.com/phpseclib/phpseclib/pull/755/files?w=0\n. @terrafrost Updated. Changed PR description.\n. I'd suggest by starting with closing all the open support questions that are stuck (missing information).\n. Do we want to look into PHP7 support before 2.0? I assume we can also do that against master, maybe PHP7 will be in RC soon.\n. Something went wrong during merge. https://github.com/phpseclib/phpseclib/blob/2.0.0/composer.json#L62 does not belong there.\n. Not a reason to make another retag though.\n. https://github.com/phpseclib/phpseclib/commit/844134df95e42b93ed5506a2d11ca5accda99412 added a phpseclib/phpseclib1.0.0.zip file to the repository history. @terrafrost Please just stick to pull requests!\n. > That file was deleted in a later commit.\nAs you probably know, that is not how repositories work. Without rewriting its history, which you should never do for blessed branches anyway, the file is locked permanently and forever in the repository, contributing to the repositories size.\n\nI mean, if I update the website to announce a new release, the README.md should be updated shortly there after (a few days delay is acceptable imho).\n\nWe should change the workflow to no longer make release changes necessary in the repository at all. Just don't link to the latest and greatest version. Instead, just link to the download page.\n. @terrafrost CHANGELOG needs to be changed longer before the release, not right at/before the release. The entries need to be reviewed too.\n. It was intentional due to object handling (copying) in PHP4.\n. Har. Wrong target branch.\n. @terrafrost It's more about adding classes by registering an autoloader. The same probably works for unregistering an autoloader. Also, the next step would be to make the supported algorithms changeable via method calls.\n. Fine with me.\n. My preference would be to simply not support stupid features like mbstring.func_overload and to throw an error/exception in those cases.\n. Possible implementation via https://getcomposer.org/doc/04-schema.md#files\n. Let's just make everything else unsupported.\n. phpseclib does not support MB_OVERLOAD_STRING in any version, so this is clearly not a BC break.\nFirst of all, we need to document this incompatibility, which I'd say is even sufficient to deal with this problem.\nThen, loading the bootstrap file via composer is an optional precaution to make it easier for most of our users. This optional precaution could potentially also go into the 1.0 branch.\n. @terrafrost I see.\n. @GrahamCampbell Thanks.\n. Your example is incomplete as there is no SSH involved.\n. @felixkiss A shot in the dark: Your id_rsa is password protected. You can see whether it is or not by looking at the file content, e.g. Proc-Type: 4,ENCRYPTED.\n(Option 1)\nI think you can specify a password using $this->key->setPassword(...).\n(Option 2)\nHowever, calling ssh will likely ask you for the password on first use only and then keep the decrypted key in a process called ssh-agent. phpseclib also supports login using such an SSH Agent. You simply pass an instance of phpseclib\\System\\SSH\\Agent to SSH2's login method.\n. I can indeed imagine that 2fee2d4f98761b6543d467166ad5143780aa0830 actually broke something. The original PR was at #668 by the way.\n. Left a comment on the original PR: https://github.com/phpseclib/phpseclib/pull/668/files#r36621109\n. @terrafrost Hehe. Shit happens. I guess the takeaway from this is that things aren't always as easy as they seem.\n. Fixed by #769\n. You came up with this on your own? Becuase I was guessing in https://github.com/phpseclib/phpseclib/pull/668/files#r36621109\n. @dol #789 is against 1.0\n. @terrafrost This should still go in? Can you show me how to break this test?\n. I am afraid I'll have to fix the unit tests some more.\n. Actual test failures introduced by your changes can be found here: https://travis-ci.org/phpseclib/phpseclib/jobs/75941904#L1461\n. On that page you linked to, I see a \"Empty list() assignments have been removed\" section. But most of the list() calls you are changing in phpseclib are in fact not empty, they are only missing some variables. Are you sure this is an issue with PHP 7.0? https://travis-ci.org/phpseclib/phpseclib/jobs/76047515 does not seem to complain about this either.\n. I think the behaviour should be made consistent with built-in streams such as file://.\n. Argh. This needs PHP 5.4.\n. This patch is generally useful to have because CartesianProduct is an iterator which means we do not have to precompute all the data. On the other hand, however, this size of the dependency added is rather large for potentially little gain.\n. This patch is identical to #790 which applies cleanly to master as well.\n. Fixed by #794\n. @CashCode Sure, if an SSH client supporting tunneling is available to you (e.g. an OpenSSH client binary), you can use that for establishing a tunnel. Using external SSH clients is not within the scope of this project, though.\n. @terrafrost May I claim the 25 USD too? :-P\n. Double quotes is probably easy. Single quotes are impossible without globals, because $sftp in the string is an (API) instruction to take the variable named sftp from global scope (which necessarily involves globals).\n. @terrafrost Let's pay after this was merged?\n. This fixes #572 ?\n. @terrafrost I'll take care of it as soon as the outstanding comments are addressed.\n. :+1: Thanks a lot\n. Your last commit seems to have added some log file. Please amend/rebase.\n. This is no longer required after #794\n. @cweagans We merge 1.0 into 2.0 and 2.0 into master.\n. For adding 7.0 to Travis CI, please pick 2813e2cd3b829b3fd3e89bb66762f7b38e234ce6 and throw away the other commits.\n. PSR2 is basically already adopted. For exceptions and why, please read https://github.com/phpseclib/phpseclib/blob/master/build/code-sniffer-ruleset.xml#L6 Code Sniffer can a) be used locally and b) on Travis CI to enforce coding style PRs and blessed branches. I think this ticket should be closed.\n. Yes, tests are run on 5.3.3 because that is the minimum supported version. Please note that code coverage has improved but could still be better. http://phpseclib.bantux.org/code_coverage/master/latest/PHP-5.5.9/\n. While this might be the version that the PHP binary on Ubuntu 14.04 reports, it is not exactly the same binary since the Ubuntu version is probably (heavily) patched while the version provided by Travis is probably directly from php.net. Nevertheless, I am fine with having this.\n. 1.0 is PHP4 compatible, e.g. due to class name constructors. Those do not work on PHP7 as far as I remember. As such, 1.0 can never be PHP7 compatible. Hence, having this in 1.0 does not make sense.\n. Merging #797 into 2.0 and master made this obsolete.\n. Merging #797 into 2.0 and master made this obsolete.\n. Hell yeah!\n. @GrahamCampbell Yes\n. grep says this needs slightly more work, but these PRs are okay to merge IMO.\n. Specifically:\nphpseclib/File/X509.php:     * @return String\nphpseclib/Net/SSH2.php:     * @var mixed false or Array\nphpseclib/Net/SSH1.php:     * @return string or Array\nphpseclib/Net/SFTP.php:     * @return string or Array\nphpseclib/Math/BigInteger.php:     * @param $input Array\nphpseclib/Math/BigInteger.php:     * @param $x String\nphpseclib/Math/BigInteger.php:     * @param $shift Integer\nphpseclib/Math/BigInteger.php:     * @param $x String\nphpseclib/Math/BigInteger.php:     * @param $shift Integer\n. @GrahamCampbell Don't care. This is for consistency with master. Feel free to actually fix the failures.\n. @GrahamCampbell Someone will have to take the time to look at what tests are failing, what tests can be made to work on php 7.0, what tests need to be skipped. Simply allowing tests to fail allows us to see what tests are currently failing on PHP 7 (which may even change based on PHP 7 development).\n@GrahamCampbell I am not sure 2.0 can be made 7.0 compatible. It might be possible. I am pretty sure 1.0 can't. Initially it looked like 2.0 can not be made compatible (see #777), which is why this ended up in master only. Anyway, thanks for your help.\n. This bug also affects the 1.0 and 2.0 branches. Please close this PR and send a new one against the 1.0 branch. Thanks.\n. Thanks a lot.\n. I believe this is no longer relevant.. This looks pretty good. I'm nitpicking anyway. Nice catch on the tiger thing.\n. @terrafrost Removed the commit in question.\n. Obviously we could use some help with the documentation. I am happy to assist setting a new system up, should that be necessary. We can also make use of the phpseclib.org domain now.\n. @terrafrost Without looking to deep into it: Your problem with static/non-static is probabably a result of the RSA class doing too many things for starters. I don't think your new API is very good. First of all, I very much dislike the extract() call. And then having the following static does not make sense to me:\nRSA::setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PUTTY);\nRSA::setPassword('zzz');\nHow do I generate many keys of type A with password X and many keys of type B with password Y? That state really should not belong to the RSA class, it should belong to an instance. Consider introducing more classes, e.g. RSA_Key and RSA_KeyGenerator. \n. @GrahamCampbell Can we add stuff to CI ensuring all doc blocks have the expected format?\n. We can probably do that. I generally prefer stuff that can be run offline, though.\n. Missing composer.json\n. I updated the composer.lock hash(es) in the merge commit(s).\n. This looks okay to me now. RSA could use some more code coverage though.\n. @terrafrost The 1.0 code base is not expected to work on PHP7 because of PHP4 style class constructors, which are (to my knowledge) no longer supported in PHP7.\n. @GrahamCampbell If PHP4 style constructors are only deprecated we should make 1.0 PHP7 compatible too.\n. Something went wrong in the merge as this reintroduces const_namespace.\n. @terrafrost @DavidAnderson684 Nice work! I shall look at it later.\n. Please keep this PR to bugfix only.\n. I am not a fan of those static calls and would (probably, as always) prefer a more object oriented way, say\n$someRsaObject = new FooRSA(new ClassNameForFormat)\nor\n$someRsaObject = new FooRSA;\n$someRsaObject->generateSomething(new ClassNameForFormat);\nbut I do not have time to further look into this.\nThis way, the whole plugin-loading would be done via class autoloading and would trivially allow extension with new formats/classes.\n. Thank you.\n. @terrafrost Please do not close ticket that have not actually been addressed yet (i.e. PR actually merged).\n. What is the status here?\n. @terrafrost What is the status here?\n. Confirming issue.\n. Replacing this with #852 which contains a test case and is against 1.0. Thanks for your patch/report.\n. #865 and #866 handled this.\n. Replacing this with #868 (which is against 2.0).\n. Merge is still broken. I (think I) merged 2.0 correctly via 3793f34876f1f1b57c23a0c9fdd88df79d32a184.\n. We are using fsockopen(). See the IPv6 hint on http://php.net/manual/en/function.fsockopen.php which says that v6 addresses are supposed to be entered using brackets. However, \"[2a00:61e0\" is not syntactially correct as it has an opening bracket but no closing bracket. My guess would be that you entered the address correctly, but ownCloud does not support it properly. cc @PVince81 \n. @MaximilianKindshofer Which version of ownCloud are you using?\n. Problem is likely here: https://github.com/owncloud/core/blob/v8.2.0/apps/files_external/lib/sftp.php#L70-L75 Feel free to report to ownCloud.\n. Replaced by #875\n. Updated 2.0 and master on merge.\n. Patch looks good to me. This is a bug fix though and will have to go into 1.0 and 2.0 too. I'll take care of that.\n. Replaced by #883\n. @peterhildenbrand Please consider specifying a name and an e-mail address in the commit.\n. I think it makes sense to have the functionality described in the previous\ncomment.\n. Can you link to the upstream ticket then?\n. Let's see what we have to do with this in 2.0. I'll look into it.\n. Ahahahahahaha lol.\n. This patch is wrong and not acceptable. Only the line containing 'pvno' => array( is improperly indented ($n mod 4 != 0). phpcbf incorrectly adds a space to lines with similar indentation as the affected line. This can be easily seen by a) looking at the affected block pre-patch or b) counting spaces in post-patch (my editor shows me that there is an extra space).\n. ~/phpcbf.phar --standard=build/code-sniffer-ruleset.xml phpseclib/;\n~/phpcbf.phar --standard=build/code-sniffer-ruleset-tests.xml tests/\ndoes not seem to have anything to fix in any of the blessed branches post-patch.\n. There probably is a better mechanism for installing parallel than compiling it.\n. Tried https://github.com/composer/composer/blob/master/.travis.yml#L9-L12 ?\n. Your problem is different from what you think it is.\n. As far as I remember, we don't care whether \\Sodium is provided by an extension or a third party library, so calling autoloader is intentional.\n. @tburschka I'd argue that this is a bug in your autoloader implementation (the first example you posted). Autoloaders in PHP form a queue and are called one by one until a class is found. By throwing an exception you're interrupting this queue. Any autoloaders registered to run after your autoloader will never execute at all. Also see e.g. http://stackoverflow.com/a/3813335\n. @tburschka I'll go ahead and assume that what I said makes sense and close this ticket.\n. This should be fine but should probably go into all branches.\n. @terrafrost Don't you think it is time to just require proper randomness to be available from the OS (and otherwise just fail fatally)? The amount of time wasted on this PR is ridiculous.\n. Unit tests for the existing IPv4 behaviour and the newly added IPv6 functionality would be nice. Or is that already covered somewhere?\n. I am closing this due to inactivity. Feel free to reopen if you can provide more information.. See https://github.com/phpseclib/phpseclib/issues/919#issuecomment-181928242\n. The point is, your autoloader (yii autoloader?, although the website\nsuggests it is using composer) is not behaving properly. If it can not\nhandle a specific class name it should not fail fatally.\n. Are you talking about :: vs \\ ? That should be fixed already.\n. @CashCode Any update?. The patch looks good to me. I did not look at the context, though.\n. Do you have an example for reproduction (or even better a test case)?\n. @younkim Any update on this?\n. There are multiple BigInteger backends phpseclib can use. GMP being the\nfastest, bcmath an alternative and the native php implementation the\nslowest.\nTry to find out which of those two php modules are available to your users\nin slow/fast cases.\n. @terrafrost This looks good. But more things are broken here, see https://github.com/d-naumann-yatego/phpseclib/commit/2039530f7c865b8370d4d30137e8b9045c737261.\n. I would prefer a new release.\n. I am closing this as a duplicate of #47 if you don't mind.\n. Including all files is most likely a waste of time and memory. Manually managing dependencies is non-trivial and has resulted in countless problems for this very project. Besides that, it is just unnecessary code that can be removed after introduction of proper abstraction. One such abstraction is a PHP feature called autoloading.\nYou are free to shoot yourself in the foot by not using an autoloader, but you're on your own then. I don't even understand why @terrafrost is trying to make mediocre workarounds to autoloading work for you.\nThe master branch is the development branch. If you want something stable, use the 2.0 branch. As far as I know the composer autoloader (https://github.com/composer/composer/blob/master/src/Composer/Autoload/ClassLoader.php) works standalone without the rest of composer. Properly documenting how to use it is an open task in #257, feel free to tackle it.\n. @paragonie-scott The 5.5 environment runs the code sniffer. The problem is \"There must be one blank line after the namespace \"PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter\". See https://travis-ci.org/phpseclib/phpseclib/jobs/129270067#L577 and following.\n. @paragonie-scott Might want to fix the author/commiter on cda2cdc. There is a typo in the e-mail address.\n. I think most of these were pointless in the first place as public information was converted.\n. @joaoeduardo Any update?\n. What are you trying to achieve?\nDevelop improvements for phpseclib? Or do you want to use phpseclib in your project?\nIn the first case php composer.phar install is correct and you should install the dom and simplexml PHP extensions as indicated by the error message you are seeing. In the second case you can probably get away with php composer.phar install --no-dev which will not install phpseclib development dependencies.\n. @mrpeski I believe you meant to close this permanently.\n. @froemken Any update on this?\n. I don't think having loopforeach makes sense.\nAlso, please squash the commits to remove the CS changes.\n. @terrafrost I'd like to point out again that the loopforeach method does not make any sense to me. Executing more iterations of a loop than fit the int type is a niche application. It does not belong into the already 4K lines BigInteger class.\n. I am closing this. This is very very likely simply caused by attempting to create a 7 GiB string.\n. Pass an instance of ssh agent to the login method.\n. Hmm. Ok. Looks like i do not remember how this works, then. Can you post\nyour .ssh/config file?\n. I am afraid then I don't know why ssh vagrant@192.168.7.7 works for you. Maybe ssh is defined as an alias for something. Maybe you can use the RSA private key at ~/.vagrant.d/insecure_private_key which some documentation seems to suggest.\n. Yes, construct an RSA object and load id_rsa into it. Pass that as the second argument to the SSH login method. If id_rsa is passphrase-protected, you also have to decrypt it. But in any way, it would be better to use an SSH agent (e.g. Pageant).\n. @ethanclevenger91 Did the above help?\n. Maybe https://github.com/phpseclib/phpseclib/issues/404 has some pointers\nfor how you can achieve that.\n. @lukepolo Here is a somewhat longer answer: I am afraid you have to get the public host key from the SSH2 object yourself (there should be a method for that) and see whether it matches the expected (e.g. a potentially previously stored) host key. If you need support for a solution involving a known_hosts file, you could probably sponsor #404.\n. @lukepolo Any update on this? I think this can be closed in favour of #404.\n. @romucifu As I tried to explain in the other ticket, this is not necessarily an indicator for a bug. Try using printf('%X', $a); for printing those integers. It should yield DA827999 on both platforms.\n. I think that if $a and $b are both 32-bit integers, then $result will be the exact same on both architectures. It is the echo statement that interprets them differently. So an interesting thing to look at is where $this->bctx['p'] is used.\n. This, just like #1034, might be caused by bugs in PHP versions that have been outdated for years.\n. > If the float is beyond the boundaries of integer (usually +/- 2.15e+9 = 2^31 on 32-bit platforms and +/- 9.22e+18 = 2^63 on 64-bit platforms other than Windows), the result is undefined, since the float doesn't have enough precision to give an exact integer result. No warning, not even a notice will be issued when this happens! \nhttp://php.net/manual/de/language.types.integer.php#language.types.integer.casting\n. @terrafrost I was wondering if you could just do two additions modulo 2^16 an some shifting instead of one 2^32, but I really did not think it through.\n. > But the reason I have it upped to PHP 7 in the master branch is because I'm using \"Constant arrays using define()\"\n@terrafrost Please use const instead of define as the latter is in global space.\n\nBut again, wouldn't it make sense to have a composer.json in master that reflects the current version requirement of master?\n\nIdeally, all changes would be consistent. However, some things simply slip through sometimes.\n. This is probably a bug that should be fixed nonetheless.\n. @terrafrost What I was trying to say is that if $s can be empty, you should not access $s[0].\n. Disable mbstring function overloading: http://php.net/manual/en/mbstring.overload.php\n. 1.0 is supposed to be PSR-0.\nhttps://github.com/phpseclib/phpseclib/commit/29659f877d5be1720cff70eafc0b4687ec842449\nbroke this.\nAs a workaround maybe you can upgrade to 2.0 right away, which is PSR-4.\nBut its also namespaces, so you would have to do some refactoring.\n. Did you try undoing the changes I linked to for PSR-0 support?\nset_include_path in tests is a leftover from PHP 5.2 support. It can\nprobably indeed be removed and made consistent with the 2.0 and master\nbranches.\n. @terrafrost Please let's do things properly: 1.0.5 and update everything. If doing a release is time-consuming, we need to (further) automate it.\nBtw. https://github.com/phpseclib/phpseclib/commit/29659f877d5be1720cff70eafc0b4687ec842449 looks like a broken cherry-pick of https://github.com/phpseclib/phpseclib/commit/cd57bf31ae576a178016209576c8a3c305c7b82f which probably could have been detected if it went through a pull request.\n\nHow does https://github.com/terrafrost/phpseclib/tree/1.0-composer-fix look?\n\nPlease always send pull requests right away. In the worst case, the patch is not good and the PR has to be closed.\n. Missing composer.lock changes as requested in the comments?\n. This is not a too big issue, though.\n. This was merged with #1050 (tests passed).\n. @moyarich Are you saying that touch() truncated the file down to 0 bytes?\n. Please describe your environment. Which SFTP server is this?\n. @moyarich No, I am asking about the SSH/SFTP server you're connecting to. Can you share the hostname/IP?\n. Please show minimal code snippet for reproduction.\n. Can you try without the + in the dir name?\n. Please define/explain \"support for encryption with multiple public keys\".\n. @byinff phpseclib provides the cryptographic primitives used by these communication protocols, it does however currently not contain any implementations of those protocols. See #68 for OpenPGP.\n. @byinff The generic approach for encrypting large data to multiple public keys is to generate a session key and then encrypt the session key using the set of public keys. This can be done with phpseclib, but is outside of any standard such as OpenPGP. If you looked at #68 you may have noticed that there is a link to https://github.com/singpolyma/openpgp-php which is a project using phpseclib to implement OpenPGP. I am not sure it fits your needs.\n. The whatsapp protocol is more complicated and provides security guarantees\nbeyond OpenPGP. I think the protocol is called axolotl.\n. Please provide more context. E.g. how was phpseclib installed?\n. @andrrrl I see, thank you. I am going ahead and close this issue as it seems to be resolved for you.\n@terrafrost Since support requests like this one have increased recently, maybe we should improve a bit on our README.md.\n. Yes that should be possible.\n. Do not mix mcrypt with phpseclib. In your Java code it looks like you're\nusing a key, so you have to use setKey instead of setPassword. You do not\nneed a new IV for decryption. (You might want to read up on the theory of\nAES CBC encryption.)\n. @AndriySvirin Did you figure it out?. is_bool() is a type check.\nEdit: Oh, I misread. Please disregard my comment.\n. The combination of \"deleting recursively\" and accepting empty values such as null or '' is a rather bad one and should be addressed sooner rather than later. I do not think that using a second boolean parameter on delete() makes sense either. I much cleaner solution in my opinion would be having an extra method for deleting recursively.\n. Only made it halfway through and at the end also realised that some code I commented on was actually moved.\n. The manual says\n\nOn error FALSE is returned and a warning raised (this can happen if the system call is interrupted by an incoming signal).\n\nSo is there any warning (possibly logged)?\n. I am going ahead and close this. I would say that it is not directly related to phpseclib anyway. Hope that is fine with you guys.. @andrewandante If your minimum-stability allows you to receive unstable code, this is the expected behaviour. Consider setting minimum-stability to stable and allow unstable code on a package basis. See composer documention on how to do that.\nI take it that this issue is already resolved.. I am closing this. Feel free to reopen after confirming the latest version of 1.0 (or any other supported branch) is affected.. I take it that this can be closed. On a side note, the readme file now contains descriptions of branches. . @terrafrost Here's a Let's Encrypt certificate.\n-----BEGIN CERTIFICATE-----\nMIIGFTCCBP2gAwIBAgISA8xEXxRqvPUHOFKAKKu/B2psMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMDMxMjIyMDBaFw0x\nNzAzMDMxMjIyMDBaMBwxGjAYBgNVBAMTEXd3dy5waHBzZWNsaWIub3JnMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4RDVivyzWvfpliBpGQy1W+I6JBy5\nvnzAzqLLDPGH6JGqIRzjysXiOlemiDXa1KCaUSXpyPlgBNz7qAvWS4F3nl7gE8UN\neH6vlwXo0DhVdrW8uj22sV1/mbcqcqYU+28qkiOMJiqzpMFN/4/gKMpFcHxOD1aA\nDqmuEzP8LjxhAJRj+AxGOiHloNDQqrVbf61dSIo4GNSo/o5D8ShTYbBu+SOnH8GT\nVQ6bkTEOs96Rwc18EIuA5cXllEdA7n8FEQD0tH2urxsKsGcdz4FWMAxLYcFyvLJ9\nJamGy27BlsknzQaKM9aZ7Cm9SszpNY7KBsaK3O/J3mmZi0R3PEl+mw1tY+qkKoLB\nI+YzyyMW64IJPGhMhl7qykY1tSlNpvmqd73Oyj0Ta88U9uaCgcUB4z/mPyqVHK/m\np0eyGfh+3zXf6faikv3SVmyNS9mPt5rTdBhGfqGwh55X3m0nq21VhOWz7BQhGaWu\nPGAlsFMBfVieOjNn9C9ESHRgdQ5+AtsfOxd0+3k8IwZH71eyZ+fExE0tI7TDWWVw\nZj39Czr35YUBZsLnCl9GLy7LrvUKFGjy8Em1HxvYL8ftWNqphPG57YxfgBRa/pPn\nyP+eHGde7eQkg3iqfwXnSkJZQxrTOG0hTFV9k78580AgtLvukKSHy6ycWOPF7Q3a\nd7goe0YkYV8/YCUCAwEAAaOCAiEwggIdMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUE\nFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU\nkSHoWs6/XfWPXnlB4D9vkDjBgE8wHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl\n7/Oo7KEwcAYIKwYBBQUHAQEEZDBiMC8GCCsGAQUFBzABhiNodHRwOi8vb2NzcC5p\nbnQteDMubGV0c2VuY3J5cHQub3JnLzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQu\naW50LXgzLmxldHNlbmNyeXB0Lm9yZy8wKwYDVR0RBCQwIoINcGhwc2VjbGliLm9y\nZ4IRd3d3LnBocHNlY2xpYi5vcmcwgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeYG\nCysGAQQBgt8TAQEBMIHWMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNy\neXB0Lm9yZzCBqwYIKwYBBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBv\nbmx5IGJlIHJlbGllZCB1cG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSBp\nbiBhY2NvcmRhbmNlIHdpdGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBh\ndCBodHRwczovL2xldHNlbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0B\nAQsFAAOCAQEABTa4Oo6pk+OSF2a1dl3166Z/Nr5mFbUideeddztxFM2ejtoirETD\nK+CF0B06OGUVVROrOpRiP3Ud1PxolOe5v8E3b1fvcJ6nXBUpHfzrlSGjVP/bJeob\nMGc3TrWDFU2ymM2ctUjOQGzHyTyqP0gCvOlbSQHKaoVmj41adEbaKG3zhU9EtOBz\nNWO6qSgPX7xMkHxx9XA5bJmW/MVM7kWN6ezDwu2GUMvNl7PpFDxNvHGsPRwHDMQz\nNNp2He/8NSedvZNTEL1OPaxk8dL4p+KPCmDVKoCRV347CpsQPdPNuEDEvxoFjH/g\nwq7j/xlj1WswUdpQoJ3kuP9OxXdv6AUgxA==\n-----END CERTIFICATE-----. No spaces please.\nOn 16 Dec 2016 17:33, \"Vladimir Ghetau\" notifications@github.com wrote:\n\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/phpseclib/phpseclib/pull/1074\nCommit Summary\n\nexec authentication, code reuse\n\nFile Changes\n\nM phpseclib/Net/SSH2.php\n   https://github.com/phpseclib/phpseclib/pull/1074/files#diff-0 (2)\n\nPatch Links:\n\nhttps://github.com/phpseclib/phpseclib/pull/1074.patch\nhttps://github.com/phpseclib/phpseclib/pull/1074.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/1074, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALjv6ugBZXKvK6D6VxcJ86Vc6EYy6qqks5rIr0-gaJpZM4LPW9R\n.\n. @terrafrost How does that look to you?. @ytilotti Do you have an actual problem or is this just something you noticed in the code? You probably missed that there is some, in my opinion weird, encoding going on. I believe whether an array or object is used determines whether the cached entity is a file or a directory.. @ytilotti Which version of phpseclib are you using?. Some versions with L1112 containing actual code. Neither of those seem to \"Attempt to assign property of non-object\". \nhttps://github.com/phpseclib/phpseclib/blob/1.0.2/phpseclib/Net/SFTP.php#L1112 (1.0.0-1.0.2)\nhttps://github.com/phpseclib/phpseclib/blob/1.0.3/phpseclib/Net/SFTP.php#L1112\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L1112 (2.0.3-2.0.4). @ytilotti ?. @ytilotti I am closing this due to inactivity. It's very likely this issue has been fixed already.. @access is doc block is not required by API generator. I think in conclusion this means that we should not have any of them for 3.0.. Indeed\n\nOn 22 Jan 2017 15:28, \"terrafrost\" notifications@github.com wrote:\n\n@terrafrost commented on this pull request.\nIn phpseclib/Common/Functions/Strings.php\nhttps://github.com/phpseclib/phpseclib/pull/1084:\n\n {\n     $substr = substr($string, 0, $index);\n     $string = substr($string, $index);\n     return $substr;\n }\n\n+\n+    /\n+     * String Pop\n+     \n+     * Inspired by array_pop\n+     \n+     * @param string $string\n+     * @param int $index\n+     * @access public\n+     * @return string\n+     */\n+    public static function pop(&$string, $index = 1)\n\nWhen I view the diff on github.com changes to that file are collapsed by\ndefault:\n[image: screenshot]\nhttps://camo.githubusercontent.com/ba20695346b1be6c682e2599a827af1b2a55731d/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f6a5550674a2e6a7067\nCould be why you're not seeing it?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/1084, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALjv2Dz8yOpVZMFvcH84xPG3okIXLAPks5rU2eogaJpZM4LmfX4\n.\n. There is a _connect() method which is called by login().. It will return false before login(), of course.\n\nOn 21 Jan 2017 18:32, \"terrafrost\" notifications@github.com wrote:\n\nI'd like to check if the connection succeeded before actually trying to\nlog in, or execute any other command.\nSounds like isConnected() should do what you want?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1086#issuecomment-274275655,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALjv28phYtHtKKrshS7uJZnYtMgDAyRks5rUkFKgaJpZM4LoLGp\n.\n. I think it does. https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L3013. @TheShrike ?. @terrafrost If you want to know even more, consider looking into the PHP source code. You might find that the E_WARNING also depends on the OpenSSL version. Just guessing.. @s22l1g11 Composer is the recommended approach for installing phpseclib 2.0. However, as 2.0 has no production dependencies onto other composer packages, you can probably get away without composer. phpseclib 2.0 relies on autoloading for loading classes, so you'll need a PSR4 autoloader configured appropriately (https://github.com/phpseclib/phpseclib/blob/2.0/composer.json#L70) or another approach for loading classes (e.g. just loading php files all using include()).\n\nmaster (3.0) has production dependencies.. Yes, dirty. I'd suggest you make yourself familiar with the concept of\nautoloading.\n. Also see e.g. https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader-examples.md\n. I think this can be closed.. I'd be much in favour of getting rid of extract().. phpseclib does not provide a Symfony bundle.. > So any other way to configure it?\nIt's a library. You create object and pass arguments.. > but it didn't working\nPlease explain. What is the expected behaviour? What is the actual behaviour? Any error message? Did you check the logs?\n\nelse echo $sftp;\n\nI am not sure SFTP implements toString() and this works.. Do you have the GMP extension installed?\nOn 20 Feb 2017 06:13, \"kherP\" notifications@github.com wrote:\n\nCurrently the SFTP takes around 6 seconds to log in. I tried SFTP\nkey-pairing and thought the time taken to log in will be shortened but\nturned out it took more than 6 seconds to log in. Is there anything I can\nconfigure to speed up the login time?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1098, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALjv9JocVjFV6PDZRiMZ22ZGTZX2TDZks5reSD3gaJpZM4MFxVq\n.\n. AFAIK the connection is only established on login. GMP should speed up SSH key agreement.. You're probably using the master branch, which you probably should not. See\nREADME.\n. @GabrielEnraged phpseclib's SSH2 class can not find any usable ciphers. How did you install phpseclib? If you only downloaded and included SSH2.php, that is why. I'd recommend using phpseclib 2.0 with autoloading via composer.. Thanks for reporting. I will look into it ASAP.\n. This should be resolved and is now being monitored.. Packagist shows 1.0.6 and 2.0.5 for me.\n. Is there any log output?\n. I am in general support of this. Maybe this should be extended to MACs and\nother algorithms as well.\n. Thanks. Done.. It's possible.\n\nI think you have to use OpenSSH debug2 (-vv) or debug3 to see which ciphers\netc. are negotiated.\n. Actually, nevermind, that info should be in the phpseclib log as well.\n. Looked over the logs. Phpseclib should have matching ciphers/algos. Unless\nI am missing something.\n. phpseclib should be able to do e.g. diffie-hellman-group14-sha1, ssh-rsa, aes128-ctr, aes128-ctr, hmac-md5, hmac-md5, none, none.. Looks like this has something to do with the advertised max packet size.\nSee https://github.com/phpseclib/phpseclib/blob/1.0.7/phpseclib/Net/SSH2.php#L3157. Which version of phpseclib are you using?. So that would be https://github.com/phpseclib/phpseclib/blob/2.0.6/phpseclib/Net/SSH2.php#L2596\n@terrafrost \nMaybe isset($this->server_channels[self::CHANNEL_EXEC]) should be checked.\nLooks like it would have to be filled by https://github.com/phpseclib/phpseclib/blob/2.0.6/phpseclib/Net/SSH2.php#L3418.. There is a stream wrapper for phpseclib's SFTP implementation which you\nmight want to use as a workaround.\nhttps://github.com/phpseclib/phpseclib/blob/2.0.6/\nphpseclib/Net/SFTP/Stream.php\n. Guessing: sftp://host/./path to upload to home/pwd.\n. @paragonie-scott What's your take on this?. Should this go into 2.0 as well? Does it break anything? I don't know to be\nvery honest.\n. Can you show some code? You are probably holding a lot of data in memory.\n. This is probably useful to have. At least in master. Thanks.\n. Is there a code sniffer sniff for this? :-)\n. This was not intentional. The tag is on the wrong branch.\n. I hope tagging 2.0.9 on the correct branch will address the issues.\nDoing so is probably what I'd suggest. Any alternative suggestions are\nwelcome.\n. Michal, Jelle: Please let us know whether that fixed the issues you were\nhaving. Thanks\n. Please check again. You're probably looking at a master commit.\nhttps://github.com/phpseclib/phpseclib/blob/2.0/composer.json#L54 says 5.3.3\n. Indeed. Something seem to have went wrong there.\n. Looks good to me. Thanks.\nDoes this patch apply to 1.0 or 2.0?. Yes. Hence the question.. Did you see the \"no permission\" in the log? Does the user not have\npermission to delete the file and phpseclib then assumes its a directory?\n. Please see #762 . Closing this due to inactivity of original author.. Closing this as a duplicate of #1082 and #1309. Try the above code without cphalcon?. $sftp->get() will give you the file as a string, and can possibly consume a lot of memory. Using streams / stream wrapper should allow you to iterate over a remote file with constant memory requirements.. Closing because of inactivity.. @kpawel-29 The first question I'd ask myself is what the scope of the signature is. I.e. are you actually verifying the right thing.. Your input data are hex strings. Applying base64 decode seems wrong.\n. > I am getting create_function() deprecated notice in the PHP 7.2.\n@pmbaldha Where are you getting that? Static code analysis?. @terrafrost phpseclib will function without EvalBarrett, so an option would be moving it to its own composer package, which can be depended on optionally. The \"best practice\" would be to install the GMP module anyway.. Thanks for reporting. Should be fixed.. @terrafrost This could be improved to include technical details in the comment. Something like \"we are doing manual code generation/inlining/unrolling to a massive performance increase.\". @esraanaem great!. Hmm. If execution stops, the value of bitmap is irrelevant. Can you elaborate?. 0c26415f932aedc5b77e9dae39c20e3e45f4b5ad went into 1.0, so this should too.. Feel free to rebase onto 1.0. Patch applies cleanly.. @sebsel Thanks a lot for your detailed explanation.\n\nI'm a bit confused by how the branches relate. First off: I can't rebase onto 1.0 cleanly. It gives me a lot of conflicts to resolve. It would be faster if I got a new branch from 1.0 and manually fix the thing. I can do that.\n\nThe idea is to forward merge 1.0 into 2.0 into master.\n\nBut next: on 2.0 there are, as you can see in this PR, 4 places where there is this order of error and reset, but on 1.0 there is just one. Fixing this for 1.0 won't fix those cases in 2.0, and the package I'm using in my project is using 2.0 (per it's composer.json).\n\nYou're absolutely right. I was confused because cherry-picking the commit onto 1.0 does not result in conflicts. I've submitted PR #1314 for 1.0.\n\nThe problem I try to solve is described in short in #1298 and more in dept in thephpleague/flysystem-sftp#66.\nI think there is no harm in first doing the $this->bitmap = 0 and then the user_error(). I'm not adding, only rearranging. But I do think it has to be like this for all the 4 places in 2.0 and the 1 remaining place in 1.0.\n\nI am fine with this. However ...\n\nIt's not really that the execution stops, but it throws, which means the next line won't run. If the throw is caught, $bitmap remains 15 (in my case) so isConnected() will stay true, meaning flysystem-sftp will not try to reconnect.\n\nI think, if the behaviour of user_error() is not reliable, we should not use it in the first place.. > I think, if the behaviour of user_error() is not reliable, we should not use it in the first place.\nGreat, master already uses exceptions.. You need to provide the SSH_AUTH_SOCK variable (either in the SERVER\narray or the ENV array), which contains the filesystem path to your\nssh agent socket.\n. $_SERVER['SSH_AUTH_SOCK'] = '/run/user/1000/keyring/ssh';\nshould do it\n@terrafrost Maybe agent should have a constructor taking a socket path.\n. The most likely scenario is that PHP is run via a webserver as www-data or something and user 1000 is a different user. That explains why the socket is not readable permission-wise but also why the environment variable is not defined.. @eimann It is my understanding that this will become available in 3.0.. @benjamin-rtblw Any update?. Why the Content-Length header?\nMissing something like Proxy-Authorization: Basic encoded-credentials ?\nVia https://en.wikipedia.org/wiki/HTTP_tunnel\nMaybe there is a library implementation that will construct you a\nproxied socket you can put into phpseclib's SFTP class. Then you do\nnot have to construct it youself.\n. You need to determine how the proxy expects credentials to be passed and\nthen you have to submit the username/password using a mechanism that is\nsupported by the proxy.\n. Install the GMP extension to speedup expensive crypto operations at SSH\nstartup.\n. > The extensions you mentioned are developed by our self, you wont find them online.\nThis is a rather important detail of your setup. Please mention it in the first place next time.\n\nI setup my own AWS server to test the library but i couldn't reproduce the issue, the files were all correctly transferred.\n\nDid your test environment contain these extensions? Did you try reproducing the problem with these extensions disabled? I do not know what these extensions do or how they work, but to me it seems more than likely the problem is caused by them. Would recommend excluding that this is actually the case.. Sounds indeed rather slow to me. My first guess would be slow DNS, but you\nare indicating you are using an IP. What is the network between the two\nhosts like?\n. > Is there anything I can do for that?\nI'd recommend you look into what terrafrost hinted at. That is, use another client (e.g. OpenSSH) to verify whether that is also \"slow\".\n\nMy expectation is that any SFTP / SSH2 client you try to use is going to be slow. Consider using rsync, if it is an option. Cheers\n. @ivink3aray I am afraid you will at least have to try to look into it [rsync] yourself.. I think the requirements for 2.0 should be 5.3. Can you point to short\narray syntax or submit a PR for that? For master the requirements may be\nhigher. Thanks.\n. Syntax error? No closing }?\n. Questionable. Not sure whether he wants to use it.\n. These ignores do not seem to be necessary because phpseclib has no composer dependencies.\n. ?\n. Not sure whether he wants to use \"Issues\" on Github. The forum seems to have been working fine so far. Just because this feature is not disabled does not mean you should promote it like that.\n. Actually, I think those \"support\" properties are not necessary as long as the \"homepage\" is up to date.\n. In my opinion LF should be forced for all text files across all OSes for consistency. I.e. if I zip the repository on Linux and zip the repository on Windows, the content of both zip files should basically be the same. This statement does not seem to ensure that.\n. Github seems to be wrong here. There is a newline for me.\n. See https://github.com/phpseclib/phpseclib/pull/5#discussion_r954298\n. Isn't there also a global gitignore that could be used instead of commiting \"the full list\" to every repository?\n. Should probably have a file header, especially for license.\n. Use protected instead of private? Also for methods below.\n. Have an empty line at the file.\n. Could also make this PHP4-compatible, but I don't know whether that's desired.\n. why reference? there are some articles out there about why php reference are bad\n. Please compare \"with reference\" to \"without reference\" instead of \"with reference\" to \"previous solution\".\n\nSee e.g. http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html\n. Missing space $e3=\n. Missing space\n. I would have thought the correct technique to prevent oversight or explain unclear code is ... a code comment and not a missing space. ;-) and :-P\n. I'd be willing to accept such changes if there were written guidelines on how comparisons are supposed to look. This does not seem to be the case, so changing comparisons for no real reason is a waste of time that is better spent on fixing actual problems or adding unit tests.\n. Not a PHP comment? Debug code. Please remove.\n. This looks like a huge hack. There has to be another way.\n. Code should be code and not strings, create_function/eval should not be used.\n. PHP_OS & \"\\xDF\\xDF\\xDF\" seems to be a rather bad example. Instead of evaluating that expression over and over again and using a hack to make it fast, almost everyone would just go ahead, evalute the expression once (PHP_OS is constant after all) and store it in a variable.\n. \"Special demands, special code\" is a much better answer than \"Hack: No\" ;-)\n. Have you guys researched why eval and create_function is considered bad practice and should not be used and afterwards analysed whether these reasons apply to the problems you are fixing here?\n. E.g. \"eval/create_function code does not get opcode cached\". Edit: I see this has been addressed in https://github.com/phpseclib/phpseclib/pull/94/files#r4032196\n. You seem to be (only) testing the encryption of a single file with a single key. How much data does get_lambda_functions() hold after the encryption? How much data does get_lambda_functions() hold when many small plaintexts are encrypted with many keys? Is this a possible memory leak?\n. This is merging the same array twice. Is this intended?\n. A grep for defined shows that this is not consistent with other code. It should be !defined.\n. @FrenkyNet I think you are misunderstanding. I am talking about the syntax of your patch. defined('CRYPT_RANDOM_IS_WINDOWS') === false should be !defined('CRYPT_RANDOM_IS_WINDOWS').\n. Are these still necessary?\n. This should be no longer necessary with autoloading.\n. I am talking about Crypt, File, Math etc.\n. Elseif?\n. There are two empty lines after <?php now. I think there should be no empty lines after <?php.\n. This applies to all the other files as well.\n. There is still one empty line now.\n. This line is still empty. I don't think this is required. In my opinion it should be removed too.\n. All right.\n. I actually think there should be an empty line. So this is fine with me.\n. Travis will check that, so I'd rather not have it in the readme.\n. The coding standard would probably be PEAR, but the code does not validate as that currently. I would rather fix existing code first and then add that we are following PEAR and otherwise not mention coding style at all.\n. On second thought it might be wise to just claim that we follow PEAR, which i think was terrafrost's initial idea.\n. Yes, something like that. We should probably link to a detailed explanation.\n. looks wrong\n. Should be @param integer $size?\n. The order is wrong here.\n. empty line after this\n. should extend PhpseclibTestCase\n. This class/file should be autoloadable. Filename should be tests/Net/SSH1Test.php.\n. This class/file should be autoloadable. Filename should be tests/Net/SSH1Test.php.\n. This should be a combined else if\n. no empty lines please\n. This combination is not possible according to the logic.\n. Possible combinations are:\nSSH-2.0-phpseclib_0.3\nSSH-2.0-phpseclib_0.3 (gmp)\nSSH-2.0-phpseclib_0.3 (bcmath)\nSSH-2.0-phpseclib_0.3 (mcrypt)\nSSH-2.0-phpseclib_0.3 (mcrypt, gmp)\nSSH-2.0-phpseclib_0.3 (mcrypt, bcmath)\n. Just make one test that checks only the current configuration?\n. PHP 5.4+ only syntax\n. Let's fix it anyway.\n. Only one empty line please.\n. ahem ...\n. This does not look right.\n. You dropped an h here. Should be $keyLength in the comment.\n. $max = $max->subtract($one);?\n. What is the E_NOTICE here? Are you aware this is a floating point division on 32bit?\n. Well, if this is critical, we could also use BigInteger.\n. Is there no nicer solution?\n. The call-time-by-reference will need removal in the php5 branch.\n. &$this in callback seems to work without complains, as you said.\nThe following does not work\nphp\nfunction f($v) { return $v++; }\n$a = 1;\n$b = f(&$a);\nvar_dump($a, $b);\nPHP Fatal error:  Call-time pass-by-reference has been removed; If you would like to pass argument by reference, modify the declaration of f().\n. Do we want to use &$this consistenly everywhere?\n. Neither of these two changes seem to address $_SESSION isn't always defined. There are still accesses to $_SESSION.\n. This should be a proper comment block. Please add *s.\n. Please also shorten so it fits the github width.\n. Can you explain how that is causing problems and how these changes address them?\n. Okay. So the problem is that $_OLD_SESSION may not be defined.\n. let's have this, then\n. another, one word\n. nowAllowedExtension? now?\n. no space\n. This should probably be passed via the constructor.\n. no static keyword on php4 :-/\n. Not sure whether it is such a good idea to reuse this method. Probably not.\n. the folder should be called phpseclib/ as per https://github.com/phpseclib/phpseclib/issues/243#issuecomment-33162133\n. this file will have to go\n. These constants are inherited from class Base so these assignments are not necessary.\n. Redundant constants.\n. This looks redundant too now. Not sure whether it should be removed, however.\n. Let's remove the phpseclib prefix here for consistency.\n. Redundant constructor.\n. Crypt\\Base::__construct() ?\n. Should be self::MODE_CBC?\n. Crypt\\Base::__construct()\n. Possibly redundant\n. Could possibly use 3DES by default, because that's safer (possibly still secure in comparison to DES).\n. Undoing change from the blessed branch here.\n. Ditto\n. Ditto\n. Doc block would be nice\n. Should take mode as a second parameter in order to allow forcing a mode similar to before?\n. undoing change\n. undoing change\n. undoing change\n. Doc block would be nice\n. undoing change\n. undoing change\n. Please use one use keyword per line\n. docs\n. take mode as parameter?\n. this seems to deprecate CRYPT_RSA_OPENSSL_CONFIG\n. should probably use the external constant CRYPT_RSA_OPENSSL_CONFIG if defined, otherwise fall back to this.\n. might want to change this to class names / namespacing\n. null is the default, you don't have to assign it\n. private\n. private\n. private\n. private\n. private\n. private\n. private\n. private\n. private\n. unnecessary change\n. private\n. private\n. private\n. and everywhere below ;-)\n. undoing change\n. what happened here? undoing change?\n. Let's leave them so nobody can complain about them being removed?\n. You probably have a discrepancy between the last git commit your branch is\non and the state of files you have. Usually caused by deleting all files\nand replacing them with another set of files.\n. tests should not be an external namespace. It should be moved to the tests boot strap file.\n. License header should be kept.\n. This should be kept.\n. Make sure to include a newline at the end of all files.\n. Use\n$loader = require __DIR__.'/../vendor/autoload.php';\n$loader->addPsr4('phpseclib\\\\Test\\\\', __DIR__);\ninstead of exporting the tests namespace via composer.json\n. Comment is misleading. This does not ensure that \"all\" dependencies are installed as expected. Just remove it.\n. Don't use realpath.\n. Could possibly use variable for the autoload.php path. Combine with comment below.\n. needs to be undone\n. needs to be undone\n. needs to be undone\n. needs to be undone\n. needs to be undone\n. The problem is that any project depending on phpseclib will also see the test namespace, which is not necessary.\n. Yeah. I am not exactly sure what you did to end up with this. This is usually caused by using git in an incorrect way.\n. Base is not used?\n. One use statement per line.\n. There should be an extra test namespace. phpseclib\\Test sounds like a good idea to me. Change of directory structure is not necessary, as we can just map phpseclib\\Test to tests/ as per my other comment in bootstrap.php.\n. need undoing\n. There should be an extra test namespace which should not be visible to the outside, but should be manually registered in tests/bootstrap.php. Having test classes in production classmaps is unnecessary waste of memory.\nComposer itself doesn't do this either.\nhttps://github.com/composer/composer/blob/master/composer.json#L40\nhttps://github.com/composer/composer/blob/master/tests/bootstrap.php#L16\n. I don't want to have a single namespace over two folders. It should be two namespaces.\n. This file should be the same as the one in master as far as possible. Please remove the whole file from the diff.\n. Should have the () for consistency\n. Crypt_Base already has a non-static property called mode which is defined at the top of the class and used for the mode of encryption. It also already has a non-static property called engine which signals whether mcrypt should be used or not. Both MUST stay non-static, otherwise this is a step in the wrong direction. This property definition can probably just go, see below.\n. This block is just a very confusing way to cache the question whether mcrypt or the internal implementation should be used for the given cipher. A new static property does not seem to be necessary in this case.\n. This whole block\n``` php\n$const_crypt_mode = 'CRYPT_' . $this->const_namespace . '_MODE';\n// Determining the availibility of mcrypt support for the cipher\nif (!defined($const_crypt_mode)) {\n    switch (true) {\n        case extension_loaded('mcrypt') && in_array($this->cipher_name_mcrypt, mcrypt_list_algorithms()):\n            define($const_crypt_mode, CRYPT_MODE_MCRYPT);\n            break;\n        default:\n            define($const_crypt_mode, CRYPT_MODE_INTERNAL);\n    }\n}\n// Determining which internal $engine should be used.\n// The fastes possible first.\nswitch (true) {\n    case empty($this->cipher_name_mcrypt): // The cipher module has no mcrypt-engine support at all so we force CRYPT_MODE_INTERNAL\n        $this->engine = CRYPT_MODE_INTERNAL;\n        break;\n    case constant($const_crypt_mode) == CRYPT_MODE_MCRYPT:\n        $this->engine = CRYPT_MODE_MCRYPT;\n        break;\n    default:\n        $this->engine = CRYPT_MODE_INTERNAL;\n}\n```\nboils down to\nphp\nif (!empty($this->cipher_name_mcrypt) && extension_loaded('mcrypt') &&\n    in_array($this->cipher_name_mcrypt, mcrypt_list_algorithms())) {\n    $this->engine = CRYPT_MODE_MCRYPT;\n} else {\n    $this->engine = CRYPT_MODE_INTERNAL;\n}\nor\nphp\nswitch (true) {\n    case !empty($this->cipher_name_mcrypt) && extension_loaded('mcrypt') && in_array($this->cipher_name_mcrypt, mcrypt_list_algorithms()):\n        $this->engine = CRYPT_MODE_MCRYPT;\n        break;\n    default:\n        $this->engine = CRYPT_MODE_INTERNAL;\n}\n. Regardless of whether mode is a static property or a non-static property, it represents the mode of encryption, which probably should not be changable from \"the outside\".\n. It should not be done as part of this pull request.\n. Only two slahes. A third slash constitutes the filesystem root.\n. Document the actual class name instead.\n. The type should be resource. http://www.php.net/manual/en/language.types.resource.php\n. Why is this required?\n. Same everywhere below\n. new line\n. Add \"currently unsupported\" notice or remove completely?\n. Confusing variable name. Should be $identity.\n. hmm, current() takes an array by reference\n. Added a check for this in #266\n. Oh sorry, with \"notice\" i meant \"comment\". One might just think that this is how you deal with ssh-dss, when in fact you are not dealing with it at all because it's unsupported.\n. So this class is kind of implementing an interface. Can this be documeted somehow? Maybe in the class description.\n. It is true that the property $key is an object, but in a world where basically everything is an object, only saying that something is an object is pointless. We should document the class name of the object or interface instead which is more concrete. I don't even see the type of $key by looking at the code right now. Is it Crypt_RSA?\n. Considering that there is only this one implementation, it should just be @var Crypt_RSA now. You can document types using the | seperator, e.g. int|float.\n. grep says this is only used in this file\n. could possibly use the list() language construct instead.\nlist($length) = unpack('N', fread($this->fsock, 4));\n. Could probably just check $this->fsock here and get rid of the is_connected property.\n. E_USER_NOTICE is the default and not specified in the below call.\n. @nifr Is this causing any actual issues in practice? System_SSH_Agent should conform to PEAR which can be autoloaded via PSR0. System_SSH_Agent_Identity is not supposed to be used externally and should be defined as soon as it is used by System_SSH_Agent. See #255 for proper namespacing and autoloading.\n. We are following PEAR, not PSR.\n. Empty if block. ?_? \n. Unrelated/unnecessary change.\n. This constant seems a bit (more) pointless now.\n. You could also interpret all sort of other things in a different way. Of course you have to read carefully and correctly, but this is a rather basic assumption. There should be proper comments and there should be no empty blocks. Having empty blocks is just ridicolous.\n. This should be / then.\n. Why the @ here?\n. What is the \"timeout of constructor\"?\n. Needs to be {$this->host} etc?\n. This is pointless and confusing as the contructor has no return value.\n. Why assign new bits to existing values?\n. Please disregard. No idea why Github says this is in Net_SSH1().\n. I am okay with having two timeouts, one for connection establishment and one for reading or so. What I do not like is the name \"constructor timeout\". This needs a better name. connectTimeout? socketTimeout?\n. The documentation for setTimeout() should also explain what that timeout applies to and especially that it does not apply to socket creation.\n. Okay. Maybe syntax highlighting in my editor is broken.\n. Okay, I see.\n. @see Net_SSH2::login() ?\n. @terrafrost \nNet_SFTP never calls Net_SSH2::login(), so the connection is never established.\nThis block should be at the top of _login_helper instead (not sure)? \n. This should be on the previous line.\n. Please use different assertions.\n. php\n$this->assertInternalType('string', $rsa->getPublicKey());\n$this->assertFalse($rsa->getPrivateKey());\n. This will create proper error messages in case the assertion is failing.\n. Consider adding protected methods for this.\nphp\nprotected function assertIsPublicKey($string)\n{\n    $rsa = new Crypt_RSA();\n    $this->assertTrue($rsa->loadKey($string));\n    $this->assertInternalType('string', $rsa->getPublicKey());\n    $this->assertFalse($rsa->getPrivateKey());\n}\nprotected function assertIsPrivateKey($string)\n{\n    $rsa = new Crypt_RSA();\n    $this->assertTrue($rsa->loadKey($string));\n    $this->assertInternalType('string', $rsa->getPublicKey());\n    $this->assertInternalType('string', $rsa->getPrivateKey());\n}\n. is_string(\"$rsa\") looks rather weird. You're testing toString? I guess this will be empty string in doubt and thus always true.\n. Use better names. This tests an SSH key, so SSH should be in the method name.\n. I didn't write these. :-P\n. Can you come up with a better name? The first commit says \"explicit application tags didn't work (although implicit ones did) \"\n. Okay, looks like this test class is supposed to cover all code in File_ASN1 (which is fine too).\n. Class name should be consistent with file name. File_ASN1_DevTest here?\n. Use $this->assertInternalType('array', $result); for better assertion messages.\n. Use $this->assertInternalType('array', $result); for better assertion messages.\n. If you want to link these test cases to the bug report, you can use group annotations like https://github.com/phpseclib/phpseclib/blob/master/tests/Net/SSH2FunctionalTest.php#L50 (maybe we should change these to include the word \"github\" because we also have tickets on e.g. sourceforge).\n. yes. doc block has two initial asterisks.\n. This is rather horrible architecture. It makes code maintenance unnecessarily hard because you have to be very careful not to build any endless loops (possibly similar to https://github.com/phpseclib/phpseclib/pull/317#issuecomment-40491613, which is at least unnecessarily hard to debug).\n. I'm probably missing the bigger picture. It looks like you want to check whether a given key is valid. Instead of creating yet another instance of Crypt_RSA where you call loadKey() to check whether the key is valid, you should extract whatever logic loadKey() has to decide whether it is a correct key into a new method and just call that instead.\n. Not sure whether int32 is consistent with the rest of the file. For example we use \"64-bit integers\" at https://github.com/terrafrost/phpseclib/blob/int64-fix/phpseclib/Math/BigInteger.php#L22\n. \"top\" should be \"most significant\" or \"least significant\"?\n. typo, should be \"usable\"\n. not a complete sentence? intended?\n. comma? \"when PHP uses int64, phpseclib uses int64 / base-31.\"\n. Wouldn't a string be fine too?\n. This looks incomplete by the way.\n. Can handle this in a new PR I guess\n. left over? remove?\n. Cache might be too generic here. What if we add another cache?\n. Might want to call this disableStatCache() instead. Speaking of that, have you considered caching the whole stat() reply?\n. Also add a method for flushing the cache? Or is there another means of manually doing that?\n. Yes, explaining this once probably won't hurt.\n. It's just the sentence that looks incomplete. \"Rather than always having to open a directory and close it immediately there after to see if a file is a directory or rather than always\"\n. From a software architecture point it usually makes sense to have caching logic in an attached cache object (with a reusable implementation) instead of having cache methods such as get,set,flush etc. in the object itself.\nSee e.g.\nhttps://github.com/owncloud/core/commit/a19a77d3eb94f64274a8ca17985499fb59256cbb https://github.com/owncloud/core/commit/8100f14b3eeebf3c0e72c4dc7941668e3220dcd7\nand somewhat\nhttps://github.com/owncloud/core/pull/7897#issuecomment-42011050\nThis is likely not going to happen for master, of course.\n. > That would make more sense if there was an expectation that people might want to change it, as might be the case for logging (the PR of which seems to have stalled meh) but in this case, I'm not sure why you would want to change it. For owncloud you say \"the cache can be easily replaced with an implementation that persists over requests, e.g. xCache\" but I'm not sure persisting a stat cache over multiple requests is a good idea. The statcache, in PHP, causes enough problems as is, without persistence. I understand why it's done but idk.. if there's a valid use case for why you'd want to change it I'd be more willing to consider it.\nThe specific reasons I gave in that PR do not all apply here. I do not think that having a persistent cache in this case would be a good idea. In the case of the linked PR there is a gain in consistency even though the cache is only volatile, and as a result the cache implementation basically gets unit tests for free.\nNevertheless, from an architecture view, it is better to have a collection of small, well-defined, reusable, unit-tested classes instead of having huge classes (as is generally the case throughout phpseclib). PHP4 does not have enough OOP features, for example lacks interfaces and does not come with autoloading, which in the end tends to lead people to put everything into a single class or file.\n. Did you see that?\n\nSpeaking of that, have you considered caching the whole stat() reply?\n. Depend on testStatOnDir here to keep the story linear? Following tests will be skipped when previous ones fail.\n. testChDirOnFile ?\n. Use assertNotSame(mixed $expected, mixed $actual[, string $message = '']).\n. $this->assertNotSame(array(), $sftp->stat('.'), 'Failed asserting that the cwd has a non-empty stat.'); (on multiple lines)\n. Code sniffer complains about this not being lower case \"null\" instead.\n. Is this related?\n. upper case after full stop?\n. There may be code paths that might be executed on one version, but not the other, so I actually do want all of these.\n. @GrahamCampbell This should work with the runs setting? https://scrutinizer-ci.com/docs/tools/external-code-coverage/\n. Please extract the inline statement.\n. Just FYI, this is likely not PHP4 compatible.\n. Add the Unit_ prefix and move to tests/Unit/File/X509/SPKACTest.php\n. Consider breaking these strings onto multiple lines (using concatenation).\n. Consider getting rid of inline assignment.\n. Oh, I think what I was thinking of was $class::method() that is PHP5.2+ or so\n. Keep the newline\n. testTouch?\n. testChDirOnFile?\n. testSortOrder?\n. The idea of this file was to have a linear story that is executed top-down due to SFTP's side effects and because that is just very easy to understand.\n. Errm yeah, I missed this in the diff. Sorry.\n. These tests seem to be three independent test cases. I would prefer if they were in different methods.\n. There is some duplication here. Basically the format of the two is the same, but only the wrapping is different.\n. If these are not used as min and max, please rename them to something more generic. E.g. arg1 and arg2.\n. The $step parameter has been introduced in PHP 5. Futhermore it defaults to 1, so you can just remove it.\n. Please use a new test case for this, e.g. testRandomOneArgument and testRandomTwoArguments\n. Might want to support the other way around as well.\n. I am not sure this change is a good idea. It is usually better to only have one way of doing things. $min->random($min, $max) or $max->random($min, $max) isn't very verbose.\n. > $max->random($min)\n\nyes\n. A last-resort fallback if no other ciphers are available for use.\n. ?\n. Why not just throw an error instead?\n. nice\n. add it as an example here?\n. This is actually interesting. Because that won't work due to $compare = $max->compare($min);. Found via https://scrutinizer-ci.com/g/phpseclib/phpseclib/inspections/8c1fbe77-91e4-4019-89a8-492de39f3003/issues/files/phpseclib/Math/BigInteger.php?status=new&orderField=path&order=asc\n. Hmm. These are all issues that stem from lack of proper decoupling.\n. I would consider this more like SSH where you have to have at least one of the supported ciphers. Otherwise the connection fails.\n. What I am trying to say is that $r->random(0, 2) won't work due to calling compare() on a non-object.\n. $r = new Math_BigInteger()\n$r->random(0, 2);\n$min = $arg1 = 0;\n$max = $arg2 = 2;\n$compare = $max->compare($min) = 2->compare(0) = error\n. I think it is absolutely okay to only accept Math_BigInteger objects, but your doc block says Integer which I assumed to be primitive type. This should probably be Math_BigInteger then.\n. Ahh, I really should have explained this better. Obviously it should be possible to pass Math_BigInteger too.\n. Remove the negation and switch the blocks.\n. Math_BigInteger\n. Wrong path? Crypt/AES.php? Same below.\n. As far as I know \".\" refers to the current working directory, it does not refer to the location of the file the include is in. I would suggest you make this consistent with SSH.\n. ok\n. As I said, you can remove this. It is already tested.\n. Please fix the spacing here. It looks better in #423 ;-)\n. We should probably decide once and for all whether we do like those lines or not.\n. Also call this unconditionally in all of these constructions? I.e. get rid of $this->bitmap & NET_SSH2_MASK_CONSTRUCTOR check because that's now done by _connect()?\n. Okay. Thanks for the explanation. I wasn't necessarily talking about removing the early return. In particular, it looks like you could replace \nif (!($this->bitmap & NET_SSH2_MASK_CONSTRUCTOR)) {\n    if (!$this->_connect()) {\n        return false;\n    }\n}\nif (!$this->_connect()) {\n    return false;\n}\nbecause of https://github.com/phpseclib/phpseclib/pull/427/files#diff-82a5983a6daace4acbcc65edf2dfb605R951\n. Just make this @var array|false then?\n. Okay. Thanks.\n. Wasn't the idea to use strlen($this->toBytes()) instead of strlen($this->toBits()) / 8 and then strlen($temp) instead of strlen($this->toBytes())? So you would have to remove the / 8.\n. No unnecessary references please.\n. This does not look correct and it is not very clear what the variables are. So instead of operation on the data array, I would suggest to overload testHash() and testHMAC() instead. There it is absolutely clear which variable is which.\n. Err, yes, you are correct.\n. The alternative would have been to just create a new result array. ;-)\n$result = array();\nforeach ($data as $row) {\n    $row[...] = substr(...);\n    $result[] = $row;\n}\nreturn $result\n. > Could you elaborate on your suggestion?\nYes. Instead of overwriting hashData() I probably would have replaced testHash() as follows:\n/**\n* @dataProvider hashData()\n*/\npublic function testHash($message, $longResult)\n{\n    $this->assertHashesTo($this->getInstance(), $message, substr($longResult, ...));\n}\nor even\n/**\n* @dataProvider hashData()\n*/\npublic function testHash($message, $longResult)\n{\n    parent::testHash($message, substr($longResult, ...));\n}\nbecause this does not involve any handling of meaningless array indexes and such.\n. I would prefer you just do the refactoring on top of that, i.e. as a new PR.\n. Don't want to use parent::testHMAC() here?\n. I am surprised too. There probably are no direct tests. Sha512 covers this\ntoo. Probably it just does not matter in those cases.\n. 5x and 3x are confusing. This should just be 5 and 3?\n. Please make the filename Mcrypt so it matches the classname.\n. Otherwise this class can not be autoloaded.\n. E.g. \"Rijndael supports five different key lengths, AES only supports three.\"\n. Need to check for mcrypt support and skip the test if necessary.\n. \"as a resource\"?\n. What is the idea behind using switch(true) over if / else again?\n. There is a doc block saying $data is a String. Should be string|resource instead or so?\n. Add a new variable $need_to_close_fp or so for this statement.\n. We are using Sami for generation the API docs.\n. Alternatively it has to return \"mixed\".\n. However, this approach is more error prone, since you can miss the break. It is also one level deeper.\n. > but I was under the impression that what was syntactically correct in one is syntactically correct in the other?\nI don't know for sure. As far as I know, the foo|far notation is commonly accepted and prefered over just \"mixed\" because it contains more information.\n. Please always use absolute paths using dirname(__FILE__).\n. Please ondo.\n. Method name needs to have the test prefix. Otherwise this is not executed.\n. undefined $asn1\n. Where do you think this would ideally go? phpseclib\\Random\\Random? Want to do that as a follow up PR?\n. Seems to be copied from Agent. Can probably just drop this and the \"PHP versions 4 and 5\" line.\n. Seems to be copied from Parser. Can probably drop the whole first block before LICENSE\n. Might actually make sense to have this in this PR, since you're adding a new class anyway.\n. Let's make this phpseclib\\Crypt\\Random so we do not have to rename the file.\n. This should probably contain the fully qualified name.\n. Need to drop SYSTEM_ then. Same below.\n. This is not part of this PR?\n. Please don't add those.\n. Make sure to configure your editor to remove all whitespace from End of Lines.\n. Why? Undo? \n. whitespace at end of line\n. same here\n. Also see #526\n. assertArrayNotHasKey\n. Ah hehehee, it was all upper case before. Anyway, this should be fine, since that is the class name. ;-)\n. what happened here?\n. This says private, below says protected. Drop the doc block?\n. This clearly is a syntax error and very likely what causes Code Sniffer to fail (which is only run in the PHP 5.5 environment on Travis CI) as per http://pear.php.net/bugs/bug.php?id=18815. Furthermore, the fact that the other environments are not failing implies that there is zero code coverage for blowfish which makes this change rather risky in terms of stability.\n. Let's not readd those\n. \"These constants are for internal use only\"?\n. This sentence is broken. I don't know what it is supposed to mean.\n. \"Can be overwritten by a sub class, but does not have to\"?\n. I suppose this is fine\n. I am not sure this can be done. The engine can be different between ciphers/algorithms.\n. > Right, but would you have two different ciphers/algorithms being used at the same time?\nYes\n. Let's just keep those 'CRYPT_' . $this->const_namespace . '_MODE' constants around. They are dynamically defined and not side-effects of class files.\n. I am not sure this is useful API.\nBy looking at System_SSH_Agent(true) and System_SSH_Agent() nobody knows the difference.\n. I think this should instead be a method allowForwarding() or something like that. And maybe also allow an option to disable it again?\n. Can you explain where the \"request\" in variable names like $request_forwarding comes from? Is this process defined as request forwarding in some technical documentation?\n. What is going on here?\n. Again, what is going on here? Is this a leftover from somewhere else?\n. I don't think they were ever removed. See https://github.com/phpseclib/phpseclib/blame/php5/phpseclib/Net/SSH2.php\n. And indeed they were not part of https://github.com/phpseclib/phpseclib/pull/532/files#diff-4. Similar SSH1 constants have been removed, though.\n. ?\n. ?\n. I do not understand the changes, I think they are pointless or incorrect. E.g. addressing \"Assignment in condition\" should be done by moving the assignment out of the if statement. Anyway, I also do not want to have to review those as part of this PR. Please undo everything that is not directly related to namespacing.\n. thanks a lot\n. Do we still need those two require statements? If yes, why? If no, please remove them as you did above.\n. Technically, these use statements are not required, as e.g. \"Base\" will be resolved to \"phpseclib\\Crypt\\Base\" due to the \"namespace phpseclib\\Crypt;\" declaration. I am fine with having them as long as this is consistent with your previous PRs. What do you think?\n. I think this is rather unintuitive. You're checking for \\phpseclib\\Crypt\\AES but then you're creating an instance of AES, which might as well be from another namespace. I think it might be better to just use the absolute class name. In general, I think a use statement is not necessary when the class is only ever used once such as in this case.\n. This is inconsistent with other checks where the leading slash is omitted.\n. Considering that a missing leading slash could be interpreted as a relative namespace by readers, I think there should always be a leading slash.\n. > There is no reason for the class_exists check in the first place, because it would always exist, unless the file was deleted.\nThis is precesily the use case. Let's keep that for now.\n\nThere needs to be a better mechanism to tell Random which crypto algorithm to use that doesn't require files to be deleted.\n\nPossibly. Different story, though.\n. There are other class_exist calls missing the leading slash, so we can alternatively handle this is a follow-up PR.\ngrep class_exists . -Ri | grep phpseclib\n./Math/BigInteger.php:        if (class_exists('phpseclib\\Crypt\\Random')) {\n. No, please add them. ;-)\n. Okay, I see. Good point. Let's add the slashes here, let's replace get_class() in a follow up PR. :-)\n. I think these will have to stay as get_class(). __CLASS__ will yield the Base class.\n. Possibly a valid point. I would suggest you create a ticket for that and limit this PR to turning get_class into instanceof, i.e. undo these changes.\n. ?\n. Is that necessary? Seems redundant.\n. same below\n. I agree, but it's not related to this PR. :-)\n. ?\n. ?\n. ?\n. ?\n. ?\n. ?\n. ?\n. ?\n. undo\n. calling a private/protected method from external scope\n. You will also have to test that stop() actually works.\n. Also test that forwarding is disabled by default.\n. Actually, this seems to forward the agent, which is a security issue.\n. > It only does this if you request it (i.e.) from startSSHForwarding\nI see. Overall, I think this is a rather ugly solution, but let's deal with https://github.com/phpseclib/phpseclib/pull/592#issuecomment-69684541 first.\n. I had it at 25 mins earlier, but then realised that tests run for 20 minutes (wall time) and they might be queued for a bit too.\n. should probably supply some context here. ssh?\n. Breaks BC?\n. Hummm, okay, declared private.\n. This doesn't sounds right. CRYPT_MODE_CTR etc. are part of API.\n. return false?\n. Repeating check and set here. A loop over an array holding the order might be better.\n. \"is always called before\"\n. Not sure how this change is related to \"add setPreferredEngine\". Seems to be unrelated cleanup.\n. Not sure how this change is related to \"add setPreferredEngine\". Seems to be unrelated cleanup.\n. Not sure how this change is related to \"add setPreferredEngine\". Seems to be unrelated cleanup.\n. Remove\n. Introduction of a non-constant constant. Use static variable or property.\n. unique\n. This might be (likely is) inconsistent with the definition of a cryptographical trapdoor function. Use a better name. _digest_whatever_you_are_digesting()?\n. I mean: \"uniqe\" should be \"unique\". Simple typo.\n. I'd say the for loop is rather ugly too. I'd recommend using the foreach loop and handling CRYPT_ENGINE_INTERNAL as a special case (ommiting the isValidEngine() check as it is always available).\nSomething like this:\nphp\n$candidateEngines = array(\n    $this->preferredEngine,\n    CRYPT_ENGINE_MCRYPT,\n);\nforeach ($candidateEngines as $engine) {\n    if ($this->isValidEngine($engine)) {\n        $this->engine = $this->preferredEngine;\n        break;\n    }\n}\nif (!$this->engine) {\n    $this->engine = CRYPT_ENGINE_INTERNAL;\n}\n. static properties do not exist in PHP4, but i think static variables are available.\n. I actually meant a static variable in the method.\n. generateGUID sounds like taking something from random. This sounds like deterministic digesting/hashing, though.\n\nIt creates loop-unrolled dynamic functions that are specific to the key / block size / number rounds, etc, being used.\n\ndigest_unrolled_function?\n. Then this should be _hashInlineCryptFunction or _digestInlineCryptFunction?\n. I guess I don't care too much. It should be fine.\n. Ok. Just add $this->engine = false at the top here? That should be sufficient.\n. Or maybe rather null.\n. Swap arguments. $expected comes first.\n. Please swap the parameters. $expected comes first.\n. NET_SFTP_CALLBACK ?\n. clone is PHP5 only? and an operator\n. We need to update https://github.com/phpseclib/phpseclib/blob/1.0/composer.json#L60 then.\n. Yes\n. Please consider just fixing the expected value (first parameter) here.\n. Not a fan of this at all as it hides data flows. Assign the result to an array instead?\n. ?\n. ?\n. ?\n. Unrelated, but shouldn't this be a method on one of the phpseclib classes?\n. I was more wondering whether this would not be useful to actual library\nusers.\n. This test does not seem to be a regression test for #706 as it does not fail when the changes above are undone.\n. This actually looks wrong too.\n. Might be a good idea to explain (in a comment) what this statement does, especially the & part.\n. Missed that line break previously.\n. Changed\n. @GrahamCampbell Can't return false since it's the constructor?\n. If these are incorrect calls, they should be fixed in the legacy 1.0 branch as well.\n. This was intentionally made consistent with $length-= 5 above I think.\n. Probably not a good idea. Clean merging from 1.0 is probably a more important goal.\n. I am pretty sure this change is irrelevant. I guess I have nothing against having it. I hate having to look at it in patches, though.\n. These changes will probably need looking at more closely. I hate those inline statements, btw. They can probably be easily removed too.\n. This should be fine, but should be in 1.0 too. How do we prevent people from using intval? Is there a sniff?\n. This should be fine, but also 1.0.\n. I think there is a special case where array_search vs in_array matters, but can't remember right now. Not sure it makes a difference in this case. Probably not.\n. 1.0 is PHP4 compatible. ;-)\n. Yes.\n. True. Is there a sniff for that?\n. One of our users reports at #768 that this may have actually broken functionality. It _sounds like, logically, this should have been $sLen = $this->sLen ? $this->sLen : $this->hLen; instead. Note that s and h was swapped.\n. @GrahamCampbell I am going to merge this now. I would appreciate if you could file a new PR with information explaining why it's wrong.\n. Why the { } ?\n. emulate? behvior?\nI don't think a reference such as \"the original haviour\" is useful.\n. associative array? this method returns a string\n. Linear search. Could setup an array_flipped version of $this->oids and use isset().\n. I am not sure this is useful API. Why not return null or false?\nThe current behaviour can be easily kept by calling\n$x509->getOID($name) ?: $name\n. Maybe have two methods, getOID and mapOID.\n. This block is not covered by tests. E.g. add a single test for whirlpool (no truncation) and one for tiger128,3-96 (truncated)?\n. RuntimeSignature :-P - same below\n. existing?\n. Explain why the returned string contains { } here.\n. I don't think the switch statements you proposed make sense. Either you work on IDs, or you work on names. If you work on IDs, you don't have to translate to names. If you work on names, you don't handle IDs anyway, so returning an ID is pointless.\nmapOID does what you implemented, getOID does what I described (return null/false if not found). Not sure this is consistent with existing methods though.\n. The catch statement needs to go on this line\n. Remove unnecessary ( and )\n. Why not \\UnexpectedValueException ?\n. The return value may have a description though, right? So one option would be to describe in the text that the return value is a reference.\n. Why mixed instead of array|false like you have below?\n. How about using &array as the return type for reference to array? Not sure I've seen that used before.\n. Yeah, I remember merging that.\n. This probably should be before the for loop.\n. This (or something similar) was previously claimed at #777 and apparently turned out to be wrong.\n. In particular, I'd argue that this call is not empty because it contains the $sbox variable. Not 100% sure. Maybe the manual/documentation should be a bit more clear.\n. Again: I might be wrong. :P\n. Please also add a test case for this. See https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.expectedException\n. Add sha1 and sha386 here to get to 100% code coverage.\n. If you're bored, please try to make individual test methods and describe what you're testing. E.g.\npublic function testConstructorDefault()\n{\n    $hash = new Hash();\n    $this->assertEquals($hash->getHash(), 'sha256');\n}\n. Side effect. Can't have that.\n. ugh\n. I'd be interested in knowing which one.\n. I think we may have a misunderstanding here. I was not trying to say you're wrong or anything similar. I was surprised to see this change actually made it into the repository. I agree it was likely caused by a merge. I'd be interested in knowing which merge. Specifically, whether I am to blame for this. :-P\n. This needs to be kept.\n. Why?\n. not static\n. Return an array or object instead.\n. This method should better receive it's dependencies as an argument instead of having them passed via properties.\npublic function testEncryptDecrypt($args)\n{\n     list($publickey, $privatekey) = $args;\nThe function above needs to return those arguments:\nreturn array($publickey, $privatekey);\n. this needs to go\n. 2015?\n. This test case only covers the first hunk above. The second hunk is covered by testResourceXfer already, but I am not sure it is sufficient. Can you explain/confirm or add another test?\n. @terrafrost Are you saying that #830 was not acceptable after all? If yes, why are you including the second hunk?\n. With \"the second hunk\" I mean the addition of $size-= $offset;, not the code that is already there in the else block.\n. I hated that anyway. Good it's gone. :-P\n. Crypt_Base:: ?\n. ()\n. same\n. same\n. Rijndael?\n. I think this should be @see Crypt_Base:setKeyLength() here and @see \\phpseclib\\Crypt\\Base::setKeyLength() in 2.0.\n. Or maybe @see parent::setKeyLength() or maybe remove it altogether.\n. Absolute non-issue for a dev component I'd say. Also, there is maybe a de\nfacto standard at best.\n. tests?\n. How about we also include information such as driver?\n. +1\n. Unrelated change\n. Unrelated change\n. @GrahamCampbell Exception implements Throwable?\n. Oh ok. Now I see. Add another empty catch block for Exception?\n. Typo\n. @GrahamCampbell Version issue seems to be resolved. https://github.com/hoaproject/Math\n. This should be below bootstrap.\n. This is never called? Tests?. What is the purpose of this class? This looks very fishy. Using Reflection outside of tests usually indicates that there is something wrong with the architecture. And it looks like this provides the ability to access properties and call methods that are declared non-accessible.. This of course a result of not properly designing an API and should not be fixed via hacking around using Reflection.. Does not match. Remove?. Hmm. I do not see pop() being called in this diff.. Okay. Thanks for the detailed explanation. I am fine with this if it is only a temporary solution. I agree that this is better than having unit tests fail permanently. An alternative would simply having properties and methods public, as you mentioned.\n\nSo what would you recommend in that scenario?\n\nIn the long run, I would try to keep things simple only using the tools provided by PHP. That is, if get_channel_packet needs to be called on an instance of SSH2, get_channel_packet needs to be defined public.\nThe fact that SCP and SSH Agent need to call get_channel_packet indicates that the architecture might be suboptimal. The same problem would probably also apply to SFTP, but that is worked around by having SFTP extend SSH2. More concretely, maybe there should be a SSHChannel class that can be used by SSH2, SCP, Agent, SFTP, etc. and provides access to the necessary channel mechanisms.. Copy of methods from Objects class. Probably not too important, though.. Let's introduce a new variable: expected_iv_length. This block seems to be (largely) duplicated a bunch of times below. . ",
    "terrafrost": "That looks pretty cool!  I'll try to pull / push it later tonight!\nThanks!!\n. What do the two of you think about my removing PHP_Compat, moving it to \"suggest\" as \"pear-php-compat\" or something with a description of \"Install PHP_Compat to get phpseclib working on PHP4\" and then upping \"require\" / \"php\" to 5.0.0?\n. @nadeemehsan9 - this issue was closed almost a year ago - could you open up a new one instead?\nIn the new issue if you could post the code you're using that'd be helpful as well. Thanks!\n. So I'm hoping to make a 0.3.0 release shortly (next few days or weeks as time and circumstances permit).  Just need to finish a few things up but that'll definitely be PHP 4 compatible so no exceptions and no class constants or anything like that.\nI might be willing to make the next release abandon PHP 4 compatibility but if I do that chances are I won't want to be adopting namespaces in that one.\nMaybe we can do PHP5 for the next version (if it was more than just a bug fix version) but I think going from being PHP 4 straight to 5.3 is just too much.  Maybe a staged approach can be taken.  PHP 5.0+ absolute requirement for one version and then PHP 5.3+ absolute requirement for the next version after that or something.\n. @bantu - yeah - we could do that.  We could merge whenever a release is about to be made or more frequently at our discretion.  I was thinking I wouldn't necessarily want to commit to 2-3 different branches but I guess I wouldn't necessarily have to either.\nFor versions of PHP lower than 5.3 (but still higher than 4.x) we could say \"just use the PHP 4 version\" or something.\n. I have pretty much zero opinion about .gitignore lol. I'll merge it but if bantu's willing I'd just assume let him decide stuff like that for me.\nI'm gonna make a few changes to the README.md though.\nThanks for the changes!\n. I don't pretend to know why PEAR's chosen to do it that way but...\nhttps://pear.php.net/bugs/bug.php?id=17517\nPEAR's pretty hostile to doing include's that way. Not really sure why but I'm inclined to defer to their decision..\nI do appreciate the patch though!!\n. It kinda is via Composer - a dependency manager for PHP.\nFor the time being I'm not wanting to do much more than that as it could quite potentially break BC with earlier versions of phpseclib among other things.  If you have another idea that doesn't break BC feel free to create a branch!\n. That's not the naming convention that PEAR uses.  PEAR does Math_BigInteger - not PEAR_Math_BigInteger.  PEAR2 does PEAR2\\Math\\BigInteger but phpseclib isn't using the PEAR2 standards.\nIf you're not using other PEAR extensions you could do File__, Net__, etc.  Or you could use PEAR and just dump it into the same directory structure phpseclib uses.\n. Nice catch!  I've committed a fix - thanks!:\nhttps://github.com/phpseclib/phpseclib/commit/1e3778dc4f05576f65881e126299ecc204a92263\n. That's a good point.  Although that said I'm curious...  are you adding Crypt_Random as a class yourself for the auto loading to work?\nI dunno...  crypt_random needs to be completely rewritten imho.  I was thinking about making it a function where you feed to it the length in bytes instead of the integer range but maybe it'd be better off as a class?  If so I'm not sure what the API would best look like...\n. I can do that but I'd like to have a better understanding of what's going on before doing so.\nSo let's take the auto loader you wrote in the last issue.  How do you use it?  It's an abstract class so it can't be used by itself.  Do you extend that class later?\nAs for class_exists being required...  I'd like to better understand that too.  It's my understanding that the way it works is PHP tries to instantiate an object and if it can't it tries to auto-load a file that in theory should contain the class defining that object using whatever methodology has been defined.  Functions don't have that same functionality hence crypt_random not working.\nWhat I don't understand is how class_exists makes a difference.  I mean, I understand how it works with RobLoach's Composer-specific changes - Composer just seems to pre-include everything and so the class_exists stuff prevent redundant require_once calls.  But in this case?  I have no idea and I'd like to at least understand why I'm making a particular change before I actually make it.\n. Interesting..  I had no idea class_exists() triggered __autoload calls lol.\nI'm gonna flip it around though - do !function_exists('...') && !class_exists('...') so that it'll only auto-load if !function_exists('...') returns !false.\n. I've committed a change for this - thanks for the help bantu and skydiablo!\n. > plz change the order, first check \"class_exits\" and than \"function_exists\" -> class will always not exists, so the \n\nautoloader will call, after the autoloader has load the file, the class dosn't exists anymore, so will check with \n\"function_exists\" and it will return \"true\" and all will fine, so change it to:\n\nIt seems like doing class_exists() first will always result in __autoload() being called even when it doesn't need to be?  If it's done before then short circuiting will prevent class_exists() from being called again.\nLike you include Crypt/RSA.php and then Net/SSH2.php Crypt/Random.php include's would be called twice.  On the first try !function_exists would return true and !class_exists would be called which would return false per the auto-loader and then the require_once wouldn't be called.\nOn the second try !function_exists would return false and short circuiting would mean class_exists wouldn't be called which means the auto loader wouldn't be called.  But because !function_exists already returned false the require_once wouldn't be called then either.\nUnless I'm missing something?\nI hope you don't think I'm being difficult - I'd just like to understand the change before I make it..\n. $random is set through extract. eg.\nextract(array('random'=> 'zzz'))\nThat'll produce $random as a variable.\nAs for making the class abstract and the function static...  that'd break PHP4 comptability. Maybe it's something I'll be willing to break in a branch at some later date but for the time being I'm not.\n. W.r.t. PHP6...  I just don't see how phpseclib is ever going to work on it.\nThey're making strings UTF-8 by default.  Problem is, strlen() then doesn't work for phpseclib.  What might, with a single byte encoding scheme, be 600 bytes could, with UTF-8, be 580 bytes.  So when the header of an SSH2 packet says the packet length is 600 bytes and we do a while loop until all those bytes have been gotten...  it's gonna stall out.  It'll never reach 600 because strlen() will keep saying 580.  You can read more about that here:\nhttp://www.frostjedi.com/phpbb/viewtopic.php?p=126751#p126751\nAs for doing function_exists() after class_exists()...  I just don't see why it's necessary.  Why does there need to be a call after class_exists()?  Why isn't the call before function_exists() sufficient?\n. What about PHP 6 and it's use of UTF-8 with strings?  What I've read suggests that you can do \"$str = (binary) $str\" but that's gonna break PHP 5 compatibility.  I don't want to do \"for PHP 4, download this, for PHP 5, download this, and for PHP 6, download this\".\nAnd as for doing branches...  I think care will need to be taken to minimize conflicts.  I don't want to spend two days resolving conflicts every time I'm ready to do a release.  Not like I go around modifying include's very often but still...  I think it's something that should be considered!\n. skydiablo - I get it now.  I was just being thick :s.  Thanks for your patience :)\n. $ssh->exec() on my server doesn't do that. And what if you're trying to cat the output of a file that legitimately has that as its output?\n. A Google search suggests that that error may be output on stderr and not stdin. If that's the case I can make a function to suppress stderr. eg. $ssh->enableQuietMode().\nIf you could get me a log file so I can confirm that that will work that'd be great!\n. The latest commit adds this function.  Thanks for the idea!\n. I don't know if I want to do that because I want to know if the streams timing out.\nQuoting the PHP manual,\n\nOn success stream_select() returns the number of stream resources contained in the modified arrays, which may be zero if the timeout expires before anything interesting happens. On error FALSE is returned and a warning raised (this can happen if the system call is interrupted by an incoming signal).\n\nIf you were willing to email me the address you're trying to connect to that'd be helpful.  I wouldn't need any login info.  Alternatively, one thing I'm wondering...  what does echo ($timeout - $elapsed) give you?\n. What happens if you do this?\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\nif (!@stream_select($read, $write, $except, $timeout - $elapsed)) {\n\n-----[ REPLACE WITH ]----------------------------------\n\nif (!stream_select($read, $write, $except, 10)) {\n```\nThe goal of that change is (1) to see if any errors are being output and (2) to see if your PHP environment would like it better if an integer was passed to stream_select instead of a floating point number.\nAlso, based on what you're experiencing, I'm going to guess the setTimeout() function doesn't work for you?  If you could confirm that'd be great.  Thanks!\n. I'm still totally unable to duplicate this issue.  Could either one of ya'll send me an email with the address / port of the server you're trying to connect to that's having this issue?\nI'm unsure if it's an issue on the server end or the client end but having the server address would help me make that determination.  I wouldn't need any login info either - just the address / port and that's it.\nYa'll can email that info to terrafrost@php.net.\nThanks!\n. ```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\nif (!@stream_select($read, $write, $except, $timeout - $elapsed)) {\n\n-----[ REPLACE WITH ]----------------------------------\n\nif (!@stream_select($read, $write, $except, $timeout - $elapsed) && !count($read)) {\n```\nDoes that do anything?\n. You're not getting a Banner timeout notice anymore.  That's progress..\nCould you post a copy of your log file?  ie. do define('NET_SSH2_LOGGING', NET_SSH2_LOGGING_COMPLEX) and $ssh->getLog().\nThanks!\n. The latest git version fixes the E_NOTICEs.\nAlso, you need to do echo $ssh->getLog().  Thanks!\n. Do define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX) instead.  Sorry about that lol.\n. That actually makes sense.  stream_select() is done in two places.  It's working in one of the places now but not the other.  To fix the other do this:\n``````\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\nif (!@stream_select($read, $write, $except, $this->curTimeout)) {\n\n-----[ REPLACE WITH ]----------------------------------\n\nif (!@stream_select($read, $write, $except, $this->curTimeout) && !count($read)) {````\n``````\n. Yes.  Not today though.  Trying to catch up on some work work meh.\n. Looking over the code, I'm very impressed!!  Yours is the first substantive addition anyone has ever even attempted to make to SSH2.php!\nI'm gonna post a few quick thoughts / comments in-line in the commit.\nThanks!!\n. I'll checkout your branch locally and will work on integrating loginAgent with login as I described.  Don't know how much availability I'll have this weekend, though, but I'll keep you updated!\n. Sorry for the delay.\nAnyway I pulled in your branch into my own repo and eliminated the need for the separate loginAgent function.  Just pass the Agent object as the second parameter of the login() function as I described in an earlier post that I'm now unable to find.\nI also removed the $agent parameter from the _privatekey_login() functin and replaced it with a constant.  The problem I have with the $agent variable as a parameter is that it looks too much like a God function.  What happens, for example, if another authentication method is added for which modifying _privatekey_login() would be appropriate?  Do optional parameters just keep getting added?\nThe commit can be seen here:\nhttps://github.com/terrafrost/phpseclib/commit/4bcbfe4f25b810ce624e84b58f9cb37d5d1cf361\nI submitted a pull request to you as well.\nIn reviewing your code I have some more thoughts but I'll try to post those tomorrow - thanks!\n. In lieu of having seen your proposed factory class all I can say is that, for the most part, I've been trying to avoid the creation of gratuitous files with phpseclib.\nFor purposes of re usability it makes sense that Crypt_AES be in it's own file, separate from Net_SSH2, and for purposes of minimalism, I think keeping Net_SFTP separate from Net_SSH2 is good (that's 68kb that doesn't need to be included if you're not using SFTP), but in this case, it'd be more of a helper file, which I've tried to stay away from.\nAs for unit tests for Net_SSH2...  I think one problem with that would be that it'd be a little hard without some sort of SSH2 server that could always be assumed to be online.  And even then it seems like unit tests ought to work without an internet connection.\nIf Net_SSH2 were rewritten to an extent than the unit tests could sorta emulate an SSH2 server offline.  Here's some work someone else did to that end (these changes were made prior to phpseclib's move to git so it's not a fork of phpseclib):\nhttps://github.com/timmartin/phpseclib/blob/master/Net/SocketHandler.php\nhttps://github.com/timmartin/phpseclib/blob/master/Net/SSH2.php#L597\nJust replace their socket handler with one where the server responses are sorta hard-coded into the code.\nI actually wouldn't mind seeing something like that in the main phpseclib code base but (1) I'd much prefer it if it were included in the SSH2.php file instead of as it's own separate file (although that might muck up auto-loading) and (2) maybe someone else could do it?\n. https://github.com/kea/phpseclib/blob/master/phpseclib/Net/SSH2/Agent.php#L53\nphpseclib is coded using the PEAR coding standards, which require, among other things, phpDoc comments before every function and every class.\nPer those standards indentations should be four spaces.  Like on line 55 you're indenting by two spaces and not four.\nhttps://github.com/kea/phpseclib/blob/master/phpseclib/Net/SSH2/Agent.php#L85\nI'd do that as a user_error().\nI'm also kinda thinking...  what if the SSH Agent were moved from Net/SSH2/Agent.php to, I dunno, File/Agent.php, or some such?  In reading the protocol it looks like only PKCS#1 signing is supported but PKCS#1 signing can be used for more applications than just SSH2.  You can use it for X.509 certs for example.  Whether or not I (or someone else) would update File_X509 to support the ssh-agent is one thing but that doesn't mean people couldn't do it.\n. Oh - that's cool.  Any particular reason you haven't done a pull request on them?\nAlso, do you know of any good way to remove the white spaces changes in this commit?:\nhttps://github.com/kea/phpseclib/commit/2e7c06230be02fc95a71ecbf5719bc9924eeab77#L0R63\nMaybe I'm just being nitpicky but ugh I hate gratuitous white space changes.  What I like are clean diffs lol.  I guess that particular commit is a lost cause but still...  doing \"git diff origin/master\" returns a lot of lines I don't care about.\n. For the time being, sure. It's something I've been meaning to revisit but idk...  busy with other things and all that jazz..\nI don't think I need a pull request to merge either? idk - I've not tried to do that before lol.\n. Fixed in git.  Thanks for reporting the issue!\n. Fixed - thanks!\n. I think I'd rather do something like this:\nphp\n        if ($this->version != 3 && $this->version != 2) {\n            return false;\n        }\nThat way it's as transparent to the user as possible. ie. they don't need to know about the SFTP version for it to work.\nThat said, I didn't even know there was a v2 of SFTP lol.  The earliest version of the SFTP drafts - http://tools.ietf.org/html/draft-ietf-secsh-filexfer-00 - is for v3.  draft-ietf-secsh-filexfer-02 does mention it though in section 10.1. \nhttp://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#section-10.1\nThe biggest concern I have about that is this:\no  The SSH_FXP_STATUS message was changed to include fields `error\n      message' and `language tag'.\nGiven that my guess would be that for SFTPv2 there could be notices that PHP would pop out.  If you'd be willing to give me access to the server so I could test phpseclib out on it that'd be great.  Alternatively, if you could just tell me what software the SSH server is running that'd be good too.\nThanks!\n. The latest version of WinSSHD is 4.28 which does SFTP v3 - not v2.  I sent bitvise an email asking them if they could hook me up with v4.02 so I can test it out.  We'll see what we see I guess!\n. They actually provided me with the binary for an older version that does SFTPv2 early this morning so I'll try to work on that tonight or something as time permits.\nThanks!\n. The latest Git version fixes this!\n. That looks really impressive - nice job!!\nDue to the size of the changes it'll take me a while to churn through it all but I'll let you know!\nThanks!!\n. I've kinda written that off as just a cost of doing business.  The decodeBER result doesn't save type information and I don't think it ought to.  Like as is $cert['tbsCertificate']['version'] returns 'v3'.  What would it return instead?  array('type' => 'whatever', 'value' => 'v3')?\nI don't know - cosmetically I just like the \"type\" agnostic syntax phpseclib currently has.  It's minimalistic.\nAs for re-encoding an X.509 cert without re-signing it...  I guess I'm kinda under the opinion that if you want it to have a valid signature (which would mean an unaltered X.509 cert) you shouldn't be re-encoding it gratuitously.  Re-encoding, even though it'll probably yield an invalid signature, still does have its uses however.  In fact that's how I found the earlier issue.  Just used this script:\nhttp://www.frostjedi.com/phpbb/viewtopic.php?p=140360#p140360\nIgnore the signature and see if openssl_x509_parse() gives me the same result for the orig certificate that it does for the re-encoded cert.\n\nLess important, but disturbing anyway, is the type alteration of non-UTF8 compatible strings (In french, we use accents :-(\n\nI'm not really sure how to deal with that.  Can't say I'm an expert in character set encoding.  Any ideas?\n. I'll take a look this evening when I get home from work - thanks!\nAs for the ANY solution...  that could work. A few other thoughts...\n1. We could add another third parameter to encodeDER - $casting.\n2. The class using File_ASN1 could take care of some of that itself.  Like if parameters for AlgorithmIdentifier were needed a switch statement on the algorithm could be done with further parsing from there.  eg. new File_ASN1_Element($asn1->encodeDER($parameters, $ECDSAParams)).\n. For the $casting var, I was thinking it could be an array with pretty much the exact same format as the cert itself. ie. $cert['tbsCertificate']['version'] = 'v3' but $casting['tbsCertificate']['version'] = FILE_ASN1_TYPE_INTEGER or something.  If it's not present it does the default.\nSomething else we could do...  idk...  maybe update getDN such that the first parameter isn't a boolean but a constant. eg. if you do $issuer->getDN(FILE_X509_PRESERVE_TYPE) then return File_ASN1_Element() or something.  Let me think on that a bit (I need to get to work).\nAs for PKCS#7...  I'd love to have that supported in phpseclib!  I think that's closely related to but not quite the same as the Cryptographic Message Syntax?  If it's the same I was thinking that could be a new file named File_CMS.  If it's different we could do File_PKCS7.\nAlso, do you want commit access to the phpseclib repo?  I've been really impressed by your contributions and think you'd be a good core contributor!\n. Sent you an email!\n. The logs are for the servers that are hanging?  If so how out of curiosity did you get them?\nAnyway the first thing I'm wondering is...  are you using the latest Git version?  I'm thinking the following commit might fix things up for you:\nhttps://github.com/phpseclib/phpseclib/commit/5d91746f737ea09a869e10dc646e7a1176a2dcd5#phpseclib/Net/SSH2.php\n. > It's been working great up until couple of days ago, but for some reason started to hang on 4 machines.\nI guess what I'm mainly curious about is...  how are you stopping it from hanging?  Is it timing out after 30 seconds?  If so I'm not sure I'd call it hanging lol.  Otherwise you have to be aborting the script somehow.  Ctrl + Break?  Normally that wouldn't give you logs like that, even if you did register_shutdown_function().\n. The script you ran by hand...  could you rerun that and do this on it?:\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_REALTIME);\nIf you could post the result that'd be great.  Thanks!\n. Find all instances of this:\n$this->curTimeout = 0;\nReplace with this:\n$this->curTimeout = 1;\n. Can you do this?:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\nfunction _close_channel($client_channel)\n{\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    exit('THIS FAR');\n\n```\nAssuming it's getting that far I'll give you some more changes to make to help me further diagnose the problem.\nThanks!\n. It'd still be nice if phpseclib wasn't hanging lol.  Want to still work with me on trying to figure out why it is? :grin: \nIf you don't want to too that's okay too!\n. Let me know if the latest Git version works for you.\nThanks!\n. Just FYI...  I am planning to do a release at some point soon.  Since your changes are adding a new feature I won't include them until after that release.\nThanks!\n. There were some issues I had with it that I figured I'd resolve but atm I can't recall them. I might have a copy of the issues on my other computer.\nAnyway I don't have a problem with the idea behind the merge. Another similar request was to make phpseclib use ssh_config files.\nThese types of requests are system specific enhancements and so long as they don't interfere with other anything else.\nBut at the same time, too, tbh, this is so far on my priority list that, atm, it's pretty much non-existent atm.\n. I like money lol. I guess you can email terrafrost@php.net for a discussion of that.\nThat said, I'm curious...  what would you rather see more? ssh_config support or ssh-agent? Either could be used with the ssh root@xxx.host.whatever command although it is possible the ssh_config approach wouldn't have the appropriate permissions to read the private key.\n. Not sure off hand lol. PHP on webservers often runs as nobody? There's not usually a /home/nobody directory but maybe there could be?\nWith phpsuexec PHP wouldn't run as nobody but as the username you use to login with so that'd work just fine.\nIf it's CLI it'd be like with phpsuexec.\nAnyway let me play around with it this weekend! I have a presentation I'm giving on phpseclib this evening so I've been focusing on that in my free time for the past week or so.\n. This weekend proved busier than I anticipated :( I'll try to look at this sometime this week as time permits.\n. So one thing I'm wondering...  what should the API for the ssh_config reading look like? Here's one idea:\n``` php\n$login = new System_SSH_Config('alias', '/home/user/.ssh/config');\n$ssh = new Net_SSH2($login);\n$ssh->login('pw');\n```\n. New idea:\nphp\nSystem_SSH_Config::load('/home/user/.ssh/config');\n$ssh = new Net_SSH2('alias');\n$ssh->login('pw');\nHere's how it'd look for ssh-agent:\nphp\n$agent = new System_SSH_Agent();\n$ssh = new Net_SSH2('...');\n$ssh->login('username', $agent);\nssh-agent is a little easier because, with ssh-agent, you open up a socket connection to SSH_AUTH_SOCK, which is set by an environment variable and which PHP gets with $_ENV or maybe $_SERVER depending on the server. With ssh_config there are multiple locations. I figure with that one the parameter for load() should be optional. It'll try '/home/' . get_curent_user() . '/.ssh/config' if it's not defined. Net_SSH2 will then do a class_exists('System_SSH_Config') && System_SSH_Config::isLoaded() check and if so get the actual hostname / port from that.\nWith this idea System_SSH_Config would be PHP5 only whereas System_SSH_Agent could work on PHP4 but...  the alternative results in a less elegant API imho.\nSystem_SSH_Config also probably should depend on System_SSH_Agent since you can do ForwardAgent yes with the former.\n. To be honest, I'd probably rewrite this myself, consulting this class if necessary.\nAmong other advantages of doing that is that I'd better understand it. Which is prudent since I'm likely going to be the one supporting it.\nAlso, like I said, I wasn't completely satisfied with the CS employed. Overall, the way of doing this isn't really consistent with the way phpseclib does things. I could elaborate and maybe people would agree with some points and disagree with others but, none-the-less, I'd rather just rewrite it.\n\nThe constructor of Net_SSH2 probably should not establish a connection.\n\nPersonally, I like it better this way. I think it makes for an easier to remember API as opposed to ->__construct(), ->connect(), ->login(). It just seems like an extra layer of indirection that 99% of the time is unnecessary. Sure, in the case of ssh-config it makes since but I consider that to be pretty niche use case and overall I'd say a simpler API and an API that requires less steps is, overall, better than one with more steps for that 1% of people.\nphp\n$ssh = new Net_SSH2('alias');\n$ssh->setConfig(new System_SSH_Config('/home/user/.ssh/config'));\n$ssh->login('username', new System_SSH_Agent()); // Only connect once necessary\nHonestly, I'm not a big fan of that one either. I mean, I don't necessarily mind moving the fsockopen stuff to the ->login() function and just having the constructor set class variables that ->login utilizes in an fsockopen call that it does but I don't like the idea of adding a ->setConfig function to Net_SSH2. I mean if we're going to add new public methods why not just make Net_SSH2, itself, decode the .ssh/config file if it's available and forgoe the whole System_SSH_Config all together? But I don't like that approach either because I don't think Net_SSH2 should have system-specific enhancements programmed within it. I mean, I suppose Math_BigInteger kinda does with it's use of the bcmath and gmp extensions but it doesn't try to do something like do an exec() call to bc (or some other CLI bigint linux app) to speed things up either and that's what I view this as akin too. I think it needs to live in its own file and I don't think new public methods should be added specifically for this either idk.\nLet me sleep on that one some and maybe I'll change my mind. I'm not completely opposed to it but idk...  I'd just prefer it if we did something else.\nAnother problem with this method is that .ssh/config can supply the username. ie. you can have a .ssh/config that'll make it so the only thing you're prompted for is the password. It seems to me that the username ought to be read similarily. That was why my .ssh/config example had $ssh->login('pw').\nWhat about something like this?:\nphp\n$ssh = new Net_SSH2('alias'); // this just sets a few private class variables but doesn't do fsockopen\n$config = new System_SSH_Config('/home/user/.ssh/config');\n$config->setup($ssh);\n$ssh->login('password');\nSo System_SSH_Config would go into Net_SSH2 and modify $this->hostname and $this->port and pre-set $this->username or something.\n. Check out this pull request for my rewritten version:\nhttps://github.com/phpseclib/phpseclib/pull/265\n. There has been some discussion of moving phpseclib over to PHP5+ before.  eg.\nhttps://gist.github.com/fcbb03585f68ac9812fc\nhttps://github.com/phpseclib/phpseclib/issues/7\nMy new thought of the day on the subject: people who want phpseclib to be PHP 5 / 5.3+ only ought to also fork the documentation and redo that as well.  Like if you don't think \"ultra-compatible\" is a big selling point what do you think the big selling points are?  Make a frontpage that can sell a non-ultra-compatible phpseclib.  And redo the whole documentation to match the updated frontpage's layout.  And selling it to me isn't going to be easy fyi.\nI mean, consider the use case of some dev shop stuck on PHP4.  They'd like to bring their 10 year old code base up to PHP 5 but they have so many other projects that keep being thrown on their plate that they never get a chance.  That, in my mind, is a big target audience of phpseclib.  Certainly the PHP5+ features of DOMDocument and SimpleXML are wonderful as is the improved speed of PHP5 but some people are stuck in the stone age and not by choice.\nAlso, personally, I think the fact that phpseclib is as ultra compatible as it is really highlights why PHP 5.4 is so great.  Consider this page:\nhttp://phpseclib.sourceforge.net/math/intro.html\nI think the heat map is awesome.  It shows how much the PHP engine has improved with each major release.  If I make phpseclib only work on PHP 5.3 then what?  I guess I have to remove the PHP 4.4 - 5.2 benchmarks and then one could look at it and think \"oh - PHP has always been fast - that's nice\".\nThat said, one thought I had a while ago for making use of PHP5+ features...  doing file_get_contents on the file, rewriting it using str_replace() or some such and then either evaluating it or including it through a stream wrapper or something.  A slightly more elaborated discussion can be found here:\nhttp://www.frostjedi.com/phpbb/viewtopic.php?p=194116#p194116\n. I agree that phpseclib is kinda moving into the stone age with its ultra-compatible approach lol.  And for File_X509 the ability to throw exceptions would let us get away from things like what validateSignature() does.  ie. validateSignature() returns 1 if the signature is valid, 0 if it isn't, and -1 on error (ie. public key format not supported).  It'd be better, I think, if it threw an exception in the last case.\nI don't have a problem with a PHP5+ branch but I just don't want to maintain two different branches.\nI suppose the branches could be merged at release time, but there could still be conflicts, which is a PITA, and half the time, I tell people to use the latest Git version when there are known issues with the latest release version.  If I'm doing that then you can't merge at release time but with every commit.\nIf someone wanted to take on the responsibility of maintaining phpseclib's PHP5/5.3+ only version that'd be great.  bantu had done some early work on making phpseclib PHP5+ only but I don't know if he'd be willing to do that on a more frequent basis..\n. > initial work on porting \"var\" to proper \"public\", \"private\", \"protected\"\nPersonally, I don't like that.  This essay sums up a lot of my positions:\nhttp://aperiplus.sourceforge.net/visibility.php\nFor example, I have on my local filesystem a Net/SCP.php file that uses SSH1.php / SSH2.php.  It uses variables / functions that PHP DocBlock comments indicate are private and I'd be surprised if you could guess which variables / functions it uses.  It also doesn't extend either class so doing protected wouldn't work.\nAlso, for debugging purposes, sometimes I'll ask people to run code that'll dump out what are annotated in the DocBlock as private variables.  This complicates that too.\n. I was thinking maybe a sep repo vs a branch to avoid issues with composer.  Also, having thought about it some, I'm not sure I want to give people working on 5/5.3 support access to the main repo.  Namespacing phpseclib isn't as hard as, for example, adding support for CRLs to File_X509, and I'd just assume people not be able to accidently commit stuff to the main branch and thus interfere  with the development of more core features.\nDropping PHP 4 support is not currently in my roadmap but I figure there's enough public interest in a PHP 5/5.3 version and that that's something that's achievable enough by PHP developers to justify work on this front.\n. I guess you could deal with the merges.\nThat said, another thing that appeals to me about the idea of a sep repo is that that'd give people phpseclib \"badges\" on github.  I dunno...  it'd be a way reward contributions in my mind.\nA sep repo does have the disadvantage, though, that it won't show you how many commits behind you are.  Or ahead..\n. https://github.com/phpseclib/phpseclib/commit/3caaa91160d7e59569362928241f685d967d3722\nAs of this commit the main phpseclib branch supports throwing exceptions (if the option is so enabled).  See the commit message for details.\nSince this'll probably cause a lot of conflicts with PHP5-only branches my recommendation would be to copy all the files into a directory outside of git, do a git pull and then copy the old files back over.  And then recommit.\n. I undid it:\nhttps://github.com/phpseclib/phpseclib/commit/e71fc979133c16110d827bbf5316db97648bc463\n. The master branch does throw exceptions but that one is not BC with the 1.0 or 2.0 branches and the API is currently unstable (ie. it's subject to BC breaking changes).\n. I'll try to take a look when I get home today - thanks!\n. These should work now.  I departed from your changes a bit.\nAlso, one thing to note about your changes...  phpseclib is coded in the PEAR coding standards and I'd prefer all new code utilize those same standards.  As such...\nphp\n        if(!$this->paddable)\n            return $text;\nShould read more like this:\nphp\n        if(!$this->paddable) {\n            return $text;\n        }\nYou shouldn't find an if statement in the codebase that doesn't have {}'s, even if it is just a one line thing.\nThanks for understanding and thanks for the bug reports / unit tests / all that!!\n. Nice find! This has been fixed in the latest commit. Thanks!\n. I'm unable to reproduce your issue.  As such if you could provide me with the logs that'd be very helpful.  You can get them by doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after SSH2.php has been included and then doing $ssh->getLog() after the error is encountered..\nThanks!\n. So what I think is going on is...  _keyboard_interactive_process() calls itself until it doesn't get a NET_SSH2_MSG_USERAUTH_INFO_REQUEST. To quote from the code:\nphp\n                /*\n                  After receiving the response, the server MUST send either an\n                  SSH_MSG_USERAUTH_SUCCESS, SSH_MSG_USERAUTH_FAILURE, or another\n                  SSH_MSG_USERAUTH_INFO_REQUEST message.\n                */\n                // maybe phpseclib should force close the connection after x request / responses? unless something like that is done\n                // there could be an infinite loop of request / responses.\n                return $this->_keyboard_interactive_process();\nSo the first time it's called just fine. It calls itself a second time because the first request yielded a NET_SSH2_MSG_USERAUTH_INFO_REQUEST and then it dies. The server just doesn't send a response after that.\nOne thing I'm curious about...  what's the server identification string? You can get that by doing this: echo $ssh->getServerIdentification();\nAlso, can you connect with PuTTY?\n. Can you get me a copy of the PuTTY logs?  You can get them by going to PuTTY->Session->Logging and checking the \"SSH packets\" radio button. If you don't want to post them here (or at least a link to them) you can email them to terrafrost@php.net. Thanks!\nAlso, just to confirm...  given my previous hypothesis as to what the problem is the script you're using should be taking a while to timeout. Does it?\n. I've been thinking about adding DSA and ECDSA support to phpseclib. For ECDH... access to an SSH server that uses  ECDH would help. I've not specifically been looking for such servers but I'll keep an eye out.  Making an OpenSSH installation support it might be easy enough too - not sure atm lol.\nLike one feature of OpenSSH that I don't know how to setup... keyboard-interactive authentication. I've done all my testing with keyboard-interactive auth on servers that I have access to that already support it. I've no idea how to make one that doesn't support it support it.\n. Will do! Does that mean, out of curiosity, that you'd work on your own implementation if I didn't start mine soon?\n. > Was wondering if ECC support in phpseclib is still being worked on, or if everyone is just using danter-php-ecc.\nI can't comment as to what people are using but I can say that I'm not working on ECC support myself. It'd be nice to have it but there are lots of other things on my priority list w.r.t. phpseclib atm. Enough to probably keep me plenty busy for a few years tbh.\n\nI'd like to recommend https://github.com/jedisct1/libsodium-php and/or https://github.com/devi/Salt as libsodium (depending on whether we want to require PECL access).\n\nI'm not a big fan of adding support for PECL extensions. Extensions like gmp, bcmath, mcrypt and openssl are pretty common. Extensions in PECL...  not so much.\n. Nice find! There was a similar issue to that in Math_BigInteger that was fixed:\nhttps://github.com/phpseclib/phpseclib/commit/4eaf6db3ab40093ce8e97b37ba2f6f77fe0db6ca\nUnfortunately, I didn't think at where else I might be doing that lol.\nAnyway, I'll take a look when I get home.  Thanks again!\n. Latest commit fixes this! Found a few other similar issues as well. Thanks again!\n. I'll try to take a look tomorrow after work - it's getting late here.\nThanks!\n. Sorry for not responding yesterday - I got bogged down with work. Anyway, I committed a fix - thanks again!\nAlso, I'm interested in the fix you mention here:\nhttps://github.com/phpseclib/phpseclib/pull/40#issuecomment-11883885\nCould you fork the repo and commit it?  I'm not married to the CFB implementation as is but there are other things I'd rather work on for phpseclib than rewriting it myself lol.  But if I like your code I might be up for merging it!\n. Looks like DES.php and TripleDES.php do this correctly lol. I like the example too!\n. I made a lot of CS adjustments. phpseclib is coded using the PEAR coding standards, which you can read up on here:\nhttp://pear.php.net/manual/en/standards.php\nAmong other things, no tabs, {'s go on same line as for or if statement, etc.\nI also replaced the first for loop and the while loop with substr / substr_replace, which, in my limited testing, seemed to speed it up a little bit.\nHere are the results for your version:\n6.29\n6.44\nMy rewritten one:\n6.03\n6.11\nThe original one:\n6.37\n6.17\nDo you get similar results?  If so do you want to try doing DES.php and TripleDES.php similar to Rijndael has wound up being rewritten? If not I'll use your code but the coding standards will still need to be changed..\nMy changes:\nhttps://github.com/terrafrost/phpseclib/commit/1626c0a3c712ae0993c6751750e0924ca4bdec0b\n(it's not yet on the phpseclib repo - just on my own repo as a sep branch)\n. That's true about the performance being dependent on the input that comes in.  FWIW I'm running on Windows and it was faster for me.\nUltimately, I'd say that the best approach is the one that's the most readable. Honestly, the approach that's being taken now works.  The bottleneck isn't really the mode anyway so much as it's the encryptBlock function.  As such one has to wonder if all this hub bub about rewriting the pure-PHP CFB mode is that important anyway.  Maybe all the block cipher modes could be re-examined but, at the end of the day, is endlessly rewriting a mode of operation a better use of my - or anyone else's time - than, for example, implementing elliptical curve crypto, SSH tunneling, SCP, more fleshed out SPKAC support, etc?\nPersonally, I'm not a big fan of direct ports (which is what it seems like you did with OpenSSL).  I like to add something substantive of my own creation and not just adapt someone else's work.  Like maybe with Net_SSH2 I could have just direct ported PECL's ssh2 extension to PHP instead of writing it from scratch but at that point it'd have the same API and behave in the same - not necessarily better - way. And plus if all you do is a direct port...  you might understand the code but that doesn't mean you understand the protocol. To top it off, PHP isn't C / C++. What's fast in C / C++ might not be so fast in PHP and vice versa.\nAnyway I'm aware of a bug in CFB mode with mcrypt when the continuous buffer is disabled (ie. it acts the same way regardless of whether the continuous buffer is disabled or not) but if there are any other bugs that'd be news to me.\n. I fixed the E_NOTICEs.\nTo understand why it was working before...\nHere's what it's essentially doing:\n``` start:\n  $iv = '.....';\n12:\n  $orig_pos = 0, $i = min(5-0, 2) = 2, $len = 0, $pos = 2\n  $plaintext = substr('.....', 0) ^ '12'\n  $iv = substr_replace('.....', '12', 0, 2) = '12...'\n3456:\n  $orig_pos = 2, $i = min(5-2, 4) = 3, $len = 1, $pos = 0\n  $plaintext = substr('12...', 2) ^ '3456' (leaves 6 unencrypted)\n  $iv = substr_replace('12...', '3456', 2, 3) = '123456' (w/ new method: '12345')\n  (encrypt $iv to get '.....')\n  $iv = substr_replace('.....', substr('3456', 3, 1), 0, 1) = '6....'\n  $pos = 1\n7890:\n  $orig_pos = 1, $i = min(5-1, 4) = 4, $len = 0, $pos = 4\n  $iv = substr_replace('6....', '7890', 1, 4) = '67890'\n```\nie. $iv contains both the old IV and the new IV\nThe original approach:\n``` 12:\n  $start = 0\n  $xor = '.....'\n  $buffer['ciphertext'] = '12'\n3456:\n  $buffer['ciphertext'] = '12345'\n  $xor = '.....'\n  $buffer['ciphertext'] = ''\n  $start = 3\n  $buffer['ciphertext'] = '6'\n7890:\n  $buffer['ciphertext'] = '67890'\n  $xor = '.....'\n  $buffer['ciphertext'] = ''\n  $start = 4\n```\nie. the old IV ($xor) and new IV ($buffer['ciphertext']) are stored separately\nIncidentally, I just realized that I never pushed my orig changes to phpseclib/phpseclib - just to terrafrost/phpseclib. Oh well..\n. The code as written appears to pretty much be a port of the Rijndael.php changes.\nIn the case of mcrypt it can be done better. ie. The ncfb mode doesn't need to be entirely ignored. That was what I attempted to do but I guess there were some edge cases where it didn't work.\nTo elaborate...  mcrypt's ncfb cipher works just fine when continuous mode is disabled - when the IV is reset. Not only that but my expectation is that it'd be faster too than a pure-PHP implementation. But in the case where the IV shouldn't always be reset it doesn't. So I set the IV to what it should be when it should be set. At least in theory.\nThe fix I wound up committing pretty much does that - preserves the speed of mcrypt while getting it to work where it doesn't currently.\n. > (also faster than the currently commited cfb code... if you interested i'll send a commit)\nSure - let's have at it.\nI'll look at your latest code snippet as time permits.\n. My latest commit to phpseclib/phpseclib should resolve this I do believe. If you concur let me know and I'll close it. The discussion about speeding up CFB can be continued in the other ticket.\n. I made a commit to master that should fix that latest test case (wasn't concatenating a string when I should have been) and then merged the other branch over that change so I think it's safe to say that the issue raised in this specific ticket has been rendered obsolete, if not fixed all together.\nThe tricks with constants are interesting. I'll let bantu address those. Maybe start up another issue or continue the discussion in this one (even though the issue is now closed).\n. Looks good.\nI made a few small changes.\nThe bitmasking stuff shouldn't require an explanation.\nChanging the $iv = substr_replace($iv, $block, $pos, $len) thing in if ($len) probably does however.\nFrom the if ($pos) statement if eiter $len or $pos will wind up being 0. If it's not one it's the other.\nAnyway, in my testing, it's a little faster, but not much.\nHere's a branch with my code (and your commit):\nhttps://github.com/terrafrost/phpseclib/tree/petrich-2\nAnd here's a branch with just your code (merge conflict I introduced resolved):\nhttps://github.com/terrafrost/phpseclib/tree/petrich\nWhat are your thoughts?\n. Are you going to work on DES / TripleDES or should I?\nThanks, btw, for all your help with this!\n. I'd like to do this...  I'm just not aware of any instances where it's actually used lol.  The SSH server you provided me access to doesn't support it, for example:\n```\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('www.domain.tld');\nprint_r($ssh->getEncryptionAlgorithmsClient2Server());\n```\nHaving a real world implementation to test it against would be helpful.\n. Nice! I'll have to check it out!\nAlso, sorry for not replying sooner - I didn't see this post until just now lol\n. I'm not able to reproduce that array_pad() issue..\n```\n<?php\nerror_reporting(E_ALL);\ninclude('Math/BigInteger.php');\ndefine('MATH_BIGINTEGER_MODE', MATH_BIGINTEGER_MODE_INTERNAL);\n$a = new Math_BigInteger(30);\n$b = new Math_BigInteger(17);\n$a = $a->modInverse($b);\necho $a;\n```\nAny ideas?\n. It might also be good to test Math_BigInteger without the openssl enhancements. eg. define('MATH_BIGINTEGER_OPENSSL_DISABLE', true) before initializing Math_BigInteger.\n. Looks good! All we need now...  TripleDES!\nThanks for all your work on this!\n. The changes you made to decrypt() are pretty cool!!\n. Ya know...  I had never even thought of that lol. But you're right - that's a really good idea!\n. So in terms of an API I could do hash($string) and hashFile($filename) but that wouldn't support data that comes from the network and maybe goes to /dev/null. I guess I could do something like setContinuousMode() for hashing like I do for the various symmetric ciphers.\nWhat do you think?\n. Reading up on the phar signature format it doesn't look like they make use of public key crypto?\nHere's a tool I wrote that'll verify hashes of a phar without progressive hashing:\n``` php\n<?php\ninclude('Crypt/Hash.php');\n$content = file_get_contents('composer.phar');\nif (substr($content, -4) != 'GBMB') {\n    exit('no signature present');\n}\nswitch (substr($content, -8, 4)) {\n    case \"\\x01\\0\\0\\0\": // md5\n        echo bin2hex(substr($content, -20, 16)) . \"\\r\\n\";\n    $hash = new Crypt_Hash('md5');\n    echo bin2hex($hash->hash(substr($content, 0, -20)));\n    break;\ncase \"\\x02\\0\\0\\0\": // sha1\n    echo bin2hex(substr($content, -28, 20)) . \"\\r\\n\";\n\n    $hash = new Crypt_Hash('sha1');\n    echo bin2hex($hash->hash(substr($content, 0, -28)));\n    break;\ncase \"\\x04\\0\\0\\0\": // sha256\n    echo bin2hex(substr($content, -40, 32)) . \"\\r\\n\";\n\n    $hash = new Crypt_Hash('sha256');\n    echo bin2hex($hash->hash(substr($content, 0, -40)));\n    break;\ncase \"\\x08\\0\\0\\0\": // sha512\n    echo bin2hex(substr($content, -72, 64)) . \"\\r\\n\";\n\n    $hash = new Crypt_Hash('sha512');\n    echo bin2hex($hash->hash(substr($content, 0, -64)));\n\n}\n```\nFor really large phar's I could def see how progressive hashing would be useful though..\n. For the php5 / 2.0 branch we can prob refactor / greatly simplify Crypt_Hash quite a bit. Remove mhash, the internal implementations of sha256, sha512, etc.\n. It seems like this commit and https://github.com/phpseclib/phpseclib/pull/57 are conflicting with one another?\n. I can commit that as a one off non-stable sort of thing but I'm kinda thinking that a better long term approach would be to make it so you can use the ->read() and ->write() functions with ->exec().\nThe way I figure that'd work is...  you do ->exec() and then all subsequent ->read()'s / ->write()'s are going off of that until you do another ->exec().  ie. once you do ->exec() you can never go back to interactive mode. Well unless another function is created.  Maybe ->requestPrompt() or something...\nWhat are your thoughts?\n. Sorry for the delay.\nAnyway what if something like this was done:\n$ssh->enableTTY() and $ssh->disableTTY() are created. They can be used with exec() * to have it toggle between execWithPrompt() and the regular exec(). Personally, I think I like that idea better than creating two separate exec()'s.\nAs for read()...  the fgets approach works when no parameter is provided. Right now parameterless read()'s can be called and when used with setTimeout() it'll return all output that's been produced for the past x seconds. With exec() it could just return everything.  Unless you do give it some parameters to look for.\n- Seems like these functions could be used with a hypothetical requestPrompt function, too, which I guess read could call by default if exec hadn't already been called. I'm not sure what a shell that didn't have a TTY would do though..\nIs this something you'd be up for working on? :D\n. Your approach sounds good. Looking forward to seeing your code!\n. What I've done for other functions that could return multiple types (boolean or string or whatever) I did this:\n* @return Mixed\n...instead of this:\n* @return Integer or false\nThat said, I don't know which is better. Honestly, all the phpDoc comments could use some review.\n. I'll try to take a look at this tomorrow.. Thanks for the heads up!\n. Sorry for the delay. Anyway http:// works but not https://. I've opened up a ticket on sourceforge.net: https://sourceforge.net/p/forge/site-support/2522/ If they don't support https:// then I don't know that there's much that can be done. Unless someone wants to provide me with free hosting..\n. I haven't made any changes. Don't think there are any that I myself can make to fix this issue.\nAs for the http://phpseclib.sourceforge.net/channel.xml -> http://phpseclib.sourceforge.net/QQRRN/channel.xml redirect...  I have no idea. It doesn't happen to me when I visit the website. I confirmed this with Wireshark..\n. Do you want to update Rijndael.php as well?\n. FYI there was a bug in this commit that https://github.com/phpseclib/phpseclib/commit/d774476bcfd2eda5b07bf97c9acf75372a4b525a fixes.\n. Nice job! That's a really surprising speed up!\nI made a few CS adjustments with https://github.com/phpseclib/phpseclib/commit/6765cb3b2b3244e1b9865e205c8905b311e27d6a.\nAdded parenthesis because I think bitwise operations, in particular, aren't intuitive when it comes to order of operations. ie. 0 & 1 == 0 outputs 0 even though my own intuition would be that 0 & 1 would get done first which would result in 1 being output.\nI also renamed the $Statex variables since $statex is being used as well. Honestly, I think PHP's a little inconsistent in it's case sensitivity. Function names aren't case sensitive but variable names aren't.\nMade one other optimization too. In particular, the last state doesn't need to be copied to a temp variable. Seems to result in a very small speedup.\nAnyway, like I said, nice job!!\n. Yah - let's take a look at that!\n. I'll take a look later. My initial testing suggests that it works, however, beyond that I don't have the time to review it that thoroughly right now. Maybe over the weekend..\n. Looking forward to it!\n. This has been discussed before:\nhttps://github.com/phpseclib/phpseclib/issues/29\nA new thought I've had since the last ticket.. a new repo could be created. Maybe phpseclib/phpseclib5 instead of just phpseclib/phpseclib. People developing in phpseclib/phpseclib5 could add phpseclib/phpseclib as a remote (so you'd periodically pull phpseclib/master instead of origin/master) and that branch could have releases made at it's own leisure.\nOne advantage of that is that people would could be given commit access to that repo without being given commit access phpseclib/phpseclib.\nThat said, here's something I can do in phpseclib/phpseclib when I get home:\n```\nclass a {\n    function a()\n    {\n        echo 'AAA';\n    }\nfunction __construct()\n{\n    a();\n}\n\n}\n```\nEven if phpseclib isn't using namespace's doing that would make it easier for third parties to namespace phpseclib/phpseclib. ie. all they'd have to do is add one line at the top.\n. https://github.com/phpseclib/phpseclib/commit/bfb04dcf4daa36d8f95d2c673ed1585e815e6724 adds the __construct constructor. I'll leave this thread open for the time being so the idea of creating a new repo can be discussed should anyone chose to do so.\n. So it looks like this is breaking travis-ci.org: https://travis-ci.org/phpseclib/phpseclib/builds/4467529 Any ideas?\n. The change has been reverted.\n. As I already stated, I am willing to create a new repo within the phpseclib project for a PHP5 only version. eg. https://github.com/phpseclib/phpseclib5. Or maybe the original repo could be renamed so there'd be phpseclib/docs, phpseclib/classic and phpseclib/modern.\nBeyond that I am overall pretty hostile to the idea. Go visit http://phpseclib.sourceforge.net/ . What's the first \"bullet point\" that you see? Should be \"compatibility\".\nSure, servers should be running PHP 5.4 (1). And sure, servers should either have openssl or mcrypt installed for symmetric encryption. And sure, servers should have gmp installed so that they can do RSA fast. But then what was the point of Math_BigInteger? What was the point of Crypt_AES and Crypt_Rijndael? Do I just kick all of that to the dust because so I can be all hip and cool?\nAlso, fyi, changing the style in which the constructors are done isn't a new feature. That's like saying because you changed $i++ to ++$i you added a new feature. You didn't.\nSimilarly, name spacing isn't a feature. It's a BC breaking API change. Saying it's a new feature would be like PHP changing the preg_replace function to replace_preg and calling it a new feature. There might be some good arguments for it but let's not confuse it for what it is.\nAnd, ftr, I don't have a problem breaking BC so long as it's in a different repo. It can be an official phpseclib repo too - it just can't be the phpseclib repo.\n(1) PHP 5.4 runs phpseclib a whole lot faster than anything else: http://phpseclib.sourceforge.net/math/intro.html\n. Yah - I would like to do that at some point.\n. No update. It's still something I'd like to do but there are a lot of other things I'd like to do with phpseclib first.\n. I can't think of any ways to speed it up.\nCosmetically, I think this would be better for the switch ($this->Nr) thing:\nswitch (true) {\n    default:\n        if ($Nr == 10) break;\n        $sx = ... ^ $w[44..47];\n        if ($Nr == 11) break;\n        $sx = ... ^ $w[48..59];\n        if ($Nr == 12) break;\n        ...etc...\n}\nBut I suspect that'd make things a little slower too. And then you'd have to do the $ex / $sx switch every time too.\nAnother possibility:\n$Nr = $this->Nr;\nif ($Nr > 10) {\n    $s0 = $t0[($e0 >> 24) & 0xff] ^ $t1[($e1 >> 16) & 0xff] ^ $t2[($e2 >> 8) & 0xff] ^ $t3[$e3 & 0xff] ^ $w[44];\n    $s1 = $t0[($e1 >> 24) & 0xff] ^ $t1[($e2 >> 16) & 0xff] ^ $t2[($e3 >> 8) & 0xff] ^ $t3[$e0 & 0xff] ^ $w[45];\n    $s2 = $t0[($e2 >> 24) & 0xff] ^ $t1[($e3 >> 16) & 0xff] ^ $t2[($e0 >> 8) & 0xff] ^ $t3[$e1 & 0xff] ^ $w[46];\n    $s3 = $t0[($e3 >> 24) & 0xff] ^ $t1[($e0 >> 16) & 0xff] ^ $t2[($e1 >> 8) & 0xff] ^ $t3[$e2 & 0xff] ^ $w[47];\n    if ($Nr > 11) {\n        ...\n    }\n}\nNeither seem that clean though idk.\nbantu had some CS suggestions as well..\n. https://github.com/phpseclib/phpseclib/commit/5910f7c14fd1515321f36d55559240a3f25e6073 fixes this. Thanks!\n. I like it - nice job!\n. I agree - that would be a useful feature.\nOut of curiosity, what do you think about this (related) idea? When you upload a file the access and modification times are set to that of the original file?\nI dunno...  maybe I should just let people modify it themselves if they want to via setatime() / setmtime() functions or something.\n. https://github.com/phpseclib/phpseclib/commit/25c7e7bd96f5875864b0592eef48660d6b04dd37\nNeed to do a chown and a chgrp as well but for the immediate issue at hand has been fixed.\n. Nice finds!\n. https://github.com/phpseclib/phpseclib/commit/1d1c2782e93c8bb75f05bb8000fcf8660c06a764 fixes this - nice find!\n. So thinking about it...  what if we create a new function - getStdError()? So if you call enableQuietMode() stderr won't be included in the output but you can get it with getStdError(). Don't want to do getError() 'cause that's too similar to getErrors() which is already in use.\nI'm a little leery about creating adding random variables to functions because otherwise it can start to look like a god function. There have been several proposals to modify exec() to take in extra parameters (usually booleans) and...  well, doing exec($command, true, true, true, false, true)...  I dunno...  just doesn't appeal to me that much.\nAn example of another proposal to add a parameter to exec():\nhttps://github.com/phpseclib/phpseclib/pull/58\nBtw, I notice you're from Austin - I'm in Austin too! :D\n. Nice find! I committed a fix for CTR mode for DES. I'll take a look at OFB mode tomorrow as time permits.\nThe fix:\nhttps://github.com/phpseclib/phpseclib/commit/bf3ca6312e5318ae00a976bd11da008b4903cc07\nThanks again!\n. https://github.com/phpseclib/phpseclib/commit/15817a416e21e07c31d4100544d81377beed06f5\nhttps://github.com/phpseclib/phpseclib/commit/c4b3288851630eb5113c03a40d4e60ad083419e1\nshould make OFB mode work correctly. Thanks for the heads up!\n. Not knowing you had done this I committed my own patch lol :O\nI appreciate your efforts though - thanks! :D\n. phpseclib is coded using the PEAR coding standards and PEAR's pretty hostile to doing stuff that way. See, for example, the following links:\nhttps://pear.php.net/bugs/bug.php?id=17517\nhttps://github.com/phpseclib/phpseclib/pull/10\nDon't ask me why they did it that way - I've no idea. Maybe I can send an email out to the PEAR mailing list asking why later today as time permits or something..\n. https://github.com/phpseclib/phpseclib/commit/89cd8f09e7c2a6de7156f5df6d94efcaa543bbfd#phpseclib/Net/SFTP.php\nShould fix it. Thanks!\n. It's a bug that was fixed about three months ago:\nhttps://github.com/phpseclib/phpseclib/issues/35\nI haven't made a release since fixing that issue, however, so using the latest Git version should be sufficient.\nThanks!\n. Try the master branch and not the 0.3.1 tag. The issue this pull request is trying to fix should already be fixed. Also, your pull request undoes most of the changes that have been made to Net/SFTP.php since that bug was fixed.\n. Sounds like this issue?:\nhttps://github.com/phpseclib/phpseclib/pull/83\nIf so try the latest Git version.\nThanks!\n. @bantu - what do you think of this? I figure you know more about Composer than I do!\n. Something else that could be done I suppose...  include a dummy / empty Crypt_Random class to satisfy Composer idk.\n. Seeing the log files would really help. ie. add define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after Net/SSH2.php is included and do echo $ssh->getLog(); after you're done running the command you're trying to run (or in your case after the Net_SFTP object is created).\nMy best guess based on the limited amount of info that's been provided...  you're trying to use SSH2.php to connect to a non-SSH server. The logs will confirm (or disprove) that hypothesis.\n. Seems like doing\nphp\nif ($this->curTimeout <= 0) {\n    break;\n}\nBefore the if ($this->curTimeout) would be sufficient?\nProblem with setting the timeout to 0.02 seconds is...  among other things, what if you want the timeout to be 0? ie. what if you didn't want there to be a timeout?\nAs for identify_prompt()...  I'm not really sure how that'd work. Like what if you had, in your .bashrc file, vim? At that point, you'd never see the prompt.\n. You're right - I like that better! I'll try to implement it tomorrow as time permits.\nAt some point I need to also re-examine whether or not the channels ought to be closed. ie. if you're using setTimeout to get the prompt.. should it close the channel after as it currently does? Something for me to do lol (after I resolve the immediate issue described in this ticket)\n. Done!:\nhttps://github.com/phpseclib/phpseclib/commit/292340cdd59daa31232344bfa835b029e497433a\n. Out of curiosity what SFTP version are you running? The status codes phpseclib currently defines are defined the last v3 RFC: http://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#page-21\nSome of the ones added with this commit weren't even added the last draft on SFTPv6 http://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#page-49 (not even the next to last draft defined SSH_FX_NO_MATCHING_BYTE_RANGE_LOCK, for instance).\nAnyway, the commit looks good (hence my merging it lol) - I'm just curious if SFTPv3 servers are serving up SFTPv6 status codes lol.\n. Hmmm - I've never seen an SFTPv5 server before. I've only tested phpseclib on SFTPv2/3. I'm gonna have to contact the xlightftpd people and see if they could provide me with a free copy of their app!\n. The xlightftpd people gave me a copy! I'll prob test / flesh out SFTPv5 support next week - need to finish up SCP support up for someone else this week.\nThanks!!\n. So I was playing around with xlightftpd and...  it looks like it does SFTP-3 by default. How can you change it to SFTP-5?\n. Actually, I think a better fix would be to do if (defined('NET_SSH2_LOGGING')). That would make it consistent with, for example, this line:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1753\n(and a lot of others too)\nWant to do a new pull request? :D I can commit it directly too - whatever works best for you!\nNice find btw!\n. The latest commit fixes this. Thanks for the heads up!\nAs for the speed...  that really depends on your environment (which you can get by doing echo $ssh->identifier) and where the bottlenecks are. Like if you're doing SFTP from one computer to another and both are on the same 100mbit network the bottleneck is probably going to be the encryption algorithms being used. If you're doing SFTP on a 56k modem the bottleneck will be the network.\nThe fastest way to send files would be with the mcrypt extensions and the gmp extensions installed. mcrypt would have more of an impact since gmp would only be used for the initial key exchange / host key verification (if you're doing host key verification).\nIt's also possible your SSH server doesn't have some of the faster algorithms available. phpseclib will use RC4 if it's available, before using any other algorithms, because that's the fastest algorithm. If your server doesn't have that then that would slow things down as well.\nAnyway thanks for the heads up!\n. I'll try to take a look tomorrow or something as time permits.\nThanks!\n. Doesn't seem to be inter operable with SSH2:\nhttps://github.com/terrafrost/phpseclib/tree/twofish\nAny ideas off hand? I'll poke deeper into it myself as time permits.\n. From the SSH specs:\nhttp://tools.ietf.org/html/rfc4253#page-10\n```\n   The following ciphers are currently defined:\n  3des-cbc         REQUIRED          three-key 3DES in CBC mode\n  blowfish-cbc     OPTIONAL          Blowfish in CBC mode\n  twofish256-cbc   OPTIONAL          Twofish in CBC mode,\n                                     with a 256-bit key\n  twofish-cbc      OPTIONAL          alias for \"twofish256-cbc\"\n                                     (this is being retained\n                                     for historical reasons)\n  twofish192-cbc   OPTIONAL          Twofish with a 192-bit key\n  twofish128-cbc   OPTIONAL          Twofish with a 128-bit key\n\n```\nThat the cipher is defined in the specs though doesn't necessarily mean that OpenSSH supports it but SSH-1.99-3.2.9.1 SSH Secure Shell (non-commercial) seems to.\nAnyway like I said I want to investigate the matter in further detail. Could just be a buggy implementation on their end in so far as I know. Hopefully I'll have a chance this evening :)\n. Didn't see your pull request lol. But yah - stupid typos on my part ugh. Sorry about that!!\nBtw, on an unrelated note, Crypt_RC4 could probably use some create_function() lovin' too if you're up for it! :D\n. I'll try to take a look this evening. Thanks for the feedback!\n. Do you know of a good benchmarking framework? The way I've been performing my benchmarks to date is by just running these scripts:\nhttps://github.com/phpseclib/docs/blob/master/crypt/phpseclib-aes.phps\n. I'll try to take a look at this later today or tomorrow as time permits. Thanks!\n. It looks good at a quick glance but I'd like to look at it a little more thoroughly before merging. I'll try to do so in the next day or two as time permits.\nThanks!!\n. Right now you can do this:\n``` php\n$ssh->exec('cat bigfile.zip', false);\nwhile (true) {\n    $temp = $this->_get_channel_packet(NET_SSH2_CHANNEL_EXEC);\n    if (is_bool($temp)) {\n        break;\n    }\n    echo $temp;\n}\n```\nThat said, I think that's kinda ugly. I was, however, thinking about replacing the current second parameter of exec() with a callback function instead. ie. every time some data has been received the callback function is called. In that callback function you could output the text, save it to a file, etc.\nWhat are your thoughts?\n. https://github.com/phpseclib/phpseclib/commit/dc76cf5b8e679f666f58ece6de0caeb246c416cf\nShould resolve this!\n. Nice finds - thanks!\n. Merged it - thanks!\n. I'll try to take a look in the next few days. Had a super busy weekend. Will be in San Francisco for a week starting this weekend so there may be more delays too but I'll do what I can :)\n. Also, if you could post your log file that'd be great. Maybe it won't help but I'd like to see it none-the-less.\nThanks!\n. Can you post the log?\n. fwiw I'm able to duplicate the issue as well, however, am unable to do much atm to fix it since I'm at work and am in theory supposed to be doing work stuff lol. I'll try to take a look when I get home - thanks!\n. The latest Git version fixes that:\nhttps://github.com/phpseclib/phpseclib/issues/86\nhttps://github.com/phpseclib/phpseclib/issues/83\n. This isn't a bug. phpseclib is getting control characters and ignoring them and then the server is killing the connection.\nQuoting the PuTTY FAQ:\n\nA.7.12 When I cat a binary file, I get \u2018PuTTYPuTTYPuTTY\u2019 on my command line.\nDon't do that, then.\nThis is designed behaviour; when PuTTY receives the character Control-E from the remote server, it interprets it as a request to identify itself, and so it sends back the string \u2018PuTTY\u2019 as if that string had been entered at the keyboard. Control-E should only be sent by programs that are prepared to deal with the response. Writing a binary file to your terminal is likely to output many Control-E characters, and cause this behaviour. Don't do it. It's a bad plan.\nTo mitigate the effects, you could configure the answerback string to be empty (see section 4.3.7); but writing binary files to your terminal is likely to cause various other unpleasant behaviour, so this is only a small remedy.\n\nphpseclib, unlike PuTTY, doesn't replace the Control+E characters, so the server sends one and phpseclib doesn't respond the server kills the connection. Or something, I'm not really sure. Either way this is more of a Linux issue than anything and it's not something you should be doing, regardless.\nRegarding the initial \"non-standard characters (binary data) passing through SSH\" comment...  phpseclib handles binary data just fine - it's BASH or CSH or whatever shell you're using that isn't handling it as one might expect.\n. I'll try to take a look in the next few days. Had a super busy weekend. Will be in San Francisco for a week starting this weekend so there may be more delays too but I'll do what I can :)\n. Oh - something that'd help - do you think you could provide an example that isolates the problem? Thanks!\n. Removing Crypt_RC4's destructor works. Ugh I don't like the \"[the destructor can be called in] any order during the shutdown sequence\" behavior of PHP.\n. Looks pretty cool! I'm in San Francisco right now on vacation so it may be a week or so before I have a chance to look at it very thoroughly.\nThanks!\n. Birthday was yesterday.. sorry. I'm 30 now meh :(\nAnyway, a pull request would be great. I've kinda been waiting for that lol.\n. @petrich - happy birthday back at you lol\n. The original reason this wasn't done was to minimize the number of extra files one would have to include to utilize select Crypt_* files. Like personally, I don't like it when libraries have 50,000 files. I like to minimize it. So before, to include Crypt_DES, all you had to do was include Crypt/DES.php in your file and that was it. With Crypt_Base, you'll have to include both Crypt/Base.php and Crypt/DES.php.\nAnyway, as petrich noted, this is changing.\n. W.r.t. to this ticket's being closed...  I'll concede the point that Crypt_Base has yet to be merged, however, the fact that the issue raised in this ticket is still unresolved does not mean it's not a duplicate ticket imho. ie. this ticket does not raise any new issues that Crypt_Base does not resolve. Crypt_Base eliminates this duplicate code and then some.\nAs for the current behavior...  well justifying it is a bit moot since it's all due to change. However, since you asked... let's start from the beginning. I'll more fully rationalize the original (and now somewhat irrelevant) motivations for my doing it that way and I'll then explain why I don't feel the DES vs AES / Rijndael comparison is valid.\nFirst, consider this project:\nhttps://github.com/mimecuvalo/paramikojs\nThat's the SSH implementation used by FireSSH, a Firefox plugin. It has an ssh_exception class, a sign_ssh_data_worker class, a packet class, a kex_gex class, a kex_group1 class, a hostkey class, a client class and a channel class. There are other classes in that directory, as well, but these are the classes that the SSH implementation itself is probably using and that I don't imagine are re-usable anywhere else. Not including the exception class that's seven classes to do what phpseclib does in one class, which, in my mind, makes it harder to trace code.\nSo that's the first premise. That excessive OOP is a bad thing.\nAnother example of how it's bad...\nI'll occasionally download PEAR code to utilize it in a program. But I don't want to include the whole of PEAR in my code either. I just want to include the bare minimum. But because there are so many dependencies I usually can't just go in, take the file that I want and leave it at that. I usually go in, grab the file that I want, include it, get a Fatal Error because it requires another file, include that other file, get a Fatal Error because that file requires another file, etc. It's a PITA and I think dependency minimization can in some situations be virtuous. Especially in phpseclib's case where phpseclib is a pretty multi faceted library and you probably don't need all of it anyway.\nLike X509.php and SSH2.php are not likely going to be utilized together, so why include both? You shouldn't, imho. You should only include what you need and no more. A good use case as to why...  let's say (god forbid) there's a vulnerability in X509.php when all you're using is SSH2.php. Every external file you utilize is a liability but usually the gains outweigh the potential costs if you're actually using the file, but if you're not?\nIf you install phpseclib by PEAR or Composer it's a non-issue, but then, comparing the Composer stats to the sourceforge.net download stats, it seems clear that most people aren't downloading phpseclib by Composer. And I don't have any stats for the PEAR channel but my suspicion is that most people aren't downloading phpseclib through that anyway.\nHaving said all that, let's say we want to completely eliminate all duplicate code. A lot of the class files in phpseclib implement a string_shift function. It's just a 2-3 line function so maybe all files in phpseclib should extend Base.php and maybe Crypt_Base should extend that?\nOr maybe we conclude that 2-3 lines isn't enough to justify adding a whole new file that every class extends.\nSo how many lines is enough to justify the creation of a new class that others will extend? Is _generate_xor() enough lines? In my mind no because it's just one function and although it's bigger than _string_shift it's still not very big. What about AES's use of Rijndael.php, you ask, or SFTP.php's extending SSH2? Well there it's not just one semi-small function that's being copy / pasted - it's multiple functions, some of which are, individually, larger than _generate_xor().\nAnyway, all of this is a bit moot, anyway, since Crypt_Base is being added, pending petrich's pull request.\n. > My gut feeling / experience tells me that tickets should stay open until they are actually resolved in code.\nEven if they're arguably duplicates of other already open tickets? idk.. you can re-open it if you like.. I'm kinda indifferent lol.\n\nDiffie-Hellman and the underlying groups is just one (separate) aspect of SSH and Diffie-Hellman and the groups could be used for other purposes as well (say TLS). By including them into the SSH class, we make it impossible to (re-)use them on their own. So, yes, paramikojs looks like it has a better design.\n\nWell, in the case of Diffie-Hellman, maybe. But I'm also not to keen on creating classes unless I actually intend on them being used. Like in the case of Rijndael and AES...  the base class can be used by end users just as AES can  be. Currently, any class file you look at in phpseclib is intended to be user facing. Crypt_Base will change that but it's just one file.\nThe thing with diffie-hellman is...  until I do a full featured diffie-hellman class I'm not too gung ho on having a stand-alone diffie-hellman class. I don't want to provide support for people trying to use it when it, as written, was never intended to be re-used in third party projects anyway. Maybe it'll be re-written to be user accessible at some point but right now it's not.\nIs paramikojs's diffie-hellman implementation a fully featured one? I don't know. Honestly, I'm not even sure what a fully featured diffie-hellman implementation would look like - what features it should support etc.\nThis is kinda what I did for RSA. SSH2 implemented RSA internally before Crypt_RSA was ever created as a class. But then Crypt_RSA was created - not as a stub intended only for use with SSH - but as an all purpose fully featured RSA library.\n\nIf my project includes X509.php but does not use it and there is a security issue in X509.php, nothing happens and the project has nothing to do if it is aware of its dependencies. This is because X509.php is not an end-user application.\n\nI was thinking more stuff like remote file inclusion. Like include $phpbb_root_path . 'whatever' lol. phpseclib doesn't do that, however, so I will concede that that was a bit of a contrived example lol.\n\nMost users of phpseclib are probably other projects like magento that bundle phpseclib as a whole. So it is hard to say how many installs (and of what type) there are.\n\nGood point.\n. I like your last approach of not using 160/224-bit keys unless explicitly told to use them.\n. Aside from the comment I posted the code looks good! I'll try to merge it when I get home. Looks like there's a conflict I need to resolve as well.\nThanks!\n. Fixed with https://github.com/phpseclib/phpseclib/commit/32a47d2fbc73b155b236303f284f0e459f0e7c18\n. I guess we could, although there'd need to be a lot of function descriptions updated at that point.\nI'm not the biggest expert with phpDoc best practices - I'd just do whatever those practices dictate. \n. Looks impressive!\nA few organizational thoughts.\nI think it'd be better if ECDH were in the Crypt directory and not the Math one. I mean, Crypt_RSA, in theory, could be in the Math directory, too, but I think the Crypt directory is a better fit.\nAlso, cosmetically, I think it'd just look better as ECDH, all caps, instead of EcDH. idk that's just me.\nI think some of the helper classes would be better moved to ECDH subdirectories unless there's a (realistic) chance they can and would be re-used by third parties.\nA few comments on the CS..\nYou're using tabs to indent instead of spaces, as per the PEAR CS.\npetrich commented on the PHP5 stuff. And as a matter of personal preference, I really don't like public / protected / private anyway. This essay sums up my thoughts:\nhttp://aperiplus.sourceforge.net/visibility.php\n\nImproper calling of non-public methods wasn't a frequent problem, or an occasional problem, or even an extremely rare problem. I don't remember ever having a problem at all.\n\nIn addition to that article, sometimes, as stop gap solutions for more permanent fixes, I'll tell people to make use of methods that'd normally be private (and are denoted as such in the phpdoc). eg.\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?p=120079#p120079\n/**\n* @return null\n*/\nI don't pretend to be the biggest phpdoc expert but I think phpdoc wants a function name and optionally a function description?\nAnd I think if we're going to do @return null we ought to do it consistently. I'll try to find out the phpDoc people think on the matter at some point.\nI realize the unit tests that have already been committed violate phpseclib's / PEAR's CS but, in my mind, they're a little exempt, anyway, since they're not included with the release zips. Really, I see them as a separate project that just happens to be in the phpseclib repo.\nFinally, could you make examples demo'ing how to use it?\nThanks!\n. > I actually hated reading all the abbreviations in filenames used by other projects, how about EllipticCurveDiffieHellman?\nEllipticCurve or EllpiticalCurve?\nIt's kinda ironic, actually... if I was doing diffiehellman I'd probably name the class Crypt_DiffieHellman. From there Crypt_EllipticalCurveDiffieHellman or Crypt_ECDiffieHellman would naturally follow, even though on it's own I'd, personally, probably prefer ECDH lol.\nSpeaking about DiffieHellman, what about a DiffieHellman class as well while you're at it?\nSSH2.php should still, I think, have it's own independent DH implementation. Like right now there's Crypt/RSA.php and Net/SSH2.php will utilize it if you're using public key authentication but for server signature verification it uses it's own highly slimmed down implementation. The idea being to reduce the number of files you're needing to include.\nie. one of the big criticisms people seem to have against phpseclib is that it's big and a lot of projects don't want to include a library that's almost as big as their project itself to support a feature that might only be utilized by 1% of users. I suppose in the case of Crypt/RSA.php you probably ought to still include it to support both passwords and RSA public keys but still... I think dependency minimization is to be encouraged.\nAnother example: if you download Net/SSH2.php from the PEAR channel Crypt/RSA.php isn't required so it's not included. You have to separately download it. Because in my mind each of the main end-user facing classes should be seen as a separate project that all just happens to be in the main repo. Like Crypt/RSA.php is a project distinct from Net/SSH2.php, even though Net/SSH2.php does use it for one thing.\nReally, I see phpseclib as being the PEAR of cryptographic functionality. And when you're using PEAR you don't include all of it when all you want to use is Text_Diff - you just include Text_Diff.\nI don't know if this would even make sense with ECDH. Like to have RSA support built into SSH2.php for host key verification it adds all of 18 lines (some of which are just new lines and comments).  Utilizing Crypt/RSA.php would utilize 11 lines per the commented out code. If it took 50,000 lines it'd be a different story but it doesn't.\n\nHelper classes and filenames need some more thinking, in my opinion. Helper classes might need some redesign when other EC stuff enters the game, e.g. ECDSA which shouldn't be too far away from here.\n\nFor that one I would like a Crypt/DSA.php class. People ask about it often enough with SSH2. And with that one it should fully support all the standard key formats too. Like for DSA, it should support the PuTTY format and the default OpenSSL format. And the DSA parameters too.\nLike there was a PEAR proposal for a Crypt/DSA.php a while ago:\nhttp://pear.php.net/pepr/pepr-proposal-show.php?id=467\nBut that proposal had the same pitfalls as PEAR's Crypt/RSA.php. I don't want a phpseclib implementation of Crypt/DSA.php / ECDSA.php to have those same pitfalls. I don't want it to be a half-assed implementation with the just the barest minimum done. I think it should be a fully featured implementation.\nAnd both DSA / ECDSA should work with X509.php too. DSA isn't often used with X.509 but X.509 supports it none-the-less. And ECDSA...  five of Firefox's root CA certs use ecdsa-with-SHA384 (OID 1.2.840.10045.4.3.3)\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?p=140358#p140358\nECDH / DH don't have keys so it seems like fully featured implementations of those would be less complicated.\n. There is the phpseclib-php5 repo. Although there are discussions of maybe having a new php5 branch in the phpseclib repo too. Feel free to participate: https://github.com/phpseclib/phpseclib-php5/issues/1\n. phpseclib is coded using the PEAR coding standards and they're pretty hostile to absolute path's. See, for example,\nhttps://github.com/phpseclib/phpseclib/pull/10\nhttps://pear.php.net/bugs/bug.php?id=17517\n. Nice find! Looking at the code I tried to accommodate this a little bit but didn't do it every it needed to be done.\nThanks!\n. phpseclib is coded using the PEAR coding standards and they're pretty hostile to absolute path's. See, for example,\nhttps://github.com/phpseclib/phpseclib/pull/10\nhttps://pear.php.net/bugs/bug.php?id=17517\nI guess one reason PEAR doesn't do absolute path's is that if phpseclib did so you couldn't overwrite files with your own versions. See, for example, http://stackoverflow.com/a/15519932/569976 .\nAs for why you'd want to do that...  I guess that gives you the chance to have multiple versions of stuff or whatever.\nAnyway, I'm not exactly a PEAR power user. This fact is evidenced in the fact that the PEAR channel only ever has the current version. It doesn't have 0.2.2, 0.3.0, 0.3.1 and 0.3.5, etc - just 0.3.5 and that's it. I don't know how to make Pirum support multiple versions and don't care enough to figure it out. I mean, if interest was high enough I might be more motivated but as is I'm not. So even if the \"multiple versions\" use-case isn't as valid for phpseclib as it would be for http://pear.php.net/ that's the reason the PEAR CS are written that way, as I understand it.\nAlso, tbh, since phpseclib is coded using the PEAR CS I figure I'll just stick with that. If alterations are made to that CS then they're not the PEAR CS anymore but the phpseclib CS, at which point, the CS would need to be more thoroughly documented, etc, which, again, is not something I'm really that motivated to do. Especially when the documentation for the API, itself, is pretty out of date, as well.\n. You mean like using pfsockopen() instead of just fsockopen()? If so I'd be up for that with the caveat that I've never actually been able to get pfsockopen() to work lol. Here's a stackoverflow thread talking about how it should behave if it is working: http://stackoverflow.com/q/15390159/569976\n. I suspect it's not as easy as simply changing fsockopen to pfsockopen - that portions of the code would have to be rewritten to accommodate persistent connections. And being unable to test them would make it difficult to write those changes.\nAnother consideration: how does one persist the session key? I guess you could use $_SESSION or something..\n. Try something like this:\n```php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('www.website.com');\n$ssh->login('username', 'password');\n$ssh->write(\"ping 127.0.0.1\\n\");\n$start = microtime(true);\necho $ssh->exec('sleep 15s');\n$elapsed = microtime(true) - $start;\necho \"took $elapsed seconds\\n\";\necho $ssh->exec('ls -latr');\n```. So I guess the specific issue with the code I posted is that you're already using the interactive read / write functions? In theory, something like this would work:\n```php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('...');\nif (!$ssh->login('user', 'pass')) {\n    exit('Login Failed');\n}\n$ssh->write(\"ping 127.0.0.1\\n\");\n$ssh->enablePTY();\n$ssh->exec('bash');\n$ssh->write(\"ls -latr\\n\");\n$ssh->setTimeout(1);\necho $ssh->read();\n```\nIn practice that doesn't work because a NET_SSH2_MSG_CHANNEL_DATA packet from the ping is being sent before the NET_SSH2_MSG_CHANNEL_SUCCESS from the bash. I'll try to get it so that can work but it'll be a few days before I'm able to work on it.\nRight now read() / write() assume that you're talking about an interactive shell unless an exec with PTY was used at which point it assumes that that's being used. Once it makes that assumption you can't really go back.\nLong term, for the current master branch, I'd like to make SSH2.php support proper multiple channels. All 65,536 possible channels (iirc that's how many channels SSH2 supports) but that's a very long term goal.. Does it work now?\n. There are several of other \"conflicts\" such as this. Not only does PEAR have Crypt_Blowfish - it has Crypt_RC4, Crypt_RSA, Net_SSH2 and Math_BigInteger.\nOf course PEAR doesn't seem to mind to much. At least not in the case of Crypt_RSA: http://pear.php.net/package/Crypt_RSA\nAnd Math_BigInteger...  well I'm the maintainer of PEAR's Math_BigInteger so whether or not that one ought to even count is debatable.\nAs for what could be done...  no idea. I don't think there's a solution that wouldn't break BC.\nConsider renaming. Not only would it break BC but...  consider that PEAR's Crypt_RSA is deprecated in favor of phpseclib's. That's a pretty big accomplishment, I'd say, and there's no guarantee that they'd be willing to update their page again to accommodate a hypothetical renaming phpseclib's Crypt_RSA.\nAnd to be honest, I don't think this problem is big enough to merit a BC change. Of all the support requests I've gotten only one had someone who was confused over phpseclib's and PEAR's libraries having the same name. Well and now this one too. But, all in all, it's just never really been a huge problem. Certainly not enough of one to break BC.\n. They are not backwards compatible.\nPEAR's Crypt_Blowfish uses ECB by default, phpseclib's uses CBC. To use a mode other than ECB with PEAR you have to call the static factory method. phpseclib has no static method like that.\n. The php5 branch is supposed to take care of issues like that. I thought it was namespace'd but looking at it I guess it isn't. I've created https://github.com/phpseclib/phpseclib/issues/243 in light of that.\n. I completely agree. The documentation is in very bad need of updating. I figure it'll be a multi-week process though and I have a few small things I want to do before I get started on that so...  we'll see what we see when we see it.\n. That is an impressive gain - nice find! I'll have to look for other places where it could be a bottle neck.\nThanks!!\n. Nice find! Latest commit should fix this.\n. The documentation is in bad need of update. It's next on my to do list but I've had some stuff get in the way meh.\nAnyway, I'll try to respond tomorrow.\nThanks!\n. edit (July 30, 2015): working code:\n``` php\n<?php\ninclude('File/X509.php'); \ninclude('Crypt/RSA.php'); \n$issuer = new File_X509(); \n$issuer->setDNProp('id-at-organizationName', 'phpseclib demo cert'); \n$privKey = new Crypt_RSA(); \n$privKey->loadKey('-----BEGIN RSA PRIVATE KEY----- \nMIICWwIBAAKBgQDR1VHopvujQwg7aZe6uvACg5ZLKYD1heP9hXlmJNGKkTvmV//uQ5PlWPTp99AW \nFgU9QRM5cKkxw/0hC8+JTyc1CoqtdVAI/8l826+muJfiUaUALkAHSrw8537Xj2agJQRmaVNhUztA \nG3y6yweav3dYLYJG3MDlcD4l2U9t6QDBGQIDAQABAoGAaMy+KBCeRaBJEENgwKZ1EQxfmBKWkgnZ \nINn1FAr3jNmUrSrubDXcPAP97o0SpLVC0KEb1Ohr2KsmVcbsVIvv7CoK5h+fNTOZpm51Wev5VlHA \nOO/FQtq4kTL9JpG/5vVbk5JFA1r7kC/W01Pwp8zpf8teM3NWKuciLUXy7RjCirECQQD0gmM8jWbS \nwUmSYLEUOaqZnpzpqm+dTLov8ubf0Dsla6OgnCg5N0noVMPm5oFSJBhQOjmQnrXmXLJu8Soo0VUv \nAkEA27HBjUe99ztdnP7uX6xhHX3XfUkk7TKZvulP1IvYnZggv3Nyyj+wqMsGavcOHwKfxoWo/Nim \nYLO1vMUKkLrMNwJARFSn/QUbRizELccd1aQj/Bhqi5aY6KHHqpy8TrH3xYZmTP029H5yBh6iPMYQ \nP+9caBdNfRANj5o6N2zoNk4B+wJAcnD/TTQw/ce79RtLWyU1laJHDWl7xd/U/QEWZ7bNiRKFBJYE \nFtzkjpjr5+54OakpR8W6iLPmv3r90a6m2UulMwJAINcNFkJHojkf+Vc/e2U7ll19UIh+TDI0UrYT \nZxJA2S/nhIz+A6cNTX+E+yHlTbJr5xu6jxexQ7HfU1hTWYNmUg== \n-----END RSA PRIVATE KEY-----'); \n$issuer->setPrivateKey($privKey); \n$crl = new File_X509(); \n$crl->loadCRL($crl->signCRL($issuer, new File_X509())); \n$crl->revoke('111'); // optional - if ommited the whole reloading of the signed CRL is unnecessary\n$result = $crl->signCRL($issuer, $crl);\necho $crl->saveCRL($result);\n```\nThe original code that I had posted (that didn't revoke certs):\n``` php\n<?php \ninclude('File/X509.php'); \ninclude('Crypt/RSA.php'); \n$issuer = new File_X509(); \n$issuer->setDNProp('id-at-organizationName', 'phpseclib demo cert'); \n$privKey = new Crypt_RSA(); \n$privKey->loadKey('-----BEGIN RSA PRIVATE KEY----- \nMIICWwIBAAKBgQDR1VHopvujQwg7aZe6uvACg5ZLKYD1heP9hXlmJNGKkTvmV//uQ5PlWPTp99AW \nFgU9QRM5cKkxw/0hC8+JTyc1CoqtdVAI/8l826+muJfiUaUALkAHSrw8537Xj2agJQRmaVNhUztA \nG3y6yweav3dYLYJG3MDlcD4l2U9t6QDBGQIDAQABAoGAaMy+KBCeRaBJEENgwKZ1EQxfmBKWkgnZ \nINn1FAr3jNmUrSrubDXcPAP97o0SpLVC0KEb1Ohr2KsmVcbsVIvv7CoK5h+fNTOZpm51Wev5VlHA \nOO/FQtq4kTL9JpG/5vVbk5JFA1r7kC/W01Pwp8zpf8teM3NWKuciLUXy7RjCirECQQD0gmM8jWbS \nwUmSYLEUOaqZnpzpqm+dTLov8ubf0Dsla6OgnCg5N0noVMPm5oFSJBhQOjmQnrXmXLJu8Soo0VUv \nAkEA27HBjUe99ztdnP7uX6xhHX3XfUkk7TKZvulP1IvYnZggv3Nyyj+wqMsGavcOHwKfxoWo/Nim \nYLO1vMUKkLrMNwJARFSn/QUbRizELccd1aQj/Bhqi5aY6KHHqpy8TrH3xYZmTP029H5yBh6iPMYQ \nP+9caBdNfRANj5o6N2zoNk4B+wJAcnD/TTQw/ce79RtLWyU1laJHDWl7xd/U/QEWZ7bNiRKFBJYE \nFtzkjpjr5+54OakpR8W6iLPmv3r90a6m2UulMwJAINcNFkJHojkf+Vc/e2U7ll19UIh+TDI0UrYT \nZxJA2S/nhIz+A6cNTX+E+yHlTbJr5xu6jxexQ7HfU1hTWYNmUg== \n-----END RSA PRIVATE KEY-----'); \n$issuer->setPrivateKey($privKey); \n$crl = new File_X509(); \n$crl->revoke('111'); \n$result = $crl->signCRL($issuer, new File_X509()); \necho $crl->saveCRL($result);\n```\n. I'll take a look as time permits (and have re-opened this accordingly).\nDo keep in mind I am leaving for Japan, from Texas, tomorrow, and will be traveling for 15 days, so I may not do this in as timely manner as might be desired.\n. In response to @chacham15...  it looks like you're right - that no revocations are included. Try this instead:\n``` php\n<?php\ninclude('File/X509.php'); \ninclude('Crypt/RSA.php'); \n$issuer = new File_X509(); \n$issuer->setDNProp('id-at-organizationName', 'phpseclib demo cert'); \n$privKey = new Crypt_RSA(); \n$privKey->loadKey('-----BEGIN RSA PRIVATE KEY----- \nMIICWwIBAAKBgQDR1VHopvujQwg7aZe6uvACg5ZLKYD1heP9hXlmJNGKkTvmV//uQ5PlWPTp99AW \nFgU9QRM5cKkxw/0hC8+JTyc1CoqtdVAI/8l826+muJfiUaUALkAHSrw8537Xj2agJQRmaVNhUztA \nG3y6yweav3dYLYJG3MDlcD4l2U9t6QDBGQIDAQABAoGAaMy+KBCeRaBJEENgwKZ1EQxfmBKWkgnZ \nINn1FAr3jNmUrSrubDXcPAP97o0SpLVC0KEb1Ohr2KsmVcbsVIvv7CoK5h+fNTOZpm51Wev5VlHA \nOO/FQtq4kTL9JpG/5vVbk5JFA1r7kC/W01Pwp8zpf8teM3NWKuciLUXy7RjCirECQQD0gmM8jWbS \nwUmSYLEUOaqZnpzpqm+dTLov8ubf0Dsla6OgnCg5N0noVMPm5oFSJBhQOjmQnrXmXLJu8Soo0VUv \nAkEA27HBjUe99ztdnP7uX6xhHX3XfUkk7TKZvulP1IvYnZggv3Nyyj+wqMsGavcOHwKfxoWo/Nim \nYLO1vMUKkLrMNwJARFSn/QUbRizELccd1aQj/Bhqi5aY6KHHqpy8TrH3xYZmTP029H5yBh6iPMYQ \nP+9caBdNfRANj5o6N2zoNk4B+wJAcnD/TTQw/ce79RtLWyU1laJHDWl7xd/U/QEWZ7bNiRKFBJYE \nFtzkjpjr5+54OakpR8W6iLPmv3r90a6m2UulMwJAINcNFkJHojkf+Vc/e2U7ll19UIh+TDI0UrYT \nZxJA2S/nhIz+A6cNTX+E+yHlTbJr5xu6jxexQ7HfU1hTWYNmUg== \n-----END RSA PRIVATE KEY-----'); \n$issuer->setPrivateKey($privKey); \n$crl = new File_X509(); \n$crl->loadCRL($crl->signCRL($issuer, new File_X509())); \n$crl->revoke('111'); // optional - if ommited the whole reloading of the signed CRL is unnecessary\n$result = $crl->signCRL($issuer, $crl);\necho $crl->saveCRL($result);\n```\nSorry about the delay - I guess after my long trip I just forgot..\nAs for other people who posted in this ticket...  a couple of things.\n1. Ya'll would be better off posting new issues rather than replying to existing issues. github.com, by default, sorts by \"Newest\" - not \"Recently Updated\". So issues that have had replies can be easily missed.\n2. @santensuru - works fine with OpenSSL for me, with the caveat that with the orig code there are no revocations. eg. openssl crl -in test.txt -text gives me the following:\nCertificate Revocation List (CRL):\n       Version 2 (0x1)\n       Signature Algorithm: sha1WithRSAEncryption\n       Issuer: /O=phpseclib demo cert\n       Last Update: Jul 30 15:12:17 2015 GMT\n       Next Update: NONE\n   No Revoked Certificates.\n   Signature Algorithm: sha1WithRSAEncryption\n       04:1c:51:02:e5:01:85:c5:99:e0:f2:94:44:31:47:a9:ca:a8:\n       ad:3b:df:ac:49:23:50:87:f8:50:70:2e:5b:da:ba:4a:18:12:\n       ac:9c:bf:2d:1f:f7:fa:fe:73:df:28:f7:1f:81:0e:3d:0c:71:\n       8b:8d:82:2b:00:24:6a:ea:d7:c0:03:8b:c2:13:6c:f3:99:16:\n       c7:8d:8a:38:04:1a:61:b6:3b:87:29:d5:7a:c0:dd:68:2d:bb:\n       27:36:04:ef:2a:bb:1b:77:b8:a0:74:5e:c8:a6:c2:71:d8:38:\n       52:09:c7:52:34:20:b3:d6:48:7d:e3:58:70:d7:07:12:2f:76:\n       af:fb\n   -----BEGIN X509 CRL-----\n   MIHSMD8CAQEwCwYJKoZIhvcNAQEFMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1v\n   IGNlcnQXDTE1MDczMDE1MTIxN1owCwYJKoZIhvcNAQEFA4GBAAQcUQLlAYXFmeDy\n   lEQxR6nKqK0736xJI1CH+FBwLlvaukoYEqycvy0f9/r+c98o9x+BDj0McYuNgisA\n   JGrq18ADi8ITbPOZFseNijgEGmG2O4cp1XrA3Wgtuyc2BO8quxt3uKB0XsimwnHY\n   OFIJx1I0ILPWSH3jWHDXBxIvdq/7\n   -----END X509 CRL-----\n3. Quoting @SteveSimpson,\n\nLooking at the code, the signCRL() function calls $key->sign($this->signatureSubject). where signatureSubject is just the CA cert DN. This won't work for a CRL. From http://tools.ietf.org/html/rfc5280#section-5.1.1.1 - you will need to sign the whole tbsCertList.\n\nThat is incorrect.\nsignCRL() does $this->loadCRL($this->saveCRL($this->currentCert)); and $this->loadCRL() does $this->signatureSubject = substr($orig, $decoded[0]['content'][0]['start'], $decoded[0]['content'][0]['length']); ie. it's doing the first SEQUENCE within the first SEQUENCE, which is tbsCertList. If it were doing just the CA cert DN it'd have to be much more nested than it is.\nBut let's verify, shall we?\n``` php\n   <?php\n   include('File/X509.php');\n$x509 = new File_X509();\n$str = file_get_contents('http://phpseclib.sourceforge.net/x509/crl.bin');\n   $x509->loadCRL($str);\n$str = chunk_split(base64_encode($x509->signatureSubject), 64);\n   ```\nI dump the output to test.txt and then do openssl asn1parse -in test.txt via the CLI and get this:\n0:d=0  hl=4 l=5256 cons: SEQUENCE          \n   4:d=1  hl=2 l=   1 prim: INTEGER           :01\n   7:d=1  hl=2 l=  13 cons: SEQUENCE          \n   9:d=2  hl=2 l=   9 prim: OBJECT            :sha1WithRSAEncryption\n   20:d=2  hl=2 l=   0 prim: NULL              \n   22:d=1  hl=2 l= 105 cons: SEQUENCE          \n   24:d=2  hl=2 l=  11 cons: SET               \n   26:d=3  hl=2 l=   9 cons: SEQUENCE          \n   28:d=4  hl=2 l=   3 prim: OBJECT            :countryName\n   33:d=4  hl=2 l=   2 prim: PRINTABLESTRING   :US\n   37:d=2  hl=2 l=  21 cons: SET               \n   39:d=3  hl=2 l=  19 cons: SEQUENCE          \n   41:d=4  hl=2 l=   3 prim: OBJECT            :organizationName\n   46:d=4  hl=2 l=  12 prim: PRINTABLESTRING   :DigiCert Inc\n   60:d=2  hl=2 l=  25 cons: SET               \n   62:d=3  hl=2 l=  23 cons: SEQUENCE          \n   64:d=4  hl=2 l=   3 prim: OBJECT            :organizationalUnitName\n   69:d=4  hl=2 l=  16 prim: PRINTABLESTRING   :www.digicert.com\n   87:d=2  hl=2 l=  40 cons: SET               \n   89:d=3  hl=2 l=  38 cons: SEQUENCE          \n   91:d=4  hl=2 l=   3 prim: OBJECT            :commonName\n   96:d=4  hl=2 l=  31 prim: PRINTABLESTRING   :DigiCert High Assurance EV CA-1\n   129:d=1  hl=2 l=  13 prim: UTCTIME           :121108170051Z\n   144:d=1  hl=2 l=  13 prim: UTCTIME           :121115170000Z\n   159:d=1  hl=4 l=5047 cons: SEQUENCE          \n   163:d=2  hl=2 l=  47 cons: SEQUENCE          \n   165:d=3  hl=2 l=  16 prim: INTEGER           :016D38D1FA474F65BF2C32588C82EF8C\n   183:d=3  hl=2 l=  13 prim: UTCTIME           :101112143951Z\n   198:d=3  hl=2 l=  12 cons: SEQUENCE          \n   200:d=4  hl=2 l=  10 cons: SEQUENCE          \n   202:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   207:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   212:d=2  hl=2 l=  47 cons: SEQUENCE          \n   214:d=3  hl=2 l=  16 prim: INTEGER           :024F6E0301E5C803ADA5526B2F4E0061\n   232:d=3  hl=2 l=  13 prim: UTCTIME           :110127190501Z\n   247:d=3  hl=2 l=  12 cons: SEQUENCE          \n   249:d=4  hl=2 l=  10 cons: SEQUENCE          \n   251:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   256:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   261:d=2  hl=2 l=  47 cons: SEQUENCE          \n   263:d=3  hl=2 l=  16 prim: INTEGER           :03356327EDDD1940E48CD5ACD90E77BA\n   281:d=3  hl=2 l=  13 prim: UTCTIME           :110129085753Z\n   296:d=3  hl=2 l=  12 cons: SEQUENCE          \n   298:d=4  hl=2 l=  10 cons: SEQUENCE          \n   300:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   305:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   310:d=2  hl=2 l=  47 cons: SEQUENCE          \n   312:d=3  hl=2 l=  16 prim: INTEGER           :0B4AF0C8C5322DD1723E79D1E574AB93\n   330:d=3  hl=2 l=  13 prim: UTCTIME           :110129113311Z\n   345:d=3  hl=2 l=  12 cons: SEQUENCE          \n   347:d=4  hl=2 l=  10 cons: SEQUENCE          \n   349:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   354:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   359:d=2  hl=2 l=  47 cons: SEQUENCE          \n   361:d=3  hl=2 l=  16 prim: INTEGER           :05B45ED5EB809AC598B6E5A925ED62CA\n   379:d=3  hl=2 l=  13 prim: UTCTIME           :110304170238Z\n   394:d=3  hl=2 l=  12 cons: SEQUENCE          \n   396:d=4  hl=2 l=  10 cons: SEQUENCE          \n   398:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   403:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   408:d=2  hl=2 l=  47 cons: SEQUENCE          \n   410:d=3  hl=2 l=  16 prim: INTEGER           :0ABEEE977F81A17B44107047AC5CB500\n   428:d=3  hl=2 l=  13 prim: UTCTIME           :110507005632Z\n   443:d=3  hl=2 l=  12 cons: SEQUENCE          \n   445:d=4  hl=2 l=  10 cons: SEQUENCE          \n   447:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   452:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   457:d=2  hl=2 l=  47 cons: SEQUENCE          \n   459:d=3  hl=2 l=  16 prim: INTEGER           :05490C8D694C45CA169EF930B5F5925B\n   477:d=3  hl=2 l=  13 prim: UTCTIME           :110604071914Z\n   492:d=3  hl=2 l=  12 cons: SEQUENCE          \n   494:d=4  hl=2 l=  10 cons: SEQUENCE          \n   496:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   501:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   506:d=2  hl=2 l=  47 cons: SEQUENCE          \n   508:d=3  hl=2 l=  16 prim: INTEGER           :0899D228A3918DA538FA01D14FE5BBBC\n   526:d=3  hl=2 l=  13 prim: UTCTIME           :110616145508Z\n   541:d=3  hl=2 l=  12 cons: SEQUENCE          \n   543:d=4  hl=2 l=  10 cons: SEQUENCE          \n   545:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   550:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   555:d=2  hl=2 l=  47 cons: SEQUENCE          \n   557:d=3  hl=2 l=  16 prim: INTEGER           :0F4B741A63B20D8A9A92DADB010BD8D1\n   575:d=3  hl=2 l=  13 prim: UTCTIME           :110617050707Z\n   590:d=3  hl=2 l=  12 cons: SEQUENCE          \n   592:d=4  hl=2 l=  10 cons: SEQUENCE          \n   594:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   599:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   604:d=2  hl=2 l=  47 cons: SEQUENCE          \n   606:d=3  hl=2 l=  16 prim: INTEGER           :0C8CA4298B283B2015884FBCBC3E3E48\n   624:d=3  hl=2 l=  13 prim: UTCTIME           :110621054844Z\n   639:d=3  hl=2 l=  12 cons: SEQUENCE          \n   641:d=4  hl=2 l=  10 cons: SEQUENCE          \n   643:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   648:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   653:d=2  hl=2 l=  47 cons: SEQUENCE          \n   655:d=3  hl=2 l=  16 prim: INTEGER           :0F659CDFBA2D6F06BDBCE457685DD6F7\n   673:d=3  hl=2 l=  13 prim: UTCTIME           :110621054844Z\n   688:d=3  hl=2 l=  12 cons: SEQUENCE          \n   690:d=4  hl=2 l=  10 cons: SEQUENCE          \n   692:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   697:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   702:d=2  hl=2 l=  47 cons: SEQUENCE          \n   704:d=3  hl=2 l=  16 prim: INTEGER           :08179FC9DD86DA3C80E875D82974E977\n   722:d=3  hl=2 l=  13 prim: UTCTIME           :110624084818Z\n   737:d=3  hl=2 l=  12 cons: SEQUENCE          \n   739:d=4  hl=2 l=  10 cons: SEQUENCE          \n   741:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   746:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   751:d=2  hl=2 l=  47 cons: SEQUENCE          \n   753:d=3  hl=2 l=  16 prim: INTEGER           :063D02586B880D8C1B1FC9020551E4E2\n   771:d=3  hl=2 l=  13 prim: UTCTIME           :110625085931Z\n   786:d=3  hl=2 l=  12 cons: SEQUENCE          \n   788:d=4  hl=2 l=  10 cons: SEQUENCE          \n   790:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   795:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   800:d=2  hl=2 l=  47 cons: SEQUENCE          \n   802:d=3  hl=2 l=  16 prim: INTEGER           :083D2AECB234B066160EB30DE0E439B9\n   820:d=3  hl=2 l=  13 prim: UTCTIME           :110625085931Z\n   835:d=3  hl=2 l=  12 cons: SEQUENCE          \n   837:d=4  hl=2 l=  10 cons: SEQUENCE          \n   839:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   844:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   849:d=2  hl=2 l=  47 cons: SEQUENCE          \n   851:d=3  hl=2 l=  16 prim: INTEGER           :0B315DB59EA44562CCDB52C8E2E3DC29\n   869:d=3  hl=2 l=  13 prim: UTCTIME           :110625085931Z\n   884:d=3  hl=2 l=  12 cons: SEQUENCE          \n   886:d=4  hl=2 l=  10 cons: SEQUENCE          \n   888:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   893:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   898:d=2  hl=2 l=  47 cons: SEQUENCE          \n   900:d=3  hl=2 l=  16 prim: INTEGER           :061953B096C858F172716EC50F7B199E\n   918:d=3  hl=2 l=  13 prim: UTCTIME           :110627044023Z\n   933:d=3  hl=2 l=  12 cons: SEQUENCE          \n   935:d=4  hl=2 l=  10 cons: SEQUENCE          \n   937:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   942:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   947:d=2  hl=2 l=  47 cons: SEQUENCE          \n   949:d=3  hl=2 l=  16 prim: INTEGER           :089CA105A5180A36B92AB99300F94FE5\n   967:d=3  hl=2 l=  13 prim: UTCTIME           :110629165819Z\n   982:d=3  hl=2 l=  12 cons: SEQUENCE          \n   984:d=4  hl=2 l=  10 cons: SEQUENCE          \n   986:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   991:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   996:d=2  hl=2 l=  47 cons: SEQUENCE          \n   998:d=3  hl=2 l=  16 prim: INTEGER           :09C2466CE8FD168BFD11A919BDD9083F\n   1016:d=3  hl=2 l=  13 prim: UTCTIME           :110711101856Z\n   1031:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1033:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1035:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1040:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1045:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1047:d=3  hl=2 l=  16 prim: INTEGER           :0910D2B799CE76F2EAD3A24B5CFEAD7D\n   1065:d=3  hl=2 l=  13 prim: UTCTIME           :110711101856Z\n   1080:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1082:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1084:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1089:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1094:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1096:d=3  hl=2 l=  16 prim: INTEGER           :0466B8D7F2D259E40A5AFF81CE24B80E\n   1114:d=3  hl=2 l=  13 prim: UTCTIME           :110711101941Z\n   1129:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1131:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1133:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1138:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1143:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1145:d=3  hl=2 l=  16 prim: INTEGER           :0ADE836CF0C72FB3B59A9F90FC57A108\n   1163:d=3  hl=2 l=  13 prim: UTCTIME           :110711101941Z\n   1178:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1180:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1182:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1187:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1192:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1194:d=3  hl=2 l=  16 prim: INTEGER           :0C95CD3617CF8226FD5BDAFFA2C61AA5\n   1212:d=3  hl=2 l=  13 prim: UTCTIME           :110711102029Z\n   1227:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1229:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1231:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1236:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1241:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1243:d=3  hl=2 l=  16 prim: INTEGER           :0C0F70A89B90F89A237C6B5F7A3A7F38\n   1261:d=3  hl=2 l=  13 prim: UTCTIME           :110711102029Z\n   1276:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1278:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1280:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1285:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1290:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1292:d=3  hl=2 l=  16 prim: INTEGER           :0E19285628D3F597A7AB0A42D177E015\n   1310:d=3  hl=2 l=  13 prim: UTCTIME           :110715164735Z\n   1325:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1327:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1329:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1334:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1339:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1341:d=3  hl=2 l=  16 prim: INTEGER           :06D88EFAA8109EA52CD296706A4448A9\n   1359:d=3  hl=2 l=  13 prim: UTCTIME           :110718225517Z\n   1374:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1376:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1378:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1383:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1388:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1390:d=3  hl=2 l=  16 prim: INTEGER           :0DEC4C9CD142B75BE2C88CC96E809FB5\n   1408:d=3  hl=2 l=  13 prim: UTCTIME           :110718225529Z\n   1423:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1425:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1427:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1432:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1437:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1439:d=3  hl=2 l=  16 prim: INTEGER           :07540BD68E3BCCE6853335490D1DF9B5\n   1457:d=3  hl=2 l=  13 prim: UTCTIME           :110722072951Z\n   1472:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1474:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1476:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1481:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1486:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1488:d=3  hl=2 l=  16 prim: INTEGER           :097BF98CC09662898288E8916AA83210\n   1506:d=3  hl=2 l=  13 prim: UTCTIME           :110728105954Z\n   1521:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1523:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1525:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1530:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1535:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1537:d=3  hl=2 l=  16 prim: INTEGER           :08ECD5AD7D3C670F14C04F9D243A8177\n   1555:d=3  hl=2 l=  13 prim: UTCTIME           :110804075509Z\n   1570:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1572:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1574:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1579:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1584:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1586:d=3  hl=2 l=  16 prim: INTEGER           :0AED083704244B680A09703B2A52D036\n   1604:d=3  hl=2 l=  13 prim: UTCTIME           :110804075509Z\n   1619:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1621:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1623:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1628:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1633:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1635:d=3  hl=2 l=  16 prim: INTEGER           :0E2522AECE66BFD1C3A851D6814EF38D\n   1653:d=3  hl=2 l=  13 prim: UTCTIME           :110831110812Z\n   1668:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1670:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1672:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1677:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1682:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1684:d=3  hl=2 l=  16 prim: INTEGER           :04DE551F7DE167E44BC630160882C637\n   1702:d=3  hl=2 l=  13 prim: UTCTIME           :110831160323Z\n   1717:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1719:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1721:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1726:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1731:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1733:d=3  hl=2 l=  16 prim: INTEGER           :09132F330462BDF57D567C7FEAD21C77\n   1751:d=3  hl=2 l=  13 prim: UTCTIME           :110915021233Z\n   1766:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1768:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1770:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1775:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1780:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1782:d=3  hl=2 l=  16 prim: INTEGER           :0EFCED112149AB75F89669043AAF9A1E\n   1800:d=3  hl=2 l=  13 prim: UTCTIME           :110915143021Z\n   1815:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1817:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1819:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1824:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1829:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1831:d=3  hl=2 l=  16 prim: INTEGER           :03232C1821E77A0DD9D568A9AE9442FE\n   1849:d=3  hl=2 l=  13 prim: UTCTIME           :110919175102Z\n   1864:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1866:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1868:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1873:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1878:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1880:d=3  hl=2 l=  16 prim: INTEGER           :03DA270C2C6C530AC558F190EAB940C6\n   1898:d=3  hl=2 l=  13 prim: UTCTIME           :110921185134Z\n   1913:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1915:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1917:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1922:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1927:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1929:d=3  hl=2 l=  16 prim: INTEGER           :066EF3FFF8270E62D3A71D9BD2BFC4B3\n   1947:d=3  hl=2 l=  13 prim: UTCTIME           :110922152839Z\n   1962:d=3  hl=2 l=  12 cons: SEQUENCE          \n   1964:d=4  hl=2 l=  10 cons: SEQUENCE          \n   1966:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   1971:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   1976:d=2  hl=2 l=  47 cons: SEQUENCE          \n   1978:d=3  hl=2 l=  16 prim: INTEGER           :0206E72D6B5DC309598DF10F663391F4\n   1996:d=3  hl=2 l=  13 prim: UTCTIME           :110929184627Z\n   2011:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2013:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2015:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2020:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2025:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2027:d=3  hl=2 l=  16 prim: INTEGER           :0410C0B9BF2B53617BC822974AC3B13A\n   2045:d=3  hl=2 l=  13 prim: UTCTIME           :110929184627Z\n   2060:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2062:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2064:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2069:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2074:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2076:d=3  hl=2 l=  16 prim: INTEGER           :0B1BECB3ECBBEF6E8CE08F6D46A88E81\n   2094:d=3  hl=2 l=  13 prim: UTCTIME           :110929184627Z\n   2109:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2111:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2113:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2118:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2123:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2125:d=3  hl=2 l=  16 prim: INTEGER           :017B48F5AC09C98260829F1D283BC8B6\n   2143:d=3  hl=2 l=  13 prim: UTCTIME           :111006000342Z\n   2158:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2160:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2162:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2167:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2172:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2174:d=3  hl=2 l=  16 prim: INTEGER           :0A62E8D9FFE73C9BF2107EB87B86E33A\n   2192:d=3  hl=2 l=  13 prim: UTCTIME           :111006000342Z\n   2207:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2209:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2211:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2216:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2221:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2223:d=3  hl=2 l=  16 prim: INTEGER           :026E6A6A7F145BC3CE3231BEF56B6789\n   2241:d=3  hl=2 l=  13 prim: UTCTIME           :111014095937Z\n   2256:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2258:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2260:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2265:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2270:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2272:d=3  hl=2 l=  16 prim: INTEGER           :049DD63E35375AB7B229731F1966EB6B\n   2290:d=3  hl=2 l=  13 prim: UTCTIME           :111019145054Z\n   2305:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2307:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2309:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2314:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2319:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2321:d=3  hl=2 l=  16 prim: INTEGER           :07F86883653FAD12FD6C26760E5E4D71\n   2339:d=3  hl=2 l=  13 prim: UTCTIME           :111027174730Z\n   2354:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2356:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2358:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2363:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2368:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2370:d=3  hl=2 l=  16 prim: INTEGER           :0BDA204C14B5526D9F39648F5B251AB2\n   2388:d=3  hl=2 l=  13 prim: UTCTIME           :111029153325Z\n   2403:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2405:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2407:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2412:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2417:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2419:d=3  hl=2 l=  16 prim: INTEGER           :0884999483868E3996C4B4FCCF245E52\n   2437:d=3  hl=2 l=  13 prim: UTCTIME           :111109193911Z\n   2452:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2454:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2456:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2461:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2466:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2468:d=3  hl=2 l=  16 prim: INTEGER           :0B411A586F4B0643CDB17366121BEF06\n   2486:d=3  hl=2 l=  13 prim: UTCTIME           :111109193911Z\n   2501:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2503:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2505:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2510:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2515:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2517:d=3  hl=2 l=  16 prim: INTEGER           :06E87D64A4AE5FE4F11FE8C5734F7B8A\n   2535:d=3  hl=2 l=  13 prim: UTCTIME           :111116041757Z\n   2550:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2552:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2554:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2559:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2564:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2566:d=3  hl=2 l=  16 prim: INTEGER           :0C8A60CF8B49A0654E34D27A1BFC5CC0\n   2584:d=3  hl=2 l=  13 prim: UTCTIME           :111116153420Z\n   2599:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2601:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2603:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2608:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2613:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2615:d=3  hl=2 l=  16 prim: INTEGER           :02C3BB660A5733B7D51BABC36396B12A\n   2633:d=3  hl=2 l=  13 prim: UTCTIME           :111116185128Z\n   2648:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2650:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2652:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2657:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2662:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2664:d=3  hl=2 l=  16 prim: INTEGER           :073F5B326AFE8F2B5D29CB9CD279BE23\n   2682:d=3  hl=2 l=  13 prim: UTCTIME           :111116185128Z\n   2697:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2699:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2701:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2706:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2711:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2713:d=3  hl=2 l=  16 prim: INTEGER           :0BC3E7ECB568B4262B021B7BA6C6A6C1\n   2731:d=3  hl=2 l=  13 prim: UTCTIME           :111116185128Z\n   2746:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2748:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2750:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2755:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2760:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2762:d=3  hl=2 l=  16 prim: INTEGER           :050C47FDF9340F909B7F669D5191F961\n   2780:d=3  hl=2 l=  13 prim: UTCTIME           :111116185128Z\n   2795:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2797:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2799:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2804:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2809:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2811:d=3  hl=2 l=  16 prim: INTEGER           :0E7B13A1E37876F58AD1D2DE2FC12A8C\n   2829:d=3  hl=2 l=  13 prim: UTCTIME           :111116185128Z\n   2844:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2846:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2848:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2853:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2858:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2860:d=3  hl=2 l=  16 prim: INTEGER           :066D4192A21961573D942B43F980BD6E\n   2878:d=3  hl=2 l=  13 prim: UTCTIME           :111126152215Z\n   2893:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2895:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2897:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2902:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2907:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2909:d=3  hl=2 l=  16 prim: INTEGER           :0D3CC12A264B5E2DA3FA6405B6B081C9\n   2927:d=3  hl=2 l=  13 prim: UTCTIME           :111126152215Z\n   2942:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2944:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2946:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   2951:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   2956:d=2  hl=2 l=  47 cons: SEQUENCE          \n   2958:d=3  hl=2 l=  16 prim: INTEGER           :0399B7E59D86C9BEB7AA5DCD4C629252\n   2976:d=3  hl=2 l=  13 prim: UTCTIME           :111208101542Z\n   2991:d=3  hl=2 l=  12 cons: SEQUENCE          \n   2993:d=4  hl=2 l=  10 cons: SEQUENCE          \n   2995:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3000:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3005:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3007:d=3  hl=2 l=  16 prim: INTEGER           :089FEF6C458F3DA2F050880DD31AF9F7\n   3025:d=3  hl=2 l=  13 prim: UTCTIME           :111214203244Z\n   3040:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3042:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3044:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3049:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3054:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3056:d=3  hl=2 l=  16 prim: INTEGER           :0A53CA0DFC5EF421BF3F74329B2DDD3E\n   3074:d=3  hl=2 l=  13 prim: UTCTIME           :111220090813Z\n   3089:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3091:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3093:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3098:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3103:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3105:d=3  hl=2 l=  16 prim: INTEGER           :0DD21A228AB9A799CD42F773429FDB18\n   3123:d=3  hl=2 l=  13 prim: UTCTIME           :120107032258Z\n   3138:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3140:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3142:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3147:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3152:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3154:d=3  hl=2 l=  16 prim: INTEGER           :0B7C7A607D10A815E29272F54D36D472\n   3172:d=3  hl=2 l=  13 prim: UTCTIME           :120117062951Z\n   3187:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3189:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3191:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3196:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3201:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3203:d=3  hl=2 l=  16 prim: INTEGER           :0290679D1935F613E26A78CC795D695E\n   3221:d=3  hl=2 l=  13 prim: UTCTIME           :120117171735Z\n   3236:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3238:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3240:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3245:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3250:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3252:d=3  hl=2 l=  16 prim: INTEGER           :0B2CA756CBECF53CCEFD1D9338579A4E\n   3270:d=3  hl=2 l=  13 prim: UTCTIME           :120117171735Z\n   3285:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3287:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3289:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3294:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3299:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3301:d=3  hl=2 l=  16 prim: INTEGER           :097A09E21A7D3B4C1CB1D2362CB5634D\n   3319:d=3  hl=2 l=  13 prim: UTCTIME           :120117171735Z\n   3334:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3336:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3338:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3343:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3348:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3350:d=3  hl=2 l=  16 prim: INTEGER           :0B5B69A601B03FBC28DC1113FAEF9854\n   3368:d=3  hl=2 l=  13 prim: UTCTIME           :120117171735Z\n   3383:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3385:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3387:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3392:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3397:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3399:d=3  hl=2 l=  16 prim: INTEGER           :04FEE2B5BBBD8C5339B9CD1FAFA1D34C\n   3417:d=3  hl=2 l=  13 prim: UTCTIME           :120118165642Z\n   3432:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3434:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3436:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3441:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3446:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3448:d=3  hl=2 l=  16 prim: INTEGER           :0FDFF21581621DD42C52A01906A0A66E\n   3466:d=3  hl=2 l=  13 prim: UTCTIME           :120207121241Z\n   3481:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3483:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3485:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3490:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3495:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3497:d=3  hl=2 l=  16 prim: INTEGER           :0A7F3E341474E7AD9EE8E9CE69551AED\n   3515:d=3  hl=2 l=  13 prim: UTCTIME           :120303140150Z\n   3530:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3532:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3534:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3539:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3544:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3546:d=3  hl=2 l=  16 prim: INTEGER           :06854E329781DEAF98342D64061D5B3B\n   3564:d=3  hl=2 l=  13 prim: UTCTIME           :120303140453Z\n   3579:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3581:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3583:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3588:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3593:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3595:d=3  hl=2 l=  16 prim: INTEGER           :02B1BE098B8CCF99400C8C18ACD0FF74\n   3613:d=3  hl=2 l=  13 prim: UTCTIME           :120306102506Z\n   3628:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3630:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3632:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3637:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3642:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3644:d=3  hl=2 l=  16 prim: INTEGER           :0F1527B8AB8323905D64A4D22391C138\n   3662:d=3  hl=2 l=  13 prim: UTCTIME           :120308145352Z\n   3677:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3679:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3681:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3686:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3691:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3693:d=3  hl=2 l=  16 prim: INTEGER           :0D2DC3B0B554540759D71D268FAB150C\n   3711:d=3  hl=2 l=  13 prim: UTCTIME           :120314183540Z\n   3726:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3728:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3730:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3735:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3740:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3742:d=3  hl=2 l=  16 prim: INTEGER           :066F291898C8B8D59C5179150AC50106\n   3760:d=3  hl=2 l=  13 prim: UTCTIME           :120314183556Z\n   3775:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3777:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3779:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3784:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3789:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3791:d=3  hl=2 l=  16 prim: INTEGER           :07CF11B7F1F24AEBC39AADE769D80088\n   3809:d=3  hl=2 l=  13 prim: UTCTIME           :120314183613Z\n   3824:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3826:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3828:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3833:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3838:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3840:d=3  hl=2 l=  16 prim: INTEGER           :0A3B1BE8D7ACE605E1FAEFD7322A75C4\n   3858:d=3  hl=2 l=  13 prim: UTCTIME           :120314183651Z\n   3873:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3875:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3877:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3882:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3887:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3889:d=3  hl=2 l=  16 prim: INTEGER           :0E52A5F98072301ADDB6F35C236A78BB\n   3907:d=3  hl=2 l=  13 prim: UTCTIME           :120314183659Z\n   3922:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3924:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3926:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3931:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3936:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3938:d=3  hl=2 l=  16 prim: INTEGER           :0A1C86E9646E2812B3F19FF8D70742EF\n   3956:d=3  hl=2 l=  13 prim: UTCTIME           :120314183708Z\n   3971:d=3  hl=2 l=  12 cons: SEQUENCE          \n   3973:d=4  hl=2 l=  10 cons: SEQUENCE          \n   3975:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   3980:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   3985:d=2  hl=2 l=  47 cons: SEQUENCE          \n   3987:d=3  hl=2 l=  16 prim: INTEGER           :04869647095269C5188238EF3C07D35D\n   4005:d=3  hl=2 l=  13 prim: UTCTIME           :120315132959Z\n   4020:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4022:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4024:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4029:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4034:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4036:d=3  hl=2 l=  16 prim: INTEGER           :095F1E200F86C517C9C687E49416BF0B\n   4054:d=3  hl=2 l=  13 prim: UTCTIME           :120326144024Z\n   4069:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4071:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4073:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4078:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4083:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4085:d=3  hl=2 l=  16 prim: INTEGER           :0356D262EA7469A25FF8370277010291\n   4103:d=3  hl=2 l=  13 prim: UTCTIME           :120326144033Z\n   4118:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4120:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4122:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4127:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4132:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4134:d=3  hl=2 l=  16 prim: INTEGER           :0DC1DEDCF284A92F413F8F3F615292C7\n   4152:d=3  hl=2 l=  13 prim: UTCTIME           :120326212002Z\n   4167:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4169:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4171:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4176:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4181:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4183:d=3  hl=2 l=  16 prim: INTEGER           :0B65E80C51AA808FD6EB5F8A4D1EC0DD\n   4201:d=3  hl=2 l=  13 prim: UTCTIME           :120419091724Z\n   4216:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4218:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4220:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4225:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4230:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4232:d=3  hl=2 l=  16 prim: INTEGER           :0715053BF86CB1B5B5F1AB31F58C84BA\n   4250:d=3  hl=2 l=  13 prim: UTCTIME           :120430201621Z\n   4265:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4267:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4269:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4274:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4279:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4281:d=3  hl=2 l=  16 prim: INTEGER           :0EFFED70C23E195436433A03A3F6A325\n   4299:d=3  hl=2 l=  13 prim: UTCTIME           :120501094322Z\n   4314:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4316:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4318:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4323:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4328:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4330:d=3  hl=2 l=  16 prim: INTEGER           :02F6153767758C41DB5A719C45D07151\n   4348:d=3  hl=2 l=  13 prim: UTCTIME           :120501101116Z\n   4363:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4365:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4367:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4372:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4377:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4379:d=3  hl=2 l=  16 prim: INTEGER           :078D77110936EFCA4447A89A4E541314\n   4397:d=3  hl=2 l=  13 prim: UTCTIME           :120501101116Z\n   4412:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4414:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4416:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4421:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4426:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4428:d=3  hl=2 l=  16 prim: INTEGER           :018A07ADE9DF18AE3219807106862547\n   4446:d=3  hl=2 l=  13 prim: UTCTIME           :120501101134Z\n   4461:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4463:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4465:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4470:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4475:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4477:d=3  hl=2 l=  16 prim: INTEGER           :096CF802B0262D0F0CCECD31BFF5B416\n   4495:d=3  hl=2 l=  13 prim: UTCTIME           :120501101134Z\n   4510:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4512:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4514:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4519:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4524:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4526:d=3  hl=2 l=  16 prim: INTEGER           :0885643E0D07683F6B55BD2ADD5853B2\n   4544:d=3  hl=2 l=  13 prim: UTCTIME           :120501101155Z\n   4559:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4561:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4563:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4568:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4573:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4575:d=3  hl=2 l=  16 prim: INTEGER           :0A34EE989B07AA262491712389DAE182\n   4593:d=3  hl=2 l=  13 prim: UTCTIME           :120501101155Z\n   4608:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4610:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4612:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4617:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4622:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4624:d=3  hl=2 l=  16 prim: INTEGER           :0AEACDFF55977F485AEF3FC859580856\n   4642:d=3  hl=2 l=  13 prim: UTCTIME           :120501101155Z\n   4657:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4659:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4661:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4666:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4671:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4673:d=3  hl=2 l=  16 prim: INTEGER           :07726BDA9D03C61165A9DFB0A8CC0911\n   4691:d=3  hl=2 l=  13 prim: UTCTIME           :120501101620Z\n   4706:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4708:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4710:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4715:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4720:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4722:d=3  hl=2 l=  16 prim: INTEGER           :092DC14E0B964EE5975511B993920FF2\n   4740:d=3  hl=2 l=  13 prim: UTCTIME           :120501101653Z\n   4755:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4757:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4759:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4764:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4769:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4771:d=3  hl=2 l=  16 prim: INTEGER           :05BC83582B62293622E37ACA8BD85CC2\n   4789:d=3  hl=2 l=  13 prim: UTCTIME           :120511061002Z\n   4804:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4806:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4808:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4813:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4818:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4820:d=3  hl=2 l=  16 prim: INTEGER           :09769E503477A95C27C25A14DADD7EC3\n   4838:d=3  hl=2 l=  13 prim: UTCTIME           :120511061002Z\n   4853:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4855:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4857:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4862:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4867:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4869:d=3  hl=2 l=  16 prim: INTEGER           :0CAD55880F0D55D1B89631866772F5D5\n   4887:d=3  hl=2 l=  13 prim: UTCTIME           :120511061002Z\n   4902:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4904:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4906:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4911:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4916:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4918:d=3  hl=2 l=  16 prim: INTEGER           :01A857598ED35B3BC3FDB2E10D029645\n   4936:d=3  hl=2 l=  13 prim: UTCTIME           :120806182402Z\n   4951:d=3  hl=2 l=  12 cons: SEQUENCE          \n   4953:d=4  hl=2 l=  10 cons: SEQUENCE          \n   4955:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   4960:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   4965:d=2  hl=2 l=  47 cons: SEQUENCE          \n   4967:d=3  hl=2 l=  16 prim: INTEGER           :0AF05FF30D1582D145B7A2268D4AB593\n   4985:d=3  hl=2 l=  13 prim: UTCTIME           :120918161205Z\n   5000:d=3  hl=2 l=  12 cons: SEQUENCE          \n   5002:d=4  hl=2 l=  10 cons: SEQUENCE          \n   5004:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   5009:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   5014:d=2  hl=2 l=  47 cons: SEQUENCE          \n   5016:d=3  hl=2 l=  16 prim: INTEGER           :0DB9D0FD6095C0A19BBBD685773649C2\n   5034:d=3  hl=2 l=  13 prim: UTCTIME           :120918161205Z\n   5049:d=3  hl=2 l=  12 cons: SEQUENCE          \n   5051:d=4  hl=2 l=  10 cons: SEQUENCE          \n   5053:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   5058:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   5063:d=2  hl=2 l=  47 cons: SEQUENCE          \n   5065:d=3  hl=2 l=  16 prim: INTEGER           :0D0744B2F9A2DA1B463CE5D86B4CBE5A\n   5083:d=3  hl=2 l=  13 prim: UTCTIME           :120918161349Z\n   5098:d=3  hl=2 l=  12 cons: SEQUENCE          \n   5100:d=4  hl=2 l=  10 cons: SEQUENCE          \n   5102:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   5107:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   5112:d=2  hl=2 l=  47 cons: SEQUENCE          \n   5114:d=3  hl=2 l=  16 prim: INTEGER           :06CEA64FBD48E361ECAA5A251BFF1127\n   5132:d=3  hl=2 l=  13 prim: UTCTIME           :120918161408Z\n   5147:d=3  hl=2 l=  12 cons: SEQUENCE          \n   5149:d=4  hl=2 l=  10 cons: SEQUENCE          \n   5151:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   5156:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   5161:d=2  hl=2 l=  47 cons: SEQUENCE          \n   5163:d=3  hl=2 l=  16 prim: INTEGER           :076630616754CE9E0EBB44F520FA31CF\n   5181:d=3  hl=2 l=  13 prim: UTCTIME           :120918161408Z\n   5196:d=3  hl=2 l=  12 cons: SEQUENCE          \n   5198:d=4  hl=2 l=  10 cons: SEQUENCE          \n   5200:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Reason Code\n   5205:d=5  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:0A0100\n   5210:d=1  hl=2 l=  48 cons: cont [ 0 ]        \n   5212:d=2  hl=2 l=  46 cons: SEQUENCE          \n   5214:d=3  hl=2 l=  31 cons: SEQUENCE          \n   5216:d=4  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier\n   5221:d=4  hl=2 l=  24 prim: OCTET STRING      [HEX DUMP]:301680144C58CB25F0414F52F428C881439BA6A8A0E692E5\n   5247:d=3  hl=2 l=  11 cons: SEQUENCE          \n   5249:d=4  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Number\n   5254:d=4  hl=2 l=   4 prim: OCTET STRING      [HEX DUMP]:02020581\nThat doesn't look like a CA cert DN. In fact, it rather looks like the tbsCertList part of a CRL.\n. > so i think that need to solved by comment out $this->publicExponent = false; (i didnt understand why this needed) OR replace checks from publicExponent to just exponent\nThe reason that's done is because, technically, private keys could consist of just an exponent and a modulo. In point of fact, most don't, but there's not any technical reason why they can't. It just usually isn't done because including those extra parameters mean decryption can be sped up by using the Chinese Remainder Theorem.\nSo that's why publicExponent is set to false. Because, in so far as phpseclib knows, it could be a private key and if it was, you couldn't get the \"real\" public key from it.\nIf you want it to be treated as a public key call ->setPublicKey() after doing a ->loadKey() or something.\nIn fact, this is what File_X509 does. eg.\nhttps://github.com/phpseclib/phpseclib/blob/01bb284119d485ce6a11c32c92d7696f47e3e5a8/phpseclib/File/X509.php#L2762\n. > also lack of documentation lead to creating this issue.\nThat is indeed a problem that needs to be remedied. And it is on my todo list. And I do see how it could complicate public keys but that's just the way I designed the API.\nThat said, I can consider adding some checks where loadKey assumes it's a public key. For example, if you have a private key consisting of just the modulo and the exponent presumably the header - the -----BEGIN RSA PRIVATE KEY----- part - ought to say PRIVATE KEY. If it says -----BEGIN PUBLIC KEY----- I think it's safe to assume that it's a public key.\nI'll re-open the ticket but I probably won't be getting to this for a while, given my backlog of other stuff.\n. Can you post the full XML key that's causing you the problem instead of just posting the public (or private) exponent portion of the key?\n\nand finally something weird in parsing algo.\n\nWhat's weird about that?\n$this->current is being assigned by reference to $this->components['privateExponent']. It's also, depending on the tag name, assigned to $this->components['modulus'], $this->components['publicExponent'], etc.\nBecause it's assigned by reference _data_handler() can update $this->components['privateExponent'] (or whatever) by updating $this->current.\nOff hand, I don't recall what made !isset($this->current) and is_object($this->current) necesary.\n\nas for quick fix i suggest add check for \"XML\" tag in _stop_element_handler \nif ($name == 'RSAKEYVALUE' || $name==\"XML\") {\n\nCertainly I can do that but I'd like a better understanding of the alleged problem before proceeding.\n. I guess you edited your orig post so that the key is now showing up?\nAnyway I'm not seeing the problem? Looks like it's working fine for me?:\n```\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey('\nAJMjZKFcqk4NTFMwMOVcvk4n9LbJhGwAFX3E2g23xV8yN8Rm/+CBQOQY3/eg85I4FHj1NlwSG24incqgyCq/j4E1PKT/o5XUich/MCGndgF0oCPPDGvG9Vu3jMy4Ulcem56mPBpV5ZbLMboe0gzAv6ZvStXopusMWMQ+cBr3RdHf\nAQAB\n');\necho $rsa;\n?>\n```\n\nweird is in that control on what exactly assigned and where it put is weak - using one intermediate var for all params and using reference to real var give you less control on what is doing. which is lead to this bug\ni think better parse all xml tags into intermediate var (array) and then copy data key parts \"manually\" part by part to main key vars, but not thru callback functions of xml parser\n\nCan you post some code demo'ing what you mean?\n. The logs would also help. I've recently made changes to account for SFTP servers who's initial window size is smaller than the max packet size:\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?f=46&t=168533\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?f=46&t=168538\nWhat phpseclib is doing now to accommodate servers like that is to wait for the server to send a NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST packet once the window size has been exhausted. If the server never sends such a packet, however, phpseclib would time out.\nI had hoped no SSH server would do such things and, if an SSH server would do that, that it'd cause issues with pretty much all other SFTP clients. Maybe that's not the case. Or maybe something else is going on. Either way, it's hard to say without the log from the latest version.\nThanks!\n. You can email them to me instead of posting them publicly if that'd help! terrafrost@php.net\nAlternatively, maybe you could upload files with x null bytes?\nAlso, where are you moving to, if you don't mind my asking? You still gonna be in Austin?\n. I was actually in California about a month ago or so for about a week! San Francisco, in particular. Took the CalTrain to San Jose and then a bus to Cupertino to go to the Apple Company Store at 1 Infinite Loop!\nAnyway everything is going good. Although things would be going better if you weren't having issues with phpseclib lol.\n. Did you ever get any logs? :D\n. Sorry for the delay - I just saw that you had replied lol. Anyway are there any server logs that you can look at? If you don't post them that's okay - I'm just curious if the might give you, in particular, some ideas.\nhttp://sphinxsearch.com/forum/view.html?id=864 suggests that someone is getting an error like this by an idling connection timing out. Maybe that's what's happening for you? I've not tried it but maybe the error can be reproduced by doing something like echo $sftp->pwd(); sleep(30); echo $sftp->pwd();?\n. > Is there any progress in fixing this?\nThat assumes that it's a bug that needs fixing and I've yet to see anything that convinces me of that.\nIf, as I proposed in my last post, the OP was having the issue due to idling, then I wouldn't call it a bug. ie. echo $sftp->pwd(); sleep(30); echo $sftp->pwd();\nAnyway, to really know for sure, I'd need to see the log files. You can get them by doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after including Net/SSH2.php and then by doing $ssh->getLog() after the error happens.\nThanks!\n. Can you post logs?\nThree people have brought this up as an issue and, thus far, three people have failed to produce logs, as requested.\nYou can enable logging by adding define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after including Net/SSH2.php and by then doing echo $ssh->getLog(); after the error happens.\nBy default, if I recall correctly, phpseclib will give you the last 1MB of logs so you don't have to worry about your log file or string or whatever growing disproportionately big.\nAlso, what version of phpseclib are you using?\n. That'd be awesome - thanks!\n. I think https://github.com/terrafrost/phpseclib/commit/dbbe293e50af3c253f18e281ec6113edb5b6fef8 may fix thiis issue.\n. phpseclib sent a packet that was 2536 bytes long (excluding the bytes denoting the channel and data length) but the length packet said it was 32764 bytes long (ie. $max_size). At least in the logs I got from adamjimenez.\nSo when $max_size is less than the data being sent and has to be adjusted by a new window adjust message from the server and the adjustment makes $max_Size bigger than the data being sent over problems arise.\nSSH's window size has caused issues before. Overall I don't think the SSH specs really explain the window size very well. I opened up an errata on SSH's RFC a while back about the issue.\n. @bantu - should I create a new branch with a different commit message?\n. See https://github.com/terrafrost/phpseclib/tree/ssh-channel-fix-2\n. A couple things.\nFirst, I don't imagine this feature is widely used so I don't have a problem changing this behavior.\nSecond, that said, I think this is extremely overblown. To address the concerns in-line...\n\nThis behaviour of splitting up large messages (quite silently to boot) is not secure (I think, crypto is not area of expertise, though the code seems to be doing exactly what that stackoverflow discussion specifies not to do).\n\nNeither is it secure for setKey() to null pad keys to the appropriate length. Throwing an error when setKey() is called with a key of an insufficient link would arguably be better. phpseclib has already received some criticism for this. But you know what? mcrypt does it (this particular behavior is inspired by mcrypt) and so does OpenSSL.\nQuoting mcrypt_decrypt: \n\nThe key with which the data was encrypted. If it's smaller than the required keysize, it is padded with '\\0'.\n\nOpenSSL does the same thing. I don't see anything about this behavior in their documentation but phpseclib: OpenSSL Interoperability demonstrates that it does.\nSo silent failure in crypto libraries is not without precedent.\nAs for the issue you raise in this particular bug report...  for one...  believe it or not it isn't a security issue.\nConsider the normal operation of RSA. You encrypt a randomly generated key to a symmetric cipher with a public key and then you encrypt the rest of your message with that symmetric cipher.\nBut what if you want to send a second message? Do you create a whole new RSA key? No. You re-use your RSA key to encrypt a new randomly generated key.\nSo as that demonstrates right there encrypting something multiple times with the same RSA private key is not insecure.\nAs for the stackoverflow post you linked to...\nThe problem with ECB mode is that if two blocks of plaintext are the same the corresponding ciphertext blocks are the same as well. But real-world RSA (ie. the kind phpseclib uses) uses randomized padding (PKCS1 or OAEP). Encrypt the string 'aaa' twice with the same public key and you get different ciphertext's. So it's not like ECB at all.\nSee owlstead's comments.\nAs for replay attacks and chosen-plaintext attacks...  replay attacks are only a problem with how an encryption algorithm is used. Really, it's up to a protocol to prevent replay attacks - not encryption algorithms. And chosen-plaintext attacks...  that's an issue with ECB but as I've already explained what Crypt_RSA does is not that comparable to ECB.\n. > It is also sort of surprising behaviour - I don't know of any other crypto library that does this.\nSo? I don't know if any SFTP library that does logging like phpseclib does either. Doesn't mean that phpseclib should just drop that feature.\n\nThe more common course of action is to throw an exception.\n\nFair enough. Although phpseclib, being PHP4 compatible, can't throw exceptions. It could return false and do user_error or some combination there-of. However, in my mind, the current behavior is sufficient, as well.\n\nCertainly lead to some surprising behaviour trying to work between phpseclib and other libraries that should in theory have been exactly equivalent.\n\nYou shouldn't pass bad input into the functions to begin with. Obviously, how correct input is handled ought to be the same. It is unreasonable to expect all implementations to behave the same with incorrect input.\nRFC's regulate what output correct input produces. Nothing regulates what output incorrect input produces. That's up to the implementer I figure.\n\ncode relying on it very probably contains a security vulnerability\n\nMaybe so but it's unlikely that vulnerability is due to their use of phpseclib.\nLong story short, I don't have a problem changing the behavior, but the reasons that have been presented for doing so are largely bogus and the criticisms that have been presented unfounded.\n. I've been working on the documentation a good amount, as of late, as can be seen here:\nhttps://github.com/phpseclib/docs/commits/master\nThe specific thing you asked about - CRL generation - is something I'm holding off on documenting because I'm thinking the API for that would benefit from a change.\nLike with signCSR() you don't do signCSR($issuer, $subject).. you just do signCSR(). I'm thinking signCRL() ought to behave similarly and until it does (or until I've researched the matter more and decided it shouldn't) I'm going to refrain from documenting it.\nUnfortunately, I don't see me making that change anytime soon. Have lots of stuff left to do on the documentation and then after this I have some other personal projects I want to spend my time on and then I'll come back and revisit this.\n. Good point about the clock skew. I'll update the docs to reflect that.\nkeyUsage can kinda be set via makeCA() but to set additional key usage above and beyond that you pretty much have to re-sign a cert. Cert re-signing is a cool feature but that gives phpseclib a lot of versatility but for most people that's just an extra - and unnecessary - step imho.\n. I can do that. Have a good amount of documentation stuff I want to do in the mean-time, however, so it may be a while idk.\nOther things I have planned for the documentation: update the SFTP stuff, do some SEO stuff on it, discuss how phpseclib compares to libssh2 and openssl (and for libssh2 benchmark it in a more reproducible way), etc.\n. No problem. It's a good reminder that I need to replace it :)\n. I think the latest git version should fix this if you want to try it out. Thanks!\n. The latest commit should fix this - thanks!\n. https://github.com/phpseclib/phpseclib/tree/f16a1135c6cd3dc38bc4d44933f5b898eea12d5c should fix this. Thanks!\n. The latest commit should fix this if you want to test:\nhttps://github.com/phpseclib/phpseclib/commit/bafbf1276ef96d352ffe8fae16b22b595bbbf3a4\nI departed from your suggested edits because I don't like the idea of doing a filesize when the file doesn't exist. Since the code to check the files existence is already present I moved it around a bit so now the @ operator should be unnecessary.\n. I have yet to take a look at those issues. Will do so as time permits.\n. I made SCP.php use code more similar to what SFTP.php is using.\nAmong other things, the file should be split into chunks even if it's a string that's being uploaded.\nThanks for the heads up!\n. This doesn't happen on my machine when I upload a local file. At least not when using the latest Git version. Could you out of curiosity get me the SSH logs? ie. do define('NET_SSH2_LOGGING', 3);\nThanks!\n. It's not doing that for me :(\nI uploaded a 2048 byte long file of all x's (uploaded it from a string and from a file) and it was the exact same size on the server. And the last few bytes seemed correct as well:\nxxd -p abcd2 | tail -c 5\nW.r.t. FISH...  I've not even heard of it lol. It's something I could certainly do. Let's do a new ticket for that though like bantu suggested :)\n. I'm leaning towards not doing that actually. Net_SFTP doesn't do that for one and it's never posed any problems there. Net_SFTP does truncate downloaded material if you've explicitly told it the size it should be but if you didn't tell it the size it doesn't truncate it to match the reported file size.\nAmong other things does scp lock files? If not then it's possible the initially reported file size could change if it was being modified as you were downloading it idk.\nAlso, if download files were larger when downloaded than they were on the server it might be good to know. idk that throwing an error is justified but idk that trimming it to the reported length is the best approach either..\n. Quoting my earlier post:\n\nI'm leaning towards not doing that actually. Net_SFTP doesn't do that for one and it's never posed any problems there. Net_SFTP does truncate downloaded material if you've explicitly told it the size it should be but if you didn't tell it the size it doesn't truncate it to match the reported file size.\n\nHiding problems with quick hacks that don't address the core of the problem makes identifying the core of the problem (let alone the fact that there is a problem) that much more difficult.\n. > We are experiencing the same issue. Reading through this issue it seems like there is a possible fix for it that won't get implemented? Although I can't say I completely understand the reasoning why it won't.\nQuoting an earlier post:\n\nI'm leaning towards not doing that actually. Net_SFTP doesn't do that for one and it's never posed any problems there. Net_SFTP does truncate downloaded material if you've explicitly told it the size it should be but if you didn't tell it the size it doesn't truncate it to match the reported file size.\nAmong other things does scp lock files? If not then it's possible the initially reported file size could change if it was being modified as you were downloading it idk.\nAlso, if download files were larger when downloaded than they were on the server it might be good to know. idk that throwing an error is justified but idk that trimming it to the reported length is the best approach either..\n\nAlso,\n\nHiding problems with quick hacks that don't address the core of the problem makes identifying the core of the problem (let alone the fact that there is a problem) that much more difficult.. > Is there a plan of attack?\n\nNo. It's just not a priority. I'm not planning on including SCP in the next version of phpseclib but I'm also not going to spend a significant amount of time to figure this out when there are much more important and useful features that phpseclib is in bad need of (I've been working on ECDSA / EdDSA support for phpseclib for a while and I'd rank that as a whole heck of a lot more important than this).\nI mean, if you can give me SSH access to a server that reliably reproduces the problem that would probably help (you could email the auth info to terrafrost@php.net). But that, in and of itself, may not be sufficient. And even with that it's not going to be my priority. I might very well take a look this weekend if I get the itch to do so but my priorities are my priorities and I'm not prepared to change them.. ``` php\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$private=\"\nAKoYq6Q7UN7vOFmPr4fSq2NORXHBMKm8p7h4JnQU+quLRxvYll9cn8OBhIXq9SnCYkbzBVBkqN4ZyMM4vlSWy66wWdwLNYFDtEo1RJ6yZBExIaRVvX/eP6yRnpS1b7m7T2Uc2yPq1DnWzVI+sIGR51s1/ROnQZswkPJHh71PThln\nAQAB\nAN4DDp+IhBca6QEjh4xlm3iexzLajXYrJid6vdWmh4T42nar5nem8Ax39o3ND9b1Zoj41F9zFQmuZ8/AgabreKU=\nAMQi+R0G9m0K+AcqK3DFpv4RD9jGc0Tle98heNYT7EQvZuuiq4XjvRz0ybqN//bOafrKhsTpRS9DQ7eEpKLI4Bs=\nFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5kX6zk7S0ljKtt2jny2+00VsBerQ==\nAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2eplU9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhM=\nEaiK5KhKNp9SFXuLVwQalvzyHk0FhnNZcZnfuwnlCxb6wnKg117fEfy91eHNTt5PzYPpf+xzD1FnP7/qsIninQ==\nFijko56+qGyN8M0RVyaRAXz++xTqHBLh3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxE=\n\";    // private key paste here\n$public=\"\nAKoYq6Q7UN7vOFmPr4fSq2NORXHBMKm8p7h4JnQU+quLRxvYll9cn8OBhIXq9SnCYkbzBVBkqN4ZyMM4vlSWy66wWdwLNYFDtEo1RJ6yZBExIaRVvX/eP6yRnpS1b7m7T2Uc2yPq1DnWzVI+sIGR51s1/ROnQZswkPJHh71PThln\nAQAB\n\";    // public key paste here\n$rsa->loadKey($public, CRYPT_RSA_PRIVATE_FORMAT_XML);\n$plaintext = 'Hello, World';\n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$ciphertext = base64_encode($rsa->encrypt($plaintext));\n//echo $ciphertext;\n$rsa->loadKey($private, CRYPT_RSA_PRIVATE_FORMAT_XML);\necho $rsa->decrypt(base64_decode($ciphertext));\n```\nWorks fine for me using the latest Git version. I'm pretty sure the following commit from three months ago fixed this issue:\nhttps://github.com/phpseclib/phpseclib/commit/4de71168d8b647cdc8165f44d4c86f8c053bbd8f\n. I tried it with CRYPT_RSA_MODE_OPENSSL and CRYPT_RSA_MODE_INTERNAL with MATH_BIGINTEGER_MODE as MATH_BIGINTEGER_MODE_GMP, MATH_BIGINTEGER_MODE_BCMATH and MATH_BIGINTEGER_MODE_INTERNAL with PHP 5.3.27 and it worked in all cases.\nDoesn't look like I can download 5.3.10 that easily, any more, for Windows. The earliest version available for download on 5.3.14 is as follows:\nhttp://www.php.net/releases/\nhttp://museum.php.net/php5/ doesn't have any 5.3 binaries for Windows either and I don't really feel like trying to compile PHP 5.3.10 on VirtualBox in the off chance that it's an issue specific to that version. Maybe you can try out different versions. Is it an issue on 5.3.27 for you? What about PHP 5.5, etc?\nAre you using the latest Git version? If not could you also provide me with SSH access? Maybe email terrafrost@php.net or something?\nAdditionally, maybe post your phpinfo()?\n. Sorry for the delay. Anyway, I think it might work with the latest commit? If you could test and let me know that'd be great.\nThanks!\n. Try doing this:\nset_include_path(get_include_path() . PATH_SEPARATOR . './phpseclib/');\nThe docs say you need to use the include_path.\nThe fact that no one should have to figure out and manually include each of the pre-requisite files not withstanding, phpseclib, as of committ # https://github.com/phpseclib/phpseclib/commit/adf8afd4eb7566615decfc65892266d21f49612c , dynamically builds the list of supported ciphers off of the the cipher classes it can find in the Crypt/ directory. So if you want phpseclib to use AES vs. RC4 or any of the other ciphers just include Crypt/AES.php and nothing else.\nI suppose I could do class_exists('Crypt_AES') as well, to accommodate people doing what you're doing, but then again, in my mind, people shouldn't be doing what you're doing either. People should be using the include_path.\n. The latest commit should fix this. Thanks!\n. Doesn't look like there are any unit tests for Crypt_RSA. Just Crypt_Hash / Crypt_AES. Feel free to commit some!\nAnyway, try it now!\n. 1. Get me the logs.\n2. I think you said earlier that you're using Bitvise WinSSHd? Is that a paid for product? Being able to reproduce the problem myself might help and in lieu of buying it maybe you could provide me direct access to your SFTP server? You can email me the auth info if you're so inclined. terrafrost@php.net.\n. Sorry for the delay.\nAnyway I'm somewhat able to reproduce the problem. I installed bitvise WinSSHd and tried to do the following:\n$str = '';\nfor ($i = 0; $i < 255; $i++) {\n    $str.= chr($i);\n}\n$scp->put('scp2.test2', str_repeat($str, 1024 / 256 * 1024));\nWith realtime logging (the kind I'm assuming you did?) it uploaded the whole thing whereas with complex logging it didn't. Unlike in your case, however, it did upload some of the file - just not all of it. It's like it got to a certain point and then just...  stopped. I verified this by loading both files up in PHP and comparing the strings. The partially uploaded file is pretty much the fully uploaded file minus the trailing bytes. So phpseclib continued to send but the server stopped writing to the file after it got to a certain point.\nHere's a breakdown of the realtime logs:\n->\n<- NET_SSH2_MSG_KEXINIT (since last: 0.7501, network: 0.001s)\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0718, network: 0s)\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.01, network: 0s)\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.224, network: 0.2228s)\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0066, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0299, network: 0.0001s)\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0006, network: 0.0002s)\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0004, network: 0s)\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.4001, network: 0.3995s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0005, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0381, network: 0.0377s)\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0005, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.328, network: 0.3274s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0209, network: 0.0207s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0183, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.001, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0022, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5978, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0031, network: 0.0016s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5844, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0024, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6673, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0002s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.5816, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0021, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5526, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0024, network: 0.0003s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.6111, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0023, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6744, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0025, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6563, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0018, network: 0.0002s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6415, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6105, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0018, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6721, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6317, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5432, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0018, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6957, network: 0.0007s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0026, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.6764, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0002s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5705, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0003, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.094, network: 0.0939s)\n-> NET_SSH2_MSG_DISCONNECT (since last: 0.0003, network: 0s)\nNote how seemingly every other packet has a half second \"since last\". The complex logs don't do this:\n<-\n->\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0467, network: 0.0003s)\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0055, network: 0s)\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0045, network: 0s)\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.003, network: 0.0029s)\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0013, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0395, network: 0.0001s)\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0004, network: 0.0004s)\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0194, network: 0.0193s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0005, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0003, network: 0.0003s\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.097, network: 0.0969s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0011, network: 0.001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0007, network: 0.0007s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0016, network: 0.0002s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0023, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0018, network: 0.0006s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0005s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0016, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0014, network: 0.0002s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0016, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0008s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0015, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0024, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0015, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0016, network: 0.0002s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0003s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.002, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0015, network: 0.0015s)\nThere are no half second \"since lasts\" with this one. The half second \"since lasts\" always take place after a big packet has been sent or received. ie. I guess it takes half a second for one of the big packets to be output on the screen.\nSo assuming you were doing real time logging that's probably why it worked for you.\nBasically, I think phpseclib is uploading faster than the server can handle. It's probably only a problem if you're pipe is big. I'm uploading to localhost myself so my pipe is as big as it gets. If I was uploading to an external server at my apartment it'd probably go through because my upload is capped at 50kbps.\nThis isn't a problem for SFTP because SFTP sends a receipt confirmation after every packet you send. So if the server hasn't processed your packet you don't get your receipt confirmation. You can queue these up but only to a point (phpseclib queue's 50 at a time).\nI want to see what PuTTY's pscp does. I don't like the idea of putting in a sleep in there. I'll think on it.\n. So as an update...  I'm still not able to reproduce the \"NET_SCP uploads zero bytes\" issue. What happens to me is that Net_SCP uploads the entire file minus 32kb. When the file is only partially uploaded it's always exactly 32kb less than it should be. It's intermittent though even without realtime logging. So I'm really at a loss atm :(\nIf I can't figure this out the next release will simply not include Net/SCP.php. Meh.\n. https://github.com/phpseclib/phpseclib/pull/209\nThat might fix this issue. At the very least it fixes the issue I described. Maybe the issues other people described are unrelated but if so it'd be good to know that too.\n. Well I guess I'm going to go ahead and close this. I believe #209 fixes this but if not someone can create a new issue.\n. So just FYI I am working on this. Hopefully I'll have something to commit later today or tomorrow or something.\nThanks!\n. Sorry for the delay.\nAnyway, the latest commit should now do this. eg.\n$subject->setIPAddress('127.0.0.1', '127.0.0.3');\n$subject->setDomain('127.0.0.1', '127.0.0.3');\nMy own testing confirms what you said about IE / Chrome needing the IP address in the domain name. Firefox seems to require it on the IP Address. Rather than having phpseclib worry about trying to make it all cross platform compliant I'm thinking that that's something that should be left open to the person creating the cert. I mean, if we go down that route, should phpseclib worry about compatibility with, for example, IE5, or is that something that should be left in the users hands? I'm thinking the latter.\nNone-the-less, the ability to do IP addresses has been added.\nThanks!\n. $special is defined in the function definition for File_ASN1::asn1map:\nphp\n    function asn1map($decoded, $mapping, $special = array())\nIt's only set in one place - when X.509 certs are being encoded. More specifically for extensions:\nphp\n$mapped = $asn1->asn1map($decoded[0], $map, array('iPAddress' => array($this, '_decodeIP')));\nSo $special[$idx] is set to array($this, '_decodeIP'). Which is defined thusly in File_X509:\nphp\n    function _decodeIP($ip)\n    {\n        $ip = base64_decode($ip);\n        list(, $ip) = unpack('N', $ip);\n        return long2ip($ip);\n    }\nSo when your PHP installation says \"Function name must be a string\"...  it's correct in that the function name is not a string. In testing it against various different versions...\nhttp://sandbox.onlinephpfunctions.com/code/b845192115f90cbb74d14b37470632d391931fd2\nI guess it only started working in PHP 5.4. It doesn't work in PHP 5.3 or earlier.\nAnyway, using call_user_func() seems to fix it for me and I just made a commit that I believe should fix it if you want to try it out.\n. Submit a pull request to https://github.com/phpseclib/phpseclib-php5\nThat repo wasn't just created to look pretty (although I do need to merge it with this repo at some point).\n. This change fixed a bug\nWhat was the bug this change fixed?\n. It appears that Crypt_RSA::loadKey() no longer works with the default return value from File_X509::getPublicKey(), which apparently returns an entire Crypt_RSA object (I didn't realize this before var_export'ing it, since whenever I echo'd the output I'd get a nice PEM formatted key).\nYou get a PEM formatted key when you echo it because of the __toString() magic function. The idea behind returning the object is that the key can also be a DSA or ECDSA key. But you're right - making it so loadKey() can take in a Crypt_RSA object isn't a bad idea, specifically for the use case you're describing.\nvar_export of the return from getPublicKey doesn't seem to have anything set in the exponent / etc, so I'm not sure if that is due to a limitation of var_export or if the returned object is malformed\nThat doesn't happen for me.\nhttp://pastebin.com/fYy28ZuE\nexponent is defined, as an index, but exponents is not. Maybe you're mixing the two up? exponents contains the Chinese Remainder Theorems used to speed up private key operations.\nThe workaround I have implemented is to cast the return value to string which gets the same output as echo would, and then passing the string into loadKey works as expected / as before:\nYou could also do $subject->getPublicKey()->getPublicKey() fwiw.\nThis 'broke' (maybe it was 'fixed' and I've been doing it wrong the whole time) sometime between whichever version I committed into our repo (I didn't submodule it originally) and latest commit. I don't know for sure what commit I was using originally but it had to be before 2013/09/18 as that's when I committed the phpseclib version I had locally.\ngetPublicKey has returned an object pretty much since it's inception:\nhttps://github.com/phpseclib/phpseclib/commit/da8614a5113804eb9987325accdb26142455cbcd\n. Sorry for the delay. Anyway, loadKey() should now take in Crypt_RSA objects as of this commit:\nhttps://github.com/phpseclib/phpseclib/commit/1e3ff81e7d1978e87aefee604e9da0f8169a0020\n. I'm not sure how one would do that, aside from creating a whole new repo?\n. SSH_Agent is in System - not File. And I think it kinda makes sense in System as it's a system-specific enhancement.\nIn any event, changing the PEAR layout would break BC. I'm not as concerned about BC in the php5 branch but even then, renaming all the files pretty much prevent all future merges, which would make life a lot more difficult.. unless you could tell git that the renamed file in one branch is another file in another branch?\n. 1726 is kinda intentional. There may be cases where Montomery reduction is faster than the modified Barrett reduction that's currently being employed. Rather than deleting the code I've just left it, after the return for the Barrett reduction, in case I ever decide to further expand upon it. I could comment it out, I suppose, and say \"this is an alternative implementation, YMMV\" but doing a premature return serves the same purpose imho.\n2298 is the same thing. It's an alternative implementation. At the time I implemented it I expected it to be faster than the implementation that I wound up using but it doesn't seem to be. Maybe at some point I might go back and revisit idk. I could comment it out but the premature return works too imho.\n. Net_SFTP::put() doesn't have a $callback parameter but, then again, with SFTP, you actually can upload stuff in distinct operations, whereas with SCP, it's pretty much all or none.\nAside from that the only thought I have is...  for consistency with Net_SSH2::exec() it'd be better if the default value for $callback was NULL with all caps instead of null with lower caps. It's just a cosmetic superficial thing though lol.\nAnyway, I've merged the pull request - thanks for the contribution :)\n. Probably not anytime soon.\n0.3.5 was the first release that contained SCP.php so that it contains issues, although unfortunate, is probably to be expected.\n. CRYPT_RANDOM_IS_WINDOWS is about as dynamic as PHP_OS. ie. PHP_OS doesn't change during PHP's execution but it can be different values for different systems.\nAnd in any event this error confuses me a bit. How is this constant otherwise being defined? If Crypt/Random.php were being included twice there'd be a \"Fatal error: Cannot redeclare test()\" error. Do we need to do a !defined() check for every constant in every file? Why not Net/SSH2.php and Net/SFTP.php?\nHonestly, it seems to me that what's going on is that someone is choosing to define CRYPT_RANDOM_IS_WINDOWS themselves before including Crypt/Random.php. And imho if they do that that's their problem - not phpseclib's. Like if someone tries to do define('PHP_OS', 'whatever') they'll get an E_NOTICE. Are you gonna go file a bug report on PHP because doing that results in an E_NOTICE or are you gonna say the person who did that define() is the one at fault? I'm thinking the latter.\nI'll reply to the other tickets later as time permits. I am on the clock right now at work. Also, since my apartment was flooded and is in the process of having the damages repaired and I'm free-loading off of friends in the mean time for having a place to stay there's a good chance it could be a while unfortunately.\n. Yah - I'm thinking we should revert. I don't want to make a commit that might fix a problem isn't well understood in the first place - I'd prefer a commit that fixes a well understood problem.\nThe !defined() check shouldn't be necessary and if it's causing problems...  I want to know what specifically is causing these issues. Without a better understanding of the issue this patch feels like a band-aid solution and I don't like band-aid solutions. Among other things, band-aid solutions make finding real solutions more difficult imho because someone could go \"well if that's the problem then shouldn't be a problem here as well? oh wait - band-aid code is fixing the problem over there\".\n. See my thoughts at https://github.com/phpseclib/phpseclib-php5/issues/1#issuecomment-27917887 . Rather than merge the phpseclib-php5 repo with this one do you want to do a new commit for this new branch with support for Exceptions?\n. Instead of doing stuff like PhpSecLib/SSH2 I think you should do PhpSecLib/Net/SSH2. I think that's more in-line with the PEAR CS that phpseclib is currently using.\n. This has been merged into a new php5 branch that is in the main phpseclib repo. And you're right - the namespaces are already PhpSecLib\\Net\\SSH2 - sorry about not noticing that before.\nWant to work on exceptions next?\n. I've deleted the branch and re-opened the ticket.\n. In 0.3.5 Crypt_AES extends Crypt_Rijndael and it's in Crypt_Rijndael that setPassword() is defined:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.5/phpseclib/Crypt/Rijndael.php\n. I intentionally left it undefined so people could pick and chose the filename. With this patch people can no longer change it because, unless you're using some funky extensions, you can't change a definition once it's been created.\nMaybe in _append_log or where-ever it could default to a certain filename, I guess, if the NET_SSH2_LOG_REALTIME_FILENAME constant hasn't yet been defined. Although, personally, I think doing a user_error() in that event would be better - not silently defaulting to an unclear filename.\n. Could you maybe submit a pull request with your latest idea? I guess I'll go ahead and close this and merge your new pull request depending on how it looks.\nThanks!\n. This can be done for the php5 branch. I'll try to create that later today.\nThat said, why stop at Net/SSH2.php? That's not the only file in phpseclib ya know ;)\n. Oh - also, class_exists was added specifically so an autoloader would be called. If all you're wanting to do is make sure the class isn't defined multiple times you don't need class_exists as require_once is perfectly sufficient:\nhttps://github.com/phpseclib/phpseclib/pull/5\n. @PVince81 - fopen() can indeed only be called once per instance. This is one of the reasons I made this PHP5-only. So the static keyword could be used, because reinitializing an SSH connection every time you want to do something like stat() or filesize() or something and then fopen() could really slow things down.\n@bantu - open() must indeed be called before eof(). Quoting the docs for feof(), \"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen()\".\nSo, really, either would work.\nAnyway nice find!\n. I am totally indifferent about this lol. I did this because the PEAR package(s) I used as a template for this one had them but not all PEAR packages have them so...  I'm quite indifferent. I'll let others chime in if they're so inclined.\n. I didn't mean to close this..\n. I don't know how to re-open this either :(\n. Can we get a hook for these? I'm on another computer atm and although I can click the merge button via the github.com website easily enough I can't really do git commands via the website.\n. Can't the hook be made to give some sort of warning when there'd be a conflict and maybe deny the commit all together? idk a ton about git hooks..\n. So if I do a release every month do I have to release it on sourceforge.net too as \"Nov2013-release\" or something every month as well? Do I do the freshmeat.net updates, update the PEAR channel, etc?\nMeaning no disrespect but I'm not a release manager - I'm a developer. Time spent managing releases is time that I don't spend developing and I don't feel I get enough dev time as is. Pursuant to that I'd just assume minimize the time making new releases and doing one every month doesn't exactly do that.\nThe Symfony community has a lot more contributors than the phpseclib community does so they can kinda afford to get more bogged down in procedures like that than phpseclib can imho.\nMaybe this is something that can be done in the future but atm I just don't feel this is that practical.\n. Tags ought to mean something imho. Presumably a stable version has been more vetted than a dev version. Better packaged, etc, idk. Otherwise, why not just create a new stable tag after every commit?\nIf a new tag is supposed to confer any sort of meaning above and beyond a random commit then it should take longer.\n. Maybe we could have a bot that logs the chats and posts them online or something?\n. Yes - merge it.\n. Ugh. After merging this via github.com I remembered how bantu was wanting everything merged with the php5 branch at the same time. Which requires a git CLI client which, atm, I do not have access to.\n. I like it. I guess I'm a bit surprised that we currently follow all the standards though lol. I mean, I try, but I could see me making mistakes from time to time..\n. It'd be cool to validate against the PEAR ruleset better than we do. I mean maybe in some cases we wouldn't want to, idk, but I didn't see any exceptions in the list you produced. Well, save for the warnings. I don't really care too much about line length. But for stuff like the @tag's not being indented correctly...  although it's not exactly a priority for me I think it'd be nice if it was done correctly (since I guess it isn't)...\n. @bantu - I definitely think shorter lines are better - and maybe it's something for which pull requests can be made - but I could forsee there being instances where it wouldn't make a ton of sense. I mean maybe there aren't - I can't come up with any scenarios off hand where it'd be desirable but idk...  I think the actual error's ought to be addressed  first, before the warnings. So if we were to go the PEAR CS CodeSniffer route we could suppress warnings until all the errors were dealt with and then we could unsuppress the warnings or something.\n. @mpscholten - there's PHP_Beautifier but after having used it (and even creating a filter for it at https://github.com/clbustos/PHP_Beautifier/blob/master/Beautifier/Filter/phpBB.filter.php )...  I just don't think it works that great (although I now no longer remember why).\nAnd even if you used an IDE to auto limit the line length human review should still be performed imho. Same thing for the indentation. You don't want to do just every line, which can be done with vim easily enough - you only want to do certain lines.\nAnyway, if you want to use a tool to automate it, feel free to do so and submit a pull request and I'll review it. My expectation is that I'd find issues but feel free to prove me wrong!\n. Looks good..\n. I'd probably have phrased it a bit differently, without the \"we\" and what not, but that's just semantics lol. Otherwise looks good. Feel free to merge to master.\n. That works. Honestly I would have merged it as is lol but if you want to change it up too I'm okay with that too lol\n. No. There may be exceptions but a lot of the stuff in bantu's github gist aren't exceptions. They're either (1) oversights on phpseclib's part or (2) bugs in the code evaluator.\nBesides, it's doubtful many PEAR packages are 100% error / warning free. A trivial example. Math/BigInteger. That's in PEAR. And look at all the exceptions there are in that file. So that's at least one PEAR library that doesn't 100% follow the PEAR CS even though it's in PEAR. And that's not because it was intentionally written that way but just because oversights were made.\nIn your other commit you added the public keyword before all class variables and functions. If that is a part of the PEAR standards as outlined at http://pear.php.net/manual/en/standards.php please show me the link.\nI'm not going to say there are exceptions but the fact that we're not 100% compliant as is does not mean there are exceptions. It just means that we're not 100% compliant.\n. I agree with salmonila. I'll need to spin up a VM with phpDoc installed to test these changes out if a copy of the phpDoc output isn't provided and that'll slow the time with which this PR gets merged down by a good amount.\n. Yah - a git hook would be cool.\n. I can do that for the time being, however, I don't think that's a very good long term approach. In lieu of a hook to auto merge I have to say I'm becoming more in favor of periodic optional merges and mandatory merges at release time. Conflict resolution would be more of a PITA but I think it'd still be manageable.\n. Here's what I'd do:\nphp\n$subject->setDNProp('id-at-countryName', 'US');\n$subject->setDNProp('id-at-stateOrProvinceName', 'CA');\n$subject->setDNProp('id-at-localityName', 'Acme Acres');\n$subject->setDNProp('id-at-organizationName', 'Acme');\n$subject->setDNProp('id-at-organizationalUnitName', '');\n$subject->setDNProp('id-at-commonName', 'bugs');\n$subject->setDNProp('id-at-name', 'Acme-CA');\n$subject->setDNProp('id-emailAddress', 'roadrunner@acmecorp.org');\nWhat you're doing would need to be done with $subject->setDN() - not $subject->setDNProp(). And even then the input format would have to be changed slightly. eg.\nphp\n$subject->setDN(\n    array('rdnSequence' => \n        array(\n            array(\n                array(\n                    'type'  => 'id-at-countryName',\n                    'value' => 'US'\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-commonName',\n                    'value' => 'bugs'\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-name',\n                    'value' => 'Acme-CA'\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-organizationName',\n                    'value' => 'Acme'\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-organizationalUnitName',\n                    'value' => ''\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-stateOrProvinceName',\n                    'value' => ''\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-localityName',\n                    'value' => 'Acme Acres'\n                )\n            ),\n            array(\n                array(\n                    'type'  => 'id-at-emailAddress',\n                    'value' => 'roadrunner@acmecorp.org'\n                )\n            )\n        )\n    )\n);\nReally, I think the $subject->setDNProp() approach is easier. Less parenthesis to have to keep track of, shorter, etc.\nAlso,\n\nAlso, in the example here http://phpseclib.sourceforge.net/x509/guide.html#casigned you set both the serial numbers for the CA and the Server Cert as 1 - is that right, or should the CA be 1 and the Server Cert as 2?\n\nThe serial number isn't being explicitly in that code but it defaults to 0 currently.\n\nWould I be wrong to use the timestamp as a serial number?\n\nYup - that should be fine!\n\nLastly, how would I generate a CRL using this lot?\n\nSee this:\nhttp://phpseclib.sourceforge.net/x509/compare.html#createcrl\n. Looks good..\n. Per my in-line comment I'm going to close this pull request without merging it. Resubmit it without the public's. That'll make it shorter and easier to review.\nEverything else I saw looked okay but, for stuff like this...  run it against the PEAR CS and post the result. The new pull request should result in less warnings / errors than the current version. eg. less than this:\nhttps://github.com/phpseclib/phpseclib/pull/189#issuecomment-29322065\n. > Because of the public-keyword we cannot put this in the master, but if requested I'll try to get this ready for master too.\nI didn't see that comment in your pull request lol.\nAnyway, I think we should get this in master. And I think the public-keyword should be removed. I don't think it really adds anything anyway except for potential conflicts.\nAll in all, I still think this ought to be closed, but since I closed it last time without reading the comment in your pull request I'll leave it open for the time being...\n. bantu's pull requests kinda invalidate this one now.\n. Looks good to me..\n. To expand on what bantu said...  you could do this:\nphp\nif (function_exists('stream_resolve_include_path')) {\n    return stream_resolve_include_path($suffix) !== false;\n}\n// old code\nFor the old code...\nyou could do $paths = PATH_SEPARATOR == ':' ? preg_split('#(?<!phar):#', get_include_path()) : explode(PATH_SEPARATOR, get_include_path());\nDemonstration that that works:\n``` php\n$a = 'phar:///rocketeer/bin/phar/vendor/phpseclib/phpseclib/phpseclib:.:/usr/local/Cellar/php55/5.5.6/lib/php';\nprint_r(explode(':', $a));\nprint_r(preg_split('#(?<!phar):#', $a));\n```\nDoing something like this seems prudent since phar has been around since PHP 5.2.0+\n. It's like two extra lines to support people using phar's on PHP 5.2.0 - 5.3.2, The number of people it's going to benefit is probably very small but why not benefit them when it's so easy to do so?\nIf Anahkiasen doesn't do it in his PR I will.\n. http://us3.php.net/manual/en/phar.requirements.php says 5.2.0 was when it was introduced but you're right - http://us3.php.net/manual/en/class.phar.php says it was 5.3.0. In the PHP 5.x changelogs I see \"Added phar extension for handling PHP Archives. (Greg, Marcus, Steph)\" under 5.3.0 and no mention of it before that. Maybe a bug report should be filed on php.net for their documentation?\nBut still it seems like it'd be beneficial for 5.3.0 - 5.3.2. But that's a much smaller window than 5.2.0 - 5.3.2 too.\n. Looks good to me!\n. Looks good!\n. Looks good to me. I'm surprised those are the only places where there isn't a space lol\n. Looks good to me! Didn't know about @codingStandardsIgnoreStart lol\n. So long as this is merged into the php5 branch this commit looks good.\n. Looks good to me!\n. I'd say go for it. It's been require_once since the initial commit and I probably chose that instead of include since the original PEAR library I used as a template (whatever file that was lol) used it. So it's not like require_once was something I was intentionally going for lol.\nAnyway, like I said, go for it!\n. Personally, I'd still say go for it if that's what the CS say. At least if you're so inclined. Personally, I'm a bit indifferent lol. We can have this be an exception to the rules to if that'd be preferable.\nI mean, you'll get a fatal error eventually either way. require will say it's because the file couldn't be included and include will yield a fatal error too when the file, later, tries to instantiate a class that hasn't been defined.\n. That's a standard that I don't know that I completely agree with lol. I don't have a problem with merging it per say but I think it'd be good if some of the other core devs chimed in on this one.\nEven if this one winds up not being merged I'd still say the issue is a good one as it helps to clarify which CS standard violations are intentional and which ones are accidental.\n. Let's go ahead and do it then!\n. idk that I agree with the changes to TripleDES or Twofish. ie. I think the code is more readable as is than it is with these proposed changes. Maybe an exception can be added for these lines as was done with https://github.com/bantu/phpseclib/commit/ef2c50f9e0a0e252076eb643754347835bfb03cb . Maybe the other core devs can chime in.\n. Yah - readability is definitely subjective lol.\nI guess I'm willing to let the TripleDES thing be changed but I still need convincing for Twofish.\n\nI put the \"V4\" onto a new line because there seems to be another rule mandating that, btw.\n\nWhich one?\n. So I guess the actual rule is something like if one variable is on it's own line all of them need to be? ie. http://pear.php.net/manual/en/standards.funcalls.php ?\nI guess I'd need a pull request fully implementing that standard to see if I agree with that in general but, in this case - in the case of Twofish , I still think it impairs readability.\n. There's still the issue of Twofish. Couldn't we just do this around Twofish's code block?:\nphp\n<?php\nsome_code();\n// @codingStandardsIgnoreStart\nthis_will_be_ignored();\n// @codingStandardsIgnoreEnd\nsome_other_code();\n. Looks good!\n. Looks good!\n. Looks good to me!\n. Well no one reviewed it lol\n. Why would $this need to be passed as a reference? Seems to be working fine without me doing it:\nhttps://github.com/terrafrost/phpseclib/commit/6ac922726d71381d696c4e97b21549542e9e331c\n. Is that a problem? $this gets copied in _format_log and then is garbage collected away at some point.\n. Well, either way, I still don't see a problem with the code that I implemented nor do I see a real need to pass by reference.\nIf it turns out that it's consuming a lot of memory we can probably do something like $callback = array(...); preg_replace_callback(...,...,$callback); unset($callback) or something.\n. Works for me!\n. I do think the logging mechanisms could be improved some. Maybe another parameter - a callback parameter or something - could be added to the constructors of Net_SSH1/2. idk. I think letting users have control over the log format would be helpful but that'd require some more thought.\n. I'll try to look at your post in the next few days as time permits!\n. Looks good to me! Well, save for the typo I commented on lol\n. Well I think it looks good. I agree with the elseif but it looks like that's been fixed in the latest commit as well.\nAs for the test cases...  I'll defer to bantu on that.\n. I'll try to merge as time permits. Maybe this evening or tomorrow or something idk.\n. What problems does crypt_random_string have? It uses openssl_pseudo_random_string if it's available and /dev/urandom if it's available, etc. Are there flaws in those functions? If so have you filed bug reports to the OpenSSL project?\nOr are you perchance referring to the fallback implementation? The odds of the fallback implementation being used are pretty low, for one, and for two, even in those situations where it is used, I still stand by it. It is based off of the Yarrow algorithm (wikipedia it) and I have pretty high confidence in the method utilized to gather the initial entropy as well. The comments elaborate.\nIf you have specific objections to the random number generation thing maybe create a new issue.\nAs for DSA itself...  DSA /is/ going to be my next big focus for phpseclib.\nAmong other things, it is one area where phpseclib cannot compete with with libssh2.\nI would also like to play around with making https://github.com/phpseclib/libssh2-compatibility-layer/blob/master/phpseclib.php#L59 auto detect RSA vs. DSA keys (which it needs to do to for perfect emulation of that function) and right now there's no real point to doing so when there is no Crypt_RSA class.\nIt would also be a chance to see how well File_X509 is designed. It is my belief that, for all essential purposes, File_X509's getPublicKey() should be able to return a Crypt_DSA object or a Crypt_RSA object and that they should have the same public facing methods. I mean, idk if it'll have setEncryptionMode (idk if DSA has multiple encryption modes) but it should have getPublicKey(), getPrivateKey(), etc. But how many other differences are there? Crypt_RSA doesn't just do signing but encryption. How will the fact that Crypt_DSA doesn't support encryption affect the API? I would like to play around with that and found out and I am not going to waste a bunch of time reading up and implementing DSA without it going into phpseclib.\nIn any event, is there a particular \"big\" feature you'd prefer I work on instead?\n. > @terrafrost Yes, the problem I have with crypt_random_string() is that it continues with \"Better Than Nothing\" randomness while it should probably throw a \"I have no proper randomness\" error instead. This means that basically everything below https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Random.php#L116 should be dropped. We might just want to use https://github.com/ircmaxell/RandomLib instead which provides a much better interface (but is PHP 5.3).\nI don't agree. phpseclib is all about working no matter what. And unless real objections are made saying \"it's pure PHP so it must be bad\" isn't good enough.\nSure, without FIPS certification or a review from Bruce Schneier or maybe even Stefan Esser, there isn't going to be as much confidence, but unless we can pony up tens of thousands of dollars that's just not going to happen.\nMaybe there are issues with it and if so we can fix them as they're encountered as we do with every other part of phpseclib.\n\nI would prefer if time was spent on upcoming primitives like Salsa/ChaCha, Poly1305, Ed25519, Curve25519 or AES/GCM rather than primitives that the community is moving away from such as DSA (ECDSA has the same problem as DSA, AFAIR).\n\nThe problem with that stuff is interoperability. What makes me most confident about phpseclib's AES implementation and RSA implementation and what not aren't the unit tests - it's the fact that Net/SSH2.php works pretty much everywhere.  Or that File/X509.php can accurately verify signatures or sign them. Salsa/ChaCha isn't really used in any protocol phpseclib currently implements. Unit tests would work but they wouldn't lend me as much confidence as it working with SSH2 would.\nI mean, maybe other people can implement these or maybe they can be GSoC stuff, but they're not high on my /personal/ priority list. I'm more interested in the protocols and not the underlying encryption algorithms. And DSA has more relevance to the protocols than Salsa/ChaCha does.\n. @ZeroCenter - your request probably ought to be a new post instead of a reply to an existing one.\nAnyway, the XML in that blog post contains an RSA key - not a DSA key. phpseclib should be able to read that RSA key and create an RSA object from it that can be used to perform signature verification or encryption. That said, phpseclib doesn't currently support XML signatures. You could /use/ phpseclib to verify an XML signature but it's not something phpseclib does out of the box.\nAlso, I'm going to close this. DSA has been implemented in the master branch. ECDSA is being worked on (I have pretty much all the prime short weierstrass curves implemented [eg. the SEC curves, the brainpool curves, etc] and am working on Ed25519 / Ed448 support right now).. You're only going to get this error if you try to include the file twice. And you'll get errors like this for any file. Include Net/SSH2.php twice and you'll get a fatal error there as well. So...  should we add a class_exists to every file? No. You shouldn't be including files twice.\nNow, I will concede, something does seem to be up with Crypt/Random.php. This is not the first time this \"issue\" has been reported: https://github.com/phpseclib/phpseclib/pull/162 However, I'm going to need a better understanding of this problem before giving the okay on any pull requests like this.\nWhy is Crypt/Random.php being included twice?\nAlso, to greatly simplify your changes (not that I'm suggesting they be merged) I think you'd be better off doing this as the beginning of Crypt/Random.php:\nphp\nif (function_exists('crypt_random_string')) {\n    return;\n}\n. So keeping in mind that I'm very new to Laravel, I installed it and edited apps/views/hello.php to have the following at the top:\n``` php\n<?php\nerror_reporting(E_ALL);\necho '';\nSSH::run('ls -la', function($line)\n{\n    echo $line.PHP_EOL;\n});\necho bin2hex(crypt_random_string(5));\n```\nAnd that worked just fine. I tried editing both controllers in app/controllers/*.php but neither seemed to do anything idk.\nCan you post your code? Can you come up with a super simple laravel project that'd demonstrate the problems?\nThanks!\n. What's the file I should be accessing? I go to the URL corresponding to \"phpseclib-demo/public/index.php\" on localhost and it says \"You have arrived.\". I'm not seeing any error...\nYou mention workbench/sumardi/phpseclib-demo but I don't see a phpseclib-demo directory in the workbench/sumardi directory..\n. I did. I'm still not seeing anything.\nI visit the URL corresponding to public/index.php and see the \"You have arrived.\" screen I mentioned.\nThere's no PHP or HTML or .htaccess file or anything in workbench/sumardi/phpseclibtest/ and workbench/sumardi/phpseclibtest/public/ is empty...\n. https://github.com/sosg/phpseclib-demo/tree/master/workbench/sumardi/phpseclibtest/public\nThat's empty.\nhttps://github.com/sosg/phpseclib-demo/tree/master/workbench/sumardi/phpseclibtest\nThere are no PHP or HTML or .htaccess file or anything in that folder.Am I supposed to point my browser at composer.json?\n. Here's what happened when I ran composer update:\n```\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Removing symfony/routing (2.4.x-dev 7ed6f36)\n  - Installing symfony/routing (2.4.x-dev 481932c)\n    Downloading: 100%\n\nRemoving symfony/translation (2.4.x-dev 0919e0f)\n\nInstalling symfony/translation (2.4.x-dev 077fbef)\n    Downloading: 100%\n\n\nRemoving symfony/process (2.4.x-dev 87738ff)\n\n\nInstalling symfony/process (2.4.x-dev 621e071)\n    Downloading: 100%\n\n\nRemoving symfony/finder (2.4.x-dev 72356bf)\n\n\nInstalling symfony/finder (2.4.x-dev ed48c70)\n    Downloading: 100%\n\n\nRemoving symfony/console (2.4.x-dev b9f8146)\n\n\nInstalling symfony/console (2.4.x-dev 4f7c45b)\n    Downloading: 100%\n\n\nRemoving symfony/filesystem (dev-master 7669ed9)\n\n\nInstalling symfony/filesystem (dev-master f316a10)\n    Downloading: 100%\n\n\nRemoving symfony/debug (2.4.x-dev 7e8a027)\n\n\nInstalling symfony/debug (2.4.x-dev 1f13dcc)\n    Downloading: 100%\n\n\nRemoving symfony/http-foundation (2.4.x-dev 207a772)\n\n\nInstalling symfony/http-foundation (2.4.x-dev 3710832)\n    Downloading: 100%\n\n\nRemoving symfony/event-dispatcher (dev-master bdab227)\n\n\nInstalling symfony/event-dispatcher (dev-master c26e050)\n    Downloading: 100%\n\n\nRemoving symfony/http-kernel (2.4.x-dev 9255b06)\n\n\nInstalling symfony/http-kernel (2.4.x-dev c6f7e90)\n    Downloading: 100%\n\n\nRemoving symfony/browser-kit (2.4.x-dev 4d867bb)\n\n\nInstalling symfony/browser-kit (2.4.x-dev 20becf6)\n    Downloading: 100%\n\n\nRemoving phpseclib/phpseclib (dev-master d2c4ccf)\n\nInstalling phpseclib/phpseclib (dev-master 28573d6)\n    Downloading: 100%\n\nWriting lock file\nGenerating autoload files\nGenerating optimized class loader\n```\nYour directions say to then \"Open the page and fatal error.\" How do I open the page? Which page do I open?\n. When I go there I get the \"You have arrived.\" message - not a fatal error.\nI opened workbench\\sumardi\\phpseclibtest\\src\\Sumardi\\Phpseclibtest\\PhpseclibtestServiceProvider.php and put exit('THIS FAR'); after the use Illuminate\\Support\\ServiceProvider; and nothing happened so it doesn't seem as though that's being included.\nI also put an exit('THIS FAR'); in vendor\\phpseclib\\phpseclib\\phpseclib\\Crypt\\Random.php after the <?php and it doesn't seem that that file is being included once let alone twice..\nCan you just give me SFTP access to a server with it setup already? You can email the credentials to terrafrost@php.net.\n. I was able to reproduce the issue and will try to look into it further by this weekend.\nThanks!!\n. public/index.php does this:\nrequire __DIR__.'/../bootstrap/autoload.php';\nbootstrap/autoload.php does this:\nrequire __DIR__.'/../vendor/autoload.php';\nthat file does this:\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\nthat file does this:\n$includeFiles = require __DIR__ . '/autoload_files.php';\n    foreach ($includeFiles as $file) {\n        require $file;\n    }\nand autoload_real.php does this:\nreturn array(\n    $vendorDir . '/swiftmailer/swiftmailer/lib/swift_required.php',\n    $vendorDir . '/phpseclib/phpseclib/phpseclib/Crypt/Random.php',\n    $vendorDir . '/ircmaxell/password-compat/lib/password.php',\n    $vendorDir . '/laravel/framework/src/Illuminate/Support/helpers.php',\n);\nso at this point crypt_random_string is defined.\nlater, bootstrap/autoload.php does this:\nif (is_dir($workbench = __DIR__.'/../workbench'))\n{\n    Illuminate\\Workbench\\Starter::start($workbench);\n}\nthat's where it fails.\nthe Illuminate class is auto loaded via composer with the following class mapping (vendor/composer/autoload_classmap.php):\n'Illuminate\\\\Workbench\\\\Starter' => $vendorDir . '/laravel/framework/src/Illuminate/Workbench/Starter.php',\nthat file, in turn, does this:\n$autoloads = $finder->in($path)->files()->name('autoload.php')->depth('<= 3')->followLinks();\nthat gets workbench/sumardi/phpseclibtest/vendor/autoload.php which does this:\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\nthat file does this:\n$includeFiles = require __DIR__ . '/autoload_files.php';\n    foreach ($includeFiles as $file) {\n        require $file;\n    }\nand that file has this:\nreturn array(\n    $vendorDir . '/phpseclib/phpseclib/phpseclib/Crypt/Random.php',\n    $vendorDir . '/illuminate/support/Illuminate/Support/helpers.php',\n);\nso that's why the crypt_random_string function is already defined error is happening.\nlaravel/framework/src/Illuminate/Support/helpers.php does this:\nif ( ! function_exists('action'))\n{\n    function action($name, $parameters = array());\n}\nso there's the precedent for doing function_exists within laravel. but outside of laravel...\nswiftmailer does the same function_exists thing. ircmaxwell's thing does a similar !defined('PASSWORD_BCRYPT') check (and if it's not defined it defines it immediately). and then there's phpseclib. however just because other open source projects are doing it doesn't necessarily mean it's a good bandwagon to jump on. ie. is that really the best solution?\nit appears that the vendor directory is not created until the third step mentioned at https://github.com/sosg/phpseclib-demo. ie. running artisan workbench isn't what creates it - it's composer install that creates it. this is re-enforced by the fact that autoload_files.php has this:\n// autoload_real.php @generated by Composer\nanyway, i'm thinking some sort of if function_exists check may be worthwhile (although i'll do it as described at https://github.com/phpseclib/phpseclib/pull/217#issuecomment-31058558 and not in this PR) but i still want to better understand the problem. should composer be doing be doing checks against http://php.net/get-included-files to see if the file has already been included and dynamically build the list of included files accordingly? in that case, for backwards compatibility with older versions of composer, the function_exists check would be worthwhile, but a command above it would be prudent. alternatively, maybe composer.json could use some refinement? idk. i'll try to look into this matter further tomorrow.\n. The laraval framework already includes phpseclib so why does the workbench app have to have it in its composer.json as well?:\nhttps://github.com/laravel/framework/blob/master/composer.json\n. I've been going back and forth about this most of this weekend.\nThis really seems like a one-off issue almost exclusive to laravel because of the way laravel is including autoloaders for workbench packages. And I am quite hostile to making one-off changes for random projects. phpseclib is not a laravel subproject and making changes that, near as I can tell, only benefit a subset of laravel users...  it's not something I'm too keen on at all.\nWhat happens if another project comes along and is like \"can you rename crypt_random_string to blahblah because it causes a conflict with our legacy code?\" I'd be pretty hostile to that. Or what if someone comes along and is like \"can you use tabs instead of spaces for your CS so your library can follow my projects coding standards?\" phpseclib is its own project.\nIf someone wants me to make changes that make phpseclib better run on PHP 5.3.2 that's different.\nIt seems like something like something could be done with http://php.net/get-included-files but then once one file named Random.php was included another couldn't be even if the contents of that one were completely different. and plus, too, laravel / illuminator would have to do some even more hackish things, making assumptions about how composer is autoloading files, and I don't blame it for not doing so.\ncomposer could do a check like this, too, but I don't think composer should have to make updates for what is, imho, a hackish use of composer anyway.\nReally, at the end of the day, since laravel is the program that's employing this technique it's laravel that ought to be resolving this - not phpseclib.\nCurrently, I'm thinking that unless you can demonstrate that this problem is a legit problem outside of the scope of laravel or unless you can pony up some money to me (paypal to terrafrost@php.net) I will not be making this change. At that point I could say in the comments \"this change sponsored by laravel (...)\" or something idk.\n. That works! If you could post the link here so I can refer people to your fork if they encounter similar issues that'd be awesome.\nGood luck!!\n. I think that's more of a problem for Composer. Or those applications that are trying to do two rounds of auto loading.\nI think the php5 branch can do more to fix this than the php4 / main version can. In particular, I can make Crypt_Random a class with a static function - String().\nie. instead of crypt_random_string() you'd call Crypt_Random::string() or something.\n. The file shouldn't be included twice and that's the only way this is an issue.\nWhat's next? Maybe I should do if (php_check_syntax($file)) include($file); in the off chance someone modified Math/BigInteger.php or whatever and added a syntax error?\nMy point is phpseclib should only go so far to accommodate people doing things they shouldn't be doing. And people (or libraries or whatever) shouldn't be including Crypt/Random.php twice.\n. @bantu - I think that's a good idea. Removing it from composer.json and making it a class for php5.\n. POST is what bantu was referring to. ie. if you set form method=\"post\" it'll send the data using POST instead of GET.\n. @bit111 - maybe http://stackoverflow.com/q/18204326/569976 helps?\n. @bit111 - I'm not sure what you're asking. You can make a browser send an HTTP POST request by creating a custom form but you can't copy / paste an HTTP POST request like you can with HTTP GET..\n. Maybe post on superuser.com. See if you can pass POST parameters to Chromium via the command line.\n. PHP Warning: require_once(Math/BigInter.php)\nThat's a weird error since the file that's actually being included is Math/BigInteger.php. ie. there's an eg between the t and the e.\n. php\nset_include_path(get_include_path() . PATH_SEPARATOR . '/etc/php5/cli/myApp');\n. Can you generate a sample key of the same format that is stored in the DB?\n. So the problem appears to be that you don't have any new lines in your key. It's like all the new lines have been replaced with spaces. phpseclib (currently) requires new lines, although I've just made a commit that should remove this as a requirement.\n. Can you post the (base64-enconded) ciphertext that you're trying to decrypt and the key that you're using to decrypt it? And put it in <pre> tags.\nThe line number you're encountering the error on suggests that you're using OAEP padding for decryption. Are you using it for encryption as well?\nThanks!\n. I didn't need a base64-encoded key ;) And I hope you're not passing that the key that you posted straight into Crypt_RSA because it wouldn't work at that point. It needs to be in the original format.\nAnyway performing unpadded RSA decryption shows that the decrypted ciphertext is invalid. Both OAEP and PKCS1 padded plaintext's have the first byte as chr(0) and yours doesn't. My code:\n``` php\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey(base64_decode('LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJSkp3SUJBQUtDQWdFQXB0YU43N2ZXTFNRUDl6bGtTZGMyMUtBUkVjOTh5MEtrUTk0aVNkS1lIR0diT3o3NQ0KVEFVWndpZkp4SEQvUXd1RjdQY1hVbDZEc0dMaGVDREFtRWFzdVRPQ3BQb3I1bU9jRkxwTkdvNGFQWFNBUnFDeg0KUEUvM05UYXFLZ1hqaHZ4UjBxKzJPYis5MkRqZk9uZlpERFptR2xrc3BqbmZsT2tTWWkzbG16OElXSEFuM01jYw0KY3kxNE91dlUveTRLcWl0WStoeHZTSDk3VytsU044S2lCTkF6SWxOak9qYTUxcVFLUEs5Wk04dTFYUUd6eUlOdg0KNWt0aXgzWk9ES1lLOWRva1RHQjlGY1lRbkNhL2Zjdk5xa2R5L0grMzlCWGlJY0FYSWRaTmxXUW5RcWNNS0lmdQ0KR1N5MjJFUFpKdUEvQ0JuQUsyUzlDR2gzSFdjQkpPUUNiTEVPQmZHWmZnVkM4eXhVQm1WUEYrWlQ3UHM3dytlaA0KU3V1eGVCa1kwU3BZSm1xSytlWmpKMzd5K2pWZlRJbkRvdjY5Vlo1cVZ6NFZHb2JBdlZWWk1kdlkrR2VvK0JtMA0KMFlkMHpJNXAwNER2R1FIS3FPSXdpYU1GNGtsUlhiSll5QldtYTZRWWwzMG1TQWJLWFZxSUhWbE52cVdZNFBVRw0Ka1pmZW9BaTJqTFlaZFRlUjQzaHBteHhwU1lGbjEvS042OVl3bDdPYU1UYzJBREI0VXBGM3MwRXI0dXRYamh6Yg0KOVFETEdUV1d4eGhNeUhoZnFCU1RwVXVqQ2poYXFxeVlIeVpxMkJuTWxER2l4M1NRcTNMTUsyUnIwc2U2cENMNQ0KSHJzQXVlaXhEbDIyMkErQXAyRjI4ckF3Y3ZJUFlOL0hjUWNadXo0REM5ZVF2Kzl4M2lVQnBabG9aemNDQXdFQQ0KQVFLQ0FnQjgyQmFVS0Z2RG9iVzB5U1NMd05rTjJNMk5KMWQ1L2w5UFRkMFlvdGNpZmNPY1hPNU4vWThkNDRvdg0KVG1NbE4yMDdPbGNnVXd0MkpUZ1ZIV1VoVGRtWUtMeDlXWnNhSnJXNEtRVGpkeXlaaWlFbk9MK0d4VXYyYlBaKw0KeGJOUjRtUVVKVnBWOG01TWE1cFhkVEZjMnlRaVdWSjQvTnVhNGFIWkNBRkYzN0FPQmJjK2xWeHJyNzNGVVk0cw0KZWJhUFNpcWwxanRMNCtGYWtNanVZdDI4ZmxPVlB4TUVqOGtXbmQvdk0wT3I1NmJLZHlpaVJnQ3BNd1l5dmd0Lw0KbVl5Z0ZtR05LYkxRWlVzdW5pd3pKUnU4YlFUVmYza1cxSDFIeGlkSk1jVVNva1Jpc3YvOUlHS0NRaHg4enFDag0KWDdDckRpSG9GdFVCZ3JLSHRQbDlNb1hCOGVmTVExcXpLVW1YaGxEMmg4Wk9Ib2ZsZzVqNXF0dEV3VTY4VjNGMQ0KRlZnaVRaZy9HMGoxN3pVbDJDYUliSkpYeXB0VVppMWQ4NVgxK3A2K3FjWkRnUy84WWhzeDc3Z3ltdWJacWpiZg0KbUtMNytiN0N5WTZoMnk4WG15U2pMVCtaMmFKN2FJN0RlbHpWVE1LaXR3Vm9USEw1S2lwQnRpWFkvMG14QmlEOQ0KY0Q5akFXaE55WWlZa0pBUlpoVWpkbGpzQW9PaEVSRkVEYmVadDhkUG83MUdvNXB4U3BvM3A0aE15dU05aVJCYg0KdERaaUR5ckdkejdZK3NRazNxNVNHc25adUw5cnF0akUzUHpZSVIzZlBUSDJDQk4yOEdBRGxkQ2FNNU5tQ2JrUA0KYXRsdGd4TDdZZTBoOE1hL3B3dVRXcGYrN0ZteEl3US95T0RoNEJ1MitlOW9FQVM1Y1FLQ0FRRUExYTZHS1kxOA0KTEJSYzQ5YVgvem50ZUU1cy9oY1pxeWV5RHYrV0k0V3ZUcHA2WTNzYXVNaGtpRUdpVmRaeTE4SHlxZjQvc0NmMA0KbnJjOTRPVkc5WUZRSTRGdmF6bjNBSm9SOXhnRTJBZ3NWR3JwR3VrWEF6SEYrOGUxVTBvUUREemt6MFhMUFBHRQ0KN2oyUU1qcFVtSE1maFFsYVdJYUFoOEZqV3RZR0c2bnU3VUFUTXlXV0JEUGI3enY4VnR0QzFscHRmQUZhVk5aMA0KK1F0NzJHcy81OXp3SThYNzFFVERYWGZZUTBaQTZZdEp0czNtN1ZhMitEQjc2VzJWd0NNWjhDakQ4VmNHc3U2OQ0KOWtzSlZlcWxOVmU5TlVaWHhKcit6KzRtOTMwL2NuWEVxWFpLWmVCejN2T21nUC8xYmNBOXZSSmNrbTZId0R5TQ0KUE9Oa09CMVFqRThDeVFLQ0FRRUF4K0VaZHllcFJXOENhbzRqT0dlbHJQK3RLUFdiM3IzcCsvbFZONCt2bzZZNA0KK0JVSko5bWRkbzJlS05NVWt4c1JReTlGamVxWHJRa1cxMGZSQ0I2SHorK1M4SVl3cGRnSm5PcitJNnZMQWtVdQ0KWUNDV1JnUkJ3RFQxcFRlVGhxZ29VTXVTc1czTjIxQW15ei9TN0VJRXdIWVN1a3lNYXorc0srZ0kyc0R4QmFHdw0KMjFKQ2g0T1plMXRJOTV0SVYxL3J2K013WDNiOWhsWnIzelZLZEg2T2NZQjREY0tUbm1NRmY0cFA1cDBCVEU0dQ0KazgzeDNLeGtPdFUyRTNwT1FRVng0a204ak9YM2lVYW81Z3c1TytBbmg3ZDhtU1V3VUZCTno3MnFia2V5dnRPeg0KY0Z2NzFhSnI5RGhHaUhaZTNzTXo4ZTlYaUJCODRPQjM0WUtUTkhjWi93S0NBUUJCWVFqRHBmcWNNZzdKMTFyaQ0KU0lNVUVFcmc0NGlEQ2I0OVFJNWJpQWUvY1J5Slc1MHRkSUx0L2NjQnBIKzI3Q3luUHBlVittT3FQRDYrbE9oRg0KTGErcmJXcjl6OXAzWUt5bWdiN1pxb2FGdmNCYzczeVBDYWVlQmRqQkJ5UXAybWZYMDI3LzBwWHRud0NEbmIxTQ0KZDh6cEU1ZUZCb0pGQnpLekZGRUNIZGh3MXU0STlETVdUaGU0OXcyYU5iUVppY2w5NjV3TDRTSWhJUlpmZlZFcw0KVERsZGVMSTRuR0Y2TTdVRHdIY1QvZjRyNUl3SGlrU3BZNHhHTzdWWitHTnpTOFhJRGV5S3l1bHNka0VBL0s1WA0KeCtTb2JFRm1jbFlNb0wxamMvcjV0bmJac3N2SXFBaEw2eGpDMTQzc2FxbDVOQ2tHMUxMTWFyb3QxeFZPNWdsRA0KSk5taEFvSUJBRG8zUmNOK3ViNlBacFRDY1Yrc1VJVGlzdnlMREtzRGhYTHVXL09pMWZWRUpMT2M3TjIrZEM1ag0KY1AxUy9Wc2JOeHZxV01mTTNBQjU5VDBlbmJOUHNSN1BHRzBWcUhXbFJxZDlpaWU1a1pkSHJ3b3djNVJSQ1JXQw0KVjBtWHRsQXlDZ3YrUHV1T243YVEwYnZCQ3gzazNKMXh4bUtjaVFsenNpSFhvenlUbForZVNIU1lzT2ZuWEh5aA0KU2M5VVd1Mlg4b0loR2FXMGNvTCtDTTBxS0ZWbHh2Y29BODkrTEtDbEZxVGZGQWFIRkNtMVc3dVE4RERseFF1ZA0KcmZKZVhReHpHWWhmRVp1NEh6RE1jOFVOS2w1V0d5MWNNOTRuQnJ0ZHFFd3BZY3BjOTZLODVqYURsQVhWR0x3NA0KNTlJM0o4cVo4RGMzRHJlQ2xkeXBoRUVhVnVXaEN1RUNnZ0VBWE9tMzYreHNjZ3NzMnBOVjVIekdPQ3BwWVpuWQ0KVENjVTh5NHhWOGZoTitjbmJvd1cxZVQxNldyY0F4cVRhai9BbGFmNUYyVXJZVlFLVU9vU09xaE1NWm1vVGlpZQ0KUGRBeDdhT2ZRWHRHZzAxZHFEbjJpTkRkUFBTYXBUWis5WmNZQXAvaVdta0VzZTgvVDFYdUlVaFBFTG1CdTZEeQ0KeWRGR1hVRUNCQ2h0YkhuMC96ckJrcTl3YzYwWnkrcEEzUjdaYWd1T2habnVMMnpIS0pMQTd0bjNQL2tYNy9KdQ0KaDVNNEw4ZWI5M3grUk5ScUtEMnA0UFBmN3QvUjR4a0I0TUhmUUlsUDgwaHpMYXpQNEZ3eUFSRUllZDRFNmNlaA0KLytmOEdNcEl6aDRqcllnYUkrMCtPclZnbkZBTzh2am11Z3dXeldGN3B1VTEwTHJpelZ1b1cwUUZtQT09DQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=='));\n$ciphertext = ('NsK9w5bDocO/wrVoeXhCw4k9NSAeaOKAnmVow47DjeKApsORRkHCvsucSsOiasO1w4DGksOjQcKzATXigLolYETCtRkiEWUzOMK0y4bDggjigqxCw77CsMO8w7JGTz/ihKLCsATigJljGmDDpMKjbAvCtMK1D1xuw5vDiMKywrrCncO1xZJiGsOdwrJGTlnDkUMdwqZPwo/DlMW+JsKxO8KpB8OsxZIUEsOjw78hXnHCj1EDw57DqsKtRcOhw7bDjcKhK8Odw7pJ4oCY4oCUwrsvwq7CvXRl4oSiwqNTw7figJ3CjcK44oSidcOuScODw4DDrMOkQ8K9wrVAw4h7TmLDhcOWLMOidsOkIUTCtcKQw5fCjzjigJPCtUnDhWMVwr8Gw74SdGcyfuKAnV/DssKPwrnDgcOuw5ogwqDCoMKgPCvigJrFky1vxbhGFRDDgWfDgA7DkhzDueKAmBvCohPDvR054oCdw6rCncKpwo3igLDDnlhJw5HDlzbDvsOPN8KB4oKsw7svwqgfR8uc4oCTAUQ+w6/igJ4+LljCpcKnwqFnDDTCrw==');\n$plaintext = new Math_BigInteger($ciphertext, 256);\necho bin2hex($rsa->_exponentiate($plaintext)->toBytes());\n```\nAssuming the code you posted is correct can you post both the outputs of $this->getSystemPublicKey() and $this->getSystemPrivateKey()? It's possible there's a mismatch - that the public key you're storing in the DB does not correspond to the private key you're storing for that user.\nAlso, try to reduce the problem down to code that can be run with only phpseclib as I did. Calling $this->getSystemPrivateKey() does not rely only on phpseclib - it relies on code that I haven't seen (nor do I want to see it). Same thing with $result[0][userFirstname). The fact that it contains a syntax error not withstanding I don't know where you're getting that from.\n. Posting the keys with the <pre> tag, as I suggested earlier, would be helpful.\nThat said, I did not have any issues:\n``` php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey('-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAptaN77fWLSQP9zlkSdc2\n1KAREc98y0KkQ94iSdKYHGGbOz75TAUZwifJxHD/QwuF7PcXUl6DsGLheCDAmEas\nuTOCpPor5mOcFLpNGo4aPXSARqCzPE/3NTaqKgXjhvxR0q+2Ob+92DjfOnfZDDZm\nGlkspjnflOkSYi3lmz8IWHAn3Mcccy14OuvU/y4KqitY+hxvSH97W+lSN8KiBNAz\nIlNjOja51qQKPK9ZM8u1XQGzyINv5ktix3ZODKYK9dokTGB9FcYQnCa/fcvNqkdy\n/H+39BXiIcAXIdZNlWQnQqcMKIfuGSy22EPZJuA/CBnAK2S9CGh3HWcBJOQCbLEO\nBfGZfgVC8yxUBmVPF+ZT7Ps7w+ehSuuxeBkY0SpYJmqK+eZjJ37y+jVfTInDov69\nVZ5qVz4VGobAvVVZMdvY+Geo+Bm00Yd0zI5p04DvGQHKqOIwiaMF4klRXbJYyBWm\na6QYl30mSAbKXVqIHVlNvqWY4PUGkZfeoAi2jLYZdTeR43hpmxxpSYFn1/KN69Yw\nl7OaMTc2ADB4UpF3s0Er4utXjhzb9QDLGTWWxxhMyHhfqBSTpUujCjhaqqyYHyZq\n2BnMlDGix3SQq3LMK2Rr0se6pCL5HrsAueixDl222A+Ap2F28rAwcvIPYN/HcQcZ\nuz4DC9eQv+9x3iUBpZloZzcCAwEAAQ==\n-----END PUBLIC KEY-----');\n$ciphertext = $rsa->encrypt('zzz');\n$rsa->loadKey('-----BEGIN RSA PRIVATE KEY-----\nMIIJJwIBAAKCAgEAptaN77fWLSQP9zlkSdc21KAREc98y0KkQ94iSdKYHGGbOz75\nTAUZwifJxHD/QwuF7PcXUl6DsGLheCDAmEasuTOCpPor5mOcFLpNGo4aPXSARqCz\nPE/3NTaqKgXjhvxR0q+2Ob+92DjfOnfZDDZmGlkspjnflOkSYi3lmz8IWHAn3Mcc\ncy14OuvU/y4KqitY+hxvSH97W+lSN8KiBNAzIlNjOja51qQKPK9ZM8u1XQGzyINv\n5ktix3ZODKYK9dokTGB9FcYQnCa/fcvNqkdy/H+39BXiIcAXIdZNlWQnQqcMKIfu\nGSy22EPZJuA/CBnAK2S9CGh3HWcBJOQCbLEOBfGZfgVC8yxUBmVPF+ZT7Ps7w+eh\nSuuxeBkY0SpYJmqK+eZjJ37y+jVfTInDov69VZ5qVz4VGobAvVVZMdvY+Geo+Bm0\n0Yd0zI5p04DvGQHKqOIwiaMF4klRXbJYyBWma6QYl30mSAbKXVqIHVlNvqWY4PUG\nkZfeoAi2jLYZdTeR43hpmxxpSYFn1/KN69Ywl7OaMTc2ADB4UpF3s0Er4utXjhzb\n9QDLGTWWxxhMyHhfqBSTpUujCjhaqqyYHyZq2BnMlDGix3SQq3LMK2Rr0se6pCL5\nHrsAueixDl222A+Ap2F28rAwcvIPYN/HcQcZuz4DC9eQv+9x3iUBpZloZzcCAwEA\nAQKCAgB82BaUKFvDobW0ySSLwNkN2M2NJ1d5/l9PTd0YotcifcOcXO5N/Y8d44ov\nTmMlN207OlcgUwt2JTgVHWUhTdmYKLx9WZsaJrW4KQTjdyyZiiEnOL+GxUv2bPZ+\nxbNR4mQUJVpV8m5Ma5pXdTFc2yQiWVJ4/Nua4aHZCAFF37AOBbc+lVxrr73FUY4s\nebaPSiql1jtL4+FakMjuYt28flOVPxMEj8kWnd/vM0Or56bKdyiiRgCpMwYyvgt/\nmYygFmGNKbLQZUsuniwzJRu8bQTVf3kW1H1HxidJMcUSokRisv/9IGKCQhx8zqCj\nX7CrDiHoFtUBgrKHtPl9MoXB8efMQ1qzKUmXhlD2h8ZOHoflg5j5qttEwU68V3F1\nFVgiTZg/G0j17zUl2CaIbJJXyptUZi1d85X1+p6+qcZDgS/8Yhsx77gymubZqjbf\nmKL7+b7CyY6h2y8XmySjLT+Z2aJ7aI7DelzVTMKitwVoTHL5KipBtiXY/0mxBiD9\ncD9jAWhNyYiYkJARZhUjdljsAoOhERFEDbeZt8dPo71Go5pxSpo3p4hMyuM9iRBb\ntDZiDyrGdz7Y+sQk3q5SGsnZuL9rqtjE3PzYIR3fPTH2CBN28GADldCaM5NmCbkP\natltgxL7Ye0h8Ma/pwuTWpf+7FmxIwQ/yODh4Bu2+e9oEAS5cQKCAQEA1a6GKY18\nLBRc49aX/znteE5s/hcZqyeyDv+WI4WvTpp6Y3sauMhkiEGiVdZy18Hyqf4/sCf0\nnrc94OVG9YFQI4Fvazn3AJoR9xgE2AgsVGrpGukXAzHF+8e1U0oQDDzkz0XLPPGE\n7j2QMjpUmHMfhQlaWIaAh8FjWtYGG6nu7UATMyWWBDPb7zv8VttC1lptfAFaVNZ0\n+Qt72Gs/59zwI8X71ETDXXfYQ0ZA6YtJts3m7Va2+DB76W2VwCMZ8CjD8VcGsu69\n9ksJVeqlNVe9NUZXxJr+z+4m930/cnXEqXZKZeBz3vOmgP/1bcA9vRJckm6HwDyM\nPONkOB1QjE8CyQKCAQEAx+EZdyepRW8Cao4jOGelrP+tKPWb3r3p+/lVN4+vo6Y4\n+BUJJ9mddo2eKNMUkxsRQy9FjeqXrQkW10fRCB6Hz++S8IYwpdgJnOr+I6vLAkUu\nYCCWRgRBwDT1pTeThqgoUMuSsW3N21Amyz/S7EIEwHYSukyMaz+sK+gI2sDxBaGw\n21JCh4OZe1tI95tIV1/rv+MwX3b9hlZr3zVKdH6OcYB4DcKTnmMFf4pP5p0BTE4u\nk83x3KxkOtU2E3pOQQVx4km8jOX3iUao5gw5O+Anh7d8mSUwUFBNz72qbkeyvtOz\ncFv71aJr9DhGiHZe3sMz8e9XiBB84OB34YKTNHcZ/wKCAQBBYQjDpfqcMg7J11ri\nSIMUEErg44iDCb49QI5biAe/cRyJW50tdILt/ccBpH+27CynPpeV+mOqPD6+lOhF\nLa+rbWr9z9p3YKymgb7ZqoaFvcBc73yPCaeeBdjBByQp2mfX027/0pXtnwCDnb1M\nd8zpE5eFBoJFBzKzFFECHdhw1u4I9DMWThe49w2aNbQZicl965wL4SIhIRZffVEs\nTDldeLI4nGF6M7UDwHcT/f4r5IwHikSpY4xGO7VZ+GNzS8XIDeyKyulsdkEA/K5X\nx+SobEFmclYMoL1jc/r5tnbZssvIqAhL6xjC143saql5NCkG1LLMarot1xVO5glD\nJNmhAoIBADo3RcN+ub6PZpTCcV+sUITisvyLDKsDhXLuW/Oi1fVEJLOc7N2+dC5j\ncP1S/VsbNxvqWMfM3AB59T0enbNPsR7PGG0VqHWlRqd9iie5kZdHrwowc5RRCRWC\nV0mXtlAyCgv+PuuOn7aQ0bvBCx3k3J1xxmKciQlzsiHXozyTlZ+eSHSYsOfnXHyh\nSc9UWu2X8oIhGaW0coL+CM0qKFVlxvcoA89+LKClFqTfFAaHFCm1W7uQ8DDlxQud\nrfJeXQxzGYhfEZu4HzDMc8UNKl5WGy1cM94nBrtdqEwpYcpc96K85jaDlAXVGLw4\n59I3J8qZ8Dc3DreCldyphEEaVuWhCuECggEAXOm36+xscgss2pNV5HzGOCppYZnY\nTCcU8y4xV8fhN+cnbowW1eT16WrcAxqTaj/Alaf5F2UrYVQKUOoSOqhMMZmoTiie\nPdAx7aOfQXtGg01dqDn2iNDdPPSapTZ+9ZcYAp/iWmkEse8/T1XuIUhPELmBu6Dy\nydFGXUECBChtbHn0/zrBkq9wc60Zy+pA3R7ZaguOhZnuL2zHKJLA7tn3P/kX7/Ju\nh5M4L8eb93x+RNRqKD2p4PPf7t/R4xkB4MHfQIlP80hzLazP4FwyAREIed4E6ceh\n/+f8GMpIzh4jrYgaI+0+OrVgnFAO8vjmugwWzWF7puU10LrizVuoW0QFmA==\n-----END RSA PRIVATE KEY-----');\necho $rsa->decrypt($ciphertext);\n```\nAnd can't you re-produce the problem independent of your own code? As is I have to make certain assumptions about $this->getSystemPublicKey() and $this->getSystemPrivateKey(). What if there's a bug in them that you just happened to miss? Maybe you're just copy / pasting the keys here but what's stored in the DB is different? Maybe there's an issue saving them to the DB? Maybe some of the code you omitted is changing the value of things? Maybe your code is connecting to a sandboxed DB and you're trying to use sandboxed keys that are distinct and different from the production keys to decrypt production data? I can't tell any of that.\nI mean, I shouldn't need to know how your system works to reproduce the problem, because I'm not going to be able to reproduce your system.\nSo if you could reproduce the issue using phpseclib and only phpseclib that'd be great. Thanks!\n. Well do keep in mind that phpseclib is PHP4 compatible. As such, having Net_SSH2_Log_SimpleLogger, etc, implement Net_SSH2_Log_LoggerInterface won't work. It could extend but not implement.\nSame thing with the function declaration. It couldn't use the public keyword.\nI guess I'm okay with attaching the logger to the constructor. I don't like the idea of adding a trillion parameters to functions because then it starts to look like a \"god function\" where figuring out the correct order is a skill unto itself but I don't really see any other way to do what we're trying to do in this case.\nAs for organizing it within the phpseclib hierarchy...\nI almost wonder if maybe a better way of organizing it would be something like this:\nLog_Net_SSH_Base\nLog_Net_SSH_Simple (extends Base) etc.\nI think Base ought to be Complex by default because I use complex logging the most myself.\nOr maybe we should do this:\nLog_SSH_Base\nLog_SSH_Simple\nidk.\nIt is also unclear if Base is even necessary. Guess you'll have to post some code to illicit further comment.\nI'm also somewhat curious as to how extensible this logging framework could be. Like what if I want to implement SSL/TLS in PHP? Could the logging class be re-used for that? If so would Log_SSH_Base / whatever be appropriate names at that point? Does SSL/TLS have various packet types like SSH does? Not all protocols do. Like HTTP doesn't. Maybe if this logging functionality could be used for HTTP by doing something like only showing the first line? idk.\nAnd if the logging thing were intended to be ultra-generic for any protocol then maybe a better naming convention would be this?:\nLog_Net_Base\nLog_Net_Simple\n...etc...\nAs for PSR-3...  I'm not sure what the difference is between PSR-0/1/2/3/whatever (and don't know that I care enough to look it up lol) but the code you posted isn't PHP4 compatable. The constructor style is wrong and it uses type-hinting, which I think is a bit unnecessary anyway. Like solving a problem that was never a problem in the first place.\n. > Regarding PSR-3: It's a standard for logging.\nOh. I thought it was some auto loading standard lol.\n\nYes we should also keep in mind that SSH1 also provides logging. But the _append_log(...) method takes different parameters. I'm not sure if we can abstract this.\n\nI'm sure we can. And Net_SFTP does logging as well independent of Net_SSH2. I mean it does do SSH2 logs but it also logs SFTP logs.\n. Let's split the ten million four ways for each of the core devs :D\n. The latest commit adds some tests for keys. If you think the test should be rewritten maybe you can go ahead and merge this PR and rewrite the test yourself and I'll keep the changes you make in mind for future unit tests I write?\n. Yes. When I did Ctrl + F in the file I found a few comments that could benefit from updating as well.\nThanks!\n. Looks good to me!\n. Go for it.\n. Looks good to me. I didn't know it was even doing that lol\n. PR has a commit it shouldn't have... Ugh. Peer review slows down the commit process a good amount. It's resulted in some good public discussion but it's harder to keep track of multiple concurrent unmerged branches and means legit fixes take longer to get out and we risk some legit fixes being forgotten about if we're not careful. It has a lot of the same draw backs as red tape.\n. Nice find for #234! Although I think https://github.com/phpseclib/phpseclib/pull/237 is a better fix.\nThanks!\n. http://www.frostjedi.com/phpbb3/viewtopic.php?f=46&t=15226\nThere are more keys there that can be added to the unit test but that file is no longer available for download. I think I have a copy of it on my laptop at home.\n. This is a duplicate of https://github.com/phpseclib/phpseclib/pull/217 . For one, I think a better \"fix\" would be to do a return in Random.php if the function is defined. Also, it seems to me that this is likely more an issue with laravel - not with phpseclib. The person who did https://github.com/phpseclib/phpseclib/pull/217 provided me with a sample laravel project that reproduces the problem so I'm going to try it on my end as time permits.\nI figure, upon conclusion of my investigation, I'll either submit an issue to laravel or make a code change here. Or something. idk - we'll see lol.\n. Well I haven't heard anything back from the person behind https://github.com/phpseclib/phpseclib/pull/217 . I don't suppose you could provide me SFTP access to an server that's demonstrating the problem so that I can debug / diagnose it?\nI haven't been able to duplicate the issue on my local machine and am not going to merge a fix for a problem I don't understand. As for what I mean when I say I don't understand it...  see https://github.com/phpseclib/phpseclib/pull/162\n. It works correctly for me on 5.2.17:\n``` php\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\nvar_dump($rsa->loadKey('zzzzzzzzzzzzzz'));\n```\nI don't know how to setup my linux box to have multiple PHP versions on it but I'm almost wondering if this is just an instance of Travis messing up. ie. maybe if I pushed a white space change or updated one of the comments and pushed it to this branch Travis would magically start working again and the test would pass. That's happened before to me..\n. Not all class variables / methods have docblock comments.\nFor SFTP...  it looks like that's logging to the same log that Net_SSH logs to? 'cause the logs should be independent. SFTP logs can be extracted from SSH logs but not the other way around. They shouldn't be mixed and it looks like they are?\nAlso I don't think logging should always be enabled and it looks like that's just what you're code is doing:\nphp\n        if($logger == null) {\n            $logger = new Net_Logger_Simple();\n        }\n        $this->logger = $logger;\nIn my mind the logging framework ought only be included if you need to get logs for one reason or another. If you don't need logs then the whole Net/Logger/* infastructure is unnecessary and could be seen as bloat.\nAlso, idk if the php5 branch should use the abstract keyword if the master branch wouldn't per https://github.com/phpseclib/phpseclib/pull/242 . I think some resolution on that would be good. Like I said in that ticket I'm a bit on the fence on that one..\n. Any updates on this? My comments about the abstract thing should be ignored. See my comments in #242 .\n. Per https://github.com/phpseclib/phpseclib/pull/255#issuecomment-33562010 let's hold off on this until I can move the fsockopen() that phpseclib does to the login() function. Then instead of having to have the logger defined in the constructor (which I'm not a big fan of) we can have it instantiated this way:\nphp\n$ssh = new \\Net\\SSH2('example.com', 22);\n$ssh->enableLogging(SSH2::LOG_SIMPLE);\n$ssh->login('username', 'password');\nI do like the branch and I do want to see it merged but I just think it's better this way than in the constructor.\nThanks!\n. So I think we're ready for this feature to be implemented as described since the connection now takes place in login() instread of __construct() :)\n. I guess I didn't see this PR request when it was made lol. Anyway it looks good to me!\n. On the subject of simpler / more readable...  https://github.com/phpseclib/phpseclib/pull/221 was merged with php5 even though I think it impairs the readability a little bit. So using that as precedent readability, alone, isn't sufficient. Among other things, improved readability in the php5 branch can increase the frequency with which conflicts occur..\nPersonally, I'm a bit on the fence with the whole readability vs. increased likelihood of conflicts thing.\n. Actually, I'm thinking we should go ahead and do this. If we were concerned about mergability over readability maybe https://github.com/phpseclib/phpseclib/pull/201 shouldn't have been merged?\n. I'm ok with it being merged. https://github.com/phpseclib/phpseclib/pull/247 actually incorporates this.\n. https://github.com/terrafrost/phpseclib/commit/e90648c7a54f0cb4dfe11ffc725be84235c15d8c#diff-82a5983a6daace4acbcc65edf2dfb605R1772\nThe ssh-agent PR kinda complicates this. I mean I guess we could do if ($password instanceof Crypt_RSA) {...} elseif ($password instanceof System_SSH_Agent) { ... } but is there a better way? I think switch statements are a lot more readable than a bunch of if's / elseif's.\n. phpseclib should already be using PSR-0 style although I don't see anything wrong with the php5 branch using PSR-4 style if it wants to.\nAnd I'd say the master branch is the canonical version. If the php5 branch was the canonical version then it'd be better to have that be master and the current master be a php4 branch.\nBesides, all the documentation is for phpseclib without namespaces and updating that would not be fun. Really, I think a complete update of the look and feel and what not of the documentation might be in order but I'm thinking that's a good GSoC (Google Summer of Code) project (I want a free trip to Mountain View for the mentor summit lol)\n. I'd like phpseclib (non camel case) better\n. idk..  either work lol.\n. You must be using 0.3.5. There was a commit a few months back that fixed thist:\nhttps://github.com/phpseclib/phpseclib/commit/30408ff8fba4cd78fdc816dd63d99cdb5fa8b2ab\nA release has not been made since that fix was implemented but using the latest Git version should none-the-less fix this for you. You can download the latest git version here:\nhttps://github.com/phpseclib/phpseclib/archive/30408ff8fba4cd78fdc816dd63d99cdb5fa8b2ab.zip\n. It's hard to say without seeing some code but my guess is that you're passing the public key in as a string and not as a Crypt_RSA object. Can you do var_dump(func_get_args()) in the login() method of Net/SSH2.php and tell me what you get back?\nThanks!\n. So, in so far as PHP knows, you are indeed not passing a Crypt_RSA object but rather an empty string. I don't know that there's much more I'm gonna be able to tell you than that...\n. I don't like the fact that the visibility is explicitly being changed.\nSee http://aperiplus.sourceforge.net/visibility.php\nAmong other things they're an attempt to fix a problem that was never problem in the first place.\nIt'd also probably break SCP as SCP (which doesn't extend SSH1 or SSH2) calls functions that are otherwise marked as private.\nAlso, see this:\nhttp://stackoverflow.com/a/4534385/569976\nAt some point I'd like to add unpadded RSA explicitly as an option but I have not yet done so. Until then this is the best you're going to be able to do.\n. The consensus at https://github.com/phpseclib/phpseclib/issues/243 is that phpseclib should be used not PhpSecLib or whatever..\n```\n    /*\n     * Returns when a string matching the regular expression $expect is found\n     /\n    const READ_REGEX = 2;\nconst MSG_DISCONNECT = 1;\n\nconst MSG_IGNORE = 2;\nconst MSG_UNIMPLEMENTED = 3;\nconst MSG_DEBUG = 4;\n```\nLooks like you're indenting with tabs and then switching to spaces? The correct indentation should be four spaces - not one tab.\nif (!defined('SSH2::LOGGING')) {\n        return false;\n    }\nThat doesn't look right.\nif (is_object($password) && strtolower(get_class($password)) == 'crypt_rsa') {\n        return $this->_privatekey_login($username, $password);\n    }\nYou probably ought to be doing Crypt\\RSA there. grep the codebase for instances of get_class() to see where else you should be doing it. I note you are doing that you are doing it in Net/SCP.php so nice job for catching that. But there you're still doing strtolower. I don't believe that's necessary on PHP5.\nAlthough that said I think https://github.com/phpseclib/phpseclib/pull/242 ought to be merged and that'd cause a conflict with this. What if you add mpscholten's repo as a remote, merge his branch with yours and then update your branch accordingly? Or something like that idk lol.\nW.r.t. auto-loading...  one of the things you can do (currently) with Net/SSH2.php is control which symmetric key algorithms are used by simply deleting the relevant file in the Crypt/ directory. Like if you want to force SSH2 to use AES just delete Crypt/RC4.php and Crypt/Twofish.php, etc, from the Crypt/ directory. I think that's kinda a cool (currently undocumented) feature and I think it'd be cool if the namespace'd version could perserve that and, right now, it doesn't look like it does.\n. > I don't like this, nobody should ever touch the Crypt-directory just for changing the behavior of SSH.\nIn theory no one should be calling private methods either but sometimes I tell them to do it none-the-less. Usually it's to assist me in debugging stuff but sometimes it's because the official functionality doesn't exist it (eg. unpadded RSA).\nSame thing with this. Although not everyone would benefit from it it's a heck of a lot easier for me, for debugging purposes, or whatever, to have someone delete a few files from the file system than it is to have them go into the code and make actual changes in the code.\nI mean, ideally, I'd be logging into every SSH server that people had problems with but that's just not realistic. Some people just can't give me access. Well at least not without risking their jobs idk.\nAlso, you don't have to install phpseclib via composer or PEAR. You can also download the zip file and just dump the contents into your projects directory. I don't see anything wrong with those people modifying what lives on the filesystem.\nIdk...  I don't think we should go out of our way to accommodate people in that scenario but if it's not too much trouble I think we should.\n\nSince I couldn't do a pull with #242 (way too many conflicts) I went ahead and made the same changes to the get_class calls.\n\nThe conflicts actually kinda make me think maybe a new PR might be better idk. Like if you have a PR with 100 commits and of which 99 were undone by the 100th one...  then at that point I think you'd be better off just copy / pasting the files into a single commit.\nObviously this PR isn't that bad but idk. Food for thought maybe...\n. The list of supported symmetric key ciphers is dynamically built up from what it can find on the filesystem. If it's not on the filesystem it won't be called because phpseclib won't tell the server it supports it. See this:\nhttps://github.com/phpseclib/phpseclib/blob/1c2796e3eb44eabc50188e217a3c0c5c7d0b96e6/phpseclib/Net/SSH2.php#L1045\n. I like the idea of shipping an auto loader. For the documentation we can add a link to phpseclib.sourceforge.net saying \"Differences between phpseclib-php5 to phpseclib-master\" or some such.\n. I think it's acceptable if the unit tests have a different CS than the regular code base as I sorta view them as a distinct beast.\nAnyway, I generally defer to bantu when it comes to unit test changes so I'll let him take a look.\n. A require_once wouldn't help. If the workbench project requires phpseclib then the workbench would have it's own separate copy of phpseclib downloaded and you'd have two distinct locations for Crypt/Random.php.\nSee this:\nhttps://github.com/phpseclib/phpseclib/pull/217#issuecomment-32728785\n. I'll do that as time permits.\n. I think splitting this up into multiple PRs is a good idea.\n\nThe problem with SSH2 and logging is that it performs too many things in the constructor, which we should fix instead. A constructor should setup dependencies, it should not cause any side effects such as opening network connections.\n\nI disagree.\nI think the approach you're proposing definitely makes the code more testable but I think it does so at the cost of usability and I think the library ought to prioritize usability over test-ability. I don't have a problem doing the actual fsockopen in the login() function even though the hostname and port are defined in the constructor (as proposed at https://github.com/phpseclib/phpseclib/pull/28#issuecomment-33202812) but I don't like the idea of a hypothetical connect function that needs to sit between the constructor and the login function.\nAlso, I think the various modes ought to be set in a consistent manner. If Net/SSH2 is going to have the mode be set in the constructor so, too, should Math/BigInteger. But then that makes Math/BigInteger's API really convoluted. What would it look like at that point? Like this?:\nphp\n$one = new Math\\BigInteger();\n$one->setValue(1);\nI think that's a bit impractical. I think new Math\\BigInteger(1) is a ton better and more intuitive.\nAnd, really, save for consolidated unit tests it's not something you should be doing anyway. As bantu said, what do you do if you have one BigInteger that's internal and one that's GMP? I mean I guess you could convert them to the same format but then what format should the result be in?\nLet's consider a hypothetical Net/SSH2 API where the mode is set via the constructor. So let's say we wanted to do bcmath for bigint's and mcrypt for AES. How would we do that? Maybe like this?:\nphp\n$ssh = new Net\\SSH2(Math\\BigInteger::MODE_BCMATH, Crypt\\AES::MODE_MCRYPT)\nOr maybe it's the other way around. Maybe it's the biginteger mode that goes first and the AES mode that goes second. And what if I want to do TripleDES as mcrypt? Is that the fifth or sixth parameter?\nHere's another idea:\nphp\n$ssh = new Net\\SSH2(Math\\BigInteger::MODE_BCMATH | Crypt\\AES::MODE_MCRYPT)\nSo here the order doesn't matter. But then here we're limited to 32 possible flags. And if we want to add a new cipher we'd have to...  what, exactly? See what the largest MODE constant currently is and then do that mode * 2? And with this approach, too, the choice isn't BCMATH or INTERNAL. GMP is also a valid choice. So biginteger would need to take up 3 bits. I mean I guess you could do two too - like maybe GMP is 11, bcmath is 10 and internal is 00 and 01 is reserved or something but that just seems excessively complicated.\n. > For SSH2 the problem can be easily fixed without changing any API by deferring connection establishment until the connection is actually required (e.g. login()). A public connect() method could be exposed as well, but calling it would only be required if connection is suppossed to be established right away without login in or performing any other task.\nI don't even think a connect() method would even be needed at this point. Even in the \"No Authentication\" example login() is still called:\nhttp://phpseclib.sourceforge.net/ssh/auth.html#noauth\nIt's just called without a password.\nphpseclib wouldn't even work if you went straight from $ssh = new Net_SSH2('domain.tld') to $ssh->exec('ls -la'). From exec's code:\nphp\n        if (!($this->bitmap & NET_SSH2_MASK_LOGIN)) {\n            return false;\n        }\nIf you haven't logged on successfully it'll return false.\nAnyway, if we do move the fsockopen to login we could have logging work like this:\nphp\n$ssh = new \\Net\\SSH2('example.com', 22);\n$ssh->enableLogging(SSH2::LOG_SIMPLE);\n$ssh->login('username', 'password');\nAlso, see https://github.com/phpseclib/phpseclib/pull/28#issuecomment-33202812 and please comment.\n\nUse static methods instead of mode constants\n\nYou mean like this?:\nphp\nBigInteger::setMode(BigInteger::MODE_INTERNAL)\n. > An extra connect method makes sense for applications where it is desirable to first check whether the remote host is alive before investing time into getting the username and password/key/whatever to login.\nThat works. Although let's table that for this PR since that's something that can be done for the PHP4 version too. For the time being we can continue to use the NET_SSH2_LOGGING stuff until that behavior is changed in master (mpscholten's logging PR could change this too)\n\nsetMode() might be a bit ambiguous, though. The name might even conflict with \"the mode of operation\" of ciphers (e.g. CBC). Maybe we can come up with something a tad better.\n\nI guess we could do setEngine().\n. > How about setAdapter?\nI like setEngine (as I proposed) more.\n\nFrom Crypt/*::setMode() Which is one of Base::MODE_INTERNAL, Base::MODE_MCRYPT, Base::MODE_CBC, etc.\n\nThat's why doing setMode() is a bad idea.\n\nCrypt_Base already has a (non-static) property called $engine which determines whether internal or mcrypt. So this thing should be called \"engine\" for consistency.\n\nI agree.\n\nHowever: If (re)changing the \"mode of operation\" ($mode) with a public method from \"the outside\" the current internal cipher state (internal $buffers etc..) has to be also reset/cleared (with: $changed = true)....and maybe some other internal $mode depended settings also.\nSo... a (public) (and non-static) method like setMode() must be deeply tested for each cipher...\n\nHonestly, I don't even know why you'd want to in-line change the mode of operation. If you need to just create a whole new Crypt_* object. I don't think there should be a setMode() method.\nDoing setEngine is less problematic although it'd still require a decent amount of rewriting / refactoring. With that we could dynamically select the engine when encrypt() or decrypt() are first called, kinda like how _setupMCrypt() is currently called.\nBut still...  this can be done for the PHP4 version, too, and should not be part of a PHP5 only branch. Just like with setLogging() for the Net/SSH2.php stuff.\n. So I guess some of the things this PR addressed are pending on several other changes for which PRs may or may not exist. This PR has touched on so many different things that I've kinda lost track tbh. So let's maybe do separate PR's for the things that aren't pending and hold off on the other changes until those \"action items\" that those changes are waiting on are concluded.\n. Nice catch!\n. Get me two separate logs demonstrating different results? You can enable logging by doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); right after you include Net/SSH2.php and then do echo $ssh->getLog() after the $ssh->exec().\nWithout knowing more...  who knows...  maybe you're getting different results because a file is writing to another file in /var/www whenever it's accessed. idk.\n. @petrich - that's weird that it works with mcrypt but not internal mode. Per the comments in my PR I'm thinking maybe it's just a timing issue. Maybe mcrypt is able to decode all the packets before the server sends the exit-status whereas the internal mode can't quite keep up as fast so it's getting the exit-status before all the data has been sent idk.\n. @simplewhite - I believe the PR I just made should fix the issue for you. If you could test it out and let me know that'd be great.\nThanks!\n. I haven't had a chance to review it super thoroughly yet but the benchmarks look nice! Were the \"current phpseclib\" benchmarks ran with mcrypt as opposed to the internal mode?\n. Why was the include in the example changed to include_once? Even in Net/SSH2.php it's include - not include_once - should Net/SSH2.php be updated as well?\nI'll try to test it after I run some errands. Looking forward to the openssl support PR! :D\n. Works for me. Wanna do a PR for that? :)\n. Yah - that works. Thanks!\n. @petrich - any updates on this?\n. Which commands are you trying to run?\nSome commands don't stop unless you manually intervene. eg. ping 127.0.0.1. That'll ping until you hit Ctrl + C.\n. I found this article discussing become:\nhttp://iain.cx/profile/become.html\nUnfortunately, it didn't provide any examples.\nIt basically looks like it's doing a variation on sudo sh. If that's the case that's why it wouldn't work. exec() only returns if the command \"ends\" and if you try to run a shell than the command that started that shell doesn't end until you exit out of that shell. Which you can't really do with exec() (unless you're using PTY mode and I suspect you're not)\n. What are you wanting to tunnel? I wrote a preliminary one a while ago and you can tunnel stuff like HTTP requests that you hand wrote but unless you're tunneling hand written requests it's not gonna be of much use. You can't tunnel SQL unless you write your own pure PHP SQL client because mysql / mysqli can't proxy SQL through PHP. See this:\nhttp://grokbase.com/t/php/php-internals/133ds3c53r/idea-add-wrapper-support-to-mysqli-connect\nAs for double tunneling...  I assume you mean tunneling from computer A to computer B and then tunneling from computer B to computer C? If so then all phpseclib could help you out with is computer A. You'd need to install an SSH server to tunnel from B to C. I mean I guess you could also install phpseclib and, with your own custom written client software, relay the requests onto the destination..\n. Just because you can SSH into a box doesn't mean you can SSH from it. If a CLI SSH client is unavailable to you...  could you install phpseclib? If not then if PHP was already installed maybe you could run phpseclib as a phar? idk..\n. I can do that. Although I should have ssh-agent support done within a few days if you want to wait.\nAlso, generally speaking, I like to let features build up before doing releases. Doing a release is kinda a hassle and I don't like to do it that often and although I'm willing to make a one off exception (more so for big projects, like yours, lol), long term, I don't feel that it's that sustainable. Among other things, time spent doing releases is time spent not doing dev and releasing a new version every time a line changed...  it's gonna bog stuff down fast. See https://github.com/phpseclib/phpseclib/issues/179\nBtw, what did you think of the API I proposed for ssh-config stuff?:\nhttps://github.com/phpseclib/phpseclib/pull/28#issuecomment-33202812\n. @taylorotwell - I just submitted a PR for ssh-agent support. I'll let it stew for a few days to give people a chance to review it and comment on it and then I'll work on a release.\n. @taylorotwell - 0.3.6 has been tagged / released.\n@bantu - the release process is as follows:\n1. Create phpseclib0.3.6.zip and have it contain the files in the phpseclib/ directory.\n2. Log into http://sourceforge.net/, go to Files -> Add File and upload the file.\n3. Update the docs repo in the phpseclib project to point to the 0.3.6 download link. The files that need to be modified are as follows:\nindex.html\n   math/intro.html\n   rsa/intro.html\n   sftp/intro.html\n   ssh/intro.html\n   x509/intro.html\n4. Copy contents of phpseclib/ directory to C:\\pear\n5. Commit and push these changes to git\n6. Upload these updated .html files to web.sourceforge.net (documentroot is symlinked in home directory)\n7. Modify http://pastebin.com/XGjpswhP to have $dirs directory include System and update all occurances of 0.3.5 to 0.3.6 and save as package.php.\n8. Delete c:\\pear\\packaged directory\n9. Create SSH_Agent.xml in c:\\pear\\System directory (all the other directories already have .xml files within them)\n10. Copy c:\\pear\\Net\\SFTP\\Stream.php to c:\\pear\\Net\\Stream.php\n11. Run \"php5 package.php\" (from c:\\pear)\n12. Delete c:\\pear\\channel directory\n13. Save http://pastebin.com/bEwZ7rXC as pirum.xml in C:\\pear\\channel directory.\n14. Run the following commands (in c:\\pear)\nphp5 pirum.php build channel\nphp5 pirum.php add channel packaged\\Crypt_AES-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_Blowfish-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_DES-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_Hash-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_Random-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_RC4-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_Rijndael-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_RSA-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_TripleDES-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Crypt_Twofish-0.3.6.tgz\nphp5 pirum.php add channel packaged\\File_ANSI-0.3.6.tgz\nphp5 pirum.php add channel packaged\\File_ASN1-0.3.6.tgz\nphp5 pirum.php add channel packaged\\File_X509-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Math_BigInteger-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Net_SFTP-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Net_SSH1-0.3.6.tgz\nphp5 pirum.php add channel packaged\\Net_SSH2-0.3.6.tgz\nphp5 pirum.php add channel packaged\\System_SSH_Agent-0.3.6.tgz\n\n\nDelete all *.tar files in the get/ directory\nRename index.html to pear.htm, delete pirum.xml and upload the contents of the channel directory to web.sourceforge.net.\nUpdate README.md to show latest version and commit and push\nTag the release: git tag -a 0.3.6 -m '0.3.6 release' and git push origin --tags.\nGo to https://freecode.com/projects/phpseclib, scroll towards bottom and click on \"submit a release\". Sum up changes and submit. (I think anyone can do this?)\n\nSteps 1-5 concern the website. Steps 6-16 concern the PEAR channel. Steps 17-19 concern git.\nThe process is currently a little more of a hassle because I do most of my dev stuff on a new laptop but have been kinda lazy and haven't moved my pear stuff over from my old laptop to the new one.\n. There is the docs repo:\nhttps://github.com/phpseclib/docs\nI'm not so sure the PEAR channel config stuff ought to live within it though. idk...  maybe we could have the docs repo and a website repo which has docs as a submodule or something. Then I suppose a git deploy hook could be created idk..\n. You could do $ssh->setTimeout() and then $ssh->reset().\nAlternatively, if you did exec with a PTY you could do $ssh->write(\"\\x03\") (\"\\x03\" is equiv to Ctrl + C).\n. Yes - it's something I'd like to do at some point. Unfortunately, I have a good amount of other phpseclib stuff that's higher priority atm.\n. This has been completed.\n. The first proposed change looks good. For the second.. if we have all of the hmac what do we care if the connection was closed or not? It seems like maybe $hmac === false || strlen($hmac) != $this->hmac_size might be better?\nAlso, I think a subtly different error message might be useful to allow people to pinpoint precisely the error is. ie. instead of user_error('Error reading from socket') for the second error maybe we could do user_error('Error reading socket').\nI'll try to look at the other issue you reported today or tomorrow as time permits.\nThanks!\n. Without SSH2 access to a system demonstrating the problem it's going to be tough to diagnose but...  maybe you can sorta diagnose by proxy for me. So if you could do the following (unless you'd be willing to give me SSH access!) if you could do this that'd be great:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n                $this->channel_status[$channel] = NET_SSH2_MSG_CHANNEL_CLOSE;\n\n\n-----[ AFTER, ADD ]------------------------------------\n\necho \"THIS FAR\\r\\n\";\n```\nMy expectation is that that line would be echo'd out in both the stalling and non-stalling commands.\nedit: if you want to give me SSH access you can email me the info at terrafrost@php.net. Unfortunately, I don't think I'm gonna be able to install HPUX as I don't think that's free and idk if that'd even work with VirtualBox.\n. Let's actually take a step back for a minute. You say you're using sudo. Does that mean you're doing something like this?:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#sudo,\nIf so that example does not use $ssh->exec(). Maybe you're using $ssh->enablePTY()? When I try it I get sudo: no tty present and no askpass program specified, which makes sense since I was doing echo $ssh->exec('sudo print_manifest') (as I had initially assumed you were doing)\nEither way if you could post the code you're using that would be great.\nAlso, SSH access, as requested above, would be quite helpful too. Trying to debug by proxy, as we've done thus far, could potentially take quite a few days, whereas me debugging directly could take a single day.\n. I'll take a look when I get home. There's not much I can do about the PEAR channel at work.\n. The PEAR channel should now be installable, although you may need to do pear update-channels. Issue # 1 in https://sourceforge.net/p/phpseclib/bugs/5/ was due to a typo on my part. Issue # 2 was due to some changes I made to the tarball builder to accommodate SFTP/Stream.php which prevented Net_SFTP v0.3.5 from being installed via PEAR for a little while. Apparently those changes didn't work so well.\nReally, the whole tarball builder could benefit greatly from a rewrite but, honestly, it's extremely low on my priority list.\nAlso, that said, while working on this it occurs to me there are probably going to be other issues with the 0.3.6 PEAR channel. In particular, the use of Crypt/Base.php. idk if multiple *.tgz files can include the same file or if Crypt_Base will need to be it's own package that all others require. I'll need to play around with that...\nhttps://sourceforge.net/p/phpseclib/bugs/4/ has not been addressed yet.\n. The Crypt_Base issue has been resolved as well now.\nI'll look at https://sourceforge.net/p/phpseclib/bugs/4/ and close the sourceforge.net thing as time permits.\nThanks!\n. See the PR. https://sourceforge.net/p/phpseclib/bugs/4/ doesn't do .. and as such will (probably) never find openssl.cfg. The ..'s are needed 'cause dirname(__FILE__) for Crypt/RSA.php will return Crypt/, whereas openssl.cfg resides in the parent of that directory.\nI'll have to update the *.xml when I get home.\nAlso, per bantu, new tickets can no longer be created at the sourceforge bugtracker. Unfortunately, I do not know how to link people to this one..\n. I don't think the proposed change would make it user-configurable so much as it'd make it so that the config file is put in the same place as config files for other PEAR apps. eg.\nhttp://pear.php.net/manual/en/pyrus.configuration.system.php\nI suspect most PEAR users aren't doing that but I see this as more of a PEAR thing - not a user-config thing.\n. There's no real reason why Net/SSH2.php needs to live inside /etc/pear, either, but if you're running PEAR that's what you get. It's kinda why you run PEAR I guess.\nIf PEAR (per the way it's configured) wants to place it's *.php files in one directory and it's config files in another...  that's PEAR's prerogative I figure.\n. Yah - PEAR files probably by default normally go in /usr/share/php.\nI can't comment as to openssl.cnf. You're understanding of it's use, bantu, is correct. Whether or not it ought to go into /etc/ or whether or not the stuff in /etc/ is supposed to be user-editable...  I can't answer that. Some of that goes to the intentions of the PEAR devs, which I can only speculate upon.\n. I'm okay with doing data_dir.\nI'll try to look at the current issue with Crypt_RSA as time permits.\n\nThat sounds suboptimal indeed. Maybe we should just ditch PEAR support altogether, but @terrafrost probably doesn't want that, hehe.\n\nThere's actually one thing about PEAR that I really like over Composer. You can have a package broken up into multiple files. With Composer it's all or none. If you want Net_SSH2 you're going to get File_X509 as well. With PEAR you just get Net_SSH2. ie. you get only what you need.\nI guess to do that properly in Composer you'd need a separate github repo for each one. Which I suppose PEAR actually kinda does do itself but idk that I really want to do that.\n. Oh. How do we do that?\nAlso,\n\nP.S. not relying on system openssl provided configuration could raise some very strange \"border-case-bugs\", such as https://bugs.php.net/66833)\n\nCrypt_RSA only needs it for one function. The function for creating private keys. As such it doesn't really matter what the default digest is because Crypt_RSA doesn't use that anyway. \n. If I copy / paste echo \"\u00d6sterreich | \u00c4\u00dc\u00df\u00fc\u00e4\u00f6\" > umlaut-test.txt into PuTTY the exact same thing happens to me. Ultimately, this isn't so much an SSH issue so much as it is a bash issue. The following helped me overcome this issue:\nhttp://cygwin.com/cygwin-ug-net/setup-files.html\nie. create a .inputrc in your home directory with the following contents:\n```\nIgnore case while completing\nset completion-ignore-case on\nMake Bash 8bit clean\nset meta-flag on\nset convert-meta off\nset output-meta on\n```\nThere are other issues with special characters as well. See https://github.com/phpseclib/phpseclib/issues/105#issuecomment-18076834\nAnyway, bash specific questions (which I'd say this one is) would be better posted on, for example, superuser.com.\n. In 0.3.6 Crypt_RC4 extends Crypt_Base which defines it.\nIn 0.3.5 Crypt_RC4 implements it internally. Same thing for 0.3.1, 0.3.0, etc.\nMaybe you have PEAR's deprecated Crypt_RC4 installed and you're encountering a conflict from that?\n. $this->PrincipalName = array(\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array(\n                'name-type' => $this->Int32,\n                'name-string' => array(\n                    'type' => FILE_ASN1_TYPE_SEQUENCE,\n                    'children' => $this->KerberosString,\n                ),\n            ),\n        );\nShould probably look more like this:\n$this->PrincipalName = array(\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array(\n                'name-type' => array(\n                                   'constant' => 0,\n                                   'optional' => true,\n                                   'explicit' => true\n                               ) + $this->Int32,\n                'name-string' => array(\n                                     'type' => FILE_ASN1_TYPE_SEQUENCE,\n                                     'min' => 0,\n                                     'max' => -1,\n                                     'constant' => 1,\n                                     'optional' => true,\n                                     'explicit' => true\n                                     'children' => $this->KerberosString\n                                  ),\n            ),\n        );\nThe constant's are necessary because of the [0] and [1] and iirc everything that's a constant is implicitely optional. The explicit => true bit assumes that the module is an explicitely tagged module. It'd say so at the top of the ASN1 defintion I believe). eg. DEFINITIONS EXPLICIT TAGS ::= vs. DEFINITIONS IMPLICIT TAGS ::=. The max = -1 is necessary because there is no max.\nPA-DATA ::= SEQUENCE {\n        -- NOTE: first tag is [1], not [0]\n        padata-type [1] Int32,\n        padata-value [2] OCTET STRING -- might be encoded AP-REQ\n}\nTry doing the whole array('constant' => 1) and array('constant' => 2) thing. Don't forget to say 'optional' => true and 'explicit' (or 'implicit') => true.\nAS-REQ ::= [APPLICATION 10] KDC-REQ\n$AS-REQ = array('class' => FILE_ASN1_CLASS_APPLICATION, 'cast' => 10) + $KDC-REQ\nIf class isn't present it's assumed to be FILE_ASN1_CLASS_UNIVERSAL or (if constant is present) FILE_ASN1_CLASS_CONTEXT_SPECIFIC.\nKDC-REQ ::= SEQUENCE {\n        -- NOTE: first tag is [1], not [0]\n        pvno [1] INTEGER (5) ,\n        msg-type [2] INTEGER (10 -- AS -- | 12 -- TGS --),\n        padata [3] SEQUENCE OF PA-DATA OPTIONAL\n            -- NOTE: not empty --,\n        req-body [4] KDC-REQ-BODY\n}\nSee above for OPTIONAL. I'm not sure why padata has OPTIONAL as a keyword when the others don't cause I'm pretty sure everything in square brackets is optional as well. It's possible it was just an oversight on the part of the spec writers (they're humans after all too lol) or it's possible there's some obscure ASN1 rule I'm either forgetting or never knew to begin with. ASN1 has a ton of obscure rules. To accomodate X.509 File_ASN1 has to support a lot of them. I'm pretty sure there's nothing in your post that File_ASN1 can't handle - the trick is finding out how.\nCould you maybe provide a link to the Kerberos specs?\n. > Interestingly, KerberosString is defined as a GeneralString that is limited to the IA5String character set - due to having been defined as GeneralString originally without thought to the limitations / consequences of it, and various implementations do/don't handle control codes properly and so forth, so to keep it compatible but reign in the chaos they redefined it to be limited to IA5String characters. I wasn't sure how to implement it other than just as a GeneralString, but wasn't too worried for now since as far as our usage goes we won't have any non-IA5String characters in our principals / etc anyways and it could be enforced in a layer above the ASN layer\nYah - I wouldn't worry too much about the string type atm.\n\nIs there a way to limit ranges (i.e. Int32 / UInt32 which are what you'd expect, and Microseconds which is 0..999999)?\n\nNot atm. You could enforce that at a layer above the asn1mapping though. I do stuff like that with File_X509 but not with anything like 0...999999.\n. I'll play around with it as time permits. Do keep in mind that I'm doing some traveling atm. Today's my last full day in Tokyo and tomorrow I'll be flying out to Seoul, South Korea, so, speaking pragmatically, providing support, atm, isn't my highest priority. So it could be a few days before I respond.\nThanks!\n. So what I'd do is sorta develop the ASN1 notation incrementally. Don't try to do everything all at once. eg.:\n``` php\n<?php\ninclude('File/ASN1.php');\n$KDC_REQ = array(\n    'type' => FILE_ASN1_TYPE_SEQUENCE,\n    'children' => array(\n        'pvno' => array(\n            'constant' => 1,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY),\n        'msg-type' => array(\n            'constant' => 2,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY),\n        'padata' => array(\n            'constant' => 3,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY),\n        'req-data' => array(\n            'constant' => 4,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY)\n    )\n);\n$AS_REQ = array(\n    'constant' => 10,\n    'optional' => true,\n    'explicit' => true\n) + $KDC_REQ;\n$str = 'aoHfMIHcoQMCAQWiAwIBCqSBzzCBzKAHAwUAAAAAAKEzMDGgAwIBAaEqMCgbJm1pbmlzZXJ2ZXIx'.\n'LmRhbGxhcy5jcmVhdHVpdHkuaW50ZXJuYWwkoiYbJE1JTklTRVJWRVIuREFMTEFTLkNSRUFUVUlU'.\n'WS5JTlRFUk5BTKM5MDegAwIBAqEwMC4bBmtyYnRndBskTUlOSVNFUlZFUi5EQUxMQVMuQ1JFQVRV'.\n'SVRZLklOVEVSTkFMpREYDzIwMTQwMTMxMDEyNzU1WqcGAgQ9L+nmqA4wDAIBEgIBEQIBEAIBFw==';\n$asn1 = new File_ASN1();\n$decoded = $asn1->decodeBER(base64_decode($str));\n$result = $asn1->asn1map($decoded[0], $AS_REQ);\nprint_r($result);\n```\nAnd build on it from there. If you get an error or a NULL value you know you need to focus more on that particular part of ASN1 notation.\n. Does https://github.com/terrafrost/phpseclib/commit/a478b7486074b09337bcb774ad55249bcf7b315d fix the issue for you?\n. > 1) Bit string encoding (phpseclib does it right, kerberos spec doesn't - it says to encode all 32bits - may or may not work with various kerberos implementations to do it ASN1 correctly) - is there a way to override encoding of bit strings (Is that what the 'special' argument is for, I see it's for some kind of custom formatting or something by passing in functions somehow)?\nLooking at your implementation I see that you did stuff like this:\nphp\n        $this->ASN1['KDCOptions'] = array(\n            'type' => FILE_ASN1_TYPE_BIT_STRING,\n            'mapping' => array(\n                'reserved0',\n                'forwardable',\n                'forwarded',\n                'proxiable',\n                'proxy',\n                'allow-postdate',\n                'postdated',\n                'unused7',\n                'renewable',\n                'unused9',\n                'unused10',\n                'opt-hardware-auth',\n                'unused12',\n                'unused13',\n                'unused14',\n                'unused15',\n                'unused16',\n                'unused17',\n                'unused18',\n                'unused19',\n                'unused20',\n                'unused21',\n                'unused22',\n                'unused23',\n                'unused24',\n                'unused25',\n                'disable-transited-check',\n                'renewable-ok',\n                'enc-tkt-in-skey',\n                'unused28',\n                'renew',\n                'validate',\n            ),\n        );\nSeems like that same sort of thing would work. Just pad the array with as many unusedxx as you need.\nI'll take a look at your second issue as time permits.\n. All you should need to do is do something like $KDCOptions = array('disable-transited-check', 'renew'). If you don't specify it in that array it should be assumed to be 0 by File_ASN1.\n. You're right. I looked at the DER specs again (and at the code) and it trims off leading 0's. The relevant portion of the spec (for my own benefit):\n\n8.6.2.4 Where ITU-T Rec. X.680 | ISO/IEC 8824-1, 21.7, applies a BER encoder/decoder can add or remove trailing 0\nbits from the value.\nNOTE \u2013 If a bitstring value has no 1 bits, then an encoder (as a sender's option) may encode the value with a length of 1 and with\nan initial octet set to 0 or may encode it as a bit string with one or more 0 bits following the initial octet.\n\nI'll try to commit the change you suggested later today.\nThanks!\n. I made a commit to my local branch for the change you recommended:\nhttps://github.com/terrafrost/phpseclib/commit/c8bf68ac026d5d9dca28f9d3eb045a712248265c\nFor the Ticket issues you're having...  can you post a sample AS-REP that contains a ticket? The code you posted at http://pastebin.com/5Jwd22cp contains AS-REQ - not AS-REP.\nThanks!\n. There's not a really good solution to that, unfortunately :(\nBut there is a workaround. Make KDC-REP's ticket an implicitly tagged SEQUENCE and have Ticket be it's only child. The reason this works is described at EXPLICIT vs IMPLICIT tags in ASN.1\nI think that's the best we're going to be able to do in this case because we have a class / cast and a constant competing and the parser has no way of knowing which should come first. Unless you do the implicit tagging trick. Hopefully that works on encodes as well. If not I assume you'll let me know lol.\nThe basic idea:\nphp\n        'ticket' => array(\n            'constant' => 5,\n            'optional' => true,\n            'implicit' => true,\n            'min' => 0,\n            'max' => 1,\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => $Ticket),\nvs. \nphp\n        'ticket' => array(\n            'constant' => 5,\n            'optional' => true,\n            'explicit' => true) + $Ticket,\nMy full code:\n``` php\ninclude('File/ASN1.php');\n$krbData = 'a4IC3jCCAtqgAwIBBaEDAgELoi8wLTAroQMCAROiJAQiMCAwHqADAgEXoRcbFUNSRUFUVUlUWS5ORVR0ZXN0dXNlcqMPGw1DUkVBVFVJVFkuTkVUpBUwE6ADAgEBoQwwChsIdGVzdHVzZXKlggFOYYIBSjCCAUagAwIBBaEPGw1DUkVBVFVJVFkuTkVUoiIwIKADAgECoRkwFxsGa3JidGd0Gw1DUkVBVFVJVFkuTkVUo4IBCDCCAQSgAwIBF6EDAgEBooH3BIH0AQlxgm/j4z74KiGsJJnROhh8JAiN7pdvlnkxCYKdG6UgdfK/K0NZ+yz+Xg4kgFO1cQ4XYT4Fm3MTmOHzlFmbzlVkUqBI/RnWA9YTREC9Q7MfPPYfRxRG/C6FlahxHCOKj9GUj7bXg7Oq3Sm+QsKTS2bZT05biNf1s7tPCkdIOO0AAd7hvTCpTNAKl+OLN4cpA6pwwk5c3h58Ce5/Uri5yBmrfwgkCD5AJUAI/WH56SEEvpifLc6C96w/7y2krAiZm5PyEO0HVhTzUjKGSHoSMb+Z3HI/ul+G9z0Z4qDuNjvgP0jKdrKiwWN00NjpiQ0byZd4y6aCASEwggEdoAMCAReiggEUBIIBEHyi8DIbdcfw2DpniBJ3Sh8dDaEbQx+gWx3omCTBEyts4sQGTwgQcqkWfeer8M+SkZs/GGZq2YYkyeF+9b6TxlYuX145NuB3KcyzaS7VNrX37E5nGgG8K6r5gTFOhLCqsjjvgPXXqLeJo5D1nV+c8BPIEVsu/bbBPgSqpDwUs2mX1WkEg5vfb7kZMC8+LHiRy+sItvIiTtxxEsQ/GEF/ono3hZrEnDa/C+4P3wep6uNMLnLzXJmUaAMaopjE+MOcai/t6T9Vg4pERF5Waqwg5ibAbVGK19HuS4LiKiaY3JsyYBuNkEDwiqM7i1Ekw3V++zoEIxqgXjGgPdrWkzU/H6rnXiqMtiZZqUXwWY0zkCmy';\n$PA_DATA = array(\n    'type' => FILE_ASN1_TYPE_SEQUENCE,\n    'children' => array(\n        'padata-type' => array(\n            'constant' => 1,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_INTEGER\n        ),\n        'padata-value' => array(\n            'constant' => 2,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_OCTET_STRING\n        )\n    )\n);\n$PrincipalName = array(\n    'type' => FILE_ASN1_TYPE_SEQUENCE,\n    'children' => array(\n        'name-type' => array(\n            'constant' => 0,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_INTEGER\n        ),\n        'name-string' => array(\n            'constant' => 1,\n            'optional' => true,\n            'explicit' => true,\n            'min' => 0,\n            'max' => -1,\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array('type' => FILE_ASN1_TYPE_GENERAL_STRING)\n        )\n    )\n);\n$Ticket = array(\n    'class'    => FILE_ASN1_CLASS_APPLICATION,\n    'cast'     => 1,\n    'optional' => true,\n    'explicit' => true,\n    'type' => FILE_ASN1_TYPE_SEQUENCE,\n    'children' => array(\n        'tkt-vno' => array(\n            'constant' => 0,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_INTEGER\n        ),\n        'realm' => array(\n            'constant' => 1,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY\n        ),\n        'sname' => array(\n            'constant' => 2,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY\n        ),\n        'enc-part' => array(\n            'constant' => 3,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY\n        )\n    )\n);\n$KDC_REP = array(\n    'type' => FILE_ASN1_TYPE_SEQUENCE,\n    'children' => array(\n        'pvno' => array(\n            'constant' => 0,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_INTEGER),\n        'msg-type' => array(\n            'constant' => 1,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_INTEGER),\n        'padata' => array(\n            'constant' => 2,\n            'optional' => true,\n            'explicit' => true,\n                        'min' => 0,\n                        'max' => -1,\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n                        'children' => $PA_DATA),\n        'crealm' => array(\n            'constant' => 3,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_OCTET_STRING),\n        'cname' => array(\n            'constant' => 4,\n            'optional' => true,\n            'explicit' => true) + $PrincipalName,\n            //'type' => FILE_ASN1_TYPE_ANY),\n        'ticket' => array(\n            'constant' => 5,\n            'optional' => true,\n            'implicit' => true,\n            'min' => 0,\n            'max' => 1,\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => $Ticket),\n        'enc-part' => array(\n            'constant' => 6,\n            'optional' => true,\n            'explicit' => true,\n            'type' => FILE_ASN1_TYPE_ANY)\n    )\n);\n$AS_REP = array(\n    'class'    => FILE_ASN1_CLASS_APPLICATION,\n    'cast'     => 11,\n    'optional' => true,\n    'explicit' => true\n) + $KDC_REP;\n$str = 'a4IC3jCCAtqgAwIBBaEDAgELoi8wLTAroQMCAROiJAQiMCAwHqADAgEXoRcbFUNSRUFUVUlUWS5ORVR0ZXN0dXNlcqMPGw1DUkVBVFVJVFkuTkVUpBUwE6ADAgEBoQwwChsIdGVzdHVzZXKlggFOYYIBSjCCAUagAwIBBaEPGw1DUkVBVFVJVFkuTkVUoiIwIKADAgECoRkwFxsGa3JidGd0Gw1DUkVBVFVJVFkuTkVUo4IBCDCCAQSgAwIBF6EDAgEBooH3BIH0AQlxgm/j4z74KiGsJJnROhh8JAiN7pdvlnkxCYKdG6UgdfK/K0NZ+yz+Xg4kgFO1cQ4XYT4Fm3MTmOHzlFmbzlVkUqBI/RnWA9YTREC9Q7MfPPYfRxRG/C6FlahxHCOKj9GUj7bXg7Oq3Sm+QsKTS2bZT05biNf1s7tPCkdIOO0AAd7hvTCpTNAKl+OLN4cpA6pwwk5c3h58Ce5/Uri5yBmrfwgkCD5AJUAI/WH56SEEvpifLc6C96w/7y2krAiZm5PyEO0HVhTzUjKGSHoSMb+Z3HI/ul+G9z0Z4qDuNjvgP0jKdrKiwWN00NjpiQ0byZd4y6aCASEwggEdoAMCAReiggEUBIIBEHyi8DIbdcfw2DpniBJ3Sh8dDaEbQx+gWx3omCTBEyts4sQGTwgQcqkWfeer8M+SkZs/GGZq2YYkyeF+9b6TxlYuX145NuB3KcyzaS7VNrX37E5nGgG8K6r5gTFOhLCqsjjvgPXXqLeJo5D1nV+c8BPIEVsu/bbBPgSqpDwUs2mX1WkEg5vfb7kZMC8+LHiRy+sItvIiTtxxEsQ/GEF/ono3hZrEnDa/C+4P3wep6uNMLnLzXJmUaAMaopjE+MOcai/t6T9Vg4pERF5Waqwg5ibAbVGK19HuS4LiKiaY3JsyYBuNkEDwiqM7i1Ekw3V++zoEIxqgXjGgPdrWkzU/H6rnXiqMtiZZqUXwWY0zkCmy';\n$asn1 = new File_ASN1();\n$decoded = $asn1->decodeBER(base64_decode($str));\n$result = $asn1->asn1map($decoded[0], $AS_REP);\nprint_r($result);\n```\n. I can do something like that.\nIn the decodes it'll always be Math_BigInteger but I can make it so that for ASN.1 encoding it can take either.\n. It's not a bug - it's intentional.\nThe code underneath the return can run independently of all the code above it. It does modular exponentiation slightly differently and although the benchmarks I did way back when had the code above (and including) the return running faster I'm not convinced that that's always going to be the case. Rather than delete it I just sorta made it unreachable in the code.\nComments explaining this would probably be worthwhile..\n. It does indeed. Let's keep this open until I add comments mentioning this fact.\nThanks!\n. Looks good! I'll merge it when I get a chance into both master and php5.\n. I'm pretty sure they are correct. Do you have reason to believe that they're not?\n. Oh - you mean the version tag's in the docblock comment. I thought you meant the git taggings.\nAnyway I wouldn't say those really mean anything. If they are when the file/class/method was introduced that might very well be but it'd be by dumb luck lol.\n. I guess we could rename System/SSH_Agent.php to System/SSH/Agent.php and keep System/SSH_Agent.php around and have it include System/SSH/Agent.php for BC purposes.\nPEAR precedent for that naming convention:\nhttps://github.com/pear/Payment_PayPal_SOAP/tree/master/Payment/PayPal\n. Seems like we could actually just do @include_once 'SSH/Agent.php';\n. See https://github.com/terrafrost/phpseclib/tree/ssh-agent-psr0-fix \n. Looks like the version tags are optional in the PEAR CS per http://pear.php.net/manual/en/rfc.header-comments.optional.php so I'd so go ahead and merge it!\n. I'm going to guess you're trying to upload from either Windows or a Linux that's installed on a 32-bit host. I can't really test it out right now but I believe it should work as is on PHP installs that support 64-bit signed ints.\nThe thing is...  put() does a filesize() call. filesize() returns a 32-bit signed int. phpseclib then uses the value returned by filesize() in a while loop. eg. while ($sent < $size).\nIt might be possible to make phpseclib support > 4GB files for uploads (it already supports downloading them) by doing something like $result = fread($fp); if ($read === false) break idk. I'll try to play around with that this evening.\nDo keep in mind that I'm on vacation right now. I'm in Seoul, South Korea, right now. This is the first full day I have of two full days here. After Seoul I'll be going to New Dehli, India. So if I don't get back to you as punctually as you'd like that's why.\n. I could just use the error suppression operator on the phpinfo() (which is kinda what phpBB does in it's startup.php file). There's precedent for this in phpseclib:\nhttps://github.com/phpseclib/phpseclib/blob/fb1296bbec2bb5f05e415cef1d8edc63d0c2334d/phpseclib/File/X509.php#L3178\n. It's a bit of a weird thing that PHP installations have corrupt copies of OpenSSL installed as well lol\n. php\n // I would be interested why these lines don't work ? Certainly coz we reset something\n //echo $ssh->exec('sudo su -');\n //echo $ssh->exec('sudo -s');\nYour assessment is correct - sudo su - doesn't work because the command does indeed reset stuff.\n``` php\n $ssh->write(\"sudo su -\\n\"); //stay blocked here\necho \"here ?\";\necho $output = $ssh->read();\n```\nSo it doesn't actually output \"here ?\"?\nNormally you need to do $ssh->read('[prompt]') or $ssh->setTimeout(1) or something.\nphp\necho $ssh->write('whoami');\nYou should do \"whoami\\n\" there.\n. Probably doing !== true instead of !== 1\n. Looks good! I'd say merge it after those issues are fixed.\nThanks!\n. See https://github.com/phpseclib/phpseclib/commit/e71fc979133c16110d827bbf5316db97648bc463 .\n. What version are you using? If you're not using 0.3.6 try it. And if you are using the latest release version try the latest Git version.\nFailing that get me a copy of the logs but do so using NET_SSH2_LOG_COMPLEX instead. SSH2 logs are generally better than SFTP logs because (if SFTP logs were necessary) SFTP logs can be extracted from SSH2 logs and if SFTP logs won't provide insights into underlying problems with the SSH stream.\nThanks.\n. Try doing this for logging:\nphp\ndefine('NET_SSH2_LOG_REALTIME_FILE', true);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', '/path/to/log.txt');\n. I need to see the logs to diagnose the issue as I am unable to reproduce it.\nYou're not the only person in the universe who's ever tried to run phpseclib on Windows. phpseclib was developed on a Windows box. I have three different SFTP servers installed on my Windows box on different ports for testing purposes (xlight, bitvise and some other one who's name I don't recall) and I am not able to reproduce it. Oh - and also, you're not the first person to transfer a file over 1MB. People have transferring multi GB files without a problem. So when I say that I'm going to need your help to diagnose the issue I am very serious about that.\nAnd you know...  maybe I could reproduce it if I knew the name of the SFTP server software you have installed. The logs would tell me this. You have not.\nIn my last post I said you can get the logs by doing this:\nphp\ndefine('NET_SSH2_LOG_REALTIME_FILE', true);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', '/path/to/log.txt');\nYou said \"the script is not running\". It's not supposed to. Logs that don't demonstrate the problem aren't going to help me fix it. The NET_SSH2_LOG_REALTIME_FILE option will write to a file, real-time. When you've concluded that the upload is stalled hit Ctrl + C and send me the log file that's produced.\nThe reason why I think that might work when NET_SSH2_LOG_REALTIME doesn't is that NET_SSH2_LOG_REALTIME echo's the data out real-time. And since your console can likely only write so many characters per second it's going to increase the amount of time between each packet being sent and received considerably, whereas writing to a file shouldn't yield any significant delays at all.\nThank you.\n. > First of all - no need to be snappish and condescending - I am also trying just to help.\nIt was the \"it is very easy to check\" thing that I got caught up on. idk I thought you were implying that I wasn't trying or something. Anyway, moving on, lol..\nphp\ndefine('NET_SSH2_LOG_REALTIME_FILE', true);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', '/path/to/log.txt'\nI gave you bad directions :( Try this:\nphp\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_REALTIME_FILE);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', '/path/to/log.txt');\nI'll try to install CentOS into VirtualBox as time permits but if you could get logs too that'd be great.\nThanks!\n. Thanks!\nI see that the next to last packet received was a window resize message. Kinda makes me wonder what the window size is at that point. Unfortunately, the log files are kinda too small to really figure that out. In Net/SSH2.php can you find this line:\nphp\ndefine('NET_SSH2_LOG_MAX_SIZE', 1024 * 1024);\nIf you could replace the 1024 * 1024 with 1024 * 1024 * 1024 and maybe compress it and then upload it that'd be helpful. That'll make it so the log files can be up to 1GB in length. I don't imagine they would be but they could still be big idk.\nI'll try to add some better window monitoring routines as well at some point but that'll be a few days from now at the very earliest. For now the fastest / easiest thing would be the full log files.\n. Any better?\n. Any better?\n. I'm okay with the change, although I can't say I'm all that gungho on doing it myself. If someone else wants to step up that'd be great.\n. I have no objection to this for the PHP5 branch. The PHP5 branch isn't really intended to be locked into BC anyway in my mind.\n. Looks good to me.\n. How are you getting an empty folder? Normally folders would return . and .. even if no files in the folder existed. Does the folder not even exist? How do you cd to an empty folder? If the home path for the user just doesn't exist and you do an ls will it return nothing, not even . or ..?\nIt's very strange..\n. > The only remaining question here is whether the callback should be called when no data is returned at all, i.e. whether it should be called with an empty string or so.\nidk lol. In lieu of a compelling argument either way, however, I'm leaning towards no. I mean, if empty strings are valid then you could technically have 10x calls to the callbacks with empty strings between every non-empty call to the callback.\n. Try it now.\n. Is this something that should be fixed in the actual PHP itself?\n. Test cases have been added.\n. What dependencies does phpseclib have? The require section of composer.json only mentions php. require-dev has more but not everyone is going to be running require-dev..\n. Yah - I think that'd be better. Once that's done I'd say merge!\n. Per https://github.com/phpseclib/phpseclib/pull/331#issuecomment-41227933 I've been looking into this on PHP 5.2 and in the case of that version this isn't really a stall so much as a \"PHP is just slow\" issue. On my 5.4 Ubuntu VirtualBox the test takes 10 seconds. On my 5.2 Ubuntu VirtualBox it takes 408 seconds. That's a slow down of 41x.\nHere's some sample code that demonstrates the slow down in a simpler manner:\n``` php\n<?php\n$x_length = 67;\n$x_value = array_repeat(1, $x_length);\n$y_length = 33;\n$y_value = array_repeat(1, $y_length);\n//define('MATH_BIGINTEGER_BASE_FULL',  0x80000000);\n//define('MATH_BIGINTEGER_BASE', 31);\ndefine('MATH_BIGINTEGER_BASE',       26);\ndefine('MATH_BIGINTEGER_BASE_FULL',  0x4000000);\n$product_value = array_repeat(0, $x_length + $y_length);\n$start = microtime(true);\n$loop = 0;\nfor ($a = 0; $a < 1013; $a++) {\n    for ($i = 1; $i < $y_length; ++$i) {\n        $carry = 0;\n    for ($j = 0, $k = $i; $j < $x_length; ++$j, ++$k) {\n        $temp = $product_value[$k] + $x_value[$j] * $y_value[$i] + $carry;\n        $carry = carry($temp);\n        $product_value[$k] = (int) ($temp - MATH_BIGINTEGER_BASE_FULL * $carry);\n        $loop++;\n    }\n\n    $product_value[$k] = $carry;\n}\n\n}\n$elapsed = microtime(true) - $start;\necho \"took $elapsed seconds\\r\\n\";\nfunction carry($x)\n{\n    if (MATH_BIGINTEGER_BASE === 26) {\n        return (int) ($x / 0x4000000);\n    }\n// MATH_BIGINTEGER_BASE === 31\nreturn $x >> 31;\n\n}\nfunction array_repeat($input, $multiplier)\n{\n    return ($multiplier) ? array_fill(0, $multiplier, $input) : array();\n}\n?>\n```\nOn Ubuntu / PHP 5.2 this takes about 33 seconds. On Ubuntu / PHP 5.4 this takes about 1 second. That's a slow down of 30x. Not quite the same 40x I mentioned above but close.\nOn Windows / PHP 5.2 it takes about 3.5 seconds and on Windows / PHP 5.4 it takes about 1 second again.\nReally, I think the big problem is that PHP 5.2 is just helluva slow on Ubuntu.\nDoing this speed it up to 18-19 seconds:\n```\n\n-----[ FIND ]------------------------------------------\n\n        $carry = carry($temp);\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        $carry = (int) ($temp / 0x4000000);\n\n```\nOf course we can't do that - we have to do the if check in it that carry does. ie.\n```\n\n-----[ FIND ]------------------------------------------\n\n        $carry = carry($temp);\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        $carry = MATH_BIGINTEGER_BASE === 26 ? intval($temp / 0x4000000) : ($temp >> 31);\n\n```\nThat clocks in at around 22-23 seconds. Still faster than the 33 seconds we were seeing before but slower than the 18-19 seconds we had when we weren't doing the if check.\n```\n\n-----[ FIND ]------------------------------------------\n\n        $product_value[$k] = (int) ($temp - MATH_BIGINTEGER_BASE_FULL * $carry);\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        //$product_value[$k] = (int) ($temp - MATH_BIGINTEGER_BASE_FULL * $carry);\n\n```\nThat clocks in at 20 seconds. Even if I comment out every non-loop line it still takes 2.7 seconds on PHP 5.2:\n```\n<?php\n$x_length = 67;\n$y_length = 33;\n$start = microtime(true);\nfor ($a = 0; $a < 1013; $a++) {\n    for ($i = 1; $i < $y_length; ++$i) {\n        for ($j = 0, $k = $i; $j < $x_length; ++$j, ++$k);\n    }\n}\n$elapsed = microtime(true) - $start;\necho \"took $elapsed seconds\\r\\n\";\n?>\n```\nOn PHP 5.4 it takes 0.1 seconds. That's a 27x slow down.\nSo if the test on Travis takes 1 minute 42 seconds on PHP 5.4 and we're getting the best possible slow down that it'd seem 5.2 on Ubuntu is inevitably going to bring it'd take 27 minutes.\nI mean I can speed it up by sorta in-lining the $this->_carry() function, as done above, but the Travis tests will likely still fail on 5.2. I haven't tested 5.3 yet but I suspect the results will be similar and that the ultimate fate of this ticket will be \"wontfix\" or \"cantfix\" or something.\nHere's how I setup PHP 5.2 (on a virgin Ubuntu LiveCD) in case anyone wants to double check my work:\nsudo apt-get update \nsudo apt-get install build-essential \nsudo apt-get install libxml2-dev \nsudo apt-get install libgmp3-dev \nwget http://museum.php.net/php5/php-5.2.17.tar.gz \ntar xvzf php-5.2.17.tar.gz \ncd php-5.2.17 \nwget https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt \npatch -p0 < txtbgxGXAvz4N.txt \nsed -i 's/__GMP_BITS_PER_MP_LIMB/GMP_LIMB_BITS/g' ext/gmp/gmp.c \n./configure --prefix=/usr/local --enable-bcmath --enable-mcrypt --with-gmp \nmake \nsudo make install\n. Well I can't get PHP 5.3 working on Ubuntu. Here's what I tried:\nsudo apt-get update \nsudo apt-get install build-essential \nsudo apt-get install libxml2-dev \nsudo apt-get install libgmp3-dev \nwget http://museum.php.net/php5/php-5.3.3.tar.gz \ntar xvzf php-5.3.3.tar.gz \ncd php-5.3.3 \n./configure --prefix=/usr/local --enable-bcmath --with-gmp \nmake\nBut on the make I get the following error:\n/home/ubuntu/php-5.3.3/ext/dom/node.c:1905:5: error: dereferencing pointer to incomplete type\nmake: *** [ext/dome/node.lo] Error 1\nIf someone wants to setup a dev box with PHP 5.2 on Linux that I can SSH into to attempt to reproduce this they are free to do so. My email is terrafrost@php.net to send me credentials or whatever.\nLooking back at https://github.com/phpseclib/phpseclib/pull/331#issuecomment-41227933 as well I think I need some clarification on that.\n\nTests with only Diffie-Hellman Test (#317) hang on PHP 5.2 and PHP 5.3 as per https://travis-ci.org/phpseclib/phpseclib/builds/23634384\nTests with Diffie-Hellman Test (#317) and this fix (#331) have the hang on PHP 5.2 fixed, but still hang on PHP 5.3. See https://travis-ci.org/bantu/phpseclib/builds/23634661\n\nDoes that mean that prior to the #331 fix that, on Travis, 5.2 and 5.3 froze, and that after that fix that only 5.3 froze and that 5.2 worked fine?\n. > This affects bcmath on PHP 5.2 as per https://travis-ci.org/phpseclib/phpseclib/jobs/22854815#L210\n\nThis affects gmp on PHP 5.3.3 as per https://travis-ci.org/phpseclib/phpseclib/jobs/22854816#L302\n\nI don't see how this effects either? The issue here was that Math_BigInteger tests were timing out. https://travis-ci.org/phpseclib/phpseclib/jobs/22854815#L210 didn't time out. It ran for 3 minutes 47 seconds before, near as I can tell, it died due to the following error:\nFatal error: Class 'Phar' not found in /home/travis/.phpenv/versions/5.2.17/bin/composer.phar on line 13\n5.3 didn't run for the full 10 minutes either but neither am I seeing a Fatal Error, so I'm not sure what's up with that..\n. I'd like to look into the 5.3.3 issue in more detail but as noted above I can't compile it for Linux nor can I reproduce it on Windows with 5.3.3 (5.3.3 and 5.3.27 take about the same amount of time each on Windows - 20 seconds). And as my 5.2 expirements show even if I could get it running on Linux my results might be quite a bit different than the ones Travis is getting.\n\nAnd then there is https://travis-ci.org/phpseclib/phpseclib/jobs/22854816#L302 which hangs on 5.3.3 and seems to use GMP. My current explaination for this test case not reproducing the GMP hang is that the values are no longer taken from random but fixed. Maybe GMP hang can be reproduced with different Diffie-Hellman parameters.\n\nIf it's hanging shouldn't it be timing out after 10 minutes like the 5.3.3 internal test instead of the 4 minutes 31 seconds that it is taking? The state is Failed - not Errored.\nThe next packet that should be sent out, from what's shown in the logs, is the NET_SSH2_MSG_KEXDH_INIT packet. But it's not getting sent out. And it doesn't seem like it's timing out and none of the user_error()'s that phpseclib normally outputs are being displayed either.\nMaybe the unit test could have error_reporting(E_ALL) enabled and ini_set('display_errors', 1) set?\n. I got PHP 5.3 working on Ubuntu 12.04. Thanks.\n. I give up. I'm marking this as wontfix.\nI got PHP 5.3 working on Ubuntu 12.04, as stated above, and you know what? The test case runs just fine. Took 120 seconds with the internal mode and OpenSSL disabled.\nIf someone can provide SSH access to a test environment that reproduces the problem I'll look into it. But I'm not going to spend my life chasing phantoms.\n. Looks good for the php5 branch.\n. 1. To make any sort of diagnosis I'll need logs. You can get them by doing define('NET_SSH2_LOGGING', 3); at the top of the script.\n2. Try the latest Git version.\n. Would you be willing to give me SSH / SFTP access? You can email the credentials to terrafrost@php.net.\nIf not then if you could post the 0.3.5 logs as well that'd be helpful.\nThank you.\n. Try the latest git version. You can download it from here:\nhttps://github.com/phpseclib/phpseclib/archive/master.zip\nIn particular, I think this commit fixed the issue:\nhttps://github.com/phpseclib/phpseclib/commit/7a2c7a414c08d28f0700c7f6f8686a9e0e246a44\nIf so than this issue would be a duplicate of https://github.com/phpseclib/phpseclib/issues/134\nAs for why I'm thinking that fixes it...\nFrom the 0.3.5 logs:\n```\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.013, network: 0.001s)\n00000000  62:00:00:00:00:00:00:00:09:73:75:62:73:79:73:74  b........subsyst\n00000010  65:6d:01:00:00:00:04:73:66:74:70                 em.....sftp\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.189, network: 0.176s)\n00000000  63:00:00:00:02                                   c....\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.007, network: 0s)\n00000000  5e:00:00:00:00:00:00:00:09:00:00:00:05:01:00:00  ^...............\n00000010  00:03                                            ..\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.033, network: 0.021s)\n00000000  5d:00:00:00:02:00:02:00:00                       ]........\n```\nFrom the 0.3.6 logs:\n```\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.005, network: 0s)\n00000000  00:00:00:00:00:00:00:09:73:75:62:73:79:73:74:65  ........subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.125, network: 0.118s)\n00000000  00:00:01:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.099, network: 0.094s)\n00000000  00:00:01:00:00:02:00:00                          ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.008, network: 0.001s)\n00000000  00:00:00:00:00:00:84:cc:00:00:00:05:01:00:00:00  ................\n00000010  03                                               .\n```\nThe first two packets are the same (the log format changed between 0.3.5 and 0.3.6). The location of the NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST is different, however, I do not believe that has anything to do with it and in fact I believe 0.3.6's behavior is correct. In both cases the window size for client to server packets is initially 0. In 0.3.5 phpseclib is sending out the packet without waiting for the message from the server saying that the window size has been adjusted whereas 0.3.6 it is waiting for it.\nHere's a dissection of the last NET_SSH2_MSG_CHANNEL_DATA. First, here's the format of NET_SSH2_MSG_CHANNEL_DATA:\nbyte      SSH_MSG_CHANNEL_DATA\n      uint32    recipient channel\n      string    data\nSo for 0.3.5 it's this:\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.007, network: 0s)\n00000000  5e:00:00:00:00:00:00:00:09:00:00:00:05:01:00:00  ^...............\n00000010  00:03                                            ..\n00:00:00:00 is the recipient channel.\n00:00:00:09 is the data length.\n00:00:00:05:01:00:00:00:03 is the data.\nFor 0.3.6 it's this:\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.008, network: 0.001s)\n00000000  00:00:00:00:00:00:84:cc:00:00:00:05:01:00:00:00  ................\n00000010  03                                               .\n00:00:00:00 is the recipient channel.\n00:00:84:cc is the data length.\n00:00:00:05:01:00:00:00:03 is the data.\nThe data length is wrong in 0.3.6. And the data length is exactly what the commit I linked to addresses.\n. Thanks for the thanks! And thank you for giving me the info I needed to make a diagnosis!\nAs for making a new release...  I'm not to keen on doing so. Among other things, if a release is made every time a bug is found and fixed then I'd likely spend more time making releases than I would be developing. Also, I do not get the impression this issue affects that many people.\n. I'm okay with this but bantu's right about https://github.com/phpseclib/phpseclib/commit/28f18f83ec1476a028a81fe71152978ed792b8a6 . idk, I have zero opinion on the matter.\nW.r.t. function_exists...  I was thinking about it and I'd be willing to have that be put to a majority vote amongst the core devs. I think for the php5 branch we should do the class approach. But for the master branch...  I'll go with the majority for that. I vote nay, but others can chime in as well.\nIf we do go with it I think that it should be a core dev to make the commit. We've had a lot of people submit pull requests to add the function_exists thing and rather than picking the most deserving of those PR's or the one that wouldn't require merges I think it ought to be a core dev who already has commits in it. I don't want people thinking \"ooh I got a PR into this project\" when they weren't the first to submit it nor were they the ones that enabled us to figure out what was going on or something.\n. You say using function_exists is \"good programming\", it's something libraries \"should\" do, etc. The problem I have with that is that what constitutes \"good programming\" is subjective. Meaning no disrespect, but who gave you ultimate authority on that?\nhttp://www.phptherightway.com/ is a project wherein a bunch of PHP developers have come together to establish what best practices for PHP ought to be. I'm not going to say they are or ought to be the ultimate authority, either, but the stuff they mention has at least been (presumably) peer reviewed and agreed upon by consensus. And I see no mention of function_exists on it:\nhttps://www.google.com/#q=function_exists+site:phptherightway.com\nMaybe try to get them to add what you're saying about function_exists to website and I'd find your argument more compelling. They're on github so you can submit a PR:\nhttps://github.com/codeguy/php-the-right-way/tree/gh-pages\nAnd although I, as a general rule, don't have a problem making changes to accommodate even a small subset of users, I'm not a big fan of making changes to fix problems in other libraries, which is still what I perceive this as being. I don't have a good solution for Composer but then I'm not a Composer dev either.\n. Two possibilities that I can think of.\n1. Net_SSH2 checks to see if the Crypt_* classes are includable before trying to include them:\nhttps://github.com/phpseclib/phpseclib/blob/79719e8f74b653f85233d2b4585fd79186e7df96/phpseclib/Net/SSH2.php#L3738\n   https://github.com/phpseclib/phpseclib/blob/79719e8f74b653f85233d2b4585fd79186e7df96/phpseclib/Net/SSH2.php#L1461\nMaybe they're not in the phar?\n2. Maybe there aren't any compatible encryption algorithms? The SSH specs say 3DES is required but maybe yours is an off spec server. It's hard to say without seeing the logs. You can get them by doing define('NET_SSH2_LOGGING', 3); and then posting what you get here.\n. For 2, what I'm wanting are the logs. They look like this:\nhttp://phpseclib.sourceforge.net/ssh/log.txt\nIt's not going to fix the problem but it'll give me a better idea of what's going on.\nYou should do the define('NET_SSH2_LOGGING', 3); at the top of your script before you do anything else in the script.\n. It looks like deployer.phar isn't including any of the symmetric key algorithms. ie. it's failing the _is_incudable test.\nWhat version of phpseclib are you running? There was a change made a while ago to Net/SSH2.php to better accomodate phar's: https://github.com/phpseclib/phpseclib/pull/233\nI'm wondering if you're version of phpseclib (maybe 0.3.5?) doesn't have that change within it?\n. Updated the unit tests. Thanks for the feedback on them!\n. Any update on this? As I stated in an earlier post, \"I don't think that the deficiencies that have been alleged are legitimate\". Certainly I can change it as has been proposed but I'm not to gung ho on making changes without legitimate reasons for doing so.\n. > Consider squashing all commits into one commit.\nidk how to do that :( I guess I could copy the changed file, do git reset --hard origin ... and then copy the changed file back. Is there a better way?\n\nTests with only Diffie-Hellman Test (#317) hang on PHP 5.2 and PHP 5.3 as per https://travis-ci.org/phpseclib/phpseclib/builds/23634384\nTests with Diffie-Hellman Test (#317) and this fix (#331) have the hang on PHP 5.2 fixed, but still hang on PHP 5.3. See https://travis-ci.org/bantu/phpseclib/builds/23634661\n\nHow can I get PHP 5.3 installed on Ubuntu? (it works fine on 5.3 on Win7) I did sudo apt-get install php5-cli and got 5.4. Do I have to compile from source?\nAlso, do keep in mind that pure-internal mode is going to take a lot of time, regardless. Took 7 seconds on my system on PHP5.4. PHP5.3 is slower and a virtualized instance of it is probably going to be slower still. What might seem like a stall could very well be it just taking a long time.\nWith OpenSSL enabled it takes 0.13 seconds. With bcmath, without OpenSSL, it took 16 seconds :O\nIn the Travis output stuff I see this:\n...............................................................  63 / 221 ( 28%)\n............................................................... 126 / 221 ( 57%)\n.............SSSSSSSSSSSSSSSSSSSSSSSSSSS....................... 189 / 221 ( 85%)\n..\nWhat do the S's mean?\n. If it's still hanging on select versions idk that this should be closed? I recently got a PHP 5.2 installation up and running (after having to apply two different sets of patches to fix incompatibility versions with the latest libxml2-dev and libgmp3-dev [I guess 5.2 was intended to work with older versions of those libs - not the currently available versions]) but haven't done much more than that yet.\n. The two possibilities I can see are...  perhaps phpseclib defaults to faster cryptographic algorithms. Another possiblity: better flow control perhaps. phpseclib sends 50 packets at a time and then reads 50 responses back. PuTTY doesn't. Does libssh2? I don't know.\n. Not to mention bcmath and gmp and openssl too. But that would be a pretty big undertaking. If you or anyone else wants to take that on feel free, although I can't guarantee I'd let it be merged in (I'm not going to commit myself to merging in code that hasn't even been written yet).\n. Fixes https://github.com/phpseclib/phpseclib/issues/275#issuecomment-41977966\n. In addition to what gocom said the stuff found in File/X509.php isn't call-time pass-by-reference.\ncall-time pass-by-reference is when you do foo(&$a); - not when you do &foo($a); What phpseclib is doing in the lines of code you mentioned is returning by reference\n. terrafrost#2 has been merged into this along with a new commit. Although tbh I think it'd make more sense (esp. given the title of this PR) if the other PR were kept.\n. Sample code:\n``` php\n<?php\ninclude('Net/SFTP.php');\n$sftp = new Net_SFTP('www.domain.tld');\n$sftp->login('username', 'password');\n$sftp->chdir('path/to/dir');\n$start = microtime(true);\n$files = $sftp->nlist('.', true);\n$size = 0;\n$count = 0;\nforeach ($files as $file) {\n    if ($sftp->is_file($file)) {\n        $stat = $sftp->stat($file);\n        $tempSize = $stat['size'];\n        $count++;\n        $size+= $tempSize;\n    }\n}\n$elapsed = microtime(true) - $start;\necho ($size / (1024 * 1024)) . 'mb / ' . $count . ' files';\n```\nWith the older version of Net/SFTP.php that took 40 seconds, almost. Now it takes almost 10 seconds. So that's a good speedup, I'd say.\nStill need to do the following:\n- implement clearStatCache\n- implement fileatime, filemtime, filegroup, fileowner, etc\n- see how the recursive mode of ftp_nlist deals with recursive symlinks\n- consider making _query_stat_cache return NULL when nothing is found instead of false and making soft cache deletes set the field to false instead of 0\n- disable the cache for SFTP/Stream.php\n- implement diropen / readdir / closedir functionality\n- what does PHP's stat return as the size for directories?\nOn the subject of nlist / rawlist returning an array instead of an iterator...  the fact that iterators are PHP5 only not withstanding Net/SFTP's API was initially inspired by the ftp PHP extension, which itself returns arrays. This is clearly deficient when trying to get a directory listing of a large file. If it takes a full minute to get the full directory listing cause there are just a ton of files in that directory then that's a full minute that the script isn't doing anything. Whereas if it's in-lined as readdir does then it'll still take a full minute but the script can be echo'ing the output out or whatever.\n. > > terrafrost#2 has been merged into this along with a new commit.\n\nThis does not seem to have happened.\n\nLooks to me like it has. Screenshot:\n\n\n\nAlthough tbh I think it'd make more sense (esp. given the title of this PR) if the other PR were kept.\n\nThen you do not know whether the code you're adding actually works. It is quite common to require tests for every new feature and regression tests for every bug fix commited alongside with the actual code.\n\nI thought you were going to be writing the tests for this? And although it's a bit of a moot point (since I've already merged my changes into this PR), until the tests have been merged, it doesn't really matter, it seems to me, because the tests could be merged into either PR.\n. That works!\n. > implement diropen / readdir / closedir functionality\nSo I don't think this is really that feasible. I was looking into it and...  with SFTP you send a SSH_FXP_READDIR packet and get a SSH_FXP_NAME problem back. The problem is...  SSH_FXP_NAME can and usually does contain multiple files within it. So it's not like you send a READDIR request and get a response for the next file. You get a whole bunch of responses all at once. Certainly opendir / readdir could be emulated (as indeed the stream wrapper does) but that's all it'd be - an emulation.\n. I can do that :)\n. phpseclib has been bit by static variables before: https://github.com/phpseclib/phpseclib/commit/69c639d8454e99ecaa0a8583aa5c2311fd440220#diff-82a5983a6daace4acbcc65edf2dfb605L1279\nHowever, concurrent instances aren't an issue for these static variables as the operation is intended to be atomic. ie. it's not something you can stop and restart.\nSSH2.php uses static variables for determining which symmetric key algorithms are supported, among other things. SSH2.php doesn't change them, though, unlike these proposed changes to SFTP.php. Is that difference enough to justify this changing but not SSH2.php's code? (not that I'm proposing changing SSH2.php's code but I am curious)\nCertainly I can create a new internal method (I'd rather do that than add an undocumented parameter) but I'd like to better understand the problem with static variables in this particular case. In particular, how do these variables make it difficult for testing in light of the above? (only thing I can figure is maybe multi-threaded environments might not play well with it - not that I've tried phpseclib in such environments lol)\n. > The assignment $depth = 0 only \"works\" on first visit of that line and as such you have to be very careful to always restore the previous value when you're done.\nI do do $depth++; funccall(); $depth--; so that when the function is finished $depth will be what it was when we started.\nNone-the-less, there's probably not a ton of point in debating it - I figure I'll do the wrapper approach anyway.\n\nOn second thought it does not even seem to be necessary to use recursion, which has its own set of disadvantages (the only advantage usually being that it is easy to implement/understand). So you can probably rather easily get rid of both \"problems\" just by refactoring into non-recursive style.\n\nI think it's also important to let developers do what they do. There are multiple approaches to do it and maybe if you're in a tight loop that's gonna be called two million times finding the absolutely most efficient approach possible might be worthwhile but this isn't such a tight loop.\nMath_BigInteger has tight loops where micro-optimizations are important and readability and limited developer autonomy are more important. Same thing for the symmetric ciphers (hence why petrich's changes were good ones). But in this particular case? It's like getting on the case of someone who submitted a PR and not merging it because they did $i++ instead of ++$i.\nI saw this a lot on the phpBB MODifications Team. We'd deny a MOD and then the author would often come back mad thinking we were nitpicking and they'd often not resubmit their MOD or any subsequent MODs they might write. We can't be too nitpicky or it's not going to be fun for anyone. Some pickyness is good as is the discussion that results from it but I think there is such a thing as too much.\n\nBy the way, the proper PHP5 OOP solution to this is to implement an Iterator\n\nI agree, but BC considerations blah blah blah lol. And realistically speaking, for the php5 branch, there are a whole slew of other things I want to implement to master before I go start prettying up the php5 branch and just because I don't have a ticket on github.com for a lot of these items on github doesn't mean it's not something I want to do. Indeed, I actually kinda like it how my own wishlist isn't on github.com because then if someone else wants it as well that gives it a little extra priority than the other stuff on my wishlist.\nI mean, if someone else wants to implement it as an iterator (probably after I've updated the caching) for the php5 branch, that's great, but in the time that I have to devote to phpseclib I'll probably be focusing on other stuff.\n. These changes have been merged into https://github.com/phpseclib/phpseclib/pull/339\n. Well it's not a problem I have on my 5.4 Windows install. Can you post a copy of the logs?\nTo get the logs you can add define('NET_SSH2_LOGGING', 2); and then, later, do echo $ssh->getLog().\n. My guess: you put it somewhere where it's not being called. Like if you have if (!$ssh->login(...)) { exit('login failed'); } then putting it after that won't serve any point. So let's just do real-time logging. Do define('NET_SSH2_LOGGING', 3);. And be sure to put it at the top of the file. Putting it at the bottom isn't going to serve a lot of point.\n. So phpseclib determines which symmetric key algorithms it can use by seeing which ones are includable. The following links demonstrate how this is done:\nhttps://github.com/phpseclib/phpseclib/blob/efd3b96dc8e378a5155cb42f4869de85f4153135/phpseclib/Net/SSH2.php#L1110\nhttps://github.com/phpseclib/phpseclib/blob/efd3b96dc8e378a5155cb42f4869de85f4153135/phpseclib/Net/SSH2.php#L3775\nIf you're using PHP 5.4 then it's essentially doing stream_resolve_include_path('Crypt/RC4.php'). If PHP doesn't think it's includable than it's hard to argue with that.\nCan you do file_get_contents('Crypt/RC4.php')? Does that return anything?\nMaybe your PHP 5.2 install had phpseclib in it's include_path (in the php.ini file) but when you upgraded to PHP 5.4 your php.ini file got reset?\n. My PHPUnit install skipped all these SFTP unit tests. It's not entirely clear to me how they're supposed to work :(\nJust looking at the unit test code (not running it) it's also not clear to me where file1.txt is actually created. Doesn't look like it's created in any of the *.sh files in the travis/ directory..\nI'm also unable to reproduce the issue on my own local install. is_file works correctly with existent and non-existent files for me.\n``` php\n<?php\ninclude('Net/SFTP.php');\n$sftp = new Net_SFTP('www.domain.tld');\n$sftp->login('username', 'password');\n$sftp->chdir('public_html/username');\n$start = microtime(true);\necho $sftp->is_file('test.php') ? 'exists' : 'does not exist';\necho \"\\r\\n\";\necho $sftp->is_file('asdfasdf') ? 'exists' : 'does not exist';\n``\n. >$result = $this->_query_stat_cache($path);` returns an array which is not false, but is an array, so !is_array($result) is false.\nThat's correct. When an array is returned that means it's a directory. ie. not a file.\n\nThe put() method does not seem to have any cache handling.\n\nThat's correct. PHP's own stat cache doesn't add anything to the stat cache when you write to a file. eg.\n``` php\n<?php\ndefine('NET_SFTP_STREAM_LOGGING', true);\ninclude('Net/SFTP/Stream.php');\n$host = 'www.domain.tld';\n$port = '22';\n$user = 'user';\n$pass = 'pass';\n$path = '/path/to/file';\n$url = \"sftp://\".$user.':'.$pass.'@'.$host.':'.$port.$path;\n$fp = fopen($url, 'w');\nfputs($fp, 'asdfasdf');\nfclose($fp);\nstat($url);\n```\nThat outputs this:\n__construct\nstream_open\nstream_write\nstream_flush\nstream_close\n__construct\nurl_stat\nIf fopen / fputs was stat cached by PHP the stat call wouldn't need to do a url_stat call.\nAlso, PHP has no way of knowing what the default permissions of the file would be or even the owner. If put were to modify the stat cache it'd have to send its own stat packet above and beyond all the other packets it sends out.\nAnd what about the group that the file belongs to? You could assume the user is the person who uploaded it but that doesn't give you any insight into the group.\nSee, also, http://stackoverflow.com/q/19799407/569976 . That post provides more evidence that the statcache isn't updated on writes.\n\nPlease add documentation for value the stat cache can hold.\n\nI can do that, although I'll probably do so in a later commit. I have a good number of other cache related changes I want to do first.\n\nThis array to object and back is scary.\n\nWhy? Files are objects and directories are arrays. If both were arrays than how would you know? Maybe you'd just see if one of the arrays children was \"permissions\" and hope that wasn't actually a subdirectory instead?\nFor purposes of BC, however, stat returns an array and non-recursive rawlist calls represent files as arrays. Internally, it's a different story and recursive rawlists mirror the internal representation.\n\nWhat is the meaning of an empty array?\n\nAn empty directory. Or more technically, I suppose, a directory that hasn't had any of the files within it (or even the directory itself) stat'd.\n\nWhat is the meaning of int(0)?\n\nA soft delete. Although per https://github.com/phpseclib/phpseclib/pull/338#issuecomment-43450874 I'm thinking that that ought to be changed to bool(false) instead of int(0).\n. > Both an object and an array are actually stat arrays, right? So I would know if it's a directory by checking whatever is_dir checks, possibly $stat['type'] == 1 or so.\nAn array just means it's a directory but just because it's an array doesn't mean the stat info for that array ('.') has been cached. It's stat info is only cached if there's a '.' entry for that directory.\n\nI would also appreciate if the benefits of using a hierarchical cache (using sub-arrays) over a key-value cache mapping filename to stat array, could be documented.\n\nSome of it was just an evolution of the old file existence cache. With that one if you mass deleted a directory it'd be easier to just delete that node, which would auto delete all the children, rather than doing a search for keys who's first half matched a certain parameter and then deleting all those keys.\nRight now the cache is only invalidated if you change various attributes but you could do that on a directory as well. And later if I make it so if you recursively delete a directory with Net/SFTP.php it'd be a lot easier to recursively delete the stat cache as well with it's hierarchical structure.\nAlso, if you do an nlist on a deeply nested directory it seems like doing a key-value thing could use more memory. ie.\n/path/to/some/directory/file1.ext => stat\n/path/to/some/directory/file2.ext => stat\nvs.\narray('path' => array('to' => array('some' => array('directory' => array('file1.ext' => stat, 'file2.ext' => stat)))))\n. That doesn't work unfortunately :( (I thought it might when I made that post but when I later tested it out I found I was wrong)\nExample code:\nphp\n<?php\nfunction test() {}\nif (function_exists('test')) { return; }\nfunction test() {}\n. Doesn't look like we can comment in-line in that tool so in lieu of that...\nRe: Crypt_Base...\n\n$password of type string is not a sub-type of boolean.\n\nWhy is PHP / Scrutinizer CI assuming it's a boolean sub-type?\n\nIt seems like $this->enmcrypt can also be of type null; however, mcrypt_generic_init() does only seem to accept resource, maybe add an additional type check?\n\nThe code:\nphp\n            if ($this->changed) {\n                $this->_setupMcrypt();\n                $this->changed = false;\n            }\n            if ($this->enchanged) {\n                mcrypt_generic_init($this->enmcrypt, $this->key, $this->encryptIV);\n                $this->enchanged = false;\n            }\n$this->enchanged (and $this->dechanged) are only ever set to true in _setupMcrypt. The idea is that $this->enmcrypt is only initialized on-demand. So if you're only doing decrypting then initializing $this->enmcrypt is unnecessary.  But if you do call encrypt() $this->enchanged will still be true so $this->enmcrypt will be set.\nIt's unclear to me how $this->enmcrypt / $this->demcrypt could be null and if they were that'd be a bug.\nI'll look at the other issues as time permits.\n. Discussion is never a bad thing!\n. $scheme is generated by the extract(parse_url()). See http://us3.php.net/parse-url .\nIf $scheme wasn't present PHP wouldn't know which stream wrapper to use, let alone actually load one.\n. It's not clear to me what new issues this inspection found. On the last PR I did the new issues could be clicked on when you clicked on the link to the inspection.\n. Looks good to me!\n. All the suggested changes have been made.\n. Travis says this:\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/Net/SFTP.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n986 | ERROR | Whitespace found at end of line\n     |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n\n```\nAs can be seen by looking at the diff's there were no white space changes in my commits so it seems strange the unit tests are failing now when they weren't before..\n. Fixed!\n. +1\n. Can you post the shell script you're trying to upload?\nWhy are you saying it seems corrupted? Are you getting some sort of error when you try to run it? If so what's the error that you're getting?\n. The test for pbkdf1 is the test reading / writing of encrypted PKCS8 keys.\nI figure, long term, I can add support for new encryption schemes on an as-need basis. Also, long term, after Crypt_DSA is written, it might be worthwhile to separate the PKCS8 stuff into a new File/PKCS8.php file. But that'd be a complete rewrite. That'd make use of File/ASN1.php, etc. But that's much farther down the road.\n. Any update on getting this merged? I can do it myself but peer review would be nice..\n. I would really love to know how that last commit introduced this as an error (from Travis CI):\nphp\nFatal error: Call to undefined method Crypt_DES::Crypt_DES from context Crypt_TripleDES in /home/travis/build/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php on line 212\n. Does closing / re-opening cause Travis CI to rerun?\n. Is this ready to merge?\n. Yah - I am. I don't think that was a widely utilized feature anyway.\nnamespaces break BC in a way that affects everyone and everything. This only effects people who were doing $var->random() or $var->random(false, new Math_BigInteger('whatever')) which I suspect is practically no one.\n. > - Replacement of function crypt_random_string with class Crypt_Random, with an abstract function named string\n\nThe following was added for improved code readability and to prevent access to restricted sections :\n\nThat's kinda a pet peeve of mine tbh. People accessing restricted sections has never been a problem to begin with. See http://aperiplus.sourceforge.net/visibility.php . You're not using private, which I applaud, but still...  I'll sometimes tell people to access \"private\" methods to get me debug info or as a workaround until a more permanent solution can be developed. Here's an example:\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?p=119984#p119984\n. > Not using private or protected for methods that aren't supposed to be available outside of a class is bad practice in PHP5.\nJust because everyone else does it doesn't make it right. That kind of groupthink is a classic appeal to authority fallacy. I mean, maybe it is the right thing to do and I'm wrong, but if it is right there ought to be better arguments presented than just that.\nBesides, that doesn't really address the problems with private / protected that I mentioned.\nI mean I suppose I could give people new classes custom written for them. eg. Crypt_RSA_Modified and that extends Crypt_RSA. idk that could be interesting to try and to see how people respond to that. idk.\n\nFor even easier debugging, you could add a \"debug\" method to any class that provides access to hidden properties or methods and provides a var_export of their return value. To avoid exploitation of this technique in production code, a single package-wide parameter named production could turn off this \"debug\" method along with any error reporting. That way, you have best of both worlds...\n\nSo I guess people would do $rsa->debug('_exponentiate', param1, param2, etc) instead of $rsa->_exponentiate()?\n. Thanks and good luck with your PowerTools project :)\n. I'd say remove 'em!\n. Let's do master too.\n. It occurs to me...  one consequence of this is that phpDoc produced stuff won't describe the constructor parameters with this change. But I think the documentation on http://phpseclib.sourceforge.net/ does a sufficient job at that so I'd say go ahead and remove them!\n. From Travis CI:\nFatal error: Uncaught exception 'RuntimeException' with message 'Cannot open file \"/home/travis/build/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php\".\nWell it's there:\nhttps://github.com/terrafrost/phpseclib/blob/82b5e02f06a78670d79a4bcf472b768523597283/tests/Unit/File/ASN1/DevTest.php\nI didn't touch it in any of the commits in this PR. Ugh. It feels like Travis CI is just screwing up as of late, yielding lots of false positives.\n. @bantu - do you have any idea why the unit test is failing? The fatal error doesn't make an ounce of sense to me.\n. I am able to SFTP without issue on 5.2. That also shows that crypt_random_string works as well.\nI am, unfortunately, not able to get phpunit working.\nphpunit requires a newer version of pear than I have installed on my 5.2 virtual machine. At least when I try installing by doing sudo pear install pear.phpunit.de/PHPUnit:\nDid not download optional dependencies: phpunit/PHP_Invoker, use --alldeps to download automatically\nphpunit/PHPUnit requires PEAR Installer (version >= 1.9.4), installed version is 1.9.1\nphpunit/PHPUnit requires package \"symfony/YAML\" (version >= 1.0.2, version <= 1.0.2), installed version is 1.0.6\nphpunit/PHPUnit can optionally use package \"phpunit/PHP_Invoker\" (version >= 1.1.0, version <= 1.1.1)\nphpunit/File_Iterator requires PEAR Installer (version >= 1.9.2), installed version is 1.9.1\nphpunit/Text_Template requires PEAR Installer (version >= 1.9.4), installed version is 1.9.1\nphpunit/PHP_CodeCoverage requires PEAR Installer (version >= 1.9.4), installed version is 1.9.1\nphpunit/PHP_CodeCoverage requires package \"phpunit/File_Iterator\" (version >= 1.3.0, version <= 1.3.2)\nphpunit/PHP_CodeCoverage requires package \"phpunit/Text_Template\" (version >= 1.1.1, version <= 1.1.2)\nphpunit/PHP_CodeCoverage can optionally use PHP extension \"xdebug\" (version >= 2.0.5)\nphpunit/PHP_Timer requires PEAR Installer (version >= 1.9.2), installed version is 1.9.1\nphpunit/PHPUnit_MockObject requires PEAR Installer (version >= 1.9.4), installed version is 1.9.1\nphpunit/PHPUnit_MockObject requires package \"phpunit/Text_Template\" (version >= 1.1.1, version <= 1.1.2)\nphpunit/PHPUnit_MockObject can optionally use PHP extension \"soap\"\nphpunit/PHP_TokenStream requires PEAR Installer (version >= 1.9.4), installed version is 1.9.1\nNo valid packages found\ninstall failed\nI try to upgrade my PEAR install thusly:\npear upgrade --force http://pear.php.net/get/PEAR-1.9.4\nThat gets me this:\nWARNING: configuration download directory \"/tmp/pear/download\" is not writeable.  Change download_dir config variable to a writeable dir to avoid this warning\ndownloading PEAR-1.9.4.tgz ...\nStarting to download PEAR-1.9.4.tgz (296,332 bytes)\n.............................................................done: 296,332 bytes\ncould not extract the package.xml file from \"/tmp/tmpHOQmgq/PEAR-1.9.4.tgz\"\nDownload of \"http://pear.php.net/get/PEAR-1.9.4\" succeeded, but it is not a valid package archive\nInvalid or missing remote package file\nupgrade failed\nsudo apt-get install phpunit doesn't work either.\nI'm just going to remove DevTest.php and maybe try recommitting it.\n. Well now I'm getting this error:\nFatal error: Uncaught exception 'RuntimeException' with message 'Cannot open file \"/home/travis/build/phpseclib/phpseclib/tests/Unit/File/X509/SPKACTest.php\".\nThis is stupid.\n. I believe the problem has to do with the fact that PHPUnit uses stream_resolve_include_path itself. From PHPUnit's source code:\nhttps://github.com/sebastianbergmann/phpunit/blob/master/src/Util/Fileloader.php#L69\nIn looking at that code it is unclear to me how Travis CI has gotten PHPUnit running on PHP 5.2. I grepped through PHPUnit. It does not appear do any failover if stream_resolve_include_path isn't defined. It seems like when PHPUnit is ran on PHP 5.2 it should result in a fatal error but it's not on Travis CI. The fact that PHPUnit's own website says the minimum required PHP version is 5.3.3 would seem to corroborate my analysis:\nhttp://phpunit.de/manual/current/en/installation.html\nI propose we remove Travis CI for PHP 5.2. My best guess is that they're running their own custom modified version and without seeing the source it's impossible to know how they've changed it or what else might break it. And it's not like we should have to debug it anyway.\n. How should I test it? I think there should be one test for doing a login() right after the constructor and another for doing getServerPublicHostKey() right after the constructor. I mean, if you delete the _connect() part of _login() login() will still succeed if getServerPublicHostKey() is called first. So it's not clear to me how it'd fit in the story.\nMaybe I could just add a new function while retaining all the old ones? eg.\n```\n    public function testGetServerPublicHostKey()\n    {\n        $ssh = new Net_SSH2($this->getEnv('SSH_HOSTNAME'));\n    $this->assertTrue(\n        is_object($ssh),\n        'Could not construct NET_SSH2 object.'\n    );\n\n    $this->assertInternalType('string', $ssh->getServerPublicHostKey());\n}\n\n```\nI don't want to re-use the $ssh object every other method is using because I think there ought to be two distinct objects to properly test this.\n. Looks good to me! Just seems strange that Travis CI didn't complain on the commit that actually broke it (ie. https://github.com/phpseclib/phpseclib/pull/375 ) but rather on another unrelated one.\n. Oh - I wonder if this should be submitted as a bug to HHVM?\n. I'm not going to make any further contributions to phpseclib until this is resolved. If we have to remove Travis CI to resolve it that's fine by me.\n. I'm not sure I like the renaming of stream_resolve_include_path to phpseclib_is_includable.\nIf that function, whatever we call it, has issues, we should fix them instead of sweeping them under the rug by renaming it.\n. I guess I'm okay with merging this. I still want to better understand what's going on tho. I'll test against Travis CI some more and then move onto other stuff.\n. The problem with the re implemented version of stream_resolve_include_path is that it didn't handle fully resolved path's correctly. ie. it only works on relative path's. So if you pass /path/to/whatever.php as Travis CI seems to be doing it'll try appending that to every path. It'll try ./path/to/whatever.php, /path/to/path/to/whatever.php, etc.\nhttps://github.com/terrafrost/phpseclib/tree/bantu-random\nThat's an improved version.\nThe diff:\nhttps://github.com/terrafrost/phpseclib/commit/b91c86f975780c4ced05e36e593a9b7c5b4a99db\nI think we could go back to having this named stream_resolve_include_path when that function isn't already defined but it doesn't really make a lot of difference to me either way I guess.\nHere it is passing the unit tests:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/27824712\n. That works.\nCan we merge https://github.com/terrafrost/phpseclib/commit/b91c86f975780c4ced05e36e593a9b7c5b4a99db into your branch? It doesn't redefine stream_resolve_include_path but it does use realpath(). idk of any realpath() issues but if we encounter any we can fix them as we encounter them I figure.\nReason I'm doing realpath() is to make it more compatible with stream_resolve_include_path. Like if you have a . or .. in your include_path phpseclib's re-implementation might return (for example) /path/to/../././filename.php, which, for purposes of canonicalization, would be better as /path/filename.php\n. Thanks! Looks good for merging to me!\n. Oh right. Yah - I agree. I'd do it myself but since this PR is on your branch..\n. Oh - I guess the one last thought I have is...  on the php5 branch we can remove the phpseclib_is_includable function and replace it with stream_resolve_include_path. Also, thinking about it, maybe phpseclib_resolve_include_path would be better? is_includable implies it returns true or false and although the _is_includable function in Net/SSH2.php did this one does not (since it was initially designed as a drop-in replacement for stream_resolve_include_path)\n. > Consider adding some tests. In the existing SFTP scenario you can at least test readlink against symlink. \nYup - that's the plan.\n\nAnother test case testing SFTP against the local file system functions would probably be useful, but can be done in another PR.\n\nI need to add a lot of unit tests. More SFTP stuff, SCP unit tests (SCP is of particular importance I think since making methods private / protected in SSH2.php can break SCP.php; see https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SCP.php#L320), X509 tests, etc.\nMy ultimate plan for adding retroactive unit tests is this: I'll finish up adding new features, adding unit tests for those new features as they're developed, and after that I'll take a break and work on some non-phpseclib stuff for a while. I'll still contribute bug fixes and provide support and all that jazz but I won't be adding new stuff for a while. Then after that maybe I'll do some documentation revamping (I have a big list of stuff that needs to be done for that) and maybe unit tests too idk. And then after all that I'll work on DSA / ECDSA. I'll probably create a PKCS8 class when doing that and refactor RSA.php as well. DSA / ECDSA will require changes to SSH2.php, SSH1.php and X509.php as well so that they can take full advantage of it.\nIf you look at https://www.ohloh.net/p/phpseclib/commits/summary you'll see that commits (in particular, from me) wax and wane. We're in a crest right now and a trough is going to follow. And then there'll be another crest and trough, etc, lol.\n. Is there anything else that needs to be done for this to get merged?\n. Looks good to me!\n. With the exception of the white space it looks good to me! Here are the line numbers (copy / pasted from Travis) if you want to remove it yourself:\n```\nFOUND 5 ERROR(S) AFFECTING 5 LINE(S)\n3800 | ERROR | Whitespace found at end of line\n      |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n 3811 | ERROR | Whitespace found at end of line\n      |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n 3822 | ERROR | Whitespace found at end of line\n      |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n 3833 | ERROR | Whitespace found at end of line\n      |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n 3844 | ERROR | Whitespace found at end of line\n      |       | (Squiz.WhiteSpace.SuperfluousWhitespace.EndLine)\n\n```\nI guess I could remove it for you, too, if you want..\nThanks!\n. > How does one test this? What is your use case?\nYou could do setWindowColumns($x) and then see if $x == getWindowColumns() but that seems like a waste of a test lol. Might as well do assertSame($a, $a) or something.\nIf you wanted to test it's effect on exec() or read()...  there really isn't much of one unless you do a command like vim. At that point you could see what the width / height that vim is using but to see that you'd have to have a terminal emulator. File_ANSI does do vt100 terminal emulation but that seems like overkill. And let's say it fails. Assuming the variables weren't renamed or swapped there's nothing you can really do from the client to fix this\nActually, that might not be a bad unit test for File_ANSI but I, personally, don't want to write it (there are lots of things in phpseclib that could benefit from unit tests and I don't want to spend months doing it right now) and I don't think it's reasonable to expect liutec to do it given that a unit test like that is far beyond the scope of his changes.\nI mean, really, for most commands, the width and height don't even matter. You do ls -la and it'll scroll until it gets to the end. It doesn't just send you the last 24 lines (assuming 24 is your height) - it sends you all of them. vim is different but unless you're doing a command like that you're not going to see any change. That's why I never implemented the feature myself.\n. I'm going to be leaving in like 10-20 minutes to meet up with some friends so I can't address this in too much depth, atm, but I can say that the \"Cannot connect to ------.--------------.--:22. Error 110. Connection timed out\" is caused by fsockopen(), which phpseclib doesn't have any control over.\nI guess the one thing I'd try is maybe try making the timeouts longer. Maybe each successive fsockopen connection causes a lag on all of them idk.\nAnother possibility: if you connect to an SSH server and do a time consuming non-SSH task and then try to do something with the SSH again it's possible that the server would kill the connection. ie.\n$ssh = new Net_SSH2('www.domain.tld');\n$ssh->login('username', 'password');\nsleep(60);\n$ssh->exec('ls -la');\nWhen I tried that just now on a random SSH server the connection didn't die but maybe it would have if I had slept for 10 minutes instead of 1 minute idk. Not that I know if that even applies to you but if it did then maybe using the callback parameter of exec() might help (assuming you're using exec()). Maybe something like stream_select() for Net_SSH2 would be useful idk.\n. > Would it feasible to just use raw sockets or cURL instead of phpseclib to execute a bash script on a remote server and fetch the ouput?\nI know curl can be made to support SFTP. I'm not sure if you can use cURL to execute commands.\nW.r.t. raw sockets...  I'm not really sure what you're proposing. I mean you could use telnet to do this or just initiate commands on the webserver by making an HTTP request to a PHP file and doing exec() in the PHP file idk.\nIf you wanted to try to replace SSH2 with your a more lightweight encrypted telnet-like protocol...  I could write a paragraph or two on that but for berevity I won't. At least not in this post where it's not even clear to me if that's what you're wanting. I will say though that if this is to be used in situations where crypto really matters or where other devs are likely going to be scrutinizing your code it's probably not such a great idea.\n\nAnother approach would be a way to detect which sockets are opened for a certain host. Do you know if that's even possible? If I could queue my execution until a previous connection (from another HTTP request) ends, that could fix the problem. Would it make sense to store my open connection in server cookies?\n\nI guess you could put lock files on the FS. eg. \"if (file_exists($hostname)) then place script in queue\"\n\nI tried adding $ssh->disconnect(); unset($ssh); at the end of my script. In retrospect, this seems rather essential for freeing available resources, but I couldn't find it in the documentation anywhere. I had to search the code for and fclose statement to discover that there actually is such a feature.\n\nThat should all be taking care of by the garbage collector.\n\nI am indeed using exex(), but I'm not sure how a callback could help. Could you elaborate?\n\nSee this:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#callback\nUnmentioned is that if you do return false it'll make exec() return immediately.\n. So ini_get(\"default_socket_timeout\") doesn't fix the problem? What about setting it in php.ini or .htaccess or something?\n. > Would it feasible to just use raw sockets\nI'm not sure if it matters but per https://github.com/phpseclib/phpseclib/issues/742#issuecomment-122351289 you can now use stream_socket_client.\n@JayFayCake - if you have a new issue please create a new ticket. Altho explaining the context would be good as well. Like what you're connecting to, etc. /powertool pig on Ubuntu gives a -bash: /powertool: No such file or directory message in response but it seems likely you're not using Ubuntu..\n. Works for me!\nNet_SFTP_Stream, unlike most of master, is php5 only already, so we don't need to be concerned with the fact that static methods aren't php4 compatible.\n. > Okay, great. I assume it is save to assume that function stream_wrapper_register exists then.\nI think so. Besides, according to php.net, it's been available since 4.3.2. phpseclib pretty much already requires 4.3.0 due to it's use of sha1. sha1 support can be added to older versions using a PHP_Compat-style approach but that approach won't work with stream_wrapper_register.\nPlus, in the particular case of Net_SFTP_Stream, static is already used for static $instances;.\n\nRef https://github.com/phpseclib/phpseclib/commit/b242259d17b0f56614a3fa7736b7834d1129c3e6 o_O\n\nThat was part of petrich's attempt to make full path disclosure a non-issue:\nhttps://github.com/phpseclib/phpseclib/pull/379#discussion_r13828916\nMaybe we could just do if (version_compare(PHP_VERSION, '5.0.0') < 0) die; or something idk.\n. Yah - that's a good point lol. I'd say nix the line.\n. Does https://github.com/phpseclib/phpseclib/pull/394 fix the issue for you?\n. Looks good to me!\n. I didn't do double quotes for everything is because the SCP implementations I consulted - PuTTY's and Mindterm - don't appear to do it themselves.\nEvidence that PuTTY doesn't: http://superuser.com/q/773952/172193\nBut just because they don't do it doesn't mean it can't or ought not be done! The latest commit does it 24/7.\n. Looks good to me!\n. I'd prefer this be implemented as it's own stand-alone cipher. eg. Crypt/ChaCha20.php or some such. Certainly libsodium could be used if it's available on the system (as indeed sha256() is used in the 1.0 branch on systems using suhosin) but - and especially in the case of symmetric ciphers - I don't want support for symmetric ciphers being added to SSH2.php that don't natively exist in phpseclib.\nI don't mind libsodium being used as much for #755 since there's currently no framework in place for any sort of DH / ECDH within phpseclib. But in this case there is a framework for symmetric ciphers to be added. They go in the Cipher/ directory.\nIt's definitely more work but half the idea of phpseclib is that it doesn't require dependencies. Like mcrypt's increasing obsolescence isn't a huge issue for phpseclib since it doesn't /need/ mcrypt. I suppose libsodium wouldn't be a dependency per say since it could very well only be used if it's available but I also don't want to hack up Net/SSH2.php, making it so it either uses a Crypt/*.php file or a libsodium instance.\nBasically, I think it ought to be done right or not done at all and I don't think bypassing the existing framework and just hacking in a one-off solution into Net/SSH2.php is doing it right.\n. Looks impressive! Not just ChaCha20 / Poly1305 but the whole thing! I'm actually most impressed by the compression. I didn't even think it'd be possible without a pure-PHP implementation of the algorithm:\nhttps://github.com/phpseclib/phpseclib/wiki/GSoC-Ideas\nBut it looks like that uses the PECL-only HTTP extension and I generally assume that PECL extensions have about zero-deployment.\nStill, it's pretty impressive!\n. I don't agree. If the only encryption algorithm the destination server supports is 'arcfour' then removing it will prevent phpseclib from connecting all together. If you don't want phpseclib to use 'arcfour' all the same, even at risk of not connecting, you can delete RC4.php from the Crypt/* directory.\nAlso, although most SSH servers, in my experience, have arcfour128 and arcfour256, RFC4345 is later than RFC4253 and as such, I would expect more servers to support arcfour than arcfour128 or 256. Now these servers are probably running out of date insecure versions of OpenSSH but I don't think it's phpseclib's place to refuse to connect when the server it's connecting to is \"too old\".\n. > That is the idea. \"Secure or fail\" instead of \"Better than nothing\".\nThat idea stands in stark contrast to the motivation behind phpseclib. libssh2 doesn't work very many places at all. phpseclib is supposed to be the exact opposite. It's designed to work everywhere. And that doesn't just mean it's supposed to work on every webserver. It's supposed to work on every SSH server as well.\nAnd in any event, arcfour isn't the most \"insecure\" cipher phpseclib supports. That honor belongs to the \"none\" cipher. From Net/SSH2.php:\nphp\n                'none'            // OPTIONAL          no encryption; NOT RECOMMENDED\nBut then again, note how it is at the bottom. An SSH server sends a list of supported encryption protocols and the client responds. The first one on the client list that the server has in it's list is the one that's used. 'arcfour' is, admittedly, pretty high up there. Maybe we can move it down. But I don't agree with removing it all together.\nAnd as I said before, an end user can forcefully prevent phpseclib from using RC4 by deleting the RC4.php file.\n. The odds of it being an issue are very slim. And if the server supports the algorithm it seems the server would be just as \"guilty\".\nNone-the-less, thinking about it, I guess I'd be willing to delete it and none. none, in particular, is useful for debugging, if the server has been setup to support it. I can add a setEncryptionAglorithms() method that selects from the subset of algorithms that are available in the Crypt/* directory. This would let https://github.com/phpseclib/libssh2-compatibility-layer more faithfully emulate http://php.net/ssh2-connect , among other things.\nAlso, fwiw, this wasn't possible until https://github.com/phpseclib/phpseclib/commit/a14e71f38b441829c1ad945b9094e27a943f5a11 \nI'll probably do this after 0.3.7.\n. People are going to use password auth whether or not phpseclib supports it. If phpseclib drops support for it people will just use old versions of phpseclib that do support it.\nIf you want meaningful change in the world of SSH you'll need to have the big players take on that change. Like OpenSSH or, from a client perspective, PuTTY. But even if OpenSSH were to drop password auth tomorrow (which I doubt) there'd still be lots of legacy servers out there that people would be wanting to connect to...\n. Is there a reason master can't be used?\nThat said I don't have a problem doing a 0.3.7 release. I'll try to do it this weekend, time permitting.\n. 0.3.7 has been released.\n. > (It's generally a good idea to check the return value of functions, especially in security code.)\nThat would almost double the size of Net_SSH2.\nIn order to get line 1842 the data had to get through _get_binary_packet(), which does a HMAC check against the decrypted ciphertext. Only if it matches can it continue. A sanity check is also performed on the size. If the size of the decrypted data is too large it'll error out.\nSo the data that was sent by the server is legit data. It's not being spoofed as part of some attempted attack. So if the server is sending malformed data what should be done?\nMaybe an error should be thrown? Well it already does that, as written. It may not be as helpful as an error messaging saying \"error: malformed packet received\" but it's an error all the same.\nAfter the admittedly unhelpful error message the code continues to try to run until it encounters a more serious error. In this case it'll go through the switch () and not hit any of those conditions and then that function will return false. It won't stop you from trying to login again tho.\n\nVery strange. So I changed the code to this\necho \"\\nVardump _string_shift\\n\";\n$string = $this->_string_shift($response,1);\nvar_dump(unpack('Ctype',$string));\necho\"\\n\";\nextract(unpack('Ctype',$string )); //use it as an assigned variable versus the function call...\nand it went without a hitch...\n\nThat's bizarre. Can you maybe post a copy of your phpinfo()?\nThanks!\n. Nothing looks strange about that.\nCan you get me a copy of the SSH2 logs? You can get them by adding define('NET_SSH2_LOGGING', 3); at the top of your file.\nThanks!\n. > Would you rather have 4000 lines of legacy code, or 8000 lines of testable production code? :)\nThe code is testable as is. The unit tests that exist are testament to that.\nSo you get a malformed packet back and phpseclib outputs an error. That's the way it currently works. Which sounds exactly like what you're proposing. The difference being that you just think the error ought to be different.\n\nI've been trying to wait until it fails again, but it hasn't ( I did revert those changed lines back to just using the method). I'll send you the debug log anyway just in case there is something weird in there.\nhttps://gist.github.com/hanski07/2b482c7cde73c557a49e\n\nWhen you generated the log file did you get the error? 'cause the log file makes it look like you authenticated just fine and were able to send and receive data without a hitch.\n. It's a legit issue. https://github.com/phpseclib/phpseclib/pull/403 should fix it.\n. How would such support work?\nThere's currently getServerPublicHostKey() which returns the raw key. libssh2-compatibility-layer demonstrates how to convert the raw key to a hash:\nhttps://github.com/phpseclib/libssh2-compatibility-layer/blob/master/phpseclib.php#L104\nI don't know if known_hosts uses this method or another. But that said, I'm not a big fan of adding some system-level enhancement in Net/SSH2.php.\nFor ssh-agent a whole new class was created - System/SSH/Agent:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/System/SSH/Agent.php\nIf known_hosts support were to be added to be phpseclib I'd greatly prefer it if it was done in it's own file. But if it were what would the API look like?\n. > Actually, verify() will have to return 3-state, e.g.\n\n\nfalse (host key mismatch)\nnull (host key unknown)\ntrue (host key match)\n\n\nThat's consistent with what File/X509.php's validateSignature does:\nhttps://github.com/phpseclib/phpseclib/blob/83301097eaa68a15faad63a8d2b64dfebc7fc589/phpseclib/File/X509.php#L2001\nAnyway the API you've proposed looks good. I guess the next question would be...  what is the format of the known_hosts file? http://www.employees.org/~satch/ssh/faq/manpages/sshd1_man.html provides a limited overview but it is...  limited.\nI guess there are multiple formats. There's this:\nhost.rootshell.be,10.0.0.2 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0ei6KvTUHnmCjdsEwpCCaOHZWvjSjytm/5/Vv1Dc6ToaxTnqJ7ocBb7NI/HUQEc23eUYjFrZQDS0JRml3RnsG0UzvtIfAPDP1x7h6HHy4ixjAP7slXgqj3cfOV5ThNjYI0mEbIh1ezGWovwoy0IxRK9Lq29CacqQH8407b1jEj/zfOzUi3FgRlsKZTsc3UIoWSY0KPSSPlcSTInviGoNi+9gC8eqXHURsvOWyQMH5K5isvc/Wp1DiMxXSQ+uchBl6AoqSj6FTkRAQ9oAe8p1GekxuLh2PJ+dMDIuhGeZ60fIheq15kzZGsDWkNF6hc/HmkJDSPn3bRmo3xmFP02sNw==\nThat format is easy enough to figure out. $ssh->host . ' ' . $ssh->getServerPublicHostKey(). Maybe the IP address should be looked up as well idk.\nBut there's also this format:\n|1|U8gOHG/S5rH9uRH3cXgdUNF13F4=|cNimv6148Swl6QcwqBOjgRnHnKs= ssh-rsa AAAB3NzaC1yc2EAAAABIwAAAQEAvAtd04lhxzzqW57464mhkubDixZpy+qxvXBVodNmbM8culkfYtmq0Ynd+1G1s3hcBSEa8XHhNdcxTx51MbIjOdCbFyx6rbvTIU/5T2z0/TMjeQyL3SZttbYWM2U0agKp/86FdaQF6V87loNcDq/26JLBSaZgViZS4gKZbflZCdD6aB2s2sqEV4k7zU2OMHPy7W6ghNQzEu+Ep/44w4RCdI5OYFfids9B0JSUefR9eiumjRwyI0dCPyq9jrQZy47AI7oiQJqSjvueMIwZrrlmECYSvOru0MiyeKwsm7m8dyzAE+f2CkdUh6tQleLRLnEMH+25EAB56AhkpWSuMPJX1w==\nhttp://blog.rootshell.be/2010/11/03/bruteforcing-ssh-known_hosts-files/ discusses how that format works.\nSeems like it could be a good Google Summer of Code project!\n. > This is probably a day of work, if at all, not a summer of work. ;)\nI don't disagree. It's just not something I'm, personally, especially interested in devoting a day too atm lol. If someone else wants to do it then that's fine by me!\n. I would say comment it out - don't remove it all together. That way if it's to be re-added later - perhaps via a setEncryptionAlgorithms() function as proposed at https://github.com/phpseclib/phpseclib/issues/398#issuecomment-47952236\nAlso, while you're at it, comment out none.\n. Go for it.\n. Looks good.\n. The \"invalid size\" check has been in phpseclib since 0.3.5:\nhttps://github.com/phpseclib/phpseclib/commit/e7336e6b54db9365590a10ebe13757c022e7194b\nI guess whomever is getting that error can try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n    if ($remaining_length < -$this->decrypt_block_size || $remaining_length > 0x9000 || $remaining_length % $this->decrypt_block_size != 0) {\n\n\n-----[ AFTER, ADD ]------------------------------------\n\necho \"remaining_length = $remaining_length\\r\\n\";\necho \"decrypt_block_size = {$this->decrypt_block_size}\\r\\n\";\n```\nIf affected parties could also enable real time logging (define('NET_SSH2_LOGGING', 3); at the top of the file) that'd be helpful as well. That'd make it so I can see where in Net/SSH2.php the error is occuring.\n. I don't see how https://github.com/phpseclib/phpseclib/commit/7a2c7a414c08d28f0700c7f6f8686a9e0e246a44 would cause any issues. The issue that fixed was one wherein phpseclib would tell the server it was sending x bytes but then would only send y bytes. ie. it was an issue with data being sent. And the server could presumably decrypt it just fine - it was just waiting for data that was never sent. Contrast that with this wherein data is being received.\n. See https://github.com/phpseclib/phpseclib/pull/417\n. The unit test works fine on my system.\nI guess there just won't be a unit test for this issue then. If I can't reproduce it on my system and it's an issue that seemingly only crops up on Travis CI...  I'm not going to do what I did for https://github.com/phpseclib/phpseclib/pull/384 https://github.com/phpseclib/phpseclib/pull/383 https://github.com/phpseclib/phpseclib/pull/382 every time I want to make a one-line change.\nSomeone else is free to write a unit test for this but I'm not.\n. Like I said, it works on my system.\nHere's the orig commit:\nhttps://github.com/phpseclib/phpseclib/blob/fe7fd97b59fb9ae208eec8fe79129c54f8e57683/phpseclib/Net/SFTP.php#L1058\nThe break is necessary because, if $dir was at the end of the $dirs array, the $temp = &$temp[$dir] assignment would still be attempted. Normally this would fail unless there existed a file with the same name as the directory.\nMaybe there are additional problems with that function but I do not believe that can be inferred from this unit test because - as I said - it works on my system. I don't know why it isn't working on Travis CI but I'm also not gung ho on spending hours and hours debugging as I had to do with https://github.com/phpseclib/phpseclib/pull/384 .\nIf someone says that phpseclib can't connect to some $10,000 dollar SSH server I'm not going to pony up $10,000 of my own money to try to re-produce their when there's no guarantee that even with that setup I'd be able to. For sufficiently obscure problems, if the person experiencing them can't help you diagnose them you ought not stress about it. It'd be nice if it worked but in those situations there's not a lot you can practically be expected to do. Same thing with Travis CI. Travis CI isn't going to help you debug and I've documented my failed attempts to reproduce their failures and I'm frankly tired of it.\nMaybe I'd be willing to spend $10 on an obscure SSH server but with a hypothetical $10,000 price tag it's just not worth it to me. I'd rather the issue remain an issue than spending that kind of money. Similarly, if this was a 10 second fix, I'd be willing to do it in a heartbeat. But my expectation is that diagnosing this will take many many many hours and it's just not worth it to me.\nWhen investing time or money into something you have to consider is the payoff worth it. And in this case I just don't think it is. Spending hours and hours fixing an issue that's only an issue on Travis CI...  just seems like a big waste of time to me. But who knows..  maybe I'll feel differently tomorrow or this evening or something idk\n. Looks like the latest commit fixes the issues. Thanks for the help bantu!\n. Looks good to me!\n. The SSH server itself doesn't really give much insight as to why stuff failed. And generally you don't want servers to give you too much info anyway.\nLike if you log into gmail.com with a made up username / password...  maybe the username exists but the password is bad. Or maybe the username doesn't exist at all. Either way gmail.com doesn't tell you - it just gives you a generic \"The email or password you entered is incorrect\" message. See the following URL for more info:\nhttps://www.owasp.org/index.php/Authentication_Cheat_Sheet#Authentication_and_Error_Messages\n. Would it work if I made it so that $ssh->isConnected() returned true even if the login had failed?\nie. with what I'm envisioning, $ssh->isConnected() would only return false under three circumstances:\n- if fsockopen() failed\n- if what's on the other end isn't an SSH server\n- if there are no common algorithms that both the client and server support that'll be false. In this event you'll also get an E_USER_WARNING message.\nSo it'd return true if a login had failed but a connection had been made.\nIf that'd work let me know!\n. Well the change I proposed to $ssh->isConnected() is available as a pull request:\nhttps://github.com/phpseclib/phpseclib/pull/412\n\nI'm just looking for how to get the error message on why it failed, not whether or not it failed\n\nYou'll also get an E_USER_WARNING if the fsockopen() failed. So the only time you won't get an E_USER_WARNING is if what's on the other end isn't an SSH server. You could use an error handler to differentiate between the error messages.\nI think what'd be ideal for you is if phpseclib threw errors. There's a php5 branch but idk if that makes use of Exceptions or not yet. I think exceptions are completely superior to user_error's but the master branch of phpseclib is aiming to be PHP4-compliant (for the most part).\n. Right now $ssh->getErrors() only returns errors (or messages) reported by the server. ie. the \"extra\" part of the server identifier, the message returned by the SSH_USERAUTH_PASSWD_CHANGEREQ packet, etc. The errors that show up in $ssh->getErrors() aren't phpseclib-generated error messages nor do I really want them to be.\nSeems like this should be plenty sufficient:\nphp\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('user', 'pass')) {\n     echo $ssh->isConnected() ? 'bad username or password' : 'unable to establish connection';\n}\nI don't know why you'd need more granularity than that but if you do you can use set_error_handler to capture the E_USER_WARNING.\n. Looks good to me!\n. Good idea!\n. Looks good to me!\n. I don't think PHP cares if you throw in extra variables to user defined functions. If it did func_get_args() wouldn't work.\nAnyway this commit looks good to me!\n. Looks good to me!\n. Looks good!\n. Looks good!\n. Go for it.\n. Since sha2 support isn't part of the main RFC but rather an addon RFC I'd link to the RFC as is done here for arcfour / ctr mode stuff:\nhttps://github.com/dagwieers/phpseclib/blob/86d17c6989740652b554e776f7944a90d516abda/phpseclib/Net/SSH2.php#L1097\nAnd then I'd add a space between the sha2 stuff and the older stuff.\nThat said if you don't want to do that I'll do that myself. Either way thanks for the patch!\n. > For SHA512 support it seems to be more complex since it also fails with paramiko in a straight-forward way. Possibly there is a relation to the key-exchange.\nSHA512 works fine for me on SSH-2.0-OpenSSH_6.6p1 Ubuntu-2ubuntu1...\nAlso...\n``` php\ninclude('Crypt/Hash.php');\n$hash = new Crypt_Hash('sha512');\necho bin2hex($hash->hash('zzzz')) == hash('sha512', 'zzzz') ? 'true' : 'false';\n```\nThe fact that that outputs true makes me think it's working correctly as well.\nBoth work fine with CRYPT_HASH_MODE_INTERNAL, CRYPT_HASH_MODE_MHASH and CRYPT_HASH_MODE_HASH...\n. So the _connect() method doesn't get called multiple times.\nIf you can't do fsockopen once there's no point in trying multiple times. \n. I'll look at it. I've been spending most of my time and energy thus far trying to figure out the sha512 issues:\nhttps://github.com/phpseclib/phpseclib/pull/432\nhttps://github.com/phpseclib/phpseclib/issues/437\n. Good idea - I like it!\n. I was gonna try to get to it this week but a PR from you would probably be better.\nAmong other things that'll get you more familiar with the phpseclib code base and more people being familiar with it is never a bad thing!\n. Maybe just write a new put() function that doesn't require the size.\nThat said, most streams will tell you the size. SFTP_Stream.php is one such example:\nhttps://github.com/phpseclib/phpseclib/blob/0f672dde528c0fbd718940429bc629bdb5b0911d/phpseclib/Net/SFTP/Stream.php#L706\nhttp://php.net/manual/en/streamwrapper.url-stat.php\nWhat streams don't tell you the size?\n. How's this coming along? Should I start working on this myself or should I wait for you to make a PR?\nLet me know.\nThanks!\n. Yesterday! (just saw this post lol)\n. Looks good to me.\n. Actually, it seems like strlen($this->getBytes()) would be sufficient. Or rather strlen($temp)\n. From the OpenSSH logs on Ubuntu 12.04:\ndebug2: mac_setup: found hmac-sha2-512 [preauth]\ndebug1: kex: server->client arcfour256 hmac-sha2-512 none [preauth]\ndh_gen_key: group too small: 1024 (2*need 1024) [preauth]\ndebug1: do_cleanup [preauth]\nBasically, OpenSSH is killing the connection once it sees hmac-sha2-512 with diffie-hellman-group1-sha1.\nIf I make it use diffie-hellman-group14-sha1 I, instead, get this:\ndebug2: mac_setup: found hmac-sha2-512 [preauth]\ndebug1: kex: server->client arcfour256 hmac-sha2-512 none [preauth]\ndh_gen_key: priv key bits set: 505/1024 [preauth]\ndebug2: bits set: 1017/2048 [preauth]\ndebug1: expecting SSH2_MSG_KEXDH_INIT [preauth]\nThis is also what I get on OpenSSH with Ubuntu 14.04 and diffie-hellman-group1-sha1.\nFeel free to verify.\nOf course, when I test it out on Travis CI, I get a bunch of PHP Warnings ugh:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/31203663\nI'll play around with this more tomorrow...\nAlso, just fyi, I'm generally not a big fan of having to reproduce environments to reproduce issues. This is the second environmental issue we've had with Travis CI, with the first one being https://github.com/phpseclib/phpseclib/pull/384 . What happens if an environment is running AIX or some $$$ proprietary OS? Am I supposed to spend $$$ to buy AIX to re-produce the issue myself?\nMeh. I think Travis CI has caught legitimate issues but none-the-less, atm, I am a little annoyed with it..\n. > From a mathematical perspective and without looking too much into the details, I agree that diffie-hellman-group1-sha1 is a too small group for hmac-sha2-512 (requiring 512 random bits).\n\nFrom a mathematical perspective and without looking too much into the details, I agree that diffie-hellman-group1-sha1 is a too small group for hmac-sha2-512 (requiring 512 random bits).\n\nThe SSH2 protocol extends the key length as appropriate. From RFC4253...\n```\n   If the key length needed is longer than the output of the HASH, the\n   key is extended by computing HASH of the concatenation of K and H and\n   the entire key so far, and appending the resulting bytes (as many as\n   HASH generates) to the key.  This process is repeated until enough\n   key material is available; the key is taken from the beginning of\n   this value.  In other words:\n  K1 = HASH(K || H || X || session_id)   (X is e.g., \"A\")\n  K2 = HASH(K || H || K1)\n  K3 = HASH(K || H || K1 || K2)\n  ...\n  key = K1 || K2 || K3 || ...\n\n```\nIn the case of MAC's X can either be E or F, depending on the direction.\nSo while diffie-hellman-group1-sha14 provides more security than diffie-hellman-group1-sha1 the fact remains that diffie-hellman-group1-sha1 should work.\n\nAlso, I think that https://github.com/phpseclib/phpseclib/blob/d44e3ccfc9f208cd51761a5427d0689f29012c18/phpseclib/Net/SSH2.php#L1387 might need an adjustment to 2 * sum of any random bits instead of 2 * number of random bits required for encryption, i.e. it should include the number of bits required for MAC etc.\n\nNo need, given the above.\n\ndiffie-hellman-group1-sha1 is \"Oakley Group 2\", a 1024-bit modular exponentiation group. This is another of these components that are rather to be deprecated.\n\nRFC4253 does say that diffie-hellman-group1-sha1 is \"REQUIRED\". If the IETF secsh working group wants to deprecate diffie-hellman-group1-sha1 they should introduce a new RFC that supersedes RFC4253 or issue an errata to that effect. They have done neither.\nIf you look at the top of https://tools.ietf.org/html/rfc4253 you'll see that it says \"Updated by: 6668\". RFC6668 is more of an addendum to RFC4253 and does not address diffie hellman group exchange. If a new RFC concerning SSH had been released that did supersede RFC4253 then RFC4253 would say \"Obsoleted by: xxxx\" at the top as is the case for http://tools.ietf.org/html/rfc3280 \n. > ...but this will not change total entropy. That will still be limited by the DH parameters.\nThat is correct.\nBut OpenSSH_5.9p1 Debian-5ubuntu1 should still not be closing the connection early as it is.\nI'm actually pretty confident that this particular behavior is a (now fixed) OpenSSH bug. Maybe it was one introduced by Debian or maybe it was in OpenSSH itself. My Google searches have come up empty. Either way I suppose it doesn't matter - it works as it should on the latest version of OpenSSH / Ubuntu.\n. > Interesting question I am not sure #432 (comment) answers: When you agree with the Ubuntu 14.04 OpenSSH to use DH group 1, does it actually offer hmac-sha2-512 as MAC? It might be that Ubuntu 12.04 OpenSSH offers the MAC but then aborts while the newer version does just not offer it, which means it works because you agree on another MAC.\nUbuntu 14.04 / OpenSSH_6.6p1 Ubuntu-2ubuntu1 is indeed using hmac-sha2-512. At least for me. This is because hmac-sha2-512 at the top of the list of MAC's phpseclib sends over and because it is in the list of MAC's the server supports (print_r($ssh->getMACAlgorithmsClient2Server());). You can additionally verify by putting a echo 'WHATEVER'; in the hmac-sha2-512 part of the switch.\n. I asked about how best to detect the problem SSH servers on the OpenSSH mailing list:\nhttp://lists.mindrot.org/pipermail/openssh-unix-dev/2014-July/032790.html\nUntil then it's probably best if we just don't include support  for hmac-sha2-512 at all.\nie. so OpenSSH_5.9p1 Debian-5ubuntu1 doesn't work. Should I assume OpenSSH_5.8p1 Debian-5ubuntu1 won't work either? What about OpenSSH_5.9p1 AIX?\n. > @terrafrost Found anything yet?\nNo. I'll post my thoughts in the other thread.\n. Assuming that the above is correct diagnosis then a fix for Crypt_Hash would be to reset MATH_BIGINTEGER_MODE to MATH_BIGINTEGER_MODE_GMP after the MATH_BIGINTEGER_MODE_INTERNAL tests have been  run. But then Math_BigInteger does caching via static variables as well. eg.\nhttps://github.com/phpseclib/phpseclib/blob/737c8a9d0f4439a72efc0b6a96d24e185157c794/phpseclib/Math/BigInteger.php#L2430\nhttps://github.com/phpseclib/phpseclib/blob/737c8a9d0f4439a72efc0b6a96d24e185157c794/phpseclib/Math/BigInteger.php#L3129\nhttps://github.com/phpseclib/phpseclib/blob/737c8a9d0f4439a72efc0b6a96d24e185157c794/phpseclib/Math/BigInteger.php#L3210\nhttps://github.com/phpseclib/phpseclib/blob/737c8a9d0f4439a72efc0b6a96d24e185157c794/phpseclib/Math/BigInteger.php#L3359\nI think that's all the ones that actually matter. There are more static variables but a lot of them are in places where they'll never be called unless MATH_BIGINTEGER_MODE is in a specific mode.\n. Which hmac-sha2-512 problem? We've had two. This one and https://github.com/phpseclib/phpseclib/pull/432 . This is different than https://github.com/phpseclib/phpseclib/pull/432 and being able to reproduce https://github.com/phpseclib/phpseclib/pull/432 doesn't really have much bearing on this one.\nIf you're able to reproduce this problem...  sigh I can't. Per https://travis-ci.org/phpseclib/phpseclib/jobs/31241436 (and the other Travis CI tests I was able to run before Travis CI decided to stop running) $this->value is having a gmp resource assigned to it whilst Math_BigInteger is operating in MATH_BIGINTEGER_MODE_INTERNAL. RunKit makes sense as an explanation but if you're saying that you're able to reproduce this issue without RunKit...  can you give me SSH access?\nEither way I am not working on any other feature or bug for phpseclib until this is resolved.\nAnd to top it off why doesn't Travis CI seem to be running for PR's now? Normally there's a yellow dot for in-progress or pending, a red x for failure, or a green check for success. But for the last few commits there's...  nothing:\n\n. Yah - I was able to reproduce the other issue. It'd be hard to get the logs if I hadn't been lol.\nThere's also a second part to this issue too - that Travis CI doesn't seem to be running for any new commits atm. Any ideas what's up with that? I added a screenshot to my earlier post.\n. Do you have any idea why Travis CI is not running for https://github.com/phpseclib/phpseclib/pull/436 ?\nNormally there's a yellow dot for in-progress or pending, a red x for failure, or a green check for success. But for the last few commits there's...  nothing:\n\n. Go for it!\n. Looks good to me!\n. Maybe...\nwe need to do it for these, for sure, because of their use of the static keyword. Because Math_BigInteger does not support multiple concurrent modes of operation. Crypt_Base and all the classes that extend it could, in theory, support multiple concurrent modes of operation, and it wouldn't be an issue.\nLike one instance of Crypt_Rijndael could use mcrypt and another could use the internal mode and that shouldn't be a problem. Indeed that's kinda the idea of https://github.com/phpseclib/phpseclib/pull/259\nThe only other place where static is used, near as I can tell, is Crypt_RSA. For key generation. But there are no unit tests for key generation currently (in-so-far as I know)\nHonestly, I'd say let's just merge it as is. We can reload other files as necessary if needed.\n. From PHP 5.5:\n...............................................................  63 / 256 ( 24%)\n............................................................... 126 / 256 ( 49%)\n............................................................... 189 / 256 ( 73%)\n............................................................... 252 / 256 ( 98%)\n....\nIf a unit test was being skipped wouldn't it have an S instead of a .?\nPHP 5.4 doesn't seem to show any skipped unit tests either...\nWhen I click on the 5.4 and 5.5 tests and click Ctrl + F and search for \"Skipping test\" I don't see anything...\n. The best test case would be to add them to Net/SSH2.php and comment out every other MAC algorithm to force Net/SSH2.php to use those. That'd ensure interoperability, which is ultimately the goal, but I'm not going to do that since I am not aware of any RFC that adds sha256-96 or sha512-96 to SSH.\nI'm also not going to implement IPSec just to add a test case for sha256-96 / sha512-96. IPSec might be a nice addition but that's a little overkill for a unit test..\n. https://github.com/phpseclib/phpseclib/pull/447 works.\n. How about a $rsa->getError() or $rsa->getErrors() method?\n. I get EACn8CscScCAZ8ihaZAYrA== with 0.3.7 (which is what you were saying you were getting with 0.3.5). That's with define('CRYPT_AES_MODE', CRYPT_AES_MODE_INTERNAL) and define('CRYPT_AES_MODE', CRYPT_AES_MODE_MCRYPT).\n0.3.6 had a pretty major re-factoring of most of the Crypt_* classes. Now a lot of them extend from Crypt_Base. I guess you could do this (with 0.3.7 at the end of your existing test file):\necho $encrypter->engine.\"\\n\";\nI'll give you further directions once I know which mode / engine you're using.\n. Updated my post.\n. So you're using the internal mode. If you could make the following changes and then post the resultant output (maybe redirect it to a file and then copy / paste the contents of the file into pastebin or something idk):\n```\n\n-----[ OPEN ]------------------------------------------\n\nCrypt/Rijndael.php\n\n-----[ FIND ]------------------------------------------\n\n    if ($this->use_inline_crypt) {\n\n\n-----[ BEFORE, ADD ]-----------------------------------\n\necho \"IN SETUPKEY\\n\";\n\n-----[ AFTER, ADD ]------------------------------------\n\necho \"IN SETUPKEY - INLINE CRYPT\\n\";\n\n-----[ FIND ]------------------------------------------\n\n        $this->w  = $w;\n        $this->dw = $dw;\n    }\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nprint_r($this->dw);\n```\nAlso, if you could post your phpinfo() that'd be helpful.\nAlternatively...  I don't suppose you'd be able to give me SSH access to the computer that's having the issue? I could test it out myself then instead of having to go through you.\nThanks!\n. > 0.3.5 and 0.3.7 results were inverted with the long key test\nThat actually helps a lot. It means that I may be able to reproduce the problem myself. I have a late evening tonight so if I can't get to it this evening I'll try tomorrow.\nThanks!\n. 192 is the correct size. 160 is a key size that's only valid for Rijndael. phpseclib 0.3.5 / Crypt_AES correctly handles 160-bit keys when CRYPT_AES_MODE == CRYPT_AES_MODE_MCRYPT but not when CRYPT_AES_MODE == CRYPT_AES_MODE_INTERNAL.\nThat said, 0.3.7 does have a problem, too. Crypt/Rijndael.php treats key as though they were Crypt/AES.php keys. So where a 160-bit key should work in phpseclib 0.3.7 / Crypt_Rijndael it is in fact null padded to 192-bits. https://github.com/phpseclib/phpseclib/pull/453 fixes this.\nAlthough in your case, if you need to maintain BC, I'd recommend doing Crypt_Rijndael (with #453 applied) instead of Crypt_AES.\n. What does --login do? I see no mention of it in the man pages for ssh: http://unixhelp.ed.ac.uk/CGI/man-cgi?ssh+1\n. I would expect them to be auto loaded if you used interactive mode. eg.\n$ssh->read() / $ssh->write().\nThey may be loaded if you do $ssh->enablePTY() as well.\nMore info:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\nhttp://phpseclib.sourceforge.net/ssh/pty.html\n. You could do $sftp = $remote->getConnection() and then do the SSH operations on that.\n. > I didn't succeed in using read/write, maybe I didn't understand the documentation clearly but I absolutely do not get what I'm supposed to pass to read to get the output of what was just written or even to start running commands. This is in the context of a deployer so I don't know what is displayed by the server, or what commands are passed to write.\n$ssh->read() will block until it sees the string that is past to it, which is why, in the examples, it I'm always passing the prompt to it. ie. you run a command and $ssh->read() will return the output up to and including the prompt.\nYou may not know what the outputs of the individual commands are or even what those individual commands should be but you should presumably know what the prompt is going to be. And if you don't you can figure it out. eg.\n$ssh->setTimeout(5) and then do $ssh->read() without parameters. Without $ssh->setTimeout()  a parameter-less $ssh->read() call would block forever, but with $ssh->setTimeout() it only blocks for five seconds and then it returns whatever output it has received. So you can figure out the prompt from that.\nAnyway, if your solution works, then that works lol.\n. php\n$ssh->setTimeout(5);\n$prompt = $ssh->read();\nThe first $ssh->read() usually returns the prompt but it doesn't return just the prompt. In this case it's returning, also, the Last login info. eg.\n```\nLast login: Sun Aug 17 14:30:21 2014 from 21.28.101.84.rev.sfr.net\n[1m[7m#[m[1m[0m                                                                               \n[0m[m[m[Jprecious-abyss# [K[?1h=\"\n```\nSo the prompt, in this case, is [0m[m[m[Jprecious-abyss# [K[?1h=\". Maybe you could do somethng like $prompt = preg_replace('#.*[\\r\\n]#', '', trim($ssh->read())) to get it.\nYou could also do $ssh->enablePTY(), as I mentioned earlier, with exec(). Although I'm not sure if that'd actually load the bashrc file like you're trying to do.\n. If you have questions you should probably post them in tickets that haven't already been closed ;)\nThat said, it works fine for me. My Vagrantfile:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n        echo vim > /home/vagrant/.bashrc\n    SHELL\nend\nMy PHP script (running 1.0.5):\n```php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('127.0.0.1', 2200);\n$ssh->login('vagrant', 'vagrant');\necho $ssh->exec('ls -latr');\n```\nOutput:\n~\n~\n~\n~\n~                              VIM - Vi IMproved\n~\n~                                version 7.4.52\n~                           by Bram Moolenaar et al.\n~           Modified by pkg-vim-maintainers@lists.alioth.debian.org\n~                 Vim is open source and freely distributable\n~\n~                        Become a registered Vim user!\n~                type  :help register<Enter>   for information\n~\n~                type  :q<Enter>               to exit\n~                type  :help<Enter>  or  <F1>  for on-line help\n~                type  :help version7<Enter>   for version info\n~\n~\n~\n~\n~\n                                                              0,0-1         All\nHere's what I get if I replace exec() with this:\nphp\n$ssh->enablePTY();\n$ssh->exec('ls -latr');\n$ssh->setTimeout(5);\necho $ssh->read();\n~\n~\n~\n~\n~                              VIM - Vi IMproved\n~\n~                                version 7.4.52\n~                           by Bram Moolenaar et al.\n~           Modified by pkg-vim-maintainers@lists.alioth.debian.org\n~                 Vim is open source and freely distributable\n~\n~                           Sponsor Vim development!\n~                type  :help sponsor<Enter>    for information\n~\n~                type  :q<Enter>               to exit\n~                type  :help<Enter>  or  <F1>  for on-line help\n~                type  :help version7<Enter>   for version info\n~\n~\n~\n~\n~\n                                                              0,0-1         All\nIt looks pretty much exactly the same except the colors are different (which I guess means that the ANSI escape codes are different).\nHere's what I get if I replace the exec with this:\nphp\n$ssh->write(\"ls -latr\\n\");\necho $ssh->read();\n```\n -latr\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n-- INSERT --                                                  2,1           All\n```\nSo, long story short, .bashrc is working fine for me. I'm actually a little surprised it's working for $ssh->exec() without a PTY but whatever.\nThat said, in general, when it comes to duplicating features of existing SSH clients...  it's a ton easier for me to do so in PuTTY. PuTTY has this really useful feature where the decrypted SSH packets are logged. OpenSSH has no such feature. What this means, in-so-far as PuTTY is concerned, is that I can pretty much duplicate any feature of PuTTY because I can see what PuTTY is actually sending out in the form of SSH packets and can duplicate that. I can't do that with OpenSSH. I have to dig through the OpenSSH sources or else I'd have to actually modify OpenSSH to make it log the raw packets like PuTTY optionally does. ie. it's a ton more work. If people really want this feature they can do some of the leg work by telling me how OpenSSH does what it does (using one of the two methods I just described) or they can tell me how to do this in PuTTY.. Another thought: if phpseclib isn't running the .bashrc files than I'd see if PuTTY or OpenSSH even runs them when SSH'ing with that. If neither PuTTY or OpenSSH are running them than I submit that the issue isn't with phpseclib but rather with your Linux setup and altho I like to think I have decent Linux skills an SSH client like phpseclib is not a Linux shell and there's only so much help I can provide when the SSH client ends and the Linux shell begins.. @bantu - I want to re-implement the Crypt_AES unit tests to be more like the Math_BigInteger unit tests. ie. All the test cases go in TestCase.php and then InternalTest.php and MCryptTest.php extend TestCase.php with RunKit being used to adjust the engine.\nAs is the mcrypt implementation isn't tested and it needs to be. Among other things, continuous buffer isn't natively supported by mcrypt. phpseclib emulates it using block mode trickery. Also, see http://phpseclib.sourceforge.net/crypt/cfb-demo.phps . That would probably make for a good unit test, too, but that can be another PR.\nAnyway, that said, it is not clear to me how the Crypt_AES unit tests work. In ContinuousBufferTest.php there's allCombinations() and testEncryptDecrypt(). It seems like testEncryptDecrypt() is being called for each combination returned by allCombinations(). But how is testEncryptDecrypt() being called? I did grep -r testEncryptDecrypt ....  it only occurs once in phpseclib. So how does PHPUnit know how to call it?\nCan you do this refactoring yourself? I can add the unit tests for this PR after you do that.\n. > https://github.com/terrafrost/phpseclib/blob/35fd2888eae0b94434215572e7b2d42dabde2e45/phpseclib/Crypt/Rijndael.php#L705-L713\n\nI wasn't aware that AES supported 160-bit or 224-bit key sizes, only 128, 192, and 256.\n\nAES doesn't. Rijndael does. See http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=44 . Quoting it,\n\nThe key schedule supports any key length that is a multiple of 4 bytes. The only parameter\nthat needs to be defined for other key lengths than 128, 192 or 256 is the number of rounds in\nthe cipher.\n\nOther differences between Rijndael and AES: AES has a fixed block size - Rijndael does not - Rijndael's block size is variable.\n. ``` php\n<?php\ninclude('Crypt/Rijndael.php');\n$aes = new Crypt_Rijndael(CRYPT_AES_MODE_ECB);\n$aes->disablePadding();\n$aes->setBlockLength(256);\n$aes->setKey('0e0288a512d56fca4a635a1325287093');\necho base64_encode($aes->encrypt(str_pad('109283', 32, \"\\0\")));\n```\nThat produces BzYRGMwuN5rKHDHdmC4VQKIuFAcd6uHjbkCVwQqR+4E=, just like the js implementations you cited do.\nSo, basically, in 256-bit mode, the javascripts aren't technically implementing AES - they're implementing Rijndael. The block size in AES is fixed at 128-bits. Only in Rijndael can it be variable.\nIt's also null padding the plaintext instead of PKCS8 padding it (which is what phpseclib does by default). Null padding doesn't work so well for binary data. Let's say you want to encode something that really does have a null byte at the end? Your js decoders would strip away any padded null bytes and any that were in fact present in the original text.\nI suppose that's not a problem for a js decoder as you're presumably not going to be using that with binary data but phpseclib can and often is used with binary data.\nPKCS8 padding makes it so only the bytes that were added are removed, regardless of what the original plaintext was.\nSo, long story short, this isn't a bug and there isn't anything to fix.\n. Real time logging when transferring a 400+MB file are going to be huge. Several GB at minimum. It's hard to say exactly how big they would be without knowing the window size and packet size but still...  they'd be huge. And that ob_flush error is one that only shows itself when doing real time logging. I suppose the error could be suppressed but, really, /you/ shouldn't be doing real-time logs anyway. I mean, I might be able, none-the-less to analyze the, but at the size they'd likely be (if you redirected stdout to a file) there's no practical way for you to transfer them to me.\nNET_SSH2_LOG_COMPLEX, as of https://github.com/phpseclib/phpseclib/commit/497df8895116b996b71f1deb37bf0f23531e9e9c , should only log the last 1MB, so it's puzzling that you'd get a \"Allowed memory size of 268435456 bytes exhausted\" error. Unless the server is, all of a sudden, sending a massive packet (maybe like a core dump idk), at which point, the problem is with the server and not phpseclib.\nOne thing that'd really help is a copy of your phpinfo() output. Also, if you could tell me what $ssh->getServerIdentification() returns, before you do your file transfer, that'd be helpful.\nSomething else to try...\nCan you make the following changes to your Net/SSH2.php?:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin the _append_log() method\n\n       case NET_SSH2_LOG_COMPLEX:\n            $this->message_number_log[] = $message_number;\n            $this->log_size+= strlen($message);\n            $this->message_log[] = $message;\n            while ($this->log_size > NET_SSH2_LOG_MAX_SIZE) {\n                $this->log_size-= strlen(array_shift($this->message_log));\n                array_shift($this->message_number_log);\n            }\n            break;\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n       case NET_SSH2_LOG_COMPLEX:\n            echo strlen($message) . \"\\r\\n\";\n            break;\n\n```\nAnd then if you could try transferring the file with logging set to NET_SSH2_LOG_COMPLEX that'd let me see how big the final few packets are.\nAlso, can you transfer this file with any other SFTP client?\nFinally, do you think you could provide me with SFTP access to the server? If so you can email the info I need to connect to terrafrost@php.net . Thanks!\n. > I made the change as requested to NET_SSH2_LOG_COMPLEX, but the problem is the script still hangs and doesn't respond, which means, I think won't return that few items you're interested in.\nThe change isn't supposed to fix that. It's supposed to echo out the size of each message that would have previously been logged. Since the changes I gave you are echo'ing out stuff the return value of $ssh->getLog() is irrelevant. Although that said, the return value of $ssh->getLog() should be empty.\nAre you saying that nothing is being output? Assuming you are still doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX) (and are doing so after Net/SSH2.php has been included) then stuff should be being output. Maybe just try define('NET_SSH2_LOGGING', 2). NET_SSH2_LOG_COMPLEX is defined as 2 in Net/SSH2.php but if you don't define NET_SSH2_LOGGING after Net/SSH2.php has been included then NET_SSH2_LOGGING will equal \"NET_SSH_LOGGING\" as a string and not the integer 2.\n. Oh...  ok. That's a lot more helpful then!\nCould you maybe do define('NET_SSH2_LOGGING', NET_SSH2_LOG_REALTIME_FILE) and define('NET_SSH2_LOG_REALTIME_FILENAME', 'logname.txt') and send me the resultant file?\nThanks!\n. Could you try this?\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin _send_channel_packet()\n\n    while (strlen($data) > $max_size) {\n        if (!$this->window_size_client_to_server[$client_channel]) {\n            $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n            // using an invalid channel will let the buffers be built up for the valid channels\n            $output = $this->_get_channel_packet(-1);\n            $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n            $max_size = min(\n                $this->packet_size_client_to_server[$client_channel],\n                $this->window_size_client_to_server[$client_channel]\n            ) - 4;\n        }\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    while (strlen($data) > $max_size) {\n        if (!$this->window_size_client_to_server[$client_channel]) {\n\necho \"WAITING FOR WINDOW ADJUSTMENT FROM SERVER\\r\\n\";\n                $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n                // using an invalid channel will let the buffers be built up for the valid channels\n                $output = $this->_get_channel_packet(-1);\n                $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n                $max_size = min(\n                    $this->packet_size_client_to_server[$client_channel],\n                    $this->window_size_client_to_server[$client_channel]\n                ) - 4;\necho \"WINDOW ADJUSTMENT RECEIVED\\r\\n\";\n            }\n```\nI'm curious if it's blocking because it's waiting for a window size adjustment packet that's never coming.\nAlso, the server identifier you provided me with isn't one I'm too familiar with. With OpenSSH you can adjust the LogLevel in /etc/ssh/sshd_config. DEBUG3 would be most helpful. Or do sudo /usr/sbin/sshd -ddd or something. But idk if your SSH server has anything similar.\n. Updated my post.\n. What about this?:\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin _get_binary_packet()\n\nwhile ($remaining_length > 0) {\n\n-----[ AFTER, ADD ]------------------------------------\n\necho '.';\n\n-----[ FIND ]------------------------------------------\nin _get_channel_packet()\n\n                        $this->window_size_client_to_server[$channel] = $window_size;\n\n\n-----[ AFTER, ADD ]------------------------------------\n\necho \"INITIAL WINDOW SIZE = {$this->window_size_client_to_server[$channel]\\r\\n\";\n```\nAlso, does the server have any sort of logs you can get access to, even if you can't adjust the LogLevel? idk if you'd need sudo to access the logs..\n. I just tried to upload a 512mb file with 0.3.7 and had no issues. I tried on the following servers:\n- SSH-2.0-xlightftpd_release_3.7.8\n- SSH-2.0-5.19 FlowSsh: Bitvise SSH Server (WinSSD) 6.2: free only for personal non-commercial use\n- SSH-2.0-OpenSSH_6.6p1 Ubuntu-2ubuntu1\nI don't think I've ever seen your server identification string. You can get it by doing $sftp->getServerIdentification(). Not that I expect that to be of any use to me.\nThe file you posted doesn't really help either.\nIf it works in 0.3.5 then what could be done is...  for the 512mb file that works in 0.3.5 do real time logging and dump it to a file. eg. define('NET_SSH2_LOGGING', 3) and  do php test.php > log.txt. And do the same for 0.3.7. I could then compare them side-by-side. Since the log files are going to be quite large (probably several GB) getting them to me, unfortunately, is not going to be that easy. Unless you know of some place that'll hold multi GB files I guess you could snail mail me some DVDs containing logs or something.\nFailing that there really isn't much more I can think of and in lieu of the log files I'll probably have to close this as wontfix. It's either that or overwrite all the latest Git files with the 0.3.5 version, commit, and cease development henceforth out of fear that I might break things that I can't reproduce. Meh :-(\n. Actually, never mind for the $sftp->getServerIdentification() string...  I see that you emailed that to me..\n. Also, I do appreciate your patience. I'm just kinda frustrated with this :( I'm sure you are too :(\n. Do you think getting me the full logs it at all do'able? Like I said they're gonna be big. They could probably be compressed a good amt but even compressed it'll probably still be many hundreds of MB at best.\n. The login password is replaced with \"password\". ie. although phpseclib sends the actual password to the server what it logs is a password of \"password\". Here's the code where it does that:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1928\nIt does this for keyboard-interactive auth too:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L2091\nNote that if you do sudo via write() or exec() or some such and enter the pw in that way it'll show up but if you're only doing SFTP stuff I don't expect that to be an issue for you. Not knowing anything about the data you're sending over it's possible that that could have a password in it too idk. But baring something like that phpseclib does filter out passwords as best as can be reasonably expected.\n. I'm still going through the logs. Between starting a new job today and rewriting _decode_ber (in response to a bug report that had been emailed to me) work has been slow. Not that it would have been fast by any measure but however slow it would have otherwise been it's been even slower still.\nAnyway, my preliminary look at the logs makes me think the window size is still to blame. To wit, if you could test the following different \"snap shots\" of phpseclib and find which one it stops working at that'd be helpful. Clicking on the date will download the zip and clicking on the seven digit hex code after will show you the commit that that one is testing (in case you're curious).\n- Jul 7, 2013: https://github.com/phpseclib/phpseclib/commit/309f79ecea3262f2a94550e1b5e22f8d31ca5dd5\n- Jul 14, 2013: https://github.com/phpseclib/phpseclib/commit/0f96fae81879e6d8a19831a98063ecd9e2e1fdf9\n- Jul 17, 2013: https://github.com/phpseclib/phpseclib/commit/ccb1c3e2bdefd41cb3a7a21876eb0f5cd055c601\n- Jul 22, 2013: https://github.com/phpseclib/phpseclib/commit/8c9e7a890e5755ee27fca66590ff5d2fa0616e56\n- Sep 12, 2013: https://github.com/phpseclib/phpseclib/commit/9f8d8a7bf6c92d49f71dcadf585c898fcccd5c0d\n- Mar 21, 2014: https://github.com/phpseclib/phpseclib/commit/7a2c7a414c08d28f0700c7f6f8686a9e0e246a44\n- May 26, 2014: https://github.com/phpseclib/phpseclib/commit/db32efb2767b4b265dad85bc12567fea5e4ff623\n. So I'm wondering if https://github.com/phpseclib/phpseclib/commit/ccb1c3e2bdefd41cb3a7a21876eb0f5cd055c601 is the problem. If so then the following would fix it:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nline 2971 in 0.3.7 branch\n\n        $this->window_size_server_to_client[$channel]-= strlen($response) + 4;\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        $this->window_size_server_to_client[$channel]-= strlen($response);\n\n\n-----[ FIND ]------------------------------------------\nline 3290 in 0.3.7 branch\n\n        $this->window_size_client_to_server[$client_channel]-= strlen($temp) + 4;\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        $this->window_size_client_to_server[$client_channel]-= strlen($temp);\n\n\n-----[ FIND ]------------------------------------------\n\n    $this->window_size_client_to_server[$client_channel]-= strlen($data) + 4;\n\n\n-----[ REPLACE WITH ]----------------------------------\nline 3303 in 0.3.7 branch\n\n    $this->window_size_client_to_server[$client_channel]-= strlen($data);\n\n```\nIf not then if you could still go through each of the above versions to find which one caused the break that'd be helpful.\nI still want to go through the logs further, though, and I need to go through my notes and tickets here to see if I can figure out why that change was made and re-read the SSH RFCs and the errata I opened against SSH at some point..\n. I made a few other changes here:\nhttps://github.com/terrafrost/phpseclib/commit/9e71e0bce87d56b9ef80ddb12947ae84bb9b5c26\nCould you download that branch and tell me how it works for you? Here's the URL to download:\nhttps://github.com/terrafrost/phpseclib/archive/ssh-window-size-changes.zip\n. > The tests are great, but unfortunatly only cover the rather basic case. More exotic use cases using the other parameters of get() and put() are not covered.\nYes. There are a lot of deficiencies in the unit tests. However, I think those should be addressed in their own PR. get() and put() already have a good number of parameters. This isn't a PR to make the unit tests of all get() / put() functions feature complete. It seems like that'd be almost as much feature creep as it would be to include a change to File_X509::loadX509() in a PR that's mostly about Net_SSH2::_get_channel_packet() for example.\nI mean, if we're going to go through the trouble of making the get() / put() unit tests complete for resources it doesn't seem it's much work from there to make it complete for everything, be it files on the filesystem or strings. But that's a bit beyond the scope of this PR imho.\n. What would be more useful than the snippet you provided of the log is the whole log. <<< START >>> represents the oldest part of the file - not the most recent, which is what would be more useful.\nThat said, if it isn't stalling, you could do define('NET_SSH2_LOGGING', 2) instead and then do echo $sftp->getLog(). That'll give you the last 1MB of logs. The logging mode you're using does the same thing, in theory, but it's harder to read that.\nAlso, could you do this?:\nphp\nprint_r($sftp->getErrors());\nprint_r($sftp->getSFTPErrors());\nFinally, if it's returning false, it'd be helpful to know where it's returning false. If you could replace the put() method in your SFTP.php with this that'd be helpful:\n``` php\n    function put($remote_file, $data, $mode = NET_SFTP_STRING, $start = -1, $local_start = -1)\n    {\n        if (!($this->bitmap & NET_SSH2_MASK_LOGIN)) {\nexit('FALSE x1');\n            return false;\n        }\n    $remote_file = $this->_realpath($remote_file);\n    if ($remote_file === false) {\n\nexit('FALSE x2');\n            return false;\n        }\n    $this->_remove_from_stat_cache($remote_file);\n\n    $flags = NET_SFTP_OPEN_WRITE | NET_SFTP_OPEN_CREATE;\n    // according to the SFTP specs, NET_SFTP_OPEN_APPEND should \"force all writes to append data at the end of the file.\"\n    // in practice, it doesn't seem to do that.\n    //$flags|= ($mode & NET_SFTP_RESUME) ? NET_SFTP_OPEN_APPEND : NET_SFTP_OPEN_TRUNCATE;\n\n    if ($start >= 0) {\n        $offset = $start;\n    } elseif ($mode & NET_SFTP_RESUME) {\n        // if NET_SFTP_OPEN_APPEND worked as it should _size() wouldn't need to be called\n        $size = $this->size($remote_file);\n        $offset = $size !== false ? $size : 0;\n    } else {\n        $offset = 0;\n        $flags|= NET_SFTP_OPEN_TRUNCATE;\n    }\n\n    $packet = pack('Na*N2', strlen($remote_file), $remote_file, $flags, 0);\n    if (!$this->_send_sftp_packet(NET_SFTP_OPEN, $packet)) {\n\nexit('FALSE x3');\n            return false;\n        }\n    $response = $this->_get_sftp_packet();\n    switch ($this->packet_type) {\n        case NET_SFTP_HANDLE:\n            $handle = substr($response, 4);\n            break;\n        case NET_SFTP_STATUS:\n            $this->_logError($response);\n\nexit('FALSE x4');\n                return false;\n            default:\n                user_error('Expected SSH_FXP_HANDLE or SSH_FXP_STATUS');\nexit('FALSE x5');\n                return false;\n        }\n    // http://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#section-8.2.3\n    switch (true) {\n        case is_resource($data):\n            $mode = $mode & ~NET_SFTP_LOCAL_FILE;\n            $fp = $data;\n            break;\n        case $mode & NET_SFTP_LOCAL_FILE:\n            if (!is_file($data)) {\n                user_error(\"$data is not a valid file\");\n\nexit('FALSE x6');\n                    return false;\n                }\n                $fp = @fopen($data, 'rb');\n                if (!$fp) {\nexit('FALSE x7');\n                    return false;\n                }\n        }\n    if (isset($fp)) {\n        $stat = fstat($fp);\n        $size = $stat['size'];\n\n        if ($local_start >= 0) {\n            fseek($fp, $local_start);\n        } elseif ($mode & NET_SFTP_RESUME_START) {\n            // do nothing\n        } else {\n            fseek($fp, $offset);\n        }\n    } else {\n        $size = strlen($data);\n    }\n\n    $sent = 0;\n    $size = $size < 0 ? ($size & 0x7FFFFFFF) + 0x80000000 : $size;\n\n    $sftp_packet_size = 4096; // PuTTY uses 4096\n    // make the SFTP packet be exactly 4096 bytes by including the bytes in the NET_SFTP_WRITE packets \"header\"\n    $sftp_packet_size-= strlen($handle) + 25;\n    $i = 0;\n    while ($sent < $size) {\n        $temp = isset($fp) ? fread($fp, $sftp_packet_size) : substr($data, $sent, $sftp_packet_size);\n        $subtemp = $offset + $sent;\n        $packet = pack('Na*N3a*', strlen($handle), $handle, $subtemp / 4294967296, $subtemp, strlen($temp), $temp);\n        if (!$this->_send_sftp_packet(NET_SFTP_WRITE, $packet)) {\n            if ($mode & NET_SFTP_LOCAL_FILE) {\n                fclose($fp);\n            }\n\nexit('FALSE x8');\n                return false;\n            }\n            $sent+= strlen($temp);\n        $i++;\n\n        if ($i == NET_SFTP_QUEUE_SIZE) {\n            if (!$this->_read_put_responses($i)) {\n                $i = 0;\n                break;\n            }\n            $i = 0;\n        }\n    }\n\n    if (!$this->_read_put_responses($i)) {\n        if ($mode & NET_SFTP_LOCAL_FILE) {\n            fclose($fp);\n        }\n        $this->_close_handle($handle);\n\nexit('FALSE x9');\n            return false;\n        }\n    if ($mode & NET_SFTP_LOCAL_FILE) {\n        fclose($fp);\n    }\n\n    return $this->_close_handle($handle);\n}\n\n```\n. Yah - if you could email the log to me that'd be great. terrafrost@php.net . Thanks!\n. First, if you could try this version that'd be good:\nhttps://github.com/terrafrost/phpseclib/archive/ssh-window-size-changes.zip\nIf you're still having this issue (and I think there's a good chance you will be) if you could replace your _send_channel_packet() function with this:\n``` php\n    function _send_channel_packet($client_channel, $data)\n    {\nif (!strlen($data)) {\n$backtrace = debug_backtrace(); \nfor ($i = 0; $i < count($backtrace); $i++) { \n    unset($backtrace[$i]['args']); \n    unset($backtrace[$i]['object']); \n} \nprint_r($backtrace);\nexit('data is empty');\n}\n        /* The maximum amount of data allowed is determined by the maximum\n           packet size for the channel, and the current window size, whichever\n           is smaller.\n       -- http://tools.ietf.org/html/rfc4254#section-5.2 */\n    $max_size = min(\n        $this->packet_size_client_to_server[$client_channel],\n        $this->window_size_client_to_server[$client_channel]\n    );\n    while (strlen($data) > $max_size) {\n        if (!$this->window_size_client_to_server[$client_channel]) {\n            $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n            // using an invalid channel will let the buffers be built up for the valid channels\n            $output = $this->_get_channel_packet(-1);\n            $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n            $max_size = min(\n                $this->packet_size_client_to_server[$client_channel],\n                $this->window_size_client_to_server[$client_channel]\n            );\n        }\n\n        $temp = $this->_string_shift($data, $max_size);\n\nif (!strlen($temp)) {\n$backtrace = debug_backtrace(); \nfor ($i = 0; $i < count($backtrace); $i++) { \n    unset($backtrace[$i]['args']); \n    unset($backtrace[$i]['object']); \n} \nprint_r($backtrace);\nexit('data is empty x2');\n}\n            $packet = pack('CN2a*',\n                NET_SSH2_MSG_CHANNEL_DATA,\n                $this->server_channels[$client_channel],\n                strlen($temp),\n                $temp\n            );\n        $this->window_size_client_to_server[$client_channel]-= strlen($temp);\n\n        if (!$this->_send_binary_packet($packet)) {\n            return false;\n        }\n    }\n\n    if (strlen($data) >= $this->window_size_client_to_server[$client_channel]) {\n        $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n        $this->_get_channel_packet(-1);\n        $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n    }\n\n    $this->window_size_client_to_server[$client_channel]-= strlen($data);\n\nif (!strlen($data)) {\n$backtrace = debug_backtrace(); \nfor ($i = 0; $i < count($backtrace); $i++) { \n    unset($backtrace[$i]['args']); \n    unset($backtrace[$i]['object']); \n} \nprint_r($backtrace);\nexit('data is empty x3');\n}\n    return $this->_send_binary_packet(pack('CN2a*',\n        NET_SSH2_MSG_CHANNEL_DATA,\n        $this->server_channels[$client_channel],\n        strlen($data),\n        $data));\n}\n\n```\nThat'd be helpful.\nThanks!\n. I guess I'll close this in lieu of having heard back on whether or not the customer verified this.\n. sjparsons is using PHP 5.4.\nsigh I'll try to reproduce on PHP 5.6RC2 on Windows. Failing that, I'll try compiling it on Linux. Meh. I am getting a little trying to reproduce every environment under the sun. \n. And it looks like there's no binary of 5.6RC2 for windows at http://windows.php.net/download/ . Yay. Does someone want to PayPal me the money to buy Visual C++ since apparently that's what I need to compile it on Windows per https://wiki.php.net/internals/windows/stepbystepbuild ? I'm not gonna hold my breath meh.\n. Never mind...  5.6RCx is available on http://windows.php.net/qa/ ...\n. Works fine for me on PHP 5.6RC4 on Windows. Took 34 seconds to upload a 512mb to localhost with \"SSH-2.0-5.19 FlowSsh: Bitvise SSH Server (WinSSD) 6.2: free only for personal non-commercial use\", 52 seconds with \"SSH-2.0-xlightftpd_release_3.7.8\" and 43.6 seconds with \"SSH-2.0-OpenSSH_6.6p1 Ubuntu-2ubuntu1\"...\nsigh\nTo compile the Linux versions I need to be able to decompress .tar.xz files. Google searches suggested tar xf php-5.6.0RC4.tar.xz or tar -xJf php-5.6.0RC4.tar.xz but neither work. Yay.\n. I was doing tar xf php-5.6.0RC4.tar.xz per http://askubuntu.com/a/107976 . Apparently I need to do sudo apt-get install xz-utils fist. Ugh. 13 minutes to run the test, 13h to get it setup. I spend more time trying doing sysadmin stuff than I do actual dev work these days meh.\n(*) not really. that's just what it feels like.\n. Well I can't get PHP 5.6 working with gmp. And until I can I don't really see much point to bothering with this. I mean, if phpseclib is using the slowest possible config on PHP 5.6 that'd be why it's slow. Unless it's also slow on the fastest possible config should it be of concern and I can't get the fastest possible config setup.\nUsing Ubuntu Mini Remix 14.04 (amd64) LiveCD from http://www.ubuntu-mini-remix.org/ on a fresh VirtualBox I perform the following commands:\nsudo apt-get update \nsudo apt-get install build-essential libxml2-dev libgmp3-dev\nwget http://us3.php.net/distributions/php-5.6.0.tar.gz\ntar xvzf php-5.6.0.tar.gz\ncd php-5.6.0\n./configure --prefix=/usr/local --with-mcrypt --with-gmp\nThat gives me a configure: error: Unable to locate gmp.h\nsigh\nI don't suppose Travis CI has Vagrant base box for their various hosted platforms? Or, at the very least, an Ansible playbook?\nOr, alternatively, could you provide one that'll reproduce this issue? Or, failing that, you could just give me SSH access, I guess..\n. You appear to be missing mcrypt.\nWith AES, mcrypt encrypting 1mb of plaintext takes 0.1 seconds. Without it it takes 1.3 seconds. \nWith RC4, mcrypt encrypting 1mb of plaintext takes 0.02 seconds. Without it it takes 0.73 seconds.\nIt also didn't take an onerous amount of time on my Ubuntu 14.04 install ( 14.04 (amd64) from http://www.ubuntu-mini-remix.org/ on VirtualBox ) using the following setup:\nsudo apt-get install build-essential libxml2-dev \nwget http://us3.php.net/distributions/php-5.6.0.tar.gz \ntar xvzf php-5.6.0.tar.gz \nwget http://hivelocity.dl.sourceforge.net/project/mcrypt/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz \ntar xvzf libmcrypt-2.5.8.tar.gz \ncd libmcrypt-2.5.8 \n./configure --prefix=/usr/local \nmake \nsudo make install \ncd .. \ncd php-5.6.0 \n./configure --prefix=/usr/local --with-mcrypt --enable-bcmath \nmake \nsudo make install\nI never was able to get gmp installed and it looks like I need to restart to get Vagrant fully setup on this machine..\n. Well there's not much more than can realistically be done to speed up the internal modes. Maybe I could try to finish up petrich's work on making it use openssl if it's available but what about those systems on which it is not?\nMaybe this test should just be skipped if mcrypt is not present?\n. Looks good but do keep in mind that the way modes are set with the symmetric ciphers will be changing soon with this branch (based on #259):\nhttps://github.com/terrafrost/phpseclib/tree/petrich-setengine\nI need to update the unit tests and plan on adding OpenSSL support as well. It seems that OpenSSL may perhaps have better penetration than mcrypt now, anyway, so OpenSSL support will hopefully speed it up on lots of systems (Travis CI included).\n. That looks like a good change. I think when the OpenSSL stuff is done it'll work better with this as well since it is my expectation that 5.6 and hhvm support OpenSSL whereas they do not support mcrypt.\n. I'll add this to my to-do list :)\nBut atm, no, it's not supported.\n. I've put the .p7m file into the ASN1 directory but am not so gung ho about moving ASN1Test.php to that directory since that'd probably be the only file in that directory. X509/.php can have unit tests for CSR, SPKAC, CRL, X509, etc. BigInteger can have unit tests for gmp, bcmath, internal, etc.\n. This fixes #455. See https://github.com/phpseclib/phpseclib/issues/455#issuecomment-53969685 and the following comment for more info.\nThe linked commits all modify how the window size is handled. Basically, it's reverting 8c9e7a8 and ccb1c3e. ie. I made a change to fix window size issues, then I made some more changes and now I'm undoing the original changes whilst retaining the later changes. The hope is that the changes I made later are sufficient to fix whatever the original issue was.\n. The first thing I guess I'd wonder is how long it takes to upload a 1MB file. On my system, with mcrypt installed, a transfer to 127.0.0.1 takes 0.09 seconds, whereas without it it takes 0.97 seconds. Even if mcrypt is being used, as the person in that thread suggests, smaller log files that demonstrate the problem are easier to go through.\nIf transferring a small file takes a decently long amount of time he could do define('NET_SSH2_LOGGING', 1) and provide the logs by doing $sftp->getLog(). That method of logging can handle larger files than define('NET_SSH2_LOGGING', 2) can but for sufficiently large files memory issues may still crop up. In light of that maybe they could do this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n        case NET_SSH2_LOG_SIMPLE:\n            $this->message_number_log[] = $message_number;\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        case NET_SSH2_LOG_SIMPLE:\n            echo \"$message_number\\r\\n\";\n\n```\nThey could then do define('NET_SSH2_LOGGING', 1) and run a PHP upload script via the CLI, dumping the output to a file (eg. php test.php > log.txt) and then somehow get the resultant logs to me, be it via pastebin.com or email - terrafrost@php.net .\nWithout that all I can't say anything definitive. Who knows...  maybe the server is doing a key re-exchange after every byte is sent over. That'd slow things down a huge amount. Or maybe it has a window size of one byte, at which point, phpseclib would be encrypting the size of the file * 30 or something (because for each byte it's doing a full NET_SSH2_MSG_CHANNEL_DATA packet).\n. Try doing $ssh->enablePTY() before the $ssh->exec() call.\n. You could try $ssh->setTimeout() too.\nThat said it works for me. Without a PTY it'll just wait for the command to run. WIth a PTY it'll return, giving you a chance to send some data in.\nThat it ever worked for you is, honestly, a little surprising. exec() is a little like opening a terminal, running a single command then closing the terminal. So if you leave the terminal prematurely the command will stop. I think this is a situation where people normally use nohup with their command.\n. > OK so looks like you are saying everything works as expecting on your end, and it works the same way it has always worked so updating phpseclib might not be the issue.\nI think phpseclib actually did do exec() calls with a PTY at one point idk. I'd need to look through the revision history to be sure. And if it did then it's possible updating it did change the behavior.\nI guess you could get me some real time logs so that I can say, definitevely, what the difference is, instead of engaging in speculation.\nAlso, here's an example of how PTY is used:\nhttp://phpseclib.sourceforge.net/ssh/pty.html\n. Looks good to me!\n. Good catch. I'll commit a fix when I get home. Thanks!\n. It's not an error in your code and it's arguably not a bug. Using the modulo from $pub_xml and $publickey and base64-decoding them and then running them through bin2hex gets me this:\n00bf93b17048313d47daef4d4da719d27029a54646f04860624d6a1b1e421664407e0254531da568660fc3f25e98cd1ed575089d1ba805fa7b9432363be5d057818fd773256ad0771c7f58d37e0011b8dbaae06186de19c22558b642c3a071ff51ed37979fea7544a2218d0a160a2110784053a2d35b26171a6cd70f192109c3eb\n  bf93b17048313d47daef4d4da719d27029a54646f04860624d6a1b1e421664407e0254531da568660fc3f25e98cd1ed575089d1ba805fa7b9432363be5d057818fd773256ad0771c7f58d37e0011b8dbaae06186de19c22558b642c3a071ff51ed37979fea7544a2218d0a160a2110784053a2d35b26171a6cd70f192109c3eb\nie. the only difference is that the phpseclib produced key has an extra null byte before it. This is because the leading bit, without that preceding null byte, is a 1 and because phpseclib is currently using signed (big)integers.\nI suppose in the case of RSA interpreting the result as being a signed integer is unnecessary. I mean, technically, you can do a modulo with a negative number but in practice...\nThe PKCS1 specs say this:\nn, the modulus, a nonnegative integer\n   e, the public exponent, a nonnegative integer\nI suppose .NET could treat them as signed but it seems unlikely. I'll go ahead and change the behavior.\nFWIW, here's the code:\n```\n<?php\n$a = 'v5OxcEgxPUfa701NpxnScCmlRkbwSGBiTWobHkIWZEB+AlRTHaVoZg/D8l6YzR7VdQidG6gF+nuUMjY75dBXgY/XcyVq0Hccf1jTfgARuNuq4GGG3hnCJVi2QsOgcf9R7TeXn+p1RKIhjQoWCiEQeEBTotNbJhcabNcPGSEJw+s=';\n$b = 'AL+TsXBIMT1H2u9NTacZ0nAppUZG8EhgYk1qGx5CFmRAfgJUUx2laGYPw/JemM0e1XUInRuoBfp7lDI2O+XQV4GP13MlatB3HH9Y034AEbjbquBhht4ZwiVYtkLDoHH/Ue03l5/qdUSiIY0KFgohEHhAU6LTWyYXGmzXDxkhCcPr';\n$a = base64_decode($a);\n$b = base64_decode($b);\necho bin2hex($a) . \"\\r\\n\\r\\n\" . bin2hex($b);\n```\n. See #469.\nHow did you generate your XML key btw? If you generated it with .NET that'd give me more confidence that keys of that format actually are supposed to have unsigned ints. PKCS1 / PKCS8 are not supposed to have unsigned ints.\n. > Please add possibility to put proxy for any connection like TOR :)\nNot for a release that I'm planning on making within a few days. I'm not going to add a big new feature and then make a release a few days after. If I do that then other people aren't going to have had a chance to try the feature out before the release and so the likelihood of bugs being present is pretty high, at which point, I'm pretty much forcing myself to make another release very shortly after I made my last one.\n. The release has been made. Still need to update the PEAR channel.\n. > You can show me all the request connection used by the script to modify them and add proxy ?\nhttps://github.com/phpseclib/phpseclib/blob/3f3b9b90fbfc691aa91122c4073f169f1ae7f19f/phpseclib/Net/SSH2.php#L964\nTor uses SOCKS5 as I believe. To use it you can replace the fsockopen() call with something like this;\n```\n$socks['port'] = $this->proxyPort; \n$socks['address'] = $this->proxyHost; \n$fsock = fsockopen($socks['address'],$socks['port'],$errno,$errstr,5); \nsocket_set_timeout($fsock,5); \nif (!$fsock) { \n   exit(\"Can't Connect!\"); \n} \n$port = chr($this->port >> 8).chr($this->port & 255); \n$address = gethostbyname($this->host); \n$address = implode('',array_map('chr',explode('.',$address))); \n// identify version (v5) / select method (1 method - the \"no auth\" method \n$request = \"\\5\\1\\0\"; \nif (fputs($fsock,$request) != strlen($request)) { \n   exit(\"premature termination\"); \n} \n$response = fgets($fsock); \n/ we don't check the actual reply as we do in socks4 since the actual spec is somewhat ambigious as to what the first character ought to be \n/ \nif (strlen($response) != 2 && substr($response,0,2) != \"\\5\\0\") { \n   exit(\"Unsupported protocol or unsupported method\"); \n} \n/ \nthe first character represents the version (ie. v5), \nthe second, the command (1 == connect, 2 == bind, 3 == udp associate), \nthe third is always 0 (i don't know why), \nthe fourth specifies the address type (1 == ipv4 address, 2 == domain name, 3 == ipv6 address. \nsave for the last two, which represent the port, the rest represent the destination address \n/ \n$request = \"\\5\\1\\0\\1\".$address.$port; \nif (fputs($fsock,$request) != strlen($request)) { \n   exit(\"premature termination\"); \n} \n$response = fgets($fsock); \n// we don't check the response size since that can very depending on whether or not the outside world sees an IPv4 or IPv6 address.  Why the outside world would see an IPv6 address when IPv4 is all that this script uses, I don't know, but bleh \nif (substr($response,0,2) != \"\\5\\0\") { \n   exit(\"Unsupported protocol or connection refused\"); \n}\n```\nie. just ensure that instead of making an fsockopen call to the SSH server it makes it to the SOCKS5 server and that the tunneling / proxying / whatever you want to call it is setup correctly before phpseclib starts making it's calls.\n. If you could tunnel all traffic on the computer through TOR (ie. use TOR as a VPN I guess) I guess then it'd be automatic. But failing that you'd have to tunnel as described above.\n. What exactly are you wanting?\nI provided you with the changes that'd need to be made to make phpseclib tunnel through a SOCKS5 proxy. I'm not going to make that an official part of phpseclib until after an up and coming release and after I'm come up with some sort of API to facilitate this. I'm going to have it support not only SOCKS5 but anything, including SSH, itself.\n\nI find this library to replace fsock_open by an alternative that use proxy:\nhttps://github.com/bitaurora/phsocks\nBut no way to implement it !\nSame here: http://www.phpclasses.org/package/1822-PHP-TCP-connection-wrapper-using-SOCKS-5-protocol.html\n\nWhat do those do that mine doesn't? If you want a stand-alone SOCKS client use one of those. If you want SOCKS in SSH use my solution. Or make your own using one of the tools you provided.\nYou say you want TOR to connect directly. ie. without going through 127.0.0.1 on whatever port? The classes you linked to don't implement Tor - they implement SOCKS. So if you're wanting a pure-PHP TOR client than not even those classes do that and phpseclib isn't going to be doing that anytime soon either. I mean, that's a huge undertaking. Something that'd take years. If that's even what you're wanting..\n. I've updated my original post. Do \n$ssh = new Net_SSH2('...');\n$ssh->proxyPort = '...';\n$ssh->proxyHost = '...';\n$ssh->login('...', '...');\n. Can you not modify the files yourself? I'm hesitent to do so for two reasons.\n1. Although I expect the changes to work they have not been tested and if I email you the premodified files you might expect them to have been tested. These changes are not being committed and I am not so gung ho about subjecting them to the same rigor that I would a normal commit.\n2. Custom one-off modifications complicate support. If I have to engage in significant hand holding for even basic file changes then that doesn't bode well for future support questions you might have for these changes.\nAnd plus, from another perspective, if you do the changes yourself you might get familiar with the code to the point where you could make your own pull requests. If I do everything for you the odds of you making a pull request drops down significantly.\n. The example could be out of date idk w.r.t. OpenSSL. I'll have to play it around as time permits. I doubt the phpseclib example is out of date.\nThat said, most interoperability issues are due to people not understanding how phpseclib and the other library they're using work. A few examples:\n- some people use libraries that return base64-encoded ciphertext. phpseclib expects raw ciphertext so you'd need to do base64_decode on this data before passing it to phpseclib.\n- phpseclib uses PKCS padding by default. some libraries use other padding schemes (eg. null padding), assuming they even pad at all.\n- are you setting both the IV and the key? there are some libraries that i just can't figure out how they handle the IV's.\n- are you sure what you're using as the key is actually being used as a key? some libraries use some sort of password-based key derivation function. so with these libraries the string that you think you're using isn't actually the key - the string is being transformed to something else that's being used as the key.\n- are you using a block size of 128? AES only supports 128-bit block sizes but Rijndael supports any block size between 128 and 256 so long as it's a multiple of 32.\n- some libraries auto-generate an IV and prepend it to the ciphertext. that's fine but to get a correct decryption you'll need to first extract the iv, remove it from the ciphertext and /then/ decrypt it.\n. In the example I do $aes->setKey('AA') - not $aes->setKey('AA000000000000000000000000000000'). If you want to null pad the key and IV manually (instead of letting phpseclib do it) you'll need to do $aes->setKey(\"AA\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\").\nIf memory serves AA isn't meant to be interpreted as a hex string - it's the raw password. Maybe I should change it to XX so that people don't go thinking it's hex-encoded when it isn't.\n. Actually, ignore what I said. I'll have to play around when I get home and as time permits.\n. bantu is right - it is hex encoded. You need to do pack on the setKey / setIV params. The examples need to be updated.\n. Fixed with https://github.com/phpseclib/docs/commit/0a02fd0c3f98f0fa6ee9b2851b277e0aeb2b5462\n. Not at the moment. It's the next big ticket item I plan on working on but the problem is I have a lot of small ticket phpseclib stuff that atm is higher priority to me.\n. Can you provide !CA.crl? I didn't have any issues with this:\n``` php\n<?php\nerror_reporting(E_ALL);\ninclude('File/X509.php');\n$str = file_get_contents('http://phpseclib.sourceforge.net/x509/crl.bin');\n$obj = new File_X509();\n$obj->loadCRL($str);\n```\nYou can email the file to me at terrafrost@php.net. Thanks!\n. Well I can't even reproduce it with that cert either. Tried PHP 5.6.0 (cli) (built: Aug 27 2014 11:53:11) on Windows:\n``` php\n<?php\nerror_reporting(E_ALL);\ninclude('File/X509.php');\n$str = '-----BEGIN X509 CRL-----\nMIHvMFwCAQEwCwYJKoZIhvcNAQENMBYxFDASBgNVBAMMC1ZpcnNhY2VyIENBFw0x\nNDA5MTcwNzMwMTlaoCMwITAfBgNVHSMEGDAWgBSbVKO3NNB7CORD2eG5CAn5DmNj\n7zALBgkqhkiG9w0BAQ0DgYEAEEZuJAMwH3cHGtuzsb8Vc5wXSBaJiX8L5OO0cLzq\nlecECIjh/h2MhSKd9xBq8PEAScmLF5IgEDQUG3akv+OL1YlTQEcnNWCzeopl9DDE\niKlQ82EsTmZ6mZtRgPkP9wLLKgh/sinZ/5XES0kwh9py5w8lsxuMaNfqc4E8rnVV\nsjI=\n-----END X509 CRL-----';\n$obj = new File_X509();\n$obj->loadCRL($str);\n```\nDoes this or the other script produce the error for you? If not then there is either (1) something else you are doing that these scripts aren't doing (hard to say since you haven't posted any scripts yourself) or else (2) there's something environmental that's effecting things.\n. Can you post your phpinfo() and php.ini files?\n. Well I can't reproduce it.\nAre you using the latest Git version of File/ASN1.php?\nAssuming you are then can you do this?:\n```\n\n-----[ OPEN ]------------------------------------------\n\nFile/ASN1.php\n\n-----[ FIND ]------------------------------------------\n\n        case FILE_ASN1_TYPE_OCTET_STRING:\n            return base64_encode($decoded['content']);\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        case FILE_ASN1_TYPE_OCTET_STRING:\n\nvar_dump($decoded['content']);\n                return base64_encode($decoded['content']);\n```\nOnce that's done run this:\n```\n<?php\nerror_reporting(E_ALL);\ninclude('File/X509.php');\n$str = '-----BEGIN X509 CRL-----\nMIHvMFwCAQEwCwYJKoZIhvcNAQENMBYxFDASBgNVBAMMC1ZpcnNhY2VyIENBFw0x\nNDA5MTcwNzMwMTlaoCMwITAfBgNVHSMEGDAWgBSbVKO3NNB7CORD2eG5CAn5DmNj\n7zALBgkqhkiG9w0BAQ0DgYEAEEZuJAMwH3cHGtuzsb8Vc5wXSBaJiX8L5OO0cLzq\nlecECIjh/h2MhSKd9xBq8PEAScmLF5IgEDQUG3akv+OL1YlTQEcnNWCzeopl9DDE\niKlQ82EsTmZ6mZtRgPkP9wLLKgh/sinZ/5XES0kwh9py5w8lsxuMaNfqc4E8rnVV\nsjI=\n-----END X509 CRL-----';\n$obj = new File_X509();\n$obj->loadCRL($str);\n```\nHere's what I get:\nstring(24) \"0\u0016\u20ac\u0014\u203aT\u00a3\u00b74\u00d0{\b\u00e4C\u00d9\u00e1\u00b9\b   \u00f9\u000ecc\u00ef\"\nstring(129) \"\\000\u0010Fn$0\u001fw \u001a\u00db\u00b3\u00b1\u00bf\u0015s\u0153\u0017H\u0016\u2030\u2030\u007f\n\u00e4\u00e3\u00b4p\u00bc\u00ea\u2022\u00e7\u0004\b\u02c6\u00e1\u00fe\u001d\u0152\u2026\"\u009d\u00f7\u0010j\u00f0\u00f1\\000I\u00c9\u2039\u0017\u2019 \u00104\u0014\u001bv\u00a4\u00bf\u00e3\u2039\u00d5\u2030S@G'5`\u00b3z\u0160e\u00f40\u00c4\u02c6\u00a9P\u00f3a,Nfz\u2122\u203aQ\u20ac\u00f9\u000f\u00f7\u00cb*\b\u007f\u00b2)\u00d9\u00ff\u2022\u00c4KI0\u2021\u00dar\u00e7\u000f%\u00b3\u001b\u0152h\u00d7\u00eas\u0081<\u00aeuU\u00b22\"\nstring(20) \"\u203aT\u00a3\u00b74\u00d0{\b\u00e4C\u00d9\u00e1\u00b9\b \u00f9\u000ecc\u00ef\"\nWhat do you get?\nAlso, can you do $asn1 = new File_ASN1(); $asn1->decodeBER($str) and tell me what you get?\nThanks!\n. Do this:\n```\n<?php\nerror_reporting(E_ALL);\ninclude('File/X509.php');\n$str = file_get_contents('http://phpseclib.sourceforge.net/x509/crl.bin');\n$str = '-----BEGIN X509 CRL-----\nMIHvMFwCAQEwCwYJKoZIhvcNAQENMBYxFDASBgNVBAMMC1ZpcnNhY2VyIENBFw0x\nNDA5MTcwNzMwMTlaoCMwITAfBgNVHSMEGDAWgBSbVKO3NNB7CORD2eG5CAn5DmNj\n7zALBgkqhkiG9w0BAQ0DgYEAEEZuJAMwH3cHGtuzsb8Vc5wXSBaJiX8L5OO0cLzq\nlecECIjh/h2MhSKd9xBq8PEAScmLF5IgEDQUG3akv+OL1YlTQEcnNWCzeopl9DDE\niKlQ82EsTmZ6mZtRgPkP9wLLKgh/sinZ/5XES0kwh9py5w8lsxuMaNfqc4E8rnVV\nsjI=\n-----END X509 CRL-----';\n$asn1 = new File_ASN1();\nvar_dump($asn1->decodeBER($str));\n``\n. Did you remove$asn1[0]['content']` for berevity? If so then if you could post it with that that would be helpful.\nI ask because I want to compare the output of your ASN1 decode vs. mine. Here's mine:\nhttp://pastebin.com/zVFL6dSs\n$asn1[0]['length'] matches as does $asn1[0]['type']. But yours is missing $asn1[0]['content'] whereas mine isn't, which makes me think you may have manually removed it prior to posting..\nThanks!\n. What about...  \n```\n<?php\nerror_reporting(E_ALL);\ninclude('File/X509.php');\n$str = '-----BEGIN X509 CRL-----\nMIHvMFwCAQEwCwYJKoZIhvcNAQENMBYxFDASBgNVBAMMC1ZpcnNhY2VyIENBFw0x\nNDA5MTcwNzMwMTlaoCMwITAfBgNVHSMEGDAWgBSbVKO3NNB7CORD2eG5CAn5DmNj\n7zALBgkqhkiG9w0BAQ0DgYEAEEZuJAMwH3cHGtuzsb8Vc5wXSBaJiX8L5OO0cLzq\nlecECIjh/h2MhSKd9xBq8PEAScmLF5IgEDQUG3akv+OL1YlTQEcnNWCzeopl9DDE\niKlQ82EsTmZ6mZtRgPkP9wLLKgh/sinZ/5XES0kwh9py5w8lsxuMaNfqc4E8rnVV\nsjI=\n-----END X509 CRL-----';\n$asn1 = new File_ASN1();\necho base64_encode(serialize($asn1->decodeBER($str)));\n```\nI get http://pastebin.com/pzSF3L20 - a 1388 byte file.\n. The problem occurs when the extensions are being mapped in. ie. the ASN1 decode of the CRL is correct but the ASN1 decode of some of the extensions are not.\nhttps://github.com/phpseclib/phpseclib/issues/477#issuecomment-56214582 is a bad example as decodeBER() needs PEM input to be decoded to DER input (and base64 encoded stuff is PEM input). I'm not sure why I was getting the behavior that I was on Friday. That was on my work computer, which I only have access to during the weekday, so I won't be able to figure why I was getting that behavior until tomorrow. Maybe I was running the wrong script or maybe I was doing something else idk - it's not that important.\n``` php\n<?php\ninclude('File/ASN1.php');\n$asn1 = new File_ASN1();\nprint_r($asn1->decodeBER(base64_decode('MBaAFJtUo7c00HsI5EPZ4bkICfkOY2Pv')));\n```\nThat demonstrates the problem better. ie. that should produce this as output:\n```\nArray\n(\n    [0] => Array\n        (\n            [start] => 0\n            [headerlength] => 2\n            [type] => 16\n            [content] => Array\n                (\n                    [0] => Array\n                        (\n                            [type] => 2\n                            [constant] => 0\n                            [content] => \u00a2T\u00fa\u25564\u2568\u03a3C\u2518\u00df     \u2219\u266bcc\u2229\n                            [length] => 22\n                            [start] => 2\n                            [headerlength] => 2\n                        )\n            )\n\n        [length] => 24\n    )\n\n)\n```\n...except that it doesn't with the current version. I'm still looking into why and would not be surprised if this took the rest of the week to figure out. Maybe I could figure it out if I could devote a full day to it but I have shit to do throughout the day, including my day job, so it's gonna take a while. FML.\n. Try https://github.com/phpseclib/phpseclib/pull/480\n. What version of phpseclib are you running? If you're not running 0.3.8 try upgrading to that version and lmk if you have the same issue.\n. Can you post the logs? Also, can you post the exact error messages so I can see the line numbers? Even if 99% of the error message is the same if even 1% is different that 1% is still useful.\nAlso, what version of phpseclib are you using?\n. I didn't realize you were the orig poster lol. Sorry.\nAnyway, in Net/SSH2.php try finding this:\nstatic $kex_algorithms = array(\n    'diffie-hellman-group1-sha1', // REQUIRED\n    'diffie-hellman-group14-sha1' // REQUIRED\n);\n...and comment out diffie-hellman-group1-sha1. The idea for that is based off of https://github.com/phpseclib/phpseclib/pull/432#issuecomment-50574560 . It's a shot in the dark but couldn't hurt to try.\nCan you connect with any other SSH2 clients?\nAlso, setting the log level to DEBUG3 and then posting the SSH logs could be helpful.\n. Try, then, to find this:\nphp\n $encryption_algorithms = array(\n    // from <http://tools.ietf.org/html/rfc4345#section-4>:\n    'arcfour256',\n    'arcfour128',\n...and comment out both arcfour's.\nBasically, my guess is that the server is silently killing the connection when it comes across an algorithm it doesn't like. If it doesn't like it it ought not be advertising it, saying that it supports it, in the key exchange message, but it's happened before where SSH servers erroniously and silently (well silently unless you got DEBUG3 on) kill the connection if they encounter a combination of algorithms they don't like (eg. https://github.com/phpseclib/phpseclib/pull/432#issuecomment-50574560)\n. Well I'm not going to do $ssh->exec('cat > test.bin', null, file_get_contents('test.bin')); since that's beginning to resemble a \"god function\". ie. a function that takes a ton of parameters and does way too much.\nTry this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin write()\n\n    if (!($this->bitmap & NET_SSH2_MASK_SHELL) && !$this->_initShell()) {\n        user_error('Unable to initiate an interactive shell session');\n        return false;\n    }\n\n    return $this->_send_channel_packet($this->_get_interactive_channel(), $cmd);\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    return $this->_send_channel_packet($this->_get_interactive_channel(), $cmd);\n\n. php\n-        if (!($this->bitmap & NET_SSH2_MASK_SHELL) && !$this->_initShell()) {\n-            user_error('Unable to initiate an interactive shell session');\n-            return false;\n-        }\n+        if ($this->in_request_pty_exec === true) {\n+            if (!($this->bitmap & NET_SSH2_MASK_SHELL) && !$this->_initShell()) {\n+                user_error('Unable to initiate an interactive shell session');\n+                return false;\n+            }\n```\nThat's redundant. From _initShell():\nphp\n    function _initShell()\n    {\n        if ($this->in_request_pty_exec === true) {\n            return true;\n        }\nAlso...\nphp\n-        $channel = $this->_get_interactive_channel();\n+            $channel = $this->_get_interactive_channel();\n+        } else {\n+            $channel = NET_SSH2_CHANNEL_EXEC;\n+        }\nThat's unnecessary too. From _get_interactive_channel():\nphp\n    function _get_interactive_channel()\n    {\n        switch (true) {\n            case $this->in_subsystem:\n                return NET_SSH2_CHANNEL_SUBSYSTEM;\n            case $this->in_request_pty_exec:\n                return NET_SSH2_CHANNEL_EXEC;\n            default:\n                return NET_SSH2_CHANNEL_SHELL;\n        }\n    }\n...or am I mistaken on what your patch is doing?\nAlso, personally, I'd like a pull request more than a patch. I can preview pull requests on github. With a patch I have to start my Ubuntu virtual machine, do wget on the patch URL and then look at the changes. ie. it's a lot more work.\nAnyway, that all said, I did start up my Ubuntu virtual machine and did some testing. I wasn't able to get your code workin. Here's what worked for me:\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->login('user', 'pass');\n$ssh->enablePTY();\n$ssh->exec('cat > zzz.txt');\n$ssh->write(\"asdfasdf\\n\");\n$ssh->read('asdfasdf');\n```\nThat works.\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->login('user', 'pass');\n$ssh->read('ubuntu@ubuntu:~$');\n$ssh->write(\"cat > hello2.txt\\n\");\n$ssh->read('cat > hello2.txt');\n$ssh->write(\"zzzzzzza\\n\");\n$ssh->read('zzzzzzza');\n$ssh->write(\"\\x03\");\n$ssh->read('ubuntu@ubuntu:~$');\n```\nThat works too. If you don't want for the terminal to echo the commands back to you there's a chance that the data you send will be sent before the OS has had a chance to process it.\nThe latter doesn't work well with binary data. See https://github.com/phpseclib/phpseclib/issues/105#issuecomment-18076834 for more info. idk that the former would work with binary data either.\nUltimately, in my mind, this is a Linux issue, or something, and I'm not a Linux expert.\n. What if I added a new function - $ssh->sendEOF()? Or rather modified the existing $ssh->reset() function to accept an optional parameter that, if set to true, would require a response? To make that change replace your copy of Net_SSH2's reset with this:\nphp\n    function reset($want_reply = false)\n    {\n        $this->_close_channel($this->_get_interactive_channel(), $want_reply);\n    }\nHere's an example of how to use it:\nphp\n$ssh->enablePTY();\n$ssh->exec(\"bash -s first second\");\n$ssh->write(<<<EOF\necho \"This is a bash script run remotely, how fun is that?\"\necho \"First two params: $1 and $2\"\nexit 1\nEOF\n);\n$ssh->reset(true);\n$ssh->setTimeout(5);\necho $ssh->read();  // outputs the echo above\nIt actually doesn't work so well for me (hence the setTimeout) because sending an EOF alone doesn't cause the server to close the connection or send an EOF of its own so phpseclib just sits there (without the setTimeout) waiting and waiting for the packets that never come. Unfortunately, I don't think there's much phpseclib is going to be able to do about that..\nI don't want to auto-send an EOF at the end of a write or at the beginning of a read because that'd break this use-case of PTY exec calls:\nphp\n$ssh->enablePTY();\n$ssh->exec('bash');\necho $ssh->read('ubuntu@ubuntu:~$');\n$ssh->write(\"ls -la\\n\");\necho $ssh->read('ubuntu@ubuntu:~$');\n$ssh->write(\"pwd\\n\");\necho $ssh->read('ubuntu@ubuntu:~$');\n. Honestly, right now, I'd say just continue what you're doing. I want to redo the channel management completely at some point anyway and I don't want to do a one of change for you when the whole thing is going to be subject to change anyway.\nAmong other limitations...  you can't do concurrent exec's or interactive shell's. You can't do much of anything concurrently because the channels are hard-coded. exec() uses 0 and it always uses 0 and the interactive shell uses 1 and it always uses 1, etc.\n``` php\n$ssh = new Net_SSH2();\n$ssh->login('...');\n$ssh->exec(); // returns output\n$sh01 = $ssh->shell();\n// maybe have the PTY be disabled by default and require people enable it by doing $sh01->enablePTY() ?\n$sh01->read('[prompt]');\n$sh01->write('...');\n$sh02 = $ssh->shell();\n$sh02->setTimeout(5);\n$sh02->read('[prompt]');\n$sh02->write('...');\n$run = $ssh->run('command');\n$run->enablePTY();\n$run->write('...');\n$run->sendEOF();\necho $run->read();\n$sub = $ssh->subsystem('command');\n$sub->read('...');\n$sub->write('...');\n```\nI think that would give you the granularity you want. However, we're a ways away from that.\nOnce this is done $ssh->read(), $ssh->write() and $ssh->startSubsystem() would become deprecated and at some point maybe the master branch is abandoned and the BC breaking php5 branch becomes the master branch as 1.0.0 or something. But we're a long way away from that.\n. Yah - I'm going to do tests tonight. I did the PR at like 1-1:30am last night and figured getting sleep was more important than spending another 30 minutes doing the unit test.\n. Sounds like the connection is being prematurely closed by the server. Can you post the logs? eg. do this at the top:\ndefine('NET_SSH2_LOGGING', 2);\n...and then at the end of the script do echo $ssh->getLog().\n. Is that the entirety of the logs? Are you doing the echo $ssh->getLog() after your $ssh->login() call? If that's really all you're getting than the server is definitely killing the connection and it's not because of any erronious data phpseclib is sending and idk that there's gonna be a lot I can do to fix it...\n. How are you trying to connect? localhost to localhost or what?\nI guess you could do a find and replace for @ and remove each of them. It's not going to solve your issue but you might get some more errors being displayed idk...\nCan you connect with any other SSH clients? If so how are you connecting with those? Home IP Address to Web Host IP Address?\n. > The following code makes php exits, it doesnt give any warnings, it just exist;\nWell there aren't any exit's or die's in phpseclib. You can grep through the code base and you won't find any that aren't commented out examples.\nI suppose PHP itself could be crashing. I don't know what your phpinfo() looks like but maybe you could try to isolate where it's crashing and file a bug report on php.net.\nWhat does your full code look like? If it looks like this:\nphp\n<?php\n$sftp = new Net_SSH2(\"server.samp-xportal.com\");\n$sftp->login(\"random\", \"random\");\nAnd that's all your PHP file has then try adding an echo 'hello, world!' after or something. I mean I wouldn't expext the above to output anything anyway.\n\nphp\n$sftp = new Net_SSH2(\"http://server.samp-xportal.com/\");\n$sftp->login(\"random\", \"random\");\n\nThat fsockopen (which is what phpseclib uses) would even connect to that is quite surprising. Here's what happened when I tried fsockopen('http://localhost', 22):\nPHP Warning:  fsockopen(): unable to connect to http://localhost:22 (Unable to find the socket transport \"http\" - did you forget to enable it when you configured PHP?) in /home/username/test.php on line 2\nAnd that's not a phpseclib thing - that's a PHP thing.\n\nThe follow code works;\nphp\n$sftp = new Net_SFTP(\"123\");\n$sftp->login(\"test\", \"test\");\n\nDefine works. Unless you have 123 defined as a hostname on your LAN it's doubtful that'd \"work\" and idk if 123 even is a valid hostname...\n. > terrafost, thanks for your reply, well what I ment with it works in the follow example, is that my php doesnt crasht, it does give me a warning that it was unable to connect.\nOh ok. That makes more sense.\n\nBut when I use a real IP it crashes for some reason, I may check on the fsockopen() thing.\n\nYah - try that. In Net/SSH2.php there should be a @ before it. Maybe try removing that as well. I guess you could place an echo 'a'; and an echo 'b'; before and after it and see if you get back both a and b or just a.\nYou might also be having issues with the stream_select calls idk. You could do the same thing for those. Remove the @ and put a echo 'a'; and echo 'b'; before and after them.\nIt'd also be interesting to see your phpinfo() output\n. Nice find! I'll take a more thorough look tomorrow when I'm not so tired.\nThanks!\n. Looks good! And I agree about $attr['size'] = hexdec(bin2hex($this->_string_shift($response, 8))); being better - if nothing else it's more readable and per http://php.net/hexdec it'll return a float if ints aren't sufficient.\n. > Shouldn't there be if (!function_exists('phpseclib_resolve_include_path')) part as in Random.php ? \nThere is:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Random.php#L264\n. SSH2.php doesn't define phpseclib_resolve_include_path and SSH2 includes Crypt/Random.php in the constructor:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L861\n. Where should they be put?\nI used to list all the changes / new features on freshmeat.net but that's no longer an option:\nhttp://freecode.com/projects/phpseclib\n0.3.7's changelog is as follows:\n- auto-detect public vs private keys\n- add file_exists, is_dir, is_file, readlink and symlink to Net_SFTP\n- add support for recursive nlist and rawlist\n- make it so nlist and rawlist can return pre-sorted output\n- make it so callback functions can make exec() return early\n- add signSPKAC and saveSPKAC methods to File_X509\n- add support for PKCS8 keys in Crypt_RSA\n- add pbkdf1 support to setPassword() in Crypt_Base\n- add getWindowColumns, getWindowRows, setWindowColumns, setWindowRows to Net_SSH2\n- add support for filenames with spaces in them to Net_SCP\nidk that I did a changelog thing for 0.3.8 but I can look at the changes at some point and try to summarize them.\nFor the most part the API has remained unchanged since each of the respective classes were created. Exceptions exist but they are far and few between.\n. I think https://github.com/phpseclib/phpseclib/blob/master/CHANGELOG.md is what you're looking for?\n. If you could provide a link to a project that notes such things on their changelog so that I might have a better idea of how to do it myself that'd be helpful.\nThanks!\n. @ahait - it would be most helpful if you actually posted the error message (which would include the line number) and the version of phpseclib you're using.... I'll try to do it this weekend or the weekend after (might be helping someone move this weekend..)\n. Done.\n. I can try to create a key of that size and make OpenSSH use it but rather than me spending time doing that maybe you could just tell me the IP address / domain name of your SSH server? Since host key verification is supposed to take place before authentication I wouldn't need a login - just the IP address / domain name (and port if it's not 22) are sufficient.\nYou can email that stuff to me at terrafrost@php.net .\nThanks!\n. I was able to reproduce this issue. Try https://github.com/phpseclib/phpseclib/pull/500 and lmk if that works for you!\n. I'll update it this evening to say $callback instead of $block.\nThe thing is...  if $callback is false it'll still do that. See, for example, this line of code:\nhttps://github.com/phpseclib/phpseclib/blob/3eac2582d6668ef6c6ef29e7de9cacf6f1b9f834/phpseclib/Net/SSH2.php#L2357\n. Sorry for the delay - I've been busy for the past few days.\nAnyway, this sounds pretty similar to https://github.com/phpseclib/phpseclib/issues/153\nIt'd be interesting to know the server logs. Could you do define('NET_SSH2_LOGGING', 2) and then echo $ssh->getLog() after the error occurs and then post the results on pastebin.com or something?\nAlso, what version of phpseclib are you running?\nI can try to see if I can duplicate but it'll be a few days before I can start playing around with dropbear..\n. SSH access would help. Can you send me an email with the credentials? terrafrost@php.net.\nThanks!\n. Can you tell me what happens when you replace your _send_channel_packet() method with this?:\n``` php\n    function _send_channel_packet($client_channel, $data)\n    {\n        while (strlen($data)) {\n            if (!$this->window_size_client_to_server[$client_channel]) {\n                $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n                // using an invalid channel will let the buffers be built up for the valid channels\n                $this->_get_channel_packet(-1);\n                $this->bitmap^= NET_SSH2_MASK_WINDOW_ADJUST;\n            }\n        /* The maximum amount of data allowed is determined by the maximum\n           packet size for the channel, and the current window size, whichever\n           is smaller.\n             -- http://tools.ietf.org/html/rfc4254#section-5.2 */\n        $max_size = min(\n            $this->packet_size_client_to_server[$client_channel],\n            $this->window_size_client_to_server[$client_channel]\n        );\n\n        $temp = $this->_string_shift($data, $max_size);\n        $packet = pack('CN2a*',\n            NET_SSH2_MSG_CHANNEL_DATA,\n            $this->server_channels[$client_channel],\n            strlen($temp),\n            $temp\n        );\n        $this->window_size_client_to_server[$client_channel]-= strlen($temp);\n        if (!$this->_send_binary_packet($packet)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n```\n. Fixed by #538 \n. Normally on the console you type in one key at a time. So what PuTTY would send over is more like this:\nphp\n$command.= '; echo \"__COMMAND_FINISHED__\"' . \"\\n\";\nfor ($i = 0; $i < strlen($command); $i++) {\n    $ssh->write($command[$i]);\n}\nSo basically, you're type in (ie. writing or sending) one character at a time instead of somehow, magically, sending in a bunch of characters all at once. At least in so far as the shell is concerned.\nAnyway, I'd try that.\n. > btw: in your examples, commands are also written at once, not char by char\n\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\n\nI know. And 99% of the time it isn't an issue.\nIn any event I want to revisit those parts of the docs and talk about how to more accurately simulate human activity on a console.\nI still think the main examples will remain as is because, like it I said, it 99% works and it's easier than the alternative.\n\nI don't know how putty works internally, but either typing in a command or pasting it, i think putty send data on enter and not every character i write and maybe delete!?\n\nIt's not really a matter of how PuTTY works internally and it makes sense if you think about it.\nIf you're in vim and are in insert mode and then hit escape that triggers a certain action. If you then hit d that triggers another action. Same thing if you hit i.\nSSH clients don't know anything about the client you're connected to. They don't know if the server needs data a key press at a time or if it just needs the data whenever enter is pressed.\nAnyway, looking at your logs, it looks like the server is actually sending everything back in order but there are carriage returns that are in the output that are kinda resetting the output. eg.\nFor example, if you do `echo -e \"aaa\\rbbb\" in Linux (or at least bash) the output that you see is bbb but that doesn't mean that aaa wasn't sent to the client. It was. It's just that the bbb is kinda on top of it so to speak.\nIf you pass the output through urlencode() you'll see what I mean (all the regular characters will be preserved but \\r will be replaced with %0d and \\n with %oa. Or if you do it in a browser vs the command line that should work too.\nAnd your output does have a few of these. eg.\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:06:6f:70:20:0d:65:32        ........op .e2\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:0d:2e:62:61:6b:5f:32:30:31  .........bak_201\n00000010  34:31:31:32:37                                   41127\n. I'll have to research this. Thanks for letting me know about it!\n. I'll have to research this.\n\nOff hand, I don't completely know how pcntl_fork() works. Are resources copied when you fork a process?  And if they are what about class variables?  Each SSH packet has a sequence number attached to it.  If you could somehow have two Net_SSH2 classes running concurrently the $this->send_seq_no and $this->get_seq_no would need to be in sync.\nAnother problem with running concurrent commands atm: phpseclib uses fixed channels. ie. all exec() commands run on the same channel. All interactive shell stuff runs on the same channel, too, albeit on a different channel than exec() commands run on.\nThe latter is something I plan on addressing. In fact, I have an idea on how to handle concurrent commands without pcntl_fork(). Basically, I want to emulate stream_select or curl_multi_exec with phpseclib.\nRelated to that I want to redo how PTY / interactive shell's work and even how exec's work. I'll keep exec's around for simplicity purposes but introduce a new method - run. Here's an example of what I mean;\n```\n$ssh = new Net_SSH2(); \n$ssh->login('...'); \n$ssh->exec('ls -la'); // returns output (second parameter $callback is still present) \n$sh01 = $ssh->shell(); \n// maybe have the PTY be disabled by default and require people enable it by doing $sh01->enablePTY() ? \n// or maybe have the PTY be a parameter of $ssh->shell? \n//$sh01->setCallback('...') ? \n$sh01->read('[prompt]'); \n$sh01->write('...'); \n$sh02 = $ssh->shell(); \n$sh02->setTimeout(5); \n$sh02->read('[prompt]'); \n$sh02->write('...'); \n$run = $ssh->run('command'); \n$run->enablePTY(); \n$run->write('...'); \n$run->sendEOF(); \necho $run->read(); \n$sub = $ssh->subsystem('command'); \n$sub->read('...'); \n$sub->write('...');\n```\nI figure for the PHP4 version I'll keep the old read() / write() methods in place but for the PHP5 version I'll remove that stuff. I'll namespace the PHP5 version, make it throw exceptions and then the stream_select / curl_multi_exec method will be introduced to that version as a static method callable by doing Net_SSH2::multi_read() or some such. And then after that the PHP4 version will be deprecated and no longer maintained and master will be switched over to the PHP5 version.\nSo I have a roadmap but it's all quite far away tbh.\n. > Forking would have to be something the library would have to allow for, it is not as simple as arbitrarily forking off the processes and things just working.\nAre there any code changes that could be made to make the library allow for it?\nA quick Google search yielded this:\nhttp://stackoverflow.com/a/8707425/569976\nThat makes me think that using pcntl_fork not feasible. Unless I use local domain sockets or something idk. And that seems like a lot of work for an edge case that might be better served anyway by the proposal in my earlier post in this ticket.\n. pcntl_fork() appears to only let you create one child, so you'd have to have each child creating it's own child for your example to work, it seems to me?\nAlso, pcntl_fork() doesn't appear to work on Windows. idk if it's even that widely deployed on Linux (idk if it's on my own Linux boxes for example. I mean, it might be but I have no idea).\nAnd how would you access the return values with the $ssh2->fork() approach you described?\nLooking at the docs for curl_multi_exec I might do something like this:\nphp\nwhile (true) {\n    $read = array($ssh1, $ssh2);\n    $num = Net_SSH2::multi_read($read);\n    if (!$num) break;\n    foreach ($read as $r) {\n        // do whatever with $r->read();\n    }\n}\n. > I am not sure if curl would work for connecting to SSH, but I suppose since phpseclib can handle the encryption internally, then curl could be setup to connect with a raw socket... I think your curl idea would only work if you were attempting to send the same command to multiple connections, not multiple commands to the same connection, which is what the OP is trying to do...\nI'm not proposing curl be used. I'm proposing an API inspired by curl's API be used. phpseclib's Net_SFTPs API was initially inspired by PHP's ftp_*'s functions even tho it doesn't actually use those functions.\nRealistically, tho, this is a ways off.\nAnyway, I'll need to play around with pcntl.\n. > Gotcha. Yeah I think there are two separate use cases that would need to be considered.\n\n1 - Send the same command to multiple connections\n2 - Asynchronously send multiple commands to a single connection (what the OP wants to do)\nThe curl type API would work for the first but not the second, and the example that I posted would work for the second but not the first. You would end up needing solutions for both if you wanted to cover all bases.\n\nActually, the curl like approach would work for both. What you'd pass to Net_SSH2::multi_read() isn't Net_SSH2 objects but rather Net_SSH2_Channel objects. Or something. You could create a channel for exec() by doing run(). run() wouldn't return the output but it'd instead return a Net_SSH2_Channel object. And for interactive shell's you wouldn't do read() and write() on the Net_SSH2 object but rather on the Net_SSH2_Channel object returned by (Net_SSH2)->shell().\nI'd keep exec() for simplicity in Net_SSH2, add run() as an enhanced exec(), and remove read() / write() from Net_SSH2, leaving it exclusive to Net_SSH2_Channel.\n. I can do that. Although for the time being I think I'll still make some commits to this branch in an attempt to figure out Travis CI issues.\nThe 5.3 issue just requires I run it in a 5.3 environment where the OpenSSL install has ctr mode available in it, but testing against Travis CI will still be nice.\nThe 5.5 issue...  I have no idea. Here's the error:\n```\nFILE: /home/travis/build/phpseclib/phpseclib/phpseclib/Crypt/Blowfish.php\n\nFOUND 1 ERROR(S) AFFECTING 1 LINE(S)\n\n1 | ERROR | An error occurred during processing; checking has been aborted.\n| | The error message was: $stackPtr is not a class member var\n| | (unknownSniff)\n\n```\n$stackPtr is not a variable that's used anywhere in Crypt/Blowfish.php...\n. I wasn't able to duplicate the 5.3 issue. Here are the versions I tried:\nPHP 5.3.27\nOpenSSL Library Version 1.0.1e 11 Feb 2013\nOpenSSL Header Version 0.9.8y 5 Feb 2013\nPHP 5.3.27\nOpenSSL Library Version 0.9.8y 5 Feb 2013\nOpenSSL Header Version 0.9.8y 5 Feb 2013\nThe first setup has had ctr modes but the second did not. Of course the first setup won't work with Crypt_RSA since mismatched versions of OpenSSL have been known to cause problems.\nI guess the next step is to test against Travis CI itself meh.\n. Travis CI is using this:\nPHP 5.3.29\nOpenSSL Library Version 1.0.1 14 Mar 2012\nOpenSSL Header Version 1.0.1 14 Mar 2012\n. > Next, setEngine(). When testing engines against known vectors, point 1 no longer depends on this.\nIf you're referring to Crypt/DES.php, the idea is to establish that the padding is done in a consistent manner, be it null padding or something else. If you'll note, the keys and IV's are not technically valid:\nphp\n        $des = new Crypt_DES(CRYPT_MODE_CBC);\n        $des->setKey('d');\n        $des->setIV('d');\n        $des->setPreferredEngine(CRYPT_MODE_INTERNAL);\n        $internal = $des->encrypt('d');\nA valid key / IV would be eight bytes - not one.\nI don't really care what approach is used to deal with invalid keys / iv's so long as it is consistent between all the engines. Test vectors usually have valid keys, valid IV's and plaintext's that are a multiple of the block length, which is exactly what this is not testing.\nRC2.php is mostly similar.\nThe AES unit tests don't do this, however. Their intent is to (mostly) establish the correctness of CTR, CFB and OFB, with continuous mode enabled.\n. One thing that does scare me about trying to split this out into multiple PR's...  that's going to require I take these 99% completed files and copy / paste select lines into the copies of these files currently in master. And I'll have to do this over multiple iterations and just hope nothing gets missed in the copy / paste process.\nI suppose we could say \"absolutely no one is to touch the Crypt_* files until the OpenSSL stuff has been merged\" and then once everything has been merged we do a diff against this branch to see if anything was left out but then it could be a while before the OpenSSL stuff is merged.\nAmong other things, the tediousness of just splitting the files up is going to make me less motivated and less punctual. And then we'll have to wait for you (or someone else I suppose) to actually complete the code review and that could take a while too.\n. Is there a problem with hhvm on Travis CI? I don't see how https://github.com/terrafrost/phpseclib/commit/4d6e7efda642b4d4788916b76b14927810956beb could have caused hhvm to timeout. I mean, why is hhvm timing out for that commit and not for https://github.com/terrafrost/phpseclib/commit/9a55ab18921c9666d7678d493a676492be354f64 ?\n. > Hmm, okay. I still think it would be useful to have each implementation tested against known test vectors. And then, you could also just fix (as in fixture) the expected padding behaviour of each implementation in the same manner, instead of testing implementations against each other. Most importantly, this test will not detect when you break multiple padding behaviours at the same time.\nIs https://github.com/terrafrost/phpseclib/blob/openssl-support/tests/Unit/Crypt/DES.php more like what you're wanting?\nIf so I don't completely know that I agree with it, after having implemented it. Among other things...  since there are no test vectors where do we get the correct output? I used phpseclib. ie. I'm copy / pasting the output from phpseclib into it's own unit tests. As such phpseclib is essentially being tested against itself, albeit not explicitly.\nSo like what happens if, in the future, a data provider is used to test more strings? Does the person adding those additional tests need to hard-code the output of each string? It seems like having the unit test test against itself (or rather it's other engines) seems like it'd serve the same purpose with less work on the part of the devs.\nThat said, I'm not dead set on them not being hard-coded and in the interests of getting this merged I am willing to update this and future unit tests accordingly should you not find the above persuasive. Just lmk.\n. The unit tests are failing on 5.3 and I haven't a clue as to why. The test results:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/43962657\nSo it's saying F even before \"testing load key\" is printed out. Only problem with that is that \"testing load key\" is the first thing that is printed out in the only unit test for that branch / commit:\nhttps://github.com/terrafrost/phpseclib/blob/5c62c66b948d7286d1e5e715c1091cd4df26f215/tests/Unit/Crypt/RSA/LoadKeyTest.php\nSo basically, the unit test is failing before the unit test has had a chance to do anything, let alone unit tests.\n. It's pretty much finished. Just need to start splitting it out into multiple PR's per this post:\n\nI know this is based on #259, but still: This patch is huge and does too many things at once and as a result is hard to review (if at all). I would have appreciated if parts from #259 were extracted into their own PRs. E.g. why not send a pull request only implementing _setEngine? OpenSSL can hardly be required for that.\n\nI expect it to be a bit of a PITA, however. Maybe I'll start on that next weekend idk.\n. Seems like it might make more sense to rename the method too. ie. instead of Random::crypt_random_string($length) do Random::string($length)\n. I guess submit a PR!\n. This sounds like a regression of  #196 but I don't think anything has been changed that'd affect that..\n. > The only problem are the 'include' statements. If you would rely on an autoloader and remove those it would work perfectly.\nphpseclib should be able to work with PSR-0 autoloaders already. The php5 branch is supposed to be PSR-4 compliant in due time.\n\n@terrafrost you are right it's the same problem as #196 I see the same error messages.\nBecause no class files could be found by 'phpseclib_resolve_include_path' the $encryption_algorithms array is empty and you end up with 'No compatible server to client encryption algorithms found'\n\nWhat version of phpseclib are you using? The resolution for #196 was #233. In particular, it uses stream_resolve_include_path(), which is supposed to work with phar's\n. What version of PHP are you using?\n. > We should define a feature set for the php5 branch (e.g. PSR4 autoloading and removing all the old PHP4 stuff or whatnot) and then just release it.\nThat works. Although maybe we could include namespacing too? For the time being I'm content with you being in charge of php5 releases.  Per https://github.com/phpseclib/phpseclib/issues/506#issuecomment-64956372 the php5 branch will probably start getting exclusive features at some point (well features above and beyond API changes).\n\nIn that case, we should probably assign it 1.0.0 and start the current php5 branch at 2.0.0.\n\nThat works.\n\nWe should define how long the released version will be supported with bugfixes etc. pp.\n\nUntil the next minor version is released?\n\nNew developments should happen in different branches, etc. pp. The php5 branch has to go.\n\nWhat would the branches then be?\n. @bantu - your proposal for versioning is reasonable.\n\nMoving to php 5.3.9+ might be a good idea for either v2 or v3. I'm not brilliantly familiar with this codebase, but I suspect it might remove some more version specific hacks. php 5.3 is already oel, so we really shouldn't be worrying about supporting php 5.3.2.\n\nI think v2 ought to support 5.3.2 minimum for http://php.net/stream_resolve_include_path . If there's some 5.3.9 exclusive feature v2 winds up using that can be made to be the min required version but I'm not aware of anything 5.3.9 offers that 5.3.2 doesn't that phpseclib might use?\n. > FWIW - There is no reason to use stream_resolve_include_path once autoloading is fully implemented, so 5.3.2 as a minimum is arbitrary in any case.=\nGood point. The class_exists() call will make PHP try to autoload and will return false if it's unable to do the autoloading.\n. > e.g. reverting the Exception errors back to user_error() -- which should never have happened\nThat's never happened. The closest two things to that happening are...\nhttps://github.com/phpseclib/phpseclib/commit/e71fc979133c16110d827bbf5316db97648bc463\nBut that was a bad attempt at BC and I wouldn't call it true exception handling anyway.\nAlso, there's this:\nhttps://github.com/phpseclib/phpseclib-php5/commit/660b8895ecbe93ce158a5045b23c91e1b79229da\nBut that wasn't really reverted.\n\nI believe the old maintainers have been resistant to change\n\nI am the old maintainer. And yes, I have, in the past, been more resistant to change than I am currently. Although that said, from my vantage point, it seems to me that most pull requests have simply been abandoned by their authors. Maybe people do a find & replace all, which winds up replacing more than it ought to, maybe people submit \"the mother of all PR's\" and when it is suggested that they split the post into multiple parts they take offense and just abandon their work all together, and maybe others, still, are almost complete but then their authors just lose interest and never spent those extra two seconds to finish up their otherwise good patch.\n\nWe can do exceptions for 3.0 and maybe also a more component based architecture (maybe that will have to go into 4.0). Maybe at 5.0 or 6.0 we can slow down with the API breaking.\n\nI'm actually more in support of breaking everything at once. ie. if we're gonna break BC let's break it once and break it big. Not break it in an ever so subtle way 10x times.\nie. let's namespace and let's throw exceptions and all that jazz in the same version.\nAs for a component based architecture...  honestly, idk that I'd object to that being in the php4 version so long as it didn't break BC (and as long as it was a good PR). I mean, Crypt/Base.php, as implemented initially by petrich, was a semi-big change to the internals of the Crypt_* stuff but that didn't cause a BC break so I was okay with it.\n. > Otherwise we will be developing for months or years.\nI don't really see a problem with that.\n\nLet's do small steps and release more often.\n\nI don't necessarily have a problem with more frequent releases but I do have a problem with frequent major releases. Like when phpBB went from v2 to v3 it was a big massive change and there wasn't anyone who disputed that it should be a whole new version number. Same thing with PHP 4 and PHP 5. When PHP 5.3 added namespaces they didn't start calling it PHP 6 - they called it PHP 5.3.\nContrast this with what Firefox does for releases. Firefox 2 and Firefox 3 were worlds apart. Firefox 44 and 45 however? I don't know what's new and I stopped paying attention long ago.\nLinux used to do odd numbered versions for dev versions and even numbered versions for stable versions. eg. 1.1.0 is unstable, 1.2.0 is stable. I wouldn't have any qualms with an approach like that.\nFor that matter - and this is a little extreme...  we could just rename the php5 version of phpseclib. In so far as a name goes idk how imaginative phpseclib is. Laravel is an imaginative name. Symfony is.  phpseclib is not. This renamed php5-only version of phpseclib could have frequent (minor) releases, with the caveat that the API is not stable until it is.\nHistorically, phpseclib changed the middle digit (0.1.0, 0.2.0, 0.3.0) when a big new feature was implemented. In the case of 0.3.0 it was File_X509. For 0.2.0 it was Crypt_RSA. For 0.1.0 it was everything. Using that approach phpseclib won't be seeing 0.4.0 for a long time, until Crypt_DSA or Net_TLS or something comes out (if ever for Net_TLS), so I don't mind changing it to an extent, but I don't want to overboard with it.\nAnother idea: So maybe php4 version is 0.x.0 and php5 version is 1.x.0. 1.1.0 has namespaces, 1.2.0 has exceptions, etc. 0.x.0 is stable between multiple versions of x. 1.x.0 does not make that same guarantee. The 1.1.x series should all have a compatible API but not 1.2.0 and 1.3.0.\nI mean, there are other BC breaking API changes I have in mind as well:\nhttps://github.com/phpseclib/phpseclib/issues/506#issuecomment-64956372\n. I don't necessarily agree with semantic versioning tbh. I mean, maybe to people who live and breath PSR-4, phptherightway.com-type stuff, maybe semantic versioning makes sense, but not everyone lives and breaths semantic versioning.\nIn any event, let's say we do do it. I don't know if I want to maintain a ton of different versions of phpseclib. Releases take time. It's gotten more streamlined but it's still a non-zero amount of time. So let's fast forward to a year from now. We have 1.0 for PHP4 compatibility, 2.0 for namespaces, 3.0 for exceptions and 4.0 for multiple composer packages. Do we have to merge a hypothetical bug fix for SSH into each and every one of those and release each and every one of those all at the same time? I already find making releases to be tedious. Now we're gonna make it more tedious?\nI mean I suppose each version will have some sort of EOL timeline but what would that timeline be? The PHP4 compatible one ought to have a really long time line since that's been available for seven years. That's a lot of time for people to download it. If phpseclib 2.0 is the latest for just a few months then the window during which people would have downloaded it isn't going to be as high as the number of people that downloaded the PHP4 version (ie. 1.0) so that one, in my mind, should reach EOL much sooner than the PHP4 version.\nAnd also, if 2.0 is namespaced, idk that adding exceptions is that big of a BC breaking change. Namespacing requires 5.3. Exceptions require 5.0. So the minimum required version isn't being increased. If you dump phpseclib 3 into a project using phpseclib 2 and phpseclib 2 worked the fact that Exceptions are being used isn't a huge issue. And if there is an error then people will...  still get an error.\nIf people are using a custom error handler it'll be an issue but idk how many people are doing that.\nCertainly not every BC change merits a major release. Like if I remove setRandomGenerator as a function from Math_BigInteger - a function that I'm pretty sure no one ever used anyway - does that merit a major release? I mean, it's a technical BC break, but it's pretty much a zero-impact one.\nnamespaces are high impact. I'd say exceptions are probably mid to low impact.\n. > I think this is the wrong approach for argumentation. It doesn't matter how long something has been available. What matters is how many users still use it. Especially after new major versions have been made available.\nNot that we have any way of knowing how many people are using which versions or features of phpseclib. Seems like the time available for download is one way we could make guestimations.\n\nSemantic versioning tells you to take everything the \"technical\" way. You remove the method, you have to use a new major version. It's really just as simple as that. In reality you would thus just keep the method.\n\nThat's why I'm in favor of at least some limited consolidation. I don't want to release a new major version if I make a zero-impact BC change but if I make a high-impact BC change I can bundle in zero-impact BC changes as well. And in the case of exceptions I don't really see them as being high-impact enough to justify a major release all unto their own. I mean, I suppose there's room for discussion but it just seems like a weekend task, namespacing and adding exceptions idk.\nAnd what do we do if we want to make a BC change to the php4 version and a BC change to the php5 version? Consider the OpenSSL patch I submitted. The \"engine\" can no longer be set by doing define('CRYPT_MODE_AES', CRYPT_MODE_AES_INTERNAL). Now it's done via $cipher->setPreferredEngine(). That's a technical BC change albeit a zero-impact one.\nSo do we have 1.0 for PHP4, 2.0 for namespacing and...  3.0 for PHP4 with setPreferredEngine()? That's going to get confussing fast. I mean, I don't mind making zero impact BC changes to the php4 compatible version. And indeed, if we're gonna lock ourselves out of making even the slightest of technical BC changes to the php4 version than saying it's still maintained is a bit of a stretch.\n\nWhat short of timescale are we talking between major releases? I'd say 2 years is probably too long, but 2 months is 2 short as far as I can see. Is 6 months between 2.0 and 3.0 a good idea?\n\nAs long as it takes? I don't want to release a major version just for the sake of releasing a major version. If there are big changes a new major version can be released but if there's no big BC breaking change or no big new feature that's been added I don't think the major version should be updated. That needlessly messes up composer installs looking for, for example, phpseclib 2.* or whatever.\n. > Step 1: Add setters/getters for any constants that are being defined on a variable basis. Crypt classes would need a getEngine/setEngine and getMode/setMode as well as some other random ones. SSH classes would need getLogging/setLogging etc.\nidk that I'm a big fan of that.\nIn the proposed OpenSSL changes it's not getEngine/setEngine - it's setPreferredEngine/getEngine. ie. you can tell the Crypt class to use OpenSSL if it's available but if OpenSSL isn't available for the options you've chosen it'll use mcrypt or the internal mode. I don't expect people to know what options work on what engines.\nAnd getMode / setMode aren't needed as the mode is currently set by the constructor.\nI agree with your proposed steps 2, 3, and 4.  bantu's roadmap has step 2 in v3 - not v2. Seems that for that we could just play it by ear. If 2, 3 and 4 are done by the time we want to release v2 we include it, regardless of the roadmap. If they're not I think bantu's plan was to still do the releases, albeit without those features.\nAs for setLogging()...  there was a proposal to make phpseclib use PSR-3 style logging but the orig author of that PR abandoned it for reasons unknown:\nhttps://github.com/phpseclib/phpseclib/pull/240\n. > Realistically it should throw an Exception in that scenario... If someone is specifically attempting to use OpenSSL and it isn't available, then it should throw an exception telling them that. If not specified the code should choose the best available method.\nI won't know if OpenSSL isn't valid until you've set the key, block length (in the case of Rijndael), etc. Like in the case of Rijndael, by default, the block length is 128 bits. So you call setEngine() and then do setBlockLength(). Should setBlockLength() throw the \"engine not valid\" exception? I mean, obviously, setEngine() ought to if you're setting the engine to openssl and openssl isn't installed, but what about setBlockLength()?\n\nI think you'd have two options. If you can do it in a non-API breaking way, you can do 1.1.0. If that is not possible, you add it to the master branch and this just won't go into 1.0.\n\nSo how do we do a release for zero-impact API changes for PHP 4? Do we just not do them? I don't agree with that. I mean, high impact and mid impact BC breaking changes for sure ought not go into the php4 version but zero-impact stuff?\nI mean, where do you draw the line for where the API ends and internal functionality begins? Third party classes extending Crypt_Base or Net_SSH2 might make use of methods marked as private in the phpdoc comments. Is that considered part of the API or not?\nWhat constitutes the API is somewhat subjective and taking a hardline approach would mean php4 version is essentially dead in the water. And at that point even pretending to be maintaining it is a sham. And I'm not prepared to do that. Like OpenSSL will benefit everyone who uses phpseclib, regardless of if their using a v1 or a v2 version. So next time someone says \"phpseclib is slow\" and they're using the php4 version (ie. currently the only version) and OpenSSL could help them out should I just say \"tough! either rewrite all your code to work with the namespace'd version or live with the slowness and don't complain!\"? I mean, if the php4 compatible version has been EOL'd it's one thing. If it's a feature that can't exist whilst php4 compatibility exists that's one thing too. But if the only thing preventing them from getting a speed increase is an over attachment to a niche feature that's pretty much only used by the phpseclib unit tests...  that's just not good enough.\n. > We shouldn't be doing any major development on the PHP4 version... It should receive only the most critical updates for a pre-determined period (to allow people to refactor their code around the new version) and then end-of-lifed entirely. Major development work (OpenSSL support etc) should be focused on the 2.0 branch, and features may or may not get filtered back down to 1.0 on an as needed basis...\nIn the case of OpenSSL support it's pretty much already done for php4 support. bantu wants me to split it up so he (or others) can chime in if they see fit but just throwing away all the work on a php4 compatible version when it's already been done, if nothing else, seems like a waste.\nAnything else can be evaluated on a case by case basis.\n\nWhy would you put any emphasis on developing new features for people who are stuck with a PHP version that has been EOL for over 6 years? They are obviously ok with whatever feature set they currently have, so any development work is going to be a wasted effort anyway...\n\nAt this point I'm not that concerned about PHP4. What I'm concerned about now is supporting phpseclib for people using the latest version. 0.3.9. If I downloaded the latest version of phpseclib yesterday and am running the latest version of PHP 5.6 does that mean I shouldn't expect to get updates.\nThe fact that adding namespaces breaks PHP4 compatibility is (mostly) a non-issue in-so-far as I'm concerned. What concerns me is the fact that it breaks BC with phpseclib's own API. An API that the release that was made just a few weeks ago is still using. Such people ought to still be getting regular updates.\nIt's like...  maybe in 0.3.10 we could delete Crypt_AES all together and just go with Crypt_Rijndael since AES is basically a subset of Rijndael. But one big reason for why this isn't done: doing so means people can't upgrade from 0.3.9 to 0.3.10 without having to revisit old code that they wrote and that (presumably) works. Upgrades should be drop in replacements and they should still be forthcoming on the API that works with php4 (the fact that it works on php4 being somewhat irrelevant).\nThe exception to this are major version changes. ie. v1 to v2\n. > Of course! But you shouldn't be deleting anything or doing any major changes in a 0.3.10 release anyway... The only reason to release a 0.3.10 version would be because there was some major security issue or major performance bug or some such, otherwise the change should be in the 2.0 branch, and we should focus on making the transition to 2.0 as easy and painless as possible, clear migration documentation, etc.\nI suppose there will be room for discussion with each PR. Like even if the OpenSSL stuff wasn't 99% finished I'd still strongly advocate merging that for 1.0 on the basis that that majorily effects performance. phpseclib's pure PHP implementations may be the fastest pure PHP implementations out there but they don't hold a torch to OpenSSL (or mcrypt if it's available). This slowness actually causes a proposed unit test to fail:\nhttps://github.com/phpseclib/phpseclib/pull/458\nAdding new functionality (like Crypt_DSA or whatever) can go in 2.0 or 3.0 or whatever. But OpenSSL (and possibily other stuff too) have a very measurable impact on performance and the impact of the BC break is 0%.\nIt's like... let's say you make make a function that outputs a text string into an HTML document. Without proper sanitization it can be XSS'd. So let's say you pass it through htmlspecialchars(). Is that a BC break? Seems to me that a case could be made for that. ie. some people may be passing whatever into the function because they really do want bold text to appear.\nMy point is...  we can say \"no new features or no BC breaks for 1.0\" as a general rule but let's not make that rule a hard and fast rule. What constitutes a new feature (vs. a bug fix) is subject to interpretation and the significance of a BC break, as well.\n. I don't think the matter of the exceptions was ever resolved?\nPersonally, I'm inclined to do a simultaneous release. When the next version of 1.0 is released we release 2.0. Both versions include the OpenSSL patch. This buys people more time to work on exceptions.  Is there a reason we need to rush it out the door asap?\n. I didn't see this until just now.\nAnyway,\n\nPeople want to start using the features we have now. See e.g. #243 (comment)\n\nFair enough, but then people have been wanting a namespace'd php5 version for years. I don't see why such people can't wait a few more weeks / months.\n\nCan we release 1.0 and 2.0 now and 1.1 and 2.1 with OpenSSL (without breaking BC)?\n\nWell then what about exceptions? Do we do a 3.0 release for that? I don't feel Exceptions are big enough impact to justify a major release.\nYou kinda already touched on how phpBB hasn't followed semantic versioning with its releases to date however phpBB is hardly the only example. Another big example...  OpenSSL. OpenSSL versioning takes the form x.y.za. x is arbitrary and thus far there have only ever been two x's. 0 and 1. y signifies a major release and BC is not guaranteed. BC is guaranteed when just z changes and letter releases (eg. a) only contain bug fixes.\nAmong other things, if the most significant digits are only reserved for arbitrary massive changes then when they change people will pay more attention, it stands to reason.\nLike let's say you were a loyal vBulletin user for years and then you saw that phpBB released 3.1 after having been on 3.0 for years. At that point you might be thinking \"last time I used phpBB I didn't like it - but maybe I'll like 3.1 better - maybe I should give it another chance!\"\nWhen changing the most significant digits of the version is only done rarely then when it is done it may get people to give it a second chance. Certainly there are other things that can motivate people to give software second chances, as well, but no need toss one of those avenues out the window.\nIf you're too trigger happy to change the most significant digit, in contrast, some people might just stop paying attention to that version number all together. I know I do.\nI mean I remember I used to get excited to check out the latest versions of Netscape. \"Netscape 4.0 is coming out? That's so exciting! I have to check it out!\". vs now with Firefox, where it's more like \"Firefox 35 is coming out? Who cares. I'm desensitized.\"\nIf I were to do a release now I'd probably do 0.3.10 for the php4 version and 2.0 for the php5 version. OpenSSL support would bring the php4 version to 1.0 and the php5 version to 2.1.\n. > If I were to do a release now I'd probably do 0.3.10 for the php4 version and 2.0 for the php5 version. OpenSSL support would bring the php4 version to 1.0 and the php5 version to 2.1.\nHow does that sound for versioning? It seems consistent to the OpenSSL versioning approach, which itself seems semi-semantic as is.\n. Yah. I'll try to release them this weekend, assuming other stuff doesn't come up.\n. I figured 1.0 would be in what's currently master. php5 would be 2.0. Or we could have the 2.0 branch be develop.\n1.0 is still aiming for 99% BC with 0.x. 2.0...  not so much. With the 2.x series all 2.0.x releases will need to be BC with one another as will all 2.1.x releases etc but 2.0.x and 2.1.x in theory should not be BC.\nAlthough that said, with a release scheme like that I guess in a few years we'd prob have multiple branches. idk how those should be organized. Maybe dev-1.0 could be where 0.3.9 is, dev-2.0 could be where 2.0 is, dev-2.1 could be where 2.1 is, etc?\nWhat should master be?\n. So how does my proposal sound for the branch names?\n. Well 0.3.10 has been released as has 2.0.0. As for updating the branches...  I guess I'm not good enough at git to know how to do that :(\nLocally, I did git branch -b 1.0 while in master and then deleted master, locally. I did git branch -b 2.0 and git branch -b master while in the php5 branch as well. I then tried to delete master on my origin (terrafrost/phpseclib), figuring I'd re-create it from the php5 branch but now I'm getting the following error:\n$ git push origin :master\nremote: error: refusing to delete the current branch: refs/heads/master\nTo https://github.com/terrafrost/phpseclib.git\n ! [remote rejected] master (deletion of the current branch prohibited)\nerror: failed to push some refs to 'https://github.com/terrafrost/phpseclib.git'\nWhen I do git status in 1.0 I get this:\n$ git status\nOn branch 1.0\nYour branch is up-to-date with 'origin/master'.\nI figured I'd push 1.0 and then change my local 1.0 branch to track the 1.0 branch on production but that didn't work:\n$ git push origin 1.0\nEverything up-to-date\nAnd in any event, I'm not sure that's such a good idea on my part. If I delete master what does that do for everyone who has master currently checked out? What happens when they try to do a git pull?\n. > I would have done the branch renaming first before the release. The API generation config needs work after changing branches.\nOh. Should I delete the tags?\nCan you do the branches? I just got to work and probably won't be able to do any work with them until maybe 9-10h. I mean, I can post on github.com but I'm not gonna do commits from my work desktop..\n. I updated the README.md file in master to say 0.3.10 (did so via github.com) altho now that I think about it I probably should have done it in the 1.0 branch and had it merged all the way up. Meh.\n. > Please push the 0.3.10 tag corresponding to the packages you published. Don't push the 2.0.0 tag, though. Delete that instead.\nI'll do that later today.\n\nCan we establish that the preferred method to install 2.0 is via composer? We do not provide PEAR packages at all, right?\n\nThat's actually kinda what I was thinking lol\n. I'll try to take a look at this this weekend.\n. The coding standards need to be better adhered to. For example,\nfunction _request_forwarding() {\nYou need to have docblock comments preceding that method and the { should be on it's own line. https://travis-ci.org/phpseclib/phpseclib/jobs/43063780 elaborates.\nAlso, I'm not a big fan of how most of the logic for this system-specific enhancement is in Net_SSH2.\nWith System_SSH_Agent most of the logic is in that class. The only changes I made to Net_SSH2 to accommodate that class were minimal - adding a new condition to the switch statement to look at the class and a new method to be used when that method is utilized. And that method is more of a wrapper for System_SSH_Agent than anything.\nLike right now here's how your code works:\n``` php\n<?php\ninclude 'System/SSH/Agent.php';\ninclude 'Net/SSH2.php';\n$agent = new System_SSH_Agent(true);\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', $agent)) {\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\necho $ssh->exec('ls -la');\n```\nFor the purposes of keeping the code separate I think I'd like this better:\n``` php\n<?php\ninclude 'System/SSH/Agent.php';\ninclude 'Net/SSH2.php';\n$agent = new System_SSH_Agent(true);\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', $agent)) {\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\n$agent->startSSHForwarding($ssh);\necho $ssh->exec('ls -la');\n$agent->stopSSHForwarding($ssh);\n```\nThis would more accurately resemble how it seems to me that it is supposed to work anyway. ie. Forwarding doesn't have to last the entire session. It could very well only last for the middle 1/3 of the session. It might be something you want to enable specifically for ssh -T and then disable after you've done ssh -T.\nI mean, on one hand, I think System_SSH_Agent ought to remain \"pure\" too and potentially re-usable by other applications (aside from just SSH) and by adding startSSHForwarding() and stopSSHForwarding some of that purity is being compromised. But, at the same time, System_SSH_Agent is probably only ever really going to be used for SSH auth and I'd rather have Net_SSH2 pure more so than System_SSH_Agent.\nA few specific comments.\nphp\n            if ($this->_privatekey_login($username, $key, $this->agent->request_forwarding)) {\n                return true;\n            }\nWhy do you have to modify _privatekey_login? Why not do this?:\nphp\n            if ($this->_privatekey_login($username, $key)) {\n                $this->_request_forwarding();\n                return true;\n            }\nThat'd be cleaner. Or better yet:\nphp\n$agent->_request_forwarding($this);\nOf course, if you do the $agent->startSSHForwarding($ssh); thing that I proposed that would eliminate this as an issue all together anyway.\nAlso,\n``` php\n                        if (!isset($this->agent)) {\n                            user_error('Cannot forward authentication without SSH agent');\n                            return false; \n                        }\n\n```\nFor BC purposes I would just silently discard that. That's what _get_channel_packet does for every other NET_SSH2_MSG_CHANNEL_OPEN packet. It receives it and silently discards it and continues to go about it's business. But with this one it doesn't? If it can't process this particular open request it throws an error but for every other one it silently discards it? If we're going to issue errors on invalid open requests we should do so for all or none. Not \"we'll do it for these but not for those\".\nphp\n                    if ($channel == NET_SSH2_CHANNEL_AGENT_PROXY) {\n                        $this->_send_channel_packet($channel, $this->agent->proxy_process($data));\n                        break;\n                    }\nI don't see a way to avoid this unfortunately so for all my preaching about decoupling I think this is code that'll have to be kept in Net_SSH2.\nFinally, I can't say I'm a big fan of how some of your commits included debug code that you later removed. I like clean commits. It's like...  if you make a one-line change to a file but also change the line endings then it looks like you've changed every line. If you then go back and undo that that's good, I suppose, except that it seems like that'd probably make it tougher to see the differences from revisions before all the line endings were changed and revisions after the line endings were changed back.\nI'd almost prefer it if you sent a whole new PR with just one big commit with all your changed code so the commits with the debug code don't get added idk.\n. > Looks like I will need to work out how to get the tests passing too.\n@bantu could probably help you out with that. Seems like we just need to adjust some setting on Travis CI and he def knows it better than I do.\n. > The forward request and acknowledgement are all part of the SSH2 standard so it doesn't feel completely out of place to me.\nWhich RFC is it defined in? If it's not defined in an RFC then I wouldn't consider it to be part of the SSH2 standard. And if it is discussed in an RFC...  I'd have to review the RFC to comment further.\n. > @terrafrost I've made a bunch of changes based on your suggestions. Let me know how you feel about them. \nI'll try to review this more thoroughly this weekend. Maybe sooner but I can't guarantee it.\n. W.r.t. the design...  another reason to do it as I had proposed...\nLet's say the server is doing multi factor auth. keyboard-interactive and publickey. You utilize System_SSH_Agent for the publickey auth but then login is only successful after the keyboard-interactive is done as well. So in that scenario the agent is never forwarded because it might not be the login() with System_SSH_Agent that returns true but rather the login() with that performs the keyboard-interactive auth.\nIn contrast, if the agent forwarding is enabled outside of the login you don't have to worry about the complications created by multi-factor auth.\nMore info on multi factor auth and how it's done with phpseclib:\nhttp://phpseclib.sourceforge.net/ssh/auth.html#multifactor\nhttp://phpseclib.sourceforge.net/ssh/auth.html#keyboard\nStill want to look over it some more..\n. Here's an example of a multi-factor auth that ought to work with agent forwarding but doesn't:\n``` php\n<?php\ninclude 'System/SSH/Agent.php';\ninclude 'Net/SSH2.php';\n$agent = new System_SSH_Agent(true);\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', $agent, 'password')) {\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\necho $ssh->exec('ls -la');\n```\n. https://tools.ietf.org/html/draft-ietf-secsh-agent-02\nThat looks relevant.\n. So there's something about this that has been bugging me.\nAs currently implemented, this implementation (the client) sends it's auth-agent-req channel request an a channel a brand new channel it (the client) created - NET_SSH2_CHANNEL_AGENT_REQUEST. Then the server sends a auth-agent channel request on a brand new channel that it (the server) attempted to create - NET_SSH2_CHANNEL_AGENT_FORWARD.\nNET_SSH2_CHANNEL_AGENT_REQUEST does not appear to be re-used after the agent forwarding is requested so why not then close the channel? What point does keeping it open serve?\nMy reading of https://tools.ietf.org/html/draft-ietf-secsh-agent-02 makes me think that perhaps the auth-agent-req channel requests are not intended to be sent out on their own dedicated channel but rather on the channel that agent forwarding is being requested on. ie. creating a new channel is unnecessary. Instead you just send an auth-agent-req channel request on the (for example) already existent NET_SSH2_CHANNEL_SHELL channel (or whatever channel _get_interactive_channel returns) and then let the server attempt to create a new channel as it normally would.\nOf course then again I'm not sure how applicable https://tools.ietf.org/html/draft-ietf-secsh-agent-02 even is given that it does not appear to be the protocol OpenSSH's ssh-agent.\nOne thing that'd help in my understanding of this is where you're getting the specs for this implementation. I guess the next step for me w.r.t. this would be to actually test it instead of looking at the source code. I have other stuff I need / want to do this weekend so I'll try to begin actual testing by next weekend. Maybe earlier but I can't guarantee that.\nThanks!\n. That's in the php5 branch @bantu\n. > This removes SYSTEM_SSH_AGENT_FAILURE which isn't used. Not sure that is fine. @terrafrost\nI'd say keep it. If in the future the functionality of SSH_Agent is expanded to make use of that constant than it'd be nice not to have to look up what the value corresponds to and re-add it.\n. Let's hold off on this one until the OpenSSL stuff is merged.\n. Well if ya'll want to resolve the conflicts then be my guest. I'll try to play nice (by splitting my big commit up, etc) but if things don't go well...  well, we can cross that bridge if we get there.\n. Good point. Looks good to merge to me.\n. Looks good. I'm surprised that it even passes the coding standards tests without the space..\n. Which git client are you using? When I started using git a few years back I tried a bunch of GUI without much success. Once I started using Git via the CLI I haven't looked back. None of the GUI clients compare. At least not when I last tried to utilize them.\n. > I want implement RSA SHA1 1024 encryption.\nAs bantu hinted at you'll need to use 1024-bit keys to do that. Crypt_RSA uses sha1, by default, for signatures (which is what I assume you meant to say). You'll have to decide on the signature mode, be it PSS or PKCS1.\n\nAnd signature data length should 172.\n\nWhy 172? I assume you mean bits? sha1 hashes are 160 bits long and the result of $rsa->sign() will be as long as the key itself. ie. 1024 bits. So what is this 172 you speak of supposed to consist of?\n\nActually I have tried implementing it, but I am getting the encrypted data as \"o\u00a7\u00c6(\u00b6a\u00c0\u2122\u00e7\u02c6.........\", I mean such special character like data I am getting, how can I get the data as secret keys?\n\nI'm with bantu. We'll need to see your code to have a constructive conversation. However, \"o\u00a7\u00c6(\u00b6a\u00c0\u2122\u00e7\u02c6.........\" as the output makes sense. It produces a binary string. You can pass that trough base64_encode or bin2hex or whatever, if you're so inclined.\nIt is unclear to me what you mean by secret keys. The private key is a secret key but you're wanting the result of $rsa->sign() to be a secret key as well? Well it's not - the output is a signature - not a secret.\n. I agree.\n. I assume the motivation for this is #502 ? If so then although testing against dropbear isn't a bad idea I don't think it's going to serve the intended purpose.\nIn particular, the problem isn't really dropbear so much as it is small window sizes, and I've encountered small window sizes on OpenSSH servers as well. I mean, who knows, maybe Travis CI's instance of dropbear will wind up using small window sizes out of the box but then again maybe it won't.\nAnyway, the problem with small window sizes is.. I don't know how to make at least OpenSSH use small windows. Dropbear may be easier at that tho idk.\n. > Also fixes #298 ?\nIt's possible. The guy says that it seems to get stuck in an infinite loop, which this could address, but his saying that it works when real time logging is enabled...  real-time logging shouldn't effect this so idk..\n. Looks good to me. Does it require the public keyword for non-static methods? If not then maybe a bug report should be filed with the library doing the documentation as well? idk\n. This could be changed in the master branch too.. changing the conventions used in the comments doesn't break BC at all.\n. > I've added another commit in the meantime. Remind me, what does /**#@+ do?\nI think it's supposed to apply the @ to everything until the @-. So in the example above @access and @see are applied to everything until the @-.\n. I'm thinking we can do it when 1.0 is released. ie. maybe release 1.0 and 2.0 simultaneously or something idk. If bantu wants to do it sooner he has my blessing to do so.\n. Sure. I think roman numerals are cooler but am ultimately indifferent.\n. Since you're in there you might want to update stuff like this to accommodate namespacing:\nphp\n        // although PHP5's get_class() preserves the case, PHP4's does not\n        if (is_object($password)) {\n            switch (strtolower(get_class($password))) {\n                case 'crypt_rsa':\n                    return $this->_privatekey_login($username, $password);\n                case 'system_ssh_agent':\n                    return $this->_ssh_agent_login($username, $password);\n            }\n        }\nFile_X509 has get_class calls that'll probably need to be updated as well.\n. I'd say keep it at 5.3.2. openssl_encrypt / openssl_decrypt didn't let you pass in an IV until 5.3.2.\n. 5.3.3 is good.\n. I guess that'll make https://github.com/phpseclib/libssh2-compatibility-layer a little less effective as a drop-in replacement for libssh2..\n. How do you mean?\nI mean doing echo file_get_contents($_GET['var']) is a problem but even if you make it a non-issue for this stream wrapper by requiring an $sftp object be pre-initialized it's still a problem for every other existant wrapper. Also, I don't see how this is any more of a problem then people doing new Net_SFTP($_GET['var']) either. Or $sftp->putFile($_GET['remoteName'], $_GET['localName']).\nIf that's not what you mean then I guess I'd need elaboration.\nAlso,\n\nUsing global variables to pass arguments is not in spirit with best practices (dependency injection)\n\nI'm not necessarily the biggest expert on dependency injection. How would this be able to use dependency injection if the \"global $$host;\" hack were removed? I mean I'm not deadset against removing it but I think it'd help if the benefit were explained a little more clearly.\n. > When e.g. using sftp:// to download a file, the stream wrapper will create a new instance of Net_SFTP and then does not verify the host key in any way. Thus this can not be secure against man in the middle attacks. You have to first establish a Net_SFTP connection, verify the host key, then pass that into SFTP stream wrapper, for it to be secure against man in the middle.\nOh right - that's true. But it's just as much an issue for the libssh2 stream wrapper too.\nI mean, if we really wanted to get all paranoid we could have login() throw an exception (or do user_error) if you haven't first called $ssh->getServerPublicHostKey() but I don't know if that's always appropriate. Like if you're connecting to localhost would MITM be possible? Maybe idk.\nAnd if we do that then what about straight up password auth? Should phpseclib refuse to connect to SSH servers if password auth is the only auth that's used?\nEIther way I think, at the end of the day, I don't think it's phpseclib's place to enforce best practices. Circumstances may not always warrant it anyway.\n\nI am sorry. It's only related to dependency injection in so far as dependency injetion leads to the removal of global variables. Maybe I should have just said \"do not use global variables / state\" instead of listing dependency injection.\n\nIt's not actually setting global variables. The idea is...  say you have $zzz = new Net_SFTP(...). Then you do sftp://$zzz/path/to/filename.php. The method will declare $zzz global and try to access it with a scope that'd let it be accessed.\nIt isn't 100% compatible with libssh2's method. With libssh2, in my testing, as I recall, \"sftp://$zzz/\" and 'sftp://$zzz/' both work. With phpseclib's stream wrapper just 'sftp://$zzz/' works.\n. > This only works when $zzz is in global scope, which it should not (have to) be.\nThat's true. Although that could be a requirement of libssh2 as well idk.\n\nThe stream_context_get_options() function should be used to dependency-inject the Net_SFTP object into the stream that is being created (now I remember why i mentioned \"dependency injection\").\n\nThat's still an option. It's just not the only option.\n\nphpseclib should not provide an environment that has to be explicitly assembled or configured to be secure. It should be reasonably secure by default and should require explicit configuration for making it insecure.\n\nphpseclib can't achieve maximum security on it's own. The server public host key needs to be saved and then when you connect you're supposed to check the host key you get from the server to make sure it matches up with what you have previously saved.\nSo where does phpseclib save the key? To a filesystem it knows nothing about? Doing tempnam() would provide a temp place to store it but tempnam() files aren't supposed to live forever.\nMaybe the key could be saved to the DB but phpseclib has no way of knowing if you have a DB connection, let alone what the auth info for that DB would be.\nI mean, phpseclib can be used in a secure way. Call $ssh->getServerPublicHostKey() and check it against the copy of the key that you have saved. But the person using phpseclib has to do that - phpseclib can't be expected to do that out of the box.\n. That would probably be a workable solution in the php5 / 2.0 branch, with the static array being inside Net_SFTP along with the __toString() magic method.\n. Fixed by #787 \n. idk... I kinda like Net/SFTP/Stream, File/ASN1/Element, etc. It just feels like it makes for a cleaner and more organized file layout...\n. > For RSA consider extracting key generation\nidk that I like that. I think making createKey static is a good idea. Putting it in a whole other file...  idk it just seems unnecessary. What would it be? Crypt/RSA/Keys? Well then what do you use if you want to load a key? The class named key or the class RSA?\n\nFor Crypt consider removing Base, e.g. extract password handling\n\nI'm not sure what you mean.\n\nConsider extracting pure-PHP code into different packages (?). See #471\n\nI don't agree with that. Maybe a $cipher->disableEngine() method can be implemented or something.\nAlso, I'd like to break apart File/X509.php at some point. Instead have File/X509, File/CSR, File/CRL, etc. Right now they're all bundled into one.\n. I guess I'm okay with method # 2. Although...\n./SSH/Agent/Agent.php\n./SSH/Agent/Identity.php\n./SSH/SCP.php\n./SSH/SFTP/SFTP.php\n./SSH/SFTP/Stream.php\n./SSH/SSH1.php\n./SSH/SSH2.php\nWhat happened to the whole Net/ namespace?\n. Where does everything else live? Is it Crypt/RC2.php still or, under your proposal, is it supposed to be RC2/RC2.php? What about File/X509.php?\nWhat if I had additional networking protocols unrelated to SSH at some later date? Where do they live at, under your proposal? Net/TLS.php (as an example) makes sense. Or do we do TLS/TLS.php?\n. I'd like it more people chimmed in. As is the ideal organizational structure seems a bit subjective. Kinda like should it be Math/BigInteger::modPow, mod_pow, powMod, pow_mod or something else entirely?\n. This one is tricky. Net_SCP, for example, calls internal methods in Net_SSH2 that are tagged as being private via phpdoc. Even setting them to protected would break Net_SCP as that does not extend Net_SSH2 (it uses Net_SSH2 [or Net_SSH1]) but does not extend them.\n. Honestly, I think all methods / variables ought to be public. Sometimes I have people make use of \"private\" methods to assist in diagnosing issues or to remedy current deficiencies in the code. Here's an example:\nhttp://stackoverflow.com/a/4534385/569976\nAlso, see this:\nhttp://aperiplus.sourceforge.net/visibility.php\n\nOne idea specifically for the SCP class would be to create two subclasses, one for SSH1 and one for SSH2 which extend from their respective classes, and then change the current SCP class to just be a factory. So you would do something like new SCP($host, $port, $timeout, SCP::MODE_SSH2), which would return one of the subclasses. Shared logic for each subclass could be injected through the use of traits, and an interface would enforce the methods. I could do a PR for that as well, I think it would be fairly easy to do.\n\nI'd be interesting in seeing a more fleshed out implementation of your ideas.\n. Actually, thinking about it, I guess I'd be okay with making stuff protected. 2.0 is gonna feature a complete API change anyway with namespacing, etc.\nAnd technically I guess I can use reflection to have people turn protected methods / variables into public ones..\n. > This also affects master?\nLooks like it does.\nAnyway, looks good to me!\n. See #588.\nThe check is in _disconnect() and presumably it worked in the past until https://github.com/phpseclib/phpseclib/commit/a14e71f38b441829c1ad945b9094e27a943f5a11 when I created the _connect() function. ie. before that change $this->bitmap only ever had the constructor flag set at the end of the code that's now in _connect(). And without that flag $this->bitmap would be 0. After that change the constructor flag was always set so $this->bitmap is pretty much always non-zero.\n. $callback isn't nearly as necessary in Net/SFTP.php as it is in Net/SCP.php. With SFTP you can piece-mill your uploads. You can append data to an existing file. With SCP you can't. With SCP it's you either upload the whole file or you don't upload anything at all.\nIf you want to be able to track upload progress with SFTP you can just do this:\nphp\n$upload_str = '...';\nfor ($i = 0; $i < $upload_str; $i+= 100) {\n    $sftp->put('filename.remote', substr($upload_str, $i, 10), NET_SFTP_RESUME);\n    // update upload progress somehow\n}\nSo since you can already have interuptable uploads with SFTP and since I'm leery of adding too many paramters to $sftp->put() I'm inclined to say no to this PR.\n. That error is coming from fsockopen. Two possible fixes:\nhttp://stackoverflow.com/a/6730915/569976\nhttp://www.linuxforums.org/forum/red-hat-fedora-linux/46840-fsockopen-error-13-permission-denied.html\n. > As I've explained elsewhere: This might not be as simple as just replacing user_error() with throw Exception(). Appropriate exception classes/types should be introduced/used, allowing exceptions to be used more appropriately. This requires at least some thinking.\nFor sure.\n\nThere is definitely some low hanging fruit though, and some user errors that really should just be logs instead of errors.\n\nWhich errors do you think ought to show up in logs instead? It's hard to agree or disagree without specifics.\n. Aside from what bantu said this PR looks good to me.\n. Looks good.\nphp\n-        // Determining whether inline crypting can be used by the cipher\n-        if ($this->use_inline_crypt !== false && function_exists('create_function')) {\n-            $this->use_inline_crypt = true;\n-        }\nFWIW that was added because create_function can and sometimes is disabled via the php.ini disable_functions directive:\nhttp://www.2by2host.com/articles/php-errors-faq/disabled_create_function/\nhttp://stackoverflow.com/q/3115559/569976\nThat said I don't think anonymous functions have the same issue so maybe it's worthwhile to remove functions like _encryptBlock() and _decryptBlock() from Crypt/Rijndael.php, etc. And I suppose while we're at it we can consider whether or not we want to still have the code that makes use of them in Crypt/Base.php.\nedit: actually, I'd say let's keep that code in Crypt/Base.php but nix the _encryptBlock() and _decryptBlock() implementations. If third parties want to extend Crypt/Base.php they can use _encryptBlock() or _decryptBlock() even if the classes that extend it in phpseclib don't. Certainly _encryptBlock() and _decryptBlock() are easier to wrap ones head around than the anonymous method approach being used.\n. I'll do that when I get home as time permits.\n. Before this commit internal mode takes 1.4 seconds. After this commit it takes 25 seconds. Need to figure out what's going on. My guess: the eval() statements.\nMy test code:\n``` php\n<?php\ninclude('autoloader.php'); // https://raw.githubusercontent.com/composer/composer/master/src/Composer/Autoload/ClassLoader.php\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR.'/phpseclib');\n$loader->register();\nuse \\phpseclib\\Crypt\\AES;\n$plaintext = '';\nfor ($i = 0; $i < 1024*1024; $i++) {\n    $plaintext.= chr(mt_rand(0, 255));\n}\n$start = microtime(true);\ndefine('CRYPT_AES_MODE', AES::ENGINE_INTERNAL);\n$aes = new AES();\n$aes->setKey('abcdefghijklmnop');\n$aes->encrypt($plaintext);\n```\n. So I note that you've removed the NET_SSH2_MSG_CHANNEL_OPEN handling from _filter() and have moved to _get_channel_packet() instead. Is there a particular reason that couldn't have been kept in _filter()? I mean, at the end of the day, a request to open a channel isn't a channel packet..\n. So I just looked at how PuTTY does it with pageant and I think the concerns I brought up at https://github.com/phpseclib/phpseclib/pull/518#issuecomment-66884870 still need to be addressed.\nBasically, although OpenSSH does not implement https://tools.ietf.org/html/draft-ietf-secsh-agent-02 fully it does seem to implement the agent forwarding portions of it. Which is what your implementation appears to be doing as well. And pursuant to my reading of that and an analysis of the PuTTY logs I think you're doing it incorrectly.\nFrom the logs:\nIncoming packet #0x7, type 52 / 0x34 (SSH2_MSG_USERAUTH_SUCCESS)\nEvent Log: Access granted\nEvent Log: Opening session as main channel\nOutgoing packet #0x8, type 90 / 0x5a (SSH2_MSG_CHANNEL_OPEN)\n  00000000  00 00 00 07 73 65 73 73 69 6f 6e 00 00 01 00 00  ....session.....\n  00000010  00 40 00 00 00 40 00                             .@...@.\nIncoming packet #0x8, type 91 / 0x5b (SSH2_MSG_CHANNEL_OPEN_CONFIRMATION)\n  00000000  00 00 01 00 00 00 00 00 00 00 00 00 00 00 80 00  ................\nEvent Log: Opened main channel\nEvent Log: Requesting OpenSSH-style agent forwarding\nOutgoing packet #0x9, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 00 00 00 00 00 1a 61 75 74 68 2d 61 67 65  ........auth-age\n  00000010  6e 74 2d 72 65 71 40 6f 70 65 6e 73 73 68 2e 63  nt-req@openssh.c\n  00000020  6f 6d 01                                         om.\nOutgoing packet #0xa, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 00 00 00 00 00 07 70 74 79 2d 72 65 71 01  ........pty-req.\n  00000010  00 00 00 05 78 74 65 72 6d 00 00 00 50 00 00 00  ....xterm...P...\n  00000020  18 00 00 00 00 00 00 00 00 00 00 00 10 03 00 00  ................\n  00000030  00 7f 80 00 00 96 00 81 00 00 96 00 00           .............\nOutgoing packet #0xb, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 00 00 00 00 00 05 73 68 65 6c 6c 01        ........shell.\nIncoming packet #0x9, type 99 / 0x63 (SSH2_MSG_CHANNEL_SUCCESS)\n  00000000  00 00 01 00                                      ....\nEvent Log: Agent forwarding enabled\nIncoming packet #0xa, type 99 / 0x63 (SSH2_MSG_CHANNEL_SUCCESS)\n  00000000  00 00 01 00                                      ....\nEvent Log: Allocated pty (ospeed 38400bps, ispeed 38400bps)\nIncoming packet #0xb, type 93 / 0x5d (SSH2_MSG_CHANNEL_WINDOW_ADJUST)\n  00000000  00 00 01 00 00 20 00 00                          ..... ..\nIncoming packet #0xc, type 99 / 0x63 (SSH2_MSG_CHANNEL_SUCCESS)\n  00000000  00 00 01 00                                      ....\nSo PuTTY isn't creating a whole new channel for the auth-agent-req request - it's re-using the channel that it's creating the pty on (the recipient channel for all three SSH_MSG_CHANNEL_REQUEST's is 0x00000000). It is requesting the auth-agent-req before it is requesting the pty but my guess is that that's arbitrary and that the order really does not matter that much. This is in contrast to what you're doing. You're creating a whole new channel specifically for the auth-agent-req - not re-using an existing channel.\nHere are the log files from what you're doing:\n``` php\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0771, network: 0.077s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:03:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1023, network: 0.1022s)\n00000000  00:00:00:03:00:00:00:00:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.001, network: 0.0003s)\n00000000  00:00:00:00:00:00:00:1a:61:75:74:68:2d:61:67:65  ........auth-age\n00000010  6e:74:2d:72:65:71:40:6f:70:65:6e:73:73:68:2e:63  nt-req@openssh.c\n00000020  6f:6d:01                                         om.\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.1011, network: 0.1009s)\n00000000  00:00:00:03                                      ....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0008, network: 0.0005s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:01:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1025, network: 0.0002s)\n00000000  00:00:00:01:00:00:00:02:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0007, network: 0.0003s)\n00000000  00:00:00:02:00:00:00:07:70:74:79:2d:72:65:71:01  ........pty-req.\n00000010  00:00:00:05:76:74:31:30:30:00:00:00:50:00:00:00  ....vt100...P...\n00000020  18:00:00:00:00:00:00:00:00:00:00:00:01:00        ..............\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0484, network: 0.0483s)\n00000000  00:00:00:01                                      ....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0005, network: 0.0003s)\n00000000  00:00:00:02:00:00:00:05:73:68:65:6c:6c:01        ........shell.\n```\nSo the auth-agent-req SSH_MSG_CHANNEL_REQUEST is being sent on channel 0x00000000 whereas the pty-req and shell requests are being sent out on channel 0x00000002. ie. different channels.\nI'll research this further, later, as time permits.\n. So one idea: maybe instead of doing _on_login_success() maybe do _on_channel_create_success().\n. > With regard to the open new channel/use existing implementation possibilities. I don't think either is incorrect per se. I do agree that it is neater - my first attempt at that implementation did not work, and I'm not clear why yet. I will try again and hopefully can commit something along those lines soon.\nMaybe I can help you debug it if you're having issues with that approach.\n\nUnfortunately I am not aware of a way to \"switch off\" that flag (it is session persistent) once set on the server side\n\nI think what it is is that it's channel persistent - not session specific. None-the-less that's a good point. Maybe stopSSHForwarding should just be removed..\n. I'll try to take a look at this next weekend.\nThanks!\n. So mostly this looks good! I made a few recommendations. If I don't hear back from the orig author in a few weeks I'll just fork these changes, make the modifications I proposed and then submit a PR for code review (or just straight up merge it myself).\n. I'd say keep it open. It's very low priority but long-term it'd be good to get this stuff done.\n. Overall I think it's a good commit but... \n``` php\n                            //Look for major version\n                            $fullVersion = trim(str_replace('=>', '', strip_tags($matches[2][$i])));\n                            preg_match('/(\\d+.\\d+.\\d+)/i', $fullVersion, $m);\n                        if (!empty($m)) {\n                            $versions[$matches[1][$i]] = $m[0];\n                        } else {\n                            $versions[$matches[1][$i]] = $fullVersion;\n                        }\n\n```\nYou could do this instead:\nphp\n                            //Look for major version\n                            $fullVersion = trim(str_replace('=>', '', strip_tags($matches[2][$i])));\n                            if (!preg_match('/(\\d+\\.\\d+\\.\\d+)/i', $fullVersion, $m)) {\n                                $versions[$matches[1][$i]] = $fullVersion;\n                            } else {\n                                $versions[$matches[1][$i]] = $m[0];\n                            }\nAlso, saying major version is a little misleading. With semantic versioning you have [major].[minor].[patch], so people used to versioning like that might think you're only checking to see if it's OpenSSL 1.0 headers with an OpenSSL 2.0 library. Maybe a better comment would be... \"remove letter versions\" or some such.\n. Fixed by #598\n. @bantu - Prior to this patch phpseclib parsed the output of phpinfo() to get the OpenSSL Library version and the OpenSSL Header version. It then compared the two and if they weren't equal OpenSSL was disabled (since this mismatch can result in PHP crashing - an issue that was - at least at one time - fairly common in XAMP). This patch makes it so the letter version isn't compared against.\n. Yah - I'm okay with it being merged. I'll let bantu do that. I mean I can do it too but idk there are other phpseclib stuff I want to do atm.\n. Variable names are one thing. Changing public methods, however, is another matter entirely, as that breaks BC. And _generate_identifier, despite not being public, still affects BC, since it's intended to be used classes extended Net_SSH2 per #214.\nAnyway, maybe come up with a list of what's not camelCase and further discussion can be had.\nDo keep in mind that any BC breaking changes would be 2.0 / php5 only.\n. Among other things I'm curious which is used more. I'm thinking probably underscores (eg. _get_identifier [from Net_SSH2]) but camel case is def used in some places as well (modPow in Math_BigInteger).\nIn lieu of empirical evidence I'd guess that I mostly prefer mixing in underlines over camel case. And if phpseclib had to be internally consistent I think I'd be more in support of mod_pow than _getIdentifier (or getIdentifier if the preceding _ were to be removed).\nwikipedia's article on snake_case cites a study at http://ieeexplore.ieee.org/xpl/articleDetails.jsp?reload=true&tp=&arnumber=5521745 (behind a paywall) that suggests that snake_case is more readable. But wikipedia's article on camelCase cites a study at http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.9499 (also behind a paywall) that suggests that camelCase is more readable. So I guess the jury is split.\n_get_identifier rewritten as getIdentifier can look an awful lot like getldentifier (ie. upper case i vs. lower case L) depending on the font being used. So I guess that's an argument against camelCase.\nOne thing we could do is be pseudo PSR-1/2 compliant. ie. we're PSR-1/2 compliant save for the fact that we don't use camelCase.\nidk meh.\n. I'm not able to duplicate this but I'm not running 5.6.4 either. I'll try when I get home as time permits.\n. I can't reproduce this even on 5.6.4. php -v gives me this:\nC:\\some\\directory>php56 -v\nPHP 5.6.4 (cli) (built: Dec 17 2014 13:20:35)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\nI then try running this script on 0.3.9 and don't get any errors or notices or anything:\n```\n<?php\nerror_reporting(E_ALL);\ninclude('Crypt/AES.php');\ndefine('CRYPT_RIJNDAEL_MODE', CRYPT_MODE_INTERNAL);\n$rijndael = new Crypt_Rijndael();\n$rijndael->setKey( 'hellothisismykey' );\n$array = array('k1' => 'value1', 'k2' => 'value2');\n$serialized = serialize($array);\necho $rijndael->decrypt($rijndael->encrypt($serialized));\n```\nAnd tbh it really does baffle the mind how it could do anything. A string is a string and a serialized string is still just a string.\n. Here are the lines leading up to 319 / 320:\nphp\n                        $in = $_block = substr($_text, $_i, 16);\n                        $in = unpack(\"N*\", $in);\n$s0 = $in[1] ^ 1528546082;\n$s1 = $in[2] ^ -677214309;\n$s2 = $in[3] ^ 1658105913;\n$s3 = $in[4] ^ -841356084;\n319 and 320 are the $s2 and $s3 lines. If $in[3] and $in[4] don't exist than my guess have been that you were able to get a string less than 16 bytes that far.\n. serialize(array('k1' => 'value1', 'k2' => 'value2')) produces a 50-byte string. AES uses 16-byte blocks. 50 % 16 is 2. My guess is that if the ciphertext were a multiple of the block size it'd decrypt just fine. The question is...  why isn't it?\nIn Crypt/Base.php, there's this:\nphp\n$_text = str_pad($_text, strlen($_text) + ('.$block_size.' - strlen($_text) % '.$block_size.') % '.$block_size.', chr(0));\nReplacing $block_size as appropriate yields this:\nphp\n$_text = str_pad($_text, strlen($_text) + (16 - strlen($_text) % 16) % 16, chr(0));\nSubbing out strlen($_text):\nphp\nstr_pad($_text, 50 + (16 - 2) % 16, chr(0));\nThe last % $block_size seems unnecessary but, basically, $_text is being null padded to 64 bytes and 64 is a multiple of 16.\nSo, basically, $_text should be 64 bytes long and that's if there wasn't padding. With padding it'd be 64-bytes as well, per this:\nphp\n$_text = $self->_pad($_text);\nSo in light of that can you tell me what the following outputs?:\n``` php\n<?php\nerror_reporting(E_ALL);\ninclude('Crypt/AES.php');\ndefine('CRYPT_RIJNDAEL_MODE', CRYPT_MODE_INTERNAL);\n$rijndael = new Crypt_Rijndael();\n$rijndael->setKey( 'hellothisismykey' );\n$array = array('k1' => 'value1', 'k2' => 'value2');\n$serialized = serialize($array);\necho 'serialized = '.strlen($serialized).\"\\r\\n\";\n$temp = $rijndael->encrypt($serialized);\necho 'temp = ' . strlen($temp) . \"\\r\\n\";\necho $rijndael->decrypt($temp);\n```\nThanks!\n. In Crypt/Base.php can you replace _pad with this?:\n``` php\n    function _pad($text)\n    {\necho \"_pad called\\r\\n\";\n        $length = strlen($text);\n    if (!$this->padding) {\n        if ($length % $this->block_size == 0) {\n\necho \"the text IS a multiple of the plaintext\\r\\n\";\n                return $text;\n            } else {\necho \"the text is NOT a multiple of the plaintext\\r\\n\";\n                user_error(\"The plaintext's length ($length) is not a multiple of the block size ({$this->block_size})\");\n                $this->padding = true;\n            }\n        }\n    $pad = $this->block_size - ($length % $this->block_size);\n\necho \"performing PKCS7 padding\\r\\n\";\n        return str_pad($text, $length + $pad, chr($pad));\n    }\n``\n. Thanks! Can you replace_pad`, again, with this?:\n``` php\n    function _pad($text)\n    {\necho \"_pad called\\r\\n\";\n        $length = strlen($text);\n    if (!$this->padding) {\n        if ($length % $this->block_size == 0) {\n            return $text;\n        } else {\n            user_error(\"The plaintext's length ($length) is not a multiple of the block size ({$this->block_size})\");\n            $this->padding = true;\n        }\n    }\n\n    $pad = $this->block_size - ($length % $this->block_size);\n\necho \"performing PKCS7 padding\\r\\n\";\necho \"pad = $pad\\r\\n\";\necho \"block_size = {$this->block_size}\\r\\n\";\necho \"length = $length\\r\\n\";\n        $result = str_pad($text, $length + $pad, chr($pad));\necho \"result = \".strlen($result).\"\\r\\n\";\nreturn $result;\n    }\n```\nThanks!\n. In Crypt/Base.php can you find this?:\n``` php\n            // case CRYPT_MODE_CBC:\n            default:\n                $encrypt = $init_encrypt . '\n                    $_ciphertext = \"\";\n                    $_text = $self->_pad($_text);\n                    $_plaintext_len = strlen($_text);\n                $in = $self->encryptIV;\n\n                for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {\n                    $in = substr($_text, $_i, '.$block_size.') ^ $in;\n                    '.$encrypt_block.'\n                    $_ciphertext.= $in;\n                }\n\n                if ($self->continuousBuffer) {\n                    $self->encryptIV = $in;\n                }\n\n                return $_ciphertext;\n                ';\n\n```\n...and replace it with this:\n``` php\n            // case CRYPT_MODE_CBC:\n            default:\n                $encrypt = $init_encrypt . '\n                    $_ciphertext = \"\";\n                    $_text = $self->_pad($_text);\necho \"_text_len = \" . strlen($_text) . \"\\r\\n\";\n                    $_plaintext_len = strlen($_text);\n                $in = $self->encryptIV;\n\n                for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {\n                    $in = substr($_text, $_i, '.$block_size.') ^ $in;\n                    '.$encrypt_block.'\n                    $_ciphertext.= $in;\n                }\n\n                if ($self->continuousBuffer) {\n                    $self->encryptIV = $in;\n                }\n\necho \"_ciphertext_len = \".strlen($_ciphertext).\"\\r\\n\";\n                    return $_ciphertext;\n                    ';\n```\nThanks!\n. Try this:\n``` php\n            // case CRYPT_MODE_CBC:\n            default:\n                $encrypt = $init_encrypt . '\n                    $_ciphertext = \"\";\n                    $_text = $self->_pad($_text);\necho \"_text_len = \" . strlen($_text) . \"\\r\\n\";\n                    $_plaintext_len = strlen($_text);\n                $in = $self->encryptIV;\n\n                for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {\n                    $in = substr($_text, $_i, '.$block_size.') ^ $in;\n                    '.$encrypt_block.'\n\necho \"adding \" . strlen($in) . \" to ciphertext (\" . strlen($_ciphertext) . \")\\r\\n\";\n                        $_ciphertext.= $in;\n                    }\n                if ($self->continuousBuffer) {\n                    $self->encryptIV = $in;\n                }\n\necho \"_ciphertext_len = \".strlen($_ciphertext).\"\\r\\n\";\n                    return $_ciphertext;\n                    ';\n```\n. In Crypt/Rijndael.php can you find this?:\nphp\n            $encrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block.= ',\n                    ($'.$e.$i                  .' & 0xFF000000) ^\n                    ($'.$e.(($i + $c[1]) % $Nb).' & 0x00FF0000) ^\n                    ($'.$e.(($i + $c[2]) % $Nb).' & 0x0000FF00) ^\n                    ($'.$e.(($i + $c[3]) % $Nb).' & 0x000000FF) ^\n                    '.$w[$i].\"\\n\";\n            }\n            $encrypt_block .= ');';\n...and replace it with this?:\nphp\n            $encrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n$zzz = '';\n            for ($i = 0; $i < $Nb; ++$i) {\n                $temp = ',\n                    ($'.$e.$i                  .' & 0xFF000000) ^\n                    ($'.$e.(($i + $c[1]) % $Nb).' & 0x00FF0000) ^\n                    ($'.$e.(($i + $c[2]) % $Nb).' & 0x0000FF00) ^\n                    ($'.$e.(($i + $c[3]) % $Nb).' & 0x000000FF) ^\n                    '.$w[$i].\"\\n\";\n$encrypt_block.=$temp;\n$zzz.= 'echo \"param[' . $i . ' / ' . $Nb . '] = \".('.trim($temp, \",\\n\") . ') . \"\\r\\n\";';\n            }\n            $encrypt_block .= ');';\n$encrypt_block.= $zzz;\nThanks!\n. I'm glad that it's working but the code changes I had you make weren't supposed to get it working. They echo'd out debug info but didn't change what the code is doing meh.\nMy working hypothesis had been that pack() on your system wasn't returning appropriately sized strings, which would indicate a PHP bug. But since it's now working, even tho I didn't actually change what the code was doing...  idk...\nI guess one thing you could do is in the orig (and modified code) find this (or what used to be this):\n``` php\n            // case CRYPT_MODE_CBC:\n            default:\n                $encrypt = $init_encrypt . '\n                    $_ciphertext = \"\";\n                    $_text = $self->_pad($_text);\n                    $_plaintext_len = strlen($_text);\n                $in = $self->encryptIV;\n\n                for ($_i = 0; $_i < $_plaintext_len; $_i+= '.$block_size.') {\n                    $in = substr($_text, $_i, '.$block_size.') ^ $in;\n                    '.$encrypt_block.'\n                    $_ciphertext.= $in;\n                }\n\n                if ($self->continuousBuffer) {\n                    $self->encryptIV = $in;\n                }\n\n                return $_ciphertext;\n                ';\n\n```\nAnd echo out $encrypt in both of those instances.\n. Can you post a CSR that doesn't decode?\nI can throw a few test CSR's at it myself, as well, but one that you've confirmed to have the issue vs me trying to brute force until I find one that doesn't work would make my life easier!\n. Try replacing your ASN1.php with this:\nhttps://raw.githubusercontent.com/phpseclib/phpseclib/84325d415eb35f2ebedc0893bc2ca46a7a19ac63/phpseclib/File/ASN1.php\n606 elaborates as to what was going on. The CSR in the unit test is based off of the ones you sent me but the keys have been replaced as has the subject DN.\n. How does that work? I enabled Travis CI for terrafrost/phpseclib and then created a new branch with a syntax error:\nhttps://github.com/terrafrost/phpseclib/tree/travis-test\nBut I'm not seeing where the status of the tests is?\n. See https://github.com/phpseclib/phpseclib/commit/54f0f2131bf13a8f4e968118586ef7cc82f416c5#commitcomment-4057173\nIf you (or someone else) wants to try changing it feel free to submit a PR and it can be reviewed.\n. I can look into that.\nAlthough that said I would say that servers that do not provide diffie-hellman-group1-sha1 or diffie-hellman-group14-sha1 are not in compliant. From RFC4253:\n```\n   Two REQUIRED key exchange methods have been defined:\n  diffie-hellman-group1-sha1 REQUIRED\n  diffie-hellman-group14-sha1 REQUIRED\n\n```\n. > Maybe there is an RFC deprecating those.\nI'm not aware of any. If you scroll to the top you'll see \"Updated by: 6668\" but RFC6668 doesn't address diffie hellman key exchange. Just the hash algorithms. The errata doesn't mention deprecating diffie hellman either.\nWhether or not it should be deprecated is another matter.\nAnyway, like I said, I'll look into adding support for this.\nThanks!\n. Two things.\n1. There's nothing wrong in the SFTP logs. The file is being uploaded successfully and then the file handle is being closed. The SSH2 logs would be more useful in this particular case. eg. define('NET_SFTP_LOGGING', NET_SFTP_LOG_REALTIME).\n2. You might have better luck with the latest Git version:\nhttps://github.com/phpseclib/phpseclib/archive/master.zip\nIn particular, the fix for #502 (#538) may fix the issue.\n. ``` php\n<?php\ninclude('Crypt/AES.php');\n$cipher = new Crypt_AES(CRYPT_AES_MODE_ECB);\n$cipher->setKey('hkekdoafmcjbmlpngopiiljn');\n$value = '29001-30-2015 06:56:20112.135.44.165All220219217218222216221119117116118115246250243248247253249255252254251245244111121110238239242240241';\necho '$value before encryption: ' . strlen($value) . \"\\r\\n\";\n$value = $cipher->encrypt($value);\necho '$value after encryption: ' . strlen($value) . \"\\r\\n\";\nfile_put_contents('test.ext',$value);\necho 'file_get_contents: ' . strlen(file_get_contents('test.ext')) . \"\\r\\n\";\n```\nHere's what I get as the output:\n$value before encryption: 503\n$value after encryption: 512\nfile_get_contents: 512\nYou say \"read content of saved encrypted files are truncated\". How do you know they're being truncated?\n\nAlways ending with particular character, more content is visible when file is opened with editor. With editor also if I copy paste, it doesnt copy beyond that character.\n\nAre you using a text editor? If so then that's half the problem. Text editors are generally not good at editing binary data and behave unpredictably when you try.\nIf I opened a .exe with Windows Notepad and saved it again do you think I'd get a .exe that'd be runnable? I doubt it.\n. With HTML entities:\n``` php\n<?php\ninclude('Crypt/AES.php');\n$cipher = new Crypt_AES(CRYPT_AES_MODE_ECB);\n$cipher->setKey('hkekdoafmcjbmlpngopiiljn');\n$value = '<c><u>290</u><ldt>01-30-2015 06:56:20</ldt><ip>112.135.44.165</ip><e><rs><t>All</t><a id=\"99\"><r>220</r><r>219</r><r>217</r><r>218</r><r>222</r><r>216</r><r>221</r></a><a id=\"79\"><r>119</r><r>117</r><r>116</r><r>118</r><r>115</r></a><a id=\"110\"><r>246</r><r>250</r><r>243</r><r>248</r><r>247</r><r>253</r><r>249</r><r>255</r><r>252</r><r>254</r><r>251</r><r>245</r><r>244</r></a><a id=\"75\"><r>111</r><r>121</r><r>110</r></a><a id=\"109\"><r>238</r><r>239</r><r>242</r><r>240</r><r>241</r></a></rs></e></c>';\necho '$value before encryption: ' . strlen($value) . \"\\r\\n\";\n$value = $cipher->encrypt($value);\necho '$value after encryption: ' . strlen($value) . \"\\r\\n\";\nfile_put_contents('test.ext',$value);\necho 'file_get_contents: ' . strlen(file_get_contents('test.ext')) . \"\\r\\n\";\n```\nMy output:\n$value before encryption: 1093\n$value after encryption: 1104\nfile_get_contents: 1104\nAs before there's no truncation. Instead there's padding (which is to be expected). What do you get when you run this script?\n. I would actually like to do that, but realistically speaking, that's probably a long ways off. ie. quite a few years. And although I haven't really examined the protocols in any great depth my general expectation is that it'd be a good amount of work.\n. > You should be requesting this to be merged into 1.0 then, right?\nYup. idk how this should be handled for the 2.0 series.\n\n@GrahamCampbell My understanding is that terrafrost wants to maintain 1.0 for a longer time. Possibly longer than 2.0. Kind of as an LTS release.\n\nYah - pretty much.\n. @ravage84 - you're proposing that each branch have it's own changelog independent of any other branch? eg.\nCHANGELOG.md for the 2.0 branch starts at 2.0, as tho the 0.x/1.x series never happened?\n@AdamWill - what are your thoughts?\n. I think http://stackoverflow.com/a/28465739/569976 answers your question?\n. I'll try to make a commit with the changes tomorrow night. Have most of them done but I need to do some other stuff before I go to bed tonight.\nThanks for the feedback!\n. The recommended changes have been made.\n. Is there any way I can help speed this along?\n. One more week of inactivity on this and I'm thinking I'm just going to merge #507 myself (which will kinda invalidate this particular PR). I like the idea of code reviews for pull requests as they demonstrate a willingness on the part of this project to employ best practices. But practicality has to be taken into consideration too.\nI realize that I, myself, can take a while to code review big PR's (eg. #592), but that said, I also essentially take ownership of any big PR I approve. It'd be nice if people supported their larger code contributions after they were merged but they don't and thus the onus almost always falls on me.\nThe last commit for this was 19 days ago.\n. I created a new PR that has this feature merged into the 2.0 branch, with all the merge conflicts hopefully resolved (I guess the unit tests will be the ultimate determiner). Hopefully this will remove an obstacle for the merging of this PR.\n. A hurdle for merging #640 (aka #507) myself has been overcome with #652 targeting the 2.0 branch. The recommendations made in this PR have been incorporated into #640 and #652 so those are as up-to-date as they can be.\nI'd like it if this PR and #643 were given a final sign off but in lieu of one I think I'll go ahead and merge #640 and #652 if there's no activity on this or #643 within a week.\n. Looks good to me. And you're right - it should have been in the 0.3.10 tag meh. Last time I retagged something, however, that caused a bit of an outcry, so I guess that's not an option.\n. In theory, with phpseclib, you'd use File_ASN1_Element to create arbitrary extensions. In practice, it looks like you'll have to add one line to File/X509.php:\n```\n\n-----[ OPEN ]------------------------------------------\n\nFile/X509.php\n\n-----[ FIND ]------------------------------------------\n\nfunction _mapOutExtensions(&$root, $path, $asn1)\n{\n    $extensions = &$this->_subArray($root, $path);\n\n    if (is_array($extensions)) {\n        $size = count($extensions);\n        for ($i = 0; $i < $size; $i++) {\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nif (is_object($extensions[$i]) && strtolower(get_class($extensions[$i])) == 'file_asn1_element') continue;\n```\nOnce that's done you can do this:\n``` php\n<?php\ninclude('File/X509.php');\n$x509 = new File_X509();\n$cert = $x509->loadX509('-----BEGIN CERTIFICATE-----\nMIIDITCCAoqgAwIBAgIQT52W2WawmStUwpV8tBV9TTANBgkqhkiG9w0BAQUFADBM\nMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg\nTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0xMTEwMjYwMDAwMDBaFw0x\nMzA5MzAyMzU5NTlaMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\nMRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRcw\nFQYDVQQDFA53d3cuZ29vZ2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC\ngYEA3rcmQ6aZhc04pxUJuc8PycNVjIjujI0oJyRLKl6g2Bb6YRhLz21ggNM1QDJy\nwI8S2OVOj7my9tkVXlqGMaO6hqpryNlxjMzNJxMenUJdOPanrO/6YvMYgdQkRn8B\nd3zGKokUmbuYOR2oGfs5AER9G5RqeC1prcB6LPrQ2iASmNMCAwEAAaOB5zCB5DAM\nBgNVHRMBAf8EAjAAMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwudGhhd3Rl\nLmNvbS9UaGF3dGVTR0NDQS5jcmwwKAYDVR0lBCEwHwYIKwYBBQUHAwEGCCsGAQUF\nBwMCBglghkgBhvhCBAEwcgYIKwYBBQUHAQEEZjBkMCIGCCsGAQUFBzABhhZodHRw\nOi8vb2NzcC50aGF3dGUuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vd3d3LnRoYXd0\nZS5jb20vcmVwb3NpdG9yeS9UaGF3dGVfU0dDX0NBLmNydDANBgkqhkiG9w0BAQUF\nAAOBgQAhrNWuyjSJWsKrUtKyNGadeqvu5nzVfsJcKLt0AMkQH0IT/GmKHiSgAgDp\nulvKGQSy068Bsn5fFNum21K5mvMSf3yinDtvmX3qUA12IxL/92ZzKbeVCq3Yi7Le\nIOkKcGQRCMha8X2e7GmlpdWC1ycenlbN0nbVeSv3JUMcafC4+Q==\n-----END CERTIFICATE-----');\n$asn1 = new File_ASN1();\n$value = encodeOID('1.2.3.4');\n$ext = chr(FILE_ASN1_TYPE_OBJECT_IDENTIFIER) . $asn1->_encodeLength(strlen($value)) . $value;\n$value = 'zzzzzzzzz';\n$ext.= chr(FILE_ASN1_TYPE_OCTET_STRING) . $asn1->_encodeLength(strlen($value)) . $value;\n$ext = chr(FILE_ASN1_TYPE_SEQUENCE | 0x20) . $asn1->_encodeLength(strlen($ext)) . $ext;\nfunction encodeOID($oid)\n{\n                if ($oid === false) {\n                    user_error('Invalid OID');\n                    return false;\n                }\n                $value = '';\n                $parts = explode('.', $oid);\n                $value = chr(40 * $parts[0] + $parts[1]);\n                for ($i = 2; $i < count($parts); $i++) {\n                    $temp = '';\n                    if (!$parts[$i]) {\n                        $temp = \"\\0\";\n                    } else {\n                        while ($parts[$i]) {\n                            $temp = chr(0x80 | ($parts[$i] & 0x7F)) . $temp;\n                            $parts[$i] >>= 7;\n                        }\n                        $temp[strlen($temp) - 1] = $temp[strlen($temp) - 1] & chr(0x7F);\n                    }\n                    $value.= $temp;\n                }\n                return $value;\n}\n$cert['tbsCertificate']['extensions'][4] = new File_ASN1_Element($ext);\necho $x509->saveX509($cert);\n```\nI mean, I guess I could add support for creating them in a manner more consistent with OpenSSL. eg. maybe create a new object - File_X509_ArbitraryExtension - or some such.\n. Oh - also, I'll try to do the code change later today or something as time permits.\nAs for File_X509_ArbitraryExtension (or whatever)...  I'll probably hold off on that until I can do an overall of File_X509. There are a number of things I want to change about it. BC breaking changes that I think would improve usability that'll go in the master branch.\n. https://github.com/phpseclib/phpseclib/pull/628 kinda fixes this altho not in the way suggested by the stackoverflow post.\nThe problem with doing what the stackoverflow post is that doing that would mix ASN1 mapped stuff (asn1map) and ASN1 unmapped stuff (decodeBER). I mean, yah, the extnValue is, in theory, supposed to be DER encoded, but for one, it can be malformed without affecting the overall parsability of the X.509 cert, and for two, without any sort of mapping, it wouldn't have the same semantic meaning that the rest of the mapped X.509 cert had.\n. You must have done something wrong. I just added unit tests to test this (didn't change any code in File/X509.php) and it works just fine.\nThat said I did have have to submit a new PR since #628 was against master instead of 1.0 (and idk how to change it). The new PR is #629.\nRegardless, rather than modifying the line by hand how about just copy / paste the file, pre-modified?:\nhttps://raw.githubusercontent.com/terrafrost/phpseclib/e686c095b63eadfa3ed60b1cc4c01c7e17d30b77/phpseclib/File/X509.php\nMaybe the unit test is written badly? Maybe it's showing non base64-encoded stuff elsewhere and I just missed it? If so let me know where you're encountering the other base64-encoded stuff and I'll be happy to look at it. But I fixed it for all that I saw (as the unit test confirms).\n. I added a unit test to this if you want to code review, bantu!\n. > This should be against 1.0 instead\nYah - it should. Is there a way I can change that or do I need to do a whole new PR?\n\nTests?\n\nI can add one. Did you have a chance to look at any of the OpenSSL stuff btw?\n. Replaces #628\nBtw, I am still curious if it is possible to change the branch a PR is made against. Any ideas?\n. The latest commit addresses your comment.\nI'll do the unit test for #627 after this has been merged (rather than creating a second copy of X509Test.php that's pretty much guaranteed to have a merge conflict)\n. What'd be more helpful than the start of the log would be the end of the log.\nMore helpful than that would be SSH2 logs instead of the SFTP logs. eg. NET_SSH2_LOG_REALTIME.\nMost helpful would be SFTP access with credentials emailed to terrafrost@php.net so I could reproduce the problem myself and diagnose it in real-time, but I can probably manage without it if you're able to provide the other stuff :)\n. What version are you running? Per your screenshot you're getting a PHP Warning - \"unpack(): Type C: not enough input, need 1, have 0\" on line 1326 in Net/SSH2.php\". I looked through successive versions of phpseclib and my guess is that you're running 0.3.6 because that has this line at 1326:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.6/phpseclib/Net/SSH2.php#L1326\nIf that's correct than my first suggestion would be to try upgrading.\nAlso, I don't think you're doing the logging correctly. So, first, I don't see an include or require in your code so it's not clear to me how you're including Net/SSH2.php. Maybe you're using PSR-0 auto loading or something? idk.\nWell, whatever it is that you're doing it appears that define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); is being done before Net/SSH2.php is included.  Normally if this were being done I'd expect to see a \"Notice: Use of undefined constant NET_SSH2_LOG_COMPLEX\", which I'm not seeing in your screenshot of the output, but maybe your screenshot has just cut it off.\nThe thing is...  without that constant being defined it'll set NET_SSH2_LOGGING not to 2 (which is what the NET_SSH2_LOG_COMPLEX is defined as) but rather to 'NET_SSH2_LOG_COMPLEX', which == 1. So, basically, you're doing NET_SSH2_LOG_SIMPLE and not NET_SSH2_LOG_COMPLEX and the former is not as useful as the latter for diagnosing issues.\nSo either do define('NET_SSH2_LOGGING', 2) where you're currently doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); or do define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after Net/SSH2.php has been included.\n. > NET_SSH2_LOGGING' been set to NET_SSH2_LOG_COMPLEX after including\nGreat. Now can you do $ssh->getLog() and post the output?\n. > Bug?\nNope. Per the logs phpseclib doesn't have any compatible algorithms with your OpenSSH server. Personally, I'd say your OpenSSH is buggy because it's not strictly compliant with the SSH RFC's. Per https://tools.ietf.org/html/rfc4253#section-6.5 diffie-hellman-group1-sha1 and diffie-hellman-group14-sha1 are \"REQUIRED\", however, the server does not support them.\nThat said, the server does support diffie hellman group exchange. phpseclib added support for that recently. It's in v1.0.0. So if you upgrade the version of phpseclib that you're using you should be good to go!\n. It looks like the server is closing the connection. I have no idea why. Best guess: the server just doesn't like the algorithm that's being chosen. This is not without precedent.\nFor example, some servers that say that they support hmac-sha1-96 really don't, despite the servers saying that they do:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.0/phpseclib/Net/SSH2.php#L1276\nAnd some servers don't support arcfour128 / arcfour256 despite saying that they do:\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?p=392584#p392584\nSo maybe you're running into an issue like that. You can call it whatever you like. You can blame phpseclib if you like. But I wouldn't. I'd say it's a buggy server that doesn't support the algorithms it says it supports and the only reason phpseclib is having the issue and libssh2 isn't is because libssh2 is preferentially choosing different algorithms than phpseclib is.\nThe way I'd try to figure this out is to comment out algorithms from phpseclib until I found a combo that worked. I might also try connecting with PuTTY and disabling / enabling algorithms to make PuTTY and phpseclib connect with the same set. If both PuTTY and phpseclib have problems with the same algorithms than it's not a phpseclib bug - it's a server bug.\nBut I don't expect you to do that. What would be helpful is if you could provide me with SSH access. I wouldn't even need a username / password to reproduce the issues you're having on the server you're having them on. If you are willing to help email terrafrost@php.net. If not I'll close this ticket and will this time leave it closed.\n. I downloaded the *.zip from the website and got the same file as you have. It looks like the tag is different. I'll need to look into what happened..\n. Yah - server access would be the most helpful. Just email that to terrafrost@php.net . No login is needed - just IP address / port or domain / port.\nThanks!\n. So it's exactly the same problem as described at http://www.frostjedi.com/phpbb3/viewtopic.php?p=392584#p392584 . Same fix too:\n```\n\n-----[ FIND ]------------------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        'arcfour256',\n        'arcfour128',\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        //'arcfour256',\n        //'arcfour128',\n\n```\nThe server is saying it supports arcfour256 / arcfour128 and it doesn't. The server is lying and when it sees that arcfour256 / arcfour128 is the algorithm that is to be used it's killing the connection.\nYou can duplicate this with PuTTY. In PuTTY Configuration go to Connection -> SSH and, in \"Encryption options\" move \"Arcfour (SSH-2 only)\" to the top, above \"AES (SSH-2 only)\".\nOnce you try to connect you'll get a \"Server unexpectedly closed network connection\".\nThe PuTTY logs can be seen at http://pastebin.com/3sz2HfJe\nThe reason phpseclib uses RC4 over AES is speed. phpseclib is faster than libssh2, probably in part due to the choice of default algorithms. Although that said when either OpenSSL or mcrypt are utilized the speed improvements netted by the algorithm choice may be rendered moot. I'll have to do some testing on that.\nBut, long story short, it's not a phpseclib bug. It's an OpenSSH bug.\nMore info:\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/ssh2-aesctr-openssh\n. It's not an issue in 1.0 because 1.0 uses define to do constants:\nhttps://github.com/phpseclib/phpseclib/blob/0efae5a91e90e6027b95874e5242f5ea8eaa5754/phpseclib/Crypt/DES.php#L1411\n2.0 does uses class-specific const's.\nAnyway, reproducing the issue is a bit tricky but I managed to do it with this:\n``` php\n<?php\ninclude('autoloader.php'); \n$loader = new \\Composer\\Autoload\\ClassLoader(); \n$loader->addPsr4('phpseclib\\', DIR . '\\phpseclib'); \n$loader->register();\nuse \\phpseclib\\Crypt\\DES; \n$plaintext = ''; \nfor ($i = 0; $i < 1024*1024; $i++) { \n    $plaintext.= chr(mt_rand(0, 255)); \n} \n$start = microtime(true); \ndefine('CRYPT_DES_MODE', DES::ENGINE_INTERNAL); \n$des = new DES();\n$funcs = &$des->_getLambdaFunctions();\n$funcs = range(0, 10);\n$des->setKey('abcdefghijklmnop'); \n$des->encrypt($plaintext); \n$elapsed = microtime(true) - $start; \necho \"Elapsed time: $elapsed\";\n```\nThe reason the range(0, 10) thing is necessary is because of this (from DES.php):\nphp\n        // Generation of a uniqe hash for our generated code\n        switch (true) {\n            case $gen_hi_opt_code:\n                // For hi-optimized code, we create for each combination of\n                // $mode, $des_rounds and $this->key its own encrypt/decrypt function.\n                $code_hash = md5(str_pad(\"DES, $des_rounds, {$this->mode}, \", 32, \"\\0\") . $this->key);\n                break;\n            default:\n                // After max 10 hi-optimized functions, we create generic\n                // (still very fast.. but not ultra) functions for each $mode/$des_rounds\n                // Currently 2 * 5 generic functions will be then max. possible.\n                $code_hash = \"DES, $des_rounds, {$this->mode}\";\n        }\nI'll submit a PR for this shortly.\n. I think it's a good idea however, I think it'd be better to use stream_select (which, despite your third commit's commit message, you do not appear to be using). eg.\nphp\n// on windows this returns a \"Warning: Invalid CRT parameters detected\" error\nif (!@stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\n    $this->is_timeout = true;\n    return true;\n}\n. Does https://github.com/terrafrost/phpseclib/tree/banner-timeout work for you?\n. > Why you do not prefer stream_get_meta_data ?\nConsistency. Also, you're not using stream_select so it won't time out after a pre-determined amount of time - it'll just timeout whenever.\nIf you do do stream_select then the next problem is that the timeouts aren't cumulative. So if your timeout is ten seconds and each fgets() call takes two seconds the approach that I'm using will timeout after five fgets() calls whereas using stream_get_meta_data won't ever timeout since technically none of the individual fgets() calls ever timed out.\n. idk if your definition of \"as we need\" accounts for cumulative timeouts. But let's test it out.\n``` php\n<?php\nset_time_limit(0);\n$socket = socket_create(AF_INET, SOCK_STREAM, 0);\nsocket_bind($socket, '127.0.0.1', 9999) or die(\"Could not connect\");\nsocket_listen($socket);\n$client_connection = socket_accept($socket);\nfor ($i = 0; $i < 10; $i++) {\n    sleep(2);\n    socket_write($client_connection, \"zzz\");\n}\nsocket_close($client_connection);\nsocket_close($socket);\n```\nSo with a timeout of 10 how many zzz's should connecting to 127.0.0.1:9999 yield? I say 5. So let's test it out.\nSeveral different possible clients have been proposed. Your commits include several different varieties. The code as of https://github.com/sapzxc/phpseclib/commit/63f49ac52a91e5da2ef9ee88babf6b47ed3009b4 is analogous to this:\n``` php\n<?php\n$fsock = fsockopen('127.0.0.1', 9999);\n$i = 0;\nwhile (!feof($fsock)) {\n    $i++;\n    echo \"$i. \" . fgets($fsock, 4);\n    echo \"\\r\\n\";\n$info = stream_get_meta_data($fsock);\nif($info['timed_out']) {\n    exit(\"timeout\\r\\n\");\n}\n\n}\n```\nThat shows zzz ten times.\nIn https://github.com/sapzxc/phpseclib/commit/63f49ac52a91e5da2ef9ee88babf6b47ed3009b4 you removed stream_set_timeout($this->fsock, $sec, $usec); so let's try adding that with $sec = 10:\n```\n<?php\n$fsock = fsockopen('127.0.0.1', 9999);\nstream_set_timeout($fsock, 10);\n$i = 0;\nwhile (!feof($fsock)) {\n    $i++;\n    echo \"$i. \" . fgets($fsock, 4);\n    echo \"\\r\\n\";\n$info = stream_get_meta_data($fsock);\nif($info['timed_out']) {\n    exit(\"timeout\\r\\n\");\n}\n\n}\n```\nThat shows zzz ten times.\nThe commit message for https://github.com/sapzxc/phpseclib/commit/63f49ac52a91e5da2ef9ee88babf6b47ed3009b4 says \"using stream_select instead \" even tho your actual commit doesn't do that. None-the-less let's try that:\n``` php\n<?php\n$fsock = fsockopen('127.0.0.1', 9999);\n$i = 0;\nwhile (!feof($fsock)) {\n    $read = array($fsock);\n    $write = $except = null;\nstream_select($read, $write, $expect, 10);\n\n$i++;\necho \"$i. \" . fgets($fsock, 4);\necho \"\\r\\n\";\n\n$info = stream_get_meta_data($fsock);\nif($info['timed_out']) {\n    exit(\"timeout\\r\\n\");\n}\n\n}\n```\nStill displays ten zzz's.\nSo let's try to make it cumulative using the same technique that I implemented in my branch but using stream_get_meta_data:\n``` php\n<?php\n$fsock = fsockopen('127.0.0.1', 9998);\n$i = 0;\n$curTimeout = 10;\nwhile (!feof($fsock)) {\n    $read = array($fsock);\n    $write = $except = null;\n$start = microtime(true);\n$sec = floor($curTimeout);\n$usec = 1000000 * ($curTimeout - $sec);\n\nstream_select($read, $write, $expect, $sec, $usec);\n\n$elapsed = microtime(true) - $start;\n$curTimeout-= $elapsed;\n\n$i++;\necho \"$i. \" . fgets($fsock, 4);\necho \"\\r\\n\";\n\n$info = stream_get_meta_data($fsock);\nif($info['timed_out']) {\n    exit(\"timeout\\r\\n\");\n}\n\n}\n```\nIt still displays zzz ten times for me but after the fifth time I start getting this error too:\nPHP Warning:  stream_select(): The seconds parameter must be greater than 0 in /path/to/filename.php on line 13\nWhy isn't stream_get_meta_data working as expected? idk. But then again I guess I don't need to know as the following does work (and doesn't use stream_get_meta_data):\n``` php\n<?php\n$fsock = fsockopen('127.0.0.1', 9998);\n$i = 0;\n$curTimeout = 10;\nwhile (!feof($fsock)) {\n    if ($curTimeout < 0) {\n        exit(\"timeout\\r\\n\");\n    }\n$read = array($fsock);\n$write = $except = null;\n\n$start = microtime(true);\n$sec = floor($curTimeout);\n$usec = 1000000 * ($curTimeout - $sec);\n\nstream_select($read, $write, $expect, $sec, $usec);\n\n$elapsed = microtime(true) - $start;\n$curTimeout-= $elapsed;\n\n$i++;\necho \"$i. \" . fgets($fsock, 4);\necho \"\\r\\n\";\n\n}\n```\n. Sorry about not responding to this earlier - I guess I just missed it.\nAnyway, what command are you trying to run?\nCertainly there are some commands that could cause phpseclib to run out of memory. eg. dd if=/dev/zero of=file_1GB bs=1024 count=1000; cat file_1GB.\n. Based on a cursory reading of the protocol I think it's within the scope, although realistically speaking, the time table is probably a ways out. My next big project (after #507 / #623 is merged) is to refactor X509. According to the draft it looks like it makes extensive use of PKCS7 and PKCS10. PKCS10 is pretty much CSR's so that's done (although it'll be refactored as it is in X509.php) but PKCS7 would still need to be implemented.\n. I see that you're doing enable and show wlan all. Do those need to be done one after the other? If so then you may want to consider interactive mode. eg.\nphp\n$ssh->read('[prompt]');\n$ssh->write(\"enable\\n\");\necho $ssh->read('[prompt]');\n\nstrangely enough, if I set wrong login/password , I still get \n<- NET_SSH2_MSG_USERAUTH_SUCCESS\nin the logs\n\nSounds like a server issue to me - presumably this would be an issue with any other SSH2 / SFTP client (eg. putty or whatever) you tried.\n. You could probably just do this:\nphp\nif (!$ssh->login('foo')) {\n    exit('Login Failed');\n}\nDid that fix the issue with the enable and show wlan all stuff as well?\nAlso, can you post your dropbear config? I'm curious how to get an SSH server behaving like how you described.\nThanks!\n. > This patch is not good in so far that the connectionTimeout property is no longer used.\nThat's a good point although I'm thinking it can just be deleted.\n\nGenerally, I think it would make sense to have multiple / different timeout settings. E.g. different ones for connect() and read(). I am not sure whether that is already the case and didn't look too deep into the pull request.\n\nBy default it gets reset. So if the timeout is 10 seconds and it takes 8 seconds to connect the timeout for the read() will still be 10 seconds. If you want the timeout to be cumulative between read()'s and exec()'s you'll need to keep track of the elapsed time yourself and call setTimeout as appropriate before each read() / exec() call.\nhttp://phpseclib.sourceforge.net/ssh/examples.html#timeout elaborates.\nIn #634 I said that that one didn't have cumulative timeout's but that one is a little different. The timeout's for this PR are cumulative between each stream_select call, so long as the stream_select call is for the constructor or for read() / exec(). #634 wasn't even cumulative even for stream_select.\n. Does http://stackoverflow.com/a/4336957/569976 fix the issue for you?\n. > Are merges from 1.0 -> 2.0 not done anymore? Does that mean my docblock changes need to be submitted to both branches?\nI'm also doing it for bigger patches so it's less work for bantu to do the merges. ie. I'm resolving the conflicts so he doesn't have to. For smaller changes conflicts - if they occur at all - will be easier to resolve.\n. Looks good to me!\n. I had kinda been hoping bantu would merge this since he was the one who voiced concerns about it and it is unclear to me if your observation constitutes a satisfactory response in his eyes.\nI guess in lieu of a response from him I'll merge this this weekend.\n. 1.0 would be good!\n. Looks good to me!\n. Got the email - thanks! I'll try to take a look this weekend or next as time permits (I have some other stuff I need to do this weekend so idk for sure that I can do it this weekend but I'll try!)\n. Sorry for the delay - I had intended to look at this this weekend but wound up having to work through the whole weekend meh :(\nAnyway, here's the fix:\n```\n\n-----[ OPEN ]------------------------------------------\n\nFile/ASN1.php\n\n-----[ FIND ]------------------------------------------\n\n            return $i < $n? null: $map;\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n            return $map;\n\n```\nMore info:\nhttp://stackoverflow.com/a/28665775/569976\nIt's something I'm tentatively thinking I'll address when I start refactoring the X.509 parsing routines.\nThanks!\n. php\n$ssh->exec('ssh -l 3307:localhost:3306 ourwebsite.com sleep 60');\nPer man ssh I think what you want to do is ssh -L. I also note that you're not specifying a username or key in that command. If you're logging in as ourusername (ie. the same user you SSH'd into the box initially with) I guess the lack of a username doesn't matter but there's still the matter of the key. Is it in your id_rsa file on ourwebsite.com? Otherwise that command won't work.\nFinally, unless you're SSH'ing into ourwebsite.com from ourwebsite.com then presumably the 127.0.0.1:3307 mysql \"server\" will be on ourwebsite.com and not the machine you're doing the SSH'ing from.\n. I just saw that you posted a response.\nAnyway, first thing I want to say is that I am not an expert with the OpenSSH CLI client. I'm pretty knowledgeable of the protocol but the question you're asking isn't about the protocol. And given that there are probably better places to ask this question.\nThat said, per man ssh, -l is for specifying a username, which you do not appear to be doing. L is for binding addresses, which does appear to be more in-line with what you're doing.\nAs for reading the key...  you can specify the key path with the -i option in OpenSSH. You're right tho that the permissions will probably need to be set appropriately even if doing that but idk.\nUnless you're using ssh agent forwarding (which you're server may not even support) simply SSH'ing into the machine with your private key won't let the server re-use it for subsequent out-bound SSH connections.\n. I am unable to reproduce this on PHP 5.6.7 on Windows 7. My code:\n``` php\n<?php\n$contextOptions = array(\n    'ssl' => array(\n        'verify_peer'   => false,\n        'verify_peer_name' => false,\n        'allow_self_signed' => true\n    ),\n    'http' => array(\n        'timeout' => 5 //seconds\n    )\n);\n//create stream context\n$stream_context = stream_context_create($contextOptions);\n//create client instance (over HTTPS)\n$client = new SoapClient('https://fxtop.com/dev/service.wsdl', array(\n    'cache_wsdl'  => WSDL_CACHE_NONE,\n    'exceptions' => 1,\n    'trace' => 1,\n    'stream_context' => $stream_context,\n    'soap_version'=> SOAP_1_1,\n    'connection_timeout' => 5 //seconds\n));//SoapClient\nrequire_once('phpseclib/Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey(AUTH_PRIVATE_KEY_PKCS1); //as string\n$rsa->setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);\n$rsa->setHash('md5');\n$rsa->setMGFHash('md5');\n//sign\n$signature =  $rsa->sign($DataToSign);\n$args = array('Lang' => 'US', 'Isocode' => 'USD');\n$z = $client->DescCurrency($args);\nvar_dump($z);\n```\nJust finding a free SOAP SSL service was a bit of a PITA but, regardless, given my inability to reproduce this issue if you want further diagnostics you'll need to give me SSH access or something to a box that can reproduce this problem. Or give me an Ansible playbook that can reproduce this issue or something.\n. There's another PR that does something similar:\nhttps://github.com/phpseclib/phpseclib/pull/584\nI like your method better however. That said, the other PR adds a is_callable check. It'd be good if your PR did the same thing.\n. Good point. However, none-the-less, I still don't like how that PR add's a sixth parameter to an already overloaded method. Although that said I guess I'm willing to live with that patch with the understanding that that will be removed from later (BC breaking) versions of phpseclib. eg.\n```\n$sftp = new Net_SFTP(...);\n$sftp->login(...); \n$fp = $sftp->open('filename.ext', 'w');\n$fp->write('whatever');\n$fp->close();\n```\nAt that point what I'd probably do is remove $mode all together along with $start, $local_start and $callback.\nIf you want to efficiently upload from a file you can do this:\n$local = fopen('filename.ext', 'r');\n$remote = $sftp->open('filename.ext', 'w');\nwhile (!feof($local)) {\n    $remote->write(fread($local, 1024));\n}\n$remote->close();\nfclose($local);\nBack to this PR tho...  currently phpseclib uses user_error - not Exceptions. I think exceptions are actually superior and I want to change all of phpseclib's user_error's to exceptions but I also want phpseclib to be consistent.\nI suppose that's a change I can make just as easily myself as well. I'll try to do this and two other PR's tomorrow or the day after.\n. > I think I didn't add any new parameters to any function.\n\nDo you mean SOURCE_CALLBACK constant?\n\nI was talking about the other PR.\n\n|This way is better, of course. |As for me - I'd leave BC where possible.\n\nphpseclib 0.x / 1.x would retain BC. phpseclib 2.0.x would retain BC as well. Maybe the version of phpseclib where this new API lived would be 2.1.x or 3.x or something idk.\nBasically, phpseclib has multiple concurrent versions that are being supported. Kinda like how PHP was concurrently supporting PHP 4 / 5 for a time and how phpBB is concurrently supporting 3.0 and 3.1. Although that said I'm tentatively thinking I'll support phpseclib 0.x / 1.x a good deal longer but who knows. I'm also not going to come up with a ten year roadmap for phpseclib either.\n. You're going to need to provide more information. Perhaps even provide your whole Net/SSH2.php file. Here's the commit where that constant was initially defined (in 0.3.6):\nhttps://github.com/phpseclib/phpseclib/commit/0f96fae81879e6d8a19831a98063ecd9e2e1fdf9\nThis commit changed that line:\nhttps://github.com/phpseclib/phpseclib/commit/a14e71f38b441829c1ad945b9094e27a943f5a11\nAnd later there's this commit:\nhttps://github.com/phpseclib/phpseclib/commit/3eac2582d6668ef6c6ef29e7de9cacf6f1b9f834\nI looked at line 3206 in tagged versions of Net/SSH2.php going back to 0.3.1 and none of them have NET_SSH2_MASK_WINDOW_ADJUST on line 3206.  Maybe you checked out master from git and haven't updated since? Either way, updating to the latest version would be good. Failing that post your Net/SSH2.php.\n. Looks like a valid issue in the 2.0 branch. The fact that you're using that branch is something you prob should have mentioned. None-the-less I'll try to implement a fix this evening, time permitting.\n. The fix for this has been merged. Thanks!\n. You need to use a PSR-4 style auto loader. eg.\n```\n<?php\n// https://raw.githubusercontent.com/composer/composer/master/src/Composer/Autoload/ClassLoader.php\ninclude('autoloader.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR.'/phpseclib');\n$loader->register();\nuse \\phpseclib\\Crypt\\RSA;\n$rsa = new RSA();\n```\nBeyond that there isn't really a whole heck of a lot to it. If you want to use constants they're now (mostly) like RSA::ENCRYPTION_OAEP etc.\n. First, you do have some redundancies in your code. eg.\nphp\n$rsaCrypt->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);\nThat's the default encryption mode as is so there's no need to explicitely specify it. Also,\nphp\n$rsaCrypt->loadkey(\"XML PUB KEY GOES HERE\", CRYPT_RSA_PUBLIC_FORMAT_XML);\nphpseclib doesn't need that CRYPT_RSA_PUBLIC_FORMAT_XML part to load XML keys.\nIn any event, I took your code and ran it in a for loop 1,000 times for a 4092-bit and didn't have any issues:\n``` php\ninclude('Crypt/RSA.php');\ninclude('Math/BigInteger.php');\n//define('MATH_BIGINTEGER_MODE', MATH_BIGINTEGER_MODE_BCMATH);\n//define('MATH_BIGINTEGER_OPENSSL_ENABLED', false);\nfor ($i = 0; $i < 1000; $i++) {\n    $rsaCrypt = new Crypt_RSA();\n    $rsaCrypt->setHash('sha512');\n    $rsaCrypt->setMGFHash('sha512');\n    $rsaCrypt->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);\n    // Load the public key into that class\n$rsaCrypt->loadkey('<RSAKeyValue>\n\nw3GYJ3MaMMPjsBTsg9imhrNO3WtL3kkwHuokza6fdI3zxJkzfzqe+49q/3u8HWyrzNWY1\nOx73/Hu36VcCBEFetA2wm6acLqL1tcptrAuub8M7XL/u7Reqn9wv6HQ37dEeRRPwd6dSb9JPXpVAmqgq\nAOa19KSwffI1JnKgvsbeT4O6SiHpkFWsVmp8TOUkaGZWWM4+dCQlwflHnJFBOu8va2WkhAwg6JxbBdha\ndPteA7B+z2ahhrl1w8VdGi+FPIDM1lxFwK54BR7ddYfNB2iWF+337YUBYcL5K3GDOSajsLWWkNuXrIJa\nScbwryGg2IwjyvVEUHdpdqApOU5v9l7DWBVQFNnLBVQ8teUC2gf/z3Yhs+gF7HvCn+1CTcO/uh7nuc0U\nM4m11+BQ8gBKmvXizwNzpMmlteqL7DpjgvturuPt5eE2eesL8ADjlJcbgffnUto7Y2BgaDlCgdVYS5Yr\nUf6rBJcRWapdJmisLKo9zy1t58TQ/7DZdpcjKC38D2tT1jzZZlrPduGuGbZbjLLbvxYWoNHcJor6H33L\nxYu8rD8PAX7cQc+6tgTkcBrUd2ACJo1C8P1REnDm7c0UO4Cs1h6AEsPjKxoR1m3Ktu1VH29jYEic/iiv\ndsewLPBbkv1XsQcmQMv02vf/7d412Ukx9yngIzBFBIrahiv1KpqfTU=\nAQAB\n', CRYPT_RSA_PUBLIC_FORMAT_XML);\n    $ciphertext = $rsaCrypt->encrypt('zzz');\n$rsaCrypt->loadkey('<RSAKeyValue>\n\nw3GYJ3MaMMPjsBTsg9imhrNO3WtL3kkwHuokza6fdI3zxJkzfzqe+49q/3u8HWyrzNWY1\nOx73/Hu36VcCBEFetA2wm6acLqL1tcptrAuub8M7XL/u7Reqn9wv6HQ37dEeRRPwd6dSb9JPXpVAmqgq\nAOa19KSwffI1JnKgvsbeT4O6SiHpkFWsVmp8TOUkaGZWWM4+dCQlwflHnJFBOu8va2WkhAwg6JxbBdha\ndPteA7B+z2ahhrl1w8VdGi+FPIDM1lxFwK54BR7ddYfNB2iWF+337YUBYcL5K3GDOSajsLWWkNuXrIJa\nScbwryGg2IwjyvVEUHdpdqApOU5v9l7DWBVQFNnLBVQ8teUC2gf/z3Yhs+gF7HvCn+1CTcO/uh7nuc0U\nM4m11+BQ8gBKmvXizwNzpMmlteqL7DpjgvturuPt5eE2eesL8ADjlJcbgffnUto7Y2BgaDlCgdVYS5Yr\nUf6rBJcRWapdJmisLKo9zy1t58TQ/7DZdpcjKC38D2tT1jzZZlrPduGuGbZbjLLbvxYWoNHcJor6H33L\nxYu8rD8PAX7cQc+6tgTkcBrUd2ACJo1C8P1REnDm7c0UO4Cs1h6AEsPjKxoR1m3Ktu1VH29jYEic/iiv\ndsewLPBbkv1XsQcmQMv02vf/7d412Ukx9yngIzBFBIrahiv1KpqfTU=\nAQAB\n9il3BtsAomII/xBu3qpAbcUoAmjGiWzDiy+vO6Uojaa3ogRtMOhmbJ8G8DjDWyt0fVTl3CzcSma\neFkpQu71h2/GmTE0/Pmy2n/wPVZ143bSj/v+IIZUmY8N1Y1AxOZljGinatAKBQ5LoW7xtDikSZL7NZeS\nt4SuAMufOLCtZP9NDCy8McQCQMHQC7Bi4elVjw1IhuYmGtCD3iQ1BYgWX2Eb7tV5mzvgTneAa9wx7frU\nm0xHHUTp8CULpbk/GgSAEGj/i/EJSge//kN0S31lW+hFbxWfI55hAWmvArzn1LESvOONSe360NqY6JCw\naLjDg6Z/a2UXaOzb+bOaaNz+nwQ==\ny0E4aL8p5o/pQK11avBc1I9Gfoas9+lw35/+uSozS+eotoI9jLntSa4HY6PO46OJcoF8slFy2l4\nVjFeYlEZ71B5bPGz/bOb1MGOBjeGGtioHfnLC+cs6+5UozKE0xKDvKpOzzteVGuDrKdPwhSDoH/YofuU\n8ohA/BbACyFvsCyT77R/cy8C/TZCQgwZY25uHkJy1N/DRP4s/qPr0oexfzGHdKwITNJ7yPQhfZ9IPhzz\nPwMlcDj1OKpFRmqoLjUrexrBnLwn5gKjyhgj2TYPiTpxn3ANH2Mpna4sXmLalaiC0+JHSvC+wsZNRKEu\n9VdQAiGpOO/nlL+VIganmBFdSdQ==\nC3mNWd11nxwwzSsH8AtBq5xILCyULK3MQ726Tm55gHjoEH5iVKhQtfmHykTrHmHdMUZ23JeewT\n0dW26lasr+N9GA7gefzholPTnzwQrxKmyURHvG7cHVI0tmOnXvhX7X9s1Cq6d+PRcpC7Wx47oYaGfYjU\npmrJtpg3X4z2hJ5cbEVk4gJ1heYFPYGwdf+hvm5aD7f3mgtN7gixv6E0ateGB+tUqsQjOgPnjG6QNE8n\nghUi9++hNe2tOqrAC+ASDr8AlQXG//Bp2YbTlQ+uZgPpH2lDItVFZtkYl6VvC9tA2TmXRHUQhsACwpg6\nwmoEaZBWr1ObGe5am/nHX3dGHcQQ==\nJkSSTU5ooitIPFAsQkUdBTwwhpPurwJ5qPDjsZMbc1gbcLlWw08iOPQWGhF2W2+n6jIs+xnQqQ\nJ7xh+b75bRq59HiDnxYVyen0ys0Ly8c0G4hXsv8H3uDf4IX3aei8LNJNQIT5JRVW0xeX+Y0kfezF25RC\nL+5nhulTCNZZHBAFwnPn74QDh7DCyCuNiSFE7VGEoY6H5jtzYNd1BAjNgHNWDblkRev1KJwyn3ZIGtQM\nYXS3Hd7iRmuicAGUGYyTJmfTwrQTT8j9e/SbMYRIHnMuvJtie7+DorfJkEiVEiFbgwungiGCJWfyiAaD\njSXf17WDPDpREosHrXyunlD74tHQ==\nv8qZA4ZwNDGccNFdZdLrvtuktHYl3d6jDuQFTm5Nnn6dwEbI8uWimlQC8TlgxCZzSJQu\nyIhQMCUhZoZlcDydvE342/HDUAsmjp3LYxuwABRn5p33PnK5x1a0S0R/HPDO4zzMQ17azEvJNYV5M89O\nEAu5LvDduCGgmBkaREsMYYi9RPNoiIseHOM2R5t4d2QwfMhW0HJUG3RI6Xt47wqXHDTN6xRM+3Uian3+\noQj39YV5CJHgobEwdC8kdklVU15vLvzgIsELmid6rjZC/e9LYo9QY6dKQMohxPePklpsYwnSODm12oGT\niTUxeTqq6YpcUcHLyqHPGEmaH58CvZSUKg==\noAuOgIeWI+bVteR8hb9NJrMA2vq5Rw8B098DQldEBmsT+qNF82Lqu6+G/C20LxhFW1hybbI2An4\nYkZXU1lox9Y85uGBgIf3w836AjzSZHswfZvasCma6ur3fc12sMPbfoJMMeQK2JKT68dgScwckBlHlY+T\nw/tvM3qQNnNLKfa9fAHmLE48f0d1N99G4UMVXUUaaap/rN3JkolkKwevVRDI5QeT2BWVpog1HXSUJqi3\nTlcytlDHEkyar+Aap2XcRPeR5YlF+Ksw7CZTNOp0ly16esRhmLtyW1a2jp/0vv8Y3R/U+FVePs0cuSXq\neYEpw310Sfq5ENkPG4sE/WCZcx3hcN0gEIcd0KIUt/hzVNxaC5nDR37JYBb9YzjFi8UEQ8BBgjMOr8DE\nIKtmv+dmuzh5iqBbsQsJxf/QloPWsnbGD5G8aZKK3DVuZG7jEpWVjPJ/f3si87bAfsFPScOjHgtoVGvb\ngsWj0mbJZCy5+V07Kd9n3pMounDqOYuyvcd2MfhvVtm0fTq3OHD2so8zLN9MajH5ByHTXzjUTPW08+Iv\nwYRlzW+Hng/H5bo0YfeAYXBRNXaukwOvjeXVTO4AXzsOExtodxv8HZJdxsDaAi08ZXcPQZfSzLiIm6wI\nXILbmb1fWvlEg7YHrNhxF1kPhHouhyvV2t/6Ru8cLntWeaQE=\n');\n    $rsaCrypt->decrypt($ciphertext);\n}\necho 'all done!';\n```\nGiven my inability to reproduce it it's hard to say anything. Maybe you can post your phpinfo()? This test was conducted under GMP. BCMath and internal could, in theory, produce different results (altho the unit tests make me think that's unlikely), as could, potentially, the presence of OpenSSL. There's also Crypt_Hash to consider, too, but the phpinfo() will provide me insight into all of that.\nAlso, it'd be helpful if you could post the key that's causing the problems.\n. Instead of passing the output of $ssh->read() through $ansi->appendString() can you post the base64 encoded output of $ssh->read()? ie. base64_encode.\nThanks!\n. http://pastebin.com/3NfBcF3B is a marginal improvement but to really make this handle htop I'm gonna need to spend a good amount of time fundamentally changing the way it works.\n. Sorry for the delay. Anyway, I just made a commit to my clone of this repo that should give you much more accurate ANSI decoding:\nhttps://github.com/terrafrost/phpseclib/commit/cc0420b36b3b03de7dd75f44ef263adaf49b0e06\nI need to add a unit test and change elements of it for the 2.0 / php5 branch but in the mean time you can use that version on the 1.0 / 0.3.10 / php4 branch.\nThanks!\n. Fixed by #689\n. It is unclear to me why this is failing the unit tests. I'll have to do some experimentation before I consider merging it.\n. I'm good with it being merged!\n. I merged this but then I undid it.\nI guess I should have checked more thoroughly before I merged but...\nconsider Crypt/DES.php for instance. It's dinging us for having excessively complex code and while I agree that it kinda is, the code also yields performance gains of 25%. See the discussion here:\nhttps://github.com/phpseclib/phpseclib/pull/94#discussion_r4013686\nAnd a lot of the variables come from the reference implementations for DES / whatever. eg.\nhttp://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf#page=14\nAltho it'd be nice if they used more descriptive variables sometimes people just don't and if what you're doing is mostly an adaptation of the algorithm's base implementation than idk that changing variable names is a good idea.\nI think static code analysis can be a good thing but it's results have to be taken in stride with everything else and in lieu of that idk that I like the idea of displaying a red (ie. broken badge vs. a green \"working\" badge) when some of the things it flags are arguably not even issues that ought to be \"fixed\".\nThat said, I did send codeclimate.com an email tho about it misidentifying similar pieces of code as being identical when they're not. Hopefully it helps :)\n. Does this branch fix the issue?:\nhttps://github.com/terrafrost/phpseclib/tree/ssh2-global-request\nThe commit: https://github.com/terrafrost/phpseclib/commit/b59d821bbe8ad4f976ecf8f8c98b72d64327b9b8\nThanks!\n. Post your SSH2.php file then. Or rather post a pastebin.org link to it.\nI made my change based on the fact that line 2826 in v0.3.10 deals with parsing SSH_MSG_GLOBAL_REQUEST packets:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.10/phpseclib/Net/SSH2.php#L2826\nBut then I don't even know that you're using v0.3.10. In-so-far as I know, you could be using the 2.0 branch, an older version of the 1.0 branch, or you could be using some version you downloaded straight from github.\nSomething else that could provide some insight...  post SSH logs. eg. do define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); after you include Net/SSH2.php (assuming you're using the 1.0 branch) and then later do this:\nphp\necho $ssh->getLog();\nAnother possibility. Maybe the error message you're getting looks the same but the line numbers are different. ie. in that scenario the fix I proposed did fix the issue you were having and now you're having another issue. So if you could also repost the error message that you're getting that'd be helpful too.\n. Thanks! I'm about to head out for a little bit but I'll try to take a look when I get back.\n. I made another update to that branch if you want to try it out. Diff:\nhttps://github.com/terrafrost/phpseclib/commit/684d6eed0e2fc3045c9169685ce135a14474abef\n. It's not entirely clear to me how to interpret that graph. The y axis represents the number of read iterations. At least on the right hand side it does. What do the numbers on the left hand side signify? And what does the x access represent?\nAnyway, read() makes calls _get_channel_packet() in a while loop. The size of this packet can be influenced by the window size (server to client), which can't really be controlled by the client, and the packet size, which by default, is 0x4000 or 16,384.\nMy guess is that the problem is with the window size. I've seen SSH servers start off with a big one and just gradually throttle it down to a very small number. Older versions of phpseclib had issues with calculating the window size but 0.3.10 (or the latest git version) should remedy those issues.\nAnyway, to make any definitive diagnosis, logs would help. Maybe just 10mb of logs idk. If you could get those and send them to me, somehow, that'd be helpful. If they're small enough you can put them in a pastebin. If they're too big you can email them to terrafrost@php.net.\nThanks!\n. Well I'm not seeing any packets that'd change the window size in the log that I got. It's not showing the initial channel opening packets either so idk what the initial packet sizes or window sizes are. I guess I could modify phpseclib to log specifically that instead of all the raw data but...\n\nMore interestingly it looks like the ASA finishes sending the data to phpseclib in ~12 seconds of actual transfer time (running command and sending output back). Then in the packet capture there is no traffic for ~28 more seconds while PHP is in that while(1) loop doing the _get_channel_packet() piece.\n\nPresumably if there's no traffic for ~28 seconds the script isn't stuck in the while loop - presumably it's blocking. Maybe on the fread() in _get_binary_packet(), which in turn, is called by _get_channel_packet(), or maybe the stream_select() in _get_channel_packet(). But blocking either way.\nThe way this paragraph is describing the problem makes me think that the problem may be that what read() is expecting is wrong. Maybe the case is wrong or maybe you think you're passing in a regular expression when you're not. Can you post the code that you're using?\nThanks!\n. That makes sense. Can I ask what you're using as the regular expression? If it's something like a.*b then there could in theory be 500,000 bytes between a and b. But maybe I could just add a disclaimer to the comment saying that the regular expression is only checked against the last 1,000 bytes or so.\n. I like it with the caveats I mentioned in-line in the diff. If you could address those that'd be awesome - thanks!\n. Err...  I forgot the md5 lol. Should be this:\nphp\nsubstr(chunk_split(md5($RSAPublicKey), 2, ':'), 0, -1);\nTime permitting I may do this myself later tonight.\n. The md5 and sha256 formats differ already so idk that adding more would be a good thing, lest we just be guessing as to which format the new hashes ought to be in.\nAnyway, I've merged this.\nThanks!\n. phpseclib is trying to initialize the SFTP protocol by sending a SSH_FXP_INIT per http://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#section-5.\nThe last 00:00:00:03 represents the version phpseclib is supporting - v3. See http://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#section-5.1\nSo it sounds to me like the server just doesn't support SFTP.\nSCP is a distinct \"protocol\" from SFTP. SCP CLI clients may implement themsevles with SFTP but if they're doing SCP it's a different thing.\nCan you connect via SFTP (not SCP) to this server with any other client? In particular, can you use PuTTY's psftp and if so could you get me logs from it?\nYou can enable logging by going to PuTTY->Session->Logging and checking the \"SSH packets\" radio button. Then save the session and then go to psftp and load the session by doing something like \"psftp -load sessionName\" or something.\nWhat I'm kinda wondering is if the server would be so trigger happy to kill the connection if the client claimed it was SFTP v4 (or v5 or v6) from the get-go vs advertising v3 the whole way through.\nThanks!\n. It doesn't look like you actually used psftp to connect.  Looks like you just tried to open a shell with PuTTY. You'll need to save a session with logging enabled and then do psftp -load sessionName via the CLI. So if you could do that that'd be helpful.\nAs is I don't think there's anything I can do. The PuTTY thing is a shot in the dark but it's still worth a shot. And even if PuTTY  did work with SFTP v4/5/6 then I'd still need to implement SFTP v4/5/6 so a fix wouldn't be immediately forthcoming.\n. This is something I want to do, but there are lots of other things I want to do w.r.t. phpseclib as well. Realistically speaking, it'll probably be years before some of these are implemented. Unless, of course, someone wants to pay me $50,000 or something. At that point, I'll take a few months leave from my employer and will get started right away!\n. ```\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey('...'); // public key\n$plaintext = '...';\n// without the following line PSS mode will be used, which is more secure but less interoperable\n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$ciphertext = $rsa->encrypt($plaintext);\n$rsa->loadKey('...'); // private key\necho $rsa->decrypt($ciphertext);\n?>\n```\nYou can specify the hash with $rsa->setHash('sha256') or whatever but it does sha1 by default.\n. Your code looks wrong.\nphp\n// Set signing signature \n$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1); \n$hashed = $hash->hash($plaintext); // Hash plaintext using SHA1\n$encrypted = $rsa->sign($hashed); // Sign Data\n$signature = base64_encode($encrypted); // Encode to base64 the signed Data\nWhen you call $rsa->sign() a (by default) sha1 hash is made. So right now $signature isn't a signature of $plaintext - it's a signature of $hashed.\n. @y060121 - does http://stackoverflow.com/a/11951114/569976 do what you're want to do?\n. @khanmuhammad - please provide some sample code.\nIn this topic there have been two stand alone code snippets posted. I posted one and JAYSONLACSON posted one.\nMine doesn't work without modification because I'm using ... as placeholders for the actual keys. If you replace the ...'s with actual keys it does work. I tried it on PHP 7.1.4:\n```php\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->loadKey('-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0\nFPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/\n3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB\n-----END PUBLIC KEY-----'); // public key\n$plaintext = '...';\n// without the following line PSS mode will be used, which is more secure but less interoperable\n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$ciphertext = $rsa->encrypt($plaintext);\n$rsa->loadKey('-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp\nwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5\n1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh\n3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2\npIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX\nGukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il\nAkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF\nL0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k\nX6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl\nU9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ\n37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=\n-----END RSA PRIVATE KEY-----'); // private key\necho $rsa->decrypt($ciphertext);\n```\nAnd JAYSONLACSON's code...  his code just looks wrong per https://github.com/phpseclib/phpseclib/issues/686#issuecomment-104914673 . I mean, maybe it isn't. Maybe it really is doing exactly what he intended - I can't say. But my guess is that it isn't doing what he intended.\nAs for your code...  well you haven't posted any. So it is not exactly clear what you are talking about when you use the pronoun \"it\". In light of this, I would suggest you post some code. And do so in a new ticket. This one is closed and has been for almost two years. This makes it easy for replies to this ticket to get lost.\n. See https://github.com/phpseclib/phpseclib/pull/692\n. I don't know why https://github.com/terrafrost/phpseclib/commit/e3d251ac5735ec9a19cb7e1df5f89cb7880f25a1 is showing up as a commit..  that change isn't in the final README.md file:\nhttps://raw.githubusercontent.com/terrafrost/phpseclib/rsa-none-2.0/README.md\nAnd none of the other commits that github is showing as new undo that so it seems like it should be in the latest commit's version of README.md but it isn't...\n. I think you posted this on stackoverflow as well lol:\nhttp://stackoverflow.com/a/30489896/569976\nAnyway, what version of phpseclib do you have installed locally on your mac vs on the CentOS AWS instance?\nI just tried it on my local copy (latest Git version) and it worked just fine:\n``` php\n<?php\ninclude('Crypt/RSA.php');\n$key = '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYwTO/CJJQ8vbwTRQRWmOS0Pbz\ntFCks4RhmPxYANSQV5V9Qy+QSupewn2WAb7zV04r4RqtwxB7stDMbK+uPY+GYR5M\nmoQuT0YStJ6TXJjiF8i1Y+DBGLnTXOD36y93V8DpuFWMxMYtROskE+Mx1W70+VTZ\nEM6k+jvIfzRJoVDqswIDAQAB\n-----END PUBLIC KEY-----';\n$rsa = new Crypt_RSA();\n$rsa->loadKey($key);\necho $rsa->getPublicKey();\n``\n. Yah -mbstring.func_overloadwould definitely cause problems. phpseclib works with binary data a lot. It assumes thatstrlen($str)returns the number of bytes in$str` instead of the number of \"gylphs\", etc.\nMaybe I should add a check for this in phpseclib and have it throw an exception or some such when mbstring function overloading is enabled..\n. Can you post a copy of the CSR? Or at least a similarly formatted one?\n. https://github.com/terrafrost/phpseclib/commit/d3a5398fe4a84ab3dd6f36e2bdee7c6ab1534f05\nI believe that commit should fix the issue for you. I'll submit a pull request tomorrow - need to add a unit test too.\n. Could be an issue with you not having permissions. I'd check the error logs. eg.\nphp\nvar_dump($sftp->getSFTPErrors());\nFailing that maybe enable packet logging by doing define('NET_SFTP_LOGGING', NET_SFTP_LOG_COMPLEX) before you declare Net_SFTP but after the require_once and post the results.\nWe may need to look at the SSH layer too but let's look at the SFTP layer first.\n. I think this would be better suited for when the SSH2 API is revamped as proposed here:\nhttps://github.com/phpseclib/phpseclib/issues/479#issuecomment-61917716\nThis would be for a major release however as it'd be a BC breaking change. So it wouldn't be in either the 1.0 or 2.0 branches but maybe 3.0 or 4.0 or whatever.\n. I think I've found the commit that removed these changes: 8fae19a02470463ddb8ac29cfd644a9918a8ae30\nHere's a copy of Crypt/RC4.php from the commit before (Jan 1, 2015):\nhttps://github.com/phpseclib/phpseclib/blob/4766973e6104ec7c32983a3718951125801c20ca/phpseclib/Crypt/RC4.php\nHere's a copy of Crypt/RC4.php from the commit in question (Jan 3, 2015):\nhttps://github.com/phpseclib/phpseclib/blob/8fae19a02470463ddb8ac29cfd644a9918a8ae30/phpseclib/Crypt/RC4.php\nThe diff doesn't show any changes being made to Crypt/RC4.php and yet Crypt/RC4.php is different before and after the commit.\nI mean maybe a merge could have caused the issue but then there should be a \"merge\" commit between those two commits and there isn't. Maybe merge --rebase was used? idk too much about that tho.\nDoes anyone have any ideas as to what's going on here?\n. That makes sense - thanks!\n. #707 did not fix the issue for me but #721 / #722 did. \nThe next to last post suggests that the following is an issue as well:\n18:d=3  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption\n   29:d=3  hl=2 l=   0 prim: NULL              \n...\n  124:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption\n  135:d=4  hl=2 l=   0 prim: NULL              \n...\n  609:d=2  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption\n  620:d=2  hl=2 l=   0 prim: NULL\n721 / #722 do not address that - I'll do another PR for that I guess.\nI'm not sure what the \"SubjectAlternativeNames type/content issue\" is?\nAlso, how many issues are we at in this ticket? There's the one with rsaEncryption. There's the sha256WithRSAEncryption and maybe some issue with SubjectAlternativeNames. Is that it?\nIf you're going to include multiple issues in the same ticket maybe edit the first post and if you can't or don't feel that's appropriate or whatever maybe create whole new tickets.\n. metaclassing's subjaltname stuff is interesting but atm there's not really an \"official\" way to utilize non-domain subjaltname's. Maybe that'll change but in the interim I think all the bugs this ticket brought to light have been fixed.\nThanks!\n. I'll try to review this within the next few days - thanks!\n. Replaced by #721 / #722 / #723 / #724\n. I apologize for the tardiness of this response.\nAnyway, presumably all but the last certificate help establish the cert hierarchy from the CA cert. In this case you should be able to do something like this:\n``` php\n<?php\ninclude('File/X509.php');\n$certs = '-----BEGIN CERTIFICATE-----\nMIIFXjCCA0agAwIBAgIBBDANBgkqhkiG9w0BAQsFADAfMR0wGwYDVQQDDBQuU2Vj\ndXJlIFJvb3QgQ0EgMjAxNTAeFw0xNTAyMjAxNDQ4NTFaFw00NTAyMjAxNDQ4NTFa\nMB8xHTAbBgNVBAMMFC5TZWN1cmUgSXNzdWluZyBDQSAxMIICIjANBgkqhkiG9w0B\nAQEFAAOCAg8AMIICCgKCAgEAsAKpwyqT7jkFHP+34im2GOeAPsLKWTt7SQhWGhTF\nKQxpVob4ngGaF5Zup3IC7CBi5MmFcKxTv1VWjbBtOU7PNmzxoCl8faZuWDKAXD8G\nJ/7Z07PzF9DDP8uiYbCttAQjxJJqcFVwsor/VR+LFpi0NsxjP/UNTLYbFidoKLY5\nFdzPvZ82SVyJorERuaaZXvb6ZmuVZMfvMekANWcNX9tNdx1wvAqThtk6qiB2U4dy\nZMnGnLqUgDF7kL6IdsW7HMNG5GqiTrTiBnvkIwHFAWF0bN6TXt8JCCUcc7p5uOT9\nyniVisJwK6+LyDlMuFvGrhOEm4TzvZHfegVmf/Nqz3Qb6m32+pmsyvKZ5AwpLpIQ\nhMQJ2Ha9IPtNqjO4FI+aZTAt7kz5HPeetF2VDSeH5LhiKBeFujfpWqt4YExMOwdL\nmUAbEM9M7SnfgIiZaNSRdXxkhL6veol9tTAIOX8TKQZh/cgZsonftk3JFlg6ytyu\n7XtDGQnE7dq8xiJXhsdR4X/nZfagti/rCp7f+n2JtYgD5CXNHwVG0fHjbaht9v56\nzdDucq8bUp61bPYBJGvMoIJ+DIn95/vq9XBmcU1DjEKffWn9sWflpAhSLGVWdfmU\nTaQMprQxSdji8Hdu2j5lSnKN5MnVMwVW1lxI8ltrAu8ReQt4QQ2tUyNoPpJRru7/\nCN8CAwEAAaOBpDCBoTALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNV\nHQ4EFgQU4lZUJfimhlIHN6aCKF/10CEU0ckwQQYDVR0fBDowODA2oDSgMoYwaHR0\ncDovL2NybC5TZWN1cmVPYnNjdXJlLmNvbS8/YWN0aW9uPWNybCZjYT1yb290MB8G\nA1UdIwQYMBaAFGo6az6NV9j1vxWvcP+jSV5o0PGUMA0GCSqGSIb3DQEBCwUAA4IC\nAQAbk/P7ioLsmhc0Y/n7OyuVe7+QxkHcqwD41AP2h14vicjfwA2MS/mQPCyazf14\nih7497H7o6yIHAAn74QJjeOJVaHlx7aTBnBSzSMWo1howOPE5M81N5QLYHKe4D3j\nS9X1r5zfVs0q3/d9ol5kEvaAH7pjyuyrHANC7R0ft5a4K2NyGjUMVs8vpprnOiCb\nqOWnFms6wx3Oo1C3wahRVvD9mTwyPKxircWcnDWDMhTw6QXzQV1NdIbP6dYpxjjJ\nUnSrKuuv7doDNjeTJJ5g+fB8qEQWNwl6Ss2WhU3kaNbpugQ0YPjB05ajmBleEyzk\nV8vbPRlHu4Zkrqn0e0kdPKABuwo5nb7U5TEw+sqVlPWBEwPnztb/t4Qq6Q8//0j/\nriuRAQGAs7ioPzyKNC51G8kRgHbaiWArAD44ydb7was810PwhQ2duwAyDGRqGZB+\n5LDYcUUOnqKDwo9jbV88khBN4QZj42wqsVlALEmmqPhUJKvCMpion1csBcJ5jLui\n3DesfHn1wFD38/BVG1f6xrKNWQ01eZy+Yip+B39H0qodqHU2Rsjn7JPCqA5zHjoJ\nbNcxZmcs3vBmVyVPcpx4x5NDOLUu6LAYgJ0yNDmb189X6gt0FJAGkBIrhOJyh/nz\ns993S4YGqxrPpCUI0kTEJUhxIhYPP9b/s3WDIlbkVUpP/g==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIBATANBgkqhkiG9w0BAQsFADAfMR0wGwYDVQQDDBQuU2Vj\ndXJlIFJvb3QgQ0EgMjAxNTAeFw0xMjAyMjExNDM5MjVaFw00ODAyMjExNDM5MjVa\nMB8xHTAbBgNVBAMMFC5TZWN1cmUgUm9vdCBDQSAyMDE1MIICIjANBgkqhkiG9w0B\nAQEFAAOCAg8AMIICCgKCAgEAl+Z95uSw9PpsIo0U8u0XS45H/MNDsVmrMTsgglPh\nZt7eihcAHQqzGsR5q5zF7MCNLyf52xDQeXOiXdO/g/pmri+8cMOW2EbgMqFvH5HL\nCwzVkO5S8QAzyqn0Tz0f7VkAJZv3zyoezete05rFc1zg/QznIHKUk4SqfEZiGMre\nw/QLw649m5Q7xSYV2jBK4glp2szP81ZWe4/dcj4Bzx2ZWmReDTFeJ6kXchIQJT0S\nvmUzjIwQ9s0reiTgAeSlxec0Ibm84C1y9gsqs001egYMc+WDpBVRNk+W/FzHPieD\n1zLLRnQplvkGF92uV7qdVfeDiaMfgqxqFR9wC4q2c9nb760zKOMnG6CywsoNAdok\nOPJr1DG9WA0cFJcvzVzu7tQUlt7PahOd77yuy2kJvI5PcJE0QjmJpsDOop5XHf4D\nRqlIvrxyG4ePnsy4Hec007BcSMeHjrWwYE2aU1B+B0Cj6ntR+t3eIcbvwGeXkWI4\nO01OniZre14sEPBI/wD3mZc8JtxBwr3sArJWL46Z5uRGihWMun2JSEIHObZYJp7n\noZzg4s30BaYovgZYIYA/6JHhPIDRd/tnSSQtzqVIE+WMocAEYmwW0/6SsRKeDy51\nEd2+TXMbVpb1k+ZNHTQa5i3FUvyWFDEiKKvcqRJuL5SAuv8J9h0DBr0FKrmObw2X\nPdUCAwEAAaNgMF4wCwYDVR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O\nBBYEFGo6az6NV9j1vxWvcP+jSV5o0PGUMB8GA1UdIwQYMBaAFGo6az6NV9j1vxWv\ncP+jSV5o0PGUMA0GCSqGSIb3DQEBCwUAA4ICAQBPO8zjkS4LqXKa20nSakBZge0q\nUgEbPMJ6jE3TPcVFJwtsxb8EynMYuIQf+LqcPAG8wf7HzQc9X8YIza10E8w7t++H\nj4FsxxMDWG8X9AwRKjSleE3+JWiyDk1pFCMPsoFDjmAcZWV2I7lq4N4kFqkhWNQM\nrz4n05UsA775sg/ikHvu3VjwNVjtHB4CIeH0x3HxHsKlg4nCTkpcc8OgcYWlGfPu\nrx0k22nzbwYpHXwS+nV19Ab0J/xWJjQK6SpPQXA/+ehokWuyKKLCRZ1E/2MpNy7j\n3P9/K76ILr/ZEapNl6IygEi+8LcL+Q3ejxnphJRRCmrendFWThTS8Y5ha9GMqQNh\noC7Jn/uWItfgCGkad39m63wm6BNJ2grQ1P/J2yBumJyaUHE+xXDmgdfFW0VNwEyz\naYp0DUpXeylNJ5A2Dbcw8KGM2CTUWVg8K9KEJl+QjPbQ57gP8AmfFbVcoA3wzS3N\nv7o1YhsilEDKtAVYPrN0YadgY3P3YSoUXHZpns11CWfFglC28WWBDa5c7SeSwSBF\n4eH8VP45TpwtDUomMl8WDUg/yYiS/ATGGi16qkfMNxe8gXqRBJM6w4WYbJaRIhOj\nfrGzuJOMXnLuv6PjY/yQv0a68jHAftktj++IV3YpGR9RJnHCvTzR7O5BceRAteH6\nq/Pr+MqghoTTo405PA==\n-----END CERTIFICATE-----';\n$certs = preg_split('#-+BEGIN CERTIFICATE-+#', $certs);\narray_shift($certs);\n$x509 = new File_X509();\nfor ($i = 0; $i < count($certs) - 1; $i++) {\n    $x509->loadCA($certs[$i]);\n}\n$x509->loadX509($certs[count($certs) - 1]);\necho $x509->validate() ? 'valid cert' : 'invalid cert';\n```\nThe certificates in this example don't form a certificate chain but, none-the-less, that's how I'd recommend doing it if they were.\n. So instead of just silently failing when File_X509 tries to load multiple concatenated certs your change has it silently discarding all but the first cert.\nloadCA() being able to load multiple certs instead of having to have them fed into it one-by-one seems like that could be useful. For loadX509() I think it'd be better if a false continued to be returned when an attempt to load multiple certs was made but also an error returned (or thrown once exceptions are implemented). \n. No - this fixes some issues that I was emailed about - #706 still needs to be looked at.\n. Honestly, my guess is that it doesn't have anything to do with PHP 5.6 but rather the window size. I'd (1) try the latest git version of phpseclib. If that doesn't work for you lmk. The link:\nhttps://github.com/phpseclib/phpseclib/archive/1.0.zip\nHere's the specific commit that I think may fix the issue for you:\nhttps://github.com/phpseclib/phpseclib/pull/538\nI don't have time to look through the logs right now. I'm at my regular 8-5 day job right now and altho I can spend some time making posts like this I can't spend my entire day diagnosing issues and what not.\n. From your log file:\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1995, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:00:ff:ff:ff:ff:00:00:80:00  ................\nThe initial window size is 0xFFFFFFFF. Since PHP uses signed integers that gets read as -1. eg.\nphp\nextract(unpack('Nsize', \"\\xFF\\xFF\\xFF\\xFF\"));\nThat'll produce a variable - $size - that's equal to -1.\nAnyway, try this:\nhttps://github.com/terrafrost/phpseclib/archive/neg_window_size_fix-1.0.zip\nThe commit:\nhttps://github.com/terrafrost/phpseclib/commit/c0555581e755b68d0d2019a5fb2a7b15f2fff50a\nThanks!\n. Yup - exactly. Quoting http://php.net/manual/en/language.types.integer.php,\n\n64-bit platforms usually have a maximum value of about 9E18, except for Windows, which is always 32 bit.\n\nSo my guess is that you're running Windows but maybe you have a weird Linux install too idk.\nLike on an Ubuntu 15.04 machine extract(unpack('Nsize', \"\\xFF\\xFF\\xFF\\xFF\")) produces 4,294,967,295 but on my Windows 8.1 laptop I get -1.\n. Looks good to me!\n. Added some feedback. Otherwise the change looks good!\n. It's probably doing diffie-hellman-group1-sha1 preferentially over diffie-hellman-group14-sha1 for speed purposes. Sure, group14 is faster but if it takes 4x as long (ie. 10 seconds to 40 seconds) it might be worthwhile to do the less secure approach.\nI guess what'd be good is benchmarks of each of the dh methods with the worst possible BigInteger setup (eg. internal mode BigInteger without the OpenSSL enhancements). If one is slower than the other by 10% it's prob not a huge issue but 400%...  that's a bit harder to miss.\n. > Maybe the order should be changed based on the BigInteger engine. More complex, but probably more secure in the default case.\nI agree - that would be good.\n\nLet's get this merged and then release 0.3.11?\n\nThe next release of the 1.0 release is 1.0 since OpenSSL support has been developed into the symmetric key algorithms.\nI'd like to do a concurrent release of 2.0 as well. Last time I did a release I tagged the 2.0 branch with a release version but that tag got undone. Are we going to start doing releases of 2.0 and tagging them accordingly? Or is the idea that the 2.0 branch will be tagless?\n. Yah - this PR is fine.\nFor PSR2 (this might be better in a separate discussion) maybe we can replace the var's with public's instead of protected / private.\nhttp://aperiplus.sourceforge.net/visibility.php explains why private shouldn't be used and calls into question the virtue of using protected (eg. it's solving a problem that was never a problem to begin with). Plus, in the case of phpseclib, it could actually break things. Net/SCP.php calls methods that are prefixed with underscores and denoted as being private via the phpdoc comments. And sometimes I'll tell people to use \"private\" methods as workarounds. Asking people to modify Net/SSH2.php as a prerequisite to run diagnostic code would slow things down and in some cases could make it so I couldn't get any sort of feedback at all.\n. Well it's not an issue with SSH-2.0-OpenSSH_6.7p1 Ubuntu-5ubuntu1. I edited the /etc/motd file, set PrintMotd to yes in /etc/ssh/sshd_config and restarted OpenSSH and was able to see the MOTD just fine with the following:\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('127.0.0.1', 4022);\n$ssh->login('ubuntu', 'big1word');\n$ssh->setTimeout(2);\necho $ssh->read();\n```\nSo that establishes that the MOTD is working. When I SFTP in I don't see the MOTD at all. Not even in the log files do I see it being sent. Which makes sense since SFTP doesn't really provide a mechanism for extraneous information like that to be sent. SSH provides for a banner message to be sent (as your post notes) but that's distinct from the MOTD.\nI am also unable to install proftp via apt-get via Ubuntu. http://www.liquidweb.com/kb/how-to-install-and-configure-proftpd-on-ubuntu-14-04-lts/ suggests that on 14.04 I should be able to do sudo apt-get install proftpd but that doesn't work.\nIn lieu of that...  can you get me log files?\n. @xaled1 :\nWhat version of phpseclib are you using? The cache'd Google thing is from 2015. phpseclib has had quite a few releases since then.\nAlso, any particular reason why you can't post your own log files? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog();.. I meant to do this for the 1.0 branch - not for the master branch.\n. Looks good to me!\n. Looks good!\n. I'm not really sure how we'd test this without calling \"private\" members of Net_SFTP...\n. I'm okay with most of the changes but...  some of the changes take lines like this:\nphp\ndefine('CRYPT_HASH_MODE_INTERNAL', 1);\ndefine('CRYPT_HASH_MODE_MHASH',    2);\ndefine('CRYPT_HASH_MODE_HASH',     3);\n...and replace them with this:\nphp\ndefine('CRYPT_HASH_MODE_INTERNAL', 1);\ndefine('CRYPT_HASH_MODE_MHASH', 2);\ndefine('CRYPT_HASH_MODE_HASH', 3);\nIt does that in a number of places and I don't think that's an improvement. I mean, I don't think it's a huge imparement, either, but I do think it's a mild imparement to the readibility of the code.\nAlso, stuff like this:\nphp\n                    case \"\\x1B[H\": // Move cursor to upper left corner\n                        $this->old_x = $this->x;\n                        $this->old_y = $this->y;\n                        $this->x = $this->y = 0;\n                        break;\nChanging that to this:\nphp\n                    case \"\\x1B[H\":\n                        // Move cursor to upper left corner\n                        $this->old_x = $this->x;\n                        $this->old_y = $this->y;\n                        $this->x = $this->y = 0;\n                        break;\nI don't think that's a good change. Previously it was clear that \"move cursor to upper left corner\" applied to the whole case statement. Now it's unclear. Does it apply t othe whole case statement or just the $this->old_x = $this->x line?\nIf comments need to be on their own line this would be better:\nphp\n                    // Move cursor to upper left corner\n                    case \"\\x1B[H\":\n                        $this->old_x = $this->x;\n                        $this->old_y = $this->y;\n                        $this->x = $this->y = 0;\n                        break;\nAssuming it's even necessary to begin with.\nAlso...\nhttps://github.com/bantu/phpseclib/commit/edc948c317deed1b506066f3973a5b3016ca3843#diff-6fc70cd3cd3475a879577a0757ead792R376\nidk that that's a good change. Sure, it may be bringing it more in-line with PSR2 but it's blowing up 16 lines into 48. ie. it's tripling the size. And altho I don't think concise code is always an improvement I think sometimes it is. Larger code snippets are more likely to intimidate people and make them gloss over that whole block of code. And in the process they may bulk ignore other stuff too.\nI'm still reviewing the change.\n. Old:\nphp\n                    case $decoded['type'] < 18: // FILE_ASN1_TYPE_NUMERIC_STRING == 18\n                    case $decoded['type'] > 30: // FILE_ASN1_TYPE_BMP_STRING == 30\nNew:\nphp\n                    case $decoded['type'] < 18:\n                        // FILE_ASN1_TYPE_NUMERIC_STRING == 18\n                    case $decoded['type'] > 30:\n                        // FILE_ASN1_TYPE_BMP_STRING == 30\nDo not want.\nOld:\nphp\n                for ($j = 1; ($temp >> $j) & 1; ++$j);\nNew:\nphp\n                for ($j = 1; ($temp >> $j) & 1;\n                ++$j) {\n                }\nidk that I'm a big fan of adding {}'s for otherwise empty for loops but I can live with that (hence why I didn't mention it in my last post). But having the ++$j on it's own line? That doesn't even make any sense.\nOld:\nphp\n        for ($i = 0; $i < count($encryption_algorithms) && !in_array($encryption_algorithms[$i], $this->encryption_algorithms_server_to_client); $i++);\nNew:\nphp\n        for ($i = 0; $i < count($kex_algorithms) && !in_array($kex_algorithms[$i], $this->kex_algorithms);\n        $i++) {\n        }\nIf PSR2 has the third part of for loops be on it's own line I'd rather us just remove all for loops and replace them all with while loops.\n. Any update on this? Per https://github.com/phpseclib/phpseclib/pull/714#issuecomment-119139352 it seemed like we were on track for a new release pending this.\nSo to recap, there are three types of changes I had issues with.\n1. Some white space changes. To remedy this we can either (1) add @codingStandardsIgnoreStart before and after as is done at https://github.com/phpseclib/phpseclib/blob/d75f703c0ae93dbd99dab5c259c98f47759c87af/phpseclib/Math/BigInteger.php#L3293 or we could (2) make an exception to this in code-sniffer-ruleset.xml. I think the first option would be the best.\n2. Comments on their own lines. We can (1) add an exception to this in code-sniffer-ruleset.xml or we can (2) move comments to the line above instead of the line after. I'm in favor of option # 1.\n3. For loops having new lines introduced in the middle of them. This is probably a bug in the syntax changer so we just gotta remove it from the commit!\n. > The for loops in SSH2 we should probably replace with a method as all loops basically do the same thing and this likely is not performance-critical.\nI have no objection to that. Feel free to do a PR?\nRegarding https://github.com/bantu/phpseclib/commit/8524560ccafc9db3b9a999a7538584a1576cba0e ...  see point # 1 in https://github.com/phpseclib/phpseclib/pull/732#issuecomment-121436452 .\n. So I guess PSR2.Methods.FunctionCallSignature.SpaceAfterOpenBracket is making it so this is invalid?:\nphp\nfor (...){\n...and instead this has to be done?:\nphp\nfor (...) {\nI have no issue with that one.\nIt seems like Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma is the one I'm disagreeing with more. Mainly for the define()'s tho. I don't think it's a huge issue for rightRotate and rightShift since, in those cases, the only difference is a single space. Doing @codingStandardsIgnoreStart would be good for that.\n. Looks good!\n. Looks like you're running 0.3.10. This issue has been fixed in the latest Git version. In particular, with PR #674\n. I think this branch should fix it (1.0):\nhttps://github.com/terrafrost/phpseclib/tree/another-stat-cache-update-1.0\nThe commit:\nhttps://github.com/terrafrost/phpseclib/commit/41e72e71f9b2979774d8fc2a1d2df19ac6eadd6a\n. How do I squash commits? I did the following:\n```\ngit rebase -i HEAD~10\npick 52aeb2e Tests/SFTP: add unit test\npick c460e51 SFTP: update how recursive delete's update stat cache\npick 5a3315a Scrutinizer CI: Unconfigure external code coverage. This keeps timing out.\npick 109ae38 SFTP: don't update stat cache when it's been disabled\npick abeda52 Add support for RFC 4419: diffie-hellman-group-exchange-sha{1,256}\npick 41e72e7 SFTP: stat cache updates\nsquash fe05dbd Tests/SFTP: add unit test for last commit\nsquash 66a7f4a SFTP: add additional stat check\nsquash 36b6324 SFTP: syntax error\nsquash eab2740 rm accidentally added commit message file\nsquash 16b18c4 Tests/SSH2: change assertEquals to assertSame\n```\nI did git log and verified that the commit's had been squashed and then did git push origin another-stat-cache-update-1.0. That gave me the following:\nTo https://github.com/terrafrost/phpseclib.git\n ! [rejected]        another-stat-cache-update-1.0 -> another-stat-cache-update-1.0 (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/terrafrost/phpseclib.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nI then tried this:\ngit push origin --delete another-stat-cache-update-1.0\ngit push origin another-stat-cache-update-1.0\nAnd now github.com is saying the branch has been deleted and isn't seeing the new (identically named) branch?\nI'll just do another PR meh.\n. It's hard to imagine a use case where people would need to do an expect() on > 1,024 characters. Per the benchmarks in #670 without a fix like this it takes 30 seconds for 500,000 of data without this commit vs. 1 second with it. So if people were using expect() on more than the last > 1,024 characters you'd expect there to be more bug reports about phpseclib / expect being slow but there aren't.\nIt is a bit of a guess tho. I figure with this if people are using it with more than the last 1,024 characters and they've just been tolerating slowness they can file bug reports after the feature is in all the branches.\n. I'll keep that in mind in the future. Thanks! I'm assuming this PR is a-ok?\n. The latest commit adds @throws to the docblock comment and replaces the user-defined exceptions with SPL exceptions.\n. In case anyone is curious Laravel throws a mix of SPL Exceptions and custom exceptions. Here's the (annotated) output of grep -r \"throw new\" (non-SPL exceptions have **'s prepended before them):\n./tests/View/fixtures/section-exception.php:<?php throw new Exception('section exception message') ?>\n** ./tests/Routing/RoutingRouteTest.php:        $router->get('foo/bar', function () { throw new Illuminate\\Http\\Exception\\HttpResponseException(new Response('hello')); });\n./tests/Queue/QueueWorkerTest.php:        $job->shouldReceive('fire')->once()->andReturnUsing(function () { throw new RuntimeException; });\n./tests/Queue/QueueWorkerTest.php:        $job->shouldReceive('fire')->once()->andReturnUsing(function () { throw new RuntimeException; });\n./tests/Queue/QueueSyncQueueTest.php:        throw new Exception();\n./tests/Database/DatabaseConnectionTest.php:            $mock->transaction(function () { throw new Exception('foo'); });\n./tests/Cache/CacheDatabaseStoreTest.php:            throw new Exception;\n./src/Illuminate/View/View.php:        throw new BadMethodCallException(\"Method [$method] does not exist on view.\");\n./src/Illuminate/View/FileViewFinder.php:            throw new InvalidArgumentException(\"View [$name] has an invalid name.\");\n./src/Illuminate/View/FileViewFinder.php:            throw new InvalidArgumentException(\"No hint path defined for [{$segments[0]}].\");\n./src/Illuminate/View/FileViewFinder.php:        throw new InvalidArgumentException(\"View [$name] not found.\");\n./src/Illuminate/View/Factory.php:            throw new InvalidArgumentException(\"Unrecognized extension in file: $path\");\n./src/Illuminate/View/Engines/EngineResolver.php:        throw new InvalidArgumentException(\"Engine $engine not found.\");\n./src/Illuminate/Validation/Validator.php:            throw new InvalidArgumentException('Attribute for each() must be an array.');\n./src/Illuminate/Validation/Validator.php:            throw new RuntimeException('Presence verifier has not been set.');\n./src/Illuminate/Validation/Validator.php:            throw new InvalidArgumentException(\"Validation rule $rule requires at least $count parameters.\");\n./src/Illuminate/Validation/Validator.php:        throw new BadMethodCallException(\"Method [$method] does not exist.\");\n** ./src/Illuminate/Validation/ValidatesWhenResolvedTrait.php:        throw new ValidationException($validator);\n** ./src/Illuminate/Validation/ValidatesWhenResolvedTrait.php:        throw new UnauthorizedException;\n./src/Illuminate/Support/Traits/Macroable.php:        throw new BadMethodCallException(\"Method {$method} does not exist.\");\n./src/Illuminate/Support/Traits/Macroable.php:        throw new BadMethodCallException(\"Method {$method} does not exist.\");\n./src/Illuminate/Support/Str.php:                throw new RuntimeException('Unable to generate random string.');\n./src/Illuminate/Support/Str.php:            throw new RuntimeException('OpenSSL extension is required for PHP 5 users.');\n./src/Illuminate/Support/ServiceProvider.php:        throw new BadMethodCallException(\"Call to undefined method [{$method}]\");\n./src/Illuminate/Support/Manager.php:        throw new InvalidArgumentException(\"Driver [$driver] not supported.\");\n./src/Illuminate/Support/Facades/Facade.php:        throw new RuntimeException('Facade does not implement getFacadeAccessor method.');\n./src/Illuminate/Support/Collection.php:            throw new InvalidArgumentException(\"You requested {$amount} items, but there are only {$count} items in the collection\");\n./src/Illuminate/Session/Store.php:            throw new InvalidArgumentException('Bag not registered.');\n./src/Illuminate/Routing/UrlGenerator.php:        throw new InvalidArgumentException(\"Route [{$name}] not defined.\");\n./src/Illuminate/Routing/UrlGenerator.php:        throw new InvalidArgumentException(\"Action {$action} not defined.\");\n** ./src/Illuminate/Routing/Router.php:            throw new NotFoundHttpException;\n** ./src/Illuminate/Routing/RouteCollection.php:        throw new NotFoundHttpException;\n** ./src/Illuminate/Routing/RouteCollection.php:        throw new MethodNotAllowedHttpException($others);\n** ./src/Illuminate/Routing/Route.php:            throw new NotFoundHttpException;\n./src/Illuminate/Routing/Route.php:        throw new LogicException('Route is not bound.');\n./src/Illuminate/Routing/Route.php:            throw new UnexpectedValueException(sprintf(\n./src/Illuminate/Routing/Route.php:            throw new LogicException(\"Unable to prepare route [{$this->uri}] for serialization. Uses Closure.\");\n./src/Illuminate/Routing/Controller.php:            throw new InvalidArgumentException(\"Filter method [$filter] does not exist.\");\n** ./src/Illuminate/Routing/Controller.php:        throw new NotFoundHttpException('Controller method not found.');\n./src/Illuminate/Routing/Controller.php:        throw new BadMethodCallException(\"Method [$method] does not exist.\");\n./src/Illuminate/Queue/QueueManager.php:        throw new InvalidArgumentException(\"No connector for [$driver]\");\n./src/Illuminate/Queue/Queue.php:        throw new RuntimeException('Push queues only supported by Iron.');\n./src/Illuminate/Queue/Console/SubscribeCommand.php:            throw new RuntimeException('Iron.io based queue must be default.');\n./src/Illuminate/Mail/Mailer.php:        throw new InvalidArgumentException('Invalid view.');\n./src/Illuminate/Mail/Mailer.php:        throw new InvalidArgumentException('Callback is not valid.');\n./src/Illuminate/Log/Writer.php:            throw new RuntimeException('Events dispatcher has not been set.');\n./src/Illuminate/Log/Writer.php:        throw new InvalidArgumentException('Invalid log level.');\n./src/Illuminate/Http/Request.php:            throw new RuntimeException('Session store not set on request.');\n./src/Illuminate/Http/RedirectResponse.php:        throw new BadMethodCallException(\"Method [$method] does not exist on Redirect.\");\n./src/Illuminate/Hashing/BcryptHasher.php:            throw new RuntimeException('Bcrypt hashing not supported.');\n./src/Illuminate/Foundation/helpers.php:        throw new RuntimeException('Application session store not set.');\n./src/Illuminate/Foundation/helpers.php:        throw new InvalidArgumentException(\"File {$file} not defined in asset manifest.\");\n** ./src/Illuminate/Foundation/Validation/ValidatesRequests.php:        throw new HttpResponseException($this->buildFailedValidationResponse(\n./src/Illuminate/Foundation/Testing/WithoutMiddleware.php:            throw new Exception('Unable to disable middleware. CrawlerTrait not used.');\n./src/Illuminate/Foundation/Testing/WithoutEvents.php:            throw new Exception('Unable to disable middleware. ApplicationTrait not used.');\n** ./src/Illuminate/Foundation/Testing/CrawlerTrait.php:            throw new PHPUnitException($message, null, $this->response->exception);\n./src/Illuminate/Foundation/Testing/CrawlerTrait.php:                throw new InvalidArgumentException(\n./src/Illuminate/Foundation/Testing/CrawlerTrait.php:            throw new InvalidArgumentException(\n./src/Illuminate/Foundation/Testing/CrawlerTrait.php:            throw new InvalidArgumentException(\n./src/Illuminate/Foundation/Testing/ApplicationTrait.php:                throw new Exception(\n** ./src/Illuminate/Foundation/Http/Middleware/VerifyPostSize.php:            throw new PostTooLargeException;\n** ./src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php:        throw new TokenMismatchException;\n** ./src/Illuminate/Foundation/Http/Middleware/CheckForMaintenanceMode.php:            throw new HttpException(503);\n** ./src/Illuminate/Foundation/Http/FormRequest.php:        throw new HttpResponseException($this->response(\n** ./src/Illuminate/Foundation/Http/FormRequest.php:        throw new HttpResponseException($this->forbiddenResponse());\n./src/Illuminate/Foundation/Console/ServeCommand.php:                throw new Exception(\"HHVM's built-in server requires HHVM >= 3.8.0.\");\n** ./src/Illuminate/Foundation/Bootstrap/HandleExceptions.php:            throw new ErrorException($message, 0, $level, $file, $line);\n** ./src/Illuminate/Foundation/Auth/ResetsPasswords.php:            throw new NotFoundHttpException;\n** ./src/Illuminate/Foundation/Application.php:            throw new NotFoundHttpException($message);\n** ./src/Illuminate/Foundation/Application.php:        throw new HttpException($code, $message, null, $headers);\n./src/Illuminate/Foundation/Application.php:        throw new RuntimeException('Unable to detect application namespace.');\n** ./src/Illuminate/Filesystem/FilesystemAdapter.php:            throw new ContractFileNotFoundException($path, $e->getCode(), $e);\n./src/Illuminate/Filesystem/FilesystemAdapter.php:        throw new InvalidArgumentException('Unknown visibility: '.$visibility);\n** ./src/Illuminate/Filesystem/Filesystem.php:        throw new FileNotFoundException(\"File does not exist at path {$path}\");\n** ./src/Illuminate/Filesystem/Filesystem.php:        throw new FileNotFoundException(\"File does not exist at path {$path}\");\n** ./src/Illuminate/Encryption/McryptEncrypter.php:            throw new RuntimeException('The only supported ciphers are MCRYPT_RIJNDAEL_128 and MCRYPT_RIJNDAEL_256.');\n** ./src/Illuminate/Encryption/McryptEncrypter.php:            throw new DecryptException($e->getMessage());\n./src/Illuminate/Encryption/EncryptionServiceProvider.php:                throw new RuntimeException('No supported encrypter found. The cipher and / or key length are invalid.');\n./src/Illuminate/Encryption/Encrypter.php:            throw new RuntimeException('The only supported ciphers are AES-128-CBC and AES-256-CBC with the correct key lengths.');\n** ./src/Illuminate/Encryption/Encrypter.php:            throw new EncryptException('Could not encrypt the data.');\n** ./src/Illuminate/Encryption/Encrypter.php:            throw new DecryptException('Could not decrypt the data.');\n** ./src/Illuminate/Encryption/BaseEncrypter.php:            throw new DecryptException('The payload is invalid.');\n** ./src/Illuminate/Encryption/BaseEncrypter.php:            throw new DecryptException('The MAC is invalid.');\n./src/Illuminate/Database/Query/Builder.php:            throw new InvalidArgumentException;\n./src/Illuminate/Database/Query/Builder.php:            throw new InvalidArgumentException('Illegal operator and value combination.');\n./src/Illuminate/Database/Query/Builder.php:            throw new InvalidArgumentException(\"Invalid binding type: {$type}.\");\n./src/Illuminate/Database/Query/Builder.php:            throw new InvalidArgumentException(\"Invalid binding type: {$type}.\");\n./src/Illuminate/Database/Query/Builder.php:        throw new BadMethodCallException(\"Call to undefined method {$className}::{$method}()\");\n** ./src/Illuminate/Database/Eloquent/Relations/BelongsToMany.php:        throw new ModelNotFoundException;\n** ./src/Illuminate/Database/Eloquent/QueueEntityResolver.php:        throw new EntityNotFoundException($type, $id);\n** ./src/Illuminate/Database/Eloquent/Model.php:                throw new MassAssignmentException($key);\n./src/Illuminate/Database/Eloquent/Model.php:            throw new Exception('No primary key defined on model.');\n./src/Illuminate/Database/Eloquent/Model.php:            throw new LogicException('Relationship method must return an object of type '\n./src/Illuminate/Database/Eloquent/FactoryBuilder.php:                throw new InvalidArgumentException(\"Unable to locate factory with name [{$this->name}].\");\n./src/Illuminate/Database/DatabaseManager.php:            throw new InvalidArgumentException(\"Database [$name] not configured.\");\n./src/Illuminate/Database/Connectors/SQLiteConnector.php:            throw new InvalidArgumentException(\"Database (${config['database']}) does not exist.\");\n./src/Illuminate/Database/Connectors/ConnectionFactory.php:            throw new InvalidArgumentException('A driver must be specified.');\n./src/Illuminate/Database/Connectors/ConnectionFactory.php:        throw new InvalidArgumentException(\"Unsupported driver [{$config['driver']}]\");\n./src/Illuminate/Database/Connectors/ConnectionFactory.php:        throw new InvalidArgumentException(\"Unsupported driver [$driver]\");\n** ./src/Illuminate/Database/Connection.php:            throw new QueryException(\n./src/Illuminate/Database/Connection.php:        throw new LogicException('Lost connection and no reconnector available.');\n./src/Illuminate/Database/Connection.php:            throw new RuntimeException(\"Can't swap PDO instance while within transaction.\");\n./src/Illuminate/Container/Container.php:            throw new InvalidArgumentException('Method not provided.');\n** ./src/Illuminate/Container/Container.php:            throw new BindingResolutionContractException($message);\n** ./src/Illuminate/Container/Container.php:        throw new BindingResolutionContractException($message);\n./src/Illuminate/Console/Scheduling/Event.php:            throw new LogicException('Must direct output to a file in order to e-mail results.');\n./src/Illuminate/Console/Scheduling/CallbackEvent.php:            throw new InvalidArgumentException(\n./src/Illuminate/Console/Scheduling/CallbackEvent.php:            throw new LogicException(\n./src/Illuminate/Console/Parser.php:            throw new InvalidArgumentException('Console command definition is empty.');\n./src/Illuminate/Console/Parser.php:            throw new InvalidArgumentException('Unable to determine command name from signature.');\n./src/Illuminate/Cache/MemcachedConnector.php:            throw new RuntimeException('No Memcached servers added.');\n./src/Illuminate/Cache/MemcachedConnector.php:            throw new RuntimeException('Could not establish Memcached connection.');\n./src/Illuminate/Cache/CacheManager.php:            throw new InvalidArgumentException(\"Cache store [{$name}] is not defined.\");\n** ./src/Illuminate/Bus/MarshalException.php:        throw new static(\"Unable to map parameter [{$parameter->name}] to command [{$command}]\");\n./src/Illuminate/Bus/Dispatcher.php:            throw new RuntimeException('Queue resolver did not return a Queue implementation.');\n./src/Illuminate/Bus/Dispatcher.php:        throw new InvalidArgumentException(\"No handler registered for command [{$className}]\");\n./src/Illuminate/Broadcasting/BroadcastManager.php:            throw new InvalidArgumentException(\"Broadcaster [{$name}] is not defined.\");\n./src/Illuminate/Auth/Passwords/PasswordBroker.php:            throw new UnexpectedValueException('User must implement CanResetPassword interface.');\n./src/Illuminate/Auth/Guard.php:            throw new RuntimeException('Cookie jar has not been set.');\nI don't know that I like the idea of mixing namespace'd Exceptions and non-namespace'd Exceptions personally. For the non-namespace'd Exceptions Laravel does use RunetimeException (or whatever) at the top to avoid doing throw new \\RuntimeException but idk...  that seems unnecessary to me. But I could go either way - it's not a huge deal either way to me.\nAlso, fwiw, grep - r user_error . returned nothing. So altho SPL and namespace'd exceptions are being mixed user_error and exceptions are not.\n. Here's another version of Crypt/RSA.php with exceptions:\nhttps://github.com/phpseclib/phpseclib-php5/commit/6ff397d8562d691b5b576e227f7296ed7f6d5d21\nI did this one a while ago tho. It uses custom exceptions (unlike the last Crypt/RSA.php) and replaces returning false with throwing an exception. Per http://codeutopia.net/blog/2010/03/11/should-a-failed-function-return-a-value-or-throw-an-exception/ \"exceptions are for exceptional conditions\". Maybe some of the exceptions that even this current incarnation throw aren't \"exceptional\" but RFC3447 says errors are to be output, which is exactly what's being done.\n. You're referring to this?: https://wiki.php.net/rfc/throwable-interface\nAnyway I don't know that I see a lot of need to throw Error's vs Exception's. Seems like throwing Exception's even in an environment where Error's are now a throwable thing is perfectly fine idk. But who knows how what people consider to be PHP best practices will evolve.\n\nDoes SSH2 wrap calls to algorithms in try blocks and catch the RSA throwables just to turn around and throw a more specific SSH exception?\n\nCurrently SSH2 does not catch and rethrow exceptions. Mostly I expect people will just be doing try {} catch (Exception $e) {}. There are a few exceptions I could see people /really/ wanting to catch (\\UnsupportedAlgorithmException and \\NoSupportedAlgorithmsException) but beyond that idk that I really see an overwhelming need to catch \\RuntimeException vs \\Exception.\n. This is ready to be merged.\n. It'd be less complex from the perspective of File/X509.php but it'd be more complex overall. Math_BigInteger::random() uses a while loop to loop until a random number within the appropriate range is found. The fact that min and max for random() don't have to be multiple's of two necessitate bitmasks not be used even if, computationally, they are less expensive. In this case, however, the max is a multiple of two, so some computational complexity can be avoided.\n. #746 should let you now do this. eg.\n``` php\n// http://us3.php.net/manual/en/context.socket.php\n$opts = array(\n    'socket' => array(\n        'bindto' => '192.168.1.100:0',\n    ),\n);\n$context = stream_context_create($opts);\n$socket = stream_socket_client('tcp://example.net:80', $errno, $errstr, ini_get('default_socket_timeout'), STREAM_CLIENT_CONNECT, $context);\n$ssh = new Net_SSH2($socket); \n```\n. Looks good to me!\n. We could also remove Crypt/Hash.php all together, I suppose, and replace all the calls to it with hash() and hash_hmac() as appropriate. One thing Crypt/Hash.php does is keep track of the hash length of the selected hashing algorithm but that could be incorporated into the classes that use it easily enough as well.\nAll in all, I don't necessarily see doing this as a big benefit. I think my time could probably be better spent doing other things but if others think it should be done it can be..\n. I guess I could make it so that it just assumes that if -(\\d+) is present at the end that it does substr($hash, 0, $size / 8). Altho at that point if PHP itself added a hash like \"sha-256\" instead of just \"sha256\" there'd be problems.\nIt's also not quite as simple as just checking to see if the hash algorithm is in hash_algos() - the  hash length would still need to be hard-coded for each individual hash. The length is used in, for example, Crypt/RSA.php and Net/SSH2.php. So a switch statement is still necessary. I mean, I guess whenever you change the hash the length could be taken by actually creating a hash of an empty string and doing an strlen() on that but idk...  that seems a bit inelegant.\nThrowing an exception of the hash algorithm is unsupported is fine.\n. Good ideas. I'll update the PR as time permits.\n. I've made the suggested updates.\nThanks!\n. Yah. You had suggested adding test cases and I didn't have those in time for the release and I've been wanting to do a release for a while and didn't want to hold it up anymore.\nAnyway, I had some other stuff come up today that took longer than expected and I need to be going to bed so I'll do the tagging and update the CHANGELOG.md and README.md file tomorrow.\n. This is ready to be merged.\n. > Don't fall back to sha1 but throw an exception instead?\nWell in that case I guess I'll finish up #739 before working on this. I figure we should be doing either doing all user_error's or all exceptions. Not both.\n\nAlso remove the sha1 default argument from the constructor?\n\nI actually kinda like the sha1 default argument in the constructor. It's like how, with stuff like Crypt_AES, it defaults to CBC mode if you don't explicitly specify the mode..\n. For reference here's the line:\nhttps://github.com/phpseclib/phpseclib/blob/97c8d9eff3d82bb2ebf334457599c94c758ab483/phpseclib/Net/SFTP.php#L2532\nThat said, the 2.0 branch is being unit tested on PHP 7 and the unit tests pass:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/137103453\nAnd the stat cache does have a number of unit tests. testStatLstatCache, testLinkFile, testStatOnCWD and testStatcacheFix in tests/Functional/Net/SFTPUserStoryTest.php\nFinally...\nhttps://3v4l.org/2Nppe\nWorks fine on PHP7 there.\n. > @terrafrost Do you expect any problems with intval vs casting in PHP4 world?\nI just tested it on PHP 4.4 and it seems to work just fine.\n. Looks good to me now!\n. Looks good to me!\n. Looks good, with the caveat of what I mentioned. Maybe composer.json ought to be updated with libsodium as an entry in suggest?\n. Looks good to me!\n. > I'd suggest by starting with closing all the open support questions that are stuck (missing information).\nI'll take a look.\n\nDo we want to look into PHP7 support before 2.0? I assume we can also do that against master, maybe PHP7 will be in RC soon.\n\nYah - if that can be done before the weekend that'd be great.\n. 1.0.0 has been released. I'll be tagging 1.0.0 and 2.0.0 later today. Need to update the README.md and the CHANGELOG.md file before doing that tho.\n. That file was deleted in a later commit.\nAnyway, I don't have any problems with doing PR's for releases, assuming they're merged in a timely fashion. I mean, if I update the website to announce a new release, the README.md should be updated shortly there after (a few days delay is acceptable imho).\nWhomever merges it would need to do git push origin --tags (or whatever the name of the remote is) and not just use github.com's built-in merge tool.\n. > We should change the workflow to no longer make release changes necessary in the repository at all. Just don't link to the latest and greatest version. Instead, just link to the download page.\nThat works for README.md but what about CHANGELOG.md? It's existence is due to #496 .\n. I guess it can be changed as features are committed but then what about the release date?\nMaybe we could just stop updating CHANGELOG.md all together and manage releases via https://github.com/phpseclib/phpseclib/releases/new ..\n. Looks good to me! Altho it does seem like this could target 1.0 instead of 2.0? #754 targeted 1.0 for instance.\n. Ah okay. Well, looks good to me!\n. How would you unload a class at run time?\n. Works for me. Go for it.\n. I can keep it too lol. SSH1.php is already namespaced - the only thing I'd need to add it to it to bring it in line with where master will be exceptions.  But then again maybe in your case using phpseclib v1 vs v2.1 or something would be good too? I intend to main to maintain v1 for a long time and adding non-BC breaking features to it.\nI want to totally redo the X509 API but that'll be a huge BC break so that'll be master branch only. But for something like adding SFTP v4/5/6 support...  that can be in v1 and v2 and master.\n. > If you merge exception implementation for SSHv2 I can try to duplicate them in v1 for you and send a PR for review? My sucky 3rd world equipment shouldn't mean more wasted time and work for others lol.\nWorks for me!\n. @metalclassing - if you want to go ahead and start adding exceptions to SSHv1 that'd be great. SSHv2 is pretty much done. See #739 for more info.\nThanks!\n. phpseclib re-implementing functions to protect against timing attacks is certainly not without precident. One example I can think of off hand:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/RSA.php#L2201\nAnyway, I'll try to take a look at this this weekend or, depending on how busy I am, early next week.\nThanks!\n. mbstring.func_overload has been brought up before, here:\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?p=188632#p188632\nIf the fix that defuse/php-encryption implemented fixes it without a significant speed penalty I'd be up for it. It looks like defuse/php-encryption is using OpenSSL and only OpenSSL so it's only doing ourSubstr 4x for each decrypt call, no matter how big the ciphertext is. With some of the internal implementations it could wind up being called a lot. Like with the internal implementation phpseclib can do 1MB with AES in 1s per this:\nhttp://phpseclib.sourceforge.net/crypt/examples.html\nIf doing this would make that take 5s (5x slow down) I'd almost rather not do it. Instead, an exception could be thrown in the constructor or some such. Or maybe it's utilized for mcrypt / openssl but not for internal mode and if you have mbstring.func_overload in internal mode an exception is thrown.\nEither way benchmarks need to be done.\n. > It was originally implemented in mcrypt (see https://github.com/defuse/php-encryption/releases/tag/v1.1). After a lot of discussion with @defuse I suggested switching to OpenSSL (because of concerns about mcrypt's design and abandonment) and drafted a pull request to do just that.\nThis is totally tangential lol but I actually like mcrypt's design.\nI do agree that it's being abandoned is a problem. It definitely has bugs (in fact, I've submitted a few lol) and I think they ought to create an MCRYPT_AES cipher as an alias of MCRYPT_RIJNDAEL_128 to eliminate the confusion your blog speaks of, but aside from that I actually like it.\nThe problem with OpenSSL is that the key size and mode are tied to the algorithm name whereas with mcrypt they're separate. I guess for the mode it's not a huge issue but for the key size it's a little annoying. So let's say you wanted to do 256-bit RC4 (SSH2 supports it). Per wikipedia RC4 supports keys between 40 and 2048 bits so it's possible. But not with OpenSSL. With OpenSSL you can do rc4-40, rc4-64 or rc4 (which is 128) but not 256. With mcrypt you just give it a key 32 bytes long as the key and you're good to go.\nI suppose, in the case of RC4, it's not a huge issue, as people ought not be using it, anyway, but if you're gonna support it, I think you ought to support the full gamut of options and not a small subset.\nI also agree with the null padding by default. That's why phpseclib doesn't null pad plaintext's / ciphertext's by default lol. Altho both OpenSSL and mcrypt does null pad keys and IV's.\nIn some ways I think the PHP bindings for mcrypt are superior as well. With mcrypt you can do what phpseclib calls \"continuous mode\" (used by SSH2), even with RC4, but with OpenSSL, you cannot. phpseclib simulates \"continuous mode\" for block ciphers through some block cipher trickery when OpenSSL is used but it ought not have to. But that's more an issue with the OpenSSL bindings and not OpenSSL itself.\n\nif they need multibyte character support they should use the mb_* functions explicitly rather than enabling a dangerous and ill-advised configuration option anyway.\n\nI agree (I'm not a fan either lol). I think PHP should deprecate that in future versions :)\n. I guess the problem I have with this approach is that phpseclib doesn't have to be installed via composer. I mean, I don't necessarily consider it to be a show stopper tho idk\n. I don't know that I completely support that.\nLast month 2,447 came from sourceforge.net per http://sourceforge.net/projects/phpseclib/files/stats/timeline?dates=2011-07-29+to+2015-08-04\n3.8 million came from packagist.org but that's all time and a lot of that is likely people who didn't intentionally download it.\nA lot of PHP libraries can be downloaded and utilized without Composer. They may not be very good libraries but I think none-the-less a good number of PHP devs (altho perhaps not very good ones) do expect to be able to use stuff without Composer.\nThat said, I suppose it is easy enough to get this working without composer (for the 2.0.0 branch and later). ie.\n``` php\n<?php\ninclude('autoload.php');\ninclude('bootstrap.php');\nuse phpseclib\\Net\\SSH2;\n$ssh = new SSH2();\n```\nAnd I guess people can still download the 1.0 branch. Altho after X509 and SSH2 have had an API revamp I plan on redoing the website to promote whatever the latest version is (be it 2.1, 2.2 or whatever) I do figure I'll stop mentioning the 1.0 branch on the website.\nLong story short, I guess I'm okay making other things unsupported.\nAltho that said, wouldn't making everything else unsupported be a BC breaking change? ie. maybe this should go in master and not 2.0? And fwiw this proposed fix wouldn't fix it in the 1.0 branch, altho tbh, I don't think that's a huge issue anyway. Fact is SSH2.php (and probably the symmetric ciphers too) wouldn't even work with MB_OVERLOAD_STRING anyway.\n. > phpseclib does not support MB_OVERLOAD_STRING in any version, so this is clearly not a BC break.\nNo, but not supporting anything other than composer installs - as you proposed - is essentially a BC break.\nI don't have a problem with it being a little bonus compatibility check for people using composer but to say that the only way phpseclib will be supported hence-forth is by composer installs...  that is essentially a BC break.\n. I guess that file was an oversight. It's a little too late for me to do anything about this today, however. I'll try tomorrow, time permitting.\n. Try it now.\n. Looks like Net_SCP has never been in the PEAR channel FWIW.\n. I wish I had never merged that PR meh :( I'll submit a PR shortly to revert this.\n. Unit test has been added!\n. Yah. You should be able to apply the unit test (without the corresponding code change) to 1.0 / 2.0 / master and see that it fails whereas it doesn't with the change.\nAlso, logically, it makes sense. Previously it was $this->sLen == false. NULL == false so $this->hLen was being used. But now it's NULL === false, which is false, so $this->hLen is /not/ being used. Since sLen isn't explicitly defined by default it's set to NULL so this change changed the default behavior of phpseclib.\n. I can add more OID's.\nAs for NOID...  I have not heard of that. What is that?\nThe ASN.1 description for AlgorithmIdentifier is as follows:\nAlgorithmIdentifier  ::=  SEQUENCE  {\n        algorithm               OBJECT IDENTIFIER,\n        parameters              ANY DEFINED BY algorithm OPTIONAL  }\nI guess OBJECT IDENTIFIER could correspond to an OID of that just happened to have a mapping of  \"noid\" or something and then parameters could be more dynamic or something but, in any event, I'd need more information.\nIf there is an OID that maps to \"noid\" in what RFC is that mentioned in?\n. I guess I could make it so an object is returned for OIDs and you could do...\n$oid->getOID(); returns OID\n$oid->getName(); returns name or false\n$oid->__toString(); returns name or OID\nBut that would be a BC breaking change and would only go into the master branch.\nAnother possibility:\n$x509->setOIDMode(FILE_X509_NAME_OID); would be the current (default) behavior\n$x509->setOIDMode(FILE_X509_OID); would make it return OIDs only\nThis possibility would add new functionality but it wouldn't change existing functionality (unless you explicitly changed it yourself) so it wouldn't be a BC break and could go even in the 1.0 branch.\n. > An other idea is to move x509 to it's own library for handling certificates.\nThat actually is the plan. Well, creating File_CSR, File_CRL, File_SPKAC, etc. Putting them in their own repo's, otoh...  well maybe it'll happen someday but I have no timetable for that.\nAnyway, I'll try to do this within the next few days. This week wound up being pretty busy for me so I didn't get a chance to do it earlier.\n. #789 addresses this. I changed how I did it. Trying to do $x509->setOIDMode(FILE_X509_NAME_OID); would have just been too problematic. Let's say you set the OID mode and then load the X509 cert. X509.php is looking for OID's by name - not by OID. I guess you could reload the X509 cert - reparse it - depending on the mode but that just seems like overkill.\nI think the getOID() method works just fine.\nIn the future I'll probably make it static but there are a couple other methods I want to make static as well. I'll just do that when I do those.\n. Fixed by #789\n. Here's what loadX509() currently returns:\nhttp://pastebin.com/2v9gGBgn\nHere's what loadX509() would return if $extensions = &$this->_subArray($root, $path); in _mapInExtensions had the & removed:\nhttp://pastebin.com/3U0FSRUA\nIn particular look at the extnValue for the id-ce-cRLDistributionPoints extension. In the first URL it's an array. In the second it's a base64-encoded string.\n. Your commit breaks this:\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->login('user', 'pass');\n$ssh->setTimeout(5);\necho $ssh->exec('ping google.com');\n```\nie. without your commit that command times out after five seconds (as it should). With your commit it doesn't ever return.\nWhat exactly were you trying to do that caused you problems?\n. You're right - 10 seconds might not be enough time. You can change the timeout by calling $ssh->setTimeout($x) where $x is 30, 60, or whatever. You can also disable timeout's all together by doing $ssh->setTimeout(0). Feel free to try it out.\n. It is not at all clear to me what you're wanting. Do you want to be able to make it so that the initial connection doesn't timeout? Unfortunately, I don't think that's possible.\nPer your code snippet phpseclib uses fsockopen(). Even if you don't pass a timeout parameter to fsockopen() it still has one. Quoting http://php.net/fsockopen, the function definition for fsockopen() is as follows:\nresource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]] )\nie. $timeout is equal to ini_get(\"default_socket_timeout\") when it's not explicitely set.\nPer http://php.net/manual/en/filesystem.configuration.php it is 60 by default and per http://php.net/manual/en/filesystem.configuration.php#ini.default-socket-timeout it's an integer.\nIf you want to increase the timeout for that initial fsockopen you can do this:\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->setTimeout(100000);\n$ssh->login('user', 'pass');\n```\n. > 1. Command execution timeout;\n\n\nConnection timeout;\n\n\nThose aren't available at the same time. You're not going to have a situation where you either type of timeout is possible. Only one type of timeout is ever going to be possible at a time and once the connection timeout ceases to be an option it's never going to be an option again. And as such it seems perfectly reasonable to reuse setTimeout().\nIt's like making a ticket about $temp = 'a'; $temp = 'b';, saying that there ought to be two variables instead of one that's re-used...\n\n\nAnd new extra timeout that can be implemented using stream_set_timeout\n\n\nI don't know why you'd use stream_set_timeout and stream_select at the same time.\nHonestly, it seems to me that for phpseclib's purposes, they're probably (mostly) interchangeable.\nYou'd have to use stream_get_meta_data in conjunction with stream_set_timeout to achieve the same functionality that stream_select has, but aside from that, it seems that they could both be used to the same ends..\n. Just because the constructor can't have the timeout be 0 doesn't mean you can't set it to 0 after the constructor. eg.\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->login('user', 'pass');\n$ssh->setTimeout(0);\necho $ssh->exec('php -r \"sleep(30); echo \\'all done\\';\"');\n```\nBy default timeout is 10s so if you comment out the $ssh->setTimeout(0); line you'll get a timeout and $ssh->exec() won't return anything. But if you don't comment it out you'll get \"all done\" output after 30s.\nI suppose I could put a user_error call in the constructor. eg. when the timeout is 0 in the constructor give an error and recommend that $ssh->setTimeout(0) be called after you do the logging in..\n. I've just committed a change that should address this:\nhttps://github.com/phpseclib/phpseclib/commit/7cb66ea56efd02bcf82c5933c84071a37121dcd5\n. If you're wanting to test your changes against Travis CI you don't need to make a PR to do so - you can just create an account on travis-ci.org and then go to https://travis-ci.org/profile/torinaki , make sure that your fork of phpseclib is switched on. Then go to https://travis-ci.org/torinaki/phpseclib and check out the status.\n. My personal opinion: replacing one line of code with one function call is a little silly. Whereas before you could just trace through the code now, once you get to that function, you have to look that function up, and then go back to where you were at. And for what? Just to replace one line with another line?\nI mean, if you're removing a lot of duplicated or re-usable code into a function that can be useful. But this doesn't really meet the \"a lot of\" test imho.\n. First, I apologize for the delay - I did kinda forget about this.\nAnyway, it seems to me that a case could be made for retaining the same behavior. The characters of # and ? have a specific meaning in the URI standard and, per that, it seems like it might be better to urlencode ? and #. eg. %23 for # and %3F for ?. Altho that said, parse_url does not automatically do this:\n``` php\n<?php\n$a = parse_url('https://www.google.com/se%61rch?q=test');\nprint_r($a);\n```\nThat outputs the following:\nArray\n(\n    [scheme] => https\n    [host] => www.google.com\n    [path] => /se%61rch\n    [query] => q=test\n)\nMaybe that's a bug in parse_url? idk. \nRequests to google.com, with a replaced with %61 work just fine when https://www.google.com/se%61rch?q=test is entered into the address bar. It does appear that the browser is converting %61 to a, tho, so let's try it with a manual HTTP request:\n```\n<?php\n$fsock = fsockopen('www.google.com', 80);\nfputs($fsock, \"GET /se%61rch?q=test HTTP/1.0\\r\\n\");\nfputs($fsock, \"Host: www.google.com\\r\\n\\r\\n\");\nwhile (!feof($fsock)) {\n    echo fgets($fsock, 1024);\n}\n```\nThat works as well.\nThat said, I went ahead and made it so that # works directly since that's what libssh2 does.\n. Looks good to me!\n. Works for me! Altho that said I think this PR would be good for the 1.0 and 2.0 branches. And if those versions are going to be targeted then...  well I've made some in-line comments.\n. > @terrafrost is this a prerequisite for landing the PR in master & 2.0 ? I don't have much interest in 1.0, but it's a requirement to get this change into 2.x, I'll do it.\nI'll go ahead and say yes. If non-BC breaking improvements aren't going to be incorporated in the 1.0 branch then it needs to be abandoned and deprecated. Then people using 1.0 who have issues will have to rewrite their application to use 2.0 or whatever the latest version is. And how long do versions then stay valid for?\nI don't have a problem abandoning 1.0 but, among other things, the website would need to be updated to be documenting the latest version instead of 1.0. And it's something I plan on doing (unless someone else wants to step up to the plate) but I want to redo File_X509 (making a lot of BC breaking changes to that so it'd go in the master branch only) and then later redo a lot of Net_SSH2.\nRight now the only reason people have to use 2.0 instead of 1.0 is if they're wanting to avoid namespace conflicts. Or if they want to avoid E_DEPRECTED errors in sufficiently new versions of PHP. There just aren't compelling reasons to switch over, right now, and although the BC breaking changes I plan on introducing will hopefully change that those changes haven't been implemeted yet.\n. I agree. I think we can add it in the current versions with the caveat that a check be done on the PHP version to make sure it's available.\n. phpseclib does not currently support tunneling like that. I'd like to add support for it but I have other things I want to add to phpseclib first..\n. Does echo $SSH_CLIENT | awk '{ print $1}' do what you want?\n. You could do gethostbyname($hostname) and then connect to the server by the IP address. If you connect via the hostname you could encounter issues with round-robin DNS's.\nFrom the CLI you could also do this:\nifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'\nsource: http://www.cyberciti.biz/faq/how-to-find-out-the-ip-address-assigned-to-eth0-and-display-ip-only/\n. ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}' is more of a Linux thing than it is an SSH thing but I wouldn't expect that to need a tunnel to work.\nAs for you getting an empty result set...  can you post the SSH logs? You can get them by doing define('NET_SSH2_LOGGING', 2) and then $ssh->getLog() after the last var_Dump.\n. ```\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  06:6c:73:20:2d:6c:61                             .ls -la\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.2127, network: 0.0001s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0002, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:fe                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00 \n```\nThere's nothing wrong on phpseclib's in. Are you trying to connect as a user that's jail shelled?\nCan you do interactive sessions? Maybe it's just closing out the channel when it sees an exec request vs. a shell one or some such.\n. Well if you need help with what Linux commands need to be issued (if none of what I've posted are sufficient) I'm not the best person to ask. I'm decent with Linux but this project is pretty OS agnostic. SSH != Linux.\nBut that said, the fact that ls -la is closing the connection without outputting anything suggests to me that there's a deeper \"issue\".\nI suggested that you might be trying to connect as a user that's jail shelled. You can see what shell the user you're connecting as is setup to be using by looking at /etc/passwd.\nAnother thought: you could try to enable a PTY:\nhttp://phpseclib.sourceforge.net/ssh/pty.html\nYou could also try interactive sessions. eg.\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\n. The problem I have with a lot of static code analyzers is that there's a lot of white noise and false positives.\nLike the critical issue...  that's by design. If you want to see what methods are being called for the stream wrapper you can. Do define('NET_SFTP_STREAM_LOGGING', true). It's not a setting that should be used in production, all in all, I consider the issue to be bogus.\nThe global $$host thing is also bogus. The goal of the stream wrapper is to emulate libssh2's SFTP stream wrapper and with that stream wrapper you can do stuff like this:\nphp\n<?php\n$session = ssh2_connect('example.com', 22);\nssh2_auth_pubkey_file($session, 'username', '/home/username/.ssh/id_rsa.pub',\n                                            '/home/username/.ssh/id_rsa', 'secret');\n$connection_string = \"ssh2.sftp://$session/\";\nunset($session);\n$stream = fopen($connection_string . \"path/to/file\", 'r');\n?>\nYou can't completely duplicate that behavior with a stream wrapper but you can kinda sorta do so if you use single quotes. eg. if you do 'ssh2.sftp://$session/' look for $session in the global scope and if it's an instance of SFTP then use it. If it's not available in the global scope then that's that.\nMaybe it's not a worthwhile feature to have but I don't think it's a \"major\" issue either.\nAnd for ini_set('session.use_cookies', 0); in Crypt/Random.php...  it's a bit of a hackish approach but the idea is to use sessions to propagate entropy. You don't want to write the cookies to a header because Random.php could be called after the headers have already been sent. This approach is also only used as last resort. It's not used if you're on Linux, if either the OpenSSL or mcrypt extensions are available, etc. The comments in Crypt/Random.php elaborate.\nSo that's it. The 1x critical and 3x major issues have been debunked.\n. Also, phpseclib used to do Scrutinizer CI but it was removed. See this: \nhttps://github.com/phpseclib/phpseclib/pull/728\n. > @terrafrost for example these two PRs #767 #753 changes by @kalessil was prepared based on above mentioned tools reports(i'm almost sure, because same issues you can find in reports).\nSo? If you want to consult a tool to make a PR feel free. I can't guarantee that the PR would be accepted but you're free to make it. But adding it to the README.md file so that we can proudly display to the world that it has \"critical\" issues that aren't? Or so Scrutinizer can continue to timeout?\n\nAbout var_export it definitely not good approach. Because you finally will catch error like \"Cannot modify header information - headers already sent by...\" and for example session will not be started. Also question how to log something into file without output buffering? Better to use user callback.\n\nWhat does var_export have to do with \"Cannot modify header information - headers already sent by...\"? Let me try to better illustrate what the var_export is doing. So let's say we have this:\n``` php\n<?php\ninclude('Net/SFTP/Stream.php');\n$arr = scandir('sftp://user:pass@domain.tld:22/home/username/public_html');\nprint_r($arr);\n```\nWhat calls to the stream wrapper is scandir making? To find out let's do this:\n``` php\n<?php\ninclude('Net/SFTP/Stream.php');\ndefine('NET_SFTP_STREAM_LOGGING', true);\nscandir('sftp://user:pass@domain.tld:22/home/username/public_html');\n```\nHere's the output:\nphp\n__construct()\ndir_opendir('sftp://user:pass@domain.tld:22/home/username/public_html',0)\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_readdir()\ndir_closedir()\nWithout var_export the parameters might not be valid PHP. It's not a huge issue if they are PHP or not but it's also not a critical issue either. Like I said, if you don't want var_export to be called don't define NET_SFTP_STREAM_LOGGING. If you want to rewrite the code so as to not to call var_export just some static code analyzer can be happy feel free to submit a PR.\n. > Use globals not best approach, but why you needed it if your are using OOP. I'm sure that there may be more elegant solution. Also it will affect JIT compilation in HHVM for example.\nHere's what it's there for:\n```\n<?php\ninclude('Net/SFTP.php');\ninclude('Net/SFTP/Stream.php');\n$sftp = new Net_SFTP('domain.tld');\n$sftp->login('user', 'pass');\n$arr = scandir('sftp://$sftp/home/username/public_html');\nprint_r($arr);\n```\nI'll bet you $25.00 PayPal that you can't rewrite Net/SFTP/Stream.php to make that work without global's. If you do give me your email address and I'll PayPal you the money. If you don't then why don't you make a $25.00 donation to this project?\nNow maybe it's useless functionality. Certainly you can work around it by doing something like this:\n``` php\n<?php\ninclude('Net/SFTP.php');\ninclude('Net/SFTP/Stream.php');\n$sftp = new Net_SFTP('domain.tld');\n$sftp->login('user', 'pass');\n$context = array('sftp' => array('session' => $sftp)); \n$context = stream_context_create($context); \n$arr = scandir(\n    'sftp://domain.tld/home/username/public_html',\n    SCANDIR_SORT_ASCENDING,\n    $context\n);\nprint_r($arr);\n```\nBut that's not identical functionality. If the only way you can remove the need for global is by changing the API that end-users might be using then that's not identical functionality.\n. > About 'Random.php' I can say only that there are a possibility that it may conflict with already started session. About cryptography in that case the best idea is to warn developer that it use not safe method with some warning\nI'm not to concerned about maybe - I'm concerned about fact. Maybe there's a bug on some distro's version of PHP that makes every openssl_encrypt call return false but I'm not going to start doing if (openssl_encrypt('', 'des-ecb', 'a') === false) return false checks in isValidEngine unless there's an actual bug like that.\nSo if you know of a specific issue create a ticket on it. But I'm pretty sure there isn't. Quoting Crypt/Random.php:\nphp\n            session_id(1);\n            ini_set('session.use_cookies', 0);\n            session_cache_limiter('');\n            session_start();\nSo we're setting the session_id to 1. Per session.use_cookies the sid is not sent via cookies so no HTTP headers are output. session_cache_limiter is then called to remove any other headers that starting a session might normally send. Then the session is started.\nThe original settings are backed up prior to these lines and are restored in later lines.\nSure, this could conflict with any session who's id is 1 but (1) you're not going to get sid's like that by chance (they're always 32 bytes) and (2) all it's doing is adding $_SESSION['seed'] to that session.\nAs for your suggestion that I throw some sort of error instead...  why? Because some static code analyzer found ini_set in the code? Maybe I should also throw error's if libssh2 isn't installed? phpseclib isn't about throwing errors when it doesn't encounter an ideal environmental configuration. It's about working in every possible environment under the sun. That's not to say that there are environments where PHP won't work (eg. #762) but (among other things) the code is already there.\nI don't have a problem using static analysis tools as a guide but there results shouldn't be treated like gospel.\nAlso, fwiw, last time code changes were made that were suggested by a static code analysis tool a regression was introduced:\nhttps://github.com/phpseclib/phpseclib/pull/769\nI don't have a problem with static code analyzers but you gotta keep an open mind when reviewing their findings.\n. 1. Yup. Currently it's using single quotes but to more accurately duplicate the libssh2 functionality double quotes would be preferable. Although I'm not sure what you mean by \"If so what value should contain $connection_string variable?\"? It can be used with functions like scandir, if that's what you mean.\n2. Yup!\n. Sure! So if neither you or torinaki do it does that mean I get $50 USD? :D Or maybe ya'll can split the $25.00 up to $12.50 each lol.\n. I'll try to take a look either this evening or within the next few days as time permits.\nThanks!\n. So overall I think it's a good PR! Email me at terrafrost@php.net your PayPal address and I'll PayPal you the money!\n. > @terrafrost Let's pay after this was merged?\nThat works!\n. @bantu - since you're active in this ticket lol...  is #749 ok to merge? It's ready and waiting!\n. > @terrafrost please invest these money into project. I renounce the prize. Thanks you for your honesty.\nWill do - thanks again for the PR!!\n. So I think this is good to merge! I can do it but maybe you'd rather do it @bantu ?\n. > Your last commit seems to have added some log file. Please amend/rebase.\nDone. Thanks for the heads up.\n. Looks good to me!\n. Looks good to me!\n. @cweagans - I don't think @GrahamCampbell's proposal had anything to do with the 1.0 or 2.0 branches. Rather, I think it had more to do with the master branch.\nAnd as far as master is concerned I think you're right about the only thing that this would entail would be a version constraint in composer.json. I'm not aware of a PHP 5.4 specific feature that'd benefit phpseclib. Like PHP 5.3 introduced namespaces and that is a total BC break from earlier versions but I don't think 5.4 has anything comparable.\nAnd if that's the case I guess I'm okay with it. I mean, in truth, there are still a lot of servers out there with 5.3. Even 5.2 is more prevalent than it ought to be.\nAt my last job we had at least one PHP 5.2 server, which prevented namespaced packages from working. It's easy as a dev to say they need to be upgraded when you're not the one upgrading them. Plus, people could always just say \"oh I'll use something else that does work on my version of PHP\" if your software doesn't.\nI mean, I can only assume that phpseclib has achieved the level of popularity that it has due to the fact that it's server requirements are pretty minimal. I'm not a big fan of upending that approach when I believe it's that approach that has gotten phpseclib where it is today.\nBut, that said, if the only change is in composer.json people could still manually install phpseclib on PHP 5.3 even if the composer.json said PHP 5.4 was required. And I think I'd be okay with that. Like for 3.0 we can see how much of an issue it is by writing PHP 5.3 compatible code but saying in composer.json that it only works on 5.4. If no one complains after a certain period of time we can start doing PHP 5.4-only things. Like [] instead of array(). Maybe. I guess doing that could increase the likelihood of merge conflicts idk..\n. > @terrafrost I guess it depends on what you mean by \"drop support for PHP 5.3\". I assume that means PHP 5.3 and below, which means that 1.0 would still run, but why wouldn't you just use 2.0 in that case? If PHP 5.3 is the minimum version, there's no reason to continue supporting 1.0.\nThe different branches have different PHP requirements.\n2.0 requires PHP 5.3, 1.0 works on PHP 4.4 or some such. master could drop PHP 5.4\n\n@terrafrost What's the timescale for 3.0 btw? When are you planning to release? 3 months? 1 year? 2 years?\n\nProbably closer to a year. I want to pretty much completely redo X509.php and do a lot of refactoring of SSH2.php and maybe SFTP.php too. ie. to give people a reason to update.\n. > If the release is in Q3 2016, I'd say it would be reasonable to drop both php 5.3 and 5.4 in 3.0.\nI think we should cross that bridge when we get there.\nQ3 2016 is my best guess but what if it gets done Q4 2015 or Q1 2016? Let's not commit to anything until we need to. For the time being I think any such discussion is premature.\n. Why not just do if ($passthru)? Doing if ($passthru === true) will make it so $passthru can't be 1. That's not a huge issue, I suppose, but is there an overwhelming reason to require that it be bool(true)?\nLike sha1's second parameter is a boolean but sha1('', true) and sha1('', 1) output the same thing.  With sha1 the second parameter will be treated as true so long as it's castable to true. But with this PR we're not going to be doing that?\nAlso, this should be against the 1.0 branch. There's no reason this feature can't exist in that branch. It's not a BC break or anything.\n. Looks good to me!\n. metalclassing volunteered to at least do Exceptions to keep it in master:\nhttps://github.com/phpseclib/phpseclib/issues/760#issuecomment-126701616\nJust because I don't want to maintain it doesn't mean that I'm opposed to other people doing it if they're up to the task lol.\nPlus, speaking practically, I want people to contribute and if adding Exceptions to SSH1.php can segway metalclassing into making other contributions (altho he's made other contributions already lol) then it's inclusion is valuable imho.\n. I think this is a premature PR. Quoting my response in #792...\n\n\nIf the release is in Q3 2016, I'd say it would be reasonable to drop both php 5.3 and 5.4 in 3.0.\n\nI think we should cross that bridge when we get there.\nQ3 2016 is my best guess but what if it gets done Q4 2015 or Q1 2016? Let's not commit to anything until we need to. For the time being I think any such discussion is premature.\n. > We can remove all the commented out \"random\" stuff too can't we?\n\nI'm not sure what you mean?\nRandom.php has comments but I believe they're useful and don't believe they should be deleted? But then I'm not even sure that's what you're talking about?\n. > PHP 5.4 is still EOL though. It's EOL this weekend.\nA lot of people are still using 5.3 per the link cweagans posted in #792:\nhttps://wordpress.org/about/stats/\nAlso, RHEL and CentOS are still supporting PHP 5.3 until 2020:\nhttps://wiki.centos.org/About/Product\n(scroll down to \"Programming Languages\" and you'll see \"php 5.3.3\")\nAnd quoting what I said in #792...\n\nI mean, I can only assume that phpseclib has achieved the level of popularity that it has due to the fact that it's server requirements are pretty minimal. I'm not a big fan of upending that approach when I believe it's that approach that has gotten phpseclib where it is today.\n\nThere's actually a Wordpress plugin that uses phpseclib. If only 15.2% of servers running Wordpress are running it on PHP 5.5 or later then a plugin that only works on PHP 5.5 or later isn't going to be a plugin most people are going to be able to use.\nIf in a year 99% of people are using PHP 5.6 then that's different but we're not there yet.\n. I guess I'm okay with doing it for the time being. And so long as we don't actually write code that requires anything greater than 5.3. ie. no []-style arrays, no traits (not that I have any idea how those would actually be beneficial for phpseclib), etc. We can revisit when it's time to release.\n. I've been thinking about upping the master branch to 5.6 actually. There are some specific features of it that I want to use the X509 stuff. But I figure I'll do that when I make those changes lol.\nWhen I do make those changes, tho, I'll probably replace all instances of array() with []. Again, master branch only however!\n. Looks good to me..\n. Looks good to me with the exception of the public / protected thing...\n. Looks good to me!\n. The master branch will presumably always be unfinished. By the time the API in the master branch is finalized it'd be 3.0 or 4.0 or whatever.\nAs for the 2.0 branch...  the API is essentially the same. The only difference being that in 2.0 it's namespace'd and you have to use an autoloader. It's available for people wanting to people wanting to avoid deprecated warnings from the 1.0 branch's using PHP4 style constructors and who want to avoid class conflicts vis-a-vis namespaces.\nThe documentation isn't quite up-to-date but it's mostly still relevant.\nFor that matter the documentation for 1.0 is in need of updates. A lot of new additions aren't documented in it. But there's also the fact that it just isn't a high priority for me. When 3.0.0 is released (or maybe before it's released, concurrent to 3.0.0's release) I plan on pretty much redoing the documentation.\nIn the mean time, if people want to see improvements they are free to submit pull requests or whatever.\n. 2.0 is stable.\nTo contribute to the docs make a pull request against https://github.com/phpseclib/docs and post here as I don't check the issues / PR's there very often.\nIf you want to completely redo the documentation, too, feel free. But for a redo it'd prob be best to do so in your own repo for the time being until it's been vetted. If it looks good maybe it can become an official phpseclib sub project.\n. That's not going to happen. Documentation that's 90% accurate is still better than no documentation at all imho. At best maybe I can create a \"splash\" page for 2.0 that discusses the differences and then links to the 1.0 documentation.\nThe closest thing that exists currently is this blurb at the bottom of http://phpseclib.sourceforge.net/ : \n\nOther Branches: 2.0 and master\nThe 2.0 branch has pretty much the exact same API as the 1.0 branch, save for that it is namespaced, uses PHP5-style constructors (thereby avoiding E_DEPRECATED errors) and requires the use of an autoloader. A few examples.\nThe master branch has an unstable API that is subject to change. The master branch will eventually turn into 3.0, at which point, this website will be re-designed with an emphasis on that version.\n\nI could expand on that in a splash page that you get taken to when you click on the documentation link for 2.0 in README.md.\nOf course, I'm also not going to do that asap either. Maybe this weekend or next weekend. Higher priority than that: providing support for outstanding support requests.. I assume you're the Phil from https://stackoverflow.com/questions/47684852/upload-csv-file-to-server-using-sftp . The the fact that the constant is different also came up in another very recent stackoverflow question:\nhttps://stackoverflow.com/questions/47659231/phpseclib-sftp-put-command-file-contents-are-just-a-string-not-the-expected\nSo that's a known issue and will be addressed in the fullness of time.\nSo to summarize, the only real differences between 1.0 and 2.0 are...\n\nUse of namespaces, which has brought about the renaming of some classes (eg. Net_SFTP to phpseclib\\Net\\SFTP)\nThe use of an autoloader is required\nSome constants have been renamed (eg. NET_SFTP_LOCAL_FILE to SFTP::SOURCE_LOCAL_FILE)\n\nBeyond that the API is largely identical. The method names are all the same, the parameters all do the same stuff, etc.\nIf you find other instances where there are differences I'd (1) be surprised and (2) would appreciate elucidation.. @philBrown - I've updated the documentation as it currently exists to present users with a modal dialog box asking for the version they're using when viewing the examples. You'll be directed to the appropriate example based on that and a cookie will then be set as well so that on subsequent visits you'll see the documentation for that version.. Here's the way this currently works (unit tests will need to be created):\n``` php\n<?php\ninclude('autoloader.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR . '/phpseclib');\n$loader->register();\nuse \\phpseclib\\Crypt\\RSA; \nRSA::setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PUTTY);\nRSA::setPassword('zzz');\n// by default createKey() creates keys in the RSA::PRIVATE_FORMAT_PKCS1 format.\n// the above makes createKey()'s private key be in the RSA::PRIVATE_FORMAT_PUTTY format.\n// the above will also change the default private key format for all newly initialized\n// RSA objects to RSA::PRIVATE_FORMAT_PKCS1. old RSA objects will not be changed.\nextract(RSA::createKey());\n$rsa = new RSA();\n$rsa->loadKey($privatekey);\n// the following will override the \"global' defaults\nRSA::setPrivateKeyFormat($rsa, RSA::PRIVATE_FORMAT_PKCS1);\nRSA::setPassword($rsa); // reset password\necho $rsa;\n```\nPersonally, I'd prefer it if the API could be more like this:\n``` php\n<?php\ninclude('autoloader.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR . '/phpseclib');\n$loader->register();\nuse \\phpseclib\\Crypt\\RSA; \nRSA::setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PUTTY);\nRSA::setPassword('zzz');\n// by default createKey() creates keys in the RSA::PRIVATE_FORMAT_PKCS1 format.\n// the above makes createKey()'s private key be in the RSA::PRIVATE_FORMAT_PUTTY format.\n// the above will also change the default private key format for all newly initialized\n// RSA objects to RSA::PRIVATE_FORMAT_PKCS1. old RSA objects will not be changed.\nextract(RSA::createKey());\n$rsa = new RSA();\n$rsa->loadKey($privatekey);\n// the following will override the \"global' defaults\n$rsa->setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PKCS1);\n$rsa->setPassword(); // reset password\necho $rsa;\n```\nThe problem is...  if setPassword is static it won't have access to $this even if you call it by doing $rsa->setPassword(). And if setPassword isn't static you'll get an E_STRICT notice:\n\nStrict Standards: Non-static method phpseclib\\Crypt\\RSA::setPassword() should not be called statically in \\path\\to\\test.php on line x\n\nOne alternative would be to just remove (for example) setPassword and handle it via __call and __callStatic but if that's done then calling non-existant functions won't result in fatal errors. Like right now if you do $rsa->zzz() you'll get the following error message:\n\nFatal error: Call to undefined method phpseclib\\Crypt\\RSA::zzz() in /path/to/test.php on line x\n\nThat won't happen if __call or __callStatic exist.\nI suppose __call / __callStatic could do user_error or throw an exception but idk...  at that point it's a distinctly different error that's being output. Plus, user_error won't show the line that $rsa->zzz() was called on but instead the line that the user_error is on.\nSo in light of all that I think the API utilized in the first code snippet is the best that we can do. Unless someone has any ideas?\n. > How do I generate many keys of type A with password X and many keys of type B with password Y? That state really should not belong to the RSA class, it should belong to an instance. Consider introducing more classes, e.g. RSA_Key and RSA_KeyGenerator.\nYou'd just call setPassword again. eg.\n``` php\n<?php\nRSA::setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PUTTY);\nRSA::setPassword('zzz');\nfor ($i = 0; $i < 10; $i++) {\n    extract(RSA::createKey());\n    file_put_contents(\"key$i.pem\", $privatekey);\n}\nRSA::setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PKCS1);\nRSA::setPassword('yyy');\nfor ($i = 10; $i < 20; $i++) {\n    extract(RSA::createKey());\n    file_put_contents(\"key$i.pem\", $privatekey);\n}\n```\n. > First of all, I very much dislike the extract() call.\nSo right now RSA::createKey() (or $rsa->createKey() in every branch other than this PR lol) returns an array with three variables - privatekey, publickey and partialkey.\nI could make it so that privatekey and publickey were RSA objects instead of strings. That'd eliminate the need for a static setPassword and setPublicKeyFormat. But extract would still be a valid thing to do. To rewrite the code in my last post to work in the manner that I just proposed...\n``` php\n<?php\nfor ($i = 0; $i < 10; $i++) {\n    extract(RSA::createKey());\n    $privatekey->setPrivateKeyFormat(RSA::PRIVATE_FORMAT_PUTTY);\n    $privatekey->setPassword('zzz');\n    file_put_contents(\"key$i.pem\", $privatekey);\n}\nfor ($i = 10; $i < 20; $i++) {\n    extract(RSA::createKey());\n    $privatekey->setPassword('yyy');\n    file_put_contents(\"key$i.pem\", $privatekey);\n}\n```\nThe fact that RSA has a __toString method should result in the RSA object being converted to a string during the file_put_contents call.\nThinking about it I think that's a lot more preferable to what I implemented.\nAs for doing RSA_Key and RSA_KeyGenerator...  idk...  what methods would RSA_KeyGenerator have? createKey and that's it? Or would createKey not return anything and instead have  getPublicKey and getPrivateKey static methods as well? If all it had was createKey and we kept the current behavior of it returning an array with objects (instead of strings) then idk what the point of having a whole separate class would be?\nAnd aside from RSA_KeyGenerator...  what would RSA_Key do? Would I just remove createKey and rename RSA to RSA_Key?\nI guess it's hard to comment on your proposal without seeing it more fleshed out.\nI think I'll create a new branch specific for RSA changes instead of trying to bundle all \"making methods static\" stuff into a single branch. So that branch will contain a new createKey and maybe input plugins as well (or maybe not - we'll see - createKey for sure it'll have). I'll also create a dedicated branch for BigInteger changes (which'll make random and randomPrime static and will do type hinting [which I had planned on initially doing in a separate \"type hinting\" PR]).\n. This and the other readme link commits look good to me!\n. > Next step for RSA: splitting out all the key format handling stuff into their own individual class files.\nThe next commit will depend on both this PR and on #829 . I figure it'd be best if we went ahead and merged this to facilitate an easier to review PR for the next set of RSA improvements.\n. I've made all  the suggested updates with the exception of the last one. I could use some clarification for that one:\nhttps://github.com/phpseclib/phpseclib/pull/825#discussion_r40284084\n. All the suggested changes have been implemented.\n. 1.x can work on PHP 7 - you'll just get strict warnings or deprecated warnings or some such.\nThat said, I don't see what the point of this PR is. If mhash isn't available then mhash won't be used. That's the way it currently works. Why would you have the mhash function defined if you didn't have the mhash extension available? Are you using some sort of BC layer? Well, even if you are, you'd be better off using hash - not mhash. PHP 5.3 introduced hash. So why would you want to be using mhash (or a compatibility layer) on PHP 7 anyway?\n. > @terrafrost : mhash is still in PHP 7 (find it in ext/hash/hash.c in the source). It's just not an extension. Hence the advice given in the PHP 7 release notes to replace extension_exists('mhash') with function_exists('mhash'), as the former will return false, even though mhash is still there.\nIn lieu of having looked at the sources, here's what http://php.net/manual/en/mhash.installation.php says:\n\nAs of PHP 5.3.0, the mhash extension is emulated thru the Hash extension. This makes the mhash installation directory have no effect, and requires the hash extension enabled to make the mhash support available.\n. 1.0 is PHP7 compatible. I've tested it on PHP7. It just issues deprecated notices. #817 addressed the PHP7 compatibility issues 1.0 had.\n\nHopefully PHP 7 won't drop PHP4-style constructor support until after Wordpress drops PHP 5.2 support.\nIn the mean time, I still don't believe this PR is needed per my earlier comments.\n. The unit tests have been added. I'd say this is ready to be merged or at least reviewed in preparation for merging.\n. Is there anything I can do to hasten this along?\n. The suggested changes have been implemented.Since the CS issues that these changes fixed are present in a lot of other places unrelated to this commit another PR can be done for that.\n. @GrahamCampbell 's suggestions have been implemented.\n. Nice find! I've added a unit test and implemented this in the 1.0 branch as well in PR's #833 and #834, which replace this one.\n. You've created this ticket before. #337. That tool was in error then and it is in error now.\n. ``` php\n<?php\nerror_reporting(E_ALL);\nclone(new stdClass());\n```\nI don't get any sort of error at all. Not an E_NOTICE, not an E_STRICT, nothing.\nGive me a version of PHP that this is an issue on and appropriate action can be taken but being red flagged by some static code analysis tool just isn't a reason to change.\nThe reason why it's doing it is to maintain BC. The 1.0 branch is compatible with PHP 4 assuming the use of PHP_Compat. Here's how PHP_Compat emulates clone on PHP 4:\nhttps://github.com/pear/PHP_Compat/blob/master/Compat/Function/clone.php\n. Nice find.\nThis should be merged into the 2.0 branch, however, and not into master. Once it's merged into the 2.0 branch the 2.0 branch can be merged into master.\nAlso, a unit test would be nice. I wouldn't say it's a requirement but it'd be nice :)\n. Can you squash the commits? Like right now you modified a whole bunch of unrelated lines and then undid those changes. But since the commits are still there git blame will still show that they were changed and merge conflicts will still be able to occur on those lines. Squashing the commits should make it so those changes were never made in the first place!\n. I've just made my own commit of this:\nhttps://github.com/phpseclib/phpseclib/commit/b3171cc63f44c715a2b29200d9549d866e94d123\n. I checked mb_convert_encoding and the case names for that are not case sensitive so I've updated RSA.php to be similarly non-case-sensitive.\nI also added a new function:\nphp\nRSA::addFileFormat('myformat');\nAny non-abstract file in Crypt/RSA/ will be loaded as a plugin but if you have a custom plugin that doesn't live in that directory you can now add your own.\n. It's hard to comment on an API that doesn't exist. An implementation of that API wouldn't even be necessary - just a example of how to use it or something.\nThat said, even if we did have an API it's possible I just might not like it as much as I like this one (and I do like the API that I've come up with). And even if you and I come to an agreement there are liable to still be other people out there who don't like the new API. Not everyone is going to see eye to eye and you can't make everyone happy - that's just life.\nBut that said, I do like this API. It's basically \"you load an RSA key and you do stuff with it\". This \"stuff\" can include encryption, signature verification, or outputting the key you loaded in whatever format you so desire.\nThe only thing that doesn't completely fit with that paradigm is createKey but the fact that it's static somewhat removes it from the regular API anyway. And I don't see a lot of point in creating a class just for key generation. So instead of doing \\phpseclib\\Crypt\\RSA::createKey you do \\phpseclib\\Crypt\\RSA\\KeyGen::createKey? I just don't like it.\n\nThis way, the whole plugin-loading would be done via class autoloading and would trivially allow extension with new formats/classes.\n\nIt was pretty trivial before until I made it class insensitive. At least if you were trying to echo out a key in a specified format. It'd basically do if (class_exists(...)) which would trigger the auto loader.\nAnd I don't see how you can use autoloading for load() method. I mean, sure, you could do so if you required the format be passed to it as a second parameter but I think that's silly. The fact that it'll essentially auto-detect the format - that it's able to guess it as it were - is one of RSA.php's big strengths imho. I mean, sure, we could auto-load, but then where do you get the list of file format classes to auto load? Do I hard-code it into RSA.php instead of generating it dynamically from the directory? Maybe the person using phpseclib has to specify each and every format they want to support in the RSA constructor and a class_exists is done on each format they name to autoload the class if it exists? Sorry, but I think the method I'm employing is better..\n. Another advantage of the case-insensitive approach that's being used...  let's say straight up auto-loading were being used. At that point you could do something like $rsa->getPrivateKey('\\DOMDocument'). phpseclib would then try to call load(), which exists, but not statically, and idk lol. The severity of this issue would really depend on what classes were available. If any of them had __callStatic defined, etc.\nAnother alternative design would have been to objects instead of static calls. eg. loading a PKCS1 key results in new PKCS1() being called. With an approach like this you could do getPrivateKey(PKCS1(array('password' => 'whatever'))) or some such. ie. instead of having global format settings you could have per key format settings. But idk I like this approach better..\n. So one thought I had...  we could give the RSA object methods depending on the key that was loaded. Like if it's a PuTTY key you can do $rsa->getComment().\nThe problem with that is that we'd have to do __call, which I'm not a huge fan of since doing so will change what'll happen when you call an undefined method.\nHere's the normal error in PHP5:\n\nFatal error: Call to undefined method a::zzz()\n\nIf you implement __call that no longer happens. Instead you get no error.\nPHP7 changes this around somewhat. Instead you get this:\n\nFatal error: Uncaught Error: Call to undefined method a::zzz() on line 11\n\nThat can be duplicated by doing throw new Error('Call to undefined method ' . __CLASS__ . '::' . $name) but the stacktrace and line numbers are different.\nSo I guess one option would be to not care about the stacktrace and line numbers and just throw an exception - even on PHP5. But idk.\nAnd you can currently get comments, anyway, by doing $key = PuTTY::load('...'); echo $key['comment']; $rsa->load($key) (vs. $rsa->load('...');)\nOf course if we're doing this for get*() should this also be done for set*()? Well one problem with set*() is that you won't necessarily know the private key format. eg. you could do getPrivateKey('PuTTY') or some such. Maybe that method could do func_get_args() and then call the plugin via call_user_func_array() but idk.\nI suppose the API could be completely redesigned as well. It'd have been interesting to see the API bantu was considering. But idk...  I suppose every API will have it's advantages and disadvantages and altho a hypothetical API might be better than the one presented in this PR I do believe that this API is none-the-less an improvement from the current API and it has the advantage of actually having an implementation.\n. > That would fit the RSA::load() paradigm more than the $RSA->load() approach, but i suppose there are trade-off's either way.\nYah that's true. And no - that's not a use case I had considered. It seems like that use-case is probably more common for X509 certs than it is for RSA keys anyway? Like with X509 certs you might have a certificate validation chain. Not really sure how to deal with that atm.\n\nSecond thought: Maybe I should think about writing a File\\PEM handler that returns multiple RSA and KEY objects after digging through the input?\n\nThat might not be a bad idea. One thing I'm thinking of doing, long term, is to make a File/PublicKey.php file that'll return RSA or DSA or ECDSA objects depending on the key. Like it'll auto detect the format and return the appropriate object. Reason being that sometimes it might not be obvious or you might not even know or something idk lol.\nBut that isn't super helpful for X509 certs either..\n. Let's get #827 merged before merging this. I also need to merge this into 2.0 and master.\n. In theory it should be possible. You set the socket up as appropriate and then pass the socket to the Net_SSH2 constructor. Here's an example:\nhttps://github.com/phpseclib/phpseclib/issues/742#issuecomment-122351289\nIn practice, however, I've not really had much luck with SOCKS5 tunneling. Here's the test script I've been using:\n``` php\n<?php\n$port = 22;\n$host = 'www.domain.tld';\n$user = 'username';\n$pass = 'password';\n//$port = 80;\n//$host = 'www.google.com';\ninclude('Net/SFTP.php');\n$start = microtime(true);\n$fsock = fsockopen('127.0.0.1', 9150);\necho \"fsockopen success\\n\";\n$port = chr($port >> 8) . chr($port & 255);\n$address = gethostbyname($host);\n$address = implode('', array_map('chr', explode('.', $address)));\n$request = \"\\5\\1\\0\";\nif (fputs($fsock,$request) != strlen($request)) {\n   exit(\"premature termination\"); \n}\necho \"first packet sent\\n\";\n$response = fgets($fsock);\necho \"first packet rcvd\\n\";\nif (strlen($response) != 2 && substr($response, 0, 2) != \"\\5\\0\") {\n   exit(\"Unsupported protocol or unsupported method\");\n}\n$request = \"\\5\\1\\0\\1\" . $address . $port;\nif (fputs($fsock, $request) != strlen($request)) {\n   exit(\"premature termination\");\n}\necho \"second packet sent\\n\";\n$response = fgets($fsock);\necho \"second packet rcvd\\n\";\n$elapsed = microtime(true) - $start;\necho \"took $elapsed seconds\"; exit;\n// we don't check the response size since that can very depending on whether or not the outside world sees an IPv4 or IPv6 address.  Why the outside world would see an IPv6 address when IPv4 is all that this script uses, I don't know, but bleh \nif (substr($response, 0, 2) != \"\\5\\0\") {\n   exit(\"Unsupported protocol or connection refused\");\n}\n/*\nfputs($fsock, \"GET / HTTP/1.0\\r\\n\");\nfputs($fsock, \"Host: www.google.com\\r\\n\\r\\n\");\nwhile (!feof($fsock)) {\n    echo fread($fsock, 1024);\n} exit;\n*/\necho \"connecting via sftp\\n\";\n$ssh = new Net_SFTP($fsock);\n$ssh->login($user, $pass);\nprint_r($ssh->nlist());\n```\nUsing that script I can get a response from google.com, through the SOCK5 proxy, but I've not had any luck actually connecting to an SSH server. The SOCKS5 proxy I tried it on was created by PuTTY and, well, here's a post on superuser.com describing the issue:\nhttp://superuser.com/q/983503/172193\nI've also tried to connect to an SSH server through a Tor-created SOCKS5 proxy to no avail. I have no idea as to why.\nThe above test script is definitely hacked together and if I could actually get it working I'd clean it up but I just can't. Not with SSH..\n. Are you generating the key with phpseclib or with puttygen?\nCan you generate another key that you'd be willing to share and that demonstrates the problem and then post it here?\nThanks!\n. Can you post the SSH logs? You can get them by doing define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); before you initialize the Net_SSH2 object and then doing echo $ssh->getLog(); after you get the error.\nThanks!\n. I wouldn't use dev-master. Among other things, the API of dev-master is not stable. For example, there's a pending pull request that'll bring it with fairly big changes to RSA.php:\nhttps://github.com/phpseclib/phpseclib/pull/837\nThat said, the define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); change I suggested you do (which, btw, you don't appear to have done in the code snippet you posted) is different in the 2.0 and master branches. For those you need to be doing define('NET_SSH2_LOGGING', Net\\SSH2::LOG_COMPLEX);. And to reiterate what I said in my earlier post you need to do that before you initiate the $ssh object.\nAlso, why are you doing new Net\\SSH2 and new Net\\SFTP? Net\\SFTP extends Net\\SSH2 so if you want to do SSH2 and SFTP functions just initialize a SFTP object - not both.\n. My guess: SSH-2.0-xlightftpd_release_3.8.3 doesn't like one of the algorithms.\nShot in the dark: Try this:\n```\n\n-----[ FIND ]------------------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        'arcfour256',\n        'arcfour128',\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        //'arcfour256',\n        //'arcfour128',\n\n```\nIf that doesn't work then I guess the next thing that'd help is if you gave me the domain name / IP address / port. I wouldn't need a login since I wouldn't need that to duplicate the problem since the problem is happening before the login actually takes place.\n. > I don't find the credentials relevant for the moment, since i don't get login failure.\nThat's correct. The credentials are not relevant. That's why all I asked for was the domain name / IP address / port. Quoting my post \"I wouldn't need a login\". You can email that to terrafrost@php.net .\n\nSo from my understanding the problem is not the key but something else?\n\nCorrect. As I said, my best guess is that it's not liking one of the algorithms that phpseclib is using. Like the server is saying it supports the algorithm but in truth it's implementation of this hypothetical algorithm is bad. So it's not able to decrypt what phpseclib is sending it (because they're essentially using different algorithms even tho the server is saying it supports the algorithm phpseclib is using) and it's then closing the connection.\n. SSH servers have bugs. There's a whole section in PuTTY where you can enable special behavior to work around those bugs:\nhttp://the.earth.li/~sgtatham/putty/0.65/htmldoc/Chapter4.html#config-ssh-bugs\nThis is probably one of them. And due to the algorithms phpseclib implements it may encounter bugs that PuTTY doesn't. Like PuTTY doesn't implement arcfour128, arcfour256, hmac-sha1-96 or hmac-md5-96 and some of those algorithms have aren't implemented correctly on select servers.\nWhat I'd do to figure this out is to just selectively remove algorithms one by one until I find the algorithm that's causing the failure. You can do that, too, but it'd just be easier if I did it, rather than me trying to walk you through it. That's why I asked you for the IP address / domain name / port for the SSH server you're trying to connect to.\nIf it's behind a LAN and you're unable to give me access let me know and I can walk you through the how to do the next phase of the diagnosis yourself. But if it isn't then it'd be easiest if you just gave me that info. As I said in an earlier post (https://github.com/phpseclib/phpseclib/issues/840#issuecomment-147708981) you can email that info to terrafrost@php.net . I do not need a username / password. All I need is the IP address. I do not need to be able to login to the server - all I need to be able to do is make a TCP/IP connection to it.\nSo let me know if you can give me the IP address / domain name / port or not. We'll proceed from there.\n. First, just answer me this question. Yes or no answer. Can you give me the IP address / domain name / port number?\n\nI suspect that they provide an list on which the items ordering it's not relevant. Maybe they don't use the first alghoritm in the intersection list, as phpseclib decides to use so that's why \"Invalid HMAC\"\n\nPer the SSH protocol they need to use the first algorithm that the client says it supports that they also supports. So the order as given by the server doesn't really matter but the the order given by the client does.\nI mean, who knows...  maybe SSH-2.0-xlightftpd_release_3.8.3.6 isn't implementing SSH correctly. But the specs are the specs.\n\nIt's also interesting to know what was your reason for choosing the first element of the algs intersection? \n\nFor the hashes...  no reason in particular. For the symmetric key algorithms...  speed. RC4 is faster than AES.\nAlso, for reference, here are the logs of your connection attempt:\nhttp://pastebin.com/2d4b5RRy\nThere's nothing sensitive in there so I'm just gonna post them.\nAnd like I've said several times now what'd really help is the IP address / domain name / port number. If you are unable to provide these to me (because it's in a LAN and is only accessible via the LAN) lmk and I'll stop bugging you about that and we can proceed to the next step.\n. Well I hope we don't lose you! I value your feedback and your contributions.\nNone-the-less, congrats on the full-time job and good luck with it!!\n. > Is there a changelog available for 2.0 since it has now been merged into master?\nNo. In theory, most 2.0 changes will be merged into master and most 1.0 changes merged into 2.0.\n\nAlso, the website documentation seems to reference 1.0 still.\n\nThat's correct. 1.0 is more of a LTS version whereas 2.0 is not. Making the website document both 1.0 and 2.0 would be a lot of work and altho it'd be good, it is, to be perfectly honest, not among my highest of my priorities. The 2.0 API is basically the 1.0 API namespaced. Also, it requires an autoloader. Those are about the only changes.\n3.0 will feature some pretty drastic API changes so updating the website for that one will be a much higher priority. But if things go as planned 3.0 will probably be LTS like 1.0.\nIn the mean time if you want to have phpseclib.sourceforge.org document both 1.0 and 2.0 it'd be good to submit a PR to that project:\nhttps://github.com/phpseclib/docs\n. I'm gonna close this since it's addressed by PR's now.\n. Looks good!\n. Why do you say that MCRYPT_RAND used to be the default?\nHere's what the PHP docs say of mcrypt_create_iv:\n\nPrior to 5.3.0, MCRYPT_RAND was the only one supported on Windows.\n\nSo if it was the only one supported then it stands to reason that it'd default. But when I look at PHP 5.2 branch on php-src on github.com I see this:\nhttps://github.com/php/php-src/blob/PHP-5.2/ext/mcrypt/mcrypt.c#L1214\nie. there's long source = RANDOM and then the if (source == RANDOM || source == URANDOM) { check takes place. At this point php_win32_get_random_bytes is not called (although it is in later PHP versions) but rather fd = open(source == RANDOM ? \"/dev/random\" : \"/dev/urandom\", O_RDONLY); is. Since Windows doesn't have that that'd result in an error. Which is actually exactly what happens when I try it out on Windows 7 with PHP 5.2.17 (with <?php mcrypt_create_iv(8); as the sole line of my test PHP script):\n\nWarning: mcrypt_create_iv(): Cannot open source device\n\nLet's now fast forward to PHP 5.3:\nhttps://github.com/php/php-src/blob/PHP-5.3/ext/mcrypt/mcrypt.c#L1373\nNow php_win32_get_random_bytes is called if it's Windows. php_win32_get_random_bytes then calls CryptAcquireContext and then CryptGenRandom per this:\nhttps://github.com/php/php-src/blob/PHP-5.3/win32/winutil.c#L80\nSo it doesn't seem to me like MCRYPT_RAND ever was the default? I mean, it seems like it should have been the default in PHP 5.2 but it doesn't appear to be.\n. In Crypt/Random.php there's this:\nphp\n             // method 1. prior to PHP 5.3 this would call rand() on windows hence the function_exists('class_alias') call.\n            // ie. class_alias is a function that was introduced in PHP 5.3\n            if (extension_loaded('mcrypt') && function_exists('class_alias')) {\n                return mcrypt_create_iv($length);\n            }\nSo it doesn't do mcrypt_create_iv unless you're on PHP 5.3. But that said as for why I say in the comments that \"prior to PHP 5.3 this would call rand()\" isn't entirely clear to me given the analysis and testing that I just did. Maybe when I made that comment it was just being based off of a bad reading of the source code..\n. https://raw.githubusercontent.com/paragonie/random_compat/master/lib/random_bytes_openssl.php\nPer the comments of https://github.com/phpseclib/phpseclib/blob/5745c8a5beed2d98625f0bbc3a238a8a3387c49d/phpseclib/Crypt/Random.php#L75 there's \"possible blocking behavior\" in openssl_random_pseudo_bytes prior to PHP 5.3.4 that random_bytes_openssl doesn't take into account. Although the comments in phpseclib's Crypt/Random.php don't elaborate I believe the issue was due OpenSSL's RAND_pseudo_bytes trying to gather entropy from the screen and blocking until sufficient entropy was gathered. \nWe can download PHP 5.3.2 for Windows here:\nhttp://windows.php.net/downloads/qa/test/5.3.2-final/\nOnce downloaded we can try to reproduce the problem. If successful a PR could be submitted against random_compat.\nThat said, this change would also be making it so that composer was a dependency, which I'd consider to be a BC break. The idea of adding required dependencies to composer.json was discussed here:\nhttps://github.com/phpseclib/phpseclib/pull/763#issuecomment-128247211\nI guess we could do it in the master branch, since that's not really aiming to be BC compatible. Although I think I'd prefer that as a later change. ie. maybe after the website details how to install phpseclib with composer could we do it on the master branch. And right now since the website is documenting the 1.0 branch and not the master branch anyway...  idk.\n. > @terrafrost What is the status here?\nI'm thinking about just letting this sit until a decision has been made on adding Composer as a pre-requisite, which kinda ties into #763. And since master is a good ways off, anyway, I'm in no particular rush to make a decision on this atm..\n. This has been merged with #958\n. I don't know why this was closed - seems like a valid support issue.\nAnyway, @scriptzteam - can you post your logs? You can get the logs by doing define('NET_SSH2_LOGGING', 2) before you initialize the Net_SSH2 object and then do $ssh->getLog() after the failed login attempt.\nIn lieu of that it could be any number of things. Maybe the fsockopen connection failed. Maybe the server requires zlib compression (it shouldn't, per the SSH specs, but some none-the-less do). Maybe it has a buggy implementation of algorithm that phpseclib and the server agreed upon. Without the logs it's pretty much impossible to say for sure.\n. I'll take a look this weekend. In the mean time it'd be cool if you could provide a unit test demonstrating the problem that this is fixing. If not that's okay too - maybe I can reproduce the problem that this is attempting to fix when I've had a chance to examine it in more depth.\nEither way, thanks!\n. So the current API is modeled after the ftp extension and that returns true or false: http://php.net/ftp-put\nYou can get errors by doing $sftp->getLastSFTPError() or $sftp->getSFTPErrors(). Note that the latter one doesn't actually clear the error \"buffer\".\nIn the rewrite I'm planning I plan on having put() and get() still (altho I'll prob simplify them and remove some of the extra parameters) but am also planning on adding something analogous to fopen / fread / fseek / etc. Basically, I'm thinking you'll do $sftp->open('filename.ext', 'mode'), which'll return a resource on which you can use fseek and what not. But even with an API like that I'm not sure how this would be best accommodated above and beyond $sftp->getLastSFTPError() /  $sftp->getSFTPErrors()\n. It's actually funny you mention that. I did some work a few months ago to do PKCS7 signatures and CAdES signatures (which OpenSSL doesn't even support yet even tho the European Union Electronic Signatures Directive mandates their use). It'll create them and validate them. This evening I'll put it in a repo within the phpseclib organization and you can play around with it.\nI don't really want to add new functionality to phpseclib core. Right now what I want to be doing is improving the existing functionality. Like I want to finish my RSA rewrite and then I want to do a complete overhaul of X509.php and SSH2.php and SFTP.php. So per that if you want any support or new functionality for CMS.php (which I'll try to upload this evening) you'll have to pay. Hopefully you won't need any support or new functionality but if you do there you go.\nI charged $100 / hr for the initial development of the feature but it's been pretty well tested.\nAnyway, time permitting, I'll try to post here this evening with a link to it :)\n. See this:\nhttps://github.com/terrafrost/phpseclib/tree/cms\nThe cms-fromscratch.php file shows how to create the X509 cert and the RSA private key from scratch as well. You can certainly use existng certs / keys, as well, but in this case, I just opted not to do that.\n. Not currently. It's something I'd like to do at some point but I have other phpseclib-related things I'm wanting to do first, like pretty much re-factoring everything.\nThe work I've done to date in that branch was done because I was paid to do it. ie. I'm not unwilling to re-arrange my priorities but I'd need to be paid to do so.\n. #855 improves the base64-encoded detection. Adding a second parameter isn't a bad idea but it'll take more time. Maybe I could make it so you can pass constants to it. eg. X509::FORMAT_AUTO_DETECT, X509::FORMAT_PEM, X509::FORMAT_DER. But I can do that later. For the time being there's #855.\n. I've implemented this in RSA.php as well since it pretty much has the exact same _extractBER() function.\nFor X509 adding a second parameter to the various load methods works. For RSA it doesn't. I'm not going to add custom parameters to that classes loadKey() method that only mean anything for select key formats.\nI suppose I could add PRIVATE_FORMAT_PKCS1_PEM (for base64-encoded stuff) and PRIVATE_FORMAT_PKCS1_DER (for non-base64-encoded stuff) and have PRIVATE_FORMAT_PKCS1 auto detect (which is what it currently does) but tbh I just don't want to. I don't want to have fifty billion different formats that are all just super slight variations of one another. Especially when auto detection works 99% of the time (even in X509.php and even more so after this commit).\nFor the rsa-plugins branch (which'll be merged into master and only master; see #837) I could do something like PKCS1::setMode(PKCS1::PEM) or something. That's one of the advantages of the plugin approach - you can have per format features.\nThe use of constants in X509.php means that if the load*() functions were to start using plugins like RSA.php that that'd be a BC break but I don't think that's a huge issue as I've never heard X509 certs in any format other than DER / PEM. There are the XML Encoding Rules but I've never once seen those in use in the wild.\n. So for the master branch you can now do PKCS1::requirePEM(), PKCS1::requireDER() or (the default) PKCS1::requireAny().\n. No. Based on my limited understanding, PGP / GPG keys have a lot more info in them then just an RSA key. In that regard they're more akin to an X.509 certificate than they are a pure RSA key. ie. X.509 certificates are essentially containers for the transport of public keys so based on that one might think that RSA.php ought to be able to load X.509 certs, but I think X509.php is better suited for that purpose. And similarly, it seems like a PGP.php would be similarly better for PGP keys.\n. My guess: your include path isn't properly setup.\nSince 0.3.6, phpseclib has been building the list of symmetric ciphers that it supports off of the loadable symmetric cipher libraries available:\nhttps://github.com/phpseclib/phpseclib/commit/adf8afd4eb7566615decfc65892266d21f49612c#diff-82a5983a6daace4acbcc65edf2dfb605\nIt's evolved away from file_exists since that commit but, none-the-less, it builds that list based off of what it thinks is loadable.\nAlso, it's hard to really read your logs since you didn't use the <pre> tags when getting the output (I'm guessing you got it via a web browser?). Of course the fact that you didn't get <pre> tags makes me think you're using a really old version of phpseclib since phpseclib has been outputting <pre> if the sapi isn't CLI since 0.3.6:\nhttps://github.com/phpseclib/phpseclib/commit/093a18290493635a697471a8a67ace5335001335\nAnd before that - since 0.3.0 - it was adding <pre> tags unconditionally:\nhttps://github.com/phpseclib/phpseclib/commit/7ef3108d0092d5c639fb378c3cd41ed42bc136fd\nAlso, since 0.3.6, phpseclib has been building the list of symmetric ciphers that it supports off of the loadable symmetric cipher libraries available:\nhttps://github.com/phpseclib/phpseclib/commit/adf8afd4eb7566615decfc65892266d21f49612c#diff-82a5983a6daace4acbcc65edf2dfb605\nSo I'd recommend two things.\n1. Make sure you're running the latest version of phpseclib\n2. Check your include_path\n. See http://phpseclib.sourceforge.net/ssh/examples.html#chdir\nBasically, each exec() is performed in it's own self contained session. It's like each exec() is opening up it's own terminal window, running the command and then immediately closing the terminal window. So the second pwd is essentially being executed in an entirely different terminal window.\nInteractive shell does not behave this way:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\n. Here's an example of a JS library being used with phpseclib:\nhttp://www.frostjedi.com/terra/dev/rsa/index.php\nThe source code is here:\nhttp://www.frostjedi.com/terra/dev/rsa/index.txt\nMore info:\nhttps://area51.phpbb.com/phpBB/viewtopic.php?t=33024\nAs for what's wrong in your particular case...  it's really hard to say without seeing any source code..\n. Thanks for taking care of that!\n. You can see some errors with print_r($ssh->getErrors()) or echo $ssh->getLastError(). Login/password being bad, however, isn't an error that'll show up show up nor will errors due to no valid crypto algorithm being found. It'd be good if phpseclib reported on them but currently it doesn't (above and beyond just returning false)..\n. First, I apologize for the tardyness of this response. I've been out of town this week per https://github.com/phpseclib/phpseclib/issues/835 .\nAnyway, this is slow for a number of reasons.\n1. It's doing lots of substr()'s. There are ~150,000 revoked certs in that CRL so that's over 300,000 substr() calls at minimum, thanks to __string_shift(), which, itself, does 2x substr() calls.\nThe problem with that is that substr() just isn't the fastest thing in the universe. See https://github.com/phpseclib/phpseclib/pull/129 for an example of how eliminating one substr() call yielded a pretty significant speedup.\n2. A PHP array with ~150,000 elements (and subelements) is, itself, fairly slow. Check out https://github.com/terrafrost/phpseclib/commit/b3dfb99536428809606814b4c8e98234413c95a5 and read the in-line comments.\nMaybe it wouldn't be so slow on PHP7 since PHP7 is supposed to be a lot faster with arrays:\nhttps://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html\nBut who knows.\n. It'd be easier to review the code if all the commits were squashed into one, altho idk if you're ready for it to be reviewed yet.\nAnyway, I think, in theory, #746 kinda eliminates the need for this. Setup the SOCKS5 / HTTP(S) proxy outside of the SSH class and then pass the socket resource to the Net_SSH2 constructor.\n. Looks good! Can you squash the commits into one? I suppose I can do that too. If you don't I'll probably do so in a few days. I'm traveling atm so my availability is a bit sporadic.\n. Also, for the delayed response - I was in DC for a PHP conference week before last and then last week I was in NYC on vacation.\n. The newly added isAuthenticated() method should satisfy the problems this PR was attempting to address.\n. This seems to be working now.\n. Seems to be working fine here?:\nhttps://travis-ci.org/terrafrost/phpseclib/builds/92517587\n. I was able to reproduce the problem in the 2.0 branch. #893 fixes it. I couldn't, however, duplicate it in the master branch. #894 elaborates.\n. The first thing I'd do is look at the logs. You can get them by doing define('NET_SSH2_LOGGING', SSH2::LOG_COMPLEX); at the top of the file (well, after you include your auto loader) and then $ssh->getLogs() after the $ssh->exec().\nIn lieu of having seen the logs...  it's possible enabling a PTY would help:\nhttp://phpseclib.sourceforge.net/ssh/pty.html\nYou may also need to run the command in an interactive shell:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\n. Glad to here it! And again, sorry for not responding sooner - after the DC conference I was in NYC for Thanksgiving / vacation, so I was a bit distracted with that!\n. Well the unit test is failing and idk why.\n__debugInfo, as a magic method, only works in PHP 5.6, per http://php.net/manual/en/language.oop5.magic.php#object.debuginfo\nI'm using the @requires annotation as mentioned at https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.requires.tables.api to make it so that the test will only run on PHP 5.6 and later but it doesn't appear to be working.\nAnd the fact that it's seg faulting on PHP 5.6...  idk what that's all about. It's not seg faulting my copy of PHP 5.6..\n. First of all, I apologize for the tardyness of this response - week before last I was in DC for a PHP conference and then past week I was in NYC for Thanksgiving.\nAnyway, authenticated ciphertext's would be good but it's not, atm, super high on my priority list. Right now I want to rewrite the X509 stuff and then make a lot of improvements to the SSH stuff as well. And then DSA, etc.\nAs for phpseclib's documentation defaulting to ECB mode...  that's something I can change. That said if you don't pass any parameters to the constructor the symmetric ciphers default the CBC mode.\nAs for changing the default hash of OAEP / PSS to sha256....  the default per PKCS1 v2.1 is sha1. Quoting it:\nhttps://tools.ietf.org/html/rfc3447#section-7.1\nRSAES-OAEP-params ::= SEQUENCE {\n          hashAlgorithm     [0] HashAlgorithm    DEFAULT sha1,\n          maskGenAlgorithm  [1] MaskGenAlgorithm DEFAULT mgf1SHA1,\n          pSourceAlgorithm  [2] PSourceAlgorithm DEFAULT pSpecifiedEmpty\n      }\nSo that was the original motivation. This hasn't changed in PKCS v2.2 but this isn't that surprising. DEFAULT in ASN1 has a distinct meaning. If an optional field has a DEFAULT value that means that the value doesn't need to be encoded if it's the default. It doesn't necessarily mean that that's what they're recommending be used.\nI'm currently working on redoing a lot of RSA.php in the master branch and I'll do this change in that branch as well. I won't do it in the 1.0 or 2.0 branches as that'd be a BC breaking change.\n. Good catch - looks good!\n. This has been fixed in #888\n. I don't really know what parallel is trying to do but I tried to comment out that line and doing so yields another error:\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/95075843\nsudo: must be setuid root\n. Doesn't seem like hhvm is working. I've created a ticket here:\nhttps://github.com/travis-ci/travis-ci/issues/5243\nIn the mean time I guess I could go ahead and delete it from the .travis.yml file and re-add it depending on the outcome of that ticket idk..\n. Doesn't seem to work :(\nSee https://github.com/terrafrost/phpseclib/commit/1765a0e5ba5bdf890eaef94e095116eebc0a1b48. Yielded a \"sudo: must be setuid root\" error:\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/95388741\nThe error that that change yielded is, I note, the same error I got when I commented out sudo apt-get install parallel.\nI tried switching the order up as well:\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/95391493\nDidn't help.\nI note that in both of these jobs there was a \"Installing APT Packages (BETA)\" message that isn't present in the job for this PR.\n. I just went ahead and merged this.\nIf a better way to install GNU Parallel is found a new commit can be made.\nIf hhvm starts working on Travis a new commit can be made to re-enable it.\n. What are you using as your SFTP server software? I've tried phpseclib with a number of different SFTP clients but I don't have a comprehensive list.\n. The server's implementation of SFTP is buggy. I created a ticket for them. See https://github.com/PowerShell/Win32-OpenSSH/issues/48 . In theory, I could look at the server identifier and handle their server differently but that doesn't work either per https://github.com/PowerShell/Win32-OpenSSH/issues/49 .\nSo for the time being I'd just stick with your solution until they fix their bugs.\n. What I didn't mention in the PowerShell bug reports is that I also tested this on a few other Windows-based SFTP servers.\n- freeSSHd: http://www.freesshd.com/\n  (identifies as SSH-2.0-WeOnlyDo 2.4.3)\n- WinSSHD: https://www.bitvise.com/ssh-server-download\n  (identifies as SSH-2.0-SilverSHielD)\n- Xlight ftp server: http://www.xlightftpd.com/index.htm\n  (identifies as SSH-2.0-xlightftpd_release_3.8.5.1)\nNone of these behave as https://github.com/PowerShell/Win32-OpenSSH does.\nie. PowerShell's behavior is departing even from more established Windows SFTP servers.\n. My guess: some algorithm on the server is implemented incorrectly.\nSSH does an algorithm negotiation and if the agreed upon algorithms are implemented differently that could cause things to fail.\nOne thing that'd be useful to know is the server identifier. You can get that by doing $ssh->getServerIdentification().\nWhat I'd probably do with the algorithms is to try commenting out algorithms starting at this line:\nhttps://github.com/phpseclib/phpseclib/blob/77d5f8da204a47ff11faefc4b86c88b5209e1bf8/phpseclib/Net/SSH2.php#L1167\nActually, the easiest way to diagnose this would be if you gave me the server IP / hostname / port. I wouldn't need a login. The encrypted layer is setup before authentication is done and so issues involving it can be diagnosed without login info.\nIf you want to email me that info my email address is terrafrost@php.net. Please post here as well so I know when you've sent it.\nThanks!\n. Well I'm able to connect just fine to SSH-2.0-xlightftpd_release_3.8.5.1. Proof:\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:78:6c:69:67:68:74:66:74  SSH-2.0-xlightft\n00000010  70:64:5f:72:65:6c:65:61:73:65:5f:33:2e:38:2e:35  pd_release_3.8.5\n00000020  2e:31:0d:0a                                      .1..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6f:70:65:6e:73:73:6c:2c:20  b_0.3 (openssl,\n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.2146, network: 0.0003s)\n00000000  e2:4f:be:10:35:ea:55:fa:36:01:d2:be:57:19:da:41  .O..5.U.6...W..A\n00000010  00:00:00:3d:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...=diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61  oup-exchange-sha\n00000050  31:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:36  1....ssh-rsa...6\n00000060  61:65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:39  aes256-cbc,aes19\n00000070  32:2d:63:62:63:2c:61:65:73:31:32:38:2d:63:62:63  2-cbc,aes128-cbc\n00000080  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000090  65:73:2d:63:62:63:00:00:00:36:61:65:73:32:35:36  es-cbc...6aes256\n000000a0  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n000000b0  61:65:73:31:32:38:2d:63:62:63:2c:62:6c:6f:77:66  aes128-cbc,blowf\n000000c0  69:73:68:2d:63:62:63:2c:33:64:65:73:2d:63:62:63  ish-cbc,3des-cbc\n000000d0  00:00:00:09:68:6d:61:63:2d:73:68:61:31:00:00:00  ....hmac-sha1...\n000000e0  09:68:6d:61:63:2d:73:68:61:31:00:00:00:04:6e:6f  .hmac-sha1....no\n000000f0  6e:65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00  ne....none......\n00000100  00:00:00:00:00:00:00                             .......\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0296, network: 0.0001s)\n00000000  c4:96:bf:9a:05:5c:65:76:ce:c4:d7:91:ec:5b:11:04  .....\\ev.....[..\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0132, network: 0.0001s)\n00000000  00:00:00:80:01:b8:05:6a:0d:b9:21:60:0d:07:1e:43  .......j..!...C\n00000010  ca:5a:b8:f9:d4:8f:cd:bb:87:67:9c:27:a8:f3:0c:b7  .Z.......g.'....\n00000020  5e:0b:ef:1d:ba:a5:6e:86:60:88:67:2e:9f:d2:bd:aa  ^.....n..g.....\n00000030  ec:36:9d:84:fd:55:5c:7d:28:80:bc:52:ab:7b:72:1a  .6...U}(..R.{r.\n00000040  2e:db:84:f3:5b:e0:4d:0b:df:f7:e8:f0:85:1b:5f:de  ....[.M......._.\n00000050  f9:ed:5e:4f:4f:96:ef:87:fa:6b:a3:4d:95:7f:e9:00  ..^OO....k.M....\n00000060  1e:0e:29:07:7f:82:3b:7c:01:05:d6:12:26:16:90:ce  ..)...;|....&...\n00000070  05:57:90:6e:c5:b4:1e:ef:8f:bd:a4:dc:f7:bc:19:86  .W.n............\n00000080  d7:d6:b1:d4                                      ....\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.1392, network: 0.1392s)\n00000000  00:00:00:97:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:00:81:00:cb:b1:31:4c:0a  .............1L.\n00000020  e7:cc:88:fc:b8:a5:bc:bf:b1:72:5c:25:bc:16:d1:17  .........r\\%....\n00000030  71:8d:9e:46:18:60:63:71:d9:5c:a9:20:d1:5b:58:6b  q..F.cq.\\. .[Xk\n00000040  d4:e5:0a:d1:03:09:51:78:f4:5b:fe:e0:4d:84:95:e1  ......Qx.[..M...\n00000050  67:bd:c5:fb:bc:52:4a:82:d0:68:a3:41:b2:f8:82:a1  g....RJ..h.A....\n00000060  0a:94:d3:0c:3c:c9:a2:85:80:69:6d:d1:f4:1f:34:ff  .........im...4.\n00000070  57:c2:e9:20:c9:0f:e6:98:b0:d3:96:7b:28:20:ed:c5  W.. .......{( ..\n00000080  93:57:5a:99:cc:a7:69:c6:57:bf:c4:66:c1:30:1d:03  .WZ...i.W..f.0..\n00000090  30:f1:40:91:59:da:04:7b:46:18:ad:00:00:00:80:10  0.@.Y..{F.......\n000000a0  c1:93:2b:4a:49:03:3e:30:4f:e6:d4:fa:5c:41:e4:1e  ..+JI.>0O...\\A..\n000000b0  b1:82:a3:ae:6c:16:8d:f1:c5:62:1d:c2:4b:57:e9:23  ....l....b..KW.#\n000000c0  31:5b:24:61:96:30:b7:60:d8:74:30:e4:1a:c0:b6:03  1[$a.0..t0.....\n000000d0  a3:ae:b2:fb:ee:ae:20:1d:ba:a9:d7:e7:6e:2e:09:7b  ...... .....n..{\n000000e0  dd:37:d9:d1:2b:aa:14:a0:0f:99:ab:37:f2:24:50:07  .7..+......7.$P.\n000000f0  82:05:5c:e6:bf:70:b9:27:9e:f5:20:ba:c9:ba:2b:87  ....p.'.. ...+.\n00000100  71:9d:85:26:24:b3:b2:e3:c8:cf:ea:73:5b:ca:50:6a  q..&$......s[.Pj\n00000110  5c:d8:91:3a:cd:7a:da:f4:32:4e:08:5a:f6:d8:11:00  ..:.z..2N.Z....\n00000120  00:00:8f:00:00:00:07:73:73:68:2d:72:73:61:00:00  .......ssh-rsa..\n00000130  00:80:82:47:db:64:27:13:92:8f:54:c5:21:00:04:96  ...G.d'...T.!...\n00000140  da:a4:03:7c:78:40:ca:92:65:70:34:e3:2c:79:67:3e  ...|x@..ep4.,yg>\n00000150  2b:19:5f:e3:25:a8:ea:75:24:be:fd:17:e9:06:57:3c  +._.%..u$.....W.\n00000160  9e:a1:0f:a4:be:50:ff:4a:2c:5d:44:04:95:52:f0:b4  .....P.J,]D..R..\n00000170  2f:8b:9a:b7:df:05:94:9c:04:48:79:9c:cf:8e:af:6f  /........Hy....o\n00000180  43:87:84:6b:93:d2:e2:89:58:ec:dd:80:50:ea:27:40  C..k....X...P.'@\n00000190  0c:59:30:56:aa:29:2a:41:c0:4f:f5:69:b2:9e:c0:66  .Y0V.)A.O.i...f\n000001a0  9d:39:1d:65:2a:aa:e7:a4:6b:ce:4c:1a:b3:c5:55:01  .9.e...k.L...U.\n000001b0  61:62                                            ab\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0011, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0003, network: 0.0003s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0043, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0003, network: 0.0002s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0002, network: 0.0002s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0002, network: 0s)\n00000000  00:00:01:00:00:00:27:10:7f:ff:ff:ff:00:00:88:b8  ......'.........\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:27:10:00:00:00:09:73:75:62:73:79:73:74:65  ..'.....subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0002, network: 0s)\n00000000  00:00:01:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:27:10:00:00:00:09:00:00:00:05:01:00:00:00  ..'.............\n00000010  03                                               .\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:09:00:00:00:05:02:00:00:00  ................\n00000010  03                                               .\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:27:10:00:00:00:0e:00:00:00:0a:10:00:00:00  ..'.............\n00000010  01:00:00:00:01:2e                                ......\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0002s)\n00000000  00:00:01:00:00:00:00:64:00:00:00:60:68:00:00:00  .......d...`h...\n00000010  01:00:00:00:01:00:00:00:01:2f:00:00:00:36:2d:72  ........./...6-r\n00000020  77:2d:72:77:2d:72:77:2d:20:31:20:73:66:74:70:20  w-rw-rw- 1 sftp\n00000030  73:66:74:70:20:20:20:20:20:20:20:20:20:20:20:20  sftp\n00000040  20:20:20:20:30:20:44:65:63:20:31:30:20:31:30:3a      0 Dec 10 10:\n00000050  30:37:20:2f:00:00:00:0d:00:00:00:00:00:00:00:00  07 /............\n00000060  00:00:81:6d:56:69:a3:30:56:69:a3:30              ...mVi.0Vi.0\n```\nI guess you can give me the logs (do define('NET_SSH2_LOGGING', 2); and then later, after the connection fails, do echo $ssh->getLog();) but, honestly, the next step at this point is to debug by proxy. What that means is that something that could take like an hour to debug can drag out to a week or more depending on the punctuality of your responses and of mine (I'm not necessarily going to be able to respond at a time that's convenient to you and vice versa). It's not really very fun at all and 9 times out of 10, the person who's acting as the proxy just gives up after a while and never follows up. But if you can't give me server logs than I guess debugging by proxy is the only option now available to us.\nSo, like I said, get me the logs and we'll proceed from there.\n. This has been merged. idk why github doesn't realize it:\nhttps://github.com/phpseclib/phpseclib/commit/600f9c4e4b53fcded16d92d5f04e43805bd25c52\n. I apologize for the delay - been busy with Christmas stuff.\nAnyway, can you post the logs? You can get them by doing define('NET_SSH2_LOGGING', 2) at the beginning of the file and then doing echo $ssh->getLog() after the error.\nThat said, in lieu of having seen the logs, my guess is that exec() just doesn't work on the server. Maybe you need to be using a PTY or maybe interactive mode would work better for you. Servers not supporting exec is not without precident.\n. I totally apologize for not replying sooner. I totally forgot about this.\nAnyway, what version of phpseclib are you running? I'm gonna guess it's from the 1.0 branch but probably a release version. 0.3.9? 1.0?\nThe fact that your logs are all on one line makes them quite difficult to read. Normally, the logs show up like this:\nhttps://github.com/phpseclib/phpseclib/issues/916#issue-125421869\nie. lots of new lines. Not one big giant monolithic line. Maybe you got the output from a webpage and <pre> tags weren't added around the output. But if there aren't any <pre> tags than that would suggest you're running phpseclib 0.3.5 or earlier since 0.3.6 detects the SAPI and always adds <pre> tags unless the SAPI is CLI:\nhttps://github.com/phpseclib/phpseclib/commit/093a18290493635a697471a8a67ace5335001335\nSo if you're running a version of phpseclib that old then the first thing I'd recommend is upgrading to the latest version (1.0.0 to maintain BC with your existing code). And if you are running a newer version of phpseclib than that maybe get me your phpinfo().\nAnyway, what it looks like from your output is that you're logging in and then just not sending any commands after that. Are you sure your $ssh->getLog() is after the $ssh->exec() call?\nAgain, I apologize for not responding sooner :(\n. Good observations - I've updated the code - thanks!\n. The suggested updates have been made - thanks!\n. Updated. Thanks for the feedback!\n. You're trying to merge these changes into the right branch so that's good. But I'm thinking it might just be better if I added a new paragraph to the phpseclib.sourceforge.net homepage. So like I rename Usasge to Usage (1.0) and then add a new section - Usage (2.0). I could include a code sample for that one and a blurb about how the 2.0 version is namespaced and required auto-loading or something..\n. Updated:\nhttp://phpseclib.sourceforge.net/\nhttps://github.com/phpseclib/docs/commit/d9c59c65032ccf69fdf568a37ac10ca40445aa5e\n. AES: openssl, if it's available. If it's not then it uses mcrypt, if that's available. If neither openssl or mcrypt are available it uses it's own internal implementation.\nRSA: internal. openssl is only used for key generation and only then if the keys are of a type that openssl can generate. BigInteger.php may use openssl for modular exponentiation. But it'll preferentially use gmp if it's available. If not it'll use openssl (if it's available) in conjunction with bcmath or it's own internal implementation.\nThe thing with RSA is that OpenSSL just doesn't provide the features that phpseclib offers. It doesn't support multi-prime RSA and in looking at openssl_public_encrypt it doesn't look like you can change the hash for OAEP or PKCS1 encryption. openssl_sign doesn't appear to support PSS signatures either. And the key formats...  OpenSSL doesn't come anywhere close to supporting the multitude of key formats phpseclib supports. I suppose, in theory, phpseclib could convert the keys and then pass PKCS1 formatted keys to OpenSSL, but meh.\n. It's already the default hash algorithm in the master branch's Hash.php and there's a pending pull request that makes it the default hash algorithm in RSA.php: See #902.\nThe default will not be changed in either the 1.0 or 2.0 branches as that would be a BC break.\n. Yes. By default, phpseclib uses an IV of null characters if one isn't explicitly provided to it. Behavior like this isn't exactly without precedent either. Both OpenSSL and mcrypt null pad keys if they're not long enough.\n. That's fine. Quoting wikipedia,\n\nAn initialization vector has different security requirements than a key, so the IV usually does not need to be secret. However, in most cases, it is important that an initialization vector is never reused under the same key. For CBC and CFB, reusing an IV leaks some information about the first block of plaintext, and about any common prefix shared by the two messages.\n\nhttps://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Initialization_vector_.28IV.29\n. > Maybe a random IV could be made used by default in future?\nI'd then have to add a new method - getIV().\nI think the ideal approach would just be to throw an exception if setIV() wasn't called and you're using any mode other than ECB.\n. Looks like PHP 5.6.0 introduced that as a change to mcrypt_encrypt. Interesting - did not know that!\nI'm going to re-open this to keep track of this.\n. I'm not a big fan of it tbh. If end users want to prepend or postpend or do whatever with their IV then that's on them. But I don't think it's appropriate for the library to do so.\nIf you manually set the IV should it still prepend the manually set IV to the ciphertext? Is Net/SSH2.php going to have to do substr($ciphertext, $cipher->getBlockLength()) every time it wants to send another packet to the server?\nIn my mind, stuff like AES.php, DES.php, etc, should be seen as cryptographic primitives. They provide a low level API that you can have very fine tuned control over. But if you don't know what you're doing w.r.t. crypto then they're probably not the optimal API for you.\nLike until AES-GCM and the like are implemented it'd probably be good to append an HMAC as well. And maybe the result ought to be base64 encoded too. But the more stuff like that I do and the less low level it becomes. And stuff like Net/SSH2.php needs a low level API.\nMaybe in the future I can do something like...  Crypt/Cipher.php that'll implement a higher level API for people who don't even know what HMAC is. It could chose the algorithm for you, block cipher mode, etc. But that can be a project for a later date!\n. But I do like the idea of throwing exceptions. Just need to implement that..\n. The reason it was 1024 was not by coincidence. It was because generating 2048-bit keys could potentially take an obscene amount of time. ie. internal mode (no OpenSSL, no gmp, no bcmath) on PHP 4.4 or 5.0. The following chart demonstrates the situation:\nhttp://phpseclib.sourceforge.net/math/intro.html\nThat said, the 2.0 and master branches now require 5.3 and PHP has gotten a lot faster since then so I suppose the original motivation is no longer as applicable as it once was.\n. I'll just do it in my RSA branch. I still think this should only be changed in master. Right now if people are generating keys with 2.0 they may be content with the speed but if we up the number of bits keys are they may find the new speed to be unsatisfactory. And since the 2.0 branch is aiming to maintain BC...\nIn the master branch it doesn't really matter. Everything in the master branch is different as is and no one should have any expectations w.r.t. to the API or anything.\n. See https://github.com/terrafrost/phpseclib/commit/6abbbfdfe3fe040e017d3ace58c1241c122dd581\n. This has been merged.\n. That should work. Altho removing the trailing == could cause base64_decode() to fail.\nThat said, I'm not completely sure what you'll be doing with your crypto. Typically, you want to some sort of authentication with an HMAC as well. Some algorithms have do both but phpseclib does not currently implement those algorithms. In lieu of that you can do separate encryption / authentication. Wikipedia provides a discussion of the various approaches here:\nhttps://en.wikipedia.org/wiki/Authenticated_encryption#Approaches_to_Authenticated_Encryption\nSSH does Encrypt-and-Mac but Encrypt-then-Mac is supposed to be the best.\nAnyway, if you have more general crypto questions along these lines you'd probably be better off posting at http://crypto.stackexchange.com/ . I can help you out if you have phpseclib-specific questions but for more general questions...  you can get answers from a wider array of people over there. So like instead of having to wait 6h for me to reply you might get a reply over there in like 30 minutes.\n. I would just do \\phpseclib\\Crypt\\Random::string($iv_size) (if you're using the 2.0 or master branches).\nAs for the length of the IV...  do $cipher->getBlockLength().\n. It's already defined in Crypt/Base.php:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Base.php#L554\nDoes it not work? I'll try to test it out tomorrow the day after or something. I need to go to bed atm lol\n. First, I apologize for not being able to review this sooner.\nAnyway, I see getBlockLength() in the 2.0 branch:\nhttps://github.com/phpseclib/phpseclib/blob/2.0/phpseclib/Crypt/Base.php\nIt's not in the 2.0.0 tag but it is in the 2.0 branch. #827 added it to 1.0 and then 1.0 was merged into 2.0 and 2.0 merged into master.\nA quick test demonstrates this:\n``` php\n<?php\ninclude('autoload.php'); \n$loader = new \\Composer\\Autoload\\ClassLoader(); \n$loader->addPsr4('phpseclib\\', DIR.'/phpseclib2.0'); \n$loader->register(); \nuse \\phpseclib\\Crypt\\Rijndael;\n$cipher = new Rijndael();\necho $cipher->getBlockLength();\n```\n\nIt seems you forgot to release a new version!\n\nIncorrect.\nI don't necessarily have a problem releasing a new version soonish but for the 1.0 and 2.0 branches but I'm not going to do so every time I make a commit or add a new function.\nThere are a number of reasons for this.\n1. You're best off using the 2.0 branch with Composer. You can get the latest git version by doing composer require phpseclib/phpseclib:2.0.x-dev.\n2. I provide most of the support for this library. I develop most of the features for this library. I am the sole maintainer of the documentation. And I'm the only person who does releases and releases take time.\nIn theory, a good formal release ought to be properly tested. PHP and phpBB and a lot of bigger projects do release candidates before they do an actual release. For the 1.0 branch I'd also need to update the PEAR channels. For both branches I'd need to research what changes have been made between the new version and the old version so they could be added to a changelog. I'd also need to update the links on the website, etc.\nA good release takes time and every time I do a release that's time I'm not spending doing development, support, or documentation or anything else.\nIf someone else did releases and wanted to release more frequently I wouldn't have a problem with that. But no one else does do releases. And I'm not going to give you the ability the releases either. The people who are listed as developers and have commit access are people who've earned my trust. You've interacted with me for a week and in that short amount of time have made unfounded accusations. ie. is the project even being maintained anymore, etc.\nAn easy way for you to earn my trust and respect would be to create a repo under your account and redo the documentation. I might not use it but then again I might. Sometimes that's just the risk you gotta take. But right now you haven't done nearly enough to merit the kind of access that would be necessary to do releases.\nAnyway, moving on to your changes...\nI'm not a big can of getIVLength. It's the block length. Having getBlockLength and getIVLength is just confusing. I mean, I get it - one is returning bits and one is returning bytes. But you wouldn't at all know that from the method names. If you want to be able to toggle between bytes and bits without diving by 8...  I think you'd be better off passing a new parameter into getBlockLength.\nI'm also not a big fan of createIV. If you want to create an IV do Random::string($cipher->getBlockLength() >> 3) or something. That said, I don't feel as strongly about createIV as I do about getIVLength. If a compelling enough case can be created for its inclusion I might be up for it but right now I'm not.\n\nWould you like I add two methods for base64 decode/encode IVKey if user needs to transmit it?\n\nIf someone wants to base64_encode something can't they just do that themselves? The fact that I'm not a big fan of the createIV function not withstanding if we add it for that then do we also add options to return in base64 or hex for encrypt and decrypt as well? I'm thinking not. Building in PKCS1 padding makes sense because that's a little more involved than just passing the output through an existing function. PBKDF2 (eg. setPassword) makes sense for keys for the same reason. But base64_encode'ing? If you want base64_encode'd data you don't need built-in support to do that.\n. > and I don't think normal users would even know what >> operator is, let alone applying this operator on 3!\nYou can do floor($bits / 8) as well.\nI also think that if it's mentioned in the documentation (which I plan on redoing when 3.0.0 is released) it should't be a huge issue.\n. v1.0.1 and v2.0.1 have been tagged and released.\n. I think what might be better is to put this stuff in the tag descriptions themselves:\nhttps://github.com/phpseclib/phpseclib/releases\nThe justification being as follows:\nhttps://github.com/phpseclib/phpseclib/pull/624\nhttps://github.com/phpseclib/phpseclib/issues/756#issuecomment-130324051\nOf course, no one has really weighed in on that proposal.\nAnd it could just be that I suck at release management too meh. Like maybe what works for other projects doesn't work for me because it's an area I'm deficient in :(\nThat said...\n- No autoloader is provided anymore (use Composer)\nAn autoloader was never provided. In the 1.0 branch include's are done on required files at the time that they're required. In 2.0 an autoloader is mostly required. Technically, you could just load all the classes you knew were going to be using in advance, but that's a bit impractical.\nWhat if, instead, that line read like this?:\n- the use of an autoloader is now required\nIt may not be technically correct but for 99% of use cases it is.\n. I squashed your two commits into one and then cherry-picked your commit into the 2.0 branch, which I then merged into the master branch:\nhttps://github.com/phpseclib/phpseclib/blob/2.0/CHANGELOG.md\nhttps://github.com/phpseclib/phpseclib/blob/master/CHANGELOG.md\n. I'll try to take a look at this this weekend. This week has been super busy for me at work :(\n. Having had a chance to read this...  it looks like you did succeed in figuring this out - nice job! When I redo the documentation I plan on mentioning the inclusion of extensions in CSR's. Adding a note that some CA's might require at least one extension would be a good idea.\nAlso, \n45:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption      45:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption\n   56:d=4  hl=2 l=   0 prim: NULL                             | ***MISSING NULL AFTER ALGORITHM***\n   58:d=3  hl=4 l= 271 prim: BIT STRING                       |    56:d=3  hl=4 l= 271 prim: BIT STRING\nIt's missing the NULLs because the NULL is optional. More info can be found here:\nhttp://security.stackexchange.com/q/110330/15922\n. #721 did this for X509's but not for CSR's. But CSR's now do this as well as of https://github.com/phpseclib/phpseclib/commit/b6801c837c4683f282b5c8e2815de995a8683ace . Thanks!\n. > Aren't you going to release a new version that we will have getBlockLength() method as you said and my two methods I did pull request? Is this repository still maintained at all??\nYou made your pull request three days ago and you're now wondering if this repo is maintained?\nDo realize that I have a regular job and maintaining phpseclib isn't a part of that job's job description.\n. So you're able to connect to the HP procurve from XAMPP but not from SunOs 5.10? If so can you also post the logs of the connection from the XAMPP server?\nMy first guess would be that maybe commenting out these two lines in Net/SSH2.php would help:\nphp\n            'arcfour256',\n            'arcfour128',\nWould you be able to provide me with the IP address / port? If so you can email them to terrafrost@php.net. I wouldn't need a login to duplicate the problem - all I'd need is to be able to make a TCP connection.\n. Without being able to directly connect I am highly confident that this issue will simply go unresolved. This happens time and time again. Someone reports a problem, their SSH2 server winds up being in a LAN, and then when I ask for more info, they simply cease following up after a certain point. Example:\nhttps://github.com/phpseclib/phpseclib/issues/895#issuecomment-163673885\nBasically, debugging by proxy is a PITA for all parties involved. Instead of me making a change and finding out if that change achieved the desired effect instantly it could take 48h for me to find out if a single change worked (eg. I reply on Friday and you don't respond until Monday because you had weekend plans or some such). And that's just one change. In the course of diagnosing an issue I could make, who knows, maybe like 10-20 changes. Normally, it might take an hour to make all those changes, but with debugging by proxy...\nI'd ask if you could give me limited VPN access but I suspect that won't happen so whatever.\nIn any event...\nI note that on XAMPP you have bcmath but on the SunOs 5.10 machine you don't. I very seriously doubt this'll fix anything but I guess you could try enabling bcmath on the SunOs 5.10 machine.\nI'd also check the sha1 hash of Net/SSH2.php on both the SunOs 5.10 machine and on the XAMPP machine, just to make sure that they're running the same versions.\nAlso, maybe just try brute forcing algorithms until you find one that works. ie. comment / uncomment out algorithms until you find one that works. This is something I could make a lot easier but, atm, I have other phpseclib priorities...\n. @peticel - you'd do well to post a new issue, as well, instead of replying to an existing one. Doing so will make it harder for me or others to lose track of your post.\nThat said, to assist you further I'd want to see logs. You can enable logging by doing define('NET_SSH2_LOGGING', 2) and then, later, doing echo $ssh->getLog().\n. openssl_random_pseudo_bytes and mcrypt_create_iv on Windows pretty much do the same thing. They utilize the Windows Crypto API to create random bytes. I can provide links to the relevant files in the php-src repo but not right now - among other things I need to be somewhere in an hour.\n. > I believe openssl is somewhat preferred these days because it's actively maintained and mcrypt is not?\nIt's technically not mcrypt that's creating the IV - it's Windows. The PHP sources, as promised:\nhttps://github.com/php/php-src/blob/7014a0eb6d1611151a286c0ff4f2238f92c120d6/ext/openssl/openssl.c#L5008\nhttps://github.com/php/php-src/blob/7014a0eb6d1611151a286c0ff4f2238f92c120d6/ext/mcrypt/mcrypt.c#L1392\nThey're both calling php_win32_get_random_bytes() on Windows. And this is in the PHP bindings - it's not calling any function from the mcrypt lib itself to achieve this particular bit of functionality. If it were it'd call php_mcrypt_do_crypt, which in turn would call some mcrypt_* function.\nIn Linux they behave differently. In Linux mcrypt looks at /dev/random or /dev/urandom and OpenSSL calls OpenSSL's RAND_pseudo_bytes(). But even in Linux mcrypt is still not calling mcrypt lib functions.\nSo in so far as mcrypt is concerned...  even if the mcrypt library itself has been abandoned if the PHP bindings to mcrypt are still maintained mcrypt_create_iv should still be good to go since it doesn't actually rely on anything mcrypt.\nNone-the-less, I can change it around to make it more clear. Give me a few days.\n. Composer uses spl_autoload_register and phpseclib's current use of class_exist isn't breaking anything for that:\nhttps://github.com/composer/composer/blob/5752559ae8837d975dc65976a7ffb77c00276568/src/Composer/Autoload/ClassLoader.php#L279\nI mean I think it might make sense to disabling autoloading for this stuff:\nhttps://github.com/phpseclib/phpseclib/blob/94fdbba2aab0a0c6a3554ed879e3fedc94428538/phpseclib/Net/SSH2.php#L1231\nBut then again if autoloading does take place whenever class_exists is called...  well, having more Crypt_* objects than is required certainly won't hurt anything..\n. If you could provide some example code where it is a problem that'd be helpful.\nThanks!\n. Give me a few days to look at this...  this weekend is just shaping up to be quite shitty. Last weekend the server my companies website is hosted on died and had to be rebuilt from scratch. Through out the week I've been finding issues relating to that and this weekend my CEO is wanting me to launch a big new feature I've been working on Sunday night. And I'm not at all ready for this feature to go live. Maybe I would have been had it not been for the server crash but...  well there was the server crash so I have a lot of shit to do.\nAnd then, on top of that, I need to find a new apartment asap, 'cause my current apartment just denied my gf who's supposed to be moving in with me from being on the lease. And I want to take a look at #914 as well this weekend.\nSo give me a few days and I'll respond appropriately.\nThanks.\n. So you're doing two things.\n1. You're throwing an exception if the key isn't long enough.\n2. You're truncating the key if it is too long.\nI don't believe either of these is appropriate.\nQuoting RFC2104:\nThe authentication key K can be of any length up to B, the\n   block length of the hash function.  Applications that use keys longer\n   than B bytes will first hash the key using H and then use the\n   resultant L byte string as the actual key to HMAC. In any case the\n   minimal recommended length for K is L bytes (as the hash output\n   length).\nUsing a key shorter than the block length may not be recommended but it is supported and may, for purposes of interoperability, sometimes be necessary.\nSome test code:\nphp\n<?php\necho hash_hmac('md5', 'zzz', 'z');\necho \"\\n\";\necho hash_hmac('md5', 'zzz', 'z' . str_repeat(\"\\0\", 63));\necho \"\\n\";\necho hash_hmac('md5', 'zzz', 'z' . str_repeat(\"\\0\", 64));\necho \"\\n\";\n. > If I understood correctly, condition 1 should be removed and condition 2 should hash the key with the same method to use it as key instead of truncating?\nYup! Altho hash_hmac already does that\n. I'm okay with this but I'd like to @bantu or @GrahamCampbell to chime in if possible. I mean I've used Composer but I don't consider myself to be a Composer expert so I'd kinda be more comfortable if they were the ones to give final approval.\nIf they don't respond in a few days I'll just go ahead and merge it. In the mean time I need to take a look at your other issue! I haven't forgotten - this weekend just was busier than I anticipated (and I had already been anticipating a busy weekend meh) :(\n. OK. I'll try to merge it this evening - thanks!\n. I cherry picked the commit from your branch into the 1.0 branch, which was then merged into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commit/c24ee966adac6c28feae2d1fe530b18c44235088\n. I was thinking I might try to do a release this weekend just because I haven't done a release in a while (altho that said I'm also in no great rush to do a release) but @GrahamCampbell suggested that this perhaps ought not be in the 1.0 or 2.0 branches:\nhttps://github.com/phpseclib/phpseclib/commit/c24ee966adac6c28feae2d1fe530b18c44235088#commitcomment-15403305\natm idk what I should do meh:(. Keep it in all branches or delete it from 1.0 or 2.0. I'll figure it out :)\n. Should be fixed with this commit:\nhttps://github.com/phpseclib/phpseclib/commit/0905143fc1f42f7486614060a95a57a433ee5c7c\nThat commit has been merged into the 2.0 and master branches as well. LMK if it works for you!\n. Normally I'd say \"whenever I feel like doing the next release\" but I was already planning on doing a release this weekend so this'll just be in that release.\n. v1.0.1 and v2.0.1 have been tagged and released.\n. You'd be better off doing SCP::SOURCE_STRING just to make it more clear what that third parameter is referring to.\nThat said...  how big is the file? In lieu of knowing that...  try getting me the logs. You can do so by doing define('NET_SSH2_LOGGING', SSH2::LOG_COMPLEX) at the top of the file and then do echo $ssh->getLog() after the $scp->put().\n. > I tried debugging the SSH2 and SCP class adding flags to check if the size of the file that was being trasnferred was the actual size file, in every case the size was correct.\nSo when the flags were present it was the correct size but when they weren't present it wasn't the correct size?\n\nI will try to get some logs on monday.\n\nThat would be helpful - thanks!\n. >  On the other hand, maybe the non-consideration of self::MODE_STREAM is correct here (which makes the provision of IV for it optional, but possible), and the IV needs to be provided in https://github.com/terrafrost/phpseclib/blob/d5a868ed4f07624bf9df76fd877ace54da85c093/phpseclib/Crypt/Base.php#L705, etc.? E.g., from mcrypt_encrypt() manual (emphasis mine):\n\n\niv\nUsed for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.\n\n\nI think your initial thought was the correct one. phpseclib currently only implements one stream cipher - RC4. And in RC4 the only way you can have an \"IV\" is if you simulate it by adding it to the key as was done in WEP (ie. it's not really an IV).\nMaybe there are other stream ciphers that use something that could be called an IV but RC4 isn't one of them.\n\nFrom its manual (emphasis mine):\n\niv\nUsed for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.\n\n\nNice observation! That'll be something I can look into when I do a PR for updating how IV's of invalid lengths are dealt with.\nAnyway, the changes you recommended have been made - thanks!\n. I don't know why this isn't working but I suppose it's not essential that it does. Travis CI is already testing against PHP 5.3 so testing against PHP 5.3.3, in particular, seems a little unnecessary, so I've just removed it from .travis.yml.\n. Looks good! Do you want to do a commit like this for the 2.0 branch too? You could merge that PR into this branch using git merge -X ours use_cleanup-2.0 as well. Or I can do the merging myself too lol. But I think they'd definitely be good for the 2.0 branch as well :)\n. Merged: https://github.com/phpseclib/phpseclib/blob/master/LICENSE\nThanks!\n. Try it now. Thanks for the heads up!\n\nThis seems critical for people using the PEAR channel and expecting using the last version, especially for a security library.\n\n1.0.1 wasn't a critical release. It was more of a \"I haven't done a release in a while\" release lol\n. It looks like \"Visual Bakery Composer\" is not available for free download. It'd be nice to be able to view the source to confirm that __sleep is private instead of public but whatever.\nAnyway, it looks like this behaves differently on different PHP versions. Here's my test script:\n``` php\n<?php\nclass test {\n    private function __sleep() {\n        return array();\n    }\n}\n$a = new test();\necho serialize($a);\n```\nI was only able to get a fatal error on PHP 5.2 and earlier. 5.3+ gave warnings instead. I was able to eliminate the error if I did json_encode instead of serialize but json_encode is only available as of PHP 5.2 so for 5.1 and earlier I employed a modified version of your method.\nSee #934 and LMK if that fixes the issue for you.\nThanks!\n. > you're getting less bits of information into the result, since it just puts in an unnamed object (because that's all the JSON format supports) (whereas serialize() on PHP 5.3+ is retaining the PHP class name in the serialized output).\nWell, technically, you could get less entropy if the __sleep() method returned, for example, an empty array (like is being done in my above example).\nBut assuming the __sleep() method isn't doing that it's definitely less entropy but it's not like having objects assigned to $GLOBALS is a prerequisite. $_OLD_SESSION, $GLOBALS, $_COOKIE, etc, could all, in theory, be empty. I don't think it's possible for $_SERVER to be empty (unless  you overwrote it).\n. I've removed the json_decode calls and am instead just doing safe_serailize. Well, actually, phpseclib_safe_serialize (I renamed it to avoid name conflicts)\n. Good catches! I've updated the code - thanks!\n. Didn't mean to close this - I hit the wrong button lol. It's been re-opened.\n. > True, but disabling session_start() seems to be a valid configuration option. (Unlike, e.g., a patch to the PHP interpreter itself.)\nIt's just as valid a configuration option as disabling fsockopen is (which'll break SSH1 / SSH2 / SFTP), as disabling base64_decode is (which'll break a lot of RSA.php file formats and X509.php), etc. There are lots of functions which, if disabled, will break phpseclib, and checking for all of them isn't practical.\n\n$_OLD_SESSION: Does this one exist? It's not mentioned in https://secure.php.net/manual/en/language.variables.superglobals.php\n\nIt's defined, earlier, with this line:\nphp\n            $_OLD_SESSION = isset($_SESSION) ? $_SESSION : false;\nThe idea being to save it if it's already been defined by a previous session_start(). crypt_random_string() doesn't do a previous session_start() but it's possible the calling program could.\n\nOthers: It seems that they may be non-existent, too. From https://secure.php.net/manual/en/language.variables.superglobals.php:\n\nThat's a good point. I can add an isset check for everything else. If $_SESSION isn't available then there's not even any pretense of crypt_random_string() being secure.\n. > The amount of time wasted on this PR is ridiculous.\nI actually kinda agree. I've half been tempted just to say \"so you have code that has a private __sleep method? That's not a problem phpseclib can be reasonably expected to fix - that's a bug in your code!\". But I think with my latest commit this should be resolved. Of course, I've had that thought that for the past few commits lol meh.\n. > 1) Are the encode/decode functions the only touch point to alter? Are there pieces elsewhere in the library I have neglected to account for?\nI think what you mentioned is sufficient.\n\n2) inet_pton and ntop were introduced in PHP 5.1 (5.3 for Windows), are those acceptable functions to use? Or do I need to duplicate their functionality in a more-backwards-compatible way?\n\nI'd say just have it target the 2.0 and master branches. Don't bother with the 1.0 branch. If push comes to shove a shim can be created for the 1.0 branch.\n. I apologize for the delay! This has been merged - thanks!!\n. Using the master branch is a bit inadvisable since the API is subject to change. The 1.0 and 2.0 branches are guaranteed to have a stable API. The master branch otoh does not.\nThat said, if you're going to use the master branch, what'd be more helpful are the logs. You can get them by doing define('NET_SSH2_LOGGING', SSH2::LOG_COMPLEX) at the top and then do $ssh->getLog(). If you could then post what you get that'd be helpful.\nThanks!\n. So there was an issue on the master branch with publickey auth for SSH2. https://github.com/terrafrost/phpseclib/tree/ssh-fix-publickey fixes that. Still need to do a PR for it tho.\nThat said, your log snippet is a little strange as it's not showing any key exchange algorithm negotiation packets. The stack trace has https://github.com/phpseclib/phpseclib/blob/750f7652c71c293fadf7818b5421406e13a91dc1/phpseclib/Net/SSH2.php#L1096 being called and then https://github.com/phpseclib/phpseclib/blob/750f7652c71c293fadf7818b5421406e13a91dc1/phpseclib/Net/SSH2.php#L2926 which jibes with what you've posted of the logs but that's before phpseclib has had a chance to do much of anything. It's not a problem with unsupported algorithms, badly implemented algorithms, bad window size or even malformed packets because it's not able to get far enough for any of that to be an issue. Basically, at that point, all that's being done is this:\n<?php\n$fsock = fsockopen($host, $port);\nfgets($fsock, 1024);\nfputs($fsock, \"SSH-2.0-whatever\\r\\n\");\nfgets($fsock, 1024);\nI mean, it does a little more than that but not much more than that. And if that's causing the server to kill the connection...  well there's not much that I'm going to be able to do.\nAs for why the 2.0 branch would work and not the master branch...  I have no idea. That makes about as much sense to me as it would if someone claimed that <?php echo 'hello, world!'; ?> instead output \"goodbye cruel world!\"\nI suppose it also goes without saying that I'm unable to duplicate the issue (if I was I wouldn't have been able to test https://github.com/terrafrost/phpseclib/tree/ssh-fix-publickey)\n. First, I'd like to apologize for the tardyness of the response. I was moving this weekend.\nAnyway, it looks like you're using the Wordpress plugin. I wish someone else would just take that over. https://github.com/phpseclib/phpseclib/pull/763 kinda addresses this but that adds a compatability check via composer, which wouldn't be too benificial for the Wordpress install. I mean, I guess the plugin could be rewritten to include the Composer generated autoloader but idk.\nRegardless, nice find!\n. First, I apologize for the delay in responding to this. This has been a particularly busy week at work.\nThat said, I'm guessing you're running PHP 5.3? I was able to reproduce the \"Invalid HMAC\" error on 5.3.27 but not the \"empty Initialization Vector (iv)\" error.\nThe fix for the \"Invalid HMAC\" error is as follows:\nhttps://github.com/terrafrost/phpseclib/commit/bfd467532bf75c03960a5454cb734bba61c96406\nI added a unit test demonstrating the fix as well:\nhttps://github.com/terrafrost/phpseclib/commit/b972a4b36de9c059eb0a42e8639fe2a1cade52dd\nAs for the \"empty Initialization Vector (iv)\"...  I was able to reproduce in 5.3.3. Basically, it seems like that's a bug that later versions corrected. ie. for ECB mode an initialization vector is /not/ needed. The only reason I'm utilizing ECB mode in 5.3 is because you couldn't disable padding in 5.3 so I'm using trickery to remove the padding.\nI could just do str_repeat(\"\\0\", $this->block_size) as an extra parameter for that call of openssl_decrypt but I'd also like to add an explanation in the comments as to why I'm doing that when superficially it should not be necessary and rather than brute force through 5.3 versions until I find the one that fixes it (since the changelog doesn't appear to offer any insight)...  I think knowing the version you're using would help.\n. The fix has been merged into the 1.0, 2.0 and master branches.\nAs for the IV error... I'm only able to reproduce the IV error on PHP 5.3.3. Without the IV explicitly defined or with it set to '' I get the following:\nWarning: openssl_encrypt(): Using an empty Initialization Vector (iv) is potentially insecure and not recommended\nBut if you define the IV I get this error:\nWarning: openssl_encrypt(): IV passed is 16 bytes long which is longer than the 0 expected by selected cipher, truncating in ...\nSo basically, the only way to fix the issue is to use the error suppression operator and that would incur a performance penalty.\nSample code:\nphp\nopenssl_encrypt('', 'aes-128-ecb', str_repeat('x', 16), true, '');\nopenssl_encrypt('', 'aes-128-ecb', str_repeat('x', 16), true, str_repeat('y', 16));\nBasically, I think the best fix for this is just going to be to adjust the error_reporting level.\nSo I guess half the errors (the more serious half) have been fixed and for the half that hasn't been fixed there's a workaround that can be done.\n. It's gonna be impossible to say what the error could be without more info.\nIf you're not seeing any errors in the web server logs try doing this, at the top:\nphp\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n. Good catches GrahamCampbell and Joey3000! The suggested changes have been implemented - thanks!\n. The suggested changes have been made and the branch rebased!\n. [Mon Feb 08 11:27:29 2016] [error] Can not read response from /usr/local/ZendSvr6/bin/php-cgi.bin (0.0) - [0] There is no error. isn't that helpful. Also, I'm pretty sure the author of the SO post is the same guy who posted this:\nhttps://github.com/phpseclib/phpseclib/issues/939\nAnyway, my response to you would pretty much be the same.\n\nIt's gonna be impossible to say what the error could be without more info.\nIf you're not seeing any errors in the web server logs try doing this, at the top:\nphp\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n\nThat said...  so you have code to send you an email when $sftp->login() returns false. You're calling a custom function - sendmessage(). So one possibility is that sendmessage() is just not defined. I mean, are you even getting the email? Your post just says you're getting an error 500.\nIf you aren't getting the email one thing you could do is to put exit('this far'); before the sendmessage(). When you run the script, after that modification, do you see \"this far\" output on the screen? You could then move the exit('this far'); to after the sendmessage() call. If you then are seeing an error 500 instead of a \"this far\" error...  well that would imply that the problem is with sendmessage(). Either it isn't defined or it has some sort of error within it.\nSo, I guess first things first. Assuming you can't do the ini_set / error_reporting stuff I mentioned...  let me know if you're getting the email and if not do the exit('this far'); thing.\n. > Actually, it\u2019s not the same person.  (Sorry, it was just a coincidence that someone else encountered the same issue)\nNo, I'm pretty sure it is the same person. #939 was posted by a guy with the name of Stantastic and the SO post was posted by a guy with the name of Stantastic as well. I mean, I suppose it could be different people coordinating the efforts, but that'd just be weird.\nAlso, I asked if you were getting the email and I note that you did not actually answer that question. So I guess I'm just going to have to assume that you didn't.\nSo I'll just have you do more of the same exit('this far') in Net/SSH2.php. You'll need to follow the instructions to the letter cause otherwise this exercise will be useless. Like you didn't post your modified code so idk if you added the exit('this far') before or after the sendmessage() call so I'm just having to make the assumption that you did it before, even tho I can't know that for sure.\nSo let's, for now, just verify that login() is being called. So take this function:\nphp\n    function login($username)\n    {\n        $args = func_get_args();\n        return call_user_func_array(array(&$this, '_login'), $args);\n    }\n...and replace it with this:\nphp\n    function login($username)\n    {\nexit('login called');\n        $args = func_get_args();\n        return call_user_func_array(array(&$this, '_login'), $args);\n    }\nThis won't fix the problem but it'll tell me if login() is being called. If it is and \"login called\" is being output then we'll delve into the _login method.\n. > Wow, what will it take to convince you that is not the same person.\n\nI\u2019m and RPG programmer on the IBM system, that has jumped into the PHP world and is asking for assistance.\n\nYes, but you did not post #939. This issue - the issue that you posted - is #943. I mean, I guess you could have posted both, with different accounts, but having multiple accounts would be a violation of github.com's TOS..\nAnyway, I'll look at the rest of your post shortly.\nThanks!\n. I think some of the confusion is that you're reading this via email. In my orig post I said this:\n\nAlso, I'm pretty sure the author of the SO post is the same guy who posted this:\n939\n\ngithub.com turns #939 into a link to https://github.com/phpseclib/phpseclib/issues/939 but on email it might remain #939. So when I said \"this\" I was refering to the link that on github.com would follow whereas you might have just seen a random #939 and not know what it was referring to idk.\n. You can email the credentials to terrafrost@php.net. That said, my current working theory is that it's more an environmental issue on your end. I mean, there's no harm in my attempting to connect from my own machine, but...  well, in your code, can you add exit('this far x1'); before $sftp = new Net_SFTP(\"$server\");? If you see \"this far x1\" can you then try moving the exit('this far x1'); line to after $sftp = new Net_SFTP(\"$server\");?\nie. what I'm thinking is that the include's are failing and that the fatal error is due to the fact that Net_SFTP just isn't a class that exists. If you were doing require, per this theory, it'd be dying when you're attempting to set the require's, but you're not, so I'm thinking it's dying on your attempt to initialize the Net_SFTP object.\n. I was able to login with 1.0.1 and the server name / username / password you gave me (I sent you a separate email with the code).\nSo let's recap what we know so far.\nThe constructor is being called but Net_SSH2's login() method isn't. But I guess that makes sense for Net_SFTP now that I look at the source code for the login() function for that.\nSo...\nIn Net/SFTP.php, find this:\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\nfunction login($username)\n{\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nexit('login called');\n\n-----[ FIND ]------------------------------------------\nif that works\n\n    if ($response === false) {\n        // from PuTTY's psftp.exe\n\n\n-----[ BEFORE, ADD ]-----------------------------------\n\nexit('this far x2');\n\n-----[ FIND ]------------------------------------------\nif that works\n\n    $this->pwd = $this->_realpath('.');\n\n\n-----[ BEFORE, ADD ]-----------------------------------\n\nexit('this far x3');\n```\n. > I tried your suggestions and it failed at exit('this far x2');\nSo you're saying that it did not echo out this far x2? That the only output you saw was login called?\nif so then let's undo the changes you previously made and do this:\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\n    if (!call_user_func_array(array(&$this, '_login'), $args)) {\n        return false;\n    }\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nexit('this far x4');\n\n-----[ FIND ]------------------------------------------\nif that works\n\n    if (!$this->_send_binary_packet($packet)) {\n        return false;\n    }\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nexit('this far x5');\n```\n. Try this:\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\n    if (!call_user_func_array(array(&$this, '_login'), $args)) {\n        return false;\n    }\n\n\n-----[ BEFORE, ADD ]-----------------------------------\n\nexit('this far x6');\n```\nIf that works but this far x4 doesn't then what I'd be wondering is if maybe call_user_func_array is disabled on your server via the disable_functions php.ini directive:\nhttp://php.net/manual/en/ini.core.php#ini.disable-functions\n. Also, please post your phpinfo(). Thanks!\n. So it looks like disable_functions doesn't have anything added to it.\nAnyway, you gave me the credentials for the box you're trying to login to - what about the box you're trying to login from? Is that something you could provide me with?\nAnyway, in lieu of that, can you try this?:\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\n    if (!call_user_func_array(array(&$this, '_login'), $args)) {\n        return false;\n    }\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nexit('this far x7');\n``\n. #947 should fix this.\n. So, basically, you're doing toput()what's already been done toget(). ie. withput()` 50 requests are sent, at a time, and then 50 responses are read back.\nOverall, I like the idea but I think the implementation is a little wonky.\nFor example,\nphp\n                $possible_packet_sizes = array($this->max_sftp_packet, $size);\n                if ($limit - $read > 0) {\n                    $possible_packet_sizes[] = $limit - $read;\n                }\n                $packet_size = min($possible_packet_sizes);\nI think this would be better:\nphp\n                $packet_size = $length > 0 ? min($this->max_sftp_packet, $length - $read) : $this->max_sftp_packet;\nWith that $limit could be deleted as well. But I think we can do a little better than that. So there's this part:\nphp\n        if ($length > 0 && $length <= $offset - $start) {\n            if ($local_file === false) {\n                $content = substr($content, 0, $length);\n            } else {\n                ftruncate($fp, $length + $res_offset);\n            }\n        }\nWith your changes the $length > 0 check is no longer necessary. I think we can probably eliminate that whole section if the $length <= $offset - $start thing is incorporated into the $packet_size assignment.\nGive me a few days to review this in more depth.\nThanks!\n. > but I fear that by using $packet_size = $length > 0 ? min($this->max_sftp_packet, $length - $read) : $this->max_sftp_packet; $length - $read may become negative if there there is a bug somewhere :D\nWell $this->max_sftp_packet can't be negative because it's hard-coded. $length can't be negative either because of the whole $length > 0 that my proposal has you doing. Thus the only way for $packet_size to be negative is if $read > $length but it can't because in your while loop you're doing $length < 0 || $read < $length. So if $length < 0 then $packet_size is $this->max_sftp_packet. If $length > 0 then $read < $length, at which point $length - $read is never negative.\nphp\n            $request_id_offset = 5;// just like that, a random number\nidk why you're doing this. I mean, sure, I could see some benefit if you were worried about getting responses in a non-sequential order, but you're not checking for that. As is it seems that all you're doing is using it to keep track of how many NET_SFTP_READ packets you've sent and if that's all that you're using it for...  you don't need to use $this->request_id to keep track of that. And if you're not using $this->request_id you can do away with the frequent resetting of it (eg. $this->request_id=1;) and you can just have it start from 0 instead of 5.\nphp\n        while (!$break_loop) {\nWhy not do while (true) {? Then instead of $break_loop = true;, later, you can do break;.\n. I apologize for the tardyness of this response - I've been busy moving.\nAnyway, this has been merged. I did make a few tweaks.\n- I renamed $subtemp to $tempoffset, which I think is a more accurate name\n- I renamed $break_loop to $clear_responses (same reason as above)\n- I took the while loop out of the if ($i > 0) check (which I deleted) and added a if (!$i) break; check before the while loop.\nThanks!\n. I'm not really a big fan of this. Heartbleed affects the SSL protocol and phpseclib isn't using OpenSSL to implement SSL. It's using OpenSSL to speed up modular exponentiation and it's using it to generate prime numbers faster. ie. the heartbleed vulnerability isn't really relevant for what phpseclib is using OpenSSL for.\nThat said, I can empathize with the concern over phpinfo() being disabled. I mean, on one hand, I question just how much phpseclib ought to accommodate PHP installs that have disabled arbitrary functions. fsockopen, being disabled, will, for instance, prevent phpseclib from working. So will fread and fputs. But in the case of phpinfo...  phpseclib doesn't really need it that much. It does some quick compatibility checking but if the function is disabled phpseclib can run just fine.\nI would say that doing function_exists('phpinfo') would be better but then again...   calling phpinfo() when it's disabled doesn't result in a fatal error - it results in a warning. A warning that is suppressed. Thus ob_get_contents() won't return anything and then OpenSSL will default to being enabled because of case !isset($versions['Header']) and case !isset($versions['Library']).\nI'd be up for removing the phpinfo() checks from the master branch (which is what this PR is targeting) but not because of phpinfo(). Rather, I'd be up for removing it because of the output buffering, which I'm now thinking I dislike. But if we do that then I think the version check should be removed as well. The constants, however - MATH_BIGINTEGER_OPENSSL_DISABLE, MATH_BIGINTEGER_OPENSSL_ENABLED and CRYPT_RSA_MODE should probably be kept.\n. What about just always using openssl on the master branch (which your PR is targeting), anyway? No version check, no phpinfo check, nothing. I'm thinking of upping the PHP requirements of the master branch to 5.6, anyway, so that, in and of itself, might take care of old OpenSSL versions.\nThat said, people shouldn't be using the master branch as the API is non-stable anyway.\nAs for the 1.0 / 2.0 branches...  if I actually knew what the error was I might be able to able to come up with alternative ideas for fixing it. But as is it's not an issue I'm able to reproduce and you've given me precious little information on the error.\nQuoting my last post, \"calling phpinfo() when it's disabled (via thedisable_functionsPHP INI directive)  _doesn't result in a fatal error - it results in a warning. A warning that is suppressed._\" So it is unclear to me how anyone would be seeing an error. If there are conditions under which@` doesn't actually suppress errors that'd be news to me.\nI can test to see if function_exists('phpinfo') returns true or not for disabled functions and include that if it does but I just don't see the point given the above.\nIs the issue that the phpinfo call fixes old? Yes. But then again, so is PHP4.4 and the 1.0 branch still supports it (assuming PHP_Compat is used). The fact that PHP4-style constructors exist cause E_DEPRECATED warnings for the 1.0 branch on PHP 7 but changing it would be a BC break. Removing old functionality just because it's intended for out-of-date versions of PHP is BC-breaking behavior.\n. I've removed the phpinfo() check from the master branch:\nhttps://github.com/phpseclib/phpseclib/commit/7a628c62b0071d03bde6be82c2f77acdadb20df2\nFor the 1.0 and 2.0 branches...  not using OpenSSL doesn't make phpseclib unusable - it just makes certain operations slower. At least if the gmp extension isn't present. But I can make loosen the condition that's currently in place. Instead of doing $versions['Header'] == $versions['Library'] I could do something like $versions['Header'] == $versions['Library'] && version_compare($versions['Header'], '1.0.1a') < 0) or some such (ie. the version in the header is less than 1.0.1a or something). But to do that I'd need to know what you're getting as the header and library versions.\n. For the 1.0 and 2.0 branches I've made it so that if both the header version and library version are both above 1.0.0 it'll let OpenSSL be used. When it was implemented the specific issue was with 1.0.0e (library) vs 0.9.8r (header).\n. Seems like doing both might be worthwhile? class_exists for people using <1.0.0 and function_exists for people using >=1.0.0? idk - I'm okay doing just >=1.0.0 as well!\nIt's just hard to have a super informed opinion since I have no idea what the deployment of either are like. Like if <1.0.0 had an install base of half a billion and >=1.0.0 had an install base of ten then keeping <1.0.0 support, for the time being, would probably be prudent, but idk what the install base is like!\n. Works for me! I'll try to merge tomorrow.\nThanks!\n. I cherry picked this into the 2.0 branch and then merged the 2.0 branch into master.\nThanks!\n. phpseclib 1.0 is compatible with PHP 4.4 through PHP 7 and anything in between (altho PHP 7 will give E_DEPRACTED notices due to 1.0's use of PHP4 style constructors).\nphpseclib 2.0 and master require PHP 5.3 minimum but work with all later versions as well.\n. Good \"catch\" lol.\nIt's been fixed with https://github.com/phpseclib/phpseclib/commit/698efd030a1a794fceba78eed4113fb5daa17bcc . Thanks!\n. Good catch. As of https://github.com/paragonie-scott/phpseclib/commit/fee6431badeeab42d2a59f94f365e345ab826705 phpseclib is already requiring libsodium 1.0.0+ so there's no need to check the version and do :: or \\ depending on the version that's installed.\nAnyway, this should now be fixed in the 2.0 and master branches:\nhttps://github.com/phpseclib/phpseclib/commit/9e586e79f1fadced93cea6b8dfa09c1bde7904c2\nThanks!\n. Fixed in the 1.0, 2.0 and master branches:\nhttps://github.com/phpseclib/phpseclib/commit/da36b5c91ef81fd422661dc164e14c65ba077278\nThanks!\n. First, I apologize for the delay - I've been busy moving and unpacking and meh.\nAnyway, the logs would help. You can get them by doing define('NET_SSH2_LOGGING', 2) at the top and then $ssh->getLog() at the end.\nIn lieu of the logs a number of possibilities exist:\n1. Maybe fsockopen() is failing. Like maybe you're trying plink from the same machine you're trying to connect to but you're running the PHP script from a different machine and the connection is being blocked by ip_tables or something. Or maybe fsockopen is a disabled PHP function or something. Or maybe you have su_php installed on the server that's running the PHP script and fsockopen can't connect to remote machines.\n2. Maybe the SSH server is looking for keyboard-interactive auth and fails on one bad login attempt. phpseclib, by default, tries to do password authentication and then keyboard-interactive auth if password auth fails.\n3. Maybe the SSH server hasn't implemented SSH correctly and is requiring zlib as the compression algorithm (even tho it should only be optional and none should always be presented as an option)\nThere are probably possibilities above and beyond that too that phpseclib couldn't really do anything about. But to have more of an insight I'd need to see the logs.\n. Fixed with #955. Thanks!\n. This has been merged:\nhttps://github.com/phpseclib/phpseclib/commit/cb2ccea219ac050ad92c7aaa296fe3110e55d634\nI created a unit test demonstrating the issue as well:\nhttps://github.com/phpseclib/phpseclib/commit/56acb6723cd6f8cddc27e87f41f74afed1137f46\n. The additional unit tests that Joey3000 commented on have been added and the result merged.\n. Nice finds! I've updated the code accordingly:\nhttps://github.com/phpseclib/phpseclib/commit/e40d6cc1cc9c7f0a6411583a599a4c54aadec31b\n\nOn the other hand, there seem to be official test vectors in http://www.larc.usp.br/~pbarreto/whirlpool.zip (linked to from the official http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html; the tests are supposedly ISO/IEC 10118-3:2004 conform, but I can't confirm since the latter is behind a paywall).\n\nI think it's fine as is tbh.\n\nBut, actually, Whirlpool doesn't seem to be supported (any longer?) by phpseclib - searching for the \"whirlpool\" string only brings up its tests. (Except for phpseclib\\Crypt\\Base.php where its PHP-provided implementation is used if available.) So, maybe its tests need to be removed altogether?\n\nYah - the way way Crypt/Hash.php works is that if the algorithm isn't explicitly supported it'll fall back to see if PHP's hash function provides built-in support. See https://github.com/phpseclib/phpseclib/pull/749#issuecomment-122706354 for more info. I guess what we could do is make it so that it throws an exception if an unsupported algorithm is provided. This would be consistent with the changes I made to the symmetric ciphers to make them less tolerant of bad input.\nie. in 1.0 Hash.php silently mangles bad input. If you do new Crypt_Hash('zzz') it'll do sha1. If the provided option is invalid it'll silently fall back to a valid option. Which is what how the symmetric ciphers worked in 1.0 / 2.0. ie. silently null padding keys, IV's, etc. But the paradigm in the master branch is already different for symmetric ciphers so changing it for hashes, as well, would be consistent.\n. One thing we need to keep in mind with doing Composer stuff for the 2.0 branch is that 2.0 doesn't necessarily require composer. What it requires is a PSR-4 autoloader whereas Composer does PSR-0, classmap and files autoloading as well. I guess that doesn't apply so much to paragonie/constant_time_encoding as it does to paragonie/random_compat but it is, none-the-less, worth keeping in mind.\nWith 3.0, in contrast, we're free to do mostly whatever we want as there's no BC we need to worry about.\n. What if we just do away with the whole version_compare thing and do this?:\n``` php\n        try {\n            return \\random_bytes($length);\n        } catch (Exception $e) {}\n    // at this point we have no choice but to use a pure-PHP CSPRNG\n    // ...\n\n```\n. Looks good! I'll figure out what's up with the unit tests later - I need to go do some errands lol.\nThanks!!\n. The composer.lock was the issue and the PR has been merged.\nThanks!\n. The default hashes of the master branch were changed to sha256. It looks like your ciphertext are using sha1 so you'll need to do this:\nphp\n$rsa->setMGFHash('sha1');\n$rsa->setHash('sha1');\n. The documentation is for the 1.0 branch. The 2.0 branch is mostly similar, save for the fact that it is namespaced. The master branch otoh is under development and has an unstable API. At some point a 3.0 branch will be created from the master branch but when that does happen the master branch will still have an unstable API. ie. the master branch will pretty much always have an unstable API.\n. Maybe you should look like 5 lines down. eg.\nphp\n    function login($username)\n    {\n        $args = func_get_args();\n        if (!call_user_func_array(array(&$this, '_login'), $args)) {\n            return false;\n        }\nIt's doing func_get_args(). Maybe you should look that up in the PHP manual. Might learn a thing or two.\nAs for the use of the var keyword...  phpseclib was written back in 2007, back when PHP4 dominated hosts. The 1.0 branch is BC with the original release. New features have been added, sure, but 1.0 will work on the same versions of PHP as phpseclib's initial release back in the PHP4 heyday.\nThe 2.0 and master branches are not PHP4 compatible, owing to their use of namespaces, among other things, but they still use the var keyword all the same. They could use public but public and var do basically the same thing. There is an on-going RFC for 7.1 for deprecating var in that version and removing it in 8.0. Whether or not it'll pass is an open question. But, to quote that RFC,\n\nvar is currently a simple alias for public.\n\nHere's the link:\nhttps://wiki.php.net/rfc/var_deprecation\nI can certainly, for the 2.0 and master branches, make it say public instead of var, but unless that RFC passes, it just isn't a high priority of mine since it is, as it stands, syntactically valid.\nThat said, I have no intention of making variables private or protected. private prevents child classes from utilizing variables, so there's that. But also the SCP class accesses \"private\" variables from both the SSH1 and SSH2 classes. Maybe in your mind that means phpseclib is crap and you're certainly entitled to think that. And if you think it's such crap do feel free to write your own alternative implementations to everything that phpseclib does.\nIn the mean time I'm going to create a new tag just for this ticket. Troll.\nThank you for your \"issue\". Have a nice day.\n. If in the event that you aren't trolling I apologize for my response. But your post really does read to me like that of a troll.\n. Oh - and, also, login() technically takes between 1 and infinite parameters. Check out the documentation:\nhttp://phpseclib.sourceforge.net/ssh/auth.html\n\"No Authentication\" takes one parameter - the username - and that's it:\nhttp://phpseclib.sourceforge.net/ssh/auth.html#noauth,\nThe example for multi-factor authentication has three parameters but you could technically have there be an 10, 20, 30 parameters, it doesn't matter:\nhttp://phpseclib.sourceforge.net/ssh/auth.html#multifactor,\nGiven the dynamic range of input it is not clear to me what a proper phpDoc block for that method would look like.\nBut, suicide to say, only the first parameter is required. The rest - the second parameter, the third parameter, etc - are all optional.\n. >  I didn't look for the _login function in the parent class \nYou obviously didn't see call_user_func_array either. Let alone even test it out. Typically end users ought not even be looking at the source code. In-so-far as they are concerned the implementation details are a black box. Except with you, where all you look at is the source code, and you do a half assed job, too.\n\nbroke many coding rules standards\n\nThat's true - it does do that. But do keep in mind, as I said, that the 1.0 version was released in 4.0's heyday and to maintain BC with itself still works on 4.0. But I guess BC isn't something you give a shit about. Following your advice I guess everyone who installed phpseclib with composer require phpseclib/phpseclib:~1.0 will have a broken product when 1.0.2 is released. But that's okay because at least ZiperRom1 will feel good about the universe!\n\nLike preferring annotate @access in phpDocBlock instead of simply put the visibility behind the method name\n\nI have already addressed this several times. Clearly reading comprehension is not a strong suit of yours. I suggest you go back to grade school. But I will add one other thing - the @access docblock comment affects what methods show up when you're building the documentation from the comments. By default private methods do not show up when you're building the documentation whereas public methods do. So by doing @access private on a public function that public function is basically being hidden from the default phpdoc parameters. And as I said earlier, the SCP class, for example, calls \"private\" methods. Making them \"public\" in the docblock comments might lead to other people using those methods when they're not intended for general use. The SCP class is internal to phpseclib so it's kinda private within the scope of phpseclib but not private within the scope of the class or it's inheriting classes (SCP doesn't extend SSH1 or SSH2).\nidk that the design utilized is the best possible design but then again \"best\" is subjective. If you or anyone else has an idea for a \"better\" API for SCP (or anything else) feel free to mention it and it'll be considered. Obviously not in the 1.0 or 2.0 branches, to maintain BC, but in the master branch.\n. A few other things too.\nSometimes when people have asked for help with phpseclib and have suggested that it wasn't connecting to their server I've basically debugged by proxy, which may consist of, among other things, calling private methods. ie. \"maybe calling this method will do the trick\" or \"maybe calling this 'private' method will give me more info with which I can make a diagnostics\". If I had to have people alter the code to adjust the visibility as well...  that'd be one extra hoop people would have to jump through and one thing I've learned...  the more hoops you ask people to jump through the less likely they are to do something.\nAlso, sometimes if phpseclib hasn't done something someone needs I've given them workarounds in the form of \"you can call these 'private' methods to do what you want until official support for what you're wanting to do is added\". In-so-far as I am concerned these pseudo-private methods are fair game for being changed (backwards compatibility isn't something I'm concerned about for pseudo-private methods / variables) but if you need a solution now, can live with the fact that newer versions of phpseclib may break what you're doing, and can't wait x months or however long it takes for me to do another release...  well phpseclib may still be able to accommodate you.\nOverall, I think private / protected solve a problem that was never really a problem to begin with. I've never seen anyone use \"private\" methods without explicitly being told to do so. So although using them may be considered \"best practices\" it also hinders my ability to provide support. And for what? So people like you can feel good about themselves?\nAnother thing to consider...  as I said, the 1.0 API was designed back in PHP4's heyday. It was designed with what I perceived to be the \"PHP Way\". But the \"PHP Way\" is changing. Back then the \"PHP Way\" was to silently fail and mangle invalid data to be valid without throwing exceptions or anything (not that PHP4 even supported exceptions). A lot of this has changed in the master branch. If you pass keys or IV's that are too short you'll get exceptions.\nThe \"PHP Way\" is changing but the versioned branches of phpseclib can't change with it for reasons of BC. The master branch can but that's the only one.\nAnd as for camel case...  how about you go file a bug report with PHP and ask them to change the DOMDocument API. That's completely camel case:\nhttp://php.net/manual/en/book.dom.php\nAnd I'm sure they'd be willing to break BC with every version of PHP since PHP 5.0 just because you said so. It may screw over millions of PHP users and make them never update again but that's all okay because ZiperRom1 said so!\n. Oh - something else too.\n\n150 + lines method\n\nIn-so-far as I'm concerned a method ought to be created when not doing so would result in duplicated code. Per that there's no point to creating an internal method (or a whole new object) if you're only going to use it once.\nThe thing is...  if you create a library and make it excessively object oriented with an excessive number of methods then that makes it harder to trace the code to understand what it's doing.\nI'll give an example.\nI used to do code reviews for phpBB modifications. And one modification I saw tried to abstract away string concatenation. It's an operation that you can do with a simple primitive but they abstracted it away. They used an object (defined in one file) that used a constructor and that extended another object (defined in another file). The method that they were using to do string concatenation also called a function in a third file. So I had to look in three different files and in four different places to understand that all the code was doing was string concatenation.\nIf you're goal is to obfusticate code and make it as difficult as possible for people to figure out what it is that you're doing, then yah, creating thousands of methods is a good thing. But if your goal is to actually write software that people can understand you don't do that.\nSome developers feel that they need to pigeonhole themselves into design patterns and other \"best\" practices while forgetting that a library also needs to be easy and intuitive to use and to maintain. Admittedly what qualifies as \"easy\" and \"intuitive\" is subjective, but none-the-less, if you think you can do better, I invite you to do so. Competition is never a bad thing. But I guess that would be too much effort for a troll.\n. I downloaded Magento CE 1.9.2.4 and it looks like it has phpseclib 0.3.1, which was released 3.5 years ago. I don't know why you're not able to update but what are you going to do if the fix were to make a code change? If you're unable to update the library why would making a one off code change be easier?\nRegardless, I'm willing to provide some support for the time being. When you download files and the error happens do any of files get downloaded? Also, try doing this, at the begining:\nphp\ndefine('NET_SSH2_LOG_MAX_SIZE', 1024 * 1024);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', 'phpseclib.log');\ndefine('NET_SSH2_LOGGING', 4);\nThat should create a phpseclib.log whose contents I can examine. You can post the contents in pastebin.com.\n. It's actually fastest with GMP. GMP is even faster than OpenSSL, per this:\nhttp://phpseclib.sourceforge.net/math/intro.html\nNewer versions of PHP are also quite a bit faster as well.\nOne thing to keep in mind is that those benchmarks for encryption / decryption - not for key generation. Key generation is just...  expensive.\nA few things you could do...  you could try to do exec('ssh-keygen -t rsa') if exec is available and if the ssh-keygen command exists and fallback to phpseclib otherwise. phpseclib doesn't do that because idk I just don't like CLI calls.\nYou could also try to kinda scale down depending on what's available. eg. do 1024-bit keys for PHP 5.5 without OpenSSL or GMP. Or do multi-prime RSA keys as well, which you can do by doing define('CRYPT_RSA_SMALLEST_PRIME', 256) or some such. This'll speed up key generation but it'll also reduce the security of the key. ie. a 4-prime 2048-bit key has about the same security as a 2-prime 1024-bit key. Actually, it may have /slightly/ more security but you're not getting the security you might be expecting all the same.\nYou could also do successive calls to $rsa->createKey(2048, 30). On the initial call you'd do $rsa->createKey(2048, 30) and you'd get the output. eg. $result['partial']. On subsequent calls you'd do $rsa->createKey(2048, 30, $result['partial']). You could use this to do a bunch of calls in succession via AJAX. In theory I guess you could have the browser work on generating primes concurrent with the server but idk.\n. Oh, also, since you're doing Wordpress plugins, maybe you could take over my SSH SFTP plugin! I don't really provide support for it or make any real updates to it or anything. I think it's a useful plugin and I think lots of people have found it useful but I just...  I just don't care that much about it. I don't devote as much time to phpseclib as I'd like and trying to maintain and support that plugin would mean even /less/ time for phpseclib.\n. What are you using for the SSH server? It's identifying itself as SSH-2.0--.Typically SSH servers identify themselves like SSH-2.0-OpenSSH_5.3p1 Debian-3ubuntu7.1 or some such.\nQuoting https://tools.ietf.org/html/rfc4253#section-4.2 ,\n```\n   When the connection has been established, both sides MUST send an\n   identification string.  This identification string MUST be\n  SSH-protoversion-softwareversion SP comments CR LF\n\nSince the protocol being defined in this set of documents is version\n   2.0, the 'protoversion' MUST be \"2.0\".  The 'comments' string is\n   OPTIONAL.  If the 'comments' string is included, a 'space' character\n   (denoted above as SP, ASCII 32) MUST separate the 'softwareversion'\n   and 'comments' strings.  The identification MUST be terminated by a\n   single Carriage Return (CR) and a single Line Feed (LF) character\n   (ASCII 13 and 10, respectively).\n```\nSo the \"softwareversion\" part of the identification string for your server is \"-\". I've never seen a \"softwareversion\" string like that and I think it would behoove the developers of that library to make that string a bit more meaningful.\n. There's this line:\nphp\nstatic $kex_algorithms = array(\n            'diffie-hellman-group1-sha1', // REQUIRED\n            'diffie-hellman-group-exchange-sha1' // RFC 4419\n);\nTry commenting out diffie-hellman-group1-sha1.\n. Can you connect with PuTTY and get me PuTTY logs? You can get the Putty logs by enabling logging. To do so go PuTTY->Session->Logging and checking the \"SSH packets\" radio button.\n. terrafrost@php.net\n. SFTP, itself, doesn't support filtering like that. Certainly it could be emulated - as Burnett01's code does - but that's all it'd be - an emulation.\nAnyway, I'll consider the feature as time permits. I'm at Disneyworld right now so time currently does not permit lol.\nThanks!. When I add a key without a comment ssh-agent auto-adds \"rsa w/o comment\" as the comment (as the following demonstrates [requires the master branch]):\n``` php\n<?php\ninclude 'vendor/autoload.php';\nerror_reporting(E_ALL);\n$agent = new \\phpseclib\\System\\SSH\\Agent();\nforeach ($agent->requestIdentities() as $identity) {\n    echo $identity->getPublicKey('OpenSSH') . \"\\n\\n\";\n}\n```\nThe output I get back from ssh-agent is as follows:\nIdentity added: test.pem (rsa w/o comment)\nSo I don't know how to duplicate the reported issue but I'm willing to concede that there may be circumstances where keys wouldn't have comments, despite my inability to create such keys. And even if there weren't the fact that the comment is being conditionally added...  if the comment were required the $length check ought not be there. So I think this is a good observation.\nAlso, I don't know why one of the $length = current(unpack('N', fread($this->fsock, 4))); was deleted from https://github.com/d-naumann-yatego/phpseclib/commit/2039530f7c865b8370d4d30137e8b9045c737261 . That change breaks Agent.php. But the change from \\BadConfigurationException to BadConfigurationException is a good one.\nAnyway, I've adapted this change to 1.0 and merged 1.0 into 2.0 and master.\nThanks!\n. Seems like stream_socket_recvfrom might be better?\nThat said, neither stream_socket_recvfrom or stream_get_contents could be used in the 1.0 branch to preserve BC (that branch is compatible with PHP 4.3+).\nWhat branch are you using anyway? You don't appear to be using 1.0.1 or 2.0.1 as line 3021 doesn't have packet_length in either of those tags.\n. > I also tried the 2.0 branch , but that failed on the random_bytes() function (i'm using php 5.4).\n\nIs the 2.0 branch production ready ?\n\nYou should be using tagged releases. eg. 2.0.0 or 2.0.1. The 2.0 branch, will never be production ready, per-say, because it's the tagged releases you should be using. I may, unintentionally, make a commit that may break the 2.0 branch, from time to time, and that's not a huge problem as you shouldn't be using that branch anyway. You should use the tagged releases. And if a release is botched a new release will be made.\nThe specific issue you encountered with the 2.0 branch is probably because (1) you're not using composer and (2) the 2.0 branch recently added https://github.com/paragonie/random_compat as a dependency. If you just download the 2.0 branch it won't work.  The 2.0 branch requires a PSR-4 compliant auto-loader so when I release 2.0.2 and if I were to create a zip file for it it would need to have random_compat included within it's directory structure such that a strictly PSR-4 compliant auto-loader would works. If you use composer it's not an issue because composer will manage all the dependencies for you. But downloading https://github.com/phpseclib/phpseclib/archive/2.0.2.zip...  I don't know if that should even be considered an officially supported download source. I mean, I guess I could add random_compat as a submodule for the 2.0 branch for people trying to download https://github.com/phpseclib/phpseclib/archive/2.0.2.zip but idk.\n. BTW my plan for the master branch, that'll eventually be 3.0.x, is to make that one require composer. So whereas 2.0.x can be made to work without composer without too much effort and be BC with past 2.0.x versions 3.0.x...  not so much. For example composer let's you do more than just PSR-4 autoloading so with 3.0.x if you're not using composer you might have to add extra include's to every file using phpseclib when you upgrade phpseclib to a new version whereas with 2.0.x you wouldn't have to.\n. > Still have the original problem and change fread() into stream_get_contents()\nYah - I still need to take action on that.\nW.r.t. composer...  what I'm tentatively thinking is that I could have a downloadable version that has the autoload file that composer generates included within it. Like Composer has a PSR-4 autoloader but it also does, for example, files autoloading too. So when you do composer update or composer install it creates / modifies vendor/autoload.php:\n``` php\n<?php\n// autoload.php @generated by Composer\nrequire_once DIR . '/composer' . '/autoload_real.php';\nreturn ComposerAutoloaderInit75fd5e89db521a456c50cc9b84a6cefb::getLoader();\n```\nautoload_real.php includes (among other files) autoload_files.php which looks like this:\n``` php\n<?php\n// autoload_files.php @generated by Composer\n$vendorDir = dirname(dirname(FILE));\n$baseDir = dirname($vendorDir);\nreturn array(\n    '5255c38a0faeba867671b61dfda6d864' => $vendorDir . '/paragonie/random_compat/lib/random.php',\n    'decc78cc4436b1292c6c0d151b19445c' => $vendorDir . '/phpseclib/phpseclib/phpseclib/bootstrap.php',\n);\n```\nSo Composer has it's own autoloaders but if you do composer update / composer install it creates a custom auto-loader for your app based on your composer.json.\nOther Composer packages might result in aneven bigger array being returned by autoload_files.php as well.\n. Here's a version of the 1.0 branch that uses stream_get_contents():\nhttps://github.com/terrafrost/phpseclib/tree/stream-get-contents-1.0\nI also replaced fgets() with stream_get_line() but that one wasn't a drop in replacement - I had to change the code in other ways.\nOne thing I want to look into: maybe I could do this in the 1.0 branch and use PHP_Compat to emulate stream_get_contents() and stream_get_line()? But idk if PHP_Compat is even maintained anymore. Maybe I'll just do it for 2.0+ or maybe just master and beyond idk. Stuff to think about.\n. This is in the 2.0 and master branches. I decided not to do it for the 1.0 branch because I'm not sure stream_get_line() can really be emulated with a PHP_Compat style function. I guess I could do an if check on PHP_VERSION for stream_get_line() but then what about stream_get_contents()?\nCurrently, 4x PHP_Compat functions are needed for the 1.0 branch to work on PHP4:\nhttps://github.com/phpseclib/phpseclib/tree/0.2.2/phpseclib/PHP/Compat/Function\nhttps://github.com/pear/PHP_Compat/blob/master/PHP/Compat/Function/clone.php\nThe problem is that it doesn't appear that PHP_Compat is maintained anymore. So at that point it'd make sense for phpseclib to maintain it's own copy of PHP_Compat, at, for example, https://github.com/phpseclib/php_compat or some such. But on top of that I'd also have to write my own stream_get_contents() function since there isn't one in PHP_Compat. And, honestly, I don't know that I care to go to all that effort.\n. Yah - I'd prefer a new release too. I'll try to do one in the next week or two (I have a pretty full plate this week so idk that this week will work). But people using the download link isn't really a problem - the master branch isn't BC compatible with the 1.0 branch anyway.\n. There are a number of issues that have been fixed in the 1.0 branch that aren't in the 1.0.1 release. If we mention this issue in the README.md file do we mention all those issues as well? Have it be like a running changelog?\nAnyway, you couldn't make a release anyway. A release involves me updating the PEAR stuff on phpseclib.sourceforge.net, tagging the release, updating the download links, uploading a zip file to sourceforge.net, etc.\nBut I'm aware of no issues with the 1.0 branch. With the 2.0 branch there's some confusion w.r.t. a newly introduced dependency but that's not the 1.0 branch. What is the issue you're having with the 1.0 branch? All the unit tests are passing..\n. > I wanted to help the many people that had the Invalid HMAC error - I spent a good 3 days researching and testing only to find out it was the php version + library incompatibility (with simple fix)\nAnd I'm definitely appreciative of your efforts :)\nLike in that one thread...  I wasn't at all on the right track, evidently, lol, but you were :)\n. I'll try to do this release tonight. I had intended on doing it this weekend but this weekend wound up being busier than I had anticipated.\n. v1.0.2 has been released. I'm gonna hold off on releasing 2.0.2 for now.\nhttps://github.com/phpseclib/phpseclib/releases/tag/1.0.2\n. I cherry picked this into the 1.0 branch and have merged into 2.0 / master.\nThanks!\n. Can you post the certificates?\n. I'll take a look tonight - this was kinda a busy weekend for me.\nThanks!\n. Yes.\nSo there are a couple of issues.\nFirst, the intermidate cert's subject DN and in the third certs subject DN the types don't match. The strings have the same content but in the CA cert the OU and CN are utf8String's whereas in the third cert they're printableString's.\nIn the past it would have validated but that is now no longer the case. The commit that changed this behavior:\nhttps://github.com/phpseclib/phpseclib/commit/340ee0cd2d7bf33316238fed8e9ab2e459d676ce\nThe reasoning behind that change:\nhttps://github.com/phpseclib/phpseclib/pull/25#issuecomment-9596411\nSecond, the subject DN of the third cert has a weird DN. postalAddress (2.5.4.16). Here's the ASN.1 definition for the DN's:\n```\n   Certificate  ::=  SEQUENCE  {\n        tbsCertificate       TBSCertificate,\n        signatureAlgorithm   AlgorithmIdentifier,\n        signatureValue       BIT STRING  }\nTBSCertificate  ::=  SEQUENCE  {\n        version         [0]  EXPLICIT Version DEFAULT v1,\n        serialNumber         CertificateSerialNumber,\n        signature            AlgorithmIdentifier,\n        issuer               Name,\n        validity             Validity,\n        subject              Name,\n        subjectPublicKeyInfo SubjectPublicKeyInfo,\n        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n                             -- If present, version MUST be v2 or v3\n        subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                             -- If present, version MUST be v2 or v3\n        extensions      [3]  EXPLICIT Extensions OPTIONAL\n                             -- If present, version MUST be v3\n        }\nName ::= CHOICE { -- only one possibility for now --\n     rdnSequence  RDNSequence }\nRDNSequence ::= SEQUENCE OF RelativeDistinguishedName\nRelativeDistinguishedName ::=\n     SET SIZE (1..MAX) OF AttributeTypeAndValue\nAttributeTypeAndValue ::= SEQUENCE {\n     type     AttributeType,\n     value    AttributeValue }\nAttributeType ::= OBJECT IDENTIFIER\nAttributeValue ::= ANY -- DEFINED BY AttributeType\n```\nhttp://www.alvestrand.no/objectid/2.5.4.16.html / https://tools.ietf.org/html/rfc4517#section-3.3.28 define postalAddress thusly:\nPostalAddress ::= SEQUENCE SIZE (1..ub-postal-address) \n    OF DirectoryString {ub-postal-string}\nIn 99% of cases AttributeValue is some sort of string but here it's a SEQUENCE of strings.\nI've done a number of code changes to accommodate all of this but I think there may be a little more that are necessary. Need to do more testing..\n. To add from my notes from the other day...  I made some changes to getDN() to accomodate your DN.\nSome of them don't work very well with FILE_X509_DN_CANON or FILE_X509_DN_HASH, which were added with this commit:\nhttps://github.com/phpseclib/phpseclib/commit/916dcff8a894f2f504ddcb26dc011d7aaac5e463\nThe justification for that change was sent to me in a private email. Quoting it:\n\n3) The $string parameter of get{Subject|Issuer|}DN() has been replaced\nby a $format integer parameter. For compatibility reasons, Boolean\nvalues behave as the old $string parameter. The new getDN() options are:\nFILE_X509_DN_ARRAY      Internal array representation. Equivalent to old\n$string = false. Is default.\nFILE_X509_DN_STRING     String. Equivalent to old $string = true.\nFILE_X509_DN_ASN1               ASN.1 Name as a string.\nFILE_X509_DN_OPENSSL    OpenSSL compatible DN array.\nFILE_X509_DN_CANON      Canonical ASN.1 Name string. Used to compute\nopenSSL file hashes.\nFILE_X509_DN_HASH               Openssl SHA.1 file name hash as a\nstring.\nNo provision has been made for old openssl file hashes since there are\nobsolescent. However, it is easy to compute those hashes using md5 and\nFILE_X509_DN_CANON.\n\nI'm not sure how one uses OpenSSL to get sha1 hashes for DNs atm. I'll have to do some research to figure that out.\nUnless I can figure this out I'm thinking maybe those two options can just be nixed in the master branch.\nThere's also the $withType parameter for the getDNProp method. I'm not sure what it's purpose is. It was added with this commit:\nhttps://github.com/phpseclib/phpseclib/commit/340ee0cd2d7bf33316238fed8e9ab2e459d676ce\nI'm not sure what it's point is so I think it's fair game for being removed from the master branch as well.\nAnyway, an updated branch can be found here:\nhttps://github.com/terrafrost/phpseclib/tree/x509-constructed-dns\nI still need to add unit tests and mess with setDN and setDNProp.\nTo do what you're wanting to do do define('FILE_X509_IGNORE_TYPE', true); before you try to do validateSignature().\nThe changes to getDN() were necessary to accommodate this for your cert specifically. In particular, getDN() did not work with your cert and I'm using getDN() to perform the non-strict comparison.\n. So I'll be breaking this in an upcoming commit.\nTo recap, the cert in this post had a number of issues\n\nThe distinguished name had constructed elements to it which phpseclib didn't support at the time (it now does support them)\nThe subject distinguished name, in the signing cert, used printablestrings for the organization name whereas the issuer distinguished name, in the signed cert, used utf8string's for the organization name. Since they matched if you ignored the type I added a new mode - define('FILE_X509_IGNORE_TYPE', true)`\n\nIn #1213 additional issues in the signature validation routines were identified and fixed. One of these issues involves the fact that the unit test that tested FILE_X509_IGNORE_TYPE using the certificates provided in this example is now failing. In reviewing things I believe the failure is correct.\nSo in the signing cert the serial number ($cert['tbsCertificate']['serialNumber']) is as follows;\n217198998308647125865152742095828931970476817786\nIn the signed cert the authority cert serial number ($cert['tbsCertificate']['extensions'][5]['extnValue']['authorityCertSerialNumber']) is as follows:\n23542\nI tried to validate the certs in OpenSSL by doing openssl verify -verbose -CAfile ca.pem signed.pem and got this error:\nphp\nerror 20 at 0 depth lookup:unable to get local issuer certificate\nThinking that maybe the string type mismatch was causing the error I created my own cert where the types matched exactly but for whom the serial numbers didn't match and I got the same exact error. For posterity those certs are as follows:\nSigning:\n-----BEGIN CERTIFICATE-----\nMIIB0TCCATqgAwIBAgICAP8wDQYJKoZIhvcNAQEFBQAwHDEaMBgGA1UECgwRcGhw\nc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEyMTM0ODM2WhgPOTk5OTEyMzEyMzU5NTla\nMBwxGjAYBgNVBAoMEXBocHNlY2xpYiBkZW1vIENBMIGfMA0GCSqGSIb3DQEBAQUA\nA4GNADCBiQKBgQC+ccJkHyAX9gbsoWCkYLhDzZnqGEV7m/chT+Jgjpza7Fw08oFK\nuGRGxHBuMcnSx/1i8qpTtN3mz72ej1/kEtnXBdosaxSX0Vf0Dn/rRCnGD9McH1Em\n46dkR92wUDnjP2p2rbLXGne3suw3VVaAtFNyLMMAcbtxRx95rIDWkbZfvwIDAQAB\noyAwHjALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUF\nAAOBgQBWuaCvA8NyjfZi1GPOaiRsQ2nnX0PQ/GRLhfqtDe18x4VOaESY6Btv/xFM\n/wm5y0k2Q/y1QQrN5oLFuRdPfB0ypKaE3ITqkyLBMTcVaLuDpfkCo+pfGuVLAA4M\nlzRJySwTvS+tbohoSo+eaP4xLJmoKTzzFBt+8SVJU3ecbXOSBg==\n-----END CERTIFICATE-----\nSigned:\n-----BEGIN CERTIFICATE-----\nMIICBTCCAW6gAwIBAgIUBjg6Arsg2FgiEviVyHkCZq2kPtwwDQYJKoZIhvcNAQEF\nBQAwHDEaMBgGA1UECgwRcGhwc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEyMTM0ODM2\nWhgPOTk5OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1vIGNl\ncnQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAK2ZsceBTjdgAlsfc3R+vAbL\nEwUoZ5fayfUeyJcop1hrU0hIkCLKNF1ZF+WJGwHIzp0pIAuAl8VomdvyEVcVxOh7\nZDaWCnceaOvTrKQCmYVAgfhZTXOhIKI4DXw3aZVbb0g+PeeRfZxdZWlcOR2UTbSr\nUvyeEQJKwV5DtpoxcB0tAgMBAAGjQDA+MC4GA1UdIwQnMCWhIKQeMBwxGjAYBgNV\nBAoMEXBocHNlY2xpYiBkZW1vIENBggEAMAwGA1UdDgQFBAN6enowDQYJKoZIhvcN\nAQEFBQADgYEAC1dBLtMiSQnLlZV/lLCZZ8lEpDIXNjjrlIRRIOFfX7VALy9Yruqn\naz9Da8CxDk0nMeMH4BenPWGSeTT82CVKT2z1gSaiqVTyYqVorQe4StelV/fvUU6a\nwa0kPUQrDRIVAh0/9pbywYmFUSTpW6DSFJX8LdiY70qf12bsgd2YTL8=\n-----END CERTIFICATE-----\nAs a sanity check I creating a signed / signing cert where the serial number did match as well:\nSigner:\n-----BEGIN CERTIFICATE-----\nMIIB0TCCATqgAwIBAgICAP8wDQYJKoZIhvcNAQEFBQAwHDEaMBgGA1UECgwRcGhw\nc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEyMTM1OTM3WhgPOTk5OTEyMzEyMzU5NTla\nMBwxGjAYBgNVBAoMEXBocHNlY2xpYiBkZW1vIENBMIGfMA0GCSqGSIb3DQEBAQUA\nA4GNADCBiQKBgQDsGTwTfUHqjBTsluCMEVTjOFwiewbt3j9zOn+j98LlXmhN3Y6X\nUn7RYZDBuRH5sbH7Flg5fT18GHtuWQaiJ97kZCkKfeDY3UasIOJTXKnPe+EPyD0i\nyuqagKwpY7uC4gXAe3sLWrjHX5S31/Zp7b82xP4MtgyK96sbcv8gKNULhQIDAQAB\noyAwHjALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUF\nAAOBgQDDXhHG4OCkDbOIQiOV0wslzOpYfc60coXy34Yvq5PG9sZqbwnUFYZEBXa7\ntCFVG0mygJZEH1PuDA0xuWPTeY2gCNNshKQ97uO+2Bz+bbutEp+IpdoWszB5M58a\nxmgPdQx04p00+4CGPRF++71DWPv9cvmJioCmmnqpGmfuQthlww==\n-----END CERTIFICATE-----\nSigned:\n-----BEGIN CERTIFICATE-----\nMIICBjCCAW+gAwIBAgIUO0gWvemMDSyhZKCjHZejic8+2iIwDQYJKoZIhvcNAQEF\nBQAwHDEaMBgGA1UECgwRcGhwc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEyMTM1OTM3\nWhgPOTk5OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1vIGNl\ncnQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKvkH1L/76cMtH+/oMlI3v64\nbBO6yuh/qiX/fSAAAk3xM3oi104vwAtVJyHq4UQjBOPIOJQlqqBdTN39e1Qla4yJ\nDy4OqSFBFFictty7W4A1Hi9Tm52TZBJn2Sh0WNBQkht7qSRQ2owi0zijlBPAmP18\nB4a2GF8RhESdSKAhpW+nAgMBAAGjQTA/MC8GA1UdIwQoMCahIKQeMBwxGjAYBgNV\nBAoMEXBocHNlY2xpYiBkZW1vIENBggIA/zAMBgNVHQ4EBQQDenp6MA0GCSqGSIb3\nDQEBBQUAA4GBALIdIebttXyvV5OhsxevmM38BFOxEudWIBpFkYFzkBIH/9vj6Wmu\nT26c77+YyWJv7NVv/TNiPmLwlwxGCrnun/kAAI5ykCZrXx/ZiYDV241JKtG5IhXo\nhntViwDIuYCmP+KcCJ4LTg6fz4V36vUQ8fUsRNh9zCdx6KeuRygp+43n\n-----END CERTIFICATE-----\nThose certs validate with OpenSSL.\nSince neither the new changes nor OpenSSL think the certs are valid I'm gonna go ahead and remove the last unit test that this issue resulted in.\nI would be interested in knowing what package actually said these certs validate (outside of phpseclib).  OpenSSL 1.0.2j doesn't like them...  what does?. I'm not sure - I'll have to look into it. I'll do so at some point and get back to you.\n. You're talking about the master branch. The master branch isn't going to be a solution for everyone. The 1.0 branch doesn't require autoloaders nor does it even really require PHP5. In-so-far as any branch is a solution for everyone it'd be the 1.0 branch.\nAre there specific features from the master branch that you're wanting that the 1.0 branch doesn't have?\n\nThe files in the RSA directory might as well be bundled with the RSA class since instantiating/using RSA() throws fits until every last file in the RSA directory is loaded.\n\nIf you're just manually copy / pasting the files into a directory you could just delete the files you don't need from the RSA subdirectory. Here's how it knows they exist (from the _initialize_static_variables method):\nphp\n                foreach (glob(__DIR__ . '/RSA/*.php') as $file) {\n                    $name = pathinfo($file, PATHINFO_FILENAME);\n                    $type = 'phpseclib\\Crypt\\RSA\\\\' . $name;\n                    $meta = new \\ReflectionClass($type);\nSo if you delete a file it won't be returned with glob. (ReflectionClass is what is triggering the auto-loader).\n. > It's hard to tell with most projects where support is at with older versions because it is rare to see a deprecation timeline and even rarer to see someone supporting multiple versions and backporting code.\nFeel free to look at the commit history. The 1.0 branch is being actively maintained. In fact, 21 days ago I did backport some code from a PR request made against the master branch that I had merged:\nhttps://github.com/phpseclib/phpseclib/commit/ac97ce5d69888f785b1db37d1c4d4dc34e942aff\nNormally I'd have cherry picked the commit but I didn't realize the code was needed in the 1.0 branch until after I had pushed to master.\n\n$path is not defined before being used.\n\nNice find. I'll look into that as time permits.\n\nThe RSA class already attempts to load ALL of the files in the RSA directory during object construction. I'm not saying to load everything across all of phpseclib which would certainly be wasteful. I'm saying to eliminate the obvious in specific areas where the code is going to definitely load a lot of something.\n\nWell if you have a better approach do feel free to suggest it. The approach you've suggested, however, is distinctly /not/ better, however, in-so-far as I'm concerned.\n\nHow is the solution I proposed a problem?\n\nBecause it kinda neuters phpseclib's ability to effectively use the whole composer / packagist ecosystem. In the master and 2.0 branches I added paragonie/random_compat as a required library because, frankly, I don't want to spend a ton of time trying to make the best most cryptographically secure RNG ever. phpseclib is a fairly expansive project and there's a lot to manage already and in some cases I may be willing to offload components that I simply don't care to maintain to other composer packages. I won't do that for the 1.0 branch and for the 2.0 branch I'm thinking I'll only do that for PSR-4 autoloadable stuff (composer does more than just PSR-4) but for master / 3.0...  composer all the way.\nSure, I could download the random_compat repo and add it to phpseclib myself but then what if random_compat has an update? Do I do that every time random_compat has an update?  composer kinda solves these problems.\n. I accidentally merged the master branch into 2.0 but then I reverted the merge. This was done a few weeks ago. If you have a specific example please provide it but as is I am not aware of anything in the 2.0 branch that shouldn't work identically (baring bug fixes) to how things worked in 2.0.1.\n. Fuck. I don't know how to fix this. Maybe I can create a branch from the 2.0.1 tag, merge 1.0 into it, copy the files into a temp directory, checkout the 2.0 branch, overwrite the files in the 2.0 branch with the files from the temp directory and then make a commit. #936 would need to be re-applied tho. Others could be as well.\nI thought 4b69dcb (a reversion of an earlier merge) fixed the issue since it deleted the RSA subdirectory. After it I merged 2.0 to master and reverted the reversion. But it looks like the reverted reversion is in 2.0 as well FML. And, to top it off, looking more into it, now, I see that 4b69dcb did more than I was wanting anyway as it removed a bunch of entries from CHANGELOG.md. Entries that are present in the 2.0.1 branch.\n638fe69 is Merge branch 'master' of https://github.com/phpseclib/phpseclib so it seems like that could be the merge that needs to be undone. So I tried git revert 638fe69 -m 1 and that wasn't it. I did git reset --hard upstream/2.0 and then did git revert 638fe69 -m 2 and that's not it either. So I guess it's not that merge.\nI don't know what to do :(\n. So I went ahead and did what I proposed: #976 is the PR.\nThe following stuff was manually added (ie. it was in the 2.0 branch but not in the 1.0 branch):\n- #936 \n- #947 (which was cherry picked from master)\n- 9e586e7\nThis approach doesn't delete files so I deleted those manually:\n- phpseclib/Crypt/RSA/\n- phpseclib/Exception/\n- tests/Unit/Crypt/HashTest.php\n- tests/Unit/Crypt/RSA/CreateKeyTest.php\n. Looks like I missed #931, which was merged three days after 2.0.1's release. That has now been applied as well.\n. My guess: /var/www/beta.somedomain.pl/release isn't a symlink. readlink returns 1 if the file doesn't exist or isn't a symlink and only returns 0 for me if the file actually is a symlink. You said it works in the terminal but not when ran via phpseclib. Maybe there's a subtle difference in what you're running in phpseclib vs what you're running in the typo? Like maybe the phpseclib string has a typo in it? That's the only thing I can figure, based on what you've posted thus far.\n. phpseclib is designed to work with private keys that don't have those fields. None-the-less I tried to reproduce the issue and was unable to do so. eg.\n``` php\n<?php\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\nextract($rsa->createKey(512));\n$rsa->loadKey($publickey);\n//$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);\necho bin2hex($rsa->sign('zzz'));\n```\nI don't get a \"division by zero\" error or anything. I tried it with PKCS1 and without PKCS1.\nI tried it in the 2.0 branch as well:\n``` php\n<?php\ninclude('autoloader.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR . '/phpseclib2.0');\n$loader->register();\nuse \\phpseclib\\Crypt\\RSA;\n$rsa = new RSA();\nextract($rsa->createKey(512));\n//$rsa->setSignatureMode(RSA::SIGNATURE_PKCS1);\n$rsa->loadKey($publickey);\necho bin2hex($rsa->sign('zzz'));\n```\nNo errors / warnings / anything. Well, except for the output hex encoded output.\nIt's not an issue in master either:\n``` php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Crypt\\RSA;\nextract(RSA::createKey(512));\necho bin2hex($publickey->sign('z', RSA::PADDING_PKCS1));\n```\nSo if you're getting errors you're gonna have to give me some sample code.\n(I'm using $publickey because that has an exponent and a modulus; it doesn't have any of the CRT parameters you're talking about)\n. Here's the asn1parse results of that key:\n0:d=0  hl=3 l= 154 cons: SEQUENCE\n    3:d=1  hl=2 l=   1 prim:  INTEGER           :00\n    6:d=1  hl=2 l=  65 prim:  INTEGER           :00B79CAB7070008E18259C2127EB279C3163DE51770CCA8D3E8AD5EB2E592970A208CAA3F0E78E9B19386195BD69A57D72497FCE500E2349A9077A434FE5E58F6B\n   73:d=1  hl=2 l=   1 prim:  INTEGER           :00\n   76:d=1  hl=2 l=  64 prim:  INTEGER           :5BAFDA543D39A9BB191CCBD9B92D806B916934D8F404395FDFC84EB64843CF3FE19186FE10160B2EF95D860B03D0EBD1372F32873EC48DA52A2C20748EE20DE1\n  142:d=1  hl=2 l=   1 prim:  INTEGER           :00\n  145:d=1  hl=2 l=   1 prim:  INTEGER           :00\n  148:d=1  hl=2 l=   1 prim:  INTEGER           :00\n  151:d=1  hl=2 l=   1 prim:  INTEGER           :00\n  154:d=1  hl=2 l=   1 prim:  INTEGER           :00\nSo the key has the fields defined - it just has them defined as 0. phpseclib supported the keys just fine if those fields weren't present at all but since they are...  that's what's causing the problems.\nThere are two approaches to this:\nhttps://github.com/terrafrost/phpseclib/commit/497d5f430ba9ba7ee9f73b55ee01ebc6b408c1e5\nThat makes it so keys of this particular format are basically loaded as public keys. So if you do echo $rsa after doing $rsa->loadKey() on a key like that the string you get back will say \"public key\" or something to that effect.\nThe other approach:\nhttps://github.com/terrafrost/phpseclib/commit/942d194d0adfe472acaa2616214584b873ac2975\nThis approach changes the conditions under which CRT-style exponentiation is done. With this approach echo $rsa should return a private key more closely resembling the one that was loaded.\n. You could do that for now. I'm gonna be merging the second branch into master as time permits but will hold off on doing a release for the time being.\n. This has been merged.\n. In this case the SSH logs would probably be more helpful. You can get them by doing define('NET_SSH2_LOGGING', 2) and then doing $ssh->getLog(). What I'm specifically interested are the last few packets.\nThanks!\n. > It looks to me that the remote server disconnected after the get, while my script was running for 10-15 seconds and by the time it had finished and tried to delete the file the connection was closed.\nSounds plausible.\n\nI would have expected the library to handle this and reconnect though, but it was neither able to delete the file or get the next ones.\n\nIt's a good idea for a feature. I guess I never thought about it and never got a request for it either lol.\nIn theory what'd be better are keep-alive packets, but alas, that doesn't really work with PHP. You'd need multi-threading or some such for that.\n. > I would have expected the library to handle this and reconnect though, but it was neither able to delete the file or get the next ones.\nSo I did some experimenting along these lines and...  well I think this is only going to be a feature I'll implement in the master branch. My preliminary work was promising but then I realized...  I'm gonna have to replay login's for this to work. In light of that I think I'm just gonna put it on the backburner.\nHere's my experimental code:\nhttps://github.com/terrafrost/phpseclib/commit/222c525d7907e77da83bd86ead55384c7f9f4d09\n. Would you be up for doing this for the master branch instead?\nIn https://github.com/phpseclib/phpseclib/pull/957#issuecomment-203037624 I suggested that this would be fine in 2.0 if it was PSR-4 but I've since had a bit of a change of heart, in part due to #973. Among other things that made me realize was...  in a lot of the 2.0 examples I do this:\n``` php\ninclude 'autoload.php';\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR . '/path/to/phpseclib2.0');\n$loader->register();\n```\n(where autoload.php is https://github.com/composer/composer/blob/master/src/Composer/Autoload/ClassLoader.php)\nsource: http://phpseclib.sourceforge.net/2.0.html\nProblem is...  if people are doing that (as is done in the examples) then they'd have to add a new $loader->addPsrR('...'); line to every file that's using phpseclib (assuming they're not using a common file). What would have been better is if I had just included autoload.php in the 2.0 branch. The vendor/composer directory could exist (maybe as a submodule) and autoload.php could have whatever lines it needed to have. And that one wouldn't be a submodule (or maybe it would be idk).\nI mean, probably 95% of 2.0 users are using Composer but for the (guestimated) 5% that aren't this could cause problems. Meh :( This makes me glad that in the master / 3.0 branch I'm just requiring composer outright. You can certainly get phpseclib to work without composer but if you do so with master / 3.0 you're doing so at your own peril.\n. Done:\nhttps://github.com/phpseclib/phpseclib/blob/master/CHANGELOG.md\nThanks!\n. Thanks! I'm about to get on a plane but I'll try to take a look and git it merged after I land or this weekend as time permits.\n. This has been merged. Net/SFTP.php didn't have the use declaration, which was causing Travis CI to fail so I added that and re-based that into your commit.\n. I don't know what version of phpseclib you're using. It's not 2.0.1 or 1.0.2 since those versions don't have a return false on that line:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.1/phpseclib/Net/SSH2.php#L1065\nhttps://github.com/phpseclib/phpseclib/blob/1.0.2/phpseclib/Net/SSH2.php#L1065\nIt's not 1.0.1 either...\nhttps://github.com/phpseclib/phpseclib/blob/1.0.1/phpseclib/Net/SSH2.php#L1065\nThat said I'm gonna assume that the issue you're having is in the _connect method.\nSomething you could do that'd give me a little more insight into what's going on (these are for the 1.0.2 version - they may work on other versions depending on what version you're running)...\n``` php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n    while (!feof($this->fsock) && !preg_match('#^SSH-(\\d\\.\\d+)#', $temp, $matches)) {\n        if (substr($temp, -2) == \"\\r\\n\") {\n            $extra.= $temp;\n            $temp = '';\n        }\n\n\n-----[ AFTER, ADD ]------------------------------------\n\n        if (!isset($i)) $i = 0;\n        echo \"$i. $temp<br />\\r\\n\";\n        $i++;\n\n\n-----[ FIND ]------------------------------------------\n\n            if (!@stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\n                $this->is_timeout = true;\n                return false;\n            }\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n            if (!stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\n\necho \"read = \" . count($read) . \"\\n\";\necho \"write = \" . count($write) . \"\\n\";\necho \"except = \" . count($except) . \"\\n\";\necho \"sec = $sec\\n\";\necho \"usec = $usec\\n\";\n                    $this->is_timeout = true;\n                    return false;\n                }\n```\nAnother possibility... maybe try to use this branch:\nhttps://github.com/terrafrost/phpseclib/tree/stream-get-contents-1.0\nIt still does stream_select but it's not doing it with fgets() or fread() - it's doing it with stream_get_contents() and stream_get_line(). That branch is branched from the 1.0 branch, as well, and not the 2.0 branch (I don't know which version you're using). See #967 to understand the motivation behind that change.\n. To get rid of the error you can use an error handler:\nhttp://php.net/manual/en/function.set-error-handler.php\nAnother possibility: you could use the error suppression operator (@) on whatever phpseclib method call is causing that error. eg. if you're doing $ssh->login() you could instead do @$ssh->login(), etc. To know what method you'd need to use that operator on I'd need to see a stack trace.\nThe master branch has replaced errors like this with exceptions but the master branch is still under development and the API is unstable (like it could change drastically from commit to commit).\n. What version of phpseclib are you using? If you don't know maybe you could copy / paste the code of Math/BigInteger.php to pastebin.com and then post the link here? I should be able to figure out the version you're running from that.\nThat said, per http://phpseclib.sourceforge.net/math/intro.html PHP 4 is pretty slow. Especially if you don't have BCMath or OpenSSL installed.\nWhen you're SSH'ing you have to do diffie-hellman key exchange:\nphp\n        $x = $one->random($one, $max);\n        $e = $g->modPow($x, $prime);\nmodPow is an expensive operation so it's possible that's where the slow down is but it's hard to say for sure.\nSomething that might provide a little more insight as well: the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 3); at the top of the file. That'll print the raw SSH packets out real time. If you could post those here, as well, that'd be helpful.\nThanks!\n. Looks like you're using phpseclib 1.0.0. The latest version is 1.0.2.\n\nWill the debug raw SSH Packets contain any personal information about the host or the device being connected to ?\n\nNope. You're using password authentication in your example and phpseclib replaces whatever your password is with \"password\" and the username with \"username\". The IP address isn't recorded either.\n. SSH-2.0-${POM.ARTIFACTID}-${POM.VERSION} is an unusual identifier string.\nAnyway, it looks like these algorithms are being used:\ndiffie-hellman-group1-sha1 for key exchange, ssh-dss for server signature verification (which you're code isn't really doing anyway), arcfour256 for symmetric key encryption, and hmac-sha2-256 for the message authentication.\nMy first guess would be that maybe commenting out these two lines in Net/SSH2.php would help:\nphp\n            'arcfour256',\n            'arcfour128',\nI say that because some versions of OpenSSH have issues with that algorithm:\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/ssh2-aesctr-openssh\nhttps://bugzilla.mindrot.org/show_bug.cgi?id=1291\n. The default key format is PKCS1. Here's an example PKCS1 key (that starts with BEGIN RSA PUBLIC KEY):\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZf\nXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/\n3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB\nAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh3tx4VgMtrQ+WEgCjhoTwo23KMBAu\nJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2pIIVOFMDG+KESnAF\nV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQXGukB\nI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfP\nwIGm63ilAkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9\nHPTJuo3/9s5p+sqGxOlFL0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqo\nxssQGnh85BzCj/u3WqBpE2vjvyyvyI5kX6zk7S0ljKtt2jny2+00VsBerQJBAJGC\n1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2eplU9VQQSQzY1oZMVX8i1m5\nWUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ37sJ5QsW\n+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=\n-----END RSA PRIVATE KEY-----\nHere's the ASN1 parsing:\n0:d=0  hl=4 l= 604 cons: SEQUENCE\n    4:d=1  hl=2 l=   1 prim:  INTEGER           :00\n    7:d=1  hl=3 l= 129 prim:  INTEGER           :00AA18ABA43B50DEEF38598FAF87D2AB634E4571C130A9BCA7B878267414FAAB8B471BD8965F5C9FC3818485EAF529C26246F3055064A8DE19C8C338BE5496CBAEB059DC0B358143B44A35449EB264113121A455BD7FDE3FAC919E94B56FB9BB4F651CDB23EAD439D6CD523EB08191E75B35FD13A7419B3090F24787BD4F4E1967\n  139:d=1  hl=2 l=   3 prim:  INTEGER           :010001\n  144:d=1  hl=3 l= 128 prim:  INTEGER           :1628E4A39EBEA86C8DF0CD11572691017CFEFB14EA1C12E1DEDC7856032DAD0F961200A38684F0A36DCA30102E2464989D19A805933794C7D329EBC890089D3C4C6F602766E5D62ADD74E82E490BBF92F6A482153853031BE2844A700557B97673E727CD1316D3E6FA7FC991D4227366EC552CBE90D367EF2E2E79FE66D26311\n  275:d=1  hl=2 l=  65 prim:  INTEGER           :00DE030E9F8884171AE90123878C659B789EC732DA8D762B26277ABDD5A68784F8DA76ABE677A6F00C77F68DCD0FD6F56688F8D45F731509AE67CFC081A6EB78A5\n  342:d=1  hl=2 l=  65 prim:  INTEGER           :00C422F91D06F66D0AF8072A2B70C5A6FE110FD8C67344E57BDF2178D613EC442F66EBA2AB85E3BD1CF4C9BA8DFFF6CE69FACA86C4E9452F4343B784A4A2C8E01B\n  409:d=1  hl=2 l=  64 prim:  INTEGER           :164972475B99FF03C98E3EB5D5C741733B653DDAA8C6CB101A787CE41CC28FFBB75AA069136BE3BF2CAFC88E645FACE4ED2D258CAB6DDA39F2DBED3456C05EAD\n  475:d=1  hl=2 l=  65 prim:  INTEGER           :009182D4C8393B2768E4DC03E818913AB3F11A8D9BA536EEFDF86B4FC79B1E44F3D9EA6553D550412433635A193155FC8B59B95944CB3F3DB22C9201415757AA13\n  542:d=1  hl=2 l=  64 prim:  INTEGER           :11A88AE4A84A369F52157B8B57041A96FCF21E4D058673597199DFBB09E50B16FAC272A0D75EDF11FCBDD5E1CD4EDE4FCD83E97FEC730F51673FBFEAB089E29D\nSo, basically, a PKCS1 key is just a sequence of integers. The only way that you can really know for sure that it's an RSA key is because the string at the top says so.\nNow let's look at a PKCS8 key now (that begins with \"BEGIN PUBLIC KEY\"):\n-----BEGIN PRIVATE KEY-----\nMIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKoYq6Q7UN7vOFmP\nr4fSq2NORXHBMKm8p7h4JnQU+quLRxvYll9cn8OBhIXq9SnCYkbzBVBkqN4ZyMM4\nvlSWy66wWdwLNYFDtEo1RJ6yZBExIaRVvX/eP6yRnpS1b7m7T2Uc2yPq1DnWzVI+\nsIGR51s1/ROnQZswkPJHh71PThlnAgMBAAECgYAWKOSjnr6obI3wzRFXJpEBfP77\nFOocEuHe3HhWAy2tD5YSAKOGhPCjbcowEC4kZJidGagFkzeUx9Mp68iQCJ08TG9g\nJ2bl1irddOguSQu/kvakghU4UwMb4oRKcAVXuXZz5yfNExbT5vp/yZHUInNm7FUs\nvpDTZ+8uLnn+ZtJjEQJBAN4DDp+IhBca6QEjh4xlm3iexzLajXYrJid6vdWmh4T4\n2nar5nem8Ax39o3ND9b1Zoj41F9zFQmuZ8/AgabreKUCQQDEIvkdBvZtCvgHKitw\nxab+EQ/YxnNE5XvfIXjWE+xEL2broquF470c9Mm6jf/2zmn6yobE6UUvQ0O3hKSi\nyOAbAkAWSXJHW5n/A8mOPrXVx0FzO2U92qjGyxAaeHzkHMKP+7daoGkTa+O/LK/I\njmRfrOTtLSWMq23aOfLb7TRWwF6tAkEAkYLUyDk7J2jk3APoGJE6s/EajZulNu79\n+GtPx5seRPPZ6mVT1VBBJDNjWhkxVfyLWblZRMs/PbIskgFBV1eqEwJAEaiK5KhK\nNp9SFXuLVwQalvzyHk0FhnNZcZnfuwnlCxb6wnKg117fEfy91eHNTt5PzYPpf+xz\nD1FnP7/qsIninQ==\n-----END PRIVATE KEY-----\nHere's the asn1parsing of it:\n0:d=0  hl=4 l= 630 cons: SEQUENCE\n    4:d=1  hl=2 l=   1 prim:  INTEGER           :00\n    7:d=1  hl=2 l=  13 cons:  SEQUENCE\n    9:d=2  hl=2 l=   9 prim:   OBJECT            :rsaEncryption\n   20:d=2  hl=2 l=   0 prim:   NULL\n   22:d=1  hl=4 l= 608 prim:  OCTET STRING\nHere there's an OID that tells us that it's an RSA key.\nSo, basically, PKCS8 is a wrapper format that embeds the key type into the key data itself. PKCS1 data goes inside PKCS8 keys.\nEarly on in phpseclib's life I didn't know that there was a difference between PKCS1 and PKCS8 so the output reflected that. Early on I think it did use the PKCS8 header of \"BEGIN PUBLIC KEY\" for a PKCS1 key that didn't embed the key type within the key as PKCS8 does. So the early behavior was in error.\n. 2.0.2 has been released, which includes the fix for this:\nhttps://github.com/phpseclib/phpseclib/commit/6a97ddfa725b6e099c3af7fc830f8ff92f7c00ac#diff-a67ac2ad29eab9e856911a1571f69ea5\n. I rebased this into one commit and then cherry-picked this into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commit/6c8affcf11a8cfb256c98e53933a6298b33a5d13\nThanks!\n. Yah - I do too. Meaning no disrespect to anyone, but I think it was just a mass replace that took place. Find all instances of pack() and replace with Hex::decode(), etc, even if there are better approaches in specific instances.\nI figure I'll go back and remove the calls from the public stuff at some point.\nAnd FWIW the sha1(...) to sha1(..., true) stuff could be done in the 2.0 branch, as well, but it's not a huge priority for me. It can't be done in the 1.0 branch for BC purposes (the second parameter of md5 and sha1 wasn't added until PHP 5.0.0).\n. This was something I was going to do when I redo X509 for the master branch. Basically, my planned X509 changes include moving the CSR / SPKAC / CRL stuff into their own files. ie. X509 won't look even remotely similar to what it does today by the time I'm done with it.\nThe default hash for RSA.php was changed some time ago but the rewrite of RSA.php is also complete, unlike the rewrite for X509.php.\nBut that said, doing it early, too, isn't really a problem, so I guess I'll go ahead and do the merge.\n. Sorry for the delay.\nI had been thinking I'd revamp X509 as my next big task and altho I've made some headway in that regard some of that is kinda guess work as I'm trying to accommodate public key types that have yet to be implemented (DSA + ECDSA). I think I'll shit my priority to them.\n\nAre there any known X.509 parsing compatibility considerations I need to be aware of when reading these certs?\n\nShouldn't be.\n\nIs there any native ECC support for key generation?\n\nNo.\n\nCan I sign a cert generated with phpseclib using ECC keys, is there anything different from the RSA keys I used before?\n\nNope - only RSA is supported.\nThat said, I'm thinking DSA / ECDSA support will only be in the master branch.\n. I'll take a look.\nI will say that I'm working on DSA / ECDSA support right now in the master branch. But to accommodate that I'm doing lots of refactoring. Like in the master branch all the symmetric ciphers are instances of SymmetricCipher. Block ciphers extend BlockCipher, stream ciphers extend StreamCipher, etc. The plan is to make RSA / DSA / ECDSA extend AsymmetricCipher\n. What version of phpseclib are you using? Can you do define('NET_SSH2_LOGGING', 2) at the top and then do $sftp->getLog() after you get the error?\nThanks!\n. Can you post the full string? It looks like you've truncated what you've posted.\nIf it's too big try posting it on pastebin.com and then posting the link here.\nThanks!\n. Can you post your code?\nIt looks like you're first stat'ing /etc/xen/vms and then /etc/xen/auto. You then run \"mv /etc/xen-tools/xen-tools.conf /etc/xen-tools/xen-tools-base.conf\".\nYou then upload a new /etc/xen-tools/xen-tools.conf and then you run \"xen-create-image --hostname=netserver1 --ip=192.168.25.173 --genpass=0 --verbose\" and then you get a bunch of data back.\nThe \"Expected SSH_FXP_ATTRS or SSH_FXP_STATUS\" is \"thrown\" by _stat (which is called by all the functions that do any sort of file attribute stuff) and chmod(). exec() doesn't \"throw\" that error. It's not defined in SFTP.php (just SSH2.php) and the stirng \"SSH_FXP\" does not occur in SSH2.php (nor does the string \"n exec\" in SFTP.php).\nIf I didn't know better I'd guess that I wasn't seen the whole lot file. Maybe if you do define('NET_SSH2_LOGGING', 3), which'll enable real-time logging and give me the output of that I'd have better success in figuring out what's going on.\nThanks!\n. 1. > I need to deploy the code on a production environment, therefore I'm using 2.0.0 version now as it's the last stable version (the 2.0.2 threw 70ish errors when I committed the project). \nWhat were the errors? I don't get any when I do this:\n``` php\n   define('NET_SSH2_LOGGING', 3);\nuse \\phpseclib\\Net\\SFTP;\n$sftp = new SFTP('domain.tld');\n   $sftp->login('user', 'pass');\n$sftp->nlist();\n   $sftp->exec('ls -latr');\n   ```\n2. From your sftplog.txt...\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n   00000000  00:00:00:00:00:00:00:7b:44:6f:6e:65:0a:0a:4e:6f  .......{Done..No\n   00000010  20:72:6f:6c:65:20:73:63:72:69:70:74:73:20:77:65   role scripts we\n   00000020  72:65:20:73:70:65:63:69:66:69:65:64:2e:20:20:53  re specified.  S\n   00000030  6b:69:70:70:69:6e:67:0a:53:65:74:74:69:6e:67:20  kipping.Setting \n   00000040  75:70:20:72:6f:6f:74:20:70:61:73:73:77:6f:72:64  up root password\n   00000050  0a:47:65:6e:65:72:61:74:69:6e:67:20:61:20:70:61  .Generating a pa\n   00000060  73:73:77:6f:72:64:20:66:6f:72:20:74:68:65:20:6e  ssword for the n\n   00000070  65:77:20:67:75:65:73:74:2e:0a:41:6c:6c:20:64:6f  ew guest..All do\n   PHP Notice:  Expected SSH_FXP_ATTRS or SSH_FXP_STATUS in /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php on line 1282\n   00000080  6e:65:0a                                         ne.\nThe fact that the PHP Notice is appearing in the middle of the log output is very strange. _append_log, as defined in SSH2.php, outputs the log files and it doesn't \"throw\" errors in the middle of it's execution. Not like the one you're seeing.\nNormally, I might think there were some \\r's being thrown around but if that were the case text would be replaced and that's not what's happening in your code - you have the PHP Notice appearing smack dab between the 00000070 line and the 00000080 line.\n3. In SSH2.php (_get_channel_packet) there's this:\nphp\n                     if ($client_channel == $channel) {\n                         return $data;\n                     }\n                     if (!isset($this->channel_buffers[$channel])) {\n                         $this->channel_buffers[$channel] = array();\n                     }\n                     $this->channel_buffers[$channel][] = $data;\n                     break;\nThat's in a while loop. Until it reaches data on the desired channel it just keeps looping. But in your case it's like it's receiving data for the exec channel, thinking it's for the SFTP channel, and then returning it to SFTP's _stat method, which is causing the error that you're seeing. Only problem: I don't see how this is possible. But, regardless, to give me more info with which a diagnosis can be made...  do this:\n#\n   #-----[ OPEN ]------------------------------------------\n   #\n   Net/SSH2.php\n   #\n   #-----[ FIND ]------------------------------------------\n   #\n   if ($client_channel == $channel) {\n   #\n   #-----[ BEFORE, ADD ]-----------------------------------\n   #\n   echo \"$client_channel == $channel\\n\";\nSo apply that change, rerun your script (with logging set to 3), and get me the new output.\n. Actually, let's try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\nuser_error('Expected SSH_FXP_ATTRS or SSH_FXP_STATUS');\n\n-----[ BEFORE, ADD ]-----------------------------------\n\necho \"packet type = {$this->packet_type}\\n\";\necho bin2hex($response) . \"\\n\"\n```\nThanks!\n. Something that's pretty messed up... so per the code change I gave you you'd think that packet_type would appear in the output before the \"PHP Notice\". But, in fact, it's not. It appears after:\n```\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0006, network: 0s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:00                          tus.....\nPHP Notice:  Expected SSH_FXP_ATTRS or SSH_FXP_STATUS in /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php on line 1285\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:01                                      ....\npacket type = \n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 60.0003, network: 0s)\n00000000  00:00:00:00:00:00:00:26:00:00:00:22:11:00:00:00  .......&...\"....\n00000010  01:00:00:00:19:2f:65:74:63:2f:78:65:6e:2f:76:6d  ...../etc/xen/vm\n00000020  73:2f:74:72:69:61:6c:4d:61:63:2e:63:66:67        s/trialMac.cfg\n```\nSo that's pretty messed up and defies logic.\nAnyway, try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\n        if (is_bool($temp)) {\n            $this->packet_type = false;\n            $this->packet_buffer = '';\n            return false;\n        }\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n        if (is_bool($temp)) {\n\necho \"_get_channel_packet returned a boolean\\n\";\n                $this->packet_type = false;\n                $this->packet_buffer = '';\n                return false;\n            }\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin _get_channel_packet\n\n            if ($this->curTimeout < 0) {\n                $this->is_timeout = true;\n                return true;\n            }\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n            if ($this->curTimeout < 0) {\n\necho \"zzz x1\\n\";\n                    $this->is_timeout = true;\n                    return true;\n                }\n\n-----[ FIND ]------------------------------------------\nin _get_channel_packet\n\n            if (!@stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\n                $this->is_timeout = true;\n                return true;\n            }\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n            if (!@stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\n\necho \"zzz x2\\n\";\n                    $this->is_timeout = true;\n                    return true;\n                }\n```\n. From this latest log file:\n```\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0009, network: 0.0007s)\n00000000  00:00:01:00:00:00:00:21:00:00:00:1d:65:00:00:00  .......!....e...\n00000010  01:00:00:00:02:00:00:00:0c:4e:6f:20:73:75:63:68  .........No such\n00000020  20:66:69:6c:65:00:00:00:00                        file....\n256 == 256\nAttendo la creazione del file...Tempo trascorso: 6 minuti\nPHP Notice:  Expected SSH_FXP_ATTRS or SSH_FXP_STATUS in /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php on line 1283\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 60.0004, network: 0s)\n00000000  00:00:00:00:00:00:00:26:00:00:00:22:11:00:00:00  .......&...\"....\n00000010  01:00:00:00:19:2f:65:74:63:2f:78:65:6e:2f:76:6d  ...../etc/xen/vm\n00000020  73:2f:74:72:69:61:6c:4d:61:63:2e:63:66:67        s/trialMac.cfg\n```\nSo you're getting the PHP Notice between an incoming NET_SSH2_MSG_CHANNEL_DATA packet and an outgoing one.\nYet in your last logs you were getting it between an incoming NET_SSH2_MSG_CHANNEL_REQUEST and an incoming NET_SSH2_MSG_CHANNEL_EOF.\nAnd then in the logs before that you were getting that error in the middle of an incoming NET_SSH2_MSG_CHANNEL_DATA packet.\nIt doesn't make any sense at all and it is complicating my ability to actually diagnose this issue.\nAnyway, let's try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\nuser_error('Expected SSH_FXP_ATTRS or SSH_FXP_STATUS');\n\n-----[ REPLACE WITH ]----------------------------------\n\necho \"Expected SSH_FXP_ATTRS or SSH_FXP_STATUS\\n\";\n\n-----[ FIND ]------------------------------------------\n\nuser_error('Expected SSH_FXP_ATTRS or SSH_FXP_STATUS');\n\n-----[ REPLACE WITH ]----------------------------------\n\necho \"Expected SSH_FXP_ATTRS or SSH_FXP_STATUS\\n\";\n``\n. That really helped - thanks! #1006 should fix the issue for you, I believe!\n. Try doing$sftp->setTimeout(0)before$sftp->exec(). By default the timeout is 10s.\n. Fix has been merged!\n. Nice job! I knew redoing_decode_ber()` would speed things up but wasn't super interested in doing it lol.\nBut that said I think it could also speed up the thing https://github.com/terrafrost/phpseclib/commit/3cf5c9266ca6defd4db86fe24a3c8166e7df5c4b was supposed to speed up.\nSo the issue with that was that I wrote a CMS parser for someone. They were using it to verify and create signatures for PDFs. The PDF's were embedded in the CMS and so you'd have really large OCTET STRINGs. Except that the OCTET STRING, in this case, was of an indefinite length with a ton of 1,000 character length OCTET STRINGs nested within it. So _string_shift() was being called probably 10,000+ times and _string_shift() (and more generally, strings in general, imho) just isn't that fast. So what I did there is have a regular expression to assume that if you have one OCTET STRING of a fixed length assume that the rest of the strings are of the same length.\nAnyway, I'll try to review over the course of the coming week and merge next weekend. That'll give other people a chance to review if they're so inclined. That said, I suspect it'll prob just be merged. It's passing all the unit tests and my cursory review of it looks good.\nNice job and thanks!!!\n. I cherry-picked this into the 1.0 branch and then merged into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commit/a1e16797cacfa8559dcbfa0263fcd123d3b5c53b\nhttps://github.com/phpseclib/phpseclib/commit/88ce26f8ca405a7572ef584b63131e0ef3c4b170\nThanks!!\n. I rebased your commit into one, cherry-picked it into the 1.0 branch and then merged up to master:\nhttps://github.com/phpseclib/phpseclib/commit/dd754283bb36ba2f5731bebc5305703dae9c7811\nThanks!\n. Fixed. Thanks!\n. Per https://github.com/phpseclib/phpseclib/issues/775#issuecomment-228605753 I don't have any issues with setTimeout(0). But feel free to run that test code and lmk what you get as the output:\n``` php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('domain.tld');\n$ssh->login('user', 'pass');\n$ssh->setTimeout(0);\necho $ssh->exec('php -r \"sleep(30); echo \\'all done\\';\"');\n```\nI tried to do npm i myself and got output back pretty much instantly. Maybe it's only an issue if you try to install a really large package but once it's installed subsequent calls would probably return instantly. So I'd just use php -r \"sleep(30); echo 'all done';\" as a benchmark instead.\n. @hekep - Did you try $ssh->setTimeout(0);?. The following PR should do what you want:\nhttps://github.com/phpseclib/phpseclib/pull/1005\nI also made it so that realpath is publicly exposed if you want to use it. I'll let it sit for a few days so people have a chance to chime in and will then (assuming there are no concerns raised) merge it.\nThanks!\n. The fix has been committed. Thanks!\n. This has been merged into 1.0 / 2.0 / master.\n. I don't suppose you could generate a private key that demonstrates the problem? Without the private key I can't really do any direct tests myself.\nAnd how did you come by the ciphertext (which you've oddly assigned to the $plaintext variable)?\nI mean, as is, a bunch of possibilities exist, including, but not limited to the following:\n- the string could be that the string you're trying to decrypt simply isn't valid. Maybe it's just a random string of characters.\n- the string could be correspond to a different private key\n- could be using OAEP padding\nIf I had the private key the first thing I'd do is see which of the \"Decryption error\" strings it was. eg. in _rsaes_pkcs1_v1_5_decrypt the line user_error('Decryption error'); occurs four times. I'd append x1, x2, x3, etc to each successive line to distinguish between the errors.\nI'd also probably try doing $rsa->setEncryptionMode(phpseclib\\Crypt\\RSA::::ENCRYPTION_NONE) and seeing what the bin2hex() encoded output of that was to see if I could match it to a particular format (OAEP or PKCS1 or whatever).\nRegardless, more information is needed.\n. Sorry for the delay - been busy at work. Could you get me the SSH logs? You can enable SSH logging by doing define('NET_SSH2_LOGGING', true); at the top and then echo $ssh->getLog() after. If you're doing 50 commands my guess is that the log would be about 1mb in size (SSH logs are capped at that size - the cap can be changed but that's the default cap but it should be more than enough for me to figure out what's going on).\nThanks!\n. SSH logs would help me diagnose the issue..\n. The detailed logs would be more helpful. Especially since there's apparently not too many packets being sent before you're getting the error. You can get the detailed logs by doing define('NET_SSH2_LOGGING', 2); at the top of the file.\nThat said, doing terminal length 0 with write() and then show running-config | begin ! with exec() isn't the same thing as doing terminal length 0 and show running-config | begin !. SSH uses channels. Interactive prompt's are one channel and one-off commands are done on a channel dedicated for them that self destructs after the command has been ran. Stuff done on one channel doesn't have an effect on stuff done on another channel. This is why doing $ssh->exec('cd /'); echo $ssh->exec('pwd'); doesn't always yield the expected behavior.\nI mean, I guess that's a bit of an oversimplification. If you do shutdown in one channel that'll affect all channels. I suppose terminal length 0 could be global like shutdown but I wouldn't count on it.. \nit's possible Cisco does \n. The problem is that you've enabled a PTY. Once you've done that exec() works like an interactive shell in that you have to do read() to get output and can send data in the middle of receiving the output via write().\nA normal exec() command dies after the output has ended. But with a PTY that's not the case because the command doesn't necessarily have to die. ie. if you did $ssh->exec('bash') with a PTY...  that command wouldn't really die unless you did $ssh->exec(\"exit\\n\") whist not being in vim or some such.\nYour code has you parsing the output of $ssh->exec() even tho you have a PTY. That doesn't work. Example:\n```php\n$ssh->enablePTY();\necho $ssh->exec('ls -latr');\n``\nThat returns 1 because$ssh->exec()` returned true.\nA few more code snippets:\nphp\n$ssh->enablePTY();\necho $ssh->exec('ls -latr');\necho $ssh->exec('pwd');\nThat gives me an error similar to the one you're getting. Since phpseclib 1.0 / 2.0 have a fixed channel for exec's you can't do two exec's with a PTY concurrently so the above will never really work but maybe I can make it so that instead of outputting an error the second $ssh->exec() returns false. (fwiw, I do plan on supporting dynamic channels in the master / 3.0 version at some point).\nAlso...\nphp\n$ssh->enablePTY();\necho $ssh->exec('ls -latr');\n$ssh->disablePTY();\necho $ssh->exec('pwd');\nWithout a PTY exec() would close the channel after it got the output. But with a PTY it doesn't do that and $ssh->disablePTY() doesn't close the channel either. It'd probably be good if it did but it doesn't. I'll look into changing that behavior.. https://github.com/phpseclib/phpseclib/pull/1075 should make this work better.. #1075 has been merged.\nAs for the other two people who posted in this topic...  lukepolo's code doesn't show a PTY being used but the fact that he's doing read() after exec() makes it seem like he very well could be. thadin doesn't appear to be using a PTY but he might get the desired behavior if he were.. I'm going to go ahead and close this. If this is still an issue for people they should create a new issue.. I'll try to do a release this weekend.\nThanks!. A new release has been made.\nThanks!. So this post has had like 15 different people reporting the issue. Only a very small subset of people reporting this issue have actually provided enough information with which diagnostics can be made.\nIt is not clear whether or not everyone experiencing this issue is experiencing it for the same reasons. There may be a multitude of reasons why people are getting this error and if so the change I made might very well only fix one of root causes of the error.\nAnyway, I just mention that because I think it'd be beneficial if you made a new post instead of replying to an existing one. What I've already said not withstanding a new post is also less likely to be lost.\nRegardless...  seeing some code would still be very helpful. #1075 fixes an issue with PTYs. Or at least provides a way to work around PTY issues. Are you using a PTY?\nIssuing a command every 3s isn't, in and of itself, a problem. Example with the following Vagrant box:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\nend\nPHP code:\n```\n$ssh = new SSH2('127.0.0.1', 2200);\n$ssh->login('vagrant', 'vagrant');\nfor ($i = 0; $i < 60 / 3; $i++) {\n    $ssh->exec('ls -latr');\n}\n```\nThat works fine.\nBy default exec() will block until it has all the output and the channel is closed so you're probably doing something else. As such code and logs will be very helpful.\nThanks!. > I still get this error message.\nYou make it sound as tho you've posted before in this ticket - you haven't.\nQuoting my last post:\n\nSo this post has had like 15 different people reporting the issue. Only a very small subset of people reporting this issue have actually provided enough information with which diagnostics can be made.\nIt is not clear whether or not everyone experiencing this issue is experiencing it for the same reasons. There may be a multitude of reasons why people are getting this error and if so the change I made might very well only fix one of root causes of the error.\nAnyway, I just mention that because I think it'd be beneficial if you made a new post instead of replying to an existing one. What I've already said not withstanding a new post is also less likely to be lost.\nRegardless... seeing some code would still be very helpful. #1075 fixes an issue with PTYs. Or at least provides a way to work around PTY issues. Are you using a PTY?\n\nIn light of the fact that people keep on posting replies to this instead of creating new tickets I am going to lock this ticket. If people are seeing this error message they'll need to make a new post.. If you installed phpseclib with composer I'd just use it's autoloader:\nrequire __DIR__ . '/vendor/autoload.php';\n. @C1562956 - I think you're using the master branch. The master branch is a developmental branch with an unstable API. It should not be used in a production environment.\nThe 2.0 branch does have the PUBLIC_FORMAT_OPENSSH constant defined:\nhttps://github.com/phpseclib/phpseclib/blob/2.0/phpseclib/Crypt/RSA.php#L228\nAlso, in the master branch, I renamed loadKey to load. In the 2.0 branch it is loadKey but not in the master branch.\n. @Sxderp \n\nSince the API for this library is weird, (as far as I can tell) doing a createKey() doesn't seem to respect the current state of the RSA object, nor does it load the RSA object's properties. Honestly, it looks like it should really be a static function call, as it currently stands, though that's a discussion for later.\n\nIt is, in the master branch:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/RSA.php#L406\nCan't very well change it in the 1.0 or 2.0 branches, however, since doing so would break BC.\n. Yah - it was designed to be portable. Obviously you'll need php to be installed on the new computer bu that's about it :)\n. Yup.\n. I did composer clear-cache and then composer require google/apiclient ^2.0 just now and it worked just fine:\n```\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing psr/http-message (1.0)\n    Downloading: 100%\n\n\nInstalling guzzlehttp/psr7 (1.2.3)\n    Downloading: 100%\n\n\nInstalling guzzlehttp/promises (1.2.0)\n    Downloading: 100%\n\n\nInstalling guzzlehttp/guzzle (6.2.0)\n    Downloading: 100%\n\n\nInstalling phpseclib/phpseclib (2.0.2)\n    Downloading: 100%\n\n\nInstalling psr/log (1.0.0)\n    Downloading: 100%\n\n\nInstalling monolog/monolog (1.20.0)\n    Downloading: 100%\n\n\nInstalling firebase/php-jwt (v3.0.0)\n    Downloading: 100%\n\n\nInstalling google/apiclient-services (v0.4)\n    Downloading: 100%\n\n\nInstalling psr/cache (1.0.0)\n    Downloading: 100%\n\n\nInstalling google/auth (v0.8)\n    Downloading: 100%\n\n\nInstalling google/apiclient (v2.0.0)\n    Downloading: 100%\n\n\nphpseclib/phpseclib suggests installing ext-libsodium (SSH2/SFTP can make use of some algorithms provided by the libsodi\num-php extension.)\nmonolog/monolog suggests installing aws/aws-sdk-php (Allow sending log messages to AWS services like DynamoDB)\nmonolog/monolog suggests installing doctrine/couchdb (Allow sending log messages to a CouchDB server)\nmonolog/monolog suggests installing ext-amqp (Allow sending log messages to an AMQP server (1.0+ required))\nmonolog/monolog suggests installing ext-mongo (Allow sending log messages to a MongoDB server)\nmonolog/monolog suggests installing graylog2/gelf-php (Allow sending log messages to a GrayLog2 server)\nmonolog/monolog suggests installing mongodb/mongodb (Allow sending log messages to a MongoDB server via PHP Driver)\nmonolog/monolog suggests installing php-amqplib/php-amqplib (Allow sending log messages to an AMQP server using php-amqp\nlib)\nmonolog/monolog suggests installing php-console/php-console (Allow sending log messages to Google Chrome)\nmonolog/monolog suggests installing rollbar/rollbar (Allow sending log messages to Rollbar)\nmonolog/monolog suggests installing ruflin/elastica (Allow sending log messages to an Elastic Search server)\nmonolog/monolog suggests installing sentry/sentry (Allow sending log messages to a Sentry server)\ngoogle/apiclient suggests installing tedivm/stash (For caching certs and tokens (using Google_Client::setCache))\nWriting lock file\nGenerating autoload files\n```\nMy guess: packagist had a temporary hickup. Or maybe your network connection did.\n. #222 is an old ticket requesting PSR-3 logging.\nAnyway, this is something I plan on doing when I rewrite SSH2.php for the master branch. I won't do it for the 1.0 / 2.0 branches in the interests of maintaining backwards compatibility. And there's just a lot of other features I want to do in the mean time.\n. Does replacing ($this->encoded[$decoded['start']] & 0x20) with (ord($this->encoded[$decoded['start']]) & 0x20) fix the issue for you?\nAlso, if you could provide the cert or whatever it is that you're trying to decode that'd be helpful. I'll make a unit test out of it!\n. This has been fixed in all branches:\nhttps://github.com/phpseclib/phpseclib/commit/dc7f7e4d859468ce2318fc1562738c4d887d9647\nThanks for the headsup!\n. I'll try to do that this weekend.\nThanks!\n. > @terrafrost Did you have any chance already for this? :-)\nSorry for the delay - this weekend / week have been busier than I had anticipated.\nAnyway, 1.0.3 and 2.0.3 have been tagged and released.\nThanks!\n. Normally, $response = $this->_get_channel_packet(self::CHANNEL); populates $this->server_channels[self::CHANNEL],. It's weird that it isn't for you. Can you post your server logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and echo $ssh->getLog(); after the failed login attempt.\nThanks!\n. Can you post your server logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and echo $ssh->getLog(); after the failed login attempt.\nThanks!\n. I'm not seeing the email :\\ I just sent a test email to terrafrost@php.net and got it so idk.\nAnyway, the password is filtered out. It's been filtered out of the complex logs since at least 0.3.0:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.0/phpseclib/Net/SSH2.php#L1454\nThe current version does it a little differently:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L2026\nBut none-the-less passwords should be filtered out assuming you're not using an ancient version lol\n. @salahy2 - the fact that you responded to a closed ticket instead of opening a new one may mean subsequent replies may get lost. It might be beneficial for you to open up a new ticket.\nRegardless...  can you post your SSH logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and echo $ssh->getLog(); after the failed login attempt.. I cherry picked this commit from your branch (a fork of master) into the 1.0 branch and then merged it up to the master branch.\n. Can you do the styleci fixes in another PR? I don't have a problem with them, per say, but they really ought to be in a separate commit and PR.\nI will say that one thing the styleci fixes did I don't agree with. ie. They removed @access private from the phpdoc blocks. Those functions are implicitly public since no visibility keyword is explicitly used but they're not really intended for public use all the same, hence the @access private (which hides them from the default phpdoc generated documentation). They're not explicitly private because sometimes I've asked people to directly access otherwise private functions to assist me in debugging. If I had to ask them to go into the source and modify the visibility and then call those functions...  well that'd be more hoops people would have to jump through and the odds of them not jumping through those hoops would increase.\nAlso, Net/SCP.php does call \"private\" functions. ie. they're private in that they're not intended for third parties to access (unless they're told to by me) and when I say that the API is stable I'm referring to functions that have @access public - not @access private - so BC breaks with \"private\" functions isn't a concern of mine - just \"public\" ones. Altho in the case of SCP.php, I have been thinking I might delete that from the master branch, but still...\nThere's also stuff like this:\nphp\n        $block = ($shuffleip[$r        & 0xFF] & \"\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\") |\n                 ($shuffleip[($r >>  8) & 0xFF] & \"\\x40\\x40\\x40\\x40\\x40\\x40\\x40\\x40\") |\n                 ($shuffleip[($r >> 16) & 0xFF] & \"\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\") |\n                 ($shuffleip[($r >> 24) & 0xFF] & \"\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\") |\nIt used to be like this:\n$block = ($shuffleip[ $r        & 0xFF] & \"\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\") |\n             ($shuffleip[($r >>  8) & 0xFF] & \"\\x40\\x40\\x40\\x40\\x40\\x40\\x40\\x40\") |\n             ($shuffleip[($r >> 16) & 0xFF] & \"\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\") |\n             ($shuffleip[($r >> 24) & 0xFF] & \"\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\") |\nFor one of those code blocks the square brackets are aligned. For the other (the one this PR produces) they're not.\nI do like that the spaces in the middle are preserved but sometimes trailing (and preceding) spaces are intended.\nThat said, I don't really see this as being a huge issue and it's one that I could live with.\nAlso, why are the @package RSA stuff being removed? I mean, I guess I'm not overly married to it but is that now deemed as being unnecessary or something?\nAnd speaking of RSA, why are use phpseclib\\Crypt\\AES and use phpseclib\\Crypt\\TripleDES being removed?\nReplacing all the array() instances with [] does raise the minimum PHP version required but for the master branch I was thinking about doing that anyway so I actually don't have a problem with that (square bracket syntax was introduced in 5.4 - phpseclib 2.0 is designed to work on 5.3; changing the minimum version reqs is a BC break, in-so-far as I'm concerned).\nI'm actually ok with most of the changes, with the caveats that I've mentioned above. Well and with the caveat that I haven't reviewed everything yet. But the fact that I've spent this much time reviewing the CS changes without actually looking at what the title of your PR is about...  well that's just testament to the fact that the CS changes ought to be in a separate PR.\n. php\nfunction root($n = null)\n{\n    $one = new static(1);\n    $two = new static(2);\nIn randomPrime those variables are declared static within the function to avoid having to reinitialize them each time:\nhttps://github.com/phpseclib/phpseclib/blob/dd23d91d411d812b2765c5bc3b8bd43fe58be0a2/phpseclib/Math/BigInteger.php#L3125\nBut that said, it'd probably be better to make them static for the entire class instead..\nAlso, on PHP 5.6, internal mode and gmp mode give different answers:\n``` php\n$root = new BigInteger(4);\n$num = new BigInteger(300);\necho $num->root($root);\n```\ngmp gives 4 as the answer and internal mode gives 5. It should give the same result regardless of the mode being used.\nI believe GMP uses Newton's Method to calculate n'th roots:\nhttps://gmplib.org/manual/Nth-Root-Algorithm.html\nhttps://en.wikipedia.org/wiki/Nth_root_algorithm\nWhat I did when implementing a lot of the initial functions was to look at Java's implementation of BigInteger:\nhttps://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html\nUnfortunatley, that doesn't appear to have any method for finding the nth root. Neither does BigDecimal:\nhttps://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html\nAn n'th root algorithm is also not described in the Handbook of Applied Cryptography:\nhttp://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.99.2838&rep=rep1&type=pdf\nAnyway, I have an idea on how to fix the issue with gmp / internal modes output not matching (that wouldn't require deleting gmp_root but I'll play around with that later.\n. So I'm honestly a bit on the fence about adding a root() method given that, aside from gmp, I'm not aware of any biginteger implementations that use it.\nThat said, I made some changes to the commit:\nhttps://github.com/terrafrost/phpseclib/tree/danog2\nSo gmp_root() seems to work by doing the floor() operation on the numbers. Like the 4th root of 3500 is 7.69160 but gmp returns 7. http://php.net/gmp-root basically says as much when it says \"take the integer part of nth root\"\nAnyway, I rewrote this a bit. The bcmath and the pure-PHP versions were pretty much the same so I just removed the bcmath version and am having it use the pure-PHP version when GMP is present.\nbitwise_leftShift() doesn't do this but bitwise_leftShit() is also a lot less complex with what it's doing.\nI've also made min() and max() static. Like how random() and randomPrime() are in the master branch. But unlike those functions I've made it so that min() and max() can take an arbitrary number of parameters (eg. more than 2 but it could be less than two too lol)\nAs for loopforeach...  so you have two methods for incrementing / decrementing...  one increments using the regular arithmetic operations and the other increments using a BigInteger object. The limit could, in some cases, be improved upon by using floating point numbers. See self::$maxDigit in __construct. That said, I think it's fine, as is. There's room for improvement but it's not a show stopper either.\nedit: I guess I'll probably merge this in a week or so so others have a time to provide feedback if they're so inclined.\n. @bantu - fair enough. I've removed it. If people want that functionality they can always extend the BigInteger class and add that functionality.\n. Are you doing real-time logging?\nIt's doing keyboard-interactive authentication where the prompt is Password:. The problem with real-time logging is that it's ambiguous. A \"type\" of 60 is NET_SSH2_MSG_USERAUTH_INFO_REQUEST if you're doing keyboard-interactive authentication or NET_SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ for password authentication or NET_SSH2_MSG_USERAUTH_PK_OK for publickey authentication.\nWith complex logging (define('NET_SSH2_LOGGING', 2)) it modifies the log output to match the appropriate type before it's output but with real-time logging it doesn't.\nExample of how it looks with complex logging:\n```\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0021, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0037, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0003, network: 0.0002s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_FAILURE (since last: 0.0013, network: 0.0012s)\n00000000  00:00:00:1e:70:75:62:6c:69:63:6b:65:79:2c:6b:65  ....publickey,ke\n00000010  79:62:6f:61:72:64:2d:69:6e:74:65:72:61:63:74:69  yboard-interacti\n00000020  76:65:00                                         ve.\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:06:75:62:75:6e:74:75:00:00:00:0e:73:73  ....ubuntu....ss\n00000010  68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:14  h-connection....\n00000020  6b:65:79:62:6f:61:72:64:2d:69:6e:74:65:72:61:63  keyboard-interac\n00000030  74:69:76:65:00:00:00:00:00:00:00:00              tive........\n<- NET_SSH2_MSG_USERAUTH_INFO_REQUEST (60) (since last: 0.0006, network: 0.0006s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:01  ................\n00000010  00:00:00:0a:50:61:73:73:77:6f:72:64:3a:20:00     ....Password: .\n-> NET_SSH2_MSG_USERAUTH_INFO_RESPONSE (61) (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:0c:64:75:6d:6d:79:2d:61:6e  ........dummy-an\n00000010  73:77:65:72                                      swer\n<- NET_SSH2_MSG_USERAUTH_INFO_REQUEST (60) (since last: 0.0082, network: 0.0081s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00  ................\n-> NET_SSH2_MSG_USERAUTH_INFO_RESPONSE (61) (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0007, network: 0.0006s)\n```\nMy guess: in the sshd_config file there's a line - UsePAM. Maybe yours is set to no when it should be set to yes?\nCan you login with any other SSH client?\n. Can you login with any other client? Can you post your full SSH logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog(); after the login attempt.\nOne problem I sometimes have...  I do $rsa->loadKey('/path/to/key.pem') instead of $rsa->loadKey(file_get_contents('/path/to/key.pem)). Maybe you're having the same problem.\n. What version of phpseclib are you using? Could you put the log output into` tags? As is all the new lines have been removed making it a little hard to read.\nThanks!\n. What if you post a copy of your ~/.ssh/authorized_keys file? All that contains are the public keys. The key you gotta keep secret is your private key and that's not in the ~/.ssh/authorized_keys file anyway.\nI'm just thinking that maybe you did a bad copy / pasting or something..\n. 7GB is pretty big for a string. Maybe try to encrypt it piece meal with continuous mode. eg.\nphp\n$aes->enableContinuousMode();\nwhile (!feof($input)) {\n    fwrite($output, $aes->encrypt(fread($input, 1024)));\n}\n. I took an alternate approach for the 1.99 stuff:\nhttps://github.com/phpseclib/phpseclib/commit/c20b661a4417cab29965581a5fabc4f42aba3f7d\nFor the microtime handling...  microtime returns an int whereas microtime(true) returns a float. So when a second has passed you're not subtracting 1e6 from $this->curTimeout - you're subtracting 1e-6. So by diving the elapsed time (in seconds with microseconds as a fractional amount) by 1e6 you're essentially making the timeout unlimited. Like normally it'd timeout if 30 seconds have passed but if you're going to divide that 30 by 1e6 then that 30 essentially becomes 0 and the default timeout ceases to be 30s but rather, almost a full year. Unless my analysis is incorrect?\n. I'll review this this weekend. Thanks!\n. I cherry picked this into the 1.0 branch and merged that into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commit/1eda62913aa4c3f0806b23e180fd7b022dbde1e8\nThanks!\n. I'll take a look this weekend.\nThanks!\n. This is an issue new to 1.0.3 that was introduced with #1000. https://github.com/phpseclib/phpseclib/commit/5c2ffd254416e3cca3f1557557b0ccc3e5e5c08f should fix this. Thanks!\n. mcrypt is only used if it's available. If mcrypt is not available either a pure-PHP implementation is used or OpenSSL is used. The prioritization is as follows: OpenSSL > mcrypt > pure-PHP. mcrypt and OpenSSL are loads faster than the pure-PHP implementation.\nOn PHP 7.1.0 Beta 3 with http://phpseclib.sourceforge.net/crypt/phpseclib.phps (slightly modified to work with 1.0.3) I get 0.595s with internal mode. With mcrypt I get 0.013s. With OpenSSL I get 0.002s.\nSo mcrypt offers a 45x speedup over the internal mode. OpenSSL offers a 6.5x speedup over mcrypt.\nIf you're getting notices about mcrypt that, in all likelihood, means that you don't have OpenSSL installed but that you do have mcrypt installed.\nI could make it so that mcrypt isn't called, even if it's available, on PHP 7.1+, but then your cryptography would be much much slower. Which isn't to say that the pure-PHP implementation is slow - I submit that it's the fastest pure-PHP implementation out there and I think doing a megabyte of data in half a second is still pretty good but....  it can be a lot better. And if you're doing gigabytes of data it probably needs to be a lot better. But, still, the pure-PHP version is a lot slower. And, personally, I think a few E_DEPRECATED warnings is preferable to hit in speed that people in your shoes (who have mcrypt installed but not OpenSSL) would experience if I suppressed it on 7.1+.\n. > If mcrypt can handle this, surely OpenSSL should be able to as well\nIt actually doesn't in a lot of cases. With OpenSSL you specify the the key length and mode when you're specifying the algorithm. ie. you do aes-128-cbc or rc4-128 or whatever. This poses several problems. First, the algorithm may support larger keys than OpenSSL provides options for. It'd probably be an easy enough fix for OpenSSL to expose them but that'd have to be done on the OpenSSL side and then in the PHP bindings to OpenSSL probably.\nAlso, OpenSSL doesn't operate in \"continuous mode\". So normally encrypt($a) done twice yields the same result. But in continuous mode you wouldn't want it to. In continuous mode you'd want encrypt($a) . encrypt($a) == encrypt($a . $a). SSH operates in continuous mode and phpseclib emulates continuous mode with OpenSSL for block ciphers. But it can't emulate continuous mode for stream ciphers such as RC4, hence why mcrypt is used over OpenSSL in the case of SSH.\n\nAfter going through the code a bit more, I found out that this is triggered in Crypt\\RC4's isValidEngine(), which returns false for me because strlen($this->key) == 1 (which I don't understand, because it implies an 8-byte key)\n\nThat does sound weird. I'd probably want to make my own independent diagnosis but trying to debug by proxy is kinda a PITA and for something that's not breaking things per say idk that it's worth the effort.\n. The 1.0.4 release uses error suppression to hide mcrypt notices.\n. Can you copy / paste that warning? Because I'm pretty skeptical that that's an actual PHP warning. In fact it seems very possible that you're using phpcs on phpseclib and you're running into the same issue #337 ran into. eg.\n\ncall-time pass-by-reference is when you do foo(&$a); - not when you do &foo($a); What phpseclib is doing in the lines of code you mentioned is returning by reference\n\nphpseclib is unit tested on Travis CI on PHP versions going up to 7.0. A call-time pass-by-reference would cause the unit tests to fail and yet they're not failing.\n. The founder of Mt. Gox, which actually used to be the largest bitcoin exchange, wrote an SFTP server back in 2010:\nhttps://web.archive.org/web/20140226001727/http://blog.magicaltux.net/2010/06/27/php-can-do-anything-what-about-some-ssh/\nhttps://web.archive.org/web/20131004042146/http://ookoo.org/svn/pinetd2/trunk/code/classes/Daemon/SSHd/\nOf course, phpseclib pre-dates that by about three years and phpseclib continues to be maintained and has probably been a lot more vetted, etc, than that implementation has.\nAnyway, to answer your question, it would be interesting, but, realistically speaking, it's probably not something I'll be devoting any time to anytime soon.\n. I apologize for the delay - I've been on an Alaskan cruise via Holland America and I've been trying to ration my internet since I was paying by the minute.\nAnyway, it's hard to say much with the information that you've thus far provided. One possibility: the PKCS12 private key is a DSA private key and not an RSA one. Without the pkcs12 file I can't rule this out as a possibility.\nSo what'd really help is if you give me a PKCS12 (.pfx or .p12) file and a ciphertext that reproduces the problem.\n. Yah - terrafrost@php.net . Thanks!\n. I apologize for the delay. Anyway, try setting the MGF1 hash to sha256 as well.\nAltho Java isn't mentioned in this post it is mentioned in the email correspondence and I think some of the confusion is due to the meaning of RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING. With Sun's built-in cryptography provider that sha1 is the MGF hash whereas with BouncyCastle sha256 is the MGF hash. In both cases the main hash is sha256 but the MGF hash differs.\n. There is getServerPublicHostKey(). It's always a good idea to do it but I always omit it in the examples for brevity. But this isn't something phpseclib can really do on it's own since it doesn't know anything about the system it's running on. Like maybe you'd want to store the public host keys in a database but phpseclib wouldn't have any way of knowing about DB's.\n. #995 seems like the most likely culprit but I'd need more information to develop a fix.\nTry this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SFTP.php\n\n-----[ FIND ]------------------------------------------\n\n            $temp = isset($fp) ? fread($fp, $sftp_packet_size) : substr($data, $sent, $sftp_packet_size);\n\n\n-----[ AFTER, ADD ]------------------------------------\n\nif ($data == 'problemfilename.txt') {\nvar_dump($temp);\n}\n```\nThat requires you figure out what file it's hanging on. You could comment out the if condition as well to just dump $temp out 24/7. Anyawy, if you run that via the CLI it should just output perpetually until you break the process. You can then copy / paste the output and post it here or on pastebin.com (and then post the link here).\nThanks!\n. #1026, which has been merged, should fix this. It's in the latest git version if you want to try it out. You appear to be using the 2.0 version so use the latest version from the 2.0 branch.\nThanks!\n. I think you posted about this on stackoverflow: http://stackoverflow.com/questions/39275323/wrong-hmac-using-php-5-0-4\nAnyway, I'm not able to reproduce the problem on Windows on 5.0.4 or 5.0.5 (the latest version of 5.0 on http://museum.php.net/php5/). I tried it using mhash and internal mode.\nCan you post your phpinfo()?\n. I think https://github.com/terrafrost/phpseclib/tree/1.0-32bit-fixes should fix the issue for you. LMK!\n. Glad to hear it! The fix has been merged into 1.0 / 2.0 / master.\nThanks!\n. I recently backported #945 to the 1.0 and 2.0 branches so maybe try the latest git version of either of those branches and see if that doesn't result in a speedup for you.\n. I tried it myself. With the changes it takes 0.250s, 0.240s and 0.279s to download 10MB from 127.0.0.1.\nWithout the changes (ie. the 1.0.3 branch) it took 0.411s, 0.4155s and 0.4109s.\nThe exact speed depends on a number of factors including, among others, the performance of your network. For example, the revised get() implementation is less likely to have a meaningful impact on speed-impaired networks. But, more than that, there's also the cipher used, the use of compression (which phpseclib doesn't support), locally installed extensions (gmp, bcmath, openssl, mcrypt), etc.\nIn your case....  well for one I'm wondering if actually are using the latest git version. Also, you say that with the latest git version it took 82s, but you don't say how long it takes with the orig version.\nI guess what I'd be interested in are two things.\n1. The simple SFTP log, which you can get by doing define('NET_SFTP_LOGGING', 1) at the top of the file and then print_r($sftp->getSFTPLog()) after the file upload. Altho maybe get this with a smaller file.\n2. The SSH2 logs showing the initial handshaking. You can get these by doing define('NET_SSH2_LOGGING', 2) at the top of the file and then echoecho $sftp->getLog()` after you've logged into the server.\n. A lot of the failures are because phpseclib uses mcrypt. I'm not going to remove those calls, however, or even disable mcrypt on PHP versions > 7.1. SSH2 cannot use PHP's bindings to OpenSSL but it can use PHP's bindings to mcrypt. This is because, among other things, mcrypt can propagate the state of the cipher from call to call whereas OpenSSL cannot. I mean, I'm sure the C version of OpenSSL can but the PHP bindings don't expose that functionality.\nI can, however, use the error suppression operator (@) to make those errors go away. Which, right now, is what I'm thinking I'll do.\n. I squashed your two commits and cherry-picked them into the 1.0 branch and got phpseclib working on PHP 7.1 without errors:\nhttps://github.com/terrafrost/phpseclib/commit/640f10609fdb2aa825f8a42c6bee975879974e1c\nIn #1037 you mentioned \"A non-numeric value encountered\". That was fixed a while ago with this commit:\nhttps://github.com/phpseclib/phpseclib/commit/dc7f7e4d859468ce2318fc1562738c4d887d9647\n. The fix has been merged.\nThanks!\n. See https://github.com/phpseclib/phpseclib/pull/1036#issuecomment-248460183 and https://github.com/phpseclib/phpseclib/pull/1036#issuecomment-248585831\nI want to do a PR, give people a chance to review it, and then merge it. I'm going to try to do that later today.\n. phpseclib is now passing on Travis CI  with PHP 7.1:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/164359081\nThanks!\n. PHP integers can be either 32-bit or 64-bit depending on the underlying system architecture. And since ints are signed you can get weird edge cases when the leading bit is a 1 (eg. 0x80000000).\nUnfortunately, idk of a way to unit test this since I don't think you can control the memory address size with Travis CI but, none-the-less, this feedback helps - thanks!\n. > I think that if $a and $b are both 32-bit integers, then $result will be the exact same on both architectures. \nYah - it should be for xor.\nIn the second code sample romucifu posted 2242054355 is bigger than PHP_INT_MAX on 32-bit systems (2147483647). That means it's a float that's being cast to an int as -2052912941. I'm able to duplicate that.\nBut I'm not able to duplicate the issue with Blowfish. I'm using internal mode on a 32-bit machine with phpseclib 1.0.3:\n``` php\n<?php\ninclude('Crypt/Blowfish.php');\necho PHP_INT_MAX . \"\\n\";\n$cipher = new Crypt_Blowfish();\n$cipher->setPreferredEngine(CRYPT_ENGINE_INTERNAL);\n$data = 'abcdefghijk';\n$cipher->setKey('abcdef0123456789abcdefghi9876543');\necho bin2hex($cipher->encrypt($data));\n```\nI get 2147483647 for PHP_INT_MAX and ad7145c675b1c914bbfe379dc7293bf3 for the ciphertext.\nOn this particular machine I'm running PHP 5.6.11 on Windows 10. I have other PHP versions I can test it out on but I tested out #1034 (also submitted by romucifu) on multiple PHP versions and wasn't able to duplicate that. I'm not confident I'll be able to reproduce this issue but none-the-less I'll try as time permits.\nOne thing that might help...  if I were just given SSH access to the computer demonstrating the problem. I could be emailed the auth details to terrafrost@php.net. Being able to actually reproduce the problem will let me step through the code. I could see where the data begins to diverge. I suppose I could attempt to do this by proxy (eg. I post code, the OP runs it and tells me the output, and we keep on doing that) but that can turn a multi-hour endeavour into a multi-week one that most people aren't going to have the patients for.\n. I just tried it on PHP 5.2.9 and I got the same thing. I got ad7145c675b1c914bbfe379dc7293bf3 instead of 0e1651fc54dd530757fc1711b696dac5. So yah I'm not able to reproduce this, even on the version of PHP you're running and the proceed further I think I'm just going to need shell access to run CLI scripts and modify them.\nEven if you're running an outdated version of PHP, phpseclib should still support it imho. So long as phpseclib 1.0 claims to work on PHP 5.2 it should. And phpseclib 1.0 should continue to work on 5.2 because changing that would be a BC break\n. Testing arbitrary versions of PHP is a little easier with Windows. You just go to http://museum.php.net/, download the binaries for the version you want, and bam, you're good to go.\nTesting arbitrary versions of PHP on Linux isn't so easy. With Linux I normally use Ubuntu. The easiest way to install a non-specific version of PHP is to do sudo apt-get install php5 but that if you want to install a specific version then you pretty much have to compile it. And if you're going to do that you'll need to install the dependencies too. But for sufficiently old versions it may even take time and effort to track down the dependencies and even then you may need to find the right versions of the dependencies. Or else modify the dependencies to be BC with the version that PHP is expecting.\nLike a few years ago I tried to compile PHP 5.2.17 and here's what I had to do:\nsudo apt-get update\nsudo apt-get install build-essential\nsudo apt-get install libxml2-dev\nsudo apt-get install libgmp3-dev\nwget http://museum.php.net/php5/php-5.2.17.tar.gz\ntar xvzf php-5.2.17.tar.gz\ncd php-5.2.17\nwget https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt\npatch -p0 < txtbgxGXAvz4N.txt\nsed -i 's/__GMP_BITS_PER_MP_LIMB/GMP_LIMB_BITS/g' ext/gmp/gmp.c\n./configure --prefix=/usr/local --enable-bcmath --enable-mcrypt --with-gmp\nmake\nsudo make install\nIn your case GMP wouldn't be needed. It might be easier but it also might not be. None-the-less I can try to give it a shot as time permits but do realize that with each successive hoop I have to jump through the odds of me successfully reproducing the problem diminish.\n. So in Blowfish.php there are lines like this:\nphp\n            $l^= ($sb_0[$r >> 24 & 0xff]  +\n                  $sb_1[$r >> 16 & 0xff]  ^\n                  $sb_2[$r >>  8 & 0xff]) +\n                  $sb_3[$r       & 0xff];\nPersonally, I think ($a + $b) ^ $c is preferable to $a + $b ^ $c but that's a different matter.\nThe problem is adding stuff. Even if $a and $b are int's their sum may exceed the max value for a signed 32-bit int. So in those situations it'll cast a float to an int.\nOn PHP 7.0.2 (32-bit) on Windows casting -2368666402 to an int gives 0x72d104de back.\nOn PHP 5.2.17 (32-bit) on Ubuntu casting -2368666402 to an int gives 0x80000000 back.\nThe only thing I can figure is maybe create a new function - safe_add:\nphp\nif (is_int($sum)) {\n    return $sum;\n}\nreturn $sum < 0 ? fmod($sum, 0x80000000) ^ 0x80000000 : $sum;\nfmod(-2368666402, 0x80000000) isn't sufficient because that returns 0xf2d104de - not 0x72d104de.\nI'll have to try this on later versions of PHP on Ubuntu..\n. Actually, here's the function that I think will need to be added.\nphp\nfunction safe_intval($x) {\n    // PHP 5.3, per http://php.net/releases/5_3_0.php, introduced \"more consistent float rounding\"\n    // PHP_OS & \"\\xDF\\xDF\\xDF\" == strtoupper(substr(PHP_OS, 0, 3)), but a lot faster\n    if (is_int($x) || version_compare(PHP_VERSION, '5.3.0') >= 0 || (PHP_OS & \"\\xDF\\xDF\\xDF\") === 'WIN') {\n        return $x;\n    }\n    return (fmod($x, 0x80000000) & 0x7FFFFFFF) |\n        ((fmod(floor($x / 0x80000000), 2) & 1) << 31);\n}\nThe first part of the OR gets the bottom 31 bits. But because fmod can return negative numbers the first bit is reserved for signage (positive / negative). For that reason we can't do fmod with 0x1 0000 0000. The second part essentially does >> 31 and then does & 1 and then does << 31. So it's isolating the msb.\nI tested intval(-2368666402) on PHP7 on 32-bit Ubuntu and got 0x72d104de back. I'll try it on PHP 5.3 tomorrow and try to figure out what the oldest version of PHP that this isn't needed on is.\n. I think https://github.com/terrafrost/phpseclib/tree/1.0-32bit-fixes should fix the issue for you. LMK!\n. We'd have to add both halves and then, for the upper half, keep track of whether or not we needed to carry stuff over. It's definitely a valid approach but idk that it'd be any faster (or slower).\n. Glad to hear it! The fix has been merged into 1.0 / 2.0 / master.\nThanks!\n. The release notes say \"BigInteger/RSA: don't compare openssl versions > 1.0\". Here's the commit that does that:\nhttps://github.com/phpseclib/phpseclib/commit/6ff421d3547bdb2a79b1014d660a508a2a37c9c3\nThe https://github.com/phpseclib/phpseclib/commit/7a628c62b0071d03bde6be82c2f77acdadb20df2 commit is in the master branch. The master branch doesn't check phpinfo at all. The 1.0 and 2.0 branches do check it - they just don't disable OpenSSL if both the header and library versions of OpenSSL are above 1.0.\n. I cannot figure out why this is failing.\nhttps://travis-ci.org/terrafrost/phpseclib/builds/161539623\nhttps://travis-ci.org/terrafrost/phpseclib/builds/162353763\nThose two work just fine.\nI do git pull upstream 1.0 in the 1.0-php71 branch and get the following message:\n* branch            1.0        -> FETCH_HEAD\nAlready up-to-date.\nThe diff looks good too:\nhttps://github.com/phpseclib/phpseclib/compare/1.0...terrafrost:1.0-php71\n. https://github.com/phpseclib/phpseclib/pull/1040/commits/e81b8d90d3fa98d155c0e050f3d56b32affbcae7 seems to have fixed the unit test timeout errors. The timeout errors were inconsistent but even if there wasn't a timeout it was still taking a long time to run on PHP 7.1. Took 10+ minutes before the \"Travis: PHP 7.1 tweaks\" commit. Now it takes ~1 minute.\n. I think #1026 should fix the issue. If so then I think I'll do a release this weekend.\n. I just released 1.0.4 and 2.0.4, which includes fixes for this issue.\nThanks!\n. The master branch should not be used in a production environment. The changes I have locally (that are still under development) will up the PHP version requirement for the master branch to 7.0.\n72d1bdf is not a change that is present in 1.0 or 2.0. Just master.\n. Well this is for the master branch. Eventually I'll create a 3.0 branch from the master branch but I'm not at that point yet. And when 3.0.0 is released PHP 7 might not be so new.\nBut the reason I have it upped to PHP 7 in the master branch is because I'm using \"Constant arrays using define()\", which is discussed at http://php.net/manual/en/migration70.new-features.php. I'm using define() instead of const because you can't do array unions in const's whereas you can in define(). Maybe I'll change how I'm doing things as I rewrite additional parts of the code. The minimum required version could go up or down depending on how things go during various refactors / rewrites.\n. > @terrafrost Please use const instead of define as the latter is in global space.\nI actually am namespacing the define's. eg.\nphp\ndefine(__NAMESPACE__ . '\\PrivateKeyInfo', [\n    'type'     => ASN1::TYPE_SEQUENCE,\n    'children' => [\n        'version' => Version,\n        'privateKeyAlgorithm'=> AlgorithmIdentifier,\n        'privateKey' => PrivateKey,\n        'attributes' => [\n            'constant' => 0,\n            'optional' => true,\n            'implicit' => true\n        ] + Attributes\n    ]\n]);\nBut you see that 'privateKey' => PrivateKey, bit? PrivateKey is another constant. I can't reference constants in constants with const but I can with define.\nThe thing is...  with the work that I've done ASN1.php will be used in a -lot- more places. And ASN1 involves massive arrays. But portions of the arrays can be re-used. Like AlgorithmIdentifier...  that's used all over the place.\nIn 1.0 and 2.0 X509.php has a ton of little arrays defined that incorporate other arrays into them. But that's all done in the constructor, which I'm not a big fan of. I don't want to have to do  $pkcs8 = new PKCS8(); ASN1::asn1map($decoded[0], $pkcs8->PrivateKeyInfo) (asn1map isn't currently static in my changes but I figure I'll tackle that in a later change). Right now what you'd have to do is ASN1::asn1map($decoded[0], \\phpseclib\\Crypt\\RSA\\Common\\PrivateKeyInfo) and \\phpseclib\\Crypt\\RSA\\Common\\PrivateKeyInfo is an array.\nCamel case constants using define() is also a bit weird. The convention is to normally have them be all upper case. But it's consistent with the ASN1 specs in the various RFC's I'm consulting.\nAnother possibility: I could do ASN1::asn1map($decoded[0], PKCS8::getSingleton()->PrivateKeyInfo) but I don't like that either. I guess I could do ASN1::asn1map($decoded[0], $pkcs8::getASN1Value('PrivateKeyInfo') or something and getASN1Value would instantiate a singleton once and then it'd return the specified values from that.\nAnyway, what I've done is just tentative. I mean, I'll commit it, but keep in mind, what I'm doing, atm, is just for PKCS1 / PKCS8 so that I might re-use what I can with DSA and ECDSA. I later plan on re-examining ASN1 as a whole (at which point I'll probably make asn1map static). That'll be necessary, anyway, so that I can split X509 up into X509, CSR, SPKAC, CRL, etc.\nThat said, I will say that by using ASN1, I've managed to get preliminary support for PBES2 instead of just PBES1. The last approach basically parsed the binary file character by character. ASN1 parses it character by character, as well, but it does so in a more re-usable and more extensible way.\n. Fixed.\nThanks!\n. There are a number of coding standard issues. The class isn't namespaced, curly brackets aren't on new lines when they should be or, in some cases, aren't present at all (phpseclib basically uses PSR2 with a few exceptions as delineated at https://github.com/phpseclib/phpseclib/blob/master/build/code-sniffer-ruleset.xml) and the phpDoc comments aren't really compliant with that standard either.\nThat said, tbh, as useful as this class is, I think this is best left as a helper class that does not live in the phpseclib repo.\n. 1.0 is still actively maintained. It - and the 2.0 branch - had releases about two weeks ago and it's unit tested on Travis CI up to PHP 7.1.\nphpseclib 2.0 works best with Composer altho I wouldn't go so far as to say that it requires it. But, none-the-less, that's why I'm not providing a downloadable zip file of that. If you really want one you can get it from github.com, open the tagged release, and download the zip file of that.\nphpseclib dev-master (which'll become 3.0) will be Composer-only.\nAs for the documentation...  I would like to redo it but in lieu of volunteers actually stepping up I'll probably do it when 3.0 is nearing release (ie. not for a while). In the mean time...\n\n\nssh session for separate commands\n\n\nhttp://phpseclib.sourceforge.net/ssh/intro.html\nIn that link it says \"successive calls may not work as expected\" and links to this:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#chdir\nI'm not sure if that's what you're talking about?\n\n\nWhen the execution ends (in time)\n\n\nIt's 10s by default but that's not documented anywhere. I can add that.\n\n\nwhere the execution ended (in output)\n\n\nThat functionality does not exist within phpseclib but people using phpseclib can do $start = microtime(true); $ssh->exec('do something'); $elapsed = microtime(true) - $start;\n\n\nHigh ping / waiting time, if you try to solve the above problems, by\n  reading per command.\n\n\nI'm not sure what you mean?\n\n(php sec lib cannot make connection (I can make connection from ssh)\n\nWithout more information it's possible it's something like suexec preventing fsockopen from making socket connections or some such. But if you've already worked around it that works too!\n. Quoting RFC4253, \"Key exchange will begin immediately after sending [the SSH-2.0-xxx identification string]\". Later, in the same RFC (Section 7.1) it says \"Key exchange begins by each side sending the following packet\".\nIf your SSH server is not sending the key exchange packet immediately than I'd say your server is buggy. I would actually be curious to know what your server identification string is. You can get it by doing echo $ssh->getServerIdentification();\nThat said, it is a fact that some SSH servers are buggy and sometimes workarounds can be implemented to work on those servers. PuTTY has a bunch of workarounds present:\nhttps://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter4.html#config-ssh-bugs\nphpseclib doesn't need all of these and, in some cases, needs workarounds that PuTTY doesn't, because phpseclib supports ciphers that PuTTY doesn't.\nLong story short, try this:\nhttps://github.com/terrafrost/phpseclib/tree/2.0-send-kex-before-rcpt\n. Did you try the branch I made?:\nhttps://github.com/terrafrost/phpseclib/tree/2.0-send-kex-before-rcpt\n. Ah. Well, FWIW, I did forget to actually commit the change in the branch I made lol. I just committed / pushed but yah if it's your home network / ISP than that branch wouldn't help.\n. I wouldn't call it a bug. It's an alternative way of doing things that shouldn't be necessary for properly implemented SSH servers. And thus far I am aware of no instances where this would actually make a difference. I hypothesized that it might help here but if the OP isn't having issues in his office network then idk.\nLike I'll merge it if it actually helps but if it doesn't then it's just a change for the sake of making a change lol\n. > @terrafrost What I was trying to say is that if $s can be empty, you should not access $s[0].\nIf we're going to do that we might as well fix all the PHP warnings that'll be emitted if \nhttps://github.com/terrafrost/phpseclib/tree/1.0-suppress-unpack-errors\nDemo showing that unpack on an insufficiently long string will result in a warning:\n``` php\nfunction string_shift(&$string, $index = 1)\n{\n    $substr = substr($string, 0, $index);\n    $string = substr($string, $index);\n    return $substr;\n}\n$str = '';\nunpack('N', string_shift($str, 4));\n```\nCurrently the branch only does SSH2.php. Pretty much every file would need to be modified as well.\n. I'll try to get https://github.com/terrafrost/phpseclib/commit/8458c94f50ed3a75a2154911a1bb1c47a6c61635 merged in this weekend. That said, I'd like to hold off on doing a release for a while to give people a chance to test this change.. I've created a new branch that should fix this: #1162. @mikebrandl - probably this evening. I need to merge that branch into 2.0 and master. I posted my comment at 12:31am, local time, and didn't want to stay up any later than I had already since I had to be up ~8h later to get to work on time.. #1162 has been merged.. How does https://github.com/terrafrost/phpseclib/tree/1.0-composer-fix look?\nIf it looks good LMK and I'll tag a 1.0.4a release.\nThanks!\n. I'll hold off until bantu has had a chance to chime in.\nDoing a 1.0.5 release does not have a lot of appeal to me. If there's a 1.0.5 tag but not a 1.0.5 downloadable zip file from phpseclib.sourceforge.net that's going to cause confusion. If there's a 1.0.5 downloadable zip version the version in phpseclib's PEAR channel needs to be 1.0.5 as well, etc. And for what? For no code changes at all? Just a composer.json change?\nI could do 1.0.4-1 too if that'd work better..\n. > For me this IS a change in codebase.\nFair enough, but composer.json doesn't even exist in the PEAR version or in the zip version you download from phpseclib.sourceforge.net. So, in so far as those install sources are concerned there are zero code changes. You do md5sum on v1.0.4's zip and you'll get the same hash as you would on v1.0.5.\n. I didn't mean to close this. I was trying to close my draft. I was going to say that the rpm releases (which I don't do) would take time for the maintainers of those but it looks like those are the 2.0 branch - not the 1.0 branch - so they'd be unaffected.\n. > Missing composer.lock changes as requested in the comments?\nDone.\n. I tried it out and it works as intended. The fact that you didn't say that touch() deleted a file suggests to me that the file you were \"touching\" didn't exist and modifying the mtime and atime of a non-existent file is quite impossible.\nQuoting the phpDoc comments,\nphp\n    /**\n     * Sets access and modification time of file.\n     *\n     * If the file does not exist, it will be created.\n     *\n     * @param string $filename\n     * @param int $time\n     * @param int $atime\n     * @throws \\UnexpectedValueException on receipt of unexpected packets\n     * @return bool\n     * @access public\n     */\nThis behavior is inspired by PHP's own touch function. Quoting http://php.net/manual/en/function.touch.php ,\n\nAttempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.\nIf the file does not exist, it will be created.\n. It's working fine for me:\n\n``` php\n$ssh->put('test.ext', 'test.ext', NET_SFTP_LOCAL_FILE);\n$sourceModifiedTime = filemtime('test.ext');\n$sourceAccessTime   = fileatime('test.ext');\necho 'modified time: ' . date('Y-m-d', $sourceModifiedTime) . \"\\n\";\necho 'access time:   ' . date('Y-m-d', $sourceAccessTime) . \"\\n\";\n$ssh->touch('test.ext',$sourceModifiedTime,$sourceAccessTime);\n```\nI then do stat test.ext on the server that I uploaded the file to and ghe access and modify dates are as expected..\nAs bantu's post points out it's not exactly clear what the problem you're having is but whatever it is the SFTP logs might provide insight.\n. Is https://github.com/mscdex/ssh2 what you're using as the server? Try doing these actions with some client other than phpseclib and see if the same thing doesn't happen.\n. So I installed https://github.com/mscdex/ssh2 locally and that does have the same identification string that you're reporting. But that library just stubs things out on the server side. It has a bunch of events that you can attach handlers too but it's up to you to actually write the handlers to interface with the operating system.\nis_dir would trigger the STAT event and touch would trigger the SETSTAT event. If the file didn't exist OPEN might be called instead.\nSo, basically, this is sounding like it's not a bug in mscdex/ssh2 but in the event handlers that I assume you wrote.\n. is_dir() is tested several times in the unit tests:\nhttps://github.com/phpseclib/phpseclib/blob/1.0/tests/Functional/Net/SFTPUserStoryTest.php\n...and the unit tests are passing for every version of phpseclib.\nI guess you could give me the SFTP logs and I could give you a more detailed explanation based on that. You can get the logs by doing define('NET_SFTP_LOGGING', 2) at the top and then echo $sftp->getSFTPLog() after the is_dir() call.\n. As is the case with https://github.com/phpseclib/phpseclib/issues/1052#issuecomment-257099131 I think this is an issue with your event handler. I don't know of other SFTP clients that have an is_dir method so idk that suggesting you test this in another client is gonna be that worthwhile but maybe post on stackoverflow or some such your event handler code. You could post a link to the SO post here, as well. I'm not a node.js expert but who knows maybe I might have some insight none-the-less.\n. You could do this?:\nphp\n$ciphertext = $rsa->encrypt('plaintext');\n$rsa2->encrypt($ciphertext);\nAltho if you're using padded RSA each successive key would need to be larger than the last since PKCS1 / OAEP modes add data to the plaintext prior to encryption.\n. The master branch should not be used. It's API is not set in stone and is not guaranteed to remain the same from commit to commit. CHANGELOG.md is only for tagged releases. Only the 1.0 and 2.0 branches have tagged releases. The current master branch will eventually become the 3.0 branch, at which point, we'll start seeing tagged releases, but until that time, changes to the master branch are not going to be notated in CHANGELOG.md. After the 3.0 branch is created then the API will be considered stable but only for the 3.0 branch. The master branch will still exist but the possibility for BC breaking changes will always exist in that branch.\nAnyway, #902 explains the change.\n. I cherry-picked this into the 2.0 branch and then merged that into master.\nThanks!\n. Looks like you're using the master branch, which is under active development and should not be used.\nAll 1.0.x should be BC with each other and all 2.0.x releases should be BC with one another. The master branch, otoh, has not yet had any releases and there should be no expectation of BC from commit to commit. In fact, I'd say quite the opposite - there have been and will continue to be a lot of commits that /do/ change \n. It should treat null like ''. So delete would first resolve the path. Assuming the directory hadn't been changed the path it'd resolve to would be /home/user. It'd try to delete that as a file, see that it failed, and then recursively. ie. all the files and all the subdirectories in that folder.\nI guess I could make it so that _realpath returns a false if the path passed to it wasn't a string. I guess the only potential problem with that would be people passing in objects with __toString defined..\n. That's a good catch about the documentation. I think recursive delete is the more intuitive behavior. You hit delete in any visual SFTP client and it doesn't pop up with a warning saying that you're attempting to delete a directory - it just deletes it and it's content.\nAnyway, I've updated the behavior of the delete method:\nhttps://github.com/phpseclib/phpseclib/commit/b70cb8764179060dff71969b1a41f7df76f0b3b6\nI'll update the documentation shortly.\n\nOther than that, I must say that I think this library is awesome. :)\n\nThanks :)\n. php\nif (is_bool($path) || trim((string) $path) === '') {\n    return false;    \n}\nI don't agree with the trim() since folders with spaces /can/ be created and since it might, in fact, be desirable to delete them and their contents.\nWhat about this:\nphp\nif (!is_string($path) || $path == '') {\n    return false;\n}\nThe issue is that null is converted to '' and so it's appending '' to the current directory. Appending any number of spaces to the current directory doesn't return the current directory - it returns a path in the current directory that has x spaces.\n\nThe combination of \"deleting recursively\" and accepting empty values such as null or '' is a rather bad one and should be addressed sooner rather than later. I do not think that using a second boolean parameter on delete() makes sense either. I much cleaner solution in my opinion would be having an extra method for deleting recursively.\n\nI don't agree. Quoting my rationale above:\n\nI think recursive delete is the more intuitive behavior. You hit delete in any visual SFTP client and it doesn't pop up with a warning saying that you're attempting to delete a directory - it just deletes it and it's content.\n\nSame thing in pretty much any GUI. You hit delete in Windows and the directory is deleted. You hit delete in X Windows and the directory is deleted.\n. php\nif (is_object($path)) {\n    // It's an object. Cast it as string before we check anything else. \n    $path = (string) $path;\n}\nThat'd only work if the object had a __toString magic method. What if we do this?:\nphp\nif (is_object($path) && method_exists($path, '__toString')) {\n    // It's an object. Cast it as string before we check anything else. \n    $path = (string) $path;\n}\n\nRegarding two different methods or not. I don't think it's really fair to compare this library to a GUI. I have never used a GUI that doesn't make me confirm deleting a file or a folder.\n\nWell in the case of 1.0 and 2.0 changing this behavior, now, would be a possible BC break for apps using phpseclib. For the master branch it's not an issue since the master branch isn't at all concerned with BC, but I'm not really focusing on SFTP / SSH2 changes in that branch atm (I'm more focusing on RSA / DSA / ECDSA / ASN1 stuff). When I do start work on the SSH2 / SFTP changes the BC breaking changes will be numerous.\n. > Don't think it's necessary to add the overhead of looking for the __toString()-method. Since PHP will throw a fatal error: \"Object of class foo could not be converted to string\" if it doesn't exist, it might actually help developers debugging their code, in those situations.\nThat's true. Altho at the same time it seems like if we're gonna go down that path we could also do user_error('The path that's been passed is not a valid string') when people pass in null's or int's or whatever. idk. I don't really have any personal preference either way lol.\n\nThe documentation should be updated, though, so it says that recursive deletes are the default behavior.\n\nYah - that's been done.\n. The proposed change has been implemented:\nhttps://github.com/phpseclib/phpseclib/commit/a2d9622bf9644f85644546bb75504a2992756bb6. Good catch. Should be fixed in the 1.0 branch now!:\nhttps://github.com/phpseclib/phpseclib/commit/99a21278564d7a842e4029732847869fe2b5c68a\n(it's a non-issue in the 2.0 and master branches)\n. > There's a high probability this will change with a later PR.\nhttps://github.com/terrafrost/phpseclib/tree/asn1-revamp-pt1\nhttps://github.com/terrafrost/phpseclib/commit/817c0a460a527566f02b41712f2f9ea149df824e\nThat stuff is in a different branch, tho, and will be submitted as a PR after this one is merged.\n. Well I'm not able to duplicate the problem.\nI did $sftp->size('filename.ext') and strlen($sftp->get('filename.ext')) and the numbers consistently match.\nYou say \"in this line\" but you link to a commit - not to an actual line. And the commit that likely would have caused the issue (that I cannot duplicate) is https://github.com/phpseclib/phpseclib/pull/945\nAnyway, calling _get_sftp_packet 50 times isn't a problem. See, for example, this log:\nhttp://pastebin.com/QUNqgmiv\nIt sends NET_SFTP_READ 50 times and then gets NET_SFTP_DATA or NET_SFTP_STATUS for each of those 50 requests.\nI guess what'd be really helpful is if you could sent me the phpseclib logs. You can get them by doing `define('NET_SFTP_LOGGING', SFTP::LOG_COMPLEX); at the top of the file and then by doing echo $sftp->getSFTPLog() at the end of the file. In testing it out there was apparently a bug in the 2.0 branch w.r.t. SFTP logging:\nhttps://github.com/phpseclib/phpseclib/commit/8b4208ee60407efe3d13753eb92d0a41dda613d5\nThis bug has been fixed. If the SFTP logs don't yield anything fruitful the full SSH logs might be useful. You can get those by doing define('NET_SSH2_LOGGING', SSH2::LOG_COMPLEX) at the top and echo $sftp->getLog() after your download attempt.\n. > and when i define NET_SFTP_QUEUE_SIZE to some value, the error gone, what I think is that my provider sftp server limit the number of connection, is this correct?\nInteresting. Yah - that's what it looks like. The first four bytes of the NET_SFTP_STATUS packets are for the error / status code. The status code in your responses (1) corresponds to SSH_FX_EOF. You're getting the same status in your \"read failed\" responses that I got in my \"End of file\" responses. That's about as useful as throwing just a generic \\Exception and expecting programs to parse the response to take the appropriate action.\nLike in theory it seems like what could be done is to dynamically set the NET_SFTP_QUEUE_SIZE. So if, after 25 reads you started to get a SSH_FX_FAILURE response instead of SSH_FX_OK or SSH_FX_EOF you set NET_SFTP_QUEUE_SIZE to 25 instead of 50. But nope - can't do that with your server ugh. And idk that I want to read the message itself.\nWhat are you using as your server? You can find out by doing $sftp->getServerIdentification();\n\nand when I try to print the log, I got some error :\n\nYah, I got that too, when I tried it last night. It's fixed in the 2.0 and master branches but not in any tagged version yet:\nhttps://github.com/phpseclib/phpseclib/commit/8b4208ee60407efe3d13753eb92d0a41dda613d5\n. It looks like PuTTY does 32 requests at a time with each request requested 32KB of data. 32 * 32KB = 1024KB. I guess it started doing this in 0.54: http://www.chiark.greenend.org.uk/~sgtatham/putty/faq.html#faq-psftp-slow / http://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html\nphpseclib does, by default, does 50 requests at a time, each 32KB long, which is 1.5625MB.\nDoes setting NET_SFTP_QUEUE_SIZE to 32 solve the problem for you? I'd be willing to change it from 50 to 32 in phpseclib.\n. I've gone ahead and changed the queue size to 32:\nhttps://github.com/phpseclib/phpseclib/commit/6fb34887c5bf06f5757f35d341bd0e79f5a017d7. Where can I download that?\nSince it's not OpenSSH what I can do is add a condition in the SFTP constructor that sets NET_SFTP_QUEUE_SIZE to, let's say, 10, or something.. I was able to connect via phpseclib via apache user on ubuntu just now without issue..\nOne possibility: you have selinux installed and httpd_can_network_connect is set to 0. If that's what's going on you can do this to fix it:\nsetsebool -P httpd_can_network_connect=1\nAlso, what version of phpseclib are you using? You're not using the latest 1.0 version or the latest 2.0 version I can tell:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SSH2.php#L1065\nhttps://github.com/phpseclib/phpseclib/blob/1.0.5/phpseclib/Net/SSH2.php#L1065\nhttps://github.com/phpseclib/phpseclib/blob/1.0.3/phpseclib/Net/SSH2.php#L1065\nhttps://github.com/phpseclib/phpseclib/blob/2.0.3/phpseclib/Net/SSH2.php#L1065\nThat said, the line number does tell me that the issue probably lives in the constructor none-the-less. So one thing that'd help is if you could remove the error suppression operator from fsockopen and stream_select.\nIn other words, replace @fsockopen with fsockopen and @stream_select with stream_select and tell me if you get any additional messages when running the code that'd be helpful.\nThanks!\n. I'd say increasing it is a good idea. If you're running into problems with it with PHP's socket_select you're liable to run into problems with it elsewhere (assuming you haven't already had mysterious problems). eg.\nhttp://serverfault.com/questions/300272/getting-error-too-many-open-files-in-system\nhttp://stackoverflow.com/questions/14748499/fatal-error-too-many-open-files\netc.. Ya'll should not be using the master branch. The API is unstable. It's changed quite a bit, already, from the 2.0 branch, and the change is only going to become that much more profound as further development continues.\nIf I created a tag for the master branch then - and correct me if I'm wrong - but wouldn't composer install that when you do composer require phpseclib/phpseclib? Like right now it picks up the latest tagged release, which is 2.0.4. But it seems like that would change if I tagged a release for the master branch? Keep in mind I'm not a composer expert - my understanding is, I'd say, fairly basic.\nAnyway, that said, my latest PR does lower the version requirements back down to 5.6:\nhttps://github.com/phpseclib/phpseclib/pull/1065\nI'll probably let it sit for a week or two to let people opine in but if I don't get any feedback in that time I'll just merge it (as I did with the PR that increased the version req - #1061). > Will future releases continue to be PHP 5.6 compliant?\nI believe so. Nothing PHP7 offers is exciting enough to break PHP5.6 compatibility imho. I mean, PHP7 introduces, for example, deflate_init, which is a function I think I might make SSH2.php use, but I can do function_exists to make it work on PHP5.6. Right now in master what doesn't work with PHP5.6 are arrays being used in define() statements. In my PR I switched to using arrays with class constants, which facilitates auto-loading and re-use of these ASN.1 \"maps\". The ability to re-use these \"maps\" is enough to justify upping the version reqs to PHP5.6.\nAt the time I did the PR request that was merged last night that upped the reqs to PHP7...  in my early testing it seemed like the + operator worked with define() but not with const. I was wrong, however. I'm not sure what led me to that wrong conclusion but I eventually realized that I was wrong. But at the time...  I still wanted the ASN1 \"maps\" to live independently of classes that required initialization. This requirement can be achieved with class constants much more elegantly but at the time I didn't realize that.\nAnd for define() / class constants...  setting those to arrays in older PHP versions will result in a parse error on the PHP file, before function_exists (or similar functions) have had a chance to fun. I guess I could do a custom auto-loader that loads from a different directory depending on the version of PHP installed or something but I think that'd be overkill lol.\n\nAlso, I checked out the PR, I don't see a composer.json change, am I just being blind?\n\nYa know...  that's a good point lol. I updated .travis.yml but not composer.json. It looks like composer.json still says it works on >= 5.3.3.. Duplicate of #1028. See, also, #1040.. No worries! I'd rather have a dupe report than no report at all lol. I plan on redoing large swaths of SSH2 / SFTP at some point. Right now I'm chiefly focused on ASN.1 / DSA / ECDSA support. I'll then refactor (in a BC breaking way) lots of X509.php and after that I'll work on SFTP / SSH2 stuff.. No. I am still working on ECDSA support. I posted a status update recently here:\nhttps://github.com/phpseclib/phpseclib/issues/1082#issuecomment-396122366\nUnfortunately, I have not made a lot of progress in the past two weeks because I was on vacation in Alaska.\nI am willing to adjust my priorities but to do so but I will need financial compensation to the tune of several thousand dollars.. The fact that file_exists is unit tested (and passing) not withstanding, I am unable to duplicate the issue on either the 1.0.5 or 2.0.4 versions. I tried it with a file that exists and one that doesn't on both versions. All four times I got the expected results.\nI looked at several different versions of phpseclib to see what was on line 2258.\nIn 2.0.4 it's $i++ in the _delete_recursive method:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L2258\nIn 2.0.3 it's `/**':\nhttps://github.com/phpseclib/phpseclib/blob/2.0.3/phpseclib/Net/SFTP.php#L2258\nIn 2.0.2 it's an empty line:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.2/phpseclib/Net/SFTP.php#L2258\nWhat version of phpseclib are you using? Maybe post your line 2258 and surrounding lines as well.. What version of 1.0? 1.0 is a branch - the tagged versions are 1.0.0 - 1.0.5.. The latest version of the 1.0 series is 1.0.5. But that said, I tried to reproduce your problem on 1.0.0. No luck.\n402 gave a similar error but that was fixed years ago, before 1.0.0 was released.\nI'd just recommend you upgrade to the latest 1.0 version. If you're still having the issue after you upgrade lmk.. If you're doing $ssh->read() to get the response how are you issuing the command?\nIf you're using $ssh->write() to issue the command you need to do \"\\n\" at the end of the string. It's like...  when you type in a command into the prompt you don't just type the command and expect Linux to know that you're done typing the command - you have to to hit the Enter button. Same thing with phpseclib.. I tried this:\nphp\n$ssh->write(\"java -version 2>&1 | head -n 1 | awk -F '\\\"' '{print \\$2}'\\n\");\necho $ssh->read();\nThat got me this back after the default 10s delay::\nLast login: Thu Dec  8 18:58:46 2016 from [redacted]\njava -version 2>&1 | head -n 1 | awk -F '\"' '{print $2}'\nprompt:~$ java -version 2>&1 | head -n 1 | awk -F '\"' '{print $2}'\n1.6.0_20\nprompt:~$. That's gonna be tricky with the way PHP works. Like with PuTTY one thread can listen on a socket for incoming data and another can, every minute or so, send a keep-alive packet. But PHP can't do that as easily.\nI guess the closest thing would be to use stream_select. phpseclib uses stream_select right now but it doesn't use the write buffer - just the read buffer. So in this case I'd use the write buffer as well.\nThere'd also be two separate timeouts. One that's passed to stream_select that has it send the keep-alive's and one that's serves the same purpose as $ssh->setTimeout() currently does.\nThat said, this is a big enough change such that I think this is gonna be best implemented in the master branch. Right now my focus in that branch is not SSH2 but it's on my roadmap.\nFor the time being I think your \"last alternative\" approach is probably the best.. Here's one approach that might help:\n```php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('www.website.com');\n$ssh->login('username', 'password');\n$ssh->write(\"ping 127.0.0.1\\n\");\necho $ssh->exec('sleep 15s');\necho $ssh->exec('ls -latr');\n```\nI tried that with ClientAliveInterval 3 and ClientAliveCountMax 2 in my /etc/ssh/sshd_config file and was able to run the above code just fine with the $ssh->write().. > +1\n\nBeing able to do a keep-alive within phpseclib would be nice, something like ServerAliveInterval\n\nGiven that PHP isn't multi threaded I'm not sure what the best way to achieve this would be. It's not like we can do setInterval like you can with Javascript... I'm somewhat ashamed to admit that I've never worked with Promises :( I mean, I've heard about them, but I've never used them.\nAnyway, I read up on them a little but and I think a promise style interface would look like this?:\nphp\n$ssh->exec('a command that takes 10 minutes')->then(function($output) { echo $output; });\necho 'hello, world!';\nSo in an ideal world this would execute \"hello, world!\" instantly and the output would be output 10 minutes later?\nConceptually that sounds great but I'm not sure how you'd actually implement that in PHP.\nSuperficially, it kinda sounds like calling exec with a call back. eg.\nphp\n$ssh->exec('a command that takes 10 minutes', function($output) { echo $output; });\necho 'hello, world!';\nBut that wouldn't output \"hello, world!\" instantly. That'd output \"hello, world!\" after ten minutes. The only difference is that any output would be streamed out, real time, instead of dumped out all at once.. That said, I actually do have an idea as to how phpseclib could be made to send keep-alive's. So there's the timeout that can be set via setTimeout. A secondary one would be implemented that would be set by doing setKeepAliveInterval(). This would set a $keepaliveTimeout variable or some such and call stream_select and when stream_select timed out phpseclib would send a keep-alive packet and then resume waiting until the task at hand had been completed.. I guess one thing that could be done to make phpseclib do async stuff...\nHave exec optionally return an object that'll return successive bits of output when a particular function is called. eg.\n$ssh->exec() could return an object with a __getString magic method that blocks if you do echo $ssh->exec();. This object, however, would have extra methods as well, like getBufferedOutput($timeout) and getReturnCode(). You could use those method thusly:\nphp\n$output = $ssh->exec('ping 127.0.0.1');\nwhile ($output->getReturnCode() == -1) {\n    echo $output->getBufferedOutput(10);\n}\nSuperficially, it seems like a generator could be used but it looks like that only works with for loops.\nActually, I think that's a really cool idea, but that's a BC breaking change that's not going to happen in the 1.0 or 2.0 branches... The master branch shouldn't be used. It is under active development and it's API may change significantly from commit to commit.. Does https://github.com/phpseclib/phpseclib/pull/1076 fix the issue for you?\nAlso, could you post a cert that has that extension? Reading the RFC can sometimes be a poor substitute for being able to actually look at a real world example.. The certificate you linked to decoded just fine for me. The 1.3.6.1.4.1.11129.2.4.2 extension didn't decode but the cert itself did. The 1.3.6.1.4.1.11129.2.4.2 extension...  is complicated. Quoting RFC6962\n```\n   At least one SCT MUST be included.  Server operators MAY include more\n   than one SCT.\nSimilarly, a certificate authority MAY submit a Precertificate to\n   more than one log, and all obtained SCTs can be directly embedded in\n   the final certificate, by encoding the SignedCertificateTimestampList\n   structure as an ASN.1 OCTET STRING and inserting the resulting data\n   in the TBSCertificate as an X.509v3 certificate extension (OID\n   1.3.6.1.4.1.11129.2.4.2).  Upon receiving the certificate, clients\n   can reconstruct the original TBSCertificate to verify the SCT\n   signature.\nThe contents of the ASN.1 OCTET STRING embedded in an OCSP extension\n   or X509v3 certificate extension are as follows:\n    opaque SerializedSCT<1..2^16-1>;\n\n    struct {\n        SerializedSCT sct_list <1..2^16-1>;\n    } SignedCertificateTimestampList;\n\nHere, \"SerializedSCT\" is an opaque byte string that contains the\n   serialized TLS structure.  This encoding ensures that TLS clients can\n   decode each SCT individually (i.e., if there is a version upgrade,\n   out-of-date clients can still parse old SCTs while skipping over new\n   SCTs whose versions they don't understand).\n```\nAt the top of that RFC it says this:\nData structures are defined according to the conventions laid out in\n   Section 4 of [RFC5246].\nRFC5246 defines TLS v1.2.\nBasically, I think fully supporting that extension is gonna be complicated. For the time being I think I'll let the current behavior of decoding the cert - but not the extension - stand.. I merged your two commits into one and then cherry-picked that commit into the 1.0 branch and merged up:\nhttps://github.com/phpseclib/phpseclib/commit/d80794b1d9d152b8840ab425ccfe8ccea9b6418e. I have no idea what that video is showing. It looks like, in the video, that you have 10+ connections to some server with phpseclib? Well they're not all with the same instance of phpseclib, I can tell you that much, because phpseclib only supports five channels max. Quoting SSH2.php (2.0 branch):\nphp\n    const CHANNEL_EXEC          = 0; // PuTTy uses 0x100\n    const CHANNEL_SHELL         = 1;\n    const CHANNEL_SUBSYSTEM     = 2;\n    const CHANNEL_AGENT_FORWARD = 3;\nSFTP.php adds support for one more channel:\nphp\n    const CHANNEL = 0x100;\nThis is something I plan on changing, in due time, in the master branch, but I'm working on other changes in the master branch currently.\nWhat'd be much more helpful than a video are the SSH logs and some sample code that reproduces the problem. SSH logs can be obtained by doing define('NET_SSH2_LOGGING', 2) at the top and then $ssh->getLog(); later on in the script.\nThat said, your post does make me realize that there's not a unit test for this change so I added one:\nhttps://github.com/phpseclib/phpseclib/commit/9bccc01b973c91ec8c1f2b88aa9df13f0b7001d7. It looks good! It's been merged - thanks!. What are the commands you're trying to run? Some commands just take a long time to run. Example:\nphp\n$ssh->write(\"sleep 5\\n\");\n(idk if you're using the interactive methods or exec())\nI suppose you could enable logging and post the log and more info could be provided. You can do that by doing define('NET_SSH2_LOGGING', 2); at the top of the file and then echo $ssh->getLog(); after it's done everything it needs to do.\nThat said, here's another possibility (in lieu of knowing anything about what you're trying to do): the SSH channels are just super noisy. Example:\n```php\n$ssh->write(\"cat /dev/urandom\\n\");\n$ssh->setTimeout(10);\n$start = microtime(true);\necho $ssh->exec('ping google.com');\n$elapsed = microtime(true) - $start;\necho \"took $elapsed seconds\\n\";\n```\nThat takes 20s despite the timeout because it's spending a lot of time decoding the junk it's getting on another channel.. It's still hard to say for sure without seeing your code.\nIf you're doing $ssh->read(), without actually passing any parameters to read() then yah - it'll only return when it times out.\nThe thing is...  phpseclib doesn't know if what it's opening is a shell or not. It doesn't know what the prompt looks like if even there is one. All phpseclib knows is that data is coming at it and could come at it at any time.\nHere are a few scenarios that better illustrate this.\n\n\nYou've SSH'd into a box and your console is just sitting on the prompt. You're not doing anything. Then someone shuts the system down. At that point everyone will get a message, regardless of whether or not they're actually doing something at that moment in time, that the system is shutting down. ie. the server can send data even if the client doesn't ask for it. And phpseclib doesn't have any way of knowing that you /don't/ want to wait 10s for (for example) shutdown broadcast messages.\n\n\nLet's say your .bashrc has vim in it and that's it. Then when you SSH into a machine and then do $ssh->write('...') it's not bash that's interpreting the commands - it's vim. And similarly, there isn't really a prompt, per say. phpseclib doesn't know if, when you SSH in, if you're in a real shell or if you're in a some sort of app like vim. phpseclib doesn't know what type of response the various bytes of data you send over should do.\n\n\nSo, long story short, if you're doing $ssh->read(), without parameters, try $ssh->read('ubuntu@1~$'); or whatever it is that your prompt is, instead.. You're not using 1.0.5. From your phpseclib logs:\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:32:20:28:6d:63:72:79:70:74:2c:20:67  b_0.2 (mcrypt, g\n00000020  6d:70:29:0d:0a                                   mp)..\nNote the 0.2 bit. phpseclib 1.0.5 identifies itself as 1.0 per this:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.5/phpseclib/Net/SSH2.php#L1151\nphpseclib 1.0.0 identified itself as 0.3 per this:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.0/phpseclib/Net/SSH2.php#L1137\nphpseclib 0.3.0 identified itself as 0.3 as well per this:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.0/phpseclib/Net/SSH2.php#L201\nIn fact the last version of phpseclib to identify itself as 0.2 was 0.2.2:\nhttps://github.com/phpseclib/phpseclib/blob/0.2.2/phpseclib/Net/SSH2.php#L177\n0.2.2 is almost six years old. And, in-so-far as I know, you could also be running 0.2.1, which is almost seven years old. 0.2.0 identified itself as phpseclib_0.1 - not 0.2 - so it's unlikely you're using that version.\nMore evidence that you're not running an ancient version of phpseclib can be found in the outgoing NET_SSH2_MSG_KEXINIT packet. 0.3.5 added support for blowfish and yet the outgoing NET_SSH2_MSG_KEXINIT packet doesn't mention blowfish. 1.0.0 added support for diffie-hellman-group-exchange-sha{1,256} and yet that's not in the outgoing packet either.\nSo the first thing I'd try: upgrading your version of phpseclib.. Do you know how Ed25519 compares to ECDSA? The curves are different - ECDSA uses NIST curves whereas Ed25519 isn't a NIST curve. But beyond that idk.\nI have an implementation of DSA with support for a wide array of key formats (PKCS1, PKCS8, PuTTY, raw, etc) in my clone of phpseclib - I plan on doing ECDSA next (whilst modernizing phpseclib dev-master / 3.0) and had been thinking about doing Ed25519 after that. One question that I do not currently know the answer to is how much common code there'd be between ECDSA / Ed25519.. Well I still want to do ECDSA lol. Like for algorithm negotiation for SSH2. ECDSA may be supported whereas Ed25519 isn't.\nAlso, some of the end goal is to have something like this:\nPublicKey::load('...');\nYou don't have to know the format of the public key - it'd auto-detect that and return an RSA / DSA / ECDSA / EdDSA instance as appropriate. SSH2 (and X509 / CMS / etc) would then do a switch statement or something and do whatever needs to be done based on the object type that was passed to it.\nBut, anyway, I'll look into this EdDSA as time permits - thanks!. You can see what I've done for DSA here:\nhttps://github.com/terrafrost/phpseclib/blob/dsa-test-1/phpseclib/Crypt/DSA.php\n(RFC 6979 applies to DSA as well)\nThe signing method is here:\nhttps://github.com/terrafrost/phpseclib/blob/dsa-test-1/phpseclib/Crypt/DSA.php#L386\nMy current thoughts on that are...  if the CSPRNG is good then using RFC 6979 is unnecessary. Quoting the author of that RFC in post on crypto.stackexchange.com:\n\nIt so happens that having a good random generator is a tough requirement; some systems (especially embedded) do not have such a generator; it can also be quite inconvenient to make an external PRNG available to the signing engine (it's an extra parameter to pass through several API layers).\n\nsource: http://crypto.stackexchange.com/a/42551/\nphpseclib (dev-master) uses your random_compat implementation and has it's own implementation as a fall back. Your random_compat implementation looks at /dev/random, openssl_pseudo_random_bytes (when appropriate), etc. If those aren't secure phpseclib is gonna be adversely impacted in more ways than just (EC|Ed)DSA signing (key generation would be affected, diffie-hellman key exchange, etc).\nNow, I think the pure-PHP fallback could be improved upon. Right now it's a mix of a stream cipher with ANSI X9.31. But I think making that do HMAC_DRBG instead would prob be better (HMAC_DRBG is the basis of RFC 6979).\nBut that said, DSA is still under development! I don't have too much left to do on it. An RFC 6979 implementation of signing exists but is commented out. All the underlying methods (computek, bits2int, etc) are implemented already.\n(also, if I'm gonna do the random approach, it'd probably be a good idea to include a unit test that attempts to sign twice and makes sure that the result is different for each one; with RFC 6979 it would be but if k is random it shouldn't be).. > Might be better to just let the Exception bring down the script (fail closed).\nYah - that's not a bad idea. I figure I'll revisit that at some point lol. Lots of things I want to do in the mean time lol. dev-master isn't gonna be production ready any time soon lol.\nI appreciate the feedback!. Thanks for the update and congrats on the release!\nRight now and for the past few months I've been working on a total refactor of BigInteger.php. The Pure-PHP implementation is showing some pretty impressive speedup's for modular exponentiation. But more than that it's a lot more modularized. RunKit is also no longer needed to test the various modes. This is all part of an effort to make phpseclib 3.0 implement more modern coding practices.\nI'm getting pretty close to being done with this. Maybe a few weeks out? idk. But once I'm done with that (and maybe a few small updates, like variadic functions, etc) I'm gonna move onto ECDSA and EdDSA (eg. Ed25519). Not only do I want phpseclib 3.0 to implement more modern coding practices but also more modern crypto algorithms.\nAnyway, I appreciate the work that you do and thank you!. I was looking at the format for ECDSA private keys and it seems like that can support custom curves?\nQuoting RFC5480,\n\nspecifiedCurve, which is of type SpecifiedECDomain type (defined in [X9.62]), allows all of the elliptic curve domain parameters to be explicitly specified.\u00a0 This choice MUST NOT be used.\u00a0 See Section 5, \"ASN.1 Considerations\".\n[X9.62] defines additional options for ECParameters and ECDSA-Sig-Value [PKI-ALG].\u00a0 If an implementation needs to use these options, then use the [X9.62] ASN.1 module.\u00a0 This RFC contains a conformant subset of the ASN.1 module defined in [X9.62].\n\nIn spite of what the RFC says, however, OpenSSL supports the parameter:\nhttps://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations\nScroll down to the bottom and you'll see this:\n\nParameters and key files can be generated to include the full explicit parameters instead of just the name of the curve if desired. This might be important if, for example, not all the target systems know the details of the named curve. In OpenSSL version 1.0.2 new named curves have been added such as brainpool512t1. Attempting to use a parameters file or key file in versions of OpenSSL less than 1.0.2 with this curve will result in an error\nThis problem can be avoided if explicit parameters are used instead. So under OpenSSL 1.0.2 you could create a parameters file like this\n\n(the text continues)\nOpenSSL recently implemented EdDSA per https://github.com/openssl/openssl/issues/487 - it'll be interesting to see how they do the private keys for EdDSA as time permits.\nssh-keygen -t ed25519 does it's own format ( https://pastebin.com/kL8ftXuP ) but I'm pretty sure OpenSSL won't be using that format lol.. I'm also gonna play around with your shim as time permits. It looks like PHP 7.2.0alpha1 doesn't have libsodium support yet: https://bugs.php.net/74826. In my latest ECDSA stuff sodium_compat is being used. It doesn't look like libsodium / sodium_compat supports Ed25519 with contexts as discussed in RFC8032 so I do have my own Ed25519 implementation as well. I also plan on implementing Ed448 but that'll require a pure-PHP SHA-3 implementation so that'll take more time.\nsodium_compat is about twice as fast as my own implementation in PHP64 mode. My implementation (in PHP64 mode) can create and verify a signature in 0.47s on my local machine whereas sodium_compat does it in 0.22s. In GMP mode my implementation can create / verify a signature in 0.07s (sodium_compat does not appear to use gmp).\nMy library supports EdDSA keys in the OpenSSH format (ie. the kind that ssh-keygen would generate), the PuTTY format (ie. the kind puttygen would generate), in libsodium format and in the format specified in this IETF Draft:\nhttps://tools.ietf.org/html/draft-ietf-curdle-pkix-07\nIf libsodium / sodium_compat are being used the keys are converted from whatever format they were in to the libsodium format to facilitate libsodium's use.\nEncrypted OpenSSH private keys are not supported for the same reason sodium_compat does not support Argon2i - it's too slow. OpenSSH uses a custom form of bcrypt that does bcrypt 128 times as I recall and encrypts a different string etc so PHP's bcrypt implementation cannot be used and since bcrypt uses a custom key expansion OpenSSL's implementation of Blowfish can't be used either.\nOne thing I do like about EdDSA vs ECDSA is that the specs discussing EdDSA actually discuss more optimal coordinate systems. Most discussions of ECDSA discuss how to do point addition and doubling using affine coordinates but it turns out that it's much faster to do ECDSA using jacobian coordinates. The EdDSA specs don't even bother discussing how to do stuff in affine coordinates. Their only discussion of point addition / doubling is in the context of the more optimal coordinate system.\nI use the montgomery ladder for point multiplication and my API basically treats EdDSA and the SEC curves the same. eg. you do this:\n```php\n//$ec = new ECDSA('secp256k1');\n$ec = new ECDSA('Ed25519');\n$message = 'zzz';\n$signature = $ec->sign($message);\necho $ec->verify($signature, $message) ? 'good' : 'bad';\n```\nI also want to support curves the SEC curves over binary finite fields. I've designed the API in such a way that I believe it should be extensible enough to support this but idk for sure. I suppose one could debate the need for such an implementation given that curves over binary finite fields are pretty much utilized nowhere but idk it's still an intellectual curiosity lol.. Also, I'm not ready to make my code public yet. I just thought I'd post a progress report for anyone interested.. From that link:\n\nSodium_Compat support for BCMath\n\nYou're liable to be disappointed with BCMath's speed. I'm not able to do benchmarks right now (I'm not at home lol) but if memory serves BCMath took 2-3x as long as PHP64. idk how it compares to PHP32 but I wouldn't be surprised if it was slower than PHP32 as well for elliptic curve stuff.\nOverall, PHP's BCMath implementation is one of the worst bigint implementations I've ever seen. Like phpseclib's PHP64 / PHP32 implementations use base 2*31 / 2*26. GMP has limbs that probably do something similar but idk the GMP internals. BCMath otoh...  last time I looked at it it looked like it was using Base-10. Which is just super inefficient. . You can only send stuff once a command has been initiated if you have a PTY. $ssh->read() / $ssh->write() use PTY's implicitly. $ssh->exec() only uses a PTY if you did $ssh->enablePTY() first.\nAnyway, with a PTY what you can do is something like this:\nphp\nwhile ($output = $ssh->read('#--More--|\\[prompt\\]#', NET_SSH2_READ_REGEX)) {\n    if (!preg_match('#--More--$#', $output)) {\n        break;\n    }\n    $ssh->write(' ');\n}\n(the regular expressions may need to be tweaked). From the code snippet you posted:\nwhile ($output = $ssh->read('#--More--|\\[>\\]', NET_SSH2_READ_REGEX)) {\nYou should be doing '#--More--|\\[>\\]'#. The first parameter of the read() call is, internally, passed to preg_match as the first parameter and preg_match needs to have the same delimiter at the start and end (unless you're using pattern modifiers (eg. #...#s is valid). > @access is doc block is not required by API generator. I think in conclusion this means that we should not have any of them for 3.0.\nSounds good! I'll do another PR to remove it at some later date. Don't want to do it as a commit to this PR because this PR does enough stuff as is and I want to get onto more exciting dev things lol.. That's weird. Quoting https://wiki.openssl.org/index.php/Manual:Enc(1), \"Blowfish and RC5 algorithms use a 128 bit key.\" But my own testing confirms your results.\nI'll investigate further.\nThanks for the heads up!. Sorry for the delay - been pretty busy at work.\nAnyway, Blowfish and RC4 should now use OpenSSL for a wider set of key sizes as of https://github.com/phpseclib/phpseclib/commit/1bde98fc422e7d7803500947e74eaa86783ea82e\nThe choice of rc4-40 might appear suspicious but the way PHP's bindings to OpenSSL work is that they get the default key size, pad the key you passed to it with null bytes to make it that length and then it passes that potentially null padded key to OpenSSL. rc4 has a default key size of 128 bits whereas rc4-40 has a default key size of 40 bits. They're both, however, still rc4 so the only thing phpseclib's use of rc4-40 does is that it makes phpseclib able to support the full gamut of key sizes that RC4 actually supports.\nIn theory RC2 might be able to benefit as well but RC2 isn't very widely used and RC2 is a bit weird, anyway, because with RC2 you have the effective key size and the actual key size and they're two distinct things and it's annoying. It works as is. If someone wants to make it work better they're free to do so!. > I'd like to check if the connection succeeded before actually trying to log in, or execute any other command.\nSounds like isConnected() should do what you want?. > It will return false before login(), of course.\nisAuthenticated() will return false before login() but I don't believe isConnected() will.. Good point.\n@Jelle-S - phpseclib doesn't actually attempt to connect when you call the constructor. It connects when you do commands like login() or getServerIdentification() or getKexAlgorithms() or getServerPublicHostKey(), etc.\nWhereas isAuthenticated() will return true only after a successful login isConnected() will return true after even a bad login (or a call to some get... method).\nThe reason for this change is described in https://github.com/phpseclib/phpseclib/commit/a14e71f38b441829c1ad945b9094e27a943f5a11 . Quoting that commit,\n\nthis change will make it so some parameters can be set after the\nNet_SSH2 object has been created. eg. instead of doing\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX) one can now do\n$ssh->setLogging(...) or something.\n\nSo if you want to see if you're connected before you actually login...  I'd suggest doing getServerPublicHostKey() or some such. Keep in mind that doing that is best practice, anyway. The phpseclib docs omit that step for brevity but you're sacrificing security if you don't do it. The host key should be saved somewhere and re-checked every time you connect to the server. Also, how best to save it depends on how phpseclib is running. If you have access to a MySQL DB you could store it there. Or maybe on the local filesystem if you can write to that.. Well I'm not able to reproduce the error. https://3v4l.org/EIPDp gives no error on PHP 5.4.15 - 7.1.1.\nWhat algorithm are you using? Can you post some sample code that demonstrates the issue? The phpinfo() might help as well.\nIn lieu of that here are a few things to keep in mind:\n\nECB does /not/ use an IV. ECB mode is used to emulate CTR mode when OpenSSL doesn't provide it (and I'm guessing that's the mode you're actually using).\nsufficiently old versions of PHP are a bit trigger happy in their issuance of errors where the IV is concerned. https://github.com/phpseclib/phpseclib/issues/938#issuecomment-186413427 elaborates.. Try posting the SSH2 logs. You can get them by doing define('NET_SSH2_LOGGING' and then doing echo $ssh->getLog(). Among other questions this should answer...  what algorithm you're using (AES, TripleDES, etc) and what mode you're using (CBC, ECB, etc).. @ivpfals :\n\n\nIf required I can provide SSH logs.\n\nThat'd be helpful.. > in php7.2\nI'm unable to reproduce this. I tried it on PHP 7.2.8.\nIn the log file that ivpfals provided he's running aes128-ctr and I was unable to reproduce this issue with that algorithm. Maybe he's not running the same version of PHP as you idk but, either way, I'm going to need something more than just the version number of PHP that you're running.\nMaybe your phpinfo(). If you're getting this error whilst attempting to run SSH then the SSH logs would be good to have. If you're getting this error doing something else than a copy of the script that you're doing would be helpful.. > this surely happens in Crypt/Base.php on lines 755, 757, 1062, 1069, 1352, 1363 and 1407 where the IV argument is not passed at all\nLet's look at those lines.\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L755\nThat line is for stream cipher. phpseclib 1.0/2.0 only support one stream cipher - RC4 - and RC4 does not use an IV.\nSample code:\n```php\n<?php\n$plaintext = 'zzzz';\n$key = 'zzz';\n$iv = 'ddd';\nopenssl_encrypt($plaintext, 'rc4', $key, OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING, $iv);\n```\nThat gives the following error:\n\nWarning: openssl_encrypt(): IV passed is 3 bytes long which is longer than the 0 expected by selected cipher, truncating\n\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L757\nThat line is for ECB mode. ECB mode is the only mode that doesn't use an IV:\nhttps://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_(ECB)\nBut let's try it anyway:\n```php\n<?php\n$plaintext = 'zzzz';\n$key = str_repeat('z', 16);\n$iv = str_repeat('z', 16);\nopenssl_encrypt($plaintext, 'aes-128-ecb', $key, OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING, $iv);\n```\nThat yields pretty much the exact same error as above.\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L1062\nECB mode again.\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L1069\nECB mode again. Here, ECB mode is being used to pad the ciphertext so that it can ultimately be decrypted on PHP versions that do not support OpenSSL being used with unpadded data.\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L1352\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L1363\nhttps://github.com/phpseclib/phpseclib/blob/1.0.14/phpseclib/Crypt/Base.php#L1407\nECB mode again. Here, ECB mode is being utilized to emulate CTR mode when OpenSSL does not provide support for it.\nSo none of these openssl_encrypt calls should have an IV passed to them and indeed, any attempt to do so will result in an error (as two sample code snippets I provided demonstrate).\nSufficiently old PHP versions complain no matter what as documented at https://github.com/phpseclib/phpseclib/issues/938#issuecomment-186413427. They complain if you do provide an IV and they complain if you don't provide an IV.\nIt's annoying but, short of error suppression, there's not much I can do about it.\nThis is also an error I've never been able to reproduce. Maybe if you want to provide me with the code that reproduces the error --and-- SSH access to the server that reproduces this problem - I'd be more willing to see what I can do but, as is, I'm not going to lose any sleep over this.\n. I apologize if I sound a bit harsh. I'd prefer it if people didn't have this issue but, my inability to reproduce the issue not withstanding, I just don't see what I can really do about it (short of error suppression).... > IMO it has a very minor performance impact, something I personally wouldn't sweat about.\nI think you're right. I guess I'll do it this weekend!\nIn the mean time, could you post your phpinfo()? If bantu is right about the OpenSSL version maybe knowing which version you're using could enable me to reproduce the issue and then do the version checks. At that point that could kinda clue in me into what to look for in the OpenSSL sources as well maybe idk lol.\nI think the \"if\" approach would be the optimal one but for that to work the right condition has to be found.\nThanks!. This is now live. See https://github.com/phpseclib/phpseclib/commit/fcfba38fc7edf5322a44d934f81dac84f4c256c2\nThinking about it, my hesitation to do error suppression for OpenSSL seems maybe a little hypocritical since I already for it for mcrypt to avoid the deprecation errors. idk lol. It'd help if you posted some sample text that demonstrated the problem but in lieu of that...\nShort Answer\nTry $crypt->disablePadding().\nLong Answer\nphpseclib, by default, uses PKCS1 padding. Blowfish has a block size of 64 bits or 8 bytes. So let's say your plaintext was 15 bytes. That's not a multiple of the block size so phpseclib will add chr(1) to the end of the plaintext to pad it to 16 bytes. If you're short by two bytes it'll null pad chr(2) twice, etc.\nIf the ciphertext /is/ a multiple of the blocksize chr(8) will be added eight times.\nSo what happens if, after you've decrypted the ciphertext, the last byte is, say, chr(99)? At that point it's obvious that PKCS1 padding isn't being used so phpseclib returns false.\nmcrypt does not do PKCS1 padding / unpadding. It pads by adding null bytes and then removing trailing null bytes.. Try the latest git version. phpseclib should suppress these kinds of errors as of #1064. Post the log files. phpseclib limits them, by default, to 1mb. You can get them by doing define('NET_SSH2_LOGGING', 2) at the top and then $ssh->getLog() when you get that error. Maybe what you could do is write an error handler that, whenever that kind of error is \"caught\", the log file is generated. Then, once you have the log file, post it on pastebin.org.. I'll take a look as time permits! I'm in Florida for the next two weeks. Conference this week, Disneyworld next week :). I just did a PR for DSA (#1090). ECDSA is next.. Also, keep in mind that ECDSA (and DSA) are master branch only. And even for DSA I've just implemented support for the algorithm itself - I haven't yet integrated it into SSH2 or X509 (both of which are, themselves, due for major rewrites).. ```\n$x509 = new X509();\n$asn1 = new ASN1();\n$r = $x509->loadX509('-----BEGIN CERTIFICATE-----\nMIIDITCCAoqgAwIBAgIQT52W2WawmStUwpV8tBV9TTANBgkqhkiG9w0BAQUFADBM\nMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg\nTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0xMTEwMjYwMDAwMDBaFw0x\nMzA5MzAyMzU5NTlaMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\nMRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRcw\nFQYDVQQDFA53d3cuZ29vZ2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC\ngYEA3rcmQ6aZhc04pxUJuc8PycNVjIjujI0oJyRLKl6g2Bb6YRhLz21ggNM1QDJy\nwI8S2OVOj7my9tkVXlqGMaO6hqpryNlxjMzNJxMenUJdOPanrO/6YvMYgdQkRn8B\nd3zGKokUmbuYOR2oGfs5AER9G5RqeC1prcB6LPrQ2iASmNMCAwEAAaOB5zCB5DAM\nBgNVHRMBAf8EAjAAMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwudGhhd3Rl\nLmNvbS9UaGF3dGVTR0NDQS5jcmwwKAYDVR0lBCEwHwYIKwYBBQUHAwEGCCsGAQUF\nBwMCBglghkgBhvhCBAEwcgYIKwYBBQUHAQEEZjBkMCIGCCsGAQUFBzABhhZodHRw\nOi8vb2NzcC50aGF3dGUuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vd3d3LnRoYXd0\nZS5jb20vcmVwb3NpdG9yeS9UaGF3dGVfU0dDX0NBLmNydDANBgkqhkiG9w0BAQUF\nAAOBgQAhrNWuyjSJWsKrUtKyNGadeqvu5nzVfsJcKLt0AMkQH0IT/GmKHiSgAgDp\nulvKGQSy068Bsn5fFNum21K5mvMSf3yinDtvmX3qUA12IxL/92ZzKbeVCq3Yi7Le\nIOkKcGQRCMha8X2e7GmlpdWC1ycenlbN0nbVeSv3JUMcafC4+Q==\n-----END CERTIFICATE-----');\nunset($r['tbsCertificate']['extensions']);\n$asn1 = new File_ASN1();\n$asn1->loadOIDs($x509->oids);\necho $asn1->encodeDER($r, $x509->Certificate);\n```\nThat'll output a DER - not a base64-encoded PEM. If you want that you'll need to base64 encode it. Also, I'm unsetting extensions because, technically, those are submapped. ie. encodeDER is called on each extValue for each extension.\nAlso, technically, the X509 cert outputted by this example isn't a good one. It'll have a bad signature. This is because it's modifying the contents of the X509 cert whilst not updating the signature. It doesn't have the private key so it couldn't redo the signature but, for this example, we don't really need that anyway.. My thoughts:\n\nMove your static::$primes fix into it's own PR.\nImplement the changes described at https://github.com/phpseclib/phpseclib/pull/1095#discussion_r143369170 . Those changes would also apply to the decrypt equivalent.\nThe unit test is failing with these changes. There are 37 unit tests failing and Unit_Crypt_AES_EvalTest is issuing a bunch of warnings about an undefined offset. See https://travis-ci.org/phpseclib/phpseclib/jobs/200665551 . I'm not going to merge this with unit tests failing.. > Move your static::$primes fix into it's own PR.\n\nI went ahead and created a commit with your fix:\nhttps://github.com/phpseclib/phpseclib/commit/7a2f2e8e6bd357e9f4be181300ac2b298c896203\nI also added a unit test:\nhttps://github.com/phpseclib/phpseclib/commit/a59d046c9df7c8e6e2f4acc14f6878b026a07edf. phpseclib doesn't currently support tunneling. It's probably something I'll look into when I get to SSH2 in the ongoing rewrite I'm doing of phpseclib for the master branch but I don't have any ETA for that.. SSH negotiates the symmetric key via diffie-hellman key exchange, which involves modular exponentiation, among other things. With BigInteger's internal implementation that can be quite slow. Also, if you're doing RSA authentication that can slow things down as well depending on how big your key is. If you're gonna use a 1MB key vs a 1KB key (for example) that's gonna slow things down a ton.\nTo know whether or not you have gmp installed I guess post a copy of your phpinfo(). There's no hard limit. One possibility: the script is just timing out. You could try doing set_time_limit(0); to account for that possibility.\nIf that doesn't help then a few other things that might - maybe try looking at the errors. eg. print_r($sftp->getErrors()).\nIf that doesn't help then maybe provide me with the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 2) at the top of the file and then $sftp->getLog() after.. ssh2log.txt is a bit mangled. It looks like you copy / pasted the output from a webpage and that the output wasn't encapsulated with <pre> tags? Because of this not only are the new lines squashed into a space - so are consecutive spaces.\nI just made a commit that should make this less of an issue for detailed logs:\nhttps://github.com/phpseclib/phpseclib/commit/8abc0ee60ca4f72f58a9d8de182ef6a744cb6ec9\nAnyway, in cleaning up your logs somewhat...\n```\n000006b0 00:1c:65:00:00:00:01:00:00:00:01:00:00:00:0b:45 ..e............E\n000006c0 6e:64:20:6f:66:20:66:69:6c:65:00:00:00:00:00:00 nd of file......\n000006d0 00:1c:65:00:00:00:01:00:00:00:01:00:00:00:0b:45 ..e............E\n000006e0 6e:64:20:6f:66:20:66:69:6c:65:00:00:00:00:00:00 nd of file......\n000006f0 00:1c:65:00:00:00:01:00:00:00:01:00:00:00:0b:45 ..e............E\n00000700 6e:64:20:6f:66:20:66:69:6c:65:00:00:00:00:00:00 nd of file......\n00000710 00:1c:65:00:00:00:01:00:00:00:01:00:00:00:0b:45 ..e............E\n00000720 6e:64:20:6f:66:20:66:69:6c:65:00:00:00:00:00:00 nd of file......\n00000730 00:1c:65:00:00:00:01:00:00:00:01:00:00:00:0b:45 ..e............E\n00000740 6e:64:20:6f:66:20:66:69:6c:65:00:00:00:00       nd of file....\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000 00:00:00:00:00:00:00:11:00:00:00:0d:04:00:00:00 ................\n00000010 01:00:00:00:04:00:00:00:00                      .........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0312, network: 0.0312s)\n00000000 00:00:01:00:00:00:00:1c:00:00:00:18:65:00:00:00 ............e...\n00000010 01:00:00:00:00:00:00:00:07:53:75:63:63:65:73:7p .........Success\n00000020 00:00:00:00                                     ....\n```\nSo it looks like phpseclib is getting to the end of the file and then closing the file.\nidk what version you're using but you're using at least 1.0.4 or 2.0.4 because #945 is being used.\nHere's the last outbound SSH_FXP_READ packet phpseclib sends out:\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000 00:00:00:00:00:00:00:1d:00:00:00:19:05:00:00:00 ................\n00000010 01:00:00:00:04:00:00:00:00:00:00:00:00:06:af:80 ................\n00000020 00:00:00:80:00                                  .....\nHere's the decoding of that:\nSSH Data:\n00:00:00:00 = channel\n00:00:00:1d = data length\nSFTP Data:\n00:00:00:19 = length\n05 = type (SSH_FXP_READ)\n00:00:00:01 = id\n00:00:00:04 = handle length\n00:00:00:00 = handle\n00:00:00:00:06:af:80:00 = offset\n00:00:80:00 = len\n06AF 8000 is 112,164,864 in decimal, which is about 100mb. The last few SFTP responses are SSH_FXP_STATUS with an error message of \"End of file\" so the downloaded file isn't that big but that's an upper bound on the size of the file. SSH_FXP_READ requests attempt to read in chunks of 32KB. It'd take some work to figure out exactly how many bytes phpseclib is reading of the file but, none-the-less, I think it's safe to assume that phpseclib is reading every byte of the file.\nYou say the page \"shows File Not Found\". What's showing that message? What's the trigger for that message to be shown? Say phpseclib is running on computer A and is downloading the file (if it exists) from computer B. Does \"File Not Found\" mean that the file is being written to computer A's filesystem and it's not being found on computer A? Is the error message implying that it's not being found on computer B? If the latter it's certainly not coming to that conclusion from phpseclib since phpseclib actually is reading the file (as demonstrated above).... It's not completely clear to me what you're trying to do.\nAre you using phpseclib to download a bunch of .php files and then you're trying to access those files via a webbrowser and find yourself unable to do so because of an error 404? If so then 107mb is kinda seems kinda big for a .php file...\nThe code snippet you posted has no code in it to produce error 404 response codes, either, so it's not clear to me how you're actually getting an error 404. Normally I'd think that maybe the file just didn't exist at the URL you thought it did but then you say that when you do echo $sftp->get($file) instead of simply $sftp->get($file) you get data but just 4.7mb...\nSo, like I said, there's a lot about your situation that is unclear to me. Were the log files from when you were doing the echo or when you weren't? If the latter then I guess try posting the log file again, but this time, do so with <pre> encapsulating the output.. php\n            else\n            {\n                header( 'Location: https://' . $_SERVER['HTTP_HOST'] . '/domain/pagenotfound' );\n                exit;\n            }\nI guess that'd explain the error 404's...\nAnyway, from your latest log file...\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:1d:00:00:00:19:05:00:00:00  ................\n00000010  01:00:00:00:04:00:00:00:00:00:00:00:00:06:af:80  ................\n00000020  00:00:00:80:00                                   .....\nThat is the exact same packet I decoded a few days ago and as I elaborated in my last post this packet is requestng data ~100mb into the file and it's getting data back too right up until the end of the file.\nYou say only 4.7mb is being downloaded when echo isn't used. How do you know that? Are you basing that on the output of $sftp->size()? Per the log files, I find this claim suspect.\nAs for the echo...\nI did a little expirement.\nphp\n<?php\n$a = '<!-- ' . str_repeat('a', 1024 * 1024) . '-->';\necho number_format(memory_get_usage());\nThat outputs 1,666,224.\nphp\n<?php\n$a = '<!-- ' . str_repeat('a', 1024 * 1024) . '-->';\necho $a;\necho number_format(memory_get_usage());\nThat outputs 2,710,928.\nMy guess...  you're running out of memory.\nSo two possibilities:\n\nincrease your memory limit. eg. ini_set('memory_limit' '128M')\ndownload in chunks and output in chunks. eg.\n\nphp\n$size = $sftp->size($file);\nfor ($offset = 0; $offset < $size; $offset+= 1024*1024) {\n    $sftp->get(file, false, $offset, 1024*1024);\n}. If you are aware of any instances of short array syntax in the 2.0 branch please do point them out. The master branch uses short array syntax but the master branch isn't the 2.0 branch.. I'm not sure if you're asking a question or making a complaint.\nIf the former...  here's how you do include path's:\n```php\n<?php\nset_include_path(get_include_path() . PATH_SEPARATOR . 'phpseclib');\ninclude('Net/SSH2.php');\n?>\n```\nIf the later then try the 2.0 branch. I'm not gonna break BC because someone on the internet said I should.. I tried to do screen -R zzz myself, with phpseclib, and didn't get any errors.\nCould you send me the actual output of $this->ssh->read() and then I could try to duplicate the issue? If you don't want to post it publicly you could email it to terrafrost@php.net.. Fixed by #1104 . I added a unit test for this issue as well:\nhttps://github.com/phpseclib/phpseclib/commit/91a0866fdced1d7b5741b31f0ef2556dfce1d6a5\nThanks!. You'll need to share some code. I mean, I can reproduce the issue easily enough:\nphp\n<?php\ninclude('Math/BigInteger.php');\ninclude('Math/BigInteger.php');\nIf that's what you were doing I'd suggest either deleting one of the include's or replacing both with include_once. But as is idk what you're doing. Based on the error you've posted you could be doing exactly what my code snippet is doing - I have no way of knowing.. phpseclib should support this already. Here's an example of how to do it:\n```php\n<?php\ninclude('Net/SSH2.php');\ninclude('Crypt/RSA.php')\n$rsa = new Crypt_RSA();\n$rsa->loadKey(file_get_contents('/path/to/key.pem'));\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', 'pass1', $rsa)) {\n    exit('Login failed');\n}\n// this does the same thing as the above\n//if (!$ssh->login($username, 'pass1') && !$ssh->login('username', $rsa)) {\n//    exit('Login failed');\n//}\necho $ssh->exec('pwd');\necho $ssh->exec('ls -la');\n```. Works fine for me.\nHere's a Vagrantfile to setup a machine that requires multi factor authentication:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n        printf \"\\n\\nMatch User vagrant\\n\\tAuthenticationMethods publickey,password\" >> /etc/ssh/sshd_config\n        service ssh restart\n    SHELL\nend\nMy PHP code:\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Net\\SFTP;\n$rsa = new RSA();\n$rsa->loadKey(file_get_contents('C:\\path\\to\\vm\\.vagrant\\machines\\default\\virtualbox\\private_key'));\n$ssh = new SFTP('127.0.0.1', 2222);\n$ssh->login('vagrant', $rsa, 'vagrant');\nprint_r($ssh->nlist());\n```\nVagrant, by default, doesn't encrypt the private keys it generates, so I encrypted it myself and tried it again:\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Net\\SFTP;\n$rsa = new RSA();\n$rsa->setPassword('password');\n$rsa->loadKey(file_get_contents('C:\\path\\to\\vm\\.vagrant\\machines\\default\\virtualbox\\enc_private_key'));\n$ssh = new SFTP('127.0.0.1', 2222);\n$ssh->login('vagrant', $rsa, 'vagrant');\nprint_r($ssh->nlist());\n```\nSuccess.\nI tried it with phpseclib 2.0.4. I also tried it with phpseclib 1.0.5 (altho obviously the code is for the 2.0 version of phpseclib).  I even tried flipping the order of the last two arguments of the login call as well and was still able to login without issue.\nFeel free to try it out yourself. If you delete either the $rsa parameter or the 'vagrant' parameter it won't work. Both are needed.\nIf a password protected RSA private key isn't working for you then it seems like the problem might be that the password you're using is incorrect.\nIf it's working with SSH2 but not SFTP...  I guess try posting the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog() after the failed login attempt.\nAlternatively, maybe you could give me SSH access to the account and I could try to login. If you were willing to do this you could email the credentials to terrafrost@php.net. If not...  that's fine too.. The password is getting through fine. The server is responding with a \"partial success\" response. The problem is that it's just never getting the key. Assuming that your code looks pretty much like mine then another possibility is that the RSA object is unable to read your key.\nMaybe you're passing a DSA or ECDSA key to it to the RSA object or something idk. I'd try doing echo $rsa; just to see if you get anything back.. > I've found my passphrase issue exists on Windows 7 ony. On UBUNTU 16.04 a key with passphrase works fine for me\nAre you sure you're using the same key on both? I'd try doing echo $rsa; on Windows 7. Who knows - maybe the issue is something like the keyfile, on Windows, is in UTF-16 format, instead of US-ASCII or something. Or maybe it's UTF-8 and you're using a DER - not a base-64 encoded PEM.\nIt's hard to say for sure without the key. I'd say if you can generate an identical key that demonstrates the issue on Windows 7 - and if echo $rsa; doesn't output anything on that key - then post the key here so I can see what's up with it.\n\nOn UBUNTU 16.04 a key with passphrase works fine for me if I use the SSH2 class, but not with the SFTP class\n\nI don't understand that at all. Check out the first few lines of SFTP::login:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L387\nphp\n    function login($username)\n    {\n        $args = func_get_args();\n        if (!call_user_func_array(array(&$this, '_login'), $args)) {\n            return false;\n        }\nSFTP extends SSH2. func_get_args() passes the arguments that were passed to SFTP::login method to SSH2::_login, just as SSH2::login does:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SSH2.php#L1869\nFurther, SFTP does not define _login - SSH2 does but not SFTP.. Good catch on the int casting.\nI tried it on PHP 5.5.15 and 7.1.0 without casting the stuff to int's and got this error:\nWarning: gmmktime() expects parameter 3 to be integer, string given\nWeird that it'd be the \"$second\" parameter (which is actually the third param lol) that'd cause issues. Like all of the other params can be strings but not the third parameter!\nAnyway, I cherry picked this into 1.0 and merged that into 2.0 and master.. It looks like you're setting all the parameters directly. eg.\nphp\n      if($packet->key['p'] && $packet->key['q']) $rsa->primes = array($packet->key['p'], $packet->key['q']);\n      if($packet->key['u']) $rsa->coefficients = array($packet->key['u']);\nPrior to #984 phpseclib did this to determine if it should do plain old modular exponentiation or if it could use the chinese remainder theorem to speed things up:\nphp\n        if (empty($this->primes) || empty($this->coefficients) || empty($this->exponents)) {\nThis was refined in #984 to this:\nphp\n        switch (true) {\n            case empty($this->primes):\n            case $this->primes[1]->equals($this->zero):\n            case empty($this->coefficients):\n            case $this->coefficients[2]->equals($this->zero):\n            case empty($this->exponents):\n            case $this->exponents[1]->equals($this->zero):\n                return $x->modPow($this->exponent, $this->modulus);\nYou don't appear to be setting the exponent so, with the old code, modular exponentiation wasn't taking place. With the new code it...  well now it's checking more things.\nHere's how I'd set the keys:\nphp\n      if($packet->key['p'] && $packet->key['q'])\n         $rsa->primes = array(\n            1=> new BigInteger($packet->key['p'], 256),\n            new BigInteger($packet->key['q'], 256)\n         );\n      if($packet->key['u']) $rsa->coefficients = array(2 => new BigInteger($packet->key['u']));\nie. they're BigInteger's - not strings. Also, the initial index is 1 or 2 - not 0.\n$this->components needs to be set as well. PuTTY keys do not have the components but they're calculated on key load thusly:\nphp\n                $temp = $components['primes'][1]->subtract($this->one);\n                $components['exponents'] = array(1 => $components['publicExponent']->modInverse($temp));\n                $temp = $components['primes'][2]->subtract($this->one);\n                $components['exponents'][] = $components['publicExponent']->modInverse($temp);\nSo I'd do something like that as well.\nAs is, however, with 2.0.2 and earlier, you're not actually getting the speedup that the Chinese Remainder Theorem (CRT) provides for since you're not setting all the parameters that you need. And it's just kinda silently failing on you and falling back to the non-CRT approach.\nIn dev-master all they key formats are handled via a plugin system so for the master branch (which isn't really ready for general use) I'd suggest just developing a custom plugin but, for the time being, the approach you're using works fine.. Here's where the channel is set to 256:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L58\nIt's set when you login:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L410\nNothing unsets the channel once it's been set. In particular, the following string does not occur in SSH2.php or SFTP.php:\nphp\nunset($this->channel_status\nSFTP::file_exists calls stat:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L2293\nSFTP::stat does this:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.4/phpseclib/Net/SFTP.php#L1154\nphp\n        if (!($this->bitmap & SSH2::MASK_LOGIN)) {\n            return false;\n        }\nIf $this->bitmap & SSH2::MASK_LOGIN could be set whilst _login returned false that could explain how you're getting that error BUT...  I looked through SSH2.php...  $this->bitmap |= self::MASK_LOGIN; is only ever set immediately before return true;.\nSo, long story short, nothing sticks out to me in looking at the code. In lieu of that I'm going to need log files. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top of your code and then do $ssh->getLog(); after you encounter the error. And maybe share your code, as well.. > There is another problem\uff0cwhen i use sftp->get() a file,and every time just get a part of the file...\nLogs. I need logs.. Well that's a new bit of information. Your last post said \"There is another problem\uff0cwhen i use sftp->get() a file,and every time just get a part of the file...\". Getting a part of a file doesn't necessarily mean that the PHP script is timing out.\nIn any event, you can still do logging but you'll have to set it up differently. Do define('NET_SSH2_LOGGING', 4); and define('NET_SSH2_LOG_REALTIME_FILENAME', 'phpseclib.log'); at the top of the file. That'll enable real time logging to a file. By default that log file will include the most recent 1MB that was sent / received.. I'm not seeing the Undefined offset error. And it looks like it's just chugging along, altho you are getting wildly varying speeds for the various incoming 32kb packets.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0515, network: 0.0206s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1127, network: 0.0925s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 2.7, network: 2.6625s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 29.1233, network: 29.0704s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 30.4887, network: 30.4708s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0268, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1349, network: 0.1172s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1639, network: 0.1489s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0253, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1385, network: 0.1063s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1638, network: 0.1369s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.026, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0292, network: 0s)\nSo two of the packets took 30s to transfer 32kb. Two other packets took ~15s each. So that's 30s for 64kb or 1.5m for 128kb. But then there four 32kb packets with a transfer time of 0.1127s or less. That's 0.2s vs 1.5m. Why the difference? idk.\nI mean, I guess I could see there being a delay like that if you were getting data from /dev/random but idk.. @salahy2 - the fact that you responded to a closed ticket instead of opening a new one may mean subsequent replies may get lost. It might be beneficial for you to open up a new ticket.\nRegardless...  can you post your SSH logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and echo $ssh->getLog(); after the failed login attempt.\nAlso, post the exact message. You say you're getting the same error but you also said that in #1014. Maybe you really are getting the same error in both instances or maybe you're getting an error that looks very similar but has different line numbers. As is it's unclear.. I did that for SymmetricKey.php with #1084. X509 is due for a major rewrite but right now I'm working on refactoring large swaths of BigInteger.php.\nAnyway, thanks for the PR - it's been merged!. phpseclib already does stream_select which blocks until the timeout parameter. And it works. Here's a Vagrantfile (1) to demonstrate that the system doesn't have a funky configuration and (2) provide you the means to reproduce my results even if you don't necessarily have the same system:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\nend\nPHP code:\n```php\n$ssh = new SSH2('127.0.0.1', 2200);\n$ssh->login('vagrant', 'vagrant');\n$start = microtime(true);\n$ssh->setTimeout(10);\necho $ssh->read();\n$elapsed = microtime(true) - $start;\necho \"\\ntook $elapsed sec\\n\";\n```\nIt outputs the banner and the prompt after 10s.\nAnother example:\n```php\n$ssh = new SSH2('127.0.0.1', 2200);\n$ssh->login('vagrant', 'vagrant');\n$start = microtime(true);\n$ssh->setTimeout(10);\necho $ssh->exec('ping google.com');\n$elapsed = microtime(true) - $start;\necho \"\\ntook $elapsed sec\\n\";\n```\nAs before this dumps output in almost exactly 10s.\nThis was implemented back in 2012:\nhttp://www.frostjedi.com/phpbb3/viewtopic.php?f=46&t=30238\nhttps://github.com/phpseclib/phpseclib/commit/1ab30836a6e145f4c7ae4517de06b2f38a93a1b8\nWhy stream_select instead of stream_set_timeout? Keep in mind this was ~5 years ago but...  it looks like stream_select would be easier to implement.\nAs is, it appears to be measuring how much time is passing between the receipt of channel packets. If it takes 1m to receive a channel packet but only 1s for at least one byte of a channel packet to be made available after the last channel packet was received in full I guess the timeout's could be a bit skewed. But I also don't think that's a likely use case.\nIn http://www.frostjedi.com/phpbb3/viewtopic.php?p=120133#p120133 (from 2010) I write \"I guess the big issue would be that stream_set_timeout() is cumulative\"\nWhy is stream_select in _get_channel_packet as opposed to _get_binary_packet? idk. But I think my earlier point still stands - that long gaps of time between channel packets is the most likely scenario.\nLong story short...  I'd be surprised if setTimeout(), as currently implemented, didn't solve whatever problem you're having. If it didn't then I'd like to the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 2) and then echo $ssh->getLog(). If you want me to make changes you have to do a little more to convince me other than just saying \"this will solve my problem\". If you want to make the changes and then submit a PR then I guess the bar isn't gonna be quite as high.. Sorry for the delay - been busy at work.\nAnyway, I assume that's the log when stream_set_timeout isn't used? If so then what does it look like when stream_set_timeout is used? The next packet should be an incoming NET_SSH2_MSG_KEXINIT. It's not a channel packet so stream_set_blocking isn't called. If it works with stream_set_timeout then my guess is that you're getting a malformed NET_SSH2_MSG_KEXINIT packet. That the length it reports for the binary packet is a lot larger than the packet itself actually is so _get_binary_packet is just waiting and waiting.\nThe phpseclib logs with stream_set_timeout would confirm this. It'd also be interesting to see the \"since last\" and \"network\" times.. I had hoped to take a look at this this weekend but this weekend didn't really go according to plan. I'll try to take a look at this sometime in the coming week.\nThanks!. https://github.com/phpseclib/phpseclib/commit/a9c0e2d4300533de468503587ad4021d42393ccd should fix this. I tested it by doing $ssh->exec('sleep 300; echo test').\nI'm still not a big fan of stream_set_timeout because...  consider this code:\nphp\n$ssh->setTimeout(30);\necho $ssh->exec('ping 127.0.0.1');\nWith stream_set_timeout that'd never return anything - it'd basically be an infinite loop. Unless I set the timeout before each and every fread call, which kinda seems inelegant.\nI mean, I suppose one could argue that doing stream_select before every fread call is comparable but idk. stream_select just seems more elegant.. @forrest79 - thanks!!. Depends on what you mean by proxy.\nIf you want to use a proxy between you and the SSH server you can prep the proxy by doing the fsockopen call yourself and doing whatever you need to do to that call to initialize the connection.\nIf you want phpseclib to act as a proxy and do something like port forwarding or some such...  that is a fairly big undertaking and I already have a roadmap of stuff I plan on working on for phpseclib. That is on the list but there's so much stuff ahead of that that I wouldn't hold my breath any time soon.\nIf you want me to re-arrange my priorities in-so-far as phpseclib is concerned I will need a financial incentive.\nAt some point I do want to do a demo of how to connect to an SSH server with phpseclib through a SOCKS4/5 proxy but that would be a multi-day task right there and when you consider that I do have a M-F job that isn't phpseclib...  it's liable to, all said and done, take 1-2 weeks. Last time I tried I spent, as I recall, the better half of a day and ran into issues the specifics of which I forget. I still think it's do'able but without a ready built example it's not exactly a walk in the park either. But again, if you want me to do this sooner rather than later I will need financial compensation.. It looks like you're using the master branch, which, short of doing what you're doing, requires composer. phpseclib requires an autoloader but not necessarily composer. Also, the master branch has an unstable API. I make no guarantees that exec(), for example, will work the same way from one commit to the next. I'd recommend using the 2.0 branch instead.\nAnyway, nice work! I'll have to test it out as time permits. I still want to do an example with SOCKS4/5 but it's also not as high as other things on my priority list... I guess thephpleague takes errors and turns them into exceptions that are thrown. So in that case you could simply put the login() method around a try / catch block and catch all Exceptions.\nSample code:\n```php\n<?php\nfunction login($username, $password) {\n    throw new Exception();\n}\nlogin('user', 'pass');\n```\nOh noes, you can see the user / pass in the stack trace.\n```php\n<?php\nfunction login($username, $password) {\n    throw new Exception();\n}\ntry {\n    login('user', 'pass');\n} catch (Exception $e) {}\n``\nYay, no full stack trace.. This does not appear to be an issue withphp://memory. In my testingfstatonphp://memoryreturns an array whereas in the version of PHP I testedphp://input` on it returned a false. Maybe at the time the feature was implemented - against the version of PHP I was testing it against - it behaved differently. Test code:\nphp\n<?php\n$fp = fopen('php://memory', 'w+');\nfputs($fp, 'zzzzz');\nvar_dump(fstat($fp));\nvar_dump(stream_get_meta_data($fp));\nrewind($fp);\necho fread($fp, 1024);\nDue to the way it works, unit testing php://input is a little more difficult.\nOne thing that could probably be done is this:\nphp\n$body = fopen('php://memory', 'w+');\nstream_copy_to_stream(fopen('php://input', 'r'), $body);\nrewind($body);\nphpseclib could probably do this itself. eg. do stream_get_meta_data and if wrapper_type (in the array that's returned) is \"PHP\" and stream_type is \"Input\" then it copies the stream to php://memory as demonstrated above.. > I believe a better approach might be \"try fstat, if it fails then try stream_copy_to_stream and fstat again\"\nThe problem I have with that is that fstat(true) returns false. It issues a PHP Warning but it also returns false. Similarly, fstat(mcrypt_module_open('rijndael-128', '', 'cbc', '')) returns false but it, too, returns a PHP Warning, albeit a different one.. > Looking at the code seems like $fp is guaranteed to be a resource at that point.\nYah - it looks like you're right lol.\n\nOTOH I can't fathom why would anyone want to pass an mcrypt_module_open resource as the $data argument of SFTP::put.\n\nIt's just an example lol. The main point being that idk all the conditions under which fstat can return false and I wouldn't want stream_copy_to_stream to error out because an invalid stream was passed to it.\nAnyway, I'll try to make this update later today! It was requested that I do a release shortly as well so this'll probably be in the new release.\nThanks!. The proposed changes have been made!:\nhttps://github.com/phpseclib/phpseclib/commit/35a1102c0b2854ae7903fb82ac68cadd23ba02f5. Please post the SSH logs from both machines. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top of the file and then $ssh->getLog() after the $ssh->exec().. Well it's not something phpseclib is doing. From your logs:\n```\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0007, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  54:43:3a:5c:50:79:74:68:6f:6e:32:37:5c:70:79:74  TC:\\Python27\\pyt\n00000020  68:6f:6e:2e:65:78:65:20:63:3a:2f:6d:61:65:73:74  hon.exe c:/maest\n00000030  72:6f:2f:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:2d  ro/main.py -\n00000040  2d:70:72:6f:63:65:73:73:2d:72:65:70:6f:72:74:20  -process-report \n00000050  68:6f:75:72:6c:79:5f:76:69:73:69:74:6f:72:20:20  hourly_visitor\n00000060  2d:74:65:73:74                                   -test\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.012, network: 0.0002s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0005, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EXTENDED_DATA (since last: 0.6788, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:01:00:00:00:9e:75:73:61:67  ............usag\n00000010  65:3a:20:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:5b  e: main.py [\n00000020  2d:68:5d:20:2d:2d:70:72:6f:63:65:73:73:2d:72:65  -h] --process-re\n00000030  70:6f:72:74:20:5b:52:45:50:4f:52:54:5f:54:52:49  port [REPORT_TRI\n00000040  47:47:45:52:5d:20:5b:2d:74:65:73:74:5d:0d:0a:20  GGER] [-test].. \n00000050  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000060  20:20:5b:2d:2d:74:6f:20:54:4f:20:5b:54:4f:20:2e    [--to TO [TO .\n00000070  2e:2e:5d:5d:0d:0a:5f:5f:6d:61:69:6e:5f:5f:2e:70  ..]]..main.p\n00000080  79:3a:20:65:72:72:6f:72:3a:20:75:6e:72:65:63:6f  y: error: unreco\n00000090  67:6e:69:7a:65:64:20:61:72:67:75:6d:65:6e:74:73  gnized arguments\n000000a0  3a:20:2d:74:65:73:74:68:0d:0a                    : -testh..\n```\nThe SSH server is appending the h - not phpseclib. Same thing with the C in your other example.\nAs you can see in the first packet, phpseclib isn't sending a h or C over so it's not like the server is simply echo'ing back what phpseclib sent to it.\nIn PuTTY there's a \"Remote command\" field in the SSH panel:\nhttps://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter4.html#config-ssh\nThis is what phpseclib's exec() is most analogous too. My guess: if you ran the command via PuTTY you'd get random characters appended to it as well. Of course, simply entering the command into the \"Remote command\" field might make it so that the output just flashes on the screen before you have a chance to actually review it. To actually see what PuTTY is getting from the SSH server the best bet would probably be to use the Logging panel:\nhttps://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter4.html#config-logging\nYou can get the Putty logs by enabling logging. To do so go PuTTY->Session->Logging and checking the \"SSH packets\" radio button.\nIt'd also be interesting to know if you got random characters added when running the command via an interactive shell. Interactive shells do behave differently than exec so it's possible you wouldn't but if so then phpseclib can always be made to run in an interactive shell as well.... I cherry-picked this to 1.0 and merged that into 2.0 and master. Does it look better to you know?\nThanks!. When I tried to do git cherry-pick remicollet/issue-perm I got this message:\n```\nOn branch 1.0\nYour branch is ahead of 'origin/1.0' by 2 commits.\n  (use \"git push\" to publish your local commits)\nYou are currently cherry-picking commit 9706f376.\nnothing to commit, working tree clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\ngit commit --allow-empty\n\nOtherwise, please use 'git reset'\n```\nI got that message on both Linux and Windows (Windows being what I chiefly develop on).\nOn Windows I tried git commit --allow-empty and then tried to do the cherry-pick again. It had been my hope that the permission change would stick.\nAfter I made the commit and pushed it to https://github.com/terrafrost/phpseclib.git I did the following on my Linux machine:\ngit checkout -b test terrafrost/1.0\ngit log\ncd phpseclib/\ncd Net\nls -latr\nAnd it showed the new permission. This convinced me that the permission change took and so I then pushed to https://github.com/phpseclib/phpseclib.git.\nI'll now delete the entire phpseclib directory off of my Linux install and then re clone using https://github.com/phpseclib/phpseclib.git. It looks like the permissions took to the 1.0 branch but not to the 2.0 or master branches when I did git merge 1.0. Ugh.. It's probably https://github.com/phpseclib/phpseclib/issues/1085 that introduced the issue. My guess: not all versions of OpenSSL / PHP support multi length keys.\nphpseclib passes all the unit tests on Travis CI. The 1.0 branch is tested on 5.3 on Travis CI and it's working without issue:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/229847072\n2.0 isn't tested on 5.3 on Travis CI because of this:\nhttps://github.com/phpseclib/phpseclib/commit/b4c750514894c994340a8aec2abda0b2dbc0d9cc#diff-354f30a63fb0907d4ad57269548329e3\nBut if 1.0 works on Travis CI / PHP 5.3 I'd expect 2.0 to work as well. It could be an issue specific to 5.3.3 (Travis CI uses 5.3.29) or maybe with the version of OpenSSL you have installed.\nCan you post your phpinfo()?\nThanks!. OpenSSL on PHP 5.3.3 already has issues for which no elegant workaround really exists. eg.\nhttps://github.com/phpseclib/phpseclib/issues/938#issuecomment-186413427\nThat issue seems to have been fixed in PHP 5.3.4.\nAs for the specific issue you discuss in this post...  in my testing the issue you observed ceases to be an issue in PHP 5.3.7 on Windows using the binaries from http://windows.php.net/downloads/releases/archives/ . Here's the script I used:\n```php\n<?php\ninclude('Crypt/Random.php');\ninclude('Crypt/Blowfish.php');\n$key = crypt_random_string(17);\n$plaintext = str_repeat('.', 100);\n$bf1 = new Crypt_Blowfish(CRYPT_MODE_CTR);\n$bf1->setPreferredEngine(CRYPT_ENGINE_INTERNAL);\n$bf1->setKey($key);\n$result1 = $bf1->encrypt($plaintext);\n$bf2 = new Crypt_Blowfish(CRYPT_MODE_CTR);\n$bf2->setPreferredEngine(CRYPT_ENGINE_OPENSSL);\n$bf2->setKey($key);\n$result2 = $bf2->encrypt($plaintext);\necho $result1 == $result2 ? 'same' : 'different';\n```\nThe changelog for 5.3.7 doesn't mention specific change that'd impact this behavior: http://php.net/releases/5_3_7.php\nI tried it on Linux with the following Vagrantfile:\n```\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update\n        apt-get install -y libxml2-dev libgmp3-dev libssl-dev libsslcommon2-dev\n        wget http://museum.php.net/php5/php-5.3.6.tar.gz\n        tar xvzf phpgz\n        cd php\n        ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h\n        # https://pastebin.com/raw/z9PA04LX\n        wget http://cpanelstuffs.linuxcabin.com/downloads/php1.patch\n        patch -p0 < php1.patch\n    # the following two lines are not necessary for PHP 5.3.7:\n    wget -O openssl.patch https://pastebin.com/raw/Zpga4ZMq\n    patch -p0 < openssl.patch\n\n    ./configure --prefix=/usr/local --enable-bcmath --with-gmp --with-openssl --with-libdir=/lib/x86_64-linux-gnu\n    make\n    make install\n\n    apt-get install -y git\n    cd /home/vagrant\n    git clone https://github.com/phpseclib/phpseclib.git\n    cd phpseclib\n    git checkout tags/1.0.6\n    cd /home/vagrant\n    wget -O test.php https://pastebin.com/raw/RLaXQu5F\nSHELL\n\nend\n```\nI got \"same\" output on PHP 5.3.7+ on Linux per the above and \"different\" on PHP 5.3.6 and earlier.\nSo for Blowfish.php I guess what can be done is to do if (version_compare(PHP_VERSION, '5.3.7') >= 0 && $this->key_length != 16) return false; before the if ($this->key_length < 16) return false line.\nIt'd probably be prudent to get phpunit working in my Vagrantfile to see if any other ciphers are affected... Does #1127 / #1128 fix the issue for you?. The branches have been merged.\nThanks!. Fixed! Thanks!. There's stuff like http://reactphp.org/ , https://icicle.io/ and http://amphp.org/ but I have no experience with them and my guess is that phpseclib wouldn't work so well with them. At the very least I have never tried.... Shot in the dark but...  try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        'arcfour256',\n        'arcfour128',\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        //'arcfour256',\n        //'arcfour128',\n\n```\nIf that doesn't work then I guess the next thing that'd help is if you gave me the domain name / IP address / port. I wouldn't need a login since I wouldn't need that to duplicate the problem since the problem is happening before the login actually takes place.. That's an internal IP address so I won't be able to duplicate the issue...\nI suppose one thing you could do is just brute force the various algorithms. Try different combinations and see if any of them work and then post the ones that don't.... Here's one approach that might help:\n```php\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('127.0.0.1', 2222);\n$ssh->login('vagrant', 'vagrant');\n$ssh->write(\"ping 127.0.0.1\\n\");\nsleep(15);\necho $ssh->exec('ls -latr');\n```\nI tried that with the following Vagrantfile:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/trusty64\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n        printf \"\\n\\nClientAliveInterval 2\" >> /etc/ssh/sshd_config\n        service ssh restart\n    SHELL\nend\nThe idea is that altho phpseclib isn't sending data the server is and thus the connection isn't closed. If you remove the $ssh->write(\"ping 127.0.0.1\\n\"); you get a \"Connection closed prematurely\" error.\nAs for your specific suggestion...  it's been proposed before.  Quoting https://github.com/phpseclib/phpseclib/issues/985#issuecomment-225454993 ,\n\nSo I did some experimenting along these lines and...  well I think this is only going to be a feature I'll implement in the master branch. My preliminary work was promising but then I realized...  I'm gonna have to replay login's for this to work. In light of that I think I'm just gonna put it on the backburner.\nHere's my experimental code:\nhttps://github.com/terrafrost/phpseclib/commit/222c525d7907e77da83bd86ead55384c7f9f4d09. Only the master branch throws exceptions and that branch has an unstable API that could be changed (and probably will be) with any commit. For 1.0 and 2.0 you'd need to use an error handler to turn errors into exceptions.. You can cal fsockopen, do whatever prep work to it is necessary, and then pass that to the constructor as the only parameter and connect that way. https://github.com/phpseclib/phpseclib/issues/1117#issuecomment-295662545 demonstrates the concept with a CONNECT proxy.. Well that'd be a pretty major BC break. Maybe phpseclib should also refuse to do any crypto if OpenSSL is available (again a major BC break).\n\nIf you have a specific issue with the fallback option phpseclib please elaborate but BC breaks are pretty much non-starters save for in the master branch.. phpseclib has used the error suppression operator on all mcrypt function calls since 1.0.4 / 2.0.4:\nhttps://github.com/phpseclib/phpseclib/commit/640f10609fdb2aa825f8a42c6bee975879974e1c\nThose versions were released on October 3, 2016. My recommendation: upgrade to the latest version of phpseclib from either the 1.0 or 2.0 branches.\nRemoving mcrypt is not going to happen because, deprecated tho it may be, it's still a heck of a lot faster than the pure-PHP implementation. The fact that it's being used on your system suggests that OpenSSL isn't available so mcrypt is gonna be the fastest way to do encryption in PHP.. @antonydandrea \n\nI find it staggering that you would be so against removing a dead library in favour for one that is not dead.\n\nWhat do we gain by removing mcrypt support? Purists like you get their jolly's off because the output of a grep looks good. Yippee! That's about the only thing removing mcrypt gets us because, as I've already established, mcrypt doesn't yield any errors even on PHP 7.2.\nWhat do we lose by removing mcrypt support? Speed. Because the alternative is a hell of a lot slower.\nIn short, by removing mcrypt support, we gain something very small and we lose something kinda big. So I just don't see it as being worth it.. > Agreed. However, there are alternatives, e.g. libsodium.\nlibsodium doesn't implement many of the algorithms mcrypt implements. The algorithms it implements are as follows:\n\nX25519 - Elliptic Curve Diffie Hellman over Curve25519\nEd25519 - Edwards curve Digital Signature Algorithm over Curve25519\nXsalsa20 - Extended-nonce Salsa20 stream cipher\nChaCha20 - Stream cipher\nXchacha20 - Extended-nonce ChaCha20 stream cipher\nPoly1305 - Polynomial Evaluation Message Authentication Code modulo 2^130 - 5\nBLAKE2b - Cryptographic Hash Function\nSipHash-2-4 - Fast hash, but not collision-resistant; ideal for hash tables.\n\nmcrypt doesn't implement any of those so there's not a lot of overlap.\n\nDoes this mean, if I use the openssl php extension, mcrypt extension is neither required nor needed?\n\nThat's 95% true I'd say. There are still a few places where mcrypt will be used (if mcrypt is installed). Like prior to PHP 5.3.7, if you're using Blowfish and the key length isn't equal to 16, OpenSSL can't be used.. Like the error message says, the error you're reporting is in login.php. phpseclib doesn't have a file named that...\nI mean, I guess you could post your login.php, but keep in mind, this really doesn't look like a phpseclib issue atm.... I think the changing of the constants from 1 to 0x1 was...  unnecessary. I mean, I get why you're doing it - it could potentially make it more clear that it's serving as a bitmask.\nBut regardless, the changes otherwise look good. Well, it seems like get perhaps ought to have the same method, but I went ahead and took care of that - thanks!. This has been merged BTW. I cherry-picked the commit into the 1.0 branch and merged it up to 2.0 and master:\nhttps://github.com/terrafrost/phpseclib/commit/5979ed571f54e6f5bc63ce8e468145ea08388418. Actually, scratch the above. I did the merge on my local fork but hadn't yet pushed upstream...  get doesn't have a $mode parameter. I could add one but it seems like this might be better if it was a global thing? eg. ->disableRealpath() and ->enableRealpath(), with the latter being the default option?\nedit: what I've done thus far:\nhttps://github.com/terrafrost/phpseclib/tree/no-realpath-1.0\nhttps://github.com/terrafrost/phpseclib/tree/no-realpath-2.0\nhttps://github.com/terrafrost/phpseclib/tree/no-realpath-master. I like that a lot better! Imma get this in the 1.0 and 2.0 as well. I'll try to have this done this evening.\nThanks!!. I rebased your commits into one, changed the name of the first commit and then cherry-picked it from 1.0:\nhttps://github.com/phpseclib/phpseclib/commit/bbf467babde690cf9f074a916d11313f677b2606\nFrom there I merged into 2.0 and master.. Out of curiosity, what's the full server identifier? I ask because it seems like this might be a simpler implementation:\nphp\n        // some SSH servers have buggy implementations of some of the above algorithms\n        switch ($this->server_identifier) {\n            case 'SSH-2.0-SSHD':\n            case 'SSH-2.0-DLINK':\n                $mac_algorithms = array_values(array_diff(\n                    $mac_algorithms,\n                    array('hmac-sha1-96', 'hmac-md5-96')\n                ));\n        }\nBut if SSH-2.0-DLINK was just a part of the server identifier than maybe this would be better:\nphp\n        // some SSH servers have buggy implementations of some of the above algorithms\n        switch (true) {\n            case $this->server_identifier == 'SSH-2.0-SSHD':\n            case strpos($this->server_identifier, 'SSH-2.0-DLINK') !== false:\n                $mac_algorithms = array_values(array_diff(\n                    $mac_algorithms,\n                    array('hmac-sha1-96', 'hmac-md5-96')\n                ));\n        }. > I did not put switch(true) because it is not so clear for me, in that case I would prefer using ifs instead, on the other hand with switch statement we can write less code than using ifs.\nIt's totally subjective lol but personally I prefer the switch approach cause it's more concise.\nAnyway, I'll go with that and try to have it merged by the end of the day.\nThanks!!. I modified your commit a little bit and it's in the phpseclib repo:\nhttps://github.com/phpseclib/phpseclib/commit/4d36e67beea147ee7d30976bebc4fee27daaddfa\nThanks!. I cherry picked your commit into the 1.0 branch and merged into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commit/7606f81279fc9cc4622963c85d5dbaea6a1d9156\nThanks!. Nice find! It's been merged.. If you want to actually go to that directory you could do $sftp->chdir('/root'). If you wanted to show the fact that an entry in the directory listing was a directory...  there's $sftp->is_dir($file['filename']). Alternatively, you could do $file['type'] == NET_SFTP_TYPE_DIRECTORY or ($file['mode'] & 0170000) == 0040000.\nBTW, $file['permissions'] and $file['mode'] should output the same thing, I believe.. > If the engine you selected isn't a valid engine an exception will be thrown. This is in contrast to how things work with the various symmetric ciphers, which have setPreferredEngine. setPreferredEngine was good for 1.0, where exceptions weren't really an option, but with phpseclib 3.0 requiring 5.6+, exceptions now are an option. I'll update the symmetric cipher stuff later to work in a manner more consistent with BigInteger.\nThinking about it, I'm not actually so sure that it's a good idea to have a publicly accessible SymmetricKey::setEngine() method. With BigInteger the engine is, by and large, immutable. Once an engine is set there's no reason it'd ever need to change for all practical applications. But that's not the case for SymmetricKey. With that one the engine could change depending on any number of parameters. Consider Rijndael for example:\nphp\n$cipher->setKey('...'); // block size is 128 by default so OpenSSL engine is used\n$cipher->setBlockLength(256); // at this point either mcrypt or pure-PHP engine has to be used\nSo let's say you did $cipher->setEngine(SymmetricCipher::ENGINE_OPENSSL) before you did setKey or setBlockLength. Is it then supposed to throw a BadConfigurationException exception whilst in setBlockLength? That would be...  weird.\nSo, altho I acknowledge that SymmetricCipher::setPreferredEngine and BigInteger::setEngine are inconsistent, I'm gonna let it stand.\nI did, however, change the parameters setPreferredEngine accepts. eg. previously, if you wanted to set the preferredengine to mcrypt you'd have to do this: setPreferredEngine(SymmetricCipher::ENGINE_MCRYPT). I've made it so that you can do this instead: setPreferredEngine('mcrypt'). This is more consistent with BigInteger's approach:\nhttps://github.com/terrafrost/phpseclib/commit/4171262b9ee6f905eb2bfc4a942c5f44483efdf8. I'm not sure I understand your question. I mean, it looks like you're trying the same password 3x times. If it didn't work once I wouldn't expect it to work again? I mean, I suppose you could be using multi factor authentication with that just happens to want the same password twice, but idk - that seems like that'd be a bit weird.\nI do wonder why you're using the error suppression operator...\nThat said, if you want to test a certain password after you've already logged in...  on Linux you could do passwd from the CLI, I suppose, and do Ctrl + C (\"\\x03\"). You'd need to use the interactive mode functions to do that tho. eg. $ssh->read() / $ssh->write(). I guess you could try doing sudo [command], too, to get a password prompt, but I think that'd only work if you're in the sudoers group idk. But then again, idk that any of these things would work on a Cisco router...\n. You could just try this:\nphp\nif ($ssh->login('username', 'password1')) {\n    return true;\n}\nif ($ssh->login('username', 'password2')) {\n     return true;\n}\nif ($ssh->login('username', 'password3')) {\n     return true;\n}\nreturn false;\n\ni use the error suppression operator,because some login method is ok on a cisco device\uff0cbut it's report a user notice errer on another cisco device\u3002i must make sure the script won't break by these notice\nIt'd be nice if you could share that user notice error so that it might be fixed.\n\nI mean, in-so-far as I know, you could be using an out of date version of phpseclib and the issue could be fixed, but let's get the error first lol.. That's not currently possible with phpseclib. Right now phpseclib (as elaborated at http://phpseclib.sourceforge.net/ssh/auth.html#keyboard) supports two methods for dealing with keyboard-interactive authentication. \n\nOrder based. eg. if you have two parameters (after the username) each of them are passed to the keyboard-interactive prompt in the order that they appear in the function call.\nContext based. eg. you tell phpseclib what should be sent when a known prompt is encountered.\n\nYou're talking about dynamic prompt's and adjusting the response based on the prompt. It'd require a decent amount of work to make phpseclib do that. It's a good idea and I'll add it to my list of changes to make for 3.0 when I get around to doing revamping SSH but that's a ways away.\nI would be willing to adjust my priorities to make this my main priority until it's finished but I'd need a financial incentive to do so lol.. It's the first I've heard of an issue like this.\nIf I were able to reproduce the problem I'd create real time logs and log them to a file. But for a 239mb file those real time logs could possibly be in the gigabytes. None-the-less, I'd parse through them and try to identify what happened. But as is it sounds like you're maybe not able to reproduce the issue? And even if you were getting me multi gigabyte logs could be difficult.\nI guess one thing you could do is tell me what $ssh->getErrors() returns. It'll return an array but what's in the array?. > PS there's an undefined class constant LOG_REALTIME_FILENAME in SSH2.php; fixed in the master branch though.\nYou're supposed to define that yourself.\nI don't actually like the way logging works too much in the 1.0 / 2.0 branches. The master branch (which will eventually become the 3.0 branch) is due for a complete logging revamp. idk, off hand, what the master branch does to \"fix\" it since it's not being defined doesn't really constitute broken behavior.\nQuoting Net/SSH2.php:\n// basically the same thing as self::LOG_REALTIME with the caveat that NET_SFTP_LOG_REALTIME_FILENAME\n            // needs to be defined and that the resultant log file will be capped out at self::LOG_MAX_SIZE.\n            // the earliest part of the log file is denoted by the first <<< START >>> and is not going to necessarily\n            // at the beginning of the file. Can you provide the code that gives you that error?\nAs is, phpseclib shouldn't be using mcrypt if the extension isn't loaded. Quoting https://github.com/phpseclib/phpseclib/blob/1.0.7/phpseclib/Crypt/Base.php#L1645\ncase CRYPT_ENGINE_MCRYPT:\n                return $this->cipher_name_mcrypt &&\n                       extension_loaded('mcrypt') &&\n                       in_array($this->cipher_name_mcrypt, @mcrypt_list_algorithms());\nNote extension_loaded('mcrypt').\nRemoving mcrypt will not happen. Quoting #1134 ,\n\nRemoving mcrypt is not going to happen because, deprecated tho it may be, it's still a heck of a lot faster than the pure-PHP implementation. The fact that it's being used on your system suggests that OpenSSL isn't available so mcrypt is gonna be the fastest way to do encryption in PHP.. It doesn't look like Travis CI even supports PHP 7.2 yet:\n\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/253681004. For the past few years, even with 5.6, finding systems with mcrypt even installed is rare. The PHP that apt-get installed on Ubuntu hasn't had it in years. At least not by default. So, to answer your question...  yes, it should work, because if running phpseclib without mcrypt didn't work we'd have heard about it by now.\nSample posts documenting this fact:\nhttps://askubuntu.com/questions/460837/mcrypt-extension-is-missing-in-14-04-server-for-mysql. I agree. The documentation is on github for people to make changes to if they're so inclined. But I guess people would rather make PR's to phpseclib/phpseclib than they would to phpseclib/docs. The fact that you opened this issue on phpseclib/phpseclib instead of phpseclib/docs just re-enforces this notion.\nMy thoughts: I could spend a month or two redoing the documentation completely while phpseclib languishes. But I'm not going to do that. When the master branch is getting close to being released as 3.0.0 I'll do a complete overhaul of the documentation to coincide with the release of the new version of 3.0.0.\nMy time is limited. I have a 40+h job that doesn't involve phpseclib at all and don't have the ability to do phpseclib dev full time. This means that new features I want to be released ASAP take longer than I'd like. And stopping all work on those new features so I can completely redo the documentation would delay the release of features that I already think are taking too much time to get released.. Well it's not just you lol. phpseclib/phpseclib has had 66 contributors. phpseclib/docs has had 2 contributors.\nPeople who are familiar enough with how phpseclib works to make PR's to phpseclib itself presumably would be familiar enough with phpseclib to update the docs but they don't.\nI mean, I'm grateful for all the PR's that phpseclib/phpseclib has gotten. The point I'm just trying to make is that, sure, I've been neglecting the documentation, but so have a lot of other people who probably have a good enough understanding of phpseclib to make meaningful updates to the docs.\nidk why that is but that's just the way it is none-the-less lol. The issue is with lines like this:\n---- More ----\u001b[42D                                          \u001b[42D broadcast-suppression 50\nThe ANSI escape code corresponding to \\x1B[(\\d+)D is telling the terminal to move the cursor left n lines (where n is the subpattern captured by \\d+). In this case it's telling the terminal to move the cursor left 42 lines but it's only 16 lines in so 16 - 42 = -26. It then adds 42 lines (in the form of spaces) and tells the cursor to, again, go back 42 lines., which brings us back to -26.\nAnyway https://github.com/phpseclib/phpseclib/commit/84d1628cb7734134b1ba80545b38985025942b79 should fix this.\nI could have done the if ($this->x < 0) $this->x = 0 check right before $this->tokenization[count($this->tokenization) - 1].= $source[$i]; but decided to put it where it's currently at since that's the main one that's gonna be making drastic changes to the x position. Everything else - if it even affects the x position at all - will affect it by just one line whereas this can take you back n lines.. Most of the changes look good but a few don't. I've commented on the few that don't look good.\nYour PR reveals the need for a few unit tests. In particular, for DSA / SSH2 signatures (the issues you found were legit) and for ANSI escape codes (the issues you found there were not legit).\nThe biggest issues were with the addition of break's. One of the break's you added was for the ANSI escape codes (your change does reveal the need for a unit test) and the other break you added...  altho it didn't break anything it's also unnecessary (as elaborated in the comments). Unnecessary tho it is that one, it could be argued, would be good for overall improved readability. I discuss further in the comment for that break.. I backported the SSH1 fixes to the 2.0 branch and, in writing the unit test for the DSA / SSH2 signature issues I found an additional issue that I fixed:\nhttps://github.com/phpseclib/phpseclib/commit/4a7d3d27ba553acf289316778f3d6ed0b952af8a\nThanks!. Looks like a good change. This is an issue in the 1.0 branch as well. I'll cherry-pick this commit into that branch, resolve the conflict that'll happen and will then merge back up.\nI can't do it right now - maybe this evening, however, or maybe this weekend idk depending on how my time looks.\nThanks!. I did it:\nhttps://github.com/phpseclib/phpseclib/commit/acebfe28d65a8c6ee3c3868cbb4dc64a901d771b\nThanks!. I'm not really sure what the best approach is. My enthusiasm for doing stuff like strlen_safe where it'll do an if check every time you do a string function is a bit lackluster since that's liable to slow things down a lot.\nI guess what could be done is this:\nphp\ntry {\n    require __DIR__ . '/vendor/autoload.php';\n} catch (UnexpectedValueException $e) {}\nidk. Let me think on it some more... I like it! I'm in agreement with bantu in that it'd be good to extend this to MACs and other algorithms as well.\nAmong other advantages of this is that it'd make a more accurate shim for libssh2, which lets you select the algorithms in ssh2_connect.\nOne thought I do have...  what should happen if you add an algorithm / mode that phpseclib doesn't actually support? By letting this be settable by the user that would be a possibility (whereas right now it isn't). I wonder what ssh2_connect does in that situation..\nThe only other thing I'm thinking is that you use type hinting for setEncryptionAlgorithms. I like type hinting and am doing it in the master branch but it's not being done in the 2.0 branch. It could be done in the 2.0 branch but I'm kinda thinking...  let's do it everywhere it could be done or let's not do it at all. So in that regard I think it'd just be easier to do type hinting only in the master branch.to give you a chance make these changes for the other algorithms (pretty much all the alorithms that ssh2_connect lets you select). I just made a commit on a branch in terrafrost/phpseclib that should lessen the urgency of this:\nhttps://github.com/phpseclib/phpseclib/issues/1171#issuecomment-325170715\nI still do very much like this idea and would like to see it merged but other stuff needs to be done for me to want to merge it. I also think, in-so-far as the \"invalid size\" error is concerned, this is a better solution. ie. most people who encounter the \"invalid size\" error will probably just give up and use libssh2 or do SSH via the CLI or something. phpseclib will just be written off and no effort will be made to research or understand the problem. Letting users select which algorithms they'd want to use wouldn't eliminate the need for research whereas the commit I just made would.\nAnyway, as I said in the link, I still need to merge it into 2.0 and master. I'll do that another day tho.. The changes look good to me!\nI guess I have a few things I need to do:\n\nDelete ASN1::decodeLength per https://github.com/phpseclib/phpseclib/pull/1157#pullrequestreview-54519828\nWrite a unit test for X509::setEndDate per https://github.com/phpseclib/phpseclib/pull/1157#discussion_r131526883\nWrite a unit test for X509::getRevokedCertificateExtension and make some changes in X509::getExtensions and getRevokedCertificateExtensions per https://github.com/phpseclib/phpseclib/pull/1157#discussion_r131527226\nThere's a call to $this->disconnectHepler in SSH2.php - that should be changed to $this->disconnect_helper.\n\nA few questions I have that it'd be cool if you could answer or do:\n\nWhy did you change the visibility of powModHelper from protected to public in both the PHP and BCMath engines per  https://github.com/phpseclib/phpseclib/pull/1157/commits/f314f9795f2a5c43fc680cd6fee2beaf3e192239#r131527744 and https://github.com/phpseclib/phpseclib/pull/1157/commits/6f36c49baafc8af2821c18088ebec99e4a53a62d#r131527812?\n\nThanks!. The changes  I mention that I'd do have been done here:\nhttps://github.com/terrafrost/phpseclib/tree/pre-1157-changes\nThis branch has failing unit tests that you're changes should fix. Just LMK about the powModHelper thing and then I'll merge.\nThanks!. I like it!\nI made a few in-line comments. Here are a few more general thoughts:\n\nInstead of doing phpseclib/Net/SSH2_CHANNEL_EXTENDED_DATA_TYPE_CODES.php what about doing phpseclib/Net/SSH2/CHANNEL_EXTENDED_DATA_TYPE_CODES.php.\nIt makes since for the const's in the classes to be all caps but I don't think the classes need to be all caps. eg.\nCHANNEL_EXTENDED_DATA_TYPE_CODES becomes ChannelExtendedDataTypeCodes\nTERMINAL_MODES becomes TerminalModes\nMSG becomes Messages\nDISCONNECT becomes DisconnectReasons\nCHANNEL_OPEN_FAILURE_REASONS becomes OpenFailureReasonCodes. > use blah\\blah\\SSH_OPEN;\nif ( SSH_OPEN::ADMINISTRATIVELY_PROHIBITED )\nand not\nuse blah\\blah\\SSH\\OPEN;\nif ( OPEN::ADMINISTRATIVELY_PROHIBITED )\nIn first case it looks almost like \"real\" constant.\nBut it's up to you.\n\n\n\n\n\nYah - it is cosmetic but none-the-less I prefer the second lol.\nThat said, I just want to re-iterate that I do really like the idea :) define's are so PHP4. I've moved away from them with RSA.php, BigInteger.php, etc, and will eventually work on removing them from SSH2.php, but right now my main focus is ECDSA (in particular, I'm working on ECDSA over binary fields atm). The SSH2 changes will be part of a major BC breaking refactor on SSH2 but there are a lot of things that will come before that, including a major refactor of ASN1 / X509.. > BTW, if you're going to break BC, may be it's a good idea to kick out ssh1 support?\nYah - that's the plan.. > As resume, you're refactoring a lot right now, so at this moment this patch is not relevant, but the idea is good.\n\nI'll wait till you push the new code :)\nRight?\n\nI am refactoring the master branch lots but right now my main focus is on getting ECDSA done. Honestly, I figure that could take a few months. ECDSA over prime fields seems pretty straight forward and there are lots of easy to understand reference implementations. ECDSA over binary fields otoh is more complicated. I guess I could forgo support for ECDSA over binary fields but I'm not ready to \"give up\" yet lol.\nAfter that I figure I'll completely revamp ASN1 / X509. That's liable to be another multi month long project.\nHonestly, I might not get around to revamping SSH2 this year I don't think it's realistic to expect you to be able to get back into this after taking that kind of break lol.\nI'd say: go ahead and pursue this and I'll merge it into master if you can get my suggestions implemented. If you can't (or don't want to lol) that's fine - it is a good idea and I can do it myself when the time comes for the refactor lol. I'll try to take a look at this in the next few days. Been busy with a lot of other phpseclib issues / PR's today.\nI appreciate the thoroughness of your post.\nThanks!. https://github.com/phpseclib/phpseclib/commit/5c792f6bc1fa8a5d26b43fb8200191c073637e15 should fix this.\nThanks!. This has been merged.. It's interesting SSH_MSG_NEWKEYS hasn't caused anyone an issue.\nQuoting RFC4253 \u00a7 7.3, \"Key exchange ends by each side sending an SSH_MSG_NEWKEYS message\".\nphpseclib sends SSH_MSG_NEWKEYS first.. It most likely means that the diffie-hellman key exchange encountered an error. More specifically, I suspect what it means is that the server has a buggy implementation of the symmetric key algorithm that was negotiated.\nSeeing the log files would be helpful to me.\nOne thing that might to you...\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        'arcfour256',\n        'arcfour128',\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        //'arcfour256',\n        //'arcfour128',\n\n```. #1156 was a PR someone submitted to do just that but...  well what happens if someone decides to include an algorithm that phpseclib doesn't support? Also, it'd be nice if they could extend this out to other algorithms as well (key exchange algo, hmac algorithm, compression, etc).\nI could make the changes myself but I'm holding off for the time being in the hopes that they will... Would you be able to provide me with the IP address of the server that has this problem? I don't need a username or password - logging in with a fake username would be sufficient to allow me to reproduce the problem.\nWhat I'm thinking I can do is make it so that if the packet doesn't decrypt correctly and that the selected cipher is arcfour128 or arcfour256 that it recreates the the cipher object. To test it out, however, I need to be able to connect to a server that demonstrates the problem and none of the servers I have access to (existing servers or new servers on fresh Linux installs) demonstrate it.\nThanks!. https://github.com/phpseclib/phpseclib/issues/1171#issuecomment-325170715 should fix this so that the above work around is no longer necessary.. The commit mentioned in https://github.com/phpseclib/phpseclib/issues/1171#issuecomment-325170715 has been merged into 1.0 / 2.0 / master so I'm going to go ahead and close this since the issue should now be resolved.. You'd be better off posting this as a new issue. The issue you described in your first post has been fixed and the issue you're describing now is a wholly unrelated one.\nThat said, my gut instinct is to say that this is just another bug in your SFTP server.\nAnyway, I could try to reproduce the problem myself but suspect that would be very difficult. Maybe a Vagrantfile could be developed that'd enable anyone to reproduce the problem but again, that could be quite difficult. Like for the initial problem you had...  developing a Vagrantfile would require downloading an old version of OpenSSL and compiling it. OpenSSL's own dependencies might have developed incompatibilities so you might need to download old versions of it's dependencies. Then you'd have to download OpenSSH and compile that against the old version of OpenSSL. And it seems quite possible that not just any version of OpenSSH would do - that you'd need to download a historical version of that as well.\nAll in all it'd be a PITA and I suspect a Vagrantfile for ProFTPd that demonstrates the problem could be a similar PITA as well.\nThe easiest approach for me would be if you gave me an account on the server to connect to. You could email this info to terrafrost@php.net.\nIn lieu of that seeing the SSH logs might help. You can get them by doing define('NET_SSH2_LOGGING', 2); and then echo $ssh->getLog(); after the problem occurs.\nWhatever you do, if you would make a reply please make a new post instead so it can show up as being open instead of this one, which I've closed as being resolved.\nThanks!. Nice find w.r.t. isValidEngine. That said, setPreferredEngine takes strings. isValidEngine ought to as well. Quoting #1143,\n\nI did, however, change the parameters setPreferredEngine accepts. eg. previously, if you wanted to set the preferredengine to mcrypt you'd have to do this: setPreferredEngine(SymmetricCipher::ENGINE_MCRYPT). I've made it so that you can do this instead: setPreferredEngine('mcrypt'). This is more consistent with BigInteger's approach:\nhttps://github.com/terrafrost/phpseclib/commit/4171262b9ee6f905eb2bfc4a942c5f44483efdf8\n\nI'll go ahead and merge #1157, undoing the visibility change you did for powModHelper.\nThanks!. Prior to your find there were 599 skipped unit tests:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/262087000\nWith your changes there were 206 skipped tests:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/261814432\nWith my alternative approach there are also 206 skipped tests:\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/262098860\nAnyway, it was a good find and I appreciate it - thank you!!. I got a merge conflict when I tried to merge this and #1156 (since this one doesn't do $encryption_algorithms). If you could go ahead and merge them and resolve the conflict that'd be cool :)\nI noticed you defined getMACAlgorithms, getCompressedAlgorithms and getEncryptionAlgorithms but not getServerHostKeyAlgorithm or getKexAlgorithms. I guess the reason that you didn't define them is because they're already defined but the way getServerHostKeyAlgorithm and getKexAlgorithms currently work there could be some confusion I think. The latter two methods return the servers preferences whereas the former three methods return the clients preferences. What if we add a second parameter to the first three? One that takes either SSH2::CLIENT_TO_SERVER (1) or SSH2::SERVER_TO_CLIENT (2) as parameters? In 2.0, to preserve BC, we'd still want getEncryptionAlgorithmsClient2Server, for BC, even tho this proposed change would make that method redundant, but we could remove the *Client2Server and *Server2Client methods in the master branch.\nI guess to achieve a perfect shim for ssh2_connect we'd need to be able to set the server_to_client algorithms independently from the client_to_server ones. That said, I do think it makes more sense if they're not defined independently - it's the more common use-case I imagine. PuTTY, for example, doesn't let you select these algorithms independently. BUT... I think we can kinda satisfy both \"requirements\" if we add a second optional parameter to setEncryptionAlgorithms, setMACAlgorithms and setCompressedAlgorithms. This second parameter would be either SSH2::CLIENT_TO_SERVER (1) or SSH2::SERVER_TO_CLIENT (2). If the parameter is not explicitly set it's implicitly SSH2::CLIENT_TO_SERVER | SSH2::SERVER_TO_CLIENT (3).\nOtherwise it's looking like an awesome commit - I'm looking forward to getting these features into phpseclib and I appreciate your patience with me :) If you don't want to do the changes I've proposed I can probably do them myself but it'd be cool if you could do them :). I intend to get these merged in. If the original author won't make the changes I suggested I will as time permits. If you would like faster progress be made on this, however, do feel free to pay.\nSome food for thought:\n\nI am not paid to work on this during office hours so all my contributions are done in my free time\nI am on vacation in Nebraska right now to see a total solar eclipse.\nIf you want to pay, I can prioritize this higher than some of the other already outstanding / unresolved phpseclib issues and my own personal commitments, provide an ETA, give weekly or daily status updates, contingent upon how much you pay, etc.\nGetting the changes merged in and having a release made are two separate things. No release has been made since this PR was originally proposed. Whether or not a commit, alone, would be sufficient for your purposes would depend on your composer.json file (I assume that's how you installed phpseclib).. @metaclassing - Oh nice! I'm in Grand Island, NE. Flight leaves at 6am tomorrow. I've never caught a flight that early before :\\\n\nOmaha isn't in the path of totality but didja drive to somewhere that was? It was pretty cool!. I guess you're using a 32-bit system. This doesn't appear to be an issue on a 64-bit system. Or, more specifically, a build of PHP where PHP_INT_SIZE is 8.\nThat said, phpseclib is supposed to work on 32-bit builds. I'll see if I can't get this working with DateTime or nesbot/carbon or some such.. Sorry for the delay.\nAnyway, I made a branch off of the 2.0 branch that utilizes DateTime instead of unix time:\nhttps://github.com/terrafrost/phpseclib/tree/datetime-2.0\nDoing it for 1.0 is do'able but will be trickier. phpseclib 1.0 is, syntactically, PHP4 compatible. It uses PHP5 functions that can be emulated by existant shims but if you do php -l filename.php on anything in phpseclib 1.0 it should pass (save for Net/SFTP/Stream.php).\nDateTime was only introduced in PHP 5.2 (phpseclib 2.0, due to it's use of namespaces, requires PHP 5.3). What I figure I'll do for that is have phpseclib 1.0 use both. It'll do DateTime if it exists and if not it'll use unix time, despite it's flaws.\nedit: surprisingly, DateTime::createFromFormat is syntactically valid PHP even in PHP4. PHP4 doesn't support static methods but it does support the scope resolution operator. So where PHP5 tries to call createFromFormat statically PHP4 tries to call it like it would parent::funcName().\nPer that I'm not actually sure it'd be possible to create an OOP DateTime shim for PHP4. Maybe a procedural DateTime shim could be created (eg. date_create_from_format vs DateTime::createFromFormat) but it's all wasted effort anyway lol. If you're using PHP4 on a 32-bit system you can either live with the \"year 2038 problem\" or upgrade. Or pay me money to attempt to write a shim lol.. Sorry for the delay.\nAnyway, this should be fixed in the 1.0, 2.0 and master branches now:\nhttps://github.com/phpseclib/phpseclib/commit/09c17b1a3175ecd75f58bb5d2b89bac56dc2cadf. > I can provide debug packets if you can detail how you'd like them,\nThe SSH logs would be most helpful. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top of your PHP script and then echo $ssh->getLog() after you encounter the error.. I apologize for the delay - between traveling to see the August 21 total solar eclipse and work I've kinda fallen behind on stuff. I'll try to take a look at this this evening.\nThanks!. This appears to be a duplicate of https://github.com/phpseclib/phpseclib/issues/121#issuecomment-284946804 ... Does https://github.com/terrafrost/phpseclib/commit/a3325d102ec62df686b1ec8c5f27247f08a6e10d / https://github.com/terrafrost/phpseclib/tree/ssh2-fix-multi-channel-1.0 fix the issue for you?. FWIW I merged the above commit into the 2.0 and master branches and it's now a part of phpseclib/phpseclib.. Does it work with PuTTY? It's not immediately obvious upon quickly glancing at PuTTY's source.\nTechnically it is malformed. Quoting https://tools.ietf.org/html/rfc4253#section-5.1 ,\n\nServer implementations MAY support a configurable compatibility flag\n   that enables compatibility with old versions.  When this flag is on,\n   the server SHOULD identify its 'protoversion' as \"1.99\".  Clients\n   using protocol 2.0 MUST be able to identify this as identical to\n   \"2.0\".\n\nI'll try to take a look in more depth this evening.. It seems to work with PuTTY. To test I did sudo nc -l 22 on my Linux and then used PuTTY to connect. PuTTY doesn't send the identification string first so I typed in SSH-2.99-zzzz in my Linux box and hit enter. PuTTY responded with SSH-2.0-PuTTY-Release_0.63 and then sent the initial kex packet. So it seems like PuTTY likes it.\nFrom https://github.com/github/putty/blob/2d0b2e97d00c5ca08a6cbd4a7d724b41e1222514/ssh.c#L3170 \nc\n    /* Anything greater or equal to \"1.99\" means protocol 2 is supported. */\n    s->proto2 = ssh_versioncmp(s->version, \"1.99\") >= 0;\nI've gone ahead and made phpseclib behave similarly:\nhttps://github.com/phpseclib/phpseclib/commit/9cbfd23cb65796e048558054d9b40f959ba7e4f8\nThanks!. > when phpseclib attempts to connect, then it only supports weak ciphers, which their server does not support\nThe server administrator is an idiot, serving up FUD.\nphpseclib supports ECDH if you have libsodium installed. It doesn't currently support chacha20-poly1305@openssh.com but then again your server doesn't either.\nThe best symmetric cipher that phpseclib supports is AES and it supports it in every mode save for GCM (just as with PuTTY) and, guess what, the server supports the AES algorithms too.\nphpseclib does support \"weak\" ciphers like arcfour256 but, then again, so does the server. In fact, there-in probably lies the problem.\nAnyway, try this:\n```\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        'arcfour256',\n        'arcfour128',\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $encryption_algorithms = array(\n        // from <http://tools.ietf.org/html/rfc4345#section-4>:\n        //'arcfour256',\n        //'arcfour128',\n\n```\nie. the server says it supports arcfour256 and arcfour128 but it really doesn't. What it supports is a buggy implementation of those algorithms.. > Would it be an advantage to phpseclib to retry with something else if it encounters this problem? Even if I exposed the encryption algorithm settings to the end-user, that would still be a terrible user experience, to have to diagnose the problem and then tweak something that technically challenging.\nThat's not how it works. The algorithm is determined through the key exchange process. If subsequent packets do not decrypt correctly the connection just stops working. You can't do a new key exchange either because subsequent key exchanges are supposed to be encrypted.\n\nFor what it's worth - openssh works (`sftp -v -v -oCiphers='arcfour128') (arcfour256 also). Perhaps the server is only tested against openssh.\n\nProbably. But it's also worth mentioning that OpenSSH doesn't always behave consistently. phpseclib often is able to connect to OpenSSH servers using arcfour128 / arcfour256 without issue but often times it's also not worth it.\n\nSo, I suppose I'll tell the end-user (of my code which uses phpseclib) to tell the server admin (of the SFTP server he's trying to access) that his implementation of those algorithms is buggy?\n\nUnless he did his own home grown implementation then it seems unlikely that it's his implementation. \nFWIW the reason phpseclib has historically favored arcfour128 / arcfour256 is for speed purposes. But when OpenSSL or mcrypt are being used speed is less of a consideration, I will concede... Would you be able to provide me with the IP address of the server that has this problem? I don't need a username or password - logging in with a fake username would be sufficient to allow me to reproduce the problem.\nWhat I'm thinking I can do is make it so that if the packet doesn't decrypt correctly and that the selected cipher is arcfour128 or arcfour256 that it recreates the the cipher object. To test it out, however, I need to be able to connect to a server that demonstrates the problem and none of the servers I have access to (existing servers or new servers on fresh Linux installs) demonstrate it.\nThanks!. So the issue is actually a bug in SSH servers built against sufficiently old versions of OpenSSL:\nhttps://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/ssh2-aesctr-openssh.html\nhttps://bugzilla.mindrot.org/show_bug.cgi?id=1291\nThe workaround I chose to implement disconnects when the \"invalid size\" error would be output (and when the login has yet to be completed and the algorithm is one of the affected algorithms, etc) and re-connects using a shorter key.\nHere's the commit:\nhttps://github.com/terrafrost/phpseclib/commit/e5b4eef91f8dd1738cdf85d70cec68d674e7112c\nI'll need to merge it into 2.0 and master at some point.. The fix has been merged. As such, I'm gonna go ahead and close this.. > Are there any plans to tag a new release that includes this fix soon in the 2.0 version (i.e. a 2.0.7 version)? I ran into this issue suddenly over the weekend with an external party, and the fix works.\nI'll try to do it in early October. I'm traveling in Europe right now and don't want to enjoy my trip as opposed to getting too wrapped up in phpseclib stuff lol. Here's the ASN1 decoding of that:\n0:d=0  hl=3 l= 135 cons: SEQUENCE\n    3:d=1  hl=2 l=   1 prim:  INTEGER           :00\n    6:d=1  hl=2 l=  19 cons:  SEQUENCE\n    8:d=2  hl=2 l=   7 prim:   OBJECT            :X9-62_id-ecPublicKey\n   17:d=2  hl=2 l=   8 prim:   OBJECT            :X9-62_prime256v1\n   27:d=1  hl=2 l= 109 prim:  OCTET STRING\nie. that's not a DSA key - it's an ECDSA key. I am working on ECDSA support but work on that is ongoing.. > Thanks for your response. Can you let me know when ECDSA support will be available.\nNo clue. I haven't worked on it for weeks and it's honestly pissing me off a bit. I'm spending so much time providing support for the 1.0 and 2.0 versions that I am having a great deal of difficulty finding time to work on ECDSA.\nIt'd be easier if I was working on phpseclib as my full time job but I'm not. phpseclib has provided me with some limited amount of money but not enough to live off.\nTLDR I wouldn't count on ECDSA being done this year.. You're gonna need to provide a little bit more of an explanation for me to merge this in.\nI'm also not going to merge a PR with failing unit tests.... What would be really helpful are server logs for when it does happen. As is it's not immediately clear to me how this could even happen.\nIn exec there's this:\n```php\n        $this->channel_status[self::CHANNEL_EXEC] = NET_SSH2_MSG_CHANNEL_OPEN;\n    $response = $this->_get_channel_packet(self::CHANNEL_EXEC);\n\n```\nAnd then later, in _get_channel_packet, this:\nphp\n                switch ($this->channel_status[$channel]) {\n                    case NET_SSH2_MSG_CHANNEL_OPEN:\n                        switch ($type) {\n                            case NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION:\n...\n                                $this->server_channels[$channel] = $server_channel;\n...\n                            default:\n                                user_error('Unable to open channel');\n                                return $this->_disconnect(NET_SSH2_DISCONNECT_BY_APPLICATION);\n99% of the time when _get_channel_packet has an issue it returns false. The only two exceptions to this appear to be as follows:\nphp\n            if ($client_channel == -1 && $response === true) {\n                return true;\n            }\n            if (!strlen($response)) {\n                return '';\n            }\nThe first one wouldn't apply since self::CHANNEL_EXEC isn't -1. As for the !strlen($response)...  any packet that might have a zero length response should be filtered away in _filter, which is called at the end of _get_binary_packet.\nAnyway, as my analysis shows, it's not clear how this is happening, so the server logs would help.\n\nMaybe isset($this->server_channels[self::CHANNEL_EXEC]) should be checked.\n\nThat feels like that would just be sweeping the problem under the rug and not really fixing it. Kinda like putting the error suppression on every function call or putting an entire class in a giant try / catch (Exception $e) block.. TLDR the server logs would help. They can be obtained by doing define('NET_SSH2_LOGGING', 2); at the top of the file and then echo $ssh->getLog(); after you encounter the issue.. @royduin - what version of phpseclib are you using? What's on line 2766 likely varies from version to version.\nThanks!. @royduin - can you give me an overview of what your script does? Like does your script do just one $ssh->exec('...'); and that's it or are you uploading stuff via SFTP or what?. @royduin - I'd say enable logging and then apply this change:\n```php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\nin exec()\n\n    $packet = pack(\n        'CNNa*CNa*',\n        NET_SSH2_MSG_CHANNEL_REQUEST,\n        $this->server_channels[self::CHANNEL_EXEC],\n        strlen('exec'),\n        'exec',\n        1,\n        strlen($command),\n        $command\n    );\n\n\n-----[ BEFORE, ADD ]-----------------------------------\n\nfile_put_contents('log-' . date('Ymd') . '-' . uniqid() . '.log', $this->getLog());\n\n```\nOnce you have that send me the log files as you get them.\nThanks!. I'm not sure that's gonna work since that's not an exception you're getting - it's an error. Per http://php.net/manual/en/language.errors.php7.php PHP did change how errors work in PHP 7 but in my own testing (on PHP 7.2.1) you still can't catch stuff like that. Example:\n```php\n<?php\nerror_reporting(E_ALL);\ntry {\n    echo $a[4];\n} catch (Exception $e) {\n    echo \"caught\\n\";\n}\ntry {\n    echo $a[4];\n} catch (Throwable $e) {\n    echo \"caught\\n\";\n}\necho \"all done!\\n\";\n```\nNeither Exception nor Throwable result in the error being caught.\nUnless you're using something like set_error_handler I'm not sure it's gonna work the way you're wanting... https://github.com/phpseclib/phpseclib/issues/153#issuecomment-25711743 is another instance where, w.r.t. SCP, a delay made it so things worked.\nOverall it's stuff like this that makes me dislike SCP as a protocol and is why it's going to be removed from phpseclib from the master / 3.0 branch at some point.\nAnyway, like I said in that other comment, I don't like the idea of adding a sleep or usleep. Maybe there's a packet I can periodically request that'll require the server respond or some such. I'll try to think of something.. https://github.com/phpseclib/phpseclib/commit/deb485c0e1e32de4408d3d5e69ab64366abc7ff8 seemed to fix the issue for me.. Odds are that the string you're using to identify your prompt are incorrect.\nMaybe there's ANSI in the prompt that you're not accounting for. If your prompt (for example) has colors in it then that's probably ANSI.\nMaybe you're actually using username@username:$ as your prompt instead of realizing that it's a placeholder.\nIn order to know for sure I'd need to see two things: your PHP code and your SSH logs. You can get your SSH logs by doing define('NET_SSH2_LOGGING', 2); at the top and echo $ssh->getLog(); after your first prompt.\nAs for why it'd be taking so long when an invalid prompt is used...  it's waiting for 10s until it does see the prompt and then returns everything that it did see when it does get the prompt. I suppose one thing you could do is lower the timeout (eg. $ssh->setTimeout(5)) but the best solution is to just make it use the correct string for the prompt.. Your prompt appears to be V1_spreod03%. I'm gathering that from this packet:\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0s)\n00000000  00:00:00:01:00:00:00:0d:56:31:5f:73:70:72:65:6f  ........V1_spreo\n00000010  64:30:33:25:20                                   d03%\nThe way I usually figure out is...  I usually do $ssh->setTimeout(3); echo $ssh->read();. It'll usually be the last line in the output.\nIf you have a bunch of computers with the V1_spreod03% prompt convention you could do a regular expression like #V1_\\w+%#, with the caveat that the more generic you make the parameter the more likely you are to encounter false positives. Like if you did tail -f filename.ext on a file that had V1_spread03% at the top it'd stop on that and not the actual prompt.\nAs for using setTimeout(1)...  you can try it out but in my experience a sufficiently short timeout is liable to time out before you actually get the prompt. setTimeout(0) means that there is no timeout - that requests will block until either PHP times out, the connection times out or it sees the expected output.\n\nHow do I know what my default bash prompt?\n\nThat's more of a Linux question than it is an SSH / phpseclib question. https://linuxconfig.org/bash-prompt-basics provides a good discussion however.. Not really. Some of the problem is that $ssh->read() doesn't have to be used in the context of a shell. You could use it with vim, for example. You send \"i\" to insert text and then \"asdf\" to insert the string \"asdf\" into the file you're editing and then you send \"[esc]\". Then you send \":w\\n\". At this point you may want to wait for vim to say whether or not it saved the file or some such and conditionally branch off from there.\nIn an interactive shell Linux can send you data even tho you're in a prompt. \"The system is going down for system halt NOW!\" is probably the best example of this but, more generally, there's wall that can do it as well. Just because you legit encounter the prompt (and by legit encounter I mean it's not being printed out via cat or some such) doesn't mean that the server won't continue to send data.\nOverall, read() provides a lot of versatility - probably more than most people ever use. Unfortunately, I'm not really sure what the alternative is.\nI guess the best bet for you might be to simply do setTimeout(3) or some such. You could try lower timeout's but, in my experience, 3 seems to the best length.. Looks like you posted this on stackoverflow:\nhttps://stackoverflow.com/questions/46113253/phpseclib-sftp-max-simultany-connexion\nThe responses you've gotten look valid. What has led you to conclude that phpseclib is opening more than one connection?. Since phpseclib does not open multiple connections, I would be most interested to know why you think that it is.\nI mean, if you manually create multiple phpseclib instances yourself that's one thing but that's not phpseclib creating the multiple connections - that's you.\nphpseclib may make use of multiple channels depending on what you're doing but multiple channels and multiple connections imply to me very different things.. This has been merged - thanks!. For my part...  I'm currently traveling in Paris, France, and will be in Italy for 10-11 days after Paris so I may not be as prompt as one would like during my travels.. This change makes the libsodium checks more consistent.\nOne part of phpseclib already does this and has since Feb 11, 2016:\nhttps://github.com/phpseclib/phpseclib/commit/fc4599985ab7617b6565b0de53cf93299192e941#diff-82a5983a6daace4acbcc65edf2dfb605\nThat check and this check have been done differently since the initial commit that added ECDH support:\nhttps://github.com/phpseclib/phpseclib/commit/58f8affcad26c208cadf1b40221e90b1c54eecf0\nI suppose that's neither here nor there tho. I cherry picked this commit into the 2.0 branch and merged the 2.0 branch into the master branch.\nThanks!. @Sxderp - nice memory! That's def the position I've taken for the 1.0 and 2.0 branches but for the master branch I've caved a bit and have succumbed to more commonly held notions of best practices lol.\nAnyway, the commit looks good and has been merged.\nThanks!. I was able to get the PHP signature to match the C# one by doing this:\n```php\n\n-----[ FIND ]------------------------------------------\n\n$md5 = md5($gb2312, true);\n$base64 = base64_encode($md5);\n\n-----[ REPLACE WITH ]----------------------------------\n\n$base64 = base64_encode($gb2312);\n```\neg. your PHP code is essentially double md5 encoding the data you're trying to sign whereas the C# code you're using isn't. It's like the C# code could let you create a signature that's signed by a different hash than it actually is whereas the PHP code doesn't. Or maybe the C# code throws an exception when you try to do that idk.. If you open up the keys with Windows Notepad (as I often do lol) if the keys end with \\r there are no line breaks. \\r\\n solves this whilst not causing incompatibilities.. I use phpseclib generated keys with Linux all the time. But personal anecdotes aside, the fact that no one has commented on this in the ten years phpseclib has been around really makes it seem like it's not a significant issue.\nThat said, I don't have a problem making it user configurable. Maybe I could just have it use PHP_EOL or something when it's available. Would you still want it to be user configurable if I went with the PHP_EOL route?. Nice find! I'll try to fix this as time permits. I'm traveling Europe right now (just a few more days left on this trip) so I'm a bit distracted with that but I'll try to remember to fix this after I'm done.\nThanks!. Should be working better now:\nhttps://github.com/phpseclib/phpseclib/commit/af6048b48e25187e549136195a3df67571b22fd0\nThanks!. I don't really see this as an issue.\nWith RSA a private key can technically have just a modulus and an exponent, which pretty much makes it indistinguishable from a public key. Usually RSA private keys include CRT parameters to speed decryption / signing up but they don't have to.\nphpseclib tries to be a bit error tolerant as well. Like OpenSSL will error out if the base64-encoded lines aren't 64 bytes long whereas phpseclib won't. So even if your key says it's a public key in the ==== BEGIN PUBLIC KEY ==== thing it can treat the public key as a private key.\nNow, it's setup so that if you do echo $rsa that'll echo the key out with the public key label thing but that's different than preventing you from signing with a public key.\nDoes OpenSSL let you sign with a public key? idk. I'd have to try it out. Maybe I can in a few days but right now I'm a few days from finishing up a multi week Europe tourism trip and I'd rather spend my time doing that than experimenting with phpseclib / OpenSSL.. I'll update it for the master branch.\nThe master branch, for symmetric encryption, is already much less forgiving. Whereas the 1.0 / 2.0 branches null pad keys, IV's and plaintext's (when not in a stream cipher mode like CTR, OFB, etc) that are too short, the master branch will throw an exception. With the master branch the paradigm is \"if there's any indication that you don't know what you're doing w.r.t. crypto primitives you'll get an exception\". The 1.0 / 2.0 behavior was inspired by mcrypt but you motivated me to change it for the master branch. This change would be in that same vein.\nI'm concerned about doing it for the 1.0 / 2.0 branch since it seems like that could be a BC break. I mean I guess one thing I could do for 1.0 / 2.0 is...  do it and if people complain than I could just quickly release a new version that fixes the BC break. idk.. I had hoped to do this this weekend but this weekend has wound up being pretty shitty so maybe early this coming week idk. I appreciate the feedback!\nAnyway, it's been updated:\nhttps://github.com/phpseclib/phpseclib/commit/55384afdacd2f69fff6b1593a9961e46788b7dd5\nFound a few unrelated issues (master branch only) as well that I fixed.\nThanks!. Looks like it's working to me. My guess: sourceforge.net had a temporary outage.. I think sourceforge.net is just acting up today. I think this is causing intermittent issues with the PEAR channel as well:\nhttps://github.com/phpseclib/phpseclib/issues/1188. I think sourceforge.net is just being crappy.\nI did pear install phpseclib/Crypt_RSA and I got different responses each time:\n$ pear install phpseclib/Crypt_RSA\nPackage \"Math_BigInteger\" Version \"1.0.7\" does not have REST dependency informat\nConnection to `phpseclib.sourceforge.net:80' failed: Connection timed out\nConnection to `phpseclib.sourceforge.net:80' failed: Connection timed out\nphpseclib/Crypt_RSA requires package \"phpseclib/Math_BigInteger\" (version >= 0.3\nphpseclib/Crypt_RSA requires package \"phpseclib/Crypt_Random\" (version >= 0.3.0)\nphpseclib/Crypt_RSA requires package \"phpseclib/Crypt_Hash\" (version >= 0.3.0)\nNo valid packages found\ninstall failed\n$ pear install phpseclib/Crypt_RSA\nPackage \"Crypt_TripleDES\" does not have REST info xml available\nPackage \"phpseclib.sourceforge.net/Crypt_Random\" dependency \"phpseclib.sourceforge.net/Crypt_RC4\" has no releases\nDid not download optional dependencies: phpseclib/Crypt_AES, phpseclib/Crypt_TripleDES, phpseclib/Crypt_DES, phpseclib/Crypt_RC4, use --alldeps to download automatically\nDid not download optional dependencies: phpseclib/Math_BigInteger, use --alldeps to download automatically\nphpseclib/Math_BigInteger can optionally use PHP extension \"bcmath\"\nphpseclib/Math_BigInteger can optionally use PHP extension \"gmp\"\nphpseclib/Crypt_Random can optionally use package \"phpseclib/Crypt_AES\" (version >= 0.2.1)\nphpseclib/Crypt_Random can optionally use package \"phpseclib/Crypt_TripleDES\" (version >= 0.2.1)\nphpseclib/Crypt_Random can optionally use package \"phpseclib/Crypt_DES\" (version >= 0.2.1)\nphpseclib/Crypt_Random can optionally use package \"phpseclib/Crypt_RC4\" (version >= 0.2.1)\nphpseclib/Crypt_Random can optionally use PHP extension \"mcrypt\"\nphpseclib/Crypt_Hash can optionally use PHP extension \"mhash\"\ndownloading Crypt_RSA-1.0.7.tgz ...\nStarting to download Crypt_RSA-1.0.7.tgz (22,308 bytes)\n........done: 22,308 bytes\nCould not download from \"http://phpseclib.sourceforge.net//get/Math_BigInteger-1.0.7.tgz\", cannot download \"phpseclib/Math_BigInteger\" (Connection to `phpseclib.sourceforge.net:80' failed: Connection timed out)\nError: cannot download \"phpseclib/Math_BigInteger\"\ndownloading Crypt_Random-1.0.7.tgz ...\nStarting to download Crypt_Random-1.0.7.tgz (5,782 bytes)\n...done: 5,782 bytes\ndownloading Crypt_Hash-1.0.7.tgz ...\nStarting to download Crypt_Hash-1.0.7.tgz (8,784 bytes)\n...done: 8,784 bytes\nphpseclib/Crypt_RSA requires package \"phpseclib/Math_BigInteger\" (version >= 0.3.0)\ninstall ok: channel://phpseclib.sourceforge.net/Crypt_Random-1.0.7\ninstall ok: channel://phpseclib.sourceforge.net/Crypt_Hash-1.0.7\nI've also gotten reports of the whole of phpseclib.sourceforge.net being down:\nhttps://github.com/phpseclib/phpseclib/issues/1187\nI'd say just keep trying it. Hopefully sourceforge.net will sort their problems out soon!. Could relate to the cipher's that are being used and what extensions you have available locally (eg. mcrypt, OpenSSL, bcmath, gmp, etc). Could you get me the server logs? You can get them by doing define('NET_SSH2_LOGGING', 2); and then echo $sftp->getLog(); afterwards. Maybe do that for a 100kb file or something.. Closed due to inactivity.. Good \"catch\" lol.\nIt looks like setEngine already deals with this situation - just not the constructor. Here's what setEngine does:\nphp\n        foreach ($modexps as $modexp) {\n            try {\n                $fqmain::setModExpEngine($modexp);\n                $found = true;\n                break;\n            } catch (\\Exception $e) {\n            }\n        }\nYou're doing a different approach for the constructor. I'm ok with either approach but I think the approaches ought to be consistent.\nI went ahead and made another commit to make the catch behavior consistent by utilizing the existing setEngine approach but if you think the approach you used make a PR and I'll merge it! Like I said, I'm ok with either! My choosing the existing approach was arbitrary lol.. Seems like this could be the same thing as #1171. If so then try the latest git version of phpseclib. The 1.0 branch.. Closed due to inactivity.. I'll try to review this and your other commit this weekend.\nThanks!. So there's one test I want to run on this but I need to be getting to work lol. I'll try to get this done this evening - thanks!. Merged!\nI kinda wonder if the motivation behind this PR was to get it in https://github.com/phpseclib/mcrypt_compat , however, that uses phpseclib 2.0 - not phpseclib master. I could backport the changes you did from the master branch to the 2.0 branch but it'd be cool if you did that if that's what you were wanting :)\nAs far as using the master branch with https://github.com/phpseclib/mcrypt_compat ...  the master branch has an unstable API atm. When the API becomes finalized the 3.0 branch will be created off of it. At that point, creating a 2.0 branch of mcrypt_compat would probably be appropriate. The 2.0 version of mcrypt_compat would be more complicated as the master branch is less forgiving than the 2.0 branch. In the 2.0 branch if you provide a key that's too short phpseclib null pads the key to the correct length, which is what mcrypt does. But in the past year or two there's been a movement in the PHP community (led primarily by a guy named sarciszewski) to make cryptographic primitives such as these less user friendly to discourage sub optimal crypto. eg. if you want to take full advantage of the security AES or whatever has to offer you should be using a key of the proper length and if you're using a password for a key you should be using setPassword (algorithm choice not withstanding). So to make mcrypt_compat work with what'll eventually become the 3.0 branch we'd need to implement null padding and stuff like that in it.. > But I would rather wish I can use constants integer value like before.\nHow come? I mean, I guess I could add it as some undocumented feature but idk I like the strings better lol.\nLike what if you're doing a switch statement? eg.\ncase '3des-cbc':\n    $cipher = new TripleDES(TripleDES::MODE_CBC);\n    break;\ncase 'aes128-cbc':\n    $cipher = new AES(AES::MODE_CBC);\n    break;\nidk I just think it looks cleaner as strings. And I guess you could do SymmetricKey::MODE_CBC instead of TripleDES::MODE_CBC but idk - it just seems long and verbose lol.\nI guess I'm not opposed to it but if you do it add a unit test because that's not the main way I'll be using it internally and as such the possibility that things might get broken with a subsequent commit would be higher.. phpseclib will close the SSH connection if the destructor is called. If the tab were closed the PHP process would probably end, which would result in the destructor being called, so yah, the ssh connection should close and the command should end.\nI guess ultimately it depends on how you have PHP configured. You could do ps aux | grep php I guess if you had doubts that PHP processes weren't ending but idk that that'd always work (eg. mod_php vs CGI, idk).. A few things.\nFirst, you don't need to do $ssh->enablePTY() with $ssh->write(). $ssh->enablePTY) lets $ssh->exec() use a PTY, after which you'd need to use $ssh->read().\n\nI guess the read() function waits for the write() function to finish, but because tail -f never finishes, I do not get any output.\n\nThat is incorrect. What you do need to do, however, is wait for the prompt. Until the shell presents the prompt sending commands will likely not work.. Do $ssh->read('[prompt]'); before you do $ssh->write(\"$command\\n\");. [prompt] is a placeholder. It could be that you're not waiting for the right prompt.\nAnother possibility: there are invisible characters you're not seeing in the prompt. ANSI escape codes for example. Maybe your prompt has color in it and you're waiting for an uncolored string.\nOne thing you could do to figure out what the prompt is...  do $ssh->setTimeout(3); echo $ssh->read();. Or maybe bin2hex($ssh->read()).\nAnother possibility might be to do something like this:\nphp\n$ssh->setTimeout(1);\n$ssh->read();\n$ssh->write(\"command\\n\");\necho $ssh->read();\nidk what the exact timeout would need to be.. >> One thing you could do to figure out what the prompt is... do $ssh->setTimeout(3); echo $ssh->read();. Or maybe bin2hex($ssh->read()).\n\nBoth things output nothing.\n\nI have no idea what you're connecting to but the only way that would be the case (assuming you're not doing something funky) is if (1) there is no prompt or (2) it's taking the prompt more than 3 seconds to appear.\nI mean, I suppose you could have vim in your .bashrc file or something. That'd certainly cause there not to be a prompt but I'd also call that funky.\nAnyway, let's try this: get me your log files. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog() after the $ssh->read() or whatever.. Closed due to inactivity.. I'll make a release this weekend.\nThanks!. 1.0.8 and 2.0.7 have been released!. I'll try to take a look in the next few days.\nThanks!. I went ahead and fixed the issues that GrahamCampbell found. There were multiple instances of each issue and those multiple instances should be fixed as well.\nThe one thing I didn't change was the removal of the @throws thing. I'm not an expert on PHPDoc and I'll give you the benefit of the doubt on that one!. The commit where I fixed the issues:\nhttps://github.com/phpseclib/phpseclib/commit/ec579bd9ed016fad7c417e5c35b303949e3d9555. I see this was posted twice. Let's continue the discussion in this one since it's a new issue :)\nAnyway, quoting my response to your other comment:\n\nWhat version of phpseclib are you using? The cache'd Google thing is from 2015. phpseclib has had quite a few releases since then.\nAlso, any particular reason why you can't post your own log files? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog();.. From the logs:\n\n```\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0006, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0311, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:00:10:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:09:73:75:62:73:79:73:74:65  ........subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n<- NET_SSH2_MSG_CHANNEL_EXTENDED_DATA (since last: 0.0317, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:01:00:00:00:23:57:69:6c:6c  ...........#Will\n00000010  6b:6f:6d:6d:65:6e:20:61:75:66:20:64:65:6d:20:49  kommen auf dem I\n00000020  6e:66:70:6f:72:74:2d:53:65:72:76:65:72:0d:0a     nfport-Server..\n```\nI'll decode what's going on here for you.\nphpseclib requests a session channel be opened. It says it'll be listening on channel 00:00:01:00.\nThe server responds by saying that it has opened the channel and by saying that it'll be listening on channel 00:00:00:00.\nphpseclib requests an SFTP channel. It says it wants a reply. We know that by decoding the packet thusly:\n```\n   All channel-specific requests use the following format.\n  byte      SSH_MSG_CHANNEL_REQUEST\n  uint32    recipient channel\n  string    request type in US-ASCII characters only\n  boolean   want reply\n  ....      type-specific data follows\n\n```\n00:00:00:00 is the recipient channel - the channel that the server is listening on. The string is subsystem. The first four bytes represent the string length and the next 9 bytes are the request type (subsystem). The byte after that is 01. \"want reply\" is TRUE.\nQuoting https://tools.ietf.org/html/rfc4254#section-5.4 :\nIf 'want reply' is FALSE, no response will be sent to the request.\n   Otherwise, the recipient responds with either\n   SSH_MSG_CHANNEL_SUCCESS, SSH_MSG_CHANNEL_FAILURE, or request-specific\n   continuation messages.  If the request is not recognized or is not\n   supported for the channel, SSH_MSG_CHANNEL_FAILURE is returned.\nSSH_MSG_CHANNEL_EXTENDED_DATA is neither SSH_MSG_CHANNEL_SUCCESS or SSH_MSG_CHANNEL_FAILURE.\nHere's the format of NET_SSH2_MSG_CHANNEL_EXTENDED_DATA:\nbyte      SSH_MSG_CHANNEL_EXTENDED_DATA\n      uint32    recipient channel\n      uint32    data_type_code\n      string    data\n00:00:01:00 is the channel that message is being sent to. It's the channel that phpseclib is expecting to receive the response on. If it were for another channel it could be ignored but it's not for another channel.\nThe data_type_code is 00:00:00:01. \nQuoting https://tools.ietf.org/html/rfc4254#page-8 :\n```\n   Currently, only the following type is defined.  Note that the value\n   for the 'data_type_code' is given in decimal format for readability,\n   but the values are actually uint32 values.\n           Symbolic name                  data_type_code\n           -------------                  --------------\n         SSH_EXTENDED_DATA_STDERR               1\n\n```\nSo that's stderr data. The server is responding with an error so closing the channel seems reasonable. And the error message? Willkommen auf dem Infport-Server. That's German for \"Welcome to Infport-Server\". That's not data worthy of being on stderr.\nBasically, I think the server is misbehaving. It's not following the SSH specs as strictly as it ought to.\nI can make phpseclib ignore SSH_MSG_CHANNEL_EXTENDED_DATA packets but first...  can you connect with PuTTY? If so I'd like to see the logs. You can enable logging by going to PuTTY->Session->Logging and checking the \"SSH packets\" radio button. Then save the session and then go to psftp and load the session by doing something like \"psftp -load sessionName\" or something.\nIf you're not connecting with PuTTY can you connect with OpenSSH? If so I'd like to see the logs for that.\nI'll make it so phpseclib can connect if I see evidence that another industry standard SFTP client can connect. But, as is, I stand by my statement that I think the server is misbehaving and I've quoted the SSH2 specs that the server seems to be ignoring.. Alternatively, giving me SFTP access would let me try to see what PuTTY / OpenSSH do myself. If you'd be willing to provide that you could email auth info to terrafrost@php.net.. Looks like OpenSSH is connecting just fine. I'll try to work on this later this week or (more likely) this weekend.\nThanks!. Give me a few more days on this. I got sidetracked with some unrelated phpseclib stuff on the master branch on Friday and Saturday and today I got caught up on old pull requests and what not.\nThanks!. Does https://github.com/phpseclib/phpseclib/commit/0afde6ea43002be872822c0a220f6ab0b082b1ae fix the issue for you?. That's a good catch for the master branch but you really shouldn't be using the master branch. That branch's API is unstable as I may make BC breaking changes from commit to commit.. Regardless, I fixed the issue in the master branch. Thanks for the feedback!. 1.x or 2.x, either work!. > here is the output from the sftp connection:\nIs that output from the OpenSSH sftp CLI program?\n\nI don't get any debug info from getlog. I actually get nothing, script just hangs with no output at all.\n\nTry real time output. define('NET_SSH2_LOGGING', 3);. > Added real time output without success. This is the only output I get from the script with lib version 1:\n\nPHP Notice: Constant NET_SFTP_LOG_REALTIME already defined in /usr/src/phpseclib-1.0/phpseclib/Net/SFTP.php on line 78\n\n*sigh*\nIt sounds like you didn't do what I asked - it sounds like you did define('NET_SFTP_LOG_REALTIME', 3); instead of define('NET_SSH2_LOGGING', 3);.\nEvidence:\nYou weren't getting that error before.\nThere's only one place NET_SFTP_LOG_REALTIME is defined in phpseclib 1.0 code base.\n$ grep -r NET_SFTP_LOG_REALTIME .\n./Net/SFTP.php:define('NET_SFTP_LOG_REALTIME', 3);\n./Net/SFTP.php:            if (NET_SFTP_LOGGING == NET_SFTP_LOG_REALTIME) {\n./Net/SFTP.php:            if (NET_SFTP_LOGGING == NET_SFTP_LOG_REALTIME) {\nThat define is called before the class is defined and is not within any if statements. So it's not like it's being conditionally defined by the existence of a NET_SSH2_LOGGING constant - it's always defined when SFTP.php is included. Which would explain the error you got if you did define('NET_SFTP_LOG_REALTIME', 3); instead of define('NET_SSH2_LOGGING', 3);.\nAs for the 2.0 code base... in the 2.0 codebase it's a class constant:\nphp\n    /**\n     * Dumps the content real-time to a file\n     */\n    const LOG_REALTIME_FILE = 4;\nSo in the 2.0 codebase the define('NET_SFTP_LOG_REALTIME', 3); that I'm alleging you did (that I didn't ask you to do) isn't conflicting with anything (it's also not doing anything because the codebase doesn't use that constant).. Here's the last packet of your trace:\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0063, network: 0.0062s)\n00000000  00:00:01:00:00:00:00:7c:00:00:00:78:02:00:00:00  .......|...x....\n00000010  03:00:00:00:08:76:65:72:73:69:6f:6e:73:00:00:00  .....versions...\n00000020  09:32:2c:33:2c:34:2c:35:2c:36:00:00:00:18:70:6f  .2,3,4,5,6....po\n00000030  73:69:78:2d:72:65:6e:61:6d:65:40:6f:70:65:6e:73  six-rename@opens\n00000040  73:68:2e:63:6f:6d:00:00:00:01:31:00:00:00:13:73  sh.com....1....s\n00000050  74:61:74:76:66:73:40:6f:70:65:6e:73:73:68:2e:63  tatvfs@openssh.c\n00000060  6f:6d:00:00:00:01:32:00:00:00:14:66:73:74:61:74  om....2....fstat\n00000070  76:66:73:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00  vfs@openssh.com.\n00000080  00:00:01:32                                      ...2\nThat corresponds to this bit of code (in SFTP::login):\n```php\n        $response = $this->_get_sftp_packet();\n        if ($this->packet_type != NET_SFTP_VERSION) {\n            user_error('Expected SSH_FXP_VERSION');\n            return false;\n        }\n    if (strlen($response) < 4) {\n        return false;\n    }\n    extract(unpack('Nversion', $this->_string_shift($response, 4)));\n    $this->version = $version;\n    while (!empty($response)) {\n        if (strlen($response) < 4) {\n            return false;\n        }\n        extract(unpack('Nlength', $this->_string_shift($response, 4)));\n        $key = $this->_string_shift($response, $length);\n        if (strlen($response) < 4) {\n            return false;\n        }\n        extract(unpack('Nlength', $this->_string_shift($response, 4)));\n        $value = $this->_string_shift($response, $length);\n        $this->extensions[$key] = $value;\n    }\n\n```\nThe next step would be for SFTP.php to call $this->pwd = $this->_realpath('.'); but I guess it's not doing that.\nAnyway, I have no clue what's going on from your logs. Your options are two fold.\n\nEmail me at terrafrost@php.net with the info to connect to your SFTP server. ie. IP address or hostname / username / password or key.\nI post code changes designed not to fix but to debug. You apply these changes and tell me the output. We keep on doing this until I figure out what's going on. This is liable to be a long, slow, tedious process that could wind up being dragged out for days or weeks. Like I post something, you respond in a day, I respond to your post in a day, etc. I've done it before and I've done it before but it's not very fun.. This should be working now as of https://github.com/phpseclib/phpseclib/commit/309fa0af4429e87d1948655ddb4b5cde0b45fbff - thank you for your help in getting this resolved!!. The past two emails I've sent to you have resulted in a bounce like 24h after I sent them:\n\n\n554 5.7.1 Service unavailable; Client host [209.85.223.174] blocked using dnsbl.sorbs.net; Currently Sending Spam See: http://www.sorbs.net/lookup.shtml?209.85.223.174\n\n209.85.223.174 resolves to mail-io0-f174.google.com, which makes sense because my php.net email address actually forwards to my gmail address, which is where I'm typing up my responses to your emails.\nAnyway, I'm getting your emails, but I'm not sure you're getting mine.\nTo answer your question...  PayPal donations can be sent to http://paypal.me/phpseclib - thanks!. \"Unable to open channel\" is a pretty generic error. It's a bit like the blue screen of death. Like if you read some post online saying \"here's the fix for your blue screen of death\" that does not in any way imply that that solution will be the solution for your problem.\nThe fix for #1167 is for the specific conditions demonstrated in the log files posted in that issue.\nFor me to assist you I'll need you to produce your own log files. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top of your PHP script and then echo $ssh->getLog() after you encounter the error.. First, this should have been posted as a new issue. Replying to an existing issue means your posts are much more likely to be missed (which is why I'm replying almost a month after you made your post).\nAnyway, I think the following branch may fix the issue for you:\nhttps://github.com/terrafrost/phpseclib/tree/2.0-channel-request-updates. So you want to use phpseclib from the Raspberry Pi to facilitate the copying of a file from one location on a remote computer to another location on that same computer?\nDo you have shell access? If so $ssh->exec('cp /path/to/file.ext /home/user/Desktop'); or some such should do the trick.\nIf you're using SFTP to do the transfer...  you'd have to download the file and then reupload it. That's just how SFTP works. You can't facilitate remote transfers with SFTP. With FTP there's FXP but SFTP has nothing comparable.. >  the remote machine is a windows machine and the pi is running ubuntu.  Do\n\nI need to edit the exec statement in anyway to accommodate for this fact?\n\nYou'd probably need to do copy c:\\path\\to\\file.ext c:\\users\\username\\Desktop then or some such.\n\nWhile researching I saw all kinds of variations on this.  Some used the\nnative ssh2 library and some used \u201ccmd COMMAND\u201d...\nIs calling commandline(cmd) like this necessary with phpseclib and an\nubuntu to windows setup?\n\nYou mean http://php.net/ssh2? I'd have to see an example to provide any insight into what that's all about but no - in phpseclib you shouldn't have to do that.. A normal Windows shell wouldn't respond with /bin/sh: copy: command not found. That's the kind of response I'd expect more on Windows. But who knows what you're using as your SSH server so maybe your SSH server is emulating bash or something idk. I guess to know that I'd need to know what you were using as your SSH server.\nEither way it sounds like you got it tho :). cmd COMMAND might do the trick actually.\nIn a \"normal\" SSH environment it wouldn't be necessary but with OpenSSH on Windows it might be.\nAs for alternative SSH servers...  bitvise has a Windows one but idk that I've tried the SSH parts of it that much as opposed to just the SFTP parts. There's also Microsoft's port of OpenSSH: https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH I've used it once but don't have a ton of experience with it.. So I went ahead and tried $ssh->exec('copy file1.ext file2.ext'); on Microsoft's OpenSSH port and it worked just fine. I got \"1 file(s) copied\" as the response.\n\nCould using an RSA key like the example listed in this link, change things in some way?\n\nNot with any SSH server I've ever heard of.\n\nI have the user setup as an admin on the windows machine so in my mind that would mean opening an ssh session using that user would let me to pretty much anything and any command I could in a native cmd window.\n\nThat would really depend on the SSH server and tbh 95% of the servers I SSH into are Linux servers. That said, in my testing of Microsoft's OpenSSH port it does seem to work as you describe.\n\nWhen I say openssh... i believe i got my download here... https://www.openssh.com/\nIt is an exe .. is that different from the git project youlist for openssh?\n\nI didn't see a Windows download at https://www.openssh.com/ when I checked just now, altho apparently the first result for the phrase openssh server windows is talking about the Microsoft OpenSSH port.\nAnyway, I hate to say it, but your problems are probably beyond the scope of phpseclib. My guess is that you'd have this same problem with any SSH client you tried. If so that would mean that this isn't a problem with phpseclib but rather with the SSH server itself. In that scenario I'd recommend posting on superuser.com or the support forum for the SSH server you're using or something.. You need to do $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1). But even then the results aren't gonna be the same because PKCS1 uses random padding.\nHere's some code that'll encrypt a string with openssl_public_encrypt and will decrypt it with $rsa->decrypt():\n```php\n<?php\ninclude('Crypt/RSA.php');\n$key = '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0\nFPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/\n3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB\n-----END PUBLIC KEY-----';\n$msg = 'zzz';\nopenssl_public_encrypt($msg, $ciphertext, $key);\n$rsa = new Crypt_RSA(); \n$rsa->loadKey('-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp\nwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5\n1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh\n3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2\npIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX\nGukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il\nAkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF\nL0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k\nX6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl\nU9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ\n37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=\n-----END RSA PRIVATE KEY-----'); \n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1); \n$plaintext = $rsa->decrypt($ciphertext);\necho $plaintext;\n```. Quoting my original post:\n\nYou need to do $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1)\n\nHere's your original code:\nphp\nuse phpseclib\\Crypt\\RSA;\n$rsa = new RSA();\n$rsa->loadKey($key);\n$result = $rsa->encrypt($msg, 2);\nSo add $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1); to that. Before $rsa->encrypt().\nAltho that said, your $rsa->encrypt() call has two parameters. What's that second parameter supposed to be?\nAlso, quoting my post:\n\nthe results aren't gonna be the same because PKCS1 uses random padding\n\nIf you want to test to see if you're doing the same thing doing a string comparison isn't gonna be sufficient. You're going to need to decrypt it. So write some code in OpenSSL to both encrypt and decrypt. Then replace the part of the OpenSSL code that does the encryption with a phpseclib version.. Oh right - good catch.\nFor contributing to the docs submit a PR to https://github.com/phpseclib/docs . Keep in mind the docs are for 1.0 - not 2.0. \nBarring a major revamp (which I intend to do preceding the 3.0 release, which is a good ways away), a few 2.0 examples live at http://phpseclib.sourceforge.net/2.0.html .\nThanks!. > Will the 1.0 version be deprecated in the future?\nI have no current plans to do so.. @esraanaem - I think #1304 is pretty much the same thing that you were attempting to seek help in this thread?. https://github.com/phpseclib/phpseclib/commit/ffcff461c4d5ea1686e7265b860bbb9b6a665487 should fix this. I added a unit test as well.\nThanks!. $this->packet_type is an integer so the exceptions will wind up reading like \"expected NET_SFTP_VERSION. Got package type 5\". Also, I think you should be doing \"packet\" - not \"package\".\nFinally, adding your name to the list of authors because of one commit...  not gonna happen. The AUTHORS section reflects everyone who has commit access to the repo. You do not.\nphpseclib has had 70+ individuals make commits: https://github.com/phpseclib/phpseclib/graphs/contributors I can't, in good conscious, add you whilst excluding everyone else.. No - it looks better. I'll merge it this weekend!. I note you replaced SSH_FXP_* with NET_SFTP_*. I actually kinda prefer SSH_FXP_* since that's how the packets are referred to in the SFTP specs. That's why SSH2.php exceptions say stuff like \"Expected SSH_MSG_KEXINIT\" instead of \"Expected NET_SSH2_MSG_KEXINIT\" - because that's how the SSH2 specs refer to them as.\nThat said, I've decided to go ahead and merge this. When I get around to significantly refactoring SSH2.php the ideas illustrated in #1160 will change how these constants all work anyway. At that point I could name the constants SSH_FXP_WHATEVER instead of NET_SFTP_WHATEVER.\nAre you going to make similar changes to SSH2.php?\nThanks!. > The changes now merged help in diagnosing the specific case.\nThe way I normally diagnose stuff is by looking at the SSH or SFTP logs. You can enable them by doing define('NET_SSH2_LOGGING', 2); and then $ssh->getLog(); or define('NET_SFTP_LOGGING', 2); and $ssh->getSFTPLog();.\nWhen people encounter errors I generally ask them to provide the logs and I figure out changes - if any - need to be done based on that.\n\nWe should probably come up with a customized version of the UnexpectedValueException to do away with the ever duplicating error message, and pass the expected values and the actual value as parameters to it. And then use that exception for all occurrences in the whole library.\n\nThat's a good idea.\n\nAs for the constant names I'm a bit confused. My goal was to match the error messages and the source code. The changed parts read as if there had been copy+paste mistakes, which I tried to address together with making the overall exception message more useful. Sorry for any additional work this caused.\n\nI used NET_SFTP_WHATEVER style constants because the old PEAR CS required constants be \"namespaced\". The package was in the Networking category hence the prefix NET. The package name is SFTP hence NET_SFTP_WHATEVER. Doing NET_SFTP_SSH_FXP_WHATEVER seemed redundant so I did NET_SFTP_WHATEVER for the constant names and SSH_FXP_WHATEVER in the error messages.\nIt's more of a personal preference like camelCase vs. snake_case.\n\nNow it's probably worth taking the time to refactor all affected parts of this library and match the real world with all parts of the code.\n\nRight now what I'm working on (between my job, personal activities and other phpseclib stuff) is ECDSA. After that I'll be working on completely refactoring X509. Then I'll be doing SSH2, making it support multiple channels, changing how the constants work (as done in #1160), etc. By the time I'm through with everything the API won't look anything like the API for 1.0 / 2.0.. Let's look at those line numbers. Line 4660 in 1.0.8 and line 4660 in the most recent commit to the 1.0 branch is this:\n    return $this->exit_status;\n\nLine 4660 in 1.0.7 doesn't exist.\nSo it's not immediately obvious what line 4660 is supposed to be but even without knowing that I can tell you that this in all likelihood bogus. It seems likely you're using phpcs on phpseclib and you're running into the same issue #337 ran into. eg.\n\ncall-time pass-by-reference is when you do foo(&$a); - not when you do &foo($a); What phpseclib is doing in the lines of code you mentioned is returning by reference\n\nphpseclib is unit tested on Travis CI on PHP versions going up to 7.1. A call-time pass-by-reference would cause the unit tests to fail and yet they're not failing.\nThe fact that phpseclib needs to use returning by reference and the fact that it works, without any error, be it E_NOTICE or E_DEPRECATED or anything, on versions of PHP up to 7.1, is demonstrated by #772. Give me a few days. I'd like to write a unit test that reproduces the error and then I'll get it merged. It looks like the unit testing for the SFTP Stream class is lacking:\nhttps://github.com/phpseclib/phpseclib/blob/master/tests/Unit/Net/SFTPStreamTest.php\nhttps://github.com/phpseclib/phpseclib/blob/master/tests/Functional/Net/SFTPStreamTest.php. First, I'm going to assume that you're referring to global only accepts simple variables. Quoting it,\n\nVariable variables can no longer be used with the global keyword. The curly brace syntax can be used to emulate the previous behaviour if required:\n```php\n<?php\nfunction f() {\n    // Valid in PHP 5 only.\n    global $$foo->bar;\n// Valid in PHP 5 and 7.\nglobal ${$foo->bar};\n\n}\n?>\n```\n\n\nAnyway, that doesn't seem to be strictly true:\n```php\n<?php\nfunction test($var)\n{\n    global $$var;\n    echo $$var;\n}\n$zzz = 'hello, world!';\ntest('zzz');\n```\nThat works without even so much as an E_NOTICE on PHP 7.2:\nhttps://3v4l.org/4hqZ4\nNow, doing what php.net did in their example doesn't work in PHP 7 whereas it does in PHP 5:\n```php\n<?php\nclass test\n{\n    var $var;\nfunction __construct($var)\n{\n    $this->var = $var;\n    global $$this->var;\n    echo $$var. \"\\n\";\n}\n\n}\n$zzz = 'hello, world!';\n$test = new test('zzz');\n```\nhttps://3v4l.org/6CWsM\nOf course, what php.net did in their example isn't what phpseclib is doing here.\nI mean, I can still merge this, I guess, but it really doesn't seem to be necessary. And the PHP docs do seem to be a bit misleading.. The 2.0 branch will never throw exceptions as that would be a BC break.\nf300e825b0c5018415aed803f7e0d24757a35f58 was me accidentally merging the BC breaking master branch into the 2.0 branch.\nIf you want to use exceptions with 2.0 might I suggest using set_error_handler to throw exceptions when the errors happen? It's not ideal, which is why it was changed in the master branch, but it's the best that's gonna be achievable whilst maintaining BC.. The version of phpseclib that will switch to using Exceptions already has.\nSo right now there are three branches of phpseclib. 1.0, 2.0 and master. The master branch will eventually become 3.0 once the API becomes finalized.  More specifically, at that point, I'll do get checkout -b 3.0 origin/master and then I'll do git push origin 3.0. At that point changes done in the master branch but not in the 1.0, 2.0 or 3.0 branches will not be guaranteed to maintain BC and at some point changes to the master branch will result in a 4.0 release, etc.\nPut another way, all the branches save for master seek to maintain BC with themselves.. The commented out ones are pretty inconsequential as is the one in the unit test. This leaves three that need to be fixed. One in SFTP.php, two in SSH2.php.. The user_error() occurrences have been fixed with https://github.com/phpseclib/phpseclib/commit/56a644faa849040f32ebf3399282d682af690dcf. > PHP Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 29729224 bytes) in /usr/share/php/Crypt/Base.php on line 1393\nLooks like your memory_limit is 128M. Maybe try changing it to 1024M. Or, better yet, rewrite your app such that it loads the file in chunks. ie. enable continuous mode and then try to decrypt 1mb at a time, writing each successive 1mb block to a file with fputs().. First, I don't really know C#. On http://phpseclib.sourceforge.net/ the \"Get Support\" button takes you to stackoverflow for support requests. This post is one of the reasons why. On stackoverflow (aka SO) there are people who know C# and the C# crypto API. And they're available at all hours of the day whereas I'm not.\nIn any event, it does strange that you're creating the hash outside of any RSAPKCS1SignatureDeformatter method calls. That said https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsapkcs1signaturedeformatter(v=vs.110).aspx appears to (mostly) do the same thing. The biggest difference I see between what you're doing and what the example is doing is that you appear to be using an HMAC, which I think is a bit gimmicky. I'd just go with a standardized approach instead of trying to roll out your own.\nAlso, I don't know what RSAPKCS1SignatureDeformatter does internally but...  in PKCS1 you embed the OID of the hash algorithm into the message that's going to be subjected to modular exponentiation. https://tools.ietf.org/html/rfc3447#section-9.2 elaborates. In theory you'd want this to be the same as the hash that's actually used but I suppose one could make it different if one were so inclined. My guess is that RSAPKCS1SignatureDeformatter lets you do just that. I mean, it does have \"PKCS1\" in the name and that has to count for something.\nAnyway, if that's the case, you're basically coming up with your own custom hashing scheme independent of what the OID would indicate. phpseclib determines the hashing algorithm from the OID and SHA256 with HMAC is not an option. And it's not that it's not an option in phpseclib - it's not an option in the PKCS1 standards, off of which phpseclib is based. Those standards do not define an OID for SHA256 with HMAC.\nMost RSA implementations probably behave similar to phpseclib and if you're gonna do SHA256 with an HMAC it's likely you're just going to run into a butt load of interoperability problems.\nOverall, I'd recommend just not doing the HMAC.\nAlso...\n$htmlFriendly = htmlspecialchars_decode($signature);\n        $base64 = base64_decode($htmlFriendly);\n        $urldecode = urldecode($base64);\n        $crypttext = pack(\"H*\", $urldecode);\nSo the ciphertext is first converted to a hexidecimal notation (ie. only allowed digits are 0-F) and then urlencoded? Hex-encoded strings have no characters that would need to be URL encoded by definition. Then, after that it's being base64_encoded?\nIt's just a whole lot of indirection and unnecessary steps.... > However I've already tested that the output of HMACSHA256.ComputeHash () (converted to a string) is exactly the same as PHP's hash_hmac(). \nThat's not what I'm saying.\nThe PKCS1 encryption format has the OID embedded within it for the hash algorithm. The supported OIDs are as follows:\n```\n   1. For the six hash functions mentioned in Appendix B.1, the DER\n      encoding T of the DigestInfo value is equal to the following:\n  MD2:     (0x)30 20 30 0c 06 08 2a 86 48 86 f7 0d 02 02 05 00 04\n               10 || H.\n  MD5:     (0x)30 20 30 0c 06 08 2a 86 48 86 f7 0d 02 05 05 00 04\n               10 || H.\n  SHA-1:   (0x)30 21 30 09 06 05 2b 0e 03 02 1a 05 00 04 14 || H.\n  SHA-256: (0x)30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00\n               04 20 || H.\n  SHA-384: (0x)30 41 30 0d 06 09 60 86 48 01 65 03 04 02 02 05 00\n               04 30 || H.\n  SHA-512: (0x)30 51 30 0d 06 09 60 86 48 01 65 03 04 02 03 05 00\n                  04 40 || H.\n\n```\nThat's the hex encoded OIDs but the thing is...  there are only a small number of hash algorithms that are accepted and none of them are HMACs. BLAKE2 is a newer hash algorithm that's generally regarded as being quite secure. But you can't use it with PKCS1 RSA encryption. Not if you want your ciphertext to be PKCS1 v2.2 compliant. If you don't care about PKCS1 v2.2 compliance then sure, do whatever you like, but be aware that your ciphertext may not decrypt with other tools.. > Although the .NET's own example and also in your list above SHA-256 hash must be supported.\nSHA-256 hash is supported but not SHA-256 HMAC.\nIn your C# code you have rsa_sign_in_php_verify_in_csharp, which calls CsharpHMAC, which utilizes HMACSHA256:\nc#\nusing (var hmac = new HMACSHA256(sessionKey))\nIn the sample code SHA256 is used:\nc#\nusing (SHA256 sha256 = SHA256.Create())\nSo try using SHA256 - not HMACSHA256.. I connected to an SSH server that had the same configuration yours did without issue. More specifically, I used Vagrant to create a VM with an altered /etc/ssh/sshd_config so that my results could be reproduced. Here's my Vagrantfile:\nVagrant.configure(\"2\") do |config|\n    config.vm.box = \"laravel/homestead\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n        sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config\n        sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config\n        service ssh restart\n    SHELL\nend\nMy PHP code:\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Net\\SFTP;\n$sftp = new SFTP('127.0.0.1', 2222);\n$sftp->login('vagrant', 'vagrant');\nprint_r($sftp->nlist());\n```\nSo clearly the configuration you described is not an issue. For issues like the one you're having logs are most helpful. Let's enable logging to the above code to see what's happening. To do so we'll add define('NET_SSH2_LOGGING', 2); to the top of the file and echo $sftp->getLog(); to the end.\nHere's a snippet from the logs that I got:\n```\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0018, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0004, network: 0.0003s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_FAILURE (since last: 0.0015, network: 0.0014s)\n00000000  00:00:00:1e:70:75:62:6c:69:63:6b:65:79:2c:6b:65  ....publickey,ke\n00000010  79:62:6f:61:72:64:2d:69:6e:74:65:72:61:63:74:69  yboard-interacti\n00000020  76:65:00                                         ve.\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:07:76:61:67:72:61:6e:74:00:00:00:0e:73  ....vagrant....s\n00000010  73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00  sh-connection...\n00000020  14:6b:65:79:62:6f:61:72:64:2d:69:6e:74:65:72:61  .keyboard-intera\n00000030  63:74:69:76:65:00:00:00:00:00:00:00:00           ctive........\n<- NET_SSH2_MSG_USERAUTH_INFO_REQUEST (60) (since last: 0.0007, network: 0.0007s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:01  ................\n00000010  00:00:00:0a:50:61:73:73:77:6f:72:64:3a:20:00     ....Password: .\n-> NET_SSH2_MSG_USERAUTH_INFO_RESPONSE (61) (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:0c:64:75:6d:6d:79:2d:61:6e  ........dummy-an\n00000010  73:77:65:72                                      swer\n<- NET_SSH2_MSG_USERAUTH_INFO_REQUEST (60) (since last: 0.0059, network: 0.0058s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00  ................\n-> NET_SSH2_MSG_USERAUTH_INFO_RESPONSE (61) (since last: 0.0004, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0017, network: 0.0016s)\n```\nSo you can see that it tries password auth first. The server responds by saying that it only supports keyboard-interactive auth (ie. \"ChallengeResponseAuthentication\") so then phpseclib tries that. The prompt it gets from the server is \"Password:\" and phpseclib then responds with the password (denoted in the logs as \"dummy-answer\" since the logs filter out the password).\nThe error message you're getting is Expected SSH_MSG_KEXINIT. That error message precedes the authentication phase. If the server and the client can't settle on the algorithms used then the password would be sent in clear text. And phpseclib can't settle on the algorithms used by the server because I guess the server isn't sending them.\nidk what version of phpseclib you're using but maybe you're not using the latest version. phpseclib 1.0.7 and 2.0.6 both expected the server to send the KEX packet first. #1162 elaborates. If you are using the latest version then maybe restoring the old behavior by doing $sftp->sendKEXINITLast(); will do the trick for you.\nIf neither of those works than I'd say post the server logs. As previously noted, you can do so by doing define('NET_SSH2_LOGGING', 2); to the top of the file and echo $sftp->getLog(); to the end.. TLDR try the latest version if you're not already. If you are using the latest version and still having the issueget me the SSH logs, which you can do by doing define('NET_SSH2_LOGGING', 2); at the top and echo $sftp->getLog(); at the end.\nThanks!. One thing that might be beneficial for you to do is to build off of https://github.com/terrafrost/phpseclib/tree/cms as that already does some CMS stuff.\nAnyway, \nasnEncapsulatedContentInfo\n\n```\nEncapsulatedContentInfo ::= SEQUENCE {\n    eContentType ContentType,\n    eContent [0] EXPLICIT OCTET STRING OPTIONAL }\nContentType ::= OBJECT IDENTIFIER\n```\n$asnEncapsulatedContentInfo = array('type' => FILE_ASN1_TYPE_SEQUENCE, 'children' => array('eContentType' => array('type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER), 'eContent' => array('type' => FILE_ASN1_TYPE_OCTET_STRING)));\n\nIn the actual ASN1 eContent is optional so you'd need to do this:\nphp\n$asnEncapsulatedContentInfo = array(\n        'type'     => FILE_ASN1_TYPE_SEQUENCE,\n        'children' => array(\n            'eContentType'     => array('type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER),\n            'eContent' => array(\n                'type' => FILE_ASN1_TYPE_OCTET_STRING,\n                'constant' => 0,\n                'optional' => true,\n                'explicit' => true\n            )\n        )\n);\nasnCMSVersion\n\n$asnCMSVersion = array('type' => ASN1_File_Type_Integer);\n\nThat should be all caps. And you got ASN1 and File switched. Should be FILE_ASN1_TYPE_INTEGER.\nasnCompressionAlgorithm\nAlgorithmIdentifier is pretty much always the same. Here's how I do it in File/X509.php and File/CMS.php:\n```php\n    // http://tools.ietf.org/html/rfc5280#section-4.1.1.2\n    $AlgorithmIdentifier = array(\n        'type'     => FILE_ASN1_TYPE_SEQUENCE,\n        'children' => array(\n            'algorithm'  => array('type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER),\n            'parameters' => array(\n                                'type'     => FILE_ASN1_TYPE_ANY,\n                                'optional' => true\n                            )\n        )\n    );\n\n```\nNote that the master branch greatly facilitates re-use. In https://github.com/terrafrost/phpseclib/tree/cms $AlgorithmIdentifier is defined twice - once in CMS.php and once in X509.php. In the master branch auto-loading is utilized such that AlgorithmIdentifier only ever needs to be defined once:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/File/ASN1/Maps/AlgorithmIdentifier.php\nasnCompressedData\n\n$asnCompressedData = array('type' => FILE_ASN1_TYPE_SEQUENCE, 'children' => array('version' => array('type' => FILE_ASN1_TYPE_INTEGER), 'compressionAlgorithm' => $asnCompressionAlgorithm, 'encapContentInfo' => asnEncapsulatedContentInfo));\n\nasnEncapsulatedContentInfo should have a dollar sign before it. eg. $asnEncapsulatedContentInfo\n\nObviously some error with my mapping but I'm also unsure of the purpose of asn1map too.\n\nIf you just decode the BER then all you know is that there's an integer but you don't know what that integer means. What does a particular octet string or bit string represent? There's not an easy way to know. asn1map basically maps out the binary data into a more useful / easily parsed data structure.\n\nIf I'm only interested in getting the equivalent of the HEXDUMP content from openssl asn1parse command for the OCTET STRING is the above approach the best way using phplibsect?\n\nIf that's all you're doing then you could do something similar to http://phpseclib.sourceforge.net/x509/asn1parse.php . That utilizes phpseclib to produce output pretty much identical to OpenSSL's asn1parse. The code isn't super elegant but it suffices as a proof of concept.. To provide further support what'd really help is the cmsCompressed.base64 you're performing your tests on. With that I could perform my own tests.\n\nDoes the CMS implementation in phplibsec thus far offer the equivalent of openssl uncompress?\n\nNo. Currently CMS.php in that branch only supports signing (with CAdES support). I mean, it could be extended to support it (utilizing gzuncompress like you did) but it doesn't currently.\nOne thing to keep in mind... that file isn't officially supported. It'll probably be implemented in master / 3.0 at some point but not any time soon.\n\nI will also check out the asn1parse.php you provided as a link. Is this included in the phplibsec packages that are available in distros?\n\nIt's in the phpseclib/docs repo:\nhttps://github.com/phpseclib/docs/blob/master/x509/asn1parse.php. Thanks! I probably won't be able to look until the weekend but I'll take a look!. The latest commit in https://github.com/terrafrost/phpseclib/tree/cms adds support for this:\nhttps://github.com/terrafrost/phpseclib/commit/1f7b23c81ebdcd2c422e06cb7928efc8cb9e24a4#diff-cb8cd7734a8b95f8fc94ba2b7eae5da8\nSample code:\n```\n<?php\ninclude('File/CMS.php');\n$cms = new File_CMS();\n$r = $cms->load('MIIDLgYLKoZIhvcNAQkQAQmgggMdMIIDGQIBADANBgsqhkiG9w0BCRADCDCCAwMG\nCSqGSIb3DQEHAaCCAvQEggLweJydk1tvqzgUhd+R+A8orxUN4UAurfpgE4eQBFoI\nkMBL5YC5NNwChpD8+kMqjeaiM6Ojsfy019pb39qWdU1HvEvqJi2LF27yLLCMUhaU\nFJS3bxV54fI2o2mFazpu0rgg4StX1SUtgzJ7G+GqytIA06F3XJ2DZsY/PJi2NRm9\ncvkgZfHbqEkwL8rToXIq2yLE9e1txA9nKsOpJM0FCU5XcyTIMwEKE7RYLqEiC2Ax\nH7EMy/D871j/CU1JT8dVhtPiT2WZNlXZpPQ7KKAUB0k+1F+5KM1IgXPyRklDP5s8\nzcknHcZ8BmVe1aRpSPhMwvRBYydpww0Xcw8vlw8ijsn/5/yPBb5y30yjb57nataM\n/tJc46KJSM2jIijDtIhfuBNuyFT6l7T4V2n/NplldE2D1PQ229LXki4wgBko5VCr\nvhQFYE0BJuqXd2DAOIuTcwx9U0cgRiuwBDsYny8sk5xTdXEVILyiPo5Xi8dEYmoQ\n2HCvI6dX7mADY8OFwLPBeeXqln5Fprd0TVNbgspmmZM4yXauIXhHK9P36Lq+fqvb\nJUw2p8LKglzOQgUe8cEq8NG6aysokD3UQ9VUFHM5rLfTXDgpoUt/TWo8SP/gHBKt\nANgPyQBqzeD9SbKHR26bZEHXp/H9YF02nbO+m7KWeG0igNIJNtq1Dx2vr+B853pp\neZTsbnu/AlmWFQhjk2QRy4hK5Vih9aTOvuotbhfuRRIuRJypXbTZHsUfZqmGSZCs\nGzUFoCg3w8bmY1qEU9sZi7Gos0z/ETSXCdrSnRgpdh/PLsjzJf+rnbTd0a/WG1dQ\n86eDY3/0+uJUT0DXGgpWZu+Gv0NadGIZEx5iIItYJOltddraoft1RCeK2sVc7zNj\nlQn7KjqM89pWpL4kiGwiesGdqXt4HuzvCcvshWl9v4l12xqT8OCQdO5M5x9y5Ee4\n3QbXD8l/t3yoqxFeF+BWyESwQAQIfOrQj+y8oCxzjkU3Q++gBLH6+1+E5x/en0Jj\ncT0=');\nprint_r($r);\n```. Good call! I've done this in a few places already but hadn't done it everywhere. Thanks for taking the initiative!. > According to openssl implementation both (authorityKey.keyIdentifier and subjectKeyIdentifier) needs to be set to perform validation on it.\nI assume you mean the signed cert needs to have both an authority key identifier and a subject key identifier. Here's how I'd implement that:\nphp\n$authorityKey = $this->getExtension('id-ce-authorityKeyIdentifier');\n$CASubjectKeyID = $this->getExtension('id-ce-subjectKeyIdentifier', $ca);\n$subjectKeyID = $this->getExtension('id-ce-subjectKeyIdentifier');\nswitch (true) {\n    case !is_array($authorityKey):\n    case is_array($authorityKey) && $subjectKeyID && isset($authorityKey['keyIdentifier']) && $authorityKey['keyIdentifier'] === $CAsubjectKeyID:\n        $signingCert = $ca; // working cert\n        break 3;\n}\n\nif authorityKey.authorityCertSerialNumber is set then needs to be validated\n\nHere's how I'd implement that (building on the above):\nphp\n$authorityKey = $this->getExtension('id-ce-authorityKeyIdentifier');\nif (!is_array($authorityKey)) {\n    $signingCert = $ca;\n    break 2;\n}\n$CASubjectKeyID = $this->getExtension('id-ce-subjectKeyIdentifier', $ca);\n$subjectKeyID = $this->getExtension('id-ce-subjectKeyIdentifier');\nswitch (true) {\n    case !$subjectKeyID || !isset($authorityKey['keyIdentifier']) || $authorityKey['keyIdentifier'] !== $CAsubjectKeyID:\n    case isset($authorityKey['authorityCertSerialNumber']) && $authorityKey['authorityCertSerialNumber'] !== $ca['tbsCertificate']['serialNumber']:\n        break 2;\n}\n$signingCert = $ca;\nbreak 2;\nI want to consult the X.509 RFC and see if that says anything on the subject as well.. > According to openssl implementation both (authorityKey.keyIdentifier and subjectKeyIdentifier) needs to be set to perform validation on it.\nNeither RFC5280 \u00a7 4.2.1.1 Authority Key Identifier nor RFC5280 \u00a7 4.2.1.2 Subject Key Identifier say anything about this. Can you post a link to OpenSSL source where this restriction is described or implemented? I didn't check the errata for the RFC.\nAlso, I think err'ing on the side of caution is a good thing. Worst case: this yields false negatives. Say you have a cert with an authority key identifier and no subject key identifier. Using the current approach the cert would fail validation with phpseclib. You're saying that in OpenSSL the cert would pass validation? That can be put to the test but in lieu of having conducted such a test I'd say that err'ing on the side of caution is the best approach in-so-far as X.509 is concerned.\n\nif authorityKey.authorityCertSerialNumber is set then needs to be validated\n\nI concur with this. I'll try to whip something up in the next few days as time permits (for my own reference, see File/ASN1/Maps/AuthorityKeyIdentifier.php)\nThanks!. So here's what I'd do (without doing the subject key identifier thing, which will require some verification):\nphp\n$authorityKey = $this->getExtension('id-ce-authorityKeyIdentifier');\nif (!is_array($authorityKey)) {\n    $signingCert = $ca;\n    break 2;\n}\n$CASubjectKeyID = $this->getExtension('id-ce-subjectKeyIdentifier', $ca);\nswitch (true) {\n    case isset($authorityKey['keyIdentifier']) && $authorityKey['keyIdentifier'] !== $CAsubjectKeyID:\n    case isset($authorityKey['authorityCertSerialNumber']) && $authorityKey['authorityCertSerialNumber'] !== $ca['tbsCertificate']['serialNumber']:\n    case !defined('FILE_X509_IGNORE_TYPE') && $authorityKey['authorityCertIssuer'] === $ca['tbsCertificate']['subject']:\n    case defined('FILE_X509_IGNORE_TYPE') && $this->getDN(self::DN_STRING, $authorityKey['authorityCertIssuer']) === $this->getDN(self::DN_STRING, $ca['tbsCertificate']['subject']):\n        break 2;\n}\n$signingCert = $ca;\nbreak 2;. So the unit test that is failing with this PR was added as a result of #971. As I explained in the comment I just posted in that ticket I'll be removing the failing unit test.. I backported this to 1.0 (squashing the commits and then cherry-picking into 1.0), added this to the CRL signature validation routines and this is now in the main phpseclib repo (all branches).\nThanks!. For my reference here's the failure, isolated:\n```\n== tests/Unit/Crypt/DSA/SignatureTest.php ==\nPHPUnit 4.8.26 by Sebastian Bergmann and contributors.\nRuntime:    PHP 7.0.22 with Xdebug 2.5.5\nConfiguration:  /home/travis/build/phpseclib/phpseclib/phpunit.xml.dist\n.F.\nTime: 153 ms, Memory: 8.00MB\nThere was 1 failure:\n1) Unit_Crypt_DSA_SignatureTest::testRandomSignature\nFailed asserting that false is true.\n/home/travis/build/phpseclib/phpseclib/tests/Unit/Crypt/DSA/SignatureTest.php:105\nFAILURES!\nTests: 3, Assertions: 11, Failures: 1.\n```\nI'll look into this as time permits.\nThanks!. https://github.com/phpseclib/phpseclib/commit/a96add4526e558e03cbf986f848f4262f999acb3 should fix the error (which was unrelated to the PR). It's hard to comment without seeing the logs but based on what I've read...\nphp\n$ssh->write('en');\nsleep(5);\n$ssh->write('lab');\nsleep(5);\n$ssh->write(\"dir\\n\");\necho $ssh->read('[prompt]');\nThe thing is...  $ssh->write() sends commands on a specific SSH channel. $ssh->exec() sends commands on a different channel. If you're authenticating within a specific channel I'd expect that authorization to only be valid for that specific channel and thus all subsequent commands would need to be done in that same channel.\nA few thoughts / observations.\n\nMaybe that second sleep(5); could be eliminated if the server returned a prompt after the password was successfully entered?\nsleep(5); might be able to be lowered. You can play around with that and see.\n$ssh->write() just returns a boolean. I'm not sure what value there is in outputting that boolean as you are?. Your output has \\n but the PHP code I gave you didn't. Did you add them?\n\nAnyway, I'd say the best thing would be to see which key stroke results in the server actually sending stuff over with PuTTY logging. You can get the Putty logs by enabling logging. To do so go PuTTY->Session->Logging and checking the \"SSH packets\" radio button. Post them on pastebin.com and then post the link here and I'll revise my example to behave more like they do.. You could do this:\nphp\n$ssh->write(\"copy //some-path// another-path\\n\");\n$ssh->setTimeout(0); // disable timeout\n$ssh->read('[prompt]');\n$ssh->write(\"ANOTHER COMMAND \\n\") // Run it only after the command above has completed and the file was copied. Probably you're not matching the prompt exactly. There could be ANSI escape codes in there for example that would make the actual string that the server sends not match the string that you \"see\".\nTwo ways you could figure this out. Do $ssh->setTimeout(3); or whatever you have to do to see the prompt. You could also get the SSH logs. eg. do define('NET_SSH2_LOGGING', 3);. That's enable real time logging. You could then give me the last few packets that the SSH server sends.. So maybe you don't get a prompt as such. That last response that you're getting says \"[OK - 87277095 bytes]\" followed by a new line. In light of that I'd say do this:\nphp\necho $ssh->read('#\\[OK - \\d+ bytes\\]\\n#', NET_SSH2_READ_REGEX);\nHopefully from this example you can figure out what to do for other commands. ie. see what the last message from the command is and figure out how to identify that last message. Use regular expressions to do so if necessary.. Try the latest git version - I think https://github.com/phpseclib/phpseclib/commit/b50dde76f5683367e64e9f5e2936412d3168dad3 may fix this issue.\nI need to do a release within the next few days to get that fix out there.\nIf that doesn't fix it for you lmk and I'll tell you how to get log files.\nThanks!. That commit is in the 1.0 and 2.0 and master branches. Anyway, just pull the latest version of the 2.0 branch.\nAltho that said, even in the master branch, the namespace for the SFTP class is unchanged...  maybe you tried the latest version of the 1.0 branch and not the 2.0 branch? idk. I just made new releases of 1.0 and 2.0 (1.0.9 and 2.0.9, respectively). Try them out.\nThanks!. I just released 2.0.9. I'm sorry for the screw up :(. I just did a 2.0.9 release to fix the issue. Shows 5.3.3 now:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.9/composer.json#L56. Raspberry Pi's have ARM CPU's I think? I don't have one - I guess I could buy one...  maybe you or someone would have one I could SSH into instead?. I wound up getting one (I need anyone anyway for another project lol) and have PHP 7.2 up and running on it. Next step will be to get phpseclib on it and then doing experiments from there. I'll keep you updated!. I apologize for the delay. https://github.com/phpseclib/phpseclib/commit/b25681beebb1c644c76778b52344b9db859e5fef should fix this.\nThanks!. Does https://github.com/phpseclib/phpseclib/commit/6930560ae69765343933e066033c1f5d88caaea7 fix this?\nThanks!. phpseclib is PKCS1 v2.1 compliant. If a language didn't have any phpseclib compatible RSA implementations that would also mean it didn't have any PKCS1 compliant RSA implementations and if that's the case I'd say you just ought not do RSA in that language at all. That said, node.js is not such a language and it is def possible to get the two to interoperate together as evidenced by this:\nhttps://stackoverflow.com/questions/tagged/phpseclib+node.js\nI'd also say that stackoverflow is probably a better place to ask this question because there are node.js experts there. I've dabbled in node.js here and there but I am not an expert by any means.. So I think some of the changes are good but some of the changes I'm more on the fence about.\nLike the change that caused the unit test to fail for example. That could be fixed by putting the following above compact in Crypt/RSA/Keys/PuTTY::load:\nphp\n        if (isset($components['comment'])) {\n            $comment = $components['comment'];\n        }\nBut we'd have to do that for Crypt/DSA/Keys/PuTTY::load as well. It's like the change is increasing the amount of boilerplate that's needed and idk that I'm a big fan of that.\nOn the flip side, less reliance on extract would be well received. See, for example, #1092.\nI guess I'm willing to do away with the extract and replace it with extra boilerplate.\nYou also seem to be using two different standards for extract's with one parameter. From Net/SSH2.php:\nphp\n        /** @var integer $first_kex_packet_follows */\n...and...\nphp\n                /**\n                 * @var integer $length\n                 */\nI'd kinda prefer it if their was a single unified standard. ie. all one parameter extract's have a one-line comment or all one parameter extract's have a multi-line comment. Not half use one standard, half use another, but all use the same standard.\nTo summarize, there are two things that I think it'd be cool if you could do before I merge this:\n\nFix the unit test by adding the additional boilerplate to both RSA/Keys/PuTTY.php and DSA/Keys/PuTTY.php that I spoke of\nMake all the comments for the one parameter extract's take up just one line or three lines. Make it consistent.\n\nThere was one other personal preference thing I found but I can fix that myself:\nhttps://github.com/phpseclib/phpseclib/pull/1222/commits/c705e7d9c60061091f4ca29aafdb92b65178e79e#r157345472. There was a 0.3.9 release. The latest 1.x and 2.x releases are 1.0.9 and 2.0.9. Did you try both of those versions?\nAnyway, I'd say get me the SSH logs. You can do so by doing define('NET_SSH2_LOGGING', 2); and echo $ssh->getLog(); after the upload attempt. Post the results on pastebin.com and then post the link.\nThe logs for 0.3.9 would be good to have as well. You can get them in the same way. Since you're downloading a much bigger file for that one the logs may not fit on pastebin.com. If they do, great, if not, you can email them to terrafrost@php.net.\nThanks!. I never got the email.. Thanks! I'll try to take a look in the next few days!. I was hoping for the SSH logs - not the SFTP logs. The SSH logs contain additional information with which diagnostics can be made. To get the logs you sent me you'd had to have used define('NET_SFTP_LOGGING', 2); and $ssh->getSFTPLog(); - not define('NET_SSH2_LOGGING2', 2); / $ssh->getLog();.\nLike I can extract the SFTP logs from the SSH logs - I can't extract the SSH logs from the SFTP.\nThat said...  I can successfully extract files from SFTP logs. The file you downloaded from each of the 1.0.9.txt, 2.0.9.txt and 3.0.9.txt logs is a CSV with 17,189 rows. That makes me think the download was, in fact, successful.\nThe 1.0.9.txt and 2.0.9.txt files appear to be exactly the same. 3.0.9.txt seems to produce the exact same file as well. Also, 3.0.9.txt would be more aptly named 0.3.9.txt since there is not actually a 3.0.9 release.\nYou mentioned an error in your original post:\n\n```\n\n-> NET_SFTP_INIT (0.0001s)\n00000000  00:00:00:03                                      ....\n\nIn SFTP.php line 2997:\nob_flush(): failed to flush buffer. No buffer to flush\n```\n\nThat error only occurs when realtime logging is enabled:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.9/phpseclib/Net/SFTP.php#L2997\nI might speculate that the issue and that commenting that out might fix the issue but 0.3.9 has ob_flush in it as well:\nhttps://github.com/phpseclib/phpseclib/blob/0.3.9/phpseclib/Net/SFTP.php\nAs for why it's being done...  quoting http://php.net/flush ,\n\nflush() may not be able to override the buffering scheme of your web server and it has no effect on any client-side buffering in the browser. It also doesn't affect PHP's userspace output buffering mechanism. This means you will have to call both ob_flush() and flush() to flush the ob output buffers if you are using those.\n\nI mean I can still remove it but I don't think that'll make a difference.\nAnyway, all in all, it's not clear to me why you're not getting the full file. I'm not seeing anything in the logs. I might be able to duplicate the issue if I were able to SSH into the machine you're trying to SSH into. But then again it's also possible I wouldn't. It's possible that the issue isn't dependent on the machine you're connecting to but rather the machine you're connecting from. ie. it might be the client machine that I might need to SSH into to reproduce the issue - not the server machine.\nSo I guess our options are: give me SSH access to either client or server or I can give a bunch of changes to assist me in the diagnosing the issue. eg. I ask you to make some changes, you make them and post the output back, and this process continues until the issue is resolved. This approach could take upwards of a few weeks, simply because the delay between my posting the changes and you actually implementing them could, itself, be days. It's not a particularly fun approach but if that's the only option available to us then LMK and I can get started... > If you want, I can try to send you the ssh log.\nIt might help but my guess would be that it wouldn't. If there was an issue with the underlying layer it's unlikely I would have been able to extract the full 223KB zip file as I did. But if you'd prefer to be sure as to whether or not that'd help you can post it too.\n\nMoreover I have to had, if I try to connect to the server with sftp, I get :\nReceived disconnect from : Index was outside the bounds of the array.\n\nThat doesn't look like an error from phpseclib. If it is then you should also be getting a line number / file number. If it isn't (as I suspect) then maybe you could post the the SSH server you're using and the full server logs related to the phpseclib connection?\n\nSo perhaps a problem with the server or the way you call sftp ?\n\nIf I knew what the problem was I'd fix it lol. In lieu of knowing what it is I can't really comment lol. > About sftp, we have an misunderstanding. I was speaking about the cmd line tool sftp, not phpseclib. I just tried different approach to help.\nSo even the command line SFTP client isn't working?\nAnyway, as I said, if you can't give me SSH access there is another approach. Quoting my earlier post,\n\nSo I guess our options are: give me SSH access to either client or server or I can give a bunch of changes to assist me in the diagnosing the issue. eg. I ask you to make some changes, you make them and post the output back, and this process continues until the issue is resolved. This approach could take upwards of a few weeks, simply because the delay between my posting the changes and you actually implementing them could, itself, be days. It's not a particularly fun approach but if that's the only option available to us then LMK and I can get started..\n\nSo here's a modified version of phpseclib 1.0.9 (the version you say isn't working):\nhttps://github.com/terrafrost/phpseclib/tree/gchablowski-1.0.9-a\nRun that and post the output. If it's sufficiently long you can post it on pastebin.com.\nAlso, here's a modified version of phpseclib 0.3.9 (the version you say is working):\nhttps://github.com/terrafrost/phpseclib/tree/gchablowski-0.3.9-a\nAs before, run that and post the output.. So I was actually hoping you'd run the modified versions, which you do not appear to have done.\nThat said, I did take a look at the SSH logs you uploaded. So the SSH server you're connecting to is SSH-2.0-CompleteFTP-6.0.0. I guess it's an SFTP server for Windows. I downloaded and installed it from https://enterprisedt.com/products/completeftp/getinstaller/ . Well I'm actually doing SSH-2.0-CompleteFTP-10.2.1 but it's still CompleteFTP.\nAfter I installed it I tried connecting to SSH-2.0-CompleteFTP-10.2.1. I created a directory on my Windows box - C:\\path\\to\\uploads - and put the 223KB zip file that I extracted from your logs into that directory. I then used phpseclib 1.0.9 to download it and compared it to that same file that I had on my local filesystem. The files matched exactly.\nCode:\n```php\n<?php\ninclude('Net/SFTP.php');\n$sftp = new Net_SFTP('127.0.0.1', 22);\nif (!$sftp->login('user', 'pass')) {\n    exit('login failed');\n}\n$str1 = $sftp->get('B9S_10964_201712040014.ZIP');\n$str2 = file_get_contents('C:\\path\\to\\uploads\\B9S_10964_201712040014.ZIP');\necho $str1 == $str2 ? 'same' : 'different';\n```\nSo I'm not able to reproduce the issue. Other than that the log files look good. Just as the SFTP log files looked good.\nYou also didn't answer an earlier question of mine:\n\n\nAbout sftp, we have an misunderstanding. I was speaking about the cmd line tool sftp, not phpseclib. I just tried different approach to help.\n\nSo even the command line SFTP client isn't working?\n\n. Also, if you do run the updated versions, please don't enable any sort of logging on them. As I've already established, the SFTP and SSH logs have not yielded me any useful info as is and as such including them will just needlessly give me that much more data to sift through.. I added you as a committer! Is that all I need to do?. I just released 1.0.10. The most relevant fix for the Wordpress plugin is #1248. \nI can update the plugin tomorrow? Or you could do that?\nThanks!. The X509 instance was addressed three days ago:\nhttps://github.com/phpseclib/phpseclib/commit/703f7840db0631a52eb761ae55371e08e966f6ca\nThe Base.php instance is not an issue in 1.0.9. It was addressed over two months ago (1.0.9 was released about a week ago):\nhttps://github.com/phpseclib/phpseclib/commit/98d46db7c51cf8e4f8648b383d28db78dd22d055\nIn that diff you can see that it's only doing return create_function conditionally:\n```php\n        // Create the $inline function and return its name as string. Ready to run!\n        if (version_compare(PHP_VERSION, '5.3.0') >= 0) {\n            eval('$func = function ($_action, &$self, $_text) { ' . $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' } };');\n            return $func;\n        }\n    return create_function('$_action, &$self, $_text', $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' }');\n\n```\nThis is further supported by the fact that phpseclib is passing it's unit tests on PHP 7.2:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/311133811\nAnd yes, there are unit tests that would are only passing on 7.2 because create_function is no longer used.. > I can't seem to get regex to recognize the .* pattern. I have tried many different combinations. I am working with a cisco ASR 9k interactively. The read() function stops reading if I do read('host'); and if I do read(' host ', NET_SSH2_READ_REGEX); but if I do read('permit.* host', NET_SSH2_READ_REGEX); (I do mean to have the space in there, but I thought it should work with or without the space), the read() function does not find a match continues until it times out. \nWhen NET_SSH2_READ_REGEX is used the first parameter of read() is passed through preg_match and preg_match requires delimiters. You make use them in your first read() call:\nphp\n$cmd0_result = $ssh->read('/.(config)#/', NET_SSH2_READ_REGEX);\nYou don't make use of them in your next read() call:\nphp\n$cmd1_result = $ssh->read('permit. host', NET_SSH2_READ_REGEX);\nIn the case of read(' host ', NET_SSH2_READ_REGEX); that's probably working because the delimiter is space.\nhttp://php.net/manual/en/regexp.reference.delimiters.php elaborates.. The fact that error suppression isn't working is a bit annoying. Might be related to something in your php.ini file idk.\nIn lieu of the fact that error suppression isn't working...  I suppose the isValidEngine() method could be updated to not allow mcrypt's use if you're on PHP 7.1+. The only problem I have with that is that mcrypt is significantly faster than the pure PHP version, deprecated tho it may be.\nNot using mcrypt when it's available for that reason would be akin to having $1,000,000 USD in one in hundred s but refusing to spend it because the hundred dollar bills are Series 2006 instead of Series 2009.\nIt's also just all the more weird because I'm pretty sure Travis CI tests mcrypt on PHP 7.1 / 7.2..\nI'd say maybe post your php.ini file?. No.\nQuoting #1134,\n\nphpseclib has used the error suppression operator on all mcrypt function calls since 1.0.4 / 2.0.4:\nhttps://github.com/phpseclib/phpseclib/commit/640f10609fdb2aa825f8a42c6bee975879974e1c\nThose versions were released on October 3, 2016. My recommendation: upgrade to the latest version of phpseclib from either the 1.0 or 2.0 branches.\nRemoving mcrypt is not going to happen because, deprecated tho it may be, it's still a heck of a lot faster than the pure-PHP implementation. The fact that it's being used on your system suggests that OpenSSL isn't available so mcrypt is gonna be the fastest way to do encryption in PHP.\n\nphpseclib (all branches) are unit tested on PHP 7.2:\nhttps://travis-ci.org/phpseclib/phpseclib\nThey all pass in spite of using mcrypt. idk if you've ever used Travis CI / phpunit but an E_DEPRECATED notice will result in a failing unit test and yet the unit tests are all passing.. OpenSSL is used if it's available. mcrypt is used if it's available and OpenSSL isn't. The pure-PHP implementation (the slowest version) is an extreme last resort.\nSo if you have both installed OpenSSL should be used (unless you're doing something like Rijndael with a block size of 256, which isn't AES and is supported by mcrypt but not OpenSSL).\nIf you have just mcrypt installed and not OpenSSL then yah, mcrypt will be used, by default. It won't produce any errors, thanks to the use of error suppression, but it'll be used none-the-less. If you don't want it to be used, you can tell phpseclib to use the internal engine, despite it's being significantly slower. And that it's significantly slower shouldn't be of any great surprise as PHP is kinda a bloated interpreted language compared to C / C++. My guess: it probably does that with any file you download with any SFTP client.\nGoogle'ing the SSH server software you're using could yield some useful info. That can be done by doing echo $ssh->getServerIdentification().\nDoing print_r($ssh->getErrors()) or print_r($ssh->getSFTPErrors()) might provide some insight as well.\nBut that said, there's no way for an NET_SFTP_OPEN packet to tell the server to delete the file. Here are the options that are available to be passed to NET_SFTP_OPEN:\nhttps://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#page-12\nNone of those tell the server to delete the file. There's an option to truncate but not delete. And the only option get() uses is SSH_FXF_READ. If the server is deciding to delete the file it's deciding that all on it's own - phpseclib is not asking it to (based on the code you've posted) nor is there a way for it to do so.. First, are you using phpseclib 1.0? If you're using 2.0 it's not NET_SFTP_LOCAL_FILE that you should be using - it's SFTP::SOURCE_LOCAL_FILE.\nAnyway, that said, the first key you're using for the $_FILES array is different. The first time you're getting the name key of $_FILES['filenamebig'] and the second time you're getting the tmp_name of $_FILES['filename'].\nLook at those key names side by side:\nfilenamebig\nfilename\nThey're not the same. My guess: it'll work if you make them the same (whichever one is correct is dependent on code you've not posted). It could be that the prod (?) server is limited how fsockopen() can be used. ie. on local host you can connect to any host and on prod you can't connect to any.\nThe SSH logs might provide some insight (altho if it's the fsockopen issue I mentioned, they'd be empty). You can get them by doing define('NET_SSH2_LOGGING', 2); and echo $ssh->getLog(); after the failed login attempt.. Try doing this:\n```php\n\n-----[ OPEN ]------------------------------------------\n\nNet/SSH2.php\n\n-----[ FIND ]------------------------------------------\n\n$this->fsock = @fsockopen($this->host, $this->port, $errno, $errstr, $this->curTimeout == 0 ? 100000 : $this->curTimeout);\n\n-----[ REPLACE WITH ]----------------------------------\n\n$this->fsock = fsockopen($this->host, $this->port, $errno, $errstr, $this->curTimeout == 0 ? 100000 : $this->curTimeout);\n```\nMy guess is that you'll get an error about how it's unable to connect.. Two things that would help.\n\nKnowing what the command is.\nSeeing the SSH logs. You can get those by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog(); after the $ssh->exec();.. Looks good! I guess I need to improve my Composer-fu.\n\nAnyway, I cherry picked this to 1.0 and merged to 2.0 and master.\nThanks!. I'd say do two things. First, in SFTP.php, add this right before line 1152:\nphp\nif (!if_object($value)) {\n    throw new \\Exception('zzz');\n}\nThe exception should hopefully get me a stacktrace so I can see what the sequence of steps was that led you up to that.\nAlso, try posting the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 3);. That'll output the logs real-time.\nI've not really used Flysystem before so I'd need to play around with that some to provide you more guidance. Like is it possible to directly access the phpseclib SFTP object? I have no idea. For that matter I'm not even sure throwing an exception will get me a stacktrace. It's possible Flysystem catches exceptions and silently discards them idk.\n. I extracted the SFTP logs from what you posted:\n```\n-> NET_SFTP_REMOVE\n00000000  00:00:00:01:00:00:00:2b:2f:44:65:76:2f:4f:75:74  .......+/Dev/Out\n00000010  62:6f:75:6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73  bound/ILS_Orders\n00000020  5f:32:30:31:37:31:32:32:38:5f:31:35:32:31:38:2e  _20171228_15218.\n00000030  74:78:74                                         txt\n<- NET_SFTP_STATUS\n00000000  00:00:00:01:00:00:00:03:00:00:00:22:43:61:6e:6e  ...........\"Cann\n00000010  6f:74:20:64:65:6c:65:74:65:20:66:69:6c:65:2e:20  ot delete file.\n00000020  4e:6f:20:70:65:72:6d:69:73:73:69:6f:6e:2e:00:00  No permission...\n00000030  00:00                                            ..\n-> NET_SFTP_OPENDIR\n00000000  00:00:00:01:00:00:00:2b:2f:44:65:76:2f:4f:75:74  .......+/Dev/Out\n00000010  62:6f:75:6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73  bound/ILS_Orders\n00000020  5f:32:30:31:37:31:32:32:38:5f:31:35:32:31:38:2e  _20171228_15218.\n00000030  74:78:74                                         txt\n<- NET_SFTP_HANDLE\n00000000  00:00:00:01:00:00:00:2d:30:20:2f:44:65:76:2f:4f  .......-0 /Dev/O\n00000010  75:74:62:6f:75:6e:64:2f:49:4c:53:5f:4f:72:64:65  utbound/ILS_Orde\n00000020  72:73:5f:32:30:31:37:31:32:32:38:5f:31:35:32:31  rs_20171228_1521\n00000030  38:2e:74:78:74                                   8.txt\n```\nSo when delete() doesn't succeed in deleting a file it, by default, thinks that perchance the file is actually a directory and tries a recursive delete on it. So _delete_recursive() is called. Thinking the \"file\" is a directory _delete_recursive() calls _list(), which sends the OPENDIR packet. This explains why, in the SFTP logs, it does REMOVE and then OPENDIR.\nBased on the filename of ILS_Orders_20171228_15218.txt I'm assuming it isn't actually a directory and yet the SFTP server responds as tho it was. \nWhat happens next is a bit bizzare. The server actually responds with a handle.\nWhen I try to open a file as a directory on my server the server responds with this:\n<- NET_SFTP_STATUS (0.0587s)\n00000000  00:00:00:02:00:00:00:0c:4e:6f:20:73:75:63:68:20  ........No such\n00000010  66:69:6c:65:00:00:00:00                          file....\nSo I'd say your server is misbehaving.\nAt this point the server attempts to update the stat cache based on it's understanding that the file just opened is a directory. The only problem is that the file is already in the stat cache as a file and therein lies the problem.\nhttps://github.com/phpseclib/phpseclib/commit/30a11a3951ffcf36c157147285c9111f630fac08 should fix the immediate issue at hand but the stat cache is gonna be all messed up with the way this server is behaving.\nAs for trying to open something to determine if it's a directory....  sometimes that's just the way you gotta do things in SFTP. In-so-far as phpseclib knows /Dev/Outbound/ILS_Orders_20171228_15218.txt used to be a file but then it was changed to a directory after phpseclib did OPENDIR on /Dev/Outbound. I suppose phpseclib could do another OPENDIR on /Dev/Outbound/ but the same thing could happen in theory - the file type could change after phpseclib did the OPENDIR. Plus, technically, the permissions could change too. Maybe if you do OPENDIR once the permissions of the directory are then changed to disallow reading whilst the ILS_Orders_20171228_15218.txt still has read permissions available to you.\nAll of that is pretty implausible, I will concede, but that doesn't mean it's impossible and phpseclib makes no assumptions as to plausibility.\nFact is, the server should not be letting a file be opened as a directory.\nKinda makes me wonder what'd happen if you tried to do $sftp->nlist('/Dev/Outbound/ILS_Orders_20171228_15218.txt') lol. > Did you see the \"no permission\" in the log? Does the user not have\npermission to delete the file and phpseclib then assumes its a directory?\nI did, however, I'm kinda treating error messages with a grain of salt.\nConsider what happened on my own server when I tried to open a file as a directory. I got a \"no such file\" error. Only problem: it does exist as a file - it just doesn't exist as a directory.\nIf you do rm dirname in bash you'll get a rm: cannot remove 'dirname': Is a directory error back. delete() basically tries to do an rm first. Then it tries rm -rf dirname. So that we can't delete directories as files has precedent within Linux. Of course, Linux's error is more verbose than the errors you can get back with SFTP. With SFTP you have an error code and then an error message. The error message should just be ignored because that can be in any language under the sun. So we're left with the error code. And here are the available error codes for SFTPv3:\nhttps://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#page-21\n#define SSH_FX_OK                            0\n        #define SSH_FX_EOF                           1\n        #define SSH_FX_NO_SUCH_FILE                  2\n        #define SSH_FX_PERMISSION_DENIED             3\n        #define SSH_FX_FAILURE                       4\n        #define SSH_FX_BAD_MESSAGE                   5\n        #define SSH_FX_NO_CONNECTION                 6\n        #define SSH_FX_CONNECTION_LOST               7\n        #define SSH_FX_OP_UNSUPPORTED                8\nThere is no SSH_FX_IS_A_DIRECTORY error code so the server is forced to pigeonhole the actual error into one of the available error types (SSH_FX_NO_SUCH_FILE).\nIn the OP's case the server gave us SSH_FX_PERMISSION_DENIED back. I'm gonna assume that that actually is the issue but, as I've demonstrated above, already, error codes can't necessarily be taken at face value. If the file actually was a directory would SSH_FX_PERMISSION_DENIED be any worse of a response than SSH_FX_NO_SUCH_FILE?\nMaybe OpenSSH on Linux always predictably responds with the same thing but what about on other OS's or other SFTP servers?. > I am guessing that there is no way to know if a file is deleted or not?\nOne thing that might be a good idea in your case: disable the stat cache. idk how you'd do that with Flysystem but if you could access the underlying phpseclib SFTP object you could do $sftp->disableStatCache(). At that point you could do $sftp->stat('/Dev/Outbound/ILS_Orders_20171228_15218.txt') to see if the file existed after a deletion attempt.. phpseclib doesn't have a file named NBSParser or a VGCore directory.... So you posted this thinking that because phpseclib uses unpack without error that they might be able to provide you advice on how to fix the error you're encountering?\nIf so then it's really context dependent.\nhttp://php.net/pack says, of I, that it's an \"unsigned integer (machine dependent size and byte order)\". The fact that it's size and byte order is variable is why I'd never use I in unpack. Maybe it's expecting four bytes, maybe it's expecting eight. It depends, I guess, on if your host machine is 32 or 64-bit.\nIn your code $bin is 4, which means that this is the code that'll get executed:\nphp\nsubstr($this->buff, ($this->offset += $bin) - $bin, $bin);\nSo what if $this->buff is 'abcdefgh' and $this->offset is 6? At that point you'd have substr('abcdefgh', (6 + 4) - 4, 4) == substr('abcdefgh', 6, 4) == 'gh'.\nMaybe in a correctly formatted NBS file that should never happen but sometimes you'll be given improperly formatted stuff and the code still ought to fail gracefully in spite of it.\nAnyway, this question would be much better asked on stackoverflow. There are lots of people who are qualified to answer this question - some even more qualified than myself. And I don't have 24/7 availability. I have to sleep, have to go to work, etc, but on stackoverflow it's a bunch of different people from all over the planet. And the phpseclib issue tracker is really best suited to phpseclib issues. If people are asking general PHP questions legit phpseclib issues may be missed or my responses to them delayed.. This is not a change I will be making at this time. https://github.com/phpseclib/phpseclib/pull/1084#pullrequestreview-17805854 elaborates but to provide a more succinct summary...  this approach will not be used when the master branch is tagged 3.0.0 or the 3.0 branch created from it. This approach is more of a place holder until a better approach can be found.\nSSH2.php (which is what primarily uses this) has not been significantly rewritten. Portions of the master branch have already been significantly rewritten (eg. RSA.php). A significant rewrite is on the horizon for SSH2.php but right now my priority is implementing ECDSA (prime finite fields over short weiestrass curves are mostly done; still need to do twisted edwards curves and binary finite fields). After that my focus will be X509.php. Then I'll do SSH2.php and that's when I'll come up with a better approach for dealing with this. Until then -and as I said - it's more of a place holder. A way to make sure that variables that should not be public are not public whilst not breaking unit tests.\nIn my earlier elaboration I suggest that one possibility is that the unit tests for SSH2.php could simply be deleted but I think they're still useful as they help identify merge conflicts arising from merging the 2.0 branch.. It'd break SSH2.php too. Pretty much anywhere a substr or a strlen or whatever is done would be at risk of breaking. Without mbstring.func_overload strlen() will always return the same length for a string. But with it? With it the length will depend on whatever the default character set is, which breaks almost everything.\nLike let's say you have an SSH packet like \"\\0\\0\\0\\4xxxx\". That first four bytes tell the SSH client the length of the next x bytes. So phpseclib would do _string_shift(), which calls substr(). If you try to shift by 4 bytes and instead wind up actually shifting by 6 or so because multi byte encoding is being used then the next set of bytes you need to read from that string would be offset by 2 and the whole thing is liable to break.. mbstring.func_overload can indeed be disabled by an ini option but only in php.ini. ini_set in a PHP script won't work. https://stackoverflow.com/a/8526698/569976 elaborates.. https://github.com/paragonie/constant_time_encoding/blob/master/src/Binary.php does an if check every time you want to do a substr(), strlen(), etc. I don't want to do that out of concern for speed. ie. I don't want to sacrifice performance on 99% of PHP environments so that phpseclib can run on 1% more machines than it currently does. Especially for such a dumb feature that shouldn't have ever been implemented in the first place.\nI mean, I'm also kinda of the mind if you're using a host you have no control over then let this motivate you to send your host an email to disable this feature (phpseclib isn't the only thing it breaks) or just find another host all together.\nIf someone wants to replace all string functions in phpseclib with an approach like that they're free to do so. I'd need to see benchmarks before I'd consider merging it however. I'd probably do additional benchmarks myself but anyone submitting a PR would do well to write their own as well.\nAnd I'd probably leave such a PR open for a good while to allow others to chime in. But yah the idea of such a change does not particularly enthuse me.. One possibility is that the method you're trying to use to get the log files isn't correct. Could you post how you're doing that, just for my own edification?\nAssuming you are doing it correctly than it sounds like maybe something like fsockopen is failing. In phpseclib 2.0 fsockopen has it's errors suppressed. eg. it does @fsockopen. I'd remove the @ and see if you get any errors from that.\nAlso, do the same thing for @stream_select.. It's in SSH2.php (SFTP.php extends SSH2.php). Does https://github.com/phpseclib/phpseclib/issues/742#issuecomment-122351289 let you do what you're needing?. The time limit does sound like the most likely culprit. It would be interesting to see how long the script actually is running according to the Apache logs. You can have that info added to the Apache logs using the methods described at https://blog.elijaa.org/2010/09/07/how-to-make-apache-log-real-scriptname-and-execution-time-with-mod_rewrite-and-logformat/\nAnother possibility would be to add real time logging. eg. do define('NET_SSH2_LOGGING', 4); define('NET_SSH2_LOG_REALTIME_FILENAME', 'somefile.txt'); at the top of the file and then run it. Real time file logging will never exceed more than 1mb. If it goes over 1mb it'll go back to the beginning.. Something I'm curious about...\nIn https://github.com/phpseclib/mcrypt_compat/commit/33b727da70895e160f04194fc749f53821ce18be nightly tests were added but failures were allowed in them. In this one you add nightly tests but aren't allowing failures.\nDo you have any thoughts on that approach vs this approach?. Can you post your code? I tried to sign a CRL and encountered no issues:\n```php\n<?php\nrequire_once DIR . '/vendor/autoload.php';\nerror_reporting(E_ALL);\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\File\\X509;\n// Load the CA and its private key.\n$pemcakey = '-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQC0N7wYdy8DdSa4DCk6gyVIndq7N896/OFFOMJ6GCacXmSIUH5+\nJptX8mOsq0czAklA6InRqe8c+PCI4BP3hmvZJpANxhu/UrZOxwHxCq3twPERXoyV\nhMd9+fsfKtNJWCmv5R25MrvUAisvOZvBPn1Jf7efX6vusm3WAEdDyK8hmwIDAQAB\nAoGAKZVar4KAtJmJj5ouwTOVnMXfvKdKFqTXDfPk2+tKrXYSWGnKZi1eVtK1MRhs\nW1bBtFpzwo8lf1fpmIurz8eShqsK5cZqY1bV/0g2nyKVFkUJJsULGkOLkOGo1Ac1\nlh1bBPtQVYw5iy6WydxVNWps5/cYm60q7e2MgB7rbFxYrSECQQDsl38TAyDu5/PK\n44DdY4Je/y26fXwuzkw7V/Tk2VfCv1pYqx+65Z7JG75la22Q7hlWipsRvt2M2VyX\nX/pV3+0JAkEAwwBdYVORzs72fak7pJGKZPfRUgX4E4wHb3LSPfViYeXxoM7QYFIj\nV/ke6FDvs51M31JqsdSjCFpygzgENn2mgwJBAMGs7uCQchhAlykife49tI6xlCyS\n5uKmDG+T/CyO4zHQVVQ6mZn0uLxm0sDRZXr7/pACnRi0x0ay9QISFqrPyYkCQHoC\nymrRTVQnLxelQgpQflV6seAul/AzF5vmLiJSXUKAC9XgUYVTH4Y1+97EdZbe/3Bk\nMxodv/zECw6LiCdIK10CQQC2b11DZvuvb5CL7fWf/1Kc1bYD1Je/K+g3WWyRe3cs\nI59zJcLzCoX0W6JWI6WLX3TycOWpU+Y/5k3urpNf+l4s\n-----END RSA PRIVATE KEY-----';\n$cakey = new RSA();\n$cakey->loadKey($pemcakey);\n$pemca = '-----BEGIN CERTIFICATE-----\nMIIBwzCCASygAwIBAgIUUFQqs3DNCuPEHmCO7tF4btMiKD8wDQYJKoZIhvcNAQEF\nBQAwHjEcMBoGA1UECgwTcGhwc2VjbGliIGRlbW8gY2VydDAeFw0xODAxMjAxNDEy\nMTVaFw0xOTAxMjAxNDEyMTVaMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1vIGNl\ncnQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALQ3vBh3LwN1JrgMKTqDJUid\n2rs3z3r84UU4wnoYJpxeZIhQfn4mm1fyY6yrRzMCSUDoidGp7xz48IjgE/eGa9km\nkA3GG79Stk7HAfEKre3A8RFejJWEx335+x8q00lYKa/lHbkyu9QCKy85m8E+fUl/\nt59fq+6ybdYAR0PIryGbAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAES2cxZ2WopL2\n35LgFDo5bfmmMgPeRutRz5+uajPen3dCX/NKLgNdynhvEtfE51xdyLkX2dOzd+FB\nE2kIP8bOCn2CoW7vLB/9PSyZLlfCkZ3b0gKanU44tH5DC35IrCGke7OC8AaSKl3/\n17fMuQ+Q2q0WXr1hdAmydRJwaIj00jo=\n-----END CERTIFICATE-----';\n$ca = new X509();\n$ca->loadX509($pemca);\n$ca->setPrivateKey($cakey);\n// Build the (empty) certificate revocation list.\n$crl = new X509();\n$crl->loadCRL($crl->saveCRL($crl->signCRL($ca, $crl)));\n// Revoke a certificate.\n$crl->setRevokedCertificateExtension('1234', 'id-ce-cRLReasons', 'privilegeWithdrawn');\n// Sign the CRL.\n$crl->setSerialNumber(1, 10);\n$crl->setEndDate('+3 months');\n//$crl->setExtension('id-ce-keyUsage', array('encipherOnly'));\n$newcrl = $crl->signCRL($ca, $crl);\n// Output it.\necho $crl->saveCRL($newcrl) . \"\\n\";\n```\nBy default at least one extension is added to CRL's with phpseclib: cRLNumber:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.9/phpseclib/File/X509.php#L3755\nHere's what setExtension does:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.9/phpseclib/File/X509.php#L4146\nie. if the extension is already present it'll try to replace it. Otherwise it'll append it to the end of the extensions array using $extensions[] = $newext, which starts with zero.\nEven if you tried to remove an extension it should reindex everything after the fact:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.9/phpseclib/File/X509.php#L4065\n(in particular, see the array_values). So I have no idea how you're getting this error message.... I was able to duplicate the problem.\nThis appears to be a PHP bug. phpseclib calls array_values and expects it to re-index at 0 except it's not - it's sometimes reindexing at 1.\nIt looks like there's already a bug report about it:\nhttps://bugs.php.net/bug.php?id=75433\nhttps://bugs.php.net/bug.php?id=75653\nI'll contemplate possible workarounds.\nThanks for reporting!. https://github.com/phpseclib/phpseclib/commit/8aecafc92fc229f50ec8f9d34ca272fbc6a73f2a should fix this if you want to confirm.. Good to know - thanks!. So in the stacktrace we can see that the destructor is called but then when the destructor tries to send what is presumably a NET_SSH2_MSG_DISCONNECT packet but it can't because the server is closed and thus you're encountering that error.\nAnyway, I think the issue is that some servers - routers in particular - just don't support multiple exec's. http://www.frostjedi.com/phpbb3/viewtopic.php?p=117471#p117471 talks about this issue some.\nmetaclassing's suggestion should work since I guess his lib uses approaches that may well only work on routers to kinda emulate multiple exec()'s.. The issue is your use of negative numbers.\nLet's say you're using 4-bit signed integers. At that point -1 would be represented thusly:\n1111\neg. every bit is 1. So -1 with 32-bit signed integers would have 32 \"on\" bits.\nSo how would that work with arbitrary precision integers? Using that approach you'd have an infinite number of 1's. ie. BigInteger(-1) would give you a \"PHP Fatal error:  Allowed memory size of x bytes exhausted\" every time.\nIn your first example you do 1 ^ -2. -2 is represented in two's complimenet thusly:\n1110\n1 is represented thusly:\n0001\n1110 XOR 0001 is 1111 or -1.\nIn phpseclib -2 is represented the same way as 2:\n10\n1 is represented as 1.\n01 XOR 10 is 11 or 3.\nNow it does look like GMP mode is behaving differently. Currently phpseclib is just passing the two parameters to gmp_xor but gmp_xor returns a result that matches $a ^ $b.\nI have an idea as to how this might be accomplished.\nWhen you have a negative number assume it has as many leading 1's as the positive number has bits.\nIf both numbers are negative then you find the position of the most significant 0 digit of both and then pad both with 1's such that their length matches.\nPursuant to that we could also handle \"not's\" of negative numbers differently. eg. pad negative with x 1's and then do a \"not\" on that, assuming that the precision is equal to the new size of the number. And even if the number is a multiple of what you're padding to then you should still pad, as you would, with PKCS1. \nThat said, I'm disinclined to implement this behavior in the 1.0 or 2.0 branches as it would be a BC break. If maintaining BC would mean that there would be instances in which Hash.php (which in some places uses BigInteger to do bitwise operations) would never be able to give the correct result I'd consider breaking BC then but otherwise I'm pretty disinclined to do so.\nSo for the 1.0 / 2.0 branch I'll fix the GMP discrepancy and I'll add this (changing the behavior of not and xor for BigInteger) to my list of things to do for the 3.0 branch.. The logging parameter you have is telling phpseclib to do real time logging so what is it outputting?\nAs is all I'm seeing is that the \"Connected to WS\" message and the \"Logging in to device...\" message were sent at the same time. How much time it ought to take between the PHP scripts initial call and the call to $ssh->login() depends on lots of factors but idk that the two stuff being output at the same time is exactly a red flag either.. validateSignature's one parameter is true by default per this:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.9/phpseclib/File/X509.php#L2162\nWhat you probably want to do is this:\nphp\necho $x509->validateSignature(false) ? 'valid' : 'invalid';\nInstead of $x509->validateSignature(true). I'll try to update that in the next few days. Need to make a few other changing to the documentation as well.\nThanks!. Can you post your SFTP logs? You can get them by doing define('NET_SFTP_LOGGING', 2); and then $sftp->getSFTPLogs(); after the error.\nIt looks like the reason you're getting the error that you're getting is that it's using SFTPv4 style packets whilst claiming to support SFTPv3.\nHere's what the SSH_FXP_NAME packet looked like in SFTPv3:\n```\nThe SSH_FXP_NAME response has the following format:\n\n    uint32     id\n    uint32     count\n    repeats count times:\n            string     filename\n            string     longname\n            ATTRS      attrs\n\n```\nSource: https://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#page-22\nHere's what it looked like in SFTPv4:\n```\n   The SSH_FXP_NAME response has the following format:\n    uint32     id\n    uint32     count\n    repeats count times:\n            string     filename [UTF-8]\n            ATTRS      attrs\n\n```\nSource: https://tools.ietf.org/html/draft-ietf-secsh-filexfer-04#page-29\nThe changelog for 4.0 even makes mention of this:\no  Removed the long filename from the names structure-- it can now be\n      built from information available in the attrs structure.\nSource: https://tools.ietf.org/html/draft-ietf-secsh-filexfer-04#section-10.1\nphpseclib doesn't currently support SFTPv4. If a server only supported SFTPv4 $sftp->login() would return false. But maybe in this case the server simply has a buggy SFTPv3 implementation. Like maybe it's claiming it's SFTPv3 when it's really SFTPv4. At that point implementing SFTPv4 support and making it so phpseclib renegotiates the version when the server supports SFTPv4 might help.\nBut yah - provide the SFTP logs first. That'll let me confirm this hypothesis.\nThanks!. Does https://github.com/phpseclib/phpseclib/commit/1468ef1a23f66b09b8e906f05ddfa6c3f5236202 fix the issue for you?. @DavidAnderson684 - looking at the changelog...  looks good to me!\nOne thought (in looking at https://wordpress.org/support/topic/php-7-error-11/)...  that is a legit issue, in looking at the relevant file:\nhttps://plugins.trac.wordpress.org/browser/ssh-sftp-updater-support/trunk/class-wp-filesystem-ssh2.php\nTry doing something like https://3v4l.org/MHs2R\nIt produces an E_STRICT notices on older versions but that's unavoidable. phpseclib 1.0 does the same thing to work on PHP4-PHP7.2. If you switch the order of the constructors you'll get E_STRICT's on pretty much every 5.x version: https://3v4l.org/vVjp7\n. Works for me:\n```php\n$start = microtime(true);\n$ssh = new SSH2('www.google.com', 1);\n$ssh->setTimeout(2);\nif (!$ssh->login('test', 'test')) {\n    $elapsed = microtime(true) - $start;\n    exit(\"unable to login\\ntook $elapsed seconds\\n\");\n}\n$elapsed = microtime(true) - $start;\nexit(\"login successful\\ntook $elapsed seconds\\n\");\n```\nWith the $ssh->setTimeout(2); it takes 2 seconds. Without it it takes 10 seconds (the default timeout).\nThis particular example demonstrates slowdowns in fsockopen but it's possible your slowdown is occurring elsewhere. Try doing define('NET_SSH2_LOGGING', 3); at the top of your PHP file and then posting the output.  If the slowdown isn't in the fsockopen part of the code that should reveal where it is.\nThanks!. I'd be curious to know what the full error message was - not just the file name / line number.\nAnyway, my guess, based on the info provided thus far: try putting set_time_limit(0); at the top of your PHP file.. What version of phpseclib are you usng? I tried looking at line 1038 on versions 2.0.10 through 2.0.0 and didn't see any line that could emit that error. eg. I saw this:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.0/phpseclib/Net/SSH2.php#L1038\nhttps://github.com/phpseclib/phpseclib/blob/2.0.10/phpseclib/Net/SSH2.php#L1038\nMy guess would be that that's the line that has fsockopen. If that's the case then you should be able to reproduce the problem by doing fsockopen($host, $post) on the two machines. It should work locally but not on your host.\nAnyway, it's possible it's an issue with your iptables configuration. Or maybe you're trying to connect to a machine on your local machine's LAN whereas the production machine is not on the same LAN.\nSELinux can also cause issues. https://stackoverflow.com/a/13608942/569976 elaborates.. > \"SELinux can also cause issues\" - I use on a hosting. I can not change the settings (setsebool -P httpd_can_network_connect 1)\nI would suggest contacting your hosting provider then. Give them a script with just fsockopen and tell them that fsockopen can't connect and that you need it to.\nIf you give them a script with all of phpseclib they're gonna have to debug phpseclib to figure out what's up with the script and there's no need for that - we've already diagnosed the problem and it's not phpseclib. Plus, the more extra code you give them the more opportunities they have to misdiagnose the problem.. Looks like you posted this on https://stackoverflow.com/q/49421661/569976 . Does that solve the problem you're having?. > It doesn't appear needed (7a628c6) but I assume that change is waiting for a major release.\nCorrect. It'll be in the 3.0 release.\nFor the actual code changes...  I'd say all of this ought to be in the if statement:\nphp\n                    ob_start();\n                    @phpinfo();\n                    $content = ob_get_contents();\n                    ob_end_clean();\n                    preg_match_all('#OpenSSL (Header|Library) Version(.*)#im', $content, $matches);\nAlso, I wouldn't do the yoda conditions because they're not done anywhere else in the code and doing them in one place but not in any other would be inconsistent and I think consistency trumps their benefits. ie. I'd just assume employ an \"all or none\" approach.. @weshooper - That wouldn't solve the issue that the phpinfo() check was aiming to solve. It's been years since the change was implemented but best guess: it was the following two links which were the impetus for the change:\nhttps://stackoverflow.com/questions/16628102/php-openssl-openssl-private-encrypt-crashes-webpage/16636809#16636809\nhttps://bugs.php.net/bug.php?id=55470&edit=3. It's the intended behavior for 1.0 and 2.0.\nSome modes require the plaintext / ciphertext be a multiple of the block size. CTR does not but CBC does and you're using CBC in your example.\nWhen padding is disabled but the plaintext is none-the-less not a multiple of the block size phpseclib 1.0 / 2.0 will pad it with PKCS1 padding none-the-less. An error will be emitted with user_error but padding will basically be turned back on.\nSo phpseclib PKCS1 pads the plaintext whereas mcrypt null pads it.\nOther ways phpseclib 1.0 / 2.0 deal with bad input...  if the key isn't long enough it's null padded and if the IV isn't null enough it's null padded. Both of these behaviors are consistent with mcrypt. If the key or IV aren't present at all they're assumed to be all null bytes.\nIn the master branch this behavior is different. The master branch is a lot less tolerant of user error. If the key or IV aren't long enough (or aren't specified at all) you get an Exception. If padding is disabled and the plaintext (or ciphertext) isn't long enough you get an Exception.\nThe master branch takes the philosophy that cryptographic primitives ought not be used unless you know what you're doing and if you're making mistakes like the above then it ought not make your life easier by silently working around them. The 1.0 / 2.0 philosophy (inspired by mcrypt) was \"let's try to massage bad input as much as we can\".. The master branch isn't meant to be backwards compatible with the 1.0 and 2.0 branches.\nThat said, I'll still be maintaining and supporting 2.0 once 3.0 is released. If you want to use 2.0 there's no reason to stop. Just look at the 1.0 branch. Even that branch is still getting releases... If app/public.crt is an X.509 cert then you'd need to do something like this:\n```php\n$data = 'test';\n$rsa = new RSA();\n$x509 = new X509();\n$privatekey = file_get_contents(storage_path('app/private.pem'));\n$rsa->loadKey($privatekey);\n$signed = $rsa->sign($data);\n$publickey = file_get_contents(storage_path('app/public.crt'));\n$rsa = $x509->loadX509($publickey)->getPublicKey();\nreturn $rsa->verify($data, $signed) ? 'verified' : 'unverified';\n```. Oh right - that makes sense - try this:\n```php\n$data = 'test';\n$rsa = new RSA();\n$x509 = new X509();\n$privatekey = file_get_contents(storage_path('app/private.pem'));\n$rsa->loadKey($privatekey);\n$signed = $rsa->sign($data);\n$publickey = file_get_contents(storage_path('app/public.crt'));\n$x509->loadX509($publickey);\n$rsa = $x509->getPublicKey();\nreturn $rsa->verify($data, $signed) ? 'verified' : 'unverified';\n```\nThanks!. Are you referring to how it's looping through the certs until it finds one that matches the subject DN and then using that public key?. I think the whole API they use is excessively verbose.\nYou can change the hash by doing this:\nphp\n$rsa->setHash('sha1');\nphpseclib uses RSASSA-PSS by default for signing. RSASSA-PSS does not include the OID of the hash being used. RSASSA-PKCS1-v1_5 does, however, that's not as secure as RSASSA-PSS.\nIf you want to use RSASSA-PKCS1-v1_5 you can do so by doing this:\nphp\n$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);\nIf you wanted to create a RSASSA-PKCS1-v1_5 with an OID that doesn't correspond to the hash algorithm being used (eg. a malformed signature)...  you can always write you're own padding code. You could  $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_NONE); and then do $rsa->encrypt(), which is equivalent to modular exponentiation (with the caveat that it'll still take advantage of the chinese remainder theorem). You could then simply copy / paste the code from the _rsassa_pkcs1_v1_5_sign method and adapt it to your purposes.. I guess it'd help to know what you are trying to do that you feel you need an API more like theirs... It's weird that that doesn't fail on Travis CI.\nAnyway, the latest commit should fix this. Here's a stand alone script that demonstrates the problem more simply:\n```php\n<?php\n$a = new BigInteger('00', 16);\n$b = new BigInteger();\nvar_dump($a->value);\nvar_dump($b->value);\n```\nThe two should have identical var_dump's but they don't.\nI added a unit test to capture the problem as well.\nThanks!. I like how it added the @throws docblock stuff but some of the other stuff are micro-optimizations, which I don't necessarily have a problem with, but if we're gonna go that route I'd just assume there be benchmarks. Is that something you could provide?\nThanks!. I've never used Blackfire lol. The way I normally benchmark stuff is just to loop over it a million times lol. And in this case I'm not sure a loop would be the most effective way to do the benchmark since I don't really expect anyone to do that stuff in a loop.\nI guess two possible ideas for benchmarking:\n\nUpload a 500mb file to an SFTP server with the changes and without.\nMaybe try to decode a really big CRL with File/X509.php with and without the changes.. It'd be more helpful if the dump was base64 encoded. As is I tried to run the code you posted and got no errors:\n\nhttps://pastebin.com/QgH3jSPT\nMy guess: the extended ASCII isn't keeping the same value when github / the browser / etc do their charset conversions.\nI tried to do git clone on a 902.1MB repo (with 32,993 objects and 19,907 deltas vs your 2,598 objects and 1,373 deltas) and it didn't give me the series of messages that you got. I mean, I see that it counts down when I do it with PuTTY (implying the same series of messages you got) but not when I do it with phpseclib on this particular server. It does clone the repo but it doesn't count down as it is with you. Maybe my server is just behaving differently with different terminals (phpseclib does vt100; PuTTY does xterm) idk.\nIn lieu of my being able to reproduce it, the base64 encoding would help.\nUnrelated...  I guess you're calling _getScreen() instead of getScreen() because you don't want the <pre>?. Try this:\nphp\n$CSR->setExtension('id-ce-subjectAltName',\n[[\n    'otherName' => [\n        'type-id' => '1.3.6.1.4.1.311.20.2.3',\n        'value' => [    \n            'utf8String' => \"user.name@domain.com\",  \n        ],    \n    ]\n]]);. It's related to this old (fixed) bug from 2012:\nhttps://pear.php.net/bugs/bug.php?id=19494\nThe problem is that it's doing empty($var) to see if it's empty. That test works if $var is '' or 0 or null, etc, but when $var is '0' that breaks things.\nidk if I can stay awake long enough to get the fix for this done tonight but we'll see.\nThanks!. https://github.com/phpseclib/phpseclib/commit/c63c2239726754249f025dc022f23ab76c70df9a should fix this.. I'll try to do so this weekend. Maybe sooner, time permitting, we'll see.. 1.0.11 has been released.\nThanks!. Can you connect with to localhost with the CLI ssh client? If not then the problem isn't exclusive to phpseclib and is probably a problem with how you have your account setup on your Mac. At which point this question would probably be better posted on superuser.com.\nThat said, a few thoughts.\n\nIs the public key corresponding to your private key in your /Users/matt/.ssh/authorized_keys file?\nIs the permission on the key correct?\n\nMaybe one thing you could try to do is to do tail /var/log/auth.log from one window and then connect via SSH with an RSA key with the other.. You could remove some of the error suppression. Shouldn't matter for the fsockopen since, for that, the error is output when that returns false, but who knows. It could maybe be the stream_select too:\nphp\nif (!@stream_select($read, $write, $except, $sec, $usec) && !count($read)) {\nIt's also possible that you have selinux installed but I'd think fsockopen would return an error for that.\nThere could also be some iptables issues going on. Or maybe you're trying to connect via a hostname and you have the hostname mapped weirdly in your /etc/hosts file. If you're using AWS there could be some additional firewall rules for the machine that the OS doesn't know about.. idk what version of phpseclib you're using but it's defined in both.\nIn 2.0.11 it's initially defined in the constructor:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.11/phpseclib/Net/SSH2.php#L966\nSo a bunch of arrays are defined and then $this->_define_array() is called. _define_array loops through these arrays and defines them there:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.11/phpseclib/Net/SSH2.php#L4073\n1.0.11 works the same way:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.11/phpseclib/Net/SSH2.php#L1017\nSo if you're using the latest version of phpseclib than I don't see how that's possible. If, otoh, you're using a ten year old version, then sure, maybe it is possible that that error could occur. idk what all bugs have been fixed for the past ten years but it's possible that one of them is the exact issue you're reporting. It's not a recent release that fixes this tho, that much I know. . None of the changes made between 2.0.10 and 2.0.11 should affect this but if it works it works I guess... _parseKey is not in the master branch. The master branch uses a plugin based approach. I do not plan on removing it from either the 1.0 or 2.0 branches.. Are you able to reliably reproduce this?\nThis bit sticks out to me:\n```\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 14.5402, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:09:73:75:62:73:79:73:74:65  ........subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n```\nIn Net/SFTP.php there's this:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.11/phpseclib/Net/SFTP.php#L465\n```php\n        $packet = pack(\n            'CNa*N3',\n            NET_SSH2_MSG_CHANNEL_OPEN,\n            strlen('session'),\n            'session',\n            NET_SFTP_CHANNEL,\n            $this->window_size,\n            0x4000\n        );\n        if (!$this->_send_binary_packet($packet)) {\n            return false;\n        }\n        $this->channel_status[NET_SFTP_CHANNEL] = NET_SSH2_MSG_CHANNEL_OPEN;\n        $response = $this->_get_channel_packet(NET_SFTP_CHANNEL, true);\n        if ($response === false) {\n            return false;\n        }\n    $packet = pack(\n        'CNNa*CNa*',\n        NET_SSH2_MSG_CHANNEL_REQUEST,\n        $this->server_channels[NET_SFTP_CHANNEL],\n        strlen('subsystem'),\n        'subsystem',\n        1,\n        strlen('sftp'),\n        'sftp'\n    );\n    if (!$this->_send_binary_packet($packet)) {\n        return false;\n    }\n\n```\nSo phpseclib is sending the channel open packet and then it's expecting a response from the server but 15s later it doesn't get one and then phpseclib sends the channel request packet.\nLater, in SSH2::_get_channel_packet there's this:\nhttps://github.com/phpseclib/phpseclib/blob/1.0.11/phpseclib/Net/SSH2.php#L3698\nphp\n            if (!strlen($response)) {\n                return '';\n            }\nI think that line is being hit. If you could maybe add an exit('this far'); there to confirm that'd be cool. That should probably be a return false; instead of a return ''; but that won't fix the issue either. Overall the server just ought not be sending empty packets. Maybe phpseclib ought to loop until it finds a non-empty packet. I'll research that.. > Yes, most of the time (succeeding happens sometimes, but less often).\nWould it be possible to give me access to the server?\n\nI've tweaked the line as you suggested, and added an error_log() too for good measure. Nothing changed - execution continued (which was confirmed by adding another error_log() after as well).\n\nCould you do var_dump on $response then, before the if (!strlen($response)) { check? The thing is...  I'm not able to reproduce the problem with anything other than an empty string. It's like the server is timing out but it's not sending a '' because if it did that the output would be different. It's not sending out a false then if ($response === false) { would be met.\n\nThere's a fragment with precisely that (which can never be matched) immediately afterwards.\n\nGood catch. That should definitely be removed. I'll try to do it as time permits.\nThanks!. > An SFTP login on the SFTP server that manifests the problem?\nYup.\n\nP.S. If so... how to send you these login details?\n\nYou can email them to terrafrost@php.net.\nThanks!. I was able to make it work with the latest commit and with this code:\n```php\ninclude('Net/SFTP.php');\n$sftp = new Net_SFTP(...);\n$sftp->setTimeout(0);\n$sftp->login('user', 'pass');\nprint_r($sftp->nlist());\n```\nThe issue was this packet:\n```\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0009, network: 0.0002s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 25.5383, network: 25.5235s)\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\n00000030  00:01:00:00:01:01:00:a3:f0:9f:8b:23:46:b7:77:5a  ...........#F.wZ\n00000040  17:7a:11:2d:74:4f:7f:80:66:82:bb:3b:33:ed:b8:77  .z.-tO..f..;3..w\n00000050  30:5e:0d:a6:b4:55:9a:13:1d:fe:95:87:75:ac:b7:c6  0^...U......u...\n00000060  10:b4:d1:b0:8d:a9:8a:e8:0a:61:5d:40:8d:70:3e:79  .........a]@.p>y\n00000070  f1:94:52:b2:4e:26:ce:53:7e:7f:2c:7d:cb:03:21:64  ..R.N&.S~.,}..!d\n00000080  c7:42:65:73:d0:8b:1c:b4:f5:ba:d0:1b:0f:04:9c:e7  .Bes............\n00000090  cc:f8:b8:d6:ec:20:fe:82:20:b6:73:8a:bf:ef:4a:a5  ..... .. .s...J.\n000000a0  6b:37:72:53:86:8c:a2:8e:66:88:72:32:35:dc:61:5a  k7rS....f.r25.aZ\n000000b0  c4:c7:b1:83:96:53:c9:4d:e8:07:32:ad:36:77:16:d8  .....S.M..2.6w..\n000000c0  46:8a:ec:1c:6d:3d:73:da:0c:ba:4b:29:a6:83:47:43  F...m=s...K)..GC\n000000d0  e2:15:a2:df:f4:d7:c0:eb:5b:f1:1a:1a:c6:a0:8b:1e  ........[.......\n000000e0  ea:29:7a:e7:d2:e1:18:4a:90:30:cc:80:ca:38:b5:c7  .)z....J.0...8..\n000000f0  b1:d2:b2:b4:e1:ac:2a:fa:3b:d0:b0:da:da:ce:82:51  ......*.;......Q\n00000100  a0:11:c8:8c:f8:32:1b:a3:f8:c3:b2:7d:03:40:89:c4  .....2.....}.@..\n00000110  66:ab:ef:b2:4c:ed:8b:2b:1a:23:48:ed:c4:ff:44:41  f...L..+.#H...DA\n00000120  03:89:52:f7:24:9b:7f:0a:ca:59:72:dd:cc:fe:07:91  ..R.$....Yr.....\n00000130  8d:d1:5b:75:e1:a6:83:00:00:00:68:00:00:00:13:65  ..[u......h....e\n00000140  63:64:73:61:2d:73:68:61:32:2d:6e:69:73:74:70:32  cdsa-sha2-nistp2\n00000150  35:36:00:00:00:08:6e:69:73:74:70:32:35:36:00:00  56....nistp256..\n00000160  00:41:04:e5:df:54:61:ba:a4:77:a0:e4:0a:d3:86:26  .A...Ta..w.....&\n00000170  1d:46:c7:8b:d8:12:3a:40:3f:90:65:76:20:fd:9a:91  .F....:@?.ev ...\n00000180  54:c5:eb:d4:18:68:5f:f0:86:ba:3d:ee:8e:73:fd:36  T....h_...=..s.6\n00000190  cb:99:2c:bd:5f:e8:7d:fe:42:18:79:4e:02:85:3e:94  ..,._.}.B.yN..>.\n000001a0  8b:1f:5a:00:00:00:33:00:00:00:0b:73:73:68:2d:65  ..Z...3....ssh-e\n000001b0  64:32:35:35:31:39:00:00:00:20:0f:62:03:b6:58:7c  d25519... .b..X|\n000001c0  30:f4:d0:4e:3c:5b:2d:30:bc:95:2c:63:0e:39:ed:11  0..N.[-0..,c.9..\n000001d0  4b:b2:80:e2:fd:4b:bf:9a:f6:a2                    K....K....\n```\nphpseclib sends a NET_SSH2_MSG_CHANNEL_OPEN packet and then, 30 seconds later, the server responds with a NET_SSH2_MSG_GLOBAL_REQUEST packet. The problem is in the fact that the server took 30 seconds to respond. phpseclib, by default, times out after 10s so it assumes it won't be getting a response. Setting the timeout to 0 fixes that but only after this commit that I just made has been applied:\nhttps://github.com/phpseclib/phpseclib/commit/9b49d3c590f39258db3c99aae6fdde107b74125c\nThe fact that that packet takes 30s to send is weird but I tested it with other SFTP clients and had similar delays. Quoting the logs from FlashFXP:\nLike with FlashFXP...  I tried it just now and got this:\n[08:18:48] [R] SSH Connection open\n[08:19:13] [R] Connection established with OpenSSH_7.4 (SFTP v3)\nI tried connecting with PuTTY, too, but PuTTY doesn't appear to show timestamps in its logs.\n. Yah - that should work. The only problem I could see is with PHP's max_execution_time and Apache timeout settings. For the former you could do set_time_limit(0); but there probably isn't much that can be done for the latter.. Interesting.\nThanks for the update!. Nice find! Sorry for not responding sooner - I was busy at work and intended to look at this over the weekend but it sounds like you figured it out yourself :). I installed PHP 7.0.30 on my system and had no issues with the code you posted.\nHere's what php -v on my system returns:\nPHP 7.0.30 (cli) (built: Apr 24 2018 16:16:46) ( ZTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\nMy code:\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nerror_reporting(E_ALL);\nuse phpseclib\\Math\\BigInteger;\nuse phpseclib\\Crypt\\RSA;\ndefine('MATH_BIGINTEGER_ENGINE', BigInteger::MODE_INTERNAL);\n$rsakey = '-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp\nwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5\n1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh\n3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2\npIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX\nGukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il\nAkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF\nL0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k\nX6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl\nU9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ\n37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=\n-----END RSA PRIVATE KEY-----';\n$message = 'asdfasdfasdfasdfasdf';\n$rsa = new RSA();\n$rsa->loadKey($rsakey); // public key\n$rsa->setSignatureMode(RSA::SIGNATURE_PKCS1);\n$rsa->setHash(\"md5\");\n$signature = $rsa->sign($message);\n```\nI was running 2.0.11 as you are.\nMaybe it's an issue that only manifests itself with a specific RSA key? Maybe it only manifests itself with a certain message? You omitted those from your example I note...\nWhat version of PHP 7.0 are you running? 7.0.30? 7.0.15? Something else?. I took a look at the line # you mentioned...\nhttps://github.com/phpseclib/phpseclib/blob/2.0/phpseclib/Math/BigInteger.php#L3765\nphp\nreturn ($x - ($x % $y)) / $y;\nI could do a if ($y == 0) return null; line or something but, (1) it seems like throwing an exception is better, (2) it's not like you're calling _safe_divide directly and (3) it could be a symptom of a problem further up the line. ie. why is $y being set to 0 in the first place?\nI don't expect you to do debugging but you could at least provide a key and a message that reproduce the problem.... I'm just wanting to know because phpseclib should work without bcmath. If there's a bug in the pure-PHP BigInteger engine (as opposed to the BCMath engine that I guess you're now using) I'd like to know about it... You're going to need to provide a little more code.\nWith the code you posted I obviously can't reproduce the problem as I don't have a key.\nBut even posting that wouldn't be sufficient. How are you producing the ciphertext you're wanting to decrypt? I assume you're using OAEP padding? OAEP has two hash functions - the main hash function and the MGF hash. Which one are you setting to sha256? Are you setting both to sha256? In Java there's \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\". Java's default crypto provider implements it as does BouncyCastle but they implement it differently. Both use sha256 as the hash but Java's crypto provider still uses sha1 as the MGF hash whereas BouncyCastle uses sha256.. @kpawel-29 - I'd say you'd be better off making a new post instead of replying to an existing one.\nThat said, idk anything about XML canonicalization. But I might be able to provide more insight if you were to provide the code that yo used to generate the signature in the first place?. OpenSSL doesn't support \"continuous mode\", which is what SSH uses. As an example of what that means... say you have a plaintext $a. If you do $b = encrypt($a); $c = encrypt($a); would you expect $b and $c to be equal? Would you expect $b . $c == encrypt($a . $a)? In fact, with PHP's OpenSSL bindings $b  and $c would be equal and $b . $c would probably not equal encrypt($a . $a).\nWith SSH, however, $b and $c should not be equal. The state should not be reset with each successive crypt call and yet with PHP's bindings to OpenSSL it is.\nphpseclib is able to emulate this \"continuous mode\" for block ciphers but not for stream ciphers such as RC4. This is why mcrypt is being preferentially used over OpenSSL.. Looks like the same issue as described in #1271.  The latest git version should fix the issue for you provided you do this:\n```php\n$sftp = new \\phpseclib\\Net\\SFTP(...);\n$sftp->setTimeout(0);\n$sftp->login('user', 'pass');\nprint_r($sftp->nlist());\n```\nThe problem is here:\n```\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 9.9948, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:09:73:75:62:73:79:73:74:65  ........subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.3609, network: 0.0002s)\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\n00000030  00:01:00:00:01:01:00:d0:2d:81:d7:54:cc:e5:1f:50  ........-..T...P\n00000040  b6:22:3e:7c:b9:fc:bf:dd:94:63:d3:51:bf:de:23:e1  .\">|.....c.Q..#.\n00000050  a4:c1:5d:15:c6:0a:05:d7:bf:90:c3:01:1a:69:c5:c6  ..]..........i..\n00000060  1e:70:87:f5:18:a8:89:4e:dc:b0:8f:70:ee:e1:3d:8e  .p.....N...p..=.\n00000070  19:ba:39:2f:1e:1e:36:09:32:67:bf:28:58:61:77:e2  ..9/..6.2g.(Xaw.\n00000080  e4:0c:fc:da:df:51:9f:b6:c3:f7:04:01:38:c3:c6:2f  .....Q......8../\n00000090  43:be:e4:9a:b1:87:1f:1f:29:1c:ba:05:94:bc:53:20  C.......).....S \n000000a0  e0:6c:4b:b5:f0:bf:1c:93:55:4f:f8:82:c7:4f:75:dc  .lK.....UO...Ou.\n000000b0  b1:6a:aa:50:2b:09:da:12:a9:2b:a1:2d:8c:d4:bb:a7  .j.P+....+.-....\n000000c0  9f:ac:b8:2d:d9:91:53:8b:2d:5f:50:d0:63:6f:44:77  ...-..S.-P.coDw\n000000d0  f2:eb:c3:f8:96:62:ef:5f:74:8d:b7:1a:9c:0a:e1:78  .....b._t......x\n000000e0  85:e6:91:a2:ae:6c:2a:8c:e0:ae:4a:c2:c9:0a:4d:4b  .....l*...J...MK\n000000f0  b6:dc:f1:f5:6a:9c:09:ea:da:36:43:5d:3b:7d:49:7f  ....j....6C];}I.\n00000100  52:09:60:42:75:11:d2:9d:22:17:f2:ef:11:44:c5:e3  R.`Bu...\"....D..\n00000110  99:d8:7a:6e:3d:e3:54:b9:57:82:4d:22:25:17:df:cb  ..zn=.T.W.M\"%...\n00000120  c0:1e:ca:ed:a3:4c:af:b9:cc:a2:06:27:6b:94:4e:1f  .....L.....'k.N.\n00000130  c4:e8:f9:b6:2c:fd:e3:00:00:00:68:00:00:00:13:65  ....,.....h....e\n00000140  63:64:73:61:2d:73:68:61:32:2d:6e:69:73:74:70:32  cdsa-sha2-nistp2\n00000150  35:36:00:00:00:08:6e:69:73:74:70:32:35:36:00:00  56....nistp256..\n00000160  00:41:04:62:48:5f:08:38:ba:32:66:1e:13:83:0e:06  .A.bH.8.2f.....\n00000170  1a:2c:16:a4:14:61:a8:f6:ce:4a:03:9e:45:cf:bc:72  .,...a...J..E..r\n00000180  93:cb:37:90:6b:cb:b3:de:d1:01:ab:f0:2d:03:49:70  ..7.k.......-.Ip\n00000190  ce:e4:85:d5:b4:0a:0b:35:df:ad:e3:4c:01:36:57:6a  .......5...L.6Wj\n000001a0  e4:3a:35:00:00:00:33:00:00:00:0b:73:73:68:2d:65  .:5...3....ssh-e\n000001b0  64:32:35:35:31:39:00:00:00:20:bb:82:41:ed:9d:90  d25519... ..A...\n000001c0  74:6e:37:e0:07:99:f2:af:89:65:51:8a:70:64:04:b3  tn7......eQ.pd..\n000001d0  ba:10:51:6b:b6:86:16:27:aa:84                    ..Qk...'..\n```\nphpseclib sends a NET_SSH2_MSG_CHANNEL_OPEN packet. The server responds with a NET_SSH2_MSG_GLOBAL_REQUEST packet but the response times out so phpseclib then sends the next packet - a NET_SSH2_MSG_CHANNEL_REQUEST packet - before it has gotten the appropriate response. It then errors out.\nIn the case of #1271, when setting the timeout to zero (and using the latest Git version) it wound up taking the server 25s to respond. This delay affected other SFTP / SSH clients as well and was not exlusive to phpseclib. Quoting #1271,\n\nUpon sticking a strace on the relevant sshd process, revealed that I had a problem with systemd-logind needing restarting after a certain other service has been restarted: https://serverfault.com/questions/707377/slow-ssh-login-activation-of-org-freedesktop-login1-timed-out.. > I should perhaps mention that if I do not set a timeout of zero, then I now get a fatal error as follows:\n\nAre you using the master branch? You shouldn't be. The master branch has an unstable API. ie. I may, from commit to commit make BC breaking changes with the API. You should be using the 2.0 branch.\nThat said, yah, the master branch throws exceptions and that's not behavior I have any current plans on changing. If you want to suppress the error you can wrap the code around a try / catch block.\nAnd the reason it's throwing an exception is because it's not getting a response when it expects one. It sends a NET_SSH2_MSG_CHANNEL_REQUEST packet and expects to get a packet back and when it doesn't - at least not within the timeout period - that is a legit error state in-so-far as phpseclib is concerned.. Yes. I actually posted a status update last night about the status of Ed25519 in phpseclib:\nhttps://github.com/phpseclib/phpseclib/issues/1082#issuecomment-396122366. > Firstly, not that it matters, but isn't the mcrypt_generic_init pointless? The ciphertext was already decrypted by this point.\nLooks like it's setting it up for the next decryption. That you're only doing one decryption is not something phpseclib has any way of knowing.. > $length is coming back 0 for me, which makes sense, because there's no padding needed. However, phpseclib interprets this as a failure for some reason and then gives me back false even though it had already successfully decrypted my ciphertext...?\nphpseclib uses PKCS7 padding. Quoting RFC2315:\n    2.   Some content-encryption algorithms assume the\n         input length is a multiple of k octets, where k > 1, and\n         let the application define a method for handling inputs\n         whose lengths are not a multiple of k octets. For such\n         algorithms, the method shall be to pad the input at the\n         trailing end with k - (l mod k) octets all having value k -\n         (l mod k), where l is the length of the input. In other\n         words, the input is padded at the trailing end with one of\n         the following strings:\n\n                  01 -- if l mod k = k-1\n                 02 02 -- if l mod k = k-2\n                             .\n                             .\n                             .\n               k k ... k k -- if l mod k = 0\n\n         The padding can be removed unambiguously since all input is\n         padded and no padding string is a suffix of another. This\n         padding method is well-defined if and only if k < 256;\n         methods for larger k are an open issue for further study.\n\nhttps://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7 talks about it as well. Basically, in that padding scheme, something is always removed. For that reason, 0 is an invalid value, because bytes are always supposed to be removed.. Anyway, what you need to do is $two->disablePadding().. > $two->paddable = false; // <-- this is needed so that phpseclib doesn't break\nThat's what $two->disablePadding() does. The phpDoc comments for var $paddable say that it's private and in the matser branch that'll eventually become the 3.0 branch it is explicitly private so that wouldn't work anyway.... You know how you're using hex2bin with OpenSSL? You need to use it with phpseclib as well.\nHere's your code, updated to use hex2bin:\n```php\n$rgbKey = \"de299ceff91f2a216969a22e482a6c1616c6e64e552d46ffafb713f1743e32d1\";\n$rgbIv = \"ECCD26BE791BB360E2010F6378CD5631\";\n$rijndael = new Rijndael();\n$rijndael->setKey(hex2bin($rgbKey));\n$rijndael->setIV(hex2bin($rgbIv));\n$rijndael->enableContinuousBuffer();\n$rijndael->setKeyLength(256);\n$rijndael->setBlockLength(128);\n$rijndael->disablePadding();\necho bin2hex($rijndael->decrypt(hex2bin(\"6D188001DDB63E5B2683CE30C7AC5779\"))); \n``\nGives me the same result as your C# code.. Oh - I also had to add$rijndael->disablePadding();.. I would placeexit('this far');at successive places in the code to figure out where it's occurring. Like maybe place one before Net/SSH2.php'sfsockopencall to verify that it's getting at least that far. Then remove it and place it afterfsockopen` to see if the fsockopen is being successfully being performed, etc.\nYou can do it like a binary search too. Like try placing it in the middle of the constructor and then place it 1/4 of the way in the constructor or 3/4 of the way in the constructor depending on whether or not you see the \"this far\".\nA quick Google search, however, suggests that there may not be much that I can do from a PHP perspective. It sounds like this might be an issue with PHP itself and that recompiling PHP might be the best bet:\nhttps://github.com/phalcon/cphalcon/issues/2082. Looks like it's dying here:\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s)\n00000000  05:18:07:d2:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  15:73:68:6f:77:20:73:65:63:75:72:69:74:79:20:73  .show security s\n00000020  75:6d:6d:61:72:79                                ummary\nIt's possible it only allows exec commands with a PTY, at which point, you could do $ssh->enablePTY(). It's also possible that the server only accepts interactive shells, at which point you'd need to do $ssh->read('[prompt]'); and then echo $ssh->read('[prompt]');.. > I tried getting the logs, i added define('NET_SSH2_LOGGING', 2); at the beginning of PHP and $ssh->getLog(); after the exec but nothing is showing. Where can i get them?\nSomething is very wrong about that because you should be getting the logs in that case just as sure as echo 'hello, world! should output \"hello, world!\".\nYou're using the 1.0 branch but what version of the 1.0 branch I wonder? Can you copy / paste your SSH2.php code onto pastebin.org so that I might try to ascertain the version you're using?\nAlso, just for good measure, in another pastebin.org posting, could you post the code you're using, complete with the define('NET_SSH2_LOGGING', 2); and $ssh->getLog();?. You could do $sftp->get() to get the file back as a string and then do something like this:\n```php\n$a = 'a,b\nc,d\ne,f';\n$fp = fopen('php://memory', 'w+');\nfputs($fp, $a);\nrewind($fp);\nwhile ($row = fgetcsv($fp)) {\n    print_r($row);\n}\n```\n. I cherry-picked this into the 1.0 branch and merged this into 2.0 and master.\nI also fixed the failing unit test (changed stat to lstat; the issue is that an earlier method creates a symlink in self::$scratchDir)\nThanks!. I'd suggest trying https://github.com/robrichards/xmlseclibs in lieu of my knowing anything about XML canonicalization.\nSorry I can't help further!. What would you think if I just removed utf8_decode all together?\nhttp://php.net/utf8-decode says it \"converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1\". The most common ISO-8859-1 characters are encoded the same in UTF-8 and ISO-8859-1. The ones that aren't - characters like \u00e8 - aren't as commonly used. And if they are used...  maybe the person can either live with ?'s appearing on the page or maybe they can set the page encoding to UTF-8 or the browser can auto-deduce that they're UTF-8 or whatever.\nBesides, it doesn't sound like utf8_decode care of characters that aren't in ISO-8859-1. eg. \u025b. utf8_decode just decodes that to ? (ie. 0x3f).. https://github.com/phpseclib/phpseclib/commit/bee6183bd743477598e9757031979100d6b7a1ce should resolve this.. ```php\n<?php\ninclude('Crypt/RSA.php');\ninclude('Math/BigInteger.php');\n$exponent = 'AQAB';\n$modulus = '00cb43da4b6602c17404e2d8be987d4ccb822836d85fd4cc6029338ef5b28908a9c9e7a0832acf9e8e15dc99bb340bdcdf53740bb4e449243c9d3c1f71773afb883a80e91844685487a6b911803ee7f76adcdc1360a7ae95a373f4432e7e6e12a009a8e9771cf775f6dab1f39ebd03d26ccded12e054b1ab85c861bdbfca225cff';\n$rsa = new Crypt_RSA();\n$rsa->loadKey([\n    'e' => new Math_BigInteger(base64_decode($exponent), 256),\n    'n' => new Math_BigInteger(base64_decode($modulus), 256)\n]);\necho $rsa;\n``\nThis code snippet uses the 1.0 branch to convert a modulus / exponent to a more recognizable public key format. If you want to encrypt (as opposed to just converting the key) just replace theecho $rsa` with this:\nphp\necho base64_encode($rsa->encrypt('ddd'));. It's pretty much the same thing - just swap out the include's with an include to the autoloader and use statements and then remove the Crypt_ / Net_ prefix from the object instantiations.\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Math\\BigInteger;\n$exponent = 'AQAB';\n$modulus = '00cb43da4b6602c17404e2d8be987d4ccb822836d85fd4cc6029338ef5b28908a9c9e7a0832acf9e8e15dc99bb340bdcdf53740bb4e449243c9d3c1f71773afb883a80e91844685487a6b911803ee7f76adcdc1360a7ae95a373f4432e7e6e12a009a8e9771cf775f6dab1f39ebd03d26ccded12e054b1ab85c861bdbfca225cff';\n$rsa = new RSA();\n$rsa->loadKey([\n    'e' => new BigInteger(base64_decode($exponent), 256),\n    'n' => new BigInteger(base64_decode($modulus), 256)\n]);\necho $rsa;\n```. > $rsa is a cert resource?\nNo - it's an RSA object with a __toString magic method.\nThat said, you don't need to use OpenSSL to perform the encryption. phpseclib is perfectly capable of that. eg.:\nphp\necho base64_encode($rsa->encrypt('ddd'));\nIf you really want to use openssl_public_encrypt instead of $rsa->encrypt you're free to do so. If memory serves, $key can be a string so you could trigger the $rsa __toString magic method by doing \"$rsa\".. Are you logging in with an RSA key or password auth? If the former then how big is the key? 1024-bit? 2048-bit? Bigger? Using a smaller key would make things faster at the expense of security. You could use password auth too if that were feasible.\nAlso, could you give me the SSH logs? eg. do define('NET_SSH2_LOGGING', 2) at the top and then do echo $ssh->getLog(); after you login? I'm wanting to see that because the problem could also be in the diffie hellman key exchange idk.\nThanks!. diffie-hellman-group-exchange-sha256 is why it's taking so long. The outbound NET_SSH2_MSG_KEXDH_GEX_INIT is taking 4.5s as is the outbound NET_SSH2_MSG_NEWKEYS after phpseclib receives NET_SSH2_MSG_KEXDH_GEX_REPLY.\nRight before NET_SSH2_MSG_KEXDH_GEX_INIT is sent $e = $g->modPow($x, $prime); is done. That's an expensive operation. And then right after NET_SSH2_MSG_KEXDH_GEX_REPLY is received $key = $f->modPow($x, $prime); is done. That's another expensive operation.\nSo that's the issue and there isn't much I can do to speed that up.\necdh-sha2-nistp521, ecdh-sha2-nistp384 or ecdh-sha2-nistp256 would probably all be faster but no version of phpseclib currently has built in support for that. . > So presumably the GMP extension would help speed that up\nDefinitely. In fact, that'd prob help more than a beefier server would lol.. 'With the phpseclib logs the way they are...  I can extract a file from logs. You don't need to give me the file that was being uploaded or downloaded - I can extract that file from the logs. If I only displayed printable characters and omitted the hex than I couldn't do that. At least not with a binary file.\nAlso, what if phpseclib calculated the length of something incorrectly? With the full logs I can see that. I can't see it only the printable values are being shown.\nPuTTY's logs are comparable to phpseclib's:\nhttp://www.frostjedi.com/terra/dev/putty.log.txt\n\nwhy are the messages cut off like that?\n\nNo idea. That might depend on the SAPI you're using (CLI, Apache, etc). I manually decoded the first one and got rwupdate..../hom.. > So how do I get a human friendly log that I can display in the browser?\nYou can use regular expressions to filter stuff out.\nThere's also simple mode (you're using complex mode):\nphp\ndefine('NET_SSH2_LOGGING', 1);\n$ssh->getErrors() may occasionally contain useful information as well. But if you're looking for something like OpenSSH with it's multiple level of logins...  phpseclib doesn't currently support that and altho I'm not opposed to implementing something like that, realistically speaking, it's probably years out. There's so much more I currently want to do that that something like that would be pretty low on my priority list (unless I were paid cash to prioritize it higher lol).\nFor me, the logging functionality phpseclib supports is a ton more useful than the kind OpenSSH supports. I actually use PuTTY a lot more than OpenSSH because it provides those full SSH logs that OpenSSH doesn't.. > The thing is, I can't really change anything in your script as it will break as soon as composer runs an update.\nThat's not what I was proposing. What I was proposing is more along these lines:\n```php\n$log = $sftp->getSFTPLog();\npreg_match_all('#(?:<-|->) NET_SFTP_[A-Z_]+ ([0-9.]+s)\\r\\n(?:[^\\r\\n]+\\r\\n)*\\r\\n#m', $log, $matches);\n$output = '';\nforeach ($matches[0] as $match) {\n    $lines = explode(\"\\r\\n\", $match);\n    $packet = '';\n    for ($i = 1; $i < count($lines) - 1; $i++) {\n        $packet.= rtrim(str_replace(':', '', substr($lines[$i], 59)));\n    }\n    $temp = trim($lines[0]) . ' ' . str_replace('.', '', $packet);\nswitch (substr($temp, 0, 16)) {\n    case '<- NET_SFTP_NAME':\n    case '-> NET_SFTP_NAME':\n        $temp = preg_replace('#((?:/[^/]+)+)\\1$#', '$1', $temp);\n}\n\n$output.= $temp . \"\\n\";\n\n}\necho $output;\n```\nYou can adapt that from there.. Can you give me some sample code or maybe a file name / line number?\nI ask because this should have been fixed 11 months ago:\nhttps://github.com/phpseclib/phpseclib/commit/98d46db7c51cf8e4f8648b383d28db78dd22d055\nphpseclib 1.0.8 / 2.0.7 introduced this change:\nhttps://github.com/phpseclib/phpseclib/releases/tag/1.0.8\nhttps://github.com/phpseclib/phpseclib/releases/tag/2.0.7\nphpseclib is passing all the unit tests on travis-ci on 7.2:\nhttps://travis-ci.org/phpseclib/phpseclib/builds/418510260\nhttps://travis-ci.org/phpseclib/phpseclib/builds/418510293\nA deprecated notice would cause the unit tests to fail.... You're missing the lines that come before it:\n```php\n        // Create the $inline function and return its name as string. Ready to run!\n        if (version_compare(PHP_VERSION, '5.3.0') >= 0) {\n            eval('$func = function ($_action, &$self, $_text) { ' . $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' } };');\n            return $func;\n        }\n    return create_function('$_action, &$self, $_text', $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' }');\n\n```\nThe version_compare(PHP_VERSION, '5.3.0') >= 0 means that create_function isn't called on PHP 7.2.\nConsider the following bit of code:\n```php\nif (true) {\n    return true;\n}\nreturn callsomefunctionthatdoesnotexist();\n```\nCalling a function that doesn't exist is a problem, sure, but it's a minor one because that line is never reached.\nThe fact that a deprecated function is utilized doesn't matter since, on the affected PHP versions, that function isn't ever called anyway... eval is only a security issue if user input is utilized in the string that's passed to eval. If you - or anyone - can find an exploit - specifically in phpseclib's use of eval - I will pay said individual $500 USD via PayPal. (this offer does not extend to timing attacks)\nI did grep -r \"eval(\" .  in the vendor directory of a work project of mine and got lots of results back. Symfony uses it in a number of places, including here:\nhttps://github.com/symfony/http-kernel/blob/master/HttpCache/HttpCache.php#L576\nI'm not going to list every project that uses eval() but sufficient to say projects bigger than phpseclib use it.\nIf phpseclib were to stop using eval than the 35% speed increase that #1143 and #65 introduced go away. There is no other practical way to get that kind of speed up with pure-PHP code for those kinds of things. If you can think of a way comparable speeds can be obtained using pure-PHP code and without the use of eval I'll pay you $500 USD PayPal.\nNote that the offer to pay $500 USD PayPal is not a permanent offer. It depends on my job situation / financial situation at the time. And I'm not going to pay out $500 USD twice because my own personal financial resources are somewhat constrained.\nOverall, eval is kinda like PHP. PHP is not generally well received in the wider developer community. It's generally seen as being an insecure language and often times projects written in PHP are dismissed as being insecure simply because of the language they're written in. Just like eval. Whether or not either is a good rule of thumb can be debated but a \"rule of thumb\" is not the same thing as a \"blanket rule\". To the uninformed they may appear to be the same but they're not.\nI suppose it's also kinda like the mysql_ extension vs PDO or mysqli. The latter two let you do prepared statements whereas the former does not. That is not to say that you can't write secure code with mysql_ but rather it is to say that it's harder to write secure code using a connection layer that doesn't support prepared statements. And indeed, prepared statements do have their limitations. They're far and few between but they do none-the-less exist.. > It might be that current code paths prevent such a thing from happening, but some future change might introduce such an execution path.\nIn most cases I would agree but in this case we'd be taking a significant performance hit.\n\nThe modern way to do what you are trying to do is probably by using a closure aka anonymous function, which is the true replacement to create_function.\n\neval is used in this file:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/BigInteger/Engines/PHP/Reductions/EvalBarrett.php\neval is being used to create an anonymous function. So you're proposal is to eliminate this eval created anonymous function with a non-eval created anonymous function?\nIn this particular case the 35% speedup is obtained through the dynamic generation of code. Instead of having a generic function to give you x mod y, for any y, this is a custom function that gives x mod y for a specific value of y.\nConsider this code (using the master branch):\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Math\\BigInteger;\nuse phpseclib\\Crypt\\RSA;\nBigInteger::setEngine('PHP64');\n$public = new RSA();\n$public->load('-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0\nFPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/\n3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB\n-----END PUBLIC KEY-----');\n$public->encrypt('zzz');\n```\nEvalBarrett.php creates a 40kb bespoke function based on the modulo. I won't post the function in-line because it's long but here it is on pastebin.com:\nhttps://pastebin.com/Hi58iL1A\nNow consider this code (from multiplyHelper in phpseclib/Math/BigInteger/Engines/PHP.php):\nphp\n        $carry = 0;\n        for ($j = 0; $j < $x_length; ++$j) { // ie. $i = 0\n            $temp = $x_value[$j] * $y_value[0] + $carry; // $product_value[$k] == 0\n            $carry = static::BASE === 26 ? intval($temp / 0x4000000) : ($temp >> 31);\n            $product_value[$j] = (int) ($temp - static::BASE_FULL * $carry);\n        }\nIn the anonymous function that was created through eval $x is hard-coded. The for loop is eliminated. The ++$j is not done. $x_value[$j] is replaced with the actual int for $j. So for $x_value[0] we do 1961628378 instead. For $x_value[1] we do 1225269599. And instead of doing the static::BASE === 26 it just does the correct division operation automatically because the bespoke function that was created knew - at runtime - whether or not PHP was 32-bit or 64-bit.\nAnd instead of doing static::BASE_FULL we do 2147483648.\nSo there's loop unrolling, array dereferencing, and the elimination of if conditions.\nIt's basically a whole bunch of micro-optimized code that is COMPLETELY dependent upon the modulo. You cannot write a general purpose modulo method with loop unrolling but if you assume the modulo to be fixed then you can. And I'm also not going to know what the modulo until the key has been loaded at run-time.\n\nEven despised software (from a security POV) like wordpress successfully avoids using eval in PHP.\n\nIt's highly unlikely Wordpress has the same kind of tight loops that phpseclib has. Using the example from http://phpseclib.sourceforge.net/math/speed.phps (adapted for 3.0; I'm not using the earlier code example because that's for public keys only and public key exponents for RSA are much shorter than private key exponents) the modular reduction method is called almost 2,500 times. For the generation of a new 2048-bit key...  it'll vary (primality tests are almost always randomized for speed) but I did a few trial runs and it was called 30,000+ times in one instance, 250,000+ times in another, etc. Does Wordpress have a method called even 1,000+ times during a single page load?. TLDR I submit that there is ZERO way to achieve the 35% speedups the a-fore mentioned pull requests have done without the use of eval. And like I said, if you can think of a way to do so WITHOUT eval, I will pay you $500 USD via PayPal. I will be absolutely flabbergasted.\nSure, the fact that eval is being used makes it easier for vulnerabilities to be introduced, but I really don't expect I'll ever get a PR for the lines that make use of eval because that code is a nightmare to wrap your head around as is. It's basically PHP code that generates PHP code and there's not really standards for that.\nIf you trust my judgement so little that you think I might still, none-the-less, hypothetically speaking, accept a PR to those files without extreme vetting then I have to wonder why you would assume that the code doesn't already have intentional backdoors placed within it. Ken Thompson's seminal talk Reflections on Trusting Trust addresses this some. Sometimes you just have to assume that the people who are creating this shit know what they're doing and just as you have to take it on faith that gcc doesn't have a backdoor in it (per the talk) at some level you're just gonna have to take it on faith that I know what I'm doing. And if you can't take it on faith then don't use this library. Write your own SSH library or RSA library or whatever it is that you're using phpseclib for.. Here's an alternate explanation that /u/kemmeta on /r/PHP posted:\n\nThe functions that are being dynamically created aren't just mode specific - they're key specific.\nThe function that the eval generates for AES with a key / IV of \"zzz\" / \"zzz\" is different than the function that it generates for \"aaa\" / \"aaa\" and the way it's generating these key specific functions it's able to achieve a significant speedup.\nA good way to think about it is...  what about be faster? This?:\n$a + $b + $c + $d + ($e ? 50 : 80)\n\n...or (if you assume every variable but $a is known in advance) this?:\n$a + 167\n\nphpseclib is using eval to make these kinds of parameter specific optimizations.\nLoop unrolling is also employed:\nfor ($i = 0; $i < $length; $i++) {\n    for ($j = 0; $j < 100; $j++) {\n        // do stuff\n   }\n}\n\nYou can eliminate the inner for loop with 100 \"do stuff\" calls.\nIt's all a bunch of micro-optimizations but when you're potentially dealing with hundreds of megabytes of data it can make a big difference. In phpseclib's case these micro-optimizations result in a 35% speedup I think the post was saying.\n\nSource: https://www.reddit.com/r/PHP/comments/9mfetd/the_land_where_php_uses_eval/e7ef4x7/\nUpon review, /u/SaraMG, a core PHP developer, said the following:\n\nI'm going to hold onto this library as a benchmark for engine work and as the first arguably legitimate use of eval I've ever seen in almost 20 years of using this language.\n\nSource: https://www.reddit.com/r/PHP/comments/9mfetd/the_land_where_php_uses_eval/e7fesdw/\nThe /r/PHP discussion resulted in a series of tweets on the subject:\nhttps://twitter.com/SaraMG/status/1049477643077337088\nOne of the people who responded to the tweet said of my responses, here, \"[TerraFrost] is not being very nice to the OP about it\".\nAll I'll say on that subject is that I have invested a lot of time into this library and if I feel it's being subject to unfair criticism that I can take that personally. If I didn't take it personally, I wouldn't have offered the bounty that I did. /u/kemmeta, however, was able to be more impartial than I was in their explanation so I am grateful to them.\nThe main reason I'm documenting all this is because of #1300. I figure this bug report / issue can be the canonical source of info on phpseclib's use of eval.. > phpseclib will function without EvalBarrett, so an option would be moving it to its own composer package, which can be depended on optionally.\nSplitting phpseclib up into separate Composer packages is a long term goal but will likely not be done for v3.0. That said, the way I'd split it up is..  Math/BigInteger would be it's own package as would Crypt/RSA, etc. Crypt/RSA would \"require\" Math/BigInteger as would Crypt/DSA, etc. Making the engines separate packages seems...  weird.\nMaybe I could do something like...  there are three versions of Math/BigInteger. v1.0 requires gmp, v2.0 requires PHP64, v3.0 requires PHP64 + EvalBarrett, etc. At that point any library using Math/BigInteger should have it's require look like '\"phpseclib/BigInteger\": \"^1|^2|^3\",` or something. Problem with that is that that's not really semantic versioning or romantic versioning or any other versioning scheme I'm aware of.. This should work better as of the latest commit.\n\nBy the way I would like to know if someone knows how to set the cipher to use when using the SFTP class ?\n\nThere's not really a good way to do this atm. I do intend to significantly revamp the SSH2 API at some point but my priorities atm are on updating phpseclib's underlying cryptographic primitives.. I cherry picked this and merged into 1.0 / 2.0 / master.\nThanks!. I think something that would be better would be something like adding $this->bitmap = 0; every time user_error('Connection closed by server'); is called. That's what ->isConnected() looks at.\nAnother possibility. You could do something like this (this is for phpseclib 1.0 but can be easily adapted to work on phpseclib 2.0):\n```php\n<?php\ninclude('Net/SSH2.php');\ndefine('NET_SSH2_CHANNEL_KEEP_ALIVE', 100);\nclass Net_SSH2_Ping extends Net_SSH2 {\n    /\n     * Authentication Credentials\n     \n     * @var array\n     * @access private\n     /\n    var $auth = array();\n/**\n * Login\n *\n * The $password parameter can be a plaintext password, a Crypt_RSA object or an array\n *\n * @param string $username\n * @param mixed $password\n * @param mixed $...\n * @return bool\n * @see self::_login()\n * @access public\n */\nfunction login($username)\n{\n    $args = func_get_args();\n    $this->auth[] = $args;\n    return call_user_func_array(array(&$this, 'parent::login'), $args);\n}\n\n/**\n * Pings a server connection, or tries to reconnect if the connection has gone down\n *\n * Inspired by http://php.net/manual/en/mysqli.ping.php\n *\n * @return string\n * @access public\n */\nfunction ping()\n{\n    if (!$this->isAuthenticated()) {\n        return false;\n    }\n\n    $this->window_size_server_to_client[NET_SSH2_CHANNEL_KEEP_ALIVE] = $this->window_size;\n    $packet_size = 0x4000;\n    $packet = pack(\n        'CNa*N3',\n        NET_SSH2_MSG_CHANNEL_OPEN,\n        strlen('session'),\n        'session',\n        NET_SSH2_CHANNEL_KEEP_ALIVE,\n        $this->window_size_server_to_client[NET_SSH2_CHANNEL_KEEP_ALIVE],\n        $packet_size\n    );\n\n    if (!@$this->_send_binary_packet($packet)) {\n        return $this->_reconnect();\n    }\n\n    $this->channel_status[NET_SSH2_CHANNEL_KEEP_ALIVE] = NET_SSH2_MSG_CHANNEL_OPEN;\n\n    $response = @$this->_get_channel_packet(NET_SSH2_CHANNEL_KEEP_ALIVE);\n    if ($response !== false) {\n        $this->_close_channel(NET_SSH2_CHANNEL_KEEP_ALIVE);\n        return true;\n    }\n\n    return $this->_reconnect();\n}\n\n/**\n * In situ reconnect method\n *\n * @return boolean\n * @access private\n */\nfunction _reconnect()\n{\n    $this->_reset_connection(NET_SSH2_DISCONNECT_CONNECTION_LOST);\n    $this->retry_connect = true;\n    if (!$this->_connect()) {\n        return false;\n    }\n    foreach ($this->auth as $auth) {\n        $result = call_user_func_array(array(&$this, 'parent::login'), $auth);\n    }\n    return $result;\n}\n\n}\n```\nThis is inspired by mysqli_ping. I'm not sure what I think of saving the credentials like this does. Also, any state changes will be lost. Like let's say you were in the middle of an interactive session. If this reconnected you you would no longer be in that interactive session. I suppose this is just as much an issue with mysqli_ping as it is with this method, however, since, with mysqli_ping, you could be in the middle of an SQL TRANSACTION.\nAlso, FWIW, SSH doesn't really have a packet that does exactly what one would expect from a keep-alive packet. A keep-alive packet would normally be...  you send a request and you get a response and that's it. With this implementation you send a request, get a response, then send another two request and then get another response. eg.\n```\n -> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0149, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:64:7f  ....session...d.\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0223, network: 0.0001s)\n00000000  00:00:00:64:00:00:00:00:00:00:00:00:00:00:80:00  ...d............\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0079, network: 0.0002s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0341, network: 0.0003s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0319, network: 0.0001s)\n00000000  00:00:00:64                                      ...d\n``\nTechnically, I think that could probably be reduced down to having to only send two requests instead of sending three but that's the general idea.. > I think something that would be better would be something like adding$this->bitmap = 0;every timeuser_error('Connection closed by server');is called. That's what->isConnected()` looks at.\nThat's been done. Now when you get a \"Connection closed by server\" error ->isConnected() should return false.\nI also implemented the ping method I proposed.\nThanks!. I'll try to do a release this weekend or next.\nThanks!. I just made a new release.\nThanks!. @Echron - I think https://github.com/phpseclib/phpseclib/commit/e5ff894d4b9d9eb1974ba32c878540aebad3aa0c should fix this.\nThanks!. @bantu maintains that website. Seems like a Let's Encrypt cert would be good.\nThanks for the heads up!. I think that's a good idea! Altho it'd prob be better if the second link pointed to https://github.com/phpseclib/phpseclib/pull/65 .\nI'll merge this in this evening (I'm at work atm) and will update the link.\nThanks!!. > @terrafrost This could be improved to include technical details in the comment. Something like \"we are doing manual code generation/inlining/unrolling to a massive performance increase.\"\nDone:\nhttps://github.com/phpseclib/phpseclib/commit/9ccfaff7ba58c2b5dd49dd8072baa77aa29c5545. It'd help to have some sample code but in lieu of that....\nssh-dss is basically DSA. It's supported in getServerPublicHostKey for signature verification but DSA keys are not supported in either the 1.0 or 2.0 branches.\nIn the master branch I'm working on adding ECDSA / EdDSA support. I'm pretty close to being finished with that. I already have a DSA implementation in that branch but neither it nor the ECDSA / EdDSA implementations have been integrated into SSH2 yet. Not that I'd recommend using the master branch anyway since the API is subject to change.. This is just a guess but I wonder if $ssh->sendKEXINITLast() would do the trick.. I guess the ssh -vvv output couldn't hurt but what'd be more useful is the PuTTY logs.  You can get them by going to PuTTY->Session->Logging and checking the \"SSH packets\" radio button.\nFailing that, giving me access to the server might help. If that would be do'able you could send auth info to terrafrost@php.net.. I just saw this. I'll try to take a look, if not this evening then probably over the weekend.\nThanks!. The problem is that phpseclib is sending a NET_SSH2_MSG_KEXDH_INIT packet and isn't getting a response.\nI note PuTTY is sending a SSH2_MSG_KEX_DH_GEX_REQUEST packet instead of the NET_SSH2_MSG_KEXDH_INIT packet that phpseclib is sending. This makes me wonder if doing this would help:\n```\n\n-----[ FIND ]------------------------------------------\n\n    $kex_algorithms = array(\n        // Elliptic Curve Diffie-Hellman Key Agreement (ECDH) using\n        // Curve25519. See doc/curve25519-sha256@libssh.org.txt in the\n        // libssh repository for more information.\n        'curve25519-sha256@libssh.org',\n        // Diffie-Hellman Key Agreement (DH) using integer modulo prime\n        // groups.\n        'diffie-hellman-group1-sha1', // REQUIRED\n        'diffie-hellman-group14-sha1', // REQUIRED\n        'diffie-hellman-group-exchange-sha1', // RFC 4419\n        'diffie-hellman-group-exchange-sha256', // RFC 4419\n    );\n\n\n-----[ REPLACE WITH ]----------------------------------\n\n    $kex_algorithms = array(\n        // Elliptic Curve Diffie-Hellman Key Agreement (ECDH) using\n        // Curve25519. See doc/curve25519-sha256@libssh.org.txt in the\n        // libssh repository for more information.\n        'curve25519-sha256@libssh.org',\n        // Diffie-Hellman Key Agreement (DH) using integer modulo prime\n        // groups.\n        'diffie-hellman-group-exchange-sha1', // RFC 4419\n        'diffie-hellman-group-exchange-sha256', // RFC 4419\n        'diffie-hellman-group1-sha1', // REQUIRED\n        'diffie-hellman-group14-sha1', // REQUIRED\n    );\n\n```\nie. make it so phpseclib preferentially uses diffie-hellman-group-exchange-sha1 instead of diffie-hellman-group1-sha1.\nIt shouldn't matter. If the server is gonna claim it supports the algorithm in question it ought to. But it is, none-the-less, possible that it doesn't.. > Can you please comment on this issue?\nSee https://github.com/phpseclib/phpseclib/issues/1293#issuecomment-428428043\n\nWhat can be done here?\n\nI'm not going to do anything about it. It's a false positive. Sure, getting these periodic bug reports is annoying but the speedup that phpseclib gets through the use of eval makes it worth while. If the speedup was 0.1% I'm not sure the hassle of posts like this would be worth it but the speedup is, in fact, closer to 20-60% and that's a speedup that's too great to ignore.\nIt's kinda like phpseclib's use of mcrypt. mcrypt has been deprecated but phpseclib will still use it if OpenSSL isn't available and mcrypt is. phpseclib has gotten flack for that but the speedup mcrypt offers (under the right conditions) is just too great to ignore. And since, in the case of mcrypt, the error deprecation operator is used, pretty much all bug reports made about it's use stem from the use of static code analyzers and not people actually using the library.. phpseclib uses OAEP padding by default. Maybe whatever is doing the encryption is using PKCS1 padding instead. You can do that by doing $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1) before you perform the actual decryption.. Post the key. If the key is being used for sensitive data then create a new key using the same method to create the old key. Then post some ciphertext encrypted with it. Base64 encode it so that non-printable characters don't get lost.\nAlso, post how both the key and the ciphertext are being generated.. Given how you're using it I'd use PHP's built in password hashing functions:\nhttp://php.net/manual/en/ref.password.php\nThat said, for $pass...  I'd base64 encode it if you're gonna store it to the DB. VARCHAR or TEXT are not sufficient - VARBINARY or BLOB are what should be used:\nhttps://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\nhttps://dev.mysql.com/doc/refman/8.0/en/blob.html. I cherry picked this commit to the 1.0 branch and then merged that into the 2.0 and master branches.\nThanks!. Did you get that with $ssh->getErrors() or $ssh->getLastError()? If so then that's not really an error. A lot of the errors in that are more informational thing anything.. getErrors() is like PHP's E_NOTICE.\nOverall, I'd say that none of the errors that show up in that are going to be very severe. The more severe errors will result user_error() errors or full on PHP errors.\nConsider a failed authentication attempt. There'll probably be an entry in $ssh->getErrors() but how severe is that? If you're using phpseclib to brute force an SSH password (nefarious tho that task may be) it's not really an error. It's kinda the expected outcome.\nMaybe in a new version of phpseclib I might have different error levels but even that would be a bit subjective. \"Exceptional\" errors would still be optimally handled be exceptions being thrown (they're thrown in the master branch but not in the 1.0 / 2.0 branches).. You probably need to do either $sftp->enablePTY(); or use the interactive commands. eg.\nphp\n$sftp->interactiveWrite(\"asterisk -V\\n\");\necho $sftp->interactiveRead('[prompt]');. There is no way to do what you are wanting using pure SFTP. The libssh2 approach you're using (1) isn't SFTP and (2) can be done with phpseclib:\nphp\n$sftp->exec('cp source_file_path dest_file_path');. I have a branch that adds support for Ed25519 / ECDSA here:\nhttps://github.com/terrafrost/phpseclib/tree/ecdsa\nKeys of the format you describe are also supported, altho encrypted OpenSSH private keys are not, because OpenSSH has a custom bcrypt implementation and just as PHP is too slow for pure-PHP Argon2i implementation in sodium_compat PHP is too slow for a good pure-PHP bcrypt implementation.\nThe unit tests are still being worked on.. I'd say both should be considered as LTS releases. And As for which one people should use...  either work. The 2.0 branch has a small handful of minor features that 1.0 doesn't have but for the most part they're identical. This won't be the case with the 3.0, however. 3.0 is going to have major features that aren't present in either 1.0 or 2.0. But 3.0 has also yet to be released... You can use a custom error handler. eg.\n```php\nfunction error_handler($errno, $errstr, $errfile, $errline)\n{\n    // do stuff\n}\nset_error_handler('error_handler');\ntrigger_error('sample error', E_USER_NOTICE);\n```\nMore info:\nhttp://php.net/manual/en/function.set-error-handler.php. > I think, if the behaviour of user_error() is not reliable, we should not use it in the first place.\nThe issue is presumably due to the use of a custom error handler.\nConsider the following code:\n```php\n<?php\nfunction error_handler($errno, $errstr, $errfile, $errline)\n{\n    exit(\"all done!\\n\");\n}\nset_error_handler('error_handler');\ntrigger_error('sample error', E_USER_NOTICE);\necho \"this far\\n\";\n```\nThe \"this far\" never gets output whereas the \"all done!\" does.. First, I'd like to apologize for the delayed response. I've had a busy week.\nRight now ->setTimeout() has a dual purpose.\nBefore you've even connected ->setTimeout() is the timeout parameter that's passed to fsockopen.\nAfter you've connected via fsockopen the timeout represents the cumulative delays between each of the incoming packets.\nIf the amount of cumaltive delays exceeds the timeout then ->isTimeout() returns true. Otherwise it returns false.\nI guess one approach that could be employed right now is that simple logging could be enabled. eg. define('NET_SSH2_LOGGING', SSH2::LOG_SIMPLE); and then do $before = count($ssh->getLog()) before the slow command and $after = count($ssh->getLog()) after the slow command. Then do $ssh->isTimeout() && $before == $after to see if the timeout was due to no packets being sent.. You can do define('NET_SSH2_LOGGING', SSH2::LOG_REALTIME);. That said, I have been mulling over making logging work in the next major version of phpseclib more like it does in Laravel:\nhttps://laravel.com/docs/5.0/database#query-logging\n```php\nSSH2::enablePacketLog();\nSSH2::getPacketLog();\n``\nOf course, that wouldn't really accommodate real time logging. Maybe I could makeenablePacketLog()` accept a callback parameter to enable that.\nFor that matter, I think it'd be neat to be able to log SSH2 packets on a per-channel basis instead of just globally but how that'd work can be figured out later lol. https://github.com/phpseclib/phpseclib/commit/476cb127b16e0759066b5e69c52f2aa42117bfbe should fix the issue. I added a unit test for this as well.\nThat said...  from your code:\nphp\n$x509->loadX509(file_get_contents($cert_path, \"r\"));\nfile_get_contents' second parameter is a boolean - $use_include_path\n. https://github.com/phpseclib/phpseclib/commit/8f2a0e6f0da1e4365077487cfff58a388a1194a5 should fix this.\nThe problem was introduced with https://github.com/phpseclib/phpseclib/commit/b57976ec5ffc556f31036f713d5079ad59feb5d7 , which added support for rsa-sha2-256 and rsa-sha2-512, as discussed in RFC8332. The problem was that the SSH Agent code wasn't updated to work with those new hashes.. @kralos - thanks!. It'd help to know how you generated your ciphertext. Did you use OpenSSL? phpseclib? Do you know?\nThat said, the reason it's failing with PKCS1 / OAEP is because the ciphertext is 65 bytes long whereas the modulo is 64 bytes long (512 bits).. It looks like this question was cross posted on stackoverflow FWIW:\nhttps://stackoverflow.com/questions/53555168/rsa-decryption-with-phpseclib-is-failing. I wasn't bashing you lol. I was just posting the link because if you got the answer there there's not a lot of need for me or anyone else to spin our wheels here.\nAn answer is an answer regardless of where you get it from so if you get an answer on stackoverflow the need to post the answer here is lessened. I suppose there might also be some virtue to copy / pasting the answer from stackoverflow to here but idk lol.\nBut I wasn't bashing you!. > $_SERVER['SSH_AUTH_SOCK'] = '/run/user/1000/keyring/ssh'; should do it @terrafrost Maybe agent should have a constructor taking a socket path.\nI think that's a good idea. I'll try to do it this weekend.\n\nIt was giving Permission denied.\nWarning: fsockopen(): unable to connect to unix:///run/user/1000/keyring/ssh:0 (Permission denied) in phpseclib/System/SSH/Agent.php on line 134\nNotice: Unable to connect to ssh-agent (Error 13: Permission denied) in phpseclib/System/SSH/Agent.php on line 136\nbool(false) Array ( )\n\nI have no idea what's up with that. Maybe you could try setsebool -P httpd_can_network_connect 1? It's a setting on SELinux.\nThat said, if you are able to get passed that error you may still have issues with #1319. That issue is fixed in the latest git version but that fix is not in 2.0.12. A new release would need to be done.. > Maybe agent should have a constructor taking a socket path.\nDone:\nhttps://github.com/phpseclib/phpseclib/commit/fbef6f009fb869f1c78b3d7dfb95ef92eedf586a. php\n$key->load($keyfile);\nThat only works on the master branch, which you shouldn't be using. For the 1.0 / 2.0 branches it's $key->loadKey($keyfile);.\nFor the server host key algorithm...  it looks like the server only supports ecdsa-sha2-nistp521 and ssh-ed25519 keys. None of the phpseclib versions currently support that. The master branch just recently had a PR for ECDSA support created but I haven't actually yet updated SSH2 to support ECDSA. It's something I intend to do but haven't done so yet. Here's the PR for that:\nhttps://github.com/phpseclib/phpseclib/pull/1322\nThat's probably why the connection is being terminated.. I'll try to do so this weekend.\nThanks!. I had hoped to do this this weekend but this weekend didn't exactly go according to plan :(\nI'll try to do a new release sometime this coming week or next weekend.\nI haven't forgotten!. A new release has been made! 1.0.13 and 2.0.13.. Based on the line numbers, it looks like you're using 2.0.11 - not 2.0.12 FWIW.\nAnyway, I'd check to see that each host resolves to the same IP address. eg. gethostbyname.\nWho knows...  maybe even if both hosts are mapped correctly on the DNS maybe there's some /etc/hosts setting that's affecting the mapping locally.. > I upgraded to v2.0 and noticed that SSH2::read() has a documentation @return string but returns also false.\nFeel free to create a PR.\n\nShouldn't we drop support for old versions so we can increase code quality and reduce defects?\n\nphpseclib uses semantic versioning. In semantic versioning the version format is best understood as [major].[minor].[patch]. Raising the minimum requirements, via composer.json, would be a major BC break. In order to accommodate it the next release of the 2.0 branch would need to be 3.0 and I'd just assume a new 3.0 version do more than just raise the minimum required version of PHP.\nTo be far, the composer.json you linked to was in the master branch. Work on that branch is ongoing and the API is unstable. The master branch will eventually become the 3.0 branch but you shouldn't assume that what's currently in that branch is what'll be in that branch when 3.0 is finally released.\nThat said, I'd just assume not bump the minimum required PHP version unless I'm fully taken advantage of all the features that PHP version has to offer, where applicable. So right now the master branch requires 5.6, minimum. This is chiefly because of all the files in the File/ASN1/Maps directory. Those files use arrays as constants and employee constant expressions. PHP didn't support this until 5.6 per http://php.net/manual/en/migration56.new-features.php .\nI'd just assume not bump the minimum required version to 7.0 until scalar type declarations, strict typing and return type declarations were supported (all of which were introduced in 7.0). Same thing goes for 7.1 and 7.2, etc.. > BTW bumping minimum required PHP version is not a BC break. Thanks to package manager you won't get new version if requrements are not fullfiled and therefore the fatal error won't occur.\nThe 1.0 and 2.0 versions are also LTS versions. If people can't trust me to keep my word w.r.t. LTS then why should anyone expect me to keep my word w.r.t. proper semver?\nphpseclib, from it's inception, has been written for people who, for whatever reason, don't have much control over their system. Consider Math_BigInteger. GMP is the fastest possible math engine available and yet phpseclib doesn't require it. It uses it if it's available but it doesn't require it. Same thing for a lot of the symmetric ciphers. OpenSSL is a heckuva lot faster than the pure-PHP implementations and altho phpseclib uses OpenSSL if it's available it doesn't require it.\nIf I bump phpseclib's PHP requirements to PHP 7.2+ then maybe I should also drop support for environments without GMP or OpenSSL?\n\nHow can we add strict typing and all modern php features if the minimum required version doesn't support it? The moment you add eg. first return typehint, you have to bump the minimum required php version. The reverse order is a no go \u2013 cannot run on legacy php versions when using modern features thus cannot have legacy version as the minimum one.\n\nYou do it in the same commit or PR.. > Keeping LTS and bumping PHP minimum version can simply go together. There would be one last release for EOLed PHPs and then the development would continue on top of it.\nThat would mean that bug fixes done after that last release wouldn't work on EOL PHP versions. You and I obviously have different interpretations of what LTS means but in my mind when I say a version has \"long term support\" what I mean by that is...  if someone is still running PHP 5.6 I'll continue to provide support to them and if they find an issue in phpseclib I'll do all that I can to fix it, the fact that they're running an EOL version of PHP not withstanding.\n\n\nIf I bump phpseclib's PHP requirements to PHP 7.2+ then maybe I should also drop support for environments without GMP or OpenSSL?\n\nI don't see a reason for it, IMO it's not related at all \ud83e\udd14\n\nA lot of the reasons you're giving for dropping support for EOL PHP versions apply to dropping the pure-PHP implementations of stuff as well. As you correctly observe, newer PHP versions give a \"performance-boosting update\". GMP also gives a \"performance-boosting update\" as does libsodium and OpenSSL. And, tbh, they probably provide better security than the PHP versions, as well. So, like I said, the reasons you give for dropping EOL PHP versions are also reasons to drop support for environments that don't have GMP or OpenSSL or libsodium or whatever.\n\nShould I code the PR in the old way then or can I write clean code with types etc while bumping the php version?\n\nYou're referring to the \"I upgraded to v2.0 and noticed that SSH2::read() has a documentation @return string but returns also false\" issue your first post mentioned? If the \"old way\" is to maintain EOL PHP support then yah - doing it the old way is like a one line change so it's a super easy code review lol.\n\nThe php ssh-ext has too much limitied API for our use case.\n\nI agree. FWIW I've kinda come to think even phpseclib's API is pretty limited. I really do want to revamp it and greatly expand it. My original plan had been that phpseclib 3.0 would include a complete API revamp but after spending like a year and a half on ECDSA / EdDSA support...  I'm thinking now that phpseclib 3.0 will just upgraded algorithm support (some of which is necessitating some refactoring just to avoid excessive code duplication). My new (tentative) plan is for phpseclib 4.0 to feature a much more expanded SSH / SFTP API.\nI think you'll really like phpseclib 4.0 but it's just soo far away atm :(\n. So here are the big things I have left that I want to do for 3.0:\n\nECDH support (and a distinct DH API)\nChaCha20 and Poly1305\nmake public / private keys immutable. instead of doing (new ECDSA)->load('...') you'd do ECDSA::load('...')\n\nMaybe compression, too, depending on how I feel. I have a number of tweaks I want to do as well:\n\nspeed up GCM. Right now phpseclib, when not using the PHP 7.1+ OpenSSL bindings or libsodium, is 6x faster than https://github.com/Spomky-Labs/php-aes-gcm is under those same conditions (phpseclib can do 1mb in 10s; that lib does 1mb in 60s)\nrm SSH1.php and SCP.php\nrewrite the code so that Common/Functions/Objects.php can be removed\nimplement a better fix for #1245 \n\nAfter that I'll want to pretty much redo the documentation. Maybe hosted on https://pages.github.com/.\nSo I guess before work on 4.0 would commence all of that would need to be done. As for how long that'd take...  well GCM support got implemented a lot faster then I expected. I'm thinking (hoping) that now that a lot of the finite field / elliptic curve stuff has been implemented everything else should go much faster. The finite field work made GCM support go by a lot faster. If I hadn't done the finite field work for ECDSA I probably would have used the very subpar reduction algorithm given in the GCM specs instead of the one that I am using and things would be much slower.\nMaybe another year for 3.0? Maybe less idk lol. 4.0...  hopefully that won't take as long as 3.0 has.\nI think the 3.0 branch has taken as long as it has because mathematical algorithms are hard whereas API's are relatively easy. . > I fall on the read timeout (30s?)\nThe timeout is, by default, 10s.\nAnyway, I think it might actually help if you increase your timeout a bit. It seems possible that it's occasionally timing out before --More-- is returned. eg. --More-- would be returned if you had waited a little longer but you're not.\nAlso, idk if the network devices prompt is sufficiently unique to make distinguishing it from other output viable (or even if the network device even has a prompt?) but if so I'd look fro that instead of waiting for it to timeout when a prompt isn't found.\nAnd personally, it seems like your code might benefit from being written with a do / while loop instead. eg.\nphp\n$i = -1;\ndo {\n    $i++;\n    if ($i) {\n        $ssh->write(\"\\n\");\n    }\n    $index[$i] = $ssh->read('--More--');\n} while (strpos($index[$i], '--More--') !== false);\nOr something like that.\nBeyond that I'm not sure how much help I can offer. It's not entirely clear what exactly the issue is. Is it timing out when it shouldn't be timing out? If so then my suggestion of increasing the timeout should help.. I don't have a problem with the change per say but could you provide the SFTP logs showing the necessity of the change? The screenshot gives me a general idea but I'd rather see the log files.\nOverall it's a bit disconcerting that an SFTP server would respond with a NET_SFTP_DATA packet for a 32kb read request, x+y bytes into a given file whilst responded with an NET_SFTP_STATUS packet for a 32kb read request, x bytes into the same file. If it's gonna be doing that then it kinda makes one wonder if even breaking out of the loop that sends the read requests is appropriate. How are you to know if there's gonna be a mysterious NET_SFTP_DATA packet sent back if you sent an a read request x+y+z bytes into the file?\nMost SFTP clients, I imagine, send 1x read request and read the 1x response immediately. They'd start from offset 0 and would, I imagine, do this until either they had read x bytes, where x was the size of the file, or until they got an error (NET_SFTP_STATUS packet) back. How would a regular SFTP client deal with the scenario this PR is attempting to make phpseclib work with? My expectation is that it wouldn't work at all.\nI mean, maybe there's a valid use case for AWS SFTP-S3 service to behave this way but it almost seems more likely that this is a bug. This wouldn't be the first time I got a ticket about something that turned out to be a bug about a third parties implementation of SFTP. See #892 for example.. I'd still like to see the SFTP logs to get a better understanding of what's going on. If you could provide them that'd be helpful!\nTo get them you can do define('NET_SFTP_LOGGING', 2); at the top and then $sftp->getSFTPLogs(); after the issue has manifested itself.\nThe logs will give me more info into the issues and will better enable me to see if the proposed fix is the best fix.\nThanks!. I think https://github.com/phpseclib/phpseclib/commit/fce6063de6844904b0a3facf3ba63a17f6f7b69d likely fixes the issue this was attempting to resolve.. > is it decimal? Is octal? Is it packed?\nIt's decimal and it's not packed.\nI think the following diagram I made will help you better understand how it works:\nhttps://i.stack.imgur.com/DHD6E.png\nSo consider http://phpseclib.sourceforge.net/sftp/examples.html#list . $sftp->rawlist()['bashrc']['permissions'] is 33188. decbin(33188) gives 1000000110100100 back. Here are a few scenarios:\n\n\"Others\" permissions: 33188 & 07 == 4 or 100.\n\"Owners\" permissions: (33188 >> 6) & 07 == 6 or 110.\nTest to see if g+r is set: (33188 >> 5) & 1\n\nThe \"Special Modes\" are discussed here:\nhttps://en.wikipedia.org/wiki/File_system_permissions#Changing_permission_behavior_with_setuid,_setgid,_and_sticky_bits\nThey're setuid, setgid and sticky. idk what order they're in so I didn't include them in the diagram.\nAs for the file type...  the following code should elucidate some:\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L2912. See http://php.net/manual/en/function.fileperms.php as well.. \"Public key format: \" does not occur as a string anywhere in Net/SSH2.php. I'm guessing you modified the user_error('Server Host Key Algorithm Mismatch') line?\nSo let's breakdown this presumably modified error message. You have this:\nPublic key format: ssh-rsa server host key algorithm: ssh-rsa signature format: ssh-rsa server host key algorithm: ssh-rsa\nI'm gonna add new lines for readability:\nPublic key format: ssh-rsa\nserver host key algorithm: ssh-rsa\nsignature format: ssh-rsa\nserver host key algorithm: ssh-rsa\nIt seems like you're echo'ing out the \"server host key algorithm\" twice whilst never echo'ing out the \"expected key format\" or something. Per the if condition the user_error line will only be called if there's a mismatch, which is not what you're output shows. Maybe it would show a mismatch if you were echo'ing out the \"expected key format\" but you do not appear to be doing so.\nI mean, who knows, maybe you are. Maybe your description of each variable is just off but you haven't posted the changes you made so I can only guess.. > So it appears _array_intersect_first() is selecting the wrong value?\nNo. $server_host_key_algorithm should be rsa-sha2-256 based on the print_r output you've provided. Quoting RFC4253,\nThe first algorithm on the client's name-list\nthat satisfies the requirements and is also supported by the\nserver MUST be chosen.  If there is no such algorithm, both\nsides MUST disconnect.\nMaybe $this->signature_format is ssh-rsa and maybe that's where the mismatch is idk. What'd really help are the SSH logs, which you can get by doing define('NET_SSH2_LOGGING', 2); at the top and, later, echo $ssh->getLog(); after you encounter the error.\nOf course, if $this->signature_format were ssh-rsa then the server would be out of compliance with RFC8332. Quoting it,\n```\n   The resulting signature is encoded as follows:\nstring   \"rsa-sha2-256\" / \"rsa-sha2-512\"\n   string    rsa_signature_blob\nThe value for 'rsa_signature_blob' is encoded as a string that\n   contains an octet string S (which is the output of RSASSA-PKCS1-v1_5)\n   and that has the same length (in octets) as the RSA modulus.  When S\n   contains leading zeros, there exist signers that will send a shorter\n   encoding of S that omits them.  A verifier MAY accept shorter\n   encodings of S with one or more leading zeros omitted. \n```\nI mean, I suppose it's possible the server is out of compliance. SSH servers sometime do have bugs after all. In that scenario it might be prudent for me to add a special if statement for whatever SSH server you're using. Here's an example of where something similar is already done:\nphp\n        // some SSH servers have buggy implementations of some of the above algorithms\n        switch (true) {\n            case $this->server_identifier == 'SSH-2.0-SSHD':\n            case substr($this->server_identifier, 0, 13) == 'SSH-2.0-DLINK':\n                $mac_algorithms = array_values(array_diff(\n                    $mac_algorithms,\n                    array('hmac-sha1-96', 'hmac-md5-96')\n                ));\n        }. And as for $public_key_format != $expected_key_format...\nPer the switch right above that line $expected_key_format can only be ssh-dss or ssh-rsa:\nphp\n        switch ($server_host_key_algorithm) {\n            case 'ssh-dss':\n                $expected_key_format = 'ssh-dss';\n                break;\n            //case 'rsa-sha2-256':\n            //case 'rsa-sha2-512':\n            //case 'ssh-rsa':\n            default:\n                $expected_key_format = 'ssh-rsa';\n        }\nAs for $public_key_format...  quoting RFC8332:\n```\n   Since RSA keys are not dependent on the choice of hash function, the\n   new public key algorithms reuse the \"ssh-rsa\" public key format as\n   defined in [RFC4253]:\nstring    \"ssh-rsa\"\n   mpint     e\n   mpint     n\nAll aspects of the \"ssh-rsa\" format are kept, including the encoded\n   string \"ssh-rsa\".  This allows existing RSA keys to be used with the\n   new public key algorithms, without requiring re-encoding or affecting\n   already trusted key fingerprints.\n```\nSo that should be ssh-rsa as well. Unless, of course, you have a buggy server.. So yah I do contend that the response is malformed. From RFC4253:\n  byte      SSH_MSG_KEXDH_REPLY\n  string    server public host key and certificates (K_S)\n  mpint     f\n  string    signature of H\n\nYour response contains ssh-rsa twice:\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0559, network: 0.0558s)\n00000000  00:00:00:95:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:00:81:00:db:32:59:c7:a5:64:48  ...#......2Y..dH\n00000020  90:b5:e1:22:0b:aa:fc:cb:89:1d:ef:f1:e4:b4:0f:b6  ...\"............\n00000030  6c:ec:2e:fb:ef:5c:83:c1:af:74:51:6f:09:92:12:b6  l....\\...tQo....\n00000040  dd:d9:3f:1b:c4:7b:e2:47:5c:59:81:0e:9f:79:02:4a  ..?..{.G\\Y...y.J\n00000050  bf:f6:af:3f:94:b5:84:e1:65:e5:94:6b:91:7a:05:c4  ...?....e..k.z..\n00000060  ff:5f:91:b0:87:54:40:97:0e:44:4b:19:d1:af:e8:62  ._...T@..DK....b\n00000070  66:16:0b:23:b0:62:bd:52:28:e4:4c:de:70:8b:34:28  f..#.b.R(.L.p.4(\n00000080  4a:23:31:15:24:5c:8f:82:94:72:1c:c9:70:58:ea:0a  J#1.$\\...r..pX..\n00000090  df:95:01:60:8d:9a:61:14:cb:00:00:00:80:71:bc:bd  ...`..a......q..\n000000a0  dd:02:2d:7f:6a:68:f6:16:07:cf:02:98:24:12:fc:0b  ..-.jh......$...\n000000b0  da:02:4f:cc:13:13:c1:6a:ca:7a:a9:de:06:8a:e3:4c  ..O....j.z.....L\n000000c0  82:37:83:58:4f:54:ad:f9:7e:1a:82:d4:93:08:bb:cf  .7.XOT..~.......\n000000d0  74:5e:50:68:3c:95:b4:32:40:b1:1f:a3:22:2e:fe:a6  t^Ph...2@...\"...\n000000e0  2c:e9:22:c1:72:14:6a:1c:fb:45:55:e4:be:1a:2d:53  ,.\".r.j..EU...-S\n000000f0  46:94:2f:2d:c8:42:e5:6d:cc:fa:78:76:b5:56:8d:05  F./-.B.m..xv.V..\n00000100  03:39:68:a6:6f:a2:57:64:a3:02:01:68:2f:85:0e:fd  .9h.o.Wd...h/...\n00000110  46:d7:d0:f0:ec:86:ca:2b:e4:c2:07:a5:55:00:00:00  F......+....U...\n00000120  8f:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:80  .....ssh-rsa....\n00000130  31:98:e4:cb:45:63:2b:4d:dd:aa:d8:ce:c2:7f:10:8a  1...Ec+M........\n00000140  8b:c3:29:14:51:2a:e2:86:21:ac:75:00:94:b4:b9:03  ..).Q*..!.u.....\n00000150  84:23:90:32:37:36:7d:4e:ab:8f:be:7b:eb:f5:ea:9b  .#.276}N...{....\n00000160  fa:68:b7:1c:81:74:f5:a8:ec:85:44:75:b2:ba:1b:4d  .h...t....Du...M\n00000170  78:1b:c4:fd:18:1e:8b:7c:02:73:69:98:ce:a0:fc:34  x......|.si....4\n00000180  df:07:26:0c:4f:25:1c:38:52:16:eb:0b:bb:45:d7:81  ..&.O%.8R....E..\n00000190  11:63:40:1b:1b:ab:70:68:69:4c:ee:cf:8f:18:c8:be  .c@...phiL......\n000001a0  07:27:42:03:66:b1:89:e4:18:f0:84:eb:2a:27:8d:04  .'B.f.......*'..\nHere's the response from a digitalocean droplet that I just tried to connect to via SSH:\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.1584, network: 0.1583s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:aa:2a:e2:5c:5e  ............*.\\^\n00000020  4d:a3:4f:e6:f2:d2:b9:8a:2d:65:3e:41:b4:95:10:6f  M.O.....-e>A...o\n00000030  a3:76:da:7a:f2:2c:7e:51:06:a2:c7:e2:ec:a4:4c:cb  .v.z.,~Q......L.\n00000040  79:e0:bf:b7:31:3d:0a:65:c4:f5:69:87:02:30:28:4d  y...1=.e..i..0(M\n00000050  18:03:7f:30:9d:48:fb:d2:36:63:8f:57:ac:39:8d:74  ...0.H..6c.W.9.t\n00000060  cd:1d:4c:82:e1:a7:e7:3f:d5:23:1e:80:b4:72:7a:b8  ..L....?.#...rz.\n00000070  89:f8:5b:4a:1a:cc:5f:85:03:8f:08:4e:bc:8e:a3:aa  ..[J.._....N....\n00000080  35:b4:eb:a2:50:39:40:40:79:6d:91:07:68:0c:25:bf  5...P9@@ym..h.%.\n00000090  66:c8:bc:a0:ab:47:df:0e:6c:1b:50:d4:a2:46:e7:ec  f....G..l.P..F..\n000000a0  91:57:15:89:f8:6b:14:f5:6a:a5:a5:ee:31:cb:f9:ab  .W...k..j...1...\n000000b0  7e:0e:f7:84:15:9a:b9:1e:a6:23:d7:6f:7f:2c:44:53  ~........#.o.,DS\n000000c0  70:e5:cd:ad:c0:7e:86:4f:22:6d:bb:fd:1f:f2:c7:b5  p....~.O\"m......\n000000d0  0a:74:e8:07:75:50:8e:32:e2:7d:70:f0:0f:4f:2e:ee  .t..uP.2.}p..O..\n000000e0  07:f3:89:d7:30:f3:b0:98:8f:c7:ae:a6:f1:85:d0:48  ....0..........H\n000000f0  f9:c1:52:c4:f4:7d:84:d9:2f:05:4e:f0:d7:b6:79:31  ..R..}../.N...y1\n00000100  69:8d:09:ad:fc:61:74:07:fd:0c:12:b5:41:1b:f8:97  i....at.....A...\n00000110  9b:b0:69:42:36:18:f2:5a:e1:30:a1:00:00:01:00:42  ..iB6..Z.0.....B\n00000120  a6:c8:dc:9a:63:15:13:14:a2:8d:45:48:61:4c:26:b9  ....c.....EHaL&.\n00000130  96:62:bb:34:6b:b7:37:c0:29:dc:72:06:8d:e5:53:6f  .b.4k.7.).r...So\n00000140  a4:ea:b5:df:21:99:0f:6a:e4:bd:a1:f1:ed:3d:2e:ef  ....!..j.....=..\n00000150  a3:21:bb:74:36:4d:6a:b9:c9:ce:cc:db:93:0b:af:6d  .!.t6Mj........m\n00000160  f5:9c:0b:16:3e:cd:4d:42:67:de:d3:91:14:c5:ac:17  ....>.MBg.......\n00000170  e9:cc:52:8d:6e:a1:16:4f:f5:19:4e:b1:46:9f:c1:af  ..R.n..O..N.F...\n00000180  1e:bf:b8:0d:5e:ea:31:ef:9f:84:aa:c2:5c:4b:35:5d  ....^.1.....\\K5]\n00000190  c9:aa:64:e4:77:69:dc:c7:78:73:e8:c0:7b:77:1f:10  ..d.wi..xs..{w..\n000001a0  33:79:1d:56:73:c8:bf:34:cb:c1:6e:8f:dd:16:c0:d3  3y.Vs..4..n.....\n000001b0  fd:25:36:c0:4d:a7:ec:b7:e7:7e:09:44:cf:0f:5e:b3  .%6.M....~.D..^.\n000001c0  5b:47:67:ad:3e:1b:00:a4:0a:9f:e6:d2:e7:e0:65:af  [Gg.>.........e.\n000001d0  38:73:c3:72:de:e9:39:6c:a6:2f:51:1a:d9:b9:64:85  8s.r..9l./Q...d.\n000001e0  99:b5:e7:83:d8:94:d8:14:b7:e4:0f:df:d2:80:7c:ef  ..............|.\n000001f0  b4:1f:2c:62:f3:64:a5:a2:dc:ba:20:94:8c:17:5e:b2  ..,b.d.... ...^.\n00000200  a7:34:e4:48:68:43:03:3d:7c:a4:a7:3a:aa:76:0d:40  .4.HhC.=|..:.v.@\n00000210  68:95:33:fb:ba:03:66:62:60:4c:6b:d2:6c:4d:0a:00  h.3...fb`Lk.lM..\n00000220  00:01:14:00:00:00:0c:72:73:61:2d:73:68:61:32:2d  .......rsa-sha2-\n00000230  32:35:36:00:00:01:00:1e:f4:a6:6a:62:01:03:1f:50  256.......jb...P\n00000240  cf:8c:dd:df:89:6c:2b:e1:3f:76:8e:8c:d9:10:db:1b  .....l+.?v......\n00000250  b6:74:4b:11:db:d0:e6:03:a4:b0:5f:c5:98:dd:b8:f2  .tK......._.....\n00000260  95:b1:da:6c:d6:81:bf:81:59:bc:2d:ee:6f:7b:31:95  ...l....Y.-.o{1.\n00000270  5f:b3:19:d7:17:83:f8:6d:71:08:2c:26:43:7c:74:99  _......mq.,&C|t.\n00000280  8c:c8:7f:e0:0a:49:66:e8:f4:ce:12:ba:45:a9:29:8e  .....If.....E.).\n00000290  cb:eb:8e:24:d4:25:7d:10:be:f8:4f:a9:e1:a6:32:15  ...$.%}...O...2.\n000002a0  bf:64:fa:3f:38:4c:46:0b:ba:d3:59:15:79:13:3c:79  .d.?8LF...Y.y..y\n000002b0  8b:e2:05:bd:04:f8:eb:21:d6:87:b3:e8:d7:a9:89:e0  .......!........\n000002c0  11:a0:14:87:27:bb:50:b4:7d:30:ed:af:5c:6d:28:50  ....'.P.}0..\\m(P\n000002d0  b2:ba:3f:b8:13:3f:f7:0c:27:93:99:65:66:3b:20:73  ..?..?..'..ef; s\n000002e0  89:7c:83:8b:ac:33:97:53:55:0e:97:71:21:23:aa:10  .|...3.SU..q!#..\n000002f0  be:95:1a:a2:00:c5:df:61:a4:54:40:c7:bb:a9:15:cd  .......a.T@.....\n00000300  87:8e:66:50:11:a0:90:0d:af:d6:3c:23:a0:88:13:58  ..fP.......#...X\n00000310  e4:e0:51:82:c8:2a:f5:ba:ae:d7:71:d8:99:c4:af:79  ..Q..*....q....y\n00000320  15:20:cc:8b:c0:34:0c:20:ac:ba:47:3b:b3:dc:b8:91  . ...4. ..G;....\n00000330  5f:f3:45:2d:b7:83:0d                             _.E-...\nNote how, in that response, there's ssh-rsa and then rsa-sha2-256. ssh-rsa does not occur twice.\nI'll do some more digging.. Do you think you could give me the IP address / domain name / port of the server you're connecting to?\nSince the problem is with the key exchange I wouldn't need an account on the server - just the IP address / domain name / port and that's it.\nThanks!. https://github.com/phpseclib/phpseclib/commit/b0d63fbfb56222b3b14bc35aa6f6198b3b326d44 should fix this.\nOne thought I did have was to do a user_error('Sever and client agreed to use ' . $server_host_key_algorithm . ' but server returned ' . $this->signature_format . ' signature instead'); after the newly added switch. I've decided against this, for the time being, because, altho that'd work in the 1.0 and 2.0 branches, in the master branch, exceptions are used. ie. if you do user_error the program will continue running. If you throw an exception the program will stop. And idk that this should be a fatal error. I mean, maybe it ought to be but idk.\nFor the time being, however, I think the current approach is sufficient. If rsa-sha2-256 wasn't available phpseclib would just use ssh-rsa, anyway, so we can just pretend they're the same thing as is. If, in the future, phpseclib has API methods added wherein people can pick and chose which algorithms they want to use, then at that point, throwing an exception might be appropriate, but until such time, I think there's no need for that.\nI do wonder how well the server would work with publickey authentication where the publickey is an RSA key that's supposed to be using rsa-sha2-256/512 but I'm not able to test that without an account.. While #1331 is failing during the key exchange you're SSH logs show that phpseclib is getting past that just fine. Best guess atm: the issues are related but they're also distinct issues as well.\nI'll try to install WinSSHD as time permits to see if I can reproduce the problem.\nThanks!. I think https://github.com/phpseclib/phpseclib/commit/055d6097af6fb3359e2f7ef8a804d02b785eca33 should fix this. Apparently Bitvise actually wrote the RFC (RFC8223) off of which rsa-sha2-256/512 is based, so I guess they're pretty much the defacto authority on that algorithm lol\nI still think that #1331 is due to a bug.. If you could pass the output of $ssh->read() through base64_encode and then do chunk_split on it and then give me the result that'd be good.\nThanks!. Usually when there's a NET_SFTP_STATUS packet $sftp->getSFTPErrors() or $sftp->getLastSFTPError() should return something informative.\nPersonally, tho, I generally prefer the raw log files. You can get those by doing define('NET_SFTP_LOGGING', 2); at the top of the file and then echo $sftp->getSFTPLog(); after the is_writable call. If you could do that (or get me the \"errors\") that'd be helpful.\nThanks!. I see what the issue. is_writable / is_readable only currently works on files - not directories. It works by basically trying to open the file, as discussed at https://stackoverflow.com/q/37038811/569976.\nI guess the best way to do that for files might be to try to upload a test file and then deleting it idk. I'll think on it.\nThanks!. Are you using the master branch? Because that's the version of SCP.php that you linked to.\nIf you are then I'd advise against it. I do not plan on SCP.php being in phpseclib 3.0.\nAnyway, a few unattractive possibilities exist.\n\nThrow exceptions or use user_error / trigger_error. The problem is that these would break BC and the only branch that BC breaking changes are kosher in is the master branch and I plan on removing SCP.php, as already stated.\nThere's SSH2::getErrors() and SSH2::getSFTPErrors(). Something like that could be done for this BUT...  those methods return errors that the SSH server issued. eg. if the server sends a SSH_MSG_DEBUG packet that packet contains a \"message\" per RFC4253 \u00a7 11.3. That's what those methods return. They do not return messages that might facilitate diagnostics on phpseclib's end. Like if the RSA key isn't correctly formatted...  it'll just return a false. It won't tell you why. Personally, I think that'd be a higher priority thing then spending time on SCP error reporting.\n\nIn lieu of any immediate resolution to this...  you could try looking at the SSH2::getErrors() output. That might yield something. Also, posting a copy of the logs might be helpful too. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then doing echo $ssh->getLog(); after the error occurs.. Re-reading this...  I guess I kinda glossed over the bit you mentioned in the title lol.\nAnyway, I guess https://github.com/phpseclib/phpseclib/commit/5b795c18ab91f7809a0d6501a6feafbe5aa9921e should address this!. I'd actually say it's a bug in the SSH server lol. The problem is that the server is saying it supports rsa-sha2-256 (or rsa-sha2-512) signatures but is then sending an ssh-rsa signature (with sha1) instead, hence the error. https://github.com/phpseclib/phpseclib/issues/1331#issuecomment-455034026 elaborates on this more fully.\nThe fix should be in the latest git versions of the 1.0 and 2.0 branches, as well, and I'm planning on releasing a new version this weekend.\nThanks!. I'm not able to reproduce this in phpseclib 2.0.14 / PHP 7.2.8: \n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Net\\SSH2;\n$ssh = new SSH2('localhost');\necho defined('NET_SSH2_DISCONNECT_BY_APPLICATION') ? 'yes' : 'no';\n```\nThat constant is defined in the SSH2 constructor:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.14/phpseclib/Net/SSH2.php#L994\nShortly after that line _define_array is called here:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.14/phpseclib/Net/SSH2.php#L1010\n_define_array defines undefined values here:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.14/phpseclib/Net/SSH2.php#L4203\nMaybe post the code that reproduces this issue?. To further speed it up I'd have to see the SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog(); afterwards.. @AndreAntG - maybe over the weekend. This isn't as simple as me just looking at log files. I have to setup an HTTP CONNECT proxy, look at the protocol to determine how to then actually connect to it, write the code that does that, potentially debug it, etc.\nUnderstand that your request is one of the more time consuming ones on my plate and that my free time is finite. I'm going to try to get to it but I'm not going to try to squeeze it into an already jam packed weekday schedule, especially when I'm not being paid to do so.. I got it working for me...\n```php\n<?php\ninclude('Net/SSH2.php');\n$fsock = fsockopen('127.0.0.1', 80, $errno, $errstr, 1);\nif (!$fsock) {\n    echo $errstr; exit;\n}\nfputs($fsock, \"CONNECT website.com:22 HTTP/1.0\\r\\n\\r\\n\");\nwhile ($line = fgets($fsock, 1024)) {\n    if ($line == \"\\r\\n\") {\n        break;\n    }\n    //echo $line;\n}\n$ssh = new Net_SSH2($fsock);\n$ssh->login('user', 'pass');\necho $ssh->exec('ls -latr');\n```\nOf course, that's without authenticating into the proxy itself. I'll try that out as time permits.. With authorization:\n```php\n<?php\ninclude('Net/SSH2.php');\n$fsock = fsockopen('127.0.0.1', 80, $errno, $errstr, 1);\nif (!$fsock) {\n    echo $errstr; exit;\n}\nfputs($fsock, \"CONNECT website.com:22 HTTP/1.0\\r\\n\");\nfputs($fsock, \"Proxy-Authorization: Basic \" . base64_encode('user:pass') . \"\\r\\n\");\nfputs($fsock, \"\\r\\n\");\nwhile ($line = fgets($fsock, 1024)) {\n    if ($line == \"\\r\\n\") {\n        break;\n    }\n    //echo $line;\n}\n$ssh = new Net_SSH2($fsock);\n$ssh->login('user', 'pass');\necho $ssh->exec('ls -latr');\n```\nIf that doesn't work then run the script and tell me what the headers you get back are. Digest authentication is more of a PITA then Basic but it's not impossible.\nMore info on how authorization works with HTTP proxies:\nhttps://tools.ietf.org/html/rfc7235#section-4.3. From http://phpseclib.sourceforge.net/ssh/auth.html#rsakey:\n```php\n<?php\ninclude('Net/SSH2.php');\ninclude('Crypt/RSA.php');\n$ssh = new Net_SSH2('www.domain.tld');\n$key = new Crypt_RSA();\n$key->loadKey(file_get_contents('privatekey'));\nif (!$ssh->login('username', $key)) {\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\necho $ssh->exec('ls -la');\n?>\n```. It seems possible that TeamSpeak3 doesn't let their be more then one channel open at a time.\nI would ask if exec works if you do it without the read's but that can't be inferred from the logs because the second NET_SSH2_MSG_CHANNEL_OPEN packet is failing before there's a chance to send an \"exec\" NET_SSH2_MSG_CHANNEL_REQUEST message.\nI suppose it's possible that TeamSpeak3 doesn't like NET_SSH2_MSG_CHANNEL_OPEN's on channel 2 (for interactive shell channel 1 is used) but that's hard to believe.. Looks to me like the SSH server simply doesn't support exec commands. That wouldn't explain what the first log was showing but, none-the-less, the fact is that some SSH servers are simply limited in what they support. For example, Cisco IOS routers have, historically, not let you do multiple exec()'s:\nhttps://community.cisco.com/t5/vpn-and-anyconnect/multiple-successive-ssh-msg-channel-requests/td-p/1412618\nThe SSH server closes the connection after the first one has been completed and there's not much that can be done about that. Maybe it's the same way with this server idk. It looks like TeamSpeak3's SSH support is less than a year old:\nhttps://forum.teamspeak.com/threads/136554-Release-TeamSpeak-3-Server-3-3-0-amp-3-3-1\nThe server signature says SSH-2.0-libssh_0.8.4. libssh is a library that you can use to implement an SSH server with. https://github.com/substack/libssh/blob/master/examples/samplesshd.c is an example implementation of such a server.\nMy guess: they basically implemented their own SSH server, using libssh2, and only support the most common use cases for SSH. eg. SSH'ing with an interactive client, like openssh via the CLI or PuTTY.\nYour best bet is to probably avoid doing exec at all and to stick exclusively with the interactive commands (read and write). I squashed these two commits into one commit, cherry picked into 1.0 and then merged 1.0 into 2.0 and 2.0 into master:\nhttps://github.com/phpseclib/phpseclib/commit/9a0a9a009669f2d7496b0361653d94c6afedc259\nThanks!. In all likelihood bantu's assessment is correct.\nNone-the-less, it'd be interesting to see your SSH logs. You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $this->ssh->getLog(); after you login.\nSeeing your phpinfo() could provide additional insight.. I tried to access the files on the drive.google.com links you provided and I guess I need you to provide me access. The email address I tried to access them with is terrafrost@gmail.com.... You shared error-log with me. Could you share ssh-log with me as well?\nIs ssh-log the OpenSSH log or the phpseclib logs? I would much prefer the phpseclib logs.\nThanks!. I hadn't had a chance to start going through the log files until this morning (busy past few days at work). My work is ongoing.\nMy initial theory (with the caveat that I'm not finished going through the log files) is that you're downloading a file that's actively being modified (it kinda looks like you're downloading Apache server logs? keep in mind I'm still going through stuff).\nA good example of this would be...  let's say a file has 1mb added to it every 30s. I start the download when it's at 5mb and the download takes 1m. That'd mean that between the time the download started and ended the file grew in size by 2mb to 7mb. In that scenario phpseclib would only download the first 5mb since the file size was 5mb when it started.\nAgain, this is based on my very cursory glance of what I've seen thus far and my assessment could change the more I delve into what you've provided.. Here's the packet that's returning the size of the file from the extracted SFTP logs:\n<- NET_SFTP_ATTRS\n00000000  00:00:00:0d:00:00:00:00:00:08:6c:8e:00:00:81:e4  ..........l.....\n00000010  5c:38:b4:a4:5c:38:b4:a4                          \\8..\\8..\nHere's a breakdown of the first 12 bytes in that packet:\n\n\n00:00:00:0d: flags. the following are present:\n  SSH_FILEXFER_ATTR_SIZE\n  SSH_FILEXFER_PERMISSIONS\n  SSH_FILEXFER_ATTR_ACMODTIME\n\n\n00:00:00:00:00:08:6c:8e: size (552078 bytes)\n\n\nI extracted the file from the logs and it is the exact length that the NET_SFTP_ATTRS packet claimed it was. You say that the result size is 388238 and that the result using chunk is 491520. How are \"result size\" and \"result using chunk\" different? Can you post the code you're using to do the download? I can email you the file I was able to extract from the logs if you want to compare it to the expected file.. What version of phpseclib are you using? 1.0.14 or 2.0.14? A copy of your phpinfo() would be helpful as well.\nThere are a few things that I think, at this point, are going to significantly hinder diagnostics.\n\nInability to reproduce. phpseclib passes all the unit tests and some of the unit tests involve the downloading of files. To top it off, with phpseclib being downloaded close to 1.5 million times monthly and no one else reporting the issue I think it's unlikely I'm going to have a lot of success reproducing the issue\nA review of the logs and the code reveal no obvious issues\n\nWhat'd be helpful at this point (in addition to what I initially asked for) is SSH access. SSH access to the server you're downloading the files from might help but I actually kinda doubt it since the logs don't show anything to be wrong. I mean, at the very least, it couldn't hurt! But after that I think SSH access to the machine you're running phpseclib on would help.\nFailing that what I guess the next approach would be...  I post debug code and you post the response. Given that there's no obvious issues in place we'll just have to double check every single step. So if I have to ask you to make 20 successive changes and it takes you 24h to get back to me with each change it'll take 20 days for us to figure out what the issue is. I can't stress to you how much of an absolute pain in the ass that is and, odds are, you'll grow weary of responding before we've figured anything out and that'll be that. SSH access is highly preferable.. Looks like there are a number of proprietary extensions installed that I've never heard of. I could list them out but idk that I should in public lol.\nAnyway, I do wonder if maybe one of those is kinda mucking things up. I Google'd for some of these seemingly proprietary extensions without success.\nA test environment would def help.\nThanks!!. Thanks! I'll look at it for sure this weekend but I'll try to look at it sooner if I get a chance!. Does https://github.com/terrafrost/phpseclib/tree/2.0 fix the issue for you?\nHere's the specific commit:\nhttps://github.com/terrafrost/phpseclib/commit/fce6063de6844904b0a3facf3ba63a17f6f7b69d\nThanks!. It's in 1.0:\nhttps://github.com/phpseclib/phpseclib/commits/1.0\nThanks for your help and patience!. Here are the incoming packets:\n<-\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1844, network: 0.1844s)\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.2244, network: 0.2244s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.4077, network: 0.4077s)\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.1961, network: 0.1961s)\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.1865, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1885, network: 0.1885s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.1856, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1856, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1861, network: 0s)\nTotal time: 1.9449s\nHere are the outgoing packets:\n->\n-> NET_SSH2_MSG_KEXINIT (since last: 0.3795, network: 0s)\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0015, network: 0s)\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0005, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\nTotal time: 0.3823s. 99% of that time is due to the initial NET_SSH2_MSG_KEXINIT packet and I think that packets slowness may be more due to slowness in the server identification string that the server sent instead of anything phpseclib is doing.\nIt looks to me that the problem is on the servers end. Sometimes you can have low latency but slow overall speed. Maybe that's the issue.\nMy expectation is that any SFTP / SSH2 client you try to use is going to be slow.. I squashed this into one commit and then cherry-picked it into the 1.0 branch and then merged that branch into 2.0 and master:\nhttps://github.com/phpseclib/phpseclib/commits/1.0\nThanks!. This should be fixed in the latest commit. I'm going to be doing a new release today or tomorrow.\nThanks!. I cherry picked this into the 1.0 branch and merged it into the 2.0 branch and the master branch:\nhttps://github.com/phpseclib/phpseclib/commit/7c894b2b99f57c0dddb54c0f1af87a1cd9383e5b\nThanks!. Can you post the SSH logs? You can get them by doing define('NET_SSH2_LOGGING', 2); at the top and then echo $ssh->getLog(); after the $ssh->read();.. I think the feedback you're getting on stackoverflow is good:\nhttps://stackoverflow.com/questions/55098095/phpseclib-ssh2-write-not-executing-long-command\nI guess the only other thing I can add to what neubert said is...  are you able to run the command with a shell script? Over an interactive shell you can send special characters, you can have ANSI escape codes, etc. You don't have as much versatility in the data that you can send / receive via a shell script as you do via the bash prompt. The extra versatility raw bash provides can sometimes make bash a little harder to reason about.\nAnyway, it's just a thought. All I can do, in lieu of the actual command, is to chime in with thoughts such as these.... I don't have a fortigate firewall I can conduct tests on and I'm disinclined to buy one.\nIn the most recent stackoverflow post it was suggested that you email me since confidentiality was an issue. That'd work.\nAlternatively, some people have have gotten their problems resolved by giving me full SSH access. This most recently happened with #1343 and the fact that the poster did that enabled me to implement this fix:\nhttps://github.com/phpseclib/phpseclib/commit/fce6063de6844904b0a3facf3ba63a17f6f7b69d\ntbh idk that I would have been able to come up with that as a fix had it not been for the poster willing to give me SSH access.\nNote that this isn't to say that this is definitively a bug in phpseclib but alas there is waaaay too little info here with which to make a diagnosis.. > In the meanwhile I would like to know if there is any limitation on the length of the command I can pass in $ssh->write() .\nNot in-so-far as phpseclib is concerned. Case in point:\nphp\n$ssh->exec('echo ' . str_repeat('z', 3000) . ' > test.txt');\nThat results in a 3001 byte file being created. The extra byte is \"\\n\".\nKeep in mind that, in all likelihood, when you're running the command in PuTTY you're likely doing so through an interactive shell. exec() is not an interactive shell and it's possible that the firewall that you're connecting to is, itself, imposing a limit that phpseclib isn't.\nIf you want to do an interactive shell with phpseclib do $ssh->write(). Here's an example of how to do interactive shells:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive. Scratch my last post - you are using interactive mode lol. But still...  it's not an issue in interactive mode either:\nphp\n$ssh->read('[prompt]');\n$ssh->write('echo ' . str_repeat('z', 3000) . \" > test.txt\\n\");\n$ssh->read('[prompt]');\nThat yields the same result - a 3001 byte file.\nidk if the firewall has a prompt but, if it does, it might be worthwhile to wait for the prompt as I'm doing in my example. In PuTTY you're probably only entering the command in after the prompt becomes available. If there's a few second delay before the server sends you the prompt that could be causing issues.\nOutside of that the two big differences I'm aware of with PuTTY vs phpseclib are as follows:\n\ndifferent terminal modes are used. phpseclib uses vt100 whereas PuTTY, I believe, uses xterm. This mainly affects the ANSI escape codes but who knows...  maybe it has additional impact on additional firewall's.\nPuTTY sends characters one packet at a time. Quoting the stackoverflow.com post, \"don't send the command in one big giant $ssh->write() but, instead, send it a character at a time. eg. for ($i = 0; $i < strlen($command); $i++) $ssh->write($command[$i]);\"\n\nRegardless, there is no limit on the size of the commands that you can send to the server. At least not on the phpseclib side of things. To understand why it's working with PuTTY and not phpseclib the logs would really help.. I think the feedback you're getting on stackoverflow is good:\nhttps://stackoverflow.com/questions/55114045/how-do-i-copy-folder-server-to-server-with-phpseclib\nNot much more I can add beyond what neubert did.... bantu is correct - the 2.0 branch should only require PHP 5.3.3. For the master branch (which will eventually become the 3.0 branch) the requirements are currently 5.6.\nIf there are instances of short array syntax being used in the 2.0 branch please point them out.\nThanks!. No worries - it happens lol. I do appreciate the fact that you posted about it on github! I full expect that 90% of people who have issues keep quiet so it's always refreshing when someone actually goes to the effort to make a github post about it :). I'm about to head off to work so I'll review this in more depth later but...\nhttp://blog.golemon.com/2006/05/last-month-at-phptek-i-gave.html\nEspecially when it comes to objects using references can speed things up because PHP doesn't have to try to make a calls to __get / __set.\n. I agree to an extent. But some of the optimizations petrich has done would blow up the size of the file, as well, if not done with create_function and the like.\nLike one of the things he's doing (and correct me if I'm wrong petrich) that's contributing to the speed is this:\nphp\nextract($self->keys[CRYPT_DES_ENCRYPT_1DIM],  EXTR_PREFIX_ALL, \"k\");\n...\n$b1 = (($r >>  3) & 0x1FFFFFFF)  ^ ($r << 29) ^ $k_'.(++$ki).';\nie. he's taking advantage of the fact that I guess it's faster to lookup a variable for PHP than it is for PHP to lookup the index of an array.\nThat could be done, one by one, for every element in the key, in without using create_function() but it'd take a lot more space. And although I think the create_function() technique does impair readability and maintainability somewhat I think it'd impair readability even more to not use create_function(). ie. I'd rather read a 10k chunk of code than a 100k chunk of code or whatever.\nThe difference is even more pronounced in Crypt_Rijndael. Prior to petrich's optimizations Crypt_AES was a partially loop unrolled version of Crypt_Rijndael. That partial loop unrolling led to an almost 50% speedup. petrich's changes loop unroll it even more than before and for every possible key / block length combo Crypt_Rijndael uses.\nOptimizations that impair readability are not without precedent. See, for example, crypt_random:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Random.php#L59\nPHP_OS & \"\\xDF\\xDF\\xDF\" is hackish but it's a ton faster than strtoupper(substr(PHP_OS, 0, 3)). And in that particular case (and in the case of the symmetric ciphers) I feel it's at least somewhat justifiable since those functions could potentially be called 100's or thousands of times, one call right after the other.\n. > PHP_OS & \"\\xDF\\xDF\\xDF\" seems to be a rather bad example. Instead of evaluating that expression over and over again and using a hack to make it fast, almost everyone would just go ahead, evalute the expression once (PHP_OS is constant after all) and store it in a variable.\nI didn't even think of that meh. idk..  maybe I just got tunnel vision 'cause I think PHP_OS & \"\\xDF\\xDF\\xDF\" is cool in how it works. Anyway my latest commit changes this around..\n. Re: https://github.com/phpseclib/phpseclib/commit/17d73a4e357513e64dd9bc1478ad18ac024cd7c6\nI just did it for purposes of consistency. Beyond that...  no real reason lol.\n. To be honest, I'm not as concerned with BC w.r.t. setPassword() because, overall, I get the impression setPassword() isn't that widely used. idk.\nOther ideas: maybe we could have diff default values for diff kdf's. Alternatively, for kdf's that have a lower max length we could do min($password_key_size, $kdf_max_length) or something..\n. I agree.\n. idk if I ever even thought of that for AES. But I do like consistency. Maybe AES / Rijndael could have a second parameter added to their setKey() function and setKeyLength() could be added to Crypt_RC2? That way it'd be the best of both? idk\nAs for 3DES's not doing it..  that's a good point. I'm not too concerned about it though - if people want that feature in 3DES or whatever they can do a feature request. That one has yet to be received suggests it isn't a very in-demand feature.\n. I agree. I'll merge now and will change that myself.\nThanks!\n. Nice catch!\n. Notice: Hex number is too big: 0x100000000 is the error. You won't get the error if it's in your main PHP file but you'll get it if you do that in an included file. ie. the issue is that on PHP5.1 and earlier it doesn't convert hex values larger than the max int size to floats whereas it does on PHP5.2 and later.\nAnd I'm aware that N is a 32-bit int. The idea with that is to get the upper 32-bits of $new_size (to the extent that we can) and then to get the lower 32-bits with the second half. In this way phpseclib can process files larger than 2GB. SFTP, as a protocol, supports files up to 2**64 bytes or 16,384 petabytes. PHP obviously doesn't support that but it can be made to support files > 2GB. See https://github.com/phpseclib/phpseclib/commit/2c80ac8acad6d4b0c486d4e5db63ac6e27b3e4ea\nI could do $new_size % 4294967296 as well for the third param but there's no need - that'll happen when it gets cast to an int anyway.\nAlso, even with this method there's still an upper bound. 64-bit floating point has 52-bits stored for the significand. But if you're trying to upload a file with less than 2**52 bytes it'll still work.\n. I don't see it as being that critical. First, I don't really see >2GB transfers as phpseclib's intended use-case but if we can accommodate people wanting to do that without too much effort we should. Second, at a certain point, you're liable to run into issues with the internal pointers of fread and fwrite. Calling fpos would cause a problem because fpos returns an int and not a float but phpseclib doesn't call fpos. That's not to say other problems can't arise though.\nAt best we could maybe make it so phpseclib takes in either ints or Math_BigIntegers (ie. not one or the other exclusively but both) for functions like truncate but... if someone wants a feature like that they can create an issue on github. We haven't gotten one yet. People have asked for >2GB file support. We haven't gotten any requests for files above the limit that this code has so I think it's fine.\n. I can't think of one. We need to be able to pass an arbitrary number of parameters to login() for multi factor auth, hence the need for call_user_func_array, which needs a callback. If you do array('Net_SSH2', 'login') $this will be null in PHP4 but it isn't if you do $this. For PHP4 compat it needs to be passed by reference. It's not really an issue in getLog because getLog doesn't change the state of anything. This function does.\nAlso, per http://php.net/manual/en/language.references.pass.php, \"call-time pass-by-reference was removed [in PHP 5.4], so using it will raise a fatal error\" and yet this doesn't even raise an E_NOTICE on PHP 5.5.\nTechnically, in the php5 branch, none of these changes are even necessary. 0x100000000 works just fine in PHP 5.2+. Indeed, I think it might even be preferable since I think it's more readable. And in my testing $_SESSION is always defined in PHP 5.1 or something and later and it's not like we've gotten bug reports about that anyway. fwiw.\nI mean, I suppose the fact that Net_SSH2 doesn't currently work on PHP4 could be used as evidence that phpseclib should just be PHP5-only but I disagree. PHP4 compatibility is still pretty easy (as this commit is testament to) and I think it helps legitimize the claim that phpseclib is \"ultra-compatible\". I suppose it's a feature that's going to see the most use in marketing material (which to an extent the website is) but a feature that has no use outside marketing can still be a useful feature.\nAnyway, we've been over that before. No need to beat a dead horse.\n. http://stackoverflow.com/a/20746136/569976 would seem to provide some insight into why PHP5.5 doesn't complain about &$this in callbacks.\n. I think the only other place it's used is in getLog or something? I'm okay with that. Although that said I do have mixed feelings about having this commit in the php5 branch. For easier maintainability between the various branches and conflict avoidance I think it ought to be merged but if phpseclib didn't have a PHP4 branch at all then I'd say renaming login to _login and having login call _login would be unnecessary and could cause some limited confusion needlessly. idk lol\n. $_SESSION gets defined after session_start() is called. The thing is...  it seems on newer PHP versions $_SESSION is defined even before session_start().\n. $_OLD_SESSION isn't set if $_SESSION isn't set before session_start() (with the code that this commit changes) and if $_OLD_SESSION isn't set then you're serializing a non-existent variable, which causes a Notice: Undefined variable:  _OLD_SESSION E_NOTICE on PHP 4.4, 5.0, 5.1 and 5.2.\n. Yes. Although the only reason that may not not defined is because $_SESSION may not be defined. So I still think the commit message is a fair one.\n. I just adapted https://github.com/phpseclib/phpseclib/blob/master/tests/Crypt/Hash/TestCase.php#L12\n. Yah - I guess renaming might be good so that if one key fails to load you can see which one.\nAs for linking to #220...  I'm opposed to that. It's not really clear what the issue in #220 is and I'm not convinced it's not user error. The inspiration for this commit is #220 but I'm not sure this commit fixes that. The guy said he \"I inserted the system keys directly via PHP and not via Copy&Paste\" making me think spaces weren't the issue so it's unclear what - if anything - was. He does say that the commit fixed one of the issues for him but I'm not convinced it wasn't just dumb luck on his part either. Like maybe there keys aren't matching in most of the cases but in this one case they were. idk.\nAnyway, how would you propose \"linking\" to that issue anyway?\nFinally, I'm thinking having the unit test be merged with the commit that improved the handling was a mistake. Unit tests are nice but I don't think fixes should be held up until unit tests are written either. This PR already has a unit test in it so I guess it's too late for this PR (unless I delete the unit test and submit a new PR for just this) but just something to think about in the future I guess..\n. Because $privatekey->setSignatureMode() is called in Net_SSH2::_privatekey_login(). Reason it's called there is because the default signature mode is PSS, which is more secure than PKCS1, but SSH2 uses PKCS1 and not PSS.\n. At this point it's pretty much just an enumeration of keys, irrespective of type. Spitting out 2x \"currently unsupported\" notices for 2x ssh-dss keys in your ssh-agent when the particular server you're connecting to is using an ssh-rsa key in your ssh-agent seems unnecessary.\nIt could be removed but I figure it's a good place holder.\n. I'm not sure what you mean by this. Do you mean I should do @package System_SSH_Agent_Identity instead of System_SSH_Agent?\n. That can be done after the next release I figure. I was wanting to get that out pretty soon.\n. Right now $key is Crypt_RSA but it could be Crypt_DSA, too, when that is implemented, and  I don't know if phpdoc lets you do stuff like @var Crypt_RSA or Crypt_DSA (the docs make me think you can't). And there's not an interface that they're sharing either so we couldn't reference the interface name. And even if we did make them an interface on maybe the php5 only branch...  it's an interface that's only really useful in the context of Net_SSH2. If you're using Crypt_RSA, stand-alone, it's just extra bloat idk.\nI think the most appropriate thing would maybe to make it @var mixed.\n. I noticed that in the orig commit but decided to keep it. The alternative would have a comment that says something like \"if this condition wasn't met the PEAR installer was used to install the package\", which is more wordy and if you're not careful you could miss the \"n't\" and think it was saying the exact opposite of what it really was.\n. Seems kinda pointless to me too tbh. /shrug/ I kept it for historical purposes. That the orig developer left it in place as well doesn't necessarily strike me as an endorsement on their part either.\nIf you want to remove it feel free. idk that, atm, I care enough about it to do it myself. It's not so much of an eye sore to me, atm, that it's an \"omg must remove now\" type thing but neither is it an \"omg must keep\" type thing either lol.\n. Yuck. Didn't realize I did that lol. Thanks for catching that!\n. I wouldn't say it was empty lol. There's no code there but there is a comment that satisfies the whole if / then paradigm. And from a performance perspective idk that it's any worse than a !==.\nI don't know that I would have thought to have done it that way but unless it's violating a coding standard or it's inconsistent with some other established way of doing things (eg. using fsockopen vs. socket_create; a departure I made from the orig ssh-agent PR) idk that I care that much.\n/shrug/ I guess you can change it if you want to idk.\n. Good catch.\n. Full path disclosure concerns. See https://github.com/phpseclib/phpseclib/pull/287#commitcomment-5619150 . Although thinking about it I guess that wouldn't actually be an issue here since SSH is in the System directory.\n. Here's the constructor definition:\nphp\nfunction Net_SSH1($host, $port = 22, $timeout = 10, $cipher = NET_SSH1_CIPHER_3DES)\nThat timeout is used in the fsockopen and in the stream_select of Net/SSH2.php. It is a distinct value from the timeout set in $ssh->setTimeout() because, prior to this change, you couldn't call $ssh->setWhatever() and have it affect things in the constructor. So the constructor had it's own timeout setting.\nFor BC purposes that behavior has been preserved. Although in this particular case I guess I don't have a problem with BC being broken as it seems to me most people aren't using the constructor to set the timeout anyway. In the case of SSH1 there's an extra parameter after the timeout but I don't imagine that parameter is being set in the constructor calls most people are using either.\n. For the first few constants it's supposed to reflect the order in which they're supposed to be set. 1 is a pre-req for 2 which is a pre-req for 4. 4 is a pre-req for 8 and 0x10 (16) although 8 is not a pre-req for 0x10. These are intended for internal use only, hence the @access private so it shouldn't cause anyone any problems anyway.\n. The error I got when I tried to connect to a non-existent host (ie. this error) looked correct to me. I can still change it though..\n. Do those style comments need to be in /* */ style comment blocks? I pushed it with them but I'm curious none-the-less.\n. loadKey() doesn't call setPrivateKey() so it's hard to see how setPrivateKey()'s calling loadKey() would result in an infinite loop. loadKey() conditionally calls setPublicKey(), sure, but setPrivateKey() isn't called anywhere.  And setPublicKey(), although called by loadKey(), doesn't, itself, call setPublicKey().\nI can't comment too much on #317 as I haven't really looked at it yet.\n\nInstead of creating yet another instance of Crypt_RSA where you call loadKey() to check whether the key is valid, you should extract whatever logic loadKey() has to decide whether it is a correct key into a new method and just call that instead.\n\nCertainly that could be done. idk most things can be done any number of ways. The __clone() function could have the logic from the constructor in it and the constructor could conditionally call __clone() itself instead of doing everything itself. Both work and I don't see either as being clearly deficient to the other (and I don't think that the deficiencies that have been alleged are legitimate).\n. kinda, yeah. idk, just seems more concise than \"as a consequence of the above division takes place\". But I can change it too\n. Updated. And no - $source can be either signed or unsigned.\n. That's a good point...  that would be consistent with PHP's clearstatcache.\n. There's not currently a method for doing that although I could do it easily enough. Just do $this->cache = array() or something like that.\n. It's intentional. As is I do more of a soft delete of cached files by doing _update_cache($path, 0). _remove_from_cache($path) is analogous to a hard delete. I guess a comment could proceed it saying something like \"if you wanted to do a hard delete on the cache this is how you'd do it\"\n. > This looks incomplete by the way.\nHow so?\n. That would make more sense if there was an expectation that people might want to change it, as might be the case for logging (the PR of which seems to have stalled meh) but in this case, I'm not sure why you would want to change it. For owncloud you say \"the cache can be easily replaced with an implementation that persists over requests, e.g. xCache\" but I'm not sure persisting a stat cache over multiple requests is a good idea. The statcache, in PHP, causes enough problems as is, without persistence. I understand why it's done but idk..  if there's a valid use case for why you'd want to change it I'd be more willing to consider it.\nAlso, unless there's a compelling reason for why this ought to be done in the php5 branch but not in master, I'd suggest we keep both the same. Moving crypt_random over to a class for the php5 branch is a change with a compelling reason - it works better with auto loaders. But in this case...  I don't see why it'd need to use PHP5 exclusive code and in theory I think anything that could work in master ought to be put in master. And if there's not a good reason for having it in master than it ought not go in the php5 branch either.\n. > Nevertheless, from an architecture view, it is better to have a collection of small, well-defined, reusable, unit-tested classes instead of having huge classes (as is generally the case throughout phpseclib). PHP4 does not have enough OOP features, for example lacks interfaces and does not come with autoloading, which in the end tends to lead people to put everything into a single class or file.\nOne of the mindsets I went into phpseclib development with was to reduce file system clutter. Trying to iteratively trace through code with dozens of files is harder than trying to trace through code with just a few. Although in the case of this feature, I also don't really see it being re-used. SFTP extends SSH2 - not SSH1, and SCP doesn't support stat'ing anyway.\nidk I am more open to the php5 branch departing from the orig design considerations I had in place when initially developing master (and I also don't feel constrained by BC with the php5 version)\n. Yah - gonna try to do that this weekend.\n. Sorta, not really. I mean it's in the same function. I noticed it when going through that function. Using $this->window_size instead of 0x7FFFFFFF lets it be more easily changed.\n. Good catch. Updated.\n. > I'm probably missing the bigger picture. It looks like you want to check whether a given key is valid. Instead of creating yet another instance of Crypt_RSA where you call loadKey() to check whether the key is valid, you should extract whatever logic loadKey() has to decide whether it is a correct key into a new method and just call that instead.\nThe logic to determine whether or not a key is valid is highly embedded with the logic to load a key. loadKey() is essentially a wrapper for _parseKey(). It'll do one of three things - either serve as a copy constructor, loop through the various formats until it finds one that works or it'll pass the parameters directly to _parseKey. _parseKey then returns an array that is mapped to the various object variables.\nAs for _parseKey...  it does its validation in-line as it's loading the keys. Here's an example:\nphp\n                extract(unpack('Nlength', $this->_string_shift($private, 4)));\n                if (strlen($private) < $length) {\n                    return false;\n                }\n                $components['privateExponent'] = new Math_BigInteger($this->_string_shift($private, $length), -256);\nThe two can't really be separated and if you tried you'd pretty much end up with two copies of the same function with ever so subtle differences.\n. It works for me. Although in testing I did find a few other PHP4 issues that have likely been present for some time. Fixes for those have been pushed.\n. If it's not supposed to be the method that immediately precedes it than it seems to me that no method should depend on one that's supposed to fail, as testChDirOnFile is supposed to do?\nIf you want to get right down to it it seems like testSortOrder (the function that that comment immediately precedes) depends on testTruncate(), testTouch() and testPutSizeGetFile(). And potentially to a lesser extent on testChDirScratch() since the directory testSortOrder() needs to be ran in needs to be clean of any other files / directories aside from those that it is expecting.\n. ``` php\n    public function testFileExistsIsFileIsDirFileNonexistent($sftp)\n    {\n        $this->assertFalse(\n            $sftp->file_exists('file4.txt'),\n            'Failed asserting that a nonexistent file does not exist.'\n        );\n    $this->assertFalse(\n        $sftp->is_file('file4.txt'),\n        'Failed asserting that is_file() on nonexistent file returns false.'\n    );\n\n    $this->assertFalse(\n        $sftp->is_dir('file4.txt'),\n        'Failed asserting that is_dir() on nonexistent file returns false.'\n    );\n\n    return $sftp;\n}\n\n/**\n* @depends testFileExistsIsFileIsDirFileNonexistent\n*/\npublic function testSortOrder($sftp)\n\n```\nIn that case it seems like it's linear already? At least for this segment? testFileExistsIsFileIsDirFileNonexistent is the method that immediately precedes testSortOrder, thus linearity is preserved? Before testFileExistsIsFileIsDirFileNonexistent is testFileExistsIsFileIsDirFile and then testChDirOnFile so it's like 3 methods away from testSortOrder.\n. > Might want to support the other way around as well.\nI'm not sure what you mean? $max->random($min)?\n\nI am not sure this change is a good idea.\n\nWhy not?\n\n$min->random($min, $max) or $max->random($min, $max) isn't very verbose.\n\nI like $min->random($max) better myself but that's not the way Math_BigInteger currently works. Right now you have to do $whatever->random($min, $max) and I just don't like that. I don't think it's as intuitive. And if even you think the current method is not very verbose (that doesn't sound like a good thing) than it seems like this is a change you'd be in support of - not in opposition to?\n. Nice catch - thanks!\n. This has been updated. That said because I do do $this->assertFalse($rand1->equals($rand2)); I have to do generate two random numbers anyway. As such I think it makes sense to test two methods in one function. eg. for $rand1 do $min->random($max) and for the other do $max->random($min).\n. It should already do this thanks to this code:\nphp\n        if (!$compare) {\n            return $this->_normalize($min);\n        } else if ($compare < 0) {\n            // if $min is bigger then $max, swap $min and $max\n            $temp = $max;\n            $max = $min;\n            $min = $temp;\n        }\nAnyway I've updated the unit test accordingly. Also, see https://github.com/phpseclib/phpseclib/pull/373#discussion_r13787107\n. Good catch!\n. The diff, in this case, is kinda misleading. Here's that part of Random.php before the https://github.com/terrafrost/phpseclib/commit/2ba1f32ee1490a80bbeec97013348dcdcc1af3e9 commit, with the comments removed:\nphp\n        if (is_string($crypto)) {\n                $i = pack('H*', sha1(microtime()));\n                $r = pack('H*', sha1($i ^ $v));\n                $v = pack('H*', sha1($r ^ $i));\n                $result.= $r;\n            }\n            return substr($result, 0, $length);\n        }\nLink\nHere it is after:\nphp\n        if (is_object($crypto)) {\n            $result = '';\n            while (strlen($result) < $length) {\n                $i = $crypto->encrypt(microtime()); // strlen(microtime()) == 21\n                $r = $crypto->encrypt($i ^ $v); // strlen($v) == 20\n                $v = $crypto->encrypt($r ^ $i); // strlen($r) == 20\n                $result.= $r;\n            }\n            return substr($result, 0, $length);\n        }\nLink\n. 'cause I don't think the Crypt_* objects ought to be required.\nLike with Net/SSH2.php RSA is implemented internally within it for the server signature verification. Crypt/RSA.php isn't used for that and as such if you're not doing RSA key auth than you could, in theory, do away with ~100kb of bloat and just exclude Crypt/RSA.php all together. For RSA key auth that bloat is needed because most of that bloat is for dealing with all the various different key formats (the rest deals with PSS or OAEP padding, neither of which SSH2 uses, but that's trivial compared to the key handling bloat).\nWith RC4.php there's some bloat as well. You don't need pbkdf1 or pbkdf2 that Crypt/Base.php implements. The mcrypt handling portion is largely going to be unnecessary as well.\n. > I would consider this more like SSH where you have to have at least one of the supported ciphers. Otherwise the connection fails.\nI guess I can do that too.\n. Nice catch!\n. I can do that.\n. I think Scrutinzer is wrong. Per the default initializer list $arg2 can be false. If it is $max = $arg1. If it isn't false then $max = $arg2. So either way, $max isn't going to be false.\nI mean I'm not doing any type hinting to guarantee that the non-false $max value could be a string, for example. I could do type checks before I do anything else, but then, I don't do them anywhere else in Math_BigInteger and it hasn't really posed a problem yet.\nLooking at the code this can be removed:\nphp\n        if ($arg1 === false) {\n            return false;\n        }\n$arg1 could still be false if set as such, manually, but really, this is a holdover from when it'd be false, by default, if the parameter wasn't specified. Now it's required since it's not being set to another value by default.\n. $r could be a Math_BigInteger object - you just don't know without further context.\nWith the two parameter example, $min->random($min, $max) could work as could $max->random->random($min, $max) or (new Math_BigInteger())->random($min, $max). The calling object can be one of the ones that is passed into random as an option but it doesn't have to be.\n. Yes, $min and $max need to be BigInteger objects. That's true for pretty much every other BigInteger method as well and I'm not doing any sort of is_object($arg) && strtolower(get_class($arg)) == 'math_biginteger' check for any of them. And it hasn't really been a huge problem either.\nAnd given that it hasn't been a huge problem I am hesitant to add type checking. That's only gonna slow things down when you're looping a million times to find a prime number (for example). And if it was a huge problem the slowdown incurred by checking the type might be justified but like I said, outside of this issue, no one's mentioned it before. It just doesn't seem like it's that big an issue.\n. Oh...  right. Yah - I can fix that. Good catch!\n. Done!\n. It seems to me that either should work. Although they should be consistent.\nBut if . is in the include_path than it seems like AES.php (as opposed to Crypt/AES.php) ought to be includable from Crypt/Random.php\nHere's an example. Say we have three files.\ntest.php:\nphp\n<?php\ninclude('test/a.php');\ntest/a.php:\nphp\n<?php\ninclude('b.php');\ntest/b.php\nphp\n<?php\necho 'hello world!';\nRunning test.php outputs 'hello, world!' in every version of PHP I tried it in (PHP 5.0 - 5.5).\nIf I replace test/a.php with this it works just fine as well:\nphp\n<?php\ninclude('test/b.php');\nBasically, PHP is looking at . relative to the current file and all the files that included the current file. So when it's just include('b.php') PHP is able to include it because it's in . relative to test/a.php. And if it's include('test/b.php') PHP is able to include it because it's in . relative to test.php.\n. Net/SSH2.php has to specify Crypt/AES.php (or whatever) because AES.php isn't in the Net directory. But Crypt/Random.php ought to do either.\nIt's already inconsistent in phpseclib. See this:\nhttps://sourceforge.net/p/phpseclib/discussion/705284/thread/73703016/\nIn particular...\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SFTP.php#L59\n...and...\nhttps://github.com/phpseclib/phpseclib/blob/0.3.6/phpseclib/Crypt/RSA.php#L776\nThat's in the 0.3.6 release. The reason include_once 'SSH2.php' is used instead of include_once 'Net/SSH2.php' is because if you go to http://www.domain.tld/phpseclib/Net/SFTP.php it'll try to include /phpseclib/Net/Net/SFTP.php, which it won't find and then PHP may do a full path disclosure. But if you do include_once 'SFTP.php' it won't be a full path disclosure. To remedy this petrich moved a lot of this stuff over to the constructors:\nhttps://github.com/phpseclib/phpseclib/commit/b242259d17b0f56614a3fa7736b7834d1129c3e6\n. That's not really going to be do'able.\nIt works for getEncryptionAlgorithmsClient2Server() because the default value of $this->encryption_algorithms_client_to_server is false. So if _connect() fails the method returns false (the default value) and if it succeeds it returns the algorithms.\nBut in the case of _login...  if _connect() fails and it continues to run you'll get a bunch of notices / warnings / whatever. ie. \"Not enough input\", \"connection closed prematurely\" or some combination there-of.\nie. with getEncryptionAlgorithmsClient2Server() if _connect() return false you can continue running just fine. with _login if _connect() returns false you want to stop. Well, at least you do if _connect() hasn't previously been called.\n_login() can be called multiple times. eg. multi-factor authentication. _connect() will only return true once. For each subsequent run it'll return false. So that's why the $this->bitmap & NET_SSH2_MASK_CONSTRUCTOR check is done.\n. I have no real opinion on the matter. I guess a new line can be re-added to maintain consistency.\n. if (!$this->_connect()) {\n    return false;\n}\nThat'll break multi factor auth.\neg.\n```\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('www.domain.tld');\n$result = $ssh->login($username, 'pass1') && $ssh->login('username', 'code1');\nif (!$result) {\n    exit('Login failed');\n}\n```\nSo the first login() call fails but because _connect() was called (and presumably returned true) $this->bitmap |= NET_SSH2_MASK_CONSTRUCTOR will have been set. On the second login() call login() will fail once again not because of bad auth but because _connect() will return false (because of $this->bitmap & NET_SSH2_MASK_CONSTRUCTOR).\n. Could you elaborate on your suggestion? php.net suggests method overloading makes use of __call or __callStatic, although the latter would break the 5.2 unit tests as __callStatic was introduced in PHP 5.3. And even if that's what you meant it is unclear to me how you're envisioning those be used.\nNone-the-less, the unit tests work as of the latest commit.\n. It is necessary unless I rewrite it as foreach ($tests as $i=>$test) or for ($i = 0; $i < count($tests); $i++) and do $tests[$i][1] = .... If you'll note in the next line I am setting $test equal to a modified version of itself. If I don't pass by reference and if I don't rewrite the subsequent line as well the unit test will be testing non-truncated hashes..\nAnd if $tests[$i][1] vs. $test[1] is preferable could you elaborate as to why?\n. I agree. I think that is more elegant. I'll close this PR later today and re-issue a new one.\n. You're right. Rewriting it that way makes it more clear that the initial fix was wrong. eg.\n$temp = str_pad($temp, strlen($temp), chr(0), STR_PAD_LEFT);\nThat's obviously not going to be doing any padding.\nThe thing is, $leading_bits and $temp need to be of the same length for the $leading_ones | $temp to work correctly. $this->_base256_lshift($leading_ones, $current_bits); changes the length of $leading_ones. When I was last working on that function I probably saw the $this of $this->_base256_lshift and did $this->toBits() in response thinking that $this was what was being changed instead of $leading_ones, which is actually the one being changed.\n. Good catch. I'm kinda surprised the unit test passed, given that lol\n. Sure...  I can make that change.\n. I think it's easier on the eyes than if (...) {} else if (...) {} else if (...)\n. I need to reinstall phpDoc and verify that that is indeed the correct way of stating that a variable can have two different types. Last time I tried PEAR gave me some errors that I don't recall. I'll try to try again at some point...\n. Sometimes missing the break is intentional too lol.\nidk stuff like this I'd leave up to the discretion of the person submitting the PR. If someone else were to submit this PR with if / else if instead of switch, I'd probably let it in. I just prefer switch in this case myself.\nLike if someone names their variable $tempor $whatever I'm not likely to say anything. \n. > We are using Sami for generation the API docs.\nDon't they both use the same format for comments? Maybe the way they render the comments is different, maybe one is easier to install, maybe one is more extensible, etc, but I was under the impression that what was syntactically correct in one is syntactically correct in the other?\nRegardless, I've changed it..\n. > As far as I know, the foo|far notation is commonly accepted and prefered\nI prefer it too so long as it's valid notation. I was just wanting to test to make sure that it was before committing lol.\n. So what happens if phpseclib (ie. not the server) killed the connection? phpseclib sends NET_SSH2_MSG_CHANNEL_CLOSE, $this->channel_status[$channel] is set to NET_SSH2_MSG_CHANNEL_EOF and then the server response with NET_SSH2_CHANNEL_CLOSE and phpseclib responds with NET_SSH2_CHANNEL_CLOSE, when it already sent one? So phpseclib should be trying to close a channel that's already closed? That just seems like a bad idea. Also, FYI the code I linked to is the only place where $this->channel_status[$channel] is set to NET_SSH2_MSG_CHANNEL_EOF.\nIf you're getting connection errors maybe post the logs. Or maybe give me SSH access and I'll perform the diagnostics.\n. FWIW I didn't write that. If you do git blame that was petrich.\nAnyway, your paraphrased interpretation is mine as well. I probably would have written it differently myself but I didn't feel like I had a difficult time understanding what it was saying either lol idk.\nBTW, are you still wanting me to split this up? I figured I would after I finished up a few more things with it but if you're reviewing it now, as is, is there still a need to do that?\n. > I think this should instead be a method allowForwarding() or something like that. And maybe also allow an option to disable it again?\nI made a similar suggestion:\nhttps://github.com/phpseclib/phpseclib/pull/518#issuecomment-65942075\nThe API I proposed:\n``` php\n<?php\ninclude 'System/SSH/Agent.php';\ninclude 'Net/SSH2.php';\n$agent = new System_SSH_Agent(true);\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', $agent)) {\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\n$agent->startSSHForwarding($ssh);\necho $ssh->exec('ls -la');\n$agent->stopSSHForwarding($ssh);\n```\nMaybe enableSSHForwarding() / disableSSHForwarding() would be better tho. But montdidier does seem to prefer his approach as his revisions continued to make use of it..\n. > Can you explain where the \"request\" in variable names like $request_forwarding comes from? Is this process defined as request forwarding in some technical documentation?\nThe way it looks like it works is... you request agent forwarding and then a new channel is created. If an interactive shell then expects a signature with your private key it sends the data it needs you to sign to you via this new channel and then you reply with the signed data. The SSH server then sends this off.\nOne thing I do wonder tho is how well this works with multiple interactive shell channels. Right now, however, it's a non-issue as you can only have one interactive shell channel with phpseclib, currently.\n. They've been removed.\n. It's in the PEAR coding standards, which phpseclib is based off of:\nhttp://pear.php.net/manual/en/standards.header.php\n. For the php5 branch / 2.0 I'm okay with that.\n. > calling a private/protected method from external scope\nphpseclib already does that. See Net_SCP, for example. It calls Net_SSH2::_get_channel_packet for instance. I'm not really sure what the alternative is? public isn't a good level of visibility because it isn't intended to be public facing. I would not want it showing up in phpDocumentor generated code for instance. But at the same time neither private or protected are that great either since Net_SCP does access those methods.\n. Yah - it's for SSH. SSH2 specifically. I'll update it later today.\n. Oh right - good point.\n. Good idea - thanks!\n. That's correct - it is an unrelated cleanup.\n. I'm not sure what you mean by that? FWIW some of this stuff was in petrich's orig PR. Although this PR is based off of that I can't necessarily give immediate insight into why everything was done the way it is - in some cases I'd have to do research or in some cases it might have been just arbitrary too. So for some of the stuff you mentioned I'll have to look into it before I comment on it.\n. Oh lol. I see the typo now. Good catch!\n. So something like this?:\nphp\n$candidateEngines = array($this->preferredEngine, CRYPT_ENGINE_MCRYPT, CRYPT_ENGINE_INTERNAL);\nforeach ($candidateEngines as $engine) {\n    if ($this->isValidEngine($engine)) {\n        $this->engine = $this->preferredEngine;\n        break;\n    }\n}\nIt's doing one more isValidEngine() check than is needed, although I suppose there's nothing wrong with that. It's not like it's in a part of the code that needs to be high performance.\nAnother possibility, that's a little less readable:\nphp\n$engines = array($this->preferredEngine, CRYPT_ENGINE_MCRYPT);\nfor ($i = 0; $i < count($engines) && !$this->isValidEngine($engines[$i]); $i++);\n$this->engine = $i == count($engines) ? CRYPT_ENGINE_INTERNAL : $engines[$i];\n. phpseclib / php4 / 1.0 already uses non-constant variables. eg. MATH_BIGINTEGER_OPENSSL_ENABLED, MATH_BIGINTEGER_MODE, CRYPT_RSA_MODE, etc.\nFor php5 / 2.0, a static class variable very definitely ought to be used but static variables aren't available in php4 / 1.0 and I don't think a property is a good way to go on this. I mean, if we go with a property on this for php4 / 1.0 we should probably go with properties for all the above instances where constants are already being used in this manner and even if we omitted MATH_BIGINTEGER_* it's still a check that'd now have to be done over and over and over again when instead it could have been done once and just once and that's it.\n. I don't think they are. I mean, PHP4 supports static variables in methods but not in classes. And static variables in methods can't be seen outside of those methods.\nExample: http://3v4l.org/6R7cr#v430\nPHP5+ gives no output. PHP4.x gives a parse error.\n. I think this is a bit mincing words but, in-so-far as new names go...  how about _generateGUID where GUID = globally unique identifier?\nThat's what this function is essentially doing. It creates loop-unrolled dynamic functions that are specific to the key / block size / number rounds, etc, being used.\nRather than use the key as an index to the array, however, a hash of the key was used.\nHere's what it's doing now:\nphp\n$code_hash = md5(str_pad(\"Rijndael, {$this->mode}, {$this->block_size}, \", 32, \"\\0\") . implode(',', $w));\nWhat it does after this PR:\nphp\n        $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";\n        if ($gen_hi_opt_code) {\n            $code_hash = str_pad($code_hash, 32) . $this->_trapdoor($this->key);\n        }\nI'm just asking now because I don't want to go make a commit to change the name to something and for you to then come back and say you think that's not a good name either lol. I'd rather just figure out what a good name is and then make the change.\n. What about _digest_dynamic_function? idk that I like _digest_unrolled_function because that implies that that's the only optimization. It's the only one I mentioned and recalled when I made the last post but it's not the only one. Quoting the header for the function that makes the dynamic functions:\nphp\n     *    The main reason why can speed up things [up to 50%] this way are:\n     *\n     *    - using variables more effective then regular.\n     *      (ie no use of expensive arrays but integers $k_0, $k_1 ...\n     *      or even, for example, the pure $key[] values hardcoded)\n     *\n     *    - avoiding 1000's of function calls of ie _encryptBlock()\n     *      but inlining the crypt operations.\n     *      in the mode of operation for() loop.\n     *\n     *    - full loop unroll the (sometimes key-dependent) rounds\n     *      avoiding this way ++$i counters and runtime-if's etc...\nThe name of that method is _createInlineCryptFunction.\n. I guess that actually could work since the CRYPT_BASE_WHIRLPOOL_AVAILABLE isn't really used outside of that function, however, I'm still lacking enthusiasm about doing a static variable in the method as it's just inconsistent with the way phpseclib does other similar tests (as noted above).\nAnd when phpseclib does do static variables in methods it's not doing them for \nI mean I'll do it if it helps get this merged but I think it is a little inconsistent for the php4 / 1.0 branch.\n. I can do that. Altho we'd need to do $this->engine = false before all of that lest something like this happen.\nFor the initial key / IV length mcrypt is a valid engine, so $this->engine gets set to CRYPT_ENGINE_MCRYPT. Then you change the key length to one for which only the internal engine is valid. $this->engine is never changed to internal because $this->engine is never false (or NULL or 0).\n. Yup - but it's one that can be remedied with PHP_Compat:\nhttps://github.com/pear/PHP_Compat/blob/master/Compat/Function/clone.php\nIn the 2.0 branch I did clone $attr_cell instead of clone($attr_cell) since I think that looks better.\n. Is https://github.com/terrafrost/phpseclib/commit/3cb685337a871577cb20fa482efa077645025b3a what you had in mind?\n. In order to do that the key can't be random, which it currently is. I can hard-code the key tho. I guess I'll do that in another commit shortly.\n. I commented it out because, honestly, trying to figure out what all the ANSI escape codes do is difficult. Some of them I just do break and that's it because they don't apply (eg. show the cursor position, etc) but others...  I'm not sure what they do. I don't want to add a case statement for them that I break since I don't know what they do but neither do they seem necessary to create the desired visual effects.\nI didn't delete the line because it could still be useful for diagnostic purposes.\n. See above.\n. It's useful for diagnostic purposes. If I want to see what ANSI escape codes are being utilized I can either try to figure that out by hand or I can utilize the built in ANSI parsing routines in this class and have it spit them out to me, interleaved with the non-ANSI escape codes.\nIt's not documented anywhere and doesn't have a public API method for it. Pretty much it's not a feature that's of much benefit unless you're intending on developing this file. I suppose I could remove it along with the user_error's and put them in some sort of private notes of mine but that would make my life harder cause I'd have to consult those notes to copy / paste the code (it's easier to remember that I have $this->tokenization in the file than it is for me to remember that whole line) and it's not like removing that line would yield significant performance gains or anything.\nSo, basically, it's not hurting anyone and it's helping me. And the fact that it isn't documented means that it's not an officially supported feature and that semantic versioning can be maintained without doing a new \"major\" release if if this \"feature\" is removed or changed.\n. Maybe but I don't believe any other unit test uses that method currently. If one has need for it it can be moved out then?\n. It does for me on Travis CI:\nhttps://travis-ci.org/terrafrost/phpseclib/builds/69507514\n. Good catch. It seems to be adding in an extra space. This can be seen more clearly in the full code snippet (the break is indented correctly but the $this-> = 16; is not)\nphp\n        switch ($hash) {\n            case 'md2':\n                 $this->b = 16;\n                 $this->hash = array($this, '_md2');\n                break;\n. Done. The following code better demonstrates what the comments try to explain:\n``` php\n<?php\ninclude('Math/BigInteger.php');\n$a = new Math_BigInteger(str_repeat(\"\\xFF\", 20) & (\"\\x7F\" . str_repeat(\"\\xFF\", 19)), 256);\n$b = $a->toBytes(true);\necho bin2hex($b) . \"\\r\\n\";\necho strlen($a->toBytes(true)) . \"\\r\\n\";\n```\n. > We can try targeting 1.0 for this PR - hopefully it will be no conflicts.\nWell, for 1.0, you'd need to remove the dirname(__FILE__) replacements. What it was replaced with - __DIR__ - only works on PHP 5.3 and later. The 1.0 branch is supposed to be compatible with PHP 4.x (assuming the use of PHP_Compat).\nI'd say target some select things for the 1.0 branch and those things that can't be utilized in the 1.0 branch submit a separate PR for after the changes for the 1.0 branch have been merged.\n. I think that's fine.\n. From the line he added in _parse_path...\nphp\nif (preg_match('/^{[a-z0-9]+}$/i', $host)) {\nIf he doesn't do the curly brackets than localhost would match the regex and it'd try to re-use a non-existant SSH2::$connections['localhost'] connection.\nHere's how you'd do it with libssh2:\n``` php\n<?php\n$ssh2 = ssh2_connect('domain.tld');\nssh2_auth_password($ssh2, 'user', 'pass');\n$sftp = ssh2_sftp($ssh2);\n$arr = scandir(\"ssh2.sftp://$sftp/home/user/public_html\");\nprint_r($arr);\n```\nIf you do echo \"ssh2.sftp://$sftp/home/user/public_html\" you get ssh2.sftp://Resource id #4/home/user/public_html.\nidk I think {} works..\n. > I am not sure this is useful API. Why not return null or false?\n\nThe current behaviour can be easily kept by calling\n$x509->getOID($name) ?: $name\n\nBecause switch ($x509->getOID($name)) looks better than switch ($x509->getOID($name) ?: $name)? I figure most people using $x509->getOID($name) will be using it in switch / if  statements, trying to make their switch / if statements future proof and with that as a use case most people are going to have to do $x509->getOID($name) ?: $name anyway. And if most people are going to have to do that outside of the function then why not do that inside of the function instead?\nIt's also not clear to me what mapOID would do? I guess that'd do something like...  getOID('2.16.840.1.101.3.4.2.1') == 'id-sha256'? If so I can add that.\nSo I guess lmk about mapOID. I'll give you a chance to further convince me about getOID. In the mean time I'll do the other changes.\nThanks!\n. Well what's returned by loadX509() is an associative array with either a name or OID. eg. $cert['tbsCertificate']['extensions'][0]['extnId'] may return 2.16.840.1.101.3.4.2.1 in one version but in another version it'd return id-sha256 if support for that OID is added to phpseclib.\nThis is true for loadCSR(), loadCRL(), etc, as well. Pretty much any of the load*() methods.\n. Good catch lol\n. > If you work on IDs, you don't have to translate to names. If you work on names, you don't handle IDs anyway, so returning an ID is pointless.\nI don't agree. Presumably you should always want to work on names over IDs as they're more human readable. But sometime's a name just isn't going to be available and in that case you don't have a choice - you have to work with an ID. But, with the way phpseclib currently works, although $cert['tbsCertificate']['extensions'][0]['extnId'] may be an ID in v1.0.0 it might not be an ID in v1.0.1 - it might be a name.\nPer your proposal I'd rename getOID, as implemented in this PR, to mapOID and then implement getOID such that it returns null if the string that's passed to it doesn't exist as  a name?\nPersonally, I'm thinking getOID is a better function name for the function as implemented in this PR. getOID doesn't imply that a mapping exists whereas mapOID does...\n. > Explain why the returned string contains { } here.\n(I think bantu is wanting you to add a comment in the code explaining {} - not to explain it on github because that's already been done lol)\n. > Why not \\UnexpectedValueException ?\nI didn't think of it lol.\nphpseclib has no way of knowing if \"zzz\" is a valid but unsupported algorithm or not so I was just kinda giving the input the benefit of the doubt.\n. Correct. Half the point is to hide it from phpdoc builds. See https://github.com/phpseclib/phpseclib/pull/813#commitcomment-13197976 .\n. It's a holdover from #815. Initially an RSA instance was being used to return a string but I made it return objects instead and I guess I forgot to remove this bit of the code.\n. I'm not sure what you mean. Do you mean having testEncryptDecrypt use a dataprovider that generates the keys?\n. I can do that...\nAlthough tbh I think the code ought to be updated such that the \"second hunk\" isn't even possible. Quoting from the code comments:\nphp\n     * $start and $local_start give you more fine grained control over this process and take precident over self::RESUME\n     * when they're non-negative. ie. $start could let you write at the end of a file (like self::RESUME) or in the middle\n     * of one. $local_start could let you start your reading from the end of a file (like self::RESUME_START) or in the\n     * middle of one.\n     *\n     * Setting $local_start to > 0 or $mode | self::RESUME_START doesn't do anything unless $mode | self::SOURCE_LOCAL_FILE.\nBased on that it doesn't seem like it should be doing fseek($fp, $offset), since $offset is based on $start. ie. I think they ought to be completely disjoint.\nHere's the commit that added it:\nhttps://github.com/phpseclib/phpseclib/commit/cbe156f0cbc7e715731b841482a1b1625df31250\nTruth by told, I don't really like how the put function has so many different parameters and it's something I'd like to change, as elaborated upon here:\nhttps://github.com/phpseclib/phpseclib/pull/655#issuecomment-92600348\n. The second hunk is already there and no one has created a bug report for it. It's possible people like the current behavior even tho it, imho, doesn't mesh with the documentation. It could be changed but idk...  atm it's not a priority of mine.\nSo, basically, #830 (or rather, it's replacements, #833 and #834) is acceptable, imho, for the time being. The behavior I commented on can be changed in a later PR.\n. SFTP.php is still doing the fseek() so the possibility of hanging is still there. Or at least was - the latest commit removes that. If I'm going to have a unit test for that portion of SFTP.php then that portion of SFTP.php ought to be behaving as per the documentation.\n. I assume @see Base::setKeyLength() is better than @see Crypt_Base::setKeyLength()? I say that based on your comment at https://github.com/phpseclib/phpseclib/pull/827#discussion_r40877854\nAnd should I do @see Base::setKeyLength() or @see \\phpseclib\\Crypt\\Base::setKeyLength()? phpseclib does both throughout it's codebase. We ought to be using one consistent standard.\nAlthough that said, making this consistent across the entire codebase is a bit beyond the scope of this PR. I'd say changes along those lines ought to go in a new PR.\n. Should this be @see Rijndael::setKeyLength() or @see \\phpseclib\\Crypt\\Rijndael::setKeyLength() since this comment isn't actually in Rijndael.php but rather TripleDES.php?\nBy that same token if, in TripleDES.php, there were a @see Base::funcName() should that be explicitly namespace'd out even if @see Tripledes::funcName() wouldn't be since Base is technically a different class? Or for phpdoc purposes does it not matter?\n. static, to me, implies that the method needs to be called statically, which is not the case here.\nI could do self but the 1.0 branch is supposed to be compatible with 4.x (with PHP_Compat). Of course I guess making changes to phpDoc comments doesn't really change the versioning requirements so I guess I can do it.\nI guess phpDoc just kinda translates self to Crypt_Base (assuming that self occurs in Crypt_Base) when it's building the documentation? Or else it could use that as an identifier to have it link to the same page but with a different \"fragment\" (ie. the part after the #)?\n. No - it's needed. The following demonstrates why:\n``` php\n<?php\ninclude('Math/BigInteger.php');\n$a = new Math_BigInteger(5);\n$b = $a;\n$b->setPrecision(4);\necho $a->precision;\n```\nThat'll output 4 when it the desired behavior might be for it to output -1. ie. even tho you did setPrecision() on $b $a was effected as well. To work around this you can do $b = clone $a. Do that and the output will be -1.\nclone may do a shallow copy but it none-the-less does a copy of the primitives. PHP4 cloned every time you assigned an object to a new variable - PHP5 doesn't. So to make code that worked on both the copy() method was added since __clone() couldn't be called directly on PHP5. But that all changed when phpseclib introduced namespacing. That upped the version requirement to 5.3 and eliminated the need for a copy() method to emulate __clone().\nhttp://www.php.net/manual/en/migration5.oop.php elaborates:\n\nIn previous versions of PHP, objects were handled like primitive types (for instance integers and strings). The drawback of this method was that semantically the whole object was copied when a variable was assigned, or passed as a parameter to a method. In the new approach, objects are referenced by handle, and not by value (one can think of a handle as an object's identifier).\n\nAltho that said, that example does make me think a getPrecision method is needed lol\n. For all practical purposes _emsa_pkcs1_v1_5_encode() can't return false. http://php.net/manual/en/function.hash.php doesn't return false in the master branch (where Hash.php was rewritten to be a wrapper for PHP's builtin hash extension) and even when phpseclib had it's own implementations of select hash algorithms none of them appear to return false either:\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Crypt/Hash.php\nHere's what the RFC says:\n``` php\n   1. Apply the hash function to the message M to produce a hash value\n      H:\n     H = Hash(M).\n\n  If the hash function outputs \"message too long,\" output \"message\n  too long\" and stop.\n\n```\nAccording to https://en.wikipedia.org/wiki/Template:Comparison_of_SHA_functions you'd have to have a message 2048 petabytes long for that error to be output and if you're dealing with data of that length PHP is probably not the right language for you lol.\nIn light of this I've just removed the whole return false thing.\n. I'm just not a big fan of recursion depth limits.\nLike what if I arbitrarily had a recursion depth limit 5 for File/ASN1.php? Some things go deeper than that so what am I to do in that situation? At that point File/X509.php might not even be able to parse the output and even if it could stuff might be missing and people would wonder why.\nHaving to set an arbitrary recursion depth limit is just asking for problems imho. It's just a non-intuitive setting that no one is ever going to think of to set. And even if they did they wouldn't know what'd be an appropriate value to set it to. It'd just be a method you'd need to call with a random parameter and it'd just be one extra step that people could mess up on.\nI suppose in this particular case it's not as important. It reduces the initial entropy but they'll still be entropy.\nIt looks like the issue on older verions of PHP is the ===:\n``` php\n<?php\n$a = array();\n$a[] = &$a;\necho $a === $a[0] ? 'match'  : 'no match';\n```\nThat causes the error.\nOne thing that does seem to work...  debug_zval_dump. According to http://php.net/debug-zval-dump it's been available as early as PHP 4.2.\nIt works with recursive stuff:\n``` php\n<?php\n$a = array();\n$a[] = &$a;\ndebug_zval_dump($a);\n```\nIt also works with private __sleep()'s:\n``` php\n<?php\nclass test {\n  var $var = 'zz';\nprivate function __sleep() {\n    return array('var');\n  }\n}\n$a = new test();\ndebug_zval_dump($a);\n```\nThe one disadvantage to it is that it does dump to stdout. Output buffering (eg. ob_start() / ob_flush()) would need to be used to capture the output to a string. And that poses problems for people who might already be utilizing output buffering.\nAnother possibility that occured to me...\n``` php\n<?php\n$a = array();\n$a[] = &$a;\n$a = (object) $a;\n```\nvar_dump seems to suggest that that works but $a->0 isn't a valid variable name. I can't even hit it with reflection (not that that'd work on PHP 4):\n``` php\n<?php\n$a = array();\n$a[] = &$a;\n$a = (object) $a;\n$reflectionClass = new ReflectionObject($a);\necho $a === $reflectionClass->getProperty('0')->getValue() ? 'matches' : 'does not match';\n```\nSo I guess the recursion depth is the best approach meh. And if we go that route the next question would, I guess, be this: what would be a good recursion depth? If we did 1 that'd make for much simpler serialization. eg.\nphp\n    function phpseclib_safe_serialize($arr)\n    {\n        if (is_object($arr)) {\n            return '';\n        }\n        if (!is_array($arr)) {\n            return serialize($arr);\n        }\n        foreach (array_keys($arr) as $key) {\n            if (is_object($arr[$key]) || is_array($arr[$key])) {\n                unset($arr[$key]);\n            }\n        }\n        return serialize($safearr);\n    }\nI suppose one thing we can do is a if (version_compare(PHP_VERSION, '...') > 0) check that does the reference check (===) on sufficiently new versions of PHP and uses a recursion depth of 1 for older versions of PHP.\n. Crypt/Random.php does session_start() before trying to call $_SESSION.  Normally that'd create $_SESSION but not on http://sandbox.onlinephpfunctions.com/ and that's because of the php.ini thing you mentioned. eg.\nphp\n<?php\nsession_start();\nserialize($_SESSION);\nThat yields a Warning: session_start() has been disabled for security reasons error:\nhttp://sandbox.onlinephpfunctions.com/code/15254dd8e75ef36649a2afae66470662d8782c64\nSo they probably have that function mentioned in disable_functions:\nhttp://php.net/manual/en/ini.core.php#ini.disable-functions\nI guess we could still do isset() but idk...  issues arising from disabled functions are not issues that we should be overly concerned with imho. You disable functions at your own peril.\n. ``` php\n$GLOBALS['a'] = &$GLOBALS;\nphpseclib_safe_serialize($GLOBALS, 'GLOBALS');\n```\nThat causes the same \"Fatal error: Allowed memory size\" error. I mean, on one hand, people ought not be doing that, but then again, people ought not be making __sleep private either.\nIn light of this, what about this?:\nhttps://github.com/terrafrost/phpseclib/commit/086bd845fe236213bb9f6860dd6c2c879974fb77\n. Found another one that fails with both your updated version and with mine:\nphp\n$z = [];\n$z[] = [&$z];\nThat causes a \"Nesting level too deep - recursive dependency?\" Fatal error even on PHP 5.5 when you do ===. eg. $z === $z[0].\nHere's another version:\nhttps://github.com/terrafrost/phpseclib/commit/102d53bd275f5c08e7042eaac5fb74f73eded62a\nIt's based on http://stackoverflow.com/a/9293146/569976\n. I think the key part of your commit was the !isset($arr[$key]['__phpseclib_marker']). I don't think removing the $unset stuff was necessary and, thinking about it, I don't think $key !== '__phpseclib_marker' && is necessary either.\nAnyway, I've merged your PR into mine and then made the following additional commit:\nhttps://github.com/terrafrost/phpseclib/commit/27f659f3d9d76754892e7a2dee0562187331e6d1\n. Good point. I've updated the code and rebased the branch:\nhttps://github.com/terrafrost/phpseclib/tree/random-serialize-3\n. Actually, I found an issue with the last commit. I made another to fix it:\nhttps://github.com/terrafrost/phpseclib/commit/d1ef2210af4c0452d2013fb3aae6c62389b944e8\nBasically, if $arr[$key] isn't an array the isset($arr[$key]['__phpseclib_marker']) call will fail.\n. I merged your changes into 1.0 / 2.0 / master:\nhttps://github.com/phpseclib/phpseclib/commits/master\nThanks!\n. I didn't think of it lol. But yah - they should be added. I'll do that.\nThanks!\n. The unit tests have been added.\n. > There are more test cases for HMAC-SHA-256 and HMAC-SHA-512 (namely four each) than what has been added here\nYah - I know. I just don't know that I care that much lol. I think adding a subset is probably sufficient. I mean, I can add the other two, as well, but idk...\n. This should never have been made a constant in the first place - rather, it should have been NET_SFTP_LOGGING_REALTIME_FILE. The reason being so that you can define the name yourself.\nBut overall I don't like the whole logging system anyway and at some point in the master branch I intend to redo the whole thing.\n. It's called. eg.\nhttps://github.com/terrafrost/phpseclib/blob/a25c8411087b1bf3531c0aab919470252b41147a/phpseclib/Crypt/Common/SymmetricKey.php#L878. RSA.php has been significantly redesigned for the master branch. At this point, probably any change I make to RSA.php in the 1.0 / 2.0 branches will result in a merge conflict in the master branch. That is how significant the changes to RSA.php are.\nSSH2.php is due to get some significant changes too but it has not had them. Right now, SSH2.php, as it currently exists in master, is pretty much 2.0's SSH2.php, which, in turn, is pretty much 1.0's SSH2.php, just namespaced. ie. a change made 1.0 will probably /not/ result in a merge conflict in the master branch's SSH2.php.\nAnd this visibility changing stuff is used primarily by SSH2.php.\nThere are several alternatives I could be doing.\n\nI could change the visibility only after every /big/ change I have planned has been made.\nI could change the visibility to the files as big changes are being made to them. If I did that then RSA.php would have the visibility set but SSH2.php would not.\nI could just delete the Objects class, retain the visibility changes, let the unit tests fail and just not care because the master branch isn't production ready anyway.\n\nThe option I've somewhat arbitrarily chosen is to update the visibility all at once and use hackish approach to get the unit tests working for the time being until I have had a chance to more comprehensively revamp those files.. But that said, it is not immediately obvious to me how to best deal with the problem. Maybe when I'm neck deep in SSH2.php I'll come up with a better idea but right now I'm almost finished with my DSA implementation. I want to do some more BigInteger changes and then do ECDSA and EdDSA. And then more ASN1.php changes and then X509.php changes, etc.\nBut as for why it's not immediately obvious to me...\nSCP.php calls get_channel_packet in SSH2.php. That is NOT  a method people should normally be calling. That's why get_channel_packet is declared private. BUT SCP.php is not a regular file.\nSystem/SSH/Agent.php calls get_channel_packet as well. ie. SSH2.php isn't setting SSH forwarding up - System/SSH/Agent.php is.\nNow, maybe all of this will be changed when I get around to making the big changes for SSH2.php but until then...  these are functions that /regular/ applications ought not be calling but that some other classes within phpseclib /do/ have a current need to call. In C++ this is where you'd use friend but PHP doesn't have anything similar to that.\nSo what would you recommend in that scenario?. I've updated the phpdoc lines. Is @access ... needed when visibility is declared in the function declaration? I figure the phpdoc blocks are in pretty bad state and at some later date I figure I'll make a PR dedicated to fixing them.. When I view the diff on github.com changes to that file are collapsed by default:\n\nCould be why you're not seeing it?. Yah...  that line was added before I created the Objects file and I didn't care enough to change it after. Still not sure I do since there's every possibility it (and the Objects file) ll be removed before 3.0 is finalized lol. Interesting. It looks like this is only an issue in the master branch.\nWhen I get around to revamping the API for SSH I will probably be deleting SSH1.php FWIW but, in the interim, I'm ok with having the issue fixed. Nice find!. This is an issue in the 2.0 branch as well and ought to be fixed there as well.. This is an issue in the 2.0 branch as well and ought to be fixed there as well.. There is no need for this change. Before the change we have this:\nphp\n        switch (strlen($key)) {\n            case 16:\n                $key.= substr($key, 0, 8);\n            case 24:\n                break;\nAfter the change we have this:\nphp\n        switch (strlen($key)) {\n            case 16:\n                $key.= substr($key, 0, 8);\n                break;\n            case 24:\n                break;\nThey do the same thing. When strlen($key) == 16 $key will be modified and then fallthrough to the break for strlen($key) == 24 case.\nhttps://blog.mariusschulz.com/2015/06/25/the-curious-case-of-switch-statements-in-javascript elaborates. I suppose, as that article suggests, putting // fallthrough in comments might not be a bad idea but, in this case, doing break; would almost be preferable to that because, despite being redundant, it takes up less bytes. I suppose being concerned about bytes on modern computers is a bit silly tho idk lol. Nice catch! I'll have to add a unit test for this. Looks like a unit test will need to be written for this too. This is only called with a third parameter by getRevokedCertificateExtension.\ngetExtensions (plural vs singular) probably ought to be updated similarly, as well, and then getRevokedCertificateExtensions updated to call getExtensions instead of getExtensionsHelper.. What's the motivation behind this change?. You made a similar change in https://github.com/phpseclib/phpseclib/commit/f314f9795f2a5c43fc680cd6fee2beaf3e192239#r131527744 . I don't understand the motivation for that change nor do I understand it for this change.. Also, spaces ought to be added before and after the = in the $path=null bit. PSR-1/2 do appear to discuss this but in areas where those standards do not provide clarity I'd say, as a general rule of thumb, the PEAR standards apply. Quoting https://pear.php.net/manual/en/standards.funcalls.php ,\n\nAs displayed above, there should be one space on either side of an equals sign used to assign the return value of a function to a variable.\n\nidk how well the phpseclib codebase actually conforms to these standards but, anyway, I can take care of this when I merge.. Here's how net\\SSH2.php currently defines this:\nphp\n        $this->channel_extended_data_type_codes = [\n            1 => 'NET_SSH2_EXTENDED_DATA_STDERR'\n        ];. These should probably be defined in phpseclib/Net/SSH2_MSG.php instead of SSH2_DISCONNECT.php.\nAlso, I would say /these/ constants should be prefixed with SSH_ since they are in the SSH specs:\nhttps://tools.ietf.org/html/rfc4254#section-9\nNot all constants should be prefixed with SSH_. For example, the Terminal Codes shouldn't be since they're not in the SSH2 specs:\nhttps://tools.ietf.org/html/rfc4254#section-8\nBut these I think should be.. Related to this....  I'm tentatively thinking that probably the disconnect reasons ought to be prefixed with SSH_DISCONNECT_ since that's how the RFC does it:\nhttps://tools.ietf.org/html/rfc4253#page-26. The class name (and constants defined therein) should probably be SSH2_CHANNEL_OPEN_FAILURE_REASONS lol.\nIt also looks like phpseclib only defines one of four possible reasons defined in https://tools.ietf.org/html/rfc4254#page-6. I like static::class more than get_called_class() personally :). I think this would be a cleaner way to write that:\nphp\n$messageText = SSH2_MSG::valueExists(ord($payload[0])) ?\n    SSH2_MSG::name(ord($payload[0])) : \n    'UNKNOWN (' . ord($payload[0]) . ')';. I think that should be $path = null. As is not all the calls to getExtension have a third parameter:\nphp\n$issuerAltName = $this->getExtension('id-ce-subjectAltName', $issuer->currentCert);\nAlso, that's how it's defined with getExtensionHelper:\nphp\n    private function getExtensionHelper($id, $cert = null, $path = null). Never mind this - it looks like you fixed this specific issue with https://github.com/phpseclib/phpseclib/pull/1157/commits/eb21fb2bcb781a25c718cdf19f24bc59ea83ae2d. Engines/PHP/Base extends Engines/PHP so visibility shouldn't be an issue. Indeed, if visibility were an issue then one would think that changing the visibility from protected to private wouldn't break any unit tests but it does:\nhttps://travis-ci.org/terrafrost/phpseclib/jobs/261813738. The master branch (which this PR targets) only works on PHP 5.6+. Most significantly, every file in File/ASN1/Maps sets a class constant to an array, which wasn't possible until 5.6:\nhttp://php.net/manual/en/migration56.new-features.php\nA lot of the files also use constant expressions. The end result being that all of this greatly facilitates re-use.. The #@+'s are unnecessary. Their main purpose is to tell phpdoc or whatever to propagate the values down until it encounters a #@=.. I've been on the fence with this. My initial searches led me to conclude that this was a one off mode (and not even a very good one at that) used for only one app:\nhttps://www.mgp25.com/AESIGE/\nhttp://www.cryptofails.com/post/70546720222/telegrams-cryptanalysis-contest\nKeeping that in mind, I don't really want to add every homegrown block cipher algorithm under the sun.\nIf Joe Schmoe made his own shitty symmetric key algorithm that no one other than he used should I include that in phpseclib as well if he did a PR? No. There has to be some sort of bar for inclusion.\nThat said, I did a Google search just now.  I guess OpenSSL supports this mode:\nhttps://lists.gnupg.org/pipermail/gcrypt-devel/2015-September/003572.html\nhttps://stackoverflow.com/questions/18171973/aes-aes-ige-128-aes-ige-192-aes-ige-256-encryption-decryption-with-openssl-c\nSo I guess that fact merits reconsideration of this PR.. This method should have DocBlock comment. Nit picky but there should be a space in the middle of ){. For otherwise good PR's I'd fix issues like this myself but this PR has other issues that need resolution so while you're in there fixing those other issues might as well fix this issue as well!. phpseclib uses PKCS7 padding, when padding is enabled. What that means is that when you have a string whose length is a multiple of the block length you add chr(x) to the end of that string x times, where x is the block length. More info:\nhttps://tools.ietf.org/html/rfc5652#section-6.3\nhttps://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7\nThis commit breaks padding when the block size and the pad amount are the same.\nThis impacts, among other things, encrypted PKCS8 keys.. So what if you have padding enabled and are using a custom padding string and want to decrypt some text? phpseclib will try to unpad using the PKCS7 technique and it'll very possibly fail depending on what the custom padding string is.\nIf you want to employ custom padding I'd suggest doing it outside of the the SymmetricCipher instance. SSH2.php does this. It has the packet length, the padding length, the data and then random padded data. ie. it doesn't have the SymmetricCipher instance do the padding - it does it itself. Because the padding requires a plaintext that is formatted in a certain way - a format that isn't shared by other protocols or formats or whatever.. I'm fine with .idea being removed (I recognize that directory as being one PHP Storm creates) but I'll probably do another commit after I merge this one removing .gitignore. For ignoring .gitignore you could do this:\nhttps://stackoverflow.com/questions/767147/ignore-the-gitignore-file-itself/767213#767213. I think this is a bad change. Right now there are 206 skipped unit tests:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/281628707\nAfter this commit there will be 308 tests:\nhttps://travis-ci.org/phpseclib/phpseclib/jobs/274496080\nIn https://github.com/phpseclib/phpseclib/commit/9d8f014748e4787c4f54a1bb8070cc4c8bb44497#comments I updated phpseclib to take strings instead of ints. This change was inspired by another PR you made - #1164. With this change you're changing what's passed to isValidEngine back from strings to ints.. Never mind - I see that you undid this with https://github.com/phpseclib/phpseclib/pull/1180/commits/c6020a4c42bccd9510c3690de25471971add317b lol. Sorry!. I think this is best added as a second parameter to the DateTime constructor. The DateTime constructor does accept two parameters, the second of which is DateTimeZone:\nhttp://php.net/manual/en/datetime.construct.php\nAlso, without it being in the constructor, $date = new DateTime('now'); returns a fatal error when the timezone hasn't been set in php.ini due to an exception not being caught.\nIt doesn't really serve the same point if set in $date->setTimezone.\nAnyway, nice job on finding the issue! Altho I think I'll take a different route for fixing the issue, you found it - thanks!. I agree with bantu's comment on the code duplication. Seems like you could just call a new method - handleIGEEncrypt:\nphp\nfunction handleIGEEncrypt($plaintext) {\n    $ciphertext = '';\n    $iv_part_1 = substr($this->encryptIV, 0, $this->block_size);\n    $iv_part_2 = substr($this->encryptIV, $this->block_size);\n    for ($i = 0; $i < strlen($plaintext); $i+= $this->block_size) {\n        $indata = substr($plaintext, $i, $this->block_size);\n        switch ($this->engine) {\n            self::ENGINE_OPENSSL:\n                $outdata = openssl_encrypt($indata ^ $iv_part_1, $this->cipher_name_openssl, $this->key, OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING) ^ $iv_part_2;\n                break;\n            self::ENGINE_MCRYPT:\n                $outdata = @mcrypt_generic($this->enmcrypt, $indata ^ $iv_part_1) ^ $iv_part_2;\n                break;\n            self::ENGINE_INTERNAL:\n                $outdata = $this->encryptBlock($indata ^ $iv_part_1) ^ $iv_part_2;\n        }\n        $iv_part_1 = $outdata;\n        $iv_part_2 = $indata;\n        $ciphertext.= $outdata;\n    }\n    if ($this->continuousBuffer) {\n        $this->encryptIV = $iv_part_1 . $iv_part_2;\n    }\n    return $ciphertext;\n}\nI mean, I suppose it's somewhat hypocritical for me to criticize it here when phpseclib does it with CFB mode, but...  I just pushed a commit, in a branch, aimed at reducing some of the duplication for CFB mode:\nhttps://github.com/terrafrost/phpseclib/tree/cfb-optimization\nOf course, in this case, I suppose the old addage applies: \"if it ain't broke don't fix it\". We'll see where that branch goes.. I suppose it doesn't matter as much in a unit test but, technically, this is a violation of the PSR-2 coding standards. That should read more like this:\nphp\nif ($mode === BlockCipher::MODE_IGE) {\n    $iv.= strrev($iv);\n}. $primes is defined in PHP32.php and PHP64.php. PHP.php is abstract so it can't be instantiated anyway.\nThe reason I defined $primes in PHP32.php and PHP64.php was so that you wouldn't run into problems if you tried to instantiate both of them.. Never mind - I see you undid that in a newer commit - that you changed, later, self::$primes to static::$primes. I'd say that'd be a good PR on it's own. Maybe try adding a unit test too.. Quoting PSR-2: Coding Style Guide, \"code MUST use 4 spaces for indenting, not tabs\". This piece of code is using 8 spaces for indenting - not 4.. Why was this removed?. Should be @return (singular). What if the signed cert has an authority key identifier, a subject key identifier and no authority cert serial number but the candidate CA cert doesn't have a subject key identifier? I can write a test to be sure but it looks like the old code would have continued looping whereas it looks like this could would think such a cert was the CA cert when it probably ought not be.. What if $authorityKey isn't an array (ie. it isn't set)? It'll then do the isset($authorityKey['authorityCertSerialNumber']), trying to access the index of a null. It seems like this could produce a PHP error (E_NOTICE) but it actually doesn't appear to do so: https://3v4l.org/UFH9D \n```php\n<?php\nerror_reporting(E_ALL);\n$a = null;\necho isset($a['test']) ? 'yes' : 'no';\n``\nBe that as it may I still don't think it ought to basically be doingisset(null['key'])`.. > so if ca.subject and cert.issuer are the same we just have to perform additional checks on fields like serial if are set.\nThat's what I'm saying. Your code isn't doing that. And lines 1135 and 1136 aren't doing the additional checks you speak of.\nHere's an example.\nThe signing cert:\n-----BEGIN CERTIFICATE-----\nMIIB4zCCAUygAwIBAgIUSyCTib61O8k8TM5JA5n3zDYDFs8wDQYJKoZIhvcNAQEF\nBQAwHDEaMBgGA1UECgwRcGhwc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEwMTYxMDIw\nWhgPOTk5OTEyMzEyMzU5NTlaMBwxGjAYBgNVBAoMEXBocHNlY2xpYiBkZW1vIENB\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn5XdGJUd9PY9zpksbJ2kD57PL\nnQ3ISK+qbeSe2H+Uj0AEDnm611tvXlr9a7zBPNwZ2ali9bczirQkxtu/sftSHCGv\nLL6sz1vdYP0Un792o5h+PkbQLnDe1lf/W8Q87GY9cRxUQVVfA7QUfgsl4iWgi7tv\nqz3dRmxzBpjpgWvp/QIDAQABoyAwHjALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw\nAwEB/zANBgkqhkiG9w0BAQUFAAOBgQBQJpF/uakVjNIOz4Ve+duZYeeghpVxVNVK\nt4OFi8DQzAsdFBpDDg/ZdAoXYOI/VHwNR+jKS2bPLmvNR2dP+OuZVdSTYu4/dZtI\nTp9ju17bym9oyWjX8CApa32+4N4WtcYLaVHOgyGA9f1VRHBtLTc8xcuHnJg6v3m9\nTYVkR8c3IQ==\n-----END CERTIFICATE-----\nThe signed cert:\n-----BEGIN CERTIFICATE-----\nMIIB5TCCAU6gAwIBAgIUVCrbYZRButS1ka5fyUe2iOzFAmwwDQYJKoZIhvcNAQEF\nBQAwHDEaMBgGA1UECgwRcGhwc2VjbGliIGRlbW8gQ0EwIBcNMTcxMjEwMTYxMDIw\nWhgPOTk5OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1vIGNl\ncnQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANkmWIAsKkL1Bv3PiFA65IRQ\nEOSc65rui70M5tvrDpka1jl6QgvGY/jI/6D6h8sZBxyYyncgWaCA4dVv9dmdZm8Z\nJPXACUfHTJuk7ApPq2oYjyheyQkSLp8kYP47cidbNfWk3RkTRqwleh3ByG4e1Qxh\nsfdf5owA1yuW5JSygppvAgMBAAGjIDAeMA4GA1UdIwQHMAWAA3p6ejAMBgNVHQ4E\nBQQDenp6MA0GCSqGSIb3DQEBBQUAA4GBACMLNye3bEzTnHJAroAiV8Rw9rL6QG+x\nwrFDBq173MXTAnKar/TujUxfmOzNZCxjPHh6oKRosOWZuI5v8/0wG9I6irYwLXOw\nkXMvXT91/m5Vk7rLCqQ+zsFncxg12leHRgglWh1wsJOhPI/B0mYgCA04RNHsm+iC\n/XjRBlAt1kMb\n-----END CERTIFICATE-----\nphpseclib doesn't recognize this cert as being valid (and I'm not sure it ought to) but in your changes it is recognized as valid. The signing cert doesn't have a subject key identifier while the signed cert does have an authority key identifier (and a subject key identifier).\nThat said, to be fair, OpenSSL seems to think the cert is valid:\nopenssl verify -verbose -CAfile signer.pem signed.pem\nThat said, idk that I agree with OpenSSL's verdict. In light of this I've posed the question on crypto.stackexchange.com:\nhttps://crypto.stackexchange.com/q/53856/4520. So I've re-evaluated things after the crypto.stackexchange.com and I'll go ahead and merge this. I'll update it based on my comment at https://github.com/phpseclib/phpseclib/pull/1213#discussion_r153625564 , I'll backport to 1.0 and I'll see if this should be added for CRL's (tbsCertList).. I think I'd prefer just doing return $this->extendedGCD($n)['gcd'];. I can change that myself for both PHP32 / PHP64.. No where else in the phpseclib are yoda conditions used. As such, for consistency purposes, I don't think they ought to be used anywhere. ie. they ought to be used everywhere or nowhere.\nAlso, every other condition does === but this one does ==.\nFinally, I think return false would be better than break.\nThat said, don't worry about these changes - I cherry-picked this branch into the 1.0 branch and made the changes there. I then merged to 2.0 and master.\nThanks!. ",
    "ghost": "Can any body help me or give me a file to upload on a server and connect on a server because i download file from here http://phpseclib.sourceforge.net/ and its Index or main file is not running \nI have added my servers IP to other server but i am unable to use this\nSo can any body please guide me??? ASAP!!!\n. Well, I guess I should have phrased that slightly different.\nWhat I meant by PSR-0, is moving towards PHP 5.3 namespaces instead of prefixed class names\n. Another issue I forgot to mention, is with lazy-loading classes - you don't have access to defined constants unless they're attached to the class themselves, thus meaning everything has to be eager-loaded. You can see an implementation I've been playing with at: https://github.com/syntaqx/phpseclib/blob/php53/src/PhpSecLib/Math/BigInteger.php\nI realize the implementation above doesn't follow your coding standards, so no need to comment - I have a few tools that will fix it when I'm done, but I'm not as efficient without coding that way (working on it)\nAlso note, that the BigInteger class still passes its unit tests with the changes I've made. Everything else is more or less cosmetic or newer PHP specific (visibility, etc)\n. I'll give it a bit more investigation in some spare time later today and see if I have any objections or additions to your ideas :) Looks pretty solid though.\n. Added the extra lines and the build status markdown link\n. @KendallHopkins The problem with that, is that you can't enforce it. This ensures that regardless of custom git configurations, contributions adhere to repository baselines.\n. @KendallHopkins That's not really the purpose of what I was getting at.. the purpose of what's currently in the .gitignore file is files that are left over by common editors. Pull requests would generally contain very good code, but (for example) VIM leaves temporary files after you're editing files in some cases. This isn't a poor pull request, just an accidental mistake. This helps alleviate that problem.\nI really don't understand what the issues with having this file are. There are only benefits from using it. If people are really that passionate about it though, I'm happy to remove it from the pull request.\n. @RobLoach Yes, https://github.com/phpseclib/phpseclib/blob/master/.travis.yml#L6\n. @KendallHopkins I'll leave it to majority rule then. If people are against it, then I'll pull it out. Optionally, @terrafrost can just tell me what he wants and that's how it'll be; that being said, I think this file is VERY important to keep in the repository. But, it's not my call.\n. Oh, sorry about that. I don't even consider PHP 4 when thinking about stuff anymore.. .hah.\n. I'm facing the same issue. But I found a solution. Change this (line 791):\n// on windows this returns a \"Warning: Invalid CRT parameters detected\" error\nif (!stream_select($read, $write, $except, $timeout - $elapsed)) {\n    user_error(rtrim(\"Cannot connect to $host. Banner timeout\"), E_USER_NOTICE);\n    return;\n}\nBy this:\n// on windows this returns a \"Warning: Invalid CRT parameters detected\" error\nif (false === stream_select($read, $write, $except, $timeout - $elapsed)) {\n    user_error(rtrim(\"Cannot connect to $host. Banner timeout\"), E_USER_NOTICE);\n   return;\n}\n. @terrafrost \necho ($timeout - $elapsed) \nResult: 9.99700498581\n. @terrafrost \nI did a test on another server (CentOS release 6.2, PHP 5.3.3) and everythings works fine without any change to your code. So maybe it's a bug with Ubuntu 8.04 or PHP 5.2.4...\n. I would like to :+1: this issue.\nI'm trying to validate the signature of a phar, without the phar or openssl extensions, that was signed using a private key.\n. You can find an example here.\nI currently use Crypt_RSA->verify(), but I have to read the entire phar (except the signature, signature size/type, and GBMB flag). The problem with this approach is that I have to assume that my user has set memory_limit to a big enough value to hold a large phar.\n. You are absolutely right. What I did wrong, is I have overridden your constructor and forgot about const. defined there. Sorry for mess.\n. Introducing some sort of delay after \nif ($mode == NET_SCP_STRING) {\n            $this->_send($data);\n}\nin SCP.php helps to get around this issue. Looks like this is a bug and need to be resolved.\n. If I enable logging, the file would upload properly as the logging would introduce some delay in execution. For example, defining NET_SSH2_LOGGING would lead to proper upload of a file. So, there is no way to get the debug log for the case when file upload does not work.....\n. Here is the log.....\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:35:2e:31:39:20:46:6c:6f  SSH-2.0-5.19 Flo\n00000010  77:53:73:68:3a:20:42:69:74:76:69:73:65:20:53:53  wSsh: Bitvise SS\n00000020  48:20:53:65:72:76:65:72:20:28:57:69:6e:53:53:48  H Server (WinSSH\n00000030  44:29:20:36:2e:30:32:3a:20:66:72:65:65:20:6f:6e  D) 6.02: free on\n00000040  6c:79:20:66:6f:72:20:70:65:72:73:6f:6e:61:6c:20  ly for personal \n00000050  6e:6f:6e:2d:63:6f:6d:6d:65:72:63:69:61:6c:20:75  non-commercial u\n00000060  73:65:0d:0a                                      se..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.8451, network: 0.236s)\n00000000  14:af:85:ab:bb:a8:1c:9c:5d:24:7b:b4:98:76:c9:63  ........]${..v.c\n00000010  f4:00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c  ....~diffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e  man-group-exchan\n00000030  67:65:2d:73:68:61:32:35:36:2c:64:69:66:66:69:65  ge-sha256,diffie\n00000040  2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d:65  -hellman-group-e\n00000050  78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69:66  xchange-sha1,dif\n00000060  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000070  70:31:34:2d:73:68:61:31:2c:64:69:66:66:69:65:2d  p14-sha1,diffie-\n00000080  68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73  hellman-group1-s\n00000090  68:61:31:00:00:00:07:73:73:68:2d:64:73:73:00:00  ha1....ssh-dss..\n000000a0  00:53:61:65:73:32:35:36:2d:63:74:72:2c:61:65:73  .Saes256-ctr,aes\n000000b0  32:35:36:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  256-cbc,aes192-c\n000000c0  74:72:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65  tr,aes192-cbc,ae\n000000d0  73:31:32:38:2d:63:74:72:2c:61:65:73:31:32:38:2d  s128-ctr,aes128-\n000000e0  63:62:63:2c:33:64:65:73:2d:63:74:72:2c:33:64:65  cbc,3des-ctr,3de\n000000f0  73:2d:63:62:63:00:00:00:53:61:65:73:32:35:36:2d  s-cbc...Saes256-\n00000100  63:74:72:2c:61:65:73:32:35:36:2d:63:62:63:2c:61  ctr,aes256-cbc,a\n00000110  65:73:31:39:32:2d:63:74:72:2c:61:65:73:31:39:32  es192-ctr,aes192\n00000120  2d:63:62:63:2c:61:65:73:31:32:38:2d:63:74:72:2c  -cbc,aes128-ctr,\n00000130  61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73:2d  aes128-cbc,3des-\n00000140  63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00:4a  ctr,3des-cbc...J\n00000150  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n00000160  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n00000170  2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:39  ,hmac-sha2-256-9\n00000180  36:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  6,hmac-sha1-96,h\n00000190  6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:4a:68:6d  mac-md5-96...Jhm\n000001a0  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n000001b0  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2c:68  -sha1,hmac-md5,h\n000001c0  6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:39:36:2c  mac-sha2-256-96,\n000001d0  68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61  hmac-sha1-96,hma\n000001e0  63:2d:6d:64:35:2d:39:36:00:00:00:09:7a:6c:69:62  c-md5-96....zlib\n000001f0  2c:6e:6f:6e:65:00:00:00:09:7a:6c:69:62:2c:6e:6f  ,none....zlib,no\n00000200  6e:65:00:00:00:00:00:00:00:00:00:00:00:00:00     ne.............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.332, network: 0.001s)\n00000000  14:cd:74:99:56:5b:1e:b8:5b:0d:da:c7:b3:09:ba:d3  ..t.V[..[.......\n00000010  77:00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c  w...6diffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c  man-group1-sha1,\n00000030  64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67  diffie-hellman-g\n00000040  72:6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73  roup14-sha1....s\n00000050  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n00000060  00:f6:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63  ..arcfour256,arc\n00000070  66:6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c  four128,arcfour,\n00000080  61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39  aes128-ctr,aes19\n00000090  32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72  2-ctr,aes256-ctr\n000000a0  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:74:77  ,blowfish-ctr,tw\n000000b0  6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f  ofish128-ctr,two\n000000c0  66:69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66  fish192-ctr,twof\n000000d0  69:73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32  ish256-ctr,aes12\n000000e0  38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63  8-cbc,aes192-cbc\n000000f0  2c:61:65:73:32:35:36:2d:63:62:63:2c:62:6c:6f:77  ,aes256-cbc,blow\n00000100  66:69:73:68:2d:63:62:63:2c:74:77:6f:66:69:73:68  fish-cbc,twofish\n00000110  31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  128-cbc,twofish1\n00000120  39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  92-cbc,twofish25\n00000130  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62  6-cbc,twofish-cb\n00000140  63:2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d  c,3des-ctr,3des-\n00000150  63:62:63:2c:6e:6f:6e:65:00:00:00:f6:61:72:63:66  cbc,none....arcf\n00000160  6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32  our256,arcfour12\n00000170  38:2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38  8,arcfour,aes128\n00000180  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n00000190  61:65:73:32:35:36:2d:63:74:72:2c:62:6c:6f:77:66  aes256-ctr,blowf\n000001a0  69:73:68:2d:63:74:72:2c:74:77:6f:66:69:73:68:31  ish-ctr,twofish1\n000001b0  32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:39  28-ctr,twofish19\n000001c0  32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32:35:36  2-ctr,twofish256\n000001d0  2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62:63:2c  -ctr,aes128-cbc,\n000001e0  61:65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35  aes192-cbc,aes25\n000001f0  36:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63  6-cbc,blowfish-c\n00000200  62:63:2c:74:77:6f:66:69:73:68:31:32:38:2d:63:62  bc,twofish128-cb\n00000210  63:2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63  c,twofish192-cbc\n00000220  2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62:63:2c  ,twofish256-cbc,\n00000230  74:77:6f:66:69:73:68:2d:63:62:63:2c:33:64:65:73  twofish-cbc,3des\n00000240  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f  -ctr,3des-cbc,no\n00000250  6e:65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d  ne...0hmac-sha1-\n00000260  39:36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  96,hmac-sha1,hma\n00000270  63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64  c-md5-96,hmac-md\n00000280  35:2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73  5,none...0hmac-s\n00000290  68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31  ha1-96,hmac-sha1\n000002a0  2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61  ,hmac-md5-96,hma\n000002b0  63:2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f  c-md5,none....no\n000002c0  6e:65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00  ne....none......\n000002d0  00:00:00:00:00:00:00                             .......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 1.0691, network: 0.001s)\n00000000  1e:00:00:00:81:00:bc:25:43:b9:3c:7f:2e:33:b7:06  .......%C....3..\n00000010  8c:bd:5a:48:7a:90:24:00:67:2e:97:f2:e1:0b:ab:eb  ..ZHz.$.g.......\n00000020  b5:bc:be:c5:20:49:22:a3:0b:a4:69:a2:3e:02:3d:0d  .... I\"...i.>.=.\n00000030  1b:da:25:b9:52:f3:1c:54:c3:9e:29:29:15:eb:0c:b2  ..%.R..T..))....\n00000040  9b:ee:8a:93:59:43:ad:ce:c6:7d:47:3e:f4:15:cb:c2  ....YC...}G>....\n00000050  20:b8:4b:0a:2b:30:5d:35:4e:e5:6f:87:3d:f3:6d:28   .K.+0]5N.o.=.m(\n00000060  65:49:62:cd:db:b7:74:3d:83:3a:58:f8:c2:5c:b7:d0  eIb...t=.:X....\n00000070  49:4c:3b:3f:c0:5c:87:62:81:bb:88:3e:2e:ef:8c:89  IL;?..b...>....\n00000080  e7:c9:63:af:36:ef                                ..c.6.\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.236, network: 0.156s)\n00000000  1f:00:00:01:b1:00:00:00:07:73:73:68:2d:64:73:73  .........ssh-dss\n00000010  00:00:00:81:00:b0:04:15:4e:23:6c:63:44:33:b3:b6  ........N#lcD3..\n00000020  5c:e7:e5:40:b3:fc:fa:07:a8:5d:f7:ae:91:f6:2f:75  ..@.....]..../u\n00000030  2e:83:8d:bd:ea:f3:af:74:62:5f:0a:b1:3b:0b:b3:4a  .......tb_..;..J\n00000040  32:f3:35:56:12:1e:6a:c0:46:3b:d3:b3:d3:26:16:73  2.5V..j.F;...&.s\n00000050  1d:d4:c7:6f:74:cb:81:7a:5c:be:1e:d3:fe:32:7d:11  ...ot..z....2}.\n00000060  c4:23:34:66:f5:ae:cc:e3:e4:55:dd:c5:dd:38:df:d4  .#4f.....U...8..\n00000070  63:b9:7b:e4:5f:08:53:48:a6:91:63:21:6f:99:c2:93  c.{..SH..c!o...\n00000080  8b:d8:bb:60:f0:cd:84:a7:fb:bd:45:ee:a2:44:a6:73  .........E..D.s\n00000090  b3:59:27:80:87:00:00:00:15:00:cb:42:43:30:26:65  .Y'........BC0&e\n000000a0  ad:d1:28:a3:71:97:f8:87:08:0d:22:b3:d3:cf:00:00  ..(.q.....\".....\n000000b0  00:80:0b:13:be:bb:91:a9:73:44:aa:82:6a:eb:89:fe  ........sD..j...\n000000c0  25:d1:4b:f5:da:b1:f2:87:b0:13:34:7e:31:cc:fb:99  %.K.......4~1...\n000000d0  7d:dd:96:ac:64:1f:7e:d5:47:e8:73:8c:27:24:bf:c6  }...d.~.G.s.'$..\n000000e0  59:e4:d2:ea:4e:69:c4:d1:d0:bd:81:5c:20:e1:51:3a  Y...Ni.....\\ .Q:\n000000f0  73:f7:bf:67:51:e5:7b:84:47:63:0d:89:00:f6:3d:d0  s..gQ.{.Gc....=.\n00000100  a6:0a:89:28:73:c4:a9:26:de:7a:09:64:2f:f5:37:69  ...(s..&.z.d/.7i\n00000110  22:15:51:ec:c7:af:15:43:9e:2e:31:bb:63:15:ae:03  \".Q....C..1.c...\n00000120  1b:c1:71:17:2a:58:14:94:f6:d6:37:df:87:75:9f:d2  ..q.*X....7..u..\n00000130  6e:50:00:00:00:80:29:b8:89:ba:ce:24:81:ac:83:53  nP....)....$...S\n00000140  21:c2:4e:45:8b:bc:b9:4e:86:f0:ef:34:67:87:09:ed  !.NE...N...4g...\n00000150  a6:f8:74:ff:2e:0b:69:50:84:35:2e:2b:48:01:8a:ff  ..t...iP.5.+H...\n00000160  6a:4a:cb:06:73:bc:70:42:22:23:83:78:db:d4:c7:55  jJ..s.pB\"#.x...U\n00000170  88:5e:62:0e:93:84:0b:08:a5:98:6a:49:dc:a2:0b:09  .^b.......jI....\n00000180  3a:7b:f8:9b:d6:f8:0f:c4:0f:e3:5d:97:25:6d:e1:35  :{........].%m.5\n00000190  d2:99:9c:09:1b:22:68:dc:1d:c5:9b:42:d8:af:60:7f  .....\"h....B...\n000001a0  9c:a8:d6:51:f2:af:30:4f:48:0c:bc:6c:3e:77:bc:ba  ...Q..0OH..l>w..\n000001b0  b2:d5:2c:cf:9a:2c:00:00:00:81:00:f9:00:0b:89:0f  ..,..,..........\n000001c0  aa:c6:07:84:13:a3:bc:a7:18:8a:29:68:eb:69:3e:51  ..........)h.i>Q\n000001d0  bf:ea:cd:7d:ad:7b:8a:e5:62:f0:db:1d:66:1b:ea:9c  ...}.{..b...f...\n000001e0  47:d4:9a:6b:80:22:0b:03:8c:fd:31:cc:14:08:83:7f  G..k.\"....1.....\n000001f0  5f:7f:65:39:0b:da:92:a7:27:d1:5c:f3:40:3b:d9:19  .e9....'..@;..\n00000200  5f:cc:83:47:92:49:e1:83:75:cd:48:09:20:ac:d6:c0  _..G.I..u.H. ...\n00000210  c8:ee:8f:18:d0:4d:d4:e7:19:2d:51:d5:00:12:3b:07  .....M...-Q...;.\n00000220  c9:aa:c6:5d:83:5b:53:3e:be:a7:89:ff:59:eb:a1:bf  ...].[S>....Y...\n00000230  61:fa:53:50:9f:8f:34:63:16:ea:55:00:00:00:37:00  a.SP..4c..U...7.\n00000240  00:00:07:73:73:68:2d:64:73:73:00:00:00:28:a0:a4  ...ssh-dss...(..\n00000250  ed:e3:34:82:82:44:49:b6:bd:8b:44:6e:0f:91:21:90  ..4..DI...Dn..!.\n00000260  18:c5:58:1d:56:05:7f:d3:c8:3d:79:d2:9d:57:f1:9c  ..X.V....=y..W..\n00000270  b3:24:b7:e4:a8:c0                                .$....\n-> NET_SSH2_MSG_NEWKEYS (since last: 1.0291, network: 0.001s)\n00000000  15                                               .\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.006, network: 0.001s)\n00000000  15                                               .\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.019, network: 0s)\n00000000  05:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.6381, network: 0.6251s)\n00000000  06:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.016, network: 0.001s)\n00000000  32:00:00:00:0d:61:64:6d:69:6e:69:73:74:72:61:74  2....administrat\n00000010  6f:72:00:00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63  or....ssh-connec\n00000020  74:69:6f:6e:00:00:00:08:70:61:73:73:77:6f:72:64  tion....password\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.248, network: 0.205s)\n00000000  34                                               4\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.033, network: 0.002s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.238, network: 0.202s)\n00000000  5b:00:00:00:00:00:00:00:00:00:04:00:00:00:01:00  [...............\n00000010  00                                               .\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.041, network: 0s)\n00000000  62:00:00:00:00:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:0b:65:63:68:6f:20:25:54:45:4d:50:25           ..echo %TEMP%\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.291, network: 0.263s)\n00000000  63:00:00:00:00                                   c....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.066, network: 0.045s)\n00000000  5e:00:00:00:00:00:00:00:26:43:3a:5c:55:73:65:72  ^.......&C:\\User\n00000010  73:5c:41:44:4d:49:4e:49:7e:31:5c:41:70:70:44:61  s\\ADMINI~1\\AppDa\n00000020  74:61:5c:4c:6f:63:61:6c:5c:54:65:6d:70:0d:0a     ta\\Local\\Temp..\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.043, network: 0.001s)\n00000000  62:00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74  b........exit-st\n00000010  61:74:75:73:00:00:00:00:00                       atus.....\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 0.021, network: 0s)\n00000000  60:00:00:00:00                                   `....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.007, network: 0.001s)\n00000000  61:00:00:00:00                                   a....\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.009, network: 0.002s)\n00000000  60:00:00:00:00                                   `....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.009, network: 0.001s)\n00000000  61:00:00:00:00                                   a....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.016, network: 0s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.6281, network: 0.6041s)\n00000000  5b:00:00:00:00:00:00:00:01:00:04:00:00:00:01:00  [...............\n00000010  00                                               .\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.04, network: 0.001s)\n00000000  62:00:00:00:01:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:3f:73:63:70:20:2d:74:20:43:3a:5c:55:73:65:72  .?scp -t C:\\User\n00000020  73:5c:41:44:4d:49:4e:49:7e:31:5c:41:70:70:44:61  s\\ADMINI~1\\AppDa\n00000030  74:61:5c:4c:6f:63:61:6c:5c:54:65:6d:70:5c:58:4d  ta\\Local\\Temp\\XM\n00000040  4c:58:70:61:74:68:52:65:70:6c:61:63:65:2e:70:73  LXpathReplace.ps\n00000050  31                                               1\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.238, network: 0.185s)\n00000000  63:00:00:00:00                                   c....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.032, network: 0.005s)\n00000000  5e:00:00:00:00:00:00:00:01:00                    ^.........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.023, network: 0.001s)\n00000000  5e:00:00:00:01:00:00:00:1f:43:30:36:34:34:20:34  ^........C0644 4\n00000010  34:34:35:20:58:4d:4c:58:70:61:74:68:52:65:70:6c  445 XMLXpathRepl\n00000020  61:63:65:2e:70:73:31:0a                          ace.ps1.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.251, network: 0.214s)\n00000000  5e:00:00:00:00:00:00:00:01:00                    ^.........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.035, network: 0.001s)\n00000000  5e:00:00:00:01:00:00:11:5d:23:21:5b:2e:70:73:31  ^.......]#![.ps1\n00000010  5d:70:6f:77:65:72:73:68:65:6c:6c:2e:65:78:65:20  ]powershell.exe \n00000020  2d:45:78:65:63:75:74:69:6f:6e:50:6f:6c:69:63:79  -ExecutionPolicy\n00000030  20:55:6e:72:65:73:74:72:69:63:74:65:64:20:2d:46   Unrestricted -F\n00000040  69:6c:65:0d:0a:23:23:23:23:23:23:23:23:23:23:23  ile..###########\n00000050  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000060  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000070  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000080  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000090  23:23:0d:0a:23:20:43:6f:70:79:72:69:67:68:74:20  ##..# Copyright \n000000a0  40:20:32:30:31:33:20:42:4d:43:20:53:6f:66:74:77  @ 2013 BMC Softw\n000000b0  61:72:65:2c:20:49:6e:63:2e:20:20:20:20:20:20:20  are, Inc.     \n000000c0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n000000d0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n000000e0  23:0d:0a:23:20:54:68:69:73:20:73:63:72:69:70:74  #..# This script\n000000f0  20:69:73:20:73:75:70:70:6c:69:65:64:20:61:73:20   is supplied as \n00000100  61:20:74:65:6d:70:6c:61:74:65:20:66:6f:72:20:70  a template for p\n00000110  65:72:66:6f:72:6d:69:6e:67:20:74:68:65:20:64:65  erforming the de\n00000120  66:69:6e:65:64:20:61:63:74:69:6f:6e:73:20:20:23  fined actions  #\n00000130  0d:0a:23:20:76:69:61:20:74:68:65:20:56:61:72:61  ..# via the Vara\n00000140  4c:6f:67:69:78:20:51:20:44:65:70:6c:6f:79:6d:65  Logix Q Deployme\n00000150  6e:74:20:41:75:74:6f:6d:61:74:69:6f:6e:20:53:79  nt Automation Sy\n00000160  73:74:65:6d:2e:20:54:68:69:73:20:73:63:72:69:70  stem. This scrip\n00000170  74:20:69:73:20:77:72:69:74:74:65:6e:20:20:23:0d  t is written  #.\n00000180  0a:23:20:74:6f:20:70:65:72:66:6f:72:6d:20:69:6e  .# to perform in\n00000190  20:6d:6f:73:74:20:65:6e:76:69:72:6f:6e:6d:65:6e   most environmen\n000001a0  74:73:20:62:75:74:20:6d:61:79:20:72:65:71:75:69  ts but may requi\n000001b0  72:65:20:63:68:61:6e:67:65:73:20:74:6f:20:77:6f  re changes to wo\n000001c0  72:6b:20:63:6f:72:72:65:63:74:6c:79:20:23:0d:0a  rk correctly #..\n000001d0  23:20:69:6e:20:79:6f:75:72:20:73:70:65:63:69:66  # in your specif\n000001e0  69:63:20:65:6e:76:69:72:6f:6e:6d:65:6e:74:2e:20  ic environment. \n000001f0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000200  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000210  20:20:20:20:20:20:20:20:20:20:20:20:23:0d:0a:23              #..#\n00000220  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000230  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000240  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000250  23:23:23:23:23:23:23:23:23:23:23:23:23:23:23:23  ################\n00000260  23:23:23:23:23:23:23:23:23:23:23:23:0d:0a:23:0d  ############..#.\n00000270  0a:23:20:46:69:6e:64:20:41:6e:64:20:52:65:70:6c  .# Find And Repl\n00000280  61:63:65:20:78:50:61:74:68:2f:56:61:6c:75:65:20  ace xPath/Value \n00000290  70:61:69:72:73:20:69:6e:20:58:4d:4c:20:46:69:6c  pairs in XML Fil\n000002a0  65:0d:0a:23:0d:0a:23:20:52:45:51:55:49:52:45:44  e..#..# REQUIRED\n000002b0  20:41:52:47:55:4d:45:4e:54:53:0d:0a:23:09:3c:78   ARGUMENTS..#..x\n000002c0  6d:6c:46:69:6c:65:3e:20:3c:78:50:61:74:68:31:3e  mlFile> .xPath1>\n000002d0  20:3c:76:61:6c:75:65:31:3e:20:3c:78:50:61:74:68   .value1> .xPath\n000002e0  32:3e:20:3c:76:61:6c:75:65:32:3e:20:2e:2e:2e:20  2> .value2> ... \n000002f0  3c:78:50:61:74:68:4e:3e:20:3c:76:61:6c:75:65:4e  .xPathN> .valueN\n00000300  3e:20:0d:0a:23:0d:0a:23:20:4e:6f:74:65:73:20:2d  > ..#..# Notes -\n00000310  20:55:73:65:20:22:64:65:66:61:75:6c:74:3a:22:20   Use \"default:\" \n00000320  74:6f:20:64:65:66:69:6e:65:20:6e:6f:64:65:73:20  to define nodes \n00000330  74:68:61:74:20:68:61:76:65:20:61:6e:20:65:78:70  that have an exp\n00000340  6c:69:63:69:74:6c:79:20:64:65:66:69:6e:65:64:20  licitly defined \n00000350  6e:61:6d:65:73:70:61:63:65:20:77:69:74:68:20:22  namespace with \"\n00000360  78:6d:6c:6e:73:3d:3c:55:52:49:3e:22:20:69:6e:20  xmlns=.URI>\" in \n00000370  74:68:65:20:78:6d:6c:0d:0a:23:09:2d:20:55:73:65  the xml..#.- Use\n00000380  20:74:68:65:20:6e:61:6d:65:73:70:61:63:65:20:6e   the namespace n\n00000390  61:6d:65:20:64:65:66:69:6e:65:64:20:69:6e:20:74  ame defined in t\n000003a0  68:65:20:78:6d:6c:20:64:6f:63:20:66:6f:72:20:6e  he xml doc for n\n000003b0  6f:64:65:73:20:69:6e:20:74:68:6f:73:65:20:6e:61  odes in those na\n000003c0  6d:65:73:70:61:63:65:73:2c:20:22:66:6f:6f:3a:22  mespaces, \"foo:\"\n000003d0  20:66:6f:72:20:22:78:6d:6c:6e:73:3a:66:6f:6f:3d   for \"xmlns:foo=\n000003e0  3c:55:52:49:3e:22:0d:0a:23:09:2d:20:45:78:61:6d  .URI>\"..#.- Exam\n000003f0  70:6c:65:20:78:50:61:74:68:3a:20:20:2f:64:65:66  ple xPath:  /def\n00000400  61:75:6c:74:3a:44:65:70:6c:6f:79:6d:65:6e:74:4d  ault:DeploymentM\n00000410  61:70:70:69:6e:67:73:2f:64:65:66:61:75:6c:74:3a  appings/default:\n00000420  4d:61:70:70:69:6e:67:2f:40:43:6f:6d:70:75:74:65  Mapping/@Compute\n00000430  72:0d:0a:0d:0a:0d:0a:24:65:72:72:6f:72:42:61:73  r......$errorBas\n00000440  65:20:3d:20:24:65:72:72:6f:72:5b:30:5d:0d:0a:0d  e = $error[0]...\n00000450  0a:69:66:28:21:24:61:72:67:73:29:20:7b:0d:0a:20  .if(!$args) {.. \n00000460  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:24                 $\n00000470  68:6f:73:74:2e:75:69:2e:57:72:69:74:65:45:72:72  host.ui.WriteErr\n00000480  6f:72:4c:69:6e:65:28:22:4e:6f:20:61:72:67:75:6d  orLine(\"No argum\n00000490  65:6e:74:73:20:70:61:73:73:65:64:20:74:6f:20:41  ents passed to A\n000004a0  63:74:69:6f:6e:2e:20:20:50:6c:65:61:73:65:20:70  ction.  Please p\n000004b0  72:6f:76:69:64:65:20:74:68:65:20:66:6f:6c:6c:6f  rovide the follo\n000004c0  77:69:6e:67:20:61:72:67:75:6d:65:6e:74:73:3a:22  wing arguments:\"\n000004d0  29:0d:0a:09:09:24:68:6f:73:74:2e:75:69:2e:57:72  )....$host.ui.Wr\n000004e0  69:74:65:45:72:72:6f:72:4c:69:6e:65:28:22:3c:78  iteErrorLine(\".x\n000004f0  6d:6c:46:69:6c:65:3e:20:3c:78:50:61:74:68:31:3e  mlFile> .xPath1>\n00000500  20:3c:76:61:6c:75:65:31:3e:20:3c:78:50:61:74:68   .value1> .xPath\n00000510  32:3e:20:3c:76:61:6c:75:65:32:3e:20:2e:2e:2e:20  2> .value2> ... \n00000520  3c:78:50:61:74:68:4e:3e:20:3c:76:61:6c:75:65:4e  .xPathN> .valueN\n00000530  3e:22:29:0d:0a:20:20:20:20:20:20:20:20:20:20:20  >\")..         \n00000540  20:20:20:20:20:65:78:69:74:20:31:0d:0a:7d:0d:0a       exit 1..}..\n00000550  0d:0a:24:78:6d:6c:46:69:6c:65:3d:24:6e:75:6c:0d  ..$xmlFile=$nul.\n00000560  0a:24:78:70:61:74:68:3d:24:6e:75:6c:0d:0a:24:73  .$xpath=$nul..$s\n00000570  65:74:74:69:6e:67:3d:24:6e:75:6c:0d:0a:0d:0a:66  etting=$nul....f\n00000580  6f:72:65:61:63:68:20:28:24:61:72:67:20:69:6e:20  oreach ($arg in \n00000590  24:61:72:67:73:29:20:20:7b:0d:0a:0d:0a:09:69:66  $args)  {.....if\n000005a0  20:28:21:24:78:6d:6c:46:69:6c:65:29:20:7b:20:0d   (!$xmlFile) { .\n000005b0  0a:09:09:24:78:6d:6c:46:69:6c:65:3d:24:61:72:67  ...$xmlFile=$arg\n000005c0  0d:0a:09:09:69:66:20:28:21:28:74:65:73:74:2d:70  ....if (!(test-p\n000005d0  61:74:68:20:24:78:6d:6c:46:69:6c:65:29:29:20:20  ath $xmlFile))\n000005e0  7b:20:0d:0a:09:09:09:77:72:69:74:65:2d:65:72:72  { .....write-err\n000005f0  6f:72:20:22:24:78:6d:6c:46:69:6c:65:20:6e:6f:74  or \"$xmlFile not\n00000600  20:66:6f:75:6e:64:22:20:0d:0a:09:09:09:65:78:69   found\" .....exi\n00000610  74:20:31:0d:0a:09:09:7d:0d:0a:09:09:23:20:67:65  t 1....}....# ge\n00000620  74:20:78:6d:6c:20:66:72:6f:6d:20:66:69:6c:65:0d  t xml from file.\n00000630  0a:09:09:24:78:6d:6c:20:3d:20:24:6e:75:6c:0d:0a  ...$xml = $nul..\n00000640  09:09:5b:78:6d:6c:5d:24:78:6d:6c:20:3d:20:67:65  ..[xml]$xml = ge\n00000650  74:2d:63:6f:6e:74:65:6e:74:20:24:78:6d:6c:66:69  t-content $xmlfi\n00000660  6c:65:0d:0a:09:09:0d:0a:09:09:23:20:64:65:66:69  le........# defi\n00000670  6e:65:20:6e:61:6d:65:73:70:61:63:65:20:6d:61:6e  ne namespace man\n00000680  61:67:65:72:0d:0a:09:09:24:6d:67:72:3d:24:4e:75  ager....$mgr=$Nu\n00000690  6c:0d:0a:09:09:5b:53:79:73:74:65:6d:2e:58:6d:6c  l....[System.Xml\n000006a0  2e:58:6d:6c:4e:61:6d:65:73:70:61:63:65:4d:61:6e  .XmlNamespaceMan\n000006b0  61:67:65:72:5d:20:24:6d:67:72:3d:24:78:6d:6c:2e  ager] $mgr=$xml.\n000006c0  67:65:74:5f:4e:61:6d:65:54:61:62:6c:65:28:29:0d  get_NameTable().\n000006d0  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n000006e0  20:23:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20   #..          \n000006f0  20:20:20:20:23:20:44:79:6e:61:6d:69:63:61:6c:6c      # Dynamicall\n00000700  79:20:61:64:64:20:74:68:65:20:6e:61:6d:65:73:70  y add the namesp\n00000710  61:63:65:73:20:74:68:61:74:20:61:72:65:20:66:6f  aces that are fo\n00000720  75:6e:64:20:69:6e:20:74:68:65:20:66:69:6c:65:0d  und in the file.\n00000730  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000740  20:23:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20   #..          \n00000750  20:20:20:20:0d:0a:20:20:20:20:20:20:20:20:20:20      ..        \n00000760  20:20:20:20:20:20:23:20:70:75:6c:6c:20:61:6e:79        # pull any\n00000770  20:6e:61:6d:65:64:20:6e:61:6d:65:73:70:61:63:65   named namespace\n00000780  0d:0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20  ..            \n00000790  20:20:24:6e:61:6d:65:64:20:3d:20:73:77:69:74:63    $named = switc\n000007a0  68:20:2d:72:65:67:65:78:20:2d:66:69:6c:65:20:24  h -regex -file $\n000007b0  78:6d:6c:66:69:6c:65:20:7b:20:22:78:6d:6c:6e:73  xmlfile { \"xmlns\n000007c0  3a:28:2e:2b:3f:29:3d:60:22:28:2e:2b:29:60:22:22  :(.+?)=\"(.+)\"\"\n000007d0  20:7b:20:24:6d:61:74:63:68:65:73:5b:30:5d:20:7d   { $matches[0] }\n000007e0  20:7d:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20   }..          \n000007f0  20:20:20:20:69:66:20:28:24:6e:61:6d:65:64:29:20      if ($named) \n00000800  20:7b:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20   {..          \n00000810  20:20:20:20:20:20:20:20:66:6f:72:65:61:63:68:20          foreach \n00000820  28:24:6d:61:74:63:68:65:64:20:69:6e:20:24:6e:61  ($matched in $na\n00000830  6d:65:64:2e:73:70:6c:69:74:28:29:29:20:7b:0d:0a  med.split()) {..\n00000840  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000850  20:20:20:20:20:20:20:20:69:66:20:28:21:24:6d:61          if (!$ma\n00000860  74:63:68:65:64:29:20:7b:20:63:6f:6e:74:69:6e:75  tched) { continu\n00000870  65:20:7d:0d:0a:20:20:20:20:20:20:20:20:20:20:20  e }..         \n00000880  20:20:20:20:20:20:20:20:20:20:20:20:20:69:66:20               if \n00000890  28:21:24:6d:61:74:63:68:65:64:2e:63:6f:6e:74:61  (!$matched.conta\n000008a0  69:6e:73:28:22:78:6d:6c:6e:73:22:29:29:20:7b:20  ins(\"xmlns\")) { \n000008b0  63:6f:6e:74:69:6e:75:65:20:7d:0d:0a:20:20:20:20  continue }..  \n000008c0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n000008d0  20:20:20:20:24:6e:61:6d:65:2c:24:76:61:6c:75:65      $name,$value\n000008e0  20:3d:20:24:6d:61:74:63:68:65:64:2e:73:70:6c:69   = $matched.spli\n000008f0  74:28:22:3d:22:2c:32:29:0d:0a:20:20:20:20:20:20  t(\"=\",2)..    \n00000900  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000910  20:20:24:76:61:6c:75:65:20:3d:20:24:76:61:6c:75    $value = $valu\n00000920  65:2e:72:65:70:6c:61:63:65:28:22:60:22:22:2c:22  e.replace(\"\"\",\"\n00000930  22:29:20:23:22:0d:0a:20:20:20:20:20:20:20:20:20  \") #\"..         \n00000940  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:24                 $\n00000950  69:67:6e:6f:72:65:2c:24:6e:61:6d:65:20:3d:20:24  ignore,$name = $\n00000960  6e:61:6d:65:2e:73:70:6c:69:74:28:22:3a:22:2c:32  name.split(\":\",2\n00000970  29:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20:20  )..             \n00000980  20:20:20:20:20:20:20:20:20:20:20:24:6d:67:72:2e             $mgr.\n00000990  41:64:64:4e:61:6d:65:73:70:61:63:65:28:24:6e:61  AddNamespace($na\n000009a0  6d:65:2c:24:76:61:6c:75:65:29:0d:0a:20:20:20:20  me,$value)..    \n000009b0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                  \n000009c0  7d:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20:20  }..             \n000009d0  20:20:20:7d:0d:0a:20:20:20:20:20:20:20:20:20:20     }..          \n000009e0  20:20:20:20:20:20:22:22:0d:0a:0d:0a:20:20:20:20        \"\"....    \n000009f0  20:20:20:20:20:20:20:20:20:20:20:20:23:20:70:75              # pu\n00000a00  6c:6c:20:64:65:66:61:75:6c:74:20:6e:61:6d:65:73  ll default names\n00000a10  70:61:63:65:0d:0a:0d:0a:20:20:20:20:20:20:20:20  pace....        \n00000a20  20:20:20:20:20:20:20:20:24:64:65:66:61:75:6c:74          $default\n00000a30  6e:73:20:3d:20:73:77:69:74:63:68:20:2d:72:65:67  ns = switch -reg\n00000a40  65:78:20:2d:66:69:6c:65:20:24:78:6d:6c:66:69:6c  ex -file $xmlfil\n00000a50  65:20:7b:20:22:78:6d:6c:6e:73:3d:60:22:28:2e:2b  e { \"xmlns=\"(.+\n00000a60  3f:29:60:22:22:20:7b:20:20:24:6d:61:74:63:68:65  ?)`\"\" {  $matche\n00000a70  73:5b:31:5d:20:7d:20:7d:0d:0a:20:20:20:20:20:20  s[1] } }..    \n00000a80  20:20:20:20:20:20:20:20:20:20:69:66:20:28:24:64            if ($d\n00000a90  65:66:61:75:6c:74:6e:73:29:20:7b:0d:0a:20:20:20  efaultns) {.. \n00000aa0  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000ab0  20:24:6d:67:72:2e:41:64:64:4e:61:6d:65:73:70:61   $mgr.AddNamespa\n00000ac0  63:65:28:22:64:65:66:61:75:6c:74:22:2c:24:64:65  ce(\"default\",$de\n00000ad0  66:61:75:6c:74:6e:73:29:0d:0a:20:20:20:20:20:20  faultns)..    \n00000ae0  20:20:20:20:20:20:20:20:20:20:7d:0d:0a:20:20:20            }.. \n00000af0  20:20:20:20:20:20:20:20:20:20:20:20:20:22:22:0d               \"\".\n00000b00  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000b10  20:0d:0a:20:20:20:20:20:20:20:20:20:20:20:20:20   ..           \n00000b20  20:20:20:77:72:69:74:65:2d:68:6f:73:74:20:22:4e     write-host \"N\n00000b30  61:6d:65:73:70:61:63:65:20:4d:61:6e:61:67:65:72  amespace Manager\n00000b40  20:43:6f:6e:74:65:6e:74:73:3a:22:0d:0a:20:20:20   Contents:\".. \n00000b50  20:20:20:20:20:20:20:20:20:20:20:20:20:22:2d:2d               \"--\n00000b60  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000b70  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000b80  2d:2d:2d:2d:22:0d:0a:20:20:20:20:20:20:20:20:20  ----\"..       \n00000b90  20:20:20:20:20:20:20:66:6f:72:65:61:63:68:20:28         foreach (\n00000ba0  24:6e:73:20:69:6e:20:24:6d:67:72:29:20:7b:20:0d  $ns in $mgr) { .\n00000bb0  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000bc0  20:20:20:20:20:69:66:20:28:24:6e:73:29:20:7b:0d       if ($ns) {.\n00000bd0  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000be0  20:20:20:20:20:20:20:20:20:24:6c:6f:6f:6b:65:64           $looked\n00000bf0  75:70:20:3d:20:24:6d:67:72:2e:4c:6f:6f:6b:75:70  up = $mgr.Lookup\n00000c00  4e:61:6d:65:73:70:61:63:65:28:24:6e:73:29:20:0d  Namespace($ns) .\n00000c10  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000c20  20:20:20:20:20:20:20:20:20:77:72:69:74:65:2d:68           write-h\n00000c30  6f:73:74:20:22:24:6e:73:20:3d:20:24:6c:6f:6f:6b  ost \"$ns = $look\n00000c40  65:64:75:70:22:0d:0a:20:20:20:20:20:20:20:20:20  edup\"..       \n00000c50  20:20:20:20:20:20:20:20:20:20:20:7d:0d:0a:20:20             }..\n00000c60  20:20:20:20:20:20:20:20:20:20:20:20:20:20:7d:0d                }.\n00000c70  0a:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20  .             \n00000c80  20:22:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d   \"--------------\n00000c90  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000ca0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000cb0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000cc0  2d:2d:2d:2d:2d:2d:2d:22:0d:0a:09:09:22:53:74:61  -------\"....\"Sta\n00000cd0  72:74:69:6e:67:20:58:4d:4c:20:55:70:64:61:74:65  rting XML Update\n00000ce0  73:22:0d:0a:09:09:22:2d:2d:2d:2d:2d:2d:2d:2d:2d  s\"....\"---------\n00000cf0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000d00  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000d10  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000d20  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:22:0d:0a:0d  ------------\"...\n00000d30  0a:09:09:63:6f:6e:74:69:6e:75:65:0d:0a:09:7d:0d  ...continue...}.\n00000d40  0a:0d:0a:09:69:66:20:28:21:24:78:50:61:74:68:29  ....if (!$xPath)\n00000d50  20:7b:0d:0a:20:20:20:20:20:20:20:20:09:23:54:68   {..        .#Th\n00000d60  65:20:61:72:67:20:2a:73:68:6f:75:6c:64:2a:20:62  e arg should b\n00000d70  65:20:78:70:61:74:68:0d:0a:20:20:20:20:20:20:20  e xpath..     \n00000d80  20:09:24:78:50:61:74:68:3d:24:61:72:67:0d:0a:20   .$xPath=$arg.. \n00000d90  20:20:20:20:20:20:20:09:24:74:61:72:67:65:74:4e         .$targetN\n00000da0  6f:64:65:20:3d:20:24:78:6d:6c:2e:53:65:6c:65:63  ode = $xml.Selec\n00000db0  74:4e:6f:64:65:73:28:24:78:50:61:74:68:2c:24:6d  tNodes($xPath,$m\n00000dc0  67:72:29:0d:0a:20:20:20:20:20:20:20:20:09:69:66  gr)..        .if\n00000dd0  20:28:24:74:61:72:67:65:74:4e:6f:64:65:2e:43:6f   ($targetNode.Co\n00000de0  75:6e:74:20:2d:65:71:20:30:29:20:7b:0d:0a:20:20  unt -eq 0) {..\n00000df0  20:20:20:20:20:20:20:20:20:20:09:09:24:68:6f:73            ..$hos\n00000e00  74:2e:75:69:2e:57:72:69:74:65:45:72:72:6f:72:4c  t.ui.WriteErrorL\n00000e10  69:6e:65:28:22:5b:20:24:78:50:61:74:68:20:5d:20  ine(\"[ $xPath ] \n00000e20  69:73:20:6e:6f:74:20:61:20:76:61:6c:69:64:20:78  is not a valid x\n00000e30  50:61:74:68:22:29:0d:0a:20:20:20:20:20:20:20:20  Path\")..      \n00000e40  20:20:20:20:09:09:65:78:69:74:20:31:0d:0a:20:20      ..exit 1..\n00000e50  20:20:20:20:20:20:09:7d:0d:0a:20:20:20:20:20:20        .}..    \n00000e60  20:20:63:6f:6e:74:69:6e:75:65:0d:0a:20:20:20:20    continue..  \n00000e70  09:7d:0d:0a:20:20:20:20:0d:0a:20:20:20:20:09:23  .}..    ..    .#\n00000e80  20:69:66:20:77:65:20:67:6f:74:20:68:65:72:65:2c   if we got here,\n00000e90  20:73:65:74:74:69:6e:67:20:69:73:20:61:72:67:0d   setting is arg.\n00000ea0  0a:20:20:20:20:09:24:73:65:74:74:69:6e:67:20:3d  .    .$setting =\n00000eb0  20:24:61:72:67:0d:0a:0d:0a:09:22:22:0d:0a:0d:0a   $arg.....\"\"....\n00000ec0  09:22:58:50:61:74:68:3a:22:20:2b:20:24:78:50:61  .\"XPath:\" + $xPa\n00000ed0  74:68:0d:0a:09:22:53:65:74:74:69:6e:67:3a:20:22  th...\"Setting: \"\n00000ee0  20:2b:20:24:73:65:74:74:69:6e:67:0d:0a:0d:0a:09   + $setting.....\n00000ef0  77:72:69:74:65:2d:68:6f:73:74:20:22:55:70:64:61  write-host \"Upda\n00000f00  74:69:6e:67:20:66:69:6c:65:20:5b:24:78:6d:6c:46  ting file [$xmlF\n00000f10  69:6c:65:5d:2c:20:72:65:70:6c:61:63:69:6e:67:20  ile], replacing \n00000f20  65:78:69:73:74:69:6e:67:20:76:61:6c:75:65:20:77  existing value w\n00000f30  69:74:68:20:5b:24:73:65:74:74:69:6e:67:5d:20:61  ith [$setting] a\n00000f40  74:20:5b:24:78:50:61:74:68:5d:22:0d:0a:0d:0a:09  t [$xPath]\".....\n00000f50  66:6f:72:65:61:63:68:20:28:24:74:61:72:67:65:74  foreach ($target\n00000f60  20:69:6e:20:24:74:61:72:67:65:74:4e:6f:64:65:29   in $targetNode)\n00000f70  20:7b:0d:0a:09:09:69:66:20:28:24:74:61:72:67:65   {....if ($targe\n00000f80  74:2e:56:61:6c:75:65:29:20:7b:0d:0a:09:20:20:20  t.Value) {... \n00000f90  09:09:24:74:61:72:67:65:74:2e:56:61:6c:75:65:3d  ..$target.Value=\n00000fa0  24:73:65:74:74:69:6e:67:0d:0a:09:09:7d:0d:0a:09  $setting....}...\n00000fb0  09:65:6c:73:65:69:66:20:28:24:74:61:72:67:65:74  .elseif ($target\n00000fc0  2e:49:6e:6e:65:72:58:4d:4c:29:20:20:7b:0d:0a:09  .InnerXML)  {...\n00000fd0  20:20:20:20:09:09:24:74:61:72:67:65:74:2e:49:6e      ..$target.In\n00000fe0  6e:65:72:58:4d:4c:3d:24:73:65:74:74:69:6e:67:0d  nerXML=$setting.\n00000ff0  0a:09:09:7d:0d:0a:09:09:69:66:28:24:65:72:72:6f  ...}....if($erro\n00001000  72:5b:30:5d:20:2d:6e:65:20:24:65:72:72:6f:72:42  r[0] -ne $errorB\n00001010  61:73:65:29:20:7b:65:78:69:74:20:31:7d:20:20:0d  ase) {exit 1}  .\n00001020  0a:09:7d:0d:0a:0d:0a:0d:0a:20:20:20:20:20:20:20  ..}......     \n00001030  20:22:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d   \"--------------\n00001040  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00001050  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00001060  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00001070  2d:2d:2d:2d:2d:2d:2d:22:0d:0a:09:22:53:61:76:69  -------\"...\"Savi\n00001080  6e:67:20:63:68:61:6e:67:65:73:20:74:6f:20:24:78  ng changes to $x\n00001090  6d:6c:66:69:6c:65:22:0d:0a:09:24:78:6d:6c:2e:73  mlfile\"...$xml.s\n000010a0  61:76:65:28:24:78:6d:6c:46:69:6c:65:29:0d:0a:20  ave($xmlFile).. \n000010b0  20:20:20:20:20:20:20:22:2d:2d:2d:2d:2d:2d:2d:2d         \"--------\n000010c0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n000010d0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n000010e0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n000010f0  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:22:0d:0a  -------------\"..\n00001100  0d:0a:20:20:20:20:09:24:78:70:61:74:68:3d:24:6e  ..    .$xpath=$n\n00001110  75:6c:0d:0a:20:20:20:20:09:24:73:65:74:74:69:6e  ul..    .$settin\n00001120  67:3d:24:6e:75:6c:0d:0a:7d:0d:0a:0d:0a:69:66:28  g=$nul..}....if(\n00001130  24:65:72:72:6f:72:5b:30:5d:20:2d:6e:65:20:24:65  $error[0] -ne $e\n00001140  72:72:6f:72:42:61:73:65:29:20:7b:65:78:69:74:20  rrorBase) {exit \n00001150  31:7d:20:20:0d:0a:0d:0a:65:78:69:74:20:30:0d:0a  1}  ....exit 0..\n00001160  0d:0a:0d:0a:0d:0a                                ......\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 2.5093, network: 0.001s)\n00000000  60:00:00:00:01                                   `....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.008, network: 0.001s)\n00000000  61:00:00:00:01                                   a....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.242, network: 0.23s)\n00000000  62:00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74  b........exit-st\n00000010  61:74:75:73:00:00:00:00:01                       atus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.037, network: 0.002s)\n00000000  61:00:00:00:00                                   a....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.105, network: 0.001s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.5091, network: 0.486s)\n00000000  5b:00:00:00:00:00:00:00:02:00:04:00:00:00:01:00  [...............\n00000010  00                                               .\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.046, network: 0.001s)\n00000000  62:00:00:00:02:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:a9:70:6f:77:65:72:73:68:65:6c:6c:20:43:3a:5c  ..powershell C:\\\n00000020  55:73:65:72:73:5c:41:44:4d:49:4e:49:7e:31:5c:41  Users\\ADMINI~1\\A\n00000030  70:70:44:61:74:61:5c:4c:6f:63:61:6c:5c:54:65:6d  ppData\\Local\\Tem\n00000040  70:5c:58:4d:4c:58:70:61:74:68:52:65:70:6c:61:63  p\\XMLXpathReplac\n00000050  65:2e:70:73:31:20:27:22:63:3a:5c:50:72:6f:67:72  e.ps1 '\"c:\\Progr\n00000060  61:6d:20:46:69:6c:65:73:5c:41:70:61:63:68:65:20  am Files\\Apache \n00000070  53:6f:66:74:77:61:72:65:20:46:6f:75:6e:64:61:74  Software Foundat\n00000080  69:6f:6e:5c:54:6f:6d:63:61:74:36:2e:30:5c:63:6f  ion\\Tomcat6.0\\co\n00000090  6e:66:5c:73:65:72:76:65:72:2e:78:6d:6c:22:27:20  nf\\server.xml\"' \n000000a0  20:2f:53:65:72:76:65:72:5b:31:5d:2f:40:70:6f:72   /Server[1]/@por\n000000b0  74:20:38:30:30:38:20:3c:4e:55:4c                 t 8008 .NUL\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.243, network: 0.121s)\n00000000  63:00:00:00:00                                   c....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 1.2571, network: 1.2321s)\n00000000  5e:00:00:00:00:00:00:00:02:0d:0a                 ^..........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.035, network: 0.003s)\n00000000  5e:00:00:00:00:00:00:00:02:0d:0a                 ^..........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.017, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:1b:4e:61:6d:65:73:70:61  ^........Namespa\n00000010  63:65:20:4d:61:6e:61:67:65:72:20:43:6f:6e:74:65  ce Manager Conte\n00000020  6e:74:73:3a                                      nts:\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.029, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:01:0a                    ^.........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.014, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:28:2d:2d:2d:2d:2d:2d:2d  ^.......(-------\n00000010  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000020  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:0d  ---------------.\n00000030  0a                                               .\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.037, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:2a:78:6d:6c:20:3d:20:68  ^.......*xml = h\n00000010  74:74:70:3a:2f:2f:77:77:77:2e:77:33:2e:6f:72:67  ttp://www.w3.org\n00000020  2f:58:4d:4c:2f:31:39:39:38:2f:6e:61:6d:65:73:70  /XML/1998/namesp\n00000030  61:63:65                                         ace\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.036, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:01:0a                    ^.........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.012, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:25:78:6d:6c:6e:73:20:3d  ^.......%xmlns =\n00000010  20:68:74:74:70:3a:2f:2f:77:77:77:2e:77:33:2e:6f   http://www.w3.o\n00000020  72:67:2f:32:30:30:30:2f:78:6d:6c:6e:73:2f        rg/2000/xmlns/\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.033, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:01:0a                    ^.........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.013, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:47:2d:2d:2d:2d:2d:2d:2d  ^.......G-------\n00000010  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000020  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000030  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000040  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:0d:0a  --------------..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.053, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:16:53:74:61:72:74:69:6e  ^........Startin\n00000010  67:20:58:4d:4c:20:55:70:64:61:74:65:73:0d:0a     g XML Updates..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.024, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:47:2d:2d:2d:2d:2d:2d:2d  ^.......G-------\n00000010  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000020  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000030  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000040  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:0d:0a  --------------..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.05, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:02:0d:0a                 ^..........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.014, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:18:58:50:61:74:68:3a:2f  ^........XPath:/\n00000010  53:65:72:76:65:72:5b:31:5d:2f:40:70:6f:72:74:0d  Server[1]/@port.\n00000020  0a                                               .\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.026, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:0f:53:65:74:74:69:6e:67  ^........Setting\n00000010  3a:20:38:30:30:38:0d:0a                          : 8008..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.022, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:91:55:70:64:61:74:69:6e  ^........Updatin\n00000010  67:20:66:69:6c:65:20:5b:63:3a:5c:50:72:6f:67:72  g file [c:\\Progr\n00000020  61:6d:20:46:69:6c:65:73:5c:41:70:61:63:68:65:20  am Files\\Apache \n00000030  53:6f:66:74:77:61:72:65:20:46:6f:75:6e:64:61:74  Software Foundat\n00000040  69:6f:6e:5c:54:6f:6d:63:61:74:36:2e:30:5c:63:6f  ion\\Tomcat6.0\\co\n00000050  6e:66:5c:73:65:72:76:65:72:2e:78:6d:6c:5d:2c:20  nf\\server.xml], \n00000060  72:65:70:6c:61:63:69:6e:67:20:65:78:69:73:74:69  replacing existi\n00000070  6e:67:20:76:61:6c:75:65:20:77:69:74:68:20:5b:38  ng value with [8\n00000080  30:30:38:5d:20:61:74:20:5b:2f:53:65:72:76:65:72  008] at [/Server\n00000090  5b:31:5d:2f:40:70:6f:72:74:5d                    [1]/@port]\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.092, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:01:0a                    ^.........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.013, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:47:2d:2d:2d:2d:2d:2d:2d  ^.......G-------\n00000010  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000020  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000030  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000040  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:0d:0a  --------------..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.05, network: 0.002s)\n00000000  5e:00:00:00:00:00:00:00:51:53:61:76:69:6e:67:20  ^.......QSaving \n00000010  63:68:61:6e:67:65:73:20:74:6f:20:63:3a:5c:50:72  changes to c:\\Pr\n00000020  6f:67:72:61:6d:20:46:69:6c:65:73:5c:41:70:61:63  ogram Files\\Apac\n00000030  68:65:20:53:6f:66:74:77:61:72:65:20:46:6f:75:6e  he Software Foun\n00000040  64:61:74:69:6f:6e:5c:54:6f:6d:63:61:74:36:2e:30  dation\\Tomcat6.0\n00000050  5c:63:6f:6e:66:5c:73:65:0d:0a                    \\conf\\se..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.058, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:0a:72:76:65:72:2e:78:6d  ^........rver.xm\n00000010  6c:0d:0a                                         l..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.018, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:47:2d:2d:2d:2d:2d:2d:2d  ^.......G-------\n00000010  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000020  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000030  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d  ----------------\n00000040  2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:2d:0d:0a  --------------..\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.052, network: 0.001s)\n00000000  62:00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74  b........exit-st\n00000010  61:74:75:73:00:00:00:00:00                       atus.....\n-> NET_SSH2_MSG_CHANNEL_EOF (since last: 0.021, network: 0.001s)\n00000000  60:00:00:00:02                                   `....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.007, network: 0.001s)\n00000000  61:00:00:00:02                                   a....\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.009, network: 0.001s)\n00000000  60:00:00:00:00                                   `....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.01, network: 0.002s)\n00000000  61:00:00:00:00                                   a....\n-> NET_SSH2_MSG_DISCONNECT (since last: 0.012, network: 0.001s)\n00000000  01:00:00:00:0b:00:00:00:00:00:00:00:00           .............\n```\n. Its good, here is java xml sign, is that mean will support it.\nhttp://weistar.iteye.com/blog/1982979. Thanks, that clears things up.\n. I assume this is also the case at line 2296?\n. ``` php\n$x = getInstance('18446744073709551616');\n$y = unserialize(serialize($x));\nif ( $x->equals($y) && $y->equals($x) )\n    echo \"serialize: if ( \\$x->equals(\\$y) && \\$y->equals(\\$x) ) - PASS\\n\";\nelse\n    echo \"serialize: if ( \\$x->equals(\\$y) && \\$y->equals(\\$x) ) - FAIL\\n\";\nif ( ( (string) $x ) == '18446744073709551616' )\n    echo \"if ( ( (string) \\$x ) == '18446744073709551616' ) - PASS\\n\";\nelse\n    echo \"if ( ( (string) \\$x ) == '18446744073709551616' ) - FAIL\\n\";\n// The following should reproduce the error\nif ( ( (string) $y ) == '18446744073709551616' )\n    echo \"if ( ( (string) \\$y ) == '18446744073709551616' ) - PASS\\n\";\nelse\n    echo \"if ( ( (string) \\$y ) == '18446744073709551616' ) - FAIL\\n\";\n```\n. Windows 8, phpseclib 0.1.0, PHP 5.4.16, 64 bit processor, bcmath unknown\nbcdiv link: http://us3.php.net/manual/en/function.bcdiv.php\n. Sorry, that was incorrect.  The file for BigInteger itself purports that I am using:\n1.0.0RC4\nIt can't be that old, I downloaded it yesterday.\n. My apologies, it was in error in my implementation code.  This works correctly.\n. Hi, \nThanks for the response.\nFirst of all, I want to clarify my question, It's the private key that I want use to sign the plaintext/  Payload (XML) then the public key for decryption.\nthis is what I've done to sign plain text.\n// Include library\ninclude('Crypt/RSA.php');\ninclude('File/X509.php');\n// Create an Instance\n$rsa = new Crypt_RSA();\n$hash = new Crypt_Hash('sha1');\n$x509 = new File_X509();\n// Get Private Key\n$privatekey = file_get_contents('C:\\xampp\\htdocs\\encrypt\\private.txt');\n// Load Private Key\n//$rsa->setPassword('password');\n$rsa->loadKey($privatekey);\n// Message to be signed\n$plaintext = \"1506067962\";\n// Set signing signature \n$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1); \n$hashed  = $hash->hash($plaintext); // Hash plaintext using SHA1\n$encrypted = $rsa->sign($hashed); // Sign Data\n$signature = base64_encode($encrypted); // Encode to base64 the signed Data\nMy question is, do I made a right code? for the instructions to me below.\nSigning Process\n Payload (XML) -> Sign Signature with SHA1withRSA (Private key) -> Payload (XML)\nAnd using the algorithm, Encoding and Key Length details below.\nSignature Algorithm: SHA1RSA\nHash: SHA1\nSignature encoding: Base64\nThanks in advance!\n. @bantu  hi thanks for the reply, yes. so do you think my code above will work for Asymmetric encryption?\nEDIT: Yes, Private key to sign the XML/Plaintext and Public key for signature verification, I created my own script above but I don't know if its correct to sign plaintext. I have my own private & public key signatures which I need to use to sign and verify signatures.\nregards,\n. I found my privatekey has password but even I change the $rsa->setPassword('wrong_password'); it still generating a signature? why is that?\nmy privatekey used to sign plaintext but why it is signing the plaintext even my privatekey has wrong password? what is the right format to load a privatekey and sign the plaintext? I have .pfx, .cer, .pem format of signature to sign a plaintext. please help.\nThanks,\n. And here is my sample private key in my .txt file.\n-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCkaIo3QL92SQYv.....\n-----END PRIVATE KEY-----\nThanks in advance!\n. With the latest 1.0 branch it works OK now.\n. Thanks. My program works ok now.\n. ",
    "mpscholten": "@nadeemehsan9 did you get any error messages?\n. Look at https://github.com/symfony/symfony\nThey have one root repository for all of their components, and several mirrored components-repositories.\nFor example https://github.com/symfony/Validator is just a mirror from https://github.com/symfony/symfony/tree/master/src/Symfony/Component/Validator\n. > Instead of doing stuff like PhpSecLib/SSH2 I think you should do PhpSecLib/Net/SSH2. I think that's more in-line with the PEAR CS that phpseclib is currently using.\nYes it should be PhpSecLib\\Net\\SSH2. But I think this is the case already, isn't it? \n. Yes exceptions will be next\n. I'm :+1: that because if there's more to discuss we should do it. Regarding the tests: I'm working on this.\n. Tests are working now, see https://github.com/mpscholten/phpseclib/tree/constants\n. Thanks for the feedback. Sorry for not using topic branches, how I can undo this? I tried to rebase the branch but that didn't work.\nCan you please link some comments which weren't adressed?\n. I just think they're noise :) If there's a good argument to keep this comments then I would keep them.\n. @bantu I can redo this on top of master, but do you think this is a good idea at all?\n. @bantu see #180 \n. @terrafrost can be closed\n. Looks good to me. :+1: \n. I'm for adding this to the README because this helps possible contributors to get started \n. I think this can merged\n. I think you should squash the commits before merging.\n. Okay :) otherwise this looks like a good cleanup.\n. Awesome idea :+1: \n. Can't we use some tool to auto fix the current issues with the CS?\nFor example line length and indentation can be fixed with some scripts (or a modern IDE)\n. How about Please follow the [PEAR Coding Standard](http://pear.php.net/manual/en/standards.php). ?\n. @bantu so should we change it to\nmarkdown\nWe follow the [PEAR Coding Standard](http://pear.php.net/manual/en/standards.php) (with some exceptions).\n?\n. Seems like this won't be merged in the future. Will close this as well.\n. > I think if you're going to make phpdoc changes you should post a copy of the final result online for people to review. ie. not just the code but the rendered result as well.\nThis pull request shouldn't change anything related with the rendering. I just made every Integer to integer so it's consistent. Before there were cases where someone used lowercased integer and sometimes uppercased Integer.\nOtherwise I removed optionals like in @param optional Integer $t because my ide expected the second paramter to be the type. In this example @param optional Integer $t I would get an error because my ide requires an instance of optional instead the expected Integer.\n\nWhen I've done phpdoc it's mostly been just me guessing at the format and how it'd look in the HTML phpDoc produced. \n\nThat's basically how I've done this ;)\n. As I mentioned in IRC you can use https://github.com/mpscholten/phpseclib-apidocs if you want to generate the phpseclib api doc via https://github.com/apigen/apigen\nMaybe we can use this + a git hook to accomplish that\n. :+1: \n. IMO this is good because this makes the code more readable :+1: \n. I looked on the php5 branch and couldn't find a preg_replace which uses the /e modifier. So can you point to some use of the /e modifier?\n. You're right, I overlooked them sorry. I'm trying to write some tests first to cover the behavior of these methods. After that I try to fix this issue.\n. I think this can be closed because all fixes are merged\n. #205 \n. @bantu fixed. Can you please take a look at the copyright notice and check if everything is right?\n. php4 doesn't have garbage collection. \n[...] This section explains the merits of the new Garbage Collection (also known as GC) mechanism that is part of PHP 5.3. from http://www.php.net/manual/en/features.gc.php\n. @terrafrost I think your code looks good. We should merge your fix instead of mine because then we have the same code in both branches.\nBut before we merge your code we should merge the test to make sure nothing is broken.\n. Closed because #223 \n. ``` php\n    /\n     * Logs data packets\n     \n     * Makes sure that only the last 1MB worth of packets will be logged\n     \n     * @param String $data\n     * @access private\n     */\n    function _append_log($message_number, $message)\n    {\n            // remove the byte identifying the message type from all but the first two messages (ie. the identification strings)\n            if (strlen($message_number) > 2) {\n                $this->_string_shift($message);\n            }\n        switch (NET_SSH2_LOGGING) {\n            // useful for benchmarks\n            case NET_SSH2_LOG_SIMPLE:\n                $this->message_number_log[] = $message_number;\n                break;\n            // the most useful log for SSH2\n            case NET_SSH2_LOG_COMPLEX:\n                $this->message_number_log[] = $message_number;\n                $this->log_size+= strlen($message);\n                $this->message_log[] = $message;\n                while ($this->log_size > NET_SSH2_LOG_MAX_SIZE) {\n                    $this->log_size-= strlen(array_shift($this->message_log));\n                    array_shift($this->message_number_log);\n                }\n                break;\n            // dump the output out realtime; packets may be interspersed with non packets,\n            // passwords won't be filtered out and select other packets may not be correctly\n            // identified\n            case NET_SSH2_LOG_REALTIME:\n                switch (PHP_SAPI) {\n                    case 'cli':\n                        $start = $stop = \"\\r\\n\";\n                        break;\n                    default:\n                        $start = '<pre>';\n                        $stop = '</pre>';\n                }\n                echo $start . $this->_format_log(array($message), array($message_number)) . $stop;\n                @flush();\n                @ob_flush();\n                break;\n            // basically the same thing as NET_SSH2_LOG_REALTIME with the caveat that NET_SSH2_LOG_REALTIME_FILE\n            // needs to be defined and that the resultant log file will be capped out at NET_SSH2_LOG_MAX_SIZE. \n            // the earliest part of the log file is denoted by the first <<< START >>> and is not going to necessarily\n            // at the beginning of the file\n            case NET_SSH2_LOG_REALTIME_FILE:\n                if (!isset($this->realtime_log_file)) {\n                    // PHP doesn't seem to like using constants in fopen()\n                    $filename = NET_SSH2_LOG_REALTIME_FILENAME;\n                    $fp = fopen($filename, 'w');\n                    $this->realtime_log_file = $fp;\n                }\n                if (!is_resource($this->realtime_log_file)) {\n                    break;\n                }\n                $entry = $this->_format_log(array($message), array($message_number));\n                if ($this->realtime_log_wrap) {\n                    $temp = \"<<< START >>>\\r\\n\";\n                    $entry.= $temp;\n                    fseek($this->realtime_log_file, ftell($this->realtime_log_file) - strlen($temp));\n                }\n                $this->realtime_log_size+= strlen($entry);\n                if ($this->realtime_log_size > NET_SSH2_LOG_MAX_SIZE) {\n                    fseek($this->realtime_log_file, 0);\n                    $this->realtime_log_size = strlen($entry);\n                    $this->realtime_log_wrap = true;\n                }\n                fputs($this->realtime_log_file, $entry);\n        }\n}\n\n```\nWe could add 3 different loggers: SimpleLogger, ComplexLogger and RealtimeLogger. This would remove this switch-case-stuff and some constants. We would then add a Net_SSH2::setLogger($logger) where you can set one specific logger.\nNet_SSH2::getLogger() could look like\nphp\nfunction getLogger()\n{\n    if($this->logger === null) { $this->logger = new SimpleLogger(); } return $this->logger; \n}\nSo if no logger is set, we just create a simple logger\nThen the user can extend the logging if he likes to. He just need create his own class and call the setter.\nSee http://refactoring.com/catalog/replaceConditionalWithPolymorphism.html for more informations about what I try to explain :)\n. Thanks for pointing out :+1:\n. @bantu I've rewritten the test to only check for the valid values you posted here. I think the solution I used is far away from perfect, but I'm not sure how to solve it otherwise. Maybe you have an idea for testing this without just copying the logic of the method we test itself.\n. ping @terrafrost is there anything which keeps us from merging?\n. Rebased\n. This is only fixed for Net_SSH2 isn't it? What about Net_SSH1? We need the same code from this https://github.com/terrafrost/phpseclib/commit/6ac922726d71381d696c4e97b21549542e9e331c for Net_SSH1 and also need the tests from #212 \n. @bantu https://github.com/mpscholten/phpseclib/compare/fix-ssh1-php55 I applied terrafrosts patch and cherry-picked my tests from #212\n. > I think is a url encoding issue.\nAlready tried urlencode ? I think this should help with encoding problems\n. Maybe try setting up phpseclib via composer?\n. Thanks for the fast response.\nBefore writing any code it want to be sure that you're ok with this idea. Therefor my code is just pseudo code and not compatible with php4. I will deliver some code in the next few days.\nRegarding PSR-3: It's a standard for logging. Every major php player is supporting it. It was created for proving a common interface between logging tools like Monolog and libraries or frameworks like PhpSecLib.\n\n\nAnd if the logging thing were intended to be ultra-generic for any protocol then maybe a better naming convention would be this?:\n\nYes we should also keep in mind that SSH1 also provides logging. But the _append_log(...) method takes different parameters. I'm not sure if we can abstract this. @terrafrost do you know if _append_log(...) from SSH1 and SSH2 is doing nearly the same, or is their output completly different? I don't know because I only use SSH2.\n\nMerry christmas :christmas_tree:\n. If time permits maybe you can give a look at my \"prototype\" of this rfc here.\nCode coverage is over 90% in the Net_Logger_-Namespace. \n. Well this test just found a bug :) See https://github.com/phpseclib/phpseclib/blob/df8c3723aa0e575a3fccaf91acb79091d46bb2f3/phpseclib/Net/SSH1.php#L204\n. :+1: good work, but I think you can remove the require_once('Crypt/RSA.php'); because of autoloading. \n. Will look at this tomorrow :)\n. I added some docblocks where useful. Also added a Null Logger and made it the default logger of SSH2\n. @terrafrost could you please review again?\n. :+1:\n. It's simpler and therefore more readable. Also you can pass subclasses of Crypt_RSA now\n. @terrafrost any updates on this?\n. Okay, then let's get this merged. :-)\n. @bantu could you somehow explain this a little more?\n. This would be the cleanest way of solving that and also save for future extendability. \n. @bantu We could create a RsaLoginAdapter which will receive a Net_SSH2 object. Then we could move all the code from https://github.com/terrafrost/phpseclib/blob/e90648c7a54f0cb4dfe11ffc725be84235c15d8c/phpseclib/Net/SSH2.php#L2045 function _privatekey_login($username, $privatekey) to the RsaLoginAdapter. But I'm not sure if you want to refactor all the login stuff out of Net_SSH2, would be much work.\nEDIT: but the good side would be that Net_SSH2 could be much smaller then.\n. :+1: good idea. First we need to decide how our namespace should look like, I suggest: Phpseclib\\Net\\SSH2.\nThen we could use https://github.com/ralphschindler/Namespacer to convert this. I've never used this tool myself but maybe this can help us.\n. I think autoloading is done via composer isn't it?\n. > W.r.t. auto-loading... one of the things you can do (currently) with Net/SSH2.php is control which symmetric key algorithms are used by simply deleting the relevant file in the Crypt/ directory. Like if you want to force SSH2 to use AES just delete Crypt/RC4.php and Crypt/Twofish.php, etc, from the Crypt/ directory. I think that's kinda a cool (currently undocumented) feature and I think it'd be cool if the namespace'd version could perserve that and, right now, it doesn't look like it does.\nI don't like this, nobody should ever touch the Crypt-directory just for changing the behavior of SSH.\n. This is a really good idea :+1: and a big step for our code coverage.\nBut maybe we should move this tests into a own test class like \"SSH2FunctionalTest\" and mark this as a phpunit group. So we can have unit tests and functional tests in their own scopes.\nAlso we could add some more test methods like calling $output = $ssh->exec('echo TEST'); $this->assertEquals('TEST', $output);.\n. I think these are problems we should resolve before adding namespacing. Otherwise the pull request will blow up and is too large for review properly. Why not split this pull request in smaller parts?\nRegarding refactoring the Net_SSH2 constructor: This should also be done in the master-branch otherwise we're getting two different api's of the same library.\n. @terrafrost I don't think it's necessary for passing the modes in the constructor of SSH2 because they're just implementation details of the respective class. SSH2 doesn't need to know if BigInteger uses BCMATH or GMP internal because BigIntegers API is still the same. Also it doesn't need to know about the crypt-modes because they're also just an implementation detail of the respective crypt class. But for stuff like logging, were the end user of phpseclib wants to decide how the implementation of logging works, we should add this possiblity.\n. Why not add a SSH2::connect() method. So an example would look like:\nphp\n$ssh = new SSH2('example.com', SSH2::LOG_SIMPLE);\n$ssh->connect();\n$ssh->login('root', 'password');\n$ssh->exec('sudo rm -rf /');\nBut for keeping the simplicity we could add a static facade method like\nphp\n$ssh = SSH2::create('example.com');\n$ssh->login('root', 'pasword');\n$ssh->exec('...');\nThis SSH2::create method would now create a SSH2 object with default settings and automatically tries to connect. So we have simplicity and testability.\n. :+1:\nBy the way: If there's still something we should discuss, why not use our irc room?\n. How about setAdapter?\n. Looks good :-) but some code style needs to be fixed so travis isn't complaining any more.\n. IMO this looks good.\n. Yep :shipit: \n. Is this problem only on travis or does it also occurs if you run the testsuite local on php5.3 ?\n. :+1: for dropping them. \n. Looks fine\n. :+1:\n. Yes, this is just to tell composer that it has to autoload everything prefix with PhpSecLib (like PhpSecLib\\Crypt\\RSA) from the phpseclib directory. So just an autoload-configuration.\n. Yes, I'll remove them\n. Fixed\n. This looks like\n``` php\n<?php\n/\n * Pure-PHP implementation of AES.\n \n * Uses mcrypt, if available/possible, and an internal implementation, otherwise.\n \n...\n```\nnow. I think this is the common way, to have a linebreak after the <?php and before anything else\n. Seems like the github web editor is a little bit buggy\n. But otherwise you may ask if this project has some coding standards\n. What about \"All new code should follow the PEAR CS\"?\n. So \"We follow the PEAR Coding Standard\" ?\n. Look at https://github.com/mpscholten/phpseclib/blob/23105fb829bfb366882f6bf0d6bfef291e94f5d4/phpseclib/Math/BigInteger.php#L3064 The old phpdoc was wrong\n. Thanks for pointing out, I need to review my code a little more ;)\n. You're right but I just copied the code from the constructor.\n. Fixed, copy and paste issues.\n. should be Net_SSH1\n. I think this class should be named Crypt_RSATest\n. Not sure but aren't we using autoloading for our tests?\n. Maybe should be renamed to testLoadKeyWithSpacesInsteadOfNewLines or something like this. We can also add a link to https://github.com/phpseclib/phpseclib/issues/220 so we see that this test tries to prove #220\n. I think it's used there because CRYPT_HASH_MODE needs to  be set. Without the require statement it would result in a \"Constant undefined\"-error. But this shouldn't be the case here. \n\nAm 26.12.2013 um 16:57 schrieb terrafrost notifications@github.com:\nIn tests/Crypt/RSA/Test.php:\n\n@@ -0,0 +1,37 @@\n+<?php\n+/*\n- * @author     Jim Wigginton terrafrost@php.net\n- * @copyright  MMXIII Jim Wigginton\n- * @license    http://www.opensource.org/licenses/mit-license.html  MIT License\n- /\n  +\n  +class Crypt_RSA_Test extends PhpseclibTestCase\n  +{\n-   static public function setUpBeforeClass()\n-   {\n-       require_once('Crypt/RSA.php');\n  I just adapted https://github.com/phpseclib/phpseclib/blob/master/tests/Crypt/Hash/TestCase.php#L12\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry typo :-)\n. In regard of the upcoming autoload I think it would be better to place just a single class in a php file.\n. Please don not prefix method names with underscores to indicate they are private, see Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. (see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#42-properties)\n. \n",
    "KendallHopkins": "IMO most of the .gitignore included here should be in the user's global git ignore (~/.gitignore_global) instead of this repo.\n. @syntaqx By that logic, we should add every possible file name that we don't want so that no extra files are committed. You enforce files not being added where they shouldn't be by not accepting git pulls that have those files.\n. @syntaqx As an example the symphony2 gitignore. It only includes files that are generated by the build processes specific to the repo. Any temp files created by the user should be setup in their personal ~/.gitignore_global.\n. @terrafrost I understand. Would you be opposed to a full auto-loaded system that would do away with the need for require/include?\n. @terrafrost If I were to create a class for autoloading (similar to this). Where would it go and what would it's class name be? Since phpseclib doesn't have a single class namespace (why?) I'm not sure what would be the best class name.\nclass PhpSecLib_Autoload?\nclass Net_Autoload?\nclass Seclib_Autoload?\n. ",
    "skydiablo": "two things:\n1. i do not add a Crypt_Random class, the spl-autoloader just need the \"class_exists\" call to include the needed file\n2. if you plan to rewrite some stuff, just add namespaces to your classes/files, this will improve your lib and make it easyer to handle autoloading...\nso plz add the \"class_exists\" call for the crypt_random function/file so i can use your lib without any changes!\ngreez & thx,\n  sky...\n. maybe it should be easyer, if you just make a \"crypt_random\" class and call the random-function static!\nlike this:\n``` PHP\n/\n * Generate a random value.\n *\n * On 32-bit machines, the largest distance that can exist between $min and $max is 231.\n * If $min and $max are farther apart than that then the last ($max - range) numbers.\n \n * Depending on how this is being used, it may be worth while to write a replacement.  For example,\n * a PHP-based web app that stores its data in an SQL database can collect more entropy than this function\n * can.\n \n * @param optional Integer $min\n * @param optional Integer $max\n * @return Integer\n * @access public\n */\nabstract class Crypt_Random {\nstatic private $seeded;\nstatic private $crypto;\nstatic private $urandom = true;\n\nstatic public function getRandomValue($min = 0, $max = 0x7FFFFFFF) {\n    if ($min == $max) {\n        return $min;\n    }\n\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        // openssl_random_pseudo_bytes() is slow on windows per the following:\n        // http://stackoverflow.com/questions/1940168/openssl-random-pseudo-bytes-is-slow-php\n        if ((PHP_OS & \"\\xDF\\xDF\\xDF\") !== 'WIN') { // PHP_OS & \"\\xDF\\xDF\\xDF\" == strtoupper(substr(PHP_OS, 0, 3)), but a lot faster\n            extract(unpack('Nrandom', openssl_random_pseudo_bytes(4)));\n\n            return abs($random) % ($max - $min) + $min;\n        }\n    }\n\n    // see http://en.wikipedia.org/wiki//dev/random\n    if (static::$urandom === true) {\n        // Warning's will be output unles the error suppression operator is used.  Errors such as\n        // \"open_basedir restriction in effect\", \"Permission denied\", \"No such file or directory\", etc.\n        static::$urandom = @fopen('/dev/urandom', 'rb');\n    }\n    if (!is_bool(static::$urandom)) {\n        extract(unpack('Nrandom', fread(static::$urandom, 4)));\n\n        // say $min = 0 and $max = 3.  if we didn't do abs() then we could have stuff like this:\n        // -4 % 3 + 0 = -1, even though -1 < $min\n        return abs($random) % ($max - $min) + $min;\n    }\n\n    /* Prior to PHP 4.2.0, mt_srand() had to be called before mt_rand() could be called.\n      Prior to PHP 5.2.6, mt_rand()'s automatic seeding was subpar, as elaborated here:\n\n      http://www.suspekt.org/2008/08/17/mt_srand-and-not-so-random-numbers/\n\n      The seeding routine is pretty much ripped from PHP's own internal GENERATE_SEED() macro:\n\n      http://svn.php.net/viewvc/php/php-src/tags/php_5_3_2/ext/standard/php_rand.h?view=markup */\n    if (version_compare(PHP_VERSION, '5.2.5', '<=')) {\n        if (!isset(static::$seeded)) {\n            static::$seeded = true;\n            mt_srand(fmod(time() * getmypid(), 0x7FFFFFFF) ^ fmod(1000000 * lcg_value(), 0x7FFFFFFF));\n        }\n    }\n\n    // The CSPRNG's Yarrow and Fortuna periodically reseed.  This function can be reseeded by hitting F5\n    // in the browser and reloading the page.\n\n    if (!isset(static::$crypto)) {\n        $key = $iv = '';\n        for ($i = 0; $i < 8; $i++) {\n            $key.= pack('n', mt_rand(0, 0xFFFF));\n            $iv .= pack('n', mt_rand(0, 0xFFFF));\n        }\n        switch (true) {\n            case class_exists('Crypt_AES'):\n                static::$crypto = new Crypt_AES(CRYPT_AES_MODE_CTR);\n                break;\n            case class_exists('Crypt_TripleDES'):\n                static::$crypto = new Crypt_TripleDES(CRYPT_DES_MODE_CTR);\n                break;\n            case class_exists('Crypt_DES'):\n                static::$crypto = new Crypt_DES(CRYPT_DES_MODE_CTR);\n                break;\n            case class_exists('Crypt_RC4'):\n                static::$crypto = new Crypt_RC4();\n                break;\n            default:\n                extract(unpack('Nrandom', pack('H*', sha1(mt_rand(0, 0x7FFFFFFF)))));\n                return abs($random) % ($max - $min) + $min;\n        }\n        static::$crypto->setKey($key);\n        static::$crypto->setIV($iv);\n        static::$crypto->enableContinuousBuffer();\n    }\n\n    extract(unpack('Nrandom', static::$crypto->encrypt(\"\\0\\0\\0\\0\")));\n    return abs($random) % ($max - $min) + $min;\n}\n\n}\n```\ncalling:\nPHP\n$foo = Crypt_Random::getRandomValue(0, 255);\ni have found 5 usage for this...\nPS: now, i have read the first time the code ;) so i have a little question:\nthe variable \"$random\" will alwasy read but never set ? whats wrong ?\ngreez & thx,\n  sky...\n. ok... PHP4 comptability (php 6 will released soon :S ?)... so what, than can we just change it like this:\nPHP\nif (!function_exists('crypt_random') && !class_exists('Crypt_Random') && !function_exists('crypt_random')) {\n    require_once('Crypt/Random.php');\n}\nso, this describe to check first \"is function exists\" ? no ? -> \"class exists\" (spl_autoloader !) ? will always no -> check again, is function exists... i think this is the best resulution for this problem...\ngreez & thx,\n  sky...\n. From terrafrost:\n\"As for doing function_exists() after class_exists()... I just don't see why it's necessary. Why does there need to be a call after class_exists()? Why isn't the call before function_exists() sufficient?\"\nthe three steps are:\n1. function_exists: is function exists and all is fine\n2. class_exists: uhhh... functions seems not exists, check for class -> spl_autoloader will call\n3. function_extsts: check again, so the autoloader have mayby import the requested file...\nafter all of this, the fallback default import of the \"crypt_random\" file... so you understand now what i mean ?\n@bantu static isn't usually a bad idea. -> in this case for autoloading it is often the best practise...\n. ",
    "skunkbad": "If you search for \"stdin: is not a tty\", you'll find other people having the problem. It's just a bashrc config issue, but I don't have access to bashrc. As far as I can tell, there's never an instance where this error is helpful, wanted, needed, etc.\n. Here you go:\nhttps://gist.github.com/acca712681922639d6a6\nLet me know if you need something else, and thanks for phpseclib! You are a genius!\n. More information about usage via composer would be nice. I've got a project where I'm using phpseclib, and I installed it manually, everything works fine. just for kicks I tried to get it working via composer and could never get it working.\n. Cool. It's certainly not an emergency, because I've got phpseclib working when installed manually, but I'm curious to know what I was doing wrong when using composer installed phpseclib. Thanks, I'll wait patiently.\n. Is there any easy way to debug what's going on? Seems weird that it works when I install it manually, but not with composer. It's hard to know what the problem is because I don't get any php errors.\n. No. The one I installed manually is 0.3.5. Is that the exact same, or same enough?\n. I went through the code and use die(var_dump()) to debug to find where it is failing.\nFails at line 1670 of Math\\BigInteger because of openssl_public_encrypt(). At this point, $plaintext is string(128) \"\" , and the $RSA_PublicKey looks like:\nstring(328) \"-----BEGIN PUBLIC KEY----- MIHEMA0GCSqGSIb3DQEBAQUAA4GyADCBrgKBgQD//////////8kP2qIhaMI0xMZii4DcHNEpAk4I imfMdAILvqY7E5siUUoIeY40BN3vlRmzzTpDGzArCm3yXxQ3T+E1bW1RwkXkhbV2Yl5+xvRMQumm N+1rC/9ctvQGt+3uOGv7Womfpa6fJBF8Sx/mSShmUezmU4H//////////wIoS8SDN49BHcVgjL9p EKxKLqKabfiXeXQzA5t7XuI9vtkose29sUvFFw== -----END PUBLIC KEY-----\" \nI tried changing versions to 0.3.* and the same thing happens\nI've been searching and reading and it looks like it may be a server bug.\n. I can confirm that this was a server related issue. Apparently the dev server I was working with:\nWindows 7 64-bit w/ XAMPP 1.8.0\ncannot handle the openssl_public_encrypt function. I installed XAMPP 1.8.3 and all is well.\nSorry for taking your time with this issue.\n. OpenSSL seems to work with everything else I've used it for, but apprently it's broken for that particular function on XAMPP 1.8.0, and based on what I've seen online it was broken in previous versions too. Apparently 2 of the DLL files in apache/bin were corrupt or buggy. I tried replacing the files per instructions I found online, but then the server wouldn't start. After installing the new XAMPP version everything was fine. I'm not real excited to use PHP 5.5.1 because the production servers are back at 5.3.X, but it works, and now I know why composer installed phpseclib was giving me issues.\n. ",
    "solefald": "@terrafrost: \nThe stream is not timing out. I get that error immediately. There is no wait of any kind. PHP ssh2 extension is working just fine though. \n. I have tested on RHEL5.8 and 6.3. Same issue. Will test on a Ubuntu 12 box later.\n. I can not send you address and port of the systems I am logging in into, because even if i did, you will not be able to get to them. They are behind a bunch of firewalls, but I am still having this issue and can reproduce it 100%\nMy banners are :\n```\n\nThis is a private computer system containing information that is proprietary  \nand confidential to the owner of the system.  only individuals or entities    \nauthorized by the owner of the system are allowed to access or use the system.\nAny unauthorized access or use of the system or information is strictly       \nprohibited.                                                                     \nAll violators will be prosecuted to the fullest extent permitted by law.        \n\n```\nStill getting the error:\n```\ntime php test.php\nPHP Notice:  Cannot connect to . Banner timeout in /path/to/phpseclib/Net/SSH2.php on line 801\nNotice: Cannot connect to . Banner timeout in /path/to/phpseclib/Net/SSH2.php on line 801\nLogin Failed\nreal    0m0.123s\nuser    0m0.050s\nsys 0m0.020s\n```\nAs you can see it fails immediately.... or after 0.123 seconds\n. Oh, btw,\nReplacing this:\nif (!@stream_select($read, $write, $except, $timeout - $elapsed)) {\nWith this:\nif (!stream_select($read, $write, $except, 10)) {\nhas absolutely no effect. I immediately get the same error message\n. This is what I get:\n```\nphp test.php\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2515\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2515\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2517\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2517\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1838\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1838\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1847\nNotice: Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1847\nPHP Notice:  Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1943\nNotice: Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1943\nPHP Notice:  Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2336\nNotice: Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2336\n```\nHere is my php info\n```\nphp -v\nPHP 5.1.6 (cli) (built: Jun 22 2012 06:20:25) \nCopyright (c) 1997-2006 The PHP Group\nZend Engine v2.1.0, Copyright (c) 1998-2006 Zend Technologies\n```\n. I already have it defined:\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOGGING_COMPLEX);\n$ssh->getLog();\nHere is my test script\n```\n<?\nset_include_path(dirname(FILE) . '/lib/phpseclib/');\ninclude('Net/SSH2.php');\ninclude('Crypt/RSA.php');\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOGGING_COMPLEX);\n$key = new Crypt_RSA();\n$key->loadKey(file_get_contents('/root/.ssh/id_rsa'));\n$ssh = new Net_SSH2('ssh.server.example.com');\n$ssh->setTimeout(5);\nif (!$ssh->login('root', $key)) {\n    exit('Login Failed');\n}\n$ssh->write(\"ls -la\\n\");\n$ssh->getLog();\n?>\n```\nThe output of the script is the same\n```\nphp test.php\nPHP Notice:  Use of undefined constant NET_SSH2_LOGGING_COMPLEX - assumed 'NET_SSH2_LOGGING_COMPLEX' in /home/pruchai-admin/sysinfo/test.php on line 14\nNotice: Use of undefined constant NET_SSH2_LOGGING_COMPLEX - assumed 'NET_SSH2_LOGGING_COMPLEX' in /home/pruchai-admin/sysinfo/test.php on line 14\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2515\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2515\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2517\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2517\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1838\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1838\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nNotice: Use of undefined constant NET_SSH2_LOG_REALTIME_FILE - assumed 'NET_SSH2_LOG_REALTIME_FILE' in /path/to/phpseclib/Net/SSH2.php on line 2422\nPHP Notice:  Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1847\nNotice: Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1847\nPHP Notice:  Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1943\nNotice: Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1943\nPHP Notice:  Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2336\nNotice: Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2336\n```\nAlso, is there any way to get rid of those \"Notice: Use of undefined constant\"? I guess I can do it through php.ini, but I'd rather not change it on the system level....\n. Ok, updated to the latest version. Less notices, but still some are showing up. Adding echo in front of $ssh->getLog(); has no effect.\n```\nphp test.php\nPHP Notice:  Use of undefined constant NET_SSH2_LOGGING_COMPLEX - assumed 'NET_SSH2_LOGGING_COMPLEX' in /path/to/test.php on line 14\nNotice: Use of undefined constant NET_SSH2_LOGGING_COMPLEX - assumed 'NET_SSH2_LOGGING_COMPLEX' in /path/to/test.php on line 14\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2519\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2519\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2521\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 2521\nPHP Notice:  Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1842\nNotice: Undefined offset:  1 in /path/to/phpseclib/Net/SSH2.php on line 1842\nPHP Notice:  Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1851\nNotice: Connection closed by server in /path/to/phpseclib/Net/SSH2.php on line 1851\nPHP Notice:  Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1947\nNotice: Unable to initiate an interactive shell session in /path/to/phpseclib/Net/SSH2.php on line 1947\nPHP Notice:  Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2340\nNotice: Connection closed prematurely in /path/to/phpseclib/Net/SSH2.php on line 2340\n```\n. Ah! Much better\n```\nphp test.php\nPHP Notice:  Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 2519\nNotice: Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 2519\nPHP Notice:  Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 2521\nNotice: Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 2521\nPHP Notice:  Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 1842\nNotice: Undefined offset:  1 in /path/to/lib/phpseclib/Net/SSH2.php on line 1842\nPHP Notice:  Connection closed by server in /path/to/lib/phpseclib/Net/SSH2.php on line 1851\nNotice: Connection closed by server in /path/to/lib/phpseclib/Net/SSH2.php on line 1851\nPHP Notice:  Unable to initiate an interactive shell session in /path/to/lib/phpseclib/Net/SSH2.php on line 1947\nNotice: Unable to initiate an interactive shell session in /path/to/lib/phpseclib/Net/SSH2.php on line 1947\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  34:2e:33:0a                                      4.3.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:67:6d:70:29:0d:0a           b_0.3 (gmp)..\n<- NET_SSH2_MSG_KEXINIT (0.0018s)\n00000000  84:f2:86:72:1a:e3:ef:8d:4e:7f:0c:9e:77:1a:46:78  ...r....N...w.Fx\n00000010  00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...Ydiffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68  llman-group14-sh\n00000050  61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61  a1,diffie-hellma\n00000060  6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00:00  n-group1-sha1...\n00000070  0f:73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73  .ssh-rsa,ssh-dss\n00000080  00:00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61  ....aes128-ctr,a\n00000090  65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36  es192-ctr,aes256\n000000a0  2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c  -ctr,arcfour256,\n000000b0  61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31:32  arcfour128,aes12\n000000c0  38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62  8-cbc,3des-cbc,b\n000000d0  6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73:74  lowfish-cbc,cast\n000000e0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000f0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72  bc,aes256-cbc,ar\n00000100  63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63  cfour,rijndael-c\n00000110  62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73  bc@lysator.liu.s\n00000120  65:00:00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c  e....aes128-ctr,\n00000130  61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35  aes192-ctr,aes25\n00000140  36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35:36  6-ctr,arcfour256\n00000150  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n00000160  32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c  28-cbc,3des-cbc,\n00000170  62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73  blowfish-cbc,cas\n00000180  74:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d  t128-cbc,aes192-\n00000190  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61  cbc,aes256-cbc,a\n000001a0  72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d  rcfour,rijndael-\n000001b0  63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e  cbc@lysator.liu.\n000001c0  73:65:00:00:00:55:68:6d:61:63:2d:6d:64:35:2c:68  se...Uhmac-md5,h\n000001d0  6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:72:69  mac-sha1,hmac-ri\n000001e0  70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70  pemd160,hmac-rip\n000001f0  65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63  emd160@openssh.c\n00000200  6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c  om,hmac-sha1-96,\n00000210  68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:55:68  hmac-md5-96...Uh\n00000220  6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68:61  mac-md5,hmac-sha\n00000230  31:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  1,hmac-ripemd160\n00000240  2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30:40  ,hmac-ripemd160@\n00000250  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000260  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64  -sha1-96,hmac-md\n00000270  35:2d:39:36:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69  5-96....none,zli\n00000280  62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00  b@openssh.com...\n00000290  15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73  .none,zlib@opens\n000002a0  73:68:2e:63:6f:6d:00:00:00:00:00:00:00:00:00:00  sh.com..........\n000002b0  00:00:00                                         ...\n-> NET_SSH2_MSG_KEXINIT (0s)\n00000000  bb:7e:3f:74:b9:53:64:d5:45:9d:ca:65:29:30:a0:a9  .~?t.Sd.E..e)0..\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  76:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  varcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c:61  our128,arcfour,a\n00000080  65:73:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32  es128-cbc,aes192\n00000090  2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c  -cbc,aes256-cbc,\n000000a0  61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39  aes128-ctr,aes19\n000000b0  32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72  2-ctr,aes256-ctr\n000000c0  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n000000d0  62:63:2c:6e:6f:6e:65:00:00:00:76:61:72:63:66:6f  bc,none...varcfo\n000000e0  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n000000f0  2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38:2d  ,arcfour,aes128-\n00000100  63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61  cbc,aes192-cbc,a\n00000110  65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:32:38  es256-cbc,aes128\n00000120  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n00000130  61:65:73:32:35:36:2d:63:74:72:2c:33:64:65:73:2d  aes256-ctr,3des-\n00000140  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non\n00000150  65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d:39  e...0hmac-sha1-9\n00000160  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n00000170  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n00000180  2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73:68  ,none...0hmac-sh\n00000190  61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c  a1-96,hmac-sha1,\n000001a0  68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63  hmac-md5-96,hmac\n000001b0  2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e  -md5,none....non\n000001c0  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n000001d0  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (0s)\n00000000  00:00:00:81:00:b0:c4:2f:e6:60:8a:ab:a5:5a:fa:6e  ......./....Z.n\n00000010  03:29:61:19:a2:22:37:cc:aa:f0:90:d4:f7:c2:20:db  .)a..\"7....... .\n00000020  3e:b1:66:39:19:f0:7f:c2:46:ea:5f:cb:db:de:13:60  >.f9....F._....\n00000030  c5:84:c6:22:b9:26:1a:37:58:fc:14:3d:76:26:31:e5  ...\".&.7X..=v&1.\n00000040  4d:54:a0:27:11:2c:69:0e:7e:b9:a6:8b:6b:fa:c3:2d  MT.'.,i.~...k..-\n00000050  4a:32:1e:7d:78:6a:2a:0b:ec:29:43:1f:4b:aa:1d:7d  J2.}xj*..)C.K..}\n00000060  1e:86:ea:00:41:39:5a:3b:55:99:0a:3b:a5:ad:c7:3d  ....A9Z;U..;...=\n00000070  ee:2f:22:d3:90:98:1b:c1:65:22:07:a3:f8:aa:f3:c3  ./\".....e\"......\n00000080  86:27:18:d6:f3                                   .'...\n<- NET_SSH2_MSG_KEXDH_REPLY (0.0467s)\n00000000  00:00:01:15:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:01:01:00:a9:11:0d:ae:b9:ca:18  ...#............\n00000020  02:d5:db:d5:9a:4a:63:20:51:ef:d2:a8:89:f8:8c:b7  .....Jc Q.......\n00000030  40:6f:e8:4b:f0:3e:c8:77:81:52:9f:b6:48:43:b7:99  @o.K.>.w.R..HC..\n00000040  f9:c2:32:2c:b6:5e:02:48:71:61:6b:7c:21:c3:b5:b7  ..2,.^.Hqak|!...\n00000050  d9:74:fe:70:0e:c2:a2:3c:29:d1:58:89:48:88:48:b7  .t.p....).X.H.H.\n00000060  a7:88:83:21:b2:94:72:5a:ea:ac:79:43:1e:ea:b2:d9  ...!..rZ..yC....\n00000070  fd:79:f8:57:3c:44:de:90:00:1b:e7:88:61:40:4e:65  .y.W.D......a@Ne\n00000080  0d:65:cb:a0:08:3f:06:46:80:83:bd:e0:4d:fb:55:15  .e...?.F....M.U.\n00000090  8d:eb:b1:a4:96:c4:70:c6:de:62:ca:48:c1:38:72:18  ......p..b.H.8r.\n000000a0  57:99:26:6e:26:f4:f5:87:30:ce:25:2b:a2:f3:6e:df  W.&n&...0.%+..n.\n000000b0  9e:4f:ad:0f:6a:2f:96:a1:41:5a:a8:66:2e:c8:1b:c2  .O..j/..AZ.f....\n000000c0  31:e2:16:cf:ab:ab:c3:31:ca:dd:fc:49:e0:39:56:9b  1......1...I.9V.\n000000d0  b5:81:8b:2d:3f:d3:f9:4a:50:5b:f8:49:a3:1e:1a:1e  ...-?..JP[.I....\n000000e0  ad:93:26:ca:4b:a2:fa:0c:dc:28:10:08:f6:16:5a:e8  ..&.K....(....Z.\n000000f0  c1:a0:87:8f:1e:a5:46:e1:ae:81:cf:bd:1e:b3:7d:0d  ......F.......}.\n00000100  b7:99:e5:70:8f:8b:fe:16:c3:93:24:a2:dd:0a:eb:49  ...p......$....I\n00000110  b4:a4:26:e8:72:42:97:86:bd:00:00:00:81:00:af:b6  ..&.rB..........\n00000120  67:9d:e3:ee:f4:4f:3b:61:d0:94:8b:37:dc:b1:1f:d9  g....O;a...7....\n00000130  81:a1:4e:aa:ca:ff:be:2c:92:ac:73:77:02:56:4d:79  ..N....,..sw.VMy\n00000140  84:ec:df:2e:35:db:d1:97:dc:89:98:5e:72:03:e2:b2  ....5......^r...\n00000150  2a:65:25:46:9a:40:ef:51:71:a6:0c:f9:5c:24:f4:15  e%F.@.Qq...\\$..\n00000160  cf:d9:d7:0c:d1:4f:e3:09:61:57:2a:8f:5a:24:0e:c8  .....O..aW.Z$..\n00000170  2a:b4:a8:4c:ab:b6:e5:49:6d:f9:56:64:18:0f:ad:ca  ..L...Im.Vd....\n00000180  6c:c1:9a:05:66:3e:a8:e8:fe:0b:46:c4:b0:11:fa:fd  l...f>....F.....\n00000190  34:33:1f:3b:db:85:21:63:2b:29:47:87:81:f1:00:00  43.;..!c+)G.....\n000001a0  01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00:01  ......ssh-rsa...\n000001b0  00:6d:71:fb:7d:f3:e0:2b:c5:5a:c9:0b:fe:b1:92:d4  .mq.}..+.Z......\n000001c0  75:0c:57:c4:53:a7:73:e2:56:12:74:a7:23:8d:1a:0a  u.W.S.s.V.t.#...\n000001d0  7f:ea:47:09:d6:64:de:12:fe:9e:a9:b0:c4:ce:c9:ee  ..G..d..........\n000001e0  95:ba:30:ac:12:5b:3c:61:c4:a4:d8:17:aa:12:d6:a4  ..0..[.a........\n000001f0  8f:ac:a5:8a:13:54:db:60:b8:dc:5c:99:99:f7:a7:6b  .....T.`......k\n00000200  61:fd:c5:73:0e:98:67:71:08:2d:b6:14:e2:61:5e:e5  a..s..gq.-...a^.\n00000210  04:a4:0a:34:b2:d0:ba:b7:79:d7:a1:d8:6d:a6:58:88  ...4....y...m.X.\n00000220  38:25:cd:c5:30:61:20:2f:eb:4a:5c:41:37:7e:47:19  8%..0a /.J\\A7~G.\n00000230  4a:92:c0:2a:50:91:79:66:9f:e1:b5:99:33:12:f3:1c  J..P.yf....3...\n00000240  33:0a:94:ed:0e:2d:3b:d6:11:8e:2a:81:37:9d:a2:19  3....-;....7...\n00000250  24:96:06:97:d4:c9:f9:0f:37:a4:f3:18:b3:73:e4:09  $.......7....s..\n00000260  9e:0c:5a:ba:88:1e:d1:69:14:47:14:62:59:c7:7b:a9  ..Z....i.G.bY.{.\n00000270  9a:53:e0:40:32:5f:86:5e:c9:bd:0c:b7:33:c7:28:9c  .S.@2_.^....3.(.\n00000280  b4:97:bc:45:a3:06:2a:ca:0b:6e:15:2e:3a:3e:4b:70  ...E....n..:>Kp\n00000290  95:2e:cb:38:a4:3c:ae:c9:4b:29:c8:b7:ef:37:a7:5a  ...8....K)...7.Z\n000002a0  65:b2:e0:20:1d:2c:a0:59:0e:48:e2:64:c3:39:9b:e7  e.. .,.Y.H.d.9..\n000002b0  85                                               .\n-> NET_SSH2_MSG_NEWKEYS (0s)\n<- NET_SSH2_MSG_NEWKEYS (0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (0.0391s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (0s)\n00000000  00:00:00:04:72:6f:6f:74:00:00:00:0e:73:73:68:2d  ....root....ssh-\n00000010  63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:09:70:75  connection....pu\n00000020  62:6c:69:63:6b:65:79:00:00:00:00:07:73:73:68:2d  blickey.....ssh-\n00000030  72:73:61:00:00:01:15:00:00:00:07:73:73:68:2d:72  rsa........ssh-r\n00000040  73:61:00:00:00:01:23:00:00:01:01:00:da:1c:c8:fd  sa....#.........\n00000050  75:e2:03:c4:2e:25:b5:7f:d6:59:b5:f3:66:da:e7:21  u....%...Y..f..!\n00000060  b0:24:2c:06:54:4b:28:ea:0a:b4:95:0d:af:42:f6:d2  .$,.TK(......B..\n00000070  18:a0:ac:29:be:6f:be:d0:2e:2b:a3:4d:85:94:88:f6  ...).o...+.M....\n00000080  cf:52:a4:15:8b:52:81:b3:be:da:4b:ae:fb:43:b2:eb  .R...R....K..C..\n00000090  1b:b5:0e:ef:4d:b6:f4:54:37:eb:3b:ae:48:0b:37:4f  ....M..T7.;.H.7O\n000000a0  bf:27:07:31:10:b6:be:18:47:85:fe:80:cf:03:33:84  .'.1....G.....3.\n000000b0  e3:79:15:11:21:f5:ca:f4:9b:bd:5a:31:df:d3:c4:3e  .y..!.....Z1...>\n000000c0  bd:2b:43:8d:0e:bc:d2:7c:d2:b1:a6:97:df:64:a2:15  .+C....|.....d..\n000000d0  03:f8:9a:e1:b5:6e:e5:3b:cf:da:25:8a:63:da:10:f5  .....n.;..%.c...\n000000e0  61:bf:71:0d:eb:2d:fa:fa:98:44:28:4f:ea:1a:b7:55  a.q..-...D(O...U\n000000f0  4e:a8:be:2a:fa:d3:7e:1e:a0:57:dd:71:7f:c2:ff:b7  N..*..~..W.q....\n00000100  5c:d3:c1:3e:08:0a:c4:43:88:48:dd:d9:b9:e4:bf:f9  ..>...C.H......\n00000110  8e:df:14:f0:f9:73:57:17:2b:26:12:02:36:c4:bc:e2  .....sW.+&..6...\n00000120  0b:39:3e:9d:3c:a7:07:19:d5:80:bb:9f:31:55:97:8a  .9>.........1U..\n00000130  15:ab:56:40:86:ce:b9:a8:60:5e:d5:39:35:0d:e6:a2  ..V@....`^.95...\n00000140  fd:43:14:6d:49:c8:a9:ba:39:be:79:0f              .C.mI...9.y.\n<- NET_SSH2_MSG_USERAUTH_PK_OK (60) (0.015s)\n00000000  00:00:00:07:73:73:68:2d:72:73:61:00:00:01:15:00  ....ssh-rsa.....\n00000010  00:00:07:73:73:68:2d:72:73:61:00:00:00:01:23:00  ...ssh-rsa....#.\n00000020  00:01:01:00:da:1c:c8:fd:75:e2:03:c4:2e:25:b5:7f  ........u....%..\n00000030  d6:59:b5:f3:66:da:e7:21:b0:24:2c:06:54:4b:28:ea  .Y..f..!.$,.TK(.\n00000040  0a:b4:95:0d:af:42:f6:d2:18:a0:ac:29:be:6f:be:d0  .....B.....).o..\n00000050  2e:2b:a3:4d:85:94:88:f6:cf:52:a4:15:8b:52:81:b3  .+.M.....R...R..\n00000060  be:da:4b:ae:fb:43:b2:eb:1b:b5:0e:ef:4d:b6:f4:54  ..K..C......M..T\n00000070  37:eb:3b:ae:48:0b:37:4f:bf:27:07:31:10:b6:be:18  7.;.H.7O.'.1....\n00000080  47:85:fe:80:cf:03:33:84:e3:79:15:11:21:f5:ca:f4  G.....3..y..!...\n00000090  9b:bd:5a:31:df:d3:c4:3e:bd:2b:43:8d:0e:bc:d2:7c  ..Z1...>.+C....|\n000000a0  d2:b1:a6:97:df:64:a2:15:03:f8:9a:e1:b5:6e:e5:3b  .....d.......n.;\n000000b0  cf:da:25:8a:63:da:10:f5:61:bf:71:0d:eb:2d:fa:fa  ..%.c...a.q..-..\n000000c0  98:44:28:4f:ea:1a:b7:55:4e:a8:be:2a:fa:d3:7e:1e  .D(O...UN..*..~.\n000000d0  a0:57:dd:71:7f:c2:ff:b7:5c:d3:c1:3e:08:0a:c4:43  .W.q......>...C\n000000e0  88:48:dd:d9:b9:e4:bf:f9:8e:df:14:f0:f9:73:57:17  .H...........sW.\n000000f0  2b:26:12:02:36:c4:bc:e2:0b:39:3e:9d:3c:a7:07:19  +&..6....9>.....\n00000100  d5:80:bb:9f:31:55:97:8a:15:ab:56:40:86:ce:b9:a8  ....1U....V@....\n00000110  60:5e:d5:39:35:0d:e6:a2:fd:43:14:6d:49:c8:a9:ba  `^.95....C.mI...\n00000120  39:be:79:0f                                      9.y.\n-> NET_SSH2_MSG_USERAUTH_REQUEST (0s)\n00000000  00:00:00:04:72:6f:6f:74:00:00:00:0e:73:73:68:2d  ....root....ssh-\n00000010  63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:09:70:75  connection....pu\n00000020  62:6c:69:63:6b:65:79:01:00:00:00:07:73:73:68:2d  blickey.....ssh-\n00000030  72:73:61:00:00:01:15:00:00:00:07:73:73:68:2d:72  rsa........ssh-r\n00000040  73:61:00:00:00:01:23:00:00:01:01:00:da:1c:c8:fd  sa....#.........\n00000050  75:e2:03:c4:2e:25:b5:7f:d6:59:b5:f3:66:da:e7:21  u....%...Y..f..!\n00000060  b0:24:2c:06:54:4b:28:ea:0a:b4:95:0d:af:42:f6:d2  .$,.TK(......B..\n00000070  18:a0:ac:29:be:6f:be:d0:2e:2b:a3:4d:85:94:88:f6  ...).o...+.M....\n00000080  cf:52:a4:15:8b:52:81:b3:be:da:4b:ae:fb:43:b2:eb  .R...R....K..C..\n00000090  1b:b5:0e:ef:4d:b6:f4:54:37:eb:3b:ae:48:0b:37:4f  ....M..T7.;.H.7O\n000000a0  bf:27:07:31:10:b6:be:18:47:85:fe:80:cf:03:33:84  .'.1....G.....3.\n000000b0  e3:79:15:11:21:f5:ca:f4:9b:bd:5a:31:df:d3:c4:3e  .y..!.....Z1...>\n000000c0  bd:2b:43:8d:0e:bc:d2:7c:d2:b1:a6:97:df:64:a2:15  .+C....|.....d..\n000000d0  03:f8:9a:e1:b5:6e:e5:3b:cf:da:25:8a:63:da:10:f5  .....n.;..%.c...\n000000e0  61:bf:71:0d:eb:2d:fa:fa:98:44:28:4f:ea:1a:b7:55  a.q..-...D(O...U\n000000f0  4e:a8:be:2a:fa:d3:7e:1e:a0:57:dd:71:7f:c2:ff:b7  N....~..W.q....\n00000100  5c:d3:c1:3e:08:0a:c4:43:88:48:dd:d9:b9:e4:bf:f9  ..>...C.H......\n00000110  8e:df:14:f0:f9:73:57:17:2b:26:12:02:36:c4:bc:e2  .....sW.+&..6...\n00000120  0b:39:3e:9d:3c:a7:07:19:d5:80:bb:9f:31:55:97:8a  .9>.........1U..\n00000130  15:ab:56:40:86:ce:b9:a8:60:5e:d5:39:35:0d:e6:a2  ..V@....`^.95...\n00000140  fd:43:14:6d:49:c8:a9:ba:39:be:79:0f:00:00:01:0f  .C.mI...9.y.....\n00000150  00:00:00:07:73:73:68:2d:72:73:61:00:00:01:00:cd  ....ssh-rsa.....\n00000160  48:4b:d1:50:e1:5e:ed:81:af:05:e0:96:98:26:c9:c1  HK.P.^.......&..\n00000170  74:1e:db:a9:ab:61:3f:8f:10:98:2e:3f:ad:19:e9:53  t....a?....?...S\n00000180  a7:26:ac:79:db:24:d3:80:f1:85:3c:5d:c5:20:0b:77  .&.y.$.....]. .w\n00000190  43:d6:18:e1:c2:17:ed:c4:ff:dd:f2:24:09:3d:dd:6f  C..........$.=.o\n000001a0  8e:44:a7:4c:99:43:0b:bf:a2:cd:df:a5:b6:7e:b9:c8  .D.L.C.......~..\n000001b0  ef:0e:45:a6:30:71:56:13:33:c5:65:ea:de:63:98:cf  ..E.0qV.3.e..c..\n000001c0  1f:94:11:cf:3d:c3:79:37:05:7c:c8:9c:b9:53:5c:5b  ....=.y7.|...S[\n000001d0  0e:cb:b3:7a:6b:ec:1b:ea:39:cd:8e:22:41:d5:8c:86  ...zk...9..\"A...\n000001e0  44:7d:01:0b:13:08:0f:d0:be:1e:12:58:09:c3:cc:91  D}.........X....\n000001f0  e1:8e:35:7e:9b:27:ab:bc:e2:74:63:82:7d:94:de:0c  ..5~.'...tc.}...\n00000200  9e:ca:a6:69:c0:1e:21:33:a5:4a:31:94:e1:ed:fc:54  ...i..!3.J1....T\n00000210  65:7c:ca:c0:b5:a7:32:72:c7:fa:50:66:9b:7a:3c:b4  e|....2r..Pf.z..\n00000220  90:0e:61:0a:f6:49:74:e6:0e:b6:f3:35:71:8d:ef:b5  ..a..It....5q...\n00000230  e2:6b:2a:80:d3:12:b0:2f:1a:b6:a6:bc:9b:5d:5b:a2  .k..../.....][.\n00000240  ed:fc:e3:1a:e8:8f:e4:29:5f:89:3e:f6:fb:21:ff:c6  .......)_.>..!..\n00000250  74:3f:38:8b:4b:5f:7a:c7:2a:2d:53:b4:1d:46:be     t?8.K_z.*-S..F.\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (0.0042s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:01:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n-> NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (0s)\n00000000  00:00:00:01:00:00:00:00:00:00:00:00:00:00:80:00  ................\n<- NET_SSH2_MSG_CHANNEL_CLOSE (0.0396s)\n00000000  00:00:00:01                                      ....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  00:00:00:00:00:00:00:07:70:74:79:2d:72:65:71:01  ........pty-req.\n00000010  00:00:00:05:76:74:31:30:30:00:00:00:50:00:00:00  ....vt100...P...\n00000020  18:00:00:00:00:00:00:00:00:00:00:00:01:00        ..............\n<- NET_SSH2_MSG_DISCONNECT (0.0008s)\n00000000  00:00:00:02:00:00:00:2b:73:65:72:76:65:72:5f:69  .......+server_i\n00000010  6e:70:75:74:5f:63:68:61:6e:6e:65:6c:5f:72:65:71  nput_channel_req\n00000020  3a:20:75:6e:6b:6e:6f:77:6e:20:63:68:61:6e:6e:65  : unknown channe\n00000030  6c:20:30:00:00:00:00                             l 0....\nPHP Notice:  Connection closed prematurely in /path/to/lib/phpseclib/Net/SSH2.php on line 2340\nNotice: Connection closed prematurely in /path/to/lib/phpseclib/Net/SSH2.php on line 2340\n```\n. Yay! It works! Thank you so much.\nWill these \"work arounds\" make it into the official source?\n. No worries. Thanks again!\n. ",
    "kea": "Thanks for your interest and hints. I'll do all your suggestion ASAP. At the moment I'll make it PHP4 compatible but probably I'll make a branch for 5.3.\n. Moving login code from method loginAgent to login is quite difficult. If you take a look to my simplified version of \"loginAgent\" you should see that you have to cycle through all the keys retrieved from the ssh-agent and try to login.\nI found 3 ways:\n1. use loginAgent instead of login for ssh-agent login ;)\n2. remane login method to _login and loginAgent to _loginAgent, create a new login that take care of the second parameter (if it is an instance of Net_SSH2_Agent or not) and call the correct _login* method;\n3. remove the loginAgent method and put it as example for the login with the ssh-agent.\nPlease let me know of your suggestions.\nThanks\n. @terrafrost Perfect! It is now cleaner than my solution.\nThe constant you added works well but, personally, I do not really like the constant.\nTo avoid the God function I think that we could extract the common part in a separate class and use a Factory instead passing optional parameters. But we can do it later.\nDo you have any test (functional or unit) for the SS2 class? Bash script, php script, phpUnit class or something else?\n. Should I close this pull request? If the code is useful for you I could open new pull request with the merge of my previous commit and fix the whitespace issue.\n. I've done an initial porting of phpseclib to php5.3. If you'd like, take a look to my \"5.3\" branch. I've already done:\n- namespace (first step done, added phpseclib namespase es. phpseclib\\Crypt_AES, next step could be phpseclib\\Crypt\\AES)\n- autolading\n- renaming constructors\n- merged with the current master\n- ssh agent (not in phpseclib master yet. @terrafrost my pull request is waiting for you :P )\n- initial work on porting \"var\" to proper \"public\", \"private\", \"protected\"\n- initial work on removing conditional php-pre-5-code\nIf you want, I'd like to help you with maintaining phpseclib's PHP5.3+\n. ",
    "travisbot": "This pull request passes (merged 95ee372f into c2850cd3).\n. This pull request passes (merged 69484d83 into c2850cd3).\n. This pull request fails (merged 0d0dfc62 into c2850cd3).\n. This pull request fails (merged ba614dff into c2850cd3).\n. This pull request fails (merged 418e3526 into c2850cd3).\n. This pull request passes (merged 1f901700 into c2850cd3).\n. This pull request fails (merged 66e8b28e into 6c168188).\n. This pull request fails (merged 7353c04d into 6c168188).\n. This pull request fails (merged f6317853 into 6c168188).\n. ",
    "faceleg": "Hi @terrafrost,\nI agree with you, I've updated my pull request with your code.\nI didn't know it existed either, until I began testing my code with a client's partner's testing sFTP server (their testing server is v2, production is v3, sigh).\nYes PHP pops out with some notifications, to work around this I have wrapped my phpseclib calls in a custom error handler that prevents PHP from halting & outputs a nice message for the user. Not ideal, I know. \nI did want to get in there and update phpseclib to work without these warnings, but the deadline for the current portion of this project was fast approaching, and with their production server being v3, I couldn't put too much time into this issue on their test server.\nAlthough I'd love to, I can't give you access to the server, and I can't login with anything but an sFTP account.\nsftp -v ...:...@... yeilds:\n...\ndebug1: Remote protocol version 2.0, remote software version 1.71 sshlib: WinSSHD 4.02\ndebug1: no match: 1.71 sshlib: WinSSHD 4.02\ndebug1: Enabling compatibility mode for protocol 2.0\n...\nTyping version when logged in with said account yields only:\nSFTP protocol version 2\nSorry I can't be more help here!\n. If you know of a linux program that can provide FTP v2, let me know - I have a private server that I could install it on & give you access to.\n. ",
    "monnerat": "For CSRs: I agree. It's intended to communicate requested certificate content. As I wrote above, phpseclib should be able to cope with extension requests copy, but I can't imagine another CSR use right now.\n. You're perfectly right ! Sorry for the bug.\nActually, this patch attempts to avoid encoding of optional fields that have their value equal to default. It looks like my patch is incomplete: i.e.: it drops properly the field itself, but not the explicit tag if some.\nThe problem in this particular case is:\nphp\n// technically, default implies optional, but we'll define it as being optional, none-the-less, just to\n                // reenforce that fact\n                'version'             => array(\n                                             'constant' => 0,\n                                             'optional' => true,\n                                             'explicit' => true,\n                                             'default'  => 'v1'\n                                         ) + $Version,\nso we have explicit tag, optional and default==actual value: everything to make it fail.\nIMHO, the proper fix is to not store the explicit tag if the contained value is empty. Do you see any cons-example ?\nFor the moment, yes, comment it out. I'll check this quietly later and will send a pull request for it.\nCheers\n. OK, I have changed the code (in a local repo) and it does generate a ASN1-valid certificate.\nBut I think you have raised a much more serious flag: even without my updates to ASN1, loading then saving an item without updating it does not generate a byte-to-byte match, thus breaking the signature. This is mainly because NULL tags are not loaded (before the current pull) and because \"ANY\" fields lose their real type (UTF8STRING is set invariably on output for these fields by your $filters mechanism).\nHere is a small program showing the problem, if fails even without my updates to ASN1.php:\n``` php\n<?php\nrequire_once 'File/X509.php';\n$pemcert = '-----BEGIN CERTIFICATE-----\nMIICWjCCAcMCAgGlMA0GCSqGSIb3DQEBBAUAMHUxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9HVEUg\nQ29ycG9yYXRpb24xJzAlBgNVBAsTHkdURSBDeWJlclRydXN0IFNvbHV0aW9ucywgSW5jLjEjMCEG\nA1UEAxMaR1RFIEN5YmVyVHJ1c3QgR2xvYmFsIFJvb3QwHhcNOTgwODEzMDAyOTAwWhcNMTgwODEz\nMjM1OTAwWjB1MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQYDVQQL\nEx5HVEUgQ3liZXJUcnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN0\nIEdsb2JhbCBSb290MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVD6C28FCc6HrHiM3dFw4u\nsJTQGz0O9pTAipTHBsiQl8i4ZBp6fmw8U+E3KHNgf7KXUwefU/ltWJTSr41tiGeA5u2ylc9yMcql\nHHK6XALnZELn+aks1joNrI1CqiQBOeacPwGFVw1Yh0X404Wqk2kmhXBIgD8SFcd5tB8FLztimQID\nAQABMA0GCSqGSIb3DQEBBAUAA4GBAG3rGwnpXtlR22ciYaQqPEh346B8pt5zohQDhT37qw4wxYMW\nM4ETCJ57NE7fQMh017l93PR2VX2bY1QY6fDq81yx2YtCHrnAlU66+tXifPVoYb+O7AWXX1uw16OF\nNMQkpw0PlZPvy5TYnh+dXIVtx6quTx8itc2VrbqnzPmrC3p/\n-----END CERTIFICATE-----\n';\n$x509 = new FILE_X509();\n$x509->loadCA($pemcert);\n$crt = $x509->loadX509($pemcert);\nvar_dump($x509->validateSignature());\n$out = $x509->saveX509($crt);\n$x509->loadX509($out);\nvar_dump($x509->validateSignature());\nfile_put_contents('aaa', \"$out\\n\");\n?>\n```\nThis is currently a limitation of phpseclib X509. You may:\n Load an item for in-core use,\n Save an item just after signing it.\nBut saving an item without signing it will almost always cause a signature verification failure.\nLess important, but disturbing anyway, is the type alteration of non-UTF8 compatible strings (In french, we use accents :-(\nMy current conclusion is: this limitation will exist as long as we are not able to re-encode an item exactly as it was prior to loading. If we decide to keep this limitation, it'll be ok to strip optional default values. Else we should not do so (or only on explicit caller's request) and we should latch input types by some means on loading and use these latched types upon save instead of $filters.\nPlease tell me your opinion. Thanks.\nCheers,\nPatrick\n. I'll probably read your conclusions tomorrow since it's 8 hours later here than at your place :-)\nFor 1: What do you want to put in this $casting var ? Something similar to $filters but primarily initialized by the decoding functions ?\nFor 2: Sure, as long as we can provide all the nested type info for all ANY fields at encoding time (at least, this could be an additional reason to have a structured OIDs directory). But I don't think this will resolve the variant string case, unless it ends in a named CHOICE of xxxSTRINGs. In other words, the transitive closure may not have any ANY field left.\nNot related: as a new feature, what about PKCS#7 loading/saving ?\nCheers\n. I've just fallen on a problem that seems to come from string type mismatch:\nUsing a CA with some subject fields of type PRINTABLESTRING (characters are all in the ASCII subset), I've signed a certificate with phpseclib. The later has issuer fields copied from CA's subject fields, but with type UTF8STRING.\nWhen I use this (web client) certificate in FF (3.6.24), it is OK. However it fails in IE8 and Chromium (14.0.835.186) because these browsers seem to compare string type for personal certificate selection (so they don't even prompt me for certificate selection).\nIMHO, this raises the priority for the ANY type problem resolution :-(\nSorry for the bad news.\n. Ah, I understand $casting: instead of storing types in reserved $cert subarrays, you'll keep them in a \"shadow\" array. Why not, but I think this will be hard to handle in terms of re-indexing when you work at a certain depth of nesting.\nAnother idea for ANY types: why not considering an ANY definition as a CHOICE of all possible types: the only \"deviation\" would be to not process composite types (SEQUENCE and SET) recursively. This will add a depth level, but the identifier will implicitly retain the effective type. We could easily do this because we are sure an ANY field always has its tag = its type. This way we could even remove the $filters.\nThe ANY type problem can also appear in extensions (not only DN). so we should have a more general mechanism.\nI do not know CMS, but I've checked PKCS#7 (http://www.ietf.org/rfc/rfc2315.txt). It is primarily intended to encrypt/sign opaque data, but since it may contain certificates and crls as side objects, it is also used (with zero length data!) to carry those objects. PKCS7 does have an ASN.1 structure and can be expressed in DER or PEM as ever. The only special thing I've seen in its syntax is a recursive definition; but I think we may handle it easily by setting (in syntax definition item XXX of type SEQUENCE): $XXX['xxx'] = &$XXX;\nI'll accept a commit access with great pleasure: many thanks for your trust :-)\n. Thanks for having granted commit access.\nIn the future, it won't be easy to talk through pull requests anymore, so my direct e-mail address is:\npm <at> datasphere <dot> ch\n. @bantu: I suppose he replaced a non-ascii character by another one: probably because our sources are not in UTF8 and his encoding does not match our...\nWe probably ought to convert our sources to UTF-8 or make them plain 7-bit ASCII :-/\n. Applied, thanks again.\n. Thanks for the bug report.\nI've just pushed a fix: please pull from git and check if it solves your problem. Thanks.\n. The site demo is not yet upgraded: it runs the stable version.\nFor proper tests, you have to generate key/certificate using the code in the github master branch.\n. I just did the same here.\nI had to adapt the C++ program to 64-bit gcc 4.7.2\nAfter generating cert+key, I run the program and connect to it using url https://localhost:1111 in FF.\nThe C++ program outputs:\nConnection from 100007f, port a5e5\nSSL connection using CAMELLIA256-SHA\nClient does not have certificate.\nGot 0 chars:''\nAnd stops.\nSo: what is the problem ?\n. You did not show us the program that generated the certificate, so it is hard to say what's going on.\nBut just as a guess, you used setDN() or setDNProp() to specifiy the email address, right ?\nIn this case, you have to consider they are \"generic\" functions, able to handle any DN property, without knowing about their value structure; the default string type is utf8String that tends nowadays to be the de-facto internal encoding when non 7-bit characters are encountered, but you can override this type indication using the 3rd function parameter. Give it as 'ia5String' for the email address. That should do it.\n. I do not really care, but these seems OK: the semantics is not altered.\nIMHO, priorities are:\n1) Efficiency\n2) Readability\n3) CS\nAlthough orthogonality throughout a project seems desirable.\nOK for me.\n. Why is the triple = needed ? $encoded is always an object and in all cases, FALSE == 'some non null string\" is always false.\n. I think I wrote that: shame on me :-(\nMy primary idea was to extract a key coded as a BITSTRING out of an ASN1 element, but the whole switch case is completely messed up.\nLines 4015-4020 should be rewritten. Thanks for pulling my attention on it.\n. Again, I don't think the triple = is necessary. Neither here nor in the following occurrences in this commit.\n. As you say, strtolower(FALSE) equals a null string: checking for type matching of both operators is thus useless. In addition, \"\" will never be equal to \"file_asn1_element\", even with a double=.\n. Hi Hans-J\u00fcrgen\nMany thanks for your in-depth review.\nI do not agree on this point: this value is used as an output length of a key derivation function algorithm, based on some hash function. The value 128 is perfectly OK for the PBKDF2 particular case. However, a future implementation of PBKDF1 (or some other kdf algorithm) will fail on this dkLen,  because it may constraint to a much lower value, depending on the hash function used. Leaving 8 here was intentional.\nSee http://tools.ietf.org/html/rfc2898, paragraph 5.1, step 1.\n. Right!\nCopied from DES.php, I should admit.\nI thought it was used by the Crypt_Base class.\nBy the way: I've seen you included some comments for developers in Crypt/Base.php. Would it be possible to complete this doc? List the fields and the functions that have to be defined by sublcasses, with their semantics. Give some info about the inline code: the $in parameter, the disallowed variable names (those you use in the code inlining the snippets), etc. This would be great even for people familiar with this code.... just a suggestion :-)\n. Not sure about that: this is OK for mixing/r-mixing rounds, although each key value is used once and only once.\nHowever mashing/r-mashing rounds use a dynamic index to the key array.\nI fear the trade-off of inlining+key preparation+memory use vs execution time gain won't be as good as for the DES (in ex.), except for some particular case.\n. Thanks for this info: as stated above, should be part of some developer's hints.\n. ... but $this->pitable is changed at line 253:\n     $this->pitable = array_merge($pitable, $pitable);\nThe only alternative I can imagine is hardcoding the concatenation (enumerating 512 values) in a the class var definition. Your opinion ?\n. Yes it is: it saves a modulus in processing code.\n. I don't think this is very efficient:\nYour optimizations targets cases where a single key is used for a lot of data. However uses where the key changes often for a limited encryption/decryption volume suffers from them.\nThis is the case here: instead of building the tables at object creation, we do it each time the key is set.\nYour inlining high optimization suffers from the same symptoms: it recompile the whole code up to eleven times.\n. Why not setting it to 0 for all crypt algorithms (i.e.: make it private to Crypt_Base). hash_pbkdf2 will recognize it as hash algorithm dependent and will use the max. Same behavior can be implemented internally. Other kdf future functions will accomodate accordingly. If the targetted crypt algorithm needs a shorter key, it may use only the first bytes, as PBKDF2 does... just a suggestion...\n. > Do you think it's possible - if it makes sense - to remove the second parameter and add a public method like \"setEffectiveKeyLength()\" ... as we do it similar in Rijndael with setKeyLength()\nYes, it's possible. Unification is highly desirable.\nHowever I'm not sure that unbinding the key from its effective length is desirable.\nIs there any reason for this unbinding in Rijndael ?\n. I intend to investigate on PBKDF1 soon, because I plan to implement a PKCS5 module (but this won't be tomorrow!).\nI agree with 128-bits: after all, 64 will fail anyway for PBKDF1 if the selected hash algorithm is CRC32...\nIn all cases, we have to bookmark this for the future.\n. I don't agree with using md5() here: although the probability is very low there are some chances we get a collision. In addition php associative arrays already implement a very effective hash mechanism that do handle collision. I would rather use the whole string as \"code_hash\". This is also valid for other algorithms.\n. Now I understand you did it for confidentiality :-)\nI really would prefer you use a 1-way encryption rather than a signature: this will suppress totally the risk of collision.\nIn ex.: use a BK algorithm (such as RSA, but preferably simpler!) generate a key pair, delete the private key (so nobody may decrypt), include the public key in the code and use it to encrypt the string or at least the algorithm key, that's it :) You can even have this processing in the Crypt_Base class...\nYou should avoid a BK algorithm that uses one of our Crypt_xxx class for evident stack reasons !\nMy 2 cents ;-)\n. ",
    "pruchai": "i had an older version, but the same thing happens with the latest version too. \nyes, the log is for the machine (one of them) that is hanging. Got them with following commands:\nprint_r($ssh->getLog());\nprint_r($ssh->getErrors());\nAll 4 machines are production database boxes and have been up for months, with no patches of any kind\n. no. it hangs for hours. the script is supposed to run from cron or command line. this morning i noticed a ton of cron processes that were running this script. they have been running for days. i killed the processes and tried to run the script by hand. it never finished. it did not time out after 30 seconds. it did not time out at all. i had to Ctrl+C out of it.\n. Ah! There we go. My logging was set to simple!\n```\n<- NET_SSH2_MSG_KEXINIT (0.0023s)\n00000000  14:79:0c:11:44:13:44:9c:ee:eb:61:44:80:e2:2a:7b  .y..D.D...aD..*{\n00000010  72:00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c  r...Ydiffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e  man-group-exchan\n00000030  67:65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68  ge-sha1,diffie-h\n00000040  65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73  ellman-group14-s\n00000050  68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ha1,diffie-hellm\n00000060  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00  an-group1-sha1..\n00000070  00:0f:73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73  ..ssh-rsa,ssh-ds\n00000080  73:00:00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c  s....aes128-ctr,\n00000090  61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35  aes192-ctr,aes25\n000000a0  36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35:36  6-ctr,arcfour256\n000000b0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000000c0  32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c  28-cbc,3des-cbc,\n000000d0  62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73  blowfish-cbc,cas\n000000e0  74:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d  t128-cbc,aes192-\n000000f0  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61  cbc,aes256-cbc,a\n00000100  72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d  rcfour,rijndael-\n00000110  63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e  cbc@lysator.liu.\n00000120  73:65:00:00:00:9d:61:65:73:31:32:38:2d:63:74:72  se....aes128-ctr\n00000130  2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32  ,aes192-ctr,aes2\n00000140  35:36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35  56-ctr,arcfour25\n00000150  36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73  6,arcfour128,aes\n00000160  31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63  128-cbc,3des-cbc\n00000170  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61  ,blowfish-cbc,ca\n00000180  73:74:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32  st128-cbc,aes192\n00000190  2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c  -cbc,aes256-cbc,\n000001a0  61:72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c  arcfour,rijndael\n000001b0  2d:63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75  -cbc@lysator.liu\n000001c0  2e:73:65:00:00:00:55:68:6d:61:63:2d:6d:64:35:2c  .se...Uhmac-md5,\n000001d0  68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:72  hmac-sha1,hmac-r\n000001e0  69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69  ipemd160,hmac-ri\n000001f0  70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e  pemd160@openssh.\n00000200  63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36  com,hmac-sha1-96\n00000210  2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:55  ,hmac-md5-96...U\n00000220  68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68  hmac-md5,hmac-sh\n00000230  61:31:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36  a1,hmac-ripemd16\n00000240  30:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  0,hmac-ripemd160\n00000250  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61  @openssh.com,hma\n00000260  63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d  c-sha1-96,hmac-m\n00000270  64:35:2d:39:36:00:00:00:15:6e:6f:6e:65:2c:7a:6c  d5-96....none,zl\n00000280  69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00  ib@openssh.com..\n00000290  00:15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e  ..none,zlib@open\n000002a0  73:73:68:2e:63:6f:6d:00:00:00:00:00:00:00:00:00  ssh.com.........\n000002b0  00:00:00:00                                      ....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_KEXINIT (0s)\n00000000  14:2f:a4:47:d5:12:32:37:1d:64:d9:4d:11:82:18:ce  ./.G..27.d.M....\n00000010  68:00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c  h...6diffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c  man-group1-sha1,\n00000030  64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67  diffie-hellman-g\n00000040  72:6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73  roup14-sha1....s\n00000050  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n00000060  00:76:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63  .varcfour256,arc\n00000070  66:6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c  four128,arcfour,\n00000080  61:65:73:31:32:38:2d:63:62:63:2c:61:65:73:31:39  aes128-cbc,aes19\n00000090  32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63  2-cbc,aes256-cbc\n000000a0  2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31  ,aes128-ctr,aes1\n000000b0  39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74  92-ctr,aes256-ct\n000000c0  72:2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d  r,3des-ctr,3des-\n000000d0  63:62:63:2c:6e:6f:6e:65:00:00:00:76:61:72:63:66  cbc,none...varcf\n000000e0  6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32  our256,arcfour12\n000000f0  38:2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38  8,arcfour,aes128\n00000100  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000110  61:65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:32  aes256-cbc,aes12\n00000120  38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72  8-ctr,aes192-ctr\n00000130  2c:61:65:73:32:35:36:2d:63:74:72:2c:33:64:65:73  ,aes256-ctr,3des\n00000140  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f  -ctr,3des-cbc,no\n00000150  6e:65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d  ne...0hmac-sha1-\n00000160  39:36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  96,hmac-sha1,hma\n00000170  63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64  c-md5-96,hmac-md\n00000180  35:2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73  5,none...0hmac-s\n00000190  68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31  ha1-96,hmac-sha1\n000001a0  2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61  ,hmac-md5-96,hma\n000001b0  63:2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f  c-md5,none....no\n000001c0  6e:65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00  ne....none......\n000001d0  00:00:00:00:00:00:00                             .......\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_KEXDH_INIT (0s)\n00000000  1e:00:00:00:80:25:79:af:86:7d:76:c7:96:28:67:9a  .....%y..}v..(g.\n00000010  a1:c8:64:6d:73:6a:26:10:ea:36:c8:4e:96:e7:03:11  ..dmsj&..6.N....\n00000020  cf:14:eb:f6:28:38:ab:98:35:eb:87:dd:af:14:2c:37  ....(8..5.....,7\n00000030  52:ec:3a:0f:19:1c:be:9d:eb:19:a4:6d:7b:fc:9f:60  R.:........m{..`\n00000040  7f:ed:2c:57:9e:50:94:88:38:fe:01:38:00:87:71:e7  ..,W.P..8..8..q.\n00000050  b5:31:31:5a:92:e8:cd:dc:0a:22:46:df:20:a9:de:5b  .11Z.....\"F. ..[\n00000060  8a:13:00:a6:de:5b:f0:82:bb:47:5a:99:a5:b7:d5:be  .....[...GZ.....\n00000070  59:5b:96:b3:3e:54:c0:54:cd:42:a8:96:38:c2:48:65  Y[..>T.T.B..8.He\n00000080  95:84:d6:b7:f5                                   .....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_KEXDH_REPLY (0.0393s)\n00000000  1f:00:00:01:15:00:00:00:07:73:73:68:2d:72:73:61  .........ssh-rsa\n00000010  00:00:00:01:23:00:00:01:01:00:de:86:8a:a6:bd:66  ....#..........f\n00000020  a1:de:c0:da:90:a5:87:31:0a:15:a4:8f:1e:93:bb:d2  .......1........\n00000030  2c:5a:3d:58:3c:72:1c:ac:75:c3:bb:0c:d4:9b:08:b6  ,Z=X.r..u.......\n00000040  aa:95:dd:10:ab:e5:8e:b3:e2:b6:37:30:17:93:86:26  ..........70...&\n00000050  8e:ad:10:2a:8f:ca:49:03:84:cb:75:64:46:3b:de:8f  .....I...udF;..\n00000060  f1:f0:ab:2b:4d:85:5a:39:28:ff:64:62:f1:7b:f3:45  ...+M.Z9(.db.{.E\n00000070  dd:c3:e2:aa:b3:90:30:45:bc:72:83:5f:7e:8b:8e:e9  ......0E.r._~...\n00000080  05:18:aa:d3:f6:37:70:02:39:8f:02:c1:6d:cb:13:b5  .....7p.9...m...\n00000090  9e:51:d3:73:a9:a1:7a:f3:76:f6:b0:95:a6:4a:39:c9  .Q.s..z.v....J9.\n000000a0  4e:7a:70:43:e9:ff:2e:6b:2d:13:b5:41:58:24:10:d4  NzpC...k-..AX$..\n000000b0  0d:95:46:50:40:fd:77:59:51:88:d6:cd:18:e6:cd:34  ..FP@.wYQ......4\n000000c0  c2:09:e4:a1:a5:3a:26:07:79:93:df:f0:99:e2:52:56  .....:&.y.....RV\n000000d0  e5:a1:60:72:34:97:8e:71:c1:8b:e5:24:b3:94:9d:92  ..r4..q...$....\n000000e0  c6:59:80:aa:74:3e:d8:db:c7:31:ce:71:77:6a:7b:53  .Y..t>...1.qwj{S\n000000f0  28:3c:fc:e9:b0:9f:36:16:1f:60:93:7b:06:43:49:96  (.....6...{.CI.\n00000100  06:67:e8:00:ce:2e:97:aa:34:46:b1:a1:5c:12:e1:67  .g......4F....g\n00000110  19:ca:06:0f:49:d6:d0:76:c1:4d:00:00:00:81:00:95  ....I..v.M......\n00000120  f0:81:a3:ca:30:37:a6:dc:9d:6f:14:48:b6:74:67:82  ....07...o.H.tg.\n00000130  9b:ac:16:0c:4d:19:cf:90:65:61:d6:51:d1:83:dc:d0  ....M...ea.Q....\n00000140  40:d7:72:7c:bf:9a:81:b9:09:77:68:22:4c:72:cc:71  @.r|.....wh\"Lr.q\n00000150  84:5c:74:c8:2a:d0:37:ac:a9:60:2f:f3:8a:2b:b4:5c  .\\t..7../..+.\\\n00000160  c5:ff:d2:fd:60:4d:6f:3b:f5:9e:16:b4:1d:a2:3a:2a  ....Mo;......:\n00000170  06:e5:7c:06:dd:90:f9:18:4f:ce:29:c2:1a:fe:61:af  ..|.....O.)...a.\n00000180  18:3d:de:75:9a:b4:12:66:14:a8:5c:f7:29:ba:0a:bd  .=.u...f...)...\n00000190  c9:4f:c8:46:70:67:86:d7:f4:6f:93:92:ea:5e:29:00  .O.Fpg...o...^).\n000001a0  00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00  .......ssh-rsa..\n000001b0  01:00:76:ea:67:c3:72:11:9c:5a:28:66:1c:3e:a7:36  ..v.g.r..Z(f.>.6\n000001c0  a1:17:a1:42:fc:49:b3:17:ca:9c:56:92:4d:3f:1f:26  ...B.I....V.M?.&\n000001d0  1a:16:67:1e:22:94:94:7d:e5:75:ea:e3:2f:7b:b4:c1  ..g.\"..}.u../{..\n000001e0  61:ba:0a:51:6a:2c:bc:2f:49:5e:33:aa:be:41:5e:e2  a..Qj,./I^3..A^.\n000001f0  9f:56:97:7b:0d:ae:eb:e4:2a:c7:11:ab:7c:0e:94:88  .V.{.......|...\n00000200  c8:87:80:e5:f5:8a:59:43:8b:64:9a:65:ee:97:dd:e0  ......YC.d.e....\n00000210  5b:ae:f8:f4:b9:54:13:47:82:76:a7:6a:a8:f9:91:01  [....T.G.v.j....\n00000220  e7:34:9a:5c:6c:1f:80:fa:dc:58:cc:10:ac:9e:09:86  .4.\\l....X......\n00000230  a9:e3:d5:68:a5:bc:54:49:2e:31:c4:ee:5d:1a:76:e6  ...h..TI.1..].v.\n00000240  1b:78:67:2d:d6:df:ba:dc:51:a6:e1:74:9b:84:39:f6  .xg-....Q..t..9.\n00000250  b6:84:48:a9:a4:3d:a9:dc:46:c6:8b:18:4f:b1:90:7b  ..H..=..F...O..{\n00000260  79:83:e7:8a:20:c4:7d:cd:a0:93:0a:8d:16:98:eb:20  y... .}........ \n00000270  6f:af:18:f0:45:fd:30:fd:a6:a5:a2:22:9f:40:66:24  o...E.0....\".@f$\n00000280  b2:a0:5c:9a:31:8a:34:17:09:df:a3:6b:94:68:7f:79  ...1.4....k.h.y\n00000290  dd:19:a4:32:dd:dc:12:d7:ca:d8:3a:b2:45:a7:d9:61  ...2......:.E..a\n000002a0  fc:ed:e1:b0:9a:37:a5:ac:64:0b:51:25:3a:a0:06:34  .....7..d.Q%:..4\n000002b0  5f:49                                            _I\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_NEWKEYS (0.0001s)\n00000000  15                                               .\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_NEWKEYS (0s)\n00000000  15                                               .\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_SERVICE_REQUEST (0s)\n00000000  05:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_SERVICE_ACCEPT (0.0314s)\n00000000  06:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (0.0001s)\n00000000  32:00:00:00:04:72:6f:6f:74:00:00:00:0e:73:73:68  2....root....ssh\n00000010  2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:09:70  -connection....p\n00000020  75:62:6c:69:63:6b:65:79:00:00:00:00:07:73:73:68  ublickey.....ssh\n00000030  2d:72:73:61:00:00:01:15:00:00:00:07:73:73:68:2d  -rsa........ssh-\n00000040  72:73:61:00:00:00:01:23:00:00:01:01:00:b7:2a:bb  rsa....#.......\n00000050  61:9b:0b:26:b5:0a:b4:c0:4b:cf:88:f6:c2:97:ee:eb  a..&....K.......\n00000060  00:36:5e:30:3f:e6:b7:48:c1:7b:33:e1:8f:b1:05:ca  .6^0?..H.{3.....\n00000070  f1:32:9f:70:da:a4:29:d3:af:77:eb:e8:10:4c:58:3f  .2.p..)..w...LX?\n00000080  af:4f:90:e0:5f:2a:dd:0b:5a:61:d7:39:af:ce:b9:10  .O.._..Za.9....\n00000090  fc:46:ea:42:9b:ab:d0:05:c4:b1:e7:c7:5d:98:d4:35  .F.B........]..5\n000000a0  34:6f:c7:d2:ca:8c:15:f9:18:f6:50:73:c6:28:0b:ed  4o........Ps.(..\n000000b0  7d:7c:b6:45:bc:65:ba:27:99:a0:bd:40:e3:16:3a:ae  }|.E.e.'...@..:.\n000000c0  ca:1e:1c:8b:14:c4:3d:44:f7:8d:ed:ba:fd:cb:cf:8c  ......=D........\n000000d0  23:c4:57:8b:3d:95:b3:4e:90:80:80:0d:e6:2b:78:21  #.W.=..N.....+x!\n000000e0  79:21:7b:59:4c:ba:14:47:52:37:48:08:3a:06:b4:10  y!{YL..GR7H.:...\n000000f0  78:37:bb:13:70:28:dc:f1:ba:d5:32:72:2d:c9:60:d7  x7..p(....2r-..\n00000100  4e:fa:3e:b7:bf:b8:60:29:0d:92:41:49:a6:dc:59:da  N.>...)..AI..Y.\n00000110  ea:95:3d:b1:48:16:e0:b6:21:ea:7d:13:a9:9b:cb:9a  ..=.H...!.}.....\n00000120  95:e3:de:70:57:9f:5c:06:e4:c2:40:f4:ec:6c:a6:c6  ...pW....@..l..\n00000130  be:5b:a8:25:d2:c9:3a:91:64:30:fe:e8:f2:19:53:09  .[.%..:.d0....S.\n00000140  8f:5a:36:79:1b:ce:5c:04:5a:4a:2a:02:e5           .Z6y...ZJ*..\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- UNKNOWN (60) (0.0086s)\n00000000  3c:00:00:00:07:73:73:68:2d:72:73:61:00:00:01:15  .....ssh-rsa....\n00000010  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:01:23  ....ssh-rsa....#\n00000020  00:00:01:01:00:b7:2a:bb:61:9b:0b:26:b5:0a:b4:c0  .......a..&....\n00000030  4b:cf:88:f6:c2:97:ee:eb:00:36:5e:30:3f:e6:b7:48  K........6^0?..H\n00000040  c1:7b:33:e1:8f:b1:05:ca:f1:32:9f:70:da:a4:29:d3  .{3......2.p..).\n00000050  af:77:eb:e8:10:4c:58:3f:af:4f:90:e0:5f:2a:dd:0b  .w...LX?.O.._..\n00000060  5a:61:d7:39:af:ce:b9:10:fc:46:ea:42:9b:ab:d0:05  Za.9.....F.B....\n00000070  c4:b1:e7:c7:5d:98:d4:35:34:6f:c7:d2:ca:8c:15:f9  ....]..54o......\n00000080  18:f6:50:73:c6:28:0b:ed:7d:7c:b6:45:bc:65:ba:27  ..Ps.(..}|.E.e.'\n00000090  99:a0:bd:40:e3:16:3a:ae:ca:1e:1c:8b:14:c4:3d:44  ...@..:.......=D\n000000a0  f7:8d:ed:ba:fd:cb:cf:8c:23:c4:57:8b:3d:95:b3:4e  ........#.W.=..N\n000000b0  90:80:80:0d:e6:2b:78:21:79:21:7b:59:4c:ba:14:47  .....+x!y!{YL..G\n000000c0  52:37:48:08:3a:06:b4:10:78:37:bb:13:70:28:dc:f1  R7H.:...x7..p(..\n000000d0  ba:d5:32:72:2d:c9:60:d7:4e:fa:3e:b7:bf:b8:60:29  ..2r-..N.>...)\n000000e0  0d:92:41:49:a6:dc:59:da:ea:95:3d:b1:48:16:e0:b6  ..AI..Y...=.H...\n000000f0  21:ea:7d:13:a9:9b:cb:9a:95:e3:de:70:57:9f:5c:06  !.}........pW..\n00000100  e4:c2:40:f4:ec:6c:a6:c6:be:5b:a8:25:d2:c9:3a:91  ..@..l...[.%..:.\n00000110  64:30:fe:e8:f2:19:53:09:8f:5a:36:79:1b:ce:5c:04  d0....S..Z6y...\n00000120  5a:4a:2a:02:e5                                   ZJ*..\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (0.0001s)\n00000000  32:00:00:00:04:72:6f:6f:74:00:00:00:0e:73:73:68  2....root....ssh\n00000010  2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:09:70  -connection....p\n00000020  75:62:6c:69:63:6b:65:79:01:00:00:00:07:73:73:68  ublickey.....ssh\n00000030  2d:72:73:61:00:00:01:15:00:00:00:07:73:73:68:2d  -rsa........ssh-\n00000040  72:73:61:00:00:00:01:23:00:00:01:01:00:b7:2a:bb  rsa....#.......\n00000050  61:9b:0b:26:b5:0a:b4:c0:4b:cf:88:f6:c2:97:ee:eb  a..&....K.......\n00000060  00:36:5e:30:3f:e6:b7:48:c1:7b:33:e1:8f:b1:05:ca  .6^0?..H.{3.....\n00000070  f1:32:9f:70:da:a4:29:d3:af:77:eb:e8:10:4c:58:3f  .2.p..)..w...LX?\n00000080  af:4f:90:e0:5f:2a:dd:0b:5a:61:d7:39:af:ce:b9:10  .O.._..Za.9....\n00000090  fc:46:ea:42:9b:ab:d0:05:c4:b1:e7:c7:5d:98:d4:35  .F.B........]..5\n000000a0  34:6f:c7:d2:ca:8c:15:f9:18:f6:50:73:c6:28:0b:ed  4o........Ps.(..\n000000b0  7d:7c:b6:45:bc:65:ba:27:99:a0:bd:40:e3:16:3a:ae  }|.E.e.'...@..:.\n000000c0  ca:1e:1c:8b:14:c4:3d:44:f7:8d:ed:ba:fd:cb:cf:8c  ......=D........\n000000d0  23:c4:57:8b:3d:95:b3:4e:90:80:80:0d:e6:2b:78:21  #.W.=..N.....+x!\n000000e0  79:21:7b:59:4c:ba:14:47:52:37:48:08:3a:06:b4:10  y!{YL..GR7H.:...\n000000f0  78:37:bb:13:70:28:dc:f1:ba:d5:32:72:2d:c9:60:d7  x7..p(....2r-..\n00000100  4e:fa:3e:b7:bf:b8:60:29:0d:92:41:49:a6:dc:59:da  N.>...)..AI..Y.\n00000110  ea:95:3d:b1:48:16:e0:b6:21:ea:7d:13:a9:9b:cb:9a  ..=.H...!.}.....\n00000120  95:e3:de:70:57:9f:5c:06:e4:c2:40:f4:ec:6c:a6:c6  ...pW....@..l..\n00000130  be:5b:a8:25:d2:c9:3a:91:64:30:fe:e8:f2:19:53:09  .[.%..:.d0....S.\n00000140  8f:5a:36:79:1b:ce:5c:04:5a:4a:2a:02:e5:00:00:01  .Z6y...ZJ*.....\n00000150  0f:00:00:00:07:73:73:68:2d:72:73:61:00:00:01:00  .....ssh-rsa....\n00000160  5c:61:d8:11:91:0c:7b:64:aa:0e:89:31:02:67:a0:67  \\a....{d...1.g.g\n00000170  80:c6:b1:67:f7:11:09:e2:7d:ab:fa:86:79:83:e6:29  ...g....}...y..)\n00000180  1c:74:89:2e:cd:ca:65:52:03:cd:85:09:66:be:1c:9f  .t....eR....f...\n00000190  fd:67:98:ce:e6:7a:0a:58:4d:c7:8c:ed:b5:ce:15:85  .g...z.XM.......\n000001a0  1b:73:e5:0a:64:7b:16:7c:bc:ce:96:f7:e3:3c:a4:89  .s..d{.|........\n000001b0  11:f3:72:f4:7c:45:0d:82:60:09:f4:34:05:49:2d:65  ..r.|E....4.I-e\n000001c0  46:5f:7a:70:5f:b6:98:19:ec:6d:7b:f4:ad:7d:db:70  F_zp_....m{..}.p\n000001d0  c1:c6:d2:7b:b0:78:1c:56:de:2f:73:22:96:47:9a:44  ...{.x.V./s\".G.D\n000001e0  62:41:24:f3:22:21:fb:fd:4e:ab:e8:62:fb:d6:f1:9d  bA$.\"!..N..b....\n000001f0  f5:d3:30:76:83:68:8d:fe:2c:32:12:a3:f9:ce:18:3c  ..0v.h..,2......\n00000200  b5:77:e1:b8:b4:01:e6:71:ea:d1:e8:60:73:8d:f3:33  .w.....q...s..3\n00000210  7b:b1:d1:5c:66:59:13:31:30:3a:61:5a:51:e0:4a:30  {..\\fY.10:aZQ.J0\n00000220  a4:de:3e:83:86:bb:8b:31:48:2e:5c:01:31:0e:5f:1b  ..>....1H..1._.\n00000230  f0:54:0e:da:c6:53:18:cb:41:9b:95:56:7a:e1:e0:02  .T...S..A..Vz...\n00000240  ba:43:0e:9f:96:2b:2f:9f:ee:33:07:29:b8:1e:11:2d  .C...+/..3.)...-\n00000250  46:d7:d3:1a:87:69:b8:bc:16:2c:f5:90:84:e8:a0:27  F....i...,.....'\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (0s)\n00000000  34                                               4\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (0s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (0s)\n00000000  5b:00:00:00:00:00:00:00:00:00:00:00:00:00:00:80  [...............\n00000010  00                                               .\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  62:00:00:00:00:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:08:75:6e:61:6d:65:20:2d:70                    ..uname -p\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (0s)\n00000000  5d:00:00:00:00:00:20:00:00                       ]..... ..\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (0s)\n00000000  63:00:00:00:00                                   c....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_DATA (0s)\n00000000  5e:00:00:00:00:00:00:00:07:78:38:36:5f:36:34:0a  ^........x86_64.\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  62:00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74  b........exit-st\n00000010  61:74:75:73:00:00:00:00:00                       atus.....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  60:00:00:00:00                                   `....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  61:00:00:00:00                                   a....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  60:00:00:00:00                                   `....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  61:00:00:00:00                                   a....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (0s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (0s)\n00000000  5b:00:00:00:00:00:00:00:01:00:00:00:00:00:00:80  [...............\n00000010  00                                               .\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  62:00:00:00:01:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:08:75:6e:61:6d:65:20:2d:72                    ..uname -r\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (0s)\n00000000  5d:00:00:00:00:00:20:00:00                       ]..... ..\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (0s)\n00000000  63:00:00:00:00                                   c....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  62:00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74  b........exit-st\n00000010  61:74:75:73:00:00:00:00:00                       atus.....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  60:00:00:00:01                                   `....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  61:00:00:00:01                                   a....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_DATA (0s)\n00000000  5e:00:00:00:00:00:00:00:17:32:2e:36:2e:31:38:2d  ^........2.6.18-\n00000010  32:37:34:2e:33:2e:31:2e:30:2e:31:2e:65:6c:35:0a  274.3.1.0.1.el5.\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  60:00:00:00:00                                   `....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  61:00:00:00:00                                   a....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (0s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (0s)\n00000000  5b:00:00:00:00:00:00:00:00:00:00:00:00:00:00:80  [...............\n00000010  00                                               .\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  62:00:00:00:00:00:00:00:04:65:78:65:63:01:00:00  b........exec...\n00000010  00:3d:2f:73:62:69:6e:2f:67:72:75:62:62:79:20:2d  .=/sbin/grubby -\n00000020  2d:64:65:66:61:75:6c:74:2d:6b:65:72:6e:65:6c:20  -default-kernel \n00000030  7c:20:73:65:64:20:2d:65:20:22:73:2f:5c:2f:62:6f  | sed -e \"s/\\/bo\n00000040  6f:74:5c:2f:76:6d:6c:69:6e:75:7a:2d:2f:2f:22     ot\\/vmlinuz-//\"\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (0s)\n00000000  5d:00:00:00:00:00:20:00:00                       ]..... ..\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (0s)\n00000000  63:00:00:00:00                                   c....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_EOF (0.0001s)\n00000000  60:00:00:00:00                                   `....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n\n-> NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  61:00:00:00:00                                   a....\n\nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\nNotice: ob_flush(): failed to flush buffer. No buffer to flush. in /sst-admin/inventory/lib/phpseclib/Net/SSH2.php on line 2427\n```\n^ it hangs there\n. Found 2 occurrences in SSH2.php and changed them, but it made no difference. \n. Hm... its comes back with a Segmentation fault after about 20 minutes\n. Ha. I traced the hanging to a single remote command\n/sbin/grubby --default-kernel\nArgh. I hate corporate addiction to RHEL :(\nPlease close this. Issue phpseclib related. Thank you for your help!\n. eh. i'd love to, but it ended up being a much larger production issue. there is all kinds of problem with this database cluster and underlying storage, so there are 8 people who are actively trying to fix it right now. Have to stay out of their way.\n. ",
    "taylorotwell": "Hello. I maintain Laravel, which is currently a popular PHP framework (most popular on Github). We use PhpSecLib for abstracting an SSH task runner component. I would be very interested in seeing this type of functionality make it into the library. Would be willing to put some money behind it if need be.\n. I guess what I'm looking for is something like Fabric for Python. I just specify the host, port, and username, and I'm guessing it is using the key that would be used as if I executed the command from my terminal. You know what I mean? Is that ssh-agent?\nCurrently with PhpSecLib most of the time the keyfile in ~/.ssh/ can't be read by the PHP process, and people get all flustered with how to securely set all that up.\n. Is what I'm asking for even possible given how user permissions work?\n. OK, cool. I tried to get that old pull request working but couldn't. I guess it's just too old or something.\n. Looks like I'm looking for this: #28 \nLeft a comment on that thread...\n. Yeah I'm fine with waiting. Not extremely urgent.\n. ",
    "nifr": ":+1:  :+1:  :+1: \n. This really needs to be refactored. A autoloading support / easy composer integration is a must for libraries to be useful these days.\n. ",
    "slowbro": "Ah, good points. I agree compatibility is a good selling point, and phpseclib does that well. The only problem with remaining ultra-compatible is the library itself moves into the stone-age.\nI don't have a good argument as to why phpseclib should ditch the ultra-compatible-ness, as I think it's a good feature overall.\nWhat about a second codebase? A PHP5+ branch? Though, that may be more headache than you're looking to take on.\nIn any case, I understand where you're coming from- just thought I'd poke you guys and ask :)\n. I'd be willing to help out on that front in my spare time. I'm a work-from-home dev, and working on this would also directly benefit my current project(s), so I don't think work would care anyways :)\n@bantu, I'm wiling to help with the php5/5.3 adaptation of phpseclib if you'd like me to help- or if you don't have the time, I'd love to work off what you currently have. I haven't worked much with namespacing but at least solving some of the more basic php5 issues like Exceptions and class-based constants would be a good start. I'm sure I can pick up namespaces pretty quick :D\n. I agree that protected/private are pretty useless (at least in this matter). It's always been a 'why bother' for me.. especially with a library like this. Who are you protecting with the private/protected keywords?\nIn any case, @kea thanks- I will check it out!\n. Quick note: MODE_OFB works fine in Crypt_TripleDES from your master\n. Upon further investigation this seems to only happen when CRYPT_DES_MODE is set to MCRYPT. Internal works just fine:\n``` php\n<?php\ndefine('CRYPT_DES_MODE', 1);\n$cipher = new Crypt_DES(CRYPT_DES_MODE_OFB);\n$cipher->setKey('abcdefgh');\n$plaintext = \"supersecret\";\nvar_dump($cipher->decrypt($cipher->encrypt($plaintext)));\n//outputs: string(11) \"supersecret\"\n```\n``` php\n<?php\ndefine('CRYPT_DES_MODE', 2);\n$cipher = new Crypt_DES(CRYPT_DES_MODE_OFB);\n$cipher->setKey('abcdefgh');\n$plaintext = \"supersecret\";\nvar_dump($cipher->decrypt($cipher->encrypt($plaintext)));\n//outputs: bool(false)\n```\n/me researches more\n. More narrowing: It appears to be an issue with Crypt_DES::decrypt(), as the encrypted data is decryptable elsewhere with DES-NOFB\n. Fix is in pull request 33! Don't you love it when people solve their own issues? :D\n. Sorry, github keyboard shortcuts + wrong window = this, apparently.\n. Added 44f80c2 to fix #31\n. Added 1f1ece2. It's not mentioned in my issues because I originally thought it was something I broke in my 5.3 branch.\nCrypt_TripleDES::setPassword() was generating a 40-byte long key. 3DES requires a 24 (or 8?) byte key, but Crypt_TripleDES::setKey() wan't turncating over-length keys like Crypt_DES was.\nThis allows all my unit-tests to pass for DES/TripleDES.\nPassing Travis build with my unit-tests: https://travis-ci.org/slowbro/phpseclib/builds/3199299\n. You're very welcome :D\n. ",
    "bkosborne": "Hmm I wonder what happened to this commit? The 1.0.2 and 2.0.2 are not using the code to optionally throw exceptions, they still use user_error\n. ",
    "dlgoodchild": "I actually just fixed this by copying\nline 1612:\nextract(unpack('Nstatus', $this->_string_shift($response, 4)));\nto just before the if () on line 1570\n. ",
    "dliefbroer": "This is the logging I get:\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0715, network: 0s)^M\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth^M\n^M\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0389, network: 0.0387s)^M\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth^M\n^M\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0002, network: 0.0001s)^M\n00000000  32:00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00  2....username...^M\n00000010  0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00  .ssh-connection.^M\n00000020  00:00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08  ...password.....^M\n00000030  70:61:73:73:77:6f:72:64                          password^M\n^M\n<- NET_SSH2_MSG_USERAUTH_FAILURE (since last: 0.0011, network: 0.001s)^M\n00000000  00:00:00:1e:70:75:62:6c:69:63:6b:65:79:2c:6b:65  ....publickey,ke^M\n00000010  79:62:6f:61:72:64:2d:69:6e:74:65:72:61:63:74:69  yboard-interacti^M\n00000020  76:65:00                                         ve.^M\n^M\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0002, network: 0.0001s)^M\n00000000  00:00:00:05:61:64:6d:69:6e:00:00:00:0e:73:73:68  ....admin....ssh^M\n00000010  2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00:00:14:6b  -connection....k^M\n00000020  65:79:62:6f:61:72:64:2d:69:6e:74:65:72:61:63:74  eyboard-interact^M\n00000030  69:76:65:00:00:00:00:00:00:00:00                 ive........^M\n^M\n<- NET_SSH2_MSG_USERAUTH_INFO_REQUEST (60) (since last: 0.0006, network: 0.0005s)^M\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00  ................^M\n^M\n-> NET_SSH2_MSG_USERAUTH_INFO_RESPONSE (61) (since last: 0.0002, network: 0s)^M\n00000000  3d:00:00:00:01:00:00:00:0c:64:75:6d:6d:79:2d:61  =........dummy-a^M\n00000010  6e:73:77:65:72                                   nswer^M\n^M\n. Yes, I can login with Putty and OpenSSH. Identification is SSH-2.0-OpenSSH_4.3\n. ",
    "maxnet": "Was wondering if ECC support in phpseclib is still being worked on, or if everyone is just using danter-php-ecc.\nIn particular interested in ECDSA support for use with U2F two factor authentication tokens ( https://fidoalliance.org/specifications/download/ )\n. ",
    "sarciszewski": "I'd like to recommend https://github.com/jedisct1/libsodium-php and/or https://github.com/devi/Salt as libsodium (depending on whether we want to require PECL access).\n. That's why I also recommended devi/Salt -- no dependencies :)\nOn Oct 23, 2014 1:40 AM, \"terrafrost\" notifications@github.com wrote:\n\nWas wondering if ECC support in phpseclib is still being worked on, or if\neveryone is just using danter-php-ecc.\nI can't comment as to what people are using but I can say that I'm not\nworking on ECC support myself. It'd be nice to have it but there are lots\nof other things on my priority list w.r.t. phpseclib atm. Enough to\nprobably keep me plenty busy for a few years tbh.\nI'd like to recommend https://github.com/jedisct1/libsodium-php and/or\nhttps://github.com/devi/Salt as libsodium (depending on whether we want\nto require PECL access).\nI'm not a big fan of adding support for PECL extensions. Extensions like\ngmp, bcmath, mcrypt and openssl are pretty common. Extensions in PECL...\nnot so much.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/37#issuecomment-60194933.\n. https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1838\n\nSince the most recent commit removed white space, this is where the error is occurring.\nWhat does the output of this look like? \nphp\nvar_dump( array(NET_SSH2_MSG_SERVICE_REQUEST, strlen('ssh-userauth'), 'ssh-userauth') );\n. Oh, I see. That's https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1936 in master.\nWhat is the output of this, then? :)\nphp\nvar_dump( $this->_string_shift($response, 1)) );\n(It's generally a good idea to check the return value of functions, especially in security code.)\n. > That would almost double the size of Net_SSH2.\nWould you rather have 4000 lines of legacy code, or 8000 lines of testable production code? :)\n. https://github.com/terrafrost/phpseclib/blob/35fd2888eae0b94434215572e7b2d42dabde2e45/phpseclib/Crypt/Rijndael.php#L705-L713\nI wasn't aware that AES supported 160-bit or 224-bit key sizes, only 128, 192, and 256.\n. ",
    "petrich": "Thank you... was searching it \"only\" 2 days :-) because my stream got sometimes corrupted in cfb mode :-)\n. Thank you very much.\n. Yes, OFB mode breaks the buffer array() for using it as a string, that would easy to fix, but beside this, the mode it self works fine regardless the PHP strlen(array()) Warning while the CFB mode [in decrypt()] is broken in it self.\nI have a \"fix\" for the CFB mode in decrypt() (CFB's encrypt() is clean), but will wait for Terrafrost's fixes because my \"fix\" is a complete rewrite of the CFB decrypt() mode and i will not destroy the terrar's programming struct's in there.\nExcept my rewrite will be faster in CPU performance as terra's but this i doubt :-) ... we will see :-) \n. Hi Terra (and sorry for wrong coding style...)\nToday i'll go in the zoo with my kids... so it's just a short response from me... coming back in evening\nCan you run the code with ini_set('error_reporting',E_ALL)\n$i=0 should be declared on the top... no big deal...\nAnd the other Notice Error comming from _encryptBlock($iv) (arghhh) because strlen($iv) !== $block_size\nEven so, the cipher and all works fine (what makes me wonder) but i don't know how the other ciphers->_encryptBlock()'s responds on a incoming block !== $block_size.\nBest thing would be to ensure that _encryptBlock($iv) will always get $block_size bytes.... or?\nFor that, line ~919 should be (or similar): $iv = substr(substr_replace($iv, $ciphertext, $orig_pos, $i),0,$block_size);\nSpeed test on my machine are similar as yours:\nresults from my version:\n5.16\n5.07\n5.17\nYour rewritten one: [winner :-)]\n4.67\n4.76\n4.72\nThe original one:\n4.85\n4.88\n4.93\n. comming back right now... optimizing code (to win the race :-) )  got some good impressions... will report when finished...\n. Hi Terra\nok... i was optimizing and checking and testing and and and... \nAnd the end of the story was that i realized that the performance between our codes depends on how the buffered stream comes in (partition lengths/quantity) which is, of course, not predictable.\nRunning the code under windows i get better performance with my code, always between 5-15% faster.\nCode is also shorter, and - imho - good readable without any performance tricks/squiggles but still fast.\nTherefore i suggest we can use this code variant (with PEAR CS... of course :-)\nHowever... the CFB mode in Crypt_AES (in MODE_MCRYPT) is also broken as the endlessloop testscript figured out ( https://github.com/phpseclib/phpseclib/issues/39 was not able to blame the bug in MODE_MCRYPT)\nI suggest we'll fix this in AES first (i can do that if you are busy) and after that starting with DES/3DES fixing the broken MODES same as in Rijndael which, i think, would no big deal anymore but more copy and paste and diff and checks :-)\nIf it's ok, i will do that.\nGood Night... had a long day today :-)\n. Right... \nCurrently i use the script i postet here ( https://github.com/phpseclib/phpseclib/pull/44 ) for testing out all the issues.\nIt's not so nice styled :-) but its very strict in checking in and out streams... \n. Hi Terra and thank you for your response. You are absolut right. I overlooked that important point of performance and was changing it in that way you pointed out... works great and fast (also faster than the currently commited cfb code... if you interested i'll send a commit)\nHowever... the current cfb code in MODE_MCRYPT still not working properly:\nphp\ndefine('CRYPT_AES_MODE',CRYPT_AES_MODE_MCRYPT);\n$aes = new Crypt_AES(CRYPT_AES_MODE_CFB);\n$aes->enableContinuousBuffer();\necho $aes->decrypt($aes->encrypt('U'));\nOutput: 3\nExpected: U\nCan you check that?\n. Hi Terra,\nlatest commit ( https://github.com/phpseclib/phpseclib/commit/bbd62f6490437b316f48b6f89a0f525ec05d633e ) for fixing broken cfb decrypt() with ContinuousBuffer enabled [using MODE_MCRYPT] still not work.\n``` php\ndefine('CRYPT_AES_MODE',CRYPT_AES_MODE_MCRYPT);\n$aes = new Crypt_AES(CRYPT_AES_MODE_CFB);\n$ciphertext = $aes->encrypt(':-)--------------(--------------');\n$aes = new Crypt_AES(CRYPT_AES_MODE_CFB);\n$aes->enableContinuousBuffer();\necho $aes->decrypt($ciphertext[0]).$aes->decrypt(substr($ciphertext,1));\n```\nOutput:\n:-(--------------\nExpected:\n:-)--------------(--------------\nhttps://github.com/petrich/phpseclib/commit/20461866ef18cd07d8bc9810d91cc5ffcd1fa727 or https://github.com/terrafrost/phpseclib/commit/8f9f898ac1abbc22941e7093687afd0284444cb6 will work.\n. > I would really like to have unit tests for all of those issues. However, all the constants make testing rather hard.\nAndreas... when we are finshed with all the cipher bugfixing i'll post my testscript wich checks all chipers, alle mode, all keylength, with and without continousBuffer etc... \nIm not familar with phpUnit maybe you can add the script then to a phpUnit test class ...\nThe problem with the MODE_MCRYPT/INTERNAL constant... if it's possible using PECL runkit on the Travis Servers? If yes, the we can use: http://th.php.net/manual/de/function.runkit-constant-redefine.php\nIf it's not possible we also can try use this trick to redefine the MODE constants (will work only 1 time per constant but that should enough):\n( from a comment on: http://de2.php.net/manual/de/function.define.php )\ndefine('TEST','foo',true);\nvar_dump(TEST);\ndefine('TEST','bar');\nvar_dump(TEST);\n. I prefere https://github.com/terrafrost/phpseclib/commit/4a1cbfa7fd174ac5343365d515a4a8d0bd059cc2\nbecause it's a little bit faster (at least on my speedtests) if the stream partitions < 16 and equal in performance if >= 16.\nAlso the code is (a little bit) shorter.\nBut on the end both works fine and fast and that's the main thing... the very small performance different (at least if there any) is not worth mentioning.\nHere's the speedtest (modifed for longer code run) which i was using\n``` php\ndefine('CRYPT_AES_MODE',CRYPT_AES_MODE_MCRYPT);\n$aes = new Crypt_AES(CRYPT_AES_MODE_CFB);\n$aes->enableContinuousBuffer();\nmt_srand(1);//fixed seed\nforeach(array(0=>array(5000000,1),1=>array(30000000,10),2=>array(10000000,100),3=>array(100000000,1000)) as $k=>$v)\n    {\n        $text = str_repeat('a',$v[0]);\n        $part_max_len = $v[1];\n        for($j=0;$j<3;$j++)\n            {\n                echo strlen($text).\" bytes, randomly partitionated (between 1 and $part_max_len bytes each partition)... \";\n                $s=microtime(true);\n            for($i=0,$len=strlen($text);$i<$len;)\n                {\n                    $part_len=mt_rand(1,$part_max_len);\n                    $aes->decrypt($aes->encrypt(substr($text,$i,$part_len)));\n                    $i+=$part_len;\n                }\n\n            $e=microtime(true);\n            echo \"Time: \".round($e-$s,2).\"\\n\";\n        }\n    echo \"\\n\";\n}\n\n```\nResults with the modifed code ( https://github.com/terrafrost/phpseclib/commit/8f9f898ac1abbc22941e7093687afd0284444cb6 ) :\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 38.23\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 38.29\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 38.06\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 63.62\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 63.38\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 63.34\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.72\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.78\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.69\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 68.7\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 68.77\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 68.76\nResults with not-modifed code ( https://github.com/terrafrost/phpseclib/commit/4a1cbfa7fd174ac5343365d515a4a8d0bd059cc2 ) :\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 37.48\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 37.43\n5000000 bytes, randomly partitionated (between 1 and 1 bytes each partition)... Time: 37.54\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 62.77\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 62.77\n30000000 bytes, randomly partitionated (between 1 and 10 bytes each partition)... Time: 62.75\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.63\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.77\n10000000 bytes, randomly partitionated (between 1 and 100 bytes each partition)... Time: 50.6\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 68.78\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 69.35\n100000000 bytes, randomly partitionated (between 1 and 1000 bytes each partition)... Time: 69.08\n. Cool... then AES and Rijndael should be fine.\nYes... i'll start with DES, sending a pull request when finished\n. i think it's this or similar....\n``` php\nerror_reporting(E_ALL);\ninclude('Math/BigInteger.php');\ndefine('MATH_BIGINTEGER_MODE', MATH_BIGINTEGER_MODE_BCMATH);\n$a = new Math_BigInteger(30);\n$b = new Math_BigInteger(17);\nrunkit_constant_redefine('MATH_BIGINTEGER_MODE',MATH_BIGINTEGER_MODE_INTERNAL);\n$a = $a->modInverse($b);\necho $a;\n```\n. Hi Terra... yes, Rijndael is on the way (small code optimizing)\nAnd RC4 also... (small ContinuousBuffer bugfix)\nThen all cipher's should be done :-) \n. > In particular, the last state doesn't need to be copied to a temp variable.\nAhh, yes... right.\n\nSeems to result in a very small speedup.\n\nYes, can confirm that. About 0.5%.\nTerra... it seems possible to speed AES up to additional ~20% but for that, besides some other related optimizations, we also have to loop unroll the main-rounds. (now, unrolling it, getting more than a marginal improvement :-) because so we can use the $state vars more effenciently then in a for() loop)\nThe optimizations steps are:\n- Using 1 dimensional $w/$dw keyschedule arrays instaed of 2-dims and accessing them directly with hardcoded integer-numbers $w[0...~60] instead of using $w[$round][0-3].\n- Using inline [inv]subWord'ing instaed of _[inf]subWord() and additional to this (PHP)optimizing accessing the $sbox0 table\n- Removing all ++counter vars in the main-round-code and handling the $[old]state0-3 vars even more efficiently then currently (avoiding all useless rotating copies of them self) by loop unroll the rounds\nFirst tests of this on my dev-Linux-Kisterl looks good... (de/encrypting 1MB. Before: ~4.4. sec. After: ~3.2 sec.)\nAre you interessted in such an update for AES... getting additional 20% speed :-) ? but blowing up (but not unreadable) the main-round-code a little bit? ...then i will do that the next days for AES\n. oki, pull-request comes the next days. This week i have a lot of other work but will come back soon here :-) \n. Hi Terra,\njust sent the pull-request for AES: https://github.com/phpseclib/phpseclib/pull/69\nGetting between 18-25% (depends on OS/Machine/PHP_VERSION) extra speed with this changes as described above.\nWould you review it? (i'll also set some git-notes to the changes here: https://github.com/phpseclib/phpseclib/pull/69 ) \n. ok... \nmy current results with this commit using the AES speedtest above is:\nBefore: \nTime used de/encrypting 1MB: 4.4\nAfter:\nTime used de/encrypting 1MB: 3.6\nWhen you are finished with reviewing it (no hurry).... i found a way getting additional ~18 - 20% performance :-)\nFirst alpha testing on my dev.Kisterl giving following result using the speedtest above:\nBefore (current code): \nTime used de/encrypting 1MB: 3.6\nAfter:\nTime used de/encrypting 1MB: 2.9\nThe patch will have about ~300 extra lines of  (readable) code to AES.php ... \n. Currently i have much work somewhere else... but the patch for the additional 20% speed-up for AES is nearly ready... will present it the next days :-) found also some small bugs in some operation modes... but no big deal.\nGreetings \n. Hi Terra... and sorry for the delay... had much work the last days.\nBut here comes the 3rd performance update for AES, giving additional 18 - 22% speedup (seems depends on OS, CPU features and machine's-hardware).\nUsing the AES speedtest above, here my results (on php-5.4.9 @win64, AMD Athlon II P360 2,3GHz):\nBefore (current code): \nTime used de/encrypting 1MB: 3.6\nAfter (new code):\nTime used de/encrypting 1MB: 3.0 \n....\nDescription of the Update:\nThe ~20% speedup was possible (in following order) because:\n- completely avoiding the use of accessing $w / $dw while en/decrypting but using the $key-words as hardcoded integers vars in the function code :-) \n- using inline en/decrypting in all operation modes instead of calling _en/decrypBlock() each 16 bytes (which saves time not coping the whole 4+1 S-boxes to local vars each 16 bytes, but only once each en/decrypt() ) \nIn order to realise this 2 points, i used the >= php-5.3 feature of the closure-based anonymous functions to create [via eval(), at run time] optimized function-code.\nBecause of this, the additional ~20% speedup works only on php >= 5.4 (not >= 5.3 but >= 5.4 because only since 5.4 it is possible to access $this in the closure functions, which is required by the code) \nOf course the updated AES.php is still php 4 and < 5.4 compatible, just not using the >= 5.4 closure-function feature but the current encrypt/decrypt() routines.\nBut there was a PHP memory issue, described in detail here ( https://github.com/petrich/phpseclib/commit/7d03e1d6e12eade97027f6036f1de7adb978281b#L0R1449 ) and even i successfully workaround it... i'm not sure it would be a good idea to commit this 3rd AES performance update to phpseclib for this reason.\nThat why i even not send a pull-request (even the patch works 100% with no errors or memory-issues), calling the whole patch experimental, but you can fetch the code here for testing and reviewing it:\nhttps://raw.github.com/petrich/phpseclib/7d03e1d6e12eade97027f6036f1de7adb978281b/phpseclib/Crypt/AES.php\n(you can just replace it with the current AES.php for testing... 100% compatible)\nI also add github comments which describes the updated code... here:\nhttps://github.com/petrich/phpseclib/commit/7d03e1d6e12eade97027f6036f1de7adb978281b\nIf you have time i like to read your comments about this update and if you think it is worth or not to commit it. I'm not sure...\nSch\u00f6ne Gr\u00fc\u00dfe... Hans-J\u00fcrgen :-) \n. Great, i just added your fix in 3DES and Rijndael/AES also... Pull request is on the way...\n. :-)\n. ok... no problem.\nCurrently, while Crypt_Base is on work, the cipher algo and the operation modes are implemented only by inline-crypt code. In (that rare) case of disabled create_function() via php.ini it [trys to] fall back using eval('function ... ') instead of. AFAIK eval() could only disabled by the external Suhosin Zend extention, not via php.ini's disable_functions directive).\n. What i can say that i really was testing the Twofish cipher very deep (with different twofisch implementation, also reference implementation from Bruce Schneier him self :-) ), also the mode of operations. \nSo i guess it's not a cipher fault, even not a mode of operation fault. \nIf you testing on an openssh server... Blowfish cipher is supported , but i never heard or see that Twofish is supported by openssh.\nman sshd_config says: \nThe supported ciphers are: \n\u201c3des-cbc\u201d, \u201caes128-cbc\u201d, \u201caes192-cbc\u201d, \u201caes256-cbc\u201d, \n\u201caes128-ctr\u201d, \u201caes192-ctr\u201d, \u201caes256-ctr\u201d, \u201carcfour128\u201d, \n\u201carcfour256\u201d, \u201carcfour\u201d, \u201cblowfish-cbc\u201d, and \u201ccast128-cbc\u201d\nMaybe that why? \n. (however... Blowfish is also coming the next days Terra... very fast implementation :-) ... that cipher should work with an openssh server)\n. Genau Terra, SSH2 Spec specified Towfish but openssh does not provide it, because openssh is using openssl as cipher-lib and openssl has in general no support for Towfish (why ever...)\nBut there are ssh2 Server which support Twofish as well the other ciphers. Are you able to test it with such an ssh server?\n. The ssh2 server \"lsh\" ( http://www.lysator.liu.se/~nisse/lsh/ )  supports twofish. I was installing and configuring lsh 2.0.4 (!) on my Linux-Kisterl which works fine connecting with openssh's ssh client, and let him then run with the following parameters: \nlshd -c 'twofish-cbc' -v\nmeans: Verbose output and accept only twofish-cbc as cipher[mode]\nThen (using https://github.com/terrafrost/phpseclib/tree/twofish ) using this testscript:\n``` php\ninclude('Net/SSH2.php');\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX);\n$ssh = new Net_SSH2('127.0.0.1');\nif (!$ssh->login('testuser', '***')) {\n    echo $ssh->getLog();\n    exit('Login Failed');\n}\necho $ssh->exec('pwd');\n```\nFailed... :-( \nDebug output from lsh was: \nlshd: read_packet: Receiving too large packet.\n  2759473811 octets, limit is 32768\nlshd: Protocol error: Packet too large\nlshd: read_buffered: fd died, 36 buffered bytes discarded\nlshd: Connection died.\nI figured out that strlen($iv) $ssh gives to Crypt_Twofish()::setIV($iv) was 8bytes... should'nt it be 16 bytes? \nAdditional: First call of Crypt_Twofish(MODE_CBC)::encrypt($plaintext): strlen($plaintext) was not a multiple of 16 bytes, but of 8 bytes... with paddingDisabled.\nAnd: Crypt_Twofish(MODE_CBC)::setKey($key): strlen($key) == 24, but since twofish-cbc is an alias for twofish256-cbc strlen($key) should be 32bytes, not 24.. or?\nSo what i guess is, that $ssh being not correctly informed about using the right blocklength of 16 bytes and keylength.\nCan you check that Terra? (when times permit... ) \n. ok, got it... works now :-)  see pull request here Terra: https://github.com/terrafrost/phpseclib/pull/1/files \nGreetings :-) \n. Great :-) Then Twofish is on place :-) \n( there was an additional small typo in ssh2 realted to twofish... its fixed now, see here: https://github.com/phpseclib/phpseclib/commit/a83166fe4865b109f18d969b392b83c507d9fec7 )\nfor Crypt_RC4() ... i'll try it (again)... but i remember that i couldn't get an appreciable speedup using create_function() which was worth it.\n. Hi Chris... to minimize non-phpseclib faults, can you test, without anything else, just following:\n$ssh = new ...\necho $ssh->exec(\"cat bigtext.txt\");\nDo you get then the full contents of bigtext.txt ... or does it also fail?\n. Chris, thank you for the info. \nSeems to be a phpseclib problem.\nMy test was:\nphp\n$ssh = new Net_SSH2('localhost');\n$ssh->login('testuser', '****************') \necho $ssh->exec('cat /tmp/51MB.txt');\nGot only ~42MB.\nWas calling php 5.4.x (windows) with: \nphp -d memory_limit=1024M -d max_execution_time=0 saug.php > 51MB.txt\nDone in a few seconds (with mcrypt enabled) and a few minutes (without mcrypt)\nWas testing it with all openssh supported ciphers: RC4/AES/Blowfish/3DES with and without mcrypt engine.\nGot currupted... no not corrupted... but got only the first 42MB of the ascii file.\nBut:\nphp\n$sftp = new Net_SFTP('localhost');\n$sftp->login('testuser', '****************')\n$sftp->get('/tmp/51MB.txt', '51MB.txt');\nWas working out of the box... got the full 51MB. md5sum checked.\nSeems to be SSH2.php related...\n. I think this bug will be fixed. \nI,m not able to do it because i'm not much familiar with Net/SSH2.php but only with the Crypt/Crypt_*.php's \nHowever... SFTP will be, imho, the better choice for transfer binary files... for that it was made :-) and with exec('cat file.bin') you'll never know if the \"cat\" utility available on the server, or something like this server/shell/console related.\n. Bantu, after your comment i was able to reproduce this error with the following script which will force the php engine to call Crypt_RC4::__destruct() before Crypt_SSH2::__destruct() on script_shutdown.\n(Note: For Linux, i had to use $i < 11 instead of $i < 6 to trigger the error... for what php-internal reasons ever... maybe on your machine you have playing around with $i)\n(Note: Ensure that the ssh server supports RC4... openssh will support it)\n``` php\nini_set('error_reporting',E_ALL);\nrequire_once('Net/SSH2.php');\nrequire_once('Crypt/RC4.php');\ndefine('CRYPT_RC4_MODE', CRYPT_RC4_MODE_MCRYPT);\n// for ($i = 0; $i < 11; $i++) // on Linux\nfor ($i = 0; $i < 6; $i++) // on Windows \n{\n    $idx = $i % 2;\n    $ssh[$idx] = new Net_SSH2('192.168.184.129');\n    $ssh[$idx]->login('testuser', '****');\n}\necho \"exit(0)\\n\";\nexit(0);\n```\nOutput:\nexit(0)\nWarning: mcrypt_generic(): 325 is not a valid MCrypt resource in Crypt\\RC4.php on line 360\nIt seems, that there are 2 possible ways to avoid this error.\nremoving Crypt_SSH2::__destruct()\nor\nremoving Crypt_RC4::__destruct()\nPersonally... i don't like both ways :-) but in case of... i tend more to removing Crypt_RC4::__destruct() ...\nIs there maybe one more way to fix it?\n. > Do you know whether calling mcrypt_module_close() is actually necessary? Are there any resources wasted if it is not called?\nIt seems not. At least not in the context of __destruct()'ing. It seems that php closing the opened mcrypt module automatically if not needed anymore.\nI wrote a small testscript which checks the memory usage.\nCreates 1000 Crypt_RC4() objects over and over without calling mcrypt_module_close() by skipping Crypt_RC4::__destruct()\nMemory stays stable, even after 1.000.000 rounds.\n``` php\nrequire_once('Crypt/RC4.php');\ndefine('CRYPT_RC4_MODE', CRYPT_RC4_MODE_MCRYPT);\nclass Crypt_RC4_skipDestructor extends Crypt_RC4\n{\n    function __destruct()\n    {\n        return;\n    }\n}\nif (!function_exists('memory_get_usage')) {function memory_get_usage(){};} // if not available, look at Linux::top or Windows::Taskmanager\nfor ($i = 0; true; ++$i) {\n    $idx = $i % 1000;\n    $cipher[$idx] = new  Crypt_RC4_skipDestructor();\n    $cipher[$idx]->decrypt($cipher[$idx]->encrypt('a'));\n    echo \"[$i] [\".str_pad($idx, 3).\"] mem usage: \" . memory_get_usage() . \" bytes\\n\";\n}\n```\nSo it seems safe removing Crypt_RC4::__destruct()\nTested with php4 and 5.0 / 5.1 / 5.2 / 5.3 / 5.4 / 5.5  on win and *nix\n. Yes. But want wait Terra's comment also... maybe we miss something. But this would fix the bug.\n. Bantu, Terra... i removed the __destruct()'or in RC4\n@Deviarte This bug is fixed now. Could you download the current master-branch and let run your application with it? There should be no mcrypt_generic() warnings anymore.\nGreetings :-) \n. I wish you a good vacation time, Terra. No hurry. :-) \n. Currently i review code und phpdoc style and some more optimizations tests. Pull request is comming the next days then Bantu.\n. Hi there...\nfinally i made some CS, phpdoc-formats and performance-optimizations in the Crypt_Base branch.\n... now i like it :-) \nSome notes to the changes:\n- In advance, i removed the __destruct()'or for the ciphers, because they was not really necessary, but make some problems, re: https://github.com/phpseclib/phpseclib/issues/107 ...  this bug is then fixed with the Crypt_Base branch\n- The \"160 / 224-bit key inconsistence-bug\" is also fixed. re: https://github.com/phpseclib/phpseclib/issues/110 with the Crypt_Base branch\n- Double-Code \"bug\" ( https://github.com/phpseclib/phpseclib/issues/109 ) ... of course, is also fixed :-) at least this was the original motivation for Crypt_Base\n- Patrick's 2nd performance commit for inline-crypt, speeding 3DES additional up to +20% (still fascinated )\n- setPassword() will now, if usable, use http://www.php.net/hash_pbkdf2 for the PBKDF2 key derivation method. Not only for performance reasons, but for resource-gentle'ing reasons (no need of require_once 'Crypt/Hash.php') ... hash_pbkdf2() and phpseclib's internal implementation of it are 100% compatible. I was testing it strong. All fine.\n- Crypt_Rijndael() now use mcrypt, if available, for 128/192/256 block/key-lengths by dynamically switching the cipher $engine to MODE_MCRYPT and vice versa for 160/224 block/key-lengths, which mcrypt does'nt support.  This finally makes AES.php just to a wrapper of Crypt_Rijndael()->setBlockLength(fixed 128). Peformance is in each case the same. Virtually there is no need of AES.php but for backward compatibility for existing projects using phpseclib/Crypt/AES.php, i think, we should leave AES.php in there... maybe with a note of that, so one could save one require_once() if using Crypt_Rijndael instead of Crypt_AES with no lost of functionality or speed. The sourcecode of AES.php is nearly empty now :-)\nI was strong testing and long all ciphers and the behavior of the objects to be 100% compatible to the current master-branch of phpseclib. \nExcept for the changes how AES/Rijndael handles now 160/224-bit keys (they must now explicit set bay setKeyLength(160|224)) i can say the Crypt_Base branch is 100% compatible to the master-branch.\nBut yet faster, resource-nicer, lesser sourcecode/mem-usage, easier in maintaining and in adding new Crypt/cipher.php's because all the handling of padding() and continiuosBuffer() etc... is handled by Crypt_Base... stable.\nTerra seems busy as he/you mentioned before... no problem... but i will wait until he's/you're back and for his/your comments ... and if all ok then, i'll send the pull request.\nSo long... nice greetings\nHans-J\u00fcrgen :-)\n. Happy Birthday Terra :-) i'll 40 in 6 days :-)\nPull request on the way...\n@Bantu ... yes, adding PHPUnit cipher-tests is the next on my list :-) Important thing todo. \n. :-) Thank you Terra ... :-)\n. This, besides other duplicate code, is fixed with the upcoming Crypt_Base commit. \n. Hi Terra\nok... i changed it this way. (in the Crypt_Base branch https://github.com/petrich/phpseclib/tree/Crypt_Base )\n160/224-bit keys now only used if explicitly set by setKeyLength() and Crypt_AES will then not use the mcrypt extention even if available for this key lengths to ensure $ciphertext consistence.\nThe above test-script will then output:\nIn case of not explicit set a 160-bit key\nMODE_INTERNAL  [keylen=20]: 3c7845a06c42b499a350edece42720d5\nMODE_MCRYPT    [keylen=20]: 3c7845a06c42b499a350edece42720d5\nAnd only in case of explicitly set a 160-bit key with $aes->setKeyLength(160)\nMODE_INTERNAL  [keylen=20]: e4ad60ab5ad1d195e73896145957e4d7\nMODE_MCRYPT    [keylen=20]: e4ad60ab5ad1d195e73896145957e4d7\n. (sorry for delay... much work...)\n\nI almost wonder if it'd be better to do that with user_error()\n\nAhh...yes. That would be, here, better. Because this error message is only for developer's and sure never will be triggered in productive env's. \nFor public error messages i always try to avoid using user_error()/notice/warning's because they are showing, possible in public, the full system path to the script.\n. I see    :-) \n. I'm also fine with it. It's better readable and better CS. \nI remember that time i was coding/updating those lines in DES.php in the key schedule, asking my self how to do it the best way  ... i didn't want use temp vars for reasons i now can not remember :-) :-) Maybe because in general i try avoiding temp vars... specifically in performance critical code sections... but this is here not the case.\nSo... :+1: \n. I also think the pull request for DES/Twofish is lesser readable. But the CS is of course perfect(er) from the pull request.\nWe (or at least i) had made many such (small) code shiftings for better readability... of the cost of (little) CS.\nPersonally i prefere readability more then \"perfect\" CS.\nOn the other side... uniform CS is imho also important.\nBut i tend more to \"perfect\" readability then to \"perfect\" CS if i have to choose between one of them  :-) :-)\n. Thats true. TripleDES is, on some parts, complicated structured. While implementing Crypt_Base that time i was trying to make it simpler... i think only with little (or even no) success :-)\nOn the other side... are there exists any 100% easy-readable crypt lib on the Net? Maybe its in general not always possible because of the many cases which one must consider implementing all in a most-compatible way.\nMany times i (was) looking to other crypt libs how they do the \"ugly\" things readable, efficient and also fast.\nmcrypt was nightmare... openssl is nightmare :-) even cyassl, where the dev's really tooked explicit care from the beginning of readability was, sometimes, hard to read...\nso i think... phpseclib is, in the current state of readability,  not the worst :-) ... \nArgh.. if i just only have more time... i'm inspired to change something in 3DES to make some things more clearer...\n. Ahh... ok... then i missunderstood you... i was thinking you was referring TripleDES.php as whole... where i would agree :-) But if its only the part of the pull request... in my eyes the old one was better readable.\nSo one may say readability is, besides other things, also sometimes subjective...depends of the eyes of the reader:-)\n. Hi all\n@cnelissen \nmaybe this would also help...\nthe ciphers have two kind (or group) of MODE_* Constants\nThe first \"group\" are the \"mode of operation\" (MODE_EBC, MODE_CBC, MODE_CTR, MODE_CFB, MODE_OFB)\nThe second is the \"crypt-engine\" mode. (MODE_INTERNAL or MODE_MCRYPT)\nThose should be handled independent of each other.\nie: setMode() for the \"mode of operations\"\nand setEngine() (prefered naming) for the \"Crypt-Engine\" Mode.\nAdditional: The MODE Constant in the ciphers are imho deeply \"phpseclib historical\" implemented... so, i think, this would not be a trivial and fast task :-) as far as i remember... there are many traps on this way. Escpacily on the Rijndael cipher but also in general for all ciphers.\nMaybe it's a good idea you make step by step small changes first and skip the MODE_* constant task in the ciphers ... because, i think, this are not a so easy to change... \nAlso $mode could not be a static var and setMode() also not a static class method.... this will create conflicts between the objects which mabye using \"diffrent mode of operations\"... \nGreetings \nHans-J\u00fcrgen :-) \n. Additional to Bantu's last ciphers comments (where i all agree) please also note that some ciphers (at least Rijndael) may change $engine automaticaly/dynamicaly at run time, setting $engine  =MODE_INTERNAL even mcrypt is available but not usable in some cases (ie \"exotic\" $key_length or $block_length)... so $engine also must be non-static.\n. All agree @terrafrost \nBWT: for the php4 branch i have done a public setEngine() Method allready and 95% well tested... months ago but never made a pull request... because of lack of time.\nBut i will do it the next 1 or 2 weeks.\nSo i suggest to wait with the task of the MODE_INTERNAL/CRYPT constant after my Pull request for setEngine() for the php4 branch... if it's ok for all.\nGreetings \n. Hi,\nmaybe it's a similar issue as it was here: https://github.com/phpseclib/phpseclib/issues/105\nAny special characters in dirlist.txt? ie non-ASCII file names in UTF8? \n. additional @simplewhite ... you can try execute the following command:\nls -lR /var/www/ | base64\n(Note: The server must have the base64 program installed which is mostly the case)\nAnd then base64_decode() in PHP the output and check if it's the full expected listing.\nIf yes, then it seems it's a control character case in some filenames or similar...\n. Hi @simplewhite and thank you for testing.\noki... mhh... then it must be something other. \nI was testing a $ssh->exec('ls -laR /') on my linux Kisterl and i got the full listing (~16MB) ... \nCurrently i'm out of idea where the problem is... but there could be many causes why the output is cut'ed off. \nBut In general... are you able to provide us a temporary ssh acount on the server?\n. Hi\nin the meantime i could reproduce your bug report @simplewhite on my linux Kisterl...\nIt happens (only) if php's mcrypt extension is not available and phpseclib use it's internal cipher implementation instead of.\n@ DEV's \nAs far as i have tested it, It happens with all choosen cipher but only and nearly everytime in \"non-mcrypt\" MODE_INTERNAL at random \"position\" / time if the output of $ssh->exec() is huge (on my tests randomly between ~4MB and ~10MB of output).\nTested with: php 5.3 / 5.4 / 5.5 @ Win /  Linux\nAlso it's not a memory_limit or max_execution_time issue... i was setting those to \"unlimited\"...\nI try to figure out why it happens in MODE_INTERNAL... But because i'm not much familar with the Net/*.php's... so maybe @terra you can have a look also on it?... when times permitt it :-) \nMy testscript:\n``` php\nini_set('error_reporting',E_ALL);\n$start = microtime(true);\ninclude_once 'Net/SSH2.php';\nset_time_limit(0);\nini_set('memory_limit',102410241024);#1GB\n$ssh = new Net_SSH2('192.168.184.129');\n$ssh->login('testuser', '****');\n$output = $ssh->exec('ls -laR /usr/');\n// echo $output;\necho substr($output,-100);\necho \"\\n-----\\nEND OF SCRIPT\\n\";\necho \"strlen(\\$output)         = \" . strlen($output) . \"\\n\";\necho \"memory_get_peak_usage() = \" . memory_get_peak_usage() . \"\\n\";\necho \"memory_get_usage()      = \" . memory_get_usage() . \"\\n\";\necho \"time used               = \" . round(microtime(true) - $start, 1) . \"\\n\";\n```\n. @terra ... i was guessing similar but not able to discover it in SSH2.php  :-)\nhttps://github.com/phpseclib/phpseclib/issues/264 fixed the bug on my tests. Now i get the full output (~12 MB) in MODE_INTERNAL\n@simplewhite could you confirm it also?\n. i was wondering why code sniffer comes with the \"\\s at EOF error\" only in php-5.5... mhh...\nFrom https://github.com/phpseclib/phpseclib/commit/dfe264594f11dcd69e51052fb33bd1b41bb3a4c5 i was thinking \\n @ EOF is required... but it seems this changed in the meantime :-) ... all ohter files except the ciphers in Crypt/* has no \\n \nI'll remove the \\n 's ... \n. ahh oki, that why... \nMakes sense. Thank you Andreas for explanation.\nbtw: Over the weekend i was implementing the openssl extension [if available] as 3rd crypt $engine for all ciphers.\nWorks very fine and... very fast :-) up to 10 time faster (ie with RC4) than mcrypt... but averagely 3-4 time faster then mcrypt at all.\nI'm not 100% done with strong-testing but ~80% ... but all looks very good and i think at the weekend i can pull request the openssl $engine patches for review.\nI hope this will not disturb/delay the php5-branch migration too much... but if you/we can wait some days more for the pull request... that would be great.\nGreeetings @ all :-) \n. Hi @ All\nthe weekend was too short... as usual :-) \ni could'nt finished all of my testing and optimizings for the openssl $engine... but the work is ~95% already done.\n...all looks very good.\nI make some bench tests, each cipher de/encrypting 7MB in all mode of operations.\nThe current results are:\nCurrent phpseclib (phpseclib-master without the openssl patches):\n```\nRijndael:   [ 7.7 MB in 0.54 sec. ]\nAES:        [ 7.7 MB in 0.45 sec. ]\nDES:        [ 7.7 MB in 0.84 sec. ]\nTripleDES:  [ 7.7 MB in 1.58 sec. ]\nBlowfish:   [ 7.7 MB in 0.49 sec. ]\nRC4:        [ 7.7 MB in 0.52 sec. ]\nRC2:        [ 7.7 MB in 0.68 sec. ]\nstats sum:  54 MB in 5.1 sec.\n```\nupcoming phpseclib with openssl:\n```\nRijndael:   [ 7.7 MB in 0.23 sec. ]\nAES:        [ 7.7 MB in 0.19 sec. ]\nDES:        [ 7.7 MB in 0.31 sec. ]\nTripleDES:  [ 7.7 MB in 0.63 sec. ]\nBlowfish:   [ 7.7 MB in 0.27 sec. ]\nRC4:        [ 7.7 MB in 0.05 sec. ]\nRC2:        [ 7.7 MB in 0.44 sec. ]\nstats:      54 MB in 2.13 sec.\n```\nI think next weekend (not before.... sorry :-( ) i can pull request the changes then...\nGreetings @ All :-)\n. Hi Terra\nahh... the benchmark was \"phpseclib with openssl\" vs. \"phpseclib with mcrypt\" ... but not \"internal mode\" because that is not possible to get it so fast :-) ... \ni run the benchmarks on windows 7 with php 5.4 ... but on my linux (64bit) Kisterl i got similar results.\nCurrently the \"current phpseclib with \"openssl support\" as $engine is not public available because it's still full of debug code :-) but i'll pull request it the next days...\n. Hi Terra\n\nWhy was the include in the example changed to include_once?\n\nI changed it to be consistent with phpseclib's internal including policy... which is by using everywhere include _once().\nBut mainly to prevent phpseclib users (possible) accidentally make double include's (which will end up with a fatal error)...  inspired by your example codes...  \nFor example: \n``` php\ninclude 'Crypt/TripleDES.php';\n$DES3 = new Crypt_TripleDES();\n// ... much code... or maybe in some other included files of the programmers project...\ninclude 'Crypt/DES.php';\n// Ends up with a fatal error... because TripleDES.php was include DES.php already \n// ...even our everywhere existings \"if (class_exists(...))\" are not able to detect this \n// possible kind double include... \n$DES = new Crypt_DES();\n```\nWith include_once() this could prevent such accidentally double includes...\n\nshould Net/SSH2.php be updated as well?\n\nAhh yes... i think so... for the same reasons...  sorry to forget to mention it\n\nLooking forward to the openssl support PR! :dancer: \n\n:-) its comming soon :-) \n. If possible can we wait until WE for the next PR which include openssl support Terra?... addidtional in this PR there is a small bug in setEngine() (affected only @ AES/Rijndael.php ) which will not work as expected in some cases... but this is fixed in the next PR... \n. i'm confused a little bit :-) because now, the last character which was \\n is removed by the pull request for each file, and they ends with curly brackets... or did i miss something?\n. Ahh... oki... looking it with a hex editor i gets clear now :-) ...  both was tricking me out... the github diffs and my code editor... it seems that after saving a file he automaticlay add an additional \\n to EOF... additional to my last \\n... i have to look how to change this... \noki.. thank you Andreas for clarification\n. @bantu ... ahh yes, of course... it's all ok from my side.\nI did the \\n changes on my local copy of the Crypt/*.php's also already to be syncron.\n. Hi Felix\nLooks like you are sending the command as Latin1 charset but your remote machine/terminal/shell is expecting UTF-8.\nCould check if it works if you send your commands as UTF8?\nie: $ssh->exec(utf8_encode('echo \"\u00d6sterreich | \u00c4\u00dc\u00df\u00fc\u00e4\u00f6\" > umlaut-test.txt'));\n(note: above assumes that your script is saved with latin1 charset encoding) \n. Yes... good journey Terra... and come well back :-) \n. :+1:  drop\n. from my side: all ok. \n. $length not needed... fixed blocksize\n. it was (a little bit) faster. But i'm also not 100% sure it's faster because we saving one if() statement, or because copying the $iv by value 2 times is slower then using a $iv reference, or both.... \nBut consider this speedtest:\n``` php\nmt_srand(1);//fixed\ndefine('CRYPT_RIJNDAEL_MODE',CRYPT_RIJNDAEL_MODE_INTERNAL);\n$cipher = new Crypt_Rijndael(CRYPT_RIJNDAEL_MODE_CFB);\n$cipher->enableContinuousBuffer();\nfor($j=0;$j<3;$j++)\n    {\n        $s=microtime(true);\n        for($i=0;$i<100000;$i++)\n            {\n                $cipher->encrypt(str_repeat('a',mt_rand(1,32)));\n            }\n        echo 'Time: '.round(microtime(true)-$s,3);\n        echo \"\\n\";\n    }\n```\nResult with the current code using $iv and $pos as reference:\nTime: 15.503\nTime: 15.403\nTime: 15.442\nAnd the result with the same code using $iv and $pos the previous way:\nTime: 15.66\nTime: 15.623\nTime: 15.607\nHere the code using $iv and $pos the previous way:\n``` php\ncase CRYPT_RIJNDAEL_MODE_CFB:\n    $iv = $this->decryptIV;\n    $pos = $this->continuousBuffer === true ? $buffer['pos'] : 0;\n    $len = strlen($ciphertext);\n    $i = 0;\n    if ($pos) {\n        $orig_pos = $pos;\n        $max = $block_size - $pos;\n        if ($len >= $max) {\n            $i = $max;\n            $len-= $max;\n            $pos = 0;\n        } else {\n            $i = $len;\n            $pos+= $len;\n            $len = 0;\n        }\n        // ie. $i = min($max, $len), $len-= $i, $pos+= $i, $pos%= $blocksize\n        $plaintext = substr($iv, $orig_pos) ^ $ciphertext;\n        $iv = substr_replace($iv, substr($ciphertext, 0, $i), $orig_pos, $i);\n    }\n    while ($len >= $block_size) {\n        $iv = $this->_encryptBlock($iv);\n        $cb = substr($ciphertext, $i, $block_size);\n        $plaintext.= $iv ^ $cb;\n        $iv = $cb;\n        $len-= $block_size;\n        $i+= $block_size;\n    }\n    if ($len) {\n        $iv = $this->_encryptBlock($iv);\n        $plaintext.= $iv ^ substr($ciphertext, $i);\n        $iv = substr_replace($iv, substr($ciphertext, $i), 0, $len);\n        $pos = $len;\n    }\n    if ($this->continuousBuffer) {\n        $this->decryptIV = $iv;\n        $buffer['pos'] = $pos;\n    }\n    break;\n```\n(php5.4.9 on linux)\n. ... It was compared between \"with reference\" and \"without reference\" (the rest of the code was the same) ... i only wrongly posted the code from decrypt :-) not from encrypt....\nSo here again... the same code, one time using references and one time without:\nCode without using reference:\nphp\n            case CRYPT_RIJNDAEL_MODE_CFB:\n                // cfb loosely routines inspired by openssl's:\n                // http://cvs.openssl.org/fileview?f=openssl/crypto/modes/cfb128.c&v=1.3.2.2.2.1\n                $iv = $this->encryptIV;\n                $pos = $this->continuousBuffer === true ? $buffer['pos'] : 0;\n                $len = strlen($plaintext);\n                $i = 0;\n                if ($pos) {\n                    $orig_pos = $pos;\n                    $max = $block_size - $pos;\n                    if ($len >= $max) {\n                        $i = $max;\n                        $len-= $max;\n                        $pos = 0;\n                    } else {\n                        $i = $len;\n                        $pos+= $len;\n                        $len = 0;\n                    }\n                    // ie. $i = min($max, $len), $len-= $i, $pos+= $i, $pos%= $blocksize\n                    $ciphertext = substr($iv, $orig_pos) ^ $plaintext;\n                    $iv = substr_replace($iv, $ciphertext, $orig_pos, $i);\n                }\n                while ($len >= $block_size) {\n                    $iv = $this->_encryptBlock($iv) ^ substr($plaintext, $i, $block_size);\n                    $ciphertext.= $iv;\n                    $len-= $block_size;\n                    $i+= $block_size;\n                }\n                if ($len) {\n                    $iv = $this->_encryptBlock($iv);\n                    $block = $iv ^ substr($plaintext, $i);\n                    $iv = substr_replace($iv, $block, 0, $len);\n                    $ciphertext.= $block;\n                    $pos = $len;\n                }\n                if($this->continuousBuffer) {\n                    $this->encryptIV = $iv;\n                    $buffer['pos']   = $pos;\n                }\n                break;\nSpeedtest for code without using references:\nTime: 15.601\nTime: 15.574\nTime: 15.956\nAnd here the same code, but using reference:\nphp\n            case CRYPT_RIJNDAEL_MODE_CFB:\n                // cfb loosely routines inspired by openssl's:\n                // http://cvs.openssl.org/fileview?f=openssl/crypto/modes/cfb128.c&v=1.3.2.2.2.1\n                if ($this->continuousBuffer) {\n                    $iv = &$this->encryptIV;\n                    $pos = &$buffer['pos'];\n                } else {\n                    $iv = $this->encryptIV;\n                    $pos = 0;\n                }\n                $len = strlen($plaintext);\n                $i = 0;\n                if ($pos) {\n                    $orig_pos = $pos;\n                    $max = $block_size - $pos;\n                    if ($len >= $max) {\n                        $i = $max;\n                        $len-= $max;\n                        $pos = 0;\n                    } else {\n                        $i = $len;\n                        $pos+= $len;\n                        $len = 0;\n                    }\n                    // ie. $i = min($max, $len), $len-= $i, $pos+= $i, $pos%= $blocksize\n                    $ciphertext = substr($iv, $orig_pos) ^ $plaintext;\n                    $iv = substr_replace($iv, $ciphertext, $orig_pos, $i);\n                }\n                while ($len >= $block_size) {\n                    $iv = $this->_encryptBlock($iv) ^ substr($plaintext, $i, $block_size);\n                    $ciphertext.= $iv;\n                    $len-= $block_size;\n                    $i+= $block_size;\n                }\n                if ($len) {\n                    $iv = $this->_encryptBlock($iv);\n                    $block = $iv ^ substr($plaintext, $i);\n                    $iv = substr_replace($iv, $block, 0, $len);\n                    $ciphertext.= $block;\n                    $pos = $len;\n                }\n                break;\nSpeedtest for code using references:\nTime: 15.403\nTime: 15.529\nTime: 15.499\nIt's everytime slightly faster on my linux machine, php 5.4.9\nI know that using references are, normaly, slower then using non-ref vars. But in this case, it seems not :-) \nIt would be interesting why in this case using ref's even a bit faster than using non-refs... \nDo you get simliar results, switching the encrypt() cfb code using the speedtest above?\n. This discussion is very interessting, yet i could'nt see/find a way (after trying several variants) using non-ref's in the cfb code which will top the performance of the current one.\nHowever... \nIn the meanwhile i wrote a small patch for AES/Rijndael which gives its en/decrypt() a performance-boost between 30% - 35% in all operating modes (ECB, CBC, CTR, CFB, OFB) using MODE_INTERNAL ... :-)\nI'll send a pull request for this after Rijndael.php is reviewed/commited... \nThe performance result will look like this:\nTestcode:\nphp\n// AES, MODE_INTERNAL, CBC, 128-bit key, encrypt/decrypting 1MB\n$aes->decrypt($aes->encrypt(str_repeat('a',1024*1024)));\nTime using the current code:\n14 sec.\nTime using the new code:\n10 sec.\n. here we will create low-range index mixColumns tables instead of high-indexed ones because PHP is faster in accessing such arrays.\nOf course we must change also all index-operations related to those tables (see below).\n. Because we changed the index of the precomputed mixColumn-tables, we must access them here with an additional related rightshift (which cost's PHP not much compared to accessing the same value on a high-range-index array ) to access the correct position.\n. thats a bit faster and smarter :-) \n. unused...\n. The same of course here also...\n. Same princip as we did it with the mixColumn tables...\n. int-keys are a bit faster accessing them later...\n. We accessing the mixColumn tables same as we do it in Rijndael.\nAdditional we using two * four selfrotating $state0-3 int vars rather then one selfsyncing array $state[0-3] because it's about 20-30% faster.\n. php\n$W = $w[0];\n$State0 = $state[1] ^ $W[0];\n$State1 = $state[2] ^ $W[1];\n...\nAccessing the $w mulit-array this way (here and in the main- and finalround) would bring additional 1-2% performance... but currently i skip this for code-readability reasons\n. Here we convert $w/$dw to ($dw ascending) 1-dim-array's (because 1-dim access ist faster then 2-dim access).\nAdditional pop the last 4 elements (for the last round) to the top of the arrays.\nThis way we can access $w/$dw without any expensive ++$counter var but using fast hardcoded indexnumbers in _encrypt/_decryptBlock() ... even in the last round :-) \n. Hope thats ok... to reduce the codesize\n. Related to: https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/DES.php#L532\nThe small Turboloader :-) I forget it last time to add it in AES.php encrypt() also. Done now...\n. I changed the naming of $[old]state0-3 to $s0-3 [$e0-3] only to reduce the codesize a little bit\n. Is there any other way to make this switch-condition without repeating code and not slower in performance? \n. advisedly ... because otherwise it could be easily oversight that here is $e3, and not $s3, if sometime someone change the code here... hope thats ok\n. Inline subWord'ing... and additional to this using only $sbox (formerly $sbox0) because using << 8/16/24 was little faster \nthen accessing and copying the 3 additional precalculated $sbox1-3 arrays each _en/_decryptBlock()\n. $w[0-3] is prepared to be for the final-round while the pre-round will starting with $w[4-7] see here: https://github.com/phpseclib/phpseclib/pull/69/files#L0R606\nThis way the final round everytime knows where it's key-schedule are, and we can save until the end an expensive  ++$counter \n. :-) absolut correct ... the easiest things are sometimes far away... did'nt think to that :-) \n. Huge: Yes. Hack: No :-) It's the inline crypt implementation (gives additional 25% performance)\nA Crypt_Base class, for better code maintain and double code-reducing, is (probably) planed which will move this inline-crypt code (and also the same inline-crypt code in Rijndael.php), besides other double code, to a generic base method which all ciphers then are able to use, so no double code will be there anymore.\nThis is the current result of the discussion between Terra, Patrick and myself (via Email... where we was discussing about the DES.php performance Update from Patrick)\nTerra, Patrick... we should discuss the Crypt_Base issue here in github... so that Bantu is also informed.\n. upss... thanks... just removed\n. We was discussing the implementation of inline crypting this way (using create_function) 3 months ago (re: https://github.com/phpseclib/phpseclib/pull/65 ) and it was for the benefits of ~25% speed up accepted.\nBut not only ~25% speed up was the advantage, also we could highly optimized the Rijndael algo with his different blocksize, which results in same performance as AES with fixed blocksize. Wich results, as a second advantage, in code-reducing in AES.php (where we was then able to remove the whole block-mode and the whole AES optimized fixed-blocksize algo code in AES.php)\nSo there are huge Advantages (code-reducing in AES and a generic Performance+ in all ciphers of ~25%) ... not only disadvantages like bad coding style, unable for bytecode caching (which, in this case, can be ignored anyway), complexer maintaining (which will fixed with Crypt_Base) \nIn my opinion... the Advantages we get from using create_function for highly optimzed fast cipher[mode] code outweighs over the disadvantages of using it.\nBut... it's possible to use the clousre anonymous function instated of create_function/eval... introduced since php 5.3... which means: Real code, bytcode cacheable, [php]modern programming style.\nIn fact, the first implemention of inline crypt was using clousres, of course which was only activated detecting php >= 5.3.\nBut there was, it seems, a unclear \"Bug\" in PHP with the clousres (...possbile memory leak) which i was discussing in dev.php und a core PHP developer confirmed that and add a bugreport related to this here: https://bugs.php.net/bug.php?id=64291\nSo we (respectively Terra) then decided to use create_function (which was also great for full php4 compatibility... so since then all php versions geht the Advantages form inline crypting) waiting for the bug fix in PHP...\nSo thats the current history of the inlinecrypting using create_function().\nIf it now not wanted anymore, after all the previews intensive discussion arround it, i then respect this and are still able to remove it from all ciphers.\nBut personally i say, because phpseclib has on it own special demands (beeing ultra compatible, no PHP module requirements, and be fast as possible... see AES which is the fasted pure PHP-AES-cipher implementation on the Net... and with inline crypting even more... which make, in my opintion, phpseclib unbeatable und that way uniqe for AES)\n... so personally i say: Special demands, special code :-)\n(ahh i just see Terra's comment about it...)\n. For the bytecode caching:\nThe Bytecode caching (which i considred, beside security issues like injecting code in create_function), as mentioned above, can be practicaly ignored.\nBecause that performance+ what bytecode caching brings (for that ~400 lines of code... \u00e4hh $strings to be bytecoded :-) ) is not more than 0.01 sec.\nThis 0.01 sec. is almost done in the first rounds of any cipher of using inlinecrypt. So the missing bytecodecaching speedup is, imho, ignoreable.\nFor memory issue:\nWe/i was considerd, discuss (3 monts ago) and testing it. \ncreate_function(), of course, is using permanent memory and there is no way of release it.\nFor each cipher, process wide, it would be max. 5 function. For each $mode one... process wide (using static class var holding the function name). \nException is Rijndael. the max amount of function creating by create_function is ~50... process wide... of course.\nIn my tests that time (Linux/32bit/php5) using all ciphers, all $modes, all $block_length, all $key-lenght costs additional ~20MB.\nIts possible to reduce it (using if()'s in the function code) of the cost of perofmance to ~5MB (estimated)\nHowever... create_function() will in no case called endless. Independet of the $keys, $modes, $block_size and amount of Crypt_* objects one is using. \nThe design of the inline crypt implementation ensures that.\nSo there is, of course, a memory usage which can not bee freed, but there is no memory leak of endless growing memory.\n. Breaks php 4 compatibility\n. Breaks phpseclib's include policy. Should be: require_once 'Math/BigInteger2dPoint.php'\n. Don't know the reasons :-) but in phpseclib-CS it should be with parentheses\n. I set it to one \\0 byte, to be snycron with what setKey() is doing if no key is set\n. for setPassword() the default key length of the genereated key should higher then 8 bytes.\n. unused\n. for memory reason, it's better to set $pitable as a (\"fixed\") class var. The php internal memory manager share this class var transparently over all instances if $this->pitable \"write-untouched\".\n. Currently, afaik, the official constant names should be still CRYPT_RC2_MODE_* and so on...\n. Crypt_Base is handling completly transparent the $iv's for all mode of operations... even if the user is setIV() never call.\n. Can be removed. Crypt_Base is doing all the work of padding and substr'ing of the $iv to the proper size\n. just an internal cosmetic. with array_unshift(), $l[0] will be set on the top of the internal array elements.\n. As commented... for the first 10 inline crypt functions, we use hardcoded integers instead of the $keys array in the mixing round. That will speed up the en/decryption up to ~20%\n. This is slightly faster than list($r0, $r1, $r2, $r3) = array_values(unpack(\"v*\", $text)); \nAdditional: In inline crypt, we have to en/decrypt always $in, not $text. \n$in is always the block which has to be  en/decrypt.\nWhile $text is the whole cipher/plaintext given to encrypt() / decrypt()\n. The result should not return'ed but set back to $in.\n. Understand. Was reading http://tools.ietf.org/html/rfc2898, paragraph 5.1, step 1 ...\nPersonaly i would still prefere 128 as Default dkLen for RC2, for best security.\nBut your point is absolut valid.... for low-kdf it's too high. \nBecause the other Crypt/*.php ciphers currently using its highest possible dkLen's [between 8 (DES) and 128 (RC4)] as Default for setPAssword()\ni (still :-) ) suggest we are doing the same also for RC2... 128.\nAnd if anytime phpseclib using a low-kdf like PBKDF1 or similar we have to search for a solution anyway.\nie a second default $password_key_size for this low-kdf or automaticaly cutting or something like this.\nHowever... as a compromise...\nWhat about, at least, $password_key_size = 16 ? (or 32? :-) )\nBecause RC2 with a 64bit key... even perfectly generated, isn't it, in todays day, easy to bruteforce such low-keys?\n. Yes... that i was also thinking while editing RC2.php :-)\nHave to do this.\n. > but $this->pitable is changed at line 253:\nNot anymore. setKey(), in this pull request, using only a local copy of  $this->pitable ... not the class var it self. So it will be write-untouched.\n. Yes, the hardcoded pure int's are only possible in the mixing rounds... giving 20% perfomance.\n\nalthough each key value is used once and only once.\n\nonce each 8 byte block... but the whole mode of operation code and cipher algo is merged all inline... so if en/decrypting more then 8 bytes each hardcoded integer of $keys is used strlen($ciphertext) / 8 times.\nThis \"high-speed-feature\" is limited to 10 lambda functions.... Script-runtime wide. \nThat costs, in my tests, 2MB. \n1MB RC2 en/decrypting takes, on my machine, with hardcoded integers inline crypting, 4.2 sec. Without it was about 5.6 sec. \nMemory will not grow unlimited. This is guaranteed. Mem costs: max. 2MB... if using RC2.php which 10 diffrent keys. If using RC2.php with 2 different keys, that 1.4 seconds will cost \"only\" :-) 400kb mem... \nSo i think thats ok... for 20% gain in internal mode... i guess the most users are fine with this deal... hopefully. :-) \n. Good idea. But maybe breaks compatibility with the current behavior of setPasswort() for existing installations of phpseclib.\nAt least, $password_key_size is anyway just a default value. With the 7th arg of setPasswort() each user can define dkLen self, if needed. \nExcept AES/Rijndael.php, currently, all ciphers has set $password_key_size to the highest possible value.\nMaybe we should discuss this issue when setPassword() will support PBKDF1 or similar low-kdf ... for a solution.\nHowever... i let it by you then Patrick... the default value for $password_key_size ... \nPersonaly i think a 64bit key as default for setPassword() is much too low/insecure for PBKDF2 kd. \nWould suggest at least 128bits... $password_key_size = 16\n. > Your optimizations targets cases where a single key is used for a lot of data.\nYes... 200kb for each key is the price (max 10 times). Thats true. \nBut it's not for nothing. It's, practical spoken, for ~1 second waiting or not while en/decrypting 1MB in internal mode.\n\nHowever uses where the key changes often for a limited encryption/decryption volume suffers from them.\n\nYes, that's true. It costs about 0.0005 sec. (or less) for each setKey(). So practically nothing.\nBut for that, it saves, for each object instance about 80kb (on my machine).\n\nYour inlining high optimization suffers from the same symptoms: it recompile the whole code up to eleven times.\n\nThats also true. But we get much more then we pay. \n_setupInlineCrypt() costs, on my machine, <= 0.001 sec. But that we get x times back.\nSo what is better? Pay <= 0.001 sec and get 20% gain back... or not pay 0.001 sec but also not get 20% gain?\n. Currently it is: https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Base.php#L1535\nBut i try to make it more clear. Thank you also Patrick.\n. Good question. I'm not sure. Mcrypt handle the key length automaticaly... maybe Terra was inspired from this? \nOpenssl, on the other side, has fixed key-length ciphers ie AES-128, AES-192, AES-256\nRijndael is hybrid. Automaticaly key length settings and optional fixed via setKeyLength().\nTwofish only determines automaticaly the key length... i was not thinking about setKeyLength() when setting up Twofish :-) \n3DES the same. No setKeyLength() or a second optinal keyLength parameter in setKey().\nPersonaly i tend more to an optional public setKeyLength() in RC2, even i like in general the idea of the 2nd parameter in setKey() also. But will leave it at least by you.\n. True. \nAnd funny ... just today i was also thinking of a potential collision there :-)\nThe reason why i choose using an one way hash function for the code_hash was that i did'nt want, for security reasons, saving the $keys, in cleartext, in the internal $lambda_functions array, where it stays permanent, even if the user unset()'ing his Crypt object.\nBut the collision point is absolut valid.\nWhat do you think about $code_hash = md5(...) . sha1(...)  ?\nThat would, i think, very much reduce the still very rare collision probability. And they are build-in since php4.\nOr maybe there is an other better, at best 100% collision-free, way to (fast) one-way-hash'ing the $code_hash?\nOn the other side... would'nt it be very interesting about a bug report anytime (if ever happens), reporting a md5() collision there? :-) \nWhat do you think Patrick?\n. That would surely eat the gain, or even more, what we earn with \"hardcoded-keys-inline-crypting\"... \nCurrently, i'm not aware of a collision in md5 and sha1 simultaneously. Maybe one user get, maybe in 100 or 1000 years, a collision there with md5. Fallback is then sha1 (respectively vise versa).\nHow extremly minimal is the chance to trigger a collision for both with the same text? \nMaybe the sun will disappeare first :-) or?\nI offer:\n$code_hash = md5(...) . sha1(...) . function_exists('hash') ? hash('whirlpool', ...) : ''\n:-) \nsha1 as 1st fallback, and, if exists (since php5.1.2) whirlpool as 2nd.\nThat would not eat our inline-crypt gain and is, practicaly, out of any collision range.\nAnd if we even ever hear about any collision then there... that information would it absolut worth: A simultan-collision in three popular one-way-hashes. \nWant we make it so? At least until we found a more perfect (and not gain-eating) solution.\n. Currently, the whole cipher class'es are (historycal) deeply designed to set the \"$mode of operation\" on __construct() time... for the whole life time of the object. \nHowever: If (re)changing the \"mode of operation\" ($mode) with a public method from \"the outside\" the current internal cipher state (internal $buffers etc..) has to be also reset/cleared (with: $changed = true)....and maybe some other internal $mode depended settings also.\nSo... a (public) (and non-static) method like setMode() must be deeply tested for each cipher... \nBut in general it's possible but not as trivial as it seems on the first look :-) \n. Right... in case of discarding the existence of the global (and possible pre existing)\n*_MODE_INTERNAL / MCRYPT cipher constants.\n. agree\n. missing \"break;\" here... \nbut will still correctly work with no errors... but on the cost of unnecessary performance lost... after commit the break should be insert here...\n. ",
    "Spomky": "+1\n. Hi, \nI confirm you this implementation works fine. I tested it with some tests vectors from the RFC7520.\n. Hi, \nI decided to create a dedicated library. \nYou will find it at https://github.com/Spomky-Labs/php-aes-gcm\n. ",
    "piotrbaczek": "Ok, so according to https://wiki.php.net/rfc/openssl_aead GCM mode with openssl doesn't work.\nPHP Bugs says: https://bugs.php.net/bug.php?id=67304\nLast comment in aforementioned thread points to: https://github.com/Spomky-Labs/jose/blob/master/src/Util/GCM.php\n. ",
    "discotroy": "Apologies for the necro-post, but did this feature request ever go anywhere?  Did anyone look into the potential for adding GCM support?\n. ",
    "tamagokun": "I like utilizing read() and write(), I think that would work nicely.\nMaybe rather than using exec() to not confuse with the current exec() implementation maybe the method would be: ->execWithPty() or ->execWithPrompt() or ->execInteractive(). This would turn an example into something like:\n``` php\n<?php\n$ssh->execWithPrompt('git clone git@github.com:phpseclib/phpseclib.git');\nif( $output = $ssh->read('/(yes\\/no)/')) {\n  $ssh->write(\"yes\\n\");\n}\necho $output;\n```\nI think getting the output of the execWithPrompt() command this way would be a bit strange though. Could you call $ssh->read() at the end to get all the output? Or would there have to be some sort of ->end() method? Another option would be to use ->read() as more of an fgets() rather than a preg_match(), that way you could do something like:\n``` php\n<?php\nwhile ($output = $ssh->read()) {\n  if (preg_match('',$output)) //do stuff\n```\n. Yeah, i'd be up for this. I agree with the enableTTY() and disableTTY() approach.\nI think to handle read() and write() from distinguishing between an execWithPrompt and using the default _initShell() I think I will just set a flag when they call exec() and then once the channel responds with true or false it will re-set the flag. Sound good?\n. I'm also going to just close out this pull request and i'll make a new one once this is ready.\n. According to phpdoc.org, it looks like they suggest using something like string|null. Honestly, I think using something like Mixed would be just as good, as long as saying something like \"Returns false when x is y\"\n. :+1: Thank you! I like it as well.\n. ",
    "singpolyma": "I am also getting this behaviour.  Sometimes it works, and locally it will discover, but on travis it never seems to work.\n. I've managed to mcrypt working enough for my purposes for now, but this would still be nice :)\n. Thanks so much for the help!. ",
    "thomaskonrad": "I also suggest to revert https://github.com/phpseclib/phpseclib/commit/bfb04dcf4daa36d8f95d2c673ed1585e815e6724 because PHP warns about the presence of two constructors if strict mode is enabled:\nRuntime Notice: Redefining already defined constructor for class Crypt_RSA in [...]/phpseclib/Crypt/RSA.php line 498\n. ",
    "pwolanin": "DO we need a new issue for PHP 5 feautures?  PHP4 has been unsupported/EOL for a couple years now.\n. ",
    "hason": "Another implementation https://github.com/jasonhinkle/php-gpg\n. ",
    "Xeoncross": "Any update on this? I'm going to start looking at the RFC 4880 structure for private keys.\n. ",
    "Vspecimport": "Has there been an update to this as of yet?\n. ",
    "hkjolhede": "Either way, I think that a separate function, f.ex. setattributes, should be created.\n. ",
    "Gemorroj": "@monnerat yes =(\nPerhaps I used the font in the IDE does not support these characters.\nI'll try to get them back..\n. In this case, the comparison string \"strtolower(get_class($encoded))\" and 'file_asn1_element'. Ie, we always compare two strings.Three equals signs - it's just a micro optimization. If you, as an architect does not like this style, I will bring 2 equal signs.\n. ",
    "warhawk3407": "I used this image: http://imageshack.us/a/img803/3123/applicationxexecutable.png\nI have performed more tests, with different files, from videos to text ones and I have this error only with this image... very strange !\n. Ok thanks ! I will try ASAP !\n. ",
    "epoplive": "That sounds good and makes sense to me.  That's kind of why I asked in the first place, I didn't really like the idea of muddying up the  method signature, but I wan't to make sure I didn't break backwards compatibility.  I'll send a new pull request in the next day or so for that.\nYeah, I'm in Austin  :)  Maybe I can buy you a beer some time for your hard work :D\n. Also, the error is always similar, but not the same every time.  Sometimes there's nothing about fputs but still the notice about the connection closing prematurely.  Other times I get an error saying 'Connection reset by peer' instead of 'Broken pipe'\n. Here's an example of the 'Connection reset by peer' version:\nPHP Notice:  fputs(): send of 36 bytes failed with errno=104 Connection reset by peer in /redacted/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2847\nNotice: fputs(): send of 36 bytes failed with errno=104 Connection reset by peer in /redacted/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2847\nupdating file log...\nError downloading file!\nPHP Notice:  Connection closed prematurely in /redacted/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2815\nNotice: Connection closed prematurely in /redacted/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2815\n. I'm in the process of moving, so I can do a bisect in a couple of days.  Mainly just wanted to post the errors now before it slipped my mind.  I'll see what I can do about getting back with the logs, I'll have to scrub them for revealing data though since it's a private network.\nThanks.\n. Sacramento...back to Cali, wewt!  I probably can't get the logs until monday, I don't have direct access to the SFTP server the files are on.  \nEverything going well on your end?  Was good meeting up with you, hope all is well!\n. FYI this is still happening with the newest version, but I don't think I can get access to the server logs.\n. ",
    "Xenland": "Whoops i forgot to merge the last commit ( https://github.com/phpseclib/phpseclib/commit/11a6b1a1afdb16370c6de2050fd139a6f0bb5abd#phpseclib/Crypt/RSA.php ) I will have to check\n. Okay thanks\n. Gotcha, It seems this library is more for PEAR anyways, and thus shouldn't use this patch if that\u2019s its' intended use. However in my case I just downloaded the library as a zip file and this patch seems to have worked for that style of installation. Cheers :dancer: \n. ",
    "SergeyTsalkov": "Sorry, I should be clearer about what I was trying to do. I wanted to use read() and write() to interact with SSH2, and needed to identify the prompt in a more reliable way than just doing setTimeout(1) and hoping that was enough time. Also, I didn't want to wait the full second if I could get the prompt faster.\nSo I just did a write(\"\\n\") and then watched for 2 identical lines, one above the other. To watch as quickly as possible, I setTimeout(0.02) and commented out the _close_channel() line in _get_channel_packet(). I could then call read() really fast in a loop until I find the two lines. However, in doing this, I ran into the bug described above.\nIn addition to the above bugfix, it'd be great if the SSH2 class got some sort of identify_prompt() function. You shouldn't have to wait a full second -- that might be too long, or not enough time.\n. I would suggest doing \"return true\" rather than \"break\" though. \"break\" in that context might result in the subsequent fread call blocking indefinitely, even though that's not supposed to happen if we're using the timer feature.\nI would suggest this:\n```\nwhile (true) {\n  if ($this->curTimeout) {\n    if ($this->curTimeout < 0) {\n      $this->_close_channel($client_channel);\n      return true;\n    }\n...\n\n```\nThis idea is, having the timer go negative while looping is no different than if stream_select runs out of time while waiting for the stream to unblock. Both conditions mean we're done and it's time to return.\n. Yeah, that's a tough one. When I was using setTimeout to get the prompt, I obviously had to disable the close channel line. But I realized that this strategy is not good enough because some prompts hold the working directory name, or even the current time in them. Since the prompt can change after every command, I can't just identify it this way.\nMy current strategy, which seems to be working pretty well, is to run the command \"PS1=whatever\" to set the prompt to a randomly generated string. This is easier than trying to identify the prompt, I'm no longer doing weird things with setTimeout, and the random string prompt is pretty easy to watch for with the read command.\n. ",
    "mdesign83": "I found a typo, so i created a new pr, and closed this.\n. I needed only status 11 and 24, but i created the full list for sure.\nI created the list about this page: http://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#section-9.1\nOur partner's sftp server info:\nProtocol info:\nSession protocol = SSH-2\nSSH implementation = xlightftpd_release_3.7.5\nEncryption algorithm = aes\nCompression = No\nFile transfer protocol = SFTP-5\nCapabilities:\nCan change permissions = Yes\nCan change owner/group = No\nCan execute arbitrary command = No\nCan create symlink/hardlink = Yes/No\nCan lookup user groups = No\nCan duplicate remote files = No\nCan check available space = No\nCan calculate file checksum = No\nNative text (ASCII) mode transfers = Yes\n. Sorry but i can't help. I use phpseclib with our partner's ftp server, and i don't know the setup.\n. ",
    "ravage84": "I guess you are right. You know your code better.\nI've never worked with phpseclib before and my fix was really a quick one to get the noise away :-)\nFeel free to commit directly.\nThanks for your fine work!\nGreetings from Switzerland\n. http://keepachangelog.com/ has some ideas about handling change logs.\nI personally would keep only one change log.\nStarting a new one for each new major release (SemVer-wise).\nAll pre-stable releases are also kept in this change log.\nSo all 0.x.x releases including all beta and RC releases of 1.x would be kept in the change log which is included in the code tree of 1.x\n. @terrafrost\nThe CHANGELOG.md for the 2.0 branch starts with whatever version was developed for this branch first (normally a pre stable release, such as 2.0.0-beta1). So people can see the changes that happened towards the first major stable of that branch.\nI would not mind having the full back log of changes that happened before that branch, but it creates an interesting problem when you have more than one branch actively maintained.\nAlso I don't think there is much of a benefit of having the full change log in a branch of  a later release, because if you are using the 2.x release and really need to know what changed within the lifecycle of the 1.x release you can simple look it up in that branch.\n. ",
    "simensen": "@bantu thanks for adding the documentation link. :)\nFor some more context, I don't know much about this project. I found it by way of Box and noticed that it had a dependency on dev-master. Thought I could help make it so that people could require 0.3@dev instead of dev-master. :) https://github.com/kherge/Box/blob/master/composer.json#L23\n. There are a lot of ways you can handle it. If you get to the point that you want master to represent the 0.4 line, you can simply update the branch alias to 0.4-dev. That would be the easiest.\nThe branch aliases are only paid attention to in the branches themselves. So when composer explores the master branch, it will only look in master's composer.json to find its mapping.\nOverall it is pretty safe. The only thing you have to remember is to update the alias from 0.3 to 0.4 once you decide to make the swap.\nYou can also push a branch named 0.3 once you make the transition and it will automatically be considered 0.3 dev. A simple example of that would be here:\nhttps://packagist.org/packages/sculpin/sculpin\nI have my old 1.0 branch and that automatically gets treated as 1.0.x-dev based on the name of the branch. I also have a master branch that represents the 2.0.x-dev line of development. I have a branch alias setup so you see: dev-master / 2.0.x-dev\nWhen I decide it is time to move to 3.0, I'll create a branch for 0.2 off of master and then update the branch alias for master to 3.0.\nHere is another blog post talking about it a bit. https://igor.io/2013/01/07/composer-versioning.html There is also this one that talks a bit more about why dev-master specifically can be problematic. https://igor.io/2013/02/07/composer-stability-flags.html\nIf you have more questions or concerns I'm happy to talk about it more! There are a lot of benefits to this and if people see downsides, it is good to find out what they are. :)\n. ",
    "johnsterling": "Sure, I'll be glad to address any concerns or suggestions that may arise.\n. > It's not actually setting global variables. The idea is... say you have $zzz = new Net_SFTP(...). Then you do sftp://$zzz/path/to/filename.php. The method will declare $zzz global and try to access it with a scope that'd let it be accessed.\n\nIt isn't 100% compatible with libssh2's method. With libssh2, in my testing, as I recall, \"sftp://$zzz/\" and 'sftp://$zzz/' both work. With phpseclib's stream wrapper just 'sftp://$zzz/' works.\n\nHi, I thought I'd chime in here since I kind of like the expressiveness of this usage. I haven't done any actual testing to back this up, but my impression is that this could be implemented by leveraging the __toString() magic method.\nOne might maintain a static array of instantiated SFTP instances and assign each an ID string (could just be int-based, like a resource type). __toString() would return the current instance's ID. Then in the stream wrapper, the ID is looked up in the static array and resolved to an actual instance.\nI believe this implementation is implied in the PHP documentation for ssh2://, in the explanation under Example 2:\n\n[...] $connection_string does not hold a reference to the $session variable, just a string cast derived from it.\n\nThis approach, while adding a bit of overhead to maintain the registry of instances, would allow scope-independent referencing of SFTP instances. This would prevent the use of 'sftp://$zzz/' in favor of exclusively \"sftp://$zzz/\" though, so if ssh2:// supports that then perhaps the above isn't the whole story. I do think it would be a reasonable alternative to exclusively supporting the former as phpseclib does currently.\n. ",
    "uuf6429": "Hello,\nYes something like that would suffice.\nChris.\n. Looks great!\nThanks, Chris.\n. I wrote a small test-case for transferring a 1kb 7zip file and it seems to work. I don't know what's the problem at this point.\n. Doing the same process on a newly-compressed 13.62mb file, only 4.66mb get transferred:\n```\nDEBUG psl_ssh_size /root/transfer.7z\nDEBUG psl_ssh_exec (ls -al \"/root/transfer.7z\") Transferred 63 bytes in 0.51s\n  Transfering archive file (13.62 MB)...\nDEBUG psl_ssh_move\nDEBUG psl_ssh_exec (cat '/root/transfer.7z') Transferred 4.66 MB in 14.12s\n  Extracting archive file...\n    Execution Output:\n    7-Zip (A) [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18\n    p7zip Version 9.20 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,2 CPUs)\nProcessing archive: /tmp/transfer_TzaUwt\n\nError: Can not open file as archive\n\nFATAL ERROR: Unexpected exit code from 7za. (line 432)\n```\nNote that between psl_ssh_exec and running 7za for extraction, the file was moved from /root/transfer.7z to /tmp/transfer_TzaUwt (as 7za utility correctly said).\nEdit 1: Interesting to note, the file size of the transfer isn't always 4.66mb (a second try resulted in a 4.65 transfer).\nEdit 2: I could provide an SSH log (from phpseclib), but to my eyes the log seemed ok. It's as if the remote server decides how much data it should send. Maybe a limitation in cat?\nEdit 3: Also, this problem seems to scale according to file size. On bigger files, more data is transferred, but something always messes up.\n. http://pastebin.com/zcTfGRiP\nI'm sorry to say there's a lot of bloat in there. :(\nI tried cleaning it up as much as possible. Points of interest are lines 50 up to 74.\n. Hey, no hurries. I'll be messing with this myself maybe I could figure it out.\nI didn't mention it, but it's a great piece of software.\nThanks!\n. Hello!\nI ran some more tests:\n- python.tar.bz2 (11.25mb binary) - only 1.57mb after 5.74s\n- icudt.7z (2.67mb binary) - only 296kb after 2.21s\n- bigtext.txt (7mb text) - only 328kb after 2.19s\n- tezt.zip (74kb binary) - fully passed (and md5sum matched)\nThings to note:\n- problem is not related to a fixed time (since time taken is variable)\n- problem is not related to content type (since text transfer failed as well)\n- extremely small files (in the kb range) seem to pass fine\nModified code:\nhttp://pastebin.com/JUMueXyn\nThe above code should be leaner than the previous one.\nDon't mind the password...I changed it as soon as I realized my stupid mistake...hmpf.\nThanks,\nChris.\n. Hello,\nI did test that earlier and just tried it right now, I get the same issue (reading that file yielded 328kb of data).\n. ```\n    <-\n    00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n    00000010  34:2e:33:0a                                      4.3.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:67:6d:70:29:0d:0a           b_0.3 (gmp)..\n\n<- NET_SSH2_MSG_KEXINIT (0.1136s)\n00000000  66:c7:ad:68:24:7f:06:e0:0f:0a:f3:9e:61:2b:95:5a  f..h$.......a+.Z\n00000010  00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...Ydiffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68  llman-group14-sh\n00000050  61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61  a1,diffie-hellma\n00000060  6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00:00  n-group1-sha1...\n00000070  0f:73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73  .ssh-rsa,ssh-dss\n00000080  00:00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61  ....aes128-ctr,a\n00000090  65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36  es192-ctr,aes256\n000000a0  2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c  -ctr,arcfour256,\n000000b0  61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31:32  arcfour128,aes12\n000000c0  38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62  8-cbc,3des-cbc,b\n000000d0  6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73:74  lowfish-cbc,cast\n000000e0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000f0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72  bc,aes256-cbc,ar\n00000100  63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63  cfour,rijndael-c\n00000110  62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73  bc@lysator.liu.s\n00000120  65:00:00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c  e....aes128-ctr,\n00000130  61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35  aes192-ctr,aes25\n00000140  36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35:36  6-ctr,arcfour256\n00000150  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n00000160  32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c  28-cbc,3des-cbc,\n00000170  62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73  blowfish-cbc,cas\n00000180  74:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d  t128-cbc,aes192-\n00000190  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61  cbc,aes256-cbc,a\n000001a0  72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d  rcfour,rijndael-\n000001b0  63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e  cbc@lysator.liu.\n000001c0  73:65:00:00:00:55:68:6d:61:63:2d:6d:64:35:2c:68  se...Uhmac-md5,h\n000001d0  6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:72:69  mac-sha1,hmac-ri\n000001e0  70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70  pemd160,hmac-rip\n000001f0  65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63  emd160@openssh.c\n00000200  6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c  om,hmac-sha1-96,\n00000210  68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:55:68  hmac-md5-96...Uh\n00000220  6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68:61  mac-md5,hmac-sha\n00000230  31:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  1,hmac-ripemd160\n00000240  2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30:40  ,hmac-ripemd160@\n00000250  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000260  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64  -sha1-96,hmac-md\n00000270  35:2d:39:36:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69  5-96....none,zli\n00000280  62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00  b@openssh.com...\n00000290  15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73  .none,zlib@opens\n000002a0  73:68:2e:63:6f:6d:00:00:00:00:00:00:00:00:00:00  sh.com..........\n000002b0  00:00:00                                         ...\n\n-> NET_SSH2_MSG_KEXINIT (0.0001s)\n00000000  e1:5e:ba:80:b9:d3:c1:98:70:b9:a3:de:fb:d6:88:d3  .^......p.......\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  76:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  varcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c:61  our128,arcfour,a\n00000080  65:73:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32  es128-cbc,aes192\n00000090  2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c  -cbc,aes256-cbc,\n000000a0  61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39  aes128-ctr,aes19\n000000b0  32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72  2-ctr,aes256-ctr\n000000c0  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n000000d0  62:63:2c:6e:6f:6e:65:00:00:00:76:61:72:63:66:6f  bc,none...varcfo\n000000e0  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n000000f0  2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38:2d  ,arcfour,aes128-\n00000100  63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61  cbc,aes192-cbc,a\n00000110  65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:32:38  es256-cbc,aes128\n00000120  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n00000130  61:65:73:32:35:36:2d:63:74:72:2c:33:64:65:73:2d  aes256-ctr,3des-\n00000140  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non\n00000150  65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d:39  e...0hmac-sha1-9\n00000160  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n00000170  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n00000180  2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73:68  ,none...0hmac-sh\n00000190  61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c  a1-96,hmac-sha1,\n000001a0  68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63  hmac-md5-96,hmac\n000001b0  2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e  -md5,none....non\n000001c0  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n000001d0  00:00:00:00:00:00                                ......\n\n-> NET_SSH2_MSG_KEXDH_INIT (0.0001s)\n00000000  00:00:00:81:00:c3:41:0a:9e:05:a2:ba:c1:79:59:a3  ......A......yY.\n00000010  a3:ef:34:13:74:f4:2b:99:2b:7f:62:e0:a2:e9:c9:a6  ..4.t.+.+.b.....\n00000020  40:57:8d:a1:55:a0:4d:69:e5:38:5a:0a:75:f5:5a:9f  @W..U.Mi.8Z.u.Z.\n00000030  77:e2:fc:f1:e2:6f:bc:03:93:67:04:10:6c:f0:c6:95  w....o...g..l...\n00000040  aa:53:83:59:b8:7a:2a:a9:30:43:a1:76:42:e0:d5:d0  .S.Y.z*.0C.vB...\n00000050  f6:3a:3b:f4:90:76:54:9b:b3:bb:be:71:12:0c:64:49  .:;..vT....q..dI\n00000060  78:77:f1:e5:a1:11:79:1b:10:60:36:e8:c1:41:57:b3  xw....y..`6..AW.\n00000070  e6:3f:22:9c:5c:9b:ac:52:90:b5:fd:6b:29:37:29:3c  .?\".\\..R...k)7).\n00000080  a8:37:7f:5a:58                                   .7.ZX\n\n<- NET_SSH2_MSG_KEXDH_REPLY (0.264s)\n00000000  00:00:01:15:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:01:01:00:a4:b3:62:1c:fc:5c:52  ...#.......b..\\R\n00000020  ca:ff:75:33:c4:44:62:8d:26:84:3c:9d:6a:73:7d:8c  ..u3.Db.&...js}.\n00000030  58:be:37:8a:c0:37:40:6b:48:03:f1:26:9c:d7:ec:3a  X.7..7@kH..&...:\n00000040  fa:00:a2:10:77:7e:68:cc:a8:a1:cc:26:1e:e2:43:2e  ....w~h....&..C.\n00000050  0f:cc:ee:bb:42:b2:dd:23:aa:6c:70:37:c2:b5:5d:e5  ....B..#.lp7..].\n00000060  85:9a:8b:c6:69:6e:ae:9a:cf:ba:fd:bf:27:45:fc:6a  ....in......'E.j\n00000070  93:17:c3:d2:7c:e7:ae:93:eb:cd:76:8b:52:54:4e:71  ....|.....v.RTNq\n00000080  d7:1b:88:ac:15:eb:6f:18:00:24:4a:fc:a6:c1:4e:81  ......o..$J...N.\n00000090  8c:89:10:32:6c:47:26:1a:b3:f9:c6:9c:56:31:c3:4f  ...2lG&.....V1.O\n000000a0  85:55:4e:24:70:c7:97:11:84:f7:69:6f:c1:5f:c6:08  .UN$p.....io._..\n000000b0  d8:2b:78:5f:ab:86:fa:45:13:6c:e7:e8:8e:60:8f:34  .+x_...E.l...`.4\n000000c0  e0:fd:5e:bb:6e:3e:a6:44:0f:ba:7b:05:62:15:4d:76  ..^.n>.D..{.b.Mv\n000000d0  b6:20:cb:2b:7a:5e:f4:dc:f1:e9:96:85:d3:80:9c:6e  . .+z^.........n\n000000e0  7e:bd:ba:df:1c:41:da:49:03:0c:85:8b:16:50:61:20  ~....A.I.....Pa \n000000f0  e9:93:7d:be:91:ab:f2:1f:31:9f:40:40:29:db:82:54  ..}.....1.@@)..T\n00000100  6c:ad:7a:fc:f5:c5:0e:76:bb:5c:40:ce:46:e4:3e:fa  l.z....v.\\@.F.>.\n00000110  90:79:28:e7:85:7e:b1:bf:19:00:00:00:81:00:a8:65  .y(..~.........e\n00000120  59:93:c2:7f:58:6a:57:31:30:be:24:ed:7b:e7:85:74  Y...XjW10.$.{..t\n00000130  2f:85:9c:d6:d5:a5:68:65:ff:16:07:d3:82:88:a9:ea  /.....he........\n00000140  5c:fe:05:ea:73:60:61:24:5d:f5:43:72:c4:2d:a7:30  \\...s`a$].Cr.-.0\n00000150  1a:8d:90:a6:60:d9:4e:ce:de:82:f0:45:45:b5:fb:fe  ....`.N....EE...\n00000160  cc:0c:33:3d:fd:1c:5e:cb:63:ae:24:c1:79:b3:88:5e  ..3=..^.c.$.y..^\n00000170  30:22:d8:b8:b1:b7:82:5e:33:ef:5e:fb:a3:81:94:94  0\".....^3.^.....\n00000180  94:3e:30:d2:be:c5:b9:8f:4b:1d:4b:7b:57:2f:ba:80  .>0.....K.K{W/..\n00000190  56:bd:17:82:9b:0b:69:61:6c:94:56:85:64:a8:00:00  V.....ial.V.d...\n000001a0  01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00:01  ......ssh-rsa...\n000001b0  00:21:75:e3:ed:7a:eb:f3:ba:3c:13:6d:b9:45:dc:dc  .!u..z.....m.E..\n000001c0  80:4a:e1:c0:38:9a:71:52:f8:17:42:7d:cc:05:2a:30  .J..8.qR..B}..*0\n000001d0  e2:37:1d:ed:e0:f8:76:36:b8:68:09:ea:aa:7a:ef:73  .7....v6.h...z.s\n000001e0  2d:ed:a6:43:7d:68:1f:c9:c8:1d:34:2e:43:75:1a:5e  -..C}h....4.Cu.^\n000001f0  f5:b7:79:92:48:e9:c0:96:c4:24:8f:24:00:56:00:df  ..y.H....$.$.V..\n00000200  7a:f1:00:63:d0:fc:99:c3:d4:e9:71:e1:2c:bc:53:1b  z..c......q.,.S.\n00000210  31:32:2a:df:d2:b3:0c:f4:15:d7:38:6a:08:45:44:7b  12*.......8j.ED{\n00000220  df:e2:17:bf:01:e4:83:d6:39:e2:ce:01:8b:8a:17:39  ........9......9\n00000230  70:47:3d:c5:a1:7f:90:d2:33:49:59:9a:d7:b7:ed:0d  pG=.....3IY.....\n00000240  16:95:11:6e:de:3b:d7:b8:91:6c:c5:3c:4d:de:53:64  ...n.;...l..M.Sd\n00000250  63:30:3f:ef:ae:ad:5d:71:d5:41:aa:8b:4d:85:a5:80  c0?...]q.A..M...\n00000260  eb:3e:26:04:b5:c9:04:ec:40:50:d8:f5:cc:75:c2:7f  .>&.....@P...u..\n00000270  69:9e:e7:60:5c:e0:e7:34:97:b5:2e:93:ba:1e:05:f2  i..`\\..4........\n00000280  77:01:61:f5:ff:b6:65:aa:22:b4:6a:2e:d9:7c:e2:dd  w.a...e.\".j..|..\n00000290  74:b7:1b:46:59:cb:0a:da:60:d3:c3:58:20:3a:ea:b1  t..FY...`..X :..\n000002a0  b0:b7:c2:aa:1f:b8:a8:86:87:cb:23:8c:25:be:2e:6a  ..........#.%..j\n000002b0  c4                                               .\n\n-> NET_SSH2_MSG_NEWKEYS (0s)\n\n\n<- NET_SSH2_MSG_NEWKEYS (0s)\n\n\n-> NET_SSH2_MSG_SERVICE_REQUEST (0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n\n<- NET_SSH2_MSG_SERVICE_ACCEPT (0.2542s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (0s)\n00000000  32:00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00  2....username...\n00000010  0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00  .ssh-connection.\n00000020  00:00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08  ...password.....\n00000030  70:61:73:73:77:6f:72:64                          password\n\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (0.1889s)\n\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (0.1111s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00  ................\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  15:63:61:74:20:2f:72:6f:6f:74:2f:62:69:67:74:65  .cat /root/bigte\n00000020  78:74:2e:74:78:74                                xt.txt\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (0.1137s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (0s)\n00000000  00:00:00:00                                      ....\n\n<- NET_SSH2_MSG_CHANNEL_DATA (0.0086s)\n00000000  00:00:00:00:00:00:40:00:64:76:64:66:66:73:62:66  ......@.dvdffsbf\n00000010  73:64:62:67:64:66:64:73:67:66:64:68:64:76:64:66  sdbgdfdsgfdhdvdf\n00000020  66:73:62:66:73:64:62:67:64:66:64:73:67:66:64:68  fsbfsdbgdfdsgfdh\n00000030  64:76:64:66:66:73:62:66:73:64:62:67:64:66:64:73  dvdffsbfsdbgdfds\n00000040  67:66:64:68:64:76:64:66:66:73:62:66:73:64:62:67  gfdhdvdffsbfsdbg\n00000050  64:66:64:73:67:66:64:68:64:76:64:66:66:73:62:66  dfdsgfdhdvdffsbf\n00000060  73:64:62:67:64:66:64:73:67:66:64:68:64:76:64:66  sdbgdfdsgfdhdvdf\n<--------------------------------- snip ---------------------------------->\n00003f90  64:66:66:73:62:66:73:64:62:67:64:66:64:73:67:66  dffsbfsdbgdfdsgf\n00003fa0  64:68:64:76:64:66:66:73:62:66:73:64:62:67:64:66  dhdvdffsbfsdbgdf\n00003fb0  64:73:67:66:64:68:64:76:64:66:66:73:62:66:73:64  dsgfdhdvdffsbfsd\n00003fc0  62:67:64:66:64:73:67:66:64:68:64:76:64:66:66:73  bgdfdsgfdhdvdffs\n00003fd0  62:66:73:64:62:67:64:66:64:73:67:66:64:68:64:76  bfsdbgdfdsgfdhdv\n00003fe0  64:66:66:73:62:66:73:64:62:67:64:66:64:73:67:66  dffsbfsdbgdfdsgf\n00003ff0  64:68:64:76:64:66:66:73:62:66:73:64:62:67:64:66  dhdvdffsbfsdbgdf\n00004000  64:73:67:66:64:68:64:76                          dsgfdhdv\n\n<- NET_SSH2_MSG_CHANNEL_EOF (0s)\n00000000  00:00:00:00                                      ....\n\n<- NET_SSH2_MSG_CHANNEL_CLOSE (0s)\n00000000  00:00:00:00                                      ....\n\n```\n. Please note that I purposefully snipped a part of it (in the middle) since the whole log is slightly larger than 1mb.\n. Petrich, I've been able to transfer the file via scp (cli), php ssh/scp and phpseclib/scp.\n. Hmm.\nGuess I could use my Custom_Net_SSH2 hack with Net_SFTP and get progression support anyway.\nChris.\n. My original code centred around PHP's SSH library, as such there was absolutely no way of modifying ssh2_scp_recv()... so I developed the asynchronous ssh2_exec() solution, which happened to be very slow.\nIt's about time I upgrade my codebase for real.\n. Hi!\nI rewrote my code to work with Net_SFTP and it's working great!\nHowever, I encountered the following minor bug:\nPHP Notice:  Undefined variable: status in /root/phpseclib/Net/SFTP.php on line 1570\n. ",
    "vlajos": "found one more... (it is in the same branch)\n. ",
    "deviarte": "PHP Version 5.3.2-1ubuntu4.18\nMCrypt:\nVersion 2.5.8\nApi No  20021217\nSupported ciphers   cast-128 gost rijndael-128 twofish arcfour cast-256 loki97 rijndael-192 saferplus wake blowfish-compat des rijndael-256 serpent xtea blowfish enigma rc2 tripledes\nSupported modes cbc cfb ctr ecb ncfb nofb ofb stream\n. ",
    "dongilbert": "\"Breaks PHP 4 compatibility\" \nReally? Who cares? Tag a new version and tell PHP 4 users to use x version or below. Semantic versioning FTW!\nYou have a good library, I've used it myself, but holding in to PHP 4 compatibility and not embracing modern PHP is really holding back adoption. People just look elsewhere. \n. ",
    "salmonila": "i think what is holding back more wide spread adoption is that this lib is a few 100kb big. dumping in a third party lib that doubles the size of your project may not be that desirable. not that there's any real alternative short of just not supporting ssh / sftp in your project.\n. Is there some feature or bux fix that you need that was introduced post-0.3.5? If not it seems to me that using the 0.3.5 tag would be perfectly acceptable?\n. As the saying goes if its not broke dont fix it. Maybe a new version fixes some bugs but maybe it inadvertently adds new ones too. Regression tests can catch old bugs reappearing but not new bugs.\nPersonally I think that if its working for you you should just leave well enough alone?\n. When I've done phpdoc it's mostly been just me guessing at the format and how it'd look in the HTML phpDoc produced. When changing other peoples phpdoc, however, I think it'd be best not to guess. After all, who wants to be that guy who took working code and broke it?\nI think if you're going to make phpdoc changes you should post a copy of the final result online for people to review. ie. not just the code but the rendered result as well.\nJust my two cents. I think it'd make it easier to review.\n. As I've said before I don't know C# and I don't know what the API you're\nusing is trying to do internally. My posts were an attempt to help you\nachieve interoperability based on my best guess as to what the C# code\nseemed to be doing.\nBut let's dispense with interoperability for the time being and let's just\nconsider the PHP code.\nYou're not verifying the signature of the message - you're verifying the\nhmac of the message. I guess the hmac of the message could be considered to\nbe a message but you're not verifying the message directly.\nAs for the 64 bytes..  you're not creating the HMAC with phpseclib. You're\ncreating it with hash_hmac. That's a native PHP function and it's output is\nhex encoded. If C# is outputting 32 bytes it's probably not hex encoded.\nFWIW phpseclib can make it's own hmacs but that's not what you're using to\ndo so. In order for hash_hmac to output non hex encoded data you need to\npass a fourth parameter to it - true.\nOn Nov 16, 2017 7:10 PM, \"Robofolk\" notifications@github.com wrote:\n\nI really appreciate if someone shed some lights on the mystery of 64\nbytes as highlighted and explained in the above post.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1209#issuecomment-345114606,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFl4PNWVaoWSL69kaKwHF85kUiDfCNHnks5s3N0YgaJpZM4Qcnmj\n.\n. \n",
    "VaclavSir": "PEAR is a dead project, following its standards doesn't make any sense to me. I think providing wider compatibility makes much more sense, but it's up to you.\n. ",
    "smergler": "Bantu, I have changed it to use dirname(FILE) which is comparable and compatible with old versions of PHP \n. I've actually been integrating it into a script using lithium https://github.com/UnionOfRAD/lithium and they call scripts from different directories.  I would get errors like 'path/to/Net/Crypt/Random.php' not found which is why I wrote in with absolute paths \n. ",
    "ChrisRiddell": "Having a configuration parameter for a persistent connection would be very useful.\n. ",
    "hohl": "Would like to see that too. SSH login taking too long when often running short execs.\n. ",
    "oijkn": "Hi, sorry for this big bump but i need a persistent connection for my project.\nThe main command trough ssh run a deamon shell (moshell) and that take 15s. For now I have to reconnect every time and it's really long process. I tried to change pfsockopen() instead of just fsockopen() but the result is the same. There any alternative to maintain the ssh connection or call it back ? Thx you in advance for your support.\nBR . @terrafrost This approach is good is you run a standard SSH connection. In my case I have another step after the SSH login, I execute a Daemon Shell (motshell for Motorola Management Device), this process need 10/15 sec to access at the app and then I execute a lot of successive commands. So you can see i can't use your \"sleep\" trick i would like to keep my motshell alive and access to it when i want. Can you help me with this request please ? Thx for the support !\nBR. @terrafrost Yes i use the interactive read/wrtie functions with enablePTY. Here is a piece of my code, for exemple : \n```php5\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('...');\nif (!$ssh->login('user', 'pass')) {\n    exit('Login Failed');\n}\n$ssh->write(\"ping 127.0.0.1\\n\");\n$ssh->enablePTY();\n$ssh->read('/.@.[$|#|>]/', NET_SSH2_READ_REGEX);\n$ssh->write(\"/usr/app/bin/motshell\\n\"); // daemon shell motorola\n$ssh->setTimeout(20); // wait because motshell is very long to launch\n$ssh->read('MotShell'); // motshell is ready\n$ssh->write(\"mss get rf_msr mac \" . $mac .\"\\n\");\n$ssh->read('MotShell');\n//more code....\n```\nIn my case I need to use the actual daemon shell motshell already running to send more commands later. What's your advice or trick to make it possible ?\nGood luck for your project !!\nThank you for your support, best regards.. ",
    "steamraven": "Perfect! Thanks\n. ",
    "DavidPrevot": "Could you please confirm if Crypt_Blowfish from phpseclib is backward compatible with Crypt_Blowfish from PEAR? Since they are aimed to be installed in the same path, simply overriding the one from PEAR by the one from phpseclib could be an improvement since this last one will benefit from your maintenance.\n. ",
    "AdamWill": "\"But, all in all, it's just never really been a huge problem.\"\nIt's rather a problem for distributions: whose version of what do we include?\nOne 'fun' thing about this: OwnCloud depends on both the old PEAR Crypt_Blowfish for legacy encrypted files - they initially did file encryption with Blowfish using the old PEAR module, switched to AES in 5.0.7, but they're now stuck with supporting the old method so long as they care about users who encrypted files with their earlier version of the code - and phpseclib for their SFTP interface. They don't actually use Blowfish from phpseclib, but what's a downstream distribution to do since we now need to both keep the old PEAR Crypt_Blowfish and package phpseclib in order to make OC happy?\nDebian chose to rename the PEAR Crypt_Blowfish, and we (Fedora) are probably doing the same, but it's rather sub-optimal.\n. You should also probably decide if you want to lay things out PSR-0 or PSR-4 style.\nRight now, I'm packaging phpseclib into Fedora downstream. What should I consider the current 'canonical' upstream distribution and layout of phpseclib? At present I'm using the PEAR channel and packaging it PEAR-style.\n. \"phpseclib should already be using PSR-0 style\"\nIt isn't, no, it's using PEAR style. PSR-0 requires a minimum of two levels of namespacing. PSR-0 is designed to be inherently backwards compatible with PEAR-style, so any PSR-0 compliant loader will find and load things laid out PEAR-style, but that doesn't actually mean that they're PSR-0 compliant. They're PEAR compliant.\n. oh, sorry, PSR-0 and PSR-4 both require a minimum of one level of namespacing (a vendor name). Neither requires two.\n. lower-casing stuff seems to be the current vogue in phpland, fwiw - composer/packagist recommend lowercase with - separators for module names.\n. If it helps, based on my dive into the whole autoloading topic, I believe you're right there, but note that PSR-4 autoloading, unlike PSR-0, is not backwards-compatible with the PEAR 'underscores in class names translate to directory separators' convention:\n\"Underscores have no special meaning in any portion of the fully qualified class name.\"\nSo if you go with PSR-4, you'd have to fully namespace the code - you could keep the directory structure, but you'd need to convert all the class definitions to use namespacing. It sounds like that's what you are planning anyway, but I just thought I'd state it explicitly in case :)\n. github has some kinda facility for doing changelogs, at least - I've seen them (in, presumably, markdown format) in the 'releases' pages for other github projects. that'd work for me, don't know about anyone else.\n. looks fantastic! Thanks very much. It would be great if any changes that break existing API (functions dropped, parameter changes, return value changes etc) can be explicitly noted if/when they happen - that's the most key information (for me at least :>). Thanks again!\n. I like SabreDAV in this regard, they really cover the bases. They reserve API breaks for 'major' releases (the 'y' in 'x.y.z'), and they have a specific page for each major version upgrade:\nhttp://sabre.io/dav/upgrade/1.8-to-2.0/\nhttp://sabre.io/dav/upgrade/1.7-to-1.8/\n(etc)\ntheir release notes are very organized too:\nhttps://github.com/fruux/sabre-dav/releases\nmost entries are sort of 'tagged' as 'Added:', 'Removed:', 'Fixed:' or 'Changed:', and they mark backward compatibility breaks with 'BC Break:'. It's really helpful for downstreams.\n. Not sure why you're asking me, for a distro perspective? Don't think I have a strong opinion or Fedora / distros in general have particular policies, it's not at all uncommon to have apps which don't have all their history available in current tarballs for sure. So long as it's all available somewhere I don't think I really have an opinion.\n. ",
    "chacham15": "sorry to report that that did not fix the issue. if you want to check it out and look for yourself try running the openssl demo app from here: https://github.com/openssl/openssl/blob/master/demos/ssl/serv.cpp with a cert/key pair generated with the phpseclib example code here: http://phpseclib.sourceforge.net/x509/examples.html#selfsigned\n. I apologize, I only updated ASN1.php since it appeared that that was the only file you had changed, but I didnt realize that there had been other changes between master and the stable version. I tried it with master and it does work.\n. Yes, you are quite correct. Although I made a mistake: only email is an ia5String, countryName is a printableString. I did as you said and it did fix the problem. I feel like all of this should be part of phpseclibs documentation somewhere. Especially on how to add extensions...Thanks for your help though!\n. Thanks!\n. Your example doesnt work. While it does produce a CRL, the CRL it produces has no revocations in it.\nYou need to initialize the crl properly: $crl->loadCRL($crl->saveCRL($crl->signCRL($ca, $crl))); after $crl = new File_X509();\n. Thank you very much for your work again. The documentation looks much better.\nA few notes however: \"Other X.509 decoders (eg. browsers or email clients or whatever) should decode this to their timezone so there's no need to set it to do $x509->setStartDate('-1 day') or anything like that.\"\nThe main reason for using '-1 day' is because of clock skew, not timezones. If the clock of the other machine is 10 minutes behind the atomic clock, the certificate wont be valid.\nAlso, something that I'd imagine a lot of people using is extensions and in particular keyUsage and cRLDistributionPoints (if you want to further update the docs to make it even better :) ).\n. ",
    "santensuru": "help... the crl cannot view using openssl\n. ",
    "SteveSimpson": "I realize the last comment was almost a year ago and it was opened a year before that, but after spending a day fighting this and NOT getting it to work, here is what I had:\n```\n<?php \ninclude('../../app/vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php');\ninclude('../../app/vendor/phpseclib/phpseclib/phpseclib/File/X509.php'); \ninclude('../../app/vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php'); \n$issuer = new File_X509(); \n$issuer->setDNProp('id-at-organizationName', 'phpseclib demo cert'); \n$privKey = new Crypt_RSA(); \n$privKey->loadKey('-----BEGIN RSA PRIVATE KEY----- \nMIICWwIBAAKBgQDR1VHopvujQwg7aZe6uvACg5ZLKYD1heP9hXlmJNGKkTvmV//uQ5PlWPTp99AW \nFgU9QRM5cKkxw/0hC8+JTyc1CoqtdVAI/8l826+muJfiUaUALkAHSrw8537Xj2agJQRmaVNhUztA \nG3y6yweav3dYLYJG3MDlcD4l2U9t6QDBGQIDAQABAoGAaMy+KBCeRaBJEENgwKZ1EQxfmBKWkgnZ \nINn1FAr3jNmUrSrubDXcPAP97o0SpLVC0KEb1Ohr2KsmVcbsVIvv7CoK5h+fNTOZpm51Wev5VlHA \nOO/FQtq4kTL9JpG/5vVbk5JFA1r7kC/W01Pwp8zpf8teM3NWKuciLUXy7RjCirECQQD0gmM8jWbS \nwUmSYLEUOaqZnpzpqm+dTLov8ubf0Dsla6OgnCg5N0noVMPm5oFSJBhQOjmQnrXmXLJu8Soo0VUv \nAkEA27HBjUe99ztdnP7uX6xhHX3XfUkk7TKZvulP1IvYnZggv3Nyyj+wqMsGavcOHwKfxoWo/Nim \nYLO1vMUKkLrMNwJARFSn/QUbRizELccd1aQj/Bhqi5aY6KHHqpy8TrH3xYZmTP029H5yBh6iPMYQ \nP+9caBdNfRANj5o6N2zoNk4B+wJAcnD/TTQw/ce79RtLWyU1laJHDWl7xd/U/QEWZ7bNiRKFBJYE \nFtzkjpjr5+54OakpR8W6iLPmv3r90a6m2UulMwJAINcNFkJHojkf+Vc/e2U7ll19UIh+TDI0UrYT \nZxJA2S/nhIz+A6cNTX+E+yHlTbJr5xu6jxexQ7HfU1hTWYNmUg== \n-----END RSA PRIVATE KEY-----'); \n$issuer->setPrivateKey($privKey); \n$crl = new File_X509(); \n$crl->loadCRL($crl->saveCRL($crl->signCRL($issuer, $crl)));\n$crl->revoke('111');\n$worker = new File_X509();\n$result = $worker->signCRL($issuer, $crl); \n$text = $crl->saveCRL($result);\necho $text . \"\\n\";\n```\nLooking at the code, the signCRL() function calls $key->sign($this->signatureSubject). where signatureSubject is just the CA cert DN. This won't work for a CRL. From http://tools.ietf.org/html/rfc5280#section-5.1.1.1 - you will need to sign the whole tbsCertList. I am thinking this might be simple, but I'm not sure yet. I will update later today.\nI am going to have to move one and shell out to \"openssl ca\" to generate the CRL. I just can't afford any more time on this. But in the hopes that someone will fix the issue, here is what I had that seemed to be better, but not yet working:\n```\ndiff -rupN phpseclib/phpseclib/phpseclib/File/X509.php phpseclib.mod/phpseclib/phpseclib/File/X509.php\n--- phpseclib/phpseclib/phpseclib/File/X509.php 2015-01-28 16:50:33.000000000 -0500\n+++ phpseclib.mod/phpseclib/phpseclib/File/X509.php 2015-06-02 11:06:20.000000000 -0400\n@@ -3612,11 +3612,26 @@ class File_X509\n     unset($tbsCertList);\n\n\n// this is a hack to remove the CRL Extensions which are optional\n//   this should be put back in & map updated after signature subj\n//   and signature are fixed\n\nunset($this->currentCert['tbsCertList']['crlExtensions']);\n+\n         // resync $this->signatureSubject\n         // save $tbsCertList in case there are any File_ASN1_Element objects in it\n         $tbsCertList = $this->currentCert['tbsCertList'];\n         $this->loadCRL($this->saveCRL($this->currentCert));\n\n\n$asn1 = new File_ASN1();\n+\n\n$asn1->loadOIDs($this->oids);\n+\n$myTbsCertList = $this->currentCert['tbsCertList'];\n+\n$map = $this->CertificateList['children']['tbsCertList'];\n+\n$this->signatureSubject=$asn1->encodeDER($myTbsCertList, $map);\n+\n         $result = $this->_sign($issuer->privateKey, $signatureAlgorithm);\n         $result['tbsCertList'] = $tbsCertList;\n\n```\nI believe the key is setting signatureSubject correctly.\n. This should be labeled as BUG, not support.\n. ",
    "kruvas": "ok, i understand your point. but for my case - i load public (!) key, so it cant consist anything then public exponent so it should be done (call ->setPublicKey() or dont resetting publicexponent with set exponent ) automatically if i tell him that is load public key format. i understand that you make workaround for abnormal private keys and make it use simpler. but you also make using public keys harder - not obvious and not clear. i think it bad practice\nmaybe add this workaround?\n```\n    if (isset($components['primes'])) {\n        $this->primes = $components['primes'];\n        $this->exponents = $components['exponents'];\n        $this->coefficients = $components['coefficients'];\n        $this->publicExponent = $components['publicExponent'];\n    } else {\n        $this->primes = array();\n        $this->exponents = array();\n        $this->coefficients = array();\n    $public_types = array(\n         CRYPT_RSA_PUBLIC_FORMAT_RAW,\n         CRYPT_RSA_PUBLIC_FORMAT_PKCS1_RAW,\n         CRYPT_RSA_PUBLIC_FORMAT_XML,\n         CRYPT_RSA_PUBLIC_FORMAT_OPENSSH\n         CRYPT_RSA_PUBLIC_FORMAT_PKCS1\n    );\n    if (!in_array($type, $public_types)\n    {\n         $this->publicExponent = false;\n    }\n}\n\n```\nOR\n```\n    if (isset($components['primes'])) {\n        $this->primes = $components['primes'];\n        $this->exponents = $components['exponents'];\n        $this->coefficients = $components['coefficients'];\n        $this->publicExponent = $components['publicExponent'];\n    } else {\n        $this->primes = array();\n        $this->exponents = array();\n        $this->coefficients = array();\n    $this->publicExponent = false;\n}\n$public_types = array(\n     CRYPT_RSA_PUBLIC_FORMAT_RAW,\n     CRYPT_RSA_PUBLIC_FORMAT_PKCS1_RAW,\n     CRYPT_RSA_PUBLIC_FORMAT_XML,\n     CRYPT_RSA_PUBLIC_FORMAT_OPENSSH\n     CRYPT_RSA_PUBLIC_FORMAT_PKCS1\n);\nif (in_array($type, $public_types)\n{\n     $this->setPublicKey();\n}\n\n```\nwhat you think?\nalso lack of documentation lead to creating this issue.\n. > Can you post the full XML key that's causing you the problem instead of just posting the public (or private) exponent portion of the key?\nsorry, i post full key but github parser eat them ) you can press edit my post and see it, but i already correct it - watch 1st post\nyou can get any xml key - bug well reproduced\nweird is in that control on what exactly assigned and where it put is weak - using one intermediate var for all params and using reference to real var give you less control on what is doing. which is lead to this bug\ni think better parse all xml tags into intermediate var (array) and then copy data key parts \"manually\" part by part to main key vars, but not thru callback functions of xml parser\n. > I guess you edited your orig post so that the key is now showing up?\nyep, i edit my post by your request about normal xmlkey format, because raw xml key you can see only in edit mode (github parser eat tags), so i transform it and now you can see without editing. as for me, i see it\nscreenshot http://img560.imageshack.us/img560/7964/paf7.png\nalso as i say above - you can use any xml key - all of them broken during loading\n\nAnyway I'm not seeing the problem? Looks like it's working fine for me?\n\nyour code had nothing with key (crypt/decrypt) so you think - its all ok. but bug not in that key cant load, bug in that how it load - it broken (replace it with wrong data from another part of key) last parsed part of key.\n\nCan you post some code demo'ing what you mean?\n\nif you talk about how to easier reproduce related bug, so that is\n``` php\n    require_once \"Crypt/RSA.php\";\n    $rsa = new Crypt_RSA();\n    // you can use direct load key in PKCS1 format, which parser work seems to be fine\n    $PKCS1_keys = $rsa->createKey();\n// get working keys in XML formats\n$rsa->loadKey($PKCS1_keys[\"privatekey\"],CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$private_xml_orig = $rsa->getPrivateKey(CRYPT_RSA_PRIVATE_FORMAT_XML);\n\n$rsa->loadKey($PKCS1_keys[\"publickey\"],CRYPT_RSA_PUBLIC_FORMAT_PKCS1);\n// ? )\n$rsa->setPublicKey();\n$public_xml_orig = $rsa->getPublicKey(CRYPT_RSA_PUBLIC_FORMAT_XML);\n\n// load xml keys and get it in xml format again, to compare with original\n$rsa->loadKey($public_xml_orig,CRYPT_RSA_PUBLIC_FORMAT_XML);\n$rsa->setPublicKey();\n$public_xml_from_xml = $rsa->getPublicKey(CRYPT_RSA_PUBLIC_FORMAT_XML);\n\n$rsa->loadKey($private_xml_orig,CRYPT_RSA_PRIVATE_FORMAT_XML);\n$private_xml_from_xml = $rsa->getPrivateKey(CRYPT_RSA_PRIVATE_FORMAT_XML);\n\nshow ($public_xml_orig,\"public_xml_orig:\");\nshow ($public_xml_from_xml,\"public_xml_from_xml:\");\nshow ($private_xml_orig,\"private_xml_orig:\");\nshow ($private_xml_from_xml,\"private_xml_from_xml:\");\n\nfunction show($text,$title=\"\")\n{\n    if (empty($text))\n    {\n        echo \"<b>empty text!<b>\";\n        return false;\n    }\n    echo \"<br>\";\n    if (!empty($title))\n    {\n        echo \"<center><b>\".$title.\"<b></center><br>\";\n    }\n    echo \"<textarea style='width: 95%;height:250px;'>\".htmlspecialchars($text).\"</textarea>\";\n    echo \"<br>\";\n    return true;\n\n}\n```\nP.S. / update\nduring write this post I just realized that this bug is seems to be fixed in the commit ( 4de71168d8b647cdc8165f44d4c86f8c053bbd8f ) of 20 June, and I have not used the latest version, but the one that is shown on the main page 0.3.5 (June 6), where this fix has not been done. (i thinked that link lead to latest version, but is not. i download it 10 july 2013)\nbut this commit/fix raise notice in above example code to reproduce bug\nNotice: Undefined property: Crypt_RSA::$current in phpseclib/Crypt/RSA.php on line 1332\ni fix (quick/dirt) this bug in another way\n``` php\n    function _stop_element_handler($parser, $name)\n    {\n        //$name = strtoupper($name);\n        // if ($name == 'RSAKEYVALUE') {\n        if ($name == 'RSAKEYVALUE' || $name == 'XML') {\n            return;\n        }\n        $this->current = new Math_BigInteger(base64_decode($this->current), 256);\n}\n\n```\nbut commit mentioned above also fix this bug, except my fix not rise notice\n\nCan you post some code demo'ing what you mean?\n\nif you talk about more clearer way to parse xml keys, so that is my view\n``` php\n    /\n     * Temporary place for store current parsed tagname in XML formatted keys\n     \n     * For use with parsing XML formatted keys.\n     \n     * @see Crypt_RSA::_start_element_handler()\n     * @see Crypt_RSA::_stop_element_handler()\n     * @see Crypt_RSA::_data_handler()\n     * @var string\n     * @access private\n     */\n    var $xml_key_tag_name = \"\";\n/**\n * Temporary place for store parsed data from XML formatted keys\n *\n * For use with parsing XML formatted keys.\n *\n * @see Crypt_RSA::_parseKey()\n * @see Crypt_RSA::_data_handler()\n * @var Array\n * @access private\n */\nvar $xml_key_parts;\n\n\nfunction _parseKey($key, $type)\n{\n.........................................................\n.........................................................\n        case CRYPT_RSA_PRIVATE_FORMAT_XML:\n        case CRYPT_RSA_PUBLIC_FORMAT_XML:\n\n            $xml = xml_parser_create('UTF-8');\n            xml_set_object($xml, $this);\n            xml_set_element_handler($xml, '_start_element_handler', '_stop_element_handler');\n            xml_set_character_data_handler($xml, '_data_handler');\n            // add <xml></xml> to account for \"dangling\" tags like <BitStrength>...</BitStrength> that are sometimes added\n            if (!xml_parse($xml, '<xml>' . $key . '</xml>')) {\n                return false;\n            }\n\n\n            $this->components = array();\n            if (!empty($this->xml_key_parts))\n            {\n                foreach ($this->xml_key_parts as $tag_name => $tag_value)\n                {\n                    switch ($tag_name) {\n                        case 'MODULUS':\n                            $this->components['modulus'] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'EXPONENT':\n                            $this->components['publicExponent'] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'P':\n                            $this->components['primes'][1] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'Q':\n                            $this->components['primes'][2] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'DP':\n                            $this->components['exponents'][1] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'DQ':\n                            $this->components['exponents'][2] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'INVERSEQ':\n                            $this->components['coefficients'][2] = new Math_BigInteger(base64_decode($tag_value), 256);\n                            break;\n                        case 'D':\n                            $this->components['privateExponent'] = new Math_BigInteger(base64_decode($tag_value), 256);\n                    }                     \n                }\n            }\n\n            return isset($this->components['modulus']) && isset($this->components['publicExponent']) ? $this->components : false;\n.........................................................\n.........................................................\n}\n\nfunction _start_element_handler($parser, $name, $attribs)\n{\n    $this->xml_key_tag_name = $name;\n}\n\nfunction _stop_element_handler($parser, $name)\n{\n    $this->xml_key_tag_name = \"\";\n}\n\nfunction _data_handler($parser, $data)\n{\n    if (!empty($this->xml_key_tag_name))\n    {\n        if(isset($this->xml_key_parts[$this->xml_key_tag_name]))\n        {\n            $this->xml_key_parts[$this->xml_key_tag_name] .= trim($data);\n        }\n        else\n        {\n            $this->xml_key_parts[$this->xml_key_tag_name] = trim($data);\n        }\n    }\n}\n\n```\nfinally sorry for post already fixed bug. i suggest remove link for outdated version of phpseclib, if it rarely updated. better put there link to latest trunk or at least add notice that link may have not the latest vesion of lib and can have already fixed bugs.\nand finally i want to say thanks for this lib to all that maintain it\n. ",
    "thomasmeeus": "Hi,\nI'm having a similar issue like this. During a deploy with Rocketeer I'm getting into some kind of loop which always returns the following error message:\n```\nNotice: Connection closed prematurely in phar:///Users/thomas/rocketeer/bin/rocketeer.phar/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2554\nPHP Notice:  Connection closed by server in phar:///Users/thomas/rocketeer/bin/rocketeer.phar/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2800\n\u2026\nNotice: Connection closed by server in phar:///Users/thomas/rocketeer/bin/rocketeer.phar/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2800\nPHP Notice:  Connection closed prematurely in phar:///Users/thomas/rocketeer/bin/rocketeer.phar/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 2554\n```\nIs there any progress in fixing this?\n. ",
    "adamjimenez": "I'm getting a similar thing when doing a put.\nIt only seems to happen on files >3000 lines. And only on some servers and not others.\n. i'm using latest master. will send logs when I get them.\n. I've emailed the logs to you.\n. You sir, are awesome.\nCan confirm it's working now.\nOn 10 March 2014 13:36, terrafrost notifications@github.com wrote:\n\nI think terrafrost@dbbe293https://github.com/terrafrost/phpseclib/commit/dbbe293e50af3c253f18e281ec6113edb5b6fef8may fix thiis issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/134#issuecomment-37182191\n.\n\n\nBest regards,\nAdam Jimenez\n. this is ok but not great if you already have an error handler in place for something else. I would prefer exceptions.\n. ",
    "rubyruy": "Hey, like I said, it's not my area. Definitely didn't know the random padding is different every time, for sure.\nIf you say it's secure, I'll take your word for it.\nAs for incorrect input... well, sure, it is incorrect to begin with and how that is handled can differ - though interpreting it as if it were correct does strike me somewhat... odd. \nAnyway, like you say, if there isn't a security problem here, this is more is more of a minor interface nitpick. I probably wouldn't have bothered with the ticket for that alone.\n. ",
    "stefandroog": "Thanks for the quick fix!\n. ",
    "DavidAnderson684": "Hi,\nThanks... this appears to \"work\" as a local fix in that part of the code, but no actual upload takes place, because issues 144 and 145 still remain - https://github.com/phpseclib/phpseclib/issues/144 and https://github.com/phpseclib/phpseclib/issues/145\nDavid\n. Hi,\nCuriously, I can't reproduce it any more - though it happened every time before. Same server etc.\nHowever, I have discovered a new issue and will open a new one!\nDavid\n. P.S. Thank you!\n. Hi,\nDo you get the same if you test against the trunk, rather than the release 0.3.5?\nDavid\n. Don't forget to change your SSH password - you have posted it in the logs above.\n. Hi,\nIt's all working properly for me now too - I think my earlier test was not on the latest github version, which I updated to in the meantime.\nHowever, it wouldn't hurt to add this as a protection, as the code currently just takes it on trust that _receive() won't send back more bytes that are desired, and doesn't truncate to the already-known size limit:\nif (strlen($data) + $size > $info['size']) $data = substr($data, 0, $info['size'] - $size);\ni.e. so the while loop in put() is:\n```\n        while ($size < $info['size']) {\n            $data = $this->_receive();\n        if (strlen($data) + $size > $info['size']) $data = substr($data, 0, $info['size'] - $size);\n\n        // SCP usually seems to split stuff out into 16k chunks\n        $size+= strlen($data);\n\n        if ($local_file === false) {\n            $content.= $data;\n        } else {\n            fputs($fp, $data);\n        }\n    }\n\n```\nDavid\n. Hi,\nI've done that now. I hope I did it in the right place - I've not use Git much.\nDavid\n. I have changed it to callable|null now, as requested.\nI had copied it from the existing dochint in phpseclib/blob/master/phpseclib/Net/SCP.php. I expect you will also want to change the dochint there.\n. @bantu: This was also my reason for adding the callback, when I'd read the code. Apologies for being slow to feed back.\n. @terrafrost : mhash is still in PHP 7 (find it in ext/hash/hash.c in the source). It's just not an extension. Hence the advice given in the PHP 7 release notes to replace extension_exists('mhash') with function_exists('mhash'), as the former will return false, even though mhash is still there.\n@GrahamCampbell : The PHP 7 release notes recommend replacing extension_exists('mhash') with function_exists('mhash'). Why do you say that doing so is a security issue?\n. @bantu: PHP4-style class constructors are deprecated in PHP 7.0, so throw a deprecation warning, but still work; see section 4: https://github.coma/php/php-src/blob/php-7.0.0RC3/UPGRADING\nThe meta-problem I'm facing is that WordPress's next release will still officially support PHP 5.2, so I'm restricted to the 1.0 code base. Unfortunately there are still plenty of (yes, horrible) hosting companies running 5.2. I am a developer for a WordPress plugin with 500,000 live installs, that uses phpseclib; we will need to keep the plugin operational on PHP 5.2 - 7.0. (When we start new plugins now, we're find with dropping 5.2 - but with large existing install bases, it's a different ball-game). So, I need to either a) review and patch the code of the 1.0 base for issues (time-consuming) on 7.0, or b) bundle both 1.0 and 2.0 and build some compatibility layer on top of the two (ugly).\n. @GrahamCampbell : Depends what you mean by \"has to\". It wouldn't be fun to try telling that to 50,000 current PHP 5.2 users who will respond by 1-star-reviewing your product into oblivion, and tie up your support desk for weeks, when your next release stops their previously-working backups from working any more. (The wordpress.org plugin directory doesn't have a way for selectively pushing updates to some users and not to others). There are trade-offs on every side, and it is one of our selling points that our plugin supports what WordPress supports: that you don't need to be a tech-savvy user who can navigate other technical requirements in order to use it. As a business requirement we have to find a technical solution that keeps currently working features still working on PHP 5.2. That sucks, but we've evaluated it and it sucks less than the alternatives.\n. It would be lovely if the workings of the wordpress.org plugins directory + update system made that an option.\nAnyway, now that our options are clearer, we'll have a think.\n. This is great news.\n\"In the mean time, I still don't believe this PR is needed per my earlier comments.\" - I think you're right; the condition can't ever fire, given that extension_loaded('hash') is tested before it.\n. Or perhaps, to keep/use some of the information, instead of...\nunset($from[$k]);\n... you could have:\n$from[$k] = \"is_a_\".get_class($v);\n. Thank you.\nI was only passed the error message, and inferred the cause from there (I don't have a copy of Visual Bakery Composer either). But, having test PHP installs from PHP 5.2 to 7 available, I got the same result as you: that serialize() on this test object causes a fatal error on PHP 5.2, but only a warning after that.\nThe error message I passed was as follows, from which I infer that the customer was on PHP 5.2 (and on Windows, from the back-slash path style). (The product in question doesn't support earlier PHP versions than 5.2).\nFatal error: Call to private method Vc_Manager::__sleep() from context '' in (snip)\\phpseclib\\Crypt\\Random.php on line 156\nHowever... I wonder whether calling json_encode() on arrays ($GLOBALS, etc.) of arbitrary PHP objects is the best idea. json_encode does what serialize() is doing, except a) not emitting a warning when it silently drops stuff and b) you're getting less bits of information into the result, since it just puts in an unnamed object (because that's all the JSON format supports) (whereas serialize() on PHP 5.3+ is retaining the PHP class name in the serialized output).\ni.e. The switch to json_encode() is basically just relying on another of those well-loved quirks of PHP, that json_encode() arbitrarily omits no warning whilst serialize() does.\n. >  it's not like having objects assigned to $GLOBALS is a prerequisite\nRight. My bigger concern though was that by swapping serialize() for json_encode(), you're implicitly relying on json_encode() being well behaved. The reason for dropping serialize() is that it's not well-behaved (on PHP < 5.3) - however, serialize() is designed for arbitrary PHP objects, whereas JSON-encoding isn't.\nFrom reading the PHP manual page and experimenting, I just discovered this one, for example.\nThis will print out lots of stuff:\n<?php print json_encode($GLOBALS); ?>\nBut this will print absolutely nothing, because json_encode() will output nothing if anything in the passed array is a resource:\n<?php $fh = fopen('/etc/localtime', 'rb'); print json_encode($GLOBALS); ?>\nAt least, that's what happens on PHP 5.5 up to 7.0. On PHP 5.2 to 5.4, it does print something, but accompanied by 3 PHP warnings.\nAlso, since $GLOBALS contains all the other variables ($_GET, $_POST, $_SERVER, etc.), doing something to more than $GLOBALS seems redundant, if the aim is to collect entropy (unless passing $GLOBALS to a function that may discard any unwanted input types...)\n. P.S. Also: json_encode($GLOBALS) always results in a PHP warning, on all PHP versions (when there is output - i.e. unless prevented by an issue like the above), because of the recursion (the self-reference of $GLOBALS['GLOBALS']).\n. Thank you.... that makes sense - when an error has been reported, the PHP execution time has expired whilst in Math/BigInteger.php\nLooks like I can do some testing via defining MATH_BIGINTEGER_MODE.\nWhen I find out what PHP modules they have available - presumably then it's just a matter of telling them \"install this PHP module\"? i.e. it's unlikely to be the case that they're using anything other than the native PHP implementation, if it's taking a minute?\n. OK, here's what I've discovered.\nIt's setting MATH_BIGINTEGER_OPENSSL_DISABLE that's the killer. Without that, all values of MATH_BIGINTEGER_MODE give me a key in under 1 second.\nWith MATH_BIGINTEGER_OPENSSL_DISABLE, MATH_BIGINTEGER_MODE_GMP is still fast.\nBut, MATH_BIGINTEGER_MODE_BCMATH is > 100 seconds, and MATH_BIGINTEGER_MODE_INTERNAL is > 600 seconds.\nThese timings are for generating a 2048-bit RSA key-pair (new Crypt_RSA()->createKey(2048)), on my everyday laptop (4 years old, Pentium).\nSo, the availability of whatever bits of OpenSSL are being used are the main factor.\nAny thoughts?\n. Hi,\nThanks for the various tips. I ended up \"solving\" it by putting a \"key size\" option into the user interface. That way, users both have a solution, and get to \"own\" the problem, in the sense of making their own choice based on the strength/speed/PHP-duff-install-effort-to-update trade-offs involved.\nRegarding the WP plugin, I think I'm not the right person for that; I wouldn't have any skin in the game, as I don't have any sites needing it, so I'd be likely to let it rot too.... I've already got a few plugins that are just a \"community service\", and, as with you, it's hard to keep keeping up and I often wonder about handing them over. You can tag your plugin to alert potentially interested people that you're interested in someone taking it over: http://wptavern.com/adopt-me-plugin-tag-is-now-in-use-on-wordpress-org\nThanks again,\nDavid\n. I've had a user with this issue too.\n. The server administrator has also replied with some further information, saying that the problem is that when phpseclib attempts to connect, then it only supports weak ciphers, which their server does not support. Is this something configurable within phpseclib, or does the problem lie elsewhere?. @bantu \nIs there any more info I can get that may help? Here's what I think is the relevant section of the OpenSSH (sftp) -v -v output:\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: local client KEXINIT proposal\ndebug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c\ndebug2: host key algorithms: ssh-rsa-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519\ndebug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc\ndebug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc\ndebug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\ndebug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\ndebug2: compression ctos: none,zlib@openssh.com,zlib\ndebug2: compression stoc: none,zlib@openssh.com,zlib\ndebug2: languages ctos: \ndebug2: languages stoc: \ndebug2: first_kex_follows 0 \ndebug2: reserved 0 \ndebug2: peer server KEXINIT proposal\ndebug2: KEX algorithms: ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group18-sha512,diffie-hellman-group16-sha512,diffie-hellman-group14-sha256,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,rsa1024-sha1\ndebug2: host key algorithms: ssh-rsa,ssh-dss\ndebug2: ciphers ctos: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: ciphers stoc: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: MACs ctos: hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160,umac-64@openssh.com,umac-128@openssh.com\ndebug2: MACs stoc: hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160,umac-64@openssh.com,umac-128@openssh.com\ndebug2: compression ctos: none\ndebug2: compression stoc: none\ndebug2: languages ctos: \ndebug2: languages stoc: \ndebug2: first_kex_follows 0 \ndebug2: reserved 0 \ndebug1: kex: algorithm: ecdh-sha2-nistp256\ndebug1: kex: host key algorithm: ssh-rsa\ndebug1: kex: server->client cipher: aes128-ctr MAC: umac-64@openssh.com compression: none\ndebug1: kex: client->server cipher: aes128-ctr MAC: umac-64@openssh.com compression: none\ndebug1: kex: ecdh-sha2-nistp256 need=16 dh_need=16\ndebug1: kex: ecdh-sha2-nistp256 need=16 dh_need=16\ndebug1: sending SSH2_MSG_KEX_ECDH_INIT\ndebug1: expecting SSH2_MSG_KEX_ECDH_REPLY. > phpseclib should be able to do...\n@bantu So, it sounds like the SFTP server admin's statement that the problem was a lack of mutually compatible ciphers is wrong, and is a distraction.\n\nLooks like this has something to do with the advertised max packet size.\nSee https://github.com/phpseclib/phpseclib/blob/1.0.7/phpseclib/Net/SSH2.php#L3157\n\nWould it help if I sent him a modified version of phpseclib that will distinguish the three conditions on that line, so that we can find out which one is the problem?. @terrafrost Thank you very much. Yes, disabling those lines fixes it.\nSo, I suppose I'll tell the end-user (of my code which uses phpseclib) to tell the server admin (of the SFTP server he's trying to access) that his implementation of those algorithms is buggy?\nWould it be an advantage to phpseclib to retry with something else if it encounters this problem? Even if I exposed the encryption algorithm settings to the end-user, that would still be a terrible user experience, to have to diagnose the problem and then tweak something that technically challenging.. For what it's worth - openssh works (`sftp -v -v -oCiphers='arcfour128') (arcfour256 also). Perhaps the server is only tested against openssh.. 136.243.27.43. Thank you!. @JudeRosario This is a user who's run a static analysis tool on the code-base. The text in your initial report isn't a dashboard notice; it's the output of the tool, run over the code base. These reports are almost always unhelpful when sent by end-users, because they don't understand the tools or their limitations, or how to interpret the results. Both phpseclib and Keyy are run through in-house CI that checks PHP version compatibility. So, almost all the time, you can ignore any such reports and just assure the user that all is well.. Hi,\nYes, thank you. I now have commit access, and it's working.\nDavid. @terrafrost I can update it. I will seek to do so later today.. Sorry, I should have mentioned that I found and read that already (via Google). It's a bit ambiguous (at least to an outsider). Terrafrost seems to be saying that you're OK if your engine is mcrypt / openssl (but not PHP native). But I'm not clear. Is that the case?. > With it the length will depend on whatever the default character set is, which breaks almost everything.\nThank you for the explanation. Is there the possibility for the user of the SDK to set the default character set to maximise the chances of the results being as expected? (And then set it back after coming out of phpseclib?) (I'm interested in maximising the chances of things working, not of 100% ensuring it - that sounds not possible).By some ini option, I guess? To US ASCII would get the same results as strlen? (Or is this all just hopeless, as far as you know?).. I understood that... what I was wondering about was the ability to set \"the default character\" set at run-time, so that though (quoting) \"the length will depend on whatever the default character set is\", perhaps it's possible to set that default character set back to something (US ASCII??) that makes the results of strlen() be predictable again?. @terrafrost I've released an update to the WP plugin just now.. @terraforst\nI've edited it in my development copy. I was just telling that guy not to worry because, by the time it's no longer deprecated, and actually dead/gone (i.e. PHP 8), I'll have released a compatible version. (It'll be in the next release).. The server is openssh-7.4p1-16.el7.x86_64 on CentOS 7. The changelog items since the previous version (7.4p1-13) are:\n= Friday Nov 24 2017 Jakub Jelen jjelen@redhat.com - 7.4p1-16 + 0.10.3-2 =\n- Fix for CVE-2017-15906 (#1517226)\n= Mon Nov 06 2017 Jakub Jelen jjelen@redhat.com - 7.4p1-15 + 0.10.3-2 =\n- Do not hang if SSH AuthorizedKeysCommand output is too large (#1496467)\n- Do not segfault pam_ssh_agent_auth if keyfile is missing (#1494268)\n- Do not segfault in audit code during cleanup (#1488083)\n- Add WinSCP 5.10+ compatibility (#1496808)\n- Clatch between ClientAlive and rekeying timeouts (#1480510)\n- Exclude dsa and ed25519 from default proposed keys in FIPS mode (#1456853)\n- Add enablement for openssl-ibmca and openssl-ibmpkcs11 (#1478035)\n= Fri Nov 03 2017 Nikos Mavrogiannopoulos nmav@redhat.com - 7.4p1-14 + 0.10.3-2 =\n- Rebuilt for RHEL-7.5\n. Hi Jim,\n\nAre you able to reliably reproduce this?\n\nYes, most of the time (succeeding happens sometimes, but less often).\nI've tweaked the line as you suggested, and added an error_log() too for good measure. Nothing changed - execution continued (which was confirmed by adding another error_log() after as well).\nN.B. You say:\n\nThat should probably be a return false; instead of a return '';\n\nThere's a fragment with precisely that (which can never be matched) immediately afterwards.. > Would it be possible to give me access to the server?\nAn SFTP login on the SFTP server that manifests the problem? Or something else? (As I say, from the client side, the same happens from any client).. P.S. If so... how to send you these login details?. If I log base64_encode($response) then the results of that is: WwAAAQAAAAAAAAAAAAAAgAA=\nI've emailed you the login details now. They are tested and working with openssh/sftp - and also manifesting the problem. \nIt's been set up to be identical to our regular login that has the problem. In consequence, there's no shell on this account - it's SFTP only.\nYou cannot write in the default home directory - you need to go into the 'terrafrost' subdirectory. \nDavid\n. Hi,\nThank you. Based on what you say, if I did...\n`$sftp->setTimeout(35)\n... then in principle, ought that to work too? Obviously, I want to investigate + fix the server so that it doesn't time out, but given that the code is for distributing to users who may use it on all kinds of setups, I want to be able to work around it for them too.\nDavid. Thanks. Yes, setting the timeout either of those ways works for me.\nUpon sticking a strace on the relevant sshd process, revealed that I had a problem with systemd-logind needing restarting after a certain other service has been restarted: https://serverfault.com/questions/707377/slow-ssh-login-activation-of-org-freedesktop-login1-timed-out.. I haven't looked at the code closely, but, if you think it makes no difference then it would seem reasonable to throw in a if (function_exists('utf8_decode')) and, if it wasn't there, carry on anywhere. The result presumably can't be worse than a Fatal.. ",
    "manikantannaren": "I see the same problem when using Net_SSH2\nError: Maximum function nesting level of '100' reached, aborting!\nFile: /phpseclib0.3.5/Net/SSH2.php\nLine: 2351\nuse case\n1.Powershell script exists on target/remote windows box\n2. Use Net_SSH2->exec('powershell c:\\tmp.ps1');\nAfter along time throws the above fatal error.\nChecks I did\nIn a normal SSH session in a terminal, I could successfully run the script and see the output.\n. Will try now\n. The \"master\" clone gives me this error: \"No compatible server to client encryption algorithms found\"\nNet/SSH2.php : 1120\nSSH2.php : 932\n. A headsup, the script is actually executed and the changes made. But the error I believe is thrown in reading the output\n. This problem does not occur with a normal windows batch file. \nThis problem I believe happens because the command powershell .\\tmp1.ps1 forks a process and then the output stream is not readable\n. Using the trunk version also results in the same behaviour.\nCan we re-open this issue please or does it make sense to file a new one.\nI used the real time logging and I could see the output from the target host (...New_Exec...) in the log.\nThe connection post the execution was not terminated as seen in the Bitvise SSH server logs.\nThe real time logs are below\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:35:2e:31:39:20:46:6c:6f  SSH-2.0-5.19 Flo\n00000010  77:53:73:68:3a:20:42:69:74:76:69:73:65:20:53:53  wSsh: Bitvise SS\n00000020  48:20:53:65:72:76:65:72:20:28:57:69:6e:53:53:48  H Server (WinSSH\n00000030  44:29:20:36:2e:30:32:3a:20:66:72:65:65:20:6f:6e  D) 6.02: free on\n00000040  6c:79:20:66:6f:72:20:70:65:72:73:6f:6e:61:6c:20  ly for personal \n00000050  6e:6f:6e:2d:63:6f:6d:6d:65:72:63:69:61:6c:20:75  non-commercial u\n00000060  73:65:0d:0a                                      se..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.6323, network: 0.2073s)\n00000000  9e:b3:17:11:85:19:d0:c0:1f:74:c0:da:f3:f8:f6:f1  .........t......\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:32:35:36:2c:64:69:66:66:69:65:2d  e-sha256,diffie-\n00000040  68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d:65:78  hellman-group-ex\n00000050  63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69:66:66  change-sha1,diff\n00000060  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000070  31:34:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68  14-sha1,diffie-h\n00000080  65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68  ellman-group1-sh\n00000090  61:31:00:00:00:07:73:73:68:2d:64:73:73:00:00:00  a1....ssh-dss...\n000000a0  53:61:65:73:32:35:36:2d:63:74:72:2c:61:65:73:32  Saes256-ctr,aes2\n000000b0  35:36:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:74  56-cbc,aes192-ct\n000000c0  72:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  r,aes192-cbc,aes\n000000d0  31:32:38:2d:63:74:72:2c:61:65:73:31:32:38:2d:63  128-ctr,aes128-c\n000000e0  62:63:2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73  bc,3des-ctr,3des\n000000f0  2d:63:62:63:00:00:00:53:61:65:73:32:35:36:2d:63  -cbc...Saes256-c\n00000100  74:72:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:65  tr,aes256-cbc,ae\n00000110  73:31:39:32:2d:63:74:72:2c:61:65:73:31:39:32:2d  s192-ctr,aes192-\n00000120  63:62:63:2c:61:65:73:31:32:38:2d:63:74:72:2c:61  cbc,aes128-ctr,a\n00000130  65:73:31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63  es128-cbc,3des-c\n00000140  74:72:2c:33:64:65:73:2d:63:62:63:00:00:00:4a:68  tr,3des-cbc...Jh\n00000150  6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61  mac-sha2-256,hma\n00000160  63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2c  c-sha1,hmac-md5,\n00000170  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:39:36  hmac-sha2-256-96\n00000180  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n00000190  61:63:2d:6d:64:35:2d:39:36:00:00:00:4a:68:6d:61  ac-md5-96...Jhma\n000001a0  63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d  c-sha2-256,hmac-\n000001b0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2c:68:6d  sha1,hmac-md5,hm\n000001c0  61:63:2d:73:68:61:32:2d:32:35:36:2d:39:36:2c:68  ac-sha2-256-96,h\n000001d0  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n000001e0  2d:6d:64:35:2d:39:36:00:00:00:09:7a:6c:69:62:2c  -md5-96....zlib,\n000001f0  6e:6f:6e:65:00:00:00:09:7a:6c:69:62:2c:6e:6f:6e  none....zlib,non\n00000200  65:00:00:00:00:00:00:00:00:00:00:00:00:00        e.............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0133, network: 0s)\n00000000  03:b6:1f:3b:85:05:04:d8:1c:91:c4:60:80:f8:09:c7  ...;.......`....\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  f6:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  .arcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c:61  our128,arcfour,a\n00000080  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n00000090  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000a0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000b0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n000000c0  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n000000d0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000e0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n000000f0  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000100  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000110  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000120  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000130  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000140  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000150  62:63:2c:6e:6f:6e:65:00:00:00:f6:61:72:63:66:6f  bc,none....arcfo\n00000160  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n00000170  2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38:2d  ,arcfour,aes128-\n00000180  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n00000190  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n000001a0  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n000001b0  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n000001c0  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n000001d0  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n000001e0  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1\n000001f0  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19\n00000200  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256\n00000210  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc\n00000220  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl\n00000230  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-\n00000240  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non\n00000250  65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d:39  e...0hmac-sha1-9\n00000260  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n00000270  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n00000280  2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73:68  ,none...0hmac-sh\n00000290  61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c  a1-96,hmac-sha1,\n000002a0  68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63  hmac-md5-96,hmac\n000002b0  2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e  -md5,none....non\n000002c0  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n000002d0  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.6297, network: 0.0001s)\n00000000  00:00:00:81:00:a4:ef:b2:8a:4f:49:dc:6e:51:d6:e6  .........OI.nQ..\n00000010  7d:ae:ce:43:d8:47:a8:da:9e:72:5c:c3:09:cd:2c:34  }..C.G...r...,4\n00000020  3b:8e:a1:be:fb:a3:1d:10:8d:fe:91:77:da:81:95:06  ;..........w....\n00000030  0b:01:0d:a9:5e:0d:85:50:36:f1:18:88:3d:e0:48:02  ....^..P6...=.H.\n00000040  3b:0c:04:05:16:03:fc:06:57:73:4f:ef:96:37:27:76  ;.......WsO..7'v\n00000050  04:22:d1:3e:52:93:ab:b5:8c:a1:0d:12:05:e6:3a:a8  .\".>R.........:.\n00000060  d5:72:3f:8f:ad:26:b3:2a:e1:c1:4a:4e:72:fc:f9:72  .r?..&.*..JNr..r\n00000070  c6:89:67:6b:d4:d0:8e:3b:b0:b9:15:3e:b5:1f:f3:6e  ..gk...;...>...n\n00000080  6d:35:7b:6f:59                                   m5{oY\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.2118, network: 0.2083s)\n00000000  00:00:01:b1:00:00:00:07:73:73:68:2d:64:73:73:00  ........ssh-dss.\n00000010  00:00:81:00:b0:04:15:4e:23:6c:63:44:33:b3:b6:5c  .......N#lcD3..\\\n00000020  e7:e5:40:b3:fc:fa:07:a8:5d:f7:ae:91:f6:2f:75:2e  ..@.....]..../u.\n00000030  83:8d:bd:ea:f3:af:74:62:5f:0a:b1:3b:0b:b3:4a:32  ......tb_..;..J2\n00000040  f3:35:56:12:1e:6a:c0:46:3b:d3:b3:d3:26:16:73:1d  .5V..j.F;...&.s.\n00000050  d4:c7:6f:74:cb:81:7a:5c:be:1e:d3:fe:32:7d:11:c4  ..ot..z....2}..\n00000060  23:34:66:f5:ae:cc:e3:e4:55:dd:c5:dd:38:df:d4:63  #4f.....U...8..c\n00000070  b9:7b:e4:5f:08:53:48:a6:91:63:21:6f:99:c2:93:8b  .{._.SH..c!o....\n00000080  d8:bb:60:f0:cd:84:a7:fb:bd:45:ee:a2:44:a6:73:b3  ........E..D.s.\n00000090  59:27:80:87:00:00:00:15:00:cb:42:43:30:26:65:ad  Y'........BC0&e.\n000000a0  d1:28:a3:71:97:f8:87:08:0d:22:b3:d3:cf:00:00:00  .(.q.....\"......\n000000b0  80:0b:13:be:bb:91:a9:73:44:aa:82:6a:eb:89:fe:25  .......sD..j...%\n000000c0  d1:4b:f5:da:b1:f2:87:b0:13:34:7e:31:cc:fb:99:7d  .K.......4~1...}\n000000d0  dd:96:ac:64:1f:7e:d5:47:e8:73:8c:27:24:bf:c6:59  ...d.~.G.s.'$..Y\n000000e0  e4:d2:ea:4e:69:c4:d1:d0:bd:81:5c:20:e1:51:3a:73  ...Ni.....\\ .Q:s\n000000f0  f7:bf:67:51:e5:7b:84:47:63:0d:89:00:f6:3d:d0:a6  ..gQ.{.Gc....=..\n00000100  0a:89:28:73:c4:a9:26:de:7a:09:64:2f:f5:37:69:22  ..(s..&.z.d/.7i\"\n00000110  15:51:ec:c7:af:15:43:9e:2e:31:bb:63:15:ae:03:1b  .Q....C..1.c....\n00000120  c1:71:17:2a:58:14:94:f6:d6:37:df:87:75:9f:d2:6e  .q.*X....7..u..n\n00000130  50:00:00:00:80:29:b8:89:ba:ce:24:81:ac:83:53:21  P....)....$...S!\n00000140  c2:4e:45:8b:bc:b9:4e:86:f0:ef:34:67:87:09:ed:a6  .NE...N...4g....\n00000150  f8:74:ff:2e:0b:69:50:84:35:2e:2b:48:01:8a:ff:6a  .t...iP.5.+H...j\n00000160  4a:cb:06:73:bc:70:42:22:23:83:78:db:d4:c7:55:88  J..s.pB\"#.x...U.\n00000170  5e:62:0e:93:84:0b:08:a5:98:6a:49:dc:a2:0b:09:3a  ^b.......jI....:\n00000180  7b:f8:9b:d6:f8:0f:c4:0f:e3:5d:97:25:6d:e1:35:d2  {........].%m.5.\n00000190  99:9c:09:1b:22:68:dc:1d:c5:9b:42:d8:af:60:7f:9c  ....\"h....B....\n000001a0  a8:d6:51:f2:af:30:4f:48:0c:bc:6c:3e:77:bc:ba:b2  ..Q..0OH..l>w...\n000001b0  d5:2c:cf:9a:2c:00:00:00:80:20:5a:60:de:40:0a:8e  .,..,.... Z`.@..\n000001c0  db:78:0b:fe:ce:d7:be:10:48:89:fc:77:31:b0:46:1b  .x......H..w1.F.\n000001d0  d3:4b:4c:55:33:14:88:49:3c:92:e3:24:33:b6:ec:71  .KLU3..I...$3..q\n000001e0  b5:83:25:c6:dc:59:13:fc:73:be:eb:6e:ec:ca:8f:06  ..%..Y..s..n....\n000001f0  27:55:0a:44:02:f5:07:04:01:93:81:a0:af:17:ab:16  'U.D............\n00000200  bf:c8:74:46:10:ae:7d:4c:01:ac:0f:82:00:9e:0a:0a  ..tF..}L........\n00000210  25:12:1e:92:eb:04:ab:1a:fa:e8:e0:4b:11:57:9a:58  %..........K.W.X\n00000220  51:95:b4:19:dd:3e:42:47:f3:8e:a1:07:57:1d:eb:40  Q....>BG....W..@\n00000230  34:15:6b:13:ed:a4:d9:3c:85:00:00:00:37:00:00:00  4.k.........7...\n00000240  07:73:73:68:2d:64:73:73:00:00:00:28:7f:68:c0:44  .ssh-dss...(.h.D\n00000250  16:bd:92:9a:2a:5c:ec:8b:f7:10:86:a1:f7:0d:41:03  ....*........A.\n00000260  c6:10:c8:ec:22:40:dc:2d:52:ee:a7:84:32:f4:fd:e4  ....\"@.-R...2...\n00000270  11:01:2b:0c                                      ..+.\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.6466, network: 0.0001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0003, network: 0.0001s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0025, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.6349, network: 0.6343s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0008, network: 0s)\n00000000  00:00:00:0d:61:64:6d:69:6e:69:73:74:72:61:74:6f  ....administrato\n00000010  72:00:00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63:74  r....ssh-connect\n00000020  69:6f:6e:00:00:00:08:70:61:73:73:77:6f:72:64:00  ion....password.\n00000030  00:00:00:0a:66:72:33:73:63:61:32:31:21:21        ....password!!\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.3095, network: 0.3076s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0006, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.2059, network: 0.2049s)\n00000000  00:00:00:00:00:00:00:00:00:04:00:00:00:01:00:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.001, network: 0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  75:70:6f:77:65:72:73:68:65:6c:6c:20:43:3a:5c:55  upowershell C:\\U\n00000020  73:65:72:73:5c:41:44:4d:49:4e:49:7e:31:5c:41:70  sers\\ADMINI~1\\Ap\n00000030  70:44:61:74:61:5c:4c:6f:63:61:6c:5c:54:65:6d:70  pData\\Local\\Temp\n00000040  5c:53:65:74:5f:63:6f:6e:74:65:6e:74:5f:66:69:6c  \\Set_content_fil\n00000050  65:5f:6e:61:6d:65:5f:65:71:75:61:6c:73:5f:76:61  e_name_equals_va\n00000060  6c:75:65:5f:66:69:6e:61:6c:2e:70:73:31:20:43:3a  lue_final.ps1 C:\n00000070  5c:63:6f:6e:66:69:67:2e:70:72:6f:70:65:72:74:69  \\config.properti\n00000080  65:73:20:61:20:62                                es a b\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.2821, network: 0.2774s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 1.4256, network: 1.425s)\n00000000  00:00:00:00:00:00:00:16:42:65:67:69:6e:20:4e:65  ........Begin Ne\n00000010  77:5f:45:78:65:63:20:77:69:74:68:20:0d:0a        w_Exec with ..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0013, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:1a:2b:43:3a:5c:63:6f:6e:66  ........+C:\\conf\n00000010  69:67:2e:70:72:6f:70:65:72:74:69:65:73:2b:20:2b  ig.properties+ +\n00000020  0d:0a                                            ..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0012, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:03:61:0d:0a                 ........a..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0015, network: 0.001s)\n00000000  00:00:00:00:00:00:00:06:2b:20:2b:62:0d:0a        ........+ +b..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0613, network: 0.0606s)\n00000000  00:00:00:00:00:00:00:11:4e:65:77:20:45:78:65:63  ........New Exec\n00000010  20:2d:20:44:6f:6e:65:0d:0a                        - Done..\n<- NET_SSH2_MSG_IGNORE (since last: 24.9918, network: 24.9906s)\n00000000  00:00:00:00                                      ....\n```\n. I am sorry that was a False alarm\nImplementing logic As per this forum reply \nhttp://stackoverflow.com/questions/6333276/how-to-end-s-powershell-script-when-running-from-cygwin\nThe problem was with the way powershell needed invocation. The SSH session from my box was handling the 'NUL' input I guess using the new line character. \n. Goutham, can you enable logging (without your delay code) and provide the logs also please.\n. ",
    "eugenegordeiev": "I'm having the same issue using the latest code.  However, it only occurred with binary files where the last character was not '\\n' or '\\0'.\nThe fix by DavidAnderson684 has helped.\n. Hi terrafrost,\nThis issue has persisted for very long time. Why wasnt the fix implemented.  I just upgraded to the latest version and completely forgot about this problem.\n. ",
    "vbresults": "@bantu @terrafrost Experiencing this with v2.0.6, PHP 7.1.1, transferring a zip.  My 'client' is Linux, and the SSH 'server' OSX.  Maybe there is some sort of protocol implementation difference between OSes?. ",
    "Jelle-S": "We are experiencing the same issue. Reading through this issue it seems like there is a possible fix for it that won't get implemented? Although I can't say I completely understand the reasoning why it won't.. I think I understand your concerns, but what is the way forward now? Is there a plan of attack? Will this get fixed in an other way? Is there anything I can do (besides making a PR of the code suggested above since that will most likely get declined for reasons stated in your comment above this one)?. We have similar issues in the code that we use to do our deploys. As stated, this should have been a major release, not a minor one.. ",
    "noren": "I have similar issue @terrafrost on php 5.3.10 when is set setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_XML) if I take this out everything works. \n```\n<?php\ndefine('DECODING', false);\ninclude('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa->setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_XML);\n$rsa->setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_XML);\n$key_arrays = $rsa->createKey(1024);\n$privatekey = encode($key_arrays['privatekey']);\n$publickey = encode($key_arrays['publickey']);\nfile_put_contents('test-private.xml', $privatekey);\nfile_put_contents('test-public.xml', $publickey);\n$plaintext = 'terrafrost';\n$privatekey = decode($privatekey);\n$publickey = decode($publickey);\n$rsa->loadKey($publickey, CRYPT_RSA_PUBLIC_FORMAT_XML);\n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\necho \"Private Key: Public Key: \";\n$ciphertext =  encode($rsa->encrypt($plaintext));\necho \"Encrypted message: \";\n$rsa->loadKey($privatekey, CRYPT_RSA_PRIVATE_FORMAT_XML);\n$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\necho $rsa->decrypt(decode($ciphertext));\nfunction encode($string){\n    if(DECODING){\n        return base64_encode($string);\n    }else{\n        return $string;\n    }\n}\nfunction decode($string){\n    if(DECODING){\n        return base64_decode($string);\n    }else{\n        return $string;\n    }\n}\n```\n. @terrafrost here is a vagrant box with my example setup: https://bitbucket.org/nemezis/phpseclib-example\njust do \"vagrant up\" in cloned directory and add 192.168.56.200 awesome.dev to your host file. \nThis is my test environment for that code, if you switch branch from master -> broken then you should see exactly the same error I'm getting. \nIt is PHP 5.3.10 on ubuntu\nIf you have any problem with it please feel free to email me.\n. Hi, will do and update once reviewed, thanks\n. ",
    "Anahkiasen": "Now I get this though :\njson\n{\n  \"error\": {\n    \"type\": \"ErrorException\",\n    \"message\": \"Constant CRYPT_RSA_MODE already defined\",\n    \"file\": \"/Users/anahkiasen/Sites/autopergamene/entremets/vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php\",\n    \"line\": 506\n  }\n}\nShouldn't the unit tests catch those ?\n. All good now, thanks !\n. From a little debugging, the problem seems to be SSH2::_is_includable which does an existence check on paths like phar/Crypt/RC4.php\n. Well to give you an idea, as said the problematic code is the following one :\n``` php\nforeach (explode(PATH_SEPARATOR, get_include_path()) as $prefix) {\n  $ds = substr($prefix, -1) == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR;\n  $file = $prefix . $ds . $suffix;\nif (file_exists($file))\n```\nNow, if I dump get_included_path(), $prefix, $ds and $suffix once in an normal environment, once in a Phar, here's what I get :\n| Normal environment |  |\n| --- | --- |\n| INCLUDE_PATH | /rocketeer/bin/phar/vendor/phpseclib/phpseclib/phpseclib:.:/usr/local/Cellar/php55/5.5.6/lib/php |\n| PREFIX | /rocketeer/bin/phar/vendor/phpseclib/phpseclib/phpseclib |\n| DS | / |\n| SUFFIX | Crypt/RC4.php |\n| Phar |  |\n| --- | --- |\n| INCLUDE_PATH | phar:///rocketeer/bin/rocketeer.phar/vendor/phpseclib/phpseclib/phpseclib:.:/usr/local/Cellar/php55/5.5.6/lib/php |\n| PREFIX | phar |\n| DS | / |\n| SUFFIX | Crypt/RC4.php |\nAs you can see paths in a PHAR begin with phar://, and you explode the include path by PATH_SEPARATOR, :. So phar/ gets read as the first path.\nIt's quite a simple problem, I don't think the fix would be that tremendous, I can maybe try to give it a shot in a PR if you want.\n. Actually just using stream_resolve_include_path instead does the trick, and it does basically what _is_includable is doing, so a fix might just be this :\nphp\nfunction _is_includable($suffix)\n{\n   return stream_resolve_include_path($suffix) !== false;\n}\nBut it's PHP 5.3.2+ and I'm not sure what your minimum supported version is.\n. Basically it will load the relevant .bashrc .bashprofile files etc, which are required for RVM to be properly loaded. It's here in the map page as -l if I'm not mistaken\n. I'm not sure to be honest which mode the library I'm using uses, I use Laravel's wrapper https://github.com/illuminate/remote\n. Found a workaround.\n. Well first of all I made a mistake, the login option isn't on ssh itself it's on bash, you were right. The command I was running wasn't ssh user@host 'command' it was ssh user@host \"bash -lc 'command'\". So that's what I ended up doing for the few commands that required them. As I said, it's more of a workaround.\nI didn't succeed in using read/write, maybe I didn't understand the documentation clearly but I absolutely do not get what I'm supposed to pass to read to get the output of what was just written or even to start running commands. This is in the context of a deployer so I don't know what is displayed by the server, or what commands are passed to write.\n. It works but is still a workaround, meaning it's enabled only on a handful of commands, there may be specific things on the user's server that requires a full login and that I may not know of. I'll give another shot at read see if I can make it work, that'd be ideal.\n. Hm that doesn't seem to work as expected:\n``` php\n$ssh->setTimeout(5);\n$prompt = $ssh->read();\n$ssh->write(\"ls\\n\");\n$list = $ssh->read($prompt);\nvar_dump($prompt, $list); exit;\n```\n```\nstring (211) \"Last login: Sun Aug 17 14:30:21 2014 from 21.28.101.84.rev.sfr.net\n\u001b[1m\u001b[7m#\u001b[m\u001b[1m\u001b[0m                                                                               \n\u001b[0m\u001b[m\u001b[m\u001b[Jprecious-abyss# \u001b[K\u001b[?1h\u001b=\"\nstring (166) \"l\bls\u001b[?1l\u001b>\ntmp  www\n\u001b[1m\u001b[7m#\u001b[m\u001b[1m\u001b[0m                                                                               \n\u001b[0m\u001b[m\u001b[m\u001b[Jprecious-abyss# \u001b[K\u001b[?1h\u001b=\"\n```\nEven by using precious-abyss# as prompt (which is the actual handle on the server) I get the same result for $list. I don't think this is a bug or anything, probably just on my end I guess.\n. No I already tried, still bypasses the .bashrc/.zshrc files unfortunately\n. I usually set this via my SSH config indeed, enabling per-domain. I don't mind if this needs to be explicitly enabled in the library, as long as it's possible.\n. > I would also mention that forking would work fine currently, so long as you instantiate the SSH connection inside of the child process and not the parent. This would mean you would have a separate SSH connection for each command, but I don't see that as a major limitation of most systems...\nBut then on some levels you negate the performance gain of running multiple commands at once by making each process connect to the server, no?\n. You can just squash the commits no?\n. Any news on this?\n. I did a bisect of the repository and after a few tests, I can confirm this was introduced in 23c65c383945cfc9c2293f45a7cbc6f1a68178ec.\nWhatever it is it's related to timeout because if I put the timeout to 30s in latest stable then I do get my output, but with the same timeout of 10s (default) I get different results before and after this commit.\nOn a ~related note I tried to do setTimeout(false) but contrary to what is documented in the docblock this does not disable the timeout, it just times out as soon as I try to run anything. Same for setTimeout(0). But that's been already mentioned in #775\n. ",
    "jasekiw": "I second this. Now that mcrypt has been marked for removal in PHP 7.1 it becomes important to have a fallback to a pure PHP implementation.. ",
    "jonathanvaughn": "Thank you! Looking forward to it.\n. Awesome! That'll work fine. I had already implemented separating the IP addresses from the normal FQDN's for just this purpose... I'll hopefully have a chance to pull the phpseclib submodule and try it out before the weekend.\n. I seem to be running into a problem, I'm not sure if it's me or phpseclib. The crash is at \nFatal error: Function name must be a string in .../phpseclib-repo/phpseclib/File/ASN1.php on line 835\nI added some debug output echo's to see what it was choking on in _encode_der:\n```\nsource : '10.10.100.3'\nmapping : array (\n  'type' => 4,\n  'constant' => 7,\n  'optional' => true,\n  'implicit' => true,\n)\nidx : 'iPAddress'\nspecial : array (\n  'iPAddress' => \n  array (\n    0 => \n    File_X509::__set_state(array(\n       'Certificate' => \n...  \n      )),\n    1 => '_encodeIP',\n  ),\n)\n```\nI cut out the bulk of the special array since it appears to pass in a whole File_X509 there, and var_export generated a huge amount of output for it.\nFrom where it's crashing, it seems to be complaining about this bit of code in _der_encode:\nphp\n                $source = $special[$idx]($source);\nWhich means its trying and  failing to do the following, complaining that File_X509->iPAddress() doesn't exist, I think? But neither does dNSName? I'm not sure what's going on here exactly... \nphp\n$source = $special['iPAddress']('10.10.100.3');\nFor reference, here is the subjectAltName section of the X509 at this point (FQDN's anonymized):\nphp\n            array (\n              'extnId' => 'id-ce-subjectAltName',\n              'critical' => false,\n              'extnValue' => \n              array (\n                0 => \n                array (\n                  'dNSName' => 'xxxxxx.xxxxxxxxx.net',\n                ),\n                1 => \n                array (\n                  'dNSName' => 'xxxxx.xxxxxxxxx.net',\n                ),\n                2 => \n                array (\n                  'dNSName' => 'xxxxx.xxxxxxxxx.net',\n                ),\n                3 => \n                array (\n                  'dNSName' => '10.10.100.3',\n                ),\n                4 => \n                array (\n                  'iPAddress' => '10.10.100.3',\n                ),\n              ),\n            ),\n. That appears to have worked - I pulled your latest commit and I was able to sign the certificate now and looking at the resulting cert it appears to have IP as both DNS and IP. \nI still need to make sure I didn't introduce any regressions on my end in our system and test that it works as expected, but the cert looks right - I'll let you know once I have a chance to actually test it in-browser to verify the cert works across browsers / platforms as it looks like it should.\n. I encountered a separate issue (which may have been my own doing, or something that changed) and opened an issue on it with my workaround. However, I have tested the IP functionality for  this issue and it works perfectly!\n. I should note, File_ASN1 can decode a Kerberos message packet (obtained via wireshark), as decoding it and then var_export'ing the array returned gives the right sorts of stuff, it just doesn't have any of the useful mapping information of course, which makes using that output nontrivial. And I'd probably need all these definitions to be able to build a packet.\n. Thanks for clarifying how to use the ASN stuff! \nThis is what I'm starting with : https://www.ietf.org/rfc/rfc4120.txt\nThe ASN1 stuff is spread out throughout the doc with explanations, and all together in one place in Appendix A\nYes, it does mention that it is explicit tags : \nKerberosV5Spec2 {\n        iso(1) identified-organization(3) dod(6) internet(1)\n        security(5) kerberosV5(2) modules(4) krb5spec2(2)\n} DEFINITIONS EXPLICIT TAGS ::= BEGIN\nInterestingly, KerberosString is defined as a GeneralString that is limited to the IA5String character set - due to having been defined as GeneralString originally without thought to the limitations / consequences of it, and various implementations do/don't handle control codes properly and so forth, so to keep it compatible but reign in the chaos they redefined it to be limited to IA5String characters. I wasn't sure how to implement it other than just as a GeneralString, but wasn't too worried for now since as far as our usage goes we won't have any non-IA5String characters in our principals / etc anyways and it could be enforced in a layer above the ASN layer.\nIs there a way to limit ranges (i.e. Int32 / UInt32 which are what you'd expect, and Microseconds which is 0..999999)? If not, again, this is easy to enforce in the class that uses the ASN module rather than in the ASN module itself. It might be better to do it there anyways because it may be simpler to get useful error reporting if the ranges are exceeded.\n. OK, that's fine - even if I could enforce it in the asn1mapping, that wouldn't necessarily provide a useful way to return specific errors, I'd still have to do my own sanity checking.\n. I am trying to use asn1map but just getting NULL, from line 555 of ASN1.php. Here is a pastebin of what I have so far : http://pastebin.com/Ac0q3tsj\nIt var_export's the BER decoded packet, var_exports the mapping array that gets passed to asn1map, than it tries to asn1map the decoded packet and var_export the result but just gets null back. I added some echos to my copy of ASN1.php to find where it was failing, and it was at line 555.\nThere doesn't seem to be anything obviously wrong with $this->ASN1['AS-REQ'] that I can tell in terms of how it's structured, it follows similar structure to working ones in File_X509, so I'm not sure what is the problem. Did I miss something ?\n. Awesome vacation for you, thanks for letting me know. :)\n. Ah, the key difference appears to be (old code):\nphp\n        $this->ASN1['AS-REQ'] = array(\n            'class' => FILE_ASN1_CLASS_APPLICATION,\n            'cast' => 10,\n            ) + $this->ASN1['KDC-REQ'];\n(new code):\nphp\n        $this->ASN1['AS-REQ'] = array(\n            'constant' => 10,\n            'explicit' => true,\n            ) + $this->ASN1['KDC-REQ'];\nThis works - and presumably making similar changes for my other things that are defining application. Though, then I don't know when if ever I need to set the class / cast for something that in the ASN1 says \"AS-REQ          ::= [APPLICATION 10] KDC-REQ\" or similar then? \nI'll make similar changes throughout the code next week once I get the time, and then try decoding some other packets and then creating packets... hopefully the next you hear from me will be a success story :D\n. Actually, it looks like all I needed to add was 'explicit' => true, it works with class and cast and no 'constant' or 'optional', at least to decode the packet.\n. I've finally had some time to work on this some more, and while I've made some progress, I've hit some new snags.\nOne problem I ran into and may still bite me is that asn1map doesn't like it when you have an APPLICATION defined in the middle of the mapping (i.e. Ticket is APPLICATION 1, and is buried inside of for example an AS-REP which is APPLICATION 11) - for now I just removed the APPLICATION definition from Ticket, etc, but will likely have to properly work around this by just treating those as blind chunk of data at the next layer up (i.e. AS-REP) and then decode them separately, so that they can have their proper APPLICATION type?\nI am able to decode things just fine now (at least for AS-REQ / AS-REP, TGS-REQ / TGS-REP which is all I have fully defined yet and tested), but if I try encoding one (even re-encoding the same data I just decoded) it comes out wrong.\nOne problem (which may or may not impact actual Kerberos implementation interactions, but is against spec) is that the various bit strings should be encoded as a at least a 32 bit value rather than shortest bit string possible (i.e., a paticular AS-REQ's KDCOptions may have bits 9 and 1 set, and File_ASN1 will emit a bit string only 9 bits long instead of 32 bits).\nThe major hang up though is that when I re-encode the output of asn1map, it's missing the top level sequence.\nIt should be like \nApplication 10 (1 elem)\n    SEQUENCE (3 elem)\n        [1] (1 elem)\n            INTEGER 5\n        [2] (1 elem)\n            INTEGER 10\nbut instead I get\nApplication 10 (3 elem)\n    [1] (1 elem)\n        INTEGER 5\n    [2] (1 elem)\n        INTEGER 10\nExample code : http://pastebin.com/5Jwd22cp\nThanks in advance.\n. That fixed the Application sequence thing. So (as far as I've uncovered) the only other stumbling blocks I have at the moment are:\n1) Bit string encoding (phpseclib does it right, kerberos spec doesn't - it says to encode all 32bits - may or may not work with various kerberos implementations to do it ASN1 correctly) - is there a way to override encoding of bit strings (Is that what the 'special' argument is for, I see it's for some kind of custom formatting or something by passing in functions somehow)?\n2) Can't seem to figure out how to define the Ticket (with it's own application) within the asn1map, it appears to be off-by-one layer when it reaches the ticket in the decoded ASN, in lines 584 to 604 in File_ASN1.php :\n$temp is : \nphp\n       array (\n          'type' => 2,\n          'constant' => 5,\n          'content' => \n          array (\n            0 => \n            array (\n              'type' => 1,\n              'constant' => 1,\n              'content' => \n              array (...\n$key => $child is \nphp\n'ticket' => \n    array (\n      'constant' => 5,\n      'explicit' => true,\n      'type' => 16,\n      'class' => 1,\n      'cast' => 1,\n      'children' =>\nYou can see that the class and cast of $child should correspond to $temp['content'][0]. \nThe asn1mapping is this case is for AS-REP: \nphp\narray (\n  'class' => 1,\n  'cast' => 11,\n  'explicit' => true,\n  'type' => 16,\n  'children' => \n  array (\n    'pvno' => array(...)\n    ...\n    'ticket' => \n    array (\n      'constant' => 5,\n      'explicit' => true,\n      'type' => 16,\n      'class' => 1,\n      'cast' => 1,\n      'children' => \n      array ( ...\nThe decodedBER output : \nphp\narray (\n  'type' => 1,\n  'constant' => 11,\n  'content' => \n  array (\n    0 => \n    array (\n      'start' => 4,\n      'headerlength' => 4,\n      'type' => 16,\n      'content' => \n      array (\n        0 => array (...),\n        ...\n        5 => \n        array (\n          'type' => 2,\n          'constant' => 5,\n          'content' => \n          array (\n            0 => \n            array (\n              'type' => 1,\n              'constant' => 1,\n              'content' => \n              array (\nThe raw decodeBER output seems right, comparing to another decoder, which looks like this ..\nApplication 11 (1 elem)\n    SEQUENCE (7 elem)\n        [0] (1 elem)\n        ...\n        [5] (1 elem)\n            Application 1 (1 elem)\n                SEQUENCE (4 elem)\n                    ...\nBut I guess however I'm defining the asn1mapping is wrong, because it's looking in the wrong spot in the asn1mapping when it reaches the ticket section.\n. If I pad the input to encodeDER wouldn't it end up setting the bits that should still be 0's though ? Or can I somehow set like 'validate' => 0 and it'll be set to 0, instead of 1? Or just do 31 => false or 0 or something instead of 'validate' (which would essentially be 31 => 'validate') ?\n. I am able to decode and re-encode an AS-REQ packet and have the only difference be the bit string for KDCOptions, it comes out to 9 bits because the most significant bit that is set is the 'renewable' flag.\nAfter asn1map, the KDCOptions are decoded to : \nphp\n'kdc-options' => \n    array (\n      0 => 'renewable',\n      1 => 'forwardable',\n    ),\nWhich are the only flags set in the decoded packet (corresponding to bit 9th and 2nd bits), so this is right. \nWhen I pass this into encoderDER, the resulting packet has only those bits set (again, correct), but now it is encoded correctly to ASN spec (the extra 0's above the 9th bit are gone, only 9 bits are encoded, minimizing space usage) - Kerberos spec (due to failing to follow ASN exactly initially, and now being grandfathered in for interoperability with older systems) requires that at minimum 32 bits be encoded for the bit string (there are so far no bit strings with more than 32 bits, so this comes out to meaning that it's always 32 bits at the moment).\nAgain, I haven't tested this against modern implementations yet (don't have enough of the rest of the code worked out to even try to do so) so it may be fine, but on the other hand, it may be considered malformed because of it.\n. For the # of bits in bit string, it's really simple if we just add a bit of code to set $size based on 'min' (if it's set), since that's not used otherwise by bit string.\n``` php\ndiff --git a/phpseclib/File/ASN1.php b/phpseclib/File/ASN1.php\nindex 8627b81..b01f0e8 100644\n--- a/phpseclib/File/ASN1.php\n+++ b/phpseclib/File/ASN1.php\n@@ -971,6 +971,10 @@ class File_ASN1\n                             $size = $i;\n                         }\n                     }\n+                    if ((isset($mapping['min'])) && ($mapping['min'] >= 1))\n+                    {\n+                        $size = $mapping['min']-1;\n+                    }\n                 $offset = 8 - (($size + 1) & 7);\n                 $offset = $offset !== 8 ? $offset : 0;\n\n```\nI tested this change and the AS-REQ packet now is re-encoded bit identical to the original. \n. http://pastebin.com/bLVNWS0S\n. You might have figured it out. At least, it looks like it from a quick change and test ... hopefully now I'll be able to perform the whole TGS-REQ / TGS-REP / AS-REQ / AS-REP sequence, and if that works then everything else should hopefully be downhill from now.\n. Yeah, that's the plan, once it's not a terrible collection of hacked together testing code. :) I want to at least get it to the point where it can replace our usage of the krb5 pecl extension for SPNEGO (which isn't exactly wonderfully supported and doesn't seem to like newer builds of PHP, including the most recent versions of 5.3.x, not just 5.4+). Ideally a full blown implementation of all the things, but at minimum be able to do SPNEGO authentication of users for SSO and do password changes. If we can even implement a bare bones KDC in PHP that'd be great if only to make testing easier without having to spin up a \"real\" one, but that'll probably be the last thing I try to do, if I get to it.\n. Not sure if this is working as intended and I'm doing it wrong, but Math_BigInteger is really inconvenient when you don't need big integers, so I've been converting them back to regular (by doing $var = intval(strval($var)) basically). However, File_ASN1 doesn't like that - it assumes it'll be a Math_BigInteger and silently-ish fails when it tries to call ->toBytes(true) on the regular PHP variable (since there's no such member on a regular var).\nI made this simple tweak for now, though if there's a good reason that I need to cast them all back to Math_BigInteger before feeding them to encodeDER I can do that instead:\nphp\ndiff --git a/phpseclib/File/ASN1.php b/phpseclib/File/ASN1.php\nindex b01f0e8..c11dd1d 100644\n--- a/phpseclib/File/ASN1.php\n+++ b/phpseclib/File/ASN1.php\n@@ -942,6 +942,7 @@ class File_ASN1\n             case FILE_ASN1_TYPE_INTEGER:\n             case FILE_ASN1_TYPE_ENUMERATED:\n                 if (!isset($mapping['mapping'])) {\n+                    if (!is_a($source,'Math_BigInteger')) { $source = new Math_BigInteger($source); }\n                     $value = $source->toBytes(true);\n                 } else {\n                     $value = array_search($source, $mapping['mapping']);\n. I've not been able to play with this lately, but I don't foresee any more major stumbling blocks like I had in this thread specific to ASN1, so I'm going to go ahead and close this.\n. Master still has the same behavior, I just tested it.\n. To be more specific with regards to RFC, per RFC3279 https://tools.ietf.org/html/rfc3279#section-2.2.1 using RSA encryption in X509:\n\nWhen any of these three OIDs appears within the ASN.1 type\n  AlgorithmIdentifier, the parameters component of that type SHALL be\n  the ASN.1 type NULL.\n\nI think the output result of ['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters'] needs to end up being NULL - that seems to be the relevant structure. It's currently defined as optional in File/X509.php around line 370.\nSo far, I have tried: \n- making optional false\n- setting the ['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters']['value'] to null \nI noticed there's a filter set to make it a string? or to filter out strings? Not sure what the intent is. In either case, nothing is output for parameter. Around line 1500.\n. That will probably work. I'll hopefully test it today.\n. I just tried this, and it doesn't appear to work (I'm not seeing any NULLs at all). Though, it seems we're working against different versions of phpseclib since the line numbers didn't match up (I am on master now).\n. Oops, due to ID10T error at some point I accidentally started using PECL installed version, not the version in my project's directory. So, above comment may be false. \n. Yeah, it probably works. Meanwhile I think I came up with a slightly less terrible hack, but I can't fully test because one of the changes that master has gone through is namespace changes and the project I'm using it in is based in Yii 1.x which is terrible at handling PSR style namespacing ... so I'm fighting with it currently to get the autoloader to behave. I was able to reissue my test root certificate and it looks okay, but trying to then use it to sign the reissue of my test server cert is running into this namespace nonsense ... \nI may just roll back to where I was, and apply the fix there, and worry about it later... \n. I THINK this will work for master:\ndiff --git a/phpseclib/File/X509.php b/phpseclib/File/X509.php\nindex 05f23dd..813c0ce 100644\n--- a/phpseclib/File/X509.php\n+++ b/phpseclib/File/X509.php\n@@ -1482,6 +1482,7 @@ class X509\n             default:\n                 switch ($algorithm) {\n                     case 'rsaEncryption':\n+                        $cert['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters']['value'] = null;\n                         $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey']\n                             = base64_encode(\"\\0\" . base64_decode(preg_replace('#-.+-|[\\r\\n]#', '', $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey'])));\n                 }\n@@ -1496,7 +1497,14 @@ class X509\n         $filters['tbsCertificate']['signature']['issuer']['rdnSequence']['value'] = $type_utf8_string;\n         $filters['tbsCertificate']['issuer']['rdnSequence']['value'] = $type_utf8_string;\n         $filters['tbsCertificate']['subject']['rdnSequence']['value'] = $type_utf8_string;\n-        $filters['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters'] = $type_utf8_string;\n+        if ($cert['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters']['value'] == null)\n+        {\n+            $filters['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters'] = array('type' => ASN1::TYPE_NULL);\n+        }\n+        else\n+        {\n+            $filters['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters'] = $type_utf8_string;\n+        }\n         $filters['signatureAlgorithm']['parameters'] = $type_utf8_string;\n         $filters['authorityCertIssuer']['directoryName']['rdnSequence']['value'] = $type_utf8_string;\n         //$filters['policyQualifiers']['qualifier'] = $type_utf8_string;\nMy actual code against the commit we were working with previously (since I couldn't get the namespace/autoload changes to work in Yii properly without major surgery):\n```\ndiff --git a/phpseclib/File/X509.php b/phpseclib/File/X509.php\nindex 0b4e291..5668da9 100644\n--- a/phpseclib/File/X509.php\n+++ b/phpseclib/File/X509.php\n@@ -1496,6 +1496,7 @@ class File_X509 {\n             default:\n                 switch ($algorithm) {\n                     case 'rsaEncryption':\n+                        $cert['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters']['value'] = null;\n                         $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey'] =\n                             base64_encode(\"\\0\" . base64_decode(preg_replace('#-.+-|[\\r\\n]#', '', $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey'])));\n                 }\n@@ -1524,6 +1525,10 @@ class File_X509 {\n         $filters['policyQualifiers']['qualifier'] =\n             array('type' => FILE_ASN1_TYPE_IA5_STRING);\n\nif ($cert['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters']['value'] == null)\n{\n$filters['tbsCertificate']['subjectPublicKeyInfo']['algorithm']['parameters'] = array('type' => FILE_ASN1_TYPE_NULL);\n}\n         $asn1->loadFilters($filters); $this->_mapOutExtensions($cert, 'tbsCertificate/extensions', $asn1);\n\n```\n. In theory, if you use something other than RSA type algorithms. That's what it's there for, but RSA type algo's dont have any parameters.\n\n\nSeems better to only force it when it's supposed to be forced, just in case someone needs the functionality?\n. Okay my code for master branch works, I managed to hack my way around the autoloading nightmare (sort of - I had to make one extra change to File_X509.php where there's an array_map causing autoloading fail) so I could test it.\nThe first diff I posted works fine against master.\n. To be specific about which algo's need the parameters, it seems RSA doesn't need it but DSA and elliptic curve (ECDSA) variations do. There might be others defined in newer RFCs, those are just the ones I see mentioned in RFC 3279.\n. They did work for me in FF38?\nThere may be something else that you're missing that we're \"doing right\" perhaps? I know it also will reject IPs listed as dNSname (which is annoying, because to support IE before Windows 10 you must do that instead of using IPs listed as ipv4)\n. Here are the certs I generated and tested with, for example.com :\nCA cert:\n-----BEGIN CERTIFICATE-----\nMIIF1TCCA7+gAwIBAgIBOzALBgkqhkiG9w0BAQswcTELMAkGA1UECxMCSVQxEDAO\nBgNVBAoTB2V4YW1wbGUxEzARBgNVBAcTClJpY2hhcmRzb24xCzAJBgNVBAgTAlRY\nMQswCQYDVQQGEwJVUzEhMB8GA1UEAxMYZXhhbXBsZS5jb20gUm9vdCBDQSB0ZXN0\nMB4XDTE1MDYxODA1MDAwMFoXDTE4MDYwMzA1MDAwMFowcTELMAkGA1UECxMCSVQx\nEDAOBgNVBAoTB2V4YW1wbGUxEzARBgNVBAcTClJpY2hhcmRzb24xCzAJBgNVBAgT\nAlRYMQswCQYDVQQGEwJVUzEhMB8GA1UEAxMYZXhhbXBsZS5jb20gUm9vdCBDQSB0\nZXN0MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEApNFb3raO1ZtaZXOP\n5F6miWGteCYvU1921tdBLk2cwKs/7Id73V7QBj9/EQF5tlDnsNAMy+KLo/bUPD6c\nj6C91AGTv03+8u9j+Rx2th1l7ZEeIf0aLa9mZWJufR2aVUN2cXntQ8OFczOVlKtg\nHVG4MLeFDI6EGu8f2YeQKQgttJDffQakFWM3ZrbzOAjCkboGG8V9T/a517OQRvg9\nUxW7tJ607czThPCNi2BYbzuuKnNTVM1Tad6z3RVaTynOqlPZr5KfmyyMFeNFvFFB\nMb8poY7mLfqTs2HsD9coXMtgRJ++C1voFyfSOnSxnFDARsgmOlNOWbH9216nAPAd\n5+xxrhkf8rSj3FvS/SqNwqAUX30I9cgD/M73xuvAaxE8QCQNSL2TVy7WLD2dY4LW\nFqiE53wHVU47kZCL+awmgSH+6g2tXG7edxoUyuhP3B2PvB5OpNxp/fU+9EMNWjPS\nC26ucchqyCVKBlVObvfAavNCWf84HTnzQpKCS3F6aqRsb+WON18i7ec75i/3bbRq\ntTzDsSO3dgC/gXMs1gtrWQWD/klkfeTnLQQ+UlotgrUMpXlH12b+32FS7oaCSc09\nHTxYIBJzxoICLNM/TOLbhWo6qDCXDePzhOwoVbgVJLvPhNC7dTwJcSSeFjfpcI9w\n+/MhygYPHhkJ7VSuG0624e2ejH0CAwEAAaN8MHowCwYDVR0PBAQDAgEGMA8GA1Ud\nEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCr7Iqlpr5jFBfDt5RdT6grj8bsyMDsGA1Ud\nJQQ0MDIGCCsGAQUFBwMCBggrBgEFBQcDAQYIKwYBBQUHAwQGCCsGAQUFBwMDBggr\nBgEFBQcDCDALBgkqhkiG9w0BAQsDggIBAGa1gG7HXEBjC5Ke0m+88ReFKSjIS0g2\n/XNYKuTUG7a0iOKFFaS2/5YcKemPdHJcKWTwz9rNgvKshcYIXk6xFGYHqanWOiV5\nd4fF27ovAUTE8qWsjQbfXgB1HnCkLUSjUU5jUiJSP3D6d1Y5KfJg2VVFwRe4chKX\nMQ95+axZATwrRmPspDvkD4AL7l7avb0A8GJggnR6OBurFQynS6ee9Vk9ycpXP+4j\nxWMT18EL9KSkVihcW+s3scSBMEVJ1tFJ1uftJPWMCc68bpbZQ8G/rEWiXEZaD+Tq\nt4gxYPIJzH2n/wx8qxB71957RaE0hF+FxDszJbPmiXSAiMuz+FDf7Gqzh4CxjIJR\ntwqSyuGWK19cgZwSuuDRqzzCJFy1OdFAf2Dz+3MH+wrbnJ0dtdlXpOVHKm4i7tSh\nUoAdQljI3OdJ+48CPaSRDLPs22HqRklvhKBuyTCQYGEcT/TwCj0zHq1LXvBBwQdT\nfiN3uuHi8a3I+r34icNig+slO/oneW0NmFbOIJ3hMQoztmQo3pUILRmg73iu+/Qp\nRMgUVui7bEkQaj9wZEhp6dGNNB2vUPUIGF6FyTGdHCF2rCcFAnJJ7z58RzhP4ne2\nwPboJX/dPipevLEcgLQcko3DiGM6/Yj6Huq6rEX5jE9KVW6UkV5jwb7ohvEsnwKZ\ngEWaoK9tNyTA\n-----END CERTIFICATE-----\nServer cert\n-----BEGIN CERTIFICATE-----\nMIIErTCCApegAwIBAgIBPTALBgkqhkiG9w0BAQswcTELMAkGA1UECxMCSVQxEDAO\nBgNVBAoTB2V4YW1wbGUxEzARBgNVBAcTClJpY2hhcmRzb24xCzAJBgNVBAgTAlRY\nMQswCQYDVQQGEwJVUzEhMB8GA1UEAxMYZXhhbXBsZS5jb20gUm9vdCBDQSB0ZXN0\nMB4XDTE1MDYxODA1MDAwMFoXDTE4MDYwMzA1MDAwMFowZDELMAkGA1UECxMCSVQx\nEDAOBgNVBAoTB2V4YW1wbGUxEzARBgNVBAcTClJpY2hhcmRzb24xCzAJBgNVBAgT\nAlRYMQswCQYDVQQGEwJVUzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXGdngGjnGwDTYM6WVh5YNg9hZafaM0lvG\nnhRPo+JraVZOw9jxfbQpCGoW1ZAGzsxcthD6h5Ars9Q0TUOgQOsFjqW7Pjws5lax\nR0cYf50of2XEWx82whF+0ixlZCfeb3qeprEAbkIb7WKAphzgM3wUubKHckhuOJrM\nIZ60mKDd6PfZyFpVM/A2IL3+v+FbVeAy40UrCGXj9M6SU7XmgeNtkHNtTORv0F55\njzjJOAYuQyo/42bTu+x64NqOArNmq1xalx8/4lKHOpzmcRr4pMtDXeFV2a2RlB7y\nV89M2Jm8tC5lakhK0NJQ5Gk7MUfffsaTqM/tpUZj1cADhVP/Yu6xAgMBAAGjYTBf\nMBMGA1UdJQQMMAoGCCsGAQUFBwMBMCcGA1UdEQQgMB6CC2V4YW1wbGUuY29tgg93\nd3cuZXhhbXBsZS5jb20wHwYDVR0jBBgwFoAUKvsiqWmvmMUF8O3lF1PqCuPxuzIw\nCwYJKoZIhvcNAQELA4ICAQBJ3QLXJ8HzVemd+XukcwS7zGa0hpNnWRcYZtwS4YXY\nmqC+3VWhHhFrzT53OczwD05neOYOgNLltJZ8NCnG6O9OMPcoBqC9y0mzlcVk3JGN\nUXDJ5u+AKb+o36kV81o9lE+RcgJ8jys5M1iNcYGCFX7YdNQEJohMBrvMbbdq8nQ6\n3KkiGxKCqFLp5XiGyW7xJFNghvN4ynkpa2y+p0rWaWjOx/aYEfcty/76tV5Wkg/l\nRzQyHmLA9WUP135GQlEloLkvUhEqzNJ41pjua6resHSMcfgFxtPRwmuBVtdWruVC\nMm50hKSLRpWZFxcGJOJo1uHri1OgHTkfy6i+jnuWRIiR/IrUK202FC/SCm1g6oCa\n/Ois/NwEzw1IJ1DQadUS6YPqX/D2YA55MZw0yFzHXtpFdR8wF4THJtOo2j11a6pl\nGNq3Kx5LimGdKLz0G9KMJOMlUL8nKHAqrpQbMUUqY7HC3izB+0a9zo1fEFBGVO6w\nKMp0gZcUeBBPl6wESPFVpnQo9zsOqqPdrdgxtPa60kMAZY1H1C0rrTRm+GZsPLvr\nkRZ0yEVpJZtmcoQsyAnrD24C0tz0xn5v+cV9iDTDFfhGmRHICyYlfU+AHV0csBNj\nA+8ASHPe81OOgC3pfVPf0wTW5Eqg13HvbdwIiJgmoiuPV2IkVrMf6dhYyvkecRne\nBQ==\n-----END CERTIFICATE-----\n. Sorry all, I haven't had time to focus on this (always something else being higher priority than functioning PKI...). \nThe only issue we were currently stumbling on (at least, as far as we knew) was the one for rsaEncryption, though the fix may have fixed the others as well, if they were also issues? In either case, I haven't had a chance to do more than test that the issue is fixed with a test certificate - haven't had time to deploy this to production or regenerate certificates and I also haven't tested the #721 / #722 commits vs my PR myself, but I'll take your word for it that they work and are a better fix (updated tests and all!) - feel free to reject my PR.\n. ",
    "ferrousnetworks": "Ah, alright, I did not see. I arrived here from Packagist; perhaps attatching the other repo there would be beneficial, as Composer needs PHP >= 5.3.2 to run anyhow.\n. ",
    "hezad": "Oops then. My bad.\n. Looks like Random.php tries to serialize $GLOBALS and in my case, it was containing an anonymous function added by another lib (the error was about the impossibility to serialize a Closure)\nOn Sun, Oct 13, 2013 at 11:05 PM, terrafrost notifications@github.com\nwrote:\n\nThis change fixed a bug\nWhat was the bug this change fixed?\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpseclib/phpseclib/pull/156#issuecomment-26227099\n. \n",
    "VictorZhang-1928": "And line 2298 in file BigInteger.php ?\n. ",
    "briannesbitt": "Cool.  Feel free to make the null all caps :-)\nAny idea when you'll release an update?  The current (released) version of put NET_SCP_LOCAL_FILE doesn't work ... I realized its fixed in the master after I had fixed mine locally.\n. Ok, thanks for this library!\n. ",
    "frankdejonge": "@bantu I agree there, we'll see what the maintainers have to say.\n. @bantu updated.\n. @terrafrost, while I totally get what you're saying, this seems to be not entirely true. I don't define that constant in my code, yet I still get that error thrown. Perhaps it's due to the fact it's autoloaded by composer (as is instructed in composer.json) which uses require and not require_once. Then in the code the require_once called on the thing, maybe this is a dodge situation where php does not require it only after the require_once, in which case I think either the composer include should go away or this check should remain in place.\n. To add to that, I've just checked if the same thing happens with the composer include removed, and all is good, so it is in fact something which is in the responsibility of the package, not the package consumers.\n. Just to get every bit of the conditions out there, I've grep'd for another case of defining the constant and it's only done in that particular file.\n. @bantu @terrafrost are you guys picking this up or would you like me to do it and send a PR?\n. Seem like I might have to do some method extraction in order to handle all the different scenario's a little nicer. Currently the while loop in Net_SFTP checks weather the amount sent is smaller than the size. But when you allow stream input you won't know this, you'll have to detect a EOF and then break the loop. Unfortunately there's no reliable way to check for the stream length in PHP without loading it all into mem, which is what you want to prevent in the first place.\nAny suggestions/idea's about this?\n. Ah yeah I see, I can use fstat. I was looking at stream_get_meta_data, there was a reference there about size not being accurate and no reference to any stat related function.\n. @terrafrost hi, sorry for not getting back to this. Got swamped with work and had other open-source issues to attend. Thanks for making this happen. Any idea when the next release will ship?\n. Might be due to the include instead of include_once statements used in different parts of the library? Even just including phpseclib in a project which doesn't use it causes it to fail due to this constant.\n. By including I mean adding it through composer, just to be clear.\n. I just checked for random includes, but can't seem to find those. This is an odd error, though ... \"I'm not alone\" ;)\n. @bantu ah ok, I'll fix that :+1: \n. ",
    "glensc": "Whoops, my bad, I had 0.2.1a1 installed although I was sure I had 0.3.5\n. ",
    "phonzie": "Keeping your intentions in mind. From a maintainability standpoint, could have a the definition as a blank string and force users to fill it in with a specific user_error. Otherwise, it's literally going to write to the file: \"NET_SSH2_LOG_REALTIME_FILENAME\" in the current working directory.\nAt the very least, provide a commentted-out definition for users to update.\nI just don't like leaving the error up to chance.\nThanks for the response!\n. ",
    "PVince81": "Never mind. Seems to be fixed on master already.\n. Yeah, I overlooked it because I didn't know the PHP extract() method before.\n. This is on the master branch.\n. Ok will do. I didn't realize you were also contributor in this project :smile: \n. See attached PR\n. I need to check how the lifecycle of a stream wrapper works. If fopen can only be called once for an instance (no reuse) then initializing it in the property def might be enough.\n. Cool, thanks.\nI just had a look and there is an example here that also inits the class memember $position to 0 in stream_open instead of in the class definition: http://www.php.net/manual/en/stream.streamwrapper.example-1.php\n. PHP 5.4.20 (cli) \nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n    with Xdebug v2.2.2, Copyright (c) 2002-2013, by Derick Rethans\n. phpseclib version 0.3.5\n. The warnings disappeared after upgrading to 0.3.6\n. Any update on this ?\n. ",
    "h4cc": "@bantu Thanks for that hint. Modified patch.\n. ",
    "hhamon": "I'm using the Net_SFTP class and the history shows it has been updated recently. I don't know if those commits are bug fixes or just improvments.\n. Well I can handle on my own but for example, I will probably (not sure about it yet) release a Symfony bundle that provides an SFTP client class that wraps an instance of Net_SFTP. In the composer.json, I would like to set a tagged version of the phpseclib dependency. I know other bundles that also depends on this library. Having well tagged stable releases would help for third party integration.\nIn the Symfony community, we release minor versions of the framework every month and major versions every six months. I think you should do roughly the same thing. Tagging new stable releases every month or every two months. People using phpseclib with composer will thank you :)\n. Well it's really up to you of course but it would be more convenient to rely on stable releases when deploying critical code to production. I don't see why it's so time consuming to create a tag on the github repository. Composer natively handles Git tags as stable versions.\n. ",
    "Esysteme": "just to be sure nothing new on branch PHP 5 for the moment ?\n(just saw upgrade about microtime) and the composer.json but mean nothing coz no psr-0 or psr-4 for the moment\n. I need this lib fully support with psr standard, I will fork and make upgrade to be compatible with \nPSR-0\nPSR-1\nPSR-2\nPSR-4\n. lol I mostly converted all code :p\n. you mean this fork ? \nhttps://github.com/cnelissen/phpseclib/tree/php5\n. @bantu what is the good one then?\n. sound like good, i will try it tomorow\n. Why this pull request is still waiting ?\n. finnally =)\n. @terrafrost kinda uggly to use @, because most of time it's hide real error.\n@CMCDragonkai use phpseclib to make somthing like that on all you server :  \nbash\nsed -i 's/;date.timezone =/date.timezone =Europe\\/Paris/g' /etc/php5/apache2/php.ini\nsed -i 's/;date.timezone =/date.timezone =Europe\\/Paris/g' /etc/php5/cli/php.ini\n. need help ?\n. same ;)\n. thx you ;). ",
    "JonTheNiceGuy": "Thanks for this - I might run some more questions past you soon-ish around this, but for right now, this was really helpful! Thanks!\n. ",
    "garak": ":+1: for supporting ECDSA\n. ",
    "sumardi": "@terrafrost in my case, it happens when using Laravel workbench as package development and have phpseclib in the package. Laravel will load both vendor/autoload.php which have Random.php, causing fatal error. thanks.\n. okay. will do later tonight. thanks.\n. @terrafrost here is the simple laravel project to demonstrate https://github.com/sosg/phpseclib-demo. thanks.\n. the url is correct. u have to update the workbench composer.\ncd workbench/sumardi/phpseclibtest\ncomposer update\nthen open the url.\n\u2014\nSent from Mailbox for iPhone\nOn Sat, Dec 28, 2013 at 2:02 PM, terrafrost notifications@github.com\nwrote:\n\nWhat's the file I should be accessing? I go to the URL corresponding to \"phpseclib-demo/public/index.php\" on localhost and it says \"You have arrived.\". I'm not seeing any error...\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpseclib/phpseclib/pull/217#issuecomment-31291261\n. @terrafrost sorry, there was a mistake in readme. it should be workbench/sumardi/phpseclibtest.\n\nfixed the readme. thanks.\n. How come it's empty? Hmm.. \nThere are files in the folder, see\nhttps://github.com/sosg/phpseclib-demo/tree/master/workbench/sumardi/phpseclibtest\n. @terrafrost yes. public is empty. it doesn't matter. all you have to do is to run composer install in the folder.\ndid you run composer install or composer update in the folder /workbench/sumardi/phpseclibtest ?\n. I believe the instruction in the readme is correct. https://github.com/sosg/phpseclib-demo. \nbasically, to reproduce the error, just need to require \"phpseclib/phpseclib\": \"dev-master\" in the workbench package. \n. @terrafrost open the URL public/index.php.\n. ",
    "crynobone": "@terrafrost just a little background, \"workbench\" are consider as package development on Laravel. So you will have 2 composer installation, one at the main application, and another one inside the workbench folder. Laravel then use a special function to read the list of autoloaded file from workbench/vendor/package/vendor/autoload.php and append it to the application classloader.\nThis is mainly for temporary development, once it's complete the so call package should be listed to packagist or satis and install directly from the main app (which would avoid duplicate phpseclib).\nFrom above example, there another composer install happening from within the  https://github.com/sosg/phpseclib-demo/blob/master/workbench/sumardi/phpseclibtest/composer.json which would generate the said folders, and https://github.com/sosg/phpseclib-demo/blob/master/bootstrap/autoload.php#L74 going to load the duplicate function.\n. @terrafrost if the development package require it (and want it to work outside of Laravel as framework agnostic library, they need to explicitly require phpseclib.\n. Orait then, at my end what I can do to resolve this is maintain a fork of phpseclib for workbench usage :)\n. ",
    "aequasi": "\nYou're only going to get this error if you try to include the file twice. And you'll get errors like this for any file. Include Net/SSH2.php twice and you'll get a fatal error there as well. So... should we add a class_exists to every file? No. You shouldn't be including files twice.\n\nComposer wont load both class files, it will only load the class once. IIRC. But when defining functions, it seems to have more of a problem\n. im not really sure how this is a problem for composer. If its really not an issue to just add !function_exists calls around the function definitions, why hasn't it been done yet. We don't need class_exist calls,\nAlso, im not loading library, one of my dependencies are\n. Then dont change the name, and dont change the coding standards. Your project should follow coding standards of other libs, but it should check to make sure the function doesnt already exist. Thats just good programming.\nI'm all for making your library your library, but its not a big change to add this function_exists logic...\n. its not really a \"whats next\" situation. Some people need two autoloaders, and its not really feasible to change the composer autoloader to check for all the function declarations. If someone else has defined the function, you shouldnt be trying to override it. This goes against extensibility too. \n. @bantu that would also work i believe\n. in the php5 branch, if its a class, the issue shouldn't come up. \n. No, not laravel, my own project. Why wouldn't a function_exists check help here?\n. @bantu mind linking the other issues? Or a specific reason for not using function_exists\n. I replied on that ticket, but I don't think function creation works the same way when using composer\u2014\nSent from Mailbox for iPhone\nOn Mon, Apr 14, 2014 at 2:05 PM, Andreas Fischer notifications@github.com\nwrote:\n\nSee e.g. #217\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpseclib/phpseclib/issues/320#issuecomment-40418079\n. That only applies for the php5 branch though, no?\n. No worries :)\n. Doesn't matter to me who submits the change,\n\nedit\nfunction_exists is something that should be used frequently for libraries that create functions.\n. Yeah, but how do I get that message? It'd be nice to know if its a \"hostname doesnt exist\" issue, or a \"username/password doesnt work\" issue\n. I'm just looking for how to get the error message on why it failed, not whether or not it failed, though, that update would be helpful either way :)\n. An exception would be awesome, but i can't upgrade to the php5 branch, as one of my deps is using 0.3.7......\nIs there any way that it could add the error to $ssh->getErrors()?\n. Dur . That should work great.\n. If the documentation doesn't match the master branch code, it shouldn't be the linked documentation. At the very least, master should label the link \"1.0.0 documentation\" and have a link to another set for master/2.0.0\n. Why would you not have the master branch have its documentation? I agree about changing the default branch though.\n. So then remove the doc link\n. Symfony has LTS, and yet Symfony also doesn't have a problem with its documentation.\n. An easier solution would be to follow some of the earlier suggestions.\n. ",
    "bit111": "Yes, I have already tried to use urlencode, urldecode, base64_encoe, utf8_encode but the issue remains.\nThe strange thing is that in local host it works, online (on my hosting) it doesn't works.\n. Hi, I think I've solved using \nphp\nurlencode(base64_encode($rsa->encrypt($myMessage))).\nSo, a last question: why decrypt doesn't works if I use\nphp\nurldecode\nin decrypt?\n. In my last post I wrote I've used urlencode(base64_encode($rsa->encrypt($myMessage))).\nCan you give me an example of passing data with other ways instead to use GET? Thanks.\n. Yes, I know POST and GET methods. So, I generate the encrypted message from linux terminal with php-cli and I append it to my website link. Is there a way to pass the ecnrypted message with POST (from bash) instead of to use GET?\nThanks.\n. thank you @terrafrost \ncan I open browser in this way?\n. My intention is to open a web page from terminal, in this way:\nchromium mysite.com/param_passed_as_POST\n. Sorry, but I don't understand how to solve this issue\n. Thank you very much @terrafrost !\nIt works!\n. ",
    "s22l1g11": "sure! Just go to: http://dev.zimmerpforte.de/crypto/api/encryption.php\nIt'll generate keys with a length of 2048bits.\nI first thought that I could have trouble with working with 4096bit keys for the system and with 2048bit keys for the users and then changed the system keys to 2048bit ones.\n. It seems to work now, even though I inserted the system keys directly via PHP and not via Copy&Paste. Thanks for the help and a Merry Christmas!\n. I just recognized that $rsa-loadKey($this->getSystemPublicKey()); runs perfectly and data of my users is now encrypted but when I try to decrypt them with $rsa->loadKey($this->getSystemPrivateKey());, I get the following notice:\nNotice: Decryption error in [\u2026]/api/Cryption/Crypt/RSA.php on line 2211 \n. Here's the base64-encoded ciphertext (hope this is the right one):  \nHere's my base64-encoded privatekey:  \nMy encryption looks like this:\n\n$rsa = new Crypt_RSA();\n$rsa->loadKey($this->getSystemPublicKey());\n// note that $userFirstname was created with:\n// $userFirstname = $_POST['user_firstname'];\n$userFirstname = $rsa->encrypt($userFirstname);\n\nWhen I try to decode my ciphertext it looks like this:\n\n$rsa = new Crypt_RSA();\n$rsa->loadKey($this->getSystemPrivateKey());\n// I'm using PDO with $result = $stmt->fetchAll();\n$userFirstname = $rsa->decrypt($result[0][userFirstname]);\n\n. Well the functions $this->getSystemPublicKey() and $this->getSystemPrivateKey() get keys that were generated with phpseclib and stored directly into the DB. Though I do create a key pair for my users for the messaging system, but it has no effect on the system's keys. They are used to encrypt and decrypt the user's first- and lastname as well as their emailaddress.\nVisit this site to see the output of $this->getSystemPublicKey() and $this->getSystemPrivateKey(): http://nahilfo.zimmerpforte.de/testing/v2/?p=phpseclib\nps: I don't mind to show those keys publicly because the system is still in beta and though I create new keys every once in a while...\nBelonging to my base64-encoded key:\nI thought you need that one as well... sorry. And no I'm not using that output!\nThe censored sourcecode of getSystemPrivateKey():\n\n// somehow the highlighting wouldn't work with this sourcecode\n// 1st create a DB connection\n// 2nd create a prepared query saved in $stmt\n$stmt->execute(); // executes the query (PDO style)\n$result = $stmt->fetchAll(); // gets all the results, something like mysql_fetch_array()\nreturn $result[0][systemPrivateKey]; // returns the private key\n/\n some explanation\n $result is an array with (sometimes) multiple levels e.g. $result[0], $result[1] and so on\n in these levels every selected table is saved just like systemPrivateKey\n because this table has only one row you call $result[0][systemPrivateKey] to get the value of it\n I hope that I explained everything in the right way...\n*/\n\nBelonging to the syntax error: that was a typo, sorry for that!!\nSome more explanations:\n$this->getSystem[...]Key is a function inside a class that extends another class, that's why I use $this-> everytime I call it.\nSome more code:\nThe system's key pair is created by(?) the following censored function:\nphp\n// my path\nrequire_once('api/Cryption/Crypt/RSA.php');\n// creating an object\n$rsa = new Crypt_RSA();\n// creating keys \n$keys = $rsa->createKey(4096);\n// extracting the keys\nextract($keys);\n// 1st creating a DB connection\n// 2nd enable exceptions for PDO\n// 3rd create a prepared query with PDO and save it in $stmt\n/*\n* the query looks like this:\n* UPDATE [tablename] SET systemPublicKey='$publickey', systemPrivateKey='$privatekey' [some where clause]\n*/\n$stmt->execute(); // well execute it\nI hope that this long text is helpful. Thanks again!! \n. I think I solved the problem.\nThe resolution was to use base64_encode(); on every encrypted string before saving it to the DB. For the encryption I'm doing the same while just using base64_decode(); before decrypting the string.\nSo thanks for the help. \n. Ok, thanks for the fast reply.\nI included in my file AES.php and in AES, as well as in Rijndael I used some of your old code like this:\n`/*\n * Include Crypt_Rijndael\n /\nif (!class_exists('Rijndael')) {\n    include_once 'Rijndael.php';\n}\nSo, when I just include the bootstrap.php instead of a direct link to AES and so on it should work, right?. Just tried it with the bootstrap the following way:require_once('lib/phpseclib/bootstrap.php');\n $aes = new AES(CRYPT_AES_MODE_ECB);`\nstill the error message: \nFatal error: Class 'AES' not found in. It works now!\nBut somehow dirty...\nrequire_once('lib/phpseclib/Crypt/Base.php');\nrequire_once('lib/phpseclib/Crypt/Rijndael.php');\nrequire_once('lib/phpseclib/Crypt/AES.php');\n$aes = new phpseclib\\Crypt\\AES(CRYPT_AES_MODE_ECB);. ",
    "cnelissen": "Here are some example directory structures based on each style:\nPSR-0 or PSR-4 with no composer support (pretty much the same thing)\n- phpseclib\n    - Crypt\n        -AES.php\n    - File\n    - ...etc\nPSR-0 with composer support (Composer requires the vendor name and package name in the directory structure. Can be shortened by one directory by referring to subfolders (Crypt, File, Net, etc) as their own \"package\", but for full compliance this is correct.)\n- /vendor\n    - phpseclib\n        - phpseclib\n            -src\n                - phpseclib\n                    - phpseclib\n                        - Crypt\n                            -AES.php\n                        - File\n                        - ...etc\nPSR-4 with composer support (also requires the vendor name and package name in the directory structure)\n- /vendor\n    - phpseclib\n        - phpseclib\n            -src\n                - Crypt\n                    -AES.php\n                - File\n                - ...etc\nPSR-4 is obviously the newer standard which allows for a slightly more compact directory structure when using a package management system such as composer, which can be seem as a benefit to some. However as stated by @AdamWill PSR-4 will not allow pseudo namespaced class names i.e. Crypt_AES, NET_SSH2 etc. You could plan to migrate over to PSR-0 right now with the eventual goal of PSR-4 to happen after all the proper namespaces are created. The only other hangup is that there are a good number of calls to global constants (which are defined in each classes file) throughout the code which will NOT trigger an __autoload call, so this would need to be addressed at the same time.\nTo go with PSR-4 right now, you would have to complete proper namespacing and migrate to class constants at the same time or find an alternate location to define the global variables until the class changes can be made.\n. Ok I have removed the .DS_Store files and have created a local .git-ignore to deal with those.\nI got rid of the constants file and converted the global constants to class constants and updated code in each class accordingly. There were some constants that were instead converted to properties, such as the *_MODE constants. These were being defined at runtime and were not true constants in the first place. Most conflicts have been resolved.\nI have also updated all the test cases to use the same PHP namespaces, and ensured auto loading is working as expected. Most of the test cases pass however there are still some failures that I could use a hand tracking down. Unit tests are definitely not my forte, and I am a relative newbie to this code base as well so any help and/or pointers would be great.\nAs for the method and property visibility, I set each one according to the @access tags that were already defined on each method/property, except for cases where there was an explicit problem (there are a few cases where private methods are being called outside the classes, in which case the methods should probably be updated to reflect that status). I used \"protected\" in place of \"private\" in any classes that have child classes, which allows the child classes to inherit the methods/properties while still maintaining private access outside the classes. I kept everything as limited as possible, though this certainly can be changed if necessary.\nObviously the whole issue of visibility is a matter of preference and subject to much debate. I was simply following common best practices with regards to PHP 5.3 when porting it over. I would be more than happy to make any adjustments if you have a preference one way or the other.\nIn any case, the modified code is working fine for my project so I was only sending it back upstream in case you were interested in a 5.3 compatible branch. I could certainly use some help in some of the more technical aspects of the code, as I am certainly not a SSH expert.\n. Yes I am a proponent of letting composer handle all of the auto loading, or assuming that someone would have an alternate auto loader already in place. Setting up an auto loader is trivial, so littering the code with requires doesn't make much sense anymore...\n. I agree with mpscholten, deleting files on the filesystem to control behavior seems like bad practice, especially when most people are migrating over to a source control system such as git or composer. Those files will be recopied anytime the upstream source is updated and someone will have to know about those little \"magic\" mechanisms and remember to delete those files once again to restore the same functionality.\n. Since I couldn't do a pull with #242 (way too many conflicts) I went ahead and made the same changes to the get_class calls.\n. What would be the easiest way to test this little auto-loading trick you are talking about? If the file doesn't exist on the filesystem then it wouldn't be loaded when it is called, which would result in an exception, unless we specifically choose to ignore the exception when the file isn't found. We could certainly add in some checks for such a thing if you want to preserve that functionality...\n. Ok that was an easy fix as the standard class_exists function will attempt to autoload the file if it hasn't already been loaded and will only return false if it is A) not loaded and B) cannot be auto loaded. You should now be able to delete the files on the file system to limit the encryption algorithms that are available.\n. You are not going to be able to add PSR-4 autoloading without converting to proper PHP namespaces, as the pseudo namespaced class names will not work with PSR-4. Converting to proper PHP namespaces with PSR autoloading more or less necessitates converting to class constants instead of global (unless you define all the globals in a single file like I originally had and was asked to change), since the global constants will not be defined until the class is instantiated (and thus autoloaded) causing various errors throughout the code where the constants are being called.\nTo state more precisely what has been changed with this PR, it includes:\n- Proper PHP namespaces using phpseclib as the root namespace\n- Directory changes to support PSR-0 style autoloading  (can be changed to PSR-4 very easily)\n- Convert all global constants to class based constants\n- Full property and method visibility declarations\nThe namespaces, autoloading and class constants are more or less tied to each other, to get one you have to take all (or take some smaller hacky half steps, such as introducing PSR-0 autoloading and retaining the pseudo class names however this would still require migrating to class constants, or moving all constants into a single file until that could be done). The visibility changes could certainly be removed and left for a later date if that is preferred.\nI personally would not mind rebasing the entire PR with the visibility changes omitted if that seems reasonable, however I unfortunately do not have the time right now to try and backtrack anything else, the namespace changes were rather time consuming already.\nAlso yes, I realize the tests are not fixed haha - as I mentioned I have very little experience with Unit Testing, so I was merely attempting to get them to run without errors (which I understand is not the point of Unit Testing). I think someone with more experience in that area is going to have to rewrite the tests to account for all the changes in this PR...\n. I think this is more of a documentation issue than a code issue... Setting up an autoloader is trivial if one isn't present, and adding a new namespace to an existing autoloader is usually very easy as well... I think we could probably just include a basic autoloader in the documentation, or include one like autoloader.php.dist in the source. In either case, autoloading is a much better method than littering includes all over the source code.\n. Hmm do you have any specifics? Any commits that were done after I did the initial fork might not have made it into my version... but it doesn't look like there have been any commits outside of the Travis updates that were before my fork.\n. I agree static methods are more flexible than a constructor argument, plus they more closely resemble the functionality that was implemented with the global constants. I added various static methods that can be called before instantiation ie:\nOld way:\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_SIMPLE);\n$ssh2 = new Net_SSH2();\nNew way:\nSSH2::setLogging(SSH2::LOG_SIMPLE);\n$ssh2 = new SSH2();\nI added methods for setting the mode in BigInteger and a few crypt classes that had that functionality implemented. I also updated the unit tests to use these new static methods in place of settings constants.\n. I agree that static functions may not be the perfect solution to this issue, since you should be able to change these settings per instance instead of global, but the current solution of using global variables is no different... Ideally we would move anything that depends on these values out of the constructors and then expose methods to set these values that can be called before any methods that depend on them... It will seriously impact the API in order to make those changes.\nI think the static methods will be as close as we can get to mimicking the current API...\n. I am such a newbie when it comes to Unit Testing so I am winging it with those... I did find some good examples though and have updated the PHPUnit bootstrap to use the Composer autoloader now. Definitely much cleaner that way.\n. Ok I have gone through the entire diff with a fine tooth comb and cleaned up any extaneous whitespace differences, I also rebased the test cases to make them easier to read and I found a few changes from the master branch that I must have missed. Everything is looking pretty clean at this point based on the diff for this PR. Please let me know if you spot anything else!\n. These methods are replacing the CRYPT__MODE constants in the Crypt/ classes and the MATH_BIGINTEGER_MODE constant. If there is a better name for those I would happy to make the changes.\n. Ok, from the looks of things we have 2 distinct types of setMode functions for different packages...\nFrom Crypt/*::setMode() Which is one of Base::MODE_INTERNAL, Base::MODE_MCRYPT, Base::MODE_CBC, etc.\nFrom Math/BigInteger::setMode() Which is one of BigInteger::MODE_INTERNAL, BigInteger::MODE_BCMATH, or BigInteger::MODE_GMP\nIf we are going to change the name, just let me know which one for each.\n. Since we have removed both the Crypt::setMode() methods and the CRYPT__MODE constants, the unit tests will be affected... Currently they are attempting to force MODE_INTERNAL on setup, which we now have no way of ensuring...\n. This issue can be closed as it was completed in #508 \n. When you issue a pcntl_fork, resources are copied at the point of forking. In the case of a shared resource (MySQL sockets are the most common culprit) closing the channel in a child fork (i.e. exiting the fork) will also close the channel in the parent.\nForking would have to be something the library would have to allow for, it is not as simple as arbitrarily forking off the processes and things just working.\n. The SSH classes would need to have a \"fork\" method which would spawn off separate calls, which the parent would have to wait for before closing the connection. The code would have to be modified so closing the child processes would not disconnect the session. Optionally you could create a stream_socket_pair which would allow the child processes to return data to the parent process, for \"read\" calls for instance. The biggest issue would be connection handling, which means the parent needs to wait for all children to finish before disconnecting... In pseudocode:\n$ssh2 = new SSH2();\n$ssh2->fork(function() {\n    $this->exec('some command');\n});\n$ssh2->fork(function() {\n    $this->exec('another command');\n});\n$ssh2->fork(function() {\n    $this->exec('yet another command');\n});\n$ssh2->waitForChildren();\n$ssh2->disconnect();\nIn any case, it's not something that would likely be able to be \"added on\", it would be a major architectural change to the SSH classes.\n. Each call of pcntl_fork creates a single child. Actually to be more specific, it forks a single process into two identical processes at the time you call it... Most people need more than one forked process, so typically you would have your main process forking several copies at which point you have more of a parent/child relationship, which is why most people refer to it in that manner.\nPCNTL is not available on windows, but is widely available on linux (I have done lots of work with PCNTL in various projects)\nAs for return values, you setup a socket pair when you perform the fork, so data can be sent to the socket from both the parent and the child processes, which allows them to receive data from one another. Without the socket pair, there is no way to send data between processes, and you are limited to merely knowing if the child process has completed or not, and that is it.\nI am not sure if curl would work for connecting to SSH, but I suppose since phpseclib can handle the encryption internally, then curl could be setup to connect with a raw socket... I think your curl idea would only work if you were attempting to send the same command to multiple connections, not multiple commands to the same connection, which is what the OP is trying to do...\n. Gotcha. Yeah I think there are two separate use cases that would need to be considered.\n1 - Send the same command to multiple connections\n2 - Asynchronously send multiple commands to a single connection (what the OP wants to do)\nThe curl type API would work for the first but not the second, and the example that I posted would work for the second but not the first. You would end up needing solutions for both if you wanted to cover all bases.\nI would also mention that forking would work fine currently, so long as you instantiate the SSH connection inside of the child process and not the parent. This would mean you would have a separate SSH connection for each command, but I don't see that as a major limitation of most systems...\n. > But then on some levels you negate the performance gain of running multiple commands at once by making each process connect to the server, no?\nYou would have more overhead because of the multiple connections, but depending on the commands you were running you would still see a huge performance gain in parallelization of the commands (depending on how you are measuring performance).\nThink of it this way, if you have 10 commands that need to be run and each takes 30 seconds to complete, without forking it would take 300 seconds to complete all 10 commands. With forking it would only take 30 seconds to complete all 10 commands, but you would have 10x the memory usage because you opened 10 connections instead of reusing a single connection. You would need to weigh out which performance metric is more important to your application. Is keeping memory usage low more important, or is quickly completing the tasks more important?\n. Yeah, the code sniffer wants the supported PHP version to be on the second line of the file docblock... I added them back in to both of these PR's.\n. +1 Creating an entirely new version number that would allow for a break in BC would be enormously useful. There are major architectural improvements that could be made, while also implementing all of the newest PHP5 standards (autoloading, class constants, visibility, interfaces, etc), that would really improve the overall quality of this code. Trying to maintain backwards compatibility with PHP4 is going to be a major hinderance to progress moving forward.\n. All lowercase with \u201c-\u201c separators is the standard for composer/packagist libraries\u2026=\n. FWIW - There is no reason to use stream_resolve_include_path once autoloading is fully implemented, so 5.3.2 as a minimum is arbitrary in any case.=\n. Most of what people are clamoring for is PSR-4 support, which isn't a terribly hard task in and of itself, it just has a lot of side effects in the code... The nice thing is that once that change is done, the file structure and API shouldn't have to change much for the rest of the changes to happen... It's not like this is a huge project that has tons of entry points, for the most part (I'm assuming), people are only using a few classes, and only a few methods from each of those. Most of those public facing methods shouldn't be affected by anything that is getting done, it is mostly all internal changes.\nClass based constants have to be implemented before PSR-4 can be fully completed. The class based constants can be completed before autoloading is done, but there are many places that functionality is being imposed by defining various global constants (CRYPT_*_MODE, NET_SSH2_LOGGING, etc). There are also places where defined constants are set on a variable basis, such as in the Crypt_RSA class.\nMy suggestion would be:\nStep 1: Add setters/getters for any constants that are being defined on a variable basis. Crypt classes would need a getEngine/setEngine and getMode/setMode as well as some other random ones. SSH classes would need getLogging/setLogging etc.\nStep 2: Move the rest of the global constants to class based constants. This would also be a good time to do some general renaming of those, for instance renaming CRYPT_MODE_INTERNAL and CRYPT_MODE_MCRYPT to CRYPT_ENGINE_INTERNAL and CRYPT_ENGINE_MCRYPT respectively. I think we could also just drop the CRYPT_MODE constants and just use the base versions everywhere as that would greatly reduce the number of constants floating around.\nStep 3: Add namespaces and rename files to match PSR-4 standard throughout the library. Autoloading is fully functional after this step.\nStep 4: Change user_errors to exceptions throughout code and update affected areas, e.g. adding try catch blocks instead of checking for false return values.\nOnce those steps are complete, the API should once again be relatively stable, and any other changes would be API independent, (code cleanup, replacing code with newer PHP5.3 methods (lamdas), etc.) I feel like all of this should constitute what will be called \"2.0\".\nIf all that sounds agreeable I don't mind donating some time over the next few weeks to work towards that end. Step 1 is the only part where some design decisions need to be made. I could get into specifics if everyone is all-in on moving forward... Mostly I just need to get the PR's quickly reviewed and implemented so I can continue plugging away. Ideally I would make several PR's for each step, in as small of chunks as possible so they can be reviewed more easily.\nThoughts?\n. > As per https://github.com/phpseclib/phpseclib/wiki/Roadmap, I would be fine with keeping defined constants with variable values for 2.0 to make things easier. They are AFAIK only used internally and are no side effects of class files.\nI think that is even more of a reason to just fix it moving forward. Most people are not using those constants in their code so changing it wouldn't have that much of an impact on BC. Cleaning them up however does have a significant impact on code quality... In the case of the Crypt packages, there are dozens of extra constants defined that could be easily moved into a couple getter/setters and simplifies the code quite a bit. There aren't many of them that need to be implemented, we would just need to decide on a standard for how to do it, i.e.\nAs static methods:\nCrypt_AES::setEngine(CRYPT_MODE_INTERNAL);\n$crypt = new Crypt_AES();\nNET_SSH2::setLogging(NET_SSH2_LOG_COMPLEX);\n$ssh2 = new Net_SSH2();\n(This would keep more consistency with the current method of defining a global constant before instantiation, and would make updating the unit tests very simple)\nOr as non-static methods:\n$crypt = new Crypt_AES();\n$crypt->setEngine(CRYPT_MODE_INTERNAL);\n$ssh2 = new Net_SSH2();\n$ssh2->setLogging(NET_SSH2_LOG_COMPLEX);\n(This is cleaner and allows for changing related logic on a per instance basis but also means we have to move certain logic out of the constructors, which is not difficult but obviously has more of an impact on code.)\n. > In the proposed OpenSSL changes it's not getEngine/setEngine - it's setPreferredEngine/getEngine. ie. you can tell the Crypt class to use OpenSSL if it's available but if OpenSSL isn't available for the options you've chosen it'll use mcrypt or the internal mode. I don't expect people to know what options work on what engines.\nRealistically it should throw an Exception in that scenario... If someone is specifically attempting to use OpenSSL and it isn't available, then it should throw an exception telling them that. If not specified the code should choose the best available method.\n\nAnd getMode / setMode aren't needed as the mode is currently set by the constructor.\n\nYou are correct. It is a constructor argument for the Crypt classes.\n. > As for setLogging()... there was a proposal to make phpseclib use PSR-3 style logging but the orig author of that PR abandoned it for reasons unknown\nI think that is a separate issue entirely, though also important. We don't need to mess with any of the logging functionality to fix the current global constant problem... We just need to change how logging gets turned on.\nAs for moving towards PSR-3 logging, we could probably just pull all of the logging out and utilize https://github.com/Seldaek/monolog for this functionality. It is a full PSR-3 compliant package with wide community support. It also has handlers for a wide variety of logging backends. No reason to reinvent the wheel as they say.\n. > I won't know if OpenSSL isn't valid until you've set the key, block length (in the case of Rijndael), etc. Like in the case of Rijndael, by default, the block length is 128 bits. So you call setEngine() and then do setBlockLength(). Should setBlockLength() throw the \"engine not valid\" exception? I mean, obviously, setEngine() ought to if you're setting the engine to openssl and openssl isn't installed, but what about setBlockLength()?\nExceptions are great because you can send as much information as you want along with it, then its up to the implementor to do something with it or not. Based on your example, you should throw exceptions at both stages that clearly states why it is being thrown. If OpenSSL isn't installed, then a simple 'OpenSSL isn't available' exception would be great, then in the setBlockLength() method, you could throw something like \"128 bit block length is invalid for OpenSSL engine\" or some such. The more specific the better. It gives people more incentive to know what they are doing, and also more flexibility in implementing error reporting.\n\nSo how do we do a release for zero-impact API changes for PHP 4? Do we just not do them? I don't agree with that. I mean, high impact and mid impact BC breaking changes for sure ought not go into the php4 version but zero-impact stuff?\n\nWe shouldn't be doing any major development on the PHP4 version... It should receive only the most critical updates for a pre-determined period (to allow people to refactor their code around the new version) and then end-of-lifed entirely. Major development work (OpenSSL support etc) should be focused on the 2.0 branch, and features may or may not get filtered back down to 1.0 on an as needed basis... If you have any intention of moving this library into the future, that is the page everyone needs to be on.\nWhy would you put any emphasis on developing new features for people who are stuck with a PHP version that has been EOL for over 6 years? They are obviously ok with whatever feature set they currently have, so any development work is going to be a wasted effort anyway...\n. > throwing away all the work on a php4 compatible version when it's already been done, if nothing else, seems like a waste.\nAgreed. If it's done then we should absolutely merge it, but any new stuff should always be 2.0 only unless there is a super compelling reason to backport it to 1.0 (or whatever it gets called).\n\nIf I downloaded the latest version of phpseclib yesterday and am running the latest version of PHP 5.6 does that mean I shouldn't expect to get updates.\n\nCritical updates (security, major performance bugs, etc) perhaps, but no major features, and at the very least a guarantee that the API won't be changing. I think this is a known risk of using a 3rd party library. I don't know how many times I have used a library in a project and then a week later a new version drops which changes all kinds of stuff and then I end up refactoring everything for the new version... As long as we do it properly I don't see it being a problem.\n\nIt's like... maybe in 0.3.10 we could delete Crypt_AES all together and just go with Crypt_Rijndael since AES is basically a subset of Rijndael. But one big reason for why this isn't done: doing so means people can't upgrade from 0.3.9 to 0.3.10 without having to revisit old code that they wrote and that (presumably) works. Upgrades should be drop in replacements and they should still be forthcoming on the API that works with php4 (the fact that it works on php4 being somewhat irrelevant).\n\nOf course! But you shouldn't be deleting anything or doing any major changes in a 0.3.10 release anyway... The only reason to release a 0.3.10 version would be because there was some major security issue or major performance bug or some such, otherwise the change should be in the 2.0 branch, and we should focus on making the transition to 2.0 as easy and painless as possible, clear migration documentation, etc.\n. Ok guys, all of the PR's are in for Step 2 of what was discussed above... If we can get all of those settled and merged, I will start work on Step 3, which is namespacing and renaming files to match PSR-4 standards. That phase should be a very easy change once the other PR's are closed out.\n. +1 for Bantu's last comment. I think that is a perfect plan.\n. +1\n. As it stands, with Random defined as a class instead of a global function, and autoloading enabled it will ALWAYS be used instead of the current fallback method from BigInteger, unless the file is deleted... We can either remove the helper method from BigInteger, or figure out a more graceful way to allow people to override the random string generator...\n. Just noticed that myself... I did a pull from upstream back into my branch, which is what that merge is. I could re-fork and re-apply if it is an issue.\n. Anyone have any insight into why Travis is getting errors when running the unit tests locally does not? I setup a vagrant environment, installed php-5.4.16, php-mcrypt, php-bcmath, php-gmp and all the unit tests come back fine, but travis is spitting some warnings when I commit...\n```\n[root@localhost phpseclib]# php vendor/bin/phpunit\nPHPUnit 4.0.14 by Sebastian Bergmann.\nConfiguration read from /home/vagrant/phpseclib/phpseclib/phpunit.xml.dist\n...............................................................  63 / 360 ( 17%)\n...........SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 126 / 360 ( 35%)\nSSSSSSSSSSSSSSSSSSSSSS......................................... 189 / 360 ( 52%)\n.............SSSSSSSSSSSSSSSSSSSSSSSSSSSSS..................... 252 / 360 ( 70%)\n.......SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 315 / 360 ( 87%)\nSSS...........SSSSSSSSSSSSSSSSSSSSSSSSSSSS\nTime: 2.19 seconds, Memory: 17.25Mb\nOK, but incomplete, skipped, or risky tests!\nTests: 173, Assertions: 235, Skipped: 190.\n```\n. Sorry this took a little bit of work to track down... My local unit tests were not picking up the errors that Travis was seeing, so I had to do a bunch of work to get my system in line. This should now be good to go.\n. Is there anything else that needs to happen for this PR?\n. > This is not part of this PR?\nNo I wanted to get all of the global constants that are being set at the top of the files moved before I started work on the namespacing... It will make it much easier to isolate and review everything. I changed that docblock prematurely.\n. > This removes SYSTEM_SSH_AGENT_FAILURE which isn't used. Not sure that is fine. @terrafrost\nYou're right. I just added it back in for now, as removing it is beyond the scope of this PR.\n. Wasn't there a mention of wanting to split the OpenSSL stuff into smaller PR's anyway? Couldn't we merge this change in, since I already did a couple things from the OpenSSL PR in here, then do a PR that just adds the setEngine/getEngine stuff, and then merge the rest of the OpenSSL stuff after that? The rest of the autoloading stuff depends on these constants fixes to move forward...\n. Sorry for the last PR guys, I've been having trouble lately with the git client I've been using... Think it's time to find a new one.\n. I've been using one called Tower for a while now, which works fine until you have multiple origins that you are pulling from, like what I've been doing... I have my own origin defined and then the upstream origin (official repo) and when I pull from the upstream occasionally it pulls from the master branch instead of whatever branch it's supposed to be tracking, and then stuff like the last PR happens... Not sure what's going on, but it's happened a few times lately, after their last update.\n. Ok I merged in the changes from #538, should be good to go.\n. I have always thought it was odd that the default behavior of put was NET_SCP_STRING mode, considering the more common scp action is to upload or download a file... I think from a semantics perspective get and put should be the primary methods  (since they match the actual scp commands), which should both expect filenames, i.e.\npublic function get($remoteFile, $localFile)\npublic function put($remoteFile, $localFile)\nthen adding a method for putString would make sense... Also you obviously don't need a getString method.\n. Because if you already have the string there is nothing to get via SCP... For instance (pseudocode):\n```\n$data = 'some big data string';\n$scp = new NET_SCP($ssh);\n$data = $scp->getString($data); // <--- I already have the data in $data, so what am I getting here?\n$database->update($data);\n```\nFYI the current Net_SCP::get method does not have a NET_SCP_STRING mode either, which makes sense.\n. If you are talking about the return value from get, I think the current functionality is actually perfect. We can currently do:\n```\nSave a remote file to the local filesystem\n$scp->get('someRemote.file', 'someLocal.file');\nGet the contents of a remote file into a variable\n$content = $scp->get('someRemote.file');\n```\nI think that API is pretty much exactly what it should be.\n. I can fix this when I go through each package for the PSR-4 stuff if you want... As soon as we get #525 and #532 merged in, I will start working on PR's for all of those.\n. Hmm I was assuming it was because there are still some doc blocks that reference Math_BigInteger... In BigInteger.php itself, there are still \"@package Math_BigInteger\" statements for instance.\n. This should be fixed as part of #558.\n. Can you re-run sami? This should be fixed now.\n. Yes I just tested and that is indeed the case. If you remove the master branch from the sami.conf, the global classes are removed... Perhaps we need to make 2 separate sami.confs, one for each branch and store them separately.\n. There is an open issue for it already (https://github.com/FriendsOfPHP/Sami/issues/62). I just posted a comment outlining what we are seeing. You could comment on it too if you wouldn't mind.\n. > Why do tags have to be on the master branch? I don't think that matters.\nTags are required for composer stability... For example, if in your composer.json you are using:\n\"require\": {\n    \"phpseclib/phpseclib\": \"dev-php5\"\n}\nMinimum stability is automatically set to dev, which will cause a problem if phpseclib is a requirement of another library. For instance if you have a project which requires \"somevendor/library-abc\" and \"somevendor/library-abc\" requires phpseclib. Somevendors composer.json is requiring \"dev-\", which means the whole somevendor library is marked as minimum-stability @dev... If your composer.json is set to minimum-stability @stable, then the requirement from somevendor will not be matched because it is not within the required stability range. Take a look at https://igor.io/2013/02/07/composer-stability-flags.html for a more in depth explanation.\nAlso, tags are required to \"lock\" the version of phpseclib at the version that was developed against. If you require a branch instead of a tagged version then you will get every single commit that gets pushed, which can break code (obviously).\nIn short, we should periodically tag commits at major milestones and allow people to link against those tagged releases. People in development can continue to require dev-master or whatever, but people who need stability can get it.\n. > It was the \"Tags on master\" (specifically mentioning the branch) that confuesd me.\nAh yes, that was confusing. I think he meant tag the commit from the current version of the branch... I was confused by that at first as well.\n. Yeah I have a bunch of notes to do these little things, I was planning on doing a final PR for odds and ends, documentation, cleanup etc. I'm mostly focusing on the major autoloading work and making sure all tests pass... I think I did the system one already in that PR and the crypt one will be done with that PR, and anything I miss will be in the followup PR...\n. It's ok, I got it fixed up =)\n. The travis failure here is due to there being a \"hash\" method on the Crypt\\Hash class, and the code sniffer is assuming it's an old style constructor... We would need to rename the \"hash\" method to get code sniffing to pass. Thoughts?\n. I think it's odd that the code sniffer only errors on PHP 5.5 though... All other PHP versions are fine. Is it possible to re-run travis and see if it is still failing, or if it was just a fluke?\n. Good thinkin! I forgot that it did that.\n. > It does not run on any other version. ;-)\nAhhaaa. That makes sense then... Ok let me look into the code sniffer rules, I'll see if I can get it adjusted.\n. It appears this bug is fixed as of PHP_CodeSniffer v1.5.6, which was just pushed 7 days ago, nice! I'm gonna do a composer update and push. fingers crossed\n. @GrahamCampbell There was a merge conflict, so I had to pull from upstream. Do you have a suggestion on how to avoid the extra commit?\n. @GrahamCampbell Ok thanks for the tip! I just tested it on another branch, works great.\n. I would say that #553 (System Package), #555 (Net Package) and then #558 (Crypt Package). I can work on rebasing/fixing the changes as you merge them in. I can actually redo this PR after the first two get finished, which will include any extraneous things (documentation, etc).\n. Would you like me to redo the PR and squash, or is this good?\n. > This needs to get merged ASAP to fix issues with constants being referenced from the Net\\SS* classes.\nIt looks like there is no code coverage for the SSH2::_key_exchange method. There is a reference to Crypt_Base there and no appropriate \"use\" statement at the top...\n. Will do!\n. @terrafrost I think that get_class should be removed and replaced with \"instanceof\" across the board. I think it should be a separate PR though.\n. I agree with @terrafrost. You are essentially adding a pseudo namespace by prefixing the classnames in that fashion. Just use namespaces, that's what they are for.\n. I think namespaces and classes are distinct, and overlapping them is not really an issue. I personally think SFTP/Stream and Agent/Identity are perfectly acceptable and a very valid of use of namespacing. If Agent/Identity is a subclass of Agent, then it should be included in that namespace. Having an AgentIdentity class is a misuse of namespaces.\nThere are two ways of laying out the folder structure that are very common for this type of setup:\n1 - Class outside of folder (Doctrine uses this layout):\nnamespace phpseclib\\SSH\\Agent;\n./SSH/Agent.php\n./SSH/Agent/Identity.php\n2 - Class inside folder (Zend, Symfony, Laravel, Guzzle use this layout)\nnamespace phpseclib\\SSH\\Agent;\n./SSH/Agent/Agent.php\n./SSH/Agent/Identity.php\nAfter doing some looking around, method 2 is far more common.\n. > Net_SCP, for example, calls internal methods in Net_SSH2 that are tagged as being private via phpdoc\nPrecisely why this is needed... If the phpdoc's are marking those methods as private, yet they are being used from outside the class, a developer could possibly make changes to those methods without knowing about the external use and cause breaking changes.\nI would say we could just mark those methods as public (since they are in effect), and then work on ways to move them so they are truly private methods.\nOne idea specifically for the SCP class would be to create two subclasses, one for SSH1 and one for SSH2 which extend from their respective classes, and then change the current SCP class to just be a factory. So you would do something like new SCP($host, $port, $timeout, SCP::MODE_SSH2), which would return one of the subclasses. Shared logic for each subclass could be injected through the use of traits, and an interface would enforce the methods. I could do a PR for that as well, I think it would be fairly easy to do.\n. I agree, it will take some doing to do properly... There is definitely some low hanging fruit though, and some user errors that really should just be logs instead of errors. Perhaps if we were to first address the logging situation, this would become much easier, specifically - implement a psr-3 logging interface and funnel everything through it, then we just need to throw exceptions for true show stoppers.\nThoughts?\n. Any other issues with this PR?\n. > Do we want to start using inheritdoc (possibly overall and in a new PR)?\n+1 for that. There is no reason to duplicate documentation...\n. All of the constructers for classes that extend base are duplicated currently, and are nearly verbatim from Base...\nOtherwise most of the other methods do implement some specific functionality enough to warrant their own description. We could probably re-structure stuff to use inheritdoc followed by a custom message if we cared enough to do so. It might help improve documentation accuracy and changes only need to be made in one place instead of several.\n. So in order to get everything to work with PHP 5.3.x I had to change the code a little bit, since you could not use $this in an anonymous function until PHP 5.4. This means these functions will have the same visibility issue as the old lambda functions unless we want to bump our minimum version to PHP 5.4. Otherwise there are a few properties and methods that will need to be marked as public even though they should really only be accessed internally, e.g. Rijndael::$t0, Rijndael::$t1, etc.\nIn any case, this PR makes things a lot more readable and easier to debug, as well as the aforementioned performance improvement, so it is still worth merging regardless.\n. Actually scratch that. I just tested the visibility changes with the changes from this PR and it works exactly as intended. No need for a bump to PHP 5.4.\n. I am seeing similar results... I will mess around with the eval statements and see what I can do.\n. > I'm a bit skeptical about a number of these changes. I'll need to sit down and spend some time to vet them.\nI basically just went through the Scrutinizer report line by line and added types where appropriate. I did my best to vet things as much as I could, but there are certain areas of this code that I am not too familiar, ANSI being one of them. If you have any input I'd be glad to make updates. There are a lot of very minor errors that Scrutinizer spits out so I am just trying to get things cleaned up a bit.\n. Is there any interest in this PR? If not, we can go ahead and close it...\n. This project uses PSR-2 as a coding standard, which is why your Travis checks are failing. Take a look at http://www.php-fig.org/psr/psr-2, specifically section 5. IF statements should like like:\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n. > Anyway, maybe come up with a list of what's not camelCase and further discussion can be had.\nI think specifics are irrelevant... My intention for this issue was to decide what the standard convention for class properties should be for phpseclib. Once an agreement has been made, then we can come up with a list of what needs to change, and what the affects would be, since that largely depends on which way things go.\nAs for class methods, there really isn't any discussion to be had, if we are going to move to PSR-1/2 as a coding standard (and we definitely should) then all methods need to be camel cased.\n\nDo keep in mind that any BC breaking changes would be 2.0 / php5 only\n\nYes, and I agree. The move to PSR-1/2 is only for 2.0, as has been stated elsewhere.\n. I concur with @ravage84... Each branch really only needs it's own history. If you are interested in history from a different branch, then you could go look at it.\n. Ok easy enough, this is fixed.\n. Ah yes. Done.\n. Yes the whole constructor is redundant since the constants will be inherited regardless. I have removed it.\n. Ok done.\n. Actually it appears that every Crypt/* class has a similar constructor which would all be unnecessary at this point. They could be left for documentation purposes or removed altogether...\n. Yes, fixed.\n. Ok done.\n. Easy enough. Added.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Right, we would need to expose a method to set the location of the file like $rsa->setConfigFile('/path/to/file');\n. Added generic block (I am not entirely sure what it does so it needs some love)\n. Fixed.\n. Fixed.\n. Looks like a whitespace change. I replaced all tabs with 4 spaces globally. Maybe it was a tab previously?\n. Fixed.\n. Fixed.\n. Fixed.\n. Hmm I didn't have this in my original source... I forked from the PHP5 branch originally so maybe these changes weren't pushed downstream?\n. Agreed. I put it back in for now. It should be noted that the only purpose they will serve is for documentation... \n. Easy enough.\n. It is not an external namespace. Here we are telling the autoloader to look for the phpseclib namespace in both the phpseclib folder as well as the tests folder. This is so we can have the tests use the same namespace as the source, so we don't have to create another namespace like phpseclib\\tests\\Crypt etc.\n. Fixed.\n. Ok done.\n. Done.\n. Ok these files have been removed since they were moved into the /travis folder.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. There is no test namespace. There is only the phpseclib namespace... It is just searched for in two locations. I read up on it before making this change and this is the standard way of using Composer with PHPUnit.\n. Ok I like the addPsr4 method instead of adding the secondary search path in Composer.json. No need to add another namespace though, we can just look for phpseclib in both locations. So $loader->addPsr4('phpseclib\\\\', __DIR__); works just fine.\n. Done.\n. Done.\n. Got it, makes sense. I have set it back to non-static in which case it can only be set via the constructor.\n. Yes, much more succinct. I have updated it.\n. I removed these methods in light of changing $mode back to non-static.\n. Right, but would you have two different ciphers/algorithms being used at the same time? That is the only way we would have a collision.\n. Ok, well then I will need to redo this PR to leave the CRYPT__MODE constants in place until we can get the getEngine/setEngine methods added... That is the obvious long term fix, and will clean up quite a bit of code. You can close this PR for the time being, and I will work on the new PR this AM. Shouldn't take long actually.\n. Yes, somehow those defines got put back in... It is in the current php5 branch.\n. Assignment in condition... I was trying to cleanup some of those as I came across them.\n. Understandable. I figured them a minor enough change that it wouldn't matter, but I will go ahead and back them out.\n. No, those should have both been removed with the merge. All tests pass without them. Removing them now...\n. Yes, they will resolve to the current namespace, but I personally am all for verbosity. It is less ambiguous to just have a use statement instead of assuming.\n. Agreed, but to be fair, I think that whole switch block is unintuitive. There is no reason for the class_exists check in the first place, because it would always exist, unless the file was deleted. For almost every circumstance, this block will always use AES as the crypto, since that class will usually always be present. There needs to be a better mechanism to tell Random which crypto algorithm to use that doesn't require files to be deleted.\n. Yes, I will remove them.\n. > Considering that a missing leading slash could be interpreted as a relative namespace by readers, I think there should always be a leading slash.\nYes I can see that. The only thing is that other methods would not return the slash at the beginning, get_class returns \"phpseclib\\Crypt\\AES\" for example, so we might have a consistency problem. Of course, those should eventually be replaced by instanceof calls, so it might not be an issue long term... Just let me know which way to go and I will make it happen.\n. What do you think of marking these methods as abstract? Actually the whole base class should really be marked abstract since it shouldn't be instantiated directly anyway...\n. If we mark Base as abstract and then create a CryptInterface, we would catch any case where a derived class did not implement these methods, and these errors would be irrelevant anyway.\n. Agreed, I'll do that as a separate PR and fix this for the time being.\n. ",
    "jslegers": "@terrafrost & @cnelissen :\n\nPSR-4 is obviously the newer standard which allows for a slightly more compact directory structure when using a package management system such as composer, which can be seem as a benefit to some. However as stated by @AdamWill PSR-4 will not allow pseudo namespaced class names i.e. Crypt_AES, NET_SSH2 etc.\n\n... which IMO makes PSR-4 a very poor standard.\nNot only does it break backwards compatibility, but it reduces one's ability to write efficient code.\nWith PSR-0, I could do the following :\n- Define one class \\Vendor\\Package\\ComponentOne_Coolclass in file Vendor/Package/ComponentOne/Coolclass/Segment.php\n- Define another class \\Vendor\\Package\\ComponentTwo_Funclass in file Vendor/Package/ComponentOne/Coolclass/Funclass.php\n- Have either class reference the other without the need for namespaces\n- Take advantage of easy autoloading\n- Use namespaces only for what they're intended for: referencing third party packages\nAs a bonus, you get elegant, readable code that's mostly compatibly with old school PEAR-style naming conventions.\n\nphpseclib should already be using PSR-0 style although I don't see anything wrong with the php5 branch using PSR-4 style if it wants to.\n\nPSR-0 implements namespaces the way namespaces are meant to be used. It allows you to :\n- avoid naming conflicts by always using a namespace for any third party code\n- use PHP4-style naming conventions (with a _ as path separator) for any part of your hierarchy within the same namespace\n- never use namespaces to reference any class that's part of the same package/library/framework\nNot only is this a lot more elegant than the horrible PSR-4 standard, but it also makes it a lot easier to keep the main fork of PHPSecLib in sync with the PHP5 fork.\nEarlier today, I created a version of PHPSecLib that's fully compatible with PSR-0 and includes a PSR-0 autoloader. It required but minimal changes to the PHP5 fork of PHPSecLib. See https://github.com/phpseclib/phpseclib/issues/369\nI won't bother to submit it, though, as long as @bantu sticks with his decision to keep the PSR-4 standard.\n. See https://github.com/phpseclib/phpseclib/pull/374 for the code.\n. Alternative PSR-0 based implementation : https://github.com/phpseclib/phpseclib/issues/369.\n. See https://github.com/phpseclib/phpseclib/pull/374 for the code.\n. Alternative PSR-0 based implementation : https://github.com/phpseclib/phpseclib/issues/369.\nI'm still waiting for further feedback on the implementation before I submit the code.\n. See https://github.com/phpseclib/phpseclib/pull/374 for the code.\n. @bantu :\nI propose you just remove the current PHP fork and replace it with the my new version.\nThe current PHP5 fork uses PSR-4 only on the class Math_BigInteger, which is renamed to \\phpseclib\\Math\\BigInteger. All other classes don't even use namespaces at all.\nAlso, I would recommend against using PSR-4, because PSR-4 forces compliance with the following two rules :\nImplementors MUST use at least two namespace levels:\na vendor name, and package name within that vendor.\nThe vendor-package namespace MAY map to any directory.\nThe remaining portion of the fully-qualified class name MUST\nmap the namespace names to identically-named directories, and\nMUST map the class name to an identically-named file ending in .php.\nThis is problematic for several reasons. One reason is that your code either has to be filled with stuff like use \\phpseclib\\Math\\BigInteger; or you're forced to add the full namespace for every file that isn't in the same folder whenever you use it.  The second option makes your code a lot more convoluted, ugly and unreadable. The first is about as horrible as using require 'Math/big_integer.php' throughout your code and pretty much removes the point of using an autoloader.\nAnother reason, is that this coding standard is incompatible with the more popular PSR-0 standard.\nMore important, though, for this project is that it's incompatible with PHP4 coding standards used in the main fork. You have to replace every mention of math_big_integer with \\phpseclib\\Math\\BigInteger, which requires a lot more work to keep the library in synch with the main version.\nI chose the PSR-0 standard for my implementation, because it leads to cleaner and more concise code that's largely compatible with PHP4 coding standards. Basicly, I just use the namespace \\PHPSecLib throughout the project and maintain the same naming conventions as the main fork for each class.\nTo create a new Net_SSH2 object any section of the PHPSecLib project, your call would be identical to that of the official fork : $ssh = Net_SSH2($sshhost);. If you want to call it from another namespace, you'll just need to add the namespace \\PHPSecLib, which would give you $ssh = \\PHPSecLib\\Net_SSH2($sshhost);.\nThe end result is : (1) cleaner code, (2) improved compatibility with PHP4 standards and (3) easier maintenance while (4) fully implementing the very popular PSR-0 standard.\nIf you want, I could make a fork of the official repo, and replace it with my code. You'll see that the changes are pretty limited and generic, which means there's no point in fixing every single issue one by one.\n. @bantu :\n\nCode needs to be properly reviewed.\n\nObviously. There's just no point in reviewing all of the changes seperately, since it's basicly all just one fix.\nIt's also a total waste of my valuable time, as I already have fully working code that (1) implements the changes mention in the original comments and (2) should be easy to compare with the main fork.\n\nI said \"partial\".\n\n... which is worse than not at all, because it's inconsistent in its implementation and looks pretty messy.\n\nI want all of that and I want to move towards proper abstraction and hierarchy and organise the project into proper components.\n\nThere's no advantage to giving each component its own namespace within the same project.\nThe advantage to using the same namespace for different components of the same vendor or package, is that it allows you to avoid using namespaces in your code for any class within that same namespace, regardless of which component you're using.\nIMO, the following naming convention is the only convention that makes sense here :\nMath_BigInteger => \\PHPSecLib\\Math_BigInteger\nSystem_SSH_Agent_Identity => \\PHPSecLib\\System_SSH_Agent_Identity\nNet_SCP => \\PHPSecLib\\Net_SCP\netc...\nIf you really want an additional level, you could add another layer to the namespace for the whole project, like one of the following examples :\nExample 1 : \\PHPSecLib\\PHPSecLib\\ (one level is vendor and the other is package)\nExample 2 : \\PHPSecLib\\v1_1\\ (adding version number)\nExample 3 : \\PHPSecLib\\PHPSecLib\\v1_1\\\nThe first option is especially interesting when you have multiple packages per vendor that are fully independent and thus don't reference each other.\nThe second option is interesting when you want to allow different versions of the same package to be used within the same project.\nThe third option is for when you need both.\nAll of the above make perfect sense if you want proper abstraction and hierarchy. The current PSR-4 implementation does not.\nUnlike PSR-4, PSR-0 implements namespaces the way namespaces are meant to be used. Unlike PSR-4, PSR-0 allows you to :\n- avoid naming conflicts by always using a namespace for any third party code\n- use PHP4-style naming conventions (with a _ as path separator) for any part of your hierarchy within the same namespace\n- never use namespaces to reference a class that's part of the same package/library/framework\n\nFeel free to do so and we'll see.\n\nIf we can't agree with the changes I made or expect me to submit every little change seperately, there's no point in doing so.\n. @ bantu :\n\nThe php5 branch is a development branch that is not only supposed to add namespaces. It is supposed to bring phpseclib up to par with other projects such as Symfony architecture wise.\n\nThat's what I was aiming for as well.\nI'm using a zero configuration autoloader that is compatible with Zend, Symfony and other projects that implement PSR-0.\nI can use any component of any project that implements PSR-0 by just putting it into my vendor folder, without any additional configuration.\n\nFor example, you may have come across copy-pasted code, huge classes, huge methods and use of defined constants where a driver architecture should be used instead.\n\nThat makes sense in the long run.\nHowever, as long as you plan on maintaining the current PHP4-compatible version of PHPSecLib, it makes sense on keeping your PHP5 version as close to the PHP4 version as possible.\nIf you want to evolve towards a Symfony-like framework, it would make most sense to follow this procedure :\n\nClone the main fork to a \"compatibility\" fork, for older projects\nReplace the main fork to a PSR-0 PHP5 version like the one I implemented\nClone the main fork to a PHP >= 5.3 dev fork\nUse the dev fork to experiment with any major changes to the architecture\n\nWithin that dev fork, it would make most sense to follow this procedure :\n\nClone one or two standalone components to a package of their own, using the same PSR-0 conventions\nReplace all references to these components with the standalone components\nRemove these components from the original package\n\nThis shouldn't take more than a couple of days work (testing included) and you at that point you would have :\n- A main fork implemented in PHP5.3 and PSR-0, with all code in one package\n- A compatibility fork that still supports PHP4, with all code in one package\n- A dev fork implemented in PHP5.3 and PSR-0, with standalone components put into their own package\nAt this point, the architectural differences between each of these three projects would still be very minimal. You'd still be able to add bugfixes across the three different forks with minimal effort.\nPersonally, I'm not convinced that seperating components into different packages for the same vendor is a good thing per se. I tried that in the past and I moved away from that practice, because there are no benefits to it whatsoever and it only results in more convoluted code. This is, however, a very personal choice and an architectural design choice you can still decide at that stage with minimal effort and time lost.\n\nPlease publish them and maybe we can agree on adding another branch that is master + namespacing only.\n\nYou can find it at https://github.com/phpseclib/phpseclib/pull/374.\n. @bantu/\n\nI don't think this is something we would like to accept as is.\n\nI still don't see why.\nAs I explained in https://github.com/phpseclib/phpseclib/issues/369#issuecomment-46083520, these changes are the most logical move ahead from the main fork towards a modern multi-package framework that can easily be integrated in Symfony2 and other corporate projects.\n. If you want to evolve towards a Symfony-like framework, it would make most sense to follow this procedure :\n\nClone the main fork to a \"compatibility\" fork, for older projects\nReplace the main fork to a PSR-0 PHP5 version like the one I implemented\nClone the main fork to a PHP >= 5.3 dev fork\nUse the dev fork to experiment with any major changes to the architecture\n\nWithin that dev fork, it would make most sense to follow this procedure :\n\nClone one or two standalone components to a package of their own, using the same PSR-0 conventions\nReplace all references to these components with the standalone components\nRemove these components from the original package\n\nThis shouldn't take more than a couple of days work (testing included) and at that point you would have :\n- A main fork implemented in PHP5.3 and PSR-0, with all code in one package\n- A compatibility fork that still supports PHP4, with all code in one package\n- A dev fork implemented in PHP5.3 and PSR-0, with standalone components put into their own package\nAt this point, the architectural differences between each of these three projects would still be very minimal. You'd still be able to add bugfixes across the three different forks with minimal effort.\nPersonally, I'm not convinced that seperating components into different packages for the same vendor is a good thing per se. I tried that in the past and I moved away from that practice, because there are no benefits to it whatsoever and it only results in more convoluted code. This is, however, a very personal choice and an architectural design choice you can still decide at that stage with minimal effort and time lost.\n. @bantu :\n\nIt was decided that the phpseclib namespace is \"phpseclib\". \n\nIt should be phpseclib/phpseclib if you want to be compatible with the vendor/package standard.\nAs my own version was not compatible with that standard, I changed the namespace to phpseclib/phpseclib across the package.\n\nThe class loader is not object oriented\n\nIt is object oriented. It implements a static class based singleton pattern, which is a very convenient implementation for this technique.\n\n[...] and furthermore just not required\n\nThat's precisely the point.\nThe point of the implementation is to be compatible with any autoloading technique that fully supports the PSR-0 standard.\nI merely included the autoloader as a way to provide PSR-0 zero-config no-dependency autoloading (no composer needed). I use it for all my projects to load Symfony components, Zend components or any other PSR-0 component without the hassle that comes with using composer.\n\nwe are already using composer\n\nI made a couple of fixes to the composer.json file and some other files. The implementation should work with composer now.\nI never use composer myself, because zero-config autoloading is much more convenient.\n\nThere are arbitrary changes such as removal of spaces.\n\nI noticed them as well after I did my upload. I suspect they are caused by the auto-formatting rules of the NetBeans IDE that I'm using for my projects.\n\nThe move into the vendors folder is not necessary.\n\nThe vendors folder is the default location for libraries in modern PHP project. I added the vendors folder for the same of conformity with this practice.\n\nThe submission of a patch does not make you an author of phpseclib.\n\nThis is more of an upgrade than a patch but I get your point. I removed the author data...\n\nThe only useful thing I see is the introduction of the namespace, which we can consider adding another branch for.\n\nThe following changes were all required for full PSR-0 support :\n- Addition of namespace phpseclib/phpseclib to all files\n- Replacement of all constructors with a __construct function and references to them\n- Deletion of all !class_exists(...){ include ... } segments to allow more flexible autoloading\n- Delection of the _is_includable function and references to them\nThe following change was required to allow zero-config autoloading without composer :\n- Replacement of function crypt_random_string with class Crypt_Random, with an abstract function named string\nThe following was added for improved code readability and to prevent access to restricted sections :\n- Addition of public and protected to methods\nThe following was added as an optional way for allowing hassle-free zero-config autoloading :\n- Addition of an autoloader fully compatible with the PSR-0 standard\n\nWhen a patch gets merged into master, master needs to be merged into the new branch and whoever does that has to resolve the conflicts right away.\n\nExactly. That's precisely why I suggested that procedure.\nObviously, every step in that procedure should pass a travis build before the next step is applied.\nI made a couple of adjustments to fix composer loading, Travis building and unit testing. The Travis build still fails, but I'm not sure why. Maybe I'm missing something, but I'm not seeitng any warning or error messages for the Travis build.\n. > You're not using private, which I applaud, but still... I'll sometimes tell people to access \"private\" methods to get me debug info or as a workaround until a more permanent solution can be developed.\nNot using private or protected for methods that aren't supposed to be available outside of a class is bad practice in PHP5.\nThe reason I typically use protected rather than private, is because making a method protected allows you to subclass a class and access these methods and corresponding properties from within the subclass. That allows for greater modularity and thus also improves scalability. Subclassing also allows you to add hooks for bebugging without touching the class itself.\nFor even easier debugging, you could eg. add a debug method to any class that provides access to hidden properties or methods and provides a var_export of their return value. To avoid exploitation of this technique in production code, a single package-wide parameter named production (stored in a configuration file) could turn off this \"debug\" method along with any error reporting. That way, you have best of both worlds...\n. > Just because everyone else does it doesn't make it right.\nTrue. That's my objection with respect to PSR-4. Just because PSR-4 is a more recent standard and eg. Drupal moved from PSR-0 to PSR-4, that doesn't mean PSR-4 is better than PSR-0. IMO PSR-0 is a far superior standard.\n\nThat kind of groupthink is a classic appeal to authority fallacy.\n\nIf there's anything I can't stand, it's groupthink. Whenever I use standards, I use them not because everyone uses them but because they make my life easier.\nAnyway, I'm not saying you should shield any class methods from outside access if you don't want to. If you don't want to shield any methods to outside a class, you're always free to make all your methods public. \nIn that case, however, it would make sense to rename your methods from _myMethod to myMethod. When I see a method name starting with and _ I expect it to be a private or protected method, because that's the convention.\n\nI mean I suppose I could give people new classes custom written for them. eg. Crypt_RSA_Modified and that extends Crypt_RSA. idk that could be interesting to try and to see how people respond to that.\n\nThis is a technique the Kohana framework ( http://kohanaframework.org/ ) implements across its framework. It allows people to easily extend any part of the framework without touching any code of the framework core.\n\nSo I guess people would do $rsa->debug('_exponentiate', param1, param2, etc) instead of $rsa->_exponentiate()?\n\n$rsa->debug('_exponentiate', $parameter_array) seems more convenient to me. And of course, this would only be needed for any methods you want to keep hidden from access from outside of a class. I understand that you might want to keep as few methods hidden from access from outside of a class for the sake of simplicity, but in that case I would drop the _ from the method name and explicitly make it a public method.\n. @terrafrost & @bantu :\nAs you guys don't seem interested in the changes I made, I'll just remove my fork and integrate my version of PHPSecLib into my own PowerTools project and go my own way from there onwards.\nThank you for the great work you did on PHPSecLib.\n. @terrafrost \n:-)\n... speaking of which...\nI'm currently working on a tool that requires multiple SSH connections being made either in parallel or consecutively. Regardless of whether I rund them in parallel or consecutively, I keep getting connection problems when I try it with 10 to 30 systems.\nAny idea how to fix this? See also https://github.com/phpseclib/phpseclib/issues/390.\n. > Connection timed out\" is caused by fsockopen(), which phpseclib doesn't have any control over.\nWould it feasible to just use raw sockets or cURL instead of phpseclib to execute a bash script on a remote server and fetch the ouput? That's really all I need, and phpseclib might be overkill for that purpose. I could use just only those parts of phpseclib I need for the encryption, I guess?!\n\nI guess the one thing I'd try is maybe try making the timeouts longer.\n\nI tried that. It only made things worse.\nIt seems to me that the more sockets are being used by the system at the same time, the longer it takes to process each SSH session. It seems to me that this results in some instances of fsockopen() failing while keeping the connection open. This would then block future connections to those specific SSH servers until the one blocking the system has timed out. It would probably fix the problem if I could somehow force this connection to close (and restart in necessary)\nAnother approach would be a way to detect which sockets are opened for a certain host. Do you know if that's even possible? If I could queue my execution until a previous connection (from another HTTP request) ends, that could fix the problem. Would it make sense to store my open connection in server cookies?\n\nAnother possibility: if you connect to an SSH server and do a time consuming non-SSH task and then try to do something with the SSH again it's possible that the server would kill the connection.\n\nActually, I typically just open a connection and execute a single task. My use case is as simple as this :\n``` php\n$my_script = 'ls -la';\n$ssh = new Net_SSH2('www.domain.tld');\nif (!$ssh->login('username', 'password')) {\n    exit('Login Failed');\n}\n$output = $ssh->exec($my_script);\n```\nI tried adding $ssh->disconnect(); unset($ssh); at the end of my script. In retrospect, this seems rather essential for freeing available resources, but I couldn't find it in the documentation anywhere. I had to search the code for and fclose statement to discover that there actually is such a feature. \nIt seems to have a positve impact in the sense that blocked connections seem to become available much faster than before, but the problem still keeps occuring if I execute around 30 SSH calls, regardless of whether those are triggered by one, two, three or more HTTP calls.\n\nNot that I know if that even applies to you but if it did then maybe using the callback parameter of exec() might help (assuming you're using exec()). Maybe something like stream_select() for Net_SSH2 would be useful idk.\n\nI am indeed using exex(), but I'm not sure how a callback could help. Could you elaborate?\n. @terrafrost \n\nIf you wanted to try to replace SSH2 with your a more lightweight encrypted telnet-like protocol... I could write a paragraph or two on that but for berevity I won't. \n\nI'm still considering various alternatives for the moment. One would be to use a shell script to start an SSH session and execute the script remotely. Another option would be to put a small PHP script on the server that uses OAuth for authorisation and use encrypted HTTP messages to exchange scripts from one system to another, but that just seems dirty...\n\nI guess you could put lock files on the FS. eg. \"if (file_exists($hostname)) then place script in queue\"\n\nI'm not sure how that would work.\n\nThat should all be taking care of by the garbage collector.\n\nI don't like to rely on the garbage collector. PHP is infamous for its memory leaks.\n\nSee this:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#callback\nUnmentioned is that if you do return false it'll make exec() return immediately.\n\nThe callback executes properly when the exec method is completed, but that doesn't help me anywhere. The script already fails at fsockopen and trying the login again after failure doesn't really work. In fact, all that does is prolong the time it takes before I do make a fsockopen call.\n. @terrafrost \n\nThat should all be taking care of by the garbage collector.\n\nAs I said before, PHP is notorious for its memory leaks. In this case, improper closing of the SSH session is responsible for my problem, along with the maximum number of sessions allowed on my machine\nI found that the following shell command allows me to get an overview of the active SSH sessions at any time :\nnetstat -a -n -o | grep ':22'\nI also found that every session I start stays open with a status of TIME WAIT for exactly one minute before it is closed. If I start four sessions, I'd get the following output :\ntcp   0 0  ___.___._.___:35170  ___.__.___.___:22  TIME_WAIT timewait (51.43/0/0)\ntcp   0 0  ___.___._.___:33542  ___.__.___.___:22  TIME_WAIT timewait (51.43/0/0)\ntcp   0 0  ___.___._.___:33548  ___.__.___.___:22  TIME_WAIT timewait (51.43/0/0) \ntcp   0 0  ___.___._.___:35051  ___.__.___.___:22  TIME_WAIT timewait (51.43/0/0)\nSee also https://groups.google.com/a/chromium.org/forum/#!topic/chromium-hterm/blZPgDA4hJk for what's obviously a related problem :\nYes.  The problem I observe is that, if you have an open SSH connection with a port\nforward, and you reload or close the window and try to re-establish the SSH\nconnection with a port forward, you get the error \"port 2222 is already bound\", or\nsomething like that, and port 2222 will not act as a port forward. \nIf I wait a minute until the TIME_WAIT port is cleaned up, then re-establish SSH, it's\nOK. So I always have to wait a minute.  This is a problem on my laptop since the old\nssh session is often hung after exit sleep mode.\nI've been trying several commands, but so far I haven't succeeded in finding a way to actually kill those processes or prevent this one minute delay.\nThis minute is the default timeout for TCP connections in my system (ini_get(\"default_socket_timeout\")). Whatever timeout I set on my socket in PHP has no impact on this particular timeout.\n. @terrafrost :\n\nSo ini_get(\"default_socket_timeout\") doesn't fix the problem? What about setting it in php.ini or .htaccess or something?\n\nI suppose you mean something like ini_set(\"default_socket_timeout\", 100); at the PHP code level or php_value default_socket_timeout 100 at .htaccess or php.ini level.\nI wish it were that easy.\nI tried both, but it ignores this value as well. It seems the timeout value is taken directly from the TCP timeout value of my system at the C language level and completely ignores my PHP settings, which would explains why it totally ignores any timeout I set on the socket directly.\nI could, of course, change the TCP timeout value of my system, but that would impact all my TCP connections and probably have a mostly destabilizing effect on my system. So that's not an option either.\nThe only option I can think of right now, would be to find a way to kill those processes after the output has been read. Unfortunately it's very hard to kill a process that isn't assigned to a PID. I tried an experimental tool named \"Cutter\" (which solely exists for this purpose), but that didn't work either.\nJust for the record, I'm using an i7 powered Asus laptop, with Linux Mint 15 (Olivia), Mate distribution (based on Gnome 2). My PHP version is identified as 5.4.9-4ubuntu2.3 and the ssh app on my system is OpenSSH.\n. ",
    "nVitius": "For what it's worth, I think PSR-4 is the way to go. If anyone really needs to use this with PHP4, they'll have to use a previous release.\n. @bantu Out of curiosity, what else needs to be done?\n. ",
    "GrahamCampbell": ":+1: for psr-4.\n. Sure.\n. Sure. I will remove the hhvm stuff...\n. Sure...\n. Sorry if my pull wasn't very clear. I didn't have much time.\n. Oh, just read your comment my previous pull. Ooops...\n. Oh. I didn't realize the page was so new. :P\n. :+1:\n. Hi there. Waiting a few days sounds good to me. I don't know about anyone else?\n. Why composer.lock? It's completely ignored when this package is installed as a library.\n. Yes, but why do we need lock them?\n. Unfortunately, I disagree, the lock file is only useful to me for locking dependencies in production, but I guess it's a matter of opinion.\n. Maybe it's counting from 0? Try with 4 runs?\n. Yeh, but it might be wrong since it's not actually working as documented...\n. Great to know. Thanks @bantu. :)\n. @bantu :+1: for that.\n. PHP 5.3+ for version 2 would be great.\n. Yeh, I've been following it for a while. :)\n. Moving to php 5.3.9+ might be a good idea for either v2 or v3. I'm not brilliantly familiar with this codebase, but I suspect it might remove some more version specific hacks. php 5.3 is already oel, so we really shouldn't be worrying about supporting php 5.3.2.\n. It also would be cool to move to a capitalized namespace of PhpSeclib or something rather than phpseclib. All lowercase feels very odd.\n. @cnelissen Packagist names are not the same as namespaces. Take symfony for example.\n@bantu I see your point for retaining the library name. The namespace just feels very odd to see and type among other namespaces.\n. What short of timescale are we talking between major releases? I'd say 2 years is probably too long, but 2 months is 2 short as far as I can see. Is 6 months between 2.0 and 3.0 a good idea?\n. > Is there an ETA on the 2.0 tag? Dependencing on dev-master isn't nice :cry:.\nWhy would you need to do that? Use a proper version constraint.\n. 2.0.*@dev or ~2.0@dev would do the job.\n. Yeh. I was just responding to you saying you had to use dev-master, when you don't. That was all. :)\n. We shouldn't need to modify the master branch for packagist to pick this up. My reasoning for doing this was to speed up the availability of a 2.0 version, even if there are major changes before you actually tag a v2.0.0 in the future.\n. Does php vendor\\bin\\PhpbbTranslationValidator.php not work on both platforms?\n. Linux isn't fussy about the directory separators. It should work fine with windows style, and both should work ok with running the command via php. That said, I haven't tested this either. :)\n. :+1:\n. Why the extra merge commit?\n. You don't need to re-fork. Git has ways you can sort this.\n. Something's gone wrong here?\n. Alright, I've started doing this in a pull, even without noticing this issue. @bantu has linked to it.\n. 1.x-stable is a bad name. Should be 1.0 or 1.1 for a branch name. A 0.3 branch would be good for the current 0.3. That's how packagist works.\n. What? You don't need to do \"phpseclib/phpseclib\": \"dev-php5\". You can do \"phpseclib/phpseclib\": \"~2.0@dev\" already, and it will work. Asking for branches in versions constraint is a terrible idea.\n. This should probably be squashed and rebased.\n. What's with all the merge commits?\n. Could you rebase, then squash to remove all the extra commits?\n. Close and open the pull. That should get travis to start over.\n. Why do you keep rebasing with commits?\n. bash\n$ git pull --rebase upstream master\n$ git push --force\n. PHP Parse error:  syntax error, unexpected '<<' (T_SL) in /home/travis/build/phpseclib/phpseclib/tests/PhpseclibFunctionalTestCase.php on line 16\n. :+1: for leave at 5.3.2.\n. @bantu We have no way to actually test this works on 5.3.0, or indeed 5.3.2 since phpunit requires 5.3.3. Maybe we should bump to 5.3.3?\n. :+1: 5.3.3. :)\n. Closing in favour of #575.\n. You haven't updated the docblock.\n. That type is incorrect. You've used Callable. That implies there is a class called \"Callable\". The correct type hint is callable|null.\n. So you're in favour of this? I can spend some more time on this if you want, and try and catch every case.\n. I'll deal with the php5 branch after I'm totally done with the master branch.\n. @bantu Would you mind finishing this off please. Sorry I haven't had time to get back around to this.\n. I'm going to start again with this...\n. :+1:\n. Clear your composer cache.\n. I've seen this before actually. It's actually caused by an issue on packagist that was fixed on monday. You need need to make sure all non-existant branches are deleted from packagist, and then hit force update,\n. @bantu You still need to force update. Something's wrong internally. I had the same issue before. I contacted packagist and they fixed it.\n. This looks like your minimum stability is wrong.\n. Is that a requirement of deployer, and you're requiring deployer? If so, I don't think composer still respects the dev flags.\n. 2.0.x-dev@dev. No. That would be totally wrong, lol.\n. @bantu Just to prove this is not a bug, and does actually work fine:\nhttps://travis-ci.org/GrahamTests/phpseclib-proof/builds/49863078.\nSee how the composer install for each version of php is working fine with https://github.com/GrahamTests/phpseclib-proof/blob/master/composer.json.\n. ```\n$ travis_retry composer install --no-interaction --prefer-source\nLoading composer repositories with package information\nInstalling dependencies (including require-dev)\n  - Installing phpseclib/phpseclib (2.0.x-dev becb952)\n    Cloning becb9524ff7fd1526797ba7f0b123db47b5f5418\nWriting lock file\nGenerating autoload files\n```\n. Right, of course. I'll do this again...\n. > Hmm. Where does Travis CI document changes? Is PHP 5.2 deprecated?\nPHP 5.2 was removed from travis for ever. Sorry. I only updated the docs for it a few days ago.\n. PHP 5.3.3 will probably be going from travis when they move to ubuntu 14.04 too.\n. @bantu Travis should be green now. :)\n. Why don't we have a 0.3 branch? Surely we should have one, even if it's not maintained?\n. Right, so you're just pushing out a final 0.3 release from the 1.0 branch then. Makes sense. I've done something similar before. :)\n. > Rename CHANGELOG.md to CHANGELOG-1.0.md in 1.0 branch. Merge down. Add CHANGELOG-2.0 to 2.0 branch. Merge down. ?\n:+1: :rocket: \n. Are merges from 1.0 -> 2.0 not done anymore? Does that mean my docblock changes need to be submitted to both branches?\n. :)\n. Build is green. :)\n. @bantu Most of the code appears to already be psr2 in the 1.0 branch?\n. Ping.\n. :+1: for 1.0 too\n. Ping. :)\n. :+1:\n. Ping.\n. :+1:\n. Why? That doesn't make sense. They're not stable yet.\n. You need to use dev stability. The prefer stable thing can be useful in composer if that helps. :)\n. Example: https://github.com/StyleCI/StyleCI/blob/master/composer.json#L80.\n. > Without rewriting its history, which you should never do for blessed branches anyway, the file is locked permanently and forever in the repository, contributing to the repositories size.\nYeh. :(\n. > We should change the workflow to no longer make release changes necessary in the repository at all. \nProbably a good idea.\n. :+1:\n. Maybe target at master and bump the version there to 5.4?\n. TBH, I think we really should bump 3.x to at least php 5.4.\n. This is much better security wise. Prevents bad bad dependencies from overriding these functions on systems that don't have the extension installed.\n. Yeh, Laravel does this.\n. > random_bytes() works on all PHP-supported platforms and guarantees security in all cases.\nIn PHP 7.0+ only though. ;)\n. What?\n. Put use Crypt_RSA; at the top of the file, then just reference Crypt_RSA. You want nothing to do with \"App\".\n. Laravel 5 is no different to any other psr4 php project in existence.\n. > If no one complains after a certain period of time we can start doing PHP 5.4-only things. Like [] instead of array(). Maybe. I guess doing that could increase the likelihood of merge conflicts idk.\nI'd say we shouldn't change the array style on the master branch until 2.0 is actually dead, which is a LONG way off yet. The main benefit I see to dropping 5.3 is that we can remove more version specific hacks, and stop worrying about bugs found in php 5.3.4, for example.\n\nThat said, you may be interested in the PHP version stats that Wordpress collects:\n\nI don't think wordpress reflects usage of our target audience though, tbh.\n\nI mean, in truth, there are still a lot of servers out there with 5.3. Even 5.2 is more prevalent than it ought to be.\n\nYeh, considering this library is meant for cryptography, I don't think we should encorage using EOL versions of php, but there's nothing stopping people from using 1.x and 2.x to get older versions of PHP. They're not going away anytime soon. :)\n. @terrafrost What's the timescale for 3.0 btw? When are you planning to release? 3 months? 1 year? 2 years?\n. If the release is in Q3 2016, I'd say it would be reasonable to drop both php 5.3 and 5.4 in 3.0.\n. How about you enable https://styleci.io?\n. > phpcs, scrutinizer-ci, and SensioLabs Insight all understand PSR-2, and can accurately detect and flag coding standards errors on every PR.\nStyleCI will do a much better job of that, and actually provide a diff contributors can apply in seconds. Also, if a PR does get merged that has cs errors, after merge, you can get styleci to actually send you a pull request with the fixes. :P\n. Yes, because php 5.3.3 is the lowest version supported, and we have version specific code for that version too, and for 5.3.4 too, for example.\n. Unless we test on 5.3.3, there is 0 evidence it's actually supported.\n. Yeh, sure. :)\n. And, yeh, I know the tests will fail, but I'm pretty sure we can just skip a few for now and we'll be good (that is, we can open an issue and fix them later). I don't think we should use allow failures, because that'll just hide issues. Better to skip the tests for the stuff that we know about, rather than hide eveything.\n. Ok, right. I'll look at 2.0 and 3.0 then. :)\n. Can we get this merged asap to stop other changes changes with wrong code going in.\n. > @return String\nThat's odd.\n\n@param $shift Integer\n\nYeh - that needs manually fixing because the order is wrong. You've sad shift is the type an integer is the variable\n. > @return string or Array\nand that isn't valid syntax, so i couldn't fix it\n. that is, automatially\n. Don't change the file permissions.\n. :-1: for allow failures\n. Skipping the broken tests would be better, because right now, we have the equivalent of skipping every test.\n. > This is for consistency with master. Feel free to actually fix the failures.\nYeh, I was actually going to send a PR - that's why i sent to 1.0 - i was planning to send to 1.0, deal with the issues, then send equivalent PRs to 2.0/master. Then you pointed out that 1.0 was totally broken. I've not had time to do anything more yet,\n. Wait, but wasn't this class getting removed from the master branch anyway, so why upgrade it only to delete it?\n. Or is that not happening now? ;)\n. Sure. :)\n. We can remove all the commented out \"random\" stuff too can't we?\n. All of this stuff: https://i.starbs.net/gYKY.\n. That's what I was referring to, for reference, but on a proper read, I can see it doesn't need removing. Ignore me. :)\n. > Q3 2016 is my best guess but what if it gets done Q4 2015 or Q1 2016? Let's not commit to anything until we need to. For the time being I think any such discussion is premature.\nPHP 5.4 is still EOL though. It's EOL this weekend.\n. I don't really agree that people using wordpress represent the high end php community. Anyone writing any serious PHP app will be using a maintained version of php. I do understand what you are saying though. Maybe we should instead just set the minimum version to 5.4 for now, then look at the situation again in a year's time? It may be possible that some vulnerabilities in important parts of php 5.4 have been uncovered and not been fixed this time last year, which could alter the situation.\n. k ;)\n. Regarding documenting &, there's no need. The only point of phpdoc is to document stuff that can't be natively expressed by PHP. That's why the access annotation is pointless for example, because once you're using public, or private, or whatever, that' self documenting, of you see what I mean?\nWhat I'm getting at, is the function definition in itself already documents the fact that it returns a pointer, so no need to document that again. ;)\n. Is this good to go then?\n. :ship: :P\n. It matches 1.0.0, which is the current LTS release.\n. The master branch isn't due for release for at least a year.\n. It doesn't have any docs yet, and is still changing a lot.\n. Also, there is a change log of sorts: https://github.com/phpseclib/phpseclib/wiki/Roadmap.\n. I don't agree anything needs changing, however, I would suggest making the 1.0 or 2.0 the \"default\" branch on GitHub rather than the master, like symfony and laravel do, so it's not confusing for people.\n. The master branch has no docs, because the code there is unfinished for at least a year.\n. 1.0 is the LTS release though. Not our fault if composer doesn't have a concept of LTS.\n. Yeh, but they have people that contribute to the docs. I'm sure the phpseclib team would be happy if you could help write some docs.\n. :+1:\n. > Can we add stuff to CI ensuring all doc blocks have the expected format?\nYes. I'd recommend enabling StyleCI on this repo.\n. https://styleci.io/.\n. You'd want to use StyleCI's PHP-CS-FIXER fork for that then. :)\n. :D\n. :-1: phpseclib 1.x isn't meant to work on php 7.\n. Only 2.x is meant to be php 7 compatible.\n. When I say 1.x doesn't work on php 7, I didn't mean this thing, I meant the whole code base. We don't even test 1.x on php 7.\n. Just because they support 5.2 it doesn't meant your plugin has to?\n. Ok, then. You need two versions of the plugin then.\n. Sure. I've got no objections to that at all. Just when I wanted to test on php 7 on 1.x, the impression I got was that it wasn't worth it and that we should just focus on 2.x.\n. :+1:\n. So we need to catch Throwable rather than Error?\n. > Probably should pass MCRYPT_DEV_URANDOM to mcrypt_create_iv() ;)\nCould you send a PR please?\n. Could you do it in two PRs please?\n. I wonder. Does Laravel's mcrypt encrypter also suffer this issue?\n. Ah, good. :)\n. :+1: Should be targeted at 1.0 probably though.\n. No, that PR is for a different file is it not?\n. Surely it's moved from the readme to the php file? 1.0 is older than master?\n. Please follow PSR-2.\n. Also, what version of php?\n. Just travis being shit. It's happening to everyone.\n. :+1:\n. :+1: for doing that for 3.0. I just did a quick search in one of my own apps and found $rsa->createKey(2048);.\n. Yeh, 2048 bit key generation is pretty fast on php 7 with the openssl extension.\n. Ages. It's going into 3.0.\n. Don't expect it this quarter.\n. > Is this repository still maintained at all??\nYes...\n. Because there's no rush to release.\n. Well if you want, you can just require 1.0.*@dev.\n. I believe openssl is somewhat preferred these days because it's actively maintained and mcrypt is not?\n. yes\n. Surely this would be better targeted at 2.x, rather than 3.x, since it could be a year before 3.0 gets released.\n. :+1:\n. > I think most of these were pointless in the first place as public information was converted.\nI agree.\n. I don't understand the question?. Oh, not sure tbh. I guess a good PR to implement it would be accepted?. Not a security bug imo.\n\nBy default password should not be thrown as part of a stack trace.\n\nNot how stack traces work.. > Password should not appear in the stacktrace.\nRight, but my point is, how do you propose we do this.... Surely should only be uploading coverage from one test otherwise this just becomes a race condition?\n[ '$TRAVIS_PHP_VERSION' == '5.5' ] would be better?\n. But scrutinizer will just ignore them. It will ONLY use one of the reports. It will not combine them.\n. Ohh. That's cool. I didn't know about that! When was that added?\n. however. a should read however, a\n. Yeh, you had these in the wrong order. You must put the type first, and the variable name second, then the description.\nAnd yeh, i made a typo there. It should say: @param int $timeout (optional)\n. yeh, don't need that\n. tbh, i think we should get rid of the package docblocks too. totally useless as far as i can see\n. yeh\n. how about we switch to psr-2?\n. oops...\n. I normally go for 30 mins. 45 mins can be a long time to wait if someone sends a bad pull request and pushes a few commit to try to fix it, they'll lock up scrutinizer for hours.\n. Oh right. Makes sense then. My test suites are normally much smaller so take less time. 45 mins is probably good then. :)\n. 7.0 would be better\n. This isn't right?\n. Really?\n. Really?\n. Really?\n. Oh, right. I just noticed a breaking change in the diff, and didn;t check the context. :)\n. Is this wrong on the 1.0 branch too?\n. This shouldn't be needed, if a method has no return statement, PHP treats it as null.\n. Not sure, I don't use phpcs, sorry.\n. don't need the slash\n. missing fullstop\n. no leading slash should be used - infact it's wrong to include it here\n. same\n. in all places\n. don't need the variable asignment\n. there is no such class as EngineException - it was renamed to \"Error\"\n. see https://3v4l.org/jfh8F\n. see my comments on the other PR - this catch block is wrong\n. wrong\n. phpdoc needed\n. cs\n. no random extra line\n. this wasn't caught by my original PR because it was merged into the codebase after I send the PR\n. there is no such type as ref, so mixed is all we can use here\n. Hmmmm. &array is invalid syntax as far as I'm aware. At least, I've never seen it used before, and I know of phpdoc parsers that would fail to read that correctly.\n\nWhy mixed instead of array|false like you have below?\n\nMy bad there. I'll change that now.\n. sure, i'll move it, i'll also add the missing spaces around the +\n. this syntax is invalid on php 7 btw\n. you need to provide all args as of 7.0\n. It's listed in their upgrading guide btw: http://php.net/manual/en/migration70.incompatible.php, under \"Empty list() assignments have been removed\".\n. Ahhh, hmmmm, this issue came up in Laravel the other day, which is why I suggested it. I'll let Taylor know.\n. Yeh, I think you're right. It's not \"empty\", and yeh, php's docs are a little ambiguous here.\n. access was public anyway - i think we should remove these annotations on 2.x too\n. that is, for all code\n. though it's not, it's public?\n. ah, right :)\n. this looks like it's left over from a bad branch merge.\n. well, it's not documenting anything - it just randomly stops, and another docblock started\n. Before my changes:\n``` php\n/**\n * Default Constructor.\n *\n * Determines whether or not the mcrypt extension should be used.\n *\n * $mode could be:\n *\n * - \\phpseclib\\Crypt\\Base::MODE_ECB\n *\n * - \\phpseclib\\Crypt\\Base::MODE_CBC\n *\n * - \\phpseclib\\Crypt\\Base::MODE_CTR\n *\n * - \\phpseclib\\Crypt\\Base::MODE_CFB\n *\n * - \\phpseclib\\Crypt\\Base::MODE_OFB\n *\n * If not explictly set, \\phpseclib\\Crypt\\Base::MODE_CBC will be used.\n *\n * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n * @param int $mode\n * @access public\n\n/**\n * Sets the key.\n *\n * Keys can be of any length.  Rijndael, itself, requires the use of a key that's between 128-bits and 256-bits long and\n * whose length is a multiple of 32.  If the key is less than 256-bits and the key length isn't set, we round the length\n * up to the closest valid key length, padding $key with null bytes.  If the key is more than 256-bits, we trim the\n * excess bits.\n *\n * If the key is not explicitly set, it'll be assumed to be all null bytes.\n *\n * Note: 160/224-bit keys must explicitly set by setKeyLength(), otherwise they will be round/pad up to 192/256 bits.\n *\n * @see \\phpseclib\\Crypt\\Base:setKey()\n * @see setKeyLength()\n * @access public\n * @param string $key\n */\nfunction setKey($key)\n{\n    if (!$this->explicit_key_length) {\n        $length = strlen($key);\n        switch (true) {\n            case $length <= 16:\n                $this->key_size = 16;\n                break;\n            case $length <= 20:\n                $this->key_size = 20;\n                break;\n            case $length <= 24:\n                $this->key_size = 24;\n                break;\n            case $length <= 28:\n                $this->key_size = 28;\n                break;\n            default:\n                $this->key_size = 32;\n        }\n    }\n    parent::setKey($key);\n}\n\n``\n. lol, ok ;)\n. Hmmm, well, it's not broken at this point in the history: https://github.com/GrahamForks/phpseclib/blob/3f3e0cac98a479da04174c7805e4bcc390a27f0c/phpseclib/Crypt/Rijndael.php.\n. Good here too: https://github.com/GrahamForks/phpseclib/blob/2013a31ecd70fc37c5413c4379b8a32922cbae26/phpseclib/Crypt/Rijndael.php.\n. But it is broken here: https://github.com/GrahamForks/phpseclib/blob/d9e9504fbacc20502e4b456891b6f310e8022e91/phpseclib/Crypt/Rijndael.php.\n. this is a security bug\n. instead we should use extension_loaded and then check the php version\n. Missing fullstop.\n. Missing fullstop.\n. key length vs key size - might be useful to be consistent as to not confuse ourselves.\n. maybe mentioning this is the length in bytes might be useful for the description?\n. what about static::setKey()\n. or self, for php 5.2-\n. meh, I don't really mind - I was just throwing the idea out there incase you liked it :)\n. does throwable exist on php 5.6 though?\n. Nice :)\n. Hmm, well, assuming we're 100% certain all exceptions will defientely actually implement throwable on 5.6.\n. Yeh. I was just checking to be sure there's zero chance of an exception coming out of there that might not implement throwable.\n. lol\n. maybe~1.1would be a better idea here?\n. missing space after if\n. justreturn;` is fine\n. or maybe, just write:\n``` php\n$count = count($this->errors);\nif ($count > 0) {\n    return $this->errors[$count - 1];\n}\n``\n. Shame we have to depend on a package with non-standard versioning conventions.\n. Oh yeh. I thought we were going to make it an optional dep to use all phpseclib features, but, yeh, it really is only used in the tests. ;)\n. but that's not being explicit. class names are defined without a slash\n. no leading slash please\n. maybe call thisprivate-key.txtor something to make it super obvious that this is a file name, because normally file names don't contain spaces\n. i assume removing this param annotation was unintentional?\n. doing this conflicts with people who want 2.x\n. :-1: until this is stable\n.^1.4|^2.0`\n. we need to catch Exception now too\n. yeh\n. It's conventional to catch Exception first, then Throwable.\n. this is not needed\n. this information is already public\n. Please explain this?. Please minimize these changes to those that are required, since the phpdoc changes are bug fixes. :). This is invalid syntax.. Missing type data.. \ud83d\udc4e . Invalid syntax. bool. ",
    "cordoval": ":+1:\n. ",
    "virgofx": "PSR-4 :+1:\n. Please resolve and merge this.\n. @bantu The roadmap looks good ... @cnelissen and I could knock the majority of the autoloading, errors/exceptions, class constants, general coding issues (scrutinizer stuff), and basic logic errors in a few days (especially because we've already done this in our own internal fork of the project)  ... however, this has been done in the past already with pull requests not getting merged or ultimately reverted (e.g. reverting the Exception errors back to user_error() -- which should never have happened).  What is the plan for moving the 2.0 branch forward to current standards with respect to receiving help from the community?   I believe the old maintainers have been resistant to change -- but it shouldn't be an issue anymore to just break BC, create a new branch (as just happened with the 2.0) and bring the current project up to speed. Anyone who wants to live in PEAR land can be happy with the current master branch.\nThoughts?\n. The exceptions weren't resolved; however, those could be incorporated slowly as each location where user_error's() were being generated would need to be evaluated.  +1 for releasing versions and also setting the default to the current PHP branch so development can move faster.\n. @GrahamCampbell I agree with you ... Was just trying to provide enough clarity for the transition so people would know that the 1.0 was the previous 0.3 series.\n. This issue is connected with #514 but isolated because it will explicitly require a maintainer [ @bantu or @terrafrost ] to set the default branch and make the tags. Much of the other parts of Issue 514 have been getting pulled in this week (which is great) as @cnelissen has been sending PRs which are pre-requisites to get PSR-4 done right, after which the updates listed here should take place.\n. @bantu @terrafrost @cnelissen Now that the updated class autoloading is implemented can we decide on a strategy to move forward so we can properly tag the releases (which is required to maintain composer stability).\nI suggest we:\n- Rename the current master branch to 0.3\n- Rename the current php5 branch to master and then set this as the default.\n- Make a 1.0 tag for the updated master branch now that classloading works.\nMoving forward -- all new development should be performed on the new master branch with only very serious bugfixes getting backported into the new 0.3 branch.\nOnce approved, @cnelissen or I can update the Readme (sure markdown sucks -- but it works for now and people read it quickly for installation and version information) in a PR as long as someone with push can appropriately update the branches.\n. Looks good, thanks!\n. Looks good, thanks!\n. The travis issue is a bug with code sniffer and a non-issue. Looks good, thanks!\n. @bantu @terrafrost This needs to get merged ASAP to fix issues with constants being referenced from the Net\\SS* classes. Either we would have to rework the newly merged classes to use the Crypt_Base explicitly at the exact namespace (to fix issues with Crypt_Base::CONSTANT* assuming the new current non-root namespace) --- or just merge this so autoloading will work properly.\ne.g. line 1510 in SSH2:\n$this->encrypt = new Crypt_Rijndael(Crypt_Base::MODE_CTR);\nThe Crypt_Base references \\phpseclib\\Net\\Crypt_Base which does not exist. Can  be temporarily fixed with \\Crypt_Base:: or a use \\Crypt_Base;. The better fix --- merge this PR ;)\n. ",
    "joe-meyer": "new to using phpseclib but for what it's worth +1 to PSR-4\n. ",
    "ArjandeV": "Could this branch be tagged with a version so we can use it as a dependency in other composer packages?\n. ",
    "cviebrock": "Here's the dump:\narray(2) {\n  [0] =>\n  string(6) \"deploy\"\n  [1] =>\n  string(0) \"\"\n}\n\"deploy\" is the user I'm connecting as.\n. This is helpful.  I'll do some more digging, and also point this out to the authors of the packages that use phpseclib since it seems more likely that they are just not passing the key in properly.\n. ",
    "anlutro": "Oops, missed that issue.\n. ",
    "simplewhite": "Ubuntu 12.04.3 LTS.\nI'm trying to get recursive listing of all files/folders. Do you have any other ideas of how to get all listings (whole tree) instead of going folder to folder?\n. I need full details listing like for \"ls -l\"\nSo, it has date of file, permissions, size and etc\n. Here it is - https://dl.dropboxusercontent.com/u/931830/ssh_replies.zip\nI used strlen() in PHP function to display length of reply and this value is in file names\n. The actual command in \"exec\" I run ('cd /var/www/crm.sdfasfsdfwfew.info/;ls -lR;')\n. I tried to run \"ls -lR /var/www/crm.sdfasfsdfwfew.info/ > /var/www/crm.sdfasfsdfwfew.info/dirlist.txt\"\nand it saved correct file on the server however I'm looking for other way to get this information without creating a file on the server.\nAnd problem is not with listing size because when I use it on other bigger folder the return is bigger but cut off as well\n. I do not think that issue is with non-ASCII file name because it cuts off at different location. Maybe something to deal with a buffer size or cache..\nWill check master branch now and base64\n. Tested both:\n1) used latest git master branch and it cuts off.\n2) tried base64 - coding/decoding went well but same issue - cut off.\n. Not sure what is the issue with it.\nI just uploaded scripts to Ubuntu server with PHP 5.4.9-4ubuntu2.2 and it worked fine.\nI was testing the script on my Mac with php 5.5.3 and other developer tested on his Windows machine and had same issue. (do not know his PHP version)\n. @terrafrost I tested your pull request and it worked great on my Mac now!\n. ",
    "cyberpower678": "I downloaded it from the main page.  It said Download PHPSecLib 0.3.5 and I'm connecting to tools-wmflabs.org\n. I'm trying to run \"become\"\n. I see.  That makes sense.  Other commands seem to work.\n. What I want is something that simulates exec( \"ssh... but doesn't use that because does not support it.\n. I was hoping to use mysqli over SSH.  I understand it requires a tunnel to the mysql db to establish a connection.\n. ",
    "cubiclesoft": "It is possible to tunnel multiple SSH connections even if any given target host doesn't have a SSH client installed.  Specifically, port forwarding on localhost can be used to manage the multiple connection levels.\nhttp://superuser.com/questions/96489/ssh-tunnel-via-multiple-hops\nOption 3 of the accepted answer show these commands:\nssh -L 9998:host2:22 -N host1\nssh -L 9999:localhost:1234 -N -p 9998 localhost\nWhich allows a piece of software on localhost to connect to port 9999 and end up transparently connecting to port 1234 on host2 over two established SSH connections.  The example could be easily expanded to tunneling through 10 or even 100 intermediate hosts but, realistically, the upper limit is more likely to be no more than 3-5 hosts deep.  This method also allows all private SSH keys to remain on the localhost machine and allows each intermediate host to be connected to with a different SSH key.  Once each SSH connection is established, SSH port forwarding appears to turn the host into a packet proxy.\nThe above seems to indicate that SSH port forwarding is a bit different from SSH Agent Forwarding.  Also, I'm not sure how someone would set up the above scenario with pure phpseclib.  In theory, it should be possible because the ssh client itself can do it.  It would be quite nice to be able to set up and maintain an entire tunnel crossing multiple hosts in a single PHP process.\n. There's no particular feature I want/need.  In general, I use the master branch of a repo and wait for a relatively stable variant of it to show up.  I do that mostly because master generally has better support options - that is, generally-speaking, bugs get fixed and the developer cares.  It's hard to tell with most projects where support is at with older versions because it is rare to see a deprecation timeline and even rarer to see someone supporting multiple versions and backporting code.  Most people don't have the time nor the desire to develop/manage/maintain multiple versions of a project.\nglob()'ing the RSA directory and calling ReflectionClass tosses a monkey wrench into any script that might turn the library into a 'standalone' variant (i.e. merging multiple PHP files into one file) because the RSA directory would cease to exist but the classes from the files in that directory would be generally available.  I prefer standalone builds when I can get them (rarer these days).\nStandalone build issue aside, how about a simple 'class_exists'/'require_once' line right before the ReflectionClass() usage?  You already know exactly where the file is located on disk since the code just glob()'ed the whole directory.\nOn a loosely related note, while looking at the code and locating other ReflectionClass references, I noticed that RSA::addFileFormat() appears to be broken:\n``` php\n    static function addFileFormat($fullname)\n    {\n        self::_initialize_static_variables();\n    if (class_exists($fullname)) {\n        $meta = new \\ReflectionClass($path);\n        ...\n\n```\n$path is not defined before being used.\n. > Including all files is most likely a waste of time and memory.\n```\nPHP Fatal error:  Uncaught exception 'ReflectionException' with message 'Class phpseclib\\Crypt\\RSA\\MSBLOB does not exist' in D:\\WEB\\test\\support\\phpseclib\\Crypt\\RSA.php:360\nStack trace:\n0 D:\\WEB\\test\\support\\phpseclib\\Crypt\\RSA.php(360): ReflectionClass->__construct('phpseclib\\Crypt...')\n1 D:\\WEB\\test\\support\\phpseclib\\Crypt\\RSA.php(382): phpseclib\\Crypt\\RSA::_initialize_static_variables()\n2 D:\\WEB\\test\\install.php(30): phpseclib\\Crypt\\RSA->__construct()\n3 {main}\nthrown in D:\\WEB\\test\\support\\phpseclib\\Crypt\\RSA.php on line 360\n```\nThe RSA class already attempts to load ALL of the PHP files in the RSA directory during object construction.  I'm not saying to load everything across all of phpseclib which would certainly be wasteful.  I'm saying to eliminate the obvious in specific areas where the code is going to definitely load a lot of something.  How is the solution I proposed a problem?  After all, we're talking about a couple of carefully placed lines of code with extreme knowledge of the file structure in one specific area of phpseclib - not some vague topic related to autoloaders.\n. ",
    "Burnett01": "Ok thank you :+1: \n. Wow sorry for the delay man! Thank you very much! Party Time!!!!\n. Globbing is not supported as far as I know, but you can easily code some extension checks:\n```php\n<?php\nfunction rawlist($path, $suffix = []) {\n$collection = [];\n\n$list = $sftp->rawlist($path);\n\nforeach ($list as $item => $value) {\n\n    $item_pathinfo = pathinfo($path.DIRECTORY_SEPARATOR.$item);\n\n    $item_extension = $item_pathinfo['extension'];\n\n    if(!empty($suffix) && !in_array($item_extension, $suffix)){ \n        continue;\n    }\n\n    $collection[$item] = $value;\n}\n\nreturn $collection;\n\n}\n$list = rawlist('/home/user', ['csv', 'txt']);\n```\nOf course this is far from perfect... (no security checks whatsoever). ",
    "jlewing": "You're probably right, we wouldn't care if the connection was closed if the entire hmac is there... and any subsequent calls to the function would get caught by the resource/eof detection at the start of the function anyways.  I'll go ahead and change my code to what you have suggested and let it run against a pool of targets.\nThank you!\n. Actually now I'm finding that it's affecting more than just HP-UX boxes.  Anyways, I added this in SSH2.php\n```\n2976                $this->channel_status[$channel] = NET_SSH2_MSG_CHANNEL_CLOSE;\n2977                $this->_append_log('TF', 'THIS FAR');\n2978                return true;\n00001910  20:20:20:20:20:20:63:6f:6e:6e:65:63:74:65:64:20        connected\n00001920  20:20:20:75:6e:63:6f:6e:66:69:67:75:72:65:64:20     unconfigured\n00001930  75:6e:6b:6e:6f:77:6e:0a:70:63:69:73:63:68:31:35  unknown.pcisch15\n00001940  3a:65:31:35:62:31:73:6c:6f:74:32:20:20:20:20:20  :e15b1slot2\n00001950  20:20:20:20:20:20:20:70:63:69:2d:70:63:69:2f:68         pci-pci/h\n00001960  70:20:20:20:63:6f:6e:6e:65:63:74:65:64:20:20:20  p   connected\n00001970  20:63:6f:6e:66:69:67:75:72:65:64:20:20:20:6f:6b   configured   ok\n00001980  0a                                               .\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.2467, network: 0.0003s)\n00000000  00:00:00:00:00:00:00:10:5b:72:65:74:75:72:6e:5f  ........[return_\n00000010  63:6f:64:65:3a:30:5d:0a                          code:0].\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.002, network: 0.0002s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0011, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:00                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0019, network: 0.0002s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0011, network: 0.0001s)\n00000000  00:00:00:00                                      ....\nTF\n00000000  54:48:49:53:20:46:41:52                          THIS FAR\n```\n. Yeah, using sudo but everything is without tty... all the rules have NOPASSWD.\nAnyways, I figured it out and it was 100% my problem.  Sorry for the trouble and THANK YOU for the help.\n. ",
    "remicollet": "I confirm PEAR channel is fixed, thanks.\n. PEAR install the library as \"system wide\" \nSo a configuration file, is a \"system\" configuration file (in /etc/pear on Linux, editable by admin).\nUser can change their pear config if they want installation in some other dir (or use other installation method, such as composer).\n. Please clarify the role of this file.\n. > @remicollet The role of openssl.cnf is to make the functionality of the PHP OpenSSL extension\n\nwe use actually work. It was introduced by 1417463\n\nThanks, but this doesn't give me any useful hit why this file is needed and why the system provided configuration is not suitable, and why this couldn't be changed by sysadmin.\nWhich is obvious is that this file is not a PHP script (so role=\"php\" is bad in all cases). And the name is also not very obvious (it really seems to be a config file).\nIf it is a file which make sense to be editable by the system admin, then is have to be role=\"config\".\nIt is MUST never be changed, then it have to be role = \"data\" (so outside the php include path), and in this case a comment explaining why in the file will be valuable.\nP.S. not relying on system openssl provided configuration could raise some very strange \"border-case-bugs\", such as https://bugs.php.net/66833)\n. Notice that, even if you choose to not apply the proposed patch, the installation is badly choosen\nWIthout any change:\n```\npear channel-update phpseclib.sourceforge.net\nUpdating channel \"phpseclib.sourceforge.net\"\nChannel \"phpseclib.sourceforge.net\" is up to date\npear install phpseclib/Crypt_RSA-0.3.6\nCould not download from \"http://phpseclib.sourceforge.org//get/Crypt_RSA-0.3.6.tgz\", cannot download \"phpseclib/Crypt_RSA\" (Connection to `phpseclib.sourceforge.org:80' failed: php_network_getaddresses: getaddrinfo failed: Name or service not known)\n```\nSo channel is still broken... so manually:\n```\nwget http://phpseclib.sourceforge.net/get/Crypt_RSA-0.3.6.tgz\npear install Crypt_RSA-0.3.6.tgz\ninstall ok: channel://phpseclib.sourceforge.net/Crypt_RSA-0.3.6\npear list-files phpseclib.sourceforge.net/Crypt_RSA\nInstalled Files For phpseclib.sourceforge.net/Crypt_RSA\nType Install Path\nphp  /usr/share/pear/Crypt/RSA.php\nphp  /usr/share/pear/openssl.cnf\n```\n=>  /usr/share/pear/openssl.cnf is very bad, outside of Crypt tree, can create bad conflicts with other packages.\n. > I am not sure what roles there are. What role does one assign to a data file, say a text file or a jpeg?\nhttp://pear.php.net/manual/en/guide.users.concepts.filerole.php\nSo role=\"data\" (will be installed in \"data_dir\"/Crypt_RSA)\n(and in this case, my patch proposal, will also be required, just changing cfg_dir with data_dir)\n. Everything seems ok now\n. I don't understand, Net/SCP.php still have the exec bit set. You don't have to apply this on 1.0, which is already ok.\nOnly in 2.0\nThis explain why you have a empty commit in 1.0, thus nothing in 2.0 (and master). This is the PHP 5.3.3 (with tons of security backports) provided in RHEL / CentOS 6 (with OpenSSL 1.0.1e). Notice, this is not related to OpenSSL, as test suite passes on RHEL-6 with more recent PHP version (using same OpenSSL version). I confirm, with change from #1128, test suite passes on RHEL 6 / PHP 5.3.3. >  If UTC is required, date.timezone should really be set to UTC in test.\nSee https://github.com/phpseclib/phpseclib/blob/master/tests/bootstrap.php#L8\nSo timezone is properly set to UTC for the test suite.\n. I could probably have some SSH access (internally), so will try to dig on this on spare time...\n(btw, IIRC, qemu allow to run arm VM). No need to apologize ;)  I'm also wait on testing this fix.\nHere is a Fedora scratch build using 2.0 branch up to 87dd553517cde5c99b585ce537fb3c1ba1f45cb7\nhttps://koji.fedoraproject.org/koji/taskinfo?taskID=23677106\nSeems better, but still 1 failure\n```\n1) Unit_Crypt_TwofishTest::testVectors\nFailed asserting that ^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ yielded expected output in internal engine\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1cc75f5b437542dff8937df7e871ad7e'\n+'9f589f5cf6122c32b6bfec2f2ae8c35a'\n/builddir/build/BUILD/phpseclib-87dd553517cde5c99b585ce537fb3c1ba1f45cb7/tests/Unit/Crypt/TwofishTest.php:37\n```. LGTM :)\nFedora scratch build passes on all arches.\nhttps://koji.fedoraproject.org/koji/taskinfo?taskID=23775281. With PHP 7.0.25\n```\nPHPUnit 6.5.4 by Sebastian Bergmann and contributors.\nRuntime:       PHP 7.0.26\nConfiguration: /work/GIT/phpseclib/phpunit.xml.dist\n.............................................................   61 / 1736 (  3%)\n.............RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  122 / 1736 (  7%)\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR......................RRRR.  183 / 1736 ( 10%)\n.....................RRRR....................................  244 / 1736 ( 14%)\n.............................................................  305 / 1736 ( 17%)\n.......RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  366 / 1736 ( 21%)\nRRRRRRRRRRRRRRRRRRRRRRRRRRRR......................RRRR.......  427 / 1736 ( 24%)\n...............RRRR..........................................  488 / 1736 ( 28%)\n.............................................................  549 / 1736 ( 31%)\n.RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  610 / 1736 ( 35%)\nRRRRRRRRRRRRRRRRRRRRRR......................RRRR.............  671 / 1736 ( 38%)\n.........RRRR................................................  732 / 1736 ( 42%)\n..................................................SSSSSSSSSSS  793 / 1736 ( 45%)\nSSSSSSSSSSSSSSSSSSSSSSS....................................S.  854 / 1736 ( 49%)\n...............SSSSSS.S......................................  915 / 1736 ( 52%)\n.............................................................  976 / 1736 ( 56%)\n............................................................. 1037 / 1736 ( 59%)\n............................................................. 1098 / 1736 ( 63%)\n............................................................. 1159 / 1736 ( 66%)\n............................................................. 1220 / 1736 ( 70%)\n....................................................RR....... 1281 / 1736 ( 73%)\n............................................................. 1342 / 1736 ( 77%)\n............................................................. 1403 / 1736 ( 80%)\n............................................................. 1464 / 1736 ( 84%)\n......................................................RS..... 1525 / 1736 ( 87%)\n...R...R...........RR..SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS....... 1586 / 1736 ( 91%)\n.......................RSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1647 / 1736 ( 94%)\nSSSSSSSSSSSSSSSSSSSSSSSSSS............SSSSSSSSSSSSSSSSSSSSSSS 1708 / 1736 ( 98%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS                                  1736 / 1736 (100%)\nTime: 1,87 seconds, Memory: 30,00MB\n```\nWith PHP 5.6.32\n```\nPHPUnit 5.7.25 by Sebastian Bergmann and contributors.\nRuntime:       PHP 5.6.32\nConfiguration: /work/GIT/phpseclib/phpunit.xml.dist\n.............................................................   61 / 1736 (  3%)\n.............................................................  122 / 1736 (  7%)\n.............................................................  183 / 1736 ( 10%)\n.............................................................  244 / 1736 ( 14%)\n.............................................................  305 / 1736 ( 17%)\n.............................................................  366 / 1736 ( 21%)\n.............................................................  427 / 1736 ( 24%)\n.............................................................  488 / 1736 ( 28%)\n.............................................................  549 / 1736 ( 31%)\n.............................................................  610 / 1736 ( 35%)\n.............................................................  671 / 1736 ( 38%)\n.............................................................  732 / 1736 ( 42%)\n..................................................SSSSSSSSSSS  793 / 1736 ( 45%)\nSSSSSSSSSSSSSSSSSSSSSSS....................................S.  854 / 1736 ( 49%)\n...............SSSSSS.S......................................  915 / 1736 ( 52%)\n.............................................................  976 / 1736 ( 56%)\n............................................................. 1037 / 1736 ( 59%)\n............................................................. 1098 / 1736 ( 63%)\n............................................................. 1159 / 1736 ( 66%)\n............................................................. 1220 / 1736 ( 70%)\n............................................................. 1281 / 1736 ( 73%)\n............................................................. 1342 / 1736 ( 77%)\n............................................................. 1403 / 1736 ( 80%)\n............................................................. 1464 / 1736 ( 84%)\n.......................................................S..... 1525 / 1736 ( 87%)\n.......................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS....... 1586 / 1736 ( 91%)\n........................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1647 / 1736 ( 94%)\nSSSSSSSSSSSSSSSSSSSSSSSSSS............SSSSSSSSSSSSSSSSSSSSSSS 1708 / 1736 ( 98%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS                                  1736 / 1736 (100%)\nTime: 4.02 seconds, Memory: 38.50MB\n```\nWith PHP 7.2.1RC1\n```\nPHPUnit 6.5.4 by Sebastian Bergmann and contributors.\nRuntime:       PHP 7.2.1RC1\nConfiguration: /work/GIT/phpseclib/phpunit.xml.dist\n.............................................................   61 / 1736 (  3%)\n.............RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  122 / 1736 (  7%)\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR......................RRRR.  183 / 1736 ( 10%)\n.....................RRRR....................................  244 / 1736 ( 14%)\n.............................................................  305 / 1736 ( 17%)\n.......RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  366 / 1736 ( 21%)\nRRRRRRRRRRRRRRRRRRRRRRRRRRRR......................RRRR.......  427 / 1736 ( 24%)\n...............RRRR..........................................  488 / 1736 ( 28%)\n.............................................................  549 / 1736 ( 31%)\n.RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR  610 / 1736 ( 35%)\nRRRRRRRRRRRRRRRRRRRRRR......................RRRR.............  671 / 1736 ( 38%)\n.........RRRR................................................  732 / 1736 ( 42%)\n..................................................SSSSSSSSSSS  793 / 1736 ( 45%)\nSSSSSSSSSSSSSSSSSSSSSSS....................................S.  854 / 1736 ( 49%)\n...............SSSSSS.S......................................  915 / 1736 ( 52%)\n.............................................................  976 / 1736 ( 56%)\n............................................................. 1037 / 1736 ( 59%)\n............................................................. 1098 / 1736 ( 63%)\n............................................................. 1159 / 1736 ( 66%)\n............................................................. 1220 / 1736 ( 70%)\n....................................................RR....... 1281 / 1736 ( 73%)\n............................................................. 1342 / 1736 ( 77%)\n............................................................. 1403 / 1736 ( 80%)\n............................................................. 1464 / 1736 ( 84%)\n......................................................RS..... 1525 / 1736 ( 87%)\n...R...R...........RR..SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS....... 1586 / 1736 ( 91%)\n.......................RSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1647 / 1736 ( 94%)\nSSSSSSSSSSSSSSSSSSSSSSSSSS............SSSSSSSSSSSSSSSSSSSSSSS 1708 / 1736 ( 98%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS                                  1736 / 1736 (100%)\nTime: 2.22 seconds, Memory: 30.00MB\n```\nWith PHP 5.4.45\n```\nPHPUnit 4.8.36 by Sebastian Bergmann and contributors.\nRuntime:    PHP 5.4.45\nConfiguration:  /work/GIT/phpseclib/phpunit.xml.dist\n.............................................................   61 / 1736 (  3%)\n.............................................................  122 / 1736 (  7%)\n.............................................................  183 / 1736 ( 10%)\n.......................................................SSSSSS  244 / 1736 ( 14%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  305 / 1736 ( 17%)\nSSSSS.SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  366 / 1736 ( 21%)\nSSSSSSSSSSSSSSSSSSSSSSSS....SSSSSSSSSSSSSSSSSSSSSS....SSSSSSS  427 / 1736 ( 24%)\nSSSSSSSSSSSSSSS....SSSSSSSSSSSSSSSSSSSSSSSSS.................  488 / 1736 ( 28%)\n.............................................................  549 / 1736 ( 31%)\n.............................................................  610 / 1736 ( 35%)\n.............................................................  671 / 1736 ( 38%)\n.............................................................  732 / 1736 ( 42%)\n................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  793 / 1736 ( 45%)\nSSSSSSSSSSSSSSSSSSSSSSS.SS.................................S.  854 / 1736 ( 49%)\n.......SSSSSSSSSSSSSS.S......................................  915 / 1736 ( 52%)\n.............................................................  976 / 1736 ( 56%)\n...........................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1037 / 1736 ( 59%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1098 / 1736 ( 63%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS.............................. 1159 / 1736 ( 66%)\n............................................................. 1220 / 1736 ( 70%)\n............................................................. 1281 / 1736 ( 73%)\n............................................................. 1342 / 1736 ( 77%)\n.........................................SSSSSSSSSSSSSSSSSSSS 1403 / 1736 ( 80%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS................. 1464 / 1736 ( 84%)\n.................................................SS..S.S..... 1525 / 1736 ( 87%)\n.......................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS....... 1586 / 1736 ( 91%)\n......................S.SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 1647 / 1736 ( 94%)\nSSSSSSSSSSSSSSSSSSSSSSSSSS............SSSSSSSSSSSSSSSSSSSSSSS 1708 / 1736 ( 98%)\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nTime: 3.96 seconds, Memory: 55.25MB\n```. ",
    "felixkiss": "No, my script and the variable value are definitely UTF-8 encoded.\nAny other suggestions?\nEdit: I use interactive mode with $ssh->write()\n. This is really interesting.\nI wrote a little test script, cleared the remote .bash_history and executed the script.\nResults: https://gist.github.com/felixkiss/9271755\nSo it works with $ssh->exec(), but not with $ssh->write() :disappointed: \n. ``` php\n    private function connect()\n    {\n        if ($this->ssh === null)\n        {\n            $this->ssh = new SSH2($this->host);\n            $login = $this->ssh->login(\n                $this->username,\n                $this->authenticationMethod->getCredentials()\n            );\n        if (!$login)\n        {\n            throw new \\Exception('Could not connect.');\n        }\n    }\n\n    return $this->ssh;\n}\n\n```\n. You hit the nail on the head.\nMy private key is in fact encrypted and I forgot about it, because OS X's ssh-agent completely hides it from me (stored in login keychain).\nphpseclib\\System\\SSH\\Agent sounds promising, but I couldn't find it in the docs. Did I miss it?\nAnyway, thanks for the help :heart: \n. ",
    "AnanthRavi": "Yeah looks like I was using a deprecated version of the Crypt_RC4 library. Guess it was my Mac. I tried on a ubuntu box and it works perfectly fine. Thanks!\n. ",
    "nickygerritsen": "Yeah I used something like $callback = array($this, 'func'). I guess it does work with only a direct function but not with a method on an object or a static method.\n. There was another call that I found after greping the code. I have replaces this one also.\n. is_callable, as the code seems to check for it every time\n. ",
    "ngyuki": "Thank you for your time.\nI tried to fix.\nHow about this?\n. OK. I confirmed it.\nThank you for fix.\n. ",
    "esokullu": "@terrafrost thanks for the comments.\nThe host is actually a 64 bit Centos 5.5. But the PHP environment is a standard CentOS RPM setup.\nWhat I understand from @Andreas' post, the PHP needs to be compiled again with large file support (LFS) but there's no guarantee it will work with uploads because it hasn't been tested throughly.\n. ",
    "CMCDragonkai": "I'm using phpseclib in a CLI app. This CLI app could be used anywhere, so there is not really \"timezone\" for this CLI app, it's also not a factor to this app as time is not used anywhere. It would be whatever the user wants it to be. Using phpinfo() in a library is a bit of weird thing itself and I didn't expect it.\n. The cli app is distributable. Don't really want to make it harder to install, especially when its unrelated to the functioning of the app.\n. ",
    "dymorphin": "```\n$this->ssh->write(\"sudo -i\\n\");\n$out = $this->SSHRead('/.[P|p]assword./', 1);\nif (preg_match('/.[P|p]assword./', $out))\n    $this->ssh->write($pass . \"\\n\");\nelse\n {\n     // $_SESSION['uprompt'] = $_SESSION['rprompt'] = '';\n     exit('PanelCommon->GoSUDO: Unable to get sudo password prompt: ' . $out);\n}\n```\nUse sudo -i ... doing sudo su is resundant as su means go super user as is sudo... use -i in inheriate environment of sudoing user...\n. I left out my SSHRead which is essential.  You should capture the user prompts.. because regex is not exact in determining where to capture the output of the ssh->exec() ...\n```\nfinal private function SSHRead($in, $regex = 0, $cleanoutput = 0)\n    {\n        $s_time = microtime(1);\n        $out = ($regex) ? $this->ssh->read($in, NET_SSH2_READ_REGEX) : $this->ssh->read($in);\n        $time = substr(microtime(1)-$s_time, 0, 4);\n    if ($out)\n    {\n        $fout = \"$time: $in: $out\\n\";\n        file_put_contents(PANEL_BASE_PATH . '/server/logs/timeouts' . $_SESSION['host'], $fout, FILE_APPEND | LOCK_EX);\n\n        $fout = \"ssh->read() timed out\\n\";\n        if ($this->ssh->isTimeout())\n            file_put_contents(PANEL_BASE_PATH . '/server/logs/timeouts' . $_SESSION['host'], $fout, FILE_APPEND | LOCK_EX);\n    }\n\n    return ($cleanoutput) ? $this->SSHClean($out) : $out;\n}\n\n```\n. ",
    "michael-dev": "use loadSPKAC an prepare the input appropiately.\n. this was generated by using the keygen tag\n. Looking on  the RFC again, I found some more places that need this change too.\n. ",
    "tad3j": "@bantu Thanks for your response and suggestion. As you said the solution was to register an error handler, where I can throw my own exceptions, and it works. In case anyone else will wonder the same, here it's how it's done:\nset_error_handler(function($errno, $errstr, $errfile, $errline) {\n            throw new Exception($errstr);\n        },E_USER_NOTICE);\nThanks again!\n. ",
    "alexandresalome": "Errors should generate exceptions, you should feel bad to not do it. I'll throw your library into a fire and pray to god to reason you.\n. ",
    "Adidi": "Update:\nvery strange thing: only when I add define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); the upload is working (with the log prints on the screen) \nany other combination my code insert to infinite loop trying to upload the file again and again till the server dies:\nmy code is very simple:\n```\n$sftp = new Net_SFTP($server);\nif (!$sftp->login($user, $password_param)) {\n            throw new Exception('can\\'t connect');\n        }\n$sftp->put('/server/path/to/zip/file.zip','c:/local/path/to/zip/file.zip',NET_SFTP_LOCAL_FILE);\n```\nI am using windows 7 64bit and trying to uplaod to centos 6.3 server - \nlocal server - nginx - php 5.5.5\nAs i said only adding define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); at the top of my code make things work fine - other log consts does not work either\n. I am using 0.3.6 - how do I download latest GIT version ? \nAccording to the log - I can't make NET_SSH2_LOG_COMPLEX because then the server is stuck in that infinite loop - only NET_SFTP_LOG_REALTIME make the code complete - and this log is very very long (It uploaded 7MB zip file) \n. I have downloaded latest version from github and still the same bug: only when adding define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); the put upload works as expected - otherwise I am getting infinite loop till the server crush.\n. Nope - The script is not running unless I put define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); in the code above.\nIt is very easy to check - a big zip file (over 1MB) under windows that you try to sftp put...\n. First of all - no need to be snappish and condescending - I am also trying just to help.\nTo the issue:\nIf i put what you said \ndefine('NET_SSH2_LOG_REALTIME_FILE', true);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', '/path/to/log.txt'\nI am getting  Notice: Constant NET_SSH2_LOG_REALTIME_FILE already defined in\nI have tried several ways to define this log path and I couldn't - no log file is created ever.\nThe only thing that works is define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME); and the log of my upload (which was also very slow) is in: http://web-dev.idomoo.com/otf/sq/log.txt \nIf you need for me to do or try something else I would be happy to...\nMy full code again:\n```\n define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME);\n$sftp = new Net_SFTP('myserver.com');\n$password = new Crypt_RSA();\n$password->loadKey(file_get_contents('C:/WT-NMP/WWW/some.ppk')); \nif (!$sftp->login('ec2-user', $password)) {\n    throw new Exception('can\\'t connect');\n}\n\n$sftp->put('/path/to/test.zip','C:\\WT-NMP\\WWW\\zip.zip',NET_SFTP_LOCAL_FILE);\n\n```\nI see my zip is uploaded to the server (very slow) but after it finishing it uploaded it again - unless I put the define('NET_SFTP_LOGGING',NET_SFTP_LOG_REALTIME);  like in my example.\n. This is my spec:\nServer:\nCentOS release 6.3 (Final)\nLinux 2.6.32-279.19.1.el6.x86_64 x86_64\nPHP: \nPHP 5.5.9 (cli) (built: Feb  7 2014 14:31:25)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\n    with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies\n. Got it.\nThis is my phpinfo local:\nhttp://web-dev.idomoo.com/otf/sq/phpinfo_local.html\nand this is the requested log:\nhttp://web-dev.idomoo.com/otf/sq/log_2.txt\nThanks :)\n. ",
    "pixall": "Hi folks,\nI have exactly the same problem as reported here, but in my case I'm not using SFTP but SCP... Uploading of 6MB file always fails, but if I enable realtime logging, it always works. I am using phpseclib on Linux. I reported the issue here https://github.com/phpseclib/phpseclib/issues/502 .. Probably one thing is causing these problems witk both SFTP put and SCP put...\n. Thank you very much for reply.. \nI'm using phplibsec from current git trunk, downloaded ~5 days ago.. \nI enabled logging as you suggested, and placed the log here http://www.5ginternet.sk/tmp/getlog.txt  ... I noticed a lot of empty (null filled) packets at the end of communication...  I also published a binary file file which I was uploading while creating the debug - http://www.5ginternet.sk/tmp/XM-v5.5.6.build17762.bin ..   \nIf it helps, I can give you ssh access to the device, and you can try it yourself in the very similar conditions (same file, same ssh server on same device)...\n. Absolut perfect... now it works flawlessly. Thank you very much Jim!!! \n. ",
    "andrewsuzuki": "Sorry, I searched earlier but only just found this issue:\nhttps://github.com/phpseclib/phpseclib/pull/217\nIt's not a fun workaround to replace phpseclib with his fork, and it's somewhat of a problem because since this is only for package development, this burden is then cascaded to other developers. Hrm.\n. ",
    "scrutinizer-notifier": "A new inspection was created.\n. The inspection completed: 16 new issues, 1 updated code elements\n. The inspection completed: 1 new issues\n. The inspection completed: 4 new issues\n. The inspection completed: No new issues\n. The inspection completed: No new issues\n. The inspection completed: 3 new issues\n. The inspection completed: No new issues\n. The inspection completed: 16 new issues, 1 updated code elements\n. A new inspection was created.\n. The inspection completed: 126 new issues, 74 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 63 new issues, 6 updated code elements\n. A new inspection was created.\n. The inspection completed: 62 new issues, 6 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 66 new issues, 7 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 75 new issues, 7 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 286 new issues, 8 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 237 new issues, 107 updated code elements\n. The inspection completed: 218 new issues, 16 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 257 new issues, 16 updated code elements\n. The inspection completed: 257 new issues, 18 updated code elements\n. The inspection completed: 257 new issues, 16 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 256 new issues, 19 updated code elements\n. A new inspection was created.\n. The inspection completed: 254 new issues, 18 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 266 new issues, 19 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 269 new issues, 19 updated code elements\n. The inspection completed: 269 new issues, 19 updated code elements\n. The inspection completed: 269 new issues, 19 updated code elements\n. The inspection completed: 269 new issues, 19 updated code elements\n. A new inspection was created.\n. The inspection completed: 266 new issues, 19 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 266 new issues, 19 updated code elements\n. A new inspection was created.\n. The inspection completed: 273 new issues, 23 updated code elements\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 1014 Issues, 13 Patches\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 1014 Issues, 13 Patches\n. The inspection completed: 1014 Issues, 13 Patches\n. The inspection completed: 1011 Issues, 13 Patches\n. The inspection completed: 858 Issues, 12 Patches\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 944 Issues, 14 Patches\n. A new inspection was created.\n. The inspection completed: 944 Issues, 14 Patches\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 831 Issues, 20 Patches\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 943 Issues, 14 Patches\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 784 Issues, 13 Patches\n. The inspection completed: 943 Issues, 14 Patches\n. A new inspection was created.\n. The inspection completed: 784 Issues, 13 Patches\n. A new inspection was created.\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 797 Issues, 14 Patches\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 684 Issues, 13 Patches\n. The inspection completed: 784 Issues, 13 Patches\n. The inspection completed: 939 Issues, 14 Patches\n. A new inspection was created.\n. The inspection completed: No issues found\n. The inspection completed: 684 Issues, 13 Patches\n. The inspection completed: 684 Issues, 13 Patches\n. A new inspection was created.\n. The inspection completed: 797 Issues, 14 Patches\n. The inspection completed: 688 Issues, 12 Patches\n. The inspection completed: 686 Issues, 12 Patches\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: 693 Issues, 12 Patches\n. A new inspection was created.\n. A new inspection was created.\n. The inspection completed: No issues found\n. The inspection completed: No issues found\n. A new inspection was created.\n. The inspection completed: No issues found\n. The inspection completed: No issues found\n. A new inspection was created.\n. The inspection completed: 797 Issues, 14 Patches\n. The inspection completed: No issues found\n. The inspection completed: 797 Issues, 14 Patches\n. A new inspection was created.\n. The inspection completed: 693 Issues, 12 Patches\n. A new inspection was created.\n. The inspection completed: 839 Issues, 20 Patches\n. The inspection completed: No issues found\n. A new inspection was created.\n. ",
    "Crossy": "I have had the same problem as @sobit. I used phpseclib0.3.6 from SourceForge. I am using PHP 5.4 from XAMPP on Windows. I fixed it by reverting back to phpseclib0.3.5. I think the issue is something to do with the WINDOW ADJUST from the server. Here are my logs:\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:53:53:48:44:0d:0a        SSH-2.0-SSHD..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.148, network: 0.045s)\n00000000  02:39:b7:bd:af:6f:90:69:4e:e9:9d:99:44:2f:d8:07  .9...o.iN...D/..\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31:2c  an-group14-sha1,\n00000030  64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67  diffie-hellman-g\n00000040  72:6f:75:70:31:2d:73:68:61:31:00:00:00:07:73:73  roup1-sha1....ss\n00000050  68:2d:72:73:61:00:00:00:36:62:6c:6f:77:66:69:73  h-rsa...6blowfis\n00000060  68:2d:63:62:63:2c:61:65:73:31:32:38:2d:63:62:63  h-cbc,aes128-cbc\n00000070  2c:33:64:65:73:2d:63:62:63:2c:61:65:73:31:39:32  ,3des-cbc,aes192\n00000080  2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:00  -cbc,aes256-cbc.\n00000090  00:00:36:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c  ..6blowfish-cbc,\n000000a0  61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73:2d  aes128-cbc,3des-\n000000b0  63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61  cbc,aes192-cbc,a\n000000c0  65:73:32:35:36:2d:63:62:63:00:00:00:12:68:6d:61  es256-cbc....hma\n000000d0  63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:00  c-sha1,hmac-md5.\n000000e0  00:00:12:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  ...hmac-sha1,hma\n000000f0  63:2d:6d:64:35:00:00:00:09:6e:6f:6e:65:2c:7a:6c  c-md5....none,zl\n00000100  69:62:00:00:00:09:6e:6f:6e:65:2c:7a:6c:69:62:00  ib....none,zlib.\n00000110  00:00:00:00:00:00:00:00:00:00:00:00              ............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.07, network: 0s)\n00000000  cd:54:b4:b9:02:d2:f7:e2:e6:9e:77:48:d6:74:c9:02  .T........wH.t..\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  f6:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  .arcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c:61  our128,arcfour,a\n00000080  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n00000090  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000a0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000b0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n000000c0  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n000000d0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000e0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n000000f0  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000100  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000110  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000120  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000130  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000140  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000150  62:63:2c:6e:6f:6e:65:00:00:00:f6:61:72:63:66:6f  bc,none....arcfo\n00000160  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n00000170  2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38:2d  ,arcfour,aes128-\n00000180  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n00000190  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n000001a0  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n000001b0  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n000001c0  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n000001d0  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n000001e0  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1\n000001f0  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19\n00000200  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256\n00000210  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc\n00000220  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl\n00000230  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-\n00000240  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non\n00000250  65:00:00:00:17:68:6d:61:63:2d:73:68:61:31:2c:68  e....hmac-sha1,h\n00000260  6d:61:63:2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:17  mac-md5,none....\n00000270  68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d  hmac-sha1,hmac-m\n00000280  64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00  d5,none....none.\n00000290  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n000002a0  00:00:00:00                                      ....\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.5291, network: 0s)\n00000000  00:00:00:80:05:79:e6:a8:cc:11:db:98:1a:72:fd:c3  .....y.......r..\n00000010  e5:30:a7:4b:69:53:01:27:a0:84:f0:26:2c:f5:c9:46  .0.KiS.'...&,..F\n00000020  45:f9:5d:f4:81:89:f8:0f:c8:79:36:56:e5:76:49:a6  E.]......y6V.vI.\n00000030  3d:f5:2b:bb:08:d5:d1:ea:c6:67:6b:fb:f2:1a:61:d7  =.+......gk...a.\n00000040  d8:0f:92:63:1a:e2:95:78:c0:3b:fc:8d:08:3e:91:1a  ...c...x.;...>..\n00000050  78:3c:e8:60:ca:4e:b0:4d:66:f6:d6:02:95:1a:20:6d  x..`.N.Mf..... m\n00000060  04:ef:62:ce:85:e4:10:e4:cc:1f:7d:ad:f0:d7:2c:01  ..b.......}...,.\n00000070  99:c1:e7:68:30:0a:d0:d4:c7:43:52:1c:c9:77:aa:16  ...h0....CR..w..\n00000080  3e:43:05:96                                      >C..\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.223, network: 0.207s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:85:ac:0a:d3:ab  ................\n00000020  50:72:3b:e6:80:08:50:39:c9:2d:eb:49:e7:f6:8e:06  Pr;...P9.-.I....\n00000030  47:e5:cc:6c:d9:0d:3a:6a:71:12:60:c9:bb:0d:11:80  G..l..:jq......\n00000040  44:21:94:e5:a2:91:10:2a:55:c1:59:70:3d:a1:a3:6c  D!.....*U.Yp=..l\n00000050  68:40:14:bf:bc:a6:3b:1a:18:d0:92:4b:59:9b:66:4c  h@....;....KY.fL\n00000060  16:6b:a9:5a:3d:bf:c3:34:cf:03:44:58:1d:0f:5b:a5  .k.Z=..4..DX..[.\n00000070  99:b2:34:ba:42:6f:2f:ee:8a:6d:a1:68:75:a7:d0:7a  ..4.Bo/..m.hu..z\n00000080  22:b6:d5:f3:68:67:d2:3c:c0:53:b4:fd:6d:c1:a6:a1  \"...hg...S..m...\n00000090  45:5e:70:88:f3:49:8c:1b:9d:99:87:b7:3e:2d:c9:6a  E^p..I......>-.j\n000000a0  72:7c:b0:57:f8:80:82:26:55:03:23:4a:60:54:e8:4d  r|.W...&U.#JT.M\n000000b0  19:84:6e:7a:7e:12:53:fe:fb:5a:af:58:c8:36:c2:5c  ..nz~.S..Z.X.6.\\\n000000c0  a6:f0:c9:66:83:d9:0b:47:c5:ea:9b:bc:41:69:25:49  ...f...G....Ai%I\n000000d0  b0:b5:36:a9:7e:38:24:a7:27:40:2f:47:e4:c5:41:bf  ..6.~8$.'@/G..A.\n000000e0  57:50:16:4c:b0:41:dc:65:fa:ad:6d:00:65:b1:ba:32  WP.L.A.e..m.e..2\n000000f0  50:f0:32:42:e2:46:00:e3:ef:54:53:f7:86:58:35:9f  P.2B.F...TS..X5.\n00000100  d8:b3:d3:91:18:04:cf:5f:bd:56:bb:53:a3:4c:7b:5c  ......._.V.S.L{\\\n00000110  cf:00:ed:50:1a:34:e9:9e:ce:7e:7b:00:00:00:80:3d  ...P.4...~{....=\n00000120  64:a0:54:c9:e2:f8:97:3a:2c:56:f9:f1:d1:d5:30:6b  d.T....:,V....0k\n00000130  1f:5b:7f:2b:fd:0e:13:c6:11:ff:f5:f9:90:f8:fc:79  .[.+...........y\n00000140  09:ce:b3:68:5e:f5:5b:a1:87:26:36:e3:97:28:b1:cf  ...h^.[..&6..(..\n00000150  79:06:59:34:f3:9d:84:15:7c:1a:1f:8c:08:3d:62:95  y.Y4....|....=b.\n00000160  9d:a0:ae:e1:3d:fc:78:8c:8a:f9:d9:7c:d7:59:3c:16  ....=.x....|.Y..\n00000170  85:d7:fd:31:fb:ab:c5:fe:10:66:ad:9c:9b:01:3e:98  ...1.....f....>.\n00000180  7d:96:8b:7e:e9:61:56:34:20:34:36:45:27:fc:8b:03  }..~.aV4 46E'...\n00000190  44:fd:22:6e:d2:56:e4:ec:07:5d:56:a4:4d:ba:97:00  D.\"n.V...]V.M...\n000001a0  00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00  .......ssh-rsa..\n000001b0  01:00:6b:c1:a6:92:9b:01:c4:b6:a0:c1:dc:44:0e:e2  ..k..........D..\n000001c0  25:45:e5:29:08:68:70:91:bf:49:d0:24:fa:bf:64:f8  %E.).hp..I.$..d.\n000001d0  03:03:3e:46:0f:fc:01:fb:36:fe:4b:ff:f7:4e:db:e8  ..>F....6.K..N..\n000001e0  d8:f1:77:36:27:a5:ca:2d:aa:a5:68:91:95:9c:88:08  ..w6'..-..h.....\n000001f0  3f:cf:6d:0d:db:66:29:a1:15:06:cc:c3:df:02:8f:55  ?.m..f)........U\n00000200  e7:3b:c2:57:31:35:a4:aa:38:45:33:77:35:8f:ce:1d  .;.W15..8E3w5...\n00000210  24:c6:13:81:81:e8:31:21:76:51:1a:c8:78:cd:1c:bc  $.....1!vQ..x...\n00000220  81:7b:00:b0:ac:ce:97:7b:4b:50:fe:b8:b9:16:21:7e  .{.....{KP....!~\n00000230  78:99:55:b7:43:83:3a:81:85:a9:b7:1c:f7:05:b4:a7  x.U.C.:.........\n00000240  69:dd:fe:ad:24:12:d2:10:ce:7e:59:0f:47:e8:76:49  i...$....~Y.G.vI\n00000250  4a:b2:70:0b:e2:a7:c8:d9:34:f3:9f:61:d2:78:f4:d9  J.p.....4..a.x..\n00000260  ba:34:00:34:fe:4d:be:98:f3:f1:2f:a3:17:22:6e:7e  .4.4.M..../..\"n~\n00000270  92:3a:69:90:e7:cd:21:e6:76:8c:56:8a:19:f0:f5:60  .:i...!.v.V....`\n00000280  01:7e:84:62:48:55:e5:94:9b:15:ab:2d:4e:ad:c8:ca  .~.bHU.....-N...\n00000290  c5:1f:a6:a5:07:21:db:35:5d:2f:6f:4c:ba:6c:aa:e5  .....!.5]/oL.l..\n000002a0  ce:d9:0b:d0:41:f6:9f:5b:d5:36:f4:25:f7:48:0f:0d  ....A..[.6.%.H..\n000002b0  74:44                                            tD\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.5551, network: 0.001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.041, network: 0.001s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.146, network: 0.143s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.006, network: 0.001s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.305, network: 0.293s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.006, network: 0.001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:01:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.044, network: 0.033s)\n00000000  00:00:01:00:00:00:00:00:00:00:00:00:00:00:84:d0  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.005, network: 0s)\n00000000  00:00:00:00:00:00:00:09:73:75:62:73:79:73:74:65  ........subsyste\n00000010  6d:01:00:00:00:04:73:66:74:70                    m.....sftp\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.125, network: 0.118s)\n00000000  00:00:01:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.099, network: 0.094s)\n00000000  00:00:01:00:00:02:00:00                          ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.008, network: 0.001s)\n00000000  00:00:00:00:00:00:84:cc:00:00:00:05:01:00:00:00  ................\n00000010  03                                               .\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.009, network: 0s)\n00000000  00:00:00:00:00:00:00:00                          ........\n<- NET_SSH2_MSG_DISCONNECT (since last: 0.034, network: 0.03s)\n00000000  00:00:00:02:00:00:00:07:46:61:69:6c:75:72:65:00  ........Failure.\n00000010  00:00:00                                         ...\n```\n. Code to used to test:\n```\nset_include_path(get_include_path() . PATH_SEPARATOR . 'phpseclib');\ninclude 'Net/SFTP.php';\ndefine('NET_SSH2_LOGGING', 3);\n$sftp = new Net_SFTP('server');\nif (!$sftp->login('user', 'password')) {\n    //file_put_contents('logfile.log', $sftp->getLog());\n    die('Login failed');\n}\n$sftp->get($remoteDir . $file, $localDir . $file);\n```\nOk here are the 0.3.5 logs for the same code. I can't give you access to the server.\n``` <-\n00000000  53:53:48:2d:32:2e:30:2d:53:53:48:44:0d:0a        SSH-2.0-SSHD..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.201, network: 0.054s)\n00000000  14:9a:22:77:3d:3e:8a:c5:77:26:6f:2b:21:b8:ad:ab  ..\"w=>..w&o+!...\n00000010  4c:00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c  L...6diffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n00000030  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n00000040  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:07:73  group1-sha1....s\n00000050  73:68:2d:72:73:61:00:00:00:36:62:6c:6f:77:66:69  sh-rsa...6blowfi\n00000060  73:68:2d:63:62:63:2c:61:65:73:31:32:38:2d:63:62  sh-cbc,aes128-cb\n00000070  63:2c:33:64:65:73:2d:63:62:63:2c:61:65:73:31:39  c,3des-cbc,aes19\n00000080  32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63  2-cbc,aes256-cbc\n00000090  00:00:00:36:62:6c:6f:77:66:69:73:68:2d:63:62:63  ...6blowfish-cbc\n000000a0  2c:61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73  ,aes128-cbc,3des\n000000b0  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n000000c0  61:65:73:32:35:36:2d:63:62:63:00:00:00:12:68:6d  aes256-cbc....hm\n000000d0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000000e0  00:00:00:12:68:6d:61:63:2d:73:68:61:31:2c:68:6d  ....hmac-sha1,hm\n000000f0  61:63:2d:6d:64:35:00:00:00:09:6e:6f:6e:65:2c:7a  ac-md5....none,z\n00000100  6c:69:62:00:00:00:09:6e:6f:6e:65:2c:7a:6c:69:62  lib....none,zlib\n00000110  00:00:00:00:00:00:00:00:00:00:00:00:00           .............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.051, network: 0s)\n00000000  14:14:ae:13:39:e9:f1:51:c3:9e:35:4d:0d:11:20:07  ....9..Q..5M.. .\n00000010  cc:00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c  ....6diffie-hell\n00000020  6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c  man-group1-sha1,\n00000030  64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67  diffie-hellman-g\n00000040  72:6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73  roup14-sha1....s\n00000050  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n00000060  00:f6:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63  ..arcfour256,arc\n00000070  66:6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c  four128,arcfour,\n00000080  61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39  aes128-ctr,aes19\n00000090  32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72  2-ctr,aes256-ctr\n000000a0  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:74:77  ,blowfish-ctr,tw\n000000b0  6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f  ofish128-ctr,two\n000000c0  66:69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66  fish192-ctr,twof\n000000d0  69:73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32  ish256-ctr,aes12\n000000e0  38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63  8-cbc,aes192-cbc\n000000f0  2c:61:65:73:32:35:36:2d:63:62:63:2c:62:6c:6f:77  ,aes256-cbc,blow\n00000100  66:69:73:68:2d:63:62:63:2c:74:77:6f:66:69:73:68  fish-cbc,twofish\n00000110  31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  128-cbc,twofish1\n00000120  39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  92-cbc,twofish25\n00000130  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62  6-cbc,twofish-cb\n00000140  63:2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d  c,3des-ctr,3des-\n00000150  63:62:63:2c:6e:6f:6e:65:00:00:00:f6:61:72:63:66  cbc,none....arcf\n00000160  6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32  our256,arcfour12\n00000170  38:2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38  8,arcfour,aes128\n00000180  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n00000190  61:65:73:32:35:36:2d:63:74:72:2c:62:6c:6f:77:66  aes256-ctr,blowf\n000001a0  69:73:68:2d:63:74:72:2c:74:77:6f:66:69:73:68:31  ish-ctr,twofish1\n000001b0  32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:39  28-ctr,twofish19\n000001c0  32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32:35:36  2-ctr,twofish256\n000001d0  2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62:63:2c  -ctr,aes128-cbc,\n000001e0  61:65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35  aes192-cbc,aes25\n000001f0  36:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63  6-cbc,blowfish-c\n00000200  62:63:2c:74:77:6f:66:69:73:68:31:32:38:2d:63:62  bc,twofish128-cb\n00000210  63:2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63  c,twofish192-cbc\n00000220  2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62:63:2c  ,twofish256-cbc,\n00000230  74:77:6f:66:69:73:68:2d:63:62:63:2c:33:64:65:73  twofish-cbc,3des\n00000240  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f  -ctr,3des-cbc,no\n00000250  6e:65:00:00:00:17:68:6d:61:63:2d:73:68:61:31:2c  ne....hmac-sha1,\n00000260  68:6d:61:63:2d:6d:64:35:2c:6e:6f:6e:65:00:00:00  hmac-md5,none...\n00000270  17:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d  .hmac-sha1,hmac-\n00000280  6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65  md5,none....none\n00000290  00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00  ....none........\n000002a0  00:00:00:00:00                                   .....\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.5651, network: 0s)\n00000000  1e:00:00:00:81:00:85:2c:2b:8f:fc:df:8c:cf:27:3f  .......,+.....'?\n00000010  bb:b2:c6:7b:6a:16:b7:f1:ab:6e:aa:b8:da:f8:39:84  ...{j....n....9.\n00000020  03:fe:5e:51:ab:b2:10:26:f0:9a:bf:05:76:f2:b2:b2  ..^Q...&....v...\n00000030  03:4e:7f:a6:bf:47:06:96:72:f8:33:ab:08:43:43:96  .N...G..r.3..CC.\n00000040  9e:d7:e0:97:0c:17:fb:16:db:f0:75:fe:53:94:fc:f1  ..........u.S...\n00000050  87:9e:e7:ab:7e:11:b7:9c:d1:de:3c:7d:7f:c0:db:66  ....~......}...f\n00000060  10:42:38:da:e6:cb:b0:52:38:91:0b:13:07:a4:6d:58  .B8....R8.....mX\n00000070  e4:02:b7:35:1f:ca:fe:f2:a9:ac:70:22:62:76:ad:9c  ...5......p\"bv..\n00000080  fd:d7:5e:29:a1:c2                                ..^)..\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.242, network: 0.222s)\n00000000  1f:00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61  .........ssh-rsa\n00000010  00:00:00:03:01:00:01:00:00:01:01:00:85:ac:0a:d3  ................\n00000020  ab:50:72:3b:e6:80:08:50:39:c9:2d:eb:49:e7:f6:8e  .Pr;...P9.-.I...\n00000030  06:47:e5:cc:6c:d9:0d:3a:6a:71:12:60:c9:bb:0d:11  .G..l..:jq.....\n00000040  80:44:21:94:e5:a2:91:10:2a:55:c1:59:70:3d:a1:a3  .D!.....*U.Yp=..\n00000050  6c:68:40:14:bf:bc:a6:3b:1a:18:d0:92:4b:59:9b:66  lh@....;....KY.f\n00000060  4c:16:6b:a9:5a:3d:bf:c3:34:cf:03:44:58:1d:0f:5b  L.k.Z=..4..DX..[\n00000070  a5:99:b2:34:ba:42:6f:2f:ee:8a:6d:a1:68:75:a7:d0  ...4.Bo/..m.hu..\n00000080  7a:22:b6:d5:f3:68:67:d2:3c:c0:53:b4:fd:6d:c1:a6  z\"...hg...S..m..\n00000090  a1:45:5e:70:88:f3:49:8c:1b:9d:99:87:b7:3e:2d:c9  .E^p..I......>-.\n000000a0  6a:72:7c:b0:57:f8:80:82:26:55:03:23:4a:60:54:e8  jr|.W...&U.#JT.\n000000b0  4d:19:84:6e:7a:7e:12:53:fe:fb:5a:af:58:c8:36:c2  M..nz~.S..Z.X.6.\n000000c0  5c:a6:f0:c9:66:83:d9:0b:47:c5:ea:9b:bc:41:69:25  ...f...G....Ai%\n000000d0  49:b0:b5:36:a9:7e:38:24:a7:27:40:2f:47:e4:c5:41  I..6.~8$.'@/G..A\n000000e0  bf:57:50:16:4c:b0:41:dc:65:fa:ad:6d:00:65:b1:ba  .WP.L.A.e..m.e..\n000000f0  32:50:f0:32:42:e2:46:00:e3:ef:54:53:f7:86:58:35  2P.2B.F...TS..X5\n00000100  9f:d8:b3:d3:91:18:04:cf:5f:bd:56:bb:53:a3:4c:7b  .........V.S.L{\n00000110  5c:cf:00:ed:50:1a:34:e9:9e:ce:7e:7b:00:00:00:80  ...P.4...~{....\n00000120  50:6e:ab:fc:87:63:b0:4b:17:d5:c1:f4:35:d8:6b:74  Pn...c.K....5.kt\n00000130  97:2a:c1:51:05:c0:21:02:d8:db:09:76:6c:ed:ae:f7  ..Q..!....vl...\n00000140  51:26:d5:be:2c:0c:03:a0:f9:03:53:ec:11:85:36:2d  Q&..,.....S...6-\n00000150  93:c3:94:d9:6e:0b:c5:34:69:31:ca:63:f2:86:db:a5  ....n..4i1.c....\n00000160  f5:ef:26:36:b7:e0:90:a6:80:95:da:b3:14:71:1f:44  ..&6.........q.D\n00000170  19:af:1c:4e:75:41:2c:0c:76:f7:37:53:db:d0:25:dc  ...NuA,.v.7S..%.\n00000180  bc:13:85:02:2c:78:2a:28:e1:52:e4:94:9b:85:69:ca  ....,x(.R....i.\n00000190  08:9f:f4:18:20:4e:ba:39:7d:fe:f2:13:97:6b:e7:34  .... N.9}....k.4\n000001a0  00:00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n000001b0  00:01:00:5a:e1:76:b0:d6:08:b2:39:54:24:59:f8:6b  ...Z.v....9T$Y.k\n000001c0  4b:85:5b:50:d1:b9:17:fb:f8:d6:4a:c6:ca:b3:74:b5  K.[P......J...t.\n000001d0  87:f5:b0:b9:71:5e:a5:2f:5a:0c:91:3f:a9:15:0f:8e  ....q^./Z..?....\n000001e0  d4:2f:8c:3a:8e:7e:90:86:96:87:81:20:ac:c7:d3:b9  ./.:.~..... ....\n000001f0  90:29:c9:19:2c:91:fd:43:25:8f:14:d2:07:91:9b:6e  .)..,..C%......n\n00000200  5f:5d:f3:aa:c1:13:32:8e:ca:38:09:64:2c:74:06:33  ]....2..8.d,t.3\n00000210  c7:f0:e9:63:1c:99:fb:03:27:22:74:4f:62:db:cd:f9  ...c....'\"tOb...\n00000220  9b:f1:84:64:22:87:a4:bf:7c:70:97:04:88:72:6b:3f  ...d\"...|p...rk?\n00000230  07:10:90:c8:9b:ea:4d:f6:f0:89:32:ff:79:0a:77:e6  ......M...2.y.w.\n00000240  81:9d:62:b2:9c:7d:0c:0e:5d:14:fa:63:12:b1:f8:a6  ..b..}..]..c....\n00000250  12:dd:80:d9:b7:da:39:fc:05:a9:f7:3d:76:02:b2:54  ......9....=v..T\n00000260  8b:0a:91:52:a2:51:2a:2b:c1:aa:2d:9b:48:a2:c8:57  ...R.Q*+..-.H..W\n00000270  0f:09:36:cf:9a:e4:34:99:c0:07:24:83:60:30:29:6d  ..6...4...$.`0)m\n00000280  e6:f0:4f:e2:9d:5f:70:24:1b:d9:be:2d:04:06:2b:f6  ..O.._p$...-..+.\n00000290  cb:e3:cd:47:c4:a5:1a:fa:76:e8:3e:37:5e:ab:d3:ca  ...G....v.>7^...\n000002a0  93:49:ad:89:8b:16:c4:7b:50:38:d9:ac:ac:02:87:ab  .I.....{P8......\n000002b0  f5:94:1f                                         ...\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.5821, network: 0s)\n00000000  15                                               .\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.001, network: 0s)\n00000000  15                                               .\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.028, network: 0s)\n00000000  05:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.26, network: 0.254s)\n00000000  06:00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74  .....ssh-useraut\n00000010  68                                               h\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.01, network: 0.001s)\n*username and password removed*\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.29, network: 0.268s)\n00000000  34                                               4\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.005, network: 0s)\n00000000  5a:00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:02  Z....session....\n00000010  7f:ff:ff:ff:00:00:40:00                          ......@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.054, network: 0.042s)\n00000000  5b:00:00:00:02:00:00:00:00:00:00:00:00:00:00:84  [...............\n00000010  d0                                               .\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.013, network: 0.001s)\n00000000  62:00:00:00:00:00:00:00:09:73:75:62:73:79:73:74  b........subsyst\n00000010  65:6d:01:00:00:00:04:73:66:74:70                 em.....sftp\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.189, network: 0.176s)\n00000000  63:00:00:00:02                                   c....\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.007, network: 0s)\n00000000  5e:00:00:00:00:00:00:00:09:00:00:00:05:01:00:00  ^...............\n00000010  00:03                                            ..\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.033, network: 0.021s)\n00000000  5d:00:00:00:02:00:02:00:00                       ]........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.023, network: 0.015s)\n00000000  5e:00:00:00:02:00:00:00:09:00:00:00:05:02:00:00  ^...............\n00000010  00:03                                            ..\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.016, network: 0.001s)\n00000000  5e:00:00:00:00:00:00:00:0e:00:00:00:0a:10:00:00  ^...............\n00000010  00:01:00:00:00:01:2e                             .......\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.229, network: 0.215s)\n00000000  5e:00:00:00:02:00:00:00:37:00:00:00:33:68:00:00  ^.......7...3h..\n00000010  00:01:00:00:00:01:00:00:00:01:2f:00:00:00:01:2f  ........../..../\n00000020  00:00:00:0f:00:00:00:00:00:03:50:00:00:00:01:14  ..........P.....\n00000030  00:00:a1:62:00:00:41:fd:53:96:ec:38:53:96:ec:38  ...b..A.S..8S..8\nSNIPPED\nThe rest of the log is just data\n```\nAlso the PHP error that appeared when using 0.3.6 was as follows:\n```\nNotice: Connection closed by server in C:\\xampp\\htdocs\\consol_datamart\\phpseclib\\Net\\SSH2.php on line 2825\nCall Stack\nTime    Memory  Function    Location\n1   0.0090  137136  {main}( )   ..\\index.php:0\n2   1.7532  2452472 Net_SFTP->login( )  ..\\index.php:21\n3   2.5653  2459392 Net_SFTP->_get_sftp_packet( )   ..\\SFTP.php:461\n4   2.5663  2459456 Net_SSH2->_get_channel_packet( )    ..\\SFTP.php:2098\n5   2.6133  2459816 user_error ( )  ..\\SSH2.php:2825\n( ! ) Notice: Expected SSH_FXP_VERSION in C:\\xampp\\htdocs\\consol_datamart\\phpseclib\\Net\\SFTP.php on line 463\nCall Stack\nTime    Memory  Function    Location\n1   0.0090  137136  {main}( )   ..\\index.php:0\n2   1.7532  2452472 Net_SFTP->login( )  ..\\index.php:21\n3   2.7013  2459840 user_error ( )  ..\\SFTP.php:463\n```\nHopefully this helps. I spent many hours staring at this code today trying to figure out what I had done wrong and if there was an easy fix for the code. Unfortunately I have little knowledge on the SFTP protocol so I didn't make much progress.\n. The latest git verison works like a charm. Thanks a lot @terrafrost, it seems you have solved the problem. Is it possible to get the sourceforge version updated as well to ensure no-one else has the same problem?\nI would also just like to say I really appreciate the fact that you and others support this code and release it for free to the internet. I feel like open source people don't get enough thanks for what they do.\n. Ah no problem. Hopefully it is an isolated issue. \nAshley Cross\nOn 11/06/2014, at 9:49 AM, \"terrafrost\" notifications@github.com wrote:\n\nThanks for the thanks!\nAs for making a new release... I'm not to keen on doing so. Among other things, if a release is made every time a bug is found and fixed then I'd likely spend more time making releases than I would be developing. Also, I do not get the impression this issue affects that many people.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "CJonline": "deployer.phar is executable archive... It's black box for me in this moment. I take instructions from here http://deployer.in/ . Maybe I can't connect because use IP but not domain name...?\nlibssh2 and php-pecl-ssh2 are installed, but I think it's unimportant  because everyting should be inluded in deployer.phar...\n. 1. They are in, although looks different from links.\n2. I should define it in my scrypt? Unfortunately it's give me same result.\nTrying make it with composer, but getting access denied.\n. With composer:\nhttps://dl.dropboxusercontent.com/u/45167183/NET_SSH2_LOGGING.txt\nAnd with deployer.phar:\nhttps://dl.dropboxusercontent.com/u/45167183/NET_SSH2_LOGGING_deployer.txt\nI'm trying to connect with rsa: define('password','rsa(~/.ssh/id_rsa)');\nBut get the same \"Can not login to server\"...\nAnd with composer message \"PHP Notice:  No compatible server to client encryption algorithms... on line 1108\" doesn't displaying...\n. Yes, I guess it's working but only trough composer for now, and I think password can't be \"defined\" it should be always in \"connect\". I'll check everything and tell about it deployers developers.\nMany Thanks for Help!\n. It wasn't installed... After installation all working! Thank You!\n. ",
    "mbfisher": "I'm having trouble testing some code which uses a library which uses phpseclib, specifically Crypt_RSA. When I try to instantiate multiple instances of an object in the library I get a Constant CRYPT_RANDOM_IS_WINDOWS already defined error. The error persists even when using PHPUnit's process isolation, but this commit fixes it. You make a very good point about redeclaring the function, I hadn't thought of that, but I'm not getting that error! It's confusing because Crypt_RSA uses include_once to pull in Random.\nI strongly suspect that the issue is somewhere in my code or the library I'm using, and that this PR is unnecessary!\nM\n. Sorry for the very very late reply!\nThat sounds like exactly the problem! I'm going to close this now, nothing to with phpspeclib. Thanks for the help!\nM\n. ",
    "gocom": "What you are using is just a sniffer. It checks for occurrence of predefined tokens without caring about the context or executing code. \nphpseclib as a wrapper (it provides abstraction), will obviously do calls to mhash, if that is what is supported in the used PHP version. It also tries to use hash() if that is available instead, and finally also packs in its own internal implementations. This is even outlined in the annotated source code and in the documentation.\nI don't even... Are you a bot, perhaps?\n. ",
    "Tyldar": "Hey, i've a added the instruction for echo logs but nothing appear..\n. Ok got some logs : \n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  36:2e:30:70:31:20:44:65:62:69:61:6e:2d:34:2b:64  6.0p1 Debian-4+d\n00000020  65:62:37:75:31:0d:0a                             eb7u1..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1278, network: 0.0408s)\n00000000  a9:a1:c3:90:a7:72:29:bc:75:35:fb:71:6d:fd:8b:12  .....r).u5.qm...\n00000010  00:00:00:b7:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  6,diffie-hellman\n00000080  2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67:65:2d  -group-exchange-\n00000090  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:1b:73  group1-sha1....s\n000000d0  73:68:2d:64:73:73:2c:65:63:64:73:61:2d:73:68:61  sh-dss,ecdsa-sha\n000000e0  32:2d:6e:69:73:74:70:32:35:36:00:00:00:9d:61:65  2-nistp256....ae\n000000f0  73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d  s128-ctr,aes192-\n00000100  63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61  ctr,aes256-ctr,a\n00000110  72:63:66:6f:75:72:32:35:36:2c:61:72:63:66:6f:75  rcfour256,arcfou\n00000120  72:31:32:38:2c:61:65:73:31:32:38:2d:63:62:63:2c  r128,aes128-cbc,\n00000130  33:64:65:73:2d:63:62:63:2c:62:6c:6f:77:66:69:73  3des-cbc,blowfis\n00000140  68:2d:63:62:63:2c:63:61:73:74:31:32:38:2d:63:62  h-cbc,cast128-cb\n00000150  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n00000160  32:35:36:2d:63:62:63:2c:61:72:63:66:6f:75:72:2c  256-cbc,arcfour,\n00000170  72:69:6a:6e:64:61:65:6c:2d:63:62:63:40:6c:79:73  rijndael-cbc@lys\n00000180  61:74:6f:72:2e:6c:69:75:2e:73:65:00:00:00:9d:61  ator.liu.se....a\n00000190  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000001a0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000001b0  61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66:6f  arcfour256,arcfo\n000001c0  75:72:31:32:38:2c:61:65:73:31:32:38:2d:63:62:63  ur128,aes128-cbc\n000001d0  2c:33:64:65:73:2d:63:62:63:2c:62:6c:6f:77:66:69  ,3des-cbc,blowfi\n000001e0  73:68:2d:63:62:63:2c:63:61:73:74:31:32:38:2d:63  sh-cbc,cast128-c\n000001f0  62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65  bc,aes192-cbc,ae\n00000200  73:32:35:36:2d:63:62:63:2c:61:72:63:66:6f:75:72  s256-cbc,arcfour\n00000210  2c:72:69:6a:6e:64:61:65:6c:2d:63:62:63:40:6c:79  ,rijndael-cbc@ly\n00000220  73:61:74:6f:72:2e:6c:69:75:2e:73:65:00:00:00:a7  sator.liu.se....\n00000230  68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68  hmac-md5,hmac-sh\n00000240  61:31:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e:73  a1,umac-64@opens\n00000250  73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:32  sh.com,hmac-sha2\n00000260  2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:32:2d:32  -256,hmac-sha2-2\n00000270  35:36:2d:39:36:2c:68:6d:61:63:2d:73:68:61:32:2d  56-96,hmac-sha2-\n00000280  35:31:32:2c:68:6d:61:63:2d:73:68:61:32:2d:35:31  512,hmac-sha2-51\n00000290  32:2d:39:36:2c:68:6d:61:63:2d:72:69:70:65:6d:64  2-96,hmac-ripemd\n000002a0  31:36:30:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31  160,hmac-ripemd1\n000002b0  36:30:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  60@openssh.com,h\n000002c0  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n000002d0  2d:6d:64:35:2d:39:36:00:00:00:a7:68:6d:61:63:2d  -md5-96....hmac-\n000002e0  6d:64:35:2c:68:6d:61:63:2d:73:68:61:31:2c:75:6d  md5,hmac-sha1,um\n000002f0  61:63:2d:36:34:40:6f:70:65:6e:73:73:68:2e:63:6f  ac-64@openssh.co\n00000300  6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c  m,hmac-sha2-256,\n00000310  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:39:36  hmac-sha2-256-96\n00000320  2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68  ,hmac-sha2-512,h\n00000330  6d:61:63:2d:73:68:61:32:2d:35:31:32:2d:39:36:2c  mac-sha2-512-96,\n00000340  68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30:2c:68  hmac-ripemd160,h\n00000350  6d:61:63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70  mac-ripemd160@op\n00000360  65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73  enssh.com,hmac-s\n00000370  68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35:2d  ha1-96,hmac-md5-\n00000380  39:36:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69:62:40  96....none,zlib@\n00000390  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:15:6e  openssh.com....n\n000003a0  6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68  one,zlib@openssh\n000003b0  2e:63:6f:6d:00:00:00:00:00:00:00:00:00:00:00:00  .com............\n000003c0  00                                               .\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0017, network: 0.0002s)\n00000000  ff:d8:f8:72:13:e9:92:55:89:be:c1:89:08:3a:7f:d4  ...r...U.....:..\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00:00  .none....none...\n00000070  30:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  0hmac-sha1-96,hm\n00000080  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n00000090  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:2c:6e:6f:6e  -96,hmac-md5,non\n000000a0  65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d:39  e...0hmac-sha1-9\n000000b0  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n000000c0  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n000000d0  2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00:00  ,none....none...\n000000e0  04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00:00:00  .none...........\n000000f0  00:00                                            ..\n-> NET_SSH2_MSG_DISCONNECT (since last: 0.0006, network: 0.0001s)\n00000000  00:00:00:03:00:00:00:00:00:00:00:00              ............\n. Ok solved i've added set_include_path('includes/classes/net/'); up to the SSH2/SFTP PHP Files.\nThanks for your help\n. ",
    "antonmedv": "Ugly hack :rage4:\n. Of course not working. Here more information:\n``` php\nrequire 'vendor/autoload.php';\n// I need to add next line to work:\nset_include_path(DIR . '/../../vendor/phpseclib/phpseclib/phpseclib/');\n$sftp = new \\Net_SFTP($config->getHost(), $config->getPort());\n// Try to connect to Amazon EC2 with pem file.\n$key = new \\Crypt_RSA();\n$key->loadKey(file_get_contents($config->getPemFile()));\n$sftp->login($config->getUser(), $key);\n//...\n```\n. I got this problem only with pem files. \nAlso i think it's really depends on machine configuration. I use php-osx.liip.ch on Mac OS X. And i have different include paths than you. \nWhy are you not using psr-4? It will solve all king of this errors. \n. I found why it was not working. My app sets different include_path:\n``` php\nrequire DIR . '/vendor/autoload.php';\n// If add this line i got a notice.\nset_include_path(DIR . '/');\n$sftp = new \\Net_SFTP('54.186.203.93');\n// Try to connect to Amazon EC2 with pem file.\n$key = new \\Crypt_RSA();\n$key->loadKey(file_get_contents($_SERVER['HOME'] . '/.ssh/aws-keys.pem'));\n$sftp->login('ec2-user', $key);\necho $sftp->exec('pwd');\n``\n. So, is it difficult to not be dependent oninclude_path`? \n. Yes, so waiting PSR-4.\n. Guys! You are doing great PR! A lot of people really waits for this PR :beer: :beers: \n. So great! When to wait release of PhpSecLib? :+1: \n. Do next commands:\ncomposer clear-cache\ncomposer require deployer/deployer:~3.0@dev\nGot error:\n```\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - deployer/deployer v3.0.0-beta.2 requires phpseclib/phpseclib 2.0.@dev -> no matching package found.\n    - deployer/deployer v3.0.0-beta.1 requires phpseclib/phpseclib 2.0.@dev -> no matching package found.\n    - deployer/deployer v3.0.0-beta requires phpseclib/phpseclib 2.0.*@dev -> no matching package found.\n    - Installation request for deployer/deployer ~3.0@dev -> satisfiable by deployer/deployer[v3.0.0-beta, v3.0.0-beta.1, v3.0.0-beta.2].\nPotential causes:\n - A typo in the package name\n - The package is not available in a stable-enough version according to your minimum-stability setting\n   see https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion for more details.\nRead http://getcomposer.org/doc/articles/troubleshooting.md for further common problems.\nInstallation failed, deleting ./composer.json.\n```\n. Got error, still:\nProblem 1\n    - deployer/deployer v3.0.0-beta.2 requires phpseclib/phpseclib 2.0.*@dev -> no matching package found.\n    - deployer/deployer v3.0.0-beta.1 requires phpseclib/phpseclib 2.0.*@dev -> no matching package found.\n    - deployer/deployer v3.0.0-beta requires phpseclib/phpseclib 2.0.*@dev -> no matching package found.\n    - Installation request for deployer/deployer ~3.0@dev -> satisfiable by deployer/deployer[v3.0.0-beta, v3.0.0-beta.1, v3.0.0-beta.2].\n. I'm requiring  phpseclib with @dev modifier: 2.0.*@dev.\n. Please release soon!\n. ",
    "mromero91": "Change \nphpseclib_resolve_include_path(file) to set_include_path(file)\nin file ssh2.php \n. ",
    "st2cs": "As i said, i didnt know sure if it was a bug.. and like i said.. it wasn't.. i've been  reading and reading, and the problem was the change of the os from Windows to *nix and the line break and return carriages.\nSo for everyone like me, that when putting a script from Windows machine to a *nix one, execute this code before the script:\nsed -i 's/\\r//' script_filename.sh in terminal\nor\n$sftp->exec(\"sed -i 's/\\r//' script_filename.sh\");\nThanks for the fast reply and thanks for your amazing project!\n;)\n. ",
    "liutec": "Sorry about that, I'm kind of a new contributor on github and I've used the web editor.\n. Hello, sorry for the late response. The ability to get and set the width is really useful for my project because this way I can either remove the \"hard\" word wraps from the output based on the maximum number of columns before pushing the content to the client or adjust them as needed. The height really does not matter but since I've added the ability to alter the width adding the height as well seemed logical.\n. ",
    "JayFayCake": "WHEN I DO /powertool pig (or any animal) 20 IT SAYS COMMAND NOT FOUND DO /HELP FOR COMMAND LIST HELP ME!!!!!!!!!!\n. ",
    "gallien": "Yes, it fixes the issue.\n. ",
    "paragonie-scott": "It's also side-channel resistant. :+1:\nDo you need help with this one?\n. In the same vein, have you considered using random_compat to polyfill random_bytes() from PHP 7?\n. > Remediating this particular variety of timing attacks in PHP is not really possible.\nSigh, you're right. I better tell @defuse that my solution is ineffective. :(\n. https://github.com/paragonie/constant_time_encoding uses pack() and unpack() for converting from characters to unsigned ints (and vice versa), but actually performs the encoding calculation in constant time.\n. > It looks like defuse/php-encryption is using OpenSSL and only OpenSSL\nIt was originally implemented in mcrypt (see https://github.com/defuse/php-encryption/releases/tag/v1.1). After a lot of discussion with @defuse I suggested switching to OpenSSL (because of concerns about mcrypt's design and abandonment) and drafted a pull request to do just that.\n\nInstead, an exception could be thrown in the constructor or some such.\n\nI see no problem with failing hard if this option is enabled. People might complain about the usability, but really if they need multibyte character support they should use the mb_* functions explicitly rather than enabling a dangerous and ill-advised configuration option anyway.\n(Can you tell I'm not a fan of the decision to support function overloading?)\n. In the master branch, you can use \\ParagonIE\\ConstantTime\\Binary for safeSubstr() and safeStrlen() instead of substr() and strlen(). But since this isn't a big concern, I'm closing this ticket.\n. 5.5 is reaching EOL soon; would it be wise to change direction to 5.6? :)\n. Also\nhttps://github.com/phpseclib/phpseclib/blob/0ba1a04c05de04fba9d09ae5b7b33b2399541dca/phpseclib/Crypt/Random.php#L73\nProbably should pass MCRYPT_DEV_URANDOM to mcrypt_create_iv() ;)\n. Sure. Want me to address both?\n. No. https://github.com/laravel/framework/blob/5.1/src/Illuminate/Encryption/McryptEncrypter.php#L189\nIf MCRYPT_DEV_URANDOM is defined it will always pass a constant that makes Windows safe.\n. It looks like you're using urandom on Linux correctly, and I don't think the constant matters on Windows. If you want to close it, feel free.\n. > It's just hard to have a super informed opinion since I have no idea what the deployment of either are like.\nI would strongly recommend not running anything less than 1.0.1 especially on PHP 7: https://github.com/jedisct1/libsodium-php/issues/58\nI've audited a couple applications that use libsodium and wrote Halite (a libsodium wrapper). My impression is that the install base is mostly going to be >= 1.0.1. Of course, sample selection bias is likely at play.\n. Okay, I'll send a superseding PR against 2.x once I've gotten enough independent review to feel confident about tagging 1.0.0.\n. By the way, we tagged v1.0 and v2.0: https://github.com/paragonie/constant_time_encoding/releases\n. OK, how does that look now?\n. I think the unit tests are failing because of composer.lock.\n. OK, I'm not sure why 5.5 is failing but 5.5.9 is passing, but I'm going to pause any tweaks for now.\n. > There is a typo in the e-mail address.\nHuh, I didn't even notice. Thanks.\n\nWould you be up for doing this for the master branch instead?\n\nSure, not a problem.\n. Safe travels. :)\n. > Do you know how Ed25519 compares to ECDSA?\nThe short answer is that it's more secure.\n\nOne question that I do not currently know the answer to is how much common code there'd be between ECDSA / Ed25519.\n\nPretty much zero. The NIST curves are Weierstrass curves, while Ed25519 is a Twisted Edwards curve. The formulas are different, with TE curves being easier to implement in constant-time. Additionally, thanks to the point compression scheme used by most (all?) Ed25519 implementations, you don't have to deal with invalid curve attacks. Ed25519 also uses deterministic nonces, so you'll never have to worry about leaking your secret key.\nOur recent article about automatic updates had a section on public key digital signature algorithms and their order of preference.\nRecommended for anyone curious in learning about these nuances: https://www.youtube.com/watch?v=l6jTFxQaUJA. > Well I still want to do ECDSA lol. Like for algorithm negotiation for SSH2. ECDSA may be supported whereas Ed25519 isn't.\nThat's fine. If possible, only support RFC 6979.. > it'd probably be a good idea to include a unit test that attempts to sign twice and makes sure that the result is different for each one; with RFC 6979 it would be but if k is random it shouldn't be\nOh, definitely. Please do that.\nRFC 6979 is a general recommendation. Given the presence of a CSPRNG we should be golden. Maybe something like this:\nphp\ntry {\n    $nonce = random_bytes(/* number necessary here */);\n} catch (Exception $ex) {\n    // Fallback to RFC 6979 \n}\n...but like you said, there will be bigger problems if that did happen. Might be better to just let the Exception bring down the script (fail closed).. Hey @terrafrost sodium_compat v1.0 is out now if you'd like to use our X25519 or Ed25519 implementations.\n\nParagonIE_Sodium_Compat::crypto_scalarmult() for ECDH over Curve25519\nParagonIE_Sodium_Compat::crypto_sign_detached() / ParagonIE_Sodium_Compat::crypto_sign_verify_detached() for Ed25519. > In GMP mode my implementation can create / verify a signature in 0.07s (sodium_compat does not appear to use gmp).\n\nThat's something I plan to support in the future, as an attempt to optimize my code.. > You're liable to be disappointed with BCMath's speed.\nThat's what I was afraid of. GMP seems viable, however.. This change is more correct than what was there previously, and might be easier to maintain in the future.\nWe may also want to add alternative logic for if (extension_loaded('sodium')) to use the new sodium_* API instead of \\Sodium\\*, but that's a \"sometime before 2018\" concern.. > I don't really see this as an issue.\nIt might not be, but how confident are you that phpseclib users wouldn't use this backwards and accidentally publish their private key?. Sorry to hear that. I didn't mean to put any time pressure on you with my comment above, just wanted to provide my feedback on this issue.\nI'm not aware of anyone misusing phpseclib in this way.. Since this is not in a namespace, I agree, but there's no harm in being explicit.\n. Good point. Shall I change it to ^1.4|2.0?\n. Not in PHP 5. I couldn't make Exception implement Throwable with random_compat\n. Ok, easily done.\n. ",
    "mcarbonneaux": "a first approch ?!\nhttps://github.com/fpoirotte/pssht/blob/master/src/ChaCha20.php \nhttps://github.com/fpoirotte/pssht/blob/master/src/Poly1305.php \n. her is a pure php deflate algorithm in php : http://www.phpconcept.net/pclzip i think no ?!!\nand her https://gist.github.com/chobie/6659137\n. some work have been done i think on this project :+1: \nhttps://github.com/fpoirotte/pssht\nthat can be reused...\n. i found it on also on github... \nhttps://github.com/MagicalTux/pinetd2\nwhen i've timle i'l go to read it to see if i can get some part of it to do pull for phpseclib !\n. ",
    "bweston92": "That would be great, a package I use from Laravel uses this and unfortunately I'm having to hard code an include to the full path. Let me know when it is fixed, thanks.\u2014\nSent from Mailbox for iPhone\nOn Mon, Jun 30, 2014 at 9:28 PM, Andreas Fischer notifications@github.com\nwrote:\n\n@terrafrost We might just want to release 0.3.7 soon. https://github.com/phpseclib/phpseclib/compare/0.3.6...master\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpseclib/phpseclib/issues/399#issuecomment-47582430\n. I'd rather use a release so I can rely on it, master could be anything. Thanks\u00a0\u2014\nSent from Mailbox for iPhone\n\nOn Thu, Jul 3, 2014 at 5:26 PM, terrafrost notifications@github.com\nwrote:\n\nIs there a reason master can't be used?\nThat said I don't have a problem doing a 0.3.7 release. I'll try to do it this weekend, time permitting.\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpseclib/phpseclib/issues/399#issuecomment-47952386\n. \n",
    "kirkhansen": "Ah, should have put the actual line that is offending. I installed phpseclib via composer with @stable. Here are the surrounding lines of code copied from VIM.  1842 is the line reported.\n1836         $response = $this->_get_binary_packet();\n1837         if ($response === false) {\n1838             user_error('Connection closed by server');\n1839             return false;\n1840         }\n1841\n1842         extract(unpack('Ctype', $this->_string_shift($response, 1)));\n1843\n1844         switch ($type) {\n1845             case NET_SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ: // in theory, the password can be changed\n1846                 if (defined('NET_SSH2_LOGGING')) {\n1847                     $this->message_number_log[count($this->message_number_log) - 1] = 'NET_SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ';\n1848                 }\n. Looks like string(1) \"4\"\n. ran var_dump(unpack('Ctype',\"4\")); and produced\narray(1) {\n  'type' =>\n  int(52)\n}\nError is still thrown on the other unpack\n. Very strange. So I changed the code to this\necho \"\\nVardump _string_shift\\n\";\n$string = $this->_string_shift($response,1);\nvar_dump(unpack('Ctype',$string));\n echo\"\\n\";\n extract(unpack('Ctype',$string )); //use it as an assigned variable versus the function call...\nand it went without a hitch...\n. I put it in a paste bin here.\n. I've been trying to wait until it fails again, but it hasn't ( I did revert those changed lines back to just using the method). I'll send you the debug log anyway just in case there is something weird in there.\nhttps://gist.github.com/hanski07/2b482c7cde73c557a49e\n. That log file was generated during a successful run. I'm still waiting for it to fail again, and I can't seem to force it to fail. I'm capturing all logs right now, so the next time it does, I'll have one for us.\n. Well, we're approaching 7 months, and this error has not been thrown again. I think I'll close the issue as this doesn't seem like a common problem elsewhere, and my application has been running smoothly for ~7 months.\n. ",
    "phackwer": "We just had this error this week here at work.. We are using the latest version (2.0.4) on Ubuntu 14.04 with PHP 7.0.8. I'm very inclined to believe that we have a problem with the SSL lib on that distro (I've had something like this when I tried to compile PHP 7 on Ubuntu 14.04 on November 2015, which forced me to install an updated version manually),\nCould that be the reason?. Supressing may not be enough. We are experiencing some \"hangings\". We are running a script from CLI that uses the SFTP storage on Laravel, and that calls this library (the only that throws errors on our production server). \nDoes anybody else experience scripts hanging? They just keep running forever like if they were reading a null value that triggers no error.. ",
    "xrobau": "Note that 'class_exits' does NOT automatically prepend the current namespace. So, sadly, this patch is needed\n. <?php\nnamespace ThisNamespace;\nclass Test { }\n$z = new Test();\nif (class_exists(\"Test\")) { print \"Not Namespaced\\n\"; }\nif (class_exists(\"ThisNamespace\\\\Test\")) { print \"Namespaced\\n\"; }\nprint \"My class is \".get_class($z).\"\\n\";\nThe output of that is 'Namespaced' and then \"ThisNamesapce\\Test\".  You're disguising this error in your existing code by using 'include_once', but I was going to submit that fix as my NEXT patch. \n. ",
    "dagwieers": "The used MAC is a negotiation anyway, but if the server would support both hmac-sha2-256 and hmac-sha2-512, I would expect the client to prefer the most secure option.\nOften the client has the ability to override the selection anyway (ssh -o MACs=hmac-sha2-256). Now if I look wat phpseclib is doing wrt. SSH encryption, it is preferring 3DES (even CTR) over AES, whereas paramiko prefers AES and blowfish over 3DES and arcfour. But from paramiko I can see that aes128-ctr is preferred over aes256-ctr, and over aes128-cbc, possibly because of performance reasons. So I guess your suggestion makes sense.\nI will adapt my pull-request.\n. @bantu From the Crypt/Hash.php I can see that sha512 is differently handled than sha256. Could this be related. It is quite possible we only tested sha256 when we did.\n. @bantu You are right about the order. Skimming was not a good idea :-)\nI will make a separate pull-request.\n. @bantu I can confirm that SHA512 does not work, I am looking into it right now.\n. I made the requested changes. For SHA512 support it seems to be more complex since it also fails with paramiko in a straight-forward way. Possibly there is a relation to the key-exchange.\n. ",
    "aramonc": "@bantu @terrafrost @FrenkyNet I can also put in some time next week. I was looking at the code for the put method earlier & I think I know where the check for stream resource vs string can be done.\n. ",
    "arathorn2005": "Ah, thanks. Any thoughts why it is triggered within the $sftp->login procedure?\n. ",
    "deleugpn": "This would save a lot of time.. ",
    "GregOriol": "$encrypter->engine prints 1 (with 0.3.7)\n. Sorry, I just discovered a mistake in my previous result set (0.3.5 and 0.3.7 results were inverted with the long key test; doesn't change the problem though); here it is fixed:\n```\nwith\n$key = '1234567890';\n$data = 'abc';\nthe results are\nphpseclib 0.3.7 : wun6yBg6DzZmhIzR5lT77A==\nphpseclib 0.3.5 : wun6yBg6DzZmhIzR5lT77A==\nwith\n$key = '12345678901234567890';\n$data = 'abc';\nthe results are\nphpseclib 0.3.7 : EACn8CscScCAZ8ihaZAYrA==\nphpseclib 0.3.5 : z+pdbBJXf74BY3FJCLyqMA==\n```\nso your test result seems to match mine for 0.3.7, but still doesn't match 0.3.5\nRegarding your new test, here is the result: http://pastebin.com/p6xkLh0t\nCan't give you access to the device: it's a Mac laptop (Mac OS 10.9, 64bit, standard php 5.4.24)\n. Actually, here are more things I've noticed:\n1/ with a much longer key (ex: 12345678901234567890123456789012345678901234567890) results are the same with 0.3.5 and 0.3.7\n2/ the only way I seem to manage to have the same result with 0.3.7 with the key 12345678901234567890 is to set explicitly $encrypter->setKeyLength(256); or $encrypter->setKeyLength(192);\nI saw in the diff between the 2 versions that a comment has been changed in AES.php from 160-bits to 192-bits; could this lead to something?\n. Moreover, here is something interesting with the key 12345678901234567890:\n- version 0.3.5 and no specific setKeyLength == version 0.3.7 with setKeyLength(160)\n- version 0.3.7 and no specific setKeyLength == version 0.3.5 with setKeyLength(192)\n. And something else:\n- with a key 12345678901234567 and shorter, 0.3.5 == 0.3.7\n- with a key 1234567890123456789012345678901 and longer, 0.3.5 == 0.3.7\n- but between those two, 0.3.5 != 0.3.7\n. Sadly today I had to use a server maintained by an \"admin\" who disabled them... and so I couldn't make my script based on phpseclib to work with this server. I guess things are moving a little bit faster now that we have more of those \"cyber attacks\" things in the news, and some articles like this one: https://stribika.github.io/2015/01/04/secure-secure-shell.html\n. Hello,\n@terrafrost : do you have any news on this implementation?\nSee you\n. Hi,\nAny news on this?\nBest regards,\n. Thanks! I'll try that!\n. ",
    "vijin0404": "I was struggling with this issue and like to post a vote of thanks for info regarding appending \"bash -lc\".\n. ",
    "lukepolo": "I also am having this issue, @terrafrost is there a option to load these now with some configuration option ? . What i did : $ssh->exec($command.\"; echo 'done';\");\nIt seemed to respect the 2nd command and allowed me finish the install before moving on. \n. I also have this same issue, doing a similar task (its roughly 10-15 sec) \nphp composer install; && echo done;\nI get almost the full log except for the last few lines and excludes \"done\". \nAfter thought, it comes out as a stderror , @Anahkiasen is your output also a stderror ? \n. If it fails i just reconnect. And run it again. Seems to work just fine. \n. Will do, currently unable to replicate , it stopped happening. Ill re-open when im able to replicate it. \n. I believe it was because of the remote server, it kept closing / terminating the connection but phpseclib did not notice. \n. Ill look at what I can do this weekend \n. Yes this can be closed. \n. ",
    "sjparsons": "Wow! Thanks for the quick reply. :)\nOk, so corrected the constant to: \ndefine('NET_SFTP_LOGGING', NET_SFTP_LOG_REALTIME);\nAs expected, I now see a ton of things flying by. This error is common: \nPHP Notice:  ob_flush(): failed to flush buffer. No buffer to flush in /path/to/phpseclib/Net/SFTP.php on line 2599\nI did try the master branch. I first used the download from the site (whatever was linked), then the 0.3.7 tag from Github, and most recently the master branch. All have the same result.\n. I'll send the phpinfo() output and the server identification over email. Unfortunately, I can't give you SFTP access to the server. \nI made the change as requested to NET_SSH2_LOG_COMPLEX, but the problem is the script still hangs and doesn't respond, which means, I think won't return that few items you're interested in.\n. Aha! I had:\ndefine('NET_SFTP_LOGGING', NET_SSH2_LOG_COMPLEX);\nNot:\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX);\nNow I have lots of lengths being output. Here's the last lines before the script stops:\n36\n36\n36\n36\n36\n36\n36\n36\n36\n8\n612\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n4104\n3476\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\nOh, and yes, I can transfer this with another client: specifically I tried with Panic Transmit.\n. I've just sent you the file. I'm leaving for the weekend shortly, so I won't probably be able to respond again until Monday unless it's within the next few minutes. Cheers for you all your help so far! \n. I updated Net/SSH2.php as indicated, but the text 'WAITING FOR WINDOW ADJUSTMENT FROM SERVER' doesn't show up in the log file and is not sent to the STDOUT. \nUnfortunately, I don't have sudo access on the server, so I can't adjust the LogLevel for SSHD or run the sbin command. \n. Ok, so making that update now gives me this output:\n...........INITIAL WINDOW SIZE = 0\n........\nIt goes on in the attached file (just rename it to output.txt and open in an editor).\n\nI've poked around for logs and don't seem to find any that I can access. I'll keep looking.\n. I got curious and started testing with older versions of the code. \n- v0.3.1 works! (tried a 2GB file)\n- v0.3.5 works! (tried a 2GB file)\n- v0.3.6 \u2013\u00a0Receive a \"Connection closed prematurely in Net/SSH2.php on 2579\" (fails at ~260MB)\n- v0.3.7 DOES NOT WORK, no error, just hangs at ~400MB\nI'm not sure what to do next as far as finding the bug, but I'm going to use v0.3.5 for my purposes right now.\n. Yeah... I understand your frustration. You've helped a ton, and I've got something working right now, so I'm kinda happy. I do want to fix this problem, so I'm going to look at the source code more and see if there is some tiny change that made the problem, maybe then I'll get back in touch and revive this issue if that's ok. \n. I think it would be doable. I've got enough space on my Dropbox to transfer them to you. Does the full log have passwords and things like that in it? Just gotta know what I'm sending ;)\n. @terrafrost I have sent you an email with a link to the Dropbox folder with two files in it. \n. That fixed it exactly!\n. OH, and I meant to say \u2013 no worries about any delay. I understand you've got a job (a new one!) and responsibilities. No pressure on my end. \nThanks for your help so far. \n. I downloaded the branch and it works perfect!\n. ",
    "duncan3dc": "I've switched on logging, here is the end of the file:\n``\n<<< START >>>\n .G..J. 6.;i...\\.\n00000c40  1d:76:ec:5d:c1:9c:b4:ff:e2:47:ed:0a:e9:dc:f8:27  .v.].....G.....'\n00000c50  6b:4c:3e:5d:79:57:60:a4:45:e3:2c:91:74:f7:dd:8d  kL>]yW.E.,.t...\n00000c60  71:66:0b:96:74:13:48:85:b5:c3:d5:39:7d:35:ce:b1  qf..t.H....9}5..\n00000c70  4d:ab:d9:f5:cd:ed:48:c0:c2:67:77:1d:c7:4e:88:a1  M.....H..gw..N..\n00000c80  b6:54:3d:1b:18:bf:7b:6c:1f:e3:37:7f:22:7f:db:9a  .T=...{l..7.\"...\n00000c90  54:5b:de:ae:ee:c7:93:b3:d6:25:97:d5:e4:d4:6a:0d  T[.......%....j.\n00000ca0  9e:ce:78:d2:70:61:3f:dd:c2:fd:ea:98:e9:5b:7f:de  ..x.pa?......[..\n00000cb0  f5:e5:de:30:e3:3f:7a:84:bc:5b:31:87:08:33:2d:dd  ...0.?z..[1..3-.\n00000cc0  07:2f:af:33:76:22:3e:5d:90:f1:2e:2b:3d:52:6f:b9  ./.3v\">]...+=Ro.\n00000cd0  cb:d5:bb:f1:6e:ae:4e:9e:91:69:2f:dc:d6:08:9e:1d  ....n.N..i/.....\n00000ce0  ef:63:9b:85:1e:3a:98:09:8c:3e:0c:ab:d6:6a:b9:6e  .c...:...>...j.n\n00000cf0  aa:e9:d4:7a:28:ae:ad:6c:72:b8:7b:69:9c:5d:c6:78  ...z(..lr.{i.].x\n00000d00  d2:d1:29:ff:b3:5e:87:fb:f9:78:b0:bd:48:3d:ec:ba  ..)..^...x..H=..\n00000d10  c0:d4:70:32:f5:8c:3e:49:ea:38:36:d6:c6:25:f5:ae  ..p2..>I.86..%..\n00000d20  43:aa:55:d6:d2:8b:2e:d7:5a:7c:e2:b7:64:57:7c:b0  C.U.....Z|..dW|.\n00000d30  73:5e:e0:14:47:f2:d0:c2:c6:99:f3:b8:a3:dc:cb:8f  s^..G...........\n00000d40  21:75:ed:75:cb:c6:d8:d9:98:ff:ee:7c:78:73:6c:76  !u.u.......|xslv\n00000d50  e4:f1:da:d8:cb:6e:4e:35:6b:ad:a6:76:f4:2f:cf:2a  .....nN5k..v./.*\n00000d60  be:7a:9e:92:f9:3c:bf:b8:d3:ee:89:db:04:3d:c5:49  .z...........=.I\n00000d70  69:80:de:fb:90:9a:03:01:59:6b:4e:7c:ca:da:b6:e5  i.......YkN|....\n00000d80  9b:d1:7a:77:5d:e3:71:76:5a:f6:6e:0b:bb:2b:f3:4b  ..zw].qvZ.n..+.K\n00000d90  71:5e:cd:a5:ef:06:9e:b7:04:ec:31:e3:b2:f8:2e:29  q^........1....)\n00000da0  9d:4b:3c:52:4c:8f:84:85:85:b7:26:4d:cb:b8:e6:7c  .K.RL.....&M...|\n00000db0  b2:d7:75:e2:ea:7b:97:d0                          ..u..{..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0052, network: 0s)\n00000000  00:00:01:00:00:00:00:1e:00:00:00:1a:65:00:00:00  ............e...\n00000010  01:00:00:00:00:00:00:00:07:53:75:63:63:65:73:73  .........Success\n00000020  00:00:00:02:65:6e                                ....en\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:01:00:00:00:00:1e:00:00:00:1a:65:00:00:00  ............e...\n00000010  01:00:00:00:00:00:00:00:07:53:75:63:63:65:73:73  .........Success\n00000020  00:00:00:02:65:6e                                ....en\n<<< START >>>\n```\n. It's a customers sftp server, but I'll try and setup an amazon instance now to replicate the problem there. Example code below\n```\n$sftp = new Net_SFTP(\"###.###.###.##\");\n$rsakey = new Crypt_RSA();\n$rsakey->loadKey(\"-----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY-----\");\nif (!$sftp->login(\"USERNAME\", $rsakey)) {\n    throw new Exception(\"Failed to login\");\n}\necho \"Uploading...\\n\";\n$result = $sftp->put(\"images_test.zip\", \"/home/duncanc/images_test.zip\", NET_SFTP_LOCAL_FILE);\nvar_dump($result);\n```\n. I thought that at first, except in my case the call to put() does not hang, but returns false. And none of the previous versions of phpseclib work either, although some return true, the file was not uploaded.\n. I've just tested it on a fresh amazon ec2 instance and it worked, so I will try and find out what software the customer is running on their server\n. I'm afraid the customer does not have access to the software details, they are using a manged file transfer service from Axway Gateway.\nIs there any debug info I can get from phpseclib that would help?\n. I've just tried changing the put() call to use a string and I get the same results.\n$result = $sftp->put(\"images_test.zip\", file_get_contents(\"/home/duncanc/images_test.zip\"));\n. Sorry for the delay.\nBoth getErrors() and getSFTPErrors() return empty arrays.\nThe put() method returns from x8.\ngetLog() returned around 7mb of data, shall I email this to you?\n. Cool, email sent\n. That zipped version (ssh-window-size-changes.zip) appears to be working. The put() method is returning true now. But I am waiting to hear back from the customer for confirmation that the file arrived\n. Sorry for wasting your time, looks like I was misunderstanding an error and thought the cause was the missing list() parameter. You're right though, it seems to only affect missing parameters if there are no parameters present\n. Yes that does the trick, I've just run our test suite using 2.0.x-dev and all passes now, thanks :+1: \n. ",
    "kroleg": "Actually whole switch(true) block can be replaced with one if-else check. Because default value of CRYPT_RSA_MODE is CRYPT_RSA_MODE_INTERNAL checks for MATH_BIGINTEGER_OPENSSL_DISABLE and openssl_pkey_get_details are unnecessary.\n. ",
    "dforsber": "+1\n. ",
    "boite": "Are there any technical reasons this feature hasn't been implemented?  Would it be straightforward to do?  I ask because I am interested in this feature, but not familiar with the SSH code.\n. ",
    "mledoze": "Hello, are there any updates on this feature? . ",
    "NicolasRannou": "the following hangs too and we would expect it not to:\n$sshCluster->exec('sleep 60 &');\n. I doesn't appear to work...\n --some exec calls --\n$sshCluster->enablePTY();\n$sshCluster->exec('sleep 60 &');\n--hanging--\n. we actually use nohup too but I wanted to get the simple case of sleep to work...\nOK so looks like you are saying everything works as expecting on your end, and it works the same way it has always worked so updating phpseclib might not be the issue.\nWhat do you mean by:WIth a PTY it'll return, giving you a chance to send some data in. ?\nThanks\n. ",
    "jchiantera": "Thanks terrafrost, you are right,\n. I think are generated by  .Net,\nThe public key is received by a web service and is to be used to crypt some\ninformation to be used in other web service.\n2014-09-06 11:49 GMT-04:30 terrafrost notifications@github.com:\n\nSee #469 https://github.com/phpseclib/phpseclib/pull/469.\nHow did you generate your XML key btw? If you generated it with .NET\nthat'd give me more confidence that keys of that format actually are\nsupposed to have unsigned ints. PKCS1 / PKCS8 are not supposed to have\nunsigned ints.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/468#issuecomment-54716965.\n\n\n\nJose Chiantera\n. ",
    "Rezker": "Please add possibility to put proxy for any connection like TOR :)\n. Oh i see, thank you so much and good luck :)\n. Hi, thank you for your answer :)\nThere no another trick to do this directly from TOR ? no need  to tunneling ?\n. If i tunnel all traffic i can't point my domaine name to a specific IP, because this one will change every minute :)\nThere any way to use CURL in this case ? replace fsock_open by CURL ?\nI find this library to replace fsock_open by an alternative that use proxy:\nhttps://github.com/bitaurora/phsocks\nBut no way to implement it !\nSame here: http://www.phpclasses.org/package/1822-PHP-TCP-connection-wrapper-using-SOCKS-5-protocol.html\nYou can get a look and try if you can do something with them ?\nThank's.\n. I will explaign clearly, sorry i think you misunderstanding me because i din't explaign the right things :)\nI have VPS and i want to implement script to check other SSH from this one, without showing my real IP on the remote SSH :) The script will works like checker ... i want add possibility to put PROXY / TOR for this to hide my real IP when connecting on a remote SSH from my VPS :)\n[VPS WITH PHPSECLIB] --> [PROXY] --> [Remote SSH]\nWhen i show logs of login on the remote SSH will see the proxy's IP.\nAnd i have problem to implement the scripts that i send you for this :)\nYour snippet code work like tunneling for a specific SSH and it's not my goal :)\nAny idea about this ?\nThank you and your help really appreciated :)\n. Can you send me all the file please ?\n. Yes you're right :)\nAnyway many thank's for your support :)\n. ",
    "padue": "Hi\nThanks for your fast answer.\nI can understand that the most problems are caused by the people who use your library and in my case there won't be any differences.\nTo your examples! I think there's is no one which can be applied to my problem.\nI used the following openssl cmd to encrypt the file plaintext: (no base64, set key and iv, block size is 128)\nopenssl.exe enc -aes-128-cbc -e -in plaintext.txt -out ciphertext.txt -nosalt -K AA -iv AA -p\nkey=AA000000000000000000000000000000\niv =AA000000000000000000000000000000\nand the following phpseclib example to decrypt:\n$aes = new Crypt_AES(); \n$aes->setKey('AA000000000000000000000000000000'); // null-padded to 128 bits\n$aes->setIV('AA000000000000000000000000000000'); // null-padded to 128 bits\necho $aes->decrypt(file_get_contents('ciphertext.txt'));\nAnd for my understanding, this should work. Perhaps you see some mistakes which I have overlooked.\n. ",
    "nuxwin": "Thank you for your fast answer ;)\n. @terrafrost \nSorry for the duplicate report... Next time, I'll look better ;). ",
    "Virsacer": "I did just create a new crl with $crl->saveCRL($crl->signCRL($ca, new File_X509()));\n-----BEGIN X509 CRL-----\nMIHvMFwCAQEwCwYJKoZIhvcNAQENMBYxFDASBgNVBAMMC1ZpcnNhY2VyIENBFw0x\nNDA5MTcwNzMwMTlaoCMwITAfBgNVHSMEGDAWgBSbVKO3NNB7CORD2eG5CAn5DmNj\n7zALBgkqhkiG9w0BAQ0DgYEAEEZuJAMwH3cHGtuzsb8Vc5wXSBaJiX8L5OO0cLzq\nlecECIjh/h2MhSKd9xBq8PEAScmLF5IgEDQUG3akv+OL1YlTQEcnNWCzeopl9DDE\niKlQ82EsTmZ6mZtRgPkP9wLLKgh/sinZ/5XES0kwh9py5w8lsxuMaNfqc4E8rnVV\nsjI=\n-----END X509 CRL-----\nBut the same happens with your crl...\nI'm using PHP 5.6.0 VC11 x64 Thread Safe (2014-Aug-27 21:52:27)\n. My CLI identifies itself as PHP 5.6.0 (cli) (built: Aug 27 2014 11:55:33)\nYes, both your scripts produce the same error and I did not post a script since it was the same (except the crl)\nBut stangely I now have a crl which does not produce the error!?\n-----BEGIN X509 CRL-----\nMIIBCTB2AgEBMAsGCSqGSIb3DQEBDTAWMRQwEgYDVQQDDAtWaXJzYWNlciBDQRcN\nMTQwOTE4MDkwMzQxWjA9MBICAQEXDTE0MDkxODA5MDM0MVowEgIBfxcNMTQwOTE4\nMDkwMzQxWjATAgIAgBcNMTQwOTE4MDkwMzQxWjALBgkqhkiG9w0BAQ0DgYEAM6Ui\nHtE9H3mpjgkmycoO9MvMAURTm9aqO3DjIljqhIC67YvoQk0ChD2hIqxABUCtPe3C\nhIlLybgQBHgaFPvrP5fTNtSTkslKsJ5lSuL1oxTOZznfJt7UE1vrGOIjMz01zxe/\n1Bf1YcEP5DOdCkJl70HJhuh3Kt1RPVe0nN9rl+w=\n-----END X509 CRL-----\n. ```\nmemory_limit=-1\ndocref_ext=.html\ndocref_root=/PHP/\nvariables_order=GPCS\nerror_reporting=E_ALL\nxdebug.remote_enable=On\ndisplay_startup_errors=On\ndate.timezone=Europe/Berlin\nsession.use_only_cookies=Off\ninclude_path=\".;C:/Documents/PHP/INC\"\nextension=ext/php_bz2.dll\nextension=ext/php_curl.dll\nextension=ext/php_mbstring.dll\nextension=ext/php_exif.dll\nextension=ext/php_gd2.dll\nextension=ext/php_mysql.dll\nextension=ext/php_mysqli.dll\nextension=ext/php_openssl.dll\nzend_extension=xdebug.dll\n```\n```\nphpinfo()\nPHP Version => 5.6.0\nSystem => Windows NT ERAZER136 6.3 build 9200 (Windows 8.1 Business Edition) AMD64\nBuild Date => Aug 27 2014 11:52:14\nCompiler => MSVC11 (Visual C++ 2012)\nArchitecture => x64\nConfigure Command => cscript /nologo configure.js  \"--enable-snapshot-build\" \"--disable-isapi\" \"--enable-debug-pack\" \"--without-mssql\" \"--without-pdo-mssql\" \"--without-pi3web\" \"--with-pdo-oci=c:\\php-sdk\\oracle\\x64\\instantclient_12_1\\sdk,shared\" \"--with-oci8-12c=c:\\php-sdk\\oracle\\x64\\instantclient_12_1\\sdk,shared\" \"--enable-object-out-dir=../obj/\" \"--enable-com-dotnet=shared\" \"--with-mcrypt=static\" \"--without-analyzer\" \"--with-pgo\"\nServer API => Command Line Interface\nVirtual Directory Support => enabled\nConfiguration File (php.ini) Path => C:\\WINDOWS\nLoaded Configuration File => C:\\PHP\\php.ini\nScan this dir for additional .ini files => (none)\nAdditional .ini files parsed => (none)\nPHP API => 20131106\nPHP Extension => 20131226\nZend Extension => 220131226\nZend Extension Build => API220131226,TS,VC11\nPHP Extension Build => API20131226,TS,VC11\nDebug Build => no\nThread Safety => enabled\nZend Signal Handling => disabled\nZend Memory Manager => enabled\nZend Multibyte Support => provided by mbstring\nIPv6 Support => enabled\nDTrace Support => disabled\nRegistered PHP Streams => php, file, glob, data, http, ftp, zip, compress.zlib, compress.bzip2, https, ftps, phar\nRegistered Stream Socket Transports => tcp, udp, ssl, sslv3, sslv2, tls, tlsv1.0, tlsv1.1, tlsv1.2\nRegistered Stream Filters => convert.iconv., mcrypt., mdecrypt., string.rot13, string.toupper, string.tolower, string.strip_tags, convert., consumed, dechunk, zlib., bzip2.\nThis program makes use of the Zend Scripting Language Engine:\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\n    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans\n\nConfiguration\nbcmath\nBCMath support => enabled\nDirective => Local Value => Master Value\nbcmath.scale => 0 => 0\nbz2\nBZip2 Support => Enabled\nStream Wrapper support => compress.bzip2://\nStream Filter support => bzip2.decompress, bzip2.compress\nBZip2 Version => 1.0.6, 6-Sept-2010\ncalendar\nCalendar support => enabled\nCore\nPHP Version => 5.6.0\nDirective => Local Value => Master Value\nallow_url_fopen => On => On\nallow_url_include => Off => Off\nalways_populate_raw_post_data => 0 => 0\narg_separator.input => & => &\narg_separator.output => & => &\nasp_tags => Off => Off\nauto_append_file => no value => no value\nauto_globals_jit => On => On\nauto_prepend_file => no value => no value\nbrowscap => no value => no value\ndefault_charset => UTF-8 => UTF-8\ndefault_mimetype => text/html => text/html\ndisable_classes => no value => no value\ndisable_functions => no value => no value\ndisplay_errors => STDOUT => STDOUT\ndisplay_startup_errors => On => On\ndoc_root => no value => no value\ndocref_ext => .html => .html\ndocref_root => /PHP/ => /PHP/\nenable_dl => On => On\nenable_post_data_reading => On => On\nerror_append_string => no value => no value\nerror_log => no value => no value\nerror_prepend_string => no value => no value\nerror_reporting => 32767 => 32767\nexit_on_timeout => Off => Off\nexpose_php => On => On\nextension_dir => C:\\php => C:\\php\nfile_uploads => On => On\nhighlight.comment => #FF8000 => #FF8000\nhighlight.default => #0000BB => #0000BB\nhighlight.html => #000000 => #000000\nhighlight.keyword => #007700 => #007700\nhighlight.string => #DD0000 => #DD0000\nhtml_errors => Off => Off\nignore_repeated_errors => Off => Off\nignore_repeated_source => Off => Off\nignore_user_abort => Off => Off\nimplicit_flush => On => On\ninclude_path => .;C:/Documents/PHP/INC => .;C:/Documents/PHP/INC\ninput_encoding => no value => no value\ninternal_encoding => no value => no value\nlog_errors => Off => Off\nlog_errors_max_len => 1024 => 1024\nmail.add_x_header => Off => Off\nmail.force_extra_parameters => no value => no value\nmail.log => no value => no value\nmax_execution_time => 0 => 0\nmax_file_uploads => 20 => 20\nmax_input_nesting_level => 64 => 64\nmax_input_time => -1 => -1\nmax_input_vars => 1000 => 1000\nmemory_limit => -1 => -1\nopen_basedir => no value => no value\noutput_buffering => 0 => 0\noutput_encoding => no value => no value\noutput_handler => no value => no value\npost_max_size => 8M => 8M\nprecision => 14 => 14\nrealpath_cache_size => 16K => 16K\nrealpath_cache_ttl => 120 => 120\nregister_argc_argv => On => On\nreport_memleaks => On => On\nreport_zend_debug => Off => Off\nrequest_order => no value => no value\nsendmail_from => no value => no value\nsendmail_path => no value => no value\nserialize_precision => 17 => 17\nshort_open_tag => On => On\nSMTP => localhost => localhost\nsmtp_port => 25 => 25\nsql.safe_mode => Off => Off\nsys_temp_dir => no value => no value\ntrack_errors => Off => Off\nunserialize_callback_func => no value => no value\nupload_max_filesize => 2M => 2M\nupload_tmp_dir => no value => no value\nuser_dir => no value => no value\nuser_ini.cache_ttl => 300 => 300\nuser_ini.filename => .user.ini => .user.ini\nvariables_order => GPCS => GPCS\nwindows.show_crt_warning => Off => Off\nxmlrpc_error_number => 0 => 0\nxmlrpc_errors => Off => Off\nzend.detect_unicode => On => On\nzend.enable_gc => On => On\nzend.multibyte => Off => Off\nzend.script_encoding => no value => no value\nctype\nctype functions => enabled\ncurl\ncURL support => enabled\ncURL Information => 7.36.0\nAge => 3\nFeatures\nAsynchDNS => Yes\nCharConv => No\nDebug => No\nGSS-Negotiate => Yes\nIDN => Yes\nIPv6 => Yes\nkrb4 => No\nLargefile => Yes\nlibz => Yes\nNTLM => Yes\nNTLMWB => No\nSPNEGO => Yes\nSSL => Yes\nSSPI => Yes\nTLS-SRP => No\nProtocols => dict, file, ftp, ftps, gopher, http, https, imap, imaps, ldap, pop3, pop3s, rtsp, scp, sftp, smtp, smtps, telnet, tftp\nHost => x86_64-pc-win32\nSSL Version => OpenSSL/1.0.1i\nZLib Version => 1.2.7\nlibSSH Version => libssh2/1.4.3\ndate\ndate/time support => enabled\n\"Olson\" Timezone Database Version => 2014.6\nTimezone Database => internal\nDefault timezone => Europe/Berlin\nDirective => Local Value => Master Value\ndate.default_latitude => 31.7667 => 31.7667\ndate.default_longitude => 35.2333 => 35.2333\ndate.sunrise_zenith => 90.583333 => 90.583333\ndate.sunset_zenith => 90.583333 => 90.583333\ndate.timezone => Europe/Berlin => Europe/Berlin\ndom\nDOM/XML => enabled\nDOM/XML API Version => 20031129\nlibxml Version => 2.9.1\nHTML Support => enabled\nXPath Support => enabled\nXPointer Support => enabled\nSchema Support => enabled\nRelaxNG Support => enabled\nereg\nRegex Library => Bundled library enabled\nexif\nEXIF Support => enabled\nEXIF Version => 1.4 $Id: 0b28f1c2604848245c00549a8c8055a1c0d22a49 $\nSupported EXIF Version => 0220\nSupported filetypes => JPEG,TIFF\nDirective => Local Value => Master Value\nexif.decode_jis_intel => JIS => JIS\nexif.decode_jis_motorola => JIS => JIS\nexif.decode_unicode_intel => UCS-2LE => UCS-2LE\nexif.decode_unicode_motorola => UCS-2BE => UCS-2BE\nexif.encode_jis => no value => no value\nexif.encode_unicode => ISO-8859-15 => ISO-8859-15\nfilter\nInput Validation and Filtering => enabled\nRevision => $Id: 4d3899e089e6e45b157975ceef2ac7deb6e9d762 $\nDirective => Local Value => Master Value\nfilter.default => unsafe_raw => unsafe_raw\nfilter.default_flags => no value => no value\nftp\nFTP support => enabled\ngd\nGD Support => enabled\nGD Version => bundled (2.1.0 compatible)\nFreeType Support => enabled\nFreeType Linkage => with freetype\nFreeType Version => 2.5.3\nGIF Read Support => enabled\nGIF Create Support => enabled\nJPEG Support => enabled\nlibJPEG Version => 9 compatible\nPNG Support => enabled\nlibPNG Version => 1.5.18\nWBMP Support => enabled\nXPM Support => enabled\nlibXpm Version => 30411\nXBM Support => enabled\nWebP Support => enabled\nDirective => Local Value => Master Value\ngd.jpeg_ignore_warning => 0 => 0\nhash\nhash support => enabled\nHashing Engines => md2 md4 md5 sha1 sha224 sha256 sha384 sha512 ripemd128 ripemd160 ripemd256 ripemd320 whirlpool tiger128,3 tiger160,3 tiger192,3 tiger128,4 tiger160,4 tiger192,4 snefru snefru256 gost gost-crypto adler32 crc32 crc32b fnv132 fnv1a32 fnv164 fnv1a64 joaat haval128,3 haval160,3 haval192,3 haval224,3 haval256,3 haval128,4 haval160,4 haval192,4 haval224,4 haval256,4 haval128,5 haval160,5 haval192,5 haval224,5 haval256,5 \niconv\niconv support => enabled\niconv implementation => \"libiconv\"\niconv library version => 1.14\nDirective => Local Value => Master Value\niconv.input_encoding => no value => no value\niconv.internal_encoding => no value => no value\niconv.output_encoding => no value => no value\njson\njson support => enabled\njson version => 1.2.1\nlibxml\nlibXML support => active\nlibXML Compiled Version => 2.9.1\nlibXML Loaded Version => 20901\nlibXML streams => enabled\nmbstring\nMultibyte Support => enabled\nMultibyte string engine => libmbfl\nHTTP input encoding translation => disabled\nlibmbfl version => 1.3.2\nmbstring extension makes use of \"streamable kanji code filter and converter\", which is distributed under the GNU Lesser General Public License version 2.1.\nMultibyte (japanese) regex support => enabled\nMultibyte regex (oniguruma) version => 5.9.5\nDirective => Local Value => Master Value\nmbstring.detect_order => no value => no value\nmbstring.encoding_translation => Off => Off\nmbstring.func_overload => 0 => 0\nmbstring.http_input => no value => no value\nmbstring.http_output => no value => no value\nmbstring.http_output_conv_mimetypes => ^(text/|application/xhtml+xml) => ^(text/|application/xhtml+xml)\nmbstring.internal_encoding => no value => no value\nmbstring.language => neutral => neutral\nmbstring.strict_detection => Off => Off\nmbstring.substitute_character => no value => no value\nmcrypt\nmcrypt support => enabled\nmcrypt_filter support => enabled\nVersion => 2.5.8\nApi No => 20021217\nSupported ciphers => cast-128 gost rijndael-128 twofish cast-256 loki97 rijndael-192 saferplus wake blowfish-compat des rijndael-256 serpent xtea blowfish enigma rc2 tripledes arcfour \nSupported modes => cbc cfb ctr ecb ncfb nofb ofb stream \nDirective => Local Value => Master Value\nmcrypt.algorithms_dir => no value => no value\nmcrypt.modes_dir => no value => no value\nmhash\nMHASH support => Enabled\nMHASH API Version => Emulated Support\nmysql\nMySQL Support => enabled\nActive Persistent Links => 0\nActive Links => 0\nClient API version => mysqlnd 5.0.11-dev - 20120503 - $Id: f373ea5dd5538761406a8022a4b8a374418b240e $\nDirective => Local Value => Master Value\nmysql.allow_local_infile => On => On\nmysql.allow_persistent => On => On\nmysql.connect_timeout => 60 => 60\nmysql.default_host => no value => no value\nmysql.default_password => no value => no value\nmysql.default_port => no value => no value\nmysql.default_socket => no value => no value\nmysql.default_user => no value => no value\nmysql.max_links => Unlimited => Unlimited\nmysql.max_persistent => Unlimited => Unlimited\nmysql.trace_mode => Off => Off\nmysqli\nMysqlI Support => enabled\nClient API library version => mysqlnd 5.0.11-dev - 20120503 - $Id: f373ea5dd5538761406a8022a4b8a374418b240e $\nActive Persistent Links => 0\nInactive Persistent Links => 0\nActive Links => 0\nDirective => Local Value => Master Value\nmysqli.allow_local_infile => On => On\nmysqli.allow_persistent => On => On\nmysqli.default_host => no value => no value\nmysqli.default_port => 3306 => 3306\nmysqli.default_pw => no value => no value\nmysqli.default_socket => no value => no value\nmysqli.default_user => no value => no value\nmysqli.max_links => Unlimited => Unlimited\nmysqli.max_persistent => Unlimited => Unlimited\nmysqli.reconnect => Off => Off\nmysqli.rollback_on_cached_plink => Off => Off\nmysqlnd\nmysqlnd => enabled\nVersion => mysqlnd 5.0.11-dev - 20120503 - $Id: f373ea5dd5538761406a8022a4b8a374418b240e $\nCompression => supported\ncore SSL => supported\nextended SSL => not supported\nCommand buffer size => 4096\nRead buffer size => 32768\nRead timeout => 31536000\nCollecting statistics => Yes\nCollecting memory statistics => No\nTracing => n/a\nLoaded plugins => mysqlnd,debug_trace,auth_plugin_mysql_native_password,auth_plugin_mysql_clear_password\nAPI Extensions => mysql,mysqli\nmysqlnd statistics =>\nbytes_sent => 0\nbytes_received => 0\npackets_sent => 0\npackets_received => 0\nprotocol_overhead_in => 0\nprotocol_overhead_out => 0\nbytes_received_ok_packet => 0\nbytes_received_eof_packet => 0\nbytes_received_rset_header_packet => 0\nbytes_received_rset_field_meta_packet => 0\nbytes_received_rset_row_packet => 0\nbytes_received_prepare_response_packet => 0\nbytes_received_change_user_packet => 0\npackets_sent_command => 0\npackets_received_ok => 0\npackets_received_eof => 0\npackets_received_rset_header => 0\npackets_received_rset_field_meta => 0\npackets_received_rset_row => 0\npackets_received_prepare_response => 0\npackets_received_change_user => 0\nresult_set_queries => 0\nnon_result_set_queries => 0\nno_index_used => 0\nbad_index_used => 0\nslow_queries => 0\nbuffered_sets => 0\nunbuffered_sets => 0\nps_buffered_sets => 0\nps_unbuffered_sets => 0\nflushed_normal_sets => 0\nflushed_ps_sets => 0\nps_prepared_never_executed => 0\nps_prepared_once_executed => 0\nrows_fetched_from_server_normal => 0\nrows_fetched_from_server_ps => 0\nrows_buffered_from_client_normal => 0\nrows_buffered_from_client_ps => 0\nrows_fetched_from_client_normal_buffered => 0\nrows_fetched_from_client_normal_unbuffered => 0\nrows_fetched_from_client_ps_buffered => 0\nrows_fetched_from_client_ps_unbuffered => 0\nrows_fetched_from_client_ps_cursor => 0\nrows_affected_normal => 0\nrows_affected_ps => 0\nrows_skipped_normal => 0\nrows_skipped_ps => 0\ncopy_on_write_saved => 0\ncopy_on_write_performed => 0\ncommand_buffer_too_small => 0\nconnect_success => 0\nconnect_failure => 0\nconnection_reused => 0\nreconnect => 0\npconnect_success => 0\nactive_connections => 0\nactive_persistent_connections => 0\nexplicit_close => 0\nimplicit_close => 0\ndisconnect_close => 0\nin_middle_of_command_close => 0\nexplicit_free_result => 0\nimplicit_free_result => 0\nexplicit_stmt_close => 0\nimplicit_stmt_close => 0\nmem_emalloc_count => 0\nmem_emalloc_amount => 0\nmem_ecalloc_count => 0\nmem_ecalloc_amount => 0\nmem_erealloc_count => 0\nmem_erealloc_amount => 0\nmem_efree_count => 0\nmem_efree_amount => 0\nmem_malloc_count => 0\nmem_malloc_amount => 0\nmem_calloc_count => 0\nmem_calloc_amount => 0\nmem_realloc_count => 0\nmem_realloc_amount => 0\nmem_free_count => 0\nmem_free_amount => 0\nmem_estrndup_count => 0\nmem_strndup_count => 0\nmem_estndup_count => 0\nmem_strdup_count => 0\nproto_text_fetched_null => 0\nproto_text_fetched_bit => 0\nproto_text_fetched_tinyint => 0\nproto_text_fetched_short => 0\nproto_text_fetched_int24 => 0\nproto_text_fetched_int => 0\nproto_text_fetched_bigint => 0\nproto_text_fetched_decimal => 0\nproto_text_fetched_float => 0\nproto_text_fetched_double => 0\nproto_text_fetched_date => 0\nproto_text_fetched_year => 0\nproto_text_fetched_time => 0\nproto_text_fetched_datetime => 0\nproto_text_fetched_timestamp => 0\nproto_text_fetched_string => 0\nproto_text_fetched_blob => 0\nproto_text_fetched_enum => 0\nproto_text_fetched_set => 0\nproto_text_fetched_geometry => 0\nproto_text_fetched_other => 0\nproto_binary_fetched_null => 0\nproto_binary_fetched_bit => 0\nproto_binary_fetched_tinyint => 0\nproto_binary_fetched_short => 0\nproto_binary_fetched_int24 => 0\nproto_binary_fetched_int => 0\nproto_binary_fetched_bigint => 0\nproto_binary_fetched_decimal => 0\nproto_binary_fetched_float => 0\nproto_binary_fetched_double => 0\nproto_binary_fetched_date => 0\nproto_binary_fetched_year => 0\nproto_binary_fetched_time => 0\nproto_binary_fetched_datetime => 0\nproto_binary_fetched_timestamp => 0\nproto_binary_fetched_string => 0\nproto_binary_fetched_blob => 0\nproto_binary_fetched_enum => 0\nproto_binary_fetched_set => 0\nproto_binary_fetched_geometry => 0\nproto_binary_fetched_other => 0\ninit_command_executed_count => 0\ninit_command_failed_count => 0\ncom_quit => 0\ncom_init_db => 0\ncom_query => 0\ncom_field_list => 0\ncom_create_db => 0\ncom_drop_db => 0\ncom_refresh => 0\ncom_shutdown => 0\ncom_statistics => 0\ncom_process_info => 0\ncom_connect => 0\ncom_process_kill => 0\ncom_debug => 0\ncom_ping => 0\ncom_time => 0\ncom_delayed_insert => 0\ncom_change_user => 0\ncom_binlog_dump => 0\ncom_table_dump => 0\ncom_connect_out => 0\ncom_register_slave => 0\ncom_stmt_prepare => 0\ncom_stmt_execute => 0\ncom_stmt_send_long_data => 0\ncom_stmt_close => 0\ncom_stmt_reset => 0\ncom_stmt_set_option => 0\ncom_stmt_fetch => 0\ncom_deamon => 0\nbytes_received_real_data_normal => 0\nbytes_received_real_data_ps => 0\nodbc\nODBC Support => enabled\nActive Persistent Links => 0\nActive Links => 0\nODBC library => Win32\nDirective => Local Value => Master Value\nodbc.allow_persistent => On => On\nodbc.check_persistent => On => On\nodbc.default_cursortype => Static cursor => Static cursor\nodbc.default_db => no value => no value\nodbc.default_pw => no value => no value\nodbc.default_user => no value => no value\nodbc.defaultbinmode => return as is => return as is\nodbc.defaultlrl => return up to 4096 bytes => return up to 4096 bytes\nodbc.max_links => Unlimited => Unlimited\nodbc.max_persistent => Unlimited => Unlimited\nopenssl\nOpenSSL support => enabled\nOpenSSL Library Version => OpenSSL 1.0.1i 6 Aug 2014\nOpenSSL Header Version => OpenSSL 1.0.1i 6 Aug 2014\nDirective => Local Value => Master Value\nopenssl.cafile => no value => no value\nopenssl.capath => no value => no value\npcre\nPCRE (Perl Compatible Regular Expressions) Support => enabled\nPCRE Library Version => 8.34 2013-12-15\nDirective => Local Value => Master Value\npcre.backtrack_limit => 1000000 => 1000000\npcre.recursion_limit => 100000 => 100000\nPDO\nPDO support => enabled\nPDO drivers =>  \nPhar\nPhar: PHP Archive support => enabled\nPhar EXT version => 2.0.2\nPhar API version => 1.1.1\nSVN revision => $Id: 5bfb2788811b381e88c27d2b12c2091f93cded5c $\nPhar-based phar archives => enabled\nTar-based phar archives => enabled\nZIP-based phar archives => enabled\ngzip compression => enabled\nbzip2 compression => enabled\nOpenSSL support => enabled\nPhar based on pear/PHP_Archive, original concept by Davey Shafik.\nPhar fully realized by Gregory Beaver and Marcus Boerger.\nPortions of tar implementation Copyright (c) 2003-2009 Tim Kientzle.\nDirective => Local Value => Master Value\nphar.cache_list => no value => no value\nphar.readonly => On => On\nphar.require_hash => On => On\nReflection\nReflection => enabled\nVersion => $Id: 8e5fcadef43ea0f77c7886557613923e30b979dd $\nsession\nSession Support => enabled\nRegistered save handlers => files user \nRegistered serializer handlers => php_serialize php php_binary wddx \nDirective => Local Value => Master Value\nsession.auto_start => Off => Off\nsession.cache_expire => 180 => 180\nsession.cache_limiter => nocache => nocache\nsession.cookie_domain => no value => no value\nsession.cookie_httponly => Off => Off\nsession.cookie_lifetime => 0 => 0\nsession.cookie_path => / => /\nsession.cookie_secure => Off => Off\nsession.entropy_file => no value => no value\nsession.entropy_length => 0 => 0\nsession.gc_divisor => 100 => 100\nsession.gc_maxlifetime => 1440 => 1440\nsession.gc_probability => 1 => 1\nsession.hash_bits_per_character => 4 => 4\nsession.hash_function => 0 => 0\nsession.name => PHPSESSID => PHPSESSID\nsession.referer_check => no value => no value\nsession.save_handler => files => files\nsession.save_path => no value => no value\nsession.serialize_handler => php => php\nsession.upload_progress.cleanup => On => On\nsession.upload_progress.enabled => On => On\nsession.upload_progress.freq => 1% => 1%\nsession.upload_progress.min_freq => 1 => 1\nsession.upload_progress.name => PHP_SESSION_UPLOAD_PROGRESS => PHP_SESSION_UPLOAD_PROGRESS\nsession.upload_progress.prefix => upload_progress_ => upload_progress_\nsession.use_cookies => On => On\nsession.use_only_cookies => Off => Off\nsession.use_strict_mode => Off => Off\nsession.use_trans_sid => 0 => 0\nSimpleXML\nSimplexml support => enabled\nRevision => $Id: a915862ec47f9589309acc4996ca8f6179788746 $\nSchema support => enabled\nSPL\nSPL support => enabled\nInterfaces => Countable, OuterIterator, RecursiveIterator, SeekableIterator, SplObserver, SplSubject\nClasses => AppendIterator, ArrayIterator, ArrayObject, BadFunctionCallException, BadMethodCallException, CachingIterator, CallbackFilterIterator, DirectoryIterator, DomainException, EmptyIterator, FilesystemIterator, FilterIterator, GlobIterator, InfiniteIterator, InvalidArgumentException, IteratorIterator, LengthException, LimitIterator, LogicException, MultipleIterator, NoRewindIterator, OutOfBoundsException, OutOfRangeException, OverflowException, ParentIterator, RangeException, RecursiveArrayIterator, RecursiveCachingIterator, RecursiveCallbackFilterIterator, RecursiveDirectoryIterator, RecursiveFilterIterator, RecursiveIteratorIterator, RecursiveRegexIterator, RecursiveTreeIterator, RegexIterator, RuntimeException, SplDoublyLinkedList, SplFileInfo, SplFileObject, SplFixedArray, SplHeap, SplMinHeap, SplMaxHeap, SplObjectStorage, SplPriorityQueue, SplQueue, SplStack, SplTempFileObject, UnderflowException, UnexpectedValueException\nstandard\nDynamic Library Support => enabled\nInternal Sendmail Support for Windows => enabled\nDirective => Local Value => Master Value\nassert.active => 1 => 1\nassert.bail => 0 => 0\nassert.callback => no value => no value\nassert.quiet_eval => 0 => 0\nassert.warning => 1 => 1\nauto_detect_line_endings => 0 => 0\ndefault_socket_timeout => 60 => 60\nfrom => no value => no value\nurl_rewriter.tags => a=href,area=href,frame=src,form=,fieldset= => a=href,area=href,frame=src,form=,fieldset=\nuser_agent => no value => no value\ntokenizer\nTokenizer Support => enabled\nwddx\nWDDX Support => enabled\nWDDX Session Serializer => enabled\nxdebug\nxdebug support => enabled\nVersion => 2.2.5\nIDE Key => Virsacer\nSupported protocols => Revision\nDBGp - Common DeBuGger Protocol => $Revision: 1.145 $\nDirective => Local Value => Master Value\nxdebug.auto_trace => Off => Off\nxdebug.cli_color => 0 => 0\nxdebug.collect_assignments => Off => Off\nxdebug.collect_includes => On => On\nxdebug.collect_params => 0 => 0\nxdebug.collect_return => Off => Off\nxdebug.collect_vars => Off => Off\nxdebug.coverage_enable => On => On\nxdebug.default_enable => On => On\nxdebug.dump.COOKIE => no value => no value\nxdebug.dump.ENV => no value => no value\nxdebug.dump.FILES => no value => no value\nxdebug.dump.GET => no value => no value\nxdebug.dump.POST => no value => no value\nxdebug.dump.REQUEST => no value => no value\nxdebug.dump.SERVER => no value => no value\nxdebug.dump.SESSION => no value => no value\nxdebug.dump_globals => On => On\nxdebug.dump_once => On => On\nxdebug.dump_undefined => Off => Off\nxdebug.extended_info => On => On\nxdebug.file_link_format => no value => no value\nxdebug.idekey => no value => no value\nxdebug.max_nesting_level => 100 => 100\nxdebug.overload_var_dump => On => On\nxdebug.profiler_aggregate => Off => Off\nxdebug.profiler_append => Off => Off\nxdebug.profiler_enable => Off => Off\nxdebug.profiler_enable_trigger => Off => Off\nxdebug.profiler_output_dir => \\ => \\\nxdebug.profiler_output_name => cachegrind.out.%p => cachegrind.out.%p\nxdebug.remote_autostart => Off => Off\nxdebug.remote_connect_back => Off => Off\nxdebug.remote_cookie_expire_time => 3600 => 3600\nxdebug.remote_enable => On => On\nxdebug.remote_handler => dbgp => dbgp\nxdebug.remote_host => localhost => localhost\nxdebug.remote_log => no value => no value\nxdebug.remote_mode => req => req\nxdebug.remote_port => 9000 => 9000\nxdebug.scream => Off => Off\nxdebug.show_exception_trace => Off => Off\nxdebug.show_local_vars => Off => Off\nxdebug.show_mem_delta => Off => Off\nxdebug.trace_enable_trigger => Off => Off\nxdebug.trace_format => 0 => 0\nxdebug.trace_options => 0 => 0\nxdebug.trace_output_dir => \\ => \\\nxdebug.trace_output_name => trace.%c => trace.%c\nxdebug.var_display_max_children => 128 => 128\nxdebug.var_display_max_data => 512 => 512\nxdebug.var_display_max_depth => 3 => 3\nxml\nXML Support => active\nXML Namespace Support => active\nlibxml2 Version => 2.9.1\nxmlreader\nXMLReader => enabled\nxmlwriter\nXMLWriter => enabled\nzip\nZip => enabled\nExtension Version => $Id: a9db166c839b24cbebccad95120bd535e720038f $\nZip version => 1.12.4\nLibzip version => 0.11.2\nzlib\nZLib Support => enabled\nStream Wrapper => compress.zlib://\nStream Filter => zlib.inflate, zlib.deflate\nCompiled Version => 1.2.7.3\nLinked Version => 1.2.7.3\nDirective => Local Value => Master Value\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value\nAdditional Modules\nModule Name\nEnvironment\nVariable => Value\nALLUSERSPROFILE => C:\\ProgramData\nAPPDATA => C:\\Users\\Virsacer\\AppData\\Roaming\nCommonProgramFiles => C:\\Program Files\\Common Files\nCommonProgramFiles(x86) => C:\\Program Files (x86)\\Common Files\nCommonProgramW6432 => C:\\Program Files\\Common Files\nCOMPUTERNAME => ERAZER136\nComSpec => C:\\WINDOWS\\system32\\cmd.exe\nDEVMGR_SHOW_NONPRESENT_DEVICES => 1\nFP_NO_HOST_CHECK => NO\nHOMEDRIVE => C:\nHOMEPATH => \\Users\\Virsacer\nJAVA_HOME => C:\\Program Files\\Java\nLOCALAPPDATA => C:\\Users\\Virsacer\\AppData\\Local\nLOGONSERVER => \\MicrosoftAccount\nNUMBER_OF_PROCESSORS => 4\nOS => Windows_NT\nPath => C:\\WINDOWS;C:\\WINDOWS\\system32;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\PHP;C:\\Cygwin\\bin\nPATHEXT => .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\nPROCESSOR_ARCHITECTURE => AMD64\nPROCESSOR_IDENTIFIER => AMD64 Family 16 Model 4 Stepping 3, AuthenticAMD\nPROCESSOR_LEVEL => 16\nPROCESSOR_REVISION => 0403\nProgramData => C:\\ProgramData\nProgramFiles => C:\\Program Files\nProgramFiles(x86) => C:\\Program Files (x86)\nProgramW6432 => C:\\Program Files\nPROMPT => $P$G\nPSModulePath => C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\\nPUBLIC => C:\\Users\\Public\nSystemDrive => C:\nSystemRoot => C:\\WINDOWS\nTEMP => C:\\Users\\Virsacer\\AppData\\Local\\Temp\nTMP => C:\\Users\\Virsacer\\AppData\\Local\\Temp\nUSERDOMAIN => ERAZER136\nUSERDOMAIN_ROAMINGPROFILE => ERAZER136\nUSERNAME => Virsacer\nUSERPROFILE => C:\\Users\\Virsacer\nwindir => C:\\WINDOWS\n__COMPAT_LAYER => RunAsAdmin\nPHP Variables\nVariable => Value\n_SERVER[\"ALLUSERSPROFILE\"] => C:\\ProgramData\n_SERVER[\"APPDATA\"] => C:\\Users\\Virsacer\\AppData\\Roaming\n_SERVER[\"CommonProgramFiles\"] => C:\\Program Files\\Common Files\n_SERVER[\"CommonProgramFiles(x86)\"] => C:\\Program Files (x86)\\Common Files\n_SERVER[\"CommonProgramW6432\"] => C:\\Program Files\\Common Files\n_SERVER[\"COMPUTERNAME\"] => ERAZER136\n_SERVER[\"ComSpec\"] => C:\\WINDOWS\\system32\\cmd.exe\n_SERVER[\"DEVMGR_SHOW_NONPRESENT_DEVICES\"] => 1\n_SERVER[\"FP_NO_HOST_CHECK\"] => NO\n_SERVER[\"HOMEDRIVE\"] => C:\n_SERVER[\"HOMEPATH\"] => \\Users\\Virsacer\n_SERVER[\"JAVA_HOME\"] => C:\\Program Files\\Java\n_SERVER[\"LOCALAPPDATA\"] => C:\\Users\\Virsacer\\AppData\\Local\n_SERVER[\"LOGONSERVER\"] => \\MicrosoftAccount\n_SERVER[\"NUMBER_OF_PROCESSORS\"] => 4\n_SERVER[\"OS\"] => Windows_NT\n_SERVER[\"Path\"] => C:\\WINDOWS;C:\\WINDOWS\\system32;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\PHP;C:\\Cygwin\\bin\n_SERVER[\"PATHEXT\"] => .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\n_SERVER[\"PROCESSOR_ARCHITECTURE\"] => AMD64\n_SERVER[\"PROCESSOR_IDENTIFIER\"] => AMD64 Family 16 Model 4 Stepping 3, AuthenticAMD\n_SERVER[\"PROCESSOR_LEVEL\"] => 16\n_SERVER[\"PROCESSOR_REVISION\"] => 0403\n_SERVER[\"ProgramData\"] => C:\\ProgramData\n_SERVER[\"ProgramFiles\"] => C:\\Program Files\n_SERVER[\"ProgramFiles(x86)\"] => C:\\Program Files (x86)\n_SERVER[\"ProgramW6432\"] => C:\\Program Files\n_SERVER[\"PROMPT\"] => $P$G\n_SERVER[\"PSModulePath\"] => C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\\n_SERVER[\"PUBLIC\"] => C:\\Users\\Public\n_SERVER[\"SystemDrive\"] => C:\n_SERVER[\"SystemRoot\"] => C:\\WINDOWS\n_SERVER[\"TEMP\"] => C:\\Users\\Virsacer\\AppData\\Local\\Temp\n_SERVER[\"TMP\"] => C:\\Users\\Virsacer\\AppData\\Local\\Temp\n_SERVER[\"USERDOMAIN\"] => ERAZER136\n_SERVER[\"USERDOMAIN_ROAMINGPROFILE\"] => ERAZER136\n_SERVER[\"USERNAME\"] => Virsacer\n_SERVER[\"USERPROFILE\"] => C:\\Users\\Virsacer\n_SERVER[\"windir\"] => C:\\WINDOWS\n_SERVER[\"__COMPAT_LAYER\"] => RunAsAdmin\n_SERVER[\"PHP_SELF\"] => \n_SERVER[\"SCRIPT_NAME\"] => \n_SERVER[\"SCRIPT_FILENAME\"] => \n_SERVER[\"PATH_TRANSLATED\"] => \n_SERVER[\"DOCUMENT_ROOT\"] => \n_SERVER[\"REQUEST_TIME_FLOAT\"] => 1411054652.6172\n_SERVER[\"REQUEST_TIME\"] => 1411054652\n_SERVER[\"argv\"] => Array\n(\n)\n_SERVER[\"argc\"] => 0\nPHP License\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the PHP License as published by the PHP Group\nand included in the distribution in the file:  LICENSE\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nIf you did not receive a copy of the PHP license, or have any\nquestions about PHP licensing, please contact license@php.net.\n```\n. Yes, I am using the latest revision. When I add the line, I get this:\n``\nstring(24) \"0?\u00c7\u00b6\u00f8T\u00fa\u00c04\u00f0\u00f5C+\u00df      \u00a8?cc\u00b4\"\nstring(129) \"\\000?Fn$?0?w?\u00a6\u00a6\u00a6+\u00a7s\u00a3?H?\u00eb\u00eb\u00a6?\u00f5\u00d2\u00a6p+\u00db\u00f2\u00fe\u00ea\u00df\u00a6?\u00ee\u00e0\"\u00d8\u00b8?j\u00ad\u00b1\\000I+\u00ef?\u00c6 ?4\u00b6?v\u00f1+\u00d2\u00efi\u00ebS@G'5\u00a6z\u00e8e\u00b60-\u00ea\u00aeP\u00bea,Nfz\u00d6\u00f8Q\u00c7\u00a8\u00a4\u00b8?\u00a6\u00a6)+\u00a0\u00f2-KI0\u00e7+r\u00fe\u00a4%\u00a6?\u00eeh\u00ce\u00dbs\u00fc<\u00abuU\u00a62\"\narray(1) {\n  [0] =>\n  array(6) {\n    'type' =>\n    int(2)\n    'constant' =>\n    int(27)\n    'content' =>\n    array(1) {\n      [0] =>\n      array(6) {\n        ...\n      }\n    }\n    'length' =>\n    int(61)\n    'start' =>\n    int(4)\n    'headerlength' =>\n    int(2)\n  }\n}\nWarning: base64_encode() expects parameter 1 to be string, array given in C:\\CA\\File\\ASN1.php on line 775\nCall Stack:\n    0.0010     227960   1. {main}() C:\\CA\\test.php:0\n    0.0190    2369648   2. File_X509->loadCRL() C:\\CA\\test.php:15\n    0.0330    2401496   3. File_X509->_mapInExtensions() C:\\CA\\File\\X509.php:3114\n    0.0340    2408920   4. File_ASN1->asn1map() C:\\CA\\File\\X509.php:1572\n    0.0340    2409368   5. File_ASN1->asn1map() C:\\CA\\File\\ASN1.php:638\n    0.0350    2410168   6. base64_encode() C:\\CA\\File\\ASN1.php:775\n```\n$asn1 = new File_ASN1(); $asn1->decodeBER($str); gives no output...\n. array(1) {\n  [0] =>\n  array(4) {\n    'start' =>\n    int(0)\n    'headerlength' =>\n    int(2)\n    'type' =>\n    int(13)\n    'length' =>\n    int(47)\n  }\n}\n. No, I did not remove anything - this is all the output I got...\nWhen I remove the overwriting $str = '...'; from your code to actually use the downloaded crl, I get this:\n```\nC:\\CA>php test.php\narray(1) {\n  [0] =>\n  array(5) {\n    'start' =>\n    int(0)\n    'headerlength' =>\n    int(4)\n    'type' =>\n    int(16)\n    'content' =>\n    array(3) {\n      [0] =>\n      array(5) {\n        ...\n      }\n      [1] =>\n      array(5) {\n        ...\n      }\n      [2] =>\n      array(5) {\n        ...\n      }\n    }\n    'length' =>\n    int(5540)\n  }\n}\nC:\\CA>\n```\nIt is strange that we get different results with the same code...\n. Nope:\nYToxOntpOjA7YTo0OntzOjU6InN0YXJ0IjtpOjA7czoxMjoiaGVhZGVybGVuZ3RoIjtpOjI7czo0OiJ0eXBlIjtpOjEzO3M6NjoibGVuZ3RoIjtpOjQ3O319\nWell, I even checked with PHP 5.6.0 x86 NTS wich identifies itself with the string \"PHP 5.6.0 (cli) (built: Aug 27 2014 11:53:11)\" which you posted...\nHave to ask: Do you use the current revision without any local changes?\n@bantu can you reproduce either output?\n. Well, that was fast :-)\nYes, I tested all the scripts and the warning does not appear anymore :+1:\nThe output itself is the same as before - only the output of the code from your last post changed and is now \"as expected\"\n. ",
    "thomasmebes": "Have the last version, same issue. can you help me?\n. you need to test the host?\n. mh. not possible firewall:-(\n. I have the latest version (0.38):\ncd /tmp\ngit clone https://github.com/phpseclib/phpseclib\ncd phpseclib\nI have a file \"/tmp/phpseclib/test.php\" created with the following content:\n``` php\n<?php\n$workDir = DIR;\nset_include_path(get_include_path() . PATH_SEPARATOR . $workDir . '/phpseclib');\ninclude_once 'Net/SSH2.php';\ninclude_once('Net/SFTP.php');\ninclude 'Crypt/RSA.php';\n$sftpData = array();\n$sftpData['hostname'] = '80.152.6.50';\n$sftpData['username'] = 'username';\n$sftpData['password'] = 'password';\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_REALTIME_FILE);\ndefine('NET_SSH2_LOG_REALTIME_FILENAME', $workDir . '/log.txt');\n$ssh = new Net_SSH2($sftpData['hostname']);\necho \"\\n\";\necho $ssh->getServerIdentification();\necho \"\\n\";\n?>\n```\nWhen I run this script:\n```\nroot@webtools01:/tmp/phpseclib# php /tmp/phpseclib/test.php\nPHP Warning:  unpack(): Type C: not enough input, need 1, have 0 in /tmp/phpseclib/phpseclib/Net/SSH2.php on line 1420\nPHP Warning:  extract() expects parameter 1 to be array, boolean given in /tmp/phpseclib/phpseclib/Net/SSH2.php on line 1420\nPHP Notice:  Undefined variable: type in /tmp/phpseclib/phpseclib/Net/SSH2.php on line 1422\nPHP Notice:  Expected SSH_MSG_KEXDH_REPLY in /tmp/phpseclib/phpseclib/Net/SSH2.php on line 1423\nSSH-2.0-OpenSSH_5.8p1-hpn13v11\nPHP Notice:  Connection closed prematurely in /tmp/phpseclib/phpseclib/Net/SSH2.php on line 3143\nroot@webtools01:/tmp/phpseclib#\nThe logfile (/tmp/phpseclib/log.txt) content I've attached here:\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:38:70:31:2d:68:70:6e:31:33:76:31:31:0d:0a  5.8p1-hpn13v11..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:62  b_0.3 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1698, network: 0.0212s)\n00000000  57:d2:78:4c:ff:47:59:69:d4:23:29:61:b9:84:e6:a7  W.xL.GYi.#)a....\n00000010  00:00:00:b7:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  6,diffie-hellman\n00000080  2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67:65:2d  -group-exchange-\n00000090  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:23:73  group1-sha1...#s\n000000d0  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:2c:65  sh-rsa,ssh-dss,e\n000000e0  63:64:73:61:2d:73:68:61:32:2d:6e:69:73:74:70:32  cdsa-sha2-nistp2\n000000f0  35:36:00:00:00:9d:61:65:73:31:32:38:2d:63:74:72  56....aes128-ctr\n00000100  2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32  ,aes192-ctr,aes2\n00000110  35:36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32:35  56-ctr,arcfour25\n00000120  36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73  6,arcfour128,aes\n00000130  31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63  128-cbc,3des-cbc\n00000140  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63:61  ,blowfish-cbc,ca\n00000150  73:74:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32  st128-cbc,aes192\n00000160  2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c  -cbc,aes256-cbc,\n00000170  61:72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c  arcfour,rijndael\n00000180  2d:63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75  -cbc@lysator.liu\n00000190  2e:73:65:00:00:00:9d:61:65:73:31:32:38:2d:63:74  .se....aes128-ct\n000001a0  72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73  r,aes192-ctr,aes\n000001b0  32:35:36:2d:63:74:72:2c:61:72:63:66:6f:75:72:32  256-ctr,arcfour2\n000001c0  35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65  56,arcfour128,ae\n000001d0  73:31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62  s128-cbc,3des-cb\n000001e0  63:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:63  c,blowfish-cbc,c\n000001f0  61:73:74:31:32:38:2d:63:62:63:2c:61:65:73:31:39  ast128-cbc,aes19\n00000200  32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62:63  2-cbc,aes256-cbc\n00000210  2c:61:72:63:66:6f:75:72:2c:72:69:6a:6e:64:61:65  ,arcfour,rijndae\n00000220  6c:2d:63:62:63:40:6c:79:73:61:74:6f:72:2e:6c:69  l-cbc@lysator.li\n00000230  75:2e:73:65:00:00:00:69:68:6d:61:63:2d:6d:64:35  u.se...ihmac-md5\n00000240  2c:68:6d:61:63:2d:73:68:61:31:2c:75:6d:61:63:2d  ,hmac-sha1,umac-\n00000250  36:34:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  64@openssh.com,h\n00000260  6d:61:63:2d:72:69:70:65:6d:64:31:36:30:2c:68:6d  mac-ripemd160,hm\n00000270  61:63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70:65  ac-ripemd160@ope\n00000280  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n00000290  61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39  a1-96,hmac-md5-9\n000002a0  36:00:00:00:69:68:6d:61:63:2d:6d:64:35:2c:68:6d  6...ihmac-md5,hm\n000002b0  61:63:2d:73:68:61:31:2c:75:6d:61:63:2d:36:34:40  ac-sha1,umac-64@\n000002c0  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n000002d0  2d:72:69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d  -ripemd160,hmac-\n000002e0  72:69:70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73  ripemd160@openss\n000002f0  68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d  h.com,hmac-sha1-\n00000300  39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00  96,hmac-md5-96..\n00000310  00:15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e  ..none,zlib@open\n00000320  73:73:68:2e:63:6f:6d:00:00:00:15:6e:6f:6e:65:2c  ssh.com....none,\n00000330  7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  zlib@openssh.com\n00000340  00:00:00:00:00:00:00:00:00:00:00:00:00           .............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0033, network: 0.0001s)\n00000000  d5:37:18:50:cc:11:41:2e:17:3b:f3:a8:d8:7d:55:2c  .7.P..A..;...}U,\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  e9:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  .arcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:65:73:31:32:38:2d:63:74  our128,aes128-ct\n00000080  72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73  r,aes192-ctr,aes\n00000090  32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73:68:31  256-ctr,twofish1\n000000a0  32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:39  28-ctr,twofish19\n000000b0  32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32:35:36  2-ctr,twofish256\n000000c0  2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62:63:2c  -ctr,aes128-cbc,\n000000d0  61:65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35  aes192-cbc,aes25\n000000e0  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:32:38  6-cbc,twofish128\n000000f0  2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39:32:2d  -cbc,twofish192-\n00000100  63:62:63:2c:74:77:6f:66:69:73:68:32:35:36:2d:63  cbc,twofish256-c\n00000110  62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63:2c:62  bc,twofish-cbc,b\n00000120  6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c:6f:77  lowfish-ctr,blow\n00000130  66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d:63:74  fish-cbc,3des-ct\n00000140  72:2c:33:64:65:73:2d:63:62:63:00:00:00:e9:61:72  r,3des-cbc....ar\n00000150  63:66:6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72  cfour256,arcfour\n00000160  31:32:38:2c:61:65:73:31:32:38:2d:63:74:72:2c:61  128,aes128-ctr,a\n00000170  65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36  es192-ctr,aes256\n00000180  2d:63:74:72:2c:74:77:6f:66:69:73:68:31:32:38:2d  -ctr,twofish128-\n00000190  63:74:72:2c:74:77:6f:66:69:73:68:31:39:32:2d:63  ctr,twofish192-c\n000001a0  74:72:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:74  tr,twofish256-ct\n000001b0  72:2c:61:65:73:31:32:38:2d:63:62:63:2c:61:65:73  r,aes128-cbc,aes\n000001c0  31:39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63  192-cbc,aes256-c\n000001d0  62:63:2c:74:77:6f:66:69:73:68:31:32:38:2d:63:62  bc,twofish128-cb\n000001e0  63:2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63  c,twofish192-cbc\n000001f0  2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62:63:2c  ,twofish256-cbc,\n00000200  74:77:6f:66:69:73:68:2d:63:62:63:2c:62:6c:6f:77  twofish-cbc,blow\n00000210  66:69:73:68:2d:63:74:72:2c:62:6c:6f:77:66:69:73  fish-ctr,blowfis\n00000220  68:2d:63:62:63:2c:33:64:65:73:2d:63:74:72:2c:33  h-cbc,3des-ctr,3\n00000230  64:65:73:2d:63:62:63:00:00:00:39:68:6d:61:63:2d  des-cbc...9hmac-\n00000240  73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68  sha2-256,hmac-sh\n00000250  61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c  a1-96,hmac-sha1,\n00000260  68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63  hmac-md5-96,hmac\n00000270  2d:6d:64:35:00:00:00:39:68:6d:61:63:2d:73:68:61  -md5...9hmac-sha\n00000280  32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:31:2d  2-256,hmac-sha1-\n00000290  39:36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  96,hmac-sha1,hma\n000002a0  63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64  c-md5-96,hmac-md\n000002b0  35:00:00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e  5....none....non\n000002c0  65:00:00:00:00:00:00:00:00:00:00:00:00:00        e.............\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0602, network: 0.0001s)\n00000000  00:00:00:81:00:c4:f0:ad:1a:b8:f4:0d:d3:7c:a7:e3  .............|..\n00000010  08:9d:ae:a2:ff:5e:b6:61:dc:69:f4:44:c9:56:86:7c  .....^.a.i.D.V.|\n00000020  57:e8:a0:ba:05:d7:c0:3b:9c:ea:fe:f3:a0:92:5e:2a  W......;......^\n00000030  72:76:1f:8f:3e:c2:1c:ae:80:6c:bb:bf:e3:25:5d:67  rv..>....l...%]g\n00000040  7a:26:4e:c8:7d:71:c8:53:2a:fc:07:61:da:a3:e7:38  z&N.}q.S..a...8\n00000050  d9:7d:7e:96:ac:56:48:32:d5:ac:85:00:bc:60:bb:8f  .}~..VH2.....`..\n00000060  7b:1a:47:4e:cb:14:30:7b:d2:77:b2:fb:db:30:04:84  {.GN..0{.w...0..\n00000070  3a:55:de:1a:00:78:03:d2:f3:10:d8:56:b1:f1:4d:e7  :U...x.....V..M.\n00000080  b9:e7:f8:a7:0d                                   .....\n```\n. On the destination server, I have no access, so no DEBUG3 :-(\nWith \"sftp\" (Linux Command) the connection works and with PHP \"PECL ssh2\" also.\nThe idea with \"kex_algorithms ...\" I have also tried - without success. Another idea or else you need information?\nBest regards,\nThomas\n. ",
    "hifi": "Found a workaround. This way, however, only works for plain text and has a nasty echo back as we're running in an interactive shell but might be enough if you just need to append to text files or something. I would not recommend this though.\n```\n<?php\nrequire_once 'Net/SSH2.php';\n$ssh = new Net_SSH2('remote');\n$ssh->login('user', 'password') or die('Nope');\n$ssh->enablePTY();\n$ssh->exec('cat > hello.txt', false);\n$ssh->write(\"hello world\\n\");\n```\n. With that change, and without enablePTY the test case hangs.\nIt might need that write() would work in non-interactive mode like my patch does but doesn't send the EOF packet and instead there's a separate EOF method so you can pump data in in chunks and send EOF manually at the end.\n. While this hack is probably wrong still, it does allow you to call write() to send the input data to your exec command and read() to read the output. Also requires that you set false as the exec() callback to get a clean channel to work with.\nHowever, you can't chunk the input into multiple write() calls. I tried adding a writeEOF() method and moved the EOF stuff there, but for some reason when multiple data packets were sent (before eof) only the first one ended up in stdin.\nhttp://hifi.iki.fi/0001-Second-attempt-at-making-write-and-read-behave-in-no.patch\n. What I'm trying to do is to use non-interactive shell with fully working stdin and stdout. That means that binary data is also working perfectly fine when that is working. I don't want and don't get a shell prompt because that would be interactive and that is precisely what I don't want to happen as it will cause echo and all sorts of nasty things.\nI wrote an even smaller hack wrapper that tricks phpseclib to think that there is a pty opened and with that I can pass binary data back and forth successfully. You were right that some of the code was redundant but I'm no expert in phpseclib or the SSH2 protocol.\nThe important bit is that it seems stdin EOF needs to be sent before you can call read() to successfully end your input stream and be allowed to read the output of the command. You can do all sorts of fun tricks with it and I've pasted an example of something you could do.\nThat said, if you use exec() without a PTY, this needs to happen: 1) You either send input with write() and EOF or just EOF to tell the other end that there will be no input 2) You read() the output of the command and then you get the exit status code set properly too.\nCurrently phpseclib does not have any way to send the input EOF for non-interactive exec and the code assumes you have a PTY for any IO to occur - hence why the hack now makes it believe there is a PTY.\n```\nclass Hack_SSH2 extends Net_SSH2\n{\n    function exec($command, $callback = null)\n    { \n        $ret = parent::exec($command, $callback);\n        if ($callback === false && $ret !== false) {\n            $this->in_request_pty_exec = true;\n        } \n        return $ret;\n    }   \nfunction write($cmd)\n{   \n    $ret = parent::write($cmd);\n    $this->_send_binary_packet(pack('CN', NET_SSH2_MSG_CHANNEL_EOF, $this->server_channels[NET_SSH2_CHANNEL_EXEC]));\n    return $ret;\n}\n\n}\n```\nAnd a fun thing you can do with working stdin/stdout:\n```\n<?php\nrequire_once 'Net/SSH2.php';\n// Hack_SSH2 wrapper here\n$ssh = new Hack_SSH2('server');\n$ssh->login('user', 'password') or die('Nope');\n$ssh->exec(\"bash -s first second\", false);\n$ssh->write(<<read();  // outputs the echo above\necho \"Exit status: \" . $ssh->getExitStatus() . \"\\n\"; // 1 because bash exits with 1\n```\n. You need to send the write EOF and read stdout of the command/program you are running with read() to close the connection. Are you sure you tested it like that?\nAdding sendEOF/writeEOF would be mostly enough and making sure reset() sends EOF if it hasn't been sent already after the last write.\n. Also I just noticed you enabled the PTY again. Don't do that.\n. ",
    "kruegge82": "hello,\non console i run the script via: php /path/script.php\non cronjob simple as: 00 */1 * * * php /path/script.php\nit uses the same php.ini\ninside the script followed code:\n```\n<?php\ndate_default_timezone_set(\"Europe/Berlin\");\ninclude_once 'Net/SSH2.php';\n$ssh = new Net_SSH2('192.168.0.12');\n$ssh->login('root', 'rootpass') or die(\"Login failed\");\n?>\n```\n. curious, but it works... thank you very much....\n. hello, same output... where can i find the logs?\n. help this?\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:33:0d:0a                                   5.3..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:67:6d:70:29:0d:0a           b_0.3 (gmp)..\n. yes is must it this way:\n$ssh->login('user', 'pass') or $ssh->getLog();\nyes in this output it is all...\n. I try only local IPs or localhost, i cannot connect to anyone. After press enter i get the Echo 1 and 2 then there is a Long Break.\n. so now i have removed all @ signs in SSH2.php, no new errors... the script break after exactly 120 seconds...\n. now i tested also external ip and domains....  same result...\n. I have found the problem.... if \nmbstring.http_output=UTF-8 \nin php.ini the error occurs.... \ni commented it out and the scrit will connect.\n. ",
    "RoelDeveloper": "terrafost, thanks for your reply, well what I ment with it works in the follow example, is that my php doesnt crasht, it does give me a warning that it was unable to connect.\nBut when I use a real IP it crashes for some reason, I may check on the fsockopen() thing.\n$sftp = new Net_SFTP(\"123\");\n$sftp->login(\"test\", \"test\");\n. ",
    "vvolodko": "Added another pull request: https://github.com/phpseclib/phpseclib/pull/488\n. It seems that functions weren't tested by scrutinizer. Unfortunately I have no knowledge how to do this.\n. ",
    "hwsamuel": "Thanks, I can verify that this solved the problem.\n. ",
    "nsuprunpw": "Yes in Random.php but in SSH2 there is no.\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php\n. right, my fault\n. ",
    "ahait": "Yes I had the same problem. It helped installing the bcmath plugin/module for php.. ",
    "cedric-dufour": "@bantu Thanks. I did not report this issue to ownCloud (my use case being rather marginal, as far as I can tell)\n. @terrafrost I confirm #500 (minus hunk#1, applied to ownCloud \"stock\" phpseclib 0.3.6) fixes this issue. Thanks!\n. ",
    "shelvis": "Thank you for your answer.\nI tried it, but there's no difference in the result.\nI don't know how putty works internally, but either typing in a command or pasting it, i think putty send data on enter and not every character i write and maybe delete!?\nbtw: in your examples, commands are also written at once, not char by char\nhttp://phpseclib.sourceforge.net/ssh/examples.html#interactive\nany further ideas?\nhere the new log with every single character send alone\n```\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.5423, network: 0.5422s)\n00000000  00:00:00:01:00:00:00:0c:72:6f:6f:74:40:73:76:69  ........root@svi\n00000010  3a:7e:23:20                                      :~#\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 1.2175, network: 0.0007s)\n00000000  00:00:00:00:00:00:00:01:6d                       ........m\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:01:76                       ........v\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:20                       ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:76                       ........v\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:61                       ........a\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:72                       ........r\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0013, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:76                       ........v\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:69                       ........i\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2d                       ........-\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:65                       ........e\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:68                       ........h\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:64                       ........d\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:63                       ........c\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:69                       ........i\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:70                       ........p\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:65                       ........e\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:32                       ........2\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:20                       ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:76                       ........v\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:61                       ........a\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:72                       ........r\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:77                       ........w\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:76                       ........v\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:69                       ........i\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2d                       ........-\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:65                       ........e\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:68                       ........h\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:64                       ........d\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:63                       ........c\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2f                       ......../\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:69                       ........i\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:73                       ........s\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0007, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:01:74                       ........t\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:70                       ........p\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:65                       ........e\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:32                       ........2\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:2e                       .........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:62                       ........b\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:61                       ........a\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6b                       ........k\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:32                       ........2\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:30                       ........0\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:34                       ........4\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:32                       ........2\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:01:37                       ........7\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:33                       ........3\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:33                       ........3\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:33                       ........3\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:31                       ........1\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:3b                       ........;\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:20                       ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:65                       ........e\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:63                       ........c\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:68                       ........h\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:6f                       ........o\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:20                       ........\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:22                       ........\"\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:43                       ........C\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n00000000  00:00:00:00:00:00:00:01:4f                       ........O\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:4d                       ........M\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:4d                       ........M\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:41                       ........A\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:4e                       ........N\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:44                       ........D\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:46                       ........F\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:49                       ........I\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:4e                       ........N\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:49                       ........I\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:53                       ........S\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:48                       ........H\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:01:45                       ........E\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:44                       ........D\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:5f                       ........_\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:01:22                       ........\"\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n00000000  00:00:00:00:00:00:00:01:0a                       .........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0003s)\n00000000  00:00:00:01:00:00:00:01:6d                       ........m\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:76                       ........v\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:20                       ........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:76                       ........v\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:61                       ........a\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:72                       ........r\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:73                       ........s\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:76                       ........v\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:69                       ........i\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2d                       ........-\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:74                       ........t\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:65                       ........e\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:73                       ........s\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:74                       ........t\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:68                       ........h\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:74                       ........t\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:64                       ........d\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:6f                       ........o\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:63                       ........c\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:73                       ........s\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:69                       ........i\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:73                       ........s\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:6f                       ........o\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:74                       ........t\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:6f                       ........o\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0s)\n00000000  00:00:00:01:00:00:00:01:70                       ........p\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:65                       ........e\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:32                       ........2\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:20                       ........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:76                       ........v\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:61                       ........a\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:72                       ........r\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:77                       ........w\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2f                       ......../\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:73                       ........s\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:76                       ........v\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:69                       ........i\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:01:2d                       ........-\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:74:65:73                 ........tes\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:04:74:2f:68:74              ........t/ht\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:64:6f:63                 ........doc\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:73:2f:69                 ........s/i\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:73:6f:74                 ........sot\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:06:6f:70:20:0d:65:32        ........op .e2\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:0d:2e:62:61:6b:5f:32:30:31  .........bak_201\n00000010  34:31:31:32:37                                   41127\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:0b:31:31:33:33:33:31:3b:20  ........113331;\n00000010  65:63:68                                         ech\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:6f:20:22                 ........o \"\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:5f:5f:43                 ........__C\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0009, network: 0.0008s)\n00000000  00:00:00:01:00:00:00:09:4f:4d:4d:41:4e:44:5f:46  ........OMMAND_F\n00000010  49                                               I\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:06:4e:49:53:48:45:44        ........NISHED\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:05:5f:5f:22:0d:0a           ........__\"..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0096, network: 0.0095s)\n00000000  00:00:00:01:00:00:00:04:6d:76:3a:20              ........mv:\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:4b:41:75:66:72:75:66:20:76  .......KAufruf v\n00000010  6f:6e:20:73:74:61:74:20:66:c3:bc:72:20:e2:80:9e  on stat f..r ...\n00000020  2f:76:61:72:2f:77:77:77:2f:73:76:69:2d:74:65:73  /var/www/svi-tes\n00000030  74:2f:68:74:64:6f:63:73:2f:69:73:6f:74:6f:70:65  t/htdocs/isotope\n00000040  32:e2:80:9c:20:6e:69:63:68:74:20:6d:c3:b6:67:6c  2... nicht m..gl\n00000050  69:63:68                                         ich\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0.0003s)\n00000000  00:00:00:01:00:00:00:27:3a:20:44:61:74:65:69:20  .......': Datei\n00000010  6f:64:65:72:20:56:65:72:7a:65:69:63:68:6e:69:73  oder Verzeichnis\n00000020  20:6e:69:63:68:74:20:67:65:66:75:6e:64:65:6e      nicht gefunden\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:02:0d:0a                    ..........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0017, network: 0.0016s)\n00000000  00:00:00:01:00:00:00:22:5f:5f:43:4f:4d:4d:41:4e  .......\"COMMAN\n00000010  44:5f:46:49:4e:49:53:48:45:44:5f:5f:0d:0a:72:6f  D_FINISHED..ro\n00000020  6f:74:40:73:76:69:3a:7e:23:20                    ot@svi:~#\n```\n. > Anyway, looking at your logs, it looks like the server is actually sending everything back in order but there are carriage returns that are in the output that are kinda resetting the output. eg.\nThat did the trick!\nSimply adding\nphp\n$result = str_replace(\"\\r\", '', $result);\nand everything looks good.\nThank you very much for your help!\n. ",
    "sebastianfeldmann": "Any thoughts on a timeline for the PSR4 feature?\n. \"End of the year\" would be awesome. As you may have noticed, I'm not very familiar with developing for PEAR, so I won't be of much help keeping that working, but if you can think of anything, it would be my pleasure to help :)\n. I'm using https://github.com/theseer/Autoload to create the PHAR.\nCopying all required sources to a 'phar' directory. E.g. copying the 'vendor/phpseclib/phpseclib/phpseclib' folder to 'phar/phpseclib'. After copying all the files I use the 'phpab'  command line tool that scans all php files inside the phar directory, creates an 'phar-autoloader' and the PHAR.\nYou can have a look at my ant file that is creating the PHAR at https://github.com/sebastianfeldmann/phpbu/blob/master/build.xml\nI haven't commited the phpseclib inclusion yet because it would break the PHAR but you get a good idea how the generation process works.\nThe only problem are the 'include' statements. If you would rely on an autoloader and remove those it would work perfectly.\n@terrafrost you are right it's the same problem as #196 I see the same error messages.\nBecause no class files could be found by 'phpseclib_resolve_include_path' the $encryption_algorithms array is empty and you end up with 'No compatible server to client encryption algorithms found'\n. I'm useing \"phpseclib/phpseclib\": \"0.3.*@dev\".\nThese are failing as well.\nSSH2.php:861 - 863\nphp\nif (!function_exists('crypt_random_string')) {\n   include_once 'Crypt/Random.php';\n}\n. PHP 5.6.3\n. Tested on my PHP 5.5.14 Box\nPHP Warning:  include_once(Crypt/Random.php): failed to open stream: No such file or directory in phar:///dev/php/phpbu/build/phpbu-1.0-dev.phar/phpseclib/Net/SSH2.php on line 862\nPHP Warning:  include_once(): Failed opening 'Crypt/Random.php' for inclusion (include_path='/dev/php/phpbu/.:.:') in phar:///dev/php/phpbu/build/phpbu-1.0-dev.phar/phpseclib/Net/SSH2.php on line 862\nPHP Fatal error:  Call to undefined function phpseclib_resolve_include_path() in phar:///dev/php/phpbu/build/phpbu-1.0-dev.phar/phpseclib/Net/SSH2.php on line 1138\n. ",
    "lordspace": "Is there an update on this?\nI am trying to package it into another project which I am going to use phar for.\nIt's not working (openssl_pkey_export cannot get key from parameter 1 ... ) etc. when trying to generate a key using phpseclib\\Crypt\\RSA::PUBLIC_FORMAT_OPENSSH format and many more messages.\nThe code works fine when I ran it normally but when I package using phar it's not working.\nver.2.0\n. ",
    "tomzx": "Is there an ETA on the 2.0 tag? Depending on dev-master isn't nice :cry:.\n. @GrahamCampbell What is the proper version constraint to use for the 2.x branch?\n. Sorry, I guess I wasn't clear. I was asking when there would be a stable tag.\n. ",
    "montdidier": "@bantu It works much like as described in #505. I just forwarding the request data to the agent socket. Although I didn't have to define SSH_AUTH_SOCK on the server explicitly - it seems the ssh daemon does that and links that local socket to the ssh channel linked to the socket on client side agent.\n. Looks like I will need to work out how to get the tests passing too. \n. Thanks guys. I'll update this PR based on feedback shortly. \n. @terrafrost Thanks for the feedback. I'll start backwards. \nI can squash this PR down to one commit, which probably isn't a big deal since nobody would have forked from my branch. Standby on that. Although it will probably collapse all the \"context\" comments on this PR thread.\nI'll add some documentation blocks.\nWith regard to having code to support forwarding in the Net_SSH2 file itself. I was thinking in terms of locating the functionality in the layer of code where the bulk of the activity was going to be. It is mostly about sending packets and so on, and the Net_SSH2 file is the place where it was all happening. The forward request and acknowledgement are all part of the SSH2 standard so it doesn't feel completely out of place to me. It is a very explicit carveout to enable the functionality, so I can have a think about smoothing that out a little. If you have any clear suggestions I am all ears.\nI am happy to change the API to allow controlling the scope of the forwarding. It's not clear to me that it  would be a common use case. Perhaps for somebody worried about security (say in a multi user environment) and wanting to run everything in a privilege escalate, de-escalate pattern. Indeed in a command line client session you kind of have it the whole time if enabled. I don't have a strong feeling for or against on this.\nI think the System_SSH_Agent will only ever realistically be used in its existing environment, it's the total ensemble that is going to be re-used, unlikely to be piecemeal.\nAnyway. Let me digest what you've said and I'll come back with cleanups or a new PR for us to discuss further.\n. Actually I am wrong. It doesn't seem like agent-forwarding is part of the standard at all just a common feature built atop. It is only mentioned in rfc4254 as a security implication. Ok. Will factor this into my changes. \n. @terrafrost I've made a bunch of changes based on your suggestions. Let me know how you feel about them. \n. ok. I'll try an implementation with a start/stop pattern.\n. FYI. I am looking at this, this weekend. \n. This multi-commit PR has been superseded by this one commit PR https://github.com/phpseclib/phpseclib/pull/592\nWill close this PR shortly. \n. Yes I squashed many commits already in this PR but thought you might want a new PR as per mention earlier in discussion. Let me know your preference. \n. With regard to the open new channel/use existing implementation possibilities. I don't think either is incorrect per se. I do agree that it is neater - my first attempt at that implementation did not work, and I'm not clear why yet. I will try again and hopefully can commit something along those lines soon.\n. @bantu Adding a test expecting failure after the stopSSHForward did not work on my first try. I suspect the credentials might be cached during the session by the SSH server. I'll need to confirm what is going on there.\n. @bantu you are right that it is not caching credentials. The connection is closing but the ssh server is requesting it to open again because of the original forwarding request. Unfortunately I am not aware of a way to \"switch off\" that flag (it is session persistent) once set on the server side - so we may just have to refuse the channel open request as a workaround to ensure the forwarded authentication request is refused. \n. I will remove stopSSHForwarding.\n. @terrafrost  I will have one more try at using an existing channel to setup the forwarding. If I fail I will call on your assistance. \n. @terrafrost @bantu Sorry this has taken so long. I've hopefully addressed the bulk of your feedback with this last checkin. I re-use an existing open channel to make a forwarding request. stopSSHForwarding has been removed and I've added an on channel open handler method. Please have a looksee and let me know what next.\n. @terrafrost I've responded to your last comments. I'll keep an eye out for any updates over the next few days but hopefully that gets this PR over the line.\n. Fantastic! Thanks @terrafrost and @bantu for your feedback and patience. \n. NOTE: I changed this because according to rfc4254  5.3 \"... Upon receiving this message, a party MUST send back an SSH_MSG_CHANNEL_CLOSE\" in conjunction with \" ... A party MAY send\n   SSH_MSG_CHANNEL_CLOSE without having sent or received\n   SSH_MSG_CHANNEL_EOF.\" suggests to me the check for state EOF is problematic. Certainly I was getting connection errors because the backed sshd had used up all the channels with CLOSE messages missing in action due to this original clause. \n. Yes I can see now we are using EOF channel state to track state about who initiated CLOSE. This only works because EOF message from server is ignored (with regards to channel state transition). In that case I probably broke this by starting to track server initiated EOF (see L3205 below). Would you prefer to implement it this way rather than track if client CLOSE has been sent explicitly?I don't know if server initiated EOF is actually useful practically - but it would reflect the actual state of the channel.\n. It only does this if you request it (i.e.) from startSSHForwarding - that would be expected behaviour wouldn't it? As for private/protected. Since the language itself doesn't complain, I'm using this like a friend function. I basically don't want this method to be used anywhere else. There may be a more PHP idiomatic way to to do this?. \n. Are you talking about the semi-colon typo? \n. Will add.\n. ",
    "aaroniker": "Thanks! What namespace i have to use?\n. Oh ok, thanks.\nThe php5 branch is ?\n. @metaclassing thanks a lot for that answer!\nSo I think I'll have a look at websockets :). @terrafrost thanks mate, i'll have a look and test some things. ",
    "khurshid-alam": "@terrafrost Thanks. But that solution was provided for selinux. My server runs on Ubuntu(14.04). I will try & find solution for fsockopen related problem on Ubuntu & comment here.\n. Now that you closed it, let me leave a comment:\nIt happens because of SELinux policies, which I can't change on Openshift online. However if I changed it in Openshift Origin, it seems it works.\n. ",
    "haphan": "@terite Agree. I will make the code clear that only numeric version is to compare.\n. Oops... ping the wrong person :cry:   @terrafrost \n. Thank you @cnelissen. All is well now.\n. @terrafrost thanks for explaining the patch. Is it ok to merge?\n. @bantu done\n. ",
    "terite": "I think you may've meant to mention @terrafrost \n. ",
    "87cms": "Thank you for your support !\nI tried with your previous code, and I have a very strange behavior : \n- RHEL 7 : not working with Warning/Notices\n- Debian 7 : working perfectly\nConfig and services installed are the same on this two servers.\nSo this \"bug\" maybe comes from OS and not from phpseclib.\n. Many thanks !\nRHEL 7 : \nhtml\nserialized = 50\ntemp = 43\n<br />\n<b>Notice</b>:  Undefined offset: 3 in <b>/var/www/lib/phpseclib/Crypt/Base.php(1989) : runtime-created function</b> on line <b>319</b><br />\n<br />\n<b>Notice</b>:  Undefined offset: 4 in <b>/var/www/lib/phpseclib/Crypt/Base.php(1989) : runtime-created function</b> on line <b>320</b><br />\nDebian : \nhtml\nserialized = 50\ntemp = 64\na:2:{s:2:\"k1\";s:6:\"value1\";s:2:\"k2\";s:6:\"value2\";}\n. Here is the result :\nhtml\nserialized = 50\n_pad called\nperforming PKCS7 padding\ntemp = 43\n. And here is the new output :\n``` html\nserialized = 50\n_pad called\nperforming PKCS7 padding\npad = 14\nblock_size = 16\nlength = 50\nresult = 64\ntemp = 43\n\nNotice:  Undefined offset: 3 in /var/www/lib/phpseclib/Crypt/Base.php(2011) : runtime-created function on line 319\n\nNotice:  Undefined offset: 4 in /var/www/lib/phpseclib/Crypt/Base.php(2011) : runtime-created function on line 320\n. html\nserialized = 50\n_pad called\nperforming PKCS7 padding\npad = 14\nblock_size = 16\nlength = 50\nresult = 64\n_text_len = 64\n_ciphertext_len = 43\ntemp = 43\n\nNotice:  Undefined offset: 3 in /var/www/lib/phpseclib/Crypt/Base.php(2013) : runtime-created function on line 321\n\nNotice:  Undefined offset: 4 in /var/www/lib/phpseclib/Crypt/Base.php(2013) : runtime-created function on line 322\n. html\nserialized = 50\n_pad called\nperforming PKCS7 padding\npad = 14\nblock_size = 16\nlength = 50\nresult = 64\n_text_len = 64\nadding 11 to ciphertext (0)\nadding 9 to ciphertext (11)\nadding 10 to ciphertext (19)\nadding 14 to ciphertext (29)\n_ciphertext_len = 43\ntemp = 43\n\nNotice:  Undefined offset: 3 in /var/www/lib/phpseclib/Crypt/Base.php(2014) : runtime-created function on line 322\n\nNotice:  Undefined offset: 4 in /var/www/lib/phpseclib/Crypt/Base.php(2014) : runtime-created function on line 323\n```\n. Thanks for taking some time for this request.\nI think it's working now  : \n``` html\nserialized = 50\n_pad called\nperforming PKCS7 padding\npad = 14\nblock_size = 16\nlength = 50\nresult = 64\n_text_len = 64\nparam[0 / 4] = 4092779460\nparam[1 / 4] = 925454021\nparam[2 / 4] = 3778223681\nparam[3 / 4] = 2329583302\nadding 16 to ciphertext (0)\nparam[0 / 4] = 775874531\nparam[1 / 4] = 3745246956\nparam[2 / 4] = 2844776049\nparam[3 / 4] = 3939646365\nadding 16 to ciphertext (16)\nparam[0 / 4] = 730785934\nparam[1 / 4] = 1059228756\nparam[2 / 4] = 4081141143\nparam[3 / 4] = 2429426877\nadding 16 to ciphertext (32)\nparam[0 / 4] = 3871489125\nparam[1 / 4] = 4178030946\nparam[2 / 4] = 1629592885\nparam[3 / 4] = 808615072\nadding 16 to ciphertext (48)\n_ciphertext_len = 64\ntemp = 64\na:2:{s:2:\"k1\";s:6:\"value1\";s:2:\"k2\";s:6:\"value2\";}\n```\n. I understand, I will ask if someone in your team has updated the VM template.\nHere is the new result : \n`````` html\nserialized = 50\n            static $t0, $t1, $t2, $t3, $sbox;\n            if (!$t0) {\n                for ($i = 0; $i < 256; ++$i) {\n                    $t0[$i]    = (int)$self->t0[$i];\n                    $t1[$i]    = (int)$self->t1[$i];\n                    $t2[$i]    = (int)$self->t2[$i];\n                    $t3[$i]    = (int)$self->t3[$i];\n                    $sbox[$i]  = (int)$self->sbox[$i];\n                }\n            }\n\n                $_ciphertext = \"\";\n                $_text = $self->_pad($_text);\n                $_plaintext_len = strlen($_text);\n\n                $in = $self->encryptIV;\n\n                for ($_i = 0; $_i < $_plaintext_len; $_i+= 16) {\n                    $in = substr($_text, $_i, 16) ^ $in;\n                    $in = unpack(\"N*\", $in);\n\n$s0 = $in[1] ^ 1751477356;\n$s1 = $in[2] ^ 1869899881;\n$s2 = $in[3] ^ 1936290669;\n$s3 = $in[4] ^ 2037081465;\n$e0 =\n                        $t0[($s0 >> 24) & 0xff] ^\n                        $t1[($s1 >> 16) & 0xff] ^\n                        $t2[($s2 >>  8) & 0xff] ^\n                        $t3[ $s3        & 0xff] ^\n                        371776218;\n$e1 =\n                        $t0[($s1 >> 24) & 0xff] ^\n                        $t1[($s2 >> 16) & 0xff] ^\n                        $t2[($s3 >>  8) & 0xff] ^\n                        $t3[ $s0        & 0xff] ^\n                        2036118195;\n$e2 =\n                        $t0[($s2 >> 24) & 0xff] ^\n                        $t1[($s3 >> 16) & 0xff] ^\n                        $t2[($s0 >>  8) & 0xff] ^\n                        $t3[ $s1        & 0xff] ^\n                        171295198;\n$e3 =\n                        $t0[($s3 >> 24) & 0xff] ^\n                        $t1[($s0 >> 16) & 0xff] ^\n                        $t2[($s1 >>  8) & 0xff] ^\n                        $t3[ $s2        & 0xff] ^\n                        1935582375;\n$s0 =\n                        $t0[($e0 >> 24) & 0xff] ^\n                        $t1[($e1 >> 16) & 0xff] ^\n                        $t2[($e2 >>  8) & 0xff] ^\n                        $t3[ $e3        & 0xff] ^\n                        1281459797;\n$s1 =\n                        $t0[($e1 >> 24) & 0xff] ^\n                        $t1[($e2 >> 16) & 0xff] ^\n                        $t2[($e3 >>  8) & 0xff] ^\n                        $t3[ $e0        & 0xff] ^\n                        893203686;\n$s2 =\n                        $t0[($e2 >> 24) & 0xff] ^\n                        $t1[($e3 >> 16) & 0xff] ^\n                        $t2[($e0 >>  8) & 0xff] ^\n                        $t3[ $e1        & 0xff] ^\n                        1057551672;\n$s3 =\n                        $t0[($e3 >> 24) & 0xff] ^\n                        $t1[($e0 >> 16) & 0xff] ^\n                        $t2[($e1 >>  8) & 0xff] ^\n                        $t3[ $e2        & 0xff] ^\n                        1280725407;\n$e0 =\n                        $t0[($s0 >> 24) & 0xff] ^\n                        $t1[($s1 >> 16) & 0xff] ^\n                        $t2[($s2 >>  8) & 0xff] ^\n                        $t3[ $s3        & 0xff] ^\n                        4189085052;\n$e1 =\n                        $t0[($s1 >> 24) & 0xff] ^\n                        $t1[($s2 >> 16) & 0xff] ^\n                        $t2[($s3 >>  8) & 0xff] ^\n                        $t3[ $s0        & 0xff] ^\n                        3431819674;\n$e2 =\n                        $t0[($s2 >> 24) & 0xff] ^\n                        $t1[($s3 >> 16) & 0xff] ^\n                        $t2[($s0 >>  8) & 0xff] ^\n                        $t3[ $s1        & 0xff] ^\n                        4085619874;\n$e3 =\n                        $t0[($s3 >> 24) & 0xff] ^\n                        $t1[($s0 >> 16) & 0xff] ^\n                        $t2[($s1 >>  8) & 0xff] ^\n                        $t3[ $s2        & 0xff] ^\n                        3218328893;\n$s0 =\n                        $t0[($e0 >> 24) & 0xff] ^\n                        $t1[($e1 >> 16) & 0xff] ^\n                        $t2[($e2 >>  8) & 0xff] ^\n                        $t3[ $e3        & 0xff] ^\n                        2534242932;\n$s1 =\n                        $t0[($e1 >> 24) & 0xff] ^\n                        $t1[($e2 >> 16) & 0xff] ^\n                        $t2[($e3 >>  8) & 0xff] ^\n                        $t3[ $e0        & 0xff] ^\n                        1535120366;\n$s2 =\n                        $t0[($e2 >> 24) & 0xff] ^\n                        $t1[($e3 >> 16) & 0xff] ^\n                        $t2[($e0 >>  8) & 0xff] ^\n                        $t3[ $e1        & 0xff] ^\n                        2818936652;\n$s3 =\n                        $t0[($e3 >> 24) & 0xff] ^\n                        $t1[($e0 >> 16) & 0xff] ^\n                        $t2[($e1 >>  8) & 0xff] ^\n                        $t3[ $e2        & 0xff] ^\n                        399917681;\n$e0 =\n                        $t0[($s0 >> 24) & 0xff] ^\n                        $t1[($s1 >> 16) & 0xff] ^\n                        $t2[($s2 >>  8) & 0xff] ^\n                        $t3[ $s3        & 0xff] ^\n                        1898043780;\n$e1 =\n                        $t0[($s1 >> 24) & 0xff] ^\n                        $t1[($s2 >> 16) & 0xff] ^\n                        $t2[($s3 >>  8) & 0xff] ^\n                        $t3[ $s0        & 0xff] ^\n                        715246186;\n$e2 =\n                        $t0[($s2 >> 24) & 0xff] ^\n                        $t1[($s3 >> 16) & 0xff] ^\n                        $t2[($s0 >>  8) & 0xff] ^\n                        $t3[ $s1        & 0xff] ^\n                        2191803686;\n$e3 =\n                        $t0[($s3 >> 24) & 0xff] ^\n                        $t1[($s0 >> 16) & 0xff] ^\n                        $t2[($s1 >>  8) & 0xff] ^\n                        $t3[ $s2        & 0xff] ^\n                        2507278167;\n$s0 =\n                        $t0[($e0 >> 24) & 0xff] ^\n                        $t1[($e1 >> 16) & 0xff] ^\n                        $t2[($e2 >>  8) & 0xff] ^\n                        $t3[ $e3        & 0xff] ^\n                        300188334;\n$s1 =\n                        $t0[($e1 >> 24) & 0xff] ^\n                        $t1[($e2 >> 16) & 0xff] ^\n                        $t2[($e3 >>  8) & 0xff] ^\n                        $t3[ $e0        & 0xff] ^\n                        994396356;\n$s2 =\n                        $t0[($e2 >> 24) & 0xff] ^\n                        $t1[($e3 >> 16) & 0xff] ^\n                        $t2[($e0 >>  8) & 0xff] ^\n                        $t3[ $e1        & 0xff] ^\n                        3118534114;\n$s3 =\n                        $t0[($e3 >> 24) & 0xff] ^\n                        $t1[($e0 >> 16) & 0xff] ^\n                        $t2[($e1 >>  8) & 0xff] ^\n                        $t3[ $e2        & 0xff] ^\n                        747834037;\n$e0 =\n                        $t0[($s0 >> 24) & 0xff] ^\n                        $t1[($s1 >> 16) & 0xff] ^\n                        $t2[($s2 >>  8) & 0xff] ^\n                        $t3[ $s3        & 0xff] ^\n                        2374195167;\n$e1 =\n                        $t0[($s1 >> 24) & 0xff] ^\n                        $t1[($s2 >> 16) & 0xff] ^\n                        $t2[($s3 >>  8) & 0xff] ^\n                        $t3[ $s0        & 0xff] ^\n                        3066437403;\n$e2 =\n                        $t0[($s2 >> 24) & 0xff] ^\n                        $t1[($s3 >> 16) & 0xff] ^\n                        $t2[($s0 >>  8) & 0xff] ^\n                        $t3[ $s1        & 0xff] ^\n                        254219001;\n$e3 =\n                        $t0[($s3 >> 24) & 0xff] ^\n                        $t1[($s0 >> 16) & 0xff] ^\n                        $t2[($s1 >>  8) & 0xff] ^\n                        $t3[ $s2        & 0xff] ^\n                        599005260;\n$s0 =\n                        $t0[($e0 >> 24) & 0xff] ^\n                        $t1[($e1 >> 16) & 0xff] ^\n                        $t2[($e2 >>  8) & 0xff] ^\n                        $t3[ $e3        & 0xff] ^\n                        2150530809;\n$s1 =\n                        $t0[($e1 >> 24) & 0xff] ^\n                        $t1[($e2 >> 16) & 0xff] ^\n                        $t2[($e3 >>  8) & 0xff] ^\n                        $t3[ $e0        & 0xff] ^\n                        921199074;\n$s2 =\n                        $t0[($e2 >> 24) & 0xff] ^\n                        $t1[($e3 >> 16) & 0xff] ^\n                        $t2[($e0 >>  8) & 0xff] ^\n                        $t3[ $e1        & 0xff] ^\n                        969896731;\n$s3 =\n                        $t0[($e3 >> 24) & 0xff] ^\n                        $t1[($e0 >> 16) & 0xff] ^\n                        $t2[($e1 >>  8) & 0xff] ^\n                        $t3[ $e2        & 0xff] ^\n                        444296023;\n$e0 =\n                        $t0[($s0 >> 24) & 0xff] ^\n                        $t1[($s1 >> 16) & 0xff] ^\n                        $t2[($s2 >>  8) & 0xff] ^\n                        $t3[ $s3        & 0xff] ^\n                        3125880155;\n$e1 =\n                        $t0[($s1 >> 24) & 0xff] ^\n                        $t1[($s2 >> 16) & 0xff] ^\n                        $t2[($s3 >>  8) & 0xff] ^\n                        $t3[ $s0        & 0xff] ^\n                        2360951993;\n$e2 =\n                        $t0[($s2 >> 24) & 0xff] ^\n                        $t1[($s3 >> 16) & 0xff] ^\n                        $t2[($s0 >>  8) & 0xff] ^\n                        $t3[ $s1        & 0xff] ^\n                        3044423586;\n$e3 =\n                        $t0[($s3 >> 24) & 0xff] ^\n                        $t1[($s0 >> 16) & 0xff] ^\n                        $t2[($s1 >>  8) & 0xff] ^\n                        $t3[ $s2        & 0xff] ^\n                        2936888565;\n$e0 =\n                     $sbox[ $e0        & 0xff]        |\n                    ($sbox[($e0 >>  8) & 0xff] <<  8) |\n                    ($sbox[($e0 >> 16) & 0xff] << 16) |\n                    ($sbox[($e0 >> 24) & 0xff] << 24);\n$e1 =\n                     $sbox[ $e1        & 0xff]        |\n                    ($sbox[($e1 >>  8) & 0xff] <<  8) |\n                    ($sbox[($e1 >> 16) & 0xff] << 16) |\n                    ($sbox[($e1 >> 24) & 0xff] << 24);\n$e2 =\n                     $sbox[ $e2        & 0xff]        |\n                    ($sbox[($e2 >>  8) & 0xff] <<  8) |\n                    ($sbox[($e2 >> 16) & 0xff] << 16) |\n                    ($sbox[($e2 >> 24) & 0xff] << 24);\n$e3 =\n                     $sbox[ $e3        & 0xff]        |\n                    ($sbox[($e3 >>  8) & 0xff] <<  8) |\n                    ($sbox[($e3 >> 16) & 0xff] << 16) |\n                    ($sbox[($e3 >> 24) & 0xff] << 24);\n$in = pack(\"N*\"\n,\n                    ($e0 & 0xFF000000) ^\n                    ($e1 & 0x00FF0000) ^\n                    ($e2 & 0x0000FF00) ^\n                    ($e3 & 0x000000FF) ^\n                    1528546082\n,\n                    ($e1 & 0xFF000000) ^\n                    ($e2 & 0x00FF0000) ^\n                    ($e3 & 0x0000FF00) ^\n                    ($e0 & 0x000000FF) ^\n                    3617752987\n,\n                    ($e2 & 0xFF000000) ^\n                    ($e3 & 0x00FF0000) ^\n                    ($e0 & 0x0000FF00) ^\n                    ($e1 & 0x000000FF) ^\n                    1658105913\n,\n                    ($e3 & 0xFF000000) ^\n                    ($e0 & 0x00FF0000) ^\n                    ($e1 & 0x0000FF00) ^\n                    ($e2 & 0x000000FF) ^\n                    3453611212\n);echo \"param[0 / 4] = \".(                    ($e0 & 0xFF000000) ^\n                    ($e1 & 0x00FF0000) ^\n                    ($e2 & 0x0000FF00) ^\n                    ($e3 & 0x000000FF) ^\n                    1528546082) . \"\\r\\n\";echo \"param[1 / 4] = \".(                    ($e1 & 0xFF000000) ^\n                    ($e2 & 0x00FF0000) ^\n                    ($e3 & 0x0000FF00) ^\n                    ($e0 & 0x000000FF) ^\n                    3617752987) . \"\\r\\n\";echo \"param[2 / 4] = \".(                    ($e2 & 0xFF000000) ^\n                    ($e3 & 0x00FF0000) ^\n                    ($e0 & 0x0000FF00) ^\n                    ($e1 & 0x000000FF) ^\n                    1658105913) . \"\\r\\n\";echo \"param[3 / 4] = \".(                    ($e3 & 0xFF000000) ^\n                    ($e0 & 0x00FF0000) ^\n                    ($e1 & 0x0000FF00) ^\n                    ($e2 & 0x000000FF) ^\n                    3453611212) . \"\\r\\n\";\n                        $_ciphertext.= $in;\n                    }\n                if ($self->continuousBuffer) {\n                    $self->encryptIV = $in;\n                }\n\n                return $_ciphertext;\n                _pad called\n\nperforming PKCS7 padding\npad = 14\nblock_size = 16\nlength = 50\nresult = 64\nparam[0 / 4] = 4092779460\nparam[1 / 4] = 925454021\nparam[2 / 4] = 3778223681\nparam[3 / 4] = 2329583302\nparam[0 / 4] = 775874531\nparam[1 / 4] = 3745246956\nparam[2 / 4] = 2844776049\nparam[3 / 4] = 3939646365\nparam[0 / 4] = 730785934\nparam[1 / 4] = 1059228756\nparam[2 / 4] = 4081141143\nparam[3 / 4] = 2429426877\nparam[0 / 4] = 3871489125\nparam[1 / 4] = 4178030946\nparam[2 / 4] = 1629592885\nparam[3 / 4] = 808615072\ntemp = 64\na:2:{s:2:\"k1\";s:6:\"value1\";s:2:\"k2\";s:6:\"value2\";}\n```html\n``````\n. EDIT : FYI, a member of our team has installed imageMagick via pecl on the VM template. \nSo I have tested with a fresh phpseclib 0.3.9, and all is working perfectly now !\nMaybe your first intuition was right, it was a php bug.\nMany thanks for your help !\n. ",
    "Fuitad": "I just upgraded my PHP installation (PHP 5.6.4 (cli) (built: Jan  7 2015 14:26:17)) and I'm getting the same result. Both 0.3.8 and 0.3.9 refuse to parse pretty much all of my CSR.\nFor what's worth, I'm running OSX Yosemite.\nI hope this info helps.\n. Hey there! :) I emailed you two CSR for you to test. I used the email displayed on your github profile. I hope that's OK.\n. Sorry for taking so long to get back. It's working with that change.\n. Sent it to you privately. \n. I was able to get loadCSR to load by commenting out line 664 of ASN1.php\n} elseif (!isset($child['optional'])) {\n  //return null; // Syntax error.\n}\nand by modifying line 669 of the same file\n// Fail mapping if all input items have not been consumed.\nreturn $map; //$i < $n? null: $map;\nI have no idea if I'm breaking more things in the process tho since I really don't fully understand what's going :P. But hopefully, this will help you debug. Thanks!\n. appears to be working, thanks! :)\n. ",
    "guiramadasa": "sure. Will do so and update this thread.\nThanks a lot for the prompt reply\n. ",
    "asherkin": "Sweet, thanks for the detailed example! I look forward to seeing where File_X509 goes in the future.\n. ",
    "metaclassing": "I grabbed the latest code off github and modified the line you mentioned in #628 , I guess I misunderstood something. I'm getting a binary blob at the end of the cert object:\n[signatureSubject] => 0^\u00c2^D\u00be\u00a0^C^B^A^B^B^SP^@^@^@^M^\u00c3\u00c6\u00c4\u00e88k,^@^@^@^@^@^M0^M^F    ^\u00c6H^\u00c6\u00f7^M^A^A^K^E^@0\"1 0^^^F^CU^D^C^S^W.Secure Enterprise CA...\nI can recursively iterate through the currentcert/tbscert looking for base64 strings and decoding them into nested arrays, that gets me closer to reading the extensions I guess but a little painful to decode the data that way. Maybe I am missing the big picture?\n. So i saw some commits regarding ASN1 parsing and pulled the latest code. This is my test case, could you tell me if it works or breaks in your environment?\n``` php\nset_include_path( get_include_path() . PATH_SEPARATOR . BASEDIR . \"/include/phpseclib-master\" );\nrequire_once(\"File/X509.php\");\nrequire_once(\"File/ASN1.php\");\nrequire_once(\"Crypt/RSA.php\");\nrequire_once(\"Math/BigInteger.php\");\nuse phpseclib\\File;\nuse phpseclib\\File\\X509;\nuse phpseclib\\File\\ASN1;\n$BER = <<<END\nMIIG1jCCBL6gAwIBAgITUAAAAA0qg8bE6DhrLAAAAAAADTANBgkqhkiG9w0BAQsF\nADAiMSAwHgYDVQQDExcuU2VjdXJlIEVudGVycHJpc2UgQ0EgMTAeFw0xNTAyMjMx\nNTE1MDdaFw0xNjAyMjMxNTE1MDdaMD8xFjAUBgoJkiaJk/IsZAEZFgZzZWN1cmUx\nDjAMBgNVBAMTBVVzZXJzMRUwEwYDVQQDEwxtZXRhY2xhc3NpbmcwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMdG1CzR/gTalbLN9J+2cvMGeD7wsR7S78\nHU5hdwE+kECROjRAcjFBOR57ezSDrkmhkTzo28tj0oAHjOh8N9vuXtASfZSCXugx\nH+ImJ+E7PA4aXBp+0H2hohW9sXNNCFiVNmJLX66O4bxIeKtVRq/+eSNijV4OOEkC\nzMyTHAUbOFP0t6KoJtM1syNoQ1+fKdfcjz5XtiEzSVcp2zf0MwNFSeZSgGQ0jh8A\nKd6YVKA8ZnrqOWZxKETT+bBNTjIT0ggjQfzcE4zW2RzrN7zWabUowoU92+DAp4s3\nsAEywX9ISSge62DEzTnZZSf9bpoScAfT8raRFA3BkoJ/s4c4CgfPAgMBAAGjggLm\nMIIC4jAdBgNVHQ4EFgQULlIyJL9+ZwAI/SkVdsJMxFOVp+EwHwYDVR0jBBgwFoAU\n5nEIMEUT5mMd1WepmviwgK7dIzwwggEKBgNVHR8EggEBMIH+MIH7oIH4oIH1hoG5\nbGRhcDovLy9DTj0uU2VjdXJlJTIwRW50ZXJwcmlzZSUyMENBJTIwMSxDTj1hdXRo\nLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxD\nTj1Db25maWd1cmF0aW9uLERDPXNlY3VyZT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25M\naXN0P2Jhc2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGN2h0dHA6\nLy9jcmwuc2VjdXJlb2JzY3VyZS5jb20vP2FjdGlvbj1jcmwmY2E9ZW50ZXJwcmlz\nZTEwgccGCCsGAQUFBwEBBIG6MIG3MIG0BggrBgEFBQcwAoaBp2xkYXA6Ly8vQ049\nLlNlY3VyZSUyMEVudGVycHJpc2UlMjBDQSUyMDEsQ049QUlBLENOPVB1YmxpYyUy\nMEtleSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRpb24sREM9\nc2VjdXJlP2NBQ2VydGlmaWNhdGU/YmFzZT9vYmplY3RDbGFzcz1jZXJ0aWZpY2F0\naW9uQXV0aG9yaXR5MBcGCSsGAQQBgjcUAgQKHggAVQBzAGUAcjAOBgNVHQ8BAf8E\nBAMCBaAwKQYDVR0lBCIwIAYKKwYBBAGCNwoDBAYIKwYBBQUHAwQGCCsGAQUFBwMC\nMC4GA1UdEQQnMCWgIwYKKwYBBAGCNxQCA6AVDBNtZXRhY2xhc3NpbmdAc2VjdXJl\nMEQGCSqGSIb3DQEJDwQ3MDUwDgYIKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIA\ngDAHBgUrDgMCBzAKBggqhkiG9w0DBzANBgkqhkiG9w0BAQsFAAOCAgEAKNmjYh+h\ncObJEM0CWgz50jOYKZ4M5iIxoAWgrYY9Pv+0O9aPjvPLzjd5bY322L8lxh5wy5my\nDKmip+irzjdVdxzQfoyy+ceODmCbX9L6MfEDn0RBzdwjLe1/eOxE1na0sZztrVCc\nyt5nI91NNGZJUcVqVQsIA/25FWlkvo/FTfuqTuXdQiEVM5MCKJI915anmTdugy+G\n0CmBJALIxtyz5P7sZhaHZFNdpKnx82QsauErqjP9H0RXc6VXX5qt+tEDvYfSlFcc\n0lv3aQnV/eIdfm7APJkQ3lmNWWQwdkVf7adXJ7KAAPHSt1yvSbVxThJR/jmIkyeQ\nXW/TOP5m7JI/GrmvdlzI1AgwJ+zO8fOmCDuif99pDb1CvkzQ65RZ8p5J1ZV6hzlb\nVvOhn4LDnT1jnTcEqigmx1gxM/5ifvMorXn/ItMjKPlb72vHpeF7OeKE8GHsvZAm\nosHcKyJXbTIcXchmpZX1efbmCMJBqHgJ/qBTBMl9BX0+YqbTZyabRJSs9ezbTRn0\noRYl21Q8EnvS71CemxEUkSsKJmfJKkQNCsOjc8AbX/V/X9R7LJkH3UEx6K2zQQKK\nk6m17mi63YW/+iPCGOWZ2qXmY5HPEyyF2L4L4IDryFJ+8xLyw3pH9/yp5aHZDtp6\n833K6qyjgHJT+fUzSEYpiwF5rSBJIGClOCY=\nEND;\n$X509 = new phpseclib\\File\\X509();\n$ASN1 = new phpseclib\\File\\ASN1();\n$BER = $X509->_extractBER($BER);\n$ASN1->loadOIDs($X509->oids);\n$DECODED = $ASN1->decodeBER( $BER );\nvar_dump($DECODED);\n```\n. Sorry for the lack of clarity regarding the picture. There are two data sets and two axis. On the left is the axis for the blue graph, bytes per second, on the right is the axis for the orange graph, iterations of the while loop per second. The X axis is time, each cycle was counted with bytes accumulated with microtime stamping.\nI will do a packet capture this afternoon and see if I can determine window size of the TCP segments being used to gather the information. My fear is that the SSH server on the ASA is doing something profoundly dumb like sending each line in its own packet, but will capture to confirm.\n--- Update ---\nWell, here is the wireshark image. Let me know if you want the actual PCAP file itself...\n\nIt looks like the window is ok (32k) and each packet within the stream is small (I guess this is to be expected with 175 bytes of data per packet, then encrypted)\nMore interestingly it looks like the ASA finishes sending the data to phpseclib in ~12 seconds of actual transfer time (running command and sending output back). Then in the packet capture there is no traffic for ~28 more seconds while PHP is in that while(1) loop doing the _get_channel_packet() piece.\nI flipped on realtime debug to a file (defined to 4) and will email you the file. Thanks!\n. OK, I have written a simple test script and grabbed the latest code off GitHub without any of my abstraction layer in the middle. I can reliably duplicate the behavior I described in my graph and packet capture.\nMy test script is on pastebin here: http://pastebin.com/KaSL7WTb\nWhat I am seeing from a time/output perspective is as follows:\nphp test.php\nGot 79 bytes in 0.09109902381897 seconds.\nGot 56 bytes in 0.12536311149597 seconds.\nGot 45 bytes in 0.12801694869995 seconds.\nGot 1718 bytes in 0.1345579624176 seconds.\nGot 53141 bytes in 0.54392099380493 seconds.\nGot 496745 bytes in 29.002861022949 seconds.\nRunning a live tcpdump on the machine executing test.php I see that packets from the SSH server (ASA firewall) complete returning the output of the command much faster (12-14 seconds) than phpseclib's SSH2->read() function is picking them up from the buffer.\n. I modified the latest github code to add a performance counter to the ssh2->read function while(1) loop: Please take a look at my results here: http://pastebin.com/Bbpmnx4F\nI am wondering what the operation in use is that slows by a factor of ~100 as the interactiveBuffer size grows.\nEdit: based on further testing it appears to be a significant performance hit of doing repetitive concatenation operations and preg_match on very long strings in the loop.\nCheck out this minor modification to the while loop:\n```\n        $BUFFER = \"\";\n        while (true) {\n            if ($mode == self::READ_REGEX) {\n                preg_match($expect, $this->interactiveBuffer, $matches);\n                $match = isset($matches[0]) ? $matches[0] : '';\n            }\n        $pos = strlen($match) ? strpos($this->interactiveBuffer, $match) : false;\n        if ($pos !== false) {\n            return $BUFFER . $this->_string_shift($this->interactiveBuffer, $pos + strlen($match));\n        }\n        $response = $this->_get_channel_packet($channel);\n\n        if (is_bool($response)) {\n            $this->in_request_pty_exec = false;\n            return $response ? $BUFFER . $this->_string_shift($this->interactiveBuffer, strlen($this->interactiveBuffer)) : false;\n        }\n\n        $this->interactiveBuffer.= $response;\n        if ( strlen($this->interactiveBuffer) > 4096 )\n        {\n            // This operation is slow but happens much less frequently! \n            $BUFFER .= $this->_string_shift($this->interactiveBuffer, 3072);\n        }\n    }\n\n```\nBy adding a temporary buffer to hold large strings, and only performing preg_match on the last 1000 bytes of the buffer & large concatenation operations much less frequently, execution time is radically reduced:\nphp test.php\nGot 79 bytes in 0.066844940185547 seconds.\nGot 56 bytes in 0.097723007202148 seconds.\nGot 45 bytes in 0.1004810333252 seconds.\nGot 1718 bytes in 0.10767197608948 seconds.\nGot 53141 bytes in 0.21906685829163 seconds.\nGot 500922 bytes in 0.92251801490784 seconds.\nThe full output with my time-keeping modification is here: http://pastebin.com/wMXnTViG\nIt shows both interactiveBuffer and $BUFFER sizes as the shifts happen from interactive to long-term buffer.\n. The short answer to your first question is: Network & telecom equipment vendors are very inconsistent in their prompt format, and many devices have polymorphic prompts that change continually throughout an interactive shell session with the device.\nAn image helps explain the predicament we frequently run into:\n\nA little background/history: Originally many of my management & provisioning tools were written in the 2008 time frame in Perl & Net_SSH, with a bolt-on PHP web interface that ran the Perl scripts.\nIn ~2010 they were re-written entirely in PHP using the PHP SSH PECL extension which worked, but had some limitations regarding flexible prompt matching of devices.\nEventually, I ran across your excellent library and we ripped out all of the non-native PHP functionality, which made all of the software cross platform compatible (ran well on both Linux and Windows) and its use grew.\nToday I and others use it to automate and manage thousands of network devices across a multitude of vendors. The complexity of different equipment lead to the creation of a wrapper library to handle prompt detection (assuming the device has never been logged into before) and some creative workarounds.\nThe primary challenge is that each device vendor, type, and OS version potentially behave differently. I have different REGEX for different device and OS types with logic for vendor & OS detection on the fly:\n```\n        $this->patterns = array(\n            /\n                Sample Prompts: ( Test with http://regex101.com/ )\n                    IOS  -   KHONEMDCRRR01#\n                    IOS-XE  -   KHONEMDCRWA02#\n                    IOS-XR  -   RP/0/RSP0/CPU0:KHONEMDCRWA01#\n                    NXOS    -   KHONEMDCSWC01_ADMIN#\n                    ASA  -   khonedmzrfw01/pri/act/901-IN#\n            /\n                array(  'devicetype'    => 'ciscoxr' ,\n                    'detect'    => '/RP\\/0\\/RSP0\\/CPU0:([\\w-]+)(.)[#>]\\s$/' ,\n                    'match'     => '/(.)RP\\/0\\/RSP0\\/CPU0:%s.(>|#)\\s*/'\n                    ),\n            array(  'devicetype'    => 'cisco' ,\n\n//                  'detect'    => '/([\\w-]+)(\\/.)?[#>]\\s$/' ,\n                    'detect'    => '/(?!.:)([\\w-\\/]+)[#>]\\s$/' ,\n                    /\n                                    ^--- Dont match anything up to a leading : (XR format)\n                                            ^--- Match a-z0-9 - and /\n                                                        ^--- Terminate match with our prompt enders > and #\n                                                            ^--- Ignore any trailing whitespace\n                    /\n                    'match'     => '/(.)%s.(>|#)\\s*/'\n                    ),\n          array(  'devicetype'    => 'cisconxos' ,\n                'detect'    => '/([\\w\\-]+)(\\/.*)?[#>]\\s*$/' ,\n                'match'     => '/(.*)%s.*(>|#)([^ \\n\\r^M]+)/'\n                )\n\n```\nIn regard to a more or less official performance recommendation, the biggest benefit might come from changing a single line:\npreg_match($expect, $this->interactiveBuffer, $matches);\nto\npreg_match($expect, substr($this->interactiveBuffer, -1024), $matches);\nI have not thoroughly tested this change to the library's logic, and someone more familiar with the internal workings of PHP itself would have to weigh in on the function or logic resulting in the best performance.\nMy fear in suggesting such a change is unintended consequences for other users with vastly different use cases. A disclaimer may be an effective mechanism listing the assumption that a prompt match regex will never be >1024 characters long, however with my limited knowledge of the greater community of users I wouldn't presume to know best.\nThanks again for all the work maintaining this code base, it has saved many thousands of man-hours of effort making repetitive changes, desired-state configuration management, and auditing. Please feel free to close this issue on Github, I made changes locally to my copy of SSH2.php and am pleased with the performance improvements.\n. I attempted something very similar for an hour yesterday after reading your original post, I validated that the null (while it doesn't appear to actually functionally do anything meaningful) is missing, and attempted to force phpseclib to insert it (fumbling around) by commenting out the optional line which resulted in loadX509 failing to read my certs... I am waiting for someone more familiar with the library to weigh in on the best fix as well. While not mission critical for me, Firefox breaking is a minor annoyance. Regenerating a BUNCH of certificates is going to be far more painful.\n. So somebody much more knowledgeable will probablly smack me for posting this, but here is a one-liner that i just cooked up to see what it would do:\n```\nsvn diff\nIndex: include/phpseclib/File/ASN1.php\n--- include/phpseclib/File/ASN1.php     (revision 18)\n+++ include/phpseclib/File/ASN1.php     (working copy)\n@@ -934,6 +934,7 @@\n                 }\n             foreach ($mapping['children'] as $key => $child) {\n\n\nif (isset($child['type']) && $child['type'] == FILE_ASN1_TYPE_NULL) { $source[$key] = array(); }\n                     if (!isset($source[$key])) {\n                         if (!isset($child['optional'])) {\n                             return false;\nIndex: include/phpseclib/File/X509.php\n===================================================================\n--- include/phpseclib/File/X509.php     (revision 18)\n+++ include/phpseclib/File/X509.php     (working copy)\n@@ -387,7 +387,7 @@\n             'children' => array(\n                 'algorithm'  => array('type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER),\n                 'parameters' => array(\n'type'     => FILE_ASN1_TYPE_ANY,\n'type'     => FILE_ASN1_TYPE_NULL,\n                                     'optional' => true\n                                 )\n             )\n```\n\nAfter every algorithm piece (signature, public key, etc.) there is a NULL... will this pass the muster?\n. You are correct, I am running a very different version of phpseclib in my environment. The master branch on github has gone through a number of rewrites and I have enough code dependent on the old version I have not updated in quite a while.\nI forked the repo here and gave patching it a try. Again, maybe not the final fix but I think its working on my limited test case: https://github.com/phpseclib/phpseclib/compare/master...metaclassing:add-null-after-algorithm are the exact line numbers and changes I made off the master here.\n. My knowledge is rather limited, are there any cases where an algorithm block of ASN1 would have non-null parameters?\n. Did new certs validate with FF for you? I tried both my change and yours and can validate from an ASN1 dump that nulls are inserted either way, but im still getting sec_error_bad_der in FF37\n. Hi again,\nSo I went through a lot of pain and test cases and made some discoveries:\n1) The reason none of my regenerated certs were working was because both the root AND intermediate certs had to be regenerated with the NULL patch applied. Even if the server cert is OK, any upstream certs must also be corrected.\n2) Doing some ASN1 dumps of OpenSSL generated certs, I discovered several other fields that had the same NULL parameter requirement:\n18:d=3  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption\n   29:d=3  hl=2 l=   0 prim: NULL              \n...\n  124:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption\n  135:d=4  hl=2 l=   0 prim: NULL              \n...\n  609:d=2  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption\n  620:d=2  hl=2 l=   0 prim: NULL\nThose fields equate to the SignatureAlgorithm pieces at the top and bottom of a cert:\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 20 (0x14)\n\nSignature Algorithm: sha256WithRSAEncryption\n...\n        Subject Public Key Info:\n           Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:ea:70:56:35:4f:22:b3:b8:6a:67:c1:3c:ba:ed:\n                    27:ea:a6:3f:c2:15:57:d9:f2:c9:72:ef:86:cb:ad:\n...\n        X509v3 extensions:\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Key Usage: \n                Digital Signature, Non Repudiation, Key Encipherment\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication\n            X509v3 CRL Distribution Points: \n...\n            X509v3 Authority Key Identifier: \n                keyid:E2:56:54:25:F8:A6:86:52:07:37:A6:82:28:5F:F5:D0:21:14:D1:C9\n  Signature Algorithm: sha256WithRSAEncryption\n         83:fc:c6:5b:ee:4a:ea:3a:2d:4d:52:77:a3:cc:36:5c:0a:d9:\n         c5:c1:8f:29:00:81:4c:30:cf:04:af:a7:70:b8:a4:2d:96:5a:\n...\n```\n\nIt looks like the Microsoft Windows Server 2012r2 enterprise CA follows the same logic as OpenSSL and inserts NULL parameters as well after any algorithm block (all of mine use RSA so I don't have an alternative to compare with)\nAfter regenerating (and issuing new serial numbers, etc.) all the root, intermediate, and server certs FF37 is \"happy\" for the time being.\n3) There is an unrelated FF37 bug i'm running into importing my personal / user certificate. I get unknown error from the GUI but don't know if that's related or not... I don't have the heart to fight with that piece right now lol\nI inserted a few other random fixes in my fork as well, i'm debating if anything is of value for a PR or not, ill leave that up to more capable devs to decide on more elegant solutions to the speedbumps I tend to flatten with dynamite haha\n. Oh and if anybody runs into the mismatch SubjectAlternativeNames type/content issue, this is a snippit of code from an unrelated project for dealing with that:\nprotected function altnames($ALTNAMES)\n    {\n        //Sort names and IPs into two different arrays\n        $DOMAINS = array(); $IPS = array(); $EMAILS = array();\n        foreach ($ALTNAMES as $ALTNAME)\n        {\n            if      ( filter_var($ALTNAME, FILTER_VALIDATE_EMAIL) ) {\n                array_push($EMAILS  ,$ALTNAME);\n            }elseif ( filter_var($ALTNAME, FILTER_VALIDATE_IP   ) ) {\n                array_push($IPS     ,$ALTNAME);\n            }else                                                   {\n                array_push($DOMAINS ,$ALTNAME);\n            }\n        }\n        // Create our altname array for the subjectAltName parser\n        $RETURN = array();\n        foreach ($DOMAINS   as $DOMAIN  )   { array_push($RETURN, array(\"dNSName\"   => $DOMAIN  ) ); }\n        foreach ($IPS       as $IP      )   { array_push($RETURN, array(\"iPAddress\" => $IP      ) ); }\n        foreach ($EMAILS    as $EMAIL   )   { array_push($RETURN, array(\"rfc822Name\"=> $EMAIL   ) ); }\n        return $RETURN;\n    }\nIt just uses filter_var's to assign a bulk list of names regardless of type into the correct associative containers to quickly feed into phpseclib for processing.\nIf generating a x509 v3 extended attribute cert WITHOUT a CSR, it is still apparently necessary to double-sign it from the CA. (old workaround: sign once, re-read newly signed cert, apply V3 attributes, resign again to make them stick)\n. What do you think about the regex I threw into https://github.com/phpseclib/phpseclib/commit/4046b8b288e35926e7807d53111302328643a7dc ? It seems to be a more graceful way for the library to handle being passed input containing multiple certificates and unrelated text before or after the certs.\n. OK, thanks for the clarification on expected behavior, that's what I needed to know.\nI saw the other preg_replace's that stripped off non-certificate information and assumed it was the libraries job to sanitize input as opposed to the user implementing it.\n. Some silly questions just popped into my head:\nGiven how PHP7 seems to be changing exception and general runtime error handling, does it make sense to target the exception implementation for 7's looming launch?\nWould you want master's catches to all include Throwable/Error as well as Throwable/Exception day one? Or is that only going to be added later after the entire codebase gets a PHP7 scrub?\nI am still a little unclear on how 7 will change implementations. When dependent components like SSH2 leverages RSA: Does SSH2 wrap calls to algorithms in try blocks and catch the RSA throwables just to turn around and throw a more specific SSH exception?\n. While I agree SSHv1 needs to disappear, I am one of the few unlucky users that is stuck with 1-2% of legacy network devices (embedded operating systems) that are v1 only with no upgrade path (thankyou vendors)\nMost of my code is using the master branch for obvious performance improvements and features/bugfixes. I am willing to manually include the older file pulled from the 2.0 branch but wonder what kind of structural changes will be required on my end to keep it working? OO/namespace conversion etc.\n. If you merge exception implementation for SSHv2 I can try to duplicate them in v1 for you and send a PR for review? My sucky 3rd world equipment shouldn't mean more wasted time and work for others lol.\n. @terrafrost Hi, sorry for the slow response - its been a busy week. I will take a stab at adding exceptions and have something for you to review after the holiday. Have a good weekend!\nedit: I created PR #806 for this task and gave it a first stab. After looking at the number of SSHv1 only devices remaining on the network I'm tempted to kick off a Q4 project to decom/replace them, I just did the math and we are past the 20 year old protocol marker lol\n. FYI, I hope to have the last couple dozen SSHv1 devices removed from my infrastructure by Q4 sometime... After that hopefully any vested interest I have for that 20 year old protocol will vanish lol\n. While on the topic of loading cert(s) and encoding, have you given any more thought to desired behavior when parsing a blob of ascii that contains multiple certificates (and other assorted throw-away bits)? I originally thought just return the first matching cert and chuck the rest, but could see a use-case in returning multiple RSA objects in an array for every cert extracted from the input. That would fit the RSA::load() paradigm more than the $RSA->load() approach, but i suppose there are trade-off's either way.\nSecond thought: Maybe I should think about writing a File\\PEM handler that returns multiple RSA and KEY objects after digging through the input?\n. I have found differences in ASN.1 encoding before that required minor tweaking, I will load this into my test cases a little later for examination. What version of phpseclib are you using specifically? The latest dev code, or a 2.0 tag?\nOne other thing I have seen is that certain X509v3 attributes may be in a different order depending on the tool that generates them. I don't recall reading a standard that explicitly spelled out X509v3 attribute order but something might be out there. I believe phpseclib stores them in an assoc array internally, and the order in which the elements are added to the array impact the order they appear in final certificates.\n. Well, I was able to duplicate your results with the 2.0 branch. In doing an ASN.1 parse of each generated CSR the side-by-side comparison shows 2 instances of an old issue that caused problems with FireFox validating certificates (missing null after algorithm) and one new difference I have not seen before:\nOpenSSL Generated CSR                                           phpseclib 2.0 opened & saved CSR\n    0:d=0  hl=4 l= 607 cons: SEQUENCE                         |     0:d=0  hl=4 l= 601 cons: SEQUENCE          \n    4:d=1  hl=4 l= 327 cons: SEQUENCE                         |     4:d=1  hl=4 l= 323 cons: SEQUENCE          \n    8:d=2  hl=2 l=   1 prim: INTEGER           :00                  8:d=2  hl=2 l=   1 prim: INTEGER           :00\n   11:d=2  hl=2 l=  26 cons: SEQUENCE                              11:d=2  hl=2 l=  26 cons: SEQUENCE          \n   13:d=3  hl=2 l=  24 cons: SET                                   13:d=3  hl=2 l=  24 cons: SET               \n   15:d=4  hl=2 l=  22 cons: SEQUENCE                              15:d=4  hl=2 l=  22 cons: SEQUENCE          \n   17:d=5  hl=2 l=   3 prim: OBJECT            :commonName         17:d=5  hl=2 l=   3 prim: OBJECT            :commonName\n   22:d=5  hl=2 l=  15 prim: UTF8STRING        :www.example.c      22:d=5  hl=2 l=  15 prim: UTF8STRING        :www.example.c\n   39:d=2  hl=4 l= 290 cons: SEQUENCE                         |    39:d=2  hl=4 l= 288 cons: SEQUENCE          \n   43:d=3  hl=2 l=  13 cons: SEQUENCE                         |    43:d=3  hl=2 l=  11 cons: SEQUENCE          \n   45:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption      45:d=4  hl=2 l=   9 prim: OBJECT            :rsaEncryption\n   56:d=4  hl=2 l=   0 prim: NULL                             | ***MISSING NULL AFTER ALGORITHM***\n   58:d=3  hl=4 l= 271 prim: BIT STRING                       |    56:d=3  hl=4 l= 271 prim: BIT STRING        \n  333:d=2  hl=2 l=   0 cons: cont [ 0 ]                       | ***MISSING UNKNOWN?***\n  335:d=1  hl=2 l=  13 cons: SEQUENCE                         |   331:d=1  hl=2 l=  11 cons: SEQUENCE          \n  337:d=2  hl=2 l=   9 prim: OBJECT            :sha256WithRSA |   333:d=2  hl=2 l=   9 prim: OBJECT            :sha256WithRSA\n  348:d=2  hl=2 l=   0 prim: NULL                             | ***MISSING NULL AFTER ALGORITHM***\n  350:d=1  hl=4 l= 257 prim: BIT STRING                       |   344:d=1  hl=4 l= 257 prim: BIT STRING\nWhile I agree in concept it would be nice to match the same output as OpenSSL for verification, the X509/ASN1 code in the master branch appears to have some changes in the works already. I am curious to know if your CA signs the CSR with OpenSSL and phpseclib do the final certificates match or are they divergent as well & does this behavior cause any immediate downstream problems in the process with clients or servers validating the certificate?\n. I forgot to close this after the PR was merged. Thanks!\n. I added a quick unit test to decode both IPv4 and IPv6 elements in subject alt names.\nOther than the x509v3 subjectaltname I don't know of another location where IP address information must be encoded as binary \"in network byte order\", other locations like subject encode them as text.\n. Can you ssh -vv username@router and get the openssh verbose connection output? I have used phpseclib 2.x branch to automate discovery/manage/configure of many different types of network & telecom devices. Some have their 'unique' features.\nI do not currently have access to a Huawei ATN device, would you have a lab device with ssh listening on the internet somewhere that could be used for testing?\n. What version/branch are you using?\n. Thanks for letting me know, I pretty much expected that answer but wanted to double check. I have been seeing alot more ECC+DSA certs popping up lately and suspect that feature would be a more valuable use of time than the revamp of the X.509 piece right now. I agree completely with the master-only approach.\nI am somewhat curious as to the methodology you use when implementing a new cipher or key format, do you start with a raw interpretation of any standard / rfc / etc? Or read and try to emulate another implementation such as openssl's?\nIf you can think of some small-pieces of the puzzle I could try to help build let me know, the prospect of taking on the entire ECC feature is a bit daunting likely outside my current ability though.\n. I will likely be beaten for publishing my continued abuse of this library, however this is how I am signing CSR's with phpseclib: https://github.com/metaclassing/PHP7-CertBot/blob/master/app/Ca/Account.php#L84-L175\nAdditionally, code in https://github.com/metaclassing/PHP7-CertBot/blob/master/app/Ca/Certificate.php#L57-L103 is how I generate my CSR's with subject alt names and all the extended attributes. Not sure if this is helpful to you at all, but the logic functions the way I want (although maybe not the way the library maintainers intended)\n. I use PHPSECLIB extensively for network device monitoring and configuration, I have found the most effective approach is altering the terminal or pager length.\nI dont have a checkpoint to test on, however a quick googling suggested the following two options based on OS/appliance:\nfirewall> set clieenv rows 90000 (or some other very large number)\nor\nclish -c \"show configuration\"\nHopefully one of these options works out for you, alternatively you COULD try to use phpseclib ssh2 and REGEX prompt matching with more complex patterns to detect different hostname vs more prompt and send the appropriate response.. One some platforms setting the pager limit to 0 disables it or means unlimited. Is that an option?\nset clieenv rows 0 ? What is the right command for your platform?. I have been dealing with ECC certs for the past ~8 months but have not had a need to extract the public key or validate them, I will be curious what can be gleaned from your question. There is another discussion on https://github.com/phpseclib/phpseclib/issues/998 that is the the last news I had heard around current/future support.. Well, I would not consider myself an expert in the use of array_map but I took a stab at fixing it:\nhttps://github.com/metaclassing/phpseclib/blob/fix-array-map-namespace/phpseclib/File/X509.php#L3466-L3468\nif this isn't too hateful of a fix then i can send a PR I guess.. What SSH server is running on the Windows machines? Both debugs look like phpseclib is sending the command specified with no trailing characters.. Short answer: \"something like that maybe\".\nLong answer: With AJAX calls, the PHP process on the web server does not stay running. Those calls are transactional. When you POST a command to myScript.php the process starts, runs, generates output, and finally terminates. You will not be able to POST multiple times to the same process and as such there would be no persistent connection to the back end SSH server.\nThat said, there ARE ways to make AJAX feel like what you want, and other ways without AJAX to better accomplish your goal.\nFirst, if you are simply running transactional commands rather than monitoring continuous output you could make it appear to be seamlessly connected by POSTing a command to myScript.php and appending output to the console div element. Each command would start a PHP process, make a fresh SSH connection, and you would wait for output until the entire command finished running (Don't forget HTTP usually has a maximum response wait time).\nAlternately, you could ditch the whole AJAX model and go to something more interactive like websockets. I have written a websocket server in PHP before and HIGHLY recommend picking a better language like JavaScript to do this at any kind of scale/reliability. From the JS client you could simply connect to the WS server and run commands / collect output, HOWEVER with PHP (and thus phpseclib) there are not amazing asynchronous processing capabilities and you would still be generally stuck waiting for a large chunk or the entire output of a command before the console would be updated.\nThat said, if you really wanted to build this I would probably suggest a radically different technology stack to make it look and feel the way a SSH CLI user would expect (colored text, responsive asynchronous read/write, etc.)\n. Example of somebody doing a fully interactive CLI from a web browser in JS: https://github.com/krishnasrinivas/wetty. Off topic question for terrafrost - what part of NE are you visiting? If you come to Omaha I will buy you steak!. I caught the eclipse, 30 minutes south of town got a nearly perfect view, hope you had a good stay in NE. Drop me an email if you ever travel through Omaha, I still owe you thanks for all the help over the past few years.. For starters I highly recommend using an account in TACACS+ that automagically gets assigned priv 15 on all network devices so it doesn't need to use enable passwords. Those are somewhat antiquated for network device security.\nSome devices like ASA's still refuse to give up that style of administration however in which case I have code that sends \"enable\\npassword\" together to get around that issue:\nhttps://github.com/metaclassing/PHP5-NetworkAutomation/blob/4ed4073634caba90fbdc9ec2e0bb1c4bbb1b3a72/bin/save-config.php#L87-L95\n. Its not \"impossible\" or even the the library's fault.\nYou are using an exec function that blocks the next PHP instruction from executing until a prompt or pattern get returned (or configured timeout) before continuing to the next PHP instruction.\nThe enable password line does not end. There is no \\r\\n received from the network device for a blocking pattern matcher to use indicating output has stopped. It is an interactive prompt you have to expect and know to just send the password to.\nYou CAN do it in two separate lines of code with $blah->write(\"enable\"); and $blah->write(\"mySecretPassword\"); but a $blah->read(); operation will not return if you put in between the two writes. Simply concatenating the enable\\npassword into one exec call simplifies this network device created issue.. Also while we are on the topic of prompt pattern matching, I dont know how you are doing it currently but if you have a multivendor environment you will likely need to build an array of different REGEX to use depending on device types and operating systems running on them.\nExamples of regex for IOS, NXOS, IOS-XR, IOS-XE, ASA, ArubaOS, etc.\nhttps://github.com/metaclassing/PHP5-NetworkAutomation/blob/4ed4073634caba90fbdc9ec2e0bb1c4bbb1b3a72/include/command/command.class.php#L49-L85. Starting from the beginning, can you authenticate and echo $ssh->exec(\"show version\"); successfully? If that hangs or is incomplete then you are running into a more fundamental problem than enableing.\nAre you doing terminal length 0, or no terminal pager, or term width 512, or whatever the correct commands are for your specific platform to prepare for an automated SSH session?\nWhat is the prompt pattern you are matching inside $ssh to determine when command output has finished and should be returned?\nDoes the $ssh->exec(\"enable\\nlab\"); command work result in the prompt> changing to prompt#?. If @theunreal is still checking back on this post, I extracted the network device ssh wrapper logic to stand on its own.\nThis example might be useful if you want to use it as-is, or write your own logic to use phpseclib to ssh into routers and switches: https://github.com/metaclassing/PHP7-SSHWrapper/\nIt's about as simple as I could boil down all the logic required to connect, detect prompt, send commands, etc. Should be copy/paste-able to run in most environments.. The code you posted looks like a mixture of two different tasks. First you need to send a command and collect text output from an XR router, second you want to parse that text and extract specific information from it. The read function pattern matching is for the devices prompt to know output has finished and return the text so you can process it. Additionally you will need to remember to prepare your CLI on the router to avoid getting output blocked by the pager waiting at a ---more--- prompt during that output collection.\nI have example code using phpseclib specifically for network devices that handles the SSH command send/output collection and prompt detection at https://github.com/metaclassing/PHP7-SSHWrapper/ you might want to read or use, once you collect the output of a command like show access-list xyz you can split the lines into an array and foreach through the output to perform the business logic to get the information the rest of your program needs.\nIf you have sample ACL config and sample json encoded input array for your function, I might be able to mock up a functional demo using one of the lab ASR9k's at work.. Please check out my example code again, I am not using PHPSECLIB's exec function natively that opens a new command channel, I am wrapping read with per-vendor-platform regex and write with my own exec that handles this interactive CLI. I am also extremely familiar with XR, my whole backbone is now ASR9k based and we have nearly 99% of provisioning and changes automated via web services largely dependent on this library for information collection and configuration changes. Given the diversity of my environment, the regex collection in my wrapper should give you an extremely easy interface to any current generation Cisco devices and several other vendors with similar interfaces.\nPHP5 and 7 are similar enough I have not run across much code for this kind of use case that wont run fine on both/either version. I have moved most of my web services to 7 due to improved performance and some new features available.. The reason it is hanging is likely you executing a command and getting stuck at the ---more--- prompt.\nIf you want to get around that and continue using the ->exec() function you will have to send multiple lines in the command such as \"terminal length 0\\nshow cable modem\".\nAlternately you can write a wrapper that uses ->read() and ->write() combined with prompt detection to interactively send and parse multiple commands in a single ssh session. I have an example at https://github.com/metaclassing/PHP7-SSHWrapper used for exactly this purpose.. Why not use some blocking $ssh->read() operations to collect the output from the device after successful login and each send?. I believe it worked, thanks a bunch for the help!. You could send two lines of text with a single command such as exec(\"su bob\\nSecretPass\") but each exec is its own command channel if that is the right term for it. I have not extensively tested that approach, my stuff all uses send()'s. ",
    "CashCode": "Hey! Still getting errors like: \nWarning: unpack(): Type C: not enough input, need 1, have 0 in /var/www/phpseclib-0.3.6/Net/SSH2.php on line 1324\nWarning: extract() expects parameter 1 to be array, boolean given in /var/www/phpseclib-0.3.6/Net/SSH2.php on line 1324\nNotice: Expected SSH_MSG_KEXDH_REPLY in /var/www/phpseclib-0.3.6/phpseclib-0.3.6/Net/SSH2.php on line 1327\nHere is my version of /Net/SSH2.php (original, just for comparing): http://pastebin.com/6tkdRjq7\nNET_SSH2_LOGGING' been set to NET_SSH2_LOG_COMPLEX after including\n. ```\n\nWarning:  unpack(): Type C: not enough input, need 1, have 0 in /var/www/vain/data/www/third/phpseclib-0.3.6/phpseclib/Net/SSH2.php on line 1324\n\nWarning:  extract() expects parameter 1 to be array, boolean given in /var/www/vain/data/www/third/phpseclib-0.3.6/phpseclib/Net/SSH2.php on line 1324\n\nNotice:  Expected SSH_MSG_KEXDH_REPLY in /var/www/vain/data/www/third/phpseclib-0.3.6/phpseclib/Net/SSH2.php on line 1327\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:38:0d:0a                                   5.8..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6d:63:72:79:70:74:2c:20:67  b_0.3 (mcrypt, g\n00000020  6d:70:29:0d:0a                                   mp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 2.1643, network: 0.1856s)\n00000000  6d:c7:31:16:a5:48:4a:3e:75:31:4b:31:ec:d9:2b:36  m.1..HJ>u1K1..+6\n00000010  00:00:00:b7:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  6,diffie-hellman\n00000080  2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67:65:2d  -group-exchange-\n00000090  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:0f:73  group1-sha1....s\n000000d0  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n000000e0  00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  ..aes128-ctr,aes\n000000f0  31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63  192-ctr,aes256-c\n00000100  74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61:72  tr,arcfour256,ar\n00000110  63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38:2d  cfour128,aes128-\n00000120  63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c:6f  cbc,3des-cbc,blo\n00000130  77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31:32  wfish-cbc,cast12\n00000140  38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63  8-cbc,aes192-cbc\n00000150  2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63:66  ,aes256-cbc,arcf\n00000160  6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62:63  our,rijndael-cbc\n00000170  40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65:00  @lysator.liu.se.\n00000180  00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65  ...aes128-ctr,ae\n00000190  73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d  s192-ctr,aes256-\n000001a0  63:74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61  ctr,arcfour256,a\n000001b0  72:63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38  rcfour128,aes128\n000001c0  2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c  -cbc,3des-cbc,bl\n000001d0  6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31  owfish-cbc,cast1\n000001e0  32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62  28-cbc,aes192-cb\n000001f0  63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63  c,aes256-cbc,arc\n00000200  66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62  four,rijndael-cb\n00000210  63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65  c@lysator.liu.se\n00000220  00:00:00:69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61  ...ihmac-md5,hma\n00000230  63:2d:73:68:61:31:2c:75:6d:61:63:2d:36:34:40:6f  c-sha1,umac-64@o\n00000240  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000250  72:69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72  ripemd160,hmac-r\n00000260  69:70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68  ipemd160@openssh\n00000270  2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39  .com,hmac-sha1-9\n00000280  36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00  6,hmac-md5-96...\n00000290  69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73  ihmac-md5,hmac-s\n000002a0  68:61:31:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e  ha1,umac-64@open\n000002b0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:72:69:70  ssh.com,hmac-rip\n000002c0  65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70:65  emd160,hmac-ripe\n000002d0  6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63:6f  md160@openssh.co\n000002e0  6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  m,hmac-sha1-96,h\n000002f0  6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:15:6e:6f  mac-md5-96....no\n00000300  6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e  ne,zlib@openssh.\n00000310  63:6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69:62  com....none,zlib\n00000320  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:00  @openssh.com....\n00000330  00:00:00:00:00:00:00:00:00                       .........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0006, network: 0.0001s)\n00000000  41:c7:6a:3c:75:42:30:f8:54:8b:8f:21:18:93:ea:c9  A.j.uB0.T..!....\n00000010  00:00:00:36:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...6diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:00:00:00:0f:73:73  oup14-sha1....ss\n00000050  68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00:00  h-rsa,ssh-dss...\n00000060  f6:61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66  .arcfour256,arcf\n00000070  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:2c:61  our128,arcfour,a\n00000080  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n00000090  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000a0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000b0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n000000c0  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n000000d0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000e0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n000000f0  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000100  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000110  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000120  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000130  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000140  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000150  62:63:2c:6e:6f:6e:65:00:00:00:f6:61:72:63:66:6f  bc,none....arcfo\n00000160  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n00000170  2c:61:72:63:66:6f:75:72:2c:61:65:73:31:32:38:2d  ,arcfour,aes128-\n00000180  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n00000190  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n000001a0  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n000001b0  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n000001c0  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n000001d0  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n000001e0  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1\n000001f0  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19\n00000200  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256\n00000210  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc\n00000220  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl\n00000230  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-\n00000240  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non\n00000250  65:00:00:00:30:68:6d:61:63:2d:73:68:61:31:2d:39  e...0hmac-sha1-9\n00000260  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n00000270  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n00000280  2c:6e:6f:6e:65:00:00:00:30:68:6d:61:63:2d:73:68  ,none...0hmac-sh\n00000290  61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c  a1-96,hmac-sha1,\n000002a0  68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63  hmac-md5-96,hmac\n000002b0  2d:6d:64:35:2c:6e:6f:6e:65:00:00:00:04:6e:6f:6e  -md5,none....non\n000002c0  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n000002d0  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0178, network: 0s)\n00000000  00:00:00:81:00:86:eb:f2:68:88:fb:45:a2:16:ba:23  ........h..E...#\n00000010  7e:1b:ef:d7:fb:28:ee:6a:a1:5d:12:13:c5:da:c3:09  ~....(.j.]......\n00000020  3a:59:79:a2:56:39:1f:43:8e:dd:c7:7c:51:4e:21:d7  :Yy.V9.C...|QN!.\n00000030  46:2d:e7:9d:d0:d8:4b:30:54:52:ba:eb:77:44:5c:e2  F-....K0TR..wD.\n00000040  b5:00:53:e2:56:1a:41:5b:34:5f:14:fe:7e:2d:35:fd  ..S.V.A[4_..~-5.\n00000050  03:e7:33:89:cf:18:0f:58:2a:e9:89:33:a2:38:52:13  ..3....X*..3.8R.\n00000060  13:4c:5b:68:29:ad:07:e7:6d:68:e1:0f:a0:04:55:02  .L[h)...mh....U.\n00000070  e7:36:ba:68:cf:ba:7b:26:3a:5b:52:91:cd:8f:c7:51  .6.h..{&:[R....Q\n00000080  20:37:78:ab:61                                    7x.a\n\u2039\b\n```\n. Bug?\n. I have tried v1.0.0 and got same result. Why it's buggy? I could connect with ssh2 php module\n```\nWarning:  unpack(): Type C: not enough input, need 1, have 0 in /var/www/vain/data/www/third/phpseclib1.0.0/Net/SSH2.php on line 1576\n\nWarning:  extract() expects parameter 1 to be array, boolean given in /var/www/vain/data/www/third/phpseclib1.0.0/Net/SSH2.php on line 1576\n\nNotice:  Expected SSH_MSG_KEXDH_REPLY in /var/www/vain/data/www/third/phpseclib1.0.0/Net/SSH2.php on line 1579\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:38:0d:0a                                   5.8..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6f:70:65:6e:73:73:6c:2c:20  b_0.3 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 1.6859, network: 0.1939s)\n00000000  ef:8d:9a:d3:be:5a:99:f2:17:48:1c:a6:db:d0:71:fb  .....Z...H....q.\n00000010  00:00:00:b7:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  6,diffie-hellman\n00000080  2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67:65:2d  -group-exchange-\n00000090  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:0f:73  group1-sha1....s\n000000d0  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n000000e0  00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  ..aes128-ctr,aes\n000000f0  31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63  192-ctr,aes256-c\n00000100  74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61:72  tr,arcfour256,ar\n00000110  63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38:2d  cfour128,aes128-\n00000120  63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c:6f  cbc,3des-cbc,blo\n00000130  77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31:32  wfish-cbc,cast12\n00000140  38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63  8-cbc,aes192-cbc\n00000150  2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63:66  ,aes256-cbc,arcf\n00000160  6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62:63  our,rijndael-cbc\n00000170  40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65:00  @lysator.liu.se.\n00000180  00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65  ...aes128-ctr,ae\n00000190  73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d  s192-ctr,aes256-\n000001a0  63:74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61  ctr,arcfour256,a\n000001b0  72:63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38  rcfour128,aes128\n000001c0  2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c  -cbc,3des-cbc,bl\n000001d0  6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31  owfish-cbc,cast1\n000001e0  32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62  28-cbc,aes192-cb\n000001f0  63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63  c,aes256-cbc,arc\n00000200  66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62  four,rijndael-cb\n00000210  63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65  c@lysator.liu.se\n00000220  00:00:00:69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61  ...ihmac-md5,hma\n00000230  63:2d:73:68:61:31:2c:75:6d:61:63:2d:36:34:40:6f  c-sha1,umac-64@o\n00000240  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000250  72:69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72  ripemd160,hmac-r\n00000260  69:70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68  ipemd160@openssh\n00000270  2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39  .com,hmac-sha1-9\n00000280  36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00  6,hmac-md5-96...\n00000290  69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73  ihmac-md5,hmac-s\n000002a0  68:61:31:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e  ha1,umac-64@open\n000002b0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:72:69:70  ssh.com,hmac-rip\n000002c0  65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70:65  emd160,hmac-ripe\n000002d0  6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63:6f  md160@openssh.co\n000002e0  6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  m,hmac-sha1-96,h\n000002f0  6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:15:6e:6f  mac-md5-96....no\n00000300  6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e  ne,zlib@openssh.\n00000310  63:6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69:62  com....none,zlib\n00000320  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:00  @openssh.com....\n00000330  00:00:00:00:00:00:00:00:00                       .........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0004, network: 0s)\n00000000  28:64:17:58:40:91:be:b5:b4:1c:27:34:d4:fe:b9:60  (d.X@.....'4...`\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0101, network: 0s)\n00000000  00:00:00:81:00:c8:1a:9b:de:53:53:eb:7b:a8:1a:7f  .........SS.{...\n00000010  37:be:9a:b8:c8:d2:a5:ad:66:c7:1d:7f:d6:fb:07:09  7.......f.......\n00000020  70:39:59:76:16:58:c9:87:f4:8e:ec:13:8c:8d:1d:ea  p9Yv.X..........\n00000030  1c:00:46:70:ad:d9:cc:47:3d:2f:49:0b:b7:79:4a:e6  ..Fp...G=/I..yJ.\n00000040  66:52:fe:ec:7f:95:39:be:3a:0b:42:cf:72:0f:1b:78  fR....9.:.B.r..x\n00000050  34:e7:c2:75:76:4c:c9:4e:3e:be:55:b7:04:fc:ad:ba  4..uvL.N>.U.....\n00000060  ee:32:20:ef:5d:9d:d1:b6:2c:24:c0:59:50:a9:fe:6e  .2 .]...,$.YP..n\n00000070  54:2d:11:e3:a2:bd:a0:35:aa:22:44:64:20:df:cb:72  T-.....5.\"Dd ..r\n00000080  0d:1d:1e:97:77                                   ....w\n```\n. My SSH2.php http://pastebin.com/Fz8TzHdZ\nIt's been downloaded from http://sourceforge.net/projects/phpseclib/files/phpseclib1.0.0.zip/download\n. Yes, please. Should I download and test source from github? I can give you server for testing (the buggy one).\n. Sent! All have same issue.\n. Maybe there are some ways to create it via commands and then connect through socket?\nSomething like\nssh -C2TNv -D 0.0.0.0:8080 vps\nand then \ncurl --socks5 127.0.0.1:8080 http://blah\n. Hey\nIt's actually a general question, but maybe someone may help me.\nIs there a way to check external ip of ssh tunnel?\nSometimes they change external ip and I need to check it\n```\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('111.111.111.111');\nif (!$ssh->login('username', 'password')) {\n    exit('Login Failed');\n}\necho $ssh->read('username@username:~$');\n$ssh->write(\"few commands to check external ip or get over http html\"); // ???????\necho $ssh->read('username@username:~$');\n```\nQuestion what commands should I use. Maybe one faced the same issue.\n. Nope. It shows my ip, I want to see ip of ssh server to which I'm connected (111.111.111.111 from code, but sometimes it can be different)\nIts even easier to make http request and just get html, but curl can be not installed\n. Seems like this is it. But in some cases ssh is available to login and execute commands, but tunnel is not available, will it show ip in this case? (if tunneling is not available, but executing is available). \nI was doing: (connect to tunnel -> get html from whoer.net or any site like that -> get ip), but it's a long way and It's more reliable to use phpseclib instead of ssh2 php module.\n. Hm.. I'm getting empty result, when I try to execute command, why?\n```\n$ssh = new Net_SSH2('199.106.139.7');\nif (!$ssh->login('admin', 'default')) {\n    exit('Login Failed');\n}\nvar_Dump( $ssh->exec('pwd') );\nvar_Dump( $ssh->exec('ls -la') );\n.\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:38:0d:0a                                   5.8..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:30:2e:33:20:28:6f:70:65:6e:73:73:6c:2c:20  b_0.3 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.651, network: 0.2163s)\n00000000  8f:d4:7c:4f:aa:19:db:05:66:8b:5b:83:6d:e9:bd:b5  ..|O....f.[.m...\n00000010  00:00:00:b7:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  6,diffie-hellman\n00000080  2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67:65:2d  -group-exchange-\n00000090  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:0f:73  group1-sha1....s\n000000d0  73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00:00  sh-rsa,ssh-dss..\n000000e0  00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  ..aes128-ctr,aes\n000000f0  31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63  192-ctr,aes256-c\n00000100  74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61:72  tr,arcfour256,ar\n00000110  63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38:2d  cfour128,aes128-\n00000120  63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c:6f  cbc,3des-cbc,blo\n00000130  77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31:32  wfish-cbc,cast12\n00000140  38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63  8-cbc,aes192-cbc\n00000150  2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63:66  ,aes256-cbc,arcf\n00000160  6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62:63  our,rijndael-cbc\n00000170  40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65:00  @lysator.liu.se.\n00000180  00:00:9d:61:65:73:31:32:38:2d:63:74:72:2c:61:65  ...aes128-ctr,ae\n00000190  73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d  s192-ctr,aes256-\n000001a0  63:74:72:2c:61:72:63:66:6f:75:72:32:35:36:2c:61  ctr,arcfour256,a\n000001b0  72:63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38  rcfour128,aes128\n000001c0  2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c  -cbc,3des-cbc,bl\n000001d0  6f:77:66:69:73:68:2d:63:62:63:2c:63:61:73:74:31  owfish-cbc,cast1\n000001e0  32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62  28-cbc,aes192-cb\n000001f0  63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61:72:63  c,aes256-cbc,arc\n00000200  66:6f:75:72:2c:72:69:6a:6e:64:61:65:6c:2d:63:62  four,rijndael-cb\n00000210  63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65  c@lysator.liu.se\n00000220  00:00:00:69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61  ...ihmac-md5,hma\n00000230  63:2d:73:68:61:31:2c:75:6d:61:63:2d:36:34:40:6f  c-sha1,umac-64@o\n00000240  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000250  72:69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72  ripemd160,hmac-r\n00000260  69:70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68  ipemd160@openssh\n00000270  2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39  .com,hmac-sha1-9\n00000280  36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00  6,hmac-md5-96...\n00000290  69:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73  ihmac-md5,hmac-s\n000002a0  68:61:31:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e  ha1,umac-64@open\n000002b0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:72:69:70  ssh.com,hmac-rip\n000002c0  65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70:65  emd160,hmac-ripe\n000002d0  6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63:6f  md160@openssh.co\n000002e0  6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  m,hmac-sha1-96,h\n000002f0  6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:15:6e:6f  mac-md5-96....no\n00000300  6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e  ne,zlib@openssh.\n00000310  63:6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69:62  com....none,zlib\n00000320  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:00  @openssh.com....\n00000330  00:00:00:00:00:00:00:00:00                       .........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0007, network: 0s)\n00000000  5a:19:e6:c3:92:8f:59:2e:4d:d6:55:73:c1:c5:5c:f2  Z.....Y.M.Us...\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:d3:61:65:73:31:32:38:2d  h-dss....aes128-\n000000b0  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n000000c0  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n000000d0  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n000000e0  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n000000f0  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n00000100  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n00000110  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1\n00000120  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19\n00000130  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256\n00000140  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc\n00000150  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl\n00000160  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-\n00000170  63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00:d3  ctr,3des-cbc....\n00000180  61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39  aes128-ctr,aes19\n00000190  32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72  2-ctr,aes256-ctr\n000001a0  2c:74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c  ,twofish128-ctr,\n000001b0  74:77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74  twofish192-ctr,t\n000001c0  77:6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65  wofish256-ctr,ae\n000001d0  73:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d  s128-cbc,aes192-\n000001e0  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74  cbc,aes256-cbc,t\n000001f0  77:6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77  wofish128-cbc,tw\n00000200  6f:66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f  ofish192-cbc,two\n00000210  66:69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66  fish256-cbc,twof\n00000220  69:73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68  ish-cbc,blowfish\n00000230  2d:63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62  -ctr,blowfish-cb\n00000240  63:2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d  c,3des-ctr,3des-\n00000250  63:62:63:00:00:00:39:68:6d:61:63:2d:73:68:61:32  cbc...9hmac-sha2\n00000260  2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:31:2d:39  -256,hmac-sha1-9\n00000270  36:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  6,hmac-sha1,hmac\n00000280  2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  -md5-96,hmac-md5\n00000290  00:00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35  ...9hmac-sha2-25\n000002a0  36:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  6,hmac-sha1-96,h\n000002b0  6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64  mac-sha1,hmac-md\n000002c0  35:2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00  5-96,hmac-md5...\n000002d0  04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00:00  .none....none...\n000002e0  00:00:00:00:00:00:00:00:00:00                    ..........\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0083, network: 0s)\n00000000  00:00:00:80:1f:da:0f:c7:f8:46:cd:09:95:a8:96:a0  .........F......\n00000010  ea:51:f2:59:40:95:2d:e8:c6:e1:36:ea:8f:e6:4a:8a  .Q.Y@.-...6...J.\n00000020  a5:ce:f9:e7:8a:e5:90:9d:80:89:0c:ae:af:44:d5:99  .............D..\n00000030  a5:61:b3:7f:57:0b:18:ea:85:23:db:44:c8:26:a7:12  .a..W....#.D.&..\n00000040  43:18:14:d0:46:c9:3b:46:6a:86:ce:d7:5e:50:eb:44  C...F.;Fj...^P.D\n00000050  eb:bc:7a:ad:de:5a:58:98:cd:ec:30:c6:9a:9d:74:7e  ..z..ZX...0...t~\n00000060  6e:ec:80:3d:9b:b7:2e:e5:bf:2e:46:d7:6c:61:da:d8  n..=......F.la..\n00000070  b6:51:fd:13:e9:0c:50:46:43:59:72:0d:d5:2b:cc:6f  .Q....PFCYr..+.o\n00000080  7b:fc:17:d2                                      {...\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.5058, network: 0.5058s)\n00000000  00:00:01:15:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:01:01:00:ba:5b:6f:4e:b5:da:5c  ...#......[oN..\\\n00000020  9b:f3:9b:46:f7:aa:1d:83:e8:e9:e9:47:83:f1:3e:59  ...F.......G..>Y\n00000030  77:85:20:04:03:a3:c0:46:0f:c8:1f:43:16:8c:26:f3  w. ....F...C..&.\n00000040  e6:01:2d:80:3a:9e:b7:12:bc:91:47:a9:e0:64:ef:49  ..-.:.....G..d.I\n00000050  5c:e1:6e:7d:54:26:c0:3c:56:44:97:f0:55:63:1b:d3  .n}T&..VD..Uc..\n00000060  c3:9f:b1:63:d6:b0:6c:43:49:ea:92:52:53:8b:8a:e7  ...c..lCI..RS...\n00000070  13:bf:3a:56:ca:cd:f3:b9:c5:c9:73:33:44:1d:27:ba  ..:V......s3D.'.\n00000080  78:7d:48:1c:1a:d4:58:88:29:9f:6c:ff:87:27:9f:c6  x}H...X.).l..'..\n00000090  f5:a6:1d:47:d3:30:54:4e:54:f2:40:8a:e1:a1:88:a4  ...G.0TNT.@.....\n000000a0  79:fd:1c:0d:73:e7:a2:2b:05:ac:f2:08:cc:e4:2e:94  y...s..+........\n000000b0  23:44:9c:76:72:ed:aa:58:69:51:07:8c:15:70:59:e9  #D.vr..XiQ...pY.\n000000c0  9b:36:1f:b1:44:9b:b3:8a:62:43:dc:09:eb:a4:ec:57  .6..D...bC.....W\n000000d0  25:10:60:05:84:ea:e8:22:44:57:20:65:0b:3c:63:fe  %.....\"DW e..c.\n000000e0  27:cb:ee:60:8d:1d:d8:81:28:10:02:22:3c:c5:ba:7c  '......(..\"...|\n000000f0  69:dc:48:0e:45:2b:cd:db:76:6f:33:b3:14:21:a4:e0  i.H.E+..vo3..!..\n00000100  74:e6:46:9e:33:a0:77:2d:af:c0:05:97:d9:af:0e:ad  t.F.3.w-........\n00000110  d1:2f:c0:3e:47:25:4f:bb:27:00:00:00:81:00:db:45  ./.>G%O.'......E\n00000120  30:e4:be:89:25:9d:ba:b3:93:6a:0d:b3:f8:8c:34:9f  0...%....j....4.\n00000130  c5:d2:37:47:28:d5:3a:4c:71:a4:83:84:86:f0:7e:45  ..7G(.:Lq.....~E\n00000140  27:8c:ec:65:3a:c3:df:da:63:d1:b8:37:e8:c3:a0:a2  '..e:...c..7....\n00000150  1c:0a:1a:94:66:99:2a:4c:aa:b8:3a:0a:57:c0:87:1a  ....f.*L..:.W...\n00000160  d9:b3:02:ce:d3:11:cf:ec:ba:56:53:97:36:8b:00:dc  .........VS.6...\n00000170  10:f4:67:16:f3:34:9a:7d:52:62:4b:ea:54:d8:98:67  ..g..4.}RbK.T..g\n00000180  14:26:78:2b:0f:63:ea:26:a9:47:9e:d3:ba:4c:9a:5d  .&x+.c.&.G...L.]\n00000190  9a:75:c7:d9:4d:76:a4:74:99:f3:d6:d0:0c:0f:00:00  .u..Mv.t........\n000001a0  01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00:01  ......ssh-rsa...\n000001b0  00:88:66:f0:e3:d8:04:56:bf:dc:c6:7d:0d:bb:9d:c6  ..f....V...}....\n000001c0  8c:68:d5:e6:23:38:5b:f1:ef:9f:81:61:55:0f:5a:e0  .h..#8[....aU.Z.\n000001d0  53:61:cd:05:bf:5f:e0:79:c6:cf:99:3e:38:97:a8:23  Sa....y...>8..#\n000001e0  87:49:fe:34:d0:d1:ac:12:d3:9f:c4:81:2c:f3:82:cb  .I.4........,...\n000001f0  8f:c2:5c:74:46:be:28:8b:b8:98:41:8c:a4:20:5b:9a  ..\\tF.(...A.. [.\n00000200  ff:3a:32:9e:cf:16:70:6f:00:e1:b9:ee:67:1c:4e:b3  .:2...po....g.N.\n00000210  a7:92:00:6a:8c:90:f5:a0:e0:59:a2:49:59:13:1a:44  ...j.....Y.IY..D\n00000220  9c:52:5d:32:78:89:1e:f1:50:8f:f4:43:83:16:d5:be  .R]2x...P..C....\n00000230  35:f6:60:8f:53:c0:5c:fc:b9:55:b7:57:0d:19:5a:9e  5.`.S...U.W..Z.\n00000240  50:26:49:88:80:5c:1b:48:6b:4a:40:62:79:5c:cb:d4  P&I...HkJ@by..\n00000250  e9:79:64:7a:44:53:b1:19:8c:32:16:48:14:49:e5:70  .ydzDS...2.H.I.p\n00000260  d5:f3:0c:f7:f5:5f:1b:da:ef:ea:bf:52:24:34:73:77  ..........R$4sw\n00000270  ad:f3:18:a7:5a:32:e6:a2:89:39:e3:b4:a6:3d:5f:13  ....Z2...9...=.\n00000280  96:d1:99:e3:29:06:3c:9f:7a:be:b9:3c:6d:54:34:65  ....)...z...mT4e\n00000290  5f:7d:df:f3:e4:e0:9a:8a:98:5a:9a:21:5a:e9:27:bd  }.......Z.!Z.'.\n000002a0  b6:b7:39:ee:10:89:34:00:14:84:07:b8:df:b8:e9:ba  ..9...4.........\n000002b0  2d                                               -\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0004, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0059, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.4331, network: 0.4329s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0002, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.2238, network: 0.2237s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0002, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.218, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  03:70:77:64                                      .pwd\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.2083, network: 0.0001s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:fe                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0002, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.4554, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0003, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  06:6c:73:20:2d:6c:61                             .ls -la\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.2127, network: 0.0001s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0002, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:fe                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00 \n```\n. Yes, it closing connection. My aim is to check if traffic tunelling is available and get external ip.\nSeems like there is no way to do it, sometimes executing is unavailable, like that.\n. Hey there!\nSometimes my server doesn't accept connect request, can I see why from code?\nWant to know why, like (banned, login/password is bad, crypto-algorithm is wrong, etc). I want to put this reason in variable, is it possible?\nlogin() returns only true/false value.\n$ssh = new Net_SSH2($server['server_ip'], 22, 30);\nif(!$ssh->login($server['server_user'], $server['server_password'] )) {\n.....\n}\n. Thanks for answer.\nSometimes ssh gives error 10054: connection was forcibly dropped by server.\nIs it possible to catch it by using getErrors()?\n. ",
    "sapzxc": "I found same issue:\nhttp://stackoverflow.com/questions/8243873/how-can-i-access-class-constants-using-self-inside-an-anonymous-function-def\nAnd then made search by Crypt folder and found only one \"self::\" place used in string (DES.php):\n$init_encrypt = '$ke = $self->keys[self::ENCRYPT];';\n$init_decrypt = '$kd = $self->keys[self::DECRYPT];';\nNow changed to \n$init_encrypt = '$ke = $self->keys[$self::ENCRYPT];';\n$init_decrypt = '$kd = $self->keys[$self::DECRYPT];';\nNow testing, but looks like this fixed.\n. \"$init_encription\" used in \"_createInlineCryptFunction\"\nand there we see\nreturn create_function('$_action, &$self, $_text', $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' }');\nAbout access to class constants:\nhttp://php.net/manual/en/language.oop5.constants.php\n\nAs of PHP 5.3.0, it's possible to reference the class using a variable. The variable's value can not be a keyword (e.g. self, parent and static).\n\nSo var $self proper name for fix bug. \n. Sorry, closed, will recheck some cases.\n. Yes, you are right. I fixed this and copy-paste message from previous pull, my fault. \nBut code in this pull works properly, tested several days. \n. Looks like it is similar fix but made by hard way using own timeout flags instead system function :)\nDid not tested your tree yet.\nWhy you do not prefer stream_get_meta_data ?\n. Not sure about stream_get_meta_data. Lets read php documentation:\n\ntimed_out (bool) - TRUE if the stream timed out while waiting for data on the last call to fread() or fgets().\n\nNeed test, but I suggest that stream_get_meta_data works as we need.\n. ",
    "kravco": "This issue has been fixed two years ago, but bad merge introduced it again. openssl merge reintroduced the issue. ",
    "leola": "strangely enough, if I set wrong login/password , I still get \n<- NET_SSH2_MSG_USERAUTH_SUCCESS\nin the logs\n. thanks for the tip,\nin fact I realized that the regular SSH authentication does not work on\nthis server; ie. typing \"ssh admin@10.X.Y.Z\" would still ask you to type in\nthe login ;\nI managed to make it connect using  the below code\n$ssh = new Net_SSH2('10.137.101.3');\nif (!$ssh->login('foo', 'bar')) {\n    exit('Login Failed');\n}\n$ssh->read('ogin:');\n$ssh->write(\"admin\\n\");\n$ssh->read('assword:');\n$ssh->write(\"realpassword\\n\");\nOn 18 March 2015 at 04:41, terrafrost notifications@github.com wrote:\n\nI see that you're doing enable and show wlan all. Do those need to be\ndone one after the other? If so then you may want to consider interactive\nmode. eg.\n$ssh->read('[prompt]');$ssh->write(\"enable\\n\");echo $ssh->read('[prompt]');\nstrangely enough, if I set wrong login/password , I still get\n<- NET_SSH2_MSG_USERAUTH_SUCCESS\nin the logs\nSounds like a server issue to me - presumably this would be an issue with\nany other SSH2 / SFTP client (eg. putty or whatever) you tried.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/637#issuecomment-82725539.\n. \n",
    "superstartickets": "i initially set the username and password with the private key do i need to\nresend it again with the next command?  Also you are correct it is -L not\n-l nevertheless\nhow do i specify the private key a second time so i can get it to work\ninstead of getting a permission issue?\nOn Fri, Apr 3, 2015 at 12:01 AM, terrafrost notifications@github.com\nwrote:\n\n$ssh->exec('ssh -l 3307:localhost:3306 ourwebsite.com sleep 60');\nPer man ssh I think what you want to do is ssh -L. I also note that\nyou're not specifying a username or key in that command. If you're logging\nin as ourusername (ie. the same user you SSH'd into the box initially with)\nI guess the lack of a username doesn't matter but there's still the matter\nof the key. Is it in your id_rsa file on ourwebsite.com? Otherwise that\ncommand won't work.\nFinally, unless you're SSH'ing into ourwebsite.com from ourwebsite.com\nthen presumably the 127.0.0.1:3307 mysql \"server\" will be on\nourwebsite.com and not the machine you're doing the SSH'ing from.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/653#issuecomment-89154815.\n. \n",
    "jonxiest": "I'm not using phpseclib and I'm getting exactly the same kind of error with PHP SoapClient after i upgraded from php version 5.6.6 -> 5.6.7. So I guess the bug is in PHP Soap library.\nI'm using the SoapClient instance as singleton, so I guess I'm also gonna try creating a new instance for every request, and try if it works.\n. Setting the 'keep_alive' => false, in SoapClient constructor params, seemed to fix the errors for me.\n. ",
    "nforced": "Right, it turns out that it has to do with \"timeout\" and \"connection_timeout\" but I haven't got the time to investigate further. This can help explain some of the aspects http://stackoverflow.com/questions/4824799/soapfault-exception-http-error-fetching-http-headers\n. ",
    "electric": "Just wanted to say that thanks to this thread I solved an issue that had been plaguing me for 4 days straight. 'keep_alive' => false was the fix for me also, as I was getting the \"error:0906D06C:PEM routines:PEM_read_bio:no start line\" error.\nCheers.\n. ",
    "andrey012": "terrafrost,\nI think my PR and #584 https://github.com/phpseclib/phpseclib/pull/584 are different.\n584 https://github.com/phpseclib/phpseclib/pull/584 is about reporting progress to the application.\nMy PR is about streaming data in the manner Curl can do - instead of giving a file or a string you can give a callback and Net will call callback to get next piece of data.\nFor me the reason was simple - there is a server with 80 Gb database and only 20 Gb of free space, when I try to pack the database through mysqldump | gzip  - it can hit the free space. This way I managed to stream things without taking any of disk space.\nI've made cosmetic tweaks as you requested, in the same branch.\nThank you.\nAG\nterrafrost wrote:\n\nThere's another PR that does something similar:\n584 https://github.com/phpseclib/phpseclib/pull/584\nI like your method better however. That said, the other PR adds a |is_callable| check. It'd be good if your PR did the same thing.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/pull/655#issuecomment-91755362.\n. terrafrost wrote:\nHowever, none-the-less, I still don't like how that PR add's a sixth parameter to an already overloaded method.\nI think I didn't add any new parameters to any function.\nDo you mean SOURCE_CALLBACK constant?\nAlthough that said I guess I'm willing to live with that patch with the understanding that that will be removed from later (BC breaking) versions of phpseclib. eg.\n|$sftp = new Net_SFTP(...);\n$sftp->login(...);\n$fp = $sftp->open('filename.ext', 'w');\n$fp->write('whatever');\n$fp->close();|\n|This way is better, of course. |As for me - I'd leave BC where possible.\n\nAG\n. Sorry, I didn't notice, that there is 1.0 version.\nI've made same changes there and will create another PR for 1.0 branch.\nAlso, I've changed throw with user_error as you recommended.\nAG\nterrafrost wrote:\n\nI think I didn't add any new parameters to any function.\nDo you mean SOURCE_CALLBACK constant?\nI was talking about the other PR.\n|This way is better, of course. |As for me - I'd leave BC where possible.\nphpseclib 0.x / 1.x would retain BC. phpseclib 2.0.x would retain BC as well. Maybe the version of phpseclib where this new API lived would be 2.1.x or 3.x or something idk.\nBasically, phpseclib has multiple concurrent versions that are being supported. Kinda like how PHP was concurrently supporting PHP 4 / 5 for a time and how phpBB is concurrently supporting 3.0 and 3.1. Although that said I'm tentatively thinking I'll support phpseclib 0.x / 1.x a good deal longer but who knows. I'm also not going to come up with a ten year roadmap for phpseclib either.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/pull/655#issuecomment-92818653.\n. I'm not @terrafrost, but since I've recently added this functionality -- I'll answer.\n\nCallback, that you mention is different thing.\n1. in SCP, not SFTP.\n2. it is used to report progress.\nThe callback, that I added to SFTP is used to pipe data without keeping it in memory (I used it to pipe from stdout of mysqldump launched via proc_open).\nAG\nAndreas Fischer wrote:\n\n@terrafrost https://github.com/terrafrost The put() function already had support for an $callback paramter (via #660 https://github.com/phpseclib/phpseclib/pull/660). Now $data can be a callback too. What's going on here?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/pull/658#issuecomment-98348099.\n. Andreas, thank you for report. Actually, as I can see - there were two PRs adding callbacks, one added callback to report progress (David Anderson in December 2014) , another was mine. But at the time I have made my change - David's one was not yet merged.\nI've tried to sort this out in e7719f765c22b4cdce55a8ba806df7664bce1fb6, my another PR.\n\nAG\nAndreas Fischer wrote:\n\n@andrey012 https://github.com/andrey012 I am talking about SFTP. Something is just not right, here.\n$callback function parameter\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1801\n$callback thrown away\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1849\n$callback taken from $data\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1855\ncall to $callback\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1899\nanothr call to $callback\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Net/SFTP.php#L1916\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/pull/658#issuecomment-98350599.\n. Opps, sorry, my fault, thank you for report.\nFixed in another PR, commit 0cc6125f8795f577aa9e01535c1a58545e290866\n\nAG\nAndreas Fischer wrote:\n\nIn phpseclib/Net/SFTP.php https://github.com/phpseclib/phpseclib/pull/658#discussion_r29546820:\n\n@@ -1759,6 +1764,10 @@ function rmdir($dir)\n      \n      * If $data is a resource then it'll be used as a resource instead.\n      \n-     *\n-     * Setting $mode to self::SOURCE_CALLBACK will use $data as callback function, which gets only one parameter -- number\n\nNET_SFTP_CALLBACK ?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/pull/658/files#r29546820.\n. \n",
    "jimmycleuren": "Sorry, it was at line 3272. I've just checked the master branch and it's still there.\n. ",
    "a432511": "I'll give it a shot. Thank you!\n. Thank you for running your tests. I appreciate it. \nThe interesting thing is that once a key stops working (even though the public key has not changed), it never works again. So it seems incredibly unlikely that the issue is actually in phpseclib because if it were, the issue would present itself randomly with a given key, rather than all of a sudden and in perpetuity. \nAlso, this issue is not exclusive to a single public key. Many public keys have exhibited the issue.\nWhat I am beginning to think is that I may have some sort of corruption of the private key on the client side.\nSome of the phpinfo:\nOpenssl: 1.0.1f 1/6/2014\nBCMath support: enabled\nbcmath.scale: 0, 0\nPHP: php-fpm\nI will keep digging as well. \nCheers,\nAdam\n. ",
    "cybermailer": "the problem occurs if i want the output of htop. \nIt dont occurs with the output of top.\nIm using raspberrybmc (linux distribution)\nProblems with htop problems (and other linux commands but this is an example of errors):\nNotice: \u001b(B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b)0\u001b[ unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[?7h unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs/includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[69D unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[56D unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[35D unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[35D unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[2B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nNotice: \u001b[1B unsupported in /www/htdocs//includes/phpseclib/File/ANSI.php on line 434\nand many more ...\nOriginal:\n//GET HTOP\n    $ssh->enablePTY();\n    $ssh->exec('htop; ');\n    $ssh->setTimeout(2);\n    $ansi->appendString($ssh->read());\n    echo $ansi->getHistory();\nI hope i used base64_encode in a correct way you need:\nMy new Code:\n//GET TOP\n    $ssh->enablePTY();\n    $ssh->exec('htop; ');\n    $ssh->setTimeout(2);\n    echo base64_encode($ssh->read());\nGyhCGykwG1sxOzI0chtbbQ8bWz83aBtbPzFoGz0bW0gbW0obWzFCICAxICAbWzA7MW0PWxtbMG0PICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAlG1swOzFtD10bW20PICAgICBUYXNrczogG1swOzFtDzI1G1ttDywgG1swOzFtDzMbW20PIHRocjsgG1swOzFtDzEbW20PIHJ1bm5pbmcNG1sxQiAgMiAgG1swOzFtD1sbWzBtDyAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wJRtbMDsxbQ9dG1ttDyAgICAgTG9hZCBhdmVyYWdlOiAbWzBtDzAuMDAgG1ttDzAuMDEgG1swOzFtDzAuMDUgG1sxQhtbNjlEG1ttDzMgIBtbMDsxbQ9bG1swbQ8gICAgICAgICAgICAgICAgICAgICAgICAgIDAuMCUbWzA7MW0PXRtbbQ8gICAgIFVwdGltZTogG1swOzFtDzAwOjM3OjQwG1sxQhtbNTZEG1ttDzQgIBtbMDsxbQ9bKioqKioqKioqKhtbMG0PICAgICAgICAgICAgICAgMzMuMyUbWzA7MW0PXRtbMUIbWzM1RBtbbQ9NZW0bWzA7MW0PW3wbW20PIyobWzBtDyAgICAgICAgICAgICAgICAgICAyNC84NjNNQhtbMDsxbQ9dG1sxQhtbMzVEG1ttD1N3cBtbMDsxbQ9bG1swbQ8gICAgICAgICAgICAgICAgICAgICAgICAwLzk5TUIbWzA7MW0PXQ0bWzJCG1swOzdtDyAgUElEIFVTRVIgICAgICBQUkkgIE5JICBWSVJUICAgUkVTICAgU0hSIFMgQ1BVJSBNRU0lICAgVElNRSsgIENvbW1hbmQgICAgICAgICAgG1sxMDsxSCAyNDc4IHBpICAgICAgICAgMjAgICAwICA0OTAwICAyNzQ0ICAyMzYwIFIgMTYuMCAgMC4zICAwOjAwLjA4IGh0b3AgICAgICAgICAgICAgG1sxMTs1SBtbbQ8xIBtbMG0Pcm9vdCAgICAgIBtbbQ8gMjAgICAwIBtbMDsxbQ8gMhtbbQ8xNTIgG1swOzFtDyAxG1ttDzM2OCAbWzA7MW0PIDEbW20PMjY0IFMgIDAuMCAgMC4yICAwOjAxLjg0IGluaXQgWzJdDRtbMUIgIDE3NSAbWzBtD3Jvb3QgICAgICAbW20PIDIwICAgMCAbWzA7MW0PIDIbW20PODk2IBtbMDsxbQ8gMhtbbQ8xNjQgG1swOzFtDyAxG1ttDzYzMiBTICAwLjAgIDAuMiAgMDowMC4zOCB1ZGV2ZCAtLWRhZW1vbg0bWzFCICAyOTYgG1swbQ9yb290ICAgICAgG1ttDyAyMCAgIDAgG1swOzFtDyAyG1ttDzg5MiAbWzA7MW0PIDIbW20PMDY0IBtbMDsxbQ8gMRtbbQ81MjAgUyAgMC4wICAwLjIgIDA6MDAuMDAgdWRldmQgLS1kYWVtb24NG1sxQiAgMzA2IBtbMG0Pcm9vdCAgICAgIBtbbQ8gMjAgICAwIBtbMDsxbQ8gMhtbbQ84OTIgG1swOzFtDyAxG1ttDzk5NiAbWzA7MW0PIDEbW20PNDU2IFMgIDAuMCAgMC4yICAwOjAwLjAwIHVkZXZkIC0tZGFlbW9uDRtbMUIgMTU2MyAbWzBtD3Jvb3QgICAgICAbW20PIDIwICAgMCAbWzA7MW0PIDEbW20PNzYwICAgOTI0ICAgODM2IFMgIDAuMCAgMC4xICAwOjAwLjg4IC91c3Ivc2Jpbi9pZnBsdWdkG1sxNjsySDE1NzIgG1swbQ9yb290ICAgICAgG1ttDyAyMCAgIDAgG1swOzFtDyAxG1ttDzc2MCAbWzA7MW0PIDEbW20PMDUyICAgOTY0IFMgIDAuMCAgMC4xICAwOjAwLjEyIC91c3Ivc2Jpbi9pZnBsdWdkG1sxNzsySDE2MTYgG1swbQ9yb290ICAgICAgG1ttDyAyMCAgIDAgG1swOzFtDyAxG1ttDzc2MCAbWzA7MW0PIDEbW20PMDUyICAgOTY0IFMgIDAuMCAgMC4xICAwOjAwLjI0IC91c3Ivc2Jpbi9pZnBsdWdkG1sxODsySDE3MjQgG1swbQ9yb290ICAgICAgG1ttDyAyMCAgIDAgG1swOzFtDyA1G1ttDzk3NiAbWzA7MW0PIDEbW20PODkyIBtbMDsxbQ8gMRtbbQ81MDQgUyAgMC4wICAwLjIgIDA6MDAuMDggL3NiaW4vd3BhX3N1cHBsaWMbWzE5OzJIMTc1NyAbWzBtD3Jvb3QgICAgICAbW20PIDIwICAgMCAbWzA7MW0PIDIbW20PMjkyIBtbMDsxbQ8gMRtbbQ8yNzIgG1swOzFtDyAxG1ttDzE1NiBTICAwLjAgIDAuMSAgMDowMC4wNCAvc2Jpbi93cGFfY2xpIC1CDRtbMUIgMTg3OCAbWzBtD25vYm9keSAgICAbW20PIDIwICAgMCAbWzA7MW0PIDIbW20PMDI4IBtbMDsxbQ8gMRtbbQ80MDQgG1swOzFtDyAxG1ttDzI4MCBTICAwLjAgIDAuMiAgMDowMC4wMiAvdXNyL3NiaW4vdGhkIC0tZBtbMjE7MkgxOTIxIBtbMG0Pcm9vdCAgICAgIBtbbQ8gMjAgICAwIBtbMDsxbQ8yORtbbQ8wMDggG1swOzFtDyAyG1ttDzMzMiAbWzA7MW0PIDIbW20PMDEyIFMgIDAuMCAgMC4zICAwOjAwLjA2IC91c3Ivc2Jpbi9yc3lzbG9nG1syMjsySDE5MjIgG1swbQ9yb290ICAgICAgG1ttDyAyMCAgIDAgG1swOzFtDzI5G1ttDzAwOCAbWzA7MW0PIDIbW20PMzMyIBtbMDsxbQ8gMhtbbQ8wMTIgUyAgMC4wICAwLjMgIDA6MDAuMDMgL3Vzci9zYmluL3JzeXNsb2cbWzIzOzJIMTkyMyAbWzBtD3Jvb3QgICAgICAbW20PIDIwICAgMCAbWzA7MW0PMjkbW20PMDA4IBtbMDsxbQ8gMhtbbQ8zMzIgG1swOzFtDyAyG1ttDzAxMiBTICAwLjAgIDAuMyAgMDowMC4wMCAvdXNyL3NiaW4vcnN5c2xvZxtbMjQ7MUhGMRtbMDs3bQ9IZWxwICAbW20PRjIbWzA7N20PU2V0dXAgG1ttD0YzG1swOzdtD1NlYXJjaBtbbQ9GNBtbMDs3bQ9GaWx0ZXIbW20PRjUbWzA7N20PVHJlZSAgG1ttD0Y2G1swOzdtD1NvcnRCeRtbbQ9GNxtbMDs3bQ9OaWNlIC0bW20PRjgbWzA7N20PTmljZSArG1ttD0Y5G1swOzdtD0tpbGwgIBtbbQ9GMTAbWzA7N20PUXVpdBtbPzdsIBtbPzdoG1tIG1ttDxtbNDs1OEgbWzA7MW0PMhtbMUIbWzUxRBtbMG0PICAgICAgICAgG1s1OzMySCAxG1s1QggbWzA7N20PODA4ICAyNDI0IFIgIDIbWzEwOzYxSDEyG1tIG1ttDw\nScreenshot of htop:\n\nScreenshot of top:\n\nThx for your help!\n. ",
    "e3betht": "Let me know if I need to fix anything. Is it possible that one of your Boolean compares is not being compared against a Boolean and that is causing it to fail? I can cast the values as Booleans before they are compared if that would help. \n. I'm glad it wasn't my changes, and I think you know my vote on the badge already. ;)\n. I understand what you mean. If I could help you update the code to \nimprove your score, would you put the badge back? Or is it less the \ngrade and more the false positives that are affecting this decision?\nOn 5/7/15 9:21 AM, terrafrost wrote:\n\nI merged this but then I undid it.\nI guess I should have checked more thoroughly before I merged but...\nconsider Crypt/DES.php for instance. It's dinging us for having \nexcessively complex code and while I agree that it kinda is, the code \nalso yields performance gains of 25%. See the discussion here:\n94 (comment)\nhttps://github.com/phpseclib/phpseclib/pull/94#discussion_r4013686\nAnd a lot of the variables come from the reference implementations for \nDES / whatever. eg.\nhttp://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf#page=14\nAltho it'd be nice if they used more descriptive variables sometimes \npeople just don't and if what you're doing is mostly an adaptation of \nthe algorithm's base implementation than idk that changing variable \nnames is a good idea.\nI think static code analysis can be a good thing but it's results have \nto be taken in stride with everything else and in lieu of that idk \nthat I like the idea of displaying a red (ie. broken badge vs. a green \n\"working\" badge) when some of the things it flags are arguably not \neven issues that ought to be \"fixed\".\nThat said, I did send codeclimate.com an email tho about it \nmisidentifying similar pieces of code as being identical when they're \nnot. Hopefully it helps :)\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/phpseclib/phpseclib/pull/668#issuecomment-99884099.\n\n\nBeth Tucker Long\nTreeline Design, LLC\n807 Arbor Vitae Place\nVerona, WI 53593\n608-770-6677\nhttp://www.TreelineDesign.com\n. ",
    "tburschka": "sry, didn't solve the issue.\n. Sry, you're right, i had to show my downloaded dependencies from composer:\nphpseclib/phpseclib        0.3.10             PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.\nsymfony/console            v2.6.6             Symfony Console Component\nI've modified my phpseclib/phpseclib with the files from your ssh2-gobal-request branch, but i post the file here: http://pastebin.com/KHknQMxd\nAlso, here is the log: http://pastebin.com/QcWaawsp\nand here the same warning message: http://pastebin.com/R7Zt9C7U\nPlease, feel free to ask for more logs (e.g. server log)\n. yep, that one worked!\n. Hi,\nsure, i can provide an example, but sleep over it also solves the problem.\nspl_autoload_extensions('.php');\nspl_autoload_register(function ($class) {\n    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n    $class = str_replace('\\\\', '/', $class);\n    }\n    if (!file_exists($class . '.php')) {\n        throw new \\Exception($class . ' not found!');\n    }\n    require_once $class . '.php';\n});\nSince \\Sodium is an Extension it will crash:\nhttps://github.com/phpseclib/phpseclib/blob/94fdbba2aab0a0c6a3554ed879e3fedc94428538/phpseclib/Net/SSH2.php#L1174\nI've modified it first to make it work:\nspl_autoload_extensions('.php');\nspl_autoload_register(function ($class) {\n    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n    $class = str_replace('\\\\', '/', $class);\n    }\n    if (file_exists($class . '.php')) {\n        require_once $class . '.php';\n    }\n});\nIt's working but in my case the best solution is using composer autoload.php file which generate an map for my classes.\nBut the Case still exits... maybe you should add an condition for extension like this:\nhttps://github.com/phpseclib/phpseclib/blob/94fdbba2aab0a0c6a3554ed879e3fedc94428538/phpseclib/Net/SSH2.php#L1222\n. ",
    "equizno345": "I was having a odd issue with \"unpack(): Type N: not enough input, ...\" and terrafrost@684d6ee fixed it. Thank you!\n. ",
    "lukas-w": "Sure - I addressed your points in c46890b00cd3c2258896af84ab6b1156e65d1fa1.\n. Ooops\u2026 Fixed. :bike: \n. > Why only md5 and sha256?\nWell originally I only planned to implement md5, as specified in RFC 4716, see https://tools.ietf.org/html/rfc4716#section-4. Then I noticed ssh-keygen -lf also supports sha256, and even uses it by default in newer releases, so I included that as well. \nWhat do you suggest? Should I just pass the $algorithm to the Hash constructor and support every algorithm Hash supports?\n. ",
    "atm08e": "0.3.10\nOn Tue, May 5, 2015 at 10:30 AM, Andreas Fischer notifications@github.com\nwrote:\n\nWhich version of phpseclib are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/675#issuecomment-99095387.\n. We are running an older version in production, but the error still appears in 0.3.10.  Command line SCP file transfer to the server works fine.\n. I was successfully uploading to an akamai cdn throughout the day when suddenly the test case started failing because of this error. I have checked my code/keys numerous times to make sure that is not the case. The code to login is very straightforward (as you know already).\n\nI will try the suggestions you have made and get back to you with results. I am running on linux mint 17, so I am not sure I can use putty to get the logs you describe (windows only?).\nThank You for the speedy reply!\n. Removed, hostnames and ips but here is CLI sftp. Ill try putty next to get packets.\n\u279c sftp -vvv -i token.private.key  user@host\nOpenSSH_6.6.1, OpenSSL 1.0.1f 6 Jan 2014\ndebug1: Reading configuration data /home/drewm/.ssh/config\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to host [ip] port 22.\ndebug1: Connection established.\ndebug3: Incorrect RSA1 identifier\ndebug3: Could not load \"token.private.key\" as a RSA1 public key\ndebug1: identity file token.private.key type -1\ndebug1: identity file token.private.key-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2\ndebug1: Remote protocol version 1.99, remote software version Server-VII-hpn13v1\ndebug1: no match: Server-VII-hpn13v1\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: load_hostkeys: loading entries for host \"host\" from file \"/home/drewm/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type DSA in file /home/drewm/.ssh/known_hosts:161\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-dss\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-dss,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-rsa\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-dss\ndebug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: mac_setup: setup hmac-md5\ndebug1: kex: server->client aes128-ctr hmac-md5 none\ndebug2: mac_setup: setup hmac-md5\ndebug1: kex: client->server aes128-ctr hmac-md5 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<3072<8192) sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: bits set: 1535/3072\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\ndebug1: Server host key: DSA ee:33:bd:ac:7b:6e:bd:0b:60:6e:49:20:56:cb:00:d3\ndebug3: load_hostkeys: loading entries for host \"opns.upload.akamai.com\" from file \"/home/drewm/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type DSA in file /home/drewm/.ssh/known_hosts:161\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: load_hostkeys: loading entries for host \"ip\" from file \"/home/drewm/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type DSA in file /home/drewm/.ssh/known_hosts:163\ndebug3: load_hostkeys: loaded 1 keys\ndebug1: Host 'host' is known and matches the DSA host key.\ndebug1: Found key in /home/drewm/.ssh/known_hosts:161\ndebug2: bits set: 1523/3072\ndebug1: ssh_dss_verify: signature correct\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: Roaming not allowed by server\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: drewm@Admins-MacBook-Pro-2.local (0x7ff54c508cb0),\ndebug2: key: drewm@Admins-MacBook-Pro-2.local (0x7ff54c508e50),\ndebug2: key: drewm@Admins-MacBook-Pro-2.local (0x7ff54c509180),\ndebug2: key: email (0x7ff54c50dce0),\ndebug2: key: token.private.key ((nil)), explicit\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: drewm@Admins-MacBook-Pro-2.local\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Offering DSA public key: drewm@Admins-MacBook-Pro-2.local\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Offering RSA public key: drewm@Admins-MacBook-Pro-2.local\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Offering RSA public key: atm08e@gmail.com\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Trying private key: token.private.key\ndebug1: key_parse_private2: missing begin marker\ndebug1: read PEM private key done: type RSA\ndebug3: sign_and_send_pubkey: RSA 10:98:ce:b7:46:15:e7:40:ba:6e:48:41:47:9f:3b:8d\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Remote: Agent forwarding disabled.\ndebug1: Remote: X11 forwarding disabled.\ndebug1: Remote: Forced command: /home/sshacs/acssshsink token\ndebug1: Authentication succeeded (publickey).\nAuthenticated to host ([ip]:22).\ndebug2: fd 4 setting O_NONBLOCK\ndebug3: fd 5 is O_NONBLOCK\ndebug1: channel 0: new [client-session]\ndebug3: ssh_session2_open: channel_new: 0\ndebug2: channel 0: send open\ndebug1: Entering interactive session.\ndebug2: callback start\ndebug2: fd 3 setting TCP_NODELAY\ndebug3: packet_set_tos: set IP_TOS 0x08\ndebug2: client_session2_setup: id 0\ndebug1: Sending environment.\ndebug3: Ignored env XDG_CONFIG_DIRS\ndebug1: Sending env LANG = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug3: Ignored env DISPLAY\ndebug3: Ignored env XDG_VTNR\ndebug3: Ignored env LOGNAME\ndebug3: Ignored env PWD\ndebug3: Ignored env MANDATORY_PATH\ndebug3: Ignored env GNOME_KEYRING_PID\ndebug3: Ignored env XAUTHORITY\ndebug3: Ignored env COLORTERM\ndebug3: Ignored env XDG_SESSION_ID\ndebug3: Ignored env MDM_LANG\ndebug3: Ignored env DESKTOP_SESSION\ndebug3: Ignored env MDMSESSION\ndebug3: Ignored env XDG_SESSION_DESKTOP\ndebug3: Ignored env DEFAULTS_PATH\ndebug3: Ignored env GNOME_KEYRING_CONTROL\ndebug3: Ignored env TEXTDOMAINDIR\ndebug3: Ignored env WINDOWPATH\ndebug3: Ignored env USERNAME\ndebug3: Ignored env SIMBASE\ndebug3: Ignored env GDMSESSION\ndebug3: Ignored env MDM_XSERVER_LOCATION\ndebug3: Ignored env DBUS_SESSION_BUS_ADDRESS\ndebug3: Ignored env GNOME_DESKTOP_SESSION_ID\ndebug3: Ignored env VTE_VERSION\ndebug3: Ignored env GDM_XSERVER_LOCATION\ndebug3: Ignored env XDG_DATA_DIRS\ndebug3: Ignored env TEXTDOMAIN\ndebug3: Ignored env GJS_DEBUG_TOPICS\ndebug3: Ignored env XDG_SESSION_COOKIE\ndebug3: Ignored env SHELL\ndebug3: Ignored env GJS_DEBUG_OUTPUT\ndebug3: Ignored env WINDOWID\ndebug3: Ignored env SSH_AGENT_PID\ndebug3: Ignored env SESSION_MANAGER\ndebug3: Ignored env SSH_AUTH_SOCK\ndebug3: Ignored env XDG_CURRENT_DESKTOP\ndebug3: Ignored env PATH\ndebug3: Ignored env TERM\ndebug3: Ignored env HOME\ndebug3: Ignored env XDG_SEAT\ndebug3: Ignored env CINNAMON_VERSION\ndebug3: Ignored env XDG_RUNTIME_DIR\ndebug3: Ignored env GPG_AGENT_INFO\ndebug3: Ignored env USER\ndebug3: Ignored env SHLVL\ndebug3: Ignored env OLDPWD\ndebug3: Ignored env ZSH\ndebug3: Ignored env PAGER\ndebug3: Ignored env LESS\ndebug1: Sending env LC_CTYPE = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug3: Ignored env LSCOLORS\ndebug3: Ignored env EDITOR\ndebug3: Ignored env GOPATH\ndebug3: Ignored env _\ndebug1: Sending subsystem: sftp\ndebug2: channel 0: request subsystem confirm 1\ndebug2: callback done\ndebug2: channel 0: open confirm rwindow 0 rmax 32768\ndebug2: channel 0: rcvd adjust 2097152\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: subsystem request accepted on channel 0\ndebug1: client_input_channel_req: channel 0 rtype exit-status reply 0\ndebug2: channel 0: rcvd eof\ndebug2: channel 0: output open -> drain\ndebug2: channel 0: obuf empty\ndebug2: channel 0: close_write\ndebug2: channel 0: output drain -> closed\ndebug2: channel 0: rcvd close\ndebug2: channel 0: close_read\ndebug2: channel 0: input open -> closed\ndebug3: channel 0: will not send data after close\ndebug2: channel 0: almost dead\ndebug2: channel 0: gc: notify user\ndebug2: channel 0: gc: user detached\ndebug2: channel 0: send close\ndebug2: channel 0: is dead\ndebug2: channel 0: garbage collecting\ndebug1: channel 0: free: client-session, nchannels 1\ndebug3: channel 0: status: The following connections are open:\n  #0 client-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)\ndebug1: fd 0 clearing O_NONBLOCK\ndebug3: fd 1 is not O_NONBLOCK\nTransferred: sent 4984, received 2632 bytes, in 0.4 seconds\nBytes per second: sent 14032.9, received 7410.6\ndebug1: Exit status 0\nConnection closed\n. As requested,\nPutty hangs after trying to connect and says, \"Please connect within the next 60 seconds\"\n=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2015.05.06 10:49:13 =~=~=~=~=~=~=~=~=~=~=~=\nEvent Log: Writing new session log (SSH packets mode) to file: /home/drewm/Desktop/putty.log\nEvent Log: Looking up host \"host\" (IPv4)\nEvent Log: Connecting to ip port 22\nEvent Log: Server version: SSH-1.99-Server-VII-hpn13v1\nEvent Log: Using SSH protocol version 2\nEvent Log: We claim version: SSH-2.0-PuTTY_Local:_Apr__9_2014_09:27:08\nOutgoing packet #0x0, type 20 / 0x14 (SSH2_MSG_KEXINIT)\n  00000000  0e 95 9e f4 ca 85 d8 76 b2 d6 5a 5f f2 da d5 29  .......v..Z_...)\n  00000010  00 00 00 9a 64 69 66 66 69 65 2d 68 65 6c 6c 6d  ....diffie-hellm\n  00000020  61 6e 2d 67 72 6f 75 70 2d 65 78 63 68 61 6e 67  an-group-exchang\n  00000030  65 2d 73 68 61 32 35 36 2c 64 69 66 66 69 65 2d  e-sha256,diffie-\n  00000040  68 65 6c 6c 6d 61 6e 2d 67 72 6f 75 70 2d 65 78  hellman-group-ex\n  00000050  63 68 61 6e 67 65 2d 73 68 61 31 2c 64 69 66 66  change-sha1,diff\n  00000060  69 65 2d 68 65 6c 6c 6d 61 6e 2d 67 72 6f 75 70  ie-hellman-group\n  00000070  31 34 2d 73 68 61 31 2c 64 69 66 66 69 65 2d 68  14-sha1,diffie-h\n  00000080  65 6c 6c 6d 61 6e 2d 67 72 6f 75 70 31 2d 73 68  ellman-group1-sh\n  00000090  61 31 2c 72 73 61 32 30 34 38 2d 73 68 61 32 35  a1,rsa2048-sha25\n  000000a0  36 2c 72 73 61 31 30 32 34 2d 73 68 61 31 00 00  6,rsa1024-sha1..\n  000000b0  00 0f 73 73 68 2d 72 73 61 2c 73 73 68 2d 64 73  ..ssh-rsa,ssh-ds\n  000000c0  73 00 00 00 9f 61 65 73 32 35 36 2d 63 74 72 2c  s....aes256-ctr,\n  000000d0  61 65 73 32 35 36 2d 63 62 63 2c 72 69 6a 6e 64  aes256-cbc,rijnd\n  000000e0  61 65 6c 2d 63 62 63 40 6c 79 73 61 74 6f 72 2e  ael-cbc@lysator.\n  000000f0  6c 69 75 2e 73 65 2c 61 65 73 31 39 32 2d 63 74  liu.se,aes192-ct\n  00000100  72 2c 61 65 73 31 39 32 2d 63 62 63 2c 61 65 73  r,aes192-cbc,aes\n  00000110  31 32 38 2d 63 74 72 2c 61 65 73 31 32 38 2d 63  128-ctr,aes128-c\n  00000120  62 63 2c 62 6c 6f 77 66 69 73 68 2d 63 74 72 2c  bc,blowfish-ctr,\n  00000130  62 6c 6f 77 66 69 73 68 2d 63 62 63 2c 33 64 65  blowfish-cbc,3de\n  00000140  73 2d 63 74 72 2c 33 64 65 73 2d 63 62 63 2c 61  s-ctr,3des-cbc,a\n  00000150  72 63 66 6f 75 72 32 35 36 2c 61 72 63 66 6f 75  rcfour256,arcfou\n  00000160  72 31 32 38 00 00 00 9f 61 65 73 32 35 36 2d 63  r128....aes256-c\n  00000170  74 72 2c 61 65 73 32 35 36 2d 63 62 63 2c 72 69  tr,aes256-cbc,ri\n  00000180  6a 6e 64 61 65 6c 2d 63 62 63 40 6c 79 73 61 74  jndael-cbc@lysat\n  00000190  6f 72 2e 6c 69 75 2e 73 65 2c 61 65 73 31 39 32  or.liu.se,aes192\n  000001a0  2d 63 74 72 2c 61 65 73 31 39 32 2d 63 62 63 2c  -ctr,aes192-cbc,\n  000001b0  61 65 73 31 32 38 2d 63 74 72 2c 61 65 73 31 32  aes128-ctr,aes12\n  000001c0  38 2d 63 62 63 2c 62 6c 6f 77 66 69 73 68 2d 63  8-cbc,blowfish-c\n  000001d0  74 72 2c 62 6c 6f 77 66 69 73 68 2d 63 62 63 2c  tr,blowfish-cbc,\n  000001e0  33 64 65 73 2d 63 74 72 2c 33 64 65 73 2d 63 62  3des-ctr,3des-cb\n  000001f0  63 2c 61 72 63 66 6f 75 72 32 35 36 2c 61 72 63  c,arcfour256,arc\n  00000200  66 6f 75 72 31 32 38 00 00 00 2d 68 6d 61 63 2d  four128...-hmac-\n  00000210  73 68 61 32 2d 32 35 36 2c 68 6d 61 63 2d 73 68  sha2-256,hmac-sh\n  00000220  61 31 2c 68 6d 61 63 2d 73 68 61 31 2d 39 36 2c  a1,hmac-sha1-96,\n  00000230  68 6d 61 63 2d 6d 64 35 00 00 00 2d 68 6d 61 63  hmac-md5...-hmac\n  00000240  2d 73 68 61 32 2d 32 35 36 2c 68 6d 61 63 2d 73  -sha2-256,hmac-s\n  00000250  68 61 31 2c 68 6d 61 63 2d 73 68 61 31 2d 39 36  ha1,hmac-sha1-96\n  00000260  2c 68 6d 61 63 2d 6d 64 35 00 00 00 09 6e 6f 6e  ,hmac-md5....non\n  00000270  65 2c 7a 6c 69 62 00 00 00 09 6e 6f 6e 65 2c 7a  e,zlib....none,z\n  00000280  6c 69 62 00 00 00 00 00 00 00 00 00 00 00 00 00  lib.............\nIncoming packet #0x0, type 20 / 0x14 (SSH2_MSG_KEXINIT)\n  00000000  08 0f 86 ae 00 fc 68 90 07 80 3a b2 fc a5 b4 10  ......h...:.....\n  00000010  00 00 00 7e 64 69 66 66 69 65 2d 68 65 6c 6c 6d  ...~diffie-hellm\n  00000020  61 6e 2d 67 72 6f 75 70 2d 65 78 63 68 61 6e 67  an-group-exchang\n  00000030  65 2d 73 68 61 32 35 36 2c 64 69 66 66 69 65 2d  e-sha256,diffie-\n  00000040  68 65 6c 6c 6d 61 6e 2d 67 72 6f 75 70 2d 65 78  hellman-group-ex\n  00000050  63 68 61 6e 67 65 2d 73 68 61 31 2c 64 69 66 66  change-sha1,diff\n  00000060  69 65 2d 68 65 6c 6c 6d 61 6e 2d 67 72 6f 75 70  ie-hellman-group\n  00000070  31 34 2d 73 68 61 31 2c 64 69 66 66 69 65 2d 68  14-sha1,diffie-h\n  00000080  65 6c 6c 6d 61 6e 2d 67 72 6f 75 70 31 2d 73 68  ellman-group1-sh\n  00000090  61 31 00 00 00 07 73 73 68 2d 64 73 73 00 00 00  a1....ssh-dss...\n  000000a0  9d 61 65 73 31 32 38 2d 63 62 63 2c 33 64 65 73  .aes128-cbc,3des\n  000000b0  2d 63 62 63 2c 62 6c 6f 77 66 69 73 68 2d 63 62  -cbc,blowfish-cb\n  000000c0  63 2c 63 61 73 74 31 32 38 2d 63 62 63 2c 61 72  c,cast128-cbc,ar\n  000000d0  63 66 6f 75 72 31 32 38 2c 61 72 63 66 6f 75 72  cfour128,arcfour\n  000000e0  32 35 36 2c 61 72 63 66 6f 75 72 2c 61 65 73 31  256,arcfour,aes1\n  000000f0  39 32 2d 63 62 63 2c 61 65 73 32 35 36 2d 63 62  92-cbc,aes256-cb\n  00000100  63 2c 72 69 6a 6e 64 61 65 6c 2d 63 62 63 40 6c  c,rijndael-cbc@l\n  00000110  79 73 61 74 6f 72 2e 6c 69 75 2e 73 65 2c 61 65  ysator.liu.se,ae\n  00000120  73 31 32 38 2d 63 74 72 2c 61 65 73 31 39 32 2d  s128-ctr,aes192-\n  00000130  63 74 72 2c 61 65 73 32 35 36 2d 63 74 72 00 00  ctr,aes256-ctr..\n  00000140  00 9d 61 65 73 31 32 38 2d 63 62 63 2c 33 64 65  ..aes128-cbc,3de\n  00000150  73 2d 63 62 63 2c 62 6c 6f 77 66 69 73 68 2d 63  s-cbc,blowfish-c\n  00000160  62 63 2c 63 61 73 74 31 32 38 2d 63 62 63 2c 61  bc,cast128-cbc,a\n  00000170  72 63 66 6f 75 72 31 32 38 2c 61 72 63 66 6f 75  rcfour128,arcfou\n  00000180  72 32 35 36 2c 61 72 63 66 6f 75 72 2c 61 65 73  r256,arcfour,aes\n  00000190  31 39 32 2d 63 62 63 2c 61 65 73 32 35 36 2d 63  192-cbc,aes256-c\n  000001a0  62 63 2c 72 69 6a 6e 64 61 65 6c 2d 63 62 63 40  bc,rijndael-cbc@\n  000001b0  6c 79 73 61 74 6f 72 2e 6c 69 75 2e 73 65 2c 61  lysator.liu.se,a\n  000001c0  65 73 31 32 38 2d 63 74 72 2c 61 65 73 31 39 32  es128-ctr,aes192\n  000001d0  2d 63 74 72 2c 61 65 73 32 35 36 2d 63 74 72 00  -ctr,aes256-ctr.\n  000001e0  00 00 69 68 6d 61 63 2d 6d 64 35 2c 68 6d 61 63  ..ihmac-md5,hmac\n  000001f0  2d 73 68 61 31 2c 75 6d 61 63 2d 36 34 40 6f 70  -sha1,umac-64@op\n  00000200  65 6e 73 73 68 2e 63 6f 6d 2c 68 6d 61 63 2d 72  enssh.com,hmac-r\n  00000210  69 70 65 6d 64 31 36 30 2c 68 6d 61 63 2d 72 69  ipemd160,hmac-ri\n  00000220  70 65 6d 64 31 36 30 40 6f 70 65 6e 73 73 68 2e  pemd160@openssh.\n  00000230  63 6f 6d 2c 68 6d 61 63 2d 73 68 61 31 2d 39 36  com,hmac-sha1-96\n  00000240  2c 68 6d 61 63 2d 6d 64 35 2d 39 36 00 00 00 69  ,hmac-md5-96...i\n  00000250  68 6d 61 63 2d 6d 64 35 2c 68 6d 61 63 2d 73 68  hmac-md5,hmac-sh\n  00000260  61 31 2c 75 6d 61 63 2d 36 34 40 6f 70 65 6e 73  a1,umac-64@opens\n  00000270  73 68 2e 63 6f 6d 2c 68 6d 61 63 2d 72 69 70 65  sh.com,hmac-ripe\n  00000280  6d 64 31 36 30 2c 68 6d 61 63 2d 72 69 70 65 6d  md160,hmac-ripem\n  00000290  64 31 36 30 40 6f 70 65 6e 73 73 68 2e 63 6f 6d  d160@openssh.com\n  000002a0  2c 68 6d 61 63 2d 73 68 61 31 2d 39 36 2c 68 6d  ,hmac-sha1-96,hm\n  000002b0  61 63 2d 6d 64 35 2d 39 36 00 00 00 1a 6e 6f 6e  ac-md5-96....non\n  000002c0  65 2c 7a 6c 69 62 40 6f 70 65 6e 73 73 68 2e 63  e,zlib@openssh.c\n  000002d0  6f 6d 2c 7a 6c 69 62 00 00 00 1a 6e 6f 6e 65 2c  om,zlib....none,\n  000002e0  7a 6c 69 62 40 6f 70 65 6e 73 73 68 2e 63 6f 6d  zlib@openssh.com\n  000002f0  2c 7a 6c 69 62 00 00 00 00 00 00 00 00 00 00 00  ,zlib...........\n  00000300  00 00                                            ..\nEvent Log: Doing Diffie-Hellman group exchange\nOutgoing packet #0x1, type 30 / 0x1e (SSH2_MSG_KEX_DH_GEX_REQUEST)\n  00000000  00 00 10 00                                      ....\nIncoming packet #0x1, type 31 / 0x1f (SSH2_MSG_KEX_DH_GEX_GROUP)\n  00000000  00 00 02 01 00 c7 fe 66 1f f2 67 55 17 25 8b 6e  .......f..gU.%.n\n  00000010  89 3f e8 1d fc 29 ed fb 28 ff e3 25 c4 f9 29 bf  .?...)..(..%..).\n  00000020  af 5d 02 03 df 5d 75 d9 66 b0 88 6a 41 97 cc 8f  .]...]u.f..jA...\n  00000030  2e e3 39 34 9d f8 8e 73 c5 4a 31 5c 40 2d f6 09  ..94...s.J1\\@-..\n  00000040  da 61 a2 37 43 51 67 52 4f 8e a3 7e 5a b3 3e 8a  .a.7CQgRO..~Z.>.\n  00000050  0c 80 e3 6d f4 f6 b9 d6 14 19 58 cc 78 4c dd b6  ...m......X.xL..\n  00000060  e2 54 30 38 c9 96 6d 62 ac 24 74 78 6f 2e 28 90  .T08..mb.$txo.(.\n  00000070  e4 93 5a d4 7b b0 05 a6 fc 30 98 17 80 7e c9 59  ..Z.{....0...~.Y\n  00000080  7b 69 85 8f 1f bd 6a 1b 28 e8 97 ef b6 21 9f 9f  {i....j.(....!..\n  00000090  f8 3b ea ff d4 48 c9 f2 f8 c3 3c ea 7c 08 24 24  .;...H....<.|.$$\n  000000a0  28 fd 75 d2 18 41 1e 41 52 3b 68 8b f3 d9 31 13  (.u..A.AR;h...1.\n  000000b0  74 e4 3d 89 63 c8 21 61 1b bb c9 1c a2 39 68 e6  t.=.c.!a.....9h.\n  000000c0  0f b1 43 fa 0b 36 12 06 57 73 4d 5c 83 c1 c5 8a  ..C..6..WsM\\....\n  000000d0  5a 22 9c cd dc 27 87 5e 51 c3 58 f0 c8 fe dd e4  Z\"...'.^Q.X.....\n  000000e0  a1 1c 50 e0 a1 54 c8 01 27 b6 ff 92 f4 96 f7 f2  ..P..T..'.......\n  000000f0  fa 41 d6 01 a3 ea 88 a3 a5 35 69 aa 3f 3a ba 57  .A.......5i.?:.W\n  00000100  61 75 7a c5 53 cf 57 57 88 00 37 9c 5f 06 08 2d  auz.S.WW..7._..-\n  00000110  d6 08 88 41 d7 ba 48 a5 8d 14 22 b0 de c0 88 27  ...A..H...\"....'\n  00000120  96 55 c2 d6 38 0c f7 09 7c d3 95 65 e9 99 87 85  .U..8...|..e....\n  00000130  cb eb 30 0a ff ad ea ca 28 52 01 cb b2 7f 48 45  ..0.....(R....HE\n  00000140  6e f7 e4 9d e7 53 80 d0 d1 b4 cc c2 8a db 8e 12  n....S..........\n  00000150  90 34 73 54 8d 74 a8 84 7d aa dc 34 31 5f 15 73  .4sT.t..}..41_.s\n  00000160  51 c4 cd 50 7f f9 b0 3c a6 dd 1c 95 4b b7 5c 9f  Q..P...<....K.\\.\n  00000170  d3 c4 25 fe fa 76 fc 03 fb 34 6b e1 1e 61 b6 7a  ..%..v...4k..a.z\n  00000180  3a d3 74 c1 84 3e ca 63 6c c7 45 42 49 ab 2a 08  :.t..>.cl.EBI.*.\n  00000190  b6 45 da dc bf b4 8a 47 0b 12 06 ed 20 02 0f f0  .E.....G.... ...\n  000001a0  a0 f5 c2 25 31 87 bb c2 bc 7f 44 9a d5 8d 35 74  ...%1.....D...5t\n  000001b0  6e 5a 47 b4 a7 bb 40 45 92 c0 a1 f4 e3 ba 34 93  nZG...@E......4.\n  000001c0  8c 1e 3c 32 46 4e 1a 52 d3 e7 22 fa 11 65 b7 2e  ..<2FN.R..\"..e..\n  000001d0  8b 43 8c 11 cf d0 db 42 a4 08 1e d0 9f 46 8a 2e  .C.....B.....F..\n  000001e0  17 c8 d3 f2 bb 68 9d c0 cc 83 1f 88 9d 7b af c3  .....h.......{..\n  000001f0  9d 2a 7f 6c 9a 36 2e 9b ae 48 b1 2f ba cf 34 f9  .*.l.6...H./..4.\n  00000200  df d6 3b 11 13 00 00 00 01 02                    ..;.......\nEvent Log: Doing Diffie-Hellman key exchange with hash SHA-256\nOutgoing packet #0x2, type 32 / 0x20 (SSH2_MSG_KEX_DH_GEX_INIT)\n  00000000  00 00 02 00 68 72 88 3d ee f4 ec 68 17 7c 18 f7  ....hr.=...h.|..\n  00000010  a8 31 c0 67 f2 9f 4f 89 a9 43 ed bb ff d0 2e e6  .1.g..O..C......\n  00000020  0d 41 e7 d4 99 b5 5a aa 69 48 95 c9 0e e4 db 00  .A....Z.iH......\n  00000030  da a2 62 07 00 65 da 97 ea 9b 2f b4 b9 a5 93 51  ..b..e..../....Q\n  00000040  43 c6 88 a9 d5 1c ce 1b 18 31 40 53 50 b8 e3 2e  C........1@SP...\n  00000050  9b 06 19 af 39 46 a7 cf 3d 96 cf db 14 b6 a3 0f  ....9F..=.......\n  00000060  38 41 fc 47 4e 76 b6 9c 25 1a 40 8b cb 70 b0 21  8A.GNv..%.@..p.!\n  00000070  41 18 0f 9a ab c4 50 8d 56 ce 90 8d 10 90 02 33  A.....P.V......3\n  00000080  a6 3d 1a fa eb d5 ea 9e b9 c6 59 3a 94 d8 26 e7  .=........Y:..&.\n  00000090  e1 aa b5 f0 dc de c2 05 29 b7 a9 c6 23 42 91 4b  ........)...#B.K\n  000000a0  f4 01 18 99 bb c6 75 2d a2 b0 32 bf 2c 71 e1 c0  ......u-..2.,q..\n  000000b0  be 8f a8 bb 35 80 ab 25 b8 01 6e 28 6b b8 23 1e  ....5..%..n(k.#.\n  000000c0  e8 00 da 8e c4 71 8c 21 4e 68 e3 b0 7b fa f2 fe  .....q.!Nh..{...\n  000000d0  31 f8 4c 32 53 ce 11 0e 5f 28 c5 cb fa 6b 32 91  1.L2S..._(...k2.\n  000000e0  39 a7 fe 9c a3 50 41 f6 1f 07 5e 53 1c 15 6e e2  9....PA...^S..n.\n  000000f0  c4 84 3d e5 dc fe 3a bd 83 05 94 32 73 ae 6b db  ..=...:....2s.k.\n  00000100  bd ef 66 72 23 ec 62 ad f4 3e f4 c9 50 27 24 a9  ..fr#.b..>..P'$.\n  00000110  c7 98 ea 7e 77 89 c4 ee 19 7b 5a 59 1b 48 ae ad  ...~w....{ZY.H..\n  00000120  72 f2 5e 5f 48 3d 52 aa b8 39 2f ce bc e8 70 94  r.^_H=R..9/...p.\n  00000130  0e 1b 97 70 78 5a 35 6e 68 7e 80 56 01 cc 83 f8  ...pxZ5nh~.V....\n  00000140  b2 c2 5a c3 fc 4e b7 de 85 0b d1 9a 2a b9 97 0e  ..Z..N......*...\n  00000150  a3 0e 6e 9f 21 63 d7 f4 70 d9 a2 bb 6a 56 b8 e2  ..n.!c..p...jV..\n  00000160  bd 8d f0 46 1e 97 dc f9 bc 50 46 97 ff 15 50 a4  ...F.....PF...P.\n  00000170  97 b1 da 9c 3f 52 6d 01 a0 64 8b 3d ee 99 4d 81  ....?Rm..d.=..M.\n  00000180  f2 e7 73 77 3b e7 43 27 c6 88 6e 64 85 7c 02 34  ..sw;.C'..nd.|.4\n  00000190  a2 21 94 c6 17 1b f4 3a 1a aa 20 cf 33 b5 a6 8c  .!.....:.. .3...\n  000001a0  5e 5b b6 2f 6a b8 af 17 77 b7 2b 0a 83 a1 fc 46  ^[./j...w.+....F\n  000001b0  5c 4d af 4b 65 d0 71 0c e0 13 d5 f0 17 d8 12 bc  \\M.Ke.q.........\n  000001c0  9f 8f b4 53 03 12 4f 42 d9 12 fe 88 56 36 17 0e  ...S..OB....V6..\n  000001d0  91 18 c7 17 6f 2a 31 bc 79 be 2a 94 bf d6 ad 20  ....o*1.y.*.... \n  000001e0  4a fd 8b 34 04 30 66 c0 f5 41 3f 02 9b 2c 80 9b  J..4.0f..A?..,..\n  000001f0  c2 fe 7a 4b ef 27 57 7c e3 3e 57 78 02 c4 5c 2b  ..zK.'W|.>Wx..\\+\n  00000200  54 d9 11 8f                                      T...\nIncoming packet #0x2, type 33 / 0x21 (SSH2_MSG_KEX_DH_GEX_REPLY)\n  00000000  00 00 01 b2 00 00 00 07 73 73 68 2d 64 73 73 00  ........ssh-dss.\n  00000010  00 00 81 00 ac 12 86 d7 dc 60 8d 3f 4a f9 90 2a  .........`.?J..*\n  00000020  2d 3a d8 10 67 2e 7a 4e c7 45 74 63 98 32 c2 84  -:..g.zN.Etc.2..\n  00000030  8c ad f7 62 5f 2b c6 81 68 64 9b 3e 5c 6c c6 0c  ...b_+..hd.>\\l..\n  00000040  74 b0 cb 41 a7 4b 0b 1a 05 12 59 dc f6 8d ac c1  t..A.K....Y.....\n  00000050  97 c5 03 2d 22 8c 68 00 b5 bb 9a 18 3d 58 ea 8f  ...-\".h.....=X..\n  00000060  aa 80 3c 49 66 94 69 df d9 74 69 7e 15 fe a7 02  ..<If.i..ti~....\n  00000070  7c c9 fc 66 36 d6 7c 98 86 8a 54 89 ba 28 ab 55  |..f6.|...T..(.U\n  00000080  b3 b0 9c fb 08 b3 db 5a 7d e0 c7 46 7e 87 21 53  .......Z}..F~.!S\n  00000090  9f 4f 54 c9 00 00 00 15 00 eb ea 03 18 16 02 43  .OT............C\n  000000a0  83 d1 f4 88 da 95 c1 43 61 ce 03 d0 b3 00 00 00  .......Ca.......\n  000000b0  81 00 84 45 8c 82 89 63 54 da 5c 6d 54 75 4d 66  ...E...cT.\\mTuMf\n  000000c0  39 5b 97 60 73 cc 3f e1 d2 b2 9e dc fd 63 d6 eb  9[.`s.?......c..\n  000000d0  c6 7a e0 d5 e9 0d 73 57 da d5 18 52 76 f1 08 fa  .z....sW...Rv...\n  000000e0  04 55 aa 5f 42 62 98 c8 8c ef c3 7d 47 16 0b 91  .U._Bb.....}G...\n  000000f0  f9 f5 5a aa e9 00 31 ec 93 c0 7d 7f c1 2a 24 42  ..Z...1...}..*$B\n  00000100  cb e1 66 98 a7 04 95 8a 7d d7 01 63 69 98 46 51  ..f.....}..ci.FQ\n  00000110  63 eb 8d a3 20 51 40 10 c9 80 11 46 fe 91 c1 c8  c... Q@....F....\n  00000120  42 3f c7 5d 4e c9 6e 0d 51 3d 4a bf 87 7e fc 5d  B?.]N.n.Q=J..~.]\n  00000130  a3 69 00 00 00 80 47 d7 25 c3 a0 bd b4 16 29 b8  .i....G.%.....).\n  00000140  d2 b2 8a 6b 47 ec 8b 68 9e 8b 58 21 12 fe 1e 89  ...kG..h..X!....\n  00000150  7d 6c 02 7d 1e 70 af 20 37 88 5f 33 d4 e2 75 33  }l.}.p. 7._3..u3\n  00000160  27 a0 50 01 5c fc 7c 6a 9f 7e 77 b1 bb 55 be 04  '.P.\\.|j.~w..U..\n  00000170  33 e6 b4 b7 3d cd a6 f9 c7 f4 ff 63 e3 41 7b 4e  3...=......c.A{N\n  00000180  76 d9 35 37 a5 86 20 19 d4 39 9f 6e 1f 4c 5b 0d  v.57.. ..9.n.L[.\n  00000190  70 df 93 e1 70 f1 92 57 05 f3 6d cd 66 23 00 77  p...p..W..m.f#.w\n  000001a0  cb ac ac 92 c0 36 69 7c dc f8 08 44 6c 89 5d ea  .....6i|...Dl.].\n  000001b0  0e e5 14 b5 4e a4 00 00 02 00 55 26 bb 94 e7 93  ....N.....U&....\n  000001c0  1b c3 3b 09 08 ec 55 36 4c df 14 25 28 46 46 b8  ..;...U6L..%(FF.\n  000001d0  ab 7d 57 35 26 55 54 3e a2 2e 1c 51 1c 4d 84 79  .}W5&UT>...Q.M.y\n  000001e0  8e 43 de b5 c8 a4 69 ee 28 55 2b 76 cf e7 12 85  .C....i.(U+v....\n  000001f0  a6 11 9d 0e f0 75 77 e6 05 00 25 a6 ee 29 6f 3c  .....uw...%..)o<\n  00000200  69 03 24 be 67 1f 28 8e 6e 08 2a b7 42 af e7 27  i.$.g.(.n.*.B..'\n  00000210  c2 aa d1 59 2b 8b 4a 61 c6 e6 72 4f 3c 45 93 ca  ...Y+.Ja..rO<E..\n  00000220  c0 68 68 80 80 2e 2a 5a 03 47 f1 b5 0d 16 73 9f  .hh...*Z.G....s.\n  00000230  14 ce 7d 05 d6 bb e9 7b 81 82 9e 6c 98 48 a5 52  ..}....{...l.H.R\n  00000240  8f ef d4 ed e4 8f b4 99 ed 17 09 7b 32 ff 8c 9b  ...........{2...\n  00000250  c2 75 25 3a fe 95 e7 27 0e 4d 4f 79 14 3c 08 8d  .u%:...'.MOy.<..\n  00000260  c0 91 88 80 86 b6 cc 91 2b 10 e1 82 2a c5 1d 43  ........+...*..C\n  00000270  40 5e d0 60 44 46 0b 67 f4 62 ac 77 41 71 88 99  @^.`DF.g.b.wAq..\n  00000280  a4 b1 de f4 8d f8 b6 fb d3 0c 1f 76 ee a3 c2 e5  ...........v....\n  00000290  15 d4 3b bc c7 d1 bb 93 67 c8 03 e5 b0 de 03 40  ..;.....g......@\n  000002a0  1f 91 13 18 d2 24 5d e4 00 75 24 00 6f 4e 0b ea  .....$]..u$.oN..\n  000002b0  cb c6 25 e5 62 c7 47 50 fb 71 4e 49 b3 ad 81 93  ..%.b.GP.qNI....\n  000002c0  2c 54 3a 66 c5 a2 5a e5 b0 d7 54 d3 bc 03 e3 51  ,T:f..Z...T....Q\n  000002d0  5d 9b 51 df 49 5a 02 8a e0 b6 3a 6c 06 44 69 fe  ].Q.IZ....:l.Di.\n  000002e0  0f 54 8f 5a 17 c7 a8 f7 fd d4 cc b7 2e 6c 4d 6e  .T.Z.........lMn\n  000002f0  b8 87 be 56 e7 58 6c 59 49 06 7e 7a a6 c5 ad 13  ...V.XlYI.~z....\n  00000300  80 48 c6 da b4 73 36 e5 3b 62 74 fe a7 46 c5 d1  .H...s6.;bt..F..\n  00000310  f1 32 7f fa d1 75 51 ed 4a cb b2 88 ac af 4a 78  .2...uQ.J.....Jx\n  00000320  a8 98 23 78 f5 bd 75 01 f2 b8 24 6a cb 87 2b 7a  ..#x..u...$j..+z\n  00000330  77 ff a2 5b f4 76 3c d3 d7 e6 b7 b4 64 9c d7 82  w..[.v<.....d...\n  00000340  b1 39 4d 14 34 9d c0 77 a3 dc 82 e0 4d 6e cc fa  .9M.4..w....Mn..\n  00000350  eb 87 b1 3f cd 5b 99 6a 5d ee 89 78 ff 40 6c 05  ...?.[.j]..x.@l.\n  00000360  60 ac 61 3c f7 f6 de 22 c0 36 1c 25 cf e2 d2 49  `.a<...\".6.%...I\n  00000370  1a fc e9 a8 4a ee f7 00 24 e7 95 12 91 93 83 e4  ....J...$.......\n  00000380  39 51 be 2b 46 8f 0f 59 7e ea d0 28 fd 70 a1 5f  9Q.+F..Y~..(.p._\n  00000390  8e 80 dd 53 fd f3 b7 d2 39 2b 59 86 84 fd fe 86  ...S....9+Y.....\n  000003a0  5c 72 e9 03 b5 a1 a1 d3 b4 dc 42 d1 8f 66 6b 68  \\r........B..fkh\n  000003b0  28 7f a4 33 06 2b 61 ed 60 c3 00 00 00 37 00 00  (..3.+a.`....7..\n  000003c0  00 07 73 73 68 2d 64 73 73 00 00 00 28 4c 51 1d  ..ssh-dss...(LQ.\n  000003d0  71 13 15 5f 71 7e 49 31 a0 97 97 24 1f 6a d2 dc  q.._q~I1...$.j..\n  000003e0  65 db 5d d2 10 e5 54 43 21 3d b4 f7 56 a9 68 64  e.]...TC!=..V.hd\n  000003f0  89 3f 95 54 4a                                   .?.TJ\nEvent Log: Host key fingerprint is:\nEvent Log: ssh-dss 1024 ee:33:bd:ac:7b:6e:bd:0b:60:6e:49:20:56:cb:00:d3\nOutgoing packet #0x3, type 21 / 0x15 (SSH2_MSG_NEWKEYS)\nEvent Log: Initialised AES-256 SDCTR client->server encryption\nEvent Log: Initialised HMAC-SHA1 client->server MAC algorithm\nIncoming packet #0x3, type 21 / 0x15 (SSH2_MSG_NEWKEYS)\nEvent Log: Initialised AES-256 SDCTR server->client encryption\nEvent Log: Initialised HMAC-SHA1 server->client MAC algorithm\nOutgoing packet #0x4, type 5 / 0x05 (SSH2_MSG_SERVICE_REQUEST)\n  00000000  00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68  ....ssh-userauth\nIncoming packet #0x4, type 6 / 0x06 (SSH2_MSG_SERVICE_ACCEPT)\n  00000000  00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68  ....ssh-userauth\nEvent Log: Reading private key file \"token.putty.private.key\"\nOutgoing packet #0x5, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)\n  00000000  00 00 00 06 73 73 68 61 63 73 00 00 00 0e 73 73  ....sshacs....ss\n  00000010  68 2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 04  h-connection....\n  00000020  6e 6f 6e 65                                      none\nIncoming packet #0x5, type 51 / 0x33 (SSH2_MSG_USERAUTH_FAILURE)\n  00000000  00 00 00 09 70 75 62 6c 69 63 6b 65 79 00        ....publickey.\nOutgoing packet #0x6, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)\n  00000000  00 00 00 06 73 73 68 61 63 73 00 00 00 0e 73 73  ....sshacs....ss\n  00000010  68 2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 09  h-connection....\n  00000020  70 75 62 6c 69 63 6b 65 79 00 00 00 00 07 73 73  publickey.....ss\n  00000030  68 2d 72 73 61 00 00 01 17 00 00 00 07 73 73 68  h-rsa........ssh\n  00000040  2d 72 73 61 00 00 00 03 01 00 01 00 00 01 01 00  -rsa............\n  00000050  d2 7a e3 7d 19 75 6f 73 13 88 21 a5 92 91 78 4b  .z.}.uos..!...xK\n  00000060  7f 23 e9 33 e9 64 93 f9 c2 f5 a9 72 ed 29 f7 4f  .#.3.d.....r.).O\n  00000070  65 75 31 ee 06 cf 9f 06 24 f4 af f7 65 27 18 ea  eu1.....$...e'..\n  00000080  4c ac 52 4e 40 61 0d f3 2a fb e6 ea 31 b0 8a fc  L.RN@a..*...1...\n  00000090  c9 37 f3 6f 65 be 13 8d 32 3a cd 4c 52 41 81 3e  .7.oe...2:.LRA.>\n  000000a0  21 b6 39 17 06 64 48 85 46 c4 25 09 ed fa bd 12  !.9..dH.F.%.....\n  000000b0  3f 0a 63 88 f2 5c 32 6e 60 ca db ab 7d ec 5c fc  ?.c..\\2n`...}.\\.\n  000000c0  32 4b f4 fc 5c 4e cd 8f 0f b1 83 a1 d1 59 a0 80  2K..\\N.......Y..\n  000000d0  a9 33 04 97 23 01 dd 26 61 58 02 ef fd 0e 87 9c  .3..#..&aX......\n  000000e0  73 dc 9c 80 2e ec 4d b3 6c f9 b9 0d 3d 9e b7 81  s.....M.l...=...\n  000000f0  0c c7 c6 35 29 78 28 4c de e3 4c d7 d8 7d 22 88  ...5)x(L..L..}\".\n  00000100  09 80 51 5d 4c a3 63 55 6c 91 9c 0e 1e 40 01 19  ..Q]L.cUl....@..\n  00000110  a0 2c 6b f8 56 9c a8 7b 5b f7 53 25 24 71 69 23  .,k.V..{[.S%$qi#\n  00000120  59 a1 86 31 5c 80 2a f8 29 9e cd 04 de b3 4f 6a  Y..1\\.*.).....Oj\n  00000130  eb c9 f2 ce b3 7a 22 bd b1 a9 c4 ed 94 a4 38 7c  .....z\".......8|\n  00000140  9d 93 ec d2 00 32 1f 1d b4 15 71 8b 09 83 48 4d  .....2....q...HM\nEvent Log: Offered public key\nIncoming packet #0x6, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 1a 41 67 65 6e 74 20 66 6f 72 77 61  .....Agent forwa\n  00000010  72 64 69 6e 67 20 64 69 73 61 62 6c 65 64 2e 00  rding disabled..\n  00000020  00 00 00                                         ...\nEvent Log: Remote debug message: Agent forwarding disabled.\nIncoming packet #0x7, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 18 58 31 31 20 66 6f 72 77 61 72 64  .....X11 forward\n  00000010  69 6e 67 20 64 69 73 61 62 6c 65 64 2e 00 00 00  ing disabled....\n  00000020  00                                               .\nEvent Log: Remote debug message: X11 forwarding disabled.\nIncoming packet #0x8, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 2d 46 6f 72 63 65 64 20 63 6f 6d 6d  ....-Forced comm\n  00000010  61 6e 64 3a 20 2f 68 6f 6d 65 2f 73 73 68 61 63  and: /home/sshac\n  00000020  73 2f 61 63 73 73 73 68 73 69 6e 6b 20 74 6f 6b  s/acssshsink tok\n  00000030  65 6e 00 00 00 00                                en....\nEvent Log: Remote debug message: Forced command: /home/sshacs/acssshsink token\nIncoming packet #0x9, type 60 / 0x3c (SSH2_MSG_USERAUTH_PK_OK)\n  00000000  00 00 00 07 73 73 68 2d 72 73 61 00 00 01 17 00  ....ssh-rsa.....\n  00000010  00 00 07 73 73 68 2d 72 73 61 00 00 00 03 01 00  ...ssh-rsa......\n  00000020  01 00 00 01 01 00 d2 7a e3 7d 19 75 6f 73 13 88  .......z.}.uos..\n  00000030  21 a5 92 91 78 4b 7f 23 e9 33 e9 64 93 f9 c2 f5  !...xK.#.3.d....\n  00000040  a9 72 ed 29 f7 4f 65 75 31 ee 06 cf 9f 06 24 f4  .r.).Oeu1.....$.\n  00000050  af f7 65 27 18 ea 4c ac 52 4e 40 61 0d f3 2a fb  ..e'..L.RN@a..*.\n  00000060  e6 ea 31 b0 8a fc c9 37 f3 6f 65 be 13 8d 32 3a  ..1....7.oe...2:\n  00000070  cd 4c 52 41 81 3e 21 b6 39 17 06 64 48 85 46 c4  .LRA.>!.9..dH.F.\n  00000080  25 09 ed fa bd 12 3f 0a 63 88 f2 5c 32 6e 60 ca  %.....?.c..\\2n`.\n  00000090  db ab 7d ec 5c fc 32 4b f4 fc 5c 4e cd 8f 0f b1  ..}.\\.2K..\\N....\n  000000a0  83 a1 d1 59 a0 80 a9 33 04 97 23 01 dd 26 61 58  ...Y...3..#..&aX\n  000000b0  02 ef fd 0e 87 9c 73 dc 9c 80 2e ec 4d b3 6c f9  ......s.....M.l.\n  000000c0  b9 0d 3d 9e b7 81 0c c7 c6 35 29 78 28 4c de e3  ..=......5)x(L..\n  000000d0  4c d7 d8 7d 22 88 09 80 51 5d 4c a3 63 55 6c 91  L..}\"...Q]L.cUl.\n  000000e0  9c 0e 1e 40 01 19 a0 2c 6b f8 56 9c a8 7b 5b f7  ...@...,k.V..{[.\n  000000f0  53 25 24 71 69 23 59 a1 86 31 5c 80 2a f8 29 9e  S%$qi#Y..1\\.*.).\n  00000100  cd 04 de b3 4f 6a eb c9 f2 ce b3 7a 22 bd b1 a9  ....Oj.....z\"...\n  00000110  c4 ed 94 a4 38 7c 9d 93 ec d2 00 32 1f 1d b4 15  ....8|.....2....\n  00000120  71 8b 09 83 48 4d                                q...HM\nEvent Log: Offer of public key accepted\nOutgoing packet #0x7, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)\n  00000000  00 00 00 06 73 73 68 61 63 73 00 00 00 0e 73 73  ....sshacs....ss\n  00000010  68 2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 09  h-connection....\n  00000020  70 75 62 6c 69 63 6b 65 79 01 00 00 00 07 73 73  publickey.....ss\n  00000030  68 2d 72 73 61 00 00 01 17 00 00 00 07 73 73 68  h-rsa........ssh\n  00000040  2d 72 73 61 00 00 00 03 01 00 01 00 00 01 01 00  -rsa............\n  00000050  d2 7a e3 7d 19 75 6f 73 13 88 21 a5 92 91 78 4b  .z.}.uos..!...xK\n  00000060  7f 23 e9 33 e9 64 93 f9 c2 f5 a9 72 ed 29 f7 4f  .#.3.d.....r.).O\n  00000070  65 75 31 ee 06 cf 9f 06 24 f4 af f7 65 27 18 ea  eu1.....$...e'..\n  00000080  4c ac 52 4e 40 61 0d f3 2a fb e6 ea 31 b0 8a fc  L.RN@a..*...1...\n  00000090  c9 37 f3 6f 65 be 13 8d 32 3a cd 4c 52 41 81 3e  .7.oe...2:.LRA.>\n  000000a0  21 b6 39 17 06 64 48 85 46 c4 25 09 ed fa bd 12  !.9..dH.F.%.....\n  000000b0  3f 0a 63 88 f2 5c 32 6e 60 ca db ab 7d ec 5c fc  ?.c..\\2n`...}.\\.\n  000000c0  32 4b f4 fc 5c 4e cd 8f 0f b1 83 a1 d1 59 a0 80  2K..\\N.......Y..\n  000000d0  a9 33 04 97 23 01 dd 26 61 58 02 ef fd 0e 87 9c  .3..#..&aX......\n  000000e0  73 dc 9c 80 2e ec 4d b3 6c f9 b9 0d 3d 9e b7 81  s.....M.l...=...\n  000000f0  0c c7 c6 35 29 78 28 4c de e3 4c d7 d8 7d 22 88  ...5)x(L..L..}\".\n  00000100  09 80 51 5d 4c a3 63 55 6c 91 9c 0e 1e 40 01 19  ..Q]L.cUl....@..\n  00000110  a0 2c 6b f8 56 9c a8 7b 5b f7 53 25 24 71 69 23  .,k.V..{[.S%$qi#\n  00000120  59 a1 86 31 5c 80 2a f8 29 9e cd 04 de b3 4f 6a  Y..1\\.*.).....Oj\n  00000130  eb c9 f2 ce b3 7a 22 bd b1 a9 c4 ed 94 a4 38 7c  .....z\".......8|\n  00000140  9d 93 ec d2 00 32 1f 1d b4 15 71 8b 09 83 48 4d  .....2....q...HM\n  00000150  00 00 01 0f 00 00 00 07 73 73 68 2d 72 73 61 00  ........ssh-rsa.\n  00000160  00 01 00 9b 80 08 09 9c db c4 47 82 78 2e 47 c6  ..........G.x.G.\n  00000170  82 48 86 00 3a db a6 d8 6f 6d b9 25 db ed 1e 80  .H..:...om.%....\n  00000180  87 bc 72 fa 88 23 d8 99 d7 38 24 0e f3 a7 b0 aa  ..r..#...8$.....\n  00000190  69 47 bf 50 19 aa 55 d6 0b 76 f9 66 c7 00 66 c8  iG.P..U..v.f..f.\n  000001a0  32 ac 11 eb 25 af c8 36 22 88 a7 c0 45 43 53 12  2...%..6\"...ECS.\n  000001b0  b8 ea b4 22 51 e9 7a ec 1e 48 68 2b 66 af 2f 4a  ...\"Q.z..Hh+f./J\n  000001c0  85 47 32 b1 af db d2 a5 a3 64 68 be d1 69 bf b4  .G2......dh..i..\n  000001d0  29 f3 6f c1 8e 0e 4c 84 2d 17 46 4f 34 5c 5a 33  ).o...L.-.FO4\\Z3\n  000001e0  b3 e2 72 34 04 81 c8 04 3d 90 e9 28 4f 10 99 1c  ..r4....=..(O...\n  000001f0  88 ae f8 6c 53 c6 e6 35 1f 0d e6 0d ea a0 88 02  ...lS..5........\n  00000200  d3 5c c5 33 9f 89 fd 43 6d 3a 96 38 f5 a7 b0 2b  .\\.3...Cm:.8...+\n  00000210  69 c6 19 60 bb 37 c1 6d b0 7b 4d 87 1a f3 58 37  i..`.7.m.{M...X7\n  00000220  26 69 d6 05 da 58 88 53 d1 24 7a 68 a7 a5 8f 10  &i...X.S.$zh....\n  00000230  db 26 e9 b9 59 5b cf 41 28 e9 2e 77 67 e6 5a 4f  .&..Y[.A(..wg.ZO\n  00000240  9f ba ca 30 81 c0 8a 38 83 bf 33 9c 66 63 9b 41  ...0...8..3.fc.A\n  00000250  0c 22 17 0d 74 75 38 59 ab e7 f8 24 81 4b d9 ec  .\"..tu8Y...$.K..\n  00000260  c4 dc 95                                         ...\nEvent Log: Sent public key signature\nIncoming packet #0xa, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 1a 41 67 65 6e 74 20 66 6f 72 77 61  .....Agent forwa\n  00000010  72 64 69 6e 67 20 64 69 73 61 62 6c 65 64 2e 00  rding disabled..\n  00000020  00 00 00                                         ...\nEvent Log: Remote debug message: Agent forwarding disabled.\nIncoming packet #0xb, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 18 58 31 31 20 66 6f 72 77 61 72 64  .....X11 forward\n  00000010  69 6e 67 20 64 69 73 61 62 6c 65 64 2e 00 00 00  ing disabled....\n  00000020  00                                               .\nEvent Log: Remote debug message: X11 forwarding disabled.\nIncoming packet #0xc, type 4 / 0x04 (SSH2_MSG_DEBUG)\n  00000000  00 00 00 00 2d 46 6f 72 63 65 64 20 63 6f 6d 6d  ....-Forced comm\n  00000010  61 6e 64 3a 20 2f 68 6f 6d 65 2f 73 73 68 61 63  and: /home/sshac\n  00000020  73 2f 61 63 73 73 73 68 73 69 6e 6b 20 74 6f 6b  s/acssshsink tok\n  00000030  65 6e 00 00 00 00                                en....\nEvent Log: Remote debug message: Forced command: /home/sshacs/acssshsink token\nIncoming packet #0xd, type 52 / 0x34 (SSH2_MSG_USERAUTH_SUCCESS)\nEvent Log: Access granted\nEvent Log: Opening session as main channel\nOutgoing packet #0x8, type 90 / 0x5a (SSH2_MSG_CHANNEL_OPEN)\n  00000000  00 00 00 07 73 65 73 73 69 6f 6e 00 00 01 00 00  ....session.....\n  00000010  00 40 00 00 00 40 00                             .@...@.\nIncoming packet #0xe, type 91 / 0x5b (SSH2_MSG_CHANNEL_OPEN_CONFIRMATION)\n  00000000  00 00 01 00 00 00 00 00 00 00 00 00 00 00 80 00  ................\nEvent Log: Opened main channel\nOutgoing packet #0x9, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 00 00 00 00 00 07 70 74 79 2d 72 65 71 01  ........pty-req.\n  00000010  00 00 00 05 78 74 65 72 6d 00 00 00 50 00 00 00  ....xterm...P...\n  00000020  18 00 00 00 00 00 00 00 00 00 00 00 10 03 00 00  ................\n  00000030  00 7f 80 00 00 96 00 81 00 00 96 00 00           .............\nOutgoing packet #0xa, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 00 00 00 00 00 05 73 68 65 6c 6c 01        ........shell.\nIncoming packet #0xf, type 99 / 0x63 (SSH2_MSG_CHANNEL_SUCCESS)\n  00000000  00 00 01 00                                      ....\nEvent Log: Allocated pty (ospeed 38400bps, ispeed 38400bps)\nIncoming packet #0x10, type 93 / 0x5d (SSH2_MSG_CHANNEL_WINDOW_ADJUST)\n  00000000  00 00 01 00 00 20 00 00                          ..... ..\nIncoming packet #0x11, type 99 / 0x63 (SSH2_MSG_CHANNEL_SUCCESS)\n  00000000  00 00 01 00                                      ....\nEvent Log: Started a shell/command\nIncoming packet #0x12, type 94 / 0x5e (SSH2_MSG_CHANNEL_DATA)\n  00000000  00 00 01 00 00 00 00 2c 50 6c 65 61 73 65 20 63  .......,Please c\n  00000010  6f 6e 6e 65 63 74 20 77 69 74 68 69 6e 20 74 68  onnect within th\n  00000020  65 20 6e 65 78 74 20 36 30 20 73 65 63 6f 6e 64  e next 60 second\n  00000030  73 2e 0d 0a                                      s...\nIncoming packet #0x13, type 98 / 0x62 (SSH2_MSG_CHANNEL_REQUEST)\n  00000000  00 00 01 00 00 00 00 0b 65 78 69 74 2d 73 74 61  ........exit-sta\n  00000010  74 75 73 00 00 00 00 00                          tus.....\nEvent Log: Server sent command exit status 0\nIncoming packet #0x14, type 96 / 0x60 (SSH2_MSG_CHANNEL_EOF)\n  00000000  00 00 01 00                                      ....\nOutgoing packet #0xb, type 96 / 0x60 (SSH2_MSG_CHANNEL_EOF)\n  00000000  00 00 00 00                                      ....\nOutgoing packet #0xc, type 97 / 0x61 (SSH2_MSG_CHANNEL_CLOSE)\n  00000000  00 00 00 00                                      ....\nIncoming packet #0x15, type 97 / 0x61 (SSH2_MSG_CHANNEL_CLOSE)\n  00000000  00 00 01 00                                      ....\nEvent Log: Disconnected: All channels closed\n. The issue was that my chrooted directory was deleted on the sftp server. I have no idea how that happened but recreating the directory fixed the issue.\n. ",
    "lpirl": "Granted, this issue is rather abstract.\nIf we refer those tickets here, I could check if they altogether would fulfill the requirements \"defined\" by the guide linked in the original post. If so, we could mark this a duplicate.\n. ",
    "y060121": "@terrafrost \nHow to integrate RSA code in PHP CodeIgniter?\n. ",
    "khanmuhammad": "its not working on PHP 7 . ",
    "iammattcoleman": "While the entire library may not be stable, many pieces of it are. I have a proposal: rather than waiting until it's \"done\" or \"ready\" as a whole, tag it in its current state and create a to-do/errata document that enumerates what is not yet production-ready.\nTo speed up stabilization of the individual components, phpseclib could be restructured as a metapackage that pulls in separate packages for BigIntegers, RSA, SSH2, SFTP, X.509, and symmetric key encryption.\n. Also, thanks for the tip about the 'prefer-stable' setting! I had no idea it existed. :+1:\n. I just noticed that my \"proposal\" is already on the roadmap.\n. ",
    "jeffrey-stickle": "After doing some additional debugging, it looks like the discrepancy starts in _parseKey at line 1143\nif ($this->_decodeLength($key) != strlen($key)) {\n    return false;\n}\n. You're right I did post on stackoverflow then figured I'd come right to the source since it looked like you've been great with support and I've been struggling with this for a couple days now.\nI am installing using composer and was previously running 0.3.10. I now switched it to use dev-master but am seeing the same result.\nI think @bantu is on to something, when I output var_dump(ini_get('mbstring.func_overload')); locally I get 0 and on the server I get 7. Does having mbstring.func_overload enabled break the key parsing?\n. Ahh that makes sense. I'll have to look into some way of temporarily disabling that while performing the encryption. Thanks so much for the clarification!\n. ",
    "clarkk": "Found out that the server was out of free storage.. :)\n. ",
    "martinph": "@magnusjt do you have a more complete example of your workaround? I'd like to implement this within my ratchet app but I'm having a few difficulties understanding it all :(\n. Forgot to reply, but thanks! Just what I needed. You're a life saver! \n. ",
    "magnusjt": "@martinph \nI'm using it in one of my projects: https://github.com/magnusjt/socketty/tree/master/server\nHere's a distilled example (not tested):\n```\n$ssh = new \\Net_SSH2($ip);\n$ssh->login($username, $password); // Note: This is blocking currently\n$loop = use \\React\\EventLoop\\Factory::create();\n// Watch ssh socket for changes\n$loop->addReadStream($ssh->fsock, function() use($ssh){\n    $data = readWithoutLocking($ssh);\n});\nfunction readWithoutLocking($ssh){\n    $ssh->curTimeout = $ssh->timeout;\n    $ssh->is_timeout = false;\nif (!($ssh->bitmap & NET_SSH2_MASK_LOGIN)) {\n    throw new \\Exception('Read not allowed before login');\n}\n\nif (!($ssh->bitmap & NET_SSH2_MASK_SHELL) && !$ssh->_initShell()) {\n    throw new \\Exception('Unable to initiate an interactive shell session');\n}\n\n$channel = $ssh->_get_interactive_channel();\n$response = $ssh->_get_channel_packet($channel);\n\nreturn $response;\n\n}\n```\n. ",
    "vlopez": "I was actually using the namespace version one I downloaded from github.\nAnyway I tried the version from your link (new Net_SFTP) but it still hangs, same kind of log.\nAny help is welcomed. Thank you \n. I see... wow ok.\nThat worked.\nI was trying to understand that line...\nSo if this was a x64 PHP installation that would not be an issue?\nMy OS is x64 but phpinfo shows PHP Architecture x86\nThank you!\n. ",
    "xaled1": "Having the same issue here.\nPHP Fatal error:  Uncaught RuntimeException: Unable to fulfill channel request in /opt/openpda/client/phpseclib/Net/SSH2.php:3675\nStack trace:\n0 /opt/openpda/client/phpseclib/Net/SFTP.php(452): phpseclib\\Net\\SSH2->get_channel_packet(256)\n1 /opt/openpda/client/pda_test_sftp1.php(47): phpseclib\\Net\\SFTP->login('Dott', Object(phpseclib\\Crypt\\RSA))\n2 {main}\nthrown in /opt/openpda/client/phpseclib/Net/SSH2.php on line 3675\nTrace is equal to:\nhttp://webcache.googleusercontent.com/search?q=cache:TKNFGczN7jQJ:techqa.info/programming/tag/pty%3Fafter%3D25167721+&cd=1&hl=de&ct=clnk&gl=de&client=firefox-b\nsearch for NET_SSH2_MSG_CHANNEL_EXTENDED_DATA\n.  I use latest master.zip from github. Tried with 1.0.8 with the same error.\nThank for the logging tip but I don't get any logs :( Just the same error:\nPHP Fatal error:  Uncaught RuntimeException: Unable to fulfill channel request in /opt/openpda/client/phpseclib/Net/SSH2.php:3675\nStack trace:\n0 /opt/openpda/client/phpseclib/Net/SFTP.php(452): phpseclib\\Net\\SSH2->get_channel_packet(256)\n1 /opt/openpda/client/test.php(34): phpseclib\\Net\\SFTP->login('D250_D035', Object(phpseclib\\Crypt\\RSA))\n2 {main}\nthrown in /opt/openpda/client/phpseclib/Net/SSH2.php on line 3675\n```\n!/usr/bin/php\n<?php\ndefine('NET_SSH2_LOGGING', 2);\nif (!include(DIR.'/config.inc.php')){\n    write_log('WARNING', \"error open config file: \".DIR.'/config.inc.php');\n    exit;\n}\n$host = $argv[1];\n$user = $argv[2];\ninclude('vendor/autoload.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR.'/phpseclib');\n$loader->register();\nuse \\phpseclib\\Crypt\\RSA;\nuse \\phpseclib\\Net\\SFTP;\n$sftp = new SFTP($host);\n$key = new RSA();\necho $sftp->getLog();\n$key->load(file_get_contents($_cfg['ssl_key']));\nif (!$sftp->login($user, $key)) {\n        echo $sftp->getLog();\n        write_log('ERR', \"Login Error to {$user}@{$host}:22\",LINE);\n        exit;\n}\necho $sftp->getLog();\nwrite_log('INFO', \"Login OK {$user}@{$host}:22\",LINE);\n$files = $sftp->rawlist();\n$count = count($files)-2;\nwrite_log('INFO',\"Found $count Files\",LINE);\n$sftp->disconnect();\nunset($sftp);\nexit;\n?>\n```\n. Tried again with 1.0.8\nPHP Notice:  Unable to fulfill channel request in /opt/openpda/client/Net/SSH2.php on line 3767\nPHP Notice:  Connection closed prematurely in /opt/openpda/client/Net/SSH2.php on line 3917\nnow I was able to get the trace\nlibsec.zip\n. Hi,\nI really appreciate you looking at this issue!\nThe server obviously does not follow the strict rules. I have two servers that misbehave like that. Both of them are ProFTPD. As I have no control over them I can not update or change their behavior. Unfortunately or fortunately for them standard sftp command from linux has no problem establishing connection.\nI will gather the logs and post them here. . Hi,\nare these logs enough?\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to XXX [XXX] port 22.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: identity file /opt/openpda/client/id_rsa type 1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /opt/openpda/client/id_rsa-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u3\ndebug1: Remote protocol version 2.0, remote software version mod_sftp/0.9.8\ndebug1: no match: mod_sftp/0.9.8\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:24\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-rsa\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-rsa,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,rsa1024-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: kex_parse_kexinit: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160\ndebug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160\ndebug2: kex_parse_kexinit: zlib@openssh.com,zlib,none\ndebug2: kex_parse_kexinit: zlib@openssh.com,zlib,none\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: server->client aes128-ctr hmac-sha1 none\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: client->server aes128-ctr hmac-sha1 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<7680<8192) sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: bits set: 3056/6144\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\ndebug1: Server host key: RSA db:1a:7d:57:58:50:34:5b:5d:6a:e7:02:10:a1:3d:fc\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:24\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:25\ndebug3: load_hostkeys: loaded 1 keys\ndebug1: Host 'XXX' is known and matches the RSA host key.\ndebug1: Found key in /root/.ssh/known_hosts:24\ndebug2: bits set: 3089/6144\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /opt/openpda/client/id_rsa (0x5632fe578150), explicit\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: /opt/openpda/client/id_rsa\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Server accepts key: pkalg ssh-rsa blen 279\ndebug2: input_userauth_pk_ok: fp 41:4d:e7:c6:5e:d8:05:a0:ea:a5:04:4b:2e:63:61:a1\ndebug3: sign_and_send_pubkey: RSA 41:4d:e7:c6:5e:d8:05:a0:ea:a5:04:4b:2e:63:61:a1\ndebug1: Authentication succeeded (publickey).\nAuthenticated to XXX ([XXX]:22).\ndebug2: fd 4 setting O_NONBLOCK\ndebug3: fd 5 is O_NONBLOCK\ndebug1: channel 0: new [client-session]\ndebug3: ssh_session2_open: channel_new: 0\ndebug2: channel 0: send open\ndebug1: Entering interactive session.\ndebug2: callback start\ndebug2: fd 3 setting TCP_NODELAY\ndebug3: packet_set_tos: set IP_TOS 0x08\ndebug2: client_session2_setup: id 0\ndebug1: Sending environment.\ndebug3: Ignored env XDG_SESSION_ID\ndebug3: Ignored env TERM\ndebug3: Ignored env SHELL\ndebug3: Ignored env SSH_CLIENT\ndebug3: Ignored env SSH_TTY\ndebug3: Ignored env USER\ndebug3: Ignored env LS_COLORS\ndebug3: Ignored env MC_TMPDIR\ndebug3: Ignored env MAIL\ndebug3: Ignored env PATH\ndebug3: Ignored env PWD\ndebug1: Sending env LANG = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug3: Ignored env HISTCONTROL\ndebug3: Ignored env SHLVL\ndebug3: Ignored env HOME\ndebug3: Ignored env LANGUAGE\ndebug3: Ignored env MC_SID\ndebug3: Ignored env LOGNAME\ndebug3: Ignored env SSH_CONNECTION\ndebug3: Ignored env XDG_RUNTIME_DIR\ndebug3: Ignored env OLDPWD\ndebug3: Ignored env _\ndebug1: Sending subsystem: sftp\ndebug2: channel 0: request subsystem confirm 1\ndebug2: callback done\ndebug2: channel 0: open confirm rwindow 268435456 rmax 32768\ndebug2: channel 0: rcvd ext data 35\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: subsystem request accepted on channel 0\nWillkommen auf dem Infport-Server\ndebug2: channel 0: written 35 to efd 6\nConnected to XXX.\n. thank you.. sure, no problem. take your time.. partially ;)\nI can now connect to one of the troubled server, but connection to the second one fails with:\nPHP Fatal error:  Uncaught Error: Call to undefined method phpseclib\\Net\\SFTP::_string_shift() in /usr/src/phpseclib-master/phpseclib/Net/SSH2.php:3644\nStack trace:\n0 /usr/src/phpseclib-master/phpseclib/Net/SFTP.php(452): phpseclib\\Net\\SSH2->get_channel_packet(256)\n1 /usr/src/phpseclib-master/pda_test_sftp1.php(55): phpseclib\\Net\\SFTP->login('XXX', Object(phpseclib\\Crypt\\RSA))\n2 {main}\nthrown in /usr/src/phpseclib-master/phpseclib/Net/SSH2.php on line 3644\n. I wanted to ask it anyway - what lib version should I use for long term stability - 1.0.8, 2x, master branch?. Now with the last troubled server and fixed lib (tried all versions) I don't get any debug info from getlog. I actually get nothing, script just hangs with no output at all.\nIt is the same script as in post 3\nhere is the output from the sftp connection:\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to XXX [XXX] port 22.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: identity file /opt/openpda/client/id_rsa type 1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /opt/openpda/client/id_rsa-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u3\ndebug1: Remote protocol version 2.0, remote software version mod_sftp/0.9.8\ndebug1: no match: mod_sftp/0.9.8\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:6\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-rsa\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-rsa,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,rsa1024-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: kex_parse_kexinit: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,blowfish-ctr,blowfish-cbc,cast128-cbc,arcfour256,arcfour128,3des-ctr,3des-cbc\ndebug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160\ndebug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96,hmac-ripemd160\ndebug2: kex_parse_kexinit: zlib@openssh.com,zlib,none\ndebug2: kex_parse_kexinit: zlib@openssh.com,zlib,none\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: server->client aes128-ctr hmac-sha1 none\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: client->server aes128-ctr hmac-sha1 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<7680<8192) sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: bits set: 3074/6144\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\ndebug1: Server host key: RSA b0:cd:45:68:87:c4:c8:5f:fe:4d:fd:20:c9:87:95:cd\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:6\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: load_hostkeys: loading entries for host \"XXX\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:7\ndebug3: load_hostkeys: loaded 1 keys\ndebug1: Host 'XXX' is known and matches the RSA host key.\ndebug1: Found key in /root/.ssh/known_hosts:6\ndebug2: bits set: 2986/6144\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /opt/openpda/client/id_rsa (0x55d0cf15cb90), explicit\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: /opt/openpda/client/id_rsa\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Server accepts key: pkalg ssh-rsa blen 279\ndebug2: input_userauth_pk_ok: fp 41:4d:e7:c6:5e:d8:05:a0:ea:a5:04:4b:2e:63:61:a1\ndebug3: sign_and_send_pubkey: RSA 41:4d:e7:c6:5e:d8:05:a0:ea:a5:04:4b:2e:63:61:a1\ndebug1: Authentication succeeded (publickey).\nAuthenticated to XXX ([XXX]:22).\ndebug2: fd 4 setting O_NONBLOCK\ndebug3: fd 5 is O_NONBLOCK\ndebug1: channel 0: new [client-session]\ndebug3: ssh_session2_open: channel_new: 0\ndebug2: channel 0: send open\ndebug1: Entering interactive session.\ndebug2: callback start\ndebug2: fd 3 setting TCP_NODELAY\ndebug3: packet_set_tos: set IP_TOS 0x08\ndebug2: client_session2_setup: id 0\ndebug1: Sending environment.\ndebug3: Ignored env XDG_SESSION_ID\ndebug3: Ignored env TERM\ndebug3: Ignored env SHELL\ndebug3: Ignored env SSH_CLIENT\ndebug3: Ignored env SSH_TTY\ndebug3: Ignored env USER\ndebug3: Ignored env MC_TMPDIR\ndebug3: Ignored env MAIL\ndebug3: Ignored env PATH\ndebug3: Ignored env PWD\ndebug1: Sending env LANG = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug3: Ignored env HISTCONTROL\ndebug3: Ignored env SHLVL\ndebug3: Ignored env HOME\ndebug3: Ignored env LANGUAGE\ndebug3: Ignored env MC_SID\ndebug3: Ignored env LOGNAME\ndebug3: Ignored env SSH_CONNECTION\ndebug3: Ignored env XDG_RUNTIME_DIR\ndebug3: Ignored env OLDPWD\ndebug3: Ignored env _\ndebug1: Sending subsystem: sftp\ndebug2: channel 0: request subsystem confirm 1\ndebug2: callback done\ndebug2: channel 0: open confirm rwindow 268435456 rmax 32768\ndebug2: channel 0: rcvd ext data 26\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: subsystem request accepted on channel 0\nWillkommen bei XXX\ndebug2: channel 0: written 26 to efd 6\nConnected to XXX.\nsftp>\n . >Is that output from the OpenSSH sftp CLI program?\nyes\nAdded real time output without success. This is the only output I get from the script with lib version 1:\nPHP Notice:  Constant NET_SFTP_LOG_REALTIME already defined in /usr/src/phpseclib-1.0/phpseclib/Net/SFTP.php on line 78\nVersion 2 and master give the same silence.. ok, my bad. Here is the trace\ntrace.zip\n. ",
    "hanspagel": "Nice, this works!\n. ",
    "auro1": "Wow. That's awesomely fast! Looking forward to seeing it merged :+1: \n. I've got a pull request and a repo branch for working with this. Anyone who wants to lend a hand, I'll give you write access\nhttps://github.com/phpseclib/phpseclib/pull/872\nhttps://github.com/MunkSoftware/phpseclib\n. ",
    "ygor-sk": "I ran phan on my vendor directory and got following:\n\n/home/ygor/abc/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:2532 PhanCompatiblePHP7 Expression may not be PHP 7 compatible\n\nI am using:\n\"name\": \"phpseclib/phpseclib\",\n            \"version\": \"2.0.x-dev\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpseclib/phpseclib.git\",\n                \"reference\": \"97c8d9eff3d82bb2ebf334457599c94c758ab483\"\n            }\n. Thanks @terrafrost for your analysis.\nWe are migrating our project to PHP7 and I ran PHAN once on all sources, including 3rd party vendor libraries. I just wanted to confirm, that we are PHP7 ready. After we go live with PHP7, it won't make sense to check for PHP7 backwards compatibility anymore.\nI can confirm, that SFTP works correctly on PHP7 in all our usecases.\n. ",
    "kalessil": "No problems with that: project is widely used so I'll be glad to give explanations:\nMicro-optimizations and simplifications:\nalias functions usage: bad practice, they will be dropped one day\nis_null: native null comparison is faster\nmerging un-sets: reducing amount of commands executed\nDIR constant: get rid of useless function call\narray_search replacements: simplification and micro-optimization\nintval replacement - native type-casting instead of legacy API\nshorthand operators (-= and etc): micro-optimization\nelvis operator usage I guess not needed to be explained\nnaming changes - code style cleanup as names were in wrong case\nFixes:\nampersands - fixing memory mismatches\nconstructors must not return any values\nuniqid with lack of parameters is well-known pitfall\nIn general similar changes were already accepted into Symfony2 including LTS versions. \nBut still good and critical look needed.\n. In case if someone want to evaluate the tool reported this: https://plugins.jetbrains.com/plugin/7622?pr=\nAvailable as PhpStorm plugin and works as on-the fly inspections (or on-demand inspecting as well).\n. @bantu : know this looks scary, so looking forward for providing all details needed.\n. @bantu : you also from KA?\n. Such a small world =) Maybe it will be a good idea to exchange contacts =)\n. Splitting this PR:\n- first part targeting 1.0 is here #753\n- second part best to introduced when 1.0->master (or 2.0?)\n. Closing, will reopen as deal with workload\n. @bantu : merging my FB into local 2.0 went with conflicts, shall I revert conflicted files?\n. Adjusted.\n. @bantu : yes, will do this tomorrow evening.\n. Closing, will reopen as deal with workload\n. Merging conflict 1.0 -> 2.0 are resolved here + SCA for 2.0 only.\n. @bantu :\n\nWhy did we not have those changes in 1.0 also?\nRisky, in spite of UTs I'm not sure in coverage of code base in 1.0\nSuboptimal for review:\nThere is a sense to split, I'll try to not delay this much\n. @terrafrost : I'll check UTs for phpseclib/File/X509.php first\n\nThe only I can try UTing is that the configuration containers are not changed inside modified methods (tricky dy to N-path complexity)\n. Closing, will reopen as deal with workload\n. Yes, http://stackoverflow.com/a/6849691/1879087 + as I recall this can be a problem in PHP 7 (plugins community hints)\n. $more_entropy, similar to using mt_* random api - more reliable.\n. I'll need to re-check that version - have no clue at the moment if it was due to any re-factorings.\n. @GrahamCampbell : this will be next fixer for CS Fixer when I finish with open PRs =)\n. I'll revert to keep the code style solid.\n. We can try targeting 1.0 for this PR - hopefully it will be no conflicts.\n. There is PR open for PHP-CS-Fixer, I used custom assembly with my fixers - most of fixes done automatically.\n. This is tricky: check this link for general background http://jpauli.github.io/2014/06/27/references-mismatch.html\n. It matters when index used later, semantically both variants check if value presented (both perform type-unsafe search).\nNano-optimization is that index not stored and dispatched across stack.\nBenefit is easily readable now.\n. I checked, this PR can be merged into 1.0, so I'll just change target branch when review finished.\n. Ok, I'll need to split this PR - I'll check what of changes is PHP4-compatible. \n. ",
    "paydofor": "Yes, unpack() is vulnerable to timing attacks, but then again, the proposed alternative is as well. Even more so in fact.\nTest file:\n``` php\n<?php\n$bytes = 4;\n$randomByteString = 'abcd';\n$val = 0;\nfor ($i = 0; $i < $bytes; ++$i) {\n    $val |= ord($randomByteString[$i]) << ($i * 8);\n}\necho $val;\n```\nHere's what that looks like when passed through PHP's Vulcan Logic Disassembler:\n```\nFinding entry points\nBranch analysis from position: 0\nJump found. Position 1 = 15, Position 2 = 8\nBranch analysis from position: 15\nReturn found\nBranch analysis from position: 8\nJump found. Position 1 = 6\nBranch analysis from position: 6\nJump found. Position 1 = 4\nBranch analysis from position: 4\nfilename:       C:\\path\\to\\test.php\nfunction name:  (null)\nnumber of ops:  17\ncompiled vars:  !0 = $bytes, !1 = $randomByteString, !2 = $val, !3 = $i\nline     # *  op                           fetch          ext  return  operands\n\n-\n   2     0  >   ASSIGN                                                   !0, 4\n   3     1      ASSIGN                                                   !1, 'abcd'\n   5     2      ASSIGN                                                   !2, 0\n   6     3      ASSIGN                                                   !3, 0\n         4  >   IS_SMALLER                                       ~4      !3, !0\n         5    > JMPZNZ                                        8          ~4, ->1\n5\n         6  >   PRE_INC                                                  !3\n         7    > JMP                                                      ->4\n   7     8  >   FETCH_DIM_R                                      $6      !1, !3\n         9      SEND_VAR                                                 $6\n        10      DO_FCALL                                      1  $7      'ord'\n        11      MUL                                              ~8      !3, 8\n        12      SL                                               ~9      $7, ~8\n        13      ASSIGN_BW_OR                                  0          !2, ~9\n   8    14    > JMP                                                      ->6\n  10    15  >   ECHO                                                     !2\n        16    > RETURN                                                   1\nbranch: #  0; line:     2-    6; sop:     0; eop:     3; out1:   4\nbranch: #  4; line:     6-    6; sop:     4; eop:     5; out1:  15; out2:   8\nbranch: #  6; line:     6-    6; sop:     6; eop:     7; out1:   4\nbranch: #  8; line:     7-    8; sop:     8; eop:    14; out1:   6\nbranch: # 15; line:    10-   10; sop:    15; eop:    16\npath #1: 0, 4, 15,\npath #2: 0, 4, 8, 6, 4, 15,\n```\nContrast that with unpack:\n``` php\n<?php\n$randomByteString = 'abcd';\nextract(unpack('Nval', $randomByteString));\necho $val;\n```\nThe output:\n```\nFinding entry points\nBranch analysis from position: 0\nReturn found\nfilename:       C:\\path\\to\\test.php\nfunction name:  (null)\nnumber of ops:  8\ncompiled vars:  !0 = $randomByteString, !1 = $val\nline     # *  op                           fetch          ext  return  operands\n\n-\n   2     0  >   ASSIGN                                                   !0, 'abcd'\n   4     1      SEND_VAL                                                 'Nval'\n         2      SEND_VAR                                                 !0\n         3      DO_FCALL                                      2  $1      'unpack'\n         4      SEND_VAR_NO_REF                               F          $1\n         5      DO_FCALL                                      1          'extract'\n   6     6      ECHO                                                     !1\n         7    > RETURN                                                   1\nbranch: #  0; line:     2-    6; sop:     0; eop:     7\npath #1: 0,\n```\nThe more opcodes that are run the more of an opportunity something has to get out of the L1/L2 cache and note how your code 5 branches in the vld analysis whereas unpack has none. Plus, with PHP, you have zval's. The string is a zval. When you try to get at a specific element you get a zval. When you do ord() you get a zval. And zval's are pretty bloated. The following URL elaborates:\nhttps://nikic.github.io/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html\nThe larger the data the greater the chance that it'll be swapped out of the L1/L2 cache to clear the way for other stuff.\nBasically, since the table indexing timing vulnerability you're trying to address relies in L1/L2 cache misses to work implementing a solution that's going to result in even more L1/L2 cache misses isn't much of a solution at all.\nRemediating this particular variety of timing attacks in PHP is not really possible. If you want code that provides better remediation don't use PHP.\nYour \"Cache-timing-safe bin2hex-encoding\" is \"taken from libsodium\". libsodium is a C  library. You're porting that to PHP. When you're talking about cache-based timing attacks what works in C isn't necessarily going to work in PHP.\n. Also, see Why do crypto libs use table lookups when they're vulnerable to timing attacks?. Quoting it,\n\nThe countermeasures needed as you go down the stack become increasingly expensive; it sounds reasonable that an implementation will say \"we'll go down this far and no farther\"\n. \n",
    "defuse": "I posted this comment https://github.com/defuse/php-encryption/pull/180#issuecomment-204810225 in one of my repositories which is relevant to this discussion. In particular I claim that the analysis in https://github.com/phpseclib/phpseclib/issues/761#issuecomment-127269694 is wrong. ord() is safe, chr() is unsafe, pack() and unpack() are safe when used with \"C\".\n. ",
    "gdelvalle": "I'd also like to add that I downloaded everything in the pear channel in hopes the file was in 1 of the listed packages\n. Okay,  I'll keep an eye out.  Appreciate it.\n. thanks!\n. ",
    "arcaderob": "Hello @terrafrost Do you think that you will be able to have a look at this today? \n. ",
    "dol": "Sorry, NOID stands for named OID or ASN.1 notation. It's the translation of OID to it's notation name. This name is IMHO not defined in any RFC.\nIn the phpsec X509 a mapping is performed from a OID to it's name.\nThis is a pseudo code to illustrate the problem:\n``` php\n<?php\ninclude('File/X509.php');\n$x509 = new File_X509();\n$cert = $x509->loadX509('...');\n$algo = $cert['signatureAlgorithm']['algorithm'];\n// If the OID was found in the mapping a string is returned. The original OID information will be overwritten.\n// '1.2.840.113549.1.1.5'  => 'sha1WithRSAEncryption'\n// '1.2.840.10045.4.3.3' => stays '1.2.840.10045.4.3.3'\nswitch ($algo) {\n    case 'sha1WithRSAEncryption':\n        echo 'SHA1 with RSA';\n        break;\n    // This will be replaced with 'sha384WithECDSAEncryption'\n    case '1.2.840.10045.4.3.3':\n        echo 'SHA384 with ECDSA';\n        break;\n}\n// This code will break, it phpseclib later adds a mapping for '1.2.840.10045.4.3.3'.\n// In the future there will always be OID that don't have a corresponding label/notation.\n// And people have old version of phpseclib\n```\n. Additional note:\nThe PHP core (since 5.5.24, 5.6.7) returns 3 values for the signature algorithm when using openssl_x509_parse:\n- signatureTypeSN -> openssl short name\n- signatureTypeLN -> openssl long name\n- signatureTypeNID -> OID\nCorresponding bug report: https://bugs.php.net/bug.php?id=67403\n. I would perform the following steps:\n1. Add $x509->setOIDMode(); to 1.0 and 2.0 minor version\n2. Introduce BC break in v3.0\nAn other idea is to move x509 to it's own library for handling certificates. But this needs a lot of work to split phpseclib into smaller components. A possible proposal would look like this:\n- Repository of phpseclib\\File\\ASN1\n- Repository that extracts informations from ASN1 objects\n  - Read RSA/EC/DSA private/public in the format of PKCS#1/5/8\n  - Read X.509 ceritificate, CRL and CSR(PKCS#10)\n- Repository of Crypto implementations\n  - phpseclib\\Crypt part -> reads key informations from ASN.1 parsing\n  - phpseclib\\Net part\nThis would solve IMHO some problems that I see. First of all it's nice to have a solid pure PHP implementation of cryptographic primitives. Due to the lack of a proper ECDSA support of the openssl extension in PHP I used the ASN.1 parser. To stop reinvent the wheel it would be nice if other people could profit from this work.\n. Ok. Thanks. Is it possible to patch also apply this fix also to the 1.0 version.\n. @bantu Sorry. My bad.\n. ",
    "torinaki": "So the case is following. I'm trying to run composer install on remote host that takes a while. exec method return only part of output and interrupts command execution on the middle of progress because of timeout and sets is_timeout to true. Reasonable question is why? Take into account that command always retuning some output.\nAfter investigation I have found that any exec method execution should not be long that 10 seconds by default. I see few weird moments:\n1. Why 10 seconds is enough for any command?\n2. Why do we need limit max command execution time and how we ever know what is best max execution time for any command(for example for KDE compilation)? If someone need such functionality it can be achieved using callback. \n3. Timeout in most cases describes a time period during what some process do not response that helps us to understand that process hung.\n4. I can be wrong, but we can't disable timeout at all. If we set false or 0 command execution will be interrupted right after start. \nPlease point where I'm wrong and what/how I should use to solve my problem. Thanks in advance\n. @terrafrost thanks out for quick response. I have created this ticket because setTimeout can't be disabled like you have mentioned in your comment before https://github.com/phpseclib/phpseclib/pull/774#issuecomment-131305234.\nI was investigated this problem and have tried to solve it by my self and that why I was created PR #776. \nDuring investigation I have found why setTimeout(0) do not work, because 0 passes into fsockopen(as you can see in PHP doc http://php.net/manual/en/function.fsockopen.php there nothing say about that fsockopen timeout can't be disabled by this way).\nBut there is a question: why curTimeout passes into fsockopen? If I understand correctly, these two timeouts have different meanings:\n1. setTimeout sets command execution time period(in case of exec method, according to documentation http://phpseclib.sourceforge.net/ssh/examples.html#timeout)\n2. fsockopen timeout is socket connection timeout(there are also reading/writing data over the socket that can be set using stream_set_timeout)\nEven more I have found that before setTimeout was used for setting exactly socket connection timeout that means in some version was introduced BC break. Please see following commit:\nhttps://github.com/phpseclib/phpseclib/commit/23c65c383945cfc9c2293f45a7cbc6f1a68178ec\nFrom my point of view to solve this problem we should divide timeouts into at least two timeouts:\n1. Command execution timeout;\n2. Connection timeout;\n3. And new extra timeout that can be implemented using stream_set_timeout\n. @everettgreen to some how fix this issue for I suggest to set very big timeout. It depends on job max execution time.\n. @terrafrost please take a look on my comment:\nhttps://github.com/phpseclib/phpseclib/commit/7cb66ea56efd02bcf82c5933c84071a37121dcd5#commitcomment-19956454. Here currently only small refactoring of timeout functionality to investigate #775 \n. @terrafrost yeah I know possibility to run tests on my own branch. I have prepared this PR just for refactoring purpose. As I said didn't changed anything in this PR, because just done small refactoring. Currently SSH2 class methods has very high complexity and it's too hard to read/understand code.\n. @terrafrost for example these two PRs #767 #753 changes by @kalessil was prepared based on above mentioned tools reports(i'm almost sure, because same issues you can find in reports).\nAbout var_export it definitely not good approach. Because you finally will catch error like \"Cannot modify header information - headers already sent by...\" and for example session will not be started. Also question how to log something into file without output buffering? Better to use user callback.\nUse globals not best approach, but why you needed it if your are using OOP. I'm sure that there may be more elegant solution. Also it will affect JIT compilation in HHVM for example.\nAbout 'Random.php' I can say only that there are a possibility that it may conflict with already started session. About cryptography in that case the best idea is to warn developer that it use not safe method with some warning\n. > I'll bet you $25.00 PayPal that you can't rewrite Net/SFTP/Stream.php to make that work without global's. If you do give me your email address and I'll PayPal you the money. If you don't then why don't you make a $25.00 donation to this project?\n:smiley: Interesting offer. I'm ready to accept this challenge. But before that can you please calrify few moments:\n1. I should make possible without global to make work the following line of code: $connection_string = \"ssh2.sftp://$session/\";? If so what value should contain $connection_string variable?\n2. Preferably that this line should work with double quotes (\") not with single quotes ('): $arr = scandir('sftp://$sftp/home/username/public_html');, right?\n. @terrafrost I have prepared solution. Currently I'm still in progress with tests, but you already can test it, I guess it should be fine.\n. @terrafrost I have finished. Please check PR #787\n. @cweagans it's not about to achieve some rating. It is only about to automate PR reviews according to things that ma be catched by static analyser and monitor project/class/method maintainability. There are many researches that was done before that may argue why it's important. \nYes, you may achieve same result without any tool, but human factor always persists.\n. rebased\n. @bantu yes. It was completely removed \n. @terrafrost please invest these money into project. I renounce the prize. Thanks you for your honesty. \n. @bantu branch was rebased. Please check fixes according your comments\n. {} symbols that should not be in URL according to RFC. Same symbols Symfony2 use for place holders in URL routes. So it should safe us from any conflicts, because otherwise regexp will match all alphanumeric domains.\n. fixed\n. description added\n. ",
    "everettgreen": "I'm running into the same issue. The doc for setTimeout states:\n\n$ssh->exec('ping 127.0.0.1'); on a Linux host will never return and will run indefinitely.  setTimeout() makes it so it'll timeout.\nSetting $timeout to false or 0 will mean there is no timeout.\n\nI'd like to be able to set the timeout to false or 0, but only for my executions. Setting timeout to 0 in the constructor results in the fsockopen timeout being set to 0, which makes connections fail. Further, since execution time is subtracted from curTimeout, a value of 0 results in executions timing out immediately. It's possible to setTimeout to a high value after making the connection, but in my case another package has abstracted the connection and subsequent execution of my commands.\nPrior to a recent upgrade to phpseclib 2.0, my application was able to perform long-running tasks on remote servers and capture all output, even without specifying a timeout. Since upgrading, the connection times out after 10s and execution is halted. I believe this regression was introduced in PR #639 .\n. ",
    "dmyers": "I upgraded from 0.3.x to 2.0 recently and the timeout issue just started happening with the exact use case @everettgreen described. It seems the ability to disable the timeout was available in the previous version. For now I've simply set a large integer as my timeout, but would prefer to have the previous option brought back if possible.\n. ",
    "cweagans": "@terrafrost Okay, so the todo list here as I see it is this, if I'm not mistaken:\n- For the master branch PR:\n  - Remove the version_compare() call in phpseclib/Crypt/RSA.php\n- Submit PR for 2.0:\n  - Remove the version_compare() as noted above.\n  - Basically identical to the master pr\n- Submit PR for 1.0\n  - @terrafrost is this a prerequisite for landing the PR in master & 2.0 ? I don't have much interest in 1.0, but it's a requirement to get this change into 2.x, I'll do it.\n. Also, I think the function_exists() call in phpseclib/Math/BigInteger.php can be replaced with extension_loaded('gmp') in master and 2.0 if we know for sure that the PHP version is >= 5.3.0\n. @terrafrost Personally, I wouldn't be too torn up about abandoning 1.0. The target for that branch is a version of PHP that's no longer supported. Not supporting the branch won't make all the existing code stop working, but hopefully it will push people to upgrade their setups. In any case, I've submitted #790 (PR for 2.0) and #791 (PR for 1.0) so that this is unblocked, as well as a couple of extra commits here that resolve some other issues noted above. Please let me know if you need anything else to get this in.\n. @terrafrost @bantu Any update on this, #790, and #791?\n. Right :)\n. Note that if false negatives are a concern, you can whitelist certain errors through the scrutinizer UI. I don't think that's really necessary, though, as many other projects achieve 9.0 - 10.0 ratings from scrutinizer without doing weird things to game the system.\n. No, I know. I'm just saying that the rating that Scrutinizer does provide is generally a pretty good measure of overall code quality. Of course automating PR reviews is the goal, but having a metric to let us know that the project is getting better over time is useful too.\n. This basically amounts to abandoning the 1.0 branch + removing all the version checks for old PHP versions + adding a PHP version constraint in composer.json.\n+1 for dropping 5.4 support in master (might as well leave it for 2.0, though - nothing technically requires it)\n. @terrafrost I guess it depends on what you mean by \"drop support for PHP 5.3\". I assume that means PHP 5.3 and below, which means that 1.0 would still run, but why wouldn't you just use 2.0 in that case? If PHP 5.3 is the minimum version, there's no reason to continue supporting 1.0.\nThat said, you may be interested in the PHP version stats that Wordpress collects: https://wordpress.org/about/stats/ According to that (and if you assume that the PHP versions collected by Wordpress are a good representation of all PHP deployments), PHP 5.2 & PHP 5.3 make up 44% of PHP installations. That's not very good.\nI'd still support dropping support for PHP 5.3 and below, and taking that a step further, just following the support timelines for PHP versions: http://php.net/supported-versions.php  It doesn't make any sense to maintain a security library on top of an old, unpatched, likely insecure PHP installation.\n. I don't think a decision to drop support for an unsupported runtime is premature at any time, and there's a lot of nice refactoring that can happen if you can assume a recent version of PHP. I don't think it's unreasonable to make that assumption, and many widely used frameworks and components are making that same assumption and pushing the PHP world forward. \n. #794 is against a different branch.\n. Ah, I see. :+1: \n. I guess build/code-sniffer-ruleset.xml already sort of uses PSR-2? Maybe? There's a lot of exceptions though. Would it be worthwhile to fully adopt the standard?\n. openssl is prioritized last in random-compat for a reason - see last paragraph of https://github.com/paragonie/random_compat/blob/master/ERRATA.md.\nIf somebody is running a PHP app on a Windows server with a (very) old version of PHP installed and nothing else other than openssl, it will still use random_bytes() backed by the com_dotnet extension first, which is enabled by default on PHP > 5.3.15.\n. Note also that if the PHP 5.4 requirement lands, the openssl version check becomes even less of an issue.\n. Fixed.\n. Done.\n. random-compat has an error polyfill: https://github.com/paragonie/random_compat/blob/master/lib/error_polyfill.php\n. The exceptions that the random-compat lib throws definitely implement Throwable (also in the error polyfill). In 7.0, all exceptions implement throwable.\n. Fair enough. There's definitely a 0% chance.\n. So. Turns out I was wrong. https://github.com/paragonie/random_compat/pull/47\nWe'd need to catch both \\Throwable and \\Exception in this block.\n. ",
    "irvifa": "i see, my bad, thanks in advance\n. ",
    "zolex": "file permissions reverted\n. added\n. hm?\n. removed\n. ",
    "stof": "well, then it should not be the link in the master branch. the readme of the master branch should point to its own documentation.\nand on a side note, having a changelog for 2.0 would be good\n. Well, 2.0 is tagged, and it does not have documentation or changelog either (a roadmap is not the same than a changelog for existing release)\n. ",
    "mAAdhaTTah": "FWIW, composer require phpseclib/phpseclib pulls in version ^2.0 at this point, so if you're working with it that way, you're getting 2.0. The documentation hasn't been an issue just yet, but maybe a data point worth considering.\n. Should we be treating 2.0 as more of a beta/incomplete? Or is that a stable version? If it's stable and wanted to contribute to the docs, where should we pull against?\n. ",
    "philBrown": "Please just remove the link. The 2.0.x tagged versions still point to the SourceForge docs. ",
    "andreybolonin": "Fixed\nsh\n@ob_flush()\nWhat about https://github.com/FriendsOfPHP/PHP-CS-Fixer code style fixes ?\n. All is ok?\n. ",
    "cosmoteco": "Hello!\nThe key is generated with puttygen.\nThe public one\n---- BEGIN SSH2 PUBLIC KEY ----\nComment: \"rsa-key-20151009\"\nAAAAB3NzaC1yc2EAAAABJQAAAQEAt85f5iuaBdoHLN0urQDyVhE3icE3jXllDg1f\nz9dv78jajWuKz7XAv1p1pvGSrP1k0btW31Oe4WK4vdejJ0cp1B09bl0ZclO2YBK4\nG1d9iJpnYZXZxBhIcP28dhhKouIJ7WqtHhK3zQDt6cV7X2aQVzkwbNanMZv17WBu\nFO/Skg0dJ0lEYuR0KWcAcSrGO3rXmHpr5ntYGVlZmSM+0Ph1NdRVqREUFb48kTD2\n2EWX0H1Ng0N8e+MZcRrQs4lvnuW+q3dN2ftHTa2ctzelyYjelRhOe8p7QtzgqRg4\n5tadOLSQRdd1TAwAVodeYxx0q3kQeyhj8jAUYnMJIVeXKvdjMQ==\n---- END SSH2 PUBLIC KEY ----\nThe private one:\nPuTTY-User-Key-File-2: ssh-rsa\nEncryption: none\nComment: rsa-key-20151009\nPublic-Lines: 6\nAAAAB3NzaC1yc2EAAAABJQAAAQEAt85f5iuaBdoHLN0urQDyVhE3icE3jXllDg1f\nz9dv78jajWuKz7XAv1p1pvGSrP1k0btW31Oe4WK4vdejJ0cp1B09bl0ZclO2YBK4\nG1d9iJpnYZXZxBhIcP28dhhKouIJ7WqtHhK3zQDt6cV7X2aQVzkwbNanMZv17WBu\nFO/Skg0dJ0lEYuR0KWcAcSrGO3rXmHpr5ntYGVlZmSM+0Ph1NdRVqREUFb48kTD2\n2EWX0H1Ng0N8e+MZcRrQs4lvnuW+q3dN2ftHTa2ctzelyYjelRhOe8p7QtzgqRg4\n5tadOLSQRdd1TAwAVodeYxx0q3kQeyhj8jAUYnMJIVeXKvdjMQ==\nPrivate-Lines: 14\nAAABAQCe96zivez+JFk7jtxCmQjwfZfRFc8uP3n+UMGRKQbdOBb22YzPURVnOXqC\ni70f/b76lC91CgzempHwS8tgPYv1uGx7IBYCAzXyObP7+KPrw88ISj/MMK1azZwT\nG+2F8+zpAlCItj4ZFY9+EpQ21T6QoCnhlw0j/IGqtEOHuqhG9RmYiMnLUMj5l7Ch\nwi3XSsqh1JaAUlcCnaSDAnlYW26i8hpDpUFGlJNkR9RqnZWWP7jfsm0RypveESMz\nUcwif9XohzN7im9xwZNOkJeke56UB75NjPbNiP5WbNW1jFZ+o8cieYbIuJgDco4R\nr83bmWUg5uv2s2IUo0lBKcMjMs4tAAAAgQD/HPl0RSriN0WBMJL/I288Y2b0Kp09\noyyL6qcWVZ6CIFazNoDZEvw7WHn2/NVnIPlVUdvq4IKdArm6M/ZGakJxckgNnvZb\nrIq1XXpAsqKFMSYPn99PmOfcHppknKecNt+3zWoNR+jczH9QeTDzXg4JnfNr8A27\no030rVFWElhuTwAAAIEAuHHxpsqkKZGKGwWPQhcdIOn1qbd+5dsmh3cBTC0wOykV\ntBRZJ4kmNszD8kAp+7nKSm7BQ37OODWdRcw8lSy/feRS7LQs2sWbFQbmNcC3agjJ\nStJALkxOnnaP/TBEvP9nejiQ5CwNs8YLmaV4O0eBqe8p9yzi71dIR8Ct93fsNn8A\nAACAMr94e927rki3CMxasu9hTfOjycABBfv924xkTirdDQKpAw7n4iYVWU/I2/Te\nLsT6obw62lmsfKvKmnOn8QhS8ym+sf+hTsUSWf5yFWVY4Hrg9RhECbJu858sheaa\nNq8LRrzeKNdBs4h4K1MbUl6cc1uXE8IQZnLOzlhp4HE7fqM=\nPrivate-MAC: f20973478521bf800cffab32f23abd78517113a8\nThank you!\n. I get \"Invalid HMAC\" at $ssh->login($username, $key)\nThe piece of code is:\n$ssh = new Net\\SSH2($host, $port, $timeout);\n$key = new Crypt\\RSA();\n$sftp = new  Net\\SFTP($host, $port, $timeout);\n$key->load(file_get_contents('/path/to/private_key'));\nif (!$ssh->login('username', $key)) {\n       exit('Login Failed');\n} else {\n       die('Success');\n}\nRegarding the logs, I get empty $message_log and $message_number_log.\nI have to mention that i load the library through composer, like this:\n\"require\" : {\n       \"phpseclib/phpseclib\":\"dev-master\"\n},\n\"repositories\": [\n      {\n            \"type\": \"vcs\",\n            \"url\": \"git@github.com:phpseclib/phpseclib.git\"\n        }\n]\nThank you!\n. Yes, i had an sftp because i forgot to delete it. \nIt wasn't used anyway.\nI've changed the git version to v1.0.0 and get the same error.\nI've attached an file with the logs.\nThank you! \n. It didn't work.\nI don't find the credentials relevant for the moment, since i don't get login failure.\nSo from my understanding the problem is not the key but something else?\n. I see!\nOk.\nIt's a good ideea to use an key pair other than ppk, about which i've found that may raise issues?\nThank you!\n. Hello again!\nI've done some debugging and got the server identifier which is SSH-2.0-xlightftpd_release_3.8.3.6, so it's an windows server.The algorithm that it uses is sha1, which is the result of the first intersection you do.\nI've made some tests with the same key on another sftp server and worked, but for this server i always get InvalidHMAC.It's this an known issue?\nThank you!\nFrom: terrafrost <notifications@github.com>\nTo: phpseclib/phpseclib phpseclib@noreply.github.com \nCc: cosmoteco nimcos5_c@yahoo.com \n Sent: Tuesday, October 13, 2015 4:07 PM\n Subject: Re: [phpseclib] Invalid HMAC with ppk key (#840)\nI don't find the credentials relevant for the moment, since i don't get login failure.\nThat's correct. The credentials are not relevant. That's why all I asked for was the domain name / IP address / port. Quoting my post \"I wouldn't need a login\". You can email that to terrafrost@php.net .\nSo from my understanding the problem is not the key but something else?\nCorrect. As I said, my best guess is that it's not liking one of the algorithms that phpseclib is using. Like the server is saying it supports the algorithm but in truth it's implementation of this hypothetical algorithm is bad. So it's not able to decrypt what phpseclib is sending it (because they're essentially using different algorithms even tho the server is saying it supports the algorithm phpseclib is using) and it's then closing the connection.\u2014\nReply to this email directly or view it on GitHub.\n. I've replaced the putty key pair with .pub pair.\nThe same result \"Invalid HMAC\".\nAs you sad there might be an issue with the alghoritm used.\ni see that you choose the first alghoritm from the intersection of those you support and the server does.\nI suspect that they provide an list  on which the items ordering it's not relevant. Maybe they don't use the first alghoritm in the intersection list, as phpseclib decides to use so that's why \"Invalid HMAC\"\nIn my case the sha1 alg. was choosed.\nIt's also interesting to know what was your reason for choosing the first element of the algs intersection? This might confirm my suspicion.\n. ",
    "CH25": "I was having the same issue using a Putty private key to download files via SFTP, what worked for me was to comment out 4 lines in the SSH2.php file in the phpseclib/Net directory.\n 'arcfour256',\n 'arcfour128',\n 'aes128-cbc',\n 'aes256-cbc',\nThese four lines need to be commented out, they can be found in the _key_exchange function, starting at line 1183. Also the final post here also had to take similar steps: http://stackoverflow.com/questions/33333793/phpseclib-invalid-hmac-on-windows-works-on-lamp-mamp\nBut for you it may also take commenting out arcfour256, and arcfour128.\n. ",
    "mnapoli": "Please see #912 It is based on your comment:\n\nThe 2.0 API is basically the 1.0 API namespaced. Also, it requires an autoloader. Those are about the only changes.\n. Good call I've updated the file.\n. :+1: \n. \n",
    "omnomnymous": "I'm having the very same issue. \nCode: \n\n    set_include_path(__DIR__ . '/phpseclib/');\n    include('SSH2.php');\n    include 'Crypt/RSA.php';\n    define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX);\n    $rsa = new Crypt_RSA();\n    $rsa->loadKey($server['key']);\n    $ssh = new Net_SSH2($server['ip'],$server['port']);\n    $ssh->setTimeout(10);\n    if (!$ssh->login($server['login'], $rsa)) {\n      echo $ssh->getLog();\n      die('Login Failed');\n    }\n    echo $ssh->exec('pwd');\n\nLog:\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  35:2e:33:0d:0a                                   5.3..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:20:28:6f:70:65:6e:73:73:6c:29:0d  b_1.0 (openssl).\n00000020  0a                                               .\n<- NET_SSH2_MSG_KEXINIT (since last: 4.0181, network: 1.6416s)\n00000000  14:77:3d:04:a4:b0:b6:58:4e:32:80:02:4d:87:f6:9d  .w=....XN2..M...\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:32:35:36:2c:64:69:66:66:69:65:2d  e-sha256,diffie-\n00000040  68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d:65:78  hellman-group-ex\n00000050  63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69:66:66  change-sha1,diff\n00000060  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000070  31:34:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68  14-sha1,diffie-h\n00000080  65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68  ellman-group1-sh\n00000090  61:31:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  a1....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:9d:61:65:73:31:32:38:2d  h-dss....aes128-\n000000b0  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n000000c0  65:73:32:35:36:2d:63:74:72:2c:61:72:63:66:6f:75  es256-ctr,arcfou\n000000d0  72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c  r256,arcfour128,\n000000e0  61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73:2d  aes128-cbc,3des-\n000000f0  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  cbc,blowfish-cbc\n00000100  2c:63:61:73:74:31:32:38:2d:63:62:63:2c:61:65:73  ,cast128-cbc,aes\n00000110  31:39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63  192-cbc,aes256-c\n00000120  62:63:2c:61:72:63:66:6f:75:72:2c:72:69:6a:6e:64  bc,arcfour,rijnd\n00000130  61:65:6c:2d:63:62:63:40:6c:79:73:61:74:6f:72:2e  ael-cbc@lysator.\n00000140  6c:69:75:2e:73:65:00:00:00:9d:61:65:73:31:32:38  liu.se....aes128\n00000150  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n00000160  61:65:73:32:35:36:2d:63:74:72:2c:61:72:63:66:6f  aes256-ctr,arcfo\n00000170  75:72:32:35:36:2c:61:72:63:66:6f:75:72:31:32:38  ur256,arcfour128\n00000180  2c:61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73  ,aes128-cbc,3des\n00000190  2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:62  -cbc,blowfish-cb\n000001a0  63:2c:63:61:73:74:31:32:38:2d:63:62:63:2c:61:65  c,cast128-cbc,ae\n000001b0  73:31:39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d  s192-cbc,aes256-\n000001c0  63:62:63:2c:61:72:63:66:6f:75:72:2c:72:69:6a:6e  cbc,arcfour,rijn\n000001d0  64:61:65:6c:2d:63:62:63:40:6c:79:73:61:74:6f:72  dael-cbc@lysator\n000001e0  2e:6c:69:75:2e:73:65:00:00:00:85:68:6d:61:63:2d  .liu.se....hmac-\n000001f0  6d:64:35:2c:68:6d:61:63:2d:73:68:61:31:2c:75:6d  md5,hmac-sha1,um\n00000200  61:63:2d:36:34:40:6f:70:65:6e:73:73:68:2e:63:6f  ac-64@openssh.co\n00000210  6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c  m,hmac-sha2-256,\n00000220  68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68:6d  hmac-sha2-512,hm\n00000230  61:63:2d:72:69:70:65:6d:64:31:36:30:2c:68:6d:61  ac-ripemd160,hma\n00000240  63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70:65:6e  c-ripemd160@open\n00000250  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61  ssh.com,hmac-sha\n00000260  31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  1-96,hmac-md5-96\n00000270  00:00:00:85:68:6d:61:63:2d:6d:64:35:2c:68:6d:61  ....hmac-md5,hma\n00000280  63:2d:73:68:61:31:2c:75:6d:61:63:2d:36:34:40:6f  c-sha1,umac-64@o\n00000290  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n000002a0  73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68  sha2-256,hmac-sh\n000002b0  61:32:2d:35:31:32:2c:68:6d:61:63:2d:72:69:70:65  a2-512,hmac-ripe\n000002c0  6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70:65:6d  md160,hmac-ripem\n000002d0  64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  d160@openssh.com\n000002e0  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002f0  61:63:2d:6d:64:35:2d:39:36:00:00:00:15:6e:6f:6e  ac-md5-96....non\n00000300  65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63  e,zlib@openssh.c\n00000310  6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69:62:40  om....none,zlib@\n00000320  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:00:00  openssh.com.....\n00000330  00:00:00:00:00:00:00:00                          ........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0003, network: 0.0001s)\n00000000  b5:d7:74:43:fe:46:d0:13:b1:21:12:34:04:00:6c:9a  ..tC.F...!.4..l.\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0085, network: 0s)\n00000000  00:00:00:80:35:f3:e3:93:7d:c6:0e:48:db:41:3e:e2  ....5...}..H.A>.\n00000010  c8:0f:e8:f2:c4:0d:1a:67:45:85:18:68:02:5b:f9:a7  .......gE..h.[..\n00000020  bc:38:5e:f5:74:7a:d2:c1:33:41:cb:21:d3:7f:54:03  .8^.tz..3A.!..T.\n00000030  4d:73:61:a6:29:0b:a7:2b:d1:ed:4d:b9:74:09:ba:01  Msa.)..+..M.t...\n00000040  ba:26:cb:98:e1:38:83:a8:82:1a:78:16:c5:dc:67:73  .&...8....x...gs\n00000050  86:38:c9:e8:37:2a:a2:db:ae:90:4e:d3:02:7d:c8:8b  .8..7*....N..}..\n00000060  36:c7:e0:c8:53:ee:c4:a1:55:9a:fb:31:d2:ad:82:34  6...S...U..1...4\n00000070  ef:d7:1f:f1:e9:6c:ec:f0:30:fc:65:be:8a:93:8e:b7  .....l..0.e.....\n00000080  75:c4:35:14                                      u.5.\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 2.2417, network: 2.2416s)\n00000000  00:00:01:15:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:01:01:00:c2:c4:87:4b:4b:17:c7  ...#........KK..\n00000020  05:ae:3a:08:22:ce:bb:4d:48:36:a6:54:e0:d5:1c:a3  ..:.\"..MH6.T....\n00000030  d3:5d:c8:0d:fc:88:95:67:67:0b:79:ee:e0:7e:34:8c  .].....gg.y..~4.\n00000040  b6:be:d9:a4:9c:c2:f8:23:d5:f6:97:30:a2:2c:71:67  .......#...0.,qg\n00000050  b0:72:18:78:9c:c0:dd:38:2d:a3:2c:91:69:a2:30:a5  .r.x...8-.,.i.0.\n00000060  d1:da:28:d3:03:bc:bf:69:eb:47:4a:03:38:99:10:df  ..(....i.GJ.8...\n00000070  57:fe:27:af:10:33:5f:0d:04:59:18:a6:ea:85:7d:c6  W.'..3_..Y....}.\n00000080  96:db:4f:96:f3:e6:95:13:d1:12:bf:4e:5b:4b:eb:8a  ..O........N[K..\n00000090  be:47:27:f5:13:90:f6:b1:14:13:0d:f1:b6:77:d4:68  .G'..........w.h\n000000a0  00:d0:31:4f:6b:e7:b2:48:f9:e9:85:85:a6:4e:93:88  ..1Ok..H.....N..\n000000b0  e5:f7:7e:f0:27:9e:23:90:09:f7:05:db:f2:1b:10:a3  ..~.'.#.........\n000000c0  fa:5d:92:8a:62:82:fd:52:14:c2:dc:ea:7e:d9:10:e7  .]..b..R....~...\n000000d0  f9:d9:7a:a8:cd:70:1d:e2:bf:33:77:7e:8a:fc:09:9d  ..z..p...3w~....\n000000e0  80:32:45:9e:66:a1:ee:80:cc:4f:50:9c:b2:13:25:0b  .2E.f....OP...%.\n000000f0  44:8c:bf:9f:ee:a9:b3:63:d7:76:43:32:3e:3d:74:76  D......c.vC2>=tv\n00000100  ba:46:0c:52:32:a0:ef:ed:0b:8d:55:c6:0f:83:88:78  .F.R2.....U....x\n00000110  51:24:36:be:d5:ad:2c:af:59:00:00:00:80:10:d8:b8  Q$6...,.Y.......\n00000120  9b:97:a2:31:00:99:5f:87:09:1c:48:02:75:bf:21:68  ...1.._...H.u.!h\n00000130  fa:fe:47:b0:35:6d:c2:08:06:81:fc:63:d5:09:aa:25  ..G.5m.....c...%\n00000140  5b:04:1b:ff:85:91:77:c4:54:15:9d:56:5f:55:8a:be  [.....w.T..V_U..\n00000150  8e:57:f4:33:1d:ed:2c:af:fd:12:11:70:4e:a1:c7:5f  .W.3..,....pN.._\n00000160  b7:29:48:c0:ed:37:b8:db:ca:b5:ae:dd:ad:ca:de:fa  .)H..7..........\n00000170  18:dd:5b:89:57:db:ff:34:fb:03:cd:50:e3:f0:55:f1  ..[.W..4...P..U.\n00000180  09:c3:eb:63:9e:2b:91:37:25:0b:d5:3f:0e:d8:cd:4e  ...c.+.7%..?...N\n00000190  a1:9b:cb:93:38:82:37:d7:53:30:6d:74:ee:00:00:01  ....8.7.S0mt....\n000001a0  0f:00:00:00:07:73:73:68:2d:72:73:61:00:00:01:00  .....ssh-rsa....\n000001b0  06:ce:e6:90:e9:05:10:03:fe:06:5f:56:3d:e3:6e:06  .........._V=.n.\n000001c0  39:38:d3:30:0c:90:4d:07:ae:94:9d:80:5a:2e:09:a5  98.0..M.....Z...\n000001d0  a1:07:6b:30:dc:ff:49:a4:85:95:01:ea:51:e9:e0:d9  ..k0..I.....Q...\n000001e0  3e:c3:61:c2:4d:f1:09:1d:cb:11:5a:d3:0a:73:52:f8  >.a.M.....Z..sR.\n000001f0  7a:b0:8b:01:05:46:27:68:9e:8b:d7:64:e2:ac:7b:77  z....F'h...d..{w\n00000200  0b:91:5a:59:8e:ca:8d:c7:89:b1:fd:1f:ea:2d:0b:a0  ..ZY.........-..\n00000210  5f:b8:6e:6f:22:e4:53:3d:46:6b:b2:a0:9e:a2:c8:c4  _.no\".S=Fk......\n00000220  7e:f2:af:93:77:e4:e8:72:5c:e0:3e:29:07:98:28:d8  ~...w..r\\.>)..(.\n00000230  7c:8c:64:58:e2:4a:2e:8a:82:40:7f:d7:22:9c:f1:79  |.dX.J...@..\"..y\n00000240  9d:7f:4d:55:99:3b:87:74:6a:88:91:7b:99:ed:c8:50  ..MU.;.tj..{...P\n00000250  b1:32:9a:cc:19:c2:1c:86:29:b6:7f:b2:1c:b3:c5:7e  .2......)......~\n00000260  67:2f:c9:67:f0:c6:c8:a2:98:9f:5d:5c:37:85:12:f2  g/.g......]\\7...\n00000270  26:03:fc:16:53:78:31:37:60:da:e7:84:e2:9e:d9:bd  &...Sx17`.......\n00000280  0a:ef:72:c5:70:3c:df:47:9e:87:d7:4f:60:ee:f8:0d  ..r.p..G...O`...\n00000290  ff:c1:85:98:74:42:9a:92:26:f0:a4:29:04:f0:2e:2f  ....tB..&..).../\n000002a0  76:75:54:8f:58:6f:d7:24:92:d5:e6:ae:49:8a:49:37  vuT.Xo.$....I.I7\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.008, network: 0s)\n\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0026, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 2.1404, network: 2.1402s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n\nPHP 5.6.1 with mcrypt, hash, mhash, gmp and openssl extensions installed. Local host: openSuSE 13.2 x86_64, remote host: Centos 6.5 x86_64\n. :facepalm: the private key was empty. \nSorry for the noise.\n. ",
    "MaximilianKresse": "Here is a unit test to reproduce the bug:\nphp\nclass SftpTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testChmod()\n    {    \n        $sftp = new \\phpseclib\\Net\\SFTP('HOST');\n        $this->assertTrue($sftp->login('USER', 'PASSWORD'), 'Login failed');\n        $this->assertTrue($sftp->chdir('/var/www/webs/test_project'), 'Chdir failed');\n        $this->assertTrue($sftp->put('Asdf.txt', 'Hello World'), 'File write failed');\n        $this->assertNotFalse($sftp->chmod(0775, 'Asdf.txt'), 'Chmod failed');\n    }\n}\n. ",
    "ronnievisser": "Does the CMS library also contains encryption after signing? or is this something we have to add ourselfs?\nBasically what I have to achieve is the following\norder is Action - Encryption - Result\n1 Zip data file - - Zipped Data file\n2a Generate a hash of the (Zipped) Data file -SHA1 or SHA2-256- Hash at the moment of sending\n2b Encrypt hash by Private key of customer -RSA Encryption- Digital signature\n4 Data and signature are included in an envelope (\u201cSigned Data\u201d), ready to be encrypted according to CMS standard - - Signed Data\n5 Generate a 128 bit data encryption key (session key) - - The unwrapped session key\n6 Encrypt unwrapped session key with public key - RSA Encryption - The wrapped session key\n7 Encrypt the signed data file with unwrapped session key - 3DES EDE CBC - Encrypted Signed Data\n8 Create Enveloped Data according to CMS standard - - Enveloped Data \nCan I use this library to achieve this???\n. ",
    "tomsommer": "Did you ever solve this with phpseclib?\n. +1\nBeing able to do a keep-alive within phpseclib would be nice, something like ServerAliveInterval. Maybe in a react/promise kind of way?\n. At what point will phpseclib then switch to Exceptions?. What about these user_error() in master?\nhttps://github.com/phpseclib/phpseclib/search?utf8=%E2%9C%93&q=user_error&type=. ",
    "PadaKwaak": "Thanks for the fast feedback & work done on this project!\nI'll keep an eye out for progress on #855 and do as you suggested with the 3 different constants.\n. ",
    "Ferbla": "I reinstalled phpseclib, and now it is working. Something must have went wrong on the first install. Thanks for your help\n. ",
    "emxjay": "I've encountered the same issue with v1.0.1, and as mentioned by @terrafrost, the include path must be set correctly.\nFor instance, in order for this example to work properly, you should add something like this at the beginning:\nset_include_path(get_include_path() . DIRECTORY_SEPARATOR . 'phpseclib1.0.1');\nCheers.\n. ",
    "Ne00n": "Ah Okay, Thanks!\n. ",
    "shreyanshpanchal": "@terrafrost Thanks so much, I was messing around with this for 2 hours now & finally stumbled upon your answer.. ",
    "mmcev106": "Just created a pull request for 1.0.  Should I close this one?\n. It is.  The original file was refactored and that command was moved to the\nREADME.\nOn Sun, Nov 8, 2015 at 10:00 AM, Graham Campbell notifications@github.com\nwrote:\n\nNo, that PR is for a different file is it not?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/862#issuecomment-154835198.\n. The only instance of \"--dev\" in the 1.0 branch is the one I just removed\nfrom the README:\n\nmarkbook:phpseclib markmcever$ git checkout 1.0\nAlready on '1.0'\nYour branch is up-to-date with 'origin/1.0'.\nmarkbook:phpseclib markmcever$ git grep \"--dev\"\nREADME.md:    php composer.phar install --dev\nmarkbook:phpseclib markmcever$\nOn Sun, Nov 8, 2015 at 10:10 AM, Graham Campbell notifications@github.com\nwrote:\n\nSurely it's moved from the readme to the php file? 1.0 is older than\nmaster?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/862#issuecomment-154835680.\n. \n",
    "macdabby": "I was also trying to do this. I tried npm-rsa (or node-rsa) using browserify. I am not getting an error when decrypting with phpseclib, but the output just returns null. I am able to decrypt the same cyphertext from the browser with the same private key. I'm wondering if this is a padding issue?\nI have my code posted here: http://stackoverflow.com/questions/36222554/how-can-i-decrypt-data-created-by-npm-rsa-in-php\n. Using git bisect, I found that this behavior begins on this commit:\nhttps://github.com/phpseclib/phpseclib/commit/806249c7e91b60e81ae3052cf02a83b57ac74c7d\nPrior to that commit, I get a 'Decryption error' thrown. I'll investigate this further.\n. In the commit above, it looks like the exceptions thrown were changed into returning false.\nIn both the master branch and the previous commit, this condition fails:\n$lHash != $lHash2\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/RSA.php#L1650\n. Awesome! That was it. I did try changing with $rsa->setHash('sha1'); , but I didn't set $rsa->setMGFHash('sha1');.\n. Maybe this does deserve some attention in the examples or documentation.\n. ",
    "MaximilianKindshofer": "I double checked if I entered the IP Adress correctly:\n[2a00:61e0:4068:XXXX:XXX:XXXX:XXXX:XXXX]\nHowever only the first two doubleoctets are handed over as it seams. As I am not familiar with the codebase I don't know where the error occours.\nApperently it had worked some time ago:\nhttps://forum.owncloud.org/viewtopic.php?f=29&t=24802 \n. Iam using\nownCloud 8.2.0 (stable)\n. Thanks for your time!\n. ",
    "faridmovsumov": "@auro1 I have the same problem. Thanks for trying solve this problem. Does it work?\n. ",
    "BreakHear7": "Does it work with SSH?. I need connect by ssh through proxy, but phpseclib not support it. Is proxy support expected?. I think many peoples need this functional, but there is not good realization. Do you have working example with fsocket?. If anyone is interested, then you can start working through HTTP proxies like this.\n`$fsock = fsockopen($proxyHost, $proxyPort);\n$address = $ip;\n$request = \"CONNECT $address:$port HTTP/1.0\\r\\nContent-Length: 0\\r\\n\\r\\n\";\nif(fputs($fsock, $request) != strlen($request)) {\n    exit(\"premature termination\");\n}\necho \"first packet send\\n\";\n$response = fgets($fsock);\necho \"first packet rcvd\\n\";\n$ssh = new SSH2($fsock);`\nBut then for some reason new SSH2 ($ fsock) is not executed. Any ideas?. Are somebody can say me how I can fix this erro: No compatible server to client encryption algorithms found in. where i can get autoload.php?. why $ssh->read() show nothing?. I do it:\n```php\ninclude ('phpseclib\\Composer\\Autoload\\ClassLoader.php');\ninclude ('phpseclib\\ParagonIE\\ConstantTime\\EncoderInterface.php');\ninclude ('phpseclib\\ParagonIE\\ConstantTime\\Binary.php');\ninclude ('phpseclib\\ParagonIE\\ConstantTime\\Base64.php');\ninclude ('phpseclib\\ParagonIE\\ConstantTime\\Hex.php');\ninclude ('phpseclib\\Net\\SSH2.php');\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR . '\\phpseclib');\n$loader->register();\nuse phpseclib\\Net\\SSH2;\n$fsock = fsockopen($proxyHost, $proxyPort);\n$address = $ip;\n$request = \"CONNECT $address:$port HTTP/1.0\\r\\nContent-Length: 0\\r\\n\\r\\n\";\nif(fputs($fsock, $request) != strlen($request)) {\n    exit(\"premature termination\");\n}\n$response = fgets($fsock);\n//define('NET_SSH2_LOGGING', 3);\n$ssh = new SSH2($fsock);\nif(!$ssh->login($user, $pass)){\nexit('Login failed');\n}\nif(!$ssh->isAuthenticated()){\nexit('Not authenticated');\n}\necho \"ls /var/www/html\" . PHP_EOL;\necho $ssh->exec(\"ls /var/www/html\");\necho \"ls /var/log\" . PHP_EOL;\necho $ssh->exec(\"ls /var/log\");\necho $ssh->exec(\"df -h\");\nunset($ssh);\n```. ",
    "hxpro": "In my case helped call _close() before returning false\nfile Net\\SCP.php\nphp\n253 if (!preg_match('#(?<perms>[^ ]+) (?<size>\\d+) (?<name>.+)#', rtrim($this->_receive()), $info)) {\n254     $this->_close();\n255     return false;\n. ",
    "splitice": "Every version of PHP since PHP 4 has had a warning for invalid index offset.\n. changed\n. Should be good now\n. ",
    "dropdevcoding": "I am sorry, this is the first time I use this machine to commit to github. Configuration was not set. \nShall I open another pull request?\n. I understand, so from a general point of view the implementation works as expected. isLoggedIn might not be the right term in that case, but I would appreciate if there was a function I could ask for \"am I currently in a state, in which I may operate on the foreign server?\". Having this function offered would help a lot to handle that error more accurately/cleanly instead of handling it all-over-the-board \"okay, if there's an error, disconnect and try again\".\nI will absolutely understand if you don't see the need for that, but I don't know other projects which are using this library, so it might be helpful for other cases, too. \n. Thank you very much!\n. ",
    "marcelgwerder": "Hmm neither enabling pty nor the interactive shell solve the problem. I figured out that the && construct is the problem and it doesn't matter which command I use with it.\necho \"1\" && echo \"2\"\nOn one of my servers I get 1 2 and on the other one I get 1.\nHere is the part of the log I suspect to be the part where the command is executed. I don't know this ssh stuff well so I cut out what looks like the auth part to me just to avoid posting sensitive information.\nSuccess (output 1 2):\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0004, network: 0.0001s) 00000000 00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f ....session..... 00000010 ff:ff:ff:00:00:40:00 .....@. <- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0028, network: 0.0001s) 00000000 00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00 ................ -> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0004, network: 0.0001s) 00000000 00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00 ........exec.... 00000010 14:65:63:68:6f:20:22:31:22:20:26:26:20:65:63:68 .echo \"1\" && ech 00000020 6f:20:22:32:22 o \"2\" <- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0014, network: 0.0001s) 00000000 00:00:00:00:00:20:00:00 ..... .. <- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0002, network: 0.0001s) 00000000 00:00:00:00 .... <- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0022, network: 0.0002s) 00000000 00:00:00:00:00:00:00:02:31:0a ........1. <- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0.0001s) 00000000 00:00:00:00:00:00:00:02:32:0a ........2. <- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0002, network: 0s) 00000000 00:00:00:00 .... <- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s) 00000000 00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61 ........exit-sta 00000010 74:75:73:00:00:00:00:00 tus..... <- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0004, network: 0s) 00000000 00:00:00:00 .... -> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0003, network: 0.0001s) 00000000 00:00:00:00 ....\nFail (output 1):\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0004, network: 0.0001s) 00000000 00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f ....session..... 00000010 ff:ff:ff:00:00:40:00 .....@. <- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.2702, network: 0.0001s) 00000000 00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00 ................ -> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0004, network: 0.0001s) 00000000 00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00 ........exec.... 00000010 14:65:63:68:6f:20:22:31:22:20:26:26:20:65:63:68 .echo \"1\" && ech 00000020 6f:20:22:32:22 o \"2\" <- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0063, network: 0.0002s) 00000000 00:00:00:00:00:20:00:00 ..... .. <- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0005, network: 0.0001s) 00000000 00:00:00:00 .... <- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1379, network: 0.0001s) 00000000 00:00:00:00:00:00:00:02:31:0a ........1. <- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0002, network: 0s) 00000000 00:00:00:00 .... <- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s) 00000000 00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61 ........exit-sta 00000010 74:75:73:00:00:00:00:00 tus..... <- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0002, network: 0s) 00000000 00:00:00:00 .... -> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0002, network: 0.0001s) 00000000 00:00:00:00 ....\nDoes this help in any way? The only thing I can directly see is that the log from the failing server lacks a second NET_SSH2_MSG_CHANNEL_DATA.\n. I was finally able to reproduce this issue on the CLI so this definitely is not related to phpseclib but rather some faulty server setup. \n. ",
    "Joey3000": "\nAnd the fact that it's seg faulting on PHP 5.6... idk what that's all about. It's not seg faulting my copy of PHP 5.6..\n\nJust a few ideas on that:\n- runkit:\n  - A new version 1.0.4 of runkit has been released, according to http://zenovich.blogspot.com/2015/10/runkit-1.0.4.html#rel104 (see also https://github.com/zenovich/runkit/releases). It seems to fix a bunch of segfault issues.\n  - Also, it now supports PHP 5.6, so that a PHP version check in https://github.com/phpseclib/phpseclib/blob/master/travis/install-php-extensions.sh#L24-L29 would no longer be needed.\n  - I'm not familiar with Travis CI, but https://github.com/phpseclib/phpseclib/blob/master/travis/install-php-extensions.sh#L24-L29 uses git clone of the runkit repository, which probably means that it uses runkit it its current default branch (i.e. master) snapshot. Maybe, for stability reasons, it would be better to use a defined version instead, i.e., to download one of the source code files attached to https://github.com/zenovich/runkit/releases/tag/1.0.4 using wget? Those can't be modified post-release. Alternatively, to make it faster and even less error-prone, the used runkit version could be included into phpseclib, using e.g. following directory structure (see, e.g., https://github.com/piwik/piwik/tree/master/tests):\n    - tests/lib/runkit (contains runkit)\n    - tests/travis (contains what's currently in the travis directory)\n    - tests/PHPUnit (contains what's currently in the tests directory, as well as phpunit.xml.dist, which is currently in the root directory)\n- https://stackoverflow.com/questions/6343674/phpunit-segmentation-fault and various other found searching for \"php unit test segmentation fault\" and \"travis ci unit test segmentation fault\".\n. > the default hash algorithm is now sha256\nThat takes care of the \"RSA\" part of https://github.com/phpseclib/phpseclib/issues/882. Thanks!\n. This review round is complete. Feel free to have a look. Only the comments appearing in this PR since your last comment apply. (The older ones, if still visible, have been marked as completed (green checkbox).)\nAlternatively, the same new comments can be seen here (until the next commit is pushed, apparently): https://github.com/terrafrost/phpseclib/commit/d5a359b41e87024ff9f49a06a1b2a703a36d38df.\n. I have no further comments. Thanks for the updates!\n. > By default, phpseclib uses an IV of null characters if one isn't explicitly provided to it. Behavior like this isn't exactly without precedent either. Both OpenSSL and mcrypt null pad keys if they're not long enough.\nThe internets seem to be full of warnings to avoid using a constant IV with the CBC mode, while many application devs nevertheless use incorrect library defaults. E.g., some research results:\n- https://webcache.googleusercontent.com/search?q=cache:0V0mORvULp0J:https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf%2Biv+%3D+0+Security+Cryptographic+Misuse+of+Libraries+-+courses&gbv=1&hl=es&&ct=clnk:\n\nRule 2: Do not use a non-random IV for CBC encryp-\ntion. CryptoLint identified 1,932 applications that make\nuse of constant initialization vectors in CBC mode encryp-\ntion.\n- https://webcache.googleusercontent.com/search?q=cache:XhFYK7GXHh8J:https://courses.csail.mit.edu/6.857/2014/files/18-das-gopal-king-venkatraman-IV-equals-zero-security.pdf%2B%3D+0+Security+Cryptographic+Misuse+of+Libraries+-+courses&gbv=1&sei=VU-JVtHCEMbFmQGB64fADg&hl=es&&ct=clnk\nBest Practice\nLibraries should always build in the most secure option as the default. For example, IND-\nCPA secure CBC mode with random IV should be the default cipher mode for symmetric-key\nencryption.\n\nMaybe a random IV could be made used by default in future?\n. I agree. It would make a user investigate and fall over the many recommendations to not use a constant IV. And it's how mcrypt_encrypt() does it:\n\niv\nUsed for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.\n\nIt might also be good to additionally recommend usage of a randomly generated IV in:\n- The exception's message\n- The code: https://github.com/phpseclib/phpseclib/blob/2.0.0/phpseclib/Crypt/Base.php#L498\n- The examples: http://phpseclib.sourceforge.net/crypt/examples.html\n. :+1: The default size of 2048 sounds good, given that SSL/TLS certificates with less than 2048-bit RSA key lengths are being phased out as well.\n. Some feedback:\n- Following could be removed in https://github.com/terrafrost/phpseclib/blob/d5a868ed4f07624bf9df76fd877ace54da85c093/phpseclib/Crypt/Base.php#L505-L506 (referring to IV):\n\nIf not explicitly set, it'll be assumed to be all zero's.\n\nAlso, the \"optional\" could be removed from the following line in the same function header of setIV():\n\nSets the initialization vector. (optional)\n- The above function header, as well as https://github.com/terrafrost/phpseclib/blob/d5a868ed4f07624bf9df76fd877ace54da85c093/phpseclib/Crypt/Base.php#L514 don't consider self::MODE_STREAM. Is this intended? (Similarly to self::MODE_ECB, the IV is not used with it in https://github.com/terrafrost/phpseclib/blob/d5a868ed4f07624bf9df76fd877ace54da85c093/phpseclib/Crypt/Base.php#L705 and possibly other places.)\n\nOn the other hand, maybe the non-consideration of self::MODE_STREAM is correct here (which makes the provision of IV for it optional, but possible), and the IV needs to be provided in https://github.com/terrafrost/phpseclib/blob/d5a868ed4f07624bf9df76fd877ace54da85c093/phpseclib/Crypt/Base.php#L705, etc.? E.g., from mcrypt_encrypt() manual (emphasis mine):\n\niv\nUsed for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.\n- Maybe the mcrypt_encrypt() implementation behaviour (code) in PHP >= 5.6.0 could be used as a guide with the following, if/when it's implemented:\nThat said, w.r.t. throwing exceptions if IV's aren't long enough... the necessity for that is going to be somewhat mode dependent. In CTR mode I'm not sure that kind of behavior is optimal. ie. in CBC mode the IV depends on the encryption result of the last block. But in CTR mode it doesn't. In CTR mode you just increment the IV by one in each block. Ideally, you'd generate the IV by doing something like random_string(32) but doing something like generate_random_number(0, 2 ** 32 - 1) would be perfectly valid too and w.r.t. numbers there's a non-zero possibility that the number that was chosen would only be 31 bytes long instead of 32. Something to ponder I suppose..\n\nFrom its manual (emphasis mine):\n\niv\nUsed for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.\n. Thanks as well!\n. > Do you want to do a commit like this for the 2.0 branch too?\n\nDone: https://github.com/phpseclib/phpseclib/pull/931\n. @DavidAnderson684 \n\nAlso, since $GLOBALS contains all the other variables ($_GET, $_POST, $_SERVER, etc.), doing something to more than $GLOBALS seems redundant, if the aim is to collect entropy (unless passing $GLOBALS to a function that may discard any unwanted input types...)\n\nThat $GLOBALS contains all (or which of) the other \"superglobals\" doesn't seem to be explicitly documented anywhere. I checked print_r($GLOBALS); on http://sandbox.onlinephpfunctions.com/ and it seems to be PHP version and/or php.ini configuration dependent whether, e.g., $_SERVER is contained (with $_SESSION never?).\n. This should be fixed with https://github.com/phpseclib/phpseclib/pull/934#discussion_r53465694\n. > That's a good point. I can add an isset check for everything else. If $_SESSION isn't available then there's not even any pretense of crypt_random_string() being secure\nThanks for the update (https://github.com/terrafrost/phpseclib/commit/27f659f3d9d76754892e7a2dee0562187331e6d1#diff-b08ee4e00815fdb38838fb5016bd2ee4R151) and clarification!\n. @bantu You mean we won't get paid for this engineering exercise? :D\n. Thanks for all the updates! Just a few minor points:\n1. This hasn't been addressed: https://github.com/phpseclib/phpseclib/pull/956#discussion_r58241646. To give it more details: For all 256-bit hashes, the length is set in https://github.com/terrafrost/phpseclib/blob/a757584630ce1f7c473a6964a9c9697f5c5bb6fd/phpseclib/Crypt/Hash.php#L186-L189. But 'sha224' is missing in https://github.com/terrafrost/phpseclib/blob/a757584630ce1f7c473a6964a9c9697f5c5bb6fd/phpseclib/Crypt/Hash.php#L183-L185. So, shouldn't the latter be, similarly:\nphp\n            case 'sha224':   // this line is currently missing\n            case 'sha512/224':\n                $this->length = 28;\n                break;\n2. This isn't really related, but since the hash tests are touched, I thought it could be done here, too:\na. The exact same Whirlpool test is there three times: https://github.com/terrafrost/phpseclib/blob/3aad5a70e57dd5ad4313af137c81fffbe375921c/tests/Unit/Crypt/HashTest.php#L88-L102. Should two of them be removed, or one removed and another modified to not have the final point in the test string? On the other hand, there seem to be official test vectors in http://www.larc.usp.br/~pbarreto/whirlpool.zip (linked to from the official http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html; the tests are supposedly ISO/IEC 10118-3:2004 conform, but I can't confirm since the latter is behind a paywall).\nb. But, actually, Whirlpool doesn't seem to be supported (any longer?) by phpseclib - searching for the \"whirlpool\" string only brings up its tests. (Except for phpseclib\\Crypt\\Base.php where its PHP-provided implementation is used if available.) So, maybe its tests need to be removed altogether?\nThanks in advance!\n. Thanks for the updates!\n\nI guess what we could do is make it so that it throws an exception if an unsupported algorithm is provided. This would be consistent with the changes I made to the symmetric ciphers to make them less tolerant of bad input.\n\nThat makes sense to me.\n. > I'm using the @requires annotation as mentioned at https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.requires.tables.api to make it so that the test will only run on PHP 5.6 and later but it doesn't appear to be working.\nCan you try a double star here, i.e. /** instead of /*? That's how the example in the above link does it.\n. Should this be @return bool|string as well? And also at https://github.com/phpseclib/phpseclib/pull/902/files#diff-b4b2acaebb5e3d125481ec5da11baff5R1989 below?\n\nUpdate: Status: :white_check_mark: (fixed or moved to later comment)\n. Should this be @param int $padding optional (with the type like in the case of encrypt() and sign(), and optional as seems to be the convention for optional parameters)?\n. Should this be @return bool|string as well?\n. Should this be @param int $padding optional, like in RSA::sign()?\n\nUpdate: Status: :white_check_mark: (moved to later comment)\n. Should this be function sign($message, $padding = RSA::PADDING_NONE), to have the same type as with RSA::sign()? (Would require use phpseclib\\Crypt\\RSA; at the top of the file.)\n. @param bool $pkcs15_compat optional seems to be missing\n\nUpdate: Status: :white_check_mark: (fixed)\n. Following is not needed and could be removed, because they are in the same namespace (therefore, Hash and Random can be used without specific use declarations):\nuse phpseclib\\Crypt\\Hash;\nuse phpseclib\\Crypt\\Random;\n. Since this is PHP >= 5 code (because type hinting was added below), could it be that the whole __clone() method can be removed? (It looks like it's only needed for modifying internal objects after cloning, not internal variables. And value, is_negative, precision and bitmask are not objects - their values should be copied automatically. See, e.g., https://stackoverflow.com/questions/2144506/what-is-object-cloning-in-php.)\n. @param string $s seems to be missing\n\nUpdate: Status: :white_check_mark: (fixed)\n. Should this be @return bool? Because all returns, including $this->_equals($em, $em2), are of boolean type.\n. @param string $s seems to be missing\n\nUpdate: Status: :white_check_mark: (fixed)\n. This comment does not seem to correspond to the code:\n- There is no catching of the \"intended encoded message length too short\" exception\n- There is no output \"RSA modulus too short\" being made\nNote: See also the equal comment at https://github.com/phpseclib/phpseclib/pull/902/files#diff-b4b2acaebb5e3d125481ec5da11baff5R2045 below.\n. This does not account for _emsa_pkcs1_v1_5_encode() possibly returning false (in https://github.com/phpseclib/phpseclib/blob/806249c7e91b60e81ae3052cf02a83b57ac74c7d/phpseclib/Crypt/RSA.php#L1944). Is that intentional?\n\nUpdate: Status: :white_check_mark: (fixed)\n. Should this be @param int $padding optional (with the type like in the case of encrypt() and sign(), and optional as seems to be the convention for optional parameters)?\n. Should this be @param int $padding optional, as seems to be the convention for optional parameters?\n. Should this be @param int $padding optional, as seems to be the convention for optional parameters?\n. > Altho that said, that example does make me think a getPrecision method is needed lol\nDefinitely! :)\nThanks for looking into this!\nI think I didn't explain myself very well. I did not mean that one should stop using the clone keyword and go back to using the assignment operator (\"=\"). Instead, I meant that when one uses the clone keyword, one does not need to define a __clone() method. Unless the cloned object contains other objects.\nI tried following code:\n```\nclass MyClass\n{\n    public $a;\n    public $b;\n}\n$o = new MyClass;\n$o->a = 'a';\n$o->b = 'b';\n$o2= clone $o;\n$o2->a = 'c';\nvar_dump($o);\nvar_dump($o2);\n```\nWhich produces following:\nobject(MyClass)#1 (2) {\n  [\"a\"]=>\n  string(1) \"a\"\n  [\"b\"]=>\n  string(1) \"b\"\n}\nobject(MyClass)#2 (2) {\n  [\"a\"]=>\n  string(1) \"c\"\n  [\"b\"]=>\n  string(1) \"b\"\n}\nAs can be seen, MyClass does not define a __clone() method. Nevertheless, the properties were truly copied - they are not references like in the case of an assignment. Your quote from the manual talks about objects inside the cloned object. So, if the $a and $b in my example were objects, then yes, I would need to define the __clone() method like you do in your code, and copy them manually. Because otherwise they would be references to the original object.\nSo, in your code, you treat value, is_negative, precision and bitmask as if they were objects and manually copy them. Which doesn't break anything, but is unnecessary - it is already done automatically before __clone() is called. The __clone() method here just burns cycles. :)\nSo, essentially, the __clone() method can be removed and the cloning in this case would work just as well.\n. Is this check (still) necessary? It seems that json_encode() is not used (any longer).\n. $GLOBALS seems to be recursive. So that it seems that some sort recursion prevention would be needed. E.g., I tried this function with echo phpseclib_safe_serialize($GLOBALS); on http://sandbox.onlinephpfunctions.com/ and:\n- For PHP 4 - 5.2 it doesn't return anything\n- For PHP 5.3 - 7.0 it shows:\n<b>Fatal error</b>:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 20480 bytes) in <b>[...][...]</b> on line <b>14</b><br />\nThis might be dependent on php.ini configuration.\nA simple solution of changing line 282 to if (is_object($arr[$key]) || ($arr[$key] === $GLOBALS)) { seems to work on higher PHP versions, but not on lower ones. So that maybe a recursion depth limitation could be used as a universal solution? (Like, e.g., in https://secure.php.net/manual/en/function.var-dump.php#76072 or https://secure.php.net/manual/en/function.print-r.php#78851)\n. This comparison does not seem to work with older PHP versions. When tested using:\n[copy-paste of the phpseclib_safe_serialize() definition]\necho phpseclib_safe_serialize($GLOBALS);\non http://sandbox.onlinephpfunctions.com/, it outputs following error:\n<br />\n<b>Fatal error</b>:  Nesting level too deep - recursive dependency? in <b>[...][...]</b> on line <b>19</b><br />\non the following PHP versions:\n5.4.4\n5.3.14\n5.2.17\n5.1.6\n5.0.5\n4.4.9\nMaybe a recursion depth limitation could be used instead? (Like, e.g., in https://secure.php.net/manual/en/function.var-dump.php#76072 or https://secure.php.net/manual/en/function.print-r.php#78851 .)\nNote: The behaviour changes in PHP 5.3.15 and 5.4.5, where the error no longer occurs (including later versions). Both were released on 19 Jul 2012, according to https://secure.php.net/releases/.\n. Here is an alternative proposal: https://github.com/terrafrost/phpseclib/pull/4 (can be merged into this PR branch - I'm just playing with GitHub :) ). What do you think of it? It seems to work on both, older and newer PHP versions (tested on http://sandbox.onlinephpfunctions.com/).\n. The following:\nphp\necho phpseclib_safe_serialize($_SESSION);\necho phpseclib_safe_serialize($_OLD_SESSION);\ngives the following notices on all supported PHP versions (4.4.9 to 7.0.3) on http://sandbox.onlinephpfunctions.com/ (possibly due to PHP.INI configuration?):\n<br />\n<b>Notice</b>:  Undefined variable: _SESSION in <b>[...][...]</b> on line <b>32</b><br />\nN;---;<br />\n<b>Notice</b>:  Undefined variable: _OLD_SESSION in <b>[...][...]</b> on line <b>33</b><br />\nMaybe an existence check using isset() is needed before using the variables with phpseclib_safe_serialize()?\n. - The $key variable doesn't exist in this function. Should it be $length?\n- Should the following be \"128, 192 or 256\"?\n\n16, 24 or 32\n- ~~Maybe all LengthException messages in this PR could have the unit (i.e. \"characters\" / \"bits\") added as well?~~ (After further thinking: maybe not.)\n- ~~Due to all the check repetition, maybe the argument validation could be exported into a separate function, which then would throw the exception? (Or a two functions - one for the size in chars and another in bits.)~~ (After a closer look, it doesn't seem possible, as most of the checks are for different sizes.)\n\nNote: This could be a copy-paste error from https://github.com/phpseclib/phpseclib/pull/942/files#diff-05acee93a75378713d649bc1b9601be2R119. While it looks like it should have been copied from https://github.com/phpseclib/phpseclib/pull/942/files#diff-a581707a30a6f094640c6d61f2b4d18aR220 or similar.\n. See https://github.com/phpseclib/phpseclib/pull/942/files#r52751087 (same applies here).\n. > In light of this, what about this?:\n\nterrafrost@086bd84\n\nIt looks good. Here is an incremental improvement proposal: https://github.com/terrafrost/phpseclib/pull/5 :)\n. > I guess we could still do isset() but idk... issues arising from disabled functions are not issues that we should be overly concerned with imho. You disable functions at your own peril.\nTrue, but disabling session_start() seems to be a valid configuration option. (Unlike, e.g., a patch to the PHP interpreter itself.)\nTo the other Superglobals:\n- $_OLD_SESSION: Does this one exist? It's not mentioned in https://secure.php.net/manual/en/language.variables.superglobals.php\n- $GLOBALS: This one seems to actually always exist.\n- Others: It seems that they may be non-existent, too. From https://secure.php.net/manual/en/language.variables.superglobals.php:\n\nNote: Variable availability\nBy default, all of the superglobals are available but there are directives that affect this availability. For further information, refer to the documentation for variables_order. \n\nThose are just some thoughts anyway.\n. > Found another one that fails with both your updated version and with mine:\nGood find!\n\nHere's another version:\nterrafrost@102d53b\nIt's based on http://stackoverflow.com/a/9293146/569976\n\nI added a few minor comments to it. But, more importantly, it also causes a \"Fatal error:  Allowed memory size of ... bytes exhausted\" if tested with the following on http://sandbox.onlinephpfunctions.com/ on the higher PHP versions, and doesn't return anything on the lower ones (note: the two $z lines need to be commented out for the lower versions):\n``` php\n$a['key1'] = 'value1';\n$a[] = &$a;\n$b[] = &$a;\n$b[] = &$b;\n$c[] = &$b;\n$z = [];\n$z[] = [&$z];\necho phpseclib_safe_serialize($GLOBALS);\n```\nHere is a try to address all of that, and to also make the implementation smaller by bringing it closer to the above Stackoverflow example:\nhttps://github.com/terrafrost/phpseclib/pull/6\nP.S.: As a PR again (instead of just a commit), to trigger the tests - it's good to know if they pass, to not leave possible issues to you when merging. :)\n. Should the following be \"128, 192 or 256\" instead?\n\n16, 24 or 32\n. See https://github.com/phpseclib/phpseclib/pull/942/files#r52847391 (same applies here).\n. Thanks!\nI don't think $key !== '__phpseclib_marker' && is necessary\n- Without it, each '__phpseclib_marker' key is also serialized. E.g., the test variables in https://github.com/phpseclib/phpseclib/pull/934/files#r52842344 above result in the following output (on PHP 7.0.3):\n\na:9:{s:4:\"_GET\";s:36:\"a:1:{s:18:\"__phpseclib_marker\";b:1;}\";s:5:\"_POST\";s:36:\"a:1:\n  {s:18:\"__phpseclib_marker\";b:1;}\";s:7:\"_COOKIE\";s:36:\"a:1:\n  {s:18:\"__phpseclib_marker\";b:1;}\";s:6:\"_FILES\";s:36:\"a:1:\n  {s:18:\"__phpseclib_marker\";b:1;}\";s:1:\"a\";s:60:\"a:2:\n  {s:4:\"key1\";s:6:\"value1\";s:18:\"__phpseclib_marker\";b:1;}\";s:1:\"b\";s:108:\"a:2:{i:0;s:60:\"a:2:\n  {s:4:\"key1\";s:6:\"value1\";s:18:\"__phpseclib_marker\";b:1;}\";s:18:\"__phpseclib_marker\";b:1;}\n  \";s:1:\"c\";s:157:\"a:2:{i:0;s:108:\"a:2:{i:0;s:60:\"a:2:\n  {s:4:\"key1\";s:6:\"value1\";s:18:\"__phpseclib_marker\";b:1;}\";s:18:\"__phpseclib_marker\";b:1;}\n  \";s:18:\"__phpseclib_marker\";b:1;}\";s:1:\"z\";s:84:\"a:2:{i:0;s:36:\"a:1:\n  {s:18:\"__phpseclib_marker\";b:1;}\";s:18:\"__phpseclib_marker\";b:1;}\";s:18:\"__phpseclib_marker\";b:1;}\nAs opposed to the following otherwise:\na:8:{s:4:\"_GET\";s:6:\"a:0:{}\";s:5:\"_POST\";s:6:\"a:0:{}\";s:7:\"_COOKIE\";s:6:\"a:0:{}\";s:6:\"_FILES\";s:6:\"a:0:\n  {}\";s:1:\"a\";s:30:\"a:1:{s:4:\"key1\";s:6:\"value1\";}\";s:1:\"b\";s:48:\"a:1:{i:0;s:30:\"a:1:\n  {s:4:\"key1\";s:6:\"value1\";}\";}\";s:1:\"c\";s:66:\"a:1:{i:0;s:48:\"a:1:{i:0;s:30:\"a:1:\n  {s:4:\"key1\";s:6:\"value1\";}\";}\";}\";s:1:\"z\";s:23:\"a:1:{i:0;s:6:\"a:0:{}\";}\";}\nSo, roughly the double RAM consumption on that non-representative test. (And a similar proportion on PHP 4.4.9.) I don't know how much impact that has in a typical PHP environment though, with respect to the number of existing global variables containing arrays (don't need to be circular).\n- Also, the comment on the following line would need to be removed then as well: https://github.com/terrafrost/phpseclib/commit/27f659f3d9d76754892e7a2dee0562187331e6d1#diff-b08ee4e00815fdb38838fb5016bd2ee4R285.\n. Yeah, I found that, too: It gave the following error on an object:\n\nFatal error:  Uncaught Error: Cannot use object of type test as array in [...][...]:16\n\nThere seem to be a few issues with your update, though - I added comments to it.\nI have an alternative approach: https://github.com/phpseclib/phpseclib/commit/062aa41ba002684101fe5dd526c161c9afa6085d. The change is:\n- Instead of adding a if (!is_object($arr)) before the recursion, it moves if (isset($arr['__phpseclib_marker'])) out to the beginning of the recursion. Note that, although returning the same empty string, the latter needs to be done after the former, instead of the same line, because it needs to already be sure that it's not an object at this point, because (from https://secure.php.net/manual/en/language.operators.precedence.php):\n\nPHP does not (in the general case) specify in which order an expression is evaluated and code that assumes a specific order of evaluation should be avoided, because the behavior can change between versions of PHP or depending on the surrounding code.\n\nHere is the ultimate test, which get passed on all versions (private and $z need to be commented out on lower versions):\n``` php\nclass test {\n    private function __sleep() {\n        return array();\n    }\n}\n$aobj = new test();\n$scalar_value = 'whatever';\n$a['key1'] = 'value1';\n$a[] = &$a;\n$b[] = &$a;\n$b[] = &$b;\n$c[] = &$b;\n$z = [];\n$z[] = [&$z];\necho phpseclib_safe_serialize($GLOBALS);\n```\nWhat do you think?\n. And just to be sure, although there weren't any errors reported when if (isset($arr['__phpseclib_marker'])) was done on a scalar: https://github.com/phpseclib/phpseclib/commit/94b669d7ed4251519cbfcd15c3b1da6d790dcf83\n. 'sha224' has also been added (see https://github.com/phpseclib/phpseclib/pull/956/files#diff-b4b2acaebb5e3d125481ec5da11baff5R1972), but its length is not set here. Is this on purpose?\n. 'sha224' has also been added (see https://github.com/phpseclib/phpseclib/pull/956/files#diff-b4b2acaebb5e3d125481ec5da11baff5R1972), but it doesn't have test cases defined here. Is this on purpose?\nPlease note that its examples are similarly available in http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA224.pdf.\nP.S.: Similarly in public static function hmacData() below - there are test vectors for HMAC-SHA-224 in https://tools.ietf.org/rfc/rfc4231.txt.\n. Thanks for adding this! Just a few minor points more, in case it has been missed:\n- I just noticed that the test vectors for HMAC-SHA-384 are also missing here (they are also in https://tools.ietf.org/rfc/rfc4231.txt).\n- There are more test cases for HMAC-SHA-256 and HMAC-SHA-512 (namely four each) than what has been added here - see, e.g., https://github.com/terrafrost/phpseclib/blob/089a4cb101c025611d066e13bd8c3e305c451558/tests/Unit/Crypt/HashTest.php#L160-L188.\nPlease also note the comment in https://github.com/phpseclib/phpseclib/pull/956#discussion_r58241646.\nThanks!\n. ",
    "mwienk": "I installed sftp as per https://winscp.net/eng/docs/guide_windows_openssh_server, which uses the https://github.com/PowerShell/Win32-OpenSSH sftp server\n. Ohw wow, thanks for your effort! I'll install another server, I never guessed that the server would've been the problem.\n. ",
    "agphoto": "After further investigation I guess there is a problem in the host key \nverification method.  I tried an sftp send to a linux server and it works correctly\nbut on another sftp server ( windows ) the send fails.\nWith the sftp command line in debug mode the linux server reports\nkex: server->client aes128-cbc hmac-sha1 none\n kex: client->server aes128-cbc hmac-sha1 none\nwhile the windows server reports\nkex: server->client aes128-ctr hmac-md5 none\n kex: client->server aes128-ctr hmac-md5 none\nThere is  same limitations you know in these parameters ?\nThere is a way to force one of this method ?\nReguards\n. I have not a public ip that I can share with you but I am using a free sftp server that you can\ndownload from here : http://www.xlightftpd.com/download.htm\nServer id get with $ssh->getServerIdentification() is  \"SSH-2.0-xlightftpd_release_3.8.5.1\" \nThank you for help.\n. ",
    "smudliyar": "Merry Christmas.\nBelow are the error log\n<- 00000000 53:53:48:2d:32:2e:30:2d:43:69:73:63:6f:2d:31:2e SSH-2.0-Cisco-1. 00000010 32:35:0a 25. -> 00000000 53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69 SSH-2.0-phpsecli 00000010 62:5f:30:2e:33:20:28:6f:70:65:6e:73:73:6c:2c:20 b_0.3 (openssl, 00000020 62:63:6d:61:74:68:29:0d:0a bcmath).. <- NET_SSH2_MSG_KEXINIT (since last: 0.0961, network: 0.0017s) 00000000 7e:d4:07:da:05:6a:fd:72:ea:40:2b:f2:bc:14:47:7e ~....j.r.@+...G~ 00000010 00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d ...Ydiffie-hellm 00000020 61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67 an-group-exchang 00000030 65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65 e-sha1,diffie-he 00000040 6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68 llman-group14-sh 00000050 61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61 a1,diffie-hellma 00000060 6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00:00 n-group1-sha1... 00000070 07:73:73:68:2d:72:73:61:00:00:00:29:61:65:73:31 .ssh-rsa...)aes1 00000080 32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c 28-cbc,3des-cbc, 00000090 61:65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35 aes192-cbc,aes25 000000a0 36:2d:63:62:63:00:00:00:29:61:65:73:31:32:38:2d 6-cbc...)aes128- 000000b0 63:62:63:2c:33:64:65:73:2d:63:62:63:2c:61:65:73 cbc,3des-cbc,aes 000000c0 31:39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63 192-cbc,aes256-c 000000d0 62:63:00:00:00:2b:68:6d:61:63:2d:73:68:61:31:2c bc...+hmac-sha1, 000000e0 68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61 hmac-sha1-96,hma 000000f0 63:2d:6d:64:35:2c:68:6d:61:63:2d:6d:64:35:2d:39 c-md5,hmac-md5-9 00000100 36:00:00:00:2b:68:6d:61:63:2d:73:68:61:31:2c:68 6...+hmac-sha1,h 00000110 6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63 mac-sha1-96,hmac 00000120 2d:6d:64:35:2c:68:6d:61:63:2d:6d:64:35:2d:39:36 -md5,hmac-md5-96 00000130 00:00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65 ....none....none 00000140 00:00:00:00:00:00:00:00:00:00:00:00:00 ............. -> NET_SSH2_MSG_KEXINIT (since last: 0.0004, network: 0.0001s) 00000000 a9:5b:04:14:41:52:30:65:64:a1:52:17:4f:db:44:cd .[..AR0ed.R.O.D. 00000010 00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d ...~diffie-hellm 00000020 61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64 an-group1-sha1,d 00000030 69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72 iffie-hellman-gr 00000040 6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69 oup14-sha1,diffi 00000050 65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d e-hellman-group- 00000060 65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69 exchange-sha1,di 00000070 66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f ffie-hellman-gro 00000080 75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32 up-exchange-sha2 00000090 35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73 56....ssh-rsa,ss 000000a0 68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72 h-dss....arcfour 000000b0 32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61 256,arcfour128,a 000000c0 65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32 es128-ctr,aes192 000000d0 2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c -ctr,aes256-ctr, 000000e0 74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74 twofish128-ctr,t 000000f0 77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77 wofish192-ctr,tw 00000100 6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73 ofish256-ctr,aes 00000110 31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63 128-cbc,aes192-c 00000120 62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77 bc,aes256-cbc,tw 00000130 6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f ofish128-cbc,two 00000140 66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66 fish192-cbc,twof 00000150 69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69 ish256-cbc,twofi 00000160 73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d sh-cbc,blowfish- 00000170 63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63 ctr,blowfish-cbc 00000180 2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63 ,3des-ctr,3des-c 00000190 62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36 bc....arcfour256 000001a0 2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31 ,arcfour128,aes1 000001b0 32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74 28-ctr,aes192-ct 000001c0 72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f r,aes256-ctr,two 000001d0 66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66 fish128-ctr,twof 000001e0 69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69 ish192-ctr,twofi 000001f0 73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38 sh256-ctr,aes128 00000200 2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c -cbc,aes192-cbc, 00000210 61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69 aes256-cbc,twofi 00000220 73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73 sh128-cbc,twofis 00000230 68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68 h192-cbc,twofish 00000240 32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d 256-cbc,twofish- 00000250 63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72 cbc,blowfish-ctr 00000260 2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64 ,blowfish-cbc,3d 00000270 65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00 es-ctr,3des-cbc. 00000280 00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36 ..9hmac-sha2-256 00000290 2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d ,hmac-sha1-96,hm 000002a0 61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35 ac-sha1,hmac-md5 000002b0 2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39 -96,hmac-md5...9 000002c0 68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d hmac-sha2-256,hm 000002d0 61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d ac-sha1-96,hmac- 000002e0 73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36 sha1,hmac-md5-96 000002f0 2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e ,hmac-md5....non 00000300 65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00 e....none....... 00000310 00:00:00:00:00:00 ...... -> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0088, network: 0s) 00000000 00:00:00:81:00:96:ab:80:ee:8d:bb:3e:6e:75:3f:51 ...........>nu?Q 00000010 12:dd:23:06:88:2b:e6:e7:fc:0a:10:46:a3:94:7b:79 ..#..+.....F..{y 00000020 31:1e:71:5e:d4:98:36:a0:bb:da:e5:bc:a9:f3:f9:bb 1.q^..6......... 00000030 f5:e0:ff:02:57:8a:38:c9:6d:eb:4c:9e:d6:e8:01:e3 ....W.8.m.L..... 00000040 58:4e:cd:a9:3a:48:36:d9:ea:b9:dc:37:81:3b:b5:76 XN..:H6....7.;.v 00000050 0f:bf:d7:ec:62:09:6b:20:14:81:99:53:d3:5e:fc:9a ....b.k ...S.^.. 00000060 87:e8:79:59:3d:ad:b2:e0:73:cf:81:e5:11:2d:03:62 ..yY=...s....-.b 00000070 9b:dd:50:11:d1:05:50:4a:83:96:3c:fd:5f:6a:7e:91 ..P...PJ...._j~. 00000080 eb:31:d4:09:4c .1..L <- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.4731, network: 0.473s) 00000000 00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00 ........ssh-rsa. 00000010 00:00:03:01:00:01:00:00:01:01:00:bc:3f:15:69:c5 ............?.i. 00000020 3e:49:c3:ab:7e:3a:15:98:eb:09:3e:13:29:5e:74:50 >I..~:....>.)^tP 00000030 59:d6:15:00:b6:05:d7:26:07:97:a4:9a:7f:c5:89:02 Y......&........ 00000040 63:c5:90:fe:66:6b:9d:21:d4:4c:f8:ca:30:ee:29:50 c...fk.!.L..0.)P 00000050 a5:e4:76:0b:a7:45:02:4a:d2:ed:25:8a:f0:4d:c1:61 ..v..E.J..%..M.a 00000060 57:b8:d7:41:03:7d:6d:c7:36:46:14:51:c0:75:cb:23 W..A.}m.6F.Q.u.# 00000070 41:c8:6c:e2:fb:77:3e:84:e1:a9:20:37:16:6e:ef:23 A.l..w>... 7.n.# 00000080 fe:6e:8a:46:b9:45:df:0b:8b:34:1b:41:c0:5a:29:96 .n.F.E...4.A.Z). 00000090 c7:7e:ca:d7:a7:8c:1f:9e:c2:26:ac:94:24:a6:e2:76 .~.......&..$..v 000000a0 f4:22:7f:5d:25:33:47:ba:75:27:c0:66:fc:ac:2f:d5 .\".]%3G.u'.f../. 000000b0 c5:a6:19:bc:35:30:e2:5e:19:23:20:50:b8:e0:c7:f3 ....50.^.# P.... 000000c0 e3:92:4c:dc:db:cc:87:4c:ea:69:0c:32:c2:c6:4f:64 ..L....L.i.2..Od 000000d0 fd:21:bb:a1:5b:d8:f4:6d:a5:f9:86:a6:cb:12:39:af .!..[..m......9. 000000e0 53:d8:1c:e4:e6:c0:ca:f7:27:ca:3d:43:c8:97:de:d4 S.......'.=C.... 000000f0 39:05:f2:c8:4b:f9:b1:3d:46:98:ce:56:49:b3:60:46 9...K..=F..VI.`F 00000100 92:0f:f5:dc:ee:38:5c:48:d3:8d:a4:c3:0b:e6:13:da .....8\\H........ 00000110 fa:d7:0c:4a:36:ca:ff:b9:aa:5d:2d:00:00:00:81:00 ...J6....]-..... 00000120 fd:f6:4b:95:00:b6:37:c4:d7:f9:92:b1:bd:45:5e:13 ..K...7......E^. 00000130 c4:d5:fe:21:df:66:ba:db:aa:50:0f:e9:97:0d:4f:31 ...!.f...P....O1 00000140 18:cc:82:f4:48:7a:70:da:ed:93:bb:94:ef:d2:f8:b6 ....Hzp......... 00000150 49:2c:b2:a6:26:6f:56:ad:8f:69:98:25:5f:c5:44:57 I,..&oV..i.%_.DW 00000160 01:55:4c:2e:44:2c:36:aa:6d:ac:43:be:0f:4d:80:b3 .UL.D,6.m.C..M.. 00000170 dd:c2:9d:6b:b0:db:21:36:81:32:f5:a7:cc:73:ff:1c ...k..!6.2...s.. 00000180 97:4b:57:3e:ef:02:0e:1f:14:5d:f1:cf:49:39:59:45 .KW>.....]..I9YE 00000190 38:40:a7:58:cf:3f:79:bf:cb:cc:bf:2d:3e:40:5e:a5 8@.X.?y....->@^. 000001a0 00:00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00 ........ssh-rsa. 000001b0 00:01:00:ab:eb:cd:7a:03:d2:85:77:65:49:e4:0d:f6 ......z...weI... 000001c0 a7:8b:a9:70:66:90:4f:e2:6a:07:19:9c:87:1e:24:f3 ...pf.O.j.....$. 000001d0 53:15:a4:46:74:8a:ce:e9:bc:b8:64:76:08:e9:0a:75 S..Ft.....dv...u 000001e0 06:da:5c:05:79:28:bc:61:67:e1:42:65:00:76:5f:c2 ..\\.y(.ag.Be.v_. 000001f0 7f:46:0b:b2:a5:80:45:5e:90:4c:cd:5a:9a:47:c2:1f .F....E^.L.Z.G.. 00000200 66:18:67:4f:1f:06:b7:18:eb:b4:fb:45:b2:0e:56:a8 f.gO.......E..V. 00000210 36:51:72:a3:d0:34:3e:c7:f6:f3:a9:0a:cc:dd:45:6d 6Qr..4>.......Em 00000220 be:db:90:2f:26:52:17:c5:95:bd:39:4c:1a:0b:4c:e8 .../&R....9L..L. 00000230 49:26:4c:89:f7:87:78:9e:5d:2f:25:05:7a:48:4b:9b I&L...x.]/%.zHK. 00000240 80:b8:67:15:2e:42:43:f9:a7:09:c9:10:bf:92:44:07 ..g..BC.......D. 00000250 f7:c7:a6:e5:25:80:ae:22:ca:b3:00:7a:73:cf:66:71 ....%..\"...zs.fq 00000260 ac:73:59:e1:08:68:8e:42:75:26:d6:ab:a6:e2:a4:a8 .sY..h.Bu&...... 00000270 2b:0a:8a:6a:a1:ee:d4:82:60:4e:41:2e:d7:f3:02:6b +..j....`NA....k 00000280 a5:5d:e1:f7:82:ce:43:fc:91:7e:7d:88:ef:b4:ab:d5 .]....C..~}..... 00000290 c2:73:03:2b:f1:19:9e:11:bd:19:47:27:27:19:17:75 .s.+......G''..u 000002a0 43:0c:fc:b6:76:7c:54:66:7f:86:92:71:50:45:04:19 C...v|Tf...qPE.. 000002b0 1d:c0:93 ... -> NET_SSH2_MSG_NEWKEYS (since last: 0.0062, network: 0.0001s) <- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s) -> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0023, network: 0s) 00000000 00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68 ....ssh-userauth <- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.1988, network: 0.1987s) 00000000 00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68 ....ssh-userauth -> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0.0001s) 00000000 00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e ....username.... 00000010 73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00 ssh-connection.. 00000020 00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70 ..password.....p 00000030 61:73:73:77:6f:72:64 assword <- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0554, network: 0.0553s) Command authorization failed.\n. ",
    "s4wny": "@terrafrost That is a good idea. Anything that makes it easier to use for first time users would be great.\n. Fixed!\n. Yeah, good idea.\n. ",
    "nimasdj": "Do you want me a pull request for this?\n. I meant for AES. See https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Base.php#L611\nDo you consider to have a pending PR for this one too?\n. If I use a random number for IV, where should I store it to get it for decryption? Should I append it with a separator at the end of encoded string? if yes, is it secure as everyone can see that number at the end of that encoded string?\n. I suggest by default it should use a random IV (I did a Pull Request), and prepend it before encoded data and use it when decrypting, then implement a method disableIV() to use all-NULLs for IV (as it is now), if a user does not want to use IV.\n``` php\n    var $disabledIV = false;\n    var $IV = \"\";\nfunction disableIV()\n{\n    $this->disabledIV = true;\n}\n\nfunction getIV($ciphertext)\n{\n    $iv = substr($ciphertext, 0, $this->getIVLength());\n    $this->setIV($iv);\n    return $iv;\n}\n\nfunction getCiphertext($ciphertext)\n{\n    return substr($ciphertext, $this->getIVLength());\n}\n\nfunction encrypt($plaintext)\n{\n    if (!$this->disabledIV && $this->mode != self::MODE_ECB) {\n        $iv = $this->createIV();\n        $this->setIV($iv);\n        $this->IV = $iv;\n    }\n\n    // do encrypting job....\n\n    return $this->IV.$ciphertext;\n}\n\nfunction decrypt($ciphertext)\n{\n    if (!$this->disabledIV && $this->mode != self::MODE_ECB) {\n        $iv = $this->getIV($ciphertext);\n        $ciphertext = $this->getCiphertext($ciphertext);\n    }\n\n    // do decrypting job...\n\n    return $this->paddable ? $this->_unpad($plaintext) : $plaintext;\n}\n\n```\nIf you like this code, let me know your improvements and I'd do pull request it. createIV() and getIVLength() methods are already in my current pull request.\n. I was thiking the same. But for those two methods in my PR I think you should consider to merge and release a version as it does not cause BC.\n. Do you want me to do a Pull Request for this?\n. This is pull request? When will be released?\n. as about question above I think I found the solution:\n``` php\nswitch ($cipher->getEngine()) {\n    case 3: // openssl\n           $iv_size = openssl_cipher_iv_length('AES-256-CBC');\n           $iv = openssl_random_pseudo_bytes($iv_size);\n           break;\n    case 2: // mcrypt\n           $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);\n           $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);\n           break;\n    case 1: //internal\n           $iv = just something random.\n\n}\n```\nand prepend it before encrypted data, then get it with substr from encrypted data to decrypt it?\nbut as about internal 1) which length and 2) which generation method do you suggest?\n. @terrafrost there is no getBlockLength() in AES class in v2. There is only one setter method. It seems you forgot to add it for AES.\nI added that method in Rijndael as below and it works fine:\nphp\n/* start my custome */\n    function getBlockLength()\n    {\n        return $this->block_size;\n    }\n/* end my custome */\nBut I am afraid whenever I update it to a new version my custom goes too. It would be good that you add this method. I am going to do a PR with this method.\nSee: https://github.com/phpseclib/phpseclib/pull/911\n. @terrafrost \nNo, not working:\nCall to undefined method phpseclib\\Crypt\\AES::getBlockLength()\nbecause this is only in master branch and not in v2! There are lots of methods in Base.php of master branch. It seems you forgot to release a new version!\nhttps://github.com/phpseclib/phpseclib/blob/2.0.0/phpseclib/Crypt/Base.php#L554\nI removed the changes of Rijndael from PR, and instead added getIVLength() and createIV() in Base.php and I hope yo consider to merge it and release a new version as some other methods of yours are not in v2 neither.\n. @terrafrost Would you like I add two methods for base64 decode/encode IVKey if user needs to transmit it?\n. Or maybe pack/unpack it to have them as hexits instead of base64?\n. That's all are fine but it would be better to release a tag to make getBlockLength() available, otherwise these all solutions you said about IV, are impossible.\n. and I don't think normal users would even know what >> operator is, let alone applying this operator on 3!\nThat said, I don't feel as strongly about  createIV  as I do about  getIVLength .\nThis is why you should consider for createIV() still.\n. So, why don't you consider to release a new version for new methods?\n. But your users may rush to use it! :-)\n. Closed in favor of https://github.com/phpseclib/phpseclib/issues/921\n. Hi,\nAlthough you are correct they are the same on windows but as you said too this is confusing for person who is reading your source. I'd go ahead to pull request to change the priority in opposite.\n. Ok, if you like this, let me know do you want me to change Exception to BadConfigurationException or to create a new Exception class for that line within setKey method.\n. If I understood correctly, condition 1 should be removed and condition 2 should hash the key with the same method to use it as key instead of truncating?\n. ",
    "remotehelp": "Oh... This issue for 0.3.10. After update to 2.0, autoload worked fine as:\n```use phpseclib\\Crypt\\RSA;\n$loader = require( ../vendor/autoload.php');\n$rsa = new RSA;\n\n. ",
    "tribulant": "Without the use of namespaces, you can use autoload and then initialize the class like this:\n$loader = require('vendor/autoload.php');\n$rsa = new phpseclib\\Crypt\\RSA();. ",
    "mlocati": "The code above has been generated with the 2.0.0 tag.\n. My CA is LetsEncrypt Boulder, and it does not accept the CSR generated by phpseclib (but the one generated with OpenSSL works fine)...\nBoulder does not processes my phpseclib CSR, raising the error Error unmarshaling certificate request.\nI found this document with the same issue, and I succeeded in generating a CSR acceptable by Boulder this code:\nphp\n$x509->setExtension('id-ce-keyUsage', array('encipherOnly'));\n. To see this PR in action, simply hit the Download ZIP button at https://github.com/mlocati/phpseclib/tree/export-ignore\n. I've set such configuration for Punic and I haven't had any issue at all... Travis is happy, users are happy and so are developers\n. Great!\n. Any plans for a new release of the 2.x series? I can't wait to simplify some scripts I have that clean up those build/test stuff...\n. ",
    "tyjtyj": "Running command below does not actually fix the null issue.\n$x509->setExtension('id-ce-keyUsage', array('encipherOnly'));\nAnyone can explain what is work around in placed ? \n. Symantec provided this fix on X509.php\nhttps://knowledge.symantec.com/support/ssl-certificates-support/index?page=content&id=SO28905\n```\nfunction saveCSR($csr, $format = FILE_X509_FORMAT_PEM)\n{\n    if (!is_array($csr) || !isset($csr['certificationRequestInfo'])) {\n        return false;\n    }\nswitch (true) {\n    case !($algorithm = $this->_subArray($csr, 'certificationRequestInfo/subjectPKInfo/algorithm/algorithm')):\n    case is_object($csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey']):\n        break;\n    default:\n        switch ($algorithm) {\n            case 'rsaEncryption':\n                $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey']\n                    = base64_encode(\"\\0\" . base64_decode(preg_replace('#-.+-|[\\r\\n]#', '', $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey'])));\n                \\\\===============New added line ==============================\n                $csr['certificationRequestInfo']['subjectPKInfo']['algorithm']['parameters'] = null;\n                $csr['signatureAlgorithm']['parameters'] = null;\n                $csr['certificationRequestInfo']['signature']['parameters'] = null;\n                \\\\===============End of added line =============================\n        }\n}\n\n```\nCan someone push this to branch ?\n. Master\n. Appear to be duplicated from \nhttps://github.com/phpseclib/phpseclib/issues/914\n. ",
    "Sxderp": "@tyjtyj The API for this is really weird (at least I think it is). You HAVE to call $x509->loadCSR() before $x509->setExtension() will work. Else it just returns false as $x509->currentCert is not set.\nTherefore if you're not loading you have to do something like this:\nphp\n$x509 = new X509();\n$x509->setPrivateKey($SOME_PRIV_KEY);\n$x509->setDN(['cn' => 'example.com']);\n$x509->loadCSR($x509->saveCSR($x509->signCSR()));\n$x509->setExtension('id-ce-keyUsage', ['keyEncipherment']);\necho $x509->saveCSR($x509->signCSR('sha256WithRSAEncryption'));\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: CN=example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:d4:c8:d0:a7:47:06:bd:0b:a1:b5:ae:82:68:96:\n                    e9:0f:3a:bc:ef:61:aa:01:50:c7:b0:c2:78:ca:f2:\n                    64:1c:74:5f:28:73:d6:7d:04:29:84:96:d1:b8:92:\n                    90:86:20:62:49:80:51:db:c8:97:b9:39:51:69:d6:\n                    da:8f:b4:f4:44:9e:22:70:4e:f2:37:74:1b:23:ce:\n                    be:1c:32:f6:9d:46:d3:c4:ea:72:74:7f:56:fb:7e:\n                    66:b7:41:8b:8c:4a:79:ca:84:e3:43:de:40:ac:d4:\n                    5d:ef:86:7a:84:2b:af:a9:f4:56:c2:28:0b:23:dd:\n                    81:13:3a:33:93:ec:c3:cd:ab:b3:92:38:d1:66:0a:\n                    7e:17:6a:f9:e1:ae:36:52:4c:f7:ea:aa:f0:1a:82:\n                    d5:4c:38:2a:d1:2d:df:f4:f2:90:bf:27:03:14:33:\n                    4a:f2:e5:4b:b5:a0:22:9f:a7:5b:df:08:1e:db:ea:\n                    ee:c5:c9:23:32:29:07:bc:e2:57:61:20:4a:e9:6f:\n                    bd:65:9b:c5:9c:09:ee:fd:ea:cd:2a:be:57:c2:6b:\n                    3b:96:ba:e4:27:0d:f9:ad:7d:05:8e:59:00:8b:99:\n                    ef:cd:cf:dc:28:54:16:27:37:3e:8d:46:27:54:33:\n                    30:26:36:5f:57:52:66:44:97:29:e6:99:ae:b9:39:\n                    ac:c7:90:a2:b7:e0:ad:6d:9b:05:e6:9c:04:dd:b2:\n                    2d:6b:33:ac:f5:ff:60:11:49:c0:27:61:2e:d3:5d:\n                    be:63:cf:6d:bd:97:cd:70:84:e3:97:c4:1f:54:6a:\n                    06:54:59:cb:a3:5c:77:d9:9d:73:34:3c:ad:6b:50:\n                    2c:68:ba:2a:d1:97:5f:74:0b:f7:b4:f8:18:57:e6:\n                    75:94:b3:2c:a4:9e:37:b9:0d:8e:e3:87:90:4d:35:\n                    23:e1:8d:f3:8f:47:b9:d0:a5:4a:ec:c6:d9:46:1d:\n                    e9:e5:1b:f2:48:55:22:32:94:52:9f:75:a6:6f:a8:\n                    67:96:9e:f4:6e:cb:1c:cc:c6:71:b0:2c:46:c3:19:\n                    72:0d:f0:38:69:6c:35:71:10:28:25:f1:4a:02:95:\n                    46:f8:9d:4b:5b:b6:14:e8:01:86:54:35:4f:d4:02:\n                    fa:44:65:1c:fd:64:fc:12:a2:a6:61:29:0f:66:ad:\n                    62:cd:05:c6:c1:67:d0:5b:e9:ae:22:5a:57:88:48:\n                    3a:a5:55:6d:19:0a:d0:e2:03:44:8c:e0:40:49:c4:\n                    5d:58:b6:dd:22:06:7b:96:61:72:15:28:0f:3b:c7:\n                    77:43:4d:5f:2e:77:16:2f:57:65:6c:b5:6f:ab:d4:\n                    43:21:c4:77:d0:4f:dd:3d:b5:4a:61:96:1c:4b:11:\n                    5e:87:51\n                Exponent: 65537 (0x10001)\n        Attributes:\n        Requested Extensions:\n            X509v3 Key Usage:\n                Encipher Only\n    Signature Algorithm: sha256WithRSAEncryption\n         79:06:95:cc:18:f4:6d:21:07:46:93:5c:93:cb:8a:72:d7:17:\n         75:37:a6:29:9b:60:10:5a:65:84:be:be:76:cc:e0:1b:65:14:\n         fc:46:c1:e7:7c:82:bd:72:4a:7a:a8:e7:13:44:c5:ce:fe:e1:\n         41:2f:fd:0e:4f:a3:d6:f4:0e:f4:27:c2:6d:4f:71:06:75:a5:\n         91:f7:8d:83:72:2a:1b:85:cd:cf:c2:d2:67:56:cc:09:c0:ec:\n         4e:8f:da:f3:e8:17:53:2b:0e:9a:22:d2:3e:46:26:2b:29:d9:\n         ad:73:77:82:f5:7d:29:f3:af:12:e8:8c:b7:97:ad:e7:38:32:\n         4a:86:49:58:bf:c8:12:06:a5:5f:de:02:ed:af:a1:74:69:44:\n         24:40:04:4e:d1:39:15:1a:2c:6c:90:28:27:97:72:3e:b3:1a:\n         fa:e5:19:09:13:15:03:79:bf:a0:04:e1:95:06:3f:a8:05:23:\n         0a:ba:63:3c:b0:0e:cd:39:42:c0:24:3e:23:7c:74:f3:64:76:\n         4b:08:2c:13:43:4e:8e:d7:3a:53:8e:e3:d7:b4:a9:9e:e2:72:\n         50:8d:af:22:36:a4:6d:76:78:79:d3:66:44:19:a5:6c:7d:07:\n         d7:71:be:54:67:a3:01:93:89:b7:c3:7f:43:73:81:3b:b8:6c:\n         d4:8a:e9:5f:f9:af:6b:32:10:d6:49:87:6f:70:0e:49:da:32:\n         23:ac:2b:09:6d:eb:9c:5a:1e:56:a9:36:fa:73:ed:8c:a5:7e:\n         6b:ec:13:7b:ed:1c:a1:8e:19:15:cc:f6:32:6f:4b:97:2a:7e:\n         2f:d3:c6:ec:64:ae:ec:03:e4:ac:ea:e8:20:cd:18:06:26:dd:\n         3f:a0:bc:18:55:35:62:6b:27:3b:a1:aa:e6:76:f6:92:62:f8:\n         8b:6f:e7:db:32:a2:0c:d7:4e:04:91:97:c2:7c:8b:1f:b2:5e:\n         a8:50:70:cd:4f:ba:e6:39:33:8e:a6:60:9f:55:d9:5b:4a:49:\n         00:30:5a:e0:88:59:54:c9:86:5f:18:e8:50:a6:5e:63:0e:ef:\n         b2:d2:c8:b8:2f:36:ad:ce:9b:47:c4:89:29:50:1b:b3:00:20:\n         0d:09:2c:df:b4:f5:ae:fc:c8:9b:ee:53:5d:3a:c9:24:4c:d9:\n         ad:94:85:e6:ca:17:2e:03:c9:fa:69:b9:97:48:c2:0c:0f:89:\n         21:eb:18:70:6e:b6:d9:90:e4:57:f4:ff:5d:dc:71:71:57:19:\n         ea:ba:6a:39:be:9a:23:dc:e1:33:7c:08:d8:b6:b5:68:a0:5a:\n         63:f1:6a:04:ba:90:94:64:68:a9:ca:f6:0a:bc:a1:9b:eb:87:\n         17:aa:ae:f2:19:78:a4:fc\n. You get that error because the constant 'PUBLIC_FORMAT_OPENSSH' does not exist in RSA. link\nAlthough looking at the commit history... It seems to have vanished without a commit?\n\nIt's here: commit 868ced\nhttps://github.com/phpseclib/phpseclib/blob/8686ced6d3ce9f4feaed709c2e59a9790f2a6eec/phpseclib/Crypt/AES.php\nBut not here (next commit to modify file): commit 31c140\nhttps://github.com/phpseclib/phpseclib/blob/31c14063fa82697c53bb531483c6f31925212dd6/phpseclib/Crypt/RSA.php\n... ??\n. Change RSA::PUBLIC_FORMAT_OPENSSH to the string literal 'openssh'\nValid options for this parameter is the name of any file located in the Crypt\\RSA directory.\nhere and here\nIf you ask me that's a weird way to go about setting this up but I suppose it allows people to drop in replacements.\nAt least, that's how it looks with a quick look at the code. If it doesn't work let me know I'll dig deeper.\n. 1)\nLooks like composer pulls from 2.0.\n2)\nMaster and 2.0 are very different..\n3)\nSince the API for this library is weird, (as far as I can tell) doing a createKey() doesn't seem to respect the current state of the RSA object, nor does it load the RSA object's properties. Honestly, it looks like it should really be a static function call, as it currently stands, though that's a discussion for later.\n4)\nIn order for this to work the created key needs to be loaded:\n```\n$rsa = new RSA();\nrsa->loadKey($rsa->createKey()['privatekey']);\nfile_put_contents('/home/frrz/leten/pub', $rsa->getPublicKey(RSA::PUBLIC_FORMAT_OPENSSH));\nfile_put_contents('/home/frrz/leten/priv', $rsa->getPrivateKey());\n... (some other instance or whatever) ...\n$rsa = new RSA();\n$rsa->loadKey(file_get_contents('/home/frrz/leten/priv'));\n```\n. That's weird.\nWhat version are you using? I grabbed from packagist\ncomposer require phpseclib/phpseclib\nCurrent version I have\ncomposer show -- phpseclib/phpseclib\n...\nversions : * 2.0.2\n...\n. Looks like using ord() does not cause the exception. Thanks!\nAs for what I was doing. It's pretty simple. I'll give you the private key I was using (It has not been deployed yet, so I can just make a new one).\n```\n$longKey = '-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAsGMdQnRwN+Y212Dlaf7xM52YPMQ9gyD9lC8eyfopRESWEM1M\nE+URx+aVCZcDsCrFOW6HWmgjZLv1cBlaCN6pebRB80T/O3zakgXTsu83IlayMatS\niOVjaMo2okyE23qjjPQTIpDY3OrATbv5xqqx/EuB6QYRpKLDHBnZcD4h0Lf8BAtt\nflg6LatsOL/AQIDfFQEjn4SsPTJApK4has7Npf2RoTYeffyNpjyLowf/lFhTTzcI\njteMpKp/B/uq2373Fs/hJjDU9dKQj0Bc4/m3ebP/kaA1887ovF6QYIh5LVbONA1w\n1gSRsgYAzNiYGax1ziMZNW9/d1w22q5wCHjtQwdynxW+ZEbEJ1LEsq18ssqgIwtV\numR5MuxY781VVMy5ZjuR+vlhwRLhPC3NXne0JBjX7FZSANsQNdQFxUqwtvgtaRGD\n8bnXMrdPxceL2wll39iB31ZYCPuLSmgKscYwPSGoxHpqu2/6QJnY+b6Dd25WMrTU\nl+btcZRo24QkMp+I/5hjEZlneJ9tMZwevT63RsIEpVieVnoUy0ED6/vxkpjm+SRe\n9RryYKJfJjPiGxOSyAEzbt8sZcq+s6AWESY6Vqd2jsB3+ORoDVBbLQDlFaK4J0M1\ne9X8POBwB9JLzM0pS9wwwl1H33iGAItgTGaSqaOMDJREBPQgtXZVDuCOKZ8CAwEA\nAQKCAgBa1G84zWUMJAyRlGAO2S2z+q9ue0+BuvdZ23nrYFrnwLnWJSHMDOW/HsoY\nih9oFF5DWNtyfrXbJb8Z3rQyZRa4iU58y0bzhzO2hjGhrvWhRSu10BdMT3OFfrvr\nj6PKsbiO2RERd6109Z3ZabcRysyksu1O5cUoFniKe/Uwi442QMgR/SCBM0WiRugP\nwQ5rKPG3i0Kg3l0jlkEbjF/A9IWJuK3JamkBT5BRzlPJvFCsP1+HJzvM8sqF8RZB\nMiOlrBfpM1spo3PGsoumeOpcqzcEAODWSL3/ssi+V6PZUe20n0LIIzO7wdaU6ep3\nkgGhFuIDKKfOkH//IwlMSw9+DWd/hRHQTunkNcG0C2Rk2tOHTj6/q4LnkfOgFBVG\nIeuwEs3CPhLfBTb83FBPy0aX1c979w4RKGjwTGNZB0RMYEm7RdVfHiMdkgJL7y4H\nzGhmKbyNgf74O7hqhiWpHxZV+W8FvPbJaGHSzabv+KQc5sGrPp45BW9V3tntrAwO\n48UL6i4AUdVNKZzgaMFN1Xzaq3CoR5fLg+3IrNx88RqXrvlw4sGgPjNF2eDXr4LS\n/msUcjkZ0co1V+rBDE1lSo6WDJEWGhiIXdHXs5I0KuHCLjZiUToBgDYnuF0eG0N6\ncb2ACfB3wXmN5dkM4tAB+k7i9q2F/Oo4h57fpuGbSfoawYMr4QKCAQEA6Kezhk1K\n/BHNmkCgbSYoK3rWjNF543ahMnvC7sqCSBWSb5Pd0155uP4vw/FQ8l/+zhptF8ge\nWEwP4tkKoaS5Rc4PB2N39fUkgwmmIi2cz5U2rjh20KjF+dTnzH5girylc7i/hOgR\nDDPIRldqamlGJG525FpfC1fsA3sYgJaM7R1BEhcjeB9zj9mAkYLefAoRFKagJpyk\nbgpjcDpKdiZXumHp7BikZiB8aCw4V1eNQqnYq4wlwldK0IomWoE86dfNACZQZj0R\nex/474ntD/uufzG8zXhAVAv7lL6JIxOYhpV+rSusmxD8e0fNolUt5bVy3T08zc4g\n6Wdkswpqpn19qwKCAQEAwhYJr1hv3Jl0t6H08kOH6GCDTlftsVJLRdqrnb9E+0u0\nZMJFI6lEWj37+JKhcAiMh0IXotXL5ULBwvP2AYJ7YP0n8p/yZgjZTlLA/TVSYy6E\nGPzl2Mm0EupOi6caCnia9N/b8TUlhhRY1XZpl0qiZ0vGlqwUhWmsPOWrGvKo8xD4\ngqxtVYvKJ1J3P4GAVQ3aUF3n2y/Pwz11VhX/ROm5q1AWxsRT0qgRUEyziKDdRfWt\nrobLmYofJDYOj8zWNu4ITz1KiEX3qgShT6D/QEDQ0yUtfCTiEaos5xDB6g3c5LgE\ng4OOtWMyRnuqtydbwMrKfnSENVYwN/xD1xB4JFsH3QKCAQAvObNYRKI+7oI0mH+4\nCDHJOaMJbI/4WyE3dSXJgPPXHAHggjxZ5miA45/gf0B2IoQ/Y9/XHvkB5VaoLnRZ\nAW3WPJCSaF92Xq9tpezCLU4SWPCDhtSfYFLndo8i1FhWcRqIlezSVqT3PB+gH6hr\nNzlUtdOOYMXAMLWoszjzCRxMGU8XE/lQLdowTe8qGk19EjILZhNGIy/BYnxy0HJC\n71+JZsyr7wiX7moyXx+EozH6YS2pDMaxXzTBhflpD6jEstha+mwBhM3il0fZn76u\nKuFt0jPH5WvxY4lK1S5TH2wrjXbsQdxEkbsebyHPnMi3QxCw1fhcskW9+w3WxfuG\nFh0HAoIBAQCEc6+2V183qA4sR723G3kDj+HsNDuFWMj/6gRWijKUYIzCeoXemWSJ\nRWXQtJixsVPd9q/Us50LX2yGFCGd1CNJBFsfzCILmhxaxETqSFpqT1NdDjH5qWVX\nx0lFKwute7McTC14RjHOd9JMExxqYEfGwMLNDrCOf5hIkuAbauD7yGggHXYb/GNA\nRJoW39TptqN3Vy6kudNKxYVu82Ia8HqCPAzfJxqhV4tBRqb7JfT8Cna19U27AbTQ\n7IcxgbPrFrTbBtP3ffBPugswIYowmkso3WVWJIGXVpCAPEJp7X4DJMYHzl800HZ9\n/WV6ysRmJL7eX7vd/my3uFO/0IB9JxaNAoIBAQC3qjXHH6PnCGH+DgMWBFv9Qtua\nnQiwWWatfxR0ChJYRCUcQptOUz/qjbi1Q+aXf5e59aOiGj5AXt3iji8WOXu0XU4J\n7RgT+uBGNwt9RubdB8tYbffJ5aruGdqEYLGGD38qOg4idam6fx36U3wGDbHMjjGv\nZE/a8ioDejilrJisRhOY+hL+81qnNn0ErQLDAB9TWYG43ESRQfHXc8Cq/Fd4e0n6\nQrxBLVxBW3TBMknZNS0J/ADtdRGyD1Iwxm8zcXmwhSgsYTtUtnM8E/DBYX+oqtOY\nMkb+am1O0PvOAQkt1H2vzwPVygJk2tHwsaYe4LmVLjRKGQWqodVHVsxvd5mT\n-----END RSA PRIVATE KEY-----'\n$rsa = new RSA();\n$x509 = new X509();\n$rsa->loadKey($longKey);\n$x509->setPrivateKey($rsa);\n$x509->setDN(['cn' => 'ncgamers.org']);\n$x509->saveCSR($x509->signCSR('sha256WithRSAEncryption'), X509::FORMAT_DER);\n// Exception\n```\n. Upping the requirement to 7.0 might be a little harsh. What's the argument for not sticking with at least 5.6.x? \n. I agree with magnus, the functionality should work similar to rm. If null or empty string is passed then an error should occur. \n. Not to be dismissive, but are you sure the bytes were sent correctly, that is, no errors on the sender side? \nDon't know if you'd be able to check that easily. Though, if this is a problem with phpseclib, it's interesting nevertheless. . > DocComment annotations inconsistents with access modifier of php syntax (public / protected / private). Must I wrote some patches to fix these wrong DocComment, or just my lack of understanding about this code base?\nI would recommend not modifying the access inconsistencies. There was a post by @terrafrost in regard to them, but I can't find it. The gist of it is that the methods are often more accessible than necessary in order to facilitate easier debugging / support. If methods that should technically be private are public then they can be called directly and dumped.\n. That looks like a motd + prompt to me.\nI think there's probably some newlines in there.. Go-to isn't dirty, just underappreciated. . Depending on how many commands you need to run, if it's just a script or something, you could use sudo -u user command \nMight want to double check the sudo man page to determine if that's correct. . ",
    "berni69": "Hi again,\nComennting the two lines didn't work. Here's the log connection:\n```\n<-\n00000000  53:53:48:2d:31:2e:39:39:2d:43:6f:6d:77:61:72:65  SSH-1.99-Comware\n00000010  2d:35:2e:32:30:2e:39:39:0a                       -5.20.99.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:29:0d  b_2.0 (openssl).\n00000020  0a                                               .\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0606, network: 0.0283s)\n00000000  42:de:0a:df:a2:19:08:2e:26:24:7b:76:a0:c7:6e:14  B.......&${v..n.\n00000010  00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...Ydiffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68  llman-group14-sh\n00000050  61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61  a1,diffie-hellma\n00000060  6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00:00  n-group1-sha1...\n00000070  0f:73:73:68:2d:64:73:73:2c:73:73:68:2d:72:73:61  .ssh-dss,ssh-rsa\n00000080  00:00:00:1b:61:65:73:31:32:38:2d:63:62:63:2c:33  ....aes128-cbc,3\n00000090  64:65:73:2d:63:62:63:2c:64:65:73:2d:63:62:63:00  des-cbc,des-cbc.\n000000a0  00:00:1b:61:65:73:31:32:38:2d:63:62:63:2c:33:64  ...aes128-cbc,3d\n000000b0  65:73:2d:63:62:63:2c:64:65:73:2d:63:62:63:00:00  es-cbc,des-cbc..\n000000c0  00:2b:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  .+hmac-sha1,hmac\n000000d0  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64  -sha1-96,hmac-md\n000000e0  35:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00  5,hmac-md5-96...\n000000f0  2b:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d  +hmac-sha1,hmac-\n00000100  73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  sha1-96,hmac-md5\n00000110  2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:04  ,hmac-md5-96....\n00000120  6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00:00:00  none....none....\n00000130  00:00:00:00:00:00:00:00:00                       .........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.071, network: 0.0097s)\n00000000  76:5f:4b:ba:97:3e:61:7b:39:34:20:aa:3f:61:ca:31  v_K..>a{94 .?a.1\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:c8:61:65:73:31:32:38:2d  h-dss....aes128-\n000000b0  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n000000c0  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n000000d0  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n000000e0  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n000000f0  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n00000100  63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f  c,aes256-cbc,two\n00000110  66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66  fish128-cbc,twof\n00000120  69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69  ish192-cbc,twofi\n00000130  73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73  sh256-cbc,twofis\n00000140  68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63  h-cbc,blowfish-c\n00000150  74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c  tr,blowfish-cbc,\n00000160  33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62  3des-ctr,3des-cb\n00000170  63:00:00:00:c8:61:65:73:31:32:38:2d:63:74:72:2c  c....aes128-ctr,\n00000180  61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32:35  aes192-ctr,aes25\n00000190  36:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:32:38  6-ctr,twofish128\n000001a0  2d:63:74:72:2c:74:77:6f:66:69:73:68:31:39:32:2d  -ctr,twofish192-\n000001b0  63:74:72:2c:74:77:6f:66:69:73:68:32:35:36:2d:63  ctr,twofish256-c\n000001c0  74:72:2c:61:65:73:31:32:38:2d:63:62:63:2c:61:65  tr,aes128-cbc,ae\n000001d0  73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68  s256-cbc,twofish\n000001e0  31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  128-cbc,twofish1\n000001f0  39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  92-cbc,twofish25\n00000200  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62  6-cbc,twofish-cb\n00000210  63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62  c,blowfish-ctr,b\n00000220  6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73  lowfish-cbc,3des\n00000230  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00  -ctr,3des-cbc...\n00000240  39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68  9hmac-sha2-256,h\n00000250  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n00000260  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39  -sha1,hmac-md5-9\n00000270  36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39:68:6d  6,hmac-md5...9hm\n00000280  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n00000290  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68  -sha1-96,hmac-sh\n000002a0  61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68  a1,hmac-md5-96,h\n000002b0  6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e:65:00  mac-md5....none.\n000002c0  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n000002d0  00:00:00:00                                      ....\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.4191, network: 0s)\n00000000  00:00:00:80:76:42:ff:04:32:f4:11:6a:c0:c5:5a:c2  ....vB..2..j..Z.\n00000010  e7:59:a2:7f:5f:fd:88:89:87:3c:df:34:42:6e:86:ea  .Y.._......4Bn..\n00000020  c3:68:f7:cc:8b:7c:8e:82:f6:a4:e0:7f:25:0c:0a:2d  .h...|......%..-\n00000030  f6:d7:22:42:c5:23:c1:d0:1e:a6:c9:4f:b4:74:24:73  ..\"B.#.....O.t$s\n00000040  ab:c8:9e:47:d9:d1:29:27:93:a3:49:ac:3a:3e:4e:82  ...G..)'..I.:>N.\n00000050  2d:a3:19:99:df:9b:a0:b8:8e:03:0c:8d:6f:a3:d9:98  -...........o...\n00000060  a4:f1:f5:71:53:46:e8:de:5e:a3:8c:b1:36:89:17:e8  ...qSF..^...6...\n00000070  9e:35:0a:ba:05:11:bb:8b:cd:0d:d3:ee:f2:bc:12:d6  .5..............\n00000080  77:cf:76:70                                      w.vp\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.699, network: 0.6989s)\n00000000  00:00:00:97:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:00:81:00:cb:fb:ec:55:e8  ..............U.\n00000020  93:20:0d:38:69:e2:12:12:d1:51:ab:98:cc:60:aa:b5  . .8i....Q.....\n00000030  1c:19:4c:ac:10:67:6e:e1:67:9e:16:91:a1:31:2d:3d  ..L..gn.g....1-=\n00000040  67:ce:ed:cc:c2:ba:54:22:c8:aa:5d:1c:56:e3:9e:a3  g.....T\"..].V...\n00000050  2f:7f:c5:19:4a:10:e5:ac:ce:7d:a6:61:90:55:86:c4  /...J....}.a.U..\n00000060  92:d8:45:fe:5d:3d:b0:c6:ce:63:cc:97:a3:04:d7:ba  ..E.]=...c......\n00000070  b7:33:c6:b6:39:41:0d:2f:01:3a:e6:b9:cb:ac:46:9f  .3..9A./.:....F.\n00000080  48:13:85:db:3d:f9:c4:12:3d:57:e3:04:ec:22:51:11  H...=...=W...\"Q.\n00000090  e9:41:c1:66:06:83:64:1b:b7:68:71:00:00:00:81:00  .A.f..d..hq.....\n000000a0  82:e3:ff:1c:ed:4b:b9:f8:6f:57:ec:d4:17:33:f1:41  .....K..oW...3.A\n000000b0  d1:d2:2c:1e:3d:26:62:08:3b:87:39:6e:87:df:45:e7  ..,.=&b.;.9n..E.\n000000c0  1e:b8:e5:79:70:d9:83:cc:19:20:a2:8f:f7:df:2e:d7  ...yp.... ......\n000000d0  f3:49:88:0c:de:46:f5:ee:0a:06:80:55:fc:5c:52:ef  .I...F.....U.\\R.\n000000e0  ad:39:9f:50:e9:19:0d:a7:13:67:c5:58:c4:6c:8e:1b  .9.P.....g.X.l..\n000000f0  6e:e4:c0:f9:13:3b:f6:69:f6:80:63:b0:4b:60:ec:6e  n....;.i..c.K.n\n00000100  af:45:bf:2f:c9:be:9e:4b:f9:16:d1:77:1e:91:d8:cf  .E./...K...w....\n00000110  96:99:20:db:a9:d5:a8:68:2d:8e:3c:be:b0:c2:d5:00  .. ....h-.......\n00000120  00:00:00:8f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000130  00:00:80:5f:d8:ee:58:2f:e6:10:31:64:93:a4:94:96  .....X/..1d....\n00000140  1b:9c:37:b3:5e:de:99:ad:d1:59:b5:91:8c:7a:cf:3d  ..7.^....Y...z.=\n00000150  d4:35:eb:f2:42:e6:b0:8b:1a:13:4f:aa:d2:25:53:f7  .5..B.....O..%S.\n00000160  a1:1d:f2:08:ce:c8:a5:bc:8b:7b:bd:89:5f:77:da:c7  .........{.._w..\n00000170  bb:40:48:af:a7:db:4b:05:10:49:0b:ad:05:4e:be:e0  .@H...K..I...N..\n00000180  78:36:47:54:6a:c6:79:59:e8:7c:a0:52:f1:ec:ec:c1  x6GTj.yY.|.R....\n00000190  fe:06:fd:cf:4c:69:f6:f7:69:01:c4:ce:5f:1f:20:ae  ....Li..i.... .\n000001a0  43:c3:4f:2e:cf:81:3f:31:71:72:5a:03:00:99:2d:0f  C.O...?1qrZ...-.\n000001b0  e1:ee:51                                         ..Q\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0398, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0023, network: 0.0022s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0237, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\nExcepci\u00f3n capturada: Invalid HMAC\n```\nProvide you an IP address is not possible because it's inside a private network without internet connection.\nIf you want you can say me what do you want test and i run the test and send you the results/logs.\nThe last point is the log from the XAMPP server (PHP 5.6.11):\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  33:2e:37:2e:31:70:32:0a                          3.7.1p2.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 3.2927, network: 0.0855s)\n00000000  ad:26:c7:de:9d:9d:99:8b:46:2e:0e:1d:54:c6:1c:42  .&......F...T..B\n00000010  00:00:00:3d:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...=diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61  llman-group1-sha\n00000050  31:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:0c  1....ssh-rsa....\n00000060  64:65:73:2c:33:64:65:73:2d:63:62:63:00:00:00:0c  des,3des-cbc....\n00000070  64:65:73:2c:33:64:65:73:2d:63:62:63:00:00:00:55  des,3des-cbc...U\n00000080  68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68  hmac-md5,hmac-sh\n00000090  61:31:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36  a1,hmac-ripemd16\n000000a0  30:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  0,hmac-ripemd160\n000000b0  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61  @openssh.com,hma\n000000c0  63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d  c-sha1-96,hmac-m\n000000d0  64:35:2d:39:36:00:00:00:55:68:6d:61:63:2d:6d:64  d5-96...Uhmac-md\n000000e0  35:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61:63  5,hmac-sha1,hmac\n000000f0  2d:72:69:70:65:6d:64:31:36:30:2c:68:6d:61:63:2d  -ripemd160,hmac-\n00000100  72:69:70:65:6d:64:31:36:30:40:6f:70:65:6e:73:73  ripemd160@openss\n00000110  68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d  h.com,hmac-sha1-\n00000120  39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00  96,hmac-md5-96..\n00000130  00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00  ..none....none..\n00000140  00:00:00:00:00:00:00:00:00:00:00                 ...........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0713, network: 0.0001s)\n00000000  bf:af:22:83:43:c2:12:e5:e4:3c:2e:76:32:35:24:31  ..\".C......v25$1\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0819, network: 0s)\n00000000  00:00:00:81:00:95:d9:7a:22:7d:c5:18:ec:2a:43:ce  .......z\"}...*C.\n00000010  26:ec:9e:17:89:77:bf:c4:4d:4d:1d:fe:dd:df:f6:fa  &....w..MM......\n00000020  7c:55:76:24:bb:c4:d7:78:32:37:c6:12:25:d5:a3:d8  |Uv$...x27..%...\n00000030  be:92:4b:73:f4:0b:dc:11:f1:61:f9:c3:24:d4:4b:38  ..Ks.....a..$.K8\n00000040  d9:8d:7c:d6:ff:7e:ca:de:86:8e:75:f7:9b:73:34:c5  ..|..~....u..s4.\n00000050  5a:ab:e9:18:ce:45:75:f6:f2:a0:6c:c2:e2:0e:69:f6  Z....Eu...l...i.\n00000060  a6:c6:5f:38:51:6e:81:0f:3f:a7:29:ec:6a:56:75:8d  .._8Qn..?.).jVu.\n00000070  15:4a:41:2f:cc:7e:6e:45:f2:ba:53:20:82:d3:c2:dc  .JA/.~nE..S ....\n00000080  29:96:6b:13:e3                                   ).k..\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.4691, network: 0.469s)\n00000000  00:00:00:85:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:00:71:00:b6:09:c2:40:9a:7e:5b  ...#...q....@.~[\n00000020  22:7e:0b:6e:7b:af:64:b6:12:5a:4d:81:32:f2:b7:80  \"~.n{.d..ZM.2...\n00000030  26:9b:d1:c0:2f:25:a1:20:2a:63:b0:05:fe:0c:2c:82  &.../%. *c....,.\n00000040  6d:67:ac:1b:d1:e0:79:6d:fc:59:5c:2e:b5:fe:d8:9a  mg....ym.Y.....\n00000050  c0:a3:d1:89:be:94:45:07:39:c1:ae:bf:a9:5c:04:e5  ......E.9......\n00000060  b7:f6:90:bd:cc:c3:ad:02:71:de:71:ff:18:75:19:e6  ........q.q..u..\n00000070  52:e9:d7:d6:d0:0d:a0:61:07:ed:57:43:c5:ec:52:11  R......a..WC..R.\n00000080  22:b7:c0:5d:8e:6f:90:9a:3b:00:00:00:80:0a:e9:47  \"..].o..;......G\n00000090  6f:44:20:1d:80:30:98:9f:56:ab:c7:ab:c7:fa:07:08  oD ..0..V.......\n000000a0  0b:1b:bd:d1:09:98:6b:56:99:f2:bf:5b:b4:df:49:5e  ......kV...[..I^\n000000b0  d0:32:bf:c4:c8:84:f1:23:7b:f8:f8:1d:e3:bb:19:3a  .2.....#{......:\n000000c0  79:d1:5a:ea:91:22:5e:09:f7:64:5c:8c:4a:83:8a:4c  y.Z..\"^..d.J..L\n000000d0  41:31:4e:f3:89:e1:4f:4b:5b:c5:09:78:92:06:21:ec  A1N...OK[..x..!.\n000000e0  79:bd:94:2b:04:b9:64:78:10:6f:b0:6e:ca:5b:f5:92  y..+..dx.o.n.[..\n000000f0  a6:fb:42:11:80:18:f7:9c:ac:1d:c2:0e:8e:75:01:ce  ..B..........u..\n00000100  d8:92:71:f3:6b:dc:fc:42:4f:8c:40:3b:26:00:00:00  ..q.k..BO.@;&...\n00000110  7f:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:70  .....ssh-rsa...p\n00000120  a4:f1:19:d9:91:f0:62:d8:74:61:e2:74:bc:a8:a6:62  ......b.ta.t...b\n00000130  c3:d6:3f:4a:cc:95:f9:d9:e8:77:4b:f1:f0:63:0d:17  ..?J.....wK..c..\n00000140  ad:71:22:7f:ed:d4:cd:42:e1:37:01:20:66:97:b3:ea  .q\"....B.7. f...\n00000150  c5:a0:78:18:12:28:c2:c9:bc:1d:71:1e:b3:22:d1:0f  ..x..(....q..\"..\n00000160  b5:2b:41:5e:94:c9:cd:f3:bf:3d:43:9e:aa:89:a8:d8  .+A^.....=C.....\n00000170  69:b0:19:be:ce:a8:34:00:83:f1:66:a7:5f:7f:21:bd  i.....4...f._.!.\n00000180  c1:6e:de:82:a8:56:39:56:77:ef:38:9d:33:cb:07:6b  .n...V9Vw.8.3..k\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0159, network: 0.0001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0018, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.3149, network: 0.3148s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0002, network: 0.0001s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0634, network: 0.0633s)\n```\n. I send you a login to do the tests through de email. \nThanks you for your help\n. I've updated the library with the latest version and the bug was corrected.\n. upgrade your lib to the lastest avaiable in the respository. Use git clone\nto get it\nCordialment,\nBernat Mut\n2016-03-29 15:52 GMT+02:00 peticel notifications@github.com:\n\nHello,\nCan you please specify the version of the library which worked for you?\nI'm using Centos 6.7, PHP 5.3.3, phpseclib1.0.1 but i still have the same\nerror. I've already try to comment values from $encryption_algorithms /\n$kex_algorithms / $server_host_key_algorithms / $mac_algorithms but no\nsuccess. Unfortunately remote access is not possible at all :(\nThanks.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/916#issuecomment-202902710\n. \n",
    "peticel": "Hello,\nCan you please specify the version of the library which worked for you? I'm using Centos 6.7, PHP 5.3.3, phpseclib1.0.1 but i still have the same error. I've already try to comment values from  $encryption_algorithms /  $kex_algorithms / $server_host_key_algorithms / $mac_algorithms but no success. Unfortunately remote access is not possible at all :(\nThanks.\n. hello,\nThanks for the answer, the server has no access on internet this is way no remote access is possible, also i have to manually download all packages needed.\n@terrafrost: i'll open a new post with this issue and give you there the required information.\nLater edit: new issue submitted: Invalid HMAC #964.\n. The device i'm trying to connect is a Huawei product (it is a router from ATN family). Is not clear for me,  it this the issue appearing because of the problem?\n. Below the output, unfortunately no testing/lab device and no remote access is possible. \nOpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to 10.35.193.161 [10.35.193.161] port 22.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: identity file /root/.ssh/identity type -1\ndebug1: identity file /root/.ssh/identity-cert type -1\ndebug1: identity file /root/.ssh/id_rsa type -1\ndebug1: identity file /root/.ssh/id_rsa-cert type -1\ndebug1: identity file /root/.ssh/id_dsa type -1\ndebug1: identity file /root/.ssh/id_dsa-cert type -1\ndebug1: identity file /root/.ssh/id_ecdsa type -1\ndebug1: identity file /root/.ssh/id_ecdsa-cert type -1\ndebug1: Remote protocol version 2.0, remote software version -\ndebug1: no match: -\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_5.3\ndebug2: fd 3 setting O_NONBLOCK\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-dss,ssh-rsa\ndebug2: kex_parse_kexinit: aes256-cbc,aes128-cbc,3des-cbc,des-cbc\ndebug2: kex_parse_kexinit: aes256-cbc,aes128-cbc,3des-cbc,des-cbc\ndebug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha2-256-96,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha2-256-96,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib\ndebug2: kex_parse_kexinit: none,zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: mac_setup: found hmac-md5\ndebug1: kex: server->client aes128-cbc hmac-md5 none\ndebug2: mac_setup: found hmac-md5\ndebug1: kex: client->server aes128-cbc hmac-md5 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<1024<8192) sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: dh_gen_key: priv key bits set: 132/256\ndebug2: bits set: 519/1024\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\ndebug2: no key of type 0 for host 10.35.193.161\ndebug2: no key of type 2 for host 10.35.193.161\ndebug2: no key of type 3 for host 10.35.193.161\nThe authenticity of host '10.35.193.161 (10.35.193.161)' can't be established.\nRSA key fingerprint is b9:1d:af:67:b5:2b:0e:93:3f:f4:86:e2:0b:58:57:e6.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '10.35.193.161' (RSA) to the list of known hosts.\ndebug2: bits set: 504/1024\ndebug1: ssh_rsa_verify: signature correct\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /root/.ssh/identity ((nil))\ndebug2: key: /root/.ssh/id_rsa ((nil))\ndebug2: key: /root/.ssh/id_dsa ((nil))\ndebug2: key: /root/.ssh/id_ecdsa ((nil))\ndebug1: Authentications that can continue: publickey,keyboard-interactive,password\ndebug1: Next authentication method: publickey\ndebug1: Trying private key: /root/.ssh/identity\ndebug1: Trying private key: /root/.ssh/id_rsa\ndebug1: Trying private key: /root/.ssh/id_dsa\ndebug1: Trying private key: /root/.ssh/id_ecdsa\ndebug2: we did not send a packet, disable method\ndebug1: Next authentication method: keyboard-interactive\ndebug2: userauth_kbdint\ndebug2: we sent a keyboard-interactive packet, wait for reply\ndebug1: Authentications that can continue: publickey,keyboard-interactive,password\ndebug2: we did not send a packet, disable method\ndebug1: Next authentication method: password\nusername@10.35.193.161's password: \ndebug2: we sent a password packet, wait for reply\ndebug1: Authentication succeeded (password).\ndebug1: channel 0: new [client-session]\ndebug2: channel 0: send open\ndebug1: Entering interactive session.\ndebug2: callback start\ndebug2: client_session2_setup: id 0\ndebug2: channel 0: request pty-req confirm 1\ndebug1: Sending environment.\ndebug1: Sending env LANG = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug2: channel 0: request shell confirm 1\ndebug2: fd 3 setting TCP_NODELAY\ndebug2: callback done\ndebug2: channel 0: open confirm rwindow 131072 rmax 32768\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: PTY allocation request accepted on channel 0\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: shell request accepted on channel 0\n[here is the device prompt]\n. i did, no change:\n```\nConnecting to: 10.35.193.161:\nPHP Notice:  Invalid HMAC in /root/work/phpseclib-1.0/Net/SSH2.php on line 3048\nPHP Notice:  Connection closed by server in /root//work/phpseclib-1.0/Net/SSH2.php on line 2015\n<-\n00000000  53:53:48:2d:32:2e:30:2d:2d:0a                    SSH-2.0--.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_1.0 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.106, network: 0.0522s)\n00000000  68:3b:d6:6f:4f:95:be:0e:42:24:88:c4:0e:dd:9a:d9  h;.oO...B$......\n00000010  00:00:00:3d:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...=diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61  llman-group1-sha\n00000050  31:00:00:00:0f:73:73:68:2d:64:73:73:2c:73:73:68  1....ssh-dss,ssh\n00000060  2d:72:73:61:00:00:00:26:61:65:73:32:35:36:2d:63  -rsa...&aes256-c\n00000070  62:63:2c:61:65:73:31:32:38:2d:63:62:63:2c:33:64  bc,aes128-cbc,3d\n00000080  65:73:2d:63:62:63:2c:64:65:73:2d:63:62:63:00:00  es-cbc,des-cbc..\n00000090  00:26:61:65:73:32:35:36:2d:63:62:63:2c:61:65:73  .&aes256-cbc,aes\n000000a0  31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63  128-cbc,3des-cbc\n000000b0  2c:64:65:73:2d:63:62:63:00:00:00:4a:68:6d:61:63  ,des-cbc...Jhmac\n000000c0  2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73  -sha2-256,hmac-s\n000000d0  68:61:32:2d:32:35:36:2d:39:36:2c:68:6d:61:63:2d  ha2-256-96,hmac-\n000000e0  73:68:61:31:2c:68:6d:61:63:2d:73:68:61:31:2d:39  sha1,hmac-sha1-9\n000000f0  36:2c:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d  6,hmac-md5,hmac-\n00000100  6d:64:35:2d:39:36:00:00:00:4a:68:6d:61:63:2d:73  md5-96...Jhmac-s\n00000110  68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61  ha2-256,hmac-sha\n00000120  32:2d:32:35:36:2d:39:36:2c:68:6d:61:63:2d:73:68  2-256-96,hmac-sh\n00000130  61:31:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c  a1,hmac-sha1-96,\n00000140  68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:6d:64  hmac-md5,hmac-md\n00000150  35:2d:39:36:00:00:00:09:6e:6f:6e:65:2c:7a:6c:69  5-96....none,zli\n00000160  62:00:00:00:09:6e:6f:6e:65:2c:7a:6c:69:62:00:00  b....none,zlib..\n00000170  00:00:00:00:00:00:00:00:00:00:00                 ...........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0002, network: 0s)\n00000000  e0:15:cb:2b:1d:6a:07:12:31:66:df:97:0a:ca:50:d2  ...+.j..1f....P.\n00000010  00:00:00:22:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...\"diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:00:00:00:07:73:73:68:2d:72:73  e-sha1....ssh-rs\n00000040  61:00:00:00:0a:61:65:73:31:32:38:2d:63:62:63:00  a....aes128-cbc.\n00000050  00:00:0a:61:65:73:31:32:38:2d:63:62:63:00:00:00  ...aes128-cbc...\n00000060  0d:68:6d:61:63:2d:6d:64:35:2c:6e:6f:6e:65:00:00  .hmac-md5,none..\n00000070  00:0d:68:6d:61:63:2d:6d:64:35:2c:6e:6f:6e:65:00  ..hmac-md5,none.\n00000080  00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00  ...none....none.\n00000090  00:00:00:00:00:00:00:00:00:00:00:00              ............\n-> UNKNOWN (34) (since last: 0.0001, network: 0s)\n00000000  00:00:06:00:00:00:08:00:00:00:10:00              ............\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.1569, network: 0.1568s)\n00000000  00:00:01:01:00:ff:ff:ff:ff:ff:ff:ff:ff:c9:0f:da  ................\n00000010  a2:21:68:c2:34:c4:c6:62:8b:80:dc:1c:d1:29:02:4e  .!h.4..b.....).N\n00000020  08:8a:67:cc:74:02:0b:be:a6:3b:13:9b:22:51:4a:08  ..g.t....;..\"QJ.\n00000030  79:8e:34:04:dd:ef:95:19:b3:cd:3a:43:1b:30:2b:0a  y.4.......:C.0+.\n00000040  6d:f2:5f:14:37:4f:e1:35:6d:6d:51:c2:45:e4:85:b5  m..7O.5mmQ.E...\n00000050  76:62:5e:7e:c6:f4:4c:42:e9:a6:37:ed:6b:0b:ff:5c  vb^~..LB..7.k..\\\n00000060  b6:f4:06:b7:ed:ee:38:6b:fb:5a:89:9f:a5:ae:9f:24  ......8k.Z.....$\n00000070  11:7c:4b:1f:e6:49:28:66:51:ec:e4:5b:3d:c2:00:7c  .|K..I(fQ..[=..|\n00000080  b8:a1:63:bf:05:98:da:48:36:1c:55:d3:9a:69:16:3f  ..c....H6.U..i.?\n00000090  a8:fd:24:cf:5f:83:65:5d:23:dc:a3:ad:96:1c:62:f3  ..$..e]#.....b.\n000000a0  56:20:85:52:bb:9e:d5:29:07:70:96:96:6d:67:0c:35  V .R...).p..mg.5\n000000b0  4e:4a:bc:98:04:f1:74:6c:08:ca:18:21:7c:32:90:5e  NJ....tl...!|2.^\n000000c0  46:2e:36:ce:3b:e3:9e:77:2c:18:0e:86:03:9b:27:83  F.6.;..w,.....'.\n000000d0  a2:ec:07:a2:8f:b5:c5:5d:f0:6f:4c:52:c9:de:2b:cb  .......].oLR..+.\n000000e0  f6:95:58:17:18:39:95:49:7c:ea:95:6a:e5:15:d2:26  ..X..9.I|..j...&\n000000f0  18:98:fa:05:10:15:72:8e:5a:8a:ac:aa:68:ff:ff:ff  ......r.Z...h...\n00000100  ff:ff:ff:ff:ff:00:00:00:01:02                    ..........\n-> UNKNOWN (32) (since last: 0.0048, network: 0s)\n00000000  00:00:01:01:00:db:2e:24:b1:ae:b3:b8:1a:40:85:60  .......$.....@.`\n00000010  e7:a3:15:ee:40:dd:a6:85:84:2f:af:7b:07:23:30:ac  ....@..../.{.#0.\n00000020  db:5d:61:c4:bb:1f:29:ac:ab:81:08:e1:dd:25:97:bf  .]a...)......%..\n00000030  8e:0d:f2:97:fc:6d:86:e8:79:b1:22:6f:3e:b2:6d:b3  .....m..y.\"o>.m.\n00000040  27:f8:5b:58:ae:20:75:54:a9:de:3d:58:40:ea:15:d8  '.[X. uT..=X@...\n00000050  86:be:9e:78:e3:9e:d8:2e:54:fc:7d:33:c8:5a:1e:78  ...x....T.}3.Z.x\n00000060  e9:43:c5:95:fd:e8:22:85:87:94:d5:c2:55:ee:88:3d  .C....\".....U..=\n00000070  ae:79:90:35:74:bd:3b:45:5f:f0:55:f3:db:ae:dc:f8  .y.5t.;E_.U.....\n00000080  8f:33:86:73:71:10:53:61:ec:8a:3d:ef:1f:0b:42:a9  .3.sq.Sa..=...B.\n00000090  39:a2:24:5f:f3:12:18:ba:90:45:3c:72:f0:11:94:56  9.$.....E.r...V\n000000a0  41:f0:d3:61:d9:a9:db:2e:c2:6f:3b:c6:17:75:8e:4b  A..a.....o;..u.K\n000000b0  15:f2:38:67:42:13:2c:e3:65:c9:59:c0:4d:5f:83:d8  ..8gB.,.e.Y.M..\n000000c0  74:47:e3:4a:b9:3e:4a:da:72:21:89:7c:22:67:05:aa  tG.J.>J.r!.|\"g..\n000000d0  e5:d8:c7:be:2e:d6:37:29:77:74:23:8c:10:d4:fa:c6  ......7)wt#.....\n000000e0  76:20:06:6c:f9:46:4f:51:c7:d3:9f:94:e3:fa:ff:e5  v .l.FOQ........\n000000f0  c3:e5:5f:6c:ec:16:9f:7f:3d:c4:14:f5:05:81:f0:b6  .._l....=.......\n00000100  77:04:5c:79:17                                   w.\\y.\n<- UNKNOWN (33) (since last: 1.2998, network: 1.2998s)\n00000000  00:00:00:97:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:00:81:00:c0:cb:8a:5f:99  .............._.\n00000020  ef:9e:96:b0:45:75:fb:16:25:30:91:12:88:ce:f9:da  ....Eu..%0......\n00000030  76:02:68:8f:11:5a:e4:80:82:68:60:33:40:c0:b2:54  v.h..Z...h3@..T\n00000040  8d:b0:99:b1:c8:0d:37:e7:99:e1:b2:fb:18:c8:b1:9b  ......7.........\n00000050  b8:2d:fa:c8:f1:a8:ff:ca:fe:c8:42:7b:7c:69:e3:ed  .-........B{|i..\n00000060  84:c6:c1:95:0f:09:8a:83:60:d8:c4:95:8e:37:26:2a  ............7&\n00000070  af:dd:9b:78:03:40:c4:d4:8e:32:d1:9a:62:c3:9f:c8  ...x.@...2..b...\n00000080  2d:5e:2c:16:98:7c:0c:25:cd:f2:b1:9f:8f:97:da:70  -^,..|.%.......p\n00000090  fc:6b:5c:23:db:fb:c7:a1:e0:c9:7d:00:00:01:01:00  .k#......}.....\n000000a0  c4:68:30:f5:f4:96:81:8f:cb:40:8f:46:a8:3e:96:01  .h0......@.F.>..\n000000b0  8f:f5:e8:34:9a:56:6c:e5:46:8a:15:1d:16:7c:64:ae  ...4.Vl.F....|d.\n000000c0  b2:da:fe:77:a0:66:3a:49:1e:1a:74:a4:7a:07:5c:6c  ...w.f:I..t.z.\\l\n000000d0  6e:21:10:ac:75:67:35:5c:a5:d2:4c:56:dd:d0:b1:74  n!..ug5..LV...t\n000000e0  c9:9b:aa:22:9f:06:3c:24:a8:c1:63:dd:63:5e:33:48  ...\"...$..c.c^3H\n000000f0  38:bf:af:20:d4:f9:c8:31:a0:91:6d:45:16:b5:77:42  8.. ...1..mE..wB\n00000100  b0:6b:34:95:64:30:69:a3:85:d6:6c:e5:4f:24:4b:59  .k4.d0i...l.O$KY\n00000110  4b:a2:92:10:5e:b0:a6:b9:64:8f:01:85:35:04:9e:20  K...^...d...5.. \n00000120  0c:38:b7:d2:95:00:f8:ec:c2:99:bd:c3:32:27:bc:5e  .8..........2'.^\n00000130  1a:ad:bc:23:64:c9:70:f7:cd:81:52:b9:b1:25:0b:af  ...#d.p...R..%..\n00000140  aa:f4:c2:23:7c:cb:03:aa:7b:d8:61:52:f4:3f:4d:51  ...#|...{.aR.?MQ\n00000150  10:d6:a3:bb:a4:65:2d:c4:f6:9b:63:79:c4:c7:ac:68  .....e-...cy...h\n00000160  c8:65:97:34:c1:8d:ce:e4:17:30:76:f4:c4:39:1f:50  .e.4.....0v..9.P\n00000170  ab:1b:fd:f3:bf:0b:59:ab:8e:f0:2d:8c:be:c7:54:43  ......Y...-...TC\n00000180  a5:39:d5:1d:5a:4f:5b:0d:35:e0:b6:91:78:44:61:1b  .9..ZO[.5...xDa.\n00000190  be:34:de:df:16:12:ca:e1:ce:80:24:c5:27:b8:7d:8b  .4........$.'.}.\n000001a0  00:00:00:8f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n000001b0  00:00:80:63:59:52:a0:27:3e:3e:98:3d:35:41:80:05  ...cYR.'>>.=5A..\n000001c0  b1:ed:f8:b6:97:1f:9f:9d:03:c5:93:b1:0e:95:29:2e  ..............).\n000001d0  93:29:1e:53:dd:ac:ee:39:9d:2a:46:93:01:87:3a:13  .).S...9.F...:.\n000001e0  28:b5:75:58:35:f6:8e:19:bb:16:de:49:97:1c:27:fe  (.uX5......I..'.\n000001f0  9f:c5:70:c6:0d:bf:71:c2:89:18:8f:3b:b8:57:c7:a3  ..p...q....;.W..\n00000200  6f:b3:50:22:33:cc:03:92:c1:2e:9a:81:af:02:fa:4d  o.P\"3..........M\n00000210  07:a3:c2:b6:9c:73:b3:d7:ca:ce:77:46:e7:3b:26:f5  .....s....wF.;&.\n00000220  08:cb:c9:a8:2e:85:eb:96:bb:8a:61:77:36:1b:5b:6f  ..........aw6.[o\n00000230  d7:ba:4f                                         ..O\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0012, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0023, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\nLogin Failed\n```\n. @terrafrost  can you please provide me your email address?\nThanks.\n. thanks,i'll try this also to see if it works.\n. I've managed to try it and it works!!!! :) Thanks.\n. ",
    "pkruithof": "Yep, that fixed it, thanks!\nWhen is a patch release coming out?\n. Nice, thanks so much!\n. ",
    "Artfloriani": "The file was around 260kb and only the first 96~108kb would be transferred. I already switched the whole codebase to python (as it is just an automation script) and it worked.\nI tried debugging the SSH2 and SCP class adding flags to check if the size of the file that was being trasnferred was the actual size file, in every case the size was correct. I will try to get some logs on monday.\nCheers. \n. With the flags I could check that the SSH2 library was getting the correct file size information but it was still sending the incomplete file. \n. ",
    "aeltsin": "OS: Ubuntu 14.04. \nphp: 5.5.9\n. I switched to branch \"2.0\" and now it works. \nOn branch master I tried to print $ssh->getLog() before crash and got \n`<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  36:2e:30:70:31:20:44:65:62:69:61:6e:2d:34:2b:64  6.0p1 Debian-4+d\n00000020  65:62:37:75:32:0d:0a                             eb7u2..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n`\n. ",
    "nejtr0n": "I've got the same issue. Here is my log.\n`<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  36:2e:36:2e:31:0d:0a                             6.6.1..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n`\nBut test from cli (phpunit) working good.\nAny ideas, how to fix this bug?\nphpseclib 2.0.1\ndebian 7.9\nPHP 5.4.45-0+deb7u1\n\n. I've recognized, that error occures, when UTF-8 mbstring.internal_encoding is on.\nSwitching to single-byte character set fix it. \nphpini fix\n\n.htaccess fix\nphp_value mbstring.func_overload 0\nphp_value mbstring.internal_encoding windows-1251\n. ",
    "JSomerstone": "What version of phpseclib are you using? And what version of PHP?\nBecause that example you show is not compatible with phpseclib 2.0.\n. ",
    "Stantastic": "PHP 5.6.11 and phpseclib 1.0.1\nI'll try 2.0 where are the docs tho?\n. ",
    "ernie400": "Terrafrost,\nActually, it\u2019s not the same person.  (Sorry, it was just a coincidence that someone else encountered the same issue)\nI did what you suggested, added exit('this far');, and still the same results.  \nI\u2019m actually running on an IBM i (AS/400) platform running ZendServer.\nAny help is greatly appreciated.\nErnie\nFrom: terrafrost [mailto:notifications@github.com] \nSent: Tuesday, February 09, 2016 9:44 AM\nTo: phpseclib/phpseclib\nCc: ernie400\nSubject: Re: [phpseclib] Internal Server Error - on some sites (#943)\n[Mon Feb 08 11:27:29 2016] [error] Can not read response from /usr/local/ZendSvr6/bin/php-cgi.bin (0.0) - [0] There is no error. isn't that helpful. Also, I'm pretty sure the author of the SO post is the same guy who posted this:\n939 https://github.com/phpseclib/phpseclib/issues/939\nAnyway, my response to you would pretty much be the same.\nIt's gonna be impossible to say what the error could be without more info.\nIf you're not seeing any errors in the web server logs try doing this, at the top:\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\nThat said... so you have code to send you an email when $sftp->login() returns false. You're calling a custom function - sendmessage(). So one possibility is that sendmessage() is just not defined. I mean, are you even getting the email? Your post just says you're getting an error 500.\nIf you aren't getting the email one thing you could do is to put exit('this far'); before the sendmessage(). When you run the script, after that modification, do you see \"this far\" output on the screen? You could then move the exit('this far'); to after the sendmessage() call. If you then are seeing an error 500 instead of a \"this far\" error... well that would imply that the problem is with sendmessage(). Either it isn't defined or it has some sort of error within it.\nSo, I guess first things first. Let me know if you're getting the email and if not do the exit('this far'); thing.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/issues/943#issuecomment-181896881 .  https://github.com/notifications/beacon/AO5BxynwkY-jYAnSlBxToXVNaH3TeO3iks5pifLMgaJpZM4HVszo.gif \n. Wow, what will it take to convince you that is not the same person.  \nI\u2019m and RPG programmer on the IBM system, that has jumped into the PHP world and is asking for assistance.\nYou are correct to assume that I did not received the email.\nI made the changes you suggested to Net/SSH2.php.  Ran the script and receive the same error.  The browser never display \u201clogin called\u201d but did get \u201cInternal Server Error\u201d.\nThanks,\nErnie\nFrom: terrafrost [mailto:notifications@github.com] \nSent: Tuesday, February 09, 2016 10:17 AM\nTo: phpseclib/phpseclib\nCc: ernie400\nSubject: Re: [phpseclib] Internal Server Error - on some sites (#943)\nActually, it\u2019s not the same person. (Sorry, it was just a coincidence that someone else encountered the same issue)\nNo, I'm pretty sure it is the same person. #939 https://github.com/phpseclib/phpseclib/issues/939  was posted by a guy with the name of Stantastic and the SO post was posted by a guy with the name of Stantastic as well. I mean, I suppose it could be different people coordinating the efforts, but that'd just be weird.\nAlso, I asked if you were getting the email and I note that you did not actually answer that question. So I guess I'm just going to have to assume that you didn't.\nSo I'll just have you do more of the same exit('this far') in Net/SSH2.php. You'll need to follow the instructions to the letter cause otherwise this exercise will be useless. Like you didn't post your modified code so idk if you added the exit('this far') before or after the sendmessage() call so I'm just having to make the assumption that you did it before, even tho I can't know that for sure.\nSo let's, for now, just verify that login() is being called. So take this function:\nfunction login($username)\n{\n    $args = func_get_args();\n    return call_user_func_array(array(&$this, '_login'), $args);\n}\n...and replace it with this:\nfunction login($username)\n{\nexit('login called');\n        $args = func_get_args();\n        return call_user_func_array(array(&$this, '_login'), $args);\n    }\nThis won't fix the problem but it'll tell me if login() is being called. If it is and \"login called\" is being output then we'll delve into the _login method.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/phpseclib/phpseclib/issues/943#issuecomment-181910734 .  https://github.com/notifications/beacon/AO5Bx5ouEzHhnUfnDRi6uxS9fPR6_2imks5pifp3gaJpZM4HVszo.gif \n. Terrafrost,  \nI can supply an SFTP server for you to try.  It\u2019s the one that\u2019s failing when I try.\nThanks,\nErnie\n. Terrafrost, how can I provide you the credentials to the test SFTP server?\nVia emai?  I believe you have my email address.\nThanks,\nErnie\n. Both scenarios worked.  I saw 'this far x1' on the page when testing before and after $sftp = new Net_SFTP(\"$server\");.\n. terrafrost,\nI tried your suggestions and it failed at exit('this far x2');\n. terrafrost, it failed at exit('this far x4');.  It did not echo 'this far x4' but received \"Internal Server Error\".\n. terrafrost, you are correct.  It did echo 'this far x6'.  I have also attached my phpinfo().\nThanks,\nErnie\nphpinfo.pdf\n. terrafrost, \nI cannot thank you enough for all the help.\nYou have been great working with me trying to resolve this issue.\nI'm happy to inform you that the issue has been resolved.\nI upgraded PHP from Version 5.4.29 to  5.6.15 and the issue corrected itself.\nI cannot believe it was that simple.\nThanks again....\nErnie\n. ",
    "fjqtp": "Thanks. I've read whole thread but can't understand how it can help me. If I disable autoloader, everything other is not loaded, too.\nI call\n$this->sftp = new \\phpseclib\\Net\\SFTP($this->host);\nif i disable autoloader before, I see\nPHP Fatal error:  Class 'phpseclib\\Net\\SFTP' not found\nI solved my problem by creating fake (empty) Sodium class so now I'm just curious why is autoload for Sodium needed at all. Fake class seems to work just fine.\n. Thanks, that fixed the issue!\n. @advicente you need to switch to dev-master branch:\n\"require\": {\n        \"phpseclib/phpseclib\": \"dev-master\"\n    },\n. ",
    "advicente": "I'm unable to find the referenced correction on #947 while using version 2.0.1.\nAnd have the same error: \ninclude(Sodium.php): failed to open stream: No such file or directory\nI'm using Yii and composer autoloader. And haven't installed any PHP extension related to Sodium.\nWhat am I missing?\nThanks.\n. @fjqtp I understand but I am using phpseclib on a production environment. I think that I shoudn't use the \"dev\" version.\nThanks.\n. ",
    "raxbg": "\nSo, basically, you're doing to put() what's already been done to get()\n\nWell, it is the other way around, the modified function is get() with the technique already present in put(). But I guess you meant to say that.\n\nWith that $limit could be deleted as well.\n\n$limit is also used to prevent unnecessary requests if enough for the desired amount of data have already been sent.\nAlso, do you think it is a good idea to add one more argument to the get() function, which will be for a progress callback like in the put() function. It will be very convenient.\nThanks :)\n. Hi, I just wanted to let you know that I made some changes, because I had issues with the previous implementation.\nI changed this section a little\n$possible_packet_sizes = array($this->max_sftp_packet, $size);\n                if ($limit - $read > 0) {\n                    $possible_packet_sizes[] = $limit - $read;\n                }\n                $packet_size = min($possible_packet_sizes);\nbut I fear that by using $packet_size = $length > 0 ? min($this->max_sftp_packet, $length - $read) : $this->max_sftp_packet; $length - $read may become negative if there there is a bug somewhere :D\n. $read > $length is exactly what I was afraid may happen due to a bug in my implementation. I will change it and give it a try today. \nRegarding the $request_id_offset - I am not very familiar with the SSH and SFTP protocols. I scanned the RFC to get some basic idea of how the library worked and what was implemented how, but I did not find information when should different request_ids be sent. Initially I planned to check the request_id on each response and buffer if it is not sequential, but then it turned out the library does not care about the request_id in the responses. I was still not sure if everything will work well if I get rid of the $request_id_offset, so I left it there. I will remove it and test today. However do you think it will be a good idea to set the request_id properly when reading the responses? It looks like this may come very handy in HHVM. I imagine downloading multiple files that way :smile: \n\nWhy not do while (true) {? Then instead of $break_loop = true;, later, you can do break;.\n\nNo particular reason, both approaches look the same to me. If I am to do while (true) { I will have to add an if statement, after the while loop which is reading the responses, in order to check if an error happened. I just decided to go the other way with a control variable.\nI'll do the suggested changes today. Thanks for the help!\n. Hi, I just wanted to let you know that there is a memory leak when transferring thousands of small files. I think I fixed it and I am now testing. If everything goes well I will do 1 more commit later today, or tomorrow.\n. I pushed the changes. The memory leak seems fixed now.\n. It is none of my business to post here, but this is awesome! I hate trolls so much...but I can never express my anger so well :D @terrafrost thank you!\n. Can we vote for this? I want it as well :). ",
    "raggi": "I prepared this PR originally from being told that some users running suhosin were seeing crashes from this. I haven't actually tested myself, I just dove down the source tree and saw that this is a workaround for a forreign bug that was around in 2013, and figured this rearrangement should be better than what's currently present, for most users. I would honestly expect you could nuke the whole set of checks. I doubt they apply to safe-to-run systems anyway.\nIf you are able to articulate clearly exactly how you might like the code to be rearranged, I'll be happy to do so. Thanks for the consideration :)\n. This just hit another customer. Has an alternative solution been proposed?\nIn the case I just debugged, there was a valid header & library mismatch on a perfectly valid configuration that would work just fine.\nThe original goal here seems to be to avoid some specific issues in old versions of XAMPP where this was one possible heuristic to detect those issues. The heuristic has false positives against other systems though. Can we find another heuristic for broken XAMPP?\n. The most recent case was caused by a valid difference between Library and Header in openssl versions in a way that is non-breaking. These values being different does not in and of itself indicate any problem.\n. e.g. http://a-know-phptest.appspot.com/\nOpenSSL Library Version OpenSSL 1.0.2g 1 Mar 2016\nOpenSSL Header Version  OpenSSL 1.0.1s 1 Mar 2016\n. ",
    "oxygen": "One more problem with these catch(\\Exception)s.\nWhere the intention is to catch any error, in PHP 7 you might want catch(\\Throwable $error) and not \\Exception.. ",
    "khelle": "I believe it is much better to catch \\Error then \\Exception instead of \\Throwable then \\Exception, and heres why:\ntry {\n   // code\n} catch (\\Throwable) {\n   // will catch both Error and Exception in PHP7\n   // will catch nothing in PHP5\n} catch (\\Exception) {\n   // will catch Exception in PHP5\n}\ntry {\n   // code\n} catch (\\Error) {\n   // will catch error in PHP7\n} catch (\\Exception) {\n   // will catch Exception in PHP5 and PHP7\n}\nThis means, that the second option with \\Error and \\Exception will create separate catch block for Errors, and leave shared block for Exception regardless on PHP version. It will divide catch blocks per throwable type. It is much more logical than using Throwable then Exception and divide catching mechanism per PHP version.\n. ",
    "farmani": "yes and method name also changed I check both master and 2 branch none of them changed to what I mentioned abow \nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1397\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1539\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1540\n. ",
    "piotrgolawski": "GOOD JOB!\n. ",
    "abhishektaneja": "you can merge the pull request if you find this correct.\nhttps://github.com/phpseclib/phpseclib/pull/955\n. ",
    "ZiperRom1": "Well I was tired last night after a day of coding. I didn't look for the _login function in the parent class because the obsolete use of \"_\" in attributes / methods meant that it is a private one.\nI may hurt your feelings with my last comment but going into your code sources hurt mines.\nWhile the PHP 7 is released, seeing a lib updated few day ago with a PHP 4 style which broke many coding rules standards and design patterns. Like preferring annotate @access in phpDocBlock instead of simply put the visibility behind the method name; 150 + lines method; camel case, anti-pattern, etc.\nSorry for complaining I must be a douchbag, I get out of here.\nHave a nice day.\n. \n. I personally concatenate strings with a dot. Thanks for this awesome example. You should tell to the developers community that they should stop using oriented object programming style.\nYou seem better to write than to code, consider changing your job as a community manager to answer all the troll on Facebook or Twitter.\nHave a good night ;p\n. ",
    "younkim": "@terrafrost, thank you for the reply. I'm going to need to check about if there are partial downloads when they fail. I thought there were, but I'm checking now, and I'm not seeing any partially downloaded files. This seemingly happens randomly as well.\nI'll try out the new settings, but I'll look into updating the library. I don't work on this particular site very often, so I didn't want to change anything too much, if possible.\n. ",
    "codewise-nicolas": "I was pulling at hairs with the same Invalid HMAC error, until I finally stumbled upon this issue https://github.com/phpseclib/phpseclib/issues/938#issuecomment-180788588\nIf you still havent fixed your error, and your on php 5.3+ be sure to apply the fix recommended in that issue. It fixed the problem for me.\nWith php5.3+ being the norm now, and the download links to phpseclib pointing to 1.0.1 its most likely that people will get this error and not realize this patch is needed.\n. I know a new release is ideal, as it fixes many things. but as https://github.com/phpseclib/phpseclib/issues/964#issuecomment-209798460 and my own situation shows, people are having this problem and can be easily resolved.\nThe readme can be updated with a small note quite quickly versus a whole new release, as an interim solution.\n\"PHP5.3+ users please apply patch here...\"\nId make a new release for you, but last time I tried to grab the 1.0 branch it didnt work for me.\n. You are very right it is a slippery slope. Possibly a \"known issues\" section would be handy.\nI wanted to help the many people that had the Invalid HMAC error - I spent a good 3 days researching and testing only to find out it was the php version + library incompatibility (with simple fix)\nI dont recall the issues I had with the 1.0 branch, ill give it a try later on this week when i have some time. Its most likely an issue on my end.\n. Let me know if there is some way I can help.\n. ",
    "cjsfj": "+1\n. ",
    "rvermaat": "Just tried stream_socket_recvfrom ; did not work for me. I'm back with stream_get_contents. This seems to work perfectly for me. \nI understand that using stream_get_contents will break BC when using v1.0.\nI now use the 1.0 branch. When i did some debugging i put some comments line etc in the code. Thats why the line numbers do not match..\nI also tried the 2.0 branch , but that failed on the random_bytes() function (i'm using php 5.4).\nIs the 2.0 branch production ready ?\n. I now use the tagged 2.0.1 branch. Added the https://github.com/paragonie/random_compat to my project and no more fatal error on the random_bytes() function. Still have the original problem and change fread() into stream_get_contents(). And also with 2.0.1 this works for me. \nYou are correct. I don't use composer. I do use the autoloader from composer to load all of my own and vendor classes. I do this because most of the machines I run the applications on do not have access to the internet.\nI hope you reconsider that the 3.0.x release requires composer. A manual install with a correct autoloader (the one composer uses) and a list of dependencies is appreciated .\n. ",
    "ftzdomino": "This was based on an old version.  Please ignore.\n. ",
    "klatoszewski": "Here is: http://pastebin.com/Mr4YS3DP\n. Have you done any investigation about that?\n. ",
    "dnaber-de": "Hi terrafrost, I'm using phpseclib via deployer\\deployer. This is a simplified composer.json that reproduces the problem:\n{\n        \"name\": \"test/test\",\n        \"minimum-stability\": \"dev\",\n        \"require-dev\": {\n                \"deployer/deployer\": \"^3.2\"\n        }\n}\nThis resolves to the latest release of deployer v3.2.1 which depends on phpseclib 2.0: \"phpseclib/phpseclib\": \"~2.0\". The minimum-stability option in my composer.json makes composer look for the 2.0.x-dev branch and points to b3171cc:\n$ composer info | grep phpsec\nphpseclib/phpseclib         2.0.x-dev b3171cc  PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.\nIn this commit, there's no method phpseclib\\Crypt\\RSA::loadKey() but deployer depends on it. \nTo actually trigger an error you'll have to setup a deployment configuration with SSH-Keys like this in the deploy.php file:\nserver( 'testing', 'some-host.tld', 22 )\n    ->user('my_user')\n    ->identityFile( '~/.ssh/id_rsa.pub', '~/.ssh/id_rsa' )\n    ->env( 'deploy_path', '/var/www' )\n    ->env( 'branch', 'master' );\nUpdate\nTo overcome this issue I added the \"prefer-stable\": true option to my composer.json. That makes composer fall back to the 2.0.1 tag of phpseclib.\n. > I don't know what to do :(\nObviously the problem is not that \u00abpopular\u00bb. This issue will be found by people who run into the same problem, and they'll find how to fix that. -dev branches are not suggested to be used in composer anyway. Just keep that issue in mind for the ongoing development. \nThanks for your effort.\n. Looks like the problems solved. Thanks a lot :+1: \n. ",
    "externaltemp": "Hello!\nThank you for answer.\nNo problem, this is my test case:\nphp\nset_include_path( get_include_path() . PATH_SEPARATOR . \"phpseclib\" );\ninclude( \"Crypt/RSA.php\" );\n\n<p$prvKey = \n'-----BEGIN RSA PRIVATE KEY-----\nMIGaAgEAAkEAt5yrcHAAjhglnCEn6yecMWPeUXcMyo0+itXrLlkpcKIIyqPw546b\nGThhlb1ppX1ySX/OUA4jSakHekNP5eWPawIBAAJAW6/aVD05qbsZHMvZuS2Aa5Fp\nNNj0BDlf38hOtkhDzz/hkYb+EBYLLvldhgsD0OvRNy8yhz7EjaUqLCB0juIN4QIB\nAAIBAAIBAAIBAAIBAA==\n-----END RSA PRIVATE KEY-----';\n/\n//This is empty public key for this private key, extracted by openssl\n$pubKey =\n'-----BEGIN PUBLIC KEY-----\nMFowDQYJKoZIhvcNAQEBBQADSQAwRgJBALecq3BwAI4YJZwhJ+snnDFj3lF3DMqN\nPorV6y5ZKXCiCMqj8OeOmxk4YZW9aaV9ckl/zlAOI0mpB3pDT+Xlj2sCAQA=\n-----END PUBLIC KEY-----';\n/\n$rsa = new Crypt_RSA();\n$rsa->setPrivateKeyFormat( CRYPT_RSA_PRIVATE_FORMAT_PKCS1 );\n$rsa->setSignatureMode( CRYPT_RSA_SIGNATURE_PKCS1 );\n$rsa->setHash( \"md5\" );\n$rsa->setMGFHash( \"md5\" );\nif ( !$rsa->loadKey( $prvKey, CRYPT_RSA_PRIVATE_FORMAT_PKCS1 ) ) die( \"Private key error!\" );\n//if ( !$rsa->loadKey( $pubKey, CRYPT_RSA_PUBLIC_FORMAT_PKCS1 ) ) die( \"Public key error!\" );\n$result = $rsa->sign( $msg );\nvar_dump( $result );\n. Python test (it works fine):\nimport rsa\npk = \"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIGaAgEAAkEAt5yrcHAAjhglnCEn6yecMWPeUXcMyo0+itXrLlkpcKIIyqPw546b\nGThhlb1ppX1ySX/OUA4jSakHekNP5eWPawIBAAJAW6/aVD05qbsZHMvZuS2Aa5Fp\nNNj0BDlf38hOtkhDzz/hkYb+EBYLLvldhgsD0OvRNy8yhz7EjaUqLCB0juIN4QIB\nAAIBAAIBAAIBAAIBAA==\n-----END RSA PRIVATE KEY-----\"\"\"\npkl = rsa.PrivateKey.load_pkcs1(keyfile=pk, format='PEM')\ns = \"dffgdfgfdgfdg\"\nsignature = rsa.sign(message=s.encode('utf-8'), priv_key=pkl, hash='MD5')\ntext_file = open(\"signature.txt\", \"wb\")\ntext_file.write( signature )\ntext_file.close()\n. The second one! It works!\nMan, i have no words to thank you!\nYou are genius! Thank you so much!\n. It's possible to simple extends Crypt_RSA by this:\n```\nclass Crypt_RSA_ZC extends Crypt_RSA {\n    function _exponentiate( $x ) {\n        switch (true) {\n            case empty($this->primes):\n            case $this->primes[1]->equals($this->zero):\n            case empty($this->coefficients):\n            case $this->coefficients[2]->equals($this->zero):\n            case empty($this->exponents):\n            case $this->exponents[1]->equals($this->zero):\n        return $x->modPow($this->exponent, $this->modulus);\n    }\n\n    parent::_exponentiate( $x );\n}\n\n}\n```\nAnd then, simply use new Crypt_RSA_ZC() instead new Crypt_RSA()\n. ",
    "jamieburchell": "Hey\nI might not be able to reproduce this now since I rewrote the application in question to avoid pausing with computationally expensive tasks between getting a file and deleting it. I now get all files I need and store them locally for processing and delete them after. If I get an opportunity I'll see if I can set up a simulation to try.\nIt looks to me that the remote server disconnected after the get, while my script was running for 10-15 seconds and by the time it had finished and tried to delete the file the connection was closed. I would have expected the library to handle this and reconnect though, but it was neither able to delete the file or get the next ones.\n. No problem; thanks for looking in to it. It's one of those things that was causing problems in our app but we couldn't work out what was failing but now we know the limitations of the library we can work around these issues. Keeping the connection open for as short a time as possible seems like a more robust and better approach anyway.\n. ",
    "Parcye": "Running PHP from shell, without Apache, it works fine.\n. ",
    "MadTomT": "Thanks for the reply.\nThe pastebin is: http://pastebin.com/0p9JDqTJ\nWill the debug raw SSH Packets contain any personal information about the host or the device being connected to ?\nThanks\n. ",
    "dodgyjammer": "Hi terrafrost,\nHaving a similar issue to AVAW above, have tried commenting the arcfour algorithms but does not change anything.\nMy code:\n```\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX);\n$ssh = new Net_SSH2($endpoint,2222);\n$key = new Crypt_RSA();\n$key->setPassword($pass);\n$key->loadKey(file_get_contents($privKey));\nif (!$ssh->login($user, $key)) \n{\n    echo 'Login Failed';\n}\necho $ssh->exec('pwd');\necho $ssh->getLog();\necho $ssh->getLastError();\n```\nKey is loaded fine but login fails. Logs:\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:24:7b:50:4f:4d:2e:41:52  SSH-2.0-${POM.AR\n00000010  54:49:46:41:43:54:49:44:7d:2d:24:7b:50:4f:4d:2e  TIFACTID}-${POM.\n00000020  56:45:52:53:49:4f:4e:7d:0d:0a                    VERSION}..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_1.0 (openssl,\n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.6306, network: 0.0124s)\n00000000  46:39:38:51:26:50:25:27:2b:9a:47:2d:ca:9f:7f:0f  F98Q&P%'+.G-....\n00000010  00:00:00:b7:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ....diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:32:35:36:2c:64:69:66:66:69:65:2d  e-sha256,diffie-\n00000040  68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d:65:78  hellman-group-ex\n00000050  63:68:61:6e:67:65:2d:73:68:61:31:2c:65:63:64:68  change-sha1,ecdh\n00000060  2d:73:68:61:32:2d:6e:69:73:74:70:32:35:36:2c:65  -sha2-nistp256,e\n00000070  63:64:68:2d:73:68:61:32:2d:6e:69:73:74:70:33:38  cdh-sha2-nistp38\n00000080  34:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73:74  4,ecdh-sha2-nist\n00000090  70:35:32:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  p521,diffie-hell\n000000a0  6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68:61:31  man-group14-sha1\n000000b0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000c0  67:72:6f:75:70:31:2d:73:68:61:31:00:00:00:07:73  group1-sha1....s\n000000d0  73:68:2d:64:73:73:00:00:00:6d:61:65:73:31:32:38  sh-dss...maes128\n000000e0  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n000000f0  61:65:73:32:35:36:2d:63:74:72:2c:61:72:63:66:6f  aes256-ctr,arcfo\n00000100  75:72:31:32:38:2c:61:72:63:66:6f:75:72:32:35:36  ur128,arcfour256\n00000110  2c:61:65:73:31:32:38:2d:63:62:63:2c:33:64:65:73  ,aes128-cbc,3des\n00000120  2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:62  -cbc,blowfish-cb\n00000130  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n00000140  32:35:36:2d:63:62:63:00:00:00:6d:61:65:73:31:32  256-cbc...maes12\n00000150  38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72  8-ctr,aes192-ctr\n00000160  2c:61:65:73:32:35:36:2d:63:74:72:2c:61:72:63:66  ,aes256-ctr,arcf\n00000170  6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:32:35  our128,arcfour25\n00000180  36:2c:61:65:73:31:32:38:2d:63:62:63:2c:33:64:65  6,aes128-cbc,3de\n00000190  73:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63  s-cbc,blowfish-c\n000001a0  62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65  bc,aes192-cbc,ae\n000001b0  73:32:35:36:2d:63:62:63:00:00:00:47:68:6d:61:63  s256-cbc...Ghmac\n000001c0  2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73  -sha2-256,hmac-s\n000001d0  68:61:32:2d:35:31:32:2c:68:6d:61:63:2d:73:68:61  ha2-512,hmac-sha\n000001e0  31:2c:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d  1,hmac-md5,hmac-\n000001f0  73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35  sha1-96,hmac-md5\n00000200  2d:39:36:00:00:00:47:68:6d:61:63:2d:73:68:61:32  -96...Ghmac-sha2\n00000210  2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:32:2d:35  -256,hmac-sha2-5\n00000220  31:32:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  12,hmac-sha1,hma\n00000230  63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68:61:31:2d  c-md5,hmac-sha1-\n00000240  39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:00:00  96,hmac-md5-96..\n00000250  00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00:00  ..none....none..\n00000260  00:00:00:00:00:00:00:00:00:00:00                 ...........\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0006, network: 0s)\n00000000  75:fc:2b:91:46:3c:b7:c0:7d:f1:17:cc:82:9a:a2:02  u.+.F...}.......\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:00:00:00:00:00:00:00:00  h-dss...........\n000000b0  39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68  9hmac-sha2-256,h\n000000c0  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n000000d0  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39  -sha1,hmac-md5-9\n000000e0  36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39:68:6d  6,hmac-md5...9hm\n000000f0  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n00000100  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68  -sha1-96,hmac-sh\n00000110  61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68  a1,hmac-md5-96,h\n00000120  6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e:65:00  mac-md5....none.\n00000130  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n00000140  00:00:00:00                                      ....\n```\nAny ideas?\nThanks\n. ",
    "narem81": "@terrafrost \nI'm using phpseclib version 2.0.2. \nI updated to this version since I had the same problem with version 2.0.0. \nI used logging and did var_dump($sftp->getLog()). \nThis is what I got:\n`string(40280) \"<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  36:2e:36:2e:31:70:31:20:55:62:75:6e:74:75:2d:32  6.6.1p1 Ubuntu-2\n00000020  75:62:75:6e:74:75:32:0d:0a                       ubuntu2..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0198, network\"...\n`\nthis is the end of the stacktrace:\nPHP   8. phpseclib\\Net\\SFTP->stat() /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:2259\nPHP   9. phpseclib\\Net\\SFTP->_stat() /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:1160\nPHP  10. user_error() /home/cfortunato/PhpstormProjects/nosp_automaker/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:1280\nThank you very much for your help :)\n. Ok, this is the link : \nhttp://pastebin.com/4PCcsABG\nI'm also uploading it as a file:\nsftp.txt\nThanks again!\n. If this could be helpful, the xen-create-image command is a wrapper of three commands, executed sequentially. What I noticed is that SFTP::exec stops its execution after the first built-in command aproximately.\n. I need to deploy the code on a production environment, therefore I'm using 2.0.0 version now as it's the last stable version (the 2.0.2 threw 70ish errors when I committed the project). \nIs that version ok for collecting real time logging?\n. Ok, this is the new log produced by SFTP  class, version 2.0.0, comprehensive of Exception messages.\nsftplog.txt\nThis is the piece of code running the command:\n```\nif ($sftp->file_exists(\"/etc/xen-tools/xen-tools.conf\"))\n            $sftp->exec(\"mv /etc/xen-tools/xen-tools.conf /etc/xen-tools/xen-tools-base.conf\");\n        $sftp->put(\"/etc/xen-tools/xen-tools.conf\", $xt_conf);\n        Logger::infolog(\"Xen: Creazione file di configurazione di xen tools completata\");\n        Logger::infolog(\"Xen-tools: Creazione macchina virtuale \".$vmname);\n        $command = \"xen-create-image --hostname=\".$vmname.\" --ip=\".$preconf[\"address\"];\n        $command .= \" --genpass=0 --password=\".$vmcommon[\"rootpwd\"]. \" --noverbose\";\n        $output = \"\";\n        $count = 0;\n        //$sftp->enablePTY();\n        //$sftp->write($command.\"\\n\");\n        $output = $sftp->exec($command);\n        /do\n        {\n            $output .= $sftp->read();\n            $count++;\n        }while(strpos($output,\"Summary\")===false && $count<100);/\n    while(!$sftp->file_exists(\"/etc/xen/vms/\" . $vmname . \".cfg\") && $count < 40) {\n        if($count%2 === 0) Logger::infolog(\"Attendo la creazione del file...Tempo trascorso: \".$count.\" minuti\");\n        $count += 1;\n        sleep(60);\n    }\n\n    echo \"\\n\\n$output\\n\\n\";`\n\n```\nThank you again for your help!\n. Good morning,\nin order to let you focus on the code, I made a simplified script (keeping only the essential code) and I ran it with your indications. \nThis is the code:\n```\n<?php\ninclude('../vendor/autoload.php');\nuse phpseclib\\Net\\SFTP;\ndefine('NET_SSH2_LOGGING', 3);\n$sftp = new SFTP('192.168.25.171');\nexec(\"ssh-keygen -R 192.168.25.171\");\nif (!$sftp->login('root', 'nvcm-lab')) {\nexit('Login Failed');\n}\nif (!$sftp->file_exists(\"/etc/xen/vms\")) $sftp->exec(\"mkdir /etc/xen/vms\");\nif (!$sftp->file_exists(\"/etc/xen/auto\")) $sftp->exec(\"mkdir /etc/xen/auto\");\n$xt_conf = \"\";\n$xt_conf .= \"lvm = vg-systems\";\n$xt_conf .= \"\\ninstall-method = debootstrap\";\n$xt_conf .= \"\\nsize = 10G\";\n$xt_conf .= \"\\nmemory = 1G\";\n$xt_conf .= \"\\nnoswap = 1\";\n$xt_conf .= \"\\nfs = ext4\";\n$xt_conf .= \"\\ndist = xt-guess-suite-and-mirror --suite\";\n$xt_conf .= \"\\nimage = sparse\";\n$xt_conf .= \"\\nbridge = bridge1\";\n$xt_conf .= \"\\ngateway = 192.168.25.254\";\n$xt_conf .= \"\\nnetmask = 255.255.255.0\";\n$xt_conf .= \"\\nnameserver = 192.168.25.253\";\n$xt_conf .= \"\\nkernel = /boot/vmlinuz-uname -r\";\n$xt_conf .= \"\\ninitrd = /boot/initrd.img-uname -r\";\n$xt_conf .= \"\\npygrub = 1\";\n$xt_conf .= \"\\narch = amd64\";\n$xt_conf .= \"\\nmirror = xt-guess-suite-and-mirror --mirror\";\n$xt_conf .= \"\\next4_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\next3_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\next2_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\nxfs_options      = defaults\";\n$xt_conf .= \"\\nreiserfs_options = defaults\";\n$xt_conf .= \"\\nbtrfs_options    = defaults\";\n$xt_conf .= \"\\noutput    = /etc/xen/vms\";\nif ($sftp->file_exists(\"/etc/xen-tools/xen-tools.conf\"))\n    $sftp->exec(\"mv /etc/xen-tools/xen-tools.conf /etc/xen-tools/xen-tools-base.conf\");\n$sftp->put(\"/etc/xen-tools/xen-tools.conf\", $xt_conf);\n$command = \"xen-create-image --hostname=trialMac --ip=192.168.25.177\";\n$command .= \" --genpass=0 --password=trialpwd --noverbose\";\n$output = \"\";\n$count = 0;\n$output = $sftp->exec($command);\nwhile(!$sftp->file_exists(\"/etc/xen/vms/trialMac.cfg\")) {\n    if($count%2 === 0) echo(\"Attendo la creazione del file...Tempo trascorso: \".$count.\" minuti\\n\");\n    $count += 1;\n    sleep(60);\n}\necho \"\\n\\n$output\\n\\n\";\n$sftplog = $sftp->getLog();\nfile_put_contents(\"sftplog.txt\",$sftplog);\n$sftp->disconnect();\n?>\n```\nAnd here is the generated log:\nsftplog_new.txt\nHoping this could make things clear, thanks again.\n. As you may notice from the code above, I put a while loop after the exec method call, just because that method returns too early, before the completion of the xen-create-image command, which seems odd to me.\n. Hi, I added the echo statement you wrote and here is the generated log:\nsftplog_20160623.txt\nLooking at the log, as far as I can see, no echo message has been written.\nThe code I ran is always the same as that I posted yesterday.\n. Sorry, I put the statements before only one user_error, just inside the get method... my fault. Have I to add them before all user_error calls or just inside one specific method ? I guess inside the _stat method.\n. Ok, I've done the test again.\nThis is the log: \nsftplog_20160623_new.txt\nSo don't consider the previous log , named sftplog_20160623.txt, but instead consider this new one.\nThanks\n. Hello,\n@terrafrost : I did what you asked and I ran the code (always the same code as that I posted 5 days ago). \nThis is the log produced:\nsftplog_20160627.txt\nI really appreciate your support. \n. Good morning,\nI don't know the reason of this odd behaviour. I guess that, as the SSH2::exec() method returns prematurely (before the xen-create-image command ends its execution) to the caller function code, the execution remains in the while loop until the cfg file is created. From my understanding, when the xen-create-image command finally creates that file and stops its execution, then that message shows up.\nAnyway I didn't make any change to the code except what you asked me to do. From these latest changes you asked I ran the code and this is the produced log:\nsftplog_20160628.txt\nJust to remember, this is the code I run:\n```\n<?php\ninclude('../vendor/autoload.php');\nuse phpseclib\\Net\\SFTP;\ndefine('NET_SSH2_LOGGING', 3);\n$sftp = new SFTP('192.168.25.171');\nexec(\"ssh-keygen -R 192.168.25.171\");\nif (!$sftp->login('root', 'nvcm-lab')) {\nexit('Login Failed');\n}\nif (!$sftp->file_exists(\"/etc/xen/vms\")) $sftp->exec(\"mkdir /etc/xen/vms\");\nif (!$sftp->file_exists(\"/etc/xen/auto\")) $sftp->exec(\"mkdir /etc/xen/auto\");\n$xt_conf = \"\";\n$xt_conf .= \"lvm = vg-systems\";\n$xt_conf .= \"\\ninstall-method = debootstrap\";\n$xt_conf .= \"\\nsize = 10G\";\n$xt_conf .= \"\\nmemory = 1G\";\n$xt_conf .= \"\\nnoswap = 1\";\n$xt_conf .= \"\\nfs = ext4\";\n$xt_conf .= \"\\ndist = xt-guess-suite-and-mirror --suite\";\n$xt_conf .= \"\\nimage = sparse\";\n$xt_conf .= \"\\nbridge = bridge1\";\n$xt_conf .= \"\\ngateway = 192.168.25.254\";\n$xt_conf .= \"\\nnetmask = 255.255.255.0\";\n$xt_conf .= \"\\nnameserver = 192.168.25.253\";\n$xt_conf .= \"\\nkernel = /boot/vmlinuz-uname -r\";\n$xt_conf .= \"\\ninitrd = /boot/initrd.img-uname -r\";\n$xt_conf .= \"\\npygrub = 1\";\n$xt_conf .= \"\\narch = amd64\";\n$xt_conf .= \"\\nmirror = xt-guess-suite-and-mirror --mirror\";\n$xt_conf .= \"\\next4_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\next3_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\next2_options     = noatime,nodiratime,errors=remount-ro\";\n$xt_conf .= \"\\nxfs_options      = defaults\";\n$xt_conf .= \"\\nreiserfs_options = defaults\";\n$xt_conf .= \"\\nbtrfs_options    = defaults\";\n$xt_conf .= \"\\noutput    = /etc/xen/vms\";\nif ($sftp->file_exists(\"/etc/xen-tools/xen-tools.conf\"))\n    $sftp->exec(\"mv /etc/xen-tools/xen-tools.conf /etc/xen-tools/xen-tools-base.conf\");\n$sftp->put(\"/etc/xen-tools/xen-tools.conf\", $xt_conf);\n$command = \"xen-create-image --hostname=trialMac --ip=192.168.25.177\";\n$command .= \" --genpass=0 --password=trialpwd --noverbose\";\n$output = \"\";\n$count = 0;\n$output = $sftp->exec($command);\nwhile(!$sftp->file_exists(\"/etc/xen/vms/trialMac.cfg\")) {\n    if($count%2 === 0) echo(\"Attendo la creazione del file...Tempo trascorso: \".$count.\" minuti\\n\");\n    $count += 1;\n    sleep(60);\n}\n//echo \"\\n\\n$output\\n\\n\";\n//$sftplog = $sftp->getLog();\n//file_put_contents(\"sftplog.txt\",$sftplog);\n$sftp->disconnect();\n?>\n```\n. Thanks for the fix!\nIt removed the PHP Notice: \"Expected SSH_FXP_ATTRS or SSH_FXP_STATUS\" and that's good.\nHowever it didn't prevent the SSH2::exec method to return prematurely. \nOne quick note to hopefully clarify a little further based on the excerpt below.\n```\n1. $command = \"xen-create-image --hostname=trialMac --ip=192.168.25.177\";\n2. $command .= \" --genpass=0 --password=trialpwd --noverbose\";\n3. $output = $sftp->exec($command);\n4. while(!$sftp->file_exists(\"/etc/xen/vms/trialMac.cfg\")) {\n        if($count%2 === 0) echo(\"Attendo la creazione del file...Tempo trascorso: \".$count.\" minuti\\n\");\n        $count += 1;\n        sleep(60);\n   }\n```\n- The expected behaviour is that a call is made to the xen-create-image command, using the SSH2::exec method (line 1-3). \n  This method call should return ONLY (correct me if I'm wrong) after the xen-create-image command is completed, which means that a new virtual machine is ready to be used, and as a consequence, an associated VM configuration file is made available (trialMac.cfg). \n  If everything worked fine, there would be no need for the while loop beginning at line 4.\n- The actual behaviour is that the call to SSH2::exec method, (which launches the xen-create-image command) returns much earlier.. before the virtual machine is created.\nIn other words, the SSH2::exec method is not able to detect the real completion of the xen-create- image command. \nTo overcome this unexpected behaviour, I'm using that while loop beginning at line 4.\nIs there any chance your code could work in the expected behaviour I described above? \nAs usual, if you need any further detail, please let me know.\nThanks again for your support\n. I can't believe that :D \nIt worked of course! Just FYI I don't seem to have found references about the 10 seconds timeout default in the library documentation, but maybe I missed that. \nAnyway, thank you very much for your help, it has been very appreciated, now everything works as expected!\nKeep up with the good work.\n. ",
    "andrewbelcher": "This if fixed by #1001 \n. ",
    "lbajsarowicz": "I have also had this kind of problem. The solution was pretty simple - you have to put command in the brackets.\n$ssh->exec('(composer install) && echo \"Done!\"');\nSome extra information can be found at GNU page.\n. ",
    "hekep": "Hello,\nI do\n$ssh->exec(' cd /home/user && scp -C  remoteuser@remote_site.com:/home/user/package.tgz  package.tgz  && echo \"__DONE__\"    ');\nThe SCP process can last  from 30 seconds  up to 5 minutes , there is no way predict that. \nI need to read DONE from the response.  How do I do that?\nCurrent version 2.0.6 - 2017-06-05\n. Got it fixed with $ssh->setTimeout(10000000);. I still get this error message.\nMy workaround was to create new SSH2 instance (and ->login() and ->disconnect() )  for each  command execution.\n. ",
    "dphoyes": "Looks good to me. Cheers!\n. ",
    "Jack-Pott": "Thank you for your help. Without knowing exactly what data is inside the certificate object you pass into the signcertificate function it looks like you selfsign the certificate you pass in.\n// Grab our CA certificate record\n  $cacertificate = Certificate::find($this->certificate_id);\nDoes this returns your \"ca certificate\"  or is the ID set to the requesting certificate? If it is the requesting id the certificate will be selfsigned.\n. Sorry. I used sslhopper decoder for testing. Decoder output ist totaly messing up. The certificate has a valid issuer set.\n. ",
    "liucf": "@lukepolo have you solve this issue. i got exactly same as yours.. please help.. thanks...\n. ",
    "themazim": "run into this too, any advice?\n. ",
    "thadin": "I am getting the \"Unable to open channel in ./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 3273\" message as well when using the exec method.\nBelow is a code snippet, depending on the $useExec boolean, the code either works or it doesn't. I'm hoping to get the exec version working because the code is cleaner and I'm going to have to enter more commands in the future.\nI'm connecting with a Cisco router, so it might not follow the latest SSH spec.\n``` php\n<?php\ndefine('NET_SSH2_LOGGING', true);\n$useExec = true;\n$ip   = long2ip($input['ip']);\n$port = $input['port'] ?: 22;\n$ssh  = new SSH2($ip, $port);\n$config = null;\nif (!$ssh->login($input['user'], $input['pass'])) {\n    user_error('Unable to login to '.$ip);\n} else {\n    $prompt = trim($ssh->read());\n$ssh->write(\"terminal length 0\\n\");\n$ssh->read($prompt);\n\nif ($useExec) {\n    $config = $ssh->exec('show running-config | begin !');\n} else {\n    $configCmd = \"show running-config | begin !\\n\";\n    $ssh->write($configCmd);\n\n    $config = $ssh->read($prompt);\n    $config = substr($config, strlen($configCmd), -strlen($prompt));\n    $config = trim($config);\n}\n\nif (!$config || substr($config, 0, 1) == '^') {\n    echo implode(\"\\n\", $ssh->getLog());\n    user_error('Unable to retrieve config for '.$ip);\n    $config = null;\n}\n\n}\n```\nLog below:\n\n<-\n->\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0327, network: 0.0107s)\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0109, network: 0.0001s)\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0139, network: 0s)\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.274, network: 0.2739s)\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0056, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0008, network: 0s)\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.2172, network: 0.2171s)\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_USERAUTH_BANNER (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0112, network: 0.0112s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.011, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0106, network: 0.0106s)\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0109, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0001s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 9.9883, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0108, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0006, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_FAILURE (since last: 0.0103, network: 0s)\n-> NET_SSH2_MSG_DISCONNECT (since last: 0.0003, network: 0s)\n. I need an interactive session, so maybe the dedicated channels that come with exec may not be for me.\n\nI'm currently using a custom class which extends the SSH2 class and handles the write/read commands for me.\nBelow is a log with define('NET_SSH2_LOGGING', 2); in case you want to debug it for other users.\ndetailed-log.txt\n. ",
    "Justas-S": "I have the same issue.\nCode \n```$this->ssh = new SSH2($server->ip);\n$success = $this->ssh->login('root', $server->password); \n$this->ssh->enablePTY();\n$distro = $this->getDistro();\n$os = $this->getOs();\nprivate function getDistro()\n{\n    $output = trim($this->ssh->exec(\"cat /etc/*-release | grep ^NAME=\"));\n    return ($index = strpos($output, \"=\")) !== false ? trim(substr($output, $index+2, -1)) : $output;\n}\nprivate function getOs() \n{\n    return trim($this->ssh->exec(\"uname -o\"));\n}\n```\nPartial stack trace:\n```\n0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(1024, 'Unable to open ...', '/mnt/c/GitHub/s...', 3273, Array)\n1 /mnt/c/GitHub/server-host/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(3273): user_error('Unable to open ...')\n2 /mnt/c/GitHub/server-host/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(2421): phpseclib\\Net\\SSH2->_get_channel_packet(0)\n3 /mnt/c/GitHub/server-host/app/Listeners/ServerSetUp.php(86): phpseclib\\Net\\SSH2->exec('uname -o')\n4 /mnt/c/GitHub/server-host/app/Listeners/ServerSetUp.php(46): App\\Listeners\\ServerSetUp->getOs()\n```\nDetailed log: http://pastebin.com/2EGWmCL2\nPHP version\nPHP 7.0.13-1+deb.sury.org~trusty+1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.13-1+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies\n. ",
    "chrisnew": "Any plans when this fix will be released?. ",
    "CaptainConner": "Eventhough I have installed the latest patch, which should fix this, it appears to not be working as you can see here: https://gyazo.com/430818f39ac0bfab69b44904b6b294da\nI am running multiple exec's, and the connections appear to be staying open as long as my script is running.. My code basically uses the exec() function every 3 seconds for about a minute if a file on the server has changed. I am having the exact same issue, most of the time the script works, but sometimes it will come up with the \"Unable to open channel\" error.\nThe interface shown is the Windows Bitvise SSH Server connection logger - it shows open connections. You said that after an exec is issued, it should now close the open connection, it does not appear to be doing so, as the connections only disappear when the script finishes executing.. I have downloaded the latest patch which should close channels after finishing an exec, however it appears to not be working as you can see here: https://gyazo.com/430818f39ac0bfab69b44904b6b294da. ",
    "C1562956": "Hi there. Sorry for not being clear, I want to use phpseclib in my project. I entered php composer.phar install --no-dev on the command line and it created a folder called vendor with by the looks of it all the required files in it (autoload.php etc). My files which require to use the library are in the htdocs directory along with the phpseclib folder also... when I run my file which tries to use the library I get following errors:\n\nHere's my code:\n\nCan I just check with you... I'd also need to install the dom and simplexml extensions too? Could you advise me what these commands would be? I'm quite unfamiliar with Linux commands :(\nCan I ask you also... I want to use this library in a plugin I'm developing.. would the library be portable? i.e. the end-user wouldn't have to install phpseclib dependencies when they will install my plugin?\n. Ah waw that's certainly a good way to condense the code.. This is what I have at the moment:\n\nDoes that seem correct to you? It works anyway..well kind of... The setPublicKeyFormat call doesn't work.. I get this error when running the code when trying to set the public key format:\n\n. Ah that's weird... what do you recommend I do?\n. Thanks for that but I changed it to openssh and had no errors appearing but the public key format was unchanged. Here's my updated code:\n\n. So what I have at the moment is creating a keypair and storing them... the loading I have takes place in a different file which is exactly as you showed. I changed my code to what you have as so:\n\nBut when I run it I get:\n\nI really appreciate your time in helping me\n. Problem solved! You were right @terrafrost , I was using the master branch -_- I downloaded branch 2.0 and it all worked perfectly :-) thanks to you also @Sxderp for all your help.\n. Can I ask, is this library easily portable? Can I copy it over to a new computer and expect it to work? If not is it possible to do so?\n. So once I do the installation into the directory I need, I can then copy the files over to a new computer and it should all work given PHP is installed?\n. Hi, thanks for your help. No I can't login with any other client too :/ (I'm using the same code on each client). Ok so I've put those two statements into my code and here's my output. I'm using the file_get_contents method too when reading the private key.\n. Oh gosh sorry I'm not sure which version, how could I find this out? \nHere's the log output enclosed with the <pre> tag. I hope I've done it correctly? \n. Yeah sure, here's the contents of the authorized_keys file:\n\ufeffssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDfWw4oBfiVEdJ5PllZP8Mq8vquILZj7J96qkuJ59KLCIFZRfHnVBDDlTusdZDkq5UJdJG5c7V/YQgqRHyjP7Q9xVYbGQLOZiIZrB7M5AIC0xFMnWEJGMtP62+SWtJkGDGdI1kf1oWnu7v6asaLrCmnTb8uyTJsNGlDiABc4i2UKw== phpseclib-generated-key\nSorry I wanted to upload the file itself but the file type isn't supported apparently :/\n. ",
    "mrpeski": "Thanks @terrafrost its resolved. I assumed packagist was the culprit.\n. ",
    "LukasReschke": "@terrafrost Any chance to release new tags and versions on packagist with this patch included? This is blocking us from making PHP 7.1 a mandatory test execution in our CI.\n. Awesome. Thanks a lot, @terrafrost! :rocket:\n. @terrafrost Did you have any chance already for this? :-)\n. No worries. Thanks a lot for all your awesome work! :rocket:\n. ",
    "froemken": "Hello @lukepolo I currently have the same problem. Did you found a solution for it?\n. Seems to be a more random problem.\n- Restarting the Webserver helps sometimes\n- I work with multiple parallel terminals. Sometimes it helps to close one or two of these windows. Yes...we have a limit of multiple SSH connections configured at server. Can phpseclib handle such limitation with correct error messages?\n- We work with an API which creates temporary parallel working passwords for ssh users. Maybe we are \"sometimes\" too fast with login. After creating the parallel password I currently wait 1 second (sleep(1)) before login().\nLast solution seems to work best.\n. Hello TerraFrost, I have send you 2 ServerLogs via Mail just 2 days ago. It was a @php.net E-Mail-Address with a Reference to this ticket. If you can not find that mail inform me if it is save to post the logs, because of the password. Is it logged, too?\n. The maintainer of our SSH-Server has some curious LDAP Integrations. They have solved a lot of bugs in the last months and yes: It was not a bug of phpseclib. You can close this ticket now. Thank you for your help\n. ",
    "salahy2": "hello, I am getting the same error, it was working perfectly now it stopped, how did you solve it ? \ni am losing my mind :(. hello, I am getting the same error, how did you solve it ??. ",
    "crystalik": "This happens if the connection is terminated. Just do 'service networking restart' while any remote operation (read or write) to repeat the problem. I had it recently.. ",
    "danog": "Ok, I'm gonna undo the styleci fixes and open a separate pr for them.\n. I've squashed the commits.\nI think that the loopforeach function is useful if you want to execute some commands n times without necessarily having to use the slow (compared to php's native ++ operator) add function. \n. Done!. Yes, but I wasn't sure whether it was a good idea to create a separate function just to avoid duplicating a few lines of code. \nShould I do that?. Also, what about the problems in the native module?. bump\n. ",
    "Eun": "Somehow this problem solved itself.\nI don't know what happend but now the above code works.\nThe server is not under my control, so might be that they changed something.\n(Yes, I was able to login with other ssh clients)\nAnyway, thanks for the quick response and help. :+1: \n. ",
    "Thorbijoern": "from http://php.net/manual/en/function.microtime.php:\n\nBy default, microtime() returns a string in the form \"msec sec\", where sec is the number of seconds since the Unix epoch (0:00:00 January 1,1970 GMT), and msec measures microseconds that have elapsed since sec and is also expressed in seconds.\nIf get_as_float is set to TRUE, then microtime() returns a float, which represents the current time in seconds since the Unix epoch accurate to the nearest microsecond. \n\nmicrotime or microtime(false) returns a string, but microtime(true) returns a float in seconds with the microseconds as decimals i got that wrong, sorry.\nYour solution of the 1.99 problem is good to.\nOn line 1097 in SSH2.php the version 1.99 is also acceptet.\nThanks\n. ",
    "ethanclevenger91": "Thanks for the tip. So now I've got:\n$agent = new Agent();\n$ssh = new SSH2('192.168.7.7');\n        if (!$ssh->login('vagrant', $agent)) {\n            var_dump($ssh->getErrors());\n            exit('Login failed');\n        }\nThis throws a notice SSH_AUTH_SOCK not found in ...\\vendor\\phpseclib\\phpseclib\\phpseclib\\System\\SSH\\Agent.php on line 130 and then still fails.\n. Could be relevant: I'm using PHP 7\n. Host willisdetailcenter.com\nHostName 23.235.214.214\nPort 22\nUser willisdetailcent\nIdentityFile ~/.ssh/elite_willisdetailcenter.com_rsa\nIdentitiesOnly yes\nRepeated for myriad sites I work on, none of which are my vagrant box.\n. Ah! So I tagged a -vv on my ssh and it does, in fact, use my default public key:\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: /c/Users/Ethan/.ssh/id_rsa\nSo I need to do something like:\n$key = new RSA();\n$key->loadKey(file_get_contents('private-key.txt'));\nBut load my id_rsa file?\n. Yes, it did! Sorry for not following up. Just to recap for anyone reading - when SSH-ing into a Vagrant box, it uses your default public SSH key.\n. ",
    "clavearnel": "I solved by using , \nif ($sftp->put(\"2.txt\",$localpath.\"testupload.txt\",1)) {\n. ",
    "BrunoDeBarros": "Wow, thank you for the detailed response! I agree that switching away from mcrypt isn't appropriate (and not even necessary, since in PHP 7.1+ the mcrypt extension won't be there, and phpseclib will automatically use pure PHP or OpenSSL if available and skip mcrypt altogether).\nIn my particular case, though, I'm just developing locally, and have both mcrypt and openssl, which is why I was surprised to see the mcrypt deprecation notices - I assumed it was using it regardless. I did check if I had OpenSSL before starting the issue.\nNow that you mentioned that phpseclib checks for OpenSSL first, I went to check the code. I checked the output of _setEngine() in the __construct() of Crypt\\Base, and it yielded 3 (ENGINE_OPENSSL). So it's using OpenSSL, but reverting to mcrypt later on in the code.\nAn exception thrown at the point when the engine switched to 2 (ENGINE_MCRYPT) reveals that this happened while trying to use the SSH2 portion of phpseclib. After going through the code a bit more, I found out that this is triggered in Crypt\\RC4's isValidEngine(), which returns false for me because strlen($this->key) == 1 (which I don't understand, because it implies an 8-bit key) and that's not supported by the OpenSSL implementation, so it falls back on mcrypt.\nI don't have a problem with silencing the deprecation notices, but it seems that this highlighted an area in which the OpenSSL side of phpseclib is lacking. Is this something that can be worked around with the OpenSSL library? If mcrypt can handle this, surely OpenSSL should be able to as well (though granted, this is probably bottom-of-the-priority-list stuff, so I completely understand if this doesn't matter too much to you). I don't know what'd need be involved in making this work, but I'd love to help in any way I can.\nEDIT: Looking at Crypt\\RC4's setKeyLength(), it looks like the $this->key being 1 doesn't even imply an 8-bit key, it implies anything under 8 bits, because if ($length < 8) $this->key_length = 1. This sounds like something specific to my server's configurations, but I'm not sure what since I don't have any in-depth crypto knowledge. Do you have any ideas?\n. It's probably not worth it; I set the preferred engine to the internal one, and it worked correctly without any mcrypt notices, so it's clear that phpseclib -can- handle it, OpenSSL or not, which is what matters (I was worried that it might be relying exclusively on mcrypt to handle my particular situation).\nSo silencing deprecation warnings is a good workaround if you've got mcrypt and you're in 7.1 (best solution is to just remove mcrypt though), and in 7.2 there won't even be mcrypt anymore, so it won't matter.\nThank you so much for responding so thoroughly, though, I really appreciate your responsiveness.\n. ",
    "pinakin7664": "i have find solution for php 7.1 mcyrpt issue :\nhttps://www.cadence-labs.com/2016/09/magento-2-php-7-1-fix-function-mcyrpt_module_open-deprecated/. ",
    "cauliturtle": "I try another flags in openssl_private_decrypt($encrypted_data, $decrypted, $pk_resource, OPENSSL_PKCS1_OAEP_PADDING); \nIt shows \nbash\nerror:040A1079:rsa routines:RSA_padding_check_PKCS1_OAEP_mgf1:oaep decoding error\nerror:04065072:rsa routines:RSA_EAY_PRIVATE_DECRYPT:padding check failed\n. Hi @terrafrost \nReally appreciate with your reply. Yes, I can send you the p12 file with the code. Is your email github_username@php.net?\n. ",
    "rmnanney": "The file that I think is the culprit is empty.  Here's the result:\n`site_Order_Details_20160816011001.flg\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\nstring(0) \"\"\n`\nuser@dev1:/var/www/www.site.com/temp$ ls -lah site_Order_Details_20160816011001.flg \n-rw-r--r-- 1 user user 0 Sep 14 14:51 site_Order_Details_20160816011001.flg\nI see the addition in SFTP.php in #995, seems pretty likely you're right.\nThank you! :)\nRyan\n. I've updated our composer.json to\n\"require\": {\n   \"phpseclib/phpseclib\": \"2.0.x-dev\",\n   ...\n}\nRan the same test again, after a composer update, and bingo!  We'll look for the 2.0.4 and switch to that in prod when it hits =)\nThanks @terrafrost \n. ",
    "romucifu": "Yes, I've posted this on \"stackoverflow.com\" too.\nThe library is using \"internal mode\".\nI've attached the \"phpinfo\" data of the server (RedHat Linux with PHP 5.0.4).\nThanks.\nphpinfo_504.txt\n. I'm using phpseclib 1.0.3\n. More info...\nThis problem also affects another host with PHP 5.0.4 32-bit Linux OS.\nI've first spotted the problem in the \"_rightRotate\" function of the \"Crypt_Hash\" class:\nfunction _rightRotate($int, $amt)\n    {\n        $invamt = 32 - $amt;\n        $mask = (1 << $invamt) - 1;\n        return (($int << $invamt) & 0xFFFFFFFF) | (($int >> $amt) & $mask);\n    }\nIn the fist call of the \"_sha256\" function \"main loop\":\n// Main loop\n            for ($i = 0; $i < 64; $i++) {\n                $s0 = $this->_rightRotate($a,  2) ^ ...\nEnters the function with the values \"1779033703\" for \"$int\" and \"2\" for \"$amt\", but the result is different in 32-bit or 64-bit machines.\nResult in 32-bit machines: -628983399\nResult in 64-bit machines: 3665983897\nI don't know if you could replicate this.\n. @bantu Thanks bantu! Sorry for the misunderstanding. Clearly this issue is beyond my understanding, I really can't understand why \"echo\" shows different values.\n. In the php documentation for integers: \n\"Integer overflow: If PHP encounters a number beyond the bounds of the integer type, it will be interpreted as a float instead. Also, an operation which results in a number beyond the bounds of the integer type will return a float instead.\"\nIt is possible that when converting this values to float the subsequent bitwise operations doesn't work correctly?\nAlso a note from the changelog of PHP 5.3.0:\n\"Changed floating point behaviour to consistently use double precision on all platforms and with all compilers. (Christian Seiler)\"\nAnd an interesting post from stackoverflow.com:\nhttp://stackoverflow.com/questions/11402469/bitwise-operations-on-big-integers-in-php-5-2-and-php-5-3\n. It's a weird issue because at least in our server farm the problem affects only 32-bit Linux systems. \nI'm able to reproduce the problem on three servers, two 32-Bit Linux OS with PHP 5.0.4 and one 32-Bit Linux OS with PHP 5.2.9. \nThe rest of my servers: four 64-Bit Linux OS with PHP 5.3.3, two 64-Bit Linux OS with PHP 7.0 and EVEN one 64-Bit Linux OS with PHP 5.2.9 don't exhibit the problem.\nBut terrafrost tested the issue with 32-bit versions (I assume all windows versions of PHP prior to 7.0 are 32-bit versions) of PHP 5.0.4 & 5.0.5 without problems.\nSo... could it be a problem related only to LINUX based 32-Bit systems (or just some distributions) and the reason they changed this in PHP 5.3.0?\n\"Changed floating point behaviour to consistently use double precision on all platforms and with all compilers. (Christian Seiler)\"\nExcerpt related to this update:\n\"Basically, on x86 systems without SSE FP arithmetics don't really use IEEE 754 double arithmetic by default but rather a double-extended type for internal calculations - which leads to problems since FP behaviour is not reproducible on different platforms - compare to for example x86 with SSE or x86_64 where SSE is nearly always used, or PPC etc. - there you get real IEEE 754 double arithmetic. The makes sure PHP changes the internal FPU precision of x86 to IEEE 754 double precision in order to get the same results for FP calculations on all platforms.\"\n. To answer myself, all of my affected systems have SSE FP arithmetics, so seems like this change in PHP 5.3.0 is not the root of the problem.\n32-bit PHP 5.2.9 Linux OS:\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 15\nmodel name      : Intel(R) Core(TM)2 CPU          4300  @ 1.80GHz\nstepping        : 2\ncpu MHz         : 1795.631\ncache size      : 2048 KB\nphysical id     : 0\nsiblings        : 2\ncore id         : 0\ncpu cores       : 2\nfdiv_bug        : no\nhlt_bug         : no\nf00f_bug        : no\ncoma_bug        : no\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 10\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc pni monitor ds_cpl est tm2 cx16 xtpr lahf_lm\nbogomips        : 3593.14\n32-bit PHP 5.0.4 Linux OS:\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 15\nmodel name      : Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nstepping        : 2\ncpu MHz         : 2493.708\ncache size      : 0 KB\nphysical id     : 0\nsiblings        : 2\nrunqueue        : 0\nfdiv_bug        : no\nhlt_bug         : no\nf00f_bug        : no\ncoma_bug        : no\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 15\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht nx lm\nbogomips        : 4980.73\n. I've edited the original post just to note that I'm using CRYPT_HASH_MODE_INTERNAL to reproduce the problem.\n. @terrafrost YES! it works! now I have the same result on all of my hosts 32 or 64 Bit and with any PHP version. Awesome job.\nThanks!\n. Ok, looks like a problem with this instruction on line 439 of \"Crypt/Blowfish.php\":\n$this->bctx['p'][] = $this->parray[$i] ^ $data;\nApparently this XOR bitwise operator (^) return different results depending on the values and the type of OS (32Bit or 64Bit).\nFor example, this code:\n$a=2242054355;\n$b=1701195825;\n$result = $a ^ $b;\necho $result;\nReturns  -523945758 on 32-bit systems or returns 3771021538 on 64-bit systems. So looks like the problem is related to the type of OS and not the version of PHP (I'll edit the title later).\n. Unfortunately I can't give access to this host.\nTerrafrost, you said that you tested it with PHP 5.2.9 but did you tested it with a 32-Bit Linux OS?\nI've attached the \"phpinfo\" data of the host in the original post.\n. @terrafrost Don't worry, I understand the difficulty of the task.\nJust one more thing, I've just tried the same script with PHP 5.2.9 over a 64-Bit Linux OS and it works perfectly.\nSo clearly it looks like a very specific problem of PHP 5.2.9 over 32-Bit OS.\n. @terrafrost YES! it works! now I have the same result on all of my hosts 32 or 64 Bit and with any PHP version.\nThanks!\n. ",
    "kherP": "Nope, it doesn't speed up. It took me 82s to download the file.\ntime taken: 82s\nsize of file: 59.708493MB\nMBytes/second: 0.728152 mbps\n. Hi, just realized I have been calling the wrong version of phpseclib from another folder. The download speed boosted after using latest version of 1.0 branch. Thanks for taking your time to solve my issue. \n. Hi bantu,\nI'm quite new to SFTP. Do you mind telling how GMP extension can help in boosting the login time?. Hi bantu and terrafrost,\nGMP extension boosts the login time dramatically! Thank you very much!. Hi terrafrost,\nHere's the error and logs. The error shown is unreadable as shown as below:\n\nArray ( [0] => SSH_MSG_GLOBAL_REQUEST: \u0017hostkeys-00@openssh.com\u0001\u0017\u0007ssh-rsa\u0001\u0001\u0001\u0001\u00bcg I\u00fcQH\u00d79>\u00df\u009d]\u00b3\u0001\u017e\u201c\u00d1.:\u00fc\u00f5\u000f\u0160a\u00bb\u000bg\u00c4\u0004\u2026Q\u00ddj\u00e9s\b@\u201a\u0014\u2021 \u00b6\u00f1\u00e0\u00f2\u00b2Nl\u00cc;<\u00fa \u00eb\u00dc\u00a4a\b\u00ca- \u0006\u00d2\u00bb\u0013\u001e\u00a4su\u00c0W\u00b0\u008f\u00be\u0178HV\u00eb\u001a\u00c5\u0161\u00b5\u00a9\u001cr\u001c\u00e9\u00ffD\u00a9\u0015\u2039\u00ae\u0019\u00d5\u0018]\u00fb\u00e8\u02dc\u00f8\u00fa\u00f8\u00f2f%np\f\u00b8\u00f7\u00c9\u000eQj\u00ff\u2039\u00b1\u0015\u0004\u00bf+\u00cf|fz$@\u0007\u00ff0\u00ec\b\u0152B\u0011\u00de\u00c1Q?\u00a4\u2021\u00fa\u00a5\u00b3\u00b4\u00cdF\u2019N\u0153\u001cl \u00af\u00a4\u02c62\u00f0\u00d537\u00d0\u00f7\u00c34\u00d6\u00d5<;\u00a9%\u001a\u00ee\u00ad\u00c5\u001a\u00f8N\u20ac\u201e\u2026\u0014\u0015(\u00dc\u00de\u2030B\u00d1\u00c5\u00f0u\u00ba\u00e3\u00ea\u00d4\u00fb85#\u00cd\u00c4<\u2019\u00e8\u001fP\u000b\u201e\u0160\u0005E\u00d1\u00da\u000754<\u00b0\u00df\u201d\u00a8\u00dcs\u00dd?/\u00d4\u02dc\u00e1\u00e3;\u00c4 \u00ceb-\bS2\u0012\u00dcqa\u0153\u009d>\u2014\u0001\u00b3\u0007ssh-dss\u0081\u00f7\u00daKh\u00cd>\u00d8\u2122\u00d5@ \\\u00c5\u00f6\u00abC:G\u017dv\u0152\u00e8\u00a2\u0011\\\u00dd\u00af\u00d7F<\u0005\u00edsA-\u00c28M\u0152\u00f3\u00b5\u2013On9T|\u0161\u00a4\u00d1D\u00eb5\u000f\u203a\u00e3\u001b\u00c5\u00e1\u00bf\u00de\u001d\u017d\u00e1\u00d0.J%?\u0018\u00bd\u007fk [R\u00eb!\u00e6\u00c9Rud\u00ad\u00fay\u00b5\u00c3c\u00a3\u00ca=\u00f6\u007f\u00ae\u2013\u00b7\u00a8Fm\u001c\u2022\u00ceDP\u00f2\u001d\u20300\u2019y{\u00e5\u0192\u0005\u00c9jBR\u00fb|\u00fc\b\u00ecT\u008fy\u0015\u00de\u00ff\u00f6i\u00ce]\u201a\u00ae\u00bc )\u00b8%3\u00a4\u0161 \u2039\u00fc\u00fd\u0081\u0178N\u00f1\u00a5\u2021\u00daW\u00f7!\u00aa\u00c20O\u2019u\u0152\u00d3\u001f8\u0019\u00ff\u0006\u02dc\u00b0\u201c_\u0090\b]\u0192\u00f5\u00a1i\u2013\u000e>\u00e93M\u2026\u0012\u00fa\u0006\u00af5\u007f\u0019 \u00e9H\u00f5\u00eam\u0012X!\u001b(t\b(\u00c2Kr4\u2030a\u00d4\u02c6\u00c4/k\u00b9\u0081Be\u0013\u00e3\u0081\u00b8\u2021\u0152DO\u201d\u00e1\u0011m7N\u0011\u201a\u201d\u00de\u00b6\u0010\u00efm\u00f2}(e\u008f\u00f5\u00e1\u00cb\u0161\u001bz\u00ef?\u0011H[\u00ff\u00c1\u0019:K\u00b0Z\u00c5\u0153e\u00c4y\u00f0\u00e5#\u00cc\u0012\u0160\u203a\u00e5\u00af\u00df\u00a8\u203a\u00dda\u000e\u2122!\u00cc\u00d8@\u00b9\u00fd)V\u00fe\u00a4IQ\u00197\u0019+\u00e8\u001b\u00adC\u00d4\u00d2\u0019Q\u0192\u00d3g\u00aa\u2018\u0012\u007f\u0192\u00d8\u00de\u00e2\u00dc\u0016b\u00e8ZL \u00f9 $\u2020\u00c3\u0081\u00e3\u00ac\u0081\u00ec\u0161'\u00f9\u001a\u00afk\u00ac\u008dZh\u0013ecdsa-sha2-nistp256\bnistp256A\u0004\u2014,\u2020\fP\u001b\u00a6jY\u00e8\u000e\u0016oZ\u00f13\u00ce\u00f11\u0090z{{\u00e9\u00f8\u0090\u00ce\u2018.G\u2014\u0007\u000f?!:|Y\u0017\u00a4Za.\u0018g\u00c8\u008d\u008f\u00b8?\u0081\u2020\u00d3\u00a7[\u00cc$\u00dd\u00e0\u00f8\u00c4k\u00b7\u00c63\u000bssh-ed25519 \u00ff?\u00d9\u00cc\u0006G\u0016\u0006*\u201d\u00db\u00e2V6\u001f\u00fd.Y\u00fa\u02c6\u2019\u00d9\u00df\u001b\u2030\u00c4\u00a3j\u0161\u00f6\u001eC ) \n\nThe log of ssh2:\nssh2log.txt\n. I use following code to trigger the download:\nphp\nif( $sftp->file_exists($file) )\n{\n    $sftp->max_sftp_packet;\n     // headers for attachment or streamed file\n     if ($is_attachment)\n     {\n         header('Content-Type: application/octet-stream');\n         header(\"Content-Transfer-Encoding: Binary\"); \n         header(\"Content-disposition: attachment; filename=\\\"\".$fn.\"\\\"\"); \n         header('Expires:-1');\n         header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n         header('Pragma: public');\n         header('Content-Length: ' . $sftp->size($file));\n         header(\"Accept-Ranges: bytes\");\n    }\n    $sftp->get($file);\n  }\nFor the last part, if I added echo before $sftp->get($file) , the file not found will be shown as shown in the figure below:\n\nIf without the echo, the download can be started but the progress of download stuck at 4.7mb ( the total size of the file is 107mb ).. I just wanted to download the file. The script I used is exactly the same as the one I used to download file less than 100MB. The script works fine for file less than 100MB. \nI am using phpseclib to download .zip, .pptx those kind of files. \nI have no idea how the error was hit either. Actually when I do $sftp->get($file), then only I was able to get 4.7mb. I was not able to get anything if I include echo.\nI have attached the download script I use and the log file at the bottom of this comment to ease your investigation.\nThe log file are from without doing echo. If I include echo, it will return error 500.\nlogfile.txt\ndownload.txt\n. This solved my issue. Thanks for the help!. ",
    "DeepDiver1975": "great - thx\n. ",
    "oanhnn": "Please support PHP 7.1\nhttps://travis-ci.org/deployphp/deployer/jobs/162086438#L352\n. ",
    "weshooper": "Aha - understood, great thanks!\n. Ok, thanks for your thoughts, I'll open a PR shortly.. @terrafrost wasn't me heh! \ud83d\ude04 Closing the issue since fixed.. ",
    "pableu": "We used master because of a bug in 2.0.1 that prevented us from using it. The bug is fixed in 2.0.2, so we switched our code back to using master. The issue can be closed for me. \nBut again, wouldn't it make sense to have a composer.json in master that reflects the current version requirement of master?\n. ",
    "sasf54": "Hi,\nSorry for the not standard code formatting.\nI was using / trying to use it on live environment for deploying a new sub\nsite on a remote box.\nI was met PHPSecLib on sourceforge (where there's still the 1.x code).\nI was trying to use as the documentation there. There are a lot of traps,\nand the documentation not mentions explicitly :( :\n- ssh session for separate commands\n- When the execution ends (in time)\n- where the execution ended (in output)\n- High ping / waiting time, if you try to solve the above problems, by\n  reading per command.\n(I've got some issues, with my local fully qualified test environment\nrunning phpseclib, so I trashed it from my project :( (now using API)\nhost machine: amd64 with gentoo linux\nguest machine(s): amd64 ubuntu 16.04 with PHP7.0\n(php sec lib cannot make connection (I can make connection from ssh)\n(it's working with the same settings on live site...))\nBests,\nFerenc\nOn Mon, Oct 17, 2016 at 1:02 AM, terrafrost notifications@github.com\nwrote:\n\nClosed #1045 https://github.com/phpseclib/phpseclib/pull/1045.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/1045#event-825253195, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAQRCff-4Ncg-KcZedDzriL0UGvVPcR4ks5q0q0VgaJpZM4KNmnL\n.\n. Hi,\n- ssh session for separate commands\n\nYes, it's there, but I was skipped over it, until the problem occurred ...\nExecution ends in time:\nI meant, that if you are executing (write) a process, that usually runs for\na long time, and if you are closing the connection before it's ended, it\nwill be terminated by system, unless \"nohup\" is used at execution (>nohup\nsleep 12).\nin output: if you are writing up more than one command, (mysql import /\ncopy a lot of files), and than you are trying to read, (reading for double\nto be sure), there's no guarantee, that all of your commands are executed:\n- You will have to analyze the output to be sure, for all commands are\n  finished.\nHigh ping time:\nThe normal case, on executing more commands:\nsend the command by write, and do read for output (console is ready).\nIf you do this on a remote host, and you have 20 or more commands, it will\nresult in 40*pingtime+execution time...\nconnection problem:\nI'm using Virtualbox (vagrant) for emulating the live system, it might be\nsome artifact with:\nAMD64 + Virtualbox + virtualbox amd64 acceleration + ubuntu 16.04 amd64 +\nphp7 + ssh daemon\n(however logging in from the remote host to itself works fine... (and maybe\nneeded to accept the ssh key from the server...))\nAbout my ssh2 batch handling class:\nI understand, it's dangerous, and not advised to use:\n- if you have more commands put it in a batch file,\n  - Put checks in it to make sure it doesn't failed / fix it...\n  - Minimizing the traffic\n- It's not so trivial to process output, as by command by command\n- If a command fails, all other input are sent regarding of result\n  - worst example:\n    > vagrant ssh    /*  FAILS, because we are in root directory /\n    > rm -rf *           /  Will delete the host environment, not the\n    guest's home / login-ed directory*/\n(Why I created:\nI was making a sub site, complex deploy, with new DB user, DB, DB import,\ncopying a lot of files, setting permissions, creating config files.\nI found out, the hard way, that php mysqli tries to be too smart, and\nreturns before actually finishing the user, and db creation...)\nI see the amount of work, and bug-chasing in the lib...\nBests,\nFerenc\nOn Mon, Oct 17, 2016 at 4:18 AM, terrafrost notifications@github.com\nwrote:\n\n1.0 is still actively maintained. It - and the 2.0 branch - had releases\nabout two weeks ago and it's unit tested on Travis CI up to PHP 7.1.\nphpseclib 2.0 works best with Composer altho I wouldn't go so far as to\nsay that it requires it. But, none-the-less, that's why I'm not providing a\ndownloadable zip file of that. If you really want one you can get it from\ngithub.com, open the tagged release, and download the zip file of that.\nphpseclib dev-master (which'll become 3.0) will be Composer-only.\nAs for the documentation... I would like to redo it but in lieu of\nvolunteers actually stepping up I'll probably do it when 3.0 is nearing\nrelease (ie. not for a while). In the mean time...\n- ssh session for separate commands\nhttp://phpseclib.sourceforge.net/ssh/intro.html\nIn that link it says \"successive calls may not work as expected\" and links\nto this:\nhttp://phpseclib.sourceforge.net/ssh/examples.html#chdir\nI'm not sure if that's what you're talking about?\n- When the execution ends (in time)\nIt's 10s by default but that's not documented anywhere. I can add that.\n- where the execution ended (in output)\nThat functionality does not exist within phpseclib but people using\nphpseclib can do $start = microtime(true); $ssh->exec('do something');\n$elapsed = microtime(true) - $start;\n- High ping / waiting time, if you try to solve the above problems, by\n  reading per command.\nI'm not sure what you mean?\n(php sec lib cannot make connection (I can make connection from ssh)\nWithout more information it's possible it's something like suexec\npreventing fsockopen from making socket connections or some such. But if\nyou've already worked around it that works too!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/pull/1045#issuecomment-254097471,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQRCX6g4OW9soW1e98AIfoL2bGvQXj9ks5q0tsMgaJpZM4KNmnL\n.\n. \n",
    "smtlab": "Thank you for replying.\nI tested with multiple servers getting same error. Also I can connect with PuTTY with no issues.\nServer1 identification: SSH-2.0-OpenSSH_5.3\nServer2 identification: SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.6\n. I agree atleast proper error message or exception handling seems valid here. Since its very difficult to track down whats going wrong just by general php errors.\n. ",
    "foxymoron-repos": "I think problem is with my home network / ISP. My ISP block all outgoing traffic.\nI tested with my office network it works.\n. ",
    "solazs": "@terrafrost We've tried your branch (https://github.com/terrafrost/phpseclib/tree/2.0-send-kex-before-rcpt) and it did fix the said problem above. Our script connects to some cisco switches, so fixing the \"buggy\" ssh server is not an option for us.\n+1 one for getting this merged.. More info: this bug shows up with version 2.0.5, no such problem with 2.0.4.\n2.0.5 with the SSH2.php file from (https://github.com/terrafrost/phpseclib/tree/2.0-send-kex-before-rcpt) works as well.. ",
    "mikebrandl": "@terrafrost I've also tried your branch (https://github.com/terrafrost/phpseclib/tree/2.0-send-kex-before-rcpt) and it did fix the said problem. Our script connects to some cisco routers, so fixing the \"buggy\" ssh server is not an option for us.\n+1 one for getting this merged.\nAlso this is still present in 2.0.6, and connects properly using the SSH File from your branch. \nI do get the error connection closed prematurely by doing it this way.. Awesome Thanks @terrafrost When do you think this might get merged?. Thanks @terrafrost Much Appreciated!. Here you go @terrafrost \nThis logs onto the device (Ubiquiti DIsh)\nAnd runs the following: \n```\nmca-status\nping 192.168.1.1 -c 1\nping 192.168.1.253 -c 1\nip neigh show dev eth0 | grep -v \"FAILED\"\ncat /var/tmp/dhcpd.leases\niptables -nL -t nat\ncat /var/log/messages\narping -I eth0 -c 3 192.168.1.254\nNotice: Unable to open channel in /home/mike/Dropbox (M12 Solutions)/WebServer/includes/thirdparty/phpseclib/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 3438\n<-\n00000000  53:53:48:2d:32:2e:30:2d:64:72:6f:70:62:65:61:72  SSH-2.0-dropbear\n00000010  5f:32:30:31:36:2e:37:34:0d:0a                    _2016.74..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1967, network: 0s)\n00000000  2f:c2:36:01:2d:1f:22:61:ca:36:a7:c7:f1:0e:2f:16  /.6.-.\"a.6..../.\n00000010  00:00:00:8c:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\n00000020  68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f:72:67  ha256@libssh.org\n00000030  2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73:74:70  ,ecdh-sha2-nistp\n00000040  35:32:31:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69  521,ecdh-sha2-ni\n00000050  73:74:70:33:38:34:2c:65:63:64:68:2d:73:68:61:32  stp384,ecdh-sha2\n00000060  2d:6e:69:73:74:70:32:35:36:2c:64:69:66:66:69:65  -nistp256,diffie\n00000070  2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34  -hellman-group14\n00000080  2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c  -sha1,diffie-hel\n00000090  6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31  lman-group1-sha1\n000000a0  00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73:68:2d  ....ssh-rsa,ssh-\n000000b0  64:73:73:00:00:00:67:61:65:73:31:32:38:2d:63:74  dss...gaes128-ct\n000000c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65:73  r,aes256-ctr,aes\n000000d0  31:32:38:2d:63:62:63:2c:61:65:73:32:35:36:2d:63  128-cbc,aes256-c\n000000e0  62:63:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62  bc,twofish256-cb\n000000f0  63:2c:74:77:6f:66:69:73:68:2d:63:62:63:2c:74:77  c,twofish-cbc,tw\n00000100  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:33:64:65  ofish128-cbc,3de\n00000110  73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00:00  s-ctr,3des-cbc..\n00000120  00:67:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  .gaes128-ctr,aes\n00000130  32:35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63  256-ctr,aes128-c\n00000140  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000150  6f:66:69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f  ofish256-cbc,two\n00000160  66:69:73:68:2d:63:62:63:2c:74:77:6f:66:69:73:68  fish-cbc,twofish\n00000170  31:32:38:2d:63:62:63:2c:33:64:65:73:2d:63:74:72  128-cbc,3des-ctr\n00000180  2c:33:64:65:73:2d:63:62:63:00:00:00:3b:68:6d:61  ,3des-cbc...;hma\n00000190  63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73  c-sha1-96,hmac-s\n000001a0  68:61:31:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35  ha1,hmac-sha2-25\n000001b0  36:2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c  6,hmac-sha2-512,\n000001c0  68:6d:61:63:2d:6d:64:35:00:00:00:3b:68:6d:61:63  hmac-md5...;hmac\n000001d0  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68  -sha1-96,hmac-sh\n000001e0  61:31:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  a1,hmac-sha2-256\n000001f0  2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68  ,hmac-sha2-512,h\n00000200  6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e:65:00  mac-md5....none.\n00000210  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n00000220  00:00:00:00                                      ....\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0017, network: 0s)\n00000000  58:0d:6e:7d:83:7d:f6:b7:f7:f3:df:cb:ea:d5:6b:bc  X.n}.}........k.\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0031, network: 0s)\n00000000  00:00:00:81:00:d0:75:d2:c6:61:35:53:7d:9b:5c:b8  ......u..a5S}..\n00000010  be:78:ae:8a:61:85:fd:f9:21:b7:31:d9:99:36:10:9f  .x..a...!.1..6..\n00000020  a0:d3:bf:a4:9b:be:9b:e8:fa:bd:be:d3:0f:86:fa:cd  ................\n00000030  db:93:9e:8b:26:de:2b:ac:a9:25:22:ec:85:93:ad:9e  ....&.+..%\".....\n00000040  ba:f6:78:8e:33:c8:84:d9:74:13:21:ab:2f:4f:b4:6e  ..x.3...t.!./O.n\n00000050  4f:ab:59:4c:6d:e4:d9:9f:d8:78:71:fb:83:de:f7:0f  O.YLm....xq.....\n00000060  44:b7:4d:65:6e:bd:b5:d1:cb:ed:9b:9f:1b:e1:b1:06  D.Men...........\n00000070  bc:5e:98:41:86:7e:6f:81:e0:a7:d9:5a:ef:26:62:f5  .^.A.~o....Z.&b.\n00000080  e6:35:54:41:57                                   .5TAW\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 1.0612, network: 1.0612s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:90:ff:a3:07:a1  ................\n00000020  59:a7:1a:47:c2:d2:69:d1:c6:33:44:c3:32:4c:6b:63  Y..G..i..3D.2Lkc\n00000030  ed:4c:2f:86:fd:1a:99:2a:19:01:a8:c8:3c:a9:d6:2c  .L/....*.......,\n00000040  d7:16:6d:22:a9:08:f7:7e:87:b8:41:07:b1:e6:52:96  ..m\"...~..A...R.\n00000050  ec:e8:a4:da:e2:01:0e:41:33:9b:6e:67:bf:aa:62:89  .......A3.ng..b.\n00000060  48:b1:13:d5:e4:de:3a:16:42:92:29:e5:6e:fc:5e:67  H.....:.B.).n.^g\n00000070  c9:ae:ef:7a:36:01:76:8b:07:a0:c1:ed:f3:db:47:a9  ...z6.v.......G.\n00000080  85:86:f0:3d:45:b6:c1:2d:ab:1b:73:aa:4f:0c:2f:c3  ...=E..-..s.O./.\n00000090  e6:db:d4:fd:27:87:b9:ef:0d:f1:9f:40:0d:5a:73:a3  ....'......@.Zs.\n000000a0  85:12:c0:ad:9e:d9:8a:11:6d:6b:57:f8:5a:a4:94:cf  ........mkW.Z...\n000000b0  8e:7c:4d:d1:24:a2:f5:7c:f1:06:e1:1b:cb:60:04:11  .|M.$..|.......\n000000c0  4c:f2:f3:8b:0d:ef:00:14:52:ee:a7:82:61:10:74:b3  L.......R...a.t.\n000000d0  bc:ee:a9:61:d5:9b:20:6f:93:58:fa:a0:43:4b:8f:ae  ...a.. o.X..CK..\n000000e0  a6:52:3f:b3:4b:db:cf:3e:b4:34:8b:c6:c6:a4:19:dc  .R?.K..>.4......\n000000f0  6c:6b:4c:74:37:f2:50:1d:32:63:d2:7c:4c:03:87:88  lkLt7.P.2c.|L...\n00000100  7d:b9:a5:02:a1:6a:ef:ab:06:34:2d:f4:88:f0:bd:fc  }....j...4-.....\n00000110  25:ff:87:17:e6:9f:3d:1e:6e:bc:67:00:00:00:80:53  %.....=.n.g....S\n00000120  4d:49:bb:74:57:f0:2b:27:aa:22:08:49:5a:ec:33:b5  MI.tW.+'.\".IZ.3.\n00000130  6b:4f:9d:26:6b:ce:98:06:e9:6e:fc:82:98:4d:4b:f1  kO.&k....n...MK.\n00000140  15:d0:fd:36:74:11:2a:af:c8:3e:60:1c:85:a9:c2:da  ...6t.*..>.....\n00000150  f1:72:12:1f:3d:c9:5c:15:b1:48:c8:e7:10:d1:22:63  .r..=...H....\"c\n00000160  37:68:7c:46:8c:6d:cf:f1:47:15:06:76:ee:e6:0e:4f  7h|F.m..G..v...O\n00000170  e2:17:68:22:65:a3:dd:34:95:ad:7a:92:56:d5:e5:49  ..h\"e..4..z.V..I\n00000180  81:93:a5:ab:7b:07:a5:52:c6:bc:7d:21:a7:ad:da:4a  ....{..R..}!...J\n00000190  b4:ac:64:38:da:78:95:cc:52:f5:58:11:ef:d2:19:00  ..d8.x..R.X.....\n000001a0  00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00  .......ssh-rsa..\n000001b0  01:00:7e:fb:de:c6:6e:9d:97:cd:58:ed:55:e8:9c:9f  ..~...n...X.U...\n000001c0  2e:d4:28:7c:83:51:54:86:2f:6f:b7:a5:82:d2:91:f2  ..(|.QT./o......\n000001d0  f9:86:08:7e:4b:89:65:cb:f8:4c:c1:3e:df:f5:ae:33  ...~K.e..L.>...3\n000001e0  e6:03:42:47:b6:ec:d6:8a:16:f3:b7:ec:a8:4b:12:7a  ..BG.........K.z\n000001f0  df:9f:51:5a:71:ba:66:70:34:a4:51:af:bb:12:a5:16  ..QZq.fp4.Q.....\n00000200  39:5f:b3:47:80:58:6f:8d:48:d9:2d:91:3a:c9:ba:e1  9_.G.Xo.H.-.:...\n00000210  42:1f:c6:19:56:cb:13:73:1c:ce:48:fe:a6:af:99:2f  B...V..s..H..../\n00000220  55:a0:b3:e7:e4:b1:9d:fd:cb:68:78:a6:a0:cd:d3:b0  U........hx.....\n00000230  62:76:6a:d2:99:95:78:d0:62:d6:54:64:42:23:d2:78  bvj...x.b.TdB#.x\n00000240  b7:1b:71:b1:da:41:21:3e:f1:5d:6a:d1:f9:84:84:1c  ..q..A!>.]j.....\n00000250  12:a0:67:22:fc:7d:ed:88:e5:4a:c1:91:af:d1:6d:5b  ..g\".}...J....m[\n00000260  18:2f:ba:1f:e3:64:83:f5:33:7a:8c:89:b5:ff:ab:a6  ./...d..3z......\n00000270  59:3c:46:00:ef:ca:24:5c:ef:18:a0:46:59:90:52:90  Y.F...$...FY.R.\n00000280  dd:93:59:33:9f:24:51:aa:41:39:e8:b0:cc:cc:88:4b  ..Y3.$Q.A9.....K\n00000290  3b:f5:d2:93:9b:aa:1c:52:27:9e:2d:36:3d:2c:bb:da  ;......R'.-6=,..\n000002a0  fd:06:92:cd:5d:6c:5e:12:79:7c:00:49:2c:42:31:55  ....]l^.y|.I,B1U\n000002b0  b6:71                                            .q\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0005, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0006, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.064, network: 0.0639s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0278, network: 0.0278s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 1.0003, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0372, network: 0s)\n00000000  00:00:00:00:00:00:00:00:00:00:60:00:00:00:7f:f7  ..........`.....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  0a:6d:63:61:2d:73:74:61:74:75:73                 .mca-status\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0319, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0731, network: 0s)\n00000000  00:00:00:00:00:00:04:67:64:65:76:69:63:65:4e:61  .......gdeviceNa\n00000010  6d:65:3d:6d:31:32:5f:57:49:4c:53:4f:4e:30:31:35  me=NAME\n00000020  38:31:2c:64:65:76:69:63:65:49:64:3d:34:34:3a:44  81,deviceId=\n00000030  39:3a:45:37:3a:44:41:3a:38:36:3a:34:36:2c:66:69  MAC,fi\n00000040  72:6d:77:61:72:65:56:65:72:73:69:6f:6e:3d:58:57  rmwareVersion=XW\n00000050  2e:61:72:39:33:34:78:2e:76:36:2e:30:2e:33:2e:33  .ar934x.v6.0.3.3\n00000060  30:36:30:30:2e:31:37:30:33:32:39:2e:31:38:31:37  0600.170329.1817\n00000070  2c:70:6c:61:74:66:6f:72:6d:3d:50:6f:77:65:72:42  ,platform=PowerB\n00000080  65:61:6d:20:4d:35:2c:64:65:76:69:63:65:49:70:3d  eam M5,deviceIp=\n00000090  31:39:32:2e:31:36:38:2e:31:2e:32:35:34:0d:0a:0d  192.168.1.254...\n000000a0  0a:61:70:4d:61:63:3d:30:34:3a:31:38:3a:44:36:3a  .apMac=MA\n000000b0  34:41:3a:44:39:3a:43:36:0d:0a:77:6c:61:6e:4f:70  C..wlanOp\n000000c0  6d:6f:64:65:3d:73:74:61:0d:0a:77:6c:61:6e:43:6f  mode=sta..wlanCo\n000000d0  6e:6e:65:63:74:69:6f:6e:73:3d:31:0d:0a:77:6c:61  nnections=1..wla\n000000e0  6e:55:70:74:69:6d:65:3d:33:39:38:33:33:31:36:0d  nUptime=3983316.\n000000f0  0a:65:73:73:69:64:3d:4d:31:32:57:49:2d:42:53:2d  .essid=\n00000100  44:55:52:2d:31:0d:0a:66:72:65:71:3d:35:35:36:30  SSID..freq=FREQ\n00000110  0d:0a:63:68:61:6e:62:77:3d:32:30:0d:0a:73:69:67  ..chanbw=20..sig\n00000120  6e:61:6c:3d:2d:35:33:0d:0a:63:68:61:69:6e:30:53  nal=-53..chain0S\n00000130  69:67:6e:61:6c:3d:2d:35:35:0d:0a:63:68:61:69:6e  ignal=-55..chain\n00000140  31:53:69:67:6e:61:6c:3d:2d:35:37:0d:0a:6e:6f:69  1Signal=-57..noi\n00000150  73:65:3d:2d:31:30:31:0d:0a:63:63:71:3d:39:36:38  se=-101..ccq=968\n00000160  0d:0a:75:70:74:69:6d:65:3d:33:39:38:33:33:36:33  ..uptime=3983363\n00000170  0d:0a:63:70:75:55:73:61:67:65:3d:30:2e:30:0d:0a  ..cpuUsage=0.0..\n00000180  6c:6f:61:64:61:76:67:3d:31:31:0d:0a:6d:65:6d:54  loadavg=11..memT\n00000190  6f:74:61:6c:3d:36:32:31:31:36:0d:0a:6d:65:6d:46  otal=62116..memF\n000001a0  72:65:65:3d:34:30:32:33:32:0d:0a:6d:65:6d:42:75  ree=40232..memBu\n000001b0  66:66:65:72:73:3d:31:30:32:34:0d:0a:61:63:6b:54  ffers=1024..ackT\n000001c0  69:6d:65:6f:75:74:3d:33:31:0d:0a:64:69:73:74:61  imeout=31..dista\n000001d0  6e:63:65:3d:31:30:35:30:0d:0a:6c:61:6e:49:70:41  nce=1050..lanIpA\n000001e0  64:64:72:65:73:73:3d:31:39:32:2e:31:36:38:2e:31  ddress=192.168.1\n000001f0  2e:32:35:34:0d:0a:77:6c:61:6e:49:70:41:64:64:72  .254..wlanIpAddr\n00000200  65:73:73:3d:31:38:35:2e:31:30:32:2e:31:33:32:2e  ess=IP.\n00000210  33:31:0d:0a:77:6c:61:6e:54:78:52:61:74:65:3d:31  ADDR..wlanTxRate=1\n00000220  34:34:2e:34:0d:0a:77:6c:61:6e:52:78:52:61:74:65  44.4..wlanRxRate\n00000230  3d:31:34:34:2e:34:0d:0a:77:6c:61:6e:54:78:4c:61  =144.4..wlanTxLa\n00000240  74:65:6e:63:79:3d:34:0d:0a:77:6c:61:6e:50:6f:6c  tency=4..wlanPol\n00000250  6c:69:6e:67:3d:31:0d:0a:77:6c:61:6e:50:6f:6c:6c  ling=1..wlanPoll\n00000260  69:6e:67:51:75:61:6c:69:74:79:3d:39:35:0d:0a:77  ingQuality=95..w\n00000270  6c:61:6e:50:6f:6c:6c:69:6e:67:43:61:70:61:63:69  lanPollingCapaci\n00000280  74:79:3d:39:32:0d:0a:6c:61:6e:52:78:42:79:74:65  ty=92..lanRxByte\n00000290  73:3d:31:39:35:31:33:37:38:38:31:35:0d:0a:6c:61  s=1951378815..la\n000002a0  6e:52:78:50:61:63:6b:65:74:73:3d:37:38:30:33:38  nRxPackets=78038\n000002b0  30:35:36:0d:0a:6c:61:6e:52:78:45:72:72:6f:72:73  056..lanRxErrors\n000002c0  3d:30:0d:0a:6c:61:6e:54:78:42:79:74:65:73:3d:31  =0..lanTxBytes=1\n000002d0  30:37:33:38:32:35:39:34:38:0d:0a:6c:61:6e:54:78  073825948..lanTx\n000002e0  50:61:63:6b:65:74:73:3d:31:37:30:36:35:38:37:35  Packets=17065875\n000002f0  31:0d:0a:6c:61:6e:54:78:45:72:72:6f:72:73:3d:30  1..lanTxErrors=0\n00000300  0d:0a:6c:61:6e:50:6c:75:67:67:65:64:3d:31:0d:0a  ..lanPlugged=1..\n00000310  6c:61:6e:53:70:65:65:64:3d:31:30:30:30:4d:62:70  lanSpeed=1000Mbp\n00000320  73:2d:46:75:6c:6c:0d:0a:77:6c:61:6e:52:78:42:79  s-Full..wlanRxBy\n00000330  74:65:73:3d:37:31:38:38:39:34:33:31:31:0d:0a:77  tes=718894311..w\n00000340  6c:61:6e:52:78:50:61:63:6b:65:74:73:3d:31:38:32  lanRxPackets=182\n00000350  35:38:35:31:32:37:0d:0a:77:6c:61:6e:52:78:45:72  585127..wlanRxEr\n00000360  72:6f:72:73:3d:30:0d:0a:77:6c:61:6e:54:78:42:79  rors=0..wlanTxBy\n00000370  74:65:73:3d:31:39:39:36:39:32:36:32:31:37:0d:0a  tes=1996926217..\n00000380  77:6c:61:6e:54:78:50:61:63:6b:65:74:73:3d:37:37  wlanTxPackets=77\n00000390  39:38:32:35:35:38:0d:0a:77:6c:61:6e:54:78:45:72  982558..wlanTxEr\n000003a0  72:6f:72:73:3d:30:0d:0a:77:6c:61:6e:52:78:45:72  rors=0..wlanRxEr\n000003b0  72:4e:77:69:64:3d:30:0d:0a:77:6c:61:6e:52:78:45  rNwid=0..wlanRxE\n000003c0  72:72:43:72:79:70:74:3d:30:0d:0a:77:6c:61:6e:52  rrCrypt=0..wlanR\n000003d0  78:45:72:72:46:72:61:67:3d:30:0d:0a:77:6c:61:6e  xErrFrag=0..wlan\n000003e0  52:78:45:72:72:52:65:74:72:69:65:73:3d:30:0d:0a  RxErrRetries=0..\n000003f0  77:6c:61:6e:52:78:45:72:72:42:6d:69:73:73:3d:30  wlanRxErrBmiss=0\n00000400  0d:0a:77:6c:61:6e:52:78:45:72:72:4f:74:68:65:72  ..wlanRxErrOther\n00000410  3d:30:0d:0a:6c:61:74:69:74:75:64:65:3d:30:2e:30  =0..latitude=0.0\n00000420  30:30:30:30:30:0d:0a:6c:6f:6e:67:69:74:75:64:65  00000..longitude\n00000430  3d:30:2e:30:30:30:30:30:30:0d:0a:62:6f:61:72:64  =0.000000..board\n00000440  43:72:63:3d:37:32:63:36:63:30:31:31:0d:0a:63:66  Crc=72c6c011..cf\n00000450  67:43:72:63:3d:37:66:36:38:33:38:65:64:0d:0a:73  gCrc=7f6838ed..s\n00000460  74:61:74:75:73:5f:66:6c:61:67:73:3d:30:0d:0a     tatus_flags=0..\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:00                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0003, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0838, network: 0s)\n00000000  00:00:00:00:00:00:00:00:00:00:60:00:00:00:7f:f7  ..........`.....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  15:70:69:6e:67:20:31:39:32:2e:31:36:38:2e:31:2e  .ping 192.168.1.\n00000020  31:20:2d:63:20:31                                1 -c 1\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0137, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 9.9034, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0178, network: 0s)\n00000000  00:00:00:00:00:00:00:01:00:00:60:00:00:00:7f:f7  ..........`.....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  17:70:69:6e:67:20:31:39:32:2e:31:36:38:2e:31:2e  .ping 192.168.1.\n00000020  32:35:33:20:2d:63:20:31                          253 -c 1\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0163, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0266, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:6a:50:49:4e:47:20:31:39:32  .......jPING 192\n00000010  2e:31:36:38:2e:31:2e:32:35:33:20:28:31:39:32:2e  .168.1.253 (192.\n00000020  31:36:38:2e:31:2e:32:35:33:29:3a:20:35:36:20:64  168.1.253): 56 d\n00000030  61:74:61:20:62:79:74:65:73:0a:36:34:20:62:79:74  ata bytes.64 byt\n00000040  65:73:20:66:72:6f:6d:20:31:39:32:2e:31:36:38:2e  es from 192.168.\n00000050  31:2e:32:35:33:3a:20:73:65:71:3d:30:20:74:74:6c  1.253: seq=0 ttl\n00000060  3d:36:34:20:74:69:6d:65:3d:32:2e:30:30:34:20:6d  =64 time=2.004 m\n00000070  73:0a                                            s.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:00:00:00:00:8f:0a:2d:2d:2d:20:31:39:32  .........--- 192\n00000010  2e:31:36:38:2e:31:2e:32:35:33:20:70:69:6e:67:20  .168.1.253 ping \n00000020  73:74:61:74:69:73:74:69:63:73:20:2d:2d:2d:0a:31  statistics ---.1\n00000030  20:70:61:63:6b:65:74:73:20:74:72:61:6e:73:6d:69   packets transmi\n00000040  74:74:65:64:2c:20:31:20:70:61:63:6b:65:74:73:20  tted, 1 packets \n00000050  72:65:63:65:69:76:65:64:2c:20:30:25:20:70:61:63  received, 0% pac\n00000060  6b:65:74:20:6c:6f:73:73:0a:72:6f:75:6e:64:2d:74  ket loss.round-t\n00000070  72:69:70:20:6d:69:6e:2f:61:76:67:2f:6d:61:78:20  rip min/avg/max \n00000080  3d:20:32:2e:30:30:34:2f:32:2e:30:30:34:2f:32:2e  = 2.004/2.004/2.\n00000090  30:30:34:20:6d:73:0a                             004 ms.\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0, network: 0s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0, network: 0s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:00                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0, network: 0s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0001, network: 0s)\n00000000  00:00:00:01                                      ....\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0515, network: 0s)\n00000000  00:00:00:00:00:00:00:8f:50:49:4e:47:20:31:39:32  ........PING 192\n00000010  2e:31:36:38:2e:31:2e:31:20:28:31:39:32:2e:31:36  .168.1.1 (192.16\n00000020  38:2e:31:2e:31:29:3a:20:35:36:20:64:61:74:61:20  8.1.1): 56 data \n00000030  62:79:74:65:73:0a:0a:2d:2d:2d:20:31:39:32:2e:31  bytes..--- 192.1\n00000040  36:38:2e:31:2e:31:20:70:69:6e:67:20:73:74:61:74  68.1.1 ping stat\n00000050  69:73:74:69:63:73:20:2d:2d:2d:0a:31:20:70:61:63  istics ---.1 pac\n00000060  6b:65:74:73:20:74:72:61:6e:73:6d:69:74:74:65:64  kets transmitted\n00000070  2c:20:30:20:70:61:63:6b:65:74:73:20:72:65:63:65  , 0 packets rece\n00000080  69:76:65:64:2c:20:31:30:30:25:20:70:61:63:6b:65  ived, 100% packe\n00000090  74:20:6c:6f:73:73:0a                             t loss.\n-> NET_SSH2_MSG_DISCONNECT (since last: 0.0003, network: 0s)\n00000000  00:00:00:0b:00:00:00:00:00:00:00:00              ............\n```. What's the best workaround currently.\nI'm not using read and write, only exec.. Great thanks, I've updated my copy and I'll keep you posted. \nThanks\nMike. ",
    "Ennorath": "Thank you, it helped me :) @bantu \n. ",
    "Wirone": "Probably related to #243?\n. I had to update library because we wanted application to be PHP7-compatible (0.3.10 has old-fashioned constructors so it does not work), but without changing app's codebase, so I've updated it to 1.*.\nIt is bug in autoloading definition, since there is not any namespace in 1.0 branch (composer thinks its under phpseclib namespace).\n. I think tests should (in bootstrap file) use Composer's autoloading, not set_include_path() since it's not real-world usage strategy (or at least not 100%).\n. No, I did not try, I've fixed it with app's composer.json. I can test it later.\n. Looks good. I've changed my composer.json:\n\"repositories\": [\n    {\n        \"type\": \"vcs\",\n        \"url\": \"https://github.com/terrafrost/phpseclib/\"\n    }\n],\n\"require\": {\n        \"phpseclib/phpseclib\": \"dev-1.0-composer-fix\",\n}\nand package was downloaded and autoloaded correctly.\nBut I suggest to mark it with 1.0.5 since it's a bugfix, and I don't know if Composer works good with such \"a\" suffixes ;-)\n. For me this IS a change in codebase. You maintain and keep versioning of a package and composer.json is integral part of it. If you want to maintain only crypt classes without vendoring it, remove it from Packagist and tell people to download it by hand :-)\nBut I'll not tell you what to do. As far as I know Composer supports 4-level versions (each version is normalized to x.x.x.x format) so you can tag it 1.0.4.1. From my point of view it could be everything which would be valid for ~1.0 constraint with minimum-stability: stable configuration.\n. ",
    "moyarich": "The file existed on the server, before I used the touch function\n here a snippet of the code I used.\n``` php\n$sourceFilePath = getcwd() . DIRECTORY_SEPARATOR .'test_file1.txt';\n$destFilePath = 'test_file1_ftp.txt';\n//** copy file to ftp server\n$copyResult = $sftp->put($destFilePath, $sourceFilePath, $sftp::SOURCE_LOCAL_FILE);\n$sourceModifiedTime = filemtime($sourceFilePath);\n$sourceAccessTime   = fileatime($sourceFilePath);\n$sftp->touch($destFilePath,$sourceModifiedTime,$sourceAccessTime);\n```\n. The file is 0 bytes\n. are you asking what version of phpseclib i am using?\nI used composer to install it\n\"phpseclib/phpseclib\": \"^2.0\"\nthere is no version # in the SFT.php file, but i do see this in the readme file:\n[]\nhttps://travis-ci.org/phpseclib/phpseclib.svg?branch=2.0)\n. ooh sorry, it is a keyfile protected sftp server, I would have to share the info privately\n. I dont know how useful this information is but when i do $sftp->getServerIdentification()\ni get the result : SSH-2.0-ssh2js0.1.11srv\n. # LOG Result:\n\nlog:  mkdir:  NET_SFTP_STATUS_NO_SUCH_FILE:  \nArray ( [0] => -> NET_SFTP_MKDIR (0s) [1] => <- NET_SFTP_STATUS (0.4836s) [2] => -> NET_SFTP_STAT (0s) [3] => <- NET_SFTP_STATUS (0.6084s) [4] => -> NET_SFTP_MKDIR (0s) [5] => <- NET_SFTP_STATUS (0.468s) )\nSFTP Log : 1\n\nPHP Code:\n``` php\ndefine('NET_SFTP_LOGGING', 2);\n$backUpDirectory = '+test_dir';\n$sftp->mkdir($backUpDirectory,-1, true);\nif ($sftp->is_dir($backUpDirectory)){\n    // do nothing, directory already exists\n    echo ' ';\n}\nelse {\n    // create recursive directory\n    $sftp->mkdir($backUpDirectory,-1, true);\n    echo ' ';\n}\necho ' SFTP Log : ' . print_r($sftp->getSFTPLog());\n```\n. @bantu  same result\nmkdir(),  works, is_dir() does not return true\n. ",
    "byinff": "Mmm no, i need to know if this library can cipher encryption encryption end to end like whatsapp or OpenPGP\n. @bantu Thank you very much for the reply, is aware of the library openpgp but referred with multiple public keys? I am wanting to make an example system on whatsapp messages\n. @bantu very thanks for your help\n. ",
    "andrrrl": "You're right @terrafrost, thanks for the explanation, I don't have much expertise in file repositories and their logic. So, moved to 2.0 and that was it.\nBy the way, I finally could make the master branch work by (auto)loading the Paragonie package.\n. @bantu, I just downloaded this folder: https://github.com/phpseclib/phpseclib/tree/master/phpseclib\nAgain I don't have much expertise with repositories, and this is good learning, thanks again!\n. ",
    "AndriySvirin": "$transactionKey = '...';; // binary string\n$orderData = '...'; // binary string\n$aes = new AES(AES::MODE_CBC);\n$aes->disablePadding();\n$iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC));\n$aes->setIV($iv);\n$aes->setKey($transactionKey);\n$data = $aes->decrypt($orderData);\nBut it doesnt decrypt. May be i made mistake. Can you look on it?\n. Yes. I have used native php method. ",
    "magnus-eriksson": "I don't think that an empty string should assume anything on a delete-command. I would expect it to fail if a valid filer or folder aren't explicitly given (with an actual value, that is). As I see it, the delete()-method should be the equivalent of the rm-command, which doesn't work if you haven't explicitly given any file or folder.\nTo delete files and folders in the current path, it should accept '.' instead.\nThat's my thoughts and suggestions, anyway. The ramifications of deleting the wrong files and folders might just be too big, otherwise. Specifically since it's a undocumented behavior. \nBtw, I just realized that it shouldn't have deleted any folders at all, since I didn't pass in true as a second argument. According to the documentation, it should not delete recursively as default, while in the code, you have recursive set to true as default value.\nOther than that, I must say that I think this library is awesome. :)\n. Nice. However, I don't think empty() is a good choice in this context, since it also considers 0 and 0.0 to be empty. Having a folder called 0 is not an unlikely scenario. Wouldn't it be better to do something like:\nif (is_bool($path) || trim((string) $path) === '') {\n    return false;    \n}\nThe is_bool()-check is only there since casting a bool set totrue to string, will be cast as 1 , which we don't want. The other check will only accept a value that is non empty, for real (or rather, that isn't a valid file or folder name). So 0, 0.0 will also be considered a path, which they might be.\nMakes sense?\n. @bantu  - I know that is_bool() is a type check. I updated my explanation in my example.\n. >  I much cleaner solution in my opinion would be having an extra method for deleting recursively.\n^ I agree with this.\n. @terrafrost  - Good point about trim() and folders with trailing spaces. \nJust checking for is_string() will make classes with the magic method __toString() fail. \nMaybe something like this:\n```\nif (is_object($path)) {\n    // It's an object. Cast it as string before we check anything else. \n    $path = (string) $path;\n}\nif (!is_string($path) || $path == '') {\n    return false;\n}\n```\nThis will only accept objects and non empty strings. Integers and floats will fail. Maybe it is a reasonable requirement that you cast the path as string yourself before pass it as an argument to this method?\nRegarding two different methods or not. I don't think it's really fair to compare this library to a GUI. I have never used a GUI that doesn't make me confirm deleting a file or a folder.\nI rather compare this to command line actions. Sure, you usually don't have different commands for deleting files and folders, but you usually need to explicitly set a flag, (like: rm vs rm -R) when deleting folders. I think having a switch as a second param might be fair enough, but it should definitely be set to false as default. \nBasically, the more changes you are about to make, the more explicit you need to be.\n. @terrafrost - Don't think it's necessary to add the overhead of looking for the __toString()-method. Since PHP will throw a fatal error: \"Object of class foo could not be converted to string\" if it doesn't exist, it might actually help developers debugging their code, in those situations.\nI totally get the BC-problem for changing the behavior for recursively deleting folders. This is more of an opinion than a real \"issue\" so, maybe it should be added as a suggestion for an up coming major release?\nThe documentation should be updated, though, so it says that recursive deletes are the default behavior.\n. Nice. Thank you! . ",
    "xian13": "Thank you, from your explanation, I think i know what cause the problem.\nFrom the log, I got :\n<- NET_SFTP_STATUS (0.0004s)\n00000000  00:00:00:01:00:00:00:0b:72:65:61:64:20:66:61:69  ........read fai\n00000010  6c:65:64:00:00:00:00                             led....\n<- NET_SFTP_STATUS (0.0002s)\n00000000  00:00:00:01:00:00:00:0b:72:65:61:64:20:66:61:69  ........read fai\n00000010  6c:65:64:00:00:00:00                             led....\n<- NET_SFTP_STATUS (0.0001s)\n00000000  00:00:00:01:00:00:00:0b:72:65:61:64:20:66:61:69  ........read fai\n00000010  6c:65:64:00:00:00:00                             led....\n<- NET_SFTP_STATUS (0.0001s)\n00000000  00:00:00:01:00:00:00:0b:72:65:61:64:20:66:61:69  ........read fai\n00000010  6c:65:64:00:00:00:00                             led....\nand when i define NET_SFTP_QUEUE_SIZE to some value, the error gone, what I think is that my provider sftp server limit the number of connection, is this correct?\nand when I try to print the log, I got some error :\nUse of undefined constant NET_SFTP_LOG_REALTIME - assumed 'NET_SFTP_LOG_REALTIME' in SFTP.php line 2794\nand\nUse of undefined constant NET_SFTP_LOG_COMPLEX - assumed 'NET_SFTP_LOG_COMPLEX' in SFTP.php line 2800\nMaybe line 2794 need to be updated to using SFTP::LOG_REALTIME and line 2800 to SFTP::LOG_COMPLEX?\n. > What are you using as your server? You can find out by doing $sftp->getServerIdentification();\nSSH-2.0-SwFTP\n\nDoes setting NET_SFTP_QUEUE_SIZE to 32 solve the problem for you? I'd be willing to change it from 50 to 32 in phpseclib.\n\nSometimes it works, sometimes it doesn't work, if i change the number to <= 17 the success chance is high (only some failure in 17), but when i increase to 18 it will have more failure.. I use sftp to connect to OpenStack object storage, for simplicity in code I use sftp, I think the server use this\nBecause you use ! defined, currently i can use define('NET_SFTP_QUEUE_SIZE', 15) before calling in first time, so it is ok.. ",
    "praveenrchauhan": "Hi terrafrost,\nThanks for your reply.\n\nI don't have selinux installed. \nI am using the copy of master branch. stream_select() is now called there at line no. 1068 (may be when I had downloaded it last time, it was at L1065 in that version).\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Net/SSH2.php#L1068\nI had already checked by removing @ from fsockopen and stream_select but there was no warning.\n\n@bantu and @terrafrost Earlier I was using the library without composer but now I have installed the composer and using via it. Now, I can see a warning at that line as follows -\nWarning: stream_select(): You MUST recompile PHP with a larger value of FD_SETSIZE. It is set to 1024, but you have descriptors numbered at least as high as 1041. --enable-fd-setsize=2048 is recommended, but you may want to set it to equal the maximum number of open files supported by your system, in order to avoid seeing this error again at a later date. in <mydir>/phpseclib/Net/SSH2.php on line 1068\nHopefully, if the above issue is solved, then it should work.\nCould you please let me know, if I should actually proceed with increasing the value for FD_SETSIZE or is there any risk involved? \nOr is there an alternative solution?. Hi terrafrost,\nThe value 1024 is hard coded into PHP core. I am not sure that after recompiling PHP with an another value for FD_SETSIZE will actually work or no but that is something which I would prefer as the last option as  there are couple of functionality running on my machine which I don't want to mess up with.\nHowever, I have figured out that the problem is occurring when I run the script via Apache. I am now running my script through Nginx+HHVM and it is working. As of now, this solution is working for me.\nThere seems to be some problem with Apache on my setup when running the SSH script via this library.. ",
    "andrewandante": "I'm not sure who pulled it in first, but I believe that it is determined based on our minimum-stability requirement, which in this case is \"dev\". I believe that if we had our requirements set to \"stable\" we would have pulled in 2.0.x, but we have other packages in unstable versions that we depend on.\nI agree that we should have been tighter on our constraints - so I'm trying to lock it down to ^2.0 at the moment - the problem is that there is currently no tag available that satisfies all constraints - hence the fork.\nWill future releases continue to be PHP 5.6 compliant?\nAlso, I checked out the PR, I don't see a composer.json change, am I just being blind?\nThanks for responding so quickly!. Nice, good to hear. We'll keep an eye on updates. Appreciate the quick feedback and sound reasoning!. ",
    "Fauxil-Fox": "Any update?. ",
    "jimmaay": "Looks like it's 1.0, I'll try upgrading in the future and report back. One thing to note is that it didn't happen in the past so it's probably an incompatibility with the newer openssh. 1.0.0\nOn Tue, Dec 6, 2016 at 2:48 PM, terrafrost notifications@github.com wrote:\n\nWhat version of 1.0? 1.0 is a branch - the tagged versions are 1.0.0 -\n1.0.5.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1069#issuecomment-265298259,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFMB_did5JDQ1SmVhx5Mfe42Yorkrz1kks5rFeYxgaJpZM4LDcO8\n.\n. Yeah I'll try upgrading later in the future and report back. For now I just patched mine with an is_array check. \n",
    "lintaba": "Having the same issue with the latest (2.0.6) branch.\nFatalThrowableError in SFTP.php line 1139:\nCannot use object of type stdClass as array\nIt seems to happen during copy, when the destination folder does not exists.\n. ",
    "vg-github": "The command I'm using for reading is this:\n$read = $sshObj->read( '/root[@]'. preg_quote( $hostname ) .':~[#]/', 2 );\nWhen sending the command I'm doing it like this:\n$sshObj->write(\"{$cmd} \". PHP_EOL );\n...where PHP_EOLis UNIX' \\n. cool, many thanks!. what do I do next?. ",
    "romanshul": "I had an error with my version of PHP.. ",
    "freekmurze": "@terrafrost using dev-master I was able to get the properties of a certificate issued by Let's Encrypt. Thanks.\nDo you know how, using X509, to get the properties of this certificate downloaded from https://coolblue.be?. ",
    "ytilotti": "I have a warning : Warning: Attempt to assign property of non-object in /phpseclib/Net/SFTP.php on line 1112. ",
    "cryptogenesis": "Thank you for the reply! I'm using standard $ssh->write and then $ssh->read, I enabled logging and here's what some of the output looks like (I imagine the since last: seems to show this delay I am experiencing?)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.4278, network: 0.0001s)\n00000000  00:00:00:01:00:00:00:13:75:62:75:6e:74:75:40:6c  ........ubuntu@l\n00000010  69:32:30:34:2d:36:35:3a:7e:24:20                 i204-65:~$ \n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 9.1794, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:07:6c:73:20:2d:6c:61:0a     ........ls -la.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:13:75:62:75:6e:74:75:40:6c  ........ubuntu@l\n00000010  69:32:30:34:2d:36:35:3a:7e:24:20                 i204-65:~$ \n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 10.0057, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:08:73:75:64:6f:20:73:75:0a  ........sudo su.\nUpdate-- I set the timeout to 1 second and the commands all run quickly now -- not sure I understand the relationship to the timeout when using interactive shell, any input greatly appreciated.\n. ",
    "MoAlyan": "ops, you are right. include was using phpseclib that installed with magento by default.\nbut i replaced the files and now it's working fine. Thank you\nkeep up the good work \ud83d\udc4d . ",
    "CFRR": "Hi,\n@metaclassing, this would be a good approach, if the limit was not 100.\n@terrafrost, thanks, can you help me a lite more, please!?\nI test the code that you suggest, and I'm getting the following error:\n>PHP Warning:  preg_match(): No ending delimiter '#' found in .../Net/SSH2.php on line 2797\nThe Code:\n```\n<?php\ninclude('Net/SSH2.php');\n$ssh = new Net_SSH2('');\nif (!$ssh->login('admin', '')) {\n    exit('Login Failed');\n}\n$ssh->enablePTY();\necho $ssh->read('#');\n$ssh->write(\"clish\\n\");\necho $ssh->read('>');\n$ssh->write(\"lock database override\\n\");\necho $ssh->read('>');\n$ssh->write(\"set virtual-system 3\\n\");\necho $ssh->read('>');\n$ssh->write(\"show configuration\\n\");\nwhile ($output = $ssh->read('#--More--|[>]', NET_SSH2_READ_REGEX)) {\n    if (!preg_match('#--More--$#', $output)) {\n        break;\n    }\n    $ssh->write(' ');\n}\n?>\n```. @metaclassing, you are right, the \"set clieenv rows 0\" will show all configuration without stop! \ud83d\udc4d . ",
    "swartzlib7": "I do work on Cisco devices. I simply send the command \"terminal length 0\" as follow:\n$ssh->write(\"terminal length 0\\n\");\nAfter that I do not need to look for and handle \"--More--\" in my processing.\nRef: http://etherealmind.com/ios-setting-terminal-window-length/. Thank you @terrafrost - appreciate it a lot!. ",
    "ivanweiler": "Fantastic, thanks !!. ",
    "dlaugh14": "php\ninclude('Net/SFTP.php');\n\n<p$sftp = new Net_SFTP('www.domain.tld');\nif (!$sftp->login('username', 'password')) {\n    exit('Login Failed');\n}\n// outputs the contents of filename.remote to the screen\necho $sftp->get('filename.remote');\n// copies filename.remote to filename.local from the SFTP server\n$sftp->get('filename.remote', 'filename.local');\n?>\ni'm using this sample documentation code to access an sftp server and get a file of data and it needs to be secure, but I'm getting this warning. Is there a fix for this?\nPHP version 5.3.23. I thought that the $sftp->get function uses an encrypted connection. Is that correct?. ",
    "ivpfals": "I've also faced the exact same problem. Running PHP 7.0.19 on a stone-old Red Hat 5.7 machine with OpenSSL 0.9.8b I've got:\nWarning: openssl_encrypt(): Using an empty Initialization Vector (iv) is potentially insecure and not recommended in file phpseclib/Crypt/Base.php, line #1311\nRunning the same code on a redhat 7 system with openssl 1.0.1e I've got no warning at all. \nIf required I can provide SSH logs.\n. Okay, here's the log. The code performed a simple connect/login, nothing more. Logfile contains complete output of CLI execution.\nopenssl_encrypt.txt\n. Hi,\nthanks for your feedback. Commenting out the lines you've mentioned solved the connection problem, so your assumption seems to be correct :)\nUnfortunately I cannot change the destination server, so I would go and leave these two arcfour algos commented out. \nAlso I've attached here the log of the connection with arcfour128/256 enabled, so you may find a workaround for it.\nAny chance to make these arcfour algos configurable ? I really would like to be in sync with updates of your libraries, and changing the code on my own to disable them makes it harder to update your libs...\nA big thank you for your superb work!!!\nBest regards,\nSascha\nlog.txt\n. Ah okay I see! So I will wait, too and for the time being document the code change in my project, so that I won't forget it when updating phpseclib.\n. FYI: I've got now the information what exactly was running on the serverside:\nProFTPd with mod_sftp running on Linux (SLES 12sp2)\nThere is also a problem with SFTP Protocol Version 3, if this is enabled on ProFTPd it is not possible to fetch the dirlist using rawlist()! \nThe Admin changed the Protocol Version to 2 and rawlist() works, so there seems to be some kind of incompatibility between phpseclib 1.0/2.0 and SFTP v3.\n. Thanks for the fix, just tested it and it works as expected, no longer any \"size error\" messages!. ",
    "jingjingyangdd01": "in php7.2. ",
    "mattemod": "Hello,\nI'm having this problem too with phpseclib 1.0.14 on an old CentOS.\nThe problem is simple: the PHP manual clearly states that openssl_encrypt() \"Emits an E_WARNING level error if an empty value is passed in via the iv parameter\" ( https://secure.php.net/manual/en/function.openssl-encrypt.php ) and this surely happens in Crypt/Base.php on lines 755, 757, 1062, 1069, 1352, 1363 and 1407 where the IV argument is not passed at all.\nFixing these lines by adding an appropriate IV argument (if / when possible) would solve the problem. I hope to see that fix in phpseclib 1.0.15 ;)\nI don't know if this happens in phpseclib 2.0 too: I'm unable to upgrade my application at the moment.\nAs a workaround I had to disable Warnings right before the affected parts of my code (and re-enable them right after), which is not ideal at all.\nThanks in advance!. Hello @terrafrost , I don't care much about harsh as long as it's not aggressive and explains things like you did.\nWhy not suppress just E_WARNING right before those 7 lines I wrote and re-activate it right after?\nExample for line 755:\n  $errRep = error_reporting(error_reporting() & ~E_WARNING);\n  $oeRet = openssl_encrypt($plaintext, $this->cipher_name_openssl, $this->key, $this->openssl_options);\n  error_reporting($errRep);\n  return $oeRet;\nThis would avoid:\n  1. dozens of PHP Warnings (or hundreds, DK, my shell buffer exhausted while uploading 24 files via SFTP);\n  2. doing the same thing outside phpseclib and consequently...\n  3. ...blocking other legit Warnings generated in phpseclib or even outside of it, if people include other code inside those \"no-Warnings-blocks\".\nIMO it has a very minor performance impact, something I personally wouldn't sweat about.\nActually, I think writing on stderr (or even worse on file) has a greater performance impact, so things should also be smoother for those of us who have the problem.\nIf you don't like that it's gonna be executed for everyone and you know the problem is the OpenSSL version, you could put it in an if(OPENSSL_VERSION_NUMBER < xyz) block so that it gets executed only for those of us who have said problem, solving the performance impact for other people.\nLet me know what you think.. > I think you're right. I guess I'll do it this weekend!\nGreat! :)\n\nIn the mean time, could you post your phpinfo()? If bantu is right about the OpenSSL version maybe knowing which version you're using could enable me to reproduce the issue and then do the version checks. At that point that could kinda clue in me into what to look for in the OpenSSL sources as well maybe idk lol.\n\nUnfortunately I can't post the phpinfo() because the system is not mine, but I can tell you it's PHP 5.3.10 on a CentOS 5.8 with OpenSSL 0.9.8e-fips-rhel5 01 Jul 2008.\nIn my case the Warning was issued at line 1069.\n\nI think the \"if\" approach would be the optimal one but for that to work the right condition has to be found.\n\nOf course. It could also be that the 7 lines issue Warnings with different OpenSSL versions (I'm totally guessing), so that you'd need 7 different versions for a perfect approach.\nIt'd probably require a lot of time to do so by yourself, so you can either just use the maximum of the 7 versions for all lines, or you could use multiple versions in an \"incremental\" approach, where you use the maximum version reported by people here. For example you could use 0.9.8e for line 1069 (I reported it) and 0.9.8b for line \"1311\" (reported by @ivpfals , which should tell you the phpseclib version he used since line 1311 is not in the 7 I wrote for 1.0.14).\nJust throwing some ideas around, do what you want with them :)\n\nThanks!\n\nYou're welcome and thank you!. ",
    "JRawly": "Hey, \nI was just writing up a sample for you (I did mean to include one when opening), but the disablePadding works excellently! Thank you!\nMuch appreciated @terrafrost \nJoe. ",
    "nodesocket": "@terrafrost thanks for the reply. Do you know if the native php ssh2 library supports jump/bastion hosts? I see there is a function ssh2_tunnel() but there is very little documentation on how to use it.. ",
    "shahroznawaz": "So any other way to configure it?. Thanks @bantu I tried this but it didn't working.\n`namespace AppBundle\\Controller;\n    use phpseclib\\Net\\SFTP;\n    use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n    use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n    use Symfony\\Component\\HttpFoundation\\Request;\n    class DefaultController extends Controller\n    {\n    /*\n     * @Route(\"/\", name=\"homepage\")\n     /\n    public function indexAction(Request $request)\n    {\n        $sftp = new SFTP('46.xxxx.5.xx3');\n    if (!$sftp->login('mastexxxxxxxxkh', 'f6xxxxx6')) {\n        throw new \\Exception('Cannot login into your server !');\n    }\n    else echo $sftp;\n    // replace this example code with whatever you need\n    return $this->render('default/test.html.twig', [\n        'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..').DIRECTORY_SEPARATOR,\n    ]);\n   }\n}`\n\nAny Idea what's wrong?. yes it's giving 500 internal error. ",
    "Stormyy": "See pastebin in top post, or is the encoding messed up in that post?\nIt happens when a certain commands gets executed in the program that runs in screen. Output is in pastebin.. ",
    "hifiSteven": "thank you for your reply, that is probably it . ",
    "CharleysTante": "@terrafrost thanks for the code snippet. Unfortunately, it doesn't work with the current version 2 of phpseclib :-( So, I changed your code in the below one. However, it works only without a passphrase for the rsa key:\n```php\n<?php\nrequire \"vendor/autoload.php\";\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Net\\SSH2;\n$rsa = new RSA();\n$rsa->loadKey(file_get_contents('key/key.ppk'));\n// set a key passphrase dosen't work in this case\n// $rsa->setPassword('passphrase'); \n$ssh = new SSH2('www.domain.tld');\nif (!$ssh->login('username', 'password', $rsa)) {\n    exit('Login failed');\n}\necho $ssh->exec('pwd');\necho $ssh->exec('ls -la');\n```\nIf I try the code above with the SFTP class instead of SSH2 it doesn't work. So the feature request for phpseclib is to get it run with SFTP in the same way like SSH2 and to use a passphrase if required.. @terrafrost first and foremost, thanks a lot for your detailed answer :-) I've found my passphrase issue exists on Windows 7 ony. On UBUNTU 16.04 a key with passphrase works fine for me if I use the SSH2 class, but not with the SFTP class. BTW, I use phpseclib 2.0.4 too.\nSo, I insert into my script the getLog() method and got this result:\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:53:69:6c:76:65:72:53:48  SSH-2.0-SilverSH\n00000010  69:65:6c:44:0d:0a                                ielD..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.158, network: 0.0405s)\n00000000  01:80:4a:37:c6:80:e5:6e:2e:39:9e:07:f1:55:0e:92  ..J7...n.9...U..\n00000010  00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...Ydiffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61  llman-group1-sha\n00000050  31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e  1,diffie-hellman\n00000060  2d:67:72:6f:75:70:31:34:2d:73:68:61:31:00:00:00  -group14-sha1...\n00000070  07:73:73:68:2d:72:73:61:00:00:01:71:33:64:65:73  .ssh-rsa...q3des\n00000080  2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:62  -cbc,blowfish-cb\n00000090  63:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62:63  c,twofish256-cbc\n000000a0  2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63:2c  ,twofish192-cbc,\n000000b0  74:77:6f:66:69:73:68:31:32:38:2d:63:62:63:2c:61  twofish128-cbc,a\n000000c0  65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:39:32  es256-cbc,aes192\n000000d0  2d:63:62:63:2c:61:65:73:31:32:38:2d:63:62:63:2c  -cbc,aes128-cbc,\n000000e0  73:65:72:70:65:6e:74:32:35:36:2d:63:62:63:2c:73  serpent256-cbc,s\n000000f0  65:72:70:65:6e:74:31:39:32:2d:63:62:63:2c:73:65  erpent192-cbc,se\n00000100  72:70:65:6e:74:31:32:38:2d:63:62:63:2c:61:72:63  rpent128-cbc,arc\n00000110  66:6f:75:72:2c:69:64:65:61:2d:63:62:63:2c:63:61  four,idea-cbc,ca\n00000120  73:74:31:32:38:2d:63:62:63:2c:64:65:73:2d:63:62  st128-cbc,des-cb\n00000130  63:2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  c,aes128-ctr,aes\n00000140  31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63  192-ctr,aes256-c\n00000150  74:72:2c:33:64:65:73:2d:63:74:72:2c:62:6c:6f:77  tr,3des-ctr,blow\n00000160  66:69:73:68:2d:63:74:72:2c:74:77:6f:66:69:73:68  fish-ctr,twofish\n00000170  31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68:31  128-ctr,twofish1\n00000180  39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32:35  92-ctr,twofish25\n00000190  36:2d:63:74:72:2c:73:65:72:70:65:6e:74:31:32:38  6-ctr,serpent128\n000001a0  2d:63:74:72:2c:73:65:72:70:65:6e:74:31:39:32:2d  -ctr,serpent192-\n000001b0  63:74:72:2c:73:65:72:70:65:6e:74:32:35:36:2d:63  ctr,serpent256-c\n000001c0  74:72:2c:69:64:65:61:2d:63:74:72:2c:63:61:73:74  tr,idea-ctr,cast\n000001d0  31:32:38:2d:63:74:72:2c:61:72:63:66:6f:75:72:31  128-ctr,arcfour1\n000001e0  32:38:2c:61:72:63:66:6f:75:72:32:35:36:00:00:01  28,arcfour256...\n000001f0  71:33:64:65:73:2d:63:62:63:2c:62:6c:6f:77:66:69  q3des-cbc,blowfi\n00000200  73:68:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  sh-cbc,twofish25\n00000210  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39:32  6-cbc,twofish192\n00000220  2d:63:62:63:2c:74:77:6f:66:69:73:68:31:32:38:2d  -cbc,twofish128-\n00000230  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:61  cbc,aes256-cbc,a\n00000240  65:73:31:39:32:2d:63:62:63:2c:61:65:73:31:32:38  es192-cbc,aes128\n00000250  2d:63:62:63:2c:73:65:72:70:65:6e:74:32:35:36:2d  -cbc,serpent256-\n00000260  63:62:63:2c:73:65:72:70:65:6e:74:31:39:32:2d:63  cbc,serpent192-c\n00000270  62:63:2c:73:65:72:70:65:6e:74:31:32:38:2d:63:62  bc,serpent128-cb\n00000280  63:2c:61:72:63:66:6f:75:72:2c:69:64:65:61:2d:63  c,arcfour,idea-c\n00000290  62:63:2c:63:61:73:74:31:32:38:2d:63:62:63:2c:64  bc,cast128-cbc,d\n000002a0  65:73:2d:63:62:63:2c:61:65:73:31:32:38:2d:63:74  es-cbc,aes128-ct\n000002b0  72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73  r,aes192-ctr,aes\n000002c0  32:35:36:2d:63:74:72:2c:33:64:65:73:2d:63:74:72  256-ctr,3des-ctr\n000002d0  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:74:77  ,blowfish-ctr,tw\n000002e0  6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f  ofish128-ctr,two\n000002f0  66:69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66  fish192-ctr,twof\n00000300  69:73:68:32:35:36:2d:63:74:72:2c:73:65:72:70:65  ish256-ctr,serpe\n00000310  6e:74:31:32:38:2d:63:74:72:2c:73:65:72:70:65:6e  nt128-ctr,serpen\n00000320  74:31:39:32:2d:63:74:72:2c:73:65:72:70:65:6e:74  t192-ctr,serpent\n00000330  32:35:36:2d:63:74:72:2c:69:64:65:61:2d:63:74:72  256-ctr,idea-ctr\n00000340  2c:63:61:73:74:31:32:38:2d:63:74:72:2c:61:72:63  ,cast128-ctr,arc\n00000350  66:6f:75:72:31:32:38:2c:61:72:63:66:6f:75:72:32  four128,arcfour2\n00000360  35:36:00:00:00:dd:68:6d:61:63:2d:73:68:61:31:2c  56....hmac-sha1,\n00000370  68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61  hmac-sha1-96,hma\n00000380  63:2d:6d:64:35:2c:68:6d:61:63:2d:6d:64:35:2d:39  c-md5,hmac-md5-9\n00000390  36:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  6,hmac-ripemd160\n000003a0  2c:68:6d:61:63:2d:72:69:70:65:6d:64:2c:68:6d:61  ,hmac-ripemd,hma\n000003b0  63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70:65:6e  c-ripemd160@open\n000003c0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61  ssh.com,hmac-sha\n000003d0  32:35:36:40:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  256@ssh.com,hmac\n000003e0  2d:73:68:61:32:35:36:2d:39:36:40:73:73:68:2e:63  -sha256-96@ssh.c\n000003f0  6f:6d:2c:75:6d:61:63:2d:33:32:40:6f:70:65:6e:73  om,umac-32@opens\n00000400  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40:6f  sh.com,umac-64@o\n00000410  70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d  penssh.com,umac-\n00000420  39:36:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75  96@openssh.com,u\n00000430  6d:61:63:2d:31:32:38:40:6f:70:65:6e:73:73:68:2e  mac-128@openssh.\n00000440  63:6f:6d:00:00:00:dd:68:6d:61:63:2d:73:68:61:31  com....hmac-sha1\n00000450  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n00000460  61:63:2d:6d:64:35:2c:68:6d:61:63:2d:6d:64:35:2d  ac-md5,hmac-md5-\n00000470  39:36:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36  96,hmac-ripemd16\n00000480  30:2c:68:6d:61:63:2d:72:69:70:65:6d:64:2c:68:6d  0,hmac-ripemd,hm\n00000490  61:63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70:65  ac-ripemd160@ope\n000004a0  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n000004b0  61:32:35:36:40:73:73:68:2e:63:6f:6d:2c:68:6d:61  a256@ssh.com,hma\n000004c0  63:2d:73:68:61:32:35:36:2d:39:36:40:73:73:68:2e  c-sha256-96@ssh.\n000004d0  63:6f:6d:2c:75:6d:61:63:2d:33:32:40:6f:70:65:6e  com,umac-32@open\n000004e0  73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40  ssh.com,umac-64@\n000004f0  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63  openssh.com,umac\n00000500  2d:39:36:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  -96@openssh.com,\n00000510  75:6d:61:63:2d:31:32:38:40:6f:70:65:6e:73:73:68  umac-128@openssh\n00000520  2e:63:6f:6d:00:00:00:1a:6e:6f:6e:65:2c:7a:6c:69  .com....none,zli\n00000530  62:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63  b,zlib@openssh.c\n00000540  6f:6d:00:00:00:1a:6e:6f:6e:65:2c:7a:6c:69:62:2c  om....none,zlib,\n00000550  7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  zlib@openssh.com\n00000560  00:00:00:00:00:00:00:00:00:00:00:00:00           .............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.027, network: 0.0005s)\n00000000  f1:af:13:2c:69:b0:69:8f:b1:88:c3:ae:4e:87:76:2a  ...,i.i.....N.v*\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0225, network: 0s)\n00000000  00:00:00:80:5d:8c:ef:d4:a2:1b:ed:32:de:ad:92:48  ....]......2...H\n00000010  bc:c9:d3:30:0f:2f:f3:69:27:16:06:5c:64:fd:2d:ac  ...0./.i'..\\d.-.\n00000020  aa:d8:3f:7a:f2:6b:39:6f:3e:78:40:df:59:97:df:38  ..?z.k9o>x@.Y..8\n00000030  5c:06:91:77:8b:ef:e1:08:9f:b8:a7:57:57:37:2b:86  ..w.......WW7+.\n00000040  44:95:1a:7b:b1:f6:73:c1:86:d0:7d:9e:28:f7:9c:13  D..{..s...}.(...\n00000050  91:24:36:23:1c:59:1d:a6:96:e8:66:3d:a3:3f:6f:1d  .$6#.Y....f=.?o.\n00000060  c7:72:20:6a:14:3c:39:41:85:17:46:42:5d:b3:27:40  .r j..9A..FB].'@\n00000070  b3:42:64:ba:1b:1b:d4:60:68:47:bc:dc:12:2d:4a:6c  .Bd....`hG...-Jl\n00000080  eb:23:56:ef                                      .#V.\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.064, network: 0.0635s)\n00000000  00:00:00:97:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:00:81:00:b1:0a:a0:00:ce  ................\n00000020  1a:d4:30:cd:e0:71:52:3d:86:99:24:12:52:95:3d:0f  ..0..qR=..$.R.=.\n00000030  2e:7c:36:d1:0f:95:78:59:23:ea:03:be:7f:94:95:eb  .|6...xY#.......\n00000040  ec:78:28:b8:92:16:12:b3:44:e8:c7:c0:7c:8f:91:53  .x(.....D...|..S\n00000050  e9:39:56:94:7a:b8:50:f3:76:08:09:bd:40:e4:c2:c3  .9V.z.P.v...@...\n00000060  d9:f7:80:1b:75:b2:25:2f:c2:b1:20:68:d2:af:ae:8c  ....u.%/.. h....\n00000070  55:92:7d:c2:fb:1e:7e:38:ed:63:07:67:4c:f3:b3:12  U.}...~8.c.gL...\n00000080  31:72:e4:11:c7:a1:25:6f:fd:a6:b5:08:65:a8:02:10  1r....%o....e...\n00000090  29:d5:61:0e:11:99:d6:81:ed:15:cf:00:00:00:81:00  ).a.............\n000000a0  f9:40:15:1b:ee:f9:9a:23:37:81:f7:9c:5f:91:f5:5f  .@.....#7.....\n000000b0  d1:94:bf:3b:48:8c:74:58:3d:1d:a1:91:36:83:8a:1a  ...;H.tX=...6...\n000000c0  ff:3e:de:b2:8a:63:f4:21:3f:df:d4:6c:a2:d4:95:f1  .>...c.!?..l....\n000000d0  9a:73:28:6c:e3:38:c0:da:d0:eb:92:f8:17:97:2e:e0  .s(l.8..........\n000000e0  46:c2:ec:18:de:f5:c8:c4:f0:79:2e:c0:00:1f:16:6f  F........y.....o\n000000f0  ef:03:4a:74:e6:33:74:e6:8c:65:63:0a:dc:b6:d7:71  ..Jt.3t..ec....q\n00000100  6e:6c:f2:d1:7a:b6:ec:22:18:04:18:54:28:dc:4d:8a  nl..z..\"...T(.M.\n00000110  32:d7:e8:39:b9:25:10:3d:e0:50:57:4d:e2:3a:ee:a4  2..9.%.=.PWM.:..\n00000120  00:00:00:8f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000130  00:00:80:74:8a:f5:ed:68:9c:71:34:c5:e4:c9:6e:3b  ...t...h.q4...n;\n00000140  39:3a:99:03:3e:10:94:72:c6:40:de:5d:a4:ed:1e:05  9:..>..r.@.]....\n00000150  8a:cd:02:d8:1f:03:9b:83:62:24:cb:d8:5b:59:a1:71  ........b$..[Y.q\n00000160  4c:8d:ad:65:f6:aa:82:15:b4:db:de:ca:23:a1:9c:b6  L..e........#...\n00000170  85:23:d3:a0:72:be:44:41:62:f8:af:72:6a:78:11:8f  .#..r.DAb..rjx..\n00000180  f2:3a:5c:81:6a:6b:d6:28:d4:f5:b1:05:89:d7:8c:bf  .:.jk.(........\n00000190  54:0d:b8:8f:72:39:07:c7:e2:66:b1:c6:bd:50:a9:77  T...r9...f...P.w\n000001a0  45:8b:9b:80:f1:d5:70:29:8c:08:ba:82:07:c8:28:4d  E.....p)......(M\n000001b0  e1:40:ec                                         .@.\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0185, network: 0.0005s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0455, network: 0.0455s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.007, network: 0.0005s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.04, network: 0.039s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.001, network: 0.0005s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_FAILURE (since last: 1.547, network: 1.5465s)\n00000000  00:00:00:09:70:75:62:6c:69:63:6b:65:79:01        ....publickey.\n```. First and foremost, many thanks for your great help :-)\n\nAre you sure you're using the same key on both? I'd try doing echo $rsa; on Windows 7.\n\nYes, I'm sure, because I use a share folder under Windows which is also used in Ubuntu. But you idea to do echo $rsa was right. So I found I used in my sftp example the wrong method to get the RSA key, instead of loadKey() I used setPrivateKey(). Now everything works fine, even with Windows 7 ;-)\nFor all all the others with similar issues here my running code:\n```\n<?php\n// tested with PHP 5.6.3\nrequire 'vendor/autoload.php';\nuse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Net\\SFTP;\n// just for debugging\ndefine('NET_SSH2_LOGGING', 2);\n$sftp = new SFTP('sftp1.live.novumbankgroup.com');\n$rsa  = new RSA();\n// if the private key has a passphrase we set that first\n$rsa->setPassword('passwordphrase');\n// next load the private key using file_gets_contents to retrieve the key\n$rsa->loadKey(file_get_contents('.ssh/key.ppk'));\nif (!$sftp->login('username', 'password', $rsa)) {\n    // just for debugging\n    echo '<pre>'\n        . $sftp->getLog()\n        .'</pre>';\n        throw new Exception('Login failed');\n}\nvar_dump($sftp->nlist());\n// 'test.txt' file to upload\nif (!$fp = fopen('./test.txt', 'r')) {\n    throw new Exception('To read file failed');\n}\nif ($sftp->put('/in/test.txt', $fp)) {\n    echo 'File upload successful';\n}\nelse {\n    echo 'File upload failed';\n}\nfclose($fp);\necho $sftp->exec('pwd');\necho $sftp->exec('ls -la');\n```. ",
    "f4cklangzi": "everytime i new sftp or ssh2 , did i need close it?how?. There is another problem\uff0cwhen i use sftp->get() a file,and every time just get a part of the file.... When i get a 10M file,My PHP code has been no response, so I can not get LOG. http://dating.qihetimes.com/phpseclib.log it's log,and the php is not response,Only get part of the file. ",
    "abdalovalex": "ok, i will try)\nlog\n\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  36:2e:36:2e:31:70:31:20:44:65:62:69:61:6e:2d:34  6.6.1p1 Debian-4\n00000020  7e:62:70:6f:37:30:2b:31:0d:0a                    ~bpo70+1..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n\n\nI thinking, this is connection problem.\nWhen connection's socket does not open correctly, timeout option work perfectly.\nBut if socket open correctly, for stream_get_contents this option does not used.\nMy simple solution, after fsockopen \u0430ppend\n\nstream_set_timeout($this->fsock, $this->timeout)\n. \n",
    "forrest79": "Hi, I think, that I have issue related to this. I have some long run SSH commands (~minutes). When I set $timeout = 0, exec() function still return FALSE after ~4 minutes. When I set timeout to something big (like 100000) everything is OK. I think, that it's because with $timeout = 0 is set big timeout to fsockopen, but there is never call stream_select() with timeout setting. Call stream_set_timeout() after connect could solve this.. Hi, thanks, I can confirm that it works good now.. ",
    "gandra": "@GrahamCampbell ,\nI have seen my password in the stacktrace. I think this should not happen. Password should not appear in the stacktrace.. ",
    "1ma": "You are right, I jumped to a hasty conclusion. It's only php://input that returns false (and HTTP  resources \u00e0 la fopen('https://google.com', 'r'), that's all I've found).\nAs it happens I am working with the Slim framework, and it's RequestBody class does exactly this with the input stream, and it works just fine when I pass that copied resource to SFTP::put(). I agree, maybe phpseclib should know when its apropriate to do this itself.\nPD mind that the wrapper_type of HTTP resources is http. Since I don't know all the combinations of wrapper_type and stream_type that can be problematic, I believe a better approach might be \"try fstat, if it fails then try stream_copy_to_stream and fstat again\".. I don't follow. Looking at the code seems like $fp is guaranteed to be a resource at that point. OTOH I can't fathom why would anyone want to pass an mcrypt_module_open resource as the $data argument of SFTP::put :thinking: .\nBut then again this is the first time I peek at phpseclib code and you are its main author, so you sure see farther than I do.. Awesome :smile: Thank you, man.. Sorry to be so insistent - but can you push yesterday releases to Packagist? :) Thanks again.. Now it does for me too.. ",
    "DelightedD0D": "I've tried calling this against two servers, here are the results:\nCommand sent\nC:\\Python27\\python.exe c:/maestro/__main__.py --process-report hourly_visitor -test\nResponse note the h\nusage: __main__.py [-h] --process-report [REPORT_TRIGGER] [-test] [--to TO [TO ...]] __main__.py: error: unrecognized arguments: -testh\nSHH logs\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  37:2e:34:0d:0a                                   7.4..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1495, network: 0.0002s)\n00000000  5a:6b:16:1a:20:56:4e:9d:47:11:8d:5b:5e:6f:b0:d2  Zk.. VN.G..[^o..\n00000010  00:00:01:02:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\n00000020  68:61:32:35:36:2c:63:75:72:76:65:32:35:35:31:39  ha256,curve25519\n00000030  2d:73:68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f  -sha256@libssh.o\n00000040  72:67:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73  rg,ecdh-sha2-nis\n00000050  74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32:2d  tp256,ecdh-sha2-\n00000060  6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73:68  nistp384,ecdh-sh\n00000070  61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66:66  a2-nistp521,diff\n00000080  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000090  2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35:36  -exchange-sha256\n000000a0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000b0  67:72:6f:75:70:31:36:2d:73:68:61:35:31:32:2c:64  group16-sha512,d\n000000c0  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n000000d0  6f:75:70:31:38:2d:73:68:61:35:31:32:2c:64:69:66  oup18-sha512,dif\n000000e0  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n000000f0  70:31:34:2d:73:68:61:32:35:36:2c:64:69:66:66:69  p14-sha256,diffi\n00000100  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31  e-hellman-group1\n00000110  34:2d:73:68:61:31:00:00:00:41:73:73:68:2d:72:73  4-sha1...Assh-rs\n00000120  61:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c:72  a,rsa-sha2-512,r\n00000130  73:61:2d:73:68:61:32:2d:32:35:36:2c:65:63:64:73  sa-sha2-256,ecds\n00000140  61:2d:73:68:61:32:2d:6e:69:73:74:70:32:35:36:2c  a-sha2-nistp256,\n00000150  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:3e:63  ssh-ed25519...>c\n00000160  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n00000170  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n00000180  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000190  74:72:2c:61:65:73:32:35:36:2d:63:74:72:00:00:00  tr,aes256-ctr...\n000001a0  3e:63:68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33  >chacha20-poly13\n000001b0  30:35:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61  05@openssh.com,a\n000001c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000001d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:00  -ctr,aes256-ctr.\n000001e0  00:00:d5:75:6d:61:63:2d:36:34:2d:65:74:6d:40:6f  ...umac-64-etm@o\n000001f0  70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d  penssh.com,umac-\n00000200  31:32:38:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e  128-etm@openssh.\n00000210  63:6f:6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35  com,hmac-sha2-25\n00000220  36:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f  6-etm@openssh.co\n00000230  6d:2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2d  m,hmac-sha2-512-\n00000240  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000250  68:6d:61:63:2d:73:68:61:31:2d:65:74:6d:40:6f:70  hmac-sha1-etm@op\n00000260  65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:36  enssh.com,umac-6\n00000270  34:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d  4@openssh.com,um\n00000280  61:63:2d:31:32:38:40:6f:70:65:6e:73:73:68:2e:63  ac-128@openssh.c\n00000290  6f:6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  om,hmac-sha2-256\n000002a0  2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68  ,hmac-sha2-512,h\n000002b0  6d:61:63:2d:73:68:61:31:00:00:00:d5:75:6d:61:63  mac-sha1....umac\n000002c0  2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e  -64-etm@openssh.\n000002d0  63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d:65:74:6d  com,umac-128-etm\n000002e0  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61  @openssh.com,hma\n000002f0  63:2d:73:68:61:32:2d:32:35:36:2d:65:74:6d:40:6f  c-sha2-256-etm@o\n00000300  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000310  73:68:61:32:2d:35:31:32:2d:65:74:6d:40:6f:70:65  sha2-512-etm@ope\n00000320  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n00000330  61:31:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e:63  a1-etm@openssh.c\n00000340  6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e:73  om,umac-64@opens\n00000350  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:40  sh.com,umac-128@\n00000360  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000370  2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73  -sha2-256,hmac-s\n00000380  68:61:32:2d:35:31:32:2c:68:6d:61:63:2d:73:68:61  ha2-512,hmac-sha\n00000390  31:00:00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e  1....none....non\n000003a0  65:00:00:00:00:00:00:00:00:00:00:00:00:00        e.............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0362, network: 0.0001s)\n00000000  89:0d:a2:94:dd:8c:7b:fd:41:15:c9:cb:e7:2a:38:a7  ......{.A....*8.\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0325, network: 0.0001s)\n00000000  00:00:01:00:05:ae:2a:f0:3b:68:71:ec:c8:91:19:7e  .......;hq....~\n00000010  26:3d:7b:16:87:b2:3a:c0:8b:10:4c:0b:14:4e:e0:2e  &={...:...L..N..\n00000020  31:4f:2b:48:49:e2:d0:97:65:8f:e6:66:74:8d:4c:3a  1O+HI...e..ft.L:\n00000030  35:a2:49:1f:1b:4e:3f:6b:b7:11:ac:54:5b:e2:05:8d  5.I..N?k...T[...\n00000040  80:0b:99:c4:89:ab:af:05:e7:47:77:0c:73:f4:bb:90  .........Gw.s...\n00000050  6c:86:73:01:68:46:61:00:7c:e6:9f:29:a4:ea:3a:d2  l.s.hFa.|..)..:.\n00000060  85:5a:16:ca:00:25:65:4a:f1:21:43:5f:d5:b1:54:c3  .Z...%eJ.!C_..T.\n00000070  1f:64:9c:47:6d:d8:58:02:6f:ea:a0:56:90:6a:4d:cc  .d.Gm.X.o..V.jM.\n00000080  33:f4:2f:4c:06:1d:14:85:ff:5e:59:8c:63:bd:f1:e6  3./L.....^Y.c...\n00000090  dc:07:a6:85:a8:2f:2d:a7:83:e4:d1:8d:34:45:c1:bc  ...../-.....4E..\n000000a0  42:30:5d:66:56:c4:4a:98:33:88:cd:17:6f:90:cd:61  B0]fV.J.3...o..a\n000000b0  1c:03:32:64:cf:03:60:77:8a:1f:09:e2:ed:66:5e:3e  ..2d..`w.....f^>\n000000c0  67:62:70:e8:53:88:cd:99:49:0d:08:4a:45:bb:8d:2a  gbp.S...I..JE..\n000000d0  31:0d:45:bb:57:84:7f:1f:62:96:bc:83:50:84:94:1a  1.E.W...b...P...\n000000e0  cc:9c:01:8a:86:01:ff:27:f2:0a:a9:6c:0f:d9:d2:25  .......'...l...%\n000000f0  a4:5c:f6:ff:93:07:16:e2:54:5c:80:38:70:4a:03:26  .......T.8pJ.&\n00000100  71:4a:01:85                                      qJ..\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0056, network: 0.0054s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:b0:db:0b:ae:a5  ................\n00000020  ef:ea:25:81:49:a0:f2:52:67:f3:20:6c:c4:5a:ba:93  ..%.I..Rg. l.Z..\n00000030  9f:2a:a6:01:c9:96:34:44:4d:fe:14:69:45:20:49:e9  .*....4DM..iE I.\n00000040  38:c6:97:cb:ac:ca:5d:18:7a:ea:42:4f:85:da:b4:9d  8.....].z.BO....\n00000050  52:8f:44:67:8e:68:be:61:a6:75:83:df:dd:32:57:09  R.Dg.h.a.u...2W.\n00000060  42:62:bb:f3:b3:fc:5c:d9:02:96:fe:31:b0:a0:db:f8  Bb........1....\n00000070  98:b3:30:fd:5d:0b:50:4f:25:71:70:60:13:3e:d7:c6  ..0.].PO%qp.>..\n00000080  dc:65:6e:49:9f:b3:67:86:df:fa:09:10:54:ac:94:9d  .enI..g.....T...\n00000090  a8:72:29:85:7d:12:03:a0:74:f4:c0:0c:d8:c0:99:37  .r).}...t......7\n000000a0  b3:27:c4:ad:b8:d7:26:d8:1b:2a:7a:13:d7:2b:e9:eb  .'....&..*z..+..\n000000b0  84:73:68:93:68:3d:37:c4:35:fe:33:9d:03:9c:f3:12  .sh.h=7.5.3.....\n000000c0  47:7a:83:e0:53:50:9b:d5:3f:90:3b:8d:33:04:fc:b8  Gz..SP..?.;.3...\n000000d0  bc:76:04:5d:85:8d:48:4b:25:99:f6:aa:70:1c:a4:23  .v.]..HK%...p..#\n000000e0  c2:41:68:6b:7a:63:dc:43:54:05:fa:df:3b:a7:8d:b5  .Ahkzc.CT...;...\n000000f0  21:a0:93:04:0f:bd:9c:30:32:27:24:0f:03:9d:a3:78  !......02'$....x\n00000100  8a:e5:e7:27:ab:ff:0b:cc:0b:6f:60:91:60:de:b2:45  ...'.....o...E\n00000110  e4:44:0b:aa:ad:e0:02:f6:fb:1f:77:00:00:01:00:2f  .D........w..../\n00000120  88:15:85:df:4b:5e:ac:f2:9a:56:2a:95:84:3f:81:28  ....K^...V*..?.(\n00000130  a0:3e:98:7e:a0:c9:26:62:69:33:5b:ad:11:6f:ac:30  .>.~..&bi3[..o.0\n00000140  fc:6b:28:64:76:01:95:c8:dd:00:c1:df:2b:ce:c9:e3  .k(dv.......+...\n00000150  b9:f4:c4:d5:12:51:d9:4e:b3:ac:5f:c6:7e:6f:42:fa  .....Q.N.._.~oB.\n00000160  6d:d3:a1:c1:12:99:52:ad:9d:ea:70:32:90:57:a8:b9  m.....R...p2.W..\n00000170  a2:f4:bf:19:f4:63:f5:d4:b0:13:8a:20:e9:18:1d:bb  .....c..... ....\n00000180  5e:13:77:0b:24:eb:bf:f8:c9:17:2c:16:ae:a8:93:87  ^.w.$.....,.....\n00000190  0a:02:28:3a:23:f1:39:6c:2c:3a:ed:71:46:b9:5e:dc  ..(:#.9l,:.qF.^.\n000001a0  f8:17:32:4f:a4:69:46:9e:c0:c6:19:c2:23:ba:8f:44  ..2O.iF.....#..D\n000001b0  af:44:95:f6:cf:21:87:80:bc:35:b7:79:a3:68:6e:ad  .D...!...5.y.hn.\n000001c0  fb:5a:30:ab:24:de:dd:81:15:1e:10:0f:f9:41:df:fb  .Z0.$........A..\n000001d0  c3:11:7d:13:8c:9b:73:e5:0a:63:8b:23:2e:30:59:4e  ..}...s..c.#.0YN\n000001e0  30:44:9a:3b:f9:24:da:ff:a2:71:35:ba:ce:6c:f0:f4  0D.;.$...q5..l..\n000001f0  0c:8a:f6:4d:ce:13:3d:7f:05:b2:b5:48:b8:ba:f2:ef  ...M..=....H....\n00000200  03:3c:2e:9b:28:f5:4e:10:f4:b1:0e:c7:d5:a6:17:83  ....(.N.........\n00000210  5f:94:43:07:62:bd:5c:00:6b:11:fc:86:01:24:1f:00  _.C.b.\\.k....$..\n00000220  00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00:00  .......ssh-rsa..\n00000230  01:00:35:88:7d:38:c7:3c:bd:85:91:47:a2:70:e2:aa  ..5.}8.....G.p..\n00000240  49:3d:30:40:50:50:af:df:c3:fa:2a:af:a6:1b:ce:f5  I=0@PP....*.....\n00000250  73:d5:4d:a9:0f:3e:99:20:d6:21:71:4f:2c:12:51:65  s.M..>. .!qO,.Qe\n00000260  b7:80:08:63:be:3a:24:3d:43:be:9c:c1:cf:39:06:aa  ...c.:$=C....9..\n00000270  58:ac:2d:e9:1b:62:94:d6:2d:b1:e6:76:0e:e3:c5:81  X.-..b..-..v....\n00000280  a2:81:e6:5a:b7:c4:79:a6:4a:b8:8e:8d:47:a7:fe:ca  ...Z..y.J...G...\n00000290  3e:2a:f8:e3:5f:cb:d0:a2:6e:32:dc:cb:97:40:af:0d  >*.._...n2...@..\n000002a0  65:75:1e:5c:41:b3:90:2d:b0:f4:d4:8a:5f:f9:57:d5  eu.\\A..-...._.W.\n000002b0  1d:2c:df:82:3c:0c:0f:ef:d6:14:2e:b6:82:2a:60:a1  .,...........*.\n000002c0  20:bc:88:75:53:53:d7:09:05:8f:56:87:42:0f:ce:06   ..uSS....V.B...\n000002d0  7c:7f:d3:85:ae:41:03:f3:32:5d:4a:60:df:fe:1b:30  |....A..2]J`...0\n000002e0  ef:a8:b9:0a:db:ad:85:05:fe:ec:8c:18:88:bf:3c:ff  ................\n000002f0  da:b8:a9:2f:49:1c:9f:19:ec:06:27:4d:b0:32:f5:55  .../I.....'M.2.U\n00000300  28:d7:46:e2:a6:16:7e:3c:d1:45:b0:45:dd:27:3e:46  (.F...~..E.E.'>F\n00000310  4e:ae:b1:35:d5:eb:c7:78:ff:11:37:97:8c:62:97:c0  N..5...x..7..b..\n00000320  a8:46:b2:4e:67:70:c8:b8:69:2d:fa:33:14:fe:dc:48  .F.Ngp..i-.3...H\n00000330  c7:00                                            ..\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0072, network: 0.0001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0003, network: 0.0001s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0039, network: 0.0001s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0007, network: 0.0003s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0007, network: 0.0001s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.2082, network: 0.2079s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0006, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.0007, network: 0.0002s)\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\n00000030  00:01:00:00:01:01:00:b0:db:0b:ae:a5:ef:ea:25:81  ..............%.\n00000040  49:a0:f2:52:67:f3:20:6c:c4:5a:ba:93:9f:2a:a6:01  I..Rg. l.Z.....\n00000050  c9:96:34:44:4d:fe:14:69:45:20:49:e9:38:c6:97:cb  ..4DM..iE I.8...\n00000060  ac:ca:5d:18:7a:ea:42:4f:85:da:b4:9d:52:8f:44:67  ..].z.BO....R.Dg\n00000070  8e:68:be:61:a6:75:83:df:dd:32:57:09:42:62:bb:f3  .h.a.u...2W.Bb..\n00000080  b3:fc:5c:d9:02:96:fe:31:b0:a0:db:f8:98:b3:30:fd  ......1......0.\n00000090  5d:0b:50:4f:25:71:70:60:13:3e:d7:c6:dc:65:6e:49  ].PO%qp.>...enI\n000000a0  9f:b3:67:86:df:fa:09:10:54:ac:94:9d:a8:72:29:85  ..g.....T....r).\n000000b0  7d:12:03:a0:74:f4:c0:0c:d8:c0:99:37:b3:27:c4:ad  }...t......7.'..\n000000c0  b8:d7:26:d8:1b:2a:7a:13:d7:2b:e9:eb:84:73:68:93  ..&..*z..+...sh.\n000000d0  68:3d:37:c4:35:fe:33:9d:03:9c:f3:12:47:7a:83:e0  h=7.5.3.....Gz..\n000000e0  53:50:9b:d5:3f:90:3b:8d:33:04:fc:b8:bc:76:04:5d  SP..?.;.3....v.]\n000000f0  85:8d:48:4b:25:99:f6:aa:70:1c:a4:23:c2:41:68:6b  ..HK%...p..#.Ahk\n00000100  7a:63:dc:43:54:05:fa:df:3b:a7:8d:b5:21:a0:93:04  zc.CT...;...!...\n00000110  0f:bd:9c:30:32:27:24:0f:03:9d:a3:78:8a:e5:e7:27  ...02'$....x...'\n00000120  ab:ff:0b:cc:0b:6f:60:91:60:de:b2:45:e4:44:0b:aa  .....o...E.D..\n00000130  ad:e0:02:f6:fb:1f:77:00:00:01:b1:00:00:00:07:73  ......w........s\n00000140  73:68:2d:64:73:73:00:00:00:81:00:90:63:f3:96:e8  sh-dss......c...\n00000150  f1:1e:d8:d4:10:02:97:4e:af:67:f8:70:87:58:d1:e8  .......N.g.p.X..\n00000160  a8:33:80:c1:9c:ce:20:0f:b2:c4:ea:21:f8:66:63:f1  .3.... ....!.fc.\n00000170  de:30:99:65:3d:e3:79:6e:cd:3c:d6:0e:9e:d5:1a:9f  .0.e=.yn........\n00000180  0a:07:e1:3a:f5:60:74:2e:b0:76:03:a9:2b:03:b3:39  ...:.t..v..+..9\n00000190  cb:4c:91:14:f4:f5:94:1d:a3:aa:23:d7:f0:eb:6f:22  .L........#...o\"\n000001a0  cc:59:fa:e1:cb:15:a0:59:dc:50:72:f0:9d:81:bd:d7  .Y.....Y.Pr.....\n000001b0  26:b8:d9:a2:f1:e8:9c:6b:ea:f7:69:d3:98:49:22:3f  &......k..i..I\"?\n000001c0  e8:c7:6f:c3:53:49:99:8a:2c:9f:93:00:00:00:15:00  ..o.SI..,.......\n000001d0  84:c9:8c:c5:62:f9:fe:f3:e1:5b:5d:98:23:59:dc:cf  ....b....[].#Y..\n000001e0  49:77:3b:0b:00:00:00:80:38:3b:0f:85:96:86:46:60  Iw;.....8;....F000001f0  20:61:81:9b:e1:19:29:7b:07:18:91:8d:7b:67:fa:42   a....){....{g.B\n00000200  20:cb:2c:4d:b1:e6:af:8a:72:aa:1f:02:f7:a5:7f:a3   .,M....r.......\n00000210  bb:aa:23:92:01:84:a0:f3:c6:8f:18:2d:6f:7c:09:90  ..#........-o|..\n00000220  ca:6c:f8:e9:16:d2:5e:9f:dd:df:c4:c3:b6:d6:e5:8c  .l....^.........\n00000230  a3:8d:eb:f5:10:8d:b0:86:91:9e:a2:43:e8:55:70:4e  ...........C.UpN\n00000240  34:2e:e8:3f:24:88:1a:f2:b0:9b:0f:78:03:69:48:1b  4..?$......x.iH.\n00000250  cc:ad:9e:a5:8d:34:96:47:3e:f4:9d:4e:9a:97:83:80  .....4.G>..N....\n00000260  96:0e:cd:b3:e8:d7:d4:42:00:00:00:80:5e:67:3f:99  .......B....^g?.\n00000270  57:04:e5:36:1c:b9:62:97:98:8b:4a:f8:75:99:9d:91  W..6..b...J.u...\n00000280  b1:fc:6f:65:15:ea:44:59:cf:39:f0:16:ff:d2:f0:9b  ..oe..DY.9......\n00000290  65:c8:28:3b:22:7e:41:8f:15:6e:60:da:17:06:d5:6e  e.(;\"~A..n....n\n000002a0  52:b7:cf:ef:74:e0:cf:67:b0:8b:ad:2b:cf:e6:69:74  R...t..g...+..it\n000002b0  33:a4:e8:87:7c:6f:d7:e7:b5:d3:a9:f7:ad:56:36:0e  3...|o.......V6.\n000002c0  7b:3a:74:c8:5a:6d:ce:87:76:98:20:1a:05:ab:2c:26  {:t.Zm..v. ...,&\n000002d0  0e:08:b7:4c:e9:0c:5d:81:39:56:a4:fb:e9:a4:73:51  ...L..].9V....sQ\n000002e0  ef:69:64:b5:c9:2c:36:7f:a0:c8:0f:75:00:00:00:68  .id..,6....u...h\n000002f0  00:00:00:13:65:63:64:73:61:2d:73:68:61:32:2d:6e  ....ecdsa-sha2-n\n00000300  69:73:74:70:32:35:36:00:00:00:08:6e:69:73:74:70  istp256....nistp\n00000310  32:35:36:00:00:00:41:04:e9:de:ab:3a:9d:d9:69:08  256...A....:..i.\n00000320  7c:37:2c:cc:d7:a2:e0:98:ec:a8:80:5a:f3:14:1e:96  |7,........Z....\n00000330  67:55:a0:73:da:c8:35:27:96:58:dd:78:1c:77:4f:8e  gU.s..5'.X.x.wO.\n00000340  a6:7f:87:2a:6f:dc:a5:4b:58:e5:61:14:aa:5f:46:82  ...o..KX.a.._F.\n00000350  81:3a:e0:d9:24:d7:de:47:00:00:00:33:00:00:00:0b  .:..$..G...3....\n00000360  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:20:3f  ssh-ed25519... ?\n00000370  ab:75:c7:d2:25:48:0b:52:69:aa:f9:00:aa:b7:bb:7c  .u..%H.Ri......|\n00000380  52:c7:e4:ae:58:9b:92:af:a2:a9:d8:d2:8a:13:35     R...X.........5\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.0005, network: 0.0001s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0005, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0007, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  54:43:3a:5c:50:79:74:68:6f:6e:32:37:5c:70:79:74  TC:\\Python27\\pyt\n00000020  68:6f:6e:2e:65:78:65:20:63:3a:2f:6d:61:65:73:74  hon.exe c:/maest\n00000030  72:6f:2f:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:2d  ro/main.py -\n00000040  2d:70:72:6f:63:65:73:73:2d:72:65:70:6f:72:74:20  -process-report \n00000050  68:6f:75:72:6c:79:5f:76:69:73:69:74:6f:72:20:20  hourly_visitor\n00000060  2d:74:65:73:74                                   -test\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.012, network: 0.0002s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0005, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EXTENDED_DATA (since last: 0.6788, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:01:00:00:00:9e:75:73:61:67  ............usag\n00000010  65:3a:20:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:5b  e: main.py [\n00000020  2d:68:5d:20:2d:2d:70:72:6f:63:65:73:73:2d:72:65  -h] --process-re\n00000030  70:6f:72:74:20:5b:52:45:50:4f:52:54:5f:54:52:49  port [REPORT_TRI\n00000040  47:47:45:52:5d:20:5b:2d:74:65:73:74:5d:0d:0a:20  GGER] [-test].. \n00000050  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000060  20:20:5b:2d:2d:74:6f:20:54:4f:20:5b:54:4f:20:2e    [--to TO [TO .\n00000070  2e:2e:5d:5d:0d:0a:5f:5f:6d:61:69:6e:5f:5f:2e:70  ..]]..main.p\n00000080  79:3a:20:65:72:72:6f:72:3a:20:75:6e:72:65:63:6f  y: error: unreco\n00000090  67:6e:69:7a:65:64:20:61:72:67:75:6d:65:6e:74:73  gnized arguments\n000000a0  3a:20:2d:74:65:73:74:68:0d:0a                    : -testh..\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.0066, network: 0.0002s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0006, network: 0.0002s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:02                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0005, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0005, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n```\nSending to another server:\nCommand sent\nC:\\Python27\\python.exe c:/maestro/__main__.py --process-report hourly_visitor -test\nResponse note the C\nusage: __main__.py [-h] --process-report [REPORT_TRIGGER] [-test] [--to TO [TO ...]] __main__.py: error: unrecognized arguments: -testC\nSHH logs\n```\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  37:2e:34:0d:0a                                   7.4..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \n00000020  67:6d:70:29:0d:0a                                gmp)..\n<- NET_SSH2_MSG_KEXINIT (since last: 0.4154, network: 0.0624s)\n00000000  98:18:e8:7d:01:bb:65:79:02:a9:cb:c2:5b:b4:a1:12  ...}..ey....[...\n00000010  00:00:01:02:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\n00000020  68:61:32:35:36:2c:63:75:72:76:65:32:35:35:31:39  ha256,curve25519\n00000030  2d:73:68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f  -sha256@libssh.o\n00000040  72:67:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73  rg,ecdh-sha2-nis\n00000050  74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32:2d  tp256,ecdh-sha2-\n00000060  6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73:68  nistp384,ecdh-sh\n00000070  61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66:66  a2-nistp521,diff\n00000080  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000090  2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35:36  -exchange-sha256\n000000a0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000b0  67:72:6f:75:70:31:36:2d:73:68:61:35:31:32:2c:64  group16-sha512,d\n000000c0  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n000000d0  6f:75:70:31:38:2d:73:68:61:35:31:32:2c:64:69:66  oup18-sha512,dif\n000000e0  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n000000f0  70:31:34:2d:73:68:61:32:35:36:2c:64:69:66:66:69  p14-sha256,diffi\n00000100  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31  e-hellman-group1\n00000110  34:2d:73:68:61:31:00:00:00:41:73:73:68:2d:72:73  4-sha1...Assh-rs\n00000120  61:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c:72  a,rsa-sha2-512,r\n00000130  73:61:2d:73:68:61:32:2d:32:35:36:2c:65:63:64:73  sa-sha2-256,ecds\n00000140  61:2d:73:68:61:32:2d:6e:69:73:74:70:32:35:36:2c  a-sha2-nistp256,\n00000150  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:3e:63  ssh-ed25519...>c\n00000160  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n00000170  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n00000180  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000190  74:72:2c:61:65:73:32:35:36:2d:63:74:72:00:00:00  tr,aes256-ctr...\n000001a0  3e:63:68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33  >chacha20-poly13\n000001b0  30:35:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61  05@openssh.com,a\n000001c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000001d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:00  -ctr,aes256-ctr.\n000001e0  00:00:d5:75:6d:61:63:2d:36:34:2d:65:74:6d:40:6f  ...umac-64-etm@o\n000001f0  70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d  penssh.com,umac-\n00000200  31:32:38:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e  128-etm@openssh.\n00000210  63:6f:6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35  com,hmac-sha2-25\n00000220  36:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f  6-etm@openssh.co\n00000230  6d:2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2d  m,hmac-sha2-512-\n00000240  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000250  68:6d:61:63:2d:73:68:61:31:2d:65:74:6d:40:6f:70  hmac-sha1-etm@op\n00000260  65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:36  enssh.com,umac-6\n00000270  34:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75:6d  4@openssh.com,um\n00000280  61:63:2d:31:32:38:40:6f:70:65:6e:73:73:68:2e:63  ac-128@openssh.c\n00000290  6f:6d:2c:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  om,hmac-sha2-256\n000002a0  2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68  ,hmac-sha2-512,h\n000002b0  6d:61:63:2d:73:68:61:31:00:00:00:d5:75:6d:61:63  mac-sha1....umac\n000002c0  2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e  -64-etm@openssh.\n000002d0  63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d:65:74:6d  com,umac-128-etm\n000002e0  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61  @openssh.com,hma\n000002f0  63:2d:73:68:61:32:2d:32:35:36:2d:65:74:6d:40:6f  c-sha2-256-etm@o\n00000300  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000310  73:68:61:32:2d:35:31:32:2d:65:74:6d:40:6f:70:65  sha2-512-etm@ope\n00000320  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n00000330  61:31:2d:65:74:6d:40:6f:70:65:6e:73:73:68:2e:63  a1-etm@openssh.c\n00000340  6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70:65:6e:73  om,umac-64@opens\n00000350  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:40  sh.com,umac-128@\n00000360  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000370  2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73  -sha2-256,hmac-s\n00000380  68:61:32:2d:35:31:32:2c:68:6d:61:63:2d:73:68:61  ha2-512,hmac-sha\n00000390  31:00:00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e  1....none....non\n000003a0  65:00:00:00:00:00:00:00:00:00:00:00:00:00        e.............\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0663, network: 0.0001s)\n00000000  40:61:16:74:fb:22:90:f9:3e:7a:cd:dc:cd:0c:bc:45  @a.t.\"..>z.....E\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.036, network: 0s)\n00000000  00:00:01:01:00:c8:a1:fc:c6:9e:6a:35:38:4f:9d:b3  ..........j58O..\n00000010  a2:ee:24:a6:07:d4:d5:af:d1:21:76:20:39:01:78:c7  ..$......!v 9.x.\n00000020  65:29:58:f9:78:85:6c:0c:f3:af:4e:5c:47:28:72:55  e)X.x.l...N\\G(rU\n00000030  65:9f:c1:25:a4:4c:e1:bd:de:90:0a:c3:d5:25:6d:7f  e..%.L.......%m.\n00000040  9d:39:af:a4:f5:04:83:0c:98:5e:a2:59:f5:14:d3:3d  .9.......^.Y...=\n00000050  06:b7:33:04:da:b5:a0:80:fc:f4:54:93:76:4f:62:8b  ..3.......T.vOb.\n00000060  8d:38:ef:01:63:83:ac:cd:3e:ae:1f:80:0e:78:1b:c6  .8..c...>....x..\n00000070  6d:4e:0e:f3:e7:3d:1f:e5:b9:7d:fa:99:cf:f9:14:c8  mN...=...}......\n00000080  47:df:7e:4b:9f:ab:0b:fb:9b:d1:e4:ab:03:3e:43:3c  G.~K.........>C.\n00000090  65:76:5a:b7:97:90:78:14:60:81:28:2f:89:02:1d:d2  evZ...x.`.(/....\n000000a0  e0:96:54:5b:48:c9:7f:78:a9:10:1f:9f:63:98:01:a9  ..T[H..x....c...\n000000b0  94:66:b5:2c:fd:c4:ca:94:df:ea:ee:2f:dc:d4:32:93  .f.,......./..2.\n000000c0  28:e5:cd:b9:98:1d:cc:22:71:d6:12:97:bb:c2:55:fc  (......\"q.....U.\n000000d0  2c:62:3b:b5:43:a8:1a:c4:1e:3d:30:88:ba:99:32:73  ,b;.C....=0...2s\n000000e0  7d:da:48:76:c1:58:d0:32:09:63:90:b1:19:bd:ec:23  }.Hv.X.2.c.....#\n000000f0  07:85:c0:f7:2f:3b:81:ad:d8:5f:3d:16:2f:ca:4b:03  ..../;..._=./.K.\n00000100  12:2b:2a:8d:fb                                   .+*..\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.1798, network: 0.1796s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:b0:db:0b:ae:a5  ................\n00000020  ef:ea:25:81:49:a0:f2:52:67:f3:20:6c:c4:5a:ba:93  ..%.I..Rg. l.Z..\n00000030  9f:2a:a6:01:c9:96:34:44:4d:fe:14:69:45:20:49:e9  .....4DM..iE I.\n00000040  38:c6:97:cb:ac:ca:5d:18:7a:ea:42:4f:85:da:b4:9d  8.....].z.BO....\n00000050  52:8f:44:67:8e:68:be:61:a6:75:83:df:dd:32:57:09  R.Dg.h.a.u...2W.\n00000060  42:62:bb:f3:b3:fc:5c:d9:02:96:fe:31:b0:a0:db:f8  Bb........1....\n00000070  98:b3:30:fd:5d:0b:50:4f:25:71:70:60:13:3e:d7:c6  ..0.].PO%qp.>..\n00000080  dc:65:6e:49:9f:b3:67:86:df:fa:09:10:54:ac:94:9d  .enI..g.....T...\n00000090  a8:72:29:85:7d:12:03:a0:74:f4:c0:0c:d8:c0:99:37  .r).}...t......7\n000000a0  b3:27:c4:ad:b8:d7:26:d8:1b:2a:7a:13:d7:2b:e9:eb  .'....&..*z..+..\n000000b0  84:73:68:93:68:3d:37:c4:35:fe:33:9d:03:9c:f3:12  .sh.h=7.5.3.....\n000000c0  47:7a:83:e0:53:50:9b:d5:3f:90:3b:8d:33:04:fc:b8  Gz..SP..?.;.3...\n000000d0  bc:76:04:5d:85:8d:48:4b:25:99:f6:aa:70:1c:a4:23  .v.]..HK%...p..#\n000000e0  c2:41:68:6b:7a:63:dc:43:54:05:fa:df:3b:a7:8d:b5  .Ahkzc.CT...;...\n000000f0  21:a0:93:04:0f:bd:9c:30:32:27:24:0f:03:9d:a3:78  !......02'$....x\n00000100  8a:e5:e7:27:ab:ff:0b:cc:0b:6f:60:91:60:de:b2:45  ...'.....o.`..E\n00000110  e4:44:0b:aa:ad:e0:02:f6:fb:1f:77:00:00:01:01:00  .D........w.....\n00000120  da:34:30:50:65:08:a7:88:72:6f:e8:81:26:ac:4a:18  .40Pe...ro..&.J.\n00000130  58:b4:aa:58:2a:db:fd:ca:4e:ac:65:37:34:d5:b3:e3  X..X...N.e74...\n00000140  b6:f2:e9:c9:1a:cd:50:b3:d2:f4:21:22:d4:81:83:69  ......P...!\"...i\n00000150  eb:85:0b:35:9f:ec:9b:42:94:96:1c:b9:f8:ed:23:f1  ...5...B......#.\n00000160  fa:d7:cc:6f:b6:fe:68:2e:16:53:c4:a1:e4:44:8f:f2  ...o..h..S...D..\n00000170  11:34:51:9e:73:7c:6e:bc:26:31:0d:d6:ea:89:d3:7a  .4Q.s|n.&1.....z\n00000180  6a:59:f7:c8:ac:e3:40:be:1d:95:d1:79:75:8f:01:15  jY....@....yu...\n00000190  ec:74:aa:29:91:ae:35:0f:fc:da:17:d5:74:84:0f:39  .t.)..5.....t..9\n000001a0  9c:7c:82:ee:4b:e1:5a:ef:3b:35:fc:4a:ab:77:47:55  .|..K.Z.;5.J.wGU\n000001b0  59:93:ac:db:6d:1b:3d:24:2e:4e:e7:bf:eb:47:6a:bb  Y...m.=$.N...Gj.\n000001c0  27:af:9b:88:40:46:39:c6:58:d8:93:cf:98:fd:0a:65  '...@F9.X......e\n000001d0  24:88:db:c1:ef:dc:36:1e:85:5c:09:15:72:79:4a:f1  $.....6....ryJ.\n000001e0  c2:f9:ff:95:22:82:3b:76:d5:bb:de:96:9a:8e:24:c1  ....\".;v......$.\n000001f0  87:b7:72:19:86:4d:b8:4f:56:92:89:d3:e1:67:01:72  ..r..M.OV....g.r\n00000200  2c:90:b2:56:ed:75:5f:70:18:e3:39:e9:c2:92:ca:af  ,..V.u_p..9.....\n00000210  cd:79:07:c4:cd:6d:50:5b:a5:4d:3b:84:3c:4d:70:6d  .y...mP[.M;..Mpm\n00000220  00:00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000230  00:01:00:91:69:2f:37:d1:96:c2:65:47:30:98:42:b2  ....i/7...eG0.B.\n00000240  23:ea:15:db:4a:6f:5d:ad:50:b9:9c:e2:b5:ae:7e:93  #...Jo].P.....~.\n00000250  11:a8:dd:d5:99:e7:a7:1b:cc:0b:dd:6e:9d:01:8d:1d  ...........n....\n00000260  49:75:9c:6f:68:85:df:ad:32:02:67:02:b0:16:da:e3  Iu.oh...2.g.....\n00000270  80:dc:04:28:53:be:54:79:a3:82:cf:9f:fc:35:26:0b  ...(S.Ty.....5&.\n00000280  22:3f:e6:aa:63:bf:fd:17:63:dc:8d:7a:04:9b:40:ee  \"?..c...c..z..@.\n00000290  6a:2a:84:f5:0e:7d:97:90:58:7f:3c:b1:c0:6a:e2:c0  j*...}..X....j..\n000002a0  bf:70:ad:70:a9:86:10:8c:c9:0f:a8:07:08:24:6e:31  .p.p.........$n1\n000002b0  73:33:ad:0b:a2:9d:6c:8c:64:47:27:33:cb:5e:6c:7a  s3....l.dG'3.^lz\n000002c0  67:19:86:16:cd:57:49:24:fe:4a:4e:bb:84:06:e6:73  g....WI$.JN....s\n000002d0  d3:c8:1c:53:6c:44:e0:2e:68:d4:c9:80:9c:82:24:db  ...SlD..h.....$.\n000002e0  f2:a7:b3:f6:6a:70:21:1d:4d:7a:cb:ed:19:1b:a1:1e  ....jp!.Mz......\n000002f0  ca:ca:b1:b5:94:0c:c3:51:1d:71:bf:b4:b6:a3:79:42  .......Q.q....yB\n00000300  20:96:19:14:95:72:42:31:07:4f:db:87:de:3e:6d:dd   ....rB1.O...>m.\n00000310  b8:ae:39:67:4e:09:35:93:a7:d6:5d:44:fb:f3:56:38  ..9gN.5...]D..V8\n00000320  18:b0:1e:91:1b:d8:51:fd:07:aa:b8:bf:5d:45:ee:4f  ......Q.....]E.O\n00000330  1b:bd:9c                                         ...\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0062, network: 0.0001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0003, network: 0.0001s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0033, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.2036, network: 0.2032s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0006, network: 0.0001s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.2356, network: 0.2354s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0006, network: 0.0001s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:00:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.0014, network: 0.0002s)\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\n00000030  00:01:00:00:01:01:00:b0:db:0b:ae:a5:ef:ea:25:81  ..............%.\n00000040  49:a0:f2:52:67:f3:20:6c:c4:5a:ba:93:9f:2a:a6:01  I..Rg. l.Z.....\n00000050  c9:96:34:44:4d:fe:14:69:45:20:49:e9:38:c6:97:cb  ..4DM..iE I.8...\n00000060  ac:ca:5d:18:7a:ea:42:4f:85:da:b4:9d:52:8f:44:67  ..].z.BO....R.Dg\n00000070  8e:68:be:61:a6:75:83:df:dd:32:57:09:42:62:bb:f3  .h.a.u...2W.Bb..\n00000080  b3:fc:5c:d9:02:96:fe:31:b0:a0:db:f8:98:b3:30:fd  ......1......0.\n00000090  5d:0b:50:4f:25:71:70:60:13:3e:d7:c6:dc:65:6e:49  ].PO%qp.>...enI\n000000a0  9f:b3:67:86:df:fa:09:10:54:ac:94:9d:a8:72:29:85  ..g.....T....r).\n000000b0  7d:12:03:a0:74:f4:c0:0c:d8:c0:99:37:b3:27:c4:ad  }...t......7.'..\n000000c0  b8:d7:26:d8:1b:2a:7a:13:d7:2b:e9:eb:84:73:68:93  ..&..*z..+...sh.\n000000d0  68:3d:37:c4:35:fe:33:9d:03:9c:f3:12:47:7a:83:e0  h=7.5.3.....Gz..\n000000e0  53:50:9b:d5:3f:90:3b:8d:33:04:fc:b8:bc:76:04:5d  SP..?.;.3....v.]\n000000f0  85:8d:48:4b:25:99:f6:aa:70:1c:a4:23:c2:41:68:6b  ..HK%...p..#.Ahk\n00000100  7a:63:dc:43:54:05:fa:df:3b:a7:8d:b5:21:a0:93:04  zc.CT...;...!...\n00000110  0f:bd:9c:30:32:27:24:0f:03:9d:a3:78:8a:e5:e7:27  ...02'$....x...'\n00000120  ab:ff:0b:cc:0b:6f:60:91:60:de:b2:45:e4:44:0b:aa  .....o...E.D..\n00000130  ad:e0:02:f6:fb:1f:77:00:00:01:b1:00:00:00:07:73  ......w........s\n00000140  73:68:2d:64:73:73:00:00:00:81:00:90:63:f3:96:e8  sh-dss......c...\n00000150  f1:1e:d8:d4:10:02:97:4e:af:67:f8:70:87:58:d1:e8  .......N.g.p.X..\n00000160  a8:33:80:c1:9c:ce:20:0f:b2:c4:ea:21:f8:66:63:f1  .3.... ....!.fc.\n00000170  de:30:99:65:3d:e3:79:6e:cd:3c:d6:0e:9e:d5:1a:9f  .0.e=.yn........\n00000180  0a:07:e1:3a:f5:60:74:2e:b0:76:03:a9:2b:03:b3:39  ...:.t..v..+..9\n00000190  cb:4c:91:14:f4:f5:94:1d:a3:aa:23:d7:f0:eb:6f:22  .L........#...o\"\n000001a0  cc:59:fa:e1:cb:15:a0:59:dc:50:72:f0:9d:81:bd:d7  .Y.....Y.Pr.....\n000001b0  26:b8:d9:a2:f1:e8:9c:6b:ea:f7:69:d3:98:49:22:3f  &......k..i..I\"?\n000001c0  e8:c7:6f:c3:53:49:99:8a:2c:9f:93:00:00:00:15:00  ..o.SI..,.......\n000001d0  84:c9:8c:c5:62:f9:fe:f3:e1:5b:5d:98:23:59:dc:cf  ....b....[].#Y..\n000001e0  49:77:3b:0b:00:00:00:80:38:3b:0f:85:96:86:46:60  Iw;.....8;....F000001f0  20:61:81:9b:e1:19:29:7b:07:18:91:8d:7b:67:fa:42   a....){....{g.B\n00000200  20:cb:2c:4d:b1:e6:af:8a:72:aa:1f:02:f7:a5:7f:a3   .,M....r.......\n00000210  bb:aa:23:92:01:84:a0:f3:c6:8f:18:2d:6f:7c:09:90  ..#........-o|..\n00000220  ca:6c:f8:e9:16:d2:5e:9f:dd:df:c4:c3:b6:d6:e5:8c  .l....^.........\n00000230  a3:8d:eb:f5:10:8d:b0:86:91:9e:a2:43:e8:55:70:4e  ...........C.UpN\n00000240  34:2e:e8:3f:24:88:1a:f2:b0:9b:0f:78:03:69:48:1b  4..?$......x.iH.\n00000250  cc:ad:9e:a5:8d:34:96:47:3e:f4:9d:4e:9a:97:83:80  .....4.G>..N....\n00000260  96:0e:cd:b3:e8:d7:d4:42:00:00:00:80:5e:67:3f:99  .......B....^g?.\n00000270  57:04:e5:36:1c:b9:62:97:98:8b:4a:f8:75:99:9d:91  W..6..b...J.u...\n00000280  b1:fc:6f:65:15:ea:44:59:cf:39:f0:16:ff:d2:f0:9b  ..oe..DY.9......\n00000290  65:c8:28:3b:22:7e:41:8f:15:6e:60:da:17:06:d5:6e  e.(;\"~A..n....n\n000002a0  52:b7:cf:ef:74:e0:cf:67:b0:8b:ad:2b:cf:e6:69:74  R...t..g...+..it\n000002b0  33:a4:e8:87:7c:6f:d7:e7:b5:d3:a9:f7:ad:56:36:0e  3...|o.......V6.\n000002c0  7b:3a:74:c8:5a:6d:ce:87:76:98:20:1a:05:ab:2c:26  {:t.Zm..v. ...,&\n000002d0  0e:08:b7:4c:e9:0c:5d:81:39:56:a4:fb:e9:a4:73:51  ...L..].9V....sQ\n000002e0  ef:69:64:b5:c9:2c:36:7f:a0:c8:0f:75:00:00:00:68  .id..,6....u...h\n000002f0  00:00:00:13:65:63:64:73:61:2d:73:68:61:32:2d:6e  ....ecdsa-sha2-n\n00000300  69:73:74:70:32:35:36:00:00:00:08:6e:69:73:74:70  istp256....nistp\n00000310  32:35:36:00:00:00:41:04:e9:de:ab:3a:9d:d9:69:08  256...A....:..i.\n00000320  7c:37:2c:cc:d7:a2:e0:98:ec:a8:80:5a:f3:14:1e:96  |7,........Z....\n00000330  67:55:a0:73:da:c8:35:27:96:58:dd:78:1c:77:4f:8e  gU.s..5'.X.x.wO.\n00000340  a6:7f:87:2a:6f:dc:a5:4b:58:e5:61:14:aa:5f:46:82  ...o..KX.a.._F.\n00000350  81:3a:e0:d9:24:d7:de:47:00:00:00:33:00:00:00:0b  .:..$..G...3....\n00000360  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:20:3f  ssh-ed25519... ?\n00000370  ab:75:c7:d2:25:48:0b:52:69:aa:f9:00:aa:b7:bb:7c  .u..%H.Ri......|\n00000380  52:c7:e4:ae:58:9b:92:af:a2:a9:d8:d2:8a:13:35     R...X.........5\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.0005, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0013, network: 0.001s)\n00000000  00:00:00:00:00:00:00:00:00:00:00:00:00:00:80:00  ................\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0006, network: 0s)\n00000000  00:00:00:00:00:00:00:04:65:78:65:63:01:00:00:00  ........exec....\n00000010  54:43:3a:5c:50:79:74:68:6f:6e:32:37:5c:70:79:74  TC:\\Python27\\pyt\n00000020  68:6f:6e:2e:65:78:65:20:63:3a:2f:6d:61:65:73:74  hon.exe c:/maest\n00000030  72:6f:2f:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:2d  ro/main.py -\n00000040  2d:70:72:6f:63:65:73:73:2d:72:65:70:6f:72:74:20  -process-report \n00000050  68:6f:75:72:6c:79:5f:76:69:73:69:74:6f:72:20:20  hourly_visitor\n00000060  2d:74:65:73:74                                   -test\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0155, network: 0.0002s)\n00000000  00:00:00:00:00:20:00:00                          ..... ..\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0005, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_EXTENDED_DATA (since last: 1.1542, network: 0.0004s)\n00000000  00:00:00:00:00:00:00:01:00:00:00:9e:75:73:61:67  ............usag\n00000010  65:3a:20:5f:5f:6d:61:69:6e:5f:5f:2e:70:79:20:5b  e: main.py [\n00000020  2d:68:5d:20:2d:2d:70:72:6f:63:65:73:73:2d:72:65  -h] --process-re\n00000030  70:6f:72:74:20:5b:52:45:50:4f:52:54:5f:54:52:49  port [REPORT_TRI\n00000040  47:47:45:52:5d:20:5b:2d:74:65:73:74:5d:0d:0a:20  GGER] [-test].. \n00000050  20:20:20:20:20:20:20:20:20:20:20:20:20:20:20:20                \n00000060  20:20:5b:2d:2d:74:6f:20:54:4f:20:5b:54:4f:20:2e    [--to TO [TO .\n00000070  2e:2e:5d:5d:0d:0a:5f:5f:6d:61:69:6e:5f:5f:2e:70  ..]]..main.p\n00000080  79:3a:20:65:72:72:6f:72:3a:20:75:6e:72:65:63:6f  y: error: unreco\n00000090  67:6e:69:7a:65:64:20:61:72:67:75:6d:65:6e:74:73  gnized arguments\n000000a0  3a:20:2d:74:65:73:74:43:0d:0a                    : -testC..\n<- NET_SSH2_MSG_CHANNEL_EOF (since last: 0.011, network: 0.0003s)\n00000000  00:00:00:00                                      ....\n<- NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0009, network: 0.0003s)\n00000000  00:00:00:00:00:00:00:0b:65:78:69:74:2d:73:74:61  ........exit-sta\n00000010  74:75:73:00:00:00:00:02                          tus.....\n<- NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0008, network: 0.0002s)\n00000000  00:00:00:00                                      ....\n-> NET_SSH2_MSG_CHANNEL_CLOSE (since last: 0.0007, network: 0.0001s)\n00000000  00:00:00:00                                      ....\n```\n. Man that's weird. Ok. Well, since it seems to be consistently 1 char we're going to trim the input in our python script before parsing the arguments for now while our network guys take a look at the issue. Thanks for the reply.. ",
    "LoickN": "Yes, I send it now ;)\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  37:2e:35:0d:0a                                   7.5..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:20:28:6d:63:72:79:70:74:2c:20:62  b_1.0 (mcrypt, b\n00000020  63:6d:61:74:68:29:0d:0a                          cmath)..\n<- NET_SSH2_MSG_KEXINIT (since last: 1, network: 0s)\n00000000  e6:56:18:03:86:d4:6a:f2:c0:82:41:af:ed:e7:07:05  .V....j...A.....\n00000010  00:00:01:02:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\n00000020  68:61:32:35:36:2c:63:75:72:76:65:32:35:35:31:39  ha256,curve25519\n00000030  2d:73:68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f  -sha256@libssh.o\n00000040  72:67:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73  rg,ecdh-sha2-nis\n00000050  74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32:2d  tp256,ecdh-sha2-\n00000060  6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73:68  nistp384,ecdh-sh\n00000070  61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66:66  a2-nistp521,diff\n00000080  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000090  2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35:36  -exchange-sha256\n000000a0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000b0  67:72:6f:75:70:31:36:2d:73:68:61:35:31:32:2c:64  group16-sha512,d\n000000c0  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n000000d0  6f:75:70:31:38:2d:73:68:61:35:31:32:2c:64:69:66  oup18-sha512,dif\n000000e0  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n000000f0  70:31:34:2d:73:68:61:32:35:36:2c:64:69:66:66:69  p14-sha256,diffi\n00000100  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31  e-hellman-group1\n00000110  34:2d:73:68:61:31:00:00:00:41:73:73:68:2d:72:73  4-sha1...Assh-rs\n00000120  61:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c:72  a,rsa-sha2-512,r\n00000130  73:61:2d:73:68:61:32:2d:32:35:36:2c:65:63:64:73  sa-sha2-256,ecds\n00000140  61:2d:73:68:61:32:2d:6e:69:73:74:70:32:35:36:2c  a-sha2-nistp256,\n00000150  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:6c:63  ssh-ed25519...lc\n00000160  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n00000170  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n00000180  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000190  74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65  tr,aes256-ctr,ae\n000001a0  73:31:32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68  s128-gcm@openssh\n000001b0  2e:63:6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40  .com,aes256-gcm@\n000001c0  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:6c:63  openssh.com...lc\n000001d0  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n000001e0  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n000001f0  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000200  74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65  tr,aes256-ctr,ae\n00000210  73:31:32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68  s128-gcm@openssh\n00000220  2e:63:6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40  .com,aes256-gcm@\n00000230  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:d5:75  openssh.com....u\n00000240  6d:61:63:2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73  mac-64-etm@opens\n00000250  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d  sh.com,umac-128-\n00000260  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000270  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:65:74  hmac-sha2-256-et\n00000280  6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d  m@openssh.com,hm\n00000290  61:63:2d:73:68:61:32:2d:35:31:32:2d:65:74:6d:40  ac-sha2-512-etm@\n000002a0  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n000002b0  2d:73:68:61:31:2d:65:74:6d:40:6f:70:65:6e:73:73  -sha1-etm@openss\n000002c0  68:2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70  h.com,umac-64@op\n000002d0  65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31  enssh.com,umac-1\n000002e0  32:38:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  28@openssh.com,h\n000002f0  6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61  mac-sha2-256,hma\n00000300  63:2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63:2d  c-sha2-512,hmac-\n00000310  73:68:61:31:00:00:00:d5:75:6d:61:63:2d:36:34:2d  sha1....umac-64-\n00000320  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000330  75:6d:61:63:2d:31:32:38:2d:65:74:6d:40:6f:70:65  umac-128-etm@ope\n00000340  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n00000350  61:32:2d:32:35:36:2d:65:74:6d:40:6f:70:65:6e:73  a2-256-etm@opens\n00000360  73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:32  sh.com,hmac-sha2\n00000370  2d:35:31:32:2d:65:74:6d:40:6f:70:65:6e:73:73:68  -512-etm@openssh\n00000380  2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:65  .com,hmac-sha1-e\n00000390  74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75  tm@openssh.com,u\n000003a0  6d:61:63:2d:36:34:40:6f:70:65:6e:73:73:68:2e:63  mac-64@openssh.c\n000003b0  6f:6d:2c:75:6d:61:63:2d:31:32:38:40:6f:70:65:6e  om,umac-128@open\n000003c0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61  ssh.com,hmac-sha\n000003d0  32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:32:2d  2-256,hmac-sha2-\n000003e0  35:31:32:2c:68:6d:61:63:2d:73:68:61:31:00:00:00  512,hmac-sha1...\n000003f0  15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73  .none,zlib@opens\n00000400  73:68:2e:63:6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a  sh.com....none,z\n00000410  6c:69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00  lib@openssh.com.\n00000420  00:00:00:00:00:00:00:00:00:00:00:00              ............\n-> NET_SSH2_MSG_KEXINIT (since last: 0, network: 0s)\n00000000  32:8c:b2:bd:27:4a:f0:11:b5:90:e7:e8:ca:d3:5d:72  2...'J........]r\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0, network: 0s)\n00000000  00:00:01:00:0f:cd:8f:4a:17:dc:c4:e3:3e:95:5d:85  .......J....>.].\n00000010  8a:be:53:92:34:be:65:18:ef:eb:8a:3a:85:1b:e2:c8  ..S.4.e....:....\n00000020  a7:d3:40:a3:9c:fa:be:8e:4f:a5:3d:28:84:07:0a:53  ..@.....O.=(...S\n00000030  d5:2e:37:04:bd:93:d4:1f:31:68:cc:a0:93:30:4c:d0  ..7.....1h...0L.\n00000040  50:47:ce:0e:ff:e8:56:49:84:c8:d1:22:49:10:db:4f  PG....VI...\"I..O\n00000050  8c:1e:03:5a:73:91:5f:41:d9:06:8e:25:fc:ed:fe:75  ...Zs._A...%...u\n00000060  5b:38:c0:28:b4:e2:ee:fa:b6:ed:a5:7d:2c:9c:0a:10  [8.(.......},...\n00000070  61:e9:94:31:34:e4:8f:d4:ec:a4:74:1a:83:ee:ef:ea  a..14.....t.....\n00000080  54:4c:3a:1c:0e:8b:a0:7e:b5:0b:b1:da:8d:3c:f7:d1  TL:....~........\n00000090  3d:5d:6d:ad:03:8c:70:16:7a:a1:91:42:de:77:84:65  =]m...p.z..B.w.e\n000000a0  ae:a1:ba:39:4d:7f:a7:43:d5:b6:41:ab:f6:11:a2:9f  ...9M..C..A.....\n000000b0  22:79:53:aa:93:56:ec:07:fc:54:aa:99:e1:c1:79:79  \"yS..V...T....yy\n000000c0  04:52:47:26:cf:59:b7:94:5b:75:e9:02:85:5a:d9:26  .RG&.Y..[u...Z.&\n000000d0  0b:55:08:ba:97:bd:46:2a:2e:47:95:6d:26:0c:b2:3d  .U....F*.G.m&..=\n000000e0  36:7c:45:d7:19:ac:65:51:ea:60:d1:2e:b5:af:09:ac  6|E...eQ.`......\n000000f0  6f:cb:2c:5c:ba:66:4f:9d:99:3a:10:c6:4f:c4:78:49  o.,.fO..:..O.xI\n00000100  e1:f2:8b:02                                      ....\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0, network: 0s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:d4:97:a1:a3:58  ...............X\n00000020  d0:9d:b5:9c:04:54:d5:b3:cd:16:77:21:8b:6e:3c:49  .....T....w!.n.I\n00000030  0e:e2:7d:e6:82:0f:f4:df:b5:86:46:26:9c:e3:92:28  ..}.......F&...(\n00000040  e3:14:72:c4:74:1e:55:1a:f1:8a:82:0a:6e:ef:7a:59  ..r.t.U.....n.zY\n00000050  d5:80:38:28:28:17:64:71:25:1a:0d:a8:53:03:c9:8a  ..8((.dq%...S...\n00000060  66:96:d8:50:94:70:17:64:36:9f:60:ec:91:f5:e9:31  f..P.p.d6.....1\n00000070  fb:45:1c:fe:58:57:48:57:8d:e0:25:83:5a:bf:6e:14  .E..XWHW..%.Z.n.\n00000080  13:f4:bd:ba:a6:74:b7:db:43:e0:a4:e6:2f:78:7a:2c  .....t..C.../xz,\n00000090  1c:83:77:c5:bc:cd:e8:b1:d9:9b:87:40:16:22:40:46  ..w........@.\"@F\n000000a0  cc:51:ef:96:1f:67:05:44:43:6e:2f:96:ae:3f:e2:55  .Q...g.DCn/..?.U\n000000b0  18:c9:0e:07:c1:b9:22:f1:6a:27:4c:e6:a8:55:30:68  ......\".j'L..U0h\n000000c0  1c:41:c1:c3:75:0a:3a:e7:c1:94:53:1c:39:7a:3c:fe  .A..u.:...S.9z..\n000000d0  96:dd:4e:ad:a5:36:7a:f2:b9:78:1e:4d:f8:19:a4:70  ..N..6z..x.M...p\n000000e0  ee:23:89:bb:57:c0:8c:89:a5:4b:81:ac:c0:ee:85:d1  .#..W....K......\n000000f0  01:2c:ab:77:4d:75:25:3a:53:6a:a6:b2:13:58:68:8b  .,.wMu%:Sj...Xh.\n00000100  b3:20:75:2a:93:74:f0:72:cf:e2:6b:a1:0d:39:ff:29  . u*.t.r..k..9.)\n00000110  7e:33:a7:20:17:a3:48:cb:bd:76:b5:00:00:01:01:00  ~3. ..H..v......\n00000120  9c:39:5f:20:11:0b:78:d7:39:ef:3a:f5:a8:9b:27:11  .9_ ..x.9.:...'.\n00000130  d6:32:b1:7a:ca:cc:89:3d:df:fc:ae:53:66:dc:45:30  .2.z...=...Sf.E0\n00000140  e9:9d:58:be:64:24:57:6f:70:fa:80:30:32:f3:4d:43  ..X.d$Wop..02.MC\n00000150  79:fd:8f:ed:e0:37:71:83:64:3d:21:92:3a:8f:d3:12  y....7q.d=!.:...\n00000160  4e:e1:91:f4:1a:94:4c:0d:53:e2:88:ad:0e:2b:2c:a1  N.....L.S....+,.\n00000170  8d:01:ac:aa:24:ca:91:0c:df:dc:6f:f2:d1:34:0d:45  ....$.....o..4.E\n00000180  76:e1:fa:f2:46:69:5f:60:51:b2:ae:b1:52:32:af:3a  v...Fi_Q...R2.:\n00000190  ae:a7:fb:e0:58:e2:71:36:d0:72:c6:cb:4e:32:f6:15  ....X.q6.r..N2..\n000001a0  60:44:e7:14:20:eb:ef:5b:12:a8:97:d5:e5:bc:e2:8b  D.. ..[........\n000001b0  cf:dd:1f:6d:1f:a9:06:45:a7:f8:03:0f:bf:ae:13:86  ...m...E........\n000001c0  25:3c:ec:70:44:80:70:28:b9:e9:b4:e4:6e:a7:ec:4b  %..pD.p(....n..K\n000001d0  24:c5:67:21:c0:8e:c1:44:ab:42:fc:68:95:79:91:28  $.g!...D.B.h.y.(\n000001e0  89:bd:fe:c6:a1:fd:be:f0:d8:cb:30:3e:16:c4:0c:10  ..........0>....\n000001f0  60:3f:26:80:13:b4:bd:af:68:1d:c5:79:66:cf:dd:da?&.....h..yf...\n00000200  c6:9d:0f:bd:15:e6:fb:fe:f0:cb:5e:3d:d9:12:a0:e2  ..........^=....\n00000210  7f:9c:5e:dc:22:af:39:78:fe:9d:cc:38:c4:38:26:f9  ..^.\".9x...8.8&.\n00000220  00:00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000230  00:01:00:68:5d:69:06:22:ac:a1:45:9d:2b:e0:9f:1f  ...h]i.\"..E.+...\n00000240  da:c0:ca:0c:52:03:bb:31:a7:81:4a:ff:09:74:76:21  ....R..1..J..tv!\n00000250  af:2d:d0:19:5e:5a:2a:9e:f5:cd:b4:d8:1f:bf:23:da  .-..^Z*.......#.\n00000260  43:84:82:6a:1c:ca:12:6c:7e:7b:16:77:8d:59:db:64  C..j...l~{.w.Y.d\n00000270  27:c0:56:23:5a:65:a6:dd:0d:79:75:7f:25:0a:90:d0  '.V#Ze...yu.%...\n00000280  80:3e:b8:70:1e:10:f7:10:04:46:65:bc:56:dc:41:7c  .>.p.....Fe.V.A|\n00000290  25:5a:87:44:0b:cb:bc:d1:fa:7c:f6:77:1a:ef:4d:d7  %Z.D.....|.w..M.\n000002a0  19:51:aa:e9:47:72:6f:2c:6f:d1:35:de:88:1e:26:dc  .Q..Gro,o.5...&.\n000002b0  48:25:10:87:58:80:e2:cd:a4:17:d6:7a:83:76:88:64  H%..X......z.v.d\n000002c0  ee:c1:6f:60:af:91:ba:f2:ae:3d:75:13:e0:be:e5:57  ..o`.....=u....W\n000002d0  e5:51:17:10:d8:c8:16:c0:9e:12:39:df:97:ff:9d:fa  .Q........9.....\n000002e0  36:8a:86:28:17:67:0b:c1:d3:8a:ae:51:e1:b6:1b:c7  6..(.g.....Q....\n000002f0  ed:49:44:57:62:2f:bc:14:62:f7:90:5b:65:ea:a6:ca  .IDWb/..b..[e...\n00000300  9d:17:c5:04:fe:e9:43:4f:4e:db:b8:ef:b0:83:66:ec  ......CON.....f.\n00000310  ea:0e:92:09:3a:38:0d:8e:ee:3d:52:ea:4a:75:ec:fb  ....:8...=R.Ju..\n00000320  86:14:84:f5:a8:78:ff:58:58:b2:5a:1a:35:b9:aa:94  .....x.XX.Z.5...\n00000330  4d:ac:d4                                         M..\n-> NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n```. if you need more informations, my ssh server is a Cygwin Openssh server for windows and my php server is a glassfish4 with quercus 4.0.39 . I try your solution yesterday but nothing changes, I also try to connect to my ssh server from a cmd client installed in the web server and it works.\nIf you want to duplicate the problem, you will find all the information I can give you bellow:\nthe FTP Server :\n- ip : 192.168.71.58:22\n- Windows 7 pro\n- server Cygwin OpenSSH \nthe FTP Client (using PHPSecLib) :\n- ip : 192.168.111.74\n- Windows Server 2008\n- Server Glassfish4 with the Quercus 4.0.39 Lib to interpret PHP. ",
    "Programie": "I think running \"ping\" in the background seems to have fixed the issue.. ",
    "antonydandrea": "Glad to see it passes the tests. I actually looked a little deeper after I opened this and found that the code checks if mcrypt is available before attempting to use it which is ideal.\n\"The fact that it's being used on your system suggests that OpenSSL isn't available so mcrypt is gonna be the fastest way to do encryption in PHP\", it actually suggests that our systems need updating as OpenSSL is available on 7.2 and mcrypt not hence why we started this.\nI find it staggering that you would be so against removing a dead library in favour for one that is not dead.. It passes the tests because thankfully, there is code that first checks if it is installed before trying to use it. That then leads to the point that most people after PHP 7.2 will not have it installed and so these so called speed benefits will simply not be seen.\nTo be honest, my original post was before I knew that it was only used if installed so it is all good. . ",
    "tessus": "@terrafrost \n\nRemoving mcrypt is not going to happen because, deprecated tho it may be, it's still a heck of a lot faster than the pure-PHP implementation. \n\nAgreed. However, there are alternatives, e.g. libsodium.\n\nThe fact that it's being used on your system suggests that OpenSSL isn't available so mcrypt is gonna be the fastest way to do encryption in PHP.\n\nDoes this mean, if I use the openssl php extension, mcrypt extension is neither required nor needed?. @terrafrost thx for the info.. ",
    "rmmohamedi": "Thanks for your comment @terrafrost, finally i managed to fix the error. I fixed it by commenting the header line <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> which was initially not commented. When you use Macromedia Dreamweaver automatically the header codes showing DocType, language Translational etc is created automatically. Therefore when you use header location anywhere in code a header limiter error results.\nI appreciate your contribution . ",
    "dhzavann": "Thank you for your review.\nHow does this look? I decided to go for \"enablePathCanonicalization\" instead of enableRealpath as I thought that to be a bit more explanatory, but that can be changed of course.. ",
    "lockland": "Hey Terra,\nThe full identifier is \"SSH-2.0-DLINK Corp. SSH server ver 1.00.000\".\nI put a check for just a part of a string because I do not have other dlink model to test and this model was the only one showing an error.\nI did not put switch(true) because it is not so clear for me, in that case I would prefer using ifs instead, on the other hand with switch statement we can write less code than using ifs.\nI guess it is not a problem and the adaption is so easy.. Of Course It is, because of it I sad that the statement is not so clear for me. kkkkkk\nSo thank you for reply and for your excellent job with this amazing lib. I am using it for about 2 year and it was the only time I got an error even on version 0.3.10 that was the version I was using until last 2 weeks.\nI would verify if you can to merge this fix on version 1.0.6 as well because it is the only version support php 5.3. Pleasee!!. ",
    "luolufang": "@terrafrost thx for your answer,   before i login the system  idk the right password is which one .so i i must try three different  password \u3002and H3C router could be login by using  password authentication .but  i found the cisco device is difference .some cisco router must use keyboard-interactive authentication . so i wirte two function \nand i want to know.if i\u2018m trying the wrong password login ,and $ssh->login(\"$first username\",\"$first passowrd\") return false .  how can i try the second password.\njust run $ssh->login(\"$second username\",\"$second passowrd\") immediately?\ni use the error suppression operator,because some login method is ok on a cisco device\uff0cbut it's report a user notice errer  on another cisco device\u3002i must make sure the script  won't break by these notice\n. ",
    "abdsidiya": "more about it\nhttps://stackoverflow.com/questions/44957519. ",
    "lewa": "I've been downloading gigabytes without issues; I've got to be very (un)lucky to get the nulls again any time soon. However, I will enable the logging to have some food for thought next time the null bytes occur.\nPS there's an undefined class constant LOG_REALTIME_FILENAME in SSH2.php; fixed in the master branch though.. NET_SSH2_LOG_REALTIME_FILENAME vs self::LOG_REALTIME_FILENAME\nThe difference between the master branch and the 2.0 branch: it's a class constant in the latter. By the way, there's a typo in the comment: NET_~~SFTP~~SSH2_LOG_REALTIME_FILENAME. I don't have access to the sending server, apart from SFTP. The only thing I am sure about is that the file had no null bytes on the sending server (it is immensely unlikely that they could disappear between the two back-to-back download attempts with the modification time intact) and that the file had null bytes on the receiving server.. Never happened again. Case closed.. ",
    "zoispag": "@terrafrost will it work for PHP 7.2, when mcrypt will be completely removed?. ",
    "nishanth6": "Issue Solved when installing php7.2-mcrypt\nI was also facing the same issue. Check this link https://stackoverflow.com/q/48275494/7713811 to get the right solution for installing it in PHP. ",
    "bluebaroncanada": "Well, I know you would like me to go PR docs instead of writing you this issue, however, I know less about the project than you, and I work a 40+ hr job.\nI would have to chase execution through the entire project and make educated guesses on what the developer was thinking at the time.\nThis is probably a lesson in proper documentation as part of a well-designed project.. ",
    "yanbreu": "Oh I'm sorry, I didn't noticed it.\nShould I close this PR and create a new one against 1.0?\nNo problem!. ",
    "kevindh89": "I've removed the type hinting in setEncryptionAlgorithms for the sake of consistency.\nI'm not sure what happens if any unsupported algorithms are set. But probably unexpected issues, which you'll want to avoid, will occur.\nFor that reason a restriction was added for setting supported encryption algorithms only.\nI opened another pull request to make the other algorithms configurable: https://github.com/phpseclib/phpseclib/pull/1165. ",
    "rrran": "1.\n\nInstead of doing phpseclib/Net/SSH2_CHANNEL_EXTENDED_DATA_TYPE_CODES.php what about \ndoing phpseclib/Net/SSH2/CHANNEL_EXTENDED_DATA_TYPE_CODES.php.\nMay be. How ever, I think, it could be better when an RFC constant use\nif ( SSH_OPEN_ADMINISTRATIVELY_PROHIBITED )\nbecomes \n\nuse blah\\blah\\SSH_OPEN; \nif ( SSH_OPEN::ADMINISTRATIVELY_PROHIBITED )\nand not\nuse blah\\blah\\SSH\\OPEN; \nif ( OPEN::ADMINISTRATIVELY_PROHIBITED )\nIn first case it looks almost like \"real\" constant.\nBut it's up to you.\n\n\n\nCHANNEL_EXTENDED_DATA_TYPE_CODES becomes ChannelExtendedDataTypeCodes \n.........\nI'd prefer to keep it in upper case with underscores. \nFor usual classes and objects - I agree, CamelCase rules. But here, I'd like to point, that we're using (simulating) Enums, not classes or objects.\n. BTW, if you're going to break BC, may be it's a good idea to kick out ssh1 support?. As resume, you're refactoring a lot right now, so at this moment this patch is not relevant, but the idea is good.\nI'll wait till you push the new code :)\nRight?. Yeah! grep -R  func_get_args ./\n:) \nI'm using Linux and PHPStorm\n. Done! \n/**\n\n\n......\n/\nconverted to / ..... */\nTests passed.\nAnd thumbs up to the getting rid of extract()\n. Cool! Looking forward for 3.0 :). Thanks for the comment. I suspected, but was not sure if it's a correct behavior. SFTP class extends SSH2 and overrides method disconnect_helper($reason), also it calls parent's method:\n\nphp\nprotected function disconnect_helper($reason)\n    {\n        $this->pwd = false;\n        parent::disconnect_helper($reason);\n    }\nParent's method was declared as private, so could not be called outside the class.\nI changed it's visibility to protected. \nAlso I have to change visibility of the successor's method.\n. File PHP.php\nmethod:\nprotected function powModInner(PHP $e, PHP $n)\n    {\n        try {\n            $class = static::$modexpEngine;\n            return $class::powModHelper($this, $e, $n, static::class);\n        } catch (\\Exception $err) {\n            return PHP\\DefaultEngine::powModHelper($this, $e, $n, static::class);\n        }\n    }\nAs you can see here's a static call which can't be performed if the powModHelper method is not public\n. File PHP.php\nmethod:\nprotected function powModInner(PHP $e, PHP $n)\n{\ntry {\n$class = static::$modexpEngine;\nreturn $class::powModHelper($this, $e, $n, static::class);\n} catch (\\Exception $err) {\nreturn PHP\\DefaultEngine::powModHelper($this, $e, $n, static::class);\n}\n}\nAs you can see here's a static call which can't be performed if the powModHelper method is not public. Me too, but I try to keep php 5.3 compatibility.  static::class - it's from 5.5.. Yes, thanks.. ",
    "dvaeversted": "This solved an issue with connection errors against Cisco devices that we started experiencing after upgrading from a 0.X release of phpseclib, to 2.0.6. ",
    "ricbra": "Our main concern is to get the initial change merged into 2.0 (https://github.com/phpseclib/phpseclib/pull/1156/commits/a828656a043524af1b4b35c2494d8143ff8adad4) as we currently are using a private fork of this repository to fix it in production which we want to get rid of. Both @kevindh89 and I are working on these open source contributions during office hours meaning our current client / employer is paying for this work. Thats all cool and stuff but unfortunately it means we're being limited with the time being invested. \nWe understand the concerns in your comment but its difficult for us to find the time to discuss and solve all the issues mentioned here. I hope you understand this. It's not that we don't want to help you with this.\nThat being said, what would be the most easy to way to get our changes merged? Solve the merge conflict you mentioned?\nWould be cool to get our work in, as it will help quite some people in the future stumbling on the same problem as us.\n. @terrafrost I totally understand what you're saying (I also have some OSS stuff published which I have to maintain in my free time) and it was absolutely not the point that you should be the person who's gonna solve our issues unpaid in your free time. So, apologies for the misunderstanding and we're very happy with all the work you've done so far with this library. Hence, we're using it for quite some time now.\nWe were hoping we could tighten the scope of these changes somehow: what started as a small PR with just one new method it now has become a bit bigger and to be honest we struggle with the latest comments. We're not that familiair with this library and the inner workings of SSH(2) and/or PuTTy so we're getting lost there quite fast.\nSo the combination of us getting lost and the limited time was the reason I mentioned this. And again, we're not expecting you to code for free for us! We have no expectations of this getting merged in very quickly, we just want to help as much as possible so our work wasn't done for nothing. \n. ",
    "T3N4K4": "@terrafrost yes we are using a 32-bit system but the php version is 5.6.11-1. Is it therefore possible to \n\nIt'll do DateTime if it exists and if not it'll use unix time, despite it's flaws.\n\ndo this ^?. ",
    "HazCod": "Seems like loadKey returned false, which I did not check... ",
    "System25": "Sorry, I missunderstood the difference between explicit and implicit.. ",
    "russellmeyers01": "Are there any plans to tag a new release that includes this fix soon in the 2.0 version (i.e. a 2.0.7 version)?  I ran into this issue suddenly over the weekend with an external party, and the fix works.. ",
    "adoley": "Thanks for your response. Can you let me know when  ECDSA support will be available.. ",
    "zerkms": "Sorry, it's the latest stable v2.0.6\nAnd as I mentioned - it's intermittent and really tricky to reproduce.. Right, I will add the corresponding changes and hopefully adding logging does not turn this into the observer's paradox.\nThanks.. After few more investigation I have found, that when it happens - on the sender side the receive buffer (recv-q in the ss or netstat) reaches 1024 and then does not change.\nAnd seems like this whole situation is somehow related to the transfer speed: if I add a usleep in the callback I use to output the $sent bytes - then at some value the problem stops being reproducible: at 1ms it still happens, and at 3ms it's not anymore.. ",
    "Nilithus": "Just wanted to report to also seeing this issue in version 1.0.5 the other day.\nUndefined offset: 0 .../vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:2577\nwhich would be this line Unfortunately we did not have NET_SSH_LOGGING defined. So we weren't able to capture any logs.\nIf we find anything note worthy that explains it will let you know.\nEdit -- only seen this once or twice over the last year or so.. ",
    "royduin": "Same issue here. Once in a while I get Undefined offset: 1 in vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php line 2766. I can't relate it to anything so it's hard to reproduce.. I'm currently using version 2.0.7. I run scripts to check my servers, these commands run pretty often (some every minute, others every 5 minutes on 40 servers) so one of them is probably causing this error:\n\nPrimary disk usage percentage: df -h | grep ^/dev/ | head -1 | awk '{print $5}' | tr -dc '0-9'\nSecondary disk usage percentage: if [ $(df -h | grep ^/dev/ | wc -l) -eq 2 ]; then df -h | grep ^/dev/ | tail -1 | awk '{print $5}' | tr -dc '0-9'; fi\nUsed memory percentage: free | grep 'buffers/cache' | awk '{print 100 - $4/($3+$4) * 100}' | grep -Eo '[0-9]+\\.[0-9]+' || free | grep 'Mem' | awk '{print $6/$2 * 100}') | awk '{print int($1)}'\nUsed CPU percentage: top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}' | awk '{print int($1)}'\n\nBut when I look in Sentry this error appeared 8 times 1 one month. When I look at the times they occurred it's always between 6:30 and 6:55 (Central European Time). At 6:30 AutoMySQLBackup is starting to backup all the databases on the servers so I think the servers are pretty busy and don't always return the expected response.. I've implemented the logging a little bit different:\ntry {\n    $value = $ssh->exec($command);\n} catch (\\Exception $e) {\n    throw new \\Exception($ssh->getLog());\n}\nLet's wait until it occurs again.. ",
    "hartois": "Sorry, I'm retest and cannot reproduce problem.\nI'll check it again and answer.. Problem not confirmed. ",
    "mirfilip": "Crux of the problem seems to be a failure of reading http stream stats with fstat. It returns false.\nThere is a disclaimer on docs page:\n\nNote: This function will not work on remote files as the file to be examined must be accessible via the server's filesystem.\n\nA simple snippet to reproduce:\n$remoteFileStream = fopen(\n    'http://www.example.org/',\n    'r'\n);\n$stats = fstat($remoteFileStream);\nvar_dump($stats); // false\nOf course, handling remote streams bears more questions like resumes via range header, efficiently copying it chunk by chunk, as it's not viable to just copy the remote stream to memory stream.\nAs this library can create and register a wrapper, I think it'd be possible to open a remote handle for sftp and do: stream_copy_to_stream($remoteFileStream, $sftpFileStream) or equivalent.. Here is my usage example of stream wrapper:\n```\n<?php\n$remoteFileStream = fopen(\n    'http://www.example.org/,\n    'r'\n);\n$to = \"test123.txt\";\n\\phpseclib\\Net\\SFTP\\Stream::register();\n$sftpFilesystem = new \\phpseclib\\Net\\SFTP($hostname, $port, 30);\nif (!$sftpFilesystem->login($user, $pass)) {\n    exit(1);\n}\n$context = [\n    'sftp' => [\n        'sftp' => $sftpFilesystem\n    ],\n];\n$sftpStream = fopen(\"sftp://upload/$to\", 'w+', null, stream_context_create($context));\nif (!$sftpStream) {\n    exit(1);\n}\n$bytes = stream_copy_to_stream($remoteFileStream, $sftpStream);\nif ($bytes > 0) {\n exit(0);\n} else {\n    exit(1);\n}\n```\nIt indeed works, but file gets uploaded to root directory instead. I'm fiddling with that nuisance now.. @bantu \ud83d\udc4f \nIndeed, changing to fopen(\"sftp://./upload/$to\", 'w+, ...) handles that. I pass host, port, user, pass directly to SFTP instance.\nI just wish interaction via Stream wrapper was documented. Maybe I'll contribute with some simplest use case.\nAlso, how about disallowing using remote streams with SFTP methods if they don't handle them? At very least, I feel it should return success false in that case.. @terrafrost Thank you. \nI confirm https://github.com/phpseclib/phpseclib/commit/deb485c0e1e32de4408d3d5e69ab64366abc7ff8 fixes the issue.\nNow using a stream wrapper and put both work.. ",
    "lostinroom": "Hi, thanks for quick response.\nI lower the timeout as you suggest it, yes, it speeds up.\nWhy is that? Is there any problem if change timeout to 1?\nThis is my php code:\n```php\nrequire_once 'vendor/autoload.php';\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->addPsr4('phpseclib\\', DIR.'/phpseclib');\n$loader->register();\nuse phpseclib\\Net\\SSH2;\ndefine('NET_SSH2_LOGGING', 2);\ntry {\n    $ssh = new SSH2('spreod03');\n    $ssh->setTimeout(5);\nif (!$ssh->login('user001', 'xxxx')) {\n    throw new Exception('Login Failed');\n}\n\necho '<pre>';\necho $ssh->read('username@username:~$');\n$ssh->write(\"whoami;date;\\n\");\necho $ssh->read('username@username:~$');\n$ssh->write(\"pwd;date;\\n\");\necho $ssh->read('username@username:~$');\n\nvar_dump($ssh->getLog());\necho '</pre>';\n\n} catch(Exception $e) {\n    echo '';\n    var_dump($e->getMessage());\n    echo '';\n}\n```\nSSH2 logs:\n```\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 2.5933, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:0d:77:68:6f:61:6d:69:3b:64  ........whoami;d\n00000010  61:74:65:3b:0a                                   ate;.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0008, network: 0s)\n00000000  00:00:00:01:00:00:00:04:77:68:6f:61              ........whoa\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:02:6d:69                    ........mi\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:06:3b:64:61:74:65:3b        ........;date;\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:03:0d:0d:0a                 ...........\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.3209, network: 0.0001s)\n00000000  00:00:00:01:00:00:00:09:63:70:72:61:6e:6f:74:0d  ........user001.\n00000010  0a                                               .\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0029, network: 0s)\n00000000  00:00:00:01:00:00:00:1e:54:68:75:20:41:75:67:20  ........Thu Aug \n00000010  33:31:20:30:39:3a:31:34:3a:33:33:20:53:47:54:20  31 09:14:33 SGT \n00000020  32:30:31:37:0d:0a                                2017..\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0s)\n00000000  00:00:00:01:00:00:00:0d:56:31:5f:73:70:72:65:6f  ........V1_spreo\n00000010  64:30:33:25:20                                   d03% \n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 4.6805, network: 0.0001s)\n00000000  00:00:00:00:00:00:00:0a:70:77:64:3b:64:61:74:65  ........pwd;date\n00000010  3b:0a                                            ;.\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0007, network: 0s)\n00000000  00:00:00:01:00:00:00:01:70                       ........p\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:02:77:64                    ........wd\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n00000000  00:00:00:01:00:00:00:06:3b:64:61:74:65:3b        ........;date;\n```. I just realized that my bash prompt is different. \nIt is V1_[my machine name]% not username@username:~$.\nHow do I know what my default bash prompt?. Hi, thanks for the explanation. \nAfter doing some testing my end, I realized that I can't find pattern of my prompt.\nI have around 20 machines and they are set by different person so they may have different preference to set up the prompt format.\ni.e.  V1_spreod03% and spr004sg:~%\nIs there any other way without providing my prompt format to $ssh->read()?\nFrom my opinion, it may cause issue, if users personalize their prompt format.. ",
    "haganicolau": "Hi there.\nI have this situation. I can't access that link, Page Not Found. Can help me?\nThanks.  . ",
    "Smitsel": "Would be awesome if this could be merged in the near future since it would allow us to use ext-sodium instead of the old libsodium package.. ",
    "willemstuursma": "We would really appreciate this being merged.\n\nIt allows phpseclib to work with paragonie/sodium_compat\nIt allows phpseclib to work with ext-sodium using mollie/polyfill-libsodium. \n\nChecking for the existence of a function vs the installation of a module is a bit like feature checking vs. browser detection.. ",
    "eternalharvest": "@Sxderp thank u, I understand about that.\nHow about return types I commited in this pull-request?\nI think this DocComment is wrong.... Thank you for taking a time to reviwing my PR!. fix indent and bit refactor the code!. Thank you for the detailed information!\nThe motivation behind this PR is not intended to use with mcrypt_compat though this information is very helpfull.\nI was not considering about which branch to merge this PR.\nBut, I am very pleased if this PR is included in the next release of 2.x!\nAnyway, Thanks a lot!!. I'm not sure what is the difference between $versions['Header'] and $versions['Library'].\nBut i wonder if we can simply use OPENSSL_VERSION constants instead...\nRef) http://php.net/manual/en/openssl.constversion.php. Sorry It was my comment...\nThank u for the detailed information.\nI read the code of openssl php module.\nIt seems $versions['Library'] comes from SSLeay_version(SSLEAY_VERSION).\nAnd there is no exported php function to call SSLeay_version, and no defined constant values we need.\nhttps://github.com/php/php-src/blob/master/ext/openssl/openssl.c#L1590-L1591\nAs @terrafrost  mentioned,  it seems that is a best way.\n. What the hell!! I didn't notice that...\nI will fix it!\nShould I exec git rebase -i to squash the commit and force update the PR?. ",
    "UniFreak": "Although I don't know why, and don't quite understand your explanation, as I see it, the C# md5 twice. but that indeed solve the problem. So it's not a phpseclib problem. Thanks :). ",
    "c33s": "i also work on windows but i am using linux line endings for everything i can. all good editors can handle linux line endings (like [notepad++][6]). \nwhat about making it configurabe?\nif you use a lot of automation and work with things like git, puppet and hiera with eyaml, being stuck with windows line endings is not really a good thing. \nalso if you use ssh and need/use keys you mostly work with linux servers. my windows has most of the linux tools available (wget, curl, bash, ...)\nso even if i work on windows, in this context windows line endings feel quite wrong for me :)\nthe incompatibilies rise up if you work with git with the setting of converting all line endings from windows to linux. all the time you have \"changed\" files but only the line ending has changed or you have to convert before storing them like i did in my pull request for sshkey to ensure consistent and working files for the target environment.\n[6]: https://notepad-plus-plus.org. i would still go for a user configurable EOL setting with a default for linux line endings (as they are supported cross platform meanwhile), because as i use windows for developing, i would again be stuck with windows line endings of you go for PHP_EOL :)\n(in other libs it is the same with the DIRECTORY_SEPERATOR, windows is pretty fine with/ but if you use gnu for windows tools and bash a lot, this autodetection simply break things.). ",
    "mrrsm": "I would rather you finish enjoying your vacation time and come back when you're ready.  In the meantime, here is what I tried and some more of my thoughts.\nFrom everything I have tried and read OpenSSL does not let you sign with a public key, it throws an error asking for a private key to be supplied.  This means that if I sign something in phpseclib with the public key I will only be able to verify it in phpseclib as OpenSSL does not let you verify a signature with a private key.\nbash\n-> % openssl dgst -sha256 -sign public.key -out /tmp/sign.sha256 example.php\nunable to load key file\n26651:error:0906D06C:PEM routines:PEM_read_bio:no start line:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64.50.6/src/crypto/pem/pem_lib.c:648:Expecting: ANY PRIVATE KEY\nFrom the RFC [0]\n```\nRSASSA-PKCS1-V1_5-SIGN (K, M)\nInput:\n  K        signer's RSA private key\n  M        message to be signed, an octet string\n\n```\nI still need to do a bit of reading to figure out why other implementations would reject signing with a public key. Based on your statement that they could be indistinguishable it should allow me to throw any side of the key pair I want at it and it just work. My only guess would be that it is complaining that I am sending it the public key in pem format and it detects and errors on that.  Even in that case, phpseclib is parsing my public key pem file and could be erroring in that same way as it knows that the information provided came from a public key because it did the parsing of the key.\n[0] https://tools.ietf.org/html/rfc8017#section-8.2.1. ",
    "timothymarois": "Interesting, on another device and location I\u2019m getting this. Looks like it takes too long to load and caps out. \n\n. ",
    "clmayo": "Yeah - I finally after around 50 tries got it to work... then it didn't. . ",
    "P4sca1": "Thank you very much for your answer.\nI checked my /var/log/auth.log and this is what I noticed.\nwithout timeout, closing the page after a few seconds manually\nOct  8 17:18:06 ds1 sshd[24717]: Accepted password for master from  {ip-address} port 54477 ssh2\nOct  8 17:18:06 ds1 sshd[24717]: pam_unix(sshd:session): session opened for user master by (uid=0)\nOct  8 17:18:06 ds1 sudo:   master : TTY=unknown ; PWD=/home/master ; USER=egm-dev-game-1-1 ; COMMAND=/home/master/scripts/useraction.sh gameserver_tail_screenlog gmod\nOct  8 17:18:06 ds1 sudo: pam_unix(sudo:session): session opened for user egm-dev-game-1-1 by (uid=0)\ntimeout 5 seconds\nOct  8 17:19:43 ds1 sshd[25012]: Accepted password for master from  {ip-address} port 54859 ssh2\nOct  8 17:19:43 ds1 sshd[25012]: pam_unix(sshd:session): session opened for user master by (uid=0)\nOct  8 17:19:43 ds1 sudo:   master : TTY=unknown ; PWD=/home/master ; USER=egm-dev-game-1-1 ; COMMAND=/home/master/scripts/useraction.sh gameserver_tail_screenlog gmod\nOct  8 17:19:43 ds1 sudo: pam_unix(sudo:session): session opened for user egm-dev-game-1-1 by (uid=0)\nOct  8 17:19:48 ds1 sshd[25018]: Received disconnect from  {ip-address}: 11:\nOct  8 17:19:48 ds1 sshd[25012]: pam_unix(sshd:session): session closed for user master\nFrom what I can see, the ssh connection without a timeout is never closed. Could it be because of set_time_limit(0)?\nIf so, do you know any other way to keep a ssh connection open while the browser tab is open?. Oh, I noticed another thing. The connection is indeed closed, exactly 2 minutes after it has been created!\nI tried it another time, and it was exactly 2 minutes again. \nDo you know why it is closing? Is it because of my ssh configuration or my apache configuration or maybe phpseclib itself? Just want to know what closes the session so I can make sure that it is working fine everytime on different systems.. Okay I found the reason.\nReferring to the php docs (http://php.net/manual/de/features.connection-handling.php), php is calling the shutdown function and thus disconnecting the ssh session, when noticing, that the user has closed the page. PHP checks that everytime, the script is giving some output. In my case I am using tail and if there is no output, the connection will persist, even if the user has closed the page. I manually inserted something to the file tail was referencing it, and the ssh connection immediately got closed.\nSo the solution to my problem would be to either hope for tail to having output or to somehow check for connection status not only when something is being echoed out.\nSo phpseclib is working just as expected and is closing the connection right.\nAnyways, thanks for your answer! \ud83d\udc4d . I updated my issue to include more details.. I guess the read() function waits for the write() function to finish, but because tail -f never finishes, I do not get any output. If that's true I would need a function (e.g. tempRead()) to read the output that has been produced since the last tempRead() call. I think the exec command callback is doing exactly that,  but I do not really understand the code. Would it be possible to implement a tempRead() function? @terrafrost . Here's a solution with php's ssh2 library:\n```\npublic function tailScreenLog()\n    {\n        set_time_limit(0);\n    $this->disableOutputBuffer();\n\n    if ($ssh = ssh2_connect($this->masterServer->ip, 22)) {\n        if (ssh2_auth_password($ssh, \"username\", $this->masterServer->password)) {\n            $stream = ssh2_shell($ssh); // request an interactive shell\n\n            $command = \"/usr/bin/nice -n 19 /usr/bin/ionice -c2 -n7 \";\n            $command .= \"sudo -u \" . $this->username() . \" \";\n            $command .= \"/home/master/scripts/useraction.sh gameserver_tail_screenlog \" . $this->game_short;\n\n            stream_set_blocking($stream, false);\n\n            fwrite($stream, $command . PHP_EOL);\n\n            return $stream;\n        }\n    }\n\n    return false;\n}\n\n```\n```\n$stream = $gameServer->tailScreenLog();\n        $lastAbortCheck = 0;\n    if (is_resource($stream)) {\n        while (true) {\n            $time = microtime(true);\n\n            // only do the abort Check once every second\n            if ($lastAbortCheck + 1 < $time) {\n                echo \"abort check\"; // we need to echo something for PHP's user abort system to work\n                $lastAbortCheck = $time;\n            }\n\n            // **basically this part is what I am missing in phpseclib!**\n            if ($content = fgets($stream)) {\n               echo $content;\n            }\n        }\n    }\n\n```\nThis works fine, but I would really like to use phpseclib. Would be nice if something like this could get implemented.. Okay, thank you for your answer.\nI don't quite get what you meant by that:\n\nWhat you do need to do, however, is wait for the prompt. Until the shell presents the prompt sending commands will likely not work.\n\nHow can I wait for the prompt? . Hmm, now the page does not stop loading:\n```\nif ($this->masterServer->sshConnect()) {\n            $ssh = $this->masterServer->sshObject();\n            $ssh->setTimeout(0);\n            // $ssh->enablePTY(); // not needed for $ssh->write()\n        $showOldLines = $showOldLines ? \"1\" : \"0\";\n\n        $command = \"/usr/bin/nice -n 19 /usr/bin/ionice -c2 -n7 \";\n        $command .= \"sudo -u \" . $this->username() . \" \";\n        $command .= \"/home/master/scripts/useraction.sh gameserver_tail_sessionlog \";\n        $command .= $this->game_short . \" \" . $showOldLines;\n\n        $ssh->read('[prompt]'); // wait for the prompt\n        $ssh->write($command . \"\\n\");\n        echo $ssh->read();\n\n        // return $ssh;\n    }\n\n```. > One thing you could do to figure out what the prompt is... do $ssh->setTimeout(3); echo $ssh->read();. Or maybe bin2hex($ssh->read()).\nBoth things output nothing.\n\nAnother possibility might be to do something like this:\n$ssh->setTimeout(1);\n$ssh->read();\n$ssh->write(\"command\\n\");\necho $ssh->read();\nThis does not work either, but I noticed that using the code snippet below, will give me the output I want, every 0.1 seconds:\n$lastCheck = 0;\nwhile (true) {\n$time = microtime(true);\nif ($lastCheck + 0.1 < $time) {\n$ssh->setTimeout(0.1)\necho $ssh->read();\n}\n}. Okay, weird. No the $ssh->read() returns something. Is this called the prompt?\nLinux {fqdn} 4.5.2-mod-std-ipv6-64 #8 SMP Tue Apr 26 15:41:39 CEST 2016 x86_64 GNU/Linux server : 719643 ip : {ip} hostname : {fqdn} Last login: Tue Oct 10 20:55:01 2017 from {ip} {user}@{machine}:~$. \n",
    "jeroenvermeulen": "We have the same problem, we are using version 2.0.7\nI will add the define('NET_SSH2_LOGGING', 2); echo $ssh->getLog(); error log.\nI have redacted some stuff using [placeholder] and ###.\nssh2_error_report.txt\n. Workaround which only seems to work with current master branch (2314b63):\n```\nfunction execOnSsh(SSH2 $ssh, $cmd, $retries=3) {\n    try {\n        $result = $ssh->exec($cmd);\n    } catch (\\Exception $e) {\n        if ($retries) {\n           sleep(3);\n           $result = execOnSsh(SSH2 $ssh, $cmd, $retries-1);\n        } else {\n           die($e->getMessage());\n        }\n    }\n}\n$ssh = new SSH2('server.host.name');\necho execOnSsh($ssh, '/path/to/binary/on/ssh/server arg1 arg2');\n```\nDisclaimer: I did not test this exact code, I had to simplify how we do it.. ",
    "totomtornado": "Thanks...\nThat answers it... sftp would do in fact what I do not want to do...\nI should use exec instead in this case....thanks!\nthe remote machine is a windows machine and the pi is running ubuntu.  Do\nI need to edit the exec statement in anyway to accommodate for this fact?\nWhile researching I saw all kinds of variations on this.  Some used the\nnative ssh2 library and some used \u201ccmd COMMAND\u201d...\nIs calling commandline(cmd) like this necessary with phpseclib and an\nubuntu to windows setup?\nCheers\nOn Wed, 1 Nov 2017 at 11:49 AM terrafrost notifications@github.com wrote:\n\nSo you want to use phpseclib from the Raspberry Pi to facilitate the\ncopying of a file from one location on a remote computer to another\nlocation on that same computer?\nDo you have shell access? If so $ssh->exec('cp /path/to/file.ext\n/home/user/Desktop')l or some such should do the trick.\nIf you're using SFTP to do the transfer... you'd have to download the file\nand then reupload it. That's just how SFTP works. You can't facilitate\nremote transfers with SFTP. With FTP there's FXP\nhttps://en.wikipedia.org/wiki/File_eXchange_Protocol but SFTP has\nnothing comparable.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1201#issuecomment-340963367,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AYZwqHAF07isC6BDHI19nnB09joK-4owks5sx9wpgaJpZM4QMVOv\n.\n. Thanks a ton for the insight!  You da bomb!\n\nOn Wed, Nov 1, 2017 at 1:09 PM, terrafrost notifications@github.com wrote:\n\nthe remote machine is a windows machine and the pi is running ubuntu. Do\nI need to edit the exec statement in anyway to accommodate for this fact?\nYou'd probably need to do copy c:\\path\\to\\file.ext\nc:\\users\\username\\Desktop then or some such.\nWhile researching I saw all kinds of variations on this. Some used the\nnative ssh2 library and some used \u201ccmd COMMAND\u201d...\nIs calling commandline(cmd) like this necessary with phpseclib and an\nubuntu to windows setup?\nYou mean http://php.net/ssh2? I'd have to see an example to provide any\ninsight into what that's all about but no - in phpseclib you shouldn't have\nto do that.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1201#issuecomment-340973276,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AYZwqIEOIvVbPlRkR1kEfjjhojmnk0Qqks5sx-73gaJpZM4QMVOv\n.\n. Hmmm... this should work... I just can't seem to get the right command.... the path is strange or not formatted correctly...\n\nHere is what I am using:\n```php\n$SourceFilePath = \"/\\/\\YOUR-PC/\\work_video_files/\\teacher_footage_plans/\\Room_504/\\Final_Videos/\\Mystery_by_the_Lake_SP3/\\Mystery_by_the_Lake_SP3-TeamNames.txt\";\n$DestinationFilePath = \"C:\\Users\\W7UK\\Desktop\";\nprint_r(' ');`\n```\nBUT I get this error:\n```php\n\n'/bin/sh: copy: command not found\n```\n\nAny thoughts on the format for this?\n. super hard to paste this code in here as it is..... Ok... I got this to work using robocopy ... I will post the finished example in a while...... using openssh\n other commands do not really seem to work well either...\nwhat do you recommend for an ssh server?\nOn Wed, Nov 1, 2017 at 9:40 PM, terrafrost notifications@github.com wrote:\n\nA normal Windows shell wouldn't respond with /bin/sh: copy: command not\nfound. That's the kind of response I'd expect more on Windows. But who\nknows what you're using as your SSH server so maybe your SSH server is\nemulating bash or something idk. I guess to know that I'd need to know what\nyou were using as your SSH server.\nEither way it sounds like you got it tho :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1201#issuecomment-341095279,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AYZwqI1kpnm_O3DQwukrnkkstEnJiXtYks5syGatgaJpZM4QMVOv\n.\n. as an example... I can get the copy to work but I can not call a batch file... Again it says command not found.  Perhaps there is a more friendly ssh server I could be using because I do not want to run into these problems all the time.. This thread kind of took on a new topic.  It is now somewhat more about the proper ssh server software to use with phpseclib and how to interact with it but...\n\nCommands not working...\nI tried bitvise and another ssh server software.  They seemed to react strangely as well so I went back to openssh.  I have not tried the cmd idea above yet.\nI am wondering if the strange behavior of commands not being recognized might be because of how I login to the ssh session via phpseclib.  I was just using password and username.  Could using an RSA key like the example listed in this link, change things in some way?\n http://phpseclib.sourceforge.net/2.0.html\nIt feels like I am getting shutdown on functionality because of permissions.  I have the user setup as an admin on the windows machine so in my mind that would mean opening an ssh session using that user would let me to pretty much anything and any command I could in a native cmd window.  Is that thinking too ambitious?\nIt is also possible my filepaths are wrong because they are kind of funky.. When I say openssh... i believe i got my download here... https://www.openssh.com/\nIt is an exe .. is that different from the git project youlist for openssh?. Yes... i can not quite recall where I found the download for my current\n\u201copenssh\u201d server which makes my claim confusing... I know.\nI will try the link you recommend instead.  Perhaps I will have better\nresults.  I will post back after testing.  Also, I will try to figure out\nwhere I got my exe from.  It drove me crazy trying to find it again.  ;)\nOn Mon, 6 Nov 2017 at 1:22 AM terrafrost notifications@github.com wrote:\n\nSo I went ahead and tried $ssh->exec('copy file1.ext file2.ext'); on\nMicrosoft's OpenSSH port and it worked just fine. I got \"1 file(s)\ncopied\" as the response.\nCould using an RSA key like the example listed in this link, change things\nin some way?\nNot with any SSH server I've ever heard of.\nI have the user setup as an admin on the windows machine so in my mind\nthat would mean opening an ssh session using that user would let me to\npretty much anything and any command I could in a native cmd window.\nThat would really depend on the SSH server and tbh 95% of the servers I\nSSH into are Linux servers. That said, in my testing of Microsoft's OpenSSH\nport it does seem to work as you describe.\nWhen I say openssh... i believe i got my download here...\nhttps://www.openssh.com/\nIt is an exe .. is that different from the git project youlist for openssh?\nI didn't see a Windows download at https://www.openssh.com/ when I\nchecked just now, altho apparently the first result for the phrase openssh\nserver windows https://www.google.com/search?q=openssh+server+windows\nis talking about the Microsoft OpenSSH port.\nAnyway, I hate to say it, but your problems are probably beyond the scope\nof phpseclib. My guess is that you'd have this same problem with any SSH\nclient you tried. If so that would mean that this isn't a problem with\nphpseclib but rather with the SSH server itself. In that scenario I'd\nrecommend posting on superuser.com or the support forum for the SSH\nserver you're using or something.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1201#issuecomment-341985199,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AYZwqAgDQGLXmFwlBA1jgBe6mBtD3x8wks5szeC2gaJpZM4QMVOv\n.\n. \n",
    "peter279k": "Hi @terrafrost, thank you for reply.\nI mean how to use phpseclib to do the same functionality as the openssl_public_encrypt function.\nThanks.. Hi @terrafrost, thank you for your reply.\nThe CRYPT_RSA_ENCRYPTION_PKCS1 is not defined here.\nI modified the original code is as follows and it's worked successfully.\nphp\n$rsa = new RSA();\n$rsa->loadKey($this->key);\n$rsa->setEncryptionMode(2);\n$result = $rsa->encrypt($this->envName.'='.$this->envValue);\nThank you for your help again.. or use the const value.\nphp\n$rsa = new RSA();\n$rsa->loadKey($this->key);\n$rsa->setEncryptionMode(RSA::ENCRYPTION_PKCS1);\n$result = $rsa->encrypt($this->envName.'='.$this->envValue);. BTW, I think the official documentation is not followed by the version updating.\nI plan to contribute the doc at my available time.\nHow can I contribute the official doc?\nThanks.. Hi @terrafrost, thank you for your reply.\nI have never used the 1.0 before.\nI think the 2.0.x is latest release version so I plan to contribute this and the future 3.0 version.\nWill the 1.0 version be deprecated in the future?\nThanks.. ",
    "esraanaem": "i got trouble in decryption the cipher text i just separate the encrypt and decrypt, therefore the decryption not working i don't know why? must be in the place to encrypt and decrypt? . I used that the encryption mode but still the problem remain, I even saved the private key in the data base but I don't know how to use it to decrypt.      $rsa = new Crypt_RSA();\n       extract($rsa->createKey());\n    $username=$_POST['username'];\n          $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n $rsa->setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n $rsa->setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_PKCS1);\n        $rsa->loadKey($publickey);\n   $pass = $rsa->encrypt($password);\n//echo $pass;\n   $pp= $rsa->loadKey($privatekey);\n $query=\"insert into login (username,password,pp) values ('$username','$pass','$pp')\";\n       $result=mysql_query($query);. by the way I solved the problem, thanks the answer was using encode64 in encryption and decode64 in decryption it is worked fine, so again thans. ",
    "bittner": "Thanks for the hint! I fixed the package/packet wording issue.\nYes, it should be clear to people dealing with SFTP that the upper case words are constants that correspond to numbers (as usual with protocols). I think that's okay. Better than no information at all.\nI'll restore the original AUTHORS file, no problem. (Other projects require you to add yourself to that file. It's always a roulette game decision.). Anything missing to get this PR merged?. Thanks for merging!\nNo, I don't plan to make similar changes to other parts of the code. We had an issue with an SFTP server responding with a value this library doesn't handle, thus aborting the operation. The changes now merged help in diagnosing the specific case.\nIn general, though, I think I understand and agree: There are quite a few more places that need the same or a similar fix. We should probably come up with a customized version of the UnexpectedValueException to do away with the ever duplicating error message, and pass the expected values and the actual value as parameters to it. And then use that exception for all occurrences in the whole library.\nAs for the constant names I'm a bit confused. My goal was to match the error messages and the source code. The changed parts read as if there had been copy+paste mistakes, which I tried to address together with making the overall exception message more useful. Sorry for any additional work this caused.\nI feel, it's important that the constant names in the code and in the SFTP specs match. Now it's probably worth taking the time to refactor all affected parts of this library and match the real world with all parts of the code.. > The way I normally diagnose stuff is by looking at the SSH or SFTP logs. You can enable them by doing define('NET_SSH2_LOGGING', 2); and then $ssh->getLog(); or define('NET_SFTP_LOGGING', 2); and $ssh->getSFTPLog();.\nWe did that. What I intended to say and to do was, future users shouldn't have to suffer the same pain. The exception should tell what's the root cause right away. For diagnosing it will suffice to read the error message in future.. ",
    "JudeRosario": "This is when using with the 1.0 branch. Thanks for the detailed reply @terrafrost ! Appreciate it. I think he meant this file on 1.0.7. \nSpecifically this bit\n$rclist = &$this->_subArray($this->currentCert, 'tbsCertList/revokedCertificates')\nI am going to read through the other tickets you referenced and will also check where exactly the end users are getting this. Im inclined to think its a dashboard error on WordPress but will either get back or close this issue once I'm sure.\nThanks for the great work you do ! . Thanks @DavidAnderson684 @terrafrost I confirmed this is not a dashboard notice. I have limited experience with static analysis tools and did not recognize the output. Will keep your pointers in mind going forward. Closing this issue ! . ",
    "timledlie": "+1, we're preparing to upgrade to PHP7 and would like to see this fixed.. ",
    "coderintherye": "@terrafrost Would be great if you could merge it so it is compliant with the official PHP docs / suggested syntax.. ",
    "Defrand": "I can show you in pseudo-code:\n$data = Decrypt($encrypted_file);\nfile_put_contents($data, $file);\nbut I not clean the data variable, I only notice it now.\nCan the problem be it?\nI think that the problem is in first row of code.. This is a really good idea. I'll try.\n. ",
    "Robofolk": "Hi,\nThe reason I used HMACSHA256 is that this class provides a SHA256 hash function with the specified key data. With SHA256Managed and SHA256 classes, you cannot have the key. However I've already tested that the output of HMACSHA256.ComputeHash () (converted to a string) is exactly the same as PHP's hash_hmac(). \nSo what I do for research is to use hash() in PHP instead of  hash_hmac(), although including the session key in the hash is very important to me.\nBTW, Thanks I am going to ask this question on stackoverflow after my research.\n. Thanks. You're right. I don't know what's going on in RSAPKCS1SignatureDeformatter. I used hash() in PHP and SHA256.ComputeHash() in C#, but no success. Although the .NET's own example and also in your list above SHA-256 hash must be supported. . > So try using SHA256 - not HMACSHA256.\nI did try that also, but as I mentioned above I had no success with it either. I didn't update the code on this ticket with my latest code, but I did try SHA256 only. So my php code line 13 now looks like:\n$hash = hash('sha256', $package, true);\nand in C# code my code is:\nusing (var sha256 = System.Security.Cryptography.SHA256.Create())\n{\n        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"hmacPassword\");\n    csharpHmac = sha256.ComputeHash(data);\n}\nNo luck though.\nBTW, to avoid any confusion, I updated the code on the main description section as well. . I managed to solve the issue. \n\nThe PKCS1 encryption format has the OID embedded within it for the hash algorithm. The supported OIDs are as follows:\n  1. For the six hash functions mentioned in Appendix B.1, the DER\n      encoding T of the DigestInfo value is equal to the following:\n      MD2:     (0x)30 20 30 0c 06 08 2a 86 48 86 f7 0d 02 02 05 00 04\n                   10 || H.\n      MD5:     (0x)30 20 30 0c 06 08 2a 86 48 86 f7 0d 02 05 05 00 04\n                   10 || H.\n      SHA-1:   (0x)30 21 30 09 06 05 2b 0e 03 02 1a 05 00 04 14 || H.\n      SHA-256: (0x)30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00\n                   04 20 || H.\n      SHA-384: (0x)30 41 30 0d 06 09 60 86 48 01 65 03 04 02 02 05 00\n                   04 30 || H.\n      SHA-512: (0x)30 51 30 0d 06 09 60 86 48 01 65 03 04 02 03 05 00\n                      04 40 || H.\nThat's the hex encoded OIDs but the thing is... there are only a small number of hash algorithms that are accepted and none of them are HMACs.\n\nI know that you are the people who have developed phpseclib, and you know all the details about it. But by trial & error and not looking at the source code, I discovered that both phpseclib and .NET accept just anything to sign. It can be a hash, a simple string or even a HMAC.\nSo in both PHP and C# code, I switched back to HMAC as it's much more secure than ordinary hash as I can include my session-key to it. I had to do some strange things with it though. .NET gives me an array of 32 bytes for HMAC. This is the value that I need to use to verify the signed data against. But apparently in phpseclib the HMAC which is used to sign, has 64 bytes! Maybe you can explain and elaborate more on this. So in my C# code I first converted that array of 32 bytes to an array of 64 bytes (to be honest at this moment, I don't know if there is any way nicer to do this):\n```\nbyte[] csharpHmac = GetDataHashing().HMAC(System.Text.Encoding.UTF8.GetBytes(\"hmacPassword\"), System.Text.Encoding.UTF8.GetBytes(\"MyPassword\"));\nvar hmacAsString = string.Empty;\nforeach (byte @byte in csharpHmac)\n{\n    hmacAsString += @byte.ToString(\"x2\");\n}\nbyte[] urlEncodedBytes = System.Text.Encoding.UTF8.GetBytes(hmacAsString);\n```\nThen I made some changes to the verification code as well. The main difference is that I used the method VerifyData() instead of VerifySignature(). It now looks like:\n```\nprivate bool VerifySignature(byte[] hashOfDataToVerify, byte[] signature)\n{\n    RSAParameters m_serverSigningPublicKey = xxx; // For sake of brevity this line of code has truncated\nusing (var rsa = new RSACryptoServiceProvider())\n{\n    rsa.ImportParameters(m_serverSigningPublicKey);\n    // To verify the data using the signature, I should pass a new instance of SHA256CryptoServiceProvider to specify the use of SHA256 for hashing.\nreturn rsa.VerifyData(hashOfDataToVerify, new SHA256CryptoServiceProvider(), signature);\n}\n\n}\n```\n. I really appreciate if someone shed some lights on the mystery of 64 bytes as highlighted and explained in the above post.. > In order for hash_hmac to output non hex encoded data you need to\npass a fourth parameter to it - true.\nThanks. I added the forth parameter and now it matches .NET's HMAC. :-)\nFinally, I'd like to thank everybody who contributed on this post. Really helpful. I can now sign in phpseclib and verify it in .NET and vice versa.\n. ",
    "yolabingo": "Thanks much for this very detailed response.. ",
    "shauny1": "I have tried with your suggestions but not joy. My content is the base64 p7z part of a decrypted (but not uncompressed) SMIME/CMS message. Apologies for the missing $ and constant typos they were a transcribing mistake. The code now looks as follows:\n    $ber = file_get_contents('cmsCompressed.base64');\n    $asn1 = new File_ASN1();\n    $decoded = $asn1->decodeBER(base64_decode($ber));\n    $asnEncapsulatedContentInfo = array(\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array(\n                    'eContentType' => array(\n                            'type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER\n                    ),\n                    'eContent' => array(\n                            'type' => FILE_ASN1_TYPE_OCTET_STRING,\n                            'constant' => 0,\n                            'optional' => true,\n                            'explicit' => true\n                    )\n            )\n    );\n\n    $asnCompressionAlgorithm = array(\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array(\n                    'algorithm' => array(\n                            'type' => FILE_ASN1_TYPE_OBJECT_IDENTIFIER\n                    ),\n                    'parameters' => array(\n                            'type' => FILE_ASN1_TYPE_ANY,\n                            'optional' => true,\n                    )\n            )\n    );\n\n    $asnCMSVersion = array('type' => FILE_ASN1_TYPE_INTEGER);\n\n    $asnCompressedData = array(\n            'type' => FILE_ASN1_TYPE_SEQUENCE,\n            'children' => array(\n                    'version' => array(\n                            'type' => FILE_ASN1_TYPE_INTEGER\n                    ),\n                    'compressionAlgorithm' => $asnCompressionAlgorithm,\n                    'encapContentInfo' => $asnEncapsulatedContentInfo\n            )\n    );\n\n    print_r($asnCompressedData);\n    $mappedDetails = $asn1->asn1map($decoded[0], $asnCompressedData);\n\nNow at this stage $mappedDetails is null. And this is what my content looks like with openssl\n```\n openssl asn1parse -in data.base64 -i\n0:d=0  hl=4 l= 814 cons: SEQUENCE\n4:d=1  hl=2 l=  11 prim:  OBJECT            :id-smime-ct-compressedData\n\n17:d=1  hl=4 l= 797 cons:  cont [ 0 ]\n   21:d=2  hl=4 l= 793 cons:   SEQUENCE\n   25:d=3  hl=2 l=   1 prim:    INTEGER           :00\n   28:d=3  hl=2 l=  13 cons:    SEQUENCE\n   30:d=4  hl=2 l=  11 prim:     OBJECT            :zlib compression\n   43:d=3  hl=4 l= 771 cons:    SEQUENCE\n   47:d=4  hl=2 l=   9 prim:     OBJECT            :pkcs7-data\n   58:d=4  hl=4 l= 756 cons:     cont [ 0 ]\n   62:d=5  hl=4 l= 752 prim:      OCTET STRING      [HEX DUMP]:DEADBEEFADADADADADA..\n```\nI can access the content I want with\n    $zlibContent = $decoded[0]['content'][1]['content'][0]['content'][2]['content'][1]['content'][0]['content'];\n\nand then uncompress with:\ngzuncompress($zlibContent);\nThis works but is, uhm, a bit hacky and not very robust?\nDoes the CMS implementation in phplibsec thus far offer the equivalent of openssl uncompress? Current versions of the openssl tool in Linux are no longer compiled against ZLIB and so I'm trying to mimic this command in PHP.\nI will also check out the asn1parse.php you provided as a link.  Is this included in the phplibsec packages that are available in distros? If not I can just clone from here anyway.\nIf I find any issues playing with any of this stuff I'll be sure to report them here.\nGreat work by the way, I hope to get the asn1parsing working, I feel I'm close!. compressed.zip\nInside is a file data.base64. It contains a base64 that you'd find in a smime-type=compressed-data SMIME message. For e.g. after MIME headers like:\nMIME-Version: 1.0\nContent-Disposition: attachment; filename=\"smime.p7z\"\nContent-Type: application/pkcs7-mime; smime-type=compressed-data; name=\"smime.p7z\"\nContent-Transfer-Encoding: base64\n. ",
    "theki": "Long story short is I have ~300k certs and only 80% passed signature validation via phpseclib and all of them passed validation with openssl. So was digging in openssl implementation and found exact function for that:\n`int X509_check_akid(X509 issuer, AUTHORITY_KEYID akid)\n{\nif (!akid)\n    return X509_V_OK;\n\n/* Check key ids (if present) */\nif (akid->keyid && issuer->skid &&\n    ASN1_OCTET_STRING_cmp(akid->keyid, issuer->skid))\n    return X509_V_ERR_AKID_SKID_MISMATCH;\n/* Check serial number */\nif (akid->serial &&\n    ASN1_INTEGER_cmp(X509_get_serialNumber(issuer), akid->serial))\n    return X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;\n/* Check issuer name */\nif (akid->issuer) {\n    /*\n     * Ugh, for some peculiar reason AKID includes SEQUENCE OF\n     * GeneralName. So look for a DirName. There may be more than one but\n     * we only take any notice of the first.\n     */\n    GENERAL_NAMES *gens;\n    GENERAL_NAME *gen;\n    X509_NAME *nm = NULL;\n    int i;\n    gens = akid->issuer;\n    for (i = 0; i < sk_GENERAL_NAME_num(gens); i++) {\n        gen = sk_GENERAL_NAME_value(gens, i);\n        if (gen->type == GEN_DIRNAME) {\n            nm = gen->d.dirn;\n            break;\n        }\n    }\n    if (nm && X509_NAME_cmp(nm, X509_get_issuer_name(issuer)))\n        return X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;\n}\nreturn X509_V_OK;\n\n}`\nhttps://github.com/openssl/openssl/blob/master/crypto/x509v3/v3_purp.c\nIn the end it works fine when we just add\ncase !$subjectKeyID:\nBut to be more compliant I've added checking serial (if present) as well.\nI skipped last step because I discovered that my leaf certificates have info about Root certificate there - not CA parent. It makes sense to don't check it if we want to verify signature against parent only. OpenSSL requires whole CA chain to verify leaf certificate.\nI hope that makes sense. . Thank you :). That case will never happen because we are checking first:\nif ca.subject == cert.issuer (lines 1135 and 1136)\nso if ca.subject and cert.issuer are the same we just have to perform additional checks on fields like serial if are set. . It's just shortcut to avoid another condition in if statement widely used. But I don't mind to perform another check if will make it more readable. Great! Thanks a lot!. ",
    "theunreal": "@metaclassing Woah! so it's impossible to do the enable password with this library? . Thanks @metaclassing , currently I'm just trying to authenticate with the enable password. I tried to follow your suggestion as follows:\necho $ssh->write('en');\nwait(5);\necho $ssh->write('lab');\necho $ssh->exec('dir');\nAnother try:\necho $ssh->exec('en');\nsleep(5);\necho $ssh->exec('lab');\necho $ssh->exec('dir');\nBoth returned\nNotice: Unable to open channel in C:\\xampp\\htdocs\\php-ssh\\vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SSH2.php on line 3653. > Starting from the beginning, can you authenticate and echo $ssh->exec(\"show version\"); successfully? If that hangs or is incomplete then you are running into a more fundamental problem than enableing.\nI just tried this, returns:\nNotice: Connection closed prematurely in C:\\xampp\\htdocs\\php-ssh\\vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SSH2.php on line 3814\n@terrafrost - your example was close! I have a real output here!\nI tried your example and also tried to add \\n to illustarte \"enter\" but I get the same output with and without \\n:\nDEVICE-NAME-196_231>en\\nlab\\ndir % Bad IP address or host name% Unknown command or computer name, or unable to find computer address Device-NAME-196_231>\nI get this error when i'm trying to run commands before enabling it with en -> Password: mypass, that this is what i'm trying to do with the commands above.\n@metaclassing - looks nice, I will check it out.\n. @terrafrost I had to replace $ssh->write('lab\\n'); with $ssh->write(\"lab\\n\"); and it worked!\nFinally, awesome!\nJust one question: sometimes I run commands like copying files that take long (about 20 seconds). Is there any way to \"wait\" start writing to ssh only after the process has completed?\nFor example:\n$ssh->write(\"copy //some-path// another-path\\n\");\n$ssh->write(\"ANOTHER COMMAND \\n\") // Run it only after the command above has completed and the file was copied. @terrafrost Your solution worked and the command is executed until the end of it,\nbut the page is loading infinitely and I can't echo or return the output. Thanks!. @terrafrost when settimeout is 0, and the web page keep loading even after the command was done, the last packet is:\n```\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.303, network: 0.3028s)\n00000000  00:00:00:02:00:00:00:01:21                       ........!\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.3294, network: 0.3291s)\n00000000  00:00:00:02:00:00:00:01:21                       ........!\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.316, network: 0.3153s)\n00000000  00:00:00:02:00:00:00:01:21                       ........!\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.2799, network: 0.2793s)\n00000000  00:00:00:02:00:00:00:19:0d:0a:5b:4f:4b:20:2d:20  ..........[OK - \n00000010  38:37:32:37:37:30:39:35:20:62:79:74:65:73:5d:0d  87277095 bytes].\n00000020  0a    \n``. @metaclassing Because I havedefine('NET_SSH2_LOGGING', 3);`\nWill it make any difference?\nUpdate:\nI tried to use $ssh->read(); as well (after every $ssh command)\nIt still outputs in the same time, I guess I will have to check it with the websocket library. . @terrafrost I'm trying to find a solution to report about the ssh script progress, currently all the websocket messages are sent in the same time in the end of the ssh script.\nI have more code and perform copy of 300 MB file and it takes really long, and all the ws messages are received only in the end of the program, that's why it's an issue for me.\nWhat I'm not sure is -if it has anything to do with this library.. ",
    "andrefigueira": "Thanks @terrafrost will give it a go and report back thank you!. It seems that the version referenced has breaking changes, so assuming the tag will be to 3.. \nThe library i'm using which is flysystem is showing a missing class:\nPHP Fatal error:  Class 'phpseclib\\Net\\SFTP' not found in /var/www/console/vendor/league/flysystem-sftp/src/SftpAdapter.php on line 176\nAlso, this is the exact place that the issue is happening:\n```\nphpseclib/phpseclib/phpseclib/Net/SSH2.php:1467\n    if (!strlen($kexinit_payload_server) || ord($kexinit_payload_server[0]) != NET_SSH2_MSG_KEXINIT) {\n            user_error('Expected SSH_MSG_KEXINIT');\n            return false;\n        }\n\n```. @terrafrost strange! I'll give it another go today!. @terrafrost so I haven't been able to verify yet if this has worked, i'm definitely getting farther down the download now, but it seems I'm getting a Segmentation fault now, but not sure it's traceable back here now, might be something in the flysystem library. Just ran it with full verbose mode, can confirm, latest release fixes my problem, thanks for your help @terrafrost ! . ",
    "nijel": "Yes, 2.0.9 seems work work fine, thanks for fast fixing this.. I'm talking about 2.0.8 release, which apparently was not done from the 2.0 branch:\nhttps://github.com/phpseclib/phpseclib/blob/2.0.8/composer.json#L56. ",
    "gchablowski": "I just send you the log for the 1.0.9 and the 2.0.9.\nI don't have the log for 0.3.9 yet, but send them to you when I will have them. (should be tomorow). Hope it will help.\n. I put that on dropbox : https://www.dropbox.com/sh/3ij5wcq5lrjnpsa/AADPK3_IyNhCyeuqG9Q8IFHLa?dl=0\n. Hi, I just added the log for the 3.0.9 on the dropbox.. Thanks for the help. . If you want, I can try to send you the ssh log. \nFor the error of flush is perhaps due to me. I try to see what was the problem and I played a bit with the library, before opening this issue.\nBefore to give you access to the server, allow me to give you some more informations. \nI do this manipulation in a server hosted on heroku in a laravel job. That when the first time the error occured. I try after on two local machine and is not working either. \nMoreover,what I exactly try to do is  dowload a csv that is embeded in a zip file. I take the zip unconpress it, get the csv and put on our system. I don't admin the server from where I download the file. I admin the client.\nAre you still ocnvinve that you need the connection to the sftp server ?. Moreover I have to had, if I try to connect to the server with sftp, I get : \nReceived disconnect from : Index was outside the bounds of the array.\nIt doesn't affect filezilla.\nSo perhaps a problem with the server or the way you call sftp ? . About sftp, we have an misunderstanding. I was speaking about the cmd line tool sftp, not phpseclib. I just tried different approach to help.\nFor the server, I can't give you the log, because I will never have acces to it.\nSo we find another way to acces to the server without phpseclib.\nI will continu to search and if I find something. I will send you it.\nThanks for all.\n. I put the log here:\nhttps://www.dropbox.com/sh/3ij5wcq5lrjnpsa/AADPK3_IyNhCyeuqG9Q8IFHLa?dl=0\nThe result is still the same the 0.3.9 work, the 1.09 not working.. ",
    "alexgit2k": "I am sorry, I missed that. Thank you very much for your fast reply.\n. ",
    "mattd624": "Thanks for the response, @metaclassing. The purpose of the function is to iterate over an array of IPs given to it, and it will have a hard-coded set of ACLs to check for the IP's presence. It will spit out a multidimensional array. The bottom part of the function does clean-up in case there are blank or null entries in the array. I used multiple tasks in this example in anticipation of being required to do multiple tasks in my actual configuration functions. First I need to do \"conf t\" to put it in config mode. Second, I need to run a command, and these must be in the same session. This router OS does not allow \"command-chaining\" in configuration mode, which means I can't use phpseclib's exec command (I could for show commands like in this function, but not in configuration commands), since it opens a new channel for each command. Perhaps you know a simpler way to do it...? I don't expect to have more than a page worth of output, ever. So, I think I am going to be lazy on this one and exclude coding for that, but I appreciate your concern. I am mainly concerned with (and would like to focus on) the ability to use the read() function with regex successfully. It's not too critical here in this example, but I have a feeling I am going to need it later. If there is no bug with it, then I would like to know the proper syntax for a wildcard. I am in php56 by the way...would this make a difference?. ",
    "carusogabriel": "I have committed to master. Sorry, I didn\u2019t get the question \ud83d\ude14. ",
    "andriykonoz": "Thank you for fast reply. Problem really somewhere in php.ini file. I tried to reproduce this problem in almost the same docker container at home, but not succeeded. There are no problems in container on home PC. I will post php.ini on Monday when I get to my PC on work.. Today I rechecked all again. All works fine. Application has custom error handler that was printed this errors to the console. Along with it in custom lib, that is used by me, files with absolute file-path was silently not loaded.\nSince file was not loaded and errors was printed in console, I assumed that problem was in deprecated functions. But I was wrong.\nI close this issue now, since there is no problem with your library.. ",
    "thesequelgroup": "Yea that's an odd behavior for sure. As a sanity check, I copied the file to local using WinSCP and the same behavior is reproduced. Definitively something on their end. No errors are reported using the commands you gave above, and the only server info returned from getServerIdentification() is \"SSH-2.0-SFTP Server\" which is not very useful.\nI'll follow up with this client directly. I appreciate your quick response time @terrafrost \nThank you!. ",
    "Royiestan": "thats true don't know how i missed it :p it worked on the local host but once i uploaded the files online it is now giving login failed but it is working normally on localhost do you know what the problem can be. the get log is returning empty. ",
    "simPod": "I'm connecting to Arista devices, it's propably command show vlans. I'll try the logging tho. Thanks. We have somehow managed to implement this lib and the problem is not happening.. How can we add strict typing and all modern php features if the minimum required version doesn't support it? The moment you add eg. first return typehint, you have to bump the minimum required php version. The reverse order is a no go \u2013 cannot run on legacy php versions when using modern features thus cannot have legacy version as the minimum one.\nBTW bumping minimum required PHP version is not a BC break. Thanks to package manager you won't get new version if requrements are not fullfiled and therefore the fatal error won't occur. BC break is when you change for example a method signature in a patch version that can result in fatal error.. > The 1.0 and 2.0 versions are also LTS versions. If people can't trust me to keep my word w.r.t. LTS then why should anyone expect me to keep my word w.r.t. proper semver?\nKeeping LTS and bumping PHP minimum version can simply go together. There would be one last release for EOLed PHPs and then the development would continue on top of it. Composer would not install new library versions on unsupported platforms thus there's no risk of breaking things. Long time support is kept as versions 1 and 2 still get updates while bumping PHP can also count as security and performance-boosting update ;)\n\nIf I bump phpseclib's PHP requirements to PHP 7.2+ then maybe I should also drop support for environments without GMP or OpenSSL?\n\nI don't see a reason for it, IMO it's not related at all \ud83e\udd14 \n\nI'm planning to open a pull request and from this conversation, I still cannot derive what's the attitude of this library towards using safe/supported PHP versions then.\n\nYou do it in the same commit or PR.\n\nShould I code the PR in the old way then or can I write clean code with types etc while bumping the php version?\n\n\nphpseclib, from it's inception, has been written for people who, for whatever reason, don't have much control over their system\n\nJust saying thanks, we have 100% control over the system but using this lib as it gives 100% control over ssh usage. The php ssh-ext has too much limitied API for our use case.. > If the \"old way\" is to maintain EOL PHP support then yah - doing it the old way is like a one line change so it's a super easy code review lol.\nYeah, like no types especially, talking about larger PRs than one line change tho. I always ask upfront so I don't spend time on something that will definitely not be merged afterwards.\n\nI think you'll really like phpseclib 4.0 but it's just soo far away atm :(\n\nDo you have a brief idea how \"soo far away\"? Year, two or decade? Just so I can imagine a timeframe ;). ",
    "cgsmith": "Thanks for the advice @terrafrost - I should have provided the exception and call stack before opening a ticket.  \nHere is what happens with throwing an exception before line 1152:\n```\nFatal error:  Uncaught Exception: zzz in C:\\Users\\csmith\\PhpstormProjects\\neesvigs-integrations\\vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SFTP.php:1152\n| Stack trace:\n\u00a0 | #0 vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SFTP.php(920): phpseclib\\Net\\SFTP->_update_stat_cache('/Dev/Outbound/I...', Array)\n\u00a0 | #1 vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SFTP.php(2347): phpseclib\\Net\\SFTP->_list('/Dev/Outbound/I...', true)\n\u00a0 | #2 vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SFTP.php(2321): phpseclib\\Net\\SFTP->_delete_recursive('/Dev/Outbound/I...', 0)\n\u00a0 | #3 vendor\\league\\flysystem-sftp\\src\\SftpAdapter.php(460): phpseclib\\Net\\SFTP->delete('/Dev/Outbound/I...')\n\u00a0 | #4 vendor\\league\\flysystem\\src\\Filesystem.php(237): League\\Flysystem\\Sftp\\SftpAdapter->delete('Dev/Outbound/IL...')\n\u00a0 | #5 [internal in vendor\\phpseclib\\phpseclib\\phpseclib\\Net\\SFTP.php on line 1152\n```\nI also see this in the SSH log, \"Cannot delete no file permission\"\n```\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0024, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:3a:00:00:00:36:04:00:00:00  .......:...6....\n00000010  01:00:00:00:2d:30:20:2f:44:65:76:2f:4f:75:74:62  ....-0 /Dev/Outb\n00000020  6f:75:6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73:5f  ound/ILS_Orders_\n00000030  32:30:31:37:31:32:32:38:5f:31:35:32:31:38:2e:74  20171228_15218.t\n00000040  78:74                                            xt\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1022, network: 0.102s)\n00000000  00:00:01:00:00:00:00:15:00:00:00:11:65:00:00:00  ............e...\n00000010  01:00:00:00:00:00:00:00:00:00:00:00:00           .............\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:38:00:00:00:34:0d:00:00:00  .......8...4....\n00000010  01:00:00:00:2b:2f:44:65:76:2f:4f:75:74:62:6f:75  ....+/Dev/Outbou\n00000020  6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73:5f:32:30  nd/ILS_Orders_20\n00000030  31:37:31:32:32:38:5f:31:35:32:31:38:2e:74:78:74  171228_15218.txt\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1045, network: 0.1043s)\n00000000  00:00:01:00:00:00:00:37:00:00:00:33:65:00:00:00  .......7...3e...\n00000010  01:00:00:00:03:00:00:00:22:43:61:6e:6e:6f:74:20  ........\"Cannot \n00000020  64:65:6c:65:74:65:20:66:69:6c:65:2e:20:4e:6f:20  delete file. No \n00000030  70:65:72:6d:69:73:73:69:6f:6e:2e:00:00:00:00     permission.....\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0003, network: 0.0001s)\n00000000  00:00:01:00:00:00:00:38:00:00:00:34:0b:00:00:00  .......8...4....\n00000010  01:00:00:00:2b:2f:44:65:76:2f:4f:75:74:62:6f:75  ....+/Dev/Outbou\n00000020  6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73:5f:32:30  nd/ILS_Orders_20\n00000030  31:37:31:32:32:38:5f:31:35:32:31:38:2e:74:78:74  171228_15218.txt\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0958, network: 0.0957s)\n00000000  00:00:01:00:00:00:00:3a:00:00:00:36:66:00:00:00  .......:...6f...\n00000010  01:00:00:00:2d:30:20:2f:44:65:76:2f:4f:75:74:62  ....-0 /Dev/Outb\n00000020  6f:75:6e:64:2f:49:4c:53:5f:4f:72:64:65:72:73:5f  ound/ILS_Orders_\n00000030  32:30:31:37:31:32:32:38:5f:31:35:32:31:38:2e:74  20171228_15218.t\n00000040  78:74                                            xt\n```\nI am guessing that there is no way to know if a file is deleted or not?. ",
    "YaBoiLewis": "Hi @terrafrost - I know.\nThose are my directories/file. What I'm telling you is that I'm getting an error with the unpack() method. phpseclib has that method.. ",
    "nemixbg": "just disable mbstring.func_overload in php.ini and will resolve the issue.. ",
    "nihitx": "Hi, I Have been testing the errors like this.\nvar_dump($sftp->getSFTPErrors() );\nvar_dump($sftp->getLastSFTPError());\nWHere can I find @fsockopen? I tried looking for it in the phpseclib file but unfortunately had no luck.\nThere is one @fsockopen in the codeigniter files which looks like this.\n// Open the socket\n        if ( ! $fp = @fsockopen($target['host'], 80))\nI am not sure if that's the one.. Hi Terrafrost, \nI figured out the error which was basically the SFTP client not supporting the IP address. Meaning the IP address of heroku was blocked by the server. \nI was wondering is there a way to manually make phpseclib have a static IP? If not please close this issue and thank you for the help and sorry for the trouble.. ",
    "netgusto": "Experiencing the same issue on v2.0.11.. ",
    "JohnKiller": "Hi,\nThanks for your response. Your code works correctly on my machine (it's very similar to what I have).\nI've changed the key and the certificate in your script with my real data, and it failed again. I can't post the private key, but this is the public:\n-----BEGIN CERTIFICATE-----\nMIIF8TCCA9mgAwIBAgIJALT5mhqGYleqMA0GCSqGSIb3DQEBBQUAMIGOMQswCQYD\nVQQGEwJJVDEOMAwGA1UECAwFSXRhbHkxFjAUBgNVBAcMDU1vbnRlY2Fzc2lhbm8x\nHjAcBgNVBAoMFVNpc3RlbWEgMyBJbmZvcm1hdGljYTEbMBkGA1UECwwSUmljZXJj\nYSBlIFN2aWx1cHBvMRowGAYDVQQDDBFTaXN0ZW1hIDMgUm9vdCBDQTAeFw0xNDEx\nMjMxMzQyMzNaFw0zOTExMjMxMzQyMzNaMIGOMQswCQYDVQQGEwJJVDEOMAwGA1UE\nCAwFSXRhbHkxFjAUBgNVBAcMDU1vbnRlY2Fzc2lhbm8xHjAcBgNVBAoMFVNpc3Rl\nbWEgMyBJbmZvcm1hdGljYTEbMBkGA1UECwwSUmljZXJjYSBlIFN2aWx1cHBvMRow\nGAYDVQQDDBFTaXN0ZW1hIDMgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIP\nADCCAgoCggIBAL/wPkjiXs5V52idGWIBCWcNq0AQMAP5blbREns31OEG5Llbn6/V\nVgN70UAqfvogGNG9/AFopcHfQbR/oyFr4jFCkdbqxcUVzTZTaR8EtAXyTDorAfLh\ngLqPgsk/gifO9Y5i786SdwHYMMdSFv+4S9FUlbnDuiMvsAkrKJ3AFf+/v8S0XCBc\neo4PbJ+/wZf7Mv8/O5CMkrQNivT8KqoXvQPo22DkV+L5bh5HmEQimGJ4JGLE6r7P\nQeJCulg4GoaM/bESd7itUdEc/61Wn9CgR39kyo33IboQy6DjOnefMIkzD69yWzAv\nPlSXAU7P44ZfkEFS7XWAhsXuLrffQ7VDw+PFNRoYwlAKVP9Xeda1FHnDlfqFUpsI\nlnOaJOSXQRG9UqXCvQDw86L/PR9By9djLTq28Cx9VL0G4yZONOyH0DPsJa6OXMFf\nI1sHPXNfSfbbmJ+tTza4Wges95/DD3OCo/EdyGnf37UKIoOcccHZ8ztkNyC+MS3s\n5CSn5mYCnktMaQsQQGm37C4Xwyyn3XpqHCPvQgCKlTjsEbWfik+ywPrBu1QyogE5\nVvko/rvae0PtaxCjmssN5ZwFPFwOsXbva0ri55EoZDattgp6PQRR5JwxUwE1tdoO\nNzYFxfkZqM8oKzwR+9gYFS7vRaqJPdbLC9kDrl5qW3BAVmY5HjsaHfCjAgMBAAGj\nUDBOMB0GA1UdDgQWBBT/NdCDiImneP1eecoirO4OqFMGITAfBgNVHSMEGDAWgBT/\nNdCDiImneP1eecoirO4OqFMGITAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUA\nA4ICAQCsEoOpBlZ5MZkgDd6w1j45D1yINZzlKgvvLT6l4yIVfExbXeyPMB3UQsbQ\nuinV8kTirV2kTDBm0EzjDZKfDMpTO14EPeCkB0rfubGUyikjhLp11dNXWeb5gCyQ\nWxIiRlXeYTKO/TELUW652AwtELaGBIX6znSUpTlmlSzhD1+kfhmwwDoSoQqQ4GL9\n55CxDh5arZsRisRvu+r2w4QhGHU5SHPq2lwXIjnqGR4jpQMmdz+eiwn/By1Lah7i\nMzIFZGF2OaaUKKDBT9vEa+anYRqwVoYbs37EIS6Gc9ScraduOKmXS3UyPXkrqxjI\n1PLBPhz8TWP+kiV8YBrvvtZJbeAM7KLBVBg6+/zlTL6ITznxQS7k/pAdv19SHLJz\n6GBofJHNxrzjpojUP8ZW+LC26Z33MUenJxZKNQdKvVS+WY4hEMngGXE8BHzlBIBz\nthiCZ5DQzqaxi2hFhFm6hO3PBTPtf+yAA10xFu7vCf1KJ7FvH10omAQ3od+7vakn\nrbx53o66jGE92mMzZu9c13cYmbyRdRgFC5QneFyiY56FnvXGuJui135QL8OdDGKU\n6YMQ4jgX7Vf4P082Mese4LGOyO5mLNsclgoak5v+R4KydBYGfEmlUq0fKt/BrCQW\nRizfF10c66kOPL4FbRptl+HpM9+ZIZxJIjGOgwDwUuFQrZOZjw==\n-----END CERTIFICATE-----\nWhat can I do to help identify the issue?\nThanks. Thanks, this fixes the issue.. PHP 7.2.2 released, issue fixed: https://3v4l.org/PqtOI. ",
    "dcortez": "Thanks for posting your SSHWrapper example. It seems I must have been missing something and your code seems to resolve my issue. . ",
    "uglyoldbob": "Ok, I use false as the parameter for validateSignature and get the expected results.\nSee http://phpseclib.sourceforge.net/x509/examples.html#validate,selfsign\nThe example should be fixed for self signed certificates.. ",
    "skliarie": "Find below phpseclib log.It is not clear to me SFTP version that proftpd advertises.\n```\n-> NET_SFTP_INIT (0.0001s)\n00000000  00:00:00:03                                      ....\n<- NET_SFTP_VERSION (0.5938s)\n00000000  00:00:00:03:00:00:00:08:76:65:72:73:69:6f:6e:73  ........versions\n00000010  00:00:00:03:32:2c:33:00:00:00:11:66:73:79:6e:63  ....2,3....fsync\n00000020  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01  @openssh.com....\n00000030  31:00:00:00:18:70:6f:73:69:78:2d:72:65:6e:61:6d  1....posix-renam\n00000040  65:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00  e@openssh.com...\n00000050  01:31:00:00:00:13:73:74:61:74:76:66:73:40:6f:70  .1....statvfs@op\n00000060  65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:32:00:00  enssh.com....2..\n00000070  00:14:66:73:74:61:74:76:66:73:40:6f:70:65:6e:73  ..fstatvfs@opens\n00000080  73:68:2e:63:6f:6d:00:00:00:01:32:00:00:00:14:68  sh.com....2....h\n00000090  61:72:64:6c:69:6e:6b:40:6f:70:65:6e:73:73:68:2e  ardlink@openssh.\n000000a0  63:6f:6d:00:00:00:01:31                          com....1\n-> NET_SFTP_REALPATH (0.0001s)\n00000000  00:00:00:01:2e                                   .....\n<- NET_SFTP_NAME (0.1938s)\n00000000  00:00:00:01:00:00:00:01:2f:00:00:00:39:64:72:77  ......../...9drw\n00000010  78:72:77:78:72:77:74:20:20:20:31:37:20:33:33:20  xrwxrwt   17 33 \n00000020  20:20:20:20:20:20:33:33:20:20:20:20:20:20:20:20        33      \n00000030  20:20:20:34:30:39:36:20:4a:61:6e:20:32:34:20:31     4096 Jan 24 1\n00000040  37:3a:31:34:20:2f:00:00:00:00                    7:14 /....\n-> NET_SFTP_OPENDIR (0.0001s)\n00000000  00:00:00:09:2f:73:66:74:70:75:73:65:72           ..../sftpuser\n<- NET_SFTP_HANDLE (0.1782s)\n00000000  00:00:00:10:31:63:31:62:64:38:63:31:39:34:66:63  ....1c1bd8c194fc\n00000010  62:33:35:32                                      b352\n-> NET_SFTP_CLOSE (0.0001s)\n00000000  00:00:00:10:31:63:31:62:64:38:63:31:39:34:66:63  ....1c1bd8c194fc\n00000010  62:33:35:32                                      b352\n<- NET_SFTP_STATUS (0.1778s)\n00000000  00:00:00:00:00:00:00:02:4f:4b:00:00:00:05:65:6e  ........OK....en\n00000010  2d:55:53                                         -US\n-> NET_SFTP_OPENDIR (0.0001s)\n00000000  00:00:00:09:2f:73:66:74:70:75:73:65:72           ..../sftpuser\n<- NET_SFTP_HANDLE (0.1785s)\n00000000  00:00:00:10:64:33:63:37:37:30:62:32:34:39:35:61  ....d3c770b2495a\n00000010  66:62:63:65                                      fbce\n-> NET_SFTP_READDIR (0.0001s)\n00000000  00:00:00:10:64:33:63:37:37:30:62:32:34:39:35:61  ....d3c770b2495a\n00000010  66:62:63:65                                      fbce\n<- NET_SFTP_NAME (0.179s)\n00000000  00:00:00:05:00:00:00:01:2e:00:00:00:39:64:72:77  ............9drw\n00000010  78:72:77:78:72:2d:78:20:20:20:20:32:20:33:33:20  xrwxr-x    2 33 \n00000020  20:20:20:20:20:20:33:33:20:20:20:20:20:20:20:20        33      \n00000030  20:20:20:34:30:39:36:20:46:65:62:20:20:31:20:32     4096 Feb  1 2\n00000040  31:3a:34:33:20:2e:80:00:00:0f:00:00:00:00:00:00  1:43 ...........\n00000050  10:00:00:00:00:21:00:00:00:21:00:00:41:fd:5a:76  .....!...!..A.Zv\n00000060  cb:ab:5a:73:89:f1:00:00:00:00:00:00:00:07:62:75  ..Zs..........bu\n00000070  6d:62:75:6d:32:00:00:00:3f:2d:72:77:2d:72:2d:2d  mbum2...?-rw-r--\n00000080  72:2d:2d:20:20:20:20:31:20:33:33:20:20:20:20:20  r--    1 33   \n00000090  20:20:33:33:20:20:20:20:20:20:20:20:20:20:20:20    33          \n000000a0  20:20:36:20:46:65:62:20:20:31:20:32:31:3a:34:33    6 Feb  1 21:43\n000000b0  20:62:75:6d:62:75:6d:32:80:00:00:0f:00:00:00:00   bumbum2........\n000000c0  00:00:00:06:00:00:00:21:00:00:00:21:00:00:81:a4  .......!...!....\n000000d0  5a:73:9f:64:5a:73:89:f1:00:00:00:00:00:00:00:02  Zs.dZs..........\n000000e0  2e:2e:00:00:00:3a:64:72:77:78:72:77:78:72:77:74  .....:drwxrwxrwt\n000000f0  20:20:20:31:37:20:33:33:20:20:20:20:20:20:20:33     17 33       3\n00000100  33:20:20:20:20:20:20:20:20:20:20:20:34:30:39:36  3           4096\n00000110  20:4a:61:6e:20:32:34:20:31:37:3a:31:34:20:2e:2e   Jan 24 17:14 ..\n00000120  80:00:00:0f:00:00:00:00:00:00:10:00:00:00:00:21  ...............!\n00000130  00:00:00:21:00:00:43:ff:5a:76:cb:ab:5a:68:be:ff  ...!..C.Zv..Zh..\n00000140  00:00:00:00:00:00:00:07:62:75:6d:62:75:6d:31:00  ........bumbum1.\n00000150  00:00:3f:2d:72:77:2d:72:2d:2d:72:2d:2d:20:20:20  ..?-rw-r--r-- \n00000160  20:31:20:33:33:20:20:20:20:20:20:20:33:33:20:20   1 33       33\n00000170  20:20:20:20:20:20:20:20:20:20:20:20:36:20:46:65              6 Fe\n00000180  62:20:20:31:20:32:31:3a:34:33:20:62:75:6d:62:75  b  1 21:43 bumbu\n00000190  6d:31:80:00:00:0f:00:00:00:00:00:00:00:06:00:00  m1..............\n000001a0  00:21:00:00:00:21:00:00:81:a4:5a:73:9f:64:5a:73  .!...!....Zs.dZs\n000001b0  89:f0:00:00:00:00:00:00:00:04:62:65:62:65:00:00  ..........bebe..\n000001c0  00:3c:2d:72:77:2d:72:2d:2d:72:2d:2d:20:20:20:20  ..-rw-r--r--  \n000001d0  31:20:33:33:20:20:20:20:20:20:20:33:33:20:20:20  1 33       33 \n000001e0  20:20:20:20:20:20:20:20:20:20:20:36:20:46:65:62             6 Feb\n000001f0  20:20:31:20:31:35:3a:34:34:20:62:65:62:65:80:00    1 15:44 bebe..\n00000200  00:0f:00:00:00:00:00:00:00:06:00:00:00:21:00:00  .............!..\n00000210  00:21:00:00:81:a4:5a:73:9f:64:5a:73:35:ca:00:00  .!....Zs.dZs5...\n00000220  00:00                                            ..\n```. ",
    "VincentMarmiesse": "Ok nevermind I was closing connection before calling the rename function.... ",
    "HectorFGarcia": "All timeouts are logged like this: \n[Tue Mar 13 10:39:28 2018] [warn] [client X.X.X.X] mod_fcgid: stderr: PHP Fatal error:  Maximum execution time of 60 seconds exceeded in SOMEPATH\nI'll try the set_time_limit. Thanks.. ",
    "gromovod": "Uploaded version. I use now version 2.0.10\nNow error in line 1122\n\"Cannot connect to 8_.__..:2222. Error 111. Connection refused in phpseclib\\Net\\SSH2->_connect() (str 1122 in.. \"\nPort 22 connects correctly. Only 2222 - Error.\n\"My guess would be that that's the line that has fsockopen.\" - how to do it?\nin my file like this?:\nfsockopen($host, $port);\n$ssh = new \\phpseclib\\Net\\SSH2($host, $port);\n\"SELinux can also cause issues\" - I use on a hosting. I can not change the settings (setsebool -P httpd_can_network_connect 1). Thank you very very much for the help.\nI will ask my hosting provider. ",
    "ErkErd": "Yes that was solved my problem thx.. ",
    "kuofp": "Thanks for replying me in such detailed information.\nHowever, it would be a pity that phpseclib is backward incompatible in this case.\nMay I suggest adding a feature to change the padding mode?\nsomething like\nphp\n$cipher->enablePadding(PAD_MODE_NULL); // could use PAD_MODE_PKCS5 PAD_MODE_PKCS7\n. ",
    "nicopenaredondo": "@terrafrost  will try this! thanks!. @terrafrost  I've encountered this error  Call to a member function getPublicKey() on array upon trying your suggestion. That works! Thank you @terrafrost . Hi @terrafrost, \nRe-opening this issue again. Is it possible to do signing in phpseclib similar to what this blog is doing ?\nhttps://blogs.msdn.microsoft.com/alejacma/2008/06/25/how-to-sign-and-verify-the-signature-with-net-and-a-certificate-c/\nesp. in the signing section ?. i'm more concern in this part \nreturn csp.SignHash(hash, CryptoConfig.MapNameToOID(\"SHA1\")); \nIf I can implement it similar to that snippet in phpseclib. ",
    "craiglondon": "I think the only commit related to Amy performance (supposed) improvements is this one.  \nhttps://github.com/phpseclib/phpseclib/commit/57c87fc9bc4bb66175a08fdb8ee23d531a19d7ef  \nI haven't done any benchmarks before but would be willing to do some given a little direction as a best tool to use?   like using Blackfire and PHPunit?. ",
    "refear99": "@terrafrost \nSeems there is no good solution for now ?\nSo how we deal 48 to 0 ?. @terrafrost \nThanks\nWhen release a new version?. ",
    "alphametric": "Okay, figured it out. The problem was supplying an RSA key. When switching to plain username and password, it connected just fine.\nI wonder though, should it still be possible to connect using an SSH key?. That got it! Added to authorised_keys and made sure to chmod 600 on authorised_keys, id_rsa and is_rsa.pub\nThanks!. ",
    "micaelpdias": "This just started working without any changes, I'm assuming the server was blocking connections.. ",
    "pmatseykanets": "Thank you so much for a quick response.\nIt was version 2.0.10 required by another package. Updated to 2.0.11.\nHopefully it's going to fix it.\nThanks again.\n. ",
    "steventeo": "I thought I share my experience with this issue. \nFor me, I got a similar error message (Undefined offset: 256).\nThen I noticed in my /var/log/secure the following line at the end of 25 or 30 seconds after each SSH login attemp.\npam_systemd(crond:session): Failed to create session: Failed to activate service 'org.freedesktop.login1': timed out\nSo it seems to be related to this issue.\nhttps://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1591411\nI will just restart systemd-logind (systemctl restart systemd-logind) everytime I experience this issue.. ",
    "singi2016cn": "sorry,I miss base64_encode with $ciphertext.\nvar_dump(base64_encode($ciphertext));. ",
    "moustafak": "solved by using htmlentities(); to display script tags otherwise the browser just to reads it as html.\ne.g. echo htmlentities($x509->getDNProp('OU'));. ",
    "TCB13": "Well, I managed to fix this. Just had to apt install php7.0-bcmath.\nMany thanks anyway!. @terrafrost as I said before I had to install bcmath and after that everything started to work. Same message, same key. Thank you.. @terrafrost okay, I am running PHP 7.0.27-0+deb9u1 from the https://deb.sury.org repo since the \"server\" is and arm64 device. I can't provide you with the specific message / key however I'm going to remove php7.0-bcmath and try your code / key as soon as I can.. ",
    "kpawel-29": "Hi,\nIm not sure if it's right topic, I've got problem with verifying signature encrypted with rsa-sha256 method.\nCode that I use to verify signature\nphp\n$rsa = new RSA();\n$rsa->setHash(\"sha256\");\n$rsa->setSignatureMode(RSA::SIGNATURE_PKCS1);\n$rsa->loadKey($publicKey);\n$verify = $rsa->verify($signedInfo, base64_decode($signatureValue));\nAnd the data:\n$sigantureValue\nNB4g24jeX/MnMm5yJDxbw5z7qLz/SEAyKOH+Ifg+dW52E0EkRujYx5dSzyfBaDtDHbc1XixlgggCrGW/3nfp7e6qf6sXzSZf85k+MgXFDaJcSaMkPNgdqBTYeuDPIVJlTDaZUycJhd15LiwllI3jjCi8vHEG8ZCLjTHGUgEkmrwInvkkSx3ySbLsI6gctz69cr4v87ArESNZfcIt25i+NgfrwqbK451GSDhN9aHuw7m1QcBxovofP9CV453/ZNUjW4rKE09gKy1/4Rqj/8cFkvCjCz8BMWVZY5NowOPfijoiQngQnqCG9S9rylI2Fv/b/UP3eV+fzWYbHsDsVlBr2g==\n$signedInfo\n<ds:SignedInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"></ds:SignatureMethod><ds:Reference URI=\"\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/TR/1999/REC-xpath-19991116\"><ds:XPath>not(ancestor-or-self::ds:Signature)</ds:XPath></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"></ds:DigestMethod><ds:DigestValue>sFTKcbecghyeanfw5dtAgQilYibdg387D4BhfLlMnIg=</ds:DigestValue></ds:Reference><ds:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#SignedProps-19f887f9-5cb8-49b7-9f1d-b19b5f1dd895\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"></ds:DigestMethod><ds:DigestValue>Pfg6a0vpLa0xIK3BCZKI8xxkg6zJYab4NRmNf66VMyE=</ds:DigestValue></ds:Reference></ds:SignedInfo>\n$publicKey\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsFG6GMlDa4dOArbtbwuT\nVPMxAk+DBBcKkn6z7rnu4LcuPDbsMWDUUGvRYfUTN1ezAyIfOJUYdvUHY9tui9Le\naBk+y9K2kBvGsURbC6VJE4vh1t2wVOKn924nO9ijAs/eesiX1uqBVXAm2ykhEPRK\nTfpbTkNeyTh442tFG2RWY++L/rPm1JQHrYmZSaE3Ubui9pjQ3mMN0dZeJuEmJd8T\nUgZamTKjwlI3eLZPMy8DZ2DtrAsuwCc+3NrhtrifBcJhoQYxHq2tJYooyQVGH53I\nwr4ot8hwFPyRVoQIjzPcR+2KgSKgB3kzWgSiSm9y8O1dbPq5JvLeGgjiqBNFRKZr\nIwIDAQAB\n-----END PUBLIC KEY-----\nMaybe there is problem with CanonicalizationMethod, or public key. I am attaching a test file to help resolve the problem.\ntest.txt\nMoreover I got file with the same CanonicalizationMethod and the same SignatureMethod used that is verified correctly\nsignedXmlXadesB.txt\nIf possible, please help\n. @terrafrost My job is only to verify this signature and I don't have code that generate it. Signature itself comes from Polish government company . #1275 . ",
    "cgkkevinr": "Thanks, that's perfectly clear!. ",
    "NeilStrickland": "Many thanks for your help, which is much appreciated.  \nAfter installing the latest Git version (and updating a whole cascade of other stuff to support it, hence the delay) the error has gone away.  As with #1271, the server is taking about 25 seconds to handle the login. \nI should perhaps mention that if I do not set a timeout of zero, then I now get a fatal error as follows:\n```\nNotice:  Undefined offset: 256 in /var/www/somas/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php on line 438\nFatal error:  Uncaught RuntimeException: Unable to fulfill channel request in /var/www/somas/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:3799\nStack trace:\n0 /var/www/somas/vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php(451): phpseclib\\Net\\SSH2->get_channel_packet(256, true)\n1 /var/www/somas/admin/manager/ms.php(28): phpseclib\\Net\\SFTP->login('*', '**')\n2 {main}\nthrown in /var/www/somas/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php on line 3799\n```\nThis should presumably be trapped.\n. ",
    "thorsten": "Found a typo -> fixed :). ",
    "mnpenner": "Didn't notice the disablePadding() method; PhpStorm didn't turn it up when I searched for usages.\nThank you for clarifying everything @terrafrost! I'll just use that method then :smile: Sorry for the troubles.. ",
    "InkedCurtis": "@terrafrost Thankyou!. ",
    "bedmison": "I'll try to exit() strategy.\nI saw that thread about phalcon, but discounted it. I'm running the same version of php, built with the same flags,  on the same base OS version, built on exact same Apple hardware. phpseclib works on one of the computers, and doesn't on the other. The only difference is the way Apache is configured. . ",
    "phodat": "I had tried enabled PTY before but what I did not try was the initial read then writing and read again. that was the part that I was missing. Thanks!. ",
    "mathix36": "I tried \nFix for #1271 modifying SSH2.php but same error. ",
    "qq690712575": "Thank,but I use 2.0branch\n\n\u53d1\u9001\u81ea\u6211\u7684Sony Xperia\u2122\u667a\u80fd\u624b\u673a\n\n---- terrafrost\u7f16\u5199 ----\nphp\ninclude('Crypt/RSA.php');\ninclude('Math/BigInteger.php');\n\n<p$exponent = 'AQAB';\n$modulus = '00cb43da4b6602c17404e2d8be987d4ccb822836d85fd4cc6029338ef5b28908a9c9e7a0832acf9e8e15dc99bb340bdcdf53740bb4e449243c9d3c1f71773afb883a80e91844685487a6b911803ee7f76adcdc1360a7ae95a373f4432e7e6e12a009a8e9771cf775f6dab1f39ebd03d26ccded12e054b1ab85c861bdbfca225cff';\n$rsa = new Crypt_RSA();\n$rsa->loadKey([\n        'e' => new Math_BigInteger(base64_decode($exponent), 256),\n        'n' => new Math_BigInteger(base64_decode($modulus), 256)\n]);\necho $rsa;\nThis code snippet uses the 1.0 branch to convert a modulus / exponent to a more recognizable public key format. If you want to encrypt (as opposed to just converting the key) just replace the echo $rsa with this:\necho base64_encode($rsa->encrypt('ddd'));\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/1290#issuecomment-414083924, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AQ4So8GyQw4peSzQSQqCMDMPczijY83Bks5uSHbggaJpZM4WBtvq.\n. Thanks for your help.\nI used openssl_public_encrypt($pwd, $encrypted, $rsa) to encrypt my data . $rsa is a cert resource?\n\u53d1\u9001\u81ea Windows 10 \u7248\u90ae\u4ef6https://go.microsoft.com/fwlink/?LinkId=550986\u5e94\u7528\n\n\u53d1\u4ef6\u4eba: terrafrost notifications@github.com\n\u53d1\u9001\u65f6\u95f4: Sunday, August 19, 2018 9:22:37 PM\n\u6536\u4ef6\u4eba: phpseclib/phpseclib\n\u6284\u9001: Jianle Chen; Author\n\u4e3b\u9898: Re: [phpseclib/phpseclib] how can i build publickey ,i have a modulus and exponent (#1290)\nIt's pretty much the same thing - just swap out the include's with an include to the autoloader and use statements and then remove the Crypt_ / Net_ prefix from the object instantiations.\nphp\nrequire __DIR__ . '/vendor/autoload.php';\n\n<puse phpseclib\\Crypt\\RSA;\nuse phpseclib\\Math\\BigInteger;\n$exponent = 'AQAB';\n$modulus = '00cb43da4b6602c17404e2d8be987d4ccb822836d85fd4cc6029338ef5b28908a9c9e7a0832acf9e8e15dc99bb340bdcdf53740bb4e449243c9d3c1f71773afb883a80e91844685487a6b911803ee7f76adcdc1360a7ae95a373f4432e7e6e12a009a8e9771cf775f6dab1f39ebd03d26ccded12e054b1ab85c861bdbfca225cff';\n$rsa = new RSA();\n$rsa->loadKey([\n        'e' => new BigInteger(base64_decode($exponent), 256),\n        'n' => new BigInteger(base64_decode($modulus), 256)\n]);\necho $rsa;\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/1290#issuecomment-414127542, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AQ4So3--4Ihdj-sZkOj4R1eOTrnr4OV0ks5uSWadgaJpZM4WBtvq.\n. Thank you for helping me solve this problem and make the service website made by my school community better.\n\u53d1\u9001\u81ea Windows 10 \u7248\u90ae\u4ef6https://go.microsoft.com/fwlink/?LinkId=550986\u5e94\u7528\n\n\u53d1\u4ef6\u4eba: terrafrost notifications@github.com\n\u53d1\u9001\u65f6\u95f4: Monday, August 20, 2018 12:15:34 AM\n\u6536\u4ef6\u4eba: phpseclib/phpseclib\n\u6284\u9001: Jianle Chen; Author\n\u4e3b\u9898: Re: [phpseclib/phpseclib] how can i build publickey ,i have a modulus and exponent (#1290)\n$rsa is a cert resource?\nNo - it's an RSA object with a __toString magic method.\nThat said, you don't need to use OpenSSL to perform the encryption. phpseclib is perfectly capable of that. eg.:\necho base64_encode($rsa->encrypt('ddd'));\nIf you really want to use openssl_public_encrypt instead of $rsa->encrypt you're free to do so. If memory serves, $key can be a string so you could trigger the $rsa __toString magic method by doing \"$rsa\".\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/phpseclib/phpseclib/issues/1290#issuecomment-414138192, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AQ4So93MVYIXcz43uOD1aPyvIkOfeMqHks5uSY8mgaJpZM4WBtvq.\n. ",
    "guihouchang": "\n\n<?php\ninclude('Crypt/RSA.php');\ninclude('Math/BigInteger.php');\n$exponent = 'AQAB';\n$modulus = '00cb43da4b6602c17404e2d8be987d4ccb822836d85fd4cc6029338ef5b28908a9c9e7a0832acf9e8e15dc99bb340bdcdf53740bb4e449243c9d3c1f71773afb883a80e91844685487a6b911803ee7f76adcdc1360a7ae95a373f4432e7e6e12a009a8e9771cf775f6dab1f39ebd03d26ccded12e054b1ab85c861bdbfca225cff';\n$rsa = new Crypt_RSA();\n$rsa->loadKey([\n  'e' => new Math_BigInteger(base64_decode($exponent), 256),\n  'n' => new Math_BigInteger(base64_decode($modulus), 256)\n]);\necho $rsa;\n```\nThis code snippet uses the 1.0 branch to convert a modulus / exponent to a more recognizable public key format. If you want to encrypt (as opposed to just converting the key) just replace the echo $rsa with this:\necho base64_encode($rsa->encrypt('ddd'));\n```\n\nHi, I get  RSA string length is 384, not 256. This is my code, is any wrong with my code? plz help me, and thank you.\nresult(use PHP): 018E5DD303A756B77A9E04B4FAB440967EE862CB173877EE3C379A3149D6659A907F5DB647E62EFF3435D820DFA164F155C71D7ED99691CA16AF934F2C5109964DA4AF7803EA8404332DEB2F5C13B376C25ED9FC64D0B84E6D9CDF3A53CFD9D0A6DBE5BF5DA09B405B83CAAE818F882DCA31560C59D963BDADF36962BCEE74DC4D660295960D319AB18B8F986B1DC72BAC02BA0E70102CB7A036BB9A0A87375FC887367F09975F7A79FEB49617369F0BEBAC5978F32BA1E5E7EF539418A6664E\n```\npublic function testRSAAction()\n    {\n        $modulus = 'BB955F6C6185B341C1A42EBF1FF9971B273878DBDAB252A0F1C305EBB529E116D807E0108BE6EDD47FF8DC5B6720FFE7F413CBB4ACDFB4C6BE609A5D60F5ADB261690A77755E058D4D9C0EC4FC2F5EB623DEBC88896003FBD8AFC4C3990828C66062A6D6CE509A2B0F8E06C4E332673FB86D235164B62B6110C1F1E0625B20ED';\n        $exponent = '10001';\n        $rsa = new Crypt\\RSA();\n        $rsa->loadKey([\n            'e' => new Math\\BigInteger(base64_decode($exponent), 256),\n            'n' => new Math\\BigInteger(base64_decode($modulus), 256)\n        ]);\n    return strtoupper(bin2hex($rsa->encrypt('123')));\n}\n\n```\n. it's my bad, I miss  base64_decode. ",
    "twinklebob": "Sorry for the delay in replying. Don't tend to check my emails much over\nthe weekend.\nI'm trying to do password authentication.\nI'll run it tomorrow morning with logging renamed and see what I can find.\nThanks for the help!\nOn Sat, 18 Aug 2018, 21:08 terrafrost, notifications@github.com wrote:\n\nAre you logging in with an RSA key or password auth? If the former then\nhow big is the key? 1024-bit? 2048-bit? Bigger? Using a smaller key would\nmake things faster at the expense of security. You could use password auth\ntoo if that were feasible.\nAlso, could you give me the SSH logs? eg. do define('NET_SSH2_LOGGING', 2)\nat the top and then do echo $ssh->getLog(); after you login? I'm wanting\nto see that because the problem could also be in the diffie hellman key\nexchange idk.\nThanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1291#issuecomment-414083339,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAtGpWXYGZ1u5mFxDkW6YwsZgIoxcKa-ks5uSHQ8gaJpZM4WB3KX\n.\n-- \nDavid Lumm\nhttp://david.twinklebob.co.uk/\n. Hopefully this tells you what you need and doesn't give away anything I shouldn't. It looks like there's a couple of steps that take 4+ seconds each.\n\nI've truncated the log after those points, as I'm guessing nothing that happs after is particularly relevant.\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:56:53:68:65:6c:6c:5f:34  SSH-2.0-VShell_4\n00000010  5f:32:5f:34:5f:31:32:35:35:20:56:53:68:65:6c:6c  _2_4_1255 VShell\n00000020  0d:0a                                            ..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:0d:0a                             b_1.0..\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0895, network: 0s)\n00000000  eb:61:94:a4:d5:d0:59:9f:89:47:54:75:48:af:6d:43  .a....Y..GTuH.mC\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0137, network: 0.0136s)\n00000000  1c:b2:5f:40:eb:22:01:04:5e:58:ca:93:e0:4b:54:f0  .._@.\"..^X...KT.\n00000010  00:00:00:5d:65:63:64:68:2d:73:68:61:32:2d:6e:69  ...]ecdh-sha2-ni\n00000020  73:74:70:35:32:31:2c:65:63:64:68:2d:73:68:61:32  stp521,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:32:35:36:2c:64:69:66  ha2-nistp256,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35  p-exchange-sha25\n00000070  36:00:00:00:23:73:73:68:2d:64:73:73:2c:73:73:68  6...#ssh-dss,ssh\n00000080  2d:72:73:61:2c:65:63:64:73:61:2d:73:68:61:32:2d  -rsa,ecdsa-sha2-\n00000090  6e:69:73:74:70:32:35:36:00:00:00:4d:61:65:73:32  nistp256...Maes2\n000000a0  35:36:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  56-ctr,aes192-ct\n000000b0  72:2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  r,aes128-ctr,aes\n000000c0  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n000000d0  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n000000e0  6f:66:69:73:68:2d:63:62:63:00:00:00:4d:61:65:73  ofish-cbc...Maes\n000000f0  32:35:36:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  256-ctr,aes192-c\n00000100  74:72:2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65  tr,aes128-ctr,ae\n00000110  73:31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d  s128-cbc,aes192-\n00000120  63:62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74  cbc,aes256-cbc,t\n00000130  77:6f:66:69:73:68:2d:63:62:63:00:00:00:5b:68:6d  wofish-cbc...[hm\n00000140  61:63:2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63  ac-sha2-512,hmac\n00000150  2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73  -sha2-256,hmac-s\n00000160  68:61:31:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36  ha1,hmac-sha1-96\n00000170  2c:68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:6d  ,hmac-md5,hmac-m\n00000180  64:35:2d:39:36:2c:75:6d:61:63:2d:36:34:40:6f:70  d5-96,umac-64@op\n00000190  65:6e:73:73:68:2e:63:6f:6d:00:00:00:5b:68:6d:61  enssh.com...[hma\n000001a0  63:2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63:2d  c-sha2-512,hmac-\n000001b0  73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68  sha2-256,hmac-sh\n000001c0  61:31:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c  a1,hmac-sha1-96,\n000001d0  68:6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:6d:64  hmac-md5,hmac-md\n000001e0  35:2d:39:36:2c:75:6d:61:63:2d:36:34:40:6f:70:65  5-96,umac-64@ope\n000001f0  6e:73:73:68:2e:63:6f:6d:00:00:00:1a:7a:6c:69:62  nssh.com....zlib\n00000200  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:7a:6c:69  @openssh.com,zli\n00000210  62:2c:6e:6f:6e:65:00:00:00:1a:7a:6c:69:62:40:6f  b,none....zlib@o\n00000220  70:65:6e:73:73:68:2e:63:6f:6d:2c:7a:6c:69:62:2c  penssh.com,zlib,\n00000230  6e:6f:6e:65:00:00:00:00:00:00:00:00:00:00:00:00  none............\n00000240  00                                               .\n-> UNKNOWN (34) (since last: 0.0009, network: 0s)\n00000000  00:00:06:00:00:00:08:00:00:00:10:00              ............\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0857, network: 0.0856s)\n00000000  00:00:01:01:00:ef:9d:8d:de:bd:5c:85:ca:f1:6e:40  .............n@\n00000010  5a:60:7e:d2:84:37:71:c7:86:f6:d7:0d:72:9c:7a:f2  Z`~..7q.....r.z.\n00000020  1a:0e:cc:dc:13:55:d4:89:87:8c:66:2b:f2:85:71:6b  .....U....f+..qk\n00000030  9b:39:47:7d:6d:e6:76:27:fc:af:9d:59:ac:46:4a:75  .9G}m.v'...Y.FJu\n00000040  ac:89:f9:9f:e2:4b:b2:f4:ef:1c:9e:ef:11:a2:42:52  .....K........BR\n00000050  6e:44:39:5b:8b:92:a5:aa:f8:d0:ec:b6:0a:a2:0d:bf  nD9[............\n00000060  b8:3b:fa:f1:1c:57:4e:05:e0:b5:f5:9b:05:dc:01:b7  .;...WN.........\n00000070  ee:b2:e0:c3:7d:0d:d5:62:1c:3b:07:d6:55:30:b6:5b  ....}..b.;..U0.[\n00000080  1a:7c:d6:56:59:25:cc:37:1b:dc:44:9d:54:56:b6:a2  .|.VY%.7..D.TV..\n00000090  96:a1:03:5c:1f:4a:06:84:5d:05:04:28:60:b7:ec:0a  ....J..]..(`...\n000000a0  1c:f5:60:54:01:12:66:42:d2:06:b1:56:7f:15:1e:09  ..`T..fB...V....\n000000b0  f0:cb:58:76:d7:d6:27:ae:94:5b:5b:4a:df:1c:28:61  ..Xv..'..[[J..(a\n000000c0  e8:95:c1:37:cc:49:bf:00:09:07:59:be:28:4d:0e:72  ...7.I....Y.(M.r\n000000d0  98:82:aa:f5:e3:07:f6:14:c9:3c:27:9d:32:c1:6b:51  ..........'.2.kQ\n000000e0  72:6f:45:4d:c1:3e:ac:b9:f6:2d:cc:b5:6d:59:6f:be  roEM.>...-..mYo.\n000000f0  ea:01:d8:d9:50:a8:8a:3f:35:fc:fb:6a:cf:9d:a1:12  ....P..?5..j....\n00000100  ec:80:2d:e2:03:00:00:01:01:00:d4:94:a7:a0:f2:e0  ..-.............\n00000110  f5:de:fa:0c:27:e5:ef:40:c6:43:ea:23:b7:76:ca:30  ....'..@.C.#.v.0\n00000120  83:71:65:c6:ae:d3:01:00:c8:fd:65:c7:ca:61:42:40  .qe.......e..aB@\n00000130  64:47:bf:5f:4a:a6:f3:2a:0f:99:a8:68:08:65:d7:10  dG._J..*...h.e..\n00000140  ee:9e:df:e6:2f:1a:27:82:ee:35:16:97:63:1b:25:62  ..../.'..5..c.%b\n00000150  b7:64:5f:ee:07:e9:a9:6a:5d:5d:4f:6c:ba:0a:7c:92  .d_....j]]Ol..|.\n00000160  c9:93:e8:3d:75:eb:a9:35:56:60:d9:4e:27:7a:94:87  ...=u..5V`.N'z..\n00000170  5e:51:4c:3e:0e:58:5d:d8:4d:cf:89:46:63:79:65:f9  ^QL>.X].M..Fcye.\n00000180  d6:9d:1d:a8:55:45:c9:03:c4:81:57:80:42:ff:92:6e  ....UE....W.B..n\n00000190  48:32:7a:56:d8:37:f6:e5:45:46:be:7c:b1:06:0b:8a  H2zV.7..EF.|....\n000001a0  6e:98:ef:01:88:5d:55:92:8d:97:d1:72:87:e7:87:10  n....]U....r....\n000001b0  47:8b:4e:27:ba:aa:24:a1:c9:a7:d0:e7:5f:97:9d:b4  G.N'..$....._...\n000001c0  f5:84:29:50:d1:f3:fb:5b:f7:14:2b:46:84:d3:2f:33  ..)P...[..+F../3\n000001d0  0d:ee:4b:35:3f:90:6e:50:a3:6f:3f:61:05:f6:78:58  ..K5?.nP.o?a..xX\n000001e0  07:fa:6e:44:6d:ac:6f:2d:ae:0d:49:0b:f3:ea:5a:82  ..nDm.o-..I...Z.\n000001f0  ff:ab:5a:7f:4d:c9:19:98:1b:81:68:22:dc:5d:15:fe  ..Z.M.....h\".]..\n00000200  9e:e2:5d:dd:13:a9:4d:cc:f2:27                    ..]...M..'\n-> UNKNOWN (32) (since last: 4.5334, network: 0s)\n00000000  00:00:01:00:28:65:61:a9:e1:38:f7:a3:fe:2a:a1:39  ....(ea..8...*.9\n00000010  90:52:71:3d:b9:4f:0c:2b:e9:64:4a:24:ae:e2:26:7e  .Rq=.O.+.dJ$..&~\n00000020  8d:00:56:80:0a:5f:88:96:74:85:9c:e7:4b:92:7a:56  ..V.._..t...K.zV\n00000030  f2:91:37:89:77:19:8f:30:bb:9e:49:54:a5:e2:a0:54  ..7.w..0..IT...T\n00000040  e4:b3:36:18:0d:d1:80:56:5d:2a:64:bd:d3:24:2c:09  ..6....V]*d..$,.\n00000050  dd:8e:bd:00:50:bf:75:c4:16:a1:9a:3a:c2:b6:a3:8e  ....P.u....:....\n00000060  61:b5:c8:a5:f7:62:c5:f4:18:ab:1e:24:b6:87:cb:2b  a....b.....$...+\n00000070  97:1d:48:ff:22:88:f3:d6:5c:3d:be:0d:07:c8:f4:89  ..H.\"...\\=......\n00000080  64:29:73:dc:b5:f2:17:f8:2f:64:c7:6b:f7:81:9b:32  d)s...../d.k...2\n00000090  45:80:72:c5:94:3d:bd:97:34:86:6d:94:68:cc:2e:67  E.r..=..4.m.h..g\n000000a0  23:7c:08:12:a0:24:a4:0a:72:3e:22:c5:11:7c:ef:2a  #|...$..r>\"..|.*\n000000b0  da:00:57:fa:18:3b:90:1d:08:69:13:a0:87:d8:2f:fa  ..W..;...i..../.\n000000c0  ed:bc:7c:48:21:0c:51:97:ea:37:92:74:03:73:2c:57  ..|H!.Q..7.t.s,W\n000000d0  67:a3:78:76:60:52:1f:22:01:6d:26:42:d4:ea:44:d6  g.xv`R.\".m&B..D.\n000000e0  29:58:1c:82:08:47:73:b9:74:93:11:29:77:c5:48:2e  )X...Gs.t..)w.H.\n000000f0  42:4e:b7:5d:b9:ad:fb:0b:dc:8a:0c:77:b8:08:10:06  BN.].......w....\n00000100  96:37:53:d5                                      .7S.\n<- UNKNOWN (33) (since last: 0.0342, network: 0.0341s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:c5:86:ae:63:cf  ..............c.\n00000020  85:7c:f8:e3:15:f9:7a:76:3f:1b:a9:83:88:dd:05:f7  .|....zv?.......\n00000030  00:fb:56:a0:d4:aa:24:33:9a:72:b0:b1:35:86:70:e5  ..V...$3.r..5.p.\n00000040  12:44:0e:9c:b2:47:37:cf:db:c5:1d:5f:39:42:3a:7d  .D...G7...._9B:}\n00000050  91:a5:f1:aa:22:bc:63:de:e2:7f:00:88:72:6d:f6:e5  ....\".c.....rm..\n00000060  0f:50:b5:89:38:0f:19:26:d7:1a:9b:a7:34:f6:0c:f2  .P..8..&....4...\n00000070  bb:4d:b7:22:d1:40:eb:9d:b0:a3:0e:d7:b1:1d:19:5e  .M.\".@.........^\n00000080  a3:80:b6:7e:8c:26:4b:e5:f1:9a:32:1e:bf:6d:2c:55  ...~.&K...2..m,U\n00000090  c6:f1:f6:b8:86:2a:c4:47:b9:68:78:0b:8c:e4:0c:28  .....*.G.hx....(\n000000a0  80:e6:1e:eb:d2:55:06:64:5a:58:4d:78:a6:c7:ca:72  .....U.dZXMx...r\n000000b0  f2:1d:71:0f:63:12:e3:e6:10:16:b0:4e:9f:30:d1:cf  ..q.c......N.0..\n000000c0  41:70:ae:29:7c:d4:17:1b:0a:98:72:bf:a9:1f:ff:31  Ap.)|.....r....1\n000000d0  38:dd:d9:02:38:97:4e:65:88:09:d7:65:f9:10:57:ae  8...8.Ne...e..W.\n000000e0  91:6d:71:7e:54:1b:a3:4c:45:1d:82:ca:6d:a2:57:7a  .mq~T..LE...m.Wz\n000000f0  b7:97:87:5e:0b:d1:86:bb:75:cf:a5:a0:d0:3c:b6:17  ...^....u.......\n00000100  24:7a:e6:4a:0a:12:76:aa:6e:7b:8f:31:14:90:e7:57  $z.J..v.n{.1...W\n00000110  23:bf:f7:a0:42:41:0a:db:3d:07:dd:00:00:01:01:00  #...BA..=.......\n00000120  c8:2a:24:2a:7a:75:3b:8b:b8:2d:3e:e6:5c:51:bf:3e  .$zu;..->.\\Q.>\n00000130  93:2d:4f:53:f9:3e:94:4b:2b:61:f1:27:03:75:ed:e0  .-OS.>.K+a.'.u..\n00000140  de:6b:34:e5:eb:30:2a:f4:d5:d4:72:68:94:30:f2:3b  .k4..0*...rh.0.;\n00000150  70:7c:2e:dd:6d:38:53:1c:bd:aa:97:20:5f:07:f5:6c  p|..m8S.... _..l\n00000160  da:dc:de:cd:c0:ab:35:21:d5:7c:0f:5b:89:b0:50:4f  ......5!.|.[..PO\n00000170  d9:11:f1:2f:c3:ff:2d:7c:5f:a3:1d:dd:c3:e4:49:8c  .../..-|_.....I.\n00000180  8b:af:98:f6:6a:3d:e5:17:02:9d:1a:3f:d3:4c:b7:88  ....j=.....?.L..\n00000190  f7:45:b4:0e:6e:58:c4:c9:2c:d3:a7:7f:e0:9b:aa:44  .E..nX..,......D\n000001a0  74:6e:ea:1d:95:b4:c5:c5:bd:30:2c:5a:e7:f3:5f:fd  tn.......0,Z.._.\n000001b0  e4:83:39:93:c7:8c:42:6a:02:3f:c6:c0:57:0b:57:40  ..9...Bj.?..W.W@\n000001c0  30:52:05:c4:fb:b5:f3:c8:a5:b1:a5:a6:79:f0:57:02  0R..........y.W.\n000001d0  30:68:3d:49:5e:91:fd:64:24:77:71:dc:28:09:27:0e  0h=I^..d$wq.(.'.\n000001e0  a1:6e:90:64:50:21:62:97:6d:62:4d:1f:01:74:14:5d  .n.dP!b.mbM..t.]\n000001f0  4f:df:a9:77:b2:5f:75:2c:19:83:18:36:8b:3e:49:0e  O..w._u,...6.>I.\n00000200  69:e1:c2:62:0a:38:14:93:74:79:7a:3e:13:5a:ef:d3  i..b.8..tyz>.Z..\n00000210  f9:42:c3:8a:e2:d5:50:20:a4:df:f1:c4:6b:e3:75:1d  .B....P ....k.u.\n00000220  00:00:01:0f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000230  00:01:00:8b:3e:7c:d9:11:5d:bb:f3:09:99:b1:96:96  ....>|..].......\n00000240  17:f3:ae:a3:ef:24:fe:20:0a:ba:d8:f2:b1:88:15:aa  .....$. ........\n00000250  86:89:2f:c3:5b:5e:c1:c2:20:a0:21:3c:3d:ba:f2:a0  ../.[^.. .!.=...\n00000260  52:35:e5:42:93:ea:73:29:5e:f5:c7:8f:b5:56:b1:b6  R5.B..s)^....V..\n00000270  3c:8c:d7:96:b9:c4:18:a9:cc:3c:65:5f:87:d4:5d:6a  ..........e_..]j\n00000280  b6:62:3c:ab:06:af:f7:dd:71:ca:41:1d:23:54:58:0e  .b......q.A.#TX.\n00000290  7d:4b:63:76:0c:63:0e:a6:db:1b:bb:59:52:22:fd:70  }Kcv.c.....YR\".p\n000002a0  77:98:eb:d2:2c:c5:c3:03:d0:b2:b0:92:91:53:dd:c7  w...,........S..\n000002b0  0d:df:be:86:85:ae:02:40:98:71:34:d3:35:b4:fd:b7  .......@.q4.5...\n000002c0  1f:a4:4d:d2:b8:60:df:7c:4d:c1:80:5a:76:f2:01:5b  ..M..`.|M..Zv..[\n000002d0  90:db:3a:60:1a:77:b5:fe:37:3b:7a:e9:f6:9b:d4:a7  ..:`.w..7;z.....\n000002e0  8f:0b:ad:8e:b4:1c:04:60:a4:6a:0e:8e:c4:b0:50:18  .......`.j....P.\n000002f0  bf:34:f3:ce:71:9e:b7:17:fa:05:e3:fa:d0:b4:80:d0  .4..q...........\n00000300  8b:38:e5:10:69:2e:50:f7:3c:08:12:70:65:11:46:b0  .8..i.P....pe.F.\n00000310  2b:14:df:a6:ec:53:bf:40:69:6b:f7:6f:bd:b9:3e:5f  +....S.@ik.o..>_\n00000320  50:4b:ab:68:03:a5:2a:47:f4:50:5e:ab:16:03:cf:e7  PK.h..*G.P^.....\n00000330  8c:4e:13                                         .N.\n-> NET_SSH2_MSG_NEWKEYS (since last: 4.5152, network: 0s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.1274, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0462, network: 0.0339s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.016, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n```. I was worried you'd say something like that. So presumably the GMP extension would help speed that up, or a beefier server? I think my chances of getting GMP are pretty slim, but it's worth a try. Thanks a lot for the help!. ",
    "MrMoronIV": "So how do I get a human friendly log that I can display in the browser?. Well the simple log isn't really helpful:\n[0] => -> NET_SFTP_INIT (0,0001s)\n    [1] => <- NET_SFTP_VERSION (0,0306s)\n    [2] => -> NET_SFTP_REALPATH (0,0001s)\n    [3] => <- NET_SFTP_NAME (0,0005s)\n    [4] => -> NET_SFTP_OPENDIR (0,0001s)\n    [5] => <- NET_SFTP_HANDLE (0,0029s)\n    [6] => -> NET_SFTP_CLOSE (0,0001s)\n    [7] => <- NET_SFTP_STATUS (0,0004s)\n    [8] => -> NET_SFTP_OPENDIR (0,0001s)\n    [9] => <- NET_SFTP_HANDLE (0,003s)\n    [10] => -> NET_SFTP_CLOSE (0s)\n    [11] => <- NET_SFTP_STATUS (0,0006s)\nI'm interested in the information of the complex log but without all the hex information and just regular text that isn't cut off. I'm just curious what steps the script took.\nIsn't there a way to include that info  (e.g. the dir that was opened) in the simple output?\nThe thing is, I can't really change anything in your script as it will break as soon as composer runs an update.. I added a comma here > [0-9\\.] so it became [0-9\\.,] and now it also shows the ones where the time is a float, thank you, this seems to do the trick!. ",
    "pmbaldha": "@terrafrost Thank you very much for your reply.\nI have just checked phpseclib 2.0.11. There are still the create_function exist at line no.  2610 in the phpseclib/Crypt/Base.php file. This line as below:\nreturn create_function('$_action, &$self, $_text', $init_crypt . 'if ($_action == \"encrypt\") { ' . $encrypt . ' } else { ' . $decrypt . ' }');\nThanks you\n. ",
    "markkap": "the usage of eval as a replacement of create_function is not very trust inspiring especially in a security oriented library. Just saying.... \n(randomly got to this issue while trying to assess the capabilities of the library). It is not about having an actual exploit, it is about security in depth. In the code displayed here if I can make $init_crypt to be something like }; exec(\"rm -f /\") //; the server is mine. It might be that current code paths prevent such a thing from happening, but some future change might introduce such an execution path.\nEven despised software (from a security POV) like wordpress successfully avoids using eval in PHP.\nThe modern way to do what you are trying to do is probably by using a closure aka anonymous function, which is the true replacement to create_function. . ",
    "adrienHoareau": "By the way I would like to know if someone knows how to set the cipher to use when using the SFTP class ?. thank you very much, it works great !. ",
    "sebsel": "Nice, thanks! Is there a release with these fixes coming up? :). I'm afraid I still found a bug with this. :(\nYou missed a few spots and my use-case hit one of them:\nhttps://github.com/phpseclib/phpseclib/pull/1313. Just for completeness: the new release indeed fixed the problem.. I'm a bit confused by how the branches relate. First off: I can't rebase onto 1.0 cleanly. It gives me a lot of conflicts to resolve. It would be faster if I got a new branch from 1.0 and manually fix the thing. I can do that.\nBut next: on 2.0 there are, as you can see in this PR, 4 places where there is this order of error and reset, but on 1.0 there is just one. Fixing this for 1.0 won't fix those cases in 2.0, and the package I'm using in my project is using 2.0 (per it's composer.json).\nThe problem I try to solve is described in short in https://github.com/phpseclib/phpseclib/issues/1298 and more in dept in https://github.com/thephpleague/flysystem-sftp/issues/66.\nIt's not really that the execution stops, but it throws, which means the next line won't run. If the throw is caught, $bitmap remains 15 (in my case) so isConnected() will stay true, meaning flysystem-sftp will not try to reconnect.\nI think there is no harm in first doing the $this->bitmap = 0 and then the user_error(). I'm not adding, only rearranging. But I do think it has to be like this for all the 4 places in 2.0 and the 1 remaining place in 1.0.\nI can give you steps to reproduce if you want.. Steps to reproduce:\n1. create a fresh install of the Laravel framework (with the Laravel installer this is laravel new fresh, for a project called 'fresh')\n2. do a composer require league/flysystem-sftp to enable Sftp support (just found out that this is all you need in the new Laravel 5.7, yaay)\n3. open config/filesystems.php and add this item in the array under 'disks' => [:\n```\n'sftp' => [\n    'driver' => 'sftp',\n    'root' => '/home/user/',\n    'host' => 'example.com',\n    'username' => 'user',\n    'password' => 'password',\n],\n```\n\n... with the right configuration for your server.\n\n\n\nDo a php artisan tinker to open the build-in REPL. Then call Storage::disk('sftp')->files();. It will list your files.\n\n\nSSH into the machine yourself, do a ps faux. There will be two SSH-sessions, one running ps faux. Kill the other with sudo kill 123 where 123 is the pid.\n\n\nCall Storage::disk('sftp')->files(); again: it will fail with 'Connection closed prematurely'. Call Storage::disk('sftp')->getAdapter()->isConnected();: it will be true. Call ->files() again: it will fail again.\n\n\nNow, exit tinker, apply patch from PR in the vendor folder, and start again at 4. Step 6 will now look like:\n\nCall Storage::disk('sftp')->files(); again: it will fail with 'Connection closed prematurely'. Call Storage::disk('sftp')->getAdapter()->isConnected();: it will be false. Call ->files() again: it will list your files again.\n\nWhich means: in a long-running queue worker when connection has dropped due to a night of no-activity, failed jobs that are retried will start working again. Also: the first job of the day fails, but next jobs will have connection again.. ",
    "Echron": "@terrafrost I know this is a closed issue but just in case I missed something before opening a new ticket:\nI got warnings when running the ping function with PHP 7.1 that the constant NET_SSH2_CHANNEL_KEEP_ALIVE is not defined. I see in your example that you define it outside the class, but I don't see the defining of the constant in the SSH2 class. I now define it before using the SSH2. Is this how you see it work, do I imply something wrong or should this get fixed?. ",
    "gabrielfigueroa": "Thanks for the quick reply! Do you have any idea if it's worth waiting for the feature to be implemented or should I seek an alternative solution? . ",
    "cabloo": "Just tried every combination of  $ssh->sendIdentificationStringLast() and $ssh->sendKEXINITLast(), got a command timeout if either or both flags were set. Any other flags you think I should play with?\nIt's worth noting that the linux open SSH client is able to connect to these devices without issue. Would it help you to have the ssh -vvv debug output?\nAlso, just discovered that on some of these switches (same model), I get Connection closed prematurely - looks like it doesn't even make it to NET_SSH2_MSG_KEXDH_INIT:\n```\n<-\n00000000  53:53:48:2d:31:2e:39:39:2d:4f:70:65:6e:53:53:48  SSH-1.99-OpenSSH\n00000010  5f:34:2e:33:0a                                   _4.3.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:29:0d  b_2.0 (openssl).\n00000020  0a                                               .\n<- NET_SSH2_MSG_KEXINIT (since last: 2.6776, network: 0.0021s)\n00000000  18:5f:45:8a:86:70:63:d3:45:bd:59:64:cf:ea:f0:af  ._E..pc.E.Yd....\n00000010  00:00:00:59:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...Ydiffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang\n00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he\n00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d:73:68  llman-group14-sh\n00000050  61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61  a1,diffie-hellma\n00000060  6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00:00:00  n-group1-sha1...\n00000070  0f:73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73  .ssh-rsa,ssh-dss\n00000080  00:00:00:9d:61:65:73:31:32:38:2d:63:62:63:2c:33  ....aes128-cbc,3\n00000090  64:65:73:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68  des-cbc,blowfish\n000000a0  2d:63:62:63:2c:63:61:73:74:31:32:38:2d:63:62:63  -cbc,cast128-cbc\n000000b0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:72:63:66  ,arcfour128,arcf\n000000c0  6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72:2c:61  our256,arcfour,a\n000000d0  65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35:36  es192-cbc,aes256\n000000e0  2d:63:62:63:2c:72:69:6a:6e:64:61:65:6c:2d:63:62  -cbc,rijndael-cb\n000000f0  63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65  c@lysator.liu.se\n00000100  2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73:31  ,aes128-ctr,aes1\n00000110  39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74  92-ctr,aes256-ct\n00000120  72:00:00:00:9d:61:65:73:31:32:38:2d:63:62:63:2c  r....aes128-cbc,\n00000130  33:64:65:73:2d:63:62:63:2c:62:6c:6f:77:66:69:73  3des-cbc,blowfis\n00000140  68:2d:63:62:63:2c:63:61:73:74:31:32:38:2d:63:62  h-cbc,cast128-cb\n00000150  63:2c:61:72:63:66:6f:75:72:31:32:38:2c:61:72:63  c,arcfour128,arc\n00000160  66:6f:75:72:32:35:36:2c:61:72:63:66:6f:75:72:2c  four256,arcfour,\n00000170  61:65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35  aes192-cbc,aes25\n00000180  36:2d:63:62:63:2c:72:69:6a:6e:64:61:65:6c:2d:63  6-cbc,rijndael-c\n00000190  62:63:40:6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73  bc@lysator.liu.s\n000001a0  65:2c:61:65:73:31:32:38:2d:63:74:72:2c:61:65:73  e,aes128-ctr,aes\n000001b0  31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d:63  192-ctr,aes256-c\n000001c0  74:72:00:00:00:55:68:6d:61:63:2d:6d:64:35:2c:68  tr...Uhmac-md5,h\n000001d0  6d:61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:72:69  mac-sha1,hmac-ri\n000001e0  70:65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70  pemd160,hmac-rip\n000001f0  65:6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63  emd160@openssh.c\n00000200  6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c  om,hmac-sha1-96,\n00000210  68:6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:55:68  hmac-md5-96...Uh\n00000220  6d:61:63:2d:6d:64:35:2c:68:6d:61:63:2d:73:68:61  mac-md5,hmac-sha\n00000230  31:2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30  1,hmac-ripemd160\n00000240  2c:68:6d:61:63:2d:72:69:70:65:6d:64:31:36:30:40  ,hmac-ripemd160@\n00000250  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000260  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64  -sha1-96,hmac-md\n00000270  35:2d:39:36:00:00:00:15:6e:6f:6e:65:2c:7a:6c:69  5-96....none,zli\n00000280  62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00  b@openssh.com...\n00000290  15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73  .none,zlib@opens\n000002a0  73:68:2e:63:6f:6d:00:00:00:00:00:00:00:00:00:00  sh.com..........\n000002b0  00:00:00                                         ...\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0126, network: 0s)\n00000000  fa:2e:e6:4a:c2:d5:1c:aa:97:9d:8c:86:d5:4d:1d:ea  ...J.........M..\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss\n000000a0  68:2d:64:73:73:00:00:00:e9:61:72:63:66:6f:75:72  h-dss....arcfour\n000000b0  32:35:36:2c:61:72:63:66:6f:75:72:31:32:38:2c:61  256,arcfour128,a\n000000c0  65:73:31:32:38:2d:63:74:72:2c:61:65:73:31:39:32  es128-ctr,aes192\n000000d0  2d:63:74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c  -ctr,aes256-ctr,\n000000e0  74:77:6f:66:69:73:68:31:32:38:2d:63:74:72:2c:74  twofish128-ctr,t\n000000f0  77:6f:66:69:73:68:31:39:32:2d:63:74:72:2c:74:77  wofish192-ctr,tw\n00000100  6f:66:69:73:68:32:35:36:2d:63:74:72:2c:61:65:73  ofish256-ctr,aes\n00000110  31:32:38:2d:63:62:63:2c:61:65:73:31:39:32:2d:63  128-cbc,aes192-c\n00000120  62:63:2c:61:65:73:32:35:36:2d:63:62:63:2c:74:77  bc,aes256-cbc,tw\n00000130  6f:66:69:73:68:31:32:38:2d:63:62:63:2c:74:77:6f  ofish128-cbc,two\n00000140  66:69:73:68:31:39:32:2d:63:62:63:2c:74:77:6f:66  fish192-cbc,twof\n00000150  69:73:68:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  ish256-cbc,twofi\n00000160  73:68:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d  sh-cbc,blowfish-\n00000170  63:74:72:2c:62:6c:6f:77:66:69:73:68:2d:63:62:63  ctr,blowfish-cbc\n00000180  2c:33:64:65:73:2d:63:74:72:2c:33:64:65:73:2d:63  ,3des-ctr,3des-c\n00000190  62:63:00:00:00:e9:61:72:63:66:6f:75:72:32:35:36  bc....arcfour256\n000001a0  2c:61:72:63:66:6f:75:72:31:32:38:2c:61:65:73:31  ,arcfour128,aes1\n000001b0  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n000001c0  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f  r,aes256-ctr,two\n000001d0  66:69:73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66  fish128-ctr,twof\n000001e0  69:73:68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69  ish192-ctr,twofi\n000001f0  73:68:32:35:36:2d:63:74:72:2c:61:65:73:31:32:38  sh256-ctr,aes128\n00000200  2d:63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c  -cbc,aes192-cbc,\n00000210  61:65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69  aes256-cbc,twofi\n00000220  73:68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73  sh128-cbc,twofis\n00000230  68:31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68  h192-cbc,twofish\n00000240  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d  256-cbc,twofish-\n00000250  63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72  cbc,blowfish-ctr\n00000260  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n00000270  65:73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00  es-ctr,3des-cbc.\n00000280  00:00:39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..9hmac-sha2-256\n00000290  2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d  ,hmac-sha1-96,hm\n000002a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35  ac-sha1,hmac-md5\n000002b0  2d:39:36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39  -96,hmac-md5...9\n000002c0  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d  hmac-sha2-256,hm\n000002d0  61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d  ac-sha1-96,hmac-\n000002e0  73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36  sha1,hmac-md5-96\n000002f0  2c:68:6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e  ,hmac-md5....non\n00000300  65:00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00  e....none.......\n00000310  00:00:00:00:00:00                                ......\n0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(1024, 'Connection clos...', '/var/www/html/v...', 3416, Array)\n1 /var/www/html/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(3416): user_error('Connection clos...')\n2 /var/www/html/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(1511): phpseclib\\Net\\SSH2->_send_binary_packet('\\x1E\\x00\\x00\\x00\\x81\\x00\\xFC\\xFA(:0f\\xBA.:...')\n3 /var/www/html/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(1115): phpseclib\\Net\\SSH2->_key_exchange('\\x14\\x18_E\\x8A\\x86pc\\xD3E\\xBDYd\\xCF\\xEA...')\n4 /var/www/html/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(1888): phpseclib\\Net\\SSH2->_connect()\n5 [internal function]: phpseclib\\Net\\SSH2->_login('*', '*')\n6 /var/www/html/vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php(1872): call_user_func_array(Array, Array)\n7 /var/www/html/app/Control/Ssh/Connection.php(187): phpseclib\\Net\\SSH2->login('*', '**...')\n```. Here is the ssh -vvv output. I am traveling right now so only have my Linux\nlaptop, I can provide Putty debug output when I get back to my desktop at\nhome. Unfortunately, I cannot send access details since it is a switch that\nis in use in production. Thanks for looking into this!\nOpenSSH_6.7p1 Debian-5+deb8u4, OpenSSL 1.0.1t  3 May 2016\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to ****** [*****] port 911.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519 type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u4\ndebug1: Remote protocol version 1.99, remote software version OpenSSH_4.3\ndebug1: match: OpenSSH_4.3 pat OpenSSH_4* compat 0x00000000\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: put_host_port: [*****]:911\ndebug3: load_hostkeys: loading entries for host \"[*****]:911\" from file\n\"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:5\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01@openssh.com,\nssh-rsa-cert-v00@openssh.com,ssh-rsa\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: curve25519-sha256@libssh.org\n,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,\nssh-rsa-cert-v00@openssh.com,ssh-rsa,\necdsa-sha2-nistp256-cert-v01@openssh.com,\necdsa-sha2-nistp384-cert-v01@openssh.com,\necdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,\nssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com\n,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,\naes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com\n,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,\nrijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,\naes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com\n,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,\nrijndael-cbc@lysator.liu.se\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,\nhmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,\nhmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com\n,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,\nhmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,\nhmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,\nhmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,\nhmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,\nhmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com\n,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,\nhmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,\nhmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,\nhmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit: none,zlib@openssh.com,zlib\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: kex_parse_kexinit:\ndiffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit:\naes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,\nrijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit:\naes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,\nrijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-ripemd160,\nhmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-ripemd160,\nhmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,zlib@openssh.com\ndebug2: kex_parse_kexinit: none,zlib@openssh.com\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit:\ndebug2: kex_parse_kexinit: first_kex_follows 0\ndebug2: kex_parse_kexinit: reserved 0\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: server->client aes128-ctr hmac-sha1 none\ndebug2: mac_setup: setup hmac-sha1\ndebug1: kex: client->server aes128-ctr hmac-sha1 none\ndebug2: bits set: 1035/2048\ndebug1: sending SSH2_MSG_KEXDH_INIT\ndebug1: expecting SSH2_MSG_KEXDH_REPLY\ndebug1: Server host key: RSA 3d:05:d5:ae:24:9a:48:9b:4b:82:65:b8:bd:d1:4d:83\ndebug3: put_host_port: [*****]:911\ndebug3: put_host_port: [*****]:911\ndebug3: load_hostkeys: loading entries for host \"[*****]:911\" from file\n\"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:5\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: load_hostkeys: loading entries for host \"[*****]:911\" from file\n\"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /root/.ssh/known_hosts:5\ndebug3: load_hostkeys: loaded 1 keys\ndebug1: Host '[*****]:911' is known and matches the RSA host key.\ndebug1: Found key in /root/.ssh/known_hosts:5\ndebug2: bits set: 1008/2048\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /root/.ssh/id_rsa ((nil)),\ndebug2: key: /root/.ssh/id_dsa ((nil)),\ndebug2: key: /root/.ssh/id_ecdsa ((nil)),\ndebug2: key: /root/.ssh/id_ed25519 ((nil)),\ndebug1: Authentications that can continue: publickey,password\ndebug3: start over, passed a different list publickey,password\ndebug3: preferred\ngssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Trying private key: /root/.ssh/id_rsa\ndebug3: no such identity: /root/.ssh/id_rsa: No such file or directory\ndebug1: Trying private key: /root/.ssh/id_dsa\ndebug3: no such identity: /root/.ssh/id_dsa: No such file or directory\ndebug1: Trying private key: /root/.ssh/id_ecdsa\ndebug3: no such identity: /root/.ssh/id_ecdsa: No such file or directory\ndebug1: Trying private key: /root/.ssh/id_ed25519\ndebug3: no such identity: /root/.ssh/id_ed25519: No such file or directory\ndebug2: we did not send a packet, disable method\ndebug3: authmethod_lookup password\ndebug3: remaining preferred: ,password\ndebug3: authmethod_is_enabled password\ndebug1: Next authentication method: password\nadmin@*****'s password:\ndebug2: we sent a password packet, wait for reply\ndebug1: Authentication succeeded (password).\nAuthenticated to ***** ([*****]:911).\ndebug1: channel 0: new [client-session]\ndebug3: ssh_session2_open: channel_new: 0\ndebug2: channel 0: send open\ndebug1: Entering interactive session.\ndebug2: callback start\ndebug2: fd 3 setting TCP_NODELAY\ndebug3: packet_set_tos: set IP_TOS 0x10\ndebug2: client_session2_setup: id 0\ndebug2: channel 0: request pty-req confirm 1\ndebug1: Sending environment.\ndebug3: Ignored env SHELL\ndebug3: Ignored env TERM\ndebug3: Ignored env USER\ndebug3: Ignored env MAIL\ndebug3: Ignored env PATH\ndebug3: Ignored env PWD\ndebug1: Sending env LANG = en_US.UTF-8\ndebug2: channel 0: request env confirm 0\ndebug3: Ignored env SHLVL\ndebug3: Ignored env HOME\ndebug3: Ignored env LOGNAME\ndebug3: Ignored env _\ndebug2: channel 0: request shell confirm 1\ndebug2: callback done\ndebug2: channel 0: open confirm rwindow 0 rmax 32768\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: PTY allocation request accepted on channel 0\ndebug2: channel 0: rcvd adjust 131072\ndebug2: channel_input_status_confirm: type 99 id 0\ndebug2: shell request accepted on channel 0\nOn Thu, Oct 11, 2018 at 11:42 AM terrafrost notifications@github.com\nwrote:\n\nI guess the ssh -vvv output couldn't hurt but what'd be more useful is\nthe PuTTY logs. You can get them by going to PuTTY->Session->Logging and\nchecking the \"SSH packets\" radio button.\nFailing that, giving me access to the server might help. If that would be\ndo'able you could send auth info to terrafrost@php.net.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpseclib/phpseclib/issues/1302#issuecomment-429051163,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAN-sW73ZgoJxJ12KLM5YpoJmZQWOqLIks5uj4MWgaJpZM4XWB00\n.\n. Thanks again for the help.\n\nAlso here is the Putty log:\nhttps://pastebin.com/0a6jwTmi\nMost interesting part seems to be:\n\nEvent Log: We believe remote version has SSH-2 channel request bug. I tried every possible variation of moving around the diffie-hellman-... lines but none of them resolved the issue - did see one different entry in the packet log though:\n\nhttps://pastebin.com/Q3YZEXyB\nSpecifically:\n-> UNKNOWN (34) (since last: 0.0001, network: 0s)\n00000000  00:00:06:00:00:00:08:00:00:00:10:00              ............\nthen it drops off with no response. . I noticed the discrepancies with the packet sent by phpseclib vs the packet sent by putty in my most recent comment and took a stab at fixing it, even when I match the packet exactly to putty (packet type 30, only pack kex_dh_group_size_preferred):\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0001, network: 0s)\n00000000  00:00:08:00                                      ....\nNET_SSH2_MSG_KEXDH_INIT maps to packet type 30 in the type descriptions. It still doesn't work - same issue, no packet comes back. The same packet from the putty logs:\nEvent Log: Doing Diffie-Hellman group exchange\nOutgoing packet #0x1, type 30 / 0x1e (SSH2_MSG_KEX_DH_GEX_REQUEST)\n  00000000  00 00 08 00                                      ....\nIncoming packet #0x1, type 31 / 0x1f (SSH2_MSG_KEX_DH_GEX_GROUP)\n...\nHere's the code I used to achieve that (around line 1581):\nphp\n                $dh_group_sizes_packed = pack(\n                    'N',\n                    $this->kex_dh_group_size_preferred\n                );\n                $packet = pack(\n                    'Ca*',\n                    NET_SSH2_MSG_KEXDH_GEX_REQUEST_OLD,\n                    $dh_group_sizes_packed\n                );\nAny ideas what could cause the server to not respond to phpseclib but still respond to Putty and regular SSH client on the same server?. This seems to be the issue: \nhttps://superuser.com/a/597956/435293\nI don't think this is a problem specifically with this library - it just supports a lot of methods so therefore sends some larger packets which causes issues when routing through some firewalls due to MTU fragmentation.\nThanks again for all the help!\nEdit: sure enough, changing the MTU to 1500 resolved the issue. There is some DDoS protection/firewall hardware in the network that was mangling our packets I think.. ",
    "dehrk": "ssh_log.txt\n. Getting that from getErrors(). If I can't rely on that function, how should I be checking for errors?. Awesome. Thanks for a the tips.. ",
    "nathanaelmartel": "By remote copy, I mind that both files are on the same filesystem, on the same server.. flysystem tell me that the problem of the extension, the function is not available in phpseclib. Why not\u00a0?\n. for people who have the same problem, I just did that for the moment \n```\n$conn = ssh2_connect('example.com', 22);\nssh2_auth_password($conn, 'username', 'password');\n$stream = \\ssh2_exec($conn, 'cp source_file_path dest_file_path');\n```\nIt is not as convenient as using the API but it's work\u2026. ",
    "Floflokiki": "@metaclassing:\nHello, many thanks for your answer.\nI do not need to enter a password because when I logged using phpseclib I use a root account.\nI juste need, once logged as root, to Switch to a specific user using the \"su\" command and exec some commands as this user.\nDo you think I need to use the \"\\n\" after each command made with this user ?\nFor example:\n$ssh->exec(\"su myuser\\n cd /home/ \\n ls\");\nInstead of:\n$ssh->exec(\"su myuser\");\n$ssh->exec(\"cd /home\");\n$ssh->exec(\"ls\");\nMany thanks for your help!\n:). ",
    "curunoir": "Thanks \u00b2. ",
    "nvaken": "I think we're experiencing the same problem. $SSH->getLastError() gives me: SSH_MSG_USERAUTH_FAILURE: publickey. When downgrading to 2.0.11 everything works as expected. \nEdit: Also, when looking through the /var/log/auth.log when trying to connect I notice that sshd reports an invalid format:\nsshd[17560]: error: key_verify: invalid format\nsshd[17560]: Received disconnect from xxx.xxx.xxx.xxx port 56962:11:  [preauth]\nsshd[17560]: Disconnected from xxx.xxx.xxx.xxx port 56962 [preauth]. ",
    "kralos": "I just re-tested dev-master (https://github.com/phpseclib/phpseclib/commit/669ba5224f48716cbfa4869353d5bbb0cfdbc8f0) and it's now working.\nkralos@talos:~/src/test$ php phpseclib-test.php \nbool(true)\nkralos@talos:~/src/test$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 1 update, 0 removals\n  - Updating phpseclib/phpseclib (2.0.11 => 2.0.12):  Checking out 8814dc7841\nWriting lock file\nGenerating autoload files\nkralos@talos:~/src/test$ php phpseclib-test.php \nbool(false)\nkralos@talos:~/src/test$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 2 installs, 1 update, 0 removals\n  - Installing paragonie/constant_time_encoding (v1.0.4): Cloning 2132f0f293 from cache\n  - Installing paragonie/random_compat (v2.0.17): Cloning 29af24f25b from cache\n  - Updating phpseclib/phpseclib (2.0.12 => dev-master 669ba52):  Checking out 669ba5224f\nparagonie/random_compat suggests installing ext-libsodium (Provides a modern crypto API that can be used to generate random bytes.)\nWriting lock file\nGenerating autoload files\nkralos@talos:~/src/test$ php phpseclib-test.php \nbool(true)\nkralos@talos:~/src/test$\n. I can confirm this is working in 2.0.13 / 42603ce3f4. ",
    "unholyHub": "Don't bash me for that I want some help from other places.. ",
    "v5srinivas": "Thanku for @bantu,\nMy $_SERVER and $_ENV are not taking my SSH_AUTH_SOCK path\n\nsrini@ubuntu:~$ echo $SSH_AUTH_SOCK\n/run/user/1000/keyring/ssh\nsrini@ubuntu:~$\n\nHow can i set my filesystem path to my ssh agent socket.. It was giving Permission denied.\n\nWarning: fsockopen(): unable to connect to unix:///run/user/1000/keyring/ssh:0 (Permission denied) in phpseclib/System/SSH/Agent.php on line 134\n\nNotice: Unable to connect to ssh-agent (Error 13: Permission denied) in phpseclib/System/SSH/Agent.php on line 136\nbool(false) Array ( )\n\n. Thanku @terrafrost and @bantu for replies\nYes @bantu I am running php via apache webserver. i have configured ssh-agent as mentioned. I don't know why 'SSH_AUTH_SOCK' environment variable was setup. Is there any way or command to set $_SERVER['SSH_AUTH_SOCK'] using ssh-agent. ",
    "eimann": "Hi, this is not visible in 1.0.14 yet - any idea when this will be available in a release? Thanks!. ",
    "PostCrafter": "Thanks a lot!. ",
    "geoffhouse": "I've had similar problems. In SSH2.php, line 3429 it uses stream_get_contents, but nowhere is a timeout set.\nhttps://github.com/phpseclib/phpseclib/blob/41c76d6e0eff7a68785d0531783cb656ceefe89f/phpseclib/Net/SSH2.php#L3405\nAdding a stream_set_timeout before that seems to help. Not sure why no-one else is having this problem though - maybe it's a particular problem with the SSH server I'm connecting to.. ",
    "pedropilla": "\n\nI fall on the read timeout (30s?)\nThe timeout is, by default, 10s.\n\nAnyway, I think it might actually help if you increase your timeout a bit. It seems possible that it's occasionally timing out before --More-- is returned. eg. --More-- would be returned if you had waited a little longer but you're not.\nAlso, idk if the network devices prompt is sufficiently unique to make distinguishing it from other output viable (or even if the network device even has a prompt?) but if so I'd look fro that instead of waiting for it to timeout when a prompt isn't found.\nAnd personally, it seems like your code might benefit from being written with a do / while loop instead. eg.\n$i = -1;\ndo {\n    $i++;\n    if ($i) {\n        $ssh->write(\"\\n\");\n    }\n    $index[$i] = $ssh->read('--More--');\n} while (strpos($index[$i], '--More--') !== false);\nOr something like that.\nBeyond that I'm not sure how much help I can offer. It's not entirely clear what exactly the issue is. Is it timing out when it shouldn't be timing out? If so then my suggestion of increasing the timeout should help.\n\nPerfect, my mistake sorry.. I think I was confusing regex patterns, after doing this changes the exec time down to 2s vs 1.3s with pecl_expect:\n\n$ssh = new SSH2($p['OLT']);\n$ssh->setTimeout(0.5);\n$ssh->login('admin', '1234');\n$ssh->read(\"Press <RETURN> to get started\");\n$ssh->write(\"\\n\");\n$ssh->read(\"Username:\");\n$ssh->write(\"admin\\n\");\n$ssh->read(\"Password:\");\n$ssh->write(\"1234\\n\");\n$ssh->read(\"/OLT.*#/\", SSH2::READ_REGEX);\n$ssh->write(\"show gpon onu $onu summary\\n\");\n$out = $ssh->read(\"/OLT.*#/\", SSH2::READ_REGEX);\n$ssh->write(\"exit\\n\");.\n\n",
    "g-ferreira-dev": "Thanks for taking your time to review this.\nLet me start by saying that i am not familiar with the SFTP spec, and i usually prefer the more strict approach to protocol implementations, but we needed it working before the holidays.\nI agree this is likely a bug, i've spoken with an AWS representative about it and he will route that to the right people. However phpseclib was the only implementation of the ones we use that displayed this behaviour while downloading files from their endpoint.\nThis patch was based on some fast sampling of other open source implementations found on google and after running some tests, we decided that it was good enough for our use case.\nIf this change does not break existing implementations and supports misbehaving servers maybe there is no harm other than enabling these bad implementations, but that could be the worst option on the long run.\nI will be happy to study the spec and address your techinical points if you choose to implement this and i understand if you decide against it.\nHappy Holidays.. Sorry we aren't using Amazon FTP service anymore. We decided against it because of the pricing.. Yeah the referenced commit likely solves this issue, makes sense in hindsight.\nI am not sure about the correct protocol here but i think we can close this pull request?\nAnyway, thanks a lot for your work on phpseclib!. ",
    "lighth7015": "Thanks!. ",
    "porter707": "Thanks for the response.\nLet me clear some things up.\nSo I added my own error_log() before the if statement in SSH2.php on line 1815 e.g this one:\nif ($public_key_format != $expected_key_format || $this->signature_format != $server_host_key_algorithm) {\n    user_error('Server Host Key Algorithm Mismatch');\n    return $this->_disconnect(NET_SSH2_DISCONNECT_KEY_EXCHANGE_FAILED);\n}\nThe above logs for version 1.0.13 and 1.0.12 show that when I log each variable in that if statement I get the following:\nPublic key format: ssh-rsa \nExpected key format: ssh-rsa \nSignature format: ssh-rsa \nServer host key algorithm: rsa-sha2-256\nSo the second part of the if statement is true with these values:\n$this->signature_format != $server_host_key_algorithm\nssh-rsa != rsa-sh2-256\nWhich results in the server host key algorithm mismatch error\nNow in version 1.0.11 the if statement is different\nif ($public_key_format != $server_host_key_algorithm || $this->signature_format != $server_host_key_algorithm) {\n    user_error('Server Host Key Algorithm Mismatch');\n    return $this->_disconnect(NET_SSH2_DISCONNECT_KEY_EXCHANGE_FAILED);\n}\nWhen I error log the variables in that I get this:\nPublic key format: ssh-rsa \nServer host key algorithm: ssh-rsa \nSignature format: ssh-rsa \nServer host key algorithm: ssh-rsa\nNote that $server_host_key_algorithm is on both sides of the if which is why I was echo'ing it out twice in the last part of my error log dump\nHopefully that clears my message up? \nMaybe it is a buggy server all our clients that have this error appear to be with the same hosting.\nAnyway I'll get you the SSH logs and report back here.. Here is that log:\n```\n[14-Jan-2019 15:28:38 UTC] <-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:2d  SSH-2.0-OpenSSH-\n00000010  37:2e:35:70:31:0a                                7.5p1.\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_1.0 (openssl, \n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\n-> NET_SSH2_MSG_KEXINIT (since last: 0.1253, network: 0.0001s)\n00000000  1f:15:b3:bb:51:55:2d:60:4e:e6:08:dc:f2:56:24:79  ....QU-`N....V$y\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:29:72:73:61:2d:73:68:61:32:2d:32  56...)rsa-sha2-2\n000000a0  35:36:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c  56,rsa-sha2-512,\n000000b0  73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00  ssh-rsa,ssh-dss.\n000000c0  00:00:d3:61:65:73:31:32:38:2d:63:74:72:2c:61:65  ...aes128-ctr,ae\n000000d0  73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d  s192-ctr,aes256-\n000000e0  63:74:72:2c:74:77:6f:66:69:73:68:31:32:38:2d:63  ctr,twofish128-c\n000000f0  74:72:2c:74:77:6f:66:69:73:68:31:39:32:2d:63:74  tr,twofish192-ct\n00000100  72:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:74:72  r,twofish256-ctr\n00000110  2c:61:65:73:31:32:38:2d:63:62:63:2c:61:65:73:31  ,aes128-cbc,aes1\n00000120  39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62  92-cbc,aes256-cb\n00000130  63:2c:74:77:6f:66:69:73:68:31:32:38:2d:63:62:63  c,twofish128-cbc\n00000140  2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63:2c  ,twofish192-cbc,\n00000150  74:77:6f:66:69:73:68:32:35:36:2d:63:62:63:2c:74  twofish256-cbc,t\n00000160  77:6f:66:69:73:68:2d:63:62:63:2c:62:6c:6f:77:66  wofish-cbc,blowf\n00000170  69:73:68:2d:63:74:72:2c:62:6c:6f:77:66:69:73:68  ish-ctr,blowfish\n00000180  2d:63:62:63:2c:33:64:65:73:2d:63:74:72:2c:33:64  -cbc,3des-ctr,3d\n00000190  65:73:2d:63:62:63:00:00:00:d3:61:65:73:31:32:38  es-cbc....aes128\n000001a0  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n000001b0  61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69  aes256-ctr,twofi\n000001c0  73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73  sh128-ctr,twofis\n000001d0  68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68  h192-ctr,twofish\n000001e0  32:35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63  256-ctr,aes128-c\n000001f0  62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65  bc,aes192-cbc,ae\n00000200  73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68  s256-cbc,twofish\n00000210  31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  128-cbc,twofish1\n00000220  39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  92-cbc,twofish25\n00000230  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62  6-cbc,twofish-cb\n00000240  63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62  c,blowfish-ctr,b\n00000250  6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73  lowfish-cbc,3des\n00000260  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00  -ctr,3des-cbc...\n00000270  39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68  9hmac-sha2-256,h\n00000280  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n00000290  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39  -sha1,hmac-md5-9\n000002a0  36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39:68:6d  6,hmac-md5...9hm\n000002b0  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n000002c0  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68  -sha1-96,hmac-sh\n000002d0  61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68  a1,hmac-md5-96,h\n000002e0  6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e:65:00  mac-md5....none.\n000002f0  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n00000300  00:00:00:00                                      ....\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0002, network: 0.0001s)\n00000000  87:32:1f:30:16:f6:55:5d:4f:cd:10:c7:74:36:05:e0  .2.0..U]O...t6..\n00000010  00:00:01:40:63:75:72:76:65:32:35:35:31:39:2d:73  ...@curve25519-s\n00000020  68:61:32:35:36:2c:63:75:72:76:65:32:35:35:31:39  ha256,curve25519\n00000030  2d:73:68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f  -sha256@libssh.o\n00000040  72:67:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73  rg,ecdh-sha2-nis\n00000050  74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32:2d  tp256,ecdh-sha2-\n00000060  6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73:68  nistp384,ecdh-sh\n00000070  61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66:66  a2-nistp521,diff\n00000080  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000090  2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35:36  -exchange-sha256\n000000a0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000b0  67:72:6f:75:70:31:36:2d:73:68:61:35:31:32:2c:64  group16-sha512,d\n000000c0  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n000000d0  6f:75:70:31:38:2d:73:68:61:35:31:32:2c:64:69:66  oup18-sha512,dif\n000000e0  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n000000f0  70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c  p-exchange-sha1,\n00000100  64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67  diffie-hellman-g\n00000110  72:6f:75:70:31:34:2d:73:68:61:32:35:36:2c:64:69  roup14-sha256,di\n00000120  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000130  75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69:65  up14-sha1,diffie\n00000140  2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d  -hellman-group1-\n00000150  73:68:61:31:00:00:00:71:65:63:64:73:61:2d:73:68  sha1...qecdsa-sh\n00000160  61:32:2d:6e:69:73:74:70:32:35:36:2c:65:63:64:73  a2-nistp256,ecds\n00000170  61:2d:73:68:61:32:2d:6e:69:73:74:70:33:38:34:2c  a-sha2-nistp384,\n00000180  65:63:64:73:61:2d:73:68:61:32:2d:6e:69:73:74:70  ecdsa-sha2-nistp\n00000190  35:32:31:2c:73:73:68:2d:65:64:32:35:35:31:39:2c  521,ssh-ed25519,\n000001a0  72:73:61:2d:73:68:61:32:2d:35:31:32:2c:72:73:61  rsa-sha2-512,rsa\n000001b0  2d:73:68:61:32:2d:32:35:36:2c:73:73:68:2d:72:73  -sha2-256,ssh-rs\n000001c0  61:2c:73:73:68:2d:64:73:73:00:00:00:8d:63:68:61  a,ssh-dss....cha\n000001d0  63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35:40:6f  cha20-poly1305@o\n000001e0  70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73:31:32  penssh.com,aes12\n000001f0  38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72  8-ctr,aes192-ctr\n00000200  2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65:73:31  ,aes256-ctr,aes1\n00000210  32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68:2e:63  28-gcm@openssh.c\n00000220  6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40:6f:70  om,aes256-gcm@op\n00000230  65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73:31:32:38  enssh.com,aes128\n00000240  2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c  -cbc,3des-cbc,bl\n00000250  6f:77:66:69:73:68:2d:63:62:63:00:00:00:8d:63:68  owfish-cbc....ch\n00000260  61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35:40  acha20-poly1305@\n00000270  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73:31  openssh.com,aes1\n00000280  32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74  28-ctr,aes192-ct\n00000290  72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65:73  r,aes256-ctr,aes\n000002a0  31:32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68:2e  128-gcm@openssh.\n000002b0  63:6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40:6f  com,aes256-gcm@o\n000002c0  70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73:31:32  penssh.com,aes12\n000002d0  38:2d:63:62:63:2c:33:64:65:73:2d:63:62:63:2c:62  8-cbc,3des-cbc,b\n000002e0  6c:6f:77:66:69:73:68:2d:63:62:63:00:00:00:eb:75  lowfish-cbc....u\n000002f0  6d:61:63:2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73  mac-64-etm@opens\n00000300  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d  sh.com,umac-128-\n00000310  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000320  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:65:74  hmac-sha2-256-et\n00000330  6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d  m@openssh.com,hm\n00000340  61:63:2d:73:68:61:32:2d:35:31:32:2d:65:74:6d:40  ac-sha2-512-etm@\n00000350  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n00000360  2d:73:68:61:31:2d:65:74:6d:40:6f:70:65:6e:73:73  -sha1-etm@openss\n00000370  68:2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70  h.com,umac-64@op\n00000380  65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31  enssh.com,umac-1\n00000390  32:38:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  28@openssh.com,h\n000003a0  6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61  mac-sha2-256,hma\n000003b0  63:2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63:2d  c-sha2-512,hmac-\n000003c0  6d:64:35:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d  md5,hmac-sha1,hm\n000003d0  61:63:2d:73:68:61:31:2d:39:36:00:00:00:eb:75:6d  ac-sha1-96....um\n000003e0  61:63:2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73:73  ac-64-etm@openss\n000003f0  68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d:65  h.com,umac-128-e\n00000400  74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  tm@openssh.com,h\n00000410  6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:65:74:6d  mac-sha2-256-etm\n00000420  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61  @openssh.com,hma\n00000430  63:2d:73:68:61:32:2d:35:31:32:2d:65:74:6d:40:6f  c-sha2-512-etm@o\n00000440  70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d  penssh.com,hmac-\n00000450  73:68:61:31:2d:65:74:6d:40:6f:70:65:6e:73:73:68  sha1-etm@openssh\n00000460  2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70:65  .com,umac-64@ope\n00000470  6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32  nssh.com,umac-12\n00000480  38:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d  8@openssh.com,hm\n00000490  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n000004a0  2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63:2d:6d  -sha2-512,hmac-m\n000004b0  64:35:2c:68:6d:61:63:2d:73:68:61:31:2c:68:6d:61  d5,hmac-sha1,hma\n000004c0  63:2d:73:68:61:31:2d:39:36:00:00:00:1a:6e:6f:6e  c-sha1-96....non\n000004d0  65:2c:7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63  e,zlib@openssh.c\n000004e0  6f:6d:2c:7a:6c:69:62:00:00:00:1a:6e:6f:6e:65:2c  om,zlib....none,\n000004f0  7a:6c:69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  zlib@openssh.com\n00000500  2c:7a:6c:69:62:00:00:00:00:00:00:00:00:00:00:00  ,zlib...........\n00000510  00:00                                            ..\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0242, network: 0s)\n00000000  00:00:00:81:00:c2:b9:15:45:e9:f6:75:33:0e:65:11  ........E..u3.e.\n00000010  b5:7e:87:4d:f0:2a:4d:7e:64:33:e9:14:e6:5d:3d:c8  .~.M.*M~d3...]=.\n00000020  a1:ce:2c:c3:05:4b:9e:a9:87:fa:e0:22:32:9b:8d:33  ..,..K.....\"2..3\n00000030  10:6f:ab:4e:cb:0d:49:f9:4e:88:cf:47:76:b7:42:f6  .o.N..I.N..Gv.B.\n00000040  a3:83:4f:2c:25:ab:3d:fb:60:a0:ee:12:f2:c2:5d:87  ..O,%.=.`.....].\n00000050  c9:71:f0:2f:f3:f5:58:da:01:85:c3:53:92:db:ab:f0  .q./..X....S....\n00000060  fd:f4:7c:45:95:e6:51:da:bd:7d:56:0b:5b:58:ab:8a  ..|E..Q..}V.[X..\n00000070  e7:0b:ea:e1:9a:a3:b3:7f:e9:66:f6:ed:81:18:95:56  .........f.....V\n00000080  8a:92:66:27:5b                                   ..f'[\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0559, network: 0.0558s)\n00000000  00:00:00:95:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:01:23:00:00:00:81:00:db:32:59:c7:a5:64:48  ...#......2Y..dH\n00000020  90:b5:e1:22:0b:aa:fc:cb:89:1d:ef:f1:e4:b4:0f:b6  ...\"............\n00000030  6c:ec:2e:fb:ef:5c:83:c1:af:74:51:6f:09:92:12:b6  l.......tQo....\n00000040  dd:d9:3f:1b:c4:7b:e2:47:5c:59:81:0e:9f:79:02:4a  ..?..{.G\\Y...y.J\n00000050  bf:f6:af:3f:94:b5:84:e1:65:e5:94:6b:91:7a:05:c4  ...?....e..k.z..\n00000060  ff:5f:91:b0:87:54:40:97:0e:44:4b:19:d1:af:e8:62  ._...T@..DK....b\n00000070  66:16:0b:23:b0:62:bd:52:28:e4:4c:de:70:8b:34:28  f..#.b.R(.L.p.4(\n00000080  4a:23:31:15:24:5c:8f:82:94:72:1c:c9:70:58:ea:0a  J#1.$...r..pX..\n00000090  df:95:01:60:8d:9a:61:14:cb:00:00:00:80:71:bc:bd  ...`..a......q..\n000000a0  dd:02:2d:7f:6a:68:f6:16:07:cf:02:98:24:12:fc:0b  ..-.jh......$...\n000000b0  da:02:4f:cc:13:13:c1:6a:ca:7a:a9:de:06:8a:e3:4c  ..O....j.z.....L\n000000c0  82:37:83:58:4f:54:ad:f9:7e:1a:82:d4:93:08:bb:cf  .7.XOT..~.......\n000000d0  74:5e:50:68:3c:95:b4:32:40:b1:1f:a3:22:2e:fe:a6  t^Ph...2@...\"...\n000000e0  2c:e9:22:c1:72:14:6a:1c:fb:45:55:e4:be:1a:2d:53  ,.\".r.j..EU...-S\n000000f0  46:94:2f:2d:c8:42:e5:6d:cc:fa:78:76:b5:56:8d:05  F./-.B.m..xv.V..\n00000100  03:39:68:a6:6f:a2:57:64:a3:02:01:68:2f:85:0e:fd  .9h.o.Wd...h/...\n00000110  46:d7:d0:f0:ec:86:ca:2b:e4:c2:07:a5:55:00:00:00  F......+....U...\n00000120  8f:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:80  .....ssh-rsa....\n00000130  31:98:e4:cb:45:63:2b:4d:dd:aa:d8:ce:c2:7f:10:8a  1...Ec+M........\n00000140  8b:c3:29:14:51:2a:e2:86:21:ac:75:00:94:b4:b9:03  ..).Q..!.u.....\n00000150  84:23:90:32:37:36:7d:4e:ab:8f:be:7b:eb:f5:ea:9b  .#.276}N...{....\n00000160  fa:68:b7:1c:81:74:f5:a8:ec:85:44:75:b2:ba:1b:4d  .h...t....Du...M\n00000170  78:1b:c4:fd:18:1e:8b:7c:02:73:69:98:ce:a0:fc:34  x......|.si....4\n00000180  df:07:26:0c:4f:25:1c:38:52:16:eb:0b:bb:45:d7:81  ..&.O%.8R....E..\n00000190  11:63:40:1b:1b:ab:70:68:69:4c:ee:cf:8f:18:c8:be  .c@...phiL......\n000001a0  07:27:42:03:66:b1:89:e4:18:f0:84:eb:2a:27:8d:04  .'B.f.......'..\n\n```. Yeah sure it's from Strato\nHost: sftp.hidrive.strato.com\nPort: 22\nhttps://www.strato.com/faq/en_us/online-storage-hidrive/what-are-the-paths-for-ftp-smb-webdav-rsync-etc/. Hi yes this fixes the issue, thank you. ",
    "MarvinOS": "Indeed, this fixes the problem! Thanks for the quick reply! :-). ",
    "nemenemsrouge": "What are the permissions on your sftp remote directories? . ",
    "benjamin-rtblw": "```\nwww-data@my-server.com:~$ ls -la my_directory\ndrwxrwxr-x 11 www-data www-data 4096 Jan 18 11:30 .\n```. Hi,\nI added these instructions after the call to is_writable:\n```\n<?php\nrequire_once \"/usr/share/php/phpseclib.autoloader.php\";\nrequire_once DIR . \"/SFTP.php\";\ndefine('NET_SFTP_LOGGING', 2);\n$sftp = new Net_SFTP('my_server.com', 22);\n$key = new Crypt_RSA();\n$key->loadKey(file_get_contents(\"path_to_private_key\"));\n$sftp->login('www-data', $key);\necho 'Is the directory writable? ';\nvar_export($sftp->is_writable('my_directory'));\necho PHP_EOL;\necho 'SFTPErrors:', PHP_EOL;\nvar_export($sftp->getSFTPErrors());\necho 'LastSFTPError:', PHP_EOL;\nvar_export($sftp->getLastSFTPError());\necho 'SFTPLog:', PHP_EOL;\necho $sftp->getSFTPLog();\necho 'Is the upload succeeded? ';\nvar_export($sftp->put('my_directory/my_file.txt', 'test'));\necho PHP_EOL;\nI got that :\nIs the directory writable? false\nSFTPErrors:\narray (\n)LastSFTPError:\n''SFTPLog:\n-> NET_SFTP_INIT (0.0002s)\n00000000  00:00:00:03                                      ....\n<- NET_SFTP_VERSION (0.0029s)\n00000000  00:00:00:03:00:00:00:18:70:6f:73:69:78:2d:72:65  ........posix-re\n00000010  6e:61:6d:65:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  name@openssh.com\n00000020  00:00:00:01:31:00:00:00:13:73:74:61:74:76:66:73  ....1....statvfs\n00000030  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01  @openssh.com....\n00000040  32:00:00:00:14:66:73:74:61:74:76:66:73:40:6f:70  2....fstatvfs@op\n00000050  65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:32:00:00  enssh.com....2..\n00000060  00:14:68:61:72:64:6c:69:6e:6b:40:6f:70:65:6e:73  ..hardlink@opens\n00000070  73:68:2e:63:6f:6d:00:00:00:01:31:00:00:00:11:66  sh.com....1....f\n00000080  73:79:6e:63:40:6f:70:65:6e:73:73:68:2e:63:6f:6d  sync@openssh.com\n00000090  00:00:00:01:31                                   ....1\n-> NET_SFTP_REALPATH (0.0002s)\n00000000  00:00:00:01:2e                                   .....\n<- NET_SFTP_NAME (0.0005s)\n00000000  00:00:00:01:00:00:00:08:2f:76:61:72:2f:77:77:77  ......../var/www\n00000010  00:00:00:08:2f:76:61:72:2f:77:77:77:00:00:00:00  ..../var/www....\n-> NET_SFTP_OPEN (0.0002s)\n00000000  00:00:00:1c:2f:68:6f:6d:65:2f:62:63:6f:68:65:6e  ..../home/bcohen\n00000010  2f:74:65:73:74:73:2f:70:68:70:73:65:63:6c:69:62  /tests/phpseclib\n00000020  00:00:00:02:00:00:00:00                          ........\n<- NET_SFTP_STATUS (0.0005s)\n00000000  00:00:00:04:00:00:00:07:46:61:69:6c:75:72:65:00  ........Failure.\n00000010  00:00:00                                         ...\nIs the upload succeeded? true                                       ...\n```. :(\nok, I will try something else\nthank you for your help . ",
    "Hanashi": "Is fixed in master branch.. I tested it now with this code:\n```PHP\n<?php\ndefine('NET_SSH2_LOGGING', 2);\nrequire DIR . '/vendor/autoload.php';\nuse phpseclib\\Net\\SSH2;\n$ssh = new SSH2('localhost', 10022);\nif (!$ssh->login('serveradmin', 'password')) {\n    exit('Login Failed');\n}\n$ssh->exec('help');\necho $ssh->getLog();\n```\nThe result is NET_SSH2_MSG_CHANNEL_FAILURE. This is the log:\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:6c:69:62:73:73:68:5f:30  SSH-2.0-libssh_0\n00000010  2e:38:2e:34:0d:0a                                .8.4..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:29:0d  b_2.0 (openssl).\n00000020  0a                                               .\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0061, network: 0.0001s)\n00000000  78:49:1b:dd:95:f8:66:a7:40:dc:42:19:d5:ca:aa:e8  xI....f.@.B.....\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:29:72:73:61:2d:73:68:61:32:2d:32  56...)rsa-sha2-2\n000000a0  35:36:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c  56,rsa-sha2-512,\n000000b0  73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00  ssh-rsa,ssh-dss.\n000000c0  00:00:d3:61:65:73:31:32:38:2d:63:74:72:2c:61:65  ...aes128-ctr,ae\n000000d0  73:31:39:32:2d:63:74:72:2c:61:65:73:32:35:36:2d  s192-ctr,aes256-\n000000e0  63:74:72:2c:74:77:6f:66:69:73:68:31:32:38:2d:63  ctr,twofish128-c\n000000f0  74:72:2c:74:77:6f:66:69:73:68:31:39:32:2d:63:74  tr,twofish192-ct\n00000100  72:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:74:72  r,twofish256-ctr\n00000110  2c:61:65:73:31:32:38:2d:63:62:63:2c:61:65:73:31  ,aes128-cbc,aes1\n00000120  39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63:62  92-cbc,aes256-cb\n00000130  63:2c:74:77:6f:66:69:73:68:31:32:38:2d:63:62:63  c,twofish128-cbc\n00000140  2c:74:77:6f:66:69:73:68:31:39:32:2d:63:62:63:2c  ,twofish192-cbc,\n00000150  74:77:6f:66:69:73:68:32:35:36:2d:63:62:63:2c:74  twofish256-cbc,t\n00000160  77:6f:66:69:73:68:2d:63:62:63:2c:62:6c:6f:77:66  wofish-cbc,blowf\n00000170  69:73:68:2d:63:74:72:2c:62:6c:6f:77:66:69:73:68  ish-ctr,blowfish\n00000180  2d:63:62:63:2c:33:64:65:73:2d:63:74:72:2c:33:64  -cbc,3des-ctr,3d\n00000190  65:73:2d:63:62:63:00:00:00:d3:61:65:73:31:32:38  es-cbc....aes128\n000001a0  2d:63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c  -ctr,aes192-ctr,\n000001b0  61:65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69  aes256-ctr,twofi\n000001c0  73:68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73  sh128-ctr,twofis\n000001d0  68:31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68  h192-ctr,twofish\n000001e0  32:35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63  256-ctr,aes128-c\n000001f0  62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65  bc,aes192-cbc,ae\n00000200  73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68  s256-cbc,twofish\n00000210  31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  128-cbc,twofish1\n00000220  39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35  92-cbc,twofish25\n00000230  36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62  6-cbc,twofish-cb\n00000240  63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62  c,blowfish-ctr,b\n00000250  6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73  lowfish-cbc,3des\n00000260  2d:63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00  -ctr,3des-cbc...\n00000270  39:68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68  9hmac-sha2-256,h\n00000280  6d:61:63:2d:73:68:61:31:2d:39:36:2c:68:6d:61:63  mac-sha1-96,hmac\n00000290  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39  -sha1,hmac-md5-9\n000002a0  36:2c:68:6d:61:63:2d:6d:64:35:00:00:00:39:68:6d  6,hmac-md5...9hm\n000002b0  61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63  ac-sha2-256,hmac\n000002c0  2d:73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68  -sha1-96,hmac-sh\n000002d0  61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68  a1,hmac-md5-96,h\n000002e0  6d:61:63:2d:6d:64:35:00:00:00:04:6e:6f:6e:65:00  mac-md5....none.\n000002f0  00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00:00  ...none.........\n00000300  00:00:00:00                                      ....\n<- NET_SSH2_MSG_KEXINIT (since last: 0, network: 0s)\n00000000  2a:9e:8f:2f:d8:2b:d3:85:b9:8b:0b:32:fc:75:6c:83  *../.+.....2.ul.\n00000010  00:00:00:ab:65:63:64:68:2d:73:68:61:32:2d:6e:69  ....ecdh-sha2-ni\n00000020  73:74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32  stp256,ecdh-sha2\n00000030  2d:6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73  -nistp384,ecdh-s\n00000040  68:61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66  ha2-nistp521,dif\n00000050  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n00000060  70:31:36:2d:73:68:61:35:31:32:2c:64:69:66:66:69  p16-sha512,diffi\n00000070  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31  e-hellman-group1\n00000080  38:2d:73:68:61:35:31:32:2c:64:69:66:66:69:65:2d  8-sha512,diffie-\n00000090  68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:34:2d  hellman-group14-\n000000a0  73:68:61:31:2c:64:69:66:66:69:65:2d:68:65:6c:6c  sha1,diffie-hell\n000000b0  6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:00  man-group1-sha1.\n000000c0  00:00:21:72:73:61:2d:73:68:61:32:2d:35:31:32:2c  ..!rsa-sha2-512,\n000000d0  72:73:61:2d:73:68:61:32:2d:32:35:36:2c:73:73:68  rsa-sha2-256,ssh\n000000e0  2d:72:73:61:00:00:00:75:63:68:61:63:68:61:32:30  -rsa...uchacha20\n000000f0  2d:70:6f:6c:79:31:33:30:35:40:6f:70:65:6e:73:73  -poly1305@openss\n00000100  68:2e:63:6f:6d:2c:61:65:73:32:35:36:2d:63:74:72  h.com,aes256-ctr\n00000110  2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:31  ,aes192-ctr,aes1\n00000120  32:38:2d:63:74:72:2c:61:65:73:32:35:36:2d:63:62  28-ctr,aes256-cb\n00000130  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n00000140  31:32:38:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68  128-cbc,blowfish\n00000150  2d:63:62:63:2c:33:64:65:73:2d:63:62:63:00:00:00  -cbc,3des-cbc...\n00000160  75:63:68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33  uchacha20-poly13\n00000170  30:35:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61  05@openssh.com,a\n00000180  65:73:32:35:36:2d:63:74:72:2c:61:65:73:31:39:32  es256-ctr,aes192\n00000190  2d:63:74:72:2c:61:65:73:31:32:38:2d:63:74:72:2c  -ctr,aes128-ctr,\n000001a0  61:65:73:32:35:36:2d:63:62:63:2c:61:65:73:31:39  aes256-cbc,aes19\n000001b0  32:2d:63:62:63:2c:61:65:73:31:32:38:2d:63:62:63  2-cbc,aes128-cbc\n000001c0  2c:62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64  ,blowfish-cbc,3d\n000001d0  65:73:2d:63:62:63:00:00:00:25:68:6d:61:63:2d:73  es-cbc...%hmac-s\n000001e0  68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61  ha2-256,hmac-sha\n000001f0  32:2d:35:31:32:2c:68:6d:61:63:2d:73:68:61:31:00  2-512,hmac-sha1.\n00000200  00:00:25:68:6d:61:63:2d:73:68:61:32:2d:32:35:36  ..%hmac-sha2-256\n00000210  2c:68:6d:61:63:2d:73:68:61:32:2d:35:31:32:2c:68  ,hmac-sha2-512,h\n00000220  6d:61:63:2d:73:68:61:31:00:00:00:04:6e:6f:6e:65  mac-sha1....none\n00000230  00:00:00:04:6e:6f:6e:65:00:00:00:00:00:00:00:00  ....none........\n00000240  00:00:00:00:00                                   .....\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0262, network: 0s)\n00000000  00:00:00:81:00:cf:8e:24:14:09:31:b7:d4:c1:aa:a0  .......$..1.....\n00000010  44:62:47:09:27:d0:36:cb:c9:f2:27:6b:3f:d6:f2:38  DbG.'.6...'k?..8\n00000020  0c:c4:43:fe:b1:a4:45:49:61:58:6e:09:e8:ae:3a:58  ..C...EIaXn...:X\n00000030  a6:cd:1f:f5:6b:99:51:18:a7:1e:3f:c2:2b:66:27:a8  ....k.Q...?.+f'.\n00000040  df:a0:2a:78:ab:78:4f:88:83:f2:6b:c3:2e:f0:62:31  ..*x.xO...k...b1\n00000050  d3:db:97:fe:62:e3:61:e5:8d:2f:a4:4a:14:3f:98:fa  ....b.a../.J.?..\n00000060  b9:80:d1:b4:a5:4b:c0:58:96:af:a1:3e:20:d0:1f:f2  .....K.X...> ...\n00000070  dc:bf:f4:89:47:5c:19:72:1e:8c:14:07:cd:dc:a6:ee  ....G.r........\n00000080  4c:f7:ce:5a:49                                   L..ZI\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0493, network: 0.0493s)\n00000000  00:00:02:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:02:01:00:83:04:7a:64:4d  .............zdM\n00000020  1b:72:61:ec:85:64:4c:02:10:51:17:50:dc:08:9d:94  .ra..dL..Q.P....\n00000030  c0:21:70:8a:8e:29:58:ef:e8:4e:8f:22:08:f5:0e:91  .!p..)X..N.\"....\n00000040  8e:6c:8b:5d:8a:54:85:71:2d:5f:6f:f7:62:73:26:55  .l.].T.q-o.bs&U\n00000050  ad:22:64:b9:0e:63:39:cf:5f:fa:90:cd:1b:e3:d5:8f  .\"d..c9........\n00000060  13:fb:17:41:c5:0e:31:da:9c:f2:a6:7a:99:87:6a:a7  ...A..1....z..j.\n00000070  68:19:9f:9c:02:98:95:5b:9f:76:40:c5:22:83:be:31  h......[.v@.\"..1\n00000080  e1:ba:8d:8b:55:df:67:0a:ac:46:53:6c:6b:8e:a2:6d  ....U.g..FSlk..m\n00000090  2f:30:22:d8:e1:17:ba:70:83:de:cf:98:c6:88:c9:bb  /0\"....p........\n000000a0  74:cb:d2:12:58:4e:3c:1e:95:0e:df:2b:0b:97:3f:c2  t...XN.....+..?.\n000000b0  02:a8:04:d8:dd:56:a0:2f:df:6d:82:13:f4:ea:fb:98  .....V./.m......\n000000c0  4d:36:72:2d:3e:c4:ec:52:d0:e7:da:df:b7:ac:e3:f5  M6r->..R........\n000000d0  4e:30:8b:23:21:bd:69:f3:df:f4:cf:96:f5:5f:20:7f  N0.#!.i...... .\n000000e0  86:51:77:2e:93:44:2a:a3:1e:9b:42:3d:cc:be:23:b5  .Qw..D*...B=..#.\n000000f0  aa:99:53:46:3c:cf:50:d9:17:48:00:69:89:af:5d:63  ..SF..P..H.i..]c\n00000100  ff:d0:eb:e1:a3:a0:c4:f0:9f:cf:2e:89:42:49:45:30  ............BIE0\n00000110  60:cc:42:3f:d0:89:39:1a:34:de:66:5b:d9:de:d5:71  .B?..9.4.f[...q\n00000120  13:9e:02:bb:d2:68:81:f5:37:5e:00:c2:d6:06:0a:58  .....h..7^.....X\n00000130  5f:50:b6:c6:0b:31:cd:dd:57:df:3e:a7:24:f2:c1:3e  _P...1..W.>.$..>\n00000140  af:2f:02:7e:d5:52:93:df:e9:f8:57:6b:a4:fd:9d:7f  ./.~.R....Wk....\n00000150  ef:f8:73:39:32:bc:c7:b0:99:5c:e6:c7:a7:1e:0a:4c  ..s92....\\.....L\n00000160  0b:c1:f4:c9:70:6a:31:07:33:89:db:65:ec:9c:53:dd  ....pj1.3..e..S.\n00000170  46:a7:2f:2d:02:12:f5:43:b1:65:65:87:a9:10:e5:a2  F./-...C.ee.....\n00000180  00:cf:5b:26:0e:2e:be:be:28:52:45:41:2b:b6:04:38  ..[&....(REA+..8\n00000190  d7:d5:55:fc:7d:8d:b7:67:1c:fb:a2:0b:63:11:08:f6  ..U.}..g....c...\n000001a0  05:e5:ba:c3:da:0b:03:52:0a:f6:43:46:2a:c8:b9:12  .......R..CF*...\n000001b0  ea:2b:53:a3:f5:6e:75:40:ea:dd:bc:be:c2:24:97:cb  .+S..nu@.....$..\n000001c0  b3:15:00:2d:61:80:8b:a3:b9:f6:42:94:77:96:d1:f6  ...-a.....B.w...\n000001d0  23:de:fb:26:e9:16:05:9a:53:1b:49:51:22:a1:bc:3c  #..&....S.IQ\"...\n000001e0  9f:49:fb:a0:ae:76:f8:28:78:6f:7b:81:7e:10:62:ce  .I...v.(xo{.~.b.\n000001f0  82:5e:2d:3c:ad:cf:f1:99:7d:0e:83:b1:3d:a3:6f:17  .^-.....}...=.o.\n00000200  06:a7:13:e3:a0:33:ba:f5:b9:8b:0d:63:a0:d2:5f:4a  .....3.....c.._J\n00000210  12:91:85:5e:ba:f2:d8:94:79:4c:05:00:00:00:81:00  ...^....yL......\n00000220  88:7e:75:de:98:0e:09:8f:d0:fe:7d:54:a7:a6:71:3e  .~u.......}T..q>\n00000230  2d:4c:96:98:e8:73:c8:1c:9f:9b:e0:75:64:1f:95:76  -L...s.....ud..v\n00000240  6d:72:36:69:2c:a9:bd:af:87:cd:57:74:87:bd:8b:3f  mr6i,.....Wt...?\n00000250  a1:2f:35:ba:d9:ab:a3:79:80:7d:63:ed:44:e1:2c:a7  ./5....y.}c.D.,.\n00000260  10:a4:f0:23:8c:76:7e:28:4c:14:71:cf:b2:db:37:d4  ...#.v~(L.q...7.\n00000270  51:2b:d0:3f:6f:35:64:bc:cb:07:ef:72:dc:91:e7:7e  Q+.?o5d....r...~\n00000280  2c:45:a1:9d:1d:41:dd:7d:9f:2c:7f:51:27:66:46:e2  ,E...A.}.,.Q'fF.\n00000290  e4:57:a3:e4:60:3d:73:2d:72:11:19:12:6f:a8:92:33  .W..=s-r...o..3\n000002a0  00:00:02:0f:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n000002b0  00:02:00:76:25:46:45:04:08:7b:44:84:e7:b2:39:c6  ...v%FE..{D...9.\n000002c0  ea:0c:77:fd:54:9c:70:73:dc:f8:88:32:46:17:0b:3f  ..w.T.ps...2F..?\n000002d0  28:6a:95:13:2c:99:e6:c8:fb:9f:61:0d:38:88:d6:bc  (j..,.....a.8...\n000002e0  f9:a9:c4:8a:49:db:a4:5a:17:07:22:f4:af:76:93:84  ....I..Z..\"..v..\n000002f0  ce:f8:b8:ab:d9:d9:d0:5f:71:38:9e:94:f5:b0:d4:a0  ......._q8......\n00000300  75:4f:8d:cc:bb:a8:20:86:63:a5:96:ee:e7:2e:42:7e  uO.... .c.....B~\n00000310  a3:51:b8:d9:1b:33:aa:27:23:fc:2b:c4:35:d2:55:73  .Q...3.'#.+.5.Us\n00000320  01:70:b2:2f:54:5d:e7:55:c8:94:89:7c:4d:2c:46:69  .p./T].U...|M,Fi\n00000330  5f:3a:68:eb:70:81:50:37:e0:eb:75:50:73:5d:c1:c7  :h.p.P7..uPs]..\n00000340  75:4c:12:c1:a2:52:6a:3e:79:07:29:66:c2:cd:be:2c  uL...Rj>y.)f...,\n00000350  59:bf:1e:c8:55:2d:67:a4:2c:3f:1a:d6:4f:ca:24:f7  Y...U-g.,?..O.$.\n00000360  1e:ed:5d:03:d9:9e:ab:45:af:77:27:a2:3f:7e:94:67  ..]....E.w'.?~.g\n00000370  94:b5:b3:eb:a9:a2:0d:aa:d0:15:22:b3:6a:54:1a:5c  ..........\".jT.\\\n00000380  34:a4:59:90:2f:9a:e4:d8:5b:1a:9b:ca:89:cb:5a:7c  4.Y./...[.....Z|\n00000390  c8:0a:90:53:fa:23:53:98:d9:63:43:d2:75:7a:f2:20  ...S.#S..cC.uz. \n000003a0  8d:43:b1:8b:e4:67:9b:29:6c:06:ad:a9:5b:81:cb:d2  .C...g.)l...[...\n000003b0  7d:43:f7:48:7a:7e:35:52:08:0c:da:1f:13:fe:7b:65  }C.Hz~5R......{e\n000003c0  17:a5:7c:df:e7:51:47:8e:c8:b0:48:d8:1f:06:50:34  ..|..QG...H...P4\n000003d0  5c:c8:04:c1:57:c8:e6:97:d3:c6:63:2b:f7:98:ab:b9  ...W.....c+....\n000003e0  b1:e2:8e:64:d4:3a:1a:2e:15:39:66:be:6f:17:0a:20  ...d.:...9f.o.. \n000003f0  1d:57:b2:8b:e4:ab:b8:8d:3a:86:33:07:ad:34:bb:da  .W......:.3..4..\n00000400  42:7c:40:93:fd:66:be:5d:a2:4d:73:f6:97:a4:37:85  B|@..f.].Ms...7.\n00000410  a1:a7:5e:6e:67:2f:de:ce:13:ad:0c:98:d8:9d:33:42  ..^ng/........3B\n00000420  99:f4:35:00:46:0c:86:0e:76:fe:de:a7:a4:15:ce:11  ..5.F...v.......\n00000430  22:58:63:5e:9b:b8:30:ea:e8:80:54:78:b3:28:81:1a  \"Xc^..0...Tx.(..\n00000440  ff:79:8b:ad:ee:f6:51:d8:a7:51:0a:5c:6c:05:20:ff  .y....Q..Q.\\l. .\n00000450  2b:56:f1:b8:c9:25:1a:28:4c:5b:b0:e0:3b:a7:2c:14  +V...%.(L[..;.,.\n00000460  88:00:ed:54:be:fe:06:96:2d:f8:f3:eb:e8:9d:83:e0  ...T....-.......\n00000470  b5:9c:76:30:bd:01:b6:20:09:59:60:e6:ae:e7:3f:33  ..v0... .Y`...?3\n00000480  9e:72:40:f2:48:39:7a:2b:31:cb:27:cb:39:3c:47:d6  .r@.H9z+1.'.9.G.\n00000490  89:cc:ee:66:65:17:2e:9b:c8:50:52:fc:98:11:21:25  ...fe....PR...!%\n000004a0  e6:c7:02:ab:3d:69:0d:4c:1f:5a:38:20:3b:65:30:45  ....=i.L.Z8 ;e0E\n000004b0  7f:6e:b4                                         .n.\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0015, network: 0.0002s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0.0001s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0003, network: 0s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0003, network: 0.0003s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0, network: 0s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0004, network: 0.0004s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0, network: 0s)\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:01:7f  ....session.....\n00000010  ff:ff:ff:00:00:40:00                             .....@.\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0002, network: 0s)\n00000000  00:00:00:01:00:00:00:2b:00:00:7d:00:00:00:88:b8  .......+..}.....\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n00000000  00:00:00:2b:00:00:00:04:65:78:65:63:01:00:00:00  ...+....exec....\n00000010  04:68:65:6c:70                                   .help\n<- NET_SSH2_MSG_CHANNEL_FAILURE (since last: 0.0002, network: 0s)\n00000000  00:00:00:01                                      ....\n```. ",
    "AndreAntG": "I have take this part of code from this comment :\nhttps://github.com/phpseclib/phpseclib/issues/1117#issuecomment-295662545\nSo i need to include this Proxy-Authorization in the header following the username and password?\n@bantu . The proxy expects the host , port , user and password to connect. \nCan you help me? I still cant understand if my code is correct or no.\nMore details -----\nIm trying to connect to a SFTP server that my work network doesn't allow because of the main proxy. \nI need to use other proxy to connect to the internet outside my work to be able to upload a file.\n@bantu . @terrafrost  Hi , can you help me with this topic?. Hi @terrafrost  thanks for the reply.\nTo connect to the server in question i need to generate a SSH-2 RSA Key with PuTTY.\nI know can connect via WinSCP to the server in question but i specified the file key in question.\nDo i need to pass the key in the password field on the login or need to do in other way?. Thanks for the reply.\nYou really help me alot!!!!\nI will test and give you a feedback\n@terrafrost . @terrafrost  I have tested this and work very good.\nThanks for the support!!!\n. ",
    "stayallive": "Great, thanks!. ",
    "samfrjn11": "Hi,\nResult from getLog();\n```\n<-\n00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_\n00000010  37:2e:35:0d:0a                                   7.5..\n->\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\n00000010  62:5f:31:2e:30:0d:0a                             b_1.0..\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0299, network: 0.0001s)\n00000000  34:83:3d:45:49:4f:ca:a3:1d:ca:ab:a7:a0:85:f3:44  4.=EIO.........D\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi\n00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-\n00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di\n00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro\n00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2\n00000090  35:36:00:00:00:29:72:73:61:2d:73:68:61:32:2d:32  56...)rsa-sha2-2\n000000a0  35:36:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c  56,rsa-sha2-512,\n000000b0  73:73:68:2d:72:73:61:2c:73:73:68:2d:64:73:73:00  ssh-rsa,ssh-dss.\n000000c0  00:00:e9:61:72:63:66:6f:75:72:32:35:36:2c:61:72  ...arcfour256,ar\n000000d0  63:66:6f:75:72:31:32:38:2c:61:65:73:31:32:38:2d  cfour128,aes128-\n000000e0  63:74:72:2c:61:65:73:31:39:32:2d:63:74:72:2c:61  ctr,aes192-ctr,a\n000000f0  65:73:32:35:36:2d:63:74:72:2c:74:77:6f:66:69:73  es256-ctr,twofis\n00000100  68:31:32:38:2d:63:74:72:2c:74:77:6f:66:69:73:68  h128-ctr,twofish\n00000110  31:39:32:2d:63:74:72:2c:74:77:6f:66:69:73:68:32  192-ctr,twofish2\n00000120  35:36:2d:63:74:72:2c:61:65:73:31:32:38:2d:63:62  56-ctr,aes128-cb\n00000130  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes\n00000140  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1\n00000150  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19\n00000160  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256\n00000170  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc\n00000180  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl\n00000190  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-\n000001a0  63:74:72:2c:33:64:65:73:2d:63:62:63:00:00:00:e9  ctr,3des-cbc....\n000001b0  61:72:63:66:6f:75:72:32:35:36:2c:61:72:63:66:6f  arcfour256,arcfo\n000001c0  75:72:31:32:38:2c:61:65:73:31:32:38:2d:63:74:72  ur128,aes128-ctr\n000001d0  2c:61:65:73:31:39:32:2d:63:74:72:2c:61:65:73:32  ,aes192-ctr,aes2\n000001e0  35:36:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:32  56-ctr,twofish12\n000001f0  38:2d:63:74:72:2c:74:77:6f:66:69:73:68:31:39:32  8-ctr,twofish192\n00000200  2d:63:74:72:2c:74:77:6f:66:69:73:68:32:35:36:2d  -ctr,twofish256-\n00000210  63:74:72:2c:61:65:73:31:32:38:2d:63:62:63:2c:61  ctr,aes128-cbc,a\n00000220  65:73:31:39:32:2d:63:62:63:2c:61:65:73:32:35:36  es192-cbc,aes256\n00000230  2d:63:62:63:2c:74:77:6f:66:69:73:68:31:32:38:2d  -cbc,twofish128-\n00000240  63:62:63:2c:74:77:6f:66:69:73:68:31:39:32:2d:63  cbc,twofish192-c\n00000250  62:63:2c:74:77:6f:66:69:73:68:32:35:36:2d:63:62  bc,twofish256-cb\n00000260  63:2c:74:77:6f:66:69:73:68:2d:63:62:63:2c:62:6c  c,twofish-cbc,bl\n00000270  6f:77:66:69:73:68:2d:63:74:72:2c:62:6c:6f:77:66  owfish-ctr,blowf\n00000280  69:73:68:2d:63:62:63:2c:33:64:65:73:2d:63:74:72  ish-cbc,3des-ctr\n00000290  2c:33:64:65:73:2d:63:62:63:00:00:00:39:68:6d:61  ,3des-cbc...9hma\n000002a0  63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61:63:2d  c-sha2-256,hmac-\n000002b0  73:68:61:31:2d:39:36:2c:68:6d:61:63:2d:73:68:61  sha1-96,hmac-sha\n000002c0  31:2c:68:6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d  1,hmac-md5-96,hm\n000002d0  61:63:2d:6d:64:35:00:00:00:39:68:6d:61:63:2d:73  ac-md5...9hmac-s\n000002e0  68:61:32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61  ha2-256,hmac-sha\n000002f0  31:2d:39:36:2c:68:6d:61:63:2d:73:68:61:31:2c:68  1-96,hmac-sha1,h\n00000300  6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d  mac-md5-96,hmac-\n00000310  6d:64:35:00:00:00:04:6e:6f:6e:65:00:00:00:04:6e  md5....none....n\n00000320  6f:6e:65:00:00:00:00:00:00:00:00:00:00:00:00:00  one.............\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0003, network: 0.0001s)\n00000000  40:7d:86:ad:83:62:31:69:13:21:70:c2:34:66:21:f8  @}...b1i.!p.4f!.\n00000010  00:00:01:02:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\n00000020  68:61:32:35:36:2c:63:75:72:76:65:32:35:35:31:39  ha256,curve25519\n00000030  2d:73:68:61:32:35:36:40:6c:69:62:73:73:68:2e:6f  -sha256@libssh.o\n00000040  72:67:2c:65:63:64:68:2d:73:68:61:32:2d:6e:69:73  rg,ecdh-sha2-nis\n00000050  74:70:32:35:36:2c:65:63:64:68:2d:73:68:61:32:2d  tp256,ecdh-sha2-\n00000060  6e:69:73:74:70:33:38:34:2c:65:63:64:68:2d:73:68  nistp384,ecdh-sh\n00000070  61:32:2d:6e:69:73:74:70:35:32:31:2c:64:69:66:66  a2-nistp521,diff\n00000080  69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70  ie-hellman-group\n00000090  2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32:35:36  -exchange-sha256\n000000a0  2c:64:69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d  ,diffie-hellman-\n000000b0  67:72:6f:75:70:31:36:2d:73:68:61:35:31:32:2c:64  group16-sha512,d\n000000c0  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\n000000d0  6f:75:70:31:38:2d:73:68:61:35:31:32:2c:64:69:66  oup18-sha512,dif\n000000e0  66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75  fie-hellman-grou\n000000f0  70:31:34:2d:73:68:61:32:35:36:2c:64:69:66:66:69  p14-sha256,diffi\n00000100  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:31  e-hellman-group1\n00000110  34:2d:73:68:61:31:00:00:00:41:73:73:68:2d:72:73  4-sha1...Assh-rs\n00000120  61:2c:72:73:61:2d:73:68:61:32:2d:35:31:32:2c:72  a,rsa-sha2-512,r\n00000130  73:61:2d:73:68:61:32:2d:32:35:36:2c:65:63:64:73  sa-sha2-256,ecds\n00000140  61:2d:73:68:61:32:2d:6e:69:73:74:70:32:35:36:2c  a-sha2-nistp256,\n00000150  73:73:68:2d:65:64:32:35:35:31:39:00:00:00:6c:63  ssh-ed25519...lc\n00000160  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n00000170  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n00000180  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000190  74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65  tr,aes256-ctr,ae\n000001a0  73:31:32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68  s128-gcm@openssh\n000001b0  2e:63:6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40  .com,aes256-gcm@\n000001c0  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:6c:63  openssh.com...lc\n000001d0  68:61:63:68:61:32:30:2d:70:6f:6c:79:31:33:30:35  hacha20-poly1305\n000001e0  40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:61:65:73  @openssh.com,aes\n000001f0  31:32:38:2d:63:74:72:2c:61:65:73:31:39:32:2d:63  128-ctr,aes192-c\n00000200  74:72:2c:61:65:73:32:35:36:2d:63:74:72:2c:61:65  tr,aes256-ctr,ae\n00000210  73:31:32:38:2d:67:63:6d:40:6f:70:65:6e:73:73:68  s128-gcm@openssh\n00000220  2e:63:6f:6d:2c:61:65:73:32:35:36:2d:67:63:6d:40  .com,aes256-gcm@\n00000230  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:d5:75  openssh.com....u\n00000240  6d:61:63:2d:36:34:2d:65:74:6d:40:6f:70:65:6e:73  mac-64-etm@opens\n00000250  73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31:32:38:2d  sh.com,umac-128-\n00000260  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000270  68:6d:61:63:2d:73:68:61:32:2d:32:35:36:2d:65:74  hmac-sha2-256-et\n00000280  6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d  m@openssh.com,hm\n00000290  61:63:2d:73:68:61:32:2d:35:31:32:2d:65:74:6d:40  ac-sha2-512-etm@\n000002a0  6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63  openssh.com,hmac\n000002b0  2d:73:68:61:31:2d:65:74:6d:40:6f:70:65:6e:73:73  -sha1-etm@openss\n000002c0  68:2e:63:6f:6d:2c:75:6d:61:63:2d:36:34:40:6f:70  h.com,umac-64@op\n000002d0  65:6e:73:73:68:2e:63:6f:6d:2c:75:6d:61:63:2d:31  enssh.com,umac-1\n000002e0  32:38:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:68  28@openssh.com,h\n000002f0  6d:61:63:2d:73:68:61:32:2d:32:35:36:2c:68:6d:61  mac-sha2-256,hma\n00000300  63:2d:73:68:61:32:2d:35:31:32:2c:68:6d:61:63:2d  c-sha2-512,hmac-\n00000310  73:68:61:31:00:00:00:d5:75:6d:61:63:2d:36:34:2d  sha1....umac-64-\n00000320  65:74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c  etm@openssh.com,\n00000330  75:6d:61:63:2d:31:32:38:2d:65:74:6d:40:6f:70:65  umac-128-etm@ope\n00000340  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh\n00000350  61:32:2d:32:35:36:2d:65:74:6d:40:6f:70:65:6e:73  a2-256-etm@opens\n00000360  73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:32  sh.com,hmac-sha2\n00000370  2d:35:31:32:2d:65:74:6d:40:6f:70:65:6e:73:73:68  -512-etm@openssh\n00000380  2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61:31:2d:65  .com,hmac-sha1-e\n00000390  74:6d:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:2c:75  tm@openssh.com,u\n000003a0  6d:61:63:2d:36:34:40:6f:70:65:6e:73:73:68:2e:63  mac-64@openssh.c\n000003b0  6f:6d:2c:75:6d:61:63:2d:31:32:38:40:6f:70:65:6e  om,umac-128@open\n000003c0  73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68:61  ssh.com,hmac-sha\n000003d0  32:2d:32:35:36:2c:68:6d:61:63:2d:73:68:61:32:2d  2-256,hmac-sha2-\n000003e0  35:31:32:2c:68:6d:61:63:2d:73:68:61:31:00:00:00  512,hmac-sha1...\n000003f0  15:6e:6f:6e:65:2c:7a:6c:69:62:40:6f:70:65:6e:73  .none,zlib@opens\n00000400  73:68:2e:63:6f:6d:00:00:00:15:6e:6f:6e:65:2c:7a  sh.com....none,z\n00000410  6c:69:62:40:6f:70:65:6e:73:73:68:2e:63:6f:6d:00  lib@openssh.com.\n00000420  00:00:00:00:00:00:00:00:00:00:00:00              ............\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 5.3832, network: 0.0001s)\n00000000  00:00:01:00:59:f9:1f:ee:6b:b5:25:26:b2:85:4d:ff  ....Y...k.%&..M.\n00000010  a0:1e:84:52:0f:81:35:7c:86:d5:13:5b:93:9c:43:56  ...R..5|...[..CV\n00000020  cc:0b:fe:05:14:24:ed:91:b8:07:5c:46:cf:c2:85:b5  .....$....\\F....\n00000030  6c:e8:e4:f3:ce:ff:14:5c:37:8e:48:dc:1b:0e:e5:71  l......\\7.H....q\n00000040  de:10:9d:4b:fb:28:90:1b:e2:40:9d:4d:d8:44:be:20  ...K.(...@.M.D. \n00000050  ad:0f:83:37:0a:33:bd:37:6d:9b:6b:f6:81:08:b3:dd  ...7.3.7m.k.....\n00000060  c2:f6:9c:d6:68:b3:a7:35:58:80:44:74:e7:34:91:4e  ....h..5X.Dt.4.N\n00000070  2e:61:0c:82:d0:d3:15:93:b8:aa:a0:31:b6:dc:bb:97  .a.........1....\n00000080  b5:43:4e:50:e9:f5:9e:5e:f6:83:e4:9c:f2:d4:07:3a  .CNP...^.......:\n00000090  ef:64:76:a8:b2:bb:c0:ad:f4:f2:14:69:29:97:88:18  .dv........i)...\n000000a0  45:30:dc:05:2c:29:c6:37:98:e3:fc:43:67:fb:71:45  E0..,).7...Cg.qE\n000000b0  4e:ac:74:e8:51:89:97:2b:20:ed:00:db:5d:62:73:a1  N.t.Q..+ ...]bs.\n000000c0  c8:0c:c7:45:5c:47:46:30:20:ff:c9:af:58:3a:52:f0  ...E\\GF0 ...X:R.\n000000d0  2a:1b:8c:1b:5b:e0:28:89:fe:5d:e3:c1:bc:80:53:35  ...[.(..]....S5\n000000e0  7f:75:e0:53:47:fa:64:26:07:4d:c5:4c:76:4e:2a:b8  .u.SG.d&.M.LvN.\n000000f0  30:11:9b:b1:03:c9:ba:da:fc:ec:3f:62:88:c2:e2:59  0.........?b...Y\n00000100  b1:c8:13:b8                                      ....\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.016, network: 0.0159s)\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\n00000010  00:00:03:01:00:01:00:00:01:01:00:a3:3f:74:79:f1  ............?ty.\n00000020  07:3e:8c:7c:fd:e7:e9:98:ba:8f:88:7a:16:36:3a:a8  .>.|.......z.6:.\n00000030  77:42:d3:cc:f2:f4:e6:ac:6c:65:6e:bf:3d:35:13:9e  wB......len.=5..\n00000040  cd:27:2f:48:3e:75:87:10:4f:59:ea:43:f0:bf:ef:b8  .'/H>u..OY.C....\n00000050  06:07:8f:66:cf:14:a8:e1:d2:4c:97:e2:92:32:d2:88  ...f.....L...2..\n00000060  fe:5f:67:63:0a:e1:d6:4f:09:b1:d6:3d:9b:62:7e:6e  ._gc...O...=.b~n\n00000070  63:7a:00:ea:ee:a8:54:6b:51:69:fb:f2:ba:da:3f:5a  cz....TkQi....?Z\n00000080  e7:6e:71:be:c6:1e:d5:36:0c:66:f7:8c:ec:a2:ee:8f  .nq....6.f......\n00000090  16:ee:ac:5c:1b:f0:4f:ca:82:6f:bf:85:20:cf:82:cf  .....O..o.. ...\n000000a0  35:4b:1d:21:b3:4f:16:9d:18:51:34:4a:3a:e1:98:95  5K.!.O...Q4J:...\n000000b0  ab:a3:e3:88:c2:b6:b3:d3:6c:03:11:a8:50:3b:25:99  ........l...P;%.\n000000c0  42:d5:8d:33:fe:6a:b7:75:cc:94:be:c1:1e:6b:b8:46  B..3.j.u.....k.F\n000000d0  9d:ed:eb:40:a7:4e:88:04:9f:57:ba:f5:17:99:29:98  ...@.N...W....).\n000000e0  28:51:05:7c:e1:6f:81:7c:6f:1f:f1:da:24:b0:78:53  (Q.|.o.|o...$.xS\n000000f0  f2:48:b6:67:f1:1f:6f:64:2a:3d:c4:44:4e:ee:f0:4d  .H.g..od=.DN..M\n00000100  60:44:c8:8f:a6:c3:41:55:53:3e:e3:e3:38:3a:21:29  D....AUS>..8:!)\n00000110  b8:e7:52:97:ad:82:fa:29:8c:57:2f:00:00:01:01:00  ..R....).W/.....\n00000120  da:35:a0:4b:13:ed:65:c2:39:e1:f3:df:95:d2:83:bf  .5.K..e.9.......\n00000130  61:c1:a1:5b:03:6d:12:65:10:b3:5e:a7:95:1f:37:6b  a..[.m.e..^...7k\n00000140  73:f7:67:cf:15:9e:f4:cf:a6:6f:15:c8:52:fc:40:a8  s.g......o..R.@.\n00000150  18:6b:4c:32:16:b7:9c:ab:fd:07:aa:10:59:f9:16:fd  .kL2........Y...\n00000160  5b:57:c3:ba:a8:3f:99:ff:39:a3:41:8d:3d:dc:20:46  [W...?..9.A.=. F\n00000170  fd:0b:76:8e:52:2d:e9:ea:b0:bf:f4:d9:a9:29:a3:02  ..v.R-.......)..\n00000180  56:16:c7:20:b7:8d:b5:92:7c:2c:92:1b:88:11:ba:43  V.. ....|,.....C\n00000190  5f:3c:59:06:88:8b:a1:54:fc:43:36:82:f0:58:d4:d2  _.Y....T.C6..X..\n000001a0  e7:26:3c:41:7e:53:13:5a:1f:01:3b:f1:1d:5e:32:fe  .&.A~S.Z..;..^2.\n000001b0  2a:47:26:e2:d7:57:f3:1e:00:35:ca:da:17:f2:e6:9f  *G&..W...5......\n000001c0  0f:24:2c:99:29:77:e1:89:a7:3f:82:6c:2d:e7:e7:6f  .$,.)w...?.l-..o\n000001d0  06:24:eb:99:53:ce:34:cd:5e:fb:95:72:a4:4c:7b:40  .$..S.4.^..r.L{@\n000001e0  47:28:d1:68:87:84:91:37:37:e7:d6:65:cd:3a:b2:b0  G(.h...77..e.:..\n000001f0  fa:67:68:72:e5:58:59:d5:27:c7:1a:73:63:6e:17:4d  .ghr.XY.'..scn.M\n00000200  8c:bd:3e:44:22:95:5b:21:06:1b:3b:65:cc:4f:39:de  ..>D\".[!..;e.O9.\n00000210  a4:6f:54:6a:07:df:16:3f:b8:be:d4:8c:2e:f4:50:a6  .oTj...?......P.\n00000220  00:00:01:14:00:00:00:0c:72:73:61:2d:73:68:61:32  ........rsa-sha2\n00000230  2d:32:35:36:00:00:01:00:9e:9e:1b:70:65:c7:86:8a  -256.......pe...\n00000240  94:3b:0b:23:35:10:b2:c8:69:17:76:2a:81:02:01:1d  .;.#5...i.v*....\n00000250  1a:b6:91:8f:e5:f7:00:26:72:a8:a2:27:d6:ac:35:d1  .......&r..'..5.\n00000260  2f:e0:d2:96:61:19:85:cb:04:3b:67:1d:df:2a:d5:3e  /...a....;g..*.>\n00000270  af:26:15:de:76:ad:c1:da:60:53:9e:d9:e0:ed:1b:40  .&..v...S.....@\n00000280  79:f1:31:03:b5:47:6d:28:e1:d0:37:e6:69:47:5d:04  y.1..Gm(..7.iG].\n00000290  06:d1:bb:2f:20:18:f0:61:7f:2b:cc:88:a2:8a:fe:1a  .../ ..a.+......\n000002a0  58:82:2b:af:ce:9a:9e:a9:7f:fc:63:db:92:7d:b5:d9  X.+.......c..}..\n000002b0  66:ee:c9:8e:eb:e6:f1:6a:84:da:70:78:8e:e4:a9:07  f......j..px....\n000002c0  e7:a9:42:38:ff:35:02:d7:ef:17:77:74:48:fd:2a:e1  ..B8.5....wtH..\n000002d0  e8:aa:2f:fb:2f:5c:d0:b4:b6:6a:4a:c0:41:6f:14:ab  .././...jJ.Ao..\n000002e0  af:90:17:7b:55:7c:c8:95:5e:45:55:b2:f7:ff:fc:98  ...{U|..^EU.....\n000002f0  0f:fd:31:47:0b:2d:fa:2f:e6:ec:9b:e4:c0:26:78:3f  ..1G.-./.....&x?\n00000300  5c:87:29:a7:f2:f8:9f:df:44:3f:f7:dc:7e:be:ce:f7  .).....D?..~...\n00000310  fd:ff:bd:a8:d0:e7:5e:aa:d5:32:81:6a:b2:68:1b:92  ......^..2.j.h..\n00000320  cc:8c:a6:d8:9b:4c:bd:c8:f0:0f:1a:24:56:77:06:74  .....L.....$Vw.t\n00000330  c2:68:6a:95:eb:ba:0b:34                          .hj....4\n-> NET_SSH2_MSG_NEWKEYS (since last: 6.9954, network: 0.0001s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0.0001s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.1081, network: 0.0001s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0114, network: 0.0111s)\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0007, network: 0.0001s)\n00000000  00:00:00:08:75:73:65:72:6e:61:6d:65:00:00:00:0e  ....username....\n00000010  73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f:6e:00:00  ssh-connection..\n00000020  00:08:70:61:73:73:77:6f:72:64:00:00:00:00:08:70  ..password.....p\n00000030  61:73:73:77:6f:72:64                             assword\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0073, network: 0.0071s)\n```\nphp info in attachment.\nThanks!\nphpinfo().pdf\n. I installed the GMP extension as suggested by @bantu \nMy speed improved from 12.43s ish to 0.127 seconds. That's amazing! That's literally 100 times faster!. ",
    "hamza-am100": "I've added you to the list.. I shared both ssh-logs and ssh-error-logs. The ssh-logs are obtained using the phplibsec functions\n```\ndefine('NET_SFTP_LOGGING', NET_SFTP_LOG_COMPLEX);\ndefine('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX);\n// initializition and downlowing file ......\nfile_put_contents(\"sftp-errors.log\", $sftp->getErrors());\nfile_put_contents(\"sftp.log\", $sftp->getLog());\n```. Could it be related to the server? Its a Amazon webserver using linux.. Thank you for your time.\nTo answer to your previous message, i don't think this is related to files being updated at the time of downloading the file. This is a structural problem, it occurs with every download and independent of the file.\nI don't run out of memory, i also used an implementation where i store the result directly to a file. This is the code that i use for downloading the files.\n```\n// the file size\n$size = $sftp->size($url->path());\n// fetch the import file\n$result = $sftp->get($url->path());\n// reset the result\n$result = \"\";\n// download the file in chunks\nfor ($offset = 0; $offset < $size; $offset += 10241024) \n{\n    // download a chuck of the file\n    $result .= $sftp->get($url->path(), false, $offset, 10241024);\n}\n```\nCould you please mail the results to hamza.aitmessaoud@copernica.com. . Sorry for the late response. I'm using version 1.0.14\nphpinfo: phpinfo\nI understand the hassle to debug this problem and i agree that providing SSH access is the best option. But the problem is that the ssh sever is not own by me. I setup my own AWS server to test the library but i couldn't reproduce the issue, the files were all correctly transferred.\nWhat next? I'm going to ask the client to make a test environment so you can gain access to the server.. Thank you for you patients.\nThe extensions you mentioned are developed by our self, you wont find them online. I have sent you the information for the test environment, the same problem occurs when downloading a file. . > Did your test environment contain these extensions? Did you try reproducing the problem with these extensions disabled? I do not know what these extensions do or how they work, but to me it seems more than likely the problem is caused by them. Would recommend excluding that this is actually the case.\nUnfortunately that is not the cause, i got the same results when testing on a clean Ubuntu machine that never had the extensions installed.\n\nThanks! I'll look at it for sure this weekend but I'll try to look at it sooner if I get a chance!\n\nThank your for your time.. >terrafrost@fce6063\nThat fixed the problem, the downloaded files all have the same sizes and the correct content:\nCan the fix also be released for version 1.0?. ",
    "ismail0234": "\nSounds indeed rather slow to me. My first guess would be slow DNS, but you are indicating you are using an IP. What is the network between the two hosts like?\n\n64 bytes from xx.xx.xxx.187: icmp_seq=1 ttl=53 time=172 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=2 ttl=53 time=171 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=3 ttl=53 time=172 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=4 ttl=53 time=171 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=5 ttl=53 time=171 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=6 ttl=53 time=172 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=7 ttl=53 time=172 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=8 ttl=53 time=172 ms\n64 bytes from xx.xx.xxx.187: icmp_seq=9 ttl=53 time=172 ms\nTwo server connection time. > Here are the incoming packets:\n\n<-\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1844, network: 0.1844s)\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.2244, network: 0.2244s)\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.4077, network: 0.4077s)\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.1961, network: 0.1961s)\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.1865, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1885, network: 0.1885s)\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.1856, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1856, network: 0s)\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1861, network: 0s)\nTotal time: 1.9449s\nHere are the outgoing packets:\n->\n-> NET_SSH2_MSG_KEXINIT (since last: 0.3795, network: 0s)\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0015, network: 0s)\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0005, network: 0s)\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0002, network: 0s)\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\nTotal time: 0.3823s. 99% of that time is due to the initial NET_SSH2_MSG_KEXINIT packet and I think that packets slowness may be more due to slowness in the server identification string that the server sent instead of anything phpseclib is doing.\nIt looks to me that the problem is on the servers end. Sometimes you can have low latency but slow overall speed. Maybe that's the issue.\nMy expectation is that any SFTP / SSH2 client you try to use is going to be slow.\n\nIs there anything I can do for that?. ",
    "dilaniMaheswaran": "<-\\r\\n\n00000000  53:53:48:2d:32:2e:30:2d:64:5a:64:57:70:76:75:44  SSH-2.0-dZdWpvuD\\r\\n\n00000010  36:0d:0a                                         6..\\r\\n\n\\r\\n\n->\\r\\n\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\\r\\n\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \\r\\n\n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_KEXINIT (since last: 0.0415, network: 0s)\\r\\n\n00000000  e1:95:9c:71:0b:d1:f5:89:3f:00:d6:a8:1d:82:b9:16  ...q....?.......\\r\\n\n00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm\\r\\n\n00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d\\r\\n\n00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_KEXINIT (since last: 0.0097, network: 0.0097s)\\r\\n\n00000000  1f:b2:31:95:c5:14:e5:fd:14:16:ab:c6:fe:b3:f1:51  ..1............Q\\r\\n\n00000010  00:00:00:80:63:75:72:76:65:32:35:35:31:39:2d:73  ....curve25519-s\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0201, network: 0s)\\r\\n\n00000000  00:00:01:01:00:ba:a3:a6:9b:4d:e1:0f:bb:0f:9f:f5  .........M......\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.0499, network: 0.0499s)\\r\\n\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0287, network: 0s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0003, network: 0s)\\r\\n\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.0664, network: 0.0663s)\\r\\n\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0171, network: 0s)\\r\\n\n00000000  00:00:00:0b:50:72:6f:76:73:65:72:76:69:63:65:00  ....Provservice.\\r\\n\n00000010  00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f  ...ssh-connectio\\r\\n\n00000020  6e:00:00:00:09:70:75:62:6c:69:63:6b:65:79:00:00  n....publickey..\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_USERAUTH_PK_OK (60) (since last: 0.0172, network: 0.0172s)\\r\\n\n00000000  00:00:00:07:73:73:68:2d:72:73:61:00:00:01:17:00  ....ssh-rsa.....\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0628, network: 0s)\\r\\n\n00000000  00:00:00:0b:50:72:6f:76:73:65:72:76:69:63:65:00  ....Provservice.\\r\\n\n00000010  00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f  ...ssh-connectio\\r\\n\n00000020  6e:00:00:00:09:70:75:62:6c:69:63:6b:65:79:01:00  n....publickey..\\r\\n\n00000030  00:00:07:73:73:68:2d:72:73:61:00:00:01:17:00:00  ...ssh-rsa......\\r\\n\n00000040  00:07:73:73:68:2d:72:73:61:00:00:00:03:01:00:01  ..ssh-rsa.......\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.0169, network: 0.0169s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0002, network: 0s)\\r\\n\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:02:7f  ....session.....\\r\\n\n00000010  ff:ff:ff:00:00:40:00                             .....@.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.0166, network: 0.0001s)\\r\\n\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\\r\\n\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\\r\\n\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.0001, network: 0s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.0489, network: 0.0489s)\\r\\n\n00000000  00:00:00:02:00:00:00:00:00:00:00:00:00:00:80:00  ................\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:00:00:00:00:07:70:74:79:2d:72:65:71:01  ........pty-req.\\r\\n\n00000010  00:00:00:05:76:74:31:30:30:00:00:00:50:00:00:00  ....vt100...P...\\r\\n\n00000020  18:00:00:00:00:00:00:00:00:00:00:00:01:00        ..............\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0164, network: 0.0164s)\\r\\n\n00000000  00:00:00:02                                      ....\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0002, network: 0s)\\r\\n\n00000000  00:00:00:00:00:00:00:05:73:68:65:6c:6c:01        ........shell.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.0168, network: 0.0001s)\\r\\n\n00000000  00:00:00:02:00:20:00:00                          ..... ..\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02                                      ....\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\\r\\n\n00000000  00:00:00:00:00:00:05:92:63:6f:6e:66:69:67:20:67  ........config g\\r\\n\n00000010  6c:6f:62:61:6c:0a:65:78:65:63:20:62:61:74:63:68  lobal.exec batch\\r\\n\n00000020  20:73:74:61:72:74:0a:63:6f:6e:66:20:76:64:6f:6d   start.conf vdom\\r\\n\n00000030  0a:65:64:69:74:20:22:72:6f:6f:74:22:0a:0a:63:6f  .edit \"root\"..co\\r\\n\n00000040  6e:66:20:66:69:72:65:77:61:6c:6c:20:61:64:64:72  nf firewall addr\\r\\n\n00000050  67:72:70:20:0a:65:64:69:74:20:22:47:52:50:5f:46  grp .edit \"GRP_F\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n00000580  31:39:22:20:20:0a:65:6e:64:20:0a:65:78:65:63:20  19\"  .end .exec \\r\\n\n00000590  62:61:74:63:68:20:65:6e:64:0a                    batch end.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0083, network: 0.0001s)\\r\\n\n00000000  00:00:00:02:00:00:00:10:46:57:31:2d:41:4d:53:54  ........FW1-AMST\\r\\n\n00000010  45:52:44:41:4d:20:23:20                          ERDAM # \\r\\n\n\\r\\n\n\"\"\"\n. Logs of a successful command.  I find the last part missing in the failure case\n\"\"\"\n<-\\r\\n\n00000000  53:53:48:2d:32:2e:30:2d:5a:42:66:71:34:30:57:5a  SSH-2.0-ZBfq40WZ\\r\\n\n00000010  46:45:44:59:48:5f:75:0d:0a                       FEDYH_u..\\r\\n\n\\r\\n\n->\\r\\n\n00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli\\r\\n\n00000010  62:5f:32:2e:30:20:28:6f:70:65:6e:73:73:6c:2c:20  b_2.0 (openssl, \\r\\n\n00000020  62:63:6d:61:74:68:29:0d:0a                       bcmath)..\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_KEXINIT (since last: 0.2687, network: 0.0002s)\\r\\n\n00000000  58:ae:6f:c7:67:7c:ba:1b:24:12:de:4d:dd:76:b0:21  X.o.g|..$..M.v.!\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_KEXINIT (since last: 0.1274, network: 0.1272s)\\r\\n\n00000000  d1:3d:81:38:ed:b0:58:f9:e6:b6:b6:d2:bb:a5:71:84  .=.8..X.......q.\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_KEXDH_INIT (since last: 0.0187, network: 0.0002s)\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]                                .;*.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_KEXDH_REPLY (since last: 0.1532, network: 0.1532s)\\r\\n\n00000000  00:00:01:17:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n-> NET_SSH2_MSG_NEWKEYS (since last: 0.0257, network: 0.0002s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_NEWKEYS (since last: 0, network: 0s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n-> NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0008, network: 0.0002s)\\r\\n\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_SERVICE_ACCEPT (since last: 0.2924, network: 0.2923s)\\r\\n\n00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.014, network: 0.0002s)\\r\\n\n00000000  00:00:00:0b:50:72:6f:76:73:65:72:76:69:63:65:00  ....Provservice.\\r\\n\n00000010  00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f  ...ssh-connectio\\r\\n\n00000020  6e:00:00:00:09:70:75:62:6c:69:63:6b:65:79:00:00  n....publickey..\\r\\n\n00000030  00:00:07:73:73:68:2d:72:73:61:00:00:01:17:00:00  ...ssh-rsa......\\r\\n\n00000040  00:07:73:73:68:2d:72:73:61:00:00:00:03:01:00:01  ..ssh-rsa.......\\r\\n\n0[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_USERAUTH_PK_OK (60) (since last: 0.1289, network: 0.1289s)\\r\\n\n00000000  00:00:00:07:73:73:68:2d:72:73:61:00:00:01:17:00  ....ssh-rsa.....\\r\\n\n00000010  00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01:00  ...ssh-rsa......\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n-> NET_SSH2_MSG_USERAUTH_REQUEST (since last: 0.0665, network: 0.0002s)\\r\\n\n00000000  00:00:00:0b:50:72:6f:76:73:65:72:76:69:63:65:00  ....Provservice.\\r\\n\n00000010  00:00:0e:73:73:68:2d:63:6f:6e:6e:65:63:74:69:6f  ...ssh-connectio\\r\\n\n00000020  6e:00:00:00:09:70:75:62:6c:69:63:6b:65:79:01:00  n....publickey..\\r\\n\n00000030  00:00:07:73:73:68:2d:72:73:61:00:00:01:17:00:00  ...ssh-rsa......\\r\\n\n00000040  00:07:73:73:68:2d:72:73:61:00:00:00:03:01:00:01  ..ssh-rsa.......\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n<- NET_SSH2_MSG_USERAUTH_SUCCESS (since last: 0.1286, network: 0.1285s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_OPEN (since last: 0.0004, network: 0.0003s)\\r\\n\n00000000  00:00:00:07:73:65:73:73:69:6f:6e:00:00:00:02:7f  ....session.....\\r\\n\n00000010  ff:ff:ff:00:00:40:00                             .....@.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_GLOBAL_REQUEST (since last: 0.1296, network: 0.0002s)\\r\\n\n00000000  00:00:00:17:68:6f:73:74:6b:65:79:73:2d:30:30:40  ....hostkeys-00@\\r\\n\n00000010  6f:70:65:6e:73:73:68:2e:63:6f:6d:00:00:00:01:17  openssh.com.....\\r\\n\n00000020  00:00:00:07:73:73:68:2d:72:73:61:00:00:00:03:01  ....ssh-rsa.....\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n-> NET_SSH2_MSG_REQUEST_FAILURE (since last: 0.001, network: 0.0008s)\\r\\n\n                                                 \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION (since last: 0.1328, network: 0.1322s)\\r\\n\n00000000  00:00:00:02:00:00:00:00:00:00:00:00:00:00:80:00  ................\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0026, network: 0.0012s)\\r\\n\n00000000  00:00:00:00:00:00:00:07:70:74:79:2d:72:65:71:01  ........pty-req.\\r\\n\n00000010  00:00:00:05:76:74:31:30:30:00:00:00:50:00:00:00  ....vt100...P...\\r\\n\n00000020  18:00:00:00:00:00:00:00:00:00:00:00:01:00        ..............\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.1274, network: 0.1273s)\\r\\n\n00000000  00:00:00:02                                      ....\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_REQUEST (since last: 0.0003, network: 0.0002s)\\r\\n\n00000000  00:00:00:00:00:00:00:05:73:68:65:6c:6c:01        ........shell.\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_WINDOW_ADJUST (since last: 0.128, network: 0.0001s)\\r\\n\n00000000  00:00:00:02:00:20:00:00                          ..... ..\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_SUCCESS (since last: 0.0002, network: 0s)\\r\\n\n00000000  00:00:00:02                                      ....\\r\\n\n\\r\\n\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0004, network: 0.0003s)\\r\\n\n00000000  00:00:00:00:00:00:06:d7:63:6f:6e:66:69:67:20:67  ........config g\\r\\n\n00000010  6c:6f:62:61:6c:0a:65:78:65:63:20:62:61:74:63:68  lobal.exec batch\\r\\n\n00000020  20:73:74:61:72:74:0a:63:6f:6e:66:20:76:64:6f:6d   start.conf vdom\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1246, network: 0.0008s)\\r\\n\n00000000  00:00:00:02:00:00:00:01:63                       ........c\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:01:6f                       ........o\\r\\n\n\\r\\n\n[SIMILAR DATA LOGS FOR ABOUT 1500 LINES WHICH IS MISSING THE FAILURE CASES]\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:22:0d:0a:45:78:69:74:20:61  .......\"..Exit a\\r\\n\n00000010  6e:64:20:72:75:6e:20:62:61:74:63:68:20:63:6f:6d  nd run batch com\\r\\n\n00000020  6d:61:6e:64:73:2e:2e:2e:0d:0a                    mands.....\\r\\n\n\\r\\n\nI find the last part missing in the failure case\n. No luck on this one as well. \nMy command is basically trying to add members to a group in fortigate firewall. When it tries to add more members, no activity is being performed on the firewall. When I add few members, activity is successful. I am using SSH to connect to the firewall and execute the command.\n```\nconfig global\nexec batch start\nconf vdom\n edit [PORT_VDOM]\nconf firewall addrgrp\n edit \"[GROUP_NAME]\"\n set member \"[MEMBERS]\"\n end\n exec batch end\n```\nThis is the command I am executing. [MEMBERS] are list of values seprated by space.  When I add about 20 members, there is activity. When I add about 35 members where the length of the command increases, no activity is seen on the firewall. If I execute the same command on the CLI directly , it is working fine.. Thank you for coming forward to help me and your prompt replies.I have requested permission to share the logs and the commands with you. I will share the logs if it is approved. \nIn the meanwhile I would like to know if there is any limitation on the length of the command I can pass in $ssh->write() .\nIn my case my command has about 2000+ characters that includes space, _ , .  '\\n' and double quotations.  If my command has just 100 characters less, it is working fine.\nCommand I am trying to run on the firewall goes as this\n```\nConfig global\\n\nExec batch start\\n\nconf vdom\\n\nedit \"port\"\\n\n\\n\nconf firewall addrgrp \\n\nedit \"GRP_FAKE_ONLY\" \\n\nset member \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\"  \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" \"DEMO _1234578\" \"DEMO 2558\" \"PT. DEMO _2541\" \"DEMO._870773932527\" (2000 chars similar to this)  \\n\nend \\n\nexec batch end\\n\n```\nThe command above is executed at once.\nMy exact php code is \n```\n$ssh = new SSH2($firewall_ip);\nif (!$ssh->login($firewall_user, $firewall_password)) { die(); }\n$ssh->setTimeout(1);\n$ssh->write($command);\n$ssh->read();\n```\nThe above code is able to edit the group in the firewall if my command length is lesser by 100 characters. If it is more, I can see successful login but command is not executed. Just wondering if it could be due to special characters. \nIf I execute the same command through Putty, it is working perfect regardless of command length and special chars. \nMy understanding from the logs is as below. I do not have much knowledge on how ssh works. Please correct me if I am wrong.\n$ssh->write($command) is writing the whole command.\n-> NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0002, network: 0s)\\r\\n\n00000000 00:00:00:00:00:00:05:92:63:6f:6e:66:69:67:20:67 ........config g\\r\\n\n00000010 6c:6f:62:61:6c:0a:65:78:65:63:20:62:61:74:63:68 lobal.exec batch\\r\\n\n00000020 20:73:74:61:72:74:0a:63:6f:6e:66:20:76:64:6f:6d start.conf vdom\\r\\n\n00000030 0a:65:64:69:74:20:22:72:6f:6f:74:22:0a:0a:63:6f .edit \"port\"..co\\r\\n\n00000040 6e:66:20:66:69:72:65:77:61:6c:6c:20:61:64:64:72 nf firewall addr\\r\\n\n00000050 67:72:70:20:0a:65:64:69:74:20:22:47:52:50:5f:46 grp .edit \"GRP_F\\r\\n\n[I HAVE REMOVED TO MAKE IT SHORT]\n00000580 31:39:22:20:20:0a:65:6e:64:20:0a:65:78:65:63:20 19\" .end .exec \\r\\n\n00000590 62:61:74:63:68:20:65:6e:64:0a batch end.\\r\\n\n\\r\\n\nand when I do $ssh->read() it is just returning an empty where as successful ones are returning the whole command executed on the firewall. \n$ssh->read() from failed case:\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0083, network: 0.0001s)\\r\\n\n00000000 00:00:00:02:00:00:00:10:46:57:31:2d:41:4d:53:54 ........**FW1-AMST**\\r\\n\n00000010 45:52:44:41:4d:20:23:20 **ERDAM** # \\r\\n\n\\r\\n\n$ssh->read() from success case:\n```\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0345, network: 0.0001s)\\r\\n\n00000000  00:00:00:02:00:00:00:0d:46:57:31:2d:4c:4f:4e:44  ........FW1-AMST\\r\\n\n00000010  4f:4e:20:23:20                                   ERDAM# \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.1246, network: 0.0008s)\\r\\n\n00000000 00:00:00:02:00:00:00:01:63 ........c\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000 00:00:00:02:00:00:00:01:6f ........o\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:02:6e:66                    ........nf\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:01:69                       ........i\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:02:67:20                    ........g \\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:02:67:6c                    ........gl\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0005, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:01:6f                       ........o\\r\\n\n\\r\\n\n<- NET_SSH2_MSG_CHANNEL_DATA (since last: 0.0001, network: 0s)\\r\\n\n00000000  00:00:00:02:00:00:00:02:62:61                    ........ba\\r\\n\n\\r\\n\n```\nand so on where it is returning the whole command character by character.. ",
    "ivink3aray": "i has been try it, but still error.. @bantu : can you suggest how to implementation using sync. ",
    "l0wskilled": "disappears into nothing\nA collegue told me he pointed a submodule onto 2.0 branch and found short array syntax.\nActually he pointed on master.\nSorry for not checking that before.. ",
    "cs278": "See https://github.com/paragonie/random_compat/pull/56 you are better off catching \\Error and \\Exception that way you get the same execution path on PHP 5 and PHP 7.\n. ",
    "xepa": "Ah .. good catch and thnx for fixing it and the pull.. "
}