{
    "jwang": "Can you fill me in on this? Hi-res meaning @2x for Retina Display? It's a very minor change so if that's the case, I'd like to get it in but want to make sure I have a test case to verify it.\n. so we still need something that can automatically load the @2x given a path to the low res (assuming the high res is available in the same path, per how iOS auto detection works.)\n. interesting. I've run into some other bugs that were in 4.1 but fixed in 4.2 as well. Thanks. Will take a look at the SO question.\n. added as 41b2a029475e8b0e407feb24f4be5ea318ef4220\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. Hi @bensummers I pulled in a few changes that removed some things. I like the pasteboard and want to pull that in. I don't use the pasteboard too much, does it not support styled text? Only plaintext works? Thanks! :)\n. can you please edit this and add a title to the \"issue\" pull request?\n. @seqoy your ref got broken so I can't get the source. I can copy them over or you can send a new request with development branch targeted.\n. Hi ngs,\nCan you please do a pull request to the http://github.com/Three20/Samples repo for this?\nThanks.\n. thanks. I pulled your sample app into the repo. I'll let you know on Monday what to do about the extension. Don't have an answer to that yet.\n. Hi ngs,\nSo the decision is to have others release extensions as their own, through their own public github accounts and submit them to the extensions gallery Three20.info/Extensions. Instead of bringing them into the main repo. This prevents increasing the size of Three20 and lets users use and develop more extensions as they see fit for their apps.\nInstructions are available in the submit link.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. There's a lot going on in here. Can you give me a synopsis of what the changes are?\n. Awesome. Thanks. Will take a look at it in piecemeal form.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. someone closed this by accident?\n. This is taking longer than I thought to pull together, but it's coming along nicely. :)\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. This hasn't gone in yet. Was waiting for wlach to get me some help on testing it out, but we haven't had a time to synch up yet.\n. no worries. thanks for the gist! curiously, are you using any other libraries now, or working on something other than ios?\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. closed - bece575aec1808eeaa7ee411d86b39a39e427a63\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. can you change the branch to development from master? we can do that internally too, but someone may pretty the other button and forget.\n. note: see :octocat: #587\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. merged into development branch.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. @cdonnellytx  Please target the \"development\" branch. There's a lot of conflicts happening right now.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. Hi, can you please change the commit range to target the development branch? Thanks!\n. closed 893e3bb8afb539142b3f90fec0f59b3f6b9e1c1c\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. I don't know about including the table and using for a look-up. I understand the premise, but the fonts can and do change. For example, iPad 4.2 supports 57 different fonts and iPhone 4.2 supports 40. I don't know why that is, but such is the case. I'll write up a dynamic lookup solution for this.\n. closing this in favor of dynamic font lookup.\n. mmorearty, did you log those issues separately? If so, what are those issue numbers. I'm looking through the list and can't find them.\n. Thanks mike. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. @steipete - sorry it took so long to get these in. Thanks!\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. Hi @PabloGS - which fix are you using? The original or the updated? @cemaleker added a better solution that's not attached to this request that I want to see and make sure it's not causing iPad issues too.\n. @cemaleker have you check it does not cause problems with the iPad per the first comment? I'll be checking that myself, but would like you to confirm as well.\n. @cemaleker @PabloGS - 1.0.6 has been released. This will go into 1.0.7 for next week.\n. merged into development - 8f30e16ca74228bda9918cbb63739d27872d70f7 - release is on friday\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. need to change it to target development branch for commit range. Also check to make sure the changes for the comments are made.\n. closed e154870f8c6e05ddf7a5d189c52dc44d48460bb8\n. Hi @PEZ no worries. I fixed the changes and merged it into the development branch. It'll go into the next release soon. I'm trying to finish the Core Data addon then will release 1.0.6. Development branch has 1.0.6 minus Core Data. You can test that out and see if you have any problems. Otherwise, release should be either later tomorrow or Monday.\n. These changes have been made already. They'll be changed in the next release shortly. Thanks.\n. target master. v1.0 branch is for development. I'll explain better early next week with the new release. Thanks.\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. the 1.0.4 release came out more sudden than I had notice. :)  I am testing it. They're actually in local branches right now. I'll push them up soon. we're ironing out a schedule.\n. in review\n. closed by 8ebb0f3ab5e2d47f88fddc6a06b8140900f21e01 in development branch\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. in review\n. scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\n. yea. i'll bring it in tomorrow morning.\n. merged via commit 8348ce7d3b4bb240ed9bdfdbc9fdadddd8e361b4\n. thanks mike, i'll test it out with some others and add it into next release.\n. will do tomorrow morning\n. merged via da155155accd1ab2edb0f87a4215aaecdb8e8ff7\n. Thanks guys. Will take a look and see how we can best get this in.\n. Thanks tonklon. It's not so much a question of implementing. That's easy enough. I just want to make sure that in all of the places we're calling the method, it's calling the proper one and with the correct parameters. Also, when we add it, we need to add the corresponding unit test to make sure we're compliant. :)\n. @tonklon Did you get around to implementing this? I need @pazustep to send it and target development branch. Let me know if you want take it and build your changes on top of his and submit it instead. Thanks! :)\n. Good point. Thanks. Scheduled for 1.0.4 release and review this week.\n. tag for 1.0.4\n. closed by fff1d14433892e0e4ad447a05fba974ebc138442\n. Thanks. Will take a look. I think there's another issue logged that's related. I'll relate them later today. :)\n. can you change your commit range to development branch? It looks like there's conflicts here.\n. awesome thanks!\n. You ran into these with the new 1.0.3 release? I thought I saw some commits that went in to resolve this. Thanks.\n. We need to document the design issue internally as well so we can fix it in the long term. I'm all for being warning free, but we need to document it properly and not forget about fixing the underlying issue in the future.\n. Closing this as it is really messy right now. I think I've addressed most of these now. I'll jump around and fix the rest as I run into them.\n. Thanks. Will take a look.\n. Will check on the licensing about this and let get back to it.\n. It looks like it should be fine as long as we include the license from Apple - https://gist.github.com/830118\nGranted, Apple does sort of hide these in UIKit from the public, but there are extractors out there. I think we may be better off just making a high res version of our current image for now.\n. thanks.\n. Hmm. The sample projects should also be picking up from the xcconfig files. Will take a look.\n. I think at some point we'll want to figure out how to handle the samples as well. If we're going to move some or all to the Three20/Samples repo, or not. Same thing with the Articles. I think we need to get rid of the Articles directory in this repo. I actually already removed it from my development repo.\n. Those are my thoughts as well. Keeping the TTCatalog and TTNavigatorDemo and moving the others.\n. Jeff, you should check out NSLogger - https://github.com/fpillet/NSLogger, it's not meant to replace this pull request, but I figured I'd mention it.\n. I'm sure there's a way. Just requires a bit of digging around. https://github.com/fpillet/NSLogger/wiki/Integration-with-other-products\n. DRY is good. Thanks will take a look.\n. Thanks! Simple enough. Will check why it wasn't calling it.\n. hmm. interesting.\n. thanks!\n. Ah cool. This is logged in here somewhere as well. Will take a look. I'm pretty sure I saw someone report this issue before as well. Thanks!\n. Hmm. This is an interesting one. I use other libraries as well. Can you tell me which ones are causing the problem? We want to make sure we're fully compatible with other libraries and I think this may be easier resolved through some other configuration if possible.\n. it shall be done.\n. I'm going to merge this into 1.0.4 but I'm also marking it as a future follow-up item as I would like to investigate more elegant solutions to this and will also see what I can get out of Apple's team on recommended solution.\n. egad. :(\n. Argh. My bad on this one. It looks like we may need to make the TTWebView do some magic.\n. note to self. references request #404\n. Related to #250. What was the side-effect of the proposed solution? I may close that one in favor of this one. Unit Test would be nice. We need to see what we have baked in already and also how to better test the UI.\n. Thanks!\nNote to self: seems related to #19\n. closed bef397b6b0d7a1843473fb5b9a0d765740c95a6e\n. Ah. Thanks. This is actually all going in for the new Style Guide. These are actually all in our style-refactor branch that we're updating.\nAs for the GCC 4.2 vs LLVM GCC 4.2 - Still working through making sure everything is ok. That change is actually related to #365.\n. These samples are moving to Three20/Samples as well in favor of only keeping the TTCatalog and TTNavigator samples?\n. woah. hot damn. note to self. don't press the green button.\n. auto-merge bad. i'll rebase master to previous commit in a few min.\n. I restored master branch. I can't re-open this because github thinks it's been merged in. @savanah can you resubmit this? Also, please target development branch and not master. :)\n. argh. can you make each one a separate pull request?\n. If you can, it would make things easier to deal with. Otherwise, I can deal with it on my end.\n. no worries. we're not git experts either. :)  For XCode4, are you using Workspaces? I'm thinking that may be a better route for us to go in the future. I like this in the interim, but it seems XCode4's workspaces are really powerful. :)\n. Thanks! You should be able to submit as many as you want. There shouldn't be anything stopping you from submitting more pull requests for other changes.\n. It's a gateway drug. Beware, you'll likely go nuts if you have to deal with SVN ever again. :)\n. lol. :)\n. It works fine for GM 2.\n. I'll test this out a bit more this week then if it passes, merge it in.\n. Closed by a8787dc95d2e50ac111f49c75a381b6852100b27.\n. @savanah - were you able to address the questions and issues? I want to pull this in for testing next week.\n. @seqoy - soon, there's a bit more work involved I think. The meat is there, but I think the dictionary needs to be added.\n. @seqoy - Actually can you open a new pull request that targets the development branch? I just pushed out version 1.0.9 of Three20 and can start looking at integration for 1.0.10.\n. closed in favor of #673\n. thanks, but we still need that test case. :)\n. closed by #591\n. I think we're looking to actually move it into the stylesheet, where the nav bar gets set and also the toolbars. this is good though.\n. That's a great point. Hmm. Let's see. That's not a bad alternative. One place to set would be nice, but there's areas where people like to override it. Like photo views where it goes transparent black.\n. I'm curious. What happens if we just remove that line entirely? If it's specified in the Info.plist file and it's not there at all, then it should use the setting from the plist file entirely.\nThen a user would simply set it the traditional way, by using [[UIApplication sharedApplication] setStatusBarStyle:....] for any views they want to override.\n. lol. i should commit it then. i didn't commit my ignore file even though i added it. i'll push it now.\n. [REPO] update gitignore to add .pyc files. closed by 1bf9e345292f170d1d583c3a766ea75435174afc\n. thanks! you can link to issues just by using the # with the number after, like: #73\n. that's a good point. in the future we'll actually need to modify this a bit more to take internal custom urls into account. thanks.\n. this does need more testing. :)\n. TouchJSON is super slow. I don't think this is a good idea. Is the license causing a huge problem? json-framework is used in a lot of other apps.\nSee: JSONKit\n. I still think we should think about switching to using gitsubmodules for something like this. I don't like the idea of us having to keep TouchJSON or any other library we add updated on our end instead of relying on a submodule. It could then be later argued that we should allow instead of TTURLRequest to use ASIHTTPRequest which handles support for S3, has caching that actually works, etc. I see this coming back and being a giant pain later on. We'll want to think this through very carefully.\n. I prefer to give credit where credit is due. ie. http://www.mobilecrunch.com/2011/02/28/creator-of-angry-birds-physics-engine-calls-out-rovio-for-not-giving-him-credit/\nBut that's me personally. And also, if a client or developer really doesn't want to give the proper credit, then they need to recreate what they need and or find an alternative solution. In any case, that's my personal opinion and not that of the Three20 project. I'm stepping out of this one until the extension system is actually defined and built out.\n. thanks!\n. no worries. i took care of it. next time, just be sure to run with the Lint tool turned on. It's supposed to catch these things. If it's not catching them, then jeff and i need to fix it. :)\n. Did those last minor things get done? I didn't see a new commit come in for them.\n. simple enough. thanks.\n. thanks. will test it with ttcatalog\n. That's a good question. Why did I close this. Let's re-open it and put it into next week's push. I must've thought I merged it in already.\n. test case? is this a problem in ttcatalog?\n. That's correct @exidia. It is the normal behavior.\n. Ouch. That's a pretty big issue. Thanks.\n. I've been looking at this for quite a while now. And I've read Marco's comment as well. I've tried his option and it hasn't quite worked as nicely for me. Even with the options he had given, I was not able to run TTCatalog on a 3.1 device without weak-linking UIKit. I don't think we'll be giving up on 3.0 just yet either. I would like to utilize LLVM a bit more and the LLVM GCC 4.2 is an option as well. I have pretty much these same changes on a local branch and it's an issue that's been up to discussion before.\n. Note. Related to #365\n. Jeff has some top secret iPad branch on his computer that we haven't seen yet. I'll follow up with him on what his iPad branch has. It wouldn't be a bad thing to have it as an extension, since Three20 is trying to modularize everything slowly. So that part will likely pan out in the future.\n. That's correct. Sorry, I thought that was mentioned, but guess not. I'm going to close this for now as we're not quite ready to give up on pre- iOS 4.0 yet.\n. nice. thanks!\n. What changed in project.pbxproj? I'm hoping nothing and that was just minor.\n. no worries, just checking. I'll manually deal with it.\n. Note: This is the start of Three20 Core Data support.\n. yea, I would like to pull that in as well one day. I've used this in the past and it's given me hell a few times.\n. Reading my mind! That's exactly what I'm working on creating. The part that I'm being careful and checking on, is making sure that any items that currently subclass TTTableViewDataSource can use either or. Such as TTThumbsDataSource, TTSectionedDataSource, and TTListDataSource\n. Hey Matt, sending you message.\n. Thanks Matt. Just saw this, will take a look. :)\n. Interesting. thanks. will review.\n. I think there's something inside the facebook app that's not using a UIViewAnimationTransition, but a custom one. Alternatively, there's likely additions being done to the enumerable that someone could chose to extend. @jverkoey did you find anything?\n. @aporat - closing this for now.\n. I don't have access to that. Jeff does, but it may fall under some private facebook code. :P\n. thanks. not sure how that NSLog sneaked in.\n. thanks, will review.\n. Thanks. Can you provide a test case so we can verify the issue and also the fix?\nI'm trying to figure out why I can no longer tag pull requests.\n. thanks. will review.\n. [Bundle] - Tag as Localization\nThat's a note, because tagging of pull requests has disappeared for some reason.\n. we can tag issues. If you look at the Issues tab, you'll see a bunch of tags. We try to do the same for Pull Requests as they're also \"Issues\" but that seems to have changed recently. Until I can figure out how to do that again, I'm just writing in some notes in the comments.\n. don't worry about it. It's just internal for us to keep things organized. :)\n. I haven't looked too much into the extension system, but this is very minor. I'll take a look at it. Thanks.\n. Yes, I am. welcome back stephan. :)\n. Could've sworn this is in there already. Research time. :)\n. be careful with adding commits to a pull request branch. things can get a bit nasty on some items.\n. @rogchap can you update to development branch and resolve the conflicts accordingly? Also, not sure if and how you can deal with @RafaelAlba's issue of failing POST.\n. Hey @rogchap - I'm going to push this off for next release. I want to test it a bit more as I'm concerned about it breaking existing implemention, though I think you already addressed that. I have 2 more items I want to push out today and tomorrow then will release. I'll put this into next week's release.\n. Thanks @hongrich :) \n. @jverkoey check this out. maybe something along those lines work as well.\nhttp://www.cimgf.com/2008/04/13/git-and-xcode-a-git-build-number-script/\nhttp://kswizz.com/post/2686511526/git-xcode-versioning\n. Note to self: related to #467\n. #467 has been merged in to development branch\n. Someone else had done the same, but it turned out to not be very useful to implement these back then. I think that's why Joe never did those either. As long as someone's using it, it should be fine.\n. There's a regex way of doing this with NSRegularExpressionSearch?\n. Just a note, this doesn't quite resolve it fully. There's another issue here that I need to relate this to that is trying to solve a global issue with retina images not working in many situations. Another example is the Thumbnails in the photo gallery view.\n. @martinjuhasz - I'm going to close this as it's targeting the master branch. I've seen this same request a few times, and many others have noted that it's not fully resolving for network items, but it does for local items. That's why it's working for the Documents Directory, but not for images coming down from Flickr and such. Would be great to find a solution for network items but that's more complicated.\n. Interesting. Seems trivial enough. Please resubmit and target the development branch in your pull request. Thanks!\n. Thanks. can you provide a simple test case using the TTCatalog source as an example to verify?\n. nice job. looks good.\n. @aporat can you confirm your issue was solved? @mmorearty if you can verify that as well, it will help a lot! I'm ready to merge this as it's highly requested. :)\n. Ah sorry @aporat I was trying to ask @buddydvd to confirm. Looking at multiple issues after another. :)\n. @buddydvd is it a separate request than the one I see on here from June 3rd?\n. @buddydvd ah understood. Will wait for @mmorearty to get that into the request. Thanks! :)\n. Three20 1.0.6 has been released. I'm going to add this into 1.0.7 for next week pending @mmorearty's review of @buddydvd's pull request for this change.\n. interesting. Didn't know anyone was using the ipad-navigator branch. pretty sweet fix. Thanks!\n. @buddydvd can you check the conflicts based on the development branch for this to make sure you intended behavior is intact with the development branch's recent changes? Thanks!\n. sweet @buddydvd! Thanks! I'll review it and merge it in tomorrow morning! :)\n. Hi @buddydvd - I'm going to release 1.0.6 RC today for testing. I plan on including this patch. Have you verified the stability and functionality after resolving the conflicts? Thanks!\n. @buddydvd it's been merged into 1.0.6 RC, please validate. Thanks :)\n. Hi @masbog can you do me a favor and log that as a new issue and reference this with #578 somewhere in the body of the issue. For example,\n\ni can not see a button \"See All\" on my apps... where i can show image thumb... my image more than 3... related to :octocat: #578\n. target development branch\n. @alexleutgoeb - I'll be pulling this in later today, but just for future reference, make sure to set the commit range's base to development branch. It's currently targeting the master branch.\n. closed 47f665020e20f7b7f1b0b1256570593ecaf7e154\n. thanks! will start getting it in there.\n. can you send the pull request to the development branch? Thanks!\n. ah. gah. try and change the commit range to target the development branch.\n. Hehe. @dewind sorry about that. I think the commit range isn't as clear to most. You still have some conflicts with the current RC that I just pushed out to the Google Group, let me know if you can get those resolved in the new pull request. Thanks!\n. @aporat - That's cool! Can you merge in 1.0.6 RC into this and check for stability?\n. @aporat the development branch currently has the 1.0.6 RC as part of it. You should be able to just do a pull and merge from the development. There's currently no conflicts, so you should have a clean merge and be able to just check that everything is ok.\n. @aporat - 1.0.6 has been released. This will go in next week in the 1.0.7 release instead.\n. Yea. I actually have to bump it up to 1.0.6.2 I think. Due to the 2 issues. But I'm going to release weekly, so 1.0.7 will go out next week too.\n. @aporat Was there a difference between this and #596? Also, see my note on #563? I'm going to release 1.0.6 RC today for testing.\n. Cool. Thanks!\n. Looks like there's still some conflicts going on with the latest development branch. I'm going to release 1.0.6 soon. Release Candidate is going out in about 5-10 minutes to the Google Group. If you can get it all sorted out, I can include it in the 1.0.6 release for Wednesday, pending any issues that come up with the RC version.\n. Awesome! Thanks! Totally understandable. This is one of the better docs I've found to keep things updated for my own projects.\n\nhttp://robots.thoughtbot.com/post/5133345960/keeping-a-git-fork-updated\n. @dewind - merged into 1.0.6 RC please validate state and report back. Thanks! :)\n. Thanks @dewind! :)\n. cool! There's some conflicts with the RC branch though. Can you see if you can get those resolved? Thanks. :)\n. @seqoy - the RC branch is the development branch. They're the same. The development branch is current holding 1.0.6 RC that will be released this week, that's why I called it the RC branch. Sorry about the confusion. I should have just said there's conflicts with the current development branch.\n. Hi @seqoy Three20 1.0.6 has been released. We can add this into the 1.0.7 queue. There are conflicts with the current release, and would be helpful to get those resolved. Thanks! :)\n. hi @seqoy no worries. :)\n. Hi @seqoy - If you can get the conflicts resolved by Tuesday I want to release Release Candidates on Tuesday/Wednesday and then release it on Friday/Saturday if no issues arise from RC. :)\n. @seqoy There's no conflicts right now. Thanks! I'll be pulling items in later today to get the 1.0.7 Release Candidate out. :)\n. @seqoy @vguerci - Thank you. :)\n. Can you send a new one with the 'development' branch as the commit range? Thanks!\n. @rainhead - yup. The development branch is currently being tested for stability. Please try it out and see if everything is working for you. The release is coming this week. It'll be version 1.0.6 which is currently in the development branch as release candidate stage. Thanks! :)\n. Hmm. Not sure why that banner timer was there for.\n. @aporat ya. I looked around but didn't find anything. I'm going to put this into 1.0.7 for this week's release. I'm pushing 1.0.6.2 for the TTWebController issue separately.\n. cool. thanks! I'll put this into the 1.0.7 release for this week. :)\n. closed 2370253fcf624126d98bae1464f2f0569b623e89\n. How does this impact iOS 3.0 support? We've been fighting that for a while and we still need to support iOS 3.0 with Three20. I'll load this into my iOS 3.0 device and see how it goes. Thanks!\n. If I recall correctly, this is either the 2nd or 3rd time someone has asked for LLVM + GCC and we had a problem with backwards compatibility on iOS 3.0 that we support. There was at one time a request to go full LLVM which we rejected due to that. I'll play around with this a little bit more.\n. We've had mixed results recently with TTSplitViewController. I've had success just by making it a weak link, but others haven't. Some just pull it out. I think one of the iPad support views will fix it, but I haven't made my way through it as it's a really large review at this time. I'll push it up for next week's priority though.\n. I'm not sure if anyone looks at the milestones, but I'm anticipating dropping iOS 3 support and switching to LLVM + GCC 4.2 in 1.5 and then in 2.0 going towards ARC support.\nBefore we can do that, I want to make sure there's some sort of \"stability\" in the pre-1.5 branches. I'm operating based on iPhone 3G and iPhone basically being abandoned by Apple per iOS5 only supporting the 3GS and above.\nThese are pretty big undertakings. At some point, I am anticipating a bunch of people to start either sticking with Three20 or attempting to move to Nimbus. Three20 remains as one of the currently most watched and forked for Objective-C.\nThere's been several discussions about things.\nstart @jwang's personal option: \nRight now it's too big of a swiss army knife as opposed to say a specialty knife like a butter knife, bread knife, and steak knife. Certain knives cut things better than others.  I prefer systems that do 1 thing well and leave the rest to other items to do better. It's all about being the glue that puts things together than trying to solve everyone's problem, then not solving anything at all. \nend @jwang's insane personal option.\nLastly, if you're wondering. Yes, sometimes, I be crazy distracted and all over place. Sorry about that. You can blame the :bear:\n. Hi @RafaelAlba - although relatively self-explanatory, can you add some text to the body of the request.\nAlso, if possible, add an example to TTCatalog would be really awesome. :)\n. @RafaelAlba - please do try to add a sample to TTCatalog if you can.\n. Thanks @blakewatters I'll put this in today for this week's release. Beware of commit range, we want to target development for testing release candidates.\n. closed 890d4d6784538869d62bca6d53a23073d6a84728\n. Cool. Thanks! beware of commit range targets. currently targeting master and would be better to target development but we can take care of that.\n. sweet! Thanks @tonklon :)\n. That's cool. There's some changes in there that are scaring me for some reason. Maybe it's lack of coffee. Going to play around with it as I have a couple of Three20 apps that use IB stuff too.\n. Thanks @tonklon - for now, when in doubt, follow Google's Objective-C Style Guide\n. orange?\n. ah. That's cool. There's some clean up stuff I want to do in there. Hmm. Maybe we can start looking at making it use the stylesheets then. That's much more preferable.\n. Nope. I mean let's use and add to it. :) - Meaning creating your own off of it should allow you to override accordingly. So the default is orange but if someone wants to change it, they just inherit from it. It's more of adding directions about how to change it from orange to another color. It's a wiki item. :)\n. Sure. I'll try to get something over to you tonight. I have a wedding to go to tomorrow, but I'll be on IRC #three20 channel and on Skype: jwang392 if you need me on Sunday. :)\n. I'm curious as to how this is different than using TTTableFooterInfiniteScrollView instead? Is that not usable for some reason?\n. Ah. FYI TTTableFooterInfiniteScrollView was add on February 04, 2011 via 4c96f31fa11c974dfa6cb1d33c0be16ed60c63a0 I'm not sure if TTCatalog has a sample of it. If it doesn't, we should add one.\n. @cagataygurturk - I feel like for some reason, even so, it's probably safer to use the TTTableFooterInfiniteScrollView and have the \"Loading\" text in the footer's view? Maybe I'm confused.\n. Cool! Thanks @levous perhaps we can make the name a bit closer to didFailOpenURL:(NSURL *)URL instead? Also, watch out for the commit range when you do the pull request. By default it will target the master branch and we push everything into the development branch first.\n. Oops. My spiffy Icon.png for Git Tower snuck in there. I can remove it if it bugs people. :P\n. This is actually fixed in the development branch that's almost ready for release. There's 1 more tweak I want to do in there, then it'll be ready.\n. sweet. Thanks!\n. @aporat - Do you think we should make this be used in TTAvailability by adding a iOS version?\n. that makes sense to me. :)\n. I really wish we had better iPad support. This is really awesome @aporat! Let's slate this for a 1.1 release as it's going to break some people's apps. We need to add deprecation warnings since you changed from left and right to primary and details. You can either keep the left and right and have them call primary and details and add the deprecation warnings.\nOr just break all hell and add in the changelog notes that it's being deprecated.\n. I'm still not sure what to do with #533. Maybe it'll be what goes into the 1.5 that starts dropping support. I do want to get working on that soon. Changelog is a file that doesn't currently exist in the main repo, but in my local one for now. I need to push that out. I want people to start using the Wiki here more too.\n. I love MGSplitViewController. I use it as well instead of the TTSplitViewController.\n. Note: This is a resubmit to the development branch from :octocat: #669\n. Ooo. Love the NSCopying protocol implementation. Any ideas how the Core Text will work on older devices? Just a question, though we likely won't care too much in the near future.\n. There's some conflicts with the development branch that need to be resolved.\n. We're going to be fixing this in a separate way. Thanks!\n. Thanks for verifying @PabloGS\n@matej - can you resubmit with the commit range being the development branch? Thanks.\n. @PabloGS  @matej - have you looked at the proposed fix from @ccummiskey and @scompt. It looks like that will be a more related fix?\n. @aporat can you check the conflicts and resolve them? It's likely project.pbxproj again.\n. ok. can you put a comment in here when you're done with the new :octocat: issue number? Thanks!\n. Can you add an example of it's use to TTCatalog too?\n. sweet. Thanks!\n. seems reasonable. Let's slate this for upcoming release 1.0.11\n. closed per duplicate of #683\n. sigh. Thanks!\n. What was the cause and result? This seems fishy.\n. This seems to be coming up a lot more often now. #689 also deals with an issue of white background colors.\n. Note to self: Resubmit of #681 with conflicts resolved.\n. Ideally, the TTSplitViewController issue will go away soon with iOS 5 being released. In all likelihood I am anticipating Apple only really supporting iOS4 and 5 and dropping support for iOS3.x and below. As I understand it, there's a small subset that will be left out. Likely anyone with a 3GS that doesn't upgrade to iOS5 or the new iPhone. If there's anyone still running on a 3G at that point, it's probably not going to be many developers' target audience. This is good, I'm hoping to start dropping support slowly for older OS versions. I think I outlined them in milestones, but need to make it clearer in the Wiki.\n. The lint should have thrown some warnings here. Also can you resubmit this with targeting the development branch instead of the master branch. Thanks!\n. thanks @ettore for resubmitting. Note: see #712\n. can you resubmit this against the development branch instead of the master branch? Thanks!\n. Yea. that new change is going to catch a lot of people now. Thanks will take a look at this. :)\n. @ettore - This is a resubmit of #700 and #712?\n. Oh geez. That's another mean one.\n. sweet. Thanks!\n. Any ideas why _originShadow got released from a stack trace?\n. these don't exist anymore. That's version specific junk from previous releases.\n. spacing issue. use the lint too. I'll fix it this time around though.\n. spacing again. needs linting. :)\n. This concerns me for some reason. Need to look at this again.\n. @aporat - do you think it's a better idea to have one that shows Grouped and one that shows Plain instead of asking people to comment out?\n. ",
    "betamike": "Yes hi-res meaning properly loading @2x retina display images.  After doing some additional testing, I found that this will not automatically load the @2x file given the lower resolution file path.  This will properly set the image scale if you pass the @2x file path though.\n. Yep.  Unfortunately, the automatic @2x detection (or at least setting the proper scale) is broken with the UIImage methods that allow you to load an image from a filepath (this was fixed in 4.1).  In order to get this working properly, it will probably require a workaround.\nhttp://stackoverflow.com/questions/3739812/how-to-get-uiimage-imagewithcontentsoffile-and-high-res-images-working\n. ",
    "bensummers": "My pasteboard implementation only copies plain text -- I was only writing what I needed for my app.\n. ",
    "mgc": "[Core] Retain objects in NSArray perform: methods.\nPerformed copy before enumerating, but didn't account for\nnon-retaining delegate arrays. Result was a subtle crash.\nClosed by a1555fb786180290333accde2ec850e868b58704\nClosed by a1555fb786180290333accde2ec850e868b58704\n. ",
    "seqoy": "Ups, there you go. \n. Yes.. I start my fork from scratch. Let's close this issue and I will upload on the next fork. The TTScrollView is already implemented anyway.\n. This is pretty cool. We could address this for next releases? \n. Oh, yes. Now i saw the full conversation. @savanah you have a very useful improvement here, will help a lot of people. If you accept the admins (jwang and jverkoey) advices and make those changes we will have this on the main release pretty quick for sure.\n. @savanah I hope you don't mind, but i recently need to use this excellent feature that you added. Of course to be able to commit to the main repository some changes discussed here should be executed. So I did take the liberty to make this changes and open a pull request.\n@jwang @jverkoey Please check if the changes are Ok, and I think that we're good to go.\n. @jwang Ok, Is all on the Pull #673. So you can close this and merge from there. \n. This pull merges with the new CSS Design Model proposal. Actually we take some code from UILabel from here. \nCheck our pull here: https://github.com/facebook/three20/pull/583\n. Pull request pack. This pull also includes:\nTTImageView Delegate improvement\n- Give the user the possibility to configure the Requester before TTImageView make the call to the server.\n. I'm not sure what is the \"RC\" branch... Can you tell more details? Thank you jwang.\n. Hi @jwang, sorry I didn't have time to fix this for this release. Sure we can include on the next one. I'll work on that. Thank you.\n. Hi @jwang, I'll start to work to get this conflicts finished today.\n. Hi @jwang, please check if those conflicts are fixed now.\n. Never mind.. They still there.. Digging into.\n. No GIT conflicts but some differences with the pull #474 - I'm fixing. Because we do sort of same thing in the code. I'm making sure to not broke the compatibility with @vguerci code.\n. @jwang, some question. Is almost fixed now. But I'd have one issue that I can't fix yet. The improvements on the extThree20CSSStyle.xcodeproj add a lot of .h files. But when compiled the project isn't copying this new headers to the /Three20/Build/Products/three20/extThree20CSSStyle folder. That is some specific place that I must edit?\n. Hi @vguerci, no problem. Some parts are redundant, yes. I'm merging the codes to be compatible with any project that depends from the both codes.\n. Yes, I did try to remove then all. And copy all headers on Copy Headers back, but nothing. I never can get this to work. Looping on @jwang to give us some light.\n. Wow!! I did found it hidden on the bottom of the pirate bottle!! You should go under Targets > Copy Headers, select the Header file, open the \"Zoom Editor\" (Shift+Comman+E) and change his Role to public/private.\n. @vguerci  I finish to merge with your code. That's some differences basically how you tell the property to the TTCSS() macro function (see StyleSheetViewController.m diffs). Because now the CSS Ruleset is one real object you can call his properties directly. My idea is to extend this object with many CSS properties we can, the macro just call the property directly. Tell me what you think.\n. @vguerci no problem, some macros are useful and also when you have time to integrate a simple find/replace will be enough. @jwang we're good to go with this commit. Good job! I really enjoy to engage on this kind of \"community woek\" with good developers. Thanks.\n. Sure. I'll close this pull and reopen in development.\n. Yes, NSCopying is cool. Core Text is available since iOS 3.2, isn't so new. I'll put some conditionals compiler and tests to disable this specific methods, and create UIFont using only 3.1 code. With that I think we're covered.\n. @jwang: Take a look now. I did separate Core Text methods under a Category. And add compiler conditions for the correct iOS. \n. Ok. I'll see that.\n. ",
    "fpotter": "Yeah, I clearly submitted this pull request wrong.  Will resubmit later with just the one relevant commit.\n. Awesome - something dynamic would be great.  Just wasn't sure how it could be done w/out matching against the names.\n. ",
    "jverkoey": "Hey ngs,\nCan you provide a sample application using this as well? We're building sample apps in the Three20/Articles repository now:\nhttp://github.com/three20/Articles\nLet me know if you have any questions.\n. Sorry, I mislinked here. We're using Three20/Samples, not Three20/Articles, for sample apps. The Articles repo is for Three20.info documentation (which could also be useful as well).\nhttp://github.com/Three20/Samples\n. Thanks ngs, I know this is an extra step for you. It'll be worth it, though. Not only will Three20 developers get to use your new extension, but they'll get a solid head-start into understanding how to use it in their project.\n. Awesome, thanks ngs! For now we're going to hold off on merging this into the mainline because there will be some changes coming soon with respect to how we manage extensions.\n. This looks good. I'll test it out.\n. [Core] Add SHA1 support to NSData and NSString.\nTests for NSData and NSString passed.\nClosed by b4f6dceb250c6492d69d32feb55210fa41614e5f\n. There's way too many commits here to know which ones are important off-hand. Do you think you could comment on the ones that are higher priority?\n. [UI] Fix a memory leak in TTTableHeaderDragRefreshView.\nClosed by df4d00ef3734e87d78a5d7c7a0d64ab0ba894493\n. Sweet, thanks!\n. Duplicate of #177.\n. This change is too much of a bandaid solution right now. I can quickly imagine this breaking on the iPad.\nIs there a repro case to show the bug in question?\n. Closed by 460d04fe235cc2f6713b8ea9899848e66f6f98e5.\n. Closed by 406c8fab4a5bcfbd67bed714b2927c120a2c7a17.\n. Ping for merging this one. Would you still like to grab it jwang?\nLooks really sound, thanks for the detailed breakdown mmorearty!\n. Ping on merging this one in.\n. Can you also modify TTCatalog to show an example of a really long error message for testing purposes?\n. I didn't clean up all the self.view calls because they tease at some larger design flaws with the library. Many of the controllers were written with the data and view components tightly bound together, so to properly fix the self.view warnings would require a good, concentrated look at each controller in question.\n. I'm going to close this pull request for now because of the mentioned design issues above, but it does sound like we should make it more clear how to change the active compiler in Three20.\n. Thanks for tackling this though steipete :)\n. That's a fair point. My intention in keeping them was that they make it pretty clear where the problems are in the controllers. That being said, the merit of being warning-free isn't completely lost on me.\nWhat do you think?\n. Let's merge this in then. What do you think is the best way to document the design issue?\n. Hot. Are we allowed to use these images?\n. I wonder why this code was like this in the first place; are we potentially causing another bug elsewhere?\n. I think the problem here is that each of the sample projects has its own set of dependencies, so they weren't able to easily use the same xcconfig files. I do agree with the pull request though, so can we clean this guy up by adding the -all_load and -ObjC flags to the xcconfig files that the sample projects do share?\n. +1 to the removal of the Articles folder.\nAs for moving all of the samples to the Three20/Samples repo, it's a good point to debate because there is merit in having the TTCatalog sample bundled with the library. Perhaps we should only have TTCatalog and TTNavigatorDemo, and move the rest to Three20/Samples?\n. Let's do it :)\n. In the move-over, let's go ahead and have all of the projects use -ObjC and -all_load.\n. It's a feature branch, so it's meant to be removed after the merge. I'd rebase it off development and then merge it into development, might look a bit cleaner that way.\n. That is gorgeous. I wonder whether we can build a Three20 extension for that framework?\n-edit- I realize I'm being a bit hyperbolic, but that is a really awesome framework.\n. This looks like a fun weekend project.\n. Beauty, just what I was looking for. This branch is moot then.\n. This is awesome :)\n. Cool. The viewDidDisappear method should be called only once the view has completely been hidden as per the Apple Docs.\nhttp://snaapi.com/iPhone/UIViewController%20viewDidDisappear:\n. If we're going to provide support for something like this, let's future-proof it. Can we make this more general?\n. The latter sounds like a good approach. Is there any way we can do it while still maintaining support for the current interface?\n. I've seen this error before myself and outside of the -force_load flag which has its own problems, there doesn't seem to be a particularly effective solution. I think this might very well be one of the best solutions we have so far that still allows us to debug Three20 code.\nAre there any side effects to doing this that we should be aware of?\n. I think that minor inconvenience is worth it for this particular case. In the future I hope to add a linter to the Three20 internal build process so things like this could be caught and flagged anyway.\nLet's merge this one in to 1.0.4.\n. Not particularly sure. Barring any easier solution, just close this pull request and open a new one :)\n. This is a hotfix for 1.0.3.\n. Proper issue is here: https://github.com/facebook/three20/pull/410\n. Closed the other pull request. This pull request is properly based off of 1.0.3 and not development so that we can merge it in asap.\n. That you did. We really need a clearer way to put together all of our notes for each release. It's difficult to aggregate all of the comments made on each commit right now.\nI'll go ahead and merge it. Thanks for looking it over.\n. What should we do for version numbers on hotfixes?\n. Some ideas:\n- Go straight to 1.0.4 and make our next release 1.0.5\n- 1.0.3.1 - A bit gross looking\n- 1.0.3a - Not really a fan of the alpha suffices.\n. Alright, let's go with 1.0.3.1 for this hotfix then.\n. Merged in with 41f43cb8707fe5048b69cced215cc04ecfb7bc30.\n. Tested this and it looks good. Thanks for putting this one together!\n. Merge branch 'echamberlain-TTLauncherButton' into development\nClosed by 20b2106d8943809365d3fab60a5286022cd7b5bf.\n. On the topic of changing the integration branch, I'm not sure how to do that on GitHub as it seems that we can only set the \"default\" branch, which we need to keep as master.\n. This sounds like a sensible fix. I'll test it.\n. Merge branch 'eventualbuddha-TTImageView-defaultImage-flicker-fix' into development\nClosed by 1ef027d8fa7be00671b28072bdadf2edf18734a2.\n. As I think about it even more, I definitely don't want to be flooding pull requests with style nits going forward. I know it's frustrating to the requester, and without proper linting we don't have a way to ensure complete conformity yet anyway.\nI'll take some time to experiment with adding a linting tool for Three20 that's part of the build process (kind of like our Unit Tests target) and we'll start using that to avoid this rototilling, as you've accurately called me out :)\n. That sounds perfect. Thanks much!\nI spent last night hacking on said linter and was able to integrate it into Xcode pretty well as part of the build process. There are still some kinks I want to work out, but it will probably be going out in the 1.0.4 release tomorrow. I'll be issuing a pull request shortly so you can check it out.\n. Can you rebase this off of facebook:development? We've already merged the first commit in and that will make it easier to merge this update in.\nAlso, a minor stylistic question: my gut is saying that the #import should be at the top of the header files with the other imports, what do you think?\n. I have a few additional modifications to make to this pull request concerning removing the -force_load flags from each of the sample apps. Let's do this:\n1. Can I get you to squash the spelling error into the previous commit and then force push your branch?\n2. Once that's done, I'll issue a pull request to you on top of your Categories branch. If you could review the changes I've made and do the following from your branch we'll be rocking:\n  git checkout Categories-samples\n  # Review the changes\n  git checkout Categories\n  git rebase Categories-samples\n  git branch -D Categories-samples\n  git push origin Categories\n\nThis will push my new changes back to this pull request and then we can do one final run-through of reviews.\n. I'm going to issue a pull request to your repo once you've squashed your commit, so it doesn't exist yet.\nHere's the easiest way to squash your commit:\n```\ngit checkout Categories\ngit rebase -i HEAD^^\nInteractive rebase on the last two commits. When the editor appears\nshowing the last two commits, replace the word pick on the last\ncommit with the letter s for squash. Save the editor and close it,\nand git will squash that commit onto the previous commit. It will then\nask you to update the commit message. In this case, you can simply\nremove the second commit message because we don't need it anymore.\ngit push origin Categories --force\n```\n. Looks good! I'll fire off my pull request now.\n. Awesome. I'll do some quick testing to make sure everything builds fine. If everyone on this pull request could verify that this branch works fine with their own projects, that would be awesome :)\n. Merge branch 'echamberlain-Categories' into development\nClosed by 13e84400133c11eca31ecf97680f7484de0a48a5.\n. Nice work everyone, thanks for pulling this awesome change together! It'll really simplify a lot of people's lives.\n. Looks pretty simple, testing now.\n. Can you squash both of these commits together into one and force push this pull request? Also add a [Style] tag to the beginning of the commit message. I'll merge it in once you've done so. Thanks :)\n. Awesome, thanks :)\n. Merge branch 'olegueret-add-strong-em-parsing' into development\nClosed by 2733e2deb6b9b292aaf6033c33f4f96f7cf7d5ed.\n. Testing this right now. This is one of the best pull requests I've seen, thanks so much for making this easy to verify and test.\n. Merge branch 'mmorearty-three20-flowlayout-bug' into development\nClosed by ea82e784801d14b8fab34e563ee4c6e06e719c92.\n. Yeah, let's move those out in the next pull request.\n. Merge branch 'fix-remove-325-targets' into development\nClosed by fad323d03335169b4371c7cf260ad930bb61cd6d.\n. This looks pretty reasonable.\n. Merge branch 'fix-32-64-bit-compiler-warnings' into development\nClosed by a5837845a895d50b7146c314617748751c8b8304.\n. Which bug is this fixing?\n. Ah cool, that makes sense now :)\n. Does this commit fix any known issue?\n. Ah cool, was just curious whether there were any issues to close, thanks!\n. Merge branch 'fix-layout-bug-tableImageItemCell' into development\nClosed by 2712bf09d93f30d0f5fd36a40886a25285ee8e47.\n. So it sounds like the section index's width can change?\n. I wonder if we can build a table view that displays itself in place programmatically beforehand and gathers metrics about the view it will soon appear in. This would allow us to get the exact metrics perfectly each time and also be scalable for the iPad, which uses different cell gutter widths in grouped table views depending on the width of the table view.\n. Hrm. This is a tough one for me. On the one hand this likely fixes the majority of cases, but on the other it's not a complete fix. What do you think we should do here?\n. Looks good to me.\n. Merge branch 'fix-possible-layout-bug-tabletextitemcell' into development\nClosed by ef2bc8729c78bb4d1a6f92a995a38c5d0f2b90f9.\n. This looks good, thanks! Have you tested it?\n. Sweet. I'll test it as well and then merge this change in.\n. Merge branch 'vguerci-cleanup-unused-buildenvs' into development\nClosed by 81b9193ef6605e1fc3282d1e1512147d748d8dde.\n. Looks like some stray commits made their way into this pull request. Can you rebase -i the branch and remove the debugging commit?\n. Ping re: the question above.\n. Cool, good to know. This looks good to me then!\n. Derp.\n. Can you force-push back to master and remove those changes jwang?\n. I can't re-open this issue for some reason; possibly a bug in the issues 2.0.\nLet's definitely be double-sure to check the integration branch before auto-merging.\n. This is definitely a cool feature though :) Merging pull requests on the go!\n. Merge branch 'lint' into development\nClosed by cfcb8ad43c3f5484ad06b703130cdee14a8d63f2.\n. Tested and confirmed that this works. Can you squash your commits into one and force push back to this branch?\nAlso, for the commit message, please prefix it with [UI] for historical purposes.\nThanks for putting this together!\n. And one last request for the commit message: we should try to make it more descriptive to the task. Something like [UI] TTPostController calls viewWillDisappear and viewDidDisappear on super controller when displayed. would be cool.\nAnd then in the body of the commit, if you could add a simple description of the problem as it existed before this change and how this change fixes it, we'll be gold to merge this in.\nPardon the pickiness here, but this is one of those changes that might not be particularly obvious in the future if we don't better document the rationale.\n. Cool, thanks :)\n. Merge branch 'TTPostControllerFix' of https://github.com/echamberlain/three20 into development\nClosed by 219417e85ea161aef25a13cb03fa639692bcf7e9.\n. Careful when you issue pull requests from master. In this case your new commits got added to this pull request. Can you change the source commit to 71ad497 so that this pull request only shows that one?\n. Can you resubmit this pull request so that the correct commits are here?\n. No problem, thanks for putting these together :)\n. Building off the comment in the previous pull request, pull requests should be made off the development branch. This is because the development branch is where we commit everything before each major release. Once we are ready to make the release, we merge the development branch changes into master.\nSo to simplify things entirely, try making a separate branch for each of these fixes and then pushing those branches to GitHub and issuing the pull request from there. This way, as you make more changes to your project, we won't see them pop up in the GitHub pull request (because it continues to track whichever branch you specify as the branch to be integrated).\n. Merge branch 'echamberlain-TTButton' into development\nClosed by 006aed8f00398ed1e598aa2d5db81fce4900a3d1.\n. Merged into development with 69d11d0f2d494cfe241a5860c19d082dbf80dcd1\n. Looks like a lot of extra commits made their way into this Pull Request. Try doing this:\ngit fetch facebook     # Get the latest development updates from facebook's Three20 repo\ngit checkout origin/development # Check out the GitHub development branch\ngit checkout -b xcode4-ttmodule-support  # Create a new branch named xcode4-ttmodule-support\ngit cherry-pick 692ed58 # Add the Xcode 4 commit to this new branch\ngit push origin xcode4-ttmodule-support  # Push the branch to your personal repo\nThen, update your Pull Request to point to facebook:development and taknology:xcode4-ttmodule-support.\n. Nailed it.\n. Just do the same process of creating a branch for each pull request you want to make and pushing that.\nSo let's say you have a another commit you want to review:\ngit checkout origin/development\ngit checkout -b my-fix-name\ngit cherry-pick sha1\nIn my setup, each of my projects has its own branch. So for the github demo I'm building, I have a \"github\" branch that's based off of development. Whenever development gets updated, I simply do git checkout github; git rebase development to get it up-to-speed.\nFor features and bug fixes, they'll usually be in one of my project branches, so when I want to get them ready for review I cherry-pick them into a new branch on development (like above) and submit that for review.\n. Previous pull request had the wrong branch.\n. Merge branch 'nix-xcode324-support' into development\nClosed by 656e2d7b46781b4969ed992aac8c061c80d9b3a4.\n. Ah damn, this is not going to make your day. These changes are going off of facebook:master instead of facebook:development.\nTo save you headache in the future, check out the commits that are included with your pull request before you send it off. I'm going to change the integration branch to development, so that should make this problem a lot less likely (I did the exact same thing last night by accident).\nAs for these pull requests, I should be able to pull your changes into development without including all of these commits, so don't worry about remaking the pull requests if it's a pain in the ass. Thanks for putting these together :)\n. > Too bad github doesn't allow you (the upstream \"facebook\" repo) to specify which branch you'd like pull requests to be based on.\nI'm going to make development the integration branch from now on. It might take a couple days because I've got to get Dave (our awesome Open Source guy at Facebook) to update the repo's settings.\n. Merge branch 'Remove-UIStatusBar-hardcoding_gh458' into development\nClosed by 516ee1572693cc2f932ac5ae0ed3625d89baaa6e.\n. Added note to the header documenting this special case.\n. Merge branch 'hotfix-openURLFromButton-crash'\nClosed by 2ce7b125903edf3eee6b5ffe359b4e8c1bc83a84.\n. Hm. It may be better to look into merging JSONKit into Three20. Those benchmarking results are damn impressive.\n. Hey Dominic, sorry for the delay in getting back to you on this; after releasing 1.0.5 I took a break for a few days and will be getting back to reviewing pull requests tomorrow. I'm looking forward to merging this in and growing our support for the various JSON parsers out there. Thanks so much for putting this together :)\nAs for this framework vs TouchJSON, there is no downside to including as many JSON frameworks as we can into the library, so ideally we'll someday support both.\n. We can probably switch this pull request up to use a submodule. I'm just not the most familiar with their intricacies; do you think you could put together a simple run-through on best practices for submodules?\n. Closed by a8787dc95d2e50ac111f49c75a381b6852100b27.\n. Oh no, looks like this got pulled into https://github.com/facebook/three20/pull/470 as well. To avoid this make sure to push each change as a separate branch in the future :) Not a big deal, just clutters up the code reviews a bit.\n. Looks good to me.\n. Sure! TTMessageController has some really fleshed-out documentation.\n. As long as you push the commits to the same branch they'll be updated in this pull request. Can you see them above there?\n. Ah, I could have been more clear as well, but this documentation should go in the TTStyledButtonNode.h header file I think, because that's the object that these properties will affect.\n. One step ahead of me :)\n. A few minor things left to do:\n- We generate our API docs using Doxygen, which requires that the comment block for a class be placed immediately before the declaration of the class itself. In the commits here, the comment block has been placed before the #import, so Doxygen might not notice that the documentation block applies to the class. To solve this, simply move the comment block to be immediately before the @interface line.\n- Can you provide an example in the documentation of how the attributes are specified? It might not be particularly obvious to everyone that they are pulled from the HTML being parsed. A good example would be something like:\n  - \n    *\n  - The resulting TTStyledButtonNode will then have:\n  -   - a URL path of @\"tt://myApp/12345?action=like\",\n  -   - and a className of @\"likeButton\".\n. Well this looks simple! Merging it in now.\n. This commit looks really useful, thanks aporat! I have a few modification requests to make that shouldn't take too much time. Mostly just requesting documentation and separating the method into smaller methods.\n. Ping. Are you still interested in fixing up the methods?\n. Cool, looking forward to it :) Thanks again aporat.\n. These are really cool! Thanks for putting this pull request together. I'll do a more detailed review on Monday.\n. Merge branch 'fix-ttmodule-spaced-rel-paths_gh475' into development\nClosed by 6fecb7e39b7590173410d24086afb7aef8581f54.\n. I have a fix for this already that recycles code a bit better. #527.\n. I think that this probably uses an NSInteger instead of the UIViewAnimationTransition in order to allow custom transition indices that aren't part of the UIViewAnimationTransition enum. I'm not convinced that being more strict here is a good thing. \n. Hm. You've got a point about it being non-informative. Perhaps given the name transition we should stick to UIViewAnimationTransition as the type. At the very least I'll check to see if there are any type warnings from the Facebook app.\n. Table view delegates retain the controller, not the model, n'est pas?\n. Ah, but TTTableViewDragRefreshDelegate retains the model. Case made.\n. Duplicated in #530. This is the official commit though.\n. This works because it forces the table view controller to recreate its delegate. For delegates that retain their models (like the network enabled and drag-to-refresh delegates), they do so in their init methods. By forcefully recreating the delegates, we cause the init methods to fire again and the new models to be retained.\n. Ah yes, right. Thanks for pointing that out :)\n. Looks good. Adding this to the reviewed bin for sign off by someone else.\n. Note to final committer: squash all of these commits into one with a message that contains the description of this pull request.\n. Cool. Looks good to me. Marking as reviewed.\n. Looks like we have a couple issues to fix here. This looks like a good fix, minus the style nit which I can fix.\n. Can you explain the case where this happens a bit more? From what I can tell this will only happen if you add the same control object to the table multiple times, which is probably not the right thing to do in the first place.\nI'm all for defensive coding, but I just want to verify that this fix does what it says it's doing. I can't figure out a good way to repro it.\n. Sweet, was just able to reproduce using the steps you outlined.\nLooks like this is what's happening.\nWhen we initially show the table, we create the following cells that are visible:\n0 - textField\n1 - textEditor\n2 - textView\n3 - textFieldItem\n4 - switchItem\n5 - sliderItem\nWhen the keyboard appears from typing in the textField cell, the new state of the table view is:\nvisible cells         recyclable cells, dequeued from the top down\n0 - textField         5 - sliderItem\n1 - textEditor        4 - switchItem\n2 - textView          3 - textFieldItem\nOnce we start scrolling down is when things start to get interesting. The first dequeued cell for reuse is the 5 - sliderItem cell, used to present the 3 - textFieldItem. So we remove the sliderItem's control from the parent view and set the new textFieldItem, giving us the following cells:\nvisible cells         recyclable cells, dequeued from the top down\n0 - textField         4 - switchItem\n1 - textEditor        3 - textFieldItem\n2 - textView\ndequeued 5 - sliderItem => prepareForReuse => 3 - textFieldItem\nIf we scroll down a bit further, the 0 - textField cell is now ready for reuse, putting us in this state:\nvisible cells         recyclable cells, dequeued from the top down\n1 - textEditor        0 - textField\n2 - textView          4 - switchItem\n3 - textFieldItem     3 - textFieldItem\nWhen we dequeue to present the switch item, the 0 - textField cell is returned.\nvisible cells         recyclable cells, dequeued from the top down\n1 - textEditor        4 - switchItem\n2 - textView          3 - textFieldItem\n3 - textFieldItem\ndequeued 0 - textField => prepareForReuse => 4 - switchItem\nFinally, once we're about to show the 5 - sliderItem cell, we dequeue one more time. This is where our bug is caused. The table dequeues the \"top-most\" cell in the queue (I think it's actually a stack), which in this case is our old 4 - switchItem from before. At this point we have two 4 - switchItem cells in the table view, so when we prepare the second one for reuse by removing its control from its superview, we end up removing the switch from the table view altogether.\nSo I think we should definitely go ahead with your fix.\nAs per your last point, perhaps we should make an attempt at fixing the cells properly altogether in a separate issue?\n. Cool. This looks good to me. Marking as reviewed.\n. Asking internally at Facebook to get someone to verify this commit.\n. Someone should be looking at this in the next couple of days. Thanks for submitting this aporat :)\n. Cool, that helps a lot :)\n. Just heard back from the localization team. They only have a few requests for changes:\n\"Alert\" = \"\u05d4\u05ea\u05e8\u05d0\u05d4\"\n\"Connection Timed Out\" = \"\u05d4\u05d6\u05de\u05df \u05e9\u05d4\u05d5\u05e7\u05e6\u05d1 \u05dc\u05d7\u05d9\u05d1\u05d5\u05e8 \u05d4\u05e1\u05ea\u05d9\u05d9\u05dd\"\n\"OK\" = \"\u05d0\u05d9\u05e9\u05d5\u05e8\"\n\"Sorry, there was an error\" = \"\u05de\u05e6\u05d8\u05e2\u05e8\u05d9\u05dd, \u05d0\u05d9\u05e8\u05e2\u05d4 \u05e9\u05d2\u05d9\u05d0\u05d4\"\n. Let me know if anything didn't copy correctly. If you could make those changes in a new commit and push them to your bundle-hebrew-translation branch, that'd be perfect :)\n. Sweet.\n. Ping.\n. See #521 for an availability header that allows us to put code like this within a preprocessor block.\n```\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= TTIOS_4_0\n@interface TTURLXMLResponse : NSObject  {\nelse\n@interface TTURLXMLResponse : NSObject  {\nendif\n``\n. After talking with diederich about this, we've decided that we're not going to continue supporting pre-iOS 4 SDKs for simplicity's sake. We'll still support iOS 3.0 as the minimum SDK in the runtime, but we make no promises that you'll be able to build newer versions of Three20 on versions of Xcode pre 3.2.5.\n. +1 merge into development.\n. Merged into development with c52f5f653bb92d234fa9b177cd60ff6f838aa2ad.\n. Related pull request: #514\n. Definitely open to a better solution for maintaining this file. Do you have experience with any of those versioning tools? I haven't used them myself. If they're too complex for our needs, we could write a small script to set the version numbers programmatically (with a commit hash, as well).\n. Let's try this mention thing out: @tonklon\n. For historical purposes, here are the current places where we manage our version info:\n-src/Three20/Headers/Three20.h- Used by doxygen to generate the api home page and link to the roadmap. We can probably usesrc/Three20Core/Headers/Three20.h` now to do this.\n- On the Three20.info backend, doxygen.config must be updated.\n. @jwang That bundle version script looks handy. I don't think we currently version our bundle.\n. Cool, pardon the mention spam tonklon. Looking forward to hearing back. Thanks for checking in on this.\n. Is there a specific standard we should follow for defining this version header? Would Three20Version.h suffice?\n. Cool, thanks again tonklon for your help with this.\nI'll go ahead and keep the Three20.h/m files added in this commit, but add a Three20Version.h that is the sole place where we define the Three20 version number.\n. Added Three20Version.h and co. This satisfies the criteria of having our version defined only once in the project now.\n. Are we good to go on this guy?\n. Note: related to #365.\n. Related to #533.\n. I'm slating this for a 1.1 release because it changes existing functionality. We should consider linking this to #527 which starts pulling out certain table style properties into the style sheet.\n. I tried doing that, but there's some really crummy logic built into this control that would require a larger refactor.\nNotably, check out how layoutSubviews checks whether or not to show an image:\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableSubtitleItemCell.m#L103\nThen look at the fact that _imageView2 is automatically initialized anytime you call the imageView2 accessor.\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableSubtitleItemCell.m#L178\nAnd then notice how the following line is careful not to call the accessor unless there is an imageURL.\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableSubtitleItemCell.m#L158\nSerious facepalm action going on here.\n. That seems sensible.\n. Good catch there, by the way. This makes me think we should really avoid writing accessors that create the object on demand.\n. Good to know, thanks PabloGS. Implementing prepareForReuse might have its own problems because it looks like the base TTTableViewCell sets the object to nil on the prepareForReuse, which feels like unexpected behavior.\n. Even better.\n. The following issues are children of this pull request:\n- #525 [UI] Implement prepareForReuse in the subtitle item cell in order to correctly reset the cell's contents.\n- #522 [UI] Show subtitle cell images with padding and calculate the height accordingly.\n. Related to #491.\n. Related to #522.\n. Sweet. Looks good to me. Adding it to the \"reviewed\" bin for someone else to sign off on :)\n. Ah, I just realized this is a new pull request from #501. Just a heads up, but whenever you push to the branch from which you initiated the pull request, the original pull request automatically updates itself :) Go check it out at #501.\nI'm going to close this pull request because it doesn't have the full context of the conversation.\n. Ah no worries, this isn't so much a git thing as one of those Github features that are unintuitive until you know about them :)\n. Verified that this patch works. +1 for merging into development.\n. Make sure you do --no-ff.\n. Here's my usual flow for merging into development.\n```\ngit checkout -b - development\ngit pull https://github.com//three20.git \nTest the change. Give feedback.\nfetch updates as they are made.\nOnce the request is ready to merge:\ngit checkout development\ngit merge - --no-ff\ngit commit --amend\nAdd \"Closes #\" to the merge commit\ngit push origin development\n``\n. Strange.\n. It's possible this is weird because it was pushed locally?\n. No big deal really.\n. Good eye. Thanks for catching this.\n. With over 70 commits in play here, it's probably going to be much more advantageous to comment on the aggregate diff instead of each individual diff.\n. Issue #529 will be resolved once this is merged.\n. Depends on #521 for iOS 3.0 support.\n. Ah, it's entirely possible I forgot to add it.\n. Still working on it for sure. I have a number of fixes to push to this branch soon but have been pretty busy working on other things lately. Sorry gang.\n. Hurrah! I've been wanting this as well :)\n. Make sure to pick thedevelopmentbranch when creating the pull request. The selection box can be really finicky and sometimes reverts back to master even though you typed development.\n. Let's finally get this one merged in :)\n. Looks good to me!\n. Looks good to me.\n. Sweet, thanks for making these changes!\n. Why are we releasing self here?\n. It seems strange that we'd depend on the keyboard appearing/disappearing to tell the super controller that the view disappeared. Why do we do it this way?\n. Ah, looks like we're doing a strange[self retain]down below as well. I'm not familiar with why this is done; have you sleuthed this one out?\n. Ah, I gotcha. It still weirds me out to depend on the keyboard animation for this sort of thing, but if it's the best way to do it then let's go ahead with it :)\n. Very peculiar. I wonder if it's because the parent controller might release its retention on this controller when it dismisses it, so this controller retains itself to ensure it sticks around long enough for the animation to complete.\n. Let's get rid of thisNSLogbefore we merge this in :)\n. I had originally used that but then wasn't sure if it would do the same on Xcode 3.2.5. Do you know if that is an Xcode 4-specific property?\n. Hm. I guess if we do a combination ofXCODE_VERSION_MAJORandDEPLOYMENT_LOCATION` we'll be pretty safe.\n. Fixed in a new commit.\nhttps://github.com/facebook/three20/pull/466\n. Hm, fair point. I'll remove it.\n. Done.\n. ",
    "ngs": "I see, I'll fork this repo and commit a sample app. Thanks.\n. Hi.\nI pushed my sample application at commit ngs/Samples@eafcce02df86d2c01977\n. Hi jwang.\nThank you for remind me that.\nI sent a pull request to facebook.\nThanks\n. Hi jwang.\nI've submit my extention. http://three20.info/extension/extXMLRPC\nThank you for information.\n. ",
    "jdg": "+1 nice work.  This would be super handy!\n. ",
    "aptogo": "Include commit 23d62dc if you do a pull. I broke TThumbsViewController - fixed now\n. ",
    "dwery": "Seems pretty nice, I'd love to have it included!\n. Cells and Items are tightly bound to each other. It makes sense to me that they both know their counterpart. \n. would love if this can be committed...\n. insanely great! very well explained too.\n. thanks!\n. I guess Jeff's patch can be adopted instead of this one.\n. it seems #527 hasn't been merged yet.. any particular problem with that one?\n. very nice!\n. ",
    "diederich": "Looks good!\nI've added a few more commits on top of this here:\nhttps://github.com/diederich/three20/commits/three20-remove-hard-coded-cell-mapping\nchanges:\n- setObject was called multiple times if cell was just created\n- extracted the item->cell mapping into a protocol, so simple model objects can directly implement it\n- throw an exception if - cellClass on TTTableItem is called.\nI think the exception might be a good idea. Say we add this pull request and devs update their three20 version. All the their custom TableItems which were derived from TTTableItem seem to work properly, but instead they're just creating plain TTTableCells instead of the custom mapping they had installed before. This is likely a programming error thus the exception.\nRambling\nI have a bit a bad feeling about the dependencies create here: the TableItem has to know the TableCell and the TableCell has to know about the TableItem. This looks quite circular :/\nMaybe we're asking the wrong object about creation of the cell? \nI think the whole idea on the tableitem -> cell mapping was, that there can be generic/reusable TableViewDataSources. The hardcoded mapping prevents this, thus a different object has to be asked about which cell to create for an item. Other options that come to mind:\n- create a loose mapping, e.g. something like the navigator ([ItemCellMapper map:[MyItem class] toCell:[MyCell class]])\n- ask the controller\n. I'm using this in one of my projects and it works well. \nStill, I have a bit of a bad feeling about it. See the rambling above. We might wanna discuss this on the public ML. Maybe others have some ideas about it, too?\n. +1 for merging\n. Looks good to me\n. applied in 244ef2b9f794b7411452\n. fixed in 01d14c83ba5f40ded6bac81e3314bd0778630c0a\n. The changes to the German localization touch the same string we just merged (TTableDragRefreshDelegate). IMHO the existing solution is more consistent (Both, pull & release,  have \"...\" at the end).\nI can't verify Korean and Turkish though, guess Atish did that?\nSide note: is this lang branch a permanent branch or are we going to remove if after that merge? Asking if I should rebase it on development or merge development into lang, then merge into development.\n. merged in 2f18f388f8c1a2f5f2710f6ec5b3566ac4e89ab6\n. Jeff, did you check NSStringFromCGRect and friends? (CGPoint, CGSize)\n. Looks good to me. I did comment on the commit, after I noticed something similar (opening broken URLs) while playing with TTCatalog.\nAre you going to merge this?\n. given it's a bug-fix for 1.0.3 I'd say 1.0.3.1, though you got a point with \"gross looking\".\nWe might wanna get rid of the currently unused second digit and release 1.1 next...\n. the cell uses 2 different fonts the different table items it handles, but height calculation was solely based on TTSTYLEVAR(tableSmallFont). \nTo fix it, the decision which font to use was factored out and is now used in height calculation (+heightFor...) and during configuration (setObject:)\n. better commit message might be: \n[UI] Fix height calculation of TTTableImageItems' \n. was reported on IRC by dwery...\n. Good you looked over this. This pull requests is probably best described as an evil hack :P\nWhile searching for a nice place to put the constant in, I've found\n- (UIView*) sectionIndex in three20's UITableView additions category (which is another 'beast' I'm not covering here)\nWhile we can't use that during height calculation (as the sectionIndex isn't set yet), I've checked that view's width and was 32.f in my example (and not 10.f). Of course this is in no way static and varies depending on what section indices are returned by - (NSArray*) sectionIndexTitlesForTableView:\nThis could be calculated by iterating over the strings, fetching the longest, and return a width depending on that (and some empirical constants like the font used in the sectionIndex). Not sure this is the best - while probably right - way to go.\nWhat about delegating this to the datasource, which also serves the index?\n. Yes, it depends on what the datasource returns for the sectionIndexTitles\n. I'd say leave it as it is now until we come up with a proper solution. In this case we might want to close this pull request and create a ticket as a reminder.\nIn general, I'd say deferring the height calculation of rows to the cells is really convenient, but also comes with a few problems like this. Apple does adjust the bounds of the contentView in cells according to the max-length of the sectionIndex, so this information must be there, it's just not available. \nMaybe filing a bug report to provide that information instead of calculating it is an option?\n. Hm, not sure on how to comment on this pull request. There seem to be some more commits involved. Mind fixing this?\nBesides that, did you check why _originShadow is handled differently? While it seems to be a weak-ref only, shouldn't this be handled the same way?\n. As long as it still builds, I'm all for cleanup and removal of the ancient stuff :)\n+1 for merging\n. Looks good. Thanks! What about adjusting the header comment? \nI'm not sure duplicating it in the stylesheet is needed. As echamberlain pointed out, it must be in Info.plist anyways to become set on app startup. One point to have it in the stylesheet might be easier access, and returning [[UIApplication sharedApplication] statusBarStyle]; might do the trick there, though I'm not sure that's worth the effort. \nAny other advantages of having it duplicated in the stylesheet?\n. TTBaseViewController sets the statusBarStyle in viewWillAppear to the one store in its property statusBarStyle. \nI'd say this is convenience and allows subclasses to set the property in the init method and forget about it later on. When a  viewController that makes use of it is shown, it sets the proper statusBarStyle and if another viewController appears it resets it to the value stored in Info.plist. The property is also used in a few three20 view controllers (Photo and Thumbs IIRC).\n. +1 for merging, seen them here, too.\nShould we explicitly add them or is the *.pyc rule safe?\n. What about factoring out that check to one of the TTCore headers and use in in the various places?\n. Thanks!\n'image' is set depending on the exactly this condition a few lines earlier, so what about checking for nil != image instead?\n. yep, sorry, that makes sense!\nchanging _imageView2.urlPath to item.urlPath might make it somehow easier to read, given that the other checks depend on item.urlPath, too (and they should be the same anyway)\n+1 for merging\n. Thanks for splitting up the huge pull request!\n+1 for merging\n. Thanks for the patch, vguerci.\nJeff: Thanks for the nice look into cell reuse and why this happens. \n. Looks good to me, too. \nJohn, are you going to merge this?\n. thanks!\n. IIRC this won't work on earlier BaseSDK versions where NSXMLParserDelegate was an informal protocol. I think there is proper fix somewhere else, where the protocol specification is ifdeffed.\nBesides that and as one should use a BaseSDK > 4.0 anyways, I'd say add it and also fix the other occurrences?\n. While I like the idea of being able to query the version in code, I'm not a fan of maintaining this manually 'in-code'. Additionally it'd be nice to have a commit hash, too.\nI must say I haven't really looked into Xcode/Apple's versioning stuff, e.g. agvtools, VERSION_INFO_FILE (Three20Core_vers.c) etc., but did you think about it?\n. Nope, sorry, haven't played with them, but pinged tonklon. Guess he'll comment later...\n. yep\n. looks good to me. +1 for merging\n. What about removing all those if(xxx.length) instead in -setObject:? \nsuper's - (void) prepareForReuse calls setObject:nil on the cell.\nThis seems to way the some other cells \"automagically\" handle it:\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTStyledTextTableItemCell.m#L119\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableSubtextItemCell.m#L120\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableCaptionItemCell.m#L116\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableActivityItemCell.m#L84\nOn the other hand TTTableMessageItemCell also uses prepareForReuse:\nhttps://github.com/facebook/three20/blob/2e0492d61a8d0a4af35f931c1d9cbc9dbd86c63b/src/Three20UI/Sources/TTTableMessageItemCell.m\n. oh, right. Thanks for pointing this out.\nOn the other hand the new prepareToReuse now creates imageView2 as it's using self.imageView2.XXX :/\nWhat about:\nself.textLabel.text = item.text;\nself.detailTextLabel.text = item.subtitle;\nif (item.defaultImage ||\u00a0item.imageURL) {\n  self.imageView2.defaultImage = item.defaultImage;\n  self.imageView2.urlPath = item.imageURL;\n} else {\n  _imageView2.defaultImage = nil;\n  _imageView2.urlPath = nil;\n}\nfor the relevant setObject part and omitting prepareForReuse?\n. Jeff, thanks for updating the patch.\nNow that I see the solution, I'm seeing another issue. The cell's imageView2 is re-instantiated on every reuse. This probably affects scrolling performance (not that I've meassured it....).\nWhat about just hiding _imageView2 (_imageView2.hidden = YES) and checking for that flag in the layout code?\n. hm, missed again the closing thingy and it had no merge commit :/\nclosed by 1fc10171048f3a4bd3adc99b7a6da29b394f1901\n. git merge --no-ff fix-TTFourBorderStyle \nMerge made by recursive.\n samples/TTCatalog/Classes/StyleTestController.m |    5 +++++\n src/Three20Style/Sources/TTFourBorderStyle.m    |    7 ++++++-\n 2 files changed, 11 insertions(+), 1 deletions(-)\n:/\n. Hm, not really sure what happened. \nAnyways, a simple git log before pushing would have shown it...\n. +1 on this from my side.\nI've removed this since quite a while in my code, too. \nIIRC it could also happen that during batched updates from CoreData the TableViewController scrolled to rows which don't exist yet.\n. Hi Alex,\nthanks for looking into this.\nI just saw the the LauncherView is supposed to update the currentPage when the scrollview ends scrolling:\nhttps://github.com/alexleutgoeb/three20/blob/272717d2848dbf490c3bc0c7718ea54f5897d24d/src/Three20UI/Sources/TTLauncherView.m#L738 which seems to be consistent to the iPhone's home screen.\nJust a guess, but are you calling this method with animated set to NO? Then the delegate might not be called and the pageIndicator isn't updated. I guess the fix for this, without changing current behavior might be to only call \n[self updatePagerWithContentOffset:CGPointMake(x, 0)];\nwhen animated equals NO?\n. Hi Alex,\nsorry, I pretty much forgot about this.\nThe last solution looks good to me. Thanks for looking into this!\n+1 for merging (@jwang)\n. Just for reference (my link list):\n- http://stackoverflow.com/questions/3034200/scrollviewdidendscrollinganimation\n- http://stackoverflow.com/questions/993280/how-to-detect-when-a-uiscrollview-has-finished-scrolling\n- http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIScrollViewDelegate_Protocol/Reference/UIScrollViewDelegate.html\n. Hm, this doesn't seem to be version 3.0 but some earlier beta of the 3.0 branch.\nI'm getting quite some warnings (shadowed parameters, - errorTracefrom not found) this one, anyone else sees them?\nEdit: see #618\n. also, there now seems to be a duplicate category on NSObject, one which probably crashes on errors:\nNSObject+SBJSON.m (old, crashes on error when calling errorTrace) and NSObject+JSON.m (current)\n. see #626 for an update\n. Cool! Thanks John!\n. looks good to me, +1 for merging.\n. Looks good to me. +1 for merging\n. see #625 for an alternate approach without the compiler change\n. Hey RafaelAlba,\nmind showing an example of where this is needed/useful?\nUIButton doesn't have a default image or maybe the commit message is misleading, and only the various button states (highlighted, selected, etc) get defaultImages besides their 'proper' ones?\nThanks!\n. Hey RafaelAlba,\nthanks for clarification.\nJust to make sure we're on the same page: This patch enables the different states of a TTButton to have a default image.\n+1 for merging\n. wrong base. closing...\n. this has been done with #742 including changes to the demo projects\n. This pull request has 2 different warnings:\n[...]/three20/src/extThree20JSON/Vendors/JSON/SBJsonTokeniser.m:325: warning: declaration of 'exp' shadows a global declaration\n/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.3.sdk/usr/include/architecture/arm/math.h:247: warning: shadowed declaration is here\nsee https://github.com/stig/json-framework/blob/master/Classes/SBJsonTokeniser.m#L325\nMaybe it should be changed to something like 'explicit_exponent'? (@stig)\n. stig, thanks :)\n. Closing this - #636 does the same and also fixes TTExtensionLoader.m\n. Thanks aporat!\nThis obsoletes #626 (and reminded me of missing pieces in TTExtensionLoader.m)\n+1 for merging\n. Good catch, thanks!\nMind basing the pull request onto development?\n. Awesome, thanks!\nI'm just looking into the TTNibDemo to see if some examples fit in there....\n. hm, after looking into this a bit, there are some things that probably need adaption.\nFor a sample app and some other changes, please see https://github.com/diederich/three20/branches/three20/issue16-nibsupport (sorry, but it seems I can't send you a pull request. When trying to, I can't find you in the list to choose from.. :/)\np.s.: another thing to note is that the identing and bracket style is different\n. hehe, thanks for the icon. Didn't know that.\nAnd thanks for changing all the floats!\n. That looks way better than the assertion. Thanks!\n+1 for merging\n. Oh, mind basing the pull request against development instead of master?\n. Thanks for 'rebasing'!\n. yup, thanks for the heads up!\n. While this might have quite an performance impact, I agree the default should be clearColor. \nDevs will find this issue during performance optimization anyways and can fix/change it then.\n. Hi thanks for the pull request. There are some minor formatting changes in the diff, but I guess that's okay.\nMerging...\n. Looks like there are already some interesting patches in this release, so I'd be okay to sign it off. \n@tonklon anything specific you want to see in 1.0.10? Otherwise I'd say move it to 1.0.11...\n. Never mind, this was fixed in the second patch...\n. Glad you like it. It's really quite useful for lager projects. \nNote though, this is not really how it's meant to be used. Projects don't need to be sub-projects of each other - projects within the same workspace can be linked together easily. It seems to me that support is improved in every Xcode release, so we maybe just need to be patient ;)\nAnyways, this is something to begin with.\nRegarding the \"junk files\": I've added them to have everything in one place. If this adds too much clutter, we can hide them in folders/groups...\n. Thanks!\nIIRC, this changed between iOS versions. Do you know when this changed, and shouldn't we make this work on older versions, too? If the old version is not needed anymore, you can remove the code instead of commenting it out.\nAlso, please make sure to target the development branch with pull requests.\n. Sorry for the misleading comment above. The flip of the context is necessary, as the coordinate system of Quartz is flipped and thus the mask needs to be flipped, too. You can find a working example of this in TTCatalog's styledViews part (StyleTestController - a head colored with a gradient).\nWhile I'm not really experienced in Quartz drawing, I just played with this a bit and here's an example that seems to do what you want:\nobjective-c\n [TTImageStyle styleWithImage:TTIMAGE(@\"bundle://bv2Es.png\") \n                 defaultImage:nil \n                  contentMode:UIViewContentModeBottomLeft \n                         size:CGSizeMake(100,100) next:\n    [TTMaskStyle styleWithMask:TTIMAGE(@\"bundle://bv2Es.png\") next:\n     [TTBlendStyle styleWithBlend:kCGBlendModeMultiply next:\n      [TTSolidFillStyle styleWithColor:RGBACOLOR(255, 255, 0, 1.0) next:nil]]]],\nThe idea is to draw the image, set the blend mode and then color the non-alpha parts of the image with a solid fill style. (workflow stolen from http://coffeeshopped.com/2010/09/iphone-how-to-dynamically-color-a-uiimage after a quick web search).\n[closing this pull requests, as images as well as masks need to be flipped when drawn with CG] \n. oops, wrong branch. sorry for the noise...\n. Thanks for bringing this up again. \nDid you have a look at my branch https://github.com/diederich/three20/tree/three20/remove-hard-coded-cell-mapping ?\nIt hold the original author's commits and on top of that a few changes. \n. Maybe we can combine the two approaches... I've rebased my feature branch at https://github.com/diederich/three20/tree/three20/remove-hard-coded-cell-mapping on top of current development\n. Hi adib,\nthanks for looking into this. Mind applying your patch set to the current development branch? Some of those things seem to be are already fixed.\nPlease make sure to target the development branch for your pull requests.\n. #761 targets the right branch, yes. please see my comments there...\n. adib, thanks for resubmitting with the proper integration branch.\nThis pull request holds some commits which should probably not be included.\nHere's what I would do:\n- checkout current development brach\n- create and checkout a new branch, something like 'silence-warnings' \n- git cherry-pick the commits you want, e.g git cherry-pick 2d6da20 etc.\n- fix any conflicts (that will likely appear, as some of the warnings have already been fixed)\n- resubmit the pull request\nHTH,\nstephan\n. ouch. something bad happened in that pull request, duplicate commits, unrelated changes. closing...\n. see https://github.com/diederich/three20/tree/remove-hard-coded-cell-mapping for an updated version.\n(and for initial discussions: #293)\n. hm, looks like this breaks the internal logic of the _files array, if there is more than one file.\nCurrently the _files array seems to expect exactly 3 parts: (data, mimeType,fieldName). See the loop here, especially \"i+3\" https://github.com/XBeg9/three20/blob/670d765990ad189893d139866f2c7efb5c3dc176/src/Three20Network/Sources/TTURLRequest.m#L239\nI guess this could be fixed by either adding always 4-parts (and thus an empty element if there's no fieldName), or e.g. by bundling the information in the array either in a custom object, or by using a dictionary.\nwhat do you think?\n. Yeah, thanks for taking the time to do this! \nFeel free to update this pull request with an adjusted fix!\n(+1 for creating a new pull request, targeting the development branch :)) \n. Thanks of looking into this and finding the right place to put it in ;)\nI have this enabled in my apps which still need to support armv6, too.\n. meh, wrong branch\n. Looking at the diff to development branch (https://github.com/facebook/three20/pull/785/files) this shows only a single file change + the project changes. See my comment on the file change.\nRegarding the Xcode update it looks to me that only LastUpgradeCheck was bumped. Nothing else to change? (IIRC Xcode asked me to switch to LLDB for pretty much all projects)\n. Looks good to me. Thanks!\nMaybe we can even drop Xcode 3 instructions?\n. Good point regarding the archive builds (I switched to the \"workspace model\" with Xcode 4 and also changed the header install paths so they are in the Debug/Release- subfolders). \nIf you want to drop the Xcode 3 stuff, I'd be fine with it. \nRegarding the pull request, please file a new one targeting the development branch. Then merging is just a button press for one of us.\nAgain, thanks for looking into this.\n. Nice, thanks. Any comment on why to use GDataXML?\nWhile I haven't done much with the TTExtensions yet, it looks to me that in the other extension (e.g. JSON) different implementation options are handled differently to your pull request. \nextThree20JSON has different targets to link against. E.g. there's extThree20JSON+SBJON.a if you want the SBJSON implementation, and extThree20JSON+YAJL.a for YAJL. While it might seem a bit complicated, it allows users to choose one or the other without changing Three20 source itself.\n. Thanks for adopting the structure of the JSON project. \nBesides the comments in the commit, this looks all good to me...\n. Thanks for applying the changes and sorry for the late reply. \n\"Seeing this, does it make sense to rename the other target, too?\" was just me being confused about the different xcconfigs. Once I figured it out, I deleted the comment ;)\nThe pull request looks good to me.\n. merged. Thanks!\n. Clean and straightforward. Thanks!\n. Thanks! Merged to development in 7ecbdac\n. Thanks for the PR. Three20 uses xcconfigs for easier build system configuration (especially diffs), so changing the values there instead of the xcconfigs would be appreciated.\nRegarding architectures, I'm not sure to drop armv6. Three20 is probably used in lots of legacy projects, so as long it's not needed (or still allowed to build for it), maybe leave it there?\nI'm not sure about the VALID_ARCHS vs. ARCHS changes. Isn't VALID_ARCHS for all the archs that are buildable, while ARCHS specifies the ones that should actually be built for the current configuration/SDK?\nI'd say we can remove the ivars instead of commenting them. Should be OK to leave them only in the Git history :)\nI've just merged another PR that only had the project updates. You might want to rebase on current development, see what's left resubmit (force push) this PR again.\n. Hm, not sure there's an issue with having armv6 in the library binary. The linker, when assembling the final app binary, should one pick those architecture out of the .a file that it needs in the executable. So if the app is built armv7 only, it should only take the armv7 part out of three20. Anyways, I guess armv6 must go in the near future.\n\nIt looks like you have a 'feature' branch in your repository named ios6_fixes. IIRC you should be able to update this pull request by just updating your branch in your repository. As this is going to change 'history' of the branch, you'll need to force push it. \nShould look something like this:\ngit fetch --all (brings in new three20 development changes)\ngit checkout ios6_fixes \ngit rebase -p origin/development (rebase the ios6_fixes branch on top of current development. This should be the most work. Some commits won't apply, some are already there, so you need to tell git to skip them,....)\nNow there should be a shiny new ios6_fixes branch that (while having nothing to do with the last branch) can be (force) pushed to your repo. If all goes well, this PR should be updated :)\n. NSXMLParserDelegate should have no effects, besides compiler errors when building against something < 4.0.\nMerged. Thanks!\n. Thanks! I'm not really sure about pragma'ing away those Keyboard notification warnings, but.. yeah :)\n. Hi infocube, thanks for the PR.\nDid you check if there's already a setting in one the xcconfigs that could be used to build armv7 and armv7s?\n. Hm, so you're dropping armv6 in favor of armv7s support?\nIs armv7s already an issue? Three20 is probably used in 'legacy' projects, so a missing armv6 might be an issue for more users. What do you think?\n. Thanks for the feedback.\nI'm not sure a warning in the README is enough, people seem to miss warnings from time to time, and ofc it can be easily missed by updating only a submodule. Having no source anymore should be quite clear :-)\nIs there a reason to keep the README and the source?\nIt might be a good idea to make the issues read-only, but I'm not sure this is possible. It also doesn't hurt that much, at least if no one is spammed by the mails :-)\nRegarding development branch, I guess you're right. If people still need to fix stuff, they can do it in their own clones.\nhttp://github.com/Three20 is also still open and should probably be closed down. @jverkoey are you in control of it?\n. @phillipuniverse Thanks for the input.\nWhat we basically want to achieve is that everyone gets three20 isn't maintained anymore. This should be clear when \n1) going to the facebook/three20 github page\n2) someone updates their git submodules.\n1) can be achieved by cleaning up a branch and setting it as the default branch. (either master, or the proposed non-maintained)\n2) must be done on the branch most people have checked out. So this is probably master or development. \nI've updated the README.md to point to Nimbus (and to the migration guide), as well as how to get back to the version before we removed all sources.\nRecap:\n- merge #833 to master to mark the final 'release'\n- merge this PR to shut-down development-branch\n- merge development to master (to cleanup master as well)\n- (optional: if someone really wants to do further bugfixing, revert this PR merge on development after merge to master, so that development can just go on :-))\n. :metal: \n. IIRC C can't do that. Need C++ for that ;)\n. ",
    "jamesgpearce": "Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. Facebook has not maintained or supported Three20 for some time, and we are closing its old and outstanding pull requests.\nMany, many thanks for your support of the project. If you have any further questions, please don't hesitate to let me know.\n. ",
    "holtwick": "[UI] New TTLauncherView delegate 'launcherViewDidEndDragging:'\nClosed by 411af8aa6a77ccf92bf863578a0e387e5a7b27ec\n. ",
    "thinktopdown": "TTSectionDataSource\n- Method for adding items\nTTListDataSource\n- Method for adding items\n- Method for removing items\nTTTextEditor\n- Getter for textView\nTTBaseNavigator\n- Support for mailto:// URLs (need to update the query parsing method to the new one)\nTTURLJSONResponse\n- Should check the content-type to ensure its json before parsing\nYAJL\n- Was crashing some bad json. This hack skips over null values\nTTURLRequest\n- Getter for URLs with params\n. awesome. let me know if i can help\n. eh yea. hit comment & close on accident. \n. ",
    "hellhound": "jwang, seems to me that 1.0.4 nor 1.0.5 have these issues fixed.\n. Doesn't work when deployed on pre iOS 3.2. Here's a solution for this http://stackoverflow.com/q/3001374/434423\n. Tres bien! at last!\n. ",
    "wlach": "Hey, sorry about not being more active on this. To be honest I haven't really been using three20 for the last 8 months, so my motivation for making the time investment to build the library and re-figure out what I did hasn't been great (as opposed to a year ago, when I had active projects on the go using the framework and everything checked out).\nI think the best way of proceeding would be to build on my work, fixing any omissions or problems with it that are found (e.g. hellhound's comments). For help with testing, I knocked up a really basic server using cherrpy that simply sends some static json with an etag header attached. Not 100% sure, but I think it should be sufficient for testing a lot of this stuff.\nhttps://gist.github.com/1014595\n. A little bit of both. :) I was using some ios proprietary libraries that a client had for a while and since then, I've moved on to mostly web/server development. I still think three20 is a great opensource library for doing this type of work.\n. ",
    "cdonnellytx": "Sure.  I'll try to hit the important ones.\n. Submitted new request; closing old one.\n. ",
    "jasoncabot": "[UI] TTTableCaptionItemCell height calculation for empty details.\nNow uses the height of the caption to determine the row height if\nno detail text is defined.\nClosed by b16566173a545bb389161853da2a1802386dd847\n. ",
    "johne": "it looks like this pulled my whole fork and not just the last commit like i was trying to do... \n. ",
    "jeanregisser": "I'm closing this pull request since I've created individual pull requests based off the development branch for each bug fixed:\n- https://github.com/facebook/three20/pull/482\n- https://github.com/facebook/three20/pull/483\n- https://github.com/facebook/three20/pull/484\n- https://github.com/facebook/three20/pull/485\n- https://github.com/facebook/three20/pull/486\n. It seems I have the same fix here: https://github.com/facebook/three20/pull/484\n. Yes that sounds like a good idea.\n. Why not merging this in?\n. If we just check for nil != image, then the case where there's an imageURL set but no default image and no cached image for imageURL, will be wrong:\n-> _imageView2 won't be displayed.\n. I haven't checked if TTTableSubtitleItemCell or other cells displaying images are affected by the problem I fixed in TTTableImageItemCell.\n. ",
    "vguerci": "had the same issue... and wrote exactly the same fix! So I confirm it works...\nI wished I looked at pull requests first, that would have saved me some time...\n...or better that pull request has been accepted :)\n. for information, this fix is a must have if you want to use a TTStyledTextTableItemCell in a table with grouped style, otherwise text is not aligned and cell is over the rounded corners on top and bottom of sections\n. great :), closing my request.\nthanks for your contribution.\n. doesnt really matter but that's YAJL and not JAJL\n. that's the point 2. he's waiting for you to do 1. :)\nI guess he cleaned all the xcconfig files from -all_load / -force_load :)\n. I was doing exactly the same changes when I received these comments notifications.\nGot exactly the same resulting diff, except that I cleaned unused variables :*_LIB and OBJC_ALLLOAD in Librairies.xcconfig and also one OBJC_ALLLOAD in samples/common/Configurations/Unitests.xcconfig\nAnd I confirm it works on an own project I'm currently working on.\n. Everything building fine on my side, also did some greps on three20/ to check I wasn't forgetting references.\n. This feature badly missing imho, thanks for submitting that pull, I'm interested by.\n. Currently testing it, replaced previous pull by this one, I'm submitting an app to Apple today with this...\n...And working flawlessly so far! thanks Eric.\n. I tested this on TTCatalog sample in table control items view.\nThis code is only called once when UITextfield swapped by TTTextview.\n. No, I can be really stupid sometimes, but not enough to add the same control several times... :)\nThis bug is easily reproductible with TTCatalog, in the Table Controls sample :\n1. type some text in the first two fields (that will show up keyboard and reduce visible space)\n2. scroll down > UISwitch is missing, or worse, appears then disappears\n\nIt is not a systematic bug, because related to events ordering, if you don't reproduce it using the above procedure, change field selection/text typing ordering/number.\nThis bug occurs when you have more controls than visible rows, on table scrolling, on cell reuse there are cases where two cells holds the same control at the same time, leading to one adding it, the second one removing it.\nAs a side note, I noticed TT cells setObject: implementations are generally not clear regarding reusing, prepareForReuse might be a better choice than obscure setObject: tests / variable set/unset...\n. about last point, yes It would be great to clean all of this in another issue(s). I know from memory that there are already several existing issues/pull requests about this point, concerning different cells.\nAs a side note, that fix works, but I presume there is a cleaner solution, maybe involving prepareForReuse, but that would require more testing...\n. btw, that's unrelated to extension system, that's just debug code that raise a warning since last update: facebook/three20@c8d1155\n. @seqoy, thx, sorry I did not have the time yet to give a detailed look at your pull request, but looks great so far. (right now github diff looks a bit strange to me, unrelated files changes and unresolved merge conflicts)\nAh, didn't noticed @jwang merged my pull request, thanks also!\nI hope I'll have some time soon to review all of this, and maybe we could propose one unified solution. (I smell redundancies, but maybe I'm wrong)\n. @seqoy Maybe in Project > Build Phases > Copy Headers ?\n. Look at other three20 project settings for copy headers (public/private), and just replicate the logic. That works, but make sure to clean, of even delete .../DerivedData/xxx / Build folder... and maybe even reopen project before rebuilding... I remember some caching issues.\n. @seqoy Sorry but I'm currently pretty busy, I would be surprised if I find the time to merge latest three20 modifications in my project (including yours) this week. But from what I see, my macro was a quick (but not so dirty) approach to enhance extCSS features w/o rewriting many code like you did. Imho, now you did the job, I'm not sure this macro is really that useful and should probably removed...\n. ",
    "cemaleker": "Test case added to TTCatalog\n. [UI] Fixed a bug caused by touchesEnded event not being received.\nUIKit sometime couldn't deliver messages for UIResponder properly.\nThat causes application to crash when application can't receive\n\"touches ended\" and later tries to reach ended and released UITouch\nobject. I implemented proper retaining for UITouch objects. And\nalso I implemented an ensure touches method which checks touch\nphases and release them if ended and we couldn't receive ending\nmessage somehow.\nSolution for the issue discussed here:\nhttp://discussions.apple.com/message.jspa?messageID=7139722\nClosed by 8a9fde5c4ca0a46ef0c619705ef54b4b5f0db1ef\n. I'll try to add a repro case for tomorrow. \nThere could be a better solution for this. I just needed a fast solution to release my current work, and added my result for fixing the current code here. \nFor now you can delay pulling that fix. I'll try to find a better solution. I'll add my results. \n. Added a better solution.\nShowcase for the bug can be found in repro-ttnavigator-tabbar branch at my fork.\n. @PabloGS this was the latest solution for problem and still being used in many applications without causing any bug. I am looking forward for this fix being pulled.\n. ",
    "steipete": "wow, thanks for the link!\n. Add 2x variants of forwardIcon/backIcon.\nReplaced original icons with copies from UIKit.\nClosed by 390f5b6b54bb25f4d614876a9b4e5870a4839460\n. So Jeff, basically, you're keeping the warnings because they are by design?  (only talking about d61bcaf now)\nWith changing them to explicit variables it's much more clear that those calls actually DO something IMHO.\ncheers,\nPeter\n. I'd vote for being warning-free, I treat warnings as errors and they obviously are more than annoying then.\nBut it should be documented that this is because of design flaws .\n. a one-liner prior those \"hacks\" with an short note and an url\n. Yea, you did lots of progress, great job!\n. I guess so. Those are extracted from UIKit, the same as Photos.app uses internally.\nIANAL but as long as this library is iOS only, it shouldn't be a problem.\n. too bad, but thanks for the info.\n. Hmm with all this legacy code it's hard to tell. At least for me it never worked in my screens, until i digged in and found the line.\n. doh github somehow merged this with earlier pull requests...\ni'll fix that, sorry.\n. ",
    "snowmen10": "I was searching similar solution to this. It's not in the 1.0.4 release nor 1.0.5 release though.\n. ",
    "mmorearty": "I, too, would love to see baseline issues get fixed, but unfortunately I think your proposed fix causes other problems, Fred.  I have a sample app that makes a table whose data source include this:\n- (id)init {\n  if (self = [super init]) {\n    self.items = [NSArray arrayWithObjects:\n      [TTTableStyledTextItem itemWithText:[TTStyledText textFromXHTML:@\"hello <span class='bigger'>world</span> it's me\"]],\n      nil];\n  }\n  return self;\n}\nMy stylesheet defines a class called \"bigger\" that is just a bigger font:\n- (TTStyle*)bigger {\n  return [TTTextStyle styleWithFont:[UIFont systemFontOfSize:36] next:nil];\n}\nHere is what is looks like without your change and with your change.  As you can see, it looks better without your change.  (It still doesn't look quite right -- the baseline of the word \"world\" isn't quite lined up with the other text -- but that is true in both images, and doesn't have anything to do with your code.)\n. It turns out that a long time ago, Joe Hewitt added the specific change you are proposing here, and then later he removed it.\nIn revision 1196ab4fc37795cc2ea2c97799d68227af50dc99 on 4/28/09, he added _lineHeight ? _lineHeight : to two places in the code, without much explanation (the comment on that commit seems to have more to do with other changes made in the same commit).  Then in revision 2b0f3923b78e6672a2261f0aaffd5205a4a11c64 on 8/9/09, he backed out one of those changes, with the comment, \"Fixed: vertical alignment issues with small font after large font.\"  Which is exactly the case I was pointing out in my previous comment.\nI actually think that _lineHeight ? _lineHeight : should not have been added to either location in the code.  I'm going to log a separate bug on that.\nBut I also found, as you did, that the code in breakLine that attempts to align the baselines is incorrect.  I'm going to log that too; I have a fix, and I'm hoping it will fix your case.  Stay tuned...\n. John, sorry for the delay.  I have now submitted the pull requests: facebook/three20#377 and facebook/three20#378\nFred, I would be interested to know if these patches (especially the first one) fix your issue.\n. ?!?  Sorry, I'm new to Github, and I don't really understand what's going on here.  My intent was to attach only change bfc6959 to this pull request, but now two more of my commits are also showing up attached to this pull request.\nMy guess is that I first logged the pull request, and then made two more checkins to my fork, and Github displayed all three of my changes on this single pull request, even though the pull request was created before the two later checkins.  But I'm not positive about that.\n. [TTCatalog] TTTableTextItem label now \"TTTableTextItem\" instead of \"TTTableItem\".\nClosed by 0c6765a16ad911d3db5722758e36f668d1a6b904\n. On this and on facebook/three20#378, you wrote, \"scheduled for 1.0.4 release. I'll be pulling this in for testing this week.\"  Did these fall through the cracks?  Nothing appears to have happened with them.\n. That's true, but that is iOS 3.2/4.x only.\n. aporat: I'm not really sure.  I sort of doubt it.  Here's how the code works, and what my change does:\nIf a TTModelViewController (or any subclass of that, including TTTableViewController) starts loading the model, it call [self showLoading:YES], to show a \"Loading...\" screen.  In the TTTableViewController subclass, the showLoading function creates a new view and displays it.\nLater, when the model is done loading, TTModelViewController decides what to do next.  If the model encounters an error, then TTModelViewController calls [self showError:YES].  Or if the model is empty, then it calls [self showEmpty:YES].  Or in the normal success case, it calls [self showModel:YES].\nTTTableViewController handles showError and showEmpty in a similar way to how it handles showLoading: It creates another view and displays it.\nBut the problem comes in when a memory warning is issued.  The state of the TTModelViewController ends up getting confused.  E.g. suppose it previously called [self showEmpty] -- so it thinks it is now showing the \"empty\" page (and it is).  But then, while that view is offscreen, a memory warning comes in; so iOS \"unloads\" the view.  -[TTTableViewController viewDidUnload] gets called, and it destroys all the views that are associated with the empty view, error view, and loading view.  But the base class TTModelViewController thinks that (in my example) the \"empty\" view is still being displayed.\nMy fix is to change the TTModelViewController so that when a memory warning occurs, it explicitly resets its state.  That way, if the view gets loaded again later, TTModelViewController will know what's going on and will be able to restore its state.\nThe \"banner\" case is similar, although some of the details are different.\nSo...\nAs for the case you described, it isn't really clear to me what's going on.  When the camera picker starts (and loads its own modal view controller), that certainly shouldn't cause any other view controllers to be completely destroyed when a memory warning occurs.  It's odd to me that just saving your controller in your app delegate would fix this.  All that does is increment the refcount of the controller, thus preventing it from being destroyed; but that shouldn't be necessary.\n. @jwang Verified.\n. I reviewed @buddydvd's pull request for this change (which was here: https://github.com/mmorearty/three20/pull/2 ), and decided not to take it.  It's a tough call, in my opinion.  Here's what I wrote on that page:\n\n@buddydvd, thanks for the pull request; but after thinking about it, I don't want to merge this pull request into my fork. I'm torn about it, but I think leaving the code the way it is is better.\nIf we make this change, and rely on the comment on the header file in order for people to avoid a memory leak, then essentially we are changing the contract for tableBannerView: Previously, there was no expectation that tableBannerView be set from viewDidLoad, and now there is. And what this means is, code that existed before now, and had this bug (the table banner view would suddenly disappear whenever a memory warning occurred), will still have the bug.\nI prefer to change the code so that it fixes the bug while still adhering to the previous contract (that is, that the caller can set tableBannerView any time they want).\n. @buddydvd ok, done.  @jwang this pull request is ready for merging.\n. \n",
    "PabloGS": "Hey guys.. Whats the status on this and what are your findings? I've been using this fix without any issues in my apps. Can you put this into 1.0.6?\n. The one in 48A12FF:\n- (UIViewController*)topSubcontroller {\n  if (self.tabBar.selectedItem == self.moreNavigationController.tabBarItem) return self.moreNavigationController;\n  else return self.selectedViewController;\n  }\nWhere can I find the better solution? I will test it if I have time.\n. Be sure to close Ticket #74 once this is pulled.\nhttps://github.com/facebook/three20/issues/74\n.  diederich is right.\nThe addition to setObject fixes this issue.\nprepareForReuse seems to cause problems if there is a \"Load More\" at the bottom. The activity indicator will not display correctly if the prepareForReuse is added.\n. I can confirm this bug and fix.\n. ",
    "PEZ": "Was there any problems pulling it? It's not there in 1.0.5.\n. Oh, I wasn't aware I was supposed to fix those. Let me see if I get this straight. I should checkout the development branch, apply the bug fix there and then issue a new pull request?\n. Oh, cool! I'm testing the development branch out right now. I can confirm that URL:s are now inactive and active when I want them to. But I get some other strange problems. Crashes even. Where is a good place to discuss them? I don't have an awful lot of clues, but anyway.\n. ",
    "hongrich": "Never mind. This seem like a pretty useless change.\n. I believe the removal of those lines are what fixes the issues when POSTing files. I have not tried this patch directly, but I did remove those 2 lines just to fix the problem with POSTing files.\nCould you try just remove those 2 lines but not use the rest of the patch to see if things still work?\n. The boundary problem seem to have already been fixed in this commit abd35ca04a0c9e4f95bf9c22c55ee191ae086316\n. ",
    "tonklon": "This is something I have been missing, too. Thanks a lot for your work.\nFew thoughts on this:\nstringByEncodingAsURL should take an NSStringEncoding as argument and use this for the encoding instead of hardcoding NSUFT8StringEncoding.\nI think stringByEncoding__For__URLUsingEncoding: or stringByURLencodingStringUsingEncoding: do better describe the method.\nstringByAddingQueryDictionary: has been in Three20 for a long time, changing it's behavior is likely to break a lot of code, since people have been used to urlencode their arguments before sending this message, and will therefore end with doubly encoded values. And it does not take an encoding as parameter, as discussed above.\nIMHO we would need a new method called stringByAddingUrlencodedQueryDictionary: usingEncoding:\n. I could implement it, if you are fine with my suggestions and pazustep doesn't do it.\n. This is one reason why I was suggesting to not change any existing methods, but instead only add new ones. And by implementing I mean implement the method, document it and implement unit tests.\nI must admit I haven't looked were stringByAddingQueryDictionary: is used inside Three20 Code.\n. I just created pull request #644 which addresses this.\nIMHO this request schooled be closed and not merged.\n. Mentioning works. I'll look into that next week. I think Apple generic version tool can be of help here.\n. No, agvtool wont help here. It assumes the version is a double.\nFrom agvtool(8):\nThe target of a versioned project will have two global variables generated and linked\ninto your product.  One is of type double and is simply the CURRENT_PROJECT_VERSION. \nThe other is a version string which is formatted to be compatible with what(1). These variables\nare available for use in your code.\nAnd even if this would not be the case, it is not possible to include the version number into the documentation this way. Doxygen runs the standard C preprocessor before generating documentation, but we would need a #define holding the version for this to work.\nSo I think a dedicated version header holding a preprocessor definition of the current version would be the best way I can see. This should be accessible by Doxygen for the docs and by the Three20 class.\n. I have no idea at all.\nBut Three20Version.h looks good to me.\n. This is not the only urlencoding problem in this method. The keys for example are not encoded at all. Please see related pull request https://github.com/facebook/three20/pull/387.\nI think the urlencoding should be solved in a new method, taking the string encoding into account. IMHO this method should be left untouched to retain compatibillity with existing code.\n. I will look into this.\nNothing about bracket style is explicitly mentioned in the style guidelines, although all examples over there use the line end opening bracket. I was trusting the linter there. I will fix.\np.s.: perhaps someone could update the code style guidelines. (They do not mention the empty line before else, too)\n. @jwang I will look into this and find out which is the right fix. I have to admit, that I introduced this bug with 604a5faa71161652403a5e7aff62ffe84a70984f\n. merged into development\n. merged into development\n. I too think d2bf8d20ad391b4c05d0d95f4f5f472c968f2295 is a different problem.\nNevertheless d2bf8d20ad391b4c05d0d95f4f5f472c968f2295 was already pulled with request #700\n. I don't think it's a good idea to add the appledoc binary to the repository. People can get the doc feed from gh-pages. If they want to generate it themselves they could install appledoc. Also the template files are missing, so this setup is not working right now, because users that do not have the templates in ~/Library/Application Support/appledoc will not be able to generate documentation.\nI would prefer to use an AppledocSettings.plist file to specify project-settings instead of a script. That would separate configuration from code.\n. appledoc 2.0.5 was indeed broken, but was already fixed again. I will prepare a settings file.\n. #721 was just merged on master and fixes the very same issue.\n. There are 7 open issues scheduled for the 1.0.10 milestone. Shouldn't we work on them before? Is there any need to release a version right now?\n. No, I'm generally fine with releasing now, I just don't like to reschedule things.\n. Ugh, a lot of cosmetic changes between real fixes. IMHO cosmetics should have their own commit(s).\n. Great idea, but I personally do not like the fact, that it is hard coded and cannot be switched off. It should have a switch to turn off. I'm fine with on as default.\nRationale\nI use TTTableViews together with dataSources and Models that do not come from the web, and/or do not support reloading. And although it might make sense in the vast majority of cases the just hit reload, there could be errors, for which reload just doesn't make sense.\nAnd I am using TTErrorView in different places then TTTableViewController. That might be my fault, because the directory structure say it belongs to the table View.\nThis is only my personal opinion, don't know how others think about it.\n. I don't like that fix. IMHO in a situation like this an Exception should be thrown (internal Inconsistency). But if the OS interferes here this is not an option. Do you have an example to reproduce the problem?\n. Could you place describe what this is supposed to do? What do I have to do to see the difference before and after that commit?\n. Thanks a lot.\n. The first section used to be 10 points higher. Optically all header are the same height, because all following header are preceded by a 10 point default footer from the section above.\nIf this distinction is not made all first sections of grouped tables will be visually shortened by 10 point.\n. Xcode does not let me write static const CGFloat kGroupedSectionFirstHeaderHeight = kGroupedSectionHeaderHeight + 10.f;, which I would prefer. It says this was not a constant expression. ???\n. ",
    "thestoics": "Great, I only noticed the issue recently when I encountered an unusually strict Web API.\n. See Pull Request #593\n. Alright, so I've merged the latest from master onto my development branch, resolved the conflicts, which appears to be trivial (spacing) and added those commits to this merge branch. Note, there is a revert of a commit for a network semaphore that is no longer apart of this pull request.\n. I get it now. My eyes were equating development with master. New pull request submitted.\n. It was a small conflict (initializer). Should be resolved. I've been a merge maniac (it is weird to merge remotes outside of your fork).\n. @jwang Thanks, that is a good technique to manage remote branches outside of your own fork. \n. Looks good!\n. I approve!\n. Should this close issue #676 as well?\n. ",
    "savanah": "whoops ... bad commit ... better pull request soon\n. OK, that wasn't really that awful.  Issued a new pull request 456 with the change.\n. How about I put a big comment around the stylistically offensive block of recycled code, integrate your other comments, and add a demo in TTCatalog.\nI'll make a new branch and new pull request with that.  (Big fan of atomic commits me.)\n. I rebased on the current development branch.  (Actually had some merge conflicts, which I think I merged correctly.)  I'll be issuing a new pull request shortly.\n. https://github.com/facebook/three20/pull/455\n. (Could have sworn I answered this once before... maybe didn't hit \"comment\" hard enough?)\nAs I recall it got me out of an infinite recursion problem.  I'm unable to reproduce it now, either because something else in TT networking has changed, or because I don't remember how to reproduce.  \nIf the former then the extra method is a little confusing but harmless.  If the latter than someone else will figure out how to reproduce and be sad.\n. I think I see what's going on.  I based my changes on facebook/development, but then when sending the pull request failed to change the \"base branch\" in the pull request.\nToo bad github doesn't allow you (the upstream \"facebook\" repo) to specify which branch you'd like pull requests to be based on.\n. Heh, I typed \"based my changes on facebook/development a38a6c4379315420fc5bd8efa52399a45080662d\", but put square brackets around the SHA.  And poof the square brackets and the SHA disappeared.\n. I suspect there aren't many applications that will want to use both patterns in the same datasource instance.  Mostly I'd love to see this accepted into facebook/three20 ... I'm starting to build sample apps that depend on this feature, and it doesn't feel right for those to reference my fork.\n. Et voil\u00e0 - https://github.com/savanah/TTURLRequestModelSample - demonstrating a TTTableViewController with custom cells fed by a TTURLRequestModel\n. See https://github.com/facebook/three20/pull/540 based on the develoment branch\n. Is there a reason not to use the section number as the key?  I guess it might be possible a single delegate would be responsible for more than one tableview...  maybe make a key out of the UITableView* and the section number?\nStill, this is bug compatible with current three20, so that problem is orthogonal to the feature addressed by this pull request.\n. Can you expand on that?  \nAs I understand it, the UITableViewCell mechanism expects the delegate to group reusable cells by an identifier, and the table itself manages a queue of available cells that the delegate can request at the appropriate time.\n. Kind of hard to parse your response, but I think we're in agreement that the UITableViewCell caching mechanism is of no help here.\n... and the key thing we need to come back to is that this issue of caching header views by title is unrelated to this pull request.\nComing up with a new way of caching headers (perhaps a setting on the delegate or datasource skips caching altogether?) sounds like the work of another branch / patch / pull request.\n. ",
    "elliotb": "Is this scheduled to be included in three20? It looks like it could be incredibly useful.\n. The Burstly ad mediation library also conflicts with -all_load.\n. I wonder if it would make more sense to check [object cellClass] after checking itemCellClassMapping. That way, objects can have default cellClass's, and individual datasources can override that using itemCellClassMapping if needed.\n. ",
    "echamberlain": "Nevermind, I figured it out.\nI'm going to close this pull request, fix the code, and submit a new one based off of development.\n. This pull request was replaced by pull request #436.\n. Using something like:\n\n#define TT_BADGE_ERROR NSNotFound\n...\nitem.badgeNumber = TT_BADGE_ERROR;\n\nto abstract the error flag?\nOr in general changing from badgeNumber to allowing for any string value?\n. Ok, I've made some changes, is there a way to update a pull request, or do I need to submit a new one?\nThe changes modify TTLauncherItem to support both badgeNumber and badgeValue.  Behavior matches UIApplication applicationIconBadgeNumber and UITabBarItem badgeValue.\nI also updated TTCatalog to show the new uses in the TTLauncher demo.\n. I submitted a new pull request, #411.\n. [UINavigator] Added support to TTURLMap for the file scheme.\nClosed by c9bfa1e3ef51700f1549a8594f9d4d374949d903.\n. The conflict is with xmppframework, specifically libidn.\n. More info, libidn.a is a fat universal library when we add the -all_load flag, we get the following errors:\nUndefined symbols:\n  \"_libiconv_open\", referenced from:\n      _str_iconv in libidn.a(striconv.o)\n  \"_libintl_dgettext\", referenced from:\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _pr29_strerror in libidn.a(strerror-pr29.o)\n      _pr29_strerror in libidn.a(strerror-pr29.o)\n      _pr29_strerror in libidn.a(strerror-pr29.o)\n      _pr29_strerror in libidn.a(strerror-pr29.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\n  \"_libiconv\", referenced from:\n      _str_cd_iconv in libidn.a(striconv.o)\n      _str_cd_iconv in libidn.a(striconv.o)\n      _str_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n      _mem_cd_iconv in libidn.a(striconv.o)\n  \"_libiconv_close\", referenced from:\n      _str_iconv in libidn.a(striconv.o)\n      _str_iconv in libidn.a(striconv.o)\n  \"_libintl_bindtextdomain\", referenced from:\n      _idna_strerror in libidn.a(strerror-idna.o)\n      _pr29_strerror in libidn.a(strerror-pr29.o)\n      _punycode_strerror in libidn.a(strerror-punycode.o)\n      _stringprep_strerror in libidn.a(strerror-stringprep.o)\n      _tld_strerror in libidn.a(strerror-tld.o)\nld: symbol(s) not found\ncollect2: ld returned 1 exit status\n. None I can think of, other than developers being aware of having to add the code fix to any new categories referencing objects in static libraries.  \nWe've been using this fix in our App Store live code since early December without any issues.\n. Also fixed in pull request #421.\n. Will rebase and resubmit.\nAgreed on the #import, but it was much easier to copy and paste at the bottom. :)\nSince the fix is going to be adopted, I'll move it to the top.\n. I've moved the #import to the top.\nI also moved the fix macro before the @implementation, it's easier to confirm that the fix macro is present.\n. This pull request is a mess, I'm not sure why so many commits are included.  I will close and resubmit.  \nThe new pull request is #422.\n. I'm new to git.\nWhere is Categories-samples?\n. I understand now.\nThe rebase is done.\n. I've pulled and pushed the samples.\n. Let me play around with this a bit more.\nI think we need to either check if the keyboard will appear and then wait for it to finish, or tell the keyboard to appear/disappear and then notify the super view controller.\n. I've replaced this pull request with a simplified version #442.\n. Done.\n. By your command.\n. Needing to set the statusBarStyle before launch adds some complexity that the other settings don't have.  Stylesheet integration would be great, but would add a style dependency to UICommon.  Maybe TTBaseViewController should use the application statusBarStyle and TTViewController's subclasses in UI should check for a setting in the stylesheet?\n. I'm not sure why the controller retains itself.  Dealloc is called when the release happens.\n. The keyboard is the last animation to finish.  But, I just finished testing with a wireless keyboard on the device, the keyboard doesn't appear, so this won't work.\nDoes calling this after we tell the keyboard to appear make more sense?\n. ",
    "eventualbuddha": "This pull request has the wrong target branch, please use #414.\n. ",
    "deltheil": "+1 I've observed the exact same problem on my own and planned to submit a similar pull request. Even though I didn't extend the test suite, I've not observed any kind of regression within my app so far.\n. ",
    "olegueret": "You are totally right, sorry for that. \nFixed in my add-strong-em-parsing branch\n. Done.\n. ",
    "nodemaker": "If anyone wants to delint all the files in their own project using the lint tool u can use something like this as your xcode script.\n``` perl\n! /usr/bin/perl -w\nuse strict; \nuse File::Basename; \nuse File::Path; \nget path to document\nmy $projectroot = \"path to project root dir\"; \nmy $lint = \"path to lint script\";\ndelint the header files excluding the libraries folder\nfind $projectroot -iname \"*.h\" ! -ipath \"*/Libraries/*\" -print0 | xargs -0 python $lint -d -l500;\ndelint all the implementation files excluding the Libraried Folder\nfind $projectroot -iname \"*.m\" ! -ipath \"*/Libraries/*\" -print0 | xargs -0 python $lint -d -l500;\nexit;\n```\n. Merged with pull request #586 \n. Or we can simply add the protocol NSURLConnectionDataDelegate to TTRequestLoader.Either way works. \n. My Xcode inserted the indentation by itself.Let me fix this and submit a patch.\n. Done.Should I merge these two commits and submit a new pull request?\n. ",
    "taknology": "Wow, really?  Ok.  Let me see what I can do. Each enhancement right?  So TTStyledTextParser.m in one, TTLauncherItem.h and TTLauncherItem.m in another and Pbxproj.py in a third?\n. I'm really new to Git commits so this may take a bit.  I'll give it a whirl.\n. Not currently.  This change was made with the assumption that Three20 would be added to a fresh now project. Have not looked at support for workspaces yet. I come from the workd or Windows development so if Xcode4's workspaces work similar to the way Visual Studio handles workspaces that it's going to be sweet.\n. Ok.  I have submitted a new pull request. This could get tedious as I can only submit one pull request at a time.  Once this pull request is approved I can submit the other two.\n. Ok, cool.  I figured it out.  Total newbie with Git, but I must say I like the concept.  I don't know how many times I have seen SVN repositories get corrupted due to poorly managed commits.\n. Hi Jeff,\nI will try to do that tomorrow for these commits.  I'm working toward a hard deadline and it's approaching way too fast.\nThanks\nTony\n. You're very welcome. I'm glad to give something back to such a great project.\n. Hi Jeff. I have added a new pull request for this file change from the development branch of my fork. If you could have a look and let me know if I have done this right this time that would be great.  I'll wait for confirmation before I do my other two changes.\nThanks,\nTony\n. I followed the pattern used for userInfo throughout the rest of Three20. All other classes doing this are using assign so I'm hoping that is the better choice :)\n. Wow.  Ok. I'm really not getting the hang of this Git SCC.  I'm afraid to commit the other changes now :).\n. Sorry John.  Want me to pull this back and fix it?\n. Thanks John.  I am working on sharing a bunch of other modifications I have made.  I read Jeff's email on the linter tool he sent a short time ago.  Do I need to do something to get it to work automatically?  I don't see that in the email and Option-D does not appear to be doing anything.  I'm on Xcode 4 if that makes a difference.\n. Scratch that.  It appears it did run.  Here is the output for the linter for the Three20UI project that includes my change.  It's not reporting any issues.\nPhaseScriptExecution Lint ../../Build/Three20UI.build/Debug-iphonesimulator/Three20UI.build/Script-668E65E7131ADFCA00ACE4AB.sh\n    cd /Users/tonylewis/Repositories/three20/src/Three20UI\n    /bin/sh -c /Users/tonylewis/Repositories/three20/src/Three20UI/../../Build/Three20UI.build/Debug-iphonesimulator/Three20UI.build/Script-668E65E7131ADFCA00ACE4AB.sh\n. I'd be happy to. Is there a specific format in which the documentation should be added? Do you have an example?\n. Ok. I have added basic information to the header file to indicate support for the two properties (class and href). Do I need to submit a new pull request or will the changes be incorporated since they went to the same branch?\n. Scratch that. I should have read a little closer.  I changed the parser header file and not the button node header file.  I'll add to button node header file and send a pull request for that file.\n. Ok.  I think we are all set now.  Changes updated and committed. \n. I think I am finally starting to understand Git\n. I have not had an opportunity to go back and fix the documentation issues and I don't really have time right now so I am going to go ahead and close this pull request for now.  I'll resubmit at a later time.\n. ",
    "alhafoudh": "Does it work with Xcode4 GM 2? I am having header search path problem. Is it only me?\n. ",
    "rogchap": "+1 for merge Xcode4 is now released!\n. This fixes issue 73: https://github.com/facebook/three20/issues/#issue/73\n. +1 for merge\nWill this effect other table cells like TTTableSubtitleItemCell?\n. FYI....don't know why I typed \"port\" when I really mean \"post\" :)\n. I've split out the new functionality so this should make sure it doesn't break current implementation.\n. @RafaelAlba What errors are you getting? I'm using this patch in all my applications that use both GET and POST requests with no issues. \n. Are you getting the 500 on GET requests or is it only POST requests? What web server are you using to run Rails? Apache or Nginx (with Passenger)? \n. I've tested this and it seems that it is web server specific: \nWhen testing with IIS it fails with the extra boundary and succeeds without it, and Nginx seems to be the opposite: ie falis without the extra boundary and succeeds with the boundary line.\nI need to understand more about post data / multipart forms / boundary to figure this one out.\n. I'll update.\nNot sure what to do on the POST problem. I've spent quite a lot of time on comparing \"post\"s from regular website form vs three20 (or any iOS project) using web proxies to check on the requests etc. I'm sure the extra boundary is wrong.\n. You should check other pull requests before making a new one. This fix already exists: https://github.com/facebook/three20/pull/467\n. ",
    "rikkert": "Why are you using a TTStyle for the tableHeaderGrouped var and returning a TTLabel?\nIsn't it more persistent to use TTTableHeaderView with perhaps different style vars for a grouped header?\n@jverkoey when can we expect this to be merged into master?\n. @jwang any eta on pulling this one in?\n. ",
    "kemenaran": "Here is one example:\n```\n@interface FooController : UIViewController\n@end\n@implementation FooController\n- (id)initWithNibName:(NSString )nibNameOrNil bundle:(NSBundle )nibBundleOrNil {\n    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];\n    if (self) {\n        self.modalPresentationStyle = UIModalPresentationFormSheet;\n    }\n    return self;\n}\n@end\n@interface AppDelegate : NSObject \n@end\n@implementation AppDelegate\n- (void)applicationDidFinishLaunching:(UIApplication *)application {\n    [[TTNavigator navigator].URLMap from:@\"tt://modal\" toModalViewController:[FooController class] transition:UIModalTransitionStyleFlipHorizontal];\n    TTOpenURL(@\"tt://modal\");\n}\n@end\n```\nDo you need a full unit-test implementation?\n. I'll be glad to have this merged: it just got the commits manually from the kosher-penguin repo, because I needed the feature.\nFrom my point of view, it works flawlessly. This would be a nice addition to Three20's trunk.\nAnyone to do the merging?\n. I wrote an example when opening the Pull Request, and decided to keep it aside fro brevity's sake :) Anyway,I kept it somewhere, so here it is :\n(see below, wrong button clicked.)\n. An example of messed up parentViewController hierarchy can be the following hierarchy of view controller :\nUITabBarController\n  -> UIViewController1\n    -> UINavigationController(Modal)\n      -> UIViewController2\nIn this case, on iOS < 5, the parentViewController of UINavigationController is the UITabBarController \u2014 instead of the expected UIViewController1. iOS >= 5 has the expected behavior though.\nThis causes Three20 to try to set UINavigationController as the selected controller of UITabBarController (when the TTNavigator loops over newly created controller to ensure they are actually visible, by sending -bringControllerToFront: messages recursively).\n. ",
    "jkubicek": "I can't test this fix right now, but I'm pretty confident that the issue is much more subtle than just removing the additional \\n. Have you tested this change to make sure that the view reliably swaps between the UITextView and UITextField subclasses?\n. ",
    "dimitar-lazarov": "I don't agree with the vguerci's fix. It doesn't work when the first typed char is new line. It looks like the problem here is that textFieldShouldReturn method is called before the new line char is passed to first responder and UITextView receives it when it is reassigned in the same method - so the new line becomes doubled. \nI think better solution is to return NO in textFieldShouldReturn method, so the new line char will not be passed to first responder. Also I think that will be better if UITextView and UITextField are swapped not when Return is pressed but after first char is typed in UITextField, and swapped back when user delete all chars. This will fix also the issue when user changes cursor position in the middle of typed text and press Return.\n. ",
    "dineshRajpoot": "I agree with intruder. Returning no in textFieldShouldReturnMethod helped me in solving this issue.\n\ndiff --git a/src/Three20UI/Sources/TTTextEditorInternal.m b/src/Three20UI/Sources/TTTextEditorInternal.m\nindex 2db4ce9..afbf6b8 100644\n--- a/src/Three20UI/Sources/TTTextEditorInternal.m\n+++ b/src/Three20UI/Sources/TTTextEditorInternal.m\n@@ -216,6 +216,7 @@ TT_FIX_CATEGORY_BUG(TTTextEditorInternal)\n   }\n\n[_textEditor performSelector:@selector(didChangeText:) withObject:(id)YES];\n return NO;  //Added this line\nif ([_delegate respondsToSelector:@selector(textEditorDidChange:)]) {\n   [_delegate textEditorDidChange:_textEditor];\n. \n",
    "DominicBoettger": "Hello guys, my intention was not to get a more performant solution, it was more the license thing. The license of Three20 is a apache 2.0 without a NOTICE file. So you CAN, but are not forced to place a license about screen in your app. The BSD license of the most JSON Frameworks forces you to place this copyright notice into your binary.\nSome customers don't want such a license screen in their apps. If a customer REALLY don't want that screen (and i am not able to convince the customer that it's a good idea to create such a screen), I have a few options:\n1. I don't use three20\n2. I use three20, deactivate the JSON function and add TouchJSON manually\n3. I implement my own parser\n4. I break the license of the JSON libraries (only the BSD licensed ones)\nOf course my preferred way is to talk to my customer and tell him to create the about screen and add that information to get a more performant JSON library. But this argument is not working with every customer out there. As the most developers out there, i prefer to use the same framework for as much projects as possible to keep the maintenance tasks lower.\nI hope that is a understandable issue with the license and i think it could prevent a lot of developers from breaking the license of the used libraries.\nThe problems described in the study from openlogic ( http://www.openlogic.com/news/press/03.08.11.php ) is primarily caused by the ignorance of the licenses. I think it's a good thing to add a library to a framework to prevent the developers from legal issues when using the framework. Also we should also add an article in three20.info about this issues and  describe the performance discrepancy of the different frameworks.\nWhat do you think about that? \nWe can also add JSONKit to Three20 to get a more performant solution. I am also thinking about developing a binary plist solution, but i am not yet sure about that.\n. Thanks for your reply!\nGreat that you want to merge it.\n. Hello guys,\ni added the library as submodule to the repository. I hope you like that.\nSubmodule using is quite easy\ngit submodule add git://github.com/TouchCode/TouchJSON.git src/extThree20JSON/Vendors/TouchJSON\ngit submodule init\ngit submodule update\nIn the .gitmodules file you can see your configuration.\n... Thinking about adding JSONKit to the repository too. .... \n. Thank u very much @johnezang. I added JSONKit to my fork and hope somebody will merge it soon! :-) It seems to be very lightweight and fast. I am quite impressed!\n. ",
    "johnezang": "I'm the author of JSONKit.\nIf the BSD license for JSONKit is a problem, I'd be happy to grant some kind of exception along the lines of \"When used with three20, the attribution/notice requirement of the BSD license does not apply\" (or something to that effect, you get the idea).\nI use the BSD license because it's always nice to see where your stuff pops up.  But the reality is very, very few people ever comply with it.  Heck, the official twitter client for iOS uses RegexKitLite (another one of my projects) and it doesn't acknowledge it, even though it does have acknowledgements for other BSD open source components.\nAnyone have any suggestions on how to do this?  Language to use?  Should these legal details reside in some file in the three20 repository, or do I have to make changes to the JSONKit source?  I sort of prefer a blanket \"in perpetuity, for any and all versions when bundled with / used as a component of three20\" grant / license text that would sit in the three20 repo.  Then you can do the git submodules linking stuff without any concern.\nThoughts?\n. I modified the license for JSONKit so that it is now \"dual licensed\" under either the BSD or Apache License, Version 2.0 (the same as three20).  This was done with johnezang/JSONKit@3c6ff505366b80a9c96b9ef83bd7c202b6c9999b, which was followed shortly by johnezang/JSONKit@635005b3e584f8f6271ccb2e1c6c89a93ef7aea0 to fix a typo / line duplication.\nThe language that I used was\n\n//  Dual licensed under either the terms of the BSD License, or alternatively\n//  under the terms of the Apache License, Version 2.0, as specified below.\n\n(this is followed by the BSD license text, which was already there, and then the apache license blurb, which was added).\nI am not a lawyer, but I believe this is sufficient for people to \"pick which license they want to apply\".  I think this is sufficient to address the concerns that were raised here.\n. ",
    "aporat": "Yes. \nI'll open another pull request when I'll work on that.\n. I wasn't aware of that, but looks like many classes (such as TTBaseNavigationController) are already using UIViewAnimationTransition.\nMaybe it would be nice to have TTViewAnimationTransition enum with the transitions indices in the future?\nIf you will add new transitions, how would we know about them? \nNSUInteger is a little non informative :-)\n. np, it's pretty much just a cleanup and it won't improve anything\n. hum, btw, is it possible to get the code for the view transitions in the FB app? I wouldn't mind trying to add them to three20..\n. You mean the tag of the pull? \u05d0\u05d9\u05df \u05d1\u05e2\u05d9\u05d4\n. I added the tag, but its just jumps back here. is that what you mean?\n. Great, i dont know why, but the preview here can't read the localized file correctly. (I have checked with the itailan translation and it's looks gibberish as well)\nHere is the file after copying it out from the bundle:\n\"%d hours ago\" = \"\u05dc\u05e4\u05e0\u05d9 %d \u05e9\u05e2\u05d5\u05ea\";\n\"%d minutes ago\" = \"\u05dc\u05e4\u05e0\u05d9 %d \u05d3\u05e7\u05d5\u05ea\";\n/* Current page in photo browser (1 of 10) */\n\"%d of %d\" = \"%1$d \u05de\u05ea\u05d5\u05da %2$d\";\n\"%d seconds ago\" = \"\u05dc\u05e4\u05e0\u05d9 %d \u05e9\u05e0\u05d9\u05d5\u05ea\";\n/* Date format: 3d */\n\"%dd\" = \"%dd\";\n/* Date format: 3h */\n\"%dh\" = \"%dh\";\n/* Date format: 50m */\n\"%dm\" = \"%dm\";\n/* Date format: less than one minute ago */\n\"<1m\" = \"<1m\";\n\"Alert\" = \"\u05d0\u05d6\u05d4\u05e8\u05d4\";\n\"Are you sure you want to cancel?\" = \"\u05d4\u05d0\u05dd \u05d0\u05ea\u05d4 \u05d1\u05d8\u05d5\u05d7 \u05e9\u05d0\u05ea\u05d4 \u05e8\u05d5\u05e6\u05d4 \u05dc\u05d1\u05d8\u05dc?\";\n\"Cancel\" = \"\u05d1\u05d9\u05d8\u05d5\u05dc\";\n\"Connection Error\" = \"\u05e9\u05d2\u05d9\u05d0\u05ea \u05d7\u05d9\u05d1\u05d5\u05e8\";\n\"Connection Timed Out\" = \"\u05d7\u05d9\u05d1\u05d5\u05e8 \u05dc\u05d0 \u05d4\u05d5\u05e9\u05d2\";\n\"Done\" = \"\u05e1\u05d9\u05d5\u05dd\";\n/* Date format: Mon 1:05 pm */\n\"EEE h:mm a\" = \"EEE h:mm a\";\n/* Date format: Monday */\n\"EEEE\" = \"EEEE\";\n/* Date format: Monday, July 27, 2009 */\n\"EEEE, LLLL d, YYYY\" = \"EEEE, LLLL d, YYYY\";\n\"Error\" = \"\u05e9\u05d2\u05d9\u05d0\u05d4\";\n\"Load More Photos...\" = \"\u05d8\u05e2\u05df \u05e2\u05d5\u05d3 \u05ea\u05de\u05d5\u05e0\u05d5\u05ea...\";\n\"Loading...\" = \"\u05d8\u05d5\u05e2\u05df...\";\n/* Date format: 7/27/09 */\n\"M/d/yy\" = \"M/d/yy\";\n/* Date format: Jul 27 1:05 pm */\n\"MMM d h:mm a\" = \"MMM d h:mm a\";\n/* Date format: July */\n\"MMMM\" = \"MMMM\";\n/* Date format: July 27 */\n\"MMMM d\" = \"MMMM d\";\n\"New Message\" = \"\u05d4\u05d5\u05d3\u05e2\u05d4 \u05d7\u05d3\u05e9\u05d4\";\n\"No\" = \"\u05dc\u05d0\";\n\"No Internet Connection\" = \"\u05d0\u05d9\u05df \u05d7\u05d9\u05d1\u05d5\u05e8 \u05d0\u05d9\u05e0\u05d8\u05e8\u05e0\u05d8\";\n\"No Photos\" = \"\u05d0\u05d9\u05df \u05ea\u05de\u05d5\u05e0\u05d5\u05ea\";\n\"OK\" = \"OK\";\n\"Ok\" = \"Ok\";\n\"Open in Safari\" = \"\u05e4\u05ea\u05d7 \u05d1- Safari\";\n/* Title for back button that returns to photo browser */\n\"Photo\" = \"\u05ea\u05de\u05d5\u05e0\u05d4\";\n\"Post\" = \"\u05e4\u05e8\u05e1\u05dd\";\n\"Search\" = \"\u05d7\u05d9\u05e4\u05d5\u05e9\";\n/* See all photo thumbnails */\n\"See All\" = \"\u05d4\u05e8\u05d0\u05d4 \u05d4\u05db\u05dc\";\n\"Send\" = \"\u05e9\u05dc\u05d7\";\n\"Sending...\" = \"\u05e9\u05d5\u05dc\u05d7...\";\n\"Showing %@ Photos\" = \"\u05de\u05e8\u05d0\u05d4 %@ \u05ea\u05de\u05d5\u05e0\u05d5\u05ea\";\n\"Showing %@ of %@ Photos\" = \"\u05de\u05e8\u05d0\u05d4 %1$@ \u05de\u05ea\u05d5\u05da %2$@ \u05ea\u05de\u05d5\u05e0\u05d5\u05ea\";\n\"Sorry, there was an error.\" = \"\u05de\u05e6\u05d8\u05e2\u05e8\u05d9\u05dd, \u05e9\u05d2\u05d9\u05d0\u05d4 \u05d4\u05ea\u05e8\u05d7\u05e9\u05d4.\";\n\"Subject:\" = \"\u05e0\u05d5\u05e9\u05d0:\";\n\"This photo set contains no photos.\" = \"\u05d0\u05d5\u05e1\u05e3 \u05d4\u05ea\u05de\u05d5\u05e0\u05d5\u05ea \u05d0\u05d9\u05e0\u05d5 \u05de\u05db\u05d9\u05dc \u05ea\u05de\u05d5\u05e0\u05d5\u05ea.\";\n\"To:\" = \"\u05d0\u05dc:\";\n\"Today\" = \"\u05d4\u05d9\u05d5\u05dd\";\n\"Unable to load this photo set.\" = \"\u05e0\u05db\u05e9\u05dc \u05d1\u05d8\u05e2\u05d9\u05e0\u05ea \u05d0\u05d5\u05e1\u05e3 \u05d4\u05ea\u05de\u05d5\u05e0\u05d5\u05ea.\";\n\"Updating...\" = \"\u05de\u05e2\u05d3\u05db\u05df...\";\n\"Yes\" = \"\u05db\u05df\";\n\"Yesterday\" = \"\u05d0\u05ea\u05de\u05d5\u05dc\";\n\"about a minute ago\" = \"\u05d1\u05e2\u05e8\u05da \u05dc\u05e4\u05e0\u05d9 \u05d3\u05e7\u05d4\";\n\"about an hour ago\" = \"\u05d1\u05e2\u05e8\u05da \u05dc\u05e4\u05e0\u05d9 \u05e9\u05e2\u05d4\";\n/* Date format: 1:05 pm */\n\"h:mm a\" = \"h:mm a\";\n\"just a moment ago\" = \"\u05dc\u05e4\u05e0\u05d9 \u05e8\u05d2\u05e2\";\n/* Date format: 2009 */\n\"yyyy\" = \"yyyy\";\n. okay, I committed those changes from the localization team\n. Thanks lukabernardi, I also had to add :\nimport \"Three20UINavigator/TTNavigatorRootContainer.h\"\nto TTRootViewController.h header in order to get my project to compile (xcode 4).\n. I tried using this new ipad support, but I found it a little too buggy for me. The biggest issues I had are orientation changes which messed the entire UI and I couldn't find the option to have the secondary view controller as a UIPopViewController.\nI reverted back to the old TTSplitViewController on 1.0.5 (which works ok with orientation changes and the pop view controller). \n@jverkoey, are you still woking on it, or I can submit push requests to this branch? I wouldn't mind helping here.\n. hum. something went wrong here\n. I had some memory warning issues with the camera picker controller as well.\nTry pushing the camera picker. In iphone 4, it will trigger a memory warning in many cases. after these warning are triggered, the main view (or entire controller - not sure) behind it get released resulting a blank white screen. To overcome this bug, I save the controller as a parameter in the app delegate.\nDoes this bug fix cover that bug as well?\n. @jwang sorry, my issue was actually unrelated to this patch, so i can't verify if this bug was fixed.\n. Great. I think many users will find it helpful.  The pull request is targeting the development branch. Where should i target it instead?\n. Cool. I have tested it on the development branch and it's working fine.\nbtw, you haven't bumped the three20's version number in Three20Version.m to 1.0.6 yet ;-)\n. I included some extra commits in #596 that aren't related, so I closed that pull and requested another one\n. maybe the timer was used to auto hide the banner after a specific amount of time.\nI did a file search, and this var isn't being used anywhere in framework. \n. I'm for it as well. \nlast time i checked on my iOS 3.1 device with 1.0.5, the app was broken anyway because of the TTSplitViewController class\n. i think the major reason to keep iOS 3.1 support is because the first generation iPhone devices can't upgrade to iOS 4. meaning if your iPhone app requires iOS 4+, you lose some potential clients. I still think three20 should dump iOS 3.1 support - it's just not worth spending time & effort supporting iOS 3.1. \n. #742 was merged into development last week, which resolved these issues\n. im not sure. \ni think TTAvailability is more about iOS version availability, while this new device model just returns the model name in a human readable string.\n. oh, and i guess the function should be named TTDeviceModelName() - similar to [[UIDevice currentDevice] model] (which returns only the basic model name)\n. yeah, it was really a challenge making a three20 universal app with both portrait & landscape orientations.\nI'll try to keep working on these changes (and borrowing some code from https://github.com/facebook/three20/pull/533 as possible). This pull request stands by itself, and i think it can be releases as is (I have 3 iPad apps with these changes on the app store)\nI think it's fine to break the current iPad support if it will be release it as a part of 1.1. Keeping the left & right old navigations will be messy at best..\nhum, where's the change log anyway? never knew there's one :-)\n. well, someone will have to finish #533 before  :-) I tried testing it awhile ago, and it's still missing some key features (and it's more buggy than what three20 has now)\nI was thinking about trying to integrate https://github.com/mattgemmell/MGSplitViewController into three20 as a replacement for the current TTSplitViewController. \nMGSplitViewController is much more powerful than the standard UISplitViewController with some extra cool enhancements.\n. sure, i have no idea how to solve conflicts in git, so i'll just resubmit the pull request against the latest development branch \n. I tried to rebase the branch. can you try to merge it now? hopefully it did something..\n. haha, well, i guess it didn't work.\n. duplicate of https://github.com/facebook/three20/pull/693\n. yeah, it's already there in the table items demo\n. the feature is already on the development branch (however not released to the master branch). you can grab it by cloning the github repo and switch to the development branch\n. Yeah, i had the same issue as well.\nwe can either solve it by creating new styles just for the tables, such as tableBackgroundColor, or by updating the existing code to make sure the text background layer are white. I rather go over the TTViewControllers updates to avoid adding new styles\ncomment?\n. the last commit fixes the issue with the background color in the photo controller, so it's okay to merge as far as I know.. \n. @diederich can you merge? it is a simple and important iPad fix\n. yeah, but it means adding another test controller to the catalog sample app, which is already packed with many features.\nMaybe a separate sample project just for TTTables showing off the main features of three20 tables?\n. just a reminder that it's ready for merging :-)\n. merged into development (1.0.11-dev)\n. @jwang, opps. looks like we forget to actually merge this pull request (so wasn't released in 1.0.10)\n. most of these issues have been resolved with #742 & #741\n. that's cool, i hate those build warning too :-) \ncan you target the development branch instead and remove the unrelated cache size fix? \n. merged into development (1.0.11-dev)\n. Closed in favor of #755\n. Ideally, the project should have script that builds the docs after each release, clone the github gh-pages and publish the new docs automatically. Currently, the script does the docs generation based on a version number and create the folder layout for gh-pages.\nI couldn't get the latest appledoc to generate doc sets. I'll glad if you can try and let me know if it works for you, or what I'm doing wrong, or move the settings into a plist file.\n. thanks for the bug fix! \nI believe this bug has already been fixed on the development branch (#721), but wasn't released to the master yet.\n. I think #721 justify doing a release. at least 3 users reported this issue and it effects all apps using TTStripTab\nThis release also contains some TTTableView Improvements: #682 & #693:\n- New TTTableSection section class\n- New TTTableSettingsItemCell class\n. yes, definitely something we should do!\nthere was another pull request which targeted the master branch by mistake (#727) and included some unrelated changes, so that's why it wasn't merged.\n. strangely, the code changes aren't indent correctly, so when I open the projects from your branch, Xcode reindent the changes into the correct styling. something you can check?\n. no need. it looks great as is. tested & merged. \nit's great that you also updated the sample projects!\n. this is great! thank you for submitting this pull request!\n(tested & merged into development)\n. also including #719 bug fix here\n. As I'm no longer using the TTNavigator and the url mapping, I'm not planning on looking at it.\nEither merge it as is or close this pull request. as far as i know, these changes work well.\n. nice, i think i had a similar issue with scollview offsets starting on the wrong positions. hopefully it will fix my issue as well.\nbtw, maybe it's better to have the feature / bug fixes branches on our own forks, so we won't have too many branches on the main repo :-)\n. good points. thanks.\nI'm thinking it might be good to have a generic TTErrorView (and move it away from the Table Views folder) and add a TTTableErrorView which extends  TTErrorView.\nAlso, you're right. it should have a way to disable the refresh button. an optional function on the data source (when we set the error messages and images) would work perfectly, but I haven't got to that step yet :-)\n. a function named - (BOOL)reloadButtonForEmpty was added in the tableview's TTTableViewDataSource which allows developers to disable the reload button if they don't wish to have it in the error views\n. wow, this is really cool feature. I'll definitely use this with three20 and other projects.\nI tried using this workspace locally, and there's alot of \"junk files\" (mostly scripts & docs) inside the workspace. maybe we should leave these files outside the workspace and have only the actual three20 projects? \n. merged into 1.0.11-dev\n. sounds like a really odd bug. \nIt would be great if you can post your code here, so we can try and replicate this issue\n. @kemenaran do you mind trying pulling #746 into your fork and test if that patch solves your issue (without your change)? \n sounds like another parentViewController issue to me\n. that's cool. I like the fact you used a protocol. it looks like a better way to implement these changes.\nMy biggest issue with the original pull request is that it broke my apps that used custom TTTableItem subclasses.\nI couldn't test your branch, because it's a little behind, but I think it will throw exceptions instead of silently break.\n. sure, I'll try to look at it in the next few days, but your branch still breaks my existing apps that subclass TTTableItem. \n. as far as I know, the development branch doesn't contain any compiler warnings anymore. they has all been fixed in #741.\n@diederich maybe it's a good time for a little release to the master branch. it's like the 100th time a developer is trying to fix those compiler warnings :-)\n. I just found out this nasty bug happens on my a few of my published apps as well, as I heavily use TTButton + TTStyleSheets. I guess this bug was introduced since the recent move to LLVM in #742. \n. :+1: for the heads up for new developers\nI suggest deleting the development branch completely, and add a huge note on the master's README file saying \"three20 is no longer maintained\" (but keep the entire README content as is). if you have access to the repo's admin, it also would be nice to remove the issues tab, so developers won't be able to open issues.\na warning on the README should be enough in my opinion. i don't see a reason to delete the entire source code from the master branch. it doesn't hurt anyone as long as the warning is big enough.\n. ",
    "joshhudnall": "Applied this update, and ran ttmodule.py against a copy of a project previously corrupted by the script. Everything appears normal and the project compiles correctly with the Three20 libraries properly linked.\n. ",
    "crino": "hi jwang, sorry for late reply. anyway, thanks to integrate my 'pull request' ;)\n. https://github.com/facebook/three20/pull/543\n. ",
    "teehemkay": "Isn't this the  normal behavior?\nTo re-use the controller shouldn't  1. above instead be (please note that use \"toSharedViewController\" in lieu of \"toViewController\"):\n[map from:@\"tt://controller#(setSelectedPage:)\" toSharedViewController:[TTPagesController class]]; \n?\nOTOH #fragment URL are indeed not persisted by the TTNavigator because  originalNavigatorURL is not set in the case of a #fragment URL. Which may or may not qualify as a bug.\nBut to persist the #fragment URL, originalNavigator should be set to the full #fragment URL not the base URL.\n. ",
    "jverdi": "Suggesting that three20 raise the iOS Deployment Target to 3.1, and start using LLVM as the default compiler.\nThe reason for this is that currently, three20 does not run on iOS 3.x devices. Symbolic linking of the following objects is impossible at runtime:\n- UIPopoverController\n- UIPopoverControllerDelegate\n- UISplitViewController  \nAs I understand it, based on my reading of Marco Arment's post on the matter (found here: http://www.marco.org/1648550153) there are several methods to work around this issue and maintain 3.0 as the iOS Deployment Target:\n1) Use NSClassFromString() to avoid these symbolic references. Unfortunately, that method won't work for three20 because it creates a subclass of UISplitViewController. Marco also discusses the possibility of building the subclass at runtime, but that seems like far more trouble than it's worth.\n2) Weak link the entire UIKit Framework. The performance implications that result would likely make this solution prohibitive.\nIf three20 is willing to go to a 3.1 Deployment Target, there are much more elegant solutions. Since iOS 4.2, Apple has added the ability to weak link only specific classes rather than entire frameworks.\n- The method for doing this is explained here: http://www.sealiesoftware.com/blog/archive/2010/4/8/Do-it-yourself_Objective-C_weak_import.html\nFortunately, if Base SDK is greater than 4.2, and Deployment Target is 3.1, either of the two LLVM compilers will do all of this weak linking automatically. Therefore, the reasonable solution to me would be to target 3.1 minimum and switch to LLVM as a default.\nJustification for going to 3.1:\nAll of the major three20 users listed on three20.info target 3.1 or greater already. This includes SCVNGR (3.1), Pulse (3.2), Meetup (3.1.2), and Posterous (4.0). One notable exception is facebook, though I imagine they are not using the latest three20 as a base as they have no need for these iPad specific classes.\nOne closing thought: I'm curious whether it would be feasible to move all iPad related code to a separate three20 extension. While the iPad specific code is not the only thing with that may require weak-linking in the future, it would be a logical separation and puts this issue off for at least for the time being. \n. If giving up 3.0 isn't in the cards, what are your thoughts on separating the iPad specific code to a separate optional extension?\nI think that may allow most to get on with publishing iPhone/iPod apps with 3.x targets for the time being.\n. Just want to note here: after running into some problems of my own, and re-reading Marco's post, I noticed that LLVM GCC must be used with iOS targets < 4.0. LLVM Compiler 2.0 won't work on older 3.x versions.\n. ",
    "esilverberg": "FWIW I can confirm this is a bug and that the recommended code change fixes this issue. \n. ",
    "phillipuniverse": "Hmm good question I'm not sure how that one snuck in there.  Can I modify the pull request to take that out?  It looked like a Three20UICommonUnitTests target got stuck in there inadvertently.  It's not needed at all.\n. This has already been started by Jeff in #527.  Not sure if there's going to be any more development on it, but there are a few other references as well.  Also, this all of the table cells.  This is a quick and dirty fix for the caption cells, but should probably be further up in the class hierarchy.\n. duplicate of #683\n. Shouldn't all the self.view change to [self getView] instead of [self view]?\n. Also, I think pull requests should be based against dev, not master\n. Ah you're right; my mistake.  This is great by the way; thanks for taking the time to contribute!\n. +1. As much as it makes me sad to see it go this seems like the most appropriate option so people don't continue to use non-maintained code.\nI am for deleting the source code on the main branch in GH (master, currently) so that it's very obvious that it's no longer maintained. Here is what I would do:\n- Merge in #833 into master\n- Update the README on all branches saying that it's no longer maintained (keep code and remainder of README intact)\n- Make a new branch off of 'master' called something like 'non-maintained' I dunno\n- In the README of the 'non-maintained' branch, delete all source code and in the README tell people that this project is no longer maintained by anyone\n- Change the settings in the GH repo such that the 'non-maintained' branch is the new default. This ensures that people who go to github.com/facebook/three20 see the deleted source code first.\nSomeone should also update http://three20.info to make this really obvious as well. I assume @jverkoey owns that?\nOne other nice thing would be to let people know alternatives to Three20 (Nimbus and AFNetworking come to mind) that have been kept up.\n. All control statements should be surrounded with brackets even if they're just 1 line.  It helps with readability and can help prevent future problems.\n. ",
    "MattNewberry": "It'd be interesting to look into my ObjectiveRecord library for possible integration, as it plays a big role in making Core Data easier.\nFor example, if you have an entity called Events, you can simply:\n[Event pull:{completionBlock} fail:{failureBlock}];\nOr, if you have an instance of an event...\nEvent *event = [Event blank];\n[event fetch]; \nto update that object with remote data.\nAnyhow, works VERY well for us\n. I've been pulling my hair out on this for the last few weeks, but seem to be making progress.\nIn short, it looks like we need to have a new TTTableViewCoreDataController subclass, as the [self invalidateView]s that are called every time an object is updated is causing all sorts of problems.\nBy setting a _isLoading flag when the model starts and ends, and not letting [self refreshView] be called until then, it fixes the problem. \n. Makes sense... My version is hacky as of now, but it looks like its finally working.\nAnother caveat... When deleting a row using CoreData, layoutSubviews is being called on the cells again. When called, the object associated to that cell is now a fault because it's been deleted, and unless I explicitly do a check for [object isFault] and then return from layoutSubviews if it is, the app crashes as the object its trying to use for cell information doesn't exist. \n. Ping me on AIM ineedwords80days or GTalk matt@jadedpixel.com if I can be of any help... I've been fighting this integration the last few months and would be happy to lend my insight. \n. As I dig deeper, it looks like there's something going on still with the refreshView... \n\nInsertions are fine, however deleting is where the problem lays. \nWhen I trace the dataSource for numRows and sections, its as expected - 1 Section, 0 Rows\nHowever, as you can see, the tableView doesn't completely refresh. Instead, three20 is covering that with the empty view, yet the table itself still has this errant view.\nAny ideas?\n. Err... image link didnt work, link to image is http://cl.ly/3p3e453I3u3M0x301h18\n. I believe I finally figured out the issues... contact me for the solution unless you're far enough along with your own. \n. Just updated the branch with a very simple controller change... This can likely be refractored into the model.\nThe reason it's separate its because in my use-case, I load my local CoreData assets, then load the remote assets to update the local store.\nGiven that, I don't want the tableView to update to the Loading view when its already loaded local assets. By using a loading glag in the controller, we're able to have separate loading checks, one for remote and one for local. \nThis simple change + my ActiveRecord port is working like a charm now. \n. ",
    "Hout": "I implemented your correction in the wrong place. Pls do not review yet. I will fix it tonight.\n. Done. My only concern is the changed TTCSSStylesheet.m which I changed back. Hopefully it does not interfere with other changes.\n. Sorry I am still learning git. I will continue in #501\n. Done and it was a good idea as I identified a bug and fixed it ;-)\nI included a few speech bubbles in TTCatalog with various pointers.\n2011/5/29 jwang \nreply@reply.github.com\n\nThanks. can you provide a simple test case using the TTCatalog source as an\nexample to verify?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/556#issuecomment-1256416\n. :-) Looks like we have tackled the same issue here.\nhttps://github.com/facebook/three20/pull/556\n. Hmmm not entirely since the original triangles would be drawn on the corners too. However the whole idea of implementing a location based on an angle is simple but lacks precision. On a rectangular shape the real 46 degree location varies to be located on the left and top sides depending on the rectangle's dimensions.\n\nImplementation of an obtuse triangle crossed my mind but that would indeed collide with the functional suggestion of the interface.\nI spent some hours last Friday night to investigate pointing in the right angle with a curved line alike the text messaging app. I learned a lot of things about arcs and curves but without tangible results.\nFor now this is good enough for me. I will re-investigate later.\n. Yep, but I want the background of the label to match the general background which in my case is not white.\n. ",
    "RafaelAlba": "I tried using this patch in my fork of three20 and it seems to break all requests. The removal of this line seems to be the culprit(adding it back in there fixed the issue):\n-    [body appendData:[[NSString stringWithFormat:@\"--%@\\r\\n\", kStringBoundary]\n-       dataUsingEncoding:NSUTF8StringEncoding]];\n. I removed those lines and the server fails with a 500 error, but with them there everything works fine. I'll have to check the exact error on the server tomorrow when I'm back in the office.\nThe server is running rails 3.x.\n. Sorry about the long delay. Checking into this again. We're using nginx with passenger. The error in the logs is:\nEOFError (bad content body).\nIt's happening on POSTs not sure about GETs just yet.\n. Ok, only fails on POST requests\n. I imported this into my branch of three20 and it seems to break TTURLImageResponse functionality because the server was returning a 304 (not modified).\n. Yeah, it keeps happening but that's because the image is not found in the cache but the server still returns a 304. Not sure if this is a valid scenario.\n. After reading your explanation it makes much more sense as to why you did it this way. And I think this is a great way to go about it so that new functionality is added on top of existing one. Great patch @buddydvd, def. gonna use it!\n. This is following the same pattern as TTImageView, since it is fetching a remote image it would be nice to have a fallback for both while that image is being retrieved as well as if the call fails. If I understand the code correctly, the default image should be available in all states unless a specific state leaves it out.\nFor the app I'm working on I'm using a button for avatars and not all avatars are available.\n. @jwang I'll try to get that done by end of day today, thanks!\n. ",
    "fjordansilva": "Hi Jeff\nThank you very much for your great job. Is there a manual or example that explain how to create an extension for Three20?\n. Hi \nI can't compile the TTCatalog sample of this branch, it says \n\"Three20UINavigator/TTNavigatorPopoverProtocol.h\" No such file or directory\nBut the file is there... \n. ",
    "sstrigger": "I had the same problem, I believe you need to add the header file to the \"copy headers\" in the \"build phase\" for (I think) the Three20UINavigator project\n. ",
    "lukabernardi": "If you open the project  Three20UINavigator.xcodeproj \nIn Xcode 3:\nselect the Three20UINavigator target and show the file details (cmd + alt + f) you can see that TTNavigatorPopoverProtocol.h have as role value \"project\" if you change this value in \"public\" \nIn Xcode 4:\nchoose TTNavigatorPopoverProtocol.h, show the utilities and select the File inspector tab. In target membership you should see Three20UINavigator and just on the right you can change the valute form \"project\" to \"public\"\nNow the compiler error disappears.\n. @aporat you're right! I also had added the #import but I forgot to say ;D\n@mhooge I'm glad that helped you\n. ",
    "mhooge": "Using both lukabernadi and aporat's fixes sorted it. Thanks. \n. ",
    "nickpack": "@jverkoey Are you likely to add any more to three20 now that you are working on nimbus?\n. ",
    "smeador": "Err... correction above.  I implemented RIGHT alignment.  Looking forward to hearing from you guys!\n. @rogchap I must have missed your fix when browsing through the pull requests, but I'll be more mindful of this in the future.   I'll leave it up to the Three20 team to manage the requests.  Maybe having 2 fixes will encourage a merge with the master branch sooner rather than later.\n. ",
    "hisham": "Awesome...this was just what I was looking for, added it to my copy of three20 and it worked! Thanks :) I hope they put this fix in the main branch.\n. I tried rogchap's fix and it works too! :)\n. ",
    "pixelspark": "Would love to see this in the main branch :) keep up the good work!\n. ",
    "scashin133": "I had submitted a patch for this back in march as well: https://github.com/facebook/three20/pull/462\n. ",
    "jarodl": "Yeah, @crino's is way less sloppy.\n. ",
    "buddydvd": "What a coincidence. I will close this pull request then. It seems like the reason why the author didn't implement left/right edge drawing logic is because of the drawing-edge-near-the-corner problem (which your patch addresses) and lacking the ability to shift the edge vertically by a constant value (important for rendering bubbles with different heights). Also, with the way how the code is structured, it seems like the author intended to use _pointSize and _pointAngle to define the shape of the edge (non-isosceles triangles). The current implementation seems incomplete (the value of _pointAngle isn't really used in the code) and suffers some limitations (unable to create an obtuse triangle).\n. Oops. I did something wrong. Please ignore my changes.\n. @mmorearty: Can you please review the pull request I sent to your patch branch? The commit I did to change TTTableViewController.h was to support reverting changes to TTTableViewController.m as we discussed earlier.\n. @jwang: That is a separate request. The commit mmorearty merged into this pull request was missing a second part. I submitted the second part for mmorearty to merge into this pull request and am waiting for his response.\n. @mmorearty: Agreed. Also, can you undo the commit I did for this pull request? That commit was intended to clarify when setTableBannerView should be called. Since you didn't accept my pull request's second commit, the first commit should be undone.\n. I just noticed @Posterous's pull request #299 contains a commit that addresses the same issue.\n@Posterous's take on this issue is to let TTURLResponse's request:processResponse:data: process invalid response while  discarding generated NSError object. One side effect of that approach is it may break existing code built on the assumption all inputs to TTURLResponse's request:processResponse:data: are valid. In addition, it breaks the assumption that NSError objects returned by request:processResponse:data: will flow to TTURLRequestDelegate's request:didFailLoadWithError:.\nThis pull request addresses both of those concerns and does not break anyone's code.\n. @RafaelAlba: I fixed the bug you mentioned will the latest commit. Can you please try again?\n. This latest commit fixed Rafael's issue. However, Rafael thinks the approach I took was a bit hacky. If you guys have any suggestion for improvement, please let me know.\n. @jwang: I resolved the merge conflict and rebased my patch's branch onto the latest development head.\n. Hi @jwang -- I've tested it and it works as expected.\n. @masbog: The problem displayed in your screenshot is not related to this pull request. Please create a new issue with a link to your attached screenshot by filling out the form on this page: https://github.com/facebook/three20/issues/new\n. ",
    "ralfvdz": "No problem! Yes, I'm going to use this branch (as long as it's not in the master) on an iPad project :) I don't yet know for sure whether this problem also exists on the iPhone platform, so I put the pull request on this branch. \nI'm not 100% sure, but I guess the line \"[_tableView setBackgroundView:nil];\" is not required, because \"[_tableView setBackgroundView:[[[UIView alloc] init] autorelease]];\" will most probably release the old (gray) backgroundView and set the new one.\n. ",
    "masbog": "i can not see a button \"See All\" on my apps... where i can show image thumb... my image more than 3...\n. oooh... my ipad apps is landscape orientation... and than i cah resorve it... please view my screenshot apps @jwang on http://twitpic.com/61ytg3\n. oya @jwang how can i show thumb image list on first load three20 (TTPhotoViewController) sir... :)\n. ",
    "alexleutgoeb": "Hey Stephan,\nI searched the header files (unfortunately the doc is not very descriptive) and found these hints:\n- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView;   // called on finger up as we are moving\n- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView;      // called when scroll view grinds to a halt\n- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView; // called when setContentOffset/scrollRectVisible:animated: finishes. not called if not animating\nSo as far as I've debugged the code, the scrollViewDidEndDecelerating: delegate method gets only called if the user triggers the scroll event, and not setContentOffset:animated: (the value of animated: makes no difference at all).\nFor the latter it would probably be better to implement the 3rd delegate method in place of my initial commit (though the problem with animated:NO would still persist)?\n. Stephan,\ndid have a closer look into this again, to finally answer your question more precise:\nThe problem is that the delegate method scrollViewDidEndDecelerating: gets only called if the scrolling was triggered by the user's finger. So the current implementation lacks of the page update on programmatically-triggered scrolling.\nIn order to to be consistent to the iPhone's home screen I would suggest two changes in code:\n1. Implement the additional scrollViewDidEndScrollingAnimation:delegate method (body like the existing scrollViewDidEndDecelerating) for scrolling events with animated:YES\n2. As you suggested, check for animated == NO in my first commit  for animated:NO calls\nHope you agree with that, will update the pull request with these changes.\n. ..and sry for the wrong commit range, was using github's \"fork'n'edit\" feature and forgot to check the destination at all.\n. ",
    "totiz": "Yes, But I saw the code has been fixed already by andy.porat( 6208232a2748d1e8d301 ).\nThanks for you time.\n. ",
    "rainhead": "Sure, I'll get that to you tomorrow.\nOn Monday, July 11, 2011, jwang\nreply@reply.github.com\nwrote:\n\nCan you send a new one with the 'development' branch as the commit range? Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/600#issuecomment-1551659\n. This looks like it was already fixed in development by commit f4e406bb, back in December. Would be awesome if this could get merged with master.\n. OK, good to know. I'll develop against development for a while and rush any bugs / fixes back to you. Thanks for your responsiveness.\n. \n",
    "rahimizad": "Hi JWang, Why would anyone would still be using iOS3.0 (in the right mind of course)? iOS4.0 is about to go obsolete too soon after iOS5 is released next month. Why are you crippling this super wonderful library for those who can't grow up and adopt iOS4?\n. Thanks JWang, I was just trying to make a point that it is time to move off iOS 3.0 worries. I totally agree with you on iOS4.\n. ",
    "coneybeare": "@rahimizad While I agree that iOS 3.x is pretty nonexistent anymore, iOS 4 is nowhere near obsolete, even when 5.0 comes out. Adoption rates of new major iOS versions tend to go 50% in the first month, then a much slower adoption rate after that. If three20 would drop 4.0 support, a major portion of customers would be left behind.\n. ",
    "stig": "Yah, I'll fix that.\nVery meta/recursive: https://github.com/stig/json-framework/issues/89\n. ",
    "ericrwolfe": "See https://github.com/facebook/three20/pull/639\n. ",
    "umairakeel": "The reason for orange is that we are using the TTPickerTextField as part of a email send application through our service. There may be times when the email address is either bad ( bounce backs ) or the person has unsubscribed; so the idea is to visually let the user know by highlighting the entry who it is.\nRed seemed a bit harsh!\n. By stylesheets do you mean other than the TTDefaultStyleSheet.m ?\n. Ah,  OK, well let me try to figure out how to do that myself (have not used custom stylesheets yet) - and I will update the Wiki! \n. so looking to hack on this a bit more over the weekend. Can you point me towards any existing docs / examples on stylesheets cause I am not sure where to being. \nthe current change basically takes the existing code and just added the highlighted state.\n. ",
    "cagataygurturk": "I know it infinitely stays in the loading mode when there is no more data in the model. This is controlled in the DataSource. If you detect there is no more data, you simply do not show this button.\n. ups i'm not aware of existence of such a feature and my implementation was old than february. thanks btw, let me see how is your solution :)\nTTCatalog doesn't have an example of it.\n. Maybe also my cell can be pulled because it shares the same design with the TTTableMoreButton and it allows to write a \"Loading\" text etc. I'm not sure, that's your decision.\n. ",
    "goof": "great to know, thanks john!\n. ",
    "ccummiskey": "I ran into this problem too.  It occurs very rarely, but it is a pain to troubleshoot when it does.  The error occurs when you already have more then 5 simultaneous requests and then make multiple requests with the same cache key.  The better fix would be to change both occurrances of the following lines from TTRequestLoader.m: \nTTURLRequest* request = _requests.count == 1 ? [_requests objectAtIndex:0] : nil;\nto\nTTURLRequest* request = _requests.count >= 1 ? [_requests objectAtIndex:0] : nil;\nThis behaviour is more correct, and you won't lose your header dictionary, httptype, etc.\n. ",
    "tszming": "Also searching for this style for a while, +1 for merging into master.\n. Yes, just wondering since the last merge to master was back to Sept..\n. ",
    "pakko972": "Issue was:\nWhen setting TTSearchlightLabel's text with string containing special characters (example : @\"Sp\u00e9cia\"),\nit was displaying: http://f.cl.ly/items/42261W373q3E40131n0Q/Sans%20titre4.tiff\n. ",
    "coredream": "I see this issue as well on the iPad, and this fixes it.  But note TTThumbsViewController ends up with a black background by default since it also uses TTSTYLEVAR(backgroundColor).\n. I agree, the latter is a better solution instead of creating new styles.\n. ",
    "colinyoung": "just a bump, i'm seeing this on the iPhone 5.0 simulator and device as well.  @aporat's fix worked perfectly to fix the problem.\n. ",
    "saintnicster": "\nIs it ok to add the iOS 5 stuff yet?  I thought we were technically still under the NDA... (first release as a developer, so I may just be out of the loop)\nIs this really needed?  dismissModalViewController is still working for me.  What is the benefit of using this instead?\n. \n",
    "marzapower": "Sure! Just give me the time to get the right branch.\nI'm sorry for the inconvenient.\n2011/10/13 John Wang \nreply@reply.github.com\n\ncan you resubmit this against the development branch instead of the master\nbranch? Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/703#issuecomment-2398045\n. Never mind, in the development branch this bug has already been fixed.\nThank you and please forgive me!\n\n2011/10/13 Ing. Daniele Di Bernardo daniele.dib@marzapower.com\n\nSure! Just give me the time to get the right branch.\nI'm sorry for the inconvenient.\n2011/10/13 John Wang \nreply@reply.github.com\n\ncan you resubmit this against the development branch instead of the master\nbranch? Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/703#issuecomment-2398045\n. \n\n",
    "jaredegan": "Sorry, this pull request was by accident.\n. ",
    "ettore": "I unintentionally added a somehow unrelated commit (63d03a1) solving build errors with iOS5/Xcode4.2. It doesn't look like it lets me remove it from this pull request, so if that's an issue, let me know if I should close this request and resubmit these 2 checkins as separate pull requests.\n. I'm going to have to resubmit this pull request. Committed too much code to the same branch. Closing.\n. Dilip-Rajkumar, feel free to use my development branch:\nhttps://github.com/ettore/three20/commits/development\nMaybe the simplest thing is to simply download a zip file up to the commit you're interested? \nYou can always fork my Three20 tree, and then branch out from anywhere in case you need to add more custom stuff to it.\nYou can also cherry-pick that individual commit  (man git-cherry-pick).\n. Yes: I committed too many unrelated changes to #712, so I closed that one and resubmitted just the file I intended originally. Sorry for the confusion.\n. I think my pull request d2bf8d2 fixes a different problem. My fix is not related to any timeout issue: it's simply preventing a crash caused by trying to create a NSURLRequest from a (non-nil) TTURLRequest whose urlPath property is nil.\n. xcconfigs: got it, I wasn't aware of them.\narmv6: ok, I just disabled it in my branch. I'm still not sure how any app built with Xcode 4.5 (the only one that can target iOS 6 and therefore submit to Apple) can make use of a armv6 binary. Even supposing we're building three20 as a library and linking it to our app, Xcode 4.5 will complain about the armv6 binary since it can't build the app in that arch. Most likely this is the situation most users will run in, so in my opinion Three20 should cater to that? But I guess it's not my decision to make. \ngood point about VALID_ARCHS vs ARCHS. \nYeah, not sure what's left here then... but supposing I were to resubmit this same PR (and not open a new one), how would I do that? I guess I'll need to move my branch origin to later in the future? I'm kind of unfamiliar in this process.\n. Thanks so much for the instructions. I might just abandon this pull request since I already merged the feature branch on my main branch, and AFAIK rebasing is bad in this situation. \n. Actually, setStatusBarHidden:animated: was deprecated in iOS 3.2. My bad.\n. ",
    "clarketus": "Hey\nIs there any chance this can get merged? Or should I close this.\nThanks\n. ",
    "yosit": "No, I think you are confusing It with setters. Getters don't have a get in\nfront .\nYosi Taguri | Co-Founder | Labgoo | iPhone: http://ahhhpah.com | twitter:\nhttp://twitter.com/yosit | Mobile: +972-544-816020 | Google Voice: +1 (415)\n935-1126  | Email: yosi@taguri.com\nOn 30 \u05d1\u05e0\u05d5\u05d1 2011, at 00:51, Phillip Verheyden \nreply@reply.github.com\nwrote:\nShouldn't all the self.view change to [self getView] instead of [self view]?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/727#issuecomment-2951894\n. Yes, will fix that tomorrow\nYosi Taguri | Co-Founder | Labgoo | iPhone: http://ahhhpah.com |\ntwitter: http://twitter.com/yosit | Mobile: +972-544-816020 | Google\nVoice: +1 (415) 935-1126  | Email: yosi@taguri.com\nOn 30 \u05d1\u05e0\u05d5\u05d1 2011, at 00:52, Phillip Verheyden\nreply@reply.github.com\nwrote:\n\nAlso, I think pull requests should be based against dev, not master\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/727#issuecomment-2951901\n. \n",
    "highfestiva": "I have no idea what so ever, unfortunately.\n. ",
    "shenwill": "A quick fix in TTBaseNavigator.m.\nFrom iOS 5, [uiViewController parentViewController] returns its containing view controller only, no longer returns the presenting view controller (aka. model view controller, the presenter), or split view controller.\n``` objective-c\n///////////////////////////////////////////////////////////////////////////////////////////////////\n+ (TTBaseNavigator)navigatorForView:(UIView)view {\n  // If this is called with a UIBarButtonItem, we can't traverse a view hierarchy to find the\n  // navigator, return the global navigator as a fallback.\n  if (![view isKindOfClass:[UIView class]]) {\n    return [TTBaseNavigator globalNavigator];\n  }\nid  container = nil;\n  UIViewController             controller = nil;      // The iterator.\n  UIViewController             childController = nil; // The last iterated controller.\ncontroller = view.viewController;\n  while (nil != controller) {\nif ([controller conformsToProtocol:@protocol(TTNavigatorRootContainer)]) {\n  container = (id<TTNavigatorRootContainer>)controller;\n  break;\n}\n\nchildController = controller;\ncontroller = childController.parentViewController;\n\n// From iOS 5, [uiViewController parentViewController] returns its containing view \n// controller only, no longer returns the presenting view controller (aka. model view  \n// controller, the presenter), or split view controller.\nif (nil == controller\n    && [childController respondsToSelector:@selector(presentingViewController)]) {\n  controller = childController.presentingViewController;\n}\n\nif (nil == controller) {\n  controller = childController.splitViewController;\n}\n\n}\nTTBaseNavigator* navigator = [container getNavigatorForController:childController];\n  if (nil == navigator) {\n    navigator = [TTBaseNavigator globalNavigator];\n  }\nreturn navigator;\n}\n```\n. ",
    "fleitz": "No idea when it changed. Today was the first time I've used\nttmaskstyle. Unfortunately I don't have any older iOS devices to test\non.\nSent from my iPad\nOn Jan 17, 2012, at 2:49 AM, Stephan Diederich\nreply@reply.github.com\nwrote:\n\nThanks!\nIIRC, this changed between iOS versions. Do you know when this changed, and shouldn't we make this work on older versions, too? If the old version is not needed anymore, you can remove the code instead of commenting it out.\nAlso, please make sure to target the development branch with pull requests.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/752#issuecomment-3526193\n. Here's the style I'm using:\n- (TTStyle_) coloredIcon:(UIColor_) color{\n\nreturn\n[TTMaskStyle styleWithMask:[UIImage imageNamed:@\"Housing-Icon\"] next:\n[TTContentStyle styleWithNext:\n\n [TTBlendStyle styleWithBlend:kCGBlendModeMultiply next:\n\n[TTSolidFillStyle styleWithColor:color next: nil]]]];\n}\n- (TTStyle*) amberIcon {\nreturn [self coloredIcon:RGBACOLOR(255, 255, 0, 1.0)];\n}\nAnd here's the context in which the style is used:\n[TTTableImageItem itemWithText:self.opportunity.name imageURL:\n@\"bundle://Housing-Icon.png\" defaultImage:nil imageStyle:TTSTYLE(amberIcon)\nURL:nil]];\nThe idea is to mask the kCGBlendModeMultiply so I can color only the\nnon-transparent parts of the image. I think there is actually a larger\nissue with masking that's not apparent because the image in question is\ncircular.\nHere's a link to the \"Housing Icon\" image: http://i.imgur.com/bv2Es.png\nOn Tue, Jan 17, 2012 at 12:40 PM, Adar Porat <\nreply@reply.github.com\n\nwrote:\nsounds like a really odd bug.\nIt would be great if you can post your code here, so we can try and\nreplicate this issue\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/three20/pull/752#issuecomment-3535317\n. \n",
    "adib": "@diederich  You mean like this?\nhttps://github.com/facebook/three20/pull/761\nThanks\n. ",
    "XBeg9": "Yes, I just show you my \"fix\" :) I am new in iOS development\n. ok, thanks:) have a nice day :)\n. ",
    "troppoli": "I pulled to the head of dev and verified it yesterday before applying the fix.\n. ",
    "kimdwkimdw": "Try following steps,\n1) Make tableView using TTTableViewController with HeaderView(TTTableHeaderDragRefreshView) like PullToRefresh.\n2) Scroll down while HeaderView is loading between 0 to -kHeaderVisibleHeight.\n3) You can see that Table Section View is floating..\nThis commit make \"section header\" stick to top, not floating.\n. ",
    "CVertex": "I'd like this merged in\n. ",
    "josemando": "Yeah, since Xcode 4 has been available for a year now.\nHow do I proceed ? Should I open a new pull request, reference it on this and close this ?\n. Closing this one.\nNew pull at #792\n. ",
    "mkhurramali": "The reason I like GDataXML is that it allows me to have a very similar code structure when reading a JSON document using extThree20JSOn or XML document using my modifications.\nI have now fixed the structure to closely follow extThree20JSON.\n. Thanks Stephan, for your time and valuable feedback. I have made fixes according to all your comments, except this one:\nSeeing this, does it make sense to rename the other target, too?\nI could not find what line of code this comment was based on.\nIf everything is good, do I need to do anything else for this pull request to complete?\n. Closing this request as I have sent the same request to the development branch.\n. ",
    "arthurva": "Just add the following code to support ios6 sdk:\nifdef __IPHONE_6_0\n@interface UITouch () {\n    NSTimeInterval _timestamp;\n    UITouchPhase _phase;\n    UITouchPhase _savedPhase;\n    NSUInteger _tapCount;\n```\nUIWindow _window;\nUIView _view;\nUIView _gestureView;\nUIView _warpedIntoView;\nNSMutableArray _gestureRecognizers;\nNSMutableArray _forwardingRecord;\nCGPoint _locationInWindow;\nCGPoint _previousLocationInWindow;\nUInt8 _pathIndex;\nUInt8 _pathIdentity;\nfloat _pathMajorRadius;\nstruct {\n    unsigned int _firstTouchForView:1;\n    unsigned int _isTap:1;\n    unsigned int _isDelayed:1;\n    unsigned int _sentTouchesEnded:1;\n    unsigned int _abandonForwardingRecord:1;\n} _touchFlags;\n```\n}\n@end\nendif\n. ",
    "fredstyles": "Thanks arthurva.\n. ",
    "infocube": "Hi,\nJust fixed it, config in one file for all projects.\n. ",
    "daveverwer": "I am indifferent on the armv7 support but dropping armv6 is essential and the project currently does not compile for devices using Xcode 4.5 as armv6 compilation is no longer supported.\n. ",
    "jstart": "+1\n. ",
    "gfontenot": "\n. ",
    "rtwomey": "\n. ",
    "ArtFeel": "\n. ",
    "facebook-github-bot": "Thank you for your contribution. However, we are not accepting pull requests for this project, and will be closing it automatically. Please see the project's readme for more details - thanks!\n. Thank you for your contribution. However, we are not accepting pull requests for this project, and will be closing it automatically. Please see the project's readme for more details - thanks!. ",
    "pazustep": "Maybe you should test for ${DEPLOYMENT_LOCATION} == \"YES\" to detect an archive run instead of testing the folder name \u2014 Apple, or maybe the user, can change the built path to something that doesn't contain \"ArchivedIntermediates\".\n. I've seen references to DEPLOYMENT_LOCATION on Google back on 2005, so I'm pretty sure this wasn't introduced in Xcode 4. On the other hand, I didn't test it on Xcode 3.2, so it might behave differently there. In this case, testing XCODE_VERSION_MAJOR as well might be a better idea.\n. ",
    "SpicaThor": "Storing headers views to \"cache\" based on their titles making it very difficult to use when you have more than one section header with the same title on it. Such headers are drawing themselves only at last position, which kind of breaking the whole view... :(\n. I think that the best way will be to implement the same caching mechanism as for UITableViewCell...\n. I don't think...\nAs I know the UITableView push reusable cell to it's inner reusable cells cache based on it's identifier. Then the cell is released. It's not vanished because of the cache that \"holds\" it till some UITableViewDelegate requests for one.(or till the cache itself is released by UITableView) Now, for headers the UITableView doesn't do anything like that. If you mean to use some subclass of UITableViewCell as a header view, it's cool, but it's probably not going to help us as UITableView doesn't push the headers views into cache and so it's impossible to get it from there after a while. As for the regular table view cells the UITableView moves them to the cache after they become invisible, but as long, as we don't know their algorithm we can not know, that it will do that for cells we put in other places.(headers, footers and so)\n. That's true.\nBtw, I'v already made a new request, so generally we can move this conversation...\nP.S. The delegate idea sounds nice to me.\n. https://github.com/facebook/three20/issues/544\n. ",
    "Vaseltior": "The given data is a NSData object while the _responseData is a NSMutableData object.\nSo using it that way could crash if you try to use a NSData as a NSMutableData\n. I simply moved the NSURLConnectionDelegate methods so that they are known by the other methods as they are higher in the file. It remove some warnings\n. Mismatching object type\n. statusBarOrientation is UIInterfaceOrientationType... UIDeviceOrientation is not :-)\nBut UIInterfaceOrientation is a subset of UIDeviceOrientation so... this new code works perfectly\n. Somebody forgot a comma there\n. "
}