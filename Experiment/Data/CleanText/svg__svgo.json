{
    "deepsweet": "\u043e\u043d \u043f\u043e\u043a\u0430 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0441\u0442\u0430\u0440\u044b\u0439 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442.\n\u0441\u043f\u0430\u0441\u0438\u0431\u043e.\n. hotfixed :) svgo@0.0.7-1\n. yes, I thought about this issue, and probably it will be the first plugin disabled by default.\neven is there are a lot of autogenerated ID like \"SVG001\" or \"G57\" there is no any guarantee that they are not used outside.\nmaybe svgo should ask questions like \"do you use SVG id attrs somewhere? [y/n]\" :)\n. you're right, and that's how it happens in the existing convertPathData plugin.\nfirst - convert absolute to relative, and only then - floating-point numbers rouding.\nbut there is a problem with the absolute->relative convertion that is not dependent on svgo own rounding - some browsers rounds relative coordinates calculation in their own way, and as a result it's impossible to get a \"pixel lossless\" optimization.\n. oh, now i understand.\nthank you, i'll keep it in mind :)\n. i know, but at least now I do not want to do anything in this direction.\nin our organization we are developing csso (css optimizer) and imgo (image optimizer), so i want to promote svgo with the same way naming convention \"technology name + 'o'\".\nanyway, thanks for your attention on this issue.\n. already \"fixed\" by matrixToTransform()\n. svg2svgz:\nsvgo test.svg -o - | gzip -cfq9 > test.svgz\nsvgz2svg:\ngunzip -c test.svgz | svgo -i - -o test.svg\n. can you please explain this bug?\n. @pepelsbey, \u043e\u043b\u043e\u043b\u043e :)\n. wontfix.\n. and even\nsvgo -o test.min.svg test.svg\nshould works.\n. Joining (chaining) paths seems to be a very simple task, but applying tricky transforms like rotate or skew by recalculating path data sounds scary :) I'll take a look at it later, very interesting and not so trivial exercise.\nMaybe I'll do it step by step.\n. I got it! Thank you.\n. http://www.ia.hiof.no/~borres/cgraph/math/twod/p-twod.html\nwill be ready soon ;)\n. sorry for a long delay :)\nI get to the issue at v0.2.0\n. there is a big problem with some transformations applying and stroke (and probably something else).\nfor example if we are trying to replace:\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"100%\" width=\"100%\">\n    <path transform=\"skewX(30)\" stroke=\"red\" stroke-width=\"10px\" fill=\"none\" d=\"M10,10 l100,0 l 0,100\"/>\n</svg>\nwith the:\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n    <path stroke=\"red\" stroke-width=\"10\" fill=\"none\" d=\"M15.774 10l100 0l57.735 100\"/>\n</svg>\nthen 10px stroke is not distorted.\nalso i'm not sure if it possible to convert scale(2) to the stroke-width=\"10*2\" if input transform is a complex matrix like matrix(1.732, 1, -1, 1.732, 0, 0) which is equal to scale(2) rotate(30).\nso Path with strokes will be ignored.\n. - #86 \n- #87\n. oook :)\n. require('js-yaml').load(data) takes about the same time as the whole SVGO optimization.\nThis is not so critical at this time and I'm not a speed paranoic, but I'll try some another parser :)\nIdea is great, I really like YAML now.\n. JFYI, https://github.com/jeremyfa/yaml.js is a way faster (~x5 with SVGO default config).\n. I'm thinking to remove phantomjs and --test at all, because after absolute \u2192 relative path data transformation all browsers except Firefox have an internal rounding errors while calculating and rendering relative path :-/ and almost in all cases phantomjs test fails because WebKit has an almost invisible differences in a few pixels.\n. so, I removed it, at least for the next couple of minor versions.\n. 1. SVGO as library already exists and has always been, I just have not written a separate example for it.\n   You can take a look at lib/svgo.js, but there will be a big refactoring of this part before v0.1\n2. browserification - why?.. I find it totally useless.\n. 1. you can try it now, but it's better to wait for 0.1 refactoring and \"official\" usage examples :)\n2. ok, i understand you :) I will see what I can do except fs dependencies to simplify a browserification process.\n. will not fix at this time.\n. you're not the first person who asks for this ;)\nit will definitely be implemented, but I can't say the exact date right now.\n. you can already use --folder ;)\n. ok, i understand you :) and will try to do something in this direction soon.\n. i got it, thank you! trying to fix.\n. appeared in v0.1.5, please update.\n. \n. could you please provide me an example?\n. oh... ok, I'll think about how to mathematically understand that path curve is a circle.\nthank you :)\n. excellent! thank you for researching.\nlooks like it's not so hard, and I'll implement it asap as a part of convertPathData plugin.\n. it may be part of a simple editor (with #60 tasks), I'll look at it later.\neverything is going to svge - svg editor :)\n. hi.\nI figured out what is the problem, fix coming soon. thanks for the report!\n. out in v0.1.7\n. I agreed that Path -> Text conversion is almost impossible...\nreally, maybe try a real OCR tool? but i have no idea how to link the resulting text with the SVG data.\n. yes, it's a good idea, any type of non-svg data can be determined and replaced quite easily.\nI also thought about CSSO for embedded CSS.\n. fixed, will be released in the next patch version tomorrow.\nthank you ;)\n. great ;)\nfeel free to send me any bugs you've found.\n. you can run svgo with the --disable convertColors param, but could you please provide an examples of wrong colors conversion?\n. I think that there are not so many colors definitions in svg files to make such \"lossy\" optimizations and get any significant profit.\nbut if you really want this feature... implementation may not be so simple, I need to think more about it.\n. looks interesting :) but I still can not catch how to automate it...\n(*) yeah, I thought about path -> polygon (or polyline) conversion if only line segments are present.\n. thanks!\nlooks like a rare case, but I'll take a look anyway.\n. thank you!\nrefactored it a bit and pushed out to the dev branch, will be in the next stable version.\n. thank you for reporting, it's a funny bug.\nI probably will make a special list of attributes to cleanupNumericValues them.\n. \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043b\u0443\u0447\u0448\u0435 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 --disable cleanupIDs, \u0442.\u043a. \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0433\u0430\u0434\u0430\u0442\u044c \u0447\u0442\u043e ID \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0433\u0434\u0435-\u0442\u043e \u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e\n. \u0441\u043f\u0430\u0441\u0438\u0431\u043e! :)\n\u0441\u043c\u0451\u0440\u0434\u0436\u0438\u043b \u0432 dev, \u0437\u0430\u043a\u0440\u043e\u0435\u0442\u0441\u044f \u0438 \u043f\u043e\u0435\u0434\u0435\u0442 \u0441 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0439 \u043c\u0438\u043d\u043e\u0440\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439.\n. I checked this in Chrome, Safari, Firefox and Opera and didn't see any problems :-/\n. yes, that would be nice.\nthanks!\n. Inkskape has a floating number precision \"2\" by default, while svgo - \"3\".\nwe can already change this in svgo.yml at convertPathData.params.floatPrecision and get even smaller size, but I think that there should be a cli-option.\n99.\n. I got it, thank you.\ntrying to fix asap.\n. thanks, I'll think about it.\nlooks interesting.\n. it's already works as it should:\nsvgo -s '<svg><path d=\"c0 -1.4 1.1 -2 2.5 -2\"/></svg>' -o -\n<svg><path d=\"c0-1.4 1.1-2 2.5-2\"/></svg>\nif you are sure that it's not please send me the original file.\n. ok, i got it.\n. i got it, thank you :) will be in the next minor versions.\n. ok, i got it :)\nthank you, I'll try to fix it in the minor version next week.\n. the problem is a bit ambiguous because clip-path property is not inheritable, so in our case <g clip-path=\"...\"><use .../></g> doesn't make any sense.\ni think that i should to correct removeUnknownsAndDefaults plugin to strip out such cases before collapseGroups will try to move the group's attributes to the content element.\n. input --string will be parsed automatically, output with ---datauri:\n--datauri base64\n--datauri enc\n--datauri unenc\n. it will be fixed in the next v0.3, which is a total refactoring.\nthank you for the report :)\n. done.\n. wow, you're the first person other than me who made svgo plugin :)\nthanks, I'll take a look for some improvements later before going to master.\n. I'll take a look, but if\n// unfortunately due to the way svgo merges configs, to disable a specific plugin it must be at the correct\n// index in the plugins array compared to the default config in .svgo.yml\nis true, then this is a svgo bug, because plugin's turn off should not depend on the order.\n. nice :)\nthanks, i'll take a look.\n. are you sure?\nI don't see any errors while installing svgo from npm.\n. please provide a before/after example because SVGO should not remove these attrs for no reason.\n. wow.\n. stupid bug, got it.\nwill be in the next minor version, thanks for the issue reporting.\n. thank you!\nre-merged to the dev branch and will take look at it a bit later.\n. this is a sax parser error, looks like you have an invalid-non-well-formed SVG (XML) file.\ni have nothing to do with it because this error is not directly related to svgo.\nplease try to validate your file with XML Validator.\nif all else fails then write here again with the link to your file.\n. glad you figured it out :)\n. thanks for the report.\ni think that we should create an issue in sax-js\n. coming soon.\n. \u0447\u0451\u0440\u0442, \u044f \u0432\u0434\u0440\u0443\u0433 \u0440\u0435\u0448\u0438\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0435\u0442\u043a\u0443 dev, PR \u0441\u0430\u043c \u0437\u0430\u043a\u0440\u044b\u043b\u0441\u044f :) \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u0432 master?\n. \u0438 \u0435\u0449\u0451, \u0441\u0434\u0435\u043b\u0430\u0439 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u0441\u0442 \u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u043a\u043e\u0440\u043e\u0447\u0435, \u0441 path'\u043e\u043c \u043d\u0435 \u043d\u0430 \u043f\u0430\u0440\u0443 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0432 \u0448\u0438\u0440\u0438\u043d\u0443.\n. thank you.\n. actually there is nothing async in svgo parts, so current async version is almost a fake async.\n. ok, thank you guys!\ni'll update svgo soon.\n. this is definitelly problem with your setup, you must have a path to NPM's binaries in your system PATH so bash might find them.\n. thanks.\n. oops.\nok.\n. #157 \n. :+1: \n. @silentroach, is this was fixed in #165/#166 as well? if so, it will be available in the next patch version.\n. ok :) v0.4.4 is coming soon.\n. wow, thanks!\nespecially for the russian one :)\n. :scream_cat: \n. thanks, I'll take a look.\n. thanks\n. that's because provided SVGs contains <!ENTITY ...> declarations and our sax-js is in strict mode. I'll fix it in the next major version.\n. yeah, I think that we can drop v0.8.\n@GreLI if you'll decide to merge this plugin please drop 0.8 here and here.\n. it depends on how you will implement this.\n. \ud83d\udc4d \n. @GreLI so let's use semver? every breaking change is a major bump (positive integers are still free), every new feature is a minor and every fix is a patch. well, 4 years ago this was not so popular :) v1.0.0 FTW.\n. @GreLI supporting CSS in its basic form could be v1.1 or whatever minor version bump if it doesn't break backward compatibility or something. so imo it's time for 1.0 for sure.\n. btw why all your builds are broken if there was a minor version bump while a major number is still zero?\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time.\nhttp://semver.org/\n\nthis is why we have that special behaviour of ^-range:\n\nCaret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice.\nhttps://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\n\nso you had to use something like \"svgo\": \"^0.6.6\" to follow semver from your side. so... have you been using * or 0.x?\nit's a different kind of question why there is still no svgo@1.0.0.\n. in other words: dropping Node.js 0.10 was a breaking change for sure, no doubt about it. but it's totally allowed to make that only with minor version number while major one is zero.\n. greenkeeper has been working hard :) builds are so green now.\n@GreLI could you please revert a part of commits prior to Node.js version dropping, then publish 0.7.1 (this will fix builds), then apply \"breaking changes\" again and publish it as 1.0.0? it seems like we still have to do something regardless the semver discussion.\n. but greenkeeper could bump it again for you guys. or for your dependencies. and if your dependency maintainer will not bump a major version of that dependency too then things will become bad again.\n. My intent (happened few times actually) to rewrite SVGO from a scratch was based exactly on JSDOM. I see many benefits:\n\nDOM Tree for free\nDOM API for free\nIt should be possible to abstract SVGO core from Nodejs at all so we can have a build for browser (I remember there were 1+ requests for this)\n\nI had some very raw prototype but now it's just lost in time.\nAnother ideas which I'd like to see if someone would like to take over this huge effort:\n\nESNext all the things with Babel, Nodejs 4+\nmodularize\nmonorepo\neach plugin svgo-plugin-foo is a package\ndecouple svgo-cli, \"API first\"\npresets\nsvgo-preset-safe\nsvgo-preset-aggressive\n\n\nCheerio on top of JSDOM if it's really necessary for even more handy DOM tree traverse/mutation/etc\nStrict semver with no fear of positive integers and much faster release cycle\n\u2026\n\nRegarding \"svgz\" in particular \u2013 I don't personally think that it's a good idea to have it as a separate project and split the effort. Many SVG optimizations are based on pretty complex math and geometry, I know zero to few JS devs who are good at it and able to fix such an issues. @GreLI did a really amazing job on maintaining SVGO and he knows about this a lot, more than me actually :)\nMy point is to 1) discuss more tech details 2) create a branch 3) collaborate. It's REALLY important to have all the devs who are deep in SVG context together.\nI'm no longer in the context of SVG optimization and not going to do any significant amount of work by myself for SVGO for sure, but I'll be happy to help with any tech questions and discussions.. Yeah, and one more thing: kill the damned COA please regardless the decision you are going to make.. >svgo.optimize would become synchronous\nIt's sync even now in fact, under the hood :) We don't need to wait for SAX in async way actually.\n\nOther tricky thing is to define plugins order\n\nOh, you just reminded me what I was trying to do. So, the idea (I had a prototype for this as well...):\nEach plugin could fire an event, like \"hey, I just changed an attribute for this node\". Each plugin could subscribe to events, like \"hey, I'd like to run again on this node because I know how to remove nodes with specific attributes\". Something like Mutation Observer but afaik it's not implemented in JSDOM (yet?) so it requires some wrappers around DOM API helpers.\nThe madness could be started manually by SVGO like \"hey, here is a root node, GO\" and then some of plugins should react.\nPros:\n No plugins order, it just doesn't matter anymore\n No multipass or any other (hacky) workaround, SVG is always optimized by maximum possible amount of plugin runs\n* Much easier new plugin drop in, just add it\nQuestions:\n* Is it possible at all? Circular dependencies?\nWDYT?. >(svgElement, globalOptions, pluginOptions)\n(svgElement, { ...globalOptions, ...pluginOptions })?. @Pomax I find this a bit aggressive. Of course we do have push rights to repository that we own in organization that we own.\nI'm the original author who hasn't contributed to the project since 2013, so technically I have nothing to say in this or any other PR.\n@GreLI is the only maintainer, I know him personally and he is totally responsible for any changes to SVGO for years.\nUnfortunately there are no other candidates on the horizon to become a maintainer for 3.5M of weekly downloads library made of math and geometry. Considering recent incidents in JS community this is quite a big responsibility.\nI'd personally like to merge every stalled PR around and close a lot of issues, but I lost the context forever.. ",
    "kizu": "I can see it be not that safe: if someone would try to use SVG Stacks one day, the obfuscated IDs could break things up, 'cause author would no longer know what IDs are there.\nHowever, if there are some common ID patterns used by SVG-producing software, it would be not that unsafe to reduce them.\nHowever, I can see how an external Stylesheet could use those IDs. However, there can be a lot of other problems with external CSS, so I don't think it'd be a problem there :)\n. ",
    "GreLI": "SVG allows relative coordinates, so it's important to avoid a systematic error by accumulation rounding errors from the every coordinate. I believe the rounding procedure should work with absolute coordinates. So, the conversion must be done before the rounding.\n. No, no, no. I was saying quite opposite: first, convert to absolute if needed, then round the values, and then you can convert back to the relative. Otherwise the error will be accumulated on each path step.\n. Not quite so, it's about lines simplification. Still, it's not that useful, IMHO.\n. Is it a really needed conversion? For now omitting viewBox, while width and height are present, is the only way to\u00a0prevent SVG on background scaling bugs in Opera on zooming in.\n. Try to zoom page with SVG on background, like pepelsbey.net. You'll see a strange behavior like scaling is applied twice to images. But when there is width and height set but no viewBox all is ok when you zoom it in. It still bugs on zoom out but how many people do this?\n. He is aware of this.\n. @pepelsbey, sure, see http://jsfiddle.net/GreLI/f3YS6/1/\n. @pepelsbey, a little bit more specific test: http://jsfiddle.net/GreLI/f3YS6/2/\n. I believe, that SVGO cannot just remove width and height attributes because it can lead to\u00a0unespected behavior. E.g. one can rely on dimensions of\u00a0svg image in\u00a0background set by a\u00a0css rule. Without sizes a backgound image size will be dependent on\u00a0size of the element.\nBut it's ok for an optional parameter or plugin.\n. Well, there is transformsWithOnePath plugin. Also, check up great Snap.svg.\n. It's a major change, so it would likely be in a brand new svgo version. Unfortunately, it will not be soon. \n. Actually, you can note that the path segment like a5,5 0 1,0 10,0 5,5 0 1,0-10,0 has shorter length then <circle cx=\"10\" cy=\"10\" r=\"5\"/>. So, there is no profit in making it circle. Moreover, you can make it even shorter without notable difference in a way like a5,5 0 1,0 .1,0\n. Well, it's unlikely that you'll find \u2018arcto\u2019 (\u2018a\u2019) command in the wild. More likely that you find arcs within complex paths (that's why I compare only the command) expressed with bezier curves which are written with 6 coordinates pairs. Converting these curves to arcs gives much more, especially when one arc is expressed with few curves. That usually happens when an\u00a0arc takes more than one quadrant of a\u00a0circle.\nI have a prototype of such an\u00a0optimization, but it's imperfect (rounding errors make effect) and a little bit outdated. (Also, beware of force pushes.) Currently, I'm buzy with fixing main bugs of svgo to ensure its correct work, and I've almost finished with it.\n. FYI version 0.6 of svgo recognizes arcs in curves and converts them correspondingly. Arcs path commands like a5.07 5.07 0 1 0-2.8-9.72 5.07 5.07 0 0 0 2.8 9.72 (with precision=2) in your example are shorter as an part of an path then a separate <circle>.\n. Actually, it was done in #202 with prefix option in cleanupIDs.\n. Not sure what you are asking for, but svgo writes output in compact form by default. This happens because the input file is translated to internal representation and then it serialized back in XML. There is --pretty command-line option, if one wants to\u00a0pretty-printed output format.\n. Not sure that svgo should do image editing (except simple cases with manipulations which done anyway). But probably in future it will crop path elements outside viewport.\n. > But probably in future it will crop path elements outside viewport.\nSeems like it wouldn't. In SVG 2 \u201cSVG root and foreignObject are no longer overflow:hidden in User Agent style sheet.\u201d (as per Changes section).\nAlso, I don't think SVGO will crop an image since it's not an image editing tool. However, there is a\u00a0transformsWithOnePath plugin that can do it. It works only for one path and only with relative coordinates (set utilizeAbsolute: false option to convertPathData).\n. Compressing PNGs is a very complex topic. There are a lot of tools, many of them aren't cross-platform. pngcrush isn't a best one. Also, it can be time consuming depending on compression method (e.g. zopfli to\u00a0optimize deflate compression isn't a fast algorithm).\nI believe there should be a modular structure that allows to connect external compressors, but as for now SVGO is far from that.\nAs for CSSO\u2014it's already included, so I'm closing this.\n. It was eventually made, I guest convertColors plugin now fully satisfies this request.\n. @atwood-cai, there is mergePaths, which merges adjacent paths with same attributes into one after checking for their possible intersection (by comparing convex hulls for performance reasons).\n. It's been done.\n. You can just add or amend width and height attributes in the root <svg> tag.\n. Yes, it's out of scope, and there are a lot of issues with viewBox, resizing etc, so it isn't clear what to do in different cases.\n. Partly (the path, but not gradients) fixed in https://github.com/svg/svgo/pull/229\n. Hmm, couldn't reproduce with the current svgo version.\n. Apparently, it was fixed eventually.\n. As I wrote in #19, it would be wrong to do this by default, since authors may rely on intrinsic sizes (e.g. in css background). But it's ok for an optional plugin, you are welcome.\n. Fixed in #198.\n. Sorry, but I couldn't reproduce.\n. Done in v0.5.0. It caused some bugs.\n. Way too outdated.\n. Yep, it doesn't take in account when stroke attribute is inherited. I think, I'll disable it by default until the issue can be resolved.\n. I've disable the plugin by default.\n. Yep, you are totally right. \n. I've disabled the plugin by default.\n. Nope, I keep it in my mind.\n. Actually it's ok now.\n. Yes, such a bugs were fixed in v0.5.1. Are you using a recent version?\n. Yep, it doesn't make sense to convert circles or rectangles with rounded\ncorners\u200a\u2014\u200ait will only become larger.\n. I don't get the question. It's possible to\u00a0get circles converted to paths. E.g. if you combine it with other shape in\u00a0editor (they don't have to\u00a0intersect). But usually it makes sense to\u00a0separate circles from paths for optimization. Unfortunately, it's complex enough task to\u00a0do automatically in\u00a0case if a\u00a0shape consists not only of circle.\n. @Enome, well, then yes, svgo will not convert circles or ellipses to anything else (at the current state at least) and unlikely will do. I\u00a0can only suggest you to use an\u00a0editor for combining shapes into one path.\n. Fixed in v0.5.0 by disabling removeUselessStrokeAndFill by default.\n. Unfortunately, links are dead.\n. Just made a release. Enjoy!\n. Nothing is perfect. I'll look on this later.\n. Yes, thank you! It really helps to hunt bugs.\n. Probably, transforms precision issue. See #334.\n. Take a look on .svgo.yml. To set float precision you need to change from\n- cleanupNumericValues\nto\n- cleanupNumericValues:\n      floatPrecision: 1\nNote, that there is several plugins that have this option.\n. No problem! There is an issue about cli-option #99, but no progress yet.\n. FYI, there is --precision option that does the same added in v.0.5.1. The only exceptions are transforms\u2014because multiplication requires more presision.\n. It's actually floatPrecision in config like plugins parameter.\n. Note that thanks to #228 when you specify the output folder it works.\n. just as simple as\nsvgo -f <input_folder> -o <output_folder>\n. Looks fine for now. Try the latest version of svgo and may be node.js.\n. Actually, specification defines only integers in rgb() function, but done.\n. It would be helpful if you could provide such example files. Please, don't attach images to Github, since it doesn't support SVG.\n. @huantingchen you can see the changelog for v0.5.1 in CHANGELOG.md. There was added a\u00a0check for intersections in mergePaths plugin and since it has O(n\u00b7log(n)) complexity it could slow down the process. Try disabling it.\n. Fixed in https://github.com/svg/svgo/commit/10146b5498e0cfd16f51eb28cb9963e064703235\n. Hi! What the point in updating dependecies? Is there a bug?\n. Thanks for bringing attention! Unfortunately, pull-request cannot be merged, so I incorporated it in the latest version commit.\n. Hi! Sorry for the late answer, I've missed somehow this issue.\nRegarding the question, you're right, there is no such a method. It's not planned in short term, but probably will be added with reworked API. Unfortunately, the latter requires a\u00a0lot of work, which we don't have enough time for.\n. Actually, trailing commas are perfectly valid in ECMAScript 5 and so in Node.js.\n. Obsoleted by #229.\n. Disabled the plugin in 84f105b76b81c3c8425b4507366e19a09117ac1b.\n. Hi! Could you rebase and squash commits?\n. > @GreLI how to check that an  is rootmost within the syntax tree?\nFor now it'd be something like item.parentNode.elem == '#document'. May be it would be better to add a method to\u00a0API.\n. Franky, I doubt that svgo should have editing options, except for its main purpose.\n. While it's interesting, it can\u2019t be automatically merged. Need to rebase, also it would be nice to squash to commits: de073e9 and 8a693e7.\n. See the answer in \u00abHow to update GitHub forked repository?\u00bb.\n. Sure, you can. You don't have to contribute, contributing just makes yours and others life easier.\n. Regarding plugins see https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#3-plugins\n. Actually, you can't merge such objects. SVG allows to reuse the with the <use> tag. But still in many quantities it's the same repetition, just somewhat shorter.\n. Yeah, I disabled the plugin by default for now.\n. Not in SVGO for now. Some elements can be merged in groups <g> though.\n. There is one important feature\u2014convertPathData applies transformations to paths. So, if paths have different transformation normally they wouldn't be merged, but after applying transformations, merging becomes possible.\n. Fixed issue with \u201cflies\u201d image in #189.\n. Well, in v0.5.0 svgo doesn't combine transforms, but applies them to paths with arc command, so it's somewhat better.\n. Unfortunately, IE isn't the only issue. I had bug in Safari with <use /> tag as well. (<use></use> was ok).\n. #396 addresses this issue.\n. Landed in v0.5.0\n. The PR has been merged.\n. For accessibility reasons\u2013there could be description that helps people to understand an image.\n. The plugin has been disabled by default in v0.5.0.\n. Really? My bad. Anyway, I have a solution now.\n. I'm going to release soon, but a couple of bugs need to be fixed before that.\n. v0.5.1 has been just published.\n. Done in v0.5.0.\n. Yeah, I guess @roadhump is right\u2009\u2014\u2009there is no need in additional plugin.\n. Instead of silent removing i'd recommend to comment out this string with reason of removing. Otherwise, someone in future may think that it's a bug.\n. Actually, I couldn't reproduce such a bug. Either Chrome or Firefox worked with my tests correctly. Since these browser is being updated on regular basis I don't think it's any more actual.\n. There is an command-line option --pretty which formats output code.\n. Well, it actually works: see \u201cDone in \u2026 ms\u201d, but yeah, there is something odd, while nothing changed except updated dependicies.\n. Should be fixed by a2f77efa531e174af8ce86903831e51ec8661808.\n. Well, it's not a bug. Self-closing tags are perfectly legal in XML, it's more like a Chrome bug.\n. Well, it doesn't seem that it really fixes #174 unless you specify an output folder.\n. Plugins can be disabled with disable CLI: --disable=cleanupIDs as it written in \u201cHow to use\u201d.\n. Actually, without throwing, sax.onend will be executed just as sax.onerror, so callback would be executed twice, second time like normal. return in your example does nothing.\n. I've added some checks in a2f77efa531e174af8ce86903831e51ec8661808.\n. It's an editing feature, not an optimization. Also it heavily depends on fonts, you basically need to render them, which is far out of scope.\n. It's quite strange. Could you provide a file which breaks svgo?\n. No info has been provided.\n. Yeah, it's nice, but I slightly doubt that it would be very useful. The most superfluous part in paths are curves.\n. Actually, it's a browser bug. The specification says to trim whitespace.\n. There is a --multipass command-line option were introduced in v0.5.0. I guess it should help.\n. Now works, after d9ad4183fac1010a6a03ad674699c168fb316dce.\n. Would you mind to combine two if conditions into one? Generally, it's just first condition conjuncted with the second.\n. That's better, but I'd like to indent condition in parentheses. Also you don't have to parenthise \u00ab&&\u00bb condition\u2014it has higher priority.\nBtw, I'm thinking of disabling this plugin by default anyway, since it need to take in account inherited properties (and possible styles), see #145.\nOh, and it would be nice if you could rebase over actual version.\n. Yeah, it seems you left a conflict in plugins/removeUselessStrokeAndFill.js.\nJudging by commits you have merged, not rebased. Check \u201cHow to update GitHub forked repository?\u201d topic on SO.\n. Well, I fixed some related bugs and it seems ok to me now.\n. It's an extension making for the editor, you should make a request there.\n. Works with the current version in the repo.\n. Just make a pull request.\n. :cool: \n. It's a known issue with mergePaths plugin. It should check overlapping, but it's not that simple problem. You can disable it (svgo --disable=mergePaths) for a temporary solution.\n. Seems to be ok with current version in the repo. I've fixed a couple of bugs.\n. v0.5.0 should have fixed it. If not, please reopen.\n. Closing, because \u2018linkedin\u2019 icon is ok in v0.5.0 and other comments don't have essential information.\n. You should probably check in the new version v0.5.1.\n. Nice!\n. Yep, I'm planning to release soon with bugfixes and, probably, some new features.\n. Version 0.5.0 is released.\n. Have you tried svgo -f ./svg -o min with existing min folder?\n. v0.5.1 with the fix has been just published.\n. Unfortunately, there is no image behind provided link.\n. v0.5.1 with the fix has been just published.\n. Does the image open in browser? XML is a strict format. If it does, then could you provide the sample image?\n. Could you provide some sample images? (Github converts loaded images to PNG.)\n. Issue with strokes was fixed in the recent commits, other than that it's a duplicat.\n. v0.5.1 with the fix has been just published.\n. Haven't planned yet.\n. Just being busy.\n. Almost. I'm hoping to fix the most annoying bug for now with merging overlapping paths.\n. That's odd. I have tested with some images with radialGradient and it was ok. Could you provide sample image?\n. Sorry for late response.\nActually, current API isn't supposed to create elements. SVGO is created to remove extra, not to add.\n. One can workaround by using constructor property:\njs\nexports.fn = function(item) {\n   var elem = new item.constructor({...});\n}\n. @raphdg, note that SVG allows inner svg elements, so if you remove x and y coordinates of them, you'll break an\u00a0image. Also, it worth to check if viewBox numbers correspond the sizes, and if not may be transorm the SVG.Yeah, it's not so simple task.\n. Actually, they were already encoded, but I've slightly improved it.\n. It's hard to say something without details. E.g. what scale did you use, which images are the most different, is the renderer correct.\nDefaults are pretty strong actually: 3 digits after the point, but there may be some bugs which are shawn as tiny differents due to small sized details.\n. That's something, thanks!\n. v0.5.1 has been just published. While I haven't seen errors in the v0.5.0, it helped a lot in a\u00a0development. Thanks again!\n. :cool:\n. Well, without any further information it tend to be is status \u201cCannot reproduce\u201d (assuming you're working with correct XML-files).\n. Sorry, didn't see you edited the post. Well, it seems that xml-entities like &ns_ai; make parser mad. You are using Adobe Illustrator, isn't it?\nTry saving files without Adobe extenstions or even use \u201csave for web\u201d\n. Actually, it isn't a true SVG, it's a couple of shapes and a big Illustrator object in SVG container.\n. As a temporary solution I recommend to turn off \u00abPreserve Illustrator Editing Capabilities\u00bb and some other advanced options, like including XMP, in Illustrator SVG saving dialog. These options make no sense\u2014any extra will be stripped by svgo anyway.\n. I'm afraid it has nothing to do with image optimization. It's a task for an editor.\nIn case like this it's better to use a little overlap like 1px to prevent such edge effects. There is a\u00a0lot of such issues when page is zoomed in desktop browsers.\n. v0.5.1 with the fix has been just published.\n. Hmm, tried with v0.5.0 and saw no problems. Try to update dependencies: there a bunch of bugfixes in v0.5.0.\n. Good catch!\n. Oops, merged in wrong branch.\n. I guess the reason is in <path fill=\"none\" d=\"z\"/>, it was fixed recently.\n. v0.5.1 with the fix has been just published.\n. Just lack of time and hands.\nAlso it'll be good to mention a license of the embedded code and verify that it is compatible with svgo's MIT license. I'm not sure that code under BSD license can be embedded in a such way. Probably, you have at least to paste BSD license into the plugin.\nBtw, I'm not sure that it'll give much effect.\n. Closing, since it should be done in other way.\nAlso, it's not that useful. It's much more effective to simplify curves. E.g. like Paper.js does.\n. Sounds reasonable.\n. v0.5.1 with the fix has been just published.\n. Yep, that's why there is --multipass option added recently.\n. @LeG3nDz, you have to write an array of plugins:\nplugins: [\n        { removeViewBox: false },\n        { removeUselessStrokeAndFill: false }\n    ]\n. /cc @dfilatov \n. I've changed the way rounding works, so a\u00a0lot of minor changes with each pass are gone, thus --multipass gives final result in a few passes, just as it should be.\n. v0.6.3 with the change has been just released.\n. Are you sure that it's because of svgo work? I couldn't reproduce this.\n. v0.5.1 with the fix has been just published.\n. Nice!\n. Good job, but it lacks tests.\n. Excellent!\n. Yes, svgo currently doesn't work with classes and styles well.\n. But here collapseGroups is responsible for the error.\n. v0.5.1 with the fix has been just published.\n. Duplicates #277, I guess\n. I believe that software shouldn't fail even with with incorrect data, so I will take a look eventually.\n. v0.5.1 with the fix has been just published.\n. There is a catch. Consider the example:\n<g>\n    <path fill=\"#AC162C\" d=\"pathdata\"/>\n    <g>\n        <path fill=\"#AC162C\" d=\"pathdata-2\"/>\n    </g>\n</g>\nRight now it'll be transformed into\n<g>\n    <path fill=\"#AC162C\" d=\"pathdata\"/>\n    <path fill=\"#AC162C\" d=\"pathdata-2\"/>\n</g>\nafter colapseGroups and then merged with mergePath.\nBut it will not happen after your changes. A more generic solution is needed.\nFor now there is --multipass key to account such cases as yours.\n. Well, it's really rare when you meet such a file which have numbers ending with zeroes. Or have a\u00a0GCD. Most likely you'll see an image with paths which contains Bezier curves with fractions in numbers (6 for each segment, sometimes 4). Moreover, rounding this numbers have considerable effect on image. E.g. rounding to one digit instead of two.\nAlso, you need to add viewBox attribute if an image didn't have it, to check if default values like stroke-width=\"1\" used and add them too, appropriately scaled. Be sure that the profit will be more than the side effects. And so on.\n. > The biggest problems are (and I'm not sure its not a problem) may be with some path constructs like Arcs. I've never used them, but when I tried building one of my examples, i naively tried multiplying all the values by 10, but the arcs broke.\nYeah, that's because three of 7 parameters there: one is rotation angle (often 0, but if present shouldn't be modified) and two flags (0 or 1, spec says they can be set by any non-zero value, but no sense in doing so).\n. There is an article about such an optimization: Understanding and Manually Improving SVG Optimization. The key part is making decision about does the image breaks. I'm afraid that cannot be automated.\n. Well, actually it's not the result of convertTransforms plugin, but convertPathData. It just doesn't take in account optional cx and cy parameters of rotate().\n. v0.5.1 with the fix has been just published.\n. Note, that by the spec \u201eThe first control point is assumed to be the reflection of the second control point on the previous command relative to the current point.\u201c\nActually, there is variable sdata that is enhanced data like data in c. You can just change instruction to c and data to sdata.\n. Well, we'll be always glad to review a pull request. Actually, svgo now do nothing with styles, and optimizations suffer from that. Not sure though that the plugin like this should be enabled by default.\n. SVGO v1.0.0 with the plugin has been released.. I guess only in the plugin itself.\nhttps://github.com/svg/svgo/blob/ceccf1ffdcdcba0f422a49685c2f60520579e46a/plugins/inlineStyles.js#L20-L38. type=\"translate\" is the default value, and thus correctly being removed. Are you sure that it's the real source of problem? Probably it's a bug in your software, or some other reason.\n. Sorry, without an example file there is nothing I can do.\n. v0.5.1 with the fix has been just published.\n. Yeah, it's a known issue with mergPaths plugin.\n. v0.5.1 with the fix has been just published.\n. It's a parser bug, unfortunately.\n. v0.5.1 with the fix has been just published.\n. This happens because optimisations are simple enough and done in one pass. Sometimes in complex cases several passes produce best result. There is recently added --multipass command-line key which does multipass optimisations (limited by 10 times).\n. There is removeUnknownsAndDefaults which can be disabled, like this:\nsvgo --disable=removeUnknownsAndDefaults -i <input_file> -o <optimized_file>\n. Yes, this plugin is responsible of removing of all unknown elements and attributes, also it removes attributes with default values.\nThe list of attributes is in plugins/_collections.js. You can add there your own.\nProbably, it's a good idea not to remove data-* attributes.\n. No short-term plans (I just don't have time), but in long-term yes, it should be done.\n. v0.5.1 with the fix has been just published.\n. See the commit, I've added a\u00a0check and enabled a plugin. Will work in the coming next version.\n. v0.5.1 with the fix has been just published.\n. Though I've forgot to mention it in the list of changes.\n. I don't see a difference with the current version in the repo. Probably, you should wait for a new version. There was a bug fixed related to multipass, but it isn't released yet.\n. v0.5.1 with the fix has been just published.\n. Ok\n. The workaround is to save images in Illustrator with disabled options like \u201cPreserve editing capabilities\u201d (they don't make sense anyway if you are passing that images to svgo). Or it's possible to replace entities with their value manually, but it's suits better if you have only one or few images.\n. I guess it's not svgo issue, it's an OS responsible for this. Usually, .svg extension has image/svg+xml MIME type, so you should write svgo output with it.\n. I have no idea how a program can change MIME type a single file.\n. Ok, got it. I guess your OS follows linux way and makes a guess about MIME type by looking into the file content. Since svgo removes doctype and xml prolog, that checks no longer work. Try for example disabling removeDoctype plugin:\nsvgo --disable=removeDoctype\nBut if you want to have maximum compression (doctype is totally useless in all other cases and even isn't recommended in the spec itself) you'd prefer to\u00a0change how MIME type detection works (e.g. by .svg extension) or amend scripts depending on it. Unfortunately, I can't help you with that.\n. I'm glad, it's been settled.\n. It's an invalid XML, unfortunately. svgo can't process such a file, since parser declines it.\n. Seems like it's not an issue anymore with newer version of npm/ionic/svgo.\n. That happens because svgo keeps IDs values in an object dictionary, and 'proto' id rewrites prototype of the internal svg representation, thus breaking svgo work.\n. Yes, the new version is coming. Need to fix some other bugs too.\n. v0.5.1 with the fix has been just published.\n. There is no such a plugin in svgo for now. Also, one may have an icon system with source file inlined in html and then icons used within that html code later.\nPerhaps the easiest way to implement it is to extend cleanupIDs plugin by removing the whole unused element in <defs> instead of just an id attribute.\n. v0.5.1 with the new plugin has been just published.\n. No objections. Pull-requests are welcome.\n. It's hard to say what is non-destructive. Is number rounding is non-destructive enough? Or changing XML structure? If yes what about whitespaces? Either of this is essential for effective optimizing.\nI think there could be presets one if which is more careful.\n. An image cannot be optimized and be untouched in the same time. Don't touch it with svgo if you don't want changes.\n. You've changed whitespace (line-breaks) and doctype there, while you've sad that it should not change.\n. Ok, this can be a careful preset as I said earlier. But there is no presets currently. Maybe somewhere in future.\n. > i.e. an svgo or optimize property:\nSorry, I don't get it.\n. Oh, I didn't noticed it. Why not a comment? Say, right after <svg> tag. It could also prevent optimisation of nested svgs for some purpose. (I plan to incorporate them in the host svg document, since sprites are sometimes made in a such way.)\n. Probably, it's duplicate of #272.\n. Yes, it is. I can only suggest you to turn off \u00abPreserve Illustrator Editing Capabilities\u00bb and don't include XMP\u00a0\u2014\u00a0they are useless anyway, since svgo wipe them out anyway.\n. It's been fixed already in the current version in the repo (a2f77ef, see line 130).\n. v0.5.1 with the fix has been just published.\n. Sorry, but I cannot find what's wrong with svgo.\n. Yeah, it looks good to me, I have no errors, and this error looks odd to me. Does disabling convertShapeToPath plugin solves the issue?\nsvgo --disable=convertShapeToPath\nMay be you should check your node.js version.\n. Please, check out if the problem persists in v0.5.1.\n. @TadWohlrapp, I see no errors with the latest SVGO version with or without widht/height.. I believe it's case-sensitive. I.e you have to write\nsvgo --disable=cleanupIDs email.svg\n. Oh, I haven't noticed that it was the root  tag. I'll look into this. Thanks for the input!\n. Well, there is a special option to keep SVG id named \u2018SVGid\u2019, so it's not a bug, just disable it:\n- removeUnknownsAndDefaults:\n      SVGid: false\n. I guess so, but I haven't find out why cleanupIDs doesn't remove it itself. There is no special exception.\n. I was wrong, cleanupIDs removes the id, so it's double work, thus removing redundant code.\n. v0.5.1 with the fix has been just published.\n. Default settings are in svgo.yml. You may create your own YAML (or JSON) config file to extend the config with --config command-line key:\nsvgo --config=custom.yml\nSee https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config\n. Do you have\nplugins:\nstring at the beginning of your YAML config file?\nIt's essential for setting plugin parameters.\n. Check out if the problem persists in v0.5.1.\n. @optimix-designer Config should be an yml or JSON file.\njson\nvar config = {\nis obviously none of these. Try for example\n{\n  plugins: [{\n    removeViewBox: false,\n  }]\n}\n(remember, JSON doesn't support comments). Yeah, it's been already fixed in #217, that's why you couldn't locate it.\n\nAdding the mask attribute to _collections.js#L1387 does not seem to be enough. :)\n\nYes, because it's already there under the 'presentation' group. (That was the fix.)\n. v0.5.1 with fix has been just published.\n. No, that's another issue. Path is being correctly transformed, but not path data in animations.\n. What do you mean by saying \u201cwhen enabling\u201d? These plugins are enabled by default and I don't see any breaking in v0.5.0\n. I tried with disable={collapseGroups,removeNonInheritableGroupAttrs} and this didn't have any effect except slightly increase in file size. Are you using the latest version?\n. Probably, you've enabled some plugins disabled by default. There is an image manipulation plugin that shouldn't be enabled 'til you are know what are ou doing.\n. What do you mean? Can you describe steps which you've done?\n. > 3) Enable \"Remove useless stroke & fill\"\nAh, it's totally differrent plugin. It's been fixed recently in d3e4f63ae51ca62377b8fd8a1e9adf5781ceee19. It was disabled because of buggy behavior. Will be in new version soon.\n. > Second bug:\nDon't see any bugs. \"Collapse useless groups\" is enabled by default as I mention earlier.\n. > 3) Enable multipass\nMultipass also had some fixes.\n. v0.5.1 has been just published.\n. It's an unknown attribute for svgo because it's not in SVG 1.1, so I guess that it's being removed by removeUnknownsAndDefaults plugin.\n. Yeah, but it's not a standard yet, and can be changed in any moment.\n. Added in v0.5.1.\n. I don't see any problems with the first image (with car). But the second one quite interesting. Looks like <g> should be preserved inside <switch> (useless in this particular image, but whatever).\n. v0.5.1 with this fix has been just published.\n. Well it has a long history. Initially svgo did something like this, but it was considered bad practice and it can break expectations: e.g. someone might expect icon to have fixed size in CSS background. There is even a pull-request #196, but it needs some checks.\n. Well, unused ids are already being stripped. For classes svgo just don't understand CSS in \u2018style\u2019 tag, unfortunately.\n. removeAttrs plugin should do the job.\n. Thanks, but I've made such a commit, actually. Just didn't pushed yet.\n. Yes, the new version is coming out! Just polishing it.\n. Fixed in e1060df.\n. v0.5.1 with this fix has been just published.\n. Hmm, couldn't reproduce neither with v0.5.0 nor current version. It only breaks the shadow in v0.4.5. Are you sure you're using v0.5.0?\n. Check this out in v0.5.1.\n. Yeah, mergePaths was fixed recently in e1060df7dc4b4afc63d6cc86fc41748a4940918d.\n. You can do it, when the new version will be published. Hope, this will be soon.\n. v0.5.1 has just been released. Now you can update in npm:\n$ [sudo] npm update svgo\n. It would be nice if you provide a sample image. Is there an empty <text></text>?\n. #336 is definitely different case which was fixed in ae2981cdea6696124587e9c39906ea90312aaf83\n. Please, check if this fixes your issue.\n. Just seen you had errors in svgomg's commits, so I found the error and fixed it. Unfortunately, I forgot about this multiple 'M' data trick in SVG when I made this check.\n. @beam2web, v0.5.2 has been just released\u2013it should be fixed there.\n. I've made transformPrecision parameter with default value is 5. Since transformations are multiplying on values, something 5 digits seems to be a good choice to meet 2+3 (or 3+2) usual coordinates digits\n. I've greatly reworked transformation\u2013it makes sense to split matrix into simple transforms, and deployed in v0.5.2. Enjoy!\n. LGFM, but why you made it Non-enumerable again?\n\nIf being able to convert a node to JSON is useful\n\nIt's somewhat useful for debugging.\n. Fixed in ae2981cdea6696124587e9c39906ea90312aaf83.\n. v0.5.2 with the fix has been just released.\n. Fixed in ae2981cdea6696124587e9c39906ea90312aaf83.\n. Fixed in 97a260bbf3a75764f250a56422b97719b9768a63 (rotate() optional parameters)  and in f68b310c1ea43b476e6fcf1aae6bdfc2d2b4d7f6 (the car)\n. v0.5.2 with the fix has been just released.\n. I don't understand what's the problem. The file you've provided is being optimized correctly (only removing redundant transform).\n. Yeah, that's one fixed in b3ee51c7bcf20ded13d547f81de37e5cd353c4bd.\n. Yes\n. v0.5.2 with the fix has been just released.\n. I wonder, how do such base64 files look like?\n. v0.5.2 with the fix has been just released.\n. Sorry, can't say nothing about grunt.\n. Well, all these reasons are debatable, but as an option it may be.\n. Sure, but most values are in lowercase already. Will it give any significant profit? 7-zip or zopfli can give much more. That's why I say it debatable.\n. I don't understand the requests. svgo passes transformations to paths in moveGroupAttrsToElems and applies transformations to paths in convertPathData. Probably, there will be a more sophisticated algo in future.\nCould you provide examples what do you have and what do you want to achieve?\n. Hmm, in your example svgo doesn't apply transform because of filter. Generally, transforms influence on filters and other linked content (like gradients) and svgo doesn't handle this influence. It's a complex topic (filters etc can be applied to other elements) which requires sophisticated manipulation.\n. Closing since the subject is unclear.\n. I have no idea, svgo uses standard console.error() method, so if it doens't go to STDERR, I guess it should be addressed to node.js.\n. > So I'm guessing here, maybe svgo somehow detects that STDERR is being PIPEd then in turn it may try to get the input (original svg data) from STDIN as well?\nNo, svgo does nothing of that.\nBtw, have you tried node 0.12? Or io.js. node.js may have some issues.\n. Well, it looks like Windows' peculiarities.\n. v0.5.2 with the fix has been just released.\n. What do you mean by breaking?\n. v0.5.2 with the fix has been just released.\n. v0.5.2 with the fix has been just released.\n. Yes, but I'm not sure that it should be in SVGO. It's an optimizer, not image editor.\n. Well, guess it's ok since svgo doesn't handle classes yet.\n. Likely it was fixed in 1151e44c5af4aee5ab44f3cef20e401b66a734e2.\n. Odd, it's totally fine to me.\n. Oh, I see. You are using the latest released version, while there were some fixes since then, including the one I've mentioned.\n. v0.5.2 with the fix has been just released.\n. I guess it's an issue with inherited pattern which has been fixed recently. (Not released yet.)\n. v0.5.2 with the fix has been just released.\n. Can you explain?\n. So, you're proposing to make streaming SVG parser or what? BTW, imagemin is a slightly different project.\n. There is actually an effort on writing parser\u2013SVGP. But I haven't look closely into it whether it possible to adapt streaming.\n. Closing since no action can be done by now.\n. That's a major change, that will be changed only on rewriting. Anyway it'll be considered then.\n. It's better with provided examples and svgo version. There was such a bug in v0.5.0 which's been fixed in v0.5.1.\n. Could you provide a sample file?\n. Yeah, it's been fixed after v0.5.1\n. v0.5.2 with the fix has been just released.\n. It depends on how you read it: one path intersects another, or two paths intersect.\n. Oh, my bad!\n. See about config.\n. So you need to provide your config in .yml file with content like this:\n(yml)\nplugins:\n  - cleanupIDs:\n      prefix: foo\nand run svgo with it like\nsvgo --config=yourconfig.yml\nYou can also provide a config in a command line like json:\nsvgo --config='{ \"plugins\": [ { \"cleanupIDs\": { \"prefix\": \"foo\" } } ] }'\nNote: cleanupIDs doesn't work with SVG files containing <style> or <script> since svgo can't parse them.\n. Because svgo is optimizer and generally circles and ellipses are shorter as their own tags. I know the only exception with the transformed (rotated) ellipse\n. Yeah, I know. It's coming soon.\n. Done.\n. Yes, it's known request. I just don't know how to present results. What output it shoud be?\n. > Optimized svg to stdout instead of modifying in place, may be?\nWell, there is already --output - (-o -).\n. v0.5.2 with the fix has been just released.\n. v0.5.2 with the fix has been just released.\n. v0.5.2 with the fix has been just released.\n. As you can see in tests, these paths are longer than circles, that's why I didn't added it when I wrote the plugin. So, probably it's worth only under the option like convertCircles (or ellipses if you'd add ellipses as\u00a0well).\n. Paths are ok, they are just written with more bytes which is opposite to purpose of optimization.\n. No docs, afaik, only lib/svgo/jsAPI.js.\n. Well, there is plans of new architecture of svgo and I find current API not ideal to say the least. So, it's not on the top of priorities.\n. Well, it should work only with disabled cleanupIDs. May need a special case for files like this.\n. No, it's likely removeUselessDefs removes symbols without ids, which are cleaned by cleanupIDs since they aren't used.\nOn the other side, yes, removeHiddenElems removes elems with display: none.\n. That's odd, smartRound shouldn't be called if precision less then zero, see function selection at the top of roundTransform.\n. It's hard to find the issue without sample image, but I hope that my changes should fix it anyway.\n. JFYI: v0.5.3 with the fix has been released.\n. v0.5.3 with the fix has been just released.\n. v0.5.3 with the fix has been just released.\n. Are you using the latest version\u20140.5.2? It works fine for me.\n. Tests seem to be little excessive (you're actually testing how the config works in the second part), but ok.\n. Well, there is nice online tool: SVGOMG.\n. It just works. I haven't look into it closely, but there is some info in \u201cabout\u201d section and it's open sourced.\n. removeViewbox is the very straightforward plugin that removes viewbox only if the sizes correspond. I.e. viewbox is equal to \"0 0 width height\". If it doesn't correspond, the plugin leaves it as is.\n. Well, the problem is triggered by cleanupIDs, but the file is illegal\u2013it uses same id several times, and one of it is empty.\n. Well, then it's a bug of Sketch in the first place. Report there for start.\n. v0.5.3 with the fix has been just released.\n. Do you use the latest version\u20140.5.2? Looks like mergePaths bug, but it was reworked in the last 2 versions.\n. Looks nice!\n. jshint is just a hint. And actually replacing \"'\" with '\\'' makes code just worse. Robots for humans not vice versa.\n. Well, there are other points too. Like triple equality is totally dumb (I have encountered only bugs caused by it, not double). Actually, I've corrected some real errors in code with jshint some time ago, and remaining has been left intentionally. \n. > But in general == operator is not a good thing because it invokes implicit coercion and could be a bug prone...\nIf you are using odd comparisons, yes it can, but nobody says you to write weird code.\n\u201cYou Don't Know JS\u201d excellent describes the topic.\n. About the remaining. See, there is semicolon before closing \u201c}\u201d which is not necessary\u2013it only adds noise to ifs with array methods like arr.some(function(){ foo; }). Removing var in for loop can blow if the another for, where the var is declared, is gone. Absence of 0 before a\u00a0dot can be confusing only for a very novice.\nRounding function in convertPathData.js is actually broken\u2013it's intentionally replaces itself with the corresponding function in the first execution (we know precision only from passed parameter).\nProbably, I'll drop a2c function in the future\u2013it's been borrowed from Snap.svg, but I've made direct arcs transformation since then.\nAfter that there is actually nothing left.\n. Yeah, thanks, e9d00c5c5704d6a3fad64f17c8e8c838ec273ffc adresses this.\n. v0.5.3 with the fix has been just released.\n. There was a --quiet option added in #445.\n. So, what's the point?\n. svgo doesn't strip width and height since a long time ago. Have you a recent version?\n. Yes, it has been recently added in #380 after the release of v0.5.2.\n. v0.5.3 with this option has been just released.\n. It's already doing so, but just limited to 10 times.\n. Yes, that's the point of the limit. Not to run for too long.\n. Actually, there is some weird stuff happens, it may give a little profit by the quality decrease. May be a lesser precision option will give you much more.\n. Wouldn't fix.\n. It'd just spend time for nothing. Ideally, there should be no changes after few iterations, but there are some rounding issues. It's not an optimization, just a picture little worse. If it's ok to you just decrease precision.\n. Only in my head :smiley:.\n. Not for now.\n. How it differs from full: true in config?\n. I believe, problems must be solved, not workarounded.\n. Haven't looked into the problem yet.\n. v0.6.0 with the fix have been just released.\n. That's because of ending z. Looks like a browser bug in rendering.\n. Unfortunately, (transformed) arcs are very fragile. Replace 4.58 with 4.5786 and you'll get it very close to the original. Even 4.579 isn't so bad, but 4.578 is even better and still very close, though not strictly mathematically correct. Probably, there should be a better rounding operation for such cases.\n. Curios that you can workaround this by optimizing one time with disabled convertTransform or convertPathData and then it'll be processed normally.\n. Well, svgo isn't a security tool. You can write a plugin that removes script tags.\n. Nice job!\n. No, it's my previos commit. Don't worry.\n. FIxed it today.\n. I guess the issue is obsolete since the PR is merged.\n. See #293\n. Unfortunately, svgo now doesn't parse style tags and thus it's not supported. svgo can't understand the meaning of stylesheets for now. Of course this is subject to work on in future.\nRegarding empty g, it should be removed in the second run or with --multipass comand-line option. Again, with the current architecture there are always cases in which plugins runned one by one aren't fully efficient, and there are plans for improvement. But it requires a lot of coding, so it'll be done not soon.\n. Actually, it was done recently in #427.\n. It needs a CSS parser which svgo doesn't have yet.\nAlso, CSS may have interesting things like media-queries, and it's an open question to pass styles from those.\n. @m5o, it's the same story. Normally, cleanupIds wipes unused ids and than empty group is collapsed. But since there is <style> element, cleanupIds can't tell anymore that id is unused.\n. Yeah, it's bug fixed in #394, it occurs when svgo optimize transform to empty state. In your case translate(-6.000000, -8.000000) and translate(6.000000, 8.000000) mutually cancel. As a workaround for the moment you can temporary disable convertTransform, then it should optimize normally.\n. I guess transformWithOnePath just doesn't handle absolute coordinate commands.\n. No, but if you run it with convertPathData plugin with utilizeAbsolute: false, it'd do the job.\n. No, there is no such a plugin I'm aware of. But the requirement is strange. The only purpose of defs is to prevent rendering reference elements. It's perfectly safe to use non-rendering elements like linearGradient without defs. Also, you can refer to other elements that aren't in defs as well.\nImages can be even optimized in a such way, because you anyway using those elements somewhere, right? So, no, there is no such a plugin. Of couse, you can write it's by yourself, but currently there is no good API to moving elements around, just adding it to one content and removing from the old one.\n. Have you tried disabling removeUselessDefs?\n. svgo --disable=removeUselessDefs\n. Circle and ellipse hasn't been added because they're have less bytes in a form of circle and ellipse tags instead of path.\n. It may be so, but there is no such a logic for now. It requires sophisticated algo that doesn't fit in current design. May be in future, when there'll be much better architecture (it's in early planning stage).\n. Such an option was added in v1.0.0.. Same bug as in #405.\n. Fixed in the latest version.\n. You can write a simple plugin. When there are several SVGs inlined in HTML there is no real need to keep xmlns in each one.\n. There is nothing bad in modifying prototypes in controlled environments (e.g. not in browsers). And I see nothing worthy in creating extra dependency for the functionality that's already present.\n. SVGO doesn't use webpack as for now. I see no point to revisit it. It just works.. Yep, I was thinking about it, but haven't got to it yet. Many plans, but very little time.\n. May be you were meant Illustrator? Inkscape is quite bad here.\n. Line simplification isn't an issue, actually. Lines takes only 1 pair coordinates, while curves takes 3. Sometimes, it only takes one number (horizontal or vertical line). So one curve is 3 times larger. And there are rarely images which actually needs line simplification, while there are image that may have too many curves and can be simplified without a notable loss.\n. Ah, forgot that part.\n. extra dot in (?![\\de.]), my bad\n. See #411\n. Well,\nplugins:\n  - convertPathData:\n      straightCurves: false\nhelps with such an issue.\n. v0.6.0 with the fix have been just released.\n. Yep, symbol isn't rendered and since there is no reference to it, it's being removed. You need to disable removeUselessDefs plugin.\n. I see it there right after cleanupIDs and removeRasterImages. Don't you?\n. I just thought, that it's better to disable cleanupIDs since you're referrencing to these symbols, right? And then items with IDs shouldn't be removed.\n. Yeah, I've seen it. Usually, I update dependencies when releasing a new version.\n. Dependencies have been updated in v0.6.0.\n. Interesting case, thanks!\n. v0.6.0 with the fix have been just released.\n. x and y work only on limited set of tags. style= adds 6 bytes by itself and can be compensated also by more than 6 rules, which is rare, actually.\n. Regarding the subject, collapseGroups plugin already does the job. Sometimes it can be missed because group is empty after later executed plugins, but the second run will optimize that. There's --multipass to run multiple times (10 times or until there's nothing can be optimized).\n. v0.6.0 with the fix have been just released.\n. Thanks for reporting! That was a sophisticated bug.\n. v0.6.0 with the fix have been just released.\n. Every digit after a point adds a byte, that's why setting of number of digits influences the file size significally. Considering web graphics, 3 digits is enough almost every time, often it can be reduced to 2 or even 1 digit, but that's requires handling (svgo doesn't know how do one uses an\u00a0image).\nBut for transformations, 3 digits is not enough due to fact their are being multiplied, so there is separate property which defaults to\u00a05.\nI\u00a0don't see any sense in rounding to\u00a01/3. It makes quality worse and brings nothing about optimizing. The only approach I may think of: multiply SVG units with corresponding ajust of viewBox to get rid of fraction parts. But in such a\u00a0case one can just scale content and only then perfom rounding.\n. Since the plugin needs only an outer <svg> it's better not to run it against every element, but use var svg = data.content[0] with exports.type = 'full' like it's done in plugins/addClassesToSVGElement.js (XML-prolog and doctype should be normally removed by corresponding plugins executed before).\nAlso, the value \u201c50\u201d of width and height seems to be too arbitrarily. It's better to set to common icon size like 16\u00d716.\n. The plugin is trivial, so I'm closing it until a more elaborated version will come.\n. I don't mind. It's not hard to do, PRs are always welcome ;-)>\n. You can change it with --indent 2 option since v0.6.4.\n. It's not that difficult, but obviously should be disabled by default.\n. It would be nice.\n. No, it's far for completion.\n. Why you've closed it?\n. Yep\n. Sorry, I can't say anything\n. Closed, due to #427\n. Good job!\n. v0.6.0 with the plugin have been just released.\n. Yes, Object.create(null) is nice, but there is a problem with id=\"__proto__\" that it doesn't resolve. See the failing test.\n. Not that I'm opposite to it, but svgo is a performance tool, so the less dependencies and starting time the better it would be.\n. Yeah, thanks! You're welcome. Actually, there are plans about building svgo on the new architecture. So, the cleanupIDs will just clean unused ids. References will be collected in the parsing time, since they are needed for some other optimisations as well (e.g. can we transform a\u00a0gradient or it's being used elsewhere). So, the plugins will be likely rewritten at some point.\nAlso, there are some optimizations that can be done already and are waiting for implemetation. So, minor code improvements aren't in top of priorities. Unfortunately, there is not so much time to implement all these plans. But pull requests are welcome.\n. What's up? Why did you closed it?\n. Yeah, merged it manually (176d0329a475b70ad8b593f3c9f8e7a62c345c14).\n. Wrong SVG, translate() doesn't allow omitting space between values while you have transform=\"translate(-621-124)\" (no separator before -124). See the syntax:\n\"translate\" wsp* \"(\" wsp* number ( comma-wsp number )? wsp* \")\"\ncomma-wsp means that there must be comma or whitespace character between numbers. Where did you get such an image?\n. v0.6.1 now deals with such cases.\n. Dependencies have been updated in v0.6.0\n. Removing comments doesn't remove rights for the image. If a license doesn't allow removing legal info, then the user must preserve it, e.g. by disabling appropriate plugins. But usually there is nonsense stuff like \u201cgenerated by our awesome editor\u201d which worth nothing.\nDo you have a reliable way of detecting such a legal information? We'd like to see a pull-request.\n. Sorry, it contradicts the purpose of optimization which is in priority here. That's why I'm asking for technical details. SVGO is a tool and it's assumed that user knows how to use it.\n. Well, may be it'll be considered with the new architecture implementation, but for now --disable=removeMetadata is the best option to keep legal info.\n. That's odd. Content of any element should be an array, so no such an error should appear. It's hard to say anything without config and files. Probably there is some bad plugin. May be you're using old node.js or svgo version.\n. Does it reproduce with latest svgo version. If so, can you provide a sample file?\n. It's hard to say without further info, but it probably have been fixed by #435 or other error handling measures.\n. No ideas, sorry.\n. It would be nice to add a test in test/plugins.\n. I guess it should, that's what the plugin do.\n. Ok, thanks for the good job!\n. v0.6.0 with the fix have been just released.\n. Can you provide an example of such a package? How to provide CLI in such a way?\n. That's a major change, and I'm not sure, that it really worth it.\n. Why do you think that dependendecies are such a big problem? Perhaps, svgo will reutilize them in the future :stuck_out_tongue_winking_eye:.\nBesides, users are got used to just do npm install svgo and I don't think that breaking this pattern is a good idea either.\n. Is it a big issue? I don't think so.\n. I afraid this goes beyond a simple PR.\n. I'm hardly imagine such a request, but you can try make so.\n. As far as I understand your request, you want to parse styles. SVGO cannot parse styles for now, only the style attribute.\n. SVGO v1.0.0 with the plugin by @strarsis has been released.. svgo doesn't parse ",
    "behdad": "Duplicate of https://github.com/svg/svgo/issues/411\n. Here's paper.js's curve simplify in action:\nhttp://paperjs.org/examples/path-simplification/\nhttps://github.com/paperjs/paper.js/blob/develop/src/path/PathFitter.js\nhttp://paperjs.org/reference/path/#simplify\nShould be rather trivial to integrate into a plugin.\n. Awesome.  Lets follow up there.\n. ",
    "pepelsbey": "@deepsweet, please handle viewBox carefuly and remove it only when its values are equal to width and height ones. But you're probably aware of this.\n@GreLI, could you please provide test cases with viewBox and scaling relations?\n. ",
    "jamesscholeyweb": "Can this be revisited? Now Opera has moved to Webkit? or at least a seperate plugin that allows us to remove width and height and preserve viewbox? thanks\n. ",
    "mattaningram": "This is still a problem for me since proper responsive SVG has no width/height and only viewbox attribute. How do I achieve that?\n. It would be great as an optional parameter. When using SVGs in responsive design it can be useful to simply remove their width and height attributes because they then default to 100%. It would also be useful if you could overwrite the existing width/height with a consistent new one (sized proportionately of course).\n. In addition I would like to be able to entirely remove the width and height attributes, OR replace them with \"100%\" to allow for responsive SVGs. Removing width/height is far more useful for SVGs than removing viewbox.\n. @jraoult Oh nice, thanks!\n. ",
    "drewnoakes": "Using the NPM svgo package, you can pass:\nbash\nsvgo <other options> --enable removeDimensions\nThe removeDimensions plugin removes width and height in presence of viewBox, which is useful for responsive layouts.. Is there anything blocking this PR other than the jshint errors? I would be happy to address those if it'll get a PR merged. Can add unit tests too.. Here's a concrete example of the increase in size, assuming integral parameters:\n```xml\n\n\n```\nThere might be cases where converting circles to paths allows further path merging to occur, resulting in a net gain. I haven't seen any mention of optimisation heuristics/backtracking though.\nSo adding a default-disabled option seems harmless, but I'm not sure whether it'd ever make sense to turn it on.. Thanks for the insights. I'll take a look at the linked issue as well.. @GreLI thanks for your responses.\nI suppose there are two general scenarios that could be looked at here:\n\nMerge duplicate defs\nRemove unused defs\n\nBoth will require the ability to track IDs, as you say.\nMy questions are:\n\nIs the removal of unused defs already implemented? (I didn't find it when I looked)\nIs there any guidance on how defs can be referenced/discovered elsewhere in the document? (e.g. specific attributes, specific syntax, whole/partial attribute value matching on url\\(#[^)\\s]+\\) or similar). cleanupIDs.js discovers IDs and can serve as a reference for this.. \n",
    "puzrin": "https://github.com/DmitryBaranovskiy/raphael/blob/master/raphael.core.js#L294\nSeems, Raphael has matrix transformation mapping.\n. It works! Example https://github.com/fontello/font-builder/blob/1e8af5db26708777ae8d6cd4407b7c2dc6f463ea/lib/font-dump-phantom.js#L99 (from our font dumper tool).\nImportant!!! Current Raphael release has serious bug https://github.com/DmitryBaranovskiy/raphael/issues/629 . It breaks paths, but can be fixed. That's working code https://github.com/fontello/font-builder/commit/b470a52e255045825b9f74fd6c51e2de5bf3ffbb (a bit dirty, but tested)\nFinally, i can confirm, that transformation math not only exists, but also can be extracted and used :)\n. IMHO it would be more correct to leave path, but rip stroke attributes.\n. May be, but js-yaml was written by us :) , lol, and supports some JS extentions, coordinated with yaml authors.\nWhen speed will matter, we'll try to improve it.\n. 1. Shame on me. Missed main in package.json, when specially looked for it :) . Will try to use it.\n2. I write svg fonts/images importer here https://fontello.com/ . It's convenient to do all in browser. Simple bundler + es5-shims do the job. I don't insist on supporting browserified version by you. Just ask to remove heavy dependencies from the core. It's a bit strange to leave fs dependency, just because node.expand use it to show version number.\n. @GreLI that plugin was done by my request and is not as flexible, as suggested in this ticket. Snapsvg also is not related to this ticket anyhow.\nAnyway, there is svgpath to do this job.\n. I joint to this request. Especially interested in polyline conversion - this type of content happens sometime in sources, provided to fontello project.\n. hm... tested this super-optimizer on 300 glyphs, and found 2, where curves change direction. See attached originals (not passed svgo)\n<svg height=\"1000\" width=\"1000\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 -32v512h512v-512h-512zM96 161q0 -100 112 -98h120q82 12 89 97v45q-2 30 -20 43.5t-43 14.5q5 18 1 48q-3 31 -24 51.5t-57 23.5h-98q-33 -5 -55 -24.5t-25 -50.5v-150zM145.5 146q-8.5 15 0 30t28.5 18h146q21 -3 29.5 -18t0.5 -30t-28 -18h-146q-22 3 -30.5 18z\nM163.5 281.5q-7.5 13.5 0.5 27t28 16.5h80q21 -2 28.5 -15.5t-0.5 -27t-28 -17.5h-80q-21 3 -28.5 16.5z\" transform=\"translate(0 500) scale(1 -1) translate(0 -500) scale(1.953125) translate(0 32)\" /></svg>\n<svg height=\"1000\" width=\"1000\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 -32v512h512v-512h-512zM77 266q-1 -21 3.5 -34t10 -17t14.5 -7l1 -134q0 -1 1 -8t1.5 -8.5t3 -6.5t5.5 -7t9.5 -4.5t15.5 -3.5l54 -1q29 -4 40 39q4 -36 32 -37h63q1 1 5 2t5.5 1.5t5 1.5t5 2.5t4 3.5t3.5 5t2 6.5t2 8.5l1 140l16 -1q14 2 22 6.5t15 19.5v42\nq-1 6 -2.5 9.5t-3 4.5t-3.5 2.5t-3 2.5q9 2 13 3.5t9.5 9.5t7.5 22l-1 34q1 30 -41 42q-35 5 -48 5q-31 0 -56 -14q-41 15 -77 12q-98 -9 -105 -96q-14 -1 -22 -10t-8 -36zM113 283l31 -2l-1 12l1 9v9.5t1 10t2 11t3.5 9.5t5 10t7 8t10 7.5t13 5t16.5 3.5q4 0 10 0.5t8 0.5\nq16 0 46 -9l1 -41q-27 10 -34 9q-13 0 -20.5 -4.5t-9 -9.5t-3.5 -14v-29l73 -1v19.5t0.5 21t3.5 18t8.5 17.5t16 11.5t26.5 7.5q40 6 72 -8l-1 -43q-12 10 -37 13q-12 1 -19 -1.5t-9 -8t-3.5 -13.5t-1 -16t0.5 -16h52v-38h-52v-173l-57 1v172l-75 -2v-170h-58l2 170h-28z\n\" transform=\"translate(0 500) scale(1 -1) translate(0 -500) scale(1.953125) translate(0 32)\" /></svg>\nchanged algorythm, but result is less impressive (10%)\njavascript\n    glyph.d = glyph.d.replace(\n      /\\d+\\.\\d+/g,\n      function (match) {\n        if (+match > 100) {\n          return Number(match).toFixed(0) + '';\n        }\n        return Number(match).toFixed(1) + '';\n      }\n    );\nSeems, curves should be rounded more intelegently. Note, that original source was optimized by fonrtforge, and gives bette results, than SVGO now.\n. Let's drop is. I used SVGO for path transforms apply, and switched to svgpath pkg long time ago. Don't know status of this issue.\n. I'd recomment svgpath for applying transforms.\n. That's just for info, if someone decide to implement. I have enougth another projects to care about. SVGO has https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js, wich can flatten transforms somehow. But i didn't used it for a long time and don't remember details.\n. ",
    "mdesantis": "Right! but what if I would select just some files? maybe it can be resolved allowing more -i, like this: svgo -i add_vc_off.svg -i add_vc_on.svg?\n. ;-) oh, congratulations for the great tool! It's very useful, I couldn't take Illustrator verbosity anymore!\n. ",
    "shooftie": "Is recursive folders an option? Something glob-ish like svgo -f img\\svg\\**\\*.svg?\n. I'd be keen to see this. I'm struggling with the way in which Illustrator outputs SVGs. I can either have IDs on paths and inline styles or IDs and classes on paths with a <style> block... But not both. \nThis means that I duplicate IDs across the document when the same SVG is used or the <style> blocks leak and end up affecting paths in other SVGs on the page that have the same class.\nIt would be great if SVGO could inline the styles and then remove the <style> element altogether. On reading your comment on another issue, #399, this might not be possible?\n. ",
    "evenfrost": "Looking forward to this as well.\n.  :+1: Came here right for this. Would be nice to have option to remove redundant tags like <style>.\n. Is it possible to pass a pattern while running this plugin in cli? Something like svgo ... --enable removeAttrs=attr?\n. Found it in #361, sorry for bothering.\n. ",
    "eknkc": "BTW, for recursive stuff you can just do;\nsh\nfind . -name \"*.svg\" -type f -exec svgo '{}' \\;\nWould be great if it was built in though :)\n. ",
    "stefanjudis": "For copying over the svg files first we ended up an extended version using this in npm scripts.\n\"optimizeSvg\": \"cp -R path/to/svg path/to/optimized/svg && find path/to/optimized/svg -name '*.svg' -type f -exec svgo {}  \\\\;\",\nJust to share another solution. :)\n. ",
    "pdehaan": "Similarly, support for multiple input folders would be great:\nsh\n\u2717 $(npm bin)/svgo --folder=addon/webextension/icons --folder=static/img -q\nUnknown option: --folder\nIt works great with a single --folder argument, but really dislikes me trying to pass multiple folders. . ",
    "sambeau": "Here's the problem, I think!\nhttps://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js\nvar regNumericValues = /^([\\-+]?\\d*\\.?\\d+)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/,\n. That seems to have fixed everything, thanks!\nHere are my results:\n ~40% reduction on my bigger files. Very impressive.\ntall.svg:\n0.366 KiB - 3.2% = 0.354 KiB\ntest_1.svg:\n1 KiB - 39.1% = 0.609 KiB\ntest_10.svg:\n16.464 KiB - 30% = 11.526 KiB\ntest_11.svg:\n6.816 KiB - 41.7% = 3.976 KiB\ntest_12.svg:\n2.434 KiB - 34.3% = 1.6 KiB\ntest_13.svg:\n2.283 KiB - 39.6% = 1.379 KiB\ntest_14.svg:\n1.168 KiB - 40.4% = 0.696 KiB\ntest_15.svg:\n1.52 KiB - 37.6% = 0.948 KiB\ntest_16.svg:\n1.145 KiB - 38.8% = 0.7 KiB\ntest_17.svg:\n5.179 KiB - 43.7% = 2.916 KiB\ntest_19.svg:\n8.062 KiB - 33.2% = 5.383 KiB\ntest_2.svg:\n1.084 KiB - 40.8% = 0.642 KiB\ntest_20.svg:\n2.192 KiB - 56.3% = 0.957 KiB\ntest_21.svg:\n1.995 KiB - 46.7% = 1.063 KiB\ntest_22.svg:\n3.914 KiB - 35.5% = 2.524 KiB\ntest_3.svg:\n8.688 KiB - 52% = 4.171 KiB\ntest_4.svg:\n3.184 KiB - 36.1% = 2.034 KiB\ntest_5.svg:\n5.287 KiB - 33.4% = 3.523 KiB\ntest_6.svg:\n7.733 KiB - 52.3% = 3.687 KiB\ntest_7.svg:\n2.738 KiB - 39.3% = 1.662 KiB\nwide.svg:\n0.367 KiB - 3.2% = 0.355 KiB\ntest_9.svg:\n12.55 KiB - 34.8% = 8.188 KiB\ntest_0.svg:\n101.75 KiB - 41.2% = 59.837 KiB\ntest_18.svg:\n109.01 KiB - 40.8% = 64.538 KiB\ntest_8.svg:\n850.881 KiB - 46.3% = 457.088 KiB\n. ",
    "premasagar": "Here's the Dharmafly logo, as exported from Illustrator:\n\nNotice the last three paths - they are all in fact circles (the small green circles that overlay the ends of the 'stalks'). E.g.\nxml\n<path fill=\"#8EC045\" d=\"M89.171,155.172c2.668-0.742,4.23-3.531,3.475-6.238c-0.76-2.678-3.549-4.266-6.265-3.492\n        c-2.669,0.76-4.235,3.568-3.476,6.24C83.673,154.365,86.454,155.948,89.171,155.172z\"/>\nIn fact, the white hollow circle effect has been achieved by overlaying a green circle over a white circle. Instead, they should have been created as white circles with no fill. Anyway, that's a different matter.\nI also note that the three white 'stalks' could be expressed more succinctly as path lines with a fat stroke. As it is, the coordinates for both sides of each 'stalk' is drawn. But that too is a separate issue.\n. Great. Cheers.\n. To achieve this, one target would be to detect this kind of pattern in a\ncircular arced path: http://stackoverflow.com/a/10477334/165716\n. I didn't explain it so clearly. It wasn't about the XML output. The request was for an option to crop an image such that any visual whitespace outside of the shapes in the image is removed. The dimensions of the image will be smaller. This would be done by changing the path/point/x/y coordinates and not by applying an overall transform the elements.\nIt's not really a file optimization feature. It's an image manipulation feature. I noticed that trying to achieve this in Inkscape results in a transform being applied, which is what I wanted to avoid.\n. Yes, thanks. I saw that had been added. Closing....\n. ",
    "johan": "Feel free to borrow my research for the same feature request for Scour: https://blueprints.launchpad.net/scour/+spec/automatic-circle-creation\nEssentially, pattern match paths like this (an optional redundant \"c\" would be allowed between each section, too):\n```\n<path d=\"m  x        y-r\n         c -rX    , 0\n           -r      , r(1-X)\n           -r      , r\n        0      , r*X\n        r*(1-X), r\n        r      , r\n\n        r*X    , 0\n        r      ,-r*(1-X)\n        r      ,-r\n\n        0      ,-r*X\n       -r*(1-X),-r\n       -r      ,-r\n     z\"/>\n\n```\n\u2026and optimize them to:\n<circle cx=\"x\" cy=\"y\" r=\"r\"/>\n\u2026where r is any circle radius to pattern match against, x and y some arbitrary coordinate in the page for the top center of the circle (assuming one drawn from there, which IIRC Illustrator tends to), and X is (Math.sqrt(2) - 1) * 4/3 (or anything up to 0.000501 less \u2013 for more details on the math, see http://www.tinaja.com/glib/ellipse4.pdf)\nThis assumes perfect circles drawn in unit circle order with the minimal four b\u00e8ziers, which may not always be the case, but probably often will when the base primitive used to create the path in the generator was a circle tool.\n. It'll probably take a little tweaking before it gets good; you might want some configurable epsilon parameter for the pattern matching, so an off-by-less-than-epsilon still counts as a circle, given float rounding of things.\nFlipping the sign of the first column's coords also makes a circle, though clockwise. You might want to verify these by playing a bit with using the recipe backwards (or forwards, I suppose) to actually make some circles with it; it's getting a little late here, and I have been tinkering with https://github.com/johan/kilobyte-svg-challenge stuff all evening. :-)\n. Strange apples and oranges comparison.\n<path d=\"a5,5 0 1,0 10,0 5,5 0 1,0-10,0\"/>\n<circle cx=\"10\" cy=\"10\" r=\"5\"/>\n<path d=\"a5,5 0 1,0 .1,0\"/>\nSize isn't the only metric by which this cleanup is useful, though; if you want to hand edit the file to tweak things, a <circle> is orders of magnitude more hackable than the arc syntax.\n. While really hard to make automated tools for, if you want to have a go at generating an embedded font from whatever SVG data you have, here's what an inline svg font looks like (font definition marked in red).\nIf you know what the external font is and already have a WOFF url, it's even easier; just link it:\n<style>@import url(\"http://fonts.googleapis.com/css?family=Bitter:700\");</style>\n\u2026and then reference it from your text tags, for instance like this:\n<text fill=\"#474747\" x=\"95\" y=\"150\" text-anchor=\"middle\" font-family=\"Bitter\" font-size=\"20\" font-weight=\"bold\">WebPlatform<tspan fill=\"#a3a3a3\">.org</tspan></text>\nA bonus of linking an external font is that you get Firefox support too (Firefox doesn't intend to support SVG fonts, since they find its lack of hinting support too inferior to other font standards), and much very smaller SVG files still. If it's not crucial what font you use, grab anything you like at http://www.google.com/webfonts for instance.\n(Having svgo do all this, just given an input svg is a challenge similar to making an Optical Character Reader, but with the addition of reproducing the font, and then using the font to layout text as text, at the original coordinates. Awesome, if someone implements it, but I wouldn't hold my breath. :-)\n. Not sure I followed what was so bad about that part of the webplatform.org logo (it looks neither worse nor better than equivalent HTML doing <p>webplatform<span>.org</span></p> with some style or class to apply the colour change that logo requires \u2013 unless you reacted to the demonstration of a lot of useful inline attributes better stowed away in a stylesheet?), though I guess it's pretty off topic for this issue anyway.\n. While I might miss which part poses the problem, I think it might not be all that hard if you have an SVG DOM (which I assume you do?). @Phrogz' convertToAbsolute example shows how to iterate around a segment at a time.\nFiguring out if it's worth doing the optimization on a given part should be easy (probably even regexpable, if you like; /^[^Z]*L[^Z]*Z\\s*$/i matching the d attribute, perhaps).\nTweaking convertToAbsolute to convert the Z into the H, V or L command it amounts to to get back to the first M should be pretty straight-forward.\nOnly line segments (l and L) are candidates to replace the z, so narrowing down the list to test to those candidates (including the replaced Z) and what they would serialize to in minimal form should pinpoint which of them is the longest.\nSave the index i of that segment, absolutize the path, rotate it (rotating back the first i segments to the tail of the path instead), replace the last segment with a z and re-relativize the path, and it should now have its minimal form.\n. ",
    "timelyportfolio": "any updates on this?  I am very interested in this to clean up R base graphics exports.  Will be happy to help.\n+1\n. ",
    "konclave": "+1\n. ",
    "waldyrious": "\nif you want to hand edit the file to tweak things, a <circle> is orders of magnitude more hackable\n\n:+1: I'd prefer the circle markup too, or at least have that as an option.\n. @kirillbunin @owenhoskins can you provide more details on what it failing? This seems related to #552, so some commands like the ones there would be very helpful.\n. alternatively, a diff output option would be nice too\n. or even a verbal summary; something like:\n- x styles converted to attributes\n- y unused IDs removed\n- ...\n- total bytes saved: z\n. What about the human-readable summary? That'd be pretty neat.\n. Ironically, the xmlns attribute is the only thing required to produce a valid svg file. See https://github.com/mathiasbynens/small/blob/master/svg.svg?short_path=5fda422 (or try validating the second code snippet as SVG in http://validator.nu)\n. I suppose this is at least related to Inkscape's \"simplify\", right?\n. @GreLI a single curve is 3 times larger than a single line, but to get even an approximation to such a curve, one would need multiple lines, not 1. So for similar geometry, whether it's represented as curves or lines, actually the lines version occupies much more space.\nOf course, simplifying curves (which can at least make a reasonable attempt at preserving the shape of the curve while using less nodes) will generally produce more visually appealing results than simplifying the equivalent sequence of lines into a sequence with less nodes. The ideal approach would be to simplify sequences of lines into curves, which can then try to trace the original path by clever usage of the curve parameters.\n. @GreLI AFAIK a namespace prefix is only valid if the svg has a xmlns binding that prefix to a unique DTD. So if svgo removes the xmlns, it should also remove the corresponding prefix from the elements/attributes, otherwise the svg file is invalid (I'm not 100% sure on this, but that's my understanding).\nIn any case, according to the inkscape wiki, sodipodi-prefixed attributes and elements are metadata, rather than graphical information needed to render the image, so svgo should remove not just the prefix, but the whole attribute/element as well.\n. Yes, please! :+1: \n. I see, that info can be found in docs/how-it-works/en.md#1-config. However, that still requires the creation of a config file, so it doesn't change the current situation much:\necho \"full: true\" > c && svgo --config=c --enable=<plugin_name> test.svg\nIt would be nice to be able to do this in a single command.\n(by the way, full: true is very unintuitive; I'd never guess it did that if I saw a config file with it, and hadn't read the \"how it works\" document previously)\n. Uh. I was pretty sure I had tried passing a config string, but maybe the syntax was wrong and the error message led me to think that the problem was that it expected a file. I'll do some more experiments and will get back to you.\n. I guess I just took the documentation's word and didn't even try a string xD\nI would suggest the documentation to be changed from\n--config=CONFIG : Config file to extend or replace default\nto\n--config=CONFIG : Configuration file (or string) to extend or replace the default\nAnd maybe renaming the \"full:true\" feature to something else, since if you hadn't told me, I'd have assumed it did the opposite...\n. Nicely done, @elrumordelaluz! This would also address #598 :). In the spirit of Unix philosophy, I'd be inclined to propose using find for locating the files, and svgo for processing them. Something like find /path/to/svg/ -name *.svg -exec svgo {} \\;.\nThat said, given that the -foption already exists, it could be argued that it makes sense to extend it to process folders recursively.. ",
    "paperboyo": "\nBut probably in future it will crop path elements outside viewport.\n\nHi,\nThat, along with removing elements that are invisible/hidden behing opaque elements, would be heaven indeed!\nThanks for all your great work, @GreLI!\nRegards\nMateusz\n. Hello,\nThis - and things disappearing completely - is the single most dangerous thing about SVGO that makes it impossible to be used without human supervision, IMHO. Here is a graphic that exhibits the problem with default SVGO config (I am really sorry for the lengthy piece of code):\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 18.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     width=\"118.2px\" height=\"90.3px\" viewBox=\"0 0 118.2 90.3\" enable-background=\"new 0 0 118.2 90.3\" xml:space=\"preserve\">\n<g>\n    <g>\n        <g>\n            <path fill=\"#EE4036\" d=\"M61.1,37.5h-12c-2.1,0-4.1,0.6-5.8,1.6V67c1.7,1,3.7,1.6,5.8,1.6h12c2.1,0,4.1-0.6,5.8-1.6V43.7H71\n                C69.2,40,65.4,37.5,61.1,37.5z\"/>\n            <path fill=\"#840B17\" d=\"M66.4,22.9l-5-6.3c-1.5-1.9-3.9-3.1-6.3-3.1c-2.5,0-4.8,1.1-6.3,3.1l-5,6.3c-2.5,3.2-2.2,7.8,0.6,10.6\n                l5,5c1.6,1.6,3.6,2.4,5.7,2.4c2.1,0,4.1-0.8,5.7-2.4l5-5C68.6,30.7,68.9,26.1,66.4,22.9z\"/>\n            <path fill=\"#231F20\" d=\"M57.8,37.5\"/>\n            <rect x=\"43.3\" y=\"52.8\" fill=\"#1B75BB\" width=\"23.6\" height=\"15.9\"/>\n            <path fill=\"#D0AD97\" d=\"M63.3,28c0-1-0.5-1.8-1.3-2.2c-0.5-3.4-3.4-6.1-6.9-6.1c-3.6,0-6.5,2.6-6.9,6.1c-0.8,0.4-1.3,1.3-1.3,2.2\n                c0,0.9,0.5,1.8,1.3,2.2c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7C62.8,29.8,63.3,29,63.3,28z\"/>\n            <path fill=\"#754C28\" d=\"M62.8,25.5c-0.5,0.2-1.1,0.4-1.8,0.4c0.4,0.7,0.7,1.6,0.7,2.4c0.1,0,0.2,0,0.3,0c0.3,0,0.6,0,0.8,0.1\n                v-2.6C62.8,25.6,62.8,25.5,62.8,25.5z\"/>\n            <path fill=\"#754C28\" d=\"M47.4,25.5c0.5,0.2,1.1,0.4,1.8,0.4c-0.4,0.7-0.7,1.6-0.7,2.4c-0.1,0-0.2,0-0.3,0c-0.3,0-0.6,0-0.8,0.1\n                v-2.6C47.3,25.6,47.3,25.5,47.4,25.5z\"/>\n            <path fill=\"#D0AD97\" d=\"M63.3,28c0-1-0.5-1.8-1.3-2.2c-0.5-3.4-3.4-6.1-6.9-6.1c-3.6,0-6.5,2.6-6.9,6.1c-0.8,0.4-1.3,1.3-1.3,2.2\n                c0,0.9,0.5,1.8,1.3,2.2c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7C62.8,29.8,63.3,29,63.3,28z\"/>\n            <path fill=\"#836F61\" d=\"M57.5,35c-0.6-0.7-1.4-1.1-2.4-1.1c-1,0-1.8,0.4-2.4,1.1H57.5z\"/>\n            <path fill=\"#754C28\" d=\"M59.3,22.9c0,1.7,1.4,3.1,3.1,3.1c0.1,0,0.2,0,0.3,0c0-0.1,0-0.2,0-0.3c0-2.1-0.8-3.9-2.1-5.3\n                C59.9,20.9,59.3,21.8,59.3,22.9z\"/>\n            <path fill=\"#754C28\" d=\"M50.8,22.9c0,1.7-1.4,3.1-3.1,3.1c-0.1,0-0.2,0-0.3,0c0-0.1,0-0.2,0-0.3c0-2.1,0.8-3.9,2.1-5.3\n                C50.3,20.9,50.8,21.8,50.8,22.9z\"/>\n            <path fill=\"#754C28\" d=\"M47.5,24.5c1.5,0.7,3.2,1.1,4.9,1.1c3.6,0,6.9-1.6,9.1-4.2c-1.4-2.1-3.7-3.5-6.4-3.5\n                C51.2,18,48,20.8,47.5,24.5z\"/>\n            <path fill=\"#EE4036\" d=\"M66.4,22.9l-5-6.3c-1.5-1.9-3.9-3.1-6.3-3.1c-2.5,0-4.8,1.1-6.3,3.1l-5,6.3c-2.5,3.2-2.2,7.8,0.6,10.6\n                l5,5c1.6,1.6,3.6,2.4,5.7,2.4c2.1,0,4.1-0.8,5.7-2.4l5-5C68.6,30.7,68.9,26.1,66.4,22.9z M55.1,38.3c-5.3,0-9.6-4.3-9.6-9.6\n                c0-5.3,4.3-9.6,9.6-9.6c5.3,0,9.6,4.3,9.6,9.6C64.7,34,60.4,38.3,55.1,38.3z\"/>\n            <path fill=\"#840B17\" d=\"M55.1,37.2c-2.1,0-4.1-1-5.4-2.5h-2.2l7.6,7.6l7.6-7.6h-2.2C59.1,36.2,57.2,37.2,55.1,37.2z\"/>\n            <path fill=\"#754C28\" d=\"M49.6,21.3c1.7,0,3.3-0.4,4.7-1h0c0,2.6-2.1,4.7-4.7,4.7c-2.6,0-4.7-2.1-4.7-4.7h0\n                C46.3,20.9,47.9,21.3,49.6,21.3z\"/>\n            <path fill=\"#754C28\" d=\"M52.9,19.8c1.7,0,2.6,3.7,0,3.7c-2.6,0-4.7-2.1-4.7-4.7h0C49.6,19.5,51.2,19.8,52.9,19.8z\"/>\n            <path fill=\"none\" stroke=\"#840B17\" stroke-width=\"2.0364\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"M53.6,44.1l0,9.5\n                c0,1.2-0.9,2.2-2,2.2\"/>\n            <path fill=\"none\" stroke=\"#840B17\" stroke-width=\"2.0364\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"M56.6,44.1l0,9.5\n                c0,1.2,0.9,2.2,2,2.2\"/>\n            <path fill=\"#EE4036\" d=\"M46.8,56.3V37.8c-5,1-8.7,5.5-8.7,10.8v4.6c0,5.3,3.7,9.7,8.7,10.7v0h8.3v-7.6H46.8z\"/>\n            <rect x=\"46.6\" y=\"55.2\" fill=\"#EE4036\" width=\"8.6\" height=\"8.7\"/>\n            <path fill=\"#EE4036\" d=\"M63.4,37.8v17.4h-8.3v8.7h8.6v-0.1c4.9-1.1,8.5-5.5,8.5-10.7v-4.6C72.1,43.2,68.4,38.8,63.4,37.8z\"/>\n            <path fill=\"#D0AD97\" d=\"M55.1,63.9h1.8h4.7c0-3.8-2.8-7-6.5-7.6V63.9z\"/>\n        </g>\n        <g>\n            <path fill=\"#2E3191\" d=\"M108.3,12.6l-5-6.3c-1.5-1.9-3.9-3.1-6.3-3.1c-2.5,0-4.8,1.1-6.3,3.1l-5,6.3c-2.5,3.2-2.2,7.8,0.6,10.6\n                l5,5c1.6,1.6,3.6,2.4,5.7,2.4c2.1,0,4.1-0.8,5.7-2.4l5-5C110.5,20.3,110.8,15.8,108.3,12.6z\"/>\n            <path fill=\"#D0AD97\" d=\"M103.5,16.4c0-3.9-3.1-7-7-7c-3.9,0-7,3.1-7,7c0,0.6,0,2.9,0,3.5c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7\n                C103.5,19.2,103.5,17,103.5,16.4z\"/>\n            <path fill=\"#754C28\" d=\"M90.4,10.9c-1.7,0-3.3-0.4-4.7-1h0c0,2.6,2.1,4.7,4.7,4.7c2.6,0,4.7-2.1,4.7-4.7h0\n                C93.7,10.5,92.1,10.9,90.4,10.9z\"/>\n            <path fill=\"#754C28\" d=\"M95.9,10.5c-1,0-1.9-0.3-2.5-0.8c-1.7,0-3.3-0.4-4.7-1h0c0,2.6,2.1,4.7,4.7,4.7c1.5,0,2.7-0.7,3.6-1.7\n                c-0.2-0.4-0.4-0.8-0.5-1.3C96.3,10.5,96.1,10.5,95.9,10.5z\"/>\n            <path fill=\"#754C28\" d=\"M95,12c1.3,0.2,2.5,0.1,3.7,0.3c1.6,0.3,3.1,1.1,4.5,2c-0.9-2.9-3.5-5-6.7-5c-2.1,0-4,0.9-5.2,2.4\n                C92.5,11.7,93.7,11.9,95,12z\"/>\n            <path fill=\"#754C28\" d=\"M100,11c-1.1,0-2-0.4-2.7-0.9c-0.7,1-1.8,1.6-3.3,1.6c-0.3,0-0.6,0-0.9-0.1c-0.5,0.3-1.2,0.4-1.9,0.4\n                c-1,0-1.8-0.3-2.4-0.7c-0.3,0.2-0.6,0.3-1,0.4c0.7,0.8,1.4,1.4,2.3,1.9l0.2,1h3.8c2.9,0,5.4-1.5,6.9-3.7\n                C100.7,10.9,100.3,11,100,11z\"/>\n            <path fill=\"#754C28\" d=\"M102.5,12.9c0,1.7,0.4,3.3,1,4.7v0c-2.6,0-4.7-2.1-4.7-4.7c0-2.6,2.1-4.7,4.7-4.7v0\n                C102.9,9.7,102.5,11.3,102.5,12.9z\"/>\n            <path fill=\"#D0AD97\" d=\"M105.4,17.7c0,1.4-1.2,2.6-2.6,2.6c-1.4,0-2.6-1.1-2.6-2.6c0-1.4,1.2-2.6,2.6-2.6\n                C104.3,15.1,105.4,16.3,105.4,17.7z\"/>\n            <path fill=\"#231F20\" d=\"M99.2,27.2\"/>\n            <circle fill=\"#836F61\" cx=\"95.3\" cy=\"23.7\" r=\"0.9\"/>\n            <path fill=\"#754C28\" d=\"M94.5,9.6c-0.4,0-0.8,0.1-1.2,0.1c-1.7,0-3.3-0.4-4.7-1h0c0,0.7,0.2,1.4,0.5,2.1\n                c-1.2-0.1-2.4-0.4-3.5-0.9h0c0,2.6,2.1,4.7,4.7,4.7c1.2,0,2.3-0.4,3.1-1.2c1.5,0,2.8-0.7,3.7-1.8c0,0,0,0-0.1-0.1\n                C95.8,11.3,95,10.6,94.5,9.6z\"/>\n        </g>\n    </g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\nThanks for looking into this!\nRegards\nMateusz\n. +1\nI've successfully used this technique manually to optimise SVGs. See e.g. https://github.com/guardian/frontend/pull/5041#issuecomment-48520340 for (a bit muddled) explanation/example. Maybe SVGO could produce several differently scaled images and then choose the one that optimises to the smallest file?\nRegards\nm.\n. +1\n. Hi,\nCould this https://github.com/jakearchibald/svgomg/issues/20 be possibly related?\nRegards\nm.\n. Related/duplicate of https://github.com/svg/svgo/issues/293.\n. Duplicate/related: https://github.com/svg/svgo/issues/647, https://github.com/svg/svgo/issues/67. Just a user here. Images without transparency should be converted to JPGs, but the ones with transparency have to be converted by pngquant to PNG8. This may not be trivial as you would need to be able to tell one from the other and maybe provide options to control both compression levels.\nWould be very useful, though!. > some simple PNG -> JPG\nRelated to know where to NOT convert (if there is transparency): https://github.com/oliver-moran/jimp/issues/271. By having a very cursory look at jimp, I can\u2019t tell if it supports pngquant-like PNG8 with 8-bit transparency (PNG32 is too weighty, PNG8 with 1-bit transparency is useless).. ",
    "scottyu2012": "Yes +1 for this feature!\n. ",
    "peterjaap": "+1\n. ",
    "onlymega": "+1\n. But when there are a lot of circles it is better to convert them to path and merge. You can add ellipse and shapes conversion and and add a flag for those who want convert them. \n. ",
    "Awem": "+1 would be great!\n. ",
    "SebT": "+1 this would be awesome for people using svgo to generate icon fonts\n. ",
    "davidgoli": "+1\n. ",
    "ricardobeat": "+1. This would be the desired behaviour to produce SVG sprites. If there is whitespace around the paths (viewport > actual path area) it's a bit cumbersome to declare image sizes since you have to account for this inner padding.\n. ",
    "nOji": "+1\n. ",
    "AGresvig": "+1\n. ",
    "berkaey": "+1\n. ",
    "niftylettuce": "+1\n. I was experimenting with svgo in case I wanted to use it for this package I just released https://github.com/crocodilejs/custom-fonts-in-emails.\n. ",
    "kaihendry": "<heycam> for space saving, they might be able to convert individual glyphs to paths, then <use> them in multiple places\n. Ewww, https://github.com/johan/kilobyte-svg-challenge/commit/e6f68780dbc49dc2c48fdf73e2f2bb4f31e8365b looks really awful to me because the text is 'webplatform' is spread across those elements. :(\nCameron McCormack over IRC was telling me he wants to propose:\n<text>Hello <tgraphics href=\"#some-g-element\">fancy</tgraphics></text>\nWhich would be far better. I'm familiar with the external font approach, here is my demo here: http://neon.webconverger.com/logo/\nIt's a pity that I haven't found any SVG creation tools that do this. Have you? Text to Path conversion is absolutely evil. :(\nYes it would be really hard for svgo to do this, agreed. But the alternative, is doing it by hand, which is EXTREMELY time consuming. :( Have a look at http://github.com/kaihendry/smrt and share my pain!\n. @deepsweet  Tbh reading the text is easy. It's just that quickly replacing a path mess is a PITA, at least in Inkscape it is. Tedious deluxe.\n@johan sorry that diff looked like the text was split. Looking on the Webpage, it looks fine:\n<text x=\"95\" y=\"150\" text-anchor=\"middle\" font-family=\"Bitter\" font-size=\"20\" font-weight=\"bold\" class=\"gray\">WebPlatform<tspan class=\"lightgray\">.org</tspan></text>\n. Whoops, just corrected the URL to http://webconverger.org/img/2014/pushing-up-daisies.svg\n. ",
    "vennekamp": "I tried to map the SVG-Glyphes back to text, every letter is converted to a defined \"glyph\". Since the glyphs are always containing the same \"path-primitivies\" it is basically possible to recreate the text. If you want to go this painful way you might like to take a look at this java program as \"Proof-Of-Concept\": https://github.com/vennekamp/SVGPath2Text \n. ",
    "stevenvachon": "Any progress on embedded images and CSS?\n. Yep, that's how I worked around it; by disabling the collapseGroups plugin. It'd be great if SVGO could detect this automatically, though.\n. It runs multipass a max of 10 times, but not until 0% changes.\n. Yeah, but is it checking \"if 0% change on last run, end\", or simply \"run 10 times\"? I'm having to run multipass multiple times to achieve this. I understand the desire to avoid lagging the system by running it 400 times, but there should at least be an option to run until it technically does not need to be ran again (maxPasses:Infinity).\n. I don't think that the authors care. It's been 7 months.\n. Has this been fixed?\n. Not a good decision, in my opinion (as well as others).\n. Ok. Is there an issue created for correcting the rounding issues? With that fixed, it'd nullify our thoughts on needing this issue's feature.\n. Ah, then I've created an issue for it. Not that I think you'll forget, but we need a place to nag :wink:\n. ",
    "samuelvogel": "Works in 0.1.8!\n. Sure, great tool BTW, searched for something like this a couple of months ago, but couldn't find anything!\n. ",
    "jdischler": "I guess I should clarify.  I wouldn't say the color conversion is wrong, per se - it does exactly what I would expect.  But here's an example that hilites why I would want to conditionally collapse a color (which is what I was hoping the color plugin had an option for):\nA reasonable conversion:\n34FE12 -> (as collapsed) #3F1  -> (is equivalent to) #33FF11\nI say \"reasonable\" because the collapsed color ends up being almost identical to what the original color was.  It's unlikely that anyone will notice this kind of color collapse.  This is a good thing so just collapse the color.\nA less good conversion:\n39F216 -> (could be collapsed a variety of ways, such as) -> #4F1, #3E2, etc -> (which are equivalent to) #44FF11, #33EE22\nAnd I say \"less good\" because even a non-artist might say that the collapsed colors have been modified enough that the colour doesn't look right. The problem can be worse when you have two collapsed colors next to each other.   In this latter case, I would probably like the option of saying the converted color is too far from the original, just leave the original colour.\nOr does this seem like an unnecessary complication?\n. Hmmmm, I think you are right that compressing colours is not a huge optimization for many SVGs to start with so adding an option that makes it even less likely to compress a color might not be worth very much.  \nI guess I'll just disable color compression while converting specific files if I feel like it compromises a given file too much.\nThanks for the input and thanks for making such a great tool.\n. ",
    "atwood-cai": "hi: do you implement it ?\n. bingo. @GreLI , \n. ",
    "ganlanyuan": "Hi, is there a way to prevent this behavior?\nI tried:\njavascript\n{\n  plugins: [{\n    mergePaths: {\n      collapseRepeated: false,\n      leadingZero: false,\n      negativeExtraSpace: false\n    }\n  }]\n}\nBut it didn't work?. javascript\n{\n  mergePaths: false\n}\nThis works.\nThanks. Hi, thanks for your help.\nI run \nsvgo --config=custom.yml\non Terminal, but I didn't see this .yml file been created.\nI also found .svgo.yml in package folder. And I changed \n- removeTitle\n- removeDesc\nto \n- removeTitle: true\n- removeDesc: true\nbut when I run svgo, it didn't cleanup the title and desc.\nDo you know why?\nThanks\n. You mean?\nsvgo --config=custom.yml --multipass\n. I still can't get this done.\nBut thanks a lot!\nI can use svgo -f /Users/path/svg --enable removeTitle --enable removeDesc manually.\n. Hi,\nI have a file:\nhtml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"48px\" height=\"48px\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <!-- Generator: Sketch 41.2 (35397) - http://www.bohemiancoding.com/sketch -->\n    <title>user4-line</title>\n    <desc>Created with Sketch.</desc>\n    <defs>\n        <ellipse id=\"path-1\" cx=\"24\" cy=\"24\" rx=\"23.5\" ry=\"23.5\"></ellipse>\n    </defs>\n    <g id=\"page\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"user4-line\">\n            <ellipse id=\"Shape\" stroke=\"#000000\" stroke-linecap=\"square\" cx=\"24\" cy=\"24\" rx=\"23.5\" ry=\"23.5\"></ellipse>\n            <mask id=\"mask-2\" fill=\"white\">\n                <use xlink:href=\"#path-1\"></use>\n            </mask>\n            <g id=\"Mask\"></g>\n            <path d=\"M19.5300455,36.4340777 L19.8424415,35.0059816 C16.7904527,33.3877073 15,29.9630779 15,26 C15,20.4771525 18.4771525,16 24,16 C29.5228475,16 33,20.4771525 33,26 C33,29.9630779 31.2095473,33.3877073 28.1575585,35.0059816 L28.4699545,36.4340777 C39.0329837,38.5145864 47,47.826895 47,59 C47,71.7025492 36.7025492,82 24,82 C11.2974508,82 1,71.7025492 1,59 C1,47.826895 8.96701635,38.5145864 19.5300455,36.4340777 Z\" id=\"Combined-Shape\" stroke=\"#000000\" mask=\"url(#mask-2)\"></path>\n        </g>\n    </g>\n</svg>\nAfter convertColors, it also convert fill=\"white\" to fill=\"currentColor\".\nThe output is\nhtml\n<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>user4-line</title>\n    <defs>\n        <ellipse id=\"a\" cx=\"24\" cy=\"24\" rx=\"23.5\" ry=\"23.5\" />\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\">\n        <ellipse stroke=\"currentColor\" stroke-linecap=\"square\" cx=\"24\" cy=\"24\" rx=\"23.5\" ry=\"23.5\" />\n        <mask id=\"b\" fill=\"currentColor\">\n            <use xlink:href=\"#a\" />\n        </mask>\n        <path d=\"M19.5 36.4l.3-1.4c-3-1.6-4.8-5-4.8-9 0-5.5 3.5-10 9-10s9 4.5 9 10c0 4-1.8 7.4-4.8 9l.3 1.4a23 23 0 1 1-9 0z\" stroke=\"currentColor\" mask=\"url(#b)\" />\n    </g>\n</svg>\nI use gulp with the option:\njavascript\nconvertColors: {\n  currentColor: '#000000'\n}\nCould you help with this?. @AlimovSV thanks, waiting for SVGO new version to be released. ",
    "meritt": "\u0412 \u0446\u0435\u043b\u043e\u043c \u0432\u0441\u0451 \u0441\u0442\u0430\u043b\u043e \u0445\u043e\u0440\u043e\u0448\u043e, \u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043c\u043e\u043c\u0435\u043d\u0442. fontcustom.com \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0448\u0440\u0438\u0444\u0442 \u0432 CSS \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c\ncss\n@font-face {\n  src: url(\"font.svg#id\") format(\"svg\");\n}\n\u0410 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0440\u0435\u0437\u0430\u0435\u0442 id. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043d\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0443\u0431\u0440\u0430\u0442\u044c id \u0438\u0437 CSS, \u043d\u043e \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0432\u0441\u0435\u043c \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e.\n. \u0421\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0431\u0430\u0433\u0444\u0438\u043a\u0441!\n. ",
    "ai": "Hm. I see problems in eog (standard viewer in Ubuntu).\n\nOK. Problem in eog isn\u2019t so actual.\n. But Inkscape optimize SVG to 8.2 KB, better than svgo. Do you need file from Inkscape to investigate it optimize methods?\n. From Inkscape: http://zalil.ru/34235148 (I manually delete <metadata> block, but it was not so big, just few strings)\n. @GreLI this question is important for my project too. @GreLI nope, we didn\u2019t ask about lint option. We said that current CLI API doesn\u2019t allow you to use svgo with lint-staged.. lint-staged is a tool to run any CLI on changed and staged files. The best practice is to use it with ESLint and Stylelint. But linters is not only one way.\nFor example, you can use lint-staged to sort your CSS properties on commit. Or to unify JS syntax with prettier.\nOr, to minify new or changed SVG with svgo.\nSo we use lint-staged not for linting. But to minify SVG in pre-commit hook.. lint-staged is very popular right now. For example, create-react-app uses it.. CLI problem:\nlint-staged runs command -- file1 file2. So of I will change a.svg it will execute svgo -- a.svg. But by some reason svgo will not work as ESLint, Stylelint, postcss-sorting or prettier. By some reason, svgo will not see a.svg and falls with:\nRunning tasks for *.svg\n\u2192 Unknown argument: a.svg. @GreLI is it a error? And how I can integrate SVGO with lint-staged in this case?. @GreLI +1 =^_^=. ",
    "maccesch": "Great thanks!\n. ",
    "ivanvotti": "There's a related pull request: #153\nThere's also some code to get inspiration: https://github.com/JFXtras/jfxtras-labs/blob/2.2/src/main/java/jfxtras/labs/util/ShapeConverter.java\nhttp://harmoniccode.blogspot.com/2012/11/shapes-shapes-shapes.html\n. ",
    "bcherny": "@deepsweet is this actually fixed? running through the default 0.4.4 config,\ninput:\n``` html\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  \n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n\n\n\n\n\n\n\n\n    <line display=\"inline\" fill=\"#231F20\" stroke=\"#231F20\" stroke-width=\"2\" stroke-miterlimit=\"10\" x1=\"3\" y1=\"3.125\" x2=\"13\" y2=\"3.125\"/>\n\n\n\n```\noutput:\nhtml\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><g fill=\"#231F20\"><path d=\"M9.375 6.378v-4.11h-2.75v4.11h-3.125l4.5 4.89 4.5-4.89z\"/><path stroke=\"#231F20\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M13 13.142h-10\"/></g></svg>\nor is svg unable to rewrite + merge the second path?\n. ",
    "vedran-milic": "Is it possible to turn this feature off?\n. @derhuerst Thanks\n. ",
    "derhuerst": "@vedran-milic Run svgo with --disable convertShapeToPath.\n. > Unfortunately, your PR is out of scope of SVGO, and thus I cannot accept it.\nI think that's up for discussion if it's out of scope. (Personally, I don't really have an opinion on this.)\nBut since this is a plugin that can be disabled by default, I don't see a reason why it shouldn't be included if it's a reasonably common use case.\n. I think the SVGO plugin setup is a bit more complicated than necessary, but as far as I could see it, bundling SVGO for in-browser won't include unsused plugins. Therefore, I don't see a reason not to include this plugin.\n. If you bundle svgo using Broserify, it will only bundle the dependencies required by the entrypoint. Thus, the CLI dependencies won't be included.\n. It seems as if svgo could be easily split into svgo and svgo-cli.\n. What about svgo-core and svgo?\n. @ben-eb Thanks!\nLet's close this in favor of #436 because that issue fits better.\n. Can you give an example, with both the SVG you optimized and which plugins were enabled?\n. @elrumordelaluz Check the svgo executable, although that's not docs.\n. @awinogradov have you manually confirmed the file exists?\n. > It's not yml parser, it's svgo/lib/svgo/config.js:31:48 as stack trace says. It tries to read the default config file as I said above.\nYeah, but why can't it read .svgo.yml? Is that because of mock-fs or because of something else? That's why I asked @awinogradov wether he can confirm manually that the file exists.\n. Your example doesn't seem to \"copy\" the files into the mock fs:\n``` js\nconst mock = require('mock-fs');\nconst SVGO = require('svgo');\nmock({[process.cwd()]: mock.directory()});\nconst svgo = new SVGO();\n```\nAlso, svgo loads the yaml file relative to the current file, not to the current working directory. This looks like it might be another reason it fails.\n. @awinogradov \nI think this issue isn't related to SVGO.\nYou first have to tell mock-fs which files should be available in the mocked fs. The following code fails (even though it doesn't even use SVGO):\n``` js\n'use strict'\nconst mock = require('mock-fs')\nconst fs = require('fs')\nconst path = require('path')\nmock({[process.cwd()]: mock.directory()});\nfs.readFileSync(path.join(__dirname, 'package.json'))\n```\n. I think JS files are the most straightforward, since you can put inline functions etc.\n. Since the core of SVGO is inherently asynchronous, that would be difficult to pull of.\nIf you tell me how you want to use it, I'd be glad to help you.\n. > I'm integrating the optimizer into another tool that until now is working synchronously. I was just hoping adding a synchronous method would be possible without too much hassle so I didn't have to change my api\nThis is by definition impossible. Since JavaScript runtimes execute blocks until they finish (without pausing and switching to another context), you can not possibly \"wait\" synchronously for another asynchronous context.\n. SVGO relies on at least one async library (sax).\n. ",
    "JoKalliauer": "Is it posible to convert it the other way round:\nI want to convert <path to <rect because \u00ecn Inkscape <flowRoot> only works with rect properly but not with path.. It was a problem of  https://jakearchibald.github.io/svgomg/ (So wrong place posted, sorry)\nNow it works: Seems to be solved.. Same with: https://commons.wikimedia.org/wiki/File:Alloy_cooling_curves_mixed_crystals-2.svg\nsvg\n <text font-family=\"Arabic Typesetting\" font-size=\"36\" xml:space=\"preserve\">\n  <tspan x=\"54.8053\" y=\"27.2658\">2        3           4              5             6</tspan>\n </text>. @GreLI \nYou can reproduce it with https://jakearchibald.github.io/svgomg/ with the option: Round/rewrite number lists\nI can reproduce in as of v1.0.5, with option --enable=cleanupListOfValues.\n\nsvgo -i Bug0923_Input.svg.txt -o Bug0923_Output.svg.txt --pretty --indent=1  --enable=cleanupListOfValues\n\nInput\nBug0923_Input.svg.txt\n```svg\n\n\n\n\n\n\n```\n. @GreLI How can I update to the latest development-version?\nI tried npm install -g svgo and restarted the terminal, but this error still occours, therefore I think I didn't update to  3c82fd7 .\n. > Fixed in 3c82fd7.\nThanks it works \ud83d\udc4d \nFor future issues:\n\nit can be achieved from Github repositary. \n\nHow can it be achived from Github repositary?. I see it the other way round.\nFor small files (source-code fits on ~one screen) svgoptimizers are useful to make the code better readable. Merging Path might be unwanted, because they might be two different objects, and after merging it is difficult to find the right part of the source-code.\nFor big files (~30MB, f.e Category:Large_SVG_files) svgoptimizers can be used to reduce the file-size. mergePath is therefore a useful tool. (Also it leads to long processing times.)\nReducing file-size might be necessary to be able to create a png or to render in a browser.\nIn Jan.2018 I used this tool to merge 483840 lines in File:1_42_polytope_7-cube.svg to one path. and I did not get such an error-messages. (Maybe there was an update between?)\n. I shortend the example just to two pathes:\nI used:\n\nsvgo -i input.svg.txt  -o output.svg --pretty --indent=1  --disable=convertPathData -p 10\n\nand I still get the error:\nError: infinite loop while processing mergePaths plugin.\n\ninput.svg.txt\nsvg\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" width=\"840.99mm\" height=\"345.1mm\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"square\" stroke-linejoin=\"bevel\" version=\"1.1\" viewBox=\"0 0 9933 4076\">\n  <g stroke-width=\"11.81\" fill=\"#000\" fill-rule=\"nonzero\" stroke=\"#fff\">\n   <path d=\"m4948.6 1499.9c0 1.23-.232 2.31-.697 3.237-.465.93-1.09 1.7-1.876 2.308-.93.73-1.95 1.25-3.063 1.561-1.11.31-2.53.465-4.242.465h-9.895v-24.72h8.733c1.82 0 3.19.069 4.126.208.935.138 1.81.429 2.631.872.885.476 1.55 1.11 1.984 1.909.437.797.656 1.72.656 2.756 0 1.21-.302 2.28-.905 3.221s-1.44 1.63-2.499 2.075v.133c1.53.321 2.75.977 3.669 1.967.919.991 1.38 2.33 1.378 4.009m-7.952-10.16c0-.398-.102-.808-.307-1.229s-.523-.725-.955-.913c-.41-.177-.894-.274-1.453-.291s-1.39-.025-2.499-.025h-.432v5.23h.78c1.06 0 1.81-.011 2.233-.033s.866-.138 1.32-.349c.498-.232.841-.553 1.029-.963s.282-.886.282-1.428m1.561 10.044c0-.764-.155-1.36-.465-1.793s-.775-.758-1.395-.98c-.376-.144-.894-.224-1.552-.241s-1.54-.025-2.648-.025h-1.146v6.192h.332c1.62 0 2.73-.011 3.354-.033s1.25-.172 1.893-.448c.564-.243.977-.6 1.237-1.071.26-.47.39-1 .39-1.602m18.833 8.185c-3.52 0-6.22-.841-8.093-2.523-1.88-1.68-2.81-4.08-2.814-7.189 0-3.04.874-5.47 2.623-7.288 1.75-1.82 4.19-2.72 7.338-2.723 2.86 0 5 .769 6.441 2.308s2.16 3.74 2.158 6.607v2.092h-12.733c.055.863.238 1.59.548 2.167a3.8 3.8 0 001.229 1.386c.498.343 1.08.589 1.743.739a9.94 9.94 0 002.175.224 8.92 8.92 0 001.992-.224 9.618 9.618 0 001.793-.589 12.934 12.934 0 002.308-1.328h.614v4.798c-.476.188-.91.362-1.303.523s-.932.324-1.619.49c-.631.166-1.28.296-1.951.39-.67.094-1.49.141-2.449.141m1.926-12.219c-.033-1.23-.318-2.16-.855-2.806-.537-.642-1.36-.963-2.465-.963-1.13 0-2.01.338-2.648 1.013-.636.675-.988 1.59-1.054 2.756zm3.304-9.579h-4.765v-4.532h4.765zm-7.985 0h-4.765v-4.532h4.765zm31.621 21.3h-6.69l-4.416-7.388h-1.494v7.388h-5.811v-18.644h5.811v7.487c.819-.011 1.43-.13 1.834-.357s.844-.827 1.32-1.801c.155-.332.321-.697.498-1.096.177-.398.338-.753.481-1.063.587-1.23 1.31-2.07 2.167-2.523.858-.454 1.9-.681 3.129-.681.432 0 .841.006 1.229.017.387.011.664.017.83.017v4.981h-1.129c-.354 0-.672.069-.955.208a2.756 2.756 0 00-.739.523c-.21.221-.368.443-.473.664l-.307.648a39.53 39.53 0 01-.565 1.278c-.122.255-.338.504-.647.747zm11.736.498c-1.54 0-2.95-.194-4.225-.581s-2.39-.985-3.329-1.793c-.93-.808-1.65-1.82-2.175-3.046-.52-1.22-.78-2.66-.78-4.325 0-1.78.282-3.3.847-4.549.564-1.25 1.33-2.28 2.291-3.088.93-.775 2.02-1.35 3.279-1.718 1.26-.371 2.56-.556 3.926-.556 1.03 0 2.06.119 3.088.357 1.03.238 2.06.617 3.105 1.137v4.981h-.747c-.232-.221-.517-.465-.855-.731s-.706-.509-1.104-.73a7.315 7.315 0 00-1.428-.589 6.128 6.128 0 00-1.776-.241c-1.48 0-2.63.517-3.445 1.552-.814 1.03-1.22 2.43-1.22 4.175 0 1.87.434 3.26 1.303 4.184.869.919 2.02 1.38 3.461 1.378.73 0 1.37-.083 1.926-.249s1.03-.365 1.428-.598c.387-.232.719-.473.996-.722s.515-.473.714-.672h.747v4.981l-1.154.498a9.881 9.881 0 01-1.336.465c-.564.155-1.09.274-1.585.357-.493.083-1.14.125-1.951.125m19.129-5.362v-3.885c-.985.1-1.78.185-2.391.257a8.09 8.09 0 00-1.793.423c-.509.177-.905.445-1.187.805s-.423.838-.423 1.436c0 .874.235 1.47.706 1.801s1.16.49 2.084.49c.509 0 1.03-.116 1.561-.349a4.869 4.869 0 001.444-.979m0 2.889-1.071.896c-.316.266-.739.531-1.27.797-.52.255-1.03.448-1.519.581s-1.18.199-2.067.199c-1.65 0-3.02-.553-4.109-1.66-1.09-1.11-1.64-2.5-1.635-4.184 0-1.38.277-2.5.83-3.354.553-.852 1.35-1.53 2.391-2.025 1.05-.509 2.31-.863 3.769-1.063 1.46-.199 3.03-.354 4.715-.465v-.1c0-1.03-.379-1.74-1.137-2.133s-1.9-.589-3.412-.589c-.686 0-1.49.124-2.407.374s-1.82.567-2.689.955h-.498v-4.499c.576-.166 1.51-.362 2.789-.589 1.28-.227 2.58-.34 3.885-.34 3.21 0 5.55.534 7.014 1.602 1.47 1.07 2.2 2.7 2.199 4.889v12.684h-5.777z\"/>\n   <path d=\"m4949.5 1522.8-8.5 24.72h-6.475l-8.5-24.72h6.441l5.379 16.751 5.379-16.751zm19.414 6.076-9.413 25.483h-6.242l2.822-7.288-6.84-18.195h6.109l3.918 11.688 3.669-11.688zm20.498 9.33c0 3.07-.838 5.48-2.515 7.247-1.68 1.77-4.05 2.65-7.114 2.648-3.04 0-5.41-.883-7.097-2.648-1.69-1.77-2.53-4.18-2.532-7.247 0-3.1.844-5.53 2.532-7.28 1.69-1.75 4.05-2.63 7.097-2.631 3.05 0 5.42.883 7.106 2.648 1.68 1.77 2.52 4.19 2.523 7.263m-5.96.033c0-1.11-.091-2.03-.274-2.764s-.434-1.33-.755-1.768c-.343-.465-.73-.789-1.162-.971-.432-.183-.924-.274-1.478-.274-.52 0-.991.08-1.411.241-.421.16-.808.468-1.162.921-.332.432-.598 1.02-.797 1.776s-.299 1.7-.299 2.839c0 1.14.094 2.06.282 2.764.188.703.432 1.26.73 1.685.31.432.697.747 1.162.946s.98.299 1.544.299c.465 0 .938-.1 1.419-.299a2.628 2.628 0 001.154-.896c.343-.476.603-1.05.78-1.718s.266-1.6.266-2.781m27.724 9.28h-6.906l-5.047-8.118-.896 1.212v6.906h-5.811v-25.832h5.811v14.476l5.512-7.288h6.856l-6.524 8.035zm7.018.515c-1.37 0-2.67-.149-3.893-.448-1.22-.299-2.23-.647-3.03-1.046v-4.914h.481c.277.21.592.443.946.697.354.255.847.52 1.478.797.542.255 1.15.473 1.834.656a8.52 8.52 0 002.216.274c.819 0 1.54-.127 2.167-.382.625-.255.938-.659.938-1.212 0-.432-.144-.758-.432-.979s-.847-.432-1.677-.631c-.443-.111-1-.23-1.677-.357s-1.27-.274-1.793-.44c-1.46-.454-2.56-1.13-3.295-2.017-.736-.891-1.1-2.06-1.104-3.511 0-.83.191-1.61.573-2.349.382-.736.944-1.39 1.685-1.967.742-.564 1.66-1.01 2.748-1.345 1.09-.332 2.32-.498 3.694-.498 1.31 0 2.51.13 3.603.39s2.02.573 2.773.938v4.715h-.465a10.648 10.648 0 00-.946-.623c-.432-.26-.852-.484-1.262-.672-.487-.221-1.03-.404-1.635-.548s-1.22-.216-1.851-.216c-.841 0-1.55.144-2.133.432-.581.288-.872.67-.872 1.146 0 .421.144.753.432.996s.913.482 1.876.714c.498.122 1.07.241 1.718.357s1.27.274 1.868.473c1.34.432 2.35 1.07 3.046 1.901.691.836 1.04 1.95 1.037 3.329 0 .874-.205 1.71-.614 2.499a5.64 5.64 0 01-1.743 2.001c-.797.587-1.73 1.04-2.814 1.361-1.08.321-2.37.481-3.877.481m22.599-5.379v-3.885c-.985.1-1.78.185-2.391.257a8.104 8.104 0 00-1.793.423c-.509.177-.904.445-1.187.805-.282.36-.423.838-.423 1.436 0 .874.235 1.47.706 1.801.47.326 1.16.49 2.083.49.509 0 1.03-.116 1.561-.349a4.869 4.869 0 001.444-.979m0 2.889-1.071.896c-.315.266-.739.531-1.27.797a8.58 8.58 0 01-1.519.581c-.492.133-1.18.199-2.067.199-1.65 0-3.02-.553-4.109-1.66-1.09-1.11-1.64-2.5-1.635-4.184 0-1.38.277-2.5.83-3.354.554-.852 1.35-1.53 2.391-2.025 1.05-.509 2.31-.863 3.768-1.063s3.03-.354 4.715-.465v-.1c0-1.03-.379-1.74-1.137-2.133s-1.9-.589-3.412-.589c-.686 0-1.49.124-2.407.374-.918.249-1.82.567-2.689.955h-.498v-4.499c.575-.166 1.5-.362 2.789-.589s2.58-.34 3.884-.34c3.21 0 5.55.534 7.015 1.602 1.47 1.07 2.2 2.7 2.199 4.889v12.684h-5.777z\"/>\n  </g>\n</svg>\n\noutput.svg.txt\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"840.99mm\" height=\"345.1mm\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"square\" stroke-linejoin=\"bevel\" viewBox=\"0 0 9933 4076\">\n <g stroke-width=\"11.81\" fill=\"#000\" fill-rule=\"nonzero\" stroke=\"#fff\">\n  <path d=\"m4948.6 1499.9c0 1.23-.232 2.31-.697 3.237-.465.93-1.09 1.7-1.876 2.308-.93.73-1.95 1.25-3.063 1.561-1.11.31-2.53.465-4.242.465h-9.895v-24.72h8.733c1.82 0 3.19.069 4.126.208.935.138 1.81.429 2.631.872.885.476 1.55 1.11 1.984 1.909.437.797.656 1.72.656 2.756 0 1.21-.302 2.28-.905 3.221s-1.44 1.63-2.499 2.075v.133c1.53.321 2.75.977 3.669 1.967.919.991 1.38 2.33 1.378 4.009m-7.952-10.16c0-.398-.102-.808-.307-1.229s-.523-.725-.955-.913c-.41-.177-.894-.274-1.453-.291s-1.39-.025-2.499-.025h-.432v5.23h.78c1.06 0 1.81-.011 2.233-.033s.866-.138 1.32-.349c.498-.232.841-.553 1.029-.963s.282-.886.282-1.428m1.561 10.044c0-.764-.155-1.36-.465-1.793s-.775-.758-1.395-.98c-.376-.144-.894-.224-1.552-.241s-1.54-.025-2.648-.025h-1.146v6.192h.332c1.62 0 2.73-.011 3.354-.033s1.25-.172 1.893-.448c.564-.243.977-.6 1.237-1.071.26-.47.39-1 .39-1.602m18.833 8.185c-3.52 0-6.22-.841-8.093-2.523-1.88-1.68-2.81-4.08-2.814-7.189 0-3.04.874-5.47 2.623-7.288 1.75-1.82 4.19-2.72 7.338-2.723 2.86 0 5 .769 6.441 2.308s2.16 3.74 2.158 6.607v2.092h-12.733c.055.863.238 1.59.548 2.167a3.8 3.8 0 001.229 1.386c.498.343 1.08.589 1.743.739a9.94 9.94 0 002.175.224 8.92 8.92 0 001.992-.224 9.618 9.618 0 001.793-.589 12.934 12.934 0 002.308-1.328h.614v4.798c-.476.188-.91.362-1.303.523s-.932.324-1.619.49c-.631.166-1.28.296-1.951.39-.67.094-1.49.141-2.449.141m1.926-12.219c-.033-1.23-.318-2.16-.855-2.806-.537-.642-1.36-.963-2.465-.963-1.13 0-2.01.338-2.648 1.013-.636.675-.988 1.59-1.054 2.756zm3.304-9.579h-4.765v-4.532h4.765zm-7.985 0h-4.765v-4.532h4.765zm31.621 21.3h-6.69l-4.416-7.388h-1.494v7.388h-5.811v-18.644h5.811v7.487c.819-.011 1.43-.13 1.834-.357s.844-.827 1.32-1.801c.155-.332.321-.697.498-1.096.177-.398.338-.753.481-1.063.587-1.23 1.31-2.07 2.167-2.523.858-.454 1.9-.681 3.129-.681.432 0 .841.006 1.229.017.387.011.664.017.83.017v4.981h-1.129c-.354 0-.672.069-.955.208a2.756 2.756 0 00-.739.523c-.21.221-.368.443-.473.664l-.307.648a39.53 39.53 0 01-.565 1.278c-.122.255-.338.504-.647.747zm11.736.498c-1.54 0-2.95-.194-4.225-.581s-2.39-.985-3.329-1.793c-.93-.808-1.65-1.82-2.175-3.046-.52-1.22-.78-2.66-.78-4.325 0-1.78.282-3.3.847-4.549.564-1.25 1.33-2.28 2.291-3.088.93-.775 2.02-1.35 3.279-1.718 1.26-.371 2.56-.556 3.926-.556 1.03 0 2.06.119 3.088.357 1.03.238 2.06.617 3.105 1.137v4.981h-.747c-.232-.221-.517-.465-.855-.731s-.706-.509-1.104-.73a7.315 7.315 0 00-1.428-.589 6.128 6.128 0 00-1.776-.241c-1.48 0-2.63.517-3.445 1.552-.814 1.03-1.22 2.43-1.22 4.175 0 1.87.434 3.26 1.303 4.184.869.919 2.02 1.38 3.461 1.378.73 0 1.37-.083 1.926-.249s1.03-.365 1.428-.598c.387-.232.719-.473.996-.722s.515-.473.714-.672h.747v4.981l-1.154.498a9.881 9.881 0 01-1.336.465c-.564.155-1.09.274-1.585.357-.493.083-1.14.125-1.951.125m19.129-5.362v-3.885c-.985.1-1.78.185-2.391.257a8.09 8.09 0 00-1.793.423c-.509.177-.905.445-1.187.805s-.423.838-.423 1.436c0 .874.235 1.47.706 1.801s1.16.49 2.084.49c.509 0 1.03-.116 1.561-.349a4.869 4.869 0 001.444-.979m0 2.889-1.071.896c-.316.266-.739.531-1.27.797-.52.255-1.03.448-1.519.581s-1.18.199-2.067.199c-1.65 0-3.02-.553-4.109-1.66-1.09-1.11-1.64-2.5-1.635-4.184 0-1.38.277-2.5.83-3.354.553-.852 1.35-1.53 2.391-2.025 1.05-.509 2.31-.863 3.769-1.063 1.46-.199 3.03-.354 4.715-.465v-.1c0-1.03-.379-1.74-1.137-2.133s-1.9-.589-3.412-.589c-.686 0-1.49.124-2.407.374s-1.82.567-2.689.955h-.498v-4.499c.576-.166 1.51-.362 2.789-.589 1.28-.227 2.58-.34 3.885-.34 3.21 0 5.55.534 7.014 1.602 1.47 1.07 2.2 2.7 2.199 4.889v12.684h-5.777z\"/>\n  <path d=\"m4949.5 1522.8-8.5 24.72h-6.475l-8.5-24.72h6.441l5.379 16.751 5.379-16.751zm19.414 6.076-9.413 25.483h-6.242l2.822-7.288-6.84-18.195h6.109l3.918 11.688 3.669-11.688zm20.498 9.33c0 3.07-.838 5.48-2.515 7.247-1.68 1.77-4.05 2.65-7.114 2.648-3.04 0-5.41-.883-7.097-2.648-1.69-1.77-2.53-4.18-2.532-7.247 0-3.1.844-5.53 2.532-7.28 1.69-1.75 4.05-2.63 7.097-2.631 3.05 0 5.42.883 7.106 2.648 1.68 1.77 2.52 4.19 2.523 7.263m-5.96.033c0-1.11-.091-2.03-.274-2.764s-.434-1.33-.755-1.768c-.343-.465-.73-.789-1.162-.971-.432-.183-.924-.274-1.478-.274-.52 0-.991.08-1.411.241-.421.16-.808.468-1.162.921-.332.432-.598 1.02-.797 1.776s-.299 1.7-.299 2.839c0 1.14.094 2.06.282 2.764.188.703.432 1.26.73 1.685.31.432.697.747 1.162.946s.98.299 1.544.299c.465 0 .938-.1 1.419-.299a2.628 2.628 0 001.154-.896c.343-.476.603-1.05.78-1.718s.266-1.6.266-2.781m27.724 9.28h-6.906l-5.047-8.118-.896 1.212v6.906h-5.811v-25.832h5.811v14.476l5.512-7.288h6.856l-6.524 8.035zm7.018.515c-1.37 0-2.67-.149-3.893-.448-1.22-.299-2.23-.647-3.03-1.046v-4.914h.481c.277.21.592.443.946.697.354.255.847.52 1.478.797.542.255 1.15.473 1.834.656a8.52 8.52 0 002.216.274c.819 0 1.54-.127 2.167-.382.625-.255.938-.659.938-1.212 0-.432-.144-.758-.432-.979s-.847-.432-1.677-.631c-.443-.111-1-.23-1.677-.357s-1.27-.274-1.793-.44c-1.46-.454-2.56-1.13-3.295-2.017-.736-.891-1.1-2.06-1.104-3.511 0-.83.191-1.61.573-2.349.382-.736.944-1.39 1.685-1.967.742-.564 1.66-1.01 2.748-1.345 1.09-.332 2.32-.498 3.694-.498 1.31 0 2.51.13 3.603.39s2.02.573 2.773.938v4.715h-.465a10.648 10.648 0 00-.946-.623c-.432-.26-.852-.484-1.262-.672-.487-.221-1.03-.404-1.635-.548s-1.22-.216-1.851-.216c-.841 0-1.55.144-2.133.432-.581.288-.872.67-.872 1.146 0 .421.144.753.432.996s.913.482 1.876.714c.498.122 1.07.241 1.718.357s1.27.274 1.868.473c1.34.432 2.35 1.07 3.046 1.901.691.836 1.04 1.95 1.037 3.329 0 .874-.205 1.71-.614 2.499a5.64 5.64 0 01-1.743 2.001c-.797.587-1.73 1.04-2.814 1.361-1.08.321-2.37.481-3.877.481m22.599-5.379v-3.885c-.985.1-1.78.185-2.391.257a8.104 8.104 0 00-1.793.423c-.509.177-.904.445-1.187.805-.282.36-.423.838-.423 1.436 0 .874.235 1.47.706 1.801.47.326 1.16.49 2.083.49.509 0 1.03-.116 1.561-.349a4.869 4.869 0 001.444-.979m0 2.889-1.071.896c-.315.266-.739.531-1.27.797a8.58 8.58 0 01-1.519.581c-.492.133-1.18.199-2.067.199-1.65 0-3.02-.553-4.109-1.66-1.09-1.11-1.64-2.5-1.635-4.184 0-1.38.277-2.5.83-3.354.554-.852 1.35-1.53 2.391-2.025 1.05-.509 2.31-.863 3.768-1.063s3.03-.354 4.715-.465v-.1c0-1.03-.379-1.74-1.137-2.133s-1.9-.589-3.412-.589c-.686 0-1.49.124-2.407.374-.918.249-1.82.567-2.689.955h-.498v-4.499c.575-.166 1.5-.362 2.789-.589s2.58-.34 3.884-.34c3.21 0 5.55.534 7.015 1.602 1.47 1.07 2.2 2.7 2.199 4.889v12.684h-5.777z\"/>\n </g>\n</svg>\n. @tigt \nchanging spaces to non-breaking spcaes does not help at all\n- optimizers such as SVGO replaces non-breaking spaces with normal spaces\n- see #1029 or #878 \nabout support:\nFirefox supports xml:space since Firefox 3 (see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xml:space#Browser_compatibility ) and Firefox displays it in almost all cases correctly. \n(But every common Browser displays https://commons.wikimedia.org/wiki/File:SVG_test_text_tspan_ws.svg differently, and none correct.). @GreLI Thanks for answering:\nI further optimiced the input with SVGO, with convertPathData (and other options except convertTransform), but it didn't help.\nInput\nBug1021_Input2.svg.txt\n\n$ svgo -i Bug1021_Input2.svg.txt -o Bug1021_Input2.svg.txt --pretty --indent=1 --disable=convertTransform  --enable=convertPathData\n- Bug1021_Input2.svg.txt:\n- Done in 2423 ms!\n- 611.409 KiB - 0% = 611.409 KiB\n\n\nOptimization -p 8 fails\nNow I run convertTransform with -p 8: Bug1021_Output2.svg.txt \n\n$ svgo -i Bug1021_Input2.svg.txt -o Bug1021_Output2.svg.txt -p 8 --pretty --indent=1 --enable=convertTransform  --disable=convertPathData\n\n\noptimizations with -p 2 works (after other opimizaion):\nBut if you can run svgo with -p 2 --enable=convertTransform after other optimization:\n\n$ svgo -i Philippines (orthographic projection).svg -o \nBug1021_SolvedOutput.svg.txt\n --pretty --indent=1 -p 2 --enable=convertTransform\nmin.svg:\nDone in 1815 ms!\n401.268 KiB - 0% = 401.131 KiB\n\nAnd the Output is perfect:\n\nTherefore I would like to have doublefloatpreccision-calculation, and rounding aferwards, this might solve this issue, with increasing precission, without increasing file size. (But maybe increasing processingtime.)\n\n\nCopyright\n\nLicense: {{self|[cc-by-sa-3.0](https://creativecommons.org/licenses/by-sa/3.0/deed)|GFDL}}\n\nAuthor: https://commons.wikimedia.org/wiki/User:Addicted04\n\nSource: https://upload.wikimedia.org/wikipedia/commons/5/50/Philippines_%28orthographic_projection%29.svg\n\nDetails: https://commons.wikimedia.org/wiki/File:Philippines_(orthographic_projection).svg\n\n\n. same problem for https://commons.wikimedia.org/wiki/File:Coat_of_arms_of_Paul_Henri_Delatte.svg (version of 09:13, 4. Sep. 2018)\nInput\nInput.svg.txt\n\nOutput\nOutput.svg.txt\n\n\nCopyright CC-BY-SA 4.0\n\nLizense: CC-BY-SA 4.0\n\nAuthor: Olivier LPB and SajoR\n\nSource: https://commons.wikimedia.org/wiki/File:Coat_of_arms_of_Paul_Henri_Delatte.svg\n\n\n. @oraslaci \nYou need to add xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" in the <svg-tag\nicon_zoomin_black.svg.txt\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" style=\"enable-background:new 0 0 500 500\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 500 500\">\n <style type=\"text/css\">\n  .st0{fill:#FFFFFF;}\n </style>\n <g id=\"g5363\" transform=\"translate(-26.7148 60.717)\">\n  <rect id=\"rect4825_1_\" width=\"312\" height=\"90.8\" x=\"18.9\" y=\"248.6\" transform=\"matrix(.7071 -.7071 .7071 .7071 -156.666 209.741)\"/>\n  <path d=\"M96.7,438.3l-66.1-66.1L253,149.7l66.1,66.1L96.7,438.3z M34.3,372.2l62.3,62.3l218.7-218.7L253,153.5L34.3,372.2z\"/>\n  <path id=\"path4823_1_\" d=\"m436.9 215.4c-52.2 52.2-136.8 52.2-189 0s-52.2-136.8 0-189 136.8-52.2 189 0 52.2 136.8 0 189z\" class=\"st0\" sodipodi:cx=\"329.658\" sodipodi:cy=\"437.197\" sodipodi:rx=\"73.584\" sodipodi:ry=\"73.584\" sodipodi:type=\"arc\"/>\n  <path d=\"m342.4 301.4c-46.3 0-92.5-17.6-127.7-52.8-70.4-70.4-70.4-185 0-255.4 34.1-34.1 79.5-52.9 127.7-52.9s93.6 18.8 127.7 52.9c70.4 70.4 70.4 185 0 255.4-35.2 35.2-81.5 52.8-127.7 52.8zm0-267.2c-23.2 0-44.9 9-61.3 25.4-33.8 33.8-33.8 88.8 0 122.6s88.8 33.8 122.6 0 33.8-88.8 0-122.6c-16.4-16.4-38.2-25.4-61.3-25.4z\"/>\n  <path id=\"rect5335_1_\" d=\"m323.8 57.1v45.2h-45.2v37.1h45.2v45.2h37.1v-45.2h45.2v-37.1h-45.2v-45.2h-37.1z\" inkscape:connector-curvature=\"0\"/>\n  <path d=\"m361.5 185.2h-38.2v-45.2h-45.2v-38.2h45.2v-45.2h38.2v45.2h45.2v38.2h-45.2v45.2zm-37.1-1.1h36v-45.2h45.2v-36h-45.2v-45.2h-36v45.2h-45.2v36h45.2v45.2z\"/>\n </g>\n</svg>\n\n. Issue can be closed. ",
    "redscorpix": "Ups, my config file was\n- name: convertPathData\n  active: true\n  type: perItem\n  params:\n    straightCurves: false\n    lineShorthands: false\n    curveSmoothShorthands: false\n    floatPrecision: 1\n    removeUseless: false\n    collapseRepeated: false\n    leadingZero: false\n    negativeExtraSpace: false\nMy mistake\n. ",
    "zachleat": "Thanks!\n. ",
    "flexpaper": "grab the original SVG from here:\nhttps://dl.dropbox.com/u/13295266/Monash_Magazine_1.svg\n. sounds like a good idea\n. By the way; this SVG was created using pdftocairo (poppler utility)\n. ",
    "docmars": "I am still having issues with this happening on a very simple file with a clipped image. Not exactly sure what is happening here, but after using SVGO, the image no longer appears (probably because the clip-path isn't clipping at the right coordinates or something.\nWith collapseGroups enabled, the clip-path is added directly to the <image> element. Simply wrapping the <image> with a Group and adding the clip-path back to the group makes it appear correctly without modifying the clip-path definition.\nExample SVGs\nOriginal\nOptimized\nOptimized (collapseGroups disabled) <-- appears correctly\nDoes this have something to do with relative clip-path positioning?\n. ",
    "fmal": "+1\n. ",
    "papandreou": "I've been playing around with an SVG tool that allows you to perform arbitrary processing of SVGs by including an inline script in the SVG file itself (https://github.com/papandreou/node-svgfilter). Haven't used it a lot yet, but it could be a way to handle very specialized operations like this one, where exposing a specific command line option might be over the top.\n. ",
    "benfrain": "@GregLi I'm aware of that. The point of this is to automate it for a whole bunch ;)\n. Great, thanks\n\nOn 2 Aug 2015, at 08:10, Jonathan Raoult notifications@github.com wrote:\n@mattaningram @benfrain just in case you are still looking for a solution for your use case: https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "jraoult": "@mattaningram @benfrain just in case you are still looking for a solution for your use case: https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js\n. ",
    "felthy": "grunt-svgmin was using version ~0.2.3 of svgo. I've just tried porting to the current version, 0.3.1, and this is no longer an issue. The following configuration works in 0.3.1: \nplugins: [\n  {\n    removeViewBox: false\n  }\n]\nSo I think this issue can be closed.\n. ",
    "mindless2112": "I should have mentioned that this was with v0.3.1 -- I haven't tested anything newer.\n. ",
    "sambowler": "I'm also seeing this issue. Although not ideal, converting the fill to \"#00000.1\" (minus the period) temporarily fixes the problem.\n. ",
    "manovotny": "+1 for fixing this!\nI have some black icons that would love to be seen.\n. I am certainly no expert in SVGs, but I wonder if these issues / pull requests (#135 and #145) could be related.\n. ",
    "davidlwarner": "I should mention that this is with 0.3.1.\n. ",
    "robwierzbowski": "Huh, I'm getting no errors now too. Maybe it was a cache problem, or something updated somewhere else to fix it. Thanks. \n. ",
    "oleggromov": "before.svg\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nafter.svg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 513 36\"><defs><filter x=\"-30%\" y=\"-30%\" width=\"180%\" height=\"180%\"><feGaussianBlur in=\"SourceAlpha\" stdDeviation=\".25\"/><feOffset dx=\"1\" dy=\"1\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\".4\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge></filter></defs><path fill=\"#da107e\" d=\"M.682 9.332c-.028-.14-.149-.65-.362-1.532s-.32-1.547-.32-1.995c0-.994.315-1.816.945-2.467.63-.651 1.459-.978 2.488-.978 2.016 0 3.22 1.047 3.611 3.14l3.611 16.512h.095l5.028-16.041c.42-1.302.945-2.229 1.575-2.782.63-.553 1.424-.83 2.383-.83.952 0 1.729.275 2.331.824.602.55 1.113 1.479 1.533 2.787l5.039 16.042h.084l3.611-16.513c.399-2.094 1.603-3.14 3.611-3.14 1.043 0 1.877.326 2.504.978.626.65.939 1.473.939 2.467 0 .763-.231 1.939-.693 3.527-.224.902-.567 2.303-1.029 4.198-.462 1.897-1.158 4.749-2.089 8.557-.931 3.807-1.512 6.189-1.743 7.148-.378 1.666-.955 2.801-1.732 3.4-.777.602-1.76.904-2.95.904-2.464 0-4.112-1.266-4.945-3.791l-4.472-14.097h-.095l-4.419 14.099c-.448 1.273-1.064 2.225-1.848 2.85-.784.627-1.833.941-3.149.941-1.134 0-2.094-.277-2.882-.83-.787-.553-1.359-1.596-1.716-3.129-.679-2.891-1.384-5.822-2.115-8.797-.731-2.975-1.393-5.626-1.984-7.958-.591-2.331-.901-3.496-.929-3.496h.084v.002z\"/><path fill=\"#fff\" d=\"M.682 9.332c-.028-.14-.149-.65-.362-1.532s-.32-1.547-.32-1.995c0-.994.315-1.816.945-2.467.63-.651 1.459-.978 2.488-.978 2.016 0 3.22 1.047 3.611 3.14l3.611 16.512h.095l5.028-16.041c.42-1.302.945-2.229 1.575-2.782.63-.553 1.424-.83 2.383-.83.952 0 1.729.275 2.331.824.602.55 1.113 1.479 1.533 2.787l5.039 16.042h.084l3.611-16.513c.399-2.094 1.603-3.14 3.611-3.14 1.043 0 1.877.326 2.504.978.626.65.939 1.473.939 2.467 0 .763-.231 1.939-.693 3.527-.224.902-.567 2.303-1.029 4.198-.462 1.897-1.158 4.749-2.089 8.557-.931 3.807-1.512 6.189-1.743 7.148-.378 1.666-.955 2.801-1.732 3.4-.777.602-1.76.904-2.95.904-2.464 0-4.112-1.266-4.945-3.791l-4.472-14.097h-.095l-4.419 14.099c-.448 1.273-1.064 2.225-1.848 2.85-.784.627-1.833.941-3.149.941-1.134 0-2.094-.277-2.882-.83-.787-.553-1.359-1.596-1.716-3.129-.679-2.891-1.384-5.822-2.115-8.797-.731-2.975-1.393-5.626-1.984-7.958-.591-2.331-.901-3.496-.929-3.496h.084v.002z\"/></svg>\n. ",
    "simenbrekken": "I still think the whole command line is bit cumbersome, ideally you'd be able to specify multiple inputs regardless of type and only use options to specify outputs:\n``` bash\nUsage:\n  svgo [options] [path ...]\nOptions:\n  ...\n  -o, --overwrite - Overwrite input file\n```\nSingle file input (overwrite):\nbash\n$ svgo -o my-file.svg\nSingle file input with STDOUT output:\nbash\n$ svgo my-file.svg > my-file-optimized.svg\nSingle file STDIN input with STDOUT output:\nbash\n$ cat my-file.svg | svgo my-file.svg > my-file-optimized.svg\nMultiple inputs (overwrite):\nbash\n$ svgo -o my-file.svg images/vectors\nIt''s a lot simpler and you'll only require a loop when you're dealing with multiple outputs.\n. ",
    "mahish": "Syntax-check was ok.\nSo I thought the export from Illustrator is wrong somehow.\nThis was my original export settings from Illustrator: \n \n ( settings based on http://stackoverflow.com/questions/13236365/optimal-settings-for-exporting-svgs-for-the-web-from-illustrator )\nI tried different export settings and it is working now.\nMy new settings:\n\nThank you for your help (and the tool) and sorry for being out-of-topic.\n. ",
    "PedroNorte": "I have also had this issue.  For me it was caused by the SVG file starting with a BOM symbol (https://en.wikipedia.org/wiki/Byte_order_mark) as it was a UTF-8 file.  If you open the file and change the encoding and resave (e.g. with notepad2) it should remove the symbol and then the file should work.\n. ",
    "deniaz": "I'm a bit late to the party but had the same issue as @PedroNorte. In PhpStorm theres a context menu item called Remove BOM which solved the problem for me.\n. ",
    "AndyOGo": "Same here on SVG's which are run through svgo beforehand.\nI double checked to have BOM removed and I check my files with an xml validator.\nActually it is very weird, it works with my svgo CLI, but webpack's svgo-loader fails\nEdit\nMy Problem was caused by another svg loader for custom fonts.. ",
    "silentroach": "Already was fixed in master (but found my bug while checking :)\n. Fixed in #172\n. Wrong branch, sorry\n. Will squash it :]\n. \u042f \u0443\u0436 \u0434\u0443\u043c\u0430\u043b \u0442\u044b \u0440\u0435\u0448\u0438\u043b \u0437\u0430\u0431\u0438\u0442\u044c :)\n\u0412\u0435\u0447\u0435\u0440\u043e\u043c \u0441\u0434\u0435\u043b\u0430\u044e \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440, \u0441\u043f\u0430\u0441\u0438\u0431\u0430\n. \u041e\u043a\u0435\u0439, \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0441\u0434\u0435\u043b\u0430\u043b, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0438\n. But why? O.o\nIt is better to make other things async. No?\n. Tis not the reason to make it sync :)\n. What about accessibility and blind people? It is for accessibility, though.\n. This pull-request will fix just a part of your problem\n. Seems like it is cause of fill-rule evenodd stripped.\n. Thanks :}\n. but removeUnknownsAndDefaults will be a little bit slower\n. Previous pull-request improved :}\n. @deepsweet yep, didn't see this issue\n@staabm added in  #165 \n. \u0415\u0442\u0438\u0442\u0441\u043a\u0430\u044f \u0432\u043e\u0448\u044c, \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u043b\u043b\u0440\u0435\u043a\u0432\u0435\u0441\u0442\u0438\u043b\n. Rewritten in #172 \n. Tried to fix it by myself, but confused a little, how is it better to do it. Should I modify convertTransform plugin (js2transform and roundTransform are in this plugin) or should I write new one?. ",
    "jefflembeck": "Awesome! Thanks!\n. ",
    "coveralls": "\nCoverage remained the same when pulling 5202de337d8d81c4d1374ae5752336ef260d8fe4 on silentroach:bugfix-collapseRepeated-closePath into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling f791b28ba0913a9f6824ee1f439c43eabab1532c on silentroach:bugfix-collapseRepeated-closePath into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling 52ad6618103e9747e34a21b62c1c672fc113bf77 on nathan-muir:issue-132-collapseGroup-clipPath into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling 35239bf83e094f7820a7a28812c0a21c8a91d251 on nathan-muir:mergPathsWithSameAttributes into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling fbc58c75a37914663c2c8f4daa0d19ea121e3aab on nathan-muir:applyTransformToPathWithStroke into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling d5a89f940a7874e3722ec4d539fb515be1a44cf4 on nathan-muir:convertPathData-isuse into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling 402716a4b2d7e7683836ca66e1eecdcb6b88a16e on nathan-muir:moveGroupAttrsToElems-toSubgroups into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage increased (+1.13%) when pulling 8daeb086173c2915071e9c6807151c44c598185c on Beetle-ru:synchronousCall into 6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master.\n. \nCoverage remained the same when pulling f3454a094581bbab489f17407505576789e0140b on sipayRT:bem-info-data into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling 433bbe6da2f12e0af586fc43ae66bbadadd3b139 on sipayRT:bem-info-data into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling 2ac3f9fa905699c18358d473db5e0d4089e9be3d on sipayRT:bem-info-data into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling 222151772d8a6eef2f384a1889303b7af915436f on sipayRT:bem-info-data into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling 389368c2c9fc314b47ac58fb78b3682bf747ecca on GreLI:master into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling a6ba68d46188eb61f9ec7e3ea445cc3b4f35e93e on adamdicarlo:ignore-lcov.info into c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master.\n. \nCoverage remained the same when pulling d4288218a4c2be71cd181bbb8801affb5c52aeac on okize:patch-1 into 518fcbf23ef78e6920a10925a0d92faded01b7c0 on svg:master.\n. \nCoverage remained the same when pulling 4c4ced858d2506c95b88c04cc885d34d74e34b0f on silentroach:bugfix-collapseRepeated-z into 6f13d62796a25e97c817020de55ebe39863db52a on svg:master.\n. \nCoverage remained the same when pulling 97678a730466b5dcf7fa3881da454ea270266302 on silentroach:bugfix-remove-inherited-defaults into 2428fcd7fc4bd8c06ef9b801d226a78d3fd9bc5c on svg:master.\n. \nCoverage remained the same when pulling e3dc7844bcac8da05fa65ee1f8fc2f00dcc00d09 on silentroach:bugfix-inheritance-check into a4de9886afcc37d2b76d76cf62b67f920ef31ce8 on svg:master.\n. \nCoverage remained the same when pulling 7053bea6961be2b888984dba84a76cf23b3e05db on silentroach:feature-inheritance-analyzis into a4de9886afcc37d2b76d76cf62b67f920ef31ce8 on svg:master.\n. \nCoverage remained the same when pulling aa15348578256b8dce75c592bfca826321146661 on bhoule:master into 00b94d94a99a90aa009ca89b8c829fd524d42957 on svg:master.\n. \nCoverage remained the same when pulling 5cc9d486e61ced03439be3b2f860cd7b2642b8ea on bradcerasani:master into 0fac67ee54aaa633b548175a962bece310ba144c on svg:master.\n. \nCoverage remained the same when pulling 7df4b360b2f28613f40cfcc311d4db975fa00850 on bradcerasani:master into 0fac67ee54aaa633b548175a962bece310ba144c on svg:master.\n. \nCoverage remained the same when pulling e16295818f5b10329b3961b658a08ca90e44e2e0 on bradcerasani:master into 0fac67ee54aaa633b548175a962bece310ba144c on svg:master.\n. \nCoverage remained the same when pulling e16295818f5b10329b3961b658a08ca90e44e2e0 on bradcerasani:master into 0fac67ee54aaa633b548175a962bece310ba144c on svg:master.\n. \nCoverage remained the same when pulling 06f084d8e79d008dcbdb7f0866b59ab9d89b1465 on dwabyick:feature/remove-desc into c351ab0de846ebfbe9cc82b050c366b4a7955aae on svg:master.\n. \nCoverage increased (+0.15%) when pulling 943f5fab5717687280a0d2b0ece6ef48fff541a2 on dfilatov:master into 0fac67ee54aaa633b548175a962bece310ba144c on svg:master.\n. \nCoverage decreased (-1.37%) when pulling 30237018ef9c9f3d3bb9c2047624c523dfaaec18 on dfilatov:master into b11840ccc8f3efc47ba52493661049bc168811f6 on svg:master.\n. \nCoverage remained the same when pulling 18212e717af34f08eb2a2009160cd658a02238ec on shinnn:master into f42d118a13fba710355162273737a38243b4ee4b on svg:master.\n. \nCoverage remained the same when pulling 18212e717af34f08eb2a2009160cd658a02238ec on shinnn:master into f42d118a13fba710355162273737a38243b4ee4b on svg:master.\n. \nCoverage remained the same when pulling e9dd99f267f41a1ff967a14a04e09bc9ff668558 on SamHerbert:master into f42d118a13fba710355162273737a38243b4ee4b on svg:master.\n. \nCoverage remained the same when pulling da5c339076e5d4535fdce878683145cd4b4d40c0 on YetiOr:yeti-or.no-filter-no-enable-b into f42d118a13fba710355162273737a38243b4ee4b on svg:master.\n. \nCoverage remained the same when pulling d1ef377f17f5b2adcf19c631b4e4ff76ede3a420 on YetiOr:yeti-or.TRIVIAL into 0d42fd3d39cc4e4038abc606f444e37a12536f88 on svg:master.\n. \nCoverage remained the same when pulling 4d83c314206873bb441385a82801a001461648ee on YetiOr:yeti-or.pre-optimize-colors into 59ab38ea8e51a298124bcc839deba67136bd4821 on svg:master.\n. \nCoverage remained the same when pulling ccd05417125a2c8420cd60b0846e8da935d0eb09 on YetiOr:colors-short-names into 59ab38ea8e51a298124bcc839deba67136bd4821 on svg:master.\n. \nCoverage remained the same when pulling 385d6534d2de5c6337aa3e619d22e21218fd0ce2 on kiyopikko:20141207_kiyopikko into 71b010db088b0525970b81e95b396d099daedfcc on svg:master.\n. \nCoverage remained the same when pulling 8222f41cd4878cf76b4ff53ebe565e2daf3b1d49 on kiyopikko:20141207_kiyopikko into 71b010db088b0525970b81e95b396d099daedfcc on svg:master.\n. \nCoverage remained the same when pulling 81d7a08a5fa19850592d9c0a6ab860de15354d16 on bfred-it:master into 259ae7e7d9dfd59161669495ec1ac43f6e677544 on svg:master.\n. \nCoverage remained the same when pulling 1ccdc0d76be937ea52993a7ec46ea2f23a74c1f8 on samarpanda:wsk_build_error into 259ae7e7d9dfd59161669495ec1ac43f6e677544 on svg:master.\n. \nCoverage remained the same at 92.62% when pulling cd2f0b682b7bdded8240297955f984ab3629b84e on jakearchibald:patch-1 into bada6b2a8c5ac9d3bc06f1ad631e14a9157f4a5f on svg:master.\n. \nCoverage remained the same at 91.75% when pulling 8c4c197534992c93ad5e75c677d35f493f520df8 on subzey:colorname-typo into d668a10d144fbf7958b275950acc07402702bdd8 on svg:master.\n. \nCoverage remained the same at 91.75% when pulling 8c4c197534992c93ad5e75c677d35f493f520df8 on subzey:colorname-typo into d668a10d144fbf7958b275950acc07402702bdd8 on svg:master.\n. \nCoverage remained the same at 91.8% when pulling cec64ee78a8df4a766034b21f5c9c65b14bed464 on silverwind:remove-util-puts into 84220ce1dc80da6ff0ff8b59bdd0416cdd4348a9 on svg:master.\n. \nCoverage decreased (-3.55%) to 87.72% when pulling 9b91154ae594ffd0e8da74df14fa7c7a76ae9d1d on jakearchibald:master into 23d617d389a93e0193d031e1fa423053c7c02036 on svg:master.\n. \nCoverage remained the same at 87.76% when pulling 3f002cb187b171fdfa7a29102ab8f1f5db262b77 on nhusher:failing-test into 5c08d7bc49be9c8c6494d4743b9579365389031d on svg:master.\n. \nCoverage remained the same at 89.84% when pulling 97ab6c2a6e68c7bcde5cc4c66a6d4f02cbf8797b on scurker:master into e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master.\n. \nCoverage remained the same at 89.84% when pulling 8e5706485e993267f1be7e72048e69649317c5ff on scurker:master into e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master.\n. \nCoverage remained the same at 89.84% when pulling df9cd399c0bd25f6597f36c13bbd3a530c08a93b on lahmatiy:master into e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master.\n. \nCoverage remained the same at 89.84% when pulling b0598a226821715c4f80c5b2747be88f7dccb3c1 on waldyrious:patch-1 into b80944cb825036314758020926dfdb54c602e181 on svg:master.\n. \nCoverage increased (+0.05%) to 89.894% when pulling 3d8496033cfb94fd366612b8e2c656bedc266a9a on scurker:pretty-print-indent into b80944cb825036314758020926dfdb54c602e181 on svg:master.\n. \nCoverage remained the same at 89.474% when pulling dd8e385695fd1f5eecd234edbd4e7c6acc7cd7d6 on ricardobeat:addClassesNoRepeat into b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master.\n. \nCoverage remained the same at 89.474% when pulling dd8e385695fd1f5eecd234edbd4e7c6acc7cd7d6 on ricardobeat:addClassesNoRepeat into b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master.\n. \nCoverage remained the same at 89.474% when pulling 768107b33deb6a6e8c06ad3ed372e75b680a2e00 on ricardobeat:master into b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master.\n. \nCoverage remained the same at 88.947% when pulling d6ca18bf7476cc1e0156a2337560067a3d0dd1f5 on keithclark:scale-precision-plugin into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage remained the same at 88.947% when pulling aa5358cd31c3ba4da72c1493f4dce705ec6e27ca on rally25rs:illustratorLayerIdsToClasses into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage remained the same at 88.947% when pulling 24b38aa6557f46b065f579ff2487bdd151276b70 on rally25rs:illustratorLayerIdsToClasses into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage increased (+0.06%) to 89.005% when pulling 34d9500844bfe3dc944ce71e538ddf0f2a879623 on gjjones:master into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage remained the same at 88.947% when pulling f4b455a65d50537027942b06e46690e7e60b39ca on elidupuis:remove-elements into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage remained the same at 88.947% when pulling d60c5c18da01b6538bd568ac47439cb0cfa435ee on elidupuis:remove-elements into e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master.\n. \nCoverage remained the same at 88.947% when pulling 46d604b10e5b33e101f1d96bf839f31b4e3b6043 on elrumordelaluz:readme-elrumordelaluz into 4dcef5e31a89f903ccd90724d65a2e44063aff60 on svg:master.\n. \nCoverage remained the same at 88.947% when pulling 4865892f6ec358369651fbbbdeeb0211822788b1 on tombigel:patch-1 into 7302d4d8ccf62bd4f5e2690d64bce246c9f60be1 on svg:master.\n. \nCoverage remained the same at 88.947% when pulling 24f7b5908b34cb222991cd96a132a0137e0ed63d on darktrojan:sortAttrs into 6e9854a046e1dffda0cc55caf4593191ce197d90 on svg:master.\n. \nCoverage remained the same at 88.947% when pulling 24f7b5908b34cb222991cd96a132a0137e0ed63d on darktrojan:sortAttrs into 6e9854a046e1dffda0cc55caf4593191ce197d90 on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 1e7306f570aaadafd9e7433fb0cb27a4535e9670 on gjjones:allows-use-of-addAttributes-plugin into 975a9ff223b562a440ccd919715092275024c950 on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 1cf0341d917e8e8bfaee5175cfedc986f30c09bb on vkhv:patch-2 into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 25d3f017a178f34429135771342006ac26f1248e on vkhv:master into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling b68892bf182414589a923bc0e3778470220e9217 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling bf29ceb9469fa06cff06dde24da8099fb516acbf on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling fe759cb2ac65ea2264bc32f648611caa108b172d on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling fe759cb2ac65ea2264bc32f648611caa108b172d on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 8ef17ee4d6c6501ddeea93fe57dc39c703aa2d21 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 8ef17ee4d6c6501ddeea93fe57dc39c703aa2d21 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 5bfd49821b03271a0fa2a4cc9f49a44c1ea35e47 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 46aeebedd2cd5b5d5f8b8e4fd3da26392bac0dd3 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 46aeebedd2cd5b5d5f8b8e4fd3da26392bac0dd3 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 814369dfcd7bf7d440cb7eaea9bb4157894f6970 on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling a3cec049e2baf82400c566f578a3df03cfa23d4f on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling a3cec049e2baf82400c566f578a3df03cfa23d4f on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling a3cec049e2baf82400c566f578a3df03cfa23d4f on strarsis:inlineStyles into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling 87f073feb793a93872242ee5554aaf9fa2f6df97 on cravesoft:master into 4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master.\n. \nCoverage remained the same at 89.005% when pulling e136a72b448f100fd0920d58bd6cacfdf67cfce1 on primeiros:patch-1 into 04fa1d5e8364d404b4772552805e3f2610c87b71 on svg:master.\n. ",
    "peteboere": "+1\nI'm always manually removing these.\n. ",
    "nathan-muir": "Created separate pull request as it only addresses the first possible solution; not merging groups in those conditions\n. ",
    "loginx": ":+1:  Running into this issue as well with this plugin. Would be nice to see this merged in.\n. ",
    "isaacs": "Astral plane chars are going to fail because it's calling String.fromCharCode on the parsed int, which only looks at the two right-most bytes.  What you want is for the string to be \"\\ud83d\\udd25\", with the surrogate pair split up.\nI'd accept a patch that properly split up surrogate pairs before calling String.fromCharCode().\nFor example:\n```\n\nfire = String.fromCharCode(0xd83d) + String.fromCharCode(0xdd25)\n////// Github won't let me post this.  But it prints out the actual fire glyph on my terminal.\nfire.length\n2\nfire.charCodeAt(0)\n55357\nfire.charCodeAt(1)\n56613\nmojibake = String.fromCharCode(0x1f525)\n'\uf525'\nmojibake.length\n1\nmojibake.charCodeAt(0)\n62757\nmojibake.charCodeAt(0).toString(16)\n'f525'\n```\n. Oh, whoops, I commented on the wrong place :)  Will repost over there.\n. Fixed by sax 0.6.0.  Thanks to @mathiasbynens for writing a String.fromCodePoint shim. \n. \n",
    "joeyhoer": "Seems as if we both came to the same conclusion, you may want to move your comment over to the other issue (in the sax project) since it's a little more pertinent there. I think the best solution would be to use the String.fromCodePoint method, which will need to be shimmed.\nAnyhow, this seems to be an issue in the XML/SVG parser, that is manifesting in some cases within SVGO.\n. The other issue I raised may or may not be directly related. It was observed when attempting to compress an SVG font file.\n. @littlefyr I do like your point of \"maximum significant digits\", but as @GreLI pointed out, a GCD is very infrequent in most realistic applications.\nI'm having some difficulty understanding the relevance of your comments as it pertains to this particular feature request. While I understand and agree that modifying values is a delicate procedure, and that extra care must be taken to ensure that all values are scaled equally, neither of your examples appear to demonstrate the optimal markup using the suggested transformation, which would be:\n<svg width=\"190px\" height=\"160px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 1900 1600\">\n  <path d=\"M112 112 C 212 212, 412 212, 512 112\" stroke=\"black\" stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M712 112 C 712 212, 1212 212, 1212 112\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M1312 112 C 1212 212, 1812 212, 1712 112\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M112 612 C 212 812, 412 812, 512 612\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M712 612 C 712 812, 1112 812, 1112 612\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M1312 612 C 1212 812, 1812 812, 1712 612\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M112 1112 C 212 1412, 412 1412, 512 1112\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M712 1112 C 712 1412, 1112 1412, 1112 1112\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n  <path d=\"M1312 1112 C 1212 1412, 1812 1412, 1712 1112\" stroke=\"black\"  stroke-width=\"20\" fill=\"transparent\"/>\n</svg>\nThis is 5.5% smaller than the example using the tenths place and 10.7% smaller than the example using the ten thousandths place. When gzipped, thats 1.3% and 4.2% smaller, respectively.\nOf course, there are further optimizations that could be applied to the given example, but I'm hoping the simplicity of your examples will further illustrate the point.\nI think you may be confusing some other optimization (rounding?) with the optimization I am suggesting; perhaps my use of the word \"precision\" in the title is the source of the confusion.\n. ",
    "benedfit": "Closing as haven't hit this issue in a while\n. ",
    "alexeyten": "SVGO converts S0,6.62,0,6.62 to line assuming that first control point coincide with starting point, but it's not true.\n. It's possible to disable only converting curves into lines in order to benefit from other path transformations.\n. ",
    "athanclark": "Here's how I fixed it:\nhttps://github.com/svg/svgo/blob/master/docs/how-it-works/en.md\nYou have to comment-out the plugin causing the issue (convertPathData):\n------------------/usr/local/lib/node_modules/svgo/.svgo.yml--------------------\n...\n- moveElemsAttrsToGroup\n- collapseGroups\n- moveGroupAttrsToElems\n- #convertPathData\n- convertTransform\n- removeEmptyAttrs\n- removeEmptyContainers\n- mergePaths\n- cleanupIDs\n- removeUnusedNS\n- transformsWithOnePath\n- sortAttrs\n. ",
    "LeeGDavis": "I'm seeing this behaviour as well. Removing convertPathData (as @athanclark notes) does resolve this issue for us as well, however at the cost of that optimization obviously, which 90% of the time does a great job.\nBefore\nxml\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#000000;\" d=\"M42.764,42.055V31.241c0.32-3.845,3.204-3.204,3.204-3.204\n        V9.148c0,0-13.457-4.1-13.457,32.906s13.457,32.906,13.457,32.906V56.072c0,0-2.884,0.641-3.204-3.204V42.055z\"/>\n</svg>\nAfter (Defaults - truncated)\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M42.764 42.055v-10.814c.32-3.845 3.204-3.204 3.204-3.204v-18.889s-13.457-4.1-13.457 32.906l13.457 32.906v-18.888s-2.884.641-3.204-3.204v-10.813z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"/></svg>\n. For the case that I was running into disabling straightCurves of convertPathData works around the issue. \n. ",
    "marszall87": "Same issue here, disabling removeUselessStrokeAndFill plugin helped.\n. ",
    "blg002": "Yeah, i guess i had installed node some time ago with homebrew and that was causing issues (according to issues i found on stackoverflow)? For posterities sake: doing a brew uninstall node then using the installer at nodejs.org fixed all my woes. \n. ",
    "ghost": "I think the problem here is that the removeUselessStrokeAndFill plugin is not taking into account the fact that 'stroke' is inherited.\nremoveUselessStrokeAndFill iterates through all elements and removes the stroke if !item.hasAttr('stroke') || item.hasAttr('stroke-opacity', '0') || item.hasAttr('stroke-width', '0') (in other words \"if there isn't a 'stroke' attribute, the stroke opacity is 0, or the stroke width is 0\").  The initial value of 'stroke' is none, so this condition would make sense as long as the inherited 'stroke' value is properly propagated from parents to children or is otherwise considered.\nIn Michael's test case, the stroke on the two inner white circles is inherited from the g#borders element.\nHere is another test case:\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"34\">\n    <g stroke=\"#000\" fill=\"none\">\n        <path d=\"M36 16c0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C6 7.716 12.716 1 21 1c8.284 0 15 6.716 15 15z\" style=\"stroke-width:2\"/>\n        <path d=\"M6 18c8-9 15-9 28 5\" style=\"stroke-width:1.5\"/>\n    </g>\n</svg>\nThe two path elements' 'stroke' attribute value is inherited from the enclosing g element.\nDisabling the removeUselessStrokeAndFill plugin via a --disable=removeUselessStrokeAndFill command-line argument fixes the problem for Michael's and my test cases.\n. Is there a different ticket for fixing the removeUselessStrokeAndFill plugin?\n. Hi,\nI'm having the same issue. I'm using it through gulp svgmin wrapper.\nI've also tried these 2 formats:\n``` javascript\n.pipe(svgmin({\n        plugins: [{\n            cleanupIDs: false\n        }]\n}))\n.pipe(svgmin({\n        plugins: [{\n            cleanupIDs: {\n                remove: false\n            }\n        }]\n}))\n```\nI've also tried to add the full: true line to the options object with no luck.\n. With @6a68  - how do you pass/set the useShortTags config ??. ",
    "Tyriar": "I think svgo is expected to break many images by default, you need to disable certain plugins that are breaking the image. I found mergePaths particularly destructive on my handmade SVGs so I disabled it. Inspecting the optimized file with a text editor or Chrome should give hints as to why it broke.\n. ",
    "pruett": "i'm experiencing similar issues with sketch exported .svg files, sorry if i misunderstand, but what exactly is ok now?\n. i am, i'll open another ticket and provide detailed information and reference this issue. thanks @GreLI \n. ",
    "leonderijke": "This is now merged into the beminfo branch, could you merge it into master too?\n. ",
    "Enome": "@GreLI Thanks for the answer I found out myself so I deleted my comment. In case anybody is wondering it was \"Is it correct to assume circles to get converted to paths?\"\n. @GreLI argh, I meant \"don't get converted to paths\". My svg knowledge is a bit limited but I thought at first this plugin would convert my complex icons into one path. After checking the source code of the plugin I now understand that it's converting each shape into a path to create a smaller svg file. Sorry for the confusion.\nThe reason why I wanted one path is is because the MVC framework I am using makes it cumbersome to insert multiple shapes and paths.\n. ",
    "Enideo": "+1 just had to do this manually myself\n. ",
    "bryanburgers": "Follow up: here's an even more simplified example. It seems to distort if there's an unclosed (no z) curve, and then a path that uses absolute positions.\nClosed curve, absolute positions: correct\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"5\" version=\"1.1\">\n    <path d=\"m 0,0 5,0 0,5 c -5,0 -5,0 -5,-5 z M 10,0 15,0 15,5 10,5 z\"/>\n</svg>\nUnclosed curve, absolute positions: FAIL\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"5\" version=\"1.1\">\n    <path d=\"m 0,0 5,0 0,5 c -5,0 -5,0 -5,-5 M 10,0 15,0 15,5 10,5 z\"/>\n</svg>\nUnclosed curve, relative positions: correct\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"5\" version=\"1.1\">\n    <path d=\"m 0,0 5,0 0,5 c -5,0 -5,0 -5,-5 m 10,0 5,0 0,5 -5,0 z\"/>\n</svg>\n. ",
    "azproduction": "Some SVG elements are inaccessible or decorative. This feature can be optional.\n. ",
    "ericdfields": "+1 just got a broken file.\n. ",
    "tomByrer": "I've noticed some other SVG files I d/l from Wikipedia are broken after the default SVGO conversion.  IIRC I got a more usable result after turning off some of the optimizations.\n. Improving on great idea: shorter, not too slower due to removing divide, only semi-tested\n``` JavaScript\nfunction percentValueToHex(value) {\n  var hex = Math.round(value * 2.55).toString(16);\n  return (hex.length === 2) ? hex : (hex.length === 1) ? '0' + hex : '00';\n}\nfunction fixRGBColors(svg) {\n  return svg.replace(\n    /rgb(([\\d.]+)%,([\\d.]+)%,([\\d.]+)%)/g,\n    function(_, red, green, blue) {\n      var rrggbb = percentValueToHex(red) + percentValueToHex(green) + percentValueToHex(blue);  // 6 char Hex\n      if (rrggbb[0] == rrggbb[1] && rrggbb[2] == rrggbb[3] && rrggbb[4] == rrggbb[5])  //ES5+ only; won't work in IE8 if Browserfied\n        return '#' + rrggbb[0] + rrggbb[2] + rrggbb[4];  // 3 char Hex\n      else\n        return '#' + rrggbb;\n    }\n  );\n}\n```\n. > I hope it can be implemented directly in the SVGO optimizations.\nNeeds editing to conform to existing function, or else I would have sent in PR already. :)\n. > It'd be great if SVGO could detect this automatically\nMaybe by default only collapsing groups with a single child node?  That way, only the <g> tags that are actually grouping remain.\n. I used this test HTML & took screenshots before & after.  I assume that if I made the icons larger, they'll become more pronounced.\n. ",
    "lipis": "I'll update with the working one..\n. @GreLI The original repo was deleted but the actual flags are in one of my repos now.. I updated the links\n. So this is fixed?! Looking forward to test it... did you make a new release?!\n. For most of the flags it worked perfectly.. for now I just found this:\nHere is the original:\nhttps://dl.dropboxusercontent.com/u/15234/va-orig.svg\nand after pretty optimising it became like this:\nhttps://dl.dropboxusercontent.com/u/15234/va.svg\n. Also this one is breaking:\nhttps://github.com/lipis/flag-icon-css/blob/master/flags/4x3/py.svg\n. @GreLi sure man... and I really appreciate the responses.. just trying to help :) most of them are perfect... finally they will be optimised...!!!\n. @GreLI Yes.. but it used to work without specifying the output folder.. as it works with a single file and it overrides if you don't specify the output..\n. @nathanuphoff tabs were invented to save physical space.. something that is not applicable anymore.. tabs should die :)\n. http://blog.codinghorror.com/death-to-the-space-infidels/\n. @GreLI What's your stance on that one? Would it make sense if not by default, being able to pass an argument for it?\n. @jaydenseric Not sure why would SVGO even think about using or respecting .editorconfig.. :confused: .editorconfig is for editor's configurations :) open the .svg in your editor and it will be respected..\n. I know exactly what editorconfig is.. but last time I checked SVGO is not editor.. it's a command line tool..\n. :+1: \n. Thank you for that! https://github.com/lipis/flag-icon-css/pull/220\n. Not sure how to resolve this test: https://travis-ci.org/svg/svgo/jobs/93412457\n. I thought about it as an option.. but then again it doesn't make much sense :) It's still pretty and smaller.. Let's sleep on and see tomorrow.. :night_with_stars: \n. I'm not sure how to add it as an option (not much time for it), but my opinion is that there is no much need for it to add the extra complexity.. having said that if anyone want's to contribute.. please do so! I just want to be able to use the 2 spaces :)\n. If we are about to merge this one though... let me know how can I fix the last test..\n. shall we merge that one?\n. Can someone implement this then if anyone with spare time? \n. :+1:\n. Awesome! \ud83d\udcaf \n. Yes that will work only in Unix systems..and if I want to use it inside the package.json as a script it won't fly on every platform.. the -f should be fixes to support all.\nOr maybe even something like that\n\nsvgo /path/to/svg/**/*.svg would parse all the files recursively inside that match the *.svg extension.\nsvgo /path/to/svg/*.svg only in the root of that folder without going deeper and only the *.svg files.\n. We all know the workarounds guys... let's just fix it! The question was mostly on how to do it without workarounds and if not possible.. it's a feature request.. It is realted to svgo because svgo supports -f. Thanks a lot @caub for the advice man.. I didn't know that I was aloud to make my own PRs... Thanks again man..! I'll keep that in mind... \n. \n",
    "flekschas": "Some minor issues are still present when optimizing flags py.svg and va.svg.\n. ",
    "espadrine": "@deepsweet That's great news! (The above test case is on the latest v0.4.3.)\n. ",
    "staabm": "Maybe it would nevertheless make sense to add a unit test for the above request\n. Thx for the fast fix!. any ETA on releasing a new version including this fix?. friendly ping... any chance to get a new release?. ",
    "BlakePetersen": "I'd also be interested in understanding how to set the floatPrecision. Thanks!\nUpdate: There should be a colon after cleanupNumericValues.\n. @GreLI Thanks so much for the quick response! After taking a look at the docs, things made much more sense and I was able to get everything working correctly. \nTo your point that several plugins use this option, my issue was actually with the convertPathData plugin, so good call on keeping an eye out for that.\n. ",
    "hayatbiralem": "Thanks @GreLI, you saved my time. List of all related plugins in my config here:\njs\n{\n  plugins: [\n    {\n      cleanupNumericValues: {\n        floatPrecision: 2\n      }\n    },\n    {\n      convertPathData: {\n        floatPrecision: 2\n      }\n    },\n    {\n      transformsWithOnePath: {\n        floatPrecision: 2\n      }\n    },\n    {\n      convertTransform: {\n        floatPrecision: 2\n      }\n    },\n    {\n      cleanupListOfValues: {\n        floatPrecision: 2\n      }\n    }\n  ]\n}\n. Thanks again! Somehow I missed it but also I have trouble with it :(\nI try to use global precision param as 2 with gulp-svgmin and gulp-svgo but both uses with default precision 3 in process. My config after your advice is here:\n{\n    precision: 2\n}\nWhat am I doing wrong?\n. Actually default config file has no global precision param, that's interesting.\n. It's alive! Thank you very much for your time :)\n. ",
    "axe312ger": "Can you please add this to the readme? Took me a while to find it \ud83d\udc0c \n. ",
    "jaydenseric": "+1 I don't know what I'm doing wrong...\n. It would be really cool if SVGO would either accept an indentation CLI option or default to respect the .editorconfig file, if present.\n. .editorconfig is a centralized place to set encoding and formatting for all text files, so that you don't have to manually configure all your tools separately for consistency. SVGO is editing the SVG files, it is an editor.\nOften, I will open the --pretty optimized files in Atom to make manual edits. Problem is, Atom conveniently respects my established SVG formatting config but SVGO doesn't and the files end up inconsistent.\nAnother benefit to respecting the config, other members from the team can jump in and start optimizing without having to ask anyone about the formatting. I don't trust everyone to laboriously follow up SVGO optimizations with manual reformatting to conform to our standards.\n. +1 we work with 2 spaces, not 4.\n. @GreLI #242 is about changing the hardcoded indentation value (to 2 spaces from 4), not making indentation configurable as with this issue/suggestion.\nUltimately I would like to see configurable --pretty indentation via a CLI argument, defaulting to .editorconfig and finally falling back to 2 spaces. See https://github.com/svg/svgo/issues/507.\n. ",
    "nicholashead": "Doesn't work for me, either, in Windows:\nsvgo --folder src\\content\\svg\nIt then lists the full folder path, then nothing.\n. ",
    "grayghostvisuals": "This option as of 10/17 using v0.4.5 on Mac OS X 10.9.5 is broken using all the following commands above.\n. @GreLI \nMind showing me what this command looks like?\n. @GreLI You get all the beers good sir! :beers:\n. ",
    "walling": "@tomByrer, thanks for the improvements. I'll use it.\nI hope it can be implemented directly in the SVGO optimizations.\n. ",
    "icek": "Same for <style> element and for single quote ' which is encoded as &apos;\n. ",
    "MadLittleMods": ":+1: I have the same problem as @icek with single quote mangling in <style> :\n<style>\n    .foo {\n        fill: url('#som-svg-gradient');\n    }\n</style>\n. ",
    "shaneparsons": "+1 this is happening with quotes in a tspan as well.\ne.g.\ninput\n<tspan id=\"height\">0'0\"</tspan>\noutput\n<tspan id=\"height\">0&amp;apos;0&amp;quot;</tspan>\n. Any ideas?\n. Yeaa it took some reworking but I ended up just swapping out the php with classes and using php on the other end\n. It behaves the same with the \"proper\" SVG 1.1 method as well, i.e. xml:space='preserve'.\n. ",
    "bitclaw": "Same issue here , have an SVG with about 6,878 lines and it just quits without any errors. \n . Please change png extension back to svg. Github doesn't allow you yo upload a file with svg extension :+1: \n. ",
    "huantingchen": "Hi @GreLI \nI'm also struggling with large SVG files. Previously I used 0.5.0 which was able to handle my large SVG files (30-40MB) in 30-50 seconds. However, later versions (since 0.5.1) it would be just stuck there. It took too long to wait so I didn't see any error. On the other hand, the release notes of 0.5.1 is missing. Would you please point out what have been changed since 0.5.0?\n. @GreLI Thanks for pointing it out. Just tried and it worked well.\n. ",
    "bennyschudel": "hey @deepsweet \nis it possible to merge that into the next release?\notherwise the removeTitle plugin is not working properly\n. I'll do a new one for this from another branch\n. I don't know how to accomplish this. Help from anyone? \n. ",
    "nelsonpecora": "I would actually argue against removing titles by default, for accessibility reasons.\n. Ahhh, roger. In that case, :+1: \n. :+1: this looks neat, and would help a lot with styling embedded svgs.\n. ",
    "AluisioASG": "@yoshokatana: It's already disabled by default.  But without this, one can't even enable it manually (see #215).\n. ",
    "pgherveou": "@deepsweet could you push a new version of svgo on npm that integrates these changes?\n. ",
    "rasmusfl0e": "@deepsweet Bump. I would appreciate this getting on npm greatly too :) \n. FWIW it's the collapseGroups plugin that removes the <g> elements: https://github.com/svg/svgo/blob/master/plugins/collapseGroups.js\n. I'm running into this problem too.\nIt looks like the attributes from group elements only get transferred to children that are path elements :(\nI would've expected children that are group elements to get the attributes too.\n. ",
    "brunowego": "Get this same issue.\n. ",
    "shinnn": "Hi, @GreLI. I updated the comment to explain this PR in detail.\n. I'm also disagree about such a license violation. Why doesn't this PR use the npm package?\n. LGTM\n. ",
    "tshinnic": "I must have applied your change wrong.  Was glad to see somebody already saw a problem, but I'll look at this more closely later, because it didn't fix my problem output.\n```\ninput\n    \noutput from just \"  - convertPathData: true\" enabled\n<path d=\"M200 400 m-200 0   h400  m-200-400   -200 0  h400 m-200 800   -200 0  h400 m-200 400  -200 0   h400 m-200-1000   -50 0  a50 50 0 0 1 100 0 50 50 0 0 1-100 0m50 400-50 0a50 50 0 0 1 100 0 50 50 0 0 1-100 0m50 400-50 0a50 50 0 0 1 100 0 50 50 0 0 1-100 0\" stroke=\"#000\" stroke-width=\"25\" fill=\"none\"/>\n                    okay     fail ^ from here ^^^^^^                                           ^^^^^^                    ^^^^^^\n\n```\nThe  original 'M' then 'm' then implied 'l'  \n\nM200,0 m -200,0 400,0\n\nis converted to  'm' then implied 'l' then 'h':\n\nm-200-400 -200 0 h400\n\nThe 'h' is perfectly correct.  The 'M' then 'm' should have been collapsed into just one 'm' command.  Is that possible?  Certainly the added implied 'l' makes interesting pictures!  :-)\nI've got a process that outputs a lot of absolute moves, then relative adjustments, and then real drawing commands.  svgo makes 'oops' out of that.\nBTW: svgo compresses spaces in arc commands, which is fine for all browsers, but Inkscape rejects path commands like this: \"a50 50 0 0 1 100 0   50 50 0 0 1-100 0\"   It liked everything up until the \"1-100\". Changed to \"1 -100\" that was accepted.  Obviously Inkscape thinks the boolean sweep flag isn't a number that can have another number butt up against it.  I'm having such a good time...  :-/\n. Sorry for the confusion, my problem was completely different.  See above reference issue.\n. 2 BTW's\nI had tested that enabling/disabling plugin convertPartData toggled the problem, and then more specifically that param collapseRepeated toggled the problem, e.g. \n\n- convertPathData:\n        collapseRepeated: false\n\nAnd I'm wondering why \"m50 400m-50 0\" isn't collapsed into one move command?  Should become \"m0 400\", yes?\n. ",
    "bradcerasani": "Did you ever find a way to reconcile this? Running into the same issue\n. How's this?\n. Not sure if I did that rebase correctly - I appreciate your patience and assistance.\n. ",
    "VinSpee": "I have the same issue. Seems kind of silly.\n. ",
    "poying": "+1\n. ",
    "apfelbox": "There are two errors:\nutil.puts: Use console.log instead\nutil.error: Use console.error instead\nThis are thrown on every invocation, which gets quite annoying:\n```\n\u25b6 find . -name \"*.svg\" -exec svgo {} \\;\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 70 ms!\nutil.puts: Use console.log instead\n1.338 KiB - 0.7% = 1.329 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 49 ms!\nutil.puts: Use console.log instead\n1.284 KiB - 0% = 1.284 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 57 ms!\nutil.puts: Use console.log instead\n1.601 KiB - 0% = 1.601 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 52 ms!\nutil.puts: Use console.log instead\n1.012 KiB - 0% = 1.012 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 61 ms!\nutil.puts: Use console.log instead\n0.803 KiB - 40.3% = 0.479 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 54 ms!\nutil.puts: Use console.log instead\n1.135 KiB - 0% = 1.135 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 57 ms!\nutil.puts: Use console.log instead\n2.404 KiB - 1.3% = 2.372 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 56 ms!\nutil.puts: Use console.log instead\n1.724 KiB - 0% = 1.724 KiB\nutil.puts: Use console.log instead\nutil.puts: Use console.log instead\nDone in 54 ms!\nutil.puts: Use console.log instead\n1.248 KiB - 0% = 1.248 KiB\n```\n. ",
    "baamenabar": "+1 on this pull request.\nI was about to code my own, but this was way better. It worked wonderfully. It would be nice to have in the main repo.\n. ",
    "nikoskip": "+1\nVery useful.\n. ",
    "silenceisgolden": "+1\n. Only issue with this is that the call to grab the width and height in js2svg.js gets undefined because the width and height are missing. It would be great to have a way to preserve that.\n. ",
    "GeoffreyBooth": "+1\n. Is there a way to include this plugin when running svgo, without saving it directly into /usr/local/lib/node_modules/svgo/plugins?\n. ",
    "albell": "@bennyschudel Nice, thanks. But I think there needs to be a check so that nested svgs do not lose their dimension attributes.\nE.g.\n<svg width=\"#\" height=\"#\" viewBox=\"# # # #\"> // remove width and height here to make responsive\n    <path d=\"#####\" />\n    <svg x=\"25%\" y=\"25%\" width=\"50%\" height=\"50%\"> // don't remove width and height here\n    </svg>\n</svg>\nNested svg is well-provided for in the spec and sometimes essential:\nhttp://www.w3.org/TR/SVG/coords.html#EstablishingANewViewport\n@GreLI how to check that an <svg> is rootmost within the syntax tree?\nLastly, I think we should consider renaming this to something like \"responsive\", to make it clear that we are not removing all dimensions. I would :heart: to see this land.\n. Ok, are there other situations where you only want to operate on rootmost <svg>? If so, +1 to adding a isRootmost() or whatever method to the API. Otherwise I can submit a PR along the lines above.\n. Thanks, I didn't that. I will comment there.\n. Right, but the YML doesn't tell what each plugin actually does. I like your formatting suggestion. That's what I had in mind. The single closing bracket as a link is pretty rough stuff. People want to be able to scan the docs quickly.\n. Well, there's no debate about gzipping. Compressors get more string matches when case is consistent. Some data:\nhttp://www.websiteoptimization.com/speed/tweak/lowercase/\nAnd in terms of the overall web ecosystem the bias seems to be strongly towards lower case. If you disagree or have conflicting data on this I'd love to see it. I can't find a single CSS styleguide on the web that recommends upper case anything.\n. ",
    "stravid": "What's the status of this? If it is not going to get merged I have a question: Is it possible to use a custom plugin from the local file system while using svgo via the command line?\n. @GreLI Is it possible to use custom plugins that are not in svgo included?\nI need to run very specific plugins and wonder how I can accomplish this.\n. ",
    "rufus2021": "From your link it looks like you have to add custom plugins directly to the plugins directory and then edit the default config file. Is this the only way, or are you currently able to extend plugins without altering the original repo? It seems like that would be the best way to do it.\n. ",
    "dhoulb": "Already done in latest version.\nDuplicate of https://github.com/svg/svgo/commit/36caca2fbe11997feed51975760747e86d09905e\n. Latest version strips xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\" namespace and any attrs starting with sketch:type=\"\".\n. ",
    "rpominov": "Sorry, didn't check that I use latest version. Thank you for clarification.\n. I am having the same issue. SVGO removes fill=\"white\" from <mask> which causing result image to be blank in a browser.\nQuick fix is to disable the removeUnknownsAndDefaults plugin.\n. Just wonder, why it's asynchronous in the first place? :smile: \n. ",
    "saschamt": ":+1:\nA fix would be awesome.\n. ",
    "NeXTs": "@DanielMazurkiewicz @GreLI \nHow to specify prefix using bash console?\n. ",
    "DanielMazurkiewicz": "@NeXTs \nCheck if this works:\n--config {\"plugins\":[{\"cleanupIDs\":{\"remove\":true,\"minify\":true,\"prefix\":\"yourPrefix_\"}}]}\n. ",
    "pbhj": "Same for me, I used Inkscape to download (using the internal OCL import) this http://openclipart.org/download/people/Pippi2011/Superhero-girl-in-purple.svg file. I ungrouped it and changed the colour on the leotard/bodysuit part. Saved and performed \"svgo Superhero-girl-in-purple.svg\". On opening the file several elements are now misplaced.\nActually running svgo without altering the original image file leads to some of the image elements being deleted.\n. ",
    "jessekeyes": "Dug around and it looks like this can be solved via CSS like so:\nsvg * {\n    display:block;\n  }\nor you can be specific with \"path\". Basically, this is aping HTML5 explicit declarations.\n. ",
    "ArmorDarks": "Just for those who will land in this issue from Google, another way to fix it posted here: https://github.com/Financial-Times/ft-origami/issues/66#issuecomment-323397759. Just for a note, that question seems to be relative to https://github.com/svg/svgo/issues/548\n. That would be nice addition :+1: \nI agree it's indeed seems to be a bit out of scope for svgo, however, from another perspective, it can be named as kind of optimization too.\n. I see some efforts have been made here https://github.com/svg/svgo/issues/580, though, they didn't succeed.\n. <irony>10 out of 10 solution</irony>\n. @yvele Thanks for additional solution. Unfortunately, it implies additional dependency or a hack, which we'd like to avoid.\nI think the real issue here is that SVGO does not use promises and instead relies on callback. Otherwise it would be very easy to do with async function. But as right of now, we're forced to use deascyn-like hacks, or use some means to promisify SVGO, which, I'd say, isn't ok on 2017.\nThough, I don't want to insult developers. SVGO is great library and it saved us like a ton of kbs and time.. Yeap, I know.. ",
    "aristov": "It seems that a problem in the convertPathData plugin. Images looks good, if it's disabled.\n. ",
    "shakyShane": "+1\n. Can you say when this will be available on NPM?\n. ",
    "chrisrowe": "Any movement on this?\n. ",
    "Eworm": ":+1: \n. Yes please! I can't use gulp-svgmin right now because it can't use the latest version of the collections plugin. :+1: \n. ",
    "mariendries": "My grunt is still returning errors regarding this issue..\nAny news on this?\n. ",
    "btpoe": "I can confirm this is still an issue.\n. Makes sense. Thanks for the heads up.\n. ",
    "moretti": "I have the same problem. I think it's caused by removeHiddenElems.\nTry to run svgo with the plugin disabled:\n> svgo file.svg --disable=removeHiddenElems\n. Yeah, from removeHiddenElems:\n\nRemove hidden elements with disabled rendering:\n- circle with zero radius\n\nIt doesn't understand that the inner animation will eventually expand the radius :-)\n. ",
    "jimmynotjim": "I have a similar animated svg and I could not get svgo to accept the removeHiddenElems plugin parameter when run through gulp-imagemin, but I could when running svgo directly in the CLI.\nLuckily I found a work around, just set the r attrs to 1. The transform still takes over and because of the begin attr it doesn't even matter that the radii are initially set. Hope that saves anyone else having the same issue.\n. ",
    "Delapouite": "Yes, it's the right syntax.\nBut there's a bug, so to make it work you need to apply this PR https://github.com/svg/svgo/pull/179\nwhich basically add removeTitle to the .svgo.yml plugins list.\n. Thanks.\nThis PR is a no-brainer to merge.. ",
    "a-x-": "why the removeTitle is disabled by default?\n. Optimized svg to stdout instead of modifying in place, may be?\nLike inverted sed -i option.\n. Cool, thank you!\nsvgo -o - path/to/file.svg\n. For @waldyrious:\nsh\ndiff -y file.svg  <(svgo -o - file.svg)\n. there isn't happy in the world :) \u0435\u0441\u0442\u044c \u0435\u0449\u0451 \u043c\u044b\u0441\u043b\u044c\njust run special gemini cases on website after icons optimization with high sensitivity settings (targets on icons, better on only immediately oprimized icons)\nIt 'll be check in real world \nLet's automate this (svgo running then run gemini on automaticaly generated icon test cases)\n. it's my mistake: pt unit\n. ",
    "briangonzalez": "Looks like I wanted to disable the plugin removeUnknownsAndDefaults\n. ",
    "jameshoward": "Looks like v0.5.0 actually disables removeUselessStrokeAndFill but this issue relates to removeUnknownsAndDefaults.\n. ",
    "tobiastom": "Any idea when there might be a new released version with this fix?\n. Thanks for the info. Looking forward to the update.\n. Seems to work very well now. Thank you.\n. Great, thank you for the info. I'll close this one.\n. ",
    "roadhump": "Hi, I made PR #211 generally to have Sketch in mind and I suppose my solution is more universal :). \njs\n    var plugins = [{\n        removeEditorsNSData: {\n            additionalNamespaces: ['http://www.bohemiancoding.com/sketch/ns']\n        }\n    }];\n. ",
    "sindresorhus": "@argv-minus-one please open a ticket on Firefox and Chrome and link them back here, so it can be fixed in future.\n. The merge conflict needs to be fixed.\n. :+1: I have to manually run it multiple times because it always manages to optimize more even with --multipass.\n. :+1: In addition, it makes the readmes neater, as you don't have to fit both CLI and API docs into one readme.\n. ",
    "freezy": "Came across this as well. The only way out I see is setting config.full to true so it doesn't load the yaml file. Did you finally solve it?\n. ",
    "jirutka": "Parsing of config file is evidently broken, it doesn\u2019t work even with the default config:\n``` sh\nsvgo --config=.svgo.yml -i test.svg -o test_optimized.svg\n.svgo.yml:1\n(function (exports, require, module, __filename, __dirname) { # replace defaul\nDone in 144 ms!\n40.646 KiB - 52.8% = 19.179 KiB\n```\nWhen I remove all comments, then it doesn\u2019t print any error, but configuration is still ignored.\n. Nope, it uses the default config and ignores the one specified with --config option (I\u2019ve removed some plugins from it).\n. ",
    "poezn": "I'm realizing that my use case is slightly different from the one svgo was written for. Beyond just cleaning up  SVG code, for which svgo is great, I need to prepare SVG for further manipulation with libraries like D3. \nClosed this pull request for now. I'm happy to contribute back all the plugins, but I don't want to flood the plugin list for now.\nAs a side note, most of my plugins have parameters. Testing is not really possible using custom parameters under this setup. It looks like https://github.com/svg/svgo/pull/197 addresses this, so once this is merged, I might open this pull request again.\n. ",
    "SebCorbin": "Just encountered this, how would you turn off strict mode?\n. ",
    "chulkilee": "Change this line https://github.com/svg/svgo/blob/v0.4.4/lib/svgo/svg2js.js#L7\njavascript\nvar config = {\n    strict: true,\n    trim: true,\n    normalize: true,\n    lowercase: true,\n    xmlns: true,\n    position: false\n};\n. ",
    "christophersbarrett": "Before optimization:\n<svg version=1.1 .. >\n<font horiz-adv-x=\"2048\">\n<font-face font-family=\"ArialMT\" units-per-em=\"2048\" underline-position=\"-217\" underline-thickness=\"150\"/>\n<missing-glyph horiz-adv-x=\"1536\" d=\"M256,0l0,1280l1024,0l0,-1280M288,32l960,0l0,1216l-960,0z\"/>\n<glyph unicode=\"A\" horiz-adv-x=\"1366\" d=\"M-3,0l563,1466l209,0l600,-1466l-221,0l-171,444l-613,0l-161,-444M420,602l497,0l-153,406C717,1131 683,1233 660,1312C641,1218 615,1125 581,1032z\"/>\n...\n</font>\n</svg>\nAfter Optimization:\n```\n\n\n\n\n...\n\n\n```\nWhen this optimized svg is then added into the DOM in chrome, it renders the closing  tag before all the  elements.\n. I've found that by disabling the removeEmptyContainers plugin, this stops happening. \n. ",
    "mako-taco": "Fixes #174 \n. ",
    "mistakster": "Hello.\nProcessed file is correct. SVGO doesn\u2019t remove <!DOCTYPE> if there are any ENTITY declarations exist.\n. If you are 100% sure that you don\u2019t need these entities, you may create additional Grunt task to cut them off using any \u201ctext replace\u201d plugin.\nI don\u2019t know any straight way to extend existing SVGO plugin. However, you are able to add your own plugin into the processing queue when creating new instance of the SVGO module.\nSomething like this:\n``` js\nvar svgo = new SVGO({\n  full: true,\n  plugins: [\n    'removeXMLProcInst',\n    'removeComments',\n    'removeMetadata',\n    'removeEditorsNSData'\n  ]\n});\n// remove DOCTYPE declaration completely\nsvgo.config.plugins.push([{\n  type: 'perItem',\n  active: true,\n  fn: function (item) {\n    if (item.doctype) {\n      return false;\n    }\n  }\n}]);\n```\nPlease, bear in mind that, it\u2019s just a sample script.\n. ",
    "enapupe": "So, should I extend the plugin to do it? I don't like these extra bytes.\n. Thanks for that. Thinking a bit more about that bytes, since they are inlined in a css file and served with compression (gzip), I think these bytes won't make a difference..\nI'm gonna make a test and if necessary apply the replace.\nMany thanks for your attention.\n. ",
    "epipping": "I didn't realise that github converts my svg files to png. For now. I've put the original and the optimised version here: http://dev.exherbo.org/~pipping/svgo/\n. ",
    "olragon": "Keep ID attribute by declare option cleanupIDs: false\n. ",
    "kevinSuttle": "This doesn't work in the svgo cli. \nsvgo --cleanupids=false deploy/btn.svg\nIs there an equivalent in svgo?\n. Nice!\n. So, how is it used? I can't find the docs. Sorry.\nEdit:\n- convertColors:\n      currentColor: true. Don't you need to have a fill present for it to convert?. I think it might be the order in which you have them. Try swapping them? . Was wondering about the same thing. \n. I wonder if you can escape the : or maybe process them as template literals with backticks.\n. ",
    "edouard-lopez": "I'm looking for a similar plugin as I'm currently using Inkscape to manipulate SVG files and it really slooow.\n. @Melaga might have a look at text-to-svg\n. ",
    "renanlecaro": "Inkscape has an --export-text-to-path option, it saved the day for me (it's quite fast) \nhttps://inkscape.org/sk/doc/inkscape-man.html. ",
    "kud": "My designer ain't happy at all because lots of their svg don't work with svgo. He tried Sketch and Illustrator.\nDo you have any idea?\n. It seems to be fill=\"none\" which breaks the task. I removed it in my svg and it works like a charm.\n. ",
    "silverwind": "Nice :+1: \n. Damn. Well I hope you get this fixed soon :)\n. Awesome, thanks!\n. ",
    "diurnalist": ":+1: \nThis seems to be a 0.4.5 issue, and related to both utilizeAbsolute and floatPrecision options in the convertPathData plugin. Switching those options to false is the only way I've found to fix my problem SVGs.\n. ",
    "jelbourn": "Tried the tool out this morning and also found several inputs were messed up after optimization. \nInput:\n\nOutput:\n\n. ",
    "sscotth": "Noticed a failed optimization today on my Creative Commons Slim svg. Downgrading to 0.4.2 fixed the problem, 0.4.3 breaks.\n\n. ",
    "PatrickNausha": "I can repro this as well in 0.4.5. I used --disable=cleanupIDs when optimizing. Below is the troublesome group in the original and optimized SVGs.\nWhen I inspect the paths in the optimized file in Chrome, their bounding boxes look correct, but they are invisible.\nOriginal\n```\n\n\n\nGod gives Moses intructions for worship.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1226_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4445.2\" y1=\"152.1\" x2=\"4425.2\" y2=\"141.9\"></line>\n                <pattern id=\"SVGID_1227_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1227_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4445.6\" y1=\"152.3\" x2=\"4445.9\" y2=\"160.4\"></line>\n                <pattern id=\"SVGID_1228_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1228_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4446.6\" y1=\"151.7\" x2=\"4447.1\" y2=\"159.5\"></line>\n                <pattern id=\"SVGID_1229_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1229_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4448.4\" y1=\"150.9\" x2=\"4449\" y2=\"158.7\"></line>\n                <pattern id=\"SVGID_1230_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1230_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4449.4\" y1=\"150.4\" x2=\"4449.9\" y2=\"158.1\"></line>\n                <pattern id=\"SVGID_1231_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1231_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4450.8\" y1=\"149.7\" x2=\"4451.4\" y2=\"157.5\"></line>\n                <pattern id=\"SVGID_1232_\" xlink:href=\"#New_Pattern_Swatch_4\" patternTransform=\"matrix(1 0 0 1 57.3545 -1.962)\">\n                </pattern>\n\n                    <line fill=\"none\" stroke=\"url(#SVGID_1232_)\" stroke-width=\"0.2799\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"4451.9\" y1=\"149.2\" x2=\"4452.4\" y2=\"156.9\"></line>\n            </g>\n        </g>\n\n```\nOptimized (whitespace added)\n<g id=\"god-gives-moses-intructions-for-worship\" class=\"selectable-hotspot\" style=\"font-weight: 600;\">\n    <circle fill=\"#E0E0E0\" cx=\"4459.5\" cy=\"168.3\" r=\"38.1\"/>\n    <text transform=\"translate(4404.347 74.606)\">\n        <tspan x=\"0\" y=\"0\" fill=\"#666\" font-family=\"Source Sans Pro\" font-size=\"18.268\">God gives Moses</tspan>\n        <tspan x=\"-24.7\" y=\"17.9\" fill=\"#666\" font-family=\"Source Sans Pro\" font-size=\"18.268\">intructions for worship.</tspan>\n    </text>\n    <path stroke=\"#231F20\" stroke-width=\".203\" stroke-dasharray=\"0.8119,0.8119\" fill=\"none\" d=\"M4401.3 234.7v-126h66.7V102\"/>\n    <path stroke=\"url(#SVGID_1163_)\" stroke-width=\".56\" d=\"M4507.1 164.2c-22.4-8.8-44.8-17.5-67.2-26.3.3 1.2.2 2.5.8 3.6.7 1.2 2.7 1.6 4 2.2 4 1.7 8.1 3.4 12.1 5.1 7.9 3.4 15.9 6.7 23.8 10.1 5.4 2.3 10.8 4.5 16 6.9 1.8.8 3.6 1.7 5.4 2.4 2.6 1 3.6-2.2 5.1-4-22.5-8.8 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1164_)\" stroke-width=\".56\" d=\"M4482.8 192.2c8-9.2 16.1-18.4 24.1-27.7-.6 3-1 5.2-3.1 7.5-2.5 2.9-5.1 5.9-7.6 8.8-5 5.8-9.9 11.5-14.9 17.3.6-1.9 1-3.9 1.5-5.9 8-9.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1165_)\" stroke-width=\".56\" d=\"M4424.5 144l-13.9 5.4c1.3.8 3.2 2.7 4.7 2.8 1.3.2 2.6-.7 3.8-1.1 1.1-.3 2.5-.3 3.3-1.2 1.3-1.4 1.6-4.3 2.1-5.9-4.6 1.8 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1166_)\" stroke-width=\".56\" d=\"M4439.6 137.8c-1.7.5-3.5 1-5.2 1.5 2 .9 4 2.5 6.2 2.6-.3-1.4-.7-2.7-1-4.1-1.7.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1167_)\" stroke-width=\".56\" d=\"M4410.6 149.4c.3 1.1.3 2.2.8 3.2.6 1.4 2.5 2.2 3.7 2.9 3 1.9 5.9 3.8 8.9 5.7 6.5 4.2 13 8.3 19.4 12.5 12.7 8.1 25.3 16.3 38 24.4.4-1.8 1.4-3.7 1.3-5.5-.1-1.5-6.7-4.4-8.1-5.2-6.9-4.1-13.9-8.2-20.8-12.3-14.4-8.6-28.8-17.2-43.2-25.7.4 1.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1168_)\" stroke-width=\".84\" stroke-linejoin=\"round\" d=\"M4432.9 138.5c-2.2.8-4.6 1.2-6.6 2.5-2.3 1.5-3.3 6.1-3.7 8.7-.2 1.2 7.2 4.3 8.3 4.9l11.6 6.3c.9-2.8 1.4-5.9 3-8.4 1.2-1.9 5.9-3.2 7.9-4.1 0 2.9.8 2.7 3.7 3.7-1-1.3-1.7-2.9-3-4-1.9-1.5-4.9-2.3-7.1-3.2-4.7-2.2-9.4-4.3-14.1-6.4-2.3.9 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1169_)\" stroke-width=\".56\" d=\"M4443 158.9c1 .5 2.3 1.9 3.5 1.2 2-1.1 3.9-2.2 5.9-3.3 2.3-1.3 1.1-6.2 1-8.5-2.5 1.1-6 2.1-7.9 4.1-1.6 1.7-1.8 4.3-2.5 6.5 1.1.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1170_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4448 166.5c.1.3-.1.4.2.7l.3-.3c-.2-.2-.4-.3-.5-.4.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1171_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4450.3 167.8c0 .3.1.6.3.8.2-.2.3-.5.3-.9-.2.1-.4.2-.6.1.1.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1172_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4451.6 167.3c.2.7.4.4.4-.2-.1 0-.2.1-.4.2.3.7 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1173_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4447.9 165.7c1.8-1 2.4-.4 4.1.6-1.7 1.2-2.3.4-4.1-.6.6-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1174_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4448 165.7c.8.5 2.9 1.1 2.7 2.3-.8-.4-3.1-1-2.7-2.3.8.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1175_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4450.6 167.3c.5-.3 1-.6 1.4-.9.4 1-.8 1.3-1.4 1.7v-.8c.5-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1176_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4455.2 170.5c.1.3-.1.4.2.7l.3-.3c-.2-.1-.4-.3-.5-.4.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1177_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4457.5 171.9c0 .3.1.6.3.8.2-.2.3-.5.3-.9-.2.1-.4.1-.6.1.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1178_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4458.8 171.3c.2.7.4.4.4-.2-.1.1-.2.2-.4.2.2.8 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1179_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4455.1 169.8c1.8-1 2.4-.4 4.1.6-1.7 1.2-2.3.4-4.1-.6.6-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1180_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4455.2 169.8c.8.5 2.9 1.1 2.7 2.3-.9-.5-3.1-1-2.7-2.3.8.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1181_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4457.8 171.3c.5-.3 1-.6 1.4-.9.4 1-.8 1.3-1.4 1.7v-.8c.5-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1182_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4462.3 174.6c.1.3-.1.4.2.7l.3-.3c-.1-.2-.3-.3-.5-.4.2.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1183_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4464.7 175.9c0 .3.1.6.3.8.2-.2.3-.5.3-.9-.2.2-.4.2-.6.1.1.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1184_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4466 175.4c.2.7.4.4.4-.2-.1.1-.3.1-.4.2.2.7 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1185_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4462.3 173.8c1.8-1 2.4-.4 4.1.6-1.7 1.2-2.3.5-4.1-.6.6-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1186_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4462.3 173.8c.8.5 2.9 1.1 2.7 2.3-.8-.4-3-.9-2.7-2.3.9.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1187_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4465 175.4c.5-.3 1-.6 1.4-.9.4 1-.8 1.3-1.4 1.7v-.8c.5-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1188_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4473.3 180.4c.1.3-.1.4.2.7l.3-.3c-.2-.1-.4-.3-.5-.4.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1189_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4475.7 181.8c0 .3.1.6.3.8.2-.2.3-.5.3-.9-.3.1-.4.1-.6.1 0 .3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1190_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4476.9 181.2c.2.7.4.4.4-.2-.1.1-.2.2-.4.2.3.8 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1191_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4473.3 179.7c1.8-1 2.4-.4 4.1.6-1.8 1.2-2.4.4-4.1-.6.5-.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1192_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4473.3 179.7c.8.5 2.9 1.1 2.7 2.3-.8-.5-3.1-1-2.7-2.3.8.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1193_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4475.9 181.2c.5-.3 1-.6 1.4-.9.4 1-.8 1.3-1.4 1.7.1-.3 0-.5 0-.8.5-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1194_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4463.4 156.5c.1.2 0 .4.2.6.5-.3 0-.3-.2-.6.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1195_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4465.7 157.6c0 .3.1.5.4.7.2-.2.2-.5.2-.8-.2 0-.4.1-.6.1.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1196_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4466.8 157c.3.7.4.4.4-.2-.1 0-.2.1-.4.2.3.6 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1197_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4463.3 155.8c1.7-1.2 2-.6 3.9.2-1.5 1.2-2.4.5-3.9-.2 1.7-1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1198_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4463.3 155.8c.9.4 2.7.8 2.7 1.9-.8-.3-2.8-.6-2.7-1.9.9.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1199_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4465.9 157c.4-.3.8-.7 1.2-1 .3.9-.6 1.2-1.1 1.7l-.1-.7c.4-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1200_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4470.4 159.7c.1.2 0 .4.2.6.5-.4.1-.4-.2-.6.1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1201_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4472.7 160.7c0 .3.1.5.4.7.2-.2.2-.5.2-.8-.2.1-.4.1-.6.1.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1202_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4473.9 160.1c.3.7.4.4.4-.2l-.4.2c.3.7 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1203_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4470.3 159c1.7-1.2 2-.6 3.9.2-1.5 1.2-2.4.5-3.9-.2 1.7-1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1204_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4470.3 159c.9.4 2.7.8 2.7 1.9-.8-.4-2.8-.7-2.7-1.9.9.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1205_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4472.9 160.2c.4-.3.8-.7 1.2-1 .3.9-.6 1.2-1.1 1.7 0-.3 0-.5-.1-.7.5-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1206_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4477.4 162.8c.1.2 0 .4.2.6.5-.4.1-.3-.2-.6.2.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1207_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4479.8 163.8c0 .3.1.5.4.7.2-.2.2-.5.2-.8-.3.1-.4.2-.6.1 0 .4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1208_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4480.9 163.2c.3.7.4.4.4-.2-.1.1-.3.2-.4.2.3.7 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1209_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4477.4 162.1c1.7-1.2 2-.6 3.9.2-1.6 1.2-2.4.5-3.9-.2 1.6-1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1210_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4477.4 162.1c.9.4 2.7.8 2.7 1.9-.8-.4-2.9-.6-2.7-1.9.8.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1211_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4480 163.3c.4-.3.8-.7 1.2-1 .3.9-.6 1.2-1.1 1.7-.1-.2-.1-.4-.1-.7.4-.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1212_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4488.1 167.3c.1.2 0 .4.2.6.5-.4.1-.4-.2-.6.1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1213_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4490.4 168.3c0 .3.1.5.4.7.2-.2.2-.5.2-.8-.2.1-.4.1-.6.1.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1214_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4491.6 167.7c.3.7.4.4.4-.2-.2 0-.3.1-.4.2.2.7 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1215_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4488 166.6c1.7-1.2 2-.6 3.9.2-1.5 1.2-2.4.5-3.9-.2 1.7-1.2 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1216_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4488 166.6c.9.4 2.7.8 2.7 1.9-.8-.4-2.8-.7-2.7-1.9.9.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1217_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4490.6 167.8c.4-.3.8-.7 1.2-1 .3.9-.6 1.2-1.1 1.7 0-.3 0-.5-.1-.7.5-.4 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1218_)\" stroke-width=\".28\" d=\"M4468.3 168c-2.6 1-.6 2.6.9 3.4 2.2 1.1 5.2 3 7.3 1-1.7-1.9-5.8-5.2-8.2-4.4-3.4 1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1219_)\" stroke-width=\".28\" d=\"M4474.8 169.7c1 .5 2.1 1 3.1 1.4-1-1-1.9-3-3.1-1.4 1.1.5 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1220_)\" stroke-width=\".28\" d=\"M4476.7 167.9c.8.8 1.6 1.5 2.4 2.3-1.7 1.3-2.3-.1-3.7-1.4.5-.3.9-.6 1.3-.9.8.8 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1221_)\" stroke-width=\".28\" d=\"M4473.4 169.7c1-.9 2-1.7 3.1-2.6-1-.5-3.3-2.3-4.4-1.6-1 .6-1.7 1.5-2.6 2.1 1.3.8 2.6 1.4 3.9 2.1 1-.9 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1222_)\" stroke-width=\".28\" d=\"M4473.4 169.7c.1.4.1.8 0 1.1-1-.5-4.9-1.4-4-3.2 1.4.8 2.7 1.4 4 2.1.1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1223_)\" stroke-width=\".28\" d=\"M4473.4 169.7c1-.9 2-1.7 3.1-2.6.3 1.8-1.9 2.8-3 3.7-.1-.3-.1-.7-.1-1.1 1-.9 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1224_)\" stroke-width=\".28\" d=\"M4457.4 158.4c0 2.5 3.3 2.2 3 0h-3c0 1.3 0 0 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1225_)\" stroke-width=\".28\" d=\"M4457.4 158.4c0 1.5 3.7.7 2.9-.3-.9-1.1-2.9-.1-2.9.3 0 1.1 0-.4 0 0z\" fill=\"none\"/>\n    <path stroke=\"url(#SVGID_1226_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4445.2 152.1l-20-10.2\"/>\n    <path stroke=\"url(#SVGID_1227_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4445.6 152.3l.3 8.1\"/>\n    <path stroke=\"url(#SVGID_1228_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4446.6 151.7l.5 7.8\"/>\n    <path stroke=\"url(#SVGID_1229_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4448.4 150.9l.6 7.8\"/>\n    <path stroke=\"url(#SVGID_1230_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4449.4 150.4l.5 7.7\"/>\n    <path stroke=\"url(#SVGID_1231_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4450.8 149.7l.6 7.8\"/>\n    <path stroke=\"url(#SVGID_1232_)\" stroke-width=\".28\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4451.9 149.2l.5 7.7\"/>\n</g>\n. ",
    "fishermanswharff": "After exporting svg paths from AI CC, the code looks something like: \n<svg>...\n<path...../>\n<path...../>\n</svg>\nIf there are multiple paths the svg breaks when svgmin runs via grunt build, as the paths need to have a closing tag. Cannot be self-closing path tag with multiple paths\n. ",
    "christianhaller": "same here\n. ",
    "dfilatov": "@GreLI Could you release a version with this option?\n. Thanks!\n. Ping\n. Wouldn't you like to release a new version SVGO with these changes? )\n. @GreLI What stops you from release a minor version with this fix?\n. It's time to release a new version, isn't it? :)\n. @GreLI I've improved --multipass in #263, but there's no released version with it yet\n. @H1D The number of passes with enabled --multipass option is limited to 10 times.\n. ",
    "Lomacar": "Aha! Thanks. I was imagining it would create the folder for me. Silly me. Overall I find that SVGO is pretty silent about errors.\n. ",
    "H1D": "just FYI\nWe have to use SVGO#master because of this PR probably. Got loads of broken SVG with 0.5.0\n. heh.. not only twice! Have some files where SVGO still reduces after 15+ runs =))\n. @dfilatov #263 didn't solve this issue\n. @GreLI pretty sure http://www.youtube.com/watch?v=BTUbrcVd10U\nto repreat (OS X):\nbash\nalias ql='qlmanage -p \"$@\" >& /dev/null'\nwget https://www.dropbox.com/s/epaxeyjsa90ty1f/stepic_logo_christmas_full.svg\nql stepic_logo_christmas_full.svg\nsvgo --multipass stepic_logo_christmas_full.svg\nsvgo --multipass stepic_logo_christmas_full.svg\nsvgo --multipass stepic_logo_christmas_full.svg\nsvgo --multipass stepic_logo_christmas_full.svg\nql stepic_logo_christmas_full.svg\n. @YetiOr you are right!\nHowever #284 still relevant\n. :+1: \n. ",
    "Yeti-or": "@GreLI how about (help wanted) Label in issues ?\n. It's problem with removeUnknownsAndDefaults plugin, it doesn't handle foreignObject content right.\nYou can disable it in config: \nconfig.yml\n- removeUnknownsAndDefaults: false\nor you can remove foreignObject proccess svgo and then merge it back :smile: \n. I think this need to be fixed by excluding foreignObject while traversing svg tree not in plugins. @GreLI what do u think?\n. I think this pr https://github.com/svg/svgo/pull/263 fix it\n@H1D try svgo from master on your file\n. @caub could you explain where is the typo ?. fixed it here: https://github.com/svg/svgo/pull/687. convertColors plugin choose what is shorter rgb() hex or name. So I think that docs are correct right now. ",
    "necolas": "Ah, so I looked into this more and it was because I was inserting the SVG using innerHTML which lowercased the tags. No issue with the library, sorry about that!\n. ",
    "raphdg": "Here's the description of the removeViewBox plugin:\nRemove viewBox attr which coincides with a width/height box\nI've written a plugin to achieve what you want : https://github.com/raphdg/svgo/blob/master/plugins/cleanSvgTag.js\nThis would keep the viewBox attribute and get rid of width, height, x and y attributes in the svg element.\n. Thanks for your input @GreLI.\nIn my case, I have to clean those attributes whatsoever, but it's a good thing to remember !\n. ",
    "oller": "Thanks @raphdg, so is the use-case I've described a valid one, is it worth me putting a plugin together and a PR?  In this case I'd be looking to clear width and height, but retain their values in the viewBox.\n. ",
    "keithkml": "Hi @GreLI - the sample file is not enough information? You cannot reproduce?\n. Yes, I was hoping svgo would remove the illustrator object.\n. ",
    "homm": "How to upvote this issue? :)\nI think this is real SVG with same problem: https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Firefox-logo.svg\n. ",
    "danielbayley": "Same issue for me. I can only process SVGs with SVGO if I save them without Illustrator editing capabilities. So I guess ideally, SVGO would just strip any Adobe Illustrator code before processing the remaining native SVG code.\n. @GreLI The \"hackish\"ness is what gets introduced by [surprise] Adobe! Both tests pass though.\nIf you specify a .class (i.e. a layer name beginning with a . or an #id [layer name beginning with a #]), then once that SVG is exported from Illustrator, for some reason these become _x2E_ instead of ., and _x23_ in place of #\u2026\nThe idea here is that it's useful to be able to specify which attribute you are targeting (with CSS say) just by naming the layers accordingly.\nI suppose you could take the view as with #648, and say that this possibly falls outside of the scope of SVGO if it is focussed purely on optimisation, but it is useful to be able to add plugins that solve problems like this into the build step, so I guess this is another argument for #564\u2026 along with other ideas for useful plugins such as adding an <?xml-stylesheet instead of inline <style>s, and/or adding xlinks to SVGs.. ",
    "DonGissel": "It's not just for that. preserveAspectRatio can be used to align the SVG content, regardless of how wide the outer canvas is. Let's say I have an SVG with content that's 64x64 pixels, but the outer element (in this case the <svg>-tag containing the <use>-tag) is 100px wide. I can then use preserveAspectRatio to align the SVG content top left, so I can resize the outer element (using CSS) without worring about flow. Right now, the content is centered no matter what I do, and this is not really great for my current use-case.\nIt's not just an editor-thing, because SVGO strips the tag off the incoming SVG-files, and there's currently no way to add them again (also, addAttributesToSVGElement doesn't seem to let me add values, and even if it did, I'd want to control this on a per-SVG basis instead of adding a blanket-statement, which would be a lot easier in the source file than in the setup for SVGO); nor is there a way to control this with styling from a browser.\nSo I would say this is a needed feature.\n. ",
    "jfinken": "Turns out, effectively:\nviewBox := fmt.Sprintf(`viewBox=\"%d %d %d %d\"`,\n    vbMinX, vbMinY, (vbMaxX - vbMinX), (vbMaxY - vbMinY))\naspect := `preserveAspectRatio=\"none\"`\ncanvas.Start(width, height, viewBox, aspect).\n",
    "booleanbetrayal": "just verified! thanks @GreLI !\n. @puzrin - I'm not familiar enough with SVG paths and transforms to be comfortable implementing this feature with svgpath. Would you want to take the lead on this? I've verified that the logic in the gist above seem reliable for every use case I could throw at it, but if svgpath provides a cleaner implementation, I'm all for it!\n. Know how that is, @puzrin . No worries! The difference between this and transformsWithOnePath is that this would completely bake transform offsets, etc into the path data, while the other consolidates multiple transforms into a single matrix (I think?).\nWill try to get familiar with SVGO plugin expectations, but if someone else can knock this out in no-time, feel free!  =]\n. @GreLI - Here's one of the more simplistic examples of what I'm trying to achieve. If there's already a pre-existing plugin combination that will produce this, please let me know!\nOriginal\nhtml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"158px\" height=\"169px\" viewBox=\"0 0 158 169\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n    <defs>\n        <filter x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" filterUnits=\"objectBoundingBox\" id=\"filter-1\">\n            <feOffset dx=\"0\" dy=\"0\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n            <feGaussianBlur stdDeviation=\"8\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n            <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.14 0\" in=\"shadowBlurOuter1\" type=\"matrix\" result=\"shadowMatrixOuter1\"></feColorMatrix>\n            <feMerge>\n                <feMergeNode in=\"shadowMatrixOuter1\"></feMergeNode>\n                <feMergeNode in=\"SourceGraphic\"></feMergeNode>\n            </feMerge>\n        </filter>\n    </defs>\n    <g id=\"Page-6\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"concept_badge_complete\" sketch:type=\"MSLayerGroup\" transform=\"translate(0.000000, 5.000000)\">\n            <rect id=\"Rectangle-2\" fill=\"none\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"158\" height=\"160\"></rect>\n            <path d=\"M16.2335291,111.457874 L16.0000472,48.5420336 C15.9888529,45.7003399 17.970251,42.2051051 20.4042204,40.7737694 L74.2681855,9.08428602 C76.7005556,7.65295025 80.6905382,7.63681343 83.1341027,9.04717134 L137.229951,40.2719143 C139.673515,41.6822722 141.6805,45.1613702 141.693294,48.0030639 L141.926776,110.918904 C141.93797,113.760598 139.954973,117.255832 137.522603,118.687168 L83.6586375,150.376651 C81.2262673,151.807987 77.2362848,151.824124 74.7927203,150.413766 L20.6968724,119.189023 C18.2533079,117.778665 16.2447235,114.299567 16.2335291,111.457874 Z\" id=\"Outer-Chapter-Hexagon\" fill=\"#FFFFFF\" filter=\"url(#filter-1)\" sketch:type=\"MSShapeGroup\"></path>\n            <polygon id=\"Star-2\" fill=\"#FF4D63\" sketch:type=\"MSShapeGroup\" points=\"79.5 99.25 56.2824825 111.456171 60.7166338 85.6030856 41.9332676 67.2938287 67.8912413 63.5219144 79.5 40 91.1087587 63.5219144 117.066732 67.2938287 98.2833662 85.6030856 102.717517 111.456171 \"></polygon>\n        </g>\n    </g>\n</svg>\nFlattened (no transform on concept_badge_complete group)\nhtml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"158px\" height=\"169px\" viewBox=\"0 0 158 169\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n    <defs>\n        <filter x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" filterUnits=\"objectBoundingBox\" id=\"filter-1\">\n            <feOffset dx=\"0\" dy=\"0\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n            <feGaussianBlur stdDeviation=\"8\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n            <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.14 0\" in=\"shadowBlurOuter1\" type=\"matrix\" result=\"shadowMatrixOuter1\"></feColorMatrix>\n            <feMerge>\n                <feMergeNode in=\"shadowMatrixOuter1\"></feMergeNode>\n                <feMergeNode in=\"SourceGraphic\"></feMergeNode>\n            </feMerge>\n        </filter>\n    </defs>\n    <g id=\"Page-6\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"concept_badge_complete\" sketch:type=\"MSLayerGroup\">\n            <path id=\"Rectangle-2\" fill=\"none\" d=\"M0,5L158,5L158,165L0,165L0,5Z\"></path>\n            <path id=\"Outer-Chapter-Hexagon\" fill=\"#FFFFFF\" filter=\"url(#filter-1)\" d=\"M16.233530044555664,116.45787048339844L16.00004768371582,53.54203414916992C15.988852500915527,50.700340270996094,17.970251083374023,47.20510482788086,20.404220581054688,45.77376937866211L74.2681884765625,14.084285736083984C76.70055389404297,12.652950286865234,80.69053649902344,12.63681411743164,83.13410186767578,14.047171592712402L137.22994995117188,45.271915435791016C139.6735076904297,46.682273864746094,141.6804962158203,50.16136932373047,141.69329833984375,53.0030632019043L141.92677307128906,115.91890716552734C141.93797302246094,118.7605972290039,139.95497131347656,122.25582885742188,137.52259826660156,123.68716430664062L83.65863800048828,155.37664794921875C81.22626495361328,156.8079833984375,77.23628234863281,156.82412719726562,74.79271697998047,155.4137725830078L20.69687271118164,124.18902587890625C18.253307342529297,122.7786636352539,16.24472427368164,119.29956817626953,16.233530044555664,116.45787048339844Z\"></path>\n            <path id=\"Star-2\" fill=\"#FF4D63\" d=\"M79.5,104.25L56.2824821472168,116.45616912841797L60.71663284301758,90.60308837890625L41.93326950073242,72.29383087158203L67.89124298095703,68.52191162109375L79.5,45L91.10875701904297,68.52191162109375L117.06673431396484,72.29383087158203L98.28336334228516,90.60308837890625L102.71751403808594,116.45616912841797Z\"></path>\n        </g>\n    </g>\n</svg>\n. Hmm ... the gist I had linked seems to process everything i've thrown at it, as expected. If it isn't theoretically reliable 100% of the time, could an experimental plugin be made that is disabled by default?\n. :+1: i'm also seeing this exception\n. ",
    "gustavpursche": "True - it's fine with 0.5. Good work!\n. ",
    "4exova": "It was fixes for 'beminfo' branch. I can send PR for the main branch too. \n. ",
    "Fleshgrinder": "Similar issue with the SVG fonts from https://01.org/clear-sans/downloads which fails with a \u201cCannot read property 'content' of undefined\u201d if used via gulp-imagemin. Here is the complete output:\n```\n\"C:\\Program Files (x86)\\JetBrains\\PhpStorm 8.0.2\\bin\\runnerw.exe\" C:\\Users\\Fleshgrinder\\Programs\\nodejs\\node.exe X:\\projects\\node_modules\\gulp\\bin\\gulp.js --color --gulpfile x:\\project\\gulpfile.js fonts\n[17:09:01] Using gulpfile x:\\projct\\gulpfile.js\n[17:09:01] Starting 'fonts'...\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nTypeError: Cannot read property 'content' of undefined\n    at Object.exports.fn (x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\plugins\\removeUnknownsAndDefaults.js:83:24)\n    at x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:61:45\n    at Array.filter (native)\n    at monkeys (x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:46:39)\n    at x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:70:17\n    at Array.filter (native)\n    at monkeys (x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:46:39)\n    at x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:70:17\n    at Array.filter (native)\n    at monkeys (x:\\project\\node_modules\\gulp-imagemin\\node_modules\\imagemin\\node_modules\\imagemin-svgo\\node_modules\\svgo\\lib\\svgo\\plugins.js:46:39)\nProcess finished with exit code 8\n```\n. ",
    "jmhobbs": "Thanks!\n. ",
    "sebdeckers": "@deepsweet Looks like Simplify.js is not supported on Node 0.8. Any chance of dropping that old version?\n. @GreLI @deepsweet Any reason why this hasn't been accepted yet?\n. ",
    "chrissound": "Seeing as this hasn't been merged in, is there a way I can get a copy of this branch? \nI'm guessing I would then just need to install this 'package' via npm?\n. ",
    "faeron": "Ok got it. with some docu searching :)\nLink for those who need it\nhttp://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\nSry for any inconvenience.\n. This is what my files array looks like. It only handles svgs directly in the icons folder (no deeper steps)\n{\n    expand: true,\n    cwd: 'icons/',\n    src: '*.svg',\n    dest: 'icons/optimized', \n    ext: '.svg',\n    extDot: 'first'\n}\n. ",
    "alex-martinez": "I tried the _*/_.svg method, but it doesn't seem to work. \nI'm currently listing the files individually. Please tell me you were you able to get it working.\n. ",
    "stephane-r": "Hi,\nWhat is your config file ? don't work for me :(\noptions: {\n    plugins: {\n        removeViewBox: false,\n        removeUselessStrokeAndFill: false\n    }\n},\ndist: {\n    files: {\n        expand: true,\n        cwd: 'bundles/icefrontend/images/visual/',\n        src: '*.svg',\n        dest: 'test/',\n        ext: '.svg',\n    },\n}\nI've this error : Warning: config.plugins.forEach is not a function Use --force to continue.\nThank you :)\n. @GreLI Thank you, it's okay :)\n. ",
    "kiyopikko": "Sorry... I added test files.\n. ",
    "bfanger": "It works like charm, Thanks!\n. ",
    "xsegrity": "I am having the same issue with gulp-imagemin which uses this package (gulp-imagemin>imagemin>imagemin-svgo>svgo).\n. @MariusRumpf that was indeed the issue for me as well - good find. I had the gulp-imagemin wrapped in a gulp-cache which is what was throwing me off.\n@GreLI feel free to close this issue as a problem with \"idiot user\" :)\n. ",
    "MariusRumpf": "The error is thrown from https://github.com/google/web-starter-kit/blob/master/app/images/hamburger.svg in google/web-starter-kit for me. It contains <path d=\"z\" fill=\"none\"/> throwing the error.\n. ",
    "samarpanda": "https://github.com/google/web-starter-kit/issues/577\n. ",
    "littlefyr": "By simply truncating or rounding decimal points, there is an assumption about the user space in which the values are defined is both consistent within the document and already optimal. Its explicitly the value of SVG that this is not necessarily the case. \nAs a result, the optimization is not likely to be optimal in many cases. Consider the following example from MDN:\n<svg viewBox=\"0 0 120 120\" version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"60\" cy=\"60\" r=\"50\"/>\n</svg>\nThe optimization of this SVG should be:\n<svg viewBox=\"0 0 12 12\" version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"6\" cy=\"6\" r=\"5\"/>\n</svg>\nIdeally the concept of \"precision\" should be replaced with the concept of \"maximum significant digits\".\n. The problem is that SVG is a mathematical construct. If you don't take that into account when processing SVG, you're going to break something. \nHere are non-trivial (ok only slightly non-trivial) SVG images using paths. I copied the first from MDN and modified it. Yes, I'm too lazy to do more than divide by 10, but you get the point. \nThese image are, by definition, identical in every way except lexically (which I realize may not be the right word). However, the precision reducing algo will produce radically different results on each for the exact same parameters. \n<svg width=\"190px\" height=\"160px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 190 160\">\n  <path d=\"M11.2 11.2 C 21.2 21.2, 41.2 21.2, 51.2 11.2\" stroke=\"black\" stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M71.2 11.2 C 71.2 21.2, 121.2 21.2, 121.2 11.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M131.2 11.2 C 121.2 21.2, 181.2 21.2, 171.2 11.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M11.2 61.2 C 21.2 81.2, 41.2 81.2, 51.2 61.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M71.2 61.2 C 71.2 81.2, 111.2 81.2, 111.2 61.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M131.2 61.2 C 121.2 81.2, 181.2 81.2, 171.2 61.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M11.2 111.2 C 21.2 141.2, 41.2 141.2, 51.2 111.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M71.2 111.2 C 71.2 141.2, 111.2 141.2, 111.2 111.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n  <path d=\"M131.2 111.2 C 121.2 141.2, 181.2 141.2, 171.2 111.2\" stroke=\"black\"  stroke-width=\"2\" fill=\"transparent\"/>\n</svg>\n<svg width=\"190px\" height=\"160px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 .19 .16\">\n  <path d=\"M.0112 .0112 C .0212 .0212, .0412 .0212, .0512 .0112\" stroke=\"black\" stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.0712 .0112 C .0712 .0212, .1212 .0212, .1212 .0112\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.1312 .0112 C .1212 .0212, .1812 .0212, .1712 .0112\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.0112 .0612 C .0212 .0812, .0412 .0812, .0512 .0612\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.0712 .0612 C .0712 .0812, .1112 .0812, .1112 .0612\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.1312 .0612 C .1212 .0812, .1812 .0812, .1712 .0612\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.0112 .1112 C .0212 .1412, .0412 .1412, .0512 .1112\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.0712 .1112 C .0712 .1412, .1112 .1412, .1112 .1112\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n  <path d=\"M.1312 .1112 C .1212 .1412, .1812 .1412, .1712 .1112\" stroke=\"black\"  stroke-width=\".002\" fill=\"transparent\"/>\n</svg>\nIt strikes me as definitely wrong that rounding to 1 decimal place would result in two totally different results for two identical images. Not in terms of filesize, but the images could not longer be said to be identical. \nNow i could have chosen to do more complex math and set the viewbox to 0 0 10 10 but who wants to do that? The point, I think, is clear.\nThat one might get a 4-6 decimal points from a drawing program has little bearing on the precision of those curve points. 4-6 decimal points on an image that has a total dimension of 10000x10000 is going to be a lot different than 4-6 decimal points on an image 10x10. \nThe reason I think this is important is that without taking the math into account, you can't, for example, have a directory full of SVGs that you expect to compress well unless you enforce that they're all created identically which is going to be impossible unless you are also the source of all those SVGs. \nI get that this is hard. But because it breaks some fundamental properties of SVG, you either have to account for it or clearly outline the limitations.\n. @joeyhoer I'm piggy backing on your issue because what I am suggesting is effectively the same. \nWhile its true, as @GreLI says, that you would need to have a viewBox in order to do that, the viewBox only defines the coordinate of the viewport. If no viewBox is defined, you can use viewbox=\"0 0 width height\".\nOne way to do this is to divide by a sufficient power of 10 that makes all the values between 0 and 1 (ok +1 and -1) round the value, to say 6 decimal places, and multiply by 10^6 (in this case).\nThe biggest problems are (and I'm not sure its not a problem) may be with some path constructs like Arcs. I've never used them, but when I tried building one of my examples, i naively tried multiplying all the values by 10, but the arcs broke. \nAlso using different units like mm or cm would be challenging. \n. How about this. \n1. The user passes in the number of significant digits (sd). \n2. Get the rounding factor (bad term) var rounding = Math.pow(10,sd);\n3. Get all the values to be scaled into an array (allValues). \n4. Get the absolute value of each value to be scaled: var absValues = allValues.map( (v) => Math.abs(v));\n5. Get the minimum value and multiply by our rounding factor: var scaling = Math.min.apply(null, absValues) * rounding;\n6. Scale our original values: var newValues = allValues.map( (v) => Math.round(v / scaling));\n7. Find the greatest common divisor in newValues (use mathjs.org, or similar): var gcd = math.gcd.apply(null, newValues);\n8. Scale all the values by the GCD: `if (gcd !=1) { newValues = newValues.map( (v) => v/gcd); }\nNow I'm sceptical that you'd ever likely do that last step. Yet, i think there is another level of optimization here. \nIf you really wanted to go a step further, You could divide newValues by every prime number between 1 and 10sd (there are 168 for sd=3) and find the prime that leaves you with the most integer values. You can then find the GCD of those whole numbers and use that as your final scaling factor. \nOr something like that. \n. ",
    "philbar": "I'm not sure how to approach this mathematically, but we could also reduce file size by multiples of 2 and 5, in addition to 10.\nIn the example from Mar 19 we could save an additional 8.8% by multiplying everything by 5 (which gets rid of all the .2s). We could do the same with multiples of 2 if there are a large number of .5s.\n<svg width=\"190px\" height=\"160px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 950 800\">\n<path d=\"M56 56 C 106 106, 206 106, 256 56\" stroke=\"black\" stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M356 56 C 356 106, 606 106, 606 56\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M656 56 C 606 106, 906 106, 856 56\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M56 306 C 106 406, 206 406, 256 306 \" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M356 306 C 356 406, 556 406, 556 306\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M656 306 C 606 406, 906 406, 856 306\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M56 556 C 106 706, 206 706, 256 556\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M356 556 C 356 706, 556 706, 556 556\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n  <path d=\"M656 556 C 606 706, 906 706, 856 556\" stroke=\"black\"  stroke-width=\"10\" fill=\"transparent\"/>\n</svg>\n. ",
    "atk": "You already round to the third digit after the dot. So you can try to find the least common multiple of all node numbers (to a deviation of n% - that the user could specify) and multiply everything with that.\n. ",
    "keithclark": "I started working on something like this a while ago for a tool I was building. My approach was to scale out precision by raising values by a power of ten. I've created a plugin for SVGO and raised a work-in-progress PR on my fork if you'd like to take a look.\n. Ooops! I raised this to the wrong repo. It's not ready for the main project yet.\n. ",
    "GerritHoekstra": "If I try to add this code:\n``` javascript\nif (params.smoothShorthandsCurve && prev) {\n    // smoothcurveto\n    if (instruction === 's') {\n    if (\n        prev.instruction === 'c'\n    ) {\n        var dataAdd = [];\n        dataAdd[0] = data[0];\n        dataAdd[1] = data[1];\n\n        dataAdd[0] -= data[2]; \n        dataAdd[1] -= data[3];\n\n        instruction = 'c';\n        data = dataAdd.concat(data);\n    }\n\n\n\n}\n\n}\n```\non line 489 in convertPathData.js and set curveSmoothShorthands to false, and add smoothShorthandsCurve: true, to  exports.params.\nThen this happens:\n\n(Before - After)\nSVG after:\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 300\" enable-background=\"new 0 0 1000 300\">\n    <path fill=\"#231F20\" d=\"M254.984 99.8c3.31-.542 7.432-1.014 12.094-1.352-5.472999999999999 0 9.865-.54 15.338-.54 6.757 0 12.5.507 17.364 1.655C296.536 96.997 308.63 102.503 311.874 105.07c2.703 2.16 4.797 4.83 6.216 8.005 0-4.189000000000001 2.162 6.858 2.162 11.047 0 5.81-2.06 10.71-5.1 14.51C319.07 137.213 308.09 145.135 304.172 146.554v.406c3.176 1.285 5.642 3.447 7.6 6.335C310.623 149.106 315.185 159.8 316.334 163.988c1.42 5.135 2.838 10.675 4.12 15.37C319.575 177.6 322.887 187.906 323.766 189.663h-21.08c-.743-1.284-1.655-3.784-2.72-7.365 1.35 5.606999999999999-2.28-8.243-3.63-13.85-1.217-5.676-2.805-9.29-5.136-11.504C295.39 157.01 285.795 153.92 281.606 153.854h-6.216v35.81h-20.406V99.8zm20.405 39.188h8.106c10.27 0 16.35-5.135 16.35-13.108 0-8.378-5.675-12.567-15.134-12.702-5 0-7.838.405-9.324.675v25.135z\"/>\n</svg>\nThe smooth shorthands are gone, but I'm not satisfied with the result. Is this because when you try to convert smooth curves to curves the 'smooth' is gone?\n. Thanks, when I changed instruction to c and data to sdata it worked perfectly.\nAlso thanks for amazing tool!\n. ",
    "strarsis": "+1\nExample file:\n<svg id=\"test\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n  <style>.st0{fill:red;}</style>\n  <rect width=\"100\" height=\"100\" class=\"st0\" style=\"stroke-width:3;stroke:blue\" />\n</svg>\nWith best regards\n. PR has been prepared for a plugin: https://github.com/svg/svgo/pull/447\nIt doesn't support CSS selectors beyond class/id yet, but this isn't very usual with SVG yet \nand it would propably require additions to the AST API passed to the plugins.\n. How to handle styles and classes processed by this plugin? See PR discussion.\n. @ionutzp, @shooftie, @Joeynoh, @chrisblakley: Plugin can be used now: https://github.com/svg/svgo/pull/592. Also https://github.com/svg/svgo/pull/592#issuecomment-251956973. Native CSS support has been added now with https://github.com/svg/svgo/pull/592.. I ran npm test which doesn't invoke make travis, so jshint was ommited, \nhence the build errors, fixed that now.\nAs mediaqueries and other nested structures cannot be added to style attribute, \nthey would be preserved in style element in any case for further possible usage.\nInitially the styles element was intended to be preserved by this plugin \nand removed by removeStyleElement plugin instead. \nHowever, there may be mediaqueries and orphaned selectors left in style element. \nWhat kind of modi would make sense (passed as plugin option)?:\n- Preserve style element completely (current mode).\n- Remove matching selectors, preserve everything else.\n- Remove all selectors except nested structures that cannot be copied to style attribute at all (e.g. mediaqueries).\nWhat should happen to the class attributes/classe names inside that matched?\ncleanupAttrs plugin afterwards?\nWith best regards\n. When there are mediaquery styles, the svgo end user would disable removeStyleElement anyway, so this shouldn't cause trouble either.\nMaybe an extra plugin that just removes styles that aren't used by the classes/ids inside before this one, so there are no leftover styles?\n. I added style element clean up which will strip any selectors/rules \nthat matched the elements (by class/id) (and which declarations were copied to style attribute).\nThe following rules apply to style element clean up now:\n- Preserve nested structures (e.g. media queries) in any case (cannot be inlined).\n- Remove selectors that matched.\n- Remove rules where all its selectors matched.\nWith best regards\nP.S.: Maybe later, when it is stable enough, it could be worth it \nmoving the clean up part into an extra plugin (cleanupStyles.js)?\n. Ready to merge?\n. There seems to be more issues posted concerning styles in svgo.\n- Remove styles with display: none; (hidden layers)\n- Remove styles element when not needed (similar to this plugin)\n- Minify styles element (and inline styles?)\nTo improve selector support, using a XML parser like cheerio would help \nbecause it offers $(...) which can evaluate more complex selectors.\n. I did a full rewrite and rebranch and will create a new PR instead: https://github.com/svg/svgo/pull/592. Hm, jshint fails with build using nodejs release v0.10.40, but with other plugins than this one.\nShould I base off from a different commit than current master?\n. \"Also, I'd like if styles were transfered just if there is only one match, not if two or more (non-adjanced, adjanced can be grouped). It seems it can be done easy enough in the current implementation.\"\nSo this means that when a CSS rule with multiple selectors \nis selected because one selector matched /not all of them), \nthen the whole CSS rule should be cleaned?\nLike for example using this rule in input:\n.test1, test2 {\n    color: blue;\n}\n.test3 {\n    background: red;\n}\n[...]\n<rect class=\"test1\" [...]\nThe rule is cleaned up completely because .test1 matched?:\n.test3 {\n    background: red;\n}\n[...]\n<rect class=\"test1\" [...]. The jshint fails with other files for this PR, should I base it off a different commit that passes the tests?\nhttps://travis-ci.org/svg/svgo/jobs/91121264#L176\n. OK, so the last thing that needs to be clarified is how matched CSS rules are handled.\nSo a CSS rule should be cleaned up when any of its selectors matched, right?\n. Yes, I fixed/changed the loop code now.\nPreserving selectors/rules when they are used multiple times is a bit tricky, \nthe current (not pushed yet) implementation is a bit bloated, I have to simplify it a bit.\nI also try to get rid of the global variables and add some further tests for edge cases.. Yes, I rewrote the plugin so that it can use the svgo ast as cheerio ast and juice for cleaning up the styles.\ncheerio ast back to svgo ast is not fully working yet, hence no new PR has been created yet.\nEdit: The reason why I use juice now in this svgo plugin is that it already solved the quite complicated handling of style cascadation, selectors, etc and comes with tests included.\n. OK, the rewrite has been finished: https://github.com/svg/svgo/pull/592\n. @infn8, @dangayle, @baldwmic, @manuelodelain, @danielbayley:\nEdit: Native CSS support has been added with https://github.com/svg/svgo/pull/592.\nPrefix plugin for this issue PR: https://github.com/svg/svgo/pull/700. @ProdigySim: Is this related?: https://github.com/svg/svgo/pull/733. @lifeiscontent: What about using the svgo prefixIds plugin?. @lifeiscontent: You can use a custom hash/prefix callback, \nso you can use some custom unique string minifier.. @lifeiscontent: https://github.com/svg/svgo/issues/913#issuecomment-373416266. @hlg: Providing some sample SVGs with such an one-stop gradient (e.g. from Inkscape) \nwould be helpful for writing a plugin.. Coming back from discussion in https://github.com/svg/svgo/pull/447.\nShould this plugin now remove all classes that \na) matched some elements and have been inlined and \nb) aren't used multiple times among elements?\nOr should this go into a separate plugin just for this task, \nwhich means that this plugin only inlines, \nbut doesn't change the style elements content and element class attributes?\n. OK, so I will adjust the plugin to use csso ast instead and modify the css class removal logic.\n. So the plugin will now remove selectors that matched once but \npreserve selectors that matched multiple times in the SVG style elements content.\nAlso, style elements which content became empty after optimization will be removed, too.\n. Edit: Comment doesn't apply anymore, css-select + plugin feature used instead.\nTests are passing, but there may be one thing left: \nSelectors (including classes) of classes that match multiple times are spared by this plugin \u2013 but still inlined.\nI assume that it makes sense that multiple times matching selectors aren't only spared but also not inlined.\nFor this I would have to add an issue/PR for juice that is used for the inlining.. Edit: @zakness:\nThere is now an option in this plugin with which you can toggle whether \nit should inline everything or only selectors that match once, \nso you can use it now for your purposes, too:\n```js\n[...]\nonlyMatchedOnce:        false, // whether to use only selectors that match once (disable with false)\nremoveMatchedSelectors: true,  // clean up matched selectors (you probably still want this enabled) (if you inline everything, selectors can be left that hadn't matched)\nuseMqs:                 ['screen'], // what mediaqueries to be used, defaults to normal (''=empty) + screen.\nusePseudos:             [] // what pseudo classes to be used, defaults to none (''=empty)\n[...]\n````. Edit: This comment doesn't apply anymore as cheerio has been replaced.. In this plugin, juice has been replaced now with css-select which can \nuse the svgo AST directly and gives svgo native CSS selection capabilities.. @martinjuhasz @diedsmiling @raphael22: You could use/try out this plugin already, \nbut for it to be merged to svgo master, recent css-select has to be released to npm first.\nFor installing from this PR branch:\n$ npm install github:strarsis/svgo#inlineStyles\nAvailable plugin options:\n```js\n[...]\nonlyMatchedOnce:        true,  // whether to use only selectors that match once (disable with false to inline everything)\nremoveMatchedSelectors: true,  // clean up matched selectors (if you inline everything, selectors can be left that hadn't matched)\nuseMqs:                 ['screen'] // what mediaqueries to be used, defaults to screen (\"normal\", non-mediaquery styles are always used)\n[...]\n````\nIt is recommended to also run the minify Styles plugin after this one in order to flatten all inlined styles.\n!important is preserved inside inline styles because of specificity on styles from the outside.\nIt could be removed with a simple extra plugin.. Edit: Currently this plugin can also filter for mediaqueries (at-rules) \n(it uses 'screen' and 'normal' styles by default).. @alexjlockwood: Yes, I have the same issue and created a test now for this.\nApparently csso ast list modifications leak into previously referenced declarations.\nWhen invoking csso.translate(...), declarations are incorrectly used for selectors that come afterwards.\nEdit: Fixed!. @alexjlockwood: The recent css-select has to be released to npm.\nAlso @GreLI has to review and possibly remark/fix things.\nMy own guess is that this is merged quite soon after css-select has been released.. @alexjlockwood: Current css-select changes have to be released as package to npm yet. \nYou can already use this plugin though by installing svgo from this PR branch (instructions above).. @laurentvd: You can already use it by installing svgo from this PR branch (see instructions further above).\nCurrently not the latest css-select release is used but a newer commit because of features/API \nthat are required for its usage in svgo.\n@GreLI: This PR can't/shouldn't be merged into svgo with a github commit as package dependency, right?. @fb55 : Thanks! Now a normal npm package can be used for css-select.. Support for pseudo classes added (previously issues with styles that use pseudo classes).\nStyles in pseudo classes can now be optionally selectively inlined for special purposes (e.g. ':link' + ':hover').. @GreLI : Now this could be merged, any changes required?. @GreLI: I can separate the code for css selection and for the inline styles plugin in two PRs if necessary?. @alexjlockwood: The issue is caused by the deep combinator selectors from the CSS Scoping Module used in the styles of that SVG. css-select/css-what apparently don't support this yet (issue https://github.com/fb55/css-select/issues/81).\nThe plugin skips now all selectors that cause issues, leaving them in for further inspection/removal.. I just made a little benchmark, take it with a grain of salt - compare the numbers relatively to each other.\nRunning svgo only with the inlineStyles plugin against that particular SVG (https://gist.github.com/alexjlockwood/0db6f64f81eb1eb54434636155463615) takes about 1.3 seconds.\nminifyStyles before inlineStyles actually increases the required time to about 3.5 seconds.\nFirst inlineStyles, then minifyStyles (as in .svgo.yml for this PR) requires also about 3.5 seconds.\nRunning minifyStyles before and after inlineStyles increases required time to about 5 seconds.\nWithout inlineStyles and minifyStyles plugins it takes only about 150 ms.\nSo using minifyStyles in its current implementation before inlineStyles (and afterwards, because one wants everything minified) doesn't speed up but slows down the process.\nBut besides this, inlineStyles could be of course also further optimized in some places like in the loop where external style declarations are merged with already inlined styles.\nEdit: A little node profiling indicates that the specificity module is taking a great fraction of required time.\nEdit: Now the built-in csso specificity calculation method is used instead and time went down from 1.3s to 500ms (measured when using inlineStyles plugin only).. @alexjlockwood: Normally node can only utilise a single logical cpu core, so by using a suitable task runner one could make it utilise all available logical cores. For a system with 8 logical cores that could result in 8x speed up because each core can process a SVG at the same time.\nThe minifyStyles plugin has been modified recently and extra logic added that cleans up classes that aren't used in the SVG. This increases required time and it may be a good idea restoring the previous behaviour and moving the classes cleanup to a separate plugin that is usually not used after inlining all styles.. This is nice, latest csso supports also latest css-tree which allows to use new AST walking methods.\nIn order to use latest csso, css-tree has to be released with a fix for https://github.com/csstree/csstree/issues/39.. inlineStyles plugin has now been rewritten for using latest csstree for handling the AST.\nFurthermore, CSSStyleDeclaration interface has been implemented for svgo jsAPI, \nit is possible to set/get styles on each node now with intelligent AST translation.\n\nsetProperty(propertyName, value, priority)\ngetPropertyValue(propertyName)\ngetPropertyPriority(propertyName)\nremoveProperty(propertyName)\ngetCssText()\nitem(index)\n\ninlineStyles plugin alone now requires about 450ms for the large SVG test file, \n76% improvement over tests with the previous inlineStyles implementation.\nEdit: Some tests fail now because of incompatibilities in some other plugins with the new CSSStyleDeclaration interface.. @GreLI All tests are passing.. @GreLI: \nI closed+re-opened the PR for triggering a re-build, there was an issue with the coveralls web service.. @lahmatiy: I am not sure whether this is really worth the performance improvements, but one could try to pass the css-tree parsed selector tokens directly to css-select instead first translating it to a string and letting css-select parse it back to its own tokens (https://github.com/fb55/css-select/blob/e109d4b3668354542c806a6b652410f135d679ae/lib/compile.js#L33 and https://www.npmjs.com/package/css-what).. @GreLI: How can I further adjust this plugin in order to facilitate merging?. @lahmatiy: \nWould it be possible to release the current state of css-tree to npm so it can be used as npm dependency?. There is a strange issue with the Travis test - the semicolon is removed in the expected test output in this PR branch, but Travis doesn't seem to pick it up, see https://github.com/travis-ci/travis-ci/issues/7563.. Code style has been adjusted, indentation, spaces, alignment and boolean casting. \nDocumentation added to (English) README.. @GreLI: Merge \ud83d\udc4d . @MattyBalaam: An extra plugin could be added that is able to enable/disable other svgo plugins, like the inlineStyles plugin by judging the file size/length of input SVG. Or the inlineStyles plugin itself could have an option added for conditional style inlining.. @justrhysism: \nYou can already use this plugin though by installing svgo from this PR branch (instructions above).. @My6UoT9: Yes, by default this plugin should already remove any classes that matched, \nthe class names in class attribute values (Edit: hadn't, added, see below) and in the styles. \nFor non matching class attributes and left over styles (that didn't match) \nyou would need an extra plugin because this is out of the scope of this one.. @My6UoT9: I made a test from it and added this feature to this plugin.. @alexjlockwood: What node version? \nIt would be great if you could add an issue for this crash in https://github.com/csstree/csstree/issues.\nCurrently css-tree version 1.0.0-alpha22 is used in this plugin PR branch \u2013 \nso it would be great if this is fixed before updating to latest release alpha25.. \ud83d\udc4d . @alexjlockwood: A Pull Request for package.json comes to mind \n(which triggers the built-in integration test so it catches possible issues before merging) from \ntime to time? E.g. https://github.com/fb55/css-select does this with its dependencies using greenkeeper.. @moltar: I just tried this input svg with svgo version 1.0.5 and found no issues, \nneither with svgo usage nor with any visual differences, see https://gist.github.com/strarsis/2bc9a80bc0ce52dee53d41150a8252c2 .. @moltar: You need to set the onlyMatchedOnce option of inlineStyles plugin to false (default is true) \n(as shown in https://github.com/svg/svgo/pull/592#issuecomment-251956973). \nOtherwise the CSS class declarations won't be inlined because it matches more than one element.. @brutzel: I agree!\n@GreLI, @caub: Would it be an improvement to code the default for onlyMatchedOnce option to true?\nIMHO inlining everything (and isolating all the styles) is the more expected behaviour with this plugin.. @caub: Correct. Non-inlineable styles aren't inlined anyway by the plugin.\n(The prefixIds plugin is suitable for further isolating these kinds of styles.)\nWith onlyMatchedOnce enabled the plugin also does not \ninline style blocks which selectors match more than one element, \nwhich is technically not necessary though.. I agree with @alexjlockwood. The other plugins have to rely on the declarations of \nstyle attribute of the elements instead using something like Window.getComputedStyle() \n(which could be implemented using the new styles API \n(caching/performance considerations are required though)).\nThere may be even the case that an hypothetical extra plugin can \"outline\" all the styles in \none of the last processing steps. This could help with compression beyond normal gzip.. @GreLI: Hm, could it make sense to rewrite svgo to use an existing \nDOM/selector library like jsdom as the fork svgz is trying?. @jaafit, @chipcullen, @james-brndwgn, @kyleknighted, @teebszet, @pavel-popov-jr: \nprefixIDs plugin is now available in svgo release.. @katspaugh:\nThe plugin should also inline only when the selector matches once, otherwise not.\nThis part is not completely implemented yet in the localStyles plugin.\njuice is used internally because it already solved the inlining complexities and is well tested for this.\nAdding the feature to inline only when selector matches once to juice is discussed here (https://github.com/Automattic/juice/issues/232).\nA PR has been proposed now, hopefully this feature will be implemented or merged in soon.\nEdit: There are also version issues with juice module.\nUntil these are fixed, a \"light\" implementation is used now in localStyles plugin.\n. Could this module be useful for safe url-escaping?: inline-urlescape. @Muskos, @Stenvdb: Could this be related?: https://github.com/svg/svgo/pull/733. @bomberstudios: Recent svgo supports this now (https://github.com/svg/svgo/pull/700).. Related PR: https://github.com/svg/svgo/pull/592. Isn't this CSS? The minifyStyles plugin uses csso which can also minify color values like rgba(...) in CSS.. @GreLI: So plain CSS is optimized by CSSO in minifyStyles plugin. - \nBut rgba values in element attributes are not supported currently?. @peternowell : But because CSSO handles the CSS minification, it already minifies rgba values. \nSo this issue makes no sense then?. It is possible reusing the CSSO routines, also for other attribute values than just for color,\n see https://github.com/css/csso/tree/f381f09436d66572df0ccbca45c39aa84709269f/lib/replace.\nFor color values, besides minifying rgba(...) values, CSSO also replaces generic colors with \ntheir keyword counterparts (which is usually also more efficient), see https://github.com/css/csso/blob/f381f09436d66572df0ccbca45c39aa84709269f/lib/replace/color.js .\nThere is already the convertColors plugin but it doesn't support rgba yet.. Using the inlineStyles plugin before convertStyleToAttrs plugin would \nmake this possible, see related PR https://github.com/svg/svgo/pull/592 .. It would be much easier if the new css selection features from https://github.com/svg/svgo/pull/592 could be used, \nquerying for (linear)Gradient element by ID for its corresponding element fill attribute/style.. The easiest workaround now for this issue would be using the prefixIds plugin in svgo.. @GreLI: Right, it doesn't reduce file size - but it should fix issues with fonts in embedded SVGs.\nWould this be a good enough reason for adding this plugin to svgo?. @GreLI: This is for using CSS fonts in SVGs that are embedded - browsers have issues displaying the custom font when the SVG is embedded. Also this plugin would allow tailoring a reduced font file for exactly this specific SVG - or when using an API like Google Fonts API for a reduced character set.. @GreLI: Because this plugin is intended to be used for intelligently/properly embedding CSS fonts (and optimizing the font files) (see comment above) - could a PR reopen be considered?. @GreLI: Yes, ideally I could just install this plugin from a separate (npm) package and svgo is able to find it.\nBecause I sometimes use SVGs with CSS font inside, optimizing the SVG for true text can be more efficient and semantic. (Related: https://github.com/svg/svgo/issues/722).. A window.getComputedStyle() implementation would be useful here. \nIt is quite similar to inlineStyles plugin and style related API, \nan extra lookup table or property would be required because it would be too slow otherwise. \nThis could be implemented as extra methods in css-tools when style support has been merged in.. @DimaRGB, @funklos, @pavel-popov-jr: Plugin PR ready: https://github.com/svg/svgo/pull/700. Similar issue?: https://github.com/svg/svgo/issues/673. PR for a plugin that does this - a bit tweaking is necessary though: https://github.com/svg/svgo/pull/700. Edit: Referenceable attribute check added.\nCurrently all attribute values are checked for url(...) / ID references. \nMaybe this can be made more efficient by only checking attributes that can actually reference to other elements, as defined in https://github.com/svg/svgo/blob/master/plugins/collections.js#L2286.\nEdit: The list contains _properties, not elements that can reference.. @GreLI: Code style adjusted, this can be merged now.. @GreLI: Merge?. @funklos, @kyleknighted, @Cinamonas, @gabrielb, @caub:\nYou can install it already from this PR branch.\nUsing npm:\nnpm install github:strarsis/svgo#prefixIds\nUsing yarn\nyarn add --dev github:strarsis/svgo#prefixIds\nWhen not installing globally (npm install --global [...] or yarn global add [...]), \nan already globally installed svgo may be used instead the locally installed one (PATH precendence) - \nin this case, you have to explicitly specify the path to svgo command:\n./node_modules/.bin/svgo. @vzaidman: The prefixIds plugin wasn't specified in .svgo.yml, \nthis may have also been a reason for why it didn't work.\nThe plugin isn't active by default - should it always be used?\nprefixIds plugin can be explicitly activated when using svgo:\n./node_modules/.bin/svgo -i input.svg --enable=prefixIds -o output.svg\n@vzaidman: Just being curious about the use case for a callback for the the prefix to be used, \nshould the intended functionality also integrated into this plugin?. @vzaidman: So you got a set of files and you want to use the same prefix for that set of files?\nThe callback function could accept the filename/path as argument so it can decide what prefix to use?. @caub: \nThe API additions from the inlineStyles plugin PR also allow to use\n querySelectorAll(...) and getting/setting style element content.. FWIW, I just noticed that Illustrator CC offers 'Unique' for 'Object IDs' in SVG export options.. @GreLI: Conflicts fixed, ready to merge!. \ud83d\udc4d Yes!. Is this similar to this PR?: https://github.com/svg/svgo/pull/652. @alexjlockwood: There are jshint errors which prevent the tests to pass: \nhttps://travis-ci.org/svg/svgo/jobs/219732094#L246. @Crissov: Probably because files have changed while this PR hadn't been merged yet.\nNow changes by this PR and changes introduced in the meantime are conflicting \n(cannot be merged automatically).\nI guess it would be easier to just re-alphabetize the READMEs and \ncreate a new PR that can be just merged in (automatically).. It may be a nice solution to use liftoff as base for plugin loading.. Related PR for imagemin-svgo: https://github.com/imagemin/imagemin-svgo/pull/27. @posixpascal: I can enable a plugin using e.g. enable=chainFilters, maybe the = is required for it to work.. @ameesme: https://github.com/svg/svgo#cli\nhttps://github.com/svg/svgo/blob/c943b4c3bc0b77f1f48ae70826ac9b11f58ea326/lib/svgo/coa.js#L85\nMaybe the arguments parser is not flexible enough? svgo uses coa for CLI.. @stephan-v: Just ran into this in a PR for a new plugin which wasn't invoked by svgo.\nThe .svgo.yml states the available plugins (also listed by svgo cli command --show-plugins) \nand their specific order (plugin order is important). \nWhether a plugin is \"active\" (= enabled by default) is controlled in the plugin file itself, \ne.g. for minifyStyles plugin in https://github.com/svg/svgo/blob/master/plugins/minifyStyles.js#L5 .. CSS support for svgo, feature PR: https://github.com/svg/svgo/pull/592. @drschwabe: So the filter has to be daisy-chained with a CSS filter to make it work in this browser?. @drschwabe: PR ready: https://github.com/svg/svgo/pull/733. @drschwabe: Edit: chainFilters was missing in .svgo config file in feature PR and there were also \nsome other issues with creating a new  element. \nThis has been fixed now, thanks for your issue report. \nYou may need to reinstall from PR branch to get the current fixed code. </p>\n<p>Note: The chainFilters plugin isn't enabled by default, you have to enable it when using svgo so it is used:\n<code>svgo -i input.svg --enable=chainFilters -o output.svg</code>. @drschwabe: According to the SO thread you linked to the reason for the filter problem is not the browser but some incorrect markup/CSS used in the example?. @drschwabe:\nInput SVG from above:\n```svg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 77.701826 65.509313\" height=\"69.877\" width=\"82.882\">\n    <defs>\n        <style>\n          .filterA {\n            filter:\"url(.#a)\"; \n          }        <br />\n        \n\n\n\n\n\n\n````\n$ ./node_modules/.bin/svgo -i input.svg --enable=chainFilters -o output.svg\nOutput SVG:\n```svg\n.filterA{filter:&quot;url(#a)&quot;}\n````\nThe star icon is displayed in Chrome and also in Firefox.\nHave you really installed the last commit from the fork?. @drschwabe: Does it work now? \nEnsure to have from the latest commit installed when testing this plugin again.. @drschwabe: Right, because the <path> element uses the filter already by inline styles (style=\"[...];filter:url(#filter6239-1)\") and not by attribute (filter=\"url(#filter6239-1)\") - hence there is no need for changing it.\nHowever, the star icon isn't visible anymore in Firefox, so a CSS filter property alone doesn't seem to be sufficient - what has to be changed to make it work in Firefox? Must the filter property be in CSS class instead inlined?. @drschwabe: Test adjusted, I tested the output SVG (in test) and icon is displayed in Chrome and Firefox:\nhttps://raw.githubusercontent.com/strarsis/svgo/6964351c1a9ca3977446ad4574ce24e378b23827/test/plugins/chainFilters.07.svg\nFor cleanly and correctly implementing this, CSSStyleDeclaration interface from inlineStyles PR is required.\nYou may notice that the chain class got the name \"filterFilter\" - this is because \"filter\" is always prefixed to original filter ID name for the chain class name - so when the <filter> element already got \"filter\" in its ID name, \"filter\" is appears twice in resulting chain class name. If this happens often in (exported) SVGs (that \"filter\" is used in ID for a <filter> element), it may be worth to add an exception for this.\n@drschwabe: Just noticed that I have the same issue with an SVG using filters looking differently in Firefox.. @drschwabe: PR https://github.com/svg/svgo/pull/733 ready now.. @drschwabe: You can already test this plugin using:\n````\nusing npm:\n$ npm install github:strarsis/svgo#chain-filters\nusing yarn\n$ yarn add github:strarsis/svgo#chain-filters\n````. @GreLI: The filter bug is indeed a problem in Firefox - maybe this plugin should be enabled by default?\nCurrently the filter element is chained with the element using a CSS class with filter property via IRI.\nWould it be better to convert the whole filter element into CSS? - Would this be always possible?. @GreLI: What can I do for further speeding up the review/merge process?. @GreLI, @caub:\nArguments against merging this plugin into svgo:\n- It doesn't minify or simplify, rather it is a polyfill for a Firefox issue.\n- (When a plugin-as-package architecture has been implemented in svgo) This could also fit in a separate package.\n- I am biased because I made the plugin.\nArguments for merging this plugin into svgo:\n- This Firefox bug can be subtle and puzzling when suddenly some parts of the SVG are missing when viewed in Firefox. Just having this extra step will ensure this problem doesn't happen again for all SVGs processed by svgo.\n- One doesn't necessarily finds this bug when searching for it (I encountered this bug in a svgo issue created by another user and found the exact same symptoms).\n- This plugin can always be disabled or even removed when Firefox has this bug finally fixed.\n. With https://github.com/svg/svgo/pull/592 merged in, native CSS support is added - \nhow can it be used to fix this issue? Is this caused by a specific plugin?. @Crissov: Could this be helpful?: \nhttps://github.com/svg/svgo/blob/master/lib/svgo/css-select-adapter.js#L26. @GreLI: Yes, a new release to npm would be great! \nI have sometimes strange issues with other modules using svgo (imagemin-svgo).. svgo version 1.0.0 comes with a Promise based API, \nyou have to update some plugins/adapters for svgo.\n\n(webpack) svgo-loader: https://github.com/rpominov/svgo-loader/pull/17\n(imagemin/gulp/grunt) imagemin-svgo: https://github.com/imagemin/imagemin-svgo/pull/27\npostcss-svgo: https://github.com/ben-eb/postcss-svgo/issues/59\ngulp-svgmin: https://github.com/ben-eb/gulp-svgmin/issues/75. @caub: Yes, migrating to jsdom is the logical consequence in my opinion, \nit offers a great base for handling DOM and styles. \nAlso window.getComputedStyle(...) offers a much simpler and more elegant approach (besides possible caching/performance issues) than the current inlineStyles implementation.\n\nliftoff is another nice library for adding *file and plugin infrastructure.\nMaybe like in postcss where plugin can be installed by npm (e.g. my usedChars plugin).\nIMHO the most important part of svgo are actually the tests :)\nThey evolved over time and successfully take the large amounts of different SVGs eachday into account.. @graforlock: PR branch https://github.com/svg/svgo/pull/592 was just merged in - which offers native support for CSS.. @MegaUITeam, @theKashey: https://github.com/svg/svgo/pull/700 was merged now \ud83d\udc4d . @keeganstreet: With https://github.com/svg/svgo/pull/592 Element.classList property support has been added. \nUsing it in plugin should make the plugin much, much simpler and also fix this issue.. I prepared a PR with a test: https://github.com/svg/svgo/pull/821.\n. @GreLI, @zmwangx: Fixed, ready to merge.. @zmwangx: The conversion of styles into attributes (like color in your sample) \nis not done by inlineStyles but another plugin instead (propably convertStyleToAttrs).\nI guess the convertStyleToAttrs plugin requires an additional check for styles compatible as attributes.. @zmwangx: Good point - Because the convertStyleToAttrs can only convert inline styles to attributes, it isn't able to resolve other styles that come from <style>, it needs the inlined styles from inlineStyles in order to do that (although with issues).. @zmwangx: Btw, disabling convertStyleToAttrs fixes the problem, too. :). Is there already data about what properties are supported by what tags?\nsvgo already contains some data, but I cannot find something related to attribute support per tag:\nhttps://github.com/svg/svgo/blob/master/plugins/_collections.js\nMaybe on MDN.... @GreLI: So the original from designer.svg in the linked Gist is the input and \nthe SVG markup you put into this issue is the (inccorect) output? \nA test would be great for further debugging.\n@RTC1, @pavel-popov-jr, @hzlmn: \nInput SVG samples would be great.. I wrote a test and found out that it is actually a quite different issue, by default the inlineStyles plugin option onlyMatchedOnce is true - which results in only inlining selectors that matched once (this feature had been discussed in the inlineStyles PR). Of course, this should not break the SVG - so the bug is rather that with onlyMatchedOnce enabled, the processing isn't completely skipped, the classes/ids are still stripped.\nSo if you want to inline everything you should disable (set to false) the onlyMatchedOnce option anyway - this also skips the whole issue. It still has to be fixed though...\n@GreLI: Would it be a good idea having the option onlyMatchedOnce turned off by default instead \n\u2013 inlining everything that matches?. @GreLI: Fix ready https://github.com/svg/svgo/pull/828.. Related: https://github.com/svg/svgo/issues/734. Prepared a PR with test: https://github.com/svg/svgo/pull/849\nNote: It is the syncbase that is referenced to by ID, \nsyncbase being one of the allowed values \nof a <begin-value-list> (also applies to end attribute).\n@ssbb: I am not sure whether there is also a CSS equivalent (which would also have to be parsed).. @GreLI: This should become the basis for a fix. \nI added a test (which fails currently). I have to add a small parser for <begin-value-list> format.. @Landerson352: Inlining the styles shouldn't break an (SVG) image. \nIt would be great if you could open a new issue for this.. @sfoster: You may find the new API additions useful: \nhttps://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#queryselectorallselectors. @vzaidman: This is very similar to this issue (please also check out the code sample in that issue):\nhttps://github.com/svg/svgo/issues/913#issuecomment-369423275. @harrisjose: Good catch. There is an open issue about this in the css-url-regex module.. @surighanta: Something like this?: https://www.alexkras.com/compile-node-js-to-native-binaries/. @CH-RhyMoore: Apparently the prefixIds plugin is run before another \nplugin further changes the SVG (like changing the <def>/<use>).\nSo the prefixIds plugin either has to be moved further down to run after the other optimizations.. @CH-RhyMoore: Would you recommend extra parameters to be passed to \nthe prefixID callback function so this is easier in the future?. @CH-RhyMoore: \nIndeed, the prefixIds plugin should offer an additional option for appending or prepending to the filename as prefix instead just using it as the prefix (which would be the same for different input SVG files).\nAfter your explanation I think it probably makes more sense to actually rename the prefix option to hash.\nCurrently the prefix callback is called with parameters node and extra.\nIf no prefix callback was passed, the filename is extracted from the path to input SVG file.\nThis path is available in extra.path:\n```js\nvar filename = path.basename(extra.path);\nprefix = filename;\n````\nFor prefixing the filename by passing a custom prefix function you can use:\n```js\nprefixIds: {\n  prefix: function (element, extra) {\n    var filename = path.basename(extra.path);\n    ...\n    return filename + prefix;\n  }\n}\n````\nConcerning an improved option feature for configuring hashes used by the prefixIds plugin:\nWhat kind of structure should be used? What about something similar to what gulp-rename is using?\njs\n{\n  ...\n  prefixIds: {\n    hash: {\n      prefix: \"some prefix-\",\n      suffix: \"-some suffix\"\n    }\n  },\n  ...\n}\n````\nAnd for the current behaviour (just always using the same prefix):js\n{\n  ...\n  prefixIds: {\n    hash: \"use always this hash\"\n  },\n  ...\n}\nPreserving the ability to pass a callback function for generating the hash:\n```js\n{\n  ...\n  prefixIds: {\n    hash: function(node, extra){...}\n  },\n  ...\n}\nThen there is the delim option. Should it be skipped when a hash is passed? \nShould it be put between the suffix/postfix? In the end the user should always be able to completely modify the behaviour by passing a function for the hash.. @vzaidman: And for using the input file name for the prefix?. svgo --disable=prefixIds should disable the prefixIds plugin that prefixes IDs + classes.. I can improve/add comments if necessary. :)\n. OK, I replaced them with for-in loops with index variable.\n. Yes, csso separated the tree library (css-tree).. This was considered in https://github.com/svg/svgo/pull/592#issuecomment-244979133.\nFor cleaning up empty s, the empty Atrules have to be cleaned up first, too.\nA further run of minifyStyles plugin would clean them up, too (except the non-CSS  elements, this would have to be implemented there first).. As a CSS AST node only belongs to one parent node (and its list), it would be nice being able to access the list of an item directly (e.g. item.list) - currently with the item its containing list has to be kept for removal later.. Yes, this setting seems to subtly change how whitespaces are treated. With parseValue: false any custom/extra white space is preserved instead being nomalized.. Ideally it would be possible to get the containing list of an item so just the items need to be passed, currently the list of an item has to be stored with it together for removing itself later from the list.. All style property fields are trimmed now.. Changed here: https://github.com/svg/svgo/pull/592/commits/baa1ffe45b7fd5618ed1fc5a0ee1899b3879375d. A version range for css-tree releases from -alpha1 to (including) -alpha8?. Good point, I use perItem now.. The svgo architecture handles the config globally, it is harder to add per-plugin extra config than adding an extra argument to each plugin. Also this extra information is not config but rather environment/state instead.. Yes, the file path must be somehow injected into the config object for each file (or set to empty/false/null for a string input): https://github.com/strarsis/svgo/blob/67e5a3ef10e349bded15bc9f508596252c2884be/lib/svgo/coa.js#L437. How are you running svgo in the browser? \nWhen you use string input method, the path module is not needed.. @caub: webpack should be able to shim or at least ignore these node core modules: https://github.com/webpack/node-libs-browser. @alexjlockwood: Yes, this is intentional, it skips selectors that cause problems instead failing.\nI could add an option to the plugin for not showing these warnings \u2013 \nor one that shows warnings, enabled by default.\nThere is a quiet option in svgo \u2013 make the plugin use this, too?. @alexjlockwood: Should I merge this change into this PR branch?\nNo merge conflicts are reported, so it can be automatically merged in?. @alexjlockwood: Indeed, it is the convertStyleToAttrs plugin.\nThis PR also introduces the CSSStyleDeclaration interface - \nthe convertStyleToAttrs can be made simpler using the interface - \nand the issue is fixed, too.. @caub: Yes, a separate prefix config option is supported now (see https://github.com/svg/svgo/pull/700/files#diff-623dc50b643d62febf2af73ea1856b51R120).. @alexjlockwood: The console warnings have been now commented out in recent master commits (https://github.com/svg/svgo/commit/d828a621007e35732624e96041f23af6b276328e#diff-894234f5731c2854476a58abcef9d1c4R72).. ",
    "Joeynoh": "+1\n. +1!\n. Just my two cents: It makes sense that this plugin does not remove the style element, considering there is already a plugin that does. You can simply run them in sequence. Optionally, this plugin can perhaps call removeStyleElement, but should be set to false by default.\nCalling cleanupAttrs afterwards makes sense as well.\n. ",
    "chrisblakley": "Adding a +1 to this. I've got two SVGs from Illustrator that have conflicting classes/styles and would love an easy way to prevent this.\n. ",
    "wordofchristian": "Is the usage of this plugin documented anywhere?. Thanks for the help. For future searchers this is the usage I was looking for:\nsvgo path/to/file.svg --enable=inlineStyles  --config '{ \"plugins\": [ { \"inlineStyles\": { \"onlyMatchedOnce\": false } }] }' --pretty\nwhich will inline the style rules even if they are used multiple times. . ",
    "tarunmangukiya": "@wordofchristian Thanks man! Helped a lot!. ",
    "khashayar": "I have the same issue, removing type ruins the way animation works.\n. ",
    "bfred-it": "Gotcha. I solved by preventively merging the paths with Illustrator \"Unite paths\" command (Sketch's has a similar issue)\n. No?\n. Aaah, sorry, I didn't see the commit in the CodeHub, I only saw that it was closed\n. Thank you!\n. Non-destructive means that no content and struction should changed, essentially comments, whitespace, doctype, xml \u2014 basically the standard behavior of HTML minifiers\n. Do we agree that these two SVGs have the same content but one is lighter?\nsvg\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\">\n<rect x=\"5.2\" y=\"5.4\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"28.5\" height=\"28.5\"/>\n</svg>\nsvg\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\"><rect x=\"5.2\" y=\"5.4\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"28.5\" height=\"28.5\"/></svg>\nNo attributes were touched, but by removing comments, doctype and whitespace it was reduced by 43%\nI need svgo but sometimes I also need the integrity of the minified content to make it interactive or animated.\n\nThis issue is about presets, more than anything else. With presets one could easily disable/enable multiple plugins at once and get what's best for the situation without finding and listing all the necessary plugins by hand.\n. No, no, there was a misunderstanding. That was an ambiguous phrasing of mine.\nI meant to say only comments, whitespace, doctype, <?xml should be removed.\n. Yeah I prefer comments inside tags. They don't get lost among other attributes.\n. ",
    "rinatio": "+1\n. ",
    "isqua": "@GreLI, ok, thank you.\n. ",
    "sateffen": "Would this disable all removing?\nIf yes this would just be not a really cool thing, because other attributes should get removed.\nI just think about it, maybe a knockout sensitive plugin would make sense.\nIs there a possibility to load plugins from npm modules? Then I would write an external plugin, load it via npm in our CI, connect it with grunt (grunt-svgmin maybe?) and could use it this way.\n. Removing data-bind=\"...\" prevents knockout from working correctly^^\nWith other frameworks you define this binding-attributes by yourself, just like the names. It is a good way starting them with \"data-\", but not all people do this. Think about angular or rivets together with SVG. So exluding patterns would be cool, for my case not removing \"data-\" would be cool as well.\nWhat do you think about that? Or what are your plans about this?\n. The issue with the mimetype is not a thing with other tools. If you use\nxdg-mime query filetype logo.svg\nthis should print \"image/svg-xml\", because this tool uses the mime-type database of your OS instead of the file content.\nSo depending on the tool, you should get the correct mime-type. This could confuse some people as well, if you tell them \"the mime-type changes\".\n. This looks like ionic has similar dependencies, but for different versions. But the problem is npm I guess.\nTry:\nsudo npm cache clean\nsudo npm install -g svgo\nThis cleans your npm cache, and often times this fixes the \"unmet dependency\" thing.\n. You can see all plugin-names in the config file: .svgo.yml \nOtherwise one could argue that this:\n- [ > ] cleanup attributes from newlines, trailing and repeating spaces\ncould turn into this\n- [ cleanupAttrs ] cleanup attributes from newlines, trailing and repeating spaces\nSo it contains the name itself with a description. Do you think this would help?\n. ",
    "cibulka": "+1!\n. ",
    "aidansteele": "Why was this closed?\n. Thanks for such a quick response. Is there a solution on the horizon for the issues linked in the PR?\n. I would suggest that such a regex-stripping solution could be implemented as a plugin, but plugins appear to be executed after sax-js rejects the file. \nGiven the \"hackiness\" of a such a regex solution, it still seems like it should be a plugin rather than core functionality - maybe the plugin architecture could be enhanced to support plugins running earlier in the pipeline? I'd be happy to write a plugin to fix this issue, but changing the plugin architecture might be better suited to someone more familiar with the codebase.\n. Hi,\nThanks for the response. The change isn't to the \"s\" at the end, but the extraneous \"e\" in the middle. :)\n. ",
    "mhoffmeyerDC": "Disabling strict mode broke many of the tests, I think it caused some rounding errors in the SVG.\n. The original issue I was having was svgo failing over an SVG with the Adobe Illustrator \"preserve editing capabilities\" mode enabled . It had some weird namespace convention or character that made sax-js, in strict mode, fail. I guess another solution would be to use a regex to check for that string that sax doesn't like and replace it or delete it.\n. ",
    "eitanp461": "+1\nI am trying to optimize SVGs created wihj Adobe illustrator and the entity references cause sax to fail, i.e. .\nIs there any workaround?\n. ",
    "dangodev": "@GreLI I don\u2019t really understand your comment; could you please explain?\nI was saying that svgo changes the MIME types for SVGs on my machine with the svgo command. I don\u2019t understand how this is an OS issue.\n. \nlogo.svg is an SVG saved straight out of Illustrator.\n. Ah\u2014I understand now. I didn\u2019t understand that MIME was a result of file contents, in this case the <?xml ...> doctype like you specified. I guess that makes sense\u2014I can\u2019t imagine where else the MIME would exist other than file contents, but that hadn\u2019t occurred to me.\nMight I suggest adding this as a line in the README? It might be useful to other users as well\u2014I searched the README before making this issue and MIME didn\u2019t appear. Many others may be in the same boat: they may not know that MIME and doctype are one and the same.\n. Well, then.\nThank you for educating me and sorry for opening up a non-issue. :) (no, seriously\u2014thank both of you guys!)\n. @PezCoder I didn\u2019t really \u201cfix\u201d it; I just stopped relying on MIME type because it\u2019s dependent on the contents of the file. It\u2019s metadata, and technically unnecessary which is why I guess SVGO removes it by default\u2014it kind of exists to strip unnecessary metadata from the file to compress it. In other words, I\u2019m now aware that MIME type is volatile and unpredictable based on a number of factors.\nAs for which SVGO flag keeps the MIME type metadata in the file, I can\u2019t say. But for my purposes I just rely on file extension now rather than MIME type.\n. ",
    "PezCoder": "@dangodev How did you fix it finally ? This : svgo --disable=removeDoctype is not working for me but after adding that xml you mentioned manually it worked.\nWould be handy if I can get the above command to word.\n. ",
    "siddhion": "I see but I still get the errors. \n```\n$ sudo npm cache clean\nmax@mythic ~/dev/3lf (desktop-state *%)\n$ sudo npm install -g svgo\n/usr/bin/svgo -> /usr/lib/node_modules/svgo/bin/svgo\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/connect/node_modules/multiparty/node_modules/stream-counter requires readable-stream@'~1.1.8' but will load\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/connect/node_modules/multiparty/node_modules/readable-stream,\nnpm WARN unmet dependency which is version 1.1.13-1\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/pullstream requires readable-stream@'~1.0.0' but will load\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/readable-stream,\nnpm WARN unmet dependency which is version 1.0.27-1\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/match-stream requires readable-stream@'~1.0.0' but will load\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/readable-stream,\nnpm WARN unmet dependency which is version 1.0.27-1\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/pullstream/node_modules/slice-stream requires readable-stream@'~1.0.2' but will load\nnpm WARN unmet dependency /usr/lib/node_modules/ionic/node_modules/unzip/node_modules/readable-stream,\nnpm WARN unmet dependency which is version 1.0.27-1\nnpm ERR! Linux 3.13.0-24-generic\nnpm ERR! argv \"node\" \"/usr/bin/npm\" \"install\" \"-g\" \"svgo\"\nnpm ERR! node v0.10.26\nnpm ERR! npm  v2.1.2\nnpm ERR! code EPEERINVALID\nnpm ERR! peerinvalid The package generator-karma does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer generator-angular@0.10.0 wants generator-karma@>=0.8.2\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/max/dev/3lf/npm-debug.log\n```\n. ",
    "iliakan": "Maybe release a new version with this fix?\n. Looking forward to test it on my svgs :)\n. @GreLI please release a new version when you feel like it's ready :) \nI'll retest immediately.\n. ",
    "jakearchibald": "This would help with SVGOMG, where I keep a clone to avoid having to reparse the SVG per settings change. I'm currently doing really hacky things & the parentNode change broke the hack.\nI'm happy to create JsAPI.prototype.clone for this - any objections @GreLI?\n. Wow that was fast, thanks!\n. Made it non-enumerable again\n. ",
    "una": ":+1: to this feature. It could also be a flag within the tag itself to skip optimization of that particular svg. i.e. an svgo or optimize property:\n<svg svgo=\"false\" width=\"14px\" height=\"14px\" viewBox=\"0 0 14 14\">\n    <rect id=\"whatever\" x=\"0\" y=\"6\" width=\"12\" height=\"3\"/>\n</svg>\n. like in the svg tag: svgo=\"false\" <-- because sometimes optimizing SVG's breaks added (hand-coded) functionality. In most cases, I want the majority of my SVG's optimized, but not all of them.\n. ",
    "betsydupuis": "Do you mean that you can't duplicate, or you are unsure of what is causing the issue?\n. I can try to work on it this weekend and submit pull request. Would that help?\n. I have a commit ready to make a pull request. Should I create the request to the 'next' branch?\n. I wasn't sure which branch to go to. So, I make the request to master?\n. Thanks for the merge, that was kind of a quick fix for my problem, but I could see where this might be a pain point for others in the future it they still want the rest of the styles. \nFor my purposes, I'm just building a single color sprite, so the fewer attributes and styles the better.\nWhen using scripts to export SVGs, I couldn't get illustrator to stop exporting that base 64 font. I tried making an action to outline fonts and change other export settings. \nWhat are your thoughts? \n. I can do some research on this and get back to you. \n. ",
    "TadWohlrapp": "I get the same error when using @betsydupuis' code, but it works when you add the width and height attributes like this:\nsvg\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 18.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\">\n<polygon points=\"93,75 49.5,100 6,75 6,25 49.5,0 93,25 \"/>\n</svg>. @GreLI, you're right. I confused it with https://jakearchibald.github.io/svgomg/ where the error currently occurres. Sorry for the mixup, I might have had too many tabs open at once.. ",
    "beckdavies": "Thanks, I've just tried your suggestion and the ID's are still being removed. \nI've tested ID's on path as well as svg tags - both are removed.\n. ",
    "dbdr": "I found that disabling the removeUnknownsAndDefaults plugin fixes this issue for me (removing the id of the root svg element).\nIt's not ideal though, because that also disables some desired minification, and the behaviour is definitely not very intuitive.\n. Thanks for the info, great if it's possible to do. The naming of the options is still confusing though. Would it be reasonable to make removeUnknownsAndDefaults not touch the SVGid, and move that task to cleanupIDs?\n. ",
    "kopax": "Hi, I am trying to keep my IDs, because the CSS and JS customization for my animation are made outside the svg, is that possible ?. How can I configure the workaround without ejecting my create react app ? . Thanks, I have sorted out myself by disabling these plugins:\n\ncleanupIDs: false\nremoveHiddenElems: false\nremoveEmptyContainers: false. \n",
    "Zeneixe": "I have the same problem, removeTitle and removeDesc do not work\n. @ganlanyuan can you try to add --multipass to your command line? It fixed the issue for me!\n. Yes, clearly I added more parameters for input and output files...\nMore specifically I used --config=\"custom.yml\", with quotes\n. FYI I also have put all the options in the : false and : true format\n. I use a custom config file that enables everything except for those tu, when I enable them they corrupt the image (the lens disappears making the vector basically in the shape of a rectangle.\nI reproduced this problem on two different machines, tomorrow I will double check the versions installed.\n. Have you tested the file I linked? It breaks even using svgomg website.\n. It works with all options except these two\n. First bug:\n1) Open https://jakearchibald.github.io/svgomg/\n2) Upload the file I linked earlier: https://gist.github.com/Fuffi/f6e039071d21e3f2f88c\n3) Enable \"Remove useless stroke & fill\"\n4) Notice how part of the original image disappeared\n. Second bug:\n1) Open https://jakearchibald.github.io/svgomg/\n2) Upload the file I linked earlier: https://gist.github.com/Fuffi/f6e039071d21e3f2f88c\n3) Enable multipass\n4) Enable \"Collapse useless groups\"\n5) Notice how part of the original image disappeared\n. Good news, and now you have a couple of good reproduction cases if you wanna test your next release\n. ",
    "optimix-designer": "Hello Lev,\nFirst of all, thaks a lot for this great tool! :)\nI tried to implement some custom settings to not disable several features like removing a viewbox. However, my attempts failed. \nI've created a custom-svgo.yml file with the following code inside:\n```\nCustom settings\nRewriting some default settings\nvar config = {\n  plugins: [{\n    removeViewBox: false,\n  }]\n}\n``\nThen I sent the following command:svgo --config=\"/file/location/custom-svgo.yml\"`\nBut it didn't work. Tried to place it in different locations, with and without quotes, with and without '--multipass' option as others suggested \u2013 nothing helped :( Each time I get notes how to set a query properly:\n\nCan you please help me to figure out what I'm doing wrong? Thank you in advance!. ",
    "elessar-ch": "Apparently it's again broken in v0.6.1.\nRan the file @blakelapierre submitted. The outcome is a bit different than his initial result, but still broken.\n. ",
    "erikdahlstrom": "Note that vector-effect=\"non-scaling-stroke\" is also part of SVG 2, if that influences anything. I think 'non-scaling-stroke' has been supported by most browsers for a while now.\nSee https://svgwg.org/svg2-draft/painting.html#VectorEffectProperty.\n. ",
    "jrunning": "+1\nIn addition to documenting the available plugins, it would be helpful if each of their configuration options was documented. At present it's not at all easy to figure out what a plugin does and what options are available for it.\n. ",
    "ikokostya": "Disabling mergePaths plugin resolves this issue.\n. ",
    "sc0rp10": "Lev, i'm newbie witn npm. How can i update globally installed svgo with npm?\n. ",
    "bastnic": "Same as #336, whicheas has a test case.\n. ",
    "beam2web": "Hello GreLI,\ni drawed a logo with Inkscape and optimized it with the grunt-svgmin plugin. When i set the option removeHiddenElems: true, i missed some lines, but in the original the lines aren\u00b4t hidden. Here are my testfiles:\nhttp://beam2web.com/removeHiddenElems/compare.png\nhttp://beam2web.com/removeHiddenElems/before.svg\nhttp://beam2web.com/removeHiddenElems/after.svg\nMaybe the trouble comes from the kind of drawing the logo, but i'm not sure, what i should change.\n. ",
    "nhusher": "Thank you!\n. ",
    "tssajo": "I can also show you one which gets broken when minified with v0.5.1 while it did look fine when processed with v0.5.0\nYou can download the original and the broken SVG files from http://www.tssajo.com/github/svg_got_broken.zip\n. Yeah, but the main problem is that the resulting minified(!) file is 0 bytes long. (Not talking about the STDERR output here.)\nSo I'm guessing here, maybe svgo somehow detects that STDERR is being PIPEd then in turn it may try to get the input (original svg data) from STDIN as well?? This would explain the 0 bytes long minified file output.\nAgain, the other minifier CLI tools (e.g. uglifyjs, etc.) are also written in node.js and they work just fine when I run them from Python's subprocess.Popen method. Only svgo fails, it does not minify the specified input file, it creates a 0 bytes long minified file instead. Which I would say is a major problem.\n. No, it is not realated to node version.\nI've made really good progress on this issue, here are my findings:\nBy entering the following command into a Windows command prompt (CMD.exe) :\nsvgo car.svg car.min.svg 2 > null\nI get the zero bytes long minified file as a result and I can see an error message on the screen which is coming from svgo I assume:\nUnknown argument: 2\nBut if I run this:\nsvgo car.svg car.min.svg 2> null\nthen it works fine.\nNotice the difference: there is no space between 2 and > !\nSo maybe on Windows, when shell=True is set for the pOpen function then Python places a space there between the 2 and the > characters? I'm not sure about this, but this would be a reasonable explanation.\nAnother thing which I found out is this:\nIf I do redirect both STDOUT and STDERR like this:\np = subprocess.Popen(['svgo', 'C:\\_projects\\_test\\car.svg', 'C:\\_projects\\_test\\car.min.svg'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)\nthen I do not encounter the problem!\nI do not exactly know why, but at least it gives me a workaround solution.\n. Because I found a workaround, I close this.\n. ",
    "andrei1089": "I've tried with the latest version (https://github.com/svg/svgo/commit/97a260bbf3a75764f250a56422b97719b9768a63) but the following image is still broken: https://drive.google.com/file/d/0BwW_lFF0AAQZNHVJdXQwSEZEY0E/view?usp=sharing\n. ",
    "rmaksim": "same problem with 0.5.1\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\">\n  <g transform=\"translate(0,-1039.3622)\">\n    <path\n       d=\"m 1,1050.3622 -1,-1 10,-10 1,1 z m -1,-10 1,-1 10,10 -1,1 z\"\n       style=\"fill:#f00;\" />\n  </g>\n</svg>\noptimized into\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\"/>\nin 0.5.0 it was\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\">\n    <path d=\"M1 11l-1-1L10 0l1 1zM0 1l1-1 10 10-1 1z\" fill=\"#f00\"/>\n</svg>\n. ",
    "insane-developer": "Will it fix same problem with this svg?\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"15\"><path d=\"M 4,1 2,13 9,13 7,1 4,1 Z\"/></svg>\nafter svgo 0.5.1:\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"15\"/>\n. ",
    "owenhoskins": "+1\n. ",
    "rowild": "Stupid me - the error was in the next file, not the one I posted. Sorry for this useless post!\nAny chance to tell grunt to spit out the file name along with the error?\n. ",
    "apexskier": "I'd find this feature useful as well if it was able to flatten matrix transforms.\n. ",
    "aagd": "+1 for adding this feature\n. ",
    "AntiFish03": "same issue as #339\n. ",
    "cooperaj": "Missing elements. In this case two missing letters (whilst the others are\nfine) and a missing laser beam type affair. I\u2019ve since disabled the plugin\nand rebuilt so don\u2019t have the broken image around. I can rebuild if you\nlike but the image linked in the gist above is the one that breaks.\nOn Wed, 22 Apr 2015 at 17:10 Lev Solntsev notifications@github.com wrote:\n\nWhat do you mean by breaking?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/svg/svgo/issues/347#issuecomment-95250854.\n. \n",
    "revolunet": "sorry\n. ",
    "AprilArcus": "Is this looking ok?\n. I totally respect your desire to avoid scope creep. I do feel feel that this plugin falls within the domain of optimization - by applying a CSS class with appropriate styles, we are able to move style information that must be repetitively specified on a per-SVG basis into a stylesheet, reducing the aggregate size of our assets.\n. Thanks, I'll take this issue.. ",
    "A1bi": "Until #296 becomes a thing, this should really be merged.\n. ",
    "jimniels": "Still doesn't work for me ... Same issue as mentioned here https://github.com/sindresorhus/grunt-svgmin/issues/38\nsvgo -v\n0.5.1\n. That appears to have worked! Disabling mergePaths in my grunt config seems to have solved the issue:\noptions: {\n    plugins: [{mergePaths: false}]\n},\nWith this, my svgmin task ran through all the files and optimized them just fine.\n. ",
    "vmarkovtsev": "Thanks!\n. ",
    "stevemao": "https://github.com/imagemin/imagemin-svgo/blob/master/index.js#L32\nThe buffer has to be converted to a string.\nhttps://github.com/imagemin/imagemin-svgo/blob/master/index.js#L39\nThe string has to be converted back to a buffer.\nThese make things much slower when working with stream. \nhttps://github.com/creationix/jsonparse/blob/master/jsonparse.js is a streaming JSON parser and it might be a good example of working with stream.\n. Yup\n. Should probably add this link in README if you don't want to put programmatic api in the docs?\n. Sounds good. Thanks for the information @GreLI :D\n. ",
    "soswow": "Or even use promises right away ;-)\n. ",
    "DamonOehlman": "I've just seen the same thing with an inkscape SVG :(\nUsing --disable=cleanupIDs provided a cleaned up output that looked as expected.\n. I'll see if I can.  Unfortunately the SVG files that failed are not mine, but let me see if I can create something similar that reproduces the problem...\n. ",
    "LoicMahieu": "In fact this does not throw an exception on v0.5.1 cause to CLI seems ignore errors.\n``` js\nvar svgGood = [\n  '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n  '',\n  '',\n  '  Hello',\n  '  ',\n  '',\n  ''\n].join('\\n');\nvar svgWrong = [\n  '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n  '',\n  '',\n  '  Hello',\n  '   ',\n  '',\n  ''\n].join('\\n');\nvar SVGO = require('svgo');\nvar fs = require('fs');\nvar path = require('path');\nvar findup = require('findup');\n// Get version\nconsole.log(\n  'SVGO version:',\n  JSON.parse(\n    fs.readFileSync(\n      path.join(\n        findup.sync(require.resolve('svgo'), 'package.json'),\n        'package.json'\n      )\n    )\n  ).version\n);\n// Run\nvar svgo = new SVGO();\nsvgo.optimize(svgGood, function (res) {\n  if (res.error) {\n    console.log('Never called !', res.error);\n  }\nconsole.log('svgGood is good! Result:');\n  console.log(res.data);\n});\nsvgo.optimize(svgWrong, function (res) {\n  console.log('Never called but throws an exception!');\n});\n```\nOutput:\nSVGO version: 0.5.1\nsvgGood is good! Result:\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"300\"><text x=\"20\" y=\"40\">Hello</text></svg>\n/private/tmp/test-svgo/node_modules/svgo/lib/svgo/svg2js.js:155\n        while (end && !end.text) end = end.content[end.content.length - 1];\n                                                              ^\nTypeError: Cannot read property 'length' of undefined\n    at trim (/private/tmp/test-svgo/node_modules/svgo/lib/svgo/svg2js.js:155:63)\n    at Object.sax.onclosetag (/private/tmp/test-svgo/node_modules/svgo/lib/svgo/svg2js.js:125:13)\n    at emit (/private/tmp/test-svgo/node_modules/svgo/node_modules/sax/lib/sax.js:615:33)\n    at emitNode (/private/tmp/test-svgo/node_modules/svgo/node_modules/sax/lib/sax.js:620:3)\n    at closeTag (/private/tmp/test-svgo/node_modules/svgo/node_modules/sax/lib/sax.js:861:5)\n    at Object.write (/private/tmp/test-svgo/node_modules/svgo/node_modules/sax/lib/sax.js:1294:29)\n    at module.exports (/private/tmp/test-svgo/node_modules/svgo/lib/svgo/svg2js.js:144:9)\n    at SVGO._optimizeOnce (/private/tmp/test-svgo/node_modules/svgo/lib/svgo.js:56:5)\n    at SVGO.optimize (/private/tmp/test-svgo/node_modules/svgo/lib/svgo.js:48:11)\n    at Object.<anonymous> (/private/tmp/test-svgo/test.js:52:6)\n. ",
    "fsalomon": "$ svgo --version\n0.5.1\n. ",
    "betula": "Thank you very much!\n. It's awesome! Thank you very much!\n. Sorry, I added stroke after the transformation, but it is not correct.\nEverything works fine paths with stroke not apply transformation.\nThank you for a great tool!\n. ",
    "dnewcome": "Thanks for taking a look at this PR. I will fix the code styling. However I'm not understanding where the paths differ from the circle. If I look at a subset of my test case here with exaggerated semi-transparent strokes they appear coincident. Intuitively there should be some programmatic way of handling the difference in any case.\nHere is what I'm looking at:\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"100\" cy=\"100\" r=\"20\" stroke=\"rgba(255,0,0,0.5)\" stroke-width=\"10\"/> \n    <path stroke-width=\"10\" stroke=\"rgba(0,0,255,0.5)\" d=\"M80 100a20 20 0 1 0 40 0 20 20 0 1 0 -40 0z\"/> \n</svg>\n. Ah, I understand what you are saying now - I had interpreted \"longer\" as geometrically longer. \nIn my use case I normalize a set of svg files for use as icons where I can only handle pure path data. So I use svgo as part of a build process to normalize everything to paths, not necessarily to optimize 100% for size (although svgo does a very good job of getting rid of all Adobe-related junk, which I also need as part of the process).\nIf you don't think that converting circles lies within the domain of this plugin or svgo in general I fully understand. If you would accept it as a separate plugin I will change the pull request.\n. ",
    "src-code": "@GreLI @dnewcome I'd be interested in seeing this functionality supported, if not in the convertShapeToPath plugin then some other plugin.  (It seems to make sense in this plugin however, based on the name.)  Any chance we could resurrect this somewhere?\n. ",
    "sparr": "@GreLI as someone starting to write a program with both \"svg\" and \"optimize\" in the name and considering attempting to implement it as a svgo plugin, I want to comment here that \"file size\" is not the only thing that might be optimized. \"more bytes which is opposite to purpose of optimization\" is a very narrow interpretation.. ",
    "e-cloud": "The funny thing is, in this repo i can't find out how to config the plugins via programatic API, but I just find out how to use from here\n. sorry, I find out it's broken by yarn's clean command.. ",
    "icunioli": "OK, found it. I had to disable some plugins (removeHiddenElems & cleanupIDs) to make it work.\nSorry to bother you!\nThanks!\n. Might it be because of the display: none attribute on the <svg> element?\n. ",
    "olizilla": "I had the same problem, and had to disable both plugins to fix it\nsh\n svgo --disable=cleanupIDs --disable=removeHiddenElems svgdefs.orig.svg svgdefs.svg\n. ",
    "feel": "Cool thanks (and late ;))\n. ",
    "steveoriol": "Try to use option \"convertPathData\"\nsh\nsvgo source.svg -o output.svg --disable=convertPathData\n. I have the same issue with svgo v1.1.1. ",
    "aTei": "Didn't help. Played with other plugins. Disabling removeUselessStrokeAndFill helped.\nSo looks like this plugin has bug.\n. Oh, you are right. I was using 0.4.4. After update to 0.5.2 it works nice. :+1: \n. ",
    "villanus": "Thanks!  exactly what I needed.   Does it require node or just any http server?\n. I couldnt make it work int he browser so went back to the node version.   I am going to open a different issue, as I cannot get the remove viewbox to do anything. \n. so its useless =)\n. You can scale a SVG without viewbox\n. ",
    "leo60228": "No, it removes it if it is the default. Viewbox allows for scaling (like any sane person who's using SVG does).\n. ",
    "pierrei": "Thanks for figuring out what the problem was! This file was generated automatically by Sketch and obviously can be rendered properly even though it has errors. To me this means cleanupIDs should be improved to handle this case to not silently remove stuff that actually renders okay. Maybe svgo could run a SVG validation on the input file and warn the user if the file is violating SVG standards? Right now we had no idea this was the case when running the tool :/\n. ",
    "juangl": "Thank you. That solves the problem.\n. ",
    "kt3k": "But enforcing the consistent style to every contributer is a good way to keep the quality of codebase, especially in open collaborative environment. Nobody wants to see code in broken style and discusions over style tend to be fruitless.\nAnyway I reverted the quotmark modification and turned off quotmark checking in coa.js.\n. I reverted changes of equality operators and set -W041 option to false in  .jshintrc (this is necessary to stop warnings of use of ==).\nBut in general == operator is not a good thing because it invokes implicit coercion and could be a bug prone...\nhttp://www.codeproject.com/Articles/182416/A-Collection-of-JavaScript-Gotchas#double-eq\n. I turned on lastsemic option, which suppresses the warnings of omitted semicolon only in the one-liner functions, and turned W008 option off, which suppresses the warnings about the omission of leading decimal 0.\n\nRemoving var in for loop can blow if the another for, where the var is declared, is gone.\n\nI turned off warnings of double definition of vars in convexHull. (-W004)\n\nRounding function in convertPathData.js is actually broken\u2013it's intentionally replaces itself with the corresponding function in the first execution (we know precision only from passed parameter).\n\nOK, I reverted this part. jshint doesn't seem to have the option to suppress this warning, so I turned off lint for this line.\nAnd finally I reverted a2c's change as well (and made jshint ignore it.)\njshint is not only for styles but also can detect simple errors like spelling mistakes or scope errors, and basically it reduces human efforts around writing source code, and therefore I recommend keeping .jshintrc in this repo.\n. ",
    "swisstofu": "Hello, I confirm that @GreLI 's commit solves the fix, but doesn't seem to be released yet. when do you think it will be ? thanks\n. Works well, thanks.\n. ",
    "teeeg": "Hey I'm also having this problem -- can you please cut another release with this patch? \nthere's no tag for it in npm at the moment. Thanks! \n. Thank you!\n. ",
    "jtheletter": "It is unexpected behavior for SVGO to strip width and height from the SVG element, as these are necessary for correct display in Internet Explorer when SVGs are used as background images. \nSVGO should not strip width and height from the SVG tag by default. If removal of width and height is desired for some cases, that should be an option for users to choose in such cases. \n. Aha. You are correct. It was Adobe Illustrator that had stripped them before SVGO was even run. Thank you. \n. \n. Confirmed. Thank you. \n. ",
    "collinanderson": "This feature would be nice. I assume it would have to stop eventually, right? :)\nI want it \"optimized\", not just smaller. :)\n. ",
    "jimlamb": "How about an optimization level (like optipng) where it runs until it meets a threshold. My biggest concern is that running it a second time shouldn't change the file at all. When you're keeping your SVGs in version control, SVGO is a nice way to normalize them, but not if it modifies the file on every invocation.\n. ",
    "Kreozot": "I'm glad you asked. Because first i was thinking that \"full\" flag is what i wanted. But with it \"floatPrecision\" parameter doesn't work. And also it is not documentated (so I don't figured out what is this for).\nIf you say that \"full\" flag is for ignoring the default config, so it still needs some code and documentation changes.\n. So, @GreLI, what's your decision?\n. Can I speak with you on russian? Because i don't follow you.\nTwitter/mail? What do you prefer?\n. Hello!  @GreLI! Anybody!\n. :+1: Thanks\n. ",
    "bradbarrow": "Thanks @GreLI - I noticed the build has broken on this change - I was intending to fix that error this morning. Is that something you can fix easily?\n. Hey @GreLI what's the plan looking like for this change?\n. Ah, I see a release just recently! Thanks :+1: \n. ",
    "stephanedemotte": "+1 quick export to svg from photoshop CC add style,\nIt could be cool to remove it :)\n. ",
    "ianmcgregor": "I also have a use case where I need to copy the contents of CSS classes in <style> blocks outputted by Illustrator/Photoshop into attributes to make them work with SVG Symbol sprite sheets.\nThe plugin @GreLI mentions (convertStyleToAttrs #427) makes it a lot easier, but there is still a manual step of copying the classes in the <style> blocks into style attributes.\nWould it make sense if there was a separate plugin for this or for it to be rolled into convertStyleToAttrs or as part of the proposed 'remove <style>' plugin?\n. ",
    "rachelnabors": "Also came here for this.\n. ",
    "m5o": "@GreLI Thank you for your answer. \nDo you also have some infos about the unnecessary <g id=\"foo\"> wrapper?\n. ",
    "colindresj": "Cool thanks. I'll give that a shot for now\n. ",
    "hh9527": "Any progress to this issue?\n. ",
    "Jakobud": "I will dig up an example of the situation I'm referring to and get back to you.\n. ",
    "snorripall": "Was having the same problems via image-webpack-loader. \nYou might want to set removeUselessDefs to false. \nWebpack config\n{ test: /\\.(jpe?g|png|gif|svg)$/, loader: 'file!image-webpack?{ svgo: { plugins: [ { removeUselessDefs: false } ] } }' }\n. ",
    "ThisIsMissEm": "@GreLI we (@snorripall and myself) did that and our iconmoon fonts work \u2014 it's because all the content of svg fonts is in <defs>. \n. ",
    "olegskl": "Seems to be working with removeUselessDefs: false.\n. ",
    "tenhobi": "How can I use 'removeUselessDefs: false' in console? I normally do something like:\n$ svgo -f ../path/to/svg/image.svg -o ../path/to/svg/image.min.svg\n. ",
    "qbaty": "Agree to @onlymega , I try to use js to draw svg instead of use svg as image. \nI want my svg is all made by Paths.. ",
    "SnooHD": "@onlymega would also like to see this implemented.\nMaybe as an optional argument which is off by default?. ",
    "drw158": "Thank you! I'll leave the attribute in.\n. ",
    "oyeanuj": "@GreLI Can we revisit this? Colors also doesn't play well with Webpack (https://github.com/Marak/colors.js/issues/137), and given that it hasn't been updated in 2 years, seems unlikely.. ",
    "Quentie": "@waldyrious Yes this looks like what I was thinking off ...\n. I have not tested inkscape's 'simplify' (just had a look at their user manual to see what waldyrious was talking about...). \nJust wanted to say that this is generally what I was thinking about (no clue, if it is implemented in a good or bad way).\n. ",
    "hugolpz": "You have http://bost.ocks.org/mike/simplify/ which has some witty js code for line simplification.\n. ",
    "jeromew": "for reference, this module seem to also approximate a linestring with bezier curves - https://www.npmjs.com/package/turf-bezier\n. I post this in case someone wants to work on this for svgo (I only discovered svgo via this github issue).\nHere is the smallest (server-side + canvas-less) sequence I could find to use the PathFitter of paper.js mentioned by @behdad  in order to approximate a path with curves. The compression results are indeed impressive even for complex linestrings and high tolerance.\njs\nvar paper = require('paper');\npaper.setup();\nvar parser = require('html-attribute-parser')\nvar tolerance = 0.01;\nvar d_source = \"M20,20L80,80L140,20Z\";\nvar path = new paper.Path({pathData: d_source })\npath.simplify(tolerance);\nvar svg = path.exportSVG({ asString: true});\nvar d_target = parser(svg).attributes.d\n. ",
    "twardoch": "I looks like a very low-hanging fruit to use the model of the convertPathData plugin and to incorporate the above minimal example that uses paper. The convertPathData plugin already has the code that allows you to isolate any given d string, and then the above example does the rest. The tolerance could be in the plugin parameters. \nI\u2019m not a JS dev at all, but for anyone familiar with JS, it\u2019d be a 10-minute job to create a simplifyPaths.js plugin for svgo that simply relies on paper.js and does just that! . And please make it work with pkg so it can be turned into standalone executables. \npkg chokes on the svgo dynamic plugin loading method and on some coa stuff, so I had to hack around when making my standalone executable svgop version \u2014 more at https://github.com/svg/svgo/issues/783 . (I also briefly thought on taking on https://github.com/svg/svgo/issues/411 but realized that I\u2019m far too slow with writing JS. But anyone else is most welcome to tackle that one! :) ). . ",
    "crybat": "Thank you for answering.\nI tried running $ svgo --disable=removeUselessDefs svg.svg with the same result.\nremoveUselessDefs doesn't even show up when I run svgo --show-plugins.\nsvgo -v\n0.5.6\n\nEdit: Nevermind, it worked. However, it's strange the plugin doesn't show. Is this expected behaviour?\n. Oh wow. I do. Must have had a brain fart or something. Sorry.\n. Yea, I figured that out. Thanks.\n. ",
    "TrySound": "/cc @GreLI\n. @GreLI Thanks!\n. :+1: \n. https://github.com/ben-eb/cssnano-cli\nhttps://github.com/ai/autoprefixer-cli\nhttps://github.com/code42day/postcss-cli\n. @GreLI Any thoughts?\n. @GreLI You can firstly just make svgo-cli which will be dependent on svgo. Dependencies will be deduped.\n. @GreLI For you it's not a big issue. For us yes. Web should be small in every ways.\n. ",
    "nathanuphoff": "Furthermore, change translate=\"transform(10,10)\"  to x=\"10\" y=\"10\" (shorter). And better yet, (optionally) inline styles to style=\"properties:here\" which is in anmost any case the shorter syntax. Cheers.\n. Actually four is the threshold after which style becomes the more efficient option. Not worth it I would say: http://d.pr/i/1jB6A\nI did not know about the x and y\u2019s limitations in that regard. Thanks.\n. @nt1m Clear. I\u2019m pretty fresh to svg outside Sketch.app until some things annoyed me and I had to take a look below the surface. Consider me a newbie to the matter. It\u2019s like learning html all over again, including all the quirks. \n. I see your point, I guess it comes from just about any svg drawing application somehow getting their rounding messed up: whole points get values like 0.01245423. This off course has nothing to do with SVGO yet is annoying the life out of me all the same.\nA precision setting for 0 (round to point), and .5/.25 (half/quarter point) would be amazing either way, despite it having not much to to with size optimization. Cheers.\n. Thats why tabs where invented, so you can make the editor decide. \n. @lipis Tabs have the advantage that every developer can set their preferred tab width and they\u2019re done with it. Spaces can\u2019t do that, so you prefer two, and someone else will want four which depicts exactly where spaces suck. You can argue over why two spaces is better than four but with tabs you don\u2019t need to. No arguing, no reformatting wars, no bullshit trivial sh- but code without forcing your amazing superior style on everyone.\nThere you are, and there\u2019s a complimentary link: http://images6.fanpop.com/image/photos/35100000/Norman-leon-35112912-245-150.gif\n. ",
    "nt1m": "@nathanuphoff I think the W3C recommends inline attributes instead of inline styles. In fact, some CSS properties act differently than their SVG equivalents (transforms for example).\n. @GreLI \nAn example:\n<!-- This Source Code Form is subject to the terms of the Mozilla Public\n   - License, v. 2.0. If a copy of the MPL was not distributed with this\n   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 132 62\" width=\"132\" height=\"62\">\n....\n</svg>\nA parameter that accepts a string or a text file to append as header would fit my needs.\n. @GreLI I'd be fine with having to regenerate the header every time SVGs are cleaned. The exclamation point is a good idea though.\n. ",
    "xeraa": "Thank you for the quick fix!\n. Thanks a lot! Looks much better now :)\n. ",
    "allypalanzi": "Good point! I'll make that update. 50 was totally arbitrary \u2013 the idea was that it could be configured. \n. ",
    "vaughandroid": "@jaydenseric I for one would be really confused if SVGO behaved differently on different machines, depending on editorconfig settings.\nThis whole issue seems a bit pointless anyway. Can't you just run the outputted files through a prettifier with settings for your team?\n. ",
    "blopker": "Yeah, it looks like it works on newer JS engines (nodejs 0.11+, but not 0.10). Are you against using a polyfill to get es6 Map support in older engines? If not I'll just toss this change.\n. I hear you. I'll give it a try, but I'll probably just submit a PR with the other changes.\n. Ah, good to know about the re-architecture. I've been using SVGs and by extension svgo a lot recently. I mostly just wanted to get familiar with the codebase so I could eventually add features.\nI modified the PR to add back the ID prefixes. I think the other changes are still good though and will help with refactoring (note the added test for proto).\nLooks like CI passes now, so I'll leave it at this. Cheers! :beers: \n. Oh, I just don't like having PRs sitting around for too long (OCD maybe :) ) . If you'd like to merge it then cool, but if you want to wait for the rearchitecture that's cool too.\n. ",
    "scruss": "I'm not a javascript programmer, so a pull request is unlikely. Any RDF section that would ultimately resolve to a non-empty string should be preserved. RDF isn't just comments; it's provenance. While removing it doesn't remove rights, it makes the job of proving rights harder for the creator.\n. Thanks! I put a small file with example metadata here: http://scruss.com/wordpress/wp-content/uploads/2015/10/kite.svg\nOne unrelated thing I've noticed (with 0.5.6) and this particular example file is that the output is massively scaled up. The original is ~ 9 mm wide, but it ends roughly 9\u00bd m wide when run through svgo.\n. ",
    "thiakil": "Please provide an example metadata section and I might be able to look into it.\nAlthough, agreed that this is really a user issue. Calling it a cracking tool is fear mongering... You could call Notepad a cracking tool by that definition. The creator would likely have original files that would easily prove their rights.\n. So, by default, the removeMetadata plugin is enabled. This quite obviously will remove the whole metadata section - something I can guarantee most other image optimisers will do.\nMy personal opinion is that this is your responsibility to disable. --disable=removeMetadata\nIANAL, but from my studies I know that the absence of licence info does not affect copyright claims, so the default option is unlikely to be changed.\nTherein also lies another issue; what metadata to save, what to get rid of? What metadata does this program add, what does that program add?\nThe scaling issue: this appears to be a quirk with how your image is saved; width and height are in mm, but the DPI info is inside an Inkscape XMLNS, something I doubt SVGo understands. Nothing but Inkscape would be able to convert that properly.\n. If you really want to have PHP tags in an SVG file, you will need to run it through some kind of preprocessor before it hits svgo, as your file is invalid.\nA better approach would likely be not running SVG as PHP on your server; use XML valid placeholders instead and process in separate PHP script. That would allow you to use vanilla svgo on the command line.\n. Added test. NB: End result is that the unknown elements are NOT removed.\nShould this be changed to filter elements not in the Collection?\n. Updated to enable checking children of elements without a content property in the collections file. If the child itself is not listed in the elems collection, we delete it.\n. That was the original issue; it causes an error if the element is not in elems[], as was the case with the  element. Just adding a check for existence of elems[elem] leaves the element intact.\nThis seems to right place due to params.unknownContent\n. ",
    "arnogues": "For information the problem comes when one of the SVG files is corrupted\n. ",
    "arthurzakharov": "I have the same problem. The point is that one of your svg files is corrupted(broken). In my case two svg files were simply empty. Advise to look through all svg files, specially recently added and check. If nothing special, look into git history and delete one by one svg files. ",
    "senotrusov": "I'm sorry, I guess config option full: true serves exactly for that purpose.\n. ",
    "ben-eb": "Essentially it means removing the binary and associated dependencies/code from this module, out to a new module, say svgo-cli. Then svgo-cli would depend on svgo, and be its own package with its own tests etc.\nhttps://github.com/ben-eb/cssnano/commit/8f4db2268e57c2adfddbfd21420e5d0943342c8f\n. After reading @sindresorhus' reasoning on this (https://github.com/sindresorhus/ama/issues/17#issuecomment-117860283) I thought it was a good practice to have a separate CLI. It makes sense for those wrapper modules that will not make use of the command line, and therefore don't need the dependencies. This way the package is leaner overall. :smile:\nThe why is simple; extra calls to npm & more to download means slower build times. Less is more.\n. @derhuerst See also https://github.com/svg/svgo/issues/436\n. What is blocking svgo's usage of semver at this point? Bumping to v1.0.0 would be a very welcome change as modules like https://github.com/ben-eb/gulp-svgmin, https://github.com/ben-eb/metalsmith-svgo & https://github.com/ben-eb/postcss-svgo (and a ton of others) could benefit from new features without requiring manual version bumps.\nIt's been 4 years since the initial release, after all. \ud83d\ude04 \n. ",
    "wtgtybhertgeghgtwtg": "Would you accept a PR for this?\n. Sorry, a PR and an svgo-cli repository.  Or a PR and an svgo-core repository.  Whichever way it would be.\n. ",
    "vruzin": "\u041c\u043e\u0436\u0435\u0442 \u0432 CleanupIDs \u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u044e \"all:true/false\" \u0447\u0442\u043e\u0431 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u0441\u0435 ID?\n\u041e\u043d\u0438 \u0440\u0435\u0434\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f.\u0418\u043a\u043e\u043d\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0433\u0434\u0435 ID \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b.\n\u041f\u0440\u043e style. \u0414\u0443\u043c\u0430\u044e \u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u044e \"Style\" \u0441 \u043e\u043f\u0446\u0438\u044f\u043c\u0438:\n- \u0423\u0434\u0430\u043b\u0438\u0442\u044c\n- \u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n- \u0421\u0436\u0430\u0442\u044c (\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c)\n- \u0412\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b (\u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e). \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u043f\u0435\u0440 \u0443\u0434\u043e\u0431\u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0438\u043a\u043e\u043d\u043e\u043a. \u0412 \u043d\u0438\u0445 \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u043d\u043e\u0441\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438 \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0438\u043b\u0435\u0439. \u0438 \u043f\u043b\u043e\u0434\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438 \u043e\u0442 \u0438\u043a\u043e\u043d\u043a\u0438 \u043a \u0438\u043a\u043e\u043d\u043a\u0435 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430.\n. ",
    "ccorcos": "Ah. I see. A little awkward, but it works :)\nvar config = {\n  plugins: [{\n    cleanupAttrs: true,\n  }, {\n    removeDoctype: true,\n  },{\n    removeXMLProcInst: true,\n  },{\n    removeComments: true,\n  },{\n    removeMetadata: true,\n  },{\n    removeTitle: true,\n  },{\n    removeDesc: true,\n  },{\n    removeUselessDefs: true,\n  },{\n    removeEditorsNSData: true,\n  },{\n    removeEmptyAttrs: true,\n  },{\n    removeHiddenElems: true,\n  },{\n    removeEmptyText: true,\n  },{\n    removeEmptyContainers: true,\n  },{\n    removeViewBox: false,\n  },{\n    cleanUpEnableBackground: true,\n  },{\n    convertStyleToAttrs: true,\n  },{\n    convertColors: true,\n  },{\n    convertPathData: true,\n  },{\n    convertTransform: true,\n  },{\n    removeUnknownsAndDefaults: true,\n  },{\n    removeNonInheritableGroupAttrs: true,\n  },{\n    removeUselessStrokeAndFill: true,\n  },{\n    removeUnusedNS: true,\n  },{\n    cleanupIDs: true,\n  },{\n    cleanupNumericValues: true,\n  },{\n    moveElemsAttrsToGroup: true,\n  },{\n    moveGroupAttrsToElems: true,\n  },{\n    collapseGroups: true,\n  },{\n    removeRasterImages: false,\n  },{\n    mergePaths: true,\n  },{\n    convertShapeToPath: true,\n  },{\n    sortAttrs: true,\n  },{\n    transformsWithOnePath: false,\n  },{\n    removeDimensions: true,\n  },{\n    removeAttrs: {attrs: '(stroke|fill)'},\n  }]\n}\n. oh, interesting. I never thought of that. I'm building a plugin for meteor to do this stuff. It would be great if you're README has some examples of a standard set of optimizers.\n. { removeAttrs: {attrs: '(stroke|fill)'} }, is also removing stroke-width\n. Ah. I'll try that.\nLet me reiterate my first statement:\nWhen using these svg's inline an styling with CSS, its nice to be able to set the stroke and fill colors. Thus, I want to remove the stroke and fill colors. However I want to preserve all styles where fill is set to none -- that is, I want to preserve hallow regions. Stripping all fill attributes will cause icons to look wrong. \n. ok. I see. SVG's are kind of a pain.... :/\n. Seems like it should always be a closed path if its a polygon:\nhttps://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js#L90\n. Also, this isn't stopping the conversion:       {  convertShapeToPath: false },\n. Without the Z\n<html>\n<body>\n  <style type=\"text/css\">\n    svg {\n      fill: red;\n      stroke: blue;\n    }\n  </style>\n  <svg>\n    <path fill-rule=\"evenodd\" d=\"M15 21.57l-7.64 4.947 2.343-8.796-7.067-5.736 9.09-.49L15 3l3.274 8.494 9.09.49-7.067 5.737 2.344 8.798 \"></path>\n  </svg>\n</body>\n</html>\n\nWith the Z\n<html>\n<body>\n  <style type=\"text/css\">\n    svg {\n      fill: red;\n      stroke: blue;\n    }\n  </style>\n  <svg>\n    <path fill-rule=\"evenodd\" d=\"M15 21.57l-7.64 4.947 2.343-8.796-7.067-5.736 9.09-.49L15 3l3.274 8.494 9.09.49-7.067 5.737 2.344 8.798 Z\"></path>\n  </svg>\n</body>\n</html>\n\n. the styles aren't within the SVG file. its within the html page. at the top is the SVG file thats input. The first example in the last comment is the compiled version. And the second is what I think it should be, with the Z appended.\n. All polygons are closed. Thats my point.\n. Thats my point about this line:\nhttps://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js#L90\nI think closePath should always be true for polygons.\n. ",
    "DavidWells": "\ud83d\udc4d this thread helped me after a long long search for how to configure SVGO\n. I was searching around in these issues and inside https://github.com/mrsum/webpack-svgstore-plugin but this thread helped me get the config working.\nWhat @ccorcos posted worked and altering the config option he provided actually changes my sprite output now! =)\nI'm using svgo via the 'webpack-svgstore-plugin' package.\nMy webpack now looks like:\n```\nvar path = require('path')\nvar fs = require('fs')\nvar webpack = require('webpack')\nvar packageInfo = require('./package')\nvar SvgStore = require('webpack-svgstore-plugin')\n// define local variables\nvar distPath = path.join(__dirname, 'src', 'sprite')\nvar sourcePath = path.join(__dirname, 'src', 'assets')\nvar config = {\n  entry: {\n    index: path.join(__dirname, 'src', 'dummy-entry.js'),\n  },\n  output: {\n    path: distPath,\n    filename: '[name].js',\n    chunkFilename: '[chunkhash].[id].js',\n    publicPath: '/lib/'\n  },\n  resolve: {\n      extensions: ['', '.js'],\n  },\n  plugins: [\n    new SvgStore(path.join(sourcePath, '/.svg'), path.join('svg'), {\n      svg: {\n        xmlns: 'http://www.w3.org/2000/svg',\n        style: 'position:absolute; width: 0; height: 0'\n      },\n      name: 'sprite.svg',\n      chunk: 'index',\n      prefix: '',\n      svgoOptions: {\n        plugins: [{\n          cleanupAttrs: true,\n        }, {\n          removeDoctype: true,\n        },{\n          removeXMLProcInst: true,\n        },{\n          removeComments: true,\n        },{\n          removeMetadata: true,\n        },{\n          removeTitle: true,\n        },{\n          removeDesc: true,\n        },{\n          removeUselessDefs: true,\n        },{\n          removeEditorsNSData: true,\n        },{\n          removeEmptyAttrs: true,\n        },{\n          removeHiddenElems: true,\n        },{\n          removeEmptyText: true,\n        },{\n          removeEmptyContainers: true,\n        },{\n          removeViewBox: false,\n        },{\n          cleanUpEnableBackground: true,\n        },{\n          convertStyleToAttrs: true,\n        },{\n          convertColors: true,\n        },{\n          / https://github.com/svg/svgo/blob/master/plugins/convertPathData.js#L9-L26 */\n          convertPathData: false,\n        },{\n          convertTransform: true,\n        },{\n          removeUnknownsAndDefaults: true,\n        },{\n          removeNonInheritableGroupAttrs: true,\n        },{\n          removeUselessStrokeAndFill: true,\n        },{\n          removeUnusedNS: true,\n        },{\n          cleanupIDs: true,\n        },{\n          cleanupNumericValues: true,\n        },{\n          moveElemsAttrsToGroup: true,\n        },{\n          moveGroupAttrsToElems: true,\n        },{\n          collapseGroups: true,\n        },{\n          removeRasterImages: false,\n        },{\n          mergePaths: true,\n        },{\n          convertShapeToPath: true,\n        },{\n          sortAttrs: true,\n        },{\n          transformsWithOnePath: false,\n        },{\n          removeDimensions: true,\n        },{\n          removeAttrs: {attrs: '(stroke|fill)'},\n        }]\n      }\n    })\n  ],\n  module: {\n    loaders: [\n      {\n        test: /.js/,\n        loaders: ['babel']\n      }\n    ]\n  }\n}\nmodule.exports = config\n```\n. ",
    "ShayanZafar": "This should be in the examples section under the Node Module examples!. ",
    "6a68": "Is there a config example for non-plugin config arguments, like useShortTags? Trying to work around #209 for Safari. ",
    "clepore": "Since I had the same question, myself, and wasn't finding any documentation on it, I debugged the package and was able to come up with this syntax that works:\njs\nnew svgo({\n    js2svg: { useShortTags: false },\n    plugins: [\n      { removeViewBox: false },\n      ...\n    ]. ",
    "KingScooty": "This is actually a valid use case. I've just come across it myself. It'd be nice to strip out all color and fill refs if they aren't set to \"none\". We need to keep \"none\" as it preserves some important styling.\nSVGO is an optimizer, and optimizing for the web should be a valid use case.\nBeing able to set the colour of SVGs using CSS is a huge plus, and this can't be done if there's stray fills or colours in the file. . ",
    "ekfuhrmann": "I agree that there is a valid use case for this. \nLets say you have an icon library with a consistent container size, such as 24 x 24 px, you'll sometimes have icons within that container that are smaller than it for visual continuity -- so maybe an 18 x 18 px icon within the 24 x 24 px container. \nThis normally wouldn't be an issue so long as you can leave the container path to fill=\"none\", but since it's being stripped out, it makes such a system obsolete.\nWhile I know I can prevent fill from being stripped, it's nice to have so that you can control the icon color via CSS.\nA proposed solution would be something along the lines of attrs: ['stroke.*', 'fill.*!none'] which would remove all fill attributes from the SVG aside for those that have a value of none.. @ailet37 I still haven't been able to figure out a solution to removing all fill except none. I've for the most part removed this part from my build process and now just manually clean the fills whenever I need a fill: none preserved.\nIt's not great and I wish the owner would reconsider adding this functionality since it has numerous valid implementations.. ",
    "ailet37": "is there a way today to remove all fill except none value ? . ",
    "Herman-Freund": "@GreLI @ccorcos @KingScooty @ekfuhrmann @ailet37 \nI've opened pull request #977 that addresses this issue.\nProposed solution:\n{\n  removeAttrs: {\n    attrs: '*:(stroke|fill):((?!^none$).)*'\n  }\n}. This has now been resolved and merged via #977. #977 Addresses the same issue utilizing the existing plugin.\nHowever, The plugin proposed in this PR has an extra benefit of being able to remove a different attribute than the one matching the selector.. @GreLI How can we move this forward? Will pinging the original creator of this plugin help (@bennyschudel)?\nThanks. > @Herman-Freund did you ever hear any feedback outside of this channel on your work?\nNo \ud83d\ude15\nThanks everyone for the positive feedback!\n. @GreLI \nOther than #1055, are there any reasons for not merging this?\nThanks. Would #977 help?\nP.S. The removeAttrs plugin is meant to deal with any attribute (and not just the ones dealing with colors).. > I could certainly achieve it if value is exposed in the regex filtering {\"attrs\":\":(stroke|fill):((?!^currentColor$).)\"} if I'm understanding right?\nCorrect\n\nI wonder if my PR should still be used additionally\n\nI think it should be somewhat merged (just brainstorming) e.g.\n```typescript\n// simple mode\nremoveAttrs: string|RegEx\n// full feature mode\nremoveAttrs: [\n  {\n    attribute: string|RegEx\n    element?: string|RegEx\n    value?: string|RegEx\n  }\n]\n```\nBut this is basically redoing the entire plugin (and will probably break users existing code).\n\nAnyway, I'll \"emoji plus\" your PR\n\n\ud83d\udc4d Thanks!. Maybe but I was trying to emphasize that the plugin will make 2 assumptions if there are no separators, 1) match all elements and 2) match any value.. Doesn't parentheses imply \"lesser importance\" (e.g. afterthought)? Which is not exactly the message intended to convey.\nThanks. Updated. ",
    "birchcode": "Thanks for making this! Awesome savings on so many of my SVG's.\nBut are you sure this issue hass been fixed? I just installed SVGO for the first time and tried it on an illustrator file that had lots of sodpodi's. \n<g id=\"g9856\" transform=\"matrix(0.02682851,0,0,0.02682851,118.68105,942.83463)\">\n    <g id=\"path9858\" sodipodi:rx=\"16.428572\" sodipodi:type=\"arc\" sodipodi:cy=\"472.36218\" sodipodi:ry=\"16.428572\" sodipodi:cx=\"430\">\n        <circle fill=\"#A9F0F7\" cx=\"-9892.9\" cy=\"13567.6\" r=\"1.7\"/>\n    </g>\n$ npm show svgo version\n0.6.0\nError in parsing: Unbound namespace prefix: \"sodipodi\"\n. ",
    "eden-lane": "I have same error with Error in parsing: Unbound namespace prefix: \u00absketch\u00bb\n. I hadn't this error when I used same svg without svgo. Anyway, removing prefixes solved this problem.\n. ",
    "phihag": "@GreLI Is there something wrong with this pull request? Any opinion?\n. Thanks, I have updated my pull request with a fix. Is there any way to check for style inconsistencies with this project? I found a jshint configuration file and ran jshint, but it did not report anything.\n. Oops, I apologize. I have made sure that the source code does not contain /!\\s+/ anymore.\n. ",
    "Sokol-ua": "Thanks=)\n. ",
    "LeZuse": "Do you guys have any update on this?\n. ",
    "dishs": "I can confirm the same error happening with the addition of this plugin.  We are wrapping our SVG style content with CDATA (recommended by the w3c), which breaks the plugin and causes build errors:\ncss\n<style><![CDATA[\n    .st0{fill:#FF7900;}\n    .st1{fill:#FFFFFF;}\n]]></style>\nTaken from the standard .... http://www.w3.org/TR/SVG/styling.html\nNote how the CSS style sheet is placed within a CDATA construct (i.e., <![CDATA[ ... ]]>). Placing internal CSS style sheets within CDATA blocks is sometimes necessary since CSS style sheets can include characters, such as \">\", which conflict with XML parsers. Even if a given style sheet does not use characters that conflict with XML parsing, it is highly recommended that internal style sheets be placed inside CDATA blocks.\n. ",
    "gajus": "Found it. https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config\n. ",
    "mcshaman": "Do they have to be YAML files? Can a JS module be exported like most other JS libraries at the moment?. A JavaScript config option would be good to so that environment arguments can be utilised.. ",
    "lgordey": "@kebot I think you use \njavascript\n'{}'\ninstead of \njavascript\n{}\n. ",
    "pygy": "I get the same error with this seemingly trivial example (click \"run\"):\nhttps://tonicdev.com/569830dcfca1b10c00b4f7db/569830dcfca1b10c00b4f7dc\n. Oooh, my bad, I didn't read the example carefully, I was trying to call svgo when I should have called svgo().optimize...\nSorry for the noise.\n. ",
    "matbech": "That was most likely the case. Thank you for pointing it out.\n. The file was exported from Adobe Illustrator and then \"pre-cleaned\" by svg cleaner. Apparently the bug is in svg cleaner. I apologize for the false alarm.\nBut it would be better if svgo would complain about the syntax error instead of silently ignoring it.\n. ",
    "mcfly83": "This is one of the files that fail with v0.6.0: http://dropcanvas.com/d2vq6\n. ",
    "pauldraper": "Processing multiple files at the same time would be a real time saver.\n. ",
    "levibuzolic": "Would love to see this as an option. I'd love for 2 spaces, though I'm sure there's people who prefer actual tab characters or 4 spaces. :ok_hand: \n. ",
    "febLey": "I'd also love the change the indent level to 2\n. ",
    "scurker": "With #526, I added the ability to pretty print svgs with an optional indent level. There really wasn't an existing (good) place to write the test for this, but I wanted to at least implement something.\n. @doot0 @CodeTheory Would this still help resolve your issue with currentColor in #497?\n. @GreLI Correct, it'll convert both allowing you to convert colors for everything within css:\ncss\nsvg {\n  stroke: #000;\n  fill: #000;\n}\nHowever, I could see potentially wanting more granular control over paths vs strokes. Are there any other examples of plugins that allow you to pass in an array of options?\n. If you look at the test for currentColor, this plugin converts color values (such as named colors, hex values, rgb, etc.) to currentColor. You need to set a color attribute to replace with your path.\n<path fill=\"black\" ... />. ",
    "bdkjones": "Thanks!\n. +1. \nI just wasted a lot of time trying to figure out what was going on before I realized SVGO incorrectly returns 0 when the option parsing fails. Any chance this can be addressed soon?\n. This one is related to #618. \n. Also, that workaround I mentioned is in coa.js here:\n\n. ",
    "Flackus": "Thanks :+1: \nIt was rather obvious :flushed: \n. ",
    "nathanboktae": "Ah yes, it's not referenced, so you are right, it has no effect (my mistake). The symbol was there because I was using svg-sprite. Thanks for the quick response.\n. ",
    "jasmussen": "Correct. And like I mentioned, it works when I write { removeAttrs: { attrs: 'fill' } }, but that's not mentioned in the documentation anywhere. May I offer a PR to update the documentation? Right now { removeAttrs: 'fill' }, doesn't work at all, though that's what seems to be the suggested use.\n. Tried making a PR, but seems I don't have permissions to push PRs. In any case, the change to the documentation is very small. Here's an updated file:\nhttps://cloudup.com/czB43eIAPOH\n. ",
    "defaude": "+1\n. ",
    "bm2u": "+1\n. @GreLI got the same issue with gulp-svgmin. My config looks like:\noptions : {\n            plugins: [\n                {\n                    removeViewBox: false\n                },{\n                    addClassesToSVGElement: {\n                        classNames: ['svgo']\n                    }\n                }\n            ],\n            js2svg: {\n                pretty: true\n            }\n        }\n. ",
    "jackycute": "Such quick response!\nThx a lot, I like svgo very much.\n. ",
    "kasbah": "Fair enough, my issue was with the exit status but it looks like you fixed that (though I haven't tested it).\nCheers!\n. ",
    "DanReyLop": "On a side note, Travis is configured to run against Node 0.10 and 0.12. Is there any specific reason for that? Can we bump it to 0.12, 4 and stable?\n. I've cloned the last commit on master, it's still happening.\n. Fine for me.\nI still think that the difference in performance is negligible, but your solution is also cleaner :)\n. This method will round a set of values, iterating them and invoking Number.toFixed in every case (and sometimes more logic like Math.abs). Compared to that, a single integer comparison more or less is just a micro-optimization. In my opinion, overwriting the roundData function reference for the sake of gaining a couple of CPU cycles is just not worth it.\n. ",
    "nolanlawson": "Interesting; just thought I would let you know. :) It's not too hard to manually correct.\n. ",
    "marionebl": "If you outline the work that is planned for svgp i'd be more than happy to help!\n. ",
    "aleixpol": "You are right, my assessment was wrong. Nevertheless, the representation is still different:\n\n. Correct, this is only happens after I pass --disable=convertStyleToAttrs, that I need to enable to ensure #489 doesn't affect.\n. ",
    "kevinlaw91": "The problem is SVGO doesn't keep unused symbol in file. Try disable cleanupIDs plugin and try again.\n. Yes this is important. This is affecting not just points, but other attributes like viewBox too.\n. Unable to reproduce this any more. Closing this.\n. ",
    "markorosic": "Thanks, it did the trick.\n. ",
    "infn8": "It would for sure need to run before cleanupIDs but after it does run cleanupIDs would have no IDs to cleanup.  \nRe: CSS, I was thinking a little more brute force in that each element would only care about itself.\nclass=\"\n{any pre existing value of class attribute}\n{optional space if class attribute was not already empty}\n{prefix}\n{value of id attribute}\n{postfix}\n\"\nThen remove id attribute and that's it.  No need to parse CSS.  But if we can add elegance or intelligently extend another function that would be boss.  Adding it as a param to cleanupIDs would ensure it ran first!  \nThoughts?\n. Great point!  I had not thought of that.  It could just be a documented shortfall of that option.  Are there any other features you're considering that might need, or benefit from, CSS parsing?  \nThis doesn't seem like the cost benefit is there with this one feature on its own.\n. @dangayle I don't think you could but the reason i want to strip ids is because i plan on using the same svg in the dom in several places and best practices say that your ids should all be unique. You would have to decide whether or not you would need to use references like that before stripping the ids.. ",
    "dangayle": "If you remove IDs, how do you use a <use xlink:href=\"#arrow-right\" /> type of reference?. ",
    "skmasq": "Fixed issue adding: {convertPathData: false}\n. ",
    "timothyis": ":+1: This would be very useful for me. I currently do this manually. \n. ",
    "darkv": "Cool, thanks!\n. ",
    "joafeldmann": "The styles\n<style>\n    .cls-1{fill:none}\n    .cls-2{fill:#fff}\n</style>\nshould be translated to a path/fill attribute. (See \"after\" above) I tried svgo --enable=convertStyleToAttrs file.svg\n. That's it! Closing this as dup of #454\n. ",
    "MeoMix": "Hey,\nThanks for the response.\nEssentially, instead of dynamically building a string which points to an unknown-until-runtime location in the plugins folder, all plugins which could potentially be needed should be required upfront and then only worked upon if needed.\nI might be able to provide a PR at some point, but need to do some reading to make sure it works as expected. I'll end up doing that on my own fork hopefully sometime this week.\nTalking to @guybedford about the issue he said:\n\n@MeoMix dynamic CommonJS requires are not supported because they are sync and the browser is async. Typically for these plugin patterns you want to ensure the module is already loaded by creating an async layer around it. Eg how we handle Babel plugin loading in the system-babel plugin, by first System.import'ing the plugins ourselves, then running Babel.\n\nYou can see that file here: https://github.com/systemjs/plugin-babel/blob/master/plugin-babel.js\n. ",
    "joaocunha": "For those experiencing this issue, make sure that the viewBox property has proper camel-casing on the source SVG file, otherwise it will get stripped out by svgo.\n. ",
    "cinatic": "i updated and experienced the same issue with at least this file:\n\ufeff<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\n    <path d=\"M 25 3 C 21.7 3 19 5.7 19 9 C 19 12.3 21.7 15 25 15 C 28.3 15 31 12.3 31 9 C 31 5.7 28.3 3 25 3 z M 25 19 C 21.7 19 19 21.7 19 25 C 19 28.3 21.7 31 25 31 C 28.3 31 31 28.3 31 25 C 31 21.7 28.3 19 25 19 z M 25 35 C 21.7 35 19 37.7 19 41 C 19 44.3 21.7 47 25 47 C 28.3 47 31 44.3 31 41 C 31 37.7 28.3 35 25 35 z\"/>\n</svg>\n@GreLI \nwith config parameter the attribute will not be removed\n. ",
    "benjie": "(I landed here because my viewBox was being removed. It turned out that juice (npm module) was changing case of viewBox to viewbox, then svgo was stripping it out as noted above. Sharing in case it saves someone a couple minutes head-scratching.). ",
    "patrick-wc": "I just experienced this issue with an svg which had width=\"20px\" and height=\"20px\" attributes on the <svg> element, before the viewBox attribute (no idea why, I've never seen that before). Removing the width and height attributs meant that the viewbox was preserved. Just FYI. ",
    "jonmilner": "@GreLI using the reduced test case above, if I want to preserve the viewbox but remove the width/height attributes, I would expect this to be the correct approach:\nsvgo -s '<svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\"/>' --config='{ \\\"plugins\\\": [{ \\\"removeDimensions\\\": true, \\\"removeViewBox\\\": false }] }'\nbut the output (using svgo v1.1.1) is the following:\n<svg width=\"16\" height=\"16\"/>\nAm I doing something wrong? Or is this a bug with svgo?. ",
    "terje": "Ok, give me a couple days and I'll set up a reduced test for you.\n\nTerje\n\nOn 26 Feb 2016, at 19:28, Lev Solntsev notifications@github.com wrote:\nHmm, I see no problems when I'm passing this file through svgo.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry, I am unable to reproduce it outside of our bigger project now. Test case here: https://github.com/terje/svgo-bug-reduction\n\nFeel free to close this issue, I will reopen or submit another if I am able to reproduce it.\n. ",
    "jt3k": "\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043e\u0442\u0432\u0435\u0442 :+1: \n\u042f \u0442\u043e\u0433\u0434\u0430 \u043f\u043e\u0444\u043b\u0443\u0434\u044e \u0432 \u0438\u0448\u044c\u044e\u0441\u044b \u0435\u0441\u043b\u0438 \u043d\u0430\u0431\u0435\u0440\u0443 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432.\n. The gulp-svgmin have solution for thus problem.\nSolution right in in readme -> Per-file-options\n. 2 @mattkime \nProblems with identical id arise when two inline svg-elements are used on one page.\nAs a rule id are used to describe the gradients, so the same gradient is applied to two different svg-elements.. ",
    "cronfy": "\u0423 \u043c\u0435\u043d\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 \u043b\u043e\u043c\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u043e convertStyleToAttrs. \u0412 Chrome \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0435\u043b\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 (\u0445\u043e\u0442\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0449\u0438\u043a \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0435\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442).\n\u0412\u043e\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \narrow.zip\n. \u0422\u0430 \u0436\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0432 IE11 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a background, \u0435\u0441\u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043e\u043f\u0446\u0438\u044f removeDimensions.\n\u0410 \u0431\u044b\u043b \u043b\u0438 \u0432 \u0438\u0442\u043e\u0433\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439? \u041c\u043e\u0436\u0435\u0442, \u0443\u0436\u0435 \u043d\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430?. ",
    "daniellmb": "Right, this was more pseudo code to get the idea across... even just the stack trace would be helpful. That's what I actually used to track down what happend.\n. :+1: \n. ",
    "vagari": "While it's odd that SVGO is removing the transform=\"matrix(1 0 0 -1 0 0)\" (the part flipping the image) I'd be curious why MathJax writes everything upside down and then flips it after the fact... I'm not faimilar, perhaps their coordinate system is like Inkscape's? \n. Playing with the image on SVGOMG and unchecking the \"Round/rewrite tranforms\" (convertTransform I presume) the transform is retained and the image is properly rendered (at least when you download the result, in my web browser nothing is displayed on SVGOMG). \n. ",
    "Pomax": "presumably because it extracts glyphs from OpenType fonts (it doesn't render text, it does glyph composition, LaTeX style), and font coordinates are \"flipped\" compared to virtually every other graphics context. positive Y values in font units \"go up\", like on paper, rather than \"go down\" like in a Canvas2D context.\n. I'm using svgo as CLI tool, what would that option be on the command line?\n. thanks! looking forward to the new version on npm\n. awesome!\n. It's not a matter of \"broken\", it's a matter of \"svgo can do something better here than what it currently does\". \nPreserving units in values so that they can be interpreted by other tools is excellent practice, so that'd be reason alone to address this, but a second thing to consider is that turning height=\"12pt\" into height=16 but then leaving weight=\"83pt\" as is, is inconsistent behaviour, and code with inconsistent behaviour is almost guaranteed to have esoteric bugs.\nRemoving the unit can be an optimization in that it can saves up to 6 bytes (3 as max CSS unit length, twice because of the two attributes) on the total size of an SVG file, but that's not a value that makes an appreciable difference, even when added up over thousands or hundreds of thousands of files (you'd need millions of files to start saving MBs). That said, it's still an optimization and so it's good that svgo does it, but it's equally good to have a way to (through a runtime flag maybe?) make sure that the height and width both consistently specify their units (even when they're px) so that build chains in which svgo is but one of the manys steps are guaranteed to have values with units, instead of values without. If the input to further tools can come from more than just svgo, and \"bare numbers\" mean different things to different tools, that's a problem in which svgo need not be involved.. but will that kick in for \"everything\" or just for the top level width/height? The reasoning here is that those are two very different thigns: one is content, which should absolutely be cleaned up as aggressively as possible (lots of elements with units that can be left as implicit pixel values = lots of space saving) whereas the top level widht/height are document metadata, and should ideally have a separately configurable behaviour.. I would love to have an option for this.\nEspecially given that the world is a huge place with millions of svgo installs a month: \"uncommon\" on 3.7 million installations is probably still thousands and thousands of people/projects that would probably benefit =). I hope so, because find and xargs are not available on Windows, making the workaround \"not a solution\" when it comes to using svgo in npm scripts.\n. bump? It would still be rather valuable to have this work, especially on cross-platform codebases.. @GreLI would you be able to help get this landed? It's a relatively simple PR but the functionality it adds vastly improves the usability of svgo in projects with SVG assets in nested dirs (e.g. assets dirs that mirror the site hierarchy, images stored based on category tree, etc).. @deepsweet @GreLI does either of you have push rights here? . I'm sorry, I didn't mean any perceived aggression, I was just trying to ping someone who might have the ability to land code for this project (no one's mentioned as maintainer in the readme, so I figured I'd ping both you and @GreLI, who are marked as part of the \"svg\" org that this is a repo under, after confirming you both had lots of commits to the code in the contributions tab here on github).\nThat said, if this project is unmaintained (which it sounds like is the case?) it would be a good idea if someone with org/repo rights could issue npm deprecate for svgo so NPM marks it as unmaintained, and then have someone hit the archive button in the repository settings so that GH also marks it as unmaintained.\nNeither of those actions will affect anyone's ability to pull down svgo as dependency, but that would definitely make it clear that no one's maintaining this code, and that filing issues or even PRs won't do anything (I think issues and PRs get turned off when you archive - they're still there, the functionality for them and the corresponding UI just gets turned off). ",
    "techtolentino": "We ran into this same exact problem on my team, via gulp-svgmin. Forcing v 0.6.1 for now.\n. ",
    "alexjlockwood": "+1, I still think this is a valid feature request. I've been having trouble with this myself.. Hi there,\nI'm not certain if this is still a work in progress but just wanted to let you know in case you weren't aware... I tried forking your branch and ran your plugin using svgo and saw unexpected results with your plugin enabled vs. disabled.\nHere is a gist containing the SVGs I used/generated: https://gist.github.com/alexjlockwood/f5d65651f2357f2fc9b4781c6e124778\nI ran the following commands:\nsvgo --disable=inlineStyles --pretty -i kids-source.svg -o kids-disabled.svg\nsvgo --enable=inlineStyles --pretty -i kids-source.svg -o kids-enabled.svg\nAs you can see in the gist, the third kid's hat is missing its fill color when the plugin is enabled.\nThe style tag for the source SVG looks like:\n.cls-1,\n.cls-7{fill:none}\n.cls-2{opacity:.08}\n.cls-3{clip-path:url(#clip-path)}\n.cls-4{fill:#ffcc80}\n.cls-5{fill:#5c6bc0}\n.cls-6{fill:#212121}\n.cls-7,\n.cls-8{stroke:#000;stroke-linecap:round;stroke-miterlimit:10;stroke-width:.5px}\n.cls-9{fill:#ff9800}\n.cls-10{fill:#fb8c00}\n.cls-11{fill:#00838f}\n.cls-12{fill:#ffeb3b}\n.cls-13{fill:#8e593c}\n.cls-14{fill:#9575cd}\n.cls-15{fill:#4e342e}\n.cls-16{fill:#fff;opacity:.2}\nInterestingly, if I change the lines beginning with cls-1, and cls-7, using the code below, the plugin works fine:\n.cls-1{fill:none}\n...\n.cls-7{stroke:#000;stroke-linecap:round;stroke-miterlimit:10;stroke-width:.5px}\n...\nLet me know if you are seeing the same thing!. that's great! thanks again for this... it's going to make my life a lot easier when dealing with UXers giving me SVGs that were exported by adobe illustrator. :D \nbtw, do you have a ball park estimate of when this will be ready to be merged?. Any updates on this?. Agree, this would be super awesome to have in svgo. Software like Adobe Illustrator outputs huge/spammy SVG files, and this plugin is necessary in order to reduce the size.. Hey, just wanted to let you know that I got an error when I tried to process the following svg using your plugin:\nhttps://gist.github.com/alexjlockwood/0db6f64f81eb1eb54434636155463615\nThe SVG has a ton of unused stuff in the <style> tag so I assume it has something to do with that.. Ahh interesting... and I figured I would also ask... does this affect the minifyStyles SVGO plugin in any way?\nOne thing I noticed was that the inlineStyles plugin took a very long time to finish. This does not surprise me at all considering how many selectors are in the <style> tag. But I also wonder if the minifyStyles plugin could have saved a bunch of time by removing the un-used selectors in there. Is that possible? (I noticed you wrote that plugin too :P).. Awesome to hear about the performance improvements! Going to try this out for myself right now. :D. Hmm... first of all, I should mention that I'm working with a fork of this plugin right now, so this issue may or may not affect svgo. But I figured I'd point it out since I've forked the code and dependencies exactly and am still having trouble building in my local setup with the following error:\nERROR in ./~/css-tree/lib/syntax/default.js\nModule not found: Error: Can't resolve '../../data' in '/Users/alockwood/ShapeShifter/node_modules/css-tree/lib/syntax'\n @ ./~/css-tree/lib/syntax/default.js 1:11-32\n @ ./~/css-tree/lib/index.js\n @ ./src/app/scripts/svgo/plugins/inlineStyles.ts\nAny idea what might be going on here?. Any updates on this?. FYI, updating to csstree alpha 25 seems to cause some crashes now.. @strarsis You know what, ignore me. I think I was using a cached version of csstree alpha 24. The crash no longer occurs with alpha 25. :). I am also wondering what the timeline is for this pull request. If there is anything I can do to help get this merged, please let me know. :). @strarsis @lahmatiy How should the csstree dep be updated in svgo in the future given that it is still in alpha? Any thoughts?. I guess it depends whether the flag will result in an optimized file or not. On one hand, not inlining everything can save bytes by keeping common code in the style block. On the other hand, not inlining the style can have a big impact on plugins that will be run later on (i.e. you won't be able to merge paths or collapse groups if the elements declare classes).. I think @caub is right that the usage of global variables may be problematic elsewhere as well. For example, in the \"removeUselessDefs\" plugin, a global 'defs' variable is reassigned various times throughout the plugin's execution. When the plugin exits, the variable will continue to hold a reference to its current value. In this case, I don't think there will be any behavior changes... however, it does seem like at the very least there will be a temporary memory leak (i.e. the referenced element won't be garbage collected until the next time SVGO is run).\nLink: https://github.com/svg/svgo/blob/master/plugins/removeUselessDefs.js#L10. I don't think this PR handles CSS cascades correctly. According to the SVG spec, CSS cascade is applied to the referenced elements, not the (conceptually) cloned elements that make up the shadow DOM. What I think you would have to do is:\n\nRun some sort of inlineStyles plugin (i.e. #592) on the SVG so that all of the elements that are descendants of a <defs> element are assigned their styled attributes.\nThen run this plugin (i.e. find the <use> tags and replace them with the deeply cloned elements).\nMake sure that any property-inheritance-related plugins are run after step (2).\n\nAlso I would take a look at the SVG spec on the <use> and <defs> tags since I also saw some things that were missing. For example, the plugin doesn't handle cases where x, y, width, and/or height attributes are specified on the <use> tag, etc.\nAlso this plugin doesn't handle the case where the <use> tag references another <use> tag, which apparently is possible.. Well, it wouldn't necessarily have to be enabled by default.. @strarsis Yeah, except instead of creating a new plugin it adds the functionality to the existing plugin.. Also, sorry... the tests are failing because of jshint errors (I ported it from a personal project I wrote in es6 and forgot to fix the hoisting stuff :P). Easy to fix... but I'll wait to hear back on whether or not you want me to continue following through on this.. Sorry about that, will try to fix that up now. :). Blah... looks like I accidentally deleted my svgo fork. Is it possible to update the pull request if I've done that? Or will I have to create a new one.... Going to close this and continue the work here: #818 . Not totally sure, but I think the issue might be here:\nhttps://github.com/svg/svgo/blob/master/plugins/_path.js#L265\nFrom what I can tell, the elliptical arc commands are not having their sweep flags toggled correctly.. Fixed the errors, will add some tests later tonight!\n@GreLi how do you suggest I make this optional?. Would you prefer two options (one for circles and a second for ellipses)?. Cool, sounds good. I'll add some tests tonight when I get back from work.. @GreLI I added a simple test case and fixed up the code. LMK what you think!. @buisine I recommend filing a bug with the SVG you are trying to convert and the svgo version you are using. . Still, it doesn't seem like the plugin would currently remove these \"known\" namespaces if they are declared on non-SVG nodes, right?\nThe reason I say this is because when I look at the source code, I notice that the namespaces are currently only collected while iterating over the root SVG node.. I created a pull request here: #850 . Oops, IDK why I said it fixes #218. I meant it fixes #847.. So to clarify, should it be possible to pass an array to hasAttr? Because currently it is possible for an array to be passed as an argument.. Right now if you call removeAttr(name) (where name is an array of attr names), the method will end up calling this.hasAttr(name) on line 248, right?. OK, great... that is kinda what I thought but wasn't sure. :)\nI'll file a pull request to fix that.. Actually wait... I have one more question...\nOn line 246 you call name.forEach(this.removeAttr, this): https://github.com/svg/svgo/blob/ceccf1ffdcdcba0f422a49685c2f60520579e46a/lib/svgo/jsAPI.js#L246\nAccording to the documentation for Array#forEach, it takes a function callback(currentValue, index, array) as its first argument.\nOn line 246, you pass this.removeAttr, which doesn't seem right (because the second argument for this.removeAttr is a string, but the second argument for the callback passed to Array#forEach is an index number.\nIs this also a mistake? \n. OK, thanks.\nI created a pull request here with what I assume should be the fix... LMK if I should change anything though: https://github.com/svg/svgo/pull/855. FYI, these two argument names are out of date.. Just so you know, stuff seems to break when you upgrade to the most recent version of csso (v3.0.0). I get the following error:\nERROR in ./src/app/scripts/svgo/plugins/inlineStyles.ts\nModule not found: Error: Can't resolve 'csso/lib/compressor/restructure/prepare/specificity' in '/Users/alockwood/ShapeShifter/src/app/scripts/svgo/plugins'\n @ ./src/app/scripts/svgo/plugins/inlineStyles.ts 6:20-82. what.extend was removed here: https://github.com/svg/svgo/commit/4495a34f55560b2bc05cf837ba9dd01ca20cd479. FYI, I get some annoying warnings when I run this test. Not sure if it can be avoided.\n```\nWARN: 'Warning: Syntax error when trying to select \nhtml /deep/ [hidden]\nWARN: 'Warning: Syntax error when trying to select \nhtml /deep/ [block]\n, skipped. Error details: SyntaxError: Unmatched selector: /deep/ [block]'\n``. When I run theconvertStyleToAttrs` plugin on this SVG, I get:\n<svg id=\"test\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n  <path class=\"blue red\" fill=\"red!important\" d=\"M0 0h100v100H0z\"/>\n</svg>\nMaybe this is a bug that should be fixed in a separate pull request? You probably know better than me. WDYT?. ",
    "jamesd8": "I would like to have a bundled version of SVGO that is a single JS file that works in the browser and can be included in a page using a standard ",
    "ben-page": "Removing unused IDs and minifing class names would be bad. They can be referenced in external CSS or JavaScript.\n. Thinking on this, I don't think the optimization should be turned off if there is are embedded styles defined for tags. Or at least not by default, an config option would be nice.\nHowever, a warning (on the command line, when optimizing) would be very helpful. With reworkss is should be pretty easy to parse the CSS and identify if there are problematic styles defined.\n. ",
    "vithar": "We can do it in plug-in disabled by default.\n. ",
    "doot0": "@scurker Seems like it would, thank you! Hope this gets merged in.\n. ",
    "Fish2": "any chance you could add this in with it ? https://github.com/svg/svgo/issues/884. ",
    "mnpenner": "I can't seem to get this to work.\nI've got this svgo.yml:\nyml\nplugins:\n  - convertColors:\n      currentColor: true\nI'm running svgo with:\nsh\nnpx svgo --config=svgo.yml src/icons/fa/solid\nAnd the source for one of my icons is like:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path d=\"M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z\"/></svg>\nI was hoping it would add fill=\"currentColor\" to the <path> but that doesn't seem to be happening.\nWhat am I missing?. Oh. Well, I want to add it then. I just found another plugin, but it's breaking my SVGs:\nyml\nplugins:\n  - convertColors:\n      currentColor: true\n  - addAttributesToSVGElement:\n      attributes:\n        - fill: currentColor\nIs making my SVG come out like:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" [object Object]><path d=\"...\" /></svg>\nBut the comments make it look like this should work.... @kevinSuttle Tried swapping the order, same result. Tried deleting convertColors altogether, still doesn't work. Always comes out [object Object]. Very strange.\nI dropped some debugging in there, it looks like it's adding the attribute correctly:\ntxt\n{ elem: 'svg',\n  prefix: '',\n  local: 'svg',\n  attrs: \n   { xmlns: \n      { name: 'xmlns',\n        value: 'http://www.w3.org/2000/svg',\n        prefix: 'xmlns',\n        local: '' },\n     viewBox: \n      { name: 'viewBox',\n        value: '0 0 512 512',\n        prefix: '',\n        local: 'viewBox' },\n     fill: { name: 'fill', value: 'currentColor', prefix: '', local: 'fill' } },\nOkay, and now I removed my debugging and they're coming out fine. What the heck.\nI must have been doing something stupid. Thanks for your help anyway :smile: \nEdit: Oh...you know what? I also upgraded SVGO. It didn't support objects in 1.0.3. That's why it was coming out like that. . I would like to see this built-in to SVGO too, but in the mean-time, here's a workaround that runs SVGO in parallel:\nsh\nfind resources/icons -type f -name '*.svg' -print0 | xargs -0 -n 1 -P 6 svgo\nOr, since svgo can already process directories, just not recursively, we can process all leaf-dirs like so:\nsh\nfind src/icons -type d -links 2 -print0 | xargs -0 -n 1 -P 6 npx svgo --config=svgo.yml. Thanks for adding this feature. Could you tag this release please? @justrhysism . Actually the output is a little weird. It says\n\nNo SVG files have been found.\n\n...even though it did find all my icons. I guess it didn't find any in the root dir.\n```\nnode_modules/.bin/svgo -r resources/icons\nProcessing directory 'resources/icons':\nProcessing directory '/mnt/c/Users/Mark/PhpstormProjects/myproject/resources/icons/fa':\nProcessing directory '/mnt/c/Users/Mark/PhpstormProjects/myproject/resources/icons/ion':\nProcessing directory '/mnt/c/Users/Mark/PhpstormProjects/myproject/resources/icons/misc':\nNo SVG files have been found.\nasterisk.svg:\nDone in 14 ms!\n0.497 KiB - 0% = 0.497 KiB\nandroid-calendar.svg:\nDone in 6 ms!\n0.316 KiB - 0% = 0.316 KiB\naccount.svg:\nDone in 9 ms!\n0.948 KiB - 0% = 0.948 KiB\n...\n```. ",
    "dottodot": "OK so my svg from AI is like below (path values have been remove to keep it easy to folllow\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" baseProfile=\"tiny\" id=\"template\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 600 300\" xml:space=\"preserve\">\n  <g id=\"background\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\" d=\"\"/>\n  </g>\n  <g id=\"undershorts\">\n    <path fill=\"#FFFFFF\" />\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"shortsTrim\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"waist\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"thirdColor\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"secondColor\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"mainColor\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n  <g id=\"bottomTrim\">\n    <path fill=\"#FFFFFF\" stroke=\"#000000\"/>\n  </g>\n</svg>\nI make clean ids false so the groups keep there ids, make collaspe unless groups false, then select Move attrs to parent group which results in the following.\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nAs you can see the fill attr has moved to the group for the undershorts group but on all the other paths within groups they remain on the path. So it seems that it only works if the group contains more than 1 path\n. ",
    "ethanmay": "Thanks for the quick reply. I did try removing those // and unfortunately it made no difference. I am gulp-imagemin, so it's possible that this is not an issue related to SVGO. Gulp-imagemin includes imagemin-svgo@4.2.1, which includes svgo@0.6.3. So it does appear to be the latest version. If it makes a difference, the <script> tag I mentioned above is located right before the closing </svg> tag.\n. ",
    "hellol11": "The comments are not useless. When you use the <script> tag, 2 different parsers are working at the same time: the XML parser, and the JavaScript parser. Because the JavaScript parser is active, we need to hide the cdata sections from the JavaScript parser.\n. ",
    "abarre": "Detail of the problem : https://commons.wikimedia.org/wiki/User:Quibik/Cleaning_up_SVG_files_manually\n. Thank you for your fix.\n. I have a similar problem on another image : \nOriginal\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     viewBox=\"0 0 50 30\" style=\"enable-background:new 0 0 50 30;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n    .st0{fill:#8B8B8B;}\n    .st1{fill:#8B8B8B;stroke:#BE1635;stroke-width:1.0315;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}\n    .st2{display:none;}\n    .st3{display:inline;}\n</style>\n<g id=\"Calque_1\">\n    <g>\n        <g>\n            <path class=\"st0\" d=\"M36.4,29.2H14.5c-0.3,0-0.5-0.2-0.5-0.5v-9.1c0-0.3,0.2-0.5,0.5-0.5c0.3,0,0.5,0.2,0.5,0.5v8.5h20.9V10.9\n                H22.3c-0.3,0-0.5-0.2-0.5-0.5c0-0.3,0.2-0.5,0.5-0.5h14c0.3,0,0.5,0.2,0.5,0.5v18.4C36.9,29,36.7,29.2,36.4,29.2z\"/>\n        </g>\n        <g>\n            <path class=\"st1\" d=\"M14.5,10.3\"/>\n        </g>\n        <rect x=\"14.2\" y=\"23.8\" class=\"st0\" width=\"22.5\" height=\"2.1\"/>\n        <g>\n            <path class=\"st0\" d=\"M30.1,10.4c-0.3,0-0.5-0.2-0.5-0.5c0-3-1.9-5.5-4.1-5.5c-1.7,0-3.3,1.4-3.9,3.6c-0.1,0.3-0.4,0.4-0.6,0.4\n                c-0.3-0.1-0.4-0.4-0.4-0.6c0.7-2.6,2.7-4.4,4.9-4.4c2.8,0,5.2,2.9,5.2,6.5C30.6,10.2,30.3,10.4,30.1,10.4z\"/>\n        </g>\n        <g>\n            <g>\n                <path class=\"st0\" d=\"M6.8,15H4.4c-0.3,0-0.5-0.2-0.5-0.5c0-0.3,0.2-0.5,0.5-0.5h2.5c0.3,0,0.5,0.2,0.5,0.5\n                    C7.3,14.8,7.1,15,6.8,15z\"/>\n            </g>\n            <g>\n                <path class=\"st0\" d=\"M6.8,12.6H2.2c-0.3,0-0.5-0.2-0.5-0.5c0-0.3,0.2-0.5,0.5-0.5h4.6c0.3,0,0.5,0.2,0.5,0.5\n                    C7.3,12.4,7.1,12.6,6.8,12.6z\"/>\n            </g>\n            <g>\n                <path class=\"st0\" d=\"M6.8,10.1H0.9c-0.3,0-0.5-0.2-0.5-0.5c0-0.3,0.2-0.5,0.5-0.5h5.9c0.3,0,0.5,0.2,0.5,0.5\n                    C7.3,9.9,7.1,10.1,6.8,10.1z\"/>\n            </g>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M15.9,19.9c-4.1,0-7.4-3.3-7.4-7.4s3.3-7.4,7.4-7.4s7.4,3.3,7.4,7.4S19.9,19.9,15.9,19.9z M15.9,6.2\n                c-3.5,0-6.3,2.8-6.3,6.3c0,3.5,2.8,6.3,6.3,6.3c3.5,0,6.3-2.8,6.3-6.3C22.2,9.1,19.4,6.2,15.9,6.2z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M15.9,13.1c-0.2,0-0.3-0.1-0.4-0.2l-1.6-2.5c-0.2-0.2-0.1-0.6,0.1-0.7c0.2-0.2,0.6-0.1,0.7,0.1l1.6,2.5\n                c0.2,0.2,0.1,0.6-0.1,0.7C16.1,13,16,13.1,15.9,13.1z\"/>\n        </g>\n        <g>\n            <rect x=\"10\" y=\"6.1\" transform=\"matrix(0.7073 -0.7069 0.7069 0.7073 -1.6932 9.4811)\" class=\"st0\" width=\"1.2\" height=\"1.4\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M15.8,4.4c-1,0-1.8-0.8-1.8-1.8c0-1,0.8-1.8,1.8-1.8c1,0,1.8,0.8,1.8,1.8C17.6,3.6,16.8,4.4,15.8,4.4z\n                 M15.8,1.8c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8c0.4,0,0.8-0.3,0.8-0.8C16.6,2.2,16.3,1.8,15.8,1.8z\"/>\n        </g>\n        <g>\n            <rect x=\"15.4\" y=\"4.1\" class=\"st0\" width=\"0.9\" height=\"1.1\"/>\n        </g>\n    </g>\n</g>\n<g id=\"Calque_2\" class=\"st2\">\n    <g class=\"st3\">\n        <g>\n            <path class=\"st0\" d=\"M33.5,29.2H17.6c-0.3,0-0.5-0.2-0.5-0.5V13.3c0-0.3,0.2-0.5,0.5-0.5h15.9c0.3,0,0.5,0.2,0.5,0.5v15.4\n                C34,29,33.8,29.2,33.5,29.2z M18.1,28.2H33V13.8H18.1V28.2z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M21.2,13c-0.3,0-0.5-0.2-0.5-0.5v-2.1c0-2.7,2.1-4.8,4.8-4.8c2.6,0,4.8,2.1,4.8,4.8c0,0,0,0.1,0,0.1v2.1\n                c0,0.3-0.2,0.5-0.5,0.5s-0.5-0.2-0.5-0.5v-2.1c0,0,0,0,0-0.1c0-2.1-1.7-3.7-3.7-3.7c-2.1,0-3.7,1.7-3.7,3.7l0,2.2\n                C21.8,12.8,21.5,13,21.2,13z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M18.8,13.4c-0.3,0-0.5-0.2-0.5-0.5v-2.3c0-4.1,3.2-7.3,7.2-7.3c4,0,7.2,3.2,7.2,7.2c0,0,0,0.1,0,0.1v2.2\n                c0,0.3-0.2,0.5-0.5,0.5c-0.3,0-0.5-0.2-0.5-0.5v-2.3c0,0,0,0,0-0.1c0-3.4-2.8-6.2-6.2-6.2c-3.4,0-6.2,2.8-6.2,6.2l0,2.4\n                C19.3,13.2,19.1,13.4,18.8,13.4z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M24.2,23.9c-0.1,0-0.3-0.1-0.4-0.2L21.1,21c-0.2-0.2-0.2-0.5,0-0.7c0.2-0.2,0.5-0.2,0.7,0l2.4,2.4l4.7-5.3\n                c0.2-0.2,0.5-0.2,0.7,0c0.2,0.2,0.2,0.5,0,0.7l-5.1,5.7C24.5,23.9,24.4,23.9,24.2,23.9C24.2,23.9,24.2,23.9,24.2,23.9z\"/>\n        </g>\n    </g>\n</g>\n<g id=\"Calque_3\" class=\"st2\">\n    <g class=\"st3\">\n        <g>\n            <path class=\"st0\" d=\"M36.5,29.2H14.6c-0.3,0-0.5-0.2-0.5-0.5V10.3c0-0.3,0.2-0.5,0.5-0.5h21.9c0.3,0,0.5,0.2,0.5,0.5v18.4\n                C37,29,36.8,29.2,36.5,29.2z M15.1,28.2H36V10.9H15.1V28.2z\"/>\n        </g>\n        <rect x=\"14.3\" y=\"23.8\" class=\"st0\" width=\"22.5\" height=\"2.1\"/>\n        <g>\n            <path class=\"st0\" d=\"M30.2,10.4c-0.3,0-0.5-0.2-0.5-0.5c0-3-1.9-5.5-4.1-5.5s-4.1,2.4-4.1,5.5c0,0.3-0.2,0.5-0.5,0.5\n                c-0.3,0-0.5-0.2-0.5-0.5c0-3.6,2.3-6.5,5.2-6.5s5.2,2.9,5.2,6.5C30.7,10.2,30.5,10.4,30.2,10.4z\"/>\n        </g>\n    </g>\n</g>\n<g id=\"Calque_4\" class=\"st2\">\n    <g class=\"st3\">\n        <g>\n            <path class=\"st0\" d=\"M18.4,26.4C18.4,26.4,18.4,26.4,18.4,26.4l-4.4,0c-0.3,0-0.5-0.2-0.5-0.5L12,13c0-0.1,0-0.3,0.1-0.4\n                c0.1-0.1,0.2-0.2,0.4-0.2h7.6c0.1,0,0.3,0.1,0.4,0.2c0.1,0.1,0.1,0.3,0.1,0.4l-1.6,13C18.9,26.2,18.7,26.4,18.4,26.4z M14.5,25.4\n                l3.5,0l1.5-11.9H13L14.5,25.4z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M27.8,16.6c-0.3,0-0.5-0.2-0.5-0.5v-2.3l-3.5,0v2.3c0,0.3-0.2,0.5-0.5,0.5s-0.5-0.2-0.5-0.5v-2.8\n                c0-0.1,0.1-0.3,0.2-0.4c0.1-0.1,0.2-0.2,0.4-0.1l4.5,0c0.3,0,0.5,0.2,0.5,0.5v2.8C28.3,16.4,28.1,16.6,27.8,16.6z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M27.9,29.2h-4.8c-1.1,0-2-0.9-2-2v-9.5c0-1.1,0.9-2,2-2h4.8c1.1,0,2,0.9,2,2v9.5\n                C29.9,28.3,29,29.2,27.9,29.2z M23.2,16.7c-0.5,0-1,0.4-1,1v9.5c0,0.5,0.4,1,1,1h4.8c0.5,0,1-0.4,1-1v-9.5c0-0.5-0.4-1-1-1H23.2z\n                \"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M18.4,28.8H14c-0.3,0-0.5-0.2-0.5-0.5v-2.5c0-0.3,0.2-0.5,0.5-0.5c0.3,0,0.5,0.2,0.5,0.5v2h3.4v-2\n                c0-0.3,0.2-0.5,0.5-0.5c0.3,0,0.5,0.2,0.5,0.5v2.5C19,28.6,18.7,28.8,18.4,28.8z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M37,26.4C37,26.4,37,26.4,37,26.4c-0.3,0-0.5-0.3-0.5-0.6L38,13.4h-6.4l1.5,12.4c0,0.3-0.2,0.5-0.5,0.6\n                c-0.3,0-0.5-0.2-0.6-0.5l-1.5-13c0-0.1,0-0.3,0.1-0.4c0.1-0.1,0.2-0.2,0.4-0.2h7.6c0.1,0,0.3,0.1,0.4,0.2\n                c0.1,0.1,0.1,0.3,0.1,0.4l-1.6,13C37.5,26.2,37.3,26.4,37,26.4z\"/>\n        </g>\n        <g>\n            <path class=\"st0\" d=\"M37,28.8h-4.5c-0.3,0-0.5-0.2-0.5-0.5v-2.5c0-0.3,0.2-0.5,0.5-0.5H37c0.3,0,0.5,0.2,0.5,0.5v2.5\n                C37.5,28.6,37.3,28.8,37,28.8z M33.1,27.8h3.4v-1.4h-3.4V27.8z\"/>\n        </g>\n    </g>\n</g>\n</svg>\n\noptimized ko\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 30\"><style>.st0,.st1{fill:#8b8b8b}.st1{stroke:#be1635;stroke-width:1.0315;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.st2{display:none}.st3{display:inline}</style><g id=\"Calque_1\"><path class=\"st0\" d=\"M36.4 29.2H14.5c-.3 0-.5-.2-.5-.5v-9.1c0-.3.2-.5.5-.5s.5.2.5.5v8.5h20.9V10.9H22.3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5h14c.3 0 .5.2.5.5v18.4c.1.2-.1.4-.4.4z\"/><path class=\"st0\" d=\"M14.2 23.8h22.5v2.1H14.2zM30.1 10.4c-.3 0-.5-.2-.5-.5 0-3-1.9-5.5-4.1-5.5-1.7 0-3.3 1.4-3.9 3.6-.1.3-.4.4-.6.4-.3-.1-.4-.4-.4-.6.7-2.6 2.7-4.4 4.9-4.4 2.8 0 5.2 2.9 5.2 6.5-.1.3-.4.5-.6.5zM6.8 15H4.4c-.3 0-.5-.2-.5-.5s.2-.5.5-.5h2.5c.3 0 .5.2.5.5-.1.3-.3.5-.6.5zM6.8 12.6H2.2c-.3 0-.5-.2-.5-.5s.2-.5.5-.5h4.6c.3 0 .5.2.5.5s-.2.5-.5.5zM6.8 10.1H.9c-.3 0-.5-.2-.5-.5s.2-.5.5-.5h5.9c.3 0 .5.2.5.5s-.2.5-.5.5z\"/><path class=\"st0\" d=\"M15.9 19.9c-4.1 0-7.4-3.3-7.4-7.4s3.3-7.4 7.4-7.4 7.4 3.3 7.4 7.4-3.4 7.4-7.4 7.4zm0-13.7c-3.5 0-6.3 2.8-6.3 6.3s2.8 6.3 6.3 6.3 6.3-2.8 6.3-6.3c0-3.4-2.8-6.3-6.3-6.3z\"/><path class=\"st0\" d=\"M15.9 13.1c-.2 0-.3-.1-.4-.2l-1.6-2.5c-.2-.2-.1-.6.1-.7.2-.2.6-.1.7.1l1.6 2.5c.2.2.1.6-.1.7-.1 0-.2.1-.3.1z\"/><path transform=\"rotate(-44.984 10.603 6.785)\" class=\"st0\" d=\"M10 6.1h1.2v1.4H10z\"/><g><path class=\"st0\" d=\"M15.8 4.4c-1 0-1.8-.8-1.8-1.8S14.8.8 15.8.8s1.8.8 1.8 1.8-.8 1.8-1.8 1.8zm0-2.6c-.4 0-.8.3-.8.8 0 .4.3.8.8.8.4 0 .8-.3.8-.8 0-.4-.3-.8-.8-.8z\"/></g><g><path class=\"st0\" d=\"M15.4 4.1h.9v1.1h-.9z\"/></g></g><g class=\"st2 st3\" id=\"Calque_2\"><path class=\"st0\" d=\"M33.5 29.2H17.6c-.3 0-.5-.2-.5-.5V13.3c0-.3.2-.5.5-.5h15.9c.3 0 .5.2.5.5v15.4c0 .3-.2.5-.5.5zm-15.4-1H33V13.8H18.1v14.4z\"/><path class=\"st0\" d=\"M21.2 13c-.3 0-.5-.2-.5-.5v-2.1c0-2.7 2.1-4.8 4.8-4.8 2.6 0 4.8 2.1 4.8 4.8v2.2c0 .3-.2.5-.5.5s-.5-.2-.5-.5v-2.1-.1c0-2.1-1.7-3.7-3.7-3.7-2.1 0-3.7 1.7-3.7 3.7v2.2c-.1.2-.4.4-.7.4z\"/><path class=\"st0\" d=\"M18.8 13.4c-.3 0-.5-.2-.5-.5v-2.3c0-4.1 3.2-7.3 7.2-7.3s7.2 3.2 7.2 7.2V12.8c0 .3-.2.5-.5.5s-.5-.2-.5-.5v-2.3-.1c0-3.4-2.8-6.2-6.2-6.2-3.4 0-6.2 2.8-6.2 6.2v2.4c0 .4-.2.6-.5.6zM24.2 23.9c-.1 0-.3-.1-.4-.2L21.1 21c-.2-.2-.2-.5 0-.7.2-.2.5-.2.7 0l2.4 2.4 4.7-5.3c.2-.2.5-.2.7 0 .2.2.2.5 0 .7l-5.1 5.7c0 .1-.1.1-.3.1z\"/></g><g class=\"st2 st3\" id=\"Calque_3\"><path class=\"st0\" d=\"M36.5 29.2H14.6c-.3 0-.5-.2-.5-.5V10.3c0-.3.2-.5.5-.5h21.9c.3 0 .5.2.5.5v18.4c0 .3-.2.5-.5.5zm-21.4-1H36V10.9H15.1v17.3z\"/><path class=\"st0\" d=\"M14.3 23.8h22.5v2.1H14.3zM30.2 10.4c-.3 0-.5-.2-.5-.5 0-3-1.9-5.5-4.1-5.5s-4.1 2.4-4.1 5.5c0 .3-.2.5-.5.5s-.5-.2-.5-.5c0-3.6 2.3-6.5 5.2-6.5s5.2 2.9 5.2 6.5c-.2.3-.4.5-.7.5z\"/></g><g class=\"st2 st3\" id=\"Calque_4\"><path class=\"st0\" d=\"M18.4 26.4H14c-.3 0-.5-.2-.5-.5L12 13c0-.1 0-.3.1-.4.1-.1.2-.2.4-.2h7.6c.1 0 .3.1.4.2.1.1.1.3.1.4L19 26c-.1.2-.3.4-.6.4zm-3.9-1H18l1.5-11.9H13l1.5 11.9zM27.8 16.6c-.3 0-.5-.2-.5-.5v-2.3h-3.5v2.3c0 .3-.2.5-.5.5s-.5-.2-.5-.5v-2.8c0-.1.1-.3.2-.4.1-.1.2-.2.4-.1h4.5c.3 0 .5.2.5.5v2.8c-.1.3-.3.5-.6.5z\"/><path class=\"st0\" d=\"M27.9 29.2h-4.8c-1.1 0-2-.9-2-2v-9.5c0-1.1.9-2 2-2h4.8c1.1 0 2 .9 2 2v9.5c0 1.1-.9 2-2 2zm-4.7-12.5c-.5 0-1 .4-1 1v9.5c0 .5.4 1 1 1H28c.5 0 1-.4 1-1v-9.5c0-.5-.4-1-1-1h-4.8zM18.4 28.8H14c-.3 0-.5-.2-.5-.5v-2.5c0-.3.2-.5.5-.5s.5.2.5.5v2h3.4v-2c0-.3.2-.5.5-.5s.5.2.5.5v2.5c.1.3-.2.5-.5.5zM37 26.4c-.3 0-.5-.3-.5-.6L38 13.4h-6.4l1.5 12.4c0 .3-.2.5-.5.6-.3 0-.5-.2-.6-.5l-1.5-13c0-.1 0-.3.1-.4.1-.1.2-.2.4-.2h7.6c.1 0 .3.1.4.2.1.1.1.3.1.4l-1.6 13c0 .3-.2.5-.5.5z\"/><path class=\"st0\" d=\"M37 28.8h-4.5c-.3 0-.5-.2-.5-.5v-2.5c0-.3.2-.5.5-.5H37c.3 0 .5.2.5.5v2.5c0 .3-.2.5-.5.5zm-3.9-1h3.4v-1.4h-3.4v1.4z\"/></g></svg>\n\n. Thank you for the fix. Will you make a new release with the fix ?\n. ",
    "glen-84": "Thank you! =)\n. ",
    "visualcookie": "Nope, it was not in the logs, sadly.\n. ",
    "rally25rs": "Can anyone comment on why some PRs (like this one) are being left open for months without any comments, but other PRs are being accepted/merged?\n. I doubt its a common use case, but it let me clean up my illustrator exported SVGs in one pass through SVGO. I can certainly find another more general SVG manipulating package and move my plugin there and pass images through 2 applications.\n. This error actually comes from the SAX parser that is parsing the SVG.\nhttps://github.com/isaacs/sax-js/blob/5aee2163d55cff24b817bbf550bac44841f9df45/lib/sax.js#L1367. ",
    "ghetolay": "Well, my issue was submitted 6 month ago.\nI can confirm it works now with the latest version 0.7.1.\nThank You.. ",
    "flehoux": "This one SVG is an example of the transform being applied to path's d attribute but not to the values within it's animate.\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"32\" height=\"32\">\n  <g fill=\"currentColor\">\n    <path transform=\"translate(2)\" d=\"M0 12 V20 H4 V12z\">\n      <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n    </path>\n    <path transform=\"translate(8)\" d=\"M0 12 V20 H4 V12z\">\n      <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.2\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n    </path>\n    <path transform=\"translate(14)\" d=\"M0 12 V20 H4 V12z\">\n      <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.4\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path transform=\"translate(20)\" d=\"M0 12 V20 H4 V12z\">\n      <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.6\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path transform=\"translate(26)\" d=\"M0 12 V20 H4 V12z\">\n      <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.8\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n  </g>\n</svg>\nWhich plugin should be doing the above work?\n. ",
    "gjjones": "I'm open to making a PR if it'd be useful to see\n. This PR is meant to address #543\n. @UsulPro, here is an example of how I used it for a plugin to convert SVGs to React components:\nhttps://gitlab.com/gjjones/svg-to-react/blob/master/src/utilities.js#L6\n. Addresses #583\n. What svgo version are you using? The plugin is available as of 7.0.1. There is a file named .svgo.yml in the base directory of your svgo installation. Near the bottom of that file is a line that reads - addAttributesToSVGElement. I'd be curious to know if it' there.\n. Are you able to put this up as a minimal example in a gist or repo? I'll happily take a look to see what's going on, but I'm having trouble understanding from what you've said.\nAlso, the first example of attribute expects a single string. attributes will accept and array and add all of them.\n. Nevermind, easy enough to repro.\n. ",
    "mattyod": "+1\n. ",
    "UsulPro": "Hi!\nAm I right that it convert svg code to one jsx-sutable ?\nif it so could you, please, give a short example how to use it finally?\n. ",
    "ivancuric": "Yea, it's not really in SVGOs domain. What would be the best way to go about the problem in your opinion?\n. I'll try. Still trying to understand how this all works :) Could use some help.\n. Thanks for the prompt reply!\nI should maybe post this to stackoverflow instead of clogging up the repo, but gonna try it anyway :)\n[EDIT]\nhttps://stackoverflow.com/questions/43962597/return-a-resolved-value-from-svgo-in-a-templating-pipeline-via-callbacks\nThing is, the template engine expects a static data object. I managed to \"fool\" it by using a getter:\njs\nconst tpl = {\n  get data() {\n    return {\n      svg: getSvg,\n    };\n  },\n};\nwhich is then used as .pipe(template(tpl.data)) in the gulp pipeline. The caller looks like this:\njs\nconst getSvg = filename => {\n  const svgString = fs.readFileSync(`${path.src.svg}${filename}.svg`, 'utf-8');\n  return optimizeSvg(svgString);\n};\nSo in the end I need a string return value in the tpl.data(filename) call.\nIf you have any ideas I'd be extremely grateful! . ",
    "harriha": "I guess this essentially the same issue as #467 . You need to disable certain plugins: disabling cleanupIDs and removeUselessDefs (in this particular order) fixed the similar issue for me.\n. ",
    "bpalermo": "Works!\n. ",
    "andrey-hohlov": "Same issue (using gulp-svgmin)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <symbol class=\"svg-icon\" viewBox=\"0 0 20 20\" id=\"insta\">\n    <path d=\"M1157.28 118h-14.56a2.72 2.72 0 0 0-2.72 2.715v14.569a2.721 2.721 0 0 0 2.72 2.716h14.56a2.721 2.721 0 0 0 2.72-2.716v-14.569a2.72 2.72 0 0 0-2.72-2.715zm-7.28 14.886a4.473 4.473 0 1 1 4.47-4.473 4.473 4.473 0 0 1-4.47 4.473zm8.31-7.775h-4.04a5.56 5.56 0 0 0-8.54 0h-4.04v-3.883a1.8 1.8 0 0 1 1.79-1.79h13.04a1.8 1.8 0 0 1 1.79 1.79v3.883zm-8.31.427a2.875 2.875 0 1 0 2.88 2.875 2.879 2.879 0 0 0-2.88-2.875zm6.1-4.953h-1.73a.724.724 0 0 0-.72.718v1.73a.724.724 0 0 0 .72.718h1.73a.718.718 0 0 0 .72-.718V121.3a.718.718 0 0 0-.72-.715z\"/>\n  </symbol>\n  <symbol class=\"svg-icon\" viewBox=\"0 0 20 20\" id=\"vk\">\n    <path d=\"M1181.08 129.022a2.336 2.336 0 0 0-1.13-.186h-1.19v2.45h1.09a2.246 2.246 0 0 0 1.27-.216 1.27 1.27 0 0 0 .5-1.04 1.246 1.246 0 0 0-.54-1.008zm-.45-2.092a1.151 1.151 0 0 0 .4-.892 1.021 1.021 0 0 0-.47-.891 2.939 2.939 0 0 0-1.28-.143h-.52v2.156h.69a1.863 1.863 0 0 0 1.18-.23zm5.85-8.93h-12.96a3.514 3.514 0 0 0-3.52 3.515v12.969a3.514 3.514 0 0 0 3.52 3.516h12.96a3.514 3.514 0 0 0 3.52-3.516v-12.969a3.514 3.514 0 0 0-3.52-3.515zm-5.94 15.111h-4.08v-9.861h4.46a2.317 2.317 0 0 1 2.49 2.275 2.1 2.1 0 0 1-1.43 2.127v.029a2.242 2.242 0 0 1 2.03 2.439c0 1.435-.98 2.991-3.47 2.991z\"/>\n  </symbol>\n</svg>\nConverts to: \n<svg xmlns=\"http://www.w3.org/2000/svg\"/>\nBut if one of icons has not empty defs:\n<symbol class=\"svg-icon\" viewBox=\"0 0 20 20\" id=\"insta\">\n    <defs><style></style></defs>\n    <path d=\"M1157.28 118h-14.56a2.72 2.72 0 0 0-2.72 2.715v14.569a2.721 2.721 0 0 0 2.72 2.716h14.56a2.721 2.721 0 0 0 2.72-2.716v-14.569a2.72 2.72 0 0 0-2.72-2.715zm-7.28 14.886a4.473 4.473 0 1 1 4.47-4.473 4.473 4.473 0 0 1-4.47 4.473zm8.31-7.775h-4.04a5.56 5.56 0 0 0-8.54 0h-4.04v-3.883a1.8 1.8 0 0 1 1.79-1.79h13.04a1.8 1.8 0 0 1 1.79 1.79v3.883zm-8.31.427a2.875 2.875 0 1 0 2.88 2.875 2.879 2.879 0 0 0-2.88-2.875zm6.1-4.953h-1.73a.724.724 0 0 0-.72.718v1.73a.724.724 0 0 0 .72.718h1.73a.718.718 0 0 0 .72-.718V121.3a.718.718 0 0 0-.72-.715z\"/>\n</symbol>\nit works.\nIn config:\nsvgoPlugins: [\n  { cleanupIDs: false },\n  { removeUselessDefs: false },\n  { removeViewBox: true },\n  { convertPathData: false },\n   { mergePaths: false },\n   { removeXMLProcInst: false }\n]\n. ",
    "iamdriz": "@GreLI @kevinSuttle Because the : is used by this script as an element search it conflicts with attributes that have : in them. So for example I want to remove the attribute: xmlns:xlink from the svg element but because it sees that : it tries to remove xlink from the xmls element which doesn't exist. That make sense?\n. @GreLI That causes it to try and remove an xlink attribute from an <xmlns> element (which doesn't exist!). The problem is that the : colon is used as a prefix to choose which element to apply the search and in this case the attribute itself contains the prefix so confuses SVGO.\n. ",
    "anaibol": "removeAttrs: {attrs: '(stroke|xmlns)'}, works\n. ",
    "joscha": "Found this thread because I had the same problem when transforming an SVG to vdom calls.\nThe following plugin removes all namespaced attributes:\njs\n    {\n      removePrefixedAttributes: {\n        type: 'perItem',\n        fn: (item) => {\n          item.eachAttr((attr) => {\n            if (attr.prefix && attr.local) {\n              item.removeAttr(attr.name);\n            }\n          });\n        },\n      },\n    }\n. @GreLI this works only for built-in plugins - how do I load/add my custom one with a predefined name like callbackOnDefinedFill?\n. mine is es6 short notation, which makes it a:\n{\n  callbackOnDefinedFill: callbackOnDefinedFill\n}\nmeaning that the key is a string 'callbackOnDefinedFill' and the value is the plugin object.\nYours is only a string key with a JSON object. The plugin is not part of the equation any more and hence can not be picked up unless I tell SVGO somehow that behind the name 'callbackOnDefinedFill' there is the plugin callbackOnDefinedFill - and I am not sure how.\n. Your sample has a defined key in the JSON object. How does svgo know where to get the according plugin code?\n. @GreLI Yes, sure, but your code:\njs\nconst svgo = new SVGO({\n    plugins: [\n      callbackOnDefinedFill: {\n        allowedValues: ['currentColor', 'none', 'inherit'],\n        callback: /* pass your callback here */\n      }\n    ]\n})\ndoes not pass the plugin in anywhere - apart from the plugins array not even taking a named key like that. If I assume you meant:\njs\nconst svgo = new SVGO({\n    plugins: [\n    {\n      callbackOnDefinedFill: {\n        allowedValues: ['currentColor', 'none', 'inherit'],\n        callback: /* pass your callback here */\n      }\n    }\n    ]\n})\nwhich would be allowed by SVGO, it still would just be a plain JSON object with a key named callbackOnDefinedFill, but the plugin has not been loaded.\n. I suppose\njs\nconst callbackOnDefinedFill = require('./callbackOnDefinedFill');\nconst svgo = new SVGO({\n    plugins: [\n    {\n      callbackOnDefinedFill: Object.assign({}, callbackOnDefinedFill, {\n        params: {\n            callback: /* pass your callback here */\n        }\n      })\n    }\n    ]\n});\nwould work without altering the required plugin, I think I was just hoping for something like:\njs\nconst callbackOnDefinedFill = require('./callbackOnDefinedFill');\nconst svgo = new SVGO({\n    plugins: [\n    {\n      callbackOnDefinedFill: { callback: /* pass your callback here */ }\n    }\n    ]\n});\nsvgo.registerPlugin('callbackOnDefinedFill', callbackOnDefinedFill);\nor similar.\n. OK, I will just use Object.assign for now then, thank you @GreLI!\n. ah, great, that works, thanks! I have an optimization step that makes an SVG accessible (it creates an aria-labelledby attribute and adds a <title> and <description> element. Not necessarily a performance optimization, but still an optimization in a sense.\n. @GreLI is there anything I can do to get this merged?\n. Hmm, I'd really like to get this in - is there anyone here that is willing to start a conversation about it?\n. It does a very special optimization which is not related to size, correct,\nbut makes the SVG itself accessible when used within a web context (e.g. as\nan inline icon for example), but I understand what you mean - too bad -\nanyway this plugin and a few more related to using SVGs in an inline\ncontext can be found here then:\nhttps://bitbucket.org/atlassian/atlaskit/src/3eaaa649f0b644a36f451ceed82409dab9639abe/packages/ak-icon/bin/svgo/plugins/?at=master\nCheers,\nJoscha\nOn 13 Nov. 2016 05:38, \"Lev Solntsev\" notifications@github.com wrote:\n\nSorry, I'm rather busy lately. However, I have to say that your PR doesn't\nhave anything related to the purpose of optimization SVGs. People mostly\nremoving titles, etc. There is already too many plugins polluting the scope.\nFell free to use it on your own I just can't accept it since it's off the\nway.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/svg/svgo/pull/612#issuecomment-260140082, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALehpokjJ4w5X-50zwb12ITYbF6gg5Dks5q9geygaJpZM4KUTfQ\n.\n. This change was necessary to allow function definitions in the passed attributes. The addAriaLabels plugin usually auto-generates a random ID to link title/desc to aria-labelledby, but with static fixtures this does not work unless the random part is made static as well.\n. \n",
    "jonrimmer": "I had the same problem.\nThe yml should be:\nyml\nplugins:  \n  - removeAttrs: \n      attrs: 'fill'\n. ",
    "pixelass": "@jonrimmer thx.\nNot sure why people can't just agree upon using json for settings.  It would probably solve/prevent a lot of issues\nSince nobody ever responded to this issue I actually built my own parser to handle issues that svgo has.\nClosing this for now.\n. @derhuerst I don't disagree ;)\nJSON is the main format for a lot of tools (.eslintrc, .babelrc ...) hence the suggestion.\nIMHO js and json are better than yml  at least when working in a node environment\n. ",
    "lifeiscontent": "I also tried svgo -f img/**\nand svgo -f img/**/*.svg but no luck\n. @marcopashkov this is awesome, thanks\n. @GreLI I'd really love a feature like this, currently, I'm working with a designer who uses masks to apply colors to icons in sketch and during the build, I'd like to remove them because they're essentially useless to me and causing display issues in production.. specifically in this case:\n``` xml\n  <svg\n    width=\"60\"\n    height=\"60\"\n    viewBox=\"0 0 60 60\"\n    xmlns:link=\"http://www.w3.org/1999/xlink\"\n\n<defs>\n  <path\n    d=\"M20.588 26L19.1 22.424h-7.2L10.412 26h-2.52l7.416-17.04h.336L23.084 26h-2.496zm-7.776-5.784l2.688-6.48 2.688 6.48h-5.376zM47.744 34.2v.288L40.64 48.792h6.864V51H37.256v-.336l7.152-14.256h-7.056V34.2h10.392zM27 18.253c0-.14.114-.253.256-.253h2.488a.25.25 0 0 1 .256.253v23.494c0 .14-.114.253-.256.253h-2.488a.25.25 0 0 1-.256-.253V18.253z\"\n    id=\"a\"\n  />\n</defs>\n<use xlink:href=\"#a\" fillRule=\"evenodd\" />\n\n\n```\n\nthe xlink:href is causing issues due to all references being named a in sketch.. @strarsis that works, but it'd be ideal to simplify the SVG.. @strarsis how do you use a callback in SVGO?. @GreLI when will the new version release??. @GreLI is there a milestone or timeline?. @TiagoDinisFonseca @tshedor any updates here? I'd really like to use this plugin.. I'd guess you should move the attributes from use to the path and not the  tag.. @GreLI can we prioritize this?\nwhat would you need in order to get this merged?. ",
    "marcopashkov": "My workaround: find . | grep \"\\.svg$\" | xargs -Iz -n 1 -P <number of CPUs> svgo z. The -n 1 argument tells xargs to only use one file at a time. With -P you can run it in parallel.\n. ",
    "kirilloid": "Wow, cool. Thanks for the fix.\n. Sorry, I don't understand what you don't understand.\nI'm suggesting a feature for the tool.\n. ",
    "themadcreator": "Consider this example @GreLI.\nThis defs/mask/use structure is typical of some graphics programs output like Illustrator or Sketch.\nWith IDs:\nsvg\n<svg width=\"315\" height=\"92\" viewBox=\"0 0 315 92\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs>\n        <rect id=\"a\" x=\"7\" y=\"5\" width=\"301\" height=\"31\" rx=\"3\"/>\n        <mask id=\"m\" x=\"0\" y=\"0\" width=\"301\" height=\"31\" fill=\"#fff\">\n            <use xlink:href=\"#a\"/>\n        </mask>\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\" opacity=\".1\">\n        <g stroke=\"#FFF\">\n            <g>\n                <g opacity=\".8\">\n                    <g>\n                        <use mask=\"url(#m)\" stroke-width=\"4\" opacity=\".4\" xlink:href=\"#a\"/>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\nOptimized by inlining referenced element:\nsvg\n<svg width=\"315\" height=\"92\" viewBox=\"0 0 315 92\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g fill=\"none\" fill-rule=\"evenodd\" opacity=\".1\">\n        <g stroke=\"#FFF\" opacity=\".8\">\n            <rect x=\"7\" y=\"5\" width=\"301\" height=\"31\" rx=\"3\" stroke-width=\"4\" opacity=\".4\"/>\n        </g>\n    </g>\n</svg>\n. ",
    "steadicat": "@themadcreator I like this idea a lot, but are you sure your example is correct? I believe Sketch uses the shape-with-mask pattern to recreate the stroke-position: inside setting which is not available in SVG. The mask is supposed to hide the part of the stroke that falls outside the shape. By removing the mask you are breaking this and effectively doubling the width stroke.\nHere's a screenshot of the before and after:\n\n. Here's some examples of what I think @Emasoft is talking about:\nInput:\nxml\n<svg>\n    <g transform=\"translate(2.240000, 10.453333)\">\n        <rect fill=\"#000\" x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n        <rect fill=\"#FFF\" x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n    </g>\n</svg>\nOutput:\nxml\n<svg>\n    <g transform=\"translate(2.24 10.453)\">\n        <rect x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n        <rect fill=\"#FFF\" x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n    </g>\n</svg>\nShould be:\nxml\n<svg>\n    <rect x=\"212.80\" y=\"104.812\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n    <rect fill=\"#FFF\" x=\"212.80\" y=\"104.812\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n</svg>\nInput:\nxml\n<svg>\n    <g transform=\"translate(2.240000, 10.453333)\">\n        <rect fill=\"#000\" x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n    </g>\n</svg>\nOutput:\nxml\n<svg>\n    <rect x=\"210.56\" y=\"94.359\" width=\"22.811\" height=\"33.2\" rx=\"3.733\" transform=\"translate(2.24 10.453)\"/>\n</svg>\nShould be:\nxml\n<svg>\n    <rect x=\"212.80\" y=\"104.812\" width=\"22.811\" height=\"33.2\" rx=\"3.733\"/>\n</svg>\n. I wrote code to flatten transforms for my own project, in case anyone wants to port it over. It doesn't quite support all possible transforms on all shapes yet, but it's a start.. ",
    "ProdigySim": "Though that example was not great, this feature would still be neat for cases where the referenced element is truly only used once within the SVG.\nHere's a snippet from one of mine:\n<defs>\n    <path id=\"SVGID_1_\" d=\"M8.9,12.3c0,0,2,0,2.8,0c1.8,0,3.6-3.4,3.6-5.8c0-3.2-2.5-5.8-5.6-5.8C7.5,0.7,5.5,2,4.6,4\n                    C2.4,4.1,0.7,6,0.7,8.2c0,2.3,2.1,4.1,4,4.1C6.1,12.3,8.9,12.3,8.9,12.3z\"/>\n</defs>\n<clipPath id=\"SVGID_2_\">\n    <use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\" />\n</clipPath>\nCan easily become \n<defs>\n    <clipPath id=\"a\">\n        <path d=\"M8.9 12.3h2.8c1.8 0 3.6-3.4 3.6-5.8 0-3.2-2.5-5.8-5.6-5.8C7.5.7 5.5 2 4.6 4 2.4 4.1.7 6 .7 8.2c0 2.3 2.1 4.1 4 4.1h4.2z\"/>\n    </clipPath>\n</defs>\nI'm just starting to use SVGO and SVGs in my workflow, but I'm seeing a number of examples like this exported from Sketch with <mask>, <clipPath> and other elements.. I just found out firefox has some issues with rendering SVGs that use xlink:href on pages with a <base> tag. This kind of automatic refactor would be really killer for helping with those bugs.\nSee this codepen for example: http://codepen.io/anon/pen/oWgMov (renders on chrome, but not ff)\nAnd this firefox bug (marked fixed, but I think there is still an issue): https://bugzilla.mozilla.org/show_bug.cgi?id=652991. ",
    "zomars": "This would be very useful for exported svg from sketch, most <defs> are only being used once.. ",
    "0gust1": "I dare adding another example : \nWith svgo only :\nsvg\n<svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <defs>\n    <path d=\"M8.18 8H6v13h4.78L8.18 8zm2.04 0l2.6 13H26V8H10.22zM2 24h28l-2 3H4l-2-3zM5 6h22a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1z\" id=\"a\"/>\n  </defs>\n  <use fill=\"#0082C3\" xlink:href=\"#a\" fill-rule=\"evenodd\"/>\n</svg>\nWith svgood (https://github.com/BrentonWheeler/svgood) + svgo \nsvg\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M8.18 8H6v13h4.78L8.18 8zm2.04 0l2.6 13H26V8H10.22zM2 24h28l-2 3H4l-2-3zM5 6h22a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1z\"/>\n</svg>. ",
    "gampleman": "@GreLI would you be happy for a contribution adding this ability?\n. So looking at the source I think something like this is already supported. When I pass in a configuration looking like this:\njavascript\n{ \n  plugins: [\n    { \n     custom: { // this could be any name except the already registered ones\n        type: 'full', // full, perItem or perItemReverse\n        description: 'My custom plugin',\n        params: {}, // some arbitrary data\n        fn: function(data, params) {\n          // custom plugin code goes here\n          return data;\n        }\n     }\n  ]\n}\nI get to execute my code in a custom manner. \nIt seems that the only limitation is:\n- Only supports inline code, so you have to invoke SVGO via the API rather than using command line or YAML.\n. ",
    "elidupuis": "Oh sweet! Thanks for looking into this @gampleman!\nIn my opinion it would be ideal to have a config (or command line) option that points to a local directory of custom plugins that following the conventions of the plugins bundled inside SVGO. This directory would essentially be merged with bundled plugins. \nI peeked at the source when I created this issue but didn't have time to investigate further.\n. Yeah, ideally this would accept more than just id attributes but I haven't wrapped my head around how to make it work yet \ud83d\ude09\n. @GreLI Any suggestions on a configuration format for allowing more flexible element selectors? Are there other plugins that use a CSS-like selector format?\n. How about removeElementsByAttr with config similar to removeAttrs?\nremoveElementsByAttr:\n  attrs:\n    - 'id:foo'\n    - 'class:bar'\nThis plugin config would remove elements with id=\"foo\" or class=\"bar\". \n. Thanks for clarifying, @GreLI. Turns out that my issue was actually the cleanupIDs plugin running before the removeElementsByAttr\u2014which I had configured to remove an element by ID but by that time the ID had already been removed.\nEasy fix was to explicitly declare the cleanupIDs plugin in my config after the removeElementsByAttr plugin.\nI wonder if it's worth giving removeElementsByAttr a little more priority in the order of execution... Seems like there could definitely be conflicts with cleanupAttrs and cleanupIDs.\n. ",
    "rugk": "See edit...\n. Okay, that's good to hear (as it means the SVG is valid).\nIf it is already a known bug: Is there a bug report for this opened in the GNOME issue tracker somewhere?\n. Okay, reported: https://bugzilla.gnome.org/show_bug.cgi?id=769052\n. Uuups\u2026 fixed, here is the correct one: https://fedoramagazine.org/design-faster-web-pages-part-2-image-replacement/. ",
    "andrewcharnley": "Not done a thing, shouldn't this plugin be disabled by default then?\n. I'm using otf, woff etc, the svg is a fallback for older browsers. \nI still thing the role of svgo should be to clean and not destroy. ;)\n. ",
    "hlg": "Hier is a minimal example with two squares of the same solid color, for one defined as one-stop-gradient and for the other defined as simple fill: onestopgradient.svg. I do not find any information about \"openswatchbook\" and whether there is a simpler way to define solid fill swatches. The osb-information makes the color show up in inkscapes palette.\n. ",
    "maksad": "You are right. seems that the versions above ^0.6.0 solves this issue. \ud83d\udc4d \n. ",
    "elrumordelaluz": "great @GreLI, thanks for the reply. \nIs there any doc about  --multipass (didn't foud in README) or at least how to use in node (no CLI)?\nthanks again,\n. Thank you @derhuerst \n. @nicothinconvertStyleToAttrs plugin converts the style attribute form each node, not the classes referenced from <style> ~  Example. @jkelstrup looking at the coa code seems that there's a way to pass a config String JSON formatted. Something like (tested and it works for me):\n```\nsvgo -i test.svg -o test-out.svg --config '{ \"plugins\": [ { \"convertColors\": { \"currentColor\": true } }] }'\n````\nI think could be added into CLI helps.. yes @jkelstrup, absolutely agree about\n\nmight not be the prettiest\n\nand\n\nnew issue should be opened for that. \n\n. @caub the fact that there is a <path> with attribute fill and the value none doesn't means is useless, since fill=none is useful to show the stroke and so on.\nI think because of this, the author (@deepsweet) checks if there is an attribute fill but with value different than none here. @erikdubois removeEmptyText (active by default) didn't work for you?. I think the lib published in npm is the same as last release branch, not master.\nTry comparing this file.\n. don't know about the releases timing, but why not to use the masterbranch?. Seems work well in svgo@^1.0.0. Could you pleas share the output you obtain and what you expected?\nI'm trying with your example (input.svg):\n<svg>\n  <path\n    transform=\"translate(6234.90295410156 1772.95837402344) scale(100)\"\n    id=\"region:1:Barbuda\"\n    d=\"M -61.999862670898438 -16.999860763549748 L -62.000137329101563 -16.999860763549748 -62.000137329101563 -17.000139236450138 -61.999862670898438 -17.000139236450138 Z M -61.852085113525334 -17.642915725707951 L -61.848194122314453 -17.629861831665096 -61.849582672119084 -17.62208366394043 Z M -61.846248626708928 -17.609304428100586 L -61.825416564941406 -17.64708328247076 -61.830139160156193 -17.681528091430721 -61.862083435058537 -17.695140838623104 -61.844581604003906 -17.729583740234432 -61.743194580078125 -17.643472671508903 -61.730972290039006 -17.54486083984375 -61.7620849609375 -17.557361602783203 -61.766803741455021 -17.543193817138786 -61.821804046630859 -17.591806411743107 -61.859027862548771 -17.580972671508789 Z M -61.834861755371094 -17.671806335449332 L -61.834304809570313 -17.665418624877987 -61.836807250976506 -17.667360305786133 Z M -61.862640380859375 -17.682916641235465 L -61.878471374511719 -17.699028015136776 -61.852359771728459 -17.645416259765625 -61.886528015136719 -17.696805953979435 -61.869304656982422 -17.71624946594244 Z\"\n  />\n</svg>\nrunning svgo -i input.svg -p 2 --enable=convertPathData --disable=cleanupIDs -o output.svg --pretty\nthe result (output.svg) is:\n```\n\n\n\n``\n. In the following example you makeremoveStyleElement` active:\nconst svgo = require('svgo')\nnew svgo({\n  plugins: [\n    { removeStyleElement: true },\n  ],\n}). > Warning: Unknown prop dataName on tag. Remove this prop from the element\u2026\nWhere are you getting this warning? Seems something from react, that accept data-attributes not camelCased.\nHowever you could use removeAttrs plugin to remove specific attrs. \nThis plugin is super flexible since accepts value as regexp.\nIn case you won't any data-* attribute you could try with something like in your configuration Object:\nplugins: [\n  {\n    removeAttrs: { attrs: 'data.*' }\n  },\n],\n. Yep, thanks @GreLI I am doing a workaround wrapping the <svg/>s into a temp <root> tag and all the test now pass-green \ud83c\udf89\nThe point that push me to open the Issue is that the xml syntax with errors pass in one case an not in the other (the 2 examples I post before), since both are syntactically wrong, right?. yup seems to be included in ^1.0 versions. @denniske take a look into svg-outline-stroke, you can play online here. Seems based on this check.\nYou have to pass force: true in case <style> or <script> is present.\nIn CLI you have to do something like: \nsvgo input.svg --config '{ \"plugins\": [ { \"cleanupIDs\": { \"force\": true } }] }'. Or use svgomg ;). yes, just pinging to show that tool in case is useful for anyone. However your solution seems pretty valid, will try it!. ok, just asking because was trying to pipe the output to be proccessed with this tool and for single file works perfect.. ",
    "awinogradov": "yep\n. So, svgo doesn't work if u try to use it with mock-fs. I think it's necessary in general and for me, because many users use mock-fs in tests. Now I can't use svgo and I need to find another tool, but I don't want to do it. I like svgo and I think u can solve this problem. I think problem can be in yml parser, but I'm not sure.\nSent from my iPhone\n\nOn 20 Aug 2016, at 21:31, Lev Solntsev notifications@github.com wrote:\nSo what the point of the issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @derhuerst I'm absolutely sure. I've made example for exception demo https://github.com/awinogradov/svgo-ex. You can repeat it:\n\nbash\ngit clone git@github.com:awinogradov/svgo-ex.git\nnpm i\nnode .\n. U can do any operations with mock-fs. SVGO fails anyway :(\nSent from my iPhone\n\nOn 21 Aug 2016, at 01:17, Jannis Redmann notifications@github.com wrote:\nYour example doesn't seem to \"copy\" the files into the mock fs:\nconst mock = require('mock-fs');\nconst SVGO = require('svgo');\nmock({[process.cwd()]: mock.directory()});\nconst svgo = new SVGO();\nAlso, svgo loads the yaml file relative to the current file, not to the current working directory. This looks like it might be another reason it fails.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @derhuerst yep. I'm going to mock-fs issues)\n. https://github.com/tschaub/mock-fs/issues/158\n. \n",
    "blade254353074": "@adamdicarlo \nIt might be caused by .yarnclean file.\nThis file include .*.yml, when you yarn install, match files will be ignore.. https://yarnpkg.com/en/docs/cli/clean. ",
    "athlite": "To get rid of this problem temporarily, edit  ./node_modules/svgo/lib/svgo/config.js\nLine 31, set defaults var:\ndefaults = { plugins: [] }\nYarn is fast, but f*ks up sometimes.. ",
    "zdila": "The problem is that two different results were produced with the same arguments. I'll do some more testing and inform you if I find some more details.\n. ",
    "rtxrulez": "@GreLI Or can you give an example of json config ?. ",
    "MaKleSoft": "I'm integrating the optimizer into another tool that until now is working synchronously. I was just hoping adding a synchronous method would be possible without too much hassle so I didn't have to change my api \ud83d\ude0a other than this is exactly what I was looking for! Thanks for the quick answer, I guess I'll close the issue now.\n. I know... I was just thinking many packages (including the core node\npackages) have synchronous as well asynchronous versions of most functions\nso maybe your dependecies offer that choice, too.\nOn Do., 25. Aug. 2016 at 18:12, Jannis Redmann notifications@github.com\nwrote:\n\nI'm integrating the optimizer into another tool that until now is working\nsynchronously. I was just hoping adding a synchronous method would be\npossible without too much hassle so I didn't have to change my api\nThis is by definition impossible. Since JavaScript runtimes execute blocks\nuntil they finish (without pausing and switching to another context), you\ncan not possible \"wait\" synchronously for another asynchronous context.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/svg/svgo/issues/580#issuecomment-242446250, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABNknD0WEUGWeEnVXh8QeCMHfjTiKOr9ks5qjb71gaJpZM4JtDhM\n.\n. @derhuerst I see. Anyway, thanks so much for the clarification!\n. \n",
    "stephan-v": "Any update on this? It does not work and I have no idea where to find the .svgo.yml file.\n. I pulled it in via imagemin and imagemin grabs imagemin-svgo: 5.1.0 which in turns grabbed svgo 0.7.0.\nI guess that's where the problem is. \nI've added it myself to the file but it does not work properly though.\nIf I try this:\njavascript\n{\n    addAttributesToSVGElement: {\n        attribute: [\"mySvg\", \"test\"]\n    }\n}\nI will get an error:\nError in parsing SVG: Invalid attribute name\nIf I try this:\njavascript\n{\n    addAttributesToSVGElement: {\n        attributes: [\"mySvg\", \"size-big\"]\n    }\n}\nI will get an error:\nError in parsing SVG: Attribute without value\nAm I using it wrongly here?\n. Yes I thought so as well with the single string for a single attribute and I tried that as well but it does not work. This is repo where my gulpfile is located:\nhttps://github.com/stephan-v/svg-workflow\nYou can take a look if you want. I will try to see why it is not working.\n. This was never resolved since I used this for a research project. I am afraid that the current implementation is broken/unfinished.. Can this also copy over the directory structure to the output directory? I am looking for that.. You should never release an unstable version to master.. ",
    "Matt-Butler": "I am also getting this issue. What was the resolution to using the addAttributes plugin?. {\n      addAttributesToSVGElement: {\n        attributes: [`mirror-on-bidi=\"true\"`, `is-static=\"true\"`]\n      }\n    }\nThe code above works, but I am unable to add an attribute without a value.. Thanks @AprilArcus @GreLI . ",
    "yvele": "@ArmorDarks It's maybe a bit ugly but you can make a hack using deasync\n```js\nimport SVGO from \"svgo\";\nimport deasync from \"deasync\";\nfunction svgoOptimizeSync(svgo, content) {\n  let res;\n  svgo.optimize(content, result => res = result);\n  deasync.loopWhile(() => !res);\n  return res;\n}\n```\nPS: I've made a gist of it. ",
    "axelson": "Cool, thanks! That works.\n. ",
    "paulocoghi": "Also, there are cases where is strictly important to preserve linked images. It's up to you, when importing your PNGs in your design tool, to decide if your imported image will be linked or embedded.\n. @lolobosse Now I understand you better! And, now, I think this would be interesting :smiley: \n. For automation purposes, +1\n. Ok, thanks!. ",
    "lolobosse": "@paulocoghi Yeah of course, I wanted to give it as an option only (not to force the user to use embedded images).\nThe use case was that I wanted really small pictures so I took my PNGs and minified them, then I minified my SVGs and I wanted to put them back together not to create 2 HTTP Requests.\nBut ok, I can understand that this could be out of scope \ud83d\ude04 \ud83d\udc4d \n. Cool, I just need to learn how the lib is structured. \ud83d\ude06 \nLet's see what I can get done in the next days. \ud83d\ude80 \n. ",
    "vincentbernat": "Is there a possible workaround for this issue? Replacing spaces by non breaking spaces (U+00A0) doesn't work either.. ",
    "zakness": "Not sure the status of this PR, I came across it because I want to avoid the class/id style leakage mentioned here: https://github.com/svg/svgo/issues/296#issuecomment-127957035.\nIt seems this plugin as currently designed would not solve the leakage problem because it does not inline selectors that match multiple times. To solve leakage it would have to always inline and always remove the <style> blocks. Do I understand this correctly?\nThanks for putting the effort into this plugin!\n. Ah okay, thanks for the quick response @strarsis :)\n. ",
    "diedsmiling": "Are there any updates on this plugin? \n. ",
    "martinjuhasz": "Whats the current status on this? I'm in the need for moving styles declared in a ",
    "laurentvd": "Great work people! Really looking forward to this becoming a default svgo plugin. What's the usual procedure and timeline for these kinds of PRs to become merged and published?. @strarsis thanks and yes I read those instructions (which work fine). The thing is - however - that I'm using a package which uses a package which uses svgo ;-) You probably see my problem there. I'll wait for it to be merged, was just curious on the timeline for this.. ",
    "fb55": "@martinjuhasz I've released the current state as 1.3.0-rc0. Does that work for you?. ",
    "Nejik": "strarsis, thank you very much for your work, your plugin is indeed what we need! \nHope GreLI will merge it soon. I suppose it is bad idea, because it will break code like this\njs2svg : { \n    pretty: config.isDevelopment,\n    indent: 2 \n}. ",
    "satazor": "I'm in desperate need of this to be merged so that I can fully automate my webpack config in conjuction with an external svg sprite.\n\ud83d\udc4d . ",
    "lahmatiy": "@alexjlockwood I suggest some kind of transpiler is used and it doesn't support for require('./file.json'). . @strarsis It's not clear to me what you're asking for. Question about the performance gain? I don't think it's a bottleneck. And converting to css-what format is overengineering.. @strarsis Done 1.0.0-alpha18. This is no removeScriptElement.01 test in your brunch. It was added few days ago. You need to merge upstream into your brunch.. @GreLI \n- Plugins are merged\n- Enabled by default\n- Doesn't remove unused styles when document has a ",
    "Munter": "I'll chime in here as being very interested in getting this released. It seems IE11 in Win10 doesn't apply <style> in data-uri image svg's at all, leaving everthing mostly black. https://connect.microsoft.com/IE/feedback/details/1635483/ie-11-svgs-referenced-as-base64-text-on-imgs-dont-apply-embedded-style\nInlining the styles as individual svg attributes and as a style-attribute fixes it. ",
    "MattyBalaam": "@Munter It's slightly more complicated, if an SVG is under around 4k, then the style declarations will work in IE11, so to test a larger SVG is required.. ",
    "elmpp": "about to wet myself.... ",
    "goldenson": "Any progress on this?. Thank you \ud83d\ude4c \u2764\ufe0f . ",
    "rapka": "Is this still planning on being launched? I would love to see this plugin become available.. ",
    "nchase": "much like the last few commenters, I'd find this really useful...is there anything we can do to help get it into master?. ",
    "justrhysism": "\nIt will be there, I just need some things to settle.\n\nIs there a rough timeline on this? If it's going to be a week or two, I can wait. Otherwise unfortunately I'm going to have to find an alternative solution somehow.. Ah nice! . > Can this also copy over the directory structure to the output directory? I am looking for that.\nHaven't tested it with a different output directory. I suggest creating a new issue for that feature.. What will it take to get this PR merged?. @rugk Your link points to DuckDuckGo.... Invite some new maintainers/collaborators on board? Seems plenty of people are keen to contribute.. \u2b50\ufe0f 10,000+ stars on GitHub, surely there is.. ",
    "My6UoT9": "Is there an option, to remove the \"class\" attribute? As the styles are inline or defined as attribute, the class is not required anymore. I tried removeAttrs plugin - but that didnt remove it.. @strarsis  I had misconfigured the removeAttrs plugin, now it did work. But most likely I have misconfigured your plugin also - as it did not remove the class attribute, while the styles in def did match the classes.\nThis are the options I used (directly modified in src file):\nexports.params = {\n    onlyMatchedOnce: false,\n    removeMatchedSelectors: true,\n    useMqs: ['', 'screen'],\n    usePseudos: ['']\n};\nAnd maybe it helps I add the svg I tried to optimize.\nexample.zip\n. ",
    "theKashey": "Any chance to ship this plugin this year?\nThere are 2 plugins, which will just double profit of SVGO \u2013 this one, and #700, both unmerged :(. Awaiting for the version bump! . @GreLI - I am going to create a plugin for this case.\nOne have to cypher styles and defs, or one SVG can affect another. Imho, isolation plugin might be implemented years ago. \nNever too late.\nhttps://github.com/svg/svgo/pull/700 :(. Look like this is a dummy duplicate of https://github.com/svg/svgo/pull/592. ",
    "moltar": "Not working correctly for the following SVG:\nhttps://gist.githubusercontent.com/moltar/d4c09168515d4a539aedc105274481ae/raw/3fa7869356c1666089b1690e8f0887d2d169105f/test.svg\nRunning with:\nsvgo --multipass --pretty --enable=inlineStyles test.svg\n$> svgo -v\n1.0.5\n. @strarsis But it had no effect... The fill property did not move from <style> block to the attribute on the path.\nFrom test.min.svg:\n<path class=\"st2\" d=\"M62 40h-7v-3c0-1.1-.9-2-2-2h-6c-1.1 0-2 .9-2 2v3h-7c-1.7 0-3 1.3-3 3v16c0 1.7 1.3 3 3 3h24c1.7 0 3-1.3 3-3V43c0-1.7-1.3-3-3-3zm-15-3h6v3h-6v-3zm-9 5h24c.6 0 1 .4 1 1v5H37v-5c0-.6.4-1 1-1zm24 18H38c-.6 0-1-.4-1-1v-9h26v9c0 .6-.4 1-1 1z\"/>\n. @strarsis I see, thank you for pointing that out! . Yup, agreed. I totally expected it to inline everything, that is why I didn't even look for options as my paradigm of thinking was different. The reason I needed to inline everything, is because svg-sprite-loader seems to be stripping out style tags without asking and styles get lost.. ",
    "brutzel": "I followed the discussion here for a while and have been using the plugin a few times already. Great work! But from my point of view the default value should be false for that option. I too had to look up how to set plugin options from the command line for the first time and I think this default value is not very intuitive, I would it expect it to be the default behaviour. I am aware this results in much larger files.. @alexjlockwood right, I think it depends on what you see as optimization. My use case for this plugin is to prepare SVG files for embedding in HTML source. If you do that, CSS classes on multiple SVG elements override each other if they have the same class names. For example Illustrator always uses the same CSS class names st0, st1 and so on for each file. This plugin solves that problem.\nMaybe I had misunderstood the purpose of this plugin, but I think this would be a common use case - although it is not really optimization in the sense of minifying SVG files. But maybe there is a more common use case for this plugin that justifies that default value.. ",
    "caub": "you can't always inline everything without loss, example with :hover: https://jsfiddle.net/qwx02hgg/\nElse for your question, I don't really know, I didn't try this plugin yet\ngreat work!. Yes, I may try to start a branch on svgo for it, and we could tag it as @next on npm, for a future major version.\nIt takes times because most plugins should be rewritten\nhttps://github.com/jsdom/jsdom has improved a lot its SVG support, but getComputedStyle is not working as well as browsers yet https://repl.it/@caub/jsdom-getcomputedstyle, we would need to fix it for svgo\nWe could make a custom DOM impl for svgo, lighter than jsdom, from the current one on svgo\njsdom basically use http://npm.im/nwmatcher (will replaced by http://npm.im/nwsapi soon) for querySelector(All) and matches\nUpdate\nCurrently stuck on https://github.com/dperini/nwsapi/pull/14#issuecomment-383681945, once it's working, we can integrate nwsapi in a light custom DOM for svg, add |getComputedStyle like jsdom](https://github.com/jsdom/jsdom/blob/master/lib/jsdom/browser/Window.js#L472) and add presentation attributes. added below a commit to round viewBox to floatPrecision too, simplified removeViewBox plugin, I can make it a separate PR later when more time\nAlso we should use this to Math.round to round values:\njs\nvar p=3; console.time(1); var factor=Math.pow(10,p); for(var i=0;i<1e6;i++){ var x=Math.random(); Math.round(x*factor)/factor } console.timeEnd(1);\nvar p=3, re=/0+$/; console.time(2); for(var i=0;i<1e6;i++){ var x=Math.random(); x.toFixed(p).replace(re, '') } console.timeEnd(2);\nit's faster than toFixed, and I can't think of a reason to keep trailing zeros? (2.30 instead of 2.3). Do you accept if I clean it? this PR was really dirty\nFor webpack, I don't especially love it myself too, but I'm sure many users would benefit if SVGO can run in browser without effort, I need it for work, like https://github.com/jakearchibald/svgomg too.\nBut webpack is just a dev dependency, I would just need to change the .svgo.yml to .js or .json because yml doesn't work well with webpack, else everything is almost unchanged\nWould it be ok? and thanks for all the hard work\nWill do, in hope\n. ok, thanks much, I see. It can be done as a plugin, with 'full' mode and compare the stringified length with style or with props\nclosing for now. related to https://github.com/svg/svgo/pull/655#issuecomment-280926406 probably. Fixed by https://github.com/svg/svgo/pull/655. I know, but I use fill and stroke that already use computedAttr, I did it in the same plugin for perf, avoiding to do the same thing (item.computedAttr('stroke'), !item.computedAttr('fill', 'none')) in another plugin\nI check the attr in item, that's probably not necessary indeed. note: https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js#L18 is really bad, because this module is required, then this global variable can be changed when running SVGO on one svg, then will keep that value for a next svg.\nI feel like this problem is not only on this plugin\nHow to initialize those variables everytime you run .optimize? is there an event/hook for that?. @GreLI by putting hasStyleOrScript in the config, it allows to make sure a new one is there when running a new instance of SVGO. Without this change, the flag is really global even with a new instance of SVGO\nhttps://github.com/svg/svgo/pull/655/commits/bcd908691f41b9e300e499d25967d3bb3e2a453f#diff-2b80c20a2dbfb8e48fe3a26d26111ddaR13\nit could be possible to make this plugin in full mode like cleanIDs, instead of per element, but I think that's fine like that. why not, but it would break other svg's using it. yes I just meant other svg's in the same window context, that would use a def from another svg. https://github.com/svg/svgo/commit/4495a34f55560b2bc05cf837ba9dd01ca20cd479#diff-e2a39016bf512698d27bb1591c306096  so in plugins/transformsWithOnePath.js l:38 it should be _path.relative2absolute. it's fun because I'm doing the opposite, removing width and height when there's a viewBox. Width/height are really not necessary, like for jpeg/png, it's stylable in css. @nym for doing something simple like this, I would do that: \nhttps://github.com/caub/svgo/blob/browser/test/browser.js#L38-L45\nI've added .js2svg in lib/svgo.js then I can modify the result tree, remove attributes on svg, then stringify again\nresult: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 120.45 120\"><sty...\nresult2: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120.45 120\"><sty...\nand result2 is 25 chars shorter as expected\nYou want to do the opposite, remove viewBox, but it's similar. how is this related to svgo?\nelse just do it sync like\njs\nfunction listSvgs(dir){\n    var items = fs.readdirSync(dir),\n            files = [];\n    for (var item of items){\n        var path = path.join(dir, item);\n        if (fs.statSync(path).isDirectory())\n            files.push(...listSvgs(path));\n        else if (path.endsWith('.svg')\n            files.push(path);\n    }\n    return files;\n}. so if you're motivated, extend this https://github.com/svg/svgo/blob/master/lib/svgo/coa.js#L49 with a -rf option (r for recursive) and paste the code above to get all .svg's.\nI don't need that recursive feature personally, so feel free to make a PR. you're very aloud to. 1. I think it's more the right way to do it http://stackoverflow.com/a/11832950/3183756 1st answer\n2nd answer is confusing Math.round(1.005 * 1000)/1000 gives the right output (1.005), Math.round(1.0051 * 100)/100 gives a right output too (1.01),  maybe Math.round(1.005 * 100)/100 could return 1.01 instead of 1, very edgy case though, and it has a workaround, by adding Math.pow(10, -precision-1) for example\nand toFixed in comparison can give wrong results\n2.  yes, try Math.round(12.00000000000001 * 100)/100, Math.round((0.2+.1) * 100)/100. Other benchmark, with the smartRound function https://repl.it/HiOR\n```js\nfunction roundFixed(value, precision) { // using toFixed\n    var tolerance = +Math.pow(.1, precision).toFixed(precision)\n    var rounded = +value.toFixed(precision - 1);\nreturn +Math.abs(rounded - value) >= tolerance ?\n        +value.toFixed(precision) :\n        rounded;\n\n}\nfunction round(value, precision) { // using Math.round\n    var tolerance = 1 / precision,\n        p = precision / 10,\n        roundedMore = Math.round(value*p) / p;\n    return Math.abs(roundedMore - value) >= tolerance ?\n                Math.round(value * precision) / precision :\n                roundedMore;\n}\nconsole.time('round');\nfor (var i=0; i<1e6; i++){\n    round(Math.random(), 1000);\n}\nconsole.timeEnd('round');\nconsole.time('fixed');\nfor (var i=0; i<1e6; i++){\n    roundFixed(Math.random(), 3);\n}\nconsole.timeEnd('fixed');\n```\ncode updated:\n```js\n/\n * Rounding function \n * - precision = number of decimals (ex: 2 or 3)\n /\nfunction round(value, precisionDigits, error/=Math.pow(.1, precision)*/) {\n    if (precisionDigits==0) return Math.round(value);\n    var rounded = +value.toFixed(precisionDigits),\n        roundedMore = +value.toFixed(precisionDigits - 1);\n    return +Math.abs(roundedMore - value).toFixed(precisionDigits + 1) >= error ? rounded : roundedMore;\n}\n/\n * Rounding function (faster and better than above)\n * - precision = power of ten of the precision (ex 102 for 2 decimals, 103 for 3 decimals), must be at least 10\n * ex: round(10.347, 1e2) // 10.35\n /\n /\nnot used yet, but we should move to it, the tests will differ, some will be shorter, some longer\nbut the rounding is better with it too\nexamples with 3 digits precision\nval                 roundWithMath  roundWithToFixed\n87.87803341656404   87.878         87.877\n75.31152976903701   75.312         75.31\n51.763338789541145  51.763         51.764\n154.5489583866207   154.55         154.549\n /\n/\nfunction round(value, precisionPow10) {\n    var rounded = Math.round(valueprecisionPow10)/precisionPow10,\n        pMore = Math.max(precisionPow10/10, 1),\n        roundedMore = Math.round(value * pMore) /  pMore;\n    return Math.round(10precisionPow10Math.abs(roundedMore - value)) > 10 ? rounded : roundedMore;\n}\n/\n```. @GreLI I've done this as a start https://github.com/caub/svgz, the idea could be to either update svgo or port most of the plugins there, it uses jsdom, I find it much more flexible to process the svg element\nTell me your thought, when you can, there are at least 2 plugins that are going to be harder to port, it's convertPathData and convertTransform, because I'd like to clean them too (like not using .filter when the function have side-effects, and removing globals), cleaning could possibly fix some bugs like #669, and help for doing #644 more simply. closing as this issue is not for short term, could be reopened if you need. I understand the fear of floating points error with Math.round(x * 1000) / 1000, but it can't happen\n.999 factor in smartRound is a bit hacky, it would work with .99 or .9999 too, but it's just to pass the very rare case that round badly like Math.round(9.995 * 100)/100 /* 9.99 instead of 1*/  because 9.995*100 is 999.499999999 \n.toFixed can be bad too, I'm surprised I only got 2 differences in all the tests (now there are no more diff with the .999 factor):\njs\n[+1.555.toFixed(2), Math.round(1.555 * 100)/100] // [1.55, 1.56]. Closing, and just commit the removed globals in cleanup PR for the moment\nwhen I run the plugin test below, it's slightly faster on this branch (495-505ms vs 510-525) so it's still probably the right solution, but no crazily faster (interesting because it's easy to think +x.toFixed(n) would be faster) \n```js\nvar FS = require('fs'),\n    PATH = require('path'),\n    EOL = require('os').EOL,\n    regEOL = new RegExp(EOL, 'g'),\n    regFilename = /^(.*).(\\d+).svg$/,\n    SVGO = require(process.env.COVERAGE ?\n                   '../../lib-cov/svgo':\n                   '../../lib/svgo'),\n    assert = require('assert');\n(async() => {\nconsole.time('plugin tests');\n\nfor (const filename of FS.readdirSync(__dirname)) {\n\n    var match = filename.match(regFilename);\n\n    if (match) {\n\n        var name  = match[1];\n        var index = match[2];\n\n        var file = PATH.resolve(__dirname, filename);\n\n        var data = await readFile(file);\n\n        var splitted = normalize(data).split(/\\s*@@@\\s*/),\n            orig     = splitted[0],\n            should   = splitted[1],\n            params   = splitted[2],\n\n            plugins = {},\n            svgo;\n\n        plugins[name] = (params) ? JSON.parse(params) : true;\n\n        svgo = new SVGO({\n            full    : true,\n            plugins : [ plugins ],\n            js2svg  : { pretty: true }\n        });\n\n        var result = await svgo.optimize(orig);\n\n        assert.equal(normalize(result.data), should);\n\n    }\n\n}\n\nconsole.timeEnd('plugin tests');\n\n})()\n.catch(console.error)\nfunction normalize(file) {\n    return file.trim().replace(regEOL, '\\n');\n}\nfunction readFile(file) {\n    return new Promise(function(resolve, reject) {\n        FS.readFile(file, 'utf8', function(err, data) {\n            if (err) return reject(err);\n            resolve(data);\n        });\n    });\n}\n. try `{prefixIds: {active: true}}`. you can also, for this kind of svg processing (not necessarily minification), do:js\nconst {JSDOM} = require('jsdom')\nconst svg = new JSDOM(svgStr).window.document.querySelector('svg');\nsvg.querySelectorAll('[id]').forEach(el => {\n  const id = el.id, re = new RegExp(#(${id})\\b);\n  svg.querySelectorAll([fill=\"url(#${id})\"], [xlink:href=\"#${id}\"]).forEach(el => {\n    if (el.hasAttribute('fill')) el.setAttribute('fill', el.getAttribute('fill').replace(re, #${prefix}${id}));\n    if (el.hasAttribute('xlink:href')) el.setAttribute('xlink:href', el.getAttribute('xlink:href').replace(re, #${prefix}${id}))\n  });\n  svg.querySelectorAll('style').forEach(s => { s.textContent=s.textContent.replace(re, #${prefix}${id}) }) // should be something better here\n})\n```\nand @vzaidman the plugins list is to make them run in a particular order. closing and making new PR with keeping yml. is it ok to merge? it's useful to round a 25.509999999999 in viewBox. I've picked randomly one, CleanupIDs. Not the most obvious one, but for detecting if there's a scriptOrStyle, it's done more correctly I think:\n```js\nconst idValuePrefix = '#',\n    idValuePostfix = '.';\nexports.fn = function(data, params) {\n// quit if <style> of <script> present ('force' param prevents quitting)\nif (!params.force && data.querySelector('style, script')) return data;\n\nconst preserveIDs = new Set(Array.isArray(params.preserve) ? params.preserve : params.preserve ? [params.preserve] : []),\n    // IDSElems = data.querySelectorAll('[id]'), could do that\n    // IDs = new Map(IDSElems.map(x=>[x.attrs.get('id'), x])), // .attrs should be Maps\n    IDs = new Map(),\n    referencesIDs = new Map();\n\n\nfunction monkeys(items) {\n\n    items.content.forEach(function(item) {\n        // don't remove any ID\n        if (item.isElem()) {\n            item.eachAttr(function(attr) {\n                var key, match;\n\n                // save IDs\n                if (attr.name === 'id') {\n                    key = attr.value;\n                    if (IDs.has(key)) {\n                        item.removeAttr('id'); // remove repeated id\n                    } else {\n                        IDs.set(key, item);\n                    }\n                    return;\n                }\n                // save references\n                if (referencesProps.has(attr.name) && (match = attr.value.match(regReferencesUrl))) {\n                    key = match[2]; // url() reference\n                } else if (\n                    attr.local === 'href' && (match = attr.value.match(regReferencesHref)) ||\n                    attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))\n                ) {\n                    key = match[1]; // href reference\n                }\n                if (key) {\n                    var ref = referencesIDs.get(key) || [];\n                    ref.push(attr);\n                    referencesIDs.set(key, ref);\n                }\n            });\n        }\n        // go deeper\n        if (item.content) {\n            monkeys(item);\n        }\n    });\n}\n\nmonkeys(data);\n\nreferencesIDs.forEach(function(value, key) {\n    if (IDs.has(key)) {\n        // replace referenced IDs with the minified ones\n        if (params.minify && !preserveIDs.has(key)) {\n            currentIDstring = getIDstring(currentID = generateID(currentID), params);\n            IDs.get(key).attr('id').value = currentIDstring;\n\n            value.forEach(function(attr) {\n                attr.value = attr.value.includes(idValuePrefix) ?\n                    attr.value.replace(idValuePrefix + key, idValuePrefix + currentIDstring) :\n                    attr.value.replace(key + idValuePostfix, currentIDstring + idValuePostfix);\n            });\n        }\n        // don't remove referenced IDs\n        IDs.delete(key);\n    }\n});\n\n// remove non-referenced IDs attributes from elements\nif (params.remove) {\n    IDs.forEach(function(value, key) {\n        if (!preserveIDs.has(key)) {\n            value.removeAttr('id');\n        }\n    });\n}\nreturn data;\n\n};\n```\nA better example would have been with minifyStyles, you can even see a findStyleElems in it, so making it in API would just be var elems = data.getElementsByTagName('style'). should come when svgo is updated with jsdom, in the future. it's quite confusing, the npm module is version 0.7.2 and .optimize is callback-based\nmaster branch here is 0.7.2 and has the promise api\nso we should probably change version to 0.8.0 or any non-minor version change. SVGOMG is probably outdated\nsee test/plugins/removeUselessStrokeAndFill* to see what it could do (note: we should rename those tests files without .svg extension, it doesn't make sense and can't be seen easily on GH)\nI didn't contribute a lot, just added an option to completely remove elements that can't be seen (fill=\"none\" and no stroke)\n```js\nstroke: true, // remove the stroke attribute when it has no effect\nfill: true, // remove the fill attribute when it has no effect\nremoveNone: false, // completely remove elements that have computed fill and stroke equal to \"none\",\nhasStyleOrScript: false // this should be removed in the future, to use something cleaner like svg.getElementsByTagName that could be fast\n``. yea no problem, but next time it's better to ask me to rebase it, or tell that you're not interested by it (I don't mind at all). maybe @deepsweet would see the idea interesting? not trying to steal anything, just trying to make things easier to write plugins (using the bare DOM api, which is now quite nice to use (new additions like .after, .append, .closest, ...) and familiar to anyone) (one example: some plugins need to know if there are any",
    "alentsch": "Thank you GreLI, this solved my problem!!!\n. ",
    "chipcullen": "Hrm - when I change my config file to:\nyaml\nplugins:\n  - cleanupIDs:\n      remove: false\n      prefix: 'foo-'\n      minify: true\n  - addClassesToSVGElement:\n       className: 'mySvg'\nMy output is still:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 172.23 172.23\" id=\"bar1\" class=\"mySvg\">\n    <title id=\"bar2\">\n        Test SVG\n    </title>\n    <path id=\"bar3\" d=\"M172.23 86.11A86.12 86.12 0 1 1 86.11 0a86.11 86.11 0 0 1 86.12 86.11\"/>\n</svg>\nSo, neither option has taken. Am I misunderstanding something? Based on what you say, I would expect\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 172.23 172.23\" id=\"foo-a\" class=\"mySvg\">\n    <title id=\"foo-b\">\n        Test SVG\n    </title>\n    <path id=\"foo-c\" d=\"M172.23 86.11A86.12 86.12 0 1 1 86.11 0a86.11 86.11 0 0 1 86.12 86.11\"/>\n</svg>\n. > Have you applied it properly?\nBesides the creation of the config file, and passing it via --congfig= in the command, is there anything else one needs to do?\n. If this helps, this is what I'm seeing:\n\n. ",
    "jaafit": "I'd like to have this applied to unused IDs as well.  I often reference IDs from outside the svg file, and would like to prefix these ids to avoid collisions.  \nUntil such a feature is available, what's a clean way to make my own custom plugin for svgmin?. ",
    "kevva": "I would also like this. Sometimes I don't want all the optimizations.\n. Well, you're running imagemin-svgo with removeViewBox: false and just svgo without it. Can you try svgo --enable=removeViewBox geelongadvertiser.svg geelongadvertiser.min.svg?\nI find it hard to believe imagemin-svgo could break anything since we're essentially just running this module. See https://github.com/imagemin/imagemin-svgo/blob/master/index.js#L16-L26.. Nope, works fine. Here are the images test.zip with the following code:\njs\nimagemin(['geelongadvertiser.svg'], __dirname, {\n    use: [\n        imageminSvgo({\n            plugins: [\n                {removeViewBox: false}\n            ]\n        })\n    ]\n}).then(() => {\n    console.log('done');\n});\nIt's probably something wrong with your code, although I don't have time to look at that. Probably better to ask on StackOverflow.\n. There you go: test.zip. Feel free to close @GreLI.. > and yes, your basic example works; close it as I feel resistance in resolving this\nThat's just how you solve problems in programming. If a function works, it works. If it's breaking in in your code, then you have to debug to see what's wrong in your code. This isn't a support forum, if you can't provide an isolated test that proves that either svgo or imagemin is broken, then it's nothing we can do.\nAnd by looking at your code in the archive you provided, I think you need to learn the basics of async programming before starting to blame other peoples modules.. FYI: You can't do async operations in a regular .forEach and expect stuff to work smoothly. Either use https://github.com/sindresorhus/each-async or Promise.all(files.map(x => doStuff())).. ",
    "alinnert": "IMO, this should be default behaviour. a) Most plugin based tools work like that (Webpack, Babel, PostCSS, eslint, tslint...) b) You cannot know what the user really needs or wants to do c) It's frustrating to figure out why your SVG file is empty, find that plugins are enabled by default and then try to find those plugins that cause this issue, but you have no idea what exactly is going on in the process. (That's what happened to me. I saw that comment that recommends to disable certain plugins. But it seemed they were not enough. Finally, full: true worked for me).\nI think, enabling plugins by default is not a good idea at all. Especially destructive ones, and those that destroy SVG sprites like the following ones: https://github.com/FortAwesome/Font-Awesome/tree/master/sprites. ",
    "cravesoft": "OK, thanks for your answer. We now ask our users to install the latest nodejs from the nodesource binary repository.\n. Thank you very much for keeping me informed. It does indeed work with node v0.10.29 now.\n. ",
    "usirin": "This broke our builds. css-loader uses cssnano uses postcss-svgo uses svgo. And we did not even changed the version of css-loader as we are using strict version numbers*\nNot sure what is the best solution.\n. Guys, how hard can it be to make another release and fix 0.10.x users' problems as well?\n. > btw why all your builds are broken if there was a minor version bump while a major number is still zero?\nProblem of npm maybe, I haven't upgraded our css-loader dependency at all, and it was a fixed version (e.g doesn't include any wildchar ^, ~, *, or you name it), but still got this problem and i fixed it with forking css-loader to use a working version of postcss-svgo.\nBasically what i did was removing cssnano dependency of css-loader.\nHere is the result: https://github.com/usirin/css-loader/commit/f1e39932ff71cc316a328bbf786e3b22a5ce937c\n. ",
    "pmwisdom": "@GreLI Some of us are not afforded the opportunity to use .12+. A build server I am required to use is locked in at .10 for instance. A change from .10 for a lot of people is just not feasible whereas bumping this package by a major release so that we can be stuck in our archaic ways would not require much effort.\n. ",
    "palmerj3": "Yep broke our builds too\n. ",
    "orbiteleven": "Ditto. We don't have the ability to upgrade our Node version yet. Builds for ANYONE using Node 0.10.x and css-loader are broken now.\n. ",
    "leifdalan": "It looks like at least for my build, it is due to postcss-svgo's recent version bump:\nhttps://github.com/ben-eb/postcss-svgo/commit/12c10e7ae173fb5c0a3c730d61d5592d2fc154cb\nPerhaps I should follow up with them.\n. ",
    "nachtfunke": "Thanks! In the Grunt Task I defined removeUselessDefs: true, and with svg-store I applied a class hiddento the svg-element, it seems as if in some cases that led to that problem.\n. ",
    "JonathanStoye": "I seems like under some circumstances the attributes just get reordered which is a change even thought it is not really changing the svg.\n. @GreLI: didn't looked into the pull requests first. We needed it, so I wrote it and thought I should wrap things up and make a PR here. \nSo if you don't need the plugin, should I create a separate PR for the docs update only?\n. ",
    "katspaugh": "@strarsis are you still working on #592?\n. ",
    "joeldenning": "Looks like the build is failing only in node 6. The tests passed but after the tests coverall failed and I'm not sure exactly why. Any ideas on why I'm getting Bad response: 422 {\"message\":\"Couldn't find a repository matching this job.\",\"error\":true} from the node 6 build?\n. This is to maintain a similar behavior to what happens when you try to require a plugin that doesn't exist. Now that the plugins are not being required in this function, this Error maintains backwards compatibility of what should happen for non-existent plugins.\n. This is to maintain a similar behavior to what happens when you try to require a plugin that doesn't exist. Now that the plugins are not being required in this function, this Error maintains backwards compatibility of what should happen for non-existent plugins.\n. ",
    "Muskos": "It's actual.\nYou can try:\nhttp://codepen.io/Muskos/pen/dpjvvj bad\nhttp://codepen.io/Muskos/pen/WGaGmN good\nOr mb you have another solution?\n. ",
    "stenvdb": "Would love an option to fix this as well. This is fixable by moving the linear gradient outside the symbol element. See: https://stackoverflow.com/questions/12867704/svg-linear-gradient-does-not-work-in-firefox#answer-12871215\nAny ideas?. ",
    "slakkenhuis": "I had a similar issue happening when the input file didn't exist.\nsvgo test.svg && echo $?\nError: no such file or directory 'test.svg'.\n0\nI'm not at all familiar with the current codebase or even node.js in general, but it seems an easy fix: https://stackoverflow.com/questions/5266152/how-to-exit-in-node-js \u2014 is there a reason why this shouldn't be done? :). ",
    "emkayy": "I've got a similar question ...\nHow do you enable plug-ins via command line?\nEverything I tried didn't work\nI'm particularly interested in \n- removeAttrs\n- removeTitle\n- cleanupIDs\n- collapseGroups\n- removeStyleElement\n- mergePaths\nWhat I'm trying to do is cleaing up Illustrator asset SVGs as good as possible.\nHowever, I couldn't find any examples online.\nMaybe you could add some more examples for the plug-ins to the documentation?. ",
    "davidtheclark": "@GreLI: I'd like to help here by writing some documentation about how to use SVG via Node. Right now there's an example \u2014 I think we could have a Markdown document that explains the example and also explains how to pass plugins. Are you interested in this?. @GreLI I see this line where data- attributes are ignored. I could add a similar condition for aria- attributes. Or I could add an aria attribute group to https://github.com/svg/svgo/blob/a2a0a1ef3fc51cc5dae25ae85125ecf5fb90b897/plugins/_collections.js#L21 with the list here: https://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def. Which do you think would be the better option?. > I think aria- attributes is ok. But unlike data-, it should be an option.\n@GreLI: This plan sounds good. I can try to get a PR up soon.. ",
    "chrisvfritz": "I noticed this problem with Yarn after someone had run yarn clean. Deleting the .yarnclean file, deleting node_modules, then re-running yarn fixed it.\n. @pcwa-ahendricks @aap82 @teonik @valotvince @khzaw @matthieusb @pearman @bytedaring @jochemjanssens @tommueller @LaravelMonster @soulomoon @LinusBorg @joneslloyd @Cecilxx @brandondurham @junen0511 @disarticulate @jeantimex \nDon't thank me. Thank git diff HEAD^.\n\nBut seriously, please just add a reaction. \ud83d\ude05  I've unsubscribed from this thread so many times, but every mention subscribes me again.. ",
    "pcwa-ahendricks": "Confirming @chrisvfritz fix.  Thanks.\n. ",
    "aap82": "@chrisvfritz confirming as well.  thank you kindly.. ",
    "teonik": "@chrisvfritz Confirmed! I faced this issue unexpectedly when trying to use css-loader with webpack..... ",
    "valotvince": "@chrisvfritz Thanks !. ",
    "brandondurham": "For whatever reason this fix doesn\u2019t work for me.. @dcifuen Worked like a charm. Thanks!. It\u2019s required when used on the front-end. I search for it in the SVG and attach events.. cleanupIDs is set to false in my config above. Is there a different setting I should be using?. This is the whole config:\n```\n\nTo run:\nsvgo -f ./source -o ./optimized --config=./svgo.yml\n\nplugins:\n    - cleanupAttrs: true\n    - cleanUpEnableBackground: true\n    - cleanupIDs: false\n    - cleanupNumericValues: true\n    - collapseGroups: true\n    - convertPathData: true\n    - convertShapeToPath: true\n    - convertTransform: true\n    - mergePaths: true\n    - moveElemsAttrsToGroup: true\n    - multipass: true\n    - removeComments: true\n    - removeDesc: true\n    - removeDimensions: false\n    - removeDoctype: true\n    - removeEditorsNSData: true\n    - removeEmptyAttrs: true\n    - removeEmptyContainers: true\n    - removeEmptyText: true\n    - removeHiddenElems: true\n    - removeMetadata: true\n    - removeNonInheritableGroupAttrs: true\n    - removeRasterImages: false\n    - removeTitle: true\n    - removeUnknownsAndDefaults: true\n    - removeUnusedNS: true\n    - removeUselessDefs: true\n    - removeUselessStrokeAndFill: true\n    - removeXMLProcInst: true\n    - sortAttrs: true\n    - transformsWithOnePath: false\n``\n  .svgo -f ./source -o ./optimized \u2014config=./svgo-gallery.yml`\n\u2026 in this directory:\n\n. Anomaly?. ",
    "damassi": "Is there a way that we can make this library more compatible with Yarn so that this fix is not needed? . ",
    "zrrtcs": "There's an open issue regarding *.yml files in .yarnclean at yarnpkg/yarn#2276. ",
    "khzaw": "@chrisvfritz Worked for me, too. Thanks!. ",
    "matthieusb": "Thanks for the fix @chrisvfritz ! Just saved me a lot of trouble.. ",
    "pearman": "Thanks @chrisvfritz and @zrrtcs. Removing *.yml and .*.yml (and any other entries that should not be deleted) from my .yarnclean file fixed my issues.. ",
    "bytedaring": "@chrisvfritz  Thanks\uff01. ",
    "jochemjanssens": "@chrisvfritz  Thanks!. ",
    "tommueller": "@chrisvfritz Thanks!. ",
    "LaravelMonster": "@chrisvfritz Thanks!. ",
    "jasonmerry": "Thanks :). ",
    "lili21": "Thanks , saved my life. . ",
    "soulomoon": "@chrisvfritz  Thank you!. ",
    "LinusBorg": "@chrisvfritz Thanks! ;). ",
    "joneslloyd": "@chrisvfritz Cheers!. ",
    "Cecilxx": "@chrisvfritz thanks. ",
    "dcifuen": "Instead of deleting the whole .yarclean file or removing the lines *.yml and .*.yml, you can add a new line in your .yarclean to ignore this specific file: !svgo/.svgo.yml. ",
    "junen0511": "@chrisvfritz Thanks!. ",
    "disarticulate": "still doin whatever it's doin. Fix above worked.. ",
    "jeantimex": "@chrisvfritz Thanks a lot!. ",
    "crisu83": "@dcifuen your solution worked perfectly, thanks! \ud83d\udc4d \n  . ",
    "ownmaster": "Sometimes svgo can be referenced by other installed modules, in such case you need to change @dcifuen suggestion to !.svgo.yml - it will ignore .svgo.yml in all subfolders.. ",
    "bomberstudios": "+1. I recently added an auto prefixing feature for defs to https://github.com/BohemianCoding/svgo-compressor, based on the SVG filename, and was considering sending a pull request to make it \"native\" to SVGO.. \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f. ",
    "harrisjose": "Even though I mostly don't have this issue these days ( we just started using attributes or inline styles when exporting svgs ), I'd still love to see this being natively supported in svgo.. Closing this since prefixIds plugin by @strarsis takes care of what I was originally trying to achieve.. @strarsis @caub \nCan you guys take a look at this and let me know if this is okay?. @strarsis I thought I'd already looked in the css-url-regex module for this. Oh well.\nIf there aren't any further changes required, can we get this merged and released? I'd really appreciate it cause we're running into this issue with a few svgs at work. Thanks.. @GreLI \nSorry if I'm being a nuisance but can we get this released as a patch? Would help a lot. Thanks.. ",
    "Emasoft": "It flattens the transforms of all elements (including elliptical arcs, gradients, text and tspan) concatenating the cumulative transforms of all parents since the root node and applying the resulting matrix to the leaf elements (rects are converted to polygons to allow that). When not possible to completely eliminate the transform (for edge cases like some filters on groups), the  children element is left with a transform matrix that includes all transformations of the parents, so that the matrix multiplications required to get the the element local coordinates are minimized.\n. It does a very little of this, actually. Transforms in the output file are still too many compared to Affinity Designer exported svg file.\n. Any update on this? \nThis is a much needed feature because it allows to copy paste any xml node from an svg file to inline html without having to copy all parents nodes.. How long before this is implemented? This is a much needed feature. Too much time wasted in doing this manually every day.. The prefix should be the name of the file. For example: \nIconOfACar.svg -> iconofacar_id1\nIconOfABeer.svg -> iconofabeer_id1. I don't think that is versatile for batch processing. I usually process thousands of svg files with a script at every site update, and I surely don't want to manually enter a prefix for each one.. ",
    "mattvenn": "+1. ",
    "nashwaan": "@GreLI I hope you get time to get this important feature implemented very sooooooooooooon.\n\ud83d\ude0a. Almost a year passed and we are still waiting.\n\ud83d\ude1e . @lemnis Thank you for educating me and telling me I should be grateful to the open source community.. ",
    "macrozone": "would also be useful to convert svg graphics to simple paths, which can easily be used in react-native-svg. @GreLI thx, that makes sense. However its somewhat unexpected by just looking at the option.\nI worked around it in my special case by renaming the ids to a custom attribute first and then applying svgo.\n. ",
    "irisjae": "seems theres an existing package https://github.com/stadline/svg-flatten to do it, maybe someone could transform this into an svgo plugin? btw the package does not seem to handle filters, maybe we should add a clause in the recursion to flatten the transform onto the filter as well. besides filters, are there any other cases where we might need to recurse transform flattening beyond a nodes children? masks maybe?. ",
    "lemnis": "Another day, another starting point, my fork https://github.com/lemnis/svgo has support of removing translate of a select group of properties. It also has the tests of above mentioned code written by @steadicat, currently my code fails most of the tests and I am not planning to improve my code in the near future.. @nashwaan Be grateful that other people are willing to use their precious time to create and extend code that everybody can use. Otherwise, you have 2 options, pay lots of money more for all software you use or create the code yourself. \nOr maybe the last solution is the best for you, keep waiting patiently.  \ud83d\ude09 . ",
    "saivan": "I've had the same issue, it would be really nice to be able to flatten everything. . ",
    "cheshrkat": "+1 this would be awesome.. ",
    "morewry": "I have this issue too, and I'd swear it used to work better. But currently SVGO doesn't \"flatten\" or precalculate even very simple transforms. I have examples where there's a transform translate of 1,1 on a group and even that isn't recalculated.\nOne very common source of unnecessary transformations stems from the behavior of design software for working with SVGs. They tend to be very literal. If you click the \"path\" tool, you get a path. If you click the \"circle\" tool, you get a circle. And if you draw an icon with some shapes, group them, then move it down with the arrow key 4 times and to the right 8 times, you'll end up with a group that has a transform translate of 8, 4. (This is true of every single editor I've used: Illustrator, Sketch, Inkscape, etc--though some of them offer ways to flatten the transforms. Sketch, however, [which we use] doesn't.)\nAs the OP mentions, this is just noise--there's no reason whatsoever to preserve a transformation of that kind and so files that preserve this are missing an obvious if relatively minor optimization.\nBut in my situation this leads to real issues. I have a use case where we need to convert our icons to Android's Vector Drawable format. We work with SVG as the \"origin\" format and convert to Vector Drawable after optimizing with SVGO. Vector Drawables are a little touchy, it seems (we had issues if we optimized away leading 0s), and there aren't many tools available to automate this conversion. \nAnd, it turns out, these preserved translations also cause issues. They're unsupported or just ignored in the conversion process and result in the icon being mis-aligned and cut off relative to the viewbox.\n\nExample SVGs, before and after\n\n**Before**\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch \nicon/UI 24px/Vision Small (eye)\nCreated with Sketch.\n\n\n\n\n\n\n\n\n\n```\n\n**After**\n```\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n```\n\n-----------\n\n**Before**\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch \nicon/Display 32px/Vision (eye)\nCreated with Sketch.\n\n\n\n\n\n\n\n\n\n```\n\n**After**\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n```\n\n-----------\n\n**Before**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch \nicon/UI 24px/Pin (map marker, location)\nCreated with Sketch.\n\n\n\n\n\n\n\n\n```\n\n**After**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n```\n\n-----------\n\n**Before**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch \nicon/Display 32px/Prescription Generic (pharmacy, medicine, bottle, Rx)\nCreated with Sketch.\n\n\n\n\n\n\n\n\n\n\n\n```\n\n**After**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n\n```\n\n-----------\n\n**Before**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch \nicon/UI 24px/Search (magnifying glass, find, discover)\nCreated with Sketch.\n\n\n\n\n\n\n\n\n```\n\n**After**\n\n```html\nxml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n```\n\n\n\n\nSVGO config\n\n```js\nconst hash = require('string-hash');\n\nmodule.exports = {\n  full: true,\n  multipass: true,\n  precision: 3,\n  // order of plugins is important to correct functionality\n  plugins: [\n    { removeDoctype: true },\n    { removeXMLProcInst: true },\n    { removeComments: true },\n    { removeMetadata: true },\n    { removeXMLNS: false },\n    { removeEditorsNSData: true },\n    { cleanupAttrs: true },\n    { inlineStyles: true },\n    { minifyStyles: true },\n    { convertStyleToAttrs: true },\n    { cleanupIDs: true },\n    {\n      prefixIds: {\n        prefix: function(element, filePath) {\n          const fileNameId = hash(\n            filePath\n              .split('/')\n              .slice(-2)\n              .join('/')\n          );\n          return `i${fileNameId}`;\n        }\n      }\n    },\n    { removeRasterImages: true },\n    { removeUselessDefs: true },\n    { cleanupNumericValues: true },\n    { cleanupListOfValues: true },\n    { convertColors: { currentColor: true } },\n    { removeUnknownsAndDefaults: true },\n    { removeNonInheritableGroupAttrs: true },\n    { removeUselessStrokeAndFill: true },\n    { removeViewBox: false },\n    { cleanupEnableBackground: true },\n    { removeHiddenElems: true },\n    { removeEmptyText: true },\n    { convertShapeToPath: true },\n    { moveElemsAttrsToGroup: true },\n    { moveGroupAttrsToElems: true },\n    { collapseGroups: true },\n    { convertPathData: true },\n    { convertTransform: true },\n    { removeEmptyAttrs: true },\n    { removeEmptyContainers: true },\n    { mergePaths: true },\n    { removeUnusedNS: true },\n    { sortAttrs: true },\n    { removeTitle: true },\n    { removeDesc: true },\n    { removeDimensions: false },\n    { removeAttrs: false },\n    { removeElementsByAttr: false },\n    { addClassesToSVGElement: false },\n    { removeStyleElement: true },\n    { removeScriptElement: true },\n    {\n      addAttributesToSVGElement: {\n        attributes: [{ display: 'block' }, { 'pointer-events': 'none' }]\n      }\n    }\n  ],\n  js2svg: {\n    pretty: false,\n    indent: ''\n  }\n};\n```\n\n\n\nCould be this works better with some configurations than others, but I'm sure we're all aware that SVGO can be a bit challenging to configure, so if anyone has some tips on that, please share, it could help in some cases.\n(One configuration possibility that I tried was not doubling up on moveElemsAttrsToGroup and moveGroupAttrsToElems, but enabling either option alone didn't help flatten any of these. I don't 100% guarantee I didn't make a mistake on that experiment, because all 3 ways ended up with the transform on the group [though other attributes did move], which strikes me as a little odd.). ",
    "upendra-web": "@Emasoft, recently I made this repo, just like SVGOMG but with Vue. I added flatten svg option, whose code was provided by Timo in his gist (with some modifications). It is still in experimental stage. It worked on the transforms of most of the paths (except some text and clipaths). So can anyone check that option and give your opinions.\nThank you all.. > @upendra-web Superb work with lean-SVG !\nThank you very much @andrewrcollins . ",
    "andrewrcollins": "@upendra-web Superb work with lean-SVG !. ",
    "peternowell": "So does that mean that the SVGO's CSS colors minifier couldn't be augmented with this feature? Given that there are a very limited number of color formats in this scenario, couldn't this just be written from scratch pretty quickly? Just remove spaces, round numbers to specified level of precision, and remove any zeros preceeding decimals?. I second the need for this!. @caub By \"break other SVGs using it\" do you mean that replacing  elements with the things they reference would break some SVGs? Wouldn't this only break an SVG if you were using a spritesheet, with  elements referencing it from outside that SVG file? Are there any other situations where replacing a  with what it references would break an SVG?. That makes sense.\n@alexjlockwood I'm actually creating my own SVG optimizer tool, that will have this \"replace  with what it references\" optimization. It also includes a few optimizations that I haven't found in SVGO or that are specific to tools like Sketch, and therefore might not make sense for SVGO. I plan to release it next week. :). What I'm proposing is a lot more simple\u2014I think\u2014than what would be required when fitting into SVGO, especially because this would have to be an optimization that happens before most others. What I had in mind was something like this:\n- Each <use> element (\"original\") is replaced by a clone of the element it referenced (assuming it was referencing something).\n- Any attributes from the referenced element are retained and added to any that were on the original <use> element.\n- If there are two of the same attribute between these two, keep the attribute that was on the original <use> element, as that would have overwritten the one on the referenced element.\n- x and y attributes on the original <use> element should be added to the element's position coordinates or path data. I suppose it could be added as a transform too, but I'm not as favorable to that solution.\n@GreLI I'll be the first to admit that you're a lot smarter than me when it comes to things like this, so I'm curious to hear how often the above logic would fail\u2014even if it was just a one-off optimization that didn't exist in the whole list of SVGO's. I'm not sure I understand what a practical example would be, regarding the \"little differences\", \"how often\", and \"path smaller than the use\" points you made above.. Thank you so much, @caub! I didn't know about that whole folder of test SVGs. Those examples seem to have cleared up my confusion.. ",
    "realfish": "Sorry for mistaking a repo.. ",
    "romuloinnocencio": "Hum, I think this is really usefull. \nIf i use \"https://jakearchibald.github.io/svgomg/\", the svg gets smaller, but if i use svgmin at grunt, gets bigger than \"https://jakearchibald.github.io/svgomg/\".\nThere's a way to set Multipass and Precision on it?. ",
    "jkelstrup": "Thanks a lot @elrumordelaluz ! This might not be the prettiest of CLI-interactions, but it does exactly what I was looking for!\nI'm gonna close this issue. If others could find it useful to see this improved, I think a new issue should be opened for that.. ",
    "AlimovSV": "Looks like you use svgo version without this commit (old behaviour was exactly what you described, just #000000 treated as true). I tested your file locally, the result is as expected - fill color stay unmodified, stroke replaced with currentColor.. ",
    "erikdubois": "close for now - Upon next cleaning cycle I will get back to you if this is still relevant. ",
    "jadchaar": "Just used the tool--very nice! Well done!. ",
    "koraysels": "I tried spelling it cleanupIDs to no avail.. looks like the options do not pass on to the actual imagemin process.... ",
    "meze": "Found in google, worked for me:  svgoPlugins: [{removeViewBox: false}, {cleanUpIDs: false}]. ",
    "kornelski": "That's very helpful. Thank you.. ",
    "pwichmann": "So, is this still unsolved?. I would make a PR if I knew how to solve the problem.. Thanks @GreLI !\nIn my case, I only deal with static images (no animations).. ",
    "DavidBruchmann": "It can't always be assumed that scenes outside the viewport are not used.\nDepending on animations scenes are moved around and get visible when moved\ninside the viewport.\nTherefore a general solution is not possible and any cropping has to be\noptional and/or define-able for each object.\nAlso a threshold could be defined for this purpose, assume you've a layer\nfor light-effects that is far away from the viewport but still has some\nimpact on the image in the viewport, depending on a threshold the hole\nlayer could be rendered or omitted.\nOn Sat, May 13, 2017 at 4:11 PM, Lev Solntsev notifications@github.com\nwrote:\n\nWell, basically you need to check if the element axis-aligned bounding box\n(AABB) is outside of viewBox\nhttps://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute. Computing AABB\nis somewhat trivial for basic shapes, and is done for paths inside\nintersects function in plugins/path.js\nhttps://github.com/svg/svgo/blob/4495a34f55560b2bc05cf837ba9dd01ca20cd479/plugins/_path.js#L601.\nThe only caveat could be a stroke (specifically stroke miter\nhttps://www.w3.org/TR/SVG/painting.html#StrokeProperties), but it can\nbe handled later, in further iteration.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/svg/svgo/issues/647#issuecomment-301235800, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA8-6iS1ShqpqbFCX_2ZZLBwVpSC-JSsks5r5XPSgaJpZM4LnJnZ\n.\n. No clue how the possibilities are with installed git-bash in windows, there are some linux-commands like grep and find available too. Should be possible to combine that but add another dependency ...\nI know this is probably not the way to go but just thought about it.. Can you provide an example for your idea?. \n",
    "briantbutton": "FWIW, I am looking for an application that does this.  Only this.  I deal with map files and have not found an editor that will handle them.\nThe search continues . . . . ",
    "baldwmic": "Thanks for taking a look @GreLI \nMotivation\nThe purpose of submitting this PR is to clean up id attributes in SVG files by converting those id attributes to class attributes. If you include an SVG file with an id attribute more than once into an HTML file, that file has become invalidated because an id attribute needs to be unique. \nApplication\nDesign tools like Sketch and Adobe Illustrator automatically generate SVG files when exporting the designs. When a designer exports these SVG files, the design layers in the application append an id attribute of that layer name to the SVG. Therefore, the idea is to use svgo to clean up or optimize SVG files automatically generated by design tools for use in web applications. #494 is an example of this.\nFuture Work\nLet me know if this is something you are interested in pursuing. I understand if it does not align with the goals of svgo and we can close the PR.\nGratitude\nThank you for your work on svgo! We are using this fork at my company, and it was easy to get started with svgo thanks to the good documentation. My only advice is that it would be nice to be able to write a command line plugin without needing to fork the repo as described in #564. @danielbayley yeah i could see this being quite useful for developers working with SVGs exported from Adobe Illustrator.\nIt would be great if we could write plugins like #564 describes that could hook into the svgo functionality without needing to fork the entire repo. if someone made progress on #564 that might help our PR's find a home that makes more sense. ",
    "pmb0": "I use svgo to preproces a SVG for a google AMP project. Stripping version to 1 causes ampvalidator to throw following error:\nsh\nThe attribute 'version' in tag 'svg' is set to the invalid value '1'. (see https://www.ampproject.org/docs/reference/spec.html#svg)\n1.0 should not be shortened to 1.. ",
    "FranckFreiburger": "hint reports an error about this: Bad value \u201c1\u201d for attribute \u201cversion\u201d on element \u201csvg\u201d.. ",
    "tigt": "Should be fixed by #1028 . Perhaps instead of testing for various bitmap file formats, it should instead test to see if the <image> is SVG? Sort of like this:\njs\nif (item.isElem('image') && \n    item.hasAttrLocal('href') && \n    ! item.hasAttrLocal('href', /(\\.|image\\/)svgz?/)) {\n  return false;\n}\nThe bitmap formats that browsers support can get pretty wacky (.jxr, .xbm) and are growing (.webp), so inverting the logic should be more maintainable. It would also guard against false positives from data: URIs randomly matching one of those substrings.. This is indeed a bug, but last I checked browser support for xml:space in SVG is patchy.\nFor example, neither IE nor Edge respects it, and I think Firefox may have issues with it as well.\nYou may have to convert double spaces to alternate between spaces and non-breaking spaces for that reason anyway.. This maybe should check for other styling attributes than stroke and fill \u2014 it could change rendering if one of the paths has stroke-dasharray, for example. It probably shouldn't clone paths unless the differences fall under the attributes where it's safe for the <use> to differ:\n\nid and class\ntransform\nMaybe some others\n\nIt also doesn't have to move the \"source\" <path> into a <defs> block \u2014 referencing an already-visible element with <use> is perfectly okay.. Changing the regex to /[ ,]+?/g should work, I think \u2014 I\u2019ll open a PR for it.. Did you mean to title this issue \u201cswitch to cssnano from csso\u201d?. Er, when I said \"origin\" in the original post, I meant the originating M command at the beginning \u2014 not 0,0. Fair point. I'll make some test cases for shapes with strokes and see if I can identify what changes. ",
    "gopeter": "Oh, maybe we should disable this plugin by default :-). Because you already told @dnewcome that you don't want to include circleToPath conversions into convertShapeToPath because it doesn't optimize SVG code but makes the files bigger. \nTo quote you: Paths are ok, they are just written with more bytes which is opposite to purpose of optimization.\nThat's why I thought that this should go into an extra plugin.. OK, so I'll add it to convertShapeToPath and you would be fine with it? :). ",
    "nikparo": "Here's part of one of mine. I use full: true, behaviour may be different with it off.\njavascript\nvar svgo_config = {\n    full: true,\n    multipass: false,\n    js2svg: {\n        pretty: true,\n        indent: '  '\n    },\n    plugins: [\n        { removeEditorsNSData: {\n            additionalNamespaces: ['http://www.figma.com/figma/ns']}\n        },\n        { removeDesc: {removeAny: true} },\n        // 'removeTitle', // This doesn't actually enable disabled by default plugins\n        { removeTitle: {} }, // pass it an argument to enable\n        'removeComments', // does enable default plugins. (using { full: true } )\n        'removeMetadata',\n    ]\n};\nvar svgo = new SVGO(svgo_config);. Try:\nsvgo --pretty --disable=convertColors -o - default-color.svg . ~~May have created the request a bit too early, noticed that there are some problems with at least masks and clip paths.~~\n\n[Edit: My test was faulty.]. ",
    "tmpfs": "Thanks for the info :) Closing as not an issue.. ",
    "Zearin": ":D. ",
    "kevinkace": "Turns out I wasn't using plugins correctly, should be:\njs\n{\n    plugins : [{\n        removeUselessDefs : false\n    }, {\n        removeAttrs : {\n            attrs : [ \"class\" ]\n        }\n    }]\n}. ",
    "petebarr": "Thanks for the heads up! :-). ",
    "shrpne": "Optimization curve to arc returns the wrong result. \nI got wrong large-arc-flag in the arc a4.98 4.98 0 1 0-3.38 8.66, it should be a4.98 4.98 0 0 0-3.38 8.66\nTested with svgo 1.0.5 with precision 2, however precision 3 returns fine result.\nInitial path\nd=\"M20,9 C26.085938,9 31,13.914062 31,20 C31,22.679688 30.046876,25.125 28.46875,27.03125 C27.609376,24.59375 25.75,22.632812 23.375,21.664062 C24.367188,20.75 25,19.445312 25,18 C25,15.25 22.75,13 20,13 C17.25,13 15,15.25 15,18 C15,19.445312 15.632812,20.75 16.625,21.664062 C14.25,22.632812 12.398438,24.59375 11.539062,27.03125 C9.953126,25.125 9,22.679688 9,20  C9,13.914062 13.914062,9 20,9 Z \" \nOptimization output\nd=\"M20 9a10.99 10.99 0 0 1 8.47 18.03 9.04 9.04 0 0 0-5.1-5.37A4.98 4.98 0 0 0 20 13a4.98 4.98 0 1 0-3.38 8.66 9.03 9.03 0 0 0-5.08 5.37A10.99 10.99 0 0 1 20 9z\"\nExpected output\nd=\"M20 9a10.99 10.99 0 0 1 8.47 18.03 9.04 9.04 0 0 0-5.1-5.37A4.98 4.98 0 0 0 20 13a4.98 4.98 0 0 0-3.38 8.66 9.03 9.03 0 0 0-5.08 5.37A10.99 10.99 0 0 1 20 9z\"\nMaybe these issues are related to it:\n822, #842.",
    "erkiesken": "Also was covered a bit in #622 without resolving it.. ",
    "Kraxxis": "I, too, need this feature.\nthe cleanupIDs prefix option is not a solution to this problem.  Consider two svg files both of which have a defined id \"id1\".  When using the two separate svgs inline, these two ids will conflict, since they exist in the same document.  Using the prefix option only moves this problem from having two conflicting \"id1\" ids to having two conflicting \"prefix_id1\" ids.. ",
    "pluma": "Being able to supply the prefix should suffice. Seems more versatile than having SVGO pick one automagically.. ",
    "OwenMelbz": "Is there any movement on this?\nAs much as it sounds a dick move, I think you need to go with a general consensus here, this is an issue that many users are having when using inlined SVGs when passed through SVGO - for example we even have this issue using Sketch SVGO Compressor plugin, we end up having 10 SVGs with #a that causes masking issues so have to manually go through the file and change them, which is not feasible for a fully automated system.\nAs @Emasoft has suggested, I think the only sensible solution would be to slugify the filename and use that as the id prefix, turn this on as a default, which means every user that has an automated workflow or has tools that then use svgo will be unaffected, unless they pass in an extra option to disable it something like --disable-auto-id-prefix\n@strarsis this does seem like similar issue yeah, I think the issue as a whole is just around \"naming conflicts as the minification process has no concept of other files\". @GreLI You've completely missed the point - which clearly several other people have agreed there is an issue.\nMany automated systems rely on svgo\nMany of these systems do not allow the user to modify settings.\ne.g Sketch has a official plugin, SVGO Compressor, which uses svgo.\nThe end user cannot modify the plugin or config.\nThus your reply is void.\nIts extremely narrow minded and selfish to disregard an issue simply because you don't want to address it, rather than helping the global community come up with a solution to a community acknowledged issue.\nMaybe if we state the problem again you will understand.\n\nSVGO when cleaning up IDs (a feature that is still desired) does not have a concept of \"other svgs\" - which means if you minified 100 svgs, they would all end up having the id of a which means they're next to useless to be embedded into webpages.\nThe solution to help developers/designers/content writers/PEOPLE is by using the privileged stance of svgos positioning in the development world to implement a feature that solves this issue for users who are using their system for some reason. And there have been plenty of suggestions on ways to solve this.\nRemember when Facebook - a social media platform, decided to use its privileged position to help family members involved in world crises to mark theirselves as safe? Yes its not directly their problem to solve, but they could propose a solution because it was for the benefit of its users. \nThis is why people come to you guys seeking solutions, because you're in a position to help out. Similarly to the cheesy line from spider-man - with great power comes great responsibility.\nMaybe thinking of it in a different non-dismissive Trump-like manor will urge you not to slap a \"closed\" on a real life issue.. if your gonna act like an arrogant cunt and not help the community out then block it. \ud83d\udc4c\ud83c\udffc Peace out dickhead. ",
    "walnutpedia": "@pluma @Kraxxis @Emasoft @OwenMelbz \nI have encountered this problem recently. I use react-svg-loader to import svg files directly. the react-svg-loader use svgo to optimize svg files. the problem is Adobe Illustrator will export svg files with same ID, and no matter how SVGO minify the ID there will be collision. I searched for a solution and ended up with this issue. \nI think @GreLI 's right about the usage and purpose of SVGO. But asking for a feature like this is reasonable. SVGO provides a fairly easy way to manipulate svg code. it just seems very natural to do this kind of stuff with SVGO. \nI ended up with writing a node script to process all the svg files using svgo. the tricky part is, every time it process a file, it will use a new SVGO instance and use a config with unique prefix.  something look like this: \n```javascript\n  let filePath = path.join(folderPath, file)\n  let prefix = generatePrefix(file)\n  let svgo = new SVGO({\n    plugins: [{cleanupIDs: {\n      prefix: prefix\n    }}]\n  })\nsvgo.optimize(fs.readFileSync(filePath, 'utf8'), svg => {\n    result = svg.data\n  })\n```\nthe generatePrefix function will generate a string use file's name.\nafter running this script every svg file would have unique IDs based on it's file name.\nit's not a perfect solution but for now it's the best way to do it. maybe later I'll write a webpack loader or send a PR to react-svg-loader. \nhope it helps.. ",
    "10xjs": "I've found a solution for anyone is using webpack and svgo-loader or react-svg-loader that will pass a unique deterministic ID prefix to svgo for each file. This should generate the same IDs across different build environments.\n```js\n// webpack.config.js\nconst hash = require('string-hash');\nconst {relative} = require('path');\nconst context = __dirname;\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /.svg$/,\n        use: ({resource}) => ({\n          loader: 'svgo-loader',\n          options: {\n            plugins: [\n              {cleanupIDs: {\n                prefix: svg${hash(relative(context, resource))},\n              }},\n            ],\n          },\n        }),\n      },\n    ],\n  },\n};\n```. ",
    "ming-codes": "I found a workaround to this problem.\n```js\n{\n  cleanupIDs: {\n    prefix: {\n      toString() {\n        this.counter = this.counter || 0;\n    return `id-${this.counter++}`;\n  }\n}\n\n}\n}\n```\nJavaScript objects invokes toString when converting from object to string for concatenation. The function can be used to generate unique ids.. ",
    "tristanisme": "Hi @GreLI . It's sad to see the abuse you got on this issue \ud83d\ude1e \n\nEditing a bunch of files has nothing with optimization, so it lays out of SVGO's scope.\n\nWouldn't it be within SVGO's scope to not break things while optimising?. ",
    "CH-RhyMoore": "I agree, this shouldn't require workarounds from every consumer and client utilizing SVGO. \nOut of the box, SVGO's CLI is able to optimize multiple files at once, but the files are effectively broken when they come out due to colliding ids.\nIf nothing else, it'd cut down on the duplicate issues about it. \ud83d\ude09 . @strarsis Given that the order of plugins in the configuration matters, but that there is no explicit documentation of the correct order, I have been patterning my order off of files in the repo, like this:\nhttps://github.com/svg/svgo/blob/master/.svgo.yml#L30-L32\nPerhaps the order in the README is preferable? If so, where should prefixIds be in that list? I'm configuring all the plugins at once, as you can see, so any recommendation given to me would be generically useful, not unique to me. I am not keen on moving it down one by one until I find the \"right\" place.. @strarsis To test, I moved it down to the bottom and while the defs are not removed, the IDs still don't match.\nhtml\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" pointer-events=\"none\">\n  <defs>\n    <path id=\"svg400__a\" d=\"M10.5 16.584L4.32 20l1.18-7.236-5-5.125 6.91-1.055L10.5 0l3.09 6.584 6.91 1.055-5 5.125L16.68 20z\"/>\n  </defs>\n  <g fill=\"currentColor\" fill-rule=\"evenodd\" transform=\"translate(1.5 2)\">\n    <use fill-rule=\"nonzero\" xlink:href=\"#svg402__a\"/>\n    <path d=\"M-1.5-2h24v24h-24z\"/>\n  </g>\n</svg>\nThis results in the following visual:\n\nI observed that the prefixIds prefix function runs per element, which to me seems like it would of course generate a different prefix for IDs that are supposed to match on different elements within a file.\n\nNote for posterity: The ID issues alone would actually result in this example SVG appearing blank. The black box would still occlude the expected shape even with the ID issue fixed--it comes from the original export and has to be fixed in Sketch. I was having two issues at the same time when I posted.. There's another glitch in the original export that is coming from a technique used in Sketch, so while I still have visually broken SVGs, it's no longer due to the ID issues.\n\nI didn't really need to move prefixIds. I just needed the prefix to match throughout a file. However, the prefix function gets called once for every element in a file and I needed a way to return the same prefix for every element in a file while being unique across different files.\nUnfortunately, what's passed to the prefix function by default is information about the current element; there's no other context available. But there's an optional second argument info to svg.optimize. Whatever you pass in as info is also passed as the second argument of the prefix function. So I passed the file path, then hashed it to get something: \n\nShort,\nWith characters valid for IDs (I have looong filenames with spaces, parentheses, and periods--and note because the hash yields a number, I had to prefix my prefix--IDs can't start with numbers),\nThe same within a file, \nAnd different in different files.\n\njavascript\nfunction optimize ({ contents, path }) {\n  return svgo.optimize(contents, path);\n}\njavascript\nconst hash = require('string-hash');\n...\nprefixIds: {\n  prefix: function (element, filepath) {\n    return `svg${hash(filepath)}`;\n  }\n}\nhtml\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" pointer-events=\"none\">\n  <defs>\n    <path id=\"svg461883165__a\" d=\"M10.5 16.584L4.32 20l1.18-7.236-5-5.125 6.91-1.055L10.5 0l3.09 6.584 6.91 1.055-5 5.125L16.68 20z\"/>\n  </defs>\n  <g fill=\"currentColor\" fill-rule=\"evenodd\" transform=\"translate(1.5 2)\">\n    <use fill-rule=\"nonzero\" xlink:href=\"#svg461883165__a\"/>\n    <path d=\"M-1.5-2h24v24h-24z\"/>\n  </g>\n</svg>\nThis keeps the references between use and thepath intact, so the used defs don't get removed, even if prefixIds is in the original order.. @strarsis I think so, yes. If it's possible. The reason I think it'd be a good idea is that, from the issues, I got the impression one of the use cases you wrote it for is being able to get unique IDs that don't collide between files. But the first few obvious choices for using it (some of which in my case were inspired by tests/issues discussion/the PR) can lead a user in the wrong direction. For that use case, a user doesn't want to make IDs that are supposed to be the same in the same file different from each other, but it's not immediately obvious that that needs extra attention when you are customizing it. Once you follow all the bread crumbs, it's not hard code to write, but it did take a while to find some of the crumbs. \nI assume that challenge of correlating IDs between elements comes from how the plugins run in general, not from this specific plugin.. @strarsis One specific idea that could help is passing the default prefix in. You derive that from the filename, so whether someone wants to customize on top of the filename, do something like I did, or needs to do something really unusual, it'll provide the context essential to keeping references intact.. Got this far:\njs\n{\n  full: true,\n  multipass: true,\n  precision: 6,\n  plugins: [\n    { cleanupNumericValues: { leadingZero: false } },\n    { cleanupListOfValues: { leadingZero: false } },\n    { convertPathData: { leadingZero: false } },\n    { convertTransform: { leadingZero: false } },\n    { mergePaths: { leadingZero: false } }\n  ]\n}\nCan't tell if there's a way to turn it off generally.. ",
    "mattkime": "I was curious if anyone can provide an example of an id conflict. I'm very interested in using SVGO but want to make sure that I'm not wading into problems.. ",
    "o-alexandrov": "If anyone happens to wonder how to fix broken IDs, go to the following comment:\nhttps://github.com/svg/svgo/issues/913#issuecomment-373416266. @himedlooff \nThank you, could you please paste the codepen demo where you checked it?. @GreLI @himedlooff \nThank you for the attention.\nThe issue was with unique IDs and related to:\n- https://github.com/svg/svgo/issues/674\nThe following discussion helped to resolve it:\n- https://github.com/svg/svgo/issues/913#issuecomment-373416266. ",
    "chrisfinch": "Anyone who encounters this whilst using react-svg-loader can find my working fix here: https://github.com/boopathi/react-svg-loader/issues/218#issuecomment-402684870. ",
    "SilverFox70": "If anyone is using svg-react-loader, I have created a fix here: https://github.com/SilverFox70/svg-react-loader and it is simple as adding a uniqueIdPrefix: true.. If anyone is looking to generate unique ID while using svg-react-loader, I have a fix here : https://github.com/SilverFox70/svg-react-loader\n. ",
    "magicspon": "if anyone is still looking for a solution...\nthis works in gulp:\n.pipe(\n    svgmin(file => {\n        const prefix = path.basename(file.relative, path.extname(file.relative))\n        return {\n            plugins: [\n                {\n                    prefixIds: {\n                        prefix\n                    }\n                },\n                {\n                    cleanupIDs: {\n                        prefix: `${prefix}-`,\n                        minify: true\n                    }\n                }\n            ]\n        }\n    })\n). ",
    "elderapo": "I wrote a small library replaces id and id references inside SVG elements and manages them.\n```typescript\nimport * as React from 'react'\nimport { SVGUniqueID } from 'react-svg-unique-id'\nexport const SVG1 = () => (\n  \n\n\n // prefix__bga => SVGID0__0\n\n\n // #prefix_bga => #_SVG_ID__0__0\n // url(#prefix_bga) => \"url(#_SVG_ID__0__0___)\n      \n\n\n)\nexport const SVG2 = () => (\n  \n\n\n // prefix__bga => SVGID1__0\n\n\n // #prefix_bga => #_SVG_ID__1__0\n // url(#prefix_bga) => url(#_SVG_ID__1__0___)\n      \n\n\n)\n```. ",
    "joebanks10": "The workarounds don't appear to fix the problem of importing the same SVG file multiple times (e.g. a logo that appears in the header and footer). Any ideas on how to workaround that issue?. ",
    "tomsturge": "After some investigation I've found out the way to use multiple plugins\nsvgo -f INPUT -o OUTPUT -p 1 --enable=removeTitle --enable=removeDesc --enable=removeDimensions\nNot the best way to do it and not well documented... Failing silently isn't helpful either. ",
    "jmwebservices": "This came up in Google while searching how to set multiple plugins via a single option. I am on Windows so curly brackets expansion didn't work for me. I have PR for this feature.. I do not believe curly brace expansion works in Windows. It would be great if the --disable option could simply accept a comma list of plugins.. My PR https://github.com/svg/svgo/pull/1019. @DeeDeeG Great recommendations. Feel free to fork my repo and make a PR to the main repo with your changes. SVGO's repo owner has made no attempt to consider my PR (and others) so I do not plan on investing more time. For my projects, I am using my fork.. ",
    "ianchadwick": "@lahmatiy thanks for the extra info.\nNeithier of those exceptions are true for the SVG i'm attempting to minify. \nHere's what I've tried:\nsvgo 1.svg 1.min.svg --pretty --enable=minifyStyles --config '{\"plugins\":[{\"minifyStyles\":{\"usage\":{\"force\":true}}}]}'\nHere are the before and after shots.\nBefore: Fat file\nAfter: Minified(ish)\nThe SVG only needs 9/10 of the first classes the rest are not used.\n@GreLI If by performance you mean speed of conversion this is a complete non issue for me. I'd much rather spend 1 minute making a file 90% smaller than extra ms & bandwidth on every single request :)\nThanks!. @lahmatiy npm... just tried from master and it's working as expected. Thank you!!!. ",
    "envision": "I have this problem as well when trying to optimize an SVG that has the world map in vector format, and only part of it is shown by masking... Any solutions for optimizing such SVG with Sketch or Illustrator (or other but those I mainly use)?\nUpdate: Used this solutions before using this svg optimizer...got 1.6mb down to 770kt =\u00a7. ",
    "luongvo": "Any update on this?. ",
    "swese44": "@peternowell your web tool is awesome but i'm looking for CLI functionality. any chance you'll be open-sourcing it, or submitting a PR to svgo?. ",
    "renschler": "@peternowell i tried your tool and it wasn't able to find/replace the <use> elements correctly.\nYou can use the simple example code here to reproduce the behavior I saw: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use\nI do think that the functionality that was described here would be nice addition to the svgo library, and I'd be interested in understanding the concerns @GreLI had (basically same q's that peter had at end of his post above).. ",
    "nym": "@caub Totally width/height are not typically necessary. In my case, it allowed for just updating assets instead of deploying a new version of the app I'm working on.  Had I not been time / deployment constrained, I would have used removeDimensions and set the dimensions in CSS ;-). ",
    "pklingem": "@GreLI any chance you could cut a release for us now that this has been merged? . thanks for the quick response, we'll lock to the sha for the time being.. npm install --save svg/svgo\nsvgo --enable=removeScriptElement -i file -o -. @GreLI updated, not sure if that's an acceptable solution, but a conversation starter at least.. ",
    "auralon": "Any ideas when this will get pushed in a release to npm?. OK, thanks for the super quick response!  This functionality would be very useful.  It also seems to work OK, from my initial tests.  \nAlthough, at present I am manually setting the exports.active = false to exports.active = true in the plugin file.  This is the first time I've used svgo... how might I otherwise set a plugin to active?. Thanks, @pklingem :)  ...  the version that I'm getting through npm doesn't have the plugin.  I've manually downloaded the plugin and I can get it to work in a node script, but only by manually setting the exports.active to true.\nThat cli command you've given me is useful, but if possible, I'd like to know how it to do the same within a node app.. ",
    "BrRenat": "\"scripts\": {\n    \"imgmin\": \"svgo -f mySvgFolder\",\n}\nOk, if my syntax wrong. How i should add svgo task to lint-staged?\nI wrote that the error appears only if more than one svg file has been uncommitted. With one svg file everything works.. I note that if one file is changed, everything is ok. I think we have error because if more than one file they detected like svgo options and we have Unknown argument.. ",
    "averyvery": "Excited about this change, does it seem like it'll be in a release soon?. ",
    "ranuss": "When will this be released?. ",
    "iafiawik": "Agree. This would be a much appreciated feature. \ud83d\ude42 . ",
    "keithws": "Is this dead? Will this ever be released?. ",
    "dmitrika": "Was also surprized, that I cannot combine svgo and lint-staged.\n@GreLI Great, that you wanna change it, maybe you can give a hint, where to start, that I could help.. ",
    "superfunkminister": "+1\n. ",
    "ApacheEx": "yay, it works well: \ud83e\udd47 \njson\n\"public/**/*.svg\": [\n  \"svgo\",\n  \"git add\"\n],. ",
    "arendvw": "On linux process.stdin.isTTY is also undefined when it's piped. \nTo check if stdin.isTTY is true seems to solve it here.\nprocess.stdin.isTTY === true \nSeems to be a better solution.\n. ",
    "mmieluch": "Hi @binarykitchen, I had the same issue and, as it turns out, yarn was cleaning that file out.  I didn't install the package directly, but one of my dependencies vue-svgicon relied on svgo. Here's how I got rid of the problem:\n\nRemoved two lines from my .yarnclean in the project root:\n.*.yml\n*.yml\nyarn remove vue-svgicon\nyarn add vue-svgicon\n\nI believe if you did the above, but with svgo instead of vue-svgicon, you'd have the problem fixed. Good luck!. First of all - it's not my repo. I'm just a user trying to help out a fellow dev ;)\nSecond of all - .yarnclean is set per project. So it's not set by the package. That's why I mentioned  project root, not package root. \nYou may find this helpful: https://yarnpkg.com/lang/en/docs/cli/clean/\nThis problem has nothing to do with the svgo package - it's your local yarn config that's causing this.. ",
    "binarykitchen": "hmm, but why am i not seeing the .yarnclean file in your repo? an\n... and are you expecting everyone doing these steps when using yarn instead of npm?. aaaaah, gotcha, i see now. thanks for the link and explaining :). ",
    "rishabhmhjn": "Refer:\nhttps://github.com/svg/svgo/issues/622#issuecomment-261064895\nhttps://github.com/svg/svgo/issues/622#issuecomment-304215694. ",
    "mikestreety": "Ah appologies @GreLI - I just took the existing variable and dropped it in.\nSuggestions on param name?. Yeah, that would be great. Unfortunately that's beyond me :( I could correct the camel case then raise an issue for this to be an \"upgrade\"?. Ok thanks. \nTo add a bit of context, Figma drops figma:type=\"canvas\" and xmlns:figma=\"http://www.figma.com/figma/ns\" attributes all over the SVG with invalidates it for anything but figma!. ",
    "JohaWeber": "Thx, for the info - tried this on windows with powershell:\nsvgo -f  \\\\network\\path\\to\\icon\\folder --pretty --config='{ \"js2svg\": { \"indent\": \"\\t\" } }'\nand get the error:\nError: Couldn't parse config JSON.\nSyntaxError: Unexpected token j in JSON at position 2\nAlthough without the --config flag an with a --indent=2 (e.g.) it works.\n. ",
    "Crissov": "If file size optimization is the primary goal of this project, either indent:1 or indent:'\\t' should be the default.. Could you please elaborate?. Perhaps, but from the comment I don't get whether this change would be wanted at all, i.e. whether it would be worth my time doing another PR.. Optimization is about readability, so I think it's in scope.\nAnyway, why are you closing the issue \u2013 if I wrote a PR would you decline it?. Making an SVG easier to edit is an aspect of optimization, which is not the same as minification.. Please at least keep \na) removing unused IDs and \nb) renaming used IDs \nseparate then.. I'm talking bout the first level below <svg>.. Possibly, thanks. I'm currently busy with other stuff, though.. ",
    "kyleknighted": "@GreLI Any chance this could be reviewed? Would love to be able to use this feature!. ",
    "funklos": "@GreLI merge and release would be so great! We're struggling heavily with the deployment of a huge svg library and that's exactly what we need! \nResolving conflicting id's manually is really a pain... @strarsis sure, thanks for the suggestion.. we'll do this to perform some tests. \nBut I really can't reconfigure multiple CI systems and change multiple package.json to enable this for all our projects and revert all the changes once this branch is merged. Especially since I'm the one enforcing the usage of only stable packages.. ;). Jeah we also found this option but we also noticed that illustrator export is not suitable in every case.\nIn cooperation with our graphics department we decided to use sketch for SVG exports, since sketch is gaining more and more traction for reponsive screen design this was the logical consequence. \nSo the combination of sketch with svgo for batch optimization on deployment is our way in the future... ",
    "vzaidman": "guys, why doesnt the plugin enabled when i pass\nplugins: [\n    {convertPathData: false},\n    {prefixIds: true}\n  ]\nin github:strarsis/svgo#prefixIds obviously. looks like the plugin should be added to svgo\\.svgo.yml. opened a PR on you that allows passing of prefix as function\n{prefixIds: { prefix: function(){\n  return uuid()\n}}}\nhttps://github.com/strarsis/svgo/pull/2. sorry i confused the svg sprites webpack plugin with this one.\nits confusing to work on a library inside a library inside a library.\ni guess the function prefix is still useful.. rebased my fix on master.\nwhat do you think, people?. Why don't i see it in thew latest version?\ncan you please publish it?. A first good step is proposed in my PR #907 and it lets you use it like this:\n```\nplugins: [\n          {convertPathData: false},\n          {prefixIds: {\n            prefix: node => {\n              const elementName = node && node.elem\n              if(!elementName || elementName === 'svg' || elementName === 'use'){\n                return false\n              }\n          return 'some-prefix'\n        }\n      }}\n    ]\n\n```\nor like this\nplugins: [\n          {convertPathData: false},\n          {prefixIds: {prefix: false}}\n        ]\n. for now it works like what you wrote isn't it?\n. maybe we should add a plugin by the name \"transformId\" instead of \"prefixId\" (deprecate it) and let the user transform the Id to whatever he likes:\nplugins: [\n          {convertPathData: false},\n          {transformIds: (id, element, extra) => {\n             const filename = path.basename(extra.path)\n             const hash = `#${uuid()}`\n             return `something_${Number(id) + 2}_${filename}_${hash}`\n          }\n        ]. opened a PR that fixes it:\nhttps://github.com/svg/svgo/pull/950. ok i fixed the whole thing and added a complex test about it. when will this be published?. if so, id also add a warning about this in the readme. ",
    "chenxiaochun": "Very good!. @iology, I also don't know in the command line. But you can place a .svgo.yml in your project. For example, i use it like this:\n```\nreplace default config\nmultipass: true\nfull: true\nplugins:\n# - name\n  #\n  # or:\n  # - name: false\n  # - name: true\n  #\n  # or:\n  # - name:\n  #     param1: 1\n  #     param2: 2\n  - removeViewBox: false\n  - removeDimensions: true\n  - removeStyleElement: true\n  - mergePaths: true\n  - removeUselessDefs: true\n  - collapseGroups: true\n  - prefixIds: true\nconfigure the indent (default 4 spaces) used by --pretty here:\n\n@see https://github.com/svg/svgo/blob/master/lib/svgo/js2svg.js#L6 for more config options\n\njs2svg:\npretty: true\nindent: '  '\n```. Multiple times? Wouldn't it be better if it was separated by a comma?\ud83d\ude01. ",
    "TongDaDa": "I want to cancel the class prefix in the svg file, What should I do?. ",
    "gustavnikolaj": "@GreLI Sorry, I don't understand if you refer to something going wrong in svgo or in my original svg :smile: . @GreLI ping :-) Do you need anything for me, or is this a bug in svgo which you have all the information necessary to dig into?. ",
    "geekbleek": "I have a number of use cases for converting circles and ellipses - ultimately because I'm not trying to optimize file size - I'm trying to optimize compatibility of all my SVG files.  If I can help with this PR please let me know!. ",
    "iology": "How to enable multiple plugins?. I want this feature. These duplicates are usually generated by copy&paste in the SVG editor.. ",
    "JoshyPHP": "Here's another, more comprehensive example. From what I can tell, the sweep-flag of some arcto commands needs to be flipped, but I don't know what are the conditions for that.\nOriginal\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 36 36\"><path d=\"M32 4a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v28a4 4 0 0 0 4 4h20a4 4 0 0 0 4-4V4z\" fill=\"#e6e7e8\" transform=\"matrix(1 0 0 -1 0 36)\"/><path d=\"M19.003 23.578v-6.163c.728.087 1.435.18 2.119.265 1.326.178 2.286.286 2.879.332.048.11.103.232.168.363.199.641.463 1.645.798 3.015.264 1.084.393 1.77.393 2.057 0 .353-.338.53-1.024.53-1.041 0-2.696-.122-4.973-.364-.128 0-.253-.013-.36-.035m-7.26-6.69c1.813.085 3.546.195 5.204.327v6.132a55.914 55.914 0 0 1-4.937-.796 5.076 5.076 0 0 0-.862-.232c0-.264.022-.529.067-.793.265-2.012.44-3.56.529-4.638M8.398 24.11c.53 0 .995-.078 1.39-.233.245-.066.454-.143.63-.23.797.043 1.613.121 2.454.23 1.104.134 2.463.298 4.075.498v2.32c0 1.612-.188 2.947-.563 4.01-.155.331-.233.55-.233.661 0 .331.133.497.398.497a6.84 6.84 0 0 0 1.955-.266c.686-.198 1.027-.453 1.027-.76 0-.112-.042-.343-.133-.697-.265-.685-.395-1.955-.395-3.81v-1.723c1.299.132 2.723.276 4.27.43.707.045 1.38.166 2.023.366.463.088.739.132.83.132.264 0 .837-.222 1.72-.662.928-.553 1.393-.985 1.393-1.294 0-.242-.12-.486-.362-.729-.82-.88-1.408-1.809-1.76-2.783l-.797-1.69a2.755 2.755 0 0 0-.425-.76c.042-.022.086-.047.128-.068.507-.31.76-.586.76-.828 0-.199-.182-.31-.56-.332-1.7 0-3.236-.088-4.606-.266l-2.614-.196-.034-4.443c0-2.009-.07-3.62-.198-4.838-.134-1.368-.334-2.34-.598-2.914-.243-.486-.443-.73-.596-.73-.09 0-.232.265-.431.797-.133.617-.2 1.687-.2 3.214v8.75l-1.788-.168c-1.194-.112-2.111-.168-2.75-.168-.266 0-.488.024-.664.07-.044-.2-.11-.377-.197-.534-.133-.287-.277-.43-.433-.43-.197 0-.385.154-.562.465-.287.438-.442.892-.464 1.358L9.69 18.94c-.155 1.35-.332 2.286-.531 2.818-.111.551-.41 1.081-.894 1.59-.177.11-.266.187-.266.231 0 .354.133.531.398.531\" fill=\"#be1931\" transform=\"matrix(1 0 0 -1 0 36)\"/></svg>\nOptimized (which results in bad arcto commands)\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 36 36\"><path d=\"M32 32a4 4 0 0 0-4 4H8a4 4 0 0 0-4-4V4a4 4 0 0 0 4-4h20a4 4 0 0 0 4 4v28z\" fill=\"#e6e7e8\"/><path d=\"M19.003 12.422v6.163c.728-.087 1.435-.18 2.119-.265a57.178 57.178 0 0 1 2.879-.332c.048-.11.103-.232.168-.363.199-.641.463-1.645.798-3.015.264-1.084.393-1.77.393-2.057 0-.353-.338-.53-1.024-.53-1.041 0-2.696.122-4.973.364-.128 0-.253.013-.36.035m-7.26 6.69c1.813-.085 3.546-.195 5.204-.327v-6.132a55.914 55.914 0 0 1-4.937.796 5.076 5.076 0 0 0-.862.232c0 .264.022.529.067.793.265 2.012.44 3.56.529 4.638M8.398 11.89c.53 0 .995.078 1.39.233.245.066.454.143.63.23a32.874 32.874 0 0 0 2.454-.23c1.104-.134 2.463-.298 4.075-.498v-2.32c0-1.612-.188-2.947-.563-4.01-.155-.331-.233-.55-.233-.661 0-.331.133-.497.398-.497a6.84 6.84 0 0 0 1.955.266c.686.198 1.027.453 1.027.76 0 .112-.042.343-.133.697-.265.685-.395 1.955-.395 3.81v1.723c1.299-.132 2.723-.276 4.27-.43a8.624 8.624 0 0 0 2.023-.366c.463-.088.739-.132.83-.132.264 0 .837.222 1.72.662.928.553 1.393.985 1.393 1.294 0 .242-.12.486-.362.729-.82.88-1.408 1.809-1.76 2.783l-.797 1.69a2.755 2.755 0 0 0-.425.76c.042.022.086.047.128.068.507.31.76.586.76.828 0 .199-.182.31-.56.332-1.7 0-3.236.088-4.606.266l-2.614.196-.034 4.443c0 2.009-.07 3.62-.198 4.838-.134 1.368-.334 2.34-.598 2.914-.243.486-.443.73-.596.73-.09 0-.232-.265-.431-.797-.133-.617-.2-1.687-.2-3.214v-8.75l-1.788.168c-1.194.112-2.111.168-2.75.168-.266 0-.488-.024-.664-.07-.044.2-.11.377-.197.534-.133.287-.277.43-.433.43-.197 0-.385-.154-.562-.465-.287-.438-.442-.892-.464-1.358L9.69 17.06c-.155-1.35-.332-2.286-.531-2.818-.111-.551-.41-1.081-.894-1.59-.177-.11-.266-.187-.266-.231 0-.354.133-.531.398-.531\" fill=\"#be1931\"/></svg>\nOptimized then manually fixed\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 36 36\"><path d=\"M32 32a4 4 0 0 1-4 4H8a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h20a4 4 0 0 1 4 4v28z\" fill=\"#e6e7e8\"/><path d=\"M19.003 12.422v6.163c.728-.087 1.435-.18 2.119-.265a57.178 57.178 0 0 1 2.879-.332c.048-.11.103-.232.168-.363.199-.641.463-1.645.798-3.015.264-1.084.393-1.77.393-2.057 0-.353-.338-.53-1.024-.53-1.041 0-2.696.122-4.973.364-.128 0-.253.013-.36.035m-7.26 6.69c1.813-.085 3.546-.195 5.204-.327v-6.132a55.914 55.914 0 0 0-4.937.796 5.076 5.076 0 0 1-.862.232c0 .264.022.529.067.793.265 2.012.44 3.56.529 4.638M8.398 11.89c.53 0 .995.078 1.39.233.245.066.454.143.63.23a32.874 32.874 0 0 0 2.454-.23c1.104-.134 2.463-.298 4.075-.498v-2.32c0-1.612-.188-2.947-.563-4.01-.155-.331-.233-.55-.233-.661 0-.331.133-.497.398-.497a6.84 6.84 0 0 1 1.955.266c.686.198 1.027.453 1.027.76 0 .112-.042.343-.133.697-.265.685-.395 1.955-.395 3.81v1.723c1.299-.132 2.723-.276 4.27-.43a8.624 8.624 0 0 0 2.023-.366c.463-.088.739-.132.83-.132.264 0 .837.222 1.72.662.928.553 1.393.985 1.393 1.294 0 .242-.12.486-.362.729-.82.88-1.408 1.809-1.76 2.783l-.797 1.69a2.755 2.755 0 0 1-.425.76c.042.022.086.047.128.068.507.31.76.586.76.828 0 .199-.182.31-.56.332-1.7 0-3.236.088-4.606.266l-2.614.196-.034 4.443c0 2.009-.07 3.62-.198 4.838-.134 1.368-.334 2.34-.598 2.914-.243.486-.443.73-.596.73-.09 0-.232-.265-.431-.797-.133-.617-.2-1.687-.2-3.214v-8.75l-1.788.168c-1.194.112-2.111.168-2.75.168-.266 0-.488-.024-.664-.07-.044.2-.11.377-.197.534-.133.287-.277.43-.433.43-.197 0-.385-.154-.562-.465-.287-.438-.442-.892-.464-1.358L9.69 17.06c-.155-1.35-.332-2.286-.531-2.818-.111-.551-.41-1.081-.894-1.59-.177-.11-.266-.187-.266-.231 0-.354.133-.531.398-.531\" fill=\"#be1931\"/></svg>. Looking at the example above, it appears that the original SVG contains 7 arcto commands and the optimized SVG contains 10 arcto commands. I assume that the extra arcto commands were created by another plugin; Those 3 are fine. On the other hand, all of the 7 arcto commands that were transformed need their sweep-flag to be flipped, from 0 to 1 or vice-versa. I presume that's because the transform matrix 1 0 0 -1 0 36 flips coordinates and therefore the sweep-flag should be flipped as well.. The geelongadvertiser-original.svg file gets minified correctly on my local svgo 0.7.2 running on Node.js v8.1.2.. If the issue is reproducible with imagemin but not reproducible with svgo then you should ask the imagemin maintainers to give it a second look.. For future reference, this was most likely a naming collision, e.g. another element using id=\"RSSa\".. You should post a link to the original SVG file and maybe the optimized file too.. Another example. From what I can tell, when two consecutive curves are merged into an arc, some math is off and results in huge values for the arc's rx and ry values.\ngood.svg\n```svg\n<path d=\"M50.51 54.44a230.515 230.515 0 0 0 9.1.25c1.52.01 3.04 0 4.56-.02 1.52-.02 3.04-.06 4.56-.12a231.853 231.853 0 0 0 9.13-.53l-.18 4.92c-.06 1.64-.13 3.28-.19 4.92s-.13 3.28-.2 4.93l-.21 4.93c-.84.07-1.68.14-2.53.2-.84.06-1.68.12-2.53.17.03-1.33.05-2.65.08-3.98s.05-2.65.07-3.98c.02-1.33.04-2.65.07-3.98l.06-3.98c-1.33.07-2.65.13-3.98.18-1.33.05-2.65.08-3.98.1-1.32.02-2.65.03-3.97.03-1.32 0-2.65-.02-3.97-.05l.21 3.99.21 3.99\nc.07 1.33.14 2.66.21 3.99.07 1.33.14 2.66.21 3.99\nc-.87-.02-1.73-.05-2.6-.08-.87-.03-1.73-.07-2.6-.12-.13-1.65-.25-3.29-.38-4.94s-.25-3.29-.38-4.94c-.13-1.65-.25-3.29-.38-4.94-.14-1.64-.26-3.29-.39-4.93z\" fill=\"#3e2723\"/>\n```\nbad.svg\n```svg\n<path d=\"M50.51 54.44a230.515 230.515 0 0 0 9.1.25c1.52.01 3.04 0 4.56-.02 1.52-.02 3.04-.06 4.56-.12a231.853 231.853 0 0 0 9.13-.53l-.18 4.92c-.06 1.64-.13 3.28-.19 4.92s-.13 3.28-.2 4.93l-.21 4.93c-.84.07-1.68.14-2.53.2-.84.06-1.68.12-2.53.17.03-1.33.05-2.65.08-3.98s.05-2.65.07-3.98c.02-1.33.04-2.65.07-3.98l.06-3.98c-1.33.07-2.65.13-3.98.18-1.33.05-2.65.08-3.98.1-1.32.02-2.65.03-3.97.03-1.32 0-2.65-.02-3.97-.05l.21 3.99.21 3.99\na8976985758690628 8976985758690628 0 0 1 .42 7.98\nc-.87-.02-1.73-.05-2.6-.08-.87-.03-1.73-.07-2.6-.12-.13-1.65-.25-3.29-.38-4.94s-.25-3.29-.38-4.94c-.13-1.65-.25-3.29-.38-4.94-.14-1.64-.26-3.29-.39-4.93z\" fill=\"#3e2723\"/>\n``. After some tinkering, I found thatfindCircle([0.07, 1.33, 0.14, 2.66, 0.21, 3.99])returns{ center: [ -8964578032292488, 471819896436447.6 ], radius: 8976985758690628 }`\nThat seems to be the issue with that transformation. Could it be that the original curve is so close to a straight line that the arc's radius approaches infinity? It would mean that unlike what I originally posited, the math is correct; It's drawing a small arc from a gigantic circle to approach the curve of a straight line. Browsers render it differently though, so a possible fix would be to disable this optimization if the radius exceeds a certain order of magnitude, such as 1e10.. @GreLI Would it be possible to use intersects() from _path.js using a simple rectangular path to represent the viewbox, to determine whether a given path intersects with the viewbox and therefore is visible?\nIn other words: create a reference path for the viewbox, iterate through the SVG's items and if the item intersects we know it's visible but if it doesn't intersect then we can remove it.. I have tested this plugin on various SVGs and while it works well enough for most, there's a number of edge cases that are difficult to handle. For instance, items whose geometry is modified by a transformation matrix. To remain on the safe side, paths with a transform attribute are never removed.\nOverall I think the plugin is useful enough to be included into SVGO, disabled by default.. ",
    "madysondesigns": "Yes, that's what I assume is happening. \nMy question was is there a release schedule or a way to request a new release? . I can and am currently, but I would rather lock to an official version to keep any unanticipated future changes from breaking my current workflow. . ",
    "hellopovi": "I forgot to remove the classes from the output. Fixing that.. ",
    "epavletic": "@GreLI Do you know if this feature will be available in a release anytime soon?. @tomanistor That's because @dabutvin's PR to add back the functionality has not been merged yet and thus, is not available in a release.. ",
    "dartess": "help pls\nsvgo -f local/assets/images/svg --recursive --disable=removeViewBox --multipass \nUnknown option: --recursive\nsvgo 1.0.0, what am I doing wrong?. and yet incorrect svg\ninput https://pastebin.com/raw/UKkP1m4H\noutput https://pastebin.com/raw/xJHVFZJN. ",
    "dabutvin": "@GreLI  i opened https://github.com/svg/svgo/pull/861 to add the recursive flag back :). Hi @XhmikosR \nI added jshint to devDependencies because it is required to run npm run jshint\nis this something that you would like to see installed globally instead of project specific?. good point - I rolled back this update here and added to a new pr https://github.com/svg/svgo/pull/1008. ",
    "tomanistor": "Getting Unknown option: --recursive and Unknown option: -r on version 1.0.3. @epavletic Ah I see now - didn't catch that it was still an open PR. Hopefully it's added back in soon.. ",
    "bcardarella": "\nThere could be also some bugs, despite I'm trying to eliminate them. If you find some, please submit an issue.\n\nHappy to! How should we submit these bugs? Are you interested in getting the actual SVGs?. ",
    "greybax": "So how is it works in current version?. ",
    "g0t4": "Also, the callback API is non-standard, both errors and results are passed back in the first argument:\nif (this.config.error) return callback(this.config);\nand later on \ncallback(svgjs); \n. ",
    "alex3165": "Hum, maybe the less disruptive approach would be to have something like this:\nconst svgo = new SVGO({\n    definePlugins: [\n        renameAttrsToCamelCase: {\n          type: \"perItem\",\n          active: true,\n          description: 'Convert attributes names to camelCase',\n          params: {},\n          fn: (item, params) => {\n            // Blabla my logic here \n          }\n        }\n    ],\n    usePlugins: [\n        'removeComments',\n        'removeMetadata'\n    ]\n});\nI can work on a PR if you are happy with that.. ",
    "Enchiridion": "@GreLI I was able to get an external plugin to work using your example as a start, it's just missing the type property.  I needed a custom plugin to remove the ID attr from the svg element. Here's my working config with custom and built-in plugins mixed together:\n{\n  plugins : [\n    {\n      removeSvgId : {\n        type        : 'perItem',\n        name        : 'removeSvgId',\n        description : 'Removes the ID attr from the <svg> element',\n        fn          : function(item) {\n          if (item.isElem('svg')) {\n            item.removeAttr('id');\n          }\n        }\n      }\n    },\n    {sortAttrs   : true},\n    {removeTitle : false},\n  ],\n}\n\nI don't think any other plugin loading system is needed, this way works perfectly, it just needs to be documented.. ",
    "posixpascal": "I had problems with svgo as well, downgraded to 0.6.1 \u2013 still not working.\nI'm now on svgo 0.5.1 and it works. \nLatest version didnt even recognize --enable cli options.. ",
    "ameesme": "@strarsis Seems like a weird syntax. Is this a standard?. ",
    "Volker-E": "There is a comprehensive answer on this on StackOverflow.\nIn short repeated, due to many issues related to it, Doctype Declarations (DTDs) will not be part of SVG 2 and as user agents don't need or misinterpret them don't include DTDs:\n\nPer 1.3. SVG namespace and DTD of the Scalable Vector Graphics (SVG) 2 W3C Working Draft 09 July 2015:\n\nA DTD is not provided in this specification, as the use of DTDs for validating documents is known to be problematic. In particular, DTDs do not handle namespaces gracefully and the range of constraints they can express is limited. It is recommended that authors do not include a DOCTYPE declaration in SVG documents.\n. @GreLI There doesn't seem to be a definite answer if there are editors/browsers not rendering SVGs due to a missing XML declaration?! \nI vaguely remember that I've run into issues around it (maybe sev years ago?). Therefore I've tested with BrowserStack through all kinds of browsers/OS combinations going back to IE 9 on Win7, Opera 12.16, Firefox 3.6, Samsung with Android 2.3 with both \u2013 a standalone SVG without XML declaration and a HTML page loading the same SVG as CSS background-image. And although the last two had issues, the issues didn't seem connected to the test scenario and it seemed generally fine not to include the XML declaration.\nIn my work resulting in this thread I was following this StackOverflow answer together with my described past experience. If I'm wrong with the necessity of including the declaration we might shove a huge number of unnecessary data down the line.\n\n\nAlthough XML 1.0 states it's optional, it would be good to have a consensus what issues might arise from leaving it out.. Citing @Krinkle at https://phabricator.wikimedia.org/T178867#3801679\n\nThe main concern I'd have is MIME-type checking (e.g. https://github.com/svg/svgo/issues/306).\nMany MIME-type tools wrongly interpret files starting with <svg as something different.\nWith <?xml header: image/svg+xml.\nWithout:\n\nPHP 7.1 mime_content_type on macOS: text/html\nfile command on Linux: text/plain\nfile command on macOS: image/svg (promising!)\n\nI know that within our systems, ResourceLoader (CSSMin) and MediaWiki more generally prefer mime-type guessing based on file name in many cases, but not all cases. So I can't confidently say nothing will break when we remove the header.\n\nSo the XML declaration is useful in those use cases, but it should be able to boil it down to the bare minimum <?xml version=\"1.0\" encoding=\"UTF-8\"?>\u2026. Translation seems to be \u201cHow can I keep custom properties?\u201d. @candidodmv Plugins are all installed by default. Most of them are enabled per default. Updating the overview table in README.md would seem to make sense. Besides @GreLI there doesn't seem to be other maintainers working on svgo currently though.. @szepeviktor Most, but not all plugins are enabled by default. You can find out by looking at the source code of each of the plugins and look for exports.active = true (enabled) or false (disabled). \nA safe list of (default) plugins can be found at https://www.mediawiki.org/wiki/Manual:Coding_conventions/SVG. A useless g (useless as in not carrying any attributes) doesn't provide anything for the visual rendering of the file in this case and can be removed without issue. It might have been inserted by SVG export library under a more generalized ruleset.\nhttps://github.com/svg/svgo/blob/master/plugins/collapseGroups.js is your plugin you want to disable in case you want to leave the g element in.. ",
    "Grsmto": "Not directly related but it seems like fill attr on a <g/> element gets removed by this rule whereas it's heritable (at least on Chrome), so not sure why.. ",
    "drschwabe": "To clarify context, this class/filter workaround is necessary when using including the SVG in an HTML via the img tag ie: \n<img src=\"/img/star.svg\" />\nThe SO topic there touches on Firefox wanting a relative path, hence note the workaround/second example uses a dot prefix before the id anchor character ie: .#a. Thanks for the link. Regardless of if it is a browser bug in the interest of ensuring compatibility with existing browsers I am still interested in an automated (maybe SVGO) solution; currently working on a project that involves many SVGs created from Inkscape that save filters this way and so instead of hand-editing every file to fix for Firefox it would be great to automate the solution.  \nIf I was to use a blunt hammer on it; from the top of my head I would probably reach for something like Cheerio to parse and then rebuild the XML to reflect the workaround as indicated in the second example (removing the filter attribute, changing it to a class and populating said class(es) in the defs). Though I admit to only having briefly looked at how SVGO plugins are supposed to modify SVG structure, probably that methodology is better! . @strarsis Yes, for Firefox.  Chrome is OK either way. . Thanks, I tested it out however the CSS definitions did not fill in with the graphic I tried.    Here's the graphic in question:\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 77.701826 65.509313\" height=\"69.877\" width=\"82.882\">\n    <defs>\n        <filter id=\"a\" color-interpolation-filters=\"sRGB\">\n            <feBlend in2=\"BackgroundImage\" mode=\"lighten\"/>\n        </filter>\n    </defs>\n    <path transform=\"matrix(.94722 0 0 .94722 -6046.588 -1734.377)\" d=\"M6425.129 1837.273c2.362 0 5.727 7.016 10.31 16.252 22.193 3.58 19.472 4.295 19.472 5.512 0 1.217-12.743 14.104-12.743 14.104s2.22 16.108 2.72 18.542c.501 2.435-4.152 2.721-6.586 1.576-2.434-1.146-13.388-6.802-13.388-6.802s-13.674 6.444-15.75 7.59c-2.077 1.145-4.153-1.79-4.081-4.153.04-1.362 2.506-16.467 2.506-16.467s-10.238-10.452-11.885-12.958c-1.476-2.246.573-4.08 2.434-4.582 1.862-.501 16.216-2.72 16.216-2.72 8.913-16.037 8.412-15.894 10.775-15.894z\" fill=\"#ffbd56\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"3.037\" filter=\"url(#a)\"/>\n</svg>. Hi @strarsis, tried your plugin on the example SVG I provided above however that graphic still does not appear in Firefox.  With this file it seems your plugin gets as far as creating <style></style> but there are no classes.     \nYou may test this by copy/pasting the contents of that svg into a new file on your system and opening it directly with Chrome - you should see a star.  In Firefox nothing appears.  \nTo get the file working in Firefox, the file needs to look like this: \n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 77.701826 65.509313\" height=\"69.877\" width=\"82.882\">\n    <defs>\n        <style>\n          .filterA {\n            filter:\"url(.#a)\"; \n          }          \n        </style> \n        <filter id=\"a\" color-interpolation-filters=\"sRGB\">\n            <feBlend in2=\"BackgroundImage\" mode=\"lighten\"/>\n        </filter>\n    </defs>\n    <path transform=\"matrix(.94722 0 0 .94722 -6046.588 -1734.377)\" d=\"M6425.129 1837.273c2.362 0 5.727 7.016 10.31 16.252 22.193 3.58 19.472 4.295 19.472 5.512 0 1.217-12.743 14.104-12.743 14.104s2.22 16.108 2.72 18.542c.501 2.435-4.152 2.721-6.586 1.576-2.434-1.146-13.388-6.802-13.388-6.802s-13.674 6.444-15.75 7.59c-2.077 1.145-4.153-1.79-4.081-4.153.04-1.362 2.506-16.467 2.506-16.467s-10.238-10.452-11.885-12.958c-1.476-2.246.573-4.08 2.434-4.582 1.862-.501 16.216-2.72 16.216-2.72 8.913-16.037 8.412-15.894 10.775-15.894z\" fill=\"#ffbd56\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"3.037\" class=\"filterA\" />\n</svg>\n(again, you may test by saving the contents above into a file and opening with Chrome/Firefox)\nRegarding the SO thread, they talk about this issue however none of the answers provided fix this issue; this daisy chain technique I came up with as an independent solution/iteration on the answers & comments there.     \n. My mistake!   The example star graphic gets updated and now working in Firefox, good stuff!  \nHowever, there is indeed a scenario which results in an empty <style></style> entry.  \nHere is that same star graphic but saved raw from Inkscape (v0.91 r13725 using it's \"plain SVG\" save option).  Something in here seems to break your plugin: \n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.1\"\n   id=\"svg4272\"\n   viewBox=\"0 0 71.781273 68.434828\"\n   height=\"19.313829mm\"\n   width=\"20.25827mm\">\n  <defs\n     id=\"defs4274\">\n    <filter\n       id=\"filter6239-1\"\n       style=\"color-interpolation-filters:sRGB\">\n      <feBlend\n         id=\"feBlend6241-2\"\n         in2=\"BackgroundImage\"\n         mode=\"lighten\" />\n    </filter>\n  </defs>\n  <metadata\n     id=\"metadata4277\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     transform=\"translate(478.74778,-452.4305)\"\n     id=\"layer1\">\n    <path\n       style=\"display:inline;fill:#ffbd56;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:3.03742242;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter6239-1)\"\n       d=\"m -442.83654,458.13345 c 2.3626,0 5.7275,7.0161 10.3095,16.2516 22.1937,3.5796 19.4733,4.2956 19.4733,5.5127 0,1.217 -12.7436,14.1037 -12.7436,14.1037 0,0 2.2193,16.1083 2.7205,18.5425 0.5011,2.4342 -4.1524,2.7205 -6.5865,1.5751 -2.4342,-1.1455 -13.3879,-6.8013 -13.3879,-6.8013 0,0 -13.6742,6.4433 -15.7504,7.5888 -2.0761,1.1455 -4.1524,-1.7898 -4.0807,-4.1525 0.041,-1.3614 2.5057,-16.4662 2.5057,-16.4662 0,0 -10.2378,-10.4525 -11.8845,-12.9583 -1.4758,-2.2458 0.5728,-4.0808 2.4342,-4.5819 1.8615,-0.5012 16.2158,-2.7205 16.2158,-2.7205 8.9133,-16.0368 8.4121,-15.8937 10.7746,-15.8937 z\"\n       id=\"path6625\" />\n  </g>\n</svg> \n. Using that next example SVG I provided above, there are no style declarations created. \nInstalled with npm install -g github:strarsis/svgo#chain-filters. Indeed, the inline filter/style does not work on Firefox; it needs to be daisy chained with a CSS class like how was done on the first example. . ",
    "geolauf": "Thank you @elrumordelaluz, it worked using the command line you provided :) . ",
    "zxqfox": "Please try to reinstall svgo, this should be fixed in COA v1.0.3. Workaround could be dropped now, it's true.\nps.\nLooks like I should clarify what happened with COA and why it wasn't under active development.\nCOA was originally written on CoffeeScript and since nobody want to write code on Coffee there were no activity.\nAbout a month ago we decided to rewrite COA to Node 4+ and ES6 classes because we love how COA was designed, it's API and we have a bunch of ideas to evolute.\nSince we shouldn't change anything in the public API, we decided to publish it under 1.0.2.\nUnfortunately COA has like 70% lines coverage and practically there are a lot of uncovered edge-cases.\nSorry that it affected you in CI like that ;-(\n. ",
    "nashokin": "Thanks. Yes, it's been fixed along the way, can't reproduce it anymore either.. Actually still breaks files. Archive attached.\nsvgo.zip\n. It does minify correctly when I call svgo geelongadvertiser.svg geelongadvertiser.min.svg\nWe use automation using imagemin. I already logged and issue with imagemin and have been referred here as they claim nothing wrong with their code.\nThe code is pretty basic, which runs in a loop:\nimagemin([srcPath + file + '/*.svg'], assetsPath + file, {use: [imageminSvgo({plugins: [{removeViewBox: false}]})]}).then(() => {\n            console.log('Svg images optimized');\n        });\nI've attached our automation file, line 134-180.\nbuild-campaigns.js.zip\nCan you see anything wrong here?\nIt does break and not only for me. Any help will be appreciated. Thanks.\n. https://github.com/imagemin/imagemin-svgo/issues/28. I agree and it(command for svgo) works. Can this be an issue with imagemin itself?\nAnd it(imagemin) does work for most of the svg images that we have.\n. no, it doesn't.\ncan you provide the actual js script file that you ran?\nand which node version are you on?. Try this: \nbetter test.zip\nnpm install\nnpm run compile\nnode v 7.10\nafter goto 'public' folder and BAR-349\nnormally, but not always it works 1st time, but not 2nd or 3rd it, geelong svg is broken\nI'd say it's not happy to run alongside 'ncp'\nand yes, your basic example works; close it as I feel resistance in resolving this\nbut, I'd still blame 'imagemin-svgo' as it works perfectly well with 'imagemin-jpegtran' and 'imagemin-optipng' AND 'imagemin-gifsicle'. Ok, thanks for letting me know, if these are the rules, these are the rules.\nIn my defence I have 3 other modules in the same logic, that work just fine with my code, can easily be the other way around and this is just an upset bold statement.\nMany functions work in isolation, it's when putting them all together gets obvious who is the winner.. ",
    "datenreisender": "There is a description in the #258, which was the PR that introduced it. . ",
    "jbergstroem": "..likely because examples refers to a unreleased version. Also, #750.. I'm not the maintainer, but linking to a file in the \"master\" branch shouldn't encourage you to make the assumption that latest release is on par. With that said I would love to see more regular releases!. @GreLI we all appreciate your work. I think it might be time to put new features on shelf and make sure we avoid breaking for the community that is dependent on things like promises, then keep working on those said features.. ",
    "bmcminn": "Fair enough, though I would expect master to be the current stable release available on NPM. Unreleased features seem like a dev branch workflow to me.. ",
    "bradleyayers": "I believe this can be closed now.. I believe this can be closed now.. ",
    "ydaniv": "Should note that currently colorsNames contain values in short hex format, which currently goes against current API description and docs, which state that it will translate color names to long hex.\nI'd gladly add a commit that fixes all of these to long format if there's no objection.. @Yeti-or yes, took me awhile to figure out the purpose of all the different collections (:\nbut the problem is that if you set the config to:\nshorthex: false\nshortname: false\nYou'll expect all hexes to be in long format, but they won't.\nAnd besides, there are some valid color names from the specs that are missing.. :+1:. @GreLI please share with us what you have, there hasn't been any progress for a very long time.\nYou can commit work in progress to a new branch, so we can view and try to help.\nThis is the meaning of \"open\" in open source (:. \ud83d\udc4d thanks! \ud83d\ude1d . ",
    "amyspark": "It's not svgo, it's a bad interaction between two SVGs. See #674.. ",
    "bilelmoussaoui": "I have tried to use svgo recently, and whenever i run the script again on the same file i have a different output. Here's an example\n```bash\n\u250f \uf17c \ue0b1 \uf07c ~/numix-core \ue0b0 \n\u2517svgo --config=.svgo.yml cantata.svg cantata.svg                \ue0b2 \uf126svgo \uf06a \uf059 \uf113  \nDone in 142 ms!\n2.778 KiB - 40.6% = 1.649 KiB\n\u250f \uf17c \ue0b1 \uf07c ~/numix-core \ue0b0 \n\u2517svgo --config=.svgo.yml cantata.svg cantata.svg                \ue0b2 \uf126svgo \uf06a \uf059 \uf113  \nDone in 228 ms!\n1.649 KiB - 0.1% = 1.647 KiB\n\u250f \uf17c \ue0b1 \uf07c ~/numix-core \ue0b0 \n\u2517svgo --config=.svgo.yml cantata.svg cantata.svg                \ue0b2 \uf126svgo \uf06a \uf059 \uf113  \nDone in 163 ms!\n1.647 KiB - 0% = 1.647 KiB\n```. ",
    "akx": "Upon further investigation \u2013 href, as opposed to xlink:href, is an SVG 2 thing. That means technically svgo is well within its rights to remove href since I declared SVG 1.1.\nHowever many browsers seem to support the xlinkless hrefs anyway.. This would be a \"lossy\" transformation for sure, something that's not enabled by default.\nRe complexity: Good question. Google suggests the Bentley\u2013Ottmann algorithm, which is O((n+k) / log n), but still, the path, which is not necessarily just line segments, would need to be flattened to line segments first. (Or the transformation could just give up on non-line-segment shapes.)\n. ",
    "vrizo": "Hi, @GreLI!\nAny progress on this issue? lint-staged and svgo are a great couple, but it's annoying to commit not more than one SVG file per commit.\nThanks!. Hi, @GreLI! Just noticed that multiple files processing works perfectly now with --. All committed files are compressed automatically. I think we can close the issue. Thanks a lot!. ",
    "asottile": "I took a stab at this in #786, people are reaching for the same things for pre-commit. Apologies if my style is off -- I haven't played the interactive game of javascript programming in a while :)  Definitely open to feedback :). sweet. ",
    "fatfisz": "Is there a checklist somewhere?\nI looked at an example with promises and it turns out the latest release still has callbacks, so I'd be interested in helping with getting the new version shipped.. Yay! Thanks a lot for the release, great work :). ",
    "codysherman": "Any idea of a timeline on when the release is expected? Will it be in 2017? Need dat recursive folder feature HNNNNGGGG. Awesome work by the way!. ",
    "JackNUMBER": "Same here, gulp-svgmin has some issues and we need inlineStyles :). 9f05ac8 has been pushed on March 23 and the npm package is based on releases. The last one is v0.7.2 released on 29 January.. ",
    "keeganstreet": "IE11 may be an outdated browser, but it is a component of the operating system in Windows 7, Windows 8.1, and Windows 10. And so unfortunately, supporting it is a reality for many websites until Microsoft end support of Windows 10 (mainstream end support date 10/13/2020).\nI understand you don't want a plugin specifically for IE11 so I have opened PR #817 which updates the addElementsToSVGElement plugin to support attribute values, as well as attribute names.. Hi @GreLI, thanks for the reply. I would urge you to reconsider, as I think this plugin adds some real value that cannot be achieved with the addAttributesToSVGElement plugin.\nThis plugin retrieves the width and height from the viewBox attribute. Then it adds these values as width and height attributes.\nThis is really valuable, because if an SVG without width and height attributes is embedded into a webpage, it will expand to 100% width of its container. If CSS fails to load due to a network error, the SVG will expand to fill 100% width of the browser window, resulting in a completely illegible page. Many sites, like github.com, css-tricks.com, nytimes.com, use width and height attributes on their SVGs.\nThis is a common problem because when SVGs are saved from Adobe Illustrator, they include a viewBox attribute, but not height or width attributes, so it would be good if SVGO makes it easier for web developers to address this problem.. Yep right you are. I was thinking that svgo removed the height and width attributes but that is not the case. Thats OK then. Thanks!. This also provides a solution for https://github.com/svg/svgo/pull/780. ",
    "dietergeerts": "@GreLI , how can addAttributesToSVGElement be used to transform the title attribute to another attribute of chose? We use the removeTitle plugin now, but we still need some identifier on the svg element, which should be the same as the title was. I can't see any plugin that can do this, and there is almost no docs on how to use the addAttributesToSVGElement plugin. Some extra docs would be helpful.\n. I think that when we update the following line, we could set the value of an attribute based on the current svg: https://github.com/svg/svgo/blob/02e0e416c8145da6770fde2174b977a83daea008/plugins/addAttributesToSVGElement.js#L70\nBy giving the option of OR being a value, OR being a function which will return a value based on the svg. ",
    "douglasmiranda": "This tool (svgo) is the best so far!\nWould be awesome a official binary release.\n\nI saw a reference here too https://github.com/svg/svgo/issues/777#issuecomment-326388634 but no answer, some official member could clarify here if there's interest to release standalone executables.. ",
    "TheYahya": "It's the original file and the optimized version is here.. ",
    "MatthewHerbst": "@GreLI My use case is that I have a bunch of icons as SVGs, and while each icon has meaning (as I note in the title and desc fields, supported by an aria-labelledby=\"titleId  descId\"), the things that compose them do not, so by giving the SVG an role=\"img\", I'm instructing browsers not to traverse the SVG's child elements, and thus to not add them into the accessibility tree, since they on  their own have no semantic meaning. (At least, that's my understanding of what adding the role=\"img\" is doing.)\nConsidering the developer has to explicitly add it, is there any harm in simply allowing it, so long as the value for the role is valid (and not the default option)?. @GreLI but isn't the simple fix to that to just make role known as I suggested in the first post above?. Ok, I can make a PR where keeping it is opt-in rather than opt-out (like keepAriaAttrs is). However, I feel like I still don't understand why you think it should be so optional. If someone specifies it, why should it not be kept by default? It's a valid tag on an SVG element.. ",
    "CITguy": "Similar to #788 . ",
    "Soreine": "Hmm alright... My suggested syntax is missing the ability to disable default plugins.... ",
    "Colir": "hi. doesn't work for me.... Hi.\nI've found the way to do it with the \"removeAttrs\" plugin with this config in my .yml\n- removeAttrs:\n        elemSeparator: '-'\n        attrs: 'data.*'\nThis work well.\nThanks for you. ",
    "SebKay": "Hadn't noticed this was still open. That should solve the issue. Thanks!. ",
    "testerez": "For the icon in my example, just joining all path.d with a space gives me the expected result. But I guess some edge cases can fail with this naive approach? Anyway, thanks for the answer.\nFor reference:\nOriginal\nxml\n<svg id=\"outline\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M6.40625,21.50879c-2.89453,0-5.25-2.084-5.25-4.64648s2.35547-4.64746,5.25-4.64746,5.25,2.085,5.25,4.64746S9.30078,21.50879,6.40625,21.50879Zm0-7.29395c-1.792,0-3.25,1.1875-3.25,2.64746,0,1.459,1.458,2.64648,3.25,2.64648s3.25-1.1875,3.25-2.64648C9.65625,15.40234,8.19824,14.21484,6.40625,14.21484Z\" />\n    <path d=\"M10.65625,17.8623a.99942.99942,0,0,1-1-1V3.49121a1,1,0,0,1,2,0V16.8623A.99942.99942,0,0,1,10.65625,17.8623Z\" />\n    <path d=\"M21.84375,7.88086c-.00488,0-1.59473-.0166-2.28418-.01855-4.83789-.01758-7.0459-.02441-9.71875-3.792a1.00014,1.00014,0,0,1,1.63086-1.1582c2.07813,2.92871,3.47266,2.93359,8.09473,2.9502.69824.002,1.459.00488,2.29395.01855a1.00007,1.00007,0,0,1-.0166,2Z\" />\n    <path d=\"M21.84375,12.33887H14.95313a1,1,0,0,1,0-2h6.89063a1,1,0,0,1,0,2Z\" />\n    <path d=\"M19.89941,20.25977H14.95313a1,1,0,1,1,0-2h4.94629a1,1,0,0,1,0,2Z\" />\n    <path d=\"M21.84375,16.2998H14.95313a1,1,0,0,1,0-2h6.89063a1,1,0,1,1,0,2Z\" />\n</svg>\nNaive merge\nxml\n<svg id=\"outline\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M6.40625,21.50879c-2.89453,0-5.25-2.084-5.25-4.64648s2.35547-4.64746,5.25-4.64746,5.25,2.085,5.25,4.64746S9.30078,21.50879,6.40625,21.50879Zm0-7.29395c-1.792,0-3.25,1.1875-3.25,2.64746,0,1.459,1.458,2.64648,3.25,2.64648s3.25-1.1875,3.25-2.64648C9.65625,15.40234,8.19824,14.21484,6.40625,14.21484Z M10.65625,17.8623a.99942.99942,0,0,1-1-1V3.49121a1,1,0,0,1,2,0V16.8623A.99942.99942,0,0,1,10.65625,17.8623Z M21.84375,7.88086c-.00488,0-1.59473-.0166-2.28418-.01855-4.83789-.01758-7.0459-.02441-9.71875-3.792a1.00014,1.00014,0,0,1,1.63086-1.1582c2.07813,2.92871,3.47266,2.93359,8.09473,2.9502.69824.002,1.459.00488,2.29395.01855a1.00007,1.00007,0,0,1-.0166,2Z M21.84375,12.33887H14.95313a1,1,0,0,1,0-2h6.89063a1,1,0,0,1,0,2Z M19.89941,20.25977H14.95313a1,1,0,1,1,0-2h4.94629a1,1,0,0,1,0,2Z M21.84375,16.2998H14.95313a1,1,0,0,1,0-2h6.89063a1,1,0,1,1,0,2Z\" />\n</svg>. ",
    "flipflop97": "Yes please, Inkscape creates lots of duplicate defs.. ",
    "guignonv": "+1. I do a lot of copy/paste and generate a huge lot of duplicate defs. My document takes a lot of time to load! :-S Would be nice to optimize that.. ",
    "bentinata": "How about not escaping apos and quot? My only concern is this breaking @import inside <style> tag.. ",
    "pycbouh": "I looked further into this and found out that a path for the circle\n\nM7.9975,6.00125 C9.65875,6.00125 11.0013,7.33875 11.0013,8.99875 C11.0013,10.6587 9.65875,12.0025 7.9975,12.0025 C6.3375,12.0025 5,10.6587 5,8.99875 C5,7.33875 6.3375,6.00125 7.9975,6.00125 L7.9975,6.00125 Z\n\nis successfully simplified into \n\nM7.997 6.001a3.002 3.002 0 1 1 0 0z\n\nHowever, this resulting string renders nothing.. @na-oma Thank you for being thorough! Scaling precision in checks would be great for the library IMO. Our image was created with Sketch, and, as far as I know, nothing about export settings for this one did stand out. So, other people may run into a similar issue as well.\nAs for a workaround, I used an older version of SVGO, which is published at https://jakearchibald.github.io/svgomg/. It resulted in a slightly bigger file, but the app didn't have any issues with our circle. And after that the latest version of SVGO stopped ruining the image too (guess, it sees no need to optimize it now).. ",
    "na-oma": "This appears to be a rounding/precision/floating point issue.\nTry adding a scaled up version of your circle:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill=\"red\" d=\"M7.9975,6.00125 C9.65875,6.00125 11.0013,7.33875 11.0013,8.99875 C11.0013,10.6587 9.65875,12.0025 7.9975,12.0025 C6.3375,12.0025 5,10.6587 5,8.99875 C5,7.33875 6.3375,6.00125 7.9975,6.00125 L7.9975,6.00125 Z\"/>\n    <path transform=\"scale(2)\" fill=\"blue\" d=\"M7.9975,6.00125 C9.65875,6.00125 11.0013,7.33875 11.0013,8.99875 C11.0013,10.6587 9.65875,12.0025 7.9975,12.0025 C6.3375,12.0025 5,10.6587 5,8.99875 C5,7.33875 6.3375,6.00125 7.9975,6.00125 L7.9975,6.00125 Z\"/>\n</svg>\nThe first will be simplified wrongly and disappear like in your example, the second will be simplified right, (scaling down would also disappear):\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill=\"red\" d=\"M7.997 6.001a3.002 3.002 0 1 1 0 0z\"/><!--gets eliminated with --multipass -->\n    <path fill=\"#00f\" d=\"M15.995 12.002a5.993 5.993 0 0 1 6.008 5.995 6.003 6.003 0 0 1-6.008 6.008A5.994 5.994 0 0 1 10 17.997a5.983 5.983 0 0 1 5.995-5.995z\"/>\n</svg>\nThe culprit lies in line:\nhttps://github.com/svg/svgo/blob/3ec0767ba0ca3aff507ace3b3798de69084c4649/plugins/convertPathData.js#L356\nThis normally checks, how different the summed angle is from 360\u00b0 or 2*PI.\nIf it is too different, it is not a circle, if not, it is a circle.\nIn your example, the arc seems to be a bit too short (the difference too great), so it is not recognized as circle.\nThe problem is the error constant/epsilon of 1e-3. It normally is large enough to cover some precision/rounding/whatever, but with your small numbers, you incur a very big precision/rounding/whatever error, your arc is too short, so the constant is too small.\nFix:\nIncreasing it (and maybe other mentions of 1e-3) might work, but might break other stuff: a large error could lead to bigger almost-circles to be wrongly recognized as circles.\nMy math is rusty and my understanding of the code shallow, but it might be possibly to either set the error constant(s) adaptively depending on the scale/precision we are working in, or to use some the supplied precision arguments/create a new one.\nhttp://www.floating-point-gui.de/errors/comparison/ (really!)\nsuggests using some kind of relative error.. ",
    "coderaiser": "Same problem with options: convertPathData and convertShapeToPath. They broke svg.\nSo I run:\nsvgo --enable={convertPathData,convertShapeToPath} img/spinner.svg\nOriginal svg:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"16\" height=\"16\" fill=\"rgb(49, 123, 249)\">\n  <path transform=\"translate(2)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(8)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.2\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(14)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.4\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path transform=\"translate(20)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.6\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path transform=\"translate(26)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.8\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n</svg>\nBecames:\nsvg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"16\" height=\"16\" fill=\"#317BF9\">\n    <path d=\"M2 12v8h4v-8z\">\n        <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path d=\"M8 12v8h4v-8z\">\n        <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\".2\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path d=\"M14 12v8h4v-8z\">\n        <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\".4\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path d=\"M20 12v8h4v-8z\">\n        <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\".6\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n    <path d=\"M26 12v8h4v-8z\">\n        <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\".8\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n    </path>\n</svg>\nHere is both of them: spinners.zip\n. ",
    "bbqaaq": "This is a good plugins! I probably will use it in my project!\nBut Im suggesting to make this plugin being executed before the removeUselessDefs plugins, otherwise it will just duplicate the path after removing the <use> tag . As a user I do support adding this plugin as a optional one as I am useful with this.\nIn my project I got some SVGs with <use> and <defs> which is annoying to me\nI have gone through this plugin and it works quite fine with the SVGs.. ",
    "tshedor": "@bbqaaq Great call. I almost always run with multipass enabled, so I didn't notice. I've moved it before removeUselessDefs.. @TiagoDinisFonseca I've addressed those bugs. Thanks for reporting them.\nRegarding the <use> attributes, I changed the <use> tag into a group as per your suggestion, and my tests show equivalent behavior between <use> and <g>. However, please verify that your tests work as expected.\nThese fixes mean the plugin is no longer complimented by removeUselessDefs as it achieves the desired effect on its own.. ",
    "TiagoDinisFonseca": "Hi, I was testing this plugin and I found several bugs:\n- It is removing necessary IDs (remove line 22)\n- The tag use can have some attributes, unfortunately we cannot copy it inside the object being moved, perhaps it is best to use a new group and some transformations\n- It ignores all defined object outside defs (yes, it is possible to do so with a svg). Unfortunately, this is not true. The  tag has some attributes: x, y, height and width that g has not.\n(see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use)\nx and y should be equivalent to a translate\nheight and width are still mysterious for me here\nin all my experiences height and width do nothing. @lifeiscontent \nAt the time I was interested on this because it could be useful for me. It turns out, I was wrong.\nTherefore, I did not care to solve its problems. Sorry for that, eventually I can do it when I have the time to run this on my personal PC.\nBut you can solve it:\n1- Your solution is not good enough, you never know what is inside, it could be a second group.\n2- I guess that attributes x and y can be transformed into some translation (x,y) => transform=\"translation(x, y)\"\n3- What about width and height??? I feel bad about erasing some fields just because I do not understand them. \n3.1 - There is a solution for this: we erase those fields... if this is a problem, this will be a bug in the future (I don't like this attitude, but perhaps it is ok). ",
    "PeterTheOne": "@GreLI Yes, IE is outdated but some clients/users still ask for support :( Thanks for the hint about removeUnknownsAndDefaults!. ",
    "PhillyWebGuy": "How does one use this? Specifically, with webpack? . ",
    "buisine": "@alexjlockwood \nHi,\nlooklike ellipse element are not converted to paths\nmade test on commande line like : \n\u279c  svg svgo --enable=convertShapeToPath 1.svg\n\u279c  svg svgo --enable=convertShapeToPath --config=conf.json --pretty 1.svg \nwith config.json having { \"convertArcs\": true }\nalso tried : \n{\n  \"pretty\": true,\n  \"multipass\": true,\n  \"floatPrecision\": 2,\n  \"plugins\": [\n    {\n      \"name\": \"convertShapeToPath\",\n      \"enabled\": true,\n      \"params\": {\n        \"convertArcs\": true\n      }\n    }  \n  ]\n}\n\nCould you help please ?. @alexjlockwood \nThanks.\nFor now i edited plugin source : \n    exports.params = { convertArcs: true }; \nin convertShapeToPath.js\nand it does the job !\nthought my config is bad.\n. ",
    "mellenbe": "See issue #690 and PR #861  . ",
    "zmwangx": "I can verify that this fix works on all similar SVG files (that is, similar to the minimal failing case) that I have at hand.. @GreLI Any chance of a patch release?. Thanks!. Okay, then why does disabling inlineStyles fix the problem?. Thanks for the explanation. Sure, convertStyleToAttrs is the culprit then.. ",
    "RTC1": "Also experiencing this issue.. ",
    "pavel-popov-jr": "+1. input https://gist.github.com/pavel-popov-jr/2a91d9e3145606dd245cbaf3886a5ea7\noutput  https://gist.github.com/pavel-popov-jr/facb8a7322d805d472b7132c4d84e036. I'm using gulp-imagemin with default settings. ",
    "hzlmn": "Have same problem :crying_cat_face: . @GreLI Do you have some time to look on it or i can try to submit a patch?. ",
    "mikekasprzak": "Ah, looks like it's a lot more than removeTitle that got enabled by default. removeViewBox and possibly removeDimensions also got enabled.\nIf this is the new behaviour as of 1.0 that's fine, but the README.md should be updated accordingly.. Can we get a bit more warning next time? Say mark any \"disabled by default\" items that will be \"switching soon\" to enabled with an asterisk? Like I imagine there was a plan somewhere that documented this change before it happened. Would have saved some time to find that. . ",
    "andrewmee": "I've just found the same thing has broken images in my project too (due to incorrectly starting to remove viewbox attributes with the new version).  As @povrazor said, I can re-disable that filter to fix it, but would be good to either disable those again by default or update the release notes and readme to reflect this change.. FWIW it looks like this was a deliberate change, but perhaps one that was forgotten when writing up the release notes/updating the readme; https://github.com/svg/svgo/commit/055e303607d53a3d539761d8727d86c03b2e88c1. ",
    "x5engine": "please accept this fix because it is throwing an error in 2018\nhttps://github.com/svg/svgo/pull/980\nthank you\n. ",
    "d4l3k": "@chamkank Wasn't there another file we had issues with too?\n. ",
    "chamkank": "Oh yeah, there was an issue where svgo would cut off the right side of the svg due to loss of precision. \nI've opened a new issue for it: #833 . Thanks for the quick response, svgo disable=convertTransform seems to work great.. ",
    "candidodmv": "I'm with the same problem.. Thanks @oliverviljamaa, this is really the source of this issue. Answering your question, I think this interference sortAttrs in other plugin is not intentionally, but we will need a answering of the maintainers. @Volker-E thanks for answer, I was able to make use plugins.. ",
    "oliverviljamaa": "I also had the same issue when I had this plugin:\njs\n{ sortAttrs: true }\nIs this intended to break the added classes?. ",
    "leobauza": "I was having this same problem and tried the alternative way of setting the classNames parameter:\nconst svgo = new SVGO({\n  plugins: [{\n    addClassesToSVGElement: { classNames: ['icon'] },\n  }]\n})\nSo using classNames instead of className and passing an array of classes instead of a string. Hopefully that helps as a workaround. Also tagging #886 here since I think it's the same issue. ",
    "dagjomar": "Found out that there was a \"onlyMatchedOnce\" option that was default true.\nClosing this. ",
    "danaonel": "I hope this will be merged soon. I need it for my current project.. ",
    "maccuaa": "@danaonel don't get your hopes up.  I ended up installing SVGO globally and then manually changing the default enabled plugins to include this one.  \nNot sure why this PR isn't being merged in, it's not turned on by default.. I think you misunderstand the point of this plugin but that's ok, if you don't want to include it that's your decision.. ",
    "gvincentlh": "Just updated to 1.1.1 and this seems to be working now.. ",
    "vcanales": "As far as I can tell, this check should probably live in the preparePluginsArray function if it's causing any trouble at all, otherwise the same thing that is causing problems at the moment, could come back. \nAlso, the Array.isArray({}) check being done previously should be good enough. Do you have an specific case where this fails?. ",
    "optunetobi": "@vcanales I had issues because of some external circumstances which removed/filtered files which the plugin should have used. These missing files led then to this error. Unfortunately I can't remember the exact problem or version of packages produced the issue. But I think it does no harm to have that check in there.. ",
    "prashjain309": "Hi, awaiting your reply.. So it is generic for all attribute and can be used for any attribute I believe. Should it be restricted to some attributes only?. ",
    "jzempel": "Note this solves an issue where files with the same name in different subdirectories overwrite each other on in-place optimizations.. ",
    "PaulWoitaschek": "Any news on merging this?. ",
    "RoyTinker": "I just arrived here after attempting to incorporate SVGO into an npm script -- looks like this is what I need. Does anything need improvement/revisiting on this PR?. ",
    "michaelz": "In the meantime, this might be helpful for some...\n```\nASSETS=$(find ./path/to/assets -type d)\nfor i in $ASSETS\n    do test -n \"$(find $i  -maxdepth 1 -type f -name '*.svg' -print -quit)\" && svgo -f $i\ndone\n```. ",
    "chrisjshull": "@GreLI, that's unfortunate. \"Just don't make your SVGs that way\" isn't really an option for me - my team isn't the one making the images. And I'm not familiar with all the tools out there, which could output this way for whatever internal reason.. ",
    "lixue007": "If I want to change the prefix of cleanupIDs, how can i do? @GreLI . ",
    "tschoartschi": "I have the same problem. Let me know if you need more testing data to solve this issue . ",
    "djgerhab": "@GreLI, Thanks, I missed the fact that the defaults changed. After updating the config by setting removeViewBox to false, it works as it did before. May I suggest adding any explicit default changes to the 1.0 changelog, just as a safety net for those like me whom overlooked it in the readme =). ",
    "crcatala": "Agree with @djgerhab -- would be nice to spell out the default changes in the Changelog. Might also be helpful to include in README Plugins section a default column to let us know the defaults i.e.\n| Plugin | Default |  Description |\n| ------ | ------- | ----------- |\n| cleanupAttrs | true | attributes from newlines, trailing, and repeating spaces |. ",
    "concatime": "What if I want to remove both? removeDimensions should NOT depend on removeViewBox. If I explicitly set removeDimensions, I want them to be removed, independently from viewbox.. ",
    "TimothyGu": "I am experiencing this as well.. ",
    "denniske": "Thanks for the fast answer. I will take a look at some other libraries for this purpose.. ",
    "davorpeic": "This is how I'm removing fill attribute from svg \nplugins: [\n    {removeAttrs: {attrs:['fill']}}\n ]. ",
    "szepeviktor": "Or all plugins are enabled by default?\nReadme does not reveal that.. I think they are: https://github.com/svg/svgo/blob/91d98106d4c75a947301e152ad97dc947990e9e2/.svgo.yml\nPlease consider mentioning it in the readme: All plugins are enabled by default. @Volker-E Thank you.\nCould you update the README with the list of enabled plugins? Or with the way described above?. bash\n$ grep -F -l 'exports.active = true;' * | sed -e 's/\\.js//'\ncleanupAttrs\ncleanupEnableBackground\ncleanupIDs\ncleanupNumericValues\ncollapseGroups\nconvertColors\nconvertPathData\nconvertShapeToPath\nconvertStyleToAttrs\nconvertTransform\ninlineStyles\nmergePaths\nminifyStyles\nmoveElemsAttrsToGroup\nmoveGroupAttrsToElems\nremoveComments\nremoveDesc\nremoveDoctype\nremoveEditorsNSData\nremoveEmptyAttrs\nremoveEmptyContainers\nremoveEmptyText\nremoveHiddenElems\nremoveMetadata\nremoveNonInheritableGroupAttrs\nremoveTitle\nremoveUnknownsAndDefaults\nremoveUnusedNS\nremoveUselessDefs\nremoveUselessStrokeAndFill\nremoveViewBox\nremoveXMLProcInst. ",
    "iampeter": "I believe the convertPathData plugin could be responsible.. ",
    "michael5r": "We're seeing this issue as well -  a quick fix is to set minifyStyles: false in the config.. ",
    "jirilebl": "It is the convertPathData plugin.  If I disable that, things work, and the svg gets very nicely minimized (with multipass) to 472kb. ",
    "samikeijonen": "I was wondering the same thing. Anything we can do to help this get sorted?. ",
    "Landerson352": "Yes please! Spent a couple hours this morning trying to figure out why my styles were getting inlined (and breaking the image).. ",
    "jacobp100": "Thanks!. ",
    "sfoster": "I don't know if there's a policy or guidelines on accepting plugin pull requests - clearly what works for one may not be useful for all. This was giving me 50+% optimization on a set of SVG  files I needed to optimize, where each \"frame\" in a film-strip arrangement was a transformed shape. \nI'm happy to add detail, docs, tests, refactor etc.   . I'll re-work this to make use of querySelector/querySelectorAll and fix the ci issue - which I assume is to do with the 'active' property. . ",
    "konsumer": "I made inkscape-svgo which works ok, but I need to clean up the options (maybe separate tabs to \"basics\" and \"advanced\") and better handling of inputs and things.\nI ended up needing to make a CLI wrapper because of how inkscape handles options.\n\n. any suggestions are welcome.. Yeh, I dropped all the options that require input, and split it into to categories: \"Optimization\" & \"Removal\".\nUnfortunately, inkscape's parameter UI config is pretty limited. Each option goes on a line of it's own, and is totally non-dynamic, so while I completely agree an info panel would be better, it doesn't really do that. I could put named options with tooltips that give more detail, but since all the descriptions are pretty short, they seem to fit well enough, and since it's 1-line-per-option, it wouldn't really save any space on the dialog.\nThese are the options I left out:\ninlineStyles\ncleanupListOfValues\nprefixIds\nremoveAttrs\naddAttributesToSVGElement\naddClassesToSVGElement\nremoveElementsByAttr\nI may add them back, but since the UI is non-dynamic, having a checkbox that toggles inlineStyles (which needs further input) doesn't work, for example, so it seemed a little wonky (like I could check for an empty text-box, but this seems a bit confusing for the end-user.) I'm in total agreement that maybe all the options don't need to be in there, but since I'm not sure what to remove, I just tried to make sensible \"make it smaller without breaking it\" sort of defaults.\nThis is what I have, currently:\n\n. For illustration, here is the same dialog with shorter options (I couldn't get a tooltip in the screenshot, but all description are in tooltips.)\nIt's a little quicker to visually scan, but it looks a little unbalanced.\n\n. ",
    "MarkJeronimus": "Ah, I did not notice the package (inkscape-svg) I use is 3 years old. This bug is invalid then.\nThough I tried to overwrite the files in the package with this repository and the plugin stops working (and no exceptions). :(. ",
    "jareha": "Got it. Thanks for the quick response!. ",
    "joepagan": "Interesting, ok thanks, maybe there was a caching issue, I'll have another go tomorrow!. ",
    "wifivepl": "I reinstalled nodejs and everything works fine! Dunno why SVGO was the only app having problem with that, but I'm glad it's fine now. Thank you!. ",
    "danburzo": "Added a pull request to fix the issue, but maybe we can replace inherit with the actual value and remove the group \ud83e\udd14. ",
    "maltsev": "This issue is relevant to the old versions of SVGO. The latest one handles <use> well. So you could close this case.. ",
    "mhart": "Now up to alpha.29 \u2013\u00a0would love to see this go in so that there's deduplication with csso, which svgo also depends on. ",
    "benjamingr": "@GreLI would you like a PR?. See https://github.com/svg/svgo/pull/926. ",
    "morhetz": "My bad, seems like duplicate of #858 . ",
    "earthbound19": "I believe the code section you cite does the opposite of what I want--I want to preserve long hex. I have tried commenting out that section of the config and it still converts to short hex.\nIf a config can be passed (the CLI options given by --help indicate it can be) I don't know how. I have tried passing --config=thisConfigFileInTheSamePath.js (with radically different options in the local config file) and seen no change in behavior.. In my setup, and perhaps in the code base itself, something else is overriding the convertcolors.js plugin shorthex option and the code you cite is never called. I inserted a console.log debug statement there (in the code under // Convert long hex to short hex, and never see the console print, whether shorthex is set to true or false! I see other print statements just fine if I insert them at the start of the file.\nI think what is overriding it is another plugin setting. I edited .svgo.yml to disable all plugins, and long hex colors remain long in output. I haven't yet bothered enabling plugins one by one to see which shortens long hex despite longhex being set to false in convertcolors.js.. ",
    "thomsj": "Does your SVG use any xlink attributes, such as xlink:href?. ",
    "coreyward": "Interesting. I'm not sure how this file was created, but browsers don't seem to care. Any idea why disabling removeUnknownsAndDefaults still results in the errant attribute being removed?. I think you misread. When removeUnknownsAndDefaults is disabled the attribute is still removed. So either it is still active or another plugin (e.g. removeViewBox) is removing the attribute.. Ah, I still had the curly braces around the arguments to --disable. Apparently it silently ignores that if there's only a single argument. E.g. svgo x.svg --disable={removeUnknownsAndDefaults}. ",
    "mr-CKR": "1) I'm not aware of any solution for this, but I might just dive into it to see to what extent it is possible.\n2) Don't these problems already exist with current path merger operations? And a possible workaround would be to only apply this when no styling exists at all.. ",
    "tremby": "I'm getting a similar issue with the prefixIds plugin when prefix there is 6 or more characters long. Given that the delimiter that plugin is appending is two characters long (__), it looks like it could be the same issue.. Not sure if it's related, but unless I disable multipass I can't get either plugin to work, even with a short prefix.. No idea if this was since fixed, or if it was an issue with img-loader, but when using the beta of img-loader version 3 I do not have this problem. Close at will.. If I reenable multipass at this point I get the ID prefixed multiple times. Let me know if I should open a separate issue for that.. @GreLI, could you cut a release? It's been a couple of months since this was merged.. Might be better to split on /\\s+/?. ",
    "ad-si": "I'm also having problems with erroneously removed CSS since the update from 0.7.2 to 1.0.x. ```svg\n\n\n    #bot {\n      stroke: hsl(0, 0%, 30%);\n      fill: hsl(0, 0%, 30%);\n    }</p>\n<pre><code>#bot .closed-eye {\n  fill: none;\n  stroke-linecap: round;\n  stroke-width: 2;\n}\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n``\nThe styling for.closed-eyeis discarded.\nI'm using version1.0.5`. ",
    "bdrtsky": "I was surprised this feature doesn't exist yet. I don't see any other way to remove that damned Layer_2 wrapper g tag.... ",
    "schalkneethling": "Enabling --pretty pretty much solves this problem.. ",
    "bondom": "I was using old version of svgo, updating to latest solved the issue!. ",
    "himedlooff": "I pasted the SVG into a Codepen and it works for me. You should provide a demo.. Disabling if (angle > Math.PI) arc.data[3] = 1; fixes a similar issue I have as well. Hope that helps validate your theory.. Yeah it's definitely not a good way to go forward but it was the only way I could test to make sure that my issue was with svg and not something local. Also for some reason I couldn't get the makeArcs property work in my set up:\n\n\u261d\ufe0f that does not fix the issue for me. \ud83e\udd14 . ",
    "poeschko": "I opened a pull request: https://github.com/svg/svgo/pull/1009. I wonder how inlineStyles relates to convertStyleToAttrs? Does the former supersede the latter?. That makes sense, I missed that. Thanks for the explanation!. ",
    "marcofugaro": "Whoops, it's because I was trying stuff, tried like this\nyml\nplugins:\n  - convertColors:\n    currentColor: true\nor this \nyml\nplugins:\n  - convertColors:\n    currentColor\nand doesn't work in either case. Just tried it now, doesn't work either. Alright I found out what was the problem, the config works fine, but the problem was that the svg file had no fill attirbute, so it wouldn't be recognized by the convertColors plugin.\nIs there I way I can force the svg to have a fill=\"currentColor\"? Should the currentColor option also take care of this?. ",
    "DavidHenri008": "Thanks, it works. I used the syntax from the example.\n{\n  \"plugins\": [\n    {\n      \"cleanupAttrs\": true\n    },\n    {\n      \"removeDoctype\": true\n    },\n    {\n      \"removeXMLProcInst\": true\n    },\n    {\n      \"removeComments\": true\n    },\n    {\n      \"removeMetadata\": true\n    },\n    {\n      \"removeTitle\": true\n    },\n    {\n      \"removeDesc\": true\n    },\n    {\n      \"removeUselessDefs\": true\n    },\n    {\n      \"removeEditorsNSData\": true\n    },\n    {\n      \"removeEmptyAttrs\": true\n    },\n    {\n      \"removeHiddenElems\": true\n    },\n    {\n      \"removeEmptyText\": true\n    },\n    {\n      \"removeEmptyContainers\": true\n    },\n    {\n      \"removeViewBox\": false\n    },\n    {\n      \"cleanUpEnableBackground\": true\n    },\n    {\n      \"convertStyleToAttrs\": true\n    },\n    {\n      \"convertColors\": true\n    },\n    {\n      \"convertPathData\": true\n    },\n    {\n      \"convertTransform\": true\n    },\n    {\n      \"removeUnknownsAndDefaults\": true\n    },\n    {\n      \"removeNonInheritableGroupAttrs\": true\n    },\n    {\n      \"removeUselessStrokeAndFill\": true\n    },\n    {\n      \"removeUnusedNS\": true\n    },\n    {\n      \"cleanupIDs\": true\n    },\n    {\n      \"cleanupNumericValues\": true\n    },\n    {\n      \"moveElemsAttrsToGroup\": true\n    },\n    {\n      \"moveGroupAttrsToElems\": true\n    },\n    {\n      \"collapseGroups\": true\n    },\n    {\n      \"removeRasterImages\": false\n    },\n    {\n      \"mergePaths\": true\n    },\n    {\n      \"convertShapeToPath\": true\n    },\n    {\n      \"sortAttrs\": true\n    },\n    {\n      \"transformsWithOnePath\": false\n    },\n    {\n      \"removeDimensions\": true\n    },\n    {\n      \"removeXMLNS\": true\n    },\n    {\n      \"cleanupEnableBackground\": true\n    },\n    {\n      \"minifyStyles\": true\n    },\n    {\n      \"cleanupListOfValues\": true\n    },\n    {\n      \"removeStyleElement\": true\n    },\n    {\n      \"removeAttrs\": { \"attrs\": \"(stroke|fill)\" }\n    }\n  ]\n}. ",
    "Huulivoide": "This is because the preserveAspectRatio attribute defaults to \"preserve\" aspect ratio mode if viewBox is defined. If no viewBox is defined then preserveAspectRatio attribute is ignored and assumed to 'none' (ignore aspect ratio), be it defined or not.\nSo removing viewBox attrribute also has the side effect of modifying the implied value of the preserveAspectRatio attribute.\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio. ",
    "tkh44": "It is illogical for an optimization to modify the end result and thus create an unpredictable and unexpected output. When the viewBox attribute is present on an SVG tag it has a specific meaning that defines how that svg is to be displayed and rendered. Removing the attribute changes the render behavior of the SVG\n\nIf you'd use a PNG file, it will be scaled as well. In other context (e.g. element background) SVG behaves as expected, so it's just an edge case due to wrong  element size. Probably, a bug in browsers.\n\nWe aren't using PNG files, we are using SVG files which use the viewBox to instruct the browser render engine to render the SVG in a specific manner.\n\nYeah, but usually intrinsic size from attributes width and height are in use, but it's ignored in this specific case. SVGO don't know how image will be used, that's why it is highly configurable. It has to bear reasonable balance between optimization and \u201csafety\u201d, so default options are usually ok, but not 100% fits to everyone. Otherwise, many optimization in 90%+ cases should be enabled manually, which is not user friendly.\n\nIt seems to me that the safer option is to not remove such a key attribute when it comes to a render engine rendering the SVG. \"Safety\" is not removing critical render instructions from an element in the name of optimization!\n. ",
    "Zulko": "jimp is a pure-javascript library that can do JPG. My intention is to just try some simple PNG -> JPG optimizer for my own SVG needs. Is it possible to make \"external\" plugins for SVGO or do plugins have to be hosted in this repository ?. I went with my own solution (upstream of SVGO) and it works well for me too, but I'd still be interested in seing your solution (and even better if it comes included in SVGO), as a SVGO plugin would be cleaner.. It seems that your solution relies on external non-JS software though, which I really want to avoid in my project. The ideal solution would be pure-js, but also synchronous so that it can be a SVGO plugin. So far I couldn't find any library that does that.. There is jimp, which is the solution I use in my project (see two messages above).\nIt makes plenty of sense to have a pure-JS image library, it is more accessible (it doesn't complicate the installation of your JS project) and it can run in a web application. It's fast enough.. @julienboulay I am making this project which, even though it is written in javascript and distributed via npm, is aimed at the general public (not just front-end specialists). I am trying to avoid any binary because these can cause platform-related problems (see for instance the imagemin issues page, but pngquant and jpegtran also have open installation issues). ",
    "julienboulay": "Hi, I created a new plugin to optimise png and jpeg embedded in the svg as base64.\nIt works well for me, decreasing the size of the svg by 50%.\nLet me know if it fits your needs. You can try it by using \nnpm i -g git+ssh://git@github.com/julienboulay/svgo.git\nthen\nsvgo [OPTIONS] [ARGS]\nSome options can be passed to svgo to configure pngquant and jpegtran. @Zulko : why do you want to avoid non-JS solution ?\nimagemin, pngquant and jpegtran are very powerful projects and are multi-platforms.. There is no complication for installing imagemin, pngquant and jpegtran.\nYou just need to use npm as any other node dependency. @Zulko, I understand, now, why you don't want external libraries.\nI had a look to jimp and it looks powerful.\nIt might be hard to integrate to the svgo plugin system as the plugins doesn't work asynchronously.\nI can see that you use node-sass in your project, which depends on native libraries.\nDid you have any users complaining about installation issues regarding node-sass ?\nIf not, you might give a try to pngquant and jpegtran.\n. Hi @canercandan,\nThis PR has been rejected because it includes external non-js dependencies (pngquant and jpegtran)\nSee comments on issue #971 . ",
    "schmod": "I wonder if we could re-envision this as a command-line argument (or JS option) that will pipe embedded images to an external program (making the management of binary dependencies \"somebody else's problem\"). . ",
    "lancedikson": "Would be great to have this implemented! \ud83d\udc4d . It's href in SVG 2.0, btw: https://www.w3.org/TR/SVG2/struct.html#UseElement. ",
    "allinne": "Bump this PR :-). ",
    "racingrebel": "@GreLI Please implement this PR! It will help many Sketch users. I was actually about to do a PR to solve this problem until I stumbled upon this.. ",
    "chrleon": "Cloning the repo and adding in this as a plugin, did not work for me without two steps.\nI have tried exporting from Sketch without SVGO\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <!-- Generator: Sketch 51.2 (57519) - http://www.bohemiancoding.com/sketch -->\n    <title>icons/carousel</title>\n    <desc>Created with Sketch.</desc>\n    <defs>\n        <path d=\"M11,23 L11,8 L21,8 L21,23 L11,23 Z M13,10 L13,21 L19,21 L19,10 L13,10 Z M6,10 L10,10 L10,21 L6,21 L6,10 Z M22,10 L26,10 L26,21 L22,21 L22,10 Z\" id=\"path-1\"></path>\n    </defs>\n    <g id=\"icons/carousel\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <mask id=\"mask-2\" fill=\"white\">\n            <use xlink:href=\"#path-1\"></use>\n        </mask>\n        <use id=\"Mask\" fill=\"#444444\" fill-rule=\"nonzero\" xlink:href=\"#path-1\"></use>\n    </g>\n</svg>\nReturns this with inlineDefs\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\">\n<defs><path id=\"path-1\" d=\"M11 23V8h10v15H11zm2-13v11h6V10h-6zm-7 0h4v11H6V10zm16 0h4v11h-4V10z\"/></defs><use fill-rule=\"nonzero\" xlink:href=\"#path-1\"/></svg>\nExport from sketch with SVGO Compressor goes from\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n  <defs>\n    <path d=\"M11,23 L11,8 L21,8 L21,23 L11,23 Z M13,10 L13,21 L19,21 L19,10 L13,10 Z M6,10 L10,10 L10,21 L6,21 L6,10 Z M22,10 L26,10 L26,21 L22,21 L22,10 Z\" id=\"path-1\"/>\n  </defs>\n  <use xlink:href=\"#path-1\"/>\n</svg>\nto this with inlineDefs\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path d=\"M11 23V8h10v15H11zm2-13v11h6V10h-6zm-7 0h4v11H6V10zm16 0h4v11h-4V10z\" />\n</svg>\nSo I need to use SVGO Compressor from sketch and then do svgo in node to get it like I want. \nI tried setting onlyUnique to false, but that often ended in an error.\nThe above is FYI on this PR, so I'll do more research on my part.\n. I removed some '' as they interfered with formatting.. ",
    "mathieudutour": "I believe that's because the plugin is currently set to run first so it's applied before the other optimizations are applied. It should probably be set to run last.\nAlso, worth noting that the latest version of the SVGO Sketch plugin supports custom svgo plugins: https://github.com/BohemianCoding/svgo-compressor#custom-svgo-plugins but it would definitely be nice to merge this PR as it's a pretty important SVG optimisation. ",
    "edahlseng": "@GreLI, @deepsweet, What's needed to get this PR merged? It looks like an incredibly useful tool!. ",
    "Saegrov": "If the element beeing inlined is a symbol-element, this plugin doesn't\nI have the following SVG:\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\">\n    <defs>\n        <symbol id=\"b\" viewBox=\"0 0 31.55 27.98\">\n            <path fill=\"#fff\" fill-rule=\"evenodd\"\n                  d=\"M31.36 25.74A1.51 1.51 0 0 1 30.05 28H1.5a1.46 1.46 0 0 1-.74-.19 1.5 1.5 0 0 1-.56-2.07L14.47.76a1.5 1.5 0 0 1 2.61 0z\"/>\n            <path fill=\"#ff9d00\" fill-rule=\"evenodd\"\n                  d=\"M30.92 26L16.65 1a1 1 0 0 0-1.37-.37 1.09 1.09 0 0 0-.37.37L.63 26A1 1 0 0 0 1 27.35a1 1 0 0 0 .5.13h28.55a1 1 0 0 0 1-1 1 1 0 0 0-.13-.48z\"/>\n            <path d=\"M30.92 26a1 1 0 0 1 .13.49 1 1 0 0 1-1 1H1.5a1 1 0 0 1-.5-.13A1 1 0 0 1 .63 26L14.91 1a1.09 1.09 0 0 1 .37-.37 1 1 0 0 1 1.37.37zm-.43.25l-14.28-25a.49.49 0 0 0-.68-.18.47.47 0 0 0-.19.18l-14.27 25a.49.49 0 0 0 .18.68.54.54 0 0 0 .25.07h28.55a.5.5 0 0 0 .5-.5.5.5 0 0 0-.06-.26z\"\n                  opacity=\".5\"/>\n        </symbol>\n        <symbol id=\"a\" viewBox=\"0 0 24.78 15.48\">\n            <path d=\"M16.78 3a2 2 0 1 0 2 2 2 2 0 0 0-2-2m-4-3a1 1 0 1 0 1 1 1 1 0 0 0-1-1m9 14a3 3 0 1 0-3-3 3 3 0 0 0 3 3m-2.69 1.48H.5a.54.54 0 0 1-.25-.06.51.51 0 0 1-.18-.69L8.28.36z\"/>\n        </symbol>\n        <symbol id=\"c\" viewBox=\"0 0 24.78 15.48\">\n            <use width=\"24.78\" height=\"15.48\" xlink:href=\"#a\"/>\n        </symbol>\n    </defs>\n    <use width=\"31.55\" height=\"27.98\" transform=\"translate(.2 3.02)\" xlink:href=\"#b\"/>\n    <use width=\"24.78\" height=\"15.48\" transform=\"translate(1.22 14.5)\" xlink:href=\"#c\"/>\n</svg>\nWhich should turn into something like this:\nxml\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\">\n    <g transform=\"translate(.2 3.02)\">\n        <path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M31.36 25.74A1.51 1.51 0 0 1 30.05 28H1.5a1.46 1.46 0 0 1-.74-.19 1.5 1.5 0 0 1-.56-2.07L14.47.76a1.5 1.5 0 0 1 2.61 0z\"/>\n        <path fill=\"#ff9d00\" fill-rule=\"evenodd\" d=\"M30.92 26L16.65 1a1 1 0 0 0-1.37-.37 1.09 1.09 0 0 0-.37.37L.63 26A1 1 0 0 0 1 27.35a1 1 0 0 0 .5.13h28.55a1 1 0 0 0 1-1 1 1 0 0 0-.13-.48z\"/>\n        <path d=\"M30.92 26a1 1 0 0 1 .13.49 1 1 0 0 1-1 1H1.5a1 1 0 0 1-.5-.13A1 1 0 0 1 .63 26L14.91 1a1.09 1.09 0 0 1 .37-.37 1 1 0 0 1 1.37.37zm-.43.25l-14.28-25a.49.49 0 0 0-.68-.18.47.47 0 0 0-.19.18l-14.27 25a.49.49 0 0 0 .18.68.54.54 0 0 0 .25.07h28.55a.5.5 0 0 0 .5-.5.5.5 0 0 0-.06-.26z\" opacity=\".5\"/>\n    </g>\n    <g transform=\"translate(1.22 14.5)\">\n        <g>\n            <path d=\"M16.78 3a2 2 0 1 0 2 2 2 2 0 0 0-2-2m-4-3a1 1 0 1 0 1 1 1 1 0 0 0-1-1m9 14a3 3 0 1 0-3-3 3 3 0 0 0 3 3m-2.69 1.48H.5a.54.54 0 0 1-.25-.06.51.51 0 0 1-.18-.69L8.28.36z\"/>\n        </g>\n    </g>\n</svg>\nAs a proof of concept I changed the symbol-element to be a g-element and deleted invalid attributes. I have no idea if this is the way to do it, but at least my SVG worked with this modification.\nThe following code was replaced line 87.\nif(def.elem === 'symbol') {\n  def.elem = 'g';\n  def.local = 'g';\n  def.removeAttr('viewBox');\n  def.removeAttr('width');\n  def.removeAttr('height');\n  def.removeAttr('id');\n}\n_replaceElement(uses[i], def);\n. ",
    "shoogle": "Unfortunately it appears from #1055 that SVGO is no longer maintained. Maybe comment in #1055 if you think you have enough time and level of experience to help maintain it. Please don't comment there to criticize anybody or to say that \"somebody ought to maintain it\" as that creates spam and will not help the situation. Feel free to use upvoting/downvoting to make your opinions known, but do remember that this is a volunteer project so developers are free to come and go as they please.. @GreLI, you could start by putting someone else in charge of a new semi-official repository just for plugins, then you would only have to maintain the core plugins and the API.\nThis would speed up development of new plugins while keeping the core code safe. You can merge the most popular plugins into the core once the bus have been ironed out in the other repo.. @GreLI, could you link to the relevant issues in the tracker, or maybe label them as \"priority\", or apply a milestone, or something like that? It would be good to have some idea what needs doing.. @GreLI, the tool you have created is already very good (the best one I know of, in fact) so don't go tearing everything up and starting from scratch!\n\n\nDon't bother with this; it was a mistake to include whitespace preservation in the XML specification. If somebody finds a library that handles whitespace preservation (most don't and for good reason) then they are welcome to implement this, but otherwise don't bother.\n\nWhitespace preservation is a relic due to XML's origins as a markup language like HTML, but has it has no place in a data serialization format, which is what XML is mainly used for these days.\nThe main issue is that whitespace is sometimes considered semantic (i.e. part of the data) and sometimes not (i.e. just fancy indentation to make it easy to read). If it was always one or the other it would be fine, but both is unacceptable.\nSide note: SVG's <tspan> element exists mainly as a way to avoid having to use whitespace preservation in the first place.\n\n\n\nAn event-driven plugin system would be nice, but probably requires a major rewrite. It might be worth experimenting with on a separate branch, but no need to throw away the current system just yet as it works very well in most cases.\n\n\nI don't think the current API handles any path data (maybe just a few things?) so all path manipulations are left to the plugins. I can see why path features would be nice to have, but you could just as easily argue that it is out-of-scope. Why not let somebody else create a path manipulation API and then you can add it as a submodule or something like that?\n\n\nSame as 3.\n\n\nAgain, this would be nice but it is starting to sound like you want to just write a whole SVG manipulation library rather than focussing on optimizations that are simple and safe. (And anyway, surely there is already a library you could use?)\n\n\n(automatic efficiency checks) This probably isn't too hard to do.\n\n\nYou already said you don't have time to properly maintain it as it is, so maybe your priority should be to implement features that reduce your workload, not increase it :wink: If you simply allowed plugins to be loaded from outside the project folder that would at least allow plugin to development to continue without requiring input from you, which would leave you free to work on the API.\nMight you consider giving somebody else commit access to the main repository? Or you could give the person access to a side repository for plugins, or something like that. (I'm also too busy to get involved, in case you were wondering, but I might be able to help you find somebody who would be interested.)\nIf you are truly unable to carry on then you need to put some kind of notice in the README and GitHub project description because it's not fair to let people carry on submitting issues and PRs that go unnoticed.. Embedding is not something you can rely on an editor to do, as you might want images to be linked in the source SVG and only embedded in the published version. This keeps the source SVG small, making it easier to keep track of in a Git repository, and edit by hand if necessary.. Putting this information together:\n\nEach SVG optimization is done by a separate plugin to SVGO.\nOne of the plugins is called cleanupIDs.\nSVGO has a --disable option to disable a particular plugin (or multiple plugins).\n\nWe get:\nbash\nsvgo --disable=cleanupIDs file.svg. ",
    "frebro": "This would be a very useful addition to the plugin.. ",
    "roblevintennis": "I too think this would be a nice addition to the plugin...Herman chimed in on my PR https://github.com/svg/svgo/issues/999 which is a parity feature with grunt-svgstore and allows for using the SVG trick to style sprites with one more color by using the currentColor value to inherit font's color. That said, I could alternatively use his changes here to achieve with regex filtering {\"attrs\":\"*:(stroke|fill):((?!^currentColor$).)*\"} so that's a definite use case for getting this in.\nHere's an article I wrote on CSS tricks which explains the use case aforementioned:\nhttps://css-tricks.com/gotchas-on-getting-svg-into-production/#article-header-id-11\n. It's hard to not wonder if SVGO is really maintained at this point with no feedback from core folk for nearly 6 months. It's such a good tool I certainly hope that is not the case. @Herman-Freund did you ever hear any feedback outside of this channel on your work? I can't see why we wouldn't want this feature added esp. given the positive comments from various people here.. @Herman-Freund thanks for referencing that PR. Gee, it doesn't look like it's got a code review yet \ud83d\ude15 \nI could certainly achieve it if value is exposed in the regex filtering {\"attrs\":\"*:(stroke|fill):((?!^currentColor$).)*\"} if I'm understanding right?\nUsing currentColor to inherit the font color is such a popular SVG trick, I wonder if my PR should still be used additionally. Crafting a negative regex might be a bit to ask of a more neophyte user of this plugin (although I suppose the examples help).\nAnyway, I'll \"emoji plus\" your PR\n. Awesome @GreLI thanks! I can point back to SVGO proper \ud83d\ude4c . I had to restore branch until my company (and probably me) can properly update our package.json and what not (it's currently pointed to my fork which I obviously want to change but need to find a spare cycle). I presume that the falsy case is covered simply by the fact that: removeAttrs.01.svg removeAttrs.02.svg both pass. Also, if this diff isn't clear, I simply copied one of those and added the fill=\"currentColor\" on line #11 above.. only potentially remove if we have NOT enabled this option AND the value is not currentColor. This is essentially same as what we did for svgstore: https://github.com/FWeinb/grunt-svgstore/pull/63/files#diff-239be4703ce423ab0e43053cdf58384bR176. maybe should say \"to all element regardless of value\" (I just removed the extraneous 'and'). Maybe:\n\nassume it's an attribute name, and apply the transformations to all elements (regardless of their value) \n. I suppose you could state something like:\nif no element separators (:), apply the pattern match against attribute name, otherwise matching on all elements and values\n\nor\n\nif no element separators (:), match on all elements and values applying the pattern match against attribute name specifically\n\nBoth would seem to express the functionality of the regex your join will result in.. \ud83d\udc4d . \ud83d\udc4d . ",
    "raduflp": "any plans to merge this PR in the near future?. ",
    "MattMakes": "@deepsweet @GreLI Any way to get this moved through?. ",
    "Jetski5822": "Any way this can be merged in?. ",
    "canercandan": "@julienboulay what is the current state of this PR?. ",
    "hellatan": "thanks for merging @GreLI. do you know when the next version will be published? . i really didn't know what to call this param nor the value to give it. open to suggestions to make it clearer. ",
    "guylando": "I implemented a plugin which does this: https://github.com/guylando/svgo-addViewBox\nYou are welcome to add it to the official plugins list since its very useful to make svgs responsive when using them as an inline include (https://css-tricks.com/pretty-good-svg-icon-system/). ",
    "mryarbles": "This functionality is essential. . ",
    "aventic": "@GreLI - alright, and you have not encountered any errors on mac computers?. ",
    "xe21500": "+1, this SVG:\n<svg width=\"32px\" height=\"45px\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <g id=\"Symbols\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" width=\"32\">\n    <g fill=\"#02A5A5\" class=\"padlock-body\">\n      <path id=\"Path\" d=\"M36.8290909,25.0117647 L39.3818182,25.0117647 L42.3593946,25.0117647 C42.8296731,25.0117647 43.2109091,25.3896503 43.2109091,25.8594261 L43.2109091,46.7523386 C43.2109091,47.220489 42.8313059,47.6 42.3593946,47.6 L21.3715144,47.6 C20.901236,47.6 20.52,47.2221144 20.52,46.7523386 L20.52,25.8594261 C20.52,25.3912757 20.8996032,25.0117647 21.3715144,25.0117647 L24.7745455,25.0117647 L27.3272727,25.0117647 L36.8290909,25.0117647 L36.8290909,25.0117647 Z\"></path>\n    </g>\n  </g>\n  <g id=\"Symbols\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" class=\"padlock\">\n    <g fill=\"#02A5A5\">\n      <g id=\"Group-2\">\n        <path id=\"handle\" d=\"M16.3090913,8.6117647 C16.3090913,3.73953611 14.1818182,2.25882353 11.3454544,2.25882353 C8.65090881,2.25882353 6.80727271,3.73953611 6.80727271,8.6117647 L6.80727271,13.2004643 L4.25460655,13.2004643 L4.25460655,8.6060082 M4.25454545,8.61176471 C4.25454545,2.6296374 7.09090909,0 11.3454545,0 C15.7418182,0 18.8618182,2.6296374 18.8618182,8.61176471\"></path>\n      </g>\n    </g>\n  </g>\n</svg>\nis being optimized to this one:\n<svg width=\"32\" height=\"45\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M36.83 25.012h5.529c.47 0 .852.378.852.847v20.893c0 .468-.38.848-.852.848H21.372a.849.849 0 0 1-.852-.848V25.86c0-.468.38-.847.852-.847h15.457zM16.31 8.612c0-4.872-2.128-6.353-4.965-6.353-2.694 0-4.538 1.48-4.538 6.353V13.2H4.255V8.606m0 .006C4.255 2.63 7.09 0 11.345 0c4.397 0 7.517 2.63 7.517 8.612\" fill=\"#02A5A5\" fill-rule=\"evenodd\"/></svg>\nwhich lost the padlock-body and padlock classes on both paths. I'm using SVGO with the default options through this Ember addon. My workaround was to disable the collapseGroups plugin.\n. ",
    "AmeliaBR": "Further note: although focusable was defined in the defunct SVG Tiny 1.2 spec, the SVG 2 spec has user agent guidelines for the attribute, for maintaining backwards compatibility: https://svgwg.org/svg2-draft/interact.html#Focus. ",
    "jkfhto": "I still get an error after disabling the mergePaths plugin\n\n. Disabled a lot of plugins for optimization or caused an error\n\n. Is there any other way to solve this problem?. Still thank you for your answer. ",
    "DeeDeeG": "Hi all,\nI would be strongly for this, if only because of how much it improves documentation for [enabling/disabling] multiple plugins.\nMy experience with disabling plugins:\nI just tried using SVGO from the command-line for the first time today. (Well, I had used it before, but without supplying any arguments. The defaults are good.)\nI dug into the various options, and it was totally unclear how to disable ALL the plugins at once, so I could progressively enable only the ones I want and see what impact they have. I had to search the web for this info. I did find the info, but the formatting they used there lead me to try it with commas and spaces first (--disable={PLUGIN1, PLUGIN2, PLUGIN3}) which causes errors. I realized you need no spaces.\nLong story short, the example this PR adds in README.md, of how to enable or disable multiple plugins at once, is very valuable.\nI don't have as strong an opinion about brackets vs. no brackets, since I can live with the brackets, and in fact have just gotten through learning to use them, but I admit the \"without the brackets\" (--disable=PLUGIN1,PLUGIN2,PLUGIN3) format would probably seem more natural to a fair amount of people.\nIf @jmwebservices is really correct about this enabling control of multiple plugins on Windows, that would be a show-stopper for using this on Windows for me. I was thinking of doing some of this on Windows soon, now I know I might not be able to without this PR. Big thumbs up from me for this PR.. Hmm, so the README now adequately explains the bracket method:\n--disable=PLUGIN : Disable plugin by name, \"--disable={PLUGIN1,PLUGIN2}\" for multiple plugins\n  --enable=PLUGIN : Enable plugin by name, \"--enable={PLUGIN3,PLUGIN4}\" for multiple plugins\nHowever, I'd like to point out (hope this isn't off-topic) the --help message  from the command-line does NOT explain the bracket method:\n--disable=DISABLE : Disable plugin by name\n  --enable=ENABLE : Enable plugin by name\nI'd like to request the --help message be updated, else I'll open a PR for that if I can figure out how to do so.\nEDIT: I believe the command-line help strings can be updated here and here within the .title() parentheses. I would encourage doing that, whether in this PR or outside. (I would volunteer to do so if no-one decides to take it up.). @GreLI Thank you!. This issue might be fixed now that #1019 is merged.. ",
    "cyberalien": "Did more digging, found out that its different icon parsed before that icon that is causing some issues.\nShort test code:\n```\n\"use strict\";\nconst svgo = require('svgo');\nconst plugins = [\n    {\n        \"removeTitle\": true\n    },\n    {\n        \"removeDesc\": true\n    },\n    {\n        \"removeRasterImages\": true\n    },\n    {\n        \"convertShapeToPath\": true\n    },\n    {\n        \"mergePaths\": false\n    },\n    {\n        \"cleanupIDs\": {\n            \"remove\": true,\n            \"prefix\": \"simplesvg-id-\"\n        }\n    }\n];\nconst test1_bugged = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n    ' Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  \\n' +\n    '\\n' +\n    '\\n' +\n    '\\t.st0{fill:#010101;}\\n' +\n    '\\n' +\n    '\\n' +\n    '\\t\\n' +\n    '\\t\\n' +\n    '\\n' +\n    '\\n';\nconst test1_valid = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n    ' Generator: Adobe Illustrator 18.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  \\n' +\n    '\\n' +\n    '\\n' +\n    '\\n';\nconst test2 = '\\n' +\n    '        \\n' +\n    '';\n(new svgo({\n    plugins: plugins\n})).optimize(test1_bugged).then(result => {\n    return (new svgo({\n        plugins: plugins\n    })).optimize(test2);\n}).then(res => {\n    console.log(res);\n}).catch(err => {\n    console.log(err);\n});\n```\nThere are 3 icons: test1_bugged, test1_valid, test2\nIf test2 is parsed after test1_valid, output is this:\n{ data:\n   '<svg xmlns=\"http://www.w3.org/2000/svg\" baseProfile=\"full\" width=\"24\" height=\"24\"><path d=\"M4.934 4.934A9.969 9.969 0 0 0 2 12a9.969 9.969 0 0 0 2.934 7.066l1.404-1.404A7.976 7.976 0 0 1 4 12c0-2.215.892-4.216 2.338-5.662L4.934 4.934zm14.132 0l-1.404 1.404A7.976 7.976 0 0 1 20 12a7.976 7.976 0 0 1-2.338 5.662l1.404 1.404A9.969 9.969 0 0 0 22 12a9.969 9.969 0 0 0-2.934-7.066zM7.762 7.762a5.982 5.982 0 0 0 0 8.476l1.406-1.406A3.986 3.986 0 0 1 8 12c0-1.11.446-2.11 1.168-2.832L7.762 7.762zm8.476 0l-1.406 1.406A3.986 3.986 0 0 1 16 12c0 1.11-.446 2.11-1.168 2.832l1.406 1.406a5.982 5.982 0 0 0 0-8.476zM12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4z\"/></svg>',\n  info: { width: '24', height: '24' } }\nIf test2 is parsed after test1_bugged, output is this:\n{ data:\n   '<svg xmlns=\"http://www.w3.org/2000/svg\" baseProfile=\"full\" width=\"24\" height=\"24\"><path stroke-width=\".2\" d=\"M4.934 4.934A9.969 9.969 0 0 0 2 12a9.969 9.969 0 0 0 2.934 7.066l1.404-1.404A7.976 7.976 0 0 1 4 12c0-2.215.892-4.216 2.338-5.662L4.934 4.934zm14.132 0l-1.404 1.404A7.976 7.976 0 0 1 20 12a7.976 7.976 0 0 1-2.338 5.662l1.404 1.404A9.969 9.969 0 0 0 22 12a9.969 9.969 0 0 0-2.934-7.066zM7.762 7.762a5.982 5.982 0 0 0 0 8.476l1.406-1.406A3.986 3.986 0 0 1 8 12c0-1.11.446-2.11 1.168-2.832L7.762 7.762zm8.476 0l-1.406 1.406A3.986 3.986 0 0 1 16 12c0 1.11-.446 2.11-1.168 2.832l1.406 1.406a5.982 5.982 0 0 0 0-8.476zM12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4z\"/></svg>',\n  info: { width: '24', height: '24' } }\nDifference is in stroke-width=\".2\"\nSwap test1_bugged to test1_valid on line 58 to see difference:\n})).optimize(test1_bugged).then(result => {\nIts a clear SVGO bug. Parsing one icon should not affect parsing of next icon, but it does.\nSVGO version is 1.0.5. This code in plugins/removeUselessStrokeAndFill.js is causing bug:\nif (item.isElem(styleOrScript)) {\n        params.hasStyleOrScript = true;\n    }\nIt modifies params object. Problem is that object is reused for all icons and its value is not reset between parsing different icons.. Found it! Sorry for many comments.\nin lib/svgo/config.js in function preparePluginsArray if plugin is given by name, params object is not cloned.\nFix: replace\n```\n        // name\n        } else {\n        plugin = Object.assign({}, require('../../plugins/' + item));\n        plugin.name = item;\n\n    }\n\nwith\n        // name\n        } else {\n        plugin = Object.assign({}, require('../../plugins/' + item));\n        plugin.name = item;\n        if (plugin.params) {\n            plugin.params = Object.assign({}, plugin.params);\n        }\n\n    }\n\n. Please try your code with this icon:\n\n```\nIt has 2 paths. First has fill=\"none\", second doesn't have fill which defaults to fill=\"black\". After forcing merge it changes to 1 path with fill=\"none\".. Oh I see. I thought it was forcing merge when svgo refused to merge 2 similar shapes.. ",
    "aturingmachine": "Hey do you have any updates on this? I am getting the same outcome.. ",
    "dcc82": "I'm having the same issue. \nHere's a temporary fix: \nopen svgo.js, comment out line 48-50, if (info.path) { svgjs.path = info.path}\nIs it possible to check the info variable before calling info.path? If it's undefined, info.path may throw an error\n. ",
    "nwoltman": "This error occurs whenever svgo.optimize is called like this:\njs\nsvgo.optimize(svgData)\ninstead of like this:\njs\nsvgo.optimize(svgData, {path: svgFilepath}). ",
    "ladjzero": "Same issue +1\nTypeError: Cannot read property 'path' of undefined\n    at optimizeOnceCallback (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo.js:48:29)\n    at /home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo.js:70:9\n    at SAXParser.sax.onend (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo/svg2js.js:169:13)\n    at emit (/home/chenzhuo/repos/activityengine/node_modules/sax/lib/sax.js:624:35)\n    at end (/home/chenzhuo/repos/activityengine/node_modules/sax/lib/sax.js:667:5)\n    at SAXParser.write (/home/chenzhuo/repos/activityengine/node_modules/sax/lib/sax.js:975:14)\n    at SAXParser.close (/home/chenzhuo/repos/activityengine/node_modules/sax/lib/sax.js:157:38)\n    at module.exports (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo/svg2js.js:182:28)\n    at SVGO._optimizeOnce (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo.js:62:5)\n    at Promise (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo.js:55:14)\n    at new Promise (<anonymous>)\n    at SVGO.optimize (/home/chenzhuo/repos/activityengine/node_modules/svgo/lib/svgo.js:25:12)\n    at decl.value.walk.node (/home/chenzhuo/repos/activityengine/node_modules/postcss-svgo/dist/index.js:69:28)\n    at walk (/home/chenzhuo/repos/activityengine/node_modules/postcss-value-parser/lib/walk.js:7:22)\n    at ValueParser.walk (/home/chenzhuo/repos/activityengine/node_modules/postcss-value-parser/lib/index.js:18:5)\n    at minifyPromise (/home/chenzhuo/repos/activityengine/node_modules/postcss-svgo/dist/index.js:34:64)\n    at css.walkDecls.decl (/home/chenzhuo/repos/activityengine/node_modules/postcss-svgo/dist/index.js:109:35)\n    at /home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:151:28\n    at /home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:109:26\n    at AtRule.each (/home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:77:22)\n    at AtRule.walk (/home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:108:21)\n    at /home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:111:32\n    at Root.each (/home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:77:22)\n    at Root.walk (/home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:108:21)\n    at Root.walkDecls (/home/chenzhuo/repos/activityengine/node_modules/postcss/lib/container.es6:149:25)\n    at Promise (/home/chenzhuo/repos/activityengine/node_modules/postcss-svgo/dist/index.js:107:17)\n    at new Promise (<anonymous>)\n    at css (/home/chenzhuo/repos/activityengine/node_modules/postcss-svgo/dist/index.js:105:16)\n    at initializePlugin (/home/chenzhuo/repos/activityengine/node_modules/cssnano/dist/index.js:35:51)\n    at <anonymous>. ",
    "Agrumas": "Breaking build is a perfect choice to start a Monday :D Easiest workaround is just to specify exact version in package.json:\n\"svgo\": \"1.0.5\",. ",
    "httpete": "I tried the fix proposed by @Agrumas  but with \"svgo\": \"1.1.0\" - died same way.  Trying \"svgo\": \"1.0.5\", worked! . ",
    "sorenpa": "Thanks for the fast response. It actually helped me fix the issue.\nIn case someone else have similar problem, it was possible to solve it by simply disabling the inlineStyles plugin.\nSo the change i did was adding the following to the config:\n{\n          inlineStyles: false,\n      },. ",
    "X-Tender": "I made some additional checks. When I use the 0.7.2 Version it works and I only get the Message printed out. When I upgrade to at least 1.0.0 it behaves as described above.\nCan you tell me which version fo node you're using? I'm on 6.9.1 here. ",
    "SlimMarten": "@GreLI I am struggling with the same problem.. ",
    "evilebottnawi": "@GreLI Why it is removed by default? Looks it is not safe optimization. @tigt yes, sorry :disappointed: . @GreLI Maybe we can feature to switch on other minification, now a lot of people use another minification like cssnano, cssmin and etc, it is not god have two package for same purpose in your node_modules. ",
    "LeandroStanger": "https://www.flatpak.org/\n. ",
    "nikkwong": "Ok, got it, this api is like an enigma to figure out. For those who stumble upon this:\nvar _svgo = new svgo({\n    plugins: [{\n        inlineStyles: {\n            onlyMatchedOnce: false\n        }\n    }]\n}). ",
    "minimaluminium": "@nikkwong You're a hero!. ",
    "fr33z00": "@elrumordelaluz \nWell, I meant use svgo as a library in a browser.... ",
    "bkotzz": "@GreLI can you take a look when you get a chance please?. Thanks @GreLI. Any plans on an npm release soon?. ",
    "xPaw": "coa was switched to use chalk as well: https://github.com/veged/coa/pull/96\nThat means if this PR is merged, colors can be consistently disabled in svgo CLI by passing --no-color or setting FORCE_COLOR=0 env.. @GreLI Mind taking a look please?. ",
    "valkko": "Is there a way to only prefix IDs, but not classes? I have a case where the classes should stay as is, but IDs prefixed to avoid conflicts.\nSince the config option is named prefixIds you'd think it would only affect IDs in the first place.. ",
    "oraslaci": "Hey,\nThank you for your replies. I solved the problem with inkscape, by opening and saving the file. \nThe file clearly has problem, but my main concern is rather, that svgo breaks the rest of the files in the folder, leaving them empty.\nI think that should be adressed inside svgo.\nHave a good one,\nL\u00e1szl\u00f3.. ",
    "kumar303": "This bug is caused by the convertPathData plugin. Disabling it makes the glitch go away:\nsvgo open-star-dim-yellow.svg -o open-star-dim-yellow.min.svg --disable=convertPathData. ",
    "ChALkeR": "@kumar303  I have done some analysis of a similar problem in https://github.com/svg/svgo/issues/1081.\nFirst of all, disabling convertPathData is probably unneeded, --config='{\"plugins\":[{\"convertPathData\":{\"makeArcs\":false}}]}' might work instead.\nSecondly, does v0.6.1 work for you? If yes, then it's a regression, probably the same one from #1081.\nUpd: seems to be \"fixed\" by a hack from https://github.com/svg/svgo/issues/1081#issuecomment-466736961.. This is, in fact, a regression between v0.6.1 and v0.6.2/v0.6.3.\nv0.6.1 produces correct results:\nsvg\n<svg viewBox=\"0 0 50 30\">\n    <path d=\"M0 0h50v30H0z\"/>\n    <path fill=\"red\" d=\"M10 10a1.006 1.006 0 0 0-.534 1.86 1.345 1.345 0 0 1 .715.137A1.007 1.007 0 0 0 10 10\"/>\n    <path fill=\"#ff0\" d=\"M20 10a2.126 2.126 0 0 1-1.967.686 1.29 1.29 0 0 0 1.237 1.67A1.292 1.292 0 0 0 20 10\"/>\n    <path fill=\"#f0f\" d=\"M30 10a.73.73 0 1 0-.003 1.46A.73.73 0 0 0 30 10\"/>\n    <path fill=\"#0ff\" d=\"M40 10l-.142.002c2 2 2 3.184-4.206 3.184-.054 0-.108-.002-.16-.004a4.756 4.756 0 0 0-.274 1.598c0 1.088.364 2.09.974 2.892.224-.062.46-.096.704-.096a2.6 2.6 0 0 1 2.524 1.948c.19.024.384.034.58.034a4.76 4.76 0 0 0 3.098-1.136 2.59 2.59 0 0 1-3.006-2.552 2.584 2.584 0 0 1 4.67-1.522A4.778 4.778 0 0 0 40 10\"/>\n</svg>\nv0.6.2 (in https://github.com/svg/svgo/commit/1b0051ad1ca410f040b7bd6af7a6e5ec9c1370c1) breaks the third curve, producing the following result:\nsvg\n<svg viewBox=\"0 0 50 30\">\n    <path d=\"M0 0h50v30H0z\"/>\n    <path fill=\"red\" d=\"M10 10a1.006 1.006 0 0 0-.534 1.86 1.345 1.345 0 0 1 .715.137A1.007 1.007 0 0 0 10 10\"/>\n    <path fill=\"#ff0\" d=\"M20 10a2.126 2.126 0 0 1-1.967.686 1.29 1.29 0 0 0 1.237 1.67A1.292 1.292 0 0 0 20 10\"/>\n    <path fill=\"#f0f\" d=\"M30 10a.73.73 0 1 0 0 0\"/>\n    <path fill=\"#0ff\" d=\"M40 10l-.142.002c2 2 2 3.184-4.206 3.184-.054 0-.108-.002-.16-.004a4.756 4.756 0 0 0-.274 1.598c0 1.088.364 2.09.974 2.892.224-.062.46-.096.704-.096a2.6 2.6 0 0 1 2.524 1.948c.19.024.384.034.58.034a4.76 4.76 0 0 0 3.098-1.136 2.59 2.59 0 0 1-3.006-2.552 2.584 2.584 0 0 1 4.67-1.522A4.778 4.778 0 0 0 40 10\"/>\n</svg>\nv0.6.3 (in https://github.com/svg/svgo/commit/0f599b670da77de81eeacacd71dc335f9bdab1a8) breaks the remaining 3 curves (swapping some 0s with 1s):\nsvg\n<svg viewBox=\"0 0 50 30\">\n    <path d=\"M0 0h50v30H0z\"/>\n    <path fill=\"red\" d=\"M10 10a1.006 1.006 0 1 0-.534 1.86 1.345 1.345 0 0 1 .715.137A1.007 1.007 0 0 0 10 10\"/>\n    <path fill=\"#ff0\" d=\"M20 10a2.126 2.126 0 0 1-1.967.686 1.29 1.29 0 0 0 1.237 1.67A1.292 1.292 0 1 0 20 10\"/>\n    <path fill=\"#f0f\" d=\"M30 10a.73.73 0 1 0 0 0\"/>\n    <path fill=\"#0ff\" d=\"M40 10l-.142.002c2 2 2 3.184-4.206 3.184-.054 0-.108-.002-.16-.004a4.756 4.756 0 0 0-.274 1.598c0 1.088.364 2.09.974 2.892.224-.062.46-.096.704-.096 1.216 0 2.236.826 2.524 1.948.19.024.384.034.58.034a4.761 4.761 0 0 0 3.098-1.136 2.589 2.589 0 0 1-3.006-2.552 2.584 2.584 0 1 1 4.67-1.522A4.778 4.778 0 0 0 40 10\"/>\n</svg>. For M 0,0 C -0.405,0 -0.731,0.33 -0.731,0.729 -0.731,1.134 -0.405,1.46 0,1.46 0.402,1.46 0.728,1.134 0.728,0.729 0.728,0.33 0.402,0 0,0, the returned angles are:\njs\n[1.5666969669518132, 1.5752774941371457, 1.568056459652197, 1.5707955025384717, 1.5663198734556092]\nReplacing those with Math.PI / 2, which is very close:\njs\n[1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966]\nSolves the issue for the third curve. Perhaps something sign-related or otherwise caused by rounding is going wrong?\nCommenting out this line: https://github.com/svg/svgo/blob/ee065be5a88c85b976db601c13eb6e55650a7d68/plugins/convertPathData.js#L343 fixes the remaining 3 curves (and #1074).\nI understand that this is not the real fix, but this is an indication of what exactly is going wrong.. @himedlooff as a better workaround, just using --config='{\"plugins\":[{\"convertPathData\":{\"makeArcs\":false}}]} (or specifying equivalent option in the configuration file) would also fix the problem with less risks of introducing more potential issues. It would disable the curve-to-arc transform completely though.. ",
    "timbomckay": "AAAAHHHH. Awesome. Ok thanks. Sorry I wasn't entirely sure what multipass did, the simple terminology went right passed me apparently. haha.\nThanks for the quick reply @GreLI.. ",
    "grig0ry": "Use Git Bash on Windows.. ",
    "Roman52": "@grig0ry git bash works, thank you!. ",
    "JasonFang93": "oops... i got it. thanks!. ",
    "goyney": "This is not meant to do resource-intensive path merging. That is the reason why it is called force and disabled by default.\nTo do true path merging is a complex and computational expensive topic, so it can be done only in editor (for now).. Nah, it's basically taking all <path d=\"...\"/> elements and combining them into one, single path element by concatenating the data. In most cases, this is fine, but it can be spotty and inaccurate with complex or overlapping paths. That's where it gets resource heavy. It's probably not out of the realm of possibility, just not what this PR is adding.. ",
    "vkhv": "Now - r.\n25d3f017a178f34429135771342006ac26f1248e\n. Yes, just debug, fix - 25d3f017a178f34429135771342006ac26f1248e\n. ",
    "XhmikosR": "This seems redundant.. No, I meant it's unrelated to the other changes :). ",
    "notiv-nt": "Json.parse know about RegExp?. > parsing is transformed before being returned\nTransformed, not parsed\n. JSON.parse('{ \"d\": /^M0\\s0h\\d0v\\d0H0z$/i }')\nJSON.parse('{ \"d\": /^M0\\s0h\\d0v\\d0H0z$/i }', (k, v) => { /* ... */ })\nare equal: SyntaxError: Unexpected token / in JSON at position 7\nDo you really think, that parsing string that looks like regexp will be better instead of 3 lines of code?. "
}