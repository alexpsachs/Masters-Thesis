{
    "pwittchen": "Done.\n. Hello.\nCan you describe situation in which it executes twice? Does it execute twice all the time? What are steps to reproduce this problem?\nIt should be executed every time, when connectivity changes. For example:\n- when you connect to WiFi network\n- when you turn off WiFi and disconnect from WiFi network\n- when you connect to mobile network\n- when you disconnect from mobile network\n. I think, you are using this library in a wrong way. You are creating subscription, when user clicks (touches) the button and then starting observing connectivity. I guess in your case, you just need to check if you have an internet connection. You can do it without any library with the following method:\n``` java\npublic boolean isConnectedToWifiOrMobileNetwork() {\n  ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\nif (networkInfo != null) {\n    boolean isConnectedToWifiOrMobileNetwork \n    = networkInfo.getType() == ConnectivityManager.TYPE_WIFI \n    || networkInfo.getType() == ConnectivityManager.TYPE_MOBILE;\nreturn isConnectedToWifiOrMobileNetwork;\n\n}\n  return false;\n}\n```\nNevertheless, I'll check this issue.\n. This problem should be fixed in PR #4. Thanks for reporting that issue.\nFix will be available in the next release.\n. Done.\n. Done.\n. Thank you for reporting the issue.\nDoes it happen all the time? I think it may be related to bug or bad design of Android SDK. I've seen on StackOverflow that people have similar problems with WiFi scanning. \nRelated threads:\n- http://stackoverflow.com/questions/8717741/application-never-receives-rssi-changed-action\n- http://stackoverflow.com/questions/1206891/android-how-to-monitor-wifi-signal-strength\nI will check this out and try to fix it within library.\n. It looks that problem was caused by lack of WifiManager.SCAN_RESULTS_AVAILABLE_ACTION filter for BroadcastReceiver. Now it should work fine. Moreover, I've slightly updated sample app.\nFix will be available in the next release. If you want to verify it now, you can clone repository and check sample app.\n. @inigo-jimenez release of version 0.0.4 is available now on Maven Central.\nPlease, check download section.\n. Archives are uploaded to Maven Central Repository.\nNow we're waiting for Maven Sync.\n. Maven Sync is done.\nREADME.md is updated.\n. Done.\n. Thanks for reporting the issue. This library doesn't have these statuses, because it's simpler. I'll take a look on that and probably add mentioned statuses.\n. Final behavior of ReactiveNetwork should be like in description in the issue: https://github.com/pwittchen/NetworkEvents/issues/87\nWe also need to add method like enableInternetCheck() or something similar for users who want to activate this potential feature.\n. Done. It will be available in the next release.\n. You're welcome.\nYou can find more info about new feature here: https://github.com/pwittchen/ReactiveNetwork#enabling-internet-check.\nRelease of version 0.1.0 is on the way.\n. Version was bumped to 0.1.0 in #16.\n. Archives were uploaded to Maven Central Repository. Now, we're waiting for Maven Sync.\nAfter Maven Sync:\n- update version in README.md :heavy_check_mark:\n- create GitHub release :heavy_check_mark:\n. I've made some small changes. You can read about them in the latest release notes here: https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.1.0\nI've checked sample app from this repository (https://github.com/pwittchen/ReactiveNetwork/tree/master/app) a moment ago and it works fine. \nMoreover, in version 0.0.3 I've removed one of the BroadcastReceiver filter: WifiManager.WIFI_STATE_CHANGED_ACTION. Release notes for 0.0.3: https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.0.3.\nThis filter causes calling subscriber every time, when user turns WiFi on. Now, we have only ConnectivityManager.CONNECTIVITY_ACTION filter. It means, we will receive an event only when user will be connected to any WiFi network. Maybe this is your issue?\nPlease, let me know.\nYou can configure WiFi connection in your phone in the place, where you're testing it and then check subscriber again.\n. enableInternetCheck() method is required only in the case, when you want to check if given WiFi network is connected to the Internet.\nIs it working now in your app?\n. Great!\nThanks for reporting the issue and adding new comment.\nI think, we can close this issue for now.\nIf you encounter any troubles or doubts in the future, feel free to create another issue.\nAny kind of feedback is appreciated\nHappy coding,\nRegards,\nPiotr\n. Archives are uploaded to Maven Central. Now, we're waiting for Maven Sync. After Maven Sync README.md file will be updated and GitHub release will be created.\n. Done.\n. Thank you for reporting this issue. Current ConnectionStatus is emitted at subscription time in the following cases:\n- device is connected to WiFi network\n- device is connected to mobile network\nThe only situation, when ConnectionStatus is not emitted at subscription time is when device is offline (is not connected to any network).\nI've tested it a few seconds ago. If you find it useful, we can add offline status at subscription time as well.\n. I've added emission of OFFLINE status when user is not connected to any network. It will be available in the next release. If something will still work in a wrong way, please create another issue or reopen this issue.\n. Thank you for reporting that issue. This library is not designed to handle situations mentioned by you. UNKOWN status should be set in case if no status was set already. I think, it shouldn't occur in another situations. You can optionally test your case with OFFLINE status.\nI'm not sure how to handle your case with mobile data loss and also how to test it properly. I'm not sure if I can reproduce such situation e.g. in a unit test. Code snippet provided by you is quite \"hacky\" and it uses reflection. I would rather avoid that, because it makes apps slower and is possible source of bugs and Runtime Exceptions.\nIf you have any idea how to solve this problem in a right way or have any ideas how to test it, your comments (and comments of anyone) are welcome. \nI'll read more about this problem. After gathering more information, it will be easier to solve it.\n. I think, the right way to solve your problem could be usage of TelephonyManager and PhoneStateListener. It may be an idea for a new project, because this library could become to heavy if we throw everything in it.\n. As we discussed it in #282, this issue should be resolved within a separate project with different responsibilities. I have plans to create another library to address this issue, but I need to find a time for that. This issue can be closed for now.. Can you provide code, which caused this error? It will be much more easier to reproduce this bug and fix it. Without that, it's quite hard. \nIn your error, we can see message Are you missing a call to unregisterReceiver()?, but receiver is unregistered in unsubscribe() method. Probably something is messed with Context or threads used in RxJava subscription.\nWhere do you call unsubscribe() method? It should be called in onPause() method in your Activity. If you call it somewhere else or don't call it at all, this error may occur.\n. Thanks!\nI have a few more questions. Where do you call checkWifiConnection() method and closeConnection() method? You've written in the first post that these methods are not located in the Activity. How do you call these methods from your Activity? I need to know more details to reproduce this bug. It may be incorrect library usage. I'm asking all these questions to clarify this issue.\n. Great! I'm glad you found source of the problem and fixed it. :-)\n. Can you explain, what do you mean by \"won't work\"? Application crashed or it wasn't reacting on connectivity changes? Do you have any LogCat output, which can help to find source of the potential problem?\nIn ReactiveNetwork class, status attribute is static, because I wanted to have a single instance of ConnectivityStatus, which could be used to verify if status changed or not after receiving an event in BroadcastReceiver. The reason of that is the fact that I encountered situations in which status was emitted two times when single event occurred.\n. Thank you. This explanation is quite clear. I'll try to reproduce it. If your suggestion is right, it may be quick fix.\n. I was able to reproduce this bug. It's fixed in https://github.com/pwittchen/ReactiveNetwork/commit/f34a53c8f52256b24534b88d17cc0db0930dcfa8. I'm sorry that you had to wait so long for such simple change. Fortunately, I found a moment to take a look at this issue.\nThis fix will be available in the next release.\n. Solved in https://github.com/pwittchen/ReactiveNetwork/commit/e0bd7e8186eb74130bd771068ca7f7faf398e6c0.\n. Solved in https://github.com/pwittchen/ReactiveNetwork/commit/3564a59f68c013d120133d8e152d1fedcc9f6f16.\n. Thank you for your contribution! This feature is interesting and I think, we can add it to codebase. Nevertheless, I have some issues regarding this PR. Please, read my suggestions in code review. When you update the code and fix CI Build (it's simple issue with checkstyle), we can merge the changes.\nRegards\n. I've performed a little code refactoring and merged your PR.\n. Solved in https://github.com/pwittchen/ReactiveNetwork/commit/1a82547c39195980d6521669fda169b40a502e8f\n. Hi,\nThanks for your question! It's actually not related to this library, but to RxJava and Reactive Programming. I think you should use zip() operator from RxJava library in order to combine two or more Observables. This will allow you to fire API call when internet connection is available without breaking a chain. For calling a RESTful API you can use Retrofit library, which provides RxJava Observables for HTTP responses. You can combine Observable from ReactiveNetwork with Observable from Retrofit. When I find some time, I'll prepare an example of that solution. In the meantime, you can try to experiment with it by yourself.\nRegards,\nPiotr\n. @kdani41 @Rainer-Lang I was quite busy, so I haven't published it yet. Sorry for a long delay. I'm also working on a few updates in this project. I'll try to publish this sample ASAP and then notify you in the comments in this issue.\n. I've added simple examples with nested calling with OkHttp and Retrofit here:\nhttps://github.com/pwittchen/ReactiveNetwork#integration-with-other-libraries\nIf you're using other libraries, they can be integrated in the similar manner.. It's needed if we want to observe WiFi access points. For just observing connectivity it's actually not needed. We can think of managing this permission in a better way or extracting WiFi monitoring functionality to a separate library.\n. For now, you can use such solution to override this permission in your app: http://stackoverflow.com/questions/27962789/android-gradle-manifest-merger-override-uses-permission-attribute-coming-from\n. I know about permission model in Android 6, but I also want to keep compatibility with Android 4 and up for now, because some people still use it. Moreover, I think that handling permission requests shouldn't be part of the library.\nThanks for your question. Feel free to ask more, if you have any doubts. :)\n. After merging PR #67 to the master branch, this permission can be removed from the Manifest of the library. In release v. 0.4.0, this permission will be no longer needed.\n. Permission removed by PR #67.\n. Hi,\nI assumed that when you're connected to mobile network (mobile data transfer is activated), you already have an internet access. I don't know if it's possible that you have mobile data transfer activated and there's no internet access. Have you encountered such situation?\n. Ok, I'll take a look on that when I find some time.\n. @narendrakothamire @wrparrish Ok. If it's an issue I'll work on that. Thanks for your comments!\n. Sorry that you have to wait for a long time. This is actually my side project, so I cannot work on it full time. I'm working on that issue. I had some problems with obtaining deterministic results with network monitoring merged with Internet connectivity checking via zip() operator from RxJava.\nMoreover, I see the following scenario:\n1. device is connected to mobile or WiFi network\n2. given network has an Internet access\n3. user is still connected to the network, but Internet access is lost in the network and user is not notified because network monitoring is based on BroadcastReceivers\nWhat do you think about the following improvement:\n- remove enableInternetCheck() method because it does not fit your needs and sometimes does not work properly\n- remove WIFI_CONNECTED_HAS_INTERNET and  WIFI_CONNECTED_HAS_NO_INTERNET statuses\n- add a new method Observable<Boolean> observeInternet()\n- add another, more customizable new method Observable<Boolean> observeInternet(final int interval, final String host, final int port, final int timeout)\nThen observeConnectivity() will be used only for monitoring connectivity with the networks and observeInternet() will be used for monitoring connectivity with the Internet. The drawback of the new method is the fact that it will perform socket connection to a remote host, which will consume some data transfer and it will need to do it within a given interval (default can be 1 second). It will be less efficient than observeConnectivity() method, but you will be sure that the Internet is available. With that solution, you can choose, which Observable is more appropriate for your use cases.\nLater, in the next iteration, we can consider merging two mentioned Observables, because it's not that easy as I thought or I may be doing something wrong.\nPlease, let me know, what you think about that and we can add some improvements.\n. Maybe more appropriate method names would be as follows:\n- Observable<ConnectivityStatus> observeNetworkConnectivity() (instead of observeConnectivity())\n- Observable<Boolean> observeInternetConnectivity() (new method)\nThen, names would be explicit and meaningful.\n. Ok. I'm planning to add such improvements in the release of v. 0.3.0 \u27a1\ufe0f #53.\nYou'll still be able to use WIFI_CONNECTED and MOBILE_CONNECTED status.\nAs far as I see WIFI_CONNECTED_HAS_INTERNET is not checking real Internet connection what has reported some time ago in one of the issues in my GitHub projects. That's why I'm going to remove this status.\n. Changes are now available on internet-check-fix branch and can be tested there. When CI build will pass and I will test it, then it'll be merged to the master branch. I'll appreciate any suggestions, comments and code reviews in this Pull Request.\n. Updates are merged to the master branch and documentation in the README.md file is updated. New features will be available in release 0.3.0.\n. Hi. I needed it to implement one of the library functionalities. To be honest, right now I don't remember, which one. Probably it's related to observing WiFi access points. I'll investigate it later and give you more concrete answer.\n. Maybe it'll be good idea to extract observing WiFi access points functionality to a separate library, because issue #50 is similar to this one. It should reduce number of required permissions.\n. After merging PR #67 to the master branch, this permission can be removed from the Manifest of the library. In release v. 0.4.0, this permission will be no longer needed.\n. Permission removed by PR #67.\n. It's related to PR #55.\n. Done in https://github.com/pwittchen/ReactiveNetwork/commit/2dc92c286f8cd5a5b554399778bc1b1589777c70.\n. Done.\n. New library was already created: https://github.com/pwittchen/ReactiveWiFi\nIt needs to be uploaded to Maven Central Repository.\nIn v. 0.4.0 probably the following permissions can be removed from ReactiveNetwork:\n- android.permission.ACCESS_WIFI_STATE (needs verification)\n- android.permission.CHANGE_WIFI_STATE (is used by startScan() method from WifiManager)\n- android.permission.ACCESS_COARSE_LOCATION (is used by getScanResults() method from WifiManager)\n. Thanks for creating that issue. I didn't know about that. I'll take a closer look at that update in Android N and write a more detailed answer later when I find some time in the nearest days.\n. I quickly browsed docs and I can give you a short answer. As far as I see in the documentation, Google Developers extended ConnectivityManager and added some new listeners, what you can read here: https://developer.android.com/reference/android/net/ConnectivityManager.html. I think, we can create a strategy with Broadcast for \"pre-N\" devices (existing solution) and a new strategy for \"N and higher\" devices. We'll need to code new implementation of the new strategy, but I think library API could stay the same.\nYou asked about JobScheduler. I'm not sure if it should be used for checking connectivity. I think it should be used for processing queues of the jobs or operations to be executed. When jobs are done, a scheduler is no longer needed. I don't have that much experience with JobScheduler, so I may be wrong. Moreover, after a quick look at the documentation, I think connectivity monitoring on Android N can be implemented without JobScheduler.\n. I've added this issue to the Roadmap. The plan is to implement it for release 0.5.0. I think, 0.3.0 should be released in the nearest days and 0.4.0 should be released shortly after the previous version. I just need to find some time for this.\n. Yeah, I was thinking about NetworkCallback as it's part of new ConnectivityManager. I think new strategy can be implemented for Android L (API 21) and higher because a new implementation is available there. Pull Requests and new issues are always welcome :). I just need to release latest updates, which I have in mind and then this issue can be resolved (after the release of 0.4.0).\nSide note: additional code snippet with usage of NetworkCallback: http://www.programcreek.com/java-api-examples/index.php?api=android.net.Network\nThere's a new branch created for this task named 'issue-62' from 'develop' branch.\n. Done. Right now, it's in 'develop' branch. Before next release 'develop' branch is going to be merged into 'master' branch and it will be available.\n. Branch 'develop' was merged into 'master' branch. An update will be available in the release of v. 0.5.0.\n. Done.\n. I remember about that. I just need to find some time for this. Recently, I've bumped library version and added new updates like support for Android N and better network monitoring, which are crucial enhancements in this project. Providing this example will be next on my list. :)\n. I've added a simple example here: https://github.com/pwittchen/ReactiveNetwork#integration-with-retrofit.\nIt's valid for RxJava2.x version.. Hi,\nFirst of all, thank you for asking the question. \nI think, in this case, we should avoid Singleton. It's not only my opinion. Here's the quote, which explains this well:\n\nWhat is so bad about Singleton?\nParaphrased from Brian Button:\n1. They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a code smell.\n2. They violate the single responsibility principle: by virtue of the fact that they control their own creation and lifecycle.\n3. They inherently cause code to be tightly coupled. This makes faking them out under test rather difficult in many cases.\n4. They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.\n\nSource: http://stackoverflow.com/a/138012/1150795\nI wouldn't avoid Singletons at all. There may be cases when they're useful, but I think, we shouldn't use them too much and try to avoid this pattern when possible.\nIn the case of an Android application, you have only one instance of Application class, which can be Singleton, so you can create a new object of ReactiveNetwork or anything else there to be sure that there's only one instance of this class. It may be useful when you are using instance this class in a different Activities and you don't want to create too many objects. It's better idea and more flexible solution than forcing library class to be a Singleton. If we have too many Singletons, the application will consume a lot of memory and we want to avoid that. Especially when an app is running on a mobile device, which has limited resources and battery life. Moreover, we are reducing app testability.\n. Yeah. In some cases, it may be good option, but I'd rather leave classical constructor without any singleton here. If you want or need to have a static factory method, you can optionally create additional wrapper class (facade) and create a static factory method for this library there.\n. Creating additional static methods for creating Observables could be a good idea. It's definitely better than making the whole class a Singleton.\n. Static methods are added in the similar manner like in RxJava library. They'll be available in the next release.\n. Done in https://github.com/pwittchen/ReactiveNetwork/commit/5cdf98de13625d8e392acd5d1cd6ad9e6371c3c2.\n. Hi,\nThanks for reporting that issue. I haven't taken into consideration ethernet connection because I focused only on mobile devices. Your idea with monitoring state is good. We can improve existing solution and refactor  code to make it more flexible, so users can monitor network state and type separately if they want to. I will take a closer look on that and if it will be possible, I'll improve the code in way, which would be useful also in your use case.\nRegards,\nPiotr\n. I've added support for all network types in PR #73. Now it should work with Ethernet connection and actually any connection type. Unfortunately, this update will break library API a little bit, but this change is a real improvement for this project. @orbitbot if you have some time, you can verify code and test it on a feature branch to check is everything is ok for you. If there will be any issue, I can fix it on a feature branch. I'm gonna merge it to the master branch soon. \n. It was merged to 'develop' branch. Now I need to perform other tasks on 'develop' branch. Before release, 'develop' will be merged to the 'master' branch.\n. Branch 'develop' was merged into 'master' branch. An Update will be available in the release of v. 0.5.0.\n. I'm closing this PR. I'll create another one to 'develop' branch, which will be merged to 'master' branch later.\n. Done.\n. I know about RC release of RxJava 2.0.0, but I haven't taken a look on that and its release notes. I'll check it out and write more detailed information about the future upgrade.\n. Resources, which may be useful during library migration to RxJava 2.0:\n- https://github.com/ReactiveX/RxJava/releases/tag/v2.0.0-RC1\n- https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0\n- https://github.com/akarnokd/RxJava2Interop\n- https://github.com/amitshekhariitbhu/RxJava2-Android-Samples\n- https://github.com/ReactiveX/RxAndroid/releases/tag/2.0.0-RC1\n- https://medium.freecodecamp.com/migrating-from-rxjava1-to-rxjava2-5dac0a94b4aa#.juj9ywgfa\n- https://medium.com/@sasa_sekulic/quick-and-easy-guide-to-retrofit-2-0-setup-or-migration-with-rxjava-ab7a11bc17df#.3yg62gne0\nI think, we can work on migration on a separate git branch, but new release of the library, when RxJava will be officially released and will be no longer RC.\n. I've created branch RxJava2.x. I'll be working on this branch in order to prepare the library for RxJava 2.x.\n. We need to upgrade RxAndroid at the same time as well: https://github.com/ReactiveX/RxAndroid/releases/tag/2.0.0-RC1.\n. As far as I see, it won't be that easy to rewrite library code to RxJava2. They removed and renamed a lot of methods and classes in the public API, so I need to dig deep into code and documentation, to migrate library correctly. I started migration locally today, but it's not going as smoothly as I expected, so it may take some time. It also needs to be tested afterwards.\n. Hello again everyone,\nI migrated library code and sample apps to RxJava 2.0.0-RC1 and RxAndroid 2.0.0-RC1.\nCurrently, this is experimental code as both RxJava and RxAndroid are Release Candidates.\nIf you want to test it or check it out, see RxJava2.x branch in this repository.\nCommit related to mentioned migration is linked above this message.\nRegards,\nPiotr\n. Hi @tushar-acharya, \nThanks for the comment. I wrote a response in your PR.. It's done. ReactiveNetwork with support for RxJava2.x will be available in the next release as a separate artifact reactivenetwork-rx2. Now it's available on RxJava2.x branch.. Done in https://github.com/pwittchen/ReactiveNetwork/commit/ea9c875c3d0bc195bb768b0133197c8ccdd9cedc\n. Hi, @jackmalpo. I'm planning, to do it soon (hopefully this month) right after resolving two bugs/improvements waiting in \"to do\" list (this milestone: https://github.com/pwittchen/ReactiveNetwork/milestone/7).. Hi,\nThanks for the comment. I wrote the response in your PR.. Separate artifact for RxJava2.x will be available in the next release.. For now solved in #99 and https://github.com/pwittchen/ReactiveNetwork/commit/47fa753002737c74fa574a6ff4e2cc8fdff10ac5.\n. Actually, this problem is related to Activity and Fragment lifecycle. When Activity or Fragment are created or resumed, the subscription is usually started and then you'll get a notification. If you don't want to be notified every time when Activity or Fragment is resumed I see two solutions for now:\n- Save information about connectivity somewhere (e.g. to SharedPreferences), update it and notify the user whenever it changes. You can use my another project called prefser, which allows monitoring changes in SharedPreferences with RxJava 1.x. Then you can start Internet subscription even in a Service.\n- Start Internet subscription in a Service and pass the event to the Fragment or Activity whenever connection state changes. Service is independent of Activity and Fragment lifecycle, so you don't have to care about them in this solution. You can pass this data in many ways - e.g. via Event Bus like otto or implement RxBus suggested by otto developers (I would choose this option) or in a different way.\nRegards,\nPiotr\n. Hi,\nThanks for reporting this issue.\nStackTrace says that Receiver not registered. Actually, the Receiver should be registered when Observable is subscribed and unregistered when Observable is unsubscribed in UI thread. It may be a concurrency issue. How do you unsubscribe your Observable? I think the safest method is to do it in the following way:\njava\nif (subscription != null && !subscription.isUnsubscribed()) {\n  subscription.unsubscribe();\n}\nRemember, that subscription can be null and we need to check it. Moreover, we need to check if a subscription wasn't already unsubscribed.\nRegards,\nPiotr\n. There were bigger changes, so probably we'll release 0.6.0 instead of 0.5.3.\n. Hi, @Kisty. Thanks for your PR. It's a good idea to check Internet connectivity immediately. I'll test it as soon as I can. I'm quite busy now, so I'll take a closer look on that in the middle of the next week.\n. The code is generally fine, but I had a few issues. :)\n. Thanks for updates. They look fine. I'll check it soon. If there won't be any problems, it'll be merged.\nYou asked about tests. Unit tests are always a good idea and they're more than welcome. In Android apps, unit testing is a bit tricky and harder than in regular Java app. You can take a look on existing (instrumentation) unit tests. New tests can be created in a similar way. To execute them, we need connected device or emulator. It's one of the available testing approaches on Android.\n. Thanks for the updates. I've tested the code and it works fine.\nCan you squash your commits into one? You can use this website: http://rebaseandsqua.sh/.\nAfter the squash, I'm eager to merge. :)\n. It's fine now. I have some time today, so I'm merging it. Thanks @Kisty for your effort!\n. I'm planning to make immediate internet check introduced in this PR as default in PR #95 with a few other code cleanups. It will simplify library and we won't need an additional method for that. :-)\n. It can be a good idea. Nevertheless, in this case, we are constantly checking this socket connection in a given interval, so I think it's better to leave it open while the subscription is active. Socket connection can be closed while unsubscribing the Observable. Then, it would be the right improvement.\n. I need to investigate or debug it to be sure about exact behavior. After an investigation, we can apply correct improvement. E.g. closing socket on unsubscribe or add finally block for doing that.\n. Thanks for creating this issue. I'll take a look on that. Any ideas for improvements are welcome.\n. @akarnokd Thanks for the information! Right now, this library is not using Observable.fromEmmiter, so it's good to know to avoid using it in the future.. Due to the last comments, I'm closing this issue. I created a new one for possible refactoring.. Hi,\nThanks for the comment. I wrote the response in your PR.. Done.\n. It was partially done. Further improvements will be done in the next PRs.\n. Thanks for reporting this issue! I'll take a look on that. Moreover, PR with this improvement is also welcome.\nI think, this functionality should be configurable and disabled by default as this project is a library.\n. I think, in this case, there is no need for additional strategy. Strategies are for different Android versions because, in different OS versions, network monitoring should be implemented in a different way. There should be a new library setting.\nI think, there should be a new method like:\njava\nObservable<Connectivity> observeNetworkConnectivity(Context context, boolean isActiveInDozeMode)\nand\njava\nObservable<Connectivity> observeNetworkConnectivity(Context context, NetworkObservingStrategy strategy, boolean isActiveInDozeMode)\nThe first method should use the second one.\nIf the user would like to, he or she can activate or explicitly deactivate network monitoring in doze mode.\nMoreover, I see ACTION_DEVICE_IDLE_MODE_CHANGED is available from API 23, so it can be implemented only in LollipopNetworkStrategy, because it won't work in PreLollipopNetworkStrategy anyway.\n. Now, I understand your point better. Is it possible to trigger connectivity change in idle mode?\nProposal with the additional receiver will trigger a change when device idle mode will change. This behavior is independent of connectivity change.\n. I googled more about this issue. I'm not sure if it's possible to trigger network change in a doze (idle) mode and it may be an Android bug or intended behavior. I've found the following thread on StackOverflow: http://stackoverflow.com/a/34380449/1150795.\n. That sounds more reasonable if we know for sure that network call cannot be done in Doze mode. In such case, the additional broadcast receiver makes sense. Nevertheless, I would create an additional setting for that in the case someone doesn't care about Doze mode. Such feature would be useful for apps using background services and should be configurable.\n. Hi,\nIt should be already fixed for the latest Android version.\nRegards\n03.11.2017 10:53 PM \"Alexander Perfilyev\" notifications@github.com\nnapisa\u0142(a):\n\n@pwittchen https://github.com/pwittchen so it seems there is another\none broadcast being sent about light idle mode android.os.PowerManager#\nACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED. Can I submit a PR to fix this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/115#issuecomment-341836398,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF0kSP9ZVTQfswLX9H4wH7wZvtnFCks5sy4svgaJpZM4Kf-h6\n.\n. Thanks for reporting this. I'll have a look on that. I'm also open for PRs related with this issue.. Thank you for reporting this issue with such detailed description. Internet Walled Garden is an interesting use case and I haven't taken it into consideration. \n\nPR with improvements is welcome of course. \nYou can also add a few unit tests as you mentioned. ReactiveNetwork now uses Robolectric for unit testing, so creating new tests would be more convenient than before. You can also find exemplary unit tests in this repository.\nProbably we also need to rename SocketErrorHandler and its method to something more general because your new strategy is not using a socket, but it could have error handling functionality. I've added separate issue for that in #118.\nRegards,\nPiotr\n. Bug fixed and will be available in the next release both RxJava1.x and RxJava2.x version.\nPS. Better late than never ;-).. Thank you for this PR! I'll review and test it as soon as I can.\n. @aperfilyev Can you squash your commits into one commit? You can use this website: http://rebaseandsqua.sh/. \n@Kisty codecov.io fails the PR because of decreased code coverage. Decreasing code coverage by 4% is not a big deal here and we can increase it later. I'm gonna add more \"liberal\" configuration for codecov.io, so it won't fail the PR if the drop of code coverage was very small.\n. After looking at the code and this PR, I think that creating a new strategy like MarshmallowNetworkObservingStrategy would be a good idea in the case of Doze mode. I haven't noticed that during the discussion in issue #115 and I wasn't aware of the fact that this feature is available since Android M. Nevertheless when you squash your commits, I can merge it and we can refactor it later quite easily, so finally we'll have 3 strategies for network monitoring.\n. Done.. Done.. Thanks for reporting this issue. It may be related to RxJava update because I bumped it from 1.1.9 to 1.2.1 in version 0.6.0 of this library. These warnings are related to io.reactivex.functions.Function and io.reactivex.Observable, which are elements of RxJava library.\n. Are you using the same version of RxJava dependency as the ReactiveNetwork library (1.2.1) in your main project?\n. I've noticed that here: https://github.com/requery/requery/issues/293 they have the same problem and they're using the same version of RxJava, so I guess, for now, the solution will be to configure -dontwarn statements for ProGuard on the library level. A quick fix is ProGuard configuration on the application level. I don't know if there's any better solution out there right now.\n. I've tried to configure ProGuard, but it threw errors during compilation of sample Kotlin app:\n```\n/home/piotr/Development/android/projects/private/ReactiveNetwork/app-kotlin/src/main/kotlin/com/github/pwittchen/reactivenetwork/kotlinapp/MainActivity.kt\nError:(48, 36) Unresolved reference: state\nError:(49, 35) Unresolved reference: name\nError:Execution failed for task ':app-kotlin:compileDebugKotlin'.\n\nCompilation error. See log for more details\n```\n\nI'm not an expert with using ProGuard tool, so if anyone knows, how to configure it right, to avoid warnings and compilation errors in this case, please, let me know.\nHere is a configuration I tried to use:\n-dontwarn io.reactivex.functions.Function.**\n-dontwarn com.github.pwittchen.reactivenetwork.**\n-keep class com.github.pwittchen.reactivenetwork.library.** { *; }\n-keepclassmembers class com.github.pwittchen.reactivenetwork.library.** {\n   public *;\n}\nI also set minifyEnabled option for android for the release build in build.gradle file\nMaybe I configured it in wrong way or I missed something.. Okay. Done. I've added section ProGuard configuration in README.md and updated ProGuard and Gradle configuration for the sample apps to verify it on CI. \nUnfortunately, library users need to update their ProGuard configuration manually according to provided suggestions because it wasn't working correctly when I tried to bundle it in the library project.. Thanks!\n. I wanted to add @Spy and @Mock annotations instead of manually calling mock(...) and spy(...) methods. You can take a look at PR.\n. @Kisty I've somehow missed feature with @Rule annotation. It's added in PR #131. I think it's a better approach than manually calling MockitoAnnotations.initMocks(this) method.\nThanks!\n. It's being done within #80. Currently, experimental version of the library with RxJava is available on RxJava2.x branch and you can play with it if you want to. I'm going to release separate artifact with RxJava 2 (issue #84).\nPlease note, I'm not developing this project full-time. It's my side-project and I'm developing it in my free time. That's why sometimes I'm not able to publish an update every day or every week. Nevertheless, I'm trying to do my best to keep it up to date :).\n. Thanks for pointing this out!\n. We need to add unit tests for concrete API versions via @Config annotation to avoid regression of this bug in the future and for better testing of the strategies.\nReference: http://stackoverflow.com/questions/20541630/does-robolectric-support-api-level\n. Fixed! :star2: \n. I don't want to include jack or retrolamba in the library. Developers can make their own choice. I just want to upgrade sample app. :-)\nI don't know the current state of the retrolambda, but I had some problems with it some time ago. E.g. after changing code including retrolambda I needed to perform clean before the application build because I was receiving runtime exceptions and my apps were crashing. In addition, Jack is official Google recommendation.. I tried to make it work, but it does not work out of the box and it's not usable for now. I'm closing this issue and we can get back to this topic when Jack will be stable.. Something is wrong with Travis and it cannot work with newer Gradle version. I'm closing it now and sticking to old build configuration. We can fix it incrementally in the future.. Thanks for the suggestion, but I'd like to keep this information inside Git repository and keep tracking of changes. Moreover, I don't think that this process will change a lot. I just want to have it documented somewhere (not only in my head ;)). Maybe it will change if we manage to automate it in few parts or move this process to CI.. Done.. Done.. Thanks and Happy New Year to you too! :tada: . Hi,\nThanks for creating that issue! To be honest, I already thought about that. I wondered that it may be a good idea for a separate library. Airplane mode is not related to networking issues and user needs to enable it explicitly. Moreover, it's possible to connect to WiFi network when airplane mode is on.\nRegards,\nPiotr. When we have a separate Observable or Flowable, we can later combine it with existing Observables responsible for observing network or Internet connection (e.g. with concat(...) operator) in the concrete solution, so we'll be able to monitor both airplane mode and network connectivity. That's the approach, which leverages the power of RxJava and its basic concept of composition of streams.. I see, the only thing, which is missing in your case is monitoring of airplane mode and combining it with existing Observables. Remaining functionality is already available and ready to use.. @consp1racy @Kisty \nI've made a separate library for observing Airplane Mode with RxJava2. I think it resolves this feature request.\nLink to this project: https://github.com/pwittchen/ReactiveAirplaneMode\nRegards,\nPiotr. Hi,\nThanks for reporting this issue.\nRight now it's not possible, but we can add such feature. It could be useful.\nRegards,\nPiotr. I took a look at NetworkInfo class and current implementation of Connectivity class. I think, I'd rather create additional methods like getSubtype(), getSubtypeName() etc. in  Connectivity class, which will wrap NetworkInfo's methods instead of exposing getNetworkInfo(context) method. Android SDK allows NetworkInfo to be null and I don't want to return null values in ReactiveNetwork library. Unfortunately, we cannot use Java 8 and Optional right now on Android and I don't want to add Guava dependency just for that. To sum up, wrapping these getters and assigning default initial values to them will be the safest option for now.. Change is pushed to branch issue-151. I'll leave this PR for a while and browse it later once again before the merge. Maybe someone will perform a code review, so I'll be sure that everything is fine. After that, this change will be merged into the master branch.. Thanks for your review @Kisty!. Changes are merged to the master branch. They'll be available in the next release.. Thanks! Fixed.. Only Robolectric wasn't updated due to the problems with running tests and generating coverage report on Travis CI. On my local machine it works fine with the newest version.. Tkanks for reporting that issue. I'll investigate that. I suppose we cannot\nfilter the network type if we want to detect the state when device is\ndisconnected, because in that case, type probably will be always null. I\nmean, when we're offline there's no network type to read.. I took a quick look at the code. We can try to keep information about the last network device was connected to and then pass it to Connectivity object. This will allow obtaining the desired result.. You're right. Android SDK works in such way and behavior with filtering Observable mentioned by you may be confusing. It can be fixed within the library code. I have some sort of idea how to do that and I will notify you about the updates in this issue.. @wujianv5 Can you provide details of your device and Android version? I've performed a test on Nexus 6 with Android 7.0 and it works fine. I mean, bug reported by you does not occur. When I apply filter: ConnectivityPredicate.hasType(ConnectivityManager.TYPE_WIFI), connectivity.getTypeName() is never null. It does not matter if it's in CONNECTED or DISCONNECTED state. It returns WIFI all the time.. If the solution provided by @IonutNegru87 works, we can add this type (unknown), to the list of initial types by default inside ConnectivityPredicate.hasType(...) method. This should fix problems for all types of connections in the described situation because when we are disconnected from the network, the type is unknown. It's correct behavior but may be misleading in the case of reactive programming when we don't operate on the state, but on the stream.. I've created an initial fix in PR #186. Now, it's tested only via unit tests. I'll perform a few manual tests before a merge. You can also test it on a feature branch on your own if you would like to. Any feedback is welcome. This PR is for RxJava2.x branch, but we can add it to RxJava1.x branch as well (e.g. via git cherry-pick).. Fix will be available in the next release.. Hi @tushar-acharya. Thanks for creating this PR. I'll review it as soon as I can.\nFor sure, I want to keep compatibility with RxJava1.x, so I'll create a separate branch RxJava2.x for that changes and RxJava2.x version is going to be released as a separate artifact. When the branch will be created, I'll notify you, so you can change target branch from master to RxJava2.x. I've performed code review. Please, take a look at my comments & prepare updates.. I've created RxJava2.x branch from the master branch. Please change target branch in this PR from master branch to RxJava2.x branch.. I'm gonna take care of that this week.. Changes are merged. I performed pre-release preparations. I'm gonna release new version soon (probably on Monday or on Tuesday). I just need to go through my checklist to ensure that everything is fine.. Done!. According to the current RxJava2 API, there's no such method. It can be done for Flowable type. For now, we're using Observable. We may consider switching from Observable to Flowable if there will be a concrete reason behind that.. Hi @dilongl. Thanks for your PR! Can you describe your changes and write more about them? Are they related to new RxJava2 API or something else?\nedit: Ok, I see RxJava2 API is updated.\nhttps://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0#functions. Merged. This fix will be available in the next release.. Thanks for reporting this issue. I'm going to merge #168 soon if there won't be any issues with that.. @nksaroj Currently, by design library creates an observable, which starts with the initial connectivity state - connected or disconnected depending on the state of the device. It's done in all network observing strategies. In most of the apps, it's useful to know, if we're connected or not when activity or service starts. Moreover, users may see the false result if we eliminate this functionality in the following scenario (when subscription/disposable is in the activity):\n\nUser starts the app\nConnectivity changes\nApp goes to the background\nConnectivity changes\nApp goes to the foreground\nUser sees wrong information about connectivity because it keeps information about last connectivity state marked in the UI and it wasn't updated in onResume()\n\nOf course, we can customize it in the future if there's such need.. I checked RxJava documentation. You can also skip first, default item, with skip operator from RxJava. With skip(1), you should achieve your goal and the app will be notified about connectivity change only, when it really changes without the initial connectivity value.. Hi,\nThanks for reporting this issue. Can you provide exact steps to reproduce that problem?. It looks like the app is switching from one type of the connection (wifi) to another (mobile). Maybe this situation happens in short period of time during such switch. I'll take a look on that, but it may be an issue, which is not exactly related to the library itself, but the system behavior.. @Bombo @kmalmur @waniolka Can you provide any concrete steps, details or conditions to reproduce this bug? I'm using Motorola Nexus 6 with clean Android 7.1.1 and I cannot reproduce it, so I cannot figure out the source of that bug. Now it looks like it's device specific or related to the concrete Android OS version.. This issue was resolved in #276. \nReferences:\n- comment: https://github.com/pwittchen/ReactiveNetwork/issues/276#issuecomment-396147241\n- commit in the documentation: https://github.com/pwittchen/ReactiveNetwork/commit/76ab2b23210207d83250da5d8fd0cd6e275e3f08\nIn case of any further problems, you re-open this issue or create a new one.. Hi,\nThanks for reporting that issue.\nHave you disposed subscription in onPause() method in your activity? When\nyou missed it, such problem may occur.\n08.05.2017 11:44 AM \"CentForever\" notifications@github.com napisa\u0142(a):\n\nE/ActivityThread: Activity has leaked IntentReceiver com.github.pwittchen.\nreactivenetwork.library.rx2.network.observing.strategy.\nMarshmallowNetworkObservingStrategy$2@d5e8688 that was originally\nregistered here. Are you missing a call to unregisterReceiver()?\nandroid.app.IntentReceiverLeaked: Activity com.xdja.xypolice.ui.DotToDotActivty\nhas leaked IntentReceiver com.github.pwittchen.\nreactivenetwork.library.rx2.network.observing.strategy.\nMarshmallowNetworkObservingStrategy$2@d5e8688 that was originally\nregistered here. Are you missing a call to unregisterReceiver()?\nat android.app.LoadedApk$ReceiverDispatcher.(LoadedApk.java:999)\nat android.app.LoadedApk.getReceiverDispatcher(LoadedApk.java:795)\nat android.app.ContextImpl.registerReceiverInternal(ContextImpl.java:1329)\nat android.app.ContextImpl.registerReceiver(ContextImpl.java:1309)\nat android.app.ContextImpl.registerReceiver(ContextImpl.java:1303)\nat android.content.ContextWrapper.registerReceiver(\nContextWrapper.java:554)\nat com.github.pwittchen.reactivenetwork.library.rx2.\nnetwork.observing.strategy.MarshmallowNetworkObservingStr\nategy.registerIdleReceiver(MarshmallowNetworkObservingStrategy.java:81)\nat com.github.pwittchen.reactivenetwork.library.rx2.\nnetwork.observing.strategy.MarshmallowNetworkObservingStrategy.\nobserveNetworkConnectivity(MarshmallowNetworkObservingStrategy.java:53)\nat com.github.pwittchen.reactivenetwork.library.rx2.ReactiveNetwork.\nobserveNetworkConnectivity(ReactiveNetwork.java:95)\nat com.github.pwittchen.reactivenetwork.library.rx2.ReactiveNetwork.\nobserveNetworkConnectivity(ReactiveNetwork.java:76)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/172, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF9HMvgp9XXMzJJO4F29b6Tl-8gsIks5r3uQIgaJpZM4NTt6T\n.\n. Please let me know if that suggestion helped you. If not, please provide steps to reproduce this problem and your code snippet, so I could verify this issue.. @Bhavdip probably you're right. That's what I wrote in my first reply to this issue.. There was no response for a longer time, so I assume it's incorrect library usage. For further issues, please re-open this one or create a new one.. Hi,\n\nThanks for reporting this issue. I'm away from home without a laptop right\nnow and I cannot check it immediately. I'm replying from my phone. I'm\naware of this problem and it should be handled by the library gracefully as\nfar as I know. I'll take a look on details later.\n17.05.2017 12:58 PM \"Alexey\" notifications@github.com napisa\u0142(a):\n\nLook at\nprivate static NetworkInfo getNetworkInfo(final Context context) {\n    final String service = Context.CONNECTIVITY_SERVICE;\n    final ConnectivityManager manager = (ConnectivityManager) context.getSystemService(service);\n    return manager.getActiveNetworkInfo();\n  }\nfrom Connectivity class\ngetActiveNetworkInfo() can return null, so this code will crash with\nNullPointerException\nWhat do you think about this?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/173, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF88wpJpHXKIz6ReGDy1uPWLKs035ks5r6tLDgaJpZM4Ndsy0\n.\n. @lion4ik Take a look at this line:\nhttps://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/Connectivity.java#L45\n\nWhole method looks like that:\njava\n  public static Connectivity create(Context context) {\n    Preconditions.checkNotNull(context, \"context == null\");\n    final NetworkInfo networkInfo = getNetworkInfo(context);\n    return (networkInfo == null) ? create() : create(networkInfo);\n  }\nWhen we're using NetworkInfo class from Android SDK inside Connectivity class from the library, NullPointerException will not occur, because the library code and factory methods are aware of that. \nDevelopers simply should not pass null Context to the Connectivity object and everything should be fine. Moreover, library notifies the user about the wrong argument with an appropriate exception.\nIn addition, method quoted by you is private and not exposed in the library API.\n. It's related to different thing than this issue, but we can add it.\n22.05.2017 3:57 PM \"Timothy Kist\" notifications@github.com napisa\u0142(a):\n\nOK, so perhaps add a @NonNull annotation to the\nConnectivity#create(Context) method?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/173#issuecomment-303107524,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF2_fdnFWmzsvuxFyVSk1i337mPyvks5r8ZQ8gaJpZM4Ndsy0\n.\n. Ok, thanks for the reply.. I've added this annotation in https://github.com/pwittchen/ReactiveNetwork/commit/78d616a5fda14bc1772e04a91e44eb8a7141f3ef in com.github.pwittchen.reactivenetwork.library.rx2.Connectivity#create(android.content.Context) method. I don't want to put it everywhere right now because I'm considering passing null as generally bad practice and code smell, so I'd have to put this everywhere.. Done for now.. Hi,\n\nThanks for reporting this issue. You're getting that error because you haven't implemented an error handling in your subscription and pinging www.google.com fails (error occurs).\nIn order to handle this error, you should use Observer interface instead of Consumer interface as follows:\n```java\ninternetDisposable = ReactiveNetwork\n    .observeInternetConnectivity(5000, \"www.google.com\", 80, 10000)\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new Observer() {\n      @Override\n      public void onSubscribe(final Disposable d) {\n        // this will be invoked before operation is started\n      }\n  @Override\n  public void onNext(final Boolean aBoolean) {\n    // do your action, when you're connected to the internet\n  }\n\n  @Override\n  public void onError(final Throwable e) {\n    // handle an error here\n  }\n\n  @Override\n  public void onComplete() {\n    // this will be invoked when operation is completed\n  }\n});\n\n```\nBoth Consumer and Observer are RxJava2 operators.\nRegards,\nPiotr. There may occur another error not related with the boolean state of the connection. For example, connection timeout, local network problem or something like that. In such cases, you'll receive an error.\nWhen I was testing this, I haven't encountered such issues and it worked fine with just Consumer, but I can imagine that in particular cases error may be thrown and in real apps, it's good to handle it.. We discussed this issue, so I'm considering it as clarified and resolved. In the case of further problems, you can re-open this issue or create a new one.. @javierpe You can do it, but while checking Internet connectivity many exceptions may occur. If you won't handle them, they will crash your app. You don't have to do anything in onError method implementation, but logging information about error and showing appropriate message to the user if necessary is a good practice.. @Harmeetkaur01 for some reason, your device is crashing while trying to connect to 5G network. This issue depends on a particular device - not the library. In order to handle this error gracefully, implement error handler in the way @toe-pyae-sone-oo suggested in the comment above.. This is a project specific issue, so it should not be resolved by the library. Currently, we are using Observable, not LiveData, so we're not resolving this now.. Partially done in https://github.com/pwittchen/ReactiveNetwork/commit/84854089f8668faf914f6926d39adc6d51a9771c :arrow_right:  branch issue-182. Hi,\nThanks for reporting this issue. Can you provide steps to reproduce this problem?\nThis may happen, when you forget to unsubscribe (for rx2: dispose) your subscription. If you're using this library in the Activity, call unsubscribe()  method on your Subscription object in onPause() method. In the case of Service, you should call it in onDestroy() method.\nRegards,\nPiotr. Please note, Android Fragments have more complicated LifeCycle than Activities. I haven't tested this library with Fragments and to be honest, I avoid using them due to their design, which makes them hard to use. In the case of Fragments, it may be required to subscribe and unsubscribe Observables in different methods than Activity. Check out this post: https://stackoverflow.com/a/40804923/1150795. It may be helpful.\nIt may be required to create a subscription in onAttach(Context context) method and unsubscribe them in onDetach() method of the Fragment.. Great to hear you solved it!\nKind Regards,\nPiotr. For now, I won't update these messages because they're quite precise and other error messages mentioned in another task are thrown from Android SDK and it's necessary to update it (at least now).. Done by adding the following bash scripts:\n- update_docs.sh\n- update_javadocs.sh. I'm closing this issue for now. Many libraries including original RxJava library have a similar approach for creating Observables. Optionally, we can re-open it in the future if necessary.. The new version is officially released!. Hi,\nIn the RxJava2.x version I've changed package from com.github.pwittchen.library to com.github.pwittchen.library.rx2 to distinguish classes from different artifacts. I think you shouldn't keep both library versions in the application at the same time because it may cause code conflicts like yours. It's better to remove RxJava1.x version and then add RxJava2.x version, update imports and adjust the code. Migration should be really simple. Take a look at the migration commit for this library, where sample app was migrated as well: https://github.com/pwittchen/ReactiveNetwork/commit/f35c869eec7622f15213337532c4c3d01d7bc0ba (check MainActivity.java file).\nRegards,\nPiotr. Ok, thanks. We'll update it.. It's done.. Appropriate PR for RxJava1.x was created in #201.. Fixed by https://github.com/pwittchen/ReactiveNetwork/pull/292.. Hi,\nThanks for reporting this issue. If you're using the custom host for checking the Internet connection, I suggest using SocketInternetObservingStrategy instead of WalledGardenInternetObservingStrategy, which was added in the latest release and applied as the default. WalledGardenInternetObservingStrategy marks server response as valid, when the response code is 204. You can customize library with the following Observable:\njava\nObservable<Boolean> observeInternetConnectivity(\n  final InternetObservingStrategy strategy, \n  final int initialIntervalInMs, final int intervalInMs, final String host, \n  final int port, final int timeoutInMs, final ErrorHandler errorHandler)\nor with Single:\njava\nSingle<Boolean> checkInternetConnectivity(\n  InternetObservingStrategy strategy, \n  String host, int port, int timeoutInMs, \n  ErrorHandler errorHandler)\nIn your case, probably, it'll look like that:\njava\nReactiveNetwork.observeInternetConnectivity(\n  new SocketInternetObservingStrategy(), 0, 2000, \n  \"www.yourcompany.org\", 80, 2000, new DefaultErrorHandler())\n  .subscribeOn(...)\n  .observeOn(...)\n  .subscribe(...);\nWe can think of adding to the API the additional method, with just strategy and host as parameters and remaining values as default because it could be a common use case.\nRegards,\nPiotr. The issue with http:// may be caused by java.net.InetSocketAddress class. Nevertheless, it may be a good idea to handle both cases (with and without http://).. Done.. Hi,\nIt looks like problem with Gradle, ProGuard or MultiDex. Try to add RxJava2 dependency explicitly to your project:\ngroovy\ncompile 'io.reactivex.rxjava2:rxjava:2.1.2'\nand then compile it.\nReference: https://realm.io/docs/java/latest/#jackson-databind\nIt also may be an issue with MultiDex and rx.Observable class may not be included in the primary *.dex file.\nYou can multidex support by adding the following dependency to your build.gradle project:\ngroovy\ncompile 'com.android.support:multidex:1.0.1'\nand then compile it.\nReference: https://github.com/ReactiveX/RxAndroid/issues/263\nI hope it helps.. @PitipongXYZ I checked StackOverflow. See this solution: https://stackoverflow.com/a/37632531/1150795\nAfter adding:\ngroovy\ncompile 'com.android.support:multidex:1.0.1'\nto your build.gradle file, you also need to define your own instance of an Application, which needs to extend MultiDexApplication like here:\nAndroidManifest.xml:\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.android.multidex.myapplication\">\n    <application\n        ...\n        android:name=\"YourAppName\">\n        ...\n    </application>\n</manifest>\nYouAppName.java source:\njava\npublic class YouAppName extends MultiDexApplication {\n  // ...\n}. Great! I think we can treat this issue as resolved. \nMaybe later I'll add your use case to the documentation if someone else will have a similar problem.. Hi,\nThanks for reporting this issue. I'll have to take a look at your use case.\nI see one problem here. You are trying to repeat the observation of network connectivity. Please note, that this Observable is using Android BroadcastReceiver under the hood and subscriber will get notification only when connectivity changes. Only in this case, an event will be emitted. There's no polling or immediate check of the connectivity, so I'm not sure if emitted event will be propagated here within a given time interval.\nRegarding your question, according to the RxJava source code, .repeatWhen() should return an Observable. Here's the reference: https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Observable.java#L9175. Maybe there's a problem in your stream composition. E.g. .observeOn() could be swapped with .repeatWhen(). I'm not sure about that and I'm just guessing because I haven't tested that example in the code yet.\nRegards,\nPiotr. Question is pretty old. There's no further discussion, so we can close it.. There are null checks for NetworkInfo. It looks like Context or ConnectivityManager is null for some reason. I don't know if it possible for the ConnectivityManager, but we can add a null check for this object. Context may be null only in the case when you pass null as a Context to the library.. I'm not sure if it may happen that ConnectivityManager becomes null, but according to this discussion that's the only possible source of this NPE here. Due to this fact, we can add a null check for it.. Fixed. Bug fix will be available in the next release.. I think, that problems mentioned by you guys are related to Android itself - not the library. Unfortunately, we cannot fix Android within this or another library. It may be good idea to post such issue to the Android issue tracker, so the source of the problem could be fixed.. Done.. Hi,\nThanks for reporting this issue.\nIf this problem occurs only on the mentioned device, it may be device specific problem. What do you mean by \"gets called again and again\"? Does it get called continuously in an endless loop? This may be related to Android version customized by Samsung. To be honest, I tested this library only on \"pure\" Android OS on Nexus 5 & 6 and I haven't checked it on Samsung devices.. Are you sure, you're using library correctly? Have you tried to run the\nsample app and got the same results? If yes, I think it's may be a problem\nwith this concrete device or its custom Android OS.\nOn Wed, Aug 30, 2017 at 10:45 AM, Abdullah Usmani notifications@github.com\nwrote:\n\nThanks for your response.\nYes, it gets called continuously. Ideally, I should get a callback\nwhenever a change in connectivity happens, i.e, when internet gets\nconnected or disconnected. But I am getting this callback in an endless\nloop.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/215#issuecomment-325924994,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF-TGO03hnEuljXoJUrxUcYh777GUks5sdSEbgaJpZM4PBDnC\n.\n\n\n-- \nPiotr Wittchen\nhttp://wittchen.biz.pl\n. If it works on all other devices except for this one, it's definitely\ndevice or OS specific issue and probably cannot be fixed within library\ncode. It can be reported to the device manufacturer.\nOn Wed, Aug 30, 2017 at 12:02 PM, Abdullah Usmani notifications@github.com\nwrote:\n\nI think I am using the library correctly. Because I am getting the correct\nresults on all other devices. This must be a device/OS specific issue.\nI haven't tried the sample app though. I'll check it and let you know soon.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/215#issuecomment-325944846,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF_9CUd2YSFISR6GZtAdPYLomWRL-ks5sdTNPgaJpZM4PBDnC\n.\n\n\n-- \nPiotr Wittchen\nhttp://wittchen.biz.pl\n. There's no new response since one year and it's related to the specific device, so I'm closing it.. It should be false if device doesn't have access to the Internet. Can you\nprovide more details about your case?\n30.08.2017 3:55 AM \"TonyTang\" notifications@github.com napisa\u0142(a):\n\nthe Internet Status will be true even if I connected to a wifi with\ninvalid Proxy. Is there expected? I reckon it should be false as the device\ncould not access any Internet.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/218, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF9gOlW2ZGY0SqTsldXOWFPM4u7zeks5sdMDvgaJpZM4PGxAv\n.\n. I haven't tested it with a proxy. We can investigate that issue.. > Help wifi connection global\n\n@isakgithub I don't understand your message.. Thanks for reporting this issue.\nAre you sure PreLollipopNetworkObservingStrategy was used in your case?\nMaybe different strategy was used and that may be the reason, this method\nwasn't called.\nOn Thu, Aug 31, 2017 at 11:58 AM, Alexey notifications@github.com wrote:\n\nhttps://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.\nx/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/\nnetwork/observing/strategy/PreLollipopNetworkObservingStrategy.java#L70\nunregisterReceiver never be called. So, BroadcastReceiver will be leaked.\nI've tried to set up break point on this line and this was not called,\nhowerer I disposed my Disposable.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/219, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF_iL6fUbOj9vlnravamAHz95W9wlks5sdoPDgaJpZM4PImQN\n.\n\n\n-- \nPiotr Wittchen\nhttp://wittchen.biz.pl\n. Ok, I'll investigate that issue.. Ok, thanks.. PR merged. Fix will be available in the next release.. I think I'll release it today. There's not much effort to do it. Later, we just need to wait for Maven Sync, so the new version should be available on Maven Central Repository in 48 hours or earlier.\nIf you want to be up to date with the upcoming release, you can track issue #221.\n. @lion4ik new release is already there: https://github.com/pwittchen/ReactiveNetwork#download\nenjoy :). Thanks for you PR. The fix looks fine. I'll just test it and I think, it could be merged ASAP.. I merged this update, added a missing unit test for bug proof and made tiny refactoring.\nFix will be available in the next release.\nThanks @lion4ik!. Done.. I followed instructions in README.md and couldn't make it work quickly, so I decided to abandon this idea for now. We can consider that solution when it'll be more stable and working OOTB.. Hi, @msridhar. I simply followed the instructions in the NullAway project.\nIn my build.gradle I've added the following code:\ngroovy\nallprojects {\n  repositories {\n    jcenter()\n    maven {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n}\nThen, I've updated library/build.gradle file as follows:\n```groovy\napply plugin: 'com.android.library'\napply plugin: 'jacoco'\napply plugin: 'jacoco-android'\napply from: '../config/quality.gradle'\napply from: '../maven_push.gradle'\nplugins {\n  id \"net.ltgt.apt\" version \"0.11\"\n  id \"net.ltgt.errorprone\" version \"0.0.11\"\n  id \"java\"\n}\nandroid {\n  compileSdkVersion rootProject.ext.compileSdkVersion\n  buildToolsVersion rootProject.ext.buildToolsVersion\ndefaultConfig {\n    minSdkVersion rootProject.ext.minSdkVersion\n    targetSdkVersion rootProject.ext.compileSdkVersion\n    versionCode 1\n    versionName \"1.0\"\n  }\nbuildTypes {\n    release {\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\ndebug {\n  minifyEnabled false\n  testCoverageEnabled true\n}\n\n}\npackagingOptions {\n    exclude 'LICENSE.txt'\n    exclude 'META-INF/LICENSE.txt'\n  }\ntestOptions {\n    unitTests.all {\n      jacoco {\n        includeNoLocationClasses = true\n      }\n    }\n  }\n}\njacocoAndroidUnitTestReport {\n  csv.enabled false\n  html.enabled true\n  xml.enabled true\n}\ndependencies {\n  compile deps.rxjava2\n  compile deps.rxandroid2\n  compile deps.supportannotations\ntestCompile deps.junit\n  testCompile deps.truth\n  testCompile deps.robolectric\n  testCompile deps.mockitocore\napt \"com.uber.nullaway:nullaway:0.1.2\"\ncompile \"com.google.code.findbugs:jsr305:3.0.2\"\nerrorprone \"com.google.errorprone:error_prone_core:2.1.1\"\n  errorprone \"org.checkerframework:dataflow:2.1.14\"\n}\ncompileJava {\n  options.compilerArgs += [\"-Xep:NullAway:ERROR\", \"-XepOpt:NullAway:AnnotatedPackages=com.uber\"]\n}\ntask wrapper(type: Wrapper) {\n  gradleVersion = rootProject.ext.gradleVersion\n}\n``\nNext, I've executed./gradlew clean build` command and received the following error:\n```\nStarting a Gradle Daemon, 1 incompatible Daemon could not be reused, use --status for details\nFAILURE: Build failed with an exception.\n\n\nWhere:\nBuild file '/home/piotr/Development/android/projects/private/ReactiveNetwork/library/build.gradle' line: 7\n\n\nWhat went wrong:\nCould not compile build file '/home/piotr/Development/android/projects/private/ReactiveNetwork/library/build.gradle'.\n\nstartup failed:\n  build file '/home/piotr/Development/android/projects/private/ReactiveNetwork/library/build.gradle': 7: only buildscript {} and other plugins {} script blocks are allowed before plugins {} blocks, no other statements are allowed\n\n\n\nSee https://docs.gradle.org/3.3/userguide/plugins.html#sec:plugins_block for information on the plugins {} block\n@ line 7, column 1.\n     plugins {\n     ^\n1 error\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n```\nDo you know how to fix that issue?\n. Thanks, @msridhar. I tried to replace plugins sections with the apply syntax for your configurations, but I also received some errors. When you'll have some news, I'll be happy to see them.. PR with this update is in #226.. The code was updated and PR is merged.. Thanks for your PR! Looks interesting. I'll review that & update the library. If everything will be fine, we can merge this update because I like the general idea of NullAway.. Ok, I've updated the library and merged this PR. This tool found a few bugs or issues, which I could fix, so it's a nice improvement :).. Right now, it's just an idea, but I'd like to take commits between tag from the latest release and now (via git log) and then generate an update in CHANGELOG.md file and push it to the repository. In the future, I'd like to use GitHub API to create the same update in the GitHub releases. I think I can create a bash or python script (or scripts) for that.. Right now, we're abandoning this. We can come back to this idea in the future.\nUp to now, we have automated JavaDoc generation and website generation (based on README.md).. Hi,\nThanks for reporting the issue.\nMessage says:\nCould not establish connection with WalledGardenStrategy\n                          java.net.SocketTimeoutException: timeout\nso your device couldn't establish socket connection and connection timeout occurred. Are you sure this issue is not related to your device or network you have been connected to? Maybe you were behind a proxy, connected via VPN or something like that?\nI don't think this code in the very basic version is not working because it was already tested some time ago and everything was fine.. This issue seems to be related to unreliable Internet connection and connections timeout - not the library itself, so it can be closed.. Thanks!. Thanks for reporting this issue.\nThis issue may be related to proxy or emulator configuration. I've tested it on real devices with a regular network connection and it worked fine. We can investigate proxy and emulator issue, but it may be system related thing.. I've analyzed your code once again. Please note, you're using NetworkInfo#isAvailable() method. According to the documentation it \"Indicates whether network connectivity is possible\". Connectivity is possible, so the value is true. It's correct behavior. If you want to check if you're connected to the network or not, please use NetworkInfo#getState() method. In ReactiveNetwork, you can access it via Connectivity#getState() method. You can view available states in NetworkInfo.State documentation. E.g. it can be CONNECTED, DISCONNECTED, IDLE and so on.. Ok. When everything is clear, then we can close this issue :).. Hi @aldocano,\nIn order to help you, I need more details. In standard scenario and setup, this code will work correctly. There must be something specific with your network, device or app.. If it's not necessary, it's better to check connectivity only once.\nRead more here: https://github.com/pwittchen/ReactiveNetwork#checking-internet-connectivity-once\nYou can observe connectivity continuously if you really need this.. Then you should use method with observe prefix. It's possible that server returns timeouts. It's also possible that you are using a proxy or network, which controls traffic and blocks many similar requests to avoid request flood, DoS, etc. You can try to set larger ping interval in milliseconds, which may fix this issue. It's possible with the library API. Default ping interval is 2000 ms (= 2 s). By the way, I have plans to make API for internet observing customisations more convenient.. Sure.\nYou can use the following observable:\njava\nObservable<Boolean> observeInternetConnectivity(int interval, String host, int port, int timeout)\nFor example:\njava\nDisposable rec = ReactiveNetwork.observeInternetConnectivity(5000, \"https://google.com\", 80, 1000)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe(isConnectedToHost -> {\n                // ...\n            });\nYou can find more methods here: https://github.com/pwittchen/ReactiveNetwork#observing-internet-connectivity\nI know, this API became unconveninent when number of parameters and different variantions grew, but I have plan to fix this.. There's no further discussion in more than one month, so I'm closing it.. Hi @maher640!\nYeah. You're right. There's a mistake in the documentation. Connectivity is used for observing network connectivity, but for observing Internet connectivity, we have a Boolean type.. README.md fixed. Thanks!. Thanks for reporting this issue. Can you provide more details or code snippets? Unsubscription should work. I'll check it again later.. I didn't get any response for a long time, so I guess this issue is longer valid.. Abandoning this idea for now. Maybe we'll reopen it later.. Done in https://github.com/pwittchen/ReactiveNetwork/commit/7c521453075ca4637b120c8cd989b33460ef1bd8. apex/static doesn't work with single README.md file, but docsify does and it can be considered for this project\ninitial structure of gh-pages:\n- index.html (with redirect to RxJava2.x dir)\n- RxJava1.x dir with generated docs\n- RxJava2.x dir with generated docs\n- RxJava1.x/javadocs dir with generated javaDocs\n- RxJava2.x/javadocs dir with generated javaDocs\n. Docs created with docsify at:\n- http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x/\n- http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x/\nMaybe they'll need a few adjustments in the future and instruction for generating them, but for now, it's fine.. To unregister receiver, you should dispose an Observable. E.g. in the case of the Activity, when you create an Observable somewhere (let's say in onResume() method), you should dispose it in onPause() method. It's a general rule regarding working with reactive data types on Android.\nIf you are looking for examples, take a look at the sample app here: https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/app/src/main/java/com/github/pwittchen/reactivenetwork/app/MainActivity.java. Hi,\nI don't really understand the question. When you call:\njava\nReactiveNetwork.observeNetworkConnectivity(context);\nthen you'll get an initial network state when subscribing and you'll be updated whenever connectivity changes.\nDo you need to check network connectivity once without being updated later when connectivity will change? ReactiveNetwork.checkInternetConnectivity() returns RxJava2 Single type and then finishes emission of the data on the stream.\nMoreover, initial state on the RxJava stream can be always achieved with startWith(...) operator. Actually, I'm using this operator inside the library.. No problem. I just wasn't sure about your use case and I thought maybe you needed something what the library does not offer :-).. I couldn't make it work with library for now.. Hi @marcoRS.\nAccording to my docs, you were using version 0.2.0 or earlier, which was released 2 years ago. A lot of code was changed since that time.\nIn the latest version of the library, you can observe network connectivity (e.g. Wifi, mobile, etc.) with method:\njava\nReactiveNetwork.observeNetworkConnectivity(context)\nIt doesn't check Internet connectivity. Just network connectivity (network can be disconnected from the Internet).\nIf you want to observe Internet connectivity continuously, you can use the following method:\nReactiveNetwork.observeInternetConnectivity()\nIt will ping google.com every two seconds (of course, you can customize it as you want).\nIf you want to check Internet connectivity once, you can use the following method:\nReactiveNetwork.observeInternetConnectivity()\nIf you want to observe network connectivity and then check Internet connectivity (chain two streams), please check the following section in the documentation:\nhttps://github.com/pwittchen/ReactiveNetwork#chaining-network-and-internet-connectivity-streams\nYou can also check sample app here: https://github.com/pwittchen/ReactiveNetwork/tree/RxJava2.x/app\nI hope, it will help you during the migration. In the case of further issues or doubts, you can post a comment here :).\nRegards,\nPiotr. I didn't get any new response for a long time, so I guess this problem was clarified.. Partially done in #252 (added detekt)\n  . Ktlint with gradle plugin was added in a7b0a9dc1669ed50aaf047e740ff77db3acf1096.\nIt's enough for now.. Since version 0.11.0 WalledGardenInternetObservingStrategy is the default strategy for observing internet connection. Before 0.11.0 it was opening a Socket. Of course, you can customize it.\nReference: https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/CHANGELOG.md#v-0110\nHint: If you are using this call in many places, I'd suggest to hide it behind an interface for the easy customizations and testing in the future or put it to the instance of Application and broadcast results to the other parts of the app. Nevertheless, it's an issue related to app design not the library itself.\nRegards,\nPiotr. In SocketInternetObservingStrategy it should create new socket connection, because new instance of Socket object is created there. After each check, socket connection is closed if there's no exception. You can browse the source code, if you want to know more details.. Hi,\nThanks for reporting that. It can be fixed in the similar way as here: https://github.com/square/okhttp/pull/842.\nOther references:\n- https://developer.android.com/training/efficient-downloads/efficient-network-access.html?hl=es\n- https://stackoverflow.com/questions/36696447/how-to-get-trafficstats-from-a-specific-thread\nI'll take a look on that.. I've decided, this issue is not so relevant and may occur in a development setups - not production apps, so we're not developing it now.. Hi,\nThanks for reporting that issue. I suppose it's the same problem as here: https://github.com/pwittchen/ReactiveWiFi/issues/28. I'll bump version of RxJava1.x and it should fix that problem.\nRegards,\nPiotr. You can, if you'd like to.. PR merged. Update should be available in the next release. You can monitor release progress in #258.\nIn case of further problems, we can re-open this issue or create a new one.. Thanks!. Hi,\nSure. You can run it the background. If by \"background\" you mean inside Android Service, then of course it can be done. It doesn't matter when you call it (Activity or Service). If you would like to pass network monitoring to another thread via Scheduler, you can also do it with RxJava.\nRegards,\nPiotr. Hello.\nI don't really know why are you providing sample code snippets in JavaScript while this project is a Java library :-).\nRegards,\nPiotr. I guess it's a mistake, so I'm closing this issue. If you have any questions regarding this project, you can create a new issue.. Hi,\nIt's not a bug. If you want to have network monitoring in the background, you should put subscription into the Android Service - not an Activity. It should work and have tested it some time ago. You shouldn't get any callback from the Activity when application is in the background.\nRegards,\nPiotr. Honestly, I'm not sure if there's any way to write a code for Android which runs while app is in background other than using a Service. Code within the Activity is executed while Activity is active and within its lifecycle. It's related to Android system design - not this library.. If you don't want to call a web service every time, think about caching your response and call it when the data becomes stale (according to your strategy). This delay may depend on your system or a specific device. There's no 5 seconds delay coded in the library. We are getting new information as soon as we receive callback from the BroadcastReceiver. This library simply wraps default Android mechanisms and we have no control over the time of receiving this information. We can only decide how to handle it and what to do next.. Solved in #268 and #269.. Hi,\nThanks for reporting this issue.\nFirst problem:\nYou haven't specified error handler during observing the Internet and something went wrong (e.g. connection timeout, no Internet, no WiFi connection, wrong address, etc.). You should handle it as follows:\njava\nReactiveNetwork\n   .observeInternetConnectivity()\n   .subscribeOn(Schedulers.io())\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe(\n       response  -> /* handle response here */,\n       throwable -> /* handle error here */)\n   );\nYou can do it with any kind of RxJava Observable type. I should update documentation a little bit.\nSecond problem:\nStackTrace starts at:\nat com.android.okhttp.okio.Buffer.writeUtf8(Buffer.java:818)\n ...\nso I suppose it's related to the OkHttp library. I'm not using it in this library, so I suppose Android guys have put it into Android OS Core or maybe you're using it in your app or one of your dependencies is using it. Nevertheless, it's runtime error related to observing Internet (similar to the first problem) and you should be able to handle it in the same way as the first problem.\nRegards,\nPiotr\n. Ok, when it's clarified, we can close this issue.. Done.. Can you provide more details? I don't really know what you mean.\nI see \"JitPack\" in the title. I haven't tried to use this library via JitPack. It's hosted in Maven Central repository.. Hi @Pietervdv. Exactly. Library is deployed to Maven Central repository like most of the java libraries. I'm not using JitPack here. It's hard to develop JVM or Android projects without adding mavenCentral() to build.gradle file. I think, we can close it.. Hi,\nThanks for reporting this issue. Are you sure?\nWhen you call something like that:\njava\nReactiveNetwork.observeNetworkConnectivity(context)\n        .flatMapSingle {\n            if (it.state == NetworkInfo.State.CONNECTED) {\n                ReactiveNetwork.checkInternetConnectivity()\n            } else {\n                Single.just(false)\n            }\n        }\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(...);\nConnectivity should be monitored in the background thread and result should be received in the main thread. Nevertheless, observeConnectivity methods do not rely on any network operations. They just wrap BroadcastReaceivers or Network Callbacks from Android API. Possibility of NetworkOnMainThreadException may be feasible in observeInternetConnectivity methods, but I haven't encountered it there.\n. ReactiveNetwork.checkInternetConnectivity() will be executed in the main thread as long as you won't tell it to be executed on another thread via subscribeOn(...) method.. For some unknown reason, sample app, which CompositeDisposable is not behaving correctly and disposables are not properly resumed when the Activity goes from the background to the foreground.. Hi,\nI also had doubts if I should made these methods static, but I followed approach from the original RxJava library, where they do the same. Please note, it's library - not a framework, so you're not forced to use it in any particular way. My suggestion is to hide library behind appropriate interface, which can be mocked in your project. E.g.\njava\ninterface NetworkObserver {\n  Observable<Connectivity> observeNetwork(Context context);\n}\njava\nclass DefaultNetworkObserver implements NetworkObserver {\n  @Override\n  Observable<Connectivity> observeNetwork(final Context context) {\n    return ReactiveNetwork.observeNetworkConnectivity(context);\n  }\n}\nNow, you can use interface in your project and inject implementation manually or via DI framework/library. Next, you can mock an interface in your tests. Such approach is flexible because you can easily change network monitoring strategy, add configuration and so on in the future in case you need it.\nRegards,\nPiotr. I've got no further response in 20 days, so I assume my reply is sufficient and an issue can be closed.. Hi,\nThanks for reporting this issue. I need to verify that. It looks like issue similar to #170.\nRegards,\nPiotr. I need to investigate it, to be sure what kind of solution can be applied here or if it can be solved inside the library. \nobserveInternetConnectivity should solve this. Nevertheless, it could increase battery usage and data consumption. You can customize delay and set it to a higher value, to reduce battery drain.. I used the same sample from README.md.\n```java\n...\n@Override protected void onResume() {\n    super.onResume();\nnetworkDisposable = ReactiveNetwork.observeNetworkConnectivity(getApplicationContext())\n    .flatMapSingle(connectivity -> {\n      if (connectivity.getState() == NetworkInfo.State.CONNECTED) {\n        return ReactiveNetwork.checkInternetConnectivity();\n      }\n      return Single.fromCallable(() -> false);\n    })\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(isConnected -> {\n      tvConnectivityStatus.setText(String.format(\"%s\", isConnected.toString()));\n    });\n\n}\n...\n```\nHere are results of my investigation:\nassumption: both WiFi and mobile network have an Internet access\nscenario 1\n\nConnect to WiFi\nConnect to the mobile network\nDisconnect from WiFi\nStatus: connected\n\nscenario 2\n\nConnect to WiFi\nConnect to the mobile network\nDisconnect from mobile network\nStatus: connected\n\nscenario 3\n\nConnect to the mobile network\nConnect to WiFi\nDisconnect from mobile network\nStatus: connected\n\nscenario 4\n\nConnect to the mobile network\nConnect to WiFi\nDisconnect from WiFi\nStatus: not connected\n\nso scenario 4 is our edge case, which returns false positive values. I'll take a closer look on this. Of course, any kind of help is appreciated.\n. Ok,\nI've done a few more investigations. It seems that following approach should solve this problem:\njava\n    networkDisposable = ReactiveNetwork.observeNetworkConnectivity(getApplicationContext())\n        .flatMapSingle(connectivity -> ReactiveNetwork.checkInternetConnectivity())\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(isConnected -> tvConnectivityStatus.setText(isConnected.toString()));\nso basically I simplified this:\njava\n        .flatMapSingle(connectivity -> {\n          if (connectivity.getState() == NetworkInfo.State.CONNECTED) {\n            return ReactiveNetwork.checkInternetConnectivity();\n          }\n          return Single.fromCallable(() -> false);\n        })\nto that:\njava\n        .flatMapSingle(connectivity -> ReactiveNetwork.checkInternetConnectivity())\nI've verified it with all 4 scenarios and it looks that it works fine now.\n@vedantroy, please check if it solves your problem.\nNevertheless, I need to update docs in README.md to avoid such problems in the future.\nedit: docs updated in  76ab2b2. I've got no response, so I assume problem no longer occurs.\nDocumentation is updated and with new code snippet, the application works properly and no false-positive results are returned.\nAll the details are provided in my posts above.. @vedantroy Have you tried updated code snippet I've posted here https://github.com/pwittchen/ReactiveNetwork/issues/276#issuecomment-396147241? With this update I cannot reproduce this bug. In the old snippet bug occurred as you wrote.. Hi,\nI think it should be possible, but this library doesn't have such functionality. It's good idea for a separate tiny library. If you would like to monitor signal level (strength) of the mobile network, please take a look at the TelephonyManager from the Android API.\nRegards,\nPiotr. I think, it's clear now and there's no further discussion, so I'm closing it.. Hi,\nIt's strange. Does it happen on this device only? If yes, then I suppose it may be its hardware specific issue. You can also try another available strategy for observing Internet connection: SocketInternetObservingStrategy instead of WalledGardenInternetObservingStrategy (default) and check if anything changes. You can set it via InternetObservingSettings builder.\nRegards,\nPiotr. Great that this solution helps!\nczw., 19 lip 2018, 09:07 u\u017cytkownik Dmitriy Kazimirov \nnotifications@github.com napisa\u0142:\n\nhi,\nYes, this device only so far.\nSocketInternetConnection helps.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/286#issuecomment-406176908,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF8bD3FBDrne2zBuaz_5qM4I6LwZcks5uIDBKgaJpZM4VVplO\n.\n. Ok. I see the problem is solved, so we can close this issue.. Thanks for reporting this issue. It should work fine. I'll verify this.\n\nsob., 21 lip 2018, 20:57 u\u017cytkownik Zachary Dunaisky \nnotifications@github.com napisa\u0142:\n\nAccessing Connectivity state like this throws an error:\n.subscribe { connectivity ->\n    if (connectivity.state == NetworkInfo.State.CONNECTED) {\n        // do stuff\n    }\n}\n^^ this will not compile but no error is shown in Android Studio.\nError: Cannot access state: it is private in \"Connectivity\"\nHowever, accessing state as you have in the kotlin example shows the\nfollowing error (but compiles fine):\n[image: screen shot 2018-07-21 at 2 50 45 pm]\nhttps://user-images.githubusercontent.com/5703278/43039160-95016ad8-8cf5-11e8-9960-9db88d199744.png\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/288, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF6TV3D1zxpvqoDwZUBrUPtH-XTcpks5uI3mEgaJpZM4VZuhM\n.\n. Class variable state is private, but method state() is public, so it should be accessible from any place. Maybe Kotilin is confused when I have the same method name as a variable name. I'll check it again. . In the sample Kotlin app, I've imported library from the Maven Central Repository instead of a local module and tried to access state() method. I couldn't see any errors.\n\n\nPlease, ensure you're using the latest version of the library. Previously, this method was called getState(). Now, it's state().\n. Great to hear you resolved the problem!\nCheers,\nPiotr\npon., 30 lip 2018, 21:21 u\u017cytkownik Zachary Dunaisky \nnotifications@github.com napisa\u0142:\n\nClosed #288 https://github.com/pwittchen/ReactiveNetwork/issues/288.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/288#event-1761019749,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF8B7nWZAPkaKB9rtKwejUuU20jvtks5uL1zIgaJpZM4VZuhM\n.\n. First of all, you haven't handled an error.\n\nIt can be done as follows:\njava\nobservable\n .subscribe(\n    connectivity -> /* handle connectivity */,\n    error -> /*handle an error */\n  );\nas in any RxJava observable.\nThe library doesn't handle these errors. It just throws them. You can handle them in any way you want.\nSecond, please make sure that your network has Internet access and you're able to access host clients3.google.com/generate_204.\nMoreover, your network could be temporarily slower and an Internet connection could be down.. In several cases, you will get an information about no connectivity (e.g. IOException or when host address will be resolved, but you won't be able to establish the connection). In the special cases like java.net.UnknownHostException, errors will be thrown and you can notify the user about lack of connectivity anyway. In the most cases, it's good to handle RxJava errors in any way.. This issue was clarified, so we can close it now.. Hi,\nI'm not publishing this library via JitPack, but via Maven Central. Please, ensure you're able to download artfiacts from Maven Central Repository. You should have something like that in your gradle config:\ngroovy\nrepositories {\n  mavenCentral()\n  // other sources also goes there...\n}. There's no further reply, so I suppose you resolved it.. Hi,\nThanks for reporting this issue.\nIn the library, I explicitly unregister callback while calling dispose() method. You can take a look at this line: https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/LollipopNetworkObservingStrategy.java#L61.\nIs there any particular reason because of which you are using clear() instead of dispose(). I think calling dispose() should solve this problem, but I'll ensure if it's possible to handle clear() method as well and verify if it makes sense within the library code.. Ok, I'll check what I can do with use case with clear() method.. Another idea could be moving your code to the place independent from the Activity Lifecycle. E.g. to instance of the Application or dedicated Android Service. You can monitor network in one place and pass events to the Activity when needed. You can use many techniques for passing events between independent components (e.g. via event bus).. Hi,\nThanks for your message and proposal. You can prepare a logo for the project if you would like to. If it will be simple and neat, I can accept it as a project logo, but I cannot promise that.\nRegards,\nPiotr. Hi,\nI appreciate your effort and work, but if I add a logo to my project, I would go with something simpler, less \"rounded\" and less \"shiny\", so for now, project can be without logo.\nThanks again and all the best!\nRegards,\nPiotr. Hi @danielbeleza,\nThanks for reporting this issue, I'll verify it on Android P.\nCan you provide any resource regarding network status access on Android P? \nIt may be helpful during resolving this issue.\nRegards,\nPiotr. I haven't investigated it yet, but I have two suggestions for now:\n\nEnsure you have appropriate permissions in your AndroidManifest.xml file:\n\nxml\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n\nTry to change strategy for observing Internet connection. Default strategy is WalledGardenInternetObservingStrategy and maybe this implementation has some issues related to Android P. There's also another strategy called SocketInternetObservingStrategy. You can set it via InternetObservingSettings as follows:\n\njava\nInternetObservingSettings\n  .strategy(new SocketInternetObservingStrategy())\n  .host(...)\n  .port(...)\n  ... // other settings go here\n  .build()\nMoreover, you can also use observeNetworkConnectivity(...) method, which checks network connectivity only (most WiFi networks have an Internet access, but they don't have to).. @herald25 What do you mean by \"I can't receive return value\"? This observable should return a value. Either true or false. Depending on timeout, remote server and its latency, you can receive value sooner or later.. Okay,\nI know, what's going on.\nIn the debug I get the following error:\nCleartext HTTP traffic not permitted\nIt's related to the security issues. Starting with Android 9.0 (API level 28), cleartext support is disabled by default.\nThe quickfix will be setting usesCleartextTraffic to true in the application tag in AndroidManifest.xml\nxml\n<application\n  ...\n  android:usesCleartextTraffic=\"true\" >\nYou can check this commit: https://github.com/pwittchen/ReactiveNetwork/commit/f1b21baf1a1794706f56675a55f51939baedd4b6 to see how it's done in the sample apps.\nYou can also read about more details and other options of dealing with this problem here: https://stackoverflow.com/questions/45940861/android-8-cleartext-http-traffic-not-permitted\nI've added task in #300 regarding documentation of this thing.\nI think, it's clear now and we can close this issue.. Hi @MikolajKakol,\nThanks for your message. I think issue discussed in this topic is just related to Android P and clearTextTraffic. Generating 204 code with Google service may be not enough in that case since Android P.\n. Hm, you may be right. according to the documentation, replacing http with https in https://github.com/pwittchen/ReactiveNetwork/blob/40b725013b8412289f56fec2601c4cab3f0fc76f/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/WalledGardenInternetObservingStrategy.java#L41 may fix this issue. I'll check that.. Hi,\nThanks for reporting that. WalledGardenInternetObservingStrategy is kind of specific use case. I think, one way to solve your problem will be creating additional setting, where you can set desired HTTP response like 200 (or anything else) instead of 204. That should be easy fix.\nRegards,\nPiotr. I've added httpResponse(int) method in InternetObservingSettings in PR #303. Documentation was updated too. This update breaks the API. It will be available in the next release.. Done in https://github.com/pwittchen/ReactiveNetwork/commit/162ed6803ee69a29e4d4e5a6a9a1c0344a111324. Thanks for reporting this issue. I'll take a look on that.\nWhat Android version are you using?. Thanks for providing these steps. What I can see now, you're not notified that you're disconnected from the network when you are connected to at least one network (WiFi or Mobile). The question is if returning State.DISCONNECTED while you're actually connected is the valid information. I think, behaviour which can be observed now is correct. To ensure this fact, we can try to reproduce the same thing using BroadcastReceiver or NetworkCallback from the Android SDK without RxJava and other additional libraries, but I suppose the result will be the same. I also don't want to change original behaviour of the Android SDK in this library.. Ok, I'll try to reproduce that.. Hi,\nThanks for reporting that issue. You're right and it may work this way. In case of multiple Activities it shouldn't be an issue because we always have one or zero \"active\" Activity. For multiple streams within a single Activity behaviour should be correct. This may be an issue in the case of Activity and Service as you mentioned. In such case, I'd create a single subscription for whole application (in the class deriving from Application) and then send events to several components (Activities and Services). It can be done with BroadcastReceiver or Event Bus like Otto. Some time ago, I've created ReactiveBus, which is very simple and can be used to keep reactive design of the events. I'm not sure if that's the best way to solve this problem. I'd avoid creating new BroadcastReceiver everytime because it may increase memory consumption of the app.. Yeah, for a single instance of an object it may be a problem. Quick fix may be usage of multiple instances of the ReactiveNetwork class for several Activities and Services. I'll take a look on that, but I cannot promise that I'll resolve that quickly due to limited amount of time. I'm open for any suggestions for improvements and Pull Requests.. Hi,\nThanks for reporting this issue. It's probably related to ClearText traffic\nconfiguration, which needs to be done in AndroidManifest.xml since API 28.\nCheck documentation here:\nhttps://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/README.md#cleartext-traffic\nsob., 20 pa\u017a 2018, 14:22 u\u017cytkownik Ahmad AlRahahleh \nnotifications@github.com napisa\u0142:\n\nI test library this work all android versions but sdk 28 not working\nalways return false not connected\nthis my code\n@override https://github.com/override protected void onResume() {\nsuper.onResume();\ninternetDisposable = ReactiveNetwork.observeInternetConnectivity()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(isConnected -> {\n\n            if (isConnected){\n\n                    Toast.makeText(this,\"Connected\",Toast.LENGTH_LONG).show();\n\n            } else {\n\n                Toast.makeText(this,\"Not Connected\",Toast.LENGTH_LONG).show();\n\n            }\n                }\n\n\n        );\n\n}\n@Override protected void onPause() {\n    super.onPause();\n    safelyDispose(internetDisposable);\n}\nprivate void safelyDispose(Disposable... disposables) {\n    for (Disposable subscription : disposables) {\n        if (subscription != null && !subscription.isDisposed()) {\n            subscription.dispose();\n        }\n    }\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/309, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF_CLQvSO289H_gxnV3u1_NtPKy2Jks5umxVqgaJpZM4Xx5WB\n.\n. Hi @jclova. Currently RxJava 1.x version is no longer developed as well as original RxJava 1.x project. Nevertheless, you can try to apply different internet observing strategy. See this part of the documentation: https://github.com/pwittchen/ReactiveNetwork#internet-observing-strategies. It may be also an issue with the host you are pinging. You can also try to switch to RxJava2.x version as it may have more fixed bugs and solved issues than the older version.. RxJava1.x is no longer maintained and I don't see further issues with RxJava2.x branch, so I'm closing this one.. You can do that now. It's described in documentation here: https://github.com/pwittchen/ReactiveNetwork#chaining-network-and-internet-connectivity-streams\n\nSometimes, switchMapSingle may be a better choice than flatMapSingle to discard first stream.. You can do that too right now. You can use RxJava operators like debounce(...), sample(...) or something like that. Have a look at docs: https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables.. Hi @lfei1789,\nCan you explain your issue? Method connectivity.extraInfo() does not have to return anything. You can get many information about the connection from the Connectivity object. Is something important missing there?\nRegards,\nPiotr. Unfortunately, we don't have any influence on the value returned by NetworkInfo.getExtraInfo().\nNow, we cannot get WifiInfo from the Connectivity object because we can have many types of connection (not only Wifi). I think we can add a method, which returns WifiInfo object basing on active network to Connectivity object because it may be useful. In case of other connection types, it can simply return null. It also should be marked with appropriate annotation and documented. After that, you'll be able to get SSID via wifiInfo.getSSID() method.. You can get info about WiFi connection as follows:\njava\nWifiManager manager = (WifiManager) getSystemService(Context.WIFI_SERVICE);\nWifiInfo connectionInfo = manager.getConnectionInfo();\nand it requires ACCESS_WIFI_STATE permissions in AndroidManifest.xml file. I've decided not to add this to the library to avoid adding additional permissions, which may not be required by all apps using this library. If you want to have reactive API specific for WiFi connections, then you can have a look at ReactiveWifi library.. Ok, thanks for the reply @lfei1789 !. Hi,\nThanks for reporting that. I'll have a look at it.\nRegards,\nPiotr. Thanks for creating this PR! I'll review and test it.. Have you checked the situation after interval in milliseconds defined in PINGTIMEOUT field? Observing mechanism uses polling for checking Internet connectivity every given amount of time. It should detect the situation that the device doesn't have an Internet connection. Are you sure, your device to which the phone is connected (e.g. router with WiFi) doesn't have the access to the Internet?. It's strange.... I'll have a look on that. I cannot to reproduce this situation in an enterprise environment, but I can check it on my simple home router. Maybe there are more variables determining such situation.. Hi,\nThanks for reporting this. I didn't know about deprecated properties of NetworkInfo class. I'll try to update the library and get rid of deprecated code as soon as I can.\nRegards,\nPiotr. You need to customize clearText traffic in your app. It's described in the library documentation here: https://github.com/pwittchen/ReactiveNetwork#cleartext-traffic.. @abir-hasan have fixed it by enabling clearText traffic?. Thanks for reporting this. I'll check it. Are you sure, your server is\nworking and your device is connected to the network with Internet\nconnection? You can also check another strategy (Walled Garden)\nczw., 28 lut 2019, 11:57 u\u017cytkownik Zulqurnain Haider \nnotifications@github.com napisa\u0142:\n\nServer Online or Not\nit is always returning false in connectivity no matter what.\nTo Reproduce\nHere is concise function i wrote to check if server is online or not.\nwhich is not working\npublic void observeServerURL(){\n      String urlString = \"http://www.someserver.com\";\n  if(urlString == null || urlString.isEmpty())return;\n  InternetObservingSettings settings = InternetObservingSettings.builder()\n          .strategy(new SocketInternetObservingStrategy())\n          .host(urlString)\n          .timeout(2000)\n          .interval(10 * 1000) // each 10 seconds\n          .initialInterval(1000)\n          .build();\n  cpp.add(\n          ReactiveNetwork\n                  .observeInternetConnectivity(settings)\n                  .subscribeOn(Schedulers.io())\n                  .observeOn(AndroidSchedulers.mainThread())\n                  .subscribe(\n                          isOnline -> {\n                              LogUtils.d(\"checking URL status:\"+urlString+\" , its online:\"+isOnline);\n                              }\n                          },\n                          Throwable::printStackTrace\n                  )\n  );\n\nSmartphone (please complete the following information):\n\nDevice: OPPO\nOS: 5.1\nLibrary Version: 3.0.2\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/324, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAqcF99-mduKM_ijPDVzKcPmBrgjHpugks5vR7YggaJpZM4bWi1I\n.\n. I couldn't reproduce your issue. Maybe it's an issue in your app? You can verify that by running sample projects from this repo. If they works for you, then it must be an issue with your app. Moreover, I don't know what cpp.add(...) stands for in your context. Maybe this is a source of the problems?. Then something may be wrong with your server. Moreover, in InternetObservingSettings you can set  httpResponse(200) (status: OK) if this is response status of your server. Default response in the settings is HttpURLConnection.HTTP_NO_CONTENT (204), which is the case in pinging http://clients3.google.com/generate_204 in WalledGardenInternetObservingStrategy.. @Zulqurnain Did setting HTTP status helped in your case?. Yes. This feature of the library pings the server.. It's not explicitly supported now and I haven't tested it for such cases. Nevertheless, I'm open for improvements.. Hi,\n\nThis library cannot be included in a pure java module. It's an Android library, not a Java library and it relies on the classes from the Android API.\nRegards,\nPiotr. Thanks for reporting that. I'm not really sure how to handle this particular use case. Probably I'll need more time for analysing that.. Muting exceptions is bad programming practice and we shouldn't do that. There should be a way do allow a user to handle this exception and default implementation of such handling.\n. Thanks for the comments. I'll execute this code and merge that later. I'll add handling of this exception in the next commits because I have some sort of idea how to do it in a generic way, so library users can control that. Thanks for your contribution!\n. You could create an additional private static final field called DEFAULT_INITIAL_PING_INTERVAL_IN_MS and use it here because it's related to a separate thing.\n. You could use Preconditions.checkPositive(int,String) method in the same way as it's used below. It does logically the same thing as this conditional statement.\n. Please, remember to update documentation in README.md file when you are updating library API.\n. Yes, we can. Nevertheless, Robolectric supports only API from 21 to 23, but it's enough for this test. :)\n. I got an error after running tests, that lower API was not supported. I guess it was version 20. Maybe it's an issue related to Robolectric version.\n. Please, put subscribe in the new line.. Please, put subscribe in the new line.. Please, change rxjava variable to rxjava2 variable.. Please change rxandroid variable to rxandroid2 variable.. Please change aLong variable name to tick as it was previously.. Please change subscriber name to emmiter. Type was changed, so in this case, we should change variable name as well.. Please, do not print the whole StackTrace. Call onError(message, exception) method with an appropriate message.. There should not be a LOG_TAG! This method has the following signature onError(final String message, final Exception exception). Please put there a descriptive message. E.g. Could not dispose subscription in UI Thread.. ",
    "tamsir": "Yes, the function is execute twice all the time.\nHere is the activity\n```\npackage com.sourcey.test;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.database.Cursor;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport com.github.pwittchen.reactivenetwork.library.ConnectivityStatus;\nimport com.github.pwittchen.reactivenetwork.library.ReactiveNetwork;\nimport com.sourcey.store.events.MessageEvent;\nimport com.sourcey.store.product.models.ProductTable;\nimport com.sourcey.store.user.models.LoginUser;\nimport com.sourcey.store.user.models.UserTable;\nimport com.sourcey.store.utils.Commons;\nimport butterknife.Bind;\nimport butterknife.ButterKnife;\nimport de.greenrobot.event.EventBus;\nimport rx.android.schedulers.AndroidSchedulers;\nimport rx.functions.Action1;\nimport rx.schedulers.Schedulers;\npublic class LoginActivity extends AppCompatActivity {\n    private static final String TAG = \"LoginActivity\";\n    private static final int REQUEST_SIGNUP = 0;\n    private static int SPLASH_TIME_OUT = 2000;\n    private static Context context; // used to get the context of this activity. only use when onCreate of Activity has been called!\n    private LoginUser login = LoginUser.getInstance();\n    private ProgressDialog progressDialog;\n    public ReactiveNetwork reactiveNetwork;\n@Bind(R.id.input_email)    EditText _emailText;\n@Bind(R.id.input_password) EditText _passwordText;\n@Bind(R.id.btn_login)      Button   _loginButton;\n@Bind(R.id.link_signup)    TextView _signupLink;\n@Bind(R.id.login_page)     View     login_page;\n\n\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_login);\n    ButterKnife.bind(this);\n    LoginActivity.context = getApplicationContext();\n    setUpListeners();\n}\n\n/**\n * Function used to get the application's context. Only use if the application exists!\n * @return The context of this activity\n */\npublic static Context getAppContext() {\n    return LoginActivity.context;\n}\n\npublic void login() {\n    Log.d(TAG, \"Login\");\n\n    if (!validate()) {\n        onLoginFailed();\n        return;\n    }\n    //R\u00e9cuperation du username et du password\n    String email    = _emailText.getText().toString();\n    String password = _passwordText.getText().toString();\n\n    _loginButton.setEnabled(false);\n    progressDialog.setIndeterminate(true);\n    progressDialog.setMessage(getResources().getString(R.string.authenticate));\n    progressDialog.show();\n\n    login.requestString(Commons.URL_LOGIN, email, password);\n}\n\npublic void verifyLogin() {\n    Log.d(TAG, \"verifyLogin\");\n    if (!validate()) {\n        onLoginFailed();\n        return;\n    }\n    //R\u00e9cuperation du username et du password\n    String email    = _emailText.getText().toString();\n    String password = _passwordText.getText().toString();\n\n    progressDialog.setIndeterminate(true);\n    progressDialog.setMessage(getResources().getString(R.string.authenticate));\n    progressDialog.show();\n    if ((Commons.getPref(context, \"username\", \"\").equals(email)) && (Commons.getPref(context, \"password\", \"\").equals(password))) {\n        new Handler().postDelayed(new Runnable() {\n            @Override\n            public void run() {\n            progressDialog.dismiss();\n            Intent i = new Intent(context, MainActivity.class);\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(i);\n            finish();\n            }\n        }, SPLASH_TIME_OUT);\n    } else {\n        progressDialog.dismiss();\n        Commons.snackToast(getResources().getString(R.string.no_log), login_page, context);\n        _loginButton.setEnabled(true);\n    }\n}\n\nprivate int getNbUser(){\n    Cursor cursor = getContentResolver().query(UserTable.Contract.CONTENT_URI, null, null, null, null);\n    cursor.close();\n    return cursor.getCount();\n}\n\nprivate int getNbProduct(){\n    Cursor cursor = getContentResolver().query(ProductTable.Contract.CONTENT_URI, null, null, null, null);\n    cursor.close();\n    return cursor.getCount();\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (requestCode == REQUEST_SIGNUP) {\n        if (resultCode == RESULT_OK) {\n            // If the user signs up successfully we can log them in automatically\n            this.finish();\n        }\n    }\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    reactiveNetwork = new ReactiveNetwork();\n}\n\n@Override\nprotected void onStart() {\n    super.onStart();\n    EventBus.getDefault().register(this);\n\n}\n\n@Override\nprotected void onStop() {\n    EventBus.getDefault().unregister(this);\n    super.onStop();\n}\n\n// This method will be called when a MessageEvent is posted\npublic void onEvent(MessageEvent event){\n    Toast.makeText(context, event.message, Toast.LENGTH_SHORT).show();\n    if(event.message==Commons.LOGIN_OK){\n        progressDialog.dismiss();\n        onLoginSuccess();\n    }else if(event.message==Commons.LOGIN_NOK){\n        progressDialog.dismiss();\n        _loginButton.setEnabled(true);\n    }\n}\n\n@Override\npublic void onBackPressed() {\n    // disable going back the the MainActivity\n    moveTaskToBack(true);\n}\n\npublic void onLoginSuccess() {\n    _loginButton.setEnabled(true);\n    Intent j = new Intent(context, MainActivity.class);\n    j.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    context.startActivity(j);\n    finish();\n}\n\npublic void onLoginFailed() {\n    Toast.makeText(context, getResources().getString(R.string.no_connect), Toast.LENGTH_LONG).show();\n    _loginButton.setEnabled(true);\n}\n\npublic boolean validate() {\n    boolean valid = true;\n\n    String email    = _emailText.getText().toString();\n    String password = _passwordText.getText().toString();\n\n    if (password.isEmpty() || password.length() < 4 || password.length() > 10) {\n        _passwordText.setError(getResources().getString(R.string.valid_password));\n        valid = false;\n    } else {\n        _passwordText.setError(null);\n    }\n\n    if (email.isEmpty()) {\n        _emailText.setError(getResources().getString(R.string.valid_login));\n        valid = false;\n    } else {\n        _passwordText.setError(null);\n    }\n\n    return valid;\n}\n\nprivate void setUpListeners(){\n    progressDialog = new ProgressDialog(LoginActivity.this, R.style.AppTheme_Dark_Dialog);\n\n    _loginButton.setOnClickListener(new View.OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n            if (getNbUser() == 0) {\n\n                reactiveNetwork.observeConnectivity(context)\n                        .observeOn(AndroidSchedulers.mainThread())\n                        .subscribeOn(Schedulers.io())\n                        .subscribe(new Action1<ConnectivityStatus>() {\n                            @Override\n                            public void call(ConnectivityStatus connectivityStatus) {\n                                switch (connectivityStatus.toString()) {\n                                    case \"connected to WiFi\":\n                                    case \"connected to mobile network\":\n                                        Log.d(\"connect\", \"connected to WiFi\");\n                                        login();\n                                        break;\n                                    case \"offline\":\n                                        Commons.snackToast(getResources().getString(R.string.no_internet), login_page, context);\n                                        break;\n                                }\n                            }\n                        });\n\n            } else if (getNbUser() > 0) {\n                verifyLogin();\n            }\n        }\n    });\n}\n\n}\n```\nThe function is in setUpListeners();\nThanks\n. Even if I wrote this\n```\n  @Override protected void onResume() {\n    super.onResume();\n    reactiveNetwork = new ReactiveNetwork();\nreactiveNetwork.observeConnectivity(this)\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribeOn(Schedulers.io())\n        .filter(ConnectivityStatus.isEqualTo(ConnectivityStatus.WIFI_CONNECTED))\n        .subscribe(new Action1<ConnectivityStatus>() {\n            @Override\n            public void call(ConnectivityStatus connectivityStatus) {\n                Log.d(\"onResume\", connectivityStatus.toString());\n                tvConnectivityStatus.setText(connectivityStatus.toString());\n            }\n        });\n\n}\n```\nIn the log I have twice\n08-29 16:51:29.068    4486-4486/com.github.pwittchen.reactivenetwork D/onResume\ufe55 connected to WiFi\n08-29 16:51:29.068    4486-4486/com.github.pwittchen.reactivenetwork D/onResume\ufe55 connected to WiFi\n. Ok Thanks\n. ",
    "inijimenez": "fixed!! well done, thanks!\n. ",
    "JosiasSena": "Awesome man, thanks for keeping it in mind!\n. You my friend, are awesome!\n. Thanks for the quick response! \nSounds good man, just thought it would be worth mentioning it.\nThanks anyways, ill keep on looking into it a bit more and finding the best way to do this in combination with your library.\n. ",
    "wrparrish": "I think so,\nI am getting the calls now,  thank you!  The change you made makes sense,\nand explains the difference in what I was seeing upon upgrade.\nOn Sep 17, 2015 3:42 PM, \"Piotr Wittchen\" notifications@github.com wrote:\n\nenableInternetCheck() method is required only in the case, when you want\nto check if given WiFi network is connected to internet.\nIs it working now in your app?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/17#issuecomment-141204642\n.\n. I run into this issue often (In subways, and other areas where there is no signal at all) and it would be great to have a bundled solution with your library.  We've been using it in production for almost a year, and it's been great.\n. I like that!\n\nthe new method that does some light interval socket communication sounds perfect.  It would quickly catch a loss in connection ( IE  going underground to get into the subway ).    \nI do also find the wifi_connected_has_internet  and  wifi_connect_has_no_internet  very useful,  but if they need to be removed i can work around that.   Thanks for taking the time to address this request.\n. Great!  this looks like it will really help catch connection transitions when going underground.   Will start testing it at work, and over the weekend.\n. ",
    "carstenbaumhoegger": "Sure, here's the code, I'm using, hope this helps.\nThis is the method that does the subscription\njava\n    private void checkWifiConnection() {\n        mWifiSubscription = new ReactiveNetwork().observeConnectivity(mActivity)\n                .observeOn(Schedulers.io())\n                .subscribeOn(Schedulers.io())\n                .subscribe(connectivityStatus -> {\n                    if(connectivityStatus == ConnectivityStatus.WIFI_CONNECTED) {\n                        Log.w(TAG, \"wifi connected!\");\n                        hasWifi = true;\n                        if(!isConnected) {\n                            establishConnection();\n                        }\n                    } else {\n                        Log.w(TAG, \"wifi not connected! \" + connectivityStatus);\n                        hasWifi = false;\n                    }\n                });\n    }\nAnd here I call unsubscribe\njava\n    public void closeConnection() {\n        mWifiSubscription.unsubscribe();\n        mActivity.finish();\n    }\n. checkWifiConnection() get's called in the Activities onResume() method and closeConnection() is called in onPause().\nCould be wrong lib usage, but I don't know, what mistake I'm making here :D\n. Okay, I rewrote a few parts of the code and re-located the method calls and now it seems to work without the error.\nMy fault, sorry that I bothered you with it.\nGreat lib, keep up the good work!\n. ",
    "hcjcch": "java\nif (newStatus != status) {\n  status = newStatus;\n  subscriber.onNext(newStatus);\n}\nThe status is static ,if you quit the application(not kill),the statuswill keep the last time the value.If your network status not change,newStatus != status will false ,and tvConnectivityStatuswill always show Waiting for connectivity status until your network status be changed. \n. ",
    "Rainer-Lang": "@pwittchen I'm also interested in an example of your lib combined with retrofit.\n. Me too.\n. Maybe this helps \nhttps://medium.com/@amitshekhar/migrating-from-rxjava1-to-rxjava2-5dac0a94b4aa\n. ",
    "agatti": "I see...  Indeed I only use the library for checking the connectivity status.  Interestingly enough, the latest Android Studio lint didn't spot the problem when removing said permission (whilst complaining when removing any of the other ones).\nI wonder if it would be possible to only have said permission if building for anything earlier than API23 and switch to a request-permission model otherwise, but probably it'd be adding a bit too much complexity on something self-contained such as ReactiveNetwork and that it's doing its job flawlessly otherwise :)\nAnyway, I'll take a look at the SO link you mention, and thanks a lot for clarifying the issue so quickly.\nFeel free to close this issue if you see fit, then :)\n. ",
    "narendrakothamire": "Yes in some areas you might have your mobile data enabled but there may not be internet or there is no tower signal\n. ",
    "sregg": "Yes that would be a good idea to sepparate the features\nI managed to remove the unnecessary permissions using\n<uses-permission\n        android:name=\"android.permission.ACCESS_COARSE_LOCATION\"\n        tools:node=\"remove\"/>\n. ",
    "epicstar": "Wow, thanks for the immediate reply and possible solutions!\nBased on your current reply, I was thinking that since NetworkCallback class started at API 21, I was thinking that perhaps instead of using the new solution for N+... should the new strategy start with devices with API 21 (L) instead?\nAlso, I'm willing to devote my time to improve the library :)\n. I'm currently using this library with Retrofit + RxJava using Observable#retryWhen() using one of the older versions of ReactiveNetwork: https://github.com/rectangle-dbmi/Realtime-Port-Authority/blob/7.0.2/app/src/main/java/rectangledbmi/com/pittsburghrealtimetracker/BusMapFragment.java#L555\nThis will work when both of these two criteria are true:\n1. the restish server cannot be reached (the retrofit observable throws an IOException)\n2. when it is determined that this is due to a lost data connection on the phone side (though there is a bug where I'm not looking at SocketTimeoutException when I should... in other words, the app currently doesn't account for when the restish server is down and also thinks the phone connection is down... a bug)\nI know that maybe people will be checking internet connection first then do their retrofit call, but I did my logic in reverse. My observable chain is currently running in an interval, and I wanted my interval to stop polling the restish server when the internet is gone, and restart the second when the internet is back. The lines of code above do exactly, that.\nI hope that in the future, for the next rewritten feature of my app, I can a stack clicks for network calls when internet on the phone is somehow down and retry those click actions deriving from the logic above, too.\nCurrently, the rest of the code is a bit scary (because of my failure to use one of the MVVM patterns of Android... which will be fixed). I will be changing to the newer version of the library later AND will be using the internetConnectivityObservable when I have the time to change it.\n. Why not make the ReactiveNetwork methods static like the normal rxjava.Observable classes?\n. Shall I make an issue to do this? I think this should be a high priority since it would add some nice syntax parity to the rxjava project. That would also imply that you should add the @Deprecated tag to the public ReactiveNetwork constructors to tell users to use the static methods to instantiate an ReactiveNetwork object\n. As an addendum to the description, I would consider this a bit of a high priority. The library will greatly benefit from using the newer operators. If you need help migrating all your code to using the newer operators, the soonest I can create a PR would be two weeks.\nBased on my little understanding of the code, I expect this to be low cost change with an infinite amount of benefit.\n. Another recommendation is to use retrolambda since jack isn't \"production ready\" yet: https://github.com/orfjackal/retrolambda. I would recommend to use a Wiki page for guidelines instead. That way, you don't have to do commits for each change to the release process.. ",
    "YuriHeupa": "Also waiting for this! \n. ",
    "jaychang0917": "I get your points. But for me, I prefer to use static factory method like create() or newInstance() according Effective Java - Item 1: Consider static factory methods instead of constructors. Just my two cents.\n. ",
    "tushar-acharya": "@pwittchen I've raised a pull request with latest changes at #164 Let me know if you want any changes there.. @pwittchen I've raised a pull request with latest changes at #164 Let me know if you want any changes there.. @pwittchen I've worked on some changes regarding this. Would you accept a Pull Request?. #164 . Thanks for the review. I'll fix it. @pwittchen sure will do that. @pwittchen Awesome \ud83d\ude04 Thanks . @pwittchen Let me know if you need any help in testing any specific scenarios. We are currently using this as an extra module. It would really help if we can release this as a jcenter dependency :) No rush though. ",
    "jackmalpo": "What's the status on this?. ",
    "renegens": "Thanks for the reply. I went ahead and did it the second solution. I think it's more robust in case I need in the future to add something which has a scope of the whole app. \nEdit: FYI I need to combine both shared pref and an event bus. The event bus is only working if the app is in the foreground and sticky events were not working correctly. So when the app is not in the foreground I check a shared pref boolean to set the connectivity indicator in the onResume method of every fragment. \n. ",
    "Kisty": "Hey thanks for getting back to me.\nI must admit I am new to RxJava, but I hae followed that pattern where you subscribe in onResume and unsubscribe in onPause. I do unsubscribe safely in the way you have outlined but I still got a crash. As I have multiple subscriptions, I add them to a CompositeSubscription.\nI think there's just a small window where this crash can happen as the unsubscribe call is executed on the UI thread. I've seen other developers with similar issues. See http://stackoverflow.com/a/3568906/818821\n``` java\n    @Override\n    protected void onResume() {\n        super.onResume();\n    subscriptions = new CompositeSubscription();\n\n    Subscriber<Connectivity> connectivitySubscriber = new Subscriber<Connectivity>() {\n        @Override\n        public void onCompleted() {\n\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            Timber.e(e, \"Problem with connectivity subscriber\");\n        }\n\n        @Override\n        public void onNext(Connectivity connectivity) {\n            NetworkInfo.State state = connectivity.getState();\n            if (state == NetworkInfo.State.CONNECTED) {\n                if (connectivity.getType() == ConnectivityManager.TYPE_MOBILE) {\n                    if (!UserPreferences.getDataAllowOnceMeteredConnection(MainActivity.this)\n                            && !UserPreferences.getDataAlwaysAllowMeteredConnection(MainActivity.this)) {\n                        MeteredDialogFragment.newInstance(R.string.dialog_metered_network_stream_videos).show(getSupportFragmentManager(), MeteredDialogFragment.TAG);\n                    }\n                }\n                connected = true;\n            } else if (state == NetworkInfo.State.DISCONNECTED) {\n                //Show dialog if not shown\n                if (!offlineDialogShown) {\n                    OfflineDialogFragment.newInstance(R.string.dialog_message_menu_offline).show(getSupportFragmentManager(), OfflineDialogFragment.TAG);\n                    offlineDialogShown = true;\n                }\n                connected = false;\n            }\n            if (!isFinishing()) {\n                //Refresh menu items\n                refreshContentPager();\n            }\n            Timber.d(\"Connectivity changed: %s\", connectivity.toString());\n            BeeLog.d(\"MainActivity\", String.format(\"Connectivity changed: %s\", connectivity.toString()));\n        }\n    };\n    Observable<Connectivity> observable = createConnectivityObservable();\n    //Make it a behaviour subject so that it stores the last value and emits that value to any subscribers\n    //Assume it's connected to wifi else if we give disconnected, it will fire offline dialog\n    connectivityBehaviourSubject = BehaviorSubject.create(Connectivity.create(NetworkInfo.State.CONNECTED, ConnectivityManager.TYPE_WIFI, \"WIFI\"));\n    Subscription subscription1 = observable.subscribe(connectivityBehaviourSubject);\n    Subscription subscription2 = connectivityBehaviourSubject.subscribe(connectivitySubscriber);\n\n    //TODO check if both are needed\n    subscriptions.add(subscription1);\n    subscriptions.add(subscription2);\n}\n\n@RxLogObservable\nprivate Observable<Connectivity> createConnectivityObservable() {\n    return ReactiveNetwork.observeNetworkConnectivity(this)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .filter(Connectivity.hasState(NetworkInfo.State.CONNECTED, NetworkInfo.State.DISCONNECTED))\n            .distinctUntilChanged();\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n\n    subscriptions.unsubscribe();\n}\n\n``\n. I see what the problem is but am trying to compile it on my workstation and its failing to run:library:findbugs`. Any ideas?\njava.io.IOException: No files to analyze could be opened\n. Ah, needed to disable org.gradle.parallel in gradle.properties\n. It should do. I'll give it a try now.\nOn Fri, 30 Sep 2016 at 14:46 Piotr Wittchen notifications@github.com\nwrote:\n\nThanks for the PR. Does it fixes your problem from issue #87\nhttps://github.com/pwittchen/ReactiveNetwork/issues/87?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/pull/88#issuecomment-250748136,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADF-6P_6aJIJ_m-rbTbQ5oT5E-v7J0_3ks5qvRKagaJpZM4KK4LU\n.\n. Thanks, man. Also, did you want some tests? I wasn't sure how to do them or whi h class to do them in.\n. Just making changes you've requested and pretty much ready to push. Shall we make the immediate check API as default in demo app and README examples or would you prefer to leave it not as default but add a note? \n\nI think users may expect the check to be immediate, but that may just be me.\n. Thanks for that. I can put some tests together to see if negative values throw exceptions for the method with initial interval as a parameter. \nThanks for explaining about the tests. I was trying to find code which test the expected behaviour of the observables, though am uncertain how to as the tests require internet or changing network types to assert the right network states are given in onNext. I'll have a look in to it.\n. Thanks for pointing me to that script. I didn't run it but went through the commands trying to understand a bit of what it was doing. Was quite impressed with it. Will be using HEAD@{n} notation more often! Hope it looks good now.\n. Hi! How does the PR look now?\n. OK. But surely it's opening a new socket every ping and leaving the connection open per ping is only going to accumulate sockets open or do they not work in that way?\n. Seriously. Nice one, man! Love the test coverage. That percentage just keeps going up!\n. Can you rebase the PR on the master branch and push changes to your pr branch? I think the code coverage tool fails have been fixed with a recent commit.\n. I think from the SO post, you can either use the MockitoRule or use the manual setUp() and tearDown() methods. You don't have to use both. So using just a MockitoRule should suffice. \nThat is, unless I've missed something with what you want to do in setUp() and tearDown().\n. What I meant is that by using a MockitoRule, you don't need the call to initAnnotations() in setUp(). Also the rule does a call to validateMockitoUsage() in tearDown(). It'll be fine as is though.\n. That is true, however it's only for the demo app, so wouldn't be part of the library. However, it would be a template on how to use the library. Retrolambda seems pretty solid and an industry standard by many at present.. I agree that this should probably be its own library or an easy way to switch on, defaulted to off. Although, it would be useful to know if the user is in airplane mode so to offer a quick fix for user to get connection.. LGTM. Can't see any problems. \ud83d\udc4d. @herberthartkor please see the above comment https://github.com/pwittchen/ReactiveNetwork/issues/170#issuecomment-352266454. OK, so perhaps add a @NonNull annotation to the Connectivity#create(Context) method?. Would be very interesting in how you achieve this! I guess take it from git log? I think some manual tidying would be needed if that's the case.. Aww, thanks!. Thanks for getting back to me so quick! That makes sense, though what if there's lots of connection events in a small space of time, e.g. DISCONNECTED -> CONNECTING -> CONNECTED then you'd fire off many internet checks. Couldn't you just filter CONNECTED and DISCONNECTED states? Also, putting such an API in the library might be a good idea? Although it may be subjective on when to react to network changes.... I know it's bad practice but I can't think of any other way to do it.\n. Ah, actually I don't think we have to unsubscribe on the UI thread. Am looking into it.\n. Scrap that. You do need to unregister on the UI thread.\n. The thing is it is safe to ignore the exception because if we want to unregister the receiver and it's not registered, then by definition it is unregistered anyway, no?\n. Have just tested it for a while on the Asus Transformer TF201 (API 16) tablet and seems to have squished the crash.\n. Okiedokes. Thanks!\n. OK. Although the overloaded interval method that takes only delay and time unit maps to interval with initial delay and normal delay as the delay taken in the overloaded interval method, so I don't think it's needed.\n. I can put another constant in if you want though.\n. Tried doing that but positive checking throws for 0 or lower so had to mirror the preconditions code.\n. And 0 is what we want for an immediate check.\n. Ah, ok!\n. Nice! Didn't know you can target sdks per test. \ud83d\udc4d\n. Oh, really? That surprises me. Are you sure because I can remember using sdk = 19 on a test class a couple of years ago... Possibly with Robolectric 2.4 or something like that...\n. Apparently, it can support API 16 and defaults to build version in Build.VERSION.SDK_INT. See http://robolectric.org/javadoc/3.0/org/robolectric/annotation/Config.html#sdk--\n. Fair enough...\n. ",
    "akarnokd": "FYI, Observable.fromEmitter is deprecated and is scheduled for removal in 1.3. Use the Observable.create(Action<Emitter<T>>, Emitter.BackpressureMode) instead.. ",
    "codecov-io": "Current coverage is 54.08% (diff: 100%)\n\nNo coverage report found for master at b04d14f.\nPowered by Codecov. Last update b04d14f...d6daa0c\n. ## Current coverage is 58.49% (diff: 100%)\nMerging #108 into master will increase coverage by 4.40%\n\ndiff\n@@             master       #108   diff @@\n==========================================\n  Files             7          7          \n  Lines           159        159          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits             86         93     +7   \n+ Misses           68         56    -12   \n- Partials          5         10     +5\n\nPowered by Codecov. Last update 9217705...7f9ed54\n. ## Current coverage is 59.74% (diff: 100%)\nMerging #109 into master will increase coverage by 1.25%\n\ndiff\n@@             master       #109   diff @@\n==========================================\n  Files             7          7          \n  Lines           159        159          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits             93         95     +2   \n+ Misses           56         54     -2   \n  Partials         10         10\n\nPowered by Codecov. Last update a3f03dc...87d356f\n. ## Current coverage is 65.40% (diff: 100%)\nMerging #110 into master will increase coverage by 5.66%\n\ndiff\n@@             master       #110   diff @@\n==========================================\n  Files             7          7          \n  Lines           159        159          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits             95        104     +9   \n+ Misses           54         44    -10   \n- Partials         10         11     +1\n\nPowered by Codecov. Last update d819875...1d9ca22\n. ## Current coverage is 69.81% (diff: 100%)\nMerging #111 into master will increase coverage by 4.40%\n\ndiff\n@@             master       #111   diff @@\n==========================================\n  Files             7          7          \n  Lines           159        159          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits            104        111     +7   \n+ Misses           44         37     -7   \n  Partials         11         11\n\nPowered by Codecov. Last update 2cb504b...f022853\n. ## Current coverage is 73.75% (diff: 53.84%)\nMerging #112 into master will increase coverage by 3.93%\n\ndiff\n@@             master       #112   diff @@\n==========================================\n  Files             7          7          \n  Lines           159        160     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits            111        118     +7   \n+ Misses           37         31     -6   \n  Partials         11         11\n\nPowered by Codecov. Last update 48d9940...479496e\n. ## Current coverage is 77.01% (diff: 100%)\nMerging #113 into master will increase coverage by 3.26%\n\ndiff\n@@             master       #113   diff @@\n==========================================\n  Files             7          7          \n  Lines           160        161     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n+ Hits            118        124     +6   \n+ Misses           31         26     -5   \n  Partials         11         11\n\nPowered by Codecov. Last update b67e057...4141c28\n. ## Current coverage is 72.92% (diff: 50.00%)\nMerging #117 into master will decrease coverage by 4.09%\n\ndiff\n@@             master       #117   diff @@\n==========================================\n  Files             7          7          \n  Lines           161        181    +20   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         22     +5   \n==========================================\n+ Hits            124        132     +8   \n- Misses           26         36    +10   \n- Partials         11         13     +2\n\nPowered by Codecov. Last update 7e0d22e...f879403\n. ## Current coverage is 77.01% (diff: 100%)\nMerging #123 into master will not change coverage\n\ndiff\n@@             master       #123   diff @@\n==========================================\n  Files             7          7          \n  Lines           161        161          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         17         17          \n==========================================\n  Hits            124        124          \n  Misses           26         26          \n  Partials         11         11\n\nPowered by Codecov. Last update 7e0d22e...c1fae1a\n. ## Current coverage is 72.68% (diff: 58.62%)\nMerging #127 into master will decrease coverage by 0.24%\n\ndiff\n@@             master       #127   diff @@\n==========================================\n  Files             7          8     +1   \n  Lines           181        205    +24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         22         21     -1   \n==========================================\n+ Hits            132        149    +17   \n- Misses           36         45     +9   \n+ Partials         13         11     -2\n\nPowered by Codecov. Last update 511d746...d6f1cbd\n. ## Current coverage is 72.68% (diff: 100%)\nMerging #128 into master will not change coverage\n\ndiff\n@@             master       #128   diff @@\n==========================================\n  Files             8          8          \n  Lines           205        205          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            149        149          \n  Misses           45         45          \n  Partials         11         11\n\nPowered by Codecov. Last update b3d6198...53a7b25\n. ## Current coverage is 73.17% (diff: 100%)\nMerging #130 into master will increase coverage by 0.48%\n\ndiff\n@@             master       #130   diff @@\n==========================================\n  Files             8          8          \n  Lines           205        205          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n+ Hits            149        150     +1   \n+ Misses           45         44     -1   \n  Partials         11         11\n\nPowered by Codecov. Last update 32e3e82...f852a53\n. ## Current coverage is 73.17% (diff: 100%)\nMerging #131 into master will not change coverage\n\ndiff\n@@             master       #131   diff @@\n==========================================\n  Files             8          8          \n  Lines           205        205          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            150        150          \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update 84f7a3c...e4ab2e9\n. ## Current coverage is 73.17% (diff: 100%)\nMerging #133 into master will not change coverage\n\ndiff\n@@             master       #133   diff @@\n==========================================\n  Files             8          8          \n  Lines           205        205          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            150        150          \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update bb3b5ce...9a0e22d. ## Current coverage is 74.05% (diff: 100%)\nMerging #138 into master will increase coverage by 0.88%\n\ndiff\n@@             master       #138   diff @@\n==========================================\n  Files             8          8          \n  Lines           205        212     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n+ Hits            150        157     +7   \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update d7f0fef...73ab73e. ## Current coverage is 74.05% (diff: 100%)\nMerging #139 into master will not change coverage\n\ndiff\n@@             master       #139   diff @@\n==========================================\n  Files             8          8          \n  Lines           212        212          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            157        157          \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update 70288ec...b7f1b0f. ## Current coverage is 74.29% (diff: 100%)\nMerging #143 into master will increase coverage by 0.24%\n\ndiff\n@@             master       #143   diff @@\n==========================================\n  Files             8          8          \n  Lines           212        214     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n+ Hits            157        159     +2   \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update b49dff2...3f4e60f. ## Current coverage is 74.29% (diff: 100%)\nMerging #147 into master will not change coverage\n\ndiff\n@@             master       #147   diff @@\n==========================================\n  Files             8          8          \n  Lines           214        214          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            159        159          \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update bb607d2...db1e614. ## Current coverage is 74.29% (diff: 100%)\nMerging #148 into master will not change coverage\n\ndiff\n@@             master       #148   diff @@\n==========================================\n  Files             8          8          \n  Lines           214        214          \n  Methods           0          0          \n  Messages          0          0          \n  Branches         21         21          \n==========================================\n  Hits            159        159          \n  Misses           44         44          \n  Partials         11         11\n\nPowered by Codecov. Last update ca3de16...0ae5917. # Codecov Report\nMerging #153 into master will increase coverage by -1.8%.\n\n```diff\n@@           Coverage Diff            @@\nmaster    #153     +/-\n========================================\n- Coverage   74.29%   72.5%   -1.8%   \n========================================\n  Files           8       9      +1   \n  Lines         214     291     +77   \n  Branches       21      28      +7   \n========================================\n+ Hits          159     211     +52   \n- Misses         44      54     +10   \n- Partials       11      26     +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...tchen/reactivenetwork/library/ReactiveNetwork.java | 80% <\u00f8> (\u00f8) | :white_check_mark: |\n| ...reactivenetwork/library/ConnectivityPredicate.java | 50% <50%> (\u00f8) | |\n| ...wittchen/reactivenetwork/library/Connectivity.java | 70.58% <73.73%> (+0.21%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a99391...f75b163. Read the comment docs.. # Codecov Report\nMerging #155 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster    #155   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files           9       9         \n  Lines         291     291         \n  Branches       28      28         \n======================================\n  Hits          211     211         \n  Misses         54      54         \n  Partials       26      26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b18944...df55226. Read the comment docs.. # Codecov Report\nMerging #156 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster    #156   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files           9       9         \n  Lines         291     291         \n  Branches       28      28         \n======================================\n  Hits          211     211         \n  Misses         54      54         \n  Partials       26      26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2b0c73...255e890. Read the comment docs.. # Codecov Report\nMerging #157 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster    #157   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files           9       9         \n  Lines         291     291         \n  Branches       28      28         \n======================================\n  Hits          211     211         \n  Misses         54      54         \n  Partials       26      26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d14e9e5...9bcbf64. Read the comment docs.. # Codecov Report\nMerging #161 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster    #161   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files           9       9         \n  Lines         291     291         \n  Branches       28      28         \n======================================\n  Hits          211     211         \n  Misses         54      54         \n  Partials       26      26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ef5b9b...58ef8d3. Read the comment docs.. # Codecov Report\nMerging #162 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster    #162   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files           9       9         \n  Lines         291     291         \n  Branches       28      28         \n======================================\n  Hits          211     211         \n  Misses         54      54         \n  Partials       26      26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2c0b59...0e8ae13. Read the comment docs.. # Codecov Report\nMerging #164 into RxJava2.x will decrease coverage by 3.12%.\nThe diff coverage is 55.55%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #164      +/-\n=============================================\n- Coverage       72.5%   69.38%   -3.13%   \n=============================================\n  Files              9        9            \n  Lines            291      294       +3   \n  Branches          28       28            \n=============================================\n- Hits             211      204       -7   \n- Misses            54       65      +11   \n+ Partials          26       25       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...tchen/reactivenetwork/library/ReactiveNetwork.java | 80% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ving/strategy/SocketInternetObservingStrategy.java | 95.83% <100%> (\u00f8) | :arrow_up: |\n| ...ing/strategy/LollipopNetworkObservingStrategy.java | 75% <100%> (\u00f8) | :arrow_up: |\n| .../strategy/MarshmallowNetworkObservingStrategy.java | 64.44% <100%> (\u00f8) | :arrow_up: |\n| ...reactivenetwork/library/ConnectivityPredicate.java | 50% <100%> (\u00f8) | :arrow_up: |\n| .../strategy/PreLollipopNetworkObservingStrategy.java | 37.5% <27.27%> (-28.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 14f2423...190d9d6. Read the comment docs.. # Codecov Report\nMerging #168 into RxJava2.x will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #168   +/-\n==========================================\n  Coverage      69.38%   69.38%         \n==========================================\n  Files              9        9         \n  Lines            294      294         \n  Branches          28       28         \n==========================================\n  Hits             204      204         \n  Misses            65       65         \n  Partials          25       25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...tivenetwork/library/rx2/ConnectivityPredicate.java | 50% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 095a769...131ba8c. Read the comment docs.\n. # Codecov Report\nMerging #180 into RxJava2.x will increase coverage by 0.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\nRxJava2.x   #180      +/-\n===========================================\n+ Coverage      69.38%    70%   +0.61%   \n===========================================\n  Files              9      9            \n  Lines            294    300       +6   \n  Branches          28     28            \n===========================================\n+ Hits             204    210       +6   \n  Misses            65     65            \n  Partials          25     25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96.66% <100%> (+0.83%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4576a5...62cc012. Read the comment docs.\n. # Codecov Report\nMerging #181 into RxJava2.x will increase coverage by 0.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\nRxJava2.x   #181      +/-\n===========================================\n+ Coverage      69.38%    70%   +0.61%   \n===========================================\n  Files              9      9            \n  Lines            294    300       +6   \n  Branches          28     28            \n===========================================\n+ Hits             204    210       +6   \n  Misses            65     65            \n  Partials          25     25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96.66% <100%> (+0.83%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4576a5...4dd966f. Read the comment docs.\n. # Codecov Report\nMerging #183 into RxJava2.x will decrease coverage by 0.42%.\nThe diff coverage is 63.63%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #183      +/-\n=============================================\n- Coverage         70%   69.57%   -0.43%   \n=============================================\n  Files              9        9            \n  Lines            300      309       +9   \n  Branches          28       28            \n=============================================\n+ Hits             210      215       +5   \n- Misses            65       69       +4   \n  Partials          25       25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96.66% <\u00f8> (\u00f8) | :arrow_up: |\n| ...n/reactivenetwork/library/rx2/ReactiveNetwork.java | 72.41% <63.63%> (-7.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 31f1e99...e046eff. Read the comment docs.\n. # Codecov Report\nMerging #186 into RxJava2.x will increase coverage by 0.76%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #186      +/-\n=============================================\n+ Coverage      69.57%   70.34%   +0.76%   \n=============================================\n  Files              9        9            \n  Lines            309      317       +8   \n  Branches          28       29       +1   \n=============================================\n+ Hits             215      223       +8   \n  Misses            69       69            \n  Partials          25       25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...chen/reactivenetwork/library/rx2/Connectivity.java | 70.58% <100%> (\u00f8) | :arrow_up: |\n| ...tivenetwork/library/rx2/ConnectivityPredicate.java | 70% <88.88%> (+20%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71c7253...83e48b4. Read the comment docs.\n. # Codecov Report\nMerging #187 into RxJava1.x will increase coverage by 0.73%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava1.x     #187      +/-\n=============================================\n+ Coverage       72.5%   73.24%   +0.73%   \n=============================================\n  Files              9        9            \n  Lines            291      299       +8   \n  Branches          28       29       +1   \n=============================================\n+ Hits             211      219       +8   \n  Misses            54       54            \n  Partials          26       26\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...wittchen/reactivenetwork/library/Connectivity.java | 70.58% <100%> (\u00f8) | :arrow_up: |\n| ...reactivenetwork/library/ConnectivityPredicate.java | 70% <88.88%> (+20%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 87c4d03...763d3ca. Read the comment docs.\n. # Codecov Report\nMerging #188 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #188   +/-\n==========================================\n  Coverage      70.34%   70.34%         \n==========================================\n  Files              9        9         \n  Lines            317      317         \n  Branches          29       29         \n==========================================\n  Hits             223      223         \n  Misses            69       69         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 547786e...23b94dc. Read the comment docs.\n. # Codecov Report\nMerging #189 into RxJava1.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava1.x     #189   +/-\n==========================================\n  Coverage      73.24%   73.24%         \n==========================================\n  Files              9        9         \n  Lines            299      299         \n  Branches          29       29         \n==========================================\n  Hits             219      219         \n  Misses            54       54         \n  Partials          26       26\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fb57e3b...611b8b2. Read the comment docs.\n. # Codecov Report\nMerging #196 into RxJava2.x will increase coverage by 2.45%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@             Coverage Diff              @@\nRxJava2.x    #196      +/-\n============================================\n+ Coverage      70.34%   72.8%   +2.45%   \n============================================\n  Files              9      10       +1   \n  Lines            317     353      +36   \n  Branches          29      31       +2   \n============================================\n+ Hits             223     257      +34   \n  Misses            69      69            \n- Partials          25      27       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96.77% <100%> (+0.1%) | :arrow_up: |\n| ...n/reactivenetwork/library/rx2/ReactiveNetwork.java | 73.33% <75%> (+0.91%) | :arrow_up: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 94.11% <94.11%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5c0dbaf...55764c9. Read the comment docs.\n. # Codecov Report\nMerging #199 into RxJava1.x will increase coverage by 1.98%.\nThe diff coverage is 93.93%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava1.x     #199      +/-\n=============================================\n+ Coverage      73.24%   75.22%   +1.98%   \n=============================================\n  Files              9       10       +1   \n  Lines            299      331      +32   \n  Branches          29       31       +2   \n=============================================\n+ Hits             219      249      +30   \n  Misses            54       54            \n- Partials          26       28       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96% <100%> (+0.16%) | :arrow_up: |\n| ...tchen/reactivenetwork/library/ReactiveNetwork.java | 80.95% <100%> (+0.95%) | :arrow_up: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 93.33% <93.33%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fc1c1f0...9cdae96. Read the comment docs.\n. # Codecov Report\nMerging #200 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nRxJava2.x    #200   +/-\n=========================================\n  Coverage       72.8%   72.8%         \n=========================================\n  Files             10      10         \n  Lines            353     353         \n  Branches          31      31         \n=========================================\n  Hits             257     257         \n  Misses            69      69         \n  Partials          27      27\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b882d0c...8708f41. Read the comment docs.\n. # Codecov Report\nMerging #201 into RxJava1.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava1.x     #201   +/-\n==========================================\n  Coverage      75.22%   75.22%         \n==========================================\n  Files             10       10         \n  Lines            331      331         \n  Branches          31       31         \n==========================================\n  Hits             249      249         \n  Misses            54       54         \n  Partials          28       28\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 765d8d3...128f1eb. Read the comment docs.\n. # Codecov Report\nMerging #210 into RxJava2.x will increase coverage by 0.2%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nRxJava2.x     #210     +/-\n============================================\n+ Coverage      75.92%   76.12%   +0.2%   \n============================================\n  Files             10       10           \n  Lines            353      356      +3   \n  Branches          31       32      +1   \n============================================\n+ Hits             268      271      +3   \n  Misses            61       61           \n  Partials          24       24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...chen/reactivenetwork/library/rx2/Connectivity.java | 72.95% <100%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5234d42...de499e8. Read the comment docs.\n. # Codecov Report\nMerging #211 into RxJava1.x will increase coverage by 0.22%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava1.x     #211      +/-\n=============================================\n+ Coverage      75.22%   75.44%   +0.22%   \n=============================================\n  Files             10       10            \n  Lines            331      334       +3   \n  Branches          31       32       +1   \n=============================================\n+ Hits             249      252       +3   \n  Misses            54       54            \n  Partials          28       28\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...wittchen/reactivenetwork/library/Connectivity.java | 71.31% <100%> (+0.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5120ec...d0f2a84. Read the comment docs.\n. # Codecov Report\nMerging #213 into RxJava2.x will decrease coverage by 0.84%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #213      +/-\n=============================================\n- Coverage      76.12%   75.27%   -0.85%   \n=============================================\n  Files             10       10            \n  Lines            356      360       +4   \n  Branches          32       32            \n=============================================\n  Hits             271      271            \n- Misses            61       65       +4   \n  Partials          24       24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...n/reactivenetwork/library/rx2/ReactiveNetwork.java | 70.58% <16.66%> (-9.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cc97297...7781c9c. Read the comment docs.\n. # Codecov Report\nMerging #214 into RxJava1.x will decrease coverage by 0.3%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava1.x     #214      +/-\n=============================================\n- Coverage      75.44%   75.14%   -0.31%   \n=============================================\n  Files             10       10            \n  Lines            334      338       +4   \n  Branches          32       32            \n=============================================\n+ Hits             252      254       +2   \n- Misses            54       56       +2   \n  Partials          28       28\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...tchen/reactivenetwork/library/ReactiveNetwork.java | 76% <66.66%> (-4.96%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 780fded...5e1578b. Read the comment docs.\n. # Codecov Report\nMerging #216 into RxJava2.x will increase coverage by 0.66%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #216      +/-\n=============================================\n+ Coverage      75.27%   75.94%   +0.66%   \n=============================================\n  Files             10       10            \n  Lines            360      370      +10   \n  Branches          32       33       +1   \n=============================================\n+ Hits             271      281      +10   \n  Misses            65       65            \n  Partials          24       24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../strategy/PreLollipopNetworkObservingStrategy.java | 46.87% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ving/strategy/SocketInternetObservingStrategy.java | 97.29% <100%> (+0.52%) | :arrow_up: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 94.73% <100%> (+0.61%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b2144d...232dc0b. Read the comment docs.\n. # Codecov Report\nMerging #217 into RxJava1.x will increase coverage by 0.71%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava1.x     #217      +/-\n=============================================\n+ Coverage      75.14%   75.86%   +0.71%   \n=============================================\n  Files             10       10            \n  Lines            338      348      +10   \n  Branches          32       33       +1   \n=============================================\n+ Hits             254      264      +10   \n  Misses            56       56            \n  Partials          28       28\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 96.77% <100%> (+0.77%) | :arrow_up: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 94.11% <100%> (+0.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 51ecd5d...3889e93. Read the comment docs.\n. # Codecov Report\nMerging #220 into RxJava2.x will increase coverage by 1.68%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #220      +/-\n=============================================\n+ Coverage      75.94%   77.62%   +1.68%   \n=============================================\n  Files             10       10            \n  Lines            370      371       +1   \n  Branches          33       33            \n=============================================\n+ Hits             281      288       +7   \n+ Misses            65       58       -7   \n- Partials          24       25       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../strategy/PreLollipopNetworkObservingStrategy.java | 66.66% <100%> (+19.79%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e65392...c9d1739. Read the comment docs.\n. # Codecov Report\nMerging #223 into RxJava2.x will increase coverage by 1.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nRxJava2.x    #223      +/-\n============================================\n+ Coverage      77.62%   78.7%   +1.07%   \n============================================\n  Files             10      10            \n  Lines            371     371            \n  Branches          33      33            \n============================================\n+ Hits             288     292       +4   \n+ Misses            58      54       -4   \n  Partials          25      25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../strategy/MarshmallowNetworkObservingStrategy.java | 73.33% <\u00f8> (+8.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77c09b2...854eda8. Read the comment docs.\n. # Codecov Report\nMerging #224 into RxJava2.x will increase coverage by 3.37%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #224      +/-\n=============================================\n+ Coverage       78.7%   82.08%   +3.37%   \n=============================================\n  Files             10       10            \n  Lines            371      374       +3   \n  Branches          33       33            \n=============================================\n+ Hits             292      307      +15   \n+ Misses            54       42      -12   \n  Partials          25       25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../strategy/MarshmallowNetworkObservingStrategy.java | 100% <100%> (+26.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cbadefe...5cff54f. Read the comment docs.\n. # Codecov Report\nMerging #229 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #229   +/-\n==========================================\n  Coverage      83.41%   83.41%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             322      322         \n  Misses            39       39         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3091edf...e1a476a. Read the comment docs.\n. # Codecov Report\nMerging #236 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #236   +/-\n==========================================\n  Coverage      83.41%   83.41%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             322      322         \n  Misses            39       39         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 648e66a...66b4364. Read the comment docs.\n. # Codecov Report\nMerging #237 into RxJava1.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava1.x     #237   +/-\n==========================================\n  Coverage      75.86%   75.86%         \n==========================================\n  Files             10       10         \n  Lines            348      348         \n  Branches          33       33         \n==========================================\n  Hits             264      264         \n  Misses            56       56         \n  Partials          28       28\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 389d579...6a41a52. Read the comment docs.\n. # Codecov Report\nMerging #238 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #238   +/-\n==========================================\n  Coverage      83.41%   83.41%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             322      322         \n  Misses            39       39         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc496dc...5a5d335. Read the comment docs.\n. # Codecov Report\nMerging #249 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #249   +/-\n==========================================\n  Coverage      83.41%   83.41%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             322      322         \n  Misses            39       39         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdfe5d1...abc1fd5. Read the comment docs.\n. # Codecov Report\nMerging #252 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #252   +/-\n==========================================\n  Coverage      83.41%   83.41%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             322      322         \n  Misses            39       39         \n  Partials          25       25\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcba357...86e4690. Read the comment docs.\n. # Codecov Report\nMerging #259 into RxJava1.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava1.x     #259   +/-\n==========================================\n  Coverage      75.86%   75.86%         \n==========================================\n  Files             10       10         \n  Lines            348      348         \n  Branches          33       33         \n==========================================\n  Hits             264      264         \n  Misses            56       56         \n  Partials          28       28\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc6f5f1...d0eff4d. Read the comment docs.\n. # Codecov Report\nMerging #264 into RxJava2.x will decrease coverage by 0.77%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #264      +/-\n=============================================\n- Coverage      83.41%   82.64%   -0.78%   \n=============================================\n  Files             10       10            \n  Lines            386      386            \n  Branches          33       33            \n=============================================\n- Hits             322      319       -3   \n- Misses            39       40       +1   \n- Partials          25       27       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 91.89% <0%> (-5.41%) | :arrow_down: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 92.1% <0%> (-2.64%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a193fed...a2797da. Read the comment docs.\n. # Codecov Report\nMerging #268 into RxJava1.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava1.x     #268   +/-\n==========================================\n  Coverage      75.86%   75.86%         \n==========================================\n  Files             10       10         \n  Lines            348      348         \n  Branches          33       33         \n==========================================\n  Hits             264      264         \n  Misses            56       56         \n  Partials          28       28\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 298dc45...a4ac53b. Read the comment docs.\n. # Codecov Report\nMerging #269 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #269   +/-\n==========================================\n  Coverage      82.64%   82.64%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             319      319         \n  Misses            40       40         \n  Partials          27       27\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 61952e9...4bacf29. Read the comment docs.\n. # Codecov Report\nMerging #278 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #278   +/-\n==========================================\n  Coverage      82.64%   82.64%         \n==========================================\n  Files             10       10         \n  Lines            386      386         \n  Branches          33       33         \n==========================================\n  Hits             319      319         \n  Misses            40       40         \n  Partials          27       27\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76ab2b2...8002d1e. Read the comment docs.\n. # Codecov Report\nMerging #279 into RxJava2.x will decrease coverage by 0.3%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #279      +/-\n=============================================\n- Coverage      82.64%   82.33%   -0.31%   \n=============================================\n  Files             10       11       +1   \n  Lines            386      436      +50   \n  Branches          33       33            \n=============================================\n+ Hits             319      359      +40   \n- Misses            40       47       +7   \n- Partials          27       30       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...n/reactivenetwork/library/rx2/ReactiveNetwork.java | 83.33% <75%> (+9.8%) | :arrow_up: |\n| .../internet/observing/InternetObservingSettings.java | 85.18% <85.18%> (\u00f8) | |\n| ...hen/reactivenetwork/library/rx2/Preconditions.java | 46.66% <0%> (-40%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02449af...f906b8b. Read the comment docs.\n. # Codecov Report\nMerging #283 into RxJava2.x will decrease coverage by 2.88%.\nThe diff coverage is 43.47%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #283      +/-\n=============================================\n- Coverage      82.33%   79.45%   -2.89%   \n=============================================\n  Files             11       11            \n  Lines            436      438       +2   \n  Branches          33       33            \n=============================================\n- Hits             359      348      -11   \n- Misses            47       60      +13   \n  Partials          30       30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../internet/observing/InternetObservingSettings.java | 85.18% <100%> (\u00f8) | :arrow_up: |\n| ...tivenetwork/library/rx2/ConnectivityPredicate.java | 90% <100%> (\u00f8) | :arrow_up: |\n| ...chen/reactivenetwork/library/rx2/Connectivity.java | 67.4% <35%> (-9.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 597dc03...e53a530. Read the comment docs.\n. # Codecov Report\nMerging #287 into RxJava2.x will increase coverage by 1.59%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #287      +/-\n=============================================\n+ Coverage      79.45%   81.05%   +1.59%   \n=============================================\n  Files             11       11            \n  Lines            438      438            \n  Branches          33       33            \n=============================================\n+ Hits             348      355       +7   \n+ Misses            60       56       -4   \n+ Partials          30       27       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...chen/reactivenetwork/library/rx2/Connectivity.java | 68.14% <0%> (+0.74%) | :arrow_up: |\n| ...hen/reactivenetwork/library/rx2/Preconditions.java | 86.66% <0%> (+39.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f4081c...69a3fa3. Read the comment docs.\n. # Codecov Report\nMerging #292 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #292   +/-\n==========================================\n  Coverage      81.05%   81.05%         \n==========================================\n  Files             11       11         \n  Lines            438      438         \n  Branches          33       33         \n==========================================\n  Hits             355      355         \n  Misses            56       56         \n  Partials          27       27\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e4cd4b...19edcf7. Read the comment docs.\n. # Codecov Report\nMerging #303 into RxJava2.x will increase coverage by 0.11%.\nThe diff coverage is 85%.\n\n\n```diff\n@@              Coverage Diff              @@\nRxJava2.x     #303      +/-\n=============================================\n+ Coverage      81.05%   81.16%   +0.11%   \n=============================================\n  Files             11       11            \n  Lines            438      446       +8   \n  Branches          33       33            \n=============================================\n+ Hits             355      362       +7   \n- Misses            56       57       +1   \n  Partials          27       27\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ving/strategy/SocketInternetObservingStrategy.java | 91.89% <\u00f8> (\u00f8) | :arrow_up: |\n| ...n/reactivenetwork/library/rx2/ReactiveNetwork.java | 83.33% <80%> (\u00f8) | :arrow_up: |\n| ...trategy/WalledGardenInternetObservingStrategy.java | 92.5% <85.71%> (+0.39%) | :arrow_up: |\n| .../internet/observing/InternetObservingSettings.java | 85% <87.5%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f072587...cb72a8b. Read the comment docs.\n. # Codecov Report\nMerging #304 into RxJava2.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #304   +/-\n==========================================\n  Coverage      81.05%   81.05%         \n==========================================\n  Files             11       11         \n  Lines            438      438         \n  Branches          33       33         \n==========================================\n  Hits             355      355         \n  Misses            56       56         \n  Partials          27       27\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f072587...baa64fa. Read the comment docs.\n. # Codecov Report\nMerging #314 into RxJava2.x will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nRxJava2.x     #314   +/-\n==========================================\n  Coverage      82.42%   82.42%         \n==========================================\n  Files             11       11         \n  Lines            438      438         \n  Branches          33       33         \n==========================================\n  Hits             361      361         \n  Misses            50       50         \n  Partials          27       27\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../strategy/MarshmallowNetworkObservingStrategy.java | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 524c87b...91b676e. Read the comment docs.\n. \n",
    "aperfilyev": "Okay, I will take a look into it. Should I create a new NetworkObservingStrategy like for M and above?\n. I think we have a misunderstanding. \nThere might be no internet connection in Doze mode, so ReactiveNetwork should trigger connectivity change because ConnectivityManager may return that we are connected when in fact we are not because of idle mode.\n. > Proposal with the additional receiver will trigger a change when device idle mode will change.\nWhat's wrong with it? We can't make a network call in Doze mode, so we can report that we are offline no matter what ConnectivityManager says.\n. @pwittchen so it seems there is another one broadcast being sent about light idle mode android.os.PowerManager#ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED. Can I submit a PR to fix this?. @pwittchen As I see in the source, it listens only for PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED which is deep doze mode.. @pwittchen done.\n. @Wanimal meanwhile you can use this\n. ",
    "neteinstein": "This is still not working properly.\nSimple test: \n1. Install app on emulator using this library\n2. adb shell dumpsys deviceidle enable\n3. adb shell dumpsys battery unplug\n4. adb shell dumpsys deviceidle force-idle\nCODE:\nReactiveNetwork\n.observeNetworkConnectivity(context)\n.subscribe({ connectivity ->\n            val isConnected = connectivity.state().ordinal == NetworkInfo.State.CONNECTED.ordinal\n            Log.d(LOG_TAG, \"Connectivity available? $isConnected\")\n        }, {\n            Log(LOG_TAG, it, \"Connectivity query failed\")\n            isConnected = false\n        }\nLOG RESULT:\nsystem_process D/ConnectivityService: Returning BLOCKED NetworkInfo to uid=10085\ncom.my.app D/Application: ConnectivityHandler [T# main]  | Connectivity available? false\nsystem_process D/ConnectivityService: Returning UNBLOCKED NetworkInfo to uid=10085\n. ",
    "JackyDuong": "any solution ? \n. @pwittchen : Yes and I added in my proguard to keep class in io.reactivex.functions.** + io.reactivex.Observable\n. Alright !\nThank you for the fast answer.\n. ",
    "lman": "fix:\n```\nReactiveNetwork\n-dontwarn com.github.pwittchen.reactivenetwork.library.ReactiveNetwork\n-dontwarn io.reactivex.functions.Function. ",
    "waincent": "Yes, thank you, good job.\n. ",
    "consp1racy": "Hi, \nnow come to think of it, airplane mode does affect network but not only network. It makes sense not just making it another flowable but releasing it as a separate artifact as well (in case there isn't an existing implementation.)\nconcatLatest could be a friend if you need to observe network and airplane mode, what do you think?. Let's say I wanted to show a Snackbar when\n * connectivity is on (Connected.)\n * airplane mode is enabled (Turn off Airplane mode.)\n * network is down (No connection available.)\nIn such case I'd need both outputs at the same time. The flowable should be built with combineLatest in mind and use a startWith operator. ReactiveNetwork already does it.. @AllanWang The stacktrace is great help. \n@AllanWang @pwittchen Guys, I just dug in AOSP a bit and there's no way ConnectionManager is null. See android.app.ContextImpl:289 in SDK 15 and android.app.SystemServiceRegistry:790 in SDK 25. Whatever happens, there always is a non-null object.\nIf you take a look at the exception\n...\nandroid.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo\u00a0(IConnectivityManager.java:1058)\nandroid.net.ConnectivityManager.getActiveNetworkInfo\u00a0(ConnectivityManager.java:658)\ncom.github.pwittchen.reactivenetwork.library.rx2.Connectivity.getNetworkInfo\u00a0(Connectivity.java:86)\n...\n\nyou can see that ConnectivityManager indeed was not null.\nThe error happens somewhere on the way from android.net.ConnectivityManager to com.android.server.ConnectivityService. Unfortunately IPC in AOSP is above my paygrade.\nThe only way to suppress this is to wrap ConnectivityManager.getActiveNetworkInfo in try-catch looking for an NPE. But do we want to silently ignore errors at this level?. TL;DR: I've definitely gone off topic. The point is ConnectivityManager was not null so a null check did not resolve the error.\n\n@AllanWang \n\nDo you have links to the lines in question?\n\nSure, here are the links:\n\nandroid.app.ContextImpl:289 in SDK 15\nandroid.app.SystemServiceRegistry:233 in SDK 25 (sorry, I posted wrong line number earlier)\n\n\nAre you still getting this error?\n\nI'm not getting the error, I'm just passing by. Just pointing out that your own crash report proves that your ConnectivityManager was not null therefore the issue is still present, just somewhere else.\n\nyou'd be surprised how many core features seem to crash on specific devices [...] even though it should exist\n\nI actually looked into this very topic about a month ago and divided system services into nullable and non-nullable according to AOSP source. You can take a look at the list here.\n\nEDIT\nNow I see that I didn't look far enough. Thanks for the impulse! SystemServiceRegistry may indeed return null if a native service was not found. I keep forgetting that. And services running on the device are determined by the SystemServer.\nAs you can find in SystemServer source absence of ConnectivityManager is considered a fatal error, unless...\nThe only way there is allowed no ConnectivityManager is that network would be disabled altogether in /system/build.prop by\nconfig.disable_network=true\n\n\nBut of course this is all pure Android. I agree that various OEMs strip/replace parts of the code.\nOn the other hand, look at it this way: You distribute your app through the Play Store. Play Store requires network to work. Network info is obtained from a ConnectivityManager. Therefore among your users there's no device without a ConnectivityManager. What are your thoughts on this?\n. Broadcast receiver is run on the main thread but emissions must happen on the correct thread. One way is to use serialized subjects.. ",
    "probepark": "@pwittchen \nThank you.\n. @pwittchen \nI think so. wrapped class of NetworkInfo is great idea.\nIt will be safe.\n. LGTM! . ",
    "wujianv5": "I think the following code \n.filter(ConnectivityPredicate.hasState(NetworkInfo.State.CONNECTED, NetworkInfo.State.DISCONNECTED))\n.filter(ConnectivityPredicate.hasType(ConnectivityManager.TYPE_WIFI))\nsuggests I will be notified when WIFI is switched both on and off, which is not happened in my case.\nI think if it's hard to implement the wifi disconnection filter you should change some design pattern to make people not confused.\nAnd I'm not familiar with network state changing things, but I think when I switch off wifi, I'm not in an offline mode, since I still have mobile network connection, and maybe I could also have bluetooth connection. In that cases I guess the disconnection type can be detected ??\nBTW, it's a really good work and a very easy tool to use. Thanks!. My phone is MI 5s, and Android version is 6.0.1 MXB48T. I think because it's a customized version of Android, the manufacturer might have changed something.. ",
    "IonutNegru87": "I encounter the same issue and I think it is because of the Connectivity.create(context) in the NetworkCallback#onLost(Network). \nFrom what I noticed, this will create an Connectivity object which has the type == -1 (ConnectivityManager.NONE)\nChanging .filter(ConnectivityPredicate.hasType(ConnectivityManager.TYPE_WIFI)) to .filter(ConnectivityPredicate.hasType(ConnectivityManager.TYPE_WIFI, -1)), seems to fix this issue.. ",
    "nksaroj": "@pwittchen  Please merge this #168 . I hope PR #168 should fix  the 2nd issue. If you are happy can you able to merge quickly . Would you please help with question:1\nWith the ReactiveNetwork Library. It's starts firing on resume if network is available.\nThat's what I can see in your sample. But I am interested only when there is a state change.\nON--> OFF or OFF--> ON not interested in if there is no state change.. Thanks @pwittchen . I will give go \ud83e\udd47 . ",
    "Bombo": "Sure.\n\nBuilt and deployed app module on my device\nOpen the app while connected via wifi.\nPull down notification area and switch off wifi\nClose notification area\nResult is as in screenshot\n\nI'm afraid that's all I have. I just now noticed when there is a small delay between losing wifi and connecting to the mobile network it seems to recover. Of course there is a short time where it's disconnected and then correctly reconnects. So this might only occur if the switch is instantaneously? Maybe some kind of race-condition.. Yes, that's what I was thinking. I will look into this myself, if I get the time. Thanks!. @kmalmur I haven't, yet. I switched to a different library for now.. ",
    "kmalmur": "the same on my side. @Bombo how did you deal with that?. It happens right after I turn off the WiFi, and the phone switches to\nMobile data.\n17.12.2017 5:12 PM \"Piotr Wittchen\" notifications@github.com napisa\u0142(a):\n\n@Bombo https://github.com/bombo @kmalmur https://github.com/kmalmur\n@waniolka https://github.com/waniolka Can you provide any concrete\nsteps, details or conditions to reproduce this bug? I'm using Motorola\nNexus 6 with clean Android 7.1.1 and I cannot reproduce it, so I cannot\nfigure out the source of that bug. Now it looks like it's device specific\nor related to the concrete Android OS version.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/170#issuecomment-352266454,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGgBRqrl0W6f-dAEpHsi9eyJS-U-PUndks5tBT2FgaJpZM4NJIUr\n.\n. \n",
    "waniolka": "Same error on Xiaomi Mi6. . ",
    "lumueller": "Same here, v0.12.3\nPixel with 8.1 and Nexus 5x with 8.1\nI am starting the app with turned on wifi:\nConnectivity{state=CONNECTED, detailedState=CONNECTED, type=9, subType=0, available=true, failover=false, roaming=false, typeName='Ethernet', subTypeName='', reason='null', extraInfo='08:00:27:85:55:66'}\nthen I turn off wifi and instead of stating a mobile-connection it states:\nConnectivity{state=DISCONNECTED, detailedState=DISCONNECTED, type=1, subType=0, available=true, failover=false, roaming=false, typeName='WIFI', subTypeName='', reason='null', extraInfo='<unknown ssid>'}\nI am using ReactiveNetwork.observeNetworkConnectivity(mContext)\nWhen I start just with the mobile connection it works... \n. ",
    "herberthartkor": "Hi!\nAny updates on this? I've got the same issues and can verify the last comment.. ",
    "Bhavdip": "I think he forgot to unregister or should clear the subscriber from listening to the update in activity.. If you want to observe the network connectivity is true or false then you should use default implementation But If you have your own custom details for checking Internet connectivity then you should Subscribe an Observer as @pwittchen mentioned. Using that way you can listen true and false in onNext method simply ignore other methods.\njava\n ReactiveNetwork.observeInternetConnectivity()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(new Consumer<Connectivity>() {\n          @Override public void accept(Boolean isConnectedToInternet) {\n            // do something with isConnectedToInternet value\n          }\n        });. ",
    "lion4ik": "Yeah, probably there is no problem in this code. It just confused me a bit. Now, I clarified it, thanks.. Yes, I am sure because I've tested it on api 19. I've done pull request with fix https://github.com/pwittchen/ReactiveNetwork/pull/220. thanks, when do you plan next release?. @pwittchen thank you very much! I've already done with update version . ",
    "chihung93": "I don't think so.\nI think that issue is a bug.\naccept just return true or false for the network.\nWhy I must handle error while I just know network state.\nTks.. thank you so much @pwittchen @Bhavdip.\n. I think it relates my issue #230 . it happens on this real device :\nOS: Android 5.0\nReal Device: Jacs - ANDROID PoE TOUCH DEVICES\n. And this lib so cool.\nThank you so much @pwittchen.\n. @aldocano Al\nI think it pings to an IP address continuously so it will be blocked for a short time.\n. ",
    "toe-pyae-sone-oo": "add second parameter in .subscribe(new Consumer<>(), new Consumer<Throwable>() {})\nlike that.. ",
    "javierpe": "If I don't  want to know about any error and only execute .subscribe()?. ",
    "Harmeetkaur01": "@pwittchen  I m facing the same issue when I try to connected to 5G network otherwise it is working fine . ",
    "juanmendez": "Sure, this is a class I wrote and whose connect and disconnect are called by onStart() and onPause() handlers of a fragment. I noticed the error occurs once I call onDisconnect() right when I unsubscribe. I am using RxJava 1.x. I am making use of a singleton, and possibly that is what could be wrong, rather than recreate the observable each time. (I'm using Dagger that's why I left it as a singleton dependency). Thanks a lot for your help.\nIn my dagger module\njava\n@Singleton\n@Provides\npublic NetworkService getNetworkService() {\n    return new DroidNetworkService( app );\n}\n```java\npublic class DroidNetworkService implements NetworkService {\nContext context; //application context\nObservable<Connectivity> observable;\nBoolean connected = false;\n\n/**\n * each subscription is mapped along with a key object.\n * in this way is easy to unsubscribe each.\n */\nHashMap<Object, Subscription> subscriptionHashMap = new HashMap<>();\n\npublic DroidNetworkService(Context context) {\n    this.context = context;\n\n    observable = ReactiveNetwork.observeNetworkConnectivity(context)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread());\n}\n\n@Override\npublic boolean isConnected() {\n    return connected;\n}\n\n@Override\npublic void connect(Object keyObject, NetworkResponse response) {\n\n    //one subscription per keyObject\n    disconnect(keyObject);\n\n    Subscription subscription = observable.subscribe(connectivity -> {\n        response.onStatusChanged( connected = connectivity.isAvailable() );\n    }, throwable -> {\n        throwable.printStackTrace();\n    });\n\n    subscriptionHashMap.put( keyObject, subscription );\n}\n\n@Override\npublic void disconnect(Object keyObject) {\n    connected = false;\n    Subscription subscription = subscriptionHashMap.get( keyObject );\n\n    if (subscription != null && !subscription.isUnsubscribed()) {\n        subscriptionHashMap.remove( keyObject ); //ERROR happens here. \n        subscription.unsubscribe();\n    }\n}\n\n}\n```. hi, I tried it like that and still got the same error. But like you said this is to do with fragments lifecycle than any issue with your library. If I find a solution I will reopen the case with the solution. Thanks.. I fixed it. What did I do?\nI removed the singleton from the dagger module.\njava\n@Provides\npublic NetworkService getNetworkService() {\n    return new DroidNetworkService( app );\n}\nAnd everything on that class remained the same.  I still do unsubscribe for preventing memory leak. Thanks a lot :) . ",
    "yshrsmz": "Thanks for your quick response.\nYes I'm going to use v2 and remove v1.\nI just wanted to report that this line should be updated as well.\nhttps://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/AndroidManifest.xml#L2. ",
    "emitchel": "Thanks @pwittchen this worked, but I also figured out that if I prepend my host with http:// it doesn't work. Looking through the source code, I dont know why it would cause a problem. Either way, once I went with mycompany.org instead of http://mycompany.org I was good to go (along with using SocketInternetObservingStrategy()). Sounds good, consider this issue closed.. ",
    "PitipongXYZ": "Thank you for your answer, But it doesn't work. T-T. Wow, it's working now, You're the man, Thanks!. Thanks, It very helpful for me. . ",
    "AllanWang": "I'm passing applicationContext like the sample so that should be fine. It does look like ConnectivityManager is null in this case. I'm not sure if this is a physical device or an emulated one given that there's no information on RAM, but perhaps it will be worthwhile to add a null check there?. For getSystemService:\n@return The service or null if the name does not exist.\nSo I guess it is possible. Thanks. @consp1racy \n1. Do you have links to the lines in question?\n2. Are you still getting this error?\nWhat you say may be true, but you'd be surprised how many core features seem to crash on specific devices. Hopefully a null check for a system service, even though it should exist, may prevent some of the errors.\n. @consp1racy even though I distribute through Play Store, I still can't guarantee the source of my app. I've had users build themselves and run on emulators. Others can also download an apk externally and copy it to a device. It doesn't look like any of this happened in this particular case, but it is certainly possible.\nGiven that this is not an issue within the library, I would recommend not implementing try catch. The goal of a library should not be to fix bugs outside of its scope, and we still have not had reports of NPEs after this fix.. ",
    "AbdullahUsmani": "Thanks for your response.\nYes, it gets called continuously. Ideally, I should get a callback whenever a change in connectivity happens, i.e, when internet gets connected or disconnected. But I am getting this callback in an endless loop.\nLike, it keeps on logging \"Connected\" every 4-5 seconds. Then when I disconnect the internet, it keeps logging \"Connection lost\" every 4-5 seconds.. I think I am using the library correctly. Because I am getting the correct results on all other devices. This must be a device/OS specific issue.\nI haven't tried the sample app though. I'll check it and let you know soon.. ",
    "TonyTangAndroid": "I am using Pixel running Android 7.1.2. I randomly configured a invalid proxy like 192.168.1.112.Then I tried to test it out. . ",
    "isakgithub": "Help wifi connection global. ",
    "msridhar": "@pwittchen I'm a maintainer of NullAway.  Is there a specific problem you ran into?  Please feel free to file an issue if something didn't work as you expected; we can fix or try to clear up the docs. Hi, yeah, we need to clarify our README for your configuration a bit.  One thing I notice is that you probably can't combine the apply plugin syntax (older style) with the plugins block (newer style).  Also you don't need the id \"java\" line for an Android library.\nWe are working on giving a better example for Android code.  Once that's done, I'll ping back and we'll see if things work better.. Great to hear it!. ",
    "sevar83": "That's on API26 on the emulator. It happens from time to time not always.\nIt's strange because I have a connection and all the data in the app loads\nup. Even the connectivity observable is emitting properly. And google.com\nopens up in Chrome. My connection is laggy, maybe the socket connection\ntimeout runs out. I'm going to ignore this for awhile.\nOn Tue, 26 Sep 2017 at 13:04 Piotr Wittchen notifications@github.com\nwrote:\n\nHi,\nThanks for reporting the issue.\nMessage says:\nCould not establish connection with WalledGardenStrategy\n                          java.net.SocketTimeoutException: timeout\nso your device couldn't establish socket connection and connection timeout\noccurred. Are you sure this issue is not related to your device or network\nyou have been connected to? Maybe you're behind a proxy, connected via VPN\nor something like that?\nI don't think this code in the very basic version is not working because\nit was already tested some time ago and everything was fine.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pwittchen/ReactiveNetwork/issues/228#issuecomment-332150244,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAHS1YiroKWWCuDRpvO1VALWIm7A8T8jks5smMvDgaJpZM4Pj2PT\n.\n. \n",
    "RagnarR": "@sevar83 use this in your <application> tag: android:usesCleartextTraffic=\"true\". ",
    "dmbee": "I am having the same issue on API 25, intermittent \n019-02-22 14:50:57.332 8035-8319/com.halterix.halterix E/ReactiveNetwork: Could not establish connection with WalledGardenStrategy\n    java.net.SocketTimeoutException: timeout\n        at com.android.okhttp.okio.Okio$3.newTimeoutException(Okio.java:212)\n        at com.android.okhttp.okio.AsyncTimeout.exit(AsyncTimeout.java:261)\n        at com.android.okhttp.okio.AsyncTimeout$2.read(AsyncTimeout.java:215)\n        at com.android.okhttp.okio.RealBufferedSource.indexOf(RealBufferedSource.java:306)\n        at com.android.okhttp.okio.RealBufferedSource.indexOf(RealBufferedSource.java:300)\n        at com.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:196)\n        at com.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\n        at com.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\n        at com.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:906)\n        at com.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:782)\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:463)\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:405)\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:521)\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy.isConnected(WalledGardenInternetObservingStrategy.java:103)\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy$1.apply(WalledGardenInternetObservingStrategy.java:64)\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy$1.apply(WalledGardenInternetObservingStrategy.java:62)\n        at io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:57)\n        at io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.run(ObservableInterval.java:82)\n        at io.reactivex.Scheduler$PeriodicDirectTask.run(Scheduler.java:532)\n        at io.reactivex.Scheduler$Worker$PeriodicTask.run(Scheduler.java:479)\n        at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)\n        at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:272)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\n        at java.lang.Thread.run(Thread.java:761)\n     Caused by: java.net.SocketException: Socket closed\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:151)\n        at java.net.SocketInputStream.read(SocketInputStream.java:120)\n        at com.android.okhttp.okio.Okio$2.read(Okio.java:136)\n        at com.android.okhttp.okio.AsyncTimeout$2.read(AsyncTimeout.java:211)\n        at com.android.okhttp.okio.RealBufferedSource.indexOf(RealBufferedSource.java:306)\u00a0\n        at com.android.okhttp.okio.RealBufferedSource.indexOf(RealBufferedSource.java:300)\u00a0\n        at com.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:196)\u00a0\n        at com.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\u00a0\n        at com.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\u00a0\n        at com.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:906)\u00a0\n        at com.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:782)\u00a0\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:463)\u00a0\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:405)\u00a0\n        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:521)\u00a0\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy.isConnected(WalledGardenInternetObservingStrategy.java:103)\u00a0\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy$1.apply(WalledGardenInternetObservingStrategy.java:64)\u00a0\n        at com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.strategy.WalledGardenInternetObservingStrategy$1.apply(WalledGardenInternetObservingStrategy.java:62)\u00a0\n        at io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:57)\u00a0\n        at io.reactivex.internal.operators.observable.ObservableInterval$IntervalObserver.run(ObservableInterval.java:82)\u00a0\n        at io.reactivex.Scheduler$PeriodicDirectTask.run(Scheduler.java:532)\u00a0\n        at io.reactivex.Scheduler$Worker$PeriodicTask.run(Scheduler.java:479)\u00a0\n        at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)\u00a0\n        at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)\u00a0\n        at java.util.concurrent.FutureTask.run(FutureTask.java:237)\u00a0\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:272)\u00a0\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\u00a0\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\u00a0\n        at java.lang.Thread.run(Thread.java:761). ",
    "aldocano": "Im sorry for reopening this issue but i have a question that is similar to it. Please check the code below and i struggle with it because of the incorrect value it returns. Because i do have internet connection and the library return false multiple times. \njava\n    Disposable rec = ReactiveNetwork.observeInternetConnectivity(new SocketInternetObservingStrategy(), \"https://google.com\")\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe(isConnectedToHost -> {\n                if (isConnectedToHost) {\n                    getApp().setConnected(true);\n                    if(dialog!=null){\n                        dialog.dismiss();\n                    }\n                } else {\n                    getApp().setConnected(false);\n                    showInternetDialog();\n                }\n            });. I happens in all devices, while i watch a online video in spans the dialog of no internet connection, i dont know why, because the device has continuous internet connection.\n. Which one is the better way to continuously check the internet connection? . Sorry for late response, i need to continuously check it, maybe pinging server returns some timeouts and therefore it displays the not connected dialog.?. The server is google firebase server url. Strange that this occurs in strange conditions.\nCan you show an example with the observe prefix and also the larger ping interval.. Thank you for the help i will try and let you know if there is any difference. Thanks.. ",
    "timrijckaert": "Ok my bad :). ",
    "luccasmaso": "Thank for the response. But if I use the socket strategy will every observeInternetConnectivity create a new socket connection?. ",
    "SunJenry": "Thanks a lot, your comment really helps me.Fix this problem by adding the code in the picture.\n\n. ",
    "VisheshVadhera": "Hey Piotr,\nThanks for the quick reply. Should I open a PR for this?. Perfect, I'll open it.. ",
    "TasTugberk": "I got it, thank you.. ",
    "wjljack": "I need a function to customize an Observable.. ",
    "lovetomatoo": "@pwittchen Hi,\nthank u for your answer. but I don't want to use Android Service. I tested again, I can get a call back, but it was slow, about 5 second. I don't want use Service that although  my app in background, it will alive always. . I know that no way can keep app alive when it's in background. I only test when it alive in background, There is no timely give call back  when network from mobile to wifi. My way of test it is: First,call api \"ReactiveNetwork.observeNetworkConnectivity\" in onCreat not in onResume(I don't want to call this api evertime in onResume); Second,go to Setting page to change network form mobile to wifi. 5 second later, I can get a call back that network change to wifi.\nI think 5 sencond is to long. It is my question.. Thank you very much.. ",
    "AtaerCaner": "I understand Piotr. Thank you for the quick response. ",
    "Pietervdv": "Hi @pwittchen.\nI am not sure what the user who posted this issue ran into but what I had was a similar issue as his where it was not syncing gradle or building app complaining about JitPack.\nBut the issue only came up after adding maven { url 'https://maven.fabric.io/public' } for crashlytics.\nI then added mavenCentral() to my repo list at the top and the error seems to have been sorted.\nReally not sure if they are related but in case you get this issue again mavenCentral() should be first try to fix it.\nRegards. ",
    "kuzmenok": "Yeah, I caught NetworkOnMainThreadException on call ReactiveNetwork.checkInternetConnectivity(). \nAs I know, BroadcastReceiver's method onReceive is called on the main thread, so the chain continues executing on the main thread. I just expected that chain will work on io-thread.\nI think it would be great to call emitter.onNext(Connectivity.create(context)) in the thread in which the method observeNetworkConnectivity worked.. Ok. Seems there is misunderstanding :) I meant...\nLet\u2019s look at that example: \nReactiveNetwork.observeNetworkConnectivity(context)\n        .flatMapSingle {\n            if (it.state == NetworkInfo.State.CONNECTED) {\n                ReactiveNetwork.checkInternetConnectivity()\n            } else {\n                Single.just(false)\n            }\n        }\n        .subscribeOn(Schedulers.io())\nA block of code in theflatMapSingle runs on MainThread on Api < 21. And on RxThread on API 21+\nIn my opinion, there must be a consistency between API versions\nP.S. It's not critical. We call checkInternetConnectivity in the background now) So the issue can be closed, I think. ",
    "luizgrp": "I'm facing exactly the same issue described by @kuzmenok when using observeNetworkConnectivity:\n\nblock of code in theflatMapSingle runs on MainThread on Api < 21. And on RxThread on API 21+\n\nI asked a question in Stackoverflow, generalising the problem as I see it's not specific to this library but the fact that BroadcastReceiver.onReceive is called on the main thread.\n@consp1racy could you please elaborate your suggestion? maybe with some examples.. I'm happy to try to fix it\n. ",
    "rajda": "Using observeOn instead of subscribeOn helped me in this case.\njava\nReactiveNetwork\n        .observeNetworkConnectivity(context)\n        .observeOn(Schedulers.io())\n        .flatMapSingle {\n            if (it.state == NetworkInfo.State.CONNECTED) {\n                ReactiveNetwork.checkInternetConnectivity()\n            } else {\n                Single.just(false)\n            }\n        }. ",
    "vedantroy": "@pwittchen Is there any potential work around for this issue until it gets fixed? \nI've thought of two work arounds:\n1]\nConsidering logcat gives the proper output after I refresh my app, I think the issue might go away if I call  checkInternetConnectivity twice (with a small delay in between each time) after the phone connects to a network instead of calling it just once. But, I'm not sure how to implement that in the above code. \n2] I could also use observeInternetConnectivity, but I'm worried that will harm battery life/increase data consumption.\n. @pwittchen Sorry for not responding for a while! I've been busy. Unfortunately, the bug still remains. \nI can open my app while connected to both mobile and wifi. Then, after disconnecting from wifi, the status will remain disconnected, although I should have a mobile connection. \n. ",
    "EzeroVivanco": "Oh, thanks for the suggestion.\nI'll take a look on it.\nRegards.. ",
    "intari": "hi,\nYes, this device only so far.\nSocketInternetConnection helps.. Sorry.\nI didn't thought I have to handle errors here (I thought that - DNS(or other) connectivity error = no connectivity and should be reported as 'no connectivity').\nI will now handle it myself as such.. ",
    "zacharyyy": "SO STRANGE.\nTried again today after some cache invalidations, restarts, cleans, etc. Seems to be working fine now. \nThank you for looking into this and the for the awesome lib!. ",
    "ap-johns": "We found issues using disposables.dispose() in onPause() - it means you can then not add more subscriptions via disposables.add in eg onResume(). So our pattern is always to use disposables.clear() in onPause() \nThanks for your quick response by the way.\nAll working great apart from this one issue.. ",
    "mansya": "hi sir. sorry about a long time. I have designed the logo for this project. Are you interested in using it? if yes. which one do you choose? \n\n. ",
    "danielbeleza": "Thanks for the quick response! \nThere isn't any error or exception being throwed. The thing is it simply returns false, and our app reacts according to that response. In our case we show a no connection screen.\nIf I use the NetworkInfo class to get access to connectivity, it returns true, and everything works fine.. I had already implemented the first suggestion, but not the second. Even so, it didn't work. \nWe really want to validate more than just the network connectivity, but for now, we will use it as a workaround. I look forward for any updated on this.\nThank you for your help! \nBest regards,\nDaniel Beleza. ",
    "herald25": "up for this I can't receive return value in Android P.. ",
    "MikolajKakol": "hi, @pwittchen sorry for bothering but wouldn't it better/enough just to switch to \n\nhttps://clients3.google.com/generate_204\nin https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/WalledGardenInternetObservingStrategy.java\nor add ability to switch to https?. Ok, I thought that on Android P would be enough to replace any clear text communication with secure one. I'm getting on emulator:\n    java.io.IOException: Cleartext HTTP traffic to clients3.google.com not permitted\n\nWhy wouldn't changing to https in WalledGardenInternetObservingStrategy fix this issue?. ",
    "IvanDimitrovCode": "Huawei -> 8, Pixel ->9. I managed to find a scenario which is always reproducible hope it helps.\n1. WiFi and Mobile ON\n2. Turn Mobile OFF -> Nothing happens\n3. Turn Mobile ON-> Nothing happens\n4. Turn WiFi OFF -> State.DISCONNECTED happens \n5. Turn WiFi ON-> State.CONNECTED happens \n6. Turn Mobile OFF->  State.CONNECTED happens\nHope this helps.\nAlso if this might help this method works for connectivity: \n ```kotlin\n       val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        val builder = NetworkRequest.Builder()\n    connectivityManager.registerNetworkCallback(builder.build(), object : ConnectivityManager.NetworkCallback() {\n        override fun onAvailable(network: Network?) {\n            super.onAvailable(network)\n            Log.d(\"CONNNECTION\", \"onAvailable\")\n        }\n\n        override fun onLost(network: Network?) {\n            super.onLost(network)\n            Log.d(\"CONNNECTION\", \"onLost\")\n        }\n    })\n\n```\nLet me know if i can help in some other way.. There is also the \"Turn Mobile OFF-> State.CONNECTED happens\" which is really incorrect.. ",
    "lwasyl": "\nit shouldn't be an issue because we always have one or zero \"active\" Activity.\n\nOnly if you call ReactiveNetwork.observe... again for each activity. Sharing single observable created using that method will always potentially have this problem. I read the code again and I was wrong as to the problem -- it's not that the global state is mutated (it's not).  It's that single Strategy instance effectively only allows single subscription. \n\nI'd avoid creating new BroadcastReceiver everytime because it may increase memory consumption of the app.\n\nThis already happens for each \"subscription\" (ReactiveNetwork.observeNetworkConnectivity call), as when new strategy is created, it creates a new receiver. So creating new one for each observe... call within strategy wouldn't make a difference.\nI still feel the issue is a bug -- when returning a subscription, consumer shouldn't have to care about internal implementation, and should be allowed to subscribe and unsubscribe, multiple times, in any order they fancy. For this to work, strategies must maintain symmetry between emitter's onSubscribe (when manager.registerNetworkCallback(request, networkCallback) should be called) and emitter's onCancel (where unregistering should take place).. ",
    "jclova": "I notice similar behaviour on Android 9.0.\nI am actually using 0.1X.X (RxJava 1.x).\nUp to version 0.10.0, it works on Android 9.0. \nHowever, 0.11.0~0.12.4 it does not work on Android 9.0.\nAdding 'android:usesCleartextTraffic=\"true\"' at the AndroidManifest.xml does not help.. ",
    "lfei1789": "first, thank you for your reply\nandroid 8.1 and lower, NetworkInfo.getExtraInfo() you can get wifi ssid,but android P  NetworkInfo.getExtraInfo() is null\nthanks again. I have solved the problem, as you said  ,  but thank you very much. ",
    "arvalon": "PINGTIMEOUT 2 seconds.\nI need to monitor the status of the server in the internal network of the enterprise. As I understood from the description it is possible to specify custom settings of ip and port of the host of an internal network.\nMonitoring the fall of access to the server works when the router is disconnected and the network is disconnected on the phone. But shutdown and inclusion of the network controller of the server through time, more than 2 seconds is not caught.. ",
    "abir-hasan": "I'm having similar problem after updating my test device to Android Pie (API-level-28). Cause when the device was in Oreo i was getting all the necessary data(specially the SSID from extraInfo field, after getting connected to a WIFI source) from the observeNetworkConnectivity methods response. Now its returning extraInfo and reason null.. Another thing which i found was when i called observeInternetConnectivity i get this in the log:\n\nE/ReactiveNetwork: Could not establish connection with WalledGardenStrategy\n    java.io.IOException: Cleartext HTTP traffic to clients3.google.com not permitted\n\nThis is occurring probably because: Starting with Android 9.0 (API level 28), cleartext support is disabled by default.\nStackoverflow Link. > @abir-hasan have fixed it by enabling clearText traffic?\nSorry for the late response. I used option#2 to resolve the issue. Thanks.. ",
    "Zulqurnain": "@pwittchen yeah I've checked Walled strategy its giving same results. Any news on this , i was going to integrate this in my app ?. Ok, I updated the code and removed that cpp.add() , because it was just a CompositeDisposable of rxjava , can you try on some test server except google ? because for my server it always give response in logcat for [getaddrinfo]: hostname=myservername.com; servname=(null); netid=0; mark=0 like this. I just got an update from my backend team, they have disabled pinging on the server, is it somehow related to the issues?. I have found a solution for now, below code works with my server\n```\nprivate static boolean isURLReachable(String serverURL) {\n        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        if(cm == null)return false;\n    NetworkInfo netInfo = cm.getActiveNetworkInfo();\n    if (netInfo != null && netInfo.isConnected()) {\n        try {\n            URL url = new URL(serverURL);   // Insert Url\n            HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n            urlc.setConnectTimeout(10 * 1000);          // 10 s.\n            urlc.connect();\n            if (urlc.getResponseCode() == 200) {        // 200 = \"OK\" code (http connection is fine).\n                Log.wtf(\"Connection\", \"Success !\");\n                return true;\n            } else {\n                return false;\n            }\n        } catch (MalformedURLException e1) {\n            return false;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n    return false;\n}\n\n```\nbut the library doesn't work, rest is up to you @pwittchen, hope you can debug the issue or add the functionality for server online detect for the server who have pinging disabled.\nbut my issue is not resolved by this library !! . ",
    "foodied": "I am not sure just guessing. It's just what others are saying.\nInside isConnected(),  \n\nFirst we check the address InetAddress.getByName() from hostname.\nUse the above in a thread and terminate that thread after the desired timeout (by user). If the timeout has been reached, send an error callback else to proceed.\nSupply that InetAddress to the URL class instead of the original hostname (by user). So no extra lookups.\n\nWhat are your thoughts?. "
}