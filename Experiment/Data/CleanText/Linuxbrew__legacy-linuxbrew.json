{
    "jaimeMF": "Thanks @sjackman !\n. You can also install clang, which I've used to build ruby and git without problems.\n. Thanks\n. Sounds good, but I don't know how to do it.\n. ",
    "sjackman": "Thanks for your contribution, @jaimeMF!\n. I've fixed it so that Homebrew looks for gcc and g++ on non-MacOS systems rather than gcc-4.2 and g++-4.2.\nce18453 GCC is named gcc-4.2 on MacOS and gcc elsewhere\n. From some reason I don't yet understand, Ruby 2.0 does not work with Homebrew on Linux. Can someone confirm whether Ruby 2.0 works with Homebrew on Mac OS X? If it doesn't work on OS X either, this issue should be moved to mxcl/homebrew.\n. @janckerchen Please report ruby --version\n. @jacknagel The latter seems like a clean solution. Does anyone have the impetus to fix this?\n. Thanks, Jack.\n. @janckerchen As a workaround:\nsh\nbrew tap homebrew/versions\nbrew install ruby193\n. As a quick hack, the following will work:\nsed -i 's/\\bhomebrew\\b/linuxbrew/g;s/\\bmxcl\\b/homebrew/g;s/\\borigin\\b/linuxbrew/g;s/\\bmaster\\b/linuxbrew/g' Library/Homebrew/cmd/update.rb\nUnfortunately, it breaks taps, which still need to pull the branch master rather than linuxbrew.\n. Hi @janckerchen,\nI won't have time to look into individual formula that don't compile cleanly on Linux. It just won't scale. Please do continue to open issues. It's good to have them documented. If you fix the issue, submit a pull request. If I see a pattern \u2013 multiple formula failing with the same error \u2013 I'll look into it.\nCheers,\nShaun\n. Thanks for the bug report, @janckerchen.\n. Closed wontfix. Reopen with a pull request to fix the issue, if you like.\n. @Aktau The compiler name issue (gcc/g++ vs gcc-4.2/g++-4.2) is now fixed.\n. @Aktau Hi Nicolas,\nHomebrew is usually installed in /usr/local, and on OS X /usr/local/lib is in the default library search path. When I install Homebrew in my home directory, I set LD_LIBRARY_PATH to $HOME/local/lib.\nOn Linux, /usr/local/lib is not in the default library search path. One simple solution is to add the Homebrew library path to the ld.so config file, /etc/ld.so.conf.\nCheers,\nShaun\n. This issue affects the master branch of Homebrew just as well as Linuxbrew. Would you open an issue at http://github.com/mxcl/homebrew? It would be good to see it solved upstream.\n. @mistydemeo Linuxbrew does not currently use superenv. It would require a few patches to Library/ENV to get it going, I think.\n@themiwi How does this work on Mac OS?\n. @aktau @themiwi Could you please test the branch bottle. It uses patchelf to set the RPATH. If the package glibc is installed, it also set the dynamic loader. Be sure to brew install patchelf. With this work, setting LD_LIBRARY_PATH should no longer be necessary.\nI'm using this patch to implement portable bottles on Linux. I've tested building a bottle on Ubuntu 14.04 and running it on CentOS 5.10, and it works! I'm pretty happy with that result.\nCheers,\nShaun\n. I'd appreciate your help if you could also test brew install glibc.\n. Hi, Nicolas. Checkout the bottle branch of Linuxbrew cd $HOME/.linuxbrew; git checkout bottle, install patchelf brew install patchelf, and from then on any executables installed with Homebrew will have their RPATH set to $HOMEBREW_PREFIX/lib. Here's the relevant commit:\nhttps://github.com/Homebrew/linuxbrew/commit/34b4c3675b05f1e9902335972380dbce5f7bec36#diff-9f183506315342e7eb6e1ab973ea1996R66\n. I've create a new wiki page with instructions for a Standalone Installation of Linuxbrew. Would you be able to test it out?\n. @aktau With the recent commits to bottle branch, patchelf is no longer necessary. Setting the RPATH and dynamic linker is handled using LDFLAGS -rpath and --dynamic-linker. The patchelf code remains as a backup plan for builds that ignore or reset LDFLAGS.\n. @aktau Thanks for the bug report, Nicolas.\n. The only three solutions that come to mind are\n- Add /my/homebrew/lib to /etc/ld.so.conf\n- Add /my/homebrew/lib to LD_LIBRARY_PATH\n- Set the RPATH of each executable compiled by brew to /my/homebrew/lib\nThis post seems relevant:\nhttp://blog.tremily.us/posts/rpath/\n. It shouldn't be necessary to set LD_LIBRARY_PATH when building Homebrew packages unless you are you using compiler tools (i.e. binutils and GCC) built by Homebrew. Are you?\n. For what it's worth, it seems that it's only necessary to set LD_LIBRARY_PATH for mpfr because of the make check in the formula: https://github.com/mxcl/homebrew/blob/master/Library/Formula/mpfr.rb#L43\nIf you remove this line, it compiles fine without setting LD_LIBRARY_PATH. Nonetheless, I think I agree with you that brew install should set LD_LIBRARY_PATH to $HOMEBREW_PREFIX/lib.\nCheers,\nShaun\n. Here's another article on RPATH:\nhttp://www.cmake.org/Wiki/CMake_RPATH_handling\n. Ideally the RPATH would be set at link time, but making this happen for all the different build environments could be challenging. It's probably easier to patch the executable after installation, as you suggest. On OS X, the executable can be modified like so:\n\n\"install_name_tool -rpath ... -add_rpath ... -delete_rpath ...\" to change RPATHs\n\nSee http://www.cmake.org/Wiki/CMake_RPATH_handling\n. Hi Leo. Can you elaborate on your question? My development environment is ruby, vim and zsh, but I'm guessing that's not your question.\n. Use a recent version of Ubuntu and install the build-essential package.\nhttps://help.ubuntu.com/community/CompilingEasyHowTo\n. It's rather distro agnostic at the moment. Ubuntu was just a suggestion. It will work just as well on Debian or Fedora. All you need is a Linux distribution and a C compiler\n. Sure, Mike. The most sensible format I'd say would be one section per Linux distribution specifying a list of packages that should be installed, such as build-essential for Debian and Ubuntu.\n. # Debian or Ubuntu\nsh\nsudo apt-get install build-essential curl git ruby\n. Thanks, Mike.\n. Hi, Leo. How did you install Linuxbrew? This line Initialized empty Git repository in /linuxbrew/.git/ makes me guess that it wasn't a git clone, which is the only way that I've done it so far.\nCheers,\nShaun\n. Hi, Daniel. The following command should update Linuxbrew:\nsh\ngit checkout linuxbrew\ngit reset --hard origin/linuxbrew\nbrew update\nNote that the git reset will abandon any changes that you may have made to Linuxbrew if any.\nCheers,\nShaun\n. For the most recent update of Linuxbrew, I used a git merge rather than a rebase, so brew update should work as expected.\n. Linuxbrew doesn't currently use superenv, because it currently requires XCode (xcrun). We should fix that.\n. @mistydemeo Is there a way to configure Homebrew to set the default compiler to --cc=gcc-4.8? Does HOMEBREW_CC=gcc-4.8 work?\n. Hi Elliot,\nI believe that you're running a 32-bit kernel, because of the i686. Can you confirm that's the case? Do you have a particular reason to use a 32-bit kernel, and could you switch to a 64-bit kernel?\nCheers,\nShaun\n. No, it's quite fixable. It should be a one-line patch. Here's the code to fix:\nhttps://github.com/Homebrew/linuxbrew/blob/linuxbrew/Library/Homebrew/os/linux/hardware.rb#L9\nIs that something you'd like to do?\n. Set HOMEBREW_CACHE. See https://github.com/Homebrew/linuxbrew/issues/2\nThis issue could be improved for sure.\n. I don't believe there's a suitable world-writable cache on Linux, so I'll change the default to ~/.local/homebrew.\n. Yes, I agree. Does this patch look like something that could be incorporated into mxcl/homebrew?\n. Oh, I missed the quoted part of your comment. Oddly, $XDG_CACHE_HOME is not set on Ubuntu. Does anyone know of a Linux (or other) system that uses these environment variables?\n. If you mean the brew shell script, I'm inclined to keep that as simple as possible. I do think though that there's a good argument for factoring out os/linux/global.rb.\n. Okay. I'll add it to my os/linux todo list. There's other patches in Linuxbrew that should move there as well.\n. I believe this issue was handled, at some point. Reopen if it's still an issue.\n. curl.h is usually provided by the operating system on OS X. You'll need to install curl.\nsh\nsudo apt-get install libcurl4-openssl-dev\nbrew install git\nor\nsh\nbrew install curl git\n. The workaround is brew insall git --with-brewed-curl. Perhaps this should be the default.\n. APR is usually provided by the operating system on OS X. You'll need to install APR using the operating system package manager.\nsh\nsudo apt-get install libapr1-dev\nbrew install serf\n. I don't see the actual error message in the text that you've included, which is the standard boiler-plate text for a keg-only install.\n. I believe if symlinking fails, that message will print.\n. For example, if SVN is already installed in /usr/local outside of Homebrew.\n. Ah, thanks for clearing that up, Jack.\n. Dependencies that are included with Mac OS X are not listed as dependencies in Homebrew formulae. It'd be great if they were, but we'd need to sort with the mxcl/homebrew folk how to best go about that. In the mean time, I suggest installing APR with your native package manager (apt-get or yum).\nCheers,\nShaun\n. https://gist.github.com/anonymous/dff6ff729d44d1a85534#file-05-make-L128-L133\nlibtool: warning: relinking 'libsvn_delta-1.la'\nlibtool: install: (cd /tmp/subversion-JCJW8L/subversion-1.8.11/subversion/libsvn_delta; /bin/bash \"/tmp/subversion-JCJW8L/subversion-1.8.11/libtool\"  --tag CC --silent --mode=relink /home/yu/.linuxbrew/bin/gcc-4.9 -Os -w -pipe -march=core2 -pthread -DNDEBUG -L/home/yu/.linuxbrew/lib -Wl,-rpath,/home/yu/.linuxbrew/lib -L/home/yu/.linuxbrew/Cellar/subversion/1.8.11/libexec/serf/lib -rpath /home/yu/.linuxbrew/Cellar/subversion/1.8.11/lib -version-info 0 -Wl,--no-undefined -o libsvn_delta-1.la cancel.lo compat.lo compose_delta.lo debug_editor.lo default_editor.lo deprecated.lo depth_filter_editor.lo editor.lo path_driver.lo svndiff.lo text_delta.lo version.lo xdelta.lo ../../subversion/libsvn_subr/libsvn_subr-1.la -L/home/yu/.linuxbrew/Cellar/apr-util/1.5.4/libexec/lib -laprutil-1 -L/home/yu/.linuxbrew/Cellar/apr/1.5.1/libexec/lib -lapr-1 -lz )\n/usr/bin/ld: cannot find -lsvn_delta-1\ncollect2: error: ld returned 1 exit status\nlibtool:   error: error: relink 'libsvn_ra_serf-1.la' with the above command before installing it\nmake: *** [install-serf-lib] Error 1\n. The ace.rb formula has changed quite a bit, so this patch no longer applies.\n. I've been rebasing, but that makes brew update problematic. Rebase makes it easier to see exactly what's different between mxcl/homebrew and homebrew/linuxbrew. @mistydemeo, do you rebase or merge homebrew/tigerbrew?\n. @ldhughes\nI've rebased linuxbrew on master.\nCheers,\nShaun\n. Thanks, @mistydemeo I'll consider merging next time.\n. @mikemcquaid Should autoconf depend_on m4?\n. For packages that are provided by the base Mac OS X install, I had the idea adding, for example, the depends_on 'm4' to autoconf, and keeping a list of which packages are provided on OS X (such as m4) so as to mark those dependencies as satisfied. Thoughts?\n@mikemcquaid @adamv @jacknagel @mistydemeo \n. The packages need to know their own dependencies (that autoconf depends on m4 for example). It makes more sense I think to have that information in the individual formula and so, I think, in the base Homebrew. Whether that dependency is satisfied by the OS is the next question. We can hardcode that list for OS X. For Linux it will vary depending on the Linux distribution and which packages are installed, and so will likely have to be a dynamic test.\n. Fixed. Thanks, Alejandro.\n. Thanks! It has come a long way.\n. The file Configure is either not UTF-8, or has incorrect UTF-8 byte sequence. The copyright symbol U+00A9 should be encoding as C2 A9, but is encoded on line 1988 as simply A9. This symbol causes Ruby 2.x to barf, but Ruby 1.x is okay.\nVALUE \"LegalCopyright\", \"Copyright \u00a9 1998-2005 The OpenSSL Project. Copyright \u00a9 1995-1998 Eric A. Young, Tim J. Hudson. All rights reserved.\\\\0\"\n. A9 is the correct encoding for \u00a9 in ISO-8859-1. So, inreplace needs to either autodetect the file encoding, or be told the file encoding. What do you think @adamv @jacknagel @mikemcquaid @mistydemeo of specifying the encoding with something like:\nrb\ninreplace {'file' => 'ISO-8859-1'}, 'foo', 'bar'\n. @mikemcquaid Hi, Mike. This issue is caused by using Ruby 2.0. My understanding is that mxcl/homebrew intends to support Ruby 2.0.\n. @dcardosods If possible, I'd recommend installing the openssl library with your native package manager, i.e. apt-get or yum. This commit 70489b7 fixes the invalid byte sequence in UTF-8 error. There's a new error now:\n$ brew install openssl\n==> Downloading http://openssl.org/source/openssl-1.0.1e.tar.gz\nAlready downloaded: /home/sjackman/var/cache/Homebrew/openssl-1.0.1e.tar.gz\n==> perl ./Configure --prefix=/home/sjackman/local/Cellar/openssl/1.0.1e --opens\n==> make depend\nfips_ers.o: fips_ers.c ../include/openssl/opensslconf.h\nmv: cannot stat `Makefile.new': No such file or directory\nmake[1]: *** [depend] Error 1\nI suspect it's caused by hardcoding the OS as Darwin:\nhttps://github.com/mxcl/homebrew/blob/master/Library/Formula/openssl.rb#L21\nCheers,\nShaun\n. @dcardosods Are you trying to install openssl because another package depends on it? If so, which package?\n. To install git using Linuxbrew, I had to first brew install openssl curl expat && brew link --force openssl curl.\n. On Ubuntu 14.04 I was able to build openssl without installing gcc-multilib. Thanks for the feedback though. I'll keep it in mind if I see a similar error from another user. I don't know why you're seeing the pkgutil error. I haven't seen that before.\n. I have no idea what's going on here. Do you see this error only with openssl or with other packages as well?\n. Interesting. Both OS X and CentOS allow an arbitrary number of Xs at the end of the template.\nBoth Debian and the SUS standard seem to require precisely six Xs.\nhttp://www.unix.com/man-page/all/3/mktemp/\nSo, the portable solution seems to be to use 6 Xs.\nWould you like to submit a pull request to mxcl/homebrew, @xxxajk? \n. I'm going to close this issue due to its age. If it's still an issue, please comment and reopen the issue.\n. Would you like to open a pull request at https://github.com/Homebrew/homebrew?\n. I don't have commit rights to Homebrew/homebrew.\n. Thanks!\n. Okay. Can you post an error message? Would you be interested in proposing a fix with a pull request? Alternatively, adding $HOMEBREW_PREFIX/lib to LD_LIBRARY_PATH should fix it.\n. Sounds like a good project. I had thought of something similar using Linux From Scratch to get a small system bootstrapped enough to install Linuxbrew, and then using Linuxbrew for package management.\n. In #7 I'm using patchelf to set RPATH. That may solve your issue as well and eliminate the need to run ldconfig.\n. I'm glad to hear it's working for you, Michael. The RPATH trick will become a standard feature of Linuxbrew soon (after I'm back from vacation). I have big plans for Linuxbrew bottles that are portable across all Linux distributions.\n. I'm also working on a high performance computing cluster with glibc 2.5 running CentOS 5.10. That's precisely my motivation for Linuxbrew and portable bottles.\n. I've create a new wiki page with instructions for a Standalone Installation of Linuxbrew. Would you be able to test it out?\n. I haven't seen that error before. Any chance /tmp ran out of disk space? Try setting export HOMEBREW_TEMP=/var/tmp.\n. The above log is being built in /tmp. Did you export the variable?\n. Now that Linuxbrew sets rpath of compiled executables, it should not be necessary to run ldconfig.\n. Thanks for the patch, Danny.\n. Hi, Brad. I'd prefer to keep the default behaviour of Linuxbrew as similar to that of Homebrew as possible, that is, to sanitize the user's environment. I do however like giving the user the option of to retain the environment. I could see this as an option of --env. --env=asis or --env=inherit perhaps? Any other suggestions for a name? I'd also like to be able to set the default values for --env and --cc with an environment variable.\nAny comments, @mistydemeo?\n. Excellent. That was easier than I had expected. Would there by any interest in merging this patch into mxcl/homebrew? @jacknagel @adamv @mistydemeo\n. I'd be inclined to change if isolate? to unless inherit?. Please squash the commits into a single commit. See\nhttps://help.github.com/articles/interactive-rebase\n. Thanks for the patch, Brad.\n. @mistydemeo Okay. I would very much like to be able to set the default --cc parameter with the environment variable HOMEBREW_CC though, and perhaps also --env with HOMEBREW_ENV.\n. @chapmanb Hi, Brad. I've done a lot of work this week to merge patches from Linuxbrew into Homebrew. I'm trying to reduce the number of differences between Homebrew and Linuxbrew. I'm looking at --env=inherit now.\nWhich environment variables do you need to pass to Homebrew using --env=inherit, CC and any others? What compiler do you use, and what's the value of CC and CXX on your system? If you use --env=std instead does the build fail?\n. Hi, Brad. PERL5LIB isn't sanitized, so that should be fine. For CC and CXX, I suggest export HOMEBREW_CC=/n/sw/centos6/gcc-4.8.1/bin/gcc-4.8. Can you try the latter and tell me if it works?\nCheers,\nShaun\n. Hi, Brad. Yes, it didn't work quite as easily as I had hoped. I'll look into it and get back to you.\n. Hi, Brad. Thanks for your patience. My recent commit should fix this issue:\nsh\n$ HOMEBREW_CC=/n/sw/centos6/gcc-4.8.1/bin/gcc brew sh --env=std <<<'echo CC=$CC CXX=$CXX CFLAGS=$CFLAGS' |tail -n1\nCC=/n/sw/centos6/gcc-4.8.1/bin/gcc CXX=/n/sw/centos6/gcc-4.8.1/bin/g++ CFLAGS=-Os -w -pipe -march=core2\nEven though it won't use the Homebrewed version of gcc, you'll still have to install the gcc formula, or you'll see this error message:\nError: The Homebrew GCC was not installed.\nYou must:\n  brew install gcc\nBy poking a couple files, it's possible to make Homebrew think you've installed the gcc formula. If you'd prefer that route, I'll send along the instructions.\n. Will do when I get to work. If GCC were bottled (binary package) for Linux, would you consider using the Homebrewed compiler instead of the system installed compiler?\n. Hi, Brad. This command will make Homebrew think GCC 4.8.3 is installed:\nsh\nmkdir -p `brew --prefix`/Cellar/gcc/4.8.3 && brew link gcc\n. Go to the XQuartz web page https://xquartz.macosforge.org\nDownload and install XQuartz.\n. Oh, hah. Sorry for my somewhat snarky response then. I should've looked at the project. Yes, this is a known issue that I haven't yet fixed. A pull request would be welcome, otherwise I'll find some time next week to tackle this.\n. Fixed by #166 and d2cd9a3\n. Hi, Ben. I believe you only need a single fork. Configure your working copy of Homebrew to have three remotes: mxcl/homebrew, homebrew/linuxbrew and benswift/homebrew. You will be tracking two branches: master and linuxbrew.\nini\n[remote \"origin\"]\n    url = https://github.com/mxcl/homebrew\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[remote \"sjackman\"]\n    url = https://github.com/sjackman/homebrew\n    fetch = +refs/heads/*:refs/remotes/sjackman/*\n[remote \"linuxbrew\"]\n    url = https://github.com/Homebrew/linuxbrew\n    fetch = +refs/heads/*:refs/remotes/linuxbrew/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[branch \"linuxbrew\"]\n    remote = linuxbrew\n    merge = refs/heads/linuxbrew\n. Yes, that'd be great. The patches should be guarded in if OS.linux? and if OS.mac? so that the formula still build correctly on OS X.\n. Portability patches sadly aren't generally being accepted into mxcl/homebrew. Feel free to petition them to hopefully change this policy.\n. Works for me too. Thanks for the feedback, Constantine.\n. This pull request seem to pull in a bunch of other commits, I'm not sure why. Could you submit the patches to each formula in a separate pull request? It makes discussion easier. The subject line of each pull request should start with the formula name that you're patching, i.e. \"assimp: build without boost\".\n. Thanks for your contribution, Joris.\n. I've merged this commit except for the brew-server bit. You're right that brew server doesn't currently work, and I don't know why, but there's no reason it shouldn't work. Pull request to fix it happily accepted. Or submit an issue that brew-server doesn't work.\n. This pull request should be directed to mxcl/homebrew rather than homebrew/Linuxbrew.\n. Ah. One unfortunate consequence of homebrew/linuxbrew being a fork of mxcl/homebrew is that the formula are only updated as often as I merge the two, which is about once a month. I can also merge on demand. So, done. Enjoy.\n. Fixing the X11 dependency on Linux is on my radar, but I haven't got around to it. The workaround for now is to brew edit r and delete or comment out the line\nrb\ndepends_on :x11\n. Try brew install --without-x11 r.\nFixed by https://github.com/Homebrew/homebrew-science/commit/8742b2be770e8c25afec054976a5d4c126cb93a9\n. brew update\nbrew options r\nbrew install --without-x11 r\n. Hi, Cesar. That's a very strange error message. Is it possible that the file system that your home directory is mounted on doesn't have permissions to execute files in your home directory? Otherwise, I really don't know what's going on here. If you have a systems/IT department that you can ask, it would be best to bring it up with them.\n. Unable to reproduce.\n. Hi, Sean. Mac OS comes with certain basic packages installed, such as ncurses, and Linuxbrew also assumes those packages are installed. So, you will need root access to install libncurses5-dev.\nsh\nsudo apt-get install libncurses5-dev\nIt's possible that you could use homebrew/dupes/ncurses to satisfy the dependency. If you get it to work, I'd be interested in hearing back from you.\nsh\nbrew install homebrew/dupes/ncurses\nbrew link --force ncurses\nCheers,\nShaun\n. @dongli wrote\u2026\n\nSome of the warnings check the files in /usr/local and tell me the homebrew is not installed there, but from the README of linuxbrew, it is installed at home directory, so I think linuxbrew does not modify the corresponding settings of homebrew for Mac OS X to adapt for Linux.\nIf I misunderstand anything, correct me! : ) Anyway, linuxbrew is a good thing for Linux, which is much better than the old fashion aptitude and yum, and it will definitely ease the setup of a uniform environment.\n. @dongli Yes, I agree that the brew doctor output of Linuxbrew could be cleaned up. I don't however want to maintain that patch inside Linuxbrew, as it would be large and cause too many merge conflicts. The massive Library/Homebrew/cmd/doctor.rb needs to have the MacOS specific bits pulled out into a new file Library/Homebrew/os/mac/doctor.rb. If you could get that patched accepted upstream into Homebrew, I'd be quite grateful.\n. @dongli I'd rather not detect and depend on which particular distribution of Linux is being used, and I'd really rather not work around bugs in particular distributions, which won't scale well. I'd also rather support only 64-bit Linux.\n. @dongli Did you get gcc49 to install on Linux? I've got this error:\n\nconfigure:5953: checking for version 0.12 of ISL\nconfigure:5972: /usr/bin/gcc44 -o conftest -Os -w -pipe -march=core2 -msse4 -I/h\nome/sjackman/local/opt/isl011/include -I/home/sjackman/local/opt/gmp4/include -I\n/home/sjackman/local/opt/mpfr2/include -I/home/sjackman/local/opt/libmpc08/inclu\nde  -I/home/sjackman/local/opt/cloog018/include -I/home/sjackman/local/opt/isl01\n1/include -I/home/sjackman/local/opt/libmpc08/include -I/home/sjackman/local/opt\n/mpfr2/include -I/home/sjackman/local/opt/gmp4/include -isystem/home/sjackman/lo\ncal/include -L/home/sjackman/local/opt/cloog018/lib -L/home/sjackman/local/opt/i\nsl011/lib -L/home/sjackman/local/opt/libmpc08/lib -L/home/sjackman/local/opt/mpf\nr2/lib -L/home/sjackman/local/opt/gmp4/lib -L/home/sjackman/local/lib -Wl,-heade\nrpad_max_install_names -L/home/sjackman/local/opt/isl011/lib conftest.c  -lisl >\n&5\n/home/sjackman/local/opt/isl011/lib/libisl.so: undefined reference to `__gmp_get\n_memory_functions'\ncollect2: ld returned 1 exit status\n. It seems this error is a FAQ.\n. I got it working with a brew link --force gmp4 isl011!\n. Fixed by #75\n. Thanks for the tip, Cesar.\n. I do use the Homebrew python 2.7.6 on both Mac and Linux. Using the system python is totally reasonable too. What was the error that you got when building python?\n. Woops. I had an uncomitted patch for python. It's pushed now: 3ad2130b339b3d72764d1b5c11591bb22652495a.\n. Thanks for the patch. Could you please squash it to a single commit, and modify the patch to use if OS.mac? and if OS.linux? as appropriate? I'm super busy this month. I'll review this patch in February. Sorry for the delay.\n. Is this pull request possibly unintentional?\n. Is the formula bash-completion installed? If you remove the package bash-completion, does the error go away?\nbrew remove bash-completion\n. That's pretty strange. Can you post your .bashrc and .bash_profile in a gist?\n. I don't see that rbenv has any build dependencies.\n\u279c  ~  brew deps rbenv     \n\u279c  ~  brew deps ruby-build\nautoconf\nopenssl\npkg-config\n\u279c  ~\n. Unable to reproduce.\n. @gawbul Do you have bash-completion installed? brew list --versions bash-completion\n. bash-completion doesn't appear to install bash-completion.pc.\n\u276f\u276f\u276f brew list bash-completion |grep -c 'pc$'\n0\n. I bet that your .bashrc or .bash_profile uses pkg-config to set up bash-completion and that fails if the PKG_CONFIG_PATH is changed to not include that search directory. Linuxbrew does change the PKG_CONFIG_PATH when it's building software. I would recommend hard-coding the path to bash-completion.pc in your BASH startup file.\n. Grand. Thanks for the feedback.\n. > that linuxbrew pkg-config should be bottled\nI think perhaps you mean keg_only. You can brew unlink pkg-config if you like.\n\nthat linuxbrew pkg-config should also loop-in system package definitions by default\n\nWe explicitly do not include system pkg-config files to avoid using system host libraries unintended, which may conflict with Linuxbrew libraries. You can modify your PKG_CONFIG_PATH to use both.\nNeither of these workarounds is a clear win as both of these solutions have their own downsides.. Hi, Gordon. @villimagg is also experiencing this issue in #46. I leave for a conference on Friday and won't be able to look into this issue until February. Here's where Homebrew sets the PKG_CONFIG_LIBDIR environment variable. If you come up with a fix, please submit a pull request, and I'll incorporate it once I've returned.\nhttps://github.com/Homebrew/linuxbrew/blob/linuxbrew/Library/Homebrew/extend/ENV/std.rb#L39\nhttps://github.com/Homebrew/linuxbrew/blob/linuxbrew/Library/Homebrew/extend/ENV/std.rb#L96\nCheers,\nShaun\n. @agordon The Homebrew policy has always been to override any and every relevant environment variable. I can't say that I agree with that fully, but I don't want to override that policy on a piecemeal basis. For this reason, we created the --env=inherit option in Linuxbrew. This option indicates that system environment variables should be inherited and extended rather than overridden. So, please do use that option for your fix to pkgconfig. I'll review it and merge it when I'm back at the end of the month.\n. Set PKG_CONFIG_PATH and/or PKG_CONFIG_LIBDIR  and use --env=inherit.\n. I'm away at a conference until Jan 20. I'll merge Homebrew and Linuxbrew on my return.\n. The short answer is in the Homebrew FAQ. If that doesn't work, reopen this ticket.\nhttps://github.com/Homebrew/homebrew/wiki/FAQ\n. Try\nsh\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/uninstall)\"\n(note: untested)\nSee https://github.com/Homebrew/install/pull/20\n. Thanks, Xu.\n. To uninstall Linuxbrew, run\u2026\nsh\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/uninstall)\"\nrm -rf ~/.linuxbrew\n. Hi, Kane. The recommended solution is in fact to install zlib1g-dev. I've updated the README. The alternative solution (which I don't recommend) is\nsh\nbrew install homebrew/dupes/zlib\nbrew link --force zlib\n. Hi, @agordon. I never said thanks for the tutorial. So, thanks! It's well written. I've Tweeted it a few times.\n. Datamash is a nice tool! Thanks! I've made use of it already.\n. I created a Tutorials wiki page and added a link to your article.\n. @voiceofreason Very funny! I hope that you write technical documentation for a living. =)\n. Can you report the result of ldd ~/.linuxbrew/bin/zsh?\n. sh\nset |grep '^LD'\nexport LD_LIBRARY_PATH\nset |grep '^LD'\nldd ~/.linuxbrew/bin/zsh\n. They're similar, but not exactly the same.\nsh\nLD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH\"\nsets a local shell variable, whereas\nsh\nexport LD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH\"\nsets an environment variable. Your confusion is probably caused by your experience with PATH, which is already exported, so you don't need to export it again when you modify it, whereas LD_LIBRARY_PATH was not yet exported.\nCheers,\nShaun\n. I merge Homebrew with Linuxbrew about once a month. A know that's not very often, but it's what I have time for. There had been talk of the upstream Homebrew separating the formula into a tap from the core logic. That would help the Linuxbrew situation a fair bit If you like, you could inquire at Homebrew/Homebrew as to the status of that possibility. I'll try to update the Linuxbrew formula this week.\nCheers,\nShaun\n. That's too bad. Perhaps it's time to raise the subject once again?\n. Linuxbrew is essentially a fork of homebrew/homebrew. Updated formula are handled by merging with Homebrew. The second portion of the patch should be submitted to homebrew/homebrew.\n-  conflicts_with 'sox', :because => 'both install `play` binaries'\n -\n -  devel do\n -    url 'http://downloads.typesafe.com/play/2.2.2-RC4/play-2.2.2-RC4.zip'\n -    sha1 '4de17ab705ac04374ec7f7921d350536b7b13a1e'\n -  end\n. Hi, Danil. Yes, this issue is known to me. The ugly but easy work around is to edit the formula and remove depends_on :x11. If you have the time to solve this and submit a pull request, I'd appreciate it. Here's the file that needs to be modified:\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/requirements/x11_dependency.rb\n. I would suggest checking for the executable xterm, which is dead easy. Alternatively, we could for the include file X11/Xlib.h and the library libX11.so Typical locations are\n/usr/include/X11/Xlib.h\n/usr/lib/libX11.so\n/usr/lib64/libX11.so\n. Fixed by #64\n. Fixed by #166 and d2cd9a3451936c0cad862771896dfd85efe1eacd\n. Although it's unusual on Linux, it doesn't hurt anything.\n. Hi, Mort. elixir has already been updated in the upstream Homebrew.\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Formula/elixir.rb\nIn the future, send updated versions there. I merge the upstream Homebrew with Linuxbrew about once a month. If you need an updated version of a particular formula sooner than that, you can fetch the updated formula manually from the upstream Homebrew.\nAll that being said, I merged Homebrew and Linuxbrew just now to close this issue.\n. Hi, Leon. It looks as though you've checked out Homebrew rather than Linuxbrew. Try removing  /home/leon/.dotfiles/.git/modules/.linuxbrew/ and then\nsh\ngit clone https://github.com/Homebrew/linuxbrew.git /home/leon/.dotfiles/.git/modules/.linuxbrew\nFor more details on installation instructions, see the README here.\n. Linuxbrew requires GCC 4.2 or better. If you're on Redhat or Fedora, you can use the gcc44 compiler. The easiest way to do this is to rename gcc to gcc41 and symlink gcc44 to gcc. Don't forget to do g++ as well.\n. gmp hasn't yet been patched to remove the MacOS-specific stuff. A pull request would be happily accepted. Use if OS.mac? as necessary.\n. If the patch won't be merged upstream into Homebrew, I prefer as small a patch as possible, to reduce merge conflicts. In this case, I'd just use:\nruby\n    system \"make check\" unless OS.linux? # Fails without LD_LIBRARY_PATH\nThe real solution is to make sure on Linux systems that the LD_LIBRARY_PATH environment variable is not cleared by superenv.\n. @dongli On Mac OS, the path to libgcc_s.1.dylib is hardcoded in the executable:\n$ gcc-4.8 hello.c -o hello\n$ otool -L hello\nhello:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1)\n    /usr/local/Cellar/gcc48/4.8.2/gcc/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)\n$ otool -l hello |grep gcc_s\n         name /usr/local/Cellar/gcc48/4.8.2/gcc/lib/libgcc_s.1.dylib (offset 24)\n. @dongli I've compiled gcc48 on Linux and reproduced your error:\n$ gcc-4.8 hello.c -o hello\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\n. I don't have a quick fix. It's going to require some troubleshooting.\n. This appears to be a known issue, bug 32415.\nThis workaround worked for me:\nsh\ncd `brew --prefix gcc48`/lib/gcc/x86_64-unknown-linux-gnu/4.8.2\nln -s ../lib64/libgcc_s.so* .\n. I've created a new issue, #66.\n. This issue is a duplicate of #42\n. Awesome, Leon. This work is fantastic. I think we have a good chance of getting this merged upstream into Homebrew-core. I've got a few comments, as line notes.\n. Thanks for the helpful comments, @jacknagel.\n. This issue has largely been resolved by ignoring the :x11 dependency on Linux. The dependency check could be improved to check that X11 is in fact installed, as this patch did.\n. I imagine you could simply change STRIP=/usr/bin/true to STRIP=true. Test it out, and if it works, submit it as a pull request to Homebrew-core.\n. Great. Submit a pull request to Homebrew/Homebrew. The Filesystem Hierarchy Standard says that true must reside in in /bin.\nhttp://www.pathname.com/fhs/2.2/fhs-3.4.html\nhttp://www.fifi.org/doc/debian-policy/fhs/fhs.html/fhs-3.1.html\n. Here's a workaround:\nsh\ncd `brew --prefix gcc48`/lib/gcc/x86_64-unknown-linux-gnu/4.8.2\nln -s ../lib64/libgcc_s.so* .\n. Now that we have gcc.rb to replace gcc48.rb, I'm going to close this ticket.\nFixed by ea61c54b7021102256eb4ae2256a2a624f6dc0cc\n. I get no errors on my Linux system when installing cmake. Can you report the exact error message that you get? Do you have the Homebrew expat 2.1.0 formula installed?\nYes, the patch should work on both Mac and Linux.\n. Duplicate of #69\n. Hi, Zhuyi. Please submit this formula to Homebrew-science:\nhttps://github.com/Homebrew/homebrew-science\nThanks!\n. Also please run brew audit rsem before submitting. See the Homebrew Formula Cookbook.\n. Hi, Francesco. This particular repository Linuxbrew/linuxbrew is no longer used. Please open a new ticket at Linuxbrew/brew. Report the command you're running and your error message. Thanks!\n. Try this totally untested patch:\n``` diff\ndiff --git a/Library/Homebrew/os/linux/hardware.rb b/Library/Homebrew/os/linux/hardware.rb\nindex 39ca96a..f6d88e7 100644\n--- a/Library/Homebrew/os/linux/hardware.rb\n+++ b/Library/Homebrew/os/linux/hardware.rb\n@@ -1,5 +1,9 @@\n module LinuxCPUs\n-  OPTIMIZATION_FLAGS = {}.freeze\n+  OPTIMIZATION_FLAGS = {\n+    :penryn => '-march=core2 -msse4.1',\n+    :core2 => '-march=core2',\n+    :core => '-march=prescott',\n+  }.freeze\n   def optimization_flags; OPTIMIZATION_FLAGS; end\n# Linux supports x86 only, and universal archs do not apply\n``\n. Fixed by 95ef3ea3e9365a522d490303452bf2bc17cf04e7\n. Hi, Masaki. I haven't worked on getting bottles working with Linuxbrew, so I suppose it doesn't surprise me that it fails. I don't have the time to work on bottling, but if you do have the time, and you get it working, send me a pull request. Cheers, Shaun\n. Thanks for the bug report, Masaki. It's fixed now, and bottles work!\n. I'll take a look at it next week.\n. Thanks for the bug report, Masaki. My current quick fix could be improved so that MacOS.version reports the distribution name and version number usinglsb_release`. For example:\nsh\nlsb_release -sir |tr ' ' '-'\nCentOS-5.10\n. Yes, I'd like to factor out os/version.rb from os/mac/version.rb and add os/linux/version.rb, but that will have to wait for another day when I have more time.\n. Is this a bug in VIM, and if so, is it reported upstream, and is it fixed upstream?\n. I'm disinclined to add patches to Linuxbrew that are needed for a particular distribution. One workaround that should work would be to install GCC 4.8 and use it to compile VIM.\nsh\nbrew install gcc\nbrew install --cc=gcc-4.8 vim\n. Hmm. That's disappointing. Can you post a gist of the error?\n. --as-needed is a linker feature, so I guess the error persists even after upgrading GCC because you're still using the linker that came with your system. What does ld --version and ld --help |grep as-needed report?\nHave you reported this issue on the VIM mailing list?\n. I would post it and see if they have any comments on the issue. I'm going to close this issue as wontfix. I'm trying to keep the differences between Homebrew and Linuxbrew relatively small, because I have to manually merge the two branches each week, and merge conflicts take time to resolve.\n. Hi, Brad. My apologies for the accidental regression. I can't test this today, but I'll merge it on spec. Thanks for the patch.\n. My pleasure, Brad. Thanks for your contributions.\n. A pull request would be welcome. Otherwise, I'll take a look at this next week. Cheers, Shaun\n. Does PR #64 fix this issue?\n. Waiting for response.\n. Hi, Tony. gmp4 is in Hombrew-versions, and Linuxbrew does not currently support formula in Homebrew-versions. You can install GCC 4.8 with brew install gcc. If you really need GCC 4.4, you should be able to port over the patches from gmp to gmp4.\n. I don't know the answer to your question. I'd start be trying to install your formula with brew install -v -d, -v for verbose and -d for debug. Your patch should apply using patch -p1. It's probably easier to test that outside of Homebrew.\n. Fixed by 51c1301\n. Closed the wrong issue in 51c1301. Should have been #83.\n. Probably, yes, but this issue should be opened at https://github.com/neovim/neovim\n. Ah, I understand now. Sorry, I read too quickly and misunderstood.\nDoes sudo apt-get install libssl-dev or sudo yum install openssl-devel resolve your issue?\n. The policy with Linuxbrew is that all the libraries included with Mac OS should also be installed using the native package manager on Linux. The formula of Homebrew assume these libraries are available and don't list them as explicit dependencies, which is unfortunate, but Homebrew won't accept patches to add explicit dependencies. Here's a list of these dependencies. I'll add OpenSSL to this list if it resolves this issue.\n. On Ubuntu, libssl.so is installed in /usr/lib/x86_64-linux-gnu and md5sha1sum is not finding it. I'm not sure why it's installed there and not simply in /usr/lib.\n$ dpkg -L libssl-dev |grep 'so$'\n/usr/lib/x86_64-linux-gnu/libcrypto.so\n/usr/lib/x86_64-linux-gnu/libssl.so\n. I'd suggest opening an issue with the developers of md5sha1sum.\n. Thanks for the fix, Mort.\n. I'm going away for two weeks. I'll look into this when I get back. Thanks for the report.\n. Hi, Mort. headerpad_max_install_names appears to be used only by --env=std and not by the default --env-super, so it seems reasonable that it could be removed entirely from Homebrew. Can you open a pull request at https://github.com/Homebrew/homebrew?\n$ grep -r headerpad_max_install_names /usr/local/Library/Homebrew\n/usr/local/Library/Homebrew/extend/ENV/std.rb:    append 'LDFLAGS', '-Wl,-headerpad_max_install_names'\n. I'm seeing a similar error when compiling R, and it may be related to this issue.\nmake[4]: Entering directory `/tmp/r-9185/R-3.1.1/src/library/grDevices'\nbyte-compiling package 'grDevices'\nWarning in solve.default(rgb) :\n  unable to load shared object '/tmp/r-9185/R-3.1.1/modules//lapack.so':\n  /tmp/r-9185/R-3.1.1/modules//lapack.so: undefined symbol: zgesdd_\nError in solve.default(rgb) : LAPACK routines cannot be loaded\nError: unable to load R code in package 'grDevices'\nExecution halted\nmake[4]: *** [../../../library/grDevices/R/grDevices.rdb] Error 1\nmake[4]: Leaving directory `/tmp/r-9185/R-3.1.1/src/library/grDevices'\n. Why do you need boost 1.49? Does gtsam not compile with boost 1.55.0?\n. Fixed by 246e927e28cd9a644a70a1cf4be31065a3e4c22c\n. Thanks for the fix, @sunteya.\n. Hi, Hugo. Can you try installing the Ubuntu package libxslt-dev?\nsh\napt-get install libxslt-dev\nbrew install postgresql\n. brew install libxslt\n. No worries. There are still more issues with postgresql. See #108\n. What is the purpose of this pull request?\n. Hi, Rory. Linuxbrew maintains compatibility with Macs, so that the patches might one day be merged into Homebrew.\n. I see this error message:\n/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory\n # include <gnu/stubs-32.h>\nThe root problem is that MacOS.prefer_64_bit? is returning false. On Linux, MacOS.prefer_64_bit? should return true. Can you look into fixing the root cause?\n. masurca builds for me on CentOS 5.10 with GCC 4.4 and GCC 4.8. It also fails to build for me on Ubuntu 14.04 with a not-very-helpful error message:\nCXXLD  addSurrogatesToFrgCtgFile\nmake[1]: *** No rule to make target `src/masurca', needed by `all-am'.  Stop.\nmake[1]: Leaving directory `/tmp/masurca-bRuJ/MaSuRCA-2.2.1/SuperReads'\nmake: *** [install] Error 2\n. I won't be able to look into this for a couple weeks. I hope you're able to find a solution, and if you do, please post it here. Does MaSuRCA build outside of Linuxbrew?\n. Fixed by https://github.com/Homebrew/homebrew-science/commit/1b37e913e657c1713785c227186d273d2fad3d9a\n. Can you report the output of\nsh\nruby -e \"$(wget --no-check-certificate -O- https://raw.github.com/Homebrew/linuxbrew/go/install)\"\nand\nsh\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/linuxbrew/go/install)\")\n. Great! Glad to hear it.\n. I haven't had the time to merge, but you can test #64, and see if it fixes this issue for you?\n. Try brew edit freeimage and change patch :DATA to patch :DATA if OS.mac?\nIf that works, please submit a pull request.\n. Please open a new issue for poco.\n. Open and edit ~/.linuxbrew/Library/Formula/freeimage.rb\n. I'm afraid I don't have the time to look into this. I leave the issue open. If you're able to solve it, please post the solution. Cheers, Shaun\n. I also see the same error memset error on Ubuntu 14.04.\n. I'd suggest reporting this issue to OpenEXR. It doesn't look specific to Homebrew/Linuxbrew.\n. In that case, I'm going to close this issue. Feel free to reopen it if you make progress on a solution. Good luck!\n. Try deleting the line\nruby\n\"--config=#{arch}\",\nIf that works, please submit a pull request.\n. No, not built into Homebrew.\n. Why do you want to link statically? I probably won't merge that pull request. Dynamic linking is typical.\n. See Homebrew/homebrew#30637\n. I don't have the time at the moment in assessing the portability of bottles (binary packages) between distributions of Linux. It is something I'm interested in though. Check out brew bottle poco.\n. A bottle is a binary package made from a Homebrew formula. See https://github.com/Homebrew/homebrew/wiki/Bottles\n. See #98 and Homebrew/homebrew#30637\n. Thanks for the patch, @tsuharesu. For future patches, Linuxbrew aims to maintain the current behaviour on Mac. The desired patch would be\n``` diff\n--- a/Library/Formula/activemq.rb\n+++ b/Library/Formula/activemq.rb\n@@ -8,7 +8,7 @@ class Activemq < Formula\n   skip_clean 'libexec/webapps/admin/WEB-INF/jsp'\ndef install\n-    rm_rf Dir['bin/linux-x86-']\n+    rm_rf Dir['bin/linux-x86-'] unless OS.linux?\n prefix.install_metafiles\n libexec.install Dir['*']\n\n``\n. Hi, @zeneofa. If you don't have root access, perhaps your sysadmin can you help troubleshoot this issue. You can try installinglibiconv` from Homebrew. It's worth a shot.\nsh\nbrew install homebrew/dupes/libiconv\nbrew link --force libiconv\nYou could also try opening an issue upstream with the pkg-config developers. I'm tapped out for ideas, so I'm going to close this ticket. Feel free to continue commenting here if you have further information.\nCheers,\nShaun\n. On Fedora/RedHat systems try sudo yum install libXmu-devel. On Ubuntu/Debian systems, try sudo apt-get install libxmu-dev.\n. I agree. Can we move ISSUES_URL from global.rb to os.rb and define it appropriately based on the OS?\n. Fixed by Homebrew/homebrew#30830\n. Try this (untested) patch:\n``` diff\ndiff --git a/Library/Formula/gource.rb b/Library/Formula/gource.rb\nindex 11db522..0e173c2 100644\n--- a/Library/Formula/gource.rb\n+++ b/Library/Formula/gource.rb\n@@ -23,7 +23,7 @@ class Gource < Formula\n   # boost failing on lion\n   depends_on :macos => :mountain_lion\n\nif MacOS.version < :mavericks\nif MacOS.version < :mavericks && !OS.linux?\n     depends_on \"boost\" => \"c++11\"\n   else\n     depends_on \"boost\"\n``\n. Ah, yes. Please do.\n. Fixed in #109.\nThanks for the troubleshooting Eric @mcflugen, and for the fix Michael @mbsullivan\n. Short answer:brew install glibc --with-binutils --with-linux-headers`\n\nSee if that gets you further. I'll try a more complete response later.\n. You'll have to clear your LD_LIBRARY_PATH:\nunset LD_LIBRARY_PATH\nOr alternatively,\nbrew unlink glibc\n. Programs patched with patchelf when they were installed will continue to use the new glibc whether it's linked or not. I'm on vacation for my sister's wedding. I'll be back in a week to help troubleshoot.\n. > The ldd that is installed along with glibc 2.19 (located at .linuxbrew_bottle/opt/glibc/bin/ldd) does not recognize any programs as being dynamic executables, including luajit.\nI have the same issue. I don't know why the newly installed ldd doesn't work. Try using LD_TRACE_LOADED_OBJECTS instead:\n$ LD_TRACE_LOADED_OBJECTS=1 hello\n    linux-vdso.so.1 (0x00007ffff11fd000)\n    libc.so.6 => /projects/btl/linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 (0x00002b2d1f2a6000)\n    /projects/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00002b2d1f087000)\nI've created a new wiki page with instructions for a Standalone Installation of Linuxbrew.\n. I've merged the branch bottle into master.\n. > Inconsistency detected by ld.so: get-dynamic-info.h: 134: elf_get_dynamic_info: Assertion `info[15] == ((void *)0)' failed!\nI've managed to reproduce this error, but I have no idea what's causing it. I'll try to sort it out and get back to you.\n. Here's a related thread:\nhttps://sourceware.org/ml/libc-help/2013-06/msg00038.html\n. @jrevillard What distribution of Linux are you using, and what version of GCC are you using to bootstrap the system?\n. @jrevillard The following patch may fix your issue. After applying the patch, try\nsh\nbrew update\nbrew reinstall glibc\ncd `brew --prefix`\nchmod +x lib/ld-linux-x86-64.so.2 lib/libc.so.6\nbrew test glibc\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 9d067a6..1f484dd 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -57,7 +57,7 @@ module Stdenv\n append 'LDFLAGS', '-Wl,-headerpad_max_install_names' if OS.mac?\n\n\nif OS.linux?\nif OS.linux? && formula != \"glibc\"\n       # Set the dynamic library search path\n       append \"LDFLAGS\", \"-Wl,-rpath,#{HOMEBREW_PREFIX}/lib\"\n       self[\"LD_RUN_PATH\"] = \"#{HOMEBREW_PREFIX}/lib\"\n``\n. @jrevillard The short answer isbrew unlink glibc`.\n. @mbsullivan To use a newer version of GCC, try\n\nsh\nln -s /usr/bin/gcc44 ~/.linuxbrew/bin/gcc-4.4\nln -s /usr/bin/g++44 ~/.linuxbrew/bin/g++-4.4\nln -s /usr/bin/gfortran44 ~/.linuxbrew/bin/gfortran-4.4\nexport HOMEBREW_CC=~/.linuxbrew/bin/gcc-4.4\n. There was a bug in my patch way above to fix Inconsistency detected by ld.so: get-dynamic-info.h: 134: elf_get_dynamic_info: Assertion 'info[15] == ((void *)0)' failed!. I've opened a new issue #126 and closed it with 90ae56d.\n. @mbsullivan Can you please report the error that you see in config.log when attempting to use the system gcc 4.7.1?\nThe formula in homebrew/versions are unfortunately not patched for Linux.\n. @mbsullivan Does the following work?\nsh\nbrew install --cc=gcc-4.7 hello\nbrew test -v hello\n. @jrevillard Glad to hear it!\n. @mbsullivan You'd be in very shaky territory, and I'd say likely not. The GCC that is built depends on the system's installed glibc. Moving the built GCC to a system with a different version of glibc usually results in chaos. I worked yesterday on building a GCC that does not depend on the system's glibc using --with-native-system-header-dir, but ran into trouble. It's not easy.\n. @jrevillard \nsh\nbrew update\nbrew install openssl zlib\nbrew link openssl zlib\nbrew install curl\n. @jrevillard You can safely ignore those post-install error messages. There not pretty, but won't hurt anything.\n. @jrevillard I moved zlib to the front of the list. I added bzip2 to the new section Install core utilities.\n. I also ran into that issue. I don't have a nice fix yet. Here's the workaround:\nsh\nln -s /lib64/libselinux.so.1 /lib64/libsepol.so.1 $prefix/lib\nSee Hacks and workarounds: libselinux\n. @jrevillard PCRE workaround\n. Python seems broken.\nsh\n\u276f\u276f\u276f python --version\nPython 2.7.8\n\u276f\u276f\u276f python <<<'print 1+1'\n2\n\u276f\u276f\u276f cd `brew --prefix`/opt/python/libexec/setuptools/\n\u276f\u276f\u276f python setup.py\nSegmentation fault\n. No advice, sorry, and I don't really have the time to help troubleshoot either. Please open a new issue, and I hope that you're able to find a solution.\n. I know that python and pip did compile correctly for me once, so there is hope. You may want to check whether the rpath and dynamic-linker hack is somehow breaking either python or openssl.\n. @xanderhsia ldd may not be reporting the correct libraries if it's from the system's glibc. Try instead LD_TRACE_LOADED_OBJECTS=1 msgfmt.\nPrograms are not currently being compiled against the new glibc. They are being compiled against the system's glibc, but being run with the Linuxbrew glibc. I'm working on improving this situation by compiling gcc using --with-sysroot so that GCC will use only the new glibc. It's slow going, but I'm making progress.\n. I've created a new branch sysroot that compiles GCC (and binutils and glibc) --with-sysroot, which should really isolate it from the system libraries and headers. It's a work in progress, but it's finally at the point where it's starting to work. Here's the Sysroot wiki instructions.\n. I've abandoned the sysroot branch (see #130).\n. I've made improvements on the glibc front in the master branch. The previous situation was that programs were compiled against they system's glibc, but then run using the Linuxbrew glibc. Although it seemed to work, it was definitely not an ideal situation. The updated Standalone wiki will both compile and run using the Linuxbrew glibc. The system glibc should not be used at all.\nI've created a branch gcc-specs to test modifying the default GCC specs file to add $HOMEBREW_PREFIX/lib do the default library search path of GCC.\n. The new brew install gcc --with-glibc option configures gcc with ../configure --with-native-system-header-dir=#{HOMEBREW_PREFIX}/include. See gcc.rb.\n. I've merged the gcc-specs branch into master.\n. I've add a quick-and-easy summary of the installation instructions for a standalone Linuxbrew system. It's getting close to being as easy as brew install gcc --with-glibc, though not quite there yet.\n. The Fortran compiler seems to be totally broken. The executables it compiles segfault. I'm going to guess that it's not the compiler itself, but something about the linker that's building broken executables. I am not very familiar with Fortran though.\n```\n$ gfortran-4.9 hello-f.f -o hello-f\n$ ldd hello-f\n    linux-vdso.so.1 (0x00007fff96ffd000)\n    libgfortran.so.3 => /home/sjackman/.linuxbrew/lib/libgfortran.so.3 (0x00002b9e19230000)\n    libm.so.6 => /home/sjackman/.linuxbrew/lib/libm.so.6 (0x00002b9e194fd000)\n    libgcc_s.so.1 => /home/sjackman/.linuxbrew/lib/libgcc_s.so.1 (0x00002b9e197ef000)\n    libquadmath.so.0 => /home/sjackman/.linuxbrew/lib/libquadmath.so.0 (0x00002b9e19a01000)\n    libc.so.6 => /home/sjackman/.linuxbrew/lib/libc.so.6 (0x00002b9e19c32000)\n    /home/sjackman/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00002b9e19011000)\n$ ./hello-f\nProgram received signal SIGSEGV: Segmentation fault - invalid memory reference.\nBacktrace for this error:\n0  0x2ad08df672aa\n1  0x2ad08df67774\n2  0x2ad08e98041f\n3  0x2ad08df68d8a\n4  0x40082d\n5  0x2ad08e970247\n6  0x4006d8\nSegmentation fault\n```\n. I'd really appreciate some help from a Fortran expert in helping debug this issue, if one happens to read this message.\n. Here's some evidence that the compiler is fine, but the linker is broken:\nbash\necho '        END' >null-f.f\ngfortran-4.9 -c null-f.f\ngfortran-4.4 -o null-f null-f.o\n./null-f\ngfortran-4.9 -o null-f null-f.o\n./null-f\n```\nProgram received signal SIGSEGV: Segmentation fault - invalid memory reference.\nBacktrace for this error:\n0  0x2b79886832aa\n1  0x2b7988683774\n2  0x2b798909c41f\n3  0x2b7988684d8a\n4  0x400686\n5  0x2b798908c247\n6  0x400598\nSegmentation fault\n``\n. Something seems broken withlibgfortran.so.3. If I compile and link withgfortran-4.9and then run the executable usinglibgfortran.so.3` from gfortran-4.1 included with CentOS 5.10, it works.\n``` bash\ngfortran-4.9 -o null-f null-f.o\npatchelf --set-rpath '' ./null-f\npatchelf --remove-needed libquadmath.so.0 null-f\npatchelf --remove-needed libgcc_s.so.1 null-f\nLD_PRELOAD='/usr/lib64/libgfortran.so.3' ./null-f \nsuccess!\nLD_PRELOAD=~/.linuxbrew/lib/libgfortran.so.3 ./null-f \nexplode!\nldd ./null-f\n```\nlinux-vdso.so.1 (0x00007fffc91fd000)\n    libgfortran.so.3 => not found\n    libm.so.6 => /home/sjackman/.linuxbrew/Cellar/glibc/2.19/lib/libm.so.6 (0x00002b073b2e4000)\n    libc.so.6 => /home/sjackman/.linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 (0x00002b073b5d6000)\n    /home/sjackman/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00002b073b0c5000)\n. libgfortran.so.3 also needs libquadmath.so.0 and libgcc_s.so.1, so the issue could also be with one of those.\n$ ldd ~/.linuxbrew/lib/libgfortran.so.3\n    linux-vdso.so.1 (0x00007fff295fd000)\n    libquadmath.so.0 => /home/sjackman/.linuxbrew/Cellar/gcc/4.9.1/lib/../lib64/libquadmath.so.0 (0x00002b2335a41000)\n    libm.so.6 => /home/sjackman/.linuxbrew/Cellar/glibc/2.19/lib/libm.so.6 (0x00002b2335c74000)\n    libgcc_s.so.1 => /home/sjackman/.linuxbrew/Cellar/gcc/4.9.1/lib/../lib64/libgcc_s.so.1 (0x00002b2335f66000)\n    libc.so.6 => /home/sjackman/.linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 (0x00002b2336178000)\n    /home/sjackman/.linuxbrew/Cellar/glibc/2.19/lib64/ld-linux-x86-64.so.2 (0x00002b2335553000)\n. I've created a new issue for gfortran. #135 @jrevillard\n. The first Linux bottle, linux-headers is uploaded! I'm very excited by this new work. I've created a SourceForge project to host the bottles. This particular bottle is nice because it consists of only headers files, and so is easy to bottle, and reduces the download size from 116 MB to 948 kb.\n\u276f\u276f\u276f du -h linux-headers-3.15.*.gz\n116M    linux-headers-3.15.9.tar.gz\n948K    linux-headers-3.15.9.x86_64-linux.bottle.tar.gz\n```\n\u276f\u276f\u276f brew install linux-headers\n==> Downloading https://downloads.sf.net/project/linuxbrew/Bottles/linux-headers-3.15.9.x86_64\n################################################################## 100.0%\n==> Pouring linux-headers-3.15.9.x86_64-linux.bottle.tar.gz\n/projects/btl/linuxbrew/Cellar/linux-headers/3.15.9: 731 files, 5.4M\n```\n@mbsullivan See also #136\n. For gawk, try running brew postinstall glibc.\nFor libxslt, adding --without-crypto to configure might work. If it does, please submit a pull request to Linuxbrew.\nFor ruby,\nsh\nln -s ncursesw/curses.h ~/.linuxbrew/include/\nln -s libncursesw.so ~/.linuxbrew/lib/libncurses.so\nln -s libncursesw.so ~/.linuxbrew/lib/libcurses.so\n. @chapmanb There's two ways to make bottles compatible. One is to build them with ancient versions of glibc (CentOS 5 seems like a good marker for that) and the other is to build with a recent version of glibc and bottle glibc as well. I'm leaning toward the latter solution, but which do you think is better?\n. glibc cannot be installed in a directory found in LD_LIBRARY_PATH or the world explodes. The current Standalone instructions do not require setting LD_LIBRARY_PATH and instead set the RPATH of each individual executable compiled by Linuxbrew. That way old executables use their old search path and libraries, and new executables use the Linuxbrew search path and libraries.\nI'm not entirely against using glibc 2.5\u2014it would be nice to bottle software that just works without any supporting libraries\u2014but I'm guessing we'll eventually run into bugs and software that won't compile using glibc 2.5. Ditto for ancient versions of GCC and libgcc_s.so.\n. > cannot open locale definition file `C': No such file or directory\nOkay. I'll fix this. In the mean time, try (change en_US as you desire):\nsh\nLC_ALL=en_US.UTF-8 brew postinstall glibc\n. > Awesome, that works! Should those links be created by brew install libncurses by default?\nYes, but ncurses lives in Homebrew/dupes, and I haven't forked or figured out how to patch formula in homebrew/dupes yet. I may just copy ncurses.rb to Homebrew/linuxbrew.\n. > It seems like there must be some security and performance downsides to not upgrading.\n:+1:\n. Grumble. Attempt number 2.\nsh\nLANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 brew postinstall glibc\n. @mbsullivan Okay, fixed. Next time you fix it. :smile: brew update\n. @chapmanb @mbsullivan I've created a glibc25 2.5.1 formula to experiment with building bottles using glibc25. My inclination is to use a modern glibc. 66b99b300655b880381a97bc2c34e01232b868e6\n. Hi, J\u00e9r\u00f4me. I merged some upstream commits that changed quite a bit how the compiler is selected. I haven't had a chance to go through them all yet. In the mean time, brew tap homebrew/versions should work around this issue. @jrevillard\n. @mbsullivan I'm seeing this error message now too. Did you find a solution? I think it's this known bug.\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: executing default-1 commands\n../../zlib/../config-ml.in: eval: line 160: unexpected EOF while looking for matching `''\n../../zlib/../config-ml.in: eval: line 161: syntax error: unexpected end of file\nmake[2]: *** [configure-stage1-zlib] Error 1\nmake[2]: Leaving directory `/tmp/gcc-A1tmlR/gcc-4.9.1/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory `/tmp/gcc-A1tmlR/gcc-4.9.1/build'\nmake: *** [bootstrap] Error 2\n. I've created a Docker image for Standalone Linuxbrew! Try it out with:\ndocker run sjackman/linuxbrew-standalone\nI'm planning on using Docker to build bottles for Linuxbrew.\n. Excellent news! I've used Docker to create bottles for all of the formula necessary for standalone Linuxbrew, and 16 of 32 bottles are relocatable without any extra work! After some testing, on a few different distros, I'll be be able to start posting these bottles for general use.\nhttps://registry.hub.docker.com/u/sjackman/linuxbrew-bottle/\n\u276f\u276f\u276f docker run --rm sjackman/linuxbrew-bottle sh -c 'grep -l :any ~/bottles/*.rb' |sed 's~^.*/~~'\ncloog-0.18.1.x86_64-linux.bottle.rb\ncurl-7.38.0.x86_64-linux.bottle.rb\nexpat-2.1.0.x86_64-linux.bottle.rb\ngmp-6.0.0a.x86_64-linux.bottle.rb\ngnu-which-2.20.x86_64-linux.bottle.rb\ngrep-2.20.x86_64-linux.bottle.rb\nisl-0.12.2.x86_64-linux.bottle.rb\nlibmpc-1.0.2.x86_64-linux.bottle.rb\nlibpng-1.6.13.x86_64-linux.bottle.rb\nlibyaml-0.1.6.x86_64-linux.bottle.rb\nlinux-headers-3.15.9.x86_64-linux.bottle.rb\nmakedepend-1.0.5.x86_64-linux.bottle.rb\nmpfr-3.1.2-p10.x86_64-linux.bottle.rb\npcre-8.35.x86_64-linux.bottle.rb\nreadline-6.3.8.x86_64-linux.bottle.rb\nzlib-1.2.8.x86_64-linux.bottle.rb\n. To extract the bottles from the Docker image:\n~~docker save sjackman/linuxbrew-bottle |tar --strip-components=3 -x /home/linuxbrew/bottles~~\nEdit: This command does not work.\n. To extract the bottles from the Docker image:\nsh\ndocker run --name=linuxbrew-bottle sjackman/linuxbrew-bottle\ndocker cp linuxbrew-bottle:/home/linuxbrew/bottles .\n. I've uploaded 16 relocatable bottles to SourceForge.\n. @jrevillard Is there a particular other option that you have in mind?\n. I would like to resolve the gfortran issue. For me it affects building Open MPI, so it is on my radar. These same instructions do produce a working gfortran on Ubuntu 14.04.1, although perhaps not surprising since it would have a recent glibc. I have hope for building a bottle of gcc using Ubuntu that will also run on CentOS, but there's probably some work involved here.\nI don't fully understand GCC --sysroot, but I'm still planning on experimenting with it.\n. All the dependencies of GCC (cloog gmp isl libmpc mpfr) are now bottled. See the commit history of 2014-10-28. I'd love to bottle the entire toolchain (glibc, binutils, glibc), but it'll be trickier to make these packages relocatable (that is, install in any directory).\n. Leave LD_LIBRARY_PATH set as necessary for your gcc, or use your system's GCC that does not require LD_LIBRARY_PATH. Do not set LD_LIBRARY_PATH to $HOMEBREW_HOME/lib.\n. If it does work, please post the patch.\n. Do Chromebrew and Linuxbrew have different prefixes? They should. Set LD_LIBRARY_PATH to the prefix of Chromebrew and do not set it to the prefix of Linuxbrew.\n. By default Linuxbrew installs into ~/.linuxbrew. I'd recommend putting Chromebrew in /usr/local and Homebrew in ~/.linuxbrew. That may help solve your problem.\n. Then install Linuxbrew into /usr/local/linuxbrew.\n. Avoid if possible setting LD_LIBRARY_PATH. You can try instead using patchelf to modify the RPATH of the GCC executables, or possibly adding /usr/local/lib to /etc/ld.so.conf.\n. I'm glad to hear that you're making progress. Those packages you mention should all be installed ~~before~~ after glibc. I'd recommend wiping out your linuxbrew directory, starting from scratch, and following the standalone installation instructions quite carefully. If you run into an error, post the exact command line that produced the error and the complete log in a gist.\n. Ah, I see. Can you post the complete log in a gist?\n. I don't see an error message in that gist, only a successful run of configure: configure: exit 0.\n. > What is the current directory, because lib is not an absolute path.\nSymlinks are relative to the location of the symlink itself.\n\nThis is the only command I skipped.\n\nDon't skip this command.\n. That being said, I don't think that the lib64 symlink is the source of your error. I think binutils has to be configured at its compile time to search a different location crti.o and libc.\n. I'm not sure. I've confirmed that my gcc toolchain is linking against /usr/lib64/crti.o when it should be linking against /home/sjackman/.linuxbrew/lib/crti.o. I'll need to do some research to figure out how to fix that. If I set GCC_EXEC_PREFIX=/home/sjackman/.linuxbrew/lib I get the error message cc: error trying to exec 'cc1': execvp: No such file or directory.\n. The solution I think requires finding a configure flag to specify to either binutils or gcc where to find glibc. You could try asking on the GCC mailing list.\nAm I correct in understanding that you don't have crti.o installed in either /usr/lib or /usr/lib64? Can you report find / -name crti.o?\n. The real question is how to configure binutils/glibc when glibc is installed in a non-standard location.\n. ldconfig -p does not include Linuxbrew directories. Linuxbrew uses RPATH instead.\n. I believe these issues are resolved. I'm closing this ticket. Feel free to open a new ticket if some of the issues raised here are still current.\n. brew install postgresql --without-ossp-uuid\nSee Homebrew/homebrew#32246\n. Hi, Michael. The current policy of Linuxbrew is that every package that's include with Mac OS must be installed by the native package manager as a dependency of Linuxbrew. That's the reason for these instructions in the README. If it's not possible to installed these dependencies using the native package manager, I'd like to support installing the dependencies from Homebrew/dupes.\n. Probably every package in Homebrew/dupes should be in that list of dependencies, but I've been adding to the list of dependencies on a piecemeal basis as users report issues so as to keep the list as small as is practically necessary in a real world situation.\nI agree that Homebrew/dupes is a more self-contained solution for users without sudo (like me, in fact).\n. Fixed by 6bc383c.\n. Fixed by 6bc383c.\n. Linuxbrew is currently only supported on 64-bit Intel architectures. A pull-request that implements support for ARM would be welcome.\n. Is this a Raspberry Pi board?\n. I won't be adding ARM support myself, because I have no ARM hardware on which to test it. I will merge a pull request to add support for ARM to Linuxbrew provided that a couple people can vouch that it works.\n. Homebrew (not Linuxbrew) supports PPC and Intel. Search Library/Homebrew for ppc and you'll probably find most of the locations that need to be changed. It's probably doable with some effort.\n. I've added ARM support to Linuxbrew for the Raspberry Pi. I have a Raspberry Pi myself now. Happy hacking!\nSee 2077229dfdcc32559c80349080d8baf345ef42b9\n. A pull request is welcome. I'm afraid that I don't have the time to troubleshoot individual formula.\n. Done. Fixed by 35c6edf2204d988e5aab89d82bfeebf4bad8c3c0\n. I usually merge every Monday.\n. Thanks, Jakub. I've applied one line of your patch. You'll need to use\nbrew install erlang --without-wxmac\n. I'd rather address the root issue, which is installing wxmax on Linux. Pull requests welcome.\n. Thanks for your contribution.\n. Could you please open this pull request at https://github.com/Homebrew/homebrew rather than here at https://github.com/Homebrew/linuxbrew? Please include your description from #26.\n. Fixed by 9e03cdc4555af23a5224970fbdb18d1f97257872\nSee Homebrew/homebrew#31586\n. Oddly, the code as it is currently is actually working for me. Does it not work for you? That's a bit of a mystery to me. Now that I look at it, it looks as though it shouldn't work. Maybe the GCC parsing of command linker options has gotten smarter. In any case, I'll merge this patch tomorrow.\n. I'm thinking it may be a difference in GCC version. I'm using GCC 4.8.2 on Ubuntu. You?\n. Can you paste the linker line that you see after\nsh\nbrew install -v hello\n. I can't for the life of me duplicate this bug. See below testing with GCC 4.4.7-1.\n$ gcc-4.4 -Wl,-rpath /projects/btl/linuxbrew/lib hello.c -o hello\n$ readelf -d hello |grep RPATH\n 0x000000000000000f (RPATH)              Library rpath: [/projects/btl/linuxbrew/lib]\n$ gcc-4.4 --version\ngcc-4.4 (GCC) 4.4.7 20120313 (Red Hat 4.4.7-1)\n. Fixed by f877dc7\n. I agree, which is why I changed it. I'm just confused as to why spaces seem to also work, sometimes.\n. I'm planning on merging bottle into master today, if all goes well.\n. I'm quite surprised that valid_extensions includes .so, since I don't think that extension is usually used on Mac. I'll take this patch as-is. It could be improved though so that it may be accepted upstream into Homebrew by changing valid_extensions to be a list of a regex and add /\\.so\\./. Would you be able to take a stab at sending that PR upstream?\n. The formula in Homebrew/versions are not patched for Linux. Sorry.\n. I'm afraid that I don't have the time to help you troubleshoot this issue. If it is an upstream bug, hopefully it will be resolved in gcc 4.9.2. If you do find a solution, please report back here.\n. @aktau I'm going to close this issue for now. When GCC 4.9.2 is released, please report whether that fixes your issue.\n. This issue is not specific to Linuxbrew. Please submit it to Homebrew/homebrew. Homebrew is merged into Linuxbrew each week.\n. I ran into this issue once as well, but I don't recall where. Do you have a concrete example of where a lib gets installed in a funny multilib directory?\n. Yes, I see a bunch of libraries installed in ~/.linuxbrew/opt/gcc/lib64. I'd rather these be installed in lib than lib64. I wonder if gcc has a configure option for that. This issue causes brew test gcc to fail:\n$ brew test gcc\nTesting gcc\n==> /home/sjackman/.linuxbrew/Cellar/gcc/4.9.1/bin/gfortran -c in.f90\n==> /home/sjackman/.linuxbrew/Cellar/gcc/4.9.1/bin/gfortran -o test in.o\n./test: error while loading shared libraries: libquadmath.so.0: cannot open shared object file: No such file or directory\nError: gcc: failed\n. I feel like brew install --without-multilib gcc and ./configure ----disable-multilib should disable this lib64 shenanigans, but I guess that's hoping for too much. What causes the sub-configure scripts to choose lib64 rather than lib?\n. One solution would be to symlink lib64 to lib in the prefix of the formula before building it. I think that may work.\n. Since we're not actually planning to support multiarch/mutlilib in Linuxbrew, it's tidier to install all libraries in /lib. I'd rather understand why some packages are using lib64, and disable that mechanism. Perhaps we could add configure --disable-multilib to the offending packages to get the desired behaviour. Having 32-bit libraries installed in lib picked up by the rpath could cause all sorts of havoc.\n. I'd like to know how the package (libffi for example) decides to install the libraries in lib64 rather than lib.\n. I committed this uncharming little hack for gcc to move lib64 to lib.\n. Fixed by ee29417c149921e26e084ef05c19a0fc48eb24eb\n. An alternative solution that may work is to not set LD_RUN_PATH.\n. Can you try the following, and if that still fails, can you please post a gist of the logs?\nsh\nbrew update\nbrew install openssl zlib\nbrew link openssl zlib\nbrew install curl -v\n. The relevant error is error while loading shared libraries: libsasl2.so.2.\nhttps://gist.github.com/xanderhsia/bf265ef72df4f2009786#file-config-log-L3620\nconfigure:26472: checking run-time libs availability\nconfigure:26489: /u/ahhsia/.linuxbrew/bin/gcc-4.9 -o conftest -Os -w -pipe -march=core2 -Wno-system-headers -isystem/u/ahhsia/.linuxbrew/include -I/u/ahhsia/.linuxbrew/Cellar/openssl/1.0.1i/include  -L/u/ahhsia/.linuxbrew/lib -Wl,-rpath,/u/ahhsia/.linuxbrew/lib -Wl,--dynamic-linker=/u/ahhsia/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -L/u/ahhsia/.linuxbrew/Cellar/openssl/1.0.1i/lib  conftest.c -lssl -lcrypto -lssl -lcrypto  -llber -lldap -lz -lrt >&5\nconfigure:26489: $? = 0\nconfigure:26489: ./conftest\n./conftest: error while loading shared libraries: libsasl2.so.2: cannot open shared object file: No such file or directory\n. Thanks for the fix, Alexander.\n. Hmm. That's interesting. The workaround is to set HOMEBREW_TEMP.\n. @houqp Would you like to add a test to brew doctor that checks whether files in HOMEBREW_TEMP are executable?\n. Fixed by https://github.com/Homebrew/linuxbrew/pull/174\n. Hi, Cesar. I'd prefer to add the compiler symlink creation magic to the code itself than to the documentation. The HOMEBREW_TEMP issue should be documented for Ubuntu, or even better, the code code check whether /tmp is executable. In the mean time, feel free to create a Wiki page to add documentation, which you can do yourself.\n. That patch 0b330bf removes the need to force link formula that are keg_only :provided_by_osx. Does brew unlink openssl before brew install python work around this issue?\n. Try brew install \u2212\u2212ignore\u2212dependencies python.\n. @mbsullivan Would you please be able to lend a hand getting Python working again? OpenSSL seems broken. curl also uses openssl. That could be a second test case.\nSee also Homebrew/homebrew#22816 and Homebrew/linuxbrew#110.\n. I just figured it out. Homebrew was mistakenly setting CPPFLAGS=-I#{MacOS.sdk_path}/usr/include, which on Linux is CPPFLAGS=-I/usr/include, and this really broke things.\n. My patch is good enough to fix pip, but it's not perfect. Python setup.py still adds -I/usr/include by default, which is broken. See http://hg.python.org/cpython/file/070fed5b7b9d/setup.py#l524\npython\n            inc_dirs = self.compiler.include_dirs + ['/usr/include']\nIt results in warnings like these in the build log\n/usr/include/features.h:299:0: warning: \"__STDC_ISO_10646__\" redefined\n #define __STDC_ISO_10646__  200009L\n/home/sjackman/.linuxbrew/include/stdc-predef.h:54:0: note: this is the location of the previous definition\n #define __STDC_ISO_10646__  201103L\n. I've also experienced issues with Python and OpenSSL. I know that I don't have any issues now with a fresh install. My best suggestion for a workaround would be to remove Python and all its dependencies and reinstall it.\n.  Hmm. Try (untested)\nsh\nbrew unlink glibc-sysroot\nbrew install --only-dependencies gcc\nbrew link glibc-sysroot\nbrew install gcc --with-sysroot --without-multilib -v\n. The better solution is probably to add ENV.delete \"LD_RUN_PATH\" to gmp.rb as in gcc.rb. I'm starting to think setting LD_RUN_PATH in ENV/std.rb is more trouble than it's worth.\n. pcre fails make check. I've reported an upstream issue 1525.\n. Have you tried compiling GCC 4.9 outside of Linuxbrew with ../configure && make? I'd send this question to gcc-help@gcc.gnu.org.\n. LD_RUN_PATH is no longer set. See 0b6ffd955ba8b4820242e9ac306df5ebe2020587.\n. @mbsullivan I get the feeling that a sysroot configuration of GCC is primarily intended for eventually chrooting into that sysroot. Since we don't plan to chroot (although that might be an interesting, separate project), I get the feeling sysroot is not the correct solution. So, I'm going to keep the sysroot branch as a record, but suspend its development.\nI think that we may be able to achieve a similar result more simply by modifying the default GCC specs file. See this new gcc-specs branch.\n. Hi, Piet. This is just a short in the dark, but you could try brew install openssl.\nOtherwise, you can try using a standalone installation of Linuxbrew that does not use your system libraries, and git should install fine. Here's the wiki instructions. You will need to do this in a fresh installation of Linuxbrew.\n. I'm going to close this issue for now. Feel free to comment, and I'll reopen if neither suggested solution works.\n. nvm is already at version 0.15.0 in the upstream Homebrew. It will be merged into Linuxbrew this week (likely today).\n. Issues that are not specific to Linuxbrew should be opened at Homebrew.\nhttps://github.com/Homebrew/homebrew/issues\n. This mirror works for me. http://apache.mirror.rafal.ca/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz\n. I've never seen that message with Linuxbrew, so I have no idea what's causing this error. Linuxbrew shouldn't need sudo. In which directory did you install Linuxbrew?\n. Can you post here the entire output of brew install hello?\n. My guess is that it's line 184  in build.rb. Can you try commenting out this line? On my system without sudo access, sudo -k does not give an error. What do you see if you run sudo -k?\n. Glad we sorted this out. sudo is not required for Linuxbrew. You can safely comment out that line.\n. Yes, ultimately I think that's true. I just haven't found the necessary link flags to make it work.\n. gfortran -static is broken. Perhaps it's related?\n$ gfortran-4.9 -static -o null-f null-f.f\n/home/sjackman/.linuxbrew/lib/libgfortran.a(main.o): In function `_gfortrani_find_addr2line':\n/var/tmp/sjackman/gcc-eN9389/gcc-4.9.1/build/x86_64-unknown-linux-gnu/libgfortran/../../../libgfortran/runtime/main.c:165: undefined reference to `__secure_getenv'\n/home/sjackman/.linuxbrew/lib/libgfortran.a(unix.o): In function `tempfile':\n/var/tmp/sjackman/gcc-eN9389/gcc-4.9.1/build/x86_64-unknown-linux-gnu/libgfortran/../../../libgfortran/io/unix.c:1208: undefined reference to `__secure_getenv'\ncollect2: error: ld returned 1 exit status\n. It should be using the Homebrew gcc-4.9 copies of crt1.o, crti.o and crtn.o. It seems to work okay for C and C++ programs, but this should be fixed. I manually hacked around this, but it doesn't seem to fix the Fortran issue. It could be fixed by hacking up the specs file. I'm not sure if there's a more elegant way, perhaps using --sysroot.\n. -static-libgfortran is broken too.\n\u276f\u276f\u276f gfortran -g hello-f.f -o hello-f -static-libgfortran\n/home/sjackman/.linuxbrew/lib/libgfortran.a(main.o): In function `_gfortrani_find_addr2line':\n/var/tmp/sjackman/gcc-eN9389/gcc-4.9.1/build/x86_64-unknown-linux-gnu/libgfortran/../../../libgfortran/runtime/main.c:165: undefined reference to `__secure_getenv'\n/home/sjackman/.linuxbrew/lib/libgfortran.a(unix.o): In function `tempfile':\n/var/tmp/sjackman/gcc-eN9389/gcc-4.9.1/build/x86_64-unknown-linux-gnu/libgfortran/../../../libgfortran/io/unix.c:1208: undefined reference to `__secure_getenv'\ncollect2: error: ld returned 1 exit status\n. I was too quick to dismiss --sysroot as a solution. Its gfortran does work.\n\u276f\u276f\u276f LD_LIBRARY_PATH=$HOME/.linuxbrew-sysroot/lib:$HOME/.linuxbrew-sysroot/opt/gcc/lib64 ~/.linuxbrew-sysroot/lib/ld-linux-x86-64.so.2 ./hello-f\n Hello World!\n\u276f\u276f\u276f LD_LIBRARY_PATH=$HOME/.linuxbrew/lib:$HOME/.linuxbrew/opt/gcc/lib64 ~/.linuxbrew/lib/ld-linux-x86-64.so.2 --list ./hello-f\n    linux-vdso.so.1 (0x00007fff8c1fd000)\n    libgfortran.so.3 => /home/sjackman/.linuxbrew/opt/gcc/lib64/libgfortran.so.3 (0x00002b21cd573000)\n    libm.so.6 => /home/sjackman/.linuxbrew/lib/libm.so.6 (0x00002b21cd840000)\n    libgcc_s.so.1 => /home/sjackman/.linuxbrew/lib/libgcc_s.so.1 (0x00002b21cdb32000)\n    libquadmath.so.0 => /home/sjackman/.linuxbrew/opt/gcc/lib64/libquadmath.so.0 (0x00002b21cdd43000)\n    libc.so.6 => /home/sjackman/.linuxbrew/lib/libc.so.6 (0x00002b21cdf76000)\n    /home/sjackman/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 => /home/sjackman/.linuxbrew/lib/ld-linux-x86-64.so.2 (0x00002b21cd354000)\n. Yes! Progress. Thanks for the lead, J\u00e9r\u00f4me. libgfortran.so.3 is definitely compiled against the system's libc.so.6, which is why it doesn't work.\n\u276f\u276f\u276f nm -A hello-c hello-f /home/sjackman/.linuxbrew/lib/libgfortran.so.3 /home/sjackman/.linuxbrew/lib/libc.so.6 /lib64/libc.so.6 |grep secure_getenv\nhello-c:                 U secure_getenv@@GLIBC_2.17\n/home/sjackman/.linuxbrew/lib/libgfortran.so.3:                 U __secure_getenv@@GLIBC_2.2.5\n/home/sjackman/.linuxbrew/lib/libc.so.6:00000000000325c8 t __GI___libc_secure_getenv\n/home/sjackman/.linuxbrew/lib/libc.so.6:00000000000325c8 W __libc_secure_getenv\n/home/sjackman/.linuxbrew/lib/libc.so.6:00000000000325c8 W secure_getenv\n/home/sjackman/.linuxbrew/lib/libc.so.6:00000000000325c8 W __secure_getenv@GLIBC_2.2.5\n/lib64/libc.so.6:0000003409a333f0 t __GI___secure_getenv\n/lib64/libc.so.6:0000003409a333f0 T __secure_getenv\n. I've added a --with-sysroot option to binutils in 894cc53df16584cd878e1ea5d5a07800ac211be4. It simply does ./configure --sysroot=/, so doesn't actually do much, but at least it allows experimenting with gcc --sysroot, which otherwise gives the error ld: this linker was not configured to use sysroots.\n. @jrevillard I'll need a full free day to trouble shoot this gfortran issue, and I don't have that time right now. If you know someone with the technical ability, feel free to recruit him or her. This is definitely still on my radar.\nI'm still experimenting with sysroot. The current binutils is by default enabled for --with-sysroot=/.\n. I installed gcc48 4.8.3 using brew install gcc48 --with-glibc and then used it to build gcc 4.9.2 brew install gcc --with-glibc --cc=gcc-4.8. I fully expected this bootstrapping to produce a working Fortran compiler, but no such luck.\n. This issue is resolved by 9318c13512d592db39e9bc29532bc4317ec8733c.\n. Thanks for the patch, Brad.\n. > Happy to explore the gcc bottle idea in the future.\nI'm very interested in bottling GCC. To bottle GCC, it has to be built with glibc installed by Linuxbrew, rather than the system glibc. I call this a standalone installation of Linuxbrew. Here's an issue for comments. It's a work in progress, but is generally looking promising. Currently, gfortran is broken.\n. Cool. I didn't know that anyone was using bottles on Linux. Are you building bottles on one machine, and installing on another, and do those machines run the same operating system?\nWe can host the bottles on Sourceforge. I've created a project. Homebrew hosts its bottles on SF as well.\n. The first bottle is uploaded! linux-headers\n. This might be resolved by 3353c346f08738b1891730e7647b1aebd6e40c70. Can you run brew update and try again?\n. Are you using HOMEBREW_CC or --cc?\n. Try\nsh\nprefix=~/.linuxbrew\nln -s /usr/bin/gcc44 $prefix/bin/gcc-4.4\nln -s /usr/bin/g++44 $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran44 $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\nbrew install hello && brew test -v hello; brew remove hello\nSee here:\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#use-a-compiler-other-than-gcc\n. Can you report the output of the following?\nsh\nls -l /usr/bin/cc* /usr/bin/gcc*\ncc --version\ngcc --version\n. That's fine.\nsh\nprefix=~/.linuxbrew\nln -s /usr/bin/gcc $prefix/bin/gcc-4.4\nln -s /usr/bin/g++ $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\nbrew install hello && brew test -v hello; brew remove hello\n. brew cask install https://raw.githubusercontent.com/sjackman/homebrew-cask/mendeley/Casks/mendeley.rb\n. See caskroom/homebrew-cask#6349\n. Sorry, I misunderstood. brew cask is not available for Linuxbrew. Sorry to get your hopes up.\n. Try this instead:\nsh\nln -s `which gcc` ~/.linuxbrew/bin/gcc-`gcc -dumpversion |cut -d. -f1,2`\nln -s `which g++` ~/.linuxbrew/bin/g++-`g++ -dumpversion |cut -d. -f1,2`\nln -s `which gfortran` ~/.linuxbrew/bin/gfortran-`gfortran -dumpversion |cut -d. -f1,2`\n. Yes, that's a good idea, but I think I'll instead put it somewhere in the Ruby code, probably where it looks for the default compiler, so as to support installs via a simple git clone.\nThe code for install is in the branch go.\n. It changed at some point, but I'm not sure when. Sorry I couldn't be more helpful.\n. Please report ruby --version. This minitest issue has come up before. See #314 \n. Linuxbrew does not use ld.so.conf. It uses rpath instead. Using ld.so.conf makes a lot of sense though, I think. In any case, it's not necessary, and you can ignore the ldconfig warning.\n. https://gist.githubusercontent.com/anonymous/c7ac66274508a6525b8d/raw/02.make\nmake[3]: Leaving directory `/tmp/gcc20150622-5108-1qwsx8g/gcc-5.1.0/build/gcc'\nmkdir -p -- x86_64-unknown-linux-gnu/libgcc\nChecking multilib configuration for libgcc...\nConfiguring stage 2 in x86_64-unknown-linux-gnu/libgcc\n\u2026\nchecking for suffix of object files... configure: error: in `/tmp/gcc20150622-5108-1qwsx8g/gcc-5.1.0/build/x86_64-unknown-linux-gnu/libgcc':\nconfigure: error: cannot compute suffix of object files: cannot compile\nSee `config.log' for more details.\nmake[2]: *** [configure-stage2-target-libgcc] Error 1\nCan you gist the appropriate config.log? There's more than one. The one with the most recent time stamp.\n. @diegocaro Try brew install homebrew/dupes/zlib gcc\n. Can you try\nbrew install hello --cc=gcc-4.4\nand also\nbrew tap homebrew/versions\nHOMEBREW_CC=gcc-4.4 brew install hello\n. @jorgebg wrote\u2026\n\nbrew install gcc --cc=gcc\n\nAnd it doesn't work without --cc=gcc? That's odd. Thanks for the feedback.\n. That's a strange error message Error: No such file or directory - (unreachable)/. I've not seen that before. Does brew install hello work?\n. Moved this discussion to #608.\n. I'm generally not merging patches that only fix aesthetic annoyances, because it increases the burden of merging Homebrew into Linuxbrew each week. Thanks for your contribution though.\n. git-flow-avh appears to work fine on my system. What's the purpose of this patch?\n\u276f\u276f\u276f brew test git-flow-avh -v\nTesting git-flow-avh\n==> /projects/btl/linuxbrew/Cellar/git-flow-avh/1.7.0/bin/git-flow version\n1.7.0 (AVH Edition)\n. Please report the output of brew install -v bamtools.\n. You shouldn't need to set LD_LIBRARY_PATH.\nsh\nunset LD_LIBRARY_PATH\nPATH=\"$HOME/.linuxbrew/bin:$PATH\"\nbrew install glibc\nIf that fails, post the output of brew install -v glibc.\n. Sure thing, but you can always retitle an issue. I think this particular error was due to\nexport LD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH\"\nexpanding to\nexport LD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:\nand the empty string after the colon : being interpreted the same as\nexport LD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:.\nwhich glibc is complaining about (untested).\n. The easiest way is to use brew sh to get a shell with the appropriate environment variables set, and build within there. Does brew install llvm --with-clang install libclang for you?\n. Ah, that's definitely a bug. Can you submit an issue? The workaround is\nsh\nbrew sh --cc=gcc-5\n. Can you gist /home/koneill/Library/Logs/Homebrew/glibc/01.configure?\n. Yes. brew install -dv glibc\n. Weird. Ruby should come with irb. Try gem install irb or brew install ruby\n. @oneillkza Yes, see https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#use-a-compiler-other-than-gcc\nsh\nprefix=~/.linuxbrew\nln -s /usr/bin/gcc44 $prefix/bin/gcc-4.4\nln -s /usr/bin/g++44 $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran44 $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\n. Be sure to brew update as well. brew install hello && brew test -v hello is a good test of GCC.\n. Yes, I've noticed that as well. It would be awesome if you wanted to take a stab at fixing it.\n. For libxslt, adding --without-crypto to configure might work.\nFor ncurses,\nsh\nln -s ncursesw/curses.h ~/.linuxbrew/include/\nln -s libncursesw.so ~/.linuxbrew/lib/libncurses.so\nln -s libncursesw.so ~/.linuxbrew/lib/libcurses.so\nI want to fix ncurses, but it's in the Homebrew/dupes tap, and I haven't yet figure out how I want to deal with patching formulas in other taps. I think I'll just copy it to Linuxbrew. \n. https://github.com/Homebrew/homebrew-dupes/pull/345 links in the libraries, but the headers haven't been fixed yet.\n. > checking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nIt looks as though gmp is not installed. Please report the output of brew install gmp.\n. Try ln -s libgmp.so.10 ~/.linuxbrew/lib/libgmp.so.3\n. Which host package provides dblatex? Please report dblatex --version. You might try brew install texlive.\n. Great! Glad to hear it. Please disregard my previous comment.\n. You can use the Standalone Installation instructions to install recent version of glibc.\n. The standalone installation is now much simpler and totally automatic!\n. Hi, Kieran. Thanks for your patch. I've made a few modifications to simplify it. Can you test out this formula for me?\nbrew install https://raw.githubusercontent.com/Homebrew/linuxbrew/ghc/Library/Formula/ghc.rb\n. Fixed by eb13c954f35c992049eeb53261a38d6f818176b3\n. methpipe fails to install when HOMEBREW_PREFIX \u2260 /usr/local. Please open an issue on Homebrew-science.\n. I just looked at your error message, which is different than mine. My error message is\ng++ -Wall -fmessage-length=50 -O2 -o mlml mlml.cpp /tmp/methpipe-wm5001/methpipe/src/smithlab_cpp/smithlab_os.o /tmp/methpipe-wm5001/methpipe/src/smithlab_cpp/smithlab_utils.o /tmp/methpipe-wm5001/methpipe/src/smithlab_cpp/GenomicRegion.o /tmp/methpipe-wm5001/methpipe/src/smithlab_cpp/OptionParser.o ../common/MethpipeFiles.o -I/tmp/methpipe-wm5001/methpipe/src/smithlab_cpp -I../common -lgsl -lgslcblas \nmlml.cpp:9:30: fatal error: gsl/gsl_sf_gamma.h: \n   No such file or directory\n #include <gsl/gsl_sf_gamma.h>\n                              ^\ncompilation terminated.\n. Your error is\ngit submodule --quiet foreach --recursive git checkout-index -a -f --prefix=/tmp/methpipe-paRZqO/${toplevel/\\/home\\/saket\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\n/usr/lib/git-core/git-submodule: 1: eval: Bad substitution\nStopping at 'src/smithlab_cpp'; script returned non-zero status.\n. No, gsl built and is installed, but methpipe is not looking for it in the right directory. It's looking in /usr/local rather than HOMEBREW_PREFIX.\n. git-submodule works for me. I'm unable to reproduce your error.\nSubmodule path 'src/smithlab_cpp': checked out '6fc0367da0fab5b9d34a04c22a6e7cc0675e1588'\ngit reset --hard origin/HEAD\nHEAD is now at b9854a6 updated usage message to more accurately describe program\ngit checkout-index -a -f --prefix=/tmp/methpipe-d20991/\ngit submodule --quiet foreach --recursive git checkout-index -a -f --prefix=/tmp/methpipe-d20991/${toplevel/\\/home\\/sjackman\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\n==> make all\n. For my curiosity, can you report head /usr/lib/git-core/git-submodule\n. Looks the same as mine.\n. Thanks for the patch, Michael. Use if OS.linux? and if OS.mac? as necessary so that Linuxbrew patches have no effect on Mac. See a6a371788862186aff98ef0c17b652e35e219788\n. Yes, this is an OS-X specific error message. We should also update the SSL certificates for Linuxbrew.\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/openssl.rb#L111\n. Curl and other apps that use openssl will complain of being unable to verify certificates.\n. brew install openssl used to return with an exit status of 0, even though postinstall failed, but that seems to have changed and broke my Docker build of Linuxbrew.\n. Great. Can you wrap this patch in if OS.mac? \u2026 elsif OS.linux? \u2026 end like here. Thanks for the patch\n. No, it should not be necessary to set LD_LIBRARY_PATH. Particularly if you install gcc and use that to compile your formula, most everything should work. Using your system's gcc, formula that respect the LDFLAGS environment variable will work. You can install patchelf, and that may help other formula that do not respect LDFLAGS.\n. The best solution is to brew install gcc and use it to compile your Linuxbrew formula.\n. I'm concerned that there's still a lot of formula (particularly in Homebrew-science) that don't respect LDFLAGS, and I would like Linuxbrew to work with neither gcc nor patchelf installed. I have an idea to use LD_RUN_PATH when compiling software if glibc is not installed, which should work. Then we can remove LD_LIBRARY_PATH from the README.md.\n. Thanks, Sean.\n. Thanks for the kind words, Sean. Patches and pull requests are welcome!\n. I merge Homebrew into Linuxbrew once a week, usually on Monday or Tuesday. I'm busy at work this week, so it hadn't happened yet. It's merged now.\n. No worries. I don't mind the reminder.\n. A standard installation of Linuxbrew requires that all the standard libraries of Mac OS be installed. See Dependencies.\nIf you'd rather not use your system's package manager, see these instructions.\nEventually I'd like to add these dependencies to the formulas.\n. How Homebrew detects installed compilers changed, and I'm still sorting it out. Does running the following shell snippet fix this issue?\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#to-use-gcc-44-on-centos-5\nsh\nln -s /usr/bin/gcc44 $prefix/bin/gcc-4.4\nln -s /usr/bin/g++44 $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran44 $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\n. Believe it or not, the issue is that it looks for compilers named gcc-4.x, not gcc. It assumes a compiler named gcc is gcc-4.2, because that's what it is on Mac OS. I'm figuring out what to do about this.\n. > Failed to execute: ./configure\nThe issue may be a non-executable /tmp. See #128. Try setting HOMEBREW_TEMP to a different directory. Perhaps /var/tmp or $HOME/tmp.\n. Can you execute /tmp/text.sh?\n. Would you like to add a brew doctor test to check that HOMEBREW_TEMP is executable?\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/cmd/doctor.rb\n. Duplicate of #128.\n. @mbsullivan This bug should be fixed. Would you like to give compiling GCC 4.9.1 another shot? I am seeing a different error now, but haven't yet looked into it.\n/tmp/gcc-monJ27/gcc-4.9.1/build/./gcc/xgcc -B/tmp/gcc-monJ27/gcc-4.9.1/build/./gcc/ -B/home/linuxbrew/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/bin/ -B/home/linuxbrew/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/lib/ -isystem /home/linuxbrew/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/include -isystem /home/linuxbrew/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/sys-include    -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector  -shared -nodefaultlibs -Wl,--soname=libgcc_s.so.1 -Wl,--version-script=libgcc.map -o ./libgcc_s.so.1.tmp -g -O2 -Os -w -pipe -march=core2 -B./ _muldi3_s.o _negdi2_s.o _lshrdi3_s.o _ashldi3_s.o _ashrdi3_s.o _cmpdi2_s.o _ucmpdi2_s.o _clear_cache_s.o _trampoline_s.o __main_s.o _absvsi2_s.o _absvdi2_s.o _addvsi3_s.o _addvdi3_s.o _subvsi3_s.o _subvdi3_s.o _mulvsi3_s.o _mulvdi3_s.o _negvsi2_s.o _negvdi2_s.o _ctors_s.o _ffssi2_s.o _ffsdi2_s.o _clz_s.o _clzsi2_s.o _clzdi2_s.o _ctzsi2_s.o _ctzdi2_s.o _popcount_tab_s.o _popcountsi2_s.o _popcountdi2_s.o _paritysi2_s.o _paritydi2_s.o _powisf2_s.o _powidf2_s.o _powixf2_s.o _mulsc3_s.o _muldc3_s.o _mulxc3_s.o _divsc3_s.o _divdc3_s.o _divxc3_s.o _bswapsi2_s.o _bswapdi2_s.o _clrsbsi2_s.o _clrsbdi2_s.o _fixunssfsi_s.o _fixunsdfsi_s.o _fixunsxfsi_s.o _fixsfdi_s.o _fixdfdi_s.o _fixxfdi_s.o _fixunssfdi_s.o _fixunsdfdi_s.o _fixunsxfdi_s.o _floatdisf_s.o _floatdidf_s.o _floatdixf_s.o _floatundisf_s.o _floatundidf_s.o _floatundixf_s.o _divdi3_s.o _moddi3_s.o _udivdi3_s.o _umoddi3_s.o _udiv_w_sdiv_s.o _udivmoddi4_s.o cpuinfo_s.o sfp-exceptions_s.o addtf3_s.o divtf3_s.o multf3_s.o negtf2_s.o subtf3_s.o unordtf2_s.o fixtfsi_s.o fixunstfsi_s.o floatsitf_s.o floatunsitf_s.o fixtfdi_s.o fixunstfdi_s.o floatditf_s.o floatunditf_s.o fixtfti_s.o fixunstfti_s.o floattitf_s.o floatuntitf_s.o extendsftf2_s.o extenddftf2_s.o extendxftf2_s.o trunctfsf2_s.o trunctfdf2_s.o trunctfxf2_s.o getf2_s.o letf2_s.o eqtf2_s.o _divtc3_s.o _multc3_s.o _powitf2_s.o enable-execute-stack_s.o unwind-dw2_s.o unwind-dw2-fde-dip_s.o unwind-sjlj_s.o unwind-c_s.o emutls_s.o libgcc.a -lc && rm -f ./libgcc_s.so && if [ -f ./libgcc_s.so.1 ]; then mv -f ./libgcc_s.so.1 ./libgcc_s.so.1.backup; else true; fi && mv ./libgcc_s.so.1.tmp ./libgcc_s.so.1 && ln -s libgcc_s.so.1 ./libgcc_s.so\n/home/linuxbrew/.linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin/ld: cannot find crti.o: No such file or directory\n/home/linuxbrew/.linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin/ld: cannot find -lc \n/home/linuxbrew/.linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin/ld: cannot find crtn.o: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake[3]: *** [libgcc_s.so] Error 1\nmake[3]: Leaving directory `/tmp/gcc-monJ27/gcc-4.9.1/build/x86_64-unknown-linux-gnu/libgcc'\nmake[2]: *** [all-stage1-target-libgcc] Error 2\nmake[2]: Leaving directory `/tmp/gcc-monJ27/gcc-4.9.1/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory `/tmp/gcc-monJ27/gcc-4.9.1/build'\nmake: *** [bootstrap] Error 2\n. This second error was fixed by symlinking /usr/lib/x86_64-linux-gnu to /usr/lib64. See\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-standalone/Dockerfile#L6\n. Merged. Thanks, Sean.\n. How annoying. Thanks for the bug report.\n. In scientific computing we're often stuck with woefully out of date operating systems on our clusters, that admins refuse to upgrade. I'm on CentOS 5.10, for example, with GCC 4.4. That's the whole reason of being for Linuxbrew, to be able to install a modern toolchain and software on an old operating system.\n. Follow these instructions:\nTo use GCC 4.4 on CentOS 5\n. Can you execute /tmp/text.sh?\n. > certificate verify failed\nI'm guessing that you need to update your SSL certificates.\n. I think that's what the post_install of openssl does, but it doesn't work yet on Linuxbrew.\n. I recommend not setting LD_LIBRARY_PATH. Linuxbrew sets the RPATH of each executable so that LD_LIBRARY_PATH is not necessary.\n. I'm not able to reproduce this error on CentOS 5.10 with GCC 4.9.1 (Homebrew). Which OS and compiler are you using?\n. I can reproduce this bug with Ubuntu 14.04.1 Trusty Tahr, gcc 4.8.2, Linux 3.16.2.\n/usr/bin/gcc-4.8  -I. -I. -Os -w -pipe -march=core2 -I./libwc  -I/usr/include/openssl -isystem/home/linuxbrew/.linuxbrew/include -DHAVE_CONFIG_H -DAUXBIN_DIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/libexec/w3m\\\" -DCGIBIN_DIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/libexec/w3m/cgi-bin\\\" -DHELP_DIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/share/w3m\\\" -DETC_DIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/etc\\\" -DCONF_DIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/etc/w3m\\\" -DRC_DIR=\\\"~/.w3m\\\" -DLOCALEDIR=\\\"/home/linuxbrew/.linuxbrew/Cellar/w3m/0.5.3/share/locale\\\" -isystem/home/linuxbrew/.linuxbrew/include  -c -o main.o main.c\nIn file included from html.h:10:0,\n                 from fm.h:39,\n                 from main.c:3:\nistream.h:23:8: error: redefinition of 'struct file_handle'\n struct file_handle {\n        ^\nIn file included from /usr/include/x86_64-linux-gnu/bits/fcntl.h:61:0,\n                 from /usr/include/fcntl.h:35,\n                 from istream.h:14,\n                 from html.h:10,\n                 from fm.h:39,\n                 from main.c:3:\n/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h:311:8: note: originally defined here\n struct file_handle\n        ^\nmake: *** [main.o] Error 1\n. It's a known upstream bug. Patch\n. See https://sourceforge.net/p/w3m/patches/62/\n. Glad to hear it, and happy to help.\n. Yes, I can reproduce your issue. I'm afraid that I don't have the time to troubleshoot and fix individual formula. If you're able to fix this issue, I'd be happy to merge a pull request.\n. Thanks for the bug report, Regis.\n. @harper357 Those undefined symbols are from ncurses. Do you have sudo access on your machine? If so, it'll be easier to install ncurses and readline using yum or apt-get.\n. @saketkc Hopefully, yes. @harper357 You may have to also reinstall readline.\n. Here's the root issue: https://bugzilla.redhat.com/show_bug.cgi?id=499837\n. One fix is to compile readline with make SHLIB_LIBS=-lncurses. See https://github.com/Homebrew/linuxbrew/tree/readline-ncurses\n. The other fix is to compile lua with make MYLIBS=-lncurses.\nSee http://lua-users.org/lists/lua-l/2013-02/msg00488.html\n. Glad to hear it, but the LUA build issue should have been fixed already by 8324fc6b477cee32f592bf12d82b849448811c3c.\n. Hmm. Okay. Thanks for the feedback.\n. Thanks for the patch, @ntkme.\n.  Thanks for the detailed report, Chris. Would you like to submit your simplified patch as a pull request? I have a busy week, but I'll look into the rest after Nov 5.\n. I made a recent change, so brew update may get you a little further. Run brew doctor and fix the warnings about unlinked kegs. gobject-introspection fails to build for me now.\n. Sure, for the record. It's likely the same error that I'm seeing.\n. gobject-introspection builds fine for me now. There was probably a missing dependency that I now have installed. \n. I'm not able to reproduce this error, Chris. Is it still an issue for you?\n/bin/bash ../libtool  --tag=CC   --mode=link /usr/bin/gcc-4.9  -Os -w -pipe -march=core2 -pthread  -L/home/chris/.linuxbrew/opt/freetype/lib -L/home/chris/.linuxbrew/opt/libpng/lib -L/home/chris/.linuxbrew/lib -Wl,-rpath,/home/chris/.linuxbrew/lib -o fc-cache fc-cache.o ../src/libfontconfig.la \nlibtool: link: /usr/bin/gcc-4.9 -Os -w -pipe -march=core2 -pthread -Wl,-rpath -Wl,/home/chris/.linuxbrew/lib -o .libs/fc-cache fc-cache.o  -L/home/chris/.linuxbrew/opt/freetype/lib -L/home/chris/.linuxbrew/opt/libpng/lib -L/home/chris/.linuxbrew/lib ../src/.libs/libfontconfig.so -L/home/chris/.linuxbrew/Cellar/freetype/2.5.3_1/lib -L/usr/lib/x86_64-linux-gnu -lfreetype /usr/lib/x86_64-linux-gnu/libexpat.so -pthread -Wl,-rpath -Wl,/home/chris/.linuxbrew/Cellar/fontconfig/2.11.1/lib\n/usr/bin/ld: warning: libpng16.so.16, needed by /home/chris/.linuxbrew/opt/freetype/lib/libfreetype.so, not found (try using -rpath or -rpath-link)\n/home/chris/.linuxbrew/opt/freetype/lib/libfreetype.so: undefined reference to `png_read_update_info@PNG16_0'\n. I'm going to close this issue, as I'm not able to reproduce it. I've packaged texlive for Linuxbrew, so if that was in fact the issue, you should be able to fix it with a brew install texlive. I'd like to hear back from you if that works.\n. This looks like perhaps a docbook error? I'm out of ideas here. Have you tried opening an issue upstream with fontconfig? Alternatively, you could submit a pull request to add a --without-docs option to the Homebrew formula. Homebrew would likely accept this PR, and if not there, then Linuxbrew will accept it.\n. Thanks for the info, David. That's helpful.\n. Thanks for the patch, Chris. I've merged it.\n. Do we need to set JAVA_HOME at all on Linux? Can we get away with simply using the java and javac in the PATH? If multiple JDK are installed, selecting an arbitrary one makes me nervous Dir[\"/usr/lib/jvm/java-*\"].first.\n. Installing autotools appears to be the intended behaviour of the sdl formula when installed with --with-x11-driver. I'll leave it as is, so long as it installs successfully.\n. libintl.h should be provided by glibc on Linux systems and not by gettext. You can either use your system's glibc or install Linuxbrew's glibc with the Standalone Installation instructions. See https://gcc.gnu.org/ml/gcc-help/2014-09/msg00029.html\nCheers,\nShaun\nJonathan Wakely 3 Sep to me, gcc-help \n\nOn 3 September 2014 00:25, Shaun Jackman wrote:\n\nI had a conflict between glibc's libintl.h and gettext's libintl.h and\nended up with neither. GCC expects glibc's libintl.h.\n\ngettext is not even supposed to install libintl.h on GNU/Linux,\nbecause it would conflict with t he glibc one, so if you've persuaded\nit to install that header then you have to deal with the fallout\nyourself. You shouldn't be configuring gettext with\n--with-included-gettext on glibc-based systems.\n. I'm not super familiar with gettext. I get the impression that it should not be needed if the software only uses libintl.h, which is provided by glibc. gettext seems to be a replacement intended for non-Linux systems that do not provide libintl.h.\n. On a Standalone Linuxbrew installation, libintl.h is provided by glibc.\n. On Mac OS it does get libintl.h from gettext. On Linux it gets it from glibc, either the system's copy or the Linuxbrew-installed copy.\n. > Failed to execute: ./configure\n\nSee #153 HOMEBREW_TEMP not executable\n. > Error: The Homebrew GCC was not installed.\nI'm still sorting out how best to solve this issue. See Create symlinks for gcc\nWhich distribution of Linux are you running? Please also report the output of the following commands:\nbash\ngcc -dumpversion\ng++ -dumpversion\ngfortran -dumpversion\n. Try\nsh\nexport HOMEBREW_TEMP=\"$HOME/tmp\"\nbrew install hello\n. I'm running out of ideas, but here's one more. Please copy and paste into a comment the command and all of its output verbatim.\nsh\nHOMEBREW_TEMP=\"$HOME/tmp\" brew install hello -v\n. Also which gcc-4.4 gcc-4.5 gcc-4.6 gcc-4.7 gcc-4.8 gcc-4.9\n. Excellent! Thanks for the report back. I'd like to revise the instructions so that they don't depend on $prefix being defined.\n. Thanks for the heads up.\n. Hi, Chris. Yes, this does look like a bug in sdl_image, but I'm afraid that I won't have the time to troubleshoot it. If you find a solution, I'll happily accept a pull request. Cheers, Shaun\n. One concern with static linking is that it can result in the same issue of multiple versions of libpng being linked into the same executable, and can make it more difficult to diagnose because you can't interrogate the dependencies of the executable. More precise upstream configure flags would help.\n. It does also search the directories specified in the environment variables LIBS and LDFLAGS, but it searches the system directories first, which is broken. It should be the other way around. Please open a bug upstream. The fix is to change\nfor path in $gcc_bin_path $gcc_lib_path $env_lib_path /usr/lib /usr/local/lib; do\nto\nfor path in $env_lib_path $gcc_bin_path $gcc_lib_path /usr/lib /usr/local/lib; do\n. Great. I'm going to close this issue as upstream. I hope that you find a resolution there. If not, we can revisit it here.\n. /auto/cmb-06/as/skchoudh/linuxbrew/opt/patchelf/bin/patchelf --set-rpath /auto/cmb-06/as/skchoudh/linuxbrew/lib /auto/cmb-06/as/skchoudh/linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so.10.2.0 \nError: Failed to fix install names\nThat's definitely a problem. Can you rerun this command from the command line outside of Homebrew and report the exact error message?\n. > I commented bottle specific lines with brew edit patchelf\nYou can also use either of\nsh\nbrew install patchelf --build-from-source\nHOMEBREW_BUILD_FROM_SOURCE=1 brew install patchelf\n. make[1]: *** [stage1-bubble] Error 2\nThe failure is in stage1, so the compiler that you're using to build GCC is failing. Which compiler are you using to build GCC?\n. Which distribution of Linux?\n. Are you able to determine which bottle is the cause of the trouble?\n. I have an idea. I wonder whether GMP is being compiled using an instruction that is not supported by your CPU. The bottles are being compiled for Intel Core 2.\n. Thanks for this, @houqp! Instead of copying ls, can you create a shell script that contains only #!/bin/sh and execute it?\n. Bump. No rush.\n. Thanks!\n. See #186 \n. @sjackman closed this in 480637a\n. Due to time constraints I'm not able to troubleshoot individual formula. Sorry. If you're able to find a fix, please open a pull request.\n. Thanks for the patch. Please wrap this in if OS.linux?.\n. The default target should be Linux if OS.linux? and Darwin if OS.mac?.\n. It's a design goal of Linuxbrew that it should be possible for every patch to be merged back into the Homebrew trunk, which means it must work on both Mac and Linux.\n. Is this because your version of git is older than 1.9.0? From https://github.com/git/git/commit/1c4fb136dbad762c9c4350ee79c3474ae8037587 it looks as though this git bug was fixed in 1.9.0. Methpipe installs fine for me on Linuxbrew.\n$ git --version\ngit version 2.1.3\n$ brew install methpipe --HEAD\n==> Installing methpipe from homebrew/homebrew-science\n==> Cloning https://github.com/smithlabcode/methpipe.git\nUpdating /home/sjackman/.cache/Homebrew/methpipe--git\n==> make all\n==> make install\n/gsc/btl/linuxbrew/Cellar/methpipe/HEAD: 25 files, 6.8M, built in 77 seconds\n. Does this issue still affect you, Saket?\n. Thanks for the patch, Saket. I'm going to go with\nruby\ntargets = [[`uname`.strip.downcase, ['']]]\n. > I'm having an issue installing svn on my Laravel Homestead VM running on osx 10.10.\nThis is a Mac OS issue, no? Please open this issue at https://github.com/Homebrew/homebrew/issues\n. Okay, so just to confirm this is a Linux virtual machine running inside Mac OS 10.10?\n. I get this odd error message when compiling serf inside subversion:\n/gsc/btl/linuxbrew/bin/gcc-4.9 -o outgoing.o -c -Os -w -pipe -march=core2 -std=c89 -Wdeclaration-after-statement -Wmissing-prototypes -O2 -g -Wall -pthread -DNDEBUG -DLINUX -D_REENTRANT -D_GNU_SOURCE -I. -I/gsc/btl/linuxbrew/Cellar/apr/1.5.1/include/apr-1 -I/gsc/btl/linuxbrew/Cellar/apr-util/1.5.4/include/apr-1 -I/gsc/btl/linuxbrew/opt/openssl/include outgoing.c\n{standard input}: Assembler messages:\n{standard input}:422: Error: unknown .loc sub-directive `discriminator'\n{standard input}:422: Error: junk at end of line, first unrecognized character is `1'\n. Here's another fix for apr-1-config and apu-1-config:\nruby\n      args += %W[APR=#{which(\"apr-1-config\")} APU=#{which(\"apu-1-config\")}]\nRequires brew install homebrew/apache/apr homebrew/apache/apr-util.\n. I cannot get serf to compile (see above). I can compile subversion if I remove resource('serf') and \"--with-serf=#{serf_prefix}\".\n. Does brew install homebrew/dupes/krb5 before brew install subversion help subversion to install correctly?\nShould --without-serf be the default for subversion in Linuxbrew?\nWhat functionality does this disable if we do disable serf by default?\n. Installing homebrew/dupes/krb5 does not seem to be enough to get subversion's serf to compile correctly. I'm going to disable serf by default.\nscons: Reading SConscript files ...\n/bin/sh: 1: /usr: Permission denied\nOSError: '/usr --cflags gssapi' exited 126:\n  File \"/tmp/subversion--serf20160224-17504-1skjz6v/serf-1.3.8/SConstruct\", line 360:\n    env.ParseConfig('$GSSAPI --cflags gssapi')\n  File \"/home/linuxbrew/.linuxbrew/Cellar/scons/2.4.1/libexec/scons-local/SCons/Environment.py\", line 1576:\n    return function(self, self.backtick(command))\n  File \"/home/linuxbrew/.linuxbrew/Cellar/scons/2.4.1/libexec/scons-local/SCons/Environment.py\", line 594:\n    raise OSError(\"'%s' exited %d\" % (command, status))\n. Please submit a pull request with a fix. I cannot support individual formula due to time constraints.\n. This issue will be fixed by the next merge of Homebrew into Linuxbrew.\n. pidof is specific to Mac, so\ndepends_on 'pidof' unless MacOS.version >= :mountain_lion || !OS.mac?\nis preferred over\ndepends_on 'pidof' unless MacOS.version >= :mountain_lion || OS.linux?\nNo need to submit an updated patch, as I'll make the small fix.\n. db is an alias for berkeley-db. The latter should be used rather than the alias.\nI didn't need berkeley-db installed to install Perl. Do you have a gist of the error message?\n. > Do you have a gist of the error message?\nMy mistake. See #175 \n. berkeley-db is provided by Mac OS. My current instructions for non-standalone Linuxbrew include installing the packages provided by Mac OS using the native package manager, apt-get or yum. I haven't yet figured out how to handle these dependencies for standalone installations of Linuxbrew.\n. @Mkaysi It's a design goal of Linuxbrew that patches can can be merged back into Homebrew, and so should work for both Mac OS and Linux. You can accomplish this using if OS.mac? and if OS.linux? where appropriate. For example, see go-app-engine-64.rb.\n. Thanks, Mikaela!\n. I've had this error in the past as well, though not currently. I have had difficulty troubleshooting it. Can you report the output of\nsh\nls ~/.linuxbrew/Cellar/python/2.7.8_2/lib/python2.7/lib-dynload/*_failed.so\nMy only suggestion would be to remove python and all its dependencies, reinstall python, and cross your fingers.\nsh\nbrew remove --force gdbm makedepend openssl pkg-config readline sqlite python\nbrew install python\n. Glad to hear that you got it working! Python doesn't have a --with-brewed-openssl option though. I wonder if that option might have applied to one of its dependencies. It uses the brewed openssl by default.\n. @Homebrew/linux Anyone have a solution for the Python _ssl_failed.so issue?\n. Let's move this discussion to #420.\n. I'll look into cmake.\nCan you elaborate on the python weirdness?\nThere is unfortunately no automated test suite. Two good options are Brew Test Bot and Docker Automated Build. See https://registry.hub.docker.com/u/sjackman/linuxbrew/\n. Thanks for the follow up, Kashif.\n. Which version of Ruby are you using? ruby --version\n. Can you try replacing ->{\"small\"} with lambda{\"small\"} in Library/Formula/texlive.rb?\n. Thanks, Jack. I took your suggestion.\n. Thanks for your help troubleshooting, Saket. @saketkc\n. Glad to hear it!\n. Try these instructions to create a symlink for your compiler:\nhttps://github.com/Linuxbrew/brew/wiki/Standalone-Installation#create-symlinks-for-gcc. See the instructions at https://github.com/Linuxbrew/brew/wiki/Symlink-GCC. Yes. Would you like to submit a pull request?\n. I'm happy with simply replacing /usr/bin/patch with patch. That won't be accepted upstream into Homebrew, but it'll work just fine for Linuxbrew.\n. If you want to go the extra mile you can add patch to os.rb.\nruby\n  if OS.mac?\n    PATH_PATCH = \"/usr/bin/patch\"\n  elsif OS.linux?\n    PATH_PATCH = \"patch\"\n  else\n. Or better use with_system_path to wrap the calls to patch.\n. Fixed by #196.\n. @saketkc Removing patches required by Mac Homebrew is not an option. Formulae must still build on Mac. If these patches are not required on Mac, this PR should go to Homebrew/Homebrew. If these patches are required on Mac, they should be armoured in if OS.mac in this PR.\n. I'm getting the following error. I take it that you're not seeing this?\nmake[1]: Entering directory '/tmp/libmagic-Q10426/file-5.20/magic'\n../src/file -C -m magic\nlt-file: compiled magic version [520] does not match with shared library magic version [517]\nmagic/android, 92: Warning: string extension `l' invalid\nmagic/fortran, 5: Warning: string extension `l' invalid\nmagic/fortran, 6: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 15: Warning: string extension `l' invalid\nmagic/marc21, 16: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 17: Warning: string extension `l' invalid\nmagic/marc21, 18: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 19: Warning: string extension `l' invalid\nmagic/marc21, 20: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 21: Warning: string extension `l' invalid\nmagic/marc21, 22: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 23: Warning: string extension `l' invalid\nmagic/marc21, 24: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/marc21, 27: Warning: string extension `l' invalid\nmagic/marc21, 28: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/scientific, 94: Warning: string extension `l' invalid\nmagic/scientific, 95: Warning: string extension `l' invalid\nmagic/scientific, 96: Warning: string extension `l' invalid\nmagic/scientific, 97: Warning: string extension `l' invalid\nmagic/scientific, 98: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/scientific, 99: Warning: string extension `l' invalid\nmagic/troff, 19: Warning: string extension `l' invalid\nmagic/troff, 20: Warning: Current entry does not yet have a description for adding a MIME type\nmagic/troff, 21: Warning: string extension `l' invalid\nmagic/troff, 22: Warning: Current entry does not yet have a description for adding a MIME type\nlt-file: could not find any valid magic files!\nMakefile:758: recipe for target 'magic.mgc' failed\nmake[1]: *** [magic.mgc] Error 1\nmake[1]: Leaving directory '/tmp/libmagic-Q10426/file-5.20/magic'\nMakefile:390: recipe for target 'install-recursive' failed\nmake: *** [install-recursive] Error 1\n/gsc/btl/linuxbrew/Library/Homebrew/debrew.rb:10:in `raise'\n. I'm not able to reproduce this error using the Docker image sjackman/linuxbrew, which is based on Ubuntu. Any thoughts on why yours differs?\n\u276f\u276f\u276f docker run --rm sjackman/linuxbrew brew install autoconf automake libmagic\n==> Downloading http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz\n==> ./configure --prefix=/home/linuxbrew/.linuxbrew/Cellar/autoconf/2.69\n==> make install\n/home/linuxbrew/.linuxbrew/Cellar/autoconf/2.69: 66 files, 3.1M, built in 4 seconds\n==> Downloading http://ftpmirror.gnu.org/automake/automake-1.14.1.tar.gz\n==> ./configure --prefix=/home/linuxbrew/.linuxbrew/Cellar/automake/1.14.1\n==> make install\n/home/linuxbrew/.linuxbrew/Cellar/automake/1.14.1: 131 files, 3.2M, built in 3 seconds\n==> Downloading ftp://ftp.astron.com/pub/file/file-5.20.tar.gz\n==> Downloading https://gist.githubusercontent.com/kwilczynski/350e83c291b536ce9b5b/raw/1961a222d13cd3e010ecd7b0ebbc6909def27ad6/337-338.diff\n==> Patching\npatching file src/getline.c\nHunk #1 succeeded at 80 with fuzz 1 (offset 4 lines).\npatching file ChangeLog\npatching file Makefile.in\npatching file aclocal.m4\npatching file config.h.in\npatching file configure\npatching file configure.ac\npatching file doc/Makefile.in\npatching file magic/Makefile.in\npatching file python/Makefile.in\npatching file src/Makefile.in\npatching file src/file.c\npatching file src/file.h\npatching file src/fsmagic.c\npatching file tests/Makefile.in\n==> ./configure --prefix=/home/linuxbrew/.linuxbrew/Cellar/libmagic/5.20 --enable-fsect-man5\n==> make install\n==> python setup.py install --prefix=/home/linuxbrew/.linuxbrew/Cellar/libmagic/5.20\n==> Caveats\nPython modules have been installed and Homebrew's site-packages is not\nin your Python sys.path, so you will not be able to import the modules\nthis formula installed. If you plan to develop with these modules,\nplease run:\n  mkdir -p /home/linuxbrew/.local/lib/python2.7/site-packages\n  echo 'import site; site.addsitedir(\"/home/linuxbrew/.linuxbrew/lib/python2.7/site-packages\")' >> /home/linuxbrew/.local/lib/python2.7/site-packages/homebrew.pth\n==> Summary\n/home/linuxbrew/.linuxbrew/Cellar/libmagic/5.20: 15 files, 3.1M, built in 19 seconds\n. Here's the gist.\n. \u276f\u276f\u276f docker run --rm sjackman/linuxbrew gcc --version\ngcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n. Also no issue building with GCC 4.9.2 in linuxbrew-standalone.\n\u276f\u276f\u276f docker run --rm sjackman/linuxbrew-standalone gcc --version\ngcc (Homebrew gcc 4.9.2 --with-glibc) 4.9.2\nCopyright (C) 2014 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n. You can brew install libmagic -dv, then when it fails select shell and then run make V=1 from there to get more detailed information on the command line of CCLD file. Then perhaps you can troubleshoot why it's not picking up libmagic and why those symbols are not being resolved.\n. > There seems to be some hidden 'magic' going on;-)\nHahah. Just got this now. =)\n. Is this still an issue for you, Saket?\n. Submitted Homebrew/homebrew#35098\n. > Does not build without -v:\n\nBuilds with -v:\n\nHeisenbug! That is extra weird.\n\nAre package updates accepted for linuxbrew(only)?\n\nNot generally. In special circumstances (completely breaks all of Linuxbrew), then yes.\n. Fixed by https://github.com/Homebrew/homebrew/pull/35079\n. The underscore in the version number means that the Homebrew/Linuxbrew formula was updated, but the upstream source package did not change.\n. Thanks for the patch, @jbaum98.\n. Try adding --no-check-certificate to the wget command line.\nOn Mon, Dec 1, 2014 at 06:43, Ludek Vodicka notifications@github.com\nwrote:\n\nOS Ubuntu 10.04 32 and 64bit too.\n[image: invalid certificate]\nhttps://camo.githubusercontent.com/61834ad0aea50a07bcc9083f7e39787b75fa1e74/687474703a2f2f692e696d6775722e636f6d2f355538434a4d492e706e67\n(sorry for image, but it's from remote virtual machine and clipboard\ndoesn't work)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/197.\n. Glad to hear that you got it working.\n. > ImportError: No module named setuptools\n\nYour python installation appears to be broken. Are you using the brewed python? Report which -a python. You could try reinstalling python brew reinstall python.\n. You can try brew install cmake -dv, when it fails, select shell, and then run make V=1 to get some more verbose logs for troubleshooting.\nAs a workaround, brew install cmake --without-docs may work.\n. Try brew install curl?\n. Great. Glad that you found a solution, Cody.\n. Thanks for the patch, @brendanator.\n. Does this patch resolve your issue with GCC not finding crti.o? Can you report the output of gcc -v hello.c -o hello?\n. That's great! Can you report the result of brew test gcc?\nhello.c is any old source file. For example\nc\nint main() { return 0; }\n. @jrevillard Does this patch fix your gfortran issue in https://github.com/Homebrew/linuxbrew/issues/135?\n. In your gcc -v it finds the correct crti.o, which is good indeed. /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crti.o\n. Mine does not\n```\n$ gcc hello-c.c -o hello-c -v\nReading specs from /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/specs\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: ../configure --with-native-system-header-dir=/gsc/btl/linuxbrew/include --with-build-time-tools=/gsc/btl/linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin LDFLAGS='-L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib -Wl,-rpath,/usr/lib64 -Wl,-rpath,/lib64' --with-boot-ldflags='-static-libstdc++ -static-libgcc -L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib' --prefix=/gsc/btl/linuxbrew/Cellar/gcc/4.9.2 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-4.9 --with-gmp=/gsc/btl/linuxbrew/opt/gmp --with-mpfr=/gsc/btl/linuxbrew/opt/mpfr --with-mpc=/gsc/btl/linuxbrew/opt/libmpc --with-cloog=/gsc/btl/linuxbrew/opt/cloog --with-isl=/gsc/btl/linuxbrew/opt/isl --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc 4.9.2 --with-glibc' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 4.9.2 (Homebrew gcc 4.9.2 --with-glibc) \nCOLLECT_GCC_OPTIONS='-o' 'hello-c' '-v' '-mtune=generic' '-march=x86-64'\n /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/cc1 -quiet -v hello-c.c -quiet -dumpbase hello-c.c -mtune=generic -march=x86-64 -auxbase hello-c -version -o /tmp/ccwThmSj.s\nGNU C (Homebrew gcc 4.9.2 --with-glibc) version 4.9.2 (x86_64-unknown-linux-gnu)\n    compiled by GNU C version 4.9.2, GMP version 6.0.0, MPFR version 3.1.2-p10, MPC version 1.0.2\nGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072\nignoring nonexistent directory \"/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../x86_64-unknown-linux-gnu/include\"\ninclude \"...\" search starts here:\ninclude <...> search starts here:\n/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/include\n /usr/local/include\n /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/include\n /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/include-fixed\n /gsc/btl/linuxbrew/include\nEnd of search list.\nGNU C (Homebrew gcc 4.9.2 --with-glibc) version 4.9.2 (x86_64-unknown-linux-gnu)\n    compiled by GNU C version 4.9.2, GMP version 6.0.0, MPFR version 3.1.2-p10, MPC version 1.0.2\nGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072\nCompiler executable checksum: e604c918b089407dd95e2c8201583d61\nCOLLECT_GCC_OPTIONS='-o' 'hello-c' '-v' '-mtune=generic' '-march=x86-64'\n as -v --64 -o /tmp/ccT4bwE2.o /tmp/ccwThmSj.s\nGNU assembler version 2.24 (x86_64-unknown-linux-gnu) using BFD version (GNU Binutils) 2.24\nCOMPILER_PATH=/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/\nLIBRARY_PATH=/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-o' 'hello-c' '-v' '-mtune=generic' '-march=x86-64'\n /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/collect2 -plugin /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/liblto_plugin.so -plugin-opt=/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/lto-wrapper -plugin-opt=-fresolution=/tmp/ccyNG2rL.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -rpath /gsc/btl/linuxbrew/lib --dynamic-linker /gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -o hello-c /usr/lib/../lib64/crt1.o /usr/lib/../lib64/crti.o /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crtbegin.o -nostdlib -L/gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2 -L/gsc/btl/linuxbrew/lib /tmp/ccT4bwE2.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /gsc/btl/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crtend.o /usr/lib/../lib64/crtn.o\n``\n. I won't have time to look into this issue real soon. It would be great if you have time to test these ideas yourself, and if not, I'll get to it, but it may be a little while. This Christmas is busy busy.\n. Excellent news! Thanks for your solution @jbaum98 and for your help troubleshooting @jrevillard. I probably won't find time to merge this until the new year, but I look forward to getting this fixed once and for all. A working Fortran compiler will be a big improvement for scientific computing using a standalone installation of Linuxbrew.\n. This bug should be fixed upstream by Homebrew/homebrew@43c634f, which has been merged.\n. @jrevillard I believe that 9318c13512d592db39e9bc29532bc4317ec8733c should fix thegfortranissue.\n@jbaum98 Fixing the search path forcrti.oand friends when linking other programs should be possible by adding-B#{HOMEBREW_PREFIX}/libtoLDFLAGSinENV/std.rb`.\nI'm going to close this PR. Thanks for all your help in troubleshooting. If you still have current issues, please do comment or open a new issue to discuss them.\n. Because Linuxbrew is a fork that I have to merge periodically into Linuxbrew, I'm disinclined to merge patches that I don't expect will be generally useful, because they add to the burden of conflicts and merging. Thanks for contributing though. Perhaps someone else will find it useful.\n. Patches for Linuxbrew must not affect the behaviour on Mac OS. Can you test instead this one-line fix?\nruby\nENV['PERL'] = '/usr/bin/perl' if OS.mac?\n. Is it necessary to set the PERL environment variable on Linux? I suspect not. Can you try instead ENV['PERL'] = '/usr/bin/perl' if OS.mac??\n. Great. Can you squash this PR into a single commit and change the short log message to\nautoconf automake: Don't set PERL for Linuxbrew\n. Thanks for the patch, @jbaum98.\n. Thanks for the patch, @jbaum98.\n. Fixed by 6a95075\n. Nice! That's brilliant. Yes, it does work! Would you like to see if this cookie can be worked into the url command of the formula and submit a PR?\n. I made a few fixes to your PR and merged. Thanks a bunch for the help! This is very good.\n. Yes, please do.\n. Thanks for the contribution. It looks great.\n. The relevant error is\nmake[1]: tclsh: Command not found\nTry\nsh\nbrew install tcl-tk --without-tk\nbrew install git --with-brewed-curl --with-brewed-openssl -v\n. Linuxbrew requires that all packages that are installed on a base Mac OS distribution are also installed on Linux, either through the native package manager or through Linuxbrew. One way of accomplishing that is installing every formula in Homebrew/dupes. Perhaps one day we'll add these dependencies explicitly to Linuxbrew formula, but I probably won't do that unless the upstream Homebrew maintainers would merge those changes into upstream.\n. Thanks for you contribution, @montauk, but I won't be adding instructions to support shells that are not compatible with Bourne syntax.\n. This patch worked for me. This issue is not Linux-specific but affects any Homebrew installation that uses a prefix other than the default /usr/local.\n``` diff\ndiff --git a/Library/Formula/sdl.rb b/Library/Formula/sdl.rb\nindex 3b212d1..dea7bfb 100644\n--- a/Library/Formula/sdl.rb\n+++ b/Library/Formula/sdl.rb\n@@ -78,7 +78,7 @@ class Sdl < Formula\n     libexec.install Dir[\"src/main/macosx/*\"] if build.stable?\n # The resulting script in bin is hardcoded to /usr/local, which can cause pain.\n\n\ninreplace \"#{bin}/sdl-config\", \"prefix=/usr/local\", \"prefix=#{prefix}\"\n\ninreplace \"#{bin}/sdl-config\", \"prefix=#{HOMEBREW_PREFIX}\", \"prefix=#{prefix}\"\nif build.with? \"tests\"\n   ENV.prepend_path \"PATH\", \"#{bin}\"\n``\n. This issue has already been fixed upstream in Homebrew and will be included in the next merge of Homebrew into Linuxbrew. https://github.com/Homebrew/homebrew/commit/928d087f3b26c0d8e4233c4fdf6f856104d202a0\n. Typebrew edit sdland in the text editor changeprefix=/usr/localtoprefix=#{HOMEBREW_PREFIX}. Good luck!\n. Fixed by Homebrew/homebrew#34721\n. I'm not inclined to include Linux-only formula that are not core packages required to install common formula. You could include this formula in a personal Homebrew tap.\n. This issue should be resolved by 4a95872a7500d4cda1fd5bd9c37409c78d959b33\n. Thanks for the fix, @iggyvolz!\n. Interactions between system libraries and Linuxbrew libraries can be tricky to troubleshoot. I've had trouble with Python in the past as well. The following is a bit of a heavyweight solution. The [Standalone Installation](https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation) instructions install Linuxbrew using only Linuxbrew libraries. It should resolve this issue, but does require reinstalling Linuxbrew from scratch.\n. Would you like to submit a pull request to fix valgrind?\n. I'm glad that you eventually got it working, sorry to hear that ugly hacks were necessary.\n. Patchinglibexec/pip/setup.pyandlibexec/setuptools/setup.py` is an option.\n. Ah, I see. That's trickier to fix.\n. Good point, but I'm afraid that I don't have the time to tackle this issue. How to start a program at system startup depends on your Linux distribution.\n. Thanks for the patch, Jonathan. Please see my comments above.\n. See #226\n. For line 275 try\n\n\ndiff\n-    ENV['ARCHFLAGS'] = \"-arch #{MacOS.preferred_arch}\"\n+    ENV['ARCHFLAGS'] = \"-arch #{MacOS.preferred_arch}\" if OS.mac?\nI don't have the time unfortunately to troubleshoot individual formula. If you get it working, please submit a pull request.\n. Likewise line 293\nruby\n    if MacOS.prefer_64_bit?\n      ENV.append_to_cflags \"-arch #{Hardware::CPU.arch_64_bit}\"\n    else\n      ENV.append_to_cflags \"-arch #{Hardware::CPU.arch_32_bit}\"\n    end if OS.mac?\n. I haven't been able to look into it, because Christmas, but I think the Python formula is currently broken and does not install setuptools or pip correctly. You can check by running which pip and brew postinstall python.\n. @itslittlejohn This issue should be resolved now. brew update\n. @sureleo Yes, I'd merge a pull request to fix gdal.\n. How does this formula work on Mac?\n. gperf is GNU perf, provided not by google-perftools but by homebrew/dupes/gperf, and is included with MacOS.\n\u276f\u276f\u276f which gperf\n/usr/bin/gperf\n\u276f\u276f\u276f gperf --version\nGNU gperf 3.0.3\n\u276f\u276f\u276f brew info gperf\ngperf: stable 3.0.4\nhttp://www.gnu.org/software/gperf\nNot installed\nFrom: https://github.com/homebrew/homebrew-dupes/blob/master/gperf.rb\n. brew install git --with-brewed-curl\n. I haven't figured out the answer to this question yet. I like to install absolutely everything using Linuxbrew and use the host system as little as possible, so I would say yes. Other people will want to use their host system as much as possible and only install formula using Linuxbrew that aren't available through their native package manager. It's a matter of preference. As such, I'll stick with the Homebrew default for now. It would be nice to provide a config option to address this issue.\n. It's a policy decision of Homebrew that the default behaviour should not depend on which packages are installed. I'm sticking with that decision in Linuxbrew.\n. It makes overall behaviour less surprising because the final effect of installing a bunch of packages does not depend on the order in which those packages are installed.\n. git.rb is the only formula with the option --with-brewed-curl. Now that you've installed git with the option --with-brewed-curl, brew upgrade will continue to use that option.\n. 13 formula depend directly on curl. 45 formula mention curl somewhere in the formula, so it's a little more involved.\n. Please submit a PR if you would like to fix this issue.\n. Which libuuid are you using? I'm using the formula libuuid and had no trouble installing and upgrading postgresql.\n. I'd prefer not to patch the formula if libuuid works. Can you confirm that postgresql builds without a patch using libuuid?\n. Great. Glad to hear that it worked.\n. Yes, I have this issue as well. The workaround for upgrading binutils is\nsh\nPATH=`brew --prefix binutils`/bin:$PATH brew upgrade binutils\nNote: brew --prefix binutils might have to be $(brew --cellar binutils)/$VERSION/bin, please tell me which works.\nGCC needs its executables and also its libraries. I upgraded my GCC using the system GCC. I would like to be able to upgrade GCC using the Linuxbrew GCC.\nbrew upgrade gcc --cc=gcc-4.4.\n. Thanks for the patch. Would you like to submit a pull request?\nI don't test on 32-bit systems, so you're going to run into other issues like this, likely, but I'll accept patches. For my curiosity, what 32-bit system are you using? Is it a desktop computer, or an embedded system perhaps?\n. Fixed by #225.\n. Yes, it should probably test the value of uname -m rather than the processor. Can you report the value of uname -m on your i386 debian squeeze system? Also uname -a please.\n. Would you like to submit a pull request? I'm on vacation until the new year, so no rush.\n. Thanks, Hutson.\n. This PR was meant to test Travis CI.\n. This patch doesn't implement all the functionality of the Mac version. If the version argument is specified, it needs to check whether the installed Java version matches the requested version. A simple regex could parse the output of java -version.\n. ~ \u276f\u276f\u276f /usr/libexec/java_home --failfast\n/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home\n~ \u276f\u276f\u276f /usr/libexec/java_home --failfast --version 1.8\n/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home\n~ \u276f\u276f\u276f /usr/libexec/java_home --failfast --version 1.7\nUnable to find any JVMs matching version \"1.7\".\n~ \u276f\u276f\u276f echo $?\n2\n. I committed a mini-fix. It could be improved, but is good enough for now.\n. Could you instead parse the output of java -version using Ruby rather than awk?\nUntil Linuxbrew supports installing multiple versions of JDK, I'm not sure that we want to be super fussy about checking that the version is correct. Are there formula that require a particular version of JDK to work?\n. @saketkc I was thinking someting more like\nruby\n`java -version 2>&1`.include? \"1.8\"\n. I just pushed a jdk7 formula.\n. I don't believe Homebrew has support for that kind of minimum (or maximum) version check with Java.\n. Ah, no. It's my mistake! I missed the all important plus sign in args << \"--version\" << \"#{@version}+\" if @version. It should be a minimal version.\n~ \u276f\u276f\u276f /usr/libexec/java_home --failfast --version 1.8\n/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home\n~ \u276f\u276f\u276f /usr/libexec/java_home --failfast --version 1.7\nUnable to find any JVMs matching version \"1.7\".\n~ \u276f\u276f\u276f /usr/libexec/java_home --failfast --version 1.7+\n/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home\n. I'd prefer that the awk script be implemented in Ruby. Something like (untested)\u2026\nruby\n`java -version 2>&1`[/java version \"(.*)\"/,1].to_f >= (@version || 1) if OS.linux?\n. Piping into ruby is quite unnecessary. You're already running in a Ruby interpreter. Does my one-line version above work?\n. I'm seeing three failed tests as well. You should report this issue upstream to http://bugs.gnupg.org\n/bin/bash: line 5: 16459 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: basic\nSALSA20     /bin/bash: line 5: 16521 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: benchmark\n     STREAM enc | /bin/bash: line 5: 16528 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: bench-slope\nSKIP: hashtest-256g\n======================================\n3 of 24 tests failed\n(1 test was not run)\nPlease report to http://bugs.gnupg.org\n. As a work around you can brew edit libgcrypt and delete the line make check.\n. +brew audit p7zip\np7zip:\n * Use the `chmod` Ruby method instead of `system \"chmod `\nError: 1 problems in 1 formulae\nThe command \"brew test-bot --dry-run $TRAVIS_COMMIT |sed -n 's/^==> //p' |sh -ex\" exited with 1.\n. The patch can be made smaller by using the suffix form end if OS.mac?. It makes merging conflicts easier.\n. Try chmod 0776, doc. The 0 indicates octal format.\nWhy do you need to change the perms? Is there an error message? The perms should probably be 0755.\n. You can simply delete that line system \"chmod -R +w #{doc}\". It's not needed anymore. Please add a test do end if you have the time.\n. You're right. I messed up my test (probably installed the bottle by mistake). The following works as well. I prefer this solution because it's smaller.\nruby\n    # install.sh chmods to 444, which is bad and breaks uninstalling\n    chmod_R \"u+w\", doc\n. I take it back. My preference is simply to delete the two chmod lines. That should work (untested).\n. ruby\ninreplace \"install.sh\", /^chmod (444|555).*/, \"\"\n. Great. Thanks.\n. You could test locally with brew install qt --gcc=gcc-4.6 if you were inclined. Definitely a compile bug though.\n../3rdparty/javascriptcore/JavaScriptCore/runtime/CallData.cpp\n{standard input}: Assembler messages:\n{standard input}:4609: Warning: end of file not at end of a line; newline inserted\n{standard input}:5097: Error: bad register name `%rc'\n{standard input}: Error: open CFI at the end of file; missing .cfi_endproc directive\ng++-4.6: internal compiler error: Killed (program cc1plus)\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <file:///usr/share/doc/gcc-4.6/README.Bugs> for instructions.\n. Thanks for the fix, Saket.\n. The policy is I merge nominally every Monday.\n. I've merged now for the security update.\n. It's not possible (I don't think) to install glibc on an existing Linuxbrew install. To install glibc, start with a fresh install of Linuxbrew and follow the standalone installation instructions.\n. Are you using a Standalone Installation of Linuxbrew? It builds GCC using --with-build-time-tools, but maybe that doesn't affect run time? In any case, thanks for the work around. Nice find.\n. That is odd. I haven't run into that issue. It may be an issue specific to cabal-install.\n. Thanks for the bug report, Fong. I'm going to close this issue as wontfix, because I don't have the time to troubleshoot it. I'm glad that you found a workaround.\n. Can you report the output of brew postinstall openssl and brew test openssl?\n. Perhaps it's a permissions issue? It seems unlikely, but it's worth checking.\nsh\nls -ld /home/me/.linuxbrew/etc/openssl/cert.pem\nls -ld /home/me/.linuxbrew/etc/openssl/\nls -ld /home/me/.linuxbrew/etc/\nls -ld /home/me/.linuxbrew/\nls -ld /home/me/\nls -ld /home/\nls -ld /\nAlso a shot in the dark, but you can try\u2026\nsh\nbrew install git --with-brewed-openssl --with-brewed-curl\n. Can you try wc /home/me/.linuxbrew/etc/openssl/cert.pem.\n$ wc /home/sjackman/.linuxbrew/etc/openssl/cert.pem\n  3894   4653 251894 /home/sjackman/.linuxbrew/etc/openssl/cert.pem\n. Try\u2026\nsh\nrm -f /home/me/.linuxbrew/etc/openssl/cert.pem\nwc /home/me/.linuxbrew/etc/openssl/cert.pem\nbrew postinstall openssl\nwc /home/me/.linuxbrew/etc/openssl/cert.pem\n. No worries. Glad we sorted it out.\n. Thanks for the workaround. Did brew postinstall openssl work for you?. I've created PR https://github.com/Linuxbrew/homebrew-core/pull/2924 to resolve this issue by adding an http mirror for the OpenSSL certificates cacert.pem.. Fixed by https://github.com/Linuxbrew/homebrew-core/pull/2924. Thanks for the feedback. I'd be interested to know which bottle is causing the trouble, if you figure it out.\n. <built-in>: internal compiler error: Illegal instruction\nAh, apparently I'm compiling for an instruction set that your machine does not support. I believe the default target machine is Intel Core2 -march=core2.\n. Did you install the readline packages using your host package manager or brew? Try brew install readline?\nI'm afraid I don't have enough time to troubleshoot individual formula. Please post the workaround or solution if you find one.\n. Try brew install homebrew/dupes/ncurses\n. Using rvm is a workaround, I suppose, so I'm closing this issue as wontfix for now. I'd be interested in hearing the solution if you find one.\n. Nice. Thanks, Landon. @heejongahn Does this rb-readline solution work for you?\n. Please post these logs in a gist.\n/home/hutson/Library/Logs/Homebrew/readline/01.configure\n     /home/hutson/Library/Logs/Homebrew/readline/config.log\n. I missed this last time: checking host system type... i686-pc-linux-gnu\nAre you on a 32-bit system?\n. Linuxbrew doesn't support 32-bit systems, that is, I don't support 32-bit systems, because I don't have one to test on. If you're able to fix this issue, I will merge well-thought-out pull requests to support 32-bit systems.\n. The workaround is to install R without X11: brew install r --without-x11\nTry installing the X11 developer package using your host's package manager:\nsudo apt-get install xorg-dev\n. error: openssl/ssl.h: No such file or directory\nTry brew install git --with-brewed-openssl.\n. Yes, good idea. Linking was only necessary before if you wanted to override the default /usr/bin/gcc provided by your system, but I believe it's mandatory now on systems that don't provide a /usr/bin/gcc-4.? compiler. Debian does. I think Fedora and CentOS does not.\n. Sure. The installer should handle this eventually, but updating docs is quicker.\n. Fixed by 63b1cd37d84e6d1ce57d8a118edfa77e05d66162.\n. Woops. I read #246 before I read this PR. Thanks for the patch. In any case, hopefully it's fixed now by 63b1cd37d84e6d1ce57d8a118edfa77e05d66162.\n. index.html is generated automatically from README.md. This patch should modify the latter. No need though, because it gave me the encouragement to actually fix Linuxbrew. In addition to searching for compilers named like gcc-4.9, it now also searches for compilers named like gcc44 and simply gcc.\nFixed in 63b1cd37d84e6d1ce57d8a118edfa77e05d66162\n. I really don't know what went wrong here, but based on your description, I'm going to guess that it's a bug in the node formula. I also think it's likely not specific to Linuxbrew, but affects Homebrew as well. I'm going to close this issue as wontfix. I'm glad that you found a workaround.\nNote that npm is an alias for node. See https://github.com/Homebrew/homebrew/blob/master/Library/Formula/node.rb#L99-L102\n. Sorry, Mike. I'm not receiving the emails any more. The travis.yml includes notifications: email: false. Can you post a snippet of the email that may help track down why you're still getting them?\n. Okay. I sorted it out. I have a homebrew branch that tracks homebrew/master, and it doesn't have a .travis.yml file, hence also no notifications: email: false setting. I enabled Build only if .travis.yml is present at https://travis-ci.org/Homebrew/linuxbrew/settings.\n. Thanks for the patch. I didn't pull the fast finish until I find a use case to support it.\n. Thanks for finding and posting the solution.\n. These core dependencies are expected to be provided by the host operating system for a standard install of Linuxbrew. I haven't yet sorted out how to deal with this issue for Standalone Linuxbrew, other than to suggest installing all formula found in Homebrew/dupes.\n. Thanks for the helpful bug report.\n. It looks as though you're using headers from one version of libpng but libraries from a different version.\nhttps://gist.github.com/anonymous/53220a11b28489c76354#file-02-make-L929-L936\n/usr/bin/gcc-4.9 -std=gnu99 -Demacs  -I. -I. -I../lib -I./../lib            -pthread -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/include/glib-2.0 -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib/glib-2.0/include  -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/include/glib-2.0 -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib/glib-2.0/include      -MMD -MF deps/.d -MP  -pthread -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/include/glib-2.0 -I/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib/glib-2.0/include    -Os -w -pipe -march=core2  -Wl,-znocombreloc  -L/home/uri/.linuxbrew/lib -Wl,-rpath,/home/uri/.linuxbrew/lib -lfreetype -lfontconfig  \\\n  -o temacs  vm-limit.o dispnew.o frame.o scroll.o xdisp.o menu.o xmenu.o window.o charset.o coding.o category.o ccl.o character.o chartab.o bidi.o cm.o term.o terminal.o xfaces.o xterm.o xfns.o xselect.o xrdb.o xsmfns.o xsettings.o   emacs.o keyboard.o macros.o keymap.o sysdep.o buffer.o filelock.o insdel.o marker.o minibuf.o fileio.o dired.o cmds.o casetab.o casefiddle.o indent.o search.o regex.o undo.o alloc.o data.o doc.o editfns.o callint.o eval.o floatfns.o fns.o font.o print.o lread.o syntax.o unexelf.o bytecode.o process.o gnutls.o callproc.o region-cache.o sound.o atimer.o doprnt.o intervals.o textprop.o composite.o xml.o gfilenotify.o profiler.o decompress.o     xfont.o  fontset.o fringe.o image.o xgselect.o  terminfo.o lastfile.o    widget.o  ../lib/libgnu.a     ../lwlib/liblw.a  -lpng12 -lz -lm  -lXpm -lXaw3d -lXmu -lXt -lSM -lICE -lXext -lX11         -lrt    -lXrandr -lXinerama  -lgpm   -ltinfo  -L/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib -lgio-2.0 -lgobject-2.0 -lglib-2.0  -L/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib -lgobject-2.0 -lglib-2.0  -lselinux      -lpthread  -L/home/uri/.linuxbrew/Cellar/glib/2.42.1/lib -lgio-2.0 -lgobject-2.0 -lglib-2.0  -lm -lz\nimage.o: In function `my_png_error':\nimage.c:(.text+0x5af): undefined reference to `png_longjmp'\nimage.o: In function `png_load_body':\nimage.c:(.text+0x436c): undefined reference to `png_set_longjmp_fn'\ncollect2: error: ld returned 1 exit status\nMakefile:664: recipe for target 'temacs' failed\n. You can try brew unlink libpng before installing emacs to compile using your host system's libpng.\n. Yeah! Glad that you got it working.\nOnly brew edit emacs. FAQ: https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md#how-can-i-specify-different-configure-arguments-for-a-formula\n. Thanks for the follow up. I generally prefer using Homebrew libraries over system libraries, but in this case the header/library mix up is causing trouble.\n. On Mac OS man should not be installed in prefix. This smells like an upstream bug. Can you report this bug upstream and include a link to the issue here?\n. Thanks for the fix!\n. You can try brew install gcc.\n. I'm closing this issue. Feel free to reopen it if the above suggestion does not work.\n. Try brew install google-perftools --cc=gcc-4.9\n. He's compiling with GCC 4.9 though.\n. I'm back from vacation and can confirm that I see the same error.\n. That is a good lead though, Saket. Oddly _GLIBCXX_USE_NANOSLEEP is defined for me.\n$ grep -r _GLIBCXX_USE_NANOSLEEP /gsc/btl/linuxbrew/include/c++/\n/gsc/btl/linuxbrew/include/c++/4.9.2/thread:#ifdef _GLIBCXX_USE_NANOSLEEP\n/gsc/btl/linuxbrew/include/c++/4.9.2/x86_64-unknown-linux-gnu/bits/c++config.h:#define _GLIBCXX_USE_NANOSLEEP 1\n. Thanks for the troubleshooting, Steve. Would you like to create a formula for libunwind for Linuxbrew?\n. libunwind was easy to package. I created a formula in b19afa17134ca57646eebc9ed1f56152067a583e. Would you be able to test it out, Steve?\n. I'm quite confused why adding ~/.linuxbrew/include/c++/4.9.2 manually should be necessary. Shouldn't g++ include that in its search path by default?\n. I have this problem:\nchecking how to access the program counter from a struct ucontext... configure: WARNING: Could not find the PC.  Will not try to compile libprofiler...\nchecking libunwind.h usability... no\nchecking libunwind.h presence... yes\nconfigure: WARNING: libunwind.h: present but cannot be compiled\nconfigure: WARNING: libunwind.h:     check for missing prerequisite headers?\nconfigure: WARNING: libunwind.h: see the Autoconf documentation\nconfigure: WARNING: libunwind.h:     section \"Present But Cannot Be Compiled\"\nconfigure: WARNING: libunwind.h: proceeding with the compiler's result\nconfigure: WARNING:     ## ------------------------------------------------ ##\nconfigure: WARNING:     ## Report this to google-perftools@googlegroups.com ##\nconfigure: WARNING:     ## ------------------------------------------------ ##\nchecking for libunwind.h... no\nchecking for backtrace in -lunwind... yes\nconfig.log\nconfigure:17496: checking libunwind.h usability\nconfigure:17496: /gsc/btl/linuxbrew/bin/gcc-4.9 -c -Os -w -pipe -march=core2 -D_\nXOPEN_SOURCE -isystem/gsc/btl/linuxbrew/include conftest.c >&5\nIn file included from /gsc/btl/linuxbrew/include/ucontext.h:26:0,\n                 from /gsc/btl/linuxbrew/include/libunwind-x86_64.h:37,\n                 from /gsc/btl/linuxbrew/include/libunwind.h:23,\n                 from conftest.c:91:\n/gsc/btl/linuxbrew/include/sys/ucontext.h:137:5: error: unknown type name 'stack\n_t'\n     stack_t uc_stack;\n     ^\nconfigure:17496: $? = 1\n. Hi, Steve. Can you please brew gist-logs google-perftools?\n. Yeah, same issue.\nhttps://gist.github.com/anonymous/17cf1f8e3a97711aa5e3#file-config-log-L1617-L1624\nconfigure:17279: checking ucontext.h usability\nconfigure:17279: /tf/people/sm1818/.linuxbrew/bin/gcc-4.9 -c -Os -w -pipe -march=core2 -D_XOPEN_SOURCE -isystem/tf/people/sm1818/.linuxbrew/include conftest.c >&5\nIn file included from /tf/people/sm1818/.linuxbrew/include/ucontext.h:26:0,\n                 from conftest.c:91:\n/tf/people/sm1818/.linuxbrew/include/sys/ucontext.h:137:5: error: unknown type name 'stack_t'\n     stack_t uc_stack;\n     ^\nconfigure:17279: $? = 1\n. The issue is that one has to use gcc -std=gnu11 rather than -std=c11 to get stack_t.\nSee http://stackoverflow.com/questions/20778735/is-the-type-stack-t-no-longer-defined-on-linux\n. Yes. append 'CC', '-std=c11' should do it.\n. I think it was google-perftools that was having this issue with stack_t, so add it to that formula. That was just a typo, eh? Yeah, hopefully that should work.\n. Is the default ucs2 then? Which Linux distribution are you using? I haven't run into this issue myself, so I won't merge this patch. If you like, you could submit a PR upstream to Homebrew that adds an option to switch between ucs2 and ucs4.\n. I've used Linuxbrew on Trusty and haven't run into this issue myself.\n. Are you using the Ubuntu Python package, or did you compile Python yourself?\n. Thanks. Changes from Homebrew are merged into Linuxbrew usually once per week.\n. Can you try system \"make\", \"CC=#{ENV.cc}\", \"CFLAGS=#{ENV.cflags}\"?\n. Please remove -s from the make command line.\n==> make -s CC=/usr/bin/gcc CFLAGS=-Os -w -pipe -march=core2\n/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../lib64/crt1.o: In function `_start':\n(.text+0x20): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\nMakefile:520: recipe for target 'jumbo.o' failed\nmake[1]: *** [jumbo.o] Error 1\nhttps://gist.github.com/sidaf/7c5e0b77272aefe49018#file-gistfile1-txt-L359-L364\n. https://gist.github.com/sidaf/f7084dddfb937679aa8a#file-gistfile1-txt-L365-L370\n/usr/bin/gcc -Os -w -pipe -march=core2 -funroll-loops john-mpi.c -o john-mpi.o\n/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../lib64/crt1.o: In function `_start':\n(.text+0x20): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\nMakefile:520: recipe for target 'john-mpi.o' failed\nmake[1]: *** [john-mpi.o] Error 1\n. There's a -c option missing in this command line. Try this instead:\n``` diff\ndiff --git a/Library/Formula/john-jumbo.rb b/Library/Formula/john-jumbo.rb\nindex 9ec7901..b715752 100644\n--- a/Library/Formula/john-jumbo.rb\n+++ b/Library/Formula/john-jumbo.rb\n@@ -35,11 +35,11 @@ class JohnJumbo < Formula\ndef install\n     cd \"src\" do\n-      args = []\n+      args = [\"CC=#{ENV.cc}\", \"CFLAGS=#{ENV.cflags}\"]\n       args << \"--disable-native-macro\" if build.bottle?\n       system \"./configure\", *args\n       system \"make\", \"clean\"\n-      system \"make\", \"-s\", \"CC=#{ENV.cc}\"\n+      system \"make\"\n     end\n # Remove the symlink and install the real file\n\n```\n. https://gist.github.com/sidaf/442614f9421e26630268#file-gistfile1-txt-L465-L471\n/usr/bin/gcc -DAC_BUILT -march=native -msse4.1 -c -Os -w -pipe -march=core2 -I/usr/local/include -DARCH_LITTLE_ENDIAN=1   -Wall -Wdeclaration-after-statement -fomit-frame-pointer --param allow-store-data-races=0 -Wno-deprecated-declarations -Wno-format-extra-args -D_GNU_SOURCE   -I/home/sion/.linuxbrew/Cellar/openssl/1.0.2/include  -fopenmp  -pthread  -funroll-loops clipperz_srp_fmt_plug.c -o clipperz_srp_fmt_plug.o\nclipperz_srp_fmt_plug.c:66:17: fatal error: gmp.h: No such file or directory\n #include \"gmp.h\"\n                 ^\ncompilation terminated.\nMakefile:520: recipe for target 'clipperz_srp_fmt_plug.o' failed\nmake[1]: *** [clipperz_srp_fmt_plug.o] Error 1\n. Try\n``` diff\n--- a/Library/Formula/john-jumbo.rb\n+++ b/Library/Formula/john-jumbo.rb\n@@ -35,11 +35,11 @@ class JohnJumbo < Formula\ndef install\n     cd \"src\" do\n-      args = []\n+      args = [\"CC=#{ENV.cc}\", \"CFLAGS=#{ENV.cflags}\", \"CPPFLAGS=#{ENV.cppflags}\", \"LDFLAGS=#{ENV.ldflags}\"]\n       args << \"--disable-native-macro\" if build.bottle?\n       system \"./configure\", *args\n       system \"make\", \"clean\"\n-      system \"make\", \"-s\", \"CC=#{ENV.cc}\"\n+      system \"make\"\n     end\n # Remove the symlink and install the real file\n\n``\n. I have no plans to support ARM processors for now. Sorry. Feel free to submit a pull request if you do the porting work yourself.\n. Yes, everything is built from source. Porting Linuxbrew to ARM is a manageable task. I just don't have the time to do it.\n. Ruby is portable, but Homebrew is not. Homebrew and Linuxbrew currently only support Intel CPU.\n. I've added ARM support to Linuxbrew for the Raspberry Pi. I have a Raspberry Pi myself now. Happy hacking!\nSee 2077229dfdcc32559c80349080d8baf345ef42b9\n. The current policy is that Linuxbrew must install all the formula provided byhomebrew/dupesto provide a system that has all the dependencies that are usually provided by Mac OS.\n. Thanks for the feedback though. The above policy may change.\n. Yes, you understand correctly. Thanks for your understanding. I'd like to eventually add dependencies likedepends_on :ncursesthat on Mac is satisfied by Mac OS and on Linux possibly checks whether a native package is installed, and otherwise installshomebrew/dupes/ncurses`.\n. https://travis-ci.org/Homebrew/linuxbrew/builds/48315409#L1518-L1520\n==> Installing mutt dependency: makedepend\nError: /home/travis/build/Homebrew/linuxbrew/opt/pkg-config not present or broken\nPlease reinstall pkg-config. Sorry :(\n. Thanks for your contribution. I modified the patch like so:\ndiff\n--- a/Library/Formula/mutt.rb\n+++ b/Library/Formula/mutt.rb\n@@ -78,7 +78,7 @@ class Mutt < Formula\n             \"--disable-warnings\",\n             \"--prefix=#{prefix}\",\n             \"--with-ssl=#{Formula['openssl'].opt_prefix}\",\n-            \"--with-sasl\",\n+            (if OS.mac? then \"--with-sasl\" else \"--with-sasl2\" end),\n             \"--with-gss\",\n             \"--enable-imap\",\n             \"--enable-smtp\",\n. I'd prefer to understand why packages that depend on pkg-config aren't installing it correctly. Are you able to do some troubleshooting into the root cause?\n. @saketkc Do you mean get rid of => :build? This bug finally came up on Docker:\nhttps://registry.hub.docker.com/u/sjackman/linuxbrew-bottle/build_id/22230/code/be6fqn4fpychd89sahnraqw/\n==> Installing gcc dependency: cloog\nError: /home/linuxbrew/.linuxbrew/opt/pkg-config not present or broken\nPlease reinstall pkg-config. Sorry :(\n. Just for cloog? All the other formula that depend on pkg-config use => :build. Why would only cloog be broken? I think this is a Homebrew bug, but I haven't been able to figure it out.\n. Hi, Matthew. Does brew install pkg-config before brew install neovim resolve your issue?\n. Oh! Revelation, @saketkc! I found the root cause of this bug. When Homebrew does its dependency analysis it determines that it will install a bottle of makedepend, because there are Mac bottles available. When it instead installs makedepend by source, it finds that pkg-config is not installed. It didn't install pkg-config, because pkg-config is not required by makedepend bottle.\nThe real fix would be for the dependency logic to check that a bottle is available for this architecture.\n@xu-cheng Any thoughts on this bug?\n. Thanks for the example, Matthew. That's perfect.\n. @lpar\n\nError: pkg-config cannot be built with any available compilers.\n\nFollow these instructions: https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. @lpar You have two separate errors, Matthew. The solution to Error: pkg-config cannot be built with any available compilers. is to create a symlink named gcc-4.9 in your path pointing to /usr/bin/gcc.\nThe error pkg-config not present or broken we're troubleshooting here, but once you have the compiler symlink should be fixed with brew install pkg-config.\n. @jacknagel If you have access to docker you can docker pull sjackman/linuxbrew\n. @lpar Hmm, that's frustrating. Can you report which -a gcc-4.9 and brew --prefix?\nIf you're willing to try a brew install gcc which will install GCC 5.1, it will likely resolve your issue.\n. Also try brew tap homebrew/versions\n. @lpar It checks not only /usr/bin/ but two lines down also $(brew --prefix)/bin. You should put your symlinks in there.\n. @jacknagel On Linuxbrew, the installation of bottles is disabled unless the user has the glibc and patchelf formulas installed, because those two formula are required to be able to use Linuxbrew bottles (see here for code). Perhaps that logic is somehow related to this issue. I'll do some troubleshooting, see if I can reproduce the issue, and get back to you.\n. Homebrew/Linuxbrew ignores most of the users' environment variables, including PATH by design to ensure reproducible builds.\n\nand not require that the user create symlinks in order to use the distro's standard compiler\n\nI agree with this. I simply haven't got around to fixing the issue. Feel free to submit a pull request.\n. Note that nice distros like Debian and Ubuntu that include versioned compiler names like /usr/bin/gcc-4.9 work just fine out of the box.\n. I've finally resolved this issue. I had modified pour_bottle? to check that glibc and patchelf are installed, but I had not modified install_bottle_for?. I mistakenly thought that install_bottle_for? calls FormulaInstaller::pour_bottle?, but it's actually calling Formula::pour_bottle?, which always returns true.\n. I believe that mosh is installed correctly and that this is a configuration issue.\n. I can confirm that I see this issue as well. The files mosh-client and mosh-server are not executable. The workaround is\nsh\nchmod +x `brew --prefix mosh`/bin/*\n. Wow, thanks, Dmitry. I've been meaning to look into this. It's going to take me some time to review this, and I haven't had a whole lot of time for major Linuxbrew work recently. I am very interested in this patch though. Thanks for your work.\n. The patch is surprisingly short. I'm excited that it may be so easy. I'll give it a test next week.\n. Does hello build and install?\n. Great! That's good news. I'll hopefully find the time to merge this next week.\n. Do we need the ENV/linux directory of symlinks, and can we just use the 4.3 directory instead?\n. That's seem quite likely, but I prefer not to anticipate trouble and skip the symlinks for now.\n. I'm getting ready to split the linuxbrew repository into brew and homebrew-core, as has been done for upstream homebrew. I'm not going to get around to merging this PR before then. So I'm finally closing this PR as wontfix, without however any prejudice against implementing superenv in the future. I simply never got around to committing the time necessary to test it.\n. Superenv has been added to Linuxbrew! https://github.com/Linuxbrew/brew/pull/263. Thanks for the follow up.\n. Thanks for the follow up.\n. I'm thinking that it would make sense in python_dependency.rb to check whether setuptools is installed. Could you try that instead? If it works, you can send the PR upstream to Homebrew rather than to Linuxbrew.\n. Good question. I believe on Mac it's assumed that setuptools is installed\u2014I'll have to confirm that. With Linuxbrew the general policy is to make the same assumptions that Mac Homebrew makes. Another option is to add a --with-brewed-python option that uses the Homebrew python rather than the system Python.\n. I don't want to force installing a brewed Python on a Linux system that already has Python installed.\n. Did you get an error message that setuptools was missing, and if so, can you post it?\n. Brad (@chapmanb) contributed the commit ab148e4f44e5192abce317362e66bbe5d673872a that disabled the Python dependency for cmake. You and he should discuss. \n. The current policy of a standard Linuxbrew installation is that everything provided by the most recent version of Mac OS is provided by the host distribution of Linux, including Python and setuptools. Any formula can assume that this dependencies are already installed and do not require an explicit depends_on, for compatibility with upstream Homebrew.\nTo provide a better user experience, I would like to modify python_dependency.rb to check that Python is in fact installed and provides all the same packages as Mac OS, and if not, install the python formula.\n. @chapmanb cmake does have a --without-docs option.\n. If the host OS provides Python, it probably also has setuptools installed. I'd like to check if that's the case and then use the host Python rather than installing Linuxbrew Python. I'm not keen on changing the default --with-docs to be different than Homebrew or having the default behaviour depend on whether Python is installed.\n. > Systemwide python might not have setuptools on linux, so we better brew it.\nI'm going to assume that if the system has Python installed, it also has setuptools installed. I realize this may not always be true. Is there a common system where this is untrue?\n. That's good to know. Are these instructions to install setuptools useful?\ncurl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py | python -\n. The better solution, in my opinion. =)\n. Thanks for the patch.\n. That message regarding launchctl is intended only for Mac OS. I've disabled this message for Linuxbrew now. You can definitely install nginx using Linuxbrew, but you'll have to read your distro's documentation to configure it to launch on startup.\n. Thanks for the patch.\n. I merge Homebrew once per week into Linuxbrew, usually on Monday.\n. PRs for new versions of software should be opened at Homebrew/homebrew, rather than Homebrew/linuxbrew.\n. I've merged just now. Enjoy.\n. Mercurial requires Python.\nerror: Python.h: No such file or directory\nRun\nbrew install python mercurial\n. Assuming this formula would also run on Mac it should be submitted to Homebrew/homebrew rather than Homebrew/linuxbrew.\n. Your solution looks good to me. The alternative would have been to give that one user permissions to write to /opt/linuxbrew and install Linuxbrew there.\n. Thanks for the patch. Can you give me a command that would fail otherwise without this patch, so that I can test that this patch resolves the issue?\n. Compiling libgcrypt on my machine gives errors, so I'm not able to test installing weechat. Sorry. Are you able to give me another suggestion?\n/bin/sh: line 5: 29023 Segmentation fault      GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: basic\n\u2026\n/bin/sh: line 5: 29154 Segmentation fault      GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: benchmark\n\u2026\nFAIL: bench-slope\nSKIP: hashtest-256g\n======================================\n3 of 24 tests failed\n(1 test was not run)\nPlease report to http://bugs.gnupg.org\n======================================\nMakefile:714: recipe for target 'check-TESTS' failed\nmake[2]: *** [check-TESTS] Error 1\n. I disabled the make check of libgcrypt and replicated your issue installing weechat. The sitecustomize.py of Homebrew seems to address Mac-specific issues. I disabled it by removing sitecustomize.py. Does that solution work for you?\nsh\nrm -f `brew --prefix`/python2.7/site-packages/sitecustomize.pyc \nmv `brew --prefix`/lib/python2.7/site-packages/sitecustomize.py `brew --prefix`/lib/python2.7/site-packages/sitecustomize.py.orig\n. See https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/python.rb#L167\nPossible fix\ndiff\n-    (site_packages/\"sitecustomize.py\").atomic_write(sitecustomize)\n+    (site_packages/\"sitecustomize.py\").atomic_write(sitecustomize) if OS.mac?\n. Perhaps default HOMEBREW_LOGS to $HOMEBREW_PREFIX/Library/Logs on Linuxbrew?\n. I've change the defalt log directory to ~/.cache/Homebrew/Logs\n. Does setting both TMPDIR and HOMEBREW_TEMP work?\n. Linuxbrew currently assumes that all software provided by Mac OS is already installed using the host package management system.\n. Yes, I think I'm going to start including these dependencies as\ndepends_on \"curl\" unless OS.mac?\n. Could you revise this PR?\n. If it fits in 50 characters, then icecast 2.4.1: Requires libxslt and curl on Linuxbrew\notherwise iceast 2.4.1: Add dependencies for Linuxbrew and list the dependencies in the message.\n. Thanks for you contribution, Iggy.\n. Do you also have libuuid installed? Can you report the output of\nsh\nbrew install ossp-uuid\nbrew link ossp-uuid\nwhich uuid\nuuid\n. I'd suggest\nsh\nbrew unlink libuuid ossp-uuid\nbrew link ossp-uuid\nbrew link --force libuuid\nCheers,\nShaun\n. I think I ran into this issue myself as well.\n. I guess we need to add brew install cpanm && cpanm XML::Parser to the base installation instructions, though I'm not super keen on that.\n. The solution, I believe, is to set the PKG_CONFIG_PATH environment variable to include both the system paths and the Linuxbrew paths. The default, I believe, is to include just the Linuxbrew paths.\n. Yes, I agree that brew search should not show casks on Linux.\n. It's still a bug, just not a high priority one. Linuxbrew should not suggest installing a cask, which is not available for Linux.\n. Fixed by #299 and https://github.com/Homebrew/linuxbrew/commit/8fe17ee3ae3cd158804193b9e28e42ce29e19b6c\n. Try this patch:\n``` diff\ndiff --git a/Library/Formula/newt.rb b/Library/Formula/newt.rb\nindex 90a3605..b68427d 100644\n--- a/Library/Formula/newt.rb\n+++ b/Library/Formula/newt.rb\n@@ -19,7 +19,7 @@ class Newt < Formula\n   patch :p0 do\n     url \"https://trac.macports.org/export/132914/trunk/dports/devel/libnewt/files/patch-Makefile.in.diff\"\n     sha1 \"f366a650ed100317344a3e7f49981a6dca1f4889\"\n-  end\n+  end if OS.mac?\ndef install\n     args = [\"--prefix=#{prefix}\", \"--without-tcl\"]\n@@ -36,7 +36,7 @@ class Newt < Formula\n       # https://bugzilla.redhat.com/show_bug.cgi?id=1192286\n       s.gsub! \"$$pyconfig --ldflags\", '\"-undefined dynamic_lookup\"'\n       s.gsub! \"$$pyconfig --libs\", '\"\"'\n-    end\n+    end if OS.mac?\n system \"./configure\", *args\n system \"make\", \"install\"\n\n``\n. Doesbrew install openssl zlib` resolve your issue?\n. Try replace line 21\nruby\n  depends_on :osxfuse\nwith\nruby\n  depends_on :osxfuse if OS.mac?\n. I don't actually see any errors in that gist. What error are you seeing?\n. brew install curl mysql may resolve your issue.\n. Try brew install curl readline cmake mysql\n. Run brew gist-logs mysql\nSee the troubleshooting guide.\n. https://gist.github.com/anonymous/6b279259cceaad4940a2#file-01-cmake-L754-L759\n-- EDITLINE_INCLUDE_DIR \n-- EDITLINE_LIBRARY EDITLINE_LIBRARY-NOTFOUND\nCMake Error at cmake/readline.cmake:206 (MESSAGE):\n  Cannot find system editline libraries.\nCall Stack (most recent call first):\n  CMakeLists.txt:406 (MYSQL_CHECK_EDITLINE)\n. Oh, my mistake. I thought libedit was provided by readline. It's not. It's provided by libedit.\nTry brew install curl libedit cmake mysql\n. Try brew install curl homebrew/dupes/libedit cmake mysql\n. Please surround copy-and-pasted text with triple backticks like so:\n```\ntext\nhere\n```\n. See Markdown Basics on GitHub Help for more info.\n. I'm glad you have MySQL installed. You've reached the end of my knowledge here. To configure MySQL you're on your own. Good luck!\n. Linuxbrew assumes that all software provided by Mac OS is already installed on your system. You may install that software using the native package manager or using Linuxbrew from the Homebrew/dupes tap.\n. I'm not able to reproduce your issue.\n```\nsjackman at xhost11 in ~\n$ brew reinstall xz\n==> Reinstalling xz\n==> Downloading http://fossies.org/linux/misc/xz-5.2.0.tar.gz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/gsc/btl/linuxbrew/Cellar/xz/5.2\n==> make install\n/gsc/btl/linuxbrew/Cellar/xz/5.2.0: 65 files, 1.9M, built in 31 seconds\nsjackman at xhost11 in ~\n$ ls -l find /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin -type f\n-r-xr-xr-x 1 sjackman assembly 13336 Feb 25 06:26 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/lzmadec\n-r-xr-xr-x 1 sjackman assembly 12656 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/lzmainfo\n-r-xr-xr-x 1 sjackman assembly 80560 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xz\n-r-xr-xr-x 1 sjackman assembly 13344 Feb 25 06:26 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xzdec\n-r-xr-xr-x 1 sjackman assembly  6272 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xzdiff\n-r-xr-xr-x 1 sjackman assembly  5628 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xzgrep\n-r-xr-xr-x 1 sjackman assembly  1802 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xzless\n-r-xr-xr-x 1 sjackman assembly  2161 Feb 25 06:27 /gsc/btl/linuxbrew/Cellar/xz/5.2.0/bin/xzmore\n```\n. New versions should be submitted to Homebrew/homebrew rather than Homebrew/linuxbrew. Homebrew is merged into Linuxbrew once per week.\n. > Where to commit?\nPatches specific to Linux should be submitted to Homebrew/linuxbrew.\ndepends_on \"libuuid\" unless OS.mac? is the preferred idiom.\n\nWhat to modify anyway?\n\nIgnore the Mac bottles.\n\nIs there any magic pulling involved?\n\nHomebrew/homebrew is merged into Homebrew/linuxbrew every week, usually on Monday.\n. Yes, I agree that CONTRIBUTING.md is missing some key information. I'll aim to update it this week.\n. I'm going to leave the apt-get info for now. It'll make for a happier user not to run into frequent missing dependency errors. Please do open PR for missing dependencies as you find them.\n. The error is in the link command line. The linked libraries -l must come after the source files. -llzma pxz.c -o pxz should be pxz.c -o pxz -llzma. \n/usr/bin/gcc-4.8 -Wall -Wshadow -Wcast-align -Wunreachable-code -Winline -Wextra -Wmissing-noreturn  -Os -w -pipe -march=core2 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DPXZ_BUILD_DATE=\\\"`date +%Y%m%d`\\\" -DPXZ_VERSION=\\\"4.999.9beta\\\" -O2 -fopenmp -L/home/buck/prefices/brew/lib -Wl,-rpath,/home/buck/prefices/brew/lib -llzma pxz.c -o pxz\n. Please report this bug to the upstream author of the software.\n. On OS X the linker allows the -l command line options to precede the source files. On Linux it does not.\n. > Is it possible the rather old GCC 4.6 does not support C++11?\nYes. Install GCC 4.9 using Homebrew: brew install gcc\n. To require a compiler that supports C++11 use:\nruby\nneeds :cxx11\n. The libuuid dependency won't be accepted in Homebrew/homebrew, because libuuid is provided by Mac OS, so I'll merge this PR into Linuxbrew. The C++11 requirement should be submitted to Homebrew/homebrew.\n. Thanks for your contribution, Jens.\n. You can create a pull request, and every push to that PR will trigger a Travis build. I'm fine with that. Just make it clear in the PR title what you're up to. You can also fork Linuxbrew and run Travis in your own fork. I'm not familiar with a Travis Docker image, but I'm almost certain that one should exist.\n. Thanks for the helpful bug report, Migel.\n. No worries. Did you find a resolution to your issue?\n. Thanks for your contribution, Saket.\nYou can use compact to remove the nil entry from the vector. See here: https://github.com/Homebrew/linuxbrew/commit/0c2c2cfc7c0c85695d80debfec5220d2de527cd6\n. https://gist.github.com/anonymous/f0be8f2ba8ea64fbbff8#file-02-make-L648-L655\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -Wl,-rpath -Wl,/home/ubuntu/workspace/linuxbrew/lib -o sample main.o  -L/home/ubuntu/workspace/linuxbrew/lib -lm ../../lib/.libs/liba2ps.a  \n../../lib/.libs/liba2ps.a(metaseq.o): In function `grow_user_string_obstack':\nmetaseq.c:(.text+0x7011): warning: the use of `tempnam' is dangerous, better use `mkstemp'\n../../lib/.libs/liba2ps.a(psgen.o): In function `virtual_begin':\npsgen.c:(.text+0x7ad): undefined reference to `atan2'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [sample] Error 1\nmake[2]: Leaving directory `/tmp/a2ps-Rpiuox/a2ps-4.14/contrib/sample'\n. For undefined reference to 'atan2', -lm ../../lib/.libs/liba2ps.a should perhaps be ../../lib/.libs/liba2ps.a -lm.\n. Thanks again for your contribution, Iggy.\n. Don't forget if OS.mac?\n. Thanks again, Saket.\n. That looks like an upstream bug to me. Please open a bug upstream. It is odd though. They're using libtool, which should handle adding -fPIC.\n/gsc/btl/linuxbrew/bin/gcc-4.9 -DHAVE_CONFIG_H -I. -I. -I../include -I../include -I../include -isystem/gsc/btl/linuxbrew/include -Os -w -pipe -march=core2 -fomit-frame-pointer -c imdct.c -o .libs/imdct.lo\n\u2026\n/gsc/btl/linuxbrew/bin/gcc-4.9 -shared  bitstream.lo imdct.lo bit_allocate.lo parse.lo downmix.lo  -L/gsc/btl/linuxbrew/lib -lm  -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath -Wl,/gsc/btl/linuxbrew/lib -Wl,-soname -Wl,liba52.so.0 -o .libs/liba52.so.0.0.0\n/gsc/btl/linuxbrew/bin/ld: imdct.lo: relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC\nimdct.lo: error adding symbols: Bad value\ncollect2: error: ld returned 1 exit status\nMakefile:196: recipe for target 'liba52.la' failed\nmake[1]: *** [liba52.la] Error 1\n. Does a52dec compile correctly outside of Linuxbrew?\n. Try\nruby\nargs = []\nargs << \"CFLAGS=#{ENV[\"CFLAGS\"]} -fPIC\" unless OS.mac?\nsystem \"make\", \"install\", *args\n. Even better is\nruby\n    ENV.append_to_cflags \"-fPIC\" unless OS.mac?\n. Thanks, Xu.\n. https://gist.github.com/anonymous/2211356fab25828d7175#file-02-make-L154-L155\nobjects/term.o: In function `out_str':\nterm.c:(.text+0x14b8): undefined reference to `tputs'\n. Run\nsh\nbrew install ncurses\nln -s ncursesw/curses.h ncursesw/ncurses.h ncursesw/term.h ncursesw/termcap.h ~/.linuxbrew/include/\nln -s libncurses.a ~/.linuxbrew/lib/libcurses.a\nln -s libncurses.so ~/.linuxbrew/lib/libcurses.so\nSee https://github.com/Homebrew/homebrew-dupes/pull/422 and Standalone installation instructions\n. brew tap homebrew/dupes\n. Did you see this message?\n~ \u276f\u276f\u276f brew install ncurses\nError: No available formula for ncurses \nSearching formulae...\nSearching taps...\nhomebrew/dupes/ncurses\n. Great. Glad that you got it working.\n. Try this patch:\n``` diff\ndiff --git a/Library/Formula/notmuch.rb b/Library/Formula/notmuch.rb\nindex 5443ded..ba728b1 100644\n--- a/Library/Formula/notmuch.rb\n+++ b/Library/Formula/notmuch.rb\n@@ -31,7 +31,7 @@ class Notmuch < Formula\n       system \"./configure\", \"--prefix=#{buildpath}/zlib\", \"--static\"\n       system \"make\", \"install\"\n       ENV.append_path \"PKG_CONFIG_PATH\", \"#{buildpath}/zlib/lib/pkgconfig\"\n-    end\n+    end if OS.mac?\n args = [\"--prefix=#{prefix}\"]\n if build.with? \"emacs\"\n\n. And run `brew install homebrew/dupes/zlib`\n. A pull request is always preferred to an issue, if you're able to find the solution yourself. Check out https://github.com/Homebrew/linuxbrew/commit/6520db41105c03f43aab0ffe3f08029503ebbeaa\n. If you're able to troubleshoot and find a fix on your own, a pull request would be most welcome.\n. If we removed the configure argument `-march=core2` it would at least compile.\n. I'm suggesting that the `objective-caml` formula could remove `-march=core2` from `CFLAGS`. A very hacky workaround, but better than nothing, perhaps.\n. Thanks again, Xu.\n. The executable `expect` is linked against `libexpect5.45.so`, which is installed in `lib/expect5.45/libexpect5.45.so` and not symlinked into `lib`.\n.\n$ expect --version\nexpect: error while loading shared libraries: libexpect5.45.so: cannot open shared object file: No such file or directory\n. This issue would be fixed by https://github.com/Homebrew/homebrew-dupes/pull/438\n.\n/usr/bin/gcc-4.8  -Iext -Iext/common -fPIC -D_REENTRANT -I/usr/local/include -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-long-long -Wno-missing-field-initializers -feliminate-unused-debug-symbols -feliminate-unused-debug-types -fvisibility=hidden -DVISIBILITY_ATTRIBUTE_SUPPORTED -Wno-attributes -ggdb -DHAS_ALLOCA_H -DHAVE_ACCEPT4 -DHAS_SFENCE -DHAS_LFENCE -DPASSENGER_DEBUG -DBOOST_DISABLE_ASSERTS -o buildout/apache2/mod_passenger.o -c ext/apache2/mod_passenger.c\next/apache2/mod_passenger.c:25:19: fatal error: httpd.h: No such file or directory\n #include \n                   ^\ncompilation terminated.\nrake aborted!\n. Run `brew install homebrew/apache/httpd24`\n.\n\u276f\u276f\u276f brew install homebrew/apache/httpd24\n/gsc/btl/linuxbrew/Cellar/apr/1.5.1/build-1/libtool --silent --mode=link /gsc/btl/linuxbrew/bin/gcc-4.9 -std=gnu99  -g -Wall -pthread  -Os -w -pipe -B/gsc/btl/linuxbrew/opt/glibc/lib -march=core2     -L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib    -o mod_authz_user.la -rpath NONE/libexec -module -avoid-version  mod_authz_user.lo \nlibtool: link: only absolute run-paths are allowed\n/tmp/httpd24-s22575/httpd-2.4.12/modules/aaa/modules.mk:18: recipe for target 'mod_authz_user.la' failed\nmake[4]: *** [mod_authz_user.la] Error 1\n``\n. We need to find a package that provideshttpd.h. The only one that I know of is apache.\n. Runbrew install pkg-config`. You may still see this warning, but you can safely ignore it.\n. Thanks for the helpful bug report.\n. @tseemann The group \"Additional Development\" installs a fair number of packages, most of which aren't strictly necessary to Linuxbrew (I don't think). Was there a particular package that was missing and caused you a dependency issue?\n\u276f\u276f\u276f yum groupinfo 'Additional Development'\nGroup: Additional Development\n Description: Additional development headers and libraries for developing applications\n Default Packages:\n   GConf2-devel\n   alsa-lib-devel\n   audit-libs-devel\n   binutils-devel\n   boost-devel\n   bzip2-devel\n   cyrus-sasl-devel\n   dbus-glib-devel\n   elfutils-devel\n   elfutils-libelf-devel\n   evolution-data-server-devel\n   gnome-desktop-devel\n   gnome-keyring-devel\n   gstreamer-devel\n   gvfs-devel\n   hmaccalc\n   java-1.6.0-openjdk-devel\n   java-1.7.0-openjdk-devel\n   libacl-devel\n   libattr-devel\n   libcanberra-devel\n   libcap-ng-devel\n   libcgroup-devel\n   libcurl-devel\n   libgnome-devel\n   libnotify-devel\n   librsvg2-devel\n   libselinux-devel\n   libsoup-devel\n   mysql-devel\n   perl-ExtUtils-MakeMaker\n   perl-devel\n   polkit-devel\n   postgresql-devel\n   pulseaudio-libs-devel\n   pygtk2-devel\n   python-devel\n   readline-devel\n   sqlite-devel\n   tbb-devel\n\u2026\n. What is the ultimate goal? Is it to avoid installing the Homebrew package (like gd) if that dependency is satisfied by the native package manager?\n. That standard Linuxbrew installation uses both host-provided packages as well Linuxbrew packages. It assumes that the host provides all the same packages that are provided by Mac OS.\nThe standalone Linuxbrew installation uses only Linuxbrew packages. See the Standalone Installation instructions.\n\nWriting good formulae is hard. A \"blank\" Linux system for Jenkins would reveal most of these errors.\n\nLinuxbrew uses Docker and Travis for testing.\n. Try brew install vim --with-client-server\nThe option to enable the GUI is named somewhat cryptically. See @dpo https://github.com/Homebrew/homebrew/commit/cf715c0e6611e7692c6e9df9bd0e12af5551b1eb#commitcomment-10226176\n. The only effect of --with-client-server that I can see is to enable the GUI.\n\u276f\u276f\u276f grep -A5 client-server vim.rb\n  option \"with-client-server\", \"Enable client/server mode\"\n\u2026\n  depends_on \"gtk+\" if build.with? \"client-server\"\n\u2026\n    if build.with? \"client-server\"\n      opts << \"--enable-gui=gtk2\"\n    else\n      opts << \"--enable-gui=no\"\n      opts << \"--without-x\"\n    end\n. Does the client-server functionality get automatically built without a special configure option if the gtk+ dependency is satisfied?\n. Thanks for clearing that up for me.\n. Great! I'm glad you got it working. As for the scroll bar, you'll have to follow up on that issue with one of GTK+, XFCE, or VIM. I'm not sure which.\n. Run the executable named gvim. Did you run brew install vim --with-client-server ?. Ah, it looks like support for GUI was dropped from the formula for some reason. You can check git log vim to find out why. I'd accept a PR to add support back. If you're adventurous, try brew edit vim and change \"--enable-gui=no\" to \"--enable-gui=gtk\" and add depends_on \"gtk+\" then run\nsh\nbrew install vim --with-lua --with-override-system-vi --with-client-server. We've just enabled brew install --env=super by default for users. If some packages fail to build with --env=super try brew install --env=std systemd. Please do open an issue if a formula fails to build with --env=super but builds fine with --env=std.. ~/.linuxbrew is the default to support users of servers that do not have write access to /usr/local. It's easier to support a single default value that works for everyone. If you do have write access to /usr/local, there's no reason why git clone https://github.com/Homebrew/linuxbrew.git /usr/local shouldn't work\u2014given that you first delete the existing /usr/local. I haven't tested installing Linuxbrew to /usr/local, but it sure gets a lot of testing with Homebrew for Mac.\n. Please report the output of ls -l /home/sjackman/.linuxbrew/opt/xz/bin/xz.\nI don't see the chown error in this log. Can you please post a more complete log? You can use brew gist-logs gettext\n. This bug refuses to die. I am not a fan. brew install ruby should fix it. Otherwise, please report which -a ruby and ruby --version.\n. @jacknagel Do you recall the cause of Error: cannot load such file -- minitest/unit?\n. Please report\u2026\nsh\n/usr/bin/ruby -e\"require 'minitest'\"; echo $?\nbrew install ruby -v\nbrew gist-logs ruby\n\nDo I need to remove Ruby from my PATH / system first?\n\nNo, that's fine.\n. Can you confirm that you have write access to this file/folder?\n/bio/linuxbrew/Cellar/ruby/2.2.1/lib/ruby/gems/2.2.0/gems/minitest-5.4.3/test/minitest/metametameta.rb\n. If your system version of ruby is recent enough, it'll work. Otherwise brew install ruby is best.\n. Try\u2026\nsh\ngem install minitest\nor\nsudo yum install rubygem-minitest\n. What version of Ruby are you using? This bug may be unique to Ruby 1.9.x. I think Ruby 1.8 and Ruby 2.x work. brew install ruby should resolve it.\n. I'm afraid that I don't have the time to troubleshoot individual formula. If you're able to find a workaround or solution, I'd appreciate a pull request. Best of luck.\n. Please report brew gist-logs gtk+. If someone else stumbles on this issue, it'll help.\n. https://gist.github.com/anonymous/baaf98d031eb9594ef74#file-02-make-L473-L485\ng-ir-scanner: link: /bin/bash ../libtool --mode=link --tag=CC /usr/bin/gcc-4.8 -o /tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/Gdk-2.0 -export-dynamic -isystem/home/ismael/.linuxbrew/include -DG_DISABLE_SINGLE_INCLUDES -DATK_DISABLE_SINGLE_INCLUDES -DGDK_PIXBUF_DISABLE_SINGLE_INCLUDES -DGTK_DISABLE_SINGLE_INCLUDES -Os -w -pipe -march=core2 -Wall -L/home/ismael/.linuxbrew/lib -Wl,-rpath,/home/ismael/.linuxbrew/lib /tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/Gdk-2.0.o -L. libgdk-x11-2.0.la -L/home/ismael/.linuxbrew/Cellar/glib/2.44.1/lib -lgio-2.0 -lgobject-2.0 -Wl,--export-dynamic -lgmodule-2.0 -pthread -lglib-2.0\nlibtool: link: /usr/bin/gcc-4.8 -o /tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/.libs/Gdk-2.0 -isystem/home/ismael/.linuxbrew/include -DG_DISABLE_SINGLE_INCLUDES -DATK_DISABLE_SINGLE_INCLUDES -DGDK_PIXBUF_DISABLE_SINGLE_INCLUDES -DGTK_DISABLE_SINGLE_INCLUDES -Os -w -pipe -march=core2 -Wall -Wl,-rpath -Wl,/home/ismael/.linuxbrew/lib /tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/Gdk-2.0.o -Wl,--export-dynamic -pthread -Wl,--export-dynamic  -L/home/ismael/.linuxbrew/lib -L. ./.libs/libgdk-x11-2.0.so -L/usr/lib/x86_64-linux-gnu -L/home/ismael/.linuxbrew/Cellar/pango/1.36.8/lib -L/home/ismael/.linuxbrew/Cellar/glib/2.44.1/lib -L/home/ismael/.linuxbrew/Cellar/gdk-pixbuf/2.30.8/lib -L/home/ismael/.linuxbrew/Cellar/cairo/1.14.2/lib -lXinerama -lpangocairo-1.0 -lpango-1.0 -lfontconfig -lfreetype -lgdk_pixbuf-2.0 -lSM -lICE -lX11 -lXext -lcairo -lm -lgio-2.0 -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -pthread -Wl,-rpath -Wl,/home/ismael/.linuxbrew/Cellar/gtk+/2.24.28/lib\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderFindVisualFormat'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderCreatePicture'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderSetPictureClipRectangles'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderFreePicture'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderChangePicture'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderComposite'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderQuerySubpixelOrder'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderFindFormat'\n./.libs/libgdk-x11-2.0.so: undefined reference to `XRenderQueryExtension'\ncollect2: error: ld returned 1 exit status\nlinking of temporary binary failed: Command '['/bin/bash', '../libtool', '--mode=link', '--tag=CC', '/usr/bin/gcc-4.8', '-o', '/tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/Gdk-2.0', '-export-dynamic', '-isystem/home/ismael/.linuxbrew/include', '-DG_DISABLE_SINGLE_INCLUDES', '-DATK_DISABLE_SINGLE_INCLUDES', '-DGDK_PIXBUF_DISABLE_SINGLE_INCLUDES', '-DGTK_DISABLE_SINGLE_INCLUDES', '-Os', '-w', '-pipe', '-march=core2', '-Wall', '-L/home/ismael/.linuxbrew/lib', '-Wl,-rpath,/home/ismael/.linuxbrew/lib', '/tmp/gtk+20150609-707-1gl9ela/gtk+-2.24.28/gdk/tmp-introspectep55zR/Gdk-2.0.o', '-L.', 'libgdk-x11-2.0.la', '-L/home/ismael/.linuxbrew/Cellar/glib/2.44.1/lib', '-lgio-2.0', '-lgobject-2.0', '-Wl,--export-dynamic', '-lgmodule-2.0', '-pthread', '-lglib-2.0']' returned non-zero exit status 1\n. This looks like an upstream bug me to. This command line should link against -lXrender. Would you like to open an issue with the upstream GTK+ developers?\n. I wish I had the time to help troubleshoot, but I simply don't. The upstream project (GTK+) is here:\nhttp://www.gtk.org/\n. Does brew install linuxbrew/xorg/xorg gtk+ help?\n. The search path for crt?.o is specified with the GCC option -B, like gcc -B /usr/local/opt/glibc/lib. Try this patch.\ndiff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 8f75f28..f875b6d 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -57,6 +57,8 @@ module Stdenv\n       # Set the dynamic linker\n       glibc = Formula[\"glibc\"]\n       if glibc.installed?\n+        # Set the search path for crt1.o, crti.o and crtn.o\n+        append_to_cflags \"-B#{glibc.opt_lib}\"\n         ldso = glibc.opt_lib/\"ld-linux-x86-64.so.2\"\n         if ldso.readable?\n           append \"LDFLAGS\", \"-Wl,--dynamic-linker=#{ldso}\"\n. There's two ways to install Linuxbrew: a standalone installation that uses both host-provided packages and Linuxbrew packages. The above patch I realized was for a standalone installation. If you're using a standard installation of Linuxbrew you'll need something like this (untested):\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 8f75f28..acee160 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -67,6 +67,8 @@ module Stdenv\n       end\n       # Set the dynamic library search path\n       append \"LDFLAGS\", \"-Wl,-rpath,#{HOMEBREW_PREFIX}/lib\"\n+      # Set the search path for crt1.o, crti.o and crtn.o\n+      append \"LDFLAGS\", \"-B#{HOMEBREW_PREFIX}/lib\"\n     end\n if inherit?\n\n``\n. I'm glad that you got it working! I'm going to close this issue. Feel free to continue to post diagnostic info if you want to continue troubleshooting. I'm happy leaving it though.\n. Likely becauserustignores theLDFLAGSenvironment variable.\n. Merging Homebrew is the way to go. I'll do so today.\n. Trybrew install bzip2`\n. Thanks for the bug report, Andy.\n. See Contributing to Linuxbrew\n. I'm just guessing here, but please try\nsh\nbrew reinstall git --with-brewed-curl --with-brewed-openssl\n. You may also want to try the Standalone Installation instructions for Linuxbrew, but that's a more heavyweight solution.\n. Hi, James. Glad to hear it. Yes, you understand correctly. Brew will remember these build options for brew upgrade. See brew info git where it shows the options used.\n. @nhumrich Do you have the LD_LIBRARY_PATH environment variable set? If so, try unsetting it using\nsh\nunset LD_LIBRARY_PATH\nwhich -a ssh\nssh --version\n. It tells the dynamic linker where to search for shared libraries. Linuxbrew does not require it, and it can cause problems. You may want to find where it's being set in your startup scripts and remove it.\n. Hi, Simon. Were you getting an error message without this patch, and if so, what was it?\nHave you seen the Standalone Installation instructions for Linuxbrew, and is that an option for you?\n. Do you still get that error if the bzip2 formula is installed? If not, I'll add bzip2 as a dependency of boost.\nruby\ndepends_on \"bzip2\" unless OS.mac?\n. > The standalone installation looks like it could work but seems a bit heavy handed? Is that something you recommend for linuxbrew users without sudo to avoid having too many patches on specific formulae?\nI like standalone, because it helps clear up a lot of issues that stem from confusion about whether a given package is using the system library or the Homebrew library, because it only uses Homebrew libraries. It depends on your use case though. If you just want to install a few Linuxbrew packages, I would suggest the standard install simply for the lower barrier to entry. If you're planning to use tens or hundreds of Linuxbrew packages, I would use the standalone installation.\n. Can you submit this patch upstream to Homebrew/homebrew?\n. Can you please post the gist: brew gist-logs boost\nWhich compiler are you using? You may want to try the brewed GCC 4.9 compiler brew install gcc\n. https://gist.githubusercontent.com/yesimon/8c8b89c2bfe85c003d43/raw/02.b2\n```\ngcc.compile.c++ bin.v2/libs/iostreams/build/gcc-4.9.2/release/threading-multi/bzip2.o\n\"/idi/sabeti-scratch/yesimon/linuxbrew/bin/g++-4.9\"  -ftemplate-depth-128 -O3 -finline-functions -Wno-inline -Wall -pthread -fPIC  -DBOOST_ALL_NO_LIB=1 -DBOOST_IOSTREAMS_DYN_LINK=1 -DBOOST_IOSTREAMS_USE_DEPRECATED -DNDEBUG  -I\".\" -c -o \"bin.v2/libs/iostreams/build/gcc-4.9.2/release/threading-multi/bzip2.o\" \"libs/iostreams/src/bzip2.cpp\"\n\nlibs/iostreams/src/bzip2.cpp:20:56: fatal error: bzlib.h: No such file or directory\n #include \"bzlib.h\"  // Julian Seward's \"bzip.h\" header.\n                                                        ^\ncompilation terminated.\n...failed gcc.compile.c++ bin.v2/libs/iostreams/build/gcc-4.9.2/release/threading-multi/bzip2.o...\n``\n. Does Boost have an option to add$HOMEBREW_PREFIX/includeand$HOMEBREW_PREFIX/lib` to the search directories for all libraries, not just bzip2?\n. To override the location of particular libraries when they're also found in the global search path.\n. Looks fine to me. Patches for Linuxbrew should not change the behaviour on Mac. Please see CONTRIBUTING.md\nPlease use\nruby\nargs += [\u2026] unless OS.mac?\n. Merged. Thanks for your contribution, Simon.\n. What's the benefit of using readline over libedit? Are you getting an error when building these formulae? If so, please gist the error message. brew gist-logs juise\n. Is there any benefit to using readline instead of libedit on Linux? I'd be more inclined use the same dependency (libedit) on both systems.\nruby\ndepends_on \"homebrew/dupes/libedit\" unless OS.mac?\n. configure:3836: checking whether the C compiler works\nconfigure:3858: /usr/bin/clang -Os -w -pipe -march=core2 -isystem/home/mikaela/.local/include -L/home/mikaela/.local/lib -Wl,-rpath,/home/mikaela/.local/lib -framework Foundation -prebind -liconv conftest.c  >&5\n/usr/bin/ld.bfd.real: -f may not be used without -shared\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:3862: $? = 1\nconfigure:3900: result: no\nhttps://gist.github.com/anonymous/03476075e77ca700f134#file-config-log-L122-L127\n. Thanks for the bug report, Mikaela!\n. On Mac, the JDK formula is in Homebrew-cask, but there is no cask support for Linuxbrew.\n. Thanks for your contribution, Angel.\n. I fixed the error Fix fatal error: sys/malloc.h: No such file or directory, but I now see the error:\nlibtool: link: /gsc/btl/linuxbrew/bin/gcc-4.9 -Os -w -pipe -B/gsc/btl/linuxbrew/opt/glibc/lib -march=core2 -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath -Wl,/gsc/btl/linuxbrew/lib -o .libs/ilur ilur.o  -L/gsc/btl/linuxbrew/lib ../lib/.libs/libILU.so /tmp/devil20150330-14518-k9ifu5/devil-1.7.8/lib/.libs/libIL.so -ltiff -lpng -ljpeg -lm -lz -Wl,-rpath -Wl,/gsc/btl/linuxbrew/Cellar/devil/1.7.8_1/lib\n/tmp/devil20150330-14518-k9ifu5/devil-1.7.8/lib/.libs/libIL.so: undefined reference to `png_set_gray_1_2_4_to_8'\ncollect2: error: ld returned 1 exit status\nMakefile:520: recipe for target 'ilur' failed\nmake[1]: *** [ilur] Error 1\nmake[1]: Leaving directory '/tmp/devil20150330-14518-k9ifu5/devil-1.7.8/bin'\n. Thanks, Simon.\n. Thanks!\n. Please submit this patch to setup.py upstream to Python.\n. Please post the exact command that you're attempting to run and the exact error message. You likely forgot the slash between ~/.linuxbrew. To avoid typos, copy and paste the instructions. See http://brew.sh/linuxbrew\n. Please report\nsh\necho $PATH\nThere's probably a tilde character in there that shouldn't be in there. Try\nsh\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\necho $PATH\n. The formula is incorrectly named Vv.rb instead of vv.rb upstream. Try\nsh\nbrew install bradp/vv/Vv\n. Glad you got it working. See Linuxbrew Dependencies.\n. I've started adding dependencies directly into the formulas to make this less of an issue. You'll definitely still need a C/C++ compiler, but the library dependencies should no longer be necessary. You could output a message saying either sudo apt-get install build-essential for Debian/Ubuntu or sudo yum groupinstall 'Development Tools' for Fedora/CentOS/Red Hat.\n. Could you make this an option instead, --without-ldap?\n. Just a regular option.\nruby\noption \"without-ldap\", \"Build without LDAP support\"\n\u2026\nargs << \"--disable-ldap\" if build.without? \"ldap\"\n. I haven't run into the error that you're seeing. I'd prefer to describe the option with exactly what it does. If you're having conflicts with system libraries, consider a Standalone Installation of Linuxbrew, which does not use the system libraries at all.\n\nThere's no question anymore of ever merging linuxbrew and homebrew, is there?\n\nNot any time soon. I would like to merge them, but the upstream Homebrew developers are not interested. The current fork/merge system is working pretty well though. I merge the Homebrew changes into Linuxbrew once per week.\n. Can you send this patch upstream to Homebrew/homebrew, Alex?\n. Thanks. Let's see if they take it.\n. Please submit one pull request per formula. See How To Open a Homebrew Pull Request (and get it merged)\n. I'm happy to merge these two fixes, and thanks for your contribution, but please resubmit each in its own pull request.\n. Thanks for this, Alex. Please remove the style-only changes from the patch. If they're from the upstream go branch, I'll merge them in a separate commit.\n. I'd rather keep the patch small. It makes it easier to review.\n. Thanks, Alex.\n. Thanks, Alex.\n. Thanks, Alex.\n. Linuxbrew does not currently support 32-bit platforms. I'd consider merging a pull request if you find a solution.\n. It is now. https://github.com/Homebrew/linuxbrew#32-bit-x86-platforms\n. Dependencies are resolved recursively. It shouldn't be necessary to explicitly list recursive dependencies.\n. It should not be necessary to explicitly list recursive dependencies, since dependencies are resolved recursively. Can you give an example to replicate this error?\n. You can also use brew install homebrew/dupes/gnu-tar.\n. Glad to hear that you sorted it out.\n. Yes, that document is inaccurate for Linuxbrew. It could be patched. The Linuxbrew installation instructions are at\nhttp://brew.sh/linuxbrew/\n. Does changing curl = Pathname.new '/usr/bin/curl' to curl = Pathname.new \"curl\" resolve your issue?\n. Yes, definitely. That should probably be patched for Linuxbrew. Perhaps something like $HOMEBREW_PREFIX/bin:$HOME/bin:/usr/local/bin:/usr/bin:/bin, or just use the user's PATH untouched.\n. @randomessence Using which should work:\nruby\ncurl = which(\"curl\") || Pathname.new(\"/usr/bin/curl\")\nraise \"#{curl} is not executable\" unless curl.exist? and curl.executable?\n. @iggyvolz My preference for now is to use the string version. One design goal of Homebrew is not to depend on the state of the user's environment variables, and to build a consistent package between different machines. It's harder on Linux, because the systems are so heterogeneous, but I'd like to keep to that design goal.\n. Fixed. I went with this:\nruby\n  curl = which \"curl\" unless OS.mac?\n  curl ||= Pathname.new '/usr/bin/curl'\n. I believe it uses either $HOMEBREW_PREFIX/opt/curl/bin/curl or the curl found in your PATH. You could create a symlink from the curl that you want to use to $HOMEBREW_PREFIX/opt/curl/bin/curl. See https://github.com/Linuxbrew/brew/blob/master/Library/Homebrew/brew.sh#L114-L125. Yes, the standalone installation intentionally does not use any system libraries or headers.\nFor tcl-tk you can build without X11 support: brew install tcl-tk --without-x11\nI have not run into the sys/sdt.h issue when building Ruby. Can you post the log?\nbrew gist-logs ruby\n. > Tk wouldn't be much good --without-x11?\nCorrect. Do you need Tk?\n\nbrew gist-logs is another thing that isn't working. Maybe it uses Ruby?\n\nWhat's the error message? All of Homebrew/Linuxbrew is written in Ruby.\n. Looks like a bug in the Ruby autoconf checks. It says that dtrace USDT is available, but then can't find the header. I believe sys/sdt.h is a single portable header. You can download it and install that single header file yourself to work around this issue.\nchecking whether dtrace USDT is available... yes\nchecking whether dtrace USDT is available... (cached) yes\nchecking whether dtrace needs post processing... In file included from conftest.c:1:0:\nconftest_provider.h:9:21: fatal error: sys/sdt.h: No such file or directory\n #include <sys/sdt.h>\n                     ^\ncompilation terminated.\nno\n. brew gist-logs is recompiling the package. It may take a while.\n. Nice work. I'd be happy to accept a PR improving the :x11 dependency and adding the xorg-xlib formula, if you're up for it. Take a look at x11_dependency.rb. If the package glibc is installed, you can assume it's a standalone installation, and a standard installation otherwise.\nI'm away on vacation for the next week.\n. For X11, I've installed it using the native package manager and then symlinked it into the Linuxbrew hierarchy. It's not ideal, but it's a usable workaround. I would eventually like to package X11 for Linuxbrew, perhaps in a month's time.\n. Yep, I'm familiar with that situation. You should be able to ask your sysadmins though to apt-get or yum install X11. That's a reasonable request in my opinion.\n. Can you install libffi? brew install libffi\nDo you have glibc and patchelf installed?\n. Do you have patchelf installed?\n. Please report brew gist-logs ghc\n. With glibc and patchelf installed it should be possible to run the binary executables distributed by haskell.org. You may be able to use an older version of ghc distributed by haskell.org to bootstrap the most recent version.\n. > Not enough room for program headers, try linking with -N\nPerhaps this error is an upstream GHC issue? Could you try contacting the upstream GHC authors?\n. What version of the Linux kernel are you running? You can try brew edit glibc and adding a --enable-kernel=x.y.z to the configure options.\nhttp://www.gnu.org/software/libc/manual/html_node/Configuring-and-compiling.html\n. Cool! That's really good to know. Red Hat / CentOS / Fedora have been known to occasionally introduce non-binary compatible patches into the kernel. That may be a possibility here. You can try replacing the Linuxbrew version of linux-headers with your particular version.\n. Which version of the Linux kernel are you using? Please report uname -a\nThis issue is closed in that I don't really have the time myself to troubleshoot it, but I'm glad that you found a workaround. If you find a solution, please open a pull request.\n. 2.6.18 should work (though it seems not to). The servers I use at work are running CentOS 5.10\n$ echo hello >hi\n$ tar cf hi.tar hi\n$ xz hi.tar\n$ tar xfO hi.tar.xz\nhello\n$ uname -a\nLinux xhost11 2.6.18-371.1.2.el5 #1 SMP Tue Oct 22 12:51:53 EDT 2013 x86_64 GNU/Linux\n$ tar --version\ntar (GNU tar) 1.28\n$ xz --version\nxz (XZ Utils) 5.2.0\nliblzma 5.2.0\n. Yes! You're right! Sorry that I didn't catch this issue earlier. It looks like an upstream xz bug then?\n$ /gsc/btl/linuxbrew/Cellar/xz/5.2.1/bin/xz --version\n/gsc/btl/linuxbrew/Cellar/xz/5.2.1/bin/xz: Error creating a pipe: Function not implemented\n. Here's the workaround to install xz 5.2.0:\nsh\nhttps://raw.githubusercontent.com/Homebrew/linuxbrew/a51741bc83fa5af3644ce3413b0cfcef76f91952/Library/Formula/xz.rb\n. @gitfoxi Would you be able to open an issue with the upstream xz authors?\n. Great! Thanks.\n. You have multiple versions of MPFR installed, and you're mixing the header files of one version with the libraries of a different version. Be sure that you only have one version of MPFR installed.\nhttps://gist.github.com/anonymous/1ab044b91871628c0cc5#file-03-make-L2229-L2244\n```\nIncorrect MPFR version! (3.1.2-p11 header vs 3.1.2 library)\nNothing else has been tested since for this reason,\nany other test may fail. Please fix this one first.\nYou can try to avoid this problem by changing the value of\nshlibpath_overrides_runpath in the libtool file and rebuild\nMPFR (make clean && make && make check).\nOtherwise this error may be due to a corrupted mpfr.h, an\nincomplete build (try to rebuild MPFR from scratch and/or\nuse 'make clean'), or something wrong in the system.\nFAIL: tversion\n=======================\n155 of 160 tests failed\n(1 test was not run)\n=======================\nmake64[2]: *** [check-TESTS] Error 1\n``\n. The [Standalone Installation](https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation) instructions may solve both of these issues. Be sure to follow the instructions carefully and precisely.\n. I'm on vacation until April 22. The regular merging schedule will resume once I return.\n. Doesbrew install homebrew/dupes/zlibresolve this issue?\n. Thanks, Sean.\n. At run time, xz needs to check whether thepipe2` system call is available. This is an upstream bug.\n. This is a decent work around, though. Thanks.\n. Hi, Torsten. I can't reproduced this issue. Can you confirm that it's still a problem for you?\n$ brew reinstall gnuplot\n==> Reinstalling gnuplot\n==> Installing gnuplot dependency: lua\n. Do you have lua installed somewhere in your PATH?\nwhich -a lua\n. Yes, related. I suspect that the LuaRequirement is finding Lua in the path, but then the path is modified later during the build process so that it's no longer found, and the build fails.\n. configure:4014: checking whether the C compiler works\nconfigure:4036: /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/volume1000/homes/deevus/.linuxbrew/include -L/volume1000/homes/deevus/.linuxbrew/lib -Wl,-rpath,/volume1000/homes/deevus/.linuxbrew/lib conftest.c  >&5\nconftest.c:1: error: bad value (core2) for -march= switch\nconftest.c:1: error: bad value (core2) for -mtune= switch\nconfigure:4040: $? = 1\nconfigure:4078: result: no\nhttps://gist.github.com/anonymous/a6e093608ea99b8d543f#file-config-log-L96-L101\n. I'm not exactly sure what's wrong, but a hacky workaround is to edit Library/Homebrew/extend/ENV/std.rb and Library/Homebrew/os/linux/hardware.rb and change -march=core2 to something else supported by your compiler or remove it.\n. Possibly. You may want to check that you have write permission for the folder /volume1000/homes/deevus/.linuxbrew/Cellar/hello/2.10\n. Try brew edit imap-uw and apply the following patch.\ndiff\ndiff --git a/Library/Formula/imap-uw.rb b/Library/Formula/imap-uw.rb\nindex 571c8d6..28fa0e2 100644\n--- a/Library/Formula/imap-uw.rb\n+++ b/Library/Formula/imap-uw.rb\n@@ -25,7 +25,7 @@ class ImapUw < Formula\n       s.gsub! \"SSLLIB=/usr/lib\",\n               \"SSLLIB=#{Formula[\"openssl\"].opt_lib}\"\n       s.gsub! \"-DMAC_OSX_KLUDGE=1\", \"\" if MacOS.version >= :snow_leopard\n-    end\n+    end if OS.mac?\n     inreplace \"src/osdep/unix/ssl_unix.c\", \"#include <x509v3.h>\\n#include <ssl.h>\",\n                                            \"#include <ssl.h>\\n#include <x509v3.h>\"\n     system \"make\", \"oxp\"\n. Your version of Python is too old. Try brew install python cmake.\nSee https://trac.macports.org/ticket/18196 and https://github.com/Homebrew/homebrew/issues/36295\n. Try brew install berkeley-db4\n. Please report the output of\nsh\nbrew install berkeley-db4\nbrew install --with-homebrew-curl --with-homebrew-openssl --without-snmp --with-apache php56\nbrew gist-logs php56\n. Try brew install gdbm\n. Can php56 use berkeley-db rather than berkeley-db4?\n. Try this patch. It can be improved, but is a quick first pass.\nhttps://github.com/sjackman/homebrew-php/commit/45ff1f9d89005e0ee353a4d24aed39444127650d\n``` diff\ndiff --git a/Abstract/abstract-php.rb b/Abstract/abstract-php.rb\nindex 5f70856..1c213e2 100644\n--- a/Abstract/abstract-php.rb\n+++ b/Abstract/abstract-php.rb\n@@ -203,13 +203,13 @@ INFO\n       \"--with-freetype-dir=#{Formula['freetype'].opt_prefix}\",\n       \"--with-gd\",\n       \"--with-gettext=#{Formula['gettext'].opt_prefix}\",\n-      \"--with-iconv-dir=/usr\",\n+      (\"--with-iconv-dir=/usr\" if OS.mac?),\n       \"--with-icu-dir=#{Formula['icu4c'].opt_prefix}\",\n       \"--with-jpeg-dir=#{Formula['jpeg'].opt_prefix}\",\n-      \"--with-kerberos=/usr\",\n+      (\"--with-kerberos=/usr\" if OS.mac?),\n       \"--with-libedit\",\n       \"--with-mhash\",\n-      \"--with-ndbm=/usr\",\n+      (\"--with-ndbm=/usr\" if OS.mac?),\n       \"--with-pdo-odbc=unixODBC,#{Formula['unixodbc'].opt_prefix}\",\n       \"--with-png-dir=#{Formula['libpng'].opt_prefix}\",\n       \"--with-unixODBC=#{Formula['unixodbc'].opt_prefix}\",\n@@ -229,7 +229,7 @@ INFO\n     end\n if build.with? 'bz2'\n\n\nargs << '--with-bz2=/usr'\n\nargs << '--with-bz2=/usr' if OS.mac?\n     end\nif build.with? 'debug'\n@@ -274,7 +274,7 @@ INFO\n if build.with? 'homebrew-libxslt'\n   args << \"--with-xsl=\" + Formula['libxslt'].opt_prefix.to_s\n else\n-      args << \"--with-xsl=/usr\"\n+      args << \"--with-xsl=/usr\" if OS.mac?\n end\nif build.with? 'imap'\n```\n. > So I guess homebrew-php just isn't well supported under linuxbrew?\n\n\nTrue. It's not. It's up to you whether you think it's worth the effort to get it working.\nTry brew install homebrew/dupes/libedit\n. I believe homebrew/php/php56 depends on Apache. Here's my progress so far with installing brew/apache/httpd24.\n``` sh\n\u276f\u276f\u276f brew tap homebrew/apache\n\u276f\u276f\u276f brew install httpd24\nError: Operation already in progress for zlib\nAnother active Homebrew process is already using zlib.\n\u276f\u276f\u276f brew edit httpd24\nChange \"homebrew/dupes/zlib\" to \"zlib\"\n\u276f\u276f\u276f brew install postgresql\nconfigure: error: library 'xslt' is required for XSLT support\npostgresql depends on libxslt\n\u276f\u276f\u276f brew install libxslt\n\u276f\u276f\u276f brew install postgresql\nconfigure: error: library 'uuid' is required for E2FS UUID\npostgresql depends on libuuid\nInstall e2fsprogs for libuuid\n\u276f\u276f\u276f brew install e2fsprogs\ne2fsprogs is keg-only and must be linked with --force\n\u276f\u276f\u276f brew link --force e2fsprogs\n\u276f\u276f\u276f brew install postgresql\nconfigure: error: file 'tclConfig.sh' is required for Tcl\npostgresql depends on tcl\n\u276f\u276f\u276f brew install tcl-tk\n\u276f\u276f\u276f brew install postgresql\nconfigure: error: libperl library is required for Perl\npostgresql depends on perl\n\u276f\u276f\u276f brew install perl\n\u276f\u276f\u276f brew install postgresql\n/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libuuid.a(gen_uuid.o): relocation R_X86_64_32 against `.rodata.str1.1' can not be used when making a shared object; recompile with -fPIC\npostgresql requires dynamically linked libuuid.so\n\u276f\u276f\u276f brew remove e2fsprogs\n\u276f\u276f\u276f brew install libuuid\n\u276f\u276f\u276f brew install postgresql\n\u276f\u276f\u276f brew install httpd24\n/home/linuxbrew/.linuxbrew/Cellar/apr/1.5.2/libexec/build-1/libtool --silent --mode=link /usr/bin/gcc-4.8 -std=gnu99  -pthread  -Os -w -pipe -march=core2     -L/home/linuxbrew/.linuxbrew/lib -Wl,-rpath,/home/linuxbrew/.linuxbrew/lib    -o mod_authn_file.la -rpath NONE/libexec -module -avoid-version  mod_authn_file.lo \nlibtool: link: only absolute run-paths are allowed\nprefix is NONE, for some odd reason.\n``\n. You canbrew link --force berkeley-db4`\n. > No package 'x11' found\nYou'll need to install X11 using your native package manager (yum or apt-get).\n. Thanks, Iggy.\n. Thanks for the info. I don't want to add a dependency on Python, because I don't want to force the user to install Python if they already have it installed. This is an issue though, and similar issues have come up related to Python dependencies.\n. These issues and Google are the documentation, so far. The Wiki is publicly editable. You could, if you like, start a page titled \"Dependencies\".\n. Does brew install jdk fix this issue?\n. @dpo Should open-mpi need depends_on :java for vtsetup.jar?\nI wonder why this issues does not affect Mac.\n. My understanding was that the BrewTestBot does not have Java installed unless the formula depends_on :java. @mikemcquaid ?\n. Thanks for clearing that up, Mike.\n. @davydden open-mpi should depends_on :java. You can send this PR upstream to Homebrew/homebrew.\n. As a workaround disable the tests, and check that it works after building.\nbrew install hypre --with-mpi --with-openblas --without-check\nI'm afraid that I don't have the time to help troubleshoot the root cause. You can try getting support upstream. If you're able to find a solution or workaround, please report back here.\n. Thanks, Saket.\n. Scanning dependencies of target documentation\n[100%] sphinx-build man: see Utilities/Sphinx/build-man.log\n/bin/sh: ../../sphinx/bin/sphinx-build: No such file or directory\nmake[2]: *** [Utilities/Sphinx/doc_format_man] Error 127\nmake[1]: *** [Utilities/Sphinx/CMakeFiles/documentation.dir/all] Error 2\nmake: *** [all] Error 2\nhttps://gist.github.com/anonymous/484418d9f30f5e218295#file-07-make-L572-L577\n. It looks like it's failing while building the documentation. I can't say why. You can try looking for support upstream.\n. Thanks! Good to know.\n. Try brew install git --with-brewed-openssl --with-brewed-curl\n. Which Linux distribution are you using? Does brew install expat fix your issue?\n. brew install tcl-tk\n. Title was\n\ngit: CURLE_HTTP_NOT_FOUND undeclared [CentOS release 6.6 (Final)]\n. I've reported this bug here: https://github.com/Homebrew/homebrew-dupes/issues/457 @mistydemeo\n\nRun brew edit tcl-tk and delete this line:\nruby\n  patch :DATA if MacOS.version < :leopard\n. error: X11/Xlib.h: No such file or directory\nhttps://gist.github.com/anonymous/6bbc2536bd3ac3de524d#file-06-make-L13\n. Try brew install tcl-tk --without-tk\n. Great. Glad to hear that you got it working.\n. Have you installed glibc using the Standalone Installation instructions?\n. Do you have the LD_RUN_PATH environment variable set? echo $LD_RUN_PATH\n. Which distribution of Linux are you using?\n. Ah, I see. Due to the super old kernel, I haven't had much luck with CentOS 4.3. It does work with CentOS 5.10. I'm afraid that I don't have the time to troubleshoot this issue on CentOS 4. If you find a work around or fix, please report back. Sorry I couldn't be more helpful.\n. My gfortran is unfortunately broken due to #135, so I can't test this. Perhaps it's a parallel make issue that would be fixed by ENV.deparallelize?\n. Glad to hear it, Denis. Would you submit a pull request?\n. You already did. Thanks! Homebrew/homebrew-science#2277\n. Thanks @xu-cheng and @feng-ye.\n. Thanks, Xu.\n. The default flags are set in Library/Homebrew/extend/ENV/std.rb and Library/Homebrew/os/linux/hardware.rb. Linuxbrew uses the same defaults as Homebrew. There's no way to tweak compiler flags that I know of. You may want to try asking at Homebrew/homebrew.\n. Here's a one-liner:\nruby\n        file.write \"using #{OS.mac? ? 'darwin' : 'gcc'} : : #{ENV.cxx} ;\\n\"\n. I'm afraid I don't the time to troubleshoot individual formula. Please report back here if you're able to find a workaround or fix. Sorry I couldn't be of more help.\n. Thanks for all your help with support, Iggy. I appreciate it.\n. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. No worries.\n. I would really like Homebrew-Science to be that central repository of bioinformatics software. It is ported to both Mac and Linux. It already has formula to build tons of bioinformatics software from source, 173 at last count. There are binary packages (called bottles, in Brew-ease) of 141 of these for Mac OS! The missing component is bottles for Linux. Building the bottles is easy: brew install --build-bottle bwa && brew bottle bwa. The trick is making this bottles portable across multiple distributions of Linux.\nThe two key issues:\n- dynamic library dependencies (including glibc and libstdc++)\n- Installed location in the file system. Some bioinformatics software, once it's installed, doesn't like to be moved to a new location in the file system.\nI've create an issue on GitHub if anyone wants to discuss bottling for Linux: https://github.com/Homebrew/linuxbrew/issues/380\nThe good news, a lot of bioinformatics software doesn't suffer from either of these issues and can be bottled today! We need only get up and running a CI tool, such as TravisCI or CircleCI or Jenkins, to bottle each new release of the bioinformatics software as is already done for Mac by the BrewTestBot.\n. Hi, Iggy. I would very much like the help of another contributor/committer to Linuxbrew. You've contributed two commits (7344ef24ebacdac841c2dc7fb74904bdd72a034a and 93471b0b873e290f73b2f1b085fbdd029e736765) and lots of support to Linuxbrew. I'd like to see a history of a few more commits before giving push access. Could you go through the open issues and find say three that you can fix and submit pull requests to fix them? #369 is an easy one.\n. Oh, and thanks for the Jenkins offer! I was planning on using the hosted TravisCI or CircleCI, but BrewTestBot uses Jenkins, so it might be easier to get that up and running. I don't have a strong preference which, as long as it works.\n. I've bottled homebrew-science/bwa for Linuxbrew and uploaded the bottle to Bintray as a proof of concept. See https://github.com/Homebrew/homebrew-science/commit/e4861ac28a601729f8c7e17650a6a14a1b0715f6\n. I'd rather not make a separate bottle for each distribution. There are simply too many. The Standalone Installation of Linuxbrew is my solution to this problem. The glibc formula provides an up-to-date glibc regardless of your distribution.\n. I agree! It is cool stuff. That's exactly how I plan to build bottles, using the linuxbrew-standalone Docker image. I just need to get it rolled into a CI system.\n. > If not we need to build a bottle for each dependency prior to building the main package\nThat's the approach that Homebrew/Homebrew takes. For Linuxbrew I added a wee undocumented hack:\nexport HOMEBREW_BUILD_BOTTLE=dependencies\nSee https://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-bottle/Dockerfile#L11\nand https://github.com/Homebrew/linuxbrew/blob/455e3b814e1b8226dc20548217d205582a1323b7/Library/Homebrew/formula_installer.rb#L360\n. > happy to give a hand with CI if you need\nHappy to accept a PR! I'm pretty busy writing up my thesis proposal, so you can expect delays in my responses and in merging, but I am interested and will do my best.\nWhich CI were you thinking? The options (that I know of) are Jenkins, Travis and Circle. BrewTestBot uses Jenkins. Linuxbrew/Homebrew-science uses Travis. @iggyvolz offered to help set up a Linuxbrew BrewtTestBot on a Jenkins machine.\n. No worries. I may not be able to seriously look into this until after my comprehensive exams, which are end of July.\n. Is it installing the dependencies from source? A bottle includes only that package and does not include its dependencies.\n. I've got a Raspberry Pi. I'm going to start bottling for arm-linux. Should the default HOMEBREW_PREFIX for bottles be /home/pi/.linuxbrew or /usr/local?\nThe biggest benefit of /home/pi/.linuxbrew is that it's completely independent of the rest of the system.\nThe biggest benefit of /usr/local is that it's the same as Homebrew.\n. It is only a default, but it's a default that matters a bit more than usual, because bottles are compiled for a particular prefix, and if the bottle is not relocatable, it can only be installed in that prefix.\n. My biggest reservation about installing libraries in /usr/local/lib is that they may mess up system executables installed in /usr/bin if they load the wrong libraries. There's no risk of that if they're installed in /home/pi/.linuxbrew/lib.\n. I have a special undocumented hack to deal with that.\nsh\nexport HOMEBREW_BUILD_BOTTLE=dependencies\nSee https://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-bottle/Dockerfile#L4\n. It checks that you have both patchelf and glibc installed, or it'll refuse to use the bottle and build from source instead. You can use --force-bottle to override. See\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/formula_installer.rb#L85\n. You can build custom bottles specific for your Gentoo installation of the toolchain (binutils, glibc and gcc) and use those on other Gentoo systems.\n. When you install a bottle, as long as you have patchelf and glibc installed, it handles setting the interpreter and changing the RPATH for you. Any formula marked as cellar :any should work. Note that ruby is not cellar :any, so it is not expected to work. :grimacing:\n. It can be installed by a bottle, but only to the HOMEBREW_PREFIX of /home/linuxbrew/.linuxbrew.\n. Cool. Yes. Travelling Ruby looks like it would be very useful to bootstrapping Linuxbrew.\n. Cool. I like the idea. Modifying each formula is unfortunately the most straightforward tack, like so:\nruby\nbottle do\n  cellar :any\n  root_url \"https://your.server/bottles\"\n  sha256 \"\u2026\" => :x86_64_linux\nend\nIf you wanted to try hacking Linuxbrew to avoid needing to modify each formula, change the default root_url over here https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/software_spec.rb#L307\nand then you'll have to hack up the logic to disable needing the sha256. That may be tricky.\n. I've just discovered that it is possible to override the bottles in your own fork of Homebrew using https://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/hooks/bottles.rb\nI don't know anything about this mechanism other than it's intended for your purpose.\n. I had planned on building bottles on the sjackman/linuxbrew-standalone Docker image using the glibc installed by Homebrew (2.19). An alternative plan would be to build the bottles on an older distribution. The compiled bottles should work on Linuxbrew Standalone, but should also work on older systems. The dependencies used from the host system should be glibc and libstdc++. All the other dependencies should be provided by Linuxbrew. That way perhaps Linuxbrew users could use bottles without having to install glibc and gcc (for libstdc++).\n| Distro | glibc |\n| --- | --- |\n| Linuxbrew | 2.19 |\n| Ubuntu 14 | 2.19 |\n| Ubuntu 12 | 2.15 |\n| Ubuntu 10 | 2.11.1 |\n| Ubuntu 8 | 2.3.6 |\n| Ubuntu 6 | 2.3.2 |\n| CentOS 7 | 2.17 |\n| CentOS 6 | 2.12 |\n| CentOS 5 | 2.5 |\n| CentOS 4 | 2.3.4 |\n. > what do we do about apps that hardcode information at build time, like the local lisp path from the emacs configure step:\nHomebrew solves this problem by installing to a fixed prefix /usr/local. Linuxbrew on the other hand installs by default to ~/.linuxbrew, which is a different path for each person. One solution is to install to a fixed prefix like /usr/local or /opt/linuxbrew or /home/linuxbrew/.linuxbrew. Note that this only affects formula that store hard-coded paths in the binary executable. If that path is in a text file, Homebrew knows how to edit that config file for you when the bottle is installed. Formula marked with cellar :any do not have any paths hardcoded in binary executables and can be bottle for Linuxbrew. Roughly half (1870 / 3472) of formula are cellar :any.\n. The dependencies of glibc are bottled: zlib binutils linux-headers\nThe dependencies of gcc are bottled: gmp isl libmpc mpfr\nglibc and gcc themselves are not yet bottled, due to them not being cellar :any.\n. I'm manually bottling a few key formula, particularly formula that are common dependencies and formula that take a long time to build. I'm using sjackman/linuxbrew which is running Ubuntu 14.04.3 LTS, glibc 2.19 and gcc 4.8.4.\n. Until I figure out how to bottle gcc, I'm going to bottle up libgcc_s.so.1 and libstdc++.so.6. These libraries are normally provided by gcc. On Debian/Ubuntu, these packages are called libgcc1 and libstdc++6 respectively. I was thinking of putting them in the same package, perhaps called libgcc.\n. I've bottled GCC for Linuxbrew! I'm very excited by this feat. With both glibc and gcc easily installable by users, we've nearly achieved the desired portable bottles for Linuxbrew. That's great progress since this ticket was opened almost a year ago. Now we need to get Linux bottles building automatically on a CI system, such as Travis CI or Circle CI, and uploaded to BinTray. See https://github.com/Homebrew/homebrew/issues/48832\n. Yes, it is! I may not need to package these libraries separately, since they're included in the gcc bottle.\n. I wish I could bottle glibc, then we wouldn't need a host compiler at all to bootstrap Linuxbrew, but glibc doesn't like to be moved to a different directory once it's installed.\n. Hi, Izaak. brew install gcc will install the GCC bottle. It will pull in glibc and build it from source if your host system's GLIBC is older than 2.19.\n. Here's the .travis.yml for Linuxbrew.\n. We're awfully close, but not quite there, to having Linuxbrew bottles built automatically. See https://github.com/Homebrew/homebrew/issues/48832\nTravis CI is looking into having bottles built securely in pull requests.\nCircle CI already supports uploading artifacts from pull requests. I'm not sure if it's secure. Homebrew/Linuxbrew does not yet have support in its brew test-bot script for Circle CI.\nCurrently bottles are built by hand by me on the Docker image sjackman/linuxbrew, which is running Ubunty Trusty.\nBuilding a bottle for cmake is a great idea. I'll get on it.\n. I manually deleted the file Cellar/cmake/3.4.3/share/cmake/Modules/CPack.OSXScriptLauncher.in which was a Mach-O (Mac OS) executable and made patchelf unhappy.\nThanks for the happy comment! Compliments are always well received.\n. I also had to sudo apt-get remove libidn11-dev to remove the libidn dependency of cmake. The alternative would be to add a libidn dependency to cmake.\n. I've bottled cmake for Linuxbrew! See ff46c18\n. That would would be helpful. Thanks.\nOne major limitation to bottling on Linuxbrew is that the formula must be cellar :any or cellar :any_skip_relocation. If it's not, that means it doesn't like to built for one directory, and then moved to another directory. =/ About half the formula are cellar :any, and half aren't.\nSometimes it's a false positive. For example, with binutils and gcc neither of them are cellar :any, but I tested moving them, and they both work just fine.\n. Yes, I agree entirely.\n. > OpenSSL? Not relocatable?\nSadly, no. It needs to know where the certs file lives, by default at $PREFIX/etc/openssl/cert.pem.\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/openssl.rb#L156\n. > Any chance of a bottled ruby and dependencies?\nPerhaps, yes. If not with the standard ruby, then maybe with Traveling Ruby.\n. > What about a curl bottle (seems to work in my tests) and a openldap bottle?\nSure. Please remind me on Monday if I forget.\n\nopenldap bottle\n\nI can't, because it's in homebrew/dupes, and I don't have commit permissions there.\n\nmpich Tested and seems to work\n\nI'm going to stick to core dependencies and cellar :any stuff for now. Other formula are going to have to wait until we have a proper build infrastructure set up for Linuxbrew on Travis or Circle.\n. > What about a curl bottle (seems to work in my tests) and a openldap bottle?\nI tried to bottle curl, but unfortunately it's not cellar :any on Linux. On Linux it reads the file cert.pem from the location $HOMEBREW_PREFIX/etc/openssl/cert.pem. If you install the bottle on a system with a different Linuxbrew prefix, it'll give an error that it can't find cert.pem. It may be possible to fix this issue with some creative thinking, but editing the user's .curlrc or instructing them to set the environment variable CURL_CA_BUNDLE. I'm not super keen though on distributing a curl bottle that doesn't work unless a particular environment variable is set. The fix also has to work for libcurl, which is used for by git, for example.\n. > Do you have any insight? Should I open an issue?\nThat should work. Open an issue. I think I noticed that a formula has to have a bottle do section for that to work, although I don't believe that was the case in the past.\n. > What about a curl bottle (seems to work in my tests) and a openldap bottle?\nIt may be possible to bottle curl by configuring with --without-ca-bundle, and then letting openssl find the cacert.pem file, while openssl is still built from source. If we try to bottle openssl, we'll run into the same problem. Setting the environment variable SSL_CERT_FILE may fix it.\n. @iggyvolz Care to submit a PR to fix this one?\n. Great. Thanks, Iggy.\n. Please run brew gist-logs llvm --with-clang and post the gist URL\n. This error makes it look like libc++ is being built for Mac. Is it possible to build libc++ for Linux?\nhttps://gist.github.com/anonymous/804b8e2499ac23d9d652#file-04-make-L147-L150\n+ /home/user/wreed/.linuxbrew/Cellar/llvm/HEAD/bin/clang algorithm.o bind.o chrono.o condition_variable.o debug.o exception.o future.o hash.o ios.o iostream.o locale.o memory.o mutex.o new.o optional.o random.o regex.o shared_mutex.o stdexcept.o string.o strstream.o system_error.o thread.o typeinfo.o utility.o valarray.o -arch i386 -arch x86_64 -o libc++.1.dylib -dynamiclib -nodefaultlibs -current_version 1 -compatibility_version 1 -install_name /usr/lib/libc++.1.dylib -lSystem -Wl,-unexported_symbols_list,libc++unexp.exp /usr/lib/libc++abi.dylib -Wl,-reexported_symbols_list,libc++abi.exp -Wl,-force_symbols_not_weak_list,notweak.exp -Wl,-force_symbols_weak_list,weak.exp -nostdinc++ -std=c++11 -fstrict-aliasing -Wall -Wextra -Wshadow -Wconversion -Wpadded -Wstrict-aliasing=2 -Wstrict-overflow=4\nclang: error: no such file or directory: '/usr/lib/libc++abi.dylib'\nmake: *** [install] Error 1\nmake: Leaving directory `/tmp/llvm20150429-6626-1su4b6m/projects/libcxx'\n. I'll guess that the default target is Darwin, and you have to pass some sort of configure option to target Linux.\n. I mean the formula has to be edited to change how libc++ is configured.\n. You can try reading these articles:\n- https://solarianprogrammer.com/2013/01/17/building-clang-libcpp-ubuntu-linux/\n- http://stackoverflow.com/questions/25840088/how-to-build-libcxx-and-libcxxabi-by-clang-on-centos-7\n- http://stackoverflow.com/questions/17917731/what-is-the-sanctioned-way-to-build-libc-for-clang-on-linux\n. Please test the pull request #423.\n. Fixed by #423.\n. To be consistent the commit message should start with cmake: rather than Cmake,  note the case  and colon.\n. Please also include \"for Linuxbrew\" in the first line of the commit message.\n. Thanks, Iggy.\n. Thanks, Iggy.\n. Hi, Saket. Would you like to fix up this PR?\n. Thanks, Saket.\n. Thanks for your contribution.\n. Thanks for your contribution, @pgkos.\n. I had thought that this issue was already resolved by a previous pull request. It would seem not. I'm on vacation until the new year. Please bump this thread after then. Sorry for the delay.\n. This issue is resolved by 519dc5ff.\n. The TZ environment variable has a funny format. See http://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html\nIt's looking for the file\nsh\n`brew --prefix glibc`/etc/localtime\nwhich doesn't exist. Try instead export TZ=:/etc/localtime\nsh\n$ date\nWed May  6 00:32:21 UTC 2015\n$ TZ=PST8PDT date\nTue May  5 17:32:26 PDT 2015\n$ TZ=:/etc/localtime date\nTue May  5 17:32:38 PDT 2015\n. The glibc postinstall should probably create a $(brew --prefix glibc)/etc/localtime file.\n. Even easier workaround:\nsh\nln -s /etc/localtime `brew --prefix glibc`/etc/\n. Fixed by c569aa8d12cb6566b70968fb5f82b1c272edecf6\n. Thanks for the bug report, Xu.\n. I definitely have this problem as well. Could be related? I'm not sure.\n. I was hopeful, but unfortunately TZ is not the issue.\n$ export TZ=:/etc/localtime\n$ cmake -E tar xf /home/sjackman/.cache/Homebrew/hello-2.10.tar.gz\nCMake Error: Problem with archive_write_finish_entry(): Can't restore time\nCMake Error: Problem extracting tar: /home/sjackman/.cache/Homebrew/hello-2.10.tar.gz\n. I just ran into this issue again trying to compile homebrew/science/salmon. I'd sure love to fix it. See https://github.com/COMBINE-lab/salmon/issues/10\n. My guess, and this is a long shot, is that it's a bug in the tar library of cmake, that's made evident because my system at work has up-to-date Linux headers and glibc but is running an eight-year-old Linux kernel (CentOS 5.10). I can upgrade everything with Linuxbrew except the running kernel. I've seen this situation show bugs before when the software uses compile time kernel feature checks like HAVE_PIPE2 when it should be using a run time check, namely checking whether the call to pipe2 fails with ENOSYS.\n. No, I'm afraid there's been no progress. @xu-cheng Did you find a resolution to this issue?\n@rob-p I'll see if I can reproduce it in a Docker image.\n. > virtual memory exhausted: Cannot allocate memory\nI was wondering when that would happen! It seems a t2.micro is too small to compile Salmon. =)\n. Alas, no, it's ext3.\n. I think this issue may be related to the kernel version. The exact same cmake executable from the bottle cmake-3.4.3.x86_64_linux.bottle.tar.gz works on CentOS 6.6 with Linux 2.6.32, but does not work on CentOS 5.11 with Linux 2.6.18. This is the same installation of standaloneLinuxbrew, so exact same libraries and everything else.\n. Can anyone else experiencing this issue please report your distribution and kernel version? brew config\n. I believe this issue's root cause is an upstream cmake bug related to building with a newer set of Linux kernel headers and running on an older kernel.\n. Woops. Thanks for the bug report, Robert.\n. Thanks for the bug report, Jeff.\n. Thanks for your contribution, Peter, but please read CONTRIBUTING.md.\n. Please run and report the output of\nbrew gist-logs tcl-tk\nand\nbrew gist-logs tcl-tk --without-tk\n. https://gist.github.com/anonymous/29db55bcf71028c1f697#file-06-make-L7-L10\n/usr/bin/gcc-4.6 -c -O2 -Os -w -pipe -march=core2 -pipe -m64 -isystem/home/shout/.linuxbrew/include -Wall -fPIC -DBUILD_tk -I/tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../unix -I/tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../generic -I/tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../bitmaps -I/tmp/tcl-tk20150723-7015-2xj6k9/tcl8.6.4/generic -I/tmp/tcl-tk20150723-7015-2xj6k9/tcl8.6.4/unix  -DPACKAGE_NAME=\\\"tk\\\" -DPACKAGE_TARNAME=\\\"tk\\\" -DPACKAGE_VERSION=\\\"8.6\\\" -DPACKAGE_STRING=\\\"tk\\ 8.6\\\" -DPACKAGE_BUGREPORT=\\\"\\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIMITS_H=1 -DUSE_THREAD_ALLOC=1 -D_REENTRANT=1 -D_THREAD_SAFE=1 -DHAVE_PTHREAD_ATTR_SETSTACKSIZE=1 -DHAVE_PTHREAD_ATFORK=1 -DTCL_THREADS=1 -DMODULE_SCOPE=extern\\ __attribute__\\(\\(__visibility__\\(\\\"hidden\\\"\\)\\)\\) -DHAVE_HIDDEN=1 -DTCL_CFG_DO64BIT=1 -DHAVE_CAST_TO_UNION=1 -DTCL_SHLIB_EXT=\\\".so\\\" -DNDEBUG=1 -DTCL_CFG_OPTIMIZED=1 -D_LARGEFILE64_SOURCE=1 -DTCL_WIDE_INT_IS_LONG=1 -DHAVE_SYS_TIME_H=1 -DTIME_WITH_SYS_TIME=1 -DHAVE_INTPTR_T=1 -DHAVE_UINTPTR_T=1 -DHAVE_PW_GECOS=1 -DXKEYCODETOKEYSYM_IS_DEPRECATED=1      -DTCL_NO_DEPRECATED  -DUSE_TCL_STUBS /tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../generic/ttk/ttkStubLib.c\nIn file included from /tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../generic/ttk/ttkStubLib.c:9:0:\n/tmp/tcl-tk--tk20150723-7015-1vchnog/tk8.6.4/unix/../generic/tk.h:96:25: fatal error: X11/Xlib.h: No such file or directory\ncompilation terminated.\n. My mistake. Can you report instead\nbrew install tcl-tk --without-tk\nbrew gist-logs tcl-tk\n. Oh, this might work for you:\nsh\nbrew install git --without-tcl-tk\n. No worries. Glad that you got it working. I may in the future make git --without-tcl-tk the default.\n. brew install tcl-tk if you have X11 installed, otherwise brew install tcl-tk --without-tk\n. Yes, this feature is supported. I'm curious though. What's the advantage of centralizing the Homebrew source code, and why wouldn't each user install their own in their home directory?\nHere's how a user would set up their own cellar of software:\nsh\n~ \u276f\u276f\u276f which brew\n/usr/local/bin/brew\n~ \u276f\u276f\u276f brew --cellar\n/usr/local/Cellar\n~ \u276f\u276f\u276f mkdir ~/bin ~/Cellar\n~ \u276f\u276f\u276f ln -s /usr/local/bin/brew ~/bin/\n~ \u276f\u276f\u276f PATH=$HOME/bin:$PATH\n~ \u276f\u276f\u276f which brew\n/Users/sjackman/bin/brew\n~ \u276f\u276f\u276f brew --cellar\n/Users/sjackman/Cellar\n. See the Homebrew source code here: https://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/config.rb#L44-L48\n. You could try sending a pull request for that feature upstream to https://github.com/Homebrew/homebrew\n. I try not to make significant changes to Linuxbrew that aren't also found in Homebrew.\n. Hi, @ntkme Does this patch work around some error message that you're seeing?\n. On which Linux distribution did you see that error?\n. Can you please report the output of brew gist-logs fontconfig?\n. https://gist.github.com/anonymous/b1aa70bf6a0530737221#file-02-make-L316-L326\ndocbook2man local-fontconfig-user.sgml && \\\nrm -f manpage.*\ngrep: character class syntax is [[:space:]], not [:space:]\ngrep: character class syntax is [[:space:]], not [:space:]\njw: There is no frontend called \"/docbook/utils-0.6.14/frontends/docbook\".\nMakefile:1310: recipe for target 'fonts-conf.5' failed\nmake[2]: *** [fonts-conf.5] Error 2\nmake[2]: *** Waiting for unfinished jobs....\nmake[2]: Leaving directory '/tmp/fontconfig20150511-8139-poipx2/fontconfig-2.11.1/doc'\nMakefile:1167: recipe for target 'install' failed\nmake[1]: *** [install] Error 2\n. Do you have docbook2x installed? Does installing docbook2x help?\nsh\nwhich -a docbook2man\ndocbook2man --version\nbrew list --versions docbook2x\nbrew install docbook2x fontconfig\n. Based on the error message quoted above I was guessing that the incorrect usage of grep was in docbook2man. I couldn't find this incorrect usage of grep anywhere in fontconfig. This issue looks like an upstream bug to me. It'd be better to resolve it upstream if possible.\n. Please report\nsh\nwhich -a docbook2man\ndocbook2man --version\n. Please report this bug upstream to fontconfig and post a link to the issue here. It would be better fixed upstream in fontconfig than hacked around in Linuxbrew. Thanks for identifying the workaround though.\n. It's possible that the bug's in a dependency of fontconfig, but maybe the fontconfig developers can help figure out where the true cause lies.\n. No, Homebrew/Linuxbrew has no plans to support capital letters in formula names.\n. Use git clone to install Linuxbrew unattended:\nsh\ngit clone https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew\n. Iggy's suggestion fixes the linker error:\ndiff\ndiff --git a/Library/Formula/readline.rb b/Library/Formula/readline.rb\nindex 472f3f6..8f095cd 100644\n--- a/Library/Formula/readline.rb\n+++ b/Library/Formula/readline.rb\n@@ -58,7 +58,7 @@ class Readline < Formula\n         return 0;\n       }\n     EOS\n-    system ENV.cc, \"test.c\", \"-lreadline\", \"-o\", \"test\"\n+    system ENV.cc, \"test.c\", \"-lreadline\", \"-ltermcap\", \"-o\", \"test\"\n     assert_equal \"Hello, World!\", pipe_output(\"./test\", \"Hello, World!\\n\").strip\n   end\n end\nI get the following odd runtime error after:\n```\n$ brew test readline -v\nTesting readline\n==> /usr/bin/gcc test.c -lreadline -ltermcap -o test\n==> ./test\nError: readline: failed\n<\"Hello, World!\"> expected but was\n<\"test> Hello, World!\">.\ndiff:\n- Hello, World!\n+ test> Hello, World!\n? ++++++\n```\nbut I suspect that's a red herring of some odd Mac/Linux difference, and readline is in fact working.\n. I see the same gdb issue on CentOS 5.10 Linux 2.6.18:\n$ gdb\nCannot create pipe for readline\n. It's possible that GDB is calling pipe2 and failing because the kernel doesn't implement that syscall. This issue also affected xz. See #348 and #353.\n. I suspect that this is an upstream bug.\n. Yep, that's exactly what's happening. See\nhttps://github.com/bminor/binutils-gdb/blob/eb704cb6566cc4594099f49f8a215bab4fa7bbb6/gdb/common/filestuff.c#L385-L386\nThe same workaround as for xz should work for gdb, but this issue should be resolved upstream.\n. @xu-cheng Can you open an issue upstream with gdb? The issue is that glibc implements the pipe2 syscall, but the Linux kernel does not.\n. gdb should fall back to pipe if pipe2 is not available at runtime.\n. No, I have not tested the workaround. Please do. Thanks, Iggy.\n. Try brew install ncurses and symlink libtermcap.so to libncurses.so.\n. See https://github.com/Homebrew/homebrew-dupes/pull/422\n. Yes, you can open a separate issue for this brew test readline issue.\n. Perhaps, but I'm disinclined to replace all of share/doc/homebrew/* with stubs pointing to upstream Homebrew. I'm not so concerned that all the documentation be carefully edited to replace Mac terminology with Linux terminology and replace Homebrew links with Linuxbrew links. I'm just not sure it's worth the effort. I'm inclined to do it on a case-base-case basis if a particular piece of documentation causes extreme confusion and havoc with users documented by issues opened by users.\n. Fixed.\n. Yep, looks like it. What was the exact command that you were attempting to run? Also report the output of brew config\n. I'm not able to replicate this issue, which makes it difficult to troubleshoot. Can you please report the output of brew install hello --cc=gcc-4.9?\n. That is particularly weird.\n. Does brew upgrade --cc=gcc4.9 work?\nIt looks as though the handling of HOMEBREW_CC has changed in some odd way.\n. That code is specific to --env=super, which Linuxbrew does not use nor support. See https://github.com/Homebrew/linuxbrew/pull/266 which adds superenv support to Linuxbrew. The default on Linuxbrew is --env=std.\n. Merged today. Thanks, Jack.\n. See CONTRIBUTING.md\n. Yes, you can delete it. Set\nexport HOMEBREW_LOGS=~/.local/log\n. @dpc @mikaela I'm thinking of changing the default log directory from ~/Library/Logs/Homebrew to something else for Linuxbrew. I'd like to use an existing standard of where log files should go in a Linux user's home directory. Any thoughts? cc @Homebrew/science Your input? Please unsubscribe from this issue if you don't use Linuxbrew.\nSee this Stackoverflow question: http://stackoverflow.com/questions/25897836/where-should-i-write-a-user-specific-log-file-to-and-be-xdg-base-directory-comp\nI'm thinking ~/.cache/Homebrew/Logs\nSound good?\nhttp://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n$XDG_CACHE_HOME defines the base directory relative to which user specific non-essential data files should be stored.\n. See #278 \"Log location on Linux should be moved to be related to the linuxbrew folder\"\n. Please report brew gist-logs sqlite and read https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md\n. https://gist.github.com/anonymous/dcec5ec575a0dc9348c8#file-02-make-L9-L14\n\nlibtool: compile:  /local/mnt/workspace/naseer/.linuxbrew/bin/gcc-4.9 -DPACKAGE_NAME=\\\"sqlite\\\" -DPACKAGE_TARNAME=\\\"sqlite\\\" -DPACKAGE_VERSION=\\\"3.8.10.1\\\" \"-DPACKAGE_STRING=\\\"sqlite 3.8.10.1\\\"\" -DPACKAGE_BUGREPORT=\\\"http://www.sqlite.org\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"sqlite\\\" -DVERSION=\\\"3.8.10.1\\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\\\".libs/\\\" -DHAVE_FDATASYNC=1 -DHAVE_USLEEP=1 -DHAVE_LOCALTIME_R=1 -DHAVE_GMTIME_R=1 -DHAVE_DECL_STRERROR_R=1 -DHAVE_STRERROR_R=1 -DHAVE_READLINE=1 -DHAVE_POSIX_FALLOCATE=1 -I. -isystem/local/mnt/workspace/naseer/.linuxbrew/include -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_COLUMN_METADATA -D_REENTRANT=1 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE -Os -w -pipe -march=core2 -c sqlite3.c -o sqlite3.o >/dev/null 2>&1\n/bin/sh ./libtool --tag=CC   --mode=link /local/mnt/workspace/naseer/.linuxbrew/bin/gcc-4.9 -D_REENTRANT=1 -DSQLITE_THREADSAFE=1  -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE -Os -w -pipe -march=core2  -L/local/mnt/workspace/naseer/.linuxbrew/lib -Wl,-rpath,/local/mnt/workspace/naseer/.linuxbrew/lib -o sqlite3 shell.o sqlite3.o -lreadline -lcurses  -ldl -lpthread \nlibtool: link: /local/mnt/workspace/naseer/.linuxbrew/bin/gcc-4.9 -D_REENTRANT=1 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE -Os -w -pipe -march=core2 -Wl,-rpath -Wl,/local/mnt/workspace/naseer/.linuxbrew/lib -o sqlite3 shell.o sqlite3.o  -L/local/mnt/workspace/naseer/.linuxbrew/lib -lreadline -lcurses -ldl -lpthread\nsqlite3.o: file not recognized: File truncated\ncollect2: error: ld returned 1 exit status\nmake: *** [sqlite3] Error 1\n. So weird. I am able to reproduce this issue. Oddly it built just fine for me on 2015-05-11, but doesn't build now, and nothing has changed for this formula since 2015-05-10.\n. This time I got a different error. Perhaps it's due to a race condition that can be resolved with ENV.deparallelize.\n/bin/sh ./libtool --tag=CC   --mode=link /gsc/btl/linuxbrew/bin/gcc-4.9 -D_REENTRANT=1 -DSQLITE_THREADSAFE=1  -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE -Os -w -pipe -march=core2  -L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib -o sqlite3 shell.o sqlite3.o -lreadline -lcurses  -ldl -lpthread \nlibtool: link: /gsc/btl/linuxbrew/bin/gcc-4.9 -D_REENTRANT=1 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE -Os -w -pipe -march=core2 -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath -Wl,/gsc/btl/linuxbrew/lib -o sqlite3 shell.o sqlite3.o  -L/gsc/btl/linuxbrew/lib -lreadline -lcurses -ldl -lpthread\ngcc-4.9: error: sqlite3.o: No such file or directory\n. Oddly, this problem does not seem to affect Mac OS. At least it built successfully for me five times in a row.\n. Thanks for the bug reports. Fixed.\n. https://gist.github.com/anonymous/c0cedb0cb3a890086bda#file-05-make-L129-L133\nlibtool: install: (cd /tmp/subversion20150515-18733-1fnsazx/subversion-1.8.13/subversion/libsvn_delta; /bin/sh \"/tmp/subversion20150515-18733-1fnsazx/subversion-1.8.13/libtool\"  --tag CC --silent --mode=relink /local/mnt/workspace/naseer/.linuxbrew/bin/gcc-4.9 -Os -w -pipe -march=core2 -pthread -DNDEBUG -L/local/mnt/workspace/naseer/.linuxbrew/lib -Wl,-rpath,/local/mnt/workspace/naseer/.linuxbrew/lib -L/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib -rpath /local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib -version-info 0 -Wl,--no-undefined -o libsvn_delta-1.la cancel.lo compat.lo compose_delta.lo debug_editor.lo default_editor.lo deprecated.lo depth_filter_editor.lo editor.lo path_driver.lo svndiff.lo text_delta.lo version.lo xdelta.lo ../../subversion/libsvn_subr/libsvn_subr-1.la -L/local/mnt/workspace/naseer/.linuxbrew/Cellar/apr-util/1.5.4_1/libexec/lib -laprutil-1 -L/local/mnt/workspace/naseer/.linuxbrew/Cellar/apr/1.5.2/libexec/lib -lapr-1 -lz )\n/usr/bin/ld: cannot find -lsvn_delta-1\ncollect2: error: ld returned 1 exit status\nlibtool:   error: error: relink 'libsvn_ra_serf-1.la' with the above command before installing it\nmake: *** [install-serf-lib] Error 1\n. I also see the following error. Note that GSSAPI is wrong.\n==> Verifying subversion--serf-1.3.8.tar.bz2 checksum\ntar xf /home/sjackman/.cache/Homebrew/subversion--serf-1.3.8.tar.bz2\n==> /gsc/btl/linuxbrew/opt/scons/bin/scons PREFIX=/gsc/btl/linuxbrew/Cellar/subversion/1.8.13/libexec/serf GSSAPI=/usr CC=/gsc/btl/linuxbrew/bin/gcc-4.9 CFLAGS=-Os -w -pipe -march=core2 LINKFLAGS=-L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib OPENSSL=/gsc/btl/linuxbrew/opt/openssl APR=/gsc/btl/linuxbrew/opt/apr APU=/gsc/btl/linuxbrew/opt/apr-util\nscons: Reading SConscript files ...\n/bin/sh: /usr: is a directory\n. Please report the exact command that you're attempting to run and the full log including the error message. If the log is long, you can use gist to post the log.\n. Please report brew list subversion |grep serf\n. https://gist.github.com/anonymous/f2ce7f29eb9a1238800e#file-02-scons-L10\nInstall file: \"libserf-1.so.1.3.0\" as \"/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so.1.3.0\"\n. A workaround should be\nln -s /local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so.1.3.0 /local/mnt/workspace/naseer/.linuxbrew/lib\n. Or brew install subversion --without-serf\n. Please report brew list subversion |grep serf\n. > libserf-1.so.1.3.0 was already symlinked\nIf it's found in libexec, it should not have been symlinked to $HOMEBREW_PREFIX/lib.\n. I think a better solution is to change serf_prefix to prefix.\nruby\n    serf_prefix = OS.mac? ? libexec+\"serf\" : prefix\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/subversion.rb#L73\n. I really like cpanminus to install PERL packages.\nsh\nbrew install cpanminus\ncpanm SVN::Core\nexport PERL5LIB=~/perl5/lib/perl5\ngit svn clone \u2026\n. Try brew install expat\n. You'll have to tell cpanm where to look for the expat headers/libraries. I'm not familiar with that.\n. ~~I haven't found that ENV.deparallelize was necessary. What error message did you see?~~\nJust read #408.\n. Thanks for the patch!\n. Thanks for your contribution, Naseer!\n. No worries. Happy to help.\n. Okay. The fix, as it suggest, is for the glibc package to install the debug info for ld-linux-x86-64.so.2 or to not strip ld-linux-x86-64.so.2. I'm happy with either solution. The debug info in separate files seems to be the more common on other distributions, which put those files in a separate package. Would you like to submit a PR for glibc?\n. > At the same time, I don't know the proper steps to reinstall glibc on a standalone linuxbrew.\nNeither do I! I haven't tackled upgrading core system libraries yet. This issue will have to wait for a bit.\n. The work around would be to rebuild glibc and copy over the debugging info to your current installation manually.\n. Please report which -a irb. If that fails, please install whichever host package includes the irb executable. Alternatively, you can try installing ruby using Linuxbrew brew install ruby.\n. Ruby 1.8.6 or newer. See http://brew.sh/linuxbrew/\nIt may be possible to work around this issue by creating an a executable file named irb in your PATH. e.g.\nsh\necho false >~/bin/irb\nchmod +x ~/bin/irb\nPATH=~/bin:$PATH\n. I haven't tried it, but there's also Traveling Ruby: http://phusion.github.io/traveling-ruby/\n. I'd recommend install Ruby somewhere else other than ~/.linuxbrew and then symlink ruby into ~/.linuxbrew/bin/ruby. I've done this myself to bootstrap systems without ruby. Then install ruby using Linuxbrew, and you can delete the bootstrap ruby.\nsh\nbrew install ruby\nbrew link --overwrite ruby\n. Glad to hear it, Izaak!\n. Hi, Pramod. I'm afraid that I don't have the time to troubleshoot individual formula. If you're able to find a fix to this issue, please submit a PR.\n. I've just merged Homebrew into Linuxbrew, which included a change to this formula. Did it resolve your issue?\n. This issue may be resolved by #846.\n. Changes from Homebrew are merged into Linuxbrew on a weekly basis. See CONTRIBUTING.md\n. Due to time constraints I'm unable to troubleshoot individual formula. Pull requests that resolve the issue are welcome.\n. The system compiler must be named gcc-4.x. What version is your system compiler? Please report gcc --version and ls /usr/bin/gcc-4.?\n. See also Create symlinks for gcc\n. On Mac OS /usr/bin/gcc is actually clang emulating GCC 4.2.1. It's very weird. Disabling that logic in Homebrew has been more trouble than it's worth. Nice distributions like Ubuntu and Debian already contain files named appropriately, gcc-4.9.\n. Have you been able to successfully compile and install clang using Linuxbrew? I haven't. Did you use brew install llvm --with-clang? See #382\n. If you did have /usr/bin/clang installed, I think it would be the default compiler already, but I haven't tested that.\n. > My $CC says clang and $CXX clang++, but they aren't used.\nCC and CXX are ignore by Homebrew. Use HOMEBREW_CC=clang instead. There is no HOMEBREW_CXX. The C++ compiler is inferred from the C compiler. The value of /usr/bin/cc is used as the default compiler (I believe).\n. > Creating the links worked. Seems like something that linuxbrew could do\nYes, I agree. I just haven't got around to it. =/\n. Great. Glad to hear it.\n. I've added the flex dependency, but not the patch, as it sounds as though it's fixed upstream.\n. Thanks for your contribution, Piotr.\n. Merged. Thanks for your contribution, Piotr.\n. Please report the exact error message. You can use brew gist-logs cgdb\n. There's no error message in that logfile about readline. Only flex.\nhttps://gist.github.com/anonymous/4a1a3a811617708cdbea#file-01-configure-L136\nconfigure: error: Please install flex before installing\n. https://gist.github.com/anonymous/8382193e9ec614a073f5#file-01-configure-L142-L146\nchecking version of installed readline library... configure: WARNING: Could not test version of installed readline library.\nconfigure: error: CGDB requires GNU readline 5.1 or greater to link.\n  If you used --with-readline instead of using the system readline library,\n  make sure to set the correct readline library on the linker search path\n  via LD_LIBRARY_PATH or some other facility.\n. Were you able to resolve this issue without needing the patch, Piotr?\n. Yeah, this is a real issue, that libreadline.so should be linked against libcurses.so but isn't by default. See http://www.linuxfromscratch.org/lfs/view/6.6/chapter06/readline.html\nand http://lists.gnu.org/archive/html/bug-readline/2014-03/msg00008.html\nThe fix is\nmake install SHLIB_LIBS=-lcurses\n. Before:\n$ ldd /gsc/btl/linuxbrew/lib/libreadline.so.6\n    linux-vdso.so.1 (0x00007fff457fd000)\n    libc.so.6 => /gsc/btl/linuxbrew/lib/libc.so.6 (0x00002ba880bee000)\n    /gsc/btl/linuxbrew/Cellar/glibc/2.19/lib64/ld-linux-x86-64.so.2 (0x00002ba88078d000)\nAfter:\n$ ldd /gsc/btl/linuxbrew/lib/libreadline.so.6\n    linux-vdso.so.1 (0x00007fff051fd000)\n    libncursesw.so.5 => /gsc/btl/linuxbrew/lib/libncursesw.so.5 (0x00002b3ffeebb000)\n    libc.so.6 => /gsc/btl/linuxbrew/lib/libc.so.6 (0x00002b3fff106000)\n    /gsc/btl/linuxbrew/Cellar/glibc/2.19/lib64/ld-linux-x86-64.so.2 (0x00002b3ffea5a000)\n. Test out 07de187a1e0871263a36ab67fb170f39f92672fe and tell me how it goes.\n. A related issue, this hack for Lua should no longer be necessary: 8324fc6b477cee32f592bf12d82b849448811c3c\n. My best suggestion would be to try ln -sf /usr/bin/ruby /bio/linuxbrew/bin/ruby. It may or may not have worked, but it was worth a shot. It would be really nice of Linuxbrew if it were to curate a list of packages that if removed would very likely break everything very nicely. I believe Debian does this. A good start would be the dependencies of ruby and gcc.\n. The readline error is caused by https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/python3.rb#L118-L120\nThat line is also in python.rb, so I'm guessing it's innocuous.\n. It is looking is /usr/local/lib, but it's also looking in -L/bio/linuxbrew/lib.\n\n/bio/linuxbrew/bin/gcc-5 -pthread -shared -L/bio/linuxbrew/lib -Wl,-rpath,/bio/linuxbrew/lib -L/bio/linuxbrew/lib -Wl,-rpath,/bio/linuxbrew/lib -fno-strict-aliasing -Os -w -pipe -march=core2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -isystem/bio/linuxbrew/include build/temp.linux-x86_64-2.7/tmp/python20150531-39238-z87k0v/Python-2.7.10/Modules/_ssl.o -L/bio/linuxbrew/lib -L/usr/local/lib -L. -lssl -lcrypto -lpython2.7 -o build/lib.linux-x86_64-2.7/_ssl.so\n. build/lib.linux-x86_64-2.7/_ssl.so: undefined symbol: SSLv2_method\n\nCan you report the output of\nbrew list openssl\nnm -D /bio/linuxbrew/lib/libopenssl.so |grep SSLv2_method\n. My best guess is that Python is using the headers from your system's version of OpenSSL, but the libraries from the Linuxbrew version. It'll take some troubleshooting to sort out the mess. A work around is to remove either the system version of the Homebrew version of OpenSSL before compiling Python 3.\n. Yep, it's a problem. The Python build scripts do really nasty things adding /usr/lib and /usr/local/lib explicitly to the search path, when it should leave it up to the user. I'm afraid I don't have an easy solution for you. I believe that this is primarily an upstream bug. Perhaps you can open an issue with the Python development team.\nsuperenv could be a potential fix, because it would allow us to remove the nasty /usr/lib and /usr/local/lib search from the cc command line. See #266 \n. Thanks for the workaround, Cesar. That's a fine idea.\n. Ah, seems a good time to mention then that Dmitry @veprbl implemented superenv support for Linuxbrew in https://github.com/Homebrew/linuxbrew/pull/266 ages ago, but I haven't found the time to test it.\n. > The Linuxbrew python formula should be amended to add the brewed openssl include directory to CFLAGS.\n:+1: Yes, please!\n. Good question. The Docker build on Ubuntu works fine for me. https://registry.hub.docker.com/u/sjackman/linuxbrew-standalone/\nI'm going  to guess old versions of CentOS.\n. That seems like the right idea. Would you send that patch upstream to Python, Simon? I'd merge it in Linuxbrew as well if @tseemann or someone can confirm that it resolves this issue for them.\n. Thanks for the tip, Arman.\n. This issue should hopefully be fixed now. I'd appreciate if anyone that was affected by this issue can confirm that it is in fact fixed.\n. Yeah! Thanks for the feedback. Thanks should really go to @tdsmith, @tseemann and everyone else who helped troubleshoot this issue.\n. Thanks for the bug report, Lee.\n. Thanks for the bug report, Lee, and thanks for the helpful comment, Xu.\n. Thanks for this work, Piotr.\n@wreed4 @aportelli Can you test this pull request?\n. @wreed4 @aportelli Are you interested in testing this pull request?\n. Much better. Try something like the following. Note: untested and may have errors.\nruby\nlibcxx_includes = `g++ -Wp,-v -x c++ - -fsyntax-only </dev/null 2>&1`.each_line.select { |line|\n    path = Pathname.new line.strip\n    (path/\"cxxabi.h\").exist? || (path/\"bits/c++config.h\").exist?\n}\n. ruby\nlibcxx_includes = `g++ -Wp,-v -x c++ - -fsyntax-only </dev/null 2>&1`.each_line.map { |line|\n    Pathname.new line.strip\n}.select { |path|\n    (path/\"cxxabi.h\").exist? || (path/\"bits/c++config.h\").exist?\n}\n. @DoomHammer Can you please squash those four commits into a single commit?\n. @xu-cheng Would you please be able to review/test this pull request?\n. Rebase and squash.\nCheck out\n- https://help.github.com/articles/about-git-rebase/\n- https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit\n- http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n- https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n- https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged\n. No worries, Xu. Thanks anyway.\n. @DoomHammer Because this is a large-ish patch, before I merge it I'd like to wait for someone else to test it and report whether it works for them.\n. https://gist.githubusercontent.com/anonymous/0ef08880c408c08c1b07/raw/f08558dbd357776022fc589bcd4bddfedd3d1500/05.make\n[ 40%] Building CXX object lib/CMakeFiles/cxx.dir/__/src/stdexcept.cpp.o\ncd /var/tmp/llvm20150730-11187-19pyqq4/lib && /nfs/users/wayedt/.linuxbrew/Cellar/llvm/3.6.1/bin/clang++   -Dcxx_EXPORTS -Os -w -pipe -march=core2  -std=c++11 -fPIC -I/var/tmp/llvm20150730-11187-19pyqq4/include -I/var/tmp/llvm20150730-11187-co8wcr/llvm-3.6.1.src/projects/libcxx/include    -D__GLIBCXX__  -nostdinc++ -Wall -Werror=return-type -W -Wno-unused-parameter -Wwrite-strings -Wno-long-long -Wno-error -pedantic -D_DEBUG -UNDEBUG -fPIC -o CMakeFiles/cxx.dir/__/src/stdexcept.cpp.o -c /var/tmp/llvm20150730-11187-co8wcr/llvm-3.6.1.src/projects/libcxx/src/stdexcept.cpp\nIn file included from /var/tmp/llvm20150730-11187-co8wcr/llvm-3.6.1.src/projects/libcxx/src/stdexcept.cpp:22:\n/var/tmp/llvm20150730-11187-19pyqq4/include/cxxabi.h:308:23: error: no member named '__do_catch' in 'std::type_info'\n    return __pointee->__do_catch (thrown_type->__pointee, thr_obj, outer + 2);\n           ~~~~~~~~~  ^\n1 error generated.\nlib/CMakeFiles/cxx.dir/build.make:305: recipe for target 'lib/CMakeFiles/cxx.dir/__/src/stdexcept.cpp.o' failed\nmake[2]: *** [lib/CMakeFiles/cxx.dir/__/src/stdexcept.cpp.o] Error 1\n. That's good news. The patch looks good to me. I'll try to test it out in the next few days. Ping me if you haven't heard from me in a week.\n. I ran into this error:\n[ 62%] Linking CXX shared library ../../../lib/libc++.so\ncd /var/tmp/sjackman/llvm20150813-13752-p35m31/projects/libcxx/lib && /gsc/btl/linuxbrew/Cellar/cmake/3.3.0/bin/cmake -E cmake_link_script CMakeFiles/cxx.dir/link.txt --verbose=1\n/gsc/btl/linuxbrew/bin/g++-5  -fPIC -isystem/gsc/btl/linuxbrew/include -Os -w -pipe -march=core2 -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-maybe-uninitialized -Wnon-virtual-dtor -std=c++11 -ffunction-sections -fdata-sections -std=c++11 -nodefaultlibs  -L/gsc/btl/linuxbrew/lib -Wl,--dynamic-linker=/gsc/btl/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/gsc/btl/linuxbrew/lib -shared -Wl,-soname,libc++.so.1 -o ../../../lib/libc++.so.1.0 CMakeFiles/cxx.dir/__/src/memory.cpp.o CMakeFiles/cxx.dir/__/src/valarray.cpp.o CMakeFiles/cxx.dir/__/src/algorithm.cpp.o CMakeFiles/cxx.dir/__/src/chrono.cpp.o CMakeFiles/cxx.dir/__/src/optional.cpp.o CMakeFiles/cxx.dir/__/src/string.cpp.o CMakeFiles/cxx.dir/__/src/regex.cpp.o CMakeFiles/cxx.dir/__/src/typeinfo.cpp.o CMakeFiles/cxx.dir/__/src/locale.cpp.o CMakeFiles/cxx.dir/__/src/debug.cpp.o CMakeFiles/cxx.dir/__/src/iostream.cpp.o CMakeFiles/cxx.dir/__/src/utility.cpp.o CMakeFiles/cxx.dir/__/src/stdexcept.cpp.o CMakeFiles/cxx.dir/__/src/random.cpp.o CMakeFiles/cxx.dir/__/src/system_error.cpp.o CMakeFiles/cxx.dir/__/src/new.cpp.o CMakeFiles/cxx.dir/__/src/future.cpp.o CMakeFiles/cxx.dir/__/src/shared_mutex.cpp.o CMakeFiles/cxx.dir/__/src/exception.cpp.o CMakeFiles/cxx.dir/__/src/strstream.cpp.o CMakeFiles/cxx.dir/__/src/mutex.cpp.o CMakeFiles/cxx.dir/__/src/thread.cpp.o CMakeFiles/cxx.dir/__/src/ios.cpp.o CMakeFiles/cxx.dir/__/src/condition_variable.cpp.o CMakeFiles/cxx.dir/__/src/hash.cpp.o CMakeFiles/cxx.dir/__/src/bind.cpp.o -lpthread -lc -lm -lrt -lgcc_s -Wl,-rpath,\"\\$ORIGIN/../lib\" \ncd /var/tmp/sjackman/llvm20150813-13752-p35m31/projects/libcxx/lib && /gsc/btl/linuxbrew/Cellar/cmake/3.3.0/bin/cmake -E cmake_symlink_library ../../../lib/libc++.so.1.0 ../../../lib/libc++.so.1 ../../../lib/libc++.so\nprojects/libcxx/lib/CMakeFiles/cxx.dir/build.make:755: recipe for target 'lib/libc++.so' failed\nmake[2]: *** [lib/libc++.so] Error 1\nhttps://gist.github.com/sjackman/e0f9a09b18784a961ff9\n. I initially tried it on sjackman/linuxbrew in a Virtualbox on my laptop with 4 GB of RAM, but the compilation failed due to apparently running out of RAM, that is, my laptop froze up and stopped responding. So, I tried it on a a machine at work, but that is not a pristine environment. It's a standalone Linuxbrew installation on CentOS 5.10. It led to the error above.\n. The error message recipe for target 'lib/libc++.so' failed is not very helpful at all. Do you know whether cmake is hiding the error message from the compiler, and whether there's a verbose mode to show it?\n. cd /var/tmp/sjackman/llvm20150813-13752-p35m31/projects/libcxx/lib && /gsc/btl/linuxbrew/Cellar/cmake/3.3.0/bin/cmake -E cmake_symlink_library ../../../lib/libc++.so.1.0 ../../../lib/libc++.so.1 ../../../lib/libc++.so\nIt's this cmake -E cmake_symlink_library command that appears to be failing without an error message. After the build fails and I enter a subshell, when I run the same command at the command line it succeeds, and I can continue the build with make. Quite frustrating. It looks like a cmake bug to me.\n. Possibly related to this bug, but not exactly: https://mail.kde.org/pipermail/kde-buildsystem/2009-March/005605.html\n. Good news! If I ignore these errors and continue the build, I get a working clang compiler! I'm going to guess that these errors have something to do with either parallel build, NFS file system, or both. So, I'll happily merge your patch. Thanks for your contribution, Piotr.\n. Merged! Thanks, Piotr.\nFor future pull requests, the preferred commit log message is\nllvm 3.6.2: Fix --with-clang for Linuxbrew\n. The recent LLVM issue for Linux is at:\nhttps://github.com/Linuxbrew/homebrew-core/pull/1202. I don't see any errors related to ipython, but it does look as though you're trying to install graphviz. Please report brew gist-logs graphviz\n. Please read the installation instructions at http://brew.sh/linuxbrew/\n. Ah, drat. Yes, those instructions will have to be updated. The symlink should be called gcc-5 rather than gcc-5.1.\n. https://gist.github.com/9e191045c54339748a9a\ng++ -L/home/sion/.linuxbrew/lib -Wl,-rpath,/home/sion/.linuxbrew/lib -Wl,-O1 -Wl,-rpath,/home/sion/.linuxbrew/Cellar/qt/4.8.6/lib -Wl,-rpath,/home/sion/.linuxbrew/Cellar/qt/4.8.6/lib -o ../../../../bin/assistant .obj/release-shared/fontpanel.o .obj/release-shared/aboutdialog.o .obj/release-shared/bookmarkdialog.o .obj/release-shared/bookmarkfiltermodel.o .obj/release-shared/bookmarkitem.o .obj/release-shared/bookmarkmanager.o .obj/release-shared/bookmarkmanagerwidget.o .obj/release-shared/bookmarkmodel.o .obj/release-shared/centralwidget.o .obj/release-shared/cmdlineparser.o .obj/release-shared/contentwindow.o .obj/release-shared/findwidget.o .obj/release-shared/filternamedialog.o .obj/release-shared/helpenginewrapper.o .obj/release-shared/helpviewer.o .obj/release-shared/indexwindow.o .obj/release-shared/installdialog.o .obj/release-shared/main.o .obj/release-shared/mainwindow.o .obj/release-shared/preferencesdialog.o .obj/release-shared/qtdocinstaller.o .obj/release-shared/remotecontrol.o .obj/release-shared/searchwidget.o .obj/release-shared/topicchooser.o .obj/release-shared/xbelsupport.o .obj/release-shared/collectionconfiguration.o .obj/release-shared/openpagesmodel.o .obj/release-shared/globalactions.o .obj/release-shared/openpageswidget.o .obj/release-shared/openpagesmanager.o .obj/release-shared/openpagesswitcher.o .obj/release-shared/helpviewer_qtb.o .obj/release-shared/moc_fontpanel.o .obj/release-shared/moc_aboutdialog.o .obj/release-shared/moc_bookmarkdialog.o .obj/release-shared/moc_bookmarkfiltermodel.o .obj/release-shared/moc_bookmarkmanager.o .obj/release-shared/moc_bookmarkmanagerwidget.o .obj/release-shared/moc_bookmarkmodel.o .obj/release-shared/moc_centralwidget.o .obj/release-shared/moc_contentwindow.o .obj/release-shared/moc_findwidget.o .obj/release-shared/moc_filternamedialog.o .obj/release-shared/moc_helpenginewrapper.o .obj/release-shared/moc_helpviewer.o .obj/release-shared/moc_helpviewer_p.o .obj/release-shared/moc_indexwindow.o .obj/release-shared/moc_installdialog.o .obj/release-shared/moc_mainwindow.o .obj/release-shared/moc_preferencesdialog.o .obj/release-shared/moc_qtdocinstaller.o .obj/release-shared/moc_remotecontrol.o .obj/release-shared/moc_searchwidget.o .obj/release-shared/moc_topicchooser.o .obj/release-shared/moc_openpagesmodel.o .obj/release-shared/moc_globalactions.o .obj/release-shared/moc_openpageswidget.o .obj/release-shared/moc_openpagesmanager.o .obj/release-shared/moc_openpagesswitcher.o .obj/release-shared/qrc_assistant.o .obj/release-shared/qrc_assistant_images.o    -L/tmp/qt20150606-31378-1kzgbcg/qt-everywhere-opensource-src-4.8.6/lib -L/tmp/qt20150606-31378-1kzgbcg/qt-everywhere-opensource-src-4.8.6/plugins/sqldrivers -lQtHelp -L/tmp/qt20150606-31378-1kzgbcg/qt-everywhere-opensource-src-4.8.6/lib -L/usr/X11R6/lib -lQtSql -lQtGui -lQtNetwork -lQtCore -lpthread \n/bin/ld: warning: libQtCLucene.so.4, needed by /tmp/qt20150606-31378-1kzgbcg/qt-everywhere-opensource-src-4.8.6/lib/libQtHelp.so, not found (try using -rpath or -rpath-link)\n/tmp/qt20150606-31378-1kzgbcg/qt-everywhere-opensource-src-4.8.6/lib/libQtHelp.so: undefined reference to `QCLuceneIndexWriter::setMergeFactor(int)'\n. I'm afraid I don't have the time to troubleshoot individual formula. If you're able to find a fix, please do submit a pull request. Looking at the LD_LIBRARY_PATH fix, you could try brew edit qt and add the following line to the top of the install function.\nruby\nENV[\"LD_LIBRARY_PATH\"] = prefix/\"lib\"\n. Fixed by #429.\n. Try\nsh\nln -s `which gcc` `brew --prefix`/bin/gcc-5\n. Please report brew gist-logs isl\n. https://gist.github.com/anonymous/7c4d9bc18fd70cdbbce4#file-config-log-L584\n./configure: line 1882: /home/haiarch/.linuxbrew/bin/g++-5: No such file or directory\n. Try\nln -s `which g++` `brew --prefix`/bin/g++-5\n. Please report brew gist-logs gcc\n. Did this fix work for you to resolve #427?\n. Please add if OS.linux? to that line with git commit --amend (to squash) and git push --force.\nruby\nENV[\"LD_LIBRARY_PATH\"] = buildpath/\"lib\" if OS.linux?\n. Please keep the first line of the commit message to 50 characters and add qt: to the beginning of the first line. Please see CONTRIBUTING.md. And thanks for your contribution!\n. Thanks for your contribution, @sidaf\n. I'm afraid that I don't have the time to troubleshoot individual formula. Please submit a pull request if you find a fix for this issue.\n. https://gist.github.com/anonymous/2ddfa12aea552b6cd5fe#file-01-cmake-L758-L760\n-- EDITLINE_LIBRARY EDITLINE_LIBRARY-NOTFOUND\nCMake Error at cmake/readline.cmake:206 (MESSAGE):\n  Cannot find system editline libraries.\n. Try brew install homebrew/dupes/libedit mysql\n. See also #288 \n. It does. See d084460 and https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/mysql.rb#L33\n. I've changed the dependency from libedit to homebrew/dupes/libedit in fffd8fb\nTry brew update and brew install mysql\nIf that fails, please report\nbrew gist-logs mysql\n. Follow these instructions: To use GCC 4.4 on CentOS 5\n. There's  logic in Homebrew to install xz before packages that are compressed with it. The same logic does not exist for zip, because it's included with Mac OS. The xz logic should be extended to handle unzip.\nSee https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/dependency_collector.rb#L188\n. Something like the following, untested, not sure if the unless syntax is right with when.\nruby\nwhen '.zip' then Dependency.new('unzip', tags) unless OS.mac?\n. What's the error message that you get? Does this work?\nruby\nwhen '.zip' then Dependency.new('homebrew/dupes/unzip', tags) unless OS.mac?\n. ~~@xu-cheng Would you please be able to review/test this pull request?~~\nIgnore this. I sent it to the wrong thread.\n. > Do you think it should be changed for Linuxbrew?\nYes, I think that on Homebrew with_system_path should be modified to include HOMEBREW_PREFIX/bin.\nSee https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/utils.rb#L145-L151\nruby\ndef with_system_path\n  old_path = ENV['PATH']\n  ENV['PATH'] = '/usr/bin:/bin'\n  prepend_path 'PATH', HOMEBREW_PREFIX/'bin' unless OS.mac?\n  yield\nensure\n  ENV['PATH'] = old_path\nend\n. > Shaun will resync Linuxbrew soon I expect.\nUsually every Monday (or Tuesday).\n. This exact change was reverted in https://github.com/Homebrew/linuxbrew/commit/c7b6b170c402b2fc7b1e14ab1f8db51f994ee8a9. Read the discussion there. The problem is in bootstrapping a Linuxbrew system. The git formula cannot refer to a tap, like homebrew/dupes, because git is required to tap that tap, which results in a circular dependency. The work around is to install tcl-tk using http like so:\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/tcl-tk.rb --without-tk\nbrew install git\nSee https://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-standalone/Dockerfile#L5\n@xu-cheng Recommended copying the tcl-tk formula from homebrew/dupes to homebrew/linuxbrew. I think that's the best solution.\n. If gitk is the only reason that git depends on tcl-tk then, heck yes! Thanks for the tip, Misty.\n. tcl-tk is needed for gitk git-citool git-gui git-gui--askpass\n. Fixed by cb035914d0383cac93ee85220120e84418766ccf \"git 2.4.4: Add --without-tcl-tk for Linuxbrew\"\n. Thanks, Piotr. Nice work.\n. Hi, Piotr. I merge this PR, but it causes an error. Did it work for you?\nError: undefined method `prepend_path' for #<Object:0x0000001322bee8>\nSee for example https://github.com/Homebrew/linuxbrew/issues/437#issuecomment-112741948\n. I fixed it with this patch:\ndiff\n-  ENV.prepend_path 'PATH', HOMEBREW_PREFIX/'bin' unless OS.mac?\n+  ENV['PATH'] = \"#{HOMEBREW_PREFIX}/bin:#{ENV['PATH']}\" unless OS.mac?\n. I don't know why ENV.prepend_path would not be defined. Strange indeed.\n. Hmm. Please report\nsh\nbrew list --versions gcc patchelf bwa\nldd `which bwa`\nls -l `brew --prefix`/lib/libgcc_s.so.1\nls -l `brew --prefix gcc`/lib/libgcc_s.so.1\nAs a workaround, try brew install -s bwa\n. Error: undefined method 'prepend_path' for #<Object:0x0000000194fee8> this error was caused by a bug that I introduced last night (unrelated to this issue). It's fixed now.\nIt's interesting that libgcc_s.so.1 does not show up in the list of shared dependencies of bwa, but is apparently loaded dynamically by libpthread.so.0 (pthread_cancel).\n. I don't have an immediate fix for you. I'm glad that the workaround of building from source works for you. I'll let this issue sit for a bit, and see if further information shows up from someone else.\n. I suspect that it's being loaded dynamically using libdl (dlopen) in libpthread.so.0 (pthread_cancel).\n. I've found the cause of this issue and a workaround. The RPATH of the glibc shared libraries is not set. libpthread.so.0 requires libgcc_s.so.1, even though it's not reported by readelf -d libpthread.so.0. It must be loaded dynamically by dlopen. libc.so.6 has no idea where to find libgcc_s.so.1. One hacky but easy workaround is\nsh\nln -s `brew --prefix`/lib/libgcc_s.so.1 `brew --prefix glibc`/lib\nAnother fix is to use patchelf to set the RPATH of libpthread.so.0.\nFinally, you can use ldconfig like so:\nsh\necho `brew --prefix gcc`/lib >>`brew --prefix glibc`/etc/ld.so.conf\nldconfig\n. This issue was resolved by symlinking libgcc_s.so.1 into opt/glibc/lib/ when gcc is installed.. Thanks for the heads up, Jack. CentOS 5.10, the oldest distro that I make some effort to support, comes with Ruby 1.8.5, so it's already pooched. I don't feel too bad about dropping support for old versions of Ruby. It does make bootstrapping a system a little harder, because you have to install Ruby from source first. In any case, go right ahead. It'll be nice, I imagine, to drop the compatibility patches.\n. Feel free to submit a pull request to fix the offending formula. Try\n``` diff\ndiff --git a/Library/Formula/libressl.rb b/Library/Formula/libressl.rb\nindex 5e43d2d..cc4b6ab 100644\n--- a/Library/Formula/libressl.rb\n+++ b/Library/Formula/libressl.rb\n@@ -49,7 +49,7 @@ class Libressl < Formula\n # Bootstrap CAs from the system keychain.\n (etc/\"libressl/cert.pem\").atomic_write `security find-certificate -a -p #{keychains.join(\" \")}`\n\n\nend\nend if OS.mac?\n\ndef caveats; <<-EOS.undent\n     A CA file has been bootstrapped using certificates from the system\n```\n. Try\nsh\nLD_LIBRARY_PATH=`brew --prefix mcrypt`/lib brew install mcrypt\n. Great. Glad to hear it. Please send a pull request if this works.\n``` ruby\nFix configure: error: *** libmcrypt was not found\nENV[\"LD_LIBRARY_PATH\"] = lib\n``\n. Great. Thanks, Iggy.\n. Trybrew install pkg-config. My preference is to hack up the formula to install tolibrather thanlib64.\n. @tseemann Are you using the Homebrew python? If not, trybrew install python`\n. Please report\nsh\nwhich -a gcc\ngcc --version\n. Try\nsh\nln -s $(which gcc) $(brew --prefix)/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which g++) $(brew --prefix)/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\nSee https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nTry brew install gmp ghc\n. > Can it be that gcc v5.1.1 isn\u2019t compatible with linuxbrew?\nGCC 5.1 should be fine.\n. Please report brew list gmp\n. @benkonrath Yes, I agree. I've been meaning to do that.\n. @tomekwi Please report brew list -v gmp\n. It's a hack, but this workaround worked for me:\nsh\nln -s libgmp.so.10 `brew --prefix`/lib/\n. I'm sorry. That last suggestion got truncated when I posted it. It should have been:\nsh\nln -s libgmp.so.10 `brew --prefix`/lib/libgmp.so.3\n. Do you have patchelf installed? Try brew install patchelf ghc\n. You can also try LD_LIBRARY_PATH=$(brew --prefix)/lib brew install ghc\n. Please report brew gist-logs patchelf\n. https://gist.github.com/anonymous/6f2a8736d8055f85d8ab#file-02-make-L61\n/usr/bin/ld: cannot find -lstdc++\nOn Debian sudo apt-get install build-essential\nOn Fedora sudo yum groupinstall 'Development Tools'\nSee http://brew.sh/linuxbrew/#dependencies\n. Please report ls /usr/lib{,64}/libstdc++.so*\n. You can also try brew install gcc\n. brew gist-logs gcc\nIt's a hack, but you can try:\nsh\nln -s /usr/lib64/libstdc++.so.6 `brew --prefix`/lib/\nbrew install ghc\n. Thanks for your contribution, @digiter.\n. Thanks, Iggy!\n. Thanks for the fix, Iggy. I needed to removed the homebrew/dupes and change the patch to depends_on \"zlib\" unless OS.mac?, otherwise it creates a cyclic dependency.\n. See https://github.com/Homebrew/linuxbrew/pull/435 for the discussion.\n. Works for me. Thanks, Iggy.\n. Thanks for the heads up, Dominyk.\n. The installation of Python has proven to be very fragile in the past (usually with openssl), and I'm afraid that I don't have the time to help you troubleshoot it. I hope that you're able to sort it out. If you find a fix or workaround, please post it here. Good luck, Brandon!\n. One hacky workaround is to copy the file _ssl.so from a working installation to\n~/.linuxbrew/Cellar/python/2.7.10/lib/python2.7/lib-dynload/_ssl.so\n. See #188 and https://github.com/Homebrew/linuxbrew/issues/420#issuecomment-110808474 for the workaround.\n. I think this issue is a duplicate of #420. Let's move the discussion there.\n. Hmm. I don't see this behaviour:\nLinux\n```\n$ brew audit --strict graphlan\n==> audit problems\nhomebrew/science/graphlan:\n * Description is too long. \"name: desc\" should be less than 80 characters (currently 88).\nError: 1 problem in 1 formula\n``\n. The GCC compiler must be namedgcc-4.xorgcc-5`. You can create a symlink for gcc and g++. Please report the output of\nwhich -a gcc g++\ngcc --version\n. It may be pickier about the location of the symlink now. It may have to be in $(brew --prefix)/bin Perhaps that's a bug. Try\nsh\nln -s /usr/bin/gcc44 `brew --prefix`/bin/gcc-4.4\nln -s /usr/bin/g++44 `brew --prefix`/bin/g++-4.4\nwhich -a gcc-4.4 g++-4.4\n. There's magic in Linuxbrew that adds --default-names to every build. See https://github.com/Homebrew/linuxbrew/blob/37f6ab9c5da46c9e97a1e298a0094f537ca71362/Library/Homebrew/build_options.rb#L8-L10\nI'd accept a pull request to add support for --without-default-names, which is currently missing.\n. The program is usually called libtoolize on Linux not glibtoolize. Which formula is breaking? I'd accept a pull request to add a symlink from libtoolize to glibtoolize though, for compatibility with Mac Homebrew.\n. Okay. Good to know. A libtoolize to glibtoolize symlink is the way to go then.\n. Thanks for your contribution, Stanley.\n. > patchelf --set-rpath='$HOME/.local/lib' node script/build\nUse double-quotes around $HOME. Compare the output of\nsh\necho patchelf --set-rpath='$HOME/.local/lib' node script/build\necho patchelf --set-rpath=\"$HOME/.local/lib\" node script/build\n. Regarding C_INCLUDE_PATH, that's a helpful tip. Thanks!\n. Since this is a wacky upstream bug, I'd prefer to just wait for the upstream fix if they're responsive. Is there an upstream bug filed?\n. That's quite annoying that upstream won't release a not-broken tarball. I'll merge a PR to fix this. Do move the if statement inside the def stage statement.\n. I doubt that Homebrew/homebrew would merge this patch. Open the PR at Homebrew/linuxbrew.\n. Fixed by #457.\n. Thanks for your contribution, Adam.\n. No worries. An alternative workaround, if this comes up again, which I don't expect, would be to repackage the tarball and host it on Bintray.\n. You can safely skip installing tcl-tk. Instead install git without Tk support.\nsh\nbrew install git --with-brewed-curl --with-brewed-openssl --without-tcl-tk\nSee https://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-standalone/Dockerfile\n. @mistydemeo What script did you use to move this issue? That's a neat trick.\n. Thanks, Saket. That's super useful.\n. Please report brew gist-logs coreutils\n. Yes, please.\n. Please patch each formula in a separate pull request.\nSee https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Thanks for your contribution, Paul. Please submit the fix for each formula in its own pull request. The commit log for each pull request should be:\n```\nfoo 1.2.3: Fix for Linuxbrew\nFix the error: quote the exact error message here\n``\n. Thanks, Paul.\n. Thanks for this, Tim. Does compiling Python work out-of-the-box using a Homebrewedgcc? Does this patch support primarily using the system's/usr/bin/gcc`?\n. > I can confirm that your modified recipe works on RHEL 7.x for python 2 and 3\nGood to know! I'm very curious as to why though, because Homebrew already adds to the command line\n-I#{HOMEBREW_PREFIX}/include -L#{HOMEBREW_PREFIX}/lib\n. Oh, I think I see now. It looks like it's because the python formula is completely overriding the standard Homebrew definition of CPPFLAGS, CFLAGS and LDFLAGS. Is that correct?\n. > > Homebrew already adds to the command line -I#{HOMEBREW_PREFIX}/include\n\nIf you mean literally that Homebrew is wrapping compiler invocations and appending this to the argument list, that won't help, because setup.py places the discovered include path earlier on the command line.\n\nHomebrew adds the -I#{HOMEBREW_PREFIX}/include option to CPPFLAGS and -L#{HOMEBREW_PREFIX}/lib to LDFLAGS.\nLinuxbrew's gcc adds -L#{HOMEBREW_PREFIX}/lib to the specs file, which precedes the values specified on the command line. I only just noticed that it does not add -I#{HOMEBREW_PREFIX}/include to the specs file. It really should! That may be the ultimate source of a lot of our Python woes.\n. @zpincus wrote https://github.com/Homebrew/homebrew/issues/26272#issuecomment-96497263\n\nif that 3rd-party module contains a C extension that has a private header with the same name as any header file that is in /usr/local/include (or, more generally, brew --prefix). The same is true for linking libraries.\n\nI've had this same issue outside of Python. See https://github.com/Homebrew/homebrew-science/issues/2458#issuecomment-117318345\nThis also affected installing infernal after hmmer. See https://github.com/Homebrew/homebrew-science/pull/2408\n. The challenge is that we want to prioritize and enforce the following:\n1. the package's private header/library files\n2. Homebrew's header/library files\n3. the system's header library files\n4. and never the user's non-system header/library files\nIt's difficult to get 1 before 2 while still getting 2 before 3.\n. Hi, Tim. Sorry for the long delay in getting around to reviewing your patch. I've applied a reduced version of this patch in cd680d7 that addresses the core issue, which is adding -I#{HOMEBREW_PREFIX}/include to CPPFLAGS. Thanks for helping troubleshoot this issue! It was a rather tricky one.\nI haven't seen any issues filed regarding ncurses for Python, so I've left that chunk out for now.\n. Woops. I did not mean to merge this commit without the brace. Fixed in b49c8a0ca2306d6456a9cb59b074b2e0224cd6ea\n. Thanks for your contribution, Paul.\n. Instead of deleting this code, please move it inside if OS.mac?.\nPlease see https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Merged. Thanks for your contribution, Paul.\n. Thanks for your contribution, Paul.\n. Please report brew environment |grep PKG\nSee https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L27-L29\nand https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L96-L103\nand https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L250-L254\n. Also see http://ilgthegeek.livius.net/2015/02/05/pkg-config-search-path/\nfor an explanation of PKG_CONFIG_PATH and PKG_CONFIG_LIBDIR.\n. I'd be more inclined to remove system pkg-config paths from the default PKG_CONFIG_LIBDIR, including /usr/lib/pkgconfig.\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L101\n. I've merged the backend chunk. I haven't merged the pkgconfig chunk. I need to think more about how the pkgconfig search path should be handled. Thanks for your contribution, Paul.\n. Possible. You can also symlink those pkgconfig files into $HOMEBREW_PREFIX/lib/pkgconfig.\n. You can also fake a xorg package like so:\nsh\nmkdir -p `brew --prefix`/Cellar/xorg/7.7/lib/pkgconfig\nln -s /usr/lib64/pkgconfig/x*.pc `brew --prefix`/Cellar/xorg/7.7/lib/pkgconfig/\nbrew link xorg\n. I removed /usr/lib/pkgconfig from PKG_CONFIG_LIBDIR in 8c34ef1cab453d4d7a86119c10314b378a08190e\nThere's a brew diy for the purpose of faking packages. I always just do it the manual way. I think it would be helpful to have a command to help users' fake packages for software provided by their system, such as compilers, X, et c.\n. I'm on vacation until the new year. brew diy is intended to install a tarball (that uses autoconf or cmake) that doesn't have a formula. Linxubrew is easier to debug when it doesn't use system libraries, which vary a lot between distributions. I'd like to package X11 client libraries for Linuxbrew,\n. zlib is a dependency of openssl, which is a dependency of libevent, which is a dependency of tmux.\nopenssl should depend on homebrew/dupes/zlib rather than zlib but doesn't due to issues with cyclic dependencies. See https://github.com/Homebrew/linuxbrew/pull/447\n. Try the following:\nsh\nln -s $(which gcc) $(brew --prefix)/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which g++) $(brew --prefix)/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\nSee https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. That's awfully strange. Any idea why pip isn't being set executable? I haven't run into this issue yet myself.\n. I'm not sure what's gone wrong. I'll leave this issue open in the hopes that someone is able to help troubleshoot.\n. Thanks for the fix, Tim.\n. make check fails.\nFAIL: basic\nFAIL: benchmark\nFAIL: bench-slope\nhttps://gist.github.com/anonymous/c9ac647b584aa11dedbd#file-03-make-L57-L58\n/bin/bash: line 5: 29357 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: basic\nhttps://gist.github.com/anonymous/c9ac647b584aa11dedbd#file-03-make-L148-L149\nSALSA20     /bin/bash: line 5: 29416 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: benchmark\nhttps://gist.github.com/anonymous/c9ac647b584aa11dedbd#file-03-make-L148-L149\nSTREAM enc | /bin/bash: line 5: 29422 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: bench-slope\n. I'm not sure why these tests fail, but I am able to reproduce the issue. Please report this bug to the upstream developers. \nhttp://www.gnu.org/software/libgcrypt/\nhttp://lists.gnupg.org/mailman/listinfo/gcrypt-devel\n. We have a few options.\n1. Make --without-tcl-tk the default i.e. depends_on \"tcl-tk\" => :optional\n2. Make --without-tcl-tk the default if git is not found in the PATH\n3. Add tcl-tk to Homebrew/linuxbrew\n. Yes, I haven't yet figured out how to resolve the relocatable bottle issue, other than recommending that Linuxbrew uses /usr/local like Homebrew does.\nYou also need to install glibc and patchelf before Linuxbrew will use bottles. See the Standalone installation instructions. You'll want to start with a clean Linuxbrew installation.\n. > ah ok, so the default in linuxbrew is indeed to go with compilation since binaries may not work on every linux installations, is that it ?\nMore or less correct, yes. If glibc and patchelf installed, the default behaviour is to use bottles. But pretty much only relocatable bottles.\n\nI love this project\n\nI'm glad to hear that!\n\nThe reason for my initial question is that standard package won't fit the way we setup/install things\n\nCare to elaborate?\n. Sounds like a few good reasons to maintain a fork of Linuxbrew. Is your fork public on GitHub?\n. > is it an area where pull requests would be accepted ? (it is called linuxbrew after all ;) )\nLet's take it on a case-by-case basis. But in principle, yes, if it makes the formula more portable to other Posix systems and isn't a hack that is specific to BSD.\n\nAlso how homebrew/linuxbrew works together, are the two codebase sharing anything ?\n\nYes, Homebrew is merged into the Linuxbrew fork once per week. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n\nis there any plan to replace homebrew with linuxbrew since as far a I can tell linuxbrew supports both OS X and Linux ?\n\n@mikemcquaid Any plan to deprecate Homebrew in favour of Linuxbrew? :stuck_out_tongue_winking_eye: \n. The above comment was tongue-in-cheek. Linuxbrew is a long-term fork of Homebrew. The two projects work closely together, and there are no current plans to merge the two projects.\n. The Homebrew maintainers are allergic to code speckled with if OS.mac? and if OS.linux? in a project that's intended primarily for Mac OS.\n. Hi, Lee. Please put quoted text inside backticks. Please see https://help.github.com/articles/markdown-basics/\n. I'm glad that you got boost to install. If your subsequent testing shows that it works, please close this issue.\n. brew gist-logs boost runs brew install boost, so a long time.\n@tdsmith Is there a command that gists the logs from the most recent install? I'd find that very helpful.\n. > gist-logs never runs install.\nWhat do you know. Thanks for clarifying my misunderstanding. I guess I just assumed that's why it was slow. It must be brew doctor then that is slow.\n. I'm inclined to copy homebrew/dupes/zlib to homebrew/linuxbrew/zlib. This cyclic dependency issue is driving me nuts.\n. Done. I've copied homebrew/dupes/zlib to homebrew/linuxbrew/zlib.\n. Do you have any other NCBI formulas installed, and if so, can you check if they have any libraries installed in /lib?\n. Can you check whether that apt-get installed BLAST package also installs libraries? If so, you may be able to work around this issue by using the Standalone installation instructions for Linuxbrew.\n. Duplicate of https://github.com/Homebrew/homebrew-science/issues/2705\n. @tdsmith @xu-cheng @mistydemeo Does this patch make sense for Linuxbrew?\n. Merged. Thanks for your contribution, Paul.\n. Please add unless OS.mac?\nruby\ndepends_on \"texinfo\" unless OS.mac?`\nPlease report the exact error message that you see without using this patch.\n. The commit log message should be\nzsh: Depends on texinfo for Linuxbrew\n. Merged. Thanks for your contribution, Paul.\n. Try\nsh\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nSee http://brew.sh/linuxbrew/\n. Glad to hear that you got it working, Cojok.\n. Please report brew gist-logs gcc\n. Please report the exact output of\nsh\nbrew install gcc\n. /usr/bin/g++-4.9 -Os -w -pipe -march=core2  -Isrc/abstraction -Isrc/ld -isystem/home/tobi/.linuxbrew/include  -c -o src/other/ObjectDump.o src/other/ObjectDump.cpp\nIn file included from /home/tobi/.linuxbrew/include/mach-o/loader.h:35:0,\n                 from src/abstraction/MachOFileAbstraction.hpp:27,\n                 from src/ld/MachOReaderRelocatable.hpp:37,\n                 from src/other/ObjectDump.cpp:31:\n/home/tobi/.linuxbrew/include/mach/machine.h:66:35: fatal error: mach/machine/vm_types.h: No such file or directory\n #include <mach/machine/vm_types.h>\nhttps://gist.github.com/toebbel/5b51db15df0ca6151639#file-gistfile1-txt-L11-L17\n. Ah, I bet you're trying to brew install gcc5. That won't work. homebrew/versions isn't entirely supported on Linuxbrew. Try brew install gcc instead.\n. You'll want to remove whatever packages were installed when you tried brew install gcc5.\nbrew remove cctools-headers dyld-headers libunwind-headers\n. Woops. I should have caught that.\n. Try brew link --force libressl\n. An alternative solution would be to add :provided_by_osx:\nruby\nkeg_only :provided_by_osx, \"LibreSSL is not linked to prevent conflict with the system OpenSSL.\"\n. Does this change work?\nruby\n    system \"./configure\", \"--prefix=#{prefix}\", (\"SED=/usr/bin/sed\" if OS.mac?)\n. I'm afraid I don't know what that error message means. Best to contact the upstream developer.\n. Try changing homebrew/dupes/zlib to zlib in Abstract/abstract-php.rb line 38.\nhttps://github.com/Homebrew/homebrew-php/blob/970daa00d5994c5d1bdc8ff5aa547cda6f2d702f/Abstract/abstract-php.rb#L38\n. A workaround might be brew install zlib php55-protobuf\n. This issue is specific to homebrew/dupes/zlib and is not a more general issue. The problem is that zlib also exists in homebrew/linuxbrew/zlib to solve a cyclic dependency issue with git, which is needed for tapping homebrew/dupes. The best solution, for Linuxbrew anyway, would be to move homebrew/dupes/zlib to homebrew/homebrew/zlib.\n@Homebrew/owners What do you say? Can we move zlib?\n. Yes. I'm not generally a fan of vendoring dependencies. I think it's a hack solution and doesn't scale. I'd prefer to move zlib. Thanks for the suggestion though. I'll keep it in mind as a potential solution. (to clarify, it's openssl that has the cyclic dependency on zlib).\n. Cool! Good to know. Thanks for the tip. I may do just that. Linuxbrew doesn't have (many) bottles, so the rebuild shouldn't be necessary, should it? Would users' installed formula have to be rebuilt?\n. @DomT4 Have you asked Homebrew/homebew whether zlib should be disabled in openssl?\n. Closing. Thanks, Bob.\n. Please report the exact error message that you see without this fix, so that the issue can be searched by error message.\n. Merged. Thanks for your contribution, Andrew.\nPlease squash multiple commits into a single commit. I changed the commit log message to\n```\ngobject-introspection: Fix depends for Linuxbrew\nDepends on bison and flex.\nFix\nconfigure: error: flex not found but required\nconfigure: error: bison not found but required\n```\n. Please keep the first line to fewer than 50 characters. Please include the error message in the commit log message.\n. Try\nsh\nLD_LIBRARY_PATH=`brew --prefix isl`/lib brew upgrade isl\nLD_LIBRARY_PATH=`brew --prefix mpfr`/lib brew upgrade mpfr\nbrew upgrade gcc\n. Glad to hear it worked. There's a challenge here with what LD_LIBRARY_PATH should be set to when upgrading. The old version, the new version, or both. All three have problems.\n. With netcdf though it has to be new to install or upgrade netcdf.\n. Another option is to add isl and mpfr to the RPATH of gcc.\n. Reassigning to Homebrew/homebrew.\n. This issue was moved to Homebrew/homebrew#41938\n. Linuxbrew has the additional requirement that glibc and patchelf be installed. See Standalone Installation of Linuxbrew\n. Ah, yes. Some bottles don't care where they are installed (are relocatable). They are marked cellar :any. Other's that are not relocatable specify a particular cellar. If so, the HOMEBREW_PREFIX of the Homebrew installation and the cellar of the bottle must agree.\n. brew audit --strict kubernetes-cli should have suggested using ?: rather than if then else end. It looks good otherwise.\n. The preferred commit log format is\nkubernetes-cli 1.0.0: Fix for Linuxbrew\n. Thanks for your contribution, Andrew.\n. Do you have access to a Mac OS machine? If this patch works on a Mac, it should be sent to Homebrew/homebrew rather than Homebrew/linuxbrew.\n. Merged. The preferred commit log format is:\nvim: Add option to build with gtk+ for Linuxbrew\n. Thanks for your contribution, Paul.\n. The preferred commit log format is gwenhywfar 4.13.0: Fix for Linuxbrew\n. Thanks for your contribution, Alexander.\n. 4.13.1 will be merged into Linuxbrew soon.\n. Merged.\n. The logs are stored in ~/.cache/Homebrew/Logs/libspatialite\n. Please gist test/test-suite.log\n```\nTestsuite summary for libspatialite 4.3.0\nTOTAL: 84\nPASS:  0\nSKIP:  0\nXFAIL: 0\nFAIL:  84\nXPASS: 0\nERROR: 0\n============================================================================\nSee test/test-suite.log\n``\n. I don't know, but my guess is/tmp/libspatialite20150722-22529-wk8d5d/libspatialite-4.3.0/test/test-suite.log. You can runbrew install libspatialite -dvinteractively, and the installation will stop when it reaches the error, and you can then locatetest-suite.log`.\n. https://dl.dropboxusercontent.com/u/2071482/libspatialite/test-suite.log\n/tmp/libspatialite20150724-11907-19k3qao/libspatialite-4.3.0/test/.libs/lt-check_endian: error while loading shared libraries: liblwgeom-2.1.5.so: cannot open shared object file: No such file or directory\nTry\nsh\nLD_LIBRARY_PATH=`brew --prefix libspatialite`/lib brew install libspatialite\nor you should be able to safely ignore these errors:\nsh\nbrew install libspatialite --without-check\n. Try this patch:\n``` diff\ndiff --git a/Library/Formula/gdal.rb b/Library/Formula/gdal.rb\nindex 7fc2a4a..eee2b22 100644\n--- a/Library/Formula/gdal.rb\n+++ b/Library/Formula/gdal.rb\n@@ -272,7 +272,7 @@ class Gdal < Formula\n     ENV.append \"CFLAGS\", \"-I#{sqlite.opt_include}\"\n # Reset ARCHFLAGS to match how we build.\n\n\nENV[\"ARCHFLAGS\"] = \"-arch #{MacOS.preferred_arch}\"\n\nENV[\"ARCHFLAGS\"] = \"-arch #{MacOS.preferred_arch}\" if OS.mac?\n# Fix hardcoded mandir: http://trac.osgeo.org/gdal/ticket/5092\n inreplace \"configure\", %r[^mandir='\\${prefix}/man'$], \"\"\n@@ -299,7 +299,7 @@ class Gdal < Formula\nif build.with? \"swig-java\"\n   cd \"swig/java\" do\n-        inreplace \"java.opt\", \"linux\", \"darwin\"\n+        inreplace \"java.opt\", \"linux\", \"darwin\" if OS.mac?\n     inreplace \"java.opt\", \"#JAVA_HOME = /usr/lib/jvm/java-6-openjdk/\", \"JAVA_HOME=$(shell echo $$JAVA_HOME)\"\n     system \"make\"\n     system \"make\", \"install\"\n```\n. Sorry, I missed a chunk.\n\n\n``` diff\ndiff --git a/Library/Formula/gdal.rb b/Library/Formula/gdal.rb\nindex 7fc2a4a..8d2c2f3 100644\n--- a/Library/Formula/gdal.rb\n+++ b/Library/Formula/gdal.rb\n@@ -272,7 +272,7 @@ class Gdal < Formula\n     ENV.append \"CFLAGS\", \"-I#{sqlite.opt_include}\"\n # Reset ARCHFLAGS to match how we build.\n\n\nENV[\"ARCHFLAGS\"] = \"-arch #{MacOS.preferred_arch}\"\n\nENV[\"ARCHFLAGS\"] = \"-arch #{MacOS.preferred_arch}\" if OS.mac?\n# Fix hardcoded mandir: http://trac.osgeo.org/gdal/ticket/5092\n inreplace \"configure\", %r[^mandir='\\${prefix}/man'$], \"\"\n@@ -290,7 +290,7 @@ class Gdal < Formula\n   ENV.append_to_cflags \"-arch #{Hardware::CPU.arch_64_bit}\"\n else\n   ENV.append_to_cflags \"-arch #{Hardware::CPU.arch_32_bit}\"\n-    end\n+    end if OS.mac?\ncd \"swig/python\" do\n   system \"python\", \"setup.py\", \"install\", \"--prefix=#{prefix}\", \"--record=installed.txt\", \"--single-version-externally-managed\"\n@@ -299,7 +299,7 @@ class Gdal < Formula\nif build.with? \"swig-java\"\n   cd \"swig/java\" do\n-        inreplace \"java.opt\", \"linux\", \"darwin\"\n+        inreplace \"java.opt\", \"linux\", \"darwin\" if OS.mac?\n     inreplace \"java.opt\", \"#JAVA_HOME = /usr/lib/jvm/java-6-openjdk/\", \"JAVA_HOME=$(shell echo $$JAVA_HOME)\"\n     system \"make\"\n     system \"make\", \"install\"\n``\n. Yeah, I'm pretty sure that's right. It disables the wholeif/else/endblock. If you prefer, just delete all those offending lines, for testing purposes.\n. > I applied your patch to/home/styrax/.linuxbrew/Library/Formula/gdal.rband then executedbrew install gdal. This triggered the installation oflibspatialite` which failed as before.\n\nIs the modified Formula used by default or do I have to explicitly reference it?\n\n\n\nWhich formula is failing to install, libspatialite or gdal?\n. brew install libspatialite --without-check\nSee https://github.com/Homebrew/linuxbrew/issues/493#issuecomment-124647117\n. You said\n\nlibspatialite fails.\n\nWhich package is failing to install? Is it libspatialite, gdal or postgis? Please report the exact command that you're trying to run and its output.\n. Please search Google for error: option --no-user-cfg not recognized\nYour version of Python is too old. Try brew install python cmake\nSee https://github.com/Homebrew/linuxbrew/issues/358#issuecomment-96067307\nAnother workaround is brew install cmake --without-docs\nSee http://unix.stackexchange.com/questions/180796/homebrew-error-option-no-user-cfg-not-recognized\nWhich distribution are you using? Please report cat /etc/redhat-release and python --version\n. Good to know. I use Linuxbrew on CentOS 5.10 at work, so you're in good company. There's a discussion at https://github.com/Homebrew/linuxbrew/pull/496 to improve python_requirement.rb to check that the Python version is sufficiently recent.\n. cmake: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by /tmp/cmake20150731-10070-1253tmz/cmake-3.2.3/Bootstrap.cmk/cmake)\nWell that's a fun error message. Do you have the gcc Homebrew formula installed? Please report\nsh\nwhich -a gcc\n/usr/bin/gcc --version\n`brew --prefix`/bin/gcc --version\n. This error message indicates that cmake was compiled with one version of libstdc++.so.6, but then is trying to be run with a different older version of libstdc++.so.6.\n. Do you have another GCC compiler installed somewhere else?\nsh\nls /usr/bin/g++* /usr/local/bin/g++*\nWhich version of GCC are you using?\nsh\n/usr/bin/gcc --version\nYou may want to try installing Homebrew's GCC.\nsh\nbrew install gcc\n. Do you mean the compilation exceed its allotted time limit? I've run into that problem compiling GCC on Docker with a two-hour time limit. There's a trusted Docker image here if you like:\nhttps://registry.hub.docker.com/u/sjackman/linuxbrew-standalone/\nsh\ndocker pull sjackman/linuxbrew-standalone\n. Both libspatialite and cgal have precompiled binary bottles if you wanted to give it another shot.. Hi, Julien.\nbrew install curl. It includes libcurl.so.\nLinuxbrew does not really support keg_only libraries particularly well. It would need special RPATH support, which it doesn't currently do.\nAfter installing a bottle, Linuxbrew uses patchelf to set the RPATH to $HOMEBREW_PREFIX/lib, which is overwriting you change. This same change is also made after brew bottle. You can use readelf -d to check the value of RPATH in the executable.\nCheers,\nShaun\n. Yes, modifying ld.so.conf is a good alternative to RPATH that I haven't yet tried out. It's particularly appealing when using Linuxbrew's glibc.\n. So far I've found no use for keg_only formula in Linuxbrew. What are you using them for? I have thought of adding to the RPATH of the executables of a formula the lib folder of all its direct dependencies.\n. If you brew install glibc you can modify the ld.so.conf of Linuxbrew separately from the host system.\n. Why?\n. Whoah. A Linuxbrew package for Debian. I had considered the possibility. How do you plan to handle updating the formulas? Simply sudo brew update ? What HOMEBREW_PREFIX do you plan to use? /usr/lib/linuxbrew?\nLinuxbrew intends to be compatible with Mac Homebrew (you can run Linuxbrew on a Linux or Mac box), so I don't plan to delete these symlinks. Although I also don't know why they exist. You could ask upstream at Homebrew/homebrew if you like. You could delete these files before packaging the source tarball for Debian.\n. Interesting. So your /usr/bin/brew script will be a script that installs Linuxbrew in ~/.linxuxbrew if it doesn't already exist, and after that initial installation, runs ~/.linxuxbrew/bin/brew. Yes? Seems simple enough to me.\n. > [most simple] only wrapper and the install script would be shipped.\n\nThis will not break any function of linuxbrew, the only problem is user need to wait for some time of git repo to be cloned.\n\n:+1:\n\nSince I have trouble cloning the whole linuxbrew git repo ( costs so loooong time ),\nmay I suggest that add --depth option to install script [1] ?\n\nPlease ask upstream at Homebrew/homebrew.\n. The entire Homebrew project is BSD 2 Clause (NetBSD) license. See https://github.com/Homebrew/linuxbrew#license\n. Hi, Denny. This topic has been debated before. See #269. It was decided that many (most?) systems include a working python, and that python is a heavy-weight dependency to require just for cmake. You can install cmake without python like so:\nbrew install cmake --without-docs\n. Sure! What doesn't it do right now that it should do?\n. It uses the python found in PATH, which can be /usr/bin/python:\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/requirements/python_requirement.rb#L37\n. ```\n\u276f\u276f\u276f brew audit --strict strace\n==> brew style strace\n1 file inspected, no offenses detected\n==> audit problems\nstrace:\n * checksum (line 7) should be put before head (line 4)\n * Stable: version 4.10 is redundant with version scanned from URL\n * Stable: Please use https:// for http://downloads.sourceforge.net/project/strace/strace/4.10/strace-4.10.tar.xz\n * HEAD: Redundant :using value in URL\n * Commented-out dep \"perl\" => :optional\n```\nPlease see https://github.com/Homebrew/homebrew/blob/master/CONTRIBUTING.md\nThanks for your contribution, Tom\u00e1s.\n. Yes, please. Please also squash the commits into a single commit.\n. Merged. Thanks for your very useful contribution, Tom\u00e1s.\n. My pleasure. Just the issues and pull requests.\n. Thanks for the bug report, Alexander.\n. Merged. Thanks for your contribution, Tom\u00e1s. The preferred commit log message is\niotop 0.6 (new formula) for Linuxbrew\n. No, there's no /proc/* on Mac OS. It looks like Mac OS ships with an implementation of iotop, which is news to me.\n~ \u276f\u276f\u276f which iotop\n/usr/bin/iotop\n~ \u276f\u276f\u276f iotop\ndtrace: failed to initialize dtrace: DTrace requires additional privileges\n. If it compiles on both Mac and Linux, then to Homebrew/homebrew.\n. Yes, I can confirm that I've also observed this bug. Do you know whether your system is using LDAP or /etc/passwd, or some author authentication system?\n. If you're using /etc/passwd, a workaround may be\nsh\nln -s /etc/passwd `brew --prefix glibc`/etc/\n. I found that the time zone was also incorrect unless I did\nsh\nln -s /etc/localtime `brew --prefix glibc`/etc/\n. You may need to add the nsswitch.conf file.\nSee http://www.linuxfromscratch.org/lfs/view/development/chapter06/glibc.html\nand look for 6.9.2.1. Adding nsswitch.conf.\n. Perhaps also try\nsh\nln -s /etc/nsswitch.conf `brew --prefix glibc`/etc/\n. On my system where whoami fails as above, I noticed that the host glibc has libnss_ldap.so.2, but the brewed glibc does not have this library.\n. There is the formula homebrew/dupes/openldap. Perhaps samba could be compiled against that on Linuxbrew.\n. Glad to hear the workaround worked for you. Would you be interested in submitting a PR for glibc that enables compiling libnss_ldap.so and libnss_sss.so?\n. I can't find anything in the glibc documentation on how to enable libnss_ldap or libnss_sss. I hope it's in there somewhere. May have to grep through the sources.\n. Ah, I see. I assumed is was provided by glibc.\n- libnss_ldap.so.2 on Debian is provided by http://www.padl.com/OSS/nss_ldap.html\n- libnss_sss.so.2 on Debian is provided by sssd\n. This issue was moved to Linuxbrew/brew#145\n. There are 30 formulae in Homebrew that depend on libxml2 so this PR didn't strike me as unusual.\n\u276f\u276f\u276f grep -l 'depends_on.*libxml2' * |column\naqbanking.rb            libdap.rb               nghttp2.rb\naugeas.rb               libglade.rb             nordugrid-arc.rb\ncfengine.rb             libimobiledevice.rb     openslide.rb\ndnsperf.rb              libplist.rb             openwsman.rb\ngdal.rb                 libslax.rb              postgres-xc.rb\ngedit.rb                libspatialite.rb        postgresql.rb\ngnome-doc-utils.rb      libvirt.rb              spdylay.rb\ngtk-doc.rb              libxml++.rb             swish-e.rb\ngwyddion.rb             libxmlsec1.rb           yelp-tools.rb\nitstool.rb              libxslt.rb              yelp-xsl.rb\n. Six state that it's because the version of libxml2 in Mac OS version xxx is too old. The others give no explanation.\n\u276f\u276f\u276f grep 'depends_on.*libxml2' * |grep MacOS\ncfengine.rb:  depends_on \"libxml2\" if MacOS.version < :mountain_lion\nlibxml++.rb:  depends_on \"libxml2\" if MacOS.version <= :leopard\nlibxmlsec1.rb:  depends_on \"libxml2\" if MacOS.version <= :lion\nnghttp2.rb:  depends_on \"libxml2\" if MacOS.version <= :lion\npostgres-xc.rb:  depends_on \"libxml2\" if MacOS.version <= :leopard # Leopard libxml is too old\npostgresql.rb:  depends_on \"libxml2\" if MacOS.version <= :leopard # Leopard libxml is too old\n. My suggested fix for Linuxbrew would be\nruby\ndepends_on \"libxml2\" unless OS.mac?\nIf you'd like to send up a PR with this content after testing that it works for you, I'll merge it in.\n. The libxml2 dependency should be required on Linux and optional on Mac.\n. Hi, Daniel. Please squash and rebase this commit, and don't modify the bottle section.\n. I was able to build emacs without libxml2. What error message are you seeing when building emacs? Please report brew gist-logs emacs\n. I can confirm that I've seen this issue too. Anyone know how to fix it?\n. Great! Thanks for the fix, Tim.\n. Which other instructions are critical? I think this for sure:\nsh\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\n. Many systems already have the dependencies installed. The only really critical steps that's missing from the tl;dr is modifying the PATH.\n. I'm not familiar with numerical software myself. That being said, the best way to accomplish this in my opinion is to install all the dependencies using Homebrew, and then have --with-<dependency> options for the formulas that can use them optionally. i.e. brew install dealii --with-trillinos\n. These issues are pretty much the same on either Mac or Linux, so this discussion would be better suited to Homebrew/homebrew-science. Shall I move this issue there?\n. Is Intel MKL commercial software, and could it be packaged for Homebrew?\n. It could be possible to set a up :blas or :lapack dependency similar to the :mpi dependency. See https://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/requirements/mpi_requirement.rb\n. What's the relationship between BLAS and LAPACK?\n. homebrew/science/openblas provides BLAS, and homebrew/dupes/lapack provides LAPACK?\nDoes Intel MKL provide a source-compatible interface that implements both of these libraries?\n. @dpo Hi, Dominique. Do you have any comments on this thread? I don't use numerical algorithms much in my work, so I'm out of my zone here.\n. I won't implement it either, but I'll review a pull request if someone wants to cook one up. As I said, I'm not a big user of numerical stuffs, so you'd be best off to find someone in Homebrew/science who is and can review this proposal properly. Perhaps @dpo\n. Thanks, Tim. I'd love for blas_requirement.rb to live in Homebrew rather than Linuxbrew. Is there a use case for it on Mac, for example, a reasonably popular alternative to Accelerate framework?\n. Great. Would you like to separate out blas_requirement.rb and send that upstream to Homebrew?\n. Duplicate of #483.\n. @iggyvolz Good news from Andy. See https://github.com/Homebrew/homebrew-php/issues/1926#issuecomment-129260824\n\nShaun wrote\u2026\n@ablyler Hi, Andy. If we get php56 up and running on Linuxbrew, would you be willing to merge those patches into Homebrew/homebrew-php?\nAndy wrote \u2026\n@sjackman sure, as long as they don't break homebrew on OS X. :-)\n. @alanthing Hi, Alan. We're working on getting homebrew/apache/httpd building in Linuxbrew. If we get this going, would you be willing to merge those patches into homebrew/apache?\n. No, sorry. I'm traveling until the new year, and I'll have a backlog of work when I return. This issue needs someone to adopt it.\n. Yes, this bug is known and unresolved. brew install pkg-config && brew install mysql should work.\nSee https://github.com/Homebrew/linuxbrew/pull/264\n. Hi, Chris. Are you seeing a build error that you are trying to fix, and if so, what is the exact error message? Does brew install zlib gcc resolve your issue?\n. Relevant code in gcc.rb: https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/gcc.rb#L123-L125\n. Hi, Gil. Please see #191\n. > By commenting out the above option, gcc was building its own zlib. Not what I wanted.\n\nGCC usually builds its own zlib and eliminates a dependency. Not so bad in my opinion. That would be my preferred solution, removing --with-system-zlib on Linux.\n. Great. Glad to hear that you got it working, Gil.\n. What's the use case? I'm not keen to include this feature in Linuxbrew unless it's supported by the upstream developer. Please send this patch to build a shared lua library to the LUA developers.\n. https://gist.github.com/anonymous/50ee22b1ca6d754caed9#file-01-make-L3820-L3823\n/home/peter/.linuxbrew/bin/g++-5 -fPIC -O3 -fno-common -fexceptions -DNTIMER -fopenmp -DHAVE_TBB -DNPARTITION -I../../CHOLMOD/Include -I../../SuiteSparse_config -I../Include -c ../Source/spqr_parallel.cpp\n../Source/spqr_parallel.cpp:10:37: fatal error: tbb/task_scheduler_init.h: No such file or directory\ncompilation terminated.\nmake[2]: *** [spqr_parallel.o] Error 1\n. My guess is that it will fail on any system including Mac where HOMEBREW_PREFIX is not /usr/local. The formula does not add the TBB include directory to CPPFLAGS. See https://github.com/Homebrew/homebrew-science/blob/master/suite-sparse.rb#L49-L50\n. This issue was moved to Homebrew/homebrew-science#2648\n. Should this issue be moved to Homebrew/science?\n. Great. Thanks, Denis.\n. As a workaround, try:\nsh\nbrew install erlang --without-wxmac\nbrew install lfe\n. New formula should be submitted to Homebrew/Homebrew. Please see https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Please report brew gist-logs openssl. I'm heading on vacation for two weeks, so I'm afraid I won't be able to look at the result until I return.\n. I see this error\nlibtool: compile:  /gsc/btl/linuxbrew/bin/g++-5 -DHAVE_CONFIG_H -I. -I./src -I./src -isystem/gsc/btl/linuxbrew/include -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc -fno-builtin-calloc -fno-builtin-cfree -fno-builtin-memalign -fno-builtin-posix_memalign -fno-builtin-valloc -fno-builtin-pvalloc -Wno-unused-result -DNO_FRAME_POINTER -Os -w -pipe -march=core2 -D_XOPEN_SOURCE -c src/stacktrace.cc  -fPIC -DPIC -o src/.libs/stacktrace.o\nsrc/stacktrace.cc:213:2: error: #error Cannot calculate stack trace: will need to write for your environment\n #error Cannot calculate stack trace: will need to write for your environment\n  ^\n. I'm on vacation until the new year. Please bump this thread after then if you haven't heard from me.\n. Thanks for your contribution, David.\n. The workaround for your issue, Joshua, is here: https://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\nln -s $(which gcc) `brew --prefix`/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which g++) `brew --prefix`/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\nln -s $(which gfortran) `brew --prefix`/bin/gfortran-$(gfortran -dumpversion |cut -d. -f1,2)\n. Can you check whether the following patch works?\nruby\n@flags ||= cpuinfo[/^(flags|Features).*/, 0].split\n. @ronanc-raspberrypi says that it works. https://github.com/Homebrew/linuxbrew/issues/581#issuecomment-145368911\n. Glad to hear it, Ronanc.\n. I fixed hardware.rb in this commit: a6e2787e62abaff0f10d64a648eb50e47a9ae2c5\n. Fixes the error: No package 'libxml-2.0' found\n. Thanks for your contribution, David.\n. Do you have access to a Mac, and does elfutils compile on a Mac? If so, submit it upstream to https://github.com/Homebrew/homebrew\n. Add to the formula:\nruby\nfails_with :clang do\n  build 700\n  cause \"gcc with GNU99 support required\"\nend\n. Does it build on Mac now?\n. The build fails with GCC 5.3.0:\nchecking for __thread support... no\nconfigure: error: __thread support required\n. Merged. Thanks for your contribution, David. Sorry for the extended delay.\n. Just out of curiosity, what do you use elfutils for instead of binutils?\n. Can you report the exact error that you see without this patch?\n. I wasn't able to reproduce this issue on standalone Linuxbrew.\n. Is this issue still a problem for you?\n. Duplicate of #518\n. Yes, I do think there is a benefit to building X11 with Homebrew. I haven't had the time to tackle it. Feel free to submit a pull request if you have the inclination.\n. That's great. Thanks, Bob. I hope it goes well! Do you plan on putting the individual libraries each in their own formula, or all in one big formula? Have you seen the LFS page? http://www.linuxfromscratch.org/blfs/view/svn/x/x7lib.html\n. makedepend is an upstream Homebrew formula, so I don't want to mess with it. I'll just leave it as is.\n. > It might take some time for me to get as far as XLib.\nNo rush, but I'm excited that you're working on it.\n. xquartz.rb is hacked up for Linux to say that X11 is installed, whether it is or not, so that x11_requirement.rb is always satisfied on Linux. It's definitely not ideal.\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/os/mac/xquartz.rb#L33\n@maxim-belkin and @rwhogg are working on building Xorg from source.\nhttps://github.com/Linuxbrew/homebrew-xorg/blob/master/xorg.rb\nTry brew install linuxbrew/xorg/xorg\nOnce that's done, x11_requirement.rb needs to be modified for Linux to check whether linuxbrew/xorg/xorg is installed.\n. I'd happily accept a pull request updating .travis.yml on Linuxbrew. I have limited time for troubleshooting, because I'm on parental leave. My son Jake is two months old. In one week I'll be leaving with my family on vacation until Christmas.\n. Hi, Andrew. Sorry that I've been so silent. I have a new two-month old son, and I'm on parental leave. So I'm afraid that I don't have much time to help troubleshoot. I wish you the best of luck, and I hope that you're able to find a solution.\nHave you checked out the Docker scripts that I use to test the standalone installation over here:\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-standalone/Dockerfile\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-gcc/Dockerfile\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-gcc-deps/Dockerfile\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-core/Dockerfile\n. I'm glad to hear that you got it working, Andrew. I personally have no interest in a multiarch system. I'm curious though. What do you use 32-bit executables for?\nIncidentally, I do have an interest in supporting the 32-bit ARM Raspberry Pi.\n. Hi, Andrew. I see that you've added these apt-get commands to the standalone installation instructions:\nsh\nsudo apt-get update -y\nsudo apt-get update --fix-missing -y\nsudo apt-get install build-essential curl g++ git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev gawk make patch tcl -y\nThe whole point of the standalone installation is that it does not require these host dependencies. For one, these instructions are meant to work on any distribution of Linux, not just Debian. Please remove these lines in particular and try to limit your changes to things that are strictly necessary to get the standalone installation running. Now that you've got it running, I'd appreciate your going back and deleting any changes to the instructions that weren't necessary.\n. Hi, Andrew. The README.md has instructions for both Debian and Fedora. The Standalone Installation has no requirements on the host system. I'll be traveling for two months. If you're able to sort out the root cause of your problem, please open an issue or pull request to discuss. Thanks!\n. @ahundt Thanks for your feedback, Andrew. It's quite helpful.\n\nAt minimum it should say you need to install the readme.md dependencies first\n\nOn Debian sudo apt-get install build-essential curl and on Fedora sudo yum groupinstall 'Development Tools' && sudo yum install curl should be sufficient. Can you confirm?\n\nthis line is missing sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64\n\nI'm not happy with this hack, because it requires sudo, and I'd like these instructions to work for a user installing Linuxbrew in her home directory. Perhaps this alternative could work: http://stackoverflow.com/a/16605434\nexport LIBRARY_PATH=/usr/lib/x86_64-linux-gnu\n\nthe missing dependency list isn't complete on the readme.md for 14.04 (see my expanded one in the script)\n\nI've expanded the list of dependencies.\n\nthe paths set aren't completely right\n\nCan you elaborate?\n\nHOMEBREW_CC isn't set correctly (linuxbrew currently installs gcc5.2, not 4.9, but this will change in the future too so even that fix would break soon, putting simply gcc seemed to work)\n\nI've removed all references to HOMEBREW_CC. The compiler should be selected automatically.\n\nthe three paths PATH, LIBRARY_PATH, LD_LIBRARY_PATH, aren't reset correctly so stuff can be picked up from elsewhere\n\nPATH, LD_LIBRARY_PATH and PKG_CONFIG_PATH are all sanitized. I've rarely (never?) seen LIBRARY_PATH used. Did it cause you trouble?\n. > This is the thing that confuses me, @sjackman . You say that linuxbrew-standalone should not have any dependencies on host system, but clearly you need GCC, Ruby and several other at the least.\nYes, true. I've improved the Dependencies section.\n\nCould you specify a bit more clearly what is its purpose? From my understanding stadalone is meant to be used without further need for host toolchain, but it still needs it in order to bootstrap, right?\n\nYes, it needs host tools to bootstrap, and should be completely independent after that. On a typical system, it should be possible to install Standalone Linuxbrew in a home directory without needing root access.\n. @Mikaela The Fedora instructions need to work for distributions going back to CentOS 5. When was dnf added?\n. I'm going to stick with yum in that case, to support both old and new distributions of CentOS.\n. brew install gcc --with-glibc should work now to get a standalone installation of Linuxbrew. Please report back if it does not.\n. Please report the exact error message that you observe.\n. I'm having trouble testing this patch, as I can't get procps to build for me at the moment. I get the error\n/gsc/btl/linuxbrew/bin/gcc-5 -D_GNU_SOURCE -I proc -I/usr/include/ncurses -fno-common -ffast-math -W -Wall -Wshadow -Wcast-align -Wredundant-decls -Wbad-function-cast -Wcast-qual -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -O2 -s         -c -o top.o top.c\nIn file included from /usr/include/ncurses/curses.h:127:0,\n                 from top.c:28:\n/gsc/btl/linuxbrew/include/ncurses/unctrl.h:60:63: error: unknown type name 'SCREEN'\n NCURSES_EXPORT(NCURSES_CONST char *) NCURSES_SP_NAME(unctrl) (SCREEN*, chtype);\n                                                               ^\nI take it that you didn't encounter this problem?\n. I'm on vacation until the new year. Please bump this thread after then if you haven't heard from me.\n. Never mind this comment. It's only a warning, not an error.\n~~With GCC 4.8.4 I get this error message:~~\n/usr/include/x86_64-linux-gnu/sys/select.h:106:12: note: expected 'struct timeval * __restrict__' but argument is of type 'volatile struct timeval *'\n extern int select (int __nfds, fd_set *__restrict __readfds,\n. With GCC 4.8.4 I get this error message:\ntop.h:248:4: error: redeclaration of enumerator 'P_PID'\n    P_PID, P_PPD, P_URR, P_UID, P_URE, P_GRP, P_TTY,\n    ^\nIn file included from /usr/include/stdlib.h:41:0,\n                 from top.c:34:\n/usr/include/x86_64-linux-gnu/bits/waitflags.h:53:3: note: previous definition of 'P_PID' was here\n   P_PID,  /* Wait for specified process.  */\n   ^\n. Fixed by #763 procps 3.3.11\n. Which Linux distribution are you using?\n. Sorry for that. That issue has been resolved. See #648\n. Does PR #612 fix your original issue?\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. cairo-xlib-surface.c:71:33: fatal error: X11/extensions/XShm.h: No such file or directory\nhttps://gist.github.com/anonymous/7b1ebc1171d2707dba67#file-02-make-L137\nTry\nsh\nbrew install linuxbrew/xorg/xorg cairo --with-x11\n. --with-x11 should be the default for cairo on Linuxbrew.\n. Bob, would you like to take a stab at fixing this, when you have time? On non-Mac systems, :x11 should be :recommended rather than :optional.\n. On second thought, don't worry about it, Bob. I had forgotten that Piotr had worked on this issue. I've asked him to take a look at it in #974.\n. I didn't find this patch was necessary to compile ghc 7.10.2 for me. I had previously created a symlink in $HOMEBREW_PREFIX/lib from libgmp.so.10.2.0 to libgmp.so.3. Perhaps that's why?\n. I'd be curious to know why linking statically against gmp doesn't work on Linux, as it seems to work on Mac.\n. I'm on vacation until the new year. Please bump this thread after then if you haven't heard from me.\n. I just pushed ghc 7.10.3b. Any luck with that?\n. How about\nruby\nln_s Dir[\"#{gmp}/lib/libgmp.so.*\"], \"#{gmp}/lib/libgmp.so.3\"\n. Dir[] is the globbing operator, just like shell globbing. http://ruby-doc.org/core-2.2.3/Dir.html#method-c-5B-5D\n. This patch would have the side effect of making ghc dynamically linked against libgmp, which is different than it's done on Mac. I'm hesitant to make this change for this reason.\nI suggest that we get the libgmp.so.3 shared library by depending on gmp at build time, rather than building enabling shared libraries for the gmp resource of ghc. Instead of removing \"--disable-shared\" add the following lines.\nruby\ndepends_on \"gmp\" => :build unless OS.mac?\nIn def install\nruby\nif OS.linux?\n  # Fix error while loading shared libraries: libgmp.so.3\n  ln_s Formula[\"gmp\"].lib/\"libgmp.so\", \"#{gmp}/lib/libgmp.so.3\"\n  ENV.prepend_path \"LD_LIBRARY_PATH\", \"#{gmp}/lib\"\nend\nAn alternative solution would be for the gmp formula to provide the symlink from libgmp.so.10 to libgmp.so.3.\n. Can you confirm that the dependency on libgmp.so.3 is only a build time dependency? That is, none of the executables installed by ghc depend on it?\n. Fixed. Thanks for your contribution, Paul. Sorry for the extended delay.\n. The fix that I went with is:\n``` diff\ndiff --git a/Library/Formula/ghc.rb b/Library/Formula/ghc.rb\nindex 2eec23b..b01e24b 100644\n--- a/Library/Formula/ghc.rb\n+++ b/Library/Formula/ghc.rb\n@@ -14,6 +14,8 @@ class Ghc < Formula\n   deprecated_option \"tests\" => \"with-test\"\n   deprecated_option \"with-tests\" => \"with-test\"\n\n\ndepends_on \"gmp\" => :build if OS.linux?\n+\n   resource \"gmp\" do\n     url \"http://ftpmirror.gnu.org/gmp/gmp-6.1.0.tar.bz2\"\n     mirror \"https://gmplib.org/download/gmp/gmp-6.1.0.tar.bz2\"\n@@ -81,14 +83,23 @@ def install\n       args << \"--with-gcc-4.2=#{ENV.cc}\"\n     end\n\n\nif OS.linux?\n\n\nFix error while loading shared libraries: libgmp.so.3\n\nln_s Formula[\"gmp\"].lib/\"libgmp.so\", gmp/\"lib/libgmp.so.3\"\nENV.prepend_path \"LD_LIBRARY_PATH\", gmp/\"lib\"\n\nFix /usr/bin/ld: cannot find -lgmp\n\nENV.prepend_path \"LIBRARY_PATH\", gmp/\"lib\"\nend\n+\n     resource(\"binary\").stage do\n       # Change the dynamic linker and RPATH of the binary executables.\n       if OS.linux? && Formula[\"glibc\"].installed?\n``\n. No worries. I'm glad that it's useful.\n. New versions should be sent to Homebrew/hombrew. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Thanks for your help troubleshooting, Denis. If the symlink forgcc-4.xorgcc-5exists in$HOMEBREW_PREFIX/bin, then you shouldn't need to setHOMEBREW_CC. It should find your compiler on its own.\n. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Homebrew is merged into Linuxbrew periodically. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. The git log message should be simplyjdk 1.8.0-60`\n. Thanks for your contribution, Oliver.\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. I'm going to assume this issue is fixed by the above commit. Thanks, Alex.\n. @tdsmith wrote\u2026\n\n\nI'm trying very hard not to become a Linuxbrew maintainer\n\nCome over to the dark side!\n. I prefer to avoid the system libraries and binaries as much as possible and use Homebrew versions. The various wacky old versions of system tools give me many headaches. If you really want to use the system cmake the workaround is:\nmkdir -p `brew --prefix`/Cellar/cmake/3.3.2/bin\nln -s /usr/bin/cmake `brew --prefix`/Cellar/cmake/3.3.2/bin/\nbrew link cmake\nUntested, but you get the gist of it.\nI generally won't accept features like this into Linuxbrew that won't ever make it into Homebrew. I try to keep the diff between Homebrew and Linuxbrew as small as possible to make maintenance and merging of Homebrew/Linuxbrew as easy as possible.\n. See https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. For the X11 packages that do not exist in Linuxbrew, I'd prefer to move add a subsection to the README.md Dependencies for installing X11 dependencies on Debian and Fedora systems.\n. This should be sent upstream to Homebrew/homebrew if it addresses compiler errors with GCC 5 on Mac as well as Linux.\n. This patch is too big for me to merge into Linuxbrew. My recommendation would be to pull the inline patch out into gist and send what portion of this patch upstream to Homebrew/homebrew that isn't specific to Linux. Send the remaining portion that's specific to Linux here to Homebrew/linuxbrew.\n. Great. Thanks, Denis. Blocked on Homebrew/homebrew#44612\n. Thanks, Denis. The merge will come in the new year.\n. I've merged Homebrew into Linuxbrew.\n. This patch is too large for Linuxbrew.\nDoes it work to simply change\nruby\n  patch :DATA\nto\nruby\n  patch :DATA if OS.mac?\n. Yep. Showing  1 changed file  with 20 additions and 56 deletions.\nDoes it work if you simply disable this patch as above?\n. That whole patch appears to be Mac specific. Try disabling it.\nruby\npatch :DATA if OS.mac?\n. Okay. Have you sent this patch to the upstream author? https://github.com/davydden/linuxbrew/blob/freeimage_linuxbrew/Library/Formula/freeimage.rb#L45-L127\n. I wasn't clear enough. I meant have you sent this patch upstream to the freeimage author.\nI don't want to merge this patch as it is now for two reasons. One, it breaks the build on Mac OS and Linuxbrew aims to be compatible with both Mac and Linux. Two, if Homebrew changes the patch for Mac it will create merge conflicts when I merge Homebrew into Linuxbrew.\nI suggest gist-ing your patch for Linux, and patching this formula like so:\nruby\nif OS.mac?\n  patch :DATA\nelse\n  patch do\n    \u2026 # URL of the gist goes here\n  end\nend\n. Thanks for your contribution, ~~Davy~~ Denis. For future contributions, the preferred commit log message is\nfreeimage 3.17.0: Fix for Linuxbrew\n. :blush: My apologies, Denis.\n. Hah. I think we're stuck with Linuxbrew now. =)\n. @MarcGodard Sorry for the delay in my response. I've just returned from a long vacation.\nThank you for the detailed bug report and excellent troubleshooting. Were you able to install cmake?\n. I'm closing this issue. Please comment if you're still having difficulty installing cmake.\n. Thanks for the bug report. It looks like the line should be\nruby\n@flags ||= cpuinfo[/^(flags|Features).*/, 0].split\n. I haven't fired up my Raspberry Pi in a while, but when I do, I'll test this out.\n. Duplicate of #518\n. I'm back for two more weeks and then gone for two more months. I'm on parental leave. Sorry for the delays that my leave is causing. I'm hoping to bring on more people to help with Linuxbrew. Jake is two months old and thriving.\n. @tdsmith Is very helpful and trying not to become a Linuxbrew maintainer.\nI've met with @danabrand who is interested and works in systems at UBC.\nSome @Homebrew/science people use Linuxbrew.\n. Thanks for your contribution, Takahiro.\n. Updated the README.md.\n- Git 1.7.12.4 or newer\n. New versions should be sent upstream to https://github.com/Homebrew/homebrew\nSee https://github.com/Homebrew/linuxbrew/blob/master/CONTRIBUTING.md\n. Thanks for merging, Xu. I appreciate your help with Linuxbrew.\n. Please report the output of brew gist-logs python3. ```\n/scratchfast/a1moshir/.linuxbrew/Cellar/python3/3.6.1/bin/python3\n-s\nsetup.py\n--no-user-cfg\ninstall\n--force\n--verbose\n--install-scripts=/scratchfast/a1moshir/.linuxbrew/Cellar/python3/3.6.1/bin\n--install-lib=/scratchfast/a1moshir/.linuxbrew/lib/python3.6/site-packages\n--single-version-externally-managed\n--record=installed.txt\nFailed to execute: /scratchfast/a1moshir/.linuxbrew/Cellar/python3/3.6.1/bin/python3\nhttps://gist.githubusercontent.com/anonymous/c03a501563ce727327f885d3e9a8e438/raw/49340f56814d38f51d90fffe826c11e5abd47dd5/post_install.01.python3. Please report\u2026sh\nbrew list python3\nls -l /scratchfast/a1moshir/.linuxbrew/Cellar/python3/3.6.1/bin/python3\n/scratchfast/a1moshir/.linuxbrew/Cellar/python3/3.6.1/bin/python3 --version\n``\n. If you're able to reproduce your issue, please open a new issue at https://github.com/Linuxbrew/homebrew-core/issues. Thanks for your help, Dana!\n. You can tryrm -r /home/jq2/.cache/Homebrew`\nIf that doesn't do the trick, my best guess would be that your kernel or file system does not support file locking, which would be weird.\n. What version of Ruby do you have? Please report\nsh\nruby --version\nand also try\nsh\nbrew install ruby\n. I see the previous SHA1 of a4d316c404ff54ca545ea71a27af7dbc29817088\n\u276f\u276f\u276f curl -L http://zlib.net/zlib-1.2.8.tar.gz |sha1sum\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  557k  100  557k    0     0   386k      0  0:00:01  0:00:01 --:--:--  386k\na4d316c404ff54ca545ea71a27af7dbc29817088  -\n\u276f\u276f\u276f curl -L https://downloads.sourceforge.net/project/libpng/zlib/1.2.8/zlib-1.2.8.tar.gz |sha1sum\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0   345    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100  557k  100  557k    0     0  24094      0  0:00:23  0:00:23 --:--:--  119k\na4d316c404ff54ca545ea71a27af7dbc29817088  -\n. The SHA1 that you are seeing is of the uncompressed TAR file.\nSee https://github.com/Homebrew/homebrew-dupes/pull/197 and https://github.com/Homebrew/homebrew-php/issues/1102\n. Thanks, Dominyk.\n. @danabrand handled the merge last week and is looking into the merge for this week too.\n. @tdsmith Would you accept a patch upstream to Homebrew/homebrew to use unzip rather than tar to extract a .zip file?\n. @rwhogg Please remove the OS conditionals and send this patch upstream to https://github.com/Homebrew/homebrew\nThanks for your contribution, Bob.\n. Duplicate of #518\n. I'm glad to hear that you got it working!\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. The OpenSSL bug will be fixed later today. See #729 \n. The OpenSSL bug is fixed.\n. sqlite is already a dependency of python3.\nruby\n  depends_on \"sqlite\" => :recommended\nThere was a bug fixed in the last week for the python3 formula related to CPPFLAGS. Try reinstalling python3 as David suggested.\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Thanks for your contribution, Alexey.\n. The preferred commit log message is\ngnome-doc-utils: Depends on libxslt for Linuxbrew\n. Mac provides the libxslt dependency, so on Macs we don't need that dependency. No other operating system provides such a guarantee.\n. Thanks for your many contributions, Piotr.\n. The preferred commit log message is dirmngr: Depends on openldap for Linuxbrew\n. Thanks for your contribution, Piotr.\n. The preferred commit log message is\nlibsoup: Depends on libxml2 for Linuxbrew\n. Thanks for your contribution, Piotr.\n. Duplicate of #570\n. It could be rewritten not to use pipefail, but it does need to fail if curl fails.\nruby\nsystem \"/bin/bash -o pipefail -c '/usr/bin/curl -#{curl_flags} #{HOMEBREW_REPO}/tarball/master | /usr/bin/tar xz -m --strip 1'\"\nhttps://github.com/Homebrew/install/blob/master/install#L227\n. How is checking for a failed pipeline handled in standard sh? If you rewrite it portably, perhaps upstream Homebrew will accept it, if the rewrite is not too much uglier than the bashism.\n. What system do you have that does not have bash installed? Does it use dash?\n. I'm going to close this issue.\nYes, there's a dependency on bash.\n. I can confirm that I see this build failure as well. A work around is to download the file jdk-8u60-linux-x64.tar.gz from http://www.oracle.com/technetwork/java/javase/downloads/index.html and move it to ~/.cache/Homebrew/jdk-1.8.0-60.tar.gz.\nThe cookie accepting code is written by @jbaum98. Jake, can you fix it for us?\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/jdk.rb#L5\n. I tested it. It works. I've merged #596\n. The preferred commit log message is jdk: Fix JdkDownloadStrategy for Linuxbrew\n. Hi, Jake. The redirect doesn't seem to be the issue. It still fails for me:\n$ brew fetch jdk7 -sfv\n==> Downloading http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.tar.gz\n==> Downloading from http://download.oracle.com/errors/download-fail-1505220.html\n/gsc/btl/linuxbrew/opt/curl/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux) http://download.oracle.com/errors/download-fail-1505220.html -C 0 -o /home/sjackman/.cache/Homebrew/jdk7-1.7.0.75.tar.gz.incomplete --cookie oraclelicense=accept-securebackup-cookie -L\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  5307  100  5307    0     0   276k      0 --:--:-- --:--:-- --:--:--  323k\nDownloaded to: /home/sjackman/.cache/Homebrew/jdk7-1.7.0.75.tar.gz\nSHA1: 43eabe42bb8d6e8dfe33f3a815f265ac5d5bb586\nSHA256: 80212f7748c2671b89b6085000717c747851db004409dce3bb97f3a2aeb91cdd\n==> Verifying jdk7-1.7.0.75.tar.gz checksum\nWarning: Formula reports different SHA1: 912996f71f19635d9c85f3016c918f2b359a8011\n. Hmm. curl on the command line works for me though. That's weird.\n$ curl -L --cookie oraclelicense=accept-securebackup-cookie http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz |sha256sum\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100   288    0   288    0     0    908      0 --:--:-- --:--:-- --:--:--   908\n100  172M  100  172M    0     0  9681k      0  0:00:18  0:00:18 --:--:-- 8660k\nebe51554d2f6c617a4ae8fc9a8742276e65af01bd273e96848b262b3c05424e5  -\n. Also it looks like CurlDownloadStrategy already adds -L to the options.\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/download_strategy.rb#L337\n. The problem is that actual_urls, which tries to follow redirects to determine the actual URL, doesn't pass the --cookie option to the curl command line. Grumble.\n. It looks like its purpose is to check if a https URL is insecurely redirecting to a http URL.\nSee https://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/download_strategy.rb#L274-L283\n. Ah, yes. Good call.\n. Works for me. Thanks, Jake!\n. Or upgrade your version of Ruby if possible.\n. Resolved by #808, thanks to @maxim-belkin.\nRuby 1.8 has only integer mode chmod. Ruby 1.9 introduced string mode.\n. @DomT4 @xu-cheng Any effort that you can pitch in is appreciated.\nWould you please add @dpo and @tseemann to the Homebrew/linux team?\n. I tried, but I don't believe I do have the rights to change the linux team. \n. @danabrand Would you be able to merge Homebrew into Linuxbrew again this week?\n@dpo @tseemann @DomT4 @xu-cheng Could one of you take a look at Dana's merge and push the branch danabrand/master to linuxbrew/master and danabrand/homebrew to linuxbrew/homebrew?\nAfter a few weeks of that arrangement, could you please add @danabrand to the Homebrew/linux team so that she can push herself?\n. @xu-cheng ~~Can you make the Homebrew/linux team public (not secret), and if you think it's a good idea, make all the Homebrew/* teams public?~~\nNevermind. I just read Homebrew/homebrew#44861\n. Thanks, Mike.\n. Great. I've added you to the team, Ian.\n. Dana has merged homebrew/master into linuxbrew/master. That commit is at danabrand/master. Could someone in the @Homebrew/linux team please take a look at that commit and push it to linuxbrew/master? I've tested it, and it looks good, but I won't be doing any testing while I'm in Thailand. =)\nPlease also push the branch danabrand/homebrew to linuxbrew/homebrew. It's a branch at the point that homebrew/master was merged.\n. Shaun here checking in from Thailand. Thanks so much for feeding and watering Linuxbrew in my absence, Dana and Dominyk. I appreciate your help!\n. Thank you very much for tackling this merge even though you're busy, Dana, and thanks Dominyk for supporting her. If bottle :unneeded was broken before this merge, I suggest leaving it broken in this merge and fixing it with a separate commit after the merge. If this merge otherwise works, push! Thank you everyone.\n. I hope that your ski injury has recovered, Dana. Thanks again both of you for your efforts! Liz and I have left Thailand and are now in Bali, Indonesia.\n. Hi, friends. I'm back from vacation and sleeping in my own bed again after three months away. Thanks for all your help in my absence. As much as you have time available, I encourage you all to continue contributing to Linuxbrew! I really need the help.\n. Now on to some trickier technical stuff. I started a git merge homebrew/master today and got 200 merge conflicts! Whew! I believe that these merge conflicts are a results of the merges on 2015-11-10 and 2015-11-16 and the subsequent reverts on 2015-11-17. git now thinks that a bunch of files are modified on the linuxbrew branch, and these files create merge conflicts. Here's a good blog post on the issue: Git: merging after a revert. His suggestion is to revert the revert commits. In our case however there are three revert commits and there have been 8 commits since the revert commits, so I don't think that strategy is straight forward.\nMy plan is to checkout the merge of 2015-10-15 602d9b461deec71f1886ddfc2d8df932e702fc37 and merge homebrew/master into that commit. With that merge done, I'll then merge that commit into the current linuxbrew/master bb453ad33892df0d5560a177890a94810ecc71af, taking the tree exactly as it is from the previous merge commit. i.e. git merge --strategy=ours. This should, if it works as intended, produce a nice clean tree that reverts the most recent 14 commits:\nbb453ad  2015-12-10  dunn.alex@gmail.com  travis: remove conflict marker\nb82c4cf  2015-11-30  dominyktiller@gmail.com  mysql: de-dupe dependency block\n0d0823e  2015-11-30  dominyktiller@gmail.com  profanity: needs libcurl on linux\nbdcfe9b  2015-11-30  dominyktiller@gmail.com  test-bot: resolve merge conflict\nc5ead6b  2015-11-26  dana.brand@ubc.ca  Update formula to use unneeded\nd88a3b3  2015-11-25  dana.brand@ubc.ca  Fixed merge error\ne2b369e  2015-11-25  dana.brand@ubc.ca  Merge branch homebrew/master into linuxbrew/master\nda44282  2015-11-24  inferno1392@mail.ru  Update libpng.rb\n092bbb6  2015-11-17  dominyktiller@gmail.com  Revert \"Merge branch homebrew/master into linuxbrew/master\"\n787d7f9  2015-11-17  dominyktiller@gmail.com  Revert \"Merge branch homebrew/master into linuxbrew/master\"\nc257139  2015-11-17  dominyktiller@gmail.com  Revert \"OS_VERSION fixed\"\n3bd7bda  2015-11-16  dana.brand@ubc.ca  OS_VERSION fixed\n85d75ac  2015-11-16  dana.brand@ubc.ca  Merge branch homebrew/master into linuxbrew/master\ne9b2f2b  2015-11-10  dana.brand@ubc.ca  Merge branch homebrew/master into linuxbrew/master\nI'll cherry-pick the following commit\n0d0823e  2015-11-30  dominyktiller@gmail.com  profanity: needs libcurl on linux\nI want to emphasize that I do really appreciate all the work that was done by everyone between 2015-11-10 and 2015-12-10, and I apologize for my plan to wipe these commits away. My git-fu is just not strong enough to continue with the repo in its current state, and the most efficient and likely-to-succeed strategy for me is to backtrack to the last known-good state. Thanks again for all your help!\n. Here's what I plan to do:\nsh\ngit checkout master\ngit branch linuxbrew-old\ngit checkout 602d9b4\ngit branch --force master\ngit checkout master\ngit merge homebrew/master\ngit merge --strategy=ours linuxbrew-old\ngit push\n. This strategy reduces the number of merge conflicts from 200 to 42, so I think that I'm on the right track. The real test will be in future merges.\n. The merge is going well. I'm testing it now at https://github.com/sjackman/linuxbrew/\nIf all goes well, I'll push it to linuxbrew/master\n. The merge went well and is now pushed to linuxbrew/master!\n. I'm going to close this issue now. If anyone would like to contribute more work to Linuxbrew, I would very much appreciate your help.\n. Sure, Java can be installed with apt-get or brew. It'll have to wait until I'm back from vacation in the new year.\n. Yes, absolutely. Getting Travis CI up and running is my next project after Linuxbrew moves to its own organization.\n. Travis CI for Linuxbrew is up and running! I haven't looked into Docker for Travis yet.\n. I had planned on building bottles on the sjackman/linuxbrew-standalone Docker image. I'm starting to think that there are some benefits to building the bottles on an older distribution, perhaps Ubuntu 12. The compiled bottles should work on Linuxbrew Standalone, but should also work on older systems. The dependencies used from the host system should be glibc and libstdc++. All the other dependencies should be provided by Linuxbrew. That way perhaps Linuxbrew users could use bottles without having to install glibc and gcc (for libstdc++).\n| Distro | glibc |\n| --- | --- |\n| Linuxbrew | 2.19 |\n| Ubuntu 14 | 2.19 |\n| Ubuntu 12 | 2.15 |\n| Ubuntu 10 | 2.11.1 |\n| Ubuntu 8 | 2.3.6 |\n| Ubuntu 6 | 2.3.2 |\n| CentOS 7 | 2.17 |\n| CentOS 6 | 2.12 |\n| CentOS 5 | 2.5 |\n| CentOS 4 | 2.3.4 |\nI'ved moved this comment to https://github.com/Linuxbrew/linuxbrew/issues/380#issuecomment-182012180\n. I've been using sjackman/linuxbrew based on ubuntu:trusty as the base for Docker/Travis instead of sjackman/linxubrew-standalone. It has the same version of glibc used by Linuxbrew (2.19), which is a nice coincidence. The bottles built on Ubuntu 14 work great on Linuxbrew. I've tested a few now. There will be a linuxbrew/linuxbrew soon.\n. Hi, Piotr. I've created a new Dockerfile for Linuxbrew, and there's a new Linuxbrew/linuxbrew docker image created from it.\n. brew tests is oddly failing right now.\n1) Failure:\nIntegrationCommandTests#test_uses [/home/linuxbrew/.linuxbrew/Library/Homebrew/test/test_integration_cmds.rb:629]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n-\"testball1\n-testball2\"\n+\"testball2\n+testball1\"\n2) Failure:\nLanguageModuleRequirementTests#test_good_python_deps [/home/linuxbrew/.linuxbrew/Library/Homebrew/test/test_language_module_requirement.rb:43]:\nExpected #<LanguageModuleRequirement: \"languagemodule\" [:python, \"datetime\", nil]>\nto be satisfied?.\n. > Or do you plan to support OS X in the long term?\nFor the package manager brew and for for the formula, but not for the .travis.yml.\n. > Also: I am not sure whether test-bot behaves correctly, since it tries to tap doomhammer/linuxbrew which in practice means doomhammer/homebrew-linuxbrew (which does not exist).\nThat's a bug. Feel free to submit a pull request if you are able to fix it.\n. That's a weird failure. I'm not sure why the test is saying that 0.2 and 0.3 are expected to be cleaned up. Perhaps you could troubleshoot by printing out the value of f3.installed_kegs right before:\nruby\n    assert_equal f3.installed_kegs[0..1], f3.eligible_kegs_for_cleanup\n. I've seen this test failure too. See #895\n. I've merged Homebrew into Linuxbrew just now. I'm testing out using Docker Cloud running on Amazon EC2 as a CI for building bottles for Linuxbrew.\nhttps://docs.docker.com/docker-cloud/feature-reference/automated-build/\n. The link works for me. I'll guess that it's a permissions issue, that you don't have the perms to view the build log. Once it's up and running I'll sort that out, hopefully. Here's the log:\n==> brew doctor\n==> FAILED\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: Suspicious git origin remote found.\nWith a non-standard origin, Homebrew won't pull updates from\nthe main repository. The current git origin is:\nhttps://9a1bc74ab023883d39a8ba7b145913ebb40de5e1@github.com/DoomHammer/linuxbrew.git\nUnless you have compelling reasons, consider setting the\norigin remote to point at the main repository, located at:\nhttps://github.com/Linuxbrew/linuxbrew.git\nThe error message is because brew test-bot isn't yet set up to integrate with Docker Cloud CI. I'm working on it.\n. What about the Travis failure though. Does that make sense to you?\n. > Building ruby is the most time-consuming thing here\nCan we use the Ruby deb rather than brew ruby?\n. No apologies needed for bothering me. What are the advantages as you see it of using a Docker container rather than using the usual Travis build bot?\n. > One thing for certain: playing with Docker is more reproducible, so theoretically anybody can look at Travis error and then check it locally.\nThat is in advantage. It is quite frustrating trying to reproduce a Travis build failure locally. Do you know whether the Travis build machine images are available on Docker Hub?\n. Hi, Piotr. I would like to continue testing Ubuntu 12 precise using Travis CI. It's important to test that installing glibc and gcc automatically works for older distributions.\nUbuntu 14 trusty is being tested using Docker cloud. That's my biggest reason for not merging this PR. I also want to test Linuxbrew on a variety of platforms, and linuxbrew/linuxbrew is already being tested on Docker Cloud.\nI know that this patch precedes my use of Docker Cloud, which is relatively recent.\nI have thought about enabling Travis testing on both Ubuntu 12 and Ubuntu 14, but not necessarily using Docker. The downside to adding more dists to the testing matrix, is that tests will take longer, and it's nice to get quick feedback when iteratively testing and updating a PR.\n. Yes, I think so. Sorry, Piotr. This PR raised some helpful discussion. Thanks for your effort.\n. My initial reaction is that I'd prefer to keep Linxubrew within the Homebrew organization. Linuxbrew may not be as stable as Mac Homebrew, but it gets better every day and has over 1,700 :star: now. We now have five people volunteering to help out with Linuxbrew, which is a drastic improvement from just me. I'm afraid that I don't understand the benefits with respect to Travis; perhaps you can elaborate if it's an important point. Now that I can add people to the @homebrew/linux team, I have all the control over teams that I need.\nI leave traveling for two months this Friday, and changing the organization is going to require some code changes to Linuxbrew and changing URLs and what not. Probably not a lot, but I'd rather not have to tackle that particular job until I get back. I'd appreciate your holding off on this change until the new year.\nI'd appreciate hearing the thoughts of @xu-cheng, @DomT4 and @tdsmith.\n. Hi, Mike. I'll be back in the new year, some time after Jan 3.\n. My preference is to keep Linuxbrew in the Homebrew organization. It shows that Linuxbrew is a part of the Homebrew ecosystem, and not simply a similarly named but unrelated project. I don't see a particular technical advantage to moving Linuxbrew to its own organization.\n. I don't think that moving Linuxbrew to its own organization is going to resolve the matter of users submitting issues to the wrong project. I am keen to hear what short-term changes you think could improve the situation.\nI'm sorry to hear that you think Linuxbrew detracts from Homebrew. I don't believe that's a fair assessment. Linuxbrew has just about two thousand stars on GitHub. That's a significant number of people who have found the project interesting or useful. I personally find it very useful to be able to use the same package manager on both Mac and Linux. That's a feature that's quite unique to Homebrew/Linuxbrew.\nI have a keen interest in quality, and I do as best as I can within my time constraints. I'm a father of two young kids and a PhD student. I agree that Linuxbrew does not have enough maintainers. I need more help.\n. Thanks to everyone who has taken the time to compose their thoughts. I'm following this thread, and I'll contribute my detailed thoughts later today. This conversation has become quite constructive. I'm looking forward to discussing more how we can improve Linuxbrew.\n. Though I would prefer to keep Linuxbrew within the Homebrew organization, I'm okay with moving Linuxbrew to its own organization if you feel strongly about it, Mike. I've registered http://linuxbrew.sh to give Linuxbrew its own wee space on the web.\nThe whitelist/blacklist has been mentioned a few times. It's a good idea. I will start blacklisting software that is known not to work on Linux and which requires work. To develop a whitelist of software that's known to work, I'd like to attempt building every formula with Linuxbrew and tabulate the results. What system is in place for creating all the bottles for a new release of Mac OS? Perhaps I can use that system for this purpose. If Travis is up to this grand task, then perhaps moving Linuxbrew to its own organization with its own pool of workers would be helpful. If not Travis, I can try using the computer cluster at work, but using publicly accessible tools would be preferable.\nI'd appreciate the help of anyone, particularly those familiar with the Homebrew Travis build system, that would like to help out with this project.\n. I've invited you to the Linuxbrew org, Mike. The portability improvements planned for Homebrew and bottle support for Travis are exciting.\n. I'm visiting family in Montr\u00e9al from Jan 14\u201318 and will have limited access to the Internet. Shall we hold the migration until after I return?\n. I fly back tonight, so go ahead with the migration.\n. Great! I'll check it out tonight and do a bit of work on my side\u2026 Change Homebrew/linuxbrew to Linuxbrew/linuxbrew in the code base. Redirect http://linuxbrew.sh to the new org. http://brew.sh/linuxbrew/ is giving a 404 error now. :cry: Set up Travis CI. This last one is clearly a bigger project, but a fantastic one when it's finally working.\n. Mike, could you redirect http://brew.sh/linuxbrew to http://linuxbrew.sh ?\n. Thanks for the speedy response, Mike!\n. How is this handled in other distributions of Linux? I see that Linux from Scratch uses --enable-obsolete-rpc. Why is RPC obsolete, and what is supposed to replace it?\n. Okay, so TI-RPC is the replacement, but it sounds as though it hasn't yet replaced glibc's RPC implementation. I am :+1: for this patch, but I don't really have time to test it out until I'm back from traveling in the new year.\n. Yeah, can you report on which distro you've tested a Standalone Installation?\nCan you try building this Docker image with your change?\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-gcc-deps/Dockerfile\nhttps://github.com/sjackman/docker-linuxbrew/blob/master/linuxbrew-standalone/Dockerfile\n. Is packaging TI-RPC for Linuxbrew an alternative solution?\n. I'm hesitant to modify glibc before I leave for traveling for two months. I think it's best to wait until the new year.\n. A new version of glibc would be good too. I've never updated glibc so, we'll have to figure out what the upgrade routine is for Standalone users. I seem to recall that the newest version of glibc does not work on CentOS 5, because the kernel is too old (2.6.18). I'll have to package old versions of glibc, I think.\nI'm all for CI testing. (and maybe automated bottling?) I haven't had the time to implement it.\n. Would packaging TI-RPC for Linuxbrew work for you?\n. Great. Tell me how it works out for you.\n. I'm getting a weird Docker error that's preventing updating the Docker images. See https://github.com/docker/docker/issues/19309\nIf your error is different then open a new issue.\n. What's the error message?\n. Does TI-RPC resolve your original use case of compiling libvirt? If so, can you submit a pull request?\n. When I try to compile libtirpc I get this error message:\nlibtool: compile:  /gsc/btl/linuxbrew/bin/gcc-5 -DHAVE_CONFIG_H -I. -I.. -I../tirpc -include config.h -DPORTMAP -DINET6 -D_GNU_SOURCE -Wall -pipe -isystem/gsc/btl/linuxbrew/include -DHAVE_RPCSEC_GSS -I/gsc/btl/linuxbrew/Cellar/krb5/1.14/include -Os -w -pipe -march=core2 -c rpc_soc.c  -fPIC -DPIC -o .libs/libtirpc_la-rpc_soc.o\nIn file included from /gsc/btl/linuxbrew/include/nis/rpcsvc/nis.h:520:0,\n                 from /gsc/btl/linuxbrew/include/rpcsvc/nis.h:1,\n                 from rpc_soc.c:64:\n/gsc/btl/linuxbrew/include/rpcsvc/nislib.h: In function 'libnsl_hidden_proto':\n/gsc/btl/linuxbrew/include/rpcsvc/nislib.h:5:1: error: expected declaration specifiers before 'libnsl_hidden_proto'\n libnsl_hidden_proto (nis_name_of_r)\n ^\nIn file included from /gsc/btl/linuxbrew/include/rpcsvc/nis.h:1:0,\n                 from rpc_soc.c:64:\n/gsc/btl/linuxbrew/include/nis/rpcsvc/nis.h:541:22: error: storage class specified for parameter 'nis_lookup_3'\n extern  nis_result * nis_lookup_3 (ns_request *, CLIENT *) __THROW;\n                      ^\n. Here's the formula that I'm using\n``` ruby\nclass Libtirpc < Formula\n  desc \"A port of Suns Transport-Independent RPC library to Linux.\"\n  homepage \"http://sourceforge.net/projects/libtirpc/\"\n  url \"http://downloads.sourceforge.net/project/libtirpc/libtirpc/1.0.1/libtirpc-1.0.1.tar.bz2\"\n  sha256 \"5156974f31be7ccbc8ab1de37c4739af6d9d42c87b1d5caf4835dda75fcbb89e\"\n  # tag \"linuxbrew\"\ndepends_on \"homebrew/dupes/krb5\" unless OS.mac?\ndef install\n    system \"./configure\",\n      \"--disable-debug\",\n      \"--disable-dependency-tracking\",\n      \"--disable-silent-rules\",\n      \"--prefix=#{prefix}\"\n    system \"make\", \"install\"\n  end\nend\n``\n. I've created a pull request forlibtirpchttps://github.com/Linuxbrew/linuxbrew/pull/765\n.libtirpcdoesn't appear to be a drop-in replacement forglibc`'s RPC:\n$ brew list libtirpc\n/home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.0.1/etc/netconfig\n/home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.0.1/include/tirpc/ (34 files)\n/home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.0.1/lib/pkgconfig/libtirpc.pc\n/home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.0.1/lib/ (4 files)\n/home/linuxbrew/.linuxbrew/Cellar/libtirpc/1.0.1/share/man/ (36 files)\n. I've added --enable-obsolete-rpc to glibc. Thanks, Piotr.\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. For future contributions, the preferred commit log message is\nqemu: Disable cocoa for Linxubrew\n. Thanks for your contribution, Piotr.\n. Thanks for the patch, Piotr.\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Hi, Piotr. Although I agree with this patch in principle, it creates a cyclic dependency. Because gpatch is in the tap homebrew/dupes it requires git to build, and if git or any of its dependencies have a patch, it'll require gpatch to build.\n. Yeah, bottling it is a good idea. I can't update the formula though because gpatch lives in Homebrew/dupes, and I don't have write access to Homebrew/dupes. Also bottling may break the dependency cycle for the common case, but the issue will still come up when bootstrapping or on a system that doesn't use bottles. My recommendation is to add\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/gpatch.rb\nto your installation instructions, which doesn't require git to tap Homebrew/dupes.\n. I've thought a bit more, and I think this patch is a good plan, but it needs two things. 1. A PatchRequirement class to test whether patch is already in the PATH, in which case gpatch is not necessary, and 2. I'll copy gpatch.rb from Homebrew/dupes into Linuxbrew to prevent the dependency cycle described above.\nSee GitRequirement for what PatchRequirement should look like.\n. Yeah, I changed my mind about that too. It's in the core repository, and it's bottled, so the PatchRequirement isn't really needed.\n. Yes, it should check that the executable is native before running patchelf.\n. True. I don't want to refactor or rename inside Linuxbrew though. The patch should be kept as small as possible to ease the merging maintenance.\n. Non-ELF executables (namely Mac executables) no longer have their executable bit set by the Linuxbrew post-installation cleanup code.\n. See also #924 \n. This patch should fix the -lintl error:\nhttps://github.com/Linuxbrew/linuxbrew/pull/975\n. That is a very strange error message. I suspect that the NFS file system is relevant. I also run Linuxbrew on a NFS file system though, and haven't run into this error message. Does brew install hello work?\n. You definitely have bigger problems, though I'm not sure what exactly. Sorry. :grimacing: I leave for a two-month trip tonight, so I won't be able to help you troubleshoot.\n. Try it in a non-NFS partition to eliminate that possible source of trouble.\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Can you report the exact error message that you observe?\n. Could a smaller version of this patch work that only disables USE_KQUEUE?\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Try instead (note the capital W in %W)\nruby\n      args = %W[\n        TARGET=generic\n        USE_KQUEUE=#{OS.mac ? \"1\" : \"0\"}\n        USE_POLL=1\n        USE_PCRE=1\n        USE_OPENSSL=1\n        USE_ZLIB=1\n        ADDLIB=-lcrypto\n      ]\n. Sorry, that was a typo. It should have been OS.mac?, as you guessed.\nPlease report brew gist-logs haproxy to troubleshoot why USE_KQUEUE=#{\u2026} isn't working.\n. Does the following work?\nruby\n      args = %W[\n        TARGET=generic\n        #{\"USE_KQUEUE=1\" if OS.mac?}\n        USE_POLL=1\n        USE_PCRE=1\n        USE_OPENSSL=1\n        USE_ZLIB=1\n        ADDLIB=-lcrypto\n      ]\n. Thanks for your patience. We'll get there. Try using compact.\nruby\n      args = %W[\n        TARGET=generic\n        #{\"USE_KQUEUE=1\" if OS.mac?}\n        USE_POLL=1\n        USE_PCRE=1\n        USE_OPENSSL=1\n        USE_ZLIB=1\n        ADDLIB=-lcrypto\n      ].compact\n. Last stab\nruby\nargs = %W[\n        TARGET=generic\n        USE_POLL=1\n        USE_PCRE=1\n        USE_OPENSSL=1\n        USE_ZLIB=1\n        ADDLIB=-lcrypto\n      ]\nargs << \"USE_KQUEUE=1\" if OS.mac?\n. Yeah. Sorry it took so much back and forth. Yeah, okay to the TARGET= linux2628.\n. Looks good! Merged. Thanks for your contribution, Hans.\n. That's unusual to use PIE for executables. Why does Alpine do that?\nI don't see any harm in applying this patch, but it'll have to wait until I'm back from vacation in the new year. Feel free to bump this thread then.\n. Ah, yes. I actually thought that was more common even with Redhat and Debian. Perhaps only for shared libraries.\n. Merged, making sure to keep the behaviour unchanged on Mac OS: dylibs should be executable on Linux but not on Mac. Thanks for your contribution, Jonas!\n. I ran into this bug as well.\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. The workaround is super simple. I'm not sure why this bug doesn't affect Mac OS.\nsh\nchmod +x `brew --prefix r`/lib/R/bin/*\nAdding this line to the def install script won't help, because the problem is that the executable bit is being removed by clean_dir which removes the executable bit from files that aren't ELF and don't have a #! line. Adding a skip_clean directive may work.\nruby\nskip_clean \"lib/R/bin\"\nAs a last ditch, adding something like the following to post_install should work\nruby\nchmod \"+x\", Dir[lib/\"R/bin/*\"]\n. On Mac OS, these executables are installed to\nR.framework/Versions/3.2/Resources/bin\nMy best guess is that these framework directories are spared the rampaging clean_dir by default on Mac OS.\n. @tseemann Can you try out this untested patch?\ndiff\n  # Do not remove executable permission from these scripts.\n  # See https://github.com/Linuxbrew/linuxbrew/issues/614\n  skip_clean \"lib/R/bin\" unless OS.mac?\n. Woops. I accidentally fat-fingered and pushed this patch to https://github.com/Homebrew/homebrew-science/commit/32b38d646ea6d34f48a89787547c2d4f9969d9f6. I mean to push a pull request. I'll test it now and hopefully it works\u2026\n. Did you find a workaround to this issue?\n. Odd. Do you know which library wasn't linked correctly?\n. Hi, Alex. I'm hesitant to merge this patch because it creates quite a maintenance burden for me to update these Linux-specific hashes whenever the upstream package is updated. This issue affects a few other formulas as well.\n. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. For future contributions, the preferred commit message is\ngnutls: Fix build for Linuxbrew\n. Thanks for your contribution, Paul.\n. Is libcxxabi useful on Mac as well? If so, please submit this patch upstream to Homebrew/homebrew.\n. Ping? The libcxxabi homepage indicates that it does work on Darwin. Should this patch go upstream to Homebrew/homebrew?\n. This is a known bug that I'm working on fixing. The workaround is\nbrew install pkg-config mongoose\n. I've fixed the doctor message for Linuxbrew. It should now display\nPlease execute `sudo chmod +t /tmp` in your Terminal\n. I'm glad to hear that you found a solution, Andrew.\n. I see that you closed this issue. Is this issue still relevant to you?\n. Hi, Tim. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\nThanks for your offer to translate the web page. Please open an issue upstream at Homebrew/Homebrew with your offer to help.\n. I'm back! I've regenerated the page using the GitHub Pages automatic page generator. The now looks funky to me. Hopefully this is just a cache issue and will resolve itself soon enough.\nhttp://brew.sh/linuxbrew/\n. It was a cache issue. The page looks good now.\n. Hi, David. I'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Thanks for your contribution, David.\n. For future contributions, the preferred commit message is\nmono: Fix build for Linuxbrew\n. I'm on vacation in Thailand until the new year. Sorry that I wasn't able to help. This bug is on my radar.\n. Apparently a workaround for your issue is brew install --cc=gcc rbenv\n. See also #542.\nFixed by #974.\n. The path to crti.o can be specified using either the gcc option -B or the environment variable LIBRARY_PATH, otherwise it uses the host crti.0, which seems to usually work.. index.html is auto generated. Please modify README.md instead.\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. Fixed.\n. Thanks for this patch. Could you instead add it to the dependencies section of README.md?\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. yum install irb is in the RedHat installation instructions:\nhttps://github.com/Homebrew/linuxbrew/blob/master/README.md#fedora-centos-or-red-hat\n. Install tcl-tk without support for X11. See brew options tcl-tk\n. I'm glad to hear that you found a solution.\n. This error message is weird:\nconfigure:4892: /home/bob/.linuxbrew/bin/gcc-5 -o conftest -Os -w -pipe -march=core2 -isystem/home/bob/.linuxbrew/include -L/home/bob/.linuxbrew/lib -Wl,--dynamic-linker=/home/bob/.linuxbrew/lib/ld.so -Wl,-rpath,/home/bob/.linuxbrew/lib conftest.c -lncurses  >&5\n/usr/bin/ld.bfd.real: /tmp/ccOPjUqq.o: undefined reference to symbol 'dlopen@@GLIBC_2.2.5'\n//lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from command line\ncollect2: error: ld returned 1 exit status\nhttps://gist.github.com/rwhogg/863370fb3daa96f109de#file-config-log-L725-L728\nIf you want to try a workaround that might help:\nbrew install binutils glibc\nbrew postinstall gcc\nIf it does help, I really don't know why that should be necessary on Ubuntu 14. It's quite strange.\n. Never mind. My last comment is a red herring. The following configure check works just fine.\nhttps://gist.github.com/rwhogg/863370fb3daa96f109de#file-config-log-L818\nchecking for dlopen in -ldl\n. Maybe this formula just doesn't like gcc 5.3. Try perhaps brew install ccze --cc=gcc-4.8\n. Good questions, Andrew.\nI'm on vacation in Thailand until the new year. Please bump this thread after then. Sorry for the delay.\n. The alias is your best bet. What environment variable in particular do you need to pass through?\n. Thanks for the bug report, Andrew. brew install gcc boost should also work as a workaround.\n. Yes, correct. I'm on vacation until the new year. Please bump this thread after then. Sorry for the delay.\n. Which Linux distribution are you using, and which version of GCC does it include?\nCreating versioned GCC symlinks should resolve your issue.\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. ENV.compiler == :gcc in Homebrew implies GCC 4.2. If you use a versioned symlink as your Homebrew compiler, such as g++-4.8, it should resolve this issue.\n. It looks to me like an upstream build issue, Have you contacted the upstream authors with this build issue?\n. Does this issue still affect you? Have you contacted the upstream authors?\n. @domt4 Could you please lend a hand resolving this issue, Dominyk?\n. Thanks for rallying, friends. Nothing like calamity to bring a team together. =)\nThere's no need to wait for my return. Please do steam ahead in my absence. Having two people test and sign off on the merge is a good idea.\n. See https://github.com/Homebrew/linuxbrew/issues/600#issuecomment-169105973 for how I've resolved these reverted merge commits.\n. @mikemcquaid Sorry, Mike. Slip of the finger.\n. Interesting. Homebrew doesn't support I believe any other ruby than the standard ruby. Does JRuby work just fine otherwise after this patch? What's the motivation for using JRuby instead of Ruby?\nI'm on vacation in Thailand until the new year. I won't be able to address this issue until I return. Sorry for the delay.\n. Merged. Thanks for your contribution, Wesley.\n. This issue was moved to Homebrew/homebrew-science#3034\n. I'm afraid that I don't have the time available to help troubleshoot individual formula. If you're able to find a work around or solution, please post it here. Sorry that I couldn't be of more help.\n. It looks to me like an error with your ruby interpreter. I'm afraid that I don't have time available to help troubleshoot this. Sorry I couldn't be of more help.\n. @danabrand Do you have the time for a merge with some help from the above commenters, whom I have just unilaterally volunteered? :smirk:\n. @DomT4 @tseemann Can you please give Dana a hand by answering her questions and testing the merge before pushing?\n. I'm traveling until the new year. If you haven't yet found a workaround or solution for this issue, please bump this thread after then. Sorry for the delay.\n. I'm not able to reproduce this issue. Does this issue still affect you? Please reopen this issue if it does.\n. This bug lies in Linuxbrew. @danabrand and @DomT4 are looking into it.\n. Try brew update. The current version is 6.9.3-0\nI'm on vacation until Tuesday. My replies may be delayed.\n. I'm traveling until the new year. If you haven't yet found a workaround or solution for this issue, please bump this thread after then. Sorry for the delay.\n. I'm traveling until the new year. If you haven't yet found a workaround or solution for this issue, please bump this thread after then. Sorry for the delay.\n. Do you need subversion support for git? The simplest workaround is to omit --with-brewed-svn.\nIf you need subversion support, another workaround is brew install subversion --without-serf.\nThe serf http library requires kerberos, which does not have a Linuxbrew formula.\nYou could install kerberos using your system's package manager.\nSee #182 and #408\n. Please report this issue upstream to the hhvm authors and ask them whether they would like to support Linuxbrew.\n. I'm traveling until the new year. If you haven't yet found a workaround or solution for this issue, please bump this thread after then. Sorry for the delay.\n. No, sorry. The user is responsible for configuring his/her shell environment.\n. Linuxbrew aims to use its own libraries as much possible. Try brew install gtk. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. I've merged Homebrew into Linuxbrew, which updated boost to 1.59.0\n. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. @DomT4 Any idea why brew gist-log would not work?\n. Ah, confusing that it gives a 404 rather than a 403, but that's a helpful lead.\n. To fix this error, go to https://github.com/settings/tokens\nSelect edit for your HOMEBREW_GITHUB_API_TOKEN\nEnable the checkbox for gist\nSelect Update token\n. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. Looks like a bug in Linuxbrew to me. I'm on vacation and back in the new year.\n. I can't reproduce this issue. Possibly it was fixed in the last merge.\n. This case is handled in the core code here: https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/formula_support.rb#L16-L17\n. You'll likely have to remove and reinstall Linuxbrew. Sorry for the hassle.\n. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. See issue should be fixed by ce169f5\n. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. Can you instead add /work/asr2/zeyer/linuxbrew/bin to your PATH?\n. Please submit a pull request against the brew doctor check if you're inclined.\n. I'm on vacation until the new year. If this issue is still a problem for you after then, please bump this thread. Sorry for the delay.\n. It looks like perhaps there's a cyclic dependency. Are there other formula in the cycle, or just git?\n. Thanks for reporting this bug. I'll look into it in a couple of days once I've returned from vacation.\n. Very true!\n. See also #700\n. See https://github.com/sjackman/docker-linuxbrew/blob/91f509802167f10a1ba9394c3750197b9a6eb9b6/linuxbrew-standalone/Dockerfile#L6-L8\nTry\n``` sh\nInstall git without tcl-tk to prevent the error:\nTapping homebrew/dupes. You must: brew install git\nRUN brew install git --with-brewed-curl --with-brewed-openssl --without-tcl-tk\n``\n. @albertz I'm experimenting with rolling out bottles (precompiled binaries) on Linuxbrew, and that requires updatingglibcon older systems withglibc< 2.19. See #380. You're my guinea pig. Congratulations? If you wish to opt out of being my guinea pig, usebrew install -s gitorexport HOMEBREW_BUILD_FROM_SOURCE=1.\n. @al-the-x Please report the error message that you're seeing andbrew gist-logs git. The file being removed is named something likelib/5.22.1/x86_64-linux-thread-multi/perllocal.podIn your case there must be other files installed as well.\nPlease runbrew install git -dv` and after the error ask for a shell prompt, then report the files found in the offending directory.\nThe following untested patch may work for you.\n``` diff\ndiff --git a/Library/Formula/git.rb b/Library/Formula/git.rb\nindex 75e012c..9f3d2c8 100644\n--- a/Library/Formula/git.rb\n+++ b/Library/Formula/git.rb\n@@ -155,9 +155,7 @@ class Git < Formula\n     if pod != nil\n       # Remove perllocal.pod, which conflicts with the perl formula.\n       # I don't know why this issue doesn't affect Mac.\n-      pod = Pathname.new pod\n-      rm pod\n-      rmdir [pod.dirname, pod.dirname.dirname]\n+      rm_r Pathname.new(pod).dirname.dirname\n     end\n   end\n``\n. Great! Glad to hear it.\n. New versions are merged from Homebrew into Linuxbrew usually once per week but I'm on vacation until the new year. Sorry for the delay. Please read CONTRIBUTING.md\n. Yes, the output could be tidied up for Linuxbrew. In particular, it should show the compiler path and version. I'm on vacation until the new year.\n. The output ofbrew config` is now much improved for Linuxbrew.\n\u2026\nKernel: Linux 2.6.18-371.1.2.el5 x86_64 GNU/Linux\nOS: CentOS release 5.11 (Final)\nOS glibc: 2.5\nOS gcc: 4.1.2\nLinuxbrew glibc: 2.19\nLinuxbrew gcc: 5.3.0\nClang: 3.6 build 0\n\u2026\n. I'm on vacation until the new year. Please bump this thread after then. Sorry for the delay.\n. Here's the relevant error. I'm not sure what's causing it.\nhttps://gist.github.com/anonymous/9b768eca929eb0922372#file-01-configure-L19\nImportError: cannot import name urlencode\n. I'm able to install node 5.4.0 without any errors with a small patch that I made today. Can you try again and report back?\n. Since the error message that you're seeing is related to Python, you may want to see if brew install python resolves your issue.\n. What version of system gcc are you using? What's the problem with boost.log? Please post a build log. I'm on vacation until the new year. Sorry for delays in my response.\n. What is the default version of GCC with Ubuntu 14.04?\n. Does boost 1.59 build correctly for you with gcc 4.8.4? If not, please report brew gist-logs boost\n. Did your pull request #643 not resolve this issue for you?\n. Glad to hear it. Thanks for the update, Andrew.\n. Thanks for the workaround. This issue will be fixed in the new year.\n. This issue should be resolved by e61395214440500656a208c2595d37bc62c9aa94\nThanks for the bug report, Qi.\n. New versions should be sent upstream to Homebrew. Please see CONTRIBUTING.md\n. This issue will be fixed in the new year when Homebrew is merged into Linuxbrew. Thanks for the bug report.\n. New versions should be submitted upstream to Homebrew. Please read CONTRIBUTING.md\n. No worries. Homebrew will be merged into Linuxbrew after the holidays.\n. Duplicate of #665\n. This issue will be resolved when Homebrew is merged into Linuxbrew in the new year.\n. Thanks for the bug report. Yes, this error is not expected. I'll look into it once I'm back from vacation.\n. Coincidentally, I ran into this issue myself recently. It should have been fixed in\n181d0e9 libxml2: Fix --with-python for Linuxbrew\n. New versions should be sent to Homebrew. Homebrew is merged into Linuxbrew weekly. Please see CONTRIBUTING.md\n. Is curl only a build-time dependency or also a run-time dependency?\n. Please report the exact error message that you see without this patch, or brew gist-logs rtorrent\n. ```\nchecking for libcurl... no\nconfigure: error: Package requirements (libcurl >= 7.15.4) were not met:\nNo package 'libcurl' found\n``\n. Based on this error message, I don't think it's a:builddependency. Modified and merged. Thanks for your contribution, Peter.\n. Please send this patch upstream to https://github.com/Homebrew/homebrew\n. The taphomebrew/apacheis not supported by Linuxbrew. That being said\u2026\nTrybrew edit httpd24` and change\nruby\n  depends_on \"homebrew/dupes/zlib\"\nto\nruby\n  depends_on \"zlib\"\n. See https://github.com/sjackman/docker-linuxbrew/blob/91f509802167f10a1ba9394c3750197b9a6eb9b6/linuxbrew-standalone/Dockerfile#L6-L8\nTry\n``` sh\nInstall git without tcl-tk to prevent the error:\nTapping homebrew/dupes. You must: brew install git\nRUN brew install git --with-brewed-curl --with-brewed-openssl --without-tcl-tk\n```\nI think that perhaps --without-tcl-tk should be the default on Linux. The downside is that the GUI gitk won't be built. What do you think?\n. > In that case you wouldn't benefit from the binary version already on Bintray, am I right? Or is that only an homebrew (for Mac OS) thing?\nBottles are only created automatically for Mac. Linux can use bottles, but they're not created automatically.\n\nMaybe the brewed-curl and brewed-openssl options should be the default on Linux, too.\n\nYes, I think that would be a good idea.\n. I've change the tcl-tk dependency of git from recommended to optional.\n. This issue will most likely be fixed by tomorrow. Try brew update tomorrow.\n. sys/cdefs.h should be provided by glibc.\n. Please send this patch upstream to https://github.com/Homebrew/homebrew\n. I don't believe Java version checking is implemented.\nTry brew install jdk\n. I'd be happy to accept this feature if you have the time and inclination to submit a pull request.\n. Yes. I agree. I'll fix this.\n. Fixed. Thanks for the bug report, Bob.\n. This issue was moved to Homebrew/homebrew-science#3179\n. I don't have a proper fix for this issue just yet. The workaround is:\nsh\nLD_LIBRARY_PATH=`brew --prefix gmp`/lib brew upgrade gmp\n. https://gist.github.com/anonymous/5484cff5aa44fd12cc9b#file-config-log-L113\n/toolbox/NGS/.linuxbrew_amd/Cellar/gcc/5.2.0/libexec/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1: error while loading shared libraries: libgmp.so.10: cannot open shared object file: No such file or directory\n. This bug was reported in #159 and fixed in f383493, but was somehow unintentionally reverted, probably in a merge. It's fixed once again. Thanks for the bug report.\n. I'm seeing the following error. Did you happen to encounter this error?\nchecking GC library exists... yes\nchecking gc.h usability... yes\nchecking gc.h presence... yes\nchecking for gc.h... yes\nchecking for GC_init in -lgc... no\nchecking GC library location... /usr /usr/local /var/tmp/sjackman/w3m20160109-28154-s4gmh8/w3m-0.5.3/.brew_home\nchecking /usr... checking for GC_init in -lgc... no\nchecking /usr/local... checking for GC_init in -lgc... no\nchecking /var/tmp/sjackman/w3m20160109-28154-s4gmh8/w3m-0.5.3/.brew_home... checking for GC_init in -lgc... no\nconfigure: error: libgc not found\n. No worries, Reto. It was more of a curiosity question. I suspect that the build script needs a flag to tell it where the gc library is located.\n. No worries. I'm glad that I could help.\n. Do you have access to a Mac, and does this formula build on a Mac? New formulas should be submitted upstream to Homebrew/homebrew. Homebrew is merged into Linuxbrew on a weekly basis.\nPlease see CONTRIBUTING.md\n. https://gist.github.com/anonymous/294cd8ab5d71412481cc#file-01-python-L17\nImportError: No module named setuptools\nSee https://github.com/Homebrew/linuxbrew/issues/562#issuecomment-141694092\nTry sudo apt-get install python-setuptools\nand possibly also sudo apt-get install python-dev\nI'd be curious to learn if only python-setuptools is need or if python-dev is needed as well.\nAre you on a Ubuntu/Debian system?\n. Glad to hear that you got it working. I've added python-setuptools to the list of dependencies of Linuxbrew.\nhttps://github.com/Homebrew/linuxbrew/blob/master/README.md#debian-or-ubuntu\n. Great! I'm glad to hear that it's all working.\n. Your error is not related to this project, Linuxbrew.\n. Linuxbrew does not run on Windows 7. I think that you have the wrong project. What are you trying to do, or what software are you trying to run?\n. Set export HOMEBREW_CC=gcc-4.8\nThis configuration options appears to be undocumented.\n. If you'd like to use a more recent GCC, brew install gcc will work as well.\n. HOMEBREW_CC must not include the absolute path, just gcc-4.8\n. Try brew tap homebrew/versions and HOMEBREW_CC=gcc-4.8 brew install mysql\n. Glad to hear it!\n. I don't know why it fails, but I recommend using\nbrew install git --with-brewed-curl --with-brewed-openssl --without-tcl-tk\nIn fact, --without-tcl-tk is already the default, and I plan on changing --with-brewed-curl --with-brewed-openssl to the default as well. See also #700 \n. The options --with-brewed-curl --with-brewed-openssl --without-tcl-tk are now all default.\nDoes it build now with the system GCC 4.8?\n. -isystem is used so that header files in the package being compiled are searched before #{HOMEBREW_PREFIX}/include.\nPython is weird in that its build system parses CPPFLAGS looking for directory specified by -I, but it ignores directories specified by -isystem.\nThere's a fix over here: https://github.com/Homebrew/linuxbrew/pull/460\nAnd the original issue here: https://github.com/Homebrew/linuxbrew/issues/420\n. This issue should hopefully be fixed now by cd680d7281f1b59b9603853403f562bd70ac97d2\n. Glad to hear that you found a workaround.\n. My guess is that executables critical to your build, like coreutils and autotools, depend on libraries installed by gcc such as libstdc++ and libgcc_s. This upgrade issue is a big problem and needs to be resolved. Adding the previous version's lib to LD_LIBRARY_PATH and bin to PATH during the upgrade is one solution. It could potentially create problems, but would probably fix more problems than it creates.\n. Thanks for your contribution, Chris.\n. make check has failed for some reason. I'll see if I can reproduce it.\nSee https://gist.github.com/anonymous/aa923f4067ca605ad868#file-02-make-L1454\n. > How is it that I didn't have to give the full path to the ncurses files?\nThe path of the source files is relative to the path of the destination directory.\nThose symlinks are now installed by the ncurses formula itself.\nhttps://github.com/Homebrew/homebrew-dupes/blob/master/ncurses.rb#L78-L80\nIf it's working for you, then there's nothing you need to do.\n. The destination file is relative to the current working directory, but the source file is relative to the destination file. It is a bit odd.\n. Hi, Dan. The relevant error is\n/data/home/dfornika/.linuxbrew/Cellar/r/3.2.3/lib/R/bin/Rcmd: line 62: exec: config: not found\nhttps://gist.github.com/anonymous/5496690e63ee1b9ff4c4#file-01-python-L15\nIt's cause by this bug in the R Linuxbrew formula: #614\nThe workaround is\nsh\nchmod +x /data/home/dfornika/.linuxbrew/Cellar/r/3.2.3/lib/R/bin/*\n. Does this patch resolve your issue?\n``` ruby\ndiff --git a/Library/Formula/lua.rb b/Library/Formula/lua.rb\nindex 514b860..e383dab 100644\n--- a/Library/Formula/lua.rb\n+++ b/Library/Formula/lua.rb\n@@ -61,7 +61,7 @@ class Lua < Formula\n     ENV.universal_binary if build.universal?\n # Subtitute formula prefix in `src/Makefile` for install name (dylib ID).\n\n\ninreplace \"src/Makefile\", \"@LUA_PREFIX@\", prefix\n\ninreplace \"src/Makefile\", \"@LUA_PREFIX@\", prefix if OS.mac?\n# Use our CC/CFLAGS to compile.\n inreplace \"src/Makefile\" do |s|\n``\n. Can this formula be built on Mac OS? If so this formula should be submitted to Homebrew/homebrew. Please read CONTRIBUTING.md\n. Nicely done, and your patch was merged upstream. With the next stable release of nethogs including your patch, please submit to Homebrew.\n. I'm afraid the taphomebrew/phpis not supported by Linuxbrew. If you are able to get this working, I'd appreciate your reporting back here. You could start by trying to installhomebrew/dupes/openldap`.\n. That's great news! Thanks for the feedback.\n\n\nIf you want to use only Linuxbrew libraries and avoid system libraries, try the Standalone Installation instructions for Linuxbrew:\nhttps://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation\n. Thanks for the bug report. Try this patch.\n``` diff\ndiff --git a/Library/Formula/qt.rb b/Library/Formula/qt.rb\nindex ef8d38d..7a2d7cf 100644\n--- a/Library/Formula/qt.rb\n+++ b/Library/Formula/qt.rb\n@@ -133,7 +133,7 @@ class Qt < Formula\n     # for Qt Designer to support formulae that provide Qt Designer plug-ins.\n     system \"/usr/libexec/PlistBuddy\",\n             \"-c\", \"Add :LSEnvironment:QT_PLUGIN_PATH string \\\"#{HOMEBREW_PREFIX}/lib/qt4/plugins\\\"\",\n-           \"#{bin}/Designer.app/Contents/Info.plist\"\n+           \"#{bin}/Designer.app/Contents/Info.plist\" if OS.mac?\n Pathname.glob(\"#{bin}/*.app\") { |app| mv app, prefix }\n\nend\n```\n. This patch worked for me.\n. Great!\n. The relevant error is:\n/usr/bin/gcc -Os -w -pipe -march=core2  -o src/ixar src/xar.o -Wl,-rpath,/home/pierre/.linuxbrew/Cellar/xar/1.5.2/lib -Llib -L/home/pierre/.linuxbrew/lib -Wl,-rpath,/home/pierre/.linuxbrew/lib  lib/libxar.so.1 -lbz2 -lz -lcrypto  -L/home/pierre/.linuxbrew/Cellar/libxml2/2.9.3/lib -lxml2 -lz -lm -ldl\nlib/libxar.so.1: r\u00e9f\u00e9rence ind\u00e9finie vers \u00ab OpenSSL_add_all_digests@OPENSSL_1.0.0 \u00bb\nhttps://gist.github.com/Rudloff/d34fac5f7b0631c5bf60#file-02-make-L79-L80\nI'm not able to reproduce this error myself. It looks like the xar Makefile is ignoring CPPFLAGS, which is resulting in it using the headers of your system's version of OpenSSL, but the libraries of Homebrew's version of OpenSSL. You should report this bug upstream to the xar authors. A workaround would be to remove the OpenSSL development package that includes the header files using your system's package manager.\n. I don't unfortunately have commit permissions to Homebrew/dupes.\n. Superenv might fix this. See #266\n. Misty moved this issue here from homebrew-dupes. The fix should go upstream. Maintaining abandoned software is a pain.\n-L#{HOMEBREW_PREFIX}/lib already appears on the link line, so it appears to be respecting LDFLAGS already:\nhttps://gist.github.com/Rudloff/d34fac5f7b0631c5bf60#file-02-make-L79\n/usr/bin/gcc -Os -w -pipe -march=core2  -o src/ixar src/xar.o -Wl,-rpath,/home/pierre/.linuxbrew/Cellar/xar/1.5.2/lib -Llib -L/home/pierre/.linuxbrew/lib -Wl,-rpath,/home/pierre/.linuxbrew/lib  lib/libxar.so.1 -lbz2 -lz -lcrypto  -L/home/pierre/.linuxbrew/Cellar/libxml2/2.9.3/lib -lxml2 -lz -lm -ldl\nDoes the above patch fix your issue?\nI take back what I said previously about it not respecting CPPFLAGS. I also see -isystem/home/pierre/.linuxbrew/include on the compiler line:\nhttps://gist.github.com/Rudloff/d34fac5f7b0631c5bf60#file-02-make-L46\n/usr/bin/gcc -Os -w -pipe -march=core2   -Iinclude -Iinclude -isystem/home/pierre/.linuxbrew/include -D_GNU_SOURCE -I/home/pierre/.linuxbrew/Cellar/libxml2/2.9.3/include/libxml2 -c lib/macho.c -o lib/macho.static.o\nI'm not sure exactly where the problem is. Sometimes the particular order of the search path is wrong.\n. I'll take a closer look\u2026\n. Oh, yes. I see now. It does use LDFLAGS when linking executables, but not when linking shared libraries.\nhttps://gist.github.com/Rudloff/d34fac5f7b0631c5bf60#file-02-make-L50\n/usr/bin/gcc -shared -Wl,-soname,libxar.so.1 -o lib/libxar.so.1 lib/archive.o lib/arcmod.o lib/b64.o lib/bzxar.o lib/darwinattr.o lib/data.o lib/ea.o lib/err.o lib/ext2.o lib/fbsdattr.o lib/filetree.o lib/io.o lib/linuxattr.o lib/hash.o lib/signature.o lib/stat.o lib/subdoc.o lib/util.o lib/zxar.o lib/script.o lib/macho.o -lbz2 -lz -lcrypto  -L/home/pierre/.linuxbrew/Cellar/libxml2/2.9.3/lib -lxml2 -lz -lm -ldl\nCan you try a smaller patch, something like (untesed)\u2026\n``` diff\ndiff --git a/xar.rb b/xar.rb\nindex eaebb66..94efda1 100644\n--- a/xar.rb\n+++ b/xar.rb\n@@ -20,6 +20,7 @@ class Xar < Formula\n   patch :DATA\ndef install\n+    inreplace \"lib/Makefile.inc.in\", \"$(CC) -shared\", \"$(CC) $(LDFLAGS) -shared\"\n     system \"./configure\", \"--disable-debug\", \"--disable-dependency-tracking\",\n                           \"--prefix=#{prefix}\", \"--mandir=#{man}\"\n     system \"make\"\n``\n. @mistydemeoxarignoresLDFLAGSwhen linking shared libraries, which can cause errors on Linuxbrew (or possibly on Homebrew with--env=std). Would you consider applying the above patch toHomebrew/dupes/xar`?\n. Merged. Thanks for your contribution, Jeff!\nFor future pull requests, the preferred commit log message is\nrtags: Fix for Linuxbrew\n. I'm going to move your issue to Homebrew-science. I think you'll have better luck getting your question answered there. Please post the output of brew gist-logs homebrew/python/scipy.\n. This issue was moved to Homebrew/homebrew-science#3238\n. What error message are you seeing? Please report brew gist-logs cairo\nDoes it help to sudo apt-get install libx11-xcb-dev?\n. Ah, I see. Does installing libx11-xcb-dev help?\n. I'd prefer to figure out why xcb is not working rather than disable it. Can you please report brew gist-logs cairo without this patch?\n. Sorry, I meant to say include the first chunk depends_on :x11 => :optional if MacOS.version > :leopard || OS.linux? but not the second chunk --enable-xcb=no and report brew install cairo --with-x11; brew gist-logs cairo\n. Does sudo apt-get install libxcb-render0-dev help?\nWhat version of xcb and xcb-render do you have installed?\n. https://gist.github.com/Rudloff/229344610460955b98fd#file-config-log-L2356-L2357\nPackage xcb was not found in the pkg-config search path.\nPerhaps you should add the directory containing `xcb.pc'\nSet PKG_CONFIG_PATH to the directory containing xcb.pc.\nSee also #47\n. Correct. The :x11 dependency has no effect on Linuxbrew.\n. I've merged the first chunk of this patch.\ndifff\n-  depends_on :x11 => :optional if MacOS.version > :leopard\n+  depends_on :x11 => :optional if MacOS.version > :leopard || !OS.mac?\nThank you for your contribution, Pierre.\n. @mikemcquaid Hi, Mike. brew tests --no-compat on Travis with Ruby 1.9.3p551 fails with the error message\ntestball.rb:1:in `<top (required)>': uninitialized constant Formula (NameError)\nAny idea why? It succeeds on another machine with Ruby 2.3.0p0.\n. I haven't been able to reproduce this issue outside of Travis. Switching from Ruby 1.9 to Ruby 1.8 didn't resolve the issue. I haven't tested, but it seems like changing\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Homebrew/test/test_formula.rb#L2-L3\nrequire \"testing_env\"\nrequire \"testball\"\nrequire \"formula\"\nto\nrequire \"testing_env\"\nrequire \"formula\"\nrequire \"testball\"\nmight resolve this (untested, but I'll give it a shot). compat imports formula\n. @mikemcquaid This patch fixed the issue on Linuxbrew. I have no idea as to why it does not also affect Homebrew on Mac.\n``` diff\ncommit 4eab3f114df0ed95a7bf1e4fc7ae6db2e4e82f3a\nAuthor: Shaun Jackman sjackman@gmail.com\nDate:   Wed Jan 20 09:05:47 2016 -0800\ntests: Fix test_formula for Linuxbrew\n\nbrew tests --no-compat on Travis fails with the error\ntestball.rb:1:in `<top (required)>': uninitialized constant Formula (NameError)\n\nFix Linuxbrew/linuxbrew#730\n\ndiff --git a/Library/Homebrew/test/test_formula.rb b/Library/Homebrew/test/test_formula.rb\nindex 8f372f6..5356bf5 100644\n--- a/Library/Homebrew/test/test_formula.rb\n+++ b/Library/Homebrew/test/test_formula.rb\n@@ -1,6 +1,6 @@\n require \"testing_env\"\n-require \"testball\"\n require \"formula\"\n+require \"testball\"\nclass FormulaTests < Homebrew::TestCase\n   def test_formula_instantiation\n```\n. Try the following untested patch:\n``` diff\ndiff --git a/Library/Formula/pyqt.rb b/Library/Formula/pyqt.rb\nindex 3ae3491..ed6e3bd 100644\n--- a/Library/Formula/pyqt.rb\n+++ b/Library/Formula/pyqt.rb\n@@ -27,6 +27,11 @@ class Pyqt < Formula\n   end\ndef install\n+    # Python's setup.py parses CPPFLAGS to learn search paths for the\n+    # dependencies of the compiled extension modules.\n+    # See Homebrew/linuxbrew#420 and Homebrew/linuxbrew#460\n+    ENV.append \"CPPFLAGS\", \"-I#{HOMEBREW_PREFIX}/include\" if OS.linux?\n+\n     # On Mavericks we want to target libc++, this requires a non default qt makespec\n     if ENV.compiler == :clang && MacOS.version >= :mavericks\n       ENV.append \"QMAKESPEC\", \"unsupported/macx-clang-libc++\"\n``\n. It seems to be ignoring the value ofCPPFLAGS`. I'm sorry that I don't have the time to help you debug further. If you're able to find a solution please comment here or submit a pull request.\nhttps://gist.github.com/Rudloff/acc153de4f58907bbf9e#file-03-make-L14\ng++ -c -pipe -fno-exceptions -O2 -Wall -W -D_REENTRANT -fPIC -DSIP_PROTECTED_IS_PUBLIC -Dprotected=public -DQT_NO_DEBUG -DQT_PLUGIN -DQT_CORE_LIB -DQT_SHARED -I/home/pierre/.linuxbrew/Cellar/qt/4.8.7_2/mkspecs/linux-g++ -I. -I/home/pierre/.linuxbrew/Cellar/qt/4.8.7_2/include/QtCore -I/home/pierre/.linuxbrew/Cellar/qt/4.8.7_2/include -I. -I/usr/include/python2.7 -I../qpy/QtCore -I. -o sipQtCoreQGenericArgument.o sipQtCoreQGenericArgument.cpp\n. This issue will be fixed today. See #729 \n. Fixed. Thanks for the bug report.\n. What command are you running that created that error message?\nIs it fixed by brew install zlib?\n. Please report brew gist-logs openssl.\nDo you have the environment variable LD_LIBRARY_PATH set?\n. I'm able to reproduce this issue on Ubuntu 14. Please open a new issue. A workaround is\nsh\nbrew install gcc openssl\n. Interesting bug indeed. Have you reported this bug upstream to the authors of boost?\n. I'd rather not merge this fix here in Linuxbrew because it's not really specific to Linux, but you can submit it upstream to Homebrew/homebrew. They may not accept it because I don't think there are any Mac machines with more than 256 cores.\n. Thanks for the bug report, John. Here's a workaround:\nsh\nHOMEBREW_MAKE_JOBS=256 brew install boost\n. ### Work arounds\nbrew install pkg-config openssl\nbrew install makedepend openssl\nbrew install -s openssl\nHOMEBREW_BUILD_FROM_SOURCE=1 brew install openssl\n- makedepend: Remove the x86_64_linux bottle\n- makedepend: Change depends_on \"pkg-config\" => :build to depends_on \"pkg-config\"\n. I've finally resolved this issue. I had modified pour_bottle? to check that glibc and patchelf are installed, but I had not modified install_bottle_for?. I mistakenly thought that install_bottle_for? calls FormulaInstaller::pour_bottle?, but it's actually calling Formula::pour_bottle?, which always returns true.\n. Hi. Without a recipe to reproduce the error I can only guess as to what happened. It looks as though curl was compiled against one version of openssl that included SSL_CTX_set_alpn_protos and was then later run using a different version of openssl that does not include that symbol. I can't say why that happened. The workaround as you discovered is brew reinstall curl\n. I wasn't able to reproduce this issue on my box that uses Linuxbrew's gcc, but I was able to reproduce the issue on Travis CI. https://travis-ci.org/Linuxbrew/linuxbrew/builds/104567948\nThis link line is broken:\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/104567948#L352\n/usr/bin/gcc-4.6 -lz -o pigz pigz.o yarn.o try.o zopfli/src/zopfli/deflate.o zopfli/src/zopfli/blocksplitter.o zopfli/src/zopfli/tree.o zopfli/src/zopfli/lz77.o zopfli/src/zopfli/cache.o zopfli/src/zopfli/hash.o zopfli/src/zopfli/util.o zopfli/src/zopfli/squeeze.o zopfli/src/zopfli/katajainen.o -lpthread -lm\n-lz should come at the end of the line, and the -L option is missing, which means that the Makefile is ignoring LDFLAGS. Please report these issues to the upstream author. If you patch the Makefile and submit a PR to the upstream author, we can include that patch in Linuxbrew until the next release of pigz that includes the patch.\n. In the mean time I've added zlib as a dependency of pigz in #747.\n. I forgot to mention a workaround is to install Homebrew's gcc (assuming that you're currently using the system-provided compiler):\nbrew install gcc pigz\n. Fixed by #741\n. Merged #728.\n. Thanks for making the edits so quickly, Bob.\nThe CI check failed due to an odd git installation error:\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/104675657#L1670\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-htmldocs-2.7.0.tar.xz\nAlready downloaded: /home/travis/.cache/Homebrew/git--html-2.7.0.tar.xz\n==> Verifying git--html-2.7.0.tar.xz checksum\nError: Directory not empty - /home/travis/build/Linuxbrew/linuxbrew/Cellar/git/2.7.0/lib/perl/5.14.2\n==> FAILED\nMerged anyway. Thanks for your contribution, Bob!\n. I'm not able to reproduce the above git error on Docker with sjackman/linuxbrew.\n. @rwhogg Would you like to package X11 for Linuxbrew? In particular the X.Org client libraries, not necessarily the X server.\n. No worries, Bob. Thanks for your contributions.\n. https://travis-ci.org/roswell/roswell/jobs/104415062#L1050-L1052\n==> Installing roswell/roswell/roswell dependency: automake\nError: /home/travis/.linuxbrew/opt/m4 not present or broken\nPlease reinstall homebrew/dupes/m4. Sorry :(\nThe automake dependency on autoconf is a :run dependency, which I've actually never seen before.\ndepends_on \"autoconf\" => :run\nI'll have to look into it, but it looks for your log as though autoconf is never being installed, at least I don't see it mentioned anywhere in the log.\n==> Installing dependencies for roswell/roswell/roswell: xz, automake\nIs autoconf already installed? I'm at a loss as to why it's not being installed.\n. https://travis-ci.org/roswell/roswell/jobs/103271959#L239\n==> Installing dependencies for roswell/roswell/roswell: xz, homebrew/dupes/m4, autoconf, automake\nThat looks more like it. Is this issue resolved then, or is that an older log file?\n. Does this workaround work?\nsh\nbrew install autoconf roswell/roswell/roswell\n. It appears the autoconf dependency of roswell is being dropped. I couldn't say why. It's a :build dependency and roswell does not provide a bottle, so the build dependencies should be installed. So, beyond the workaround, I have no solution for you right now.\n. I'm not able to reproduce this issue in a clean Docker sjackman/linuxbrew instance:\n\u276f\u276f\u276f docker run -it sjackman/linuxbrew\n$ COLUMNS=120 brew install roswell/roswell/roswell\n==> Installing roswell from roswell/roswell\n==> Installing dependencies for roswell/roswell/roswell: xz, homebrew/dupes/m4, autoconf, automake\n==> Installing roswell/roswell/roswell dependency: xz\n==> Downloading https://fossies.org/linux/misc/xz-5.2.2.tar.gz\n. I'm able to reproduce this error with brew install rtorrent.\nIt should install a long list of 12 dependencies autoconf automake cppunit homebrew/dupes/m4 libtool libtorrent makedepend openssl pkg-config xmlrpc-c xz zlib but only installs automake and then fails with the error message\nError: /home/linuxbrew/.linuxbrew/opt/m4 not present or broken\nPlease reinstall homebrew/dupes/m4. Sorry :(\n. I found a workaround. Tap homebrew/dupes before installing the formula you want. This is definitely a bug.\n\u276f\u276f\u276f brew install rtorrrent\n==> Installing dependencies for rtorrent: automake, libtool, pkg-config, cppunit, makedepend, zlib, openssl, libtorrent\n\u276f\u276f\u276f brew tap homebrew/dupes\n\u276f\u276f\u276f brew install rtorrent\n==> Installing dependencies for rtorrent: homebrew/dupes/m4, autoconf, automake, libtool, pkg-config, cppunit, makedepend, zlib, openssl, libtorrent\n. Yes, it's a bug.\n. Reported upstream at Homebrew/homebrew#48834.\n. Fixed thanks to @xu-cheng in https://github.com/Homebrew/homebrew/pull/48904\n. The 404 error should be fixed upstream in Homebrew/homebrew.\n@tseemann There is no particular tag for 404, just \"build error\".\n. I'm going to close this issue. Please submit a pull request to Homebrew/homebrew resolving the 404. It will be fixed in Linuxbrew following the next weekly merge.\n. Please submit this PR to Homebrew/homebrew.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/104542738\n==> brew audit pod2man\nError: 1 problem in 1 formula\npod2man:\n * A top-level \"man\" directory was found\nHomebrew requires that man pages live under share.\nThis can often be fixed by passing \"--mandir=#{man}\" to configure.\nTo avoid the following error, please push the branch to your personal GitHub repository, and then submit a pull request to Linuxbrew/linuxbrew.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/104542684\n==> brew update-test\nStart commit: origin/master\nEnd   commit: a76f02c558198352f2e62f847283f54e1053f473\n==> Setup test environment...\nCloning into '.'...\ndone.\nCloning into bare repository 'remote.git'...\ndone.\nerror: pathspec 'master' did not match any file(s) known to git.\nError: Failure while executing: git checkout --force master\n==> FAILED\n. Is the patch innocuous on Linux, or is it causing you some grief?\nI don't have a fix for your upgrading openssl/curl issue, but the workaround is simple:\nsh\nbrew fetch openssl curl\nbrew upgrade openssl curl\n. Linuxbrew aims to be portable to both Linux and Mac OS, and stat -c %u does not work on Mac OS.\nI went with ls -nd |awk '{print $3}'. I'm not keen that it requires awk.\nSee http://unix.stackexchange.com/questions/7730/find-the-owner-of-a-directory-or-file-but-only-return-that-and-nothing-else\ndiff\n-if [[ \"$(id -u)\" = \"0\" && \"$(stat -f%u \"$HOMEBREW_BREW_FILE\")\" != \"0\" ]]\n+if [[ \"$(id -u)\" = \"0\" && \"$(ls -nd \"$HOMEBREW_BREW_FILE\" | awk '{print $3}')\" != \"0\" ]]\n. Fixed by #751\n. Nothing related to sonar. I'll look into it.\n1) Failure:\nFormulaAuditorTests#test_audit_file_not_strict_no_issue [/home/travis/build/Linuxbrew/linuxbrew/Library/Homebrew/test/test_cmd_audit.rb:144]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-[]\n+[\"Incorrect file permissions (664): chmod 644 /tmp/d20160127-2270-8slfn/foo.rb\"]\n. Thanks for your contribution, Bob. I ended up reworking the patch to support both 32-bit and 64-bit Mac and Linux. See f2b5694d4e46115e232ab88794df1a9fb8b74ae4\n. I'd suggest that brew install gnu-tar should resolve your issue, but it sounds as though you can't install any software due to this issue. Which version of CentOS are you using?\nLinking your recent version of tar to $HOMEBREW_PREFIX/bin should resolve your issue.\n. To use your own gcc symlink /home/users/wangjunwei/.jumbo/opt/gcc46/bin/gcc to $HOMEBREW_PREFIX/bin/gcc-4.6 and ditto for g++. See https://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\nHomebrew should pick up the new compiler automatically.\n. I can't really help you here. I have no idea what that error message means: gcc: fatal error: environment variable 'JUMBO_ROOT' not defined\nPlease report brew gist-logs hello\nWhat is ~/.jumbo? Is that also a Linuxbrew installation?\n. Okay. Feel free to open up a new issues if you have further questions.\n. No worries.\n. This issue should be resolved by disabling the ENV.universal_binary function:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L296\nAdd return unless OS.mac?\n. Sorry, I wasn't clear. Add return unless OS.mac? to the function ENV.universal_binary in std.rb.\n. Please squash all the commits to a single commit and change the commit log message to \"Disable ENV.universal_binary for Linuxbrew\".\n. Thanks for your contribution, Maxim.\n. I think that the only chunk that should be necessary is args << \"--enable-macos-target=#{MacOS.version}\" if OS.mac?. Does that line alone suffice?\n. Merged. Thanks for your contributions, Bob.\n. Woops. Tagged the wrong issue in a commit. It drives me crazy that there's no way to fix that.\n. I'm not terribly keen on generating the .desktop file unless the upstream software itself creates one. A patch should go upstream to create the .destkop file. Linuxbrew should install that .desktop file to $HOMEBREW_PREFIX/.local/share/applications and link that directory to ~/.local/share/applications. I'd merge a patch that implements that feature.\n. I'm going to close this issue. Feel free to send up a PR if you do implement the feature. It would be similar in spirit (or could even replace) the Homebrew brew linkapps command.\n. Does brew doctor not report any errors? If so, this should be fixed by adding a check_tmpdir_executable test to Library/Homebrew/diagnostic.rb.\n. Which distribution of Linux are you running?\n. Fixed by 3ef02e64a1b484c6ff0388955496ba2b71074a08.\nCan you please test that it has the desired effect? Running brew doctor should report\nWarning: The directory /tmp does not permit executing programs.\nIt is likely mounted \"noexec\". Please add the following to your ~/.bashrc:\n  export HOMEBREW_TEMP=~/tmp\n. Great! Glad to hear it worked.\n. What is the exact error message reported when you run\nsh\necho '#!/bin/sh' >/tmp/foo\nchmod +x /tmp/foo\n/tmp/foo\n. Too bad that the error message isn't more specific/helpful that it's due to the disk volume not being executable. Oh well.\n. Thanks for your contribution, Jonas. Patches that are not specific to Linux should be sent upstream to Homebrew. See CONTRIBUTING.md\n. Thanks, Dominyk.\n@thriqon Homebrew is merged into Linuxbrew on a weekly basis. I also occasionally do merges on special request. Merged and fixed.\n. I won't personally be starting that particular project, but yes it would be possible if someone wanted to tackle it.\n. linuxbrew-binary looks like a good idea to me. I'll wait for it to attract a few more formula, a few more stars and a few more users before I move it to the Linuxbrew organization, but I have no problem with that plan if it catches on with popularity.\nThe 32-bit and 64-bit formulas would be better combined into a single formula. Here's an example of a single binary formula in Homebrew-science that has a binary for Mac and one for Linux. https://github.com/Homebrew/homebrew-science/blob/master/soapdenovo.rb#L6\nUse MacOS.prefer_64_bit?. Never mind the MacOS name. It's a misnomer.\nruby\nif MacOS.prefer_64_bit?\n  url \"\u2026\"\n  sha256 \"\u2026\"\nelse\n  url \"\u2026\"\n  sha256 \"\u2026\"\nend\n. > On GitHub, your repository must be named homebrew-something in order to use the one-argument form of brew tap. The prefix 'homebrew-' is not optional.\nYes, I'm planning on keeping that requirement for Linuxbrew as Linuxbrew uses many of the same taps as Homebrew, for example \"Homebrew/homebrew-science\". I recommend you rename your tap to homebrew-binary, which after moving will be named Linuxbrew/homebrew-binary, and the one argument form will be Linuxbrew/binary.\n. Yeah, I had thought about that. That repository is not at all useful for Linuxbrew though, so I don't think there will be confusion. You could, if you liked, add the formulas from that repository to your repository.\n. Sure, that works for me.\n. As long as those files don't conflict with anything, there's no harm to the symlinks, except perhaps the cruft. If you want to avoid the cruft, you can install into libexec instead of prefix. The files in libexec are not symlinked.\n. I'd be happy to accept a PR that ignored casks in the Brewfile on Linuxbrew.. https://travis-ci.org/Linuxbrew/linuxbrew/builds/105556503#L720\n==> brew audit procps\nError: 1 problem in 1 formula\nprocps:\n * Incorrect file permissions (664): chmod 644 /home/travis/build/Linuxbrew/linuxbrew/Library/Formula/procps.rb\n. I have no idea myself. Does Arch Linux provide a python2 package? If you wanted to be on the safe side, I'd install that python2 package and make sure that python points to Python 2 and python3 points to Python 3. You can also brew install python and brew install python3.\n. I'm afraid that I'm beyond my Python systems knowledge here. I'm going to close this issue, but feel free to comment if you learn more or run into issues.\n. The Linuxbrew python package installs both python2 and python symlinks. I don't know if there are any formula that expect python to be a python2 interpreter. The doctor warning is only a warning. It may or may not be a problem.\n. See #603\n. ==> audit problems\nlibtirpc:\n * Incorrect file permissions (664): chmod 644 /home/travis/build/Linuxbrew/linuxbrew/Library/Formula/libtirpc.rb\n * A `test do` test block should be added\n. https://gist.github.com/rwhogg/76ed51ae4d80ea3e5ee8#file-05-make-L184\n/tmp/gjs20160131-22213-1hqwh2l/gjs-1.44.0/tmp-introspecthly41b/.libs/lt-WarnLib-1.0: error while loading shared libraries: libmozjs-24.so: cannot open shared object file: No such file or directory\nCommand '['/tmp/gjs20160131-22213-1hqwh2l/gjs-1.44.0/tmp-introspecthly41b/WarnLib-1.0', '--introspect-dump=/tmp/gjs20160131-22213-1hqwh2l/gjs-1.44.0/tmp-introspecthly41b/functions.txt,/tmp/gjs20160131-22213-1hqwh2l/gjs-1.44.0/tmp-introspecthly41b/dump.xml']' returned non-zero exit status 127\nMakefile:2634: recipe for target 'WarnLib-1.0.gir' failed\ngjs installs its own copy of mozjs. Adding its library path to LD_LIBRARY_PATH may work. Try the following untested patch:\ndiff\ndiff --git a/Library/Formula/gjs.rb b/Library/Formula/gjs.rb\nindex bd5ad2b..74840ae 100644\n--- a/Library/Formula/gjs.rb\n+++ b/Library/Formula/gjs.rb\n@@ -42,6 +42,8 @@ class Gjs < Formula\n         rm Dir[\"#{bin}/*\"]\n       end\n       ENV.append_path \"PKG_CONFIG_PATH\", \"#{lib}/pkgconfig\"\n+      # Fix error while loading shared libraries: libmozjs-24.so\n+      ENV.prepend_path \"LD_LIBRARY_PATH\", lib if OS.linux?\n     end\n     system \"./configure\", \"--disable-debug\",\n                           \"--disable-dependency-tracking\",\n. Great. Glad to hear it. This issue could also affect other formula. It affects mcrypt for example: https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/mcrypt.rb#L32\nCould you try the following untested patch?\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 6fd01b3..cda65d5 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -56,6 +56,9 @@ module Stdenv\n append \"LDFLAGS\", \"-Wl,-headerpad_max_install_names\" if OS.mac?\n\n\n\nAdd this formula's library directory to the shared library search path.\n\nprepend_path \"LD_LIBRARY_PATH\", formula.lib if formula && OS.linux?\n+\n     if OS.linux? && ![\"glibc\", \"glibc25\"].include?(formula && formula.name)\n       # Set the dynamic linker\n       glibc = Formula[\"glibc\"] rescue nil\n``\n. Well that's weird.\n. Argh.prepend_pathis weird. It doesn't add the path unless it exists, andlibdirdoesn't yet exist.prepend` works as expected.\n\nruby\n    prepend \"LD_LIBRARY_PATH\", formula.lib, File::PATH_SEPARATOR if formula && OS.linux?\n. Should be fixed now by #771. Thanks for the bug report, Bob.\n. This patch gives this error message:\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/106131883#L467-L470\nconfigure: Building in-tree ghc-pwd\n/usr/bin/ld: cannot find -lgmp\ncollect2: ld returned 1 exit status\nconfigure: error: Building ghc-pwd failed\n``` diff\ndiff --git a/Library/Formula/ghc.rb b/Library/Formula/ghc.rb\nindex 2eec23b..ad9d4da 100644\n--- a/Library/Formula/ghc.rb\n+++ b/Library/Formula/ghc.rb\n@@ -61,13 +61,13 @@ class Ghc < Formula\n     # corresponding to Yonah and Merom. Obviates --disable-assembly.\n     ENV[\"MPN_PATH\"] = \"x86_64/fastsse x86_64/core2 x86_64 generic\" if build.bottle?\n\n\nGMP does not use PIC by default without shared libs  so --with-pic\n\n\nis mandatory or else you'll get \"illegal text relocs\" errors.\nresource(\"gmp\").stage do\n\nsystem \"./configure\", \"--prefix=#{gmp}\", \"--with-pic\", \"--disable-shared\"\nsystem \"./configure\", \"--prefix=#{gmp}\"\n       system \"make\"\n       system \"make\", \"check\"\n       ENV.deparallelize { system \"make\", \"install\" }\n\nUse static linking.\n\n\nrm gmp/\"lib/libgmp.so\"\n     end\nargs = [\"--with-gmp-includes=#{gmp}/include\",\n@@ -81,14 +81,21 @@ class Ghc < Formula\n   args << \"--with-gcc-4.2=#{ENV.cc}\"\n end\n\n\nFix error while loading shared libraries: libgmp.so.3\n\nif OS.linux?\nln_s \"libgmp.so.10\", gmp/\"lib/libgmp.so.3\"\nENV.prepend_path \"LD_LIBRARY_PATH\", gmp/\"lib\"\nend\n+\n     resource(\"binary\").stage do\n       # Change the dynamic linker and RPATH of the binary executables.\n``\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/106142678The job exceeded the maxmimum time limit for jobs, and has been terminated.I believe this patch works.\n. Woops. My fault. Fixed thanks to @abelsiqueira\n. Linuxbrew hasn't yet tackled packaging GUI applications. On Mac this is handled bybrew cask. I don't have time myself to tackle this particular challenge. See #762\n. The code is at [check_tmpdir_executable`](https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/diagnostic.rb#L1126)\n\nCan your report the output of\nsh\ncd /tmp\necho \"#!/bin/sh\" >foo\nchmod +x foo\n./foo\necho $?\nDoes brew install hello succeed?\n. I'm not able to reproduce this issue myself, so it'll be difficult for me to troubleshoot. You can simply ignore the warning for the mean time. Sorry that I couldn't help you resolve it.\n. I was able to reproduce this issue:\nError: Text file busy - /var/tmp/sjackman/homebrew_check_tmpdir_executable20160201-13383-soy4dl\nAdding f.close fixed it.\n. It's odd, but my best guess is that this issue only affects NFS file systems? Just a guess.\n. Fixed. Thanks for the bug report, Evgeny.\n. Great. Glad to hear it.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/106355108#L528-L530\nbrew install --verbose --build-bottle task\nError: No available formula with the name \"homebrew/dupes/ncurses\" \nPlease tap it and then try again: brew tap homebrew/dupes\n. Thanks, Bob.\n. Thanks for the bug report, L\u00e9onard.\n/bin/bash ../../config/ylwrap cue_parser.y y.tab.c cue_parser.c y.tab.h `echo cue_parser.c | sed -e s/cc$/hh/ -e s/cpp$/hpp/ -e s/cxx$/hxx/ -e s/c++$/h++/ -e s/c$/h/` y.output cue_parser.output -- yacc -d \n../../config/ylwrap: line 176: yacc: command not found\n. Fixed!\n. Glad to hear it.\n. I'm afraid that I don't have the time available to troubleshoot brew-gem on Linuxbrew.\n@sportngin Are you interested in supporting running brew-gem on Linuxbrew? I'm happy to help you where I can.\nhttps://github.com/sportngin/brew-gem\n. That looks like an upstream bug to me. File a bug report with the upstream authors.\n@alecthomas It looks as though Loaders.cc is missing an include of stdlib.h\nhttps://github.com/alecthomas/devtodo2\n. If it's already fixed, would you care to tag a new release?\n. Please report issues that are not specific to Linux to https://github.com/Homebrew/homebrew\n. To test multiple distros and build architectures, add to .travis.yml:\nyaml\nmatrix:\n  include:\n    - sudo: false # dist: precise\n    - sudo: required # dist: precise\n    - dist: trusty\n      sudo: required\n. ruby 1.9.3p551 fails with sudo: required, but succeeds with sudo: false on Precise (without dist: trusty).\nsudo: required\nhttps://travis-ci.org/Linuxbrew/linuxbrew/jobs/115956255#L231-L235\nInstalling simplecov-html 0.10.0\nNoMethodError: undefined method `spec' for nil:NilClass\nAn error occurred while installing simplecov (0.11.2), and Bundler cannot\ncontinue.\nsudo: false\nhttps://travis-ci.org/Linuxbrew/linuxbrew/jobs/115956254#L127-L129\nSuccess!\nThis job is running on container-based infrastructure, which does not allow use of 'sudo', setuid and setguid executables.\nIf you require sudo, add 'sudo: required' to your .travis.yml\nSee https://docs.travis-ci.com/user/workers/container-based-infrastructure/ for details.\n. See https://travis-ci.org/Linuxbrew/linuxbrew/builds/115956252\n. Hi, Bob. Can you please include the exact error message that you encountered without the fix in future pull requests? In case of a regression, it makes finding the original solution easier.\n. Merged. Thanks for your contributions, Bob!\n. Linuxbrew does not currently configure which daemons start at boot. This post says to run\nsh\nsudo update-rc.d postgresql enable\nYou will first need to link the rc.d scripts from your Linuxbrew prefix into /etc.\n. Read this page 17.3. Starting the Database Server\n\nOn Linux systems either add\nsh\n/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data\nto /etc/rc.d/rc.local or /etc/rc.local or look at the file contrib/start-scripts/linux in the PostgreSQL source distribution.\n. Ignore that suggestion. It won't help unless there's an appropriate file installed in /etc/init.d/postgresql.\n. In Markdown, multi-line fenced code blocks are surrounded by triple back ticks. See https://help.github.com/enterprise/11.10.340/user/articles/github-flavored-markdown/#fenced-code-blocks\n. Thanks for the bug report, Davide. libudev is provided by systemd, which is not yet packaged for Linuxbrew, and Linuxbrew does not have a mechanism in place to describe dependencies on system libraries. The fix would be to package systemd for Linuxbrew. I don't have the time for that task myself. A pull request would be welcome if you have the time and inclination.\n. libudev is provided by systemd. See https://packages.debian.org/jessie/libudev-dev\n[ Source: systemd  ]\n. I've packaged libcap #789, and I'm testing systemd now #790. I'll then make libusb depend on systemd.\n. I've added the missing dependencies. Thanks for the feedback\nsystemd is checking for a libmount.pc (pkg-config) file, but is not finding one. ~~util-linux does not install a .pc file for libmount.~~\n\n$ ls /gsc/btl/linuxbrew/Cellar/util-linux/2.26/lib/pkgconfig/\nblkid.pc  fdisk.pc  mount.pc  smartcols.pc  uuid.pc\n~~I also don't see such a file on my host system, so I'm not sure how it built successfully on my system. I'll gist the build logs.~~\nThe mount.pc file is installed by util-linux and should be picked up by systemd.\n. I've added a dependency to systemd on gettext. It looks to me like hidapi installed successfully. I don't see any errors in the log. Is it working for you now?\nTo work around the not present or broken errors, try brew tap homebrew/dupes before installing anything.\n. I can't find that message Error: No such file or directory - hidtest/.libs/hidtest in this gist https://gist.github.com/anonymous/aaaf98d7d7a3b86630eb\n\nthere are a few interesting errors in the gist:\n\nThese message are normal. It's just configure trying to figure out what version of compiler you have.\n. hidapi depends on libudev, which is provided by systemd. Would you like to submit a pull request? Start with brew edit hidapi and read CONTRIBUTING.md\n. > The mount.pc file is installed by util-linux and should be picked up by systemd.\npkg-config must be installed before systemd. Resolved by #963.\n. Thanks for the bug report, Reto. I don't have time either right now. Sorry. The relevant error is\u2026\nhttps://gist.github.com/anonymous/f5ad750d02af5cd278ab#file-02-make-L92\n/usr/local/lib/libavcodec.a(opusdec.o): In function `opus_decode_subpacket':\n/home/why/ffmpeg-2.8.5/libavcodec/opusdec.c:379: undefined reference to `swr_is_initialized'\n. Great. Glad to hear it.\n. homebrew/versions is not a supported tap. Try instead brew install gcc, which will install GCC 5.3.0.\nOn such an old system, consider installing glibc as well.\nbrew install gcc --with-glibc\nFor more information see\nhttps://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation\n. Or have gawk installed by your base system, which is typical. Thanks for the clarification though, Reto. We'll have to put together an exhaustive list of these dependencies eventually.\n. There is this list of dependencies on system utilities over here:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/README.md#dependencies\nI'd like to reduce the size of that list, as more dependencies are provided by Linuxbrew.\n. The preferred commit log message is bzr: Fix for Linuxbrew\nPlease squash to a single commit after these fixes are made (that is, use git commit --amend).\n. Yes, master appears broken. The gem tins-1.6.0 appears to have gone AWOL.\nCould not find tins-1.6.0 in any of the sources (Bundler::GemNotFound)\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/107904799#L198\n. I've merged\nruby\ninreplace \"bzr\", \"#! /usr/bin/env python\", \"#!/usr/bin/python\" if OS.mac?\nThanks for your contribution, Buck.\n. If the python formula is installed, wouldn't that be the desired Python interpreter to use, that is $BREW/bin/python? Which Python interpreter do you want to use?\n. I understand the benefits of your and Homebrew's stance, but I prefer not to pin the shebang and to trust the user's PATH.\n. This patch won't work as is. build.with? assumes the option is named either --with-foo or --without-foo. The option will have to be renamed to something like --with-current-kernel.\n. Merged as follows. Thanks for your contribution, Maxim.\nruby\n      kernel_version = `uname -r`.chomp.split(\"-\")[0]\n      args << \"--enable-kernel=#{kernel_version}\" if build.with? \"current-kernel\"\n. I believe (I may be wrong) that kernel versions are either of the format 1.2.3-456.789 or 1.2.3. Either of those formats works with this code. I'll fix it up if I'm proven wrong.\n. What precisely does uname -r return on your system? As long as it includes a hyphen after 1.2.3, it'll work just fine.\n. Please squash to a single commit. Thanks for your contribution, Reto.\n. No, I don't believe squash and rebase are features of the GitHub web interface. Would be nice though.\n. Superseded by #796.\n. Hi, Reto. For future contributions, please post the exact error message (ideally with a gist) that you're observing without the patch applied.\n. configure: error: libxml2 configuration is not found\nafter adding depends_on \"libxml2\" unless OS.mac?\nconfigure: error: libxslt configuration is not found\n. The preferred commit message is\nmediaconch: Depends on libxslt for Linuxbrew\nMerged! Thanks for your contribution, Reto.\n. I can't say. Can you confirm that the issue persists today? I just tried a brew fetch git, and it works for me.\n```\n$ brew fetch git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.7.0.tar.xz\n################################################################## 100.0%\nDownloaded to: /home/sjackman/.cache/Homebrew/git-2.7.0.tar.xz\nSHA1: c9b9adf97236eee084608d1d8a1754ae851897fa\nSHA256: fa9fb34efce9c80527152a40fbae138e83bd04a15ef9111726252259345a7b0d\nResource: man\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-manpages-2.7.0\n################################################################## 100.0%\nDownloaded to: /home/sjackman/.cache/Homebrew/git--man-2.7.0.tar.xz\nSHA1: 20730ec58479989e357f85826dfc3384f1311f79\nSHA256: b7f255aa17a5d06b9b71f6e3957f65e8f15789b2d31f09b1c2bf697a21458a0d\nResource: html\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-htmldocs-2.7.0\n################################################################## 100.0%\nDownloaded to: /home/sjackman/.cache/Homebrew/git--html-2.7.0.tar.xz\nSHA1: 4fc029b470b90e4678e26fd0129d1a77e9151434\nSHA256: a9d30a744eb07392ba3ffe389cca7e57a2bdd718c9ffccdf2d525eeafac548a9\n``\n. I'm going to close this issue. Please comment if you're able to reproduce the issue. It may have been a transient network error.\n. As a workaround, you can fetch the formula and its dependencies usingbrew fetch --deps hello`.\nThanks for confirming the bug. It's very strange. As I'm not able to reproduce the error, it's going to be difficult to troubleshoot. Please remove the cached source and gist the logs.\nsh\nrm -f `brew --cache hello`\nbrew install -v hello || brew gist-logs hello\n. Please report\nwhich -a curl\ncurl --version\nbrew list --versions curl\n\nbrew doctor complains about the curlrc file, but how can I pass the proxy parameter otherwise?\n\nTry setting the environment variable.\nsh\nexport ALL_PROXY=\u2026\n\nOK, I have to export all_proxy with my proxy inside to solve this, even if it is defined in my curlrc file. \n\nAh, did setting the ALL_PROXY environment variable solve your issue?\n\nSo, why does not curl read its config file?\n\nMystery to me. You could try troubleshooting with\u2026\nsh\nstrace -e open curl http://google.ca\n. My quick test indicates that the Linuxbrewed curl does read the file ~/.curlrc. Please report\nsh\ncat ~/.curlrc\n. Sorry, I was addressing the original poster, @Neraste.\n\nOK, I have to export all_proxy with my proxy inside to solve this, even if it is defined in my curlrc file. So, why does not curl read its config file?\n\nI believe that curl does read its config file.\n. It is strange that brew fetch should work but not brew install.\nShouldn't export all_proxy=http://myproxy be export ALL_PROXY=http://myproxy?\nPlease report\u2026\nsh\ncat ~/.curlrc\ncurl --version\necho xyz >>~/.curlrc\ncurl --version\n. Try\nsh\nexport HOMEBREW_VERBOSE=1 HOMEBREW_CURL_VERBOSE=1 \nbrew install hello\nbrew fetch hello\nand leave the xyz in the ~/.curlrc so that we can confirm that brew install hello is reading the config file.\n. The two curl command lines are identical, and both are reading the ~/.curlrc. That's a real mystery why one is failing. Any idea why curl didn't displays its verbose output in the first case? That's where the verbose output would be useful.\n. @biocyberman is also experiencing this issue. I haven't been able to reproduce it yet myself, so I'm having difficult troubleshooting it. Can everyone experiencing this issue please report the following? I'm curious to see if you're all perhaps using the same distribution of Linux.\nsh\nbrew config | egrep 'OS|Linuxbrew'\nYou may want to also try recompiling curl with the Homebrewed gcc and see if that helps.\nsh\nbrew install gcc\nbrew reinstall curl\nbrew test curl\n. > The error is definitely coming from here.\nWhat makes you say that? Were you able to work around the issue by changing the curl parameters in _fetch?\n. This curl issue and this python issue #841 may be related.\nCan someone here try this patch and report whether it works around the problem?\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex ea1b4d8..42b2ec7 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -58,6 +58,7 @@ module Stdenv\n if OS.linux? && ![\"glibc\", \"glibc25\"].include?(formula && formula.name)\n   # Add this formula's library directory to the shared library search path.\n\n\n\nFileUtils.mkdir_p formula.lib if formula\n       prepend \"LD_LIBRARY_PATH\", formula.lib, File::PATH_SEPARATOR if formula\n# Set the dynamic linker and library search path.\n``\n. I've recently fixed #841 thank to the help of @erigler-usgs. This fix _may_ also fix this issue. Could people here pleasebrew updateand test? Thanks!\n. A lot of the credit is owed to @erigler-usgs. It would have taken me ages to figure this one out on my own.\n. @mikemcquaid Is it reasonable to bumptinsinLibrary/Homebrew/test/Gemfile.lockfrom1.6.0, which has gone AWOL, to1.8.2`? I'm not terribly familiar with gem versioning.\n. Using a different version of Ruby works around this issue. I'll use Ruby 2.0.0.\n\n\nI've tested six different version of Ruby: 1.8.7, 1.9.3, 2.0.0, 2.1.8, 2.2.4 and 2.3.0.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/108370609\n| Version | Status |\n| --- | --- |\n| 1.8.7 | :x: (Linuxbrew issue) |\n| 1.9.3 | :x: (this issue) |\n| 2.0.0 | :white_check_mark: |\n| 2.1.8 | :white_check_mark: |\n| 2.2.4 | :x: Error: cannot load such file -- test/unit/assertions |\n| 2.3.0 | :white_check_mark: |\nThis particular issue only affects 1.9.3.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/jobs/108370611#L194\nA different issue affect 2.2.4: Error: cannot load such file -- test/unit/assertions\nhttps://travis-ci.org/Linuxbrew/linuxbrew/jobs/108370616#L520\nThis issue has come up before. See #314 and #599\nA strange issue that's only relevant to Linuxbrew affects 1.8.7:  Error: Failure while executing: /home/travis/build/Linuxbrew/linuxbrew/Cellar/patchelf/0.8/bin/patchelf\nhttps://travis-ci.org/Linuxbrew/linuxbrew/jobs/108370610#L441\n. Thanks for your contribution, Aleksey.\n. New versions should be submitted upstream to https://github.com/Homebrew/homebrew\nSee CONTRIBUTING.md\n. Merged.\n. I agree with @DomT4, but I'm a pragmatic type. I am also running on a HPC cluster that uses a ten year-old distribution of Linux (CentOS 5), and so I'm sympathetic.\nWhat's your specific use case that you need OpenSSL 2? Perhaps there's a workaround. Have you tried using a Standalone Installation of Linuxbrew?\nIf there's no workaround that works for you, I'll merge the patch while adding (not recommended) to the option description, and possibly a link to an article explaining why it's not recommended.\n. If you have no immediate use case, Maxim, I'm going to close this issue for now.\n. How strange. Can you find an upstream bug report for this issue, and if not, can you please report it upstream?\n. I'm experimenting with rolling out bottles (precompiled binaries) on Linuxbrew, and that requires updating glibc on older systems with glibc < 2.19. See #380. You're my guinea pig. Congratulations? If you wish to opt out of being my guinea pig, use brew install -s git or export HOMEBREW_BUILD_FROM_SOURCE=1.\n. My machine reports checking for _FORTIFY_SOURCE predefine... no, so it seems likely that this issue only affects compilers that predefine _FORTIFY_SOURCE. Please report brew gist-logs glibc.\n. A workaround is brew install homebrew/dupes/gpatch or alternatively sudo yum install patch.\nPull request #605 addressed this issue. I may revisit it.\n. Thanks for the kind feedback.\n. I've merged Piotr's patch. This issue should be resolved now. Thanks for the patch, Piotr, and for the bug report, @KomodoTech.\n. Yours is the first system I've seen where users don't have access to /proc/cpuinfo. That's unusual, so I'm afraid that it's not a priority for me to fix this issue, although I realize that it must be a bit frustrating for you. I would ask your system admin if they can relax these permissions. There's no reason for this file to be private.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/108714964#L1011\n* Formula name conflicts with homebrew/dupes/gpatch\n. zlib has a patch for clang, and binutils has a patch for Mac OS 10.6. These two patches should be disabled to break cycles in the dependency chain needed to bootstrap a system and pour bottles.\n. Merged.\n. That's curious. I haven't seen that error myself. I see instead checking LD_LIBRARY_PATH variable... ok\nCan you please report\nsh\nunset LD_LIBRARY_PATH\nbrew install glibc || brew gist-logs glibc\n. > Btw., I think Homebrew on MacOSX always unsets LD_LIBRARY_PATH (or even the whole env) before it runs any setup, or does it not? And earlier, I think it did at least do some cleanup/fixing of the env, like in this case, removing empty entries from LD_LIBRARY_PATH. Maybe on Linux we should do the same? Or would that break too much things?\nI've added a brew doctor check for LD_LIBRARY_PATH. In the future Linuxbrew will remove LD_LIBRARY_PATH, but for now it's needed as a workaround when upgrading core libraries that are needed by the compiler toolchain, like for example zlib.\n. :scream: Pretty ugly behaviour. Linuxbrew now resets LD_LIBRARY_PATH when installing software.\nhttps://github.com/Linuxbrew/brew/blob/master/Library/Homebrew/extend/ENV/shared.rb#L27. Thanks for the fix. Which version of Ruby are you using, Maxim?\n. Ruby 1.8 has only integer mode chmod. Ruby 1.9 introduced string mode.\n. Merged. Thanks for the fix, Maxim.\n. I don't see this error myself. It's going to be tricky for me to troubleshoot. I wonder whether it's somehow dependent on the version of Ruby. Can you please report ruby --version? If possible, could you try using a newer version of Ruby?\n. Could you please gist and post the entire output (the ... <tons of lines> ...)?\n. > Tried building zlib from source but failed again with tons of error messages but I think those are irrelevant as they simply indicate that there is some problem in the recent changes because just a week or so ago I was able to build zlib and glibc without problems.\nThe error messages would help me troubleshoot.\n. Setting export HOMEBREW_BUILD_FROM_SOURCE=1 should return you to the previous behaviour, that doesn't use bottles.\n. Thanks. That issue does not happen on my system. brew readall exits successfully. I have an idea though. Please follow these instructions and see if it helps:\nhttps://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. Does brew install hello work?\n. That's very helpful. Thanks, Maxim.\n. I still haven't reproduced this issue. The following patch may help though. Can you test it for me?\n``` diff\ndiff --git a/Library/Homebrew/requirements/glibc_requirement.rb b/Library/Homebrew/requirements/glibc_requirement.rb\nindex 6439236..58470ac 100644\n--- a/Library/Homebrew/requirements/glibc_requirement.rb\n+++ b/Library/Homebrew/requirements/glibc_requirement.rb\n@@ -10,7 +10,7 @@ class GlibcRequirement < Requirement\n     super\n   end\n\nsatisfy {\nsatisfy(:build_env => false) {\n     next true unless OS.linux?\n     begin\n       next true if to_dependency.installed?\n``\n. Great! The output ofbrew test hellois elided by default. Usebrew test -v hello`.\n. Fixed. Thanks for the bug report and help troubleshooting, Maxim.\n. > Then I installed ncurses (because emacs configure fails w/out, unable to find a library that provides tputs)\n\nI've created a pull request to add the ncurses dependency to emacs. See #811.\n. ./temacs: error while loading shared libraries: libgpm.so.2: cannot open shared object file: No such file or directory\nYour system provides libgpm, probably in /usr/lib. emacs detected that you have gpm, and so configured itself to depend on gpm. To support bottles, a new glibc is installed. The new dynamic linker is not configured, by default, to search /usr/lib for libraries. For me, I'm trying to isolate my Homebrew installation as much as possible from the host system, so I prefer to get an error when it's linking against a host system library.\nSo, here's possible solutions for you, depending on what you want:\nYou do want to use host libraries. Configure the new glibc dynamic linker to search the system libraries.\nsh\nprintf \"/usr/lib/x86_64-linux-gnu\\n/usr/lib64\\n\" >`brew --prefix glibc`/etc/ld.so.conf\nldconfig\nYou do not want to use host libraries. Install the Homebrew gcc formula --with-glibc, which configures it not to search the system libraries.\nsh\nbrew install gcc --with-glibc\nJust make it compile, and I don't need libgpm support for emacs. See if there's a --without-libgpm configure option to emacs to add to the formula.\nAlso note that libgpm (general purpose mouse) is different than gmp (GNU multi precision).\nCheers,\nShaun\n. > what do we do about apps that hardcode information at build time, like the local lisp path from the emacs configure step:\nThat's the ultimate question. I've answered the question at a related issue: https://github.com/Linuxbrew/linuxbrew/issues/380#issuecomment-184068091\n. Excellent. The wiki page for an isolated installation is over at Standalone Installation\n. > I'm a bit confused that I don't seem to need a dependency on ncurses if I build everything from source. Am I picking up the dependency on tputs from something in one of the bottles that you've built?\nIf you build everything from source, it doesn't install glibc. That only happens if your pour a bottle. So when you build from source you're using the host system's ncurses library.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/109273171#L752\n==> Pouring emacs-24.5.x86_64_linux.bottle.3.tar.gz\ncannot find section .rela.dyn\nError: Failure while executing: /home/travis/build/Linuxbrew/linuxbrew/Cellar/patchelf/0.8/bin/patchelf --set-rpath /home/travis/build/Linuxbrew/linuxbrew/lib --set-interpreter /home/travis/build/Linuxbrew/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 /home/travis/build/Linuxbrew/linuxbrew/Cellar/emacs/24.5/bin/emacs-24.5\n. Hi, George. I'll reword the CONTRIBUTING document. Patches to fix build issues that only affect Linux should be sent to Linuxbrew. Patches to fix build issues that affect both Mac and Linux should be sent to Homebrew.\n. Which distribution of Linux are you using?\n\nThen I manually removed .linuxbrew directory but had so many different problems trying to get linuxbrew/Ansible to work.\n\nDo you mean that you reinstalled Linuxbrew from scratch? Did that work?\nLinuxbrew now uses bottles (pre compiled packages) by default. On systems with an old glibc < 2.19 it installs its own copy of glibc. If this process is not working for you, you can disable the use of bottles by setting the environment variable:\nexport HOMEBREW_BUILD_FROM_SOURCE=1\n. Glad to hear that you got it working.\nNote that you can use triple backticks to escape blocks of text in Markdown. See https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code\n. Installing glibc and gcc should work better now. You may need to start with a fresh installation of Linuxbrew, if yours is older than the last few months.\n. Sorry to hear that Rayan. What error message are you seeing? Please report the output of:\nsh\nbrew config\nbrew doctor\nPlease start with a fresh installation of Linuxbrew if possible and after the above two commands run brew install gcc. Everything should work smoothly after that. Ensure that LD_LIBRARY_PATH is not set. It takes precedence over the executable's RPATH and breaks things in many fun and mysterious ways.\n. Note the following warning from brew doctor:\nWarning: Setting LD_* vars can break dynamic linking.\nSet variables:\n    LD_LIBRARY_PATH: /storage/home/rxc48/.linuxbrew/lib:/storage/home/rxc48/lib:/storage/home/rxc48/lib64:/usr/global/intel-\n. Good point. The message comes from Homebrew, and the situation is rather more dire on Linuxbrew that it is on Homebrew.\n@rwhogg Rayan suggests we change Warning: Setting LD_* vars can break dynamic linking. to Warning: Setting LD_* vars can break your WHOLE SYSTEM. That might better get the point across. =)\n. Yep. Don't set LD_LIBRARY_PATH. It'll break everything. Linuxbrew sets the RPATH of each executable that it compiles.\n. Thanks for the bug report, Maxim. I'll fix that up. It shouldn't actually cause any trouble though. There's no need to explicitly install patchelf. It'll be pulled in as a dependency whenever a bottle is installed, e.g. zlib.\n. Fixed. Thanks for the bug report, Maxim.\n. Fixed for real this time.\n. Please report ruby --version. If you can, upgrading Ruby will like resolve this issue.\n. Never mind. Ruby 1.8.7, from above output.\n. Please report brew gist-log ruby.\nYou may want to report the bug upstream to Ruby at http://www.ruby-lang.org/bugreport.html\n. chmod is supposed to be able to take an Integer or a String, so I'm not really sure what's going on here. Sorry. Perhaps it's a bug in Ruby 1.8.7.\nCommenting out the chgrp line seems a reasonable workaround to install Ruby 2.3.0 using Linuxbrew.\n. Typo, sorry. I meant chown. It also takes an Integer or a String.\n\nChanges owner and group on the named files (in list) to the user user and the group group. user and group may be an ID (Integer/String) or a name (String). If user or group is nil, this method does not change the attribute.\n. Interesting. I didn't know that GCC 4.3 is not able to build glibc. GCC 4.4 definitely works. I have tested that. Which distribution of Linux are you using?\n\nA workaround is to set\nsh\nexport HOMEBREW_BUILD_FROM_SOURCE=1\n. Try\nsh\nexport HOMEBREW_BUILD_FROM_SOURCE=1\nbrew install gcc --without-glibc\nI'm not very familiar with SUSE Linux. If it's possible to upgrade to a newer version of GCC using SUSE's package manager, that would be a good option.\n. @zbeekman Create symlinks for gcc like so: https://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\nLinuxbrew ignores CC and CXX.\n. @sni Did the above workaround work for you?\n. Yes, yes it is. Bootstrapping from >10 year-old systems is tricky though. It doesn't always work smoothly, but I'm working on it. CentOS 5 has GCC 4.1 by default, but can also optionally install GCC 4.4 sudo yum install gcc44 gcc44-c++. I was hoping that SLES 11 had something similar.\nThere's not enough info in the above log. Please report brew gist-logs gcc\n. > Btw, is there a list of install options like --without-glibc, i was unable to find them in the manpage.\nSee brew options gcc\n\nThen it fails with \"cannot find -lz\" when trying to link. I will continue tomorrow...\n\nPlease report ls /lib64/libz*\nTry applying this patch:\ndiff\ndiff --git a/Library/Formula/gcc.rb b/Library/Formula/gcc.rb\nindex 17dd83d..a7b17db 100644\n--- a/Library/Formula/gcc.rb\n+++ b/Library/Formula/gcc.rb\n@@ -131,7 +131,7 @@ class Gcc < Formula\n       \"--with-isl=#{Formula[\"isl\"].opt_prefix}\",\n     ]\n     args += [\n-      \"--with-system-zlib\",\n+      (\"--with-system-zlib\" if OS.mac?),\n       \"--enable-libstdcxx-time=yes\",\n       \"--enable-stage1-checking\",\n       \"--enable-checking=release\",\n. > I fixed that one by removing the trailing comma in .linuxbrew/opt/isl/include/isl/ctx.h line 83\nPlease report this issue upstream to the authors of isl if you can.\n. When upgrading openssl or curl a workaround a broken upgrade is to first brew fetch openssl curl. Linuxbrew needs to better handle this upgrade. It definitely should not leave your system in a broken state.\n. I haven't seen this issue myself.\nTry HOMEBREW_MAKE_JOBS=1 brew install openssl\n. If I Google this error message, I get a number of hits, but no solutions. You may want to report it upstream to the OpenSSL developers. Please report brew gist-logs openssl\n. Strange. Please report the complete output of\nsh\nexport HOMEBREW_MAKE_JOBS=1\nbrew install openssl\nbrew upgrade openssl\nbrew install wine\n. Incidentally, wine depends on sane-backends which depends on openssl.\n. Please post the complete log. I'm trying to figure out the dependency tree that's causing it to get confused.\n. Also try brew install sane-backends\n. If openssl and sane-backends are already installed and up-to-date, then I don't know why they're trying to be installed a second time.\nI have an idea. I think it may have to do with universal libraries on Mac OS. Please try the following patch.\n``` diff\ndiff --git a/Library/Formula/wine.rb b/Library/Formula/wine.rb\nindex 70abbc5..86e70db 100644\n--- a/Library/Formula/wine.rb\n+++ b/Library/Formula/wine.rb\n@@ -29,7 +29,7 @@ class Wine < Formula\n   # note that all wine dependencies should declare a --universal option in their formula,\n   # otherwise homebrew will not notice that they are not built universal\n   def require_universal_deps?\n-    MacOS.prefer_64_bit?\n+    OS.mac? && MacOS.prefer_64_bit?\n   end\n# Wine will build both the Mac and the X11 driver by default, and you can switch\n```\n. Great. Glad we sorted that out. That was one strange symptom.\n. https://gist.github.com/dfornika/b2d2121c3a356d4370bc#file-03-make-L159\n[ 41%] Building CXX object src/cpp/core/CMakeFiles/rstudio-core.dir/system/file_monitor/LinuxFileMonitor.cpp.o\nIn file included from /tmp/rstudio-server20160216-17306-19anuqx/rstudio-0.99.878/src/cpp/core/system/Pam.cpp:16:0:\n/tmp/rstudio-server20160216-17306-19anuqx/rstudio-0.99.878/src/cpp/core/include/core/system/Pam.hpp:16:31: fatal error: security/pam_appl.h: No such file or directory\ncompilation terminated.\nIt looks as though rstudio-server requires pam for authentication, and Linuxbrew does not package pam. You could check the configure options for rstudio-server and see if the pam dependency can be disabled. You could symlink the pam headers and libraries from your host system into the Linuxbrew prefix. I like making a dummy package when doing this.\nsh\nmkdir -p `brew --prefix`/pam/1.2.3/{include,lib}`\nln -s /usr/include/security `brew --prefix`/pam/1.2.3/include/\nbrew link pam\n. You could also create a formula for pam and submit it to Linuxbrew. http://www.linux-pam.org/\n. > I had to adjust your bash snippet a bit (put pam in the Cellar directory)\nRight. My mistake.\n\nIt got the build a bit further, but it looks like it's still having trouble finding the pam library\n\nYes, you'll have to create the symlinks for the pam libraries as well. brew unlink pam; make the lib symlinks; brew link pam\nhttps://gist.github.com/dfornika/204d1c767f50ad083df1#file-03-make-L211\n/data/home/dfornika/.linuxbrew/bin/ld: cannot find -lpam\n/data/home/dfornika/.linuxbrew/bin/ld: cannot find -lboost_date_time\nHmm. That should work. rstudio-server depends on homebrew/versions/boost150 and sets the cmake variable BOOST_ROOT, which I presume should tell it where to find the libraries.\n. Please report brew gist-logs patchelf.\nI think the issue though is that binutils needs to be fixed up after installing glibc. Your options are:\n1. Pour the patchelf bottle. This is your best bet. brew install --force-bottle patchelf\n2. brew remove binutils or brew reinstall binutils\n. Glad to hear that the workaround worked for you.\nThere is already logic in patchelf to fix up  binutils, but it only works when patchelf is poured from a bottle. It's a circular dependency. patchelf is need to fix up binutils, and binutils is needed to fix up patchelf. One solution is to install patchelf before glibc, but that has its own issues, because patchelf depends on both glibc and libstdc++6. There probably is a solution, but for now this workaround will have to do.\n. ~~Please report brew list and brew gist-logs wine~~ Never mind me.\n. https://gist.github.com/anonymous/0ee79257a57b6d03239d#file-config-log-L83-L85\nconfigure:4045: checking whether the C compiler works\nconfigure:4067: /usr/bin/gcc-4.9 -Os -w -pipe -march=core2 -m32 -isystem/home/ubuntu/.linuxbrew/include -I/usr/include/libxml2 -L/home/ubuntu/.linuxbrew/lib -Wl,-rpath,/home/ubuntu/.linuxbrew/lib conftest.c  >&5\n/usr/bin/ld: cannot find crt1.o: No such file or directory\nThe offending option is -m32.\n. ```\ndiff --git a/Library/Formula/wine.rb b/Library/Formula/wine.rb\nindex 950a0c8..7c8394f 100644\n--- a/Library/Formula/wine.rb\n+++ b/Library/Formula/wine.rb\n@@ -115,7 +115,7 @@ class Wine < Formula\n   end\ndef install\n-    ENV.m32 # Build 32-bit; Wine doesn't support 64-bit host builds on OS X.\n+    ENV.m32 if OS.mac? # Build 32-bit; Wine doesn't support 64-bit host builds on OS X.\n # Help configure find libxml2 in an XCode only (no CLT) installation.\n ENV.libxml2\n\n``\n. I haven't run into this issue myself. Which distribution of Linux are you using?\nI've just created a binary bottle ofgpatch.brew update && brew reinstall gpatch` should fix your issue.\nI've also created a formula for attr. brew install attr should also work.\nattr needed make install install-lib to install libraries. See http://www.linuxfromscratch.org/blfs/view/7.5/postlfs/attr.html\n. Glad to hear it. Which solution did you use, the bottled gpatch or the attr formula?\n. Please report\nsh\nbrew config\ncd /home/mh/.linuxbrew\ngit remote -v\nI think you may have the wrong git repository, pulling from Homebrew/homebrew, which is for Mac, instead of Linuxbrew/linuxbrew.\n. Thanks for the bug report. The breakage is from this commit 981e9379a06e48acc743ad053060ac16b59aace2 which completely rewrites the brew update command. The workaround for now is to use brew update-ruby instead. I'll fix brew update.\n. Fixed. Thanks for the bug report. To fix your Linuxbrew installation, run\u2026\nsh\ncd `brew --prefix`\ngit remote set-url origin https://github.com/Linuxbrew/linuxbrew.git\ngit fetch origin\ngit reset --hard origin/master\nbrew update\n. rm -f -r fontconfig-devel; \\\n    docbook2html -V '%use-id-as-filename%' -o fontconfig-devel local-fontconfig-devel.sgml\n/bin/sh: line 1: docbook2pdf: command not found\n. There's a related issue over here: https://github.com/servo/servo/issues/1790\n. The following patch should workaround this issue. I don't know why I haven't see this issue myself.\nFor future bug reports, please use brew gist-logs fontconfig\ndiff\ndiff --git a/Library/Formula/fontconfig.rb b/Library/Formula/fontconfig.rb\nindex 1835526..71731369 100644\n--- a/Library/Formula/fontconfig.rb\n+++ b/Library/Formula/fontconfig.rb\n@@ -38,6 +38,7 @@ class Fontconfig < Formula\n     system \"./configure\", \"--disable-dependency-tracking\",\n                           \"--disable-silent-rules\",\n                           \"--enable-static\",\n+                          \"--disable-docs\",\n                           \"--with-add-fonts=/System/Library/Fonts,/Library/Fonts,~/Library/Fonts\",\n                           \"--prefix=#{prefix}\",\n                           \"--localstatedir=#{var}\",\n. I wonder why I haven't run into this error myself. I don't have docbook2pdf installed. I do have docbook2man and docbook2texi. Ah, I see. It checks if docbook2html is installed, and if it is, it assumes that docbook2pdf is also available.\nSee https://github.com/servo/servo/issues/1790#issuecomment-36426186\nThe workaround is to remove docbook2html from your PATH or add docbook2pdf to your PATH.\n. You could report this bug upstream to the maintainers of fontconfig if you like.\n. A --without-docs option for fontconfig sounds like a good idea. Would you like to submit a pull request, Andrew?\n. Packaging docbook-tools for Linuxbrew would provide both docbook2html and docbook2pdf.\n. Please report\nbrew list\nbrew config\nOne workaround is to reinstall gpatch from source.\nsh\nbrew reinstall gpatch -s\nAnother is to install glibc:\nsh\nbrew remove gpatch\nbrew install glibc patchelf gpatch\n. You had glibc installed, so the bottle for patch should have worked just fine for you. Can you report\nsh\nbrew reinstall gpatch\nldd `which patch`\npatch --version\n. Yes, I did. Sorry. I've corrected my above comment for future readers.\n. For files of only a few lines, you can post them inline in the comment enclosed in triple back ticks.\nbrew reinstall gpatch\n==> Reinstalling gpatch\n==> Downloading https://linuxbrew.bintray.com/bottles/gpatch-2.7.5.x86_64_linux.bottle.1.tar.gz\nAlready downloaded: /home/sbcuser/.cache/Homebrew/gpatch-2.7.5.x86_64_linux.bottle.1.tar.gz\n==> Pouring gpatch-2.7.5.x86_64_linux.bottle.1.tar.gz\n/toolbox/NGS/.linuxbrew/Cellar/gpatch/2.7.5: 9 files, 293.5K\nldd `which patch`\n/toolbox/NGS/.linuxbrew/bin/patch: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by /toolbox/NGS/.linuxbrew/bin/patch)\n    linux-vdso.so.1 (0x00007ffca53fa000)\n    libc.so.6 => /lib64/libc.so.6 (0x000000305fe00000)\n    /toolbox/NGS/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00007efc51c39000)\n. The RPATH (where it looks for libraries) of patch is not set correctly, which is strange. Have you run brew update recently? Please report\nsh\nbrew update\nbrew reinstall gpatch\nldd `which patch`\npatch --version\nIf that fails, try\nsh\nbrew patchelf gpatch\nldd `which patch`\npatch --version\n. Please report the output of\nsh\nbrew patchelf gpatch -v\nreadelf -d `which patch` |head\n. And\u2026 (please enclose the output in triple backticks)\nsh\nwhich patch\nldd `which patch`\npatch --version\n. sh\necho $LD_LIBRARY_PATH\n. Triple back ticks have to go on their own line.\n. Aha! I should have thought of that long before. That took me way too long to catch on. You shouldn't need /usr/lib nor ~/.linuxbrew/lib in your LD_LIBRARY_PATH. Try\u2026\nexport LD_LIBRARY_PATH=/toolbox/NGS/.linuxbrew/Cellar/lapack/3.6.0/lib64/:/toolbox/NGS/.linuxbrew/Cellar/openblas/0.2.15/lib\nldd `which patch`\npatch --version\n. I get this error message when compiling ea-utils.\nsam-stats.cpp:40:50: fatal error: samtools/sam.h: No such file or directory\nPlease open an issue over at https://github.com/Homebrew/homebrew-science\n. Hi, Philipp. Thanks for the work around. I've fixed this bug just now with https://github.com/Linuxbrew/homebrew-core/pull/1870. Linuxbrew isn't particularly well tested with X11. My suggestion is to create a fake xorg keg and symlink files into that, like so:\nsh\nmkdir -p `brew --cellar`/xorg/7/{include,lib}\nln -s /usr/include/X11 `brew --cellar`/xorg/7/include/\nln -s /usr/lib64/lib[xX]* `brew --cellar`/xorg/7/lib/\nbrew link xorg\n\nAny ideas why Linuxbrew's ldd does not see libxcb.so.1? Should I add /usr/lib64 to rpath? How can I do that? Any suggestions how to proceed?\n\nI recommend trying to keep Linuxbrew isolated from the libraries provided by your host, to prevent version conflicts like you experience with tcl.h. If you want to experiment, you can add /usr/lib64 to the dynamic library search path like so:\nsh\necho /usr/lib64 >>`brew --prefix glibc`/etc/ld.so.conf\nldconfig\n. > Any idea why /Cellar/glibc/2.19/lib64 is given more than once?\n$HOMEBREW_PREFIX/Cellar/glibc/2.19/lib64' is probably hard-coded into the search path ofldconfig`.\nDid you try adding /usr/lib64/ to ld.so.conf? It's not my recommendation, as I prefer to keep the two systems separate, but you can test it for troubleshooting purposes.\n\nFake keg + pristine tcl-tk formula do not work.\n\nFake keg is what I use. It should work. What error do you see?\n. That's in fact not a bad idea, as a stop gap measure. I was hoping someone would package the Xorg client libraries for Linuxbrew. Until that happens, a fake-keg linking to the host libraries isn't a bad plan. It's not a priority for me right now, as I don't much use X11 with Linuxbrew. I'll tag this issue \"help wanted\" for now, and see if someone would like to pick it up. I'm glad to hear that the fake keg worked for you.\n. > So, for true xorg libraries, someone has to follow the steps from here?\nYep, that's right.\n. That'd be great, Maxim.\n. Here's my list of linked libraries in the fake keg.\nlibX11.so               libxcb-randr.so         libxcb-xf86dri.so\nlibX11-xcb.so           libxcb-record.so        libxcb-xfixes.so\nlibXau.so               libxcb-render.so        libxcb-xinerama.so\nlibICE.so               libxcb-res.so           libxcb-xselinux.so\nlibSM.so                libxcb-screensaver.so   libxcb-xtest.so\nlibxcb-composite.so     libxcb-shape.so         libxcb-xvmc.so\nlibxcb-damage.so        libxcb-shm.so           libxcb-xv.so\nlibxcb-dpms.so          libxcb.so               libXext.so\nlibxcb-dri2.so          libxcb-sync.so          libXrender.so\nlibxcb-glx.so           libxcb-xevie.so         libXt.so\nThe wildcard pattern libX* libxcb* libICE* libSM* should capture these files.\n. Closing in favour of #892.\n. Thanks for your contribution, George. I've added the constant OS::NAME in ce0f667 just now to make your patch easier. Its value is either darwin on Mac OS or linux on Linux.\n. Closing this PR in favour of one PR per formula.\n. ~~Thanks for your contribution, George. I've added the constant OS::NAME in ce0f667 just now to make your patch easier. Its value is either darwin on Mac OS or linux on Linux.~~\nSorry, I commented on the wrong issue.\n. Are you still working on this patch, George?\n. Please squash the two commits to a single commit, and use set the first line of the log message to\nansible: Fix for Linuxbrew\nThe rest of the log message can be whatever you want.\nTo squash the two commits run\nsh\ngit checkout ansible-on-linux\ngit rebase -i HEAD~2\ngit push --force hartzell ansible-on-linux\nI'll merge this PR after the squash.\n. > By the way, the squash/rebase instructions were very helpful.\nGlad to hear it! I'll add those instructions to the CONTRIBUTING.md.\n\n(Although the second line is git, not brew...).\n\nFixed above, for posterity. Thanks.\n. Merged. Thanks for your contribution, George, and for sticking with it!\n. > depends_on \"util-linux\" if OS.linux? # for libuuid\n\nSuggested change:\ndepends_on \"libuuid\" if OS.linux? # for libuuid\n\nwget used to depend on libuuid before util-linux was packaged for Linuxbrew. I switched it to util-linux because most distros use the libuuid provided by util-linux. See http://packages.ubuntu.com/trusty/libuuid1 and look for Source: util-linux.\nThe solution is that kill and any other conflicts in util-linux should be removed in preference of those provided by coreutils.\n. As I recall, the API of libuuid and util-linux's libuuid were similar but not identical. I don't recall the details, but some software I was trying to install didn't work with libuuid but did work with util-linux. When the choice is arbitrary, it's better to make the same choice as other distros.\nThe conflict is easy to fix. I've removed kill from util-linux.\n. Merged the gperf dependency. If you send the url change upstream to Homebrew, it'll get merged into Linuxbrew at the next merge. Thanks for your contribution, Maxim.\n. The tap homebrew/versions is not supported by Linuxbrew.\nYou can try brew install python. It may help.\n. I believe this bug is a duplicate of #797\n. There is a workaround.\nsh\nbrew fetch git\nbrew install git\n. I wish I knew what was going on here. So strange.\n. This issue was caused by a particular bug that affected both install and upgrade and was resolved by #841. The upgrade issue that you're seeing is different, but also quite real, and also affects upgrading the dependencies of the compiler and any other \"core\" formula. Please open a new issue to discuss it.\n. Fixed. Thanks for the bug report.\n. Fixed. Thanks for the bug report, Maxim.\n. I agree with Mike that it's not worth the effort at this time.\n. Hi, Bradley. I've clarified in the README.md.\n\nHomebrew, the upstream project of Linuxbrew, is a member of the Software Freedom Conservancy\n. Does gobject-introspection fail to build if Python is not present?\nI'm happy to merge a pull request changing it to\n\nruby\ndepends_on \"python\" if OS.mac? && MacOS.version <= :mavericks\n\nWhat does MacOS.version return on Linuxbrew?\n\nMacOS.version returns 0 on Linuxbrew.\n. Homebrew core does not accept OS.mac? conditionals. It has always been that way. Those OS.mac? bits that you see in the formula are only in Linuxbrew. Compare\nhttps://github.com/Homebrew/homebrew/blob/master/Library/Formula/gobject-introspection.rb\nand\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/gobject-introspection.rb\n. I would also like this feature, but it's not likely, I think. The Homebrew solution is to install to a subdirectory like libexec, and then create a symlink to the launching executable in bin.\n. > (By the by, libssh has 0.7.3 now)\nIf you like, you may submit a pull request upstream to Homebrew/homebrew.\n. > P.S. building subversion still fails but with a different error /usr/bin/ld: unrecognized option '-plugin'\n\nNot sure why /usr/bin/ld is called...\n\nYes, that is odd. Do you have binutils installed by Linuxbrew? Report which -a ld\n. > I'm not exactly sure how PR work... when I click on the link to my patch (8e5c254) I see just the reported changes. When I go to Files Changed above, then I see 3 files changed (+coreutils formula where I change the url + add a gperf dependency... Not sure why this is happening...\nIt's best to create a branch for each particular change that you want to make. For example\n``` sh\ngit checkout origin/master\ngit checkout -b subversion\nMake your changes.\ngit push maxim-belkin subversion\nCreate your pull request from the GitHub web interface.\ngit checkout master\n``\n. Please reportbrew gist-logs subversion. As a workaround, trybrew install subversion --without-serfSee #182\n. Please also reportbrew gist-logs libssh.krb5is not a hard dependency oflibssh`. I ran\nsh\ndocker run -it sjackman/linuxbrew\nsudo apt-get remove libkrb5-dev\nbrew install libssh\nand it built okay. Giving the following message:\n-- Could NOT find GSSAPI (missing:  GSSAPI_LIBRARIES GSSAPI_INCLUDE_DIR) \n-- GSSAPI support : 0\nhttps://gist.github.com/aeaa7e1ebceaf8cff861\n. homebrew/dupes/krb5 seems to depend on bison\n==> Installing krb5 from homebrew/dupes\n\u2026\nyacc  getdate.y \nmake[2]: yacc: Command not found\n. bison (which is a type of yacc) does seem to be a dependency of krb5:\nhttps://gist.github.com/anonymous/44aa6779dda952db5e0c#file-01-configure-L386\nhttps://gist.github.com/anonymous/44aa6779dda952db5e0c#file-02-make-L1800\n. cd /tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/build/src && /data/server4/mbelkin/.linuxbrew/bin/gcc-5  -DLIBSSH_EXPORTS -I/tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/build/src -I/tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/src -I/tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/include -I/tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/build -I/data/server4/mbelkin/.linuxbrew/include  -Os -w -pipe -march=core2  -std=gnu99 -pedantic -pedantic-errors -Wall -Wextra -Wshadow -Wmissing-prototypes -Wdeclaration-after-statement -Wunused -Wfloat-equal -Wpointer-arith -Wwrite-strings -Wformat-security -Wmissing-format-attribute -fPIC -fstack-protector -D_LARGEFILE64_SOURCE -DNDEBUG -fPIC   -fvisibility=hidden -o CMakeFiles/ssh_shared.dir/external/curve25519_ref.c.o   -c /tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/src/external/curve25519_ref.c\n/tmp/libssh20160224-16876-1rdcxwv/libssh-0.7.3/src/gssapi.c:30:27: fatal error: gssapi/gssapi.h: No such file or directory\ncompilation terminated.\nmake[2]: *** [src/CMakeFiles/ssh_shared.dir/gssapi.c.o] Error 1\nhttps://gist.github.com/anonymous/6ea48ef886e3445540aa#file-02-make-L120-L123\n. https://gist.github.com/anonymous/6ea48ef886e3445540aa#file-01-cmake-L37\n-- Found GSSAPI: /usr/lib64/libgssapi_krb5.so;/usr/lib64/libkrb5.so;/usr/lib64/libk5crypto.so;/usr/lib64/libcom_err.so\nhttps://gist.github.com/anonymous/6ea48ef886e3445540aa#file-01-cmake-L147\n-- GSSAPI support : ON\n. ~~It's picking up GSSAPI from your host system. brew install gcc --with-glibc should fix that.~~\nAh, you are using a standalone installation. Nuts. It shouldn't be looking in /usr/lib64, but it is anyway. cmake drives me crazy some times.\n. Your subversion issue might be fixed by #844.\n. /usr/bin/ld: unrecognized option '-plugin'\nhttps://gist.github.com/anonymous/4062531b37355aa51d30#file-01-scons-L77\nDo you have binutils installed by Linuxbrew? Report which -a ld\nThis issue is probably resolved by #845. scons ignores PATH environment variable\n. Please submit one pull request per formula.\n. Please report\nsh\nbrew list python |grep bz2.so\nYou should see a file named lib/python2.7/lib-dynload/bz2.so.\nIf not, please run\nbrew install bzip2\nbrew reinstall python\nIf this resolves your issue, then it looks as though python and python3 should depend on bzip2.\n. Did you have to reinstall python after installing bzip2?\n. Fixed. Thanks for the bug report, Martin, and others for help troubleshooting.\n. Oh. I didn't expect that. Perhaps I should have made bzip2 a dependency of node then rather than of python. I'm going to leave it as a dependency of python, because the bz2 module of Python won't work without it.\n. I think this serf formula is different than the serf mentioned in subversion. This one is https://serfdom.io/\nThe one in subversion is http://serf.apache.org/\n. Thanks for the fix, Maxim. I'll be happy to merge it after the suggested change.\n. Unrelated error when installing curl\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/111801055#L1229\n/usr/bin/perl ./zsh.pl ../src/curl > _curl\n/tmp/curl20160225-30127-6bwhx2/curl-7.47.1/src/.libs/lt-curl: error while loading shared libraries: liblber-2.4.so.2: cannot open shared object file: No such file or directory\nliblber is related to LDAP. https://packages.debian.org/sid/amd64/libldap-2.4-2/filelist\n. No worries. Merged. Thanks for your contribution, Maxim.\n. That's quite odd indeed. I'm not able to reproduce this bug myself, so it'll be difficult for me to troubleshoot.\nsh\n$ LD_LIBRARY_PATH=/foo python -c 'import numpy'\n$ echo $?\n0\n$ brew install -i hello\n$ echo $?\n0\nDoes the following patch help?\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex ea1b4d8..42b2ec7 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -58,6 +58,7 @@ module Stdenv\n if OS.linux? && ![\"glibc\", \"glibc25\"].include?(formula && formula.name)\n   # Add this formula's library directory to the shared library search path.\n\n\n\nlib.mkdir_p if formula\n       prepend \"LD_LIBRARY_PATH\", formula.lib, File::PATH_SEPARATOR if formula\n# Set the dynamic linker and library search path.\n```\n\n\nI probably won't commit it as is, but it could help for troubleshooting.\n. Thanks for the correction to my patch. I hadn't tested it, clearly.\nI have a thought. Was your python installed before glibc was installed? I bet your python is using your system's ld.so, but Homebrew's libc, which can cause grief. https://gist.github.com/anonymous/7e1f2d793dd43cc22e31#file-00-config-out-L12\nPlease report\nsh\nreadelf -l `which python` |grep interpreter\nAfter that, please try brew patchelf python. Any chance it starts to work without this patch after that?\n. Okay. Thanks for trying. \nThis appears to be a known bug in glibc 2.19! I really don't know why it affects you but doesn't affect me. I'm also using glibc 2.19 built from Linuxbrew. I'd be curious to know why if you're able to figure it out.\nAdding a second path to LD_LIBRARY_PATH that definitely exists (but is harmless) might also work around this issue. Can you try that?\nThis bug is fixed in glibc 2.20, but I haven't figured out yet how to upgrade glibc without breaking everything. I'll have to work on that.\nHere's the bug report:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1184234\nhttps://bodhi.fedoraproject.org/updates/glibc-2.20-8.fc21\nAnd here's a patch!\nhttps://sourceware.org/ml/libc-alpha/2014-10/msg00328.html\n. Perhaps this patch is okay as is then. The empty lib directory in the keg should be removed by brew when cleaning up empty directories after installation of the formula. Can you confirm that?\nAny chance your curl fails to download git in brew install git but works with brew fetch git as in #797?\n. Is FileUtils. necessary? Does mkdir_p formula.lib if formula work? If not, which ruby --version are you using?\n. > I installed git with brew install git, with no issues like #797.\nWere you able to instal git without this patch?\nsh\nrm -f `brew --cache`/git-*\nbrew install git\n. Thanks for clarifying. I was hoping that these were the same bugs. Oh well.\n. I'm able to reproduce this bug! brew install mongodb fails for me.\nBuildError: Failed executing: /gsc/btl/linuxbrew/opt/scons/bin/scons install --prefix=/gsc/btl/linuxbrew/Cellar/mongodb/3.2.3 -j24 CC=/gsc/btl/linuxbrew/bin/gcc-5 CXX=/gsc/btl/linuxbrew/bin/g++-5\\ -std=c++11 --use-new-tools\nbash-3.2$ /gsc/btl/linuxbrew/opt/scons/bin/scons install --prefix=/gsc/btl/linuxbrew/Cellar/mongodb/3.2.3 -j24 CC=/gsc/btl/linuxbrew/bin/gcc-5 CXX=/gsc/btl/linuxbrew/bin/g++-5 -std=c++11 --use-new-tools\nSegmentation fault\nWith this patch, it gets further than this! (but still fails later, see #845).\nI'm applying your patch. Thanks for troubleshooting a very difficult issue. I'm not sure how long it would have taken me to figure this out without your help.\nWould you like to submit a pull request for this fix? You've certainly earned the credit.\n. Fixed! Thanks for your help @erigler-usgs\n. Our fix unfortunately breaks unpacking any source archive that includes a directory named lib, such as gcc. :cry: I think we'll have to try option 2 of adding a second existing but harmless directory to LD_LIBRARY_PATH, such as $HOMEBREW_PREFIX.\nSee https://github.com/Linuxbrew/linuxbrew/pull/869#issuecomment-190360110\n. -I /bio/linuxbrew/Cellar/cairo/1.14.6_1/include/cairo is in the search path. Do you have cairo 1.14.6_1 installed? Does brew list | grep cairo-xlib return anything?\nhttps://gist.github.com/tseemann/2cbb6eeb2192942d85c4#file-02-make-L621-L623\n. I have the same issue with recent cairo not installing cairo-xlib.h.\n``\n$ findbrew --cellar cairo` -name cairo-xlib.h\n/gsc/btl/linuxbrew/Cellar/cairo/1.14.2/include/cairo/cairo-xlib.h\n/gsc/btl/linuxbrew/Cellar/cairo/1.14.2_1/include/cairo/cairo-xlib.h\n$ brew list cairo |grep cairo-xlib\nno matches\n``\n. Perhapsbrew install cairo --with-x11will help you.\n. I'm seeing this issue now as well. Didbrew install cairo --with-x11resolve it for you? I'm trying that now. If it does, we should update either thecairoformula or therformula for Linuxbrew, somehow.\n. I fixed a build error inlibxml2 --with-python, which is a dependency ofgtk-doc, which is a dependency ofcairo --with-x11, which is a dependency ofr. Did you follow that? :stuck_out_tongue_closed_eyes:\n. Buildingcairo --with-x11worked for me to fix this issue. Alsobrew install r --with-x11should also fix this issue. It's a bug thatbrew install r --without-x11, which is the default, still requirescairo-x11.\n. Hmm. I was wrong. On Mac, thex11dependency ofr` is optional, but on Linux the dependency is recommended. Ah, I think this is the issue:\nruby\n  cairo_opts << :optional if OS.linux?\nIt looks as though cairo is no longer optional on Linux. Is there a --without-cairo option to pass to the configuration of R? Or should cairo be made a mandatory dependency on Linux, as it is on Mac?\n. It's probably not searching your system directories. You can set up a fake keg as in #826. That's what I've done on my system. Check out #892 though, which is a WIP Linuxbrew formula for xorg.\n. The xorg formula is working now.\nsh\nbrew install linuxbrew/xorg/xorg\nbrew install cairo --with-x11\nbrew install r\n. I'm afraid I don't really have the time to help troubleshoot this issue. Sorry.\nhttps://gist.github.com/ylluminate/54cf2d92d91d56c6bf18#file-gistify622562-txt-L164\n../include/qvaluelist.h:91:13: error: \u2018ptrdiff_t\u2019 does not name a type\nPlease post brew install qt; brew gist-logs qt. Perhaps someone else may be able to help you.\n. Do you have root access? If so, installing QT with apt-get may be easier. X11 support for Linuxbrew is not well tested nor supported.\n. In the gist that you posted, I couldn't find an error related to zlib. Just this error:\nhttps://gist.github.com/anonymous/1613a9b672b3215546c4#file-02-make-L27\n/usr/include/stdlib.h:521:1: error: C++ style comments are not allowed in ISO C90\n // XXX There should be a macro to signal with C++ revision is used.\n. > It manifested when using /usr as include directory for zlib.\nRight. Of course. I understand. Yes, good patch. Please fix up as per my comments, and I'll merge it.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/111967566\nTesting subversion\n==> svnadmin create test\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/subversion/1.9.3/bin/svnadmin: error while loading shared libraries: libapr-1.so.0: cannot open shared object file: No such file or directory\nError: subversion: failed\nFailed executing: /home/travis/build/Linuxbrew/linuxbrew/Cellar/subversion/1.9.3/bin/svnadmin create test\n. Strange error from Travis, unrelated to this patch.\n. Merged. Thanks for your contribution, Arseny!\n. Perhaps this solution: http://scons.org/doc/1.1.0/HTML/scons-user/x1673.html\npython\n        import os\n        env = Environment(ENV = os.environ)\n. I can confirm that I also see this error:\nhttps://gist.github.com/eiennohito/4406be3e901cd6084c4c#L40\nCompiler must support a thread local storage class for trivially constructible types\nIn the future, please use brew gist-logs mongodb\n. > It did not upload scons log when I tried.\nI see. Thanks. I guess brew gist-logs needs to be fixed to include the log output of scons.\n. Then how about changing\npython\nenv['ENV']['PATH']    = '/usr/local/bin:/opt/bin:/bin:/usr/bin'\nto\npython\nimport os\nenv['ENV']['PATH']    = os.environ['PATH']\n. Great. Thanks, Arseny. I may not be able to merge it until Monday.\n. Hmm. I think I prefer your original suggestion of simply adding $HOMEBREW_PREFIX/bin to the default PATH of SCons. I'm okay with that solution. It's simpler.\n. What error message without this patch are you trying to fix? Please report brew gist-logs rust.\nCan you test on Mac, and does this issue also affect Mac OS? If so, please send this patch upstream to Homebrew/homebrew.\n. I believe the cargo resource has been bumped to 0.9.0 by upstream Homebrew and merged into Linuxbrew, resolving this issue.\n. I don't know the root cause of your error, but brew install gcc vim may resolve this issue.\n. Great! Glad to hear it. I wonder whether brew install gcc was necessary or not.\n. Glad to hear that you resolved it. Here's instructions to install Linuxbrew on CentOS 6:\nhttps://github.com/Linuxbrew/brew/wiki/CentOS6. Merged. Thanks for your contribution, Izaak.\n. /usr/bin/perl ./zsh.pl ../src/curl > _curl\n/tmp/curl20160226-32688-7lw21u/curl-7.47.1/src/.libs/lt-curl: error while loading shared libraries: liblber-2.4.so.2: cannot open shared object file: No such file or directory\nhttps://gist.github.com/anonymous/3355ded791bc80a3e359#file-02-make-L473\nI've seen this error as well on some systems. liblber-2.4.so.2 is provided by homebrew/dupes/openldap. I think this happens when the host system has openldap installed, but Linuxbrew does not. One solution is to configure curl without support for openldap, the option is to make openldap a dependency of curl.\n. > Would you accept a PR to make openldap a dependency of curl?\nThere's some interaction with the host system, which I'd rather avoid. ldap isn't a hard dependency of curl. I'd rather make it an :optional dependency. Is there a configure --without-ldap option for curl?\n. > Any thoughts on the sphinx-doc failure?\nhttps://gist.github.com/anonymous/a567e0bb1a76107b9aa0#file-01-python-L17\nImportError: No module named setuptools\nInstal your host system's Python package for setuptools, or brew install python.\n. The setuptools issue has come up about eleven times before. A brew doctor test or some other solution seems in order.\n. I don't know definitevely the answer to that question. I would go with sudo apt-get install python-setuptools.\n. Merged. Thanks for your contribution, Arseny.\n. X11 is not well supported by Linuxbrew. It can be made to work with some creative symlinks. See the discussion in #826. Also report brew gist-logs vim. You are in uncharted territory here.\n. Please change this to\nruby\ndepends_on \"Homebrew/dupes/openldap\" => :optional unless OS.mac?\nPlease remove\nruby\n  option \"without-ldap\", \"Build without LDAP support\"\n. The option option \"without-ldap\" is in fact specific to the Linuxbrew formula. Typically Linuxbrew patches do not get merged back upstream in Homebrew.\n. Merged. Thanks for your contribution, Izaak!\n. Merged. Thanks again for your contribution, Bob!\n. Okay. I won't be following up on this one either for now. Thanks for the bug report in any case, Bob.\n. I think that this issue should be fixed in the cleaner.rb method Cleaner::clean, so it fixes all formulas with this issue. Would you like to take a stab at a fix and a pull request?\n. It's not patching Makefile.in that's the problem, but patching src/Makefile.am is causing the troubles.\n. Thanks for your fix, Simon. Fix the above suggestion, and I'll merge it. Cheers.\n. > Perhaps I should start an issue in the homebrew issue tracker?\nIf you can reproduce this issue on Mac, then yes, please do. In principle, it should also affect Mac.\n. > Sorry, I do feel bad about this change because it's papering over the problem of the interaction between patches and autotools.\nIt's not ideal, but if this patch is only needed for Mac, then it's a reasonable, pragmatic solution.\n. Failed to execute: /home/travis/build/Linuxbrew/linuxbrew/Cellar/gnu-tar/1.28/bin/gtar\nError: gnu-tar: failed\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/112362026#L562\n. I've fixed the test failure with 84209b7\n. Merged. Thanks for your contribution, Simon!\n. > Note: I didn't change the name, even though it no longer really makes sense. If you agree, I can file an issue upstream to rename it.\nI agree that the formula would be better named wxwidgets. I can't say whether the Homebrew maintainers will agree, but you can ask.\n. Merged. Thanks for you contribution, Bob!\n. Merged. Thanks again, Bob!\n. Merged. Thanks for all your work, Bob!\n. > Perhaps nobody is actually running a completely standalone install.\nI do! My PATH at work is set to $HOMEBREW_PREFIX/bin and nothing else. We could make a virtual package called linuxbrew-core that depends on all the utilities that are typically assume to be installed and available in the PATH.\nLet's start a list:\nbash coreutils diffutils findutils gawk gnu-sed gnu-which grep gzip make perl ruby tar\n. > Secondly, is there a mailing list for major feature changes such as this?\nNo, there isn't. I'd like to keep everything on GitHub issues though. How about we start an issue called \"Linuxbrew Updates\", where I can post major changes?\n. > However I had numerous problems using standalone due to linking to a brewed glibc instead of whatever special sauce is in the RHEL libc.\nI'm sorry that glibc gave you grief. If you open an issue, I can try to resolve the problem.\n. > I think this should probably be documented in the regular linuxbrew installation, otherwise it wouldn't be too different from a standalone installation.\nOn system's with glibc 2.19 and newer, glibc is not installed by default, for example on Ubuntu 14 Trusty. On older systems, glibc is installed by default, and, yes, you're right it's about the same as Standalone Linuxbrew being the default on those older systems. I think that's a good thing, because the libraries on those systems are often very old as well.\nAdding documentation is a good suggestion though. I'll add a paragraph to the README.md.\n. Update documentation on bottles: https://github.com/Linuxbrew/linuxbrew#bottles\n. The Linuxbrew mailing list Linuxbrew Updates is started over at #864\n. The Debian virtual package build-essential depends on gcc, glibc and make. I expected more dependencies. I think that there are a lot more essential packages that are essential not just for building but for a running a Debian system.\n. I haven't got around to attempting to build all packages in Linuxbrew. It's a good idea, but a big undertaking.\n. > I'm building everything from source. Now I'm struggling with subversion --with-serf...\nDo you need --with-serf? What doest it do? The patch #872 for scons, which I've just merged, may be related.\n. > It might be good to add a little blurb on the homepage/README about subscribing to the Linuxbrew Updates issues to serve as a mailing list.\nDone.\n. I believe these issues are resolved. Feel free to open a new issue if you have unresolved questions.\n. The curl error is unrelated and should be fixed now.\n. Merged. Thanks for your contributions, George!\n. As our first issue, bottles are now enabled by default on Linuxbrew. Bottles require glibc 2.19 or newer. On systems with a recent version of glibc, like Ubuntu 14 Trusty, you're ready to go, and your system will start downloading and installing bottles instead of source when available. On older systems, Linuxbrew will download and install glibc 2.19. If you'd rather continue to use your system's version of glibc, add to your .bashrc or .zshrc:\nexport HOMEBREW_BUILD_FROM_SOURCE=1\n. @rwhogg has joined the Linuxbrew Team. Welcome, Bob!\n@maxim-belkin and he recently created the Linuxbrew/xorg/xorg formula to install X.Org on Linuxbrew. It will soon be the default provider of X11 libraries on Linuxbrew, which will eliminate the need for making a fake xorg keg that links to the host X11 libraries. In the meantime\nbrew install linuxbrew/xorg/xorg\n. I'm moving the Linuxbrew Updates mailing list issue to #1000 because 1000 is easier to remember than 864. :tada: :balloon:\n. The curl issue is unrelated and should be fixed now.\n. Merged. Thanks for your contribution, George!\n. mercurial/base85.c:13:20: fatal error: Python.h: No such file or directory\n #include <Python.h>\nhttps://gist.github.com/anonymous/557593ffd579dad1f4f7#file-01-make-L18\nThat's fixed by either brew install python or sudo apt-get install python-dev or sudo yum install python-devel.\n. Error: No available formula with the name \"homebrew/dupes/ncurses\"\nPlease tap it and then try again: brew tap homebrew/dupes\nhttps://gist.github.com/hartzell/c6800ae8e9ee093c1f57#file-install-output-txt-L18\nI wasn't able to reproduce this error myself. Have you updated the docker image? docker pull sjackman/linuxbrew.\n. > If mercurial depends on Python (in the sense that you need to provide it somehow) shouldn't it depend on it in the Formula?\nYes, probably. I want to avoid installing the Homebrewed python if the system's python can be used, so I've avoided adding a hard \"python\" dependency to formulas. The Python requirement logic needs to be improved for Linuxbrew.\n. I'm not able to reproduce that unzip issue. It looks like a Docker issue/bug. Perhaps it's specific to the version of Docker. I'm using Docker version 1.7.1, build 786b29d.\n. > I'm not working with the copy of linuxbrew in ~/.linuxbrew, but cloning my own so that I can make changes to push back to the project. That might be an unsupported model for using the container.\nYou can add your own remote to ~/.linuxbrew using git remote add hartzell https://github.com/hartzell/linuxbrew.git. Cloning your own is fine too, but I find the remote easier.\n. Thanks! That's helpful.\n. Hi, Simon. Sorry for the difficulty that you experienced. tmux has a binary bottle now. Would you like to give that a shot? brew update && brew install tmux will install the binary bottle by default.\n. Thanks for the bug report, Mark. I don't have the time to fix it myself. Fell free to submit a pull request if you're so inclined.\n. Can you please include a log of the failed build without your patch using brew gist-logs gcc?\n. The Travis failure is due to an unrelated workaround hack for a buggy glibc.\n==> brew install --verbose --build-bottle gcc\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.3.0/gcc-5.3.0.tar.bz2\nAlready downloaded: /home/travis/.cache/Homebrew/gcc-5.3.0.tar.bz2\n==> Verifying gcc-5.3.0.tar.bz2 checksum\ntar xf /home/travis/.cache/Homebrew/gcc-5.3.0.tar.bz2\nError: File exists - /home/travis/build/Linuxbrew/linuxbrew/Cellar/gcc/5.3.0/lib\n==> FAILED\nSee 5caad9a19bb8210680dde4397119af7aca9b4161 https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L61-L64\n. I was able to reproduce this error using brew install gcc --without-glibc on CentOS 5.\nhttps://gist.github.com/b9ac9791a24bc8d1630b\n/home/sjackman/.linuxbrew/Cellar/gcc/5.3.0/x86_64-unknown-linux-gnu/sys-include \n   -o conftest -g -O2 -Os -w -pipe -march=core2   conftest.c  >&5\n/var/tmp/sjackman/gcc20160229-27179-1blm7mu/gcc-5.3.0/build/./gcc/cc1: error while loading shared libraries: libisl.so.15: cannot open shared object file: No such file or directory\n. Merged. Thanks for your contribution, Simon!\n. Merged. Thanks for your contribution, Mark.\n. Project \"/tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/FSharp.Build-proto.fsproj\" (default target(s)):\n    Target CallFsSrGen:\n        Created directory \"obj/proto/./\"\n        Tool /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/../../../lib/bootstrap/4.0/fssrgen.exe execution started with arguments:  /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build/FSBuild.txt  obj/proto/./FSBuild.fs  FSBuild.resx \n    Target BeforeBuild:\n        Executing: mono --runtime=v4.0.30319 /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/../../../.nuget/NuGet.exe restore packages.config -PackagesDirectory packages -ConfigFile /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/../../../.nuget/NuGet.Config\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        WARNING: Error: SendFailure (Error writing headers)\n        Unable to find version '2.0.3' of package 'FsCheck'.\n        Unable to find version '2.6.4' of package 'NUnit.Runners'.\n        Unable to find version '3.0.0' of package 'NUnit'.\n        Unable to find version '3.0.0' of package 'NUnit.Console'.\n/tmp/mono--fsharp20160301-17865-17msfyb/src/FSharpSource.targets: error : Command 'mono --runtime=v4.0.30319 /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/../../../.nuget/NuGet.exe restore packages.config -PackagesDirectory packages -ConfigFile /tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/../../../.nuget/NuGet.Config' exited with code: 1.\n    Task \"Exec\" execution -- FAILED\n    Done building target \"BeforeBuild\" in project \"/tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/FSharp.Build-proto.fsproj\".-- FAILED\nDone building project \"/tmp/mono--fsharp20160301-17865-17msfyb/src/fsharp/FSharp.Build-proto/FSharp.Build-proto.fsproj\".-- FAILED\nhttps://gist.githubusercontent.com/anonymous/118b82cbffcdde3474b3/raw/c33dd1ee55ef5920154a2dfa22452859a8d3ba45/05.make\n. I'm afraid that I don't have the time available to troubleshoot this build failure myself. Hopefully someone else will stumble on this issue and be able to help you out.\n. Thanks, Bob. You've been a great help.\n. Fixed by #901.\n. Merged. Thanks for your contribution, Arseny!\n. > Should I still submit this to Homebrew even though the formula shouldn't be used on OSX?\nNo. Mac OS has the formula osxfuse.\n. ==> audit problems\nlibfuse:\n * Description is too long. \"name: desc\" should be less than 80 characters.\nLength is calculated as libfuse + desc. (currently 88)\n\nDoes your submission pass brew audit --strict <formula> (where <formula> is the name of the formula you're submitting)?\n\nPlease read and follow https://github.com/Linuxbrew/linuxbrew/blob/master/.github/PULL_REQUEST_TEMPLATE.md#all-submissions\n. The test fails when using a system compiler (not Homebrewed installed gcc). You'll have to add -I#{include} and -L#{lib} to the compiler command.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/113669744\n0.00s==> brew test --verbose libfuse\nTesting libfuse\n==> /usr/bin/gcc -DFUSE_USE_VERSION=26 -D_FILE_OFFSET_BITS=64 -o fuse-test fuse-test.c -lfuse\nfuse-test.c:1:18: fatal error: fuse.h: No such file or directory\ncompilation terminated.\nError: libfuse: failed\n. Or even better, add $CPPFLAGS and $LDFLAGS to the compiler command.\n. The Travis error is transient.\nInstalling rake 10.5.0\nGem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/gems/json-1.8.3.gem)\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/114456010#L228-L230\n. For future contributions, the preferred commit log message is\nlibfuse 2.9.5 (new formula) for Linxubrew\n. https://gist.github.com/sjackman/00693e477d388d80738a#file-01-makeconf-sh-L14\nconfig.rpath not found! - is gettext installed?\n. Added\nruby\n  depends_on \"gettext\"\n  def install\n    cp Formula[\"gettext\"].pkgshare/\"config.rpath\", \".\"\n. /gsc/btl/linuxbrew/include/fuse/fuse_common.h:33:2: error: #error Please add -D_FILE_OFFSET_BITS=64 to your compile flags!\nError: libfuse: failed\nIt seems -D_FILE_OFFSET_BITS=64 is necessary for me. Was it for you?\n. The current test fails if $CPPFLAGS or $LDFLAGS has spaces in it.\n. This works:\nruby\n    system \"$CC $CPPFLAGS -DFUSE_USE_VERSION=26 -D_FILE_OFFSET_BITS=64 fuse-test.c $LDFLAGS -lfuse\"\n. Merged. Thanks again for your contribution, David!\n. Homebrew/versions is not a supported tap of Linuxbrew. You could, if you like, adopt the maintenance of it. If it goes well, we can start a fork in Linuxbrew/versions.\nI agree with your assessment of the RPATH.\n. It looks as though the python formula totally ignores the LDFLAGS environment variable provided by https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L42.\nAre you using your system's GCC or the Homebrewed GCC? Please report the output of brew config. brew install gcc should I believe also resolve your issue.\nPlease submit a pull request similar to cd680d7281f1b59b9603853403f562bd70ac97d2 for LDFLAGS.\n. If you like you can use the GitHub web interface to edit the file. Go to https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/python.rb and click the \"edit\" icon. Make your changes, and it'll open a pull request. Model it after the one in cd680d7, but for ldflags.\n. ==> brew audit python\nError: 1 problem in 1 formula\npython:\n * 132: Trailing whitespace was found\n==> FAILED\nYou can use brew audit --style python to catch style issues such as these.\n. Fixed by #886.\n. If you plan on submitting a pull request, there's no need to also submit an issue. Just the PR is fine.\n. > The .to_s is necessary, unfortunately.\nThis is for my own education now. I'm also reasonably new to Ruby. I learned it through Homebrew/Linuxbrew, my first Ruby project. What error message are you seeing? Here's my quick test.\n$ linuxbrew irb\n==> Interactive Homebrew Shell\nExample commands available with: brew irb --examples\nirb(main):001:0> \"#{OS::NAME}#{true ? Hardware::CPU.bits : \"\"}\"\n=> \"linux64\"\nirb(main):002:0> \"#{OS::NAME}#{false ? Hardware::CPU.bits : \"\"}\"\n=> \"linux\"\nirb(main):003:0>\n. For future contributions, the preferred commit message (the one line summary) is simply\nchapel: Fix for Linuxbrew\n. Merged. Thanks again for your contribution, Bob.\n. Opening a new terminal should fix it too.\n. /usr/bin/gcc-4.8 -O2 -fsigned-char -Os -w -pipe -march=core2 -c cooked_interface.c\ncommon_interface.c:16:27: fatal error: sys/syslimits.h: No such file or directory\n #include <sys/syslimits.h>\nhttps://gist.github.com/anonymous/e766c8c18c05de90644e#file-03-make-L19-L21\n. Is disabling all three patches necessary? Please only disable those patches necessary to get it to build on Linux.\n. Has the Linux patch been sent to the upstream authors?\n. ==> Installing cdparanoia dependency: homebrew/dupes/m4\n==> Downloading http://ftpmirror.gnu.org/m4/m4-1.4.17.tar.xz\nAlready downloaded: /home/travis/.cache/Homebrew/m4-1.4.17.tar.xz\n==> Verifying m4-1.4.17.tar.xz checksum\nError: Empty archive\n==> FAILED\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/113594534\n. Merged. Thanks for your contribution, Piotr.\n. https://gist.github.com/anonymous/5c40a554c35054c7178c#file-02-make-L164-L167\n/usr/bin/g++-4.8 -DHAVE_CONFIG_H -I. -I. -I.. -I./../trackdb -I./../paranoia   -isystem/home/doomhammer/.linuxbrew/include -DDRIVER_TABLE_FILE=\\\"/home/doomhammer/.linuxbrew/Cellar/cdrdao/1.2.3/share/cdrdao/drivers\\\" -Os -w -pipe -march=core2 -c -o sg_err.o sg_err.cc\nScsiIf-linux.cc: In static member function \u2018static ScsiIf::ScanData* ScsiIf::scan(int*, char*)\u2019:\nScsiIf-linux.cc:287:37: error: no matching function for call to \u2018stat::stat(const char [22], stat*)\u2019\n     if (stat(SYSFS_SCSI_DEVICES, &st) != 0) {\n. Is disabling both patches necessary?\n. Ah, yes. Sorry. So many pull requests. Which is a good thing!\n. Has the Linux patch been submitted to the upstream author?\n. For future contributions, the preferred commit message summary (the first line) is:\ncdrdao: Fix for Linuxbrew\n. Merged. Thanks for your contribution, Piotr!\n. Errno::EEXIST: File exists - [Linuxbrew]/Cellar/gcc/5.3.0/lib\nIt's strange that I didn't run into that issue myself. Either removing the lib.mkdir or changing it to mkdir_p libdir should work. Submit a pull request with a fix, if you like.\n. Error: Homebrew GCC requested, but formula gcc44 not found!\nYou may need to: brew tap homebrew/versions\nPlease report brew config and env |grep HOMEBREW. Do you have HOMEBREW_CC set? If so, unset it.\n. Sorry. That was a typo. It should have been mkdir_p lib. That fix works, and I've merged it. Thanks for the help troubleshooting, Maxim.\n. error while loading shared libraries: libncursesw.so.5\nDoes brew install ncurses resolve this issue?\n. Hmm. This is a challenge. ghc uses some binaries to bootstrap, and it looks as though those binaries depend on libncursesw.so.5. As a workaround, can you tell me whether the following symlink gets it working?\nsh\nln -s libncursesw.so.6 `brew --prefix`/lib/libncursesw.so.5\n. Please open a separate ticket for the R issue and report brew gist-logs r.\n. It should be just fine. A reasonable fix would be in the ghc formula create the libncursesw.so.5 symlink in lib in install and then remove it at the end after it's compiled. I think it's just a build time dependency, not a run time dep. I'll have to check that. Please do submit a pull request to do that if you like.\n. @jwhite007 Are you able/interested in submitting a pull request to fix this issue? Add to def install something like the following (untested)\nruby\nln_s Formula[\"ncurses\"].lib/\"libncursesw.so.6\", lib/\"libncursesw.so.5\" if OS.linux?\nand then at the end of def install\nruby\nrm lib/\"libncursesw.so.5\" if OS.linux?\n. Also please add a comment to the code that explains (in one line) why this hack is needed.\n. Get better first! Good luck with it.\n. This particular fix is only necessary in the formula of ghc because it uses precompiled executables to bootstrap which depend on libncursesw.so.5. For gnupg2, brew reinstall readline gnupg2 should fix it. You'll need to reinstall anything that depends on ncurses. See brew uses --installed ncurses\n. ghc is not labelled as being cellar :any, meaning that it will only work if it's installed in a particular directory that it was built for, such as /home/linuxbrew/.linuxbrew. So, no, I guess not. The logic that tests whether a bottle is relocatable or not is automated and sometimes wrong. So, I suggest building a bottle in one HOMEBREW_PREFIX, installing it in a different HOMEBREW_PREFIX and reporting back whether that bottle works for you.\n. Thanks for the report, @kimleeng. You can if you like open a new issue over at https://github.com/Homebrew/homebrew-science/issues\nBe sure to include a link to this issue if you do.\n. I believe this particular bug is fixed by 5503308, but future contributions are more than welcome, James! Good luck with the move.\n. I'd like to fix this bug. I'll have to think on how to fix it properly. The workaround is\nsh\nbrew remove curl\nbrew fetch openssl curl\nbrew install curl\n\nI can't recall if I installed it deliberately, or if it was installed as a dependency for something else\n\nIt was likely installed as a dependency. You can check with\nsh\nbrew uses --installed curl\n. Done.\n. Sorry for the confusion. This issue persists.\n. I may make --without-gssapi the default on Linuxbrew. Thoughts?\n. What is GSSAPI support used for? What do you use it for? I'm just curious. I've never used it.\n. What do you personally use Kerberos for though? I've never found an occasion to use it.\n. Merged. Thanks again for your contribution, Maxim.\n. For future contributions the preferred commit message is kdiff3: Fix for Linuxbrew\n. Merged. Thanks, Bob!\n. Merged. Thanks for your contribution!\n. Merged mkdir_p lib. Thanks!\n. For future contributions the preferred commit message is libmetalink: Fix for Linuxbrew\n. Please a log of the failed build without your patch using brew gist-logs libmetalink.\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/.github/PULL_REQUEST_TEMPLATE.md\n. checking for EXPAT... no\nconfigure: WARNING: No package 'expat' found\nchecking for XML_ParserCreate in -lexpat... no\nchecking for xml2-config... /usr/bin/xml2-config\nchecking for libxml - version >= 2.6.24... no\n*** Could not run libxml test program, checking why...\n*** The test program failed to compile or link. See the file config.log for the\n*** exact error that occured. This usually means LIBXML was incorrectly installed\n*** or that you have moved LIBXML since it was installed. In the latter case, you\n*** may want to edit the xml2-config script: /usr/bin/xml2-config\nconfigure: error: in `/var/tmp/sjackman/libmetalink20160304-1573-qizhe1/libmetalink-0.1.3':\nconfigure: error: Neither expat nor libxml2 found. Please install one of them and run configure again.\nSee `config.log' for more details\n. For future contributions, the preferred commit log message is\nlibmetalink: Depends on libxml2 for Linuxbrew\n. Do you have a particular reason to choose libxml2 over expat?\n. Lucky issue #888!\n. Merged. Thanks again for your contribution, Maxim! Have a good weekend.\n. Python is a mess because it likes to hardcode search paths into /usr/lib. The recently merged #886 may help with this, but I'm not convinced that it's comprehensive. Are you using the Linuxbrew installed gcc? That definitely helps. So in short, no, but pull requests are welcome if you can find a fix.\nWhen posting a massive gist, please quote and link to the interesting line.\n. I'm afraid I really don't know. I guess you'd have to figure out what Python's library search path is and debug that.\n. > is there an easy way to brew a package with debugging symbols?\nIt's the default now. It used to be the default to strip installed executables. I don't know when this changed.\n. That sounds great, Piotr. =) :wine_glass:\nLinuxbrew is still a moving target. It can tricky to determine exactly which previous patch resolved your issue.\n. For future contributions the preferred commit message is capstone: Fix for Linuxbrew\n. Merged as\nruby\n    system \"./make.sh\"\n    if OS.mac?\n      system \"./make.sh\", \"install\"\n    else\n      system \"make\", \"install\", \"PREFIX=#{prefix}\"\n    end\n. Thanks again for your contribution, David!\n. Amazing! Thanks, Bob. I'm looking forward to eventually testing out brew install cairo --with-x11 and brew install r --with-x11.\n. Great work! Thanks Maxim and Bob. It's going to be very useful, I think.\nWhat's the thoughts on one big formula with many resources vs one formula per library? I have an uninformed preference toward one formula per library and one xorg virtual package that depends on it, but I'd like to hear the benefits of both ways.\n. The boilerplate code could be deduplicated by using a XFormula base class. It would be easier to update the versions of the individual components if they were in separate formula. It could be a Linuxbrew/x11 tap with the 60+ formula in it.\nI am okay though with one big xorg package, or a perhaps a handful of packages as Maxim was suggesting. With one big formula, it might be easier to update it periodically on some sort of release schedule, and tie those updates to the release schedule of the XOrg project.\n. Interesting, and how odd.\n. And cool to hear that it builds on Mac OS! I was wondering whether it would.\n. version \"7\"\nCan you find out what versions of these libraries are used by xorg 7.7, use those same versions of the libraries, and change the version number to 7.7?\n. Hi, Maxim. On Mac OS it should use the binutils provided by the host OS (aka XCode and Command Line Tools). If it can build with clang, great, and if not, add a fails_with :clang stanza. If it doesn't build with the host binutils I would forget about the Mac OS support for now and focus on Linux.\n. If we're releasing one big X.Org formula, I want to avoid updating it super often and driving the users crazy with updates. If we're going to do only periodic releases, it would be better I think to tie our releases to X.Org releases. X.Org 7.7 was released on 2012-06-06, so it's pretty darn ancient. So, I agree I'd rather not use X.Org 7.7 What do you think we should do? What has Debian or Ubuntu done? How about we use the same versions as a particular Ubuntu release, such as trusty or wily.\n. > Actually, problems on a Mac appear very close to the very end of compilation and this is where I felt that if we had small packages -- it would have been much faster to troubleshoot.\nThere's a number of things that may be easier with small packages. Packaging each library individually in linxubrew/x11 tap is appealing to me.\n. Homebrew already has a tap named homebrew/x11, which is for application that use X11 libraries.\nTo avoid confusion, I'm going to start a tap named linuxbrew/xorg, for the X.Org libraries themselves.\n. Done: https://github.com/Linuxbrew/homebrew-xorg\n. @rwhogg Which do you prefer, the monolithic xorg formula or the linuxbrew/xorg tap?\n. Great.\n. > Or do you think we should install formulas into their own folders (--prefix=#{prefix})?\nDefinitely put each formula in its own prefix.\n. > Quick question: how to avoid \"Error: Empty installation\" in a meta-formula that does not have anything to do inside its def install?\nAdd a README.md file that describes the purpose of the meta-formula. Put it either in prefix or doc.\n\nI'm almost done with the packages...\n Hide all checks\n\nGreat!\n. I believe etc and var (i.e. global Homebrew folders).\n. Moved to Linuxbrew/homebrew-xorg/issues/1.\n. @tseemann Torsten, I recall you having some X issues with R. Have you tried Linuxbrew/xorg/xorg?\n. Thanks for the bug report, James. It's fixed now.\n. Can you please submit a pull request to update the version and sha256?\nPerhaps I'll bottle the installer, and move the network installation to postinstall.\n. Those .nfs* files should be ignored by the File leak test.\n. @jwhite007 You only missed two steps, the git commit and git push.\n``` sh\nbrew update\ncd $(brew --prefix)\ngit checkout -b texlive origin/master\nbrew edit texlive\ngit commit -m 'texlive 20160305' Library/Formula/texlive.rb\ngit push jwhite007 texlive\nopen a pull request\ngit checkout master\nbrew cat texlive\n```\n. We need to find a stable mirror for this file with a versioned file name. We could archive it ourself on BinTray. I'd prefer to use someone else's mirror if possible.\n. > Ostensibly if the download from \"url\" fails then a download from \"mirror\" is attempted... correct?\nCorrect.\n\nWhen a site offers the tar.gz, but no sha256, how are the rb writers dealing with this?\n\nThe contributor of the formula downloads the file and calculates the sha256.\nThe issue is that the file name is not versioned, and the developers update that file regularly.\nWe need to either cache the copy that we've downloaded on Bintray, or find a stable, versioned mirror.\n. @DoomHammer I've seen this test failure now too on Ubuntu 15.10 with Ruby 2.1.5p273. Where did you see this error?\n. https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/test/test_formula.rb#L365\nruby\np f3.installed_kegs, f3.eligible_kegs_for_cleanup\nassert_equal f3.installed_kegs[0..1], f3.eligible_kegs_for_cleanup\n```\n[#, #, #]\n[#, #]\n```\nFailure:\nFormulaTests#test_eligible_kegs_for_cleanup [/home/ubuntu/.linuxbrew/Library/Homebrew/test/test_formula.rb:366]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n [#<Keg:/tmp/homebrew_tests20160307-25418-1w2960h/cellar/testball/0.2>,\n- #<Keg:/tmp/homebrew_tests20160307-25418-1w2960h/cellar/testball/0.3>]\n+ #<Keg:/tmp/homebrew_tests20160307-25418-1w2960h/cellar/testball/0.1>]\n. The question seems to be, in what order are the elements returned by installed_kegs supposed to be?\n. The directories returned by installed_kegs are in the ordered returned by Pathname::children, which is arbitrary and determined by the operating system and file system.\n. Here are two possible fixes, one using sort and the other using Set. I prefer the sort.\n``` diff\ndiff --git a/Library/Homebrew/test/test_formula.rb b/Library/Homebrew/test/test_formula.rb\nindex e571f56..0940ef4 100644\n--- a/Library/Homebrew/test/test_formula.rb\n+++ b/Library/Homebrew/test/test_formula.rb\n@@ -362,7 +362,10 @@ class FormulaTests < Homebrew::TestCase\n     assert_predicate f2, :installed?\n     assert_predicate f3, :installed?\n\nassert_equal f3.installed_kegs[0..1], f3.eligible_kegs_for_cleanup\nassert_equal [Keg.new(f1.prefix), Keg.new(f2.prefix)],\nf3.eligible_kegs_for_cleanup.sort_by(&:version)\nassert_equal Set.new([Keg.new(f1.prefix), Keg.new(f2.prefix)]),\nSet.new(f3.eligible_kegs_for_cleanup)\n   ensure\n     [f1, f2, f3].each(&:clear_cache)\n     f3.rack.rmtree\n``\n. Fixed!\n.brew install gccmay work around this issue.\n.gettextwas compiled againstncurses 5.9butncurseswas upgraded to6.0.brew reinstall gettextYou may need to reinstall other packages.brew uses --installed ncurses`\n. Glad to hear it worked. Figuring out how to better handle library upgrades is definitely on my radar.\n. Glad to hear that the workaround worked for you.\n\nsh\nbrew install gcc openssl\n. https://gist.github.com/anonymous/246d24b39b630855c98e#file-04-make-L560\n139901738440384:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:187:filename(libz.so): libz.so: cannot open shared object file: No such file or directory\n139901738440384:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:233:\n139901738440384:error:29064065:lib(41):BIO_ZLIB_NEW:zlib not supported:c_zlib.c:463:\n140352479790784:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:187:filename(libz.so): libz.so: cannot open shared object file: No such file or directory\n140352479790784:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:233:\n140352479790784:error:29064065:lib(41):BIO_ZLIB_NEW:zlib not supported:c_zlib.c:463:\ncmp: EOF on ./p.zlib.clear\nmake[1]: *** [test_enc] Error 1\nmake[1]: Leaving directory `/tmp/openssl20160307-8018-1ebzb41/openssl-1.0.2g/test'\n. Here's another workaround for this issue:\nsh\nLD_LIBRARY_PATH=`brew --prefix`/lib brew install openssl\n. Fixed!\n. Setting LD_RUN_PATH broke installs that have glibc installed but not gcc. See #904 and #934. openssl ignores the LDFLAGS environment variable, so the dynamic linker was not getting set correctly.\n. I believe this issue is fixed! Can you test it for me?\n. Great!\n. ``\nbrew doctor\nInconsistency detected by ld.so: dl-close.c: 759: _dl_close: Assertionmap->l_init_called' failed!\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: Setting LD_* vars can break dynamic linking.\nSet variables:\n    LD_LIBRARY_PATH: /usr/lib32:/usr/local/lib:/usr/local/cuda-6.5/lib64\n```\nUnset LD_LIBRARY_PATH as brew doctor recommends will likely fix your issue.\n. If you're on a 32-bit system, adding /usr/lib32 to your LD_LIBRARY_PATH is going to create much trouble. Can you try removing unnecessary directories from your LD_LIBRARY_PATH? Try\nsh\nexport LD_LIBRARY_PATH=/usr/local/cuda-6.5/lib64\n. Which tools are you using that require that LD_LIBRARY_PATH be set like so?\n. You can try setting export HOMEBREW_BUILD_FROM_SOURCE=1. It will prevent glibc from being installed.\n. Instead of using LD_LIBRARY_PATH, consider instead editing /etc/ld.so.conf and run ldconfig after.\n. Which of the three directories in the LD_LIBRARY_PATH is causing the trouble with installing glibc? I suspect /usr/lib32, but it could also be /usr/local/lib.\n. Moved to https://github.com/Linuxbrew/brew/issues/73\n. I suppose it depends on how pervasive this problem is. If it affects only this one formula, then it could be hacked around within this one formula, but I'm going to guess that it affects many formula. In which case, the user should probably modify their environment globally. Adding a brew doctor check makes sense, I think. If XDG_DATA_DIRS is not set, then everything is fine. If it is set, check that it contains $(brew --prefix)/share.\n. I think that the brew doctor solution is the simplest. Does it only affect vala or also other packages that use XDG_DATA_DIRS?\n. Why sjackman/linuxbrew? Did you mean Linuxbrew/linuxbrew?\n. Right of course. There's actually a linuxbrew/linuxbrew docker image now too! Check it out.\nhttps://hub.docker.com/r/linuxbrew/linuxbrew/\nIt's rebuilt automatically every time I commit to https://github.com/Linuxbrew/linuxbrew.\n. Seems like a global fix would be better than hacking each package then, since it probably affects some of the fails packages as well. A doctor check then? Would you like to submit a pull request adding a doctor check?\n. Like this?\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/a2ps.rb#L33\nruby\n    system \"./configure\", \"--disable-debug\", \"--disable-dependency-tracking\",\n                          \"--prefix=#{prefix}\", \"--sysconfdir=#{etc}\",\n                          \"--with-lispdir=#{share}/emacs/site-lisp/#{name}\"\n. There's no need for it to be platform specific, because it will only report a message if XDG_DATA_DIRS is set, and it won't be on Mac.\nYes, add a check_x function to diagnostic.rb.\nAny function named check_* is run automatically, by zany magics.\n. brew tests TEST=test_filename.rb\nWill run only the test in that one file. brew tests runs them all.\n. Thanks once again for your contribution, Bob!\n. You can ignore the Travis build failure in openssl. I'm not yet sure what's causing it.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/114976675#L1032-L1038\nmake test\n\u2026\nzlib\nInconsistency detected by ld.so: dl-lookup.c: 728: _dl_lookup_symbol_x: Assertion `version == ((void *)0) || (flags & ~(DL_LOOKUP_ADD_DEPENDENCY | DL_LOOKUP_GSCOPE_LOCK)) == 0' failed!\nInconsistency detected by ld.so: dl-lookup.c: 728: _dl_lookup_symbol_x: Assertion `version == ((void *)0) || (flags & ~(DL_LOOKUP_ADD_DEPENDENCY | DL_LOOKUP_GSCOPE_LOCK)) == 0' failed!\ncmp: EOF on ./p.zlib.clear\nmake[1]: *** [test_enc] Error 1\nmake[1]: Leaving directory `/tmp/openssl20160310-11889-4c9c65/openssl-1.0.2g/test'\nmake: *** [tests] Error 2\n. Merged. Thanks for your contribution, Bob!\n. Does either brew postinstall openssl or brew reinstall openssl help?\n. These error messages don't make much sense to me. =/\nhttps://gist.githubusercontent.com/anonymous/f962327b84b18c7f8f36/raw/c4327c5f9c1c59c49b29dd8a3f87f18e9eba5dab/04.make\nResponse Verify Failure\n140458564159144:error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01:rsa_pk1.c:103:\n140458564159144:error:04067072:rsa routines:RSA_EAY_PUBLIC_DECRYPT:padding check failed:rsa_eay.c:705:\n140458564159144:error:0D0C5006:asn1 encoding routines:ASN1_item_verify:EVP lib:a_verify.c:218:\n140458564159144:error:27069065:OCSP routines:OCSP_basic_verify:certificate verify error:ocsp_vfy.c:138:Verify error:certificate signature failure\n=== INVALID SIGNATURE on the ISSUER CERTIFICATE ===\nNON-DELEGATED; Intermediate CA -> EE\nResponse verify OK\nNON-DELEGATED; Root CA -> Intermediate CA\nResponse verify OK\nNON-DELEGATED; Root CA -> EE\nResponse verify OK\nDELEGATED; Intermediate CA -> EE\nResponse verify OK\nDELEGATED; Root CA -> Intermediate CA\nResponse verify OK\nDELEGATED; Root CA -> EE\nResponse verify OK\nALL OCSP TESTS SUCCESSFUL\nTest X509v3_check_*\n../util/shlib_wrap.sh ./v3nametest\n../util/shlib_wrap.sh ./heartbeat_test\nmake[1]: *** [test_heartbeat] Speicherzugriffsfehler\nmake[1]: Leaving directory `/tmp/openssl20160311-10464-6c0742/openssl-1.0.2g/test'\nmake: *** [tests] Fehler 2\n. Can you try compiling OpenSSL without using Linuxbrew? If you get the same error message, please report it to the upstream OpenSSL developers.\n. brew install gcc openssl may also fix it.\n. Testing this fix over here: https://travis-ci.org/Linuxbrew/linuxbrew/builds/115958803\n. You'll have to fix this line for 32-bit Linux. 32-bit support is still experimental.\nhttps://github.com/Linuxbrew/linuxbrew/blob/3b0d037062c47d22c4e1c327f0edf14ad11e0d38/Library/Homebrew/requirements/glibc_requirement.rb#L16\nruby\nlibc = [\"/lib/x86_64-linux-gnu/libc.so.6\", \"/lib64/libc.so.6\"].find do |s|\n. Adding /lib/libc.so.6 to this list would probably fix it.\n. Did that fix it for you, Alexis?\n. I'm glad to hear that Linuxbrew on Raspberry Pi has been working for you! Although I do own a Raspberry Pi, I don't get to play around with it too often.\n. There may be other fixes needed. This'll get you closer though, I hope.\n. A pull request would be much appreciated. Thanks, Alexis.\n. I'll break out my Rasberry Pi and give it a whirl.\n. Both of these paths are on the search list:\nruby\n    libc = [\"/lib/x86_64-linux-gnu/libc.so.6\", \"/lib64/libc.so.6\", \"/lib/libc.so.6\", \"/lib/i386-linux-gnu/libc.so.6\", \"/lib/arm-linux-gnueabihf/libc.so.6\"].find do |s|\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/requirements/glibc_requirement.rb#L16\n. That's great, Patrick. A PR is welcome if you have patches that are needed for 64-bit ARM.. Merged. Thanks for your contribution, Bob!\n. The warning is just that, a warning. Libraries in /usr/local that conflict with the same libraries installed by Linuxbrew can cause conflicts and errors. That's why it gives this warning. You may ignore the warning if you like, if it's not giving you any trouble.\n. Please report brew gist-logs lua\nbrew install gcc lua may help.\n. I'm glad that you found a workaround.\nTry brew reinstall readline\nYou may have to reinstall other formula that use ncurses.\nSee brew uses --installed ncurses\n. Submit a pull request with the formula if you have the inclination. There are links to docs to help you with how to create a formula in CONTRIBUTING.md.\n. I don't have the time myself unfortunately to take packaging requests.\n. Assuming this software will also compile on Mac OS please submit this issue upstream to Homebrew/Homebrew. Submit a formula with a pull request if you can.\n. Try\nsh\nbrew remove openssl curl\nbrew fetch openssl curl\nbrew install curl\nIf that fails, brew install gcc and repeat above.\nCheck LD_LIBRARY_PATH for conflicting openssl libraries.\n. I don't feel that's necessary. Yes, curl can break due to shared library issues, but so can any command line application.\n. Glad that you got it working, Albert.\n. Interesting. It looks like the patch may be outdated and possibly fails to apply cleanly.\n. It's odd that /usr/bin/patch 2.5.8 on Mac has no trouble with this patch.\n. My guess is that the patch behaviour difference is due to different versions of patch.\n. Yes, I agree with Iggy's assessment.\nIf it's not failing on Mac, Homebrew may or may not accept the patch, but you can certainly try.\n. I believe this issue is resolved.\n. It looks as though it fails to build with GCC 4.8.\nTry brew install gcc bowtie2\n. This issue was moved to Homebrew/homebrew-science#3440\n. To escape multiple lines in back ticks, you need to use triple back ticks. See https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code\n. Fixed! Thanks for the bug report.\n. Sorry, I missed this PR. Fixed by 426c448556fba2a22774529f174e3077d927fbcf\nThanks for your contribution in any case!\n. It looks as though it fails to build with GCC 4.8. Try\nbrew install gcc v8\n. Try removing this line from the formula with brew edit v8\nruby\n    ENV[\"GYP_DEFINES\"] = \"clang=1 mac_deployment_target=#{MacOS.version}\"\n. I don't have an easy fix for you, I'm afraid. With some luck someone will stumble on this issue and be able to help you out.\n. This issue was moved to Linuxbrew/homebrew-core#81\n. Thanks for the patch, Alexis. It's looking good.\n. Merged. Thanks, Alexis!\n. Thanks, Piotr. Does this issue only affect gir? I would have thought that it would affect any FreeDesktop application that expected to find its data in XDG_DATA_DIRS.\n. I'd suggest casting the net a little wider. If the environment variable XDG_DATA_DIRS is declared, it should include $HOMEBREW_PREFIX/share. If it's not declared, everything is fine.\n. brew tests failed: https://travis-ci.org/Linuxbrew/linuxbrew/builds/120258291#L255\nI'm getting ready to look at the grand split into brew and homebrew-core. After fixing the code style and the test, are you ready to merge this PR?\n. Merged. Thanks for your contribution, Bob.\n. Can you quote the relevant lines of the gist and link to them?\n. Is this with or without linuxbrew/xorg/xorg installed?\n. https://gist.github.com/tseemann/34a4fb8c98286095781fd2fb37b5c430#file-02-make-L443\ng++ -L/bio/linuxbrew/lib -Wl,--dynamic-linker=/bio/linuxbrew/lib/ld.so -Wl,-rpath,/bio/linuxbrew/lib -Wl,--no-undefined -Wl,--version-script,QtCore.version -Wl,-e,qt_core_boilerplate -Wl,-O1 -fuse-ld=gold -Wl,--enable-new-dtags -shared -Wl,-Bsymbolic-functions -Wl,--dynamic-list,/tmp/qt520160330-54455-hp38p9/qt-everywhere-opensource-src-5.6.0/qtbase/src/corelib/QtCore.dynlist -Wl,-soname,libQt5Core.so.5 -o libQt5Core.so.5.6.0 .obj/qstring_compat.o .obj/qabstractanimation.o .obj/qvariantanimation.o .obj/qpropertyanimation.o .obj/qanimationgroup.o .obj/qsequentialanimationgroup.o .obj/qparallelanimationgroup.o .obj/qpauseanimation.o .obj/qatomic_unix.o .obj/qglobal.o .obj/qglobalstatic.o .obj/qlibraryinfo.o .obj/qmalloc.o .obj/qnumeric.o .obj/qlogging.o .obj/qhooks.o .obj/qversiontagging.o .obj/qatomic.o .obj/qexception.o .obj/qresultstore.o .obj/qfutureinterface.o .obj/qfuturewatcher.o .obj/qmutex.o .obj/qreadwritelock.o .obj/qrunnable.o .obj/qmutexpool.o .obj/qsemaphore.o .obj/qthread.o .obj/qthreadpool.o .obj/qthreadstorage.o .obj/qthread_unix.o .obj/qwaitcondition_unix.o .obj/qarraydata.o .obj/qbitarray.o .obj/qbytearray.o .obj/qbytearraylist.o .obj/qbytearraymatcher.o .obj/qcollator.o .obj/qcommandlineoption.o .obj/qcommandlineparser.o .obj/qcryptographichash.o .obj/qdatetime.o .obj/qdatetimeparser.o .obj/qeasingcurve.o .obj/qelapsedtimer.o .obj/qfreelist.o .obj/qhash.o .obj/qline.o .obj/qlinkedlist.o .obj/qlist.o .obj/qlocale.o .obj/qlocale_tools.o .obj/qpoint.o .obj/qmap.o .obj/qmargins.o .obj/qmessageauthenticationcode.o .obj/qcontiguouscache.o .obj/qrect.o .obj/qregexp.o .obj/qrefcount.o .obj/qringbuffer.o .obj/qshareddata.o .obj/qsharedpointer.o .obj/qsimd.o .obj/qsize.o .obj/qstring.o .obj/qstringbuilder.o .obj/qstringlist.o .obj/qtextboundaryfinder.o .obj/qtimeline.o .obj/qtimezone.o .obj/qtimezoneprivate.o .obj/qunicodetools.o .obj/qvector.o .obj/qvsnprintf.o .obj/qversionnumber.o .obj/qelapsedtimer_unix.o .obj/qlocale_unix.o .obj/qtimezoneprivate_tz.o .obj/qlocale_icu.o .obj/qcollator_icu.o .obj/qtimezoneprivate_icu.o .obj/qregularexpression.o .obj/harfbuzz-buffer.o .obj/harfbuzz-gdef.o .obj/harfbuzz-gsub.o .obj/harfbuzz-gpos.o .obj/harfbuzz-impl.o .obj/harfbuzz-open.o .obj/harfbuzz-stream.o .obj/harfbuzz-shaper-all.o .obj/qharfbuzz.o .obj/qabstractfileengine.o .obj/qbuffer.o .obj/qdatastream.o .obj/qdataurl.o .obj/qtldurl.o .obj/qdebug.o .obj/qdir.o .obj/qdiriterator.o .obj/qfile.o .obj/qfiledevice.o .obj/qfileinfo.o .obj/qipaddress.o .obj/qiodevice.o .obj/qlockfile.o .obj/qnoncontiguousbytedevice.o .obj/qprocess.o .obj/qstorageinfo.o .obj/qtextstream.o .obj/qtemporarydir.o .obj/qtemporaryfile.o .obj/qresource.o .obj/qresource_iterator.o .obj/qsavefile.o .obj/qstandardpaths.o .obj/qurl.o .obj/qurlidna.o .obj/qurlquery.o .obj/qurlrecode.o .obj/qsettings.o .obj/qfsfileengine.o .obj/qfsfileengine_iterator.o .obj/qfilesystemwatcher.o .obj/qfilesystemwatcher_polling.o .obj/qfilesystementry.o .obj/qfilesystemengine.o .obj/qfileselector.o .obj/qloggingcategory.o .obj/qloggingregistry.o .obj/qfsfileengine_unix.o .obj/qfilesystemengine_unix.o .obj/qlockfile_unix.o .obj/qprocess_unix.o .obj/qfilesystemiterator_unix.o .obj/forkfd_qt.o .obj/qstandardpaths_unix.o .obj/qstorageinfo_unix.o .obj/qfilesystemwatcher_inotify.o .obj/qabstractitemmodel.o .obj/qabstractproxymodel.o .obj/qitemselectionmodel.o .obj/qidentityproxymodel.o .obj/qsortfilterproxymodel.o .obj/qstringlistmodel.o .obj/qjson.o .obj/qjsondocument.o .obj/qjsonobject.o .obj/qjsonarray.o .obj/qjsonvalue.o .obj/qjsonwriter.o .obj/qjsonparser.o .obj/qfactoryinterface.o .obj/qpluginloader.o .obj/qfactoryloader.o .obj/quuid.o .obj/qlibrary.o .obj/qelfparser_p.o .obj/qmachparser.o .obj/qlibrary_unix.o .obj/qabstracteventdispatcher.o .obj/qabstractnativeeventfilter.o .obj/qbasictimer.o .obj/qeventloop.o .obj/qcoreapplication.o .obj/qcoreevent.o .obj/qmetaobject.o .obj/qmetatype.o .obj/qmetaobjectbuilder.o .obj/qmimedata.o .obj/qobject.o .obj/qobjectcleanuphandler.o .obj/qsignalmapper.o .obj/qsocketnotifier.o .obj/qtimer.o .obj/qtranslator.o .obj/qvariant.o .obj/qcoreglobaldata.o .obj/qsharedmemory.o .obj/qsystemsemaphore.o .obj/qpointer.o .obj/qmath.o .obj/qsystemerror.o .obj/qcore_unix.o .obj/qcrashhandler.o .obj/qeventdispatcher_unix.o .obj/qtimerinfo_unix.o .obj/qeventdispatcher_glib.o .obj/qsharedmemory_posix.o .obj/qsharedmemory_systemv.o .obj/qsharedmemory_unix.o .obj/qsystemsemaphore_posix.o .obj/qsystemsemaphore_systemv.o .obj/qsystemsemaphore_unix.o .obj/qisciicodec.o .obj/qlatincodec.o .obj/qsimplecodec.o .obj/qtextcodec.o .obj/qtsciicodec.o .obj/qutfcodec.o .obj/qicucodec.o .obj/qstatemachine.o .obj/qabstractstate.o .obj/qstate.o .obj/qfinalstate.o .obj/qhistorystate.o .obj/qabstracttransition.o .obj/qsignaltransition.o .obj/qeventtransition.o .obj/qmimedatabase.o .obj/qmimetype.o .obj/qmimemagicrulematcher.o .obj/qmimetypeparser.o .obj/qmimemagicrule.o .obj/qmimeglobpattern.o .obj/qmimeprovider.o .obj/qxmlstream.o .obj/qxmlutils.o .obj/qrc_mimetypes.o .obj/moc_qabstractanimation_p.o .obj/moc_qnamespace.o .obj/moc_qthread.o .obj/moc_qthreadpool.o .obj/moc_qfuturewatcher.o .obj/moc_qeasingcurve.o .obj/moc_qlocale.o .obj/moc_qtimeline.o .obj/moc_qfile.o .obj/moc_qfiledevice.o .obj/moc_qiodevice.o .obj/moc_qnoncontiguousbytedevice_p.o .obj/moc_qtextstream_p.o .obj/moc_qtemporaryfile.o .obj/moc_qsavefile.o .obj/moc_qsettings.o .obj/moc_qfilesystemwatcher_p.o .obj/moc_qfilesystemwatcher_polling_p.o .obj/moc_qfilesystemwatcher_inotify_p.o .obj/moc_qabstractitemmodel.o .obj/moc_qstringlistmodel.o .obj/moc_qpluginloader.o .obj/moc_qlibrary.o .obj/moc_qfactoryloader_p.o .obj/moc_qabstracteventdispatcher.o .obj/moc_qeventloop.o .obj/moc_qcoreapplication.o .obj/moc_qcoreevent.o .obj/moc_qmimedata.o .obj/moc_qsocketnotifier.o .obj/moc_qtimer.o .obj/moc_qtranslator.o .obj/moc_qobjectcleanuphandler.o .obj/moc_qsharedmemory.o .obj/moc_qeventdispatcher_unix_p.o .obj/moc_qeventdispatcher_glib_p.o .obj/moc_qabstractstate.o .obj/moc_qstate.o .obj/moc_qfinalstate.o .obj/moc_qhistorystate.o .obj/moc_qhistorystate_p.o .obj/moc_qabstracttransition.o .obj/moc_qsignaltransition.o .obj/moc_qeventtransition.o  -lpthread -lz -licui18n -licuuc -licudata -lpcre16 -lm -ldl -L/bio/linuxbrew/Cellar/glib/2.46.2/lib -lgthread-2.0 -pthread -lglib-2.0 -lrt \n/usr/bin/ld.gold: error: .obj/qabstractanimation.o: unsupported reloc 42 against global symbol QAbstractAnimation::staticMetaObject\nAre you using the linker /usr/bin/ld.gold intentionally? Do you have binutils installed?\n. binutils is a dependency of glibc. Having binutils installed by Linuxbrew is a good thing. I was trying to figure out why it was using your hosts ld.gold instead.\nIs xcb/xcb_icccm.h installed by one of the linuxbrew/xorg/xorg formula?\n. It looks like it's supposed to be provided by xcb-util-wm. Is it installed?\nSee http://www.linuxfromscratch.org/blfs/view/svn/x/xcb-util-wm.html\n. I'd prefer to use the host GCC if it provides GCC 4.4 or better. I think that folk get annoyed if they ask to install something small like gawk, and it installs an entire compiler toolchain. Of course as we bottle more, that's going to be the effect anyway, so maybe we should just cut to it and make GCC a dependency of everything. On newer systems like Ubuntu 14 Precise with glibc 2.19 or better I'd prefer to use the host glibc. Why do you ask? Because of the magic specs file provided by gcc?\n. Does brew install gcc --with-glibc && brew install lysp work around this issue?\n. I pushed faf5144 which may resolve this issue. Try it out.\n. I've seen that error message before over here: https://github.com/Linuxbrew/linuxbrew/issues/126\nGCC 4.8.4 is plenty new enough. It shouldn't complain about an old GCC. If you have been using this Linuxbrew installation for a while, and don't have glibc installed, I'd recommend starting over with a clean installation of Linuxbrew and start with brew install gcc, which will install glibc and gcc. Everything should be easier after that.\n. Do you have binutils installed? If not, you can try brew install binutils.\n. > \"your gcc is ancient\" error message.\nDoes glibc give that error message? Can you quote it?\n. > The exact text is \"*** These critical programs are missing or too old: gcc\". Which sounds to me like utter nonsense since the gcc in my PATH is Homebrew's 5.3 and the one in /usr/bin is 4.8.4.\nThat is nonsense. I think the glibc compiler check is failing somehow.\nI changed the default behaviour of bottles today to install both glibc and gcc when the system's glibc is too old. Installing glibc without installing gcc was fraught with peril. gcc is often necessary since it provides the shared libraries libgcc_s.so and libstdc++.so.6.\nPlease do open an issue with a gist whenever you encounter a failed build. If someone else encounters that failed build as well, it's nice to have a history of the build failure corroborated by someone else.\n. I want to add a new DSL construct fails_with_os :linux, \"GitHub issue number\" to mark formula that are known to fail.\n. Can you please quote the relevant lines of the gist and link to them?\n. Triple back ticks are better for quoting code blocks than >.\n. It downloads a Mac binary to bootstrap the system. It will have to instead download the Linux binary:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/sbcl.rb#L28\n. The homebrew/dupes issue seems to be because the dependency is on depends_on :python rather than depends_on \"python\", that is, it's a Requirement rather than a Dependency. I would call that a bug in how Requirement are resolved. That's a separate issue. You can open a new ticket if you like.\n. The work around is to apt-get install python-setuptools or brew install python.\n. This issue #931 has a similar problem.\n. I'd prefer to fix this issue by adding a brew doctor check that checks that if Python is installed, then setuptools is also installed. Either that or change the python requirement so that if setuptools is not installed, it reports that python is not installed.\n. @DoomHammer Would you like to stab at implementing the Doctor check? It should be pretty straight forward. See https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/test/test_language_module_requirement.rb#L12\nruby\nLanguageModuleRequirement.new(\"setuptools\").satisfied?\n. @DoomHammer Could you brew doctor check for Python setuptools also check that the Python headers are installed?\n. The brew doctor output should suggest something like\nEither `brew install python` (recommended)\nor `sudo apt-get install python-dev python-setuptools` on Debian and Ubuntu\nor `sudo yum install STUFF GOES HERE` on Fedora and CentOS\n. Superseded by #973. Thanks for this contribution, George, all the same.\n. > @sjackman, would you accept a PR to say that in CONTRIBUTING.md?\nYes, absolutely. Thanks, Bob. The preferred short subject line is as above. The rest of the message can be whatever the contributor wants. Please include a link to How to Write a Git Commit Message\n. Merged. Thanks for your contribution, George!\n. Does brew install jdk voltdb resolve this issue?\n. Does adding the top-level symlink resolve it? If so, I'd suggest adding the symlink to jdk.\n. Great. If send a pull request, I'll merge it.\n. Thanks for the sleuthing work, Bob.\n. Patch this line:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/qwt.rb#L39\n. ruby\n    if ENV.compiler == :clang && MacOS.version >= :mavericks\n      args << \"unsupported/macx-clang-libc++\"\n    else\n      args << \"macx-g++\"\n    end\n. Try\nsh\nbrew reinstall xz\nbrew install emacs\n. Please report the output of xz --version\n. Please report env |egrep 'LANG|LC' and also locale\nTry changing utf8 to UTF-8 in whichever environment variable has utf8 in it.\n. Great! Glad it works.\n. This is the first time that it's come up. I'll wait and see if it comes up again.\n. Please report\nsh\necho $LC_CTYPE\nenv | egrep 'LANG|LC'\nlocale. https://www.gnu.org/savannah-checkouts/gnu/libc/manual/html_node/Locale-Categories.html\n\nLC_CTYPE\nThis category applies to classification and conversion of characters, and to multibyte and wide characters; see Character Handling, and Character Set Handling.\n\nDo we know anything about why setting LC_CTYPE causes glibc to fail? Is this a known upstream bug? Can you please report the output of\nsh\nLC_CTYPE=en_GB.UTF-8 brew postinstall glibc\n. I'm just as stumped as I was before. Perhaps the next person who encounters this issue will know more\u2026. If you're able to confirm your suspicion and fix it, a pull request would be most welcome!. Well, glad to hear that you got it working, in any case. Feel free to contribute a RHEL6 wiki page like this one for CentOS6: https://github.com/Linuxbrew/brew/wiki/CentOS6\nThe wiki is publicly editable.. That's quite strange. Does brew unlink ncurses && brew link ncurses fix it?\n. :stuck_out_tongue_closed_eyes: \n. You can add\nruby\ndepends_on \"XML::Parser\" => :perl unless OS.mac?\nUnfortunately that means intltool and anything that depends on it won't be tested by Travis CI.\nYou can add a brew doctor test that check that XML::Parser is installed if Perl is installed.\n. We have a similar problem with Python libraries as well that are installed by default on Mac OS, like setuptools.\n. I forget the exact situation. We'll have to check. If the language dependency depends_on \"XML::Parser\" => :perl is not installed, it definitely won't be tested. If it is already installed, the testing may work just fine.\n. Does adding a zlib dependency resolve this issue?\nruby\ndepends_on \"zlib\" unless OS.mac?\n. -L$(brew --prefix)/lib is already in the LDFLAGS and LIBRARY_PATH environment variable. See\n$ brew --env |egrep 'FLAGS|LIBRARY'\nexport CFLAGS=\"-Os -w -pipe -march=core2\"\nexport CXXFLAGS=\"-Os -w -pipe -march=core2\"\nexport CPPFLAGS=\"-isystem/home/sjackman/.linuxbrew/include\"\nexport LDFLAGS=\"-L/home/sjackman/.linuxbrew/lib -Wl,--dynamic-linker=/home/sjackman/.linuxbrew/lib/ld.so -Wl,-rpath,/home/sjackman/.linuxbrew/lib\"\nexport LIBRARY_PATH=\"/home/sjackman/.linuxbrew/lib\"\n. My guess is that it was fixed by faf5144.\n. If you can, open a single issue per formula who's subject is\ncurl: Depends on openssl for Linuxbrew\nideally with a gist, but even without is fine for now.\nYou can also post your list on this issue.\n. It's only possible to assign tickets to members. For now just label the issue WIP (work in progress) and leave it unassigned.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/115958803#L1143-L1154\n==> brew test --verbose cmake\nTesting cmake\n==> /home/travis/build/Linuxbrew/linuxbrew/Cellar/cmake/3.4.3/bin/cmake .\n.\nLast 150 lines from /home/travis/.cache/Homebrew/Logs/cmake/01.cmake:\n2016-03-14 20:28:35 +0000\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/cmake/3.4.3/bin/cmake\n.\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/cmake/3.4.3/bin/cmake: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\nError: cmake: failed\n. error while loading shared libraries: libstdc++.so.6\ncmake depends on gcc for libstdc++.so.6\n. Merged. Thanks, Bob!\n. It looks like GCC 4.6 segfaulted.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/116031817#L1423-L1424\n/usr/bin/g++-4.6 -o \"/tmp/qt20160315-15555-1utsv1f/qt-everywhere-opensource-src-4.8.7/bin/qmake\" project.o property.o main.o makefile.o unixmake2.o unixmake.o mingw_make.o option.o winmakefile.o projectgenerator.o meta.o makefiledeps.o metamakefile.o xmloutput.o pbuilder_pbx.o borland_bmake.o msvc_vcproj.o msvc_vcxproj.o msvc_nmake.o msvc_objectmodel.o msbuild_objectmodel.o symmake.o initprojectdeploy_symbian.o symmake_abld.o symmake_sbsv2.o symbiancommon.o registry.o epocroot.o gbuild.o qtextcodec.o qutfcodec.o qstring.o qtextstream.o qiodevice.o qmalloc.o qglobal.o qbytearray.o qbytearraymatcher.o qdatastream.o qbuffer.o qlist.o qfile.o qfilesystementry.o qfilesystemengine_unix.o qfilesystemengine.o qfilesystemiterator_unix.o qfsfileengine_unix.o qfsfileengine.o qfsfileengine_iterator.o qregexp.o qvector.o qbitarray.o qdir.o qdiriterator.o quuid.o qhash.o qfileinfo.o qdatetime.o qstringlist.o qabstractfileengine.o qtemporaryfile.o qmap.o qmetatype.o qsettings.o qsystemerror.o qlibraryinfo.o qvariant.o qvsnprintf.o qlocale.o qlocale_tools.o qlocale_unix.o qlinkedlist.o qnumeric.o qcryptographichash.o qxmlstream.o qxmlutils.o  \nSegmentation fault (core dumped)\n. Please include Closes Linuxbrew/linuxbrew#927. in the commit log message.\n. Merged. Thanks again, Bob!\n. Yep, it's a good idea, though I probably won't tackle it myself. I don't use GUI apps in Linuxbrew myself. I'll leave this open as a \"wishlist\" feature. Perhaps someone else will take it on.\n. X.Org is soon going to be supported in Linuxbrew by the work of @maxim-belkin and @rwhogg in https://github.com/Linuxbrew/homebrew-xorg. Try brew install linuxbrew/xorg/xorg\n. Wow, that's a lot of deps!\n. If XDG_DATA_DIRS were added to the Linuxbrew environment, you could also run\nsh\nbrew sh <<<\"update-desktop-database\"\n. Yep. That would be fine.\n. You can migrate issues using https://github-issue-mover.appspot.com\n. Use Lock conversation once you've moved the issue.\n. Fixed by @ilovezfs in https://github.com/Homebrew/legacy-homebrew/issues/50271\n. @xu-cheng I see that you added HOMEBREW_VERBOSE_USING_DOTS for Travis. Could you possibly also add HOMEBREW_VERBOSE_USING_DOTS support to brew uses?\n. brew uses --recursive python takes 22 min on my system. Is this expected?\n```\n\u276f\u276f\u276f time brew uses --recursive python |wc\n   1190    1190   13437\nreal    22m10.669s\nuser    20m10.225s\nsys 1m6.871s\n``\n. For now I've simply disabled--recursiveinbrew test-boton Linuxbrew.\n. I implementedHOMEBREW_VERBOSE_USING_DOTSforbrew uses.\nSee https://github.com/Linuxbrew/brew/pull/217. Travis CI failed because of GitHub query rate limiting. Need to setHOMEBREW_GITHUB_API_TOKEN` for Travis.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117286132#L463\n7 gems installed\n1 file inspected, no offenses detected\nError: Broken pipe\n==> FAILED\n. ```\n$ brew test cmake\nTesting cmake\n==> /home/sjackman/.linuxbrew/Cellar/cmake/3.5.0/bin/cmake .\nLast 15 lines from /home/sjackman/.cache/Homebrew/Logs/cmake/01.cmake:\n2016-03-15 10:23:56 -0700\n/home/sjackman/.linuxbrew/Cellar/cmake/3.5.0/bin/cmake\n.\n/home/sjackman/.linuxbrew/Cellar/cmake/3.5.0/bin/cmake: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\nError: cmake: failed\n```\nSee https://travis-ci.org/Linuxbrew/linuxbrew/builds/115958803#L1153\n. Travis fails because it's using GCC 4.6. That should probably be upgraded.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/116841699#L2432\nHost Clang must be able to find libstdc++4.7 or newer!\n. Please squash the four commits to a single commit. git rebase -i HEAD~4 && git push --force\n. The new version should be sent upstream to Homebrew/homebrew. In this pull request please address only the build failure in Linux.\n. Please include brew gist-logs swift without this patch applied.\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/.github/PULL_REQUEST_TEMPLATE.md\n. Merged. Thanks for your contribution, Aleksey.\n. Please report brew gist-logs openssl\n. Thanks for the workaround, @dendraya.\n. Please report brew config and brew doctor. These are usually included in brew gist-logs, but that clearly didn't work this time. You could try brew install gnu-tar bzip2 nmap.\n. rstudio-server: Depends on pam #819\n. Agreed. I use RStudio on Mac. On Linux I use only R command line.\n. Strange. There's no error message other than the line make:\nhttps://gist.github.com/anonymous/b645fcf28891d5954911#file-02-make-L3\nWas this process somehow interrupted, or are these logs truncated?\n. Perhaps the instance is too small, namely not enough RAM. That's my best guess.\n. To troubleshoot, you may want to try temporarily paying for a larger instance.\n. So you're a LISP fan, eh? =)\n. That's quite generous of you. Thanks!\n. Do you use Slack, and would you like to join the Linuxbrew Slack? I am currently the only member. Me and Docker. Docker's not a great conversationalist.\n. Great! I've sent you an invite. Enjoy your movie. I want to watch The Big Short.\n. Your first commit! Nice.\n\nCloses #949.\n\nPlease use Closes Linuxbrew/linuxbrew#949. to distinguish Homebrew issues from Linuxbrew issues. I'll patch brew pull to use that text automatically.\n. brew pull --bottle is nearly ready to go. I'll send you instructions on how to use it.\n. From LinuxbrewTestBot. Sorry these logs aren't publicly accessible yet. I'm working on it.\n[WARNING] Recommended external solver aspcud not found.\n[ERROR] Missing dependencies -- the following commands are required for OPAM to\noperate:\n- unzip\n[ERROR] Initialisation failed\nOpamGlobals.Exit(66)\n. The Travis failure looks like a Linuxbrew bug.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117062864#L531-L534\n==> Downloading http://ftpmirror.gnu.org/m4/m4-1.4.17.tar.xz\nAlready downloaded: /home/travis/.cache/Homebrew/m4-1.4.17.tar.xz\n==> Verifying m4-1.4.17.tar.xz checksum\nError: Empty archive\n. See #968 xz: Error: Empty archive\n. > One side note: I think this formula should probably do\n\ndepends_on :java => \"1.7+\" if build.with?(\"java\")\nIf you agree, I'll make a PR upstream to do that.\n\nSure. Sounds good to me.\n. I fixed #968 xz: Error: Empty archive\n. There's a missing dependency on unzip.\n[ERROR] Missing dependencies -- the following commands are required for OPAM to\noperate:\n- unzip\n. [conf-ncurses: pkg-config ncurses] Command started\n[ERROR] The compilation of conf-ncurses failed at \"pkg-config ncurses\".\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117628414#L1569-L1570\nMy only guess is that it appears to depend on pkg-config, but ncurses doesn't install a pkg-config file.\nGo ahead and merge it.\n. Thanks, Bob!\n. This issue was moved to Linuxbrew/brew#5\n. Yep, that was me. I added the bottle stanza of the glibc formula, but then never uploaded the binary to Bintray, because I wanted to test it more, and then forgot to remove the bottle stanza from glibc. Note that glibc is not cellar :any, so this bug only affects installations of Linuxbrew to the prefix /home/linuxbrew/.linuxbrew. The quick fix is to remove the bottle stanza from glibc. I do want to bottle glibc particularly because it would speed up the builds on Travis CI, which uses Ubuntu 12 Precise.\n. The glibc bottle is not relocatable. You have to install Linuxbrew in /home/linuxbrew/.linuxbrew to use the bottle. I'm going to lock this issue. Feel free to open a new issue at https://github.com/Linuxbrew/brew\n. Yes, even CentOS 5 has gcc 4.4 available as an optional package, which is able to build glibc. I'm not sure how to install glibc with a system that has gcc 4.3. Install a deb for a newer release of GCC if you can. Perhaps a backport?\nIt might be possible to do something like\nbrew install gcc --without-glibc\nbrew install glibc\nbrew install gcc --with-glibc\nbut it would be tricky.\n. Currently the README.md says that the minimum version off GCC is 4.2. I'm going to increase that to 4.4.\n. Move to https://github.com/Linuxbrew/brew/pull/34 and https://github.com/Linuxbrew/homebrew-core/pull/231\n. xz was installed by bottle, but that bottle is not working on the Travis CI system.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117300152#L655-L658\n==> Downloading http://ftpmirror.gnu.org/gawk/gawk-4.1.3.tar.xz\nAlready downloaded: /home/travis/.cache/Homebrew/gawk-4.1.3.tar.xz\n==> Verifying gawk-4.1.3.tar.xz checksum\nError: Empty archive\n. Travis CI is running Ubuntu 12 Trusty.\nIt compiled successfully on LinuxbrewTestBot running Ubuntu 14 Precise.\nSee https://github.com/LinuxbrewTestBot/linuxbrew/tree/pr-DoomHammer-add-glibc-deps\n. See #968 xz: Error: Empty archive\n. I fixed #968 xz: Error: Empty archive\n. I would like any deps of the toolchain (i.e. glibc and gcc) to be bottled, to make installing the toolchain quick and painless. gawk doesn't say it's cellar :any, but I suspect it would work just fine.\nAnything bottles installed before glibc (that is any deps of glibc, like zlib and binutils) have to be built on a \"holy build box\" with glibc 2.5, the oldest glibc supported to bootstrap Linuxbrew. The downside to that solution is that these \"compatible\" bottles have to be built by hand. So I want to avoid adding hard deps to glibc, and most systems do provide gawk.\nI suggest adding a Requirement rather than a dependency that first checks whether the system provides awk, and if not builds gawk from source. gawk takes one minute to build, so perhaps I'm overthinking this, but it's a simple fix.\nruby\nclass AwkRequirement < Requirement\n  fatal true\n  default_formula \"gawk\"\n  satisfy { which \"awk\" }\nend\nYou can add AwkRequirement to the glibc formula. Normally it would go in requirements.rb, but this exception applies only to glibc. Any other formula that depends on gawk will just use a normal dependency.\n. For sure! Any distribution that uses glibc 2.5 will do just fine. CentOS 5 for example, though I'd prefer a Debian or Ubuntu release that also used glibc 2.5.\n. tar: Failed to set default locale\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/Dockerfile#L9\n. Is it just hanging after extracting the tarball? I've seen that behaviour too on Ubuntu 12 precise, and I haven't yet figured it out.\n. For my own reference:\nHistory of Debian releases: https://wiki.debian.org/DebianReleases\nHistory of glibc releases: https://sourceware.org/glibc/wiki/Glibc%20Timeline\n. Lenny probably didn't support UTF-8 either.\nI noticed that Ruby was still using CPU, so I think it was stuck in some kind of loop. Possibly (long shot here) due to a missing program.\n. No, cc1 should not be running when pouring a bottle. pstree may be useful to see who's running it.\n. It's clearly compiling something. It looks as though the output is not updated, but brew has moved on to compiling a formula. Does ps aux |egrep 'make|sh' give some indication of what's being compiled? You can also poke around in /proc to figure out what these processes are up to.\n. It looks like the console has hang up. Perhaps its file descriptor was inadvertently closed.\n. That's the first that I've heard of minos. It's not a bad workaround, but I'd prefer to install gawk using Linuxbrew.\n. Where are you stuck? With the broken console? I haven't figured that one out yet myself.\nI regularly use Linuxbrew on CentOS 5.11 with glibc 2.5.\n. Can you post the error message?\n. Ah, xz is linked against new glibc. As a temporary workaround, use the gz http://ftpmirror.gnu.org/gawk/gawk-4.1.3.tar.gz rather than xz.\n. As discussed, this fix requires an :awk requirement, so as to avoid adding a build dependency to binutils. Closing this PR for now, before the grand split of brew and homebrew-core.\n. :+1:\n. brew test fails on Travis. Does it work for you?\n==> brew test --verbose vala\nTesting vala\n==> /home/travis/build/Linuxbrew/linuxbrew/Cellar/vala/0.30.1/bin/valac -g --cc=/usr/bin/gcc --save-temps /tmp/vala20160321-31943-mhgaaj/hello.vala\n.\n==> /tmp/vala20160321-31943-mhgaaj/hello\nError: vala: failed\n<0> expected but was\n<nil>.\n==> FAILED\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117590469#L1632-L1640\n. Merged. Thanks, Piotr!\n. :+1:\n. ==> brew test --verbose bison\nTesting bison\n==> /home/travis/build/Linuxbrew/linuxbrew/Cellar/bison/3.0.4/bin/bison test.y\n.\nLast 150 lines from /home/travis/.cache/Homebrew/Logs/bison/01.bison:\n2016-03-23 00:38:19 +0000\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/bison/3.0.4/bin/bison\ntest.y\ntest.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]\nError: bison: failed\nFailed executing: /home/travis/build/Linuxbrew/linuxbrew/Cellar/bison/3.0.4/bin/bison test.y\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117588089#L1217-L1229\n. I can't say what about the brew test failure. Even more concerning, on my box it segfaults.\nbrew test bison -v\nTesting bison\n==> /gsc/btl/linuxbrew/Cellar/bison/3.0.4/bin/bison test.y\ntest.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]\n==> /usr/bin/g++ test.tab.c -o test\ntest.tab.c: In function \u2018int yyparse()\u2019:\ntest.tab.c:1236: warning: deprecated conversion from string constant to \u2018char*\u2019\ntest.tab.c:1380: warning: deprecated conversion from string constant to \u2018char*\u2019\n==> echo \"((()(())))()\" | ./test\nsh: line 1: 25297 Done                    echo \"((()(())))()\"\n     25298 Segmentation fault      (core dumped) | ./test\nError: bison: failed\n<0> expected but was\n<139>.\n. I think the test block is bogus. Should be fixed upstream, if my suspicion is confirmed with Homebrew on a Mac.\n. Merged! Thanks, Piotr.\n. If bison depends on m4 and flex depends on bison, then this dependency on m4 is not needed.\n. Is bison a mandatory dependency of flex? Please report brew gist-logs bison without flex installed on either the host OS or Linuxbrew.\n. https://gist.github.com/anonymous/5e6abf8d8f8fe07d0355#file-02-make-L178\nmake[1]: *** [bison_nr_parser.c] Error 127\n../build-aux/ylwrap: line 176: yacc: command not found\nYes, bison is a mandatory dependency of flex.\nThis also means that we could remove the bison dependency from any formula that depends on flex.\n. :+1:\n. ==> brew test --verbose flex\nTesting flex\n==> /home/travis/build/Linuxbrew/linuxbrew/Cellar/flex/2.6.0/bin/flex test.flex\n==> /usr/bin/gcc lex.yy.c -L/home/travis/build/Linuxbrew/linuxbrew/Cellar/flex/2.6.0/lib -lfl -o test\n.\n==> echo \"Hello World\" | ./test\nSegmentation fault (core dumped)\nError: flex: failed\n<0> expected but was\n<139>.\n==> FAILED\nCan you look into this segfault? I suspect the test is not good.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117588377#L1402-L1413\n. Merged. Thanks again, Piotr, for your contributions!\n. :+1:\n. ==> brew audit nettle\nError: 1 problem in 1 formula\nnettle:\n * Use the `mv` Ruby method instead of `system \"mv `\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117589790#L1107-L1112\nIgnore this error.\nFileUtils.mv of symlinks is buggy on some Ruby versions. I forget which versions are affected.\n. Merged. Thanks, Piotr!\n. :+1:\n. Merged. Thanks for finding and fixing all these dependency issues!\n. This formula is native to Linuxbrew (note # tag \"linuxbrew\") so the unless OS.mac? are not needed in this case. Mac has the formula osxfuse.\nNote that Mac OS does not provide autoconf nor automake, but oddly it does provide libtool.\n\u276f\u276f\u276f which autoconf automake libtool\nautoconf not found\nautomake not found\n/usr/bin/libtool\n. Try to kit the git subject (the first line of the commit message) to 50 characters.\nSee http://chris.beams.io/posts/git-commit/\n. Merged. Thanks!\n. Homebrew/dupes have been open so far to accepting small non-invasive patches for Linux. Submit a pull request upstream.\n. system \"make\", \"install\", \"CFLAGS=-fPIC\"\nThis line wasn't need on my system. Any idea why it's required on yours? Which distribution are you running?\n. When installing libcap, a dependency of systemd, I get the error message:\npam_cap.c:19:34: fatal error: security/pam_modules.h: No such file or directory\nAre there any formula to provide pam on Linuxbrew?\n. libtool: link: ( cd \".libs\" && rm -f \"libsystemd.la\" && ln -s \"../libsystemd.la\" \"libsystemd.la\" )\n/usr/bin/ld.gold: error: /tmp/ccBczM3e.ltrans2.ltrans.o: requires dynamic R_X86_64_PC32 reloc against 'program_invocation_short_name' which may overflow at runtime; recompile with -fPIC\nPerhaps it's because you're using ld.gold to link? Which distro are you running?\n. https://tecnocode.co.uk/2014/10/01/dynamic-relocs-runtime-overflows-and-fpic/\n\ntl;dr: This is caused by linking a shared library (which requires position-independent code, PIC) to a static library (which has not been compiled with PIC).\n\nSomething's gone wrong in the build. Adding CFLAGS=-fPIC will mask the error but doesn't address the root problem. Please remove this chunk.\nI'll merge the two new dependencies.\n. Merged. Thanks once again, Piotr!\n. :+1:\nTravis built successfully.\nDocker Cloud failed with this error message:\nhttps://cloud.docker.com/api/redirect/?resource_uri=/api/audit/v1/action/d3c49811-2e8f-4ec2-a362-47be96c1b529/\nCANONICALIZE-WHITESPACE/DIRECTORY\n*\nNIL\n* ./make.sh: 72: ./make.sh: time: not found\nThe program time is provided by the formula gnu-time.\nI suggest merging this PR as is and tackle this error another time.\n. Please report brew gist-logs blast\n. This issue was moved to Homebrew/homebrew-science#3458\n. This is an anachronism that we've inherited from Homebrew. /usr/bin/gcc is assumed to be GCC 4.2 as it is on old Mac OS distributions, and I haven't fixed this in Linuxbrew. The workaround is to creating a symlink from /usr/bin/gcc to $HOMEBREW_PREFIX/bin/gcc-5, g++ and gfortran as well. See\nhttps://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. ```\n$ brew install gawk\n==> Installing dependencies for gawk: xz\n==> Installing gawk dependency: xz\n==> Downloading https://linuxbrew.bintray.com/bottles/xz-5.2.2.x86_64_linux.bott\nAlready downloaded: /home/sjackman/.cache/Homebrew/xz-5.2.2.x86_64_linux.bottle.tar.gz\n==> Pouring xz-5.2.2.x86_64_linux.bottle.tar.gz\n/home/sjackman/.linuxbrew/Cellar/xz/5.2.2: 65 files, 1.6M\n==> Installing gawk\n==> Downloading http://ftpmirror.gnu.org/gawk/gawk-4.1.3.tar.xz\n==> Downloading from http://gnu.mirror.vexxhost.com/gawk/gawk-4.1.3.tar.xz\n################################################################## 100.0%\nError: Empty archive\n``\n. This issue affects any formula that depends onautoconf, which depends onm4, which has atar.xz.\nThe workaround is tobrew install gcc xzon systems with glibc < 2.19.\n. There's a couple options to resolve this issue. One is to makexzpull in the bottle dependencies. This may result in a dependency cycle if any of the dependencies ofgcchave a.tar.xzsource ball.\nThe other resolution is to build thexzbottle on a \"holy build box\" with glibc 2.5, the oldest glibc supported by Linuxbrew, as is done for the other dependencies ofglibc, namelyzlibandbinutils. The downside to that solution is that these \"compatible\" bottles have to be built by hand.\n. > It depends onvim`\nThat is shocking. Oi. I'd rather not make this a hard dependency, since most systems provided vi. Can you make this dep a Requirement instead? See #953 \nruby\nclass ViRequirement < Requirement\n  fatal true\n  default_formula \"vim\"\n  satisfy { which \"vi\" }\nend\nruby\ndepends_on ViRequirement.new\n. Try to avoid changing the formatting where possible. Large changes like this tend to create merge conflicts when I do the weekly merge of Homebrew into Linuxbrew. A one-line change is always preferred where possible. Try something like\nruby\n    apply \"patches/PR5178707.diff\",\n          \"patches/ea.diff\",\n          \"patches/endian.diff\",\n          \"patches/fixtest-client-20.diff\",\n          \"patches/fixtest-recase.diff\",\n          \"patches/i18n.diff\",\n          \"patches/initgroups.diff\",\n          (\"patches/nopic.diff\" if OS.mac?),\n          \"patches/remove-libcrypto.diff\",\n          \"patches/remove-info.diff\",\n          \"patches/tag.diff\",\n          \"patches/zlib.diff\"\nIf apply doesn't like the nil value, it could be removed with compact, but I'd suggest patching apply instead to ignore nil values.\n. Let's use compact here then. If a similar case comes up again in a different formula, I'd be inclined to patch apply. It would be nice for it to be merged upstream, but they'd be unlikely to accept it, because the issue of nil arguments being passed to apply doesn't affect Mac.\n. https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/sip.rb#L35\nruby\n      system python, *[\"configure.py\",\n                     (\"--deployment-target=#{MacOS.version}\" if OS.mac?),\n                     \"--destdir=#{lib}/python#{version}/site-packages\",\n                     \"--bindir=#{bin}\",\n                     \"--incdir=#{include}\",\n                     \"--sipdir=#{HOMEBREW_PREFIX}/share/sip\"].compact\nSimilar yes. I'm not suggesting that we monkey patch system though. Now that I say it though\u2026 it would actually get rid of a lot of these somewhat ugly calls to compact. Seems a bit drastic though.\nPassing nil values to system configure is fine, the nil values get converted to empty strings \"\" and configure just ignores the empty strings. Passing empty strings to make though makes it unhappy.\n. LinuxbrewTestBot:\nchecking security/pam_appl.h usability... no\nchecking security/pam_appl.h presence... no\nchecking for security/pam_appl.h... no\nchecking pam/pam_appl.h usability... no\nchecking pam/pam_appl.h presence... no\nchecking for pam/pam_appl.h... no\nconfigure: error: Could not find PAM headers\nHow do we install PAM on Linuxbrew?\n. \"--enable-pam\",\nor should we disable PAM for Linuxbrew?\n. I'm fine with either solution (if you're volunteering for #946). =)\n. I'm happy to merge this PR as is. We can tackle the PAM dependency another day.\n. configure: WARNING: unrecognized options: --with-ld\nchecking for path to top of build tree... /tmp/ghc--binary20160322-22146-nqdho3/ghc-7.6.3\nghc/stage2/build/tmp/ghc-stage2: error while loading shared libraries: libncursesw.so.5: cannot open shared object file: No such file or directory\nCan't work out build platform\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117644755#L1177-L1180\n. Thanks, Piotr. I'll merge this.\nCould you submit a PR to fix this issue from Docker Cloud as well, please?\nchecking for msgfmt... no\nFATAL ERROR: msgfmt does not seem to be installed.\nattr cannot be built without a working gettext installation.\n. Yes.\n. https://gist.github.com/jwhite007/a7e9ad6a8c04427daff4#file-02-make-L138-L141\nlibtool: compile:  /toolbox/NGS/.linuxbrew/bin/gcc-5 -DHAVE_CONFIG_H -I. -isystem/toolbox/NGS/.linuxbrew/include -I/toolbox/NGS/.linuxbrew/Cellar/libpng/1.6.21/include/libpng16 -I/toolbox/NGS/.linuxbrew/Cellar/freetype/2.6.3/include/freetype2 -I/toolbox/NGS/.linuxbrew/opt/fontconfig/include -I/toolbox/NGS/.linuxbrew/opt/libvpx/include -I/toolbox/NGS/.linuxbrew/opt/libtiff/include -Os -w -pipe -march=core2 -I/toolbox/NGS/.linuxbrew/opt/jpeg/include -fvisibility=hidden -c gd_io_dp.c -o gd_io_dp.o >/dev/null 2>&1\nwebpimg.c: In function 'VPXEncode':\nwebpimg.c:714:24: error: 'IMG_FMT_I420' undeclared (first use in this function)\n     vpx_img_wrap(&img, IMG_FMT_I420,\n. Did you close this issue intentionally? Were you able to find a resolution?\n. I think the options are a red herring. My best guess is that it's a parallel build error caused by your 64 cores due to a bug in the Makefile. I see these occasionally on my big machines. You could try\nsh\nHOMEBREW_MAKE_JOBS=1 brew install gd\n. Glad to hear that the voodoo worked its magic!\n. Which command are you running that is giving those warnings?\n. Something is adding -I/usr/include to your compiler before -I/toolbox/NGS/.linuxbrew/include, which is the source of the trouble. I'm not sure how to fix it though. I've had good luck with cpanm for installing Perl modules.\nsh\nbrew install perl cpanm\ncpanm GD\n. Try\nsh\nbrew sh <<<\"cpanm GD\"\n. :+1:\n. Merged. Thanks, Piotr!\n. On second thought, this issue should have been resolved differently.\n:x11 should be a :recommended dependency of cairo for non-Mac systems.\nWould you like to take a stab at a patch that does that, then I'll revert this patch.\n. Thanks! See for example https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/htop.rb#L18\n. Yep, that looks about right to me. Thanks, Piotr.\n. ==> make\n...\nLast 150 lines from /home/travis/.cache/Homebrew/Logs/fontforge/03.make:\n/tmp/fontforge20160323-31314-gbascp/fontforge-20150824/fontforge/python.c:6214: undefined reference to `Py_BuildValue'\n.libs/libfontforge_la-python.o: In function `PyFF_Glyph_get_vwidth':\n/tmp/fontforge20160323-31314-gbascp/fontforge-20150824/fontforge/python.c:6199: undefined reference to `Py_BuildValue'\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117846634\n. ==> brew test --verbose libpng\nTesting libpng\n==> /usr/bin/gcc test.c -I/home/travis/build/Linuxbrew/linuxbrew/Cellar/libpng/1.6.21/include -L/home/travis/build/Linuxbrew/linuxbrew/Cellar/libpng/1.6.21/lib -lpng -o test\n.\n==> ./test\nLast 150 lines from /home/travis/.cache/Homebrew/Logs/libpng/02.test:\n2016-03-23 00:20:04 +0000\n./test\nError: libpng: failed\nFailed executing: ./test\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/117854580#L1208-L1220\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/libpng.rb#L49\nruby\nsystem ENV.cc, \"test.c\", \"-I#{include}\", \"-L#{lib}\", \"-lpng\", \"-o\", \"test\"\nENV.cc is not set correctly in the test block. It has the value /usr/bin/gcc, when it should be gcc-5.\nbrew test libpng --cc=gcc-5 works.\n. @LinuxbrewTestBot built a bottle for opam. You can try a brew pull --bottle for this PR.\n. The job exceeded the maximum time limit for jobs, and has been terminated.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/118071571#L1318\n. A new error, similar but different.\n\"inplace/bin/ghc-stage2\" -hisuf dyn_hi -osuf dyn_o -hcsuf dyn_hc -fPIC -dynamic -H32m -O -hide-all-packages -i -iutils/haddock/driver -iutils/haddock/haddock-api/src -iutils/haddock/haddock-library/vendor/attoparsec-0.12.1.1 -iutils/haddock/haddock-library/src -iutils/haddock/dist/build -iutils/haddock/dist/build/autogen -Iutils/haddock/dist/build -Iutils/haddock/dist/build/autogen -optP-DIN_GHC_TREE -optP-include -optPutils/haddock/dist/build/autogen/cabal_macros.h -package-key Cabal_3ux67khMI118y6VpwrFnXN -package-key array_67iodizgJQIIxYVTp4emlA -package-key base_HQfYBxpPvuw8OunzQu6JGM -package-key bytes_6VWy06pWzJq9evDvK2d4w6 -package-key conta_2C3ZI8RgPO2LBMidXKTvIU -package-key deeps_6vMKxt5sPFR0XsbRWvvq59 -package-key direc_0hFG6ZxK1nk4zsyOqbNHfm -package-key filep_Ey7a1in9roBAE8bUFJ5R9m -package-key ghc_0AG9TOjDEtx4Ji3wSwHOBe -package-key trans_GZTjP9K5WFq01xC9BAGQpF -package-key xhtml_0ACfOp3hebWD9jGWE4v4Gh -funbox-strict-fields -Wall -fwarn-tabs -O2 -threaded -XHaskell2010 -no-user-package-db -rtsopts -odir utils/haddock/dist/build -hidir utils/haddock/dist/build -stubdir utils/haddock/dist/build -c utils/haddock/haddock-api/src/Haddock/GhcUtils.hs -o utils/haddock/dist/build/Haddock/GhcUtils.dyn_o\n/tmp/ghc20160324-7566-jqm6h4/ghc-7.10.3/inplace/lib/bin/ghc-stage2: error while loading shared libraries: libncursesw.so.6: cannot open shared object file: No such file or directory\nIt can't find libncursesw.so.6, which is in $HOMEBREW_PREFIX/lib.\n. I'm not able to reproduce this error. Do you get the same error message if you run brew update again?\nI'm confused by this directory name: /usr/infokiller/.git/modules/bin/sources/linuxbrew/\nPlease report the output of brew config and brew doctor\n. The problem is related to this:\nHOMEBREW_PREFIX: /home/infokiller\nHOMEBREW_REPOSITORY: /home/infokiller/bin/sources/linuxbrew\nHOMEBREW_CELLAR: /home/infokiller/bin/sources/linuxbrew/Cellar\nIs it intentional that your HOMEBREW_PREFIX is /home/infokiller rather than /home/infokiller/bin/sources/linuxbrew?\n. Here's by my best guess. /home/infokiller/bin/sources/linuxbrew does not contain .git directory, so git is marching up through parent directories looking for a .git directory, and it finds one in /home/infokiller, but that's not the Linuxbrew .git directory, but instead your dotfiles .git directory, and everything breaks.\nWorkaround:\nsh\nmv ~/.git ~/.git-backup\nbrew update\nmv ~/.git-backup ~/.git\nOnce you've done that once, brew update should work from then on.\n. I put my dotfiles in ~/.dotfiles/.git for this reason, and symlink the individual files into ~.\n. Glad to hear it worked!\n. Glad to hear it!\n. brew update (again) should resolve your issue.\n. Hi, Daisy. You're using Homebrew on Mac. This repo is for Linuxbrew on Linux. Try brew update again. If that doesn't work, open an issue at https://github.com/Homebrew/brew\n. > Is it possible to add these libraries to linuxbrew so that this hacks can be avoided?\nIt's already in there. Try brew search dbus\nbrew install dbus-glib\n\nIs there a cleaner way to make the libraries visible in linuxbrew-standalone realm?\n\nYou can create a \"host keg\", also called a \"fake keg\" in previous discussions.\nsh\nmkdir -p `brew --cellar`/dbus/host/lib/\nln -s /lib/x86_64-linux-gnu/libdbus* `brew --cellar`/dbus/host/lib/\nbrew link dbus\n. Glad to hear the workarond worked. It should hopefully be pretty easy to fix d-bus by disabling launchd support:\ndiff\n-                          \"--enable-launchd\",\n+                          (\"--enable-launchd\" if OS.mac?),\nI believe @rwhogg is looking into it in #987.\n. Thanks, Bob.\n. > configure: error:  Xlib surface backend feature could not be enabled\nTry\nsh\nbrew install linuxbrew/xorg/xorg\nbrew install cairo --with-x11\nbrew install erlang\n\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\n\nsh\nbrew install curl\nIf that doesn't work, report\nsh\nbrew gist-logs erlang\n. Closing for now. Feel free to reopen if this issue persists.\n. There's a hack on Linux for a bug in ld.so of glibc 2.19 that creates an empty directory $prefix/lib, so $prefix is not empty on Linux. That's causing a few occasional build errors like this one, so I think we may have to find a different solution to that bug.\n. Fixed!\n. Merged. Thanks, Piotr!\n. Another zsh error from @LinuxbrewTestBot:\n** Cannot --enable-pcregrep-libz because zlib.h was not found\n. Ach, that's totally my fault for not giving enough log context. Sorry, Bob.\nIt was pcre that failed to build, not zsh. So you can remove the zlib dependency from here, and add it to pcre.\n** Cannot --enable-pcregrep-libz because zlib.h was not found\n==> Formula\nPath: /home/linuxbrew/.linuxbrew/Library/Formula/pcre.rb\n. requirements/x11_requirement.rb and os/mac/xquartz.rb need to be modified to depend on linuxbrew/xorg/xorg. @rwhogg @maxim-belkin \n. As Piotr mentioned, but also add --with-x11 to cairo.\nsh\nbrew install linuxbrew/xorg/xorg\nbrew install cairo --with-x11\nbrew install elixir\n. I'm happy with merging this patch as is.\n. Thanks, Piotr!\n. curl -I --silent --fail --output /dev/null https://linuxbrew.bintray.com/bottles/blahtexml-0.9.x86_64_linux.bottle.tar.gz\nError: blahtexml-0.9.x86_64_linux.bottle.tar.gz is already published. Please remove it manually from\nBottles uploaded by the LinuxbrewTestBot are initially unpublished. Once you run brew pull --bottle they become published. If you don't merge after than, and if you then modify the pull request and rebuild the bottle, you'll have to manually delete the published bottle from BinTray.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/118845472#L424-L431\n==> brew install --only-dependencies --verbose --build-bottle node\nError: No available formula with the name \"homebrew/dupes/ncurses\" \nPlease tap it and then try again: brew tap homebrew/dupes\n==> Searching for similarly named formulae...\nError: No similarly named formulae found.\n==> Searching taps...\nError: No formulae found in taps.\n==> FAILED\nI thought that this bug was fixed. Grumble.\n. Some formula that are provided by Mac OS are in the core repository with this tag:\nruby\nkeg_only :provided_by_osx, \"OS X includes Expat 1.5.\"\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Formula/expat.rb#L21\n. Merged.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/119349220#L692-L699\n==> Installing texinfo dependency: glibc\n==> Downloading http://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\n==> Downloading from http://mirror.sdunix.com/gnu/glibc/glibc-2.19.tar.bz2\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\nIs this error transient?\n. This particular mirror does seem really slow. curl is estimating that it's going to take over 20 minutes to download.\n\u276f\u276f\u276f curl -O http://mirror.sdunix.com/gnu/glibc/glibc-2.19.tar.bz2\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  3 17.5M    3  688k    0     0  12276      0  0:24:54  0:00:57  0:23:57  2369\n. Duplicate of #1035.\n. This error is strange. gcc does currently depend on zlib, and zlib provides libz.so.1. So why this error message?\n. zlib was uninstalled after libpng: https://travis-ci.org/Linuxbrew/linuxbrew/builds/119319297#L1213\n==> brew uninstall --force libpng\nUninstalling libpng... (17 files, 1.2M)\n==> PASSED\nbrew.uninstall.20\n==> brew uninstall --force xz zlib\nThis bug is a brew test-bot bug that affects the dependencies of gcc, which should not be removed.\n. Yes, resolved by brew install gcc before brew test-bot which protects it and its dependencies from removal.. libuuid is provided by three packages, which drives me crazy: libuuid, ossp-uuid and util-linux.\nOn Linuxbrew the canonical provider of libuuid is util-linux, which I believe actually contains a fork of libuuid. I'm thinking that this may need to be abstracted away to a Requirement :libuuid.\n. In the meantime feel free to use\nruby\ndepends_on \"util-linux\" if OS.linux? # for libuuid\nThat's what I've done in other cases.\nOr if you like, take a stab at creating LibuuidRequirement.\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/requirements.rb\n. As our first issue, bottles are now enabled by default on Linuxbrew. Bottles require glibc 2.19 or newer. On systems with a recent version of glibc, like Ubuntu 14 Trusty, you're ready to go, and your system will start downloading and installing bottles instead of source when available. On older systems, Linuxbrew will download and install glibc 2.19. If you'd rather continue to use your system's version of glibc, add to your .bashrc or .zshrc:\nexport HOMEBREW_BUILD_FROM_SOURCE=1\n. @rwhogg has joined the Linuxbrew Team. Welcome, Bob!\n@maxim-belkin and he recently created the Linuxbrew/xorg/xorg formula to install X.Org on Linuxbrew. It will soon be the default provider of X11 libraries on Linuxbrew, which will eliminate the need for making a fake xorg keg that links to the host X11 libraries. In the meantime\nbrew install linuxbrew/xorg/xorg\n. @DoomHammer has joined the Linuxbrew Team, Welcome, Piotr!\nPiotr has tracked down a number of missing dependencies and has contributed 29 pull requests to Linuxbrew to fix many of these missing dependencies. Glad to have you on the team, Piotr!\n. Linuxbrew now has a @LinuxbrewTestBot up and running on Amazon AWS EC2 building bottles of new pull requests. This infrastructure will help provide bottles (precompiled binaries) for Linux.\n. After Saturday 23rd April Homebrew and Linuxbrew will begin gathering anonymous aggregate user behaviour analytics. Anonymous aggregate user analytics allow us to prioritise fixes and features based on how, where and when people use Linuxbrew. You can read more about this and the option to opt-out here:\nhttps://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md#homebrews-anonymous-aggregate-user-behaviour-analytics\n. Linuxbrew has been split into two repositories:\n- Linuxbrew/brew: the Linuxbrew\n  package manager without any formulae/packages (i.e. without the former contents of Library/Formula)\n- Linuxbrew/homebrew-core: the formulae/packages (i.e. the former contents of Library/Formula) for the Linuxbrew package manager\nSome time in the near future, brew update will automatically migrate your legacy Linuxbrew installation to the new split repository.\nIf you'd like to test out the new split repository system before then, run the following command to create a fresh Linuxbrew installation in ~/.linuxbrew. Please do not do this if you already have a Linuxbrew installation at ~/.linuxbrew.\nsh\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install)\"\n. To migrate your current legacy Linuxbrew installation to the new split repository, check out the branch migrate (pull request #1101) and run brew update. This coming week, brew update will automatically migrate your legacy Linuxbrew installation to the new split repository.\nsh\nbrew update\nbrew doctor\ncd `brew --repo`\ngit fetch origin migrate:migrate\ngit checkout migrate\nbrew update\nbrew doctor\n. brew update will now migrate your legacy Linuxbrew installation to the new split repository.\n. Glad to hear it! Thanks for the feedback, Reto.\n. We the migration complete, Linuxbrew Updates is moving to https://github.com/Linuxbrew/brew/issues/1\n. That's the error message that patchelf gives when it attempts to relocate a static executable. This bug definitely needs to be fixed. It could be fixed in patchelf to make this a warning rather than an error. That's probably the simpler fix. The alternative is that Linuxbrew could check whether the ELF is dynamic or static, and skip patchelf for static executables. The problem here is that I haven't found an easy way to distinguish dynamic from dynamic. The easiest way would be to call out to file.\n. This issue was moved to Linuxbrew/brew#4\n. Try brew install gcc ncmpcpp\nIf that doesn't work, try applying the following patch with brew edit ncmpcpp:\n``` diff\ndiff --git a/Library/Formula/ncmpcpp.rb b/Library/Formula/ncmpcpp.rb\nindex 5a80d5a..d185a8c 100644\n--- a/Library/Formula/ncmpcpp.rb\n+++ b/Library/Formula/ncmpcpp.rb\n@@ -32,7 +32,7 @@ class Ncmpcpp < Formula\n   depends_on \"readline\"\n   depends_on \"fftw\" if build.with? \"visualizer\"\n\nif MacOS.version < :mavericks\nif OS.mac? && MacOS.version < :mavericks\n     depends_on \"boost\" => [\"with-icu4c\", \"c++11\"]\n     depends_on \"taglib\" => \"c++11\"\n   else\n```\n. https://gist.github.com/anonymous/5f0952bc3662f37536b723cb3d17e181#file-config-log-L89\n\n/usr/bin/ld: cannot find -liconv\nTry brew install iconv\n. Or alternatively, try this patch:\n``` diff\ndiff --git a/Library/Formula/ncmpcpp.rb b/Library/Formula/ncmpcpp.rb\nindex 5a80d5a..1d6fbfb 100644\n--- a/Library/Formula/ncmpcpp.rb\n+++ b/Library/Formula/ncmpcpp.rb\n@@ -44,7 +44,7 @@ class Ncmpcpp < Formula\ndef install\n     ENV.cxx11\n-    ENV.append \"LDFLAGS\", \"-liconv\"\n+    ENV.append \"LDFLAGS\", \"-liconv\" if OS.mac?\n     ENV.append \"BOOST_LIB_SUFFIX\", \"-mt\"\n     ENV.append \"CXXFLAGS\", \"-D_XOPEN_SOURCE_EXTENDED\"\n``\n. Great. Would you like to submit a pull request?\n. It builds in a temporary directory/tmpby default, which may be full, as it's often configured as a small and fast RAM disk. Set the environment variableHOMEBREW_TEMP`\nsh\nmkdir ~/tmp\nexport HOMEBREW_TEMP=~/tmp\nbrew install llvm --with-clang\n. Try brew install xml2 llvm --with-clang\n. Sorry. That was a typo. It should have been\nbrew install libxml2 llvm --with-clang\n. On OS distributions with glibc < 2.19, the default behaviour of Linuxbrew is not to use any libraries installed by the host OS, known as a Standalone Installation of Linuxbrew.\nhttps://gist.github.com/dragonxlwang/21431926f23f231c720720be491da9fb#file-00-config-out-L13\nOS glibc: 2.12\n. Glad to hear it!\n. Please surround copied-and-pasted logs with triple back ticks. See GitHub Help / Quoting Code.\n. @DoomHammer Piotr, can you reproduce this error?\nCould not find GIR file 'GdkPixbuf-2.0.gir'; check XDG_DATA_DIRS\n. @DoomHammer Would this error be fixed by setting XDG_DATA_DIRS?\nGICOMP   Rsvg-2.0.gir\nCould not find GIR file 'GdkPixbuf-2.0.gir'; check XDG_DATA_DIRS or use --includedir\nerror parsing file Rsvg-2.0.gir: Failed to parse included gir GdkPixbuf-2.0\nmake[2]: *** [Rsvg-2.0.typelib] Error 1\n. Is it only needed for the build? I assumed that it would also be need when you ran the app, so I suggested the brew doctor check. If it's only needed for the build, then by all means add it to ENV/std, much simpler. Sorry for the trouble if I misunderstood the situation.\n. ### ginac\nmake[2]: Entering directory `/tmp/ginac20160330-22657-4b9qaw/ginac-1.6.7/ginsh'\n./ginsh_fcn_help.py -o ginsh_fcn_help.h ginsh.1.in\n/usr/bin/env: python: No such file or directory\nredpen\n==> SKIPPING: redpen\nJava 1.8 is required to install this formula.\n. sh\nsudo updatedb\nlocate libc.so.6\n. Perhaps updatedb probably isn't configured to index home directories.\nDo you have issues other than the output of locate that you're trying to resolve? Based on the output of ldd, it looks like it's working.\n. Down the rabbit hole! You could perhaps try creating a formula for you-complete-me and compiling it that way. Otherwise, check out brew sh and brew diy.\n. Please report brew config and brew doctor\nplatform.libc_ver() may be reporting the version of libc found in /lib rather than the version against which it is linked.\n. I can confirm that I also see\n```\n\n\n\nimport platform\nplatform.libc_ver()\n('glibc', '2.2.5')\n```\n\n\n\nbut the system that I'm running on is glibc 2.12 and Linuxbrew is glibc 2.19, so Python is out to lunch.\n. See #1016 (liblacewing) and #1018 (rtags)\n. The job exceeded the maximum time limit for jobs, and has been terminated.\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/119647439#L2036\nSucceeded on LinuxbrewTestBot.\n. Yeah, I'd guess it's an upstream bug related to GCC 5. It should be std::isfinite, as you noted.\n. Hmm. No, I haven't run into that error myself. Perhaps the file system that you're on doesn't support flock? I'm not sure why those brewing files stick around. Should they be deleted automatically?\n. I've been using Linuxbrew on NFS as well. I haven't had any trouble, but I suspect it depends heavily on the NFS implementation on the server and client.\n. Do post here if you find a resolution.\n. Please do!\n. LinuxbrewTestBot:\nchecking for tclsh... no\nchecking for tcl... no\nchecking for tclsh8.6... no\nchecking for tclsh86... no\nchecking for tclsh8.5... no\nchecking for tclsh85... no\nchecking for tclsh8.4... no\nchecking for tclsh84... no\nchecking for tclsh8.3... no\nchecking for tclsh83... no\nconfigure: error: Tcl shell not found\n. One possible issue is that TCL is included in homebrew/dupes/tcl-tk, and I believe that depends on X11 unless --without-x11 is specified.\n. I'd like to make tcl-tk not build tk by default, and make the option --with-tk instead of --without-tk, but tcl-tk is in homebrew/dupes, so I can't modify it greatly.\nWhat do you think of making the default on Linux --without-tcl?\nruby\nif OS.linux?\n  option \"with-tcl\", \"Build with Tcl support\"\nelse\n  option \"without-tcl\", \"Build without Tcl support\"\nend\n. Another solution is to create a :tcl Requirement that installs tcl-tk --without-tk by default but is satisfied by any installation of tcl-tk, including possibly the host's.\n. > Make --without-tk a required argument for tcl-tk, as in\nThe problem with this solution is that tcl-tk installed --with-tk would be uninstalled to get instead installed --without-tk, which is bad.\n. > :tcl sounds like a plan.\nGreat.\n. @rwhogg Please merge this patch. It's good to go!\n. The :tcl requirement can wait for another day.\n. Erg. This bug again. I hate this bug. It's a bug in glibc 2.19 (as per the comment).\nTry changing\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 39302fe..ad632fd 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -62,7 +62,7 @@ module Stdenv\n         # add both lib and prefix to LD_LIBRARY_PATH.\n         # segfault when LD_LIBRARY_PATH is set to non-existent directory.\n         # See https://github.com/Linuxbrew/linuxbrew/issues/841\n-        prepend \"LD_LIBRARY_PATH\", formula.prefix, File::PATH_SEPARATOR\n+        prepend_create_path \"LD_LIBRARY_PATH\", formula.prefix, File::PATH_SEPARATOR\n         prepend \"LD_LIBRARY_PATH\", formula.lib, File::PATH_SEPARATOR\n       end\n```\n. Great! Please go ahead and submit a pull request and commit.\n. BrewTestBot gave this error:\nbrew update\ncurl: symbol lookup error: /home/linuxbrew/.linuxbrew/lib/libcurl.so.4: undefined symbol: SSL_CTX_set_alpn_protos\nI haven't seen this error before.\n. Oh, I see why. A few lines before it uninstalls openssl.\n==> brew uninstall --force homebrew/dupes/libedit llvm openssl python zlib\n. test-bot:\n- installs the formula's dependencies\n- installs the formula and builds a bottle\n- removes the build deps of the formula\n- tests the formula\n- removes the formula\n- removes the deps of the formula\n- installs the newly built bottle of the formula along with its deps\n- tests the formula\n- removes the formula\n- removes the deps of the formula\n==> brew install --only-dependencies --verbose --build-bottle rtags\n==> brew install --verbose --build-bottle rtags\n==> brew audit rtags\n==> brew bottle --verbose --rb rtags --keep-old\n==> brew bottle --merge --write --no-commit ./rtags-2.2.x86_64_linux.bottle.rb --keep-old\n==> brew uninstall --force rtags\n==> brew uninstall --force bzip2 cmake curl git gpatch makedepend pkg-config sphinx-doc xz\n==> brew install ./rtags-2.2.x86_64_linux.bottle.tar.gz\n==> brew test --verbose rtags\n==> brew uninstall --force rtags\n==> brew uninstall --force homebrew/dupes/libedit llvm openssl python zlib\n. My proposed solution is to have a list of essential build deps that are never removed.\nAnother solution would be to use brew missing to remove broken packages with missing deps, like curl in this case. Another common case is zlib being removed and breaking gcc.\n. What I don't understand is why curl is still installed but openssl has been removed.\n. Here's my list of essential dependencies of curl, git and gcc:\nruby\n[\"zlib\", \"openssl\", \"glibc\", \"gmp\", \"mpfr\", \"libmpc\", \"isl\", \"curl\", \"expat\"]\n. My attempt at a fix for the test-bot removing essential dependencies is in #1024.\n. Go ahead and merge this PR if you like, ignoring the test failure.\n. Please merge this patch. It's good to go! #1024 can wait for another day.\n. Thanks, Piotr!\n. This patch fixes a regression.\n. :+1: Merge it! Thanks, Piotr.\n. Please merge! It's good to go.\n. Thanks, Piotr! Sorry for the regression.\n. https://github.com/Linuxbrew/linuxbrew/pull/1022#issuecomment-205927846\n\nAny plans on merging that one?\n\n@DoomHammer I'd rather teach test-bot not to remove dependencies of any installed formula that were installed before it starts its tests. I'd also like to understand why it's removing dependencies of curl, which it should know not to do. The test-bot doesn't know that gcc was sneakily installed without it asking, so I get why that's breaking, but it knows that curl was installed.\nThis patch needs more testing. I'm doing that now.\n. Resolved by brew install gcc before brew test-bot.. It's much better for the typical installation to have no options involved. Options are for exceptional installations. Perhaps --with-specs should be the default and --without-specs the option? What does this option do?\n. Is the mesalib-glw formula related? https://github.com/Homebrew/homebrew-x11/blob/master/mesalib-glw.rb\n. Does it make any sense to have mesa on Mac, or is it a Linux-only formula? I'd suggest putting it in homebrew/x11 if it's portable to both OS, and linuxbrew/xorg if it's Linux only, or possibly some new tap as @maxim-belkin suggested.\n. Afraid not, other than the possibility of creating a Linuxbrew formula for MESA. You can install X.Org like so brew install linuxbrew/xorg/xorg, but it doesn't yet include OpenGL.\n. I'm okay ignoring the Travis (Ubuntu 12) failure if it builds on LinuxbrewTestBot (Ubuntu 14).\n. LinuxbrewTestBot says\u2026\n==> brew install --verbose --build-bottle re2\n==> Downloading https://github.com/google/re2/archive/2016-03-01.tar.gz\nAlready downloaded: /home/travis/.cache/Homebrew/re2-20160301.tar.gz\n==> Verifying re2-20160301.tar.gz checksum\ntar xf /home/travis/.cache/Homebrew/re2-20160301.tar.gz\nError: The selected compiler doesn't support C++11: gcc\n==> FAILED\nThe compiler gcc refers to GCC 4.2 in Mac Homebrew land, which is why it thinks that it doesn't support C++11. Ubuntu 14 has GCC 4.8.4, which I believe does support C++11. So, it should know that the selected compiler supports C++11. I don't know why it's complaining.\nIn any case, this PR can be merged as is. We'll solve the C++11 issue another day. Merge it!\n:+1:\n. No, I don't think there's any harm. Unless for some reason this formula does not require C++11 on Mac OS, but does require C++11 on Linux, which would be odd, but possible. If the default compiler on Mac now supports C++11 by default, then there's going to be lots of places where needs :cxx11 is accidentally omitted on the Homebrew formula.\nThe best argument for adding unless OS.mac? is so that we can quickly tell from the source code that this line is a Linuxbrew patch.\n. @rwhogg Close this issue? Both Travis and LinuxbrewTestBot are happy with this build.\n. Thanks for the heads up and instructions, Xu.\n. @Linuxbrew/core The upstream Homebrew repository has been split into brew, the package manager, and Homebrew-core, the formulas. Linuxbrew will adopt this split as well some time next week. If you have any open pull requests that you'd like to commit before the split, now's the time to do it. =)\n. See Homebrew/legacy-homebrew#49752\nand Homebrew/brew#1\n. > Create a new Linuxbrew/brew repo. You could either fork Homebrew/brew then apply the diff between Homebrew/brew and Linuxbrew/linuxbrew. OR you could use following script then apply the missing change.\nI'd rather not lose the history, so that git blame is still useful, so I'll use your script.\n. > Update Linuxbrew/homebrew-core repo to sync with Linuxbrew/linuxbrew and Homebrew/homebrew-core.\nBy this you mean bring Linuxbrew/homebrew-core up to date by merging the changes from Linuxbrew/linuxbrew and Homebrew/homebrew-core into Linuxbrew/homebrew-core?\n. > Update Linuxbrew to the sync with Homebrew/homebrew with https://github.com/Homebrew/legacy-homebrew/blob/master/Library/Homebrew/cmd/update.sh#L9-L15 point to proper url. This need to be done in the last step.\nAnd by this you mean merge Homebrew/legacy-homebrew into Linuxbrew/linuxbrew.\nLast step is to rename Linuxbrew/linuxbrew to Linuxbrew/legacy-linuxbrew.\n. Thanks, Xu. I appreciate your help!\n. Linuxbrew/linuxbrew:master is currently behind Homebrew/legacy-homebrew:master by 32 commits:\na7058e0 readme: clarify what's not in homebrew/brew [Alex Dunn]\n7d148dc update: use --replace-all to set remote.origin.fetch [Xu Cheng]\n6146a1c README: note migrations. [Mike McQuaid]\n130bc02 Update/split documentation. [Mike McQuaid]\nd32d78d various: add remote migration hack [Xu Cheng]\n5f53fc3 update: migrate to new remote [Xu Cheng]\n235d819 test-bot: exclude Taps dir from root cleanup [Andrew Janke]\n1e92c7f test-bot: have --cleanup clean core repo as well as tested tap [Andrew J\n48e5079 test-bot: fix path in cleanup_before [Xu Cheng]\nef6cbe9 pull: fix --legacy when pulling bottle from new repo [Xu Cheng]\ne13ff62 Revert \"test-bot: clean up on Jenkins before building PR\" [Martin Afanas\n51e4e64 test-bot: clean up on Jenkins before building PR [Martin Afanasjew]\nef70efa diagnostic: improve check for 'install_name_tool' [Mike McQuaid]\n60f8861 test-bot: ensure tap is full clone [Xu Cheng]\n73bece8 test-bot: fix CI upload for core tap [Xu Cheng]\nfc80d72 pull: auto fix legacy closes message [Xu Cheng]\nc38cbf5 pull: fallback to old BrewTestBot git repo when necessary [Xu Cheng]\n6ed1425 test-bot: handle legacy formulae PR from Homebrew/homebrew [Xu Cheng]\n71cba60 doc: update for core/formula separation [Xu Cheng]\ndc94fbc tap-(un)pin/untap: better error message [Xu Cheng]\n68d6718 update-test: fix git fork bomb [Xu Cheng]\nb3aadea pull: add --legacy flag [Xu Cheng]\nedb7e9f bump Homebrew version to 0.9.8 [Xu Cheng]\n1e33dcb git: check homebrew/core existence before installing brewed git [Xu Chen\n33404b3 fix brew tests [Xu Cheng]\naf81f99 --version/config: show core tap information [Xu Cheng]\n7417397 audit/test-bot/pull: fix for core/formula separation [Xu Cheng]\n1d13a03 descriptions: update for core/formula separation [Xu Cheng]\ndeac0d8 update-report: update for core/formula separation [Xu Cheng]\nbf41e3c remove migrate_taps [Xu Cheng]\nc831b1e various: Homebrew/core is the core tap [Xu Cheng]\nf4a303a introduce `Homebrew/core` tap as new default core tap. [Xu Cheng]\n. @xu-cheng Can all 32 commits be merged into Linuxbrew/linuxbrew at once (as the last step)?\n. There's a bunch of conflicts to resolve, but I'll deal with that.\n. What does the git filter-branch script do? Is it rewriting history, or creating new commit(s)?\n. If it's rewriting history, will it leave the repository in a state that Homebrew/brew can be merged into Linuxbrew/brew? I'm afraid that they'll have totally different commit histories after it's done. They may not share any common commit SHA1.\n. Would a simple git rm Library/Formula Library/Aliases be possible?\n. Perhaps the easiest way to find out is just to try it and see what happens. Run the script and then try merging Homebrew/brew into Linuxbrew/brew and see what happens.\n. If it rewrites history on the homebrew/master branch exactly as it did when you ran it, and produces identical results, then maybe the git commit SHA1 will match up. Fingers crossed.\n. What script did you use to create Linuxbrew/homebrew-core?\n. Homebrew/homebrew-core and Linuxbrew/linuxbrew-core agree (have the same SHA1) for the first 62 commits, then the commit Remove MacPorts and Fink from the build environment has SHA1 of https://github.com/Homebrew/homebrew-core/commit/ead43565c24ba5139ee8b81095d84e2f54f446b4  in Homebrew/homebrew-core, but https://github.com/Linuxbrew/homebrew-core/commit/a6c6c6342f52af34d24bcda0a27fdbfebcd54683 in Linuxbrew/homebrew-core because the commit message was rewritten to change Closes #13 to Closes Homebrew/homebrew#13.\n``` diff\n--- linuxbrew\n+++ homebrew\n@@ -1,10 +1,10 @@\n-commit a6c6c6342f52af34d24bcda0a27fdbfebcd54683\n+commit ead43565c24ba5139ee8b81095d84e2f54f446b4\n Author: Max Howell max@methylblue.com\n Date:   Tue Aug 11 14:46:04 2009 +0100\n Remove MacPorts and Fink from the build environment\n\n\nCloses #13\nCloses Homebrew/homebrew#13\n\ndiff --git a/Formula/apr.rb b/Formula/apr.rb\n new file mode 100644\n```\nDo you have the exact script that was used to rewrite the history of Homebrew/brew and Homebrew/homebrew-core? I'll need to reproduce it exactly to end up with a repository that is compatible with Homebrew and can be merged.\n. I'm trying this out:\nsh\ngit filter-branch -f --prune-empty \\\n  --index-filter 'git rm --cached --ignore-unmatch -r -q -- Library/Formula Library/Aliases ;' \\\n  --msg-filter 'sed -Ee \"s~\\B#[0-9]+\\b~Homebrew/homebrew&~g\"' \\\n  -- --all\nIt needs to be fixed up to change #123 to either Homebrew/homebrew#123 or Linuxbrew/linuxbrew#123.\n. In https://github.com/Homebrew/brew/commit/a13ff43886f5255694ead2789a65bda3b97dd6b9, the log message\nFixes\u00a0#10341. was not rewritten to\nFixes Homebrew/homebrew#10341.\nThe spaces between s and # is a non-breaking space, Unicode point U+00A0 NO-BREAK SPACE.\nWhat regex was used to match issue numbers?\n. Now trying\u2026\nsh\ngit filter-branch -f --prune-empty \\\n  --index-filter 'git rm --cached --ignore-unmatch -r -q -- Library/Formula Library/Aliases ;' \\\n  --msg-filter 'sed -Ee \"s~ (#[0-9]+)~ Homebrew/homebrew\\1~g\"' \\\n  -- --all\n. The commit time stamp of the commit with the log message tap: add methods to get git related information changed from 2016-03-05T17:38:13+00:00 to 2016-03-06T05:51:06+00:00.\n``` diff\n--- legacy-homebrew 2016-04-15 10:47:06.000000000 -0700\n+++ brew    2016-04-15 10:47:23.000000000 -0700\n@@ -1,15 +1,15 @@\n-commit 73e5d38c3592115a74c7004b475fc26cfa974f2c\n+commit 9f96e41b40f52313fbc7832df631827f5e3bcacb\n Author:     Xu Cheng xucheng@me.com\n AuthorDate: 2016-03-05T12:03:43+00:00\n Commit:     Xu Cheng xucheng@me.com\n-CommitDate: 2016-03-05T17:38:13+00:00\n+CommitDate: 2016-03-06T05:51:06+00:00\n tap: add methods to get git related information\n\n These methods will be used in `brew --version`, `brew config`\n and `brew doctor` after core/formula separation.\n\n\nCloses #49796.\n\nCloses Homebrew/homebrew#49796.\nSigned-off-by: Xu Cheng xucheng@me.com\n``\n. So far I am getting identical SHA1, as long as the commit message and time stamps match identically (and of course the file content). I'm not sure thatgit-rebasewill work through the merge commits. If I tried to rebase ontohomebrew/master, older Linuxbrew commits that no longer apply to the current Homebrew code will conflict. I'd have to deal with possibly dozens to hundreds of merge conflicts, unless I first squashed, which would lose a lot of history.\n. The committer author and date of 103 revisions changed fromlegacy-homebrewtobrewstarting with the commit mentioned above,tap: add methods to get git related informationon2016-03-05T12:03:43+00:00`.\n\n\nI've matched up the commits between legacy-homebrew and brew based on their author date, which didn't change, and subject, which wouldn't change as long as there's no issue #123 mentioned in the subject (thankfully, there are none), and created a mapping from the old SHA1 in legacy-homebrew to the new commit date for that same commit in brew for use with git filter-branch --env-filter.\nThe author's time zone is part of the git commit that is digested by SHA1. Same UTC time but changing the time zone changes the commit SHA1.\nSee http://rpubs.com/sjackman/compare-committer-date\n. Here's the script that I'm testing now. Wish me luck.\nsh\ngit filter-branch -f --msg-filter 'sed -Ee \"s~ (#[0-9]+)~ Linuxbrew/linuxbrew\\1~g\"' -- 7814c5b9393a7dabc6b78e51bc21a7d3a6999dd2...master\ngit filter-branch -f --prune-empty \\\n  --index-filter 'git rm --cached --ignore-unmatch -r -q -- Library/Formula Library/Aliases ;' \\\n  --msg-filter 'sed -Ee \"s~ (#[0-9]+)~ Homebrew/homebrew\\1~g\"' \\\n  --env-filter \\\n'case $GIT_COMMIT in'\"\n53c50891d96c85a3f5ce6fc2acc9e1c6d7905d65) GIT_COMMITTER_DATE='1459856087 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n235d819edf77fb3fe08714c3cf3489d5de08fc96) GIT_COMMITTER_DATE='1459665072 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n1e92c7f4316a2e37d8ec03b73c8e4e3d2b24a18f) GIT_COMMITTER_DATE='1459665072 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n48e5079dbddc994f65ce4ddc215479ba46af475e) GIT_COMMITTER_DATE='1459665072 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nef6cbe93363d6e1e579dee56d7e94795f745e25d) GIT_COMMITTER_DATE='1459656947 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne13ff6294a0bbc28fc98d6f797b1b56ce93ecd67) GIT_COMMITTER_DATE='1459656947 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n51e4e6490bda0d981afd1787a6392ab588b0601c) GIT_COMMITTER_DATE='1459656947 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nef70efa204c929b01ba0e7a4da843c70ed455313) GIT_COMMITTER_DATE='1459656947 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n60f8861ce3dc964f08305237b667f3959de20d45) GIT_COMMITTER_DATE='1459614849 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n73bece8744faa316cdde3160a170f4241303032c) GIT_COMMITTER_DATE='1459613441 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nfc80d72079b770a516d234f4e0eb8ca50fe063db) GIT_COMMITTER_DATE='1459613441 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nc38cbf514d1ead438b235f09a5607faa580b702b) GIT_COMMITTER_DATE='1459612898 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n6ed1425b9fb8273ac9b367f08e41ca53afae8b97) GIT_COMMITTER_DATE='1459612898 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n71cba6064f73c3e9ea46d10879f1b503bea86586) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ndc94fbc68a15af37de0691895e7f6247c94ec593) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n68d6718e53e2d1f155d0261aafb3a3585c425d83) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nb3aadea002b5fd6847d710929423f13d5af5b0bd) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nedb7e9f4b539d758ab402f14c48a3effa9316e05) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n1e33dcb974207fec295516124ab0a2c1a3fa9146) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n33404b32ef9e8ebbbbcdcecd7ea77e0d2b3a926d) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\naf81f99442ff2616ac10b6e4ea5750e7f953f3d1) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n74173972ffbb21d314b6b0f4b85af4c2b71f816f) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n1d13a03cfdb50ec2b014bf82cb5a612e30c0bcbe) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ndeac0d8cca8484b82492cdc68da3feb2a51b795b) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nbf41e3c44d61c60abc3f07016dc6f1b9175828dc) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nc831b1efe9e302bed914dcf1119b706b9137ee93) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf4a303aa9f194370eb52cda1bd39e97b771449fb) GIT_COMMITTER_DATE='1459605096 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\na1a71b8f46ee364a3c096197a9a415c85c9d3dd7) GIT_COMMITTER_DATE='1459499414 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n3d622f85544cc4a72a66989c2c85849d8b054295) GIT_COMMITTER_DATE='1459415422 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\na9602a5238a91e1f3ad6696c2ee1f02ab7dc6a9d) GIT_COMMITTER_DATE='1459415422 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n798ad40e80647a9add30a6714060a759df644192) GIT_COMMITTER_DATE='1459406941 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nee6aa7a78edb91f168b74b3944d64cdeed040cb1) GIT_COMMITTER_DATE='1459401410 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\naa60ce7571b98c09c479b58b3c9cfc9edd988fee) GIT_COMMITTER_DATE='1459401410 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nbe679f91eb6c67c7574485782e4f0cfa456d8ed9) GIT_COMMITTER_DATE='1459401410 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n89990349813d9c93beb8ca8c74f78798a1bea01e) GIT_COMMITTER_DATE='1459239577 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n64caad7c79208807d595d5189c45e92067b3c8ef) GIT_COMMITTER_DATE='1459160567 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n04a99f1eedd993c053053689876de54e169f0992) GIT_COMMITTER_DATE='1459160567 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf1068094455f9b7072cd1e6a3bf1ebec11ea1a4b) GIT_COMMITTER_DATE='1459160567 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n0081b8c1060f04422b2134f3975113b6f8f1f7a0) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nb244376ca6d01fcde6c9d181c8ffd11cf8f11152) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n32aeb46b6c2d4c95c9cfd4c5b85f62be2553d556) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n6207527aabffe39a65f41393849b9c3c2ee04425) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ncddee3c5dfc5721a804787a4760ce0c3251eaf66) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nd6e5ecff5b89ef6b0b079763b60191be5010986c) GIT_COMMITTER_DATE='1458975010 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nbe7f2b5b0e72cf6389e8ad76a0cb7128058dc248) GIT_COMMITTER_DATE='1458802333 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nc5be64cfa1b8c6dfb5c9df08b95c27a8f445ac99) GIT_COMMITTER_DATE='1458802333 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf38a816f03bf964173f5aadcc637b66062d7e9ab) GIT_COMMITTER_DATE='1458716488 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nfe0c3127d088921a7adaaa9429bb110ff48fac3f) GIT_COMMITTER_DATE='1458711676 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n2fd4075442849672906aab1d1b12d214a9b64f9c) GIT_COMMITTER_DATE='1458647056 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\na1824f82b271b14b93f1f401a1ceb47bee9414a6) GIT_COMMITTER_DATE='1458644119 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\neaf0b54999fa52dad729a9793d27963e14713e69) GIT_COMMITTER_DATE='1458644119 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf715e0e48e78a4338a8af7cf5e94715a02f13526) GIT_COMMITTER_DATE='1458644119 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf8a8e876c5b6f7c287e147620ea7a0f4209bbea5) GIT_COMMITTER_DATE='1458558458 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n30e7dc8eb12723a754661a5b9e0f26ec2d8c5cfb) GIT_COMMITTER_DATE='1458558458 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\na3186130dd7ac3075987b5c9bcbad74de767a64a) GIT_COMMITTER_DATE='1458558458 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ncc0fd25ff1caba9520660a2b02179213f13fc76a) GIT_COMMITTER_DATE='1458558458 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n51d8d735a106f4f70769cdfd19fb21f64dee8373) GIT_COMMITTER_DATE='1458456958 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne95f61b55a010eac056078ca47878f4e997bc2c8) GIT_COMMITTER_DATE='1458456958 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nac2fe466e03dc8ecbcbb14eb439644bdb68addb9) GIT_COMMITTER_DATE='1458456958 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n41998df03cac9d421716ecb573d66c60d6a805bc) GIT_COMMITTER_DATE='1458456958 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n291583de2d7fef89a4b5135153630de0f1828065) GIT_COMMITTER_DATE='1458452898 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n48cfc1d2ed3041998eca2387003c9960df8f75cc) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne0f5b710002a4e7bef647a75a2e13b8b64fdb6ca) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nc6183aaea9304cc3f0f38583d890004830cc6fe8) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n8c7f3d859e8f715b6c63e4fe75e7a636aee4167f) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne5fa93d36e6505419cd9a3f6d7e15bfe3cdb93a2) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n5e6cea284d64b43ac4959bc8c1409ddd2442e136) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nd1793bf0afb46fcf5d7cf945fc1d6b173d523f2c) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n5cebfce08f50977f1861c5c76cf1eb7d25463837) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne1c8965ca9ec7d3f23c1d01c5655e2eb20c5fd0b) GIT_COMMITTER_DATE='1458386090 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n5a850cf3a831c2a7e0201561414d7736f7d0c34c) GIT_COMMITTER_DATE='1457959293 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n7032591bd44a8f50aaa55574ac97cd5cb7261460) GIT_COMMITTER_DATE='1457958815 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n946c6deb4b5168ad2ec15e62aa6e81181e9e246c) GIT_COMMITTER_DATE='1457956695 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n0b38f9b286bc61e2b2d2232f80ea8ebc5909fb07) GIT_COMMITTER_DATE='1457955555 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n0d2de365e2c9f1be5a623c2602270f225ca07b5f) GIT_COMMITTER_DATE='1457955555 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n4b30df263ea85c61ec585b9859a3ba7b9b17e91f) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n2d5e5133588ac4face3b3e486b9448c52684ffa2) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ncfef282c5011e39b75329d01b45cfd53f6a10749) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nf0139e7164f95492cb9ea8007bef26525b83a16f) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n5a1c57ab88eee6629922c8f4ebc1e1c3b67b0c45) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n34b4dcf11de0ee024e2b9cd166e17d1f671ef57a) GIT_COMMITTER_DATE='1457850725 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n99e15f4192b9d1b402ce36b3eec176df2839c98b) GIT_COMMITTER_DATE='1457674374 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n397c202fb0e5a1bb4d03ceb61f54645f09d4aae6) GIT_COMMITTER_DATE='1457674374 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n626169d742ea572963e0f7b73762a555e846adbc) GIT_COMMITTER_DATE='1457606743 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n1747420b2f65d5f365b989b38880daf8c7a0f318) GIT_COMMITTER_DATE='1457524046 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n0aa300507881f52f31203424470b3ebfc3c87faf) GIT_COMMITTER_DATE='1457523341 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nd7732afe0581fe63cd2f8791dc4692ef271c5773) GIT_COMMITTER_DATE='1457516326 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n9e9dfb6a8dfc5440dac596077bbe7498cf9ded4b) GIT_COMMITTER_DATE='1457510422 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nb5f35c8a3e1e200b4c2f18a82084324980b2c816) GIT_COMMITTER_DATE='1457445309 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n2a1365dcf09148db64200ebbcd0e7089895aae37) GIT_COMMITTER_DATE='1457441531 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nfc3404b2fc7b4c9fda8a67db7193f9d6f25dc10c) GIT_COMMITTER_DATE='1457440579 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n0525c9eeea27eff1a6de05e7a01ec268ae07437b) GIT_COMMITTER_DATE='1457440579 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n943ea8c3708ec9a56de9f9234702c863e30ca690) GIT_COMMITTER_DATE='1457440579 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\ne931b19643a6da8326fd454c46b45be1237ebe70) GIT_COMMITTER_DATE='1457416049 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nb6c814e2c8aa6fb6180bcc81d7e250d61f458ec4) GIT_COMMITTER_DATE='1457416049 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n9cc7a2b7c58838f5d2c9a058b7dbae166e4c97bb) GIT_COMMITTER_DATE='1457352035 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n7970035e5d8bdaf201e44b0fa84a047f9f67ab22) GIT_COMMITTER_DATE='1457351026 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nd4cb0763050f18b3803f2fba01558041bc5690c7) GIT_COMMITTER_DATE='1457351026 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n51b94f3b278543dd482dabd5926148fcfb2e6522) GIT_COMMITTER_DATE='1457351026 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n142c94ce0d453e3209f5502238b354658de4e039) GIT_COMMITTER_DATE='1457351026 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n82c434aa066d2e4a62c0c2c799c8caf4b6e21bca) GIT_COMMITTER_DATE='1457351026 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nfbcd95b1634f8cfbdc04c90701515e81368e6501) GIT_COMMITTER_DATE='1457243466 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\n73e5d38c3592115a74c7004b475fc26cfa974f2c) GIT_COMMITTER_DATE='1457243466 +0800' GIT_COMMITTER_NAME='Xu Cheng' GIT_COMMITTER_EMAIL='xucheng@me.com';;\nesac\nexport GIT_COMMITTER_DATE GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL\n\" \\\n   -- --all\n. This commit very nearly works. Up until now, the graph topology of the commits have remained unchanged. An empty merge commit was removed with the mesage Merge remote-tracking branch 'origin/master' which is the parent commit of Avoid pathological trailing slash in legacy-homebrew, but in brew this merge commit does not exist, and the parent commit is Formula Cookbook: /environmental/environment/.\nI was hoping that git filter-branch --prune-empty would remove empty merge commits, but it explicitly does not:\n\nthis switch only applies for commits that have one and only one parent\n\nGoogling for git filter-branch prune empty merge commits shows other people trying to accomplish this same task. This script from SO is working nicely to remove empty merge commits using git filter-branch --parent-filter to remove redundant parents.\n. Unfortunately there's an older empty merge commit that was not removed from brew, 001b8de Merge branch 'qt5', so it's important not to remove empty merge commits from the entire git commit history, but only commits after 001b8de Merge branch 'qt5' 2014-01-11 15:58:34 +0000\n. This script removes empty merge commits after and not including 001b8de Merge branch 'qt5' 2014-01-11 15:58:34 +0000.\nsh\ngit filter-branch -f --prune-empty --parent-filter '\nruby -e '\"'\"'\nold_parents = gets.chomp.gsub(\"-p \", \" \")\nnew_parents = if old_parents.empty? then\n  []\nelse\n  `git show-branch --independent #{old_parents}`.split\nend\nputs new_parents.map{|p| \"-p \" + p}.join(\" \")\n'\"'\" \\\n-- 001b8de679e776516ae266699e40d403945137d2..master\n. It works! The above two scripts can take the existing Linuxbrew/linuxbrew repository and rewrite its history so that every commit in Homebrew/brew has a corresponding commit with an identical SHA1 in the newly created Linuxbrew/brew repository. To accomplish this feat, the exact same transformations that were applied to Homebrew/homebrew to create Homebrew/brew must be repeated exactly. Those transformations include:\n1. tree-filter: Remove the directories Library/Formula and Library/Aliases\n2. msg-filter: Change issue references like #123 to Homebrew/homebrew#123\n3. env-filter: Change the committer author and committer date of 103 revisions listed above.\n4. parent-filter: Remove empty merge commits after and not including 001b8de Merge branch 'qt5' 2014-01-11 15:58:34 +0000. but do not remove empty merge commits before that commit\nThe resulting repository is at https://github.com/Linuxbrew/brew\n. I'm going to tackle Homebrew/homebrew-core now.\n. Here's the scripts with some explanation: https://github.com/sjackman/rewrite-git-history\nIt has the scripts for brew. I'll add the scripts for homebrew-core probably later tonight if it goes well.\n. > this should be a requirement in its own file so that other formulae beyond just postgres can use it.\nAgreed.\n. I have noticed myself that ENV.cc is always set to /usr/bin/gcc in the test do block. I'll look into it.\n. Fixed. Can you confirm that the fix works for you, Torsten?\n. I thought sdsl-lite was packaged? Am I nuts? Where does it live?\nsh\n$ brew search sdsl\nNo formula found for \"sdsl\".\n==> Searching pull requests...\n. My fix for this issue fixed brew test, but it doesn't fix brew sh, which starts with CC=/usr/bin/gcc. I'd like to fix that.\n. Please keep the depends_on chunk and remove the other two chunks.\nPlease squash all the commits to a single commit.\n``` sh\ngit rebase -i origin/master\nselect squash\ngit push G-Square master --force\n``\n. Did you intend to close this pull request?\n. Linuxbrew has transitioned through the separation ofbrewandcore` yet. It'll probably happen next week.\nWhat are the \"errors parsing XML UTF-8\" that you mention? Is it related to this issue, or a more general issue?\nAre you having any trouble building duck, or are you just updating the version? If you are encountering an error message, please report brew gist-logs ducks. If the latter, please send the updated version upstream to Homebrew/homebrew, as Bob mentioned.\nI'm going to close this issue. Feel free to reopen if you are encountering an error building duck on Linux.\n. Thanks for the update, Andrew.\n. The list of Perl modules is rather longer than I had expected.\nEl Capitan https://gist.github.com/f39b8b95e3215458609dbe572b6a0a9d\n\u276f\u276f\u276f cpan -l | grep -v undef | sort -u | gist\n. Perhaps we can just add to the list as people report bugs. I've started the list in the description of this issue above.\n. This issue was moved to Linuxbrew/brew#6\n. LinuxbrewTestBot error:\n1) Error:\nX11RequirementTests#test_satisfied:\nTapFormulaUnavailableError: No available formula with the name \"linuxbrew/xorg/xorg\" \nPlease tap it and then try again: brew tap linuxbrew/xorg\nI thought that this bug was fixed. =/\nSee Linuxbrew/linuxbrew#938 and Homebrew/legacy-homebrew#50271\n. > What I think might work better is having XorgRequirement extend X11Requirement and mapping depends_on :x11 to XorgRequirement\n:+1:\n. $ brew install gobject-introspection\n==> Tapping homebrew/dupes\nCloning into '/home/sjackman/.linuxbrew/Library/Taps/homebrew/homebrew-dupes'...\nIt looks fixed to me. I wonder why this requirement doesn't tap. Perhaps because it's in brew tests which behaves differently than reality some times\u2026\nDoes the auto-tapping work when you try it outside of brew tests?\n. I believe this issue is resolved by faf51442aba23f9498a51ae048ac008ec9b9f7ca.\nInstalling openssl works fine for me now using Ubuntu 14 and the Docker image linuxbrew/linuxbrew.\nsh\ndocker run linuxbrew/linuxbrew brew install openssl\n. ```\n\u276f\u276f\u276f docker run -it --name=linuxbrew linuxbrew/linuxbrew\nlinuxbrew@59d507f171f6:~$ brew install openssl\n==> Installing dependencies for openssl: patchelf, makedepend, zlib, gpat\n==> Installing openssl dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9.x86_64_linux.\n################################################################## 100.0%\n==> Pouring patchelf-0.9.x86_64_linux.bottle.tar.gz\n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9: 6 files, 838K\n==> Installing openssl dependency: makedepend\n==> Downloading https://linuxbrew.bintray.com/bottles/makedepend-1.0.5.x86_64_li\n################################################################## 100.0%\n==> Pouring makedepend-1.0.5.x86_64_linux.bottle.tar.gz\n/home/linuxbrew/.linuxbrew/Cellar/makedepend/1.0.5: 7 files, 75.4K\n==> Installing openssl dependency: zlib\n==> Downloading https://linuxbrew.bintray.com/bottles/zlib-1.2.8.x86_64_linux.bo\n################################################################## 100.0%\n==> Pouring zlib-1.2.8.x86_64_linux.bottle.1.tar.gz\n/home/linuxbrew/.linuxbrew/Cellar/zlib/1.2.8: 9 files, 370.5K\n==> Installing openssl dependency: gpatch\n==> Downloading https://linuxbrew.bintray.com/bottles/gpatch-2.7.5.x86_64_linux.\n################################################################## 100.0%\n==> Pouring gpatch-2.7.5.x86_64_linux.bottle.1.tar.gz\n/home/linuxbrew/.linuxbrew/Cellar/gpatch/2.7.5: 9 files, 293.5K\n==> Installing openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.2g.tar.gz\n################################################################## 100.0%\n==> Downloading https://raw.githubusercontent.com/Homebrew/patches/3f1dc8ea145a7\n################################################################## 100.0%\n==> Downloading https://raw.githubusercontent.com/Homebrew/patches/3f1dc8ea145a7\n################################################################## 100.0%\n==> Patching\n==> Applying revert-pass-pure-constants-verbatim.patch\npatching file crypto/perlasm/x86_64-xlate.pl\n==> Applying tshort-asm.patch\npatching file crypto/perlasm/x86_64-xlate.pl\n==> perl ./Configure --prefix=/home/linuxbrew/.linuxbrew/Cellar/openssl/1.0.2g -\n==> make depend\n==> make\n==> make test\n==> make install MANDIR=/home/linuxbrew/.linuxbrew/Cellar/openssl/1.0.2g/share/m\n==> Downloading https://raw.githubusercontent.com/bagder/ca-bundle/bff056d04b9e2\n################################################################## 100.0%\n==> Caveats\nA CA file has been bootstrapped using certificates from the system\nkeychain. To add additional certificates, place .pem files in\n  /home/linuxbrew/.linuxbrew/etc/openssl/certs\nand run\n  /home/linuxbrew/.linuxbrew/opt/openssl/bin/c_rehash\n==> Summary\n/home/linuxbrew/.linuxbrew/Cellar/openssl/1.0.2g: 466 files, 14.2M, built in 2 minutes 36 seconds\n``\n. Both @DoomHammer and I have have seen this failure with some distributions. We've noticed that it appears to still be doing stuff, processes are still running if you checktop, but no messages are being output to the console.\n. I've had no trouble with Ubuntu 14, but I have had trouble with Ubuntu 12.\n.brew test-bot --keep-old took more than 10 minutes since last output. Please reportbrew list perl | grep EXTERN.h`\ne.g.\n$ brew list perl |grep EXTERN.h\n/gsc/btl/linuxbrew/Cellar/perl/5.22.1/lib/5.22.1/x86_64-linux-thread-multi/CORE/EXTERN.h\n. https://gist.github.com/dragonxlwang/aa15a009cb299ae2a58806de1a37dfca#file-00-config-out-L0-L20\nPerl: /usr/bin/perl\nI don't believe you have perl installed with Linuxbrew.\n. Perhaps that gist is out of date. Please report brew install vim; brew gist-logs vim\n. if_perl.xs:57:20: fatal error: EXTERN.h: No such file or directory\nhttps://gist.github.com/anonymous/8f19eb13e2f018823bef377f0f24c72e#file-02-make-L123\n. Perl: /usr/local/bin/perl => /usr/bin/perl\nhttps://gist.github.com/anonymous/8f19eb13e2f018823bef377f0f24c72e#file-00-config-out-L16\nDo you have perl installed using Linuxbrew? Please report\nsh\nbrew list --versions perl\nwhich -a perl\nTry\nsh\nbrew install perl vim\nIf you install Linuxbrew in /home/linuxbrew/.linuxbrew you'll be able to use the precompiled binary bottle of vim rather than building vim from source.\n. t/op/groups ................................................... FAILED--expected test 1, saw test 2\nFailed 1 test out of 2321, 99.96% okay.\n    op/groups.t\nhttps://gist.github.com/anonymous/c857358d39db38cb1472356d2816d28d#file-03-make-L808\nI'd suggest reporting that bug upstream to the PERL developers. Try\nsh\nbrew install perl --without-test\n. Shucks. Perhaps vim needs a configure option to specify the location of the perl header files. Are you able to look into that?\n. As a hack workaround adding the following (untested) to the formula may help:\nruby\nENV[\"C_INCLUDE_PATH\"] = Formula[\"perl\"].lib/\"perl5/5.24.0/x86_64-linux-thread-multi/CORE\"\n. Thanks for the workaround, @cambxh.. @cambxh Consider installing Linuxbrew in /home/linuxbrew/.linuxbrew/ if possible so that you can use precompiled binary packages (known as bottles) for non-relocatable formula like vim.. Thanks for the bug report.\nhttps://gist.github.com/dragonxlwang/34ab6758653063117dcfde01983a0ebc#file-03-make-L3-L827\nt/op/groups ................................................... FAILED--expected test 1, saw test 2\nCan you get more info from this particular failure?\n```\nFailed 1 test out of 2296, 99.96% okay.\n    op/groups.t\nSince not all tests were successful, you may want to run some of\nthem individually and examine any diagnostic messages they produce.\nSee the INSTALL document's section on \"make test\".\nYou have a good chance to get more information by running\n./perl harness\nin the 't' directory since most (>=80%) of the tests succeeded.\nYou may have to set your dynamic library search path,\nLD_LIBRARY_PATH, to point to the build directory:\nsetenv LD_LIBRARY_PATH pwd:$LD_LIBRARY_PATH; cd t; ./perl harness\nLD_LIBRARY_PATH=pwd:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd t; ./perl harness\nexport LD_LIBRARY_PATH=pwd:$LD_LIBRARY_PATH; cd t; ./perl harness\nfor csh-style shells, like tcsh; or for traditional/modern\nBourne-style shells, like bash, ksh, and zsh, respectively.\n```\n. Okay.\n. I've added the dependency and built a bottle for Linuxbrew.\nsh\nbrew update\nbrew install tmux\nshould work now.\n. Set the environment variable HOMEBREW_LOGS\n. Did you build this bottle yourself?\n. Travis CI fails with this error:\nCMake Error at cmake/modules/HandleLLVMOptions.cmake:43 (message):\n  Host Clang must be able to find libstdc++4.7 or newer!\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/121124036#L2420-L2421\n. LinuxbrewTestBot fails with this error:\n/tmp/swift20160406-121547-1qmz309/swift-swift-2.2-RELEASE/utils/build-script: Can't find clang.  Please install clang-3.5 or a later version.\n. > Illegal instruction (core dumped)\nI believe your CPU does not support an instruction used in one of the precompiled bottles, possibly zlib.\nCPU: quad-core 64-bit 0x1005\nTry\nsh\nbrew reinstall zlib -s\nbrew install openssl\nThis issue will likely come up again with other packages. You'll probably want to set\nexport HOMEBREW_BUILD_FROM_SOURCE=1\n. Do you know what make and model of CPU you have?\n. brew doctor should check for an unknown CPU model and report it.\n. The default optimization flags are -march=core2 -msse4, which are inappropriate for your CPU. See https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L11\nYou can either change that value, or you can add a line to OPTIMIZATION_FLAGS in Library/Homebrew/os/linux/hardware.rb. See https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/os/linux/hardware.rb#L6\nTry this untested patch.\ndiff\ndiff --git a/Library/Homebrew/os/linux/hardware.rb b/Library/Homebrew/os/linux/hardware.rb\nindex 8e44693..cee0ff0 100644\n--- a/Library/Homebrew/os/linux/hardware.rb\n+++ b/Library/Homebrew/os/linux/hardware.rb\n@@ -3,6 +3,7 @@ module LinuxCPUs\n     :penryn => \"-march=core2 -msse4.1\",\n     :core2 => \"-march=core2\",\n     :core => \"-march=prescott\",\n+    :\"0x1005\" => \"\",\n     :arm => \"\",\n   }.freeze\n   def optimization_flags\n. You'll have to remove all installed packages and start from scratch.\nsh\nbrew remove `brew list`\nexport HOMEBREW_BUILD_FROM_SOURCE=1\nbrew install openssl -v\nI'm not positive that my above patch is exactly right. I haven't tested it. Try\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex 037c8bb..36122b2 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -8,7 +8,7 @@ module Stdenv\n# @private\n   SAFE_CFLAGS_FLAGS = \"-w -pipe\"\n-  DEFAULT_FLAGS = \"-march=core2 -msse4\"\n+  DEFAULT_FLAGS = \"\"\ndef self.extended(base)\n     unless ORIGINAL_PATHS.include? HOMEBREW_PREFIX/\"bin\"\n```\n. Same error.\ntest sslv3\nAvailable compression methods:\n  1: zlib compression\nIllegal instruction (core dumped)\nmake[1]: *** [test_ssl] Error 1\nmake[1]: Leaving directory `/tmp/openssl20160411-9788-1n1lsgw/openssl-1.0.2g/test'\nmake: *** [tests] Error 2\nSorry, I'm running out of ideas.\nThere are two workarounds\nsh\nbrew install openssl --without-test\nYou can try disabling zlib for openssl.\ndiff\ndiff --git a/Formula/openssl.rb b/Formula/openssl.rb\nindex 3c57f5a..3fca180 100644\n--- a/Formula/openssl.rb\n+++ b/Formula/openssl.rb\n@@ -46,7 +46,7 @@ class Openssl < Formula\n     --prefix=#{prefix}\n     --openssldir=#{openssldir}\n     no-ssl2\n-    zlib-dynamic\n+    no-zlib\n     shared\n     enable-cms\n   ]\n. If you brew install openssl --without-test does brew test openssl work?\n. If you know how to use gdb, you could determine which instruction (opcode) is causing the failure to help debugging.\n``` sh\nulimit -c unlimited\nbrew install openssl -dv\nselect shell\ngdb test-executable core-file\nx/i\n```\nChange test-executable and core-file to the appropriate file names.\n. The default optimization flags are DEFAULT_FLAGS = \"-march=core2 -msse4\".\nSee above for suggestions on how to change either DEFAULT_FLAGS or to change the optimization flags specifically for your processor.\n. > @sjackman I thought -march=native will auto-detect your CPU and even choose appropriate SSE/AVX flags?\nYes, it does. Thanks for the reminder. The default CFLAGS should definitely be -march=native. The default bottle flags should continue to be -march=core2.\nHomebrew superenv uses -march=native, but stdenv (which Linuxbrew uses) does not. The historical reason was that GCC 4.2 which was used by Mac OS before clang was the default compiler, didn't support -march=native. See https://github.com/Homebrew/legacy-homebrew/issues/14204\n. > @sjackman I've just discovered I can use -march=core-avx2 for my Haswell Xeons. Are there any env vars we can set that affect ENV.std ?\nNo, not that I'm aware of. My suggestion is to change DEFAULT_FLAGS to -march=native. What does brew config |grep CPU report on your machine?\n. -march=native was added to GCC in 4.2, so we can safely use it. https://gcc.gnu.org/gcc-4.2/changes.html\nApple GCC 4.2 must not have had it, I guess.\n. That code lives here, if you want to troubleshoot it:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/os/linux/hardware.rb#L59\n. Yep, that's the problem, and this line in particular:\nruby\n    elsif Hardware::CPU.intel? && !Hardware::CPU.sse4?\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L364\nThat line should be disable on Linux. Try:\nruby\n    elsif OS.mac? && Hardware::CPU.intel? && !Hardware::CPU.sse4?\n. If that works for you, please submit a pull request.\n. @channprj Does pull request #1094 fix your issue?\n. Hmm. That's a good point. I think the complete list of environment variables that should be checked is some subset of LANG, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES, LC_MONETARY, LC_NUMERIC, LC_TIME, possibly just LANG, LC_ALL, LC_MESSAGES.\n. @dochang Hi, Desmond. Please report the output of\nbrew install llvm --with-clang\nbrew install lnav --cc=clang\nbrew gist-logs lnav\n. > If so, I think this might need some investigation around a possible fails_with for GCC.\nYes. fails_with :gcc => \"5\". For historical reasons, fails_with :gcc means GCC 4.2 (which makes me grumpy).\n. CXXLD    lnav\n  CXXLD    lnav-test\n/home/doc/.linuxbrew/Cellar/curl/7.48.0/lib/libcurl.a(libcurl_la-openssl.o): In function `ossl_connect_common':\nopenssl.c:(.text+0xde0): undefined reference to `SSLv3_client_method'\n/home/doc/.linuxbrew/Cellar/curl/7.48.0/lib/libcurl.a(libcurl_la-openssl.o): In function `ossl_connect_common':\nopenssl.c:(.text+0xde0): undefined reference to `SSLv3_client_method'\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nMakefile:745: recipe for target 'lnav' failed\nmake[1]: *** [lnav] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nMakefile:749: recipe for target 'lnav-test' failed\nmake[1]: *** [lnav-test] Error 1\nmake[1]: Leaving directory '/tmp/lnav20160411-17474-j927xf/lnav-0.8.0/src'\nMakefile:463: recipe for target 'install-recursive' failed\nmake: *** [install-recursive] Error 1\nhttps://gist.github.com/dochang/cfe6b5e49e620615a939ca0b76f6164d#file-02-make-L100\n. This error is typical when mixing openssl headers from one installation and openssl libraries from another. Try\nsh\nsudo apt-get remove libopenssl-dev\nbrew remove openssl curl lnav\nbrew install lnav\n. That's good news! When posting a gist, please quote the relevant lines and link to them.\nhttps://gist.github.com/dochang/d2e4694264cbddffa076aed01f4ff077#file-02-make-L101\n``\n  CXXLD    lnav-test\nlnav.o: In functionexecute_search(lnav_view_t, std::__cxx11::lnav.obasic_string:< charIn,  functionstd :`:execute_searchchar_traits( ,std :std::__cxx11::allocator:char ,>  stdconst:&:)char_traits'<:char\n\nlnav.cc,: (std::allocator > const&)':\nlnav.cc:(.text+0x240e): undefined reference to pcrecpp::RE::QuoteMeta[abi:cxx11](pcrecpp::StringPiece const&)'\n.text+0x240e): undefined reference topcrecpp::RE::QuoteMetaabi:cxx11'\ncollect2: error: ld returned 1 exit status\n```\n. Try\n\nsudo apt-get remove libpcre-dev\nbrew install pcre lnav\n. It looks as though lnav is using C++11. If that's the case, then I believe pcre must also be built using C++11. Try this patch:\n``` diff\ndiff --git a/Library/Formula/pcre.rb b/Library/Formula/pcre.rb\nindex 08fd3b4..54d373b 100644\n--- a/Library/Formula/pcre.rb\n+++ b/Library/Formula/pcre.rb\n@@ -22,6 +22,7 @@ class Pcre < Formula\n   end\noption \"without-check\", \"Skip build-time tests (not recommended)\"\n+  option :cxx11 unless OS.mac?\n   option :universal\nfails_with :llvm do\n@@ -33,6 +34,7 @@ class Pcre < Formula\n   depends_on \"zlib\" unless OS.mac?\ndef install\n+    ENV.cxx11 if build.cxx11?\n     ENV.universal_binary if build.universal?\n system \"./autogen.sh\" if build.head?\n\n```\nsh\nbrew remove pcre\nbrew install pcre --cxx11\nbrew install lnav\n. Also try brew install gcc\n. It's possible that lnav should\nruby\n  depends_on \"pcre\" => \"cxx11\"\n. Great! Glad to here that you got it working, Desmond.\n. Ah, you mean the dynamic linker, ld.so? Change the symlink named ld.so found in $HOMEBREW_PREFIX/lib/ld.so.\n. Are you referring to the dynamic linker ld.so or the static linker ld? Library/ENV/4.3/ is for superenv and that is not used by Linuxbrew. Linuxbrew does not configure the static linker. GCC picks its static linker. I believe it simply searches PATH for the program ld. To use a different static linker, try creating a symlink from your linker to ~/.linuxbrew/bin/ld.\n. Great! Glad that you were able to get it working. It's not so much specific to Linuxbrew as it is about configuring GCC. You can create a new page on the Wiki over at https://github.com/Linuxbrew/linuxbrew/wiki\n. I have seen other issues with this error message reported. Try\nbrew install binutils go\nI'm not convinced that will work, but it's worth a shot.\n. It looks as though this issue is known upstream. See\nhttps://github.com/golang/go/issues/13114\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=807136\n. Maybe my binutils guess is correct. See https://github.com/Linuxbrew/linuxbrew/issues/1057\n\nYour system linker (/usr/bin/ld) is not up to date with your compiler/assembler. It's not a Go problem at all.\n\nPlease report /usr/bin/ld --version\n. This comment https://github.com/golang/go/issues/13114#issuecomment-186922245 mentions setting the environment variable CGO_ENABLED=0, but I believe that has to be done when compiling go 1.4, and we download a binary of go 1.4, used to bootstrap go 1.5.\n. Perhaps I misunderstood though. Try\nsh\nCGO_ENABLED=0 brew install go\n. Great!\n. Unfortunately bottling failed due to a static executable. I have to figure out how to distinguish static ELF executables from dynamic ones. Perhaps using file or a Ruby ELF library. See #1005\n==> brew bottle --verbose --rb go --keep-old\n==> Bottling go-1.6.x86_64_linux.bottle.2.tar.gz...\n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9/bin/patchelf --set-rpath @@HOMEBREW_PREFIX@@/lib --set-interpreter /lib64/ld-linux-x86-64.so.2 /home/linuxbrew/.linuxbrew/Cellar/go/1.6/libexec/bin/go \ncannot find section \nError: undefined method `write' for nil:NilClass\n. Merged. Thanks!\n. sh\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nSee http://linuxbrew.sh/#installation\n. make[1]: /usr/bin/g++: Command not found\nYou don't have a C++ compiler installed.\nSee Dependencies\nTry\nsudo apt-get install build-essential curl git m4 python-setuptools ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev\nsudo yum groupinstall 'Development Tools' && sudo yum install curl git irb m4 python-setuptools ruby texinfo bzip2-devel curl-devel expat-devel ncurses-devel zlib-devel\nbrew install gcc\nbrew install node\n. @xu-cheng You wrote me a nice comment with the steps that I have to take to complete the split for Linuxbrew. Do you recall where that comment is? I've searched the above two issues but didn't manage to find it.\n. Ah, thanks.\n. I'm glad to hear that you found a workaround. This error has come up before. Does this patch help? https://github.com/Linuxbrew/linuxbrew/issues/682#issuecomment-188460869\n. Sure. Would you like to submit a pull request?\n. --system-curl           use system-installed curl library\n  --no-system-curl        use cmake-provided curl library (default)\n. Can you please quote here or gist the exact error message that you're seeing? I haven't had any trouble with cmake myself downloading from https.\nThis patch should probably also need\nruby\ndepends_on \"curl\" unless OS.mac?\n. I'm not able to reproduce your error. Please report the output of:\nsh\ncat >CMakeLists.txt <<EOF\ncmake_minimum_required(VERSION 3.5)\nfile(DOWNLOAD https://github.com/lh3/bwa/releases/download/v0.7.13/bwa-0.7.13.tar.bz2 ./bwa-0.7.13.tar.bz2)\nEOF\ncmake .\nsha256sum bwa-0.7.13.tar.bz2\nI get this result:\n$ cmake .\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/sjackman/tmp/cmake\n$ sha256sum bwa-0.7.13.tar.bz2 \ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  bwa-0.7.13.tar.bz2\n. Thanks for the test case. I can now reproduce your error, and the patch is good. I haven't had to add a revision for a Linuxbrew bottle yet. I'll think on that. I may just delete the old bottle and replace it.\n. That's the downside to what I propose. Oddly, yours is the first bug report I've seen about this error.\n. Superseded by https://github.com/Linuxbrew/homebrew-core/pull/383\n. Travis fails:\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/122542861#L1253-L1254\nchecking for mousemask in -lncursesw... no\nconfigure: error: libgpm development libraries are required to build\nlibgpm is not packaged for Linuxbrew.\nSee http://www.nico.schottelius.org/software/gpm/\nand http://www.linuxfromscratch.org/blfs/view/stable/general/gpm.html\n. I'm currently splitting Linuxbrew/linuxbrew into Linuxbrew/brew and Linuxbrew/homebrew-core, as Homebrew did last week (two weeks ago?), so I'm not merging any pull requests right now. Sorry for the delay.\n. Rebuilding on Travis.\n. Moved to https://github.com/Linuxbrew/homebrew-core/pull/1848. Oh my goodness. Linuxbrew on Windows. The appocalypse has arrived. \ud83d\ude02\nThe gist looks successful:\nhttps://gist.github.com/anonymous/08c73dcf00d5a01f655d2f2f7531333e#file-04-make-L72\nPlease copy and paste the text of that last Invalid argument error here.\nTry enable debug mode and verbose output:\nsh\nbrew install pkg-config -dv\nTry installing a simpler formula for testing purposes.\nsh\nbrew install hello\nLinuxbrew has had some trouble with Ruby 1.9.3. I'm not sure if it's related here. Try upgrading to Ruby 2.x if possible.\nsh\nsudo apt-get install ruby2.0 ruby2.0-dev \\\n    && sudo ln -sf ruby2.0 /usr/bin/ruby \\\n    && sudo ln -sf gem2.0 /usr/bin/gem\n. Error: Invalid argument - (/tmp/pkg-config20160413-3748-101xbpy/pkg-config-0.29.1/AUTHORS, /root/.linuxbrew/Cellar/pkg-config/0.29.1/AUTHORS)\nThat's a Ruby function error. It's saying that some Ruby function that's been called has been passed invalid arguments. If you run the same command with -d (debug) enabled, you can then select traceback. Copy and paste the traceback, and we can try and troubleshoot it.\n. Error: Unable to determine the system's glibc version\nhttps://gist.github.com/anonymous/19914c11d1b16ba1020b456c815bb2cb#file-typescript-L4\nThat's fixable. There's a hardcode list of locations to look for libc.so.6. The list needs to be expanded to include wherever it is on your system.\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/requirements/glibc_requirement.rb#L16\nruby\n    libc = [\"/lib/x86_64-linux-gnu/libc.so.6\", \"/lib64/libc.so.6\", \"/lib/libc.so.6\", \"/lib/arm-linux-gnueabihf/libc.so.6\"].find do |s|\n. I don't have a Windows device on which to test, so it's pretty low priority for me. So no fret. I am curious if it'll work without too much fuss\u2026\n. Ah, sorry to hear about your unhappy computer. I'm going to close this issue for now. Please do come back and reopen it if you want to try it again.\n. I suspect that mysql will take a while and possibly much RAM to build from source. n1-standard-2 has 7.5 GB of RAM, which should be enough. For testing purposes you could try a larger machine.\nI would like to eventually have more bottles (precompiled binaries) for Linuxbrew.\n. Roughly half the formula are tagged as not being relocatable. The blocker is setting up the infrastructure to automatically build bottles whenever a formula changes in Homebrew. Currently we're adding a bottle whenever someone submits a pull request to fix a formula for Linuxbrew. I'd like to do one massive build at some point and bottle everything.\n. If you submit a PR against mysql and it builds (which doesn't always work, because of CI time limits and other things) I'll merge the bottle. If there's nothing to change for Linuxbrew, just add a comment that says # Do not merge. Build a bottle for Linuxbrew.\n. :+1: Waiting on CI.\n. > This fixes issue #1063.\nFor future contributions, please use Closes Linuxbrew/linuxbrew#1063. to differentiate upstream Homebrew issues from Linuxbrew issues.\n. Thanks for your contribution, Chase! I've also added a bottle for git. It's unfortunately not marked as being relocatable, so it'll only be used when Linuxbrew is installed in /home/linuxbrew/.linuxbrew. You can try brew install git --force-bottle if you want to be experimental, but it may not work.\n. Nice work! Thanks, Desmond.\n. Do you have access to a Mac, and if so do you know whether it works on a Mac?\n. No, it does not work on Mac.\nmice.c:59:10: fatal error: 'linux/kdev_t.h' file not found\nhttps://gist.github.com/sjackman/072b5c9d0d720192153e565112d77234#file-03-make-L15\n. Merged. I manually force the bottle to cellar :any as it doesn't install any data.\nThanks for your contribution, Desmond!\n. I don't know which minimum version is required either. =p\nTry brew install git\n. I thought git config went back to day one of git? Strange. Please report\nsh\nwhich -a git\ngit --version\ngit config user.name\n. Never mind my previous message. The command that's causing the error is: git clone --config.\nWe need to add a brew doctor check to check the version of git.\nbrew install git should fix your trouble.\n. @tulindanil Please report brew doctor\n. An outdated version of Git was detected in your PATH.\nGit 1.7.10 or newer is required to perform checkouts over HTTPS from GitHub.\nPlease upgrade: brew #{git_upgrade_cmd} git\n\nI have git 1.7.1 \n\nYour version of git is too old (but we already knew that).\n. > Cause brew uses git to fetch git\nAre you sure? It shouldn't. It's a bug if it does.\n$ brew install git -v\n==> Installing dependencies for git: patchelf, zlib, binutils, linux-headers, glibc, xz, gmp, gpatch, mpfr, libmpc, isl, gcc, makedepend, openssl, pkg-config, curl, expat\n. It would be helpful I think to run Diagnostic::check_for_git before brew tap or brew update. In fact, I though it did do this, but I guess not.\n. I want to figure out why your git depends on homebrew/dupes, but my git does not.\nPlease report brew deps git and brew deps --tree git\n$ brew deps --tree git\ngit (required dependencies)\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 openssl\n\u2502   \u251c\u2500\u2500 makedepend\n\u2502   \u2502   \u2514\u2500\u2500 pkg-config\n\u2502   \u251c\u2500\u2500 gpatch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u251c\u2500\u2500 gpatch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u2514\u2500\u2500 zlib\n\u251c\u2500\u2500 curl\n\u2502   \u251c\u2500\u2500 pkg-config\n\u2502   \u251c\u2500\u2500 gpatch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u2514\u2500\u2500 openssl\n\u2502       \u251c\u2500\u2500 makedepend\n\u2502       \u2502   \u2514\u2500\u2500 pkg-config\n\u2502       \u251c\u2500\u2500 gpatch\n\u2502       \u2502   \u2514\u2500\u2500 xz\n\u2502       \u251c\u2500\u2500 gpatch\n\u2502       \u2502   \u2514\u2500\u2500 xz\n\u2502       \u2514\u2500\u2500 zlib\n\u2514\u2500\u2500 expat\n. You can also try brew install -s git\n. I can reproduce this bug on CentOS 6 with git 1.7.1.\n$ brew tap homebrew/dupes\n==> Tapping homebrew/dupes\nerror: unknown option `config'\nusage: git clone [options] [--] <repo> [<dir>]\n\u2026\nError: Failure while executing: git clone https://github.com/Homebrew/homebrew-dupes /home/sjackman/.linuxbrew/Library/Taps/homebrew/homebrew-dupes --config core.autocrlf=false --depth=1\n. > But nevertheless it will be great if this information will be on your website!\nThere isn't a git dependency listed, because brew install git is supposed to work. It's a bug that it doesn't.\n. Now that I can reproduce this bug, I'll work on figuring it out.\n$ brew deps git --skip-optional\ncurl\nexpat\ngpatch\nmakedepend\nopenssl\npkg-config\nxz\nzlib\n$ brew deps git\nError: No available formula with the name \"homebrew/dupes/m4\" \nPlease tap it and then try again: brew tap homebrew/dupes\nThe tapping logic is trying to tap due to an optional dependency, even though it won't be installed.\n. Try\nsh\nbrew install patchelf\nbrew install zlib\nbrew install binutils\nbrew install linux-headers\nbrew install glibc\nbrew install xz\nbrew install gmp\nbrew install gpatch\nbrew install mpfr\nbrew install libmpc\nbrew install isl\nbrew install gcc\nbrew install makedepend\nbrew install openssl\nbrew install pkg-config\nbrew install curl\nbrew install expat\nbrew install git\n. @ilovezfs Hi, Joe. When installing git, the tapping logic is trying to tap Homebrew/dupes due to an optional dependency of git (somewhere down the dependency chain), which isn't actually going to be installed. The problem is that git isn't yet installed, so the tapping fails.\n. Related:\n$ brew deps git\nError: No available formula with the name \"homebrew/dupes/m4\" \nPlease tap it and then try again: brew tap homebrew/dupes\nI'm less worried about this error. In fact, I'm just fine with the current behaviour.\n. Does anyone know whether the git bottle is relocatable in practice? It's not currently marked as being cellar :any.\n. > In fact, I'm just fine with the current behaviour.\nExcept that I never understood why --skip-optional isn't the default behaviour. I think that --with-all-options should be the opt-in behaviour. brew deps foo should show the packages that would be installed by brew install foo, and have options to give other behaviour, with respect to bottles and options.\n. See https://github.com/Homebrew/brew/pull/92\n. Can we close this issue since we have the brew doctor check?\n. Hi, Nija. The workaround for your issue is\nsh\nPATH=`brew --prefix git`/bin:$PATH brew upgrade git\nIt needs a proper fix.\n. Please report brew gist-logs genewise.\n. No worries.\ncc -o genewise genewise.o geneparser21.o geneparameter.o genestats.o genewisehsp.o geneutil.o geneoutput.o threestatemodel.o genefrequency.o splicesitemodeler.o genewise4.o genewise6.o genestretch6.o genewise21.o geneloop21.o geneloop6.o genephase6.o gwlite.o gwlitemodel.o gwrap.o matchsum.o estwrap.o genewisemodel.o phasemodel.o cdparser.o genedisplay.o estwise3.o estslim3.o estloop3.o estfrag3.o estslimloop.o gwquickdb.o threestatedb.o pfamhmmer1db.o pwmdna.o wise2xhmmer2.o genewisemodeldb.o seqhit.o standardout.o geneparser4.o sw_wrap.o abc.o pba.o seqaligndisplay.o dbadisplay.o proteinsw.o estquick3.o  -L../base/ -L../dynlibsrc/ -L../HMMer2/ -lpthread `pkg-config glib-2.0 --libs` -lhmmer -ldyna_glib -ldyna_glib -ldyna_glib -ldyna -lwisebase  -lm\n../dynlibsrc//libdyna_glib.a(subseqhash.o): In function `Wise2_free_subseqhash_ghash':\nsubseqhash.c:(.text+0x4c): undefined reference to `g_hash_table_foreach_remove'\nhttps://gist.github.com/anonymous/5ed55a7589a494f032ff82c6dcc9fec3#file-01-make-L684\nThere appears to be a bug in the genewise Makefile. The libraries -l\u2026 are specified in the wrong order. Either brew install gcc or brew install binutils may work around your issue.\nI'm reassigning this issue to Homebrew-science.\n. This issue was moved to Homebrew/homebrew-science#3567\n. Merged. Thanks, Joe!\n. > A simple fix for this case would be to add an openblas recommended dependency to suite-sparse, but it is probably worth thinking about other cases that most likely exist.\nMac has a default/canonical implementation of BLAS/LAPACK, Accelerate.framework.\nWhat should the default implementation of BLAS/LAPACK be? @Homebrew/science\nI don't know much about this area myself. I believe there's an existing issue for this somewhere in either Linuxbrew / Homebrew-science.\nFor simpler dependencies the solution is simply to add the dependency to the Linuxbrew formula.\ne.g. depends_on \"libxml2\" unless OS.mac?\n. Linuxbrew should have :blas and :lapack requirements (do they come as a pair, or does one depend on the other?) that checks for BLAS/LAPACK libraries and has a default_formula of a reasonable default BLAS/LAPACK implementation. Which implementation should that be? Does openblas provide both BLAS and LAPACK? Does ATLAS?\n. > However, I've run into this sort of problem in other non-blas cases. For example I think xz Isn't in ubuntu but is needed to install something.\nWe're adding these missing dependencies to Linuxbrew as they're uncovered.\nSubmit a pull request to add to that formula depends_on \"xz\" unless OS.mac?\n. The default_formula of the :blas requirement will be atlas.\nThe default_formula of the :lapack requirement wil be openblas.\nopenblas will depends_on :blas => :recommended\nMake sense?\n. @dpo Would you like to submit a PR for atlas?\nIt would be nice to get the :blas and :lapack requirements into Homebrew so that we can use\ndepends_on :lapack rather than\ndepends_on :lapack unless OS.mac?\n. I'd prefer that formula dependencies model the actual dependencies.\natlas has no dependencies and installs only itself.\nopenblas depends upon some implementation of BLAS (:recommended) and alternatively uses its own implementation of BLAS.\nThe default implementation of BLAS is atlas. The user can at their discretion use a different implementation of BLAS that provides libblas.so.\nThe default implementation of LAPACK is openblas.\nThe :blas requirement should check that libblas.so is installed.\nThe :lapack requirement should check that liblapack.so is installed.\nIf it makes more sense to have only one requirement named :blas, it should check that both libblas.so and liblapack.so are installed. I find that confusing myself.\n. > One source of trouble with ATLAS is that LAPACK must be built at the same time\nAh, that would change things. That link mentions netlib LAPACK. Is there an equivalent option for openblas LAPACK?\n\nOpenBLAS provides the BLAS, it can't depend on an external BLAS. It's BLAS and LAPACK packaged into a single libopenblas library.\n\nI thought OpenBLAS could make use of ATLAS BLAS?\nThanks for answering my questions, Dominique. I'm trying to sort out for myself how all these packages interoperate.\n. Thanks for the explanation, Dominique. That helps a lot. I've just discovered that homebrew/dupes/lapack, which is netlib BLAS/LAPACK, provides both libblas.so and liblapack.so! The simplest solution for Linuxbrew would be that formula that depend on these libraries should\nruby\ndepends_on \"homebrew/dupes/lapack\" unless OS.mac?\nThat's problem not the best solution, but it's a good starting point for how should we improve on that.\nThe next increment would be a :lapack (or :blas) requirement that checks whether libblas.so and liblapack.so are already installed and so satisfy the requirement, and otherwise have a default_formula \"homebrew/dupes/lapack\".\nopenblas provides neither libblas.so nor liblapack.so. It provides libopenblas.so. Does that library provide the same interface as (i.e. satisfy) libblas.so and liblapack.so? If so, perhaps on Linux openblas should create symlinks from libopenblas.so to libblas.so and liblapack.so. What do you think?\nhomebrew/dupes/lapack and openblas conflict because they both install include/lapacke.h, even though their libraries are named differently.\nDo we need ATLAS if we already have two BLAS/LAPACK implementation to choose from?\n. > Perhaps openblas shouldn't be keg_only on Linux?\nkeg_only :provided_by_osx is ignored on Linuxbrew, so it's not :keg_only! =)\n. > That's a good point. It's easy to amend the formula,\n\nLet's go with openblas.\n\nGreat! Do we want a :blas requirement, or do we want to depends_on \"openblas\" unless OS.mac??\n. Debian's libopenblas-dev provides libblas.so and liblapack.so in a subdirectory named /usr/lib/openblas-base and also /usr/lib/libopenblas.so.\nhttps://packages.debian.org/sid/amd64/libopenblas-dev/filelist\n. Let's stick with depends_on \"openblas\" unless OS.mac?.\n\nHow would the :blas requirement work? Do nothing on OSX and use openblas on Linux?\n\nPretty much. For extra functionality, it could check whether libblas.so and liblapack.so are already provided and do nothing if they do exist. For example installed by homebrew/dupes/lapack or symlinked  by the user to their personal preferred version.\n. Thanks for these PR, Dominique!\n. Fixed by @dpo in Homebrew/homebrew-science#3570\n. Yep, that would work. I've done something like that on an ad hoc basis occasionally. I wouldn't want it to be the default behaviour, because the version provided by the system, may not be compatible with the version expected to be installed by Linuxbrew.\n. > Could you share how you did it?\nManually, but it could be automated. For example:\nsh\nmkdir -p `brew --cellar`/xz/5.2.2/bin  `brew --cellar`/xz/5.2.2/lib\nln -s /usr/bin/xz `brew --cellar`/xz/5.2.2/bin/\nln -s /usr/lib/libxz* `brew --cellar`/xz/5.2.2/lib\nbrew link xz\n. > Theoretically, Linuxbrew could check if the version installed by the system is the compatible with what the formula requires.\nIn fact, if you ran brew upgrade it would upgrade any host kegs that were older than the version provided by Linuxbrew unless you pinned the host keg.\n. There's so many places that this feature could break things. For it to work we'd need to create a mapping from Linuxbrew package names to host package names. I'm not sure it's worth the trouble. Once Linuxbrew formula are all bottled (binary packages are provide), which I'm working on, I'm not sure using host packages is necessary.\n. Useful on occasion for packages without Linuxbrew formula. Closing as wontfix due to the grief that mixing package managers can create.\n. Is ruby in your path? Please report which -a ruby\n. Great! Glad to hear that you got it working.\n. brew test fish fails. See https://travis-ci.org/Linuxbrew/linuxbrew/builds/124236894#L652\nCan you reproduce this failure?\n==> brew test --verbose fish\nTesting fish\n==> /home/travis/build/Linuxbrew/linuxbrew/Cellar/fish/2.2.0/bin/fish -c echo\n.\nLast 150 lines from /home/travis/.cache/Homebrew/Logs/fish/01.fish:\n2016-04-19 16:33:58 +0000\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/fish/2.2.0/bin/fish\n-c\necho\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/fish/2.2.0/bin/fish: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory\nError: fish: failed\n. I'm currently splitting Linuxbrew/linuxbrew into Linuxbrew/brew and Linuxbrew/homebrew-core, as Homebrew did last week (two weeks ago?), so I'm not merging any pull requests right now. I'll cherry-pick this PR after the split is complete, probably next week. Sorry for the delay.\n. I believe that error is caused by using ruby 1.9.3. brew install ruby should fix it.\n. This PR built correctly on the LinuxbrewTestBot.\n. Wow, a circular dependency between ncurses and libgpm? That's not fun at all. Really not. For weird situations like this Linux From Scratch usually has helpful information. Off the top of my head, I'd suggest trying adding an option like --without-gpm (you'll have to check its exact name with ./configure --help) to the configure command of ncurses.\n. Glad to hear that you got it working! You do have to add the flag to the formula. There's no automatic passing of brew command line arguments to the configure command. Please submit a pull request.\n. Related to https://github.com/Linuxbrew/linuxbrew/issues/1038\nTry one of\nsh\nbrew install python\nsudo apt-get install python-dev\nsudo yum install python-dev\n. pip install psutil may also resolve that issue.\n. I'm inclined to remove the getopt command from util-linux and use gnu-getopt. In cases like this, I usually defer to whatever Debian is doing.\n. /usr/bin/getopt is provided by util-linux on Debian.\nhttps://packages.debian.org/search?searchon=contents&keywords=%2Fbin%2Fgetopt&mode=exactfilename&suite=stable&arch=any\nUnless we have a good reason otherwise, I prefer to go with whatever Debian has done.\n. You can use https://github-issue-mover.appspot.com to migrate issues to Linuxbrew/homebrew-core.\n. Fixes Linuxbrew/linuxbrew#1053\n. I'm currently splitting Linuxbrew/linuxbrew into Linuxbrew/brew and Linuxbrew/homebrew-core, as Homebrew did last week (two weeks ago?), so I'm not merging any pull requests right now. I'll cherry-pick this PR after the split is complete, probably next week. Sorry for the delay.\n. \ud83d\udc4d Look's great! Thanks, Aleksey.\n. If you specify --build-bottle it will target -march=core2. Will that work for you?\n. brew install --build-bottle foo installs a formula as normal but sets -march=core2 and disables postinstall. There's also the --bottle-arch option, but the value has to be from one of the values found in\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/os/linux/hardware.rb#L3-L5\n. No, CFLAGS and CXXFLAGS and other environment variables are intentionally removed from the environment before building for reproducibility. What architecture are you targeting? That is, what value of -march do you want to use?\n. A HOMEBREW_ARCH environment variable may be a better fit for your use case. Can you please open an feature request issue to discuss?\n. Yes, please.\n. Sorry for the delay, and thanks for the bump, Aleksey. I'll do it today.\n. Moved to https://github.com/Linuxbrew/brew/pull/21\n. This issue was moved to Linuxbrew/brew#42\n. This appears to be a bug in your installation of Debian. See for example http://ubuntuforums.org/showthread.php?t=2258760\nPlease report:\nsh\nwhich -a which git-remote-https\nldd `which git-remote-https`\nldd /usr/lib/x86_64-linux-gnu/libhogweed.so.2\n. @tseemann pointed out that this warning gets buried.\nWarning: /home/rahn/.linuxbrew/bin is not in your PATH.\nIt needs to be improved with these instructions:\nhttp://linuxbrew.sh/#installation\n\nAdd to your .bashrc or .zshrc:\nsh\nexport PATH=\"$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH\"\n. Open a new terminal window with a new shell. It should work.\n. Try instead appending the line to ~/.bash_profile\n\nAlso try running in the new terminal:\nPATH=\"$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH\"\nwhich brew\nbrew env\n. Please try:\nPATH=\"$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH\"\nwhich brew\nbrew doctor\n. sh\necho 'PATH=\"$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH\"' >> ~/.$(basename $SHELL)rc\n$SHELL -c 'brew doctor'\n?\n. Yep, ~ expands to $HOME on pretty much ever shell that I know of. Only at the start of a word though, not in the middle, so the above $HOME can't be replaced by ~. \nsh\n\u276f\u276f\u276f echo ~\n/Users/sjackman\n\u276f\u276f\u276f echo PATH=~\nPATH=~\n. libtool: warning: '/dev/shm/subversion20160426-24557-8xnu2u/subversion-1.9.3/subversion/libsvn_ra_local/libsvn_ra_local-1.la' has not been installed in '/mnt/orange/brew/data/Cellar/subversion/1.9.3/lib'\n/mnt/orange/brew/data/bin/ld: cannot find -lsvn_delta-1\ncollect2: error: ld returned 1 exit status\nlibtool: warning: '/dev/shm/subversion20160426-24557-8xnu2u/subversion-1.9.3/subversion/libsvn_repos/libsvn_repos-1.la' has not been installed in '/mnt/orange/brew/data/Cellar/subversion/1.9.3/lib'\nlibtool:   error: error: relink 'libsvn_ra_serf-1.la' with the above command before installing it\nlibtool: warning: '/dev/shm/subversion20160426-24557-8xnu2u/subversion-1.9.3/subversion/libsvn_fs/libsvn_fs-1.la' has not been installed in '/mnt/orange/brew/data/Cellar/subversion/1.9.3/lib'\nmake: *** [install-serf-lib] Error 1\nhttps://gist.github.com/anonymous/e810f289d9e4cfb5095af136fb3e3bc1#file-05-make-L141\n. For what purpose do you need --with-serf? This option is unfortunately known not to work on Linux.\n. Your timing is good. I hadn't yet run into this issue myself, and just encountered it. brew install homebrew/science/k8 requires subversion --with-serf for http support.\n. I see the same error as you did above when installing subversion --with-serf.\n. Running brew install subversion --with-serf at error selecting 5. shell then running make install; exit and selecting 2. ignore works great. Thanks for the workaround, Arseny.\n. This patch worked for me!\n``` diff\ndiff --git a/Library/Formula/subversion.rb b/Library/Formula/subversion.rb\nindex fadccc4..b7619d5 100644\n--- a/Library/Formula/subversion.rb\n+++ b/Library/Formula/subversion.rb\n@@ -168,7 +168,8 @@ class Subversion < Formula\n system \"./configure\", *args\n system \"make\"\n\n\nsystem \"make\", \"install\"\n\nFix ld: cannot find -lsvn_delta-1\n\n\nENV.deparallelize { system \"make\", \"install\" }\n     bash_completion.install \"tools/client-side/bash_completion\" => \"subversion\"\nsystem \"make\", \"tools\"\n``\n. Woops. Spoke too soon. I forgot to add the--with-serfin that test. =/\nI'm testing it now--with-serf`.\n. It works! For real this time. :tada:\n. This issue was moved to Linuxbrew/homebrew-core#4\n. I don't have a Chromebook on which to test. I'd suggest contacting the author of the wiki article. @jbaum98\n\n\nPlease report the following:\nsh\nunset LD_LIBRARY_PATH\nbrew config\nbrew doctor\n. This error is quite odd:\n==> Pouring patchelf-0.9.x86_64_linux.bottle.tar.gz\nError: No such file or directory - /usr/local/linuxbrew/Cellar/patchelf/0.9/COPYING\nPlease report brew gist-logs hello\nand also\nsh\nls -ld /usr/local/linuxbrew /usr/local/linuxbrew/Cellar\nYou may consider installing instead in /home/linuxbrew/.linuxbrew to make better use of bottles, which are compiled for this prefix. /usr/local/linuxbrew can also work, but can't make use of non-relocatable bottles.\n. What error do you get with a bottle? Please report brew remove hello && brew install hello && brew gist-logs hello\n. It just hangs after pouring the bottle? I think @DoomHammer has seen this behaviour as well. We haven't yet figured it out.\n. Yep, if you're actively looking into it.\n. @jbaum98 Could you please report the output of which -a file?\n. Until we fix it, I believe the file command has to live precisely at /usr/bin/file. Try\nsh\nsudo ln -s `brew --prefix`/bin/file /usr/bin/\n. @minektur Please enclose copy-and-pastes in triple back ticks. See https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code\n. This issue will hopefully be fixed in the next few days. In the mean time, try change the following line:\nhttps://github.com/Linuxbrew/brew/blob/master/Library/Homebrew/keg_relocate.rb#L203\nruby\n      if Utils.popen_read(\"/usr/bin/file\", \"--brief\", pn).include?(\"text\") ||\nfrom /usr/bin/file to simply file.\n. Glad to hear it! I'll commit this fix right now.\n. This issue was moved to Linuxbrew/brew#28\n. This issue was moved to Linuxbrew/brew#2\n. Moved to the new world!\n. To migrate your current legacy Linuxbrew installation to the new split repository, check out the branch migrate (pull request #1101) and run brew update. This coming week, brew update will automatically migrate your legacy Linuxbrew installation to the new split repository.\nsh\nbrew update\nbrew doctor\ncd `brew --repo`\ngit fetch origin migrate:migrate\ngit checkout migrate\nbrew update\nbrew doctor\n. > @sjackman, maybe we should put instructions of this sort into either the output of the installer or somewhere prominent on the README, since this sort of issue seems to come up fairly frequently.\nYes, absolutely. Those instructions are already here: http://linuxbrew.sh/#installation\nThey should also be added to the end of the installation script. A PR would be most welcome.\n. /usr/bin/perl  -prototypes -typemap \\\n    /usr/share/perl5/ExtUtils/typemap if_perl.xs >> auto/if_perl.c\nUnrecognized switch: -rototypes  (-h will show valid options).\n. Please report /usr/bin/perl --version\nTry brew install perl vim\n. Please open a new issue over at https://github.com/Linuxbrew/homebrew-core/issues\n. Try brew install linuxbrew/xorg/xorg cairo\n. Thanks for the bug report and update, Fabio.\nThis issue will be fixed by https://github.com/Linuxbrew/brew/issues/5\n. This issue was moved to Homebrew/homebrew-science#3637\n. This issue was moved to Linuxbrew/brew#129\n. @DoomHammer Piotr may be able to answer your question.\n. This issue was moved to Linuxbrew/homebrew-core#1158\n. > Error: undefined method 'rebuild'\nTry brew update\nghc hasn't been building correctly. A workaround is to install GHC 7.10.3b like so:\nsh\nbrew install https://raw.githubusercontent.com/Linuxbrew/homebrew-core/6e4d8edba1f5d3a1aa796559d9bc3d7bdf1024cd/Formula/ghc.rb\nbrew install pandoc\n. Looks like GCC crashed, which may be tricky to troubleshoot. Please report\nsh\nbrew gist-logs ncurses\nYou may try\nbrew install gcc ncurses\n. Looks like GCC crashed, which may be tricky to troubleshoot. Please report\nsh\nbrew gist-logs ncurses\nYou may try\nbrew install gcc ncurses\n. Also try\nsh\ncurl -k -o `brew --cache -s curl` https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz\nbrew fetch curl\nbrew install curl\n. Consider installing Linuxbrew in /home/linuxbrew/.linuxbrew/ if possible so that you can use precompiled binary packages (known as bottles) for non-relocatable formula like util-linux.\nAnother possible workaround for you is brew install --force-bottle util-linux, but no promises.\nThe precompiled binary bottles of non-relocatable bottles can only be used if you install in /home/linuxbrew/.linuxbrew, otherwise they have to be built from source. See the documentation below, but wherever it reads /usr/local, which is for macOS, read instead /home/linuxbrew/.linuxbrew.\n+ http://docs.brew.sh/Installation.html#alternative-installs\n+ http://docs.brew.sh/FAQ.html#why-do-you-compile-everything\n+ http://docs.brew.sh/Bottles.html#cellar-cellar. Try\nbrew tap linuxbrew/xorg\nbrew list --versions opencv3\n. Please submit issues to Linuxbrew/brew rather than Linuxbrew/legacy-linuxbrew.. To use the above script, I believe both curl and git are required. It's possible to install Linuxbrew without using git. To avoid curl is possible, but may be a bit tedious.. These instructions for installing Linuxbrew on CentOS 5 may be helpful to you:\nhttps://github.com/Linuxbrew/brew/wiki/CentOS5. Error: undefined method `rebuild'\nThis error indicates that your brew is out of date.\nTry brew update or installing Linuxbrew from scratch.. I'm not able to replicate this error. Try\nsh\nbrew update\nbrew install node\nIf that doesn't work, please report brew gist-logs node. This repository is kaput and has moved to https://github.com/Linuxbrew/brew\nCan you clarify which command sent you to this repo?. Thanks for the PR, Adam. Could you please point me toward the old tutorial, and is it possible to update that old tutorial?. I've resolved this issue by instead updating the old install script to point users to the new Linuxbrew web page.\nhttps://github.com/Linuxbrew/legacy-linuxbrew/blob/go/install\nNow people following these instructions will see the error message\u2026\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)\"\n\nThe Linuxbrew GitHub repository has moved to https://github.com/Linuxbrew/brew\nPlease see http://linuxbrew.sh for instructions to install Linuxbrew.\n\nThanks for the bug report, Adam!. You appear to be using a very old version of Linuxbrew. Please try installing a fresh copy of Linuxbrew using the installation instructions available at http://linuxbrew.sh. Which web page or brew command pointed you to this old legacy Troubleshooting web page?. Which web page or brew command pointed you to this old Troubleshooting web page?. Please enclose copy-and-paste blocks in triple back ticks.\nSee https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code. What does brew install gcc report?. Try following these instructions for CentOS6. They should hopefully also work for SUSE Linux Enterprise Server 11.\nhttps://github.com/Linuxbrew/brew/wiki/CentOS6#install-linuxbrew-on-centos-6-without-sudo. I notice that you don't have glibc installed. Have you been using this installation of Linuxbrew for a while without glibc installed?. ==> Downloading https://downloads.sourceforge.net/project/lzmautils/xz-5.2.3.tar.gz\nError: bad URI(is not URI?): https://downloads.sourceforge.net/#!/#!/project/lzmautils/xz-5.2.3.tar.gz\nThat's a super weird error message. I've definitely not seen that error before.\nCan you please report the output of brew fetch -s xz?. I see the same warning, so I guess you can ignore that for now. Try again\nsh\nHOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc\n. We're sorry -- the Sourceforge site is currently in Disaster Recovery mode\nLooks like SourceForge is down for now. You may have to wait until it's back up. In the mean time as a work around, try this\u2026\nsh\nHOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install --ignore-dependencies zlib gmp mpfr libmpc isl gcc --without-glibc\n. Unless you have xz installed somewhere else, you're stuck until Sourceforge comes back online.. brew fetch -s xz will succeed and not give a Error: SHA256 mismatch\nIn the mean time, you may be able to brew edit xz and delete or comment out the sourceforge line. There's a mirror that you can use.\nsh\nbrew edit xz\nrm -f /home/pfreitas/.cache/Homebrew/xz-5.2.3.tar.gz\nbrew fetch -s xz. Note that Linuxbrew/linuxbrew is a very old repository, replaced by Linuxbrew/brew. You'll want to use the new installation instructions at\u2026\nhttp://linuxbrew.sh/#install-linuxbrew. Please enclose copy-and-paste blocks in triple back ticks.\nSee https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code. Please see https://github.com/Linuxbrew/brew/wiki/FAQ#why-does-curl-fail\nTry brew postinstall openssl\nIf that doesn't work, please report its error message.. Can you submit this line to mxcl/homebrew?\n. The dependency should be on having an X client, rather than an X server installed locally. Use xterm -version, which is also portable to both Mac OS and Linux.\n```\n$ X -version\nFatal server error:\nPAM authentication failed, cannot start X server.\n    Perhaps you do not have console ownership?\n$ xterm -version\nXTerm(215)\n``\n. Neat trick. I haven't see this before. How about more simply though,xterm -version?\n. Please add \"Homebrew does not package X11.\"\n. Why is this line needed, or why isn'trequire 'os/mac/xquartz'also needed?\n. For style, this should beenv { ENV.x11 } if OS.mac?, but better, patch ENV.x11 and add as the first linereturn unless OS.mac?`.\n. How about something like this:\nrb\nOS::X11.installed? && (@min_version.nil? || @min_version <= OS::X11.version)\n. Ditto here. Let's try something like:\nrb\nOS::X11.message_missing_dependency\n. Can you submit this line upstream to homebrew/homebrew?\n. I'll attempt to fix this so that depends_on :macos is ignored by Linuxbrew.\n. If you wanted to tackle this, a pull request would be most welcome.\n. Please remove this stray space.\n. Please revert this chunk. It shouldn't hurt anything on Linux.\n. Please change this to\nruby\nlib.install Dir[\"build/BUILDPREFIX_release/*.{dylib,so}\"]\n. Please revert this white-space-only chunk.\n. Does this chunk fix a particular build error that you're seeing?\n. I'm guessing this is a typo and should be xterm.\n. Please remove this comment.\n. I'm guessing this is wrong. Please test with brew test htop. Also use brew audit htop.\n. Does using gnu-getopt break anything? If not, I prefer not to change the formula. Standalone Linuxbrew systems don't use any system libraries.\n. Please remove the white space at the end of this line.\n. Linuxbrew doesn't support 32-bit systems, so I'm disinclined to merge this chunk. Any objections?\n. This line shouldn't be necessary. Compiling shared objects on Linux requires -fPIC, and Python's build system should handle that. @jbaum98 Can you test whether that's the case?\n. Please don't delete this blank line.\n. Can you fix MaximumMacOSRequirement  instead at its definition?\n. Ditto. MinimumMacOSRequirement\n. For a smaller diff, which makes merging easier. (note: untested)\nruby\n    if MacOS.prefer_64_bit?\n      args << \"--enable-only64bit\"\n      args << \"--build=amd64-darwin\" if OS.mac?\n    else\n      args << \"--enable-only32bit\"\n    end\n. The following one-line patch should work. If you can test it out, I'll merge the PR. No rush though. It can wait until the new year.\ndiff\n-  satisfy { MacOS.version <= @version }\n+  satisfy { !OS.mac? || MacOS.version <= @version }\n. Okay. I'll be on vacation, but should still find a few minutes to merge a PR if you're pushing commits on Christmas Eve. :wine_glass:\n. What's the purpose of this chunk? Does GCC search \"#{prefix}/x86_64-unknown-linux-gnu/bin\" for libraries? Seems odd to search bin for libs.\n. Is the binutils --with-lib-path patch sufficient to enable gcc to find the crt* object files? Or, is there some other way of adding Formula['glibc'].lib to gcc's search path?\n. Nice! I've been looking for this option and couldn't find it. Is there an equivalent option for GCC?\nRelated link: http://www.linuxfromscratch.org/lfs/view/development/chapter05/binutils-pass1.html\n. And another link: https://gitorious.org/guix/guix/commit/01d45404f69025c757c1800e8b64fdd29a8134a6\n\ndistro: Configure ld and GCC to not look under /usr & co.\nThis fixes impurities with non-chroot builds on LFS-style distros.\n- distro/packages/base.scm (binutils): Pass '--with-lib-path'. (gcc-4.7): Pass '--with-local-prefix'. * distro/packages/make-bootstrap.scm (%binutils-static): Pass --with-lib-path'.\n. No, GCC does not take--with-lib-path. It does take--with-local-prefix, but that only affects searching/usr/local/includefor headers. It does not affect the library search path.\n. Documents should not be executable.0775should be0644or possibly0664`. I'm not sure what Homebrew policy is on group permissions.\n. Tidier (untested)\n\nruby\ninreplace \"install.sh\", /^chmod .*/, \"\"\n. Can you submit this chunk (the non-Linux-specific stuff) to Homebrew/homebrew?\n. Please add if OS.mac? to both.\n. if not should be unless\n. I usually use Homebrew's ruby. Let's use #!/usr/bin/env ruby instead.\n. -s is the default. Please remove it. For short commands like this, I prefer backticks.\n. Please add depends_on \"openssl\" unless OS.mac?\n. Use if OS.mac? and if OS.linux? as appropriate. Linuxbrew supports both Mac and Linux. (Homebrew supports only Mac).\n. Please avoid whitespace changes.\n. Does gsasl work on Linux? You could add depends_on \"gsasl\" => :recommended unless OS.mac?.\n. Skip my suggestion on second thought. I just read the next chunk.\n. Looks good, but change if OS.linux? to unless OS.mac?.\n. I understand that this patch allows GCC to find crt1.o, crti.o and crtn.o by linking them into a directory that GCC searches by default. What's the purpose of the above symlink from \"#{HOMEBREW_PREFIX}/lib\" to \"#{prefix}/x86_64-unknown-linux-gnu/bin\"?\n. To make merging with Homebrew easier, patches to Linuxbrew should not include unnecessary changes. Changes such as these can be submitted upstream to Homebrew, but they do not accept style-only changes.\n. Does  the following work? I'd prefer the smaller patch if it does.\ndiff\n- \"--deployment-target=#{MacOS.version}\",\n+ (\"--deployment-target=#{MacOS.version}\" if OS.mac?),\n. Please use identical code to python.rb. It'll make maintenance of the two formulae easier.\nSee https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/python.rb#L56-L59\n. Use depends_on \"libxml2\" => :build unless OS.mac? and place it after the existing depends. Are you sure the dependency is :build only? Does it not require the libraries to be installed to run?\n. Ditto use ENV.append_to_cflags \"-D_DARWIN_C_SOURCE\" if OS.mac?\n. Use\nruby\n\"SYS=#{OS.mac? ? \"darwin\" : \"posix\"}\"\n. For dependencies unless OS.mac? is preferred over if OS.linux?\n. curl is provided by default on Mac OS, so this dependency should not apply to Mac OS. Linuxbrew aims to maintain compatibility with Homebrew and not change the behaviour of Homebrew when Linuxbrew is run on a Mac. This line should be\nruby\ndepends_on \"curl\" unless OS.mac?\n. Please add unless OS.mac? to these two lines.\n. Please change these both from if OS.linux? to unless OS.mac?\n. Please use unless OS.mac? rather than if OS.linux? for dependencies.\n. Please add a comment indicating the error message that this line fixes.\n. Indent should be two spaces.\n. Please add a space between the # and the comment. brew audit --style subversion should report this style issue.\n. Please wrap to 80 columns.\n. Please squash multiple consecutive spaces like libtool:   error: to a single space.\n. Please include a comment above this line explaining why this fix is necessary. Simply quoting the error message that it fixes is good enough.\n. If you have access to a Mac OS machine, can you attempt to duplicate this bug on Mac OS? If it duplicates, can you send this chunk upstream to Homebrew/homebrew?\n. Please use\nruby\ndepends_on \"flex\" => :build unless OS.mac?\n. Have you submitted this patch upstream?\n. Does this patch fix an error message that you observed? If so, can you report the error message?\nPlease submit this readline chunk in a separate PR and remove it from this PR.\n. Fixes specifically for Linux that don't affect Mac should be submitted to Linuxbrew. I should have bene more specific. I meant, have you submitted this patch upstream to the maintainers of cgdb?\n. In that case, just ask the upstream authors if they'd be willing to tag a new stable release.\n. Please add a comment\n``` ruby\nAdd --with-curses to fix the error: CGDB requires GNU readline 5.1 or greater to link.\n```\n. Can you add a comment indicating which error message this line is intended to fix?\nShould this include both CPPFLAGS and CXXFLAGS?\nruby\nargs << \"-DCMAKE_CXX_FLAGS=#{ENV['CPPFLAGS'] + ENV['CXXFLAGS']}\" unless OS.mac?\nDoes args = std_cmake_args accomplish this?\n. Replace these three lines with\nruby\nlibcxx_args = [\"-DLIBCXX_CXX_ABI=libsupc++\"]\n. Please extract everything inside the braces onto its own line and wrap it appropriately. Please add a comment describing the purpose of this line.\n. Please add a comment like \"Build libcxx. Google! =) http://stackoverflow.com/questions/9998518/ruby-backticks-break-command-into-multiple-lines\n. Please report the exact error that it fixes in a Ruby comment. It helps googling and maintenance.\n. Shouldg++be the value ofENV.cxxbefore it's overwritten above withbin/\"clang++\"? On many Linuxbrew systems,g++is a terribly out of date compiler that came with the system, and the recent compiler is calledg++-4.9org++-5.\n.echo | g++ -Wp,-v -x c++ - -fsyntax-onlyBetter style is:g++ -Wp,-v -x c++ - -fsyntax-only </dev/null`\n. Please remove this chunk. I prefer a minimall patch, to make merging with Homebrew easier.\n. Use instead\nruby\n\"--with-gdktarget=#{OS.mac? ? 'quartz' : 'x11'}\",\n. Please remove this chunk.\n. Please use inline #{ as above.\n. Please use\nruby\ndylib = OS.mac? ? \"dylib\" : \"so\"\nmv module_dir/\"lib_cairo.#{dylib}\", module_dir/\"_cairo.so\"\n. Please use inline #{\u2026}. e.g.\nbackend = OS.mac? ? \"quartz\" : \"x11\"\n\u2026\n    -lgdk-#{backend}-2.0\n. Does -I#{HOMEBREW_PREFIX}/include -L#{HOMEBREW_PREFIX}/lib work?\n. Do you get an error message without this fix? What is the effect of leaving this as is?\nThe preferred style is\n\"libhistory.#{OS.mac? ? 'dylib' : 'so'}\"\n. You're missing a closing brace here. You can test syntax using brew audit gtk+\n. Please move this chunk up so that the addition lines are directly next to the deletion lines. It helps merging and resolving merge conflicts.\n. Please change this to\nruby\ndepends_on \"bison\" unless OS.mac?\ndepends_on \"flex\" unless OS.mac?\nand delete the blank line.\n. Please use ? and : and double quotes, like the line below. See the output of brew audit --strict kubernetes-cli\n. Please change this line to depends_on \"gtk+\" => :optional\n. Please delete this line (see below).\n. Please change this line to if build.with? \"gtk+\"\n. Use depends_on :python instead, which can use /usr/bin/python, whereas \"python\" must use a Homebrewed python.\n. Use shell_output and #{bin}/iotop. You'll find it in other formulas for examples.\n. You can combine these into a single line. No need for the out variable.\n. Should this be if OS.mac? instead?\n. Is \"-G\", \"Unix Makefiles\" necessary?\n. Oh, I see. You copied it from above. We'll just go with that, then.\n. Please remove this option.\n. Please remove this chunk as well.\n. Please change if OS.linux? to unless OS.mac?\nWhat error message do you see without this patch chunk?\n. What error message do you see without this patch chunk?\n. ruby]\nos = OS.mac? ? \"darwin\" : \"linux\"\nENV[\"GOOS\"]         = os\n. Please use instead\nruby\n(libexec/\"pkg/tool/#{os}_amd64/\").install \"vet\"\n. Ditto, use #{os} as above.\n. I think you're missing the following line before this line?\nruby\nos = OS.mac? ? \"darwin\" : \"linux\"\n. Please add this comment above this line:\n``` ruby\nFix error: No frame pointers and no libunwind. The compilation will fail\n```\n. Please change this line to\nruby\ndepends_on \"libxslt\" unless OS.mac?\n. Please change to\nruby\n  depends_on \"xz\"\n  depends_on \"bzip2\" unless OS.mac?\n  depends_on \"zlib\" unless OS.mac?\n. Is this chunk necessary? Please remove it.\n. Please swap the sense of this test and use if OS.mac? instead.\n. Does --enable-x11-backend require cairo?\nPlease use\nruby\ndepends_on \"cairo\" => \"with-x11\" unless OS.mac?\n. Please don't factor out target_prefix. The patch looks good otherwise. Thanks, Bob.\n. Please revert this chunk. Is it purely an aesthetic change?\n. Is this chunk necessary? It looks as though it shouldn't have any effect on Linux.\n. Correct. args << \"--enable-64bit\" if MacOS.prefer_64_bit? should be fine.\n. -install_name has no effect on Linux. This chunk should not be necessary. The equivalent option on Linux is -Wl,-soname\n. Is this chunk necessary?\n. Utils::InreplaceError: inreplace failed\nconfig/autoconf.mk:\n  expected replacement of \"-install_name @executable_path/$@ \" with \"-install_name /gsc/btl/linuxbrew/Cellar/nspr/4.11/lib/$@ \"\n. This chunk appears to be unnecessary. --enable-macos-target=0 seems to have no ill effect on Linux.\n. Use instead\nruby\ninreplace \"bzr\", \"#! /usr/bin/env python\", \"#!/usr/bin/python\" if OS.mac?\n. glibc is a Linux-only package, so the if OS.linux? guards are not necessary in this case.\n. Ditto.\n. Stylistically, I'd prefer\nruby\nsystem ENV.cc, \"-I#{include}\", \"test.c\", \"-L#{lib}\", \"-lgmp\", \"-o\", \"test\"\nAs this patch is not specific to Linux, please send it upstream to https://github.com/Homebrew/homebrew\nSee https://github.com/Linuxbrew/linuxbrew/blob/master/CONTRIBUTING.md\n. What is the purpose of this chunk?\n. Please fix it up. Make your changes, then commit them using git commit --amend Library/Formula/glibc.rb and push them using git push --force. Your pull request will be updated.\n. If it's just stylistic, please remove this chunk. Did you figure out what the root cause of the error was?\n. No need to bump the revision for a change of dependencies.\n. Please change this line to\nruby\ndepends_on \"libxslt\" unless OS.mac?`\nand move it to the end of the list of dependencies.\nSee CONTRIBUTING.md\n. My preference is to trust the user's PATH. As a user if I upgrade my Python distribution for example with brew install python, I'd prefer that installed packages started using it.\n. Use instead\nruby\nENV.prepend_path \"PATH\", \"/System/Library/Frameworks/Python.framework/Versions/Current/bin\" if OS.mac?\n. In fact, leave this line untouched as it causes no harm on Linux. ENV.prepend_path checks whether the specified directory exists.\n. How about\nruby\nargs << \"--enable-kernel=#{`uname -r | sed 's/-.*//'`}\" if build.with? \"current-kernel\"\n. What does uname -r look like on a non-distribution kernel? If it's simply 3.7.5, that will also work with my suggestion.\n. To keep the patch for Linuxbrew small, please use\n``` ruby\ndef configure_args; %W[\n\u2026\n{\"no-ssl2\" if build.without?(\"ssl2\")}\n\u2026\n]\nend\n```\n. Please change this line to\nruby\ndepends_on \"libffi\" unless OS.mac?\n. Also please report the error message that you see without this patch. brew gist-logs ansible is helpful.\n. Please remove this chunk of the patch if it has no purpose.\n. Please leave this line as is.\n. Use\nruby\nENV[\"GOOS\"] = OS::NAME\n. Please post brew gist-logs mercurial without this patch applied to report the error message.\nUse instead\nruby\ndepends_on \"python\" unless OS.mac?\n. Please either remove this chunk or send it upstream to Homebrew, as it's not specific to Linux.\n. Please include a log of the failed build without your patch using brew gist-logs coreutils.\n. Please remove this chunk. See comment in #829.\n. ```\n./bootstrap: line 221: gperf: command not found\n./bootstrap: Error: 'gperf' not found\n./bootstrap: See README-prereq for how to get the prerequisite programs\n```\nhttps://gist.github.com/maxim-belkin/1600f4414a8d0c9f4c99#file-01-bootstrap-L5-L8\n. Please change this line to\nruby\ndepends_on \"homebrew/dupes/gperf\" => :build unless OS.mac?\n. I cannot reproduce this error. Does this issue affect only HEAD?\n. Yes. system \"./bootstrap\" if build.head?\nruby\ndepends_on \"homebrew/dupes/gperf\" => :build if build.head? && !OS.mac?\n. My mistake. Yes, that's correct.\nruby\ndepends_on \"homebrew/dupes/gperf\" => :build unless OS.mac?\n. Please remove these changes as it's not relevant to this particular PR.\n. Please change this to homebrew/dupes/krb5. Is it only a build time dependency? The libraries aren't needed at run time?\n. Please change this to\nruby\nENV[\"XC_OS\"] = OS::NAME\n. This chunk isn't quite right for Mac, because zlib on Mac doesn't require that CLT be installed.\nPlease remove this chunk (both lines).\n. Please change this chunk to\n```\n{\"--with-zlib=/usr\" if OS.mac?}\n``\n. I haven't been bumpingrevision` for Linuxbrew. I keep the revision numbers in sync with Homebrew.\n. Yep. Sure was. Thanks for catching my mistake, Bob.\n. Please change this to\nruby\npatch do\n\u2026\nend if OS.mac?\n. Was this line omitted intentionally from the Linux section? Why not include it?\n. Change this line to\nruby\nbin.install real_buildpath/\"_output/local/bin/#{OS::NAME}/#{arch}/openshift\"\n. Please remove this line.\n. Use instead\nruby\nbin.install \"bin/#{OS::NAME.capitalize}_Release/fibjs\"\n. Try instead:\nruby\n\"env['ENV']['PATH']    = '#{HOMEBREW_PREFIX}/bin:/usr/local/bin:/opt/bin:/bin:/usr/bin'\"\n. Why --disable-util?\n. Did you intend to compile this test as well?\n. Please add\n``` ruby\ntag \"linuxbrew\"\n```\nI use this comment for formula that are present in Linuxbrew but not in Homebrew.\n. Try #{Hardware::CPU.bits if OS.linux?} or just dropping the .to_s (it shouldn't be necessary, I think).\n. Please change this to if OS.mac?\n. Ditto.\n. Ditto.\n. Please change to if OS.mac?\n. Ditto.\n. Is it definitely a :build dependency and not also a run-time dependency?\n. It is a run-time dependency also.\n$ ldd /home/sjackman/.linuxbrew/Cellar/libmetalink/0.1.3/lib/libmetalink.so\n    linux-vdso.so.1 (0x00007fffc8b5c000)\n    libxml2.so.2 => /home/sjackman/.linuxbrew/lib/libxml2.so.2 (0x00002ba89cc04000)\n\u2026\n. Are you sure this is a :build dependency and not also a run-time dependency?\n. Is this line necessary? Please post a gist of how it fails without this line.\n. > Update 2:\n\nI was able to successfully build curl with GSSAPI support without the change introduced on line 85.\nIf someone desires to use system's gssapi, then change on line 85 has to go. But I lean towards keeping that change.\n. It is a run-time dependency.\n\nlibkrb5.so.3 => [Linuxbrew]/lib/libkrb5.so.3 (0x00007ffa247b0000)\n. Great idea.\n. Use\nruby\nversion \"7\"\n. A hash table could be used here rather than a case statement.\n. ldconfig shouldn't be necessary. Linuxbrew uses RPATH rather than ld.so.conf.\n. What's the purpose of these two options, -DFUSE_USE_VERSION=26 and -D_FILE_OFFSET_BITS=64?\nCan they be omitted?\n. Unfortunately * doesn't work in the middle of a call, only at the end, with older versions of Ruby. Instead of using temporary variables, expand them inline.\n. You can add line breaks after the commas.\n. Can you change this to: (untested)\nruby\nsys_interpreter = [\"/lib64/ld-linux-x86-64.so.2\", \"/lib/ld-linux.so.3\", \"/lib/ld-linux.so.2\"].find do |s|\n        Pathname.new(s).executable?\nend\n. The ffi formula installs ffi.h in a subdirectory, which seems to be the default behaviour of libffi.\n$ brew list libffi |grep ffi.h\n/gsc/btl/linuxbrew/Cellar/libffi/3.0.13/lib/libffi-3.0.13/include/ffi.h\n$ ls `brew --prefix libffi`/lib/libffi-3.0.13/include\nffi.h  ffitarget.h\n. Ah, I see. I didn't realize that the Python resources are installed in the order that they're listed in this file by magics later on. Sorry for my confusing comment.\n. > I've made the change to use unless OS.mac?\nI don't see this change yet. You can update your PR with brew push --force\n. Very minor point, but please move this line up to line 25 right after the ] so it's as close as possible to its original location.\n. Change else to elsif OS.linux?\n. Could you please change \"linux\" to OS::NAME? Sorry I didn't catch this before.\n. Please remove extraneous changes, like this blank line.\n. Linuxbrew attempts to keep compatibility with Mac. Please change this line to (unttested):\nruby\n(\"--darwin-deployment-version-osx=#{MacOS.version}\" if OS.mac?),\n. To maintain compatibility with Mac,\nruby\nos = OS.mac? : \"macosx\" : OS::NAME\nOS::NAME has either the value \"darwin\" on Mac or \"linux\" on Linux.\nThen change\nruby\n\"#{build}/swift-macosx-x86_64/bin/swift\",\nto\nruby\n\"#{build}/swift-#{os}-x86_64/bin/swift\",\n. This should be unless OS.mac? rather than OS.linux?\n. This should be unless OS.mac? rather than OS.linux?\n. Build dependencies that are provided by Mac OS are unless OS.mac?. Same for disabling code and patches that are specific to Mac OS. Adding code that fixes a bug that's unique to Linux but doesn't apply to Mac OS would use if OS.linux?.\n. Please move this line back up where it was between --install-prefix and --build-jobs.\n. Please change this line to:\nruby\nos = OS.mac? ? \"macosx\" : OS::NAME\n. Please place the unless OS.mac? deps at the end of the list.\n. In this I would tend to use an if block rather than suffix style if.\nruby\nif OS.mac?\n    ENV.append \"CFLAGS\", \"-arch #{MacOS.preferred_arch}\"\n    ENV.append \"LDFLAGS\", \"-arch #{MacOS.preferred_arch}\"\n    ENV.append \"CPPFLAGS\", \"-I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers\"\nend\n. Each line has to be modified anyway, so there's no harm in also changing the formatting.\n. Do you know why :cxx11 isn't needed on Mac OS? Is it because it's enabled by default on all the most recent XCode?\n. Just for style, try (untested)\nruby\nif ENV.key?(\"XDG_DATA_DIRS\") &&\n    !ENV[\"XDG_DATA_DIRS\"].split(File::PATH_SEPARATOR).include?(HOMEBREW_PREFIX/\"share\")\n  \"...\"\nend\n. Please remove this chunk. New versions are added upstream by Homebrew/homebrew.\n. Is this chunk necessary? It looks to be redirected automatically. Feel free to send this chunk upstream to Homebrew/homebrew and remove it here.\n. This chunk is good. Thanks!\n. Please submit this chunk upstream to Homebrew/homebrew. See Contributing to Linuxbrew\n\nLinuxbrew is a fork of Homebrew. Homebrew is merged into Linuxbrew roughly once per week. To contribute a new formula or a new version of an existing formula, please submit your pull request to Homebrew rather than to Linuxbrew. Patches to fix issues that you have reproduced on both Linuxbrew and Homebrew should be sent to Homebrew. Please send your pull request to Linuxbrew if you are in doubt.\n. Please report the error message that you see without ENV.deparallelize\n. Please use\n\nruby\npatch do\n  url \"https://patch-diff.githubusercontent.com/raw/telmich/gpm/pull/14.patch\"\n  sha256 \"fix me\"\nend\n. Please add\n``` ruby\ntag \"linuxbrew\"\n```\n. Unless this formula also compiles correctly on Mac OS and you can test it, in which case send it upstream to Homebrew-core!\n. Please change this to:\nruby\ndepends_on \"libgpm\" unless OS.mac?\n. Please change this to\nruby\ndepends_on \"pcre\" => [(\"cxx11\" unless OS.mac?)].compact\n. ",
    "MikeMcQuaid": "Perhaps made a pull request to amend the README? You shouldn't need to set HOMEBREW_PREFIX. @sjackman Would be good to fix the need to change HOMEBREW_CACHE and the gcc/g++ symlink.\n. I'd recommend the second in the short term and third in the long term.\n. @sjackman Updating the README might not be a bad call if you can be bothered.\n. Sure. I guess my point was if you put even that \"Linux distro and C compiler\" and detail build-essential then more people will be able to a) contribute and b) improve the README. Happy to give it a go myself later.\n. @scicalculator Issues like this would be best answered with pull requests if possible.\n. Sure. I think if there are non-invasive patches to Homebrew that make it work they'd be accepted. However instance_variable_defined? seems a pretty big problem here. Stating 1.8.6 as required in the README (and making a pull request to edit the README) would be great if you can!\n. Arguably HOMEBREW_CACHE should just have a different default on Linux.\n. > There is a single base directory relative to which user-specific non-essential (cached) data should be written. This directory is defined by the environment variable $XDG_CACHE_HOME.\n\n$XDG_CACHE_HOME defines the base directory relative to which user specific non-essential data files should be stored. If $XDG_CACHE_HOME is either not set or empty, a default equal to $HOME/.cache should be used.\nhttp://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\nI'd suggest using the env if it's there otherwise defaulting to ~/.cache/homebrew\n. Typically they are user or environment set. Worth respecting them as they are so easy to do.\n. This is something for the wrapper script to do I think.\n. Well, I think we'd allow these type of things to be user customisable with environment variables so if you implemented that the wrapper script could simply set its own defaults. Regardless the if/else approach won't really work unfortunately for getting merged up; linux/global may do.\n. You need m4 installed.\n. @sjackman Really there should be a either requirement or code in Linuxbrew to check the existence of this stuff.\n. I think this should be done in reverse; add a requirement or other code somewhere in Linuxbrew (and Winbrew) which contains dependencies that don't come with those systems to match them with what comes with OSX. OSX will always be the primary platform so it doesn't make sense to add such things to the primarily OSX autoconf.\n. Seems reasonable but probably don't need it upstream in Homebrew (unless broken there).\n. That's OK with me.\n. Thanks @sjackman!\n. Still getting these.\n. Gist of the source: https://gist.github.com/mikemcquaid/01e7e009a3446deda275\n. Thanks!\n. Java is installed regardless.\n. > @mikemcquaid Any plan to deprecate Homebrew in favour of Linuxbrew?\n:wink: :trollface: \n. This is a Linux-specific fix because libxml2 is installed by default on OS X. I'd rather if Linuxbrew didn't push these things upstream unless you're sure they're misplaced in Linuxbrew; I'm maybe wrong but it feels like lately there's been more PRs being directed to us that shouldn't be.\n. @sjackman You now have rights to add/remove people from the @Homebrew/linux team.\n. Note we can redirect the organisation and all repo clones and API calls will be automatically updated to the new location.\n. > Beside, it may cause unnecessary confusion to the existed Linuxbrew users. If helps, README should be enough to clarify for new users.\nI don't know how it'll cause any confusion at all if there's an automatic redirect. I think it's more confusing currently.\nLinuxbrew and Homebrew have completely different maintainers and focuses. I think having Linuxbrew in the Homebrew organisation encourages the OS.linux? stuff which is a bad code smell.\n. They aren't the same project because it adds a huge overhead on Homebrew maintainers to verify things work on Linux and the use-case on Linux is a lot more niche (as it already provides good, system package managers).\n. To repeat: I don't believe splitting Linuxbrew will affect users or development in any way other than it being less affiliated with Homebrew.\n. This comment is an(other) example of why I'd like to see more distance between the projects: https://github.com/Homebrew/homebrew/commit/278337dcaa346911306d5e63b72522ad0d4570d8#commitcomment-14391539\n. @ahundt To ask them to be merged is to ask the people who spend significant amounts of time working on Homebrew to spend more time testing all their changes on Linux for a project with (at most) 1/10th of the users for an OS they don't use which already provides a system package manager.\n. That's been a plan for years but it'll take a long time to get there and still won't address the issue that Linuxbrew has large numbers of formulae that are broken on Linux.\n. @sjackman Please shout when you are no longer travelling.\n. @sjackman Can you give your thoughts on the above? Thanks.\n. @sjackman We keep getting Linuxbrew issues filed on Homebrew, it doesn't have enough maintainers or a focus on quality (e.g. you fork Homebrew's formulae many of which don't work). This all reflects badly on Homebrew and, honestly, Linuxbrew maybe benefits from being part of the Homebrew ecosystem but it now detracts from Homebrew. If it had it's own organisation it can sink or swim as an independent project and you can have less oversight. If not, there's a bunch of short-term changes I'd like to see relating to the above for it to stay here. I was the person who migrated Homebrew to the organisation from mxcl/homebrew and it's completely transparent to users. That said, I'd be willing to do the work to ensure it's the same for Linuxbrew.\n. > I don't think that moving Linuxbrew to its own organization is going to resolve the matter of users submitting issues to the wrong project. I am keen to hear what short-term changes you think could improve the situation.\nI think it will. There's been confusion on Twitter about it being an \"official\" Homebrew project and the URL points to that being the case.\n\nI'm sorry to hear that you think Linuxbrew detracts from Homebrew. I don't believe that's a fair assessment. Linuxbrew has just about two thousand stars on GitHub. That's a significant number of people who have found the project interesting or useful.\n\nI don't think GitHub stars is an objective measurement. If someone found it useful and then stopped using it do you think they would go back and unstar the project?\n\nI personally find it very useful to be able to use the same package manager on both Mac and Linux. That's a feature that's quite unique to Homebrew/Linuxbrew.\n\nThis is exactly my point: it's not the same package manager. It's an attempt to port Homebrew to OS X.\n\nI have a keen interest in quality, and I do as best as I can within my time constraints. I'm a father of two young kids and a PhD student. I agree that Linuxbrew does not have enough maintainers. I need more help.\n\nI appreciate that; we're all time constrained. That said, I really think Linuxbrew has been around long enough that it should sink or swim on it's own merits in its own organisation. As to quality: you should whitelist rather than blacklist formulae that don't work, move away from OS.linux?/OS.mac? checks in both core code and formulae code and work towards better abstractions.\nI don't think we're going to come to mutual agreement here and it's obviously I feel fairly strongly about this; after all I moved it into the Homebrew organisation originally so I feel this was ultimately my mistake and want to rectify it by helping the transition. Are there any @Homebrew/maintainers who would actively block my moving Linuxbrew into a separate organisation?\n. Thanks @DomT4, said it better than I could.\n. > if Linuxbrew starts using more Travis workers to cover more platforms through clever (ab)use of docker, that would degrade the Homebrew contribution and maintainership experience unless we complete this migration. (It's possible I could be wrong because e.g. maybe OS X and Linux workers are tallied independently\nFrom what I can tell: yes, this is the case and I think it's a good enough reason to move to a new org by itself.\n\nor because we might be able to get Travis support to smile upon the Homebrew organization.\n\nI tried, failed here.\n. @sjackman Thanks Sean, I appreciate it. Can you give me owner rights to https://github.com/linuxbrew and I'll start doing some migration tests.\nTo be clear (as I perhaps wasn't before): Homebrew (and me particularly) are working on various things without Linuxbrew specifically in mind but with cross-platform compatibility. In 2016 we hope to have (some) bottles for OS X generated and uploaded on Travis CI and core code and formulae separated into separate repositories. When we've done that separation it'll mean it'll be much easier to have working and keep working on Linux (and perhaps other platforms) and move towards stable core releases rather than a rolling release process. This will make it easy for Linuxbrew to either just be a whitelisted Linux tap and installer for Homebrew which more-or-less matches the current maintenance patterns but without the overhead of running a full fork.\n. @sjackman No worries, shout when you're back.\n. @sjackman. Done! I added @tseemann to the team, gave the @Linuxbrew/core team admin access and ensured the redirects were setup and working properly. Thanks for your patience and support here.\n. @sjackman Done!\n. No idea, sorry. I'd recommend using Ruby 1.8 or Ruby 2.0 which are the versions we use.\n. It is not, it's a separate project.\n. There's nothing to stop Linuxbrew from applying separately but (as the person who drove the paperwork to get Homebrew to join): I'm not convinced it's worth the effort for the project at this time.\n. Might want to make this use OS detection instead of being an option.\n. ",
    "funnell": "These instructions don't work for me. This is what I get when trying to install ruby:\n$ brew install ruby\nError: Function not implemented - /share/lustre/tfunnell/linuxbrew/Library/Caches/Homebrew/Formula/ruby.brewing\n. ",
    "jacknagel": "This is an issue on all platforms. In Ruby 2.0, all file descriptors (except 0, 1, and 2) are marked close-on-exec by default. Homebrew uses a pipe to pass exceptions between the build process and the main process, but in Ruby 2.0 this descriptor is closed in the build process.\nSo we either need to pass this fd hash as the last argument to exec on Ruby 2 (which means building up the args as an array because Ruby 1.8 doesn't accept this argument) or unset FD_CLOEXEC on the descriptor before exec'ing.\n. Looking into it, it doesn't appear it's possible to unset this flag (even from C, let alone ruby). So we'll have to go with the former.\nI'll work up a patch later.\n. Patch: https://github.com/jacknagel/homebrew/compare/cloexec\n. I merged the patch into core.\n. Can you run with -d so we can see the backtrace?\n. Ah, the problem is specific to the ace formula, which looks highly customized for os x.\n. (I don't have time to make a version of it that works on Linux, so some else will have to).\n. That text comes from libtool, not Homebrew.\n. Since Ruby 1.8 treats strings (and thus the contents of an IO object) as a bag of bytes, we can preserve the existing behavior by setting the external encoding of the file, and the encodings of the pattern and replacement, to ASCII-8BIT. It's probably a two or three line patch.\nIf we ever actually need to replace or insert a character that cannot be represented in an ASCII-compatible encoding, then we can work on adding support for specifying encodings on a per-file basis. But I don't see a need to complicate things at the formula-level yet.\n. No problem, let me know if you have any questions.\n. I believe that will work on 1.8, though it could also be written as:\nrb\nscheme = %w[full medium small basic minimal].find { |x| build.with? x } || \"small\"\nwhich is slightly more idiomatic, but it's up to you of course.\n. I would need more detailed build output and some steps to reproduce, otherwise I can only guess.\n. I can't reproduce this using upstream Homebrew. I don't have a linux VM or anything to test on, but if someone can give me access to such a system I'd be happy to investigate further.\n. On a fresh Ubuntu install, I see this:\n$ brew install -v bug264.rb \n==> Installing dependencies for bug264: pkg-config, makedepend\n==> Installing bug264 dependency: pkg-config\n==> Downloading http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz\n. What version of ruby? Can you ruby -e\"require 'minitest'\"?\n. Please do not do that. It will not get you help faster.\n. Fixed upstream in Homebrew/homebrew@43c634ffc2ee0514260cdf6f050a6e8be4035240\n. Also, we will likely be dropping 1.8.7 support soon after 10.11 is released, as that will mark three OS X releases that ship Ruby 2.0+, and we'd like to start taking advantage of it.\n. I've removed them upstream. Thanks!\n. This isn't needed. We only do it for OS::Mac because we support a top-level MacOS constant for compatibility reasons. In fact this whole file is unnecessary for this PR to work.\n. Again, not needed, we only do it in OS::Mac because we support the X11 and XQuartz constants.\n. os/mac/xquartz is required up front by os/mac, and os/mac is required in a bunch of places in core. Since that structure doesn't exist for Linux yet this is necessary.\n. If these changes are going to make their way into core, I'd prefer this all be done inline, i.e. get rid of the OS::whatever.message_missing_dependency and just drop the strings directly in here.\n. ",
    "janckerchen": "oh!  my ruby version is ruby20,  I install it just for confirm linux brew works well,  ruby20 is default version in this brach.  I uninstall it now and restore my default ruby19,  all errors disappear.\nBut life is not easy, right?  here is another  gift for you~,  https://github.com/Homebrew/linuxbrew/issues/6  \"brew install ace\"  failed  for other reason.\nI close this issue.\n. I got it!\n. brew install ace -d\n$ brew install ace -d\n/home/deploy/linuxbrew/Library/brew.rb: loading /home/deploy/linuxbrew/Library/Formula/ace.rb\nWarning: Xcode not installed\nMost stuff needs Xcode to build: http://developer.apple.com/xcode/\n==> Downloading http://download.dre.vanderbilt.edu/previous_versions/ACE-6.0.3.tar.bz2\nAlready downloaded: /home/deploy/linuxbrew/Library/Caches/Homebrew/ace-6.0.3.tar.bz2\nWarning: MD5 support is deprecated and will be removed in a future version.\nPlease switch this formula to SHA1 or SHA256.\n/home/deploy/linuxbrew/Library/Formula/ace.rb:16:in ``'\nErrno::ENOENT: No such file or directory - sw_vers -productVersion\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\nChoose an action: 3\n/home/deploy/linuxbrew/Library/Formula/ace.rb:16:in ``'\n/home/deploy/linuxbrew/Library/Formula/ace.rb:16:in `install'\n/home/deploy/linuxbrew/Library/Homebrew/build.rb:142:in `block in install'\n/home/deploy/linuxbrew/Library/Homebrew/formula.rb:250:in `block in brew'\n/home/deploy/linuxbrew/Library/Homebrew/formula.rb:635:in `block in stage'\n/home/deploy/linuxbrew/Library/Homebrew/extend/fileutils.rb:21:in `mktemp'\n/home/deploy/linuxbrew/Library/Homebrew/formula.rb:631:in `stage'\n/home/deploy/linuxbrew/Library/Homebrew/formula.rb:245:in `brew'\n/home/deploy/linuxbrew/Library/Homebrew/build.rb:121:in `install'\n/home/deploy/linuxbrew/Library/Homebrew/build.rb:43:in `main'\n/home/deploy/linuxbrew/Library/Homebrew/build.rb:12:in `block in <top (required)>'\n. ",
    "aktau": "Ok forgot to mention that I also had to adjust ENV.rb to look for gcc and g++ instead of gcc-4.2 and g++-4.2. Seems to work nicely.\n. Actually, we could also just set it as a flag to gcc if and when that compiler is used, to obviate the need for patchelf:\nLDFLAGS += -Wl,-rpath,/path/to/homebrew/lib\nActually I'm not entirely sure if the -Wl, is necessary when it's put in LDFLAGS...\n. Just in case anyone was still wondering why changing the LD_LIBRARY_PATH is not necessarily the best solution on linux (this is one of the less subtle issues):\n\n. > I'd appreciate your help if you could also test brew install glibc.\nDon't have any systems I can safely mess up at the moment.\n\nI'm using this patch to implement portable bottles on Linux. I've tested building a bottle on Ubuntu 14.04 and running it on CentOS 5.10, and it works! I'm pretty happy with that result.\n\nPretty great, but it's still risky unless all libraries have been source from homebrew's own I guess. I like the rpath fix much more for not having to mess with my LD_LIBRARY_PATH. I have no problem compiling my own stuff (little need for bottles).\nCould you details a few steps for how I would go about testing this? I'm not a homebrew/ruby expert by any stretch of the imagination.\n. Apparently it didn't work:\n``` bash\n\u279c  .linuxbrew git:(34b4c36) cd\n\u279c  ~  brew install ag\n==> Installing dependencies for the_silver_searcher: autoconf, automake, pkg-config, pcre, xz\n==> Installing the_silver_searcher dependency: autoconf\n==> Downloading http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/autoconf/2.69\n==> make install\n==> Caveats\nThis formula is keg-only, so it was not symlinked into /home/player/.linuxbrew.\nXcode provides this software prior to version 4.3.\n==> Summary\n/home/player/.linuxbrew/Cellar/autoconf/2.69: 66 files, 3.2M, built in 11 seconds\n==> Installing the_silver_searcher dependency: automake\n==> Downloading http://ftpmirror.gnu.org/automake/automake-1.14.1.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/automake/1.14.1\n==> make install\n==> Caveats\nThis formula is keg-only, so it was not symlinked into /home/player/.linuxbrew.\nXcode provides this software prior to version 4.3.\n==> Summary\n/home/player/.linuxbrew/Cellar/automake/1.14.1: 131 files, 3.3M, built in 11 seconds\n==> Installing the_silver_searcher dependency: pkg-config\n==> Downloading http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/pkg-config/0.28 --disable-host-tool --with-internal-glib --with-pc-path=/home/player/.linuxbrew/lib/pkgconfig:/home/player/.linuxbrew/sha\n==> make\n==> make check\n==> make install\n/home/player/.linuxbrew/Cellar/pkg-config/0.28: 10 files, 644K, built in 96 seconds\n==> Installing the_silver_searcher dependency: pcre\n==> Downloading https://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.bz2\n################################################################## 100.0%\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/pcre/8.35 --enable-utf8 --enable-pcre8 --enable-pcre16 --enable-pcre32 --enable-unicode-properties --enable-pcregrep-libz --enable-pcregr\n==> make\n==> make test\n==> make install\n/home/player/.linuxbrew/Cellar/pcre/8.35: 146 files, 5.5M, built in 2.2 minutes\n==> Installing the_silver_searcher dependency: xz\n==> Downloading http://fossies.org/linux/misc/xz-5.0.5.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/xz/5.0.5\n==> make install\n/home/player/.linuxbrew/Cellar/xz/5.0.5: 63 files, 1.7M, built in 30 seconds\n==> Installing the_silver_searcher\n==> Downloading https://github.com/ggreer/the_silver_searcher/archive/0.23.0.tar.gz\n################################################################## 100.0%\n==> Downloading https://github.com/thomasf/the_silver_searcher/commit/867dff8631bc80d760268f653265e4d3caf44f16.diff\n################################################################## 100.0%\n==> Patching\npatching file ag.bashcomp.sh\n==> aclocal -I /home/player/.linuxbrew/share/aclocal\n==> autoconf\n==> autoheader\n==> automake --add-missing\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/the_silver_searcher/0.23.0\n==> make\n==> make install\n==> Caveats\nBash completion has been installed to:\n  /home/player/.linuxbrew/etc/bash_completion.d\n==> Summary\n/home/player/.linuxbrew/Cellar/the_silver_searcher/0.23.0: 8 files, 148K, built in 12 seconds\nYou have new mail.\n\u279c  ~  which ag\n/home/player/.linuxbrew/bin/ag\n\u279c  ~  ag -v\nag: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory\n```\nThis was on a fresh linuxbrew install. Not sure what I did wrong.\n. Reported too soon. I had forgotten to install patchelf. New results: works perfectly!\n``` bash\n\u279c  ~  brew install patchelf\n==> Downloading https://github.com/NixOS/patchelf/archive/0.8.tar.gz\n################################################################## 100.0%\n==> ./bootstrap.sh\n==> ./configure --disable-silent-rules --prefix=/home/player/.linuxbrew/Cellar/patchelf/0.8\n==> make install\n/home/player/.linuxbrew/Cellar/patchelf/0.8: 6 files, 172K, built in 11 seconds\n\u279c  ~  brew remove ag\nUninstalling /home/player/.linuxbrew/Cellar/the_silver_searcher/0.23.0...\n\u279c  ~  brew install ag\n==> Downloading https://github.com/ggreer/the_silver_searcher/archive/0.23.0.tar.gz\nAlready downloaded: /home/player/.cache/Homebrew/the_silver_searcher-0.23.0.tar.gz\n==> Downloading https://github.com/thomasf/the_silver_searcher/commit/867dff8631bc80d760268f653265e4d3caf44f16.diff\nAlready downloaded: /home/player/.cache/Homebrew/the_silver_searcher--patch-09502c60a11658d9a08a6825e78defad96318bd9.diff\n==> Patching\npatching file ag.bashcomp.sh\n==> aclocal -I /home/player/.linuxbrew/share/aclocal\n==> autoconf\n==> autoheader\n==> automake --add-missing\n==> ./configure --prefix=/home/player/.linuxbrew/Cellar/the_silver_searcher/0.23.0\n==> make\n==> make install\n==> Caveats\nBash completion has been installed to:\n  /home/player/.linuxbrew/etc/bash_completion.d\n==> Summary\n/home/player/.linuxbrew/Cellar/the_silver_searcher/0.23.0: 8 files, 152K, built in 8 seconds\n\u279c  ~  ag -v\nERR: What do you want to search for?\n\u279c  ~  which ag\n/home/player/.linuxbrew/bin/ag\n```\n. @sjackman need any more input? It seems to work fine here.\nAbout the only suggestion I'd make is to make it more obvious that patchelf needs to be installed for correct operation without altering LD_LIBRARY_PATH.\nIn fact, if it were up to me, I'd make patchelf mandatory. Linux is not OSX, and I firmly believe patchelf is a superior solution for Linux systems.\n. Very nice :). It's good that there's a fallback to patchelf. Especially when/if there are toolchains that don't have the concept of LDFLAGS but do generate elf binaries that need to dynamically link with something.\n. I'd like to add that after solving the two issues I posted 2 hours ago, I successfully built gcc-4.8, nice!\n. Actually the thing with the RPATH is for running executables and I already made a post about that (in which I mention using patchelf to set the rpath after compilation because the linker might not support setting rpath while linking in an earlier issue: ).\nSee here: https://github.com/Homebrew/linuxbrew/issues/7 \nThis question pertains only to building, in which it is sufficient to just prepend to the LD_LIBRARY_PATH variable only for the building phase. I have this vague recollection that homebrew uses a \"clean\" environment for building so it would be sufficient to just inject the LD_LIBRARY_PATH with the HOMEBREW_LIB folder and Bob's your uncle, no need to mess with the standard library path.\nChanging LD_LIBRARY_PATH systemwide may be good for developers who use projects in-house and have full control over everything installed on the PC's, but for someone who needs their (other) stuff to run on normal debian/ubuntu/fedora/..., this is not such a great thing.\n. > It shouldn't be necessary to set LD_LIBRARY_PATH when building Homebrew packages unless you are you using compiler tools (i.e. binutils and GCC) built by Homebrew. Are you?\nNo, as a matter of fact I was busy trying to build  gcc-4.8 with the stock debian wheezy gcc-4.7. To build gcc-4.8 you need other libraries like (mpfr afaik) and those need yet others. Thankfully, homebrew builds all necessary dependencies. Unthankfully, it doesn't know (by default) where to look for the libraries it just built.\nUnless you start tampering with LD_LIBRARY_PATH or similar that is. Luckily for us in the build phase it's easy to just prepend to LD_LIBRARY_PATH for that run. Which is exactly what I did with my commandline which made the gcc-4.8 compile work:\n``` sh\nmpfr is a requirement of gcc, building it separately\n$ LD_LIBRARY_PATH=/my/homebrew/lib brew install mpfr\nalternatively (but messes up the loader path of the current shell session)\n$ export LD_LIBRARY_PATH=/my/homebrew/lib:$PATH\n$ brew install mpfr\n```\nSo to summarize:\nFor running applications in a safe way that doesn't interfere with the standard OS loading path we still need an agreed upon solution. One that I like a lot is setting the RPATH on every executable produced by homebrew. It's a pretty clean solution.\nFor building applications it's much easier, the LD_LIBRARY_PATH can be altered without fear of messing up the systemwide path, which is what I did to build gcc-4.8.\nWhat do you think? If we solve these things it will become far easier to just install and use homebrew for linux for quite a wide range of software, which I'm eager to see happen...\n. > For what it's worth, it seems that it's only necessary to set LD_LIBRARY_PATH for mpfr because of the make check in the formula: https://github.com/mxcl/homebrew/blob/master/Library/Formula/mpfr.rb#L43\nThat's... unexpected (to me). I really didn't think most of these things would work if they don't even know where $HOMEBREW_PREFIX/lib is.\n\nIf you remove this line, it compiles fine without setting LD_LIBRARY_PATH. Nonetheless, I think I agree with you that brew install should set LD_LIBRARY_PATH to $HOMEBREW_PREFIX/lib.\n\nGreat!\n. Nice, I'm starting to think more and more that the rpath line of thought was a good one. Though it might be that relying on a specific compiler-chain (gcc) or build-tool (cmake, which not every project uses ofcourse) supporting setting the rpath is a bit fragile, so it might make sense to evaluate possibilities of setting the rpath after the fact. What do you reckon?\nI'm also wondering how it might interact with scripts that try to package homebrew-built apps (https://github.com/tmm1/brew2deb) into packages (.deb, .rpm, ...). I'm guessing at the very least that rpath can't hurt. If it's not found, it won't we used, otherwise it will. Can't make the situation worse.\n. > On OS X, the executable can be modified like so: ..\nAwesome! But is it necessary on OSX? I recall using homebrew on my macbook all the time and it works great. Or has the installer secretly changed something LD_LIBRARY_PATH like?\nIt seems indeed more general to change the RPATH after the fact, but perhaps the LLVM linker also supports it, who knows. That would be at least the two big build environments. At any rate, for ELF binaries there appear to be these two (well, three...) options:\nA nice article about it: http://blog.tremily.us/posts/rpath/\n- link time (build-tool dependent): LDFLAGS=-Wl,-rpath=$HOMEBREW_PREFIX/lib,--enable-new-dtags ./configure \u2026\n- after build (build-toold independent): chrpath or patchelf\nI've had success with patchelf as mentioned in my other issue.  It has no big dependencies and can run from everywhere so we could make a homebrew formula for patchelf and have it be installed before anything else. What do you think?\nEDIT: a distinct disadvantage of chrpath is that it doesn't allow one enlarge the rpath. So if there wasn't an rpath to begin with you can't add one. So chrpath is out.\n. Perhaps a combination of several non-foolproof methods and failing/allowing manual override if none of those work?\n. It seems to work fine on linux.\n. I've done so: https://github.com/Homebrew/homebrew/pull/28050\n. @sjackman this has been merged in the main repo, so it's only a merge or rebase away from linuxbrew. Closing.\n. -arch doesn't seem to be specified in the possible link flags for gcc 4.9.1: https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Link-Options.html#Link-Options\nI did find it in some pages referencing OSX: http://mariz.org/blog/2012/06/\nAnother reference from the LLVM pages themselves: http://clang.llvm.org/docs/DriverInternals.html\nCan't find the actual description of the option though.\nSo it should probably be disabled for linux.\n. It seems like the version of make should not be a problem, this page lists make 3.80. And I have:\nbash\n\u279c  Library git:(master) make -v\nGNU Make 3.81\n. The relevant lines from config-ml.in (162 to 166):\n--without-*)\n        withopt=`echo ${option} | sed 's:^--::;s:out::;s:-:_:g'`\n        eval $withopt=no\n        ;;\n  esac\n. A gcc bug report (?) (and patch) that might have something to do with this:\nhttps://gcc.gnu.org/ml/gcc-patches/2014-03/msg00718.html\ndiff of what that patch changed: http://code.metager.de/source/diff/gnu/gcc/config-ml.in?r2=%2Fgnu%2Fgcc%2Fconfig-ml.in%4052fd2e17c7426500a4e47047f6a1ea9d2a889db3&r1=%2Fgnu%2Fgcc%2Fconfig-ml.in%4017b3d2a812c7aab15d23d75634a9306cacd345a1\n. I think it might be an upstream bug, as indicated by the proposed patch (and the fact that it's not present in the 4.9.1 tag on the git repo, but it is present on master).\nThe only thing that puzzles me is why it does build on other linux distros and OSX, and not here...\n. ",
    "themiwi": "The problem discussed here is IMHO actually a bit more complex, and not yet resolved (despite the referenced issue https://github.com/Homebrew/linuxbrew/issues/9 being marked as closed). Quite many libraries are keg-only, and hence dependent binaries must include ${HOMEBREW_PREFIX}/opt/<dep_pkg>/lib in their RPATH. Take for example the fontconfig package, which depends on the freetype package, which in turn depends on libpng. All of them are keg-only. Linking the programs in fontconfig (without any modifications) fails, because libpng16.so.16, required by libfreetype.so.6, cannot be found.\nThe hackish solution is to update every single formula to add -Wl,-rpath,... flags to LDFLAGS for every single dependency, which is frankly quite unmaintainable. However, I don't see how this could be handled automagically right now.\n. Well, of course {home,linux}brew might just do it based on the listed dependencies. Would that be safe?\n. @sjackman It's been a while I used Mac OS, but if I remember correctly, each dylib contains an embedded path (the so-called install_name, something like the SONAME on Linux, but usually it is absolute), and this is then used when linking. Hence, (almost) every binary references its libraries via an absolute path, and thus the issue does not exist. I think you can dump this info using otool -L <somefile> and can be modified using the install_name_tool.\n. @aktau Absolutely, I stumbled across this issue myself just recently (both with ViM and also with GTK+ programs no longer working properly because those got linked).\nFor linuxbrew it probably is almost always a bad idea to link /lib/ and to modify LD_LIBRARY_PATH. But this would require to extend the rpath accordingly.\n. ",
    "mistydemeo": "\nThe hackish solution is to update every single formula to add -Wl,-rpath,... flags to LDFLAGS for every single dependency, which is frankly quite unmaintainable.\n\nDoes linuxbrew use superenv? If so, it wouldn't be difficult to add to flags automatically based on the existing code there.\n. I have these changes made in Tigerbrew for Ruby 1.8.2 already. However, I'm not sure how much it's worth making these changes for Homebrew/Linuxbrew. Tigerbrew is in a situation where changing the Ruby version isn't really practical, and a few features have to be sacrificed to work with such an old Ruby version.\n. Note that on the Mac side there's experimental support for non-Apple compilers which would allow you to set arbitrary GCC versions. For Mac it will be dependent on their being Homebrew-installed but that requirement could be laxed for Linuxbrew. https://github.com/mxcl/homebrew/pull/20251\n. Feel free to hack on the fails_with code that's holding it up from landing in Homebrew core! Once that happens it's a simple merge and tweak to get it into mainline Linuxbrew.\n. @chapmanb You can select a compiler by doing --cc=foo, e.g. --cc=gcc-4.8. For non-Xcode compilers, the compiler has to have been built by Homebrew, however. Linuxbrew might want to customize that behaviour?\n. @sjackman There isn't a way to set it globally. (Was by design, since it's not totally tested on OS X, nor will it work with everything.) So, it does need to be specified every time brew is run. fails_with will choose Homebrew-installed GCCs though.\nYou may want to customize the default_compiler logic for Linuxbrew to select a newer compiler if available though - I do something similar in Tigerbrew, so that gcc-4.2 is picked over gcc-4.0 even if the OS's default is gcc-4.0 (as it was on Xcode 2.5).\n. Can you provide the full logs in a gist?\nsvn is not keg-only - @sjackman, do you know why that would print?\n. @sjackman I merge. Even though I keep core code changes to a minimum, I've found rebasing has been pretty infeasible to keep going longterm and, like you say, brew update doesn't work well without a linear history.\ngit diff and other diffing tools can compare branches regardless of remote, so I don't find that merging makes it too hard to see what's changed, even if the exact set of commits isn't as easily isolated.\n. I think the better solution for Linuxbrew would simply be to specify the dependencies in the formulae downstream, like I do in Tigerbrew when necessary. I add a depends_on 'homebrew/dupes/m4' if MacOS.version < :leopard in autoconf, for example.\n. Yes, given that Mavericks ships with ruby 2.0, we're going to have to care about encoding sooner or later.\n. @sjackman This is something we explicitly disallow in Homebrew, and I don't think we'd ever officially add support for. Sorry!\n. This is Linuxbrew, is that really an option for Linux users?\n. You can also try changing the permissions, and may not need to reinstall.\nsh\nsudo chmod -R $USER:admin $(brew --prefix)\n. A couple Mac-specific things will need to be changed in the formula to work on Linux:\n- The make target needs to be changed from \"macosx\": https://github.com/Homebrew/homebrew/blob/master/Library/Formula/lua.rb#L68\n- The Mac-specific patch should be removed: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/lua.rb#L26-L28\n. Can you please post the detailed build logs from brew gist-logs pkg-config --config --doctor?\nYou're right, though, that it sounds like the iconv header (and libraries?) in /usr/local are the problem. Unfortunately, there likely isn't really a workaround for this other than removing that specific iconv install. (This is the reason Homebrew-provided software that clashes with system libraries is installed to a private prefix, not publicly.)\n. Oh, sorry, missed that this was Linuxbrew! I'll let @sjackman reply to that.\n. Do you use Linuxbrew at all? It looks like your installs of Python and setuptools were manual?\n. This issue tracker is for Linuxbrew, which is a package manager - kind of like yum.\nIf you're not having problems with Linuxbrew I'd suggest getting help somewhere else. Have you tried asking at Stack Overflow?\n. Sorry, wrong issue.\n. Disabling gitk by default is a reasonable compromise, I think?\n. Yeah, judging from the makefile, it appears to be solely for providing gitk:\n``` make\nDefine NO_TCLTK if you do not want Tcl/Tk GUI.\n\nThe TCL_PATH variable governs the location of the Tcl interpreter\nused to optimize git-gui for your system.  Only used if NO_TCLTK\nis not set.  Defaults to the bare 'tclsh'.\n\nThe TCLTK_PATH variable governs the location of the Tcl/Tk interpreter.\nIf not set it defaults to the bare 'wish'. If it is set to the empty\nstring then NO_TCLTK will be forced (this is used by configure script).\n``\n. Can you provide the output ofbrew gist-logs tcl-tk` please?\n. From @phorust on June 26, 2015 2:27\nUnfortunately looks like I'm running into another error\n~  \u279c  https_proxy=proxyout:8080 brew gist-logs tcl-tk\nError: getaddrinfo: Name or service not known\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:879:in `initialize'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:879:in `open'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:879:in `block in connect'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/timeout.rb:67:in `timeout'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:878:in `connect'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:863:in `do_start'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:852:in `start'\n/home/phorust/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/net/http.rb:1369:in `request'\n/home/phorust/.linuxbrew/Library/Homebrew/cmd/gist-logs.rb:115:in `post'\n/home/phorust/.linuxbrew/Library/Homebrew/cmd/gist-logs.rb:72:in `create_gist'\n/home/phorust/.linuxbrew/Library/Homebrew/cmd/gist-logs.rb:24:in `gistify_logs'\n/home/phorust/.linuxbrew/Library/Homebrew/cmd/gist-logs.rb:140:in `gist_logs'\n/home/phorust/.linuxbrew/Library/brew.rb:140:in `<main>'\n. Can you upload all of the logs from ~/.cache/Homebrew/Logs/tcl-tk to gist.github.com and provide the link? Also provide your brew --config and brew doctor output, please.\n. Ping.\n. From @phorust on June 30, 2015 22:23\nPossibly related issue: Homebrew/homebrew/issues/41132\nLogs from ~/.cache/Homebrew/Logs/tcl-tk\nhttps://gist.github.com/phorust/6c64323dee459c45739a\nhttps://gist.github.com/phorust/4f637440595a119b4523\nhttps://gist.github.com/phorust/676a823e1c454c94c8d5\nhttps://gist.github.com/phorust/d7ae9fbf27194fdd2e4b\nhttps://gist.github.com/phorust/47d8aef9db79d4508b88\nhttps://gist.github.com/phorust/1651715c1592843640a7\nOutput of brew --config:\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: c30e5ce25b182daffdb3e1123dc1a6652019cc27\nLast commit: 3 hours ago\nHOMEBREW_PREFIX: /home/phorust/.linuxbrew\nHOMEBREW_CELLAR: /home/phorust/.linuxbrew/Cellar\nCPU: 32-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 2.1.0 => /home/phorust/.rvm/rubies/ruby-2.1.0/bin/ruby\nPerl: /usr/bin/perl\nPython: /usr/local/bin/python => /usr/bin/python\nRuby: /home/phorust/.rvm/rubies/ruby-2.1.0/bin/ruby\nJava: 1.8.0_25\nOutput of brew doctor:\n``\nWarning: \"config\" scripts exist outside your system or Homebrew directories../configure` scripts often look for *-config scripts to determine if\nsoftware packages are installed, and what additional flags to use when\ncompiling and linking.\nHaving additional scripts in your path can confuse software installed via\nHomebrew if the config script overrides a system or Homebrew provided\nscript of the same name. We found the following \"config\" scripts:\n/opt/local/bin/proxyout-config\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: Unbrewed header files were found in /usr/local/include.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\nUnexpected header files:\n    /usr/local/include/libgimli.h\n    /usr/local/include/libavutil/aes.h\n    /usr/local/include/libavutil/bswap.h\n    /usr/local/include/libavutil/pixfmt.h\n    /usr/local/include/libavutil/log.h\n    /usr/local/include/libavutil/imgutils.h\n    /usr/local/include/libavutil/intreadwrite.h\n    /usr/local/include/libavutil/avutil.h\n    /usr/local/include/libavutil/dict.h\n    /usr/local/include/libavutil/file.h\n    /usr/local/include/libavutil/samplefmt.h\n    /usr/local/include/libavutil/eval.h\n    /usr/local/include/libavutil/sha.h\n    /usr/local/include/libavutil/error.h\n    /usr/local/include/libavutil/common.h\n    /usr/local/include/libavutil/random_seed.h\n    /usr/local/include/libavutil/intfloat_readwrite.h\n    /usr/local/include/libavutil/crc.h\n    /usr/local/include/libavutil/md5.h\n    /usr/local/include/libavutil/base64.h\n    /usr/local/include/libavutil/pixdesc.h\n    /usr/local/include/libavutil/avstring.h\n    /usr/local/include/libavutil/lfg.h\n    /usr/local/include/libavutil/rational.h\n    /usr/local/include/libavutil/avassert.h\n    /usr/local/include/libavutil/attributes.h\n    /usr/local/include/libavutil/parseutils.h\n    /usr/local/include/libavutil/avconfig.h\n    /usr/local/include/libavutil/cpu.h\n    /usr/local/include/libavutil/mathematics.h\n    /usr/local/include/libavutil/fifo.h\n    /usr/local/include/libavutil/intfloat.h\n    /usr/local/include/libavutil/adler32.h\n    /usr/local/include/libavutil/mem.h\n    /usr/local/include/libavutil/lzo.h\n    /usr/local/include/libavutil/opt.h\n    /usr/local/include/libavutil/audioconvert.h\n    /usr/local/include/clapack.h\n    /usr/local/include/evdns.h\n    /usr/local/include/cblas.h\n    /usr/local/include/event2/rpc_compat.h\n    /usr/local/include/event2/bufferevent_compat.h\n    /usr/local/include/event2/bufferevent_ssl.h\n    /usr/local/include/event2/listener.h\n    /usr/local/include/event2/rpc.h\n    /usr/local/include/event2/bufferevent.h\n    /usr/local/include/event2/buffer_compat.h\n    /usr/local/include/event2/event_compat.h\n    /usr/local/include/event2/buffer.h\n    /usr/local/include/event2/http_struct.h\n    /usr/local/include/event2/dns_struct.h\n    /usr/local/include/event2/event.h\n    /usr/local/include/event2/thread.h\n    /usr/local/include/event2/dns_compat.h\n    /usr/local/include/event2/event_struct.h\n    /usr/local/include/event2/tag_compat.h\n    /usr/local/include/event2/dns.h\n    /usr/local/include/event2/bufferevent_struct.h\n    /usr/local/include/event2/keyvalq_struct.h\n    /usr/local/include/event2/rpc_struct.h\n    /usr/local/include/event2/http.h\n    /usr/local/include/event2/tag.h\n    /usr/local/include/event2/http_compat.h\n    /usr/local/include/event2/util.h\n    /usr/local/include/event2/event-config.h\n    /usr/local/include/atlas/atlas_dGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_zmvn_L2.h\n    /usr/local/include/atlas/atlas_dGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_cNCmm.h\n    /usr/local/include/atlas/atlas_sr2kernels.h\n    /usr/local/include/atlas/atlas_dr1_L2.h\n    /usr/local/include/atlas/atlas_cr2_L2.h\n    /usr/local/include/atlas/atlas_cmvt_L2.h\n    /usr/local/include/atlas/atlas_dtGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_cr1_L2.h\n    /usr/local/include/atlas/atlas_ssyr2.h\n    /usr/local/include/atlas/atlas_smvn.h\n    /usr/local/include/atlas/atlas_taffinity.h\n    /usr/local/include/atlas/atlas_dsyr2.h\n    /usr/local/include/atlas/atlas_zmvn.h\n    /usr/local/include/atlas/atlas_csyr.h\n    /usr/local/include/atlas/atlas_cGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_ssyrNX.h\n    /usr/local/include/atlas/atlas_zsyr.h\n    /usr/local/include/atlas/atlas_dr1_L1.h\n    /usr/local/include/atlas/atlas_buildinfo.h\n    /usr/local/include/atlas/atlas_zmvt_L2.h\n    /usr/local/include/atlas/atlas_zr2_L1.h\n    /usr/local/include/atlas/atlas_dsysinfo.h\n    /usr/local/include/atlas/atlas_smvt_L2.h\n    /usr/local/include/atlas/atlas_dsyrNX.h\n    /usr/local/include/atlas/atlas_zmvtkernels.h\n    /usr/local/include/atlas/atlas_cmvt.h\n    /usr/local/include/atlas/atlas_dmvn_L1.h\n    /usr/local/include/atlas/atlas_ztGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_zGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_zsyr_L1.h\n    /usr/local/include/atlas/atlas_zr1_L2.h\n    /usr/local/include/atlas/atlas_dsyr2_L2.h\n    /usr/local/include/atlas/cmm.h\n    /usr/local/include/atlas/atlas_dtrsmXover.h\n    /usr/local/include/atlas/atlas_zGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_zr1kernels.h\n    /usr/local/include/atlas/atlas_dsyr_L1.h\n    /usr/local/include/atlas/atlas_cGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_ztGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_cacheedge.h\n    /usr/local/include/atlas/atlas_dsyr2_L1.h\n    /usr/local/include/atlas/atlas_ssyr2NX.h\n    /usr/local/include/atlas/atlas_tsumm.h\n    /usr/local/include/atlas/atlas_smvn_L2.h\n    /usr/local/include/atlas/atlas_dmvt_L1.h\n    /usr/local/include/atlas/atlas_csyr_L1.h\n    /usr/local/include/atlas/atlas_ztrsmXover.h\n    /usr/local/include/atlas/atlas_zher2_L1.h\n    /usr/local/include/atlas/atlas_sGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_zsyr2NX.h\n    /usr/local/include/atlas/atlas_cher2.h\n    /usr/local/include/atlas/atlas_ztGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_ctGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_sr2_L2.h\n    /usr/local/include/atlas/atlas_slamch.h\n    /usr/local/include/atlas/atlas_csyr2NX.h\n    /usr/local/include/atlas/atlas_csNKB.h\n    /usr/local/include/atlas/atlas_dsyr2NX.h\n    /usr/local/include/atlas/atlas_cr1.h\n    /usr/local/include/atlas/atlas_cGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_sGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_stGetNB_geqrf.h\n    /usr/local/include/atlas/dmm.h\n    /usr/local/include/atlas/atlas_sr1.h\n    /usr/local/include/atlas/zmm.h\n    /usr/local/include/atlas/atlas_sr1_L1.h\n    /usr/local/include/atlas/atlas_dtGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_cmvnkernels.h\n    /usr/local/include/atlas/atlas_dr2kernels.h\n    /usr/local/include/atlas/atlas_dsyr.h\n    /usr/local/include/atlas/atlas_stGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_stGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_cr2.h\n    /usr/local/include/atlas/atlas_smvt_L1.h\n    /usr/local/include/atlas/atlas_dr1kernels.h\n    /usr/local/include/atlas/atlas_zmvnkernels.h\n    /usr/local/include/atlas/atlas_zr2_L2.h\n    /usr/local/include/atlas/atlas_cr2kernels.h\n    /usr/local/include/atlas/atlas_smvtkernels.h\n    /usr/local/include/atlas/atlas_dr1.h\n    /usr/local/include/atlas/atlas_cmvn_L1.h\n    /usr/local/include/atlas/atlas_tcacheedge.h\n    /usr/local/include/atlas/atlas_cmvn.h\n    /usr/local/include/atlas/atlas_zmvn_L1.h\n    /usr/local/include/atlas/atlas_zr2kernels.h\n    /usr/local/include/atlas/atlas_dlamch.h\n    /usr/local/include/atlas/atlas_zr1_L1.h\n    /usr/local/include/atlas/atlas_ssyr_L1.h\n    /usr/local/include/atlas/atlas_dsyr_L2.h\n    /usr/local/include/atlas/sXover.h\n    /usr/local/include/atlas/atlas_zr1.h\n    /usr/local/include/atlas/atlas_stGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_zGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_cr2_L1.h\n    /usr/local/include/atlas/atlas_dmvn.h\n    /usr/local/include/atlas/atlas_sr1_L2.h\n    /usr/local/include/atlas/atlas_csyr_L2.h\n    /usr/local/include/atlas/smm.h\n    /usr/local/include/atlas/atlas_zdNKB.h\n    /usr/local/include/atlas/dXover.h\n    /usr/local/include/atlas/atlas_dmvt_L2.h\n    /usr/local/include/atlas/atlas_sr1kernels.h\n    /usr/local/include/atlas/atlas_dr2_L1.h\n    /usr/local/include/atlas/atlas_zher2.h\n    /usr/local/include/atlas/atlas_sNCmm.h\n    /usr/local/include/atlas/atlas_ctGetNB_gerqf.h\n    /usr/local/include/atlas/atlas_cmvt_L1.h\n    /usr/local/include/atlas/atlas_ssyr2_L1.h\n    /usr/local/include/atlas/atlas_cher2_L1.h\n    /usr/local/include/atlas/atlas_dr2.h\n    /usr/local/include/atlas/atlas_dGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_dr2_L2.h\n    /usr/local/include/atlas/atlas_cher2_L2.h\n    /usr/local/include/atlas/atlas_zGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_zher2_L2.h\n    /usr/local/include/atlas/atlas_sGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_dtGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_cmvn_L2.h\n    /usr/local/include/atlas/atlas_csysinfo.h\n    /usr/local/include/atlas/atlas_smvnkernels.h\n    /usr/local/include/atlas/atlas_cr1kernels.h\n    /usr/local/include/atlas/atlas_cr1_L1.h\n    /usr/local/include/atlas/atlas_ssyr2_L2.h\n    /usr/local/include/atlas/atlas_sGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_zmvt.h\n    /usr/local/include/atlas/atlas_ctGetNB_gelqf.h\n    /usr/local/include/atlas/atlas_smvn_L1.h\n    /usr/local/include/atlas/atlas_strsmXover.h\n    /usr/local/include/atlas/atlas_ztGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_smvt.h\n    /usr/local/include/atlas/atlas_dmvt.h\n    /usr/local/include/atlas/atlas_ssyr.h\n    /usr/local/include/atlas/atlas_dNCmm.h\n    /usr/local/include/atlas/atlas_zsysinfo.h\n    /usr/local/include/atlas/atlas_zr2.h\n    /usr/local/include/atlas/atlas_zmvt_L1.h\n    /usr/local/include/atlas/atlas_ctGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_ssysinfo.h\n    /usr/local/include/atlas/atlas_sr2.h\n    /usr/local/include/atlas/atlas_ssyr_L2.h\n    /usr/local/include/atlas/atlas_ctrsmXover.h\n    /usr/local/include/atlas/atlas_trsmNB.h\n    /usr/local/include/atlas/atlas_zsyrNX.h\n    /usr/local/include/atlas/atlas_zsyr_L2.h\n    /usr/local/include/atlas/atlas_dmvtkernels.h\n    /usr/local/include/atlas/atlas_cmvtkernels.h\n    /usr/local/include/atlas/atlas_csyrNX.h\n    /usr/local/include/atlas/atlas_type.h\n    /usr/local/include/atlas/atlas_sr2_L1.h\n    /usr/local/include/atlas/atlas_pthreads.h\n    /usr/local/include/atlas/atlas_dmvn_L2.h\n    /usr/local/include/atlas/atlas_dGetNB_geqrf.h\n    /usr/local/include/atlas/atlas_dmvnkernels.h\n    /usr/local/include/atlas/atlas_cGetNB_geqlf.h\n    /usr/local/include/atlas/atlas_dtGetNB_gerqf.h\n    /usr/local/include/atlas/zXover.h\n    /usr/local/include/atlas/atlas_zNCmm.h\n    /usr/local/include/atlas/cXover.h\n    /usr/local/include/libswresample/swresample.h\n    /usr/local/include/event.h\n    /usr/local/include/evhttp.h\n    /usr/local/include/libavdevice/avdevice.h\n    /usr/local/include/libavcodec/vaapi.h\n    /usr/local/include/libavcodec/vda.h\n    /usr/local/include/libavcodec/vdpau.h\n    /usr/local/include/libavcodec/dxva2.h\n    /usr/local/include/libavcodec/avfft.h\n    /usr/local/include/libavcodec/xvmc.h\n    /usr/local/include/libavcodec/version.h\n    /usr/local/include/libavcodec/avcodec.h\n    /usr/local/include/libavcodec/opt.h\n    /usr/local/include/libavfilter/avfilter.h\n    /usr/local/include/libavfilter/vsrc_buffer.h\n    /usr/local/include/libavfilter/avfiltergraph.h\n    /usr/local/include/libavfilter/buffersink.h\n    /usr/local/include/libavfilter/version.h\n    /usr/local/include/libavfilter/avcodec.h\n    /usr/local/include/libgimli_ana.h\n    /usr/local/include/libavformat/avio.h\n    /usr/local/include/libavformat/avformat.h\n    /usr/local/include/libavformat/version.h\n    /usr/local/include/evrpc.h\n    /usr/local/include/libswscale/swscale.h\n    /usr/local/include/evutil.h\nWarning: Unbrewed .la files were found in /usr/local/lib.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\nUnexpected .la files:\n    /usr/local/lib/libevent_pthreads.la\n    /usr/local/lib/libevent_extra.la\n    /usr/local/lib/libevent_core.la\n    /usr/local/lib/libevent_openssl.la\n    /usr/local/lib/libevent.la\nWarning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\nUnexpected .pc files:\n    /usr/local/lib/pkgconfig/libevent.pc\n    /usr/local/lib/pkgconfig/libavutil.pc\n    /usr/local/lib/pkgconfig/libavformat.pc\n    /usr/local/lib/pkgconfig/libevent_pthreads.pc\n    /usr/local/lib/pkgconfig/libavdevice.pc\n    /usr/local/lib/pkgconfig/libavcodec.pc\n    /usr/local/lib/pkgconfig/libswscale.pc\n    /usr/local/lib/pkgconfig/libswresample.pc\n    /usr/local/lib/pkgconfig/libevent_openssl.pc\n    /usr/local/lib/pkgconfig/libavfilter.pc\nWarning: Unbrewed static libraries were found in /usr/local/lib.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\nUnexpected static libraries:\n    /usr/local/lib/libf77blas.a\n    /usr/local/lib/liblapack.a\n    /usr/local/lib/libswscale.a\n    /usr/local/lib/libavutil.a\n    /usr/local/lib/libevent.a\n    /usr/local/lib/libavformat.a\n    /usr/local/lib/libswresample.a\n    /usr/local/lib/libevent_pthreads.a\n    /usr/local/lib/libcblas.a\n    /usr/local/lib/libavfilter.a\n    /usr/local/lib/libptcblas.a\n    /usr/local/lib/libevent_core.a\n    /usr/local/lib/libatlas.a\n    /usr/local/lib/libevent_openssl.a\n    /usr/local/lib/libevent_extra.a\n    /usr/local/lib/libavdevice.a\n    /usr/local/lib/libptf77blas.a\n    /usr/local/lib/libavcodec.a\nWarning: You have a curlrc file\nIf you have trouble downloading packages with Homebrew, then maybe this\nis the problem? If the following command doesn't work, then try removing\nyour curlrc:\n  curl http://github.com\n```\n. ",
    "leojrfs": "for example, instructions to setup a development environment, distro, version etc...\n. :+1: \n. ",
    "dcardosods": "Update also fail here...\nbash\n\u276f brew -v update            \nHomebrew 0.9.4\ngit checkout -q linuxbrew \n==> git rev-parse -q --verify HEAD\nf4e84917b419f4b5f16409d6d801357d5243625f\ngit config core.autocrlf false \ngit pull origin refs/heads/linuxbrew:refs/remotes/origin/linuxbrew\nFrom https://github.com/Homebrew/linuxbrew\n ! [rejected]        linuxbrew  -> origin/linuxbrew  (non-fast-forward)\nError: Failure while executing: git pull origin refs/heads/linuxbrew:refs/remotes/origin/linuxbrew\n. Thanks!\nThese instructions could be in the README, or abstracted by brew update command?!\n. Thanks!!! Now it works.\n. So so, I installed rbenv using Homebrew, then i tried to install ruby with rbenv, and openssl is required to do this.\nThen I falls in this issue https://github.com/sstephenson/ruby-build/issues/377, and tried to install openssl.\n. ",
    "derekbrokeit": "I just wanted to add that brew seemed to work acceptably with the old version of brew when I modified global.rb to have RUBY_PATCHLEVEL=0 (just to give it a value). However, I didn't actually play with it too much since I ended up installing my own ruby193 to get other things working. At the time, I didn't realize the requirement for HOMEBREW_CACHE to be set, which is why I said that I needed a new version of ruby.\nI am actually quite surprised at how few formulas need modification to install properly, there is definitely great potential in this project! It would be good to widdle down the OSX specific stuff in Library/Homebrew first, since many strange errors occur on various function calls such as brew --config.\n. @mikemcquaid normally, I would agree, but I am not sure if we already know the minimum ruby requirements or perhaps we want to make homebrew-core 1.8.x compatible.\nI decided to go through some testing with my older version of ruby ruby 1.8.5 (2006-08-25) [x86_64-linux] to see if there was a way to make homebrew cross platform enough to work on much older versions of ruby. \nKnown limitations to using brew with 1.8.5:\n- RUBY_PATCHLEVEL is not defined\n- instance_variable_defined? is not defined\n- pathname.rb:223 - 'Digest::SHA2' => 'Digest::SHA256' is necessary\nIf it is desirable to make homebrew more compatible with 1.8.5, I would be glad to go in and try to update the core, but for now, I have not changed the library.\nUnfortunately, there seem to be a number of ruby defined functions/variables being used that would need to be explicitly fixed in the Homebrew library. Because of the added junk that might be necessary, I thought it would be best to simply state that 1.8.6 is a minimum requirement. However, I am having other troubles on 1.8.6 and I am not sure if this is a ruby problem or not. However, after installing ruby193, brew works very well on my system after fixing the compiler optimizations.\nAlso, #3 makes me think that ruby 2.0 may not work, but I have not tested this myself. If this was patched then it would be best to simply say anything newer than 1.8.6.\n. It seems that the commit message is linking to mxcl/homebrew#12, which is not the right behavior. I'll send a new PR with a fixed link.\n. ",
    "havoc-io": "I have this exact same issue, without the ability to update /usr/bin/gcc.  I know the Mac guys are pedantic about hardcoding paths, but for linux, one really needs the ability to set CC/CXX (or at least HOMEBREW_CC/CXX or something), because there's just too much variation.  I also can't seem to get linuxbrew to pick up another compiler with any amount of hacking or symlinks.\n. Wow, that seems like exactly what we'd need.  To be fair, I'm using an ancient linux/gcc version, so this probably doesn't affect most users, but being able to do this would be a big help.  Perhaps I will try pulling this into a linuxbrew fork...\n. ",
    "chapmanb": "I've been struggling with gcc choice on Linuxbrew installations and wondering about the current state of this issue. It looks like the arbitrary GCC version patch got accepted (https://github.com/mxcl/homebrew/pull/20251) but I'm not  sure how to enable it.\nThe behaviour I'm seeing is that brew always seems to prefer using /usr/bin/gcc. On many of the systems I'm supporting this system version is quite old, with modules supplying the newer versions. Ideally what I'd like to do is use the gcc/g++ in the PATH by default, instead of manually setting CC/CXX to /usr/bin versions. Is this possible? If not, any pointers on ways to move in this direction? I know this is not ideal on Macs, but is the standard setup on a lot of Linux systems.\nThanks for any thoughts and pointers.\n. Misty and Shaun;\nThanks much for the clarification, and all your work on this. Unfortunately on the systems I'm working on there isn't a version specific gcc-4.8 style target to force. It's dictated by the gcc on the PATH, injected in via modules.\nI know that's far from Homebrew/Mac specific problems, but I guess I was hoping for a flag on Linuxbrew that tells brew not to do any magic and only grab CC/CXX from versions on the PATH. I'm still trying to find my way through the code trying to understand the env/compilers setup. Thanks again.\n. Shaun;\nNice idea, thank you. I made this into a flag now, so if you pass --env=inherit it will avoid isolating the compiler and allow you to inherit CC and CXX from the parent environment. Sorry, I also scrubbed the non-essential emacs comment line; still getting used to editing Ruby. Let me know if you think it needs any other tweaks.\n. Shaun;\nGood idea on switching to inherit?. I changed over to that approach.\nApologies, but my git foo is not strong enough to manage to squash these into a single commit cleanly. I never rebase so am totally naive and followed the instructions you posted. I ended up getting conflicts with the GitHub repo and has to clean those up locally with yet another pointless commit. However, I think this is the squashed commit you need:\nhttps://github.com/chapmanb/linuxbrew/commit/b28d5b048a6d596734dad41c0787cf10369d7fb5\nif you want to cherry pick it. Hope thiat works.\n. Shaun;\nThanks for the Ruby tip. I swapped that over and squashed again, so this should be the commit to cherry pick:\nhttps://github.com/chapmanb/linuxbrew/commit/89b330105bde25ce1aba3efd7b0e4aa0be3a26c4\nThanks again.\n. Shaun;\nThanks for looking at this. I know it's a pain to maintain forks and would happily find any cleaner way. We need to export CC, CXX, and PERL5LIB to get clean builds on non-standard systems:\nhttps://github.com/chapmanb/cloudbiolinux/blob/13e49db750cd01807c63006684cad77065c5dd3a/cloudbio/package/brew.py#L168\nFor CC and CXX, it sets these to the local gcc and g++ in the PATH, which normally come from modules on cluster systems (CC=/n/sw/centos6/gcc-4.8.1/bin/gcc...). For PERL5LIB, we need to inject a local library not in the global perl library path to handle dependencies, since we end up on some systems with pretty minimal perls:\nhttps://github.com/chapmanb/cloudbiolinux/blob/13e49db750cd01807c63006684cad77065c5dd3a/cloudbio/package/brew.py#L211\nHappy to talk about other ways to better support this that would make maintenance easier. Thanks again,\nBrad\n. Shaun;\nApologies, I've been trying to figure this out and after digging into the code I have to give up and admit I have no idea how to make this work. I get:\n$ export HOMEBREW_CC=`which gcc` && brew install --verbose delly.rb \nError: undefined method `/n/sw/centos6/gcc-4.8.1/bin/gcc' for #<Object:0x2b5f7bba4040>\nPlease report this bug:\n...\nAdding --env=super does not work either, after I dug in the code and thought it might be associated with that. --env=inherit does work fine with HOMEBREW_CC and HOMEBREW_CXX, but I don't think that helps us at all for improving compatibility with Homebrew. Sorry, let me know if there is anything I can do to dig into it more.\n. Shaun;\nThanks much, happy to switch to this if it's easier to keep up to date with the main Homebrew repo. We'd definitely like to avoid compiling gcc on every system, so it would be sweet if you could share the tricks to make brew think it's installed. Thanks again.\n. Shaun -- awesome, thanks so much for the quick pull and all the work you do maintaining Linuxbrew.\n. Shaun;\nMy biggest worry with trying to replicate a linux system inside of brew is that software compiled outside of brew could get broken by have these different core libraries in the LD_LIBRARY_PATH. I've seen this in the past with libcurl and recently with libreadline and R when readline was being pulled in by cmake and R was built outside of brew. I don't know enough to predict how much glibc and other dependencies will suffer from this, but generally err on the side of trying to make it less complicated.\nThe old-glibc approach is used in the Python conda packaging system and has worked reliably for bcbio installs across a wide variety of systems, so there is some n=1 evidence that it's a reasonable way to go. \n. Shaun -- I also added a small fix for cmake to prevent pulling in a lot of dependencies with the new Python requirement. This was rejected upstream (Homebrew/homebrew#32601) but helps a ton with cleaning up the builds on Linux.\n. Shaun;\nWow, that is an amazing amount of work. Thank you. I've only done a tiny bit of work with bottles, manually building one for cmake to avoid some of the dependency issues:\nhttps://github.com/chapmanb/cloudbiolinux/blob/515b6ea86dcc657de6bf98f659ed2f3d80c241be/cloudbio/package/brew.py#L202\nHaving ones for other painful builds like gcc, boost and friends would be awesome. If you have a plan for where to store these and how best to inject them into recipes I'd be happy to contribute. Let me know when you think it stabilizes more and happy to try and integrate into CloudBioLinux usage.\n. Shaun;\nAwesome, nice work. My cmake bottle is here:\nhttps://s3.amazonaws.com/cloudbiolinux/brew_bottles/cmake-3.0.2.x86_64-linux.bottle.tar.gz\nHappy to add to sourceforge if you want to give me permissions. I'm brad-chapman on there.\nI built this on CentOS 5 to try and make it as broadly compatible as possible. It seems to work cleanly on newer Ubuntu and CentOS machines. Thanks again for all this.\n. Ravi and Shaun;\nThis is from bcbio, so could also certainly be a problem with that build. Ravi, I'm not able to replicate this on a Ubuntu 14.04 system so am not sure exactly what is going on. Which cmake is on the PATH?\n$ ls -lh `which cmake`\nlrwxrwxrwx 1 chapmanb chapmanb 31 Sep 25 13:34 /usr/local/bin/cmake -> ../Cellar/cmake/3.0.2/bin/cmake\nIf you just run cmake is it running okay?\nOf of curiousity, why are you using sudo for brew? If this started with bcbio it should be setup to be run cleanly as a regular user. Sorry again about the issue.\n. @tayebwajb -- moved discussion to https://github.com/chapmanb/bcbio-nextgen/issues/646\n. Dmitry and Shaun;\nMy motivation for not wanting to pull in Python with cmake is that it is only required for docs and is a heavy requirement. Python brings in a lot of system level dependencies through brew. Since cmake is a requirement for a number of tools, you end up needing to bootstrap a large brew install before being able to install anything. For anyone trying to to use brew as a supplement to existing Linux package managers, this creates a big overhead.\nAn alternative solution is to require a flag to build the docs, instead of vice versa, so Python only gets pulled in and docs built if explicitly specified.\n. Shaun;\nSorry to be confusing. I meant if the default was to not build docs that would be helpful. Things work okay if you explicitly install cmake with the --without-docs flag but do not if cmake gets built as a dependency for another package. As long as everything is explicit about building it up front we are good, but it's easy to trip into the Python build issues.\n. ",
    "staticfloat": "Hm.  Interesting.  When I bought this processor, I could have sworn it said it was 32-bit only, but it appears I've got a 64-bit processor.\nSwitching to 64-bit is a non-trivial process; is there an inherent problem with 32-bit and homebrew?\n. Sure, I did it, and now I get:\n$ brew install git\nError: Permission denied - /Library\n. That works, thanks!\n. Sorry about that, rebased and repushed.\n. Correct, it does not work.  In fact, without the comma I don't get the #{HOMEBREW_PREFIX}/lib at all.  (That is, I get -Wl,rpath followed by whitespace only).  I wonder if it's a difference in shells or something.\n. With my patch:\n/usr/bin/gcc  -Os -w -pipe -march=core2  -L/state/partition1/home/sabae/local/lib -Wl,-rpath,/state/partition1/home/sabae/local/lib -o hello hello.o  ../lib/libhello.a\nWithout my patch:\n/usr/bin/gcc  -Os -w -pipe -march=core2  -L/state/partition1/home/sabae/local/lib -Wl,-rpath /state/partition1/home/sabae/local/lib -o hello hello.o  ../lib/libhello.a\nStrange that it worked there, all I can suggest is that some buildscripts expect the linker options to be a single word.  I definitely can't install tmux on top of libevent without this, (the tmux executable can't find the libevent libraries).\nGCC version:\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n. Well, if it's any consolation, the commas are how the gcc manual suggests to do things; https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html\n. BTW, would you prefer that I submit PRs to bottle or master?\n. I'll try.  My ruby-fu is weak, but that's never stopped me from opening PR's against Homebrew in the past. :P\n. Gcc's libgfortan on redhat-based systems at least.\nOn Aug 27, 2014 5:35 PM, \"Shaun Jackman\" notifications@github.com wrote:\n\nI ran into this issue once as well, but I don't recall where. Do you have\na concrete example of where a lib gets installed in a funny multilib\ndirectory?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/125#issuecomment-53644264.\n. Looking into this a bit, I don't think it's going to be so easy to force gcc to put things into /lib instead of /lib64.  I think extending linuxbrew to have a <prefix>/lib64 that things can get symlinked into is a better solution.\n\nI say this mostly just because gccs configure scripts don't have a lib64dir option or anything like that; it seems that individual sub-configure scripts choose by themselves whether they should install into lib or lib64, which is why only some of the libraries end up in lib64.\n. My guess is because the host OS stores things inside of lib64 already.  For instance, the gcc that I'm compiling this gcc with stores things in lib64.  Disabling multilib doesn't seem to affect this, unfortunately.\n. We could try that, but I think it's inevitable that we'll hit a situation where a package wants to compile the same library for 32 and 64-bit ABI.  It will then overwrite itself when trying to put the first in /lib and the second in /lib64.  Since these systems are already used to having a /lib64, why not just give it to them, and create a HOMEBREW_PREFIX/lib64, autolink things into it when it exists, and leave it to the system to find those libraries, as it should automatically?\n. Fair enough, I suppose.  Next chance I have, I'll dig in to gcc and see if I can't discover some method to force it to put everything into /lib.\n. I went deep through gcc this afternoon and wasn't able to fully figure it out.  It seems to have to do with what is passed to gcc/genmultilib in MULTILIB_OSDIRNAMES, I believe.\n. Good enough for now, I suppose.  :)\n. ",
    "netroby": "I have face the same issue , can it be auto resolve by brew? or at least print the help message help us out.\n. https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Installation.md\n. ",
    "rwhogg": "Closing this since --with-brewed-curl is now the default.\n. @sjackman I think this issue can be closed.\n. @intelligencer were you able to successfully install sdl?\n. Installing sshfs should work now, even without the above workaround.. Closing this as we've come a long way on bottling software since this issue was last commented on.. I believe this has been resolved.. Just ran into this on https://github.com/Linuxbrew/homebrew-core/pull/916, so moving to homebrew-core.\n. This issue was moved to Linuxbrew/homebrew-core#917\n. @pramodhegde  new versions of Rust/Cargo were committed here.\nDoes the problem still occur for you?\n. @tseemann, are you still seeing this issue? If not, I think we can close it.\n. This issue was moved to Linuxbrew/homebrew-core#3348. Thanks for posting the workaround @1ne! I've moved this issue over to linuxbrew/homebrew-core as this repo is now defunct.. This issue can probably be closed now that #482 is closed.\n. @guawoo I recently fixed the wxmac build. Does this still happen to you?\n. This issue was moved to Linuxbrew/homebrew-core#938\n. Closing on account of tdsmith's comment above.\n. I know I previously backed out of this, but I'm willing to give this a try. I've already got libxcb to compile. I'll submit a work-in-progress PR when it gets closer to be releasable.\n(It's picking up a lot of dependencies from my system libraries; that's why I initially assumed it was so easy. I'm working on getting it to build in a cleaner environment now, but it may take a little longer than I anticipated.)\n. I don't think every individual library warrants its own package, but I think I will probably split them up.\nMy thinking so far is basically: if more than one package in the dependency tree directly requires it, it'll get its own library.\nBTW, some of the resources for makedepend are also needed by libxcb. What would you like to do with those?\nThanks for pointing out the LFS page, I'd forgotten that that exists!\nIt might take some time for me to get as far as XLib.\n. I think this issue is probably out of date. Can we close it?\n. I'd welcome a pull request for this, but I don't have the time to do it myself.\nIf you want to try to create the formula yourself, please see the formula cookbook.\nThanks for the package suggestion!\n. This issue was moved to Linuxbrew/homebrew-core#142\n. Sorry we only got back to you on this issue now. Does this still affect you?\n. Oh, forgot to say this: it fixes #579\n. @midzer did the build work with the Python headers installed?\n. Closing this as it is unreproducible.. I apologize, but this is just too much work for too little reward to keep moving forward on it. Anyone's welcome to pick up where I left off.\n. This should no longer be an issue now that casperjs depends on the standard phantomjs formula.\nThanks a bunch!\n. Can you try brew install gcc and then try building again with Homebrew's GCC 5 (brew install pdf2htmlex --cc=gcc-5)?\n. This issue was moved to Linuxbrew/homebrew-core#141\n. From an Ubuntu 14.04 machine rather than a CentOS one, but it fails for me too: https://gist.github.com/rwhogg/863370fb3daa96f109de#file-02-make-L31\n. Fixed by https://github.com/Homebrew/homebrew-x11/commit/681632d25de122cb79b490457201d6e216db3f62 .\n. I'm personally really impressed that it was only broken for a few hours. Great teamwork getting it back up and running again so soon :smile: \n. np, thanks for fixing it so quickly\n. Oh shoot, this was supposed to go to Homebrew, not Linuxbrew. My bad!\n. Closing this issue as it is unreproducible.. Closing since homebrew/dupes/xar was deleted.. @Rudloff, this problem previously affected me, but no longer does. Once you migrate to the new split repos, can you please retry this? Thanks!\nIf you aren't aware of the new split repos, please see #1062.\n. This issue was moved to Linuxbrew/homebrew-core#936\n. Okay, I've mostly fixed the GTK+3 build, but in doing so discovered that the cairo is not being built with X11, which also breaks GTK+3. I'll file a separate issue to fix cairo and supply a PR for that too.\n. I was originally going to fix this myself, but it looks like #728 is already trying to do that.\n. My apologies @sjackman, but I would prefer not to get involved with X11. I'm happy to continue contributing bug fixes and new formulae to Linuxbrew, but I'm much more interested in higher-level stuff (Java & JavaScript for the most part).\nI was working on fixing GTK+3 mostly because I needed it to build WebKitGTK (which still has some build errors: I've fixed some of them at this commit, but as it takes well over 4 hours to compile I'm not likely to continue working on it).\n. Not really sure why the Travis build failed...\n. I was on the wrong branch. Closing, my apologies.\n. The Travis build failed for the same reason Sonar did.\n. Sounds good. The patch to findbugs was really just for demonstration/testing purposes; I wasn't expecting you to merge it.\n. It works. I'm about to submit a PR.\nThanks a bunch!\n. In progress; will test on both gjs and mcrypt. Let me know if there's any others you come up with.\n. It doesn't seem to fix gjs. But the patch does work for mcrypt.\n. Closing this now that #786 is merged.\n. Yeah, LD_LIBRARY_PATH can be pretty dangerous. Let's not encourage people to take it lightly.\n. This issue was moved to Linuxbrew/homebrew-core#1849. Sad to hear that, but perfectly understandable.\n. X11 support on Linuxbrew is now available.\n. Looks potentially related to #412.\n. @palad1 new versions of Rust/Cargo were committed here.\nDoes the problem still occur for you?\n. This issue was moved to Linuxbrew/homebrew-core#145\n. Note: I didn't change the name, even though it no longer really makes sense. If you agree, I can file an issue upstream to rename it.\n. The Travis build failed. Looks like it's because of a missing dependency on GTK+. I'll add that.\n. There's already an alias, so I guess renaming isn't necessary.\nAs a side note, they also requested that I not create issues of this sort upstream anymore. They'd prefer that these generally get fixed downstream instead.\n. Note: the Travis build failed because curl failed to build.\n. Actually, looks like the fix is probably trivial. Will submit it as soon as the build's done.\n. I'm getting the same problem (Ubuntu 14.04).\nI might have some time to look into this in the next few days.\n. This might be related: https://github.com/fsharp/fsharp/issues/552\n. I also found https://github.com/Homebrew/homebrew/issues/49746, but as the error code reported is different, I'm hesitant to say they're related.\n. Think I may have found a fix. Looks like it's caused by missing SSL certificates making nuget unable to download packages correctly.\nYou have to do mozroots --import --sync before running make for fsharp. I'll see if I can get a successful build and then make a PR when I get it working.\n. Looking at http://xcb.pdx.freedesktop.narkive.com/iMVaLSHe/xcb-proto-1-7-broke-existing-xcbgen-api, it looks like xproto-1.7 broke an existing ABI, which explains why I've been unable to build recently.\nI'll keep working on it, but until I can build correctly, I'm not comfortable sending this to merge.\n. @maxim-belkin thanks a bunch!\nIf it's okay with @sjackman, I think I'll take a break from X11 stuff until this PR is merged. When that's done, I can start taking a look at XLib and co.\n. Ok. I'll see about splitting them tomorrow. Marking this as work-in-progress again.\n. > Looks like all the \"xorg\" formulas have to use the SAME prefix. See here for the example of ./configure and here for the explanation what XORG_CONFIG is.\nI saw that, but I don't think it's a real problem so long as everything gets symlinked into ~/.linuxbrew/{lib,include,...}.\nHowever, it's becoming clear that we might need to experiment with how the formulae are split up. In light of this, I've changed my mind about merging the formulae piecemeal and now think it's probably safer to merge this, XLib, xcb-util, etc. all at once. \n. @maxim-belkin, considering your PR is a good deal more complete than mine, I think we're better off closing this and collaborating on yours instead.\n. I'm getting the following error (ran this on a standalone-Linuxbrew Docker image)\n\nmake[2]: Leaving directory '/tmp/xorg--libXpm20160306-30770-8m7m98/libXpm-3.5.11/src'\nMaking all in sxpm\nmake[2]: Entering directory '/tmp/xorg--libXpm20160306-30770-8m7m98/libXpm-3.5.11/sxpm'\n  CC       sxpm.o\n  GEN      sxpm.po\n/bin/bash: xgettext: command not found\nMakefile:651: recipe for target 'sxpm.po' failed\nmake[2]: * [sxpm.po] Error 127\nmake[2]: * Waiting for unfinished jobs....\nmake[2]: Leaving directory '/tmp/xorg--libXpm20160306-30770-8m7m98/libXpm-3.5.11/sxpm'\nMakefile:467: recipe for target 'all-recursive' failed\nmake[1]: * [all-recursive] Error 1\nmake[1]: Leaving directory '/tmp/xorg--libXpm20160306-30770-8m7m98/libXpm-3.5.11'\nMakefile:375: recipe for target 'all' failed\nmake: * [all] Error 2\n\nAlso, FYI https://github.com/Homebrew/homebrew/pull/49497 the xorg macros might be coming to plain Homebrew and it looks like they're discussing some of the same issues we are here.\n. @maxim-belkin I can confirm that, with the added dependency on gettext, this installs correctly on a standalone Linuxbrew Docker container.\nGreat work here!\n. Given that so many of the individual libraries use the exact same configure flags and whatnot and aren't likely to be depended on directly, this single formula idea actually makes a lot of sense to me. (Ironically, me @maxim-belkin are both arguing for the opposite of what our respective PR's actually do!)\nThere's also the matter of boilerplate - all of these small formulae would probably duplicate details.\nFinally, given that upstream Homebrew has PR's like https://github.com/Homebrew/homebrew/pull/49497, splitting up the formulae sounds like it could potentially conflict. By contrast, a single xorg formula probably won't do that, since XQuartz seems to be the de facto standard on Macs.\n(EDIT: I was thinking only about potential naming conflicts. Conflicts at the symlink level (~/.linuxbrew/{lib,include,...}) are probably still possible either way)\n. I think a tap sounds good.\n. > ...I've noticed that my changes are on master. According to my knowledge of git, this shouldn't be the case... correct?\nDepends, IIRC:\n1. If there are conflicts between your edits to texlive and the version on master, then it should outright block the branch switch.\n2. If there are no conflicts, then your changes are automatically applied to master. (I don't think that's how git actually does it, but that's the net effect).\n. Hey @sherpya, mind confirming that this fixes #871 for me? Thanks!\n. Note: I fixed the audit failure upstream, so I went ahead and marked the final todo item as done. It will still fail on Travis until the next Homebrew merge.\n. This issue was moved to Linuxbrew/homebrew-core#200\n. It fails in the exact same way on brew install too.\n. I've got a patch that works: https://gist.github.com/rwhogg/01577b5fa1820edfd31d\nI'm not going to make a PR for this right this instant for two reasons:\na) I think we need to figure out why this wasn't affecting OS X as @sjackman hinted at above and\nb) I'd like to know what exactly bg.po is. I know it's a translation file for Bulgarian, but I'm not sure why the previous patch deleted it. My _guess based on the bizarre leading underscore is that it was an editor-created temp/backup file that got committed accidentally and was subsequently removed upstream, but I'd want to check the changelogs to be sure.\n. Comment updated.\n. Without. It looks like having libxcb installed will allow it to finish building successfully; if so, I'll add the dependency and make a PR.\n. Scratch that; it looks like qt5 thinks it's installed even though it's not. Apparently it leaves behind an empty lib directory in its Cellar.\n. > I did brew install xcb-util-wm and get a new error:\n\nxcb.cpp:42:27: fatal error: xcb/xcb_image.h: No such file or directory`\nSo I brew install linuxbrew/xorg/xcb-util-image and get a new error:\nxcb.cpp:43:29: fatal error: xcb/xcb_keysyms.h: No such file or directory`\n\nThose sound like possible missing dependencies in linuxbrew/xorg. I'll take a look at that.\n. > Those sound like possible missing dependencies in linuxbrew/xorg. I'll take a look at that.\nHmm, apparently not that simple. @tseemann, if it's not too much to ask, mind opening up another issue on https://github.com/linuxbrew/homebrew-xorg/issues with the gist-log that got you those xcb errors?\n. This issue was moved to Linuxbrew/homebrew-core#146\n. > I pushed faf5144 which may resolve this issue. Try it out.\nNo luck, unfortunately. Same problem. That said, it did fix the failing libxmp test!\n. > brew install gcc --with-glibc && brew install lysp\nNo luck here either, but that's just because glibc fails to build (it says gcc-4.9 is not installed and the gcc I have is too old).\nI was able to work around that with brew install glibc --with-cc=gcc, but that fails in the postinstall stage with \"Inconsistency detected by ld.so: get-dynamic-info.h: 134: elf_get_dynamic_info: Assertion `info[15] == ((void *)0)' failed!\"\nI promptly removed glibc after seeing that, since I'm nervous about programs incorrectly linking to a broken libc. This issue is low priority, so no big deal.\n. binutils was installed as a dependency right before I started to build glibc.\nThe funny thing is, I've been using Homebrew's GCC 5.3 for a couple of months now, precisely because of that \"your gcc is ancient\" error message.\n. > Does glibc give that error message?\n\nIt originally came up a few months ago; I don't remember what formula was causing the problem. \n\nThe exact text is \"*** These critical programs are missing or too old: gcc\". Which sounds to me like utter nonsense since the gcc in my PATH is Homebrew's 5.3 and the one in /usr/bin is 4.8.4.\nI think you're right and I should probably reinstall from scratch. However, considering the massive number of packages I have installed at this point, I think I'm probably better off waiting until my next distro upgrade (I'm planning one in May).\nAlso, question: I need to keep track of which formulae fail for me, so I can eventually fix them. For a while, I had settled on only filing issues which I had effectively given up on and just tracking the rest on a wiki page, but then decided I shouldn't hide the issues from you. For issues which don't have an immediate, obvious fix (for which I obviously just provide the PR straight away, per your earlier advice), what would you rather I do?\n. This issue was moved to Linuxbrew/homebrew-core#147\n. Comment updated.\n. There's more to it than that - some of the patches are problematic too.\nI've got it to build by disabling all the patches - now I've just got to work out the minimal subset to disable.\n. Fixed by #964 \n. IIRC the preferred format for commit messages for these sorts of porting fixes is \": Fix for Linuxbrew\".\n@sjackman, would you accept a PR to say that in CONTRIBUTING.md?\n. No, it doesn't. jdk was already installed at the time.\nLooking in ~/.linuxbrew/include, I see jni.h but no jni_md.h. There's one in ~/.linuxbrew/include/linux, which follows what Ubuntu's OpenJDK7 package does. However, OpenJDK also includes a symlink to jni_md.h in its toplevel include folder, which Linuxbrew currently does not.\n. I think I've found the underlying problem. On Mac, `java_requirement.rb has the following:\nruby\nif (java_home/\"include\").exist? # Oracle JVM\n      ENV.append_to_cflags \"-I#{java_home}/include\"\n      ENV.append_to_cflags \"-I#{java_home}/include/darwin\"\n    else # Apple JVM\n      ENV.append_to_cflags \"-I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers/\"\n    end\nOn Linux, it's conditioned out with an if OS.mac?\nI suspect (not tested yet) that if we switch darwin with #{OS::NAME} it will fix this build.\n. > I suspect (not tested yet) that if we switch darwin with #{OS::NAME} it will fix this build.\nNot quite... there's a bit more to it than that. Nevertheless, I think this approach is going somewhere.\n. This issue was moved to Linuxbrew/homebrew-core#143\n. We're now seeing this a lot on Circle CI (although not on Travis, interestingly enough).\nIn the interest of cleaning out the old issues, I'll just close this and open a new one on Linuxbrew/brew (test-bot doesn't have an issue tracker).. It's kind of weird that openssl is complaining that makedepend is missing...\n$ ag \"makedepend\"\nopenssl.rb\n29:  depends_on \"makedepend\" => :build\n. Signal 11 means tar segfaulted. Not sure why.\nCan you provide the output of tar --version please? Maybe there's a bug in the version of tar you're using.\nAdditionally, can you try to manually execute tar xf /home/mp6/.cache/Homebrew/nmap-7.01.tar.bz2 to see if it segfaults consistently?\nThanks!\n. I'm happy to take this one on, but it's not all that high priority for me right now. I'll increase priority on it if you want to use R Studio, but since the only other formula I'm aware of that uses it is CVS (not exactly the most important formula in the world these days) I think dealing with X11 is more important right now.\n. This issue was moved to Linuxbrew/homebrew-core#131\n. Closing this issue as it is not reproducible.. This seems to work if you set --ccname=clang, but since llvm is currently keg-only, I don't think that's an option just yet.\n. Another result for comparison:\n--ccname=gcc-4.8 or gcc-5\nLast 15 lines from /home/bob/.cache/Homebrew/Logs/txr/02.make:\nCC glob.c -> opt/glob.o\nCC signal.c -> opt/signal.o\nCC linenoise/linenoise.c -> opt/linenoise/linenoise.o\nCC y.tab.c -> opt/y.tab.o\nCC match.c -> opt/match.o\nCC parser.c -> opt/parser.o\nCC txr.c -> opt/txr.o\nCC lex.yy.c -> opt/lex.yy.o\nlex.yy.c: In function \u2018yyensure_buffer_stack\u2019:\nlex.yy.c:3993:21: error: expected expression before \u2018/\u2019 token\n   num_to_alloc = 1; // After all that talk, this was set to 1 anyways...\n                     ^\nMakefile:137: recipe for target 'opt/lex.yy.o' failed\nmake: *** [opt/lex.yy.o] Error 1\nmake: *** Waiting for unfinished jobs....\n\n. This issue was moved to Linuxbrew/homebrew-core#148\n. > So you're a LISP fan, eh? =)\nIn the same way that ESR is a fan of Cobol, I suppose. :black_joker: \nI have no intention of using a lot of these formulae. I'm just contributing for the sake of making Linuxbrew a better program at this point.\n. I don't use Slack, but I've never tried it. I'm really tired at the moment so I don't want to set it up right this instant (going to fix the OS::NAME thing you reported above and then watch a movie for the rest of the evening)\nOnce I get it set up, I'd be happy to join :smile: \n. One side note: I think this formula should probably do\nruby\ndepends_on :java => \"1.7+\" if build.with?(\"java\")\nIf you agree, I'll make a PR upstream to do that.\n. The Travis build is failing because of an empty m4 archive.\n. From https://travis-ci.org/Linuxbrew/linuxbrew/builds/117628414#L1594:\n\n[ERROR] The compilation of conf-ncurses failed at \"pkg-config ncurses\".\n\nLooks like a dependency on ncurses is missing. I'll see if that fixes it.\n. > Looks like a dependency on ncurses is missing. I'll see if that fixes it.\nNo luck. However, this might be related to the problem ghc has with ncurses from #882.\n. At https://sourceware.org/glibc/wiki/FAQ#Compiling_glibc, there's a list of necessary build dependencies, including gawk and perl.\nThanks for the bug report @DoomHammer!\n. > If apply doesn't like the nil value, it could be removed with compact, but I'd suggest patching apply instead to ignore nil values.\nIMO, patching apply is something that should probably happen upstream (unless we do it for just the cvs formula, but that sounds heavy-handed to me). I think the path of least resistance in this case is probably compact.\nNevertheless, I'll try to avoid invasive changes to the formatting in the future. Thanks for the help while I get used to this!\n. There was a similar case before - for sip.\n(No pr because im on my Android phone, sorry)\n. I think issue #946 was to add a pam formula. That might do it.\n. Alternatively, we could disable pam as you suggest.\n. Cool. I'll merge it later tonight.\n. Fixes the problem identified on #950 where opam couldn't unpack packages correctly.\n. FYI, #987 is now closed and dbus should now work.\n. I modified cairo recently; can you try\nbrew update\nbrew install cairo\nIf that fails, you can try brew install cairo --env=std.. Travis is failing because of gcc (https://travis-ci.org/Linuxbrew/linuxbrew/builds/118636280#L1055): \n\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/118636280#L1055\n. Note to self: make a separate PR to bottle this.\n. Travis failed. Looks like it's because xerces is missing a dependency on one of the internationalization libraries. (Probably icu4c, but not 100% sure).\n\nhttps://travis-ci.org/Linuxbrew/linuxbrew/builds/118770388#L1125\n\n/home/travis/build/Linuxbrew/linuxbrew/bin/ld: warning: libicui18n.so.48, needed by /home/travis/build/Linuxbrew/linuxbrew/lib/libxerces-c.so, not found (try using -rpath or -rpath-link)\n\n(EDIT: weird, none of xerces-c's binaries, nor the .so file, seem to depend on any icu libraries. Maybe that means blahtexml itself is trying the link. Huh.)\n. I can't seem to reproduce the above issue locally. Not going to worry about it for now.\n. I've opened up the test PR #994 to investigate the situation with xerces-c and icu4c.\n. Note to self: make a separate PR to make a bottle for this.\n. This formula is missing a dependency on expat. I might send a patch for that upstream; we'll see if that's necessary.\n. @DoomHammer yes it is. (I don't really know what libraries OS X provides, and I was guessing it wasn't provided since expat isn't included in homebrew/dupes.). I just confirmed that the missing dependency does not affect OS X.\nThe dependency is only needed here; I'll add that. No upstream PR necessary.\n. Ok, so according to Xerces' web page, 5 different transcoders are supported:\n--enable-transcoder-gnuiconv    use the GNU iconv library \n--enable-transcoder-iconv   use the iconv library \n--enable-transcoder-icu     use the ICU library \n--enable-transcoder-macosunicodeconverter   use Mac OS X APIs (only on Mac OS X) \n--enable-transcoder-windows     use Windows APIs (only on Windows, Cygwin, MinGW)\nPresumably we'll have to provide one of those first 3 on Linux to get this to work properly. I'll look into this more later and create a proper PR once I've got a plan to deal with it.\n. https://travis-ci.org/Linuxbrew/linuxbrew/builds/119718055#L715:\n/home/travis/build/Linuxbrew/linuxbrew/Cellar/xerces-c/3.1.3/bin/SAXCount: error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory\nLooks like it depends on curl too.\n. @sjackman I think you resolved this issue recently?. Looks like it depends on libuuid too.\nchecking for uuid_generate in -luuid... no\nconfigure: error: library 'uuid' is required for E2FS UUID\n(This happens right after the xslt check.)\n(BTW, I confirmed that it is libuuid and not ossp-uuid)\n. I just got it to build successfully, so I'm assigning this to me.\n. > I'm thinking that this may need to be abstracted away to a Requirement :libuuid.\nSounds like a plan to me :smile:\nI'll put #1019 on hold for now.\n. This issue was moved to Linuxbrew/homebrew-core#1850. This issue was moved to Linuxbrew/homebrew-core#215\n. This fix was already applied, so closing this issue.. This issue was moved to Linuxbrew/homebrew-core#802\n. FYI @tseemann the upstream developers responded to the bug, asking you to confirm if adding std:: fixes it.\n. poppler was updated to version 0.47 and the upstream bug was marked \"RESOLVED FIXED\", so closing this.\n. This issue was moved to Linuxbrew/homebrew-core#801\n. Yeah, there's a --without-tcl option, so I'm thinking it should probably do something like\nruby\ndepends_on \"homebrew/dupes/tcl-tk\" if build.with?(\"tcl\") and !OS.mac?\nWe might also need to add something like --with-x11 or --without-tk to prevent it from trying to build the OS X Aqua GUI.\nperl would have the same problem, but I think we can safely assume the host system provides that by default.\n. > One possible issue is that TCL is included in homebrew/dupes/tcl-tk, and I believe that depends on X11 unless --without-x11 is specified.\nThere's a few possible ways to solve that:\n1. Make --without-tk a required argument for tcl-tk, as in\nruby\ndepends_on \"homebrew/dupes/tcl-tk\" => [\"--without-tk\"] if build.with?(\"tcl\") and !OS.mac?\n\nSomething similar to what python does:\n\nruby\ndepends_on :x11 if build.with?(\"tcl-tk\") && Tab.for_name(\"homebrew/dupes/tcl-tk\").with?(\"x11\")\n\nChange --without-tcl to --with-tcl and make the dependency :optional:\n\nOf the three, I think option 2 is probably the best (assuming it works; all three of these are untested). If I understand what's happening on https://github.com/Linuxbrew/linuxbrew/issues/1026, then doing option 1 might force people to recompile tcl-tk - not ideal. And option 3 would be a factory for merge conflicts, not to mention be a not-strictly-necessary change to the way the formula behaves. I'm sure they had a good reason for wanting tcl-tk to be used by default but not python, though I'm not really sure what that reason is.\n. > The problem with this solution is that tcl-tk installed --with-tk would be uninstalled to get instead installed --without-tk, which is bad.\nAgreed. That would really suck if someone was depending on Tk for some other reason.\n:tcl sounds like a plan.\n. > What do you think of making the default on Linux --without-tcl?\nAs a temporary workaround to allow postgres to build, I like it. As a permanent solution, not a huge fan. postgres is an important formula IMO, so in the interest of getting this merged more quickly, I'd be happy to do it.\n. Sounds good, will merge tonight\nOn April 5, 2016 8:34:20 PM PDT, Shaun Jackman notifications@github.com wrote:\n\nThe :tcl requirement can wait for another day.\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Linuxbrew/linuxbrew/pull/1019#issuecomment-206100169\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. From xorg-protocols:\n``` ruby\nwith specs\nres1 = %w[bigreqsproto fontsproto inputproto kbproto recordproto scrnsaverproto xcmiscproto xextproto xproto]\n# without specs\n  res2 = %w[compositeproto damageproto dmxproto dri2proto dri3proto fixesproto glproto presentproto randrproto renderproto resourceproto videoproto xf86bigfontproto xf86dgaproto xf86driproto xf86vidmodeproto xineramaproto]\nres1.each do |r|\n    depends_on r => args\n  end\nres2.each do |r|\n    depends_on r\n  end\n```\nThrough the dependency chain xcb-util-renderutil->libxcb->libxau->xorg-protocols, we end up depending on xorg-protocols, which is basically a metapackage to install a bunch of small formulae X.Org needs.\nGiven that it's the ones from res1 that are getting reinstalled, I'm guessing that it's because of the => args that's causing them to be reinstalled.\n. This issue was moved to Linuxbrew/homebrew-xorg#252. I think it's a reasonable fit for homebrew-xorg\n. mesalib-glw only installs libGLw and assorted header files.\nThere's a Debian package named libegl1-mesa which comes from the source package mesa, as described here. By contrast, libglw-mesa - basically some X/Athena widgets - comes from the source package glw. So I think the answer is: mesalib-glw is definitely related, but not the same.\nI haven't had the time to dig into it properly, but based on an interactive install of mesalib-glw, I'm going to guess that EGL isn't part of the tarball.\n. @maxim-belkin recently created a mesa formula; it should now be available by running brew install linuxbrew/xorg/mesa. (Once again, I emphasize, awesome work!)\nWe'll eventually have to start making it a requirement for some of the existing formulae.\n. This issue was moved to Linuxbrew/homebrew-core#937\n. > Error: The selected compiler doesn't support C++11: gcc\nTravis is complaining that gcc doesn't support C++11. It's using Ubuntu 12.04, which means GCC should be 4.6, which supports some C++ 11 features.\nWill have to dig into this further.\n. This issue was moved to Linuxbrew/brew#7\n. Hey @G-Square, can you send this pull request upstream to Homebrew please?\nAlso:\n- Is XCode not required on OS X any more, or is that a Linux-specific change? If it's a Linux specific change, then use if OS.mac? if necessary rather than removing it (and submit a separate PR here rather than including that change upstream, as they won't want it). If it's not necessary for the formula to build on Linux, please don't remove that line. If XCode isn't required any more on OS X, than feel free to send that change upstream to Homebrew as well.\n- Can you explain why you changed the Java version from \"1.8+\" to \"1.8\"?\nThanks!\n. The Java version constraint actually has no effect on Linux. We would have to modify .travis.yml to get Java 8 to install on Travis.\n. I cannot emphasize enough how much a work-in-progress this is. It works, but telling the various X11Requirement methods to defer to their XorgRequirement counterparts is just awful.\nWhat I think might work better is having XorgRequirement extend X11Requirement and mapping depends_on :x11 to \nNevertheless, submitting the PR so there's a visible indication of my progress.\n. Moved to https://github.com/Linuxbrew/brew/pull/10\n. From https://gist.github.com/dragonxlwang/aa15a009cb299ae2a58806de1a37dfca#file-02-make-L2-L149\n\nif_perl.xs:58:20: fatal error: EXTERN.h: No such file or directory\n\nNow that you installed perl from #1047, does this problem still occur?\n. The error looks like it comes from make test and is at https://gist.github.com/dragonxlwang/34ab6758653063117dcfde01983a0ebc#file-03-make-L3-L827\n@dragonxlwang, as a workaround until the upstream bug is fixed, you can try brew edit perl and comment out the make test.\n. I have the same problem, but was able to fix it by specifying brew install lnav --cc=clang. Does that work for you?\nIf so, I think this might need some investigation around a possible fails_with for GCC.\n. Note that you can install clang from linuxbrew with brew install llvm --with-clang if you don't have it.\n. After having switched to clang, I'm unable to reproduce this. I'm also able to install it (after installing a missing sqlite3 dependency, for which I'll make a separate pull request) when building on the Linuxbrew Docker image.\nI apologize, but I do not have any further suggestions at the moment.\n. @sjackman, any ideas about this one?\n. Hello @DwinGrashof, was this issue opened by mistake? It doesn't have any details about what failed.\n. I thought such a doctor check already existed. I remember seeing it just yesterday. Might just have to change the minimum required version.\n. Looks like the problem is LD_LIBRARY_PATH isn't getting set correctly - the libraries jsonrpcstub is looking for are already built, but they're only available in buildpath/\"lib\".\nWill continue to look into this.\n. The problem appears to be caused by the presence of -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 in std_cmake_flags.\nNot sure why this isn't causing a problem on OS X; will continue to investigate.\n. Now a dependency of libjson-rpc-cpp is failing. The gist you've linked doesn't seem to include that error though, so I'm a little confused.\nFurthermore, the gist shows some bizarre inconsistencies: CMake seems to know you have Linuxbrew's GCC 5.3 installed, but 00.config.out doesn't.\n. > when I say I deleted everything .. I mean I did a rm -rf .linuxbrew and did a brand new brew install libjson-rpc-cpp\nAh, gotcha. Thanks for the clarification!\nI do recommend reinstalling Linuxbrew's GCC: brew install gcc --with-glibc. It will make your life a lot easier.\n. This formula appears to compile correctly for me now. My apologies that we weren't able to resolve this sooner.. We try to rely on host system dependencies as little as possible. I can confirm that the dependency is missing; thanks for reporting!\nIf you'd like, you can submit a pull request that adds the following:\nruby\ndepends_on \"homebrew/dupes/ncurses\" unless OS.mac?\nIf not, I'll get around to submitting it myself soon.\n. The ncurses dependency isn't necessary on OS X (ncurses is provided by default there), so please send the PR here rather than to Homebrew.\nIn general, if you're adding something with unless OS.mac? or if OS.linux? it probably should come here rather than to Homebrew.\n. This issue was moved to Linuxbrew/homebrew-core#263\n. @andrewrynhard, now that the merge is complete, mind reopening this PR against the linuxbrew/homebrew-core repository? Thanks a bunch!\nClosing for now.\n. Can you try running the command . $(brew --prefix)/etc/profile.d/z.sh after installing z and then trying again? Thanks!\n. This issue was moved to Linuxbrew/homebrew-core#79\n. https://travis-ci.org/Linuxbrew/homebrew-core/builds/126536016#L1262 : \n\n/home/linuxbrew/.linuxbrew/bin/ld: cannot find -lsqlite3\n\nLooks like a missing sqlite dep.\n. This issue was moved to Linuxbrew/homebrew-core#96\n. This issue was moved to Linuxbrew/homebrew-core#71\n. This issue was moved to Linuxbrew/homebrew-core#127\n. > I'm inclined to remove the getopt command from util-linux and use gnu-getopt\nI like that plan; it's what I did locally to deal with this.\n. This issue was moved to Linuxbrew/homebrew-core#144\n. This issue was moved to Linuxbrew/homebrew-core#130\n. I think there's something wrong with the bottle, so I'm reopening this. I didn't pull the bottle anyways\n. This issue was moved to Linuxbrew/homebrew-core#129\n. Looks like you need /home/rahn/.linuxbrew/bin/ in your path. Can you add it in and try again?\nIf it's already in your path, you can try either hash -r (Bash) or rehash (Zsh) and then try to run the command again.\n. > Is there a brew package that supplies a file command I could build from source and use? If not, I can probably track down the source code for 'file' and build one\nYes, there is. It's called homebrew/dupes/file-formula.\n. It also looks like the run script generated might fail if you don't have ksh installed, which I suspect most Linux distributions probably don't come with by default. (Most come with Bash, dash, and/or the Busybox shell preinstalled)\n. This issue was moved to Linuxbrew/homebrew-core#78\n. Hey @gameslayer, can you try the following please?\n1. export PATH=$HOME/.linuxbrew/bin:$PATH\n2. hash -r (if you're using Bash) or rehash (if you're using Zsh)\n3. Try to run the command again?\nIf that works, please add the first command from that list into your shell startup file (.bashrc, .zshrc, etc.) so you'll be able to always have it accessible.\n@sjackman, maybe we should put instructions of this sort into either the output of the installer or somewhere prominent on the README, since this sort of issue seems to come up fairly frequently.\n. No problem! Mind if I close this issue?\n. Hey @gutierri : \n1. Please send version updates to Homebrew, not Linuxbrew, unless it's a Linux-only formula. (You can usually tell by the presence of the text # tag \"linuxbrew\"). We'll get the change post-merge.\n2. We have split this repository into Linuxbrew/brew (Homebrew commands and libraries) and Linuxbrew/homebrew-core (formulae). Please send version updates and new formulae to the homebrew-core repository for the appropriate project from now on (this is true for both Homebrew and Linuxbrew). We're still working on fully migrating everyone to the split repos; I apologize for the growing pains.\n3. In this particular instance, I don't think upstream will merge the PR since they have a specific schedule for updating vim.\nMy apologies for any confusion.\n. Closing based on points 1 and 3. Thanks for contributing!\n. Your home directory (i.e. $HOME). It may not exist if you use a shell without any customizations, in which case you can just create it.\nWhat shell do you use? We don't explicitly list files for every shell in known use, but Bash and zsh aren't the only options.\n. .bashrc.\nMy mistake, the current recommendation is to use .bash_profile\n. Yes, .bashrc is a hidden file (and so are .zshrc, .bash_profile, etc. - basically any file starting with a period).\nThat means it won't show up in nautilus by default. IIRC the default key command to show hidden files in Nautilus is Ctrl-h.\nAs for the permissions issue, try chmod +w on the file you're trying to edit.\nAre you trying to do a system-wide installation for the benefit of multiple users, or just for your own personal use? If you're trying to do it for just yourself, you should not need sudo at all. If you're doing it for the benefit of multiple users, it may make more sense to put the instructions in a system-wide file like /etc/profile than in $HOME/.bash_profile.\n(EDITED: I thought .bashrc was the recommended file to use. It's actually .bash_profile.)\n. My apologies; I'm having difficulty understanding the question is all.\nThere are some differences between putting the lines into .bashrc vs. .bash_profile, but either should work.\nEditing the 3 lines to say \"/home/blueberry\" instead of \"$HOME\" is perfectly fine, since you've installed Linuxbrew into /home/blueberry/.linuxbrew. If blueberry is the username of the user you normally use, then doing this is unnecessary but harmless. If blueberry is a username that you reserve for administrative use, and you intend to use Linuxbrew from a different user (for example, james), then changing \"$HOME\" into \"/home/blueberry\" is actually necessary.\nAre you confused because .bashrc (or .bash_profile, etc.) does not exist in /home/blueberry/.linuxbrew? Assuming you use blueberry for normal day-to-day use, it should exist at /home/blueberry/.bashrc, not /home/blueberry/.linuxbrew/.bashrc.\nOne other thing: you need to either quit or reload your shell after executing the instructions before you can start installing stuff with brew. The easiest technique is to just quit your terminal emulator and then start it up again.\nI hope you're not getting frustrated. We try our best to make Linuxbrew a comfortable experience for new users, but occasionally that can be kind of difficult.\n. This issue was moved to Linuxbrew/homebrew-core#1415. This is the easiest way to get it to work for now; at some point we'll want to unbundle these libraries though.\n. I do want to eventually include the plugins - this is mostly there as a reminder to myself.\n. There are stable releases; it was just easier for me to start development on the HEAD rather than a stable release. (Squirrel's website is not particularly well organized - it can be a little tricky to find what you're looking for)\n. I will write a test at some point, but for now it's easier to just leave this.\n. Yes, it does.\n. I'm guessing based on the changes that were made to the sonar formula that you probably don't want the OS.linux? bit here.\nI'll happily modify it tomorrow if you'd like, but I'm tired so I'm going to leave it for now.\n. This is the line that might trigger the couchdb/spidermonkey bug I mentioned in the PR description. I've just disabled it entirely now, since I couldn't find any instance of \"-install_name\" in autoconf.mk and the line fails otherwise.\nWe might have to fix this later when we fix the spidermonkey build, but IMO it's fine for now.\nThoughts?\n. It probably isn't. I can try taking it out later tonight.\n. Sorry it took so long to respond, I've been sick the last few days. Will try to get to this later today.\n. This chunk sadly is necessary, otherwise the inreplace fails and stops the build.\n. Yes. The build fails without it.\nI didn't copy down the precise error message, but if you'd like I can uninstall and reinstall without it to show you what it is.\n. Gotcha, will change.\n. Hey @sjackman - please pardon my commenting on an already-merged pull request, but was this conflicts_with supposed to be in the util-linux formula? The way I see it, the libuuid formula is currently conflicting with itself.\n. Yes\n. Done, thanks for the suggestion!\n. Done, thanks!\n. I apologize that this line is a bit obtuse.\nI also tried doing it in an interpolation style, but I couldn't seem to get it to work:\nruby\nplatform = \"#{OS::NAME}#{OS.linux? ? Hardware::CPU.bits.to_s : ''}\"\n. Furthermore, I'm aware that CPU.bits is hardcoded to 64 at the moment, but I'm hoping that if in the future it becomes dependent on architecture that this will \"just work\" on 32-bit.\n. The .to_s is necessary, unfortunately.\nI'll try #{Hardware::CPU.bits if OS.linux?}. Thanks a bunch for the suggestion - I really tried my hardest to make this concise, but I'm new to Ruby (I don't use it for any other project) so it can be challenging sometimes.\n. It looks like I can probably combine these two into a loop; I'll try that later.\n. Wow, that's an embarassing omission... Thanks!\n. Strictly speaking, libpthread-stubs isn't necessary on Linux. BLFS actually recommends stripping the dependency on it out:\n\nsed \"s/pthread-stubs//\" -i configure: This sed removes dependency on libpthread-stubs package which is useless on Linux. \n\nI wasn't wholly comfortable with that, so I decided to just include it as a resource.\n. Ah, I see that you already accounted for that.\n. May I ask why this is commented out? I think it is an actual dependency.\n. I don't think we need this. Quoting from the Formula Cookbook:\n\nOccasionally, these updates require a forced-recompile of the formula itself or its dependents to either ensure formulae continue to function as expected or to close a security issue. This forced-recompile is known as a revision and inserted underneath the homepage/url/sha block.\n. Strictly a matter of opinion, but I think http://www.x.org/wiki/ would make more sense for the homepage.\n. Not sure exactly where to put it, but I think you're missing a dependency on gettext. \n. This line isn't strictly necessary, but it makes the formula respect Linuxbrew conventions better. (And it can't be changed by altering a Makefile variable: it is hard-coded into the source).\n\nWithout it, on startup the command tries to look for the default config file in /usr/local (which by sheer coincidence is where upstream Homebrew would have put it).\nTechnically speaking, it still throws a warning message on startup because of the rename to foremost.conf.default, but given that the formula already did that I assume that was by design.\n. Just to clarify: there's no 64-bit build for OS X.\n. Just for the record: there's no 32-bit version of infer.\n. With this patch applied, you get the following:\nLast 15 lines from /home/bob/.cache/Homebrew/Logs/sbcl/01.make.sh:\nldso-stubs.o: In function `_ldso_stub__tcflush':\n/home/bob/tmp/sbcl20160320-1827-ipbqkj/sbcl-1.3.3/src/runtime/ldso-stubs.S:133: undefined reference to `_tcflush'\nldso-stubs.o: In function `_ldso_stub__tcgetattr':\n/home/bob/tmp/sbcl20160320-1827-ipbqkj/sbcl-1.3.3/src/runtime/ldso-stubs.S:134: undefined reference to `_tcgetattr'\nldso-stubs.o: In function `_ldso_stub__tcsendbreak':\n/home/bob/tmp/sbcl20160320-1827-ipbqkj/sbcl-1.3.3/src/runtime/ldso-stubs.S:135: undefined reference to `_tcsendbreak'\nldso-stubs.o: In function `_ldso_stub__tcsetattr':\n/home/bob/tmp/sbcl20160320-1827-ipbqkj/sbcl-1.3.3/src/runtime/ldso-stubs.S:136: undefined reference to `_tcsetattr'\ncollect2: error: ld returned 1 exit status\nGNUmakefile:60: recipe for target 'sbcl' failed\nmake: *** [sbcl] Error 1\nmake: Leaving directory '/home/bob/tmp/sbcl20160320-1827-ipbqkj/sbcl-1.3.3/src/runtime'\n. expat isn't included in homebrew/dupes, but it's provided by OS X nonetheless, which is why this formula was missing the dependency.\n. Yeah, C++ 11 is used by the formula by default on OS X, presumably due to XCode.\n. I've just removed this for now, but I think I need to do more than that.\nAssuming we want to prefer the Linuxbrew/xorg/xorg installation over anything else, something like this might make more sense (pardon my mediocre Ruby-fu):\nruby\nif OS.linux?\n  @prefix ||= if Pathname.new(cellar/\"xorg\").exist?\n    # Not sure if this case is really necessary... not all that familiar with this code ATM\n    Pathname.new(ENV[\"HOMEBREW_PREFIX\"])\n  elsif Pathname.new(\"/usr/lib/x86_64-linux-gnu/libX11.so\").exist?\n    Pathname.new(\"/usr\")\n  end\nend\n. ",
    "tokiloki": "For brew install svn at first I get this error\n```\n==> Installing subversion dependency: serf\n==> Downloading http://serf.googlecode.com/files/serf-1.2.1.tar.bz2\n################################################################## 100,0%\n==> ./configure --prefix=/home/vv/linuxbrew/Cellar/serf/1.2.1 --with-apr=/usr/bin\nchecking target system type... i686-pc-linux-gnu\nConfiguring Apache Portable Runtime library...\nchecking for APR... configure: error: the --with-apr parameter is incorrect. It must specify an install prefix, a     build directory, or an apr-config file.\nREAD THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting\nThese open issues may also help:\n    https://github.com/mxcl/homebrew/pull/21427\n    https://github.com/mxcl/homebrew/pull/21449\n```\nWhich can be fixed by\n``` diff\ndiff --git a/Library/Formula/serf.rb b/Library/Formula/serf.rb\nindex 2eea834..3d9bfc1 100644\n--- a/Library/Formula/serf.rb\n+++ b/Library/Formula/serf.rb\n@@ -10,8 +10,13 @@ class Serf < Formula\n   depends_on :libtool\n   depends_on 'sqlite'\n\nif not MACOS\ndepends_on 'apr'\ndepends_on 'apr-util'\nend\n+\n   def apr_bin\nsuperbin or \"/usr/bin\"\nsuperbin or Formula.factory('apr').opt_prefix\n   end\n\ndef install\n```\nAnother problem is fixed here https://github.com/mxcl/homebrew/commit/db1f06fa45ec9f97cb30c732b3931905eb360e56#Library/Formula/subversion.rb\nThen problem is\n==> ./configure --prefix=/home/vv/linuxbrew/Cellar/subversion/1.8.0 --with-apr=/usr/bin --with-zlib=/usr --with-    sqlite=/home/vv/linuxbrew/opt/sqlite --with-serf=/home/vv/linuxbrew/opt/serf --di\nchecking for egrep... /bin/grep -E\nchecking whether ln -s works... yes\nchecking for a BSD-compatible install... /usr/bin/install -c\nconfigure: Apache Portable Runtime (APR) library configuration\nchecking for APR... configure: error: the --with-apr parameter is incorrect. It must specify an install prefix, a build directory, or an apr-config file.\nwhich is fixed by\n``` diff\ndiff --git a/Library/Formula/subversion.rb b/Library/Formula/subversion.rb\nindex 53020a2..acaa8d1 100644\n--- a/Library/Formula/subversion.rb\n+++ b/Library/Formula/subversion.rb\n@@ -53,7 +53,7 @@ class Subversion < Formula\n   end if (build.include? 'perl') or (build.include? 'ruby')\ndef apr_bin\n-    superbin or \"/usr/bin\"\n+    superbin or Formula.factory('apr').opt_prefix\n   end\ndef install\n```\n. ",
    "paulhybryant": "Hi,\nI ran into exactly the same issue originally reported.\nI didn't see anything related to keg-only in the formular.\nAnd the library and binary do not existing in Cellar directory.\nThe gist log is here https://gist.github.com/anonymous/dff6ff729d44d1a85534\nThanks,\n. My gcc installation also failed at Make bootstrap but for different reason.\ngist logs here https://gist.github.com/anonymous/c7ac66274508a6525b8d\nIn short the error seems to be that it cannot find the shared library libisl.so.13\nHowever, I can see isl installed with brew and it is available at\n~/.linuxbrew/lib/\n. OK I think my case is different from the above. The problem with my issue is ldconfig\nldconfig would report the following error:\nldconfig: Warning: ignoring configuration file that cannot be opened: $HOME/.linuxbrew/Cellar/glibc/2.19/etc/ld.so.conf: No such file or directory\nI see that ld.so.cache symlinked to ld.so.cache in the same folder, but there is no ld.so.conf file.\nIs this a bug?\n. serf seems to compile fine for me but it failed during \"make install\"\nThen I tried brew install --debug subversion\nWhen it raise from ruby\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\nI chose 5\nexecute \"make install\"\nexit shell\nthen choose 4\ndo nothing and exit\nand the installation continued and succeeded.\nNot sure why.\n. I run into the same issue.\nShouldn't a symlink libffi.so be created in .linuxbrew/lib for libffi.so.x.x.x?\n. I am not sure what the default is. My OS is ubuntu trusty.\n. I think it is because of the python I have. Tried in another ubuntu and it installs fine. Thanks!\n. Closing this as this is because my linuxbrew installation is messed up.\n. Forget it. This seems to be fixed. Reinstalling docbook and it works fine. Sorry...\n. Yes, I also have libuuid installed.\nbrew link uuid says\n\"Could not symlink lib/libuuid.a\"\nbrew link --overwrite ossp-uuid works.\nIs there any concern for overwriting the symlink? or they are the same thing?\nThanks,\n. I ran into the same issue as well.\n. Thanks for the reply. After further looking into the gist-log, the problem seems to be the follows:\n```\nchecking for VTE... configure: error: Package requirements (glib-2.0 >= 2.26.0 gobject-2.0 pango >= 1.22.0 gtk+-2.0 >= 2.20.0 gobject-2.0 gio-2.0 gio-unix-2.0 x11 cairo-xlib) were not met:\nNo package 'x11' found\n```\nThere is no such package x11. I didn't see the dependency on x11 in vte.rb though.\n. I am trying to install terminator, and it depends on vte, not vte3.\nOn Mon, Apr 20, 2015 at 7:24 PM, \u674e\u60df notifications@github.com wrote:\n\nyou can\nbrew install vet3\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/362#issuecomment-94616752.\n\n\nWith Regards,\nYu Huang\nSoftware Engineer,\nGoogle Inc.\n. Pull request #462 \n. Checked the installed libressl and I did find libssl.so.32, so I think this is related to issue #439 \n. Just saw this in the formula:\nkeg_only \"LibreSSL is not linked to prevent conflict with the system OpenSSL.\"\n. Will create separate pull request.\n. Can you elaborate more about pyext? Thanks\n. I have updated the change according to tdsmith's comment.\nIt works fine in my test.\nThanks,\n. Sure. Updated.\n. Please advise a better way to change the environment variable to build with system x11. Right now this is hard-coded.\n. brew environment | grep PKG\nreturns\nexport PKG_CONFIG_LIBDIR=\"$HOME/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\"\nFrom https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L96-L103\nIt seems /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig should also be added in the env variable?\n. I have updated the pull request. \n. Sure. But without the pkgconfig trunk, the build error will still be there when installing vte.\nA potential solution could be to modify the code here\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L250-L254\nThe system pkgconfig path can be added here for x11\n. Sure. There can be many ways to have it build successfully. It would be ideal that a formula just works out of the box.\nFaking a package is new to me. Thanks for the tip :P.\n. Just want to revisit the issue brought up here.\nFaking a package by creating symlinks and link the fake package works, but it is inconvenient sometimes. For example, when I try to link the pkgconfigs for x11, they have their own dependencies (e.g. xcb requires pthread-stubs'). We will have to create symlinks for all its dependencies.\nAppending the system pkgconfig paths to the pkgconfig ENV vars seem to be more convenient.\nThe brew diy command doesn't seem to be documented. Can you elaborate a bit how it works with an example?\nThanks,\n. Updated the commits according to comment.\n. The error without this patch is\n/bin/sh: line 3: makeinfo: command not found\nmake[1]: *** [install.info] Error 1\nmake[1]: Leaving directory `/tmp/zsh20150713-13485-19a2t7g/zsh-5.0.8/Doc'\nmake: *** [install.info] Error 2\n. The change and message are updated.\n. I have updated the pull request.\nThis does not work on Mac OS because some files are not available in the gtk+ installation on Mac OS (gdkx.h to be specific).\n. Yes, the old symlink is why this patch is not needed.\n. Linking statically against gmp works fine on linux.\nIt is the step after making ghc fails because of missing shared library\n```\n==> Downloading http://downloads.haskell.org/~ghc/7.6.3/ghc-7.6.3-x86_64-unknown-linux.tar.bz2\n==> ./configure --prefix=/tmp/ghc20151102-21968-1q007is/ghc-7.10.2/binary --with-gmp-includes=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp/include --with-gmp-libraries=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp\nLast 15 lines from /home/paulhybryant/.cache/Homebrew/Logs/ghc/05.configure:\n2015-11-02 16:49:02 +0800\n./configure\n--prefix=/tmp/ghc20151102-21968-1q007is/ghc-7.10.2/binary\n--with-gmp-includes=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp/include\n--with-gmp-libraries=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp/lib\n--with-ld=ld\n--with-gcc=/home/paulhybryant/.linuxbrew/bin/ygcc-5\nconfigure: WARNING: unrecognized options: --with-ld\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\n/home/paulhybryant/.linuxbrew/Library/Homebrew/debrew.rb:11:in `raise'\nBuildError: Failed executing: ./configure --prefix=/tmp/ghc20151102-21968-1q007is/ghc-7.10.2/binary --with-gmp-includes=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp/include --with-gmp-libraries=/home/paulhybryant/.linuxbrew/Cellar/ghc/7.10.2/libexec/integer-gmp/lib --with-ld=ld --with-gcc=/home/paulhybryant/.linuxbrew/bin/gcc-5\n```\n. This PR no longer works for some reason. Now it complains about not being able to link to gmp\n. ghc install would still fail without the change here, complaining about not being able to find libgmp.so.3\nWith the change in this PR it now works.\nThanks,\n. And the change for linking the dynamic library should be\nln_sf \"#{gmp}/lib/libgmp.so.10.3.0\", \"#{gmp}/lib/libgmp.so.3\"\nI will update the PR.\n. Thanks, I am not very familiar with ruby.\nWhat does Dir[\"#{gmp}/lib/libgmp.so.*\"] mean? Which file will libgmp.so.3 point to?\n. Thanks, updated the PR.\n. Thank you for the fix and maintaining linuxbrew!\n. Thanks. I am closing this PR then.\n. It seems it is not ignored. When I try to upgrade / install a formula that depends on libpng, I run into this issue.\n. ok, this is what I just did.\n```\n$ brew uninstall libpng\n$ brew install libpng (this is with the unchanged libpng.rb)\n==> Downloading\nftp://ftp.simplesystems.org/pub/libpng/png/src/libpng16/libpng-1.6.19.tar.xz\nAlready downloaded: /home/yuhuang/.cache/Homebrew/libpng-1.6.19.tar.xz\n==> ./configure --disable-silent-rules\n--prefix=/home/yuhuang/.linuxbrew/Cellar/libpng/1.6.19\n==> make\n==> make test\n==> make install\n==> Caveats\nThis formula is keg-only, which means it was not symlinked into\n/home/yuhuang/.linuxbrew.\nOS X already provides this software in versions before Mountain Lion.\nGenerally there are no consequences of this for you. If you build your\nown software and it requires this formula, you'll need to add to your\nbuild variables:\nLDFLAGS:  -L/home/yuhuang/.linuxbrew/opt/libpng/lib\nCPPFLAGS: -I/home/yuhuang/.linuxbrew/opt/libpng/include\n\n==> Summary\n/home/yuhuang/.linuxbrew/Cellar/libpng/1.6.19: 17 files, 1.3M, built in 27\nseconds\n$ vi\nvi: error while loading shared libraries: libpng16.so.16: cannot open\nshared object file: No such file or directory\n$ brew link --force libpng\nLinking /home/yuhuang/.linuxbrew/Cellar/libpng/1.6.19... 19 symlinks\n$ vi\n```\n(now everything works fine)\n. Curious, I have done this before as well. Do you have to fake the x11 packages? Because the pkgconfig files for e.g. xcb cannot be found otherwise.\n. Yeah, that is why I ask my question in my reply. I don't think linuxbrew supports the \":x11\" dependencies or am I wrong? In the past what I have to do is to change PKG_CONFIG_PATH / PKG_CONFIG_LIB in the formula, but it seems in this PR adding the dependency of \":x11\" will work just fine.\n. Thanks for the clarification @sjackman . \n@Rudloff In that case I am wondering how this PR works as the pkgconfig for xcb will not be found from linuxbrew, unless it is manually symlinked somewhere in linuxbrew's pkgconfig search path (is that what you did?), or additional paths are added in PKG_CONFIG_PATH in the formula (which is not the case in this PR)\n. Thanks, I have updated the PR accordingly.\n. ",
    "OmeGak": "I just tried to install ruby-build and the m4 dependency is still missing. Any plan to specify these system dependencies as @sjackman or @mistydemeo were proposing?\n. Thanks for the quick fix! Linuxbrew is getting really stable. :smiley:\n. I'm was also trying to install openssl both as a requirement or a standalone package and always getting the same error when trying to compile cryptlib. The problem seemed to be with libc (maybe due to an outdated version since I'm on Ubuntu 12.04?). On top of it, in the end, the error message complains about pkgutil, which is obviously not available in my system.\nThis is the output I was getting:\nbash\n$ brew install openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.1h.tar.gz\nAlready downloaded: /home/omegak/.cache/Homebrew/openssl-1.0.1h.tar.gz\n==> perl ./Configure --prefix=/home/omegak/.linuxbrew/Cellar/openssl/1.0.1h --openssldir=/home/omegak/.linuxbrew/etc/openssl zlib-dynamic shared enable-cms linux-x86_64\n==> make depend\n==> make\n/usr/include/features.h:324:26: fatal error: bits/predefs.h: No such file or directory\ncompilation terminated.\nmake[1]: *** [cryptlib.o] Error 1\nmake[1]: Leaving directory `/tmp/openssl-loS5/openssl-1.0.1h/crypto'\nmake: *** [build_crypto] Error 1\nError: No such file or directory - /usr/sbin/pkgutil\nI fixed it by:\nbash\nsudo apt-get install gcc-multilib\nShouldn't this dependency be checked in the formula?\n. I bumped into another problem trying to compile openssl during make test this time on Ubuntu 12.04. I am getting the following output when installing with verbose:\n==> make test\ntesting...\nmake[1]: Entering directory `/tmp/openssl-xlis/openssl-1.0.1h/test'\nmake[2]: Entering directory `/tmp/openssl-xlis/openssl-1.0.1h'\nmaking all in apps...\nmake[3]: Entering directory `/tmp/openssl-xlis/openssl-1.0.1h/apps'\nmake[3]: Nothing to be done for `all'.\nmake[3]: Leaving directory `/tmp/openssl-xlis/openssl-1.0.1h/apps'\nmake[2]: Leaving directory `/tmp/openssl-xlis/openssl-1.0.1h'\n../util/shlib_wrap.sh ./destest\nERROR: ld.so: object '../util/../libcrypto.so.1.0.0' from LD_PRELOAD cannot be preloaded: ignored.\nERROR: ld.so: object '../util/../libssl.so.1.0.0' from LD_PRELOAD cannot be preloaded: ignored.\n./destest: 1: ./destest: h@8: not found\n./destest: 1: ./destest: 0: not found\n./destest: 1: ./destest: \ufffd\u0001\ufffd\u0004\u0004TT@T@DD\u0004P\ufffdtd\u0004\ufffdO\ufffdO@\ufffdO@: not found\n./destest: 1: ./destest: \ufffd\u0001\ufffd\u0001\u0001/lib64/ld-linux-x86-64.so.2\u0004\u0010\u0001GNU\u0006\u0018\u0004\u0014GNU\ufffdzt.~\ufffdN\ufffdS@\ufffd\u001b: not found\n./destest: 2: ./destest: \ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\u001b\u0001\u0006\ufffd\ufffd: not found\n./destest: 2: ./destest: \ufffdqX\u001c\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\u0012e\u0001\u0012B\u0001\u0012\ufffd\u0001\u0012W\u0001\u0012\ufffd\u0012\ufffd\u0012\ufffd\u0001\u0012\u001f\u0001\u0012\ufffd\u0012\ufffd\u0001\u0012\ufffd\u0001\u0012\ufffd\u00120\u0001\u0012\u0001: not found\n./destest: 1: ./destest: \ufffd\u0001\u0010\ufffd\ufffd8g: not found\n./destest: 1: ./destest: \u007fELF\u0001\u0001: not found\n./destest: 3: ./destest: Syntax error: \")\" unexpected\nmake[1]: *** [test_des] Error 2\nmake[1]: Leaving directory `/tmp/openssl-xlis/openssl-1.0.1h/test'\nmake: *** [tests] Error 2\nError: No such file or directory - /usr/sbin/pkgutil\nI've tried compiling the same release manually and it works just fine, so somehow brew is fiddling with it in some way beyond my comprehension. Any idea what could be the problem?\n. Only with openssl so far.\n. The formula fails in Ubuntu 12.04. \nmake[3]: Entering directory `/tmp/linux-pam-cZld/Linux-PAM-1.1.8/conf/pam_conv1'\n/usr/bin/gcc -DHAVE_CONFIG_H -I. -I../..   -isystem/home/omegak/.linuxbrew/include  -Os -w -pipe -march=core2 -c pam_conv_l.c\n/usr/bin/gcc -DHAVE_CONFIG_H -I. -I../..   -isystem/home/omegak/.linuxbrew/include  -Os -w -pipe -march=core2 -c pam_conv_y.c\n/bin/bash ../../libtool --tag=CC   --mode=link /usr/bin/gcc  -Os -w -pipe -march=core2  -L/home/omegak/.linuxbrew/lib -Wl,-headerpad_max_install_names -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -o pam_conv1 pam_conv_l.o pam_conv_y.o  \nlibtool: link: /usr/bin/gcc -Os -w -pipe -march=core2 -Wl,-headerpad_max_install_names -Wl,--as-needed -Wl,--no-undefined -Wl,-O1 -o pam_conv1 pam_conv_l.o pam_conv_y.o  -L/home/omegak/.linuxbrew/lib\npam_conv_l.o: In function `yylex':\npam_conv_l.c:(.text+0x9b1): undefined reference to `yywrap'\ncollect2: ld returned 1 exit status\nmake[3]: *** [pam_conv1] Error 1\nmake[3]: Leaving directory `/tmp/linux-pam-cZld/Linux-PAM-1.1.8/conf/pam_conv1'\nmake[2]: *** [install] Error 2\nmake[2]: Leaving directory `/tmp/linux-pam-cZld/Linux-PAM-1.1.8/conf/pam_conv1'\nmake[1]: *** [install-recursive] Error 1\nmake[1]: Leaving directory `/tmp/linux-pam-cZld/Linux-PAM-1.1.8/conf'\nmake: *** [install-recursive] Error 1\n. I found another problem that I can't manage to solve. This one is after installing and it's preventing me from using Postgresql at all. Running psql returns the following error.\nbash\n$ psql\npsql: symbol lookup error: psql: undefined symbol: PQenv2encoding\nThe problem seems to be related with libpq not being available to the binary. It is properly installed in Cellar/postgresql/9.3.4/lib/libpq.so, but it's not listed as a shared library dependency.\nbash\n$ ldd $(which psql)\n    linux-gate.so.1 =>  (0xb7783000)\n    libssl.so.1.0.0 => /lib/i386-linux-gnu/libssl.so.1.0.0 (0xb7712000)\n    libreadline.so.6 => /lib/i386-linux-gnu/libreadline.so.6 (0xb76d8000)\n    libtinfo.so.5 => /lib/i386-linux-gnu/libtinfo.so.5 (0xb76b8000)\n    libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb750e000)\n    libcrypto.so.1.0.0 => /lib/i386-linux-gnu/libcrypto.so.1.0.0 (0xb7363000)\n    /lib/ld-linux.so.2 (0xb7784000)\n    libdl.so.2 => /lib/i386-linux-gnu/libdl.so.2 (0xb735e000)\n    libz.so.1 => /lib/i386-linux-gnu/libz.so.1 (0xb7348000)\n. @sjackman, just reporting on your workaround to avoid sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64. Using export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu didn't work for me. Tested on a fresh Elementary OS Freya (Ubuntu 14.04).\nHere's the traceback I got if it helps:\n``\n/home/omegak/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find crti.o: No such file or directory\n/home/omegak/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find -lc\n/home/omegak/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find crtn.o: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake[3]: *** [libgcc_s.so] Error 1\nmake[3]: Leaving directory/tmp/gcc20151120-8320-1athun6/gcc-5.2.0/build/x86_64-unknown-linux-gnu/libgcc'\nmake[2]:  [all-stage1-target-libgcc] Error 2\nmake[2]: Leaving directory /tmp/gcc20151120-8320-1athun6/gcc-5.2.0/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory/tmp/gcc20151120-8320-1athun6/gcc-5.2.0/build'\nmake:  [bootstrap] Error 2\n``\n. A bit more info.include/string.his pointing toCellar/glibc/2.19/include/string.h`. \nI think I've found the source of discrepancy: http://man7.org/linux/man-pages/man3/strerror.3.html\n``` c\nint strerror_r(int errnum, char buf, size_t buflen);\n    / XSI-compliant */\nchar strerror_r(int errnum, char buf, size_t buflen);\n    / GNU-specific /\n```\nSince gcc is invoked with -D_GNU_SOURCE, the GNU-specific specification of strerror_r is used instead of the XSI-compliant one expected by libxml2. Source: stackoverflow.\nThis makes me wonder whether standalone installation is solving much, if formulas are not expecting to find GNU-compliant headers, or that maybe along the way I missed some pretty critical step.\n. Dirty hack saved the day. I managed to workaround the problem by editing string.h and returning int as expected by libxml2. I'd still like to find the reason why this happened and, if possible, help finding a clean solution if I'm not the only one affected by this.\nI also found another caveat with ncurses along the way to install Posgres. This time, libxml2 was trying to use libncursesw.so.5, but brew installs libncursesw.so.6. I simply symlinked the missing library to the one installed and the installation went fine from then on. I don't know if it's related to the initial issue.\n. I'm also affected by this. I can't install any formula without manually fetching it first.\nThis is what I get trying to install a formula:\nbrew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nError: Failed to download resource \"hello\"\nDownload failed: http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nThen I proceed to fetch without any trouble:\n```\nbrew fetch hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\n==> Downloading from http://mirror.switch.ch/ftp/mirror/gnu/hello/hello-2.10.tar.gz\n################################################################## 100.0%\nDownloaded to: /home/omegak/.cache/Homebrew/hello-2.10.tar.gz\nSHA1: f7bebf6f9c62a2295e889f66e05ce9bfaed9ace3\nSHA256: 31e066137a962676e89f69d1b65382de95a7ef7d914b8cb956f41ea72e0f516b\n```\nAnd then installing works fine as the formula was already fetched:\nbrew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nAlready downloaded: /home/omegak/.cache/Homebrew/hello-2.10.tar.gz\n==> ./configure --disable-silent-rules --prefix=/home/omegak/.linuxbrew/Cellar/hello/2.10\n^C\nIt's extremely annoying as I have to do this manually for each dependency as well. \nI would keep the issue open, since it doesn't seem to be a network issue.\nIn case it helps, this is my brew config.\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: 1d35a3484c16639be18e95d30ad194f13a5639ca\nLast commit: 9 hours ago\nHOMEBREW_PREFIX: /home/omegak/.linuxbrew\nHOMEBREW_REPOSITORY: /home/omegak/.linuxbrew\nHOMEBREW_CELLAR: /home/omegak/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: quad-core 64-bit ivybridge\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: 2.7.8 => /usr\nSystem Ruby: 2.2.3 => /home/omegak/.linuxbrew/Cellar/ruby/2.2.3/bin/ruby\nPerl: /home/omegak/.linuxbrew/bin/perl => /home/omegak/.linuxbrew/Cellar/perl/5.22.0/bin/perl\nPython: /home/omegak/.linuxbrew/bin/python => /home/omegak/.linuxbrew/Cellar/python/2.7.10_2/bin/python2.7\nRuby: /home/omegak/.linuxbrew/bin/ruby => /home/omegak/.linuxbrew/Cellar/ruby/2.2.3/bin/ruby\nJava: 1.7.0_95\n. The failed download doesn't produce any log, apparently.\n$ rm -f `brew --cache hello`\n$ brew install -v hello || brew gist-logs hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\n/home/omegak/.linuxbrew/opt/curl/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux) http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz -C 0 -o /home/omegak/.cache/Homebrew/hello-2.10.tar.gz.incomplete\nError: Failed to download resource \"hello\"\nDownload failed: http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nError: No logs.\n. Reporting.\nwhich -a curl\n/home/omegak/.linuxbrew/bin/curl\n/usr/bin/curl\ncurl --version\ncurl 7.47.1 (x86_64-pc-linux-gnu) libcurl/7.47.1 OpenSSL/1.0.2f zlib/1.2.8\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets\nbrew list --versions curl\ncurl 7.47.1 7.45.0\n. No such file. I haven't configured anything about curl ever.\n. I still think there's some issue here. I can download just fine things from curl and brew fetch, but not from brew install.\nbrew -v install hello                                                                                                                                                                                                                                                                                                       \n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\n/home/omegak/.linuxbrew/opt/curl/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux) http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz -C 0 -o /home/omegak/.cache/Homebrew/hello-2.10.tar.gz.incomplete\nError: Failed to download resource \"hello\"\nDownload failed: http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nI then go and try curl directly and it works:\n/home/omegak/.linuxbrew/opt/curl/bin/curl -fLA \"Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux)\" http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz -C 0 -o /home/omegak/.cache/Homebrew/hello-2.10.tar.gz.incomplete\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   329  100   329    0     0    272      0  0:00:01  0:00:01 --:--:--  1788\n100  708k  100  708k    0     0   528k      0  0:00:01  0:00:01 --:--:--  528k\nThe only difference is that I had to quote Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux).\nAny suggestion on how to keep investigating this?\n. @Neraste, as far as I know I'm not behind a proxy.\n. Reporting with util-linux. hello link seems to be down.\n$ export HOMEBREW_VERBOSE=1 HOMEBREW_CURL_VERBOSE=1\n$ brew install util-linux                          \n==> Downloading https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz\n/home/omegak/.linuxbrew/opt/curl/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux) https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz -C 0 -o /home/omegak/.cache/Homebrew/util-linux-2.27.1.tar.xz.incomplete --verbose\nWarning: /home/omegak/.curlrc:1: warning: 'xyz' is unknown\nError: Failed to download resource \"util-linux\"\nDownload failed: https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz\n```\n$ brew fetch util-linux\n==> Downloading https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz\n/home/omegak/.linuxbrew/opt/curl/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux) https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz -C 0 -o /home/omegak/.cache/Homebrew/util-linux-2.27.1.tar.xz.incomplete --verbose\nWarning: /home/omegak/.curlrc:1: warning: 'xyz' is unknown\n   Trying 198.145.20.140...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0 Connected to www.kernel.org (198.145.20.140) port 443 (#0)\n ALPN, offering http/1.1\n Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\n successfully set certificate verify locations:\n   CAfile: /home/omegak/.linuxbrew/etc/openssl/cert.pem\n  CApath: none\n TLSv1.2 (OUT), TLS header, Certificate Status (22):\n} [5 bytes data]\n TLSv1.2 (OUT), TLS handshake, Client hello (1):\n} [512 bytes data]\n TLSv1.2 (IN), TLS handshake, Server hello (2):\n{ [111 bytes data]\n NPN, negotiated HTTP1.1\n{ [5 bytes data]\n TLSv1.2 (IN), TLS handshake, Certificate (11):\n{ [3585 bytes data]\n TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n{ [589 bytes data]\n TLSv1.2 (IN), TLS handshake, Server finished (14):\n{ [4 bytes data]\n TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n} [70 bytes data]\n TLSv1.2 (OUT), TLS change cipher, Client hello (1):\n} [1 bytes data]\n TLSv1.2 (OUT), TLS handshake, Unknown (67):\n} [36 bytes data]\n TLSv1.2 (OUT), TLS handshake, Finished (20):\n} [16 bytes data]\n TLSv1.2 (IN), TLS change cipher, Client hello (1):\n{ [1 bytes data]\n TLSv1.2 (IN), TLS handshake, Finished (20):\n{ [16 bytes data]\n SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\n ALPN, server did not agree to a protocol\n Server certificate:\n        subject: description=MGg8751JzNRM4B4E; C=US; ST=California; L=San Francisco; O=The Linux Foundation; CN=www.kernel.org; emailAddress=webmaster@kernel.org\n        start date: Apr  9 01:01:47 2014 GMT\n        expire date: Apr  8 15:03:50 2016 GMT\n        subjectAltName: www.kernel.org matched\n        issuer: C=IL; O=StartCom Ltd.; OU=Secure Digital Certificate Signing; CN=StartCom Class 2 Primary Intermediate Server CA\n        SSL certificate verify ok.\n} [5 bytes data]\n\nGET /pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz HTTP/1.1\nHost: www.kernel.org\nUser-Agent: Homebrew 0.9.5 (Ruby 2.2.3-173; x86_64-linux)\nAccept: /\n{ [5 bytes data]\n< HTTP/1.1 200 OK\n< Server: nginx\n< Date: Fri, 19 Feb 2016 13:05:12 GMT\n< Content-Type: application/x-xz\n< Content-Length: 3964512\n< Connection: keep-alive\n< Last-Modified: Mon, 02 Nov 2015 11:06:37 GMT\n< ETag: \"3c7e60-5238cc55aa940\"\n< Accept-Ranges: bytes\n< Strict-Transport-Security: max-age=15768000\n< X-Frame-Options: DENY\n< \n{ [3850 bytes data]\n100 3871k  100 3871k    0     0  1529k      0  0:00:02  0:00:02 --:--:-- 1530k\n* Connection #0 to host www.kernel.org left intact\nDownloaded to: /home/omegak/.cache/Homebrew/util-linux-2.27.1.tar.xz\nSHA1: 462bca6320535d39b62216d8609da5531bfef0bb\nSHA256: 0a818fcdede99aec43ffe6ca5b5388bff80d162f2f7bd4541dca94fecb87a290\n==> Verifying util-linux-2.27.1.tar.xz checksum\n``\n. I'd saycurlfails even before it starts downloading onbrew install`.\n\nI don't know much about the internals of homebrew, but I gather that that both brew install and brew fetch make use of Resource class, end up calling fetch on it eventually and there is where DownloadError is raised. \nI have no idea why or how, but it seems the problem comes from here. I'll probably add some print statements there later today to see if I spot the difference.\n. Just reinstalled curl with homebrewed gcc and nothing changes. brew test curl works fine, though.\nReporting brew config:\n$ brew config | egrep 'OS|Linuxbrew'\nHOMEBREW_REPOSITORY: /home/omegak/.linuxbrew\nOS: elementary OS Freya\nOS glibc: 2.19\nOS gcc: 4.8.4\nLinuxbrew glibc: 2.19\nLinuxbrew gcc: 5.3.0\n. A bit more research on my end. The error is definitely coming from here. The parameters passed to curl, both for install and fetch (util-linux) are:\n- @url: https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz\n- downloaded_size: 28672\n- temporary_path: /home/omegak/.cache/Homebrew/util-linux-2.27.1.tar.xz.incomplete\nSo it seems in principle the call is exactly the same, but the outcome is that brew install fails immediately after calling curl with at least the an url and HOMEBREW_CURL_VERBOSE=1 doesn't make it show more information.\nI added system(\"which curl\") statement right before and in both cases the binary being used is /home/omegak/.linuxbrew/bin/curl.\nAny idea on where to check next?\n. I simply tried passing different stuff to curl modifying but I didn't manage to work around the issue. But it finally works for me after brew update. :wink: \nThis was a tricky one. Thanks a lot for the patience!\n. The problem with installing dbus-glib is that it depends on d-bus, which looked to me like an OSX only package as #987 is reporting. The host keg worked like a charm.\n. Thank you guys. This makes it much cleaner to install.\n. ",
    "meoow": "According to the man page, it seems that mktemp taking exactly 6 Xs is of OpenBSD version, GNU and FreeBSD versions take arbitrary number of Xs. \n. ",
    "xxxajk": "mktemp -V\nmktemp version debianutils-2.7\n. Still an issue, the fix is to use 6 X's not 4, as stated above.\n. To be specific on the lines, just add 2 X's to the template here:\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/cmd/doctor.rb#L704\nand here:\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/fileutils.rb#L17\nThis fix couldn't be any easier.\n. I could do that, but... for two lines?? If you really want me to, I'll do this. :-)\n. Ok :-) will do.\n. I did all the editing right on github, and submitted the pull request.\nhttps://github.com/Homebrew/linuxbrew/pull/118\n. https://github.com/Homebrew/homebrew/pull/31586\n. Not an option, this is system wide, not a personal instal... Basically, I am considering using linuxbrew for a personal distribution, and supporting more than just pc platforms.\n. Well, here is an idea, detect if we are running as someone who has the rights to run ldconfig, and execute it, otherwise, do the RPATH trick.\n. To be a bit more verbose on said idea:\n-rwxr-xr-x 1 root root 823085 2013-09-15 19:29 /sbin/ldconfig*\nBasically if you are root, or belong to the root group, at least on my system, /sbin/ldconfig can be executed. Other systems will have different groups, I'm sure. \nSome may have a different location for ldconfig, so use the which utility to find it.\npseudocode:\nid -u from sh will give the UID, if it is zero, run /sbin/ldconfig \nelse\nget the GID from ldconfig stat -c \"%g\" /sbin/ldconfig\nid -G from sh will give a list of all the GIDs for a user, if one of them matches the GID on ldconfig, run /sbin/ldconfig\nelse\nuse rpath :-)\n. Certainly :-)\n. ",
    "mbsullivan": "Neat RPATH trick! It seems like it should be in a wiki page somewhere (like Tips N' Tricks?) because it is probably quite useful on many systems.\nI'd be interested in seeing a working Linux from scratch + linuxbrew system too. I'm currently trying to see if linuxbrew can serve as a lightweight Gentoo prefix replacement on an outdated system where I don't have admin access. It's going fairly well so far -- I'm very pleased by how simple and transparent the system is -- but if somebody had gotten an entire system built from scratch with it I think it'd serve as useful guidance.\n. Shaun: after I commented, I read the rest of #7. The bottle path sounds very helpful for me, especially its inclusion of glibc! (The system I'm working on has glibc 2.05, from 2006.)\nI think that portable Linuxbrew bottles are a fantastic idea that could help a lot of people! Many large systems, even new ones, are stuck with old software stacks due to the difficulty of changing. For instance, the system I'm struggling with is not old, it's just stuck with CentOS 5.5.\nI'll open up a new issue and will test out the bottle branch's glibc formula shortly.\n. @agordon, the website is down. Is this a temporary outage, or is it gone?\nEdit: Nevermind, it's back up! Looks good, nice and concise tutorial.\n. I have been having similar issues when running linuxbrew. Some packages suffer from the /usr/sbin/pkgutil issue, while others do not.\nFirst off, not being a Mac user myself, it is a bit confusing to me how pkgutil ties into Linuxbrew. My (admittedly poor) understanding is that pkgutil is a utility for dealing with Mac packages. Why would a dependency installed on Linux from a package manager (such as yum or apt-get) have such a utility? \n@benswift, I have installed all of the dependencies listed in the readme and it did not resolve the issue. Furthermore,  yum whatprovides /usr/sbin/pkgutil returns nothing, so it seems that no Fedora package installs such a file.\n@redline6561, I also have this problem with the program hanging on an error when in debug mode. I thought I had found another issue describing a similar problem, but now I cannot find it.\nMike\n. Hi Ben,\nI actually have not tried to build extempore. I was more just chiming in that I have been getting the same /usr/sbin/pkgutil errors as @mrcodydaniel when using linuxbrew.\nIt kind of seems like a reporting side effect of other errors, though. For example, when trying to install python, it fails on something and then reports the /usr/sbin/pkgutil \"error\":\nbrew install -v python --cc=gcc-4.8\n...\n==> Installing python\n==> Downloading http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz\nAlready downloaded: /home1/01166/mbsulliv/.cache/Homebrew/python-2.7.8.tgz\n==> Verifying python-2.7.8.tgz checksum\ntar xf /home1/01166/mbsulliv/.cache/Homebrew/python-2.7.8.tgz\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nError: No such file or directory - /usr/sbin/pkgutil\nThis makes it seem to me like the underlying issues are actually not with /usr/sbin/pkgutil. Regardless, I find it to be a bad and confusing error message -- especially on Linux, where Mac OS X installer packages have no meaning. \nMike\n. @mcflugen, I can reproduce your gettext problem. Commenting out that line works for me as well.\nI'm curious: (1) how did you figure out to comment out that line? and (2) what error did you get prior to the /usr/sbin/pkgutil line? For me, I get this very generic error message that doesn't give any useful guidance:\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\n==> ./configure --disable-dependency-tracking --disable-debug --prefix=/work/01166/mbsulliv/.linuxbrew/Cellar/gettext/0.18.3.2 --with-included-gettext --with-included-glib --with-included-libcroco --with-included-libunistring --with-emacs --disable-java --disable-csharp --without-git --without-cvs\nFailed to execute: ./configure\n. It seems like minor changes to Library/Homebrew/extend/ENV/std.rb make it so that the ENV.libxml2 line no longer causes an error.\nI created a pull request with the changes to #109.\n. Hmm, okay great! That sounds promising. I'll remove glibc and all the dependencies and will see how it goes tomorrow.\n. I tried brew install glibc --with-binutils --with-linux-headers out today, and it works great! The only hiccup was with binutils, as above:\n*** These critical programs are missing or too old: as ld\nThis leads me to two questions:\n(1) Why are binutils and linux-headers marked as optional? Because you're assuming that they're probably somewhere on the system-wide paths?\n(2) Under Linux, would it be appropriate to eliminate \"--program-prefix=g\" from the binutils formula?\n. Hmmm, while the installation of glibc went swimmingly, it seems to have broken any further builds. It always complains with errors like the following:\nchecking whether the C compiler works... no\n...\nconfigure: error: C compiler cannot create executables\nI tried uninstalling and reinstalling my linuxbrew version of gcc, but with glibc 2.19 installed it gets equally angry with my (old) system version of gcc such that I cannot get the linuxbrew formula for gcc to build.\nchecking ABI=64\nchecking compiler /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/work/3931105305/.linuxbrew_bottle/include... no\nchecking ABI=x32\nchecking compiler /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/work/3931105305/.linuxbrew_bottle/include... no\nchecking ABI=32\nchecking compiler /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/work/3931105305/.linuxbrew_bottle/include... no\nconfigure: error: could not find a working compiler, see config.log for details\n. > You'll have to clear your LD_LIBRARY_PATH:\nThat's not the issue -- it's already done. (If I hadn't cleared my LD_LIBRARY_PATH then no system coreutils would work, since the system is using an older glibc version.)\n\nOr alternatively, brew unlink glibc\n\nWait, I'm confused... I thought that the whole point of the RPATH patch was to force brewed programs to use the proper libraries, even when they differ from binary to binary. So after I install glibc 2.19, why don't existing programs use the (old) system glibc with which they were brewed, and newly brewed programs use 2.19?\nIf I have to unlink glibc in order to keep things working, then what's the point of installing it in the first place?\n. > Programs patched with patchelf when they were installed will continue to use the new glibc whether it's linked or not. \nI tried to test whether this was the case but ldd says that my new programs are using a motley assortment of libraries, including the system glibc.\nFollowing this procedure on the bottle branch:\n(1) install patchelf,  gcc, binutils, linux-headers\n(2) create symlinks to the brewed gas and gld binaries\n(3) install glibc\n(4) unlink glibc\n(5) install luajit\nThen ldd luajit gives:\n```\n\nldd ./luajit \n    libm.so.6 => /lib64/libm.so.6 (0x000000351fc00000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x000000351f800000)\n    libgcc_s.so.1 => /opt/apps/gcc/4.7.1/lib64/libgcc_s.so.1 (0x00002b4dae62e000)\n    libc.so.6 => /lib64/libc.so.6 (0x000000351f400000)\n    /work/01166/mbsulliv/.linuxbrew_bottle/opt/glibc/lib/ld-linux-x86-64.so.2 => /lib64/ld-linux-x86-64.so.2 (0x000000351f000000)\n```\n\nDoes ldd not respect the patchelf patch? Or am I misunderstanding something?\nPS, I am using the old system ldd above. The ldd that is installed along with glibc 2.19 (located at .linuxbrew_bottle/opt/glibc/bin/ldd) does not recognize any programs as being dynamic executables, including luajit.\n\nI'm on vacation for my sister's wedding. I'll be back in a week to help troubleshoot.\n\nHaha, no rush and thank you for your help so far! I've actually gotten things to a good state using gcc-4.8/vim/libraries from the master branch of linuxbrew, so your work has already helped me. I'm testing the bottle branch and glibc because I'm interested in their possibilities, but it's not a time-critical matter at all.\n. @sjackman, using LD_TRACE_LOADED_OBJECTS as indicated here seems to have no effect for me. The system libraries are still used.\nFantastic work with the standalone instructions, but I have a few issues with my machine setup. I will address them in a separate comment shortly.\n. PS, whoops sorry for closing.\n. So, my issues with the standalone instructions all relate to problems with gcc-4.9 so far rather than anything with the instructions themselves.\nI have different problems on an old system and a new system, so I've separated them below:\nOld system:\nOn a system with an old system installation of /usr/bin/gcc (gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-54)), I think I run into issues due to the age of the compiler. (PS, this is the same version as @jrevillard, but he seems to have gotten gcc-4.9 installed somehow.)\nThe error it throws is:\ng++: braced spec '%:sanitize(address):%{!shared:libasan_preinit%O%s} %{static-libasan:%{!shared:-Bstatic --whole-archive -lasan --no-whole-archive -Bdynamic}}%{!static-libasan:-lasan}}     %{%:sanitize(thread):%{static-libtsan:%{!shared:-Bstatic --whole-archive -ltsan --no-whole-archive -Bdynamic}}%{!static-libtsan:-ltsan}}' is invalid at '%'\nmake[3]: *** [lto1] Error 1\nmake[3]: *** Waiting for unfinished jobs....\nrm gcc.pod\nmake[3]: Leaving directory `/tmp/gcc-v31236/gcc-4.9.1/build/gcc'\nmake[2]: *** [all-stage1-gcc] Error 2\nmake[2]: Leaving directory `/tmp/gcc-v31236/gcc-4.9.1/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory `/tmp/gcc-v31236/gcc-4.9.1/build'\nmake: *** [bootstrap] Error 2\nI have newer versions of gcc installed elsewhere on the system (not managed by this Linuxbrew branch). However, there is no way to use these versions in lieu of /usr/bin/gcc, right?\nNew system (Fedora Core 20, using gcc (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)):\nI get the same error as @aktau in #123.\nMike\n. @sjackman, no can do. No admin access.\nEDIT: Wait, I read that backwards. I see now. Lemme try.\nEDIT 2: It gets the same error linking to a system installation of gcc 4.7.1. It must be due to some other oddity in the system gcc setup then, I guess. Linuxbrew's gcc formula installed fine for me back when it was 4.8, but unfortunately versions/gcc48 does not work.\n. The error is the same between gcc 4.1.2 and gcc 4.7.1 on the CentOS system. It's not a configure error, so there is nothing unusual in config.log.\nThe error that is printed to the screen is as follows:\ng++-4.7: fatal error: braced spec '%:sanitize(address):%{!shared:libasan_preinit%O%s} %{static-libasan:%{!shared:-Bstatic --whole-archive -lasan --no-whole-archive -Bdynamic}}%{!static-libasan:-lasan}}     %{%:sanitize(thread):%{static-libtsan:%{!shared:-Bstatic --whole-archive -ltsan --no-whole-archive -Bdynamic}}%{!static-libtsan:-ltsan}}' is invalid at '%'\ncompilation terminated.\nmake[3]: *** [lto1] Error 1\nmake[3]: *** Waiting for unfinished jobs....\nrm gcc.pod\nmake[3]: Leaving directory `/tmp/gcc-D20868/gcc-4.9.1/build/gcc'\nmake[2]: *** [all-stage1-gcc] Error 2\nmake[2]: Leaving directory `/tmp/gcc-D20868/gcc-4.9.1/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory `/tmp/gcc-D20868/gcc-4.9.1/build'\nmake: *** [bootstrap] Error 2\nI see nothing else unusual in the Library/Logs/Homebrew/gcc/02.make log.\n. @sjackman, yes installing and testing hello works.\nIf I got gcc installed on a different distro (after #123 is fixed), would it work under CentOS following the standalone installation instructions?\n. @sjackman, that sounds great! I will test it out and will open another issue to discuss what comes up.\n. Self-contained Linux bottles are very exciting! I think they have a huge amount of potential.\nSorry for not chiming in more for a couple of weeks, I've been unable to get the new gcc (4.9) to install on any of the three systems I've tried and do not have time to debug it. A bottle of gcc would be very valuable for situations such as these! :)\nPS: Amazingly, gcc now builds under the first machine I had tried -- I'm not sure if a Homebrew update fixed it, or if my environment is subtley different now, but I no longer get the tricky error from #130. At one point, it does complains with the following, but it goes on to (seemingly) successfully complete:\n../../zlib/../config-ml.in: eval: line 160: unexpected EOF while looking for matching `''\n../../zlib/../config-ml.in: eval: line 161: syntax error: unexpected end of file\n(Oddly enough, one of the other machines I tried it on failed directly after this error message. I thought it was a fail-stop condition, so now I'm confused.)\nWith gcc actually installed, I was able to make it most of the way through the standalone instructions. There were some errors with gawk, libxslt, and ruby that I have to debug, though. It is very cool to be close to a standalone installation of Linuxbrew! It is like a Gentoo prefix installation with the glibc hack, but way less opaque.\n. In case it helps anybody else, my initial errors and fixes for gawk, libxslt, and ruby follow:\n(1) gawk built fine, but failed 5 tests. The hackish fix was to remove make check from the recipe.\n(2) libxslt failed after being dissapointed with my system libgcrypt installation:\nchecking for libgcrypt-config... /usr/bin/libgcrypt-config\nCrypto extensions will be available.\n...\ncrypto.c:330:20: fatal error: gcrypt.h: No such file or directory\nThe fix was to brew install libgcrypt. (I also had to remove make check from its recipe, because it failed a test.\n(3) ruby, it seems to not like something with ncurses:\n/work/01166/mbsulliv/.linuxbrew_standalone/bin/ld: /work/01166/mbsulliv/.linuxbrew_standalone/lib/libncurses.a(lib_termcap.o): relocation R_X86_64_32 against `_nc_globals' can not be used when making a shared object; recompile with -fPIC\n/work/01166/mbsulliv/.linuxbrew_standalone/lib/libncurses.a: error adding symbols: Bad value\ncollect2: error: ld returned 1 exit status\nMakefile:236: recipe for target '../../.ext/x86_64-linux/readline.so' failed\nmake[2]: *** [../../.ext/x86_64-linux/readline.so] Error 1\nI'm still working on this. It looks like I can manually configure it --without-readline.\n. > For gawk, try running brew postinstall glibc.\nThis fails with:\n==> chmod +x /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/libc.so.6\n==> /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/bin/localedef -i C C\ncannot open locale definition file `C': No such file or directory\n\nFor libxslt, adding --without-crypto to configure might work. If it does, please submit a pull request to Linuxbrew.\n\nThat works! Pull request at #147.\n\nFor ruby, ...\n\nAwesome, that works! Should those links be created by brew install libncurses by default?\n. > glibc cannot be installed in a directory found in LD_LIBRARY_PATH or the world explodes.\nYes it does. Very much so.\n\nI'm not entirely against using glibc 2.5\u2014it would be nice to bottle software that just works without any supporting libraries\u2014but I'm guessing we'll eventually run into bugs and software that won't compile using glibc 2.5.\n\nglibc 2.5 came out 8 years ago, and glibc seems like it's been under fairly rapid development. I'm no expert on it, but It seems like there must be some security and performance downsides to not upgrading. (And I also think that there may be some software that will not compile, especially C++11 and 14 stuff.)\n. > Okay. I'll fix this. In the mean time, try (change en_US as you desire):\n==> chmod +x /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/libc.so.6\n==> /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n==> /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/bin/localedef -i C C\ncannot open locale definition file `C': No such file or directory\n. > Grumble. Attempt number 2.\nHaha...\n==> chmod +x /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/lib/libc.so.6\n==> /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n==> /work/01166/mbsulliv/.linuxbrew_standalone/Cellar/glibc/2.19/bin/localedef -i C C\ncannot open locale definition file `C': No such file or directory\n. > @mbsullivan Okay, fixed. Next time you fix it. :smile:brew update\nAwesome, it works! Now all of the standalone instructions work for me.\n. Hi OmeGak,\nI don't have any more experience making/editing Homebrew formulas than you do, but I gave a crack at making a Linux-PAM formula.\nCould you remove libpam0g-dev from your system (or hack it so that it won't be found) and see if this works?\nbrew install https://raw.githubusercontent.com/mbsullivan/linuxbrew/fc69f21c7722a70be52c0d7f3fb50d841f589236/Library/Formula/linux-pam.rb --disable-nls -v\n(The --disable-nls should not be mandatory, but it will save you 600KB of disk space.)\n. > The formula fails in Ubuntu 12.04. \nOh! Sorry I missed a dependency on flex. Could you try this command:\nbrew install https://raw.githubusercontent.com/mbsullivan/linuxbrew/Linux-PAM/Library/Formula/linux-pam.rb -v\n(I temporarily hard-coded --disable-nls because I realized that it needs some work before it will compile without some system library support.)\n. It appears that the following formulae also use ENV.libxml2:\nbind.rb\ngdal.rb\ngettext.rb\nlibbluray.rb\nlibcroco.rb\nlibgda.rb\npostgres-xc.rb\npostgresql.rb\nrrdtool.rb\nvcdimager.rb\nwine.rb\nwv.rb\ngettext works with this pull request. Others (such as libbluray) get past the odd and unhelpful error message that ENV.libxml2 causes but then the configure step fails when looking for libxml2. \nThis is just a simple error (it is descriptive and adding libxml2 as an explicit dependency to the formula fixes it) so perhaps things are fine as-is. @sjackman, how would you deal with an issue like this? libxml2 is not listed as a dependency for linuxbrew in the README, and should not be assumed to exist (yet it is assumed to be present on Mac systems).\nThis touches on something else that I've been wondering about Linuxbrew. For a Mac, you can assume some libraries are installed and dupes are not recommended (as mentioned here). However, on Linux it seems much less defensible to assume that arbitrary libraries are installed to the root system.\n. > The current policy of Linuxbrew is that every package that's include with Mac OS must be installed by the native package manager as a dependency of Linuxbrew. That's the reason for these instructions in the README. If it's not possible to installed these dependencies using the native package manager, I'd like to support installing the dependencies from Homebrew/dupes.\nI think that adding some instructions for getting it working from Homebrew/dupes makes a lot of sense for Linuxbrew. (This makes it so that gcc and ruby are the only dependencies, which is much nicer for users without sudo access.)\nAlso, libxml-devel is not in that list (but perhaps should be).\n. I'm assuming you're trying to install android-sdk?? (It's not clear.)\nException in thread \"main\" java.lang.UnsatisfiedLinkError: no swt-cocoa-3550 or swt-cocoa in swt.library.path, java.library.path or the jar file\nThis may be a difficult one to get running on Linux if it's assuming that Cocoa is present. Perhaps it could be hacked out to use GNUStep? I have no experience with such things, but it sounds messy.\n. I also get this, but only for the gcc4.x formulae in the versions tap.\n. @sjackman sure, I'll take a look at it again! (Unfortunately, I will only have time after tomorrow evening due to an impending deadline.)\n. @sjackman, it looks to me like both of your suggestions work! (I only let the \"better solution\" run to completion, though, so perhaps there were unknown issues with unlinking glibc-sysroot, etc.)\nUnfortunately, things come to a halt when I reach the same issue building GCC as I reported in #107, so I cannot keep going:\ng++-4.7: fatal error: braced spec\n'%:sanitize(address):%{!shared:libasan_preinit%O%s}\n%{static-libasan:%{!shared:-Bstatic --whole-archive -lasan --no-whole-archive\n-Bdynamic}}%{!static-libasan:-lasan}}\n%{%:sanitize(thread):%{static-libtsan:%{!shared:-Bstatic --whole-archive -ltsan\n--no-whole-archive -Bdynamic}}%{!static-libtsan:-ltsan}}' is invalid at '%'\n(I've yet to get gcc-4.9 successfully brewed, even using the main branch.)\nPS: Using a (linuxbrew-brewed) gcc-4.8 results in the same error.\n. ",
    "khirbat": "I tried the instructions listed on the page \"Standalone Installation of Linuxbrew\".  brew install gcc failed.  Any suggestions on what to try next?\n```\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\n$ LD_LIBRARY_PATH=$prefix/lib brew install -v gcc --without-multilib\n ...\nmake[3]: Leaving directory /tmp/gcc-8DRo/gcc-4.9.1/build/gcc'\nmkdir -p -- x86_64-unknown-linux-gnu/libgcc\nChecking multilib configuration for libgcc...\nConfiguring stage 1 in x86_64-unknown-linux-gnu/libgcc\nconfigure: creating cache ./config.cache\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking for --enable-version-specific-runtime-libs... no\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking for gawk... gawk\nchecking for x86_64-unknown-linux-gnu-ar... ar\nchecking for x86_64-unknown-linux-gnu-lipo... lipo\nchecking for x86_64-unknown-linux-gnu-nm... /tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/nm\nchecking for x86_64-unknown-linux-gnu-ranlib... ranlib\nchecking for x86_64-unknown-linux-gnu-strip... strip\nchecking whether ln -s works... yes\nchecking for x86_64-unknown-linux-gnu-gcc... /tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/xgcc -B/tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/bin/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/lib/ -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/include -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/sys-include   \nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether /tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/xgcc -B/tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/bin/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/lib/ -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/include -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/sys-include    accepts -g... yes\nchecking for /tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/xgcc -B/tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/bin/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/lib/ -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/include -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/sys-include    option to accept ISO C89... none needed\nchecking how to run the C preprocessor... /tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/xgcc -B/tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/bin/ -B/home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/lib/ -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/include -isystem /home/anmol/.linuxbrew/Cellar/gcc/4.9.1/x86_64-unknown-linux-gnu/sys-include    -E\nchecking size of double... 8\nchecking size of long double... 16\nchecking whether decimal floating point is supported... yes\nchecking whether fixed-point is supported... no\nchecking whether to use setjmp/longjmp exceptions... no\nchecking if the linker (/tmp/gcc-8DRo/gcc-4.9.1/build/./gcc/collect-ld) is GNU ld... yes\nchecking for thread model used by GCC... posix\nchecking whether assembler supports CFI directives... yes\nchecking for __attribute__((visibility(\"hidden\")))... yes\nchecking whether the target assembler supports thread-local storage... yes\nchecking whether the thread-local storage support is from emutls... no\nchecking for init priority support... yes\nconfigure: updating cache ./config.cache\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating auto-target.h\nconfig.status: linking ../../../libgcc/enable-execute-stack-empty.c to enable-execute-stack.c\nconfig.status: linking ../../../libgcc/unwind-generic.h to unwind.h\nconfig.status: linking ../../../libgcc/config/i386/linux-unwind.h to md-unwind-support.h\nconfig.status: linking ../../../libgcc/config/i386/sfp-machine.h to sfp-machine.h\nconfig.status: linking ../../../libgcc/gthr-posix.h to gthr-default.h\nconfig.status: executing default commands\n../../../libgcc/../config-ml.in: eval: line 164: unexpected EOF while looking for matching''\n../../../libgcc/../config-ml.in: eval: line 165: syntax error: unexpected end of file\nmake[2]:  [configure-stage1-target-libgcc] Error 1\nmake[2]: Leaving directory /tmp/gcc-8DRo/gcc-4.9.1/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory/tmp/gcc-8DRo/gcc-4.9.1/build'\nmake:  [bootstrap] Error 2\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: aa0e405bc29a8d887e1f0920e505d93268b2c592\nHOMEBREW_PREFIX: /home/anmol/.linuxbrew\nCPU: dual-core 64-bit 6\nOS X: 0-x86_64\n/usr/bin/ruby1.9.1:\n  1.9.3-484\nX11: N/A\n==> ENV\nCC: /usr/bin/gcc => /usr/bin/gcc-4.8\nCXX: /usr/bin/g++ => /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc\nOBJCXX: /usr/bin/g++\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/anmol/.linuxbrew/include\nLDFLAGS: -L/home/anmol/.linuxbrew/lib\nMAKEFLAGS: -j2\nCMAKE_PREFIX_PATH: /home/anmol/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/anmol/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /home/anmol/.linuxbrew/share/aclocal\nPATH: /home/anmol/.linuxbrew/bin:/usr/bin:/bin:/home/anmol/.linuxbrew/Library/Contributions/cmd\nError: gcc 4.9.1 did not build\nLogs:\n     /home/anmol/Library/Logs/Homebrew/gcc/02.make\n     /home/anmol/Library/Logs/Homebrew/gcc/01.configure\nThese open issues may also help:\ngcc: compatibility 10.10 (https://github.com/Homebrew/homebrew/pull/31466)\ngcc 4.8.3 bottle has invalid omp.h header (https://github.com/Homebrew/homebrew/issues/29670)\nMacOS.(gcc|clang|llvm)_version can return nil (https://github.com/Homebrew/homebrew/issues/18781)\n```\n. HOMEBREW_TEMP is already set according to the instructions \"Standalone Installation of Linuxbrew\".  Looks like there is enough disk space.\n$ echo $HOMEBREW_TEMP \n/var/tmp\n$ df -khl $HOMEBREW_TEMP \nFilesystem                  Size  Used Avail Use% Mounted on\n/dev/mapper/virgo--vg-root   39G   13G   24G  36% /\n. I tried this again after making sure the variable got exported.\n```\n$ PATH=/usr/bin:/bin\n$ unset LD_LIBRARY_PATH HOMEBREW_CC\n$ export HOMEBREW_TEMP=/var/tmp\n$ prefix=~/.linuxbrew\n$ PATH=\"$prefix/bin:$PATH\"\n$ env | grep HOMEBREW\nHOMEBREW_TEMP=/var/tmp\n```\nThe outcome is the same.  I placed the log files 01.configure and 02.make here. https://gist.github.com/khirbat/daad7cfa2b285e2b7853\nI saw the same failure on a Fedora system.  Perhaps I am missing something basic?\n. ",
    "benswift": "Cool, thanks mate.\nI've fixed up a couple of formula which weren't building for me (Ubuntu 13.10), do you want me to push the patches upstream?  Do I just create new branches for each formula as they like for OSX?\n. Ah, cool, that's how we're doing it.  I was wondering about that.  So do they have to be reviewed by both maintainers now?\nOn 13/11/2013, at 1:07 PM, Shaun Jackman notifications@github.com wrote:\n\nYes, that'd be great. The patches should be guarded in if OS.linux? and if OS.mac? so that the formula still build correctly on OS X.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, ok.  So we'll just keep on adding the if OS.blah checks just in case, but for the moment we'll just be doing a lot of merging to keep up with them :)\n\nOn 13/11/2013, at 1:13 PM, Shaun Jackman notifications@github.com wrote:\n\nPortability patches sadly aren't generally being accepted into mxcl/homebrew. Feel free to petition them to hopefully change this policy.\n\u2014\nReply to this email directly or view it on GitHub.\n. sorry - was posted twice for some reason\n. Ok, sure, will do.\n\nCheers,\nBen\nOn 15/11/2013, at 12:43 PM, Shaun Jackman notifications@github.com wrote:\n\nThis pull request seem to pull in a bunch of other commits, I'm not sure why. Could you submit the patches to each formula in a separate pull request? It makes discussion easier. The subject line of each pull request should start with the formula name that you're patching, i.e. \"assimp: build without boost\".\n\u2014\nReply to this email directly or view it on GitHub.\n. Also, just a heads up, I also needed to sudo apt-get install python-dev to get cmake to build on Ubuntu 13.10.\n\nI tried to get python through brew install python, but it failed. Are people usually using the system python?\n. Here's the dump\n```\nben@lonyx ~ $ brew install python\n==> Downloading http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz\nAlready downloaded: /home/ben/.cache/Homebrew/python-2.7.6.tgz\n==> ./configure --prefix=/home/ben/.linuxbrew/Cellar/python/2.7.6 --enable-ipv6 --datarootdir=/home/ben/.linuxbrew/Cellar/python/2.7.6/share --datadir=/home/ben/.linuxbrew/\n==> make\n./Modules/getpath.c:476:11: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]\n     buf = (char *)NSLibraryNameForModule(pythonModule);\n           ^\nmake:  [Modules/getpath.o] Error 1\nmake:  Waiting for unfinished jobs....\nREAD THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting\nThese open issues may also help:\npython failed to build on 10.9.1 (https://github.com/Homebrew/homebrew/issues/26166)\ncmake find_package(PythonLibs) broken with brewed python on 10.9 (https://github.com/Homebrew/homebrew/issues/25118)\nIn python Formula, it seems that \"brewed python part\" in sitecustomize.py is not called (https://github.com/Homebrew/homebrew/issues/26377)\nMeld causes python dump in 10.9 (https://github.com/Homebrew/homebrew/issues/26273)\nsubversion: make python bindings build on 10.9. (https://github.com/Homebrew/homebrew/pull/26156)\n```\nMy homebrew is up-to-date.  brew doctor gives many warnings but they all seem to be related to being on linux.  Here's the output:\n```\nWarning: Your file-system on [[\"/\"]] appears to be CaSe SeNsItIvE.\nHomebrew is less tested with that - don't worry but please report issues.\nError: Failed to import: lsyncd\nNo such file or directory - sw_vers -productVersion\nWarning: Suspicious git origin remote found.\nWith a non-standard origin, Homebrew won't pull updates from\nthe main repository. The current git origin is:\n  https://github.com/Homebrew/linuxbrew.git\nUnless you have compelling reasons, consider setting the\norigin remote to point at the main repository, located at:\n  https://github.com/Homebrew/homebrew.git\nWarning: The version of libcurl provided with Mac OS X 0 has outdated\nSSL certificates.\nThis can cause problems when running Homebrew commands that use Git to\nfetch over HTTPS, e.g. brew update or installing formulae that perform\nGit checkouts.\nYou can force Git to ignore these errors:\n  export GIT_SSL_NO_VERIFY=1\nor\n  git config --global http.sslVerify false\nWarning: Your Homebrew is not installed to /usr/local\nYou can install Homebrew anywhere you want, but some brews may only build\ncorrectly if you install in /usr/local. Sorry!\nWarning: Ruby version 1.9.3 is unsupported.\nHomebrew is developed and tested on Ruby 1.8.x, and may not work correctly\non other Rubies. Patches are accepted as long as they don't break on 1.8.x.\n```\n. Cool, thanks Shaun.\nCheers,\nBen\nOn 14 Feb 2014, at 10:54 am, Shaun Jackman notifications@github.com wrote:\n\nWoops. I had an uncomitted patch for python. It's pushed now: 3ad2130.\n\u2014\nReply to this email directly or view it on GitHub.\n. Linuxbrew has some dependencies (which must be pulled from outside the brew universe, i.e. through apt-get).  Make sure you get them all (see the Dependencies section of the Linuxbrew readme for an up-to-date list).  Also, you\u2019ll need to add the linuxbrew dirs to your LD_LIBRARY_PATH, again it\u2019s included in the readme.\n\nDid you install those deps?\nCheers,\nBen\nOn 29 Jul 2014, at 6:45 am, Brit Butler notifications@github.com wrote:\n\nI'm also hitting the pkgutil error while trying to build extempore (really, its dependency pcre). Interestingly, running with brew install --debug prce hangs during make test right before \"Error: No such file or directory - /usr/sbin/pkgutil\" occurs.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Mike\n\nOn the homebrew issues, I\u2019ll defer to those who have more expertise than I.\nRegarding the general Extempore installation issue, are you able to try building from source? \nCheers,\nBen\nOn 30 Jul 2014, at 4:50 am, Michael Sullivan notifications@github.com wrote:\n\nI have been having similar issues when running linuxbrew. Some packages suffer from the /usr/sbin/pkgutil issue, while others do not.\nFirst off, not being a Mac user myself, it is a bit confusing to me how pkgutil ties into Linuxbrew. My (admittedly poor) understanding is that pkgutil is a utility for dealing with Mac packages. Why would a dependency installed on Linux from a package manager (such as yum or apt-get) have such a utility?\n@benswift, I have installed all of the dependencies listed in the readme and it did not resolve the issue. Furthermore, yum whatprovides /usr/sbin/pkgutil returns nothing, so it seems that no Fedora package installs such a file.\n@redline6561, I also have this problem with the program hanging on an error when in debug mode. I thought I had found another issue describing a similar problem, but now I cannot find it.\nMike\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, no worries mate.  That\u2019s been my experience with pkgutil errors: they\u2019re just an indicator that something failed earlier on in the process.  Still, it would be helpful to have more accurate error messages.\n\nThanks for chiming in\u2014I also have high hopes for linuxbrew, but there are still a few osx-centric warts to iron out.\nCheers,\nBen\nOn 31 Jul 2014, at 7:10 am, Michael Sullivan notifications@github.com wrote:\n\nHi Ben,\nI actually have not tried to build extempore. I was more just chiming in that I have been getting the same /usr/sbin/pkgutil errors as @mrcodydaniel when using linuxbrew.\nIt kind of seems like a reporting side effect of other errors, though. For example, when trying to install python, it fails on something and then reports the /usr/sbin/pkgutil \"error\":\nbrew install -v python --cc=gcc-4.8\n...\n==> Installing python\n==> Downloading http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz\nAlready downloaded: /home1/01166/mbsulliv/.cache/Homebrew/python-2.7.8.tgz\n==> Verifying python-2.7.8.tgz checksum\ntar xf /home1/01166/mbsulliv/.cache/Homebrew/python-2.7.8.tgz\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nError: No such file or directory - /usr/sbin/pkgutil\nMike\n\u2014\nReply to this email directly or view it on GitHub.\n. Cool, thanks mate. That's good to know. \nOn 12 Aug 2014, at 10:50 am, Shaun Jackman notifications@github.com wrote:\nI usually merge every Monday.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ghost": "It works for me, I think this issue can be closed now?\n. @sjackman \nconstantine@eudaimonia:~/.linuxbrew/bin$ ./brew edit freeimage\nError: no \"edit\" mailcap rules found for type \"application/x-ruby\"\n. @sjackman ok, I edited as you said, here's what happened:\n```\nconstantine@eudaimonia:~/.linuxbrew/bin$ ./brew install freeimage\n==> Downloading https://downloads.sourceforge.net/project/freeimage/Source%20Dis\nAlready downloaded: /home/constantine/.cache/Homebrew/freeimage-3.15.4.zip\n==> make -f Makefile.gnu\n/usr/include/x86_64-linux-gnu/bits/string3.h:76:1: note: \u2018void memset(void, int, size_t)\u2019 declared here, later in the translation unit\n __NTH (memset (void *__dest, int __ch, size_t __len))\n ^\nmake:  [Source/OpenEXR/./IlmImf/ImfHuf.o] Error 1\nmake:  Waiting for unfinished jobs....\nREAD THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting\n```\n. @sjackman no problem, I understand.\n. @sjackman Not gonna work :D It's abandoned apparently, last commit was in November 26, 2013, check out my issues here and there.\n. It worked! But is there a way to build static libraries?\n. Ok, so can I make Poco build statically and then pull request? I know a flag which should be enabled for that\n. Here it is: https://github.com/Homebrew/linuxbrew/pull/99\n. > Why do you want to link statically? I probably won't merge that pull request. Dynamic linking is typical.\nI want to share apps between different Linux distros without problems on end user side. I have no problem compiling and linking static version of Poco on Linux, is this an issue on Mac?\n. What is bottle in the context of homebrew and Mac?\n. Some tools require 32bit support to be installed.\nsh\nsudo apt-get install libc6:i386 libstdc++6:i386 zlib1g:i386\n. To be more specific, it does not build with `--with-x11'.\nAlso, building with librsvg' support requiresflex' (brew install flex') andpython' (did not try).\n. I've tried after apt-get build-dep emacs24 but stiil:\nsh\nbrew install emacs  --with-x11                               \n\u001bkbrew==> Downloading http://ftpmirror.gnu.org/emacs/emacs-24.4.tar.xz\nAlready downloaded: /home/uri/.cache/Homebrew/emacs-24.4.tar.xz\n==> Downloading https://gist.githubusercontent.com/scotchi/66edaf426d7375c0f061/raw/4c5229a8a719f81fa6bd2e1e0c85d10b6f6\nAlready downloaded: /home/uri/.cache/Homebrew/emacs--patch-b63eab599a7ce69de03629494a727f45b310c166.patch\n==> Patching\npatching file src/macfont.m\npatch unexpectedly ends in middle of line\nHunk #3 succeeded at 2793 with fuzz 1.\n==> ./configure --prefix=/home/uri/.linuxbrew/Cellar/emacs/24.4 --enable-locallisppath=/home/uri/.linuxbrew/share/emacs\n==> make\nMakefile:664: recipe for target 'temacs' failed\nmake[1]: *** [temacs] Error 1\nmake[1]: Leaving directory '/tmp/emacs-xTjeIS/emacs-24.4/src'\nMakefile:382: recipe for target 'src' failed\nmake: *** [src] Error 2\n. Here https://gist.github.com/dcb5525a9634696a8558\nPS\nAbout the brew-doctor warning about $PATH order, it's wrong. linuxbrew/bin comes after, though there are couple of paths generated by rbenv, which are inserted before the system path.\nsh\nexport PATH=\"$PATH:$HOME/.linuxbrew/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\"\n``` sh\necho $PATH \n/home/uri/perl5/bin:/home/uri/.linuxbrew/opt/rbenv/shims:/home/uri/.linuxbrew/opt/rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/uri/.linuxbrew/bin:/home/uri/.linuxbrew/opt/android-sdk/tools:/home/uri/.linuxbrew/opt/android-sdk/platform-tools\n```\n. Of course! wasn't paying attention :(\nsh\nbrew doctor\nbrewYour system is ready to brew.\nhttps://gist.github.com/anonymous/53220a11b28489c76354\n. It works! Looks ugly though... is there a way to pass config options like --with-x-toolkit=gtk3?\nThank you.\n. PS Seems to compile with GTK3 with export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH with '--env=inherit'\n. @dky thank you for filing this issue, and documenting the resolution. I ended up running into the same issue recently while reinstalling my LinuxBrew setup, and your suggestion gave me a start on resolving it locally.\n. @outcoldman please see #534 \nWe should probably just merge in upstream from Homebrew instead of fixing this directly in LinuxBrew.\n. Removed symlink and added /home/me/.linuxbrew/bin to $PATH in zshrc fixed it\n. brew tap homebrew/dupes\nworks also for me... (rbenv) on Ubuntu.\nIs this a bug?\n. Can you explain it better, please?\n. And what\nsudo update-rc.d postgresql enable do?\n. may be you need install libssl-dev. it's work for me.. I can confirm that cloning the Linuxbrew repo yesterday, followed by brew update && brew upgrade --all installed all my packages correctly, but my local copy of Linuxbrew was actually pulling from homebrew (the remote was set to homebrew, and the source code locally was homebrew.).\n@Neraste to fix the issue you are encountering I did the following:\n- Set the origin to Linuxbrew\n- git fetch origin\n- git reset --hard HEAD\nThen brew update && brew upgrade --all\n. ",
    "JorisM": "I made a pull request to include bzip2-devel a couple days ago in the docs\nhttps://github.com/Homebrew/linuxbrew/pull/35\n. same here, fedora 22\n. thanks!\n. ",
    "chocolateboy": "It's only this version that's out-of-date. It's up-to-date, give or take a day or two, on mxcl/homebrew...\n. Thanks :-)\n. ",
    "peterdfields": "modifying the depends_on :x11 got me much much further. \nThe error I'm receiving has me a bit perplexed. Here I'm running \nbrew install r  --with-openblas\nI get the following error\nError: File exists - /home/peter/.linuxbrew/Cellar/r/3.0.2/R.framework/Resources/bin/R or /home/peter/.linuxbrew/Cellar/r/3.0.2/bin/R\nThe gist of the 03.make file is at \nhttps://gist.github.com/crd1859/7848684\n. I should have noted that those files do not exist either before or after the attempted brew install r --with-openblas\n. ",
    "max-mykhailenko": "+1\n. ",
    "zorancupic": "Hello sjackman, this do not work.  I got the error message:\nXY-MacBook-Pro:~ XY$ brew install --without-x11 r\n==> Installing r from homebrew/homebrew-science\ncairo: Unsatisfied dependency: XQuartz 0.0.0\nHomebrew does not package XQuartz. Installers may be found at:\n  https://xquartz.macosforge.org\nError: An unsatisfied requirement failed this build.\n. ",
    "dongli": "@sjackman Should we provide a linux.rb under Library/Homebrew/os as mac.rb to handle the specs of different Linux? Such as when installing gcc49, I encountered a bug in Ubuntu as described in [http://askubuntu.com/questions/251978/cannot-find-crti-o-no-such-file-or-directory. We need to judge whether the Linux is Ubuntu, and whether the OS is 64-bit. Any suggestion?\n. Yes, I got it working too by making some changes to gmp4.rb, mpfr2.rb, isl011.rb, cloog018.rb, libmpc08.rb and gcc49.rb. The changes of gcc49.rb are as following:\n```\n     args = [\n-      \"--build=#{arch}-apple-darwin#{osmajor}\",\n       \"--prefix=#{prefix}\",\n       \"--enable-languages=#{languages.join(',')}\",\n       # Make most executables versioned to avoid conflicts.\n@@ -88,6 +87,8 @@ class Gcc49 < Formula\n       \"--disable-werror\"\n     ]\n\n\nargs << \"--build=#{arch}-apple-darwin#{osmajor}\" if OS.mac?\n+\n     # \"Building GCC with plugin support requires a host that supports\n     # -fPIC, -shared, -ldl and -rdynamic.\"\n     args << \"--enable-plugin\" if MacOS.version > :tiger\n@@ -109,11 +110,21 @@ class Gcc49 < Formula\n     end\nmkdir 'build' do\n-      unless MacOS::CLT.installed?\n-        # For Xcode-only systems, we need to tell the sysroot path.\n-        # 'native-system-header's will be appended\n-        args << \"--with-native-system-header-dir=/usr/include\"\n-        args << \"--with-sysroot=#{MacOS.sdk_path}\"\n+      if OS.mac?\n+        unless MacOS::CLT.installed?\n+          # For Xcode-only systems, we need to tell the sysroot path.\n+          # 'native-system-header's will be appended\n+          args << \"--with-native-system-header-dir=/usr/include\"\n+          args << \"--with-sysroot=#{MacOS.sdk_path}\"\n+        end\n+      elsif OS.linux?\n+        ENV[\"LD_LIBRARY_PATH\"] = \"#{Formula[\"gmp4\"].opt_prefix}/lib:\" \\\n+                                 \"#{Formula[\"mpfr2\"].opt_prefix}/lib:\" \n+                                 \"#{Formula[\"cloog018\"].opt_prefix}/lib\n+                                 \"#{Formula[\"libmpc08\"].opt_prefix}/lib\n+                                 \"#{Formula[\"isl011\"].opt_prefix}/lib:\"\n+                                 \"/usr/lib/x86_64-linux-gnu:\" \\\n+                                 \"$LD_LIBRARY_PATH\"\n   end\n``\n. @sjackman How to use and where to placeif OS.mac??\n. @sjackman I have figured out how to addif OS.mac?forgmp4andmpfr2, so where should these changes be pulled?\n. @sjackman Hi, I foundmake checkfailed because it can not find keg-only library. For example, whenmake checkmpfr2,gmp4's lib directory should be inLD_LIBRARY_PATH`. Currently, I made the following changes:\n\n\nsystem \"make check\" if OS.mac?\nsystem \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:#{gmp4.opt_prefix}/lib && make check\" if OS.linux?\nIs that OK?\n. @sjackman I think we can not put the installed gmp4, mpfr2 and so on into LD_LIBRARY_PATH, since they may cause conflicts with the system ones. I don't know why it is OK in Mac.\n. @sjackman I have successfully installed gcc49, but libgcc_s.so in .linuxbrew/opt/gcc49/lib/gcc/x86_64-unknown-linux-gnu/{lib32, lib64} is not linked into .linuxbrew/opt/gcc49/lib/gcc/x86_64-unknown-linux-gnu/4.9.0, and this cause\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\nWhen I $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/.linuxbrew/opt/gcc49/lib/gcc/x86_64-unknown-linux-gnu/lib64, the error is gone.\n. So what should we do to remove this little inconvenience?\n. Thanks for this fixing.\n. @sjackman How do you deal with cctools dependency?\ndongli@ubuntu:~$ brew install gcc48\nError: No available formula for cctools (dependency of gcc48)\nSearching taps...\nWhere in gcc48.rb:\n# The as that comes with Tiger isn't capable of dealing with the\n  # PPC asm that comes in libitm\n  depends_on 'cctools' => :build if MacOS.version < :leopard\n. ",
    "villimagg": "The formula bash-completion was installed and removing it didn't fix it. Other formulas installed were autoconf, libyaml, pkg-config, and ruby-build. I removed all of them an rebooted and then the error message disappeared.\nWill try installing pkg-config again and see what happens. If it is connected to that formula. It might be a bug with pkg-config since in the error message \"Package bash-completion was not found in the pkg-config search path.\"\n. I can confirm that the bug is related to the formula pkg-config. Reinstalling pkg-config and rebooting resulted in the same error message as before when I open the terminal. Only now the formula bash-completion was not installed as it was before although the same error message appeared back then when bash-completion was installed.\n. Here is the gist: https://gist.github.com/villimagg/8293858\n. Ok.. so pkg-config came as a dependency with ruby-build which I installed along with rbenv. bash-completion came as a dependency with rbenv.\nThe original error message say's:\n\"Package bash-completion was not found in the pkg-config search path.\nPerhaps you should add the directory containing `bash-completion.pc'\nto the PKG_CONFIG_PATH environment variable\nNo package 'bash-completion' found\nbash: /yum: No such file or directory\"\nWhich must mean that anyone can add the path to bash-completion to the PKG_CONFIG_PATH environment variable within pkg-config ?\nAnd now I've been searching where I can add the bash-completion path to the PKG_CONFIG_PATH  and I have no idea.\n. Thanks for the link. I'll take a look at it.\nHere is the output when running brew install rbenv ruby-build:\n```\n$ brew install rbenv ruby-build\n==> Downloading https://github.com/sstephenson/rbenv/archive/v0.4.0.tar.gz\nAlready downloaded: /home/vmag/.cache/Homebrew/rbenv-0.4.0.tar.gz\n==> Caveats\nTo use Homebrew's directories rather than ~/.rbenv add to your profile:\n  export RBENV_ROOT=/home/vmag/.linuxbrew/var/rbenv\nTo enable shims and autocompletion add to your profile:\n  if which rbenv > /dev/null; then eval \"$(rbenv init -)\"; fi\n==> Summary\n/home/vmag/.linuxbrew/Cellar/rbenv/0.4.0: 31 files, 164K, built in 2 seconds\n==> Installing dependencies for ruby-build: autoconf, pkg-config, libyaml\n==> Installing ruby-build dependency: autoconf\n==> Downloading http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz\nAlready downloaded: /home/vmag/.cache/Homebrew/autoconf-2.69.tar.gz\n==> ./configure --prefix=/home/vmag/.linuxbrew/Cellar/autoconf/2.69\n==> make install\n==> Caveats\nThis formula is keg-only, so it was not symlinked into /home/vmag/.linuxbrew.\nXcode (up to and including 4.2) provides (a rather old) Autoconf.\n==> Summary\n/home/vmag/.linuxbrew/Cellar/autoconf/2.69: 65 files, 2.1M, built in 2 seconds\n==> Installing ruby-build dependency: pkg-config\n==> Downloading http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz\nAlready downloaded: /home/vmag/.cache/Homebrew/pkg-config-0.28.tar.gz\n==> ./configure --prefix=/home/vmag/.linuxbrew/Cellar/pkg-config/0.28 --disable-host-tool --with-internal-glib --with-pc-path=/home/\n==> make\n==> make check\n==> make install\n/home/vmag/.linuxbrew/Cellar/pkg-config/0.28: 10 files, 644K, built in 22 seconds\n==> Installing ruby-build dependency: libyaml\n==> Downloading http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz\nAlready downloaded: /home/vmag/.cache/Homebrew/libyaml-0.1.4.tar.gz\n==> ./configure --prefix=/home/vmag/.linuxbrew/Cellar/libyaml/0.1.4\n==> make install\n/home/vmag/.linuxbrew/Cellar/libyaml/0.1.4: 7 files, 344K, built in 6 seconds\n==> Installing ruby-build\n==> Downloading https://github.com/sstephenson/ruby-build/archive/v20131122.1.tar.gz\nAlready downloaded: /home/vmag/.cache/Homebrew/ruby-build-20131122.1.tar.gz\n==> ./install.sh\n/home/vmag/.linuxbrew/Cellar/ruby-build/20131122.1: 96 files, 440K, built in 2 seconds\n```\npkg-config comes as a dependency for ruby-build and then after running brew install rbenv ruby-build my terminal starts complaining about bash-completion.\n. Thank you. Will do that. Hope it goes well with finding a permanent\nsolution. I'll try to help as I can although I'm not a *nix expert.\nOn Wed, Jan 8, 2014 at 2:02 AM, A. Gordon notifications@github.com wrote:\n\nThere's some interplay between PKG_CONFIG_LIBDIR and PKG_CONFIG_PATH,\nwhich I'm not yet familiar with - so I don't have a ready solution.\nTo comments in the code explicitly mention \"overriding the built-in paths\"\non purpose.\nPerhaps adding several hard-coded paths for common linuxes? That will be\nugly - but I don't know of a way to query \"pkg-config\" about the PATHs it\nwill look it.\nAs a temporary work around, setting \"PKG_CONFIG_PATH\" before running \"brew\ninstall\" does solve it:\n$ export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH$ brew install XXXX\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Homebrew/linuxbrew/issues/47#issuecomment-31799686\n.\n\n\nkv.\nm.v.h.\nregards,\nVilhj\u00e1lmur Magn\u00fasson\n. Alright, I'm running Fedora 20 64 bit and I've got two directories containing .pc files. Running whereis pkconfig in terminal gives me: pkgconfig: /usr/lib64/pkgconfig /usr/share/pkgconfig. The file bash-completion.pc lives inside my /usr/share/pkgconfig folder.\nWouldn't it be wise for me to add the PKG_CONFIG_PATH variable to my .bashrc file and concatenate the two paths into the PATH? e.g. PKG_CONFIG_PATH= /usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\n. That fixed it for me. Since people are running different linux distros one can run which pkconfig at terminal prompt and use the paths given to add to the PKG_CONFIG_PATH in their .bashrc.\nIn my case since I'm running Fedora 20 64 bit, when I run which pkgconfig in terminal I'm given:\n$ which pkgconfig\npkgconfig: /usr/lib64/pkgconfig /usr/share/pkgconfig\nI then run\n$ echo \"export PKG_CONFIG_PATH=\\\"/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\\\"\" >> .bashrc\nBUT\nAfter I've logged back in again and open a terminal and run $ which pkgconfig again I get this:\n$ which pkgconfig\n/usr/bin/which: no pkgconfig in (/home/vmag/.rbenv/shims:/home/vmag/.linuxbrew/bin:/home/vmag/.rbenv/shims:/home/vmag/.linuxbrew/bin:/usr/lib64/qt-3.3/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/vmag/.local/bin:/home/vmag/bin)\n/usr/bin/which: no pkgconfig in... Now what is that?\n. ",
    "gawbul": "I'm having the same issue. I needed to install pkg-config for another package (it is a depend of makedepend which was required for openssl) and have been getting the same error:\nPackage bash-completion was not found in the pkg-config search path.\nPerhaps you should add the directory containing `bash-completion.pc'\nto the PKG_CONFIG_PATH environment variable\nNo package 'bash-completion' found\nbash: /yum: No such file or directory\n. @sjackman tried it both with and without bash-completion installed.\nWhen installed I get:\n$ brew list --versions bash-completion\nbash-completion 1.3\n. Doing a find ~/ -name \"bash-completion.pc\" doesn't find the bash-completion.pc file?\n. Hard coded into .bashrc and that worked, thanks :+1: \n. Hi @blitzter. I did the following:\n[smoss@bioserva ~]$ locate bash-completion.pc\n/usr/share/pkgconfig/bash-completion.pc\nSo I added export PKG_CONFIG_PATH=/usr/share/pkgconfig:$PKG_CONFIG_PATH to my .bashrc.\n. Sorry, @blitzter, yes, I added it to the top of my .bashrc!\n. Same issue here, system gcc is 4.8.3 and seems affected. Like you say, gcc-4.9 seems to define the macro, but for some reason still fails for me too?\n. I did the following brew install -i google-perftools and then included the c++ directory in the CPPFLAGS as follows:\nCPPFLAGS=\"-I/home/stevemoss/.linuxbrew/include -I/home/stevemoss/.linuxbrew/include/c++/4.9.2\" ./configure --prefix=/home/stevemoss/.linuxbrew/Cellar/google-perftools/2.4\nDon't get the nanosleep error anymore, but get the following instead:\nconfigure: error: in `/tmp/google-perftools20150526-27469-10gikar/gperftools-2.4':\nconfigure: error: No frame pointers and no libunwind. The compilation will fail\nSee `config.log' for more details\nI did a brew install libunwind-headers but its still not finding the header files?\n. Checking config.log shows the following:\nconfigure:17496: checking libunwind.h presence\nconfigure:17496: /home/stevemoss/.linuxbrew/bin/gcc-4.9 -E -I/home/stevemoss/.linuxbrew/include conftest.c\nIn file included from conftest.c:61:0:\n/home/stevemoss/.linuxbrew/include/libunwind.h:38:29: fatal error: mach/mach_types.h: No such file or directory\n #include <mach/mach_types.h>\nIs this because libunwind-headers is OS X specific? e.g. https://github.com/Homebrew/linuxbrew/blob/master/Library/Formula/libunwind-headers.rb\n. Solved this issue by doing a brew remove libunwind-headers. I then downloaded the latest libunwind from http://download.savannah.gnu.org/releases/libunwind/libunwind-1.1.tar.gz. I compiled and installed this to a local prefix using ./configure --prefix=/home/stevemoss/libunwind. I then ran the google-perftools installation as before, but this time pointing to the new libunwind directories (this may seem a bit convoluted, but I don't have sudo access on the server):\nCPPFLAGS=\"-I/home/stevemoss/.linuxbrew/include -I/home/stevemoss/.linuxbrew/include/c++/4.9.2 -I/home/stevemoss/tools/libunwind\" LDFLAGS=\"-L/home/stevemoss/tools/libunwind/lib\" ./configure --prefix=/home/stevemoss/.linuxbrew/Cellar/google-perftools/2.4\n. I got this to work by manually compiling and linking against libunwind using CPPFLAGS=\"-I/home/stevemoss/.linuxbrew/include -I/home/stevemoss/.linuxbrew/include/c++/4.9.2 -I/home/stevemoss/tools/libunwind\" LDFLAGS=\"-L/home/stevemoss/tools/libunwind/lib\" ./configure --prefix=/home/stevemoss/.linuxbrew/Cellar/google-perftools/2.4/ and then brew link google-perftools.\n. Ah, just seen your comments, @sjackman. Will give it a whirl :smile: \n. @sjackman Worked for me :+1: :smile: \n$ brew install libunwind.rb\n==> Downloading http://download.savannah.gnu.org/releases/libunwind/libunwind-1.1.tar.gz\nAlready downloaded: /home/stevemoss/.cache/Homebrew/libunwind-1.1.tar.gz\n==> ./configure --prefix=/home/stevemoss/.linuxbrew/Cellar/libunwind/1.1 --disable-silent-rules\n==> make install\n/home/stevemoss/.linuxbrew/Cellar/libunwind/1.1: 59 files, 764K, built in 22 seconds\n. @sjackman It probably doesn't need that directory included in CPPFLAGS, but it had libunwind.h in initially, which is why I included it. I think it was more a combination of the headers and libraries missing initially that was causing it to fail, and so it probably only just needed pointing to the directories in which I had manually compiled and installed libunwind. I'll try building with the homebrew libunwind formula installed now though.\n. @sjackman Just tried installing google-perftools with the homebrew libunwind installed and it still fails. Manually installing with just CPPFLAGS=\"-I/home/stevemoss/tools/libunwind/include\" LDFLAGS=\"-L/home/stevemoss/tools/libunwind/lib\" ./configure --prefix=/home/stevemoss/.linuxbrew/Cellar/google-perftools/2.4 works fine still. Something weird with the homebrew env?\n. Two interesting things I notice are\nchecking ucontext.h usability... no\nchecking ucontext.h presence... yes\nconfigure: WARNING: ucontext.h: present but cannot be compiled\nconfigure: WARNING: ucontext.h:     check for missing prerequisite headers?\nconfigure: WARNING: ucontext.h: see the Autoconf documentation\nconfigure: WARNING: ucontext.h:     section \"Present But Cannot Be Compiled\"\nconfigure: WARNING: ucontext.h: proceeding with the compiler's result\nconfigure: WARNING:     ## ------------------------------------------------ ##\nconfigure: WARNING:     ## Report this to google-perftools@googlegroups.com ##\nconfigure: WARNING:     ## ------------------------------------------------ ##\nchecking for ucontext.h... no\nchecking sys/ucontext.h usability... no\nchecking sys/ucontext.h presence... yes\nconfigure: WARNING: sys/ucontext.h: present but cannot be compiled\nconfigure: WARNING: sys/ucontext.h:     check for missing prerequisite headers?\nconfigure: WARNING: sys/ucontext.h: see the Autoconf documentation\nconfigure: WARNING: sys/ucontext.h:     section \"Present But Cannot Be Compiled\"\nconfigure: WARNING: sys/ucontext.h: proceeding with the compiler's result\nconfigure: WARNING:     ## ------------------------------------------------ ##\nconfigure: WARNING:     ## Report this to google-perftools@googlegroups.com ##\nconfigure: WARNING:     ## ------------------------------------------------ ##\nchecking for sys/ucontext.h... no\nand\nchecking libunwind.h usability... no\nchecking libunwind.h presence... yes\nconfigure: WARNING: libunwind.h: present but cannot be compiled\nconfigure: WARNING: libunwind.h:     check for missing prerequisite headers?\nconfigure: WARNING: libunwind.h: see the Autoconf documentation\nconfigure: WARNING: libunwind.h:     section \"Present But Cannot Be Compiled\"\nconfigure: WARNING: libunwind.h: proceeding with the compiler's result\nconfigure: WARNING:     ## ------------------------------------------------ ##\nconfigure: WARNING:     ## Report this to google-perftools@googlegroups.com ##\nconfigure: WARNING:     ## ------------------------------------------------ ##\nchecking for libunwind.h... no\nchecking for backtrace in -lunwind... yes\nneither of these show up when compiling and linking manually.\n. @sjackman https://gist.github.com/anonymous/17cf1f8e3a97711aa5e3 :smile: \n. So, adding ENV.append \"CC\", \"-std=c11\" to the google-perftools formula should work?\n. I meant perftools sorry, changed the comment... I've got poretools on the brain, lol!\n. @tseemann I was testing on Debian wheezy 7.8 and also Fedora 20.\nAs with h5py in https://github.com/Homebrew/homebrew-science/issues/2392 I wonder if adding ENV.prepend_create_path \"PYTHONPATH\", libexec/\"lib64/python2.7/site-packages\" would work here too, as a work around at least? @tdsmith?\n. I was having a read and noticed you can pass a LIBnn flag to configure, e.g. ./configure LIBnn=lib. Would that work in this case?\n. ",
    "blitzter": "Hi @gawbul ,\nI'm getting the exact same issue in my Fedora 22 machine.\nWhat exactly was added to .bashrc as bash-completion.pc is not really there.\nCan you please provide the addition to .bashrc so I and possibly others can fix the issue?\n. Thanks @gawbul ,\nThe error message is gone if the line mentioned above is added on top of .bashrc (before /etc/bashrc processing).\n. ",
    "Osndok": "I've started getting this message too (in a VM that is also using Fedora 20).\nI understand where the message is being generated, from a stock fedora package (\"yum-utils\"):\n$ grep -n pkg-config /etc/bash_completion.d/yum-utils.bash \n2:type -t _yum >/dev/null || . $(pkg-config --variable=completionsdir bash-completion)/yum\nAs I understand it, this message is \"switched on\" when a linuxbrew \"pkg-config\" binary is preferentially used over (earlier in the PATH than) the stock one by the yum-utils package in fedora.\nSo, then... ignoring the workaround for a moment... isn't the root issue either:\n1. that linuxbrew pkg-config should be bottled (if it does not work for in the more general system-wide use), or\n2. that linuxbrew pkg-config should also loop-in system package definitions by default (or as a fallback? if it is intended to replace the stock pkg-config)\n?\n. ",
    "agordon": "There's some interplay between PKG_CONFIG_LIBDIR and PKG_CONFIG_PATH, which I'm not yet familiar with - so I don't have a ready solution.\nTo comments in the code explicitly mention \"overriding the built-in paths\" on purpose.\nPerhaps adding several hard-coded paths for common linuxes? That will be ugly - but I don't know of a way to query \"pkg-config\" about the PATHs it will look it.\nAs a temporary work around, setting \"PKG_CONFIG_PATH\" before running \"brew install\" does solve it:\nsh\n$ export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH\n$ brew install XXXX\n. @villimagg - yes, you can add those directories to PKG_CONFIG_PATH in \"~/.bashrc\", and it should \"just work\".\n@sjackman - Perhaps it's worth considering not overriding \"PKG_CONFIG_LIBDIR\" at all for LinuxBrew? Because on a \"standard\" linux, the system's native pkg-config installed and knows about all the different location? (as opposed to MacOS/HomeBrew, where the assumption is that pkg-config is not native) ?\nAnd then, instead of overriding \"PKG_CONFIG_LIBDIR\", just append LinuxBrew's specific paths to PKG_CONFIG_PATH ?\nI can send a patch for that, if this method is acceptable.\n. @sjackman - my pleasure.\nI'm using LinuxBrew on several servers, and it's a great tool - so thank you!\n<shameless plug>\nFor bioinformaticians out there, my new GNU program 'datamash' just made it into HomeBrew: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/datamash.rb\n</shameless plug>\n. Thanks!\nExtracting the HomeBrew formulas into a separate tap would certainly help.\n-gordon\n. A small follow-up:\nSeems like it will not happen in the current \"HomeBrew\":\ntwo years ago:   https://github.com/Homebrew/homebrew/issues/11532\none year ago:   https://github.com/Homebrew/homebrew/issues/14661\n. ",
    "andradei": "When running the uninstall script I get the following:\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n-e:89:in ``': No such file or directory - command (Errno::ENOENT)\n    from -e:89:in `<main>'\n. worked for me, thank you.\n. ",
    "xu-cheng": "@andradei This should be fixed by https://github.com/Homebrew/install/commit/9d15de4353512bf80f720b034e73b2c6669c3542 \n. > When it instead installs makedepend by source, it finds that pkg-config is not installed. It didn't install pkg-config, because pkg-config is not required by makedepend bottle.\nThat's unlikely as pkg-config should be installed when installing makedepend from source.\n\nThe real fix would be for the dependency logic to check that a bottle is available for this architecture\n\nThis logic exists for all along. \nIs there a minimal example to reproduce this bug so I can debug? Also @jacknagel should know more  than me about dependency issues.\n. From @DomT4 on April 20, 2015 12:33\nNeeds to be filed at Homebrew/linuxbrew :).\n. Still WIP. \n. Actually I just found the test of readline fails for me.\n$ brew test readline -v\nTesting readline\n==> /home/comp/chengxu/usr/bin/gcc-4.9 test.c -lreadline -o test\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tputs'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tgoto'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tgetflag'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `UP'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tgetent'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tgetnum'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `PC'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `tgetstr'\n/home/comp/chengxu/usr/lib/libreadline.so: undefined reference to `BC'\ncollect2: error: ld returned 1 exit status\nError: readline: failed\nFailed executing: /home/comp/chengxu/usr/bin/gcc-4.9 test.c -lreadline -o test\n. > Would you like to submit a PR for glibc?\nSorry, but I still don't know how to fix it. At the same time, I don't know the proper steps to reinstall glibc on a standalone linuxbrew. \n. This has been fixed by upstream in https://github.com/Homebrew/homebrew/commit/2d1bc4df26f2d1abae81832c6decb5394b007f58. But it requires some time to let it sync to Linuxbrew. \n. You need to run brew update and try again. Then it should show the real error. \n. Please report this issue to Homebrew with the output of brew gist-logs boost. \n. I have the trouble to build llvm without clang(I used to be able to do this). Therefore I cannot test this PR and I don't have much time to debug this further. Sorry.\n. This PR should be submit to Homebrew.  See CONTRIBUTING.md for more details on where PR should send to?\n. May need to ping @tdsmith who is our Python expert. \n. What does your formula looks like?\n. In fact, HOMEBREW_BOTTLE_DOMAIN is used to create mirror for bottle downloading. Since most of Linuxbrew's formulae don't have bottle yet. You should just create your bottle with brew bottle <formula> --root-url=<your server>.\n. > thanks it worked, for some reason though if I don't use --force-bottle it builds directly from source, is that the intended behavior ?\nThat would relate to whether your bottles are relocatable. If not, you need to install Linuxbrew in the same prefix to use the bottle. \nI am not fully familiar to how Linuxbrew relocate the bottle. Ping @sjackman here, he should know about your problem. \n. If brew gist-logs runs extreme slow, it usually means the log file is too large for gist to handle. I noticed this a while time ago. In this case, it would be better to manually uploading the log files. \n. See https://github.com/Homebrew/homebrew-science/pull/2847\n. @DoomHammer Thanks for the pull request! \ud83c\udf89 \n. Sorry, I'm kinda losing context here. What's the problem here?\nI think the right course is putting the logic to alter *flags in env block. You can see JavaRequirement for example. However, there is a problem regarding Linuxbrew which is running under Stdenv rather than Superenv. As result all of env blocks will never be called.\n. I will help now and then whenever I'm available. But I cannot keep too many promise as Homebrew has already occupied most of my spare time, similar as DomT4.\nBTW, congratulations.\n. > Would you please add @dpo and @tseemann to the Homebrew/linux team?\nDone. Also I think you have the access to change Linux team whatever you want.\n. Personally, I kinda opposite to move Linuxbrew into a new organization. I agree with DomT4 that moving wouldn't solve any immediate problem. The Travis part isn't a problem for Linuxbrew for now as it doesn't use any. And we can use Travis on fork when it's required(for example, creating a bot account for Linuxbrew).\nBeside, it may cause unnecessary confusion to the existed Linuxbrew users. If helps, README should be enough to clarify for new users.\nLast but not least, to improve Linuxbrew in long term will require some work on Homebrew's end. For example, we should add better os abstraction other than relying on OS.mac?/linux?. \n. The root of the problem is Homebrew's OS abstraction is not good enough, and Linuxbrew uses too many hacks instead of proper abstraction.\nUntil I figure out better OS abstraction on Homebrew end and move all linux specific codes to os/linux.rb, you can temporary workaround the problem by require \"os/mac\" unconditionally.\n. Could you submit this issue to Homebrew? This is just one of many bugs in our fragile dependency system.\n. > I see that you added HOMEBREW_VERBOSE_USING_DOTS for Travis. Could you possibly also add HOMEBREW_VERBOSE_USING_DOTS support to brew uses?\nNo, I can't.\n\nbrew uses --recursive python takes 22 min on my system. Is this expected?\n\nWe are now seeing this on Homebrew as well. A short time fix may be developed. But that's to be said, there are more deep issues here which require long time solution.\n. The two issues in your last comment are outdated. I suggest you reference to https://github.com/Homebrew/legacy-homebrew/issues/50650 for comprehensive list.\n. > By this you mean bring Linuxbrew/homebrew-core up to date by merging the changes from Linuxbrew/linuxbrew and Homebrew/homebrew-core into Linuxbrew/homebrew-core?\nYes, you should make Linuxbrew/homebrew-core sync with Linuxbrew/linuxbrew then with Homebrew/homebrew-core.\n. > And by this you mean merge Homebrew/legacy-homebrew into Linuxbrew/linuxbrew.\nYep. \n\nLast step is to rename Linuxbrew/linuxbrew to Linuxbrew/legacy-linuxbrew.\n\nThis is optional step.\nAlso, you can reach me on Slack for more specific  questions.\n. Yes, you can. Just to remember to do this at the very last step. \n. It's rewriting the entire git history. So you should run it in a separate copy. \n. > If it's rewriting history, will it leave the repository in a state that Homebrew/brew can be merged into Linuxbrew/brew? I'm afraid that they'll have totally different commit histories after it's done.\nI dunno. So I would suggest to fork then apply the changes. Or you could use this to find all the different commit http://stackoverflow.com/questions/7566416/different-commits-between-two-branches\n\nWould a simple git rm Library/Formula Library/Aliases be possible?\n\nBut it will introduce a large git history.\n\nthen maybe the git commit SHA1 will match up. Fingers crossed.\n\nI don't think that will happen.\n. FYI, this is the script I used to create both repos. https://gist.github.com/xu-cheng/a7f788d28ea27c2722ff\nI didn't do the git message rewriting. Because I'm not sure whether #number should be rewritten to Homebrew/homebrew#number or Linuxbrew/linuxbrew#number as there will be some overlap.\n\nThe commit time stamp of the commit with the log message.\n\nThis is because during the time between I created Homebrew/brew to the time we started to use it, all the commits are manually synced from Homebrew/homebrew using git format-patch and git am.\n. Also, I don't think you will get same SHA1 eventually. Instead, I suggest you do git rebase --onto to force to sync between Homebrew and Linuxbrew. \n. https://github.com/Linuxbrew/linuxbrew/issues/1033\n. This is incorrect. The core tap should always call Homebrew/homebrew even for Linuxbrew. Noted this is not the name of Linuxbrew project but  an internal name for a specialize tap.\n. You need to update https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/cmd/test-bot.rb#L44\nto\nruby\nif (tap = ENV[\"TRAVIS_REPO_SLUG\"]) && (tap =~ %r{^([\\w-]+)/homebrew-([\\w-]+)$})\nI may apply this fix in Homebrew upstream.\n. Sorry, the regex should be %r{^([\\w-]+)/homebrew-([\\w-]+)$}. I wrote it wrong in the first time.\n. ",
    "guidstah": "Doesn't really work for me!\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/uninstall)\"\n-e:89:in ``': No such file or directory - command -v brew (Errno::ENOENT)\n    from -e:89:in `<main>'\nThe 'command -v brew' has the following output when entered in terminal:\n~ $ command -v brew\n/home/guido/.linuxbrew/bin/brew\nWhich is the actual directory linuxbrew is installed.\nHow do I run the uninstall script without any errors??\nEdit: Got it working with the \nsudo ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n. ",
    "pallawik": "hii there, how can i remove linuxbrew, i want to install cufflinks but somehow it return error like given below. so i'll first remove linuxbrew and reinstall it, i tried all possibilities wt i can do..... please help me\n``\nLast 15 lines from /home/mkumar/.cache/Homebrew/Logs/cufflinks/02.make:\nlibcufflinks.a(abundances.o): In functionvoid boost::archive::save_access::save_primitive, std::allocator > >(boost::archive::binary_oarchive&, std::__cxx11::basic_string, std::allocator > const&)':\n/home/mkumar/.linuxbrew/include/boost/archive/detail/oserializer.hpp:90: undefined reference to boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive, char, std::char_traits<char> >::save(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\n/home/mkumar/.linuxbrew/include/boost/archive/detail/oserializer.hpp:90: undefined reference toboost::archive::basic_binary_oprimitive >::save(std::__cxx11::basic_string, std::allocator > const&)'\nlibcufflinks.a(abundances.o): In function void boost::archive::load_access::load_primitive<boost::archive::binary_iarchive, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(boost::archive::binary_iarchive&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)':\n/home/mkumar/.linuxbrew/include/boost/archive/detail/iserializer.hpp:107: undefined reference toboost::archive::basic_binary_iprimitive >::load(std::__cxx11::basic_string, std::allocator >&)'\nlibcufflinks.a(abundances.o): In function void boost::archive::save_access::save_primitive<boost::archive::binary_oarchive, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(boost::archive::binary_oarchive&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\n/home/mkumar/.linuxbrew/include/boost/archive/detail/oserializer.hpp:90: undefined reference toboost::archive::basic_binary_oprimitive >::save(std::__cxx11::basic_string, std::allocator > const&)'\nlibcufflinks.a(abundances.o): In function void boost::archive::load_access::load_primitive<boost::archive::binary_iarchive, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(boost::archive::binary_iarchive&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)':\n/home/mkumar/.linuxbrew/include/boost/archive/detail/iserializer.hpp:107: undefined reference toboost::archive::basic_binary_iprimitive >::load(std::__cxx11::basic_string, std::allocator >&)'\ncollect2: error: ld returned 1 exit status\nmake[2]:  [cufflinks] Error 1\nmake[2]: Leaving directory /tmp/cufflinks-20170517-29733-q22k12/cufflinks-2.2.1/src'\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory/tmp/cufflinks-20170517-29733-q22k12/cufflinks-2.2.1'\nmake:  [all] Error 2\nREAD THIS: https://github.com/Linuxbrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nSymbol not found while using Cufflinks https://github.com/Homebrew/homebrew-science/issues/5466\n```. ",
    "aanbar": "As I understand, this project is aimed at building the latest version from source, rather than sticking to old versions provided by your package manager (for example apt-get or yum).\n. ",
    "hepin1989": "@aanbar yes ,that's it.\n. so I think ,this PR should be closed.\n. ",
    "waiting-for-dev": "Here it is:\nlinux-vdso.so.1 =>  (0x00007fff4fde1000)\nlibgdbm.so.4 => not found\nlibpcre.so.1 => not found\nlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5ba4973000)\nlibtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f5ba474a000)\nlibrt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f5ba4542000)\nlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f5ba42bf000)\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5ba3f34000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f5ba4b9d000)\nlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f5ba3d18000)\n. marc@mojos:~$ set |grep '^LD'\nLD_LIBRARY_PATH=/home/marc/.linuxbrew/lib:\nmarc@mojos:~$ export LD_LIBRARY_PATH\nmarc@mojos:~$ set |grep '^LD'\nLD_LIBRARY_PATH=/home/marc/.linuxbrew/lib:\nmarc@mojos:~$ ldd ~/.linuxbrew/bin/zsh\n    linux-vdso.so.1 =>  (0x00007fffe15ff000)\n    libgdbm.so.4 => /home/marc/.linuxbrew/lib/libgdbm.so.4 (0x00007f5279591000)\n    libpcre.so.1 => /home/marc/.linuxbrew/lib/libpcre.so.1 (0x00007f527933d000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5279115000)\n    libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f5278eec000)\n    librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f5278ce4000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f5278a61000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f52786d6000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f52784ba000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f527979d000)\nThanks!! Now it works. Can you explain what happened? It was just a matter of exporting LD_LIBRARY_PATH?. In my .bashrc I had LD_LIBRARY_PATH=\"$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH\" instead of the export, but I thought it was the same.\n. Yeah, I was used to the PATH experience. Thanks a lot :)\n. Just in case someone is interested. Previous solved the issue when it is the case that you launch zsh from bash or another running shell, but the error persists when zsh is configured to be the default shell. It is that way because zsh can't be launched as the first shell because it doesn't find its shared libraries because it hasn't yet have time to read .zshrc.\nI'm not sure in others distributions, but in debian systems you must add as sudo a file in /etc/ld.so.conf.d/ called for example linuxbrew.conf. For this file it is enough to have a line with the path to the lib directory of your linubrew installation, for example:\n/home/user/.linuxbrew/lib\nThat way, linuxbrew lib directory will be available on startup and the default shell will know about it.\nIf you want to update the settings before restart, run sudo ldconfig.\nI don't know if it would be good to add it to the README, because it is needed for a complete installation of linuxbrew.\n. ",
    "LeonB": "@sjackman I'm trying to write a patch for this. What's a good way of detecting libx11-dev on Linux?\n. Hi sjackman, you were right. It was my problem. I think the remote in .git/config wasn't right.\n. Hi @sjackman, thanks for the quick reply. All valid remarks I think! I have a few questions but I'll post those as line notes too.\n. @jacknagel, thanks! I'll have another look at it after work.\n. I've updated the PR  with based on the comments. Two things: I didn't know if OS:X11.installed? should really be a separate file or if it should be included in x11_dependency.rb.\nSecond: xterm -version does return a version string, but it's not really the X11 client library version. I really can't find any foolproof way to determine the installed X11 client version :(\n. ldconfig -v could be a way to determine it on Linux but even then it wouldn't be fool proof.\n. I have no idea. Ruby complained about not finding the required file. This fixed it. I'll look into it what the actual problem was.\n. ",
    "sgtpep": "Oh, sorry, I forgot that ~/Library is a standard path on OS X, so it's OK on homebrew.\n. ",
    "soimort": "I get it. Will send pull requests to the upstream Homebrew then. Thanks for reviewing!\n. I'm not sure if I can do this - it seems Homebrew maintainers might have kept headerpad_max_install_names there on purpose (but I'm not really sure!)\nI need more time to look further into this issue and see how this option will affect the upstream (maybe when I have a working Mac to test Homebrew with)\n. ",
    "zyxue": "I might not have done it right. Seems it should have been better if the formula works for both Mac OS X and linux, is that right?\n. I find this probably a problem due to the base OS. In particular, the first Dockerfile with google/cloud-sdk doesn't work, but the second one with Ubuntu works.\n```\nFROM google/cloud-sdk\nRUN apt-get update && apt-get install -y build-essential git locales sudo\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN apt-get install -y curl g++ gawk m4 make patch ruby tcl\nRUN useradd -m -s /bin/bash linuxbrew\nRUN echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers\nUSER linuxbrew\nWORKDIR /home/linuxbrew\nENV HOME /home/linuxbrew\nENV PATH /home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH\nENV SHELL /bin/bash\nRUN yes |ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/linuxbrew/go/install)\"\nRUN brew doctor || true\nRUN brew install -dv makedepend\n```\n```\nhttps://raw.githubusercontent.com/sjackman/docker-linuxbrew/master/linuxbrew-core/Dockerfile\nFROM ubuntu\nMAINTAINER Shaun Jackman sjackman@gmail.com\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN apt-get update\nRUN apt-get install -y curl g++ gawk m4 make patch ruby tcl\nRUN useradd -m -s /bin/bash linuxbrew\nRUN echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers\nUSER linuxbrew\nWORKDIR /home/linuxbrew\nENV PATH /home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH\nENV SHELL /bin/bash\nRUN yes |ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/linuxbrew/go/install)\"\nRUN brew doctor || true\nRUN brew install -dv makedepend\n``\n. Right, I have also seen things going on withhtop`, and mostly are labeled as low-priority processes, but on the screen, it just appears to be stuck there. The OS in the case of google/cloud-sdk is Debian-Jessie.\n. ",
    "hanxue": "Seems like an openSSL issue rather than Linuxbrew or even git. The git clone command works fine for me. Can you try to upgrade your version of openSSL? If that does not solve the problem, please share your openssl version\n$ openssl version\nOpenSSL 1.0.1 14 Mar 2012\n. ",
    "chvcdeepak": "In my case for the above error below command worked\ngit config --global http.sslVerify false\n. ",
    "francicco": "Hi guys also for me it's not working, and I just installed the latest version of openSSL\n$ openssl version -a\nOpenSSL 1.0.1t  3 May 2016\nbuilt on: Fri Jun 10 17:45:19 2016\nplatform: linux-x86_64\noptions:  bn(64,64) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx) \ncompiler: gcc -I. -I.. -I../include  -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -O3 -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM\nOPENSSLDIR: \"/scratch/c770/c7701100/software/openssl_1.0.1t/ssl\"\nAny help?\nthanks\nF\n. ",
    "monaka": "I see. I would try to implement it after finishing some my tasks.\n. I made a quick hack and got a bottle.\nBut... It's slightly dirty...\n```\ndiff --git a/Library/Homebrew/keg_fix_install_names.rb b/Library/Homebrew/keg_fix_install_names.rb\nindex 35d3ddc..01295c6 100644\n--- a/Library/Homebrew/keg_fix_install_names.rb\n+++ b/Library/Homebrew/keg_fix_install_names.rb\n@@ -124,9 +124,13 @@ class Keg < Pathname\n   def lib; join 'lib' end\ndef each_install_name_for file, &block\n-    dylibs = file.dynamically_linked_libraries\n-    dylibs.reject! { |fn| fn =~ /^@(loader_|executable_|r)path/ }\n-    dylibs.each(&block)\n+    if OS.mac?\n+      dylibs = file.dynamically_linked_libraries\n+      dylibs.reject! { |fn| fn =~ /^@(loader_|executable_|r)path/ }\n+      dylibs.each(&block)\n+    elsif OS.linux?\n+# TODO: implement later.\n+    end\n   end\ndef dylib_id_for file, options={}\n```\n. I tried it and succeeded to make some bottles. Thank you for your work.\n. Thanks for your fix.\nIt might feel slightly odd to get Linux versions from MacOS.version... but it is a issue of Homebrew.\n. :+1:\n. ",
    "atroche": "Nice! Would love to see this merged.\n. ",
    "ntkme": "I tried to brew install vim --HEAD with linuxbrew gcc-4.8 and it had same result.\nThe VIM patch related to this issue is:\n7.3.050  the link script is clumsy, should use --as-needed\nSince this issue only affects RHEL, I think it's RHEL's problem but not VIM's.\n. I already tried that, failed to build with same error.\n. $ ld --version\nGNU ld version 2.20.51.0.2-5.36.el6 20100205\nCopyright 2009 Free Software Foundation, Inc.\nThis program is free software; you may redistribute it under the terms of\nthe GNU General Public License version 3 or (at your option) a later version.\nThis program has absolutely no warranty.\n$ ld --help | grep as-needed\n  --as-needed                 Only set DT_NEEDED for following dynamic libs if \nused\n  --no-as-needed              Always set DT_NEEDED for dynamic libraries mentio\nned on\nI haven't report it on the VIM mailing list because I don't think it's a bug of VIM.  Maybe I should post it.\n. @sjackman Sorry, I figured out that additional font search directories don't cause any trouble.\nHowever I just tested on another Linux distro, and it failed because of following:\ngrep: character class syntax is [[:space:]], not [:space:]\nENV[\"POSIXLY_CORRECT\"] fixed it, so I changed the patch.\n. CentOS 6.\n. https://gist.github.com/anonymous/b1aa70bf6a0530737221\n. No, it doesn't help. It actually has nothing to do with docbook2man. As I said, the problem is on GNU grep.\nSetting POSIXLY_CORRECT forces GNU grep behave under posix standard.\n. ``` sh\n$ which -a docbook2man\n/data/linuxbrew/bin/docbook2man\n/usr/bin/docbook2man\n$ docbook2man --version\n/data/linuxbrew/bin/docbook2man (part of docbook2X 0.8.8)\n$Revision: 1.12 $ $Date: 2006/04/14 17:29:04 $\n\nCopyright (C) 2003-2004 Steve Cheng\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n. It has been fixed in upstream...\nAnd I found a better workaround for this:\nsh\nbrew unlink grep\nbrew install fontconfig\nbrew link grep\n. ",
    "burningTyger": "There's an open issue at https://github.com/neovim/neovim/issues/741\nBut I thought since this is mainly caused by another package I'd open an issue here too.\n. It probably would but that's not really an option for linuxbrew, is it? :smiley: \n. ok, got it. We can close this then.\n. looks like it's already installed but not set in SSLLIBPATH.\n. uh, added:\nexport SSLLIBPATH=/usr/lib/x86_64-linux-gnu/\nwhich does the trick I guess. It's compiling.\n. ",
    "nogalesc": "Yes, gtsam does compile with boost 1.55.0  but the version I wanted to use was 1.49 because it is required by other programs we need. My teammate and I forked the repository for gtsam and we are referencing that instead and that is working for us.\n. ",
    "hugoerg56": "thanks, newbie things!! xD\n. ",
    "roryk": "Hi Shaun,\nThank you very much for taking the time to look this over, I didn't realize one of the goals was to keep compatibility. I made the changes you suggested and tested it on Ubuntu precise and OSX 10.9 and it works on both. Let me know if you want me to squash those two commits together, I didn't want to lose the conversation context without asking first.\n. Thanks. No the code chunk is extraneous, I removed it and restored the whitespace.\n. Thank you for the suggestion, the back and forth and the code cleanup. I took a stab at fixing the check in the main homebrew repository.\n. Thanks @saketkc for the super fast reply,\nWe just have one gcc available: /n/sw/centos6/gcc-4.8.1/bin/gcc, if I stick the HOMEBREW_CC=gcc it still gives the same error. \n. Hm, as another data point, it works fine on my Ubuntu box but not this centos6 machine. I made a link from the gcc->gcc-4.8 and set HOMEBREW_CC=gcc-4.8, but still no dice.\n. Yeah, the symlink looks looks good; which gcc-4.8 returns the right path and running gcc-4.8 runs the right executable.\n. No dice; I'm not sure what changed, this was working before, but it might have been because we weren't compiling anything.\n. ",
    "andersje": "It compiles properly under ubuntu 14.04, 64-bit, provided I use the \"install.sh\" script which ships with the MaSuRCA source code tarball -- it would appear to leverage qmake, among other things.  This is a fairly low-priority fix (at least for us), since we've managed to compile it outside of linuxbrew.\n. ",
    "arubyist": "@sjackman, just saw your response now. \nNo need to report the outcome of it now. It's working now. \nThank you though! \n. ",
    "awittmann": "Place  #include \"string.h\" in the header file the error is coming from. This works for me.\n. ",
    "tsuharesu": "Thanks!\n. ",
    "zeneofa": "Hi,\nHere is the gist\nhttps://gist.github.com/d70ae42c0af1dad7d586\nWould it be possible to let brew not look at that directory, it is not in\nmy path nor in my ld_library_path.\nKind Regards,\nPiet Jones\nOn Wed, Jul 9, 2014 at 5:36 PM, Misty De Meo notifications@github.com\nwrote:\n\nCan you please post the detailed build logs from brew gist-logs\npkg-config --config --doctor?\nYou're right, though, that it sounds like the iconv header (and\nlibraries?) in /usr/local are the problem. Unfortunately, there likely\nisn't really a workaround for this other than removing that specific iconv\ninstall. (This is the reason Homebrew-provided software that clashes with\nsystem libraries is installed to a private prefix, not publicly.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/101#issuecomment-48490670.\n. some more information:\n\n``\nbrew install -vd curl\n/data/home/jq2/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /data/home/jq2/.linuxbrew/Library/Formula/curl.rb\n/data/home/jq2/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /data/home/jq2/.linuxbrew/Library/Formula/openssl.rb\n/data/home/jq2/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /data/home/jq2/.linuxbrew/Library/Formula/makedepend.rb\n/data/home/jq2/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /data/home/jq2/.linuxbrew/Library/Formula/pkg-config.rb\n/data/home/jq2/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /data/home/jq2/.linuxbrew/Library/Formula/zlib.rb\nError: Input/output error @ rb_file_flock - /home/jq2/.cache/Homebrew/Formula/curl.brewing\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula_lock.rb:15:inflock'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula_lock.rb:15:in lock'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula.rb:691:inlock'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formulary.rb:22:in to_proc'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula_installer.rb:691:ineach'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula_installer.rb:691:in lock'\n/data/home/jq2/.linuxbrew/Library/Homebrew/formula_installer.rb:99:inprelude'\n/data/home/jq2/.linuxbrew/Library/Homebrew/cmd/install.rb:183:in install_formula'\n/data/home/jq2/.linuxbrew/Library/Homebrew/cmd/install.rb:89:ininstall'\n/data/home/jq2/.linuxbrew/Library/Homebrew/cmd/install.rb:89:in each'\n/data/home/jq2/.linuxbrew/Library/Homebrew/cmd/install.rb:89:ininstall'\n/data/home/jq2/.linuxbrew/Library/brew.rb:127:in `send'\n/data/home/jq2/.linuxbrew/Library/brew.rb:127\nbrew doctor:\nbrew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: The system curl on 10.6 and below is often incapable of supporting\nmodern secure connections & will fail on fetching formulae.\nWe recommend you:\n  brew install curl\nWarning: \"config\" scripts exist outside your system or Homebrew directories.\n./configure scripts often look for *-config scripts to determine if\nsoftware packages are installed, and what additional flags to use when\ncompiling and linking.\nHaving additional scripts in your path can confuse software installed via\nHomebrew if the config script overrides a system or Homebrew provided\nscript of the same name. We found the following \"config\" scripts:\n    /home/jq2/.linuxbrew/bin/curl-config\n    /home/jq2/.linuxbrew/bin/apu-1-config\n    /home/jq2/.linuxbrew/bin/ncurses5-config\n    /home/jq2/.linuxbrew/bin/ncursesw5-config\n    /home/jq2/.linuxbrew/bin/apr-1-config\n    /home/jq2/.linuxbrew/bin/pkg-config\n    /opt/torque/bin/pbs-config\n    /home/jq2/miniconda/bin/xml2-config\n    /home/jq2/miniconda/bin/freetype-config\n    /home/jq2/miniconda/bin/libpng16-config\n    /home/jq2/miniconda/bin/python-config\n    /home/jq2/miniconda/bin/libpng-config\nWarning: You have unlinked kegs in your Cellar\nLeaving kegs unlinked can lead to build-trouble and cause brews that depend on\nthose kegs to fail to run properly once built. Run brew link on these:\n    blast\nWarning: Some installed formula are missing dependencies.\nYou should brew install the missing dependencies:\nbrew install jpeg libpng pcre\n\nRun brew missing for more details.\n```\n. I commented out line 15-17 in /data/home/jq2/.linuxbrew/Library/Homebrew/formula_lock.rb, and things seem to work now. Don't know what this will break down the line.\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/formula_lock.rb#L15-L17\n. I tried removing the entire directory structure, it did not work. The only thing that appears to work is the commenting of the lines. I have also asked the sys admin for the cluster I am working on if they know what is going on, everybody seems stumped. \n. ",
    "mmoussouni": "Thanks it solved the problem.\n. ",
    "dherges": "Here's what fixed it for me: change file /usr/local/Library/Formula/gource.rb\n``` diff\ndiff --git a/Library/Formula/gource.rb b/Library/Formula/gource.rb\nindex 11db522..713d4dd 100644\n--- a/Library/Formula/gource.rb\n+++ b/Library/Formula/gource.rb\n@@ -26,7 +26,7 @@ class Gource < Formula\n   if MacOS.version < :mavericks\n     depends_on \"boost\" => \"c++11\"\n   else\n-    depends_on \"boost\"\n+    depends_on \"boost\" => \"c++11\"\n   end\ndepends_on \"glew\"\n```\nOS X 10.9.4:\nbash\n$ brew --config\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/homebrew.git\nHEAD: dfcff9c1358b5d0e4865f0ec592710f223e38a34\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nCPU: 8-core 64-bit sandybridge\nOS X: 10.9.4-x86_64\nXcode: 5.1.1\nCLT: 5.1.0.0.1.1396320587\nClang: 5.1 build 503\nX11: N/A\nSystem Ruby: 2.0.0-451\nPerl: /usr/bin/perl\nPython: /usr/bin/python\nRuby: /usr/bin/ruby\n. Oh, gosh. This project is about a Linux port of Homebrew! Sorry, I were mistaken. If you want to delete my notice, feel free to do so. I'll submit it to original Homebrew repo\n. ",
    "FishGel": "yes, I install python and setuptools manual.\n. OK, thanks\n. ",
    "mrcodydaniel": "brew doctor output:\nagrant@vagrant-ubuntu-trusty-64:/$ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: The filesystem on / appears to be case-sensitive.\nThe default OS X filesystem is case-insensitive. Please report any apparent problems.\nWarning: Suspicious git origin remote found.\nWith a non-standard origin, Homebrew won't pull updates from\nthe main repository. The current git origin is:\n  https://github.com/Homebrew/linuxbrew\nUnless you have compelling reasons, consider setting the\norigin remote to point at the main repository, located at:\n  https://github.com/Homebrew/homebrew.git\nWarning: The version of libcurl provided with Mac OS X 0 has outdated\nSSL certificates.\nThis can cause problems when running Homebrew commands that use Git to\nfetch over HTTPS, e.g. brew update or installing formulae that perform\nGit checkouts.\nYou can force Git to ignore these errors:\n  export GIT_SSL_NO_VERIFY=1\nor\n  git config --global http.sslVerify false\nWarning: Your Homebrew is not installed to /usr/local\nYou can install Homebrew anywhere you want, but some brews may only build\ncorrectly if you install in /usr/local. Sorry!\nWarning: Ruby version 1.9.3 is unsupported on 0. Homebrew\nis developed and tested on Ruby 1.8, and may not work correctly\non other Rubies. Patches are accepted as long as they don't cause breakage\non supported Rubies.\nWarning: Your Xcode is configured with an invalid path.\nYou should change it to the correct path:\n  sudo xcode-select -switch /Developer\n. extempore@extempore-studio:~$ which -a python\n/usr/bin/python\nran brew reinstall python and reran original brew install, got:\n```\n==> ./bootstrap --prefix=/home/extempore/.linuxbrew/Cellar/cmake/3.0.2 --system-\n==> make\n[ 94%] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestHG.cxx.o\n[ 95%] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestP4.cxx.o\nLinking CXX static library libCTestLib.a\n[ 95%] Built target CTestLib\nmake: *** [all] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nFix LLVM CMake modules not being preprocessed (https://github.com/Homebrew/homebrew/pull/29976)\ncmake builds fail on CLT-only with --env=std (https://github.com/Homebrew/homebrew/issues/29101)\n```\n. --without-docs failed in same way.\nRunning -dv now\n. Verbose logs below:\nextempore@extempore-studio:/tmp/cmake-PeledP/cmake-3.0.2$ make V=1\n[  2%] [  2%] [  4%] Built target cmIML_test\nBuilt target cmcompress\n[  8%] Built target cmsys_c\nBuilt target cmsys\n[ 16%] [ 19%] [ 19%] Built target foo\nBuilt target cmForm\nBuilt target pseudonl_BC\n[ 45%] Built target cmlibarchive\n[ 45%] [ 45%] Built target pseudonl_valgrind\nBuilt target pseudonl_purify\n[ 46%] Built target cmsysTestDynload\n[ 46%] Built target cmsysTestProcess\n[ 46%] Built target cmsysTestSharedForward\n[ 47%] Built target cmsysTestsC\n[ 50%] Built target cmsysTestsCxx\n[ 77%] Built target CMakeLib\nLinking CXX executable ../bin/ccmake\nLinking CXX executable ../bin/cmake\n[ 80%] Built target CPackLib\n[ 92%] Built target CTestLib\n[ 94%] Built target CMakeLibTests\n[ 95%] Built target runcompilecommands\n[ 96%] Built target memcheck_fail\n[ 96%] Built target pseudo_BC\nScanning dependencies of target pseudo_purify\nScanning dependencies of target pseudo_valgrind\n[ 96%] Building CXX object Tests/CTestTestMemcheck/CMakeFiles/pseudo_purify.dir/ret0.cxx.o\n[ 96%] Building CXX object Tests/CTestTestMemcheck/CMakeFiles/pseudo_valgrind.dir/ret0.cxx.o\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_id@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLv3_client_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_status@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_get_cert_store@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_next@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Final@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_set_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_verify@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_cleanup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_default_passwd_cb_userdata@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `d2i_PKCS12_fp@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_session@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PEM_write_bio_X509@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_error_string_n@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_by_id@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_set_result@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_peek@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_add_lookup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_CTX_get_current_cert@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate_chain_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_shutdown@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_pubkey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_check_issued@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_malloc@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_get_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_opener@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLeay@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509V3_EXT_print@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_peer_cert_chain@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Final@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_load_crl_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_EXTENSION_get_critical@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_type@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `i2t_ASN1_OBJECT@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_load_error_strings@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_current_cipher@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get_input_flags@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_set_default@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_PKEY_copy_parameters@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_get_entry@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_write@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BN_num_bits@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_add_client_CA@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BN_bn2bin@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_connect_state@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_privatekey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_print@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_cleanup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_verify_cert_error_string@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_EXTENSION_get_object@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_add@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_load_verify_locations@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PEM_read_X509@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_length@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_PrivateKey_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_pop@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_peek_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CIPHER_get_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_free_strings@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_ctrl_cmd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_reader@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_destroy_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_num@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_load_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_serialNumber@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_srp_password@OPENSSL_1.0.1'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_OpenSSL@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_to_UTF8@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Update@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_clear_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_egd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_opener@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_parse@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_issuer_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get0_user_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_fd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_cleanup_all_ex_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_s_mem@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_read@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_create_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get_string_type@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_check_private_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_remove_thread_state@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_INTEGER_get@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_connect@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_get_index_by_NID@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_writer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLv23_client_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `GENERAL_NAMES_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_closer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_default_passwd_cb@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_LOOKUP_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_set_odd_parity@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_set_flags@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get1_session@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_file_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_pending@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_SESSION_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_print_ex@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_certificate@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_closer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_PrivateKey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_writer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_finish@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `OPENSSL_add_all_algorithms_noconf@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_load_private_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_library_init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_callback_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_subject_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_error_string@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_cipher_list@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_ecb_encrypt@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_ext_d2i@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_reader@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_ENTRY_get_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_bytes@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_PKEY_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_value@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_pop_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_srp_username@OPENSSL_1.0.1'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_load_builtin_engines@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_verify_result@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Update@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_shutdown@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_first@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_PBE_add@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_peer_certificate@OPENSSL_1.0.0'\ncollect2: error: ld returned 1 exit status\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_id@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLv3_client_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_status@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_get_cert_store@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_next@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Final@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_set_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_verify@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_cleanup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_default_passwd_cb_userdata@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `d2i_PKCS12_fp@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_session@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PEM_write_bio_X509@OPENSSL_1.0.0'make[2]: \n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_error_string_n@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-*** [bin/cmake] Error 1linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_by_id@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8\n/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_set_result@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_peek@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_add_lookup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_CTX_get_current_cert@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate_chain_file@OPENSSL_1.0.0make[1]: *** [Source/CMakeFiles/cmake.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\n'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_shutdown@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_pubkey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_check_issued@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_malloc@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_get_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_opener@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLeay@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509V3_EXT_print@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_peer_cert_chain@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Final@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_load_crl_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_EXTENSION_get_critical@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_type@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `i2t_ASN1_OBJECT@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_load_error_strings@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_current_cipher@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get_input_flags@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_set_default@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_PKEY_copy_parameters@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_get_entry@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_write@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BN_num_bits@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_add_client_CA@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BN_bn2bin@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_connect_state@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_privatekey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_print@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_cleanup@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_verify_cert_error_string@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_EXTENSION_get_object@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_add@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_load_verify_locations@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PEM_read_X509@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_length@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_PrivateKey_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_pop@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_peek_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CIPHER_get_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_free_strings@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_ctrl_cmd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_reader@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_destroy_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_num@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_load_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_serialNumber@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_srp_password@OPENSSL_1.0.1'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_OpenSSL@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_STRING_to_UTF8@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Update@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_clear_error@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_egd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_opener@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_parse@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_issuer_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get0_user_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_set_fd@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `CRYPTO_cleanup_all_ex_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_certificate@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_s_mem@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_read@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_create_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_get_string_type@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_check_private_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_remove_thread_state@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ASN1_INTEGER_get@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_connect@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_get_index_by_NID@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_writer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSLv23_client_method@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `GENERAL_NAMES_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_closer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_default_passwd_cb@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_LOOKUP_file@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_set_odd_parity@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_STORE_set_flags@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get1_session@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_file_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_pending@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_SESSION_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_print_ex@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_certificate@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_set_closer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_use_PrivateKey@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_writer@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_finish@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_new@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `OPENSSL_add_all_algorithms_noconf@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_load_private_key@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_library_init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_callback_ctrl@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_subject_name@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ERR_error_string@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_cipher_list@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `DES_ecb_encrypt@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_get_ext_d2i@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `UI_method_get_reader@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD4_Init@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `X509_NAME_ENTRY_get_data@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `RAND_bytes@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `EVP_PKEY_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_value@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `sk_pop_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_CTX_set_srp_username@OPENSSL_1.0.1'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_load_builtin_engines@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_verify_result@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `MD5_Update@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_shutdown@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `ENGINE_get_first@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `PKCS12_PBE_add@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `BIO_free@OPENSSL_1.0.0'\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_peer_certificate@OPENSSL_1.0.0'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [bin/ccmake] Error 1\nmake[1]: *** [Source/CMakeFiles/ccmake.dir/all] Error 2\nLinking CXX executable purify\nLinking CXX executable valgrind\n[ 96%] Built target pseudo_purify\n[ 96%] Built target pseudo_valgrind\nmake: *** [all] Error 2\n. No change. :(\n. Okay, I got a complete build finally, ran the following commands, one of which fixed it...\nbrew reinstall curl\nsudo aptitude reinstall libssl-dev\nOne or the other must not've built correctly, I somewhat suspect libssl-dev.  In either case, it completed!\n. ",
    "kingcons": "I'm also hitting the pkgutil error while trying to build extempore (really, its dependency pcre). Interestingly, running with brew install --debug prce hangs during make test right before \"Error: No such file or directory - /usr/sbin/pkgutil\" occurs.\n. ",
    "mcflugen": "I was getting the same error as @mbsullivan but, for me, it was when trying to install gettext. I saw the same error retrieving current directory error followed by the pkgutil error.\nThis isn't exactly a \"solution\", but I could get things to install if I commented out the following line from the gettext formula,\nENV.libxml2\nNot totally sure what goes on in that line but it seems to trigger the initial error.\n. ",
    "jrevillard": "Hi,\nI just tried the new wiki page instructions and I get this error when I install hello:\n``\n==> ./configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/home/jerome/linuxbrew/Cellar/hello/2.9\nconfigure: WARNING: unrecognized options: --disable-debug\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\nchecking for gawk... gawk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for gcc... /home/jerome/linuxbrew/bin/gcc-4.9\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... configure: error: in/tmp/hello-y31448/hello-2.9':\nconfigure: error: cannot run C compiled programs.\nIf you meant to cross compile, use --host'.\nSeeconfig.log' for more details\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: d30e6f289fea2c50c933b2d1ac3b67e5e87f3cfc\nHOMEBREW_PREFIX: /home/jerome/linuxbrew\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nX11: N/A\n==> ENV\nCC: /home/jerome/linuxbrew/bin/gcc-4.9 => /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/gcc-4.9\nCXX: /home/jerome/linuxbrew/bin/g++-4.9 => /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/g++-4.9\nOBJC: /home/jerome/linuxbrew/bin/gcc-4.9\nOBJCXX: /home/jerome/linuxbrew/bin/g++-4.9\nHOMEBREW_CC: gcc-4.9\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/jerome/linuxbrew/include\nLDFLAGS: -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2\nMAKEFLAGS: -j8\nCMAKE_PREFIX_PATH: /home/jerome/linuxbrew\nPKG_CONFIG_LIBDIR: /home/jerome/linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /home/jerome/linuxbrew/share/aclocal\nPATH: /home/jerome/linuxbrew/bin:/home/jerome/rpms/bin:/home/jerome/rpms/usr/bin:/usr/bin:/bin:/home/jerome/linuxbrew/Library/Contributions/cmd\nError: hello 2.9 did not build\nLogs:\n     /home/jerome/Library/Logs/Homebrew/hello/01.configure\n     /home/jerome/Library/Logs/Homebrew/hello/config.log\n```\nAny advice please ?\nBest,\nJerome\n. By the way, here is what I found in the config.log\nconfigure:3836: $? = 0\nconfigure:3825: /home/jerome/linuxbrew/bin/gcc-4.9 -v >&5\nUsing built-in specs.\nCOLLECT_GCC=/home/jerome/linuxbrew/bin/gcc-4.9\nCOLLECT_LTO_WRAPPER=/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: ../configure --prefix=/home/jerome/linuxbrew/Cellar/gcc/4.9.1 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-4.9 --with-gmp=/home/jerome/linuxbrew/opt/gmp --with-mpfr=/home/jerome/linuxbrew/opt/mpfr --with-mpc=/home/jerome/linuxbrew/opt/libmpc --with-cloog=/home/jerome/linuxbrew/opt/cloog --with-isl=/home/jerome/linuxbrew/opt/isl --with-system-zlib --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc 4.9.1 --without-multilib' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 4.9.1 (Homebrew gcc 4.9.1 --without-multilib) \nconfigure:3836: $? = 0\nconfigure:3825: /home/jerome/linuxbrew/bin/gcc-4.9 -V >&5\ngcc-4.9: error: unrecognized command line option '-V'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:3836: $? = 1\nconfigure:3825: /home/jerome/linuxbrew/bin/gcc-4.9 -qversion >&5\ngcc-4.9: error: unrecognized command line option '-qversion'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:3836: $? = 1\nconfigure:3856: checking whether the C compiler works\nconfigure:3878: /home/jerome/linuxbrew/bin/gcc-4.9 -Os -w -pipe -march=core2 -isystem/home/jerome/linuxbrew/include -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 conftest.c  >&5\nconfigure:3882: $? = 0\nconfigure:3930: result: yes\nconfigure:3933: checking for C compiler default output file name\nconfigure:3935: result: a.out\nconfigure:3941: checking for suffix of executables\nconfigure:3948: /home/jerome/linuxbrew/bin/gcc-4.9 -o conftest -Os -w -pipe -march=core2 -isystem/home/jerome/linuxbrew/include -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 conftest.c  >&5\nconfigure:3952: $? = 0\nconfigure:3974: result: \nconfigure:3996: checking whether we are cross compiling\nconfigure:4004: /home/jerome/linuxbrew/bin/gcc-4.9 -o conftest -Os -w -pipe -march=core2 -isystem/home/jerome/linuxbrew/include -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 conftest.c  >&5\nconfigure:4008: $? = 0\nconfigure:4015: ./conftest\nInconsistency detected by ld.so: get-dynamic-info.h: 134: elf_get_dynamic_info: Assertion `info[15] == ((void *)0)' failed!\nconfigure:4019: $? = 127\nconfigure:4026: error: in `/tmp/hello-y31448/hello-2.9':\nconfigure:4028: error: cannot run C compiled programs.\nIf you meant to cross compile, use `--host'.\nSee `config.log' for more details\n. My problem might be related to this: at the end of of the glibc installation, I have plenty of patchelf errors:\n...\n/home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\n/home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\n/home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\n/home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\n==> Summary\n/home/jerome/linuxbrew/Cellar/glibc/2.19: 1318 files, 43M, built in 4.6 minutes\nAfter unlinking glibc, patchelf works again, but the glibc installation might not be complete right ?:\n[jerome@srv11:~] 4m35s $ /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf\n/home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\n[jerome@srv11:~] 127 $ brew unlink glibc\nUnlinking /home/jerome/linuxbrew/Cellar/glibc/2.19... 318 symlinks removed\n[jerome@srv11:~] $ /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf\nsyntax: /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf\n  [--set-interpreter FILENAME]\n  [--print-interpreter]\n  [--set-rpath RPATH]\n  [--shrink-rpath]\n  [--print-rpath]\n  [--force-rpath]\n  [--remove-needed LIBRARY]\n  [--debug]\n  [--version]\n  FILENAME\nBest,\nJerome\n. Hi,\nI'm building linuxbrew on a old Scientific Lunix 5 OS.\nI updated linuxbrew and applied your patch but I still have the same problem:\n$ brew reinstall glibc --debug\n...\nFixing /home/jerome/linuxbrew/Cellar/glibc/2.19/lib/libc-2.19.so permissions from 755 to 444\n/home/jerome/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /home/jerome/linuxbrew/Library/Formula/patchelf.rb\nSetting RPATH of /home/jerome/linuxbrew/Cellar/glibc/2.19/bin/gencat\n/home/jerome/linuxbrew/opt/patchelf/bin/patchelf: error while loading shared libraries: /home/jerome/linuxbrew/lib/libc.so.6: ELF file OS ABI invalid\nError: Failed to fix install names\nThe formula built, but you may encounter issues using it or linking other\nformula against it.\n==> Failure while executing: /home/jerome/linuxbrew/opt/patchelf/bin/patchelf --set-rpath /home/jerome/linuxbrew/lib --set-interpreter /home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 /home/jerome/linuxbrew/Cellar/glibc/2.19/bin/\n/home/jerome/linuxbrew/Library/Homebrew/utils.rb:132:in `safe_system'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:72:in `change_rpath'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:8:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/extend/pathname.rb:324:in `ensure_writable'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:7:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:6:in `each'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:6:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/formula_installer.rb:584:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/formula_installer.rb:405:in `finish'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/reinstall.rb:32:in `reinstall_formula'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/reinstall.rb:5:in `reinstall'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/reinstall.rb:5:in `each'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/reinstall.rb:5:in `reinstall'\n/home/jerome/linuxbrew/Library/brew.rb:131:in `send'\n/home/jerome/linuxbrew/Library/brew.rb:131\n==> Summary\n/home/jerome/linuxbrew/Cellar/glibc/2.19: 1318 files, 43M, built in 4.6 minutes\n$ brew test glibc\nTesting glibc\n==> /home/jerome/linuxbrew/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 2>&1 |grep ld.so\n==> /home/jerome/linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 --version\nInconsistency detected by ld.so: get-dynamic-info.h: 134: elf_get_dynamic_info: Assertion `info[15] == ((void *)0)' failed!\nError: glibc: failed\nFailed executing: /home/jerome/linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 --version \n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:557:in `system'\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:541:in `open'\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:541:in `system'\n/home/jerome/linuxbrew/Library/Formula/glibc.rb:36\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:484:in `instance_eval'\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:484:in `test'\n/home/jerome/linuxbrew/Library/Homebrew/extend/fileutils.rb:21:in `mktemp'\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:482:in `test'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/test.rb:57:in `test'\n/usr/lib/ruby/1.8/timeout.rb:67:in `timeout'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/test.rb:56:in `test'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/test.rb:36:in `each'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/test.rb:36:in `test'\n/home/jerome/linuxbrew/Library/brew.rb:131:in `send'\n/home/jerome/linuxbrew/Library/brew.rb:131\nBest,\nJerome\n. By the way, the boostrap gcc version is old of course \n$ gcc -v\nUtilisation des specs internes.\nTarget: x86_64-redhat-linux\nConfigur\u00e9 avec: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-libgcj-multifile --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --disable-plugin --with-java-home=/usr/lib/jvm/java-1.4.2-gcj-1.4.2.0/jre --with-cpu=generic --host=x86_64-redhat-linux\nMod\u00e8le de thread: posix\nversion gcc 4.1.2 20080704 (Red Hat 4.1.2-54)\n. I restarted from scratch, in fact now, with the fixes even the patchelf installation does not work properly:\n==> Finishing up\nln -s ../Cellar/patchelf/0.8/bin/patchelf patchelf\nln -s ../../../Cellar/patchelf/0.8/share/man/man1/patchelf.1 patchelf.1\nln -s ../../Cellar/patchelf/0.8/share/doc/patchelf patchelf\n/home/jerome/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /home/jerome/linuxbrew/Library/Formula/glibc.rb\nSetting RPATH of /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf\n/home/jerome/linuxbrew/opt/patchelf/bin/patchelf --set-rpath /home/jerome/linuxbrew/lib /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf \nError: Failed to fix install names\nThe formula built, but you may encounter issues using it or linking other\nformula against it.\n==> Failure while executing: /home/jerome/linuxbrew/opt/patchelf/bin/patchelf --set-rpath /home/jerome/linuxbrew/lib /home/jerome/linuxbrew/Cellar/patchelf/0.8/bin/patchelf \n/home/jerome/linuxbrew/Library/Homebrew/utils.rb:132:in `safe_system'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:72:in `change_rpath'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:8:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/extend/pathname.rb:324:in `ensure_writable'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:7:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:6:in `each'\n/home/jerome/linuxbrew/Library/Homebrew/keg_fix_install_names.rb:6:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/formula_installer.rb:584:in `fix_install_names'\n/home/jerome/linuxbrew/Library/Homebrew/formula_installer.rb:405:in `finish'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/install.rb:120:in `install_formula'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/install.rb:45:in `install'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/install.rb:45:in `each'\n/home/jerome/linuxbrew/Library/Homebrew/cmd/install.rb:45:in `install'\n/home/jerome/linuxbrew/Library/brew.rb:131:in `send'\n/home/jerome/linuxbrew/Library/brew.rb:131\n==> Summary\n/home/jerome/linuxbrew/Cellar/patchelf/0.8: 6 files, 232K, built in 7 seconds\n. Hi guys,\nI just update and everything works fine for me with your last fixes ;-) !\nI will continue to follow the wiki page and test the different software that I already installed using the \"regular\" installation (vtk5, python, wxPython, etc...)\nThanks for the great work.\nBest,\nJerome\n. ah, curl failed: \n```\nchecking for struct timeval... yes\nchecking run-time libs availability... failed\nconfigure: error: one or more libs available at link-time are not available run-time. Libs used at link-time: -lssl -lcrypto -lssl -lcrypto  -lz -lrt\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: 0aa03d62413343968f616fe26d726204a8c989f2\nHOMEBREW_PREFIX: /home/jerome/linuxbrew\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nX11: N/A\n==> ENV\nCC: /home/jerome/linuxbrew/bin/gcc-4.9 => /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/gcc-4.9\nCXX: /home/jerome/linuxbrew/bin/g++-4.9 => /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/g++-4.9\nOBJC: /home/jerome/linuxbrew/bin/gcc-4.9\nOBJCXX: /home/jerome/linuxbrew/bin/g++-4.9\nHOMEBREW_CC: gcc-4.9\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/jerome/linuxbrew/include\nLDFLAGS: -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2\nMAKEFLAGS: -j8\nCMAKE_PREFIX_PATH: /home/jerome/linuxbrew\nPKG_CONFIG_LIBDIR: /home/jerome/linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /home/jerome/linuxbrew/share/aclocal\nPATH: /home/jerome/linuxbrew/bin:/home/jerome/rpms/bin:/home/jerome/rpms/usr/bin:/usr/bin:/bin:/home/jerome/linuxbrew/Library/Contributions/cmd\nError: curl 7.37.1 did not build\n```\n. @sjackman even simpler, just put curl at the end of the installation line (before the link process) and it works! Might also be a good idea to install bzip2 ...\n++\n. @sjackman python now fail to install with:\nerror: ncurses.h : No such file or directory\n...\nerror: bzlib.h : No such file or directory\n...\nduring the make phase. With a standard installation it works without any issue. Shoud we use \"--env=std\" most of the time with this kind of linuxBrew installation ?\nEDIT: to be completely right, it's during the postinstall phase\n```\n==> Caveats\nSetuptools and Pip have been installed. To update them\n  pip install --upgrade setuptools\n  pip install --upgrade pip\nYou can install Python packages with\n  pip install \nThey will install into the site-package directory\n  /home/jerome/linuxbrew/lib/python2.7/site-packages\nSee: https://github.com/Homebrew/homebrew/wiki/Homebrew-and-Python\nWarning: Pathname#/ called on # with nil as an argument\nThis behavior is deprecated, please pass either a String or a Pathname\nWarning: Pathname#/ called on # with nil as an argument\nThis behavior is deprecated, please pass either a String or a Pathname\n==> /home/jerome/linuxbrew/Cellar/python/2.7.8_1/bin/python -s setup.py --no-user-cfg install --force --verbose --install-scripts=/home/jerome/linuxbrew/Cellar/python/2.7.8_1/bin --install-lib=/home/jerome/linuxbrew/lib/python2.7/site-pac\nWarning: The post-install step did not complete successfully\nYou can try again using brew postinstall python\n==> Summary\n```\n++\n. @sjackman great! \nNew issue faced with your new core utilities section: \n```\n==> Downloading http://ftpmirror.gnu.org/which/which-2.20.tar.gz\n################################################################## 100,0%\n==> ./configure --prefix=/home/jerome/linuxbrew/Cellar/gnu-which/2.20\nsed: error while loading shared libraries: libselinux.so.1: cannot open shared object file: No such file or directory\nconfigure: error: C compiler cannot create executables\nSee `config.log' for more details.\nsed: error while loading shared libraries: libselinux.so.1: cannot open shared object file: No such file or directory\nsed: error while loading shared libraries: libselinux.so.1: cannot open shared object file: No such file or directory\n```\n. Works :-), next one: pcre which is a dep of grep\n```\nTestsuite summary for PCRE 8.35\nTOTAL: 6\nPASS:  5\nSKIP:  0\nXFAIL: 0\nFAIL:  1\nXPASS: 0\nERROR: 0\n============================================================================\nSee ./test-suite.log\n============================================================================\nmake[3]:  [test-suite.log] Erreur 1\nmake[3]: quittant le r\u00e9pertoire \u00ab /tmp/pcre-Up9009/pcre-8.35 \u00bb\nmake[2]:  [check-TESTS] Erreur 2\nmake[2]: quittant le r\u00e9pertoire \u00ab /tmp/pcre-Up9009/pcre-8.35 \u00bb\nmake[1]:  [check-am] Erreur 2\nmake[1]: quittant le r\u00e9pertoire \u00ab /tmp/pcre-Up9009/pcre-8.35 \u00bb\nmake:  [check] Erreur 2\n```\nnot a lot of infos.....\n. Also, back to the python issue... the problem is that pip is not installed properly....\n. @sjackman, yes python is broken for me too and this is a side effect of this linuxbrew installation because I tried the previous python version which I'm sure was working properly and it's broken too.\nI will investigate a bit.\nBest\n. FYI, python crash trying to open libcrypto:\nopen(\"/home/jerome/linuxbrew/lib/libcrypto.so.1.0.0\", O_RDONLY|0x80000 /* O_??? */) = 15\nread(15, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0@Y\\6\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(15, {st_mode=S_IFREG|0444, st_size=2411339, ...}) = 0\nmmap(NULL, 4225272, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 15, 0) = 0x2b5262d45000\nmprotect(0x2b5262f22000, 2093056, PROT_NONE) = 0\nmmap(0x2b5263121000, 163840, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 15, 0x1dc000) = 0x2b5263121000\nmmap(0x2b5263149000, 14584, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2b5263149000\nmprotect(0x2b525f902000, 3668, PROT_READ|PROT_WRITE) = 0\nmprotect(0x2b525f902000, 3668, PROT_READ) = 0\nmprotect(0x7fffc60ee000, 4096, PROT_READ|PROT_WRITE|PROT_EXEC|PROT_GROWSDOWN) = 0\nclose(15)                               = 0\nclose(14)                               = 0\n--- SIGSEGV (Segmentation fault) @ 0 (0) ---\n+++ killed by SIGSEGV +++\n. @sjackman, any advise for the python issue? This is quite critical for me but I might open another issue perhapse because it seems that it doesn't work with the default linuxbrew installation too?\nThanks in advance.\nJerome\n. @sjackman, I just tested your latest instructions and everything works well!\nI just face an issue with openblas (which is needed for scipy with GCC 4.x .... :+1: \n```\n/home/jerome/linuxbrew/bin/gfortran -Os -w -pipe -march=core2 -O2 -Wall -m64  -O2 -Wall -m64  -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -o dblat3 dblat3.o ../libopenblas_penrynp-r0.2.11.a -lm -lpthread -lgfortran -lm -lpthread -lgfortran \nOPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=1 ./sblat1\n/home/jerome/linuxbrew/bin/gfortran -Os -w -pipe -march=core2 -O2 -Wall -m64  -O2 -Wall -m64  -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -o cblat2 cblat2.o ../libopenblas_penrynp-r0.2.11.a -lm -lpthread -lgfortran -lm -lpthread -lgfortran \nProgram received signal SIGSEGV: Segmentation fault - invalid memory reference.\nBacktrace for this error:\n0  0x2ae46479e2aa\n1  0x2ae46479e774\n2  0x2ae4653d441f\n3  0x2ae46479fd8a\n4  0x401439\n5  0x2ae4653c4247\n6  0x4014b0\nMakefile:7: recipe for target 'level1' failed\nmake[1]:  [level1] Erreur de segmentation\nmake[1]:  Attente des t\u00e2ches non termin\u00e9es....\nmake[1]: Leaving directory '/tmp/openblas-o24505/OpenBLAS-0.2.11/test'\nMakefile:115: recipe for target 'tests' failed\nmake: *** [tests] Error 2\n/home/jerome/linuxbrew/Library/Homebrew/formula.rb:548:in `system'\n```\nI tested 0.2.8 to 0.2.11 and it always fail tests. Also everything work fine without a standalone linuxbrew installation.\nI hope that you can find a workaround because as far as I'm concerned I didn't find it.\nBest,\nJerome\n. Indeed:\n```\n[jerome@srv11:~] 37s $ brew test gcc\nTesting gcc\n==> /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/gfortran -c in.f90\n==> /home/jerome/linuxbrew/Cellar/gcc/4.9.1/bin/gfortran -o test in.o\nProgram received signal SIGSEGV: Segmentation fault - invalid memory reference.\nBacktrace for this error:\n0  0x2b34b0fe62aa\n1  0x2b34b0fe6774\n2  0x2b34b19ff41f\n3  0x2b34b0fe7d8a\n4  0x40087d\n5  0x2b34b19ef247\n6  0x4006c8\nError: gcc: failed\n<\"done\"> expected but was\n<\"\">.\n```\n. Hi,\nSince one of your last modification I cannot build gcc anymore.\nAs always, I export HOMEBREW_CC=gcc-4.4 in order to use the good gcc version (linked into linuxbrew as usual). I now face this error:\n==> Installing dependencies for gcc: gmp, mpfr, libmpc, pkg-config, isl, cloog\n==> Installing gcc dependency: gmp\n/home/jerome/linuxbrew/Library/Homebrew/build.rb (Formulary::FromPathLoader): loading /home/jerome/linuxbrew/Library/Formula/gmp.rb\n/home/jerome/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /home/jerome/linuxbrew/Library/Formula/glibc.rb\n/home/jerome/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /home/jerome/linuxbrew/Library/Formula/gcc.rb\n/home/jerome/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /home/jerome/linuxbrew/Library/Formula/gcc44.rb\nError: no such file to load -- /home/jerome/linuxbrew/Library/Formula/gcc44.rb\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/wiki/troubleshooting\n/home/jerome/linuxbrew/Library/Homebrew/formulary.rb:65:in `require'\n/home/jerome/linuxbrew/Library/Homebrew/formulary.rb:65:in `klass'\n/home/jerome/linuxbrew/Library/Homebrew/formulary.rb:50:in `get_formula'\n/home/jerome/linuxbrew/Library/Homebrew/formulary.rb:198:in `factory'\n/home/jerome/linuxbrew/Library/Homebrew/extend/ENV/shared.rb:219:in `gcc_version_formula'\n/home/jerome/linuxbrew/Library/Homebrew/extend/ENV/shared.rb:230:in `warn_about_non_apple_gcc'\n/home/jerome/linuxbrew/Library/Homebrew/extend/ENV/shared.rb:117:in `compiler'\n/home/jerome/linuxbrew/Library/Homebrew/extend/ENV/std.rb:75:in `setup_build_environment'\n/home/jerome/linuxbrew/Library/Homebrew/build.rb:97:in `install'\n/home/jerome/linuxbrew/Library/Homebrew/build.rb:186\nBest,\nJerome\n. Great job @sjackman! Does it mean that you will not investigate more the other options?\nBest.\n. I mean the gcc sysroot or the options tested in this thread for which we found gfortran broken for the moment...\n. For information, I face the same problem for libffi:\n``\n[jerome@srv11:~] 1 $ tree /home/jerome/linuxbrew/Cellar/libffi/3.0.13/\n/home/jerome/linuxbrew/Cellar/libffi/3.0.13/\n|-- ChangeLog\n|-- INSTALL_RECEIPT.json\n|-- LICENSE\n|-- README\n|-- lib\n|   |-- libffi-3.0.13\n|   |-- include\n|   |       |-- ffi.h\n|   |       -- ffitarget.h\n|-- pkgconfig\n|       -- libffi.pc\n|-- lib64\n|   |-- libffi.a\n|   |-- libffi.la\n|   |-- libffi.so -> libffi.so.6.0.1\n|   |-- libffi.so.6 -> libffi.so.6.0.1\n|-- libffi.so.6.0.1\n-- share\n    |-- info\n    |-- libffi.info\n    -- man-- man3\n            |-- ffi.3\n            |-- ffi_call.3\n            |-- ffi_prep_cif.3\n            `-- ffi_prep_cif_var.3\n9 directories, 17 files\n```\n. Hi,\nIt seems that I found the \"root\" cause. Indeed, if I revert https://github.com/Homebrew/linuxbrew/commit/0b330bf2d8abcd0b914d60a81d20883e1d710d5c everything works again.\nBest,\nJerome\n. I cannot, linuxbrew say that I must link openssl before beeing able to instal python.\nBest.\n. Hi,\nthe installation \"works\" like this but pip is broken: \n[jrevillard@srv11:~] 1 $ pip \nERROR:root:code for hash md5 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type md5\nERROR:root:code for hash sha1 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type sha1\nERROR:root:code for hash sha224 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type sha224\nERROR:root:code for hash sha256 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type sha256\nERROR:root:code for hash sha384 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type sha384\nERROR:root:code for hash sha512 was not found.\nTraceback (most recent call last):\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 139, in <module>\n    globals()[__func_name] = __get_hash(__func_name)\n  File \"/home/jrevillard/linuxbrew/opt/python/lib/python2.7/hashlib.py\", line 91, in __get_builtin_constructor\n    raise ValueError('unsupported hash type ' + name)\nValueError: unsupported hash type sha512\nThe thing that I do not understand is that everything seems to work just reverting this patch. Perhaps that the problem is another dependency....\n. Hi @sjackman,\nYou might need to tweek this ifle as you do for the gcc spec file now:\n```\n[jerome@srv11:~] $ cat /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/libgfortran.spec\n\nThis spec file is read by gfortran when linking.\nIt is used to specify the libraries we need to link in, in the right\norder.\n\n%rename lib liborig\n*lib: %{static-libgfortran:--as-needed} -lquadmath %{static-libgfortran:--no-as-needed} -lm %(libgcc) %(liborig)\n```\nBest,\nJerome\n. I don't know anything about it but is it normal to still see /usr/lib/... ?\nAlso, there is \"/usr/lib/../lib64/crtn.o\" at the end:\n[jerome@srv11:~] $ gfortran -### -o hello hello.f \nReading specs from /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/specs\nCOLLECT_GCC=gfortran\nCOLLECT_LTO_WRAPPER=/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: ../configure --with-native-system-header-dir=/home/jerome/linuxbrew/include --with-build-time-tools=/home/jerome/linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin --with-boot-ldflags='-static-libstdc++ -static-libgcc -L/home/jerome/linuxbrew/lib -Wl,-rpath,/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2' --prefix=/home/jerome/linuxbrew/Cellar/gcc/4.9.1 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-4.9 --with-gmp=/home/jerome/linuxbrew/opt/gmp --with-mpfr=/home/jerome/linuxbrew/opt/mpfr --with-mpc=/home/jerome/linuxbrew/opt/libmpc --with-cloog=/home/jerome/linuxbrew/opt/cloog --with-isl=/home/jerome/linuxbrew/opt/isl --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc 4.9.1 --with-glibc' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 4.9.1 (Homebrew gcc 4.9.1 --with-glibc) \nCOLLECT_GCC_OPTIONS='-o' 'hello' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n /home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/f951 hello.f -ffixed-form -quiet -dumpbase hello.f \"-mtune=generic\" \"-march=x86-64\" -auxbase hello -fintrinsic-modules-path /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/finclude -o /tmp/ccndx1Xs.s\nCOLLECT_GCC_OPTIONS='-o' 'hello' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n as --64 -o /tmp/ccwBmcul.o /tmp/ccndx1Xs.s\nReading specs from /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/../../../../lib64/libgfortran.spec\nrename spec lib to liborig\nCOLLECT_GCC_OPTIONS='-o' 'hello' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\nCOMPILER_PATH=/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/\nLIBRARY_PATH=/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-o' 'hello' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n /home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/collect2 -plugin /home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/liblto_plugin.so \"-plugin-opt=/home/jerome/linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/lto-wrapper\" \"-plugin-opt=-fresolution=/tmp/ccEuar0d.res\" \"-plugin-opt=-pass-through=-lgcc_s\" \"-plugin-opt=-pass-through=-lgcc\" \"-plugin-opt=-pass-through=-lquadmath\" \"-plugin-opt=-pass-through=-lm\" \"-plugin-opt=-pass-through=-lgcc_s\" \"-plugin-opt=-pass-through=-lgcc\" \"-plugin-opt=-pass-through=-lc\" \"-plugin-opt=-pass-through=-lgcc_s\" \"-plugin-opt=-pass-through=-lgcc\" --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -rpath /home/jerome/linuxbrew/lib --dynamic-linker /home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -o hello /usr/lib/../lib64/crt1.o /usr/lib/../lib64/crti.o /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/crtbegin.o -nostdlib -L/home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1 -L/home/jerome/linuxbrew/lib /tmp/ccwBmcul.o -lgfortran -lm -lgcc_s -lgcc -lquadmath -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /home/jerome/linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/crtend.o /usr/lib/../lib64/crtn.o\n. As far as the gfortran linker options are concerned, they are limited to.... 1 aparently: http://www.math.uni-leipzig.de/~hellmund/Vorlesung/gfortran.html#SEC14\nToday, I figth a bit with scipy/numpy installation in linuxbrew but not in standalone mode. I had to fix FFLAGS in order to make it work (https://github.com/gnubila-france/homebrew-python/commit/5b0b0acafded441dbe34734ad1c0dd733ec2a04e)... I don't know if it could be a way to look..\nBest,\nJerome\n. It seems quite similar to: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=701385\nThey speak about libblkid.a ... perhaps we need to compile it in linuxbrew? ....\n. There is clearly a mix between the system and the linuxbrew libs:\n[jerome@srv11:~] 1 $ nm /home/jerome/linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 | grep \" secure_getenv\"\n00000000000325c8 W secure_getenv\n[jerome@srv11:~] $ nm /lib/libc.so.6 | grep \" secure_getenv\"\n[jerome@srv11:~] 1 $\nIt seems that \"-static-libgfortran\" use system libraries...\n. @sjackman could you tell me if I can test something and if yes, where should I restart?\nDid you already decided if you go for sysroots or not ?\nBest,\nJerome\n. Hi,\nI just face the same king of problem \n```\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\nmake[3]:  [_mulxc3.o] Erreur 1\nmake[3]:  Attente des t\u00e2ches non termin\u00e9es....\nIn file included from ../../../libgcc/libgcc2.c:56:0:\n../../../libgcc/libgcc2.c: In function 'fixunsxfdi':\n../../../libgcc/libgcc2.h:199:19: internal compiler error: Illegal instruction\n #define __NW(a,b)  ## a ## di ## b\n                   ^\n../../../libgcc/libgcc2.h:298:22: note: in expansion of macro '__NW'\n #define __fixunsxfSI __NW(fixunsxf,)\n                      ^\n../../../libgcc/libgcc2.c:1788:1: note: in expansion of macro '__fixunsxfSI'\n __fixunsxfSI (XFtype a)\n ^\nmake[3]:  [_divxc3.o] Erreur 1\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\nmake[3]:  [_fixunsxfsi.o] Erreur 1\nmake[3]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-E11515/gcc-4.9.2/build/x86_64-unknown-linux-gnu/libgcc \u00bb\nmake[2]:  [all-stage1-target-libgcc] Erreur 2\nmake[2]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-E11515/gcc-4.9.2/build \u00bb\nmake[1]:  [stage1-bubble] Erreur 2\nmake[1]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-E11515/gcc-4.9.2/build \u00bb\nmake: *** [bootstrap] Erreur 2\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: d90c359b584cfb70ee2ad1a7f1bba66d8610538c\nHOMEBREW_PREFIX: /home/jerome/linuxbrew\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nX11: N/A\n==> ENV\nCC: /home/jerome/linuxbrew/bin/gcc-4.4 => /usr/bin/gcc44\nCXX: /home/jerome/linuxbrew/bin/g++-4.4 => /usr/bin/g++44\nOBJC: /home/jerome/linuxbrew/bin/gcc-4.4\nOBJCXX: /home/jerome/linuxbrew/bin/g++-4.4\nHOMEBREW_CC: gcc-4.4\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/jerome/linuxbrew/include\nLDFLAGS: -L/home/jerome/linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/home/jerome/linuxbrew/lib\nMAKEFLAGS: -j8\nCMAKE_PREFIX_PATH: /home/jerome/linuxbrew\nPKG_CONFIG_LIBDIR: /home/jerome/linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nPATH: /home/jerome/linuxbrew/bin:/usr/bin:/bin:/home/jerome/linuxbrew/Library/ENV/scm\nError: gcc 4.9.2 did not build\n```\nI did not had time to check which bottle is causing problem yet too.\nJerome\nP.S: Working on Scientific Linux release 5.11 (Boron) and boostrap using gcc-4.4\n. brew install gmp --build-from-source solved the issue for me (but gfortran is still broken ;-) )\nBest,\nJerome\n. Hi,\nGood to see that it's progressing :-). Unfortunatly, for me gcc does not compile anymore (I think that this is like this since the usage of the bottles.\n```\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _clrsbsi2.o -MT _clrsbsi2.o -MD -MP -MF _clrsbsi2.dep -DL_clrsbsi2 -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n../../../libgcc/libgcc2.c: In function 'mulxc3':\n../../../libgcc/libgcc2.c:1966:21: internal compiler error: Illegal instruction\n    if (isnan (c)) c = COPYSIGN (0, c);\n                     ^\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _clrsbdi2.o -MT _clrsbdi2.o -MD -MP -MF _clrsbdi2.dep -DL_clrsbdi2 -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixunssfsi.o -MT _fixunssfsi.o -MD -MP -MF _fixunssfsi.dep -DL_fixunssfsi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixunsdfsi.o -MT _fixunsdfsi.o -MD -MP -MF _fixunsdfsi.dep -DL_fixunsdfsi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixunsxfsi.o -MT _fixunsxfsi.o -MD -MP -MF _fixunsxfsi.dep -DL_fixunsxfsi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n../../../libgcc/libgcc2.c: In function '__divxc3':\n../../../libgcc/libgcc2.c:1921:26: internal compiler error: Illegal instruction\n #define COPYSIGN CONCAT2(__builtin_copysign, CEXT)\n                          ^\n../../../libgcc/libgcc2.c:1905:23: note: in definition of macro '_CONCAT2'\n #define _CONCAT2(A,B) A##B\n                       ^\n../../../libgcc/libgcc2.c:1921:18: note: in expansion of macro 'CONCAT2'\n #define COPYSIGN CONCAT2(__builtin_copysign, CEXT)\n                  ^\n../../../libgcc/libgcc2.c:2038:8: note: in expansion of macro 'COPYSIGN'\n    x = COPYSIGN (INFINITY, c) * a;\n        ^\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixsfdi.o -MT _fixsfdi.o -MD -MP -MF _fixsfdi.dep -DL_fixsfdi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixdfdi.o -MT _fixdfdi.o -MD -MP -MF _fixdfdi.dep -DL_fixdfdi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixxfdi.o -MT _fixxfdi.o -MD -MP -MF _fixxfdi.dep -DL_fixxfdi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/xgcc -B/tmp/gcc-X31264/gcc-4.9.2/build/./gcc/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -g -O2 -Os -w -pipe -march=core2 -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector   -fpic -mlong-double-80 -I. -I. -I../.././gcc -I../../../libgcc -I../../../libgcc/. -I../../../libgcc/../gcc -I../../../libgcc/../include -I../../../libgcc/config/libbid -DENABLE_DECIMAL_BID_FORMAT -DHAVE_CC_TLS  -DUSE_TLS -o _fixunssfdi.o -MT _fixunssfdi.o -MD -MP -MF _fixunssfdi.dep -DL_fixunssfdi -c ../../../libgcc/libgcc2.c -fvisibility=hidden -DHIDE_EXPORTS\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\nmake[3]:  [_mulxc3.o] Erreur 1\nmake[3]:  Attente des t\u00e2ches non termin\u00e9es....\nIn file included from ../../../libgcc/libgcc2.c:56:0:\n../../../libgcc/libgcc2.c: In function '__fixunsxfdi':\n../../../libgcc/libgcc2.h:199:19: internal compiler error: Illegal instruction\n #define __NW(a,b)  ## a ## di ## b\n                   ^\n../../../libgcc/libgcc2.h:298:22: note: in expansion of macro '__NW'\n #define __fixunsxfSI __NW(fixunsxf,)\n                      ^\n../../../libgcc/libgcc2.c:1788:1: note: in expansion of macro '__fixunsxfSI'\n __fixunsxfSI (XFtype a)\n ^\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\nmake[3]:  [_divxc3.o] Erreur 1\n0xb61d44 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee https://github.com/Homebrew/homebrew/issues for instructions.\nmake[3]:  [_fixunsxfsi.o] Erreur 1\nmake[3]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-X31264/gcc-4.9.2/build/x86_64-unknown-linux-gnu/libgcc \u00bb\nmake[2]:  [all-stage1-target-libgcc] Erreur 2\nmake[2]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-X31264/gcc-4.9.2/build \u00bb\nmake[1]:  [stage1-bubble] Erreur 2\nmake[1]: quittant le r\u00e9pertoire \u00ab /tmp/gcc-X31264/gcc-4.9.2/build \u00bb\nmake: *** [bootstrap] Erreur 2\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: 1274ba7f92d932e0daa7971ea5aa666be36cca4d\nHOMEBREW_PREFIX: /home/jerome/.linuxbrew\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nX11: N/A\n==> ENV\nCC: /home/jerome/.linuxbrew/bin/gcc-4.4 => /usr/bin/gcc44\nCXX: /home/jerome/.linuxbrew/bin/g++-4.4 => /usr/bin/g++44\nOBJC: /home/jerome/.linuxbrew/bin/gcc-4.4\nOBJCXX: /home/jerome/.linuxbrew/bin/g++-4.4\nHOMEBREW_CC: gcc-4.4\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/jerome/.linuxbrew/include\nLDFLAGS: -L/home/jerome/.linuxbrew/lib -Wl,--dynamic-linker=/home/jerome/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/home/jerome/.linuxbrew/lib\nMAKEFLAGS: -j8\nCMAKE_PREFIX_PATH: /home/jerome/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/jerome/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nPATH: /home/jerome/.linuxbrew/bin:/home/jerome/.linuxbrew/sbin:/home/jerome/.linuxbrew/bin:/usr/local/bin:/usr/bin:/bin:/home/jerome/.linuxbrew/Library/ENV/scm\nError: gcc 4.9.2 did not build\nLogs:\n     /home/jerome/Library/Logs/Homebrew/gcc/02.make\n     /home/jerome/Library/Logs/Homebrew/gcc/01.configure\nThese open issues may also help:\ngcc 4.9.2 fails to produce debugging information (https://github.com/Homebrew/homebrew/issues/34976)\n--cc=gcc-4.9 gets me in an infinite loop (https://github.com/Homebrew/homebrew/issues/33731)\nMacOS.(gcc|clang|llvm)_version can return nil (https://github.com/Homebrew/homebrew/issues/18781)\n```\nFor information, I'm compiling on SL5 using the gcc44 compiler. I will try without the bottles to see if it works better.\nBest,\nJerome\n. @jbaum98 , @sjackman ... what can I say ... YOUHHHHHHHHOUUUUUUU ! :-)\nIt works, my gfortran works with the standalone installation using the very last version of your gcc formula!\n[jerome@srv11:~] 23s $ brew test gcc\nTesting gcc\n==> /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/bin/gcc-4.9 -o hello-c hello-c.c\n==> /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/bin/g++-4.9 -o hello-cc hello-cc.cc\n==> /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/bin/gfortran -c in.f90\n==> /home/jerome/.linuxbrew/Cellar/gcc/4.9.2/bin/gfortran -o test in.o\nThanks a million for your work guys!\nBest,\nJerome\n. No simply because I did not notice it before merging your patch to my repo :-)\n. @jbaum98 to better answer your question about your modification of binutils, in fact, glibc does not compile anymore with your modification, reverting your change make it compile without any issue. \n(For information,I'm on a system where the default gcc compiler used to boostrap is not installed in the default place and I then face this issue with the binutils patch).\nI cannot give you the full output as many other things are compiling actually but I will try to do it after.\nBest,\nJerome\n. ",
    "xanderhsia": "I can get most of the packages to install,  but I don't know if they are being linked correctly against the brewed glibc and gcc\nFor instance, getting an error to libgcomp.so on brewing vim, it turns out that gettext's msgfmt references it. Doing an ldd ~/.linuxbrew/bin/msgfmt shows:\nldd  ~/.linuxbrew/bin/msgfmt\n    linux-vdso.so.1 =>  (0x00007fffb2000000)\n    libgettextsrc-0.19.2.so => /u/ahhsia/.linuxbrew/lib/libgettextsrc-0.19.2.so (0x00007f3f018d0000)\n    libgettextlib-0.19.2.so => /u/ahhsia/.linuxbrew/lib/libgettextlib-0.19.2.so (0x00007f3f01608000)\n    libxml2.so.2 => /u/ahhsia/.linuxbrew/lib/libxml2.so.2 (0x00007f3f012e0000)\n    libtinfo.so.5 => /lib64/libtinfo.so.5 (0x0000003bf9a00000)\n    libintl.so.8 => /u/ahhsia/.linuxbrew/lib/libintl.so.8 (0x00007f3f010b0000)\n    libc.so.6 => /lib64/libc.so.6 (0x0000003bf2600000)\n    libgomp.so.1 => /usr/lib64/libgomp.so.1 (0x0000003bf2e00000)\n    libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003bf3200000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x00007f3f00ea8000)\n    libz.so.1 => /u/ahhsia/.linuxbrew/lib/libz.so.1 (0x00007f3f00c90000)\n    libm.so.6 => /lib64/libm.so.6 (0x0000003bf2a00000)\n    /u/ahhsia/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 => /lib64/ld-linux-x86-64.so.2 (0x0000003bf2200000)\n    librt.so.1 => /lib64/librt.so.1 (0x0000003bf3a00000)\nShouldn't libc.so.6 and libgomp.so.1 reference the brewed glibc and gcc? rather than the system-installed ones?\n. Tried what you posted, but still ended with a configure error:\nI posted a gist of config.log and 01.configure from the Library/Homebrew/Logs here:\nhttps://gist.github.com/xanderhsia/bf265ef72df4f2009786\nhttps://gist.github.com/bf265ef72df4f2009786.git\nBTW, awesome work on this. I have to deal with very outdated server which makes it hard to install anything remotely newer, and linuxbrew has been a great help\n1296:lib >brew update\nAlready up-to-date.\n1297:lib >brew install openssl zlib\nWarning: openssl-1.0.1i already installed\nWarning: zlib-1.2.8 already installed\n1298:lib >brew link openssl zlib\nWarning: Already linked: /u/ahhsia/.linuxbrew/Cellar/openssl/1.0.1i\nTo relink: brew unlink openssl && brew link openssl\nWarning: Already linked: /u/ahhsia/.linuxbrew/Cellar/zlib/1.2.8\n==> Downloading http://curl.haxx.se/download/curl-7.37.1.tar.gz\nAlready downloaded: /u/ahhsia/.cache/Homebrew/curl-7.37.1.tar.gz\n==> ./configure --prefix=/u/ahhsia/.linuxbrew/Cellar/curl/7.37.1_1 --with-ssl=/u/ahhsia/.linuxbrew/opt/openssl --without-libssh2 --without-libidn --without-libmetalink --without-g\nchecking for time.h... (cached) yes\nchecking for sys/socket.h... (cached) yes\nchecking for struct timeval... yes\nchecking run-time libs availability... failed\nconfigure: error: one or more libs available at link-time are not available run-time. Libs used at link-time: -lssl -lcrypto -lssl -lcrypto  -llber -lldap -lz -lrt\n. Looks like if I disable ldap support via adding args << \"--disable-ldap\" to the cirl.rb formula, I can get it to compile. libsasl2.so must be wanted by the ldap support?\n. ",
    "jbaum98": "I followed the guide on standalone installation, but my gcc won't work unless libmpc.so.2 and libmpfr.so.4 are in LD_LIBRARY_PATH, so I can't unset it from /usr/local/lib. Also, when I install glibc my gcc stops working unless I exclude $HOMEBREW_HOME/lib from my LD_LIBRARY_PATH. \n. I'm using a chromebook, so there is no system gcc. I'm using the gcc from skycocker/chromebrew to try and bootstrap linuxbrew by building a gcc with linuxbrew using the one from chromebrew. \n. I might have solved it by editing ENV/std.rb, I'm seeing if it works.\n. Okay the patch basically sets ENV[\"LD_LIBRARY_PATH\"] to $prefix/lib, which solves my problems up until I link glibc right before I'm ready to install gcc. Then although I can pour the dependencies, I can't compile anything, hello or more importantly gcc.\n. libc.so.6 in $prefix/lib is the primary culprit. When it points to the glibc in Cellar, Homebrew complains that gcc is not installed. When I link it back to the one in /usr/local/lib, Homebrew will start but configure will fail.\n. They both are located in /usr/local, but at least in the default setup Chromebrew install straight into /usr/local and Linuxbrew is in /usr/local/linuxbrew\n. Because Chrome OS is funky, I can only execute programs located in a subdirectory of /usr/local. I can symlink from there into ~/.linuxbrew but I didn't think that would make a difference.\n. Right now I'm retrying everything with Linuxbrew at HEAD and LD_LIBRARY_PATH at /usr/local/lib, and I'll see if there's an error.\n. Okay after I install glibc, not only does the postinstall fail even with \nbash\nchmod +x $prefix/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 $prefix/Cellar/glibc/2.19/lib/libc.so.6\nLANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 brew postinstall glibc\nwhich made it work with the LD_LIBRARY_PATH hack, but also brew test glibc fails with a segmentation fault.\n. brew install hello yadayada also fails after installing glibc with 19054 Segmentation fault      (core dumped) | $AWK -f \"$ac_tmp/subs.awk\" > $ac_tmp/out before unlinking and cannot run C compiled programs. after unlinking glibc. Only uninstalling glibc fixes it.\n. I can't edit /etc/ld.so.conf. How would I use patchelf?\n. Looking at #7 was very educational and I may have solved my problem using patchelf. Thanks for your help.\n. Using patchelf I modified gcc, g++, cc1 and cc1plus so things build without setting LD_LIBRARY_PATH or changing Linuxbrew code. I also needed to reinstall diffutils, gpatch, and gawk after installing glibc to get rid of those segfaults. Now I get pretty far into building glibc when it says the linker can't find crti.o and libc_nonshared.a.\n. I need to install those packages just to get to that point. My system has too old a version of gawk for glibc and needs diffutils for binutils. Reinstalling them after glibc fixes everything up until the error I mentioned above.\n. https://gist.github.com/7b4ffca62106ffa6bda4.git\nI replicated the issue it's specifically the following command executed in gcc-4.9.2/build/x86_64-unknown-linux-gnu/libgcc\nbash\n/usr/local/linuxbrew/tmp/gcc-H92WgH/gcc-4.9.2/build/./gcc/xgcc -B/usr/local/linuxbrew/tmp/gcc-H92WgH/gcc-4.9.2/build/./gcc/ -B/usr/local/linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/bin/ -B/usr/local/linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/lib/ -isystem /usr/local/linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/include -isystem /usr/local/linuxbrew/Cellar/gcc/4.9.2/x86_64-unknown-linux-gnu/sys-include    -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector  -shared -nodefaultlibs -Wl,--soname=libgcc_s.so.1 -Wl,--version-script=libgcc.map -o ./libgcc_s.so.1.tmp -g -O2 -Os -w -pipe -march=core2 -B./ _muldi3_s.o _negdi2_s.o _lshrdi3_s.o _ashldi3_s.o _ashrdi3_s.o _cmpdi2_s.o _ucmpdi2_s.o _clear_cache_s.o _trampoline_s.o __main_s.o _absvsi2_s.o _absvdi2_s.o _addvsi3_s.o _addvdi3_s.o _subvsi3_s.o _subvdi3_s.o _mulvsi3_s.o _mulvdi3_s.o _negvsi2_s.o _negvdi2_s.o _ctors_s.o _ffssi2_s.o _ffsdi2_s.o _clz_s.o _clzsi2_s.o _clzdi2_s.o _ctzsi2_s.o _ctzdi2_s.o _popcount_tab_s.o _popcountsi2_s.o _popcountdi2_s.o _paritysi2_s.o _paritydi2_s.o _powisf2_s.o _powidf2_s.o _powixf2_s.o _mulsc3_s.o _muldc3_s.o _mulxc3_s.o _divsc3_s.o _divdc3_s.o _divxc3_s.o _bswapsi2_s.o _bswapdi2_s.o _clrsbsi2_s.o _clrsbdi2_s.o _fixunssfsi_s.o _fixunsdfsi_s.o _fixunsxfsi_s.o _fixsfdi_s.o _fixdfdi_s.o _fixxfdi_s.o _fixunssfdi_s.o _fixunsdfdi_s.o _fixunsxfdi_s.o _floatdisf_s.o _floatdidf_s.o _floatdixf_s.o _floatundisf_s.o _floatundidf_s.o _floatundixf_s.o _divdi3_s.o _moddi3_s.o _udivdi3_s.o _umoddi3_s.o _udiv_w_sdiv_s.o _udivmoddi4_s.o cpuinfo_s.o sfp-exceptions_s.o addtf3_s.o divtf3_s.o multf3_s.o negtf2_s.o subtf3_s.o unordtf2_s.o fixtfsi_s.o fixunstfsi_s.o floatsitf_s.o floatunsitf_s.o fixtfdi_s.o fixunstfdi_s.o floatditf_s.o floatunditf_s.o fixtfti_s.o fixunstfti_s.o floattitf_s.o floatuntitf_s.o extendsftf2_s.o extenddftf2_s.o extendxftf2_s.o trunctfsf2_s.o trunctfdf2_s.o trunctfxf2_s.o getf2_s.o letf2_s.o eqtf2_s.o _divtc3_s.o _multc3_s.o _powitf2_s.o enable-execute-stack_s.o unwind-dw2_s.o unwind-dw2-fde-dip_s.o unwind-sjlj_s.o unwind-c_s.o emutls_s.o libgcc.a -lc && rm -f ./libgcc_s.so && if [ -f ./libgcc_s.so.1 ]; then mv -f ./libgcc_s.so.1 ./libgcc_s.so.1.backup; else true; fi && mv ./libgcc_s.so.1.tmp ./libgcc_s.so.1 && ln -s libgcc_s.so.1 ./libgcc_s.so\n. okay, the problem is fixed by executing the above command adding -B/usr/local/linuxbrew/lib, but how do I make that added automatically for all commands?\n. Sorry my bad the configure runs fine, it's make that breaks. Where would I find a log for make?\n. More info: the error given by the above command is:\nbash\n/usr/local/linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin/ld: cannot find crti.o: No such file or directory\n/usr/local/linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin/ld: cannot find /usr/lib64/libc_nonshared.a\nI can get rid of the first by linking /usr/local/linuxbrew/lib/crti.o  or by setting export LIBRARY_PATH=/usr/local/linuxbrew/lib in the debug shell, but I can't make it look anywhere but /usr/lib64 for libc_nonshared.a, which I don't have write permissions for.\n. Maybe the issue is related to line in Standalone guide: ln -s lib ~/.linuxbrew/lib64. What is the current directory, because lib is not an absolute path. This is the only command I skipped. I tried linking all of /usr/local/lib, /usr/local/lib64, /usr/lib, /usr/lib64, /lib and /lib64 to /usr/local/linuxbrew/lib64 but none of them helped my error.\n. Found my logs: https://gist.github.com/jbaum98/02b3c012c5a98fdf36d4\n. I can do that with crti.o because it isn't searching in a specific place, but for libc it complains /usr/lib64/libc_nonshared.a specifically at that location.\n. In the debug shell I set GCC_EXEC_PREFIX to /usr/local/linuxbrew/lib, and now it seems to be working, or at least it got past that one error (it's running as right now). Is this a good solution that should be added in or will this cause other problems?\n. I also get an error setting GCC_EXEC_PREFIX at the beginning, which implies that it needs to be set after the process starts using that xgcc it builds in the beginning. We need to find a way to break up the make bootstrap into smaller pieces, or to somehow target only the later part. Based on this I think it has something to do with setting it for stages 2 and 3, but leaving it alone for stage 1.\n. bash\n/usr/local/linuxbrew/Cellar/glibc/2.19/lib/crti.o\n/usr/local/linuxbrew/lib/crti.o\n/usr/local/lib/crti.o\n/mnt/stateful_partition/dev_image/linuxbrew/Cellar/glibc/2.19/lib/crti.o\n/mnt/stateful_partition/dev_image/linuxbrew/lib/crti.o\n/mnt/stateful_partition/dev_image/lib/crti.o\nI'm not positive about /mnt/stateful_partition/dev_image but I'm 99% sure it's a duplicate of my root directory for chromebooky reasons.\n. I found how to split it up into the 3 stages, and it doesn't even make it past stage 1 before it starts using xgcc instead and the error happens.\n. It might have something to do with ldconfig, because ldconfig usually doesn't look where glibc.\n. This may be just a chromebook specific issue, but at least for me ld.so.cache doesn't update because of permissions, so maybe that inhibits programs from looking there. Did you check if ldconfig -p includes linuxbrew directories?\n. http://www.tldp.org/HOWTO/Glibc2-HOWTO-6.html This seems to talk about that but I can't really understand what it's saying maybe you can make sense of it? The part that confuses me is what should be substituted for i486-linuxglibc2?\n. I mean I'm not sure it's the best way. Currently I create I added PATCH=``which patch/``.chomp on the top of the two classes that have the calls, which seems redundant. I couldn't figure out how to deal with the variable scope, and I'm also not sure if that's the best way to deal with the issue at all, so someone with more Ruby experience and with this project should probably submit the request.\n. This fixed the issue with the xgcc being unable to find crti.o and libc_nonshare.a during installation, as well as the issue with gcc being unable to find crti.o after installation. I'm not sure which hello.c you're referring to, but I do know that brew install hello etc all works. With this patch Linuxbrew is actually working great on the Chromebook.\n. Results of brew test gcc\nbash\nTesting gcc\n==> /usr/local/linuxbrew/Cellar/gcc/4.9.2/bin/gcc-4.9 -o hello-c hello-c.c\n==> /usr/local/linuxbrew/Cellar/gcc/4.9.2/bin/g++-4.9 -o hello-cc hello-cc.cc\n==> /usr/local/linuxbrew/Cellar/gcc/4.9.2/bin/gfortran -c in.f90\n==> /usr/local/linuxbrew/Cellar/gcc/4.9.2/bin/gfortran -o test in.o\nResults of gcc -v hello.c -o hello\n``` bash\nReading specs from /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/specs\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: ../configure --with-native-system-header-dir=/usr/local/linuxbrew/include --with-build-time-tools=/usr/local/linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin --with-boot-ldflags='-static-libstdc++ -static-libgcc -L/usr/local/linuxbrew/lib -Wl,--dynamic-linker=/usr/local/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/usr/local/linuxbrew/lib' --prefix=/usr/local/linuxbrew/Cellar/gcc/4.9.2 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-4.9 --with-gmp=/usr/local/linuxbrew/opt/gmp --with-mpfr=/usr/local/linuxbrew/opt/mpfr --with-mpc=/usr/local/linuxbrew/opt/libmpc --with-cloog=/usr/local/linuxbrew/opt/cloog --with-isl=/usr/local/linuxbrew/opt/isl --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc 4.9.2 --with-glibc' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 4.9.2 (Homebrew gcc 4.9.2 --with-glibc) \nCOLLECT_GCC_OPTIONS='-v' '-o' 'hello' '-mtune=generic' '-march=x86-64'\n /usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/cc1 -quiet -v hello.c -quiet -dumpbase hello.c -mtune=generic -march=x86-64 -auxbase hello -version -o /usr/local/tmp/ccHNKIqH.s\nGNU C (Homebrew gcc 4.9.2 --with-glibc) version 4.9.2 (x86_64-unknown-linux-gnu)\n        compiled by GNU C version 4.9.2, GMP version 6.0.0, MPFR version 3.1.2-p10, MPC version 1.0.2\nGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072\nignoring nonexistent directory \"/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../x86_64-unknown-linux-gnu/include\"\nignoring duplicate directory \"/usr/local/linuxbrew/include\"\ninclude \"...\" search starts here:\ninclude <...> search starts here:\n/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/include\n /usr/local/include\n /usr/local/linuxbrew/Cellar/gcc/4.9.2/include\n /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/include-fixed\nEnd of search list.\nGNU C (Homebrew gcc 4.9.2 --with-glibc) version 4.9.2 (x86_64-unknown-linux-gnu)\n        compiled by GNU C version 4.9.2, GMP version 6.0.0, MPFR version 3.1.2-p10, MPC version 1.0.2\nGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072\nCompiler executable checksum: 298d3c6a8cfe9994c02db8ddb6df3ac0\nCOLLECT_GCC_OPTIONS='-v' '-o' 'hello' '-mtune=generic' '-march=x86-64'\n as -v --64 -o /usr/local/tmp/ccThhMC2.o /usr/local/tmp/ccHNKIqH.s\nGNU assembler version 2.24 (x86_64-unknown-linux-gnu) using BFD version (GNU Binutils) 2.24\nCOMPILER_PATH=/usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/\nLIBRARY_PATH=/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-v' '-o' 'hello' '-mtune=generic' '-march=x86-64'\n /usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/collect2 -plugin /usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/liblto_plugin.so -plugin-opt=/usr/local/linuxbrew/Cellar/gcc/4.9.2/libexec/gcc/x86_64-unknown-linux-gnu/4.9.2/lto-wrapper -plugin-opt=-fresolution=/usr/local/tmp/ccNc5bQn.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -rpath /usr/local/linuxbrew/lib --dynamic-linker /usr/local/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -o hello /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crt1.o /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crti.o /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crtbegin.o -nostdlib -L/usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2 -L/usr/local/linuxbrew/lib /usr/local/tmp/ccThhMC2.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crtend.o /usr/local/linuxbrew/Cellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/crtn.o\n``\n. I made another change that I thought was unrelated but maybe you can try it and see if it changes anything. I added a configure flag--with-lib-path=/usr/local/linuxbrew/libto binutils \n. I wasn't experiencing a gfortran issue but I think it's  all working fine. \n. Also, I wrote this after linking this by hand, so I haven't had the chance to actually reinstallgccwith this (I've been enjoying mygcctoo much). If it installs correctly, that means its doing the first linking correctly, but the second linking should result in crt1.o, crti.o, and crtn.o being linked fromCellar/gcc/vers/libtoCellar/gcc/4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2. If that isn't the case for you then the code not binutils is at fault.\n. No problem I'll get on it. \n. I'm glad its working for you @jrevillard! Just curious, did you reinstallbinutils` first, because I made a change in that formula too that was vital on my computer.\n. No problem I was just curious whether or not it was necessary on other computers, and I guess it is not.\n. good call it works.\n. You got it.\n. Does this work for you, because I think it works for me \nbash\ncurl -v -j -k -L -H \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u25-b17/jdk-8u25-linux-x64.tar.gz > ~/.cache/Homebrew/jdk-1.8.0-25.tar.gz\ncredit\nI'm not sure how to add this info the the Homebrew formula though.\n. I've been trying to figure it out. Do you know where the source for the url command is so I can take a look at it?\n. Figured it out #206 \n. I had ossp-uuid installed, I think from as a dependency of a previous version of postgresql. If we don't specify which uuid lib they need, it should work for anyone.\n. Fair point. Installs great with libuuid, but I had to uninstall ossp-libuuid first because they conflicted. Thanks for the fix though. \n. Nice brew --prefix binutils worked great for me. I don't have a system gcc, but I'll try a similar thing and see if that works.\n. Oh my bad, you're right it is the cookies.\n. Okay I think this fixes it, but I don't have linuxbrew on hand right now. Can someone else test this? @prohde \n. Hmmm. I'm having trouble even reproducing the error on my computer. I'll keep trying though. That makes a lot of sense.\n. What's the purpose of actual_urls?\n. I'll try overriding _curl_opts instead. That might be cleaner anyway and should affect actual_urls as well.\n. This worked for me. Shaun, can you confirm?\nAlso, while we're here should we factor out JdkDownloadStrategy\n. No problem!\n. I'm trying to replicate this probelm but I'm having some trouble. I got a similar error with an unset LD_LIBRARY_PATH but setting it to /usr/local/lib temporarily like it says in the guide made installing hello work. \n. Try doing brew install hello --build-from-source to stop it from using a bottle. That worked for me.\n. For both hello and other programs, it always gets stuck on pouring the bottle. With verbose output, it shows a bunch of patchelf commands and then it gets stuck.\nThe output of brew gist-logs hello was https://gist.github.com/anonymous/772a6290855ac7289db30d2f40d0e60d\n. It does seem a little strange, but what I figured out was that the libs need to be passed to xgcc in -B options, and this is one of the default locations. I couldn't figure out a way to control what was passed to xgcc.\n. I'm pretty sure it wasn't enough, but I'll try it again.\n. info about -B: https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html#Directory-Options\n. it's also relate to the GCC_EXEC_PREFIX environment variable: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html#Environment-Variables\n. So this implies gcc takes --with-lib-path as well? Or is it --with-local-prefix? \n. xgcc automatically looks in that location for certain lib files. It is related to the -B and GCC_EXEC_PREFIX. I couldn't figure out how to pass command line flags to xgcc so that was how I made those files available to it.\n. ",
    "billp": "Are there any news for support for armv7? Raspberry Pi 2 is available (armv7, 4 cores) and I think this feature is a must\n. ",
    "Mikaela": "Being unaware of this issue, I opened https://github.com/Homebrew/linuxbrew/issues/260 24 days ago which was closed 19 days ago and it seems to be duplicate of this one.\n. Is this OK? I moved version outside of the ifs as it's probably expected to be same for both and I don't see it in go-app-engine-64.rb.\n. You're welcome :)\n. The previous sync was to fix Windows line-ending which got there earlier.\n. I think maybe this should go to https://github.com/Homebrew/Homebrew/ .\n. What does it take if e.g. tmux compiles without linuxbrew without issues? Isn't everything compiled from source?\n. I thought that Ruby is platform-indepent or at least I haven't compiled anything or done anything else than git clone.\n. Ah, I  see.\n. > Is this already documented anywhere (and I've just been unable to find it)?\nI haven't seen this anywhere, but I would like this to be documented in upstream CONTRIBUTING.md so it would be seen on both sides.\n. > My guess would be that Brew is designed for Mac OS X, which is nearly always a single user machine where the owner has root/sudo access.\nWe have four users on OS X and I cannot understand brew, so I am using it like I use other package managers, as root.\n``` bash\nThis might be a little dangerous command...\ncd /usr;git clone https://github.com/Homebrew/homebrew.git;mkdir -p local;rsync -aP homebrew/ local;rsync -aP homebrew/. local/;chmod -R 755 local;chown -R root:wheel local;rm -rf homebrew\n```\n\nHowever, LinuxBrew is more likely to be on a shared server or cluster where any given user will not have root/sudo access, and therefore can not write to /usr/local\n\nThis is my guess too, but I could understand /usr/local/ too as many distributions have quite outdated packages. Linuxbrew doesn't appear to be as reliable as Homebrew (yet) though.\nOh and I usually put linuxbrew to $HOME/.local and I have alias for that too.\n``` bash\nif ~/.local is empty this might be less dangerous\ncd ~;git clone https://github.com/Homebrew/linuxbrew.git;mkdir -p .local;rsync -aP linuxbrew/ .local;rsync -aP linuxbrew/. .local;rm -rf linuxbrew\n```\nI also have root installation alias, but I don't think it's any more safe than that OS X one earlier, ; should probably be replaced with && so it would at least stop if there is some kind of issue.\n``` bash\nalso dangerous!\ncd /usr;git clone https://github.com/Homebrew/linuxbrew.git;mkdir -p local;rsync -aP linuxbrew/ local;rsync -aP linuxbrew/. local/;chmod -R 755 local;chown -R root:wheel local;rm -rf linuxbrew\n```\nYOU RUN THE MENTIONED COMMANDS WITH YOUR OWN RESPONSIBILITY!\n. I would say that the correct way is to open issue requesting quick merge from Homebrew as there is security vulnerability fixed there.\n. You're welcome and thanks for the fix :)\n. I think this should go to Homebrew.\n. I am not sure if formula requests are took, but I believe that new formulas and updates should be submitted to https://github.com/homebrew/homebrew where Linuxbrew will be pulled once a week (unless there is security issue which can cause faster pull) from what I have understood.\n. You are confusing Homebrew and Linuxbrew. Which document gave you that?\n. I am not sure if it can even be updated as it seems to be Homebrew directly and if I understood correctly, Linuxbrew is supposed to be merged to Homebrew sometimes.\n. $HOME/.cache/Homebrew/Logs sounds good to me.\n. This is probably somewhat unrelated, but I have been wondering why does Linuxbrew always want to use GCC while OS X uses Clang which is also available on Linux and would be my preferred compiler in $CC and $CXX\nAlso what is wrong with /usr/bin/gcc and /usr/bin/g++ ?\n. > On Mac OS /usr/bin/gcc is actually clang emulating GCC 4.2.1. It's very weird. Disabling that logic in Homebrew has been more trouble than it's worth. Nice distributions like Ubuntu and Debian already contain files named appropriately, gcc-4.9.\nI see.\n\nHave you been able to successfully compile and install clang using Linuxbrew? I haven't. Did you use brew install llvm --with-clang? See #382\n\nNo, I haven't tried that and I am usaing system-wide installation which is from Debian Stable and very old so I should probably try that sometime.\n\nIf you did have /usr/bin/clang installed, I think it would be the default compiler already, but I haven't tested that.\n\nMy $CC says clang and $CXX clang++, but they aren't used.\nzsh\n% which clang && which clang++\n/usr/bin/clang\n/usr/bin/clang++\nI know surely that they aren't used, because of Python which I have installed with Linuxbrew and it says to be compiled with GCC 4.7.2.\n``` py\n% python3\nPython 3.4.3 (default, May  9 2015, 06:38:10) \n[GCC 4.7.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport sys\nsys.version\n'3.4.3 (default, May  9 2015, 06:38:10) \\n[GCC 4.7.2]'\n```\n. > CC and CXX are ignore by Homebrew. Use HOMEBREW_CC=clang instead. There is no HOMEBREW_CXX. The C++ compiler is inferred from the C compiler. The value of /usr/bin/cc is used as the default compiler (I believe).\n\n\n\nThis appears to work as now my reinstalled Python 3 says [GCC 4.2.1 Compatible Debian Clang 3.0 (tags/RELEASE_30/final)] on linux.\n. I believe it does.\n\n% brew update\nUpdated Homebrew from 343f76ed to 403015fb.\n\nI am not using Linuxbrew so much on this PC so that was possibly ancient commit.\n. nemo@synvaler:~$ export HOMEBREW_CC=gcc\nnemo@synvaler:~$ brew install hello\nError: hello cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n. That solution didn't work directly, but with small modifications it started working. The issue appears to be and gcc-4.8 and g++-4.8 are in /bin instead of /usr/bin, so that directory should probably also be looked at and I will keep this open.\n```\nnemo@synvaler:~$ brew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\n==> Downloading from http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/hello/h\n################################################################## 100,0%\n==> ./configure --disable-silent-rules --prefix=/home/nemo/.local/Cellar/hello/2\n==> make install\n/home/nemo/.local/Cellar/hello/2.10: 52 files, 320K, built in 62 seconds\n```\nThe fix was:\nbash\nln -s $(which gcc-4.8) /usr/bin/gcc-4.8\nln -s $(which g++-4.8) /usr/bin/g++-4.8\nThanks\n. I can confirm that this fixes the issue on SailfishOS 1.1.7.27 (Bj\u00f6rntr\u00e4sket) (armv7hl) on Jolla phone.\n. From what I have understood, yum has been replaced with dnf in Fedora, but has the same subcommands.\n- https://fedoraproject.org/wiki/Features/DNF\n. Fedora 22, I think and I think it's also available in CentOS 7. But from what I understood there is still /usr/bin/yum pointing to dnf so it shouldn't matter so much.\n. I think you are supposed to just set HOMEBREW_CC=gcc and ensure that /apps/gcc/4.8.2/bin/ is the first directory in your PATH.\n. All updates and new formulass hould go to https://github.com/homebrew/homebrew which is merged here once a week.\n. I think this is possibly upstream issue, https://github.com/Homebrew/homebrew/\n. What is the git version at homebrew? Linuxbrew updates from there weekly or at least used to, I am not sure if it has changed.\n. Which version of Python does Linuxbrew want? \nAccording to PEP 0394 (which was made because of Arch by the way) the application must use:\n- #!/usr/bin/env python if it runs with Python 2 and 3.\n- #!/usr/bin/env python2 if it runs with Python 2.\n- #!/usr/bin/env python3 if it runs with Python 3.\nSome older Python 2.x versions might not have python2 binary and if Linuxbrew doesn't support those versions, it should be updated to use python2.\n. > My feeling is that Homebrew (and its sister fork) should take the same stance as modern Debian distros do and tell people who need a worryingly insecure OpenSSL to build it themselves, but I tend to take a harder line on this than others.\n:+1: and modern distributions have also started compiling OpenSSL without SSLv3 support and I think Linuxbrew should also follow with that unless it's already done.\n. Why use short Key ID instead of 0xlong? I would suggest this being changed to 0xE33A3D3CCE59E297 (0x is optional).\nI know this part wasn't changed in this PR, but I only just now noticed it and it would probably be better to update it in same PR than opening new one just for it.\n. ",
    "Sean1708": "Just out of interest, what changes would be needed to support ARM?\n. ",
    "jstasiak": "Hey, thank you! I'm wondering, wouldn't it be good to have building with wxmac disabled by default if OS is not OS X, similarly to https://github.com/Homebrew/linuxbrew/commit/50bd74ef50575aaf66c1792233dee258000b83cb?\n. ",
    "houqp": "sure :)\n. ok, will work on it later today.\n. done, sorry for the delay :(\n. ",
    "cesarjorgemartinez": "Hi,\nIt would be nice update installation instructions linuxbrew, with HOMEBREW_TEMP?\nln -s `which gcc` $HOME/.linuxbrew/bin/gcc-`gcc -dumpversion |cut -d. -f1,2`\nln -s `which g++` $HOME/.linuxbrew/bin/g++-`g++ -dumpversion |cut -d. -f1,2`\nRHEL7:\nln -s `which gfortran` $HOME/.linuxbrew/bin/gfortran-`gfortran -dumpversion |cut -d. -f1,2`\nRHEL6:\nln -s `which gfortran` $HOME/.linuxbrew/bin/gfortran-4.4\nCreate brewenv.sh\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nexport MANPATH=\"$HOME/.linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"$HOME/.linuxbrew/share/info:$INFOPATH\"\nexport HOMEBREW_TEMP=\"$HOME/.linuxbrew/tmp\"\nLoad brew environment:\n. $HOME/brewenv.sh\n. brew update \nbrew tap homebrew/dupes\n. Linux workaround:\n```\nbrew install pyenv\npyenv install 2.7.10\nInstalled Python-2.7.10 to /home/user/.pyenv/versions/2.7.10\ncp /home/user/.pyenv/versions/2.7.10/lib/python2.7/lib-dynload/_ssl.so /home/user/.linuxbrew/Cellar/python/2.7.10/lib/python2.7/lib-dynload\nrm /home/user/.linuxbrew/Cellar/python/2.7.10/lib/python2.7/lib-dynload/_ssl_failed.so\nchmod 444 /home/user/.linuxbrew/Cellar/python/2.7.10/lib/python2.7/lib-dynload/_ssl.so\n```\n. ",
    "harper357": "I seem to be having a similar (or maybe the same) error. I can't seem to import ssl in python and when i try to use pip i get an error about openssl \n% pip\nTraceback (most recent call last):\n  File \"/data/gfedewa/.linuxbrew/bin/pip\", line 9, in <module>\n    load_entry_point('pip==1.5.6', 'console_scripts', 'pip')()\n  File \"build/bdist.linux-x86_64/egg/pkg_resources.py\", line 356, in load_entry_point\n  File \"build/bdist.linux-x86_64/egg/pkg_resources.py\", line 2476, in load_entry_point\n  File \"build/bdist.linux-x86_64/egg/pkg_resources.py\", line 2190, in load\n  File \"/data/gfedewa/.linuxbrew/opt/python/lib/python2.7/site-packages/pip-1.5.6-py2.7.egg/pip/__init__.py\", line 10, in <module>\n    from pip.util import get_installed_distributions, get_prog\n  File \"/data/gfedewa/.linuxbrew/opt/python/lib/python2.7/site-packages/pip-1.5.6-py2.7.egg/pip/util.py\", line 18, in <module>\n    from pip._vendor.distlib import version\n  File \"/data/gfedewa/.linuxbrew/opt/python/lib/python2.7/site-packages/pip-1.5.6-py2.7.egg/pip/_vendor/distlib/version.py\", line 14, in <module>\n    from .compat import string_types\n  File \"/data/gfedewa/.linuxbrew/opt/python/lib/python2.7/site-packages/pip-1.5.6-py2.7.egg/pip/_vendor/distlib/compat.py\", line 31, in <module>\n    from urllib2 import (Request, urlopen, URLError, HTTPError,\nImportError: cannot import name HTTPSHandler\n. ``\n% brew --config        \nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: f5d4584434f46433b009629149fe9792676ed051\nLast commit: 3 hours ago\nHOMEBREW_PREFIX: /data/gfedewa/.linuxbrew\nHOMEBREW_CELLAR: /data/gfedewa/.linuxbrew/Cellar\nCPU: 24-core 64-bit 6\nOS X: 0-x86_64\nClang: N/A\nX11: N/A\nSystem Ruby: 1.9.3-484\nPerl: /usr/bin/perl\nPython: /usr/bin/python => /usr/bin/python2.7\nRuby: /usr/bin/ruby => /usr/bin/ruby1.9.1\n% brew doctor\nYour system is ready to brew.\n% brew install -v lua 2>&1\n==> Downloading http://www.lua.org/ftp/lua-5.2.3.tar.gz\nAlready downloaded: /data/gfedewa/.cache/Homebrew/lua-5.2.3.tar.gz\n==> Verifying lua-5.2.3.tar.gz checksum\ntar xf /data/gfedewa/.cache/Homebrew/lua-5.2.3.tar.gz\n==> Downloading http://lua-users.org/files/wiki_insecure/power_patches/5.2/lua-5.2.3-sig_catch.patch\nAlready downloaded: /data/gfedewa/.cache/Homebrew/lua--patch-b9a0044eb3c422f8405798c900ce31587156c7dd.patch\n==> Verifying lua--patch-b9a0044eb3c422f8405798c900ce31587156c7dd.patch checksum\n==> Patching\n/usr/bin/patch -g 0 -f -d /tmp/lua-Czt9vk/lua-5.2.3 -p1 -i /tmp/lua--patch-f2Q2Do/lua-5.2.3-sig_catch.patch\npatching file src/lua.c\n==> make linux INSTALL_TOP=/data/gfedewa/.linuxbrew/Cellar/lua/5.2.3_1 INSTALL_MAN=/data/gfedewa/.linuxbrew/Cellar/lua/5.2.3_1/share/man/man1\ncd src && make linux\nmake[1]: Entering directory/tmp/lua-Czt9vk/lua-5.2.3/src'\nmake all SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline\"\nmake[2]: Entering directory /tmp/lua-Czt9vk/lua-5.2.3/src'\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lapi.o lapi.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lcode.o lcode.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lctype.o lctype.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldebug.o ldebug.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldo.o ldo.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldump.o ldump.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lfunc.o lfunc.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lgc.o lgc.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o llex.o llex.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lmem.o lmem.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lobject.o lobject.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lopcodes.o lopcodes.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lparser.o lparser.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstate.o lstate.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstring.o lstring.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltable.o ltable.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltm.o ltm.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lundump.o lundump.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lvm.o lvm.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lzio.o lzio.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lauxlib.o lauxlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lbaselib.o lbaselib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lbitlib.o lbitlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lcorolib.o lcorolib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldblib.o ldblib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o liolib.o liolib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lmathlib.o lmathlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o loslib.o loslib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstrlib.o lstrlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltablib.o ltablib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o loadlib.o loadlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o linit.o linit.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lua.o lua.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o luac.o luac.c\nlua.c:67:31: fatal error: readline/readline.h: No such file or directory\n #include <readline/readline.h>\n                               ^\ncompilation terminated.\nmake[2]: *** [lua.o] Error 1\nmake[2]: *** Waiting for unfinished jobs....\nmake[2]: Leaving directory/tmp/lua-Czt9vk/lua-5.2.3/src'\nmake[1]:  [linux] Error 2\nmake[1]: Leaving directory `/tmp/lua-Czt9vk/lua-5.2.3/src'\nmake:  [linux] Error 2\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: f5d4584434f46433b009629149fe9792676ed051\nHOMEBREW_PREFIX: /data/gfedewa/.linuxbrew\nCPU: 24-core 64-bit 6\nOS X: 0-x86_64\n/usr/bin/ruby1.9.1:\n  1.9.3-484\nX11: N/A\n==> ENV\nCC: /usr/bin/gcc-4.8\nCXX: /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc-4.8\nOBJCXX: /usr/bin/g++-4.8\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/data/gfedewa/.linuxbrew/include\nLDFLAGS: -L/data/gfedewa/.linuxbrew/lib -Wl,-rpath,/data/gfedewa/.linuxbrew/lib\nMAKEFLAGS: -j24\nCMAKE_PREFIX_PATH: /data/gfedewa/.linuxbrew\nPKG_CONFIG_LIBDIR: /data/gfedewa/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /data/gfedewa/.linuxbrew/share/aclocal\nPATH: /data/gfedewa/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/data/gfedewa/.linuxbrew/Library/ENV/scm\nError: lua 5.2.3 did not build\nLogs:\n     /data/gfedewa/Library/Logs/Homebrew/lua/01.make\n```\nOr did you just want the 01.make file?\n. Hm, that didn't seem to fix it, but i am getting a different error now. readline installed fine though. Here is the log:\n``\nbrew install -v lua 2>&1\n==> Downloading http://www.lua.org/ftp/lua-5.2.3.tar.gz\nAlready downloaded: /data/gfedewa/.cache/Homebrew/lua-5.2.3.tar.gz\n==> Verifying lua-5.2.3.tar.gz checksum\ntar xf /data/gfedewa/.cache/Homebrew/lua-5.2.3.tar.gz\n==> Downloading http://lua-users.org/files/wiki_insecure/power_patches/5.2/lua-5.2.3-sig_catch.patch\nAlready downloaded: /data/gfedewa/.cache/Homebrew/lua--patch-b9a0044eb3c422f8405798c900ce31587156c7dd.patch\n==> Verifying lua--patch-b9a0044eb3c422f8405798c900ce31587156c7dd.patch checksum\n==> Patching\n/usr/bin/patch -g 0 -f -d /tmp/lua-tKCO7r/lua-5.2.3 -p1 -i /tmp/lua--patch-DRYJCf/lua-5.2.3-sig_catch.patch\npatching file src/lua.c\n==> make linux INSTALL_TOP=/data/gfedewa/.linuxbrew/Cellar/lua/5.2.3_1 INSTALL_MAN=/data/gfedewa/.linuxbrew/Cellar/lua/5.2.3_1/share/man/man1\ncd src && make linux\nmake[1]: Entering directory/tmp/lua-tKCO7r/lua-5.2.3/src'\nmake all SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline\"\nmake[2]: Entering directory /tmp/lua-tKCO7r/lua-5.2.3/src'\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lapi.o lapi.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lcode.o lcode.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lctype.o lctype.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldebug.o ldebug.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldo.o ldo.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldump.o ldump.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lfunc.o lfunc.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lgc.o lgc.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o llex.o llex.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lmem.o lmem.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lobject.o lobject.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lopcodes.o lopcodes.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lparser.o lparser.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstate.o lstate.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstring.o lstring.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltable.o ltable.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltm.o ltm.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lundump.o lundump.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lvm.o lvm.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lzio.o lzio.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lauxlib.o lauxlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lbaselib.o lbaselib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lbitlib.o lbitlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lcorolib.o lcorolib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ldblib.o ldblib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o liolib.o liolib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lmathlib.o lmathlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o loslib.o loslib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lstrlib.o lstrlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o ltablib.o ltablib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o loadlib.o loadlib.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o linit.o linit.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o lua.o lua.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -DLUA_COMPAT_ALL -DLUA_USE_LINUX  -isystem/data/gfedewa/.linuxbrew/include  -c -o luac.o luac.c\nar rcu liblua.a lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o lobject.o lopcodes.o lparser.o lstate.o lstring.o ltable.o ltm.o lundump.o lvm.o lzio.o lauxlib.o lbaselib.o lbitlib.o lcorolib.o ldblib.o liolib.o lmathlib.o loslib.o lstrlib.o ltablib.o loadlib.o linit.o \nranlib liblua.a\n/usr/bin/gcc-4.8 -o lua  -L/data/gfedewa/.linuxbrew/lib -Wl,-rpath,/data/gfedewa/.linuxbrew/lib lua.o liblua.a -lm -Wl,-E -ldl -lreadline \n/usr/bin/gcc-4.8 -o luac  -L/data/gfedewa/.linuxbrew/lib -Wl,-rpath,/data/gfedewa/.linuxbrew/lib luac.o liblua.a -lm -Wl,-E -ldl -lreadline \n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference totputs'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference to tgoto'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference totgetflag'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference to UP'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference totgetent'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference to tgetnum'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference toPC'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference to tgetstr'\n/data/gfedewa/.linuxbrew/lib/libreadline.so: undefined reference toBC'\ncollect2: error: ld returned 1 exit status\nmake[2]:  [lua] Error 1\nmake[2]: Leaving directory /tmp/lua-tKCO7r/lua-5.2.3/src'\nmake[1]: *** [linux] Error 2\nmake[1]: Leaving directory/tmp/lua-tKCO7r/lua-5.2.3/src'\nmake:  [linux] Error 2\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: f5d4584434f46433b009629149fe9792676ed051\nHOMEBREW_PREFIX: /data/gfedewa/.linuxbrew\nCPU: 24-core 64-bit 6\nOS X: 0-x86_64\n/usr/bin/ruby1.9.1:\n  1.9.3-484\nX11: N/A\n==> ENV\nCC: /usr/bin/gcc-4.8\nCXX: /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc-4.8\nOBJCXX: /usr/bin/g++-4.8\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/data/gfedewa/.linuxbrew/include\nLDFLAGS: -L/data/gfedewa/.linuxbrew/lib -Wl,-rpath,/data/gfedewa/.linuxbrew/lib\nMAKEFLAGS: -j24\nCMAKE_PREFIX_PATH: /data/gfedewa/.linuxbrew\nPKG_CONFIG_LIBDIR: /data/gfedewa/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /data/gfedewa/.linuxbrew/share/aclocal\nPATH: /data/gfedewa/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/data/gfedewa/.linuxbrew/Library/ENV/scm\nError: lua 5.2.3 did not build\nLogs:\n     /data/gfedewa/Library/Logs/Homebrew/lua/01.make\n. @sjackman I don't at the moment. I can submit a request to have those installed, but it sometimes takes a while.\n@saketkc That didn't seem to work for me. It just put me back at the first error.\n. It didn't work. I also tried to uninstall ncurses and readline and then then brew install them but I just got the second error I posted again\n.\n% ls ~/.linuxbrew/Cellar/python/2.7.8_2/lib/python2.7/lib-dynload/_failed.so\nzsh: no matches found: /data/gfedewa/.linuxbrew/Cellar/python/2.7.8_2/lib/python2.7/lib-dynload/_failed.so\n```\nI tried to remove python and its dependencies and it didn't seem to work. \nI found this link to askubuntu that seems to be talk about a similar problem (although it isn't linuxbrew). Im not really sure how to test it though.\n. ",
    "smoh": "I installed it in the standard location ~/.linuxbrew. I used git clone method for installation.\n. $ brew install hello\nsudo: unable to stat /var/db/sudo: Permission denied\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.9.tar.gz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/u/semyeong/.linuxbrew/Cellar/hello/2.9\n==> make install\n/u/semyeong/.linuxbrew/Cellar/hello/2.9: 52 files, 716K, built in 18 seconds\n. Yes, I think it indeed is that line. I get the same message doing $sudo -k.\nI'm not going to try to install anything that requires sudo -- in this case, is it ok if I just comment out that line (not sure how to get around brew update though)? Are those packages requiring sudo indicated when I do brew info?\n. OK, thanks!\n. ",
    "oneillkza": "Definitely not the update -- I downloaded and updated about half an hour ago, and when I re-ran update now it said it was already up to date.\nRunning your hello code (using the steps avoe), I get:\nError: The Homebrew GCC was not installed.\nYou must:\n  brew install gcc\nError: No such keg: /home/koneill/.linuxbrew/Cellar/hello\n. Ah hang on, those symlinks don't look right.\n. Yeah, it looks like there's no gcc44 in/usr/bin\nSymlinking to /usr/bin/gcc etc seems to work. Will this cause issues in future, though?\nln -s /usr/bin/gcc gcc-4.4 $prefix/bin/gcc-4.4\n. Yep that worked completely -- I was able to bootstrap gcc 4.9.\nI guess shared.rb will need a little more tweaking to account for this particular case.\n. ```\n[koneill@klesack01-centos Aly_meetings]$ ls -l /usr/bin/cc /usr/bin/gcc\nlrwxrwxrwx. 1 root root      3 Jan 29  2014 /usr/bin/cc -> gcc\n-rwxr-xr-x  1 root root  50216 Sep 23  2011 /usr/bin/ccache-swig\n-rwxr-xr-x  2 root root 268224 Nov 21  2013 /usr/bin/gcc\n[koneill@klesack01-centos Aly_meetings]$ cc --version\ncc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n[koneill@klesack01-centos Aly_meetings]$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n. Basically there is only a gcc executable, and no version-specific executable name.\n. Yes, that's what I did. I'm busy testing the complete procedure as listed at https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation\nIt's running fairly smoothly so far. I think my problem was that I jumped straight to trying to compile gcc without completing the other steps. I'll post again to close if this is sorted.\n. Yeah, I just needed to go back to the TL;DR steps and run through them (after correctly symlinking gcc and g++) . So basically this issue is resolved, although as I said before it may be a good idea to include this as a case in shared.rb (basically a modification on this : https://github.com/Homebrew/linuxbrew/commit/3353c346f08738b1891730e7647b1aebd6e40c70)\nNow, if I can just figure out how to get Mendeley in a cask and using the up-to-date linuxbrew libraries, I'll become very, very happy.\n. [koneill@klesack01-centos lib]$ brew cask install https://raw.githubusercontent.com/sjackman/homebrew-cask/mendeley/Casks/mendeley.rb\nError: No available formula for brew-cask\n[koneill@klesack01-centos lib]$ brew install brew-cask\nError: No available formula for brew-cask\nI think the cask functionality hasn't been ported over? I did run brew update first.\n. Yes, it fails -- sorry, I alluded to that in the report but didn't give more details:\n``\n$ brew install -v glibc\n==> Downloading http://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\nAlready downloaded: /home/koneill/.cache/Homebrew/glibc-2.19.tar.bz2\n==> Verifying glibc-2.19.tar.bz2 checksum\ntar xf /home/koneill/.cache/Homebrew/glibc-2.19.tar.bz2\n==> ../configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/home/koneill/.linuxbrew/Cellar/glibc/2.19 --without-selinux --with-binutils=/home/koneill/.linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin --with-headers=/home/koneill/.linuxbrew/Cellar/linux-headers/3.15.9/include\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking for gcc... /home/koneill/.linuxbrew/bin/gcc-4.9\nchecking for suffix of object files... configure: error: in/tmp/glibc-AkzQRv/glibc-2.19/build':\nconfigure: error: cannot compute suffix of object files: cannot compile\nSee `config.log' for more details\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: 3353c346f08738b1891730e7647b1aebd6e40c70\nHOMEBREW_PREFIX: /home/koneill/.linuxbrew\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nX11: N/A\n==> ENV\nCC: /home/koneill/.linuxbrew/bin/gcc-4.9 => /home/koneill/.linuxbrew/Cellar/gcc/4.9.1/bin/gcc-4.9\nCXX: /home/koneill/.linuxbrew/bin/g++-4.9 => /home/koneill/.linuxbrew/Cellar/gcc/4.9.1/bin/g++-4.9\nOBJC: /home/koneill/.linuxbrew/bin/gcc-4.9\nOBJCXX: /home/koneill/.linuxbrew/bin/g++-4.9\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/koneill/.linuxbrew/include\nLDFLAGS: -L/home/koneill/.linuxbrew/lib\nMAKEFLAGS: -j8\nCMAKE_PREFIX_PATH: /home/koneill/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/koneill/.linuxbrew/lib/pkgconfig\nACLOCAL_PATH: /home/koneill/.linuxbrew/share/aclocal\nPATH: /home/koneill/.linuxbrew/bin:/home/koneill/.linuxbrew/bin:/home/koneill/.linuxbrew/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/koneill/bin:/home/koneill/.linuxbrew/Library/Contributions/cmd\nError: glibc 2.19 did not build\nLogs:\n     /home/koneill/Library/Logs/Homebrew/glibc/01.configure\n```\nI'm pretty sure this error:\nconfigure: error: cannot compute suffix of object files: cannot compile\nSee `config.log' for more details\nis due to missing libraries (at least, that's what the glibc FAQ implies). To find out (and to find out which libraries), I would need to look into the config.log file, but that gets deleted along with the directory in /tmp that linuxbrew uses to compile in.\n. Actually, let me start this in a new issue, with a more appropriate name.\n. Here you go:\nhttps://gist.github.com/anonymous/1f00f6e16350e51b395b\nIt says pretty much the same things.\nIs there a way to stop linuxbrew from deleting temporary files so I can get at the glibc config.log?\n. Hmmm ... that gives me the same error, with the following Ruby stacktrace appended:\n/home/koneill/.linuxbrew/Library/Homebrew/debrew/irb.rb:1:in `require'\nLoadError: no such file to load -- irb\nError: no such file to load -- irb\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/wiki/troubleshooting\n/home/koneill/.linuxbrew/Library/Homebrew/debrew/irb.rb:1:in `require'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew/irb.rb:1\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:133:in `require'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:133:in `debug'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:57:in `choose'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:125:in `debug'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:124:in `loop'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:124:in `debug'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:109:in `debrew'\n/home/koneill/.linuxbrew/Library/Homebrew/debrew.rb:21:in `install'\n/home/koneill/.linuxbrew/Library/Homebrew/build.rb:137:in `install'\n/home/koneill/.linuxbrew/Library/Homebrew/formula.rb:262:in `brew'\n/home/koneill/.linuxbrew/Library/Homebrew/formula.rb:586:in `stage'\n/home/koneill/.linuxbrew/Library/Homebrew/resource.rb:66:in `unpack'\n/home/koneill/.linuxbrew/Library/Homebrew/extend/fileutils.rb:21:in `mktemp'\n/home/koneill/.linuxbrew/Library/Homebrew/resource.rb:63:in `unpack'\n/home/koneill/.linuxbrew/Library/Homebrew/resource.rb:56:in `stage'\n/home/koneill/.linuxbrew/Library/Homebrew/formula.rb:584:in `stage'\n/home/koneill/.linuxbrew/Library/Homebrew/formula.rb:257:in `brew'\n/home/koneill/.linuxbrew/Library/Homebrew/build.rb:117:in `install'\n/home/koneill/.linuxbrew/Library/Homebrew/build.rb:186\nHmmm -- yeah it looks like I'm missing the irb package, which is apparently a hidden dependency of linuxbrew. I'll see if I can get the systems people over here to install the ruby package manager (there's no formula for it in homebrew since it comes with Ruby by default on Mac or something), so I can install irb and go from there.\n. Yeah they installed Ruby without installing rubygems. \nArg. When I try to compile (without setting LD_LIBRARY_PATH), I get:\nconfigure: error: C compiler cannot create executables\nIt probably needs ld to be rebuilt or something.\n. OK, by juggling LD_LIBRARY_PATH, I got ruby compiled, and the debug working. \nI think the important bit from config.log is this:\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 -V >&5\ngcc-4.9: error: unrecognized command line option '-V'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:2736: $? = 1\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 -qversion >&5\ngcc-4.9: error: unrecognized command line option '-qversion'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:2736: $? = 1\nconfigure:2741: checking for suffix of object files\nconfigure:2763: /home/koneill/.linuxbrew/bin/gcc-4.9 -c -Os -w -pipe -march=core2 -isystem/home/koneill/.linuxbrew/include conftest.c >&5\n/home/koneill/.linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/cc1: error while loading shared libraries: libcloog-isl.so.4: cannot open shared object file: No such file or directory\nThe  whole glibc config.log looks like this:\n```\nThis file contains any messages produced by compilers while\nrunning configure, to aid debugging if configure makes a mistake.\nIt was created by GNU C Library configure (see version.h), which was\ngenerated by GNU Autoconf 2.68.  Invocation command line was\n$ ../configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/home/koneill/.linuxbrew/Cellar/glibc/2.19 --without-selinux --with-binutils=/home/koneill/.linuxbrew/Cellar/binutils/2.24/x86_64-unknown-linux-gnu/bin --with-headers=/home/koneill/.linuxbrew/Cellar/linux-headers/3.15.9/include\n---------\nPlatform.\n---------\nhostname = klesack01-centos.phage.bcgsc.ca\nuname -m = x86_64\nuname -r = 2.6.32-431.29.2.el6.x86_64\nuname -s = Linux\nuname -v = #1 SMP Tue Sep 9 21:36:05 UTC 2014\n/usr/bin/uname -p = unknown\n/bin/uname -X     = unknown\n/bin/arch              = x86_64\n/usr/bin/arch -k       = unknown\n/usr/convex/getsysinfo = unknown\n/usr/bin/hostinfo      = unknown\n/bin/machine           = unknown\n/usr/bin/oslevel       = unknown\n/bin/universe          = unknown\nPATH: /home/koneill/.linuxbrew/bin\nPATH: /home/koneill/.linuxbrew/bin\nPATH: /usr/lib64/qt-3.3/bin\nPATH: /usr/local/bin\nPATH: /usr/bin\nPATH: /bin\nPATH: /usr/local/sbin\nPATH: /usr/sbin\nPATH: /sbin\nPATH: /home/koneill/bin\nPATH: /home/koneill/.linuxbrew/Library/Contributions/cmd\n-----------\nCore tests.\n-----------\nconfigure:2344: checking build system type\nconfigure:2358: result: x86_64-unknown-linux-gnu\nconfigure:2378: checking host system type\nconfigure:2391: result: x86_64-unknown-linux-gnu\nconfigure:2460: checking for gcc\nconfigure:2487: result: /home/koneill/.linuxbrew/bin/gcc-4.9\nconfigure:2716: checking for C compiler version\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 --version >&5\ngcc-4.9 (Homebrew gcc 4.9.1) 4.9.1\nCopyright (C) 2014 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nconfigure:2736: $? = 0\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 -v >&5\nReading specs from /home/koneill/.linuxbrew/Cellar/gcc/4.9.1/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/specs\nCOLLECT_GCC=/home/koneill/.linuxbrew/bin/gcc-4.9\nCOLLECT_LTO_WRAPPER=/home/koneill/.linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: ../configure --prefix=/home/koneill/.linuxbrew/Cellar/gcc/4.9.1 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-4.9 --with-gmp=/home/koneill/.linuxbrew/opt/gmp --with-mpfr=/home/koneill/.linuxbrew/opt/mpfr --with-mpc=/home/koneill/.linuxbrew/opt/libmpc --with-cloog=/home/koneill/.linuxbrew/opt/cloog --with-isl=/home/koneill/.linuxbrew/opt/isl --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc 4.9.1' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 4.9.1 (Homebrew gcc 4.9.1) \nconfigure:2736: $? = 0\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 -V >&5\ngcc-4.9: error: unrecognized command line option '-V'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:2736: $? = 1\nconfigure:2725: /home/koneill/.linuxbrew/bin/gcc-4.9 -qversion >&5\ngcc-4.9: error: unrecognized command line option '-qversion'\ngcc-4.9: fatal error: no input files\ncompilation terminated.\nconfigure:2736: $? = 1\nconfigure:2741: checking for suffix of object files\nconfigure:2763: /home/koneill/.linuxbrew/bin/gcc-4.9 -c -Os -w -pipe -march=core2 -isystem/home/koneill/.linuxbrew/include conftest.c >&5\n/home/koneill/.linuxbrew/Cellar/gcc/4.9.1/libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/cc1: error while loading shared libraries: libcloog-isl.so.4: cannot open shared object file: No such file or directory\nconfigure:2767: $? = 1\nconfigure: failed program was:\n| / confdefs.h /\n| #define PACKAGE_NAME \"GNU C Library\"\n| #define PACKAGE_TARNAME \"glibc\"\n| #define PACKAGE_VERSION \"(see version.h)\"\n| #define PACKAGE_STRING \"GNU C Library (see version.h)\"\n| #define PACKAGE_BUGREPORT \"http://sourceware.org/bugzilla/\"\n| #define PACKAGE_URL \"http://www.gnu.org/software/glibc/\"\n| #define PKGVERSION \"(GNU libc) \"\n| #define REPORT_BUGS_TO \"http://www.gnu.org/software/libc/bugs.html\"\n| / end confdefs.h.  /\n| \n| int\n| main ()\n| {\n| \n|   ;\n|   return 0;\n| }\nconfigure:2781: error: in /tmp/glibc-FkSKYN/glibc-2.19/build':\nconfigure:2783: error: cannot compute suffix of object files: cannot compile\nSeeconfig.log' for more details\n----------------\nCache variables.\n----------------\nac_cv_build=x86_64-unknown-linux-gnu\nac_cv_env_CCC_set=\nac_cv_env_CCC_value=\nac_cv_env_CC_set=set\nac_cv_env_CC_value=/home/koneill/.linuxbrew/bin/gcc-4.9\nac_cv_env_CFLAGS_set=set\nac_cv_env_CFLAGS_value='-Os -w -pipe -march=core2'\nac_cv_env_CPPFLAGS_set=set\nac_cv_env_CPPFLAGS_value=-isystem/home/koneill/.linuxbrew/include\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_CXXFLAGS_set=set\nac_cv_env_CXXFLAGS_value='-Os -w -pipe -march=core2'\nac_cv_env_CXX_set=set\nac_cv_env_CXX_value=/home/koneill/.linuxbrew/bin/g++-4.9\nac_cv_env_LDFLAGS_set=set\nac_cv_env_LDFLAGS_value=-L/home/koneill/.linuxbrew/lib\nac_cv_env_LIBS_set=\nac_cv_env_LIBS_value=\nac_cv_env_build_alias_set=\nac_cv_env_build_alias_value=\nac_cv_env_host_alias_set=\nac_cv_env_host_alias_value=\nac_cv_env_target_alias_set=\nac_cv_env_target_alias_value=\nac_cv_host=x86_64-unknown-linux-gnu\nac_cv_prog_ac_ct_CC=/home/koneill/.linuxbrew/bin/gcc-4.9\n-----------------\nOutput variables.\n-----------------\nAR=''\nAS=''\nASFLAGS_config=''\nAUTOCONF=''\nAWK=''\nBASH_SHELL=''\nBISON=''\nBUILD_CC=''\nCC='/home/koneill/.linuxbrew/bin/gcc-4.9'\nCFLAGS='-Os -w -pipe -march=core2'\nCPP=''\nCPPFLAGS='-isystem/home/koneill/.linuxbrew/include'\nCPPUNDEFS=''\nCXX='/home/koneill/.linuxbrew/bin/g++-4.9'\nCXXFLAGS='-Os -w -pipe -march=core2'\nCXX_SYSINCLUDES=''\nDEFINES=''\nDEFS=''\nECHO_C=''\nECHO_N='-n'\nECHO_T=''\nINSTALL_DATA=''\nINSTALL_INFO=''\nINSTALL_PROGRAM=''\nINSTALL_SCRIPT=''\nKSH=''\nLD=''\nLDFLAGS='-L/home/koneill/.linuxbrew/lib'\nLIBGD=''\nLIBOBJS=''\nLIBS=''\nLN_S=''\nLTLIBOBJS=''\nMAKE=''\nMAKEINFO=''\nMSGFMT=''\nNM=''\nOBJCOPY=''\nOBJDUMP=''\nOBJEXT=''\nPACKAGE_BUGREPORT='http://sourceware.org/bugzilla/'\nPACKAGE_NAME='GNU C Library'\nPACKAGE_STRING='GNU C Library (see version.h)'\nPACKAGE_TARNAME='glibc'\nPACKAGE_URL='http://www.gnu.org/software/glibc/'\nPACKAGE_VERSION='(see version.h)'\nPATH_SEPARATOR=':'\nPERL=''\nPKGVERSION='(GNU libc) '\nPKGVERSION_TEXI='(GNU libc) '\nREADELF=''\nRELEASE=''\nREPORT_BUGS_TEXI='@uref{http://www.gnu.org/software/libc/bugs.html}'\nREPORT_BUGS_TO='http://www.gnu.org/software/libc/bugs.html'\nSED=''\nSHELL='/bin/sh'\nSYSINCLUDES=''\nVERSION=''\nac_ct_CC='/home/koneill/.linuxbrew/bin/gcc-4.9'\nac_ct_CXX=''\nadd_on_subdirs=''\nadd_ons=''\nall_warnings=''\nbase_machine=''\nbindir='${exec_prefix}/bin'\nbindnow=''\nbuild='x86_64-unknown-linux-gnu'\nbuild_alias=''\nbuild_cpu='x86_64'\nbuild_nscd=''\nbuild_os='linux-gnu'\nbuild_pt_chown=''\nbuild_vendor='unknown'\ncross_compiling='no'\ndatadir='${datarootdir}'\ndatarootdir='${prefix}/share'\ndocdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\ndvidir='${docdir}'\nexceptions=''\nexec_prefix='NONE'\nfno_unit_at_a_time=''\nforce_install=''\ngnu89_inline=''\nhardcoded_path_in_tests=''\nhave_libaudit=''\nhave_libcap=''\nhave_selinux=''\nhost='x86_64-unknown-linux-gnu'\nhost_alias=''\nhost_cpu='x86_64'\nhost_os='linux-gnu'\nhost_vendor='unknown'\nhtmldir='${docdir}'\nincludedir='${prefix}/include'\ninfodir='${datarootdir}/info'\nldd_rewrite_script=''\nlibc_cv_Bgroup=''\nlibc_cv_cc_loop_to_function=''\nlibc_cv_cc_nofma=''\nlibc_cv_cc_submachine=''\nlibc_cv_cc_with_libunwind=''\nlibc_cv_forced_unwind=''\nlibc_cv_fpie=''\nlibc_cv_gcc_static_libgcc=''\nlibc_cv_gcc_unwind_find_fde=''\nlibc_cv_hashstyle=''\nlibc_cv_have_bash2=''\nlibc_cv_have_ksh=''\nlibc_cv_localedir=''\nlibc_cv_localstatedir=''\nlibc_cv_nss_crypt=''\nlibc_cv_output_format=''\nlibc_cv_pic_default=''\nlibc_cv_rootsbindir=''\nlibc_cv_rtlddir=''\nlibc_cv_slibdir=''\nlibc_cv_ssp=''\nlibc_cv_sysconfdir=''\nlibc_cv_z_combreloc=''\nlibc_cv_z_execstack=''\nlibc_extra_cflags=''\nlibdir='${exec_prefix}/lib'\nlibexecdir='${exec_prefix}/libexec'\nlink_obsolete_rpc=''\nlocaledir='${datarootdir}/locale'\nlocalstatedir='${prefix}/var'\nmach_interface_list=''\nmandir='${datarootdir}/man'\nmulti_arch=''\nold_glibc_headers=''\noldest_abi=''\noldincludedir='/usr/include'\npdfdir='${docdir}'\nprefix='/home/koneill/.linuxbrew/Cellar/glibc/2.19'\nprofile=''\nprogram_transform_name='s,x,x,'\npsdir='${docdir}'\nsbindir='${exec_prefix}/sbin'\nshared=''\nsharedstatedir='${prefix}/com'\nsizeof_long_double=''\nstatic=''\nstatic_nss=''\nsubdirs=' '\nsubmachine=''\nsysconfdir='${prefix}/etc'\nsysdeps_add_ons=''\nsysheaders=''\nsysnames=''\ntarget_alias=''\nuse_default_link=''\nuse_ldconfig=''\nuse_nscd=''\nwith_fp=''\n-----------\nconfdefs.h.\n-----------\n/ confdefs.h /\ndefine PACKAGE_NAME \"GNU C Library\"\ndefine PACKAGE_TARNAME \"glibc\"\ndefine PACKAGE_VERSION \"(see version.h)\"\ndefine PACKAGE_STRING \"GNU C Library (see version.h)\"\ndefine PACKAGE_BUGREPORT \"http://sourceware.org/bugzilla/\"\ndefine PACKAGE_URL \"http://www.gnu.org/software/glibc/\"\ndefine PKGVERSION \"(GNU libc) \"\ndefine REPORT_BUGS_TO \"http://www.gnu.org/software/libc/bugs.html\"\nconfigure: exit 1\n```\n. Yeah basically gcc won't compile executables because of a problem with libcloog, but I can't recompile cloog with brew since gcc can't compile executables. \nDoing some testing, it looks like this only happens with the brew-installed gcc-4.9, while the CentOS gcc-4.4 works OK. Is there a way I can tell brew to use that instead so I can try reinstalling cloog?\n. Huh. I have gcc-4.4 in ~/.linuxbrew/bin, but it doesn't like that. This is pretty weird, since it was compiling with gcc-4.4 before. Maybe what I'll try is nuking the linuxbrew installation I have and starting over, first bootstrapping the gcc requirements (like cloog, etc), and making sure gcc is working before I move on, since that seems to be the root problem.\n[koneill@klesack01-centos bin]$ ls gcc*\ngcc  gcc-4.4  gcc-4.9  gcc-ar-4.9  gcc-nm-4.9  gcc-ranlib-4.9\n[koneill@klesack01-centos bin]$ brew reinstall cloog\n==> Reinstalling cloog\nError: The requested Homebrew GCC, gcc44, was not installed.\nYou must:\n  brew tap homebrew/versions\n  brew install gcc44\n. I'm pretty sure this was entirely linked to the other issue I reported (with gcc), so I'm closing this issue.\n. I'm poking at it and steadily making progress. I'll likely finish it up on Monday.\n. Ugh. I'm stuck with installing ruby via linuxbrew so I have irb so I can get linuxbrew to stop mid-install so I can inspect the config.logs. \nUnfortunately libxslt (a ruby dependency) won't build. It had one bug that I've put together a hacky fix for (and will create a separate issue for once it is fixed), but also had a missing dependency on libgcrypt.\nUnfortunately libgcrypt won't build either, because some tests fail due to segmentation faults\n/bin/sh: line 5: 25351 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\n...\nSALSA20     /bin/sh: line 5: 25419 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: benchmark\n...\n SALSA20        |  nanosecs/byte   mebibytes/sec   cycles/byte\n     STREAM enc | /bin/sh: line 5: 25427 Segmentation fault      (core dumped) GCRYPT_IN_REGRESSION_TEST=1 ${dir}$tst\nFAIL: bench-slope\n. Anyway, the bug I'm having with GHC is that it can't curses.h or ncurses.h or term.h, despite ncurses being installed.\nActually, it looks like these should have been symlinked from the cellar into ~/.linuxbrew/include, so I guess this needs to be added somehow to ncurses.rb, though I'm not sure enough of all of Homebrews environment variables in Ruby to be able to hack that. For now I'm doing it manually.\n. Yes, when I did it, I found at least three .h files that needed linking, and at that point gave up linking them one at a time and just did:\nln -s ncursesw/*.h ~/.linuxbrew/include/\n. I do, but can't remember whether it was linked already or I had to link it myself. Going by the fact that all the symlinks have the same date/time stamp, I'm going to guess that homewbrew links it in when installing ncurses, and it is, indeed, unnecessary.\n. Hi Shaun\nI gave it a go (using reinstall) and it worked.\n. ",
    "matope": "Hi, I hit this problem and it has been solved by your snippet.\nhttps://github.com/Homebrew/linuxbrew/issues/137#issuecomment-57025676\nBelow snippet doesn't solve as /usr/bin/{gcc44,g++44,gfortran44} not found in my system.\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#use-a-compiler-other-than-gcc\n. Thanks! It goes well in my CentOS 6.5.\n. @sjackman Don't you include this trick into the omnibus installer?\n(https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)\nI originally wanted to make such a patch, but I couldn't find where the source code is.\n. That sounds better way. So, I'm looking forwrad to the implementation as I'm not good at Ruby:)\n. I apologize for rushing you, but I see. Thank you very much.\n. My understanding is that the policy for dependencies on homebrew/dupes has not been  determined yet and if I would like to pass through this issue, I should have install all homebrew/dupes manually. \nOK. I see. I close this ticket. I hope the policy will be determined nicely.\n. ",
    "tseemann": "I just got burnt with this exact same issue when I decided to start from scratch after screwing up my existing Linuxbrew install. However I did not have to do this bootstrap the first time around? Has something changed since Feb 2015?\n. @wenerme I got the same problem. As #314 says, just use the Brew version of ruby: brew install ruby.\n. So does this need a patch to the google-perftools for std=c11 ?\n. The problem was that the system uses RHEL and the 'Satellite' management system, which means only the head sysadmin can add channels.  He has now installed that channel.\nIs there any way we can put hints in recipes for this? \ndepends_on 'gd' => :brew, 'gd-devel' => :rpm, 'libgd-dev' => :apt\nLike the way we do for Perl? \ndepends_on 'Foo::Bar' => :perl\nOr in some kind of clause/method which won't annoy the Mac OS X team?\nOr some master list in LinuxBrew which gets triggered?\n. I guess so. The Mac Brew team have the easier situation of generally knowing exactly what -dev packages Mac OS X provide. I was hoping to make Linux Brew closer to that ideal. But it is pointless as RPM/APT need sudo anyway, and Brew is all about non-sudo. \nI normally have full control over my hardware but I'm in a new situation where I don't always. And when lots of -dev packages are not installed, it reveals a lot of \"fluke\" formulae that are actually using system packages without realising it. This seems to violate some of the goals of Brew, as you have external package dependencies which you can't control and may get upgraded and break your Brew install.\nWriting good formulae is hard. A \"blank\" Linux system for Jenkins would reveal most of these errors. \nBut ultimately it is probably not worth the effort. Linuxbrew is working well, and forcing me to write Mac compatible formulae helps the greater community. I do have a Mac laptop but it's a glorified dumb terminal :-)\n. My guess would be that Brew is designed for Mac OS X, which is nearly always a single user machine where the owner has root/sudo access.\nHowever, LinuxBrew is more likely to be on a shared server or cluster where any given user will not have root/sudo access, and therefore can not write to /usr/local\nYou can git clone linuxbrew into whichever folder you want.\n. The main thing is that /usr/local is \"nearly\" guaranteed to not be touched by Apple or apps.\nHowever on Linux it's a free for all. But if you have a sane sysadmin it works on Linux fine in /usr/local !\n. Before:\n/usr/bin/ruby\nruby 2.0.0p598 (2014-11-13) [x86_64-linux]\nLet's try the brew version:\n```\n% brew install ruby\n==> Downloading http://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.1.tar.bz2\n################################################################## 100.0%\n==> ./configure --prefix=/bio/linuxbrew/Cellar/ruby/2.2.1 --enable-shared --disable-silent-rules --with-sitedir=/bio/linuxbrew/lib/ruby/site\n==> make\n==> make install\n    from ./tool/rbinstall.rb:757:in call'\n    from ./tool/rbinstall.rb:757:inblock in '\n    from ./tool/rbinstall.rb:754:in each'\n    from ./tool/rbinstall.rb:754:in'\nmake: *** [do-install-nodoc] Error 1\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nvim  7.4.488 build fails if Homebrew ruby is installed but /usr/bin/ruby comes first in PATH (https://github.com/Homebrew/homebrew/issues/33705)\nAdding formulas for ndenv and node-build. Inspired by rbenv and ruby-build formulas. (https://github.com/Homebrew/homebrew/pull/34994)\n```\nDo I need to remove Ruby from my PATH / system first?\n. (i did this 5 days ago but it seems I didn't click on the submit/comment button so here it is now)\n/usr/bin/ruby -e\"require 'minitest'\"; echo $?\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- minitest (LoadError)\n    from /usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from -e:1:in `<main>'\n1\ntmp/ruby20150324-117760-v9hnam/ruby-2.2.1/lib/rubygems/package.rb:369:in `initialize': Permission denied @ rb_sysopen - /bio/linuxbrew/Cellar/ruby/2.2.1/lib/ruby/gems/2.2.0/gems/minitest-5.4.3/test/minitest/metametameta.rb (Errno::EACCES)\ngist logs: https://gist.github.com/df055256da8f8a909cbb\n. /bio/linuxbrew/Cellar/ruby does not exist. It seems I don't have brew Ruby installed. I'm guessing that is the problem. Should ruby be a dependency somewhere?\nI've installed it now, and brew test doesn't fail anymore.\n. @sjackman This error popped up again today on a fresh RHEL/Centos install.\nFYI rubygem-minitest does not exist as an RPM on RHEL 7.2\n. The problem is that there is a system LUA installed. (but not -devel AFAIK)\nrpm -qa | grep lua\nlua-5.1.4-14.el7.x86_64\nlua-static-5.1.4-14.el7.x86_64\nWhen I install the Brew LUA it goes in PATH first and gnuplot compiles. If I remove the Brew LUA, and just leave the system LUA, it fails.\n```\nwhich -a lua\n/usr/bin/lua\n==> Reinstalling gnuplot\n==> Downloading https://downloads.sourceforge.net/project/gnuplot/gnuplot/5.0.0/gnuplot-5.0.0.tar.gz\nAlready downloaded: /home/tseemann/.cache/Homebrew/gnuplot-5.0.0.tar.gz\n==> ./configure --disable-silent-rules --prefix=/bio/linuxbrew/Cellar/gnuplot/5.0.0 --with-readline=/bio/linuxbrew/opt/readline --with-gd=/bio/linuxbrew/opt/gd --disable-wxwidgets -\n==> make\nmake[2]:  [all] Error 2\nmake[2]: Leaving directory /tmp/gnuplot20150426-83186-nyfc6w/gnuplot-5.0.0/src'\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory/tmp/gnuplot20150426-83186-nyfc6w/gnuplot-5.0.0'\nmake:  [all] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\ngnuplot failed to build on 10.8.5 (https://github.com/Homebrew/homebrew/issues/37423)\n```\nBut if i pre-install Brew LUA all is fine:\n```\nbrew install lua\nwhich -a lua\n/bio/linuxbrew/bin/lua\n/usr/bin/lua\nbrew reinstall gnuplot\n==> Reinstalling gnuplot\n/bio/linuxbrew/Cellar/gnuplot/5.0.0: 44 files, 2.4M, built in 29 seconds\n```\nThis is a common theme I'm encountering during my new Brew career; lots of assumptions about system libraries, which is generally ok on OSX but not on Linux. Then the Homebrew people just tell me to complain to you!\n. This is pretty neat!\nFYI - the equivalent packages on RHEL/Centos are libgcc and libstdc++.\n. I've just started from scratch again.\n. I did try exactly that symlink trick but it failed with the old \"minitest\" bug that I encountered when I first got into Linuxbrew.\n. I found this \"warning\" error in 02.make - it seems to be using -L/usr/local/lib and -I/usr/local/include which is empty on Linux.\nbuilding '_ssl' extension\n/bio/linuxbrew/bin/gcc-5 -pthread -fPIC -fno-strict-aliasing -Os -w -pipe -march=core2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes\n -I. -IInclude -I./Include -I/usr/local/include -I/tmp/python20150531-39238-z87k0v/Python-2.7.10/Include -I/tmp/python20150531-39238-z87\nk0v/Python-2.7.10 -c /tmp/python20150531-39238-z87k0v/Python-2.7.10/Modules/_ssl.c -o build/temp.linux-x86_64-2.7/tmp/python20150531-392\n38-z87k0v/Python-2.7.10/Modules/_ssl.o\n/bio/linuxbrew/bin/gcc-5 -pthread -shared -L/bio/linuxbrew/lib -Wl,-rpath,/bio/linuxbrew/lib -L/bio/linuxbrew/lib -Wl,-rpath,/bio/linuxb\nrew/lib -fno-strict-aliasing -Os -w -pipe -march=core2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -isys\ntem/bio/linuxbrew/include build/temp.linux-x86_64-2.7/tmp/python20150531-39238-z87k0v/Python-2.7.10/Modules/_ssl.o -L/bio/linuxbrew/lib\n-L/usr/local/lib -L. -lssl -lcrypto -lpython2.7 -o build/lib.linux-x86_64-2.7/_ssl.so\n*** WARNING: renaming \"_ssl\" since importing it failed: build/lib.linux-x86_64-2.7/_ssl.so: undefined symbol: SSLv2_method\nand\n```\nPython build finished, but the necessary bits to build these modules were not found:\nbsddb185           dl                 imageop\nsunaudiodev\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nFailed to build these modules:\n_ssl\n```\n. Also found this:\nrunning build_ext\nldd: /bio/linuxbrew/opt/readline/lib/libhistory.dylib: No such file or directory\n. brew list openssl\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/bin/c_rehash\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/bin/openssl\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/include/openssl/ (75 files)\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/engines/ (12 files)\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/pkgconfig/ (3 files)\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/ (6 files)\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/share/man/ (1537 files)\nI don't have an libopenssl:\nnm -D /bio/linuxbrew/lib/libopenssl.so |grep SSLv2_method\nnm: '/bio/linuxbrew/lib/libopenssl.so': No such file\nBut I do have a libssl (also in /bio/linuxbrew/lib/libssl.so):\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libcrypto.a\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.a\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libcrypto.so.1.0.0\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so.1.0.0\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libcrypto.so\n/bio/linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so\nAnd it has an \"SSLv23_method\" instead of \"SSLv2_method\":\nnm -D /bio/linuxbrew/lib/libssl.so | grep -i SSLv2\n000000000002e7b0 T SSLv23_client_method\n000000000002dc90 T SSLv23_method\n000000000002dcf0 T SSLv23_server_method\nHere is the openssl formula: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/openssl.rb\n. All the later errors are for Python 2. You can't really remove openssl native (tools depend on it) or Linuxbrew (as you can never reinstall it). Catch-22 !\n. Yes I am on genuine RHEL 7 latest version -  so similar to Centos/RPM and the latest version not an old version.\nI am very confused on what to do next.\n. A few weeks ago I managed to \"brew install python\" (2.7.10) on RHEL 7.  \nI think a new version of brew \"openssl\" somehow allowed it to work but I am not sure.\n. Red Hat Enterprise Linux Server release 7.1 (Maipo)  - not by choice ;)\nI can test on Ubuntu as well if need be.\n@gawbul - which Linux distro were you testing on?\nI'm a Perl person and don't really know the Python package protocol!\n. @tdsmith Ludicrous but effective at least makes things work And you could if OS.linux? condition it as to not affect OSX users?\n. I can't install Brew python because of this bug: https://github.com/Homebrew/linuxbrew/issues/420\n:-(\n. Does brew update update Linuxbrew core too?\n. @tdsmith @sjackman  \nI can confirm that your modified recipe works on RHEL 7.x for python 2 and 3 \nHOWEVER\nAlthough pure python things I can pip install, I can't seem to pip install things that need to compile eg. numpy (needs -dev stuff) and also it seems to be using system BLAS .   \nIs this why I'm mean to use homebrew-python/numpy ?\n```\nCollecting numpy\n  Using cached numpy-1.9.2.tar.gz\nInstalling collected packages: numpy\n  Running setup.py install for numpy\n    Complete output from command /bio/linuxbrew/Cellar/python/2.7.10/bin/python -c \"import setuptools, tokenize;file='/tmp/pip-build-HTFGIl/numpy/setup.py';exec(compile(getattr(tokenize, 'open', open)(file).read().replace('\\r\\n', '\\n'), file, 'exec'))\" install --record /tmp/pip-ySwOLv-record/install-record.txt --single-version-externally-managed --compile:\n    Running from numpy source directory.\n    non-existing path in 'numpy/distutils': 'site.cfg'\n    non-existing path in 'numpy/f2py': 'docs'\n    non-existing path in 'numpy/f2py': 'f2py.1'\n    F2PY Version 2\n    blas_opt_info:\n    blas_mkl_info:\n      libraries mkl,vml,guide not found in ['/bio/linuxbrew/Cellar/python/2.7.10/lib', '/usr/local/lib64', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/']\n      NOT AVAILABLE\nopenblas_info:\n  FOUND:\n    libraries = ['openblas']\n    library_dirs = ['/usr/lib64']\n    language = f77\n\n  FOUND:\n    libraries = ['openblas']\n    library_dirs = ['/usr/lib64']\n    language = f77\n\nnon-existing path in 'numpy/lib': 'benchmarks'\nlapack_opt_info:\nopenblas_lapack_info:\nC compiler: cc\n\n\n  File \"numpy/core/setup.py\", line 432, in generate_config_h\n    moredefs, ignored = cocache.check_types(config_cmd, ext, build_dir)\n  File \"numpy/core/setup.py\", line 42, in check_types\n    out = check_types(*a, **kw)\n  File \"numpy/core/setup.py\", line 293, in check_types\n    \"Cannot compile 'Python.h'. Perhaps you need to \"\\\nSystemError: Cannot compile 'Python.h'. Perhaps you need to install python-dev|python-devel.\n\n```\n. I'm not sure if this should be reported to homebrew rather than linuxbrew. Do you have a Mac you can test it on?\n. Happy to help where I can.  We look forward to your return in 21 years time ;-)\n. Have you considered how splitting off Linuxbrew would affect the other taps?\nHomebrew-science for example is heavily Linux based, and most of my time is spent (possibly wasted) on getting formulae to build on OS X, as most of the development is Linux based. The \nBut perhaps once again this is desirable, as those taps are not core system packages.\n. @DomT4 Is that extensive consideration publicly viewable? I don't mind if it isn't, I was just interested in what was topics were covered, and what conclusions you came to. \"Extensively\" doesn't tell us much :)\n. I just encountered this problem on 3.2.4, so i'm bumping @sjackman !\n. @DomT4 we need a new issue category called Shaun_Vacation :-) @sjackman \n. Yes, Shaun has a large burden. I spend more time than I should on Homebrew, and it's mainly formulae for science. I am not a ruby native and I don't really understand the internals of Brew, and I struggle with the conflicts with the OS X maintainers who don't really want Linuxbrew co-existing. It's tempting to jump ship to something like https://bioconda.github.io/ but I just don't feel it is as mature.\n. There was another pull request for the update to libpng. I merged it and tested it and it seems fine. But i'm worried i was a bit premature and didn't notice this thread until now. How do I know if i've broken everything? @DomT4 \n. @DomT4 Thanks for clarifying. I understand now that @danabrand is merging upstream brew. I don't envy that job - my recent brew update -v has scrolled pages up my terminal. Lots of stuff going on.\n. There seems to be a problem with harfbuzz dependency when I try to update this....\n. @danabrand I was compiling with with-librsvg as I need SVG support to convert SVG to PNG. But if it works in the regular case, I would push it urgently, as, like with libpng, they have removed the .xz file of the version currently in Brew (so annoying!).\n. @iggyvolz Maybe not a physical RAM issue but running on a cluster with RAM quota or similar?\n. @LeeBergstrand can you brew install zlib and try again?  It may be missing a dependency on Linux.\n. The tarball no longer exists, the formula needs to be updated to 4.05 version from https://archives.eyrie.org/software/perl/ \nI am working on a pull request.\n@sjackman \n1. Should this be fixed in main Brew?\n2. is there a \"Label\" I should use for when the upstream tar.gz is no longer available?\n. A version number is required either in the .tar name (where it is auto detected), or as a version tag in the formula.   So when something updates, some work has to be done somewhere either way. The real issue is that the provider is deleting previous versions of the tar file when adding the new ones :-(\n. Ihave an archived version of it, and the build fails anyway for me:\n```\nperl\nMakefile.PL\nPREFIX=/bio/linuxbrew/Cellar/pod2man/4.04\nINSTALLSCRIPT=/bio/linuxbrew/Cellar/pod2man/4.04/bin\nINSTALLMAN1DIR=/bio/linuxbrew/Cellar/pod2man/4.04/share/man/man1\nINSTALLMAN3DIR=/bio/linuxbrew/Cellar/pod2man/4.04/share/man/man3\nOnly one of PREFIX or INSTALL_BASE can be given.  Not both.\n```\nProbably I have a newer version of the Maker module that comes with OS X ... \n. @vol7ron Can you try this?\nbrew upgrade https://raw.githubusercontent.com/Linuxbrew/linuxbrew/podlators-4.05/Library/Formula/pod2man.rb\n. Shouldn't that pull request be too main Homebrew rather than Linuxbrew?\nThe formula already has lots of other OS.mac? type bits.\nOr are they not accepting those anymore?\nI'm not really clear on the policy/fallout of the split.\n. Building R without cairo or X11 would mean no graphical output? which is it's main use case here.\nI've hit another brick wall:\n```\nbrew reinstall cairo --with-x11\n==> Reinstalling cairo with --with-x11\n==> Downloading http://cairographics.org/releases/cairo-1.14.6.tar.xz\nAlready downloaded: /home/tseemann/.cache/Homebrew/cairo-1.14.6.tar.xz\n==> ./configure --prefix=/bio/linuxbrew/Cellar/cairo/1.14.6_1 --enable-gobject=yes --enable-svg=yes --enable-tee=yes -\nLast 15 lines from /home/tseemann/.cache/Homebrew/Logs/cairo/01.configure:\nchecking for X11/extensions/shmproto.h... yes\nchecking for X11/extensions/shmstr.h... yes\nchecking whether cairo's Xlib surface backend feature could be enabled... yes\nchecking for cairo's Xlib Xrender surface backend feature...\nchecking for xlib_xrender... no\nchecking for X11/extensions/Xrender.h... yes\nchecking for XRenderCreateSolidFill... yes\nchecking for XRenderCreateLinearGradient... yes\nchecking for XRenderCreateRadialGradient... yes\nchecking for XRenderCreateConicalGradient... yes\nchecking whether cairo's Xlib Xrender surface backend feature could be enabled... yes\nchecking for cairo's XCB surface backend feature...\nchecking for xcb... no\nchecking whether cairo's XCB surface backend feature could be enabled... no (requires xcb >= 1.6 xcb-render >= 1.6 http://xcb.freedesktop.org)\nconfigure: error:  XCB surface backend feature could not be enabled\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nharbour formula can't find \"cairo.h\" using --with-x11 option https://github.com/Homebrew/homebrew/issues/48341\n```\nI thought I had all the xcb packages installed:\n% rpm -qa | grep xcb\ncompat-libxcb-1.9-1.el7.x86_64\nxcb-util-image-0.4.0-2.el7.x86_64\nxcb-util-cursor-devel-0.1.2-2.el7.x86_64\nxcb-util-image-devel-0.4.0-2.el7.x86_64\nxcb-util-wm-0.4.1-5.el7.x86_64\nxcb-util-renderutil-devel-0.3.9-3.el7.x86_64\nxcb-proto-1.11-1.el7.noarch\nxcb-util-0.4.0-2.el7.x86_64\nlibxcb-1.11-4.el7.x86_64\nxcb-util-wm-devel-0.4.1-5.el7.x86_64\nxcb-util-devel-0.4.0-2.el7.x86_64\nlibxcb-devel-1.11-4.el7.x86_64\nxcb-util-cursor-0.1.2-2.el7.x86_64\nxcb-util-renderutil-0.3.9-3.el7.x86_64\nxcb-util-keysyms-devel-0.4.0-1.el7.x86_64\nxcb-util-keysyms-0.4.0-1.el7.x86_64\nlibxcb-doc-1.11-4.el7.noarch\n. @sjackman - well that installed! But now I have the not-executable bug: https://github.com/Linuxbrew/linuxbrew/issues/614\n. Welcome Bob! @rwhogg \n. @sjackman I do have linuxbrew/xorg/xorg installed and qt5 just failed to build with brew gcc-5.3 on RHEL7:\nGist logs here:  https://gist.github.com/34a4fb8c98286095781fd2fb37b5c430\nError:\n==> ./configure -verbose -prefix /bio/linuxbrew/Cellar/qt5/5.6.0 -release -opensource -confirm-license -system-zli\n==> make\nLast 15 lines from /home/tseemann/.cache/Homebrew/Logs/qt5/02.make:\n.obj/moc_qsignaltransition.o:moc_qsignaltransition.cpp:function QSignalTransition::qt_static_metacall(QObject*, QMetaObject::Call, int, void**): error: unsupported reloc 42\n.obj/moc_qsignaltransition.o:moc_qsignaltransition.cpp:function QSignalTransition::qt_static_metacall(QObject*, QMetaObject::Call, int, void**): error: unsupported reloc 42\n.obj/moc_qeventtransition.o:moc_qeventtransition.cpp:function QEventTransition::metaObject() const: error: unsupported reloc 42\ncollect2: error: ld returned 1 exit status\nMakefile:1184: recipe for target '../../lib/libQt5Core.so.5.6.0' failed\nmake[3]: *** [../../lib/libQt5Core.so.5.6.0] Error 1\nmake[3]: Leaving directory '/tmp/qt520160330-54455-hp38p9/qt-everywhere-opensource-src-5.6.0/qtbase/src/corelib'\nMakefile:137: recipe for target 'sub-corelib-make_first' failed\nmake[2]: *** [sub-corelib-make_first] Error 2\nmake[2]: Leaving directory '/tmp/qt520160330-54455-hp38p9/qt-everywhere-opensource-src-5.6.0/qtbase/src'\nMakefile:45: recipe for target 'sub-src-make_first' failed\nmake[1]: *** [sub-src-make_first] Error 2\nmake[1]: Leaving directory '/tmp/qt520160330-54455-hp38p9/qt-everywhere-opensource-src-5.6.0/qtbase'\nMakefile:72: recipe for target 'module-qtbase-make_first' failed\nmake: *** [module-qtbase-make_first] Error 2\n. I do have binutils installed - no idea why. I assumed it was a dependency of something?\nSo I unlinked it, and now I get a new error:\nLast 15 lines from /home/tseemann/.cache/Homebrew/Logs/qt5/01.configure:\n                       ^\nxcb-xkb.cpp:49:9: warning: unused variable 'xcbAtomPrimary' [-Wunused-variable]\n     int xcbAtomPrimary = XCB_ATOM_PRIMARY;\n         ^\ng++ -Wl,-O1 -o xcb-xkb xcb-xkb.o   -L/bio/linuxbrew/Cellar/libxcb/1.11.1/lib -lxcb -lxcb-xkb\nxcb-xkb enabled.\nxcb-syslibs auto-detection... ()\ng++ -c -pipe -O2 -Wall -W -fPIC  -I. -I../../../mkspecs/linux-g++ -o xcb.o xcb.cpp\nxcb.cpp:38:27: fatal error: xcb/xcb_icccm.h: No such file or directory\ncompilation terminated.\ngmake: *** [xcb.o] Error 1\nxcb-syslibs disabled.\nThe test for linking against libxcb and support libraries failed!\n You might need to install dependency packages, or pass -qt-xcb.\n See src/plugins/platforms/xcb/README.\n. find /bio/linuxbrew -name xcb_icccm.h returns nothing :(\nAnd here's the xcb folder:\n```\nls /bio/linuxbrew/Cellar/libxcb/1.11.1/include/xcb\nbigreq.h     dri2.h     randr.h   screensaver.h  xc_misc.h  xf86dri.h   xkb.h       xtest.h\ncomposite.h  dri3.h     record.h  shape.h        xcb.h      xfixes.h    xprint.h    xv.h\ndamage.h     glx.h      render.h  shm.h          xcbext.h   xinerama.h  xproto.h    xvmc.h\ndpms.h       present.h  res.h     sync.h         xevie.h    xinput.h    xselinux.h\n``\n. I didbrew install xcb-util-wm` and get a new error:\nxcb.cpp:42:27: fatal error: xcb/xcb_image.h: No such file or directory`\nSo I brew install linuxbrew/xorg/xcb-util-image and get a new error:\nxcb.cpp:43:29: fatal error: xcb/xcb_keysyms.h: No such file or directory`\nThen brew install linuxbrew/xorg/xcb-util-keysyms and get a Qt error:\nLast 15 lines from /home/tseemann/.cache/Homebrew/Logs/qt5/02.make:\n.obj/moc_qsignaltransition.o:moc_qsignaltransition.cpp:function QSignalTransition::qt_static_metacall(QObject*, QMetaObject::Call, int, void**): error: unsupported reloc 42\n.obj/moc_qsignaltransition.o:moc_qsignaltransition.cpp:function QSignalTransition::qt_static_metacall(QObject*, QMetaObject::Call, int, void**): error: unsupported reloc 42\n.obj/moc_qeventtransition.o:moc_qeventtransition.cpp:function QEventTransition::metaObject() const: error: unsupported reloc 42\ncollect2: error: ld returned 1 exit status\nMakefile:1184: recipe for target '../../lib/libQt5Core.so.5.6.0' failed\nmake[3]: *** [../../lib/libQt5Core.so.5.6.0] Error 1\nmake[3]: Leaving directory '/tmp/qt520160401-47006-hofnxp/qt-everywhere-opensource-src-5.6.0/qtbase/src/corelib'\nMakefile:137: recipe for target 'sub-corelib-make_first' failed\nmake[2]: *** [sub-corelib-make_first] Error 2\nmake[2]: Leaving directory '/tmp/qt520160401-47006-hofnxp/qt-everywhere-opensource-src 5.6.0/qtbase/src'\nMakefile:45: recipe for target 'sub-src-make_first' failed\nmake[1]: *** [sub-src-make_first] Error 2\nmake[1]: Leaving directory '/tmp/qt520160401-47006-hofnxp/qt-everywhere-opensource-src-5.6.0/qtbase'\nMakefile:72: recipe for target 'module-qtbase-make_first' failed\nmake: *** [module-qtbase-make_first] Error 2\nThe \"reloc 42\" issue is a linking issue, I am using brew binutils and brew gcc-5.3.\nHere are my gist-logs: https://gist.github.com/1542fb74473d12752d41741c45682d22\n. I built it on RHEL 7 ok, but I also recently rebuilt cairo --with-x11 after installing xorg.\nBuild: xz \u2714, pkg-config \u2714\nRequired: cairo \u2714, gdk-pixbuf \u2714, glib \u2714, libcroco \u2714, pango \u2714\nOptional: gtk+3 \u2718, libgsf \u2718\n. Thanks @DoomHammer !\nIs that env var needed permanently, or just for the build?\n. My brew is on an NFS mount (shared across nodes). \nThere does seem to be a bit of noise of flock() problems on Ruby over NFS on modern Centos:\neg. https://github.com/rubygems/rubygems/issues/806\nI'll remove all the files and see what happens.\n. Put them in your $HOME/.bash_profile file. Things in there will be run for every shell you start.\nIf you are in a multi-user system you can put them in a file called /etc/profile.d/linuxbrew.sh and they will be run anytime a BASH shell is started.\nI'm not sure how to do it for ZSH, but i'm guessing there is files called $HOME/.zshrc etc.\n. Regarding needs :cxx11 unless OS.mac?\nIs there harm in having needs :cxx11 on OSX ?\n. :+1: : Yes this solves the problem - it now finds the correct gcc-5.\nAlthough the test works on the command line but fails in the test block too, with an error i've not seen before:\n```\nbrew test ./sdsl-lite.rb\nTesting sdsl-lite\n==> /bio/linuxbrew/bin/g++-5 -std=c++11 -o fm-index -I/bio/linuxbrew/opt/sdsl-lite/include /bio/linuxbrew/Cellar/sdsl-lite/2.0.3/share/sdsl-lite/examples/fm-index.cpp -L/bio/linu\nLast 15 lines from /home/tseemann/.cache/Homebrew/Logs/sdsl-lite/01.g++-5:\n2016-04-05 12:30:15 +1000\n/bio/linuxbrew/bin/g++-5 -std=c++11\n-o\nfm-index\n-I/bio/linuxbrew/opt/sdsl-lite/include\n/bio/linuxbrew/Cellar/sdsl-lite/2.0.3/share/sdsl-lite/examples/fm-index.cpp\n-L/bio/linuxbrew/opt/sdsl-lite/lib\n-lsdsl\n-ldivsufsort\n-ldivsufsort64\nError: sdsl-lite: failed\nFailed executing: /bio/linuxbrew/bin/g++-5 -std=c++11 -o fm-index -I/bio/linuxbrew/opt/sdsl-lite/include /bio/linuxbrew/Cellar/sdsl-lite/2.0.3/share/sdsl-lite/examples/fm-index.cpp -L/bio/linuxbrew/opt/sdsl-lite/lib -lsdsl -ldivsufsort -ldivsufsort64\n/bio/linuxbrew/Library/Homebrew/formula.rb:1484:in block in system'\n/bio/linuxbrew/Library/Homebrew/formula.rb:1421:inopen'\n/bio/linuxbrew/Library/Homebrew/formula.rb:1421:in system'\n/home/tseemann/git/homebrew-science/sdsl-lite.rb:28:inblock in '\n/bio/linuxbrew/Library/Homebrew/formula.rb:1330:in block in run_test'\n/bio/linuxbrew/Library/Homebrew/extend/fileutils.rb:37:inmktemp'\n/bio/linuxbrew/Library/Homebrew/formula.rb:1326:in run_test'\n/bio/linuxbrew/Library/Homebrew/test.rb:32:inblock in '\n/bio/linuxbrew/Cellar/ruby/2.3.0/lib/ruby/2.3.0/timeout.rb:91:in block in timeout'\n/bio/linuxbrew/Cellar/ruby/2.3.0/lib/ruby/2.3.0/timeout.rb:33:inblock in catch'\n/bio/linuxbrew/Cellar/ruby/2.3.0/lib/ruby/2.3.0/timeout.rb:33:in catch'\n/bio/linuxbrew/Cellar/ruby/2.3.0/lib/ruby/2.3.0/timeout.rb:33:incatch'\n/bio/linuxbrew/Cellar/ruby/2.3.0/lib/ruby/2.3.0/timeout.rb:106:in timeout'\n/bio/linuxbrew/Library/Homebrew/test.rb:31:in'\n```\n. Perl installs a bunch of \"Core\" modules, but these change with each version of Perl.\nI'm assuming OSX has the set of core modules for the version it has installed, plus some extras perhaps?\nMy laptop has gone through 4 version of OSX via upgrades and I don't think I've ever used CPAN to install any Perl modules on it. Here's what folders I have:\nls /Library/Perl/\n5.16    5.18    Updates\nHow would we go about finding a list of the modules in a virgin OSX install?\nIf you have a fresh OSX image I think cpan -l will do it.\n. I can build it on RHEL 7 but I think you are correct in that it has a missing ncurses dependency.\n% ldd /bio/linuxbrew/bin/tmux\n        libncursesw.so.6 => /bio/linuxbrew/lib/libncursesw.so.6 (0x00007fe53b0d6000)\nI do have homebrew/dupes/ncurses installed.\nIf you have the RPMs for ncurses-libs and ncurses-devel it might use those too.\nI think ncurses is one of those packages that is guaranteed to come with OSX but needs special rule for Linux, like zsh does:\ndepends_on \"homebrew/dupes/ncurses\" unless OS.mac?\n. @alekseysidorov this site may be helpful: https://wiki.gentoo.org/wiki/Safe_CFLAGS\n@sjackman I thought -march=native will auto-detect your CPU and even choose appropriate SSE/AVX flags?\n@sjackman I've just discovered I can use -march=core-avx2 for my Haswell Xeons. Are there any env vars we can set that affect ENV.std ?\n. I always wondered if Linuxbrew could make \"virtual\" installations into the Cellar by symlinking to an installed system package by querying the rpm/deb. ie. \"mirror an RPM into the Cellar\"\n. @sjackman @rwhogg We should probably check $SHELL to tell people which dotfile to add the PATH stuff to ?\n. @sjackman pretty much, maybe $HOME/.$(basename ${SHELL:-bash})rc for safety in case $SHELL was undefined... is ~ guaranteed to work in all shells?\n. On RHEL/Centos that libX11.so doesn't exist - it is in /usr/lib64/libX11.so\n. ",
    "wenerme": "After ls, I can install hello, but test not good\n```\nbrew -v test hello\nHomebrew 0.9.5\nError: cannot load such file -- minitest/unit\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:inrequire'\n/usr/share/ruby/test/unit/assertions.rb:1:in <top (required)>'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:inrequire'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in require'\n/home/wener/.linuxbrew/Library/Homebrew/formula_assertions.rb:7:inrescue in '\n/home/wener/.linuxbrew/Library/Homebrew/formula_assertions.rb:4:in <module:Assertions>'\n/home/wener/.linuxbrew/Library/Homebrew/formula_assertions.rb:2:in'\n/home/wener/.linuxbrew/Library/Homebrew/formula_assertions.rb:1:in <top (required)>'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:inrequire'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in require'\n/home/wener/.linuxbrew/Library/Homebrew/cmd/test.rb:2:in'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:inrequire'\n/home/wener/.linuxbrew/Library/brew.rb:58:in require?'\n/home/wener/.linuxbrew/Library/brew.rb:122:in'\n.\nruby --version\nruby 2.0.0p598 (2014-11-13) [x86_64-linux]\n```\n. Thanks @tseemann , the test pass now \n. ",
    "architectcodes": "https://github.com/Homebrew/linuxbrew/issues/137#issuecomment-57353932 fails for me with gcc 5.1 \u2013 brew doesn\u2019t seem to recognize the gcc-5.1 symlink as gcc:\n$ brew install gcc\n==> Installing dependencies for gcc: gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: gmp\nError: gmp cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\nHere\u2019s what seems to do the job \u2013 but I can\u2019t help feeling it\u2019s a hack:\n$ ln -s $(which gcc) ~/.linuxbrew/bin/gcc-4.4\n$ ln -s $(which g++) ~/.linuxbrew/bin/g++-4.4\n$ brew install gcc g++\nIt needs time to compile \u2013 I\u2019ll let you know as soon as I know the results.\n. Hmm, that\u2019s a nope:\n``` sh\n==> Installing gcc\n\u2026\n==> make bootstrap\nMakefile:20663: recipe for target 'stage3-bubble' failed\nmake[1]:  [stage3-bubble] Error 2\nmake[1]: Leaving directory '/tmp/gcc20150620-26406-gm4c73/gcc-5.1.0/build'\nMakefile:20726: recipe for target 'bootstrap' failed\nmake:  [bootstrap] Error 2\nREAD THIS:\n\u2026\n``\n. I\u2019ve duly triedbrew install gcc`, but it results in this mind-boggling M\u00f6bius strip-like message:\n$ brew install gcc\nError: gcc cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\nI\u2019ve also tried anything suggested in https://github.com/Homebrew/linuxbrew/issues/137 and even followed this way further (https://github.com/Homebrew/linuxbrew/issues/137#issuecomment-113755195 https://github.com/Homebrew/linuxbrew/issues/137#issuecomment-113759941) \u2013 all without luck.\n. Hi, sorry it took so long \u2013 I had to switch my laptop and today\u2019s the first time I had some time to test it out again. Here\u2019s what I get, doing what you said step by step:\n``` sh\n$ which -a gcc\n/usr/bin/gcc\n/bin/gcc\n$ gcc --version\ngcc (GCC) 5.1.1 20150618 (Red Hat 5.1.1-4)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n$ ln -s $(which gcc) $(brew --prefix)/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\n$ ln -s $(which g++) $(brew --prefix)/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\n$ brew install ghc\n==> Installing ghc dependency: xz\nError: xz cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n```\n. Alright, this looks a bit better, but still not quite successful:\nsh\n$ ln -s /usr/bin/gcc ~/.linuxbrew/bin/gcc-5\nAfter running that things seem to go smoothly at first:\n``` sh\n$ brew install ghc\n==> Installing ghc dependency: xz\n==> Downloading https://fossies.org/linux/misc/xz-5.2.1.tar.gz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/home/tomekwi/.linuxbrew/Cellar/xz/5.2.1\n==> make install\n==> Caveats\n==> Summary\n/home/tomekwi/.linuxbrew/Cellar/xz/5.2.1: 65 files, 1.9M, built in 16 seconds\n==> Installing ghc\n==> Downloading https://downloads.haskell.org/~ghc/7.10.1/ghc-7.10.1-src.tar.xz\n################################################################## 100.0%\n==> Downloading http://ftpmirror.gnu.org/gmp/gmp-6.0.0a.tar.bz2\n==> Downloading from http://mirror.yannic-bonenberger.com/gnu/gmp/gmp-6.0.0a.tar.bz2\n################################################################## 100.0%\n==> ./configure --prefix=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp --with-pic --disable-shared\n==> make\n==> make check\n==> make install\n==> Downloading http://downloads.haskell.org/~ghc/7.6.3/ghc-7.6.3-x86_64-unknown-linux.tar.bz2\n################################################################## 100.0%^[[F\n==> ./configure --prefix=/tmp/ghc20150716-16342-wn2d66/ghc-7.10.1/binary --with-gmp-includes=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp/include --with-gmp-libraries=/ho\n--with-gcc=/home/tomekwi/.linuxbrew/bin/gcc-5\nconfigure: WARNING: unrecognized options: --with-ld, --with-hs-cpp-flags\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nghc formula can't be used as a stage0 compiler for GHC itself (https://github.com/Homebrew/homebrew/issues/41777)\nghc failed to build in 10.8.5 (https://github.com/Homebrew/homebrew/issues/32557)                                                                                                                                                                                            \n```\nCan it be that gcc v5.1.1 isn\u2019t compatible with linuxbrew?\n. Same thing :(\n``` sh\n$ brew install gmp ghc\nWarning: gmp-6.0.0a already installed\n==> Downloading https://downloads.haskell.org/~ghc/7.10.1/ghc-7.10.1-src.tar.xz\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc-7.10.1.tar.xz\n==> Downloading http://ftpmirror.gnu.org/gmp/gmp-6.0.0a.tar.bz2\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc--gmp-6.0.0a.tar.bz2\n==> ./configure --prefix=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp --with-pic --disable-shared\n==> make\n==> make check\n==> make install\n==> Downloading http://downloads.haskell.org/~ghc/7.6.3/ghc-7.6.3-x86_64-unknown-linux.tar.bz2\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc--binary-7.6.3.tar.bz2\n==> ./configure --prefix=/tmp/ghc20150716-32129-9j87z9/ghc-7.10.1/binary --with-gmp-includes=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp/include --with-gmp-libraries=/ho\n--with-gcc=/home/tomekwi/.linuxbrew/bin/gcc-5\nconfigure: WARNING: unrecognized options: --with-ld, --with-hs-cpp-flags\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nghc formula can't be used as a stage0 compiler for GHC itself (https://github.com/Homebrew/homebrew/issues/41777)\nghc failed to build in 10.8.5 (https://github.com/Homebrew/homebrew/issues/32557)\n.\n$ brew list gmp\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/include/ (2 files)\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/ (8 files)\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/share/info/ (3 files)\n.\n$ brew list -v gmp\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/README\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/include/gmp.h\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/include/gmpxx.h\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/ChangeLog\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/COPYING\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/AUTHORS\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/INSTALL_RECEIPT.json\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/share/info/gmp.info\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/share/info/gmp.info-1\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/share/info/gmp.info-2\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/NEWS\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmpxx.so\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so.10\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.a\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmpxx.a\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmpxx.so.4.4.0\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmpxx.so.4\n/home/tomekwi/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so.10.2.0\n```\n. Alas :(\nbash\n$ ln -s $HOME/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so.10 $(brew --prefix)/lib\nln: failed to create symbolic link \u2018/home/tomekwi/.linuxbrew/lib/libgmp.so.10\u2019: File exists\n. @sjackman shouldn\u2019t this issue be reopened? None of the solutions has worked for me so far :(\n. > ln: failed to create symbolic link \u2018/home/tomekwi/.linuxbrew/lib/libgmp.so.10\u2019: File exists\nIt looks like libgmp.so.10 is already installed. I\u2019ll try to force-overwrite when I\u2019m back home.\n. >  I\u2019ll try to force-overwrite when I\u2019m back home.\nStill looks similar:\n```\n$ mv $(brew --prefix)/lib/libgmp.so.10 $(brew --prefix)/lib/libgmp.so.10.backup\n$ ln -s $HOME/.linuxbrew/Cellar/gmp/6.0.0a/lib/libgmp.so.10 $(brew --prefix)/lib\n$ brew install ghc\n==> Downloading https://downloads.haskell.org/~ghc/7.10.1/ghc-7.10.1-src.tar.xz\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc-7.10.1.tar.xz\n==> Downloading http://ftpmirror.gnu.org/gmp/gmp-6.0.0a.tar.bz2\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc--gmp-6.0.0a.tar.bz2\n==> ./configure --prefix=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp --with-pic --disable-shared\n==> make\n==> make check\n==> make install\n==> Downloading http://downloads.haskell.org/~ghc/7.6.3/ghc-7.6.3-x86_64-unknown-linux.tar.bz2\nAlready downloaded: /home/tomekwi/.cache/Homebrew/ghc--binary-7.6.3.tar.bz2\n==> ./configure --prefix=/tmp/ghc20150722-31184-4dmj0v/ghc-7.10.1/binary --with-gmp-includes=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp/include --with-gmp-libraries=/ho\n--with-gcc=/home/tomekwi/.linuxbrew/bin/gcc-5\nconfigure: WARNING: unrecognized options: --with-ld, --with-hs-cpp-flags\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\n```\nThis is interesting: shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory. I can\u2019t find a libgmp.so.3 in the output of brew list -v gmp though.\n. Still, same warning here:\n```\n$ cd $(brew --prefix)/lib\n$ ln -s libgmp.so.10 libgmp.so.3\n$ brew install ghc\n...\n==> ./configure --prefix=/tmp/ghc20150723-13271-m7q4tt/ghc-7.10.1/binary --with-gmp-includes=/home/tomekwi/.linuxbrew/Cellar/ghc/7.10.1_1/libexec/integer-gmp/include --with-gmp-libraries=/ho\n--with-gcc=/home/tomekwi/.linuxbrew/bin/gcc-5\nconfigure: WARNING: unrecognized options: --with-ld, --with-hs-cpp-flags\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\n```\n. > Try brew install patchelf ghc\nThis was a quick shot:\n```\n$ brew install patchelf ghc\n==> Downloading http://nixos.org/releases/patchelf/patchelf-0.8/patchelf-0.8.tar.bz2\n################################################################## 100.0%\n==> ./configure --prefix=/home/tomekwi/.linuxbrew/Cellar/patchelf/0.8  CXXFLAGS=-static-libgcc -static-libstdc++ --disable-silent-rules\n==> make install\nMakefile:253: recipe for target 'patchelf' failed\nmake[1]:  [patchelf] Error 1\nmake[1]: Leaving directory '/tmp/patchelf20150723-23410-nqz1q0/patchelf-0.8/src'\nMakefile:365: recipe for target 'install-recursive' failed\nmake:  [install-recursive] Error 1\n``\n. TheLD_LIBRARY_PATH` solution results in the same error as before \u2013 this one:\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory\n. $ brew gist-logs patchelf\nhttps://gist.github.com/6f2a8736d8055f85d8ab\n. I did install that before.\n$ sudo dnf groupinstall 'Development Tools'\n[sudo] password for tomekwi: \nLast metadata expiration check performed 0:04:13 ago on Fri Jul 24 22:41:37 2015.\nGroup 'Development Tools' is already installed, skipping.\nDependencies resolved.\nNothing to do.\nComplete!\n. All other dependencies are there as well.\nBTW, dnf is the new package manager since Fedora 22\n. $ ls /usr/lib{,64}/libstdc++.so*\n/usr/lib64/libstdc++.so.6@  /usr/lib64/libstdc++.so.6.0.21*\n. ``` sh\n$ brew install gcc\n...\n==> ../configure --prefix=/home/tomekwi/.linuxbrew/Cellar/gcc/5.1.0  --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-5 --with-gmp=/home/tomekwi/.linuxbrew/opt/gmp --with-mpfr\n==> make bootstrap\nMakefile:20663: recipe for target 'stage3-bubble' failed\nmake[1]:  [stage3-bubble] Error 2\nmake[1]: Leaving directory '/tmp/gcc20150725-9247-1hpmk4k/gcc-5.1.0/build'\nMakefile:20726: recipe for target 'bootstrap' failed\nmake:  [bootstrap] Error 2\n```\n. ",
    "DoomHammer": "Try perhaps ln -s $(which gcc) ~/.linuxbrew/bin/gcc-5 and ln -s $(which g++) ~/.linuxbrew/bin/g++-5\n. Are those bottles usable in master Linuxbrew? When I try to install one of them specyfing full path, brew still tries to build it from source (the package, not dependencies).\n. OK. I got it now. But it means that you still need to have some kind of usable CC in order to build glibc first, right? I have a system that both lacks compiler and package management (Gentoo sans Portage to be exact) and I wanted to (ab)use Linuxbrew to install on-demand software there.\n. I tried more hackish approach.\n1. I exported ~linuxbrew/.linuxbrew from sjackman/docker-standalone.\n2. On a Vagrant guest I ran LD_LIBRARY_PATH=/vagrant/.linuxbrew/lib /vagrant/.linuxbrew/opt/glibc/lib/ld-2.19.so /vagrant/.linuxbrew/opt/patchelf/bin/patchelf --set-interpreter /vagrant/.linuxbrew/opt/glibc/lib/ld-2.19.so --set-rpath /vagrant/.linuxbrew/lib /vagrant/.linuxbrew/opt/patchelf/bin/patchelf. This gave me usable patchelf.\n3. In a more than silly approach I tried to change RPATH and interpreter of whatever binary I could find: find /vagrant/.linuxbrew -type f -executable|while read binary; do /vagrant/.linuxbrew/opt/patchelf/bin/patchelf --set-interpreter /vagrant/.linuxbrew/opt/glibc/lib/ld-2.19.so --set-rpath /vagrant\n/.linuxbrew/lib \"$binary\"; done. This gave me usable ruby (sort of).\n4. Trying to run (export PATH=/vagrant/.linuxbrew/bin; /vagrant/.linuxbrew/bin/brew --help) results (as ruby isn't reconfigured for the new system) in:\n<internal:gem_prelude>:1:in `require': cannot load such file -- rubygems.rb (LoadError)\n        from <internal:gem_prelude>:1:in `<compiled>'\nIs it at all possible for me to reuse linuxbrew-standalone in another directory?\n. I am still not quite comfortable with all the new terminology. I understand this means that ruby can't be installed from a bottle?\n. I should then try to substitute the brewed ruby with Travelling Ruby. Maybe this will allow me to port the whole deal to \"pristine\" box.\n. @aportelli @wreed4 Did the mentioned PR help?\n. Here are the logs: https://gist.github.com/anonymous/4a1a3a811617708cdbea\n. Terribly sorry. It was late and I was tired. Here are the correct ones: https://gist.github.com/anonymous/8382193e9ec614a073f5\n. Actually, I think I have closed this by mistake.\n. Any comments for the updated version?\n. @sjackman I think I might have underestimated Ruby. Though my code is obviously a beginner's work, I see the power of the language in such simple yet verbose constructions :)\n. Unfortunately this won't go. Lines are inserted in their full glory with space at the beginning and \\n at the end. I have no idea how to strip them. Have you?\n. Splendid!\n. You mean rebasing top of branch on top of master, right?\n. Sure thing. Will wait for feedback of other interested parties.\n. Haven't tried it with GCC 5.2. Will update my env and give it a try.\n. Managed to get past it, but failed on make install so hacking on.\n. Nailed it! Try it now, it works on Docker image.\n. What configuration are you running this on? I tried on sjackman/linuxbrew. I suppose some installed system libraries may be getting in the way of compilation, but would like to be able to reproduce it locally.\n. And thanks to you as I have learned much about both compiling LLVM and Ruby while working on this :)\n. ~~So you suggest patching those packages that use zipped resources for dependencies?~~\nEDIT: forget what I just wrote, I have missed the attachment :)\n. That would almost work except for the fact that homebrew/dupes/unzip is needed. Somehow during unzipping it can't find it still. Something with paths, I guess but will debug it later.\n. unzip installs successfully with dupes approach. However I got\n\nAlready downloaded: /home/linuxbrew/.cache/Homebrew/ninja--gtest-1.7.0.zip\n/home/linuxbrew/.linuxbrew/Library/Homebrew/debrew.rb:11:in `raise'\nErrorDuringExecution: Failure while executing: unzip -qq /home/linuxbrew/.cache/Homebrew/ninja--gtest-1.7.0.zip\n\nDebug shell shows that PATH is, in fact, /usr/bin:/bin I suppose this is on purpose. In download_strategy.rb there is a line:\nwith_system_path { quiet_safe_system 'unzip', {:quiet_flag => '-qq'}, cached_location }\nnot much of a comment though and blame goes back to the beginning.\nDo you think it should be changed for Linuxbrew?\n. Just created #436 with those changes.\n. It did work for me on Docker image. Strange.\n. homebrew/dupes/zlib should be the one you are looking for.\n. As a workaround you may brew install --debug libgcrypt and select ignore (2). It should install without problems.\n. Same here at https://travis-ci.org/DoomHammer/linuxbrew . Not sure about this git as it is installed. I guess it might have some library loading problem or maybe something's wrong with repository? Would give it further look later.\nStrange thing is, it builds locally under similar Docker pipeline.\n. OK, some success. Now it fails locally, too :)\n. OK. This one works albeit with a tiny hack. I had to manually apt-get install git since somewhere during test-bot run my linuxbrew repo is cleared and I have no software brewed whatsoever.\nAnybody have any idea how to properly fix this instead of working around?\n. Opened #601 to discuss my approach there.\n. This is the thing that confuses me, @sjackman . You say that linuxbrew-standalone should not have any dependencies on host system, but clearly you need GCC, Ruby and several other at the least.\nCould you specify a bit more clearly what is its purpose? From my understanding stadalone is meant to be used without further need for host toolchain, but it still needs it in order to bootstrap, right?\n. @ahundt I tried your script. One problem I see is that after running brew doctor I got:\nWarning: Broken symlinks were found. Remove them with `brew prune`:\n    /home/vagrant/.linuxbrew/lib/libgcc_s.so.1\n. One more thing, @sjackman: Do you intend Standalone Linuxbrew to have the same base packages as Mac OS X Homebrew (that is those provided by Apple) or merely just enough to start?\n. A look has been taken ;)\n. All suggested fixes in place.\n. You are right. Fixed it.\n. Fixed now. BTW: why is there a preference for unless OS.mac??\n. Pleasure on my side ;)\n. Similar to https://github.com/Homebrew/linuxbrew/pull/570 albeit with a better commit message ;)\n. OK. Rereading the source I see that pipefail is used which is a bashism. But is it necessary?\n. Testing it on Alpine to provide a more compact container.\n. With all the talk about leaving Homebrew organization maybe it is a good time to revisit those changes as Linuxbrew would definitely benefit from any kind of working CI?\n. I'll wait here, then :watch: \n. Let me know when you want to look at it, I'll rebase the changes then.\n. So, do you suggest using Ubuntu 12 as a base for Docker/Travis instead of current linuxbrew-standalone?\n. I have uploaded a new version. I guess all those if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ] are no longer necessary? Or do you plan to support OS X in the long term?\n. Also: I am not sure whether test-bot behaves correctly, since it tries to tap doomhammer/linuxbrew which in practice means doomhammer/homebrew-linuxbrew (which does not exist).\n. I am not familiar with brew internals. Could you point me what is the best way to start, since test-bot.rb is pretty big?\n. I believe I have found the problematic line, but I don't know the original authors idea. I believe @xu-cheng have added it.\nWhy is there if user == \"Homebrew\" && repo == \"homebrew\"? Doesn't it prevent Pull Requests from being tested (as they clearly have a different user, but the same repo name)?\n. After dealing with missing dependency on rake (by running brew install ruby) I have issues with brew tests as seen in https://travis-ci.org/DoomHammer/linuxbrew/builds/114097361. Any ideas what am I missing?\nMost interestging lines are:\n1) Failure:\nFormulaTests#test_eligible_kegs_for_cleanup [/home/linuxbrew/.linuxbrew/Library/Homebrew/test/test_formula.rb:365]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n [#<Keg:/tmp/homebrew_tests20160306-1572-kmxsq4/cellar/testball/0.2>,\n- #<Keg:/tmp/homebrew_tests20160306-1572-kmxsq4/cellar/testball/0.3>]\n+ #<Keg:/tmp/homebrew_tests20160306-1572-kmxsq4/cellar/testball/0.1>]\n. Running this locally I get slightly different error, but:\nKEGGIE: [#<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.3>, #<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.1>, #<Keg:/tmp/homebrew_tests20160307-1\n82-ykgdsq/cellar/testball/0.2>]\nthen\n1) Failure:\nFormulaTests#test_eligible_kegs_for_cleanup [/home/linuxbrew/.linuxbrew/Library/Homebrew/test/test_formula.rb:366]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n-[#<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.3>,\n- #<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.1>]\n+[#<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.1>,\n+ #<Keg:/tmp/homebrew_tests20160307-182-ykgdsq/cellar/testball/0.2>]\nAlso:\n2) Failure:\nIntegrationCommandTests#test_uses [/home/linuxbrew/.linuxbrew/Library/Homebrew/test/test_integration_cmds.rb:629]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n-\"testball1\n-testball2\"\n+\"testball2\n+testball1\"\n. Now the #895 is gone, Travis CI is passing. I understand it is better to wait for upstream to be merged rather than committing local changes? BTW: What is this ci/dockercloud thing?\n. Well, when I click \"Details\" I get 404 and I wanted to know what did I break (as it says \"Your tests failed in Docker Cloud\").\n. Ah, so I plead not guilty, then for Docker CI. As for the Travis, it just timed out. I made it re-run the tests, but they are at the edge of timing-out too. Building ruby is the most time-consuming thing here, but couldn't do it properly without it. One possible idea would be to have Docker image prebuilt with ruby.\n. The little guy is green now :)\n. Sorry to be bothering you, @sjackman, but are we go with this?\n. Ruby itself is not a problem. brew uses rake which is a separate package on Debian and somehow it didn't seem to be doing alright.\nAs for why Docker? Honestly, can't remember but this PR was a result of some discussion, IIRC. History says it was probably #528 .\nOne thing for certain: playing with Docker is more reproducible, so theoretically anybody can look at Travis error and then check it locally.\n. No idea about the Travis build machines but in my PR I am making use of linuxbrew/linuxbrew (same thing I usually do prior to reporting bug, as this image I consider 'sane' contrary to most of machines I work on).\n. Makes sense to me. Closing this then?\n. No problem. Not all ideas are good ones ;)\n. It was like that: tried installing libvirt but it failed being unable to find some headers (namely rpc/xdr.h and rpc/rpc.h). I looked up on packages.debian.org (as I usually do) and found them to belong to glibc. Its ChangeLog states the following:\n\nNew configure option --enable-obsolete-rpc makes the deprecated RPC\nheaders and functions available at compile time as they were before \nversion 2.14. This option will be removed at some time in the future \nafter the TI-RPC library becomes fully sufficient for the needs of \nexisting applications.\n. Is there something I can do to help?\n. I tested on ubuntu/trusty64 Vagrant image using the Ubuntu script. Tried to build linuxbrew-standalone Docker images but something broke around linuxbrew-gcc-deps (not related) and I surrendered and fell asleep. Will try again if this will help :)\n. Understood. BTW: it might also be a good time to update glibc version. New year, new glibc, new hopes.\n\nAnd quite off the main topic: to ensure better quality of Linuxbrew it might be worth considering some automation in this regard. Travis seems like an obvious choice in the beginning, but timeouts would kill us for anything complicated (think gcc). I remember reading somewhere that somebody offered hosting space for Jenkins use. Maybe this would help?\n. You may take a look at #601 where I ported some Travis CI code from both\nHomebrew and homebrew-science.\n. May try it when I find a bit of spare time :)\n. Tried to use Docker images but they are month old. Tried to generate my own then, but gcc-5.3.0 won't compile. Should I open new issue for it?\n. My problem is Linuxbrew-specific and deals with upgrading gcc. I believe I have seen it mentioned somewhere around here but not sure whether it have been already fixed?\n. The error was related to upgrading gcc and I believe has been addressed already somewhere else. I have packaged TI-RPC but since I don't have currently access to the mentioned system I couldn't test it.\nIf TI-RPC helps, we can close this issue.\n. I would have to get access to the system I was using back then. I am not sure when would this happen, but I will test it.\n. Ha, great, thanks :)\n. What can be done then? Bottling it?\n. Seems fair.\n. One question regarding PatchRequrement way: this will mean gpatch won't be installed when a system-wide patch is available. But isn't the current idea to have Linuxbrew as standalone as possible?\n. Ah, cool. I tried to implement it but was running into problems, so I like your current state of mind ;)\n. OK, I should try to find a solution, since the current mechanism uses names like mach_o_binary which do not belong to Linux(brew) world ;)\n. Seems no longer relevant for new qemu formula.\n. The original problem was with ELF binaries that were compiled for other platform, I believe (qemu has a few of them). But since I cannot reproduce it I consider it fixed.\n. Try brew install opam --cc=gcc\n. You may try brew install ghc --cc=gcc. As a long-term solution if you don't want to brew install gcc you can make symlinks from eg. gcc-4.9 to $(brew --prefix)/bin/gcc-4.9.\n. I believe this belongs here and is of not much value to Homebrew. @sjackman is travelling right now so might be pretty slow reviewing PRs.\n. Run brew install --debug vim and enter shell. Source config.log from there and look for the last error. It might actually not be in any way connected with ncurses after all. Strange are autotools' ways.\n. The idea is that Linuxbrew should be as close as possible to Homebrew and only add OS-specific things when needed and not alter the ones that do no harm.\nIt is true that such messages may exist, but simply replacing them is not a good option.\n. Running brew install cairo --with-x11 solves the issue. I do have, however linuxbrew/xorg/xorg installed locally.\n. BTW, are you aware of xdg-app? This has a broader scope, but I think it points in the right direction. With its approach we could have both a stable base system and recent applications (currently impossible on eg. Debian-based distros).\n. You should probably re-read the shell config file, eg. source ~/.bashrc if you use bash.\n. Disabled two, added one. Actually one should be disabled, one left intact and one added. Thanks!\n. I found this patch first in Debian package, so I believe it has been sent to upstream already.\n. Um, I only disabled one mac-specific patch. The other one I have added. It is necessary to compile under Linux :)\n. The patch is from a BSD distribution so I believe it has already been posted upstream.\n. After reading with understanding I have found that similar problem is visible in gnupg2. Shall I administer the same cure?\n. Seems like doing the trick. Thanks!\n. Same happens with zlib and probably all other curl deps.\n. Does \"Done\" mean that we will no longer experience similar issues? I got lost a bit.\n. Ah, thanks :)\n. Yes, I am using gcc that I also brewed (--with-glibc). Tried again after an update but still the problem persists.\nOn the side note: a friend of mine who prepares cross-compilation toolchains and distros also had a few bad words about Python ;)\nSorry about the gist.\n. EIther I posted a wrong gist or something funny is happening. Yesterday I tried installing Python I saw ~/.linuxbrew/bin/gcc-5.3 passing by.\n. It's even more ridiculous with python3:\n```\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/command/install.py\", line 551, in run\n    self.run_command(cmd_name)\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/cmd.py\", line 313, in run_command\n    self.distribution.run_command(command)\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/dist.py\", line 973, in run_command\n    cmd_obj.ensure_finalized()\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/cmd.py\", line 107, in ensure_finalized\n    self.finalize_options()\n  File \"/usr/lib/python2.7/dist-packages/setuptools/command/install_lib.py\", line 13, in finalize_options\n    self.set_undefined_options('install',('install_layout','install_layout'))\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/cmd.py\", line 290, in set_undefined_options\n    setattr(self, dst_option, getattr(src_cmd_obj, src_option))\n  File \"/home/doomhammer/.linuxbrew/Cellar/python3/3.5.1/lib/python3.5/distutils/cmd.py\", line 103, in getattr\n    raise AttributeError(attr)\nAttributeError: install_layout\n```\nWhat's /usr/lib/python2.7 doing there?\n. Exactly what I am trying to do :)\nBTW: is there an easy way to brew a package with debugging symbols?\n. Maybe my system was insane (or even I, myself), but after some brew install, brew uninstall cha-cha python seems to be a) working fine b) no trace of strange paths in sys.path. I think the best solution now is a glass of wine.\n. sjackman/linuxbrew Docker image with System Ruby: 2.3.0 => /home/linuxbrew/.linuxbrew/Cellar/ruby/2.3.0/bin/ruby\n. Confirmed!\n. I have been bitten by this before and haven't found a good workaround as yet.\nI would like to have a self-contained installation of Linuxbrew. Steps are following (illustrated here: https://github.com/DoomHammer/brewstrap/pull/7/files#diff-a4a8b02a861c11cadeebb2a3a5f799fcR55 ):\n1. Install essentials like gcc, binutils and make\n2. Install glibc\n3. Hopefully compile a new working glibc as bottled one is not relocatable. Actually, all brewed software ceases to work.\nI tried building glibc having other C runtime installed (like musl) but funny thing is glibc requires glibc to build.\nThis bug is essentially the last blocker to enabling a fully standalone, system-independent and prefix-independent Linuxbrew.\n. 35 formulae depend on Vala so could be potentially problematic. I see two of them having special treatment, though, libgweather and libsoup:\n```\nensures that the vala files remain within the keg\ninreplace \"libsoup/Makefile.in\", \"VAPIDIR = @VAPIDIR@\", \"VAPIDIR = @datadir@/vala/vapi\"\n```\n. Ok, just saw I was counting duplicates somehow. The list goes like this:\nanjuta.rb\nbaobab.rb\ngcab.rb\ngitg.rb\ngmime.rb\ngnome-builder.rb\ngspell.rb\ngxml.rb\nlibchamplain.rb\nlibgdata.rb\nlibgee.rb\nlibgit2-glib.rb\nlibgweather.rb\nliblunar.rb\nlibsecret.rb\nlibsoup.rb\nmsitools.rb\nradare2.rb\nsubmarine.rb\nvalabind.rb\nvala.rb\nvte3.rb\n. Tried to check those formulae on sjackman/linuxbrew but run into problem with python. Yak-shaving time, I presume.\n. I meant the Docker image :)\n. Just when I thought I am finally doing what the cool kids are doing it seems everybody has a new toy now. Too old for this, I think :(\nWill try it anyway and report my findings.\n. OK, results of my audit are in:\nanjuta - libepoxy fails\nbaobab - libepoxy fails\ngcab - affected\ngitg - libepoxy fails\ngmime - unaffected\ngnome-builder - libepoxy fails\ngspell - gtk+ fails\ngxml - affected\nlibchamplain - cogl fails\nlibgdata - affected\nlibgee - unaffected\nlibgit2-glib - unaffected\nlibgweather - libepoxy fails\nliblunar - unaffected\nlibsecret - fails due to lack of gsed\nlibsoup - affected\nmsitools - affected\nradare2 - unaffected\nsubmarine - affected\nvalabind - unaffected\nvala - unaffected\nvte3 - libexpoy fails\nThis means there are at least 6 packages that are affected by this variable.\n. Seems fine. Could you point me to the best place to steal, I mean, get inspiration from?\n. Was thinking about hacking https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/diagnostic.rb since this is where it belongs, isn't it?\n. The most interesting question is: how to add a function that would be used by brew doctor only on Linux (as I understand Mac OS X is unaffected)? I see eg. check_user_path_1 definition, but cannot find any usage. Or is it powered by some hoppy magic?\n. Yeah, found it out on my own in the meantime. I hacked a wee bit of\nchecking so will submit in not so distant future. BTW: How to run tests as\nI would like to add them as well?\n. Done in #919\n. Best way is to brew fetch openssl && brew install openssl then proceed to working as always. Same for brew upgrade.\n. I like @albertz's suggestion. @sjackman, do you have an idea how this could be implemented?\n. Problem is I don't know how many of them actually make use of this variable. Based on that I assumed this is the only one until proven otherwise.\n. Fine for me, I will update the PR.\n. Superseded by https://github.com/Linuxbrew/brew/pull/93\n. Shaun, what's your opinion on making gcc --with-glibc a dependency of all builds (as opposed to bottles)?\n. :+1: for the Doctor. :hospital:\n. Well, :watch: is rarely on our side. Once I had it I will give this a shot.\n. Got it on my list! There were many times when I was bitten by lack of python-dev ;)\n. Tried relinking, reinstalling and always ended up in the same place. Maybe will try again as on my other system it looks OK (though I don't have gcc there so using system's).\n. Right, it so happened that exa was playing jokes on me. I see a bug report coming...\n. @sjackman why adding this dependency will prevent tests from execution? This would be an undesirable situation.\nChecks for XML::Parser and other \"standard\" libs seem fine for me. Do we have a list of such libs?\n. Nope, it won't get found this way as configure script doesn't have -L$(brew --prefix)/lib.\n. Does not reproduce on linuxbrew/linuxbrew. Must have been some quantum mechanics.\n. Savvy!\n. BTW: should I assign them to myself (if this is even possible) so that I would know they are my \"drafts\"?\n. One question, though. Don't desktop apps require Xorg which are currently unsupported (or at least used to be few days ago)?\n. That's what I am planning to do :)\n. Tried xsane with linuxbrew/xorg/xorg and it seems to be working fine.\nProof:\nldd `which xsane`\n        linux-vdso.so.1 (0x00007fff10bf7000)\n        libsane.so.1 => /home/doomhammer/.linuxbrew/lib/libsane.so.1 (0x00007fac91a8e000)\n        libgtk-x11-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgtk-x11-2.0.so.0 (0x00007fac914b3000)\n        libgdk-x11-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgdk-x11-2.0.so.0 (0x00007fac91211000)\n        libpangocairo-1.0.so.0 => /home/doomhammer/.linuxbrew/lib/libpangocairo-1.0.so.0 (0x00007fac91005000)\n        libatk-1.0.so.0 => /home/doomhammer/.linuxbrew/lib/libatk-1.0.so.0 (0x00007fac90de2000)\n        libcairo.so.2 => /home/doomhammer/.linuxbrew/lib/libcairo.so.2 (0x00007fac90b06000)\n        libgdk_pixbuf-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgdk_pixbuf-2.0.so.0 (0x00007fac908e9000)\n        libgio-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgio-2.0.so.0 (0x00007fac90597000)\n        libpangoft2-1.0.so.0 => /home/doomhammer/.linuxbrew/lib/libpangoft2-1.0.so.0 (0x00007fac90383000)\n        libpango-1.0.so.0 => /home/doomhammer/.linuxbrew/lib/libpango-1.0.so.0 (0x00007fac90141000)\n        libgobject-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgobject-2.0.so.0 (0x00007fac8ff02000)\n        libglib-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libglib-2.0.so.0 (0x00007fac8fbfc000)\n        libfontconfig.so.1 => /home/doomhammer/.linuxbrew/lib/libfontconfig.so.1 (0x00007fac8f9c8000)\n        libfreetype.so.6 => /home/doomhammer/.linuxbrew/lib/libfreetype.so.6 (0x00007fac8f742000)\n        libpng16.so.16 => /home/doomhammer/.linuxbrew/lib/libpng16.so.16 (0x00007fac8f519000)\n        libtiff.so.5 => /home/doomhammer/.linuxbrew/lib/libtiff.so.5 (0x00007fac8f2b5000)\n        libjpeg.so.8 => /home/doomhammer/.linuxbrew/lib/libjpeg.so.8 (0x00007fac8f085000)\n        libz.so.1 => /home/doomhammer/.linuxbrew/lib/libz.so.1 (0x00007fac8ee72000)\n        libm.so.6 => /home/doomhammer/.linuxbrew/lib/libm.so.6 (0x00007fac8eb82000)\n        libc.so.6 => /home/doomhammer/.linuxbrew/lib/libc.so.6 (0x00007fac8e80a000)\n        libdl.so.2 => /home/doomhammer/.linuxbrew/lib/libdl.so.2 (0x00007fac8e606000)\n        libusb-0.1.so.4 => /home/doomhammer/.linuxbrew/lib/libusb-0.1.so.4 (0x00007fac8e402000)\n        libpthread.so.0 => /home/doomhammer/.linuxbrew/lib/libpthread.so.0 (0x00007fac8e1e6000)\n        libXrender.so.1 => /home/doomhammer/.linuxbrew/lib/libXrender.so.1 (0x00007fac8dfde000)\n        libXinerama.so.1 => /home/doomhammer/.linuxbrew/lib/libXinerama.so.1 (0x00007fac8dddc000)\n        libXrandr.so.2 => /home/doomhammer/.linuxbrew/lib/libXrandr.so.2 (0x00007fac8dbd3000)\n        libXcursor.so.1 => /home/doomhammer/.linuxbrew/lib/libXcursor.so.1 (0x00007fac8d9ca000)\n        libXext.so.6 => /home/doomhammer/.linuxbrew/lib/libXext.so.6 (0x00007fac8d7bb000)\n        libgmodule-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgmodule-2.0.so.0 (0x00007fac8d5b8000)\n        libX11.so.6 => /home/doomhammer/.linuxbrew/lib/libX11.so.6 (0x00007fac8d29c000)\n        libXcomposite.so.1 => /home/doomhammer/.linuxbrew/lib/libXcomposite.so.1 (0x00007fac8d09a000)\n        libXdamage.so.1 => /home/doomhammer/.linuxbrew/lib/libXdamage.so.1 (0x00007fac8ce98000)\n        libXfixes.so.3 => /home/doomhammer/.linuxbrew/lib/libXfixes.so.3 (0x00007fac8cc93000)\n        libgthread-2.0.so.0 => /home/doomhammer/.linuxbrew/lib/libgthread-2.0.so.0 (0x00007fac8ca92000)\n        libharfbuzz.so.0 => /home/doomhammer/.linuxbrew/lib/libharfbuzz.so.0 (0x00007fac8c848000)\n        libpixman-1.so.0 => /home/doomhammer/.linuxbrew/lib/libpixman-1.so.0 (0x00007fac8c5ca000)\n        libxcb-shm.so.0 => /home/doomhammer/.linuxbrew/lib/libxcb-shm.so.0 (0x00007fac8c3c8000)\n        libxcb-render.so.0 => /home/doomhammer/.linuxbrew/lib/libxcb-render.so.0 (0x00007fac8c1c0000)\n        libxcb.so.1 => /home/doomhammer/.linuxbrew/lib/libxcb.so.1 (0x00007fac8bfa3000)\n        librt.so.1 => /home/doomhammer/.linuxbrew/lib/librt.so.1 (0x00007fac8bd9b000)\n        libresolv.so.2 => /home/doomhammer/.linuxbrew/lib/libresolv.so.2 (0x00007fac8bb86000)\n        libffi.so.6 => /home/doomhammer/.linuxbrew/lib/libffi.so.6 (0x00007fac8b97f000)\n        libexpat.so.1 => /home/doomhammer/.linuxbrew/lib/libexpat.so.1 (0x00007fac8b75c000)\n        libbz2.so.1.0 => /home/doomhammer/.linuxbrew/lib/libbz2.so.1.0 (0x00007fac8b54a000)\n        /home/doomhammer/.linuxbrew/lib/ld.so (0x00007fac91cb0000)\n        libusb-1.0.so.0 => /home/doomhammer/.linuxbrew/lib/libusb-1.0.so.0 (0x00007fac8b335000)\n        libXau.so.6 => /home/doomhammer/.linuxbrew/lib/libXau.so.6 (0x00007fac8b133000)\n        libXdmcp.so.6 => /home/doomhammer/.linuxbrew/lib/libXdmcp.so.6 (0x00007fac8af2e000)\n        libudev.so.1 => /home/doomhammer/.linuxbrew/lib/libudev.so.1 (0x00007fac91e9c000)\n        libcap.so.2 => /home/doomhammer/.linuxbrew/lib/libcap.so.2 (0x00007fac8ad2a000)\n. \u00af(\u30c4)/\u00af mostly graphics stuff, I'd guess. Painting those rectangles on them monitors ain't an easy job...\n. Good news: setting XDG_DATA_DIRS=$(brew --prefix)/share:$XDG_DATA_DIRS and running update-desktop-database when you install a GUI app should do the Trick for all xdg-compliant DEs. Not sure as yet when it should be set as it is probably read during DEs startup.\n. setup_build_environment in Library/Homebrew/extend/ENV/std.rb should be OK for that?\n. @sjackman could you migrate it to linuxbrew/brew?\n. This issue was moved to Linuxbrew/brew#30\n. Splendid tool, thanks @sjackman !\n. Fascinating thing is that installing deps one by one seems to work. Only trying to brew something that installs a dep first fails.\nSeparate issue: glibc won't build with gcc-4.3. Seems the :chicken: is eating its :egg: or something alike... Catch 22?\n. Pieces don't fit. gcc-4.4 in Debian pulls in glibc 2.11 so back to the drawing board.\n. Yet another reason to give #601 a try? ;)\n. Understood, sir!\nBTW: why build by hand on a holy machine? Can't we make a holy Docker container just for that?\n. BTW: where does linuxbrew/linuxbrew come from as it is not the Dockerfile from current repo for sure?\n. OK, nevermind that. I pushed doomhammer/linuxbrew-lenny to Docker cloud but wouldn't call it working.\nWhen I issued brew install gcc --with-glibc --verbose it got stuck:\n==> Installing dependencies for gcc: patchelf, zlib, binutils, linux-headers, glibc, xz, gmp, gpatch, mpfr, libmpc, isl\n==> Installing gcc dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9.x86_64_linux.bottle.tar.gz\n/usr/bin/curl -fLA Homebrew 0.9.5 (Ruby 2.1.5-273; x86_64-linux) https://linuxbrew.bintray.com/bottles/patchelf-0.9.x86_64_linux.bottle.tar.gz -C 0 -o /home/linuxbrew/.cache/Home\nbrew/patchelf-0.9.x86_64_linux.bottle.tar.gz.incomplete\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  285k  100  285k    0     0   129k      0  0:00:02  0:00:02 --:--:--  140k\n==> Verifying patchelf-0.9.x86_64_linux.bottle.tar.gz checksum\n==> Pouring patchelf-0.9.x86_64_linux.bottle.tar.gz\ntar xvf /home/linuxbrew/.cache/Homebrew/patchelf-0.9.x86_64_linux.bottle.tar.gz\ntar: Failed to set default locale\nx patchelf/0.9/\nx patchelf/0.9/bin/\nx patchelf/0.9/bin/patchelf\nx patchelf/0.9/share/\nx patchelf/0.9/share/doc/\nx patchelf/0.9/share/doc/patchelf/\nx patchelf/0.9/share/doc/patchelf/README\nx patchelf/0.9/share/man/\nx patchelf/0.9/share/man/man1/\nx patchelf/0.9/share/man/man1/patchelf.1\nx patchelf/0.9/COPYING\nx patchelf/0.9/INSTALL_RECEIPT.json\nx patchelf/0.9/README\nFunny thing, running brew install patchelf seemed to work, but then:\n==> Installing dependencies for gcc: zlib, binutils, linux-headers, glibc, xz, gmp, gpatch, mpfr, libmpc, isl\n==> Installing gcc dependency: zlib\n==> Downloading https://linuxbrew.bintray.com/bottles/zlib-1.2.8.x86_64_linux.bottle.1.tar.gz\nAlready downloaded: /home/linuxbrew/.cache/Homebrew/zlib-1.2.8.x86_64_linux.bottle.1.tar.gz\n==> Verifying zlib-1.2.8.x86_64_linux.bottle.1.tar.gz checksum\n==> Pouring zlib-1.2.8.x86_64_linux.bottle.1.tar.gz\ntar xvf /home/linuxbrew/.cache/Homebrew/zlib-1.2.8.x86_64_linux.bottle.1.tar.gz\ntar: Failed to set default locale\nx zlib/1.2.8/\nx zlib/1.2.8/ChangeLog\nx zlib/1.2.8/lib/\nx zlib/1.2.8/lib/libz.so.1\nx zlib/1.2.8/lib/libz.so.1.2.8\nx zlib/1.2.8/lib/pkgconfig/\nx zlib/1.2.8/lib/pkgconfig/zlib.pc\nx zlib/1.2.8/lib/libz.a\nx zlib/1.2.8/lib/libz.so\nx zlib/1.2.8/README\nx zlib/1.2.8/INSTALL_RECEIPT.json\nx zlib/1.2.8/include/\nx zlib/1.2.8/include/zlib.h\nx zlib/1.2.8/include/zconf.h\nx zlib/1.2.8/share/\nx zlib/1.2.8/share/man/\nx zlib/1.2.8/share/man/man3/\nx zlib/1.2.8/share/man/man3/zlib.3\n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9/bin/patchelf --set-rpath /home/linuxbrew/.linuxbrew/lib /home/linuxbrew/.linuxbrew/Cellar/zlib/1.2.8/lib/libz.so.1.2.8\nCould you point me @sjackman where to go from here as I am still not very familiar with Homebrew internals?\nThanks!\n. localedef on lenny have no notion of -i switch. That is why I omitted\nthis.\nAs for hanging: this is what it looks like. May try a bit of straceing\nbut other than that, no idea.\n. I'd also bet for a missing program. Maybe command-not-found's approach would help here?\n. Funny thing. Should cc1 be running during pouring bottle? I thought this process was more like: \"unpack your things and move them to correct places\"...\n. While running brew install binutils --verbose:\n$ pstree\nbash-+-pstree\n     `-ruby-+-ruby-+-ruby-+-make---sh---make---sh---sh---make---make---sh---make---8*[gcc-4.3-+-as]\n            |      |      |                                                                   `-cc1]\n            |      |      `-{ruby}\n            |      `-{ruby}\n            `-{ruby}\nThe output on the other hand was:\n[...]\n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9/bin/patchelf --set-rpath /home/linuxbrew/.linuxbrew/lib --set-interpreter /home/linuxbrew/.linuxbrew/lib/ld.so /home/linuxbrew/.linuxbrew/Cellar/binutils/2.25.1/x86\n_64-unknown-linux-gnu/bin/objdump \n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9/bin/patchelf --set-rpath /home/linuxbrew/.linuxbrew/lib --set-interpreter /home/linuxbrew/.linuxbrew/lib/ld.so /home/linuxbrew/.linuxbrew/Cellar/binutils/2.25.1/x86\n_64-unknown-linux-gnu/bin/ranlib \n/home/linuxbrew/.linuxbrew/Cellar/patchelf/0.9/bin/patchelf --set-rpath /home/linuxbrew/.linuxbrew/lib --set-interpreter /home/linuxbrew/.linuxbrew/lib/ld.so /home/linuxbrew/.linuxbrew/Cellar/binutils/2.25.1/x86\n_64-unknown-linux-gnu/bin/strip\n. Come to think of it, maybe 4.3 was deprecated based on fact it has some weird loop issue or some such?\nStill: what is that guy even doing when I am pouring from a bottle?\n. What is being compiled is usually what is being installed. I am more concerned whether it is done after pouring. Is there some logic in place to build from source after pouring is done (eg. if poured bottled is incompatible with the system or something like that)?\n. Another interesting question: what could be blocking output? I clearly see in ps aux that installation of binutils is taking place whereas console seems stuck on:\n```\nbrew install binutils\n==> Installing dependencies for binutils: patchelf, zlib\n==> Installing binutils dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring patchelf-0.9.x86_64_linux.bottle.tar.gz\n``\n. In the meanwhilezlibgot silently installed as well.\n. Tried my luck with Centos and things were mostly smooth, untilgawk` couldn't link. Maybe this is a dead end, in fact?\nAs a workaround one might create a fake keg with curl -Lq s.minos.io/s > /home/linuxbrew/static-get &&         sh /home/linuxbrew/static-get -x gawk...\n. I would too, but no luck on ancient distro ;)\n. Console problems were on Debian Lenny. gawk on CentOS couldn't build due to some reloc problem, which I suspect means linker is too old.\n. My bad, linking error was with something different altogether. gawk was pretty simple:\n```\n==> Installing dependencies for gawk: xz\n==> Installing gawk dependency: xz\n==> Downloading https://linuxbrew.bintray.com/bottles/xz-5.2.2.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring xz-5.2.2.x86_64_linux.bottle.tar.gz\n/home/linuxbrew/.linuxbrew/Cellar/xz/5.2.2: 65 files, 1.6M\n==> Installing gawk\n==> Downloading http://ftpmirror.gnu.org/gawk/gawk-4.1.3.tar.xz\n==> Downloading from http://ftp.task.gda.pl/pub/gnu/gawk/gawk-4.1.3.tar.xz\n################################################################## 100.0%\nError: Empty archive\n```\nThis is both well-known and a circular dependency (I cannot install glibc if we want gawk linked against the old glibc). Workaround might perhaps be to install non-brewed xz?\n. $ brew test --verbose vala\nTesting vala\n==> /home/linuxbrew/.linuxbrew/Cellar/vala/0.30.1/bin/valac -g --cc=/usr/bin/gcc --save-temps /tmp/vala20160324-5338-14htota/hello.vala\n==> /tmp/vala20160324-5338-14htota/hello\nlinuxbrew@cc831b638676:~/.linuxbrew$ echo $?\n0\n. https://gist.github.com/anonymous/5e6abf8d8f8fe07d0355#file-02-make-L178\n. Happy to help :)\n. Must have missed it. Fixed.\n. Usually it my PRs are tested on linuxbrew/linuxbrew (with brewed gcc --with-glibc) prior to submission.\n. Bare linuxbrew/linuxbrew (1128b25c43de) acts the same way (that is installs correctly).\n. Removed.\n. Always a pleasure!\n. This happens when installing attr?\n. Superseded by https://github.com/Linuxbrew/brew/issues/6\n. Not sure if I am capable but will give this a try tomorrow (so probably late evening for you, @sjackman ;) ).\n. Something like #986?\n. It seems :recommended dep on :x11 changes exactly nothing therefore Travis doesn't install X11 deps. Any ideas how to overcome this?\n. I believe it depends on #1039 right now.\nAlso, if you want cairo you can brew install linuxbrew/xorg/xorg && brew install cairo. I think this should help you.\n. :+1: \n. Isn't expat one of those guys that come with OS X?\n. This one is not on the list but symptoms look similar. It is worth a try.\n@ahmedmagds, @ahoka could you do this prior to running brew:\nexport XDG_DATA_DIRS=$(brew --prefix)/share:$XDG_DATA_DIRS\n?\n. @tseemann just for the build.\n@sjackman we have two proposals right now and I think they are a bit redundant. One is to use brew doctor to ensure user sets $XDG_DATA_DIRS, the other is to add this to ENV/std. Which one should we approach (or both)?\n. Cannot say much about brew diy but tried brew sh with YCM on Tuesday and it works as advertised. You can see it in my .vimrc\n. There are many of them, but the most important, I believe, would be gcc --with-glibc and python.\n. Maybe you have LD_LIBRARY_PATH set so it overrides Linuxbrew libs?\n. I am running brewed Neovim.\n```\nPython 2.7.11 (default, Mar 19 2016, 11:05:53) \n[GCC 5.3.0] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport platform\nplatform.libc_ver()\n('glibc', '2.2.5')\n```\n\n\n\nPython is... special\n. Had the same issue even prior to merge. Making -lc++abi if OS.mac? solves the issue. I may provide a PR unless someone beats me to it ;)\n. Already did ;) #1022 \n. On different machine:\n```\nbrew upgrade                                                                                                                                                                              7s ~/src/brewfile adva\n==> Upgrading 8 outdated packages, with result:\nbinutils 2.26, fzf 0.11.4, node 5.9.1, git 2.8.0, gst-plugins-base 1.8.0, rtags 2.2, gstreamer 1.8.0, cmake 3.5.1\n==> Upgrading binutils\n==> Downloading https://linuxbrew.bintray.com/bottles/binutils-2.26.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring binutils-2.26.x86_64_linux.bottle.tar.gz\n/home/piotrg/.linuxbrew/Cellar/binutils/2.26: 3,178 files, 284.6M\n==> Upgrading fzf\n==> Downloading https://github.com/junegunn/fzf/archive/0.11.4.tar.gz\nError: Failed to download resource \"fzf\"\nDownload failed: https://github.com/junegunn/fzf/archive/0.11.4.tar.gz\n==> Upgrading node\n==> Downloading https://nodejs.org/dist/v5.9.1/node-v5.9.1.tar.xz\nError: Failed to download resource \"node\"\nDownload failed: https://nodejs.org/dist/v5.9.1/node-v5.9.1.tar.xz\n==> Upgrading git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.8.0.tar.xz\nError: Failed to download resource \"git\"\nDownload failed: https://www.kernel.org/pub/software/scm/git/git-2.8.0.tar.xz\n==> Upgrading gst-plugins-base\n==> Installing dependencies for gst-plugins-base: gstreamer\n==> Installing gst-plugins-base dependency: gstreamer\n==> Downloading https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-1.8.0.tar.xz\nError: Failed to download resource \"gstreamer\"\nDownload failed: https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-1.8.0.tar.xz\n==> Upgrading rtags\n==> Installing dependencies for rtags: cmake\n==> Installing rtags dependency: cmake\n==> Downloading https://linuxbrew.bintray.com/bottles/cmake-3.5.1.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring cmake-3.5.1.x86_64_linux.bottle.tar.gz\n==> Caveats\nEmacs Lisp files have been installed to:\n  /home/piotrg/.linuxbrew/share/emacs/site-lisp/cmake\n==> Summary\n/home/piotrg/.linuxbrew/Cellar/cmake/3.5.1: 2,009 files, 24.1M\n==> Installing rtags\n==> Cloning https://github.com/Andersbakken/rtags.git\nUpdating /home/piotrg/.cache/Homebrew/rtags--git\nError: Failed to download resource \"rtags\"\nFailure while executing: git fetch -q origin\n```\nBottles work, source formulae not so much.\n. OK. Evil seems to be coming from e8a4a1d.\n. Perfect, maestro!\n. (Without the final , File::PATH_SEPARATOR though)\n. Why does it do so?\n. Any plans on merging that one?\n. On legacy?. So what is the CircleCI status now?\n. This looks like a part of Mesa so I would bet it should be a part of linuxbrew/xorg/xorg. What's your  opinion @rwhogg @maxim-belkin ?\n. @rwhogg @maxim-belkin how do you see it?\n. As for checks there already is #973 . List would still be needed, though.\n. Some of them might just be \"standard\" Perl libs as I see them on a Linux box as well.\n. I had similar issues with Debian Lenny, but not in CentOS 5 nor in Ubuntu ~~12.04~~ 14.04 based distros. So far -- no idea what is causing all of this.\n. Come to think of it,what I meant was 14.04.\n. As for git versions and brew doctor complaining: https://github.com/ipython/ipython/issues/2195/ . It seems releases after 1.7.9.5 should suffice.\n. One problem I see with this approach is that formula names may differ from system packages (be it APT, yum, or whatever). Another: all those native package managers... their name is Legion. https://www.youtube.com/watch?v=jGALJwdBOX4\n. I'll try once again with post-split repo, but the thing was simply weird. BTW: should we migrate this to linuxbrew/brew?\n. Looks similar to Debian issue (missing /usr/bin/file) and it is something that I'd love to fix ;) \n. I am not an expert on Chromebrew, but I believe it has been made in order to ease bootstrapping of Linuxbrew. Hopefully in a future such additional resources would no longer be needed.\nIf you have more specific questions, @trusktr please don't hesitate to ask. I am closing the ticket for now if you don't mind.\n. Could you post results of file $(which skewer) and ldd $(which skewer)?\n. To tell the truth I didn't know what is the proper way to fix Linux-related issues. Is it homebrew/homebrew first and then it gets merged to linuxbrew or the other way round. Shall I split this and submit to homebrew/homebrew?\nEDIT: I am sorry, I have misread your original comment. This patch applies only to the released tarball which will probably not be fixed. Upstream code shouldn't have this issue.\n. The error message itself was rather cryptic and occured while configure'ing cgdb. Something along the lines of \"unable to check version of readline\". Actually, in config.log there was more precise message that showed missing ncurses symbols during linking stage.\nReadline itself builds and installs fine even without this patch but is simply unusable.\n. I haven't submitted it upstream. I tested cgdb from master and it doesn't have this issue. I believe it is only relevant to the released tarball.\n. CMake doesn't seem to accept environmental CPPFLAGS which, in case of Homebrew, contain include paths. CXXFLAGS were set correctly from what I remember.\nLack of this line resulted in compilation errors with histedit.h not found.\n. Can you relate me to some info how it should be properly wrapped? As I have mentioned, I have no knowledge of Ruby idioms since my whole experience with the language is through Homebrew Formulas :)\n. Yeah, most probably. Will fix that.\n. Yes, I believe this is incorrect, I only wanted to test it. In my case I get user == \"DoomHammer\" &&repo == \"linuxbrew\"when runningtest-boton my PR on Travis. Could you help me find out what is wrong here?\n. I can never get it right. When is it OK to useunless OS.mac?and whenif OS.linux?`?\n. Not so much ;)\nTried to do it in a more compact way, but I think logic won and I lost...\n. ",
    "diegocaro": "+1, I cant compile gcc (5.1). It seems to be related with a zlib dependency (not installed by default in most linux distros, but already installed in os x).\nI tried installing zlib, but it fails after the bootstrap stage.\n. ",
    "kim612": "In my case (CentOS 5.11 with gcc44),\n```\nprefix=~/.linuxbrew\nln -s /usr/bin/gcc44 $prefix/bin/gcc-4.4\nln -s /usr/bin/g++44 $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran44 $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\nbrew install hello\nError: Homebrew GCC requested, but formula gcc44 not found!\nunset HOMEBREW_CC\nbrew install hello \n(no error)\n```\n. ",
    "jorgebg": "This worked for me (CentOS):\nbash\nbrew install gcc --cc=gcc\n. ",
    "dakl": "To get symlinking to work I've had to \nprefix=~/.linuxbrew\nln -s /usr/bin/gcc $prefix/bin/gcc-4.4\nln -s /usr/bin/g++ $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran $prefix/bin/gfortran-4.4\nexport HOMEBREW_CC=gcc-4.4\nbrew tap homebrew/versions\nbrew install hello && brew test -v hello; brew remove hello\nbrew tap homebrew/versions seems to be needed in there. The I don't have to use --cc=gcc at all it seems like. \n. ",
    "Scapadiver": "@jorgebg's solution worked for me also - centos\n. ",
    "prologic": "Disregard last comment (deleted) -- If you have modified changes in the git tree you'll cause problems with bew :)\n. Actually I'm having a lot of trouble getting Homebrewed linux gcc bootstrapped.\n1. sudo yum groupinstall 'Development Tools'\n2. brew install gcc --cc=gcc\n#!bash\n$ brew install gcc --cc=gcc\n==> Installing dependencies for gcc: mpfr, libmpc, isl\n==> Installing gcc dependency: mpfr\nError: /home/prologic/.linuxbrew/opt/xz not present or broken\nPlease reinstall xz. Sorry :(\nOkay so let's install xz first:\n#!bash\n$ brew install xz --cc=gcc\n==> Downloading https://fossies.org/linux/misc/xz-5.2.2.tar.gz\nAlready downloaded: /home/prologic/.cache/Homebrew/xz-5.2.2.tar.gz\n==> ./configure --disable-silent-rules --prefix=/home/prologic/.linuxbrew/Cellar/xz/5.2.2\n==> make install\nError: No such file or directory - (unreachable)/\nI've also tried and have in place @dakl's snippet which doesn't seem to help because tapping homebrew/versions yields:\n#!bash\n$ brew tap homebrew/versions\n==> Tapping homebrew/versions\nfatal: Could not change back to '(unreachable)/': No such file or directory\nError: Failure while executing: git clone https://github.com/Homebrew/homebrew-versions /home/prologic/.linuxbrew/Library/Taps/homebrew/homebrew-versions --depth=1\n. Nope :/\n. So this is an issue for me as well. I only very recently installed brewlinux and Python and have run into the exact same problem. @sjackman You are right about there being no --with-brewed-openssl option so I'm a little confused as to what the actual solution is.\n. FWIW:\n#!bash\nprologic@dev5973\nFri Oct 16 07:29:35\n~/.linuxbrew\n (master)\n$ find . | grep failed\n./share/doc/homebrew/brew-test-bot-failed-jenkins.png\n./share/doc/homebrew/brew-test-bot-failed-pr.png\n./share/doc/homebrew/brew-test-bot-failed-test.png\n./Cellar/python/2.7.10_2/lib/python2.7/lib-dynload/dbm_failed.so\n./Cellar/python/2.7.10_2/lib/python2.7/lib-dynload/_ssl_failed.so\n./lib/python2.7/lib-dynload/_ssl_failed.so\n./lib/python2.7/lib-dynload/dbm_failed.so\n. Running into the same issue as well. CentOS 6.7\n. This worked for me too. I also commented on #420 but I believe this PR fixes the issue at hand.\n. NB: I hand patched my python.rb formula however since this PR containers merge conflicts apparently\n. Running brew doctor also reports the same issue:\n#!bash\n$ brew doctor\nError: No such file or directory - (unreachable)/\n. If it helps my $HOME is mounted over NFS.\n. No it doesn't; it fails with the same error at the end.\n. Yeah that's okay; I'm not sure what to do at this point :) I'm sort-of trying to do this whilst doing other more important thing :) -- Enjoy your trip! I'll see what I can work out in the mean time...\n. ",
    "r41d": "I tried to use linuxbrew on a Gentoo server and my error looked like this:\n==> Installing dependencies for ncdu: pkg-config, gpatch, ncurses\n==> Installing ncdu dependency: pkg-config\ngcc-config: error: could not run/locate 'gcc-5'\nError: pkg-config cannot be built with any available compilers.\nInstall Clang or brew install gcc\nFor me the command brew link --overwrite gcc did the trick and created all necessary symlinks so everything would work.. ",
    "rnpandya": "ravip@hpcravipnd1:/mnt$ sudo brew install -v bamtools\n==> Downloading https://github.com/pezmaster31/bamtools/archive/v2.3.0.tar.gz\nAlready downloaded: /home/ravip/.cache/Homebrew/bamtools-2.3.0.tar.gz\n==> Verifying bamtools-2.3.0.tar.gz checksum\ntar xf /home/ravip/.cache/Homebrew/bamtools-2.3.0.tar.gz\n==> Downloading https://github.com/sjackman/bamtools/commit/3b6b89d.diff\nAlready downloaded: /home/ravip/.cache/Homebrew/bamtools--patch-89f659243dac265684705b485b5580e7cac559f7.diff\n==> Verifying bamtools--patch-89f659243dac265684705b485b5580e7cac559f7.diff checksum\n==> Patching\n/usr/bin/patch -g 0 -f -d /tmp/bamtools-EeWLaI/bamtools-2.3.0 -p1 -i /tmp/bamtools--patch-HAUrjR/3b6b89d.diff\npatching file src/api/CMakeLists.txt\n==> cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/Cellar/bamtools/2.3.0 -DCMAKE_BUILD_TYPE=None -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_VERBOSE_MAKEFILE=ON -Wno-dev\nFailed to execute: cmake\n==> Formula\nTap: homebrew/homebrew-science\nPath: /usr/local/Library/Taps/homebrew/homebrew-science/bamtools.rb\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nHEAD: 3353c346f08738b1891730e7647b1aebd6e40c70\nCPU: 16-core 64-bit 6\nOS X: 0-x86_64\n/usr/bin/ruby1.9.1:\n  1.9.3-484\nX11: N/A\n==> ENV\nCC: /usr/bin/gcc-4.8\nCXX: /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc-4.8\nOBJCXX: /usr/bin/g++-4.8\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nLDFLAGS: -Wl,-rpath,/usr/local/lib\nMAKEFLAGS: -j16\nPKG_CONFIG_LIBDIR: /usr/local/lib/pkgconfig:/usr/lib/pkgconfig\nACLOCAL_PATH: /usr/local/share/aclocal\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/Library/Contributions/cmd\nError: bamtools 2.3.0 did not build\nLogs:\n     /home/ravip/Library/Logs/Homebrew/bamtools/01.cmake\n. From above, \"Failed to execute: cmake\":\nbrew thought cmake was installed but it was missing files\nI uninstalled and reinstalled cmake, and that fixed it, thanks.\n. ",
    "tayebwajb": "@chapmanb Today, I am running:\npython bcbio_nextgen_install.py /usr/local/share/bcbio --tooldir=/usr/local --genomes GRCh37 --aligners bwa --aligners bowtie2\nAnd getting the error \n[localhost] local: export CC=${CC:-which gcc} && export CXX=${CXX:-which g++} && export PERL5LIB=/usr/local/lib/perl5:${PERL5LIB} && /usr/local/bin/brew install --env=inherit  bamtools\n==> Downloading https://github.com/pezmaster31/bamtools/archive/v2.3.0.tar.gz\nAlready downloaded: /.cache/Homebrew/bamtools-2.3.0.tar.gz\n==> Downloading https://github.com/sjackman/bamtools/commit/3b6b89d.diff\nAlready downloaded: /.cache/Homebrew/bamtools--patch-89f659243dac265684705b485b5580e7cac559f7.diff\n==> Patching\nError: Failure while executing: /usr/bin/patch -g 0 -f -d /tmp/bamtools-KnJHFa/bamtools-2.3.0 -p1 -i /tmp/bamtools--patch-DDcNGZ/3b6b89d.diff\nFatal error: local() encountered an error (return code 1) while executing 'export CC=${CC:-which gcc} && export CXX=${CXX:-which g++} && export PERL5LIB=/usr/local/lib/perl5:${PERL5LIB} && /usr/local/bin/brew install --env=inherit  bamtools'\nAborting.\nTraceback (most recent call last):\n  File \"bcbio_nextgen_install.py\", line 255, in \n    main(parser.parse_args(), sys.argv[1:])\n  File \"bcbio_nextgen_install.py\", line 41, in main\n    subprocess.check_call([bcbio[\"bcbio_nextgen.py\"], \"upgrade\"] + _clean_args(sys_argv, args, bcbio))\n  File \"//anaconda/lib/python2.7/subprocess.py\", line 540, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '['/usr/local/share/bcbio/anaconda/bin/bcbio_nextgen.py', 'upgrade', '--tooldir=/usr/local', '--genomes', 'GRCh37', '--aligners', 'bwa', '--aligners', 'bowtie2', '--data']' returned non-zero exit status 1\nI have installed bamtools by cloning git repo and correctly set LD_LIBRARY_PATH but still getting same error. What to do? Thanks! \n. ",
    "hkcqr": "@sjackman Hi, I met a similar problem. I tried your mentioned method. Actually, linux doesn't interpret \":\" as \".\". I solved my problem by checking the system profile and removed the \":.\" symbol which could be added by the inexperience server engineer. \nHope it'll be some help for you. \n. ",
    "dragonxlwang": "I am compiling llvm-libclang from source and it needs a new version of glibc which I happen can use from the linuxbrew version... @sjackman said that user should not touch $LD_LIBRARY_PATH. I know that install form brew will work without problem but how about those installed from scratch that needs to link against glibc from the homebrew? I have this problem because there is no formula for libclang yet...\n. thanks! Let me try for real quick\n. I am actually trying to install you complete me on Scientific Linux release 6.7 (Carbon), and it requires a new libclang also glibc which I hope to get from homebrew. Let me try the shell method\n. @sjackman I looked into man page and it seems not clear to me what exactly env did brew change after brew sh. neither PATH nor LD_LIBRARY_PATH changed. Am I missing anything here?\n. it seems by using brew sh, it doesn't work correctly. \nFor example, when compiling you-complete-me with brew sh enabled:\nI got following output from ycm:\n$ ./install.py --clang-completer --system-libclang\nRe-run cmake no build system arguments\n-- The C compiler identification is GNU 4.4.7\n-- The CXX compiler identification is GNU 4.4.7\n-- Check for working C compiler: /usr/bin/gcc\n-- Check for working C compiler: /usr/bin/gcc -- works\nThe GCC is 4.4.7\nhowever, if I don't use brew sh, I could have:\n$ ./install.py\n-- The C compiler identification is GNU 5.3.0\n-- The CXX compiler identification is GNU 5.3.0\n-- Check for working C compiler: /home/xwang95/.linuxbrew/bin/cc\n-- Check for working C compiler: /home/xwang95/.linuxbrew/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /home/xwang95/.linuxbrew/bin/c++\n-- Check for working CXX compiler: /home/xwang95/.linuxbrew/bin/c++ -- works\nwhich means that gcc is the linuxbrew version of gcc... i'm a little bit confused now...\n. Here's a workaround:\nsh\ncd ~/.linuxbrew/lib\nln -s libncursesw.so libncursesw.so.5\n. I tried the walkaround and it still fails.\nThis time the error seems related to LD:\n/home/xwang95/.linuxbrew/bin/ld: cannot find -lxml2\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [bin/c-index-test] Error 1\nmake[2]: Leaving directory `/home/xwang95/tmp/llvm20160330-19540-1rm3q3o'\nmake[1]: *** [tools/clang/tools/c-index-test/CMakeFiles/c-index-test.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\nmake[2]: Leaving directory `/home/xwang95/tmp/llvm20160330-19540-1rm3q3o'\nAnd the gist\n. however, it seems there is still something not set correctly:\n```\n$ brew install xml2\n==> Downloading http://download.ofb.net/gale/xml2-0.5.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/xwang95/.linuxbrew/Cellar/xml2/0.5\nLast 15 lines from /home/xwang95/.cache/Homebrew/Logs/xml2/01.configure:\nchecking for style of include used by make... GNU\nchecking dependency style of /home/xwang95/.linuxbrew/bin/gcc-5... gcc3\nchecking for pkg-config... /home/xwang95/.linuxbrew/bin/pkg-config\nchecking pkg-config is at least version 0.9.0... yes\nchecking for XML... no\nconfigure: error: Package requirements (libxml-2.0) were not met:\nNo package 'libxml-2.0' found\nConsider adjusting the PKG_CONFIG_PATH environment variable if you\ninstalled software in a non-standard prefix.\nAlternatively, you may set the environment variables XML_CFLAGS\nand XML_LIBS to avoid the need to call pkg-config.\nSee the pkg-config man page for more details.\n```\n$ sudo yum install libxml2\n[sudo] password for xwang95:\nLoaded plugins: kmdl, priorities, refresh-packagekit, security\nSetting up Install Process\n2411 packages excluded due to repository priority protections\nPackage libxml2-2.7.6-20.el6_7.1.x86_64 already installed and latest version\nNothing to do\n```\n$ sudo yum info libxml2\nLoaded plugins: kmdl, priorities, refresh-packagekit, security\n2411 packages excluded due to repository priority protections\nInstalled Packages\nName        : libxml2\nArch        : i686\nVersion     : 2.7.6\nRelease     : 20.el6_7.1\nSize        : 1.7 M\nRepo        : installed\nFrom repo   : sl6-security-x86_64\nSummary     : Library providing XML and HTML support\nURL         : http://xmlsoft.org/\nLicense     : MIT\nDescription : This library allows to manipulate XML files. It includes support\n            : to read, modify and write XML and HTML files. There is DTDs support\n            : this includes parsing and validation even with complex DtDs, either\n            : at parse time or later once the document has been modified. The output\n            : can be a simple SAX stream or and in-memory DOM like representations.\n            : In this case one can use the built-in XPath and XPointer implementation\n            : to select subnodes or ranges. A flexible Input/Output mechanism is\n            : available, with existing HTTP and FTP modules and combined to an\n            : URI library.\nName        : libxml2\nArch        : x86_64\nVersion     : 2.7.6\nRelease     : 20.el6_7.1\nSize        : 1.7 M\nRepo        : installed\nFrom repo   : sl6-security-x86_64\nSummary     : Library providing XML and HTML support\nURL         : http://xmlsoft.org/\nLicense     : MIT\nDescription : This library allows to manipulate XML files. It includes support\n            : to read, modify and write XML and HTML files. There is DTDs support\n            : this includes parsing and validation even with complex DtDs, either\n            : at parse time or later once the document has been modified. The output\n            : can be a simple SAX stream or and in-memory DOM like representations.\n            : In this case one can use the built-in XPath and XPointer implementation\n            : to select subnodes or ranges. A flexible Input/Output mechanism is\n            : available, with existing HTTP and FTP modules and combined to an\n            : URI library.\n``\n. @sjackman ,thanks! But I thought my distro has already libxml2 as shown above, dunno why brew still say it cannot find it anyhow.\n. Thanks! but this seems to contradict with my memory when I was installing ycm last night where it report it has error thrown by my glibc under /lib64 (os lib)... as you instructed, I already have usedbrew shbut it seems when compiling cmake it persist to work with os libs... I will confirm this after  install the llvm\n. Yes,llvm --with-clang` can be correctly installed! Thanks!\n. sorry that I should mention that I already give that a try before which doesn't make a change\n. Let me try my best to explain what's my problem looks like:\nI need to compile you-complete-me on an old scientific linux 6 (linux 2.6.32), and it complains that the glibc too old --- that's why I resorted to linuxbrew. by using a standalone brew, specifically, libpython, libclang, glibc, I still get run time error from the compiled ycm --- it says that it still looking for old glibc in /lib64 directory ... \nToday I made a mistake. I tried to upgrade glibc using root by myself and ended up the whole system is messed up... I didn't realize that it's much more complicated to install than I thought... now I couldn't even ssh the server anymore. I am waiting our cs department staff to help me out ....\nI will report back to you once the server rebooted from the linux CD...\n. yeah, that might actually save lots of trouble and be good for others running on scilinux\u2026\nI think it\u2019s time for me to contribute a little as well\u2026 Let me try it first :P\n. @DoomHammer  thanks! Can you please share what brew packages you installed instead of using the system ones?\n. I think you are saying gcc & glibc? now gcc doesn't have --with-glibc option.\nI have all of them. After compile ycm in brew sh environment, when running it, I still get:\nimport ycm_core ImportError: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by /home/user/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so)\nI looked ycm_core.so:\nldd ycm_core.so\n        linux-vdso.so.1 (0x00007ffc113b6000)\n        libpython2.7.so.1.0 => /home/xwang95/.linuxbrew/lib/libpython2.7.so.1.0 (0x00007f249f0a9000)\n        libclang.so.3.7 => /home/xwang95/.vim/bundle/YouCompleteMe/third_party/ycmd/./libclang.so.3.7 (0x00007f249caa4000)\n        librt.so.1 => /home/xwang95/.linuxbrew/lib/librt.so.1 (0x00007f249c89b000)\n        libstdc++.so.6 => /home/xwang95/.linuxbrew/lib/libstdc++.so.6 (0x00007f249c526000)\n        libm.so.6 => /home/xwang95/.linuxbrew/lib/libm.so.6 (0x00007f249c234000)\n        libgcc_s.so.1 => /home/xwang95/.linuxbrew/lib/libgcc_s.so.1 (0x00007f249c020000)\n        libc.so.6 => /home/xwang95/.linuxbrew/lib/libc.so.6 (0x00007f249bca4000)\n        libpthread.so.0 => /home/xwang95/.linuxbrew/lib/libpthread.so.0 (0x00007f249ba88000)\n        libdl.so.2 => /home/xwang95/.linuxbrew/lib/libdl.so.2 (0x00007f249b884000)\n        libutil.so.1 => /home/xwang95/.linuxbrew/lib/libutil.so.1 (0x00007f249b681000)\n        /home/xwang95/.linuxbrew/Cellar/glibc/2.19/lib64/ld-linux-x86-64.so.2 (0x00007f249f894000)\nBut:\n$ locate libc.so.6\n/lib/libc.so.6\n/lib/i686/nosegneg/libc.so.6\n/lib64/libc.so.6\nIt seems a misconfiguration but I don't know why...\nAnother thing seems wired to me is that:\n$ ldd $(which python)\n        linux-vdso.so.1 (0x00007ffeef98c000)\n        libpython2.7.so.1.0 => /home/xwang95/.linuxbrew/lib/libpython2.7.so.1.0 (0x00007f0d3095b000)\n        libpthread.so.0 => /home/xwang95/.linuxbrew/lib/libpthread.so.0 (0x00007f0d3073f000)\n        libdl.so.2 => /home/xwang95/.linuxbrew/lib/libdl.so.2 (0x00007f0d3053c000)\n        libutil.so.1 => /home/xwang95/.linuxbrew/lib/libutil.so.1 (0x00007f0d30339000)\n        libm.so.6 => /home/xwang95/.linuxbrew/lib/libm.so.6 (0x00007f0d30047000)\n        libc.so.6 => /home/xwang95/.linuxbrew/lib/libc.so.6 (0x00007f0d2fccb000)\n        /home/xwang95/.linuxbrew/lib/ld.so (0x00007f0d30d5f000)\n$ /home/xwang95/.linuxbrew/lib/libc.so.6\nGNU C Library (GNU libc) stable release version 2.19, by Roland McGrath et al.\nCopyright (C) 2014 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\nCompiled by GNU CC version 4.4.7 20120313 (Red Hat 4.4.7-16).\nCompiled on a Linux 3.18.27 system on 2016-04-05.\nAvailable extensions:\n        crypt add-on version 2.1 by Michael Glad and others\n        GNU Libidn by Simon Josefsson\n        Native POSIX Threads Library by Ulrich Drepper et al\n        BIND-8.2.3-T5B\nlibc ABIs: UNIQUE IFUNC\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/libc/bugs.html>.\nIt seems python  uses linuxbrew libc.so.6\nwhile:\n```\n$ python   # linuxbrew python \nPython 2.7.11 (default, Apr  5 2016, 02:49:07)\n[GCC 5.3.0] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport platform\nplatform.libc_ver()\n('glibc', '2.2.5')\n```\n\n\n\nShowing inside python the glibc version is 2.2.5 not 2.19?\nDo you have any ideas?\n. sure!\n$ brew config\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: 94df1009303a7c707c88bbce32ba4657a887c055\nLast commit: 2 days ago\nHOMEBREW_PREFIX: /home/xwang95/.linuxbrew\nHOMEBREW_REPOSITORY: /home/xwang95/.linuxbrew\nHOMEBREW_CELLAR: /home/xwang95/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: 16-core 64-bit arrandale\nKernel: Linux 2.6.32-573.22.1.el6.x86_64 x86_64 GNU/Linux\nOS: Scientific Linux release 6.7 (Carbon)\nCodename: Carbon\nOS glibc: 2.12\nOS gcc: 4.4.7\nLinuxbrew glibc: 2.19\nLinuxbrew gcc: 5.3.0\nClang: 3.4 build 0\nX11: 2.7.8 => /usr\nSystem Ruby: 1.8.7-p374 => /usr/bin/ruby\nPerl: /home/xwang95/.linuxbrew/bin/perl => /home/xwang95/.linuxbrew/Cellar/perl/5.22.1/bin/perl\nPython: /home/xwang95/.linuxbrew/bin/python => /home/xwang95/.linuxbrew/Cellar/python/2.7.11/bin/python2.7\nRuby: /usr/bin/ruby\nJava: 1.6.0_45\nAnd this gist includes the doctor diagnose \n. @DoomHammer , can I ask did you run on your system's vim or brew's vim? Also, can you please let me know if you also have the glibc linked to system lib when running in python?\n. yes, It fails unless I use basic install without any addon...\nseems the dependence is: vim -> lua -> perl -> db\neven though lua was installed, vim still cannot work with --with-lua\n. Sorry for late reply.\nBut I do have brew perl:\n```\n$ ~/.linuxbrew/bin/perl --version\nThis is perl 5, version 22, subversion 1 (v5.22.1) built for x86_64-linux-thread-multi\nCopyright 1987-2015, Larry Wall\nPerl may be copied only under the terms of either the Artistic License or the\nGNU General Public License, which may be found in the Perl 5 source kit.\nComplete documentation for Perl, including FAQ lists, should be found on\nthis system using \"man perl\" or \"perldoc perl\".  If you have access to the\nInternet, point your browser at http://www.perl.org/, the Perl Home Page.\n```\n. I used the option --without-test to build it \u2014 hope it won\u2019t cause too much trouble later.\n. as @rwhogg said, I also believe this is likely not a problem of brew, but with upstream perl. \n. ",
    "wind930": "@oneillkza The same problem I encountered, but later I found that this is actually has no relationship to GCC bag is cited problems\nBecause in the.Linuxbrew/Library directory to find irb.rb so wrong,\nLn -s./debrew/irb.rb can be repaired.\n. ",
    "Nakilon": "@oneillkza which issue you reported?\nI get this -V error on rbenv install 1.8.7-p374\n. ",
    "DiagonalArg": "Re ncurses (under Ubuntu 12.04):\nNotice that for tmux, you also need to link ncursesw/term.h into that include directory.\nAlso, at present I already have a libncurses.so in the lib directory.  It's linked to Cellar/ncurses/5.9/lib/libncurses.so\n. @oneillkza - what do you make of @sjackman saying we need to link libncursesw.so in to lib/libncurses.so.  He says the same on the bottom of his standalone install page:\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation\nDid you, like me, already have a libncurses.so present?\n. Ok, thanks.  False alarm.  libncurses.so and libncursesw.so link to two different libraries in the Cellar.  What I hadn't noticed was that those two libraries link to the same (other) library in the Cellar.\n. @sjackman - Thanks for your suggestion.  In my case, I've got gcc, gcc34, g++ and gfortran in my /usr/bin.  Making the links and exporting the variable certainly does something.  Perhaps I now have a totally different issue?  It can't execute ./configure.\nbrew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.9.tar.gz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/home/me/.linuxbrew/Cellar/hello/2.9\n--disable-dependency-tracking\n--disable-silent-rules\n--prefix=/home/dev/.linuxbrew/Cellar/hello/2.9\nFailed to execute: ./configure\nREAD THIS: https://github.com/Homebrew/linuxbrew/wiki/troubleshooting\n... Ah, I see:\nbrew doctor\n[...]\nYou have a non-Homebrew 'pkg-config' in your PATH:\n  /usr/bin/pkg-config\n./configure may have problems finding brew-installed packages using\nthis other pkg-config.\nI'll ask on another ticket for a fix to this.  Thanks.\n. @sjackman - Yes, that works.  It's odd though, as I mentioned on #157:\nStrange, setting HOMEBREW_TEMP to ~/tmp makes it work. I say this is odd because I can definitely \"cat > /tmp/text.sh\" and \"chmod u+x /tmp/text.sh\". Regardless, it works now...\n. Bloody, hell - No!  Hah.  Thanks again.\n. Well, I'd love to, and I did look at the code, but ...  Besides seeing that I'll need a: \ndef check_for_executable_tmp\n    [...]\nend\nI don't think I can get much further!\n. Unrelated, but when I run \"brew install -v hello\", it creates the directory:\n/home/me/Library/Logs/Homebrew/hello/01.configure\nThat's a Mac thing, ~/Library.  Shouldn't it be put in ~/.linuxbrew/Library/... ?\n. Strange, setting HOMEBREW_TEMP to ~/tmp makes it work.  I say this is odd because I can definitely \"cat > /tmp/text.sh\" and \"chmod u+x /tmp/text.sh\".  Regardless, it works now...\n. I tried \"brew install ncurses\", and that worked without error.  Then, I was able to get tmux to compile by linking:\ninclude/ncursesw/curses.h and include/ncursesw/term.h\ninto the include directory.  (Ok, I see the first part of this issue is described in #143.)\nI tried \"brew install curl --with-ssh\", and that worked without error.  Then git installed, but I'm getting a lot of this:\nbrew search expat\n[...]\nError: Failed to connect to: https://api.github.com/repos/Homebrew/homebrew-science/git/trees/HEAD?recursive=1\nSSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\nI'm thinking what I need to do is install expat and bzip2 (lbzip2? pbzip2?) for the other dependencies.  (Ok, both of those install without errors.)\nWas this the right way to go?  And, notice we have a problem with ncurses (also curl --with-ssh?)\n. Ok. I can wait.  :)\n. The problem is discussed here:\nhttp://stackoverflow.com/questions/137773/what-does-the-no-version-information-available-error-from-linux-dynamic-linker\nNotice particularly the next-to-last answer.  So, is there any way to solve this?\n. Ok, I removed it/logged out/ssh'd back and ... while everything now works on the stock emacs, I still get the same message when I try to use .linuxbrew/bin/emacs.  So, I tried \"brew install w3m\", hoping linuxbrew's emacs will use linuxbrew's w3m and that the problem would go away.  I get an error on install:\n==> Installing w3m\n[...]\n==> make install\n             from fm.h:39,\n             from main.c:3:\nistream.h:23:8: error: redefinition of \u2018struct file_handle\u2019\n/usr/include/x86_64-linux-gnu/bits/fcntl.h:254:8: note: originally defined here\nmake: *** [main.o] Error 1\n. This one is Ubuntu 12.04, kernel 3.2.0.  gcc is version 4.6.3. \nLet me know if you need anything else!\n. Works now!  And brew's emacs works, too.  Much thanks...\n. @sjackman - here you go!\n```\n~$ brew postinstall openssl                                                                                                                                \n==> Downloading http://curl.haxx.se/ca/cacert.pem                                                                                                                         \n############################################################################################################################################################ 100.0%\n~$ brew test openssl                                                                                                                                       \nTesting openssl                                                                                                                                                         \n==> /home/me/.linuxbrew/Cellar/openssl/1.0.1j/bin/openssl dgst -sha1 -out checksum.txt testfile.txt                                                                  \n~$ brew update                                                                                                                                             \nfatal: unable to access 'https://github.com/Homebrew/linuxbrew.git/': error setting certificate verify locations:                                                       \n  CAfile: /home/me/.linuxbrew/etc/openssl/cert.pem                                                                                                                   \n  CApath: none                                                                                                                                                          \nError: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master\n```\nThanks\n/DA\n. @sjackman - thanks for your response.  I have checked each of the files/directories, and I have rw permission for first 5 and execute permission for all but the first.\nAlso, I tried your shot in the dark, but no luck.  I get the same result when I try \"brew update\".\n. Wow.  Nothing there!  (Empty file.)\nHow do I fix that?\n. If I understood anything at all about how this all work, I know I could have figured that out!  (Feeling a bit stupid now.)\nThank, man.\n. Ubuntu 14.04, 64 bit.\n. Works!  :)\n. ",
    "tinyheero": "Hi,\nHas there been any updates on this issue? I am also trying to install pandoc through linuxbrew and running into issues. I've followed the instructions found at https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation to do a stand-alone installation of linuxbrew. \nWhen doing the pandoc installation, it tries to build the ghc. The brew gist-logs ghc can be found here: https://gist.github.com/anonymous/2dc0f3866d308936e210\nThanks,\n. When running brew install gmp, I get the message Warning: gmp-6.0.0a already installed Seems that it may not see it?\n. Got a little further with that symlink set. But ran into another set of errors.\nmake[1]: *** Waiting for unfinished jobs....\nutils/haddock/doc/ghc.mk:15: recipe for target 'utils/haddock/doc/haddock.pdf' failed\nmake[1]: *** [utils/haddock/doc/haddock.pdf] Error 1\nMakefile:71: recipe for target 'all' failed\nmake: *** [all] Error 2\nGist log can be found here: https://gist.github.com/anonymous/6968396933730f9e275c\n. Issue seems to be related the step where it calls /usr/bin/dblatex which tries to import dbtexmf.dblatex. Seems like someone else has run into this issue. \nSeems like we need to install python and get this python library installed.\n. I finally got the ghc installation completed. I did a brew install python && pip install dblatex && brew install ghc\n. Great that worked thanks!\n. Issues seems to be that the linuxbrew gcc is not using the linuxbrew ld. Based on this thread, I did the following:\nexport COMPILER_PATH=~/.linuxbrew/bin\nFollowing this, brew install cabal-install was successful\n. Yes. I am using the standalone installation of linuxbrew which is why I was surprised it couldn't find the proper linker. \n. I was able to solve this issue with doing a export HOMEBREW_BUILD_FROM_SOURCE=1 right from the beginning of the standalone installation. Looking back, it must be one of the bottles as mentioned https://github.com/Homebrew/linuxbrew/issues/173. I am also not sure which bottle it is. \n. Thanks. I was hoping to avoid having to install a linuxbrew specific gcc and use the Centos' default gcc.\nI installed gcc:\nbrew install gcc\nRan into the error make[1]: *** [auto/if_perl.c] Error 29. I then installed installed perl:\nbrew install perl\nAfter this it, I was able to install vim.\n. It was actually. The Centos gcc was 4.8-5-4 and now my linuxbrew gcc is 5.3.0. \n. ",
    "saketkc": "I  can reproduce this error. \n```\n\nls -1 ~/.linuxbrew/lib/libgmp*\nlib/libgmp.a\nlib/libgmp.so\nlib/libgmp.so.10\nlib/libgmp.so.10.2.0\nlib/libgmpxx.a\nlib/libgmpxx.so\nlib/libgmpxx.so.4\nlib/libgmpxx.so.4.4.0\n. For some reason, `gsl` fails to build on your system. This looks strange.\nAm I missing something?\n. I am running `git  1.9.1` on `Ubuntu 14.04 x86_64`.\nNeed to lookup for another system to test this out.\n.\n\n!/bin/sh\n\ngit-submodule.sh: add, init, update or list git submodules\n\nCopyright (c) 2007 Lars Hjemli\ndashless=$(basename \"$0\" | sed -e 's/-/ /')\nUSAGE=\"[--quiet] add [-b ] [-f|--force] [--name ] [--reference ] [--]  []\n   or: $dashless [--quiet] status [--cached] [--recursive] [--] [...]\n   or: $dashless [--quiet] init [--] [...]\n``\n. Can you post the logs?\n. Can you trybrew install readline&&brew install lua?\nThat should hopefully fix it. I will have to take a look into the formula.\n. I was able to replicate this withbrew uninstall lua&&brew install lua.\nHowever this worked:brew unlink readline&&brew install lua`\n. @sjackman \nbrew install ncurses\nln -s ncursesw/curses.h ~/.linuxbrew/include/\nln -s libncursesw.so ~/.linuxbrew/lib/libncurses.so\nln -s libncursesw.so ~/.linuxbrew/lib/libcurses.so\nshould work?\n. Can you post the output of which gcc?\n. Quick update: There seems to be an issue with the patchelf bottle. I commented bottle specific lines with brew edit patchelfand then did brew reinstall isl followed by brew install gcc --with-glibc -v and I have a different error now:\n``\n../../../libgcc/libgcc2.c: In function '__divxc3':\n../../../libgcc/libgcc2.c:1921:26: internal compiler error: Illegal instruction\n #define COPYSIGN CONCAT2(__builtin_copysign, CEXT)\n                          ^\n../../../libgcc/libgcc2.c:1905:23: note: in definition of macro '_CONCAT2'\n #define _CONCAT2(A,B) A##B\n                       ^\n../../../libgcc/libgcc2.c:1921:18: note: in expansion of macro 'CONCAT2'\n #define COPYSIGN CONCAT2(__builtin_copysign, CEXT)\n                  ^\n../../../libgcc/libgcc2.c:2038:8: note: in expansion of macro 'COPYSIGN'\n    x = COPYSIGN (INFINITY, c) * a;\n        ^\n0xb61c93 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://github.com/Homebrew/homebrew/issues> for instructions.\nmake[3]: *** [_mulxc3.o] Error 1\nmake[3]: *** Waiting for unfinished jobs....\nIn file included from ../../../libgcc/libgcc2.c:56:0:\n../../../libgcc/libgcc2.c: In function '__fixunsxfdi':\n../../../libgcc/libgcc2.h:199:19: internal compiler error: Illegal instruction\n #define __NW(a,b) __ ## a ## di ## b\n                   ^\n../../../libgcc/libgcc2.h:298:22: note: in expansion of macro '__NW'\n #define __fixunsxfSI __NW(fixunsxf,)\n                      ^\n../../../libgcc/libgcc2.c:1788:1: note: in expansion of macro '__fixunsxfSI'\n __fixunsxfSI (XFtype a)\n ^\n0xb61c93 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://github.com/Homebrew/homebrew/issues> for instructions.\nmake[3]: *** [_divxc3.o] Error 1\n0xb61c93 crash_signal\n    ../../gcc/toplev.c:337\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://github.com/Homebrew/homebrew/issues> for instructions.\nmake[3]: *** [_fixunsxfsi.o] Error 1\nmake[3]: Leaving directory/tmp/gcc-Bf9E5g/gcc-4.9.2/build/x86_64-unknown-linux-gnu/libgcc'\nmake[2]:  [all-stage1-target-libgcc] Error 2\nmake[2]: Leaving directory /tmp/gcc-Bf9E5g/gcc-4.9.2/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory/tmp/gcc-Bf9E5g/gcc-4.9.2/build'\nmake:  [bootstrap] Error 2\n.\n$ gcc -v\nUsing built-in specs.\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) \n```\n. CentOS release 6.5 (Final)\n$ cat /proc/version\nLinux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Tue Sep 9 21:36:05 UTC 2014\n. Thanks!\nI removed all gcc dependencies and set HOMEBREW_BUILD_FROM_SOURCE=1 before doing a brew install --with-glibc again and it works.\nMy guess is it is one of the  dependency bottles that is malfunctioning. Maybe one, maybe more. The logs didn't help.\n. Not yet. I would need to bootstrap, will do it later this week.\n. I have not able to replicate this. I am closing this for now with a.\nNOTE: Check linux bottles || export HOMEBREW_BUILD_FROM_SOURCE=1\n. Fixed using: https://github.com/saketkc/linuxbrew/commit/f1113f9a5eec4f05d14fc8a4c2767454f9882cc9\n. Fixed using: https://github.com/saketkc/linuxbrew/commit/669237af07cb496bc20438723118d79335b8fa02\n. Fixes #175 #176 \n. Closed in lieu of new PRs https://github.com/Homebrew/linuxbrew/pull/186 and https://github.com/Homebrew/linuxbrew/pull/185\n. The default target should be linux, right? It iterates over all targets: https://github.com/saketkc/linuxbrew/blob/golang_fix/Library/Formula/go.rb#L54\n. I can do that. But OS.mac? would never be encountered, right?\n. Sounds good! My merge went haywire. I will open a fresh PR.\n. Note: This Formula installs on Mac OS.\n. I can confirm this behavior with another formula:\nbrew install methpipe --HEAD\nAlso see https://github.com/Homebrew/linuxbrew/issues/146\n. Example: https://travis-ci.org/saketkc/brewer/builds/41793499#L3256\n. It looks like there is no error, the git submodule --quiet foreach --recursive git checkout-index -a -f --prefix=/tmp/methpipe-AHbO1K/${toplevel/\\/home\\/travis\\/.cache\\/Homebrew\\/methpipe--git/}/$path/ command has a non zero return due to probably git checkout-index -a -f --prefix=/tmp/methpipe-AHbO1K/${toplevel/\\/home\\/travis\\/.cache\\/Homebrew\\/methpipe--git/}/$path being non zero\n. See: https://github.com/git/git/commit/1c4fb136dbad762c9c4350ee79c3474ae8037587\n. I am running git 2.1.3 on our cluster. \nsmithlab_cpp is an empty directory:\n```\n\nbrew install methpipe --HEAD -vd\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Taps/homebrew/homebrew-science/methpipe.rb\n==> Installing methpipe from homebrew/homebrew-science\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/gsl.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/glibc.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/brew.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/gcc.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/build.rb (Formulary::FromPathLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Taps/homebrew/homebrew-science/methpipe.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/gsl.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/glibc.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/gcc.rb\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/build.rb (Formulary::StandardLoader): loading /auto/cmb-06/as/skchoudh/linuxbrew/Library/Formula/git.rb\n==> Cloning https://github.com/smithlabcode/methpipe.git\ngit --git-dir /home/rcf-40/skchoudh/.cache/Homebrew/methpipe--git/.git status -s\nUpdating /home/rcf-40/skchoudh/.cache/Homebrew/methpipe--git\ngit config remote.origin.url https://github.com/smithlabcode/methpipe.git\ngit config remote.origin.fetch +refs/heads/master:refs/remotes/origin/master\ngit fetch origin\ngit checkout -f master\nAlready on 'master'\nYour branch is up-to-date with 'origin/master'.\ngit reset --hard origin/HEAD\nHEAD is now at eef8c27 Fixed a typo in src/Makefile.\ngit submodule update --init --recursive\ngit reset --hard origin/HEAD\nHEAD is now at eef8c27 Fixed a typo in src/Makefile.\ngit checkout-index -a -f --prefix=/tmp/methpipe-DCudVG/\ngit submodule --quiet foreach --recursive git checkout-index -a -f --prefix=/tmp/methpipe-DCudVG/${toplevel/\\/home\\/rcf-40\\/skchoudh\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\n==> make all\nmake[1]: Entering directory '/tmp/methpipe-DCudVG/src'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/analysis'\nmake[2]:  No rule to make target '/tmp/methpipe-DCudVG/src/smithlab_cpp/smithlab_os.o', needed by 'pmd'.  Stop.\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/analysis'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/utils'\nmake[2]:  No rule to make target '/tmp/methpipe-DCudVG/src/smithlab_cpp/MappedRead.o', needed by 'lc_approx'.  Stop.\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/utils'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/experimental'\nmake[2]:  No rule to make target '/tmp/methpipe-DCudVG/src/smithlab_cpp/smithlab_os.o', needed by 'dmr-hdhmm'.  Stop.\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/experimental'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/amrfinder'\nmake[2]:  No rule to make target '/tmp/methpipe-DCudVG/src/smithlab_cpp/smithlab_os.o', needed by 'allelicmeth'.  Stop.\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/amrfinder'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/mlml'\nmake[2]:  No rule to make target '/tmp/methpipe-DCudVG/src/smithlab_cpp/smithlab_os.o', needed by 'mlml'.  Stop.\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/mlml'\nmake[2]: Entering directory '/tmp/methpipe-DCudVG/src/radmeth'\ng++ -Wall -fmessage-length=50 -O2 -c -o regression.o regression.cpp -I/tmp/methpipe-DCudVG/src/smithlab_cpp -I../common\nregression.cpp:26:30: fatal error: smithlab_utils.hpp\n   : No such file or directory\n #include \"smithlab_utils.hpp\"\n                              ^\ncompilation terminated.\nMakefile:77: recipe for target 'regression.o' failed\nmake[2]:  [regression.o] Error 1\nmake[2]: Leaving directory '/tmp/methpipe-DCudVG/src/radmeth'\nMakefile:38: recipe for target 'all' failed\nmake[1]:  [all] Error 2\nmake[1]: Leaving directory '/tmp/methpipe-DCudVG/src'\nMakefile:25: recipe for target 'all' failed\nmake:  [all] Error 2\n/auto/cmb-06/as/skchoudh/linuxbrew/Library/Homebrew/debrew.rb:10:in `raise'\nBuildError: Failed executing: make all\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\nChoose an action: 5\nWhen you exit this shell, you will return to the menu.\nXTERM\nWelcome to hpc-cmb\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG)\n(0)> ls\nauto  docs  Makefile  README.md  src\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG)\n(0)> cd src/\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG/src)\n(0)> ls\namrfinder  analysis  common  common-experimental  experimental  Makefile  mlml  pipeline  radmeth  samtools  smithlab_cpp  utils\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG/src)\n(0)> cd smithlab_cpp/\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG/src/smithlab_cpp)\n(0)> ls\nskchoudh@hpc-cmb(/tmp/methpipe-DCudVG/src/smithlab_cpp)\n\n```\n. On a local install:\n```\n$ brew install methpipe --HEAD\n==> Installing methpipe from homebrew/homebrew-science\n==> Cloning https://github.com/smithlabcode/methpipe.git\nUpdating /home/saket/.cache/Homebrew/methpipe--git\n/home/saket/.linuxbrew/Cellar/git/2.1.3/libexec/git-core/git-submodule: 1: eval: Bad substitution\nStopping at 'src/smithlab_cpp'; script returned non-zero status.\nError: Failure while executing: git submodule --quiet foreach --recursive git\\ checkout-index\\ -a\\ -f\\ --prefix=/tmp/methpipe-rLKCOH/${toplevel/\\/home\\/saket\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\nsaket@saket-launchpad:/media/data1/Development_Version_Controlled/OpenSource/saketkc/brewer$ brew install methpipe --HEAD -v\n==> Installing methpipe from homebrew/homebrew-science\n==> Cloning https://github.com/smithlabcode/methpipe.git\ngit --git-dir /home/saket/.cache/Homebrew/methpipe--git/.git status -s\nUpdating /home/saket/.cache/Homebrew/methpipe--git\ngit config remote.origin.url https://github.com/smithlabcode/methpipe.git\ngit config remote.origin.fetch +refs/heads/master:refs/remotes/origin/master\ngit fetch origin\ngit checkout -f master\nAlready on 'master'\nYour branch is up-to-date with 'origin/master'.\ngit reset --hard origin/HEAD\nHEAD is now at eef8c27 Fixed a typo in src/Makefile.\ngit submodule update --init --recursive\ngit reset --hard origin/HEAD\nHEAD is now at eef8c27 Fixed a typo in src/Makefile.\ngit checkout-index -a -f --prefix=/tmp/methpipe-VO9KNV/\ngit submodule --quiet foreach --recursive git checkout-index -a -f --prefix=/tmp/methpipe-VO9KNV/${toplevel/\\/home\\/saket\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\n/home/saket/.linuxbrew/Cellar/git/2.1.3/libexec/git-core/git-submodule: 1: eval: Bad substitution\nStopping at 'src/smithlab_cpp'; script returned non-zero status.\nError: Failure while executing: git submodule --quiet foreach --recursive git\\ checkout-index\\ -a\\ -f\\ --prefix=/tmp/methpipe-VO9KNV/${toplevel/\\/home\\/saket\\/.cache\\/Homebrew\\/methpipe--git/}/$path/\n``\n. Closing, since no longer reproducible.\n. You needapr-1-configinstalled. Does this help:brew tap homebrew/homebrew-apachebrew install aprbrew install svn`\nAlso see: https://github.com/Homebrew/homebrew/issues/20405\n. Can you post the (new) output of brew install svn -v?\n. This patch fixes that error for me. It however now fails with gssapi missing:\n``` diff\ndiff --git a/Library/Formula/subversion.rb b/Library/Formula/subversion.rb\nindex 041deb5..103ecff 100644\n--- a/Library/Formula/subversion.rb\n+++ b/Library/Formula/subversion.rb\n@@ -69,7 +69,9 @@ class Subversion < Formula\n       # scons ignores our compiler and flags unless explicitly passed\n       args = %W[PREFIX=#{serf_prefix} GSSAPI=/usr CC=#{ENV.cc}\n                 CFLAGS=#{ENV.cflags} LINKFLAGS=#{ENV.ldflags}\n-                OPENSSL=#{Formula[\"openssl\"].opt_prefix}]\n+                OPENSSL=#{Formula[\"openssl\"].opt_prefix}\n+                APR=\"#{Formula['apr'].bin}/apr-1-config\" \n+                APU=\"#{Formula['apr-util'].bin}/apu-1-config\"]\n       scons *args\n       scons \"install\"\n``\n. You need to install kerb5 from here: http://web.mit.edu/kerberos/dist/index.html\nand put it in your system path. I have not tested this.\nAlso you need tobrew install bison` for installing this. \nThere should ideally be a formula for this.\n. And you will have to edit GSSAPI in subversion.rb accordingly.\n. brew edit subversion\nGSSAPI needs to be set to your prefix location:\n./configure --prefix=/path/to/xyz\nmake && make install\nThen set GSSAPI=/path/to/xyz using brew edit subversion\n. Can you post the output of find ~/.linuxbrew/lib/ -name \"libserf*\"\n. How did you install libserf?\nI might not be the best person to advice on this.\n. It's a circle ;-)\nhttps://github.com/Homebrew/homebrew/issues/34223\n. What version of gcc do you have currently?\nAlso see, https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. I might not be the best person to advice, but you might want to symlink gcc  to $prefix/bin as in the link above. Then do a export HOMEBEW_CC=gcc-4.8\n. You don't need a sudo. What does where gcc return?\nYou also need $prefix to be in your PATH before /usr/bin, /bin etc.\n. I think you didn't set your prefix, before running those commands, it should not require a sudo. You need to set your prefix to \nprefix=~/.linuxbrew (assuming your linuxbrew is located in ~/.linuxbrew. Then do a \nexport PATH=\"$prefix/bin:$prefix/sbin:$PATH\"\n. With no patches: https://travis-ci.org/saketkc/brewer/builds/42146560#L357\n. Working on it.\n. I might not have time to check each individual patch being applied from the patch url, but the current fix(is OS.mac?) works for me. \nI need this to build for testing https://github.com/Homebrew/homebrew-science/issues/1371\n. It does build for me(locally), and on Travis too.\nhttps://travis-ci.org/saketkc/brewer/builds/42260292#L166\n. No clue. Still failing on travis:\nhttps://travis-ci.org/saketkc/brewer/builds/42342148\n. What's your gcc version?\n. Same version.\nhttps://travis-ci.org/saketkc/brewer/builds/42359007#L284\nThere seems to be some hidden 'magic' going on;-)\n. I rebuilt it. It has a pretty strange behavior:\nDoes not build without -v:\nbrew install libmagic\n``\n==> make install\nmake[2]: *** [file] Error 1\nmake[2]: Leaving directory/tmp/libmagic-29skSf/file-5.20/src'\nmake[1]:  [install] Error 2\nmake[1]: Leaving directory `/tmp/libmagic-29skSf/file-5.20/src'\nmake:  [install-recursive] Error 1\n```\nBuilds with -v:\nbrew install libmagic.rb -v\n```\n==> Downloading ftp://ftp.astron.com/pub/file/file-5.20.tar.gz\nAlready downloaded: /home/saket/.cache/Homebrew/libmagic-5.20.tar.gz\n==> Verifying libmagic-5.20.tar.gz checksum\ntar xf /home/saket/.cache/Homebrew/libmagic-5.20.tar.gz\n==> Downloading https://gist.githubusercontent.com/kwilczynski/350e83c291b536ce9b5b/raw/1961a222d13cd3e010ecd7b0ebbc6909def27ad6/337-338.diff\nAlready downloaded: /home/saket/.cache/Homebrew/libmagic--patch-b220e2b0639cba97296e25c07c58a4d675104c8f.diff\n==> Verifying libmagic--patch-b220e2b0639cba97296e25c07c58a4d675104c8f.diff checksum\n==> Patching\npatching file src/getline.c\nHunk #1 succeeded at 80 with fuzz 1 (offset 4 lines).\npatch -g 0 -f -d /tmp/libmagic-svfOkJ/file-5.20 -p1 -i /tmp/libmagic--patch-zlXVZi/337-338.diff\npatching file ChangeLog\npatching file Makefile.in\npatching file aclocal.m4\npatching file config.h.in\npatching file configure\npatching file configure.ac\npatching file doc/Makefile.in\npatching file magic/Makefile.in\npatching file python/Makefile.in\npatching file src/Makefile.in\npatching file src/file.c\npatching file src/file.h\npatching file src/fsmagic.c\npatching file tests/Makefile.in\n==> ./configure --disable-dependency-tracking --prefix=/home/saket/.linuxbrew/Cellar/libmagic/5.20 --enable-fsect-man5\n[.. snipped..]\n==> Summary\n/home/saket/.linuxbrew/Cellar/libmagic/5.20: 15 files, 3.2M, built in 9 seconds\n``\n. @sjackman Version5.21fixes and should not require any of those patches. I cannot send a PR tohomebrew` updating the version, since I do not have access to a Mac.\nAre package updates accepted for linuxbrew(only)?\n. Have seen this before. Can you try:\nbrew reinstall openssl\n. Does it install after export HOMEBREW_CC=gcc-4.9? (or gcc-4.x)?\n. I think you need an explicit gcc-4.x and not just gcc on system path:\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\n. I am assuming which gcc-4.8 returns non emtpy string, after symlinking?\n. Have had similar issues with CentOS before. Though symlinking  and pre-pending it as in https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#to-use-gcc-44-on-centos-5 has worked for me.\n. Python.h ships with python-dev package. I think brew install python shoulld get you through.\n. No longer have a mac to test this out.\n. Yes, my bad, got confused.\n. java -version 2>&1 | awk -F '\"' '/version/ {print $2}'?\n. @sjackman java -version 2>&1 | awk -F '\"' '/version/ {($2 >= \"1.7\")?err=0:err=1} END{exit err}'\nIs it okay to use pipes with quiet_system, best practice wise?\n. Closing in lieu of #229 \n. Not a rubyist, but I am going to give it a shot.\nNot sure about any formula asserting jdk version to be above certain version.\n. @sjackman I am not sure if the ruby version can be tidied up. However please not that you cannot use return quiet_system whatever, else it would pass through, always(Since it always returns non null as opposed to just using quiet_system without return).\n. @sjackman You would be able to check only for a particular version using `java -version 2>&1.include? \"1.8\". What if 1.8+  is supported, like 1.9.0_67 ?\n. Sorry, my bad. I must have misunderstood the check to verify a minimal version, since the Mac specific code checked for1.7+.\n. Good to merge @sjackman?\n. I did it at one point of time. Looks like I forced rewrite my commits.\n. Found it: https://github.com/saketkc/linuxbrew/commit/e9104d5e027345c82885915b50bfac9829a219fe\n. @sjackman If I usechmod 776, \"#{doc}\"` I get:\n``\n==> make DEST_HOME=/home/saket/.linuxbrew/Cellar/p7zip/9.20.1 DEST_MAN=/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/man install\nfind:/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip': Permission denied\n/usr/bin/du: cannot access \u2018/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip/ChangeLog\u2019: Permission denied\n/usr/bin/du: cannot access \u2018/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip/README\u2019: Permission denied\n/usr/bin/du: cannot access \u2018/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip/DOCS\u2019: Permission denied\n```\nIs this not the right way to it?\n. I think it is still needed:\nAfter removing that system \"chmod -R +w #{doc}\":\n```\n$ brew uninstall p7zip.rb \nUninstalling /home/saket/.linuxbrew/Cellar/p7zip/9.20.1...\nError: Permission denied - /home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip/DOCS/lzma.txt\n``\n. If I change it tochmod 0776, \"#{doc}/\"`:\n```\n$ brew install p7zip.rb \n==> Downloading https://downloads.sourceforge.net/project/p7zip/p7zip/9.20.1/p7zip_9.20.1_src_all.tar.bz2\nAlready downloaded: /home/saket/.cache/Homebrew/p7zip-9.20.1.tar.bz2\n==> Patching\n==> make all3 CC=/usr/bin/gcc-4.8 $(ALLFLAGS) CXX=/usr/bin/g++-4.8 $(ALLFLAGS)\n==> make DEST_HOME=/home/saket/.linuxbrew/Cellar/p7zip/9.20.1 DEST_MAN=/home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/man install\nError: Permission denied - /home/saket/.linuxbrew/Cellar/p7zip/9.20.1/share/doc/p7zip/DOCS/lzma.txt\n``\n. I edited theinstall.shscript to get it working.\n. Fixed.\n. Submitted https://github.com/Homebrew/homebrew/pull/35675/\n.inreplace \"install.sh\", /^chmod (444|555).*/, \"\"Makes sense, will do.\n. Possibly failing because of old gcc. Builds fine locally.\n. It could possibly because of a missing dependency as listed on here:\nhttp://www.emacswiki.org/emacs/BuildingEmacs\n. Can you post the output ofbrew gist-logs emacs?\n. Sorry I should have asked forxbrew gist-logs  emacs --with-gnutls --with-imagemagic  --with-x11`\nAbout the warning, it should ideally be:\nexport PATH=\"$HOME/.linuxbrew/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH\"\nIt is recommended to have linuxbrew/bin appear at the start of your $PATH, not the other way round.\n. I think it is this: https://bugs.launchpad.net/ubuntu/+source/gcc-4.6/+bug/1269803\n. Isn't it explained by https://bugs.launchpad.net/ubuntu/+source/gcc-4.6/+bug/1269803\n. Good to merge? @sjackman \n. Changing depends_on 'pkg-config => :build in cloog.rb to a hard dependency?\n. Yes, I think we should get rid of :build\n. I am not aware of any existing way to do this, but won't just sourcing the ~/.bashrc of the user who installed linuxbrew work?\n. Avoiding the single line change that would have been easier, since the empty space generated breaks to configure.py script.\n. @paulhybryant brew update\nLatest one on Homebrew/Linuxbrew is 2.44 \n. See: https://github.com/Homebrew/homebrew/pull/33177/\nIt installs to libexec:\n$ ls ~/.linuxbrew/Cellar/open-mpi/1.8.4/libexec/\nvtsetup.jar\n. Wild guess, but you might want to check if setting LD_LIBRARY_PATH helps(I don't think this is recommended though)\nhttps://github.com/Homebrew/linuxbrew/issues/150\n. This is because they build mpi differently:\nhttps://github.com/Homebrew/homebrew-science/blob/master/sundials.rb#L58\nhttps://github.com/Homebrew/homebrew-science/blob/master/hypre.rb#L81\nI am guessing, https://github.com/Homebrew/homebrew-science/blob/master/hypre.rb#L83 does not pickup your ENV.CXX to the linuxbrew specific gcc(Again, wild guess)\n. It's cmake build that is failing.\nbrew install cmake -v or brew gist-logs cmake\n. Fixed\n. Yes.\n```\n--- a/Library/Formula/sqlite.rb\n+++ b/Library/Formula/sqlite.rb\n@@ -39,6 +39,7 @@ class Sqlite < Formula\n   end\ndef install\n+    ENV.deparallelize\n```\n/home/saket/.linuxbrew/Cellar/sqlite/3.8.10.1: 9 files, 2.7M, built in 31 seconds\n. chmod -R 755 $HOME/\n. I suspect  you made changes to your $HOME with sudo.\nsudo chown <username> $HOME\n. @sjackman I think it is this: https://github.com/google/github-issue-mover\n. Can you retry after doing export HOMEBREW_CC=gcc\n. I had a similar issue, when installing linuxbrew on a new machine with gcc-4.4.\nJust doing, export HOMEBREW_CC=gcc worked. \n. @dpo did manage to hack around that. \nSee: https://github.com/Homebrew/homebrew-science/issues/1795#issuecomment-75081443\n. Here is a hacked version of `.travis.yml' building: https://travis-ci.org/saketkc/linuxbrew/builds/85045113\nIt currently complains of git missing, which should probably go to @sjackman's Dockerfile?\nI am a novice docker user and I am not even sure, if it is going to do properly what it is supposed to.\n. Have you tried running these commands, with a set -ex in your bash script.\nAlso, gcc-4.9 step is not required now.\nSee: https://github.com/Homebrew/linuxbrew/issues/517#issuecomment-133909939 and the follow up comments.\nbrew install glibc\nbrew unlink glibc\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/zlib.rb\nbrew reinstall binutils\nbrew link glibc\nbrew install patchelf\nbrew install gcc --with-glibc -v\n. > At the last line of course there is a blinking command prompt to choose an action, but further steps won't work.\nYou can choose to get into the shell mode by choosing '5'?\n\nSide question, what does set -x do?\n\nPrints the last command run. Setting this in your bash script will explicitly tell you the line where it fails\nCan you try:\nbrew unlink gawk\nbrew install glibc\nbrew unlink glibc\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/zlib.rb\nbrew reinstall binutils\nbrew link glibc\nbrew install patchelf\nbrew install gcc --with-glibc -v\nrm -f ~/.linuxbrew/lib/{libstdc++.so.6,libgcc_s.so.1}\nbrew link gcc\nexport HOMEBREW_CC=gcc\n. @ahundt I would recommend a clean install. I am still relatively new to linuxbrew, so that might not be the best solution.\ncc @sjackman \n. Is this a 32 bit system?\n. You might want to symlink  /home/arun/.linuxbrew/bin/g++-5 to /home/arun/.linuxbrew/bin/g++ and see if CMake then picks it up.\n. A quick fix:\nhttps://github.com/Homebrew/linuxbrew/commit/e9b2f2b7bc80ac0ad745dc9b44ec6a077d3758a2#diff-12e3ebbe912ff67cc6ccc040b6fa3382L29\n``` diff\ndiff --git a/Library/Homebrew/global.rb b/Library/Homebrew/global.rb\nindex 54c2e36..d60e72a 100644\n--- a/Library/Homebrew/global.rb\n+++ b/Library/Homebrew/global.rb\n@@ -26,6 +26,15 @@ else\n end\n RUBY_BIN = RUBY_PATH.dirname\n+if RUBY_PLATFORM =~ /darwin/\n+  MACOS_FULL_VERSION = /usr/bin/sw_vers -productVersion.chomp\n+  MACOS_VERSION = MACOS_FULL_VERSION[/10.\\d+/]\n+  OS_VERSION = \"OS X #{MACOS_FULL_VERSION}\"\n+  else\n+    MACOS_FULL_VERSION = MACOS_VERSION = \"0\"\n+    OS_VERSION = RUBY_PLATFORM\n+end\n+\n```\n. It doesn't really fix it.\n``\n brew install pkg-config\nError: uninitialized constant Checks::MacOS\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/saket/.linuxbrew/Library/Homebrew/cmd/doctor.rb:253:in'\n/home/saket/.linuxbrew/Library/Homebrew/cmd/doctor.rb:48:in <top (required)>'\n/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in require'\n/home/saket/.linuxbrew/Library/Homebrew/cmd/install.rb:2:in'\n/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in require'\n/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n/home/saket/.linuxbrew/Library/brew.rb:72:in require?'\n/home/saket/.linuxbrew/Library/brew.rb:123:in'\n``\n. Also this: (supernvshould not be invoked forlinuxbrew`, right?)\n```\n$ brew audit xyz                                               \nError: uninitialized constant Superenv::MacOS\nPlease report this bug:\nhttps://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/saket/.linuxbrew/Library/Homebrew/extend/ENV/super.rb:29:in bin'\n/home/saket/.linuxbrew/Library/Homebrew/extend/ENV.rb:7:insuperenv?'\n/home/saket/.linuxbrew/Library/Homebrew/extend/ENV.rb:12:in activate_extensions!'\n/home/saket/.linuxbrew/Library/Homebrew/cmd/audit.rb:25:inaudit'\n/home/saket/.linuxbrew/Library/brew.rb:146:in `'\n```\n. I suspect, the issue is here:\nhttps://github.com/Homebrew/homebrew/commit/beed39e46fa021dd1c133c2c8eaaa81b524e68c7#diff-23335809c452169ea76c54df1816fb54R11\nDoes it not require an equivalent require \"os/linux\"?\n. inreplace \"install.sh\", /^chmod .*/, \"\" would be too general, because there are lines like:\nchmod 555 \"${DEST_DIR}${DEST_SHARE}/${prg}\"\n. Oops, yes!\n. This would still not work on linux, right?\n. That's what I tried. It still leads to an empty space, and configure.py recognises it as an extra option.\n. ",
    "gitfoxi": "Do you really think this issue is closed?\n. This is what I get:\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: error while loading shared libraries: libgmp.so.10: cannot open shared object file: No such file or directory\nconfigure: error: cannot determine current directory\nIt maddeningly rebuilds gmp for 15 minutes then loses track of it (and also the gmp that I have installed) and gives this message on running ./configure for ghc.\n. ghc depends on newer glibc:\n[m@vm ghc-7.10.1]$ export LD_LIBRARY_PATH=/home/m/.linuxbrew/lib\n[m@vm ghc-7.10.1]$ ./configure\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: /lib64/libc.so.6: version `GLIBC_2.6' not found (required by libraries/unix/dist-install/build/libHSunix-2.7.1.0-G4Yo1pNtYrk8nCq1cx8P9d-ghc7.10.1.so)\nutils/ghc-pwd/dist-install/build/tmp/ghc-pwd: /lib64/libc.so.6: version `GLIBC_2.11' not found (required by libraries/unix/dist-install/build/libHSunix-2.7.1.0-G4Yo1pNtYrk8nCq1cx8P9d-ghc7.10.1.so)\nutils/ghc-pwd/dist-install/build/tmp/ghc-pwd: /lib64/libc.so.6: version `GLIBC_2.7' not found (required by libraries/base/dist-install/build/libHSbase-4.8.0.0-I5BErHzyOm07EBNpKBEeUv-ghc7.10.1.so)\nconfigure: error: cannot determine current directory\n. I've been working through Standalone Installation. It's really tricky to get it right, fraught with restarts but hopefully getting close ...\n. Tk wouldn't be much good --without-x11?\nbrew gist-logs is another thing that isn't working. Maybe it uses Ruby? I'll paste them by hand:\nhttps://gist.github.com/gitfoxi/0d8c7fcf0f4a655f5751\n. Tk is what you need to do simple GUIs in Python. I use it sometimes. Anyway, you could use something else like qt, gtk or wx -- they all still need x11.\nThere was no error message from brew gist-logs it seems to hang.\n. I've been able to build xlib and tcl/tk. I could make a formula for xlib (maybe calling it x11-xlib). But there needs to be some logic that understands that x11-xlib is only necessary for things that depend on x11 under standalone-linuxbrew. Do you think that's doable?\nI mean, somewhere deep in the heart of homebrew, there's an :x11 dependency. The current logic says if you're on OSX you need XQuartz, but if you're on Linux it's assumed you have everything you need. There needs to be some special tracking for standalone installations which translates the :x11 requirement to x11-xlib. This just provides the small(-ish) X11 client libraries. It's still assumed your regular platform provides the X server.\n. Yes. I installed libffi and that's when I hit the strange error while loading shared libraries when running ldd on the ghc binary. But maybe I should figure out if I can make a better glibc before I try to go further.\n. Yes. I have patchelf.\n. https://gist.github.com/anonymous/9f52b66137c9f5db01c3\n. It looks like the bootstrapping compiler is downloaded from haskell.org\nurl \"http://downloads.haskell.org/~ghc/7.10.1/ghc-7.10.1-x86_64-unknown-linux-deb7.tar.xz\"\nTheir compilers have not worked with Centos5 in a while. I think they target Centos6. There's another bootstrapping compiler which is older but may work (I'm trying it now).\nhttp://justhub.org/download\nIt's not obvious how to integrate with homebrew though since they want you to use yum to install in a specific location /usr/hs.\nMaybe if I can succeed in building ghc 7.10 under linux then that can be uploaded somewhere to serve as a more compatible bootstrapping compiler.\n. This trick might help with some things:\ncd ~/.linuxbrew/lib\nln -s libncurses.so.5 libtinfo.so.5\nI guess on some Linuxes these are two different libraries but under the brewed ncurses they are the same.\n. It notice that some stuff isn't getting included in the gist-logs. Probably another bug there.\nAfter building gmp, the script tries to install the pre-built ghc. First it tries to patch a bunch of ELFs. One or two of those go wrong.\n/home/cavtools/.linuxbrew/opt/patchelf/bin/patchelf --set-rpath /home/cavtools/.linuxbrew/lib --set-interpreter /home/cavtools/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 utils/ghc-cabal/dist-install/build/tmp/ghc-cabal\n/home/cavtools/.linuxbrew/Library/Homebrew/debrew.rb:11:in `raise'\nRuntimeError: Not a Mach-O binary.\nIf I continue past that, it gets to where it's calling ginstall. At this point, there's what looks like a linker malfunction:\n```\n\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" = directory to install to\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"\nfor i in  rts/dist/build/libHSrts.a rts/dist/build/libHSrts_p.a rts/dist/build/libHSrts-ghc7.10.1.so rts/dist/build/libHSrts_l.a rts/dist/build/libHSrts_debug.a rts/dist/build/libHSrts_thr.a rts/dist/build/libHSrts_thr_debug.a rts/dist/build/libHSrts_thr_l.a rts/dist/build/libHSrts_thr_p.a rts/dist/build/libHSrts_debug-ghc7.10.1.so rts/dist/build/libHSrts_thr-ghc7.10.1.so rts/dist/build/libHSrts_thr_debug-ghc7.10.1.so rts/dist/build/libHSrts_l-ghc7.10.1.so rts/dist/build/libHSrts_thr_l-ghc7.10.1.so rts/dist/build/libffi.so.6 rts/dist/build/libffi.so.6.0.2 rts/dist/build/libffi.so rts/dist/build/libCffi.a rts/dist/build/libCffi_p.a rts/dist/build/libCffi_l.a rts/dist/build/libCffi_debug.a rts/dist/build/libCffi_thr.a rts/dist/build/libCffi_thr_debug.a rts/dist/build/libCffi_thr_l.a rts/dist/build/libCffi_thr_p.a; do case $i in .a) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"; true  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"/basename $i ;; .dll) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" ; strip  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"/basename $i ;; .so) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" ;; .dylib) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\";; *) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"; esac; done\n\"utils/ghc-cabal/dist-install/build/tmp/ghc-cabal-bindist\" copy libraries/ghc-prim dist-install \"strip\" '' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share/doc/ghc/html/libraries' 'v p dyn'\nInstalling library in\n/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/ghcpr_8TmvWUcS1U1IKHT0levwg3\nBFD: dist-install/build/stk08bhf: Not enough room for program headers, try linking with -N\nstrip:dist-install/build/stk08bhf[.note.gnu.build-id]: Bad value\nBFD: dist-install/build/stk08bhf: Not enough room for program headers, try linking with -N\nstrip:dist-install/build/stk08bhf: Bad value\nghc.mk:918: recipe for target 'install_packages' failed\nmake[1]:  [install_packages] Error 1\nMakefile:24: recipe for target 'install' failed\nmake:  [install] Error 2\n/home/cavtools/.linuxbrew/Library/Homebrew/debrew.rb:11:in `raise'\n```\n. Here's the whole log of the phase that fails:\n```\n2015-04-17 19:57:23 +0000\nmake\n-j1\ninstall\nmake -r --no-print-directory -f ghc.mk install BINDIST=YES NO_INCLUDE_DEPS=YES\n\"rm\" -f utils/ghc-pkg/dist-install/build/Version.hs\necho \"module Version where\"                    >> utils/ghc-pkg/dist-install/build/Version.hs\necho \"version, targetOS, targetARCH :: String\" >> utils/ghc-pkg/dist-install/build/Version.hs\necho \"version    = \\\"7.10.1\\\"\"      >> utils/ghc-pkg/dist-install/build/Version.hs\necho \"targetOS   = \\\"linux\\\"\"        >> utils/ghc-pkg/dist-install/build/Version.hs\necho \"targetARCH = \\\"x86_64\\\"\"      >> utils/ghc-pkg/dist-install/build/Version.hs\n\"rm\" -f utils/ghc-pkg/dist/build/Version.hs\necho \"module Version where\"                    >> utils/ghc-pkg/dist/build/Version.hs\necho \"version, targetOS, targetARCH :: String\" >> utils/ghc-pkg/dist/build/Version.hs\necho \"version    = \\\"7.10.1\\\"\"      >> utils/ghc-pkg/dist/build/Version.hs\necho \"targetOS   = \\\"linux\\\"\"        >> utils/ghc-pkg/dist/build/Version.hs\necho \"targetARCH = \\\"x86_64\\\"\"      >> utils/ghc-pkg/dist/build/Version.hs\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci-7.10.1\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                   \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci-7.10.1\"\necho '#!/bin/sh'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci-7.10.1\"\necho 'exec \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\" --interactive \"$@\"' >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci-7.10.1\"\nchmod +x                                 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci-7.10.1\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci\"\nln -s ghci-7.10.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghci\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/.\" && /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/./.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/./\" &&   /home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts\" && /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/rts/.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts/\" &&   /home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts/prof\" && /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/rts/prof/.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts/prof/\" &&   /home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts/storage\" && /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/rts/storage/.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/rts/storage/\" &&   /home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/stg\" && /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/stg/*.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/stg/\" &&  true\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  includes/ghcautoconf.h includes/ghcplatform.h includes/ghcversion.h includes/dist-derivedconstants/header/DerivedConstants.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  rts/dist/build/ffi.h rts/dist/build/ffitarget.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'exeprog=\"haddock\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\ncat utils/haddock/haddock.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock-ghc-7.10.1\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Classic.theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/latex/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/frames.html \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/haddock-util.js \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Classic.theme/haskell_icon.gif \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Classic.theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Classic.theme/minus.gif \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Classic.theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Classic.theme/plus.gif \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Classic.theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Classic.theme/xhaddock.css \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Classic.theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Ocean.std-theme/hslogo-16.png \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Ocean.std-theme/minus.gif \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Ocean.std-theme/ocean.css \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Ocean.std-theme/plus.gif \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/html/Ocean.std-theme/synopsis.png \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/html/Ocean.std-theme/\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/haddock/haddock-api/resources/latex/haddock.sty \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/latex/\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock\"\nln -s haddock-ghc-7.10.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/haddock\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'exeprog=\"hsc2hs\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\necho 'HSC2HS_EXTRA=\"--cflag=-fno-stack-protector \"' >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\ncat utils/hsc2hs/hsc2hs.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hsc2hs\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  utils/hsc2hs/template-hsc.h \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'exeprog=\"ghc-pkg\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\ncat utils/ghc-pkg/ghc-pkg.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg-7.10.1\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg\"\nln -s ghc-pkg-7.10.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-pkg\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'exeprog=\"hpc\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\ncat utils/hpc/hpc.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/hpc\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'exeprog=\"runghc\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\ncat utils/runghc/runghc.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc-7.10.1\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runhaskell\"\nln -s runghc \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runhaskell\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc\"\nln -s runghc-7.10.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/runghc\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"\n\"rm\" -f                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\ncreate () { touch \"$1\" && chmod 755 \"$1\" ; } && create                                           \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho '#!/bin/sh'                                       >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'exedir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"'                    >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'exeprog=\"ghc-stage2\"'                          >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'executablename=\"$exedir/$exeprog\"'           >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'datadir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share\"'                             >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'bindir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'topdir=\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"'                               >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\necho 'executablename=\"$exedir/ghc\"' >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\ncat ghc/ghc.wrapper                         >> \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\nchmod +x                                         \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc-7.10.1\"\n\"rm\" -f \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc\"\nln -s ghc-7.10.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/bin/ghc\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share/man\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share/man/man1\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 644  docs/man/ghc.1 \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share/man/man1\"\ndriver/ghc-usage.txt driver/ghci-usage.txt includes/dist-derivedconstants/header/platformConstants settings = libraries to install\n\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\" = directory to install to\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"\nfor i in  driver/ghc-usage.txt driver/ghci-usage.txt includes/dist-derivedconstants/header/platformConstants settings; do case $i in .a) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"; true  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"/basename $i ;; .dll) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\" ; strip  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"/basename $i ;; .so) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\" ;; .dylib) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\";; ) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"; esac; done\n/home/cavtools/.linuxbrew/bin/gcc-4.9 -E -isystem/home/cavtools/.linuxbrew/include -undef -traditional -P -DINSTALLING -DLIB_DIR='\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"' -DINCLUDE_DIR='\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/include\"' -DPAPI_INCLUDE_DIR=\"\" -DPAPI_LIB_DIR=\"\" -DFFI_INCLUDE_DIR= -DFFI_LIB_DIR= '-DFFI_LIB=\"Cffi\"' -x c -Iincludes -Iincludes/dist -Iincludes/dist-derivedconstants/header -Iincludes/dist-ghcconstants/header rts/package.conf.in -o rts/dist/package.conf.install.raw\ngrep -v '^#pragma GCC' rts/dist/package.conf.install.raw | sed -e 's/\"\"//g' -e 's/:[    ],/: /g' >rts/dist/package.conf.install\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"\nfor i in utils/haddock/dist/build/tmp/haddock utils/haddock/dist/build/tmp/haddock utils/hsc2hs/dist-install/build/tmp/hsc2hs utils/hsc2hs/dist-install/build/tmp/hsc2hs utils/ghc-pkg/dist-install/build/tmp/ghc-pkg utils/ghc-pkg/dist-install/build/tmp/ghc-pkg utils/hpc/dist-install/build/tmp/hpc utils/hpc/dist-install/build/tmp/hpc utils/runghc/dist-install/build/tmp/runghc utils/runghc/dist-install/build/tmp/runghc ghc/stage2/build/tmp/ghc-stage2 ghc/stage2/build/tmp/ghc-stage2; do \\\n    /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin\"; \\\ndone\n\"mv\" \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin/ghc-stage2\" \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/bin/ghc\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1\"\n\"rm\" -rf \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/package.conf.d\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/package.conf.d\"\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"\nrts/dist/build/libHSrts.a rts/dist/build/libHSrts_p.a rts/dist/build/libHSrts-ghc7.10.1.so rts/dist/build/libHSrts_l.a rts/dist/build/libHSrts_debug.a rts/dist/build/libHSrts_thr.a rts/dist/build/libHSrts_thr_debug.a rts/dist/build/libHSrts_thr_l.a rts/dist/build/libHSrts_thr_p.a rts/dist/build/libHSrts_debug-ghc7.10.1.so rts/dist/build/libHSrts_thr-ghc7.10.1.so rts/dist/build/libHSrts_thr_debug-ghc7.10.1.so rts/dist/build/libHSrts_l-ghc7.10.1.so rts/dist/build/libHSrts_thr_l-ghc7.10.1.so rts/dist/build/libffi.so.6 rts/dist/build/libffi.so.6.0.2 rts/dist/build/libffi.so rts/dist/build/libCffi.a rts/dist/build/libCffi_p.a rts/dist/build/libCffi_l.a rts/dist/build/libCffi_debug.a rts/dist/build/libCffi_thr.a rts/dist/build/libCffi_thr_debug.a rts/dist/build/libCffi_thr_l.a rts/dist/build/libCffi_thr_p.a = libraries to install\n\"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" = directory to install to\n/home/cavtools/.linuxbrew/bin/ginstall -c -m 755 -d  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"\nfor i in  rts/dist/build/libHSrts.a rts/dist/build/libHSrts_p.a rts/dist/build/libHSrts-ghc7.10.1.so rts/dist/build/libHSrts_l.a rts/dist/build/libHSrts_debug.a rts/dist/build/libHSrts_thr.a rts/dist/build/libHSrts_thr_debug.a rts/dist/build/libHSrts_thr_l.a rts/dist/build/libHSrts_thr_p.a rts/dist/build/libHSrts_debug-ghc7.10.1.so rts/dist/build/libHSrts_thr-ghc7.10.1.so rts/dist/build/libHSrts_thr_debug-ghc7.10.1.so rts/dist/build/libHSrts_l-ghc7.10.1.so rts/dist/build/libHSrts_thr_l-ghc7.10.1.so rts/dist/build/libffi.so.6 rts/dist/build/libffi.so.6.0.2 rts/dist/build/libffi.so rts/dist/build/libCffi.a rts/dist/build/libCffi_p.a rts/dist/build/libCffi_l.a rts/dist/build/libCffi_debug.a rts/dist/build/libCffi_thr.a rts/dist/build/libCffi_thr_debug.a rts/dist/build/libCffi_thr_l.a rts/dist/build/libCffi_thr_p.a; do case $i in .a) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"; true  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"/basename $i ;; .dll) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" ; strip  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"/basename $i ;; .so) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\" ;; .dylib) /home/cavtools/.linuxbrew/bin/ginstall -c -m 755  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\";; *) /home/cavtools/.linuxbrew/bin/ginstall -c -m 644  $i  \"/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/rts\"; esac; done\n\"utils/ghc-cabal/dist-install/build/tmp/ghc-cabal-bindist\" copy libraries/ghc-prim dist-install \"strip\" '' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1' '/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/share/doc/ghc/html/libraries' 'v p dyn'\nInstalling library in\n/tmp/ghc20150417-22614-53t64a/ghc-7.10.1/subfo/lib/ghc-7.10.1/ghcpr_8TmvWUcS1U1IKHT0levwg3\nBFD: dist-install/build/stk08bhf: Not enough room for program headers, try linking with -N\nstrip:dist-install/build/stk08bhf[.note.gnu.build-id]: Bad value\nBFD: dist-install/build/stk08bhf: Not enough room for program headers, try linking with -N\nstrip:dist-install/build/stk08bhf: Bad value\nghc.mk:918: recipe for target 'install_packages' failed\nmake[1]:  [install_packages] Error 1\nMakefile:24: recipe for target 'install' failed\nmake:  [install] Error 2\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: f93b72990837f3f679c6ca926e2c49ccb2d517f0\nLast commit: 2 days ago\nHOMEBREW_PREFIX: /home/cavtools/.linuxbrew\nHOMEBREW_CELLAR: /home/cavtools/.linuxbrew/Cellar\nCPU: 8-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 2.2.1 => /home/cavtools/.linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nPerl: /usr/bin/perl\nPython: /home/cavtools/.linuxbrew/bin/python => /home/cavtools/.linuxbrew/Cellar/python/2.7.9/bin/python2.7\nRuby: /home/cavtools/.linuxbrew/bin/ruby => /home/cavtools/.linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nJava: 1.6.0_34\nCC: /home/cavtools/.linuxbrew/bin/gcc-4.9 => /home/cavtools/.linuxbrew/Cellar/gcc/4.9.2_1/bin/gcc-4.9\nCXX: /home/cavtools/.linuxbrew/bin/g++-4.9 => /home/cavtools/.linuxbrew/Cellar/gcc/4.9.2_1/bin/g++-4.9\nOBJC: /home/cavtools/.linuxbrew/bin/gcc-4.9\nOBJCXX: /home/cavtools/.linuxbrew/bin/g++-4.9\nHOMEBREW_CC: gcc-4.9\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/cavtools/.linuxbrew/include\nLDFLAGS: -L/home/cavtools/.linuxbrew/lib -Wl,--dynamic-linker=/home/cavtools/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/home/cavtools/.linuxbrew/lib\nCMAKE_PREFIX_PATH: /home/cavtools/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/cavtools/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nHOMEBREW_BUILD_FROM_SOURCE: 1\nPATH: /home/cavtools/.linuxbrew/bin:/home/cavtools/.linuxbrew/sbin:/opt/hp93000/aif_5.4.16/bin:/home/m/scripts:/bin:/usr/bin:/sbin:/usr/sbin:/home/m/bin:/home/m/scripts:/usr/lib64/qt-3.3/bin:/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/opt/sicl/bin:/opt/vxipnp/linux/agvisa:/opt/vxipnp/linux/bin:.:/opt/hp93000/soc_common/bin:/opt/hp93000/soc/prod_env/lbin:/opt/hp93000/soc/pws/lbin:/opt/hp93000/soc/pws/bin/hpt:/opt/hp93000/soc/formatter/bin:/opt/hp93000/soc/pws/bin:/opt/sicl/bin:/opt/vxipnp/linux/agvisa:/opt/vxipnp/linux/bin:/opt/sicl/bin:/opt/vxipnp/linux/agvisa:/opt/vxipnp/linux/bin:/home/cavtools/.linuxbrew/Library/ENV/scm\n```\n. Regarding #290 I also see that the executable permission is not set\n[cavtools@vm lib]$ ls -l\ntotal 436\n-r--r--r-- 1 cavtools cavtools 280220 Apr 13 20:11 liblzma.a\nlrwxrwxrwx 1 cavtools cavtools     16 Apr 13 20:11 liblzma.so -> liblzma.so.5.2.1\nlrwxrwxrwx 1 cavtools cavtools     16 Apr 13 20:11 liblzma.so.5 -> liblzma.so.5.2.1\n-r--r--r-- 1 cavtools cavtools 151544 Apr 13 20:11 liblzma.so.5.2.1\ndrwxr-xr-x 2 cavtools cavtools   4096 Apr 13 20:11 pkgconfig\nSetting it does not solve my problem though.\n. Here's some strace\nopen(\"/home/cavtools/.linuxbrew/lib/libc.so.6\", O_RDONLY|0x80000 /* O_??? */) = 3\nread(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\266\\2\\2\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0555, st_size=1856344, ...}) = 0\nmmap(NULL, 3655392, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x2b1644554000\nmprotect(0x2b16446c8000, 2093056, PROT_NONE) = 0\nmmap(0x2b16448c7000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x173000) = 0x2b16448c7000\nmmap(0x2b16448cd000, 14048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2b16448cd000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b16448d1000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2b16448d2000\narch_prctl(ARCH_SET_FS, 0x2b16448d22c0) = 0\nmprotect(0x2b16448c7000, 16384, PROT_READ) = 0\nmprotect(0x2b164454e000, 4096, PROT_READ) = 0\nmprotect(0x2b1644114000, 4096, PROT_READ) = 0\nset_tid_address(0x2b16448d2590)         = 16698\nset_robust_list(0x2b16448d25a0, 0x18)   = 0\nfutex(0x7fff319a23cc, FUTEX_WAKE_PRIVATE, 1) = 0\nfutex(0x7fff319a23cc, 0x189 /* FUTEX_??? */, 1, NULL, 2b16448d22c0) = -1 ENOSYS (Function not implemented)\nrt_sigaction(SIGRTMIN, {0x2b164433cf24, [], SA_RESTORER|SA_SIGINFO, 0x2b1644345a40}, NULL, 8) = 0\nrt_sigaction(SIGRT_1, {0x2b164433cf9e, [], SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x2b1644345a40}, NULL, 8) = 0\nrt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0\ngetrlimit(RLIMIT_STACK, {rlim_cur=10240*1024, rlim_max=RLIM_INFINITY}) = 0\nfcntl(0, F_GETFD)                       = 0\nfcntl(1, F_GETFD)                       = 0\nfcntl(2, F_GETFD)                       = 0\ngeteuid()                               = 1002\nsyscall_293(0x6133c8, 0x800, 0, 0x2b16441164b0, 0x4095d8, 0x2b1643f04cd4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = -1 (errno 38)\nwrite(2, \"xz: \", 4xz: )                     = 4\nwrite(2, \"Error creating a pipe: Function \"..., 47Error creating a pipe: Function not implemented) = 47\nwrite(2, \"\\n\", 1\n)                       = 1\nexit_group(1)                           = ?\nYou can see my system strace can't really decode the calls in the Standalone libc very well. Maybe tools like strace could be included in the Standalone too? Probably trying to do something my kernel doesn't support but hard to tell. xz's config tests should be able to figure out the system capabilities but a linuxbrew/centos5 frankenstein may be past the limits of what it expects.\n. All I can say is that it's a call to pipe2 which was a very new feature when kernel 2.6.18 was released in September 2006 and has seen a lot of patches since.\nhttps://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/log/fs/pipe.c?ofs=50\n. I see. It doesn't actually do the check in configure. Needs some more things installed and probably to call one of the autotools I know so little about.\n. Thanks for enable-kernel. I will try it. I'm surprised the glibc build isn't smart enough to detect the running kernel.\n. enable-kernel seems like a great idea and should go in the wiki. However, in this case it did not help.\n. Another idea is to install autoconf, automake and gettext so you can run ./autogen.sh. This also failed to help.\n. My next idea is to savagely expunge the pipe2 check from the configure file. I don't think this kind of patch can integrate with a build system like homebrew.\nIt works!\nThe offending code in configure is:\n```\nThese are nice to have but not mandatory.\nfor ac_func in posix_fadvise pipe2\ndo :\n  as_ac_var=$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh\nac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\nif eval test \\\"x\\$\"$as_ac_var\"\\\" = x\"yes\"; then :\n  cat >>confdefs.h <<_ACEOF\ndefine $as_echo \"HAVE_$ac_func\" | $as_tr_cpp 1\n_ACEOF\nfi\ndone\n```\nThe bug is upstream. Either in xz or autotools or both.\n. Replacing linux-headers turns out to not be what you want:\nWhat version of the Linux kernel headers should be used?\nThe headers from the most recent Linux kernel should be used. The headers used while compiling the GNU C library and the kernel binary used when using the library do not need to match. The GNU C library runs without problems on kernels that are older than the kernel headers used. The other way round (compiling the GNU C library with old kernel headers and running on a recent kernel) does not necessarily work as expected. For example you can't use new kernel features if you used old kernel headers to compile the GNU C library.\nEven if you are using an older kernel on your machine, we recommend you compile GNU libc with the most current kernel headers. That way you won't have to recompile libc if you ever upgrade to a newer kernel. To tell libc which headers to use, give configure the --with-headers switch (e.g. --with-headers=/usr/src/linux-3.3/include).\nTo install Linux kernel headers, run make header_install in the kernel source tree. This is described in the kernel documentation.\nhttps://sourceware.org/glibc/wiki/FAQ#What_version_of_the_Linux_kernel_headers_should_be_used.3F\n. Are you sure this is closed? Yes, the bug is upstream, but it needs to be reported (I'm not sure to whom) and meanwhile patched in homebrew.\n. Linux vm 2.6.18-404.el5 #1 SMP Tue Apr 7 12:42:54 EDT 2015 x86_64 x86_64 x86_64 GNU/Linux\nI can patch the formula to fix it if you could suggest how I can ask homebrew to detect a specific kernel version. (I don't know ruby, but was able to muddle through the instructions on how to add a patch.)\n. Maybe it's a very recently introduced bug? I brewed xz 5.2.1.\nWe are really in the same boat having to live with old Linux until Redhat says it can die. Thanks for taking charge and doing something about it.\n. I e-mailed the author and he says it will be fixed in subsequent xz.\nLasse Collin\nApr 20 (7 days ago)\nto me \nOn 2015-04-16 Michael Fox wrote:\n\nRecent releases of xz build under kernel 2.6.18 but fail to\nrun because the kernel has not implemented pipe2 (even though the\ncall exists it doesn't work).\n\nThanks for the bug report. I feel a bit stupid that I didn't think\nabout this possible problem (libc has the function but kernel doesn't).\nSince pipe2() isn't important to xz, I reverted the commit that added\nit so the next release won't try to use it.\n. As a workaround I went back to this commit:\ncommit c569aa8d12cb6566b70968fb5f82b1c272edecf6\nAuthor: Shaun Jackman <sjackman@gmail.com>\nDate:   Wed May 6 10:36:31 2015 -0700\nAnd all is well. So, I figure, sometime between then and now homebrew got real uptight about which compilers you can use and linuxbrew didn't notice.\n. Tried using git bisect to find the exact commit where it went bad but the technique doesn't work with linuxbrew because you always get:\nWarning: Xcode is not installed. Most formulae need Xcode to build.\nIt can be installed from\n  https://developer.apple.com/downloads\nError: Permission denied @ dir_s_mkdir - /Library\nI guess some intermediate commits miss some patches.\n. ```\ncavtools@vm bzip2-1.0.6]$ which -a gcc g++\n/usr/bin/gcc\n/usr/bin/g++\n[cavtools@vm bzip2-1.0.6]$ gcc --version\ngcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-55)\nCopyright (C) 2006 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n[cavtools@vm bzip2-1.0.6]$ gcc\ngcc         gcc-4.4     gcc34       gcc44       gccmakedep\n[cavtools@vm bzip2-1.0.6]$ gcc\n```\nI have gcc-4.4 in my path. I was aware of that issue so it's just a link to gcc44. I think this is a different issue. As I said, going back just a few months everything is okay.\n. Thanks. That did the trick.\n. ",
    "jab": "Just hit this myself. I think I have some idea but just to confirm, what are the consequences of this bug?\n. Fair enough.\nIn case anyone reading in the future is interested, looks this is a bug upstream (or at least these are related):\nwg/wrk#91\nwg/wrk#81\nThat last one even mentions a fix. Too bad neither have gotten any response yet.\n. Thanks for the quick fix. I'm now able to build and run fish, but when I run fish -l I get:\nubuntu@localhost ~> Unable to make or open a FIFO for universal variables with path '/run/user/0/fishd.04015e0f4101.notifier': Permission denied\nOtherwise seems to be working okay so far. Anyone know if I can safely ignore this?\nNote: I intentionally did not heed the caveat to add /home/ubuntu/.linuxbrew/bin/fish to /etc/shells as it didn't seem right to add an entry for something inside a user's home directory, especially when the intention is for this user's brew-built fish to be available to this user only. (Assume this user doesn't have root, for instance.) Should this be set up some other way?\n. Looks like same issue as http://stackoverflow.com/q/27615899 and according to @ridiculousfish (the upstream developer) in this comment it's a misconfiguration issue.\n. Sorry, I already uninstalled linuxbrew and switched to manually building python3 from source since I'm on a tight deadline. If I have time to re-install linuxbrew, I'll post that output.\n. ```\n\ncat /etc/issue\nUbuntu 14.04.3 LTS \\n \\l\n```\n. \n",
    "seanfisk": "Great, thanks! Would it be possible to remove that line from the README then? I can PR if you'd like.\n. Awesome, thanks!\nBy the way, the reason I was asking this is because I am including a section on Linxbrew in my university's new lab manual. When I started using Linuxbrew, there was no rpath, brew doctor didn't work, and a few of the recipes were broken. Now, most of those issues have been fixed, and Linuxbrew works so well I feel I have to recommend it! The progress has been amazing\u200a\u2014\u200athank you so much!\n. ",
    "kennylevinsen": "I apologize - I was pretty sure I had run that blob, but didn't verify the packages. I installed 2 linuxbrew's simultaneously, must have made a mistake.\nIt would indeed be nice to have it as a real dependency of the formula in the future.\n\nOn 10/10/2014, at 21.02, Shaun Jackman notifications@github.com wrote:\nA standard installation of Linuxbrew requires that all the standard libraries of Mac OS be installed. See Dependencies.\nIf you'd rather not use your system's package manager, see these instructions.\nEventually I'd like to add these dependencies to the formulas.\n\u0081\\\nReply to this email directly or view it on GitHub.\n. \n",
    "mirzadeh": "OMG! I thought I was going nuts over the past few days. I had homebrew install on Centos before which was working and then suddenly broke couple of days ago with the same exact error! \ncreating the symlinks in $prefix/bin does solve the problem. Does homebrew always look inside $prefix/bin for compilers? Why not just look in $PATH? Maybe due to conflicts on OSX?\n. Funny thing is i guessed it was due to something like that after grepping for the error message and finding the file. I even created those symlinks and put them in $PATH which did not work because they were not $prefix/bin ...\nAnyway, it seems working again now. Thanks for the hint :)\n. Oh and for what its worth, I have a perfectly fine and working homebrew on ubuntu but then again ubuntu has gcc-4.x already installed in /usr/bin\n. ",
    "hutson": "@saqihel the custom version of dumpversion in gfortran has been removed as of version 4.5 according to GNU bug 41080.\nYour workaround is sufficient in the short term (I'm actually using a similar approach for a RHEL box), but long-term the solution is to upgrade your operating system.\nAs of this writing, gfortran v4.8 is available in CentOS 7.\n. What would you suggest as a resolution to this issue? Would a note of the gfortran difference suffice? Request that, if gfortran --version reports earlier than 4.5, use such-and-such symlink approach, else use the other?\n. @sjackman I haven't tried crossing my fingers yet, but after several re-installations of Python the installation has just decided to work.\nThe only difference in my process is to install brew install openssl first, then install python via brew install python --with-brewed-openssl.\n. @sjackman, merge request submitted. Please let me know if I missed anything with regard to the Contributing guidelines.\nIf I encounter any further issues on 32bit I'll file the appropriate issues, and submit merge requests if requested.\nMy system is a netbook using an Intel Atom processor running Debian Sid (Unstable).\n. @sjackman,\nI re-ran brew install readline --verbose, and the logs can be found here:\nhttps://gist.github.com/hbetts/198c4ab7173f1754e0b4\n. ",
    "hregis": "Thanks for you Shaun @sjackman \n. ",
    "dsummersl": "woot - this worked for me (brew edit readline and add SHLIB_LIBS=-lncurses to make install).\n. I saw that, verified it was in my lua.rb version, but lua was not installing :/ This change did fix it for me though (ubuntu trusty via crouton on a chromebook).\n. ",
    "cbeck88": "Inspecting the link invocation above, it actually has a linker flag -L... with the right path to the linuxbrew version of the lib, and that file is there on my machine, it was just missing the -lpng argument. I was able to get a little bit further it seems by, in fontconfig.rb, changing the \"make install\" invocation to\nsystem \"make\", \"install\", \"RUN_FC_CACHE_TEST=false\", \"LIBS=-lpng\"\nThis gets through the linking step, it fails somewhat later with a lot of complaints about elements ( I think it is testing or something? )\nhttps://gist.github.com/cbeck88/b64d3c6497391e9e8580\n. Finally, I was able to resolve the second set of problems by adding \"--disable-docs\", to the list of configure arguments. The post install program hangs when it is run, but I can kill it and still end up with a fontconfig package. I don't know if this is the \"correct\" way to resolve these issues though.\n. Hi, just an update,\nAfter this I managed to tweak cairo.rb so I could install cairo also, but when I get to pango I really don't know what to do...\nHere's what I've done so far:\nhttps://github.com/cbeck88/linuxbrew/compare/fixup\nHere's what goes wrong with pango:\nhttps://gist.github.com/cbeck88/a59a71f9587b1f6b5fb0\nIn file included from pango-ot-buffer.c:24:0:\npango-ot-private.h:29:19: fatal error: hb-ft.h: No such file or directory\n #include <hb-ft.h>\nThe internet seemingly holds few hints for me...\n. Thanks, this is great. I actually uninstalled all packages, switched linuxbrew back to master, ran \"brew update\" and checked that I got a clean \"brew doctor\". I still get the same error at fontconfig, but when I rebased my fixup branch on top of it, I can actually build pango now, and in fact all of the dependencies for wesnoth. So I can now try to fix the broken homebrew formula for that, which was my original goal.\nIf you like I can try to post a verbose build log for gobject-introspection, if it would be helpful.\n. No, what I mean to say is, gobject-introspection builds successfully for me, I think before even any of my formula changes took effect. I thought maybe my build log might contain a configuration flag or something that could help fix whatever error you have.\nhttps://gist.github.com/cbeck88/49809cc18008ff7f21d8\n. Hi, the part about png is no longer an issue. \nThe only part that doesn't work for me now is compiling the docs, I just ran brew update and tried again, got the same thing:\nHere's console log:\nhttps://gist.github.com/cbeck88/3108e40bd26dc3ebae3c\nHere's brew gist-logs:\nhttps://gist.github.com/anonymous/f458fd4e0ba33c2969e6\nI looked at the instructions for fontconfig, I think I know now what the problem is, see here: http://www.linuxfromscratch.org/blfs/view/svn/general/fontconfig.html\n'Note:\nIf you have DocBook Utils installed and you remove the --disable-docs parameter from the configure command below, you must have SGMLSpm-1.1 and texlive-20140525 installed also, or the Fontconfig build will fail.'\nThe patch that I am using locally to workaround is in this commit:\nhttps://github.com/cbeck88/linuxbrew/commit/407616cca5c323b920599ba4d272c731fa0e7f75\nI would have made a pull request already, but I know that I'm not quite following the instructions they give here:\n\"If you did not remove the --disable-docs parameter from the configure command, you can install the pre-generated documentation by using the following commands as the root user:\"\nbecause I'm not sure exactly what homebrew incantations are necessary to give the right target directories in those \"install\" lines. http://www.linuxfromscratch.org/blfs/view/svn/general/fontconfig.html\nEdit: Is there some part of the brew api that would be helpful for this? I've seen stuff like man.install in the formula cookbook but I wonder if there isn't some more exhaustive docs that have eluded me.\n. Hi Shaun,\nI tried installing texlive, but I got a sha mismatch:\n$ brew install texlive==> Downloading http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.\nAlready downloaded: /home/chris/.cache/Homebrew/texlive-20141120.tar.gz\nError: SHA1 mismatch\nExpected: 997d2be24706327845925b0ef34544cb4a6fd2f1\nActual: 7978e359c733a82685a437c560f2863233ff6165\nArchive: /home/chris/.cache/Homebrew/texlive-20141120.tar.gz\nTo retry an incomplete download, remove the file above.\nHowever, after inspecting the download and deciding to change the sha in the formula, I was able to successfully build texlive. I'm not sure if this is a case of the mirrors being slightly out of sync or what.\nAfter installing texlive, I found I still couldn't compile fontconfig:\nhttps://gist.github.com/anonymous/fb309e40addad5bee395\nSo that's too bad, I was hopeful that it would work.\n. This doesn't help me with my issue though, actually it makes it more complicated.\nI have another formula I'm trying to write which needs libintl.h. The scons script takes an argument \"gettextdir\" I can use to indicate where it may find the headers and libs.\nIf I want the formula to work on both linux and OS X (and stand-alone linux?) what am I supposed to put there? This is what I have currently:\nhttps://gist.github.com/cbeck88/f5898a5cbdfe99a8d427#file-wesnoth-new-rb-L52\n(The default value for gettext dir is standard linux location basically)\nI guess that this formula is broken for stand-alone linux? Is there some flag I can use to detect if I have a standalone linux installation, or an environment variable telling me where I can gettext?\nhttps://gist.github.com/cbeck88/f5898a5cbdfe99a8d427/4aa99a841ef42767b966c60ec16851d2ea2201cb#file-wesnoth-new-rb-L52\n. Ok, I think I understand now... I think I assumed that on OS X it's getting libintl.h from the gettext formula, but reading here I guess it's actually system provided there as well. So I think it means our scons script which is checking for gettext is just broken, and should be searching full path for the header. (It must not be doing this right now...)\nhttp://www.gnu.org/software/gnulib/manual/html_node/libintl_002eh.html\nThanks and sorry for bothering you about this.\n. I'm not sure but you might want to try reordering the stuff in your path? It looks like /usr/local/bin is appearing earlier than linuxbrew bin, but if you have the stuff mentioned here in your bashrc I don't think that should happen:\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nexport MANPATH=\"$HOME/.linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"$HOME/.linuxbrew/share/info:$INFOPATH\"\nhttp://brew.sh/linuxbrew/\n. Hi Shaun,\nSo, I would like to help to solve this, but I'm not sure if actually have the experience to quickly find a \"correct\" solution which I'm confident would work on every machine. The only time I ever had to resolve a problem like this, I was cross-compiling boost with bzip2 support, but I couldn't get it to find the right bzip2 instance. My friend was able to get it to work with cxxflags and ldflags (like the  SDL_image installation guide seems to suggest), but for me it only worked when I tried to use specific boost configuration flags that let you specify exactly the path to the bzip2 lib instance you want it to use. I'm not sure if my system environment was wrong somehow or if I just needed to tinker with it more, but based on that experience I'm not sure if the cxxflags and ldflags is a good approach here.\nWhat I would rather do is:\n1.) Make a request upstream to add more precise configuration flags\n2.) In the interim, do exactly what macports does, which is statically link all of libpng, libjpeg, libtiff using the existing configuration flags: https://trac.macports.org/browser/trunk/dports/devel/libsdl_image/Portfile\n3.) Put a comment \"TODO: Fix this if upstream provides new configuration flags or a patch\"\nDoes this sound like a worthwhile solution? Clearly it's not ideal to statically link things, but I think in this case there's not much potential overhead since all of these are small, and it least it will work for everyone.\n. Hi,\nI poked around in their configure file a bit, the problem is essentially here:\nhttps://github.com/aduros/SDL_image/blob/master/configure.in#L94\n(^ pointed to a github mirror, but it looks like this same find_libs routine is in the config for all of the SDL extra libs).\nfind_lib()\n{\n    gcc_bin_path=[`$CC -print-search-dirs 2>/dev/null | fgrep programs: | sed 's/[^=]*=\\(.*\\)/\\1/' | sed 's/:/ /g'`]\n    gcc_lib_path=[`$CC -print-search-dirs 2>/dev/null | fgrep libraries: | sed 's/[^=]*=\\(.*\\)/\\1/' | sed 's/:/ /g'`]\n    env_lib_path=[`echo $LIBS $LDFLAGS | sed 's/-L[ ]*//g'`]\n    for path in $gcc_bin_path $gcc_lib_path $env_lib_path /usr/lib /usr/local/lib; do\n        lib=[`ls -- $path/$1 2>/dev/null | sort -r | sed 's/.*\\/\\(.*\\)/\\1/; q'`]\n        if test x$lib != x; then\n            echo $lib\n            return\n        fi\n    done\n}\nThe problem is that it ignores prefix, and all the other variables homebrew is setting, and searches only in my gcc (system-provided) search directories for any libs. For instance my gcc --print-search-dirs is like this:\n$ gcc --print-search-dirs\ninstall: /usr/lib/gcc/x86_64-linux-gnu/4.9/\nprograms: =/usr/lib/gcc/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/bin/\nlibraries: =/usr/lib/gcc/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/lib/x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/lib/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../x86_64-linux-gnu/4.9/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../lib/:/lib/x86_64-linux-gnu/4.9/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/4.9/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../x86_64-linux-gnu/lib/:/usr/lib/gcc/x86_64-linux-gnu/4.9/../../../:/lib/:/usr/lib/\nI only reached this conclusion after finding that it's configuration checks successfully use brew pkg-config and end up testing against the brew installed versions of libpng etc, and it's only the step where they actually try to find the filename of the lib (not sure why they do this) that they get it so wrong. So this looks to me like a serious bug in their configuration system.\nCan you give any suggestions what would be a good thing to replace find_libs with?\nNow that I can see where the problem is it might be okay to just patch in overrides from environment variables I guess...\n. Thanks Shaun. I have reported upstream here: https://bugzilla.libsdl.org/show_bug.cgi?id=2795\nI checked also that lib SDL itself, as well as SDL_ttf, and SDL_mixer use this same find_lib routine and therefore are affected by this bug. I'm not sure if SDL 2.0 is affected but I didn't find this same function in its configure file.\n. Yes, I am planning to make a PR out of this patch, since unfortunately the upstream patch referred to by github above doesn't merge cleanly. You can expect it sometime next saturday / sunday.\nThanks again.\n. ",
    "dlukes": "Concerning the pango issue -- I found this:\n\nFreetype requires Harfbuzz's freetype backend, but Harfbuzz needs Freetype to build the Harfbuzz backend.\n\nThe solution being (it worked for me):\n\nYes, the chicken-and-egg problem is unfortunate.  Behdad told me he is going to split HarfBuzz into two libraries (or something like that) to avoid this issue.\nFor the moment, please do\n./configure --without-harfbuzz\nthen build and install FreeType.  Then build and install HarfBuzz, then for FreeType do\nmake distclean\n   ./configure\nand build and install FreeType again.\n\nWhew, after spending half a day tracking Emacs dependencies for a custom install on a server where I don't have root privileges, I might take a look at linuxbrew myself :)\n. Try uninstalling python3, (re)installing sqlite (with brew), and then reinstalling python3 (run brew info python3 prior to the installation and see if there's a green tick mark beside the sqlite dependency). Worked for me, though fair warning, in my case I also had to reinstall openssl, which was pretty painful (it kept looking for some dylibs which of course don't exist on Linux, so it took some convincing).\n. Oh great, thanks so much!\n. ",
    "scmccoy": "echo $PATH\n/usr/local/bin:/var/www/vhosts/new-scmccoy.com/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin\n-bash-4.1$ ll /usr/bin/pkg-config\n-rwxr-xr-x 1 root root 105888 Aug 18  2010 /usr/bin/pkg-config\n. sorry i forgot to mention this is the other warning:\nWarning: You have a non-Homebrew 'pkg-config' in your PATH:\n  /usr/bin/pkg-config\nwhich i haven't been able to resolve. \n. thank you, but i have added those lines in already w/ no change\n. -bash-4.1$ gcc -dumpversion\n4.4.7\n-bash-4.1$ g++ -dumpversion\n4.4.7\n-bash-4.1$ gfortran -dumpversion\nGNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)\n-bash-4.1$ uname -o\nGNU/Linux\n-bash-4.1$ ls -d /etc/* | grep release \n/etc/centos-release\n/etc/redhat-release\n/etc/system-release\n/etc/system-release-cpe\n-bash-4.1$ cat /etc/*{release,version}\nCentOS release 6.5 (Final)\nCentOS release 6.5 (Final)\nCentOS release 6.5 (Final)\ncat: /etc/subversion: Is a directory\n. ``\nln -s $(which gcc) $prefix/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which g++) $prefix/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\nln -s $(which gcc) $prefix/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which gfortran) $prefix/bin/gfortran-$(gfortran -dumpversion |cut -d. -f1,2)\nln: targetCOPYING' is not a directory\n-bash-4.1$ brew install hello && brew test -v hello; brew remove hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.9.tar.gz\nAlready downloaded: /var/www/vhosts/new-scmccoy.com/.cache/Homebrew/hello-2.9.tar.gz\n==> ./configure --disable-silent-rules --prefix=/var/www/vhosts/new-scmccoy.com/.linuxbrew/Cellar\n--disable-dependency-tracking\n--disable-silent-rules\n--prefix=/var/www/vhosts/new-scmccoy.com/.linuxbrew/Cellar/hello/2.9\nFailed to execute: ./configure\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nError: No such keg: /var/www/vhosts/new-scmccoy.com/.linuxbrew/Cellar/hello\n```\n. i added the last line(after creating in my home dir /tmp) into my .bashrc\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nexport MANPATH=\"$HOME/.linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"$HOME/.linuxbrew/share/info:$INFOPATH\"\nexport HOMEBREW_TEMP=\"$HOME/tmp:$HOMEBREW_TEMP\"\nbut i still get the error\n. still faild. i sourced .bashrc and restarted too.\n-bash-4.1$ brew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.9.tar.gz\nAlready downloaded: /var/www/vhosts/new-scmccoy.com/.cache/Homebrew/hello-2.9.tar.gz\n==> ./configure --disable-silent-rules --prefix=/var/www/vhosts/new-scmccoy.com/\n--disable-dependency-tracking\n--disable-silent-rules\n--prefix=/var/www/vhosts/new-scmccoy.com/.linuxbrew/Cellar/hello/2.9\nFailed to execute: ./configure\ni decided to try all the lines Including your last change /tmp\" in .bash_profile\nand success! so far :)\ni installed git w/o a problem. but here's my brew doctor output now:\nWarning: You have a non-Homebrew 'pkg-config' in your PATH:\n  /usr/bin/pkg-config\n./configure may have problems finding brew-installed packages using\nthis other pkg-config.\nand thank you sjackman! your help is much appreciated!! \n. ",
    "lieut-data": "I have essentially the same issue as the reporter, running CentOS 6.6 here. Running the requested command yields\n-bash-4.1$ HOMEBREW_TEMP=\"$HOME/tmp\" brew install hello -v\nError: hello cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\nI have followed the steps to Create symlinks for gcc. Can I provide any other useful context to help debug this issue?\n. As I post this, I already realize what I've done wrong in my setup:\n-bash-4.1$ which gcc\n/usr/bin/gcc\n-bash-4.1$ which gcc-4.4 gcc-4.5 gcc-4.6 gcc-4.7 gcc-4.8 gcc-4.9\n/bin/gcc-4.4\n/usr/bin/which: no gcc-4.5 in (/home/jesse.hallam/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jesse.hallam/bin)\n/usr/bin/which: no gcc-4.6 in (/home/jesse.hallam/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jesse.hallam/bin)\n/usr/bin/which: no gcc-4.7 in (/home/jesse.hallam/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jesse.hallam/bin)\n/usr/bin/which: no gcc-4.8 in (/home/jesse.hallam/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jesse.hallam/bin)\n/usr/bin/which: no gcc-4.9 in (/home/jesse.hallam/.linuxbrew/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jesse.hallam/bin)\nIn running the steps in Create symlinks for gcc, I thought it odd that $prefix wasn't defined, but assumed it was intended to put the files in /bin. Once I read the full standalone installation document, I caught on to where the symlinks were supposed to go. Executing those correctly has resolved my issue.\nSorry for the PEBKAC!\n. ",
    "dpc": "@sjackman : I don't want to report another issue for this, but my Fedora 22 sudenly broke linuxbrew.\nI was following the instructions here, and they were not working. Finally I've discovered that this:\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc\ndoes not work correctly if the ccache is installed. ccache package on F22 seem to quietly overtake gcc binary in the PATH, and then it will report version 4.9, but won't be able to find gcc-4.9 when launched under that name (via symlink created here https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#create-symlinks-for-gcc ).\n. :+1: \n. ",
    "grayxr": "I did install apr-1-config and apr-util, to no avail.\n. here's a gist after running brew gist-logs svn -v\n. @saketkc - i'm not sure what you mean by 'edit GSSAPI in subversion.rb accordingly.'\n. By the way, applying your patch to 'subversion.rb' seemingly allowed me to install svn completely, however, now if i just run the command 'svn' I get 'svn: error while loading shared libraries: libserf-1.so.1: cannot open shared object file: No such file or directory'.\nThis may be a separate issue, though.\nThanks!\n. @saketkc, I'm not getting any output. I did install libserf, however now i'm getting this after running 'svn':\nsvn: /home/vagrant/.linuxbrew/lib/libssl.so.1.0.0: no version information available (required by /usr/lib/x86_64-linux-gnu/libserf-1.so.1)\nsvn: /home/vagrant/.linuxbrew/lib/libcrypto.so.1.0.0: no version information available (required by /usr/lib/x86_64-linux-gnu/libserf-1.so.1)\n. I just did sudo apt-get install subversion\n. ",
    "kimat": "For the python weirdness : cf. https://gist.github.com/kimat/e5d85fadf745640c2497\nit's the  error ImportError: No module named pkg_resources\nI can do a : brew install something  --verbose --debug if needed\n. So on a fresh box ubuntu/trusty64\n``` sh\ninstall git\napt-get install --no-install-recommends git\ninstall ruby\ngpg --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3\nurl -#L https://get.rvm.io | bash -s stable --autolibs=3 --ruby ;\nsource /usr/local/rvm/scripts/rvm\ninstall linuxbrew\napt-get install --no-install-recommends m4 texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev\ngit clone https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nexport MANPATH=\"$HOME/.linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"$HOME/.linuxbrew/share/info:$INFOPATH\"\nthe error is detected by :\nbrew doctor\n```\n```\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: You have a non-Homebrew 'pkg-config' in your PATH:\n  /usr/bin/pkg-config\n```\n``` sh\nthis also prevents\nbrew install cmake\n```\n```\n==> Downloading http://www.cmake.org/files/v3.0/cmake-3.0.2.tar.gz\n################################################################## 100.0%\n==> Downloading https://pypi.python.org/packages/source/M/MarkupSafe/MarkupSafe-0.23.tar.gz\n################################################################## 100.0%\n==> python setup.py install --prefix=/tmp/cmake-Td5BOS/cmake-3.0.2/sphinx --single-version-externally-managed --record=installed.txt\nTraceback (most recent call last):\n  File \"setup.py\", line 3, in \n    from setuptools import setup, Extension\nImportError: No module named setuptools\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nFix LLVM CMake modules not being preprocessed (https://github.com/Homebrew/homebrew/pull/29976)\ncmake builds fail on CLT-only with --env=std (https://github.com/Homebrew/homebrew/issues/29101)\n```\n. Actually i followed this by : \napt-get install  --no-install-recommends python-setuptools\nbrew install cmake\nwithout any errors\nDon't know what exactly went wrong and can't really reproduce so I am closing this\n. Kahsif  O.o\n. ",
    "simonlegrand": "Hello,\nThanks for your quick answers.\n@Shaun ; I use ruby1.8.7\n@Jack: Your solution is working\n. Thanks a lot to all of you! I had the same troubles with crti.o on an ubuntu 12.04 where I\u00b4m not root. This patch works perfectly!\n. ",
    "rampatra": "When i run gcc -v: gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC)\n. I am still stuck, can you help?\nNOTE: I am running brew on my linux EC2 instance on AWS.\n. I tried this:\nshell\nsudo ln -s /usr/bin/gcc48 $prefix/bin/gcc-4.8\nexport HOMEBREW_CC=gcc-4.8\nbrew install hello && brew test -v hello; brew remove hello\nError: hello cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\nAm i wrong somewhere?\n. whereis gcc returns gcc: /usr/bin/gcc /usr/lib/gcc /usr/libexec/gcc /usr/share/man/man1/gcc.1.gz.\nWithout sudo it doesn't work and can you explain your last point about $prefix.\nThanks\n. Thanks a ton, its working now :) Earlier I appended it after $PATH.\n. ",
    "bluemix": "for me, running Fedora 22, I solved this problem after doing the Installation, then I did (from this issue):\nln -s `which gcc` ~/.linuxbrew/bin/gcc-`gcc -dumpversion |cut -d. -f1,2`\nln -s `which g++` ~/.linuxbrew/bin/g++-`g++ -dumpversion |cut -d. -f1,2`\nln -s `which gfortran` ~/.linuxbrew/bin/gfortran-`gfortran -dumpversion |cut -d. -f1,2`\nexport HOMEBREW_CC=gcc\n. ",
    "lovexiaov": "Thanks a lot for help me, it is worked~~\n. ",
    "guylifestyle3": "I am getting this and I think I tried most of the suggestions: $ brew install gcc\n==> Installing dependencies for gcc: glibc, xz, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: glibc\nError: The following formula:\n  glibc\ncannot be installed as a binary package and must be built from source.\nInstall Clang or brew install gcc\n. ",
    "ludekvodicka": "I already tried that before but obviously in the wrong position.\nIf --no-check-certificate is added before -0-, installer works correctly. Thanks\n. ",
    "davydden": "~~so it seems that gfortran issue is still open on a stand-alone installation?..~~\nthanks for you work, this PR helped a lot. I installed a standalone linuxbrew on OpenSuse and so far managed to install openmpi and openblas, both need fortran compiler.\n. thanks!\n. i just though that perhaps this could be mentioned in the instructions so that users are aware of that dependency.\n. i think it's a different issue, in stand-alone I have\nJava: N/A\nso I guess this file is simply not there, thus the error during installation.\n. yes, it does. Shall one then add jdk as a dependency?\n. i see, thanks for the link! \ni guess this could be fixed in hypre, but i have no idea how :(\n. funny enough, brew install sundials --with-mpi which also run tests\n==> mpiexec -np 4 ./idas/parallel/idasHeat2D_FSA_kry_bbd_p -sensi stg t\nis perfectly fine without LD_LIBRARY_PATH...\n. sorry, my fault, never mind the issue!\n. could someone with the standalone linuxbrew confirm the same behaviour?\n. good catch! it did solve the issue!\n. can't try as I already installed it, but I think your solution would work as it did work in https://github.com/Homebrew/homebrew-science/issues/2521\n. i think it should be old. If i upgrade isl, it's not yet build and linked whereas gcc wants the .so. So i think it should be old.\n. sure, absolutely, netcdf is a different story as it builds inside it's fortran version aginst already built c++. But you are right, it's all the same issue\n. maybe add by default the old one and have a mechanism to switch to the new prefix if needed? Perhaps, there will be less formulas like netcdf, and more like isl and mpfr\n. btw, with gcc one would still need to brew upgrade gcc --cc=gcc-4.7 or put the previous gcc's bin into path, perhaps, together with LD_LIBRARY_PATH as in the above.\n. @sjackman you are right that the context of the discussion is about installing dealii (open source finite element library) together with its linear algebra dependencies (petsc, slepc, trilinos) on a cluster. \nBut in general, what i was trying to ask, i think, is a broader question of how can one use linuxbrew on a cluster and make it pick up lapack, blas and mpi, already available there? I think it is more about mechanisms which are needed to be able to use efficiently linuxbrew as a package manager on a cluster.\nAs an example, non-efficient usage would be to compile openmpi and opneblas yourself with linuxbrew.  \nAs @Rombur mentioned above for clusters with Intel Math Kernel LIbrary (MKL) implementation of Lapack it becomes cumbersome as one needs to link against these libraries which are not even called liblapack and/or libblas. If that is to be done using Homebrew/Linuxbrew/Homebrew-science, then one needs a way to provided those paths. So that's what I was trying to point out in (1) above.\nI think this issue is Linuxrew only, as on os-x there is no question on how to install scientific software in general and dealii in particular. It all works with Homebrew/Homebrew-science. So i think the discussion belongs here, to Linuxbrew forum. \n. @sjackman to re-iterate on my naive solution: how about Linuxbrew introduces another variable export HOMEBREW_LAPACK=-L/path/to/mkl -lmkl1 -lmkl2 -lmkl3. If there is a formula which depends on lapack/blas, we modify it to read this variable and link against those libraries instead of -framework Accelerate which are normally hard-coded. One still have an option of openblas, in such a case the environment variable is ignored.  brew doctor checks that this variable is set and enourage the user to adjust it according to his environment. \n@dctrud @Rombur do you think this could work in theory?\np.s. if this solution is in place, i am fine to take care of some formulae in homebrew-science such as petsc, slepc, trilinos etc. should be doable.\n. as a proof of the concept, if I do in the command line (close to real-life example)\n$ export HOMEBREW_BLASLAPACK=\"-L/soft/com/packages/intel/13/079/mkl -lmkl_intel_ilp64 -lmkl_core -lmkl_intel_thread -lpthread -lm\"\nI can then use it in the formula (just printout for simplicity):\nohai ENV[\"HOMEBREW_BLASLAPACK\"]\nwhich shows\n==> -L/soft/com/packages/intel/13/079/mkl -lmkl_intel_ilp64 -lmkl_core -lmkl_intel_thread -lpthread -lm\nOne could use this, for example, in https://github.com/Homebrew/homebrew-science/blob/master/superlu_dist.rb#L31 to define blas libraries instead of default -framework Accelerate\n@sjackman do you see my point?\n. @sjackman yes, MKL is commercial, but MKL is not the only implementation of blas/lapack for clusters. The bigger picture, i would say, is that there are 2 pieces of software on clusters which are not meant to be self-compiled, but rather used the versions provided by the system  - :mpi, and blas/lapack. \n linuxbrew has a lot of potential to be used on clusters to install open-source scientific software. To my understanding, however, in order to do so there should be mechanisms to use system provided mpi and blas/lapack. The approach above should potentially work to let system administrators configure the linuxbrew installation for particular cluster to use the system-provided blas/lapack.\np.s. @dctrud @Rombur please correct me if I am misleading in any sense or if you want to further elaborate on why one should use blas/lapack and mpi provided by the system. \n. yes, MKL is just a computer vendor optimized implementation of Lapack and blas, see http://www.netlib.org/lapack/faq.html#_what_and_where_are_the_lapack_vendors_implementations\nAs you can see, there are a number of vendor optimized implementations (AMD, Cray, Sun, HP, Intel, etc).\nhere is a nice summary article about BLAS, LAPACK and ScaLAPACK http://glennklockwood.blogspot.de/2014/02/quantum-espresso-compiling-and-choice.html\n\nBLAS is the lowest-level library and provides subroutines that do basic vector operations.  Netlib provides a reference implementation of BLAS written in Fortran, but the big idea behind BLAS is to allow hardware vendors to provide highly tuned versions of the BLAS subroutines that obviate the need for application developers to worry about optimizing their linear algebra for every possible computer architecture on which the application might run.  This motivation is also what gave rise to the MPI standard, but unlike MPI, BLAS is not an actual standard.\nLAPACK builds upon BLAS and provides higher-level matrix operations such as diagonalization (i.e., solving for eigenvectors and eigenvalues) and inversion.  BLAS and LAPACK seem to be bundled together when actually implemented (e.g., IBM ESSL and Intel MKL both provide both optimized BLAS and LAPACK), but they provide two distinct layers of abstracting the mathematical complexity away from application developers.\nScaLAPACK builds upon LAPACK and provides a set of subroutines (prefixed with the letter P) that are analogous to the subroutines provided by LAPACK.  The big difference is that ScaLAPACK uses MPI to parallelize these LAPACK routines, whereas LAPACK itself (and the underlying BLAS) are completely serial (e.g., Netlib's reference distribution) or rely on shared memory for parallelization (e.g., multithreaded).\n\nTo summ-up the article in the above, for High Performance Computing (HPC) one actually use vendor optimized: MPI, BLAS, LAPACK, ScaLAPACK, FFT. I can't comment on the last two, as they are not important in my work, but MPI, BLAS and LAPACK surely are. That's why i wanted to initiate the discussion on that topic. \n. btw, homebrew/science/openblas provides both BLAS and (most of) LAPACK (so no need for homebrew/dupes/lapack).  openblas is currently used in numerous scientific formula such as petsc, slepc, trilinos, superlu, etc to make them compile within linuxbrew, but again, that's not the way to do it for HPC.\n. i think something like :blas and :lapack would make a lot of sense, not sure if those should be separate as often they are bundled together (either in vendor optimised versions or open-source projects such as openblas or gotoblas2[1] or Automatically Tuned Linear Algebra Software atlas [2] ).\n[1] include most commonly used LAPACK functions\n[2] a few routines from LAPACK\n. @tamiko you may want to comment on packaging as deal.ii developers currently face the issue of choosing the packaging system.\nPerhaps Homebrew developers (@mikemcquaid @tdsmith ) could also join the discussion as it would be nice to have :blas and :lapack in the upstream even though for OSX one can hardcode -framework Accelerate where needed.\n. any1 on the homebrew team who do high performance computing ?\nHPC => more developers choose Homebrew/Linuxbrew => more contributors and better quality formulas => more users.\n. @dpo i am glad to hear that your are interested in adding blas/lapack support. I agree that it would be good to have :blas in the upstream as well. Especially given the fact that on OSX libblas and libblapack symlink to accelerated framework, so this part can be unified between OS-X and Linux for all formulae in homebrew-science and homebrew itself. As far as blas/lapack is concerned, everything that worked for os-x will also work on linuxbrew, no need for extra if OS.linux? or modification of formulae (linuxbrew vs homebrew) to replace -framework Accelerate with something meaningful on linux.\nI suppose if there is :blas (even for linuxbrew only) with optional HOMEBREW environment variables to override the default linker string (-L/usr/lib/ -lblas -llapack) and perhaps optional compiler line (e.g. -I${MKLROOT}/include), then it won't be a problem to propagate the blas choice, as all formulas will be compiled against the same blas, as long as it is set up right after linuxbrew installation. And even if someone would like to have different stacks of software compiled with different implementation of blas available on the target system, this can be achieved using different linuxbrew installations sitting side by side. It looks quite flexible to me.\n. in case someone will come across this discussion, here is a small repo for experimenting with blas and cmake requirements https://github.com/davydden/homebrew-dealiisuite .\n. thanks for working on it!\nwith respect to different CFLAGS and FFLAGS, i am not sure. @Rombur Bruno, any ideas from your experience installing on clusters with candi?\n. any updates on this PR? @tdsmith have you decided if it can be merged upstream or is it bound to be in linuxrew only?\n. +1 to what @dpo said, i would really like to see it upstream.\n@tdsmith would you be willing to reconsider the decision? Let me explain how introducing :blas in upstream could help: \n1)  If we keep :blas in Linuxbrew only each and every formula in Homebrew-science which needs blas/lapack would need to have something like\ndepends_on :blas if os.liinux?\nENV[\"HOMEBREW_BLAS_LDFLAGS\"] = \"-lblas -llapack\" if os.mac?\nand then we use those HOMEBREW_BLAS_CFLAGS (will be empty on OSX) and HOMEBREW_BLAS_LDFLAGS. That should work, but is less elegant than simply having \ndepends_on :blas\nOne could make the latter case work even if OSX Homebrew would have a super simple blas_requirement.rb which just sets those variables to the default values:\n```\nrequire \"requirement\"\nclass BlasRequirement < Requirement\n      ENV[\"HOMEBREW_BLAS_CFLAGS\"] = \"\"\n      ENV[\"HOMEBREW_BLAS_LDFLAGS\"] = \"-framework Accelerate\"\nend\n```\nso that we always try to build against -framwrok Accelerate. \nIn those rare cases when we need -velibfort on OS-X, we'll have to have something like\nENV[\"HOMEBREW_BLAS_LDFLAGS\"] = \"-lveclibfort\" if os.mac?\n2) If :blas is in OS-X Homebrew, that means that every formula within Homebrew does not need to have a special treatment to work on Linuxbrew fork as far as blas/lapack is concerned. That's  saves modifications/commits/maintainance efforts in the Linuxbrew project.\nPersonally i don't see how Homebrew itself would suffer from this decision. In many formula -framework Accelerated is already hardcoded. We gradually change it once to HOMEBREW_BLAS_LDFLAGS and it's done.\nIrrespectively of whether :blas goes upstream or not, I am very glad that it'll be in Linuxbrew as this should allow to use the latter for high-perfomance-computing. So I very welcome this PR in any case.\n. 3) if on os-x you would like to allow users build against openblas, then there could be a simple environment flag on OSX only HOMEBREW_BLAS=openblas which shall be set at the very beginning (like optional HOMEBREW_GCC=xxx). And then inside blas_requirement.rb you would decide on whether require openblas or use -framework Accelerate. That in itself will allow to cut out a number of code duplication inside Homebrew formulae. So that shifts the management of blas/lapack from each formula to that blas_requirement.rb. \nI think it's win-win-win for Homebrew, Linuxbrew and Homebrew-science.\n. how about :blaslapack  as it's BLAS+LAPACK.\n. > I think there is some value in having the option to develop, improve, test, and easily distribute these meta formulas. Otherwise one would need to distribute a modified linuxbrew itself.\nhow many of those meta-formulas do you envision to have @tjhei ? If there are very few (like :cmake for which I created a PR), i would vote to have extra symbols which support those essential for compilation of third-party-software system libraries (:mpi, :blaslapack, :cmake) to be inside linuxbrew repo. And then if something does not work on a particular platform, it would be matter of fixing it in a fork of linuxbrew and creating a PR, i guess.\n. > I think the next thing where I will get annoyed is compiling python from scratch.\nhopefully should not happen as there is https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/requirements/python_requirement.rb\n. > BLAS_LAPACK / :blas_lapack seems reasonable and is clearer.\nsounds good to me.\n. @tdsmith any update on :blas_lapack in Homebrew? \n. i was playing with your branch now. It seems we would need more functionality: for example, Hypre configures with\n./configure \\\n  --prefix=LIBRARY-INSTALL-LOCATION \\\n  --with-MPI \\\n  --with-examples \\\n  --with-blas-libs=\"mkl_core mkl_intel_lp64 mkl_sequential\" \\\n  --with-blas-lib-dirs=/opt/intel/mkl/11.1.064/lib/em64t \\ \n  --with-lapack-libs=\"mkl_core mkl_intel_lp64 mkl_sequential\" \\\n  --with-lapack-lib-dirs=/opt/intel/mkl/11.1.064/lib/em64t \\\nAnother ugly thing is PETSc, and if we don't want to rely on auto-detection, then it's\nexten = (OS.mac?) ? \"dylib\" : \"so\"\n    args << (\"--with-blas-lib=#{Formula[\"openblas\"].opt_lib}/libopenblas.#{exten}\")\ni.e. full path to the library(ies), where lapack symbols are found.\nSo i would say there should be:\n1. a set of libraries names (mkl_core,mkl_intel_lpi64,mkl_sequential)\n2. lib dir (${MKLROOT}/lib/intel64)\n3. include dir (${MKLROOT}/include)\nthese three, as far as i can tell, should be enough to construct linker flags (e.g. -L${MKLROOT}/lib/intel64 -lmkl_gf_lp64 -lmkl_core -lmkl_sequential), compiler flags (e.g. -I${MKLROOT}/include) and also make it configurable with --with-blas-libs=xxx.\n. on a bright side, by using \n1. current :blas dependency (from this PR) \n2. some hardcoding as mentioned in the above\n3. symlinking cmake to avoid its installation via linuxbrew\n4. compiling ruby (very simple, just ./configure --prefix=path/to/)\nI was able to install petsc, slepc, trilinos, p4est, hypre, bzip2, dealii, boost, metis, parmetis, superlu_dist on a CentOS cluster with native openmpi, gcc, mkl, cmake and git.\nSo the bottom line -- it is certainly worth having :blas_lapack, just need to have more flexible API to support all those different usage cases in configuring other libraries.\np.s. the only extra/auxilary packages i had to install are curl, makedepend, openssl, pkg-config, zlib. \n. ps. updated the list of libraries i tried\n. I updated the API and have a fully working (tested on CentOS with MKL) :blas dependency to install the mentioned in the above formulae. I will create a PR to Homebrew tomorrow...\n. @tdsmith i updated your code in https://github.com/Homebrew/linuxbrew/pull/592\n. @ahundt that's the same approach I am trying to push to homebrew-science, the difference is that requirement is local to the tap and not global in Homebrew/Linuxbrew. To see that in action you can check https://github.com/davydden/homebrew-dealiisuite\n. it's there for a while https://github.com/Homebrew/homebrew-science/pull/2889\n. just for ease of reference: \nthat's where (it seems) HOMEBREW_CC is used https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/shared.rb#L139 .\nand then it goes to some checks of REGEX here https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/shared.rb#L285\ni don't know ruby and thus I don't see how actually source variable (HOMEBREW_CC) got passed anywhere, but i think one can make things work by modifying https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/compilers.rb#L3\nto something like GNU_GCC_REGEXP = /([^/]*)gcc-(4\\.[3-9]|5)$/ \n. see http://stackoverflow.com/questions/6494915/regex-pattern-to-match-the-end-of-a-string\n. p.s. you can check /([^/]*)gcc-(4\\.[3-9]|5)$/ here http://www.regexr.com\n. i think the correct regex is /(?:[^/]*\\/g|^g)cc-(4\\.[3-9]|5)$/\n. Bruno, pls try the latest regex i posted which has the same number of groups (1) with the same value (version) as the original regex. This might be important in other places where the regex is used.\n. Ps. That's assuming u have '/path/to/gcc-4.x' that u can use.\nTo my understanding in other places the regex could be used to pickup the version and be able to process something like 'fails_with :gcc49' (and alike).\nIn the original regex the version us in the first and only group.\n. i tried this one /(?:[^\\/]*)gcc-(4\\.[3-9]|5)$/ with export HOMEBREW_CC=/usr/bin/gcc-4.8 (my locations are usual), but hit Homebrew GCC requested, but formula gcc48 not found!. \nWill see if there is a way to make it work with full paths...\n. i commented line 141 in shared.rb : warn_about_non_apple_gcc($&) if cc =~ GNU_GCC_REGEXP and and seems to be running with /(?:[^\\/]*)gcc-(4\\.[3-9]|5)$/ and brew tap homebrew/versions. No GCC is installed from the tap.\nAnother possible workaround (adopted from https://github.com/Homebrew/linuxbrew/issues/137#issuecomment-56759177)  :\nprefix=~/.linuxbrew\nln -s /apps/gcc/4.8.2/bin/gcc $prefix/bin/gcc-4.8\nln -s /apps/gcc/4.8.2/bin/g++ $prefix/bin/g++-4.8\nln -s /apps/gcc/4.8.2/bin/gfortran $prefix/bin/gfortran-4.8\nexport HOMEBREW_CC=gcc-4.8\nbrew tap homebrew/versions\nbrew install hello && brew test -v hello; brew remove hello\nYou can also automate this nicely (if it works) https://github.com/Homebrew/linuxbrew/issues/137#issuecomment-57353932\nIn general, i think HOMEBREW_CC needs some documentation w.r.t how is it used inside and what are the workarounds. Where could this be added @sjackman ?\n. it is actually working! :+1:  i got internal cmake triggered from dependencies of the package where i still had depends_on \"cmake\" => :build instead of depends_on :cmake => [\"2.8\", :build]\n. would certainly like it to be upstream, but @tdsmith won't agree :-)\n. > I think Linuxbrew should reject this because the cmake build isn't very painful and I want to avoid hearing about problems with whatever ancient cmake they ship with CentOS 6 but I'm trying very hard not to become a Linuxbrew maintainer so my opinion probably doesn't matter. ;)\nain't gonna be problems with ancient cmake as we have minimum versions here. As to painfulness, i think @tjhei can share his concerns and issue with not using system's cmake.\n. i agree that there are some errors in the cmake related formulas which should be addressed, but I also believe that linuxbrew should not force users to install cmake (and its dependencies) if system cmake is available and we can do without. Why would one spend more time doing it if there is a shortcut?.. \nChecking out what is the minimum cmake version required for a particular software is super simple, it is one of the first lines in CMakeList.txt : CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8). Thus all the hassles with old system cmake can be avoided. And if we are not sure what's the minimum version (i.e. developers did not specify it), we can still use depends_on \"cmake\" => :build instead of depends_on :cmake => [\"2.8.8\", :build].\nAll in all i do not see any downsides of this PR. It only increase the flexibility of linuxbrew thus making it more attractive for users which value using system provided basic building libraries (cmake, mpi, blas-lapack, gcc, gfortran).\nLet's see what  @sjackman has to say when he's back from holidays...\n. ok. I'll wait until the superenv PR got merged and give it another look. Currently there are some workarounds, as mentioned in issue above.\n. i close this as I don't have time looking into it.\n. it's not only that! it's also changes of .dylib to .so in patches. So the one you have in Linuxbrew is not working irrespectively of gcc version.\n. i submitted gcc related stuff here: https://github.com/Homebrew/homebrew/pull/44612\n. i already send the gcc-related part to homebrew (see link above). Once it's merged/resolved there, i will update the PR here.\n. fixed in upstream. After you merge it I will rebase this PR.\n. i've rebased \n. are you sure you are looking at the right (up-to-date) version? The patch is roughly the same number of lines as the one in Homebrew. I just modified it to work on Linux.\n. i don't need to disable it to see that it will not work otherwise ;-)\nseriously, just see what it does to Makefile which grants a working installation.\n. these and these and these lines in the patch have nothing to do with MAC and as I said they grant working installation. \nThe mac-version is similar in that sense.\n. to close this topic once and forever, ignoring the patch gives:\n```\nLast 15 lines from /home/davydden/Library/Logs/Homebrew/freeimage/02.make:\n2016-01-07 10:52:19 +0100\nmake\n-f\nMakefile.gnu\ninstall\nPREFIX=/home/davydden/.linuxbrew/Cellar/freeimage/3.17.0\ninstall -d //usr/include //usr/lib\ninstall -m 644 -o root -g root Source/FreeImage.h //usr/include\ninstall: cannot create regular file \u2018//usr/include/FreeImage.h\u2019: Permission denied\nmake: *** [install] Error 1\n``\n. upstream is already fine. I have not changed this part of the patch in the upstream, it was working without any issues on os-x. On the contrary, I **adjusted** this patch to work for Linux. That's what the whole PR is about...\n. it does not have to be sent upstream to freeimage. It mostly settings for makefile, it does not fix any bugs.\n. I will shift it to the gist later....\n. @sjackman i shifted it to the gist\n. @sjackman I am Denis :smile: \n. i close this as I don't have time looking into it.\n. updating sha256 inresource \"cacert\" do` solved the issue. \n. seems to be fix in current HEAD.\n. I would prefer to stick with the current input (names/lib/inc), and provide extra methods to combine those into linker flags and compiler flags.\nThe reason is one coud follow the MKL Linker Advisor and write something like '-L/path/to/mkl -lmkl_core -lmkl_sequential -lpthread -lm' but this does not mean that 'libpthread' and 'libm' exist in '/path/to/mkl'. Asa matter of fact they dont. So there is more confusion possible.\nDoing 3-argument-input makes it more rigorous, so advanced user should make sure those libraries exist in directory 'lib'.\n@tdsmith could you briefly advice on how to introduce those helper functions?\n. > but this does not mean that 'libpthread' and 'libm' exist in '/path/to/mkl'. \n\nDoes it matter?\n\nit does for cases when we need library names or full path (see summary of :blas usage in the first post).\n. @xu-cheng Please, have a quick look at the usage section in the OP. The goal would be to get helper methods/functions (how/where?) which use NAMES, LIB to create \n1. ldflags \n2. full path to libraries (with needed separation: \" \" or \";\"). \nI already do that in each single formula i modded, but what @tdsmith was suggesting, as far as I understand, is to create some helper functions to do the job. And then use them in formulae to make things prettier / more neat. \n. i added a check for single precision Fortran blas in order to encapsulate veclibfort inside :blas => :fortran. On linux works as expected:\nwithout BLAS:\n``\n$ unset HOMEBREW_BLASLAPACK_NAMES\n$ unset HOMEBREW_BLASLAPACK_LIB\n$ unset HOMEBREW_BLASLAPACK_INC\n$ brew install blastest_single\nWarning: BLAS not configured\nFalling back to brewed openblas. If you prefer to use a system BLAS, please set\n  HOMEBREW_BLASLAPACK_NAMES (e.g. \"mkl_intel_lp64;mkl_sequential;mkl_core\")\n  HOMEBREW_BLASLAPACK_LIB   (e.g. \"${MKLROOT}/lib/intel64\")\n  HOMEBREW_BLASLAPACK_INC   (e.g. \"${MKLROOT}/include\")\nto correct values.\n==> Installing dependencies for blastest_single: openblas\n==> Installing blastest_single dependency: openblas\n==> Building with an alternative Fortran compiler\nThis is unsupported.\nWarning: No Fortran optimization information was provided.  You may want to consider\nsetting FCFLAGS and FFLAGS or pass the--default-fortran-flagsoption tobrew install` if your compiler is compatible with GCC.\nIf you like the default optimization level of your compiler, ignore this\nwarning.\n==> Downloading https://github.com/xianyi/OpenBLAS/archive/v0.2.14.tar.gz\n==> Downloading from https://codeload.github.com/xianyi/OpenBLAS/tar.gz/v0.2.14\n################################################################## 100.0%\n==> make FC=mpif90 libs netlib shared\n==> make FC=mpif90 tests\n==> make PREFIX=/home/woody/iwtm/iwtm108/.linuxbrew/Cellar/openblas/0.2.14_1 install\n/home/woody/iwtm/iwtm108/.linuxbrew/Cellar/openblas/0.2.14_1: 14 files, 51M, built in 64 seconds\n==> Installing blastest_single\nWarning: BLAS not configured\nFalling back to brewed openblas. If you prefer to use a system BLAS, please set\n  HOMEBREW_BLASLAPACK_NAMES (e.g. \"mkl_intel_lp64;mkl_sequential;mkl_core\")\n  HOMEBREW_BLASLAPACK_LIB   (e.g. \"${MKLROOT}/lib/intel64\")\n  HOMEBREW_BLASLAPACK_INC   (e.g. \"${MKLROOT}/include\")\nto correct values.\n==> Downloading https://gist.githubusercontent.com/davydden/1f9ebf3692beca2438f8/raw/0ba39c8775db3bb21c09c3440bf78ff5f778277d/blas.f90\nAlready downloaded: /home/woody/iwtm/iwtm108/Cache/HOMEBREW/blastest_single-1.0.f90\n==> mpif90 blas.f90 -I/home/woody/iwtm/iwtm108/.linuxbrew/opt/openblas/include -o blastest -L/home/woody/iwtm/iwtm108/.linuxbrew/opt/openblas/lib -lopenblas -pthread -lm\n/home/woody/iwtm/iwtm108/.linuxbrew/Cellar/blastest_single/1.0: 2 files, 16K, built in 2 seconds\n$ brew test blastest_single\nTesting blastest_single\n==> /home/woody/iwtm/iwtm108/.linuxbrew/Cellar/blastest_single/1.0/bin/blastest\n```\nwith MKL:\n$ brew install blastest_single\n==> Downloading https://gist.githubusercontent.com/davydden/1f9ebf3692beca2438f8/raw/0ba39c8775db3bb21c09c3440bf78ff5f778277d/blas.f90\nAlready downloaded: /home/woody/iwtm/iwtm108/Cache/HOMEBREW/blastest_single-1.0.f90\n==> mpif90 blas.f90 -I/apps/intel/ComposerXE2013/composer_xe_2013.5.192/mkl/include -o blastest -L/apps/intel/ComposerXE2013/composer_xe_2013.5.192/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -pthread -lm\n/home/woody/iwtm/iwtm108/.linuxbrew/Cellar/blastest_single/1.0: 2 files, 16K, built in 2 seconds\n$ brew test blastest_single\nTesting blastest_single\n==> /home/woody/iwtm/iwtm108/.linuxbrew/Cellar/blastest_single/1.0/bin/blastest\n. i delete two previous messages as i fixed the issue (and update the last commit). So here's the output on the mac:\nwith openblas\n$ export HOMEBREW_BLASLAPACK_NAMES=\"openblas\"\n$ export HOMEBREW_BLASLAPACK_LIB=\"/usr/local/opt/openblas/lib/\"\n$ export HOMEBREW_BLASLAPACK_INC=\"/usr/local/opt/openblas/include/\"\n$ $ brew install blastest_single\n==> Using Homebrew-provided fortran compiler.\nThis may be changed by setting the FC environment variable.\n==> Downloading https://gist.githubusercontent.com/davydden/1f9ebf3692beca2438f8/raw/0ba39c8775db3bb21c09c3440bf78ff5f778277d/blas.f90\nAlready downloaded: /Library/Caches/Homebrew/blastest_single-1.0.f90\n==> /usr/local/bin/gfortran blas.f90 -I/usr/local/opt/openblas/include/ -o blastest_single -L/usr/local/opt/openblas/lib/ -lopenblas -pthread -lm\n\ud83c\udf7a  /usr/local/Cellar/blastest_single/1.0: 2 files, 20K, built in 2 seconds\n$ brew test blastest_single\nTesting blastest_single\n==> /usr/local/Cellar/blastest_single/1.0/bin/blastest_single\n. ## with default (-lblas -llapack == -framework Accelerate) => need veclibfort\n$ unset HOMEBREW_BLASLAPACK_NAMES\n$ unset HOMEBREW_BLASLAPACK_LIB\n$ unset HOMEBREW_BLASLAPACK_INC\n$ brew install blastest_single\nWarning: BLAS not configured\nFalling back to brewed openblas. If you prefer to use a system BLAS, please set\n  HOMEBREW_BLASLAPACK_NAMES (e.g. \"mkl_intel_lp64;mkl_sequential;mkl_core\")\n  HOMEBREW_BLASLAPACK_LIB   (e.g. \"${MKLROOT}/lib/intel64\")\n  HOMEBREW_BLASLAPACK_INC   (e.g. \"${MKLROOT}/include\")\nto correct values.\n==> Installing dependencies for blastest_single: veclibfort\n==> Installing blastest_single dependency: veclibfort\n==> Using Homebrew-provided fortran compiler.\nThis may be changed by setting the FC environment variable.\n==> Downloading https://github.com/mcg1969/vecLibFort/archive/0.4.2.tar.gz\nAlready downloaded: /Library/Caches/Homebrew/veclibfort-0.4.2.tar.gz\n==> make all\n==> make check\n==> make PREFIX=/usr/local/Cellar/veclibfort/0.4.2_2 install\n==> Caveats\nInstalls the following files:\n  * libvecLibFort.a: static library; link with -framework vecLib\n  * libvecLibFort.dylib: dynamic library; *replaces* -framework vecLib\n  * libvecLibFortI.dylib: preload (interpose) library.\nPlease see the home page for usage details.\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/veclibfort/0.4.2_2: 6 files, 100K, built in 2 seconds\n==> Installing blastest_single\nWarning: BLAS not configured\nFalling back to brewed openblas. If you prefer to use a system BLAS, please set\n  HOMEBREW_BLASLAPACK_NAMES (e.g. \"mkl_intel_lp64;mkl_sequential;mkl_core\")\n  HOMEBREW_BLASLAPACK_LIB   (e.g. \"${MKLROOT}/lib/intel64\")\n  HOMEBREW_BLASLAPACK_INC   (e.g. \"${MKLROOT}/include\")\nto correct values.\n==> Using Homebrew-provided fortran compiler.\nThis may be changed by setting the FC environment variable.\n==> Downloading https://gist.githubusercontent.com/davydden/1f9ebf3692beca2438f8/raw/0ba39c8775db3bb21c09c3440bf78ff5f778277d/blas.f90\nAlready downloaded: /Library/Caches/Homebrew/blastest_single-1.0.f90\n==> /usr/local/bin/gfortran blas.f90 -I/usr/local/opt/veclibfort/include -o blastest_single -L/usr/local/opt/veclibfort/lib -lveclibfort -pthread -lm\n\ud83c\udf7a  /usr/local/Cellar/blastest_single/1.0: 2 files, 24K, built in 2 seconds\n$ brew test blastest_single\nTesting blastest_single\n==> /usr/local/Cellar/blastest_single/1.0/bin/blastest_single\n. i added static functions to the class (have not updated homebrew-science yet, but the usage is clear from blastest_single and blastest). As far as I can tell, it works for me as intended both on OSX and Linux. \n@tdsmith @dpo @xu-cheng  further wishes?\n. i updated the first post to include hdf5, seems to be working for me. Will update it further to install trilinos --with-hdf5 after i test it.\n. i updated homebrew-science branch to use static functions. Looks much cleaner now! Will be submitting a Homebrew PR today (will cherry-pick commits), if nobody has any further comments to this PR.\n. @jppelteret Great! Thanks a lot, Jean-Paul!\n. you asked about documentation, not sure if that's what you mean, but perhaps one could quickly summarise the logic here, i.e. : to check the presence of system's blas we compile a test program with HOMEBREW_BLAS_CFLAGS and HOMEBREW_BLAS_LDFLAGS if they are set or use the default values \"\" and \"-lblas -llapack\". If compilation fails we fall back to openblas and set HOMEBREW_BLAS_CFLAGS and HOMEBREW_BLAS_LDFLAGS accordingly. Otherwise, user specified or default values are stored.\n. Fully agree! Any advices how to do it or places in the library to be inspired?\n. Alternatively we can do global variables (initialised in the requirement), but i dont know how to do it\n. ",
    "bobobo1618": "So I managed to build GCC with this patch but attempting to build Homebrew packages using the new GCC results in the following error:\nError: undefined method `gcc-4.9_build_version' for OS::Mac:Module\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/media/drive/home/user/.linuxbrew/Library/Homebrew/compilers.rb:119:in `block in find_compiler'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/compilers.rb:106:in `each'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/compilers.rb:106:in `find_compiler'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/compilers.rb:99:in `compiler'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/compilers.rb:82:in `select_for'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/extend/ENV/shared.rb:123:in `compiler'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/extend/ENV/std.rb:74:in `setup_build_environment'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/build.rb:90:in `install'\n/media/drive/home/user/.linuxbrew/Library/Homebrew/build.rb:179:in `<main>'\nI simply edited compilers.rb, took out the switch statement and hard coded it to the :gnu case and it works. That seems terribly hacky though and I'm sure there's something up. Shouldn't :gnu be triggered anyway?\n. I've been having issues here too. setup.py has a ton of /usr/include/xxxx hard coded into it and it wreaks havok all over the Python build. ncurses also seems to be a requirement for readline for some reason.\n. Just to add to my previous comment, I built with debug and after the failure, replaced all the /usr/xxx in setup.py with their Homebrew equivalents and I now have an (apparently) working python installation.\nThe reason it seemed to break was that due to those hard coded paths, it used the system GCC standard headers (stdio.h etc.) rather than the Homebrew GCC headers.\nI also added the --oldinclude switch to the configure script but I'm not sure if that affected anything. Even with it I had to replace the hard coded paths in setup.py.\n. I'm referring to the Python source's setup.py, not the others. For example: https://github.com/python/cpython/blob/master/setup.py#L408\n. ",
    "iggyvolz": "Looks like #404 where it ignores HOMEBREW_CC.  Using --cc=gcc4.9 should fix the problem\n. Oh, I wasn't aware everything came from Homebrew.\n. Is this the \"sudo apt-get install build-essential curl...\" line on the README?  I thought I did that but I may have forgotten on that particular server.\nCould one make these :optional?  The Ubuntu system usually gets out of date and I prefer to use linuxbrew.\n. How do you want the commit message to be styled for this?  Is \"Update icecast dependencies\" good or should I change it to the title?\n. No problem!  Any time!\n. This should have been closed by #299.\n. Should the apt-get information stay?  I'm working on testing all of the formula to see if they install on a clean Ubuntu VM, and from the looks of it many of them need new dependencies for linux-only.\nSomething worded like: We're in the process of making sure all dependencies are listed on the linux formula (if this is not the case, please open an issue if there is not one), but you may want to install the following programs to emulate a mac environment in the meantime: (current apt-get, yum, et cetera lines)?\n. The problem seems to be that objective-caml strictly searches for any \"=\" and fails if it is in the configure, which IMO is a terrible practice decision.  This means that CFLAGS written directly in the script are impossible.  I tried to even quote the cflags to no avail, it will still fail.\nAlternatives?  Exporting CFLAGS (terrible idea and not going to happen), writing them to a file and having bash strategically read them after the failing script goes through, or petitioning upstream to remove the strict ban.\n. The -march=core2 is within CFLAGS though - so you would have to run the compiler without any CFLAGS at all (which I believe would install outside linuxbrew).\n. It may require a bz library to be installed - everything's directly ported from mac where a lot of these libraries are pre-installed, so adding dependencies is needed for some formulae.\nFor this one in particular, it looks like it may be lbzip2, but I'll play around with it and see what I can do.\n. This should be sent to Homebrew/homebrew unless it is a linux-specific formula.  Homebrew gets merged here once a week.\n. Yes - you should run brew create  then work on it from there.  A good workflow for submitting changes to homebrew from linuxbrew is:\n``` bash\ncd $(brew --prefix)\ngit remote add homebrew git@github.com:Homebrew/homebrew.git # Or use https if you prefer, or skip this step if you've already done this\ngit remote add fork git@github.com:DiagonalArg/homebrew.git # Or use https if you prefer, or skip this step if you've already done this\ngit fetch --all\ngit checkout homebrew/master\ngit checkout -b add-vm # or whatever your formula may be\nNow make your changes\ngit add .\ngit commit -m \"Add vm\"\ngit push -u fork add-vm\nbrew update # to go back to normal linuxbrew\n```\n. @sjackman Which would you prefer - the string one or the user's PATH?  I personally don't see any problem with passing the PATH in verbatim - there's really no standard place to leave executables which is why PATH exists in the first place.\n. homebrew/homebrew#38527\nAlready done.  Will be merged weekly.\n. Could this be the same cause as #345?\n. You can submit a pull request - just click \"Edit\" on the file in question and edit the version and hash.  If you need assistance please ask and I (or someone who is on the Home/Linuxbrew team) will be happy to help!\n. I would open an issue at https://github.com/mongodb/mongo-tools specifically.\nRunning a brew gist-logs and pointing them to it should work fine.  A good title for the issue would be \"fpclassify.hpp: 'J' does not name a type in Ubuntu 15.04\".  If you need any help feel free to @iggyvolz in the discussion and I can try to help if I get free time.\n. Not sure if you would want to give me push access to the repository, but I have a virtual private server with Jenkins running on Ubuntu 14.10 (working on getting it up to 15.04) that I'd be willing to offer to share.\n. I haven't forgotten about this - it's prep time for final exams so I'm swamped with homework and can't dedicate time to other things right now... hopefully this weekend I can start looking into this.\n. Yep, I'm on it!\n. Couldn't you just depends_on \"python\" unless OS.mac?\nI'm not sure if that will handle the setuptools part and I'm not sure how linuxbrew can install setuptools for it.\n. Err... adding python to dependencies for cmake is going to be interesting:\nhttps://github.com/Homebrew/linuxbrew/blob/89a05340fe3b86dce3a1e8eb23f4dc730534d0eb/Library/Formula/cmake.rb#L17\nruby\ndepends_on :python => :build if OS.mac? && MacOS.version <= :snow_leopard && build.with?(\"docs\")\nMerged from:\nruby\ndepends_on :python => :build if MacOS.version <= :snow_leopard && build.with?(\"docs\")\nSo I wonder if:\nruby\ndepends_on :python => :build unless OS.mac? && MacOS.version <= :snow_leopard && build.with?(\"docs\")\nwould solve that?\n. Try brew install uDrawGraph.  Most formula are all lowercase due to capitalization quirks\n. @eugenk You might want to send a PR to the offending tap... capitals in formula names are really discouraged.\n. It seems to possibly be the same error as http://www.justskins.com/forums/readline-problem-libreadline-so-98137.html, which suggests running gcc rl.c -lreadline -ltermcap.\n. @sjackman did you commit the test fix yet?  If not I can send in a PR.\n. @sjackman Oddly enough, your workaround does not work for me:\nbash\n$ cat readline.rb|tail -n5\n    EOS\n    system ENV.cc, \"test.c\", \"-lreadline\", \"-ltermcap\", \"-o\", \"test\"\n    assert_equal \"Hello, World!\", pipe_output(\"./test\", \"Hello, World!\\n\").strip\n  end\nend\n$ brew test readline -v\nTesting readline\n==> /usr/bin/gcc test.c -lreadline -ltermcap -o test\n==> ./test\n./test: symbol lookup error: /home/ubuntu/workspace/linuxbrew/lib/libreadline.so.6: undefined symbol: UP\nError: readline: failed\n<\"Hello, World!\"> expected but was\n<\"\">.\n. It still seems to be failing... did I do this right?\niggyvolz@personal2:~/workspace/linuxbrew/lib (master) $ ln -s libncurses.so libtermcap.so\n(On a side note - did we split into a seperate problem, and if so should this go on another issue?)\n. I think I found a couple more instances of linking to homebrew in the docs, so I'll add these in.\n. Not sure if this instance should be replaced: https://github.com/Homebrew/linuxbrew/blob/5d1ef0f4a670cccb5835327bfbfede40cbb468eb/share/doc/homebrew/Formula-Cookbook.md#bad-makefiles should be changed, bad makefiles will probably affect both homebrew and linuxbrew so I'd assume they be reported upstream.\nI'm also iffy on this one: https://github.com/Homebrew/linuxbrew/blob/5d1ef0f4a670cccb5835327bfbfede40cbb468eb/share/doc/homebrew/Formula-Cookbook.md#basic-instructions, should that point to both trackers to check if a bug has already been reported?\nAnd I would assume the same question as above would go to which bug tracker the manpage would link to: https://github.com/Homebrew/linuxbrew/blob/f765cd358e3608cdd3088b71b16868489b73f94e/Library/Homebrew/manpages/brew.1.md#bugs\n. Actually, could the Formula Cookbook be tossed, and just replaced with \"give new softwares to either Homebrew/Homebrew or Homebrew/Homebrew-dupes if they are pre-installed on Mac\"?\n. Appropriate lines of code:\nhttps://github.com/Homebrew/homebrew/blob/6dd602f073a97094839d05d2126d944434b5c752/Library/ENV/4.3/cc#L43 (unchanged in linuxbrew)\nruby\n  def tool\n    @tool ||= case @arg0\n    when 'ld' then 'ld'\n    when 'cpp' then 'cpp'\n    when /\\w\\+\\+(-\\d\\.\\d)?$/\n      case ENV['HOMEBREW_CC']\n      when /clang/\n        'clang++'\n      when /llvm-gcc/\n        'llvm-g++-4.2'\n      when /gcc(-\\d\\.\\d)?$/\n        'g++' + $1.to_s\n      end\n    else\n      # Note that this is a universal fallback, so that we'll always invoke\n      # HOMEBREW_CC regardless of what name under which the tool was invoked.\n      ENV['HOMEBREW_CC']\n    end\n  end\nI'm not a ruby expert, but it looks like homebrew hijacks the gcc-* and changes it to g++-*, likely for Mac compatibility purposes.  I wonder if taking this section completely out and just changing it to ENV['HOMEBREW_CC'] would solve the problem without breaking anything else.\n. New software requests should go to Homebrew/homebrew.  They get merged here on a weekly(-ish) basis.\n. It actually looks like pkg-config is the one causing the error:\n\nInstalling graphviz dependency: pkg-config\n. Try chmod 755 $HOME.  Linuxbrew is panicking because the home directory is world-writable.\n. How did you install apache?  If you did it via homebrew, it shouldn't be pointing to /usr/sbin at all.\n. Couldn't we just auto-tap dupes, by downloading the Homebrew/homebrew-dupes tarball in the install file?  It would be a bit of a task to do though - I could take a whack at it over the next two days but then I'm on vacation until the first week of July.\n. My understanding was that the ultimate goal of linuxbrew was that you wouldn't ever need to touch apt-get.  It's a lot more convenient to install git via linuxbrew than to have to install git in order to install linuxbrew in order to install git.\n. @DomT4 The problem is that you can't install git until you install tcl-tk, and you can't install tcl-tk unless you tap dupes, and you can't tap unless you first install git somehow.\n. Works like a charm!\n\nSo to fix this in the linuxbrew core, would I add:\nld_library_path = \"#{prefix}/lib\"\nto mcrypt within the install step?\n. That worked perfectly!  I actually ran into the same exact problem setting up a server and that line made it work.  I'll send in a PR as soon as I'm done with the server.\n. Try running brew install zlib, if it's not already installed.\nOn Jun 20, 2015 11:26 PM, \"Hristo Oskov\" notifications@github.com wrote:\n\nI have a server on DigitalOcean running Ubuntu 15, and I'm trying to\ninstall OpenSSL, but it's failing:\nhristo@test:~$ brew install openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.2c.tar.gz\nAlready downloaded: /home/hristo/.cache/Homebrew/openssl-1.0.2c.tar.gz\n==> perl ./Configure --prefix=/home/hristo/.linuxbrew/Cellar/openssl/1.0.2c --openssldir=/home/hristo/.linuxbrew/etc/openssl no-ssl2 zlib-dynamic shared enable-cms linux-x86_64\n==> make depend\n==> make\nMakefile:88: recipe for target 'subdirs' failed\nmake[1]: * [subdirs] Error 1\nmake[1]: Leaving directory '/tmp/openssl20150620-4632-500bkz/openssl-1.0.2c/crypto'\nMakefile:282: recipe for target 'build_crypto' failed\nmake: * [build_crypto] Error 1\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nopenssl fails \"make test\" on 10.10.3 (https://github.com/Homebrew/homebrew/issues/40892)\nInstalling Elixir fails due to OpenSSL errors. (https://github.com/Homebrew/homebrew/issues/33218)\nI've created a gist with all the output from running the install:\nhttps://gist.github.com/UnsungHero97/981e233b2278ba369bd1\nWhat am I missing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/446.\n. brew install homebrew/dupes/zlib.  I always tap homebrew/dupes so I always\nforget it's there.\nOn Jun 21, 2015 12:02 AM, \"Hristo Oskov\" notifications@github.com wrote:\nHere's what I got:\nhristo@test:~$ brew install zlib\nError: No available formula for zlib\nSearching formulae...\nlzlib\nSearching taps...\nhomebrew/dupes/zlib\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/446#issuecomment-113862060.\n. I'll have a PR up shortly so this doesn't happen again in the future.  Unfortunately, everything's copied straight from Homebrew for mac, where everything in dupes is already installed.\n. Installing python works for me on my Ubuntu 15.04 server - what specs are you using?\n\nYou could try removing the commit from history and see if it installs - if so then that's the source of it:\nbash\ncd $(brew --prefix)\ngit rebase -i 5a35942 ## Delete the line \"80c83ab python: fix openssl on 10.11\" when this opens up\nbrew install python\ngit pull --force ## Force-undo the changes\n. If that's the case, it will be merged into Linuxbrew within a week.\n. Dupe of #435.  Do brew install git --without-tcl-tk or install git first.\n. Just curious - why is this being merged straight into Linuxbrew?  Is it a Linux-specific command?\n. @tomas Linuxbrew is a fork of Homebrew, which is designed for Mac.  Usually, new formulae (formulas?) are sent in to Homebrew, and then they're merged in here weekly - with minor changes for Linux compatibility if needed (hence all the \"unless io.Mac?\")\n. If you made a PR on homebrew, it will get merged into Linuxbrew on a weekly basis.  Things only need to be committed directly to Linuxbrew if it's a Linux-specific fix, it's a Linux-specific software, or it's a critical security fix (in that case it's best to create an issue and ping Shaun so he merges manually)\n. The entire installation is in that one command.  The rest is just installing dependencies and pointing your system to use Linuxbrew stuff by default.\n. Could you run brew gist-logs php56 and post the URL it gives you?  It's really hard to follow all of the error logs you posted, and gist-logs puts them in a consistant format and uploads them.\nTaps are in a really awkward place with Linuxbrew - we can't really push changes to their tap, but cloning their tap and syncing it with Linux-specific changes makes a ton of extra work.\n. Incidentally, I'm working on getting php installed on my linux server through linuxbrew and I can confirm the problem.\nInstalling --without-apache made the error go away.  It looks like php56 defaults to linking to OS X's preinstalled apache binary (in /usr/sbin/apxs), so that should be appended with an \"unless OS.linux?\" I believe.\nI also got an error about DTrace so I had to build with phpdbg so that it wouldn't add --enable-dtrace (the two conflict and it defaults to DTrace, which I assume is a mac-only thing).  So the --enable-dtrace should be \"unless OS.linux?\"\nNext I got configure: error: DBA: Could not find necessary header file(s), which I'm working on.\n. Is there a reason the logs are in Russian?  If there's any way you could build it in English that would be much more helpful.\n. Looks like the problem is related to the install not finding system libraries - which means they're either not installed or Linuxbrew isn't pointing to the proper place.\nMake sure you have build libraries installed, specifically build-essential (run sudo apt-get update && sudo apt-get install build-essential).  It looks like it's not finding those and just failing all over the place.\n. I can confirm that DTrace isn't pre-installed on Linux.  It's pre-installed on Macs (which is what the homebrew-php repo was originally intended for), and seems very difficult to build on linux.  I'll open a pull request on the homebrew-php for discussion on how this should be approached.\nIn the meantime - you can work around this by using --with-phpdbg, as phpdbg conflicts with DTrace so it works on Linux.  There are still tons of other problems with using linuxbrew with homebrew-php.\n. If you need to, you can download files directly to /.cache/Homebrew and they will be picked up as a cached download.  If you want, you could just brew install curl after using wget to download curl's binary to the cache directory, and after that you can just use homebrew's curl (which should work unless your system is really screwed up)\n. Could you run brew gist-logs pkg-config and post the link here?  There's lots of under-the-hood information that isn't reported by the front-end that is very useful.\n. From looking at some bug reports similar, it looks like you ran out of memory on your system.  Some possible workarounds involve modifying CFLAGS manually, which will get really messy with Linuxbrew.  Are you working on a low-memory system, and if so, is there any way you could install more memory?\n. Try running brew gist-logs without a token, or with a token that has gist rights?\n. If I remember correctly, you should add \"unless OS.mac?\" to the end of the line you changed so it remains compatible with Homebrew.\n. Removing the first three lines managed to get rid of the \"-i\" error, but it still failed with the same error, and failed to produce logs.\nUpdated gist: https://gist.github.com/iggyvolz/e930c45f638cdb86a693\n. I just downloaded the tar.gz, and the _bg.po file isn't in there.  I have a reference to the file being deleted at some point between 4.3 and 4.3.30, so my guess is the patch is just outdated and it was added by accident.  I'm guessing OS X's patch just ignores the error, but linux's patch is more strict and fails - if this is the case then it's an error with the patch, and rwhogg's fork should be updated at Homebrew (since it's technically an error on Mac, it's just failing).  I'll check on my mac later today whether this is the case, I can make a PR over there.\n. This was fixed with Homebrew/homebrew#50123.  The offending patch was manually generated, and the nonexistent files were added by mistake.\nWill leave open until it is merged in, and then confirmed to work on linux.\n. Whoops - so used to doing that now that it's a matter of instinct.  I'll take that out.\n. Whoops!\n. Fixed.\n. I knew that, sorry!\n. ",
    "ahundt": "Can issues discussed here be related to the problems I'm encountering in #530? I may also be encountering the crtn.o issues discussed here.\n. @tdsmith there are actually several implementations of blas so configuration of blas would absolutely make sense on OS X. There is a large number of blas implementations which would be useful across multiple platforms such as: nvidia cublas, lapack, intel mkl, amd acml, netlib blas (netlib comes in both c and fortran flavors).\nAlso please note that blas doesn't always require fortran.\nNote that there seems to be a new approach happening at https://github.com/Homebrew/homebrew-science/pull/2889, it would be nice it would also work when fortran isn't required.\n. @dpo fair enough (if we pretend linuxbrew doesn't exist). Anyway, I think the original point stands because I was just illustrating the variety of blas packages rather than accurately enumerating them.\n. could the same bottle integration the mac version has speed up some of those steps for things that depend on gcc?\n. any thoughts on why this may have failed?\n. I'm also trying on a fresh 14.04 and the first issue seems to be gawk is missing:\n```\n==> Installing glibc\n==> Downloading http://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\n==> Downloading from http://gnu.mirror.vexxhost.com/glibc/glibc-2.19.tar.bz2\n################################################################## 100.0%\n==> ../configure --disable-debug --disable-dependency-tracking --disable-silent-\nchecking for gawk... no\nchecking for nm... nm\nconfigure: error: \n These critical programs are missing or too old: gawk\n Check the INSTALL file for required versions.\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\n. I added gawk to the installation, and now gcc 5.2 is failing to build. I tried having homebrew generate gist-logs, but it seems to be stuck.\n. I'm a bit stuck at this point and would appreciate help if anyone is able!\n. Thanks for the info! Can the instructions be updated? In my case I also happen to need a C++11 compiler, so perhaps I still need gcc? Also now it downloads 5.2\nI haven't tried following your instructions yet because I just saw them now. Nonetheless, I wanted to note the following error which may have some relation to the pull request https://github.com/Homebrew/linuxbrew/pull/200:\n```\n/home/hbr/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ranlib libgcc.a\n{ /tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/./gcc/nm -pg  _muldi3_s.o _negdi2_s.o _lshrdi3_s.o _ashldi3_s.o _ashrdi3_s.o _cmpdi2_s.o _ucmpdi2_s.o _clear_cache_s.o _trampoline_s.o __main_s.o _absvsi2_s.o _absvdi2_s.o _addvsi3_s.o _addvdi3_s.o _subvsi3_s.o _subvdi3_s.o _mulvsi3_s.o _mulvdi3_s.o _negvsi2_s.o _negvdi2_s.o _ctors_s.o _ffssi2_s.o _ffsdi2_s.o _clz_s.o _clzsi2_s.o _clzdi2_s.o _ctzsi2_s.o _ctzdi2_s.o _popcount_tab_s.o _popcountsi2_s.o _popcountdi2_s.o _paritysi2_s.o _paritydi2_s.o _powisf2_s.o _powidf2_s.o _powixf2_s.o _mulsc3_s.o _muldc3_s.o _mulxc3_s.o _divsc3_s.o _divdc3_s.o _divxc3_s.o _bswapsi2_s.o _bswapdi2_s.o _clrsbsi2_s.o _clrsbdi2_s.o _fixunssfsi_s.o _fixunsdfsi_s.o _fixunsxfsi_s.o _fixsfdi_s.o _fixdfdi_s.o _fixxfdi_s.o _fixunssfdi_s.o _fixunsdfdi_s.o _fixunsxfdi_s.o _floatdisf_s.o _floatdidf_s.o _floatdixf_s.o _floatundisf_s.o _floatundidf_s.o _floatundixf_s.o _divdi3_s.o _moddi3_s.o _udivdi3_s.o _umoddi3_s.o _udiv_w_sdiv_s.o _udivmoddi4_s.o cpuinfo_s.o sfp-exceptions_s.o addtf3_s.o divtf3_s.o multf3_s.o negtf2_s.o subtf3_s.o unordtf2_s.o fixtfsi_s.o fixunstfsi_s.o floatsitf_s.o floatunsitf_s.o fixtfdi_s.o fixunstfdi_s.o floatditf_s.o floatunditf_s.o fixtfti_s.o fixunstfti_s.o floattitf_s.o floatuntitf_s.o extendsftf2_s.o extenddftf2_s.o extendxftf2_s.o trunctfsf2_s.o trunctfdf2_s.o trunctfxf2_s.o getf2_s.o letf2_s.o eqtf2_s.o _divtc3_s.o _multc3_s.o _powitf2_s.o enable-execute-stack_s.o unwind-dw2_s.o unwind-dw2-fde-dip_s.o unwind-sjlj_s.o unwind-c_s.o emutls_s.o emutls_s.o; echo %%; \\\n      cat libgcc.map.in; \\\n    } | gawk -f ../../../libgcc/mkmap-symver.awk  > tmp-libgcc.map\nmv tmp-libgcc.map libgcc.map\n@multilib_flags@ is still needed because this may use\n/tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/./gcc/xgcc -B/tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/./gcc/ -B/home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/bin/ -B/home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/lib/ -isystem /home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/include -isystem /home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/sys-include    and -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector  directly.\n@multilib_dir@ is not really necessary, but sometimes it has\nmore uses than just a directory name.\n/bin/bash ../../../libgcc/../mkinstalldirs .\n/tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/./gcc/xgcc -B/tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/./gcc/ -B/home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/bin/ -B/home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/lib/ -isystem /home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/include -isystem /home/hbr/.linuxbrew/Cellar/gcc/5.2.0/x86_64-unknown-linux-gnu/sys-include    -O2  -g -O2 -Os -w -pipe -march=core2 -DIN_GCC    -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-format -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition  -isystem ./include   -fpic -mlong-double-80 -g -DIN_LIBGCC2 -fbuilding-libgcc -fno-stack-protector  -shared -nodefaultlibs -Wl,--soname=libgcc_s.so.1 -Wl,--version-script=libgcc.map -o ./libgcc_s.so.1.tmp -g -O2 -Os -w -pipe -march=core2 -B./ _muldi3_s.o _negdi2_s.o _lshrdi3_s.o _ashldi3_s.o _ashrdi3_s.o _cmpdi2_s.o _ucmpdi2_s.o _clear_cache_s.o _trampoline_s.o __main_s.o _absvsi2_s.o _absvdi2_s.o _addvsi3_s.o _addvdi3_s.o _subvsi3_s.o _subvdi3_s.o _mulvsi3_s.o _mulvdi3_s.o _negvsi2_s.o _negvdi2_s.o _ctors_s.o _ffssi2_s.o _ffsdi2_s.o _clz_s.o _clzsi2_s.o _clzdi2_s.o _ctzsi2_s.o _ctzdi2_s.o _popcount_tab_s.o _popcountsi2_s.o _popcountdi2_s.o _paritysi2_s.o _paritydi2_s.o _powisf2_s.o _powidf2_s.o _powixf2_s.o _mulsc3_s.o _muldc3_s.o _mulxc3_s.o _divsc3_s.o _divdc3_s.o _divxc3_s.o _bswapsi2_s.o _bswapdi2_s.o _clrsbsi2_s.o _clrsbdi2_s.o _fixunssfsi_s.o _fixunsdfsi_s.o _fixunsxfsi_s.o _fixsfdi_s.o _fixdfdi_s.o _fixxfdi_s.o _fixunssfdi_s.o _fixunsdfdi_s.o _fixunsxfdi_s.o _floatdisf_s.o _floatdidf_s.o _floatdixf_s.o _floatundisf_s.o _floatundidf_s.o _floatundixf_s.o _divdi3_s.o _moddi3_s.o _udivdi3_s.o _umoddi3_s.o _udiv_w_sdiv_s.o _udivmoddi4_s.o cpuinfo_s.o sfp-exceptions_s.o addtf3_s.o divtf3_s.o multf3_s.o negtf2_s.o subtf3_s.o unordtf2_s.o fixtfsi_s.o fixunstfsi_s.o floatsitf_s.o floatunsitf_s.o fixtfdi_s.o fixunstfdi_s.o floatditf_s.o floatunditf_s.o fixtfti_s.o fixunstfti_s.o floattitf_s.o floatuntitf_s.o extendsftf2_s.o extenddftf2_s.o extendxftf2_s.o trunctfsf2_s.o trunctfdf2_s.o trunctfxf2_s.o getf2_s.o letf2_s.o eqtf2_s.o _divtc3_s.o _multc3_s.o _powitf2_s.o enable-execute-stack_s.o unwind-dw2_s.o unwind-dw2-fde-dip_s.o unwind-sjlj_s.o unwind-c_s.o emutls_s.o libgcc.a -lc && rm -f ./libgcc_s.so && if [ -f ./libgcc_s.so.1 ]; then mv -f ./libgcc_s.so.1 ./libgcc_s.so.1.backup; else true; fi && mv ./libgcc_s.so.1.tmp ./libgcc_s.so.1 && ln -s libgcc_s.so.1 ./libgcc_s.so\n/home/hbr/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find crti.o: No such file or directory\n/home/hbr/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find -lc\n/home/hbr/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find crtn.o: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake[3]:  [libgcc_s.so] Error 1\nmake[3]: Leaving directory /tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build/x86_64-unknown-linux-gnu/libgcc'\nmake[2]: *** [all-stage1-target-libgcc] Error 2\nmake[2]: Leaving directory/tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build'\nmake[1]:  [stage1-bubble] Error 2\nmake[1]: Leaving directory /tmp/gcc20150910-46650-isr4qd/gcc-5.2.0/build'\nmake: *** [bootstrap] Error 2\n/home/hbr/.linuxbrew/Library/Homebrew/debrew.rb:11:inraise'\nBuildError: Failed executing: make bootstrap\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\nChoose an action: \n```\nAt the last line of course there is a blinking command prompt to choose an action, but further steps won't work.\nSide question, what does set -x do?\nHere is my current script where I'm using set -e and set -u, which I will try to modify based on the comment and #517 soon:\n``` bash\n/bin/bash\nset -e\nset -u\nsudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev gawk\nPATH=~/.linuxbrew/bin:/usr/local/bin:/usr/bin:/bin\nunset LD_LIBRARY_PATH PKG_CONFIG_PATH HOMEBREW_CC\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/linuxbrew/go/install)\"\nhang on here. you will have to press return\nbrew doctor\nmkdir ~/.linuxbrew/lib\nln -s ~/.linuxbrew/lib ~/.linuxbrew/lib64\nln -s /usr/lib64/libstdc++.so.6 /lib64/libgcc_s.so.1 ~/.linuxbrew/lib/\nbefore this, you may want to brew edit glibc to produce compatibility for your particular kernel, for example:\n\"--enable-version=2.6.18\"\nbrew install glibc\nbrew unlink glibc\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/zlib.rb\nbrew reinstall binutils\nbrew link glibc\nbrew install patchelf\nbrew install gcc --with-glibc -v\nrm -f ~/.linuxbrew/lib/{libstdc++.so.6,libgcc_s.so.1}\nbrew link gcc\nexport HOMEBREW_CC=gcc-5.2\nbrew install bzip2 curl expat git\nbrew tap homebrew/dupes\nbrew install coreutils findutils gawk gnu-sed gnu-which grep libpng libxml2 libxslt make ncurses readline\nln -s ncursesw/curses.h ncursesw/form.h ncursesw/ncurses.h ncursesw/term.h ncursesw/termcap.h ~/.linuxbrew/include/\nln -s libncurses.a ~/.linuxbrew/lib/libcurses.a\nln -s libncurses.so ~/.linuxbrew/lib/libcurses.so\nbrew install ruby\nPATH=$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\nbrew install hello && brew test hello; brew remove hello\n```\nThanks for the info!\n. Hmm seemed to have trouble as well. Perhaps I didn't insert the lines correctly? Updated script:\n``` bash\n/bin/bash\nset -e\nset -u\nset -x\nsudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev gawk\nPATH=~/.linuxbrew/bin:/usr/local/bin:/usr/bin:/bin\nunset LD_LIBRARY_PATH PKG_CONFIG_PATH HOMEBREW_CC\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/linuxbrew/go/install)\"\nhang on here. you will have to press return\nbrew doctor\nmkdir ~/.linuxbrew/lib\nln -s ~/.linuxbrew/lib ~/.linuxbrew/lib64\nln -s /usr/lib64/libstdc++.so.6 /lib64/libgcc_s.so.1 ~/.linuxbrew/lib/\nbefore this, you may want to brew edit glibc to produce compatibility for your particular kernel, for example:\n\"--enable-version=2.6.18\"\nbrew unlink gawk\nbrew install glibc\nbrew unlink glibc\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-dupes/master/zlib.rb\nbrew reinstall binutils\nbrew link glibc\nbrew install patchelf\nbrew install gcc --with-glibc -v\nrm -f ~/.linuxbrew/lib/{libstdc++.so.6,libgcc_s.so.1}\nbrew link gcc\nexport HOMEBREW_CC=gcc\nbrew install bzip2 curl expat git\nbrew tap homebrew/dupes\nbrew install coreutils findutils gawk gnu-sed gnu-which grep libpng libxml2 libxslt make ncurses readline\nln -s ncursesw/curses.h ncursesw/form.h ncursesw/ncurses.h ncursesw/term.h ncursesw/termcap.h ~/.linuxbrew/include/\nln -s libncurses.a ~/.linuxbrew/lib/libcurses.a\nln -s libncurses.so ~/.linuxbrew/lib/libcurses.so\nbrew install ruby\nPATH=$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\nbrew install hello && brew test hello; brew remove hello\n```\noutput:\n``` bash\n==> Installation successful!\n==> Next steps\nInstall the Linuxbrew dependencies:\nDebian, Ubuntu, etc.:\n  sudo apt-get install build-essential\nFedora, Red Hat, CentOS, etc.:\n  sudo yum groupinstall 'Development Tools'\nSee http://brew.sh/linuxbrew/#dependencies for more information.\nRun brew doctor before you install anything\nRun brew help to get started\n++ brew doctor\nYour system is ready to brew.\n++ mkdir /home/hbr/.linuxbrew/lib\n++ ln -s /home/hbr/.linuxbrew/lib /home/hbr/.linuxbrew/lib64\n++ ln -s /usr/lib64/libstdc++.so.6 /lib64/libgcc_s.so.1 /home/hbr/.linuxbrew/lib/\n++ brew unlink gawk\nError: No such keg: /home/hbr/.linuxbrew/Cellar/gawk\n``\n. I commented thebrew unlink gawkline causing the error now, and got back to the same originalcrtn.o` error:\n/home/hbr/.linuxbrew/Cellar/binutils/2.25.1/x86_64-unknown-linux-gnu/bin/ld: cannot find crtn.o: No such file or directory\n@saketkc Either I didn't put the code you posted where you meant me to put it, or it didn't fix the problem.\n. bump\n. What do you mean by clean install? Everything above is with a fresh VM straight from the CD if that's what you are suggesting. I have a snapshot I reset to when I try and run things again so it is always 100% clean.\nI wish I could get this working because I have several people in my group that would make use of it once it is reliable. Instead I'm thinking about other alternatives since I haven't had much luck here, but I'm still open to linuxbrew if there is a way to get standalone installation working.\n. @sjackman I'd appreciate if you have any suggestions\nI can't use the normal install mechanism because we are using libraries that require later versions of gcc, so the normal install process ends with conflicts that crash my application unfortunately.\n. 64-bit\n. I've improved the script to run with fewer hiccups up to the same crti.o error. However I found some resources explaining the problem:\nstackoverflow crti.o\naskubuntu crti.o\nold launchpad bug\nI searched for the file and it was right there!\nfind -name crti.o\n./.linuxbrew/lib/crti.o\n./.linuxbrew/Cellar/glibc/2.19/lib/crti.o\nEssentially, I need to figure out how to make sure brew/linuxbrew/the gcc compilation command knows where to find it. I tried adding it to PATH, LIBRARY_PATH, and LD_LIBRARY_PATH in the script all without any luck. So, there must be some other way to make sure the path is set correctly and the object file is found. Any ideas?\n. I've created a stackoverfow question to see if someone over there could provide some advice.\n. Interesting, I didn't know about those scripts I'll try to use them to help find a bug. Thanks for at least telling me about them, I understand if you are unavailable, but congrats! \nUnfortunately from my understanding of docker the results of those scripts will be cached by docker and downloaded. That means as updates occur that break the scripts such breakage is missed because the version from the previous time it worked will be downloaded. I think there is a flag to manually re-run though, perhaps I'll see if I can try that.\n. I believe I've fixed it now, I'll try updating it in the tl;dr wiki as well.\n. I've created an updated linuxbrew-standalone.sh that's tested and working in 14.04 with a couple of small caveats listed below in the TODO comments. \n. It doesn't actually affect me, it is just a limitation of the fix I didn't want lost.\n. Thanks for your links I had missed those and it helped me solve the problem!\n. I don't know much about other distributions, didn't the standalone instructions have some apt-get commands before? I'm pretty certain I just added a few extra packages that caused it to fail.\nDo you have suggestions on handling the difference between ubuntu and other linux distros?\nI can try and take a look in a week or two, right now I'm quite short on time.\n. I moved my script to the bottom so those that have the ubuntu use case can use it, which I think is better than simply reverting. \nTo answer your question here is an enumeration of at least some broken pieces of the original script you reverted back to: \n- Instructing people to simply paste it into terminal is also not accurate, that won't run! \n  - At minimum it should say you need to install the readme.md dependencies first, because they are needed to install linuxbrew at all before you can jump to the standalone state\n- this line is missing sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64\n- the missing dependency list isn't complete on the readme.md for 14.04 (see my expanded one in the script)\n- the paths set aren't completely right\n- HOMEBREW_CC isn't set correctly (linuxbrew currently installs gcc5.2, not 4.9, but this will change in the future too so even that fix would break soon, putting simply gcc seemed to work)\n- the three paths PATH, LIBRARY_PATH, LD_LIBRARY_PATH, aren't reset correctly so stuff can be picked up from elsewhere\nConsider the case where someone is following the tl;dr instructions word for word with newly installed fresh vanilla ubuntu, or any other linux, without any steps you know in your head... open a fresh vm, paste the script, and run it. Unfortunately, the current instructions will fail 100% of the time!\nI'd like to suggest this issue be re-opened until the instructions are fully correct, even though I've been able to get through it. Essentially, I recommend considering it \"closed\" when a correct walk-through solution exists that a completely new person can follow to get a successful standalone installation on more than one OS.\nThanks and have a good trip!\n. @sjackman I could be mistaken about those paths since they are sanitized in the script, may want to mention the option of sanitizing them in .bashrc as well, since when the user goes to interact with homebrew that will affect how standalone their interaction truly is. I'm also personally not sure if LIBRARY_PATH is important or not. \n. @DoomHammer I think I've been able to reproduce your problem, trying to figure it out\n. it seems brew unlink gcc && brew link gcc fixed it. A little odd but seems to make it happy instead of the part that removes the .so files.\n. @DoomHammer I've updated the script with a fix I believe should work now.\n. Can you post the full brew gist-logs node, please? Thanks!\n. sphinx is needed to generate the docs. also run brew gist-logs cmake and post the exact error you're getting.\n. I think it would make more sense to keep it in the same organization. In fact the compatibility is the whole reason I started using linuxbrew! What's wrong with formulas supporting both operating systems?\n. Actually, I've always been confused why they aren't even just the same project. That would be even more ideal from my perspective.\n. @mikemcquaid that does seem to fit well with the minimalist selection of features you guys prefer, though I'd still appreciate if the separate project can at least remain under the same organization since there are obvious ties between the two.\n. Sorry to belabor the point but from another perspective that's a perfect example of why they should be merged!\n. @mikemcquaid I understand, I say this from a hopeful perspective rather than a demanding one. Thanks for taking such good care of homebrew. :+1: \n. I have an idea I'll throw against the wall to see if it sticks: \nWhat about minimal, separate core homebrew/linuxbrew repositories, then split the formula folder in both into its own separate default tap? Then it would be less troublesome for linuxbrew and homebrew to remain forked, and formula updates that aren't major breaking changes will simply be automatic for both.\nThere may be something I don't forsee but I figure it is worth mentioning the idea.\n. I agree with @DomT4 @tdsmith on nearly everything they said, though it would be nice if linuxbrew could stay under homebrew. I'd like to note that I'm a PhD student myself, and thus I fit squarely under the scientific use cases mentioned by @tdsmith .\n\n@mikemcquaid wrote:\n@sjackman We keep getting Linuxbrew issues filed on Homebrew, it doesn't have enough maintainers or a focus on quality (e.g. you fork Homebrew's formulae many of which don't work). This all reflects badly on Homebrew and, honestly, Linuxbrew maybe benefits from being part of the Homebrew ecosystem but it now detracts from Homebrew.\n\nSorry about the cases where I was the culprit on this! I'm just a user and as such lend more weight to those doing the heavy lifting, particularly the great work of @mikemcquaid on homebrew. I do differ from him in that I find the disinterest in growing homebrew to be cross platform to detract from the project much more than the quality of linuxbrew detracts from homebrew. I'm primarily a C++ developer and nearly all my code is cross platform. I've found the extra burden of setup and maintenance to be very small, perhaps 1-9% additional work. In fact I've patched many linux only projects to support OS X and I find it helps bring in users and eliminate bugs that wouldn't turn up as easily on a single platform. Admittedly, the whole point of both linuxbrew and homebrew is to help users deal with package management so the overhead % could be much higher for this specific project. Nonetheless, that's why my own perspective differs from @mikemcquaid.\n\n@DomT4 wrote:\nThis leads me onto my next point, which is that there seems to be a lot of general interest in Linuxbrew but not a lot of interest actually helping maintain this ship and let it rig its own sails.\n\nI've tried to submit patches when I know enough to do so but either sufficient documentation or someone who knows the code base needs to be available to get new developers up to speed so they can create genuinely useful contributions. I've patched a number of formulas on homebrew/*, but I don't really know how to fix up some of the lower layers of code that make things tick without spending a very long time learning the intricacies of not just the technical details but also matching the vision of what the most involved developers prefer and do/don't want to maintain.\nMy goal for linuxbrew was reusing my OS X setup process for my project to create one that is easy for others to install on ubuntu 14.04. I didn't know enough to make useful contributions within my time constraints without some support from a more expert developer/contributor, which happened to coincide when @sjackman wasn't available, particularly at the very beginning. The solution I've currently deployed implemented for ubuntu 14.04 doesn't involve Linuxbrew since others following my instructions (and sometimes myself) would often get stuck on a compiler error they can't fix because they don't have the necessary experience with brew.\nAs a side note, I think some sort of working continuous integration would need to be running on a selected set of platforms to verify merges don't break things, and perhaps the whitelist that was mentioned. Hopefully this hasn't strayed too far off topic and is useful feedback. Thanks again to everyone for your great work on both projects!\n. I've found out I can use patchelf to change what dependencies are loaded by modifying RPATH. I'll post a full solution on stackoverflow.\n. I don't think the linuxbrew x11 is what should be used here either, perhaps it should be the one provided by the system, even in the standalone case? Can x11 even be compiled and run properly in a truly standalone way? I feel like at some level dependencies must exist to the underlying system.\n. I encountered some issues like this, perhaps they can help you solve your problems:\nhttps://github.com/Homebrew/linuxbrew/issues/530\nhttps://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation\n. Yeah I realize it won't apply perfectly but hopefully there will be a hint or solution that you can translate to your platform. I have several links specifically about fixing crti.o problems further down in the discussion.\nhttps://github.com/Homebrew/linuxbrew/issues/530#issuecomment-144211035\npotentially relevant stackoverflow question\n. I believe this was me installing with a dependent linuxbrew rather than an independent one, so I was trying to make sure the library configure paths were consistent.\n. brew install gcc will install the homebrew gcc, and I'd prefer to use the system gcc if possible, correct?\n. I'm asking someone with relevant ubuntu version to generate the gist-logs for me, they should have it soon.\n. I'm also having problems because boost.log isn't built, which is supported on these OS versions and something I depend on.\n. It is the default with ubuntu 14.04. I'll try to get a log tomorrow\n. gcc (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4\n. I believe there was another compiler error after that change\n. I believe this is done\n. I don't think @homebrew/science will reach anyone. @dpo is perhaps the most likely person to ask? However, he sent me over here :-)\ndepends_on \"libxml2\" unless OS.mac? looks like a decent workaround temporarily on specific OS versions. @dpo would it be acceptable if I submitted a pull request to homebrew/science to that effect?\nRegarding the existing blas issue, I think this is the issue you are talking about:\nhttps://github.com/Homebrew/homebrew-science/issues/7\nHowever, I've run into this sort of problem in other non-blas cases. For example I think xz Isn't in ubuntu but is needed to install something. I made an issue here in the past about it. Is there any way that type of issue where dependencies not encapsulated by brew could be made easier to figure out in general?\nFurthermore, what if the underlying OS provides a dependency it in the non mac case? That's probably something that would happen if you use dsl linux vs ubuntu, for example.\n. ",
    "maplesond": "See code here\n. ",
    "colindean": "I notice now that there's an error in the one option: --with-brewed-url should be --with-brewed-curl but I don't think that's the root of the problem here.\n. OK, fixing that option did change something, but it's still failing: https://gist.github.com/anonymous/bce74f1fea46f7e702f6\n```\n$ brew install git --with-brewed-curl --with-brewed-openssl --with-pcre --with-blk-sha1\n==> Installing git dependency: curl\n==> Downloading http://curl.haxx.se/download/curl-7.39.0.tar.bz2\n################################################################## 100.0%\n==> ./configure --prefix=/home/colin/.linuxbrew/Cellar/curl/7.39.0 --with-ssl=/home/colin/.linuxbrew/opt/openssl --with-ca-bundle=\n==> make install\n/home/colin/.linuxbrew/Cellar/curl/7.39.0: 298 files, 3.1M, built in 70 seconds\n==> Installing git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.2.0.tar.gz\nAlready downloaded: /home/colin/.cache/Homebrew/git-2.2.0.tar.gz\n==> make prefix=/home/colin/.linuxbrew/Cellar/git/2.2.0 sysconfdir=/home/colin/.linuxbrew/etc CC=/usr/bin/gcc-4.9 CFLAGS=-Os -w -p\nMakefile:249: recipe for target 'po/de.msg' failed\nmake[1]:  [po/de.msg] Error 127\nmake[1]: Leaving directory '/tmp/git-Yetetx/git-2.2.0/git-gui'\nMakefile:1557: recipe for target 'all' failed\nmake:  [all] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\ngit-flow-clone has stopped working... (https://github.com/Homebrew/homebrew/issues/32701)\n```\n. Dropped all options, still fails: https://gist.github.com/5e3aa03e0cec2c172acb\n```\nbrew install git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.2.0.tar.gz\nAlready downloaded: /home/colin/.cache/Homebrew/git-2.2.0.tar.gz\n==> make prefix=/home/colin/.linuxbrew/Cellar/git/2.2.0 sysconfdir=/home/colin/.linuxbrew/etc CC=/usr/bin/gcc-4.9 CFLAGS=-Os -w -p\nMakefile:249: recipe for target 'po/ru.msg' failed\nmake[1]:  [po/ru.msg] Error 127\nmake[1]: Leaving directory '/tmp/git-jjvMtf/git-2.2.0/git-gui'\nMakefile:1557: recipe for target 'all' failed\nmake:  [all] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\ngit-flow-clone has stopped working... (https://github.com/Homebrew/homebrew/issues/32701)\n. I'll give this a shot by the end of the weekend. Machine I had that on is temporarily down.\n.\n$ brew install tcl-tk --without-tk\nError: No available formula for tcl-tk\nSearching formulae...\nSearching taps...\nhomebrew/dupes/tcl-tk\n$ brew install homebrew/dupes/tcl-tk --without-tk\n\n$ brew install git --with-brewed-url --with-brewed-openssl --with-pcre --with-blk-sha1\n\n```\nSuccess. So, it looks like git needs to depend on tcl-tk on Linux only, and that perhaps Linuxbrew needs to have tcl-tk in the main repo?\n. ",
    "BleakleyMcD": "To be honest, I can't really understand what I'm supposed to do with that...but I'll find someone who can explain it to me. Thanks!\n. ",
    "jlisic": "So there real issue is:\nbuilding 'readline' extension\n/home/lisijo/.linuxbrew/bin/gcc-4.9 -pthread -fPIC -fno-strict-aliasing -Os -pipe -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -I/usr/local/include -I/tmp/python-cK61pV/Python-2.7.9/Include -I/tmp/python-cK61pV/Python-2.7.9 -c /tmp/python-cK61pV/Python-2.7.9/Modules/readline.c -o build/temp.linux-x86_64-2.7/tmp/python-cK61pV/Python-2.7.9/Modules/readline.o\n/tmp/python-cK61pV/Python-2.7.9/Modules/readline.c:31:31: fatal error: readline/readline.h: No such file or directory\n #include <readline/readline.h>\n                               ^\ncompilation terminated.\nLooking through the includes:\n-I. \n-IInclude \n-I./Include \n-I/usr/local/include \n-I/tmp/python-cK61pV/Python-2.7.9/Include \n-I/tmp/python-cK61pV/Python-2.7.9\nI am not proposing this as a fix in general, but I added the linuxbrew opt directory includes and lib for readline to args, and the system ncurses.  I would of liked to use the homebrew ncurses but it is missing panel.h.  This seemed to get rid of any issues in 02.make.\nStill more confusion with setup.py.  I can run the install script in setuptools-8.0 just fine (setup.py) so I'm unsure why the formula is missing it.  But the readline modules and a few others are still not getting compiled due to \"necessary bits\" not sure what that means (ref 03.make).\n. Thanks, I was able to get it working with a lot of hackish fixes.  Now gnutls, can't find the nettle I just compiled...\nI think I'll give the standalone a go.\nAs a note I also found that valgrind uses a --build=amd64-darwin on 64bit systems.  I commented this bit out for my build but there is probably a better way to handle it.\n. I'm not really a ruby programmer in any sense, I could look into it but it probably won't be for a few weeks.  You could toss the if OS.mac? condition and everything will still compile, it will just complain a little bit about OS X versions.\n. That looks smashing, but I won't be at my linux box until tomorrow.\n. ",
    "iMichka": "This issue is pretty old. I'll close it. If you still have problems/questions with this, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core. This issue is pretty old, and is waiting for a response this 2016. Let's close this.\nIf you still have problems/questions with this, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core. We have a bottle for libgcrypt now, so I guess this has been fixed at one point, either by us or by upstream.\nIf there are still problems with this, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core. This issue is pretty old, and is waiting for a response this 2015. Let's close this.\nIf you still have problems/questions with this, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core. This issue is pretty old. I see that we do not have a bottle for id3lib. Nobody is working on this for the moment. If you want this to move forward, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core, and fill out the full issue template. Thanks.. Let's close this. No activity here since a few months.\nIf you still have questions or want to discuss this further, please open an issue in our new repo: https://github.com/Linuxbrew/brew. I see that some changes made it into the repo. We do have a scone bottle now, and it seems to work fine, at least in our docker image.\nLet's close this. If you still have problems/questions, please open a new issue in our new repo: https://github.com/Linuxbrew/homebrew-core. We do have a ffmpeg bottle now. Not sure about the travis build back then. The xz dependency has been added since then.. Let's close this. No activity here since a few months.\nWe have a mysql bottle now.\nIf you still have questions/problems, please open an issue in our new repo: https://github.com/Linuxbrew/homebrew-core. Let's close this. No activity here since a few months. If you still have questions/problems, please open an issue in our new repo: https://github.com/Linuxbrew/brew. watchman got an update lately, and will get a pre-compiled bottle in a few hours, once https://github.com/Linuxbrew/homebrew-core/pull/4114 is merged. You can watch that topic, wait for the merge; and test again. Thanks.. ",
    "brownbl1": "Thanks for the help! That worked, and I think I'm almost to a point where it's working. This is the current error:\n/usr/bin/gcc-4.7 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Os -w -pipe -march=core2 -I/home/ben/.linuxbrew/opt/sqlite/include -I/home/ben/.linuxbrew/opt/liblwgeom/include -isystem/home/ben/.linuxbrew/include -fPIC -I../../port -I../../gcore -I../../alg -I../../ogr/ -I/usr/include/python2.7 -I/usr/lib/pymodules/python2.7/numpy/core/include -I/tmp/gdal-IXq6mA/gdal-1.11.1/include -c extensions/gdal_wrap.cpp -o build/temp.linux-x86_64-2.7/extensions/gdal_wrap.o\ncc1plus: warning: command line option \u2018-Wstrict-prototypes\u2019 is valid for C/ObjC but not for C++ [enabled by default]\nextensions/gdal_wrap.cpp:149:20: fatal error: Python.h: No such file or directory\ncompilation terminated.\nerror: command '/usr/bin/gcc-4.7' failed with exit status 1\n. Makes sense. I installed setuptools manually to fix an issue, but after installing python with brew, it came back: \nerror: option --single-version-externally-managed not recognized\nOn the right track though. I'm gonna keep looking, but any other ideas?\n. Yes, which pip does not find anything, and brew postinstall python fails with: /home/ben/.linuxbrew/Cellar/python/2.7.9/bin/python: can't open file 'setup.py': [Errno 2] No such file or directory.\nSo it looks like I'll run down that rabbit hole now. ;)\n. ",
    "sureleo": "Hey, I tried install gdal yesterday but still the same issue. I modified line 275 and 293 it works fine. Can I make a pull request?\n. ",
    "Tyilo": "Shouldn't --with-brewed-curl be the default on Linux?\n. Another suggestion: detect if libcurl is installed. If it isn't implicitly add --with-brewed-curl.\n. OK, but is there a way for me to make brew always use --with-brewed-curl for every install?\n. Ah, I thought more formulas might used libcurl.\nThanks for the help.\n. ",
    "xastor": "I also had a problem with building the openssl formula on an i386 debian squeeze os running on an Intel Atom 64-bit processor.  Due to the 64-bit processor the configuration script was run for x68_64 but the build test failed because the OS can't run it.  I made a manual tweak to os/mac.rb to let the prefer_64_bit function return false and that fixed the problem for me.\nI'm not sure what the perfect fix would be.  I think maybe prefer_64_bit should also take the platform of the operating system into account?\n. That would be : \nroot@fghc2:~# uname -a\nLinux fghc2 2.6.32-5-686 #1 SMP Fri Feb 15 15:48:27 UTC 2013 i686 GNU/Linux\nroot@fghc2:~# uname -m\ni686\n. ",
    "kris-luminar": "I solved this with ln -s /etc/pki/tls/cert.pem /home/myusername/.linuxbrew/etc/openssl/cert.pem.. > Thanks for the workaround. Did brew postinstall openssl work for you?\n@sjackman it's been a week, and I don't recall clearly, but I don't think it did.. ",
    "alanhoyle": "I was running into this same issue  while trying to install bcftools.  (BCFtools has openSSL as a prerequisite).  It seems to be a bootstrapping/catch22 problem:  curl can't download the cert.pem because it's an https:// and it doesn't have a cert.pem to confirm that the connection is secure.  The ln -s /etc/pki/tls/cert.pem $HOME/.linuxbrew/etc/openssl/cert.pemas proposed by @kris-luminar above worked for me as well.  . ",
    "wduncanfraser": "I just ran into this as well. I manually downloaded the cert.pem it was trying to pull and dropped it into $HOME/.linuxbrew/etc/openssl/cert.pem. However, if I tried to run postinstall again it would wipe out this file and then choke on the lack of a rootca file again.. ",
    "skuznetsov": "brew postinstall openssl did trick for me and fixed the similar issue.\nThank you very much!!!. ",
    "heejongahn": "I installed several readline packages already - I tried brew install readline too. Anyway I'll keep try to find a solution and if I do, I'll post it here. Thanks for your reply!\n. @sjackman brew install homebrew/dupes/ncurses didn't solve the problem.. but thanks!\n@tkling Actually I tried some more thing but I couldn't find a solution so now I removed ruby from linuxbrew and just got back to the rvm. However when I come back to this issue or face other problems such as this, I guess your comment will be helpful. Thanks man!\n. ",
    "tkling": "For the readline problem - try running bundle exec rake rails:update:bin instead of just rake rails:update:bin. It ensures all of the gems in your Gemfile are available to the command, sometimes helps in moments like this when it seems like a dependency should have been loaded.\nhttp://bundler.io/v1.7/bundle_exec.html \n. ",
    "wgraydev": "Hey, I'm also running I'm running Ubuntu Server 14.04.1 LTS on a Rackspace server with ruby version ruby 2.1.2p95 and I'm using Bundler. I was getting the same error when tying to run sudo bundle exec rake db:migrate. I added gem 'rb-readline' (a readline library for ruby) to my Gemfile and ran bundle install. Afterward, I was able to run my command. \n. ",
    "dctrud": "Yes, mandatory on at least CentOS6/7 and Fedora20/21 that I've tried\nrecently. I can create a PR if wanted?\n. Some kind of method for linking against MKL would definitely be really nice. We have a Linux cluster and workstation environment where we build optimized environment modules of software, but linuxbrew is a great option for users to try software, try out newer versions etc. Versions of R are potentially the thing we'd have users wanting most if this was possible. We aren't going end up building every new version with the huge stack of packages we have as a environment module - but it'd be great if linuxbrew could give users access to an MKL optimized R easily.\n. @dpo a :blas would be great, but getting the with-blas into formulae would be good. Given the myriad of schemes of environment modules and non-standard paths to access stuff on HPC systems I'd hazard it's probably not worth the effort to have specific mkl, atlas etc. deps/options. The relevant -I -l strings are likely to differ wildly for people most likely to need this on those kinds of systems. It's reasonable to expect enough local knowledge available to users to obtain the correct info?!\nI'll try and find a little time to do something for a --with-blas on the R formula if I can. On our systems there is a massive difference between R configured as standard, and built with MKL (also intel compiler with full AVX opts in our case so wouldn't expect quite the same with gcc). For some simple linear algebra tests on a cluster node:\nTask                               Standard R     Optimized R      Speedup\n==========================================================================\nMatrix Multiplication                  139.15         1.80          77x\nCholesky Decomposition                  29.53         0.32          61x\nSVD                                     45.66         1.95          23x\nPCA                                    201.30         6.25          32x\nLDA                                    135.37        17.60           7x\n. ",
    "RonnyPfannschmidt": "[us ~/.linuxbrew/lib/pkgconfig]$ ln -s ../../Cellar/nettle/2.7.1/lib64/pkgconfig/hogweed.pc \n[us ~/.linuxbrew/lib/pkgconfig]$ ln -s ../../Cellar/nettle/2.7.1/lib64/pkgconfig/nettle.pc\nfixed it, i suspect lib64 isn't taken into account when brew links pkg-congfig files?\nim not fluent enough in the details to fix it\n. another [us ~/.linuxbrew/lib]$ ln -s ../Cellar/nettle/2.7.1/lib64/*.so* .*a . was needed as well\n. ",
    "veprbl": "Updated.\n. https://github.com/xrootd/xrootd/issues/193\n. @sjackman Thanks for your interest. Unfortunately the change is not fully working yet. There is some problem that for many packages causes compilation fail at the linking stage.\n. Two last commits solved all problems that I had so far.\n. What is linuxbrew's upstreaming policy?\n. My idea for separate directory in ENV was that we might want to have some utils behave differently or not have some utils at all (xcrun, mig, i686-apple-*).\n. Cool!. Then what about formulas that want python, but don't need setuptools?\n. ```\n==> python -c import setuptools... --no-user-cfg install --prefix=/home/tmp/cmake-KBdMXW/cmake-3.1.1/sphinx --single-version-externally-managed --record=installed.txt\n--record=installed.txt\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named setuptools\n``\n. The fact is that--with-docsdoes depend on python. This should mean unconditionaldepends_on :python => :build if build.with? \"docs\"`.\nSee also:\n- 464418c588ba0ca4506f2ca4b92073c17b16e359\n- Homebrew/homebrew#33356\n- And the monography: http://wiki.kumokasumi.org/doku.php?id=homebrew_python_policy_draft\n. And that is understandable. Upstream can and will rely on uniformity that OSX provides. On linux I would prefer to assume nothing because there are many different systems outdated each in their own way.\n. Yes. Without this change it would try to prepend nil to $: which in turn broke require directives.\n. I meant: this part does work on linux for me.\n. I'm not sure what was the original intent of using ruby from framework. It would be great to hear what upstream thinks about this.\nIf framework's ruby is a necessity, we could have a ruby script in the superenv to call a correct ruby version depending on the system.\n. ",
    "LeeBergstrand": "Error when brew installing google-perftools. The install fails when checking if nanosleep requires any libraries. \n. syntax@JVHLabVM:~$ brew install gcc\nWarning: gcc-4.9.2_1 already installed\nI also brew uninstall gcc and still got the same error as above. \nMy built in gcc is gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) \n. Re-brew installed gcc. Lets, see if that works.\n. Same Error:\n```\nbrew install google-perftools --cc=gcc-4.9\n==> Downloading https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.4.tar.gz\nAlready downloaded: /home/syntax/.cache/Homebrew/google-perftools-2.4.tar.gz\n==> ./configure --prefix=/home/syntax/.linuxbrew/Cellar/google-perftools/2.4\nchecking for __builtin_expect()... yes\nchecking for __environ... yes\nchecking for __thread... yes\nchecking if __malloc_hook is declared volatile... yes\nchecking if nanosleep requires any libraries... configure: error: cannot find the nanosleep function\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\n. Still same error:\n```\nbrew install google-perftools --cc=gcc-4.9\n==> Downloading https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.4.tar.gz\nAlready downloaded: /home/syntax/.cache/Homebrew/google-perftools-2.4.tar.gz\n==> ./configure --prefix=/home/syntax/.linuxbrew/Cellar/google-perftools/2.4\nchecking for __builtin_expect()... yes\nchecking for __environ... yes\nchecking for __thread... yes\nchecking if __malloc_hook is declared volatile... yes\nchecking if nanosleep requires any libraries... configure: error: cannot find the nanosleep function\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\n. I did some quick searches for the code producing this message. May be useful.\nhttps://github.com/frankee/Cetty/blob/8ad3d1adb321a68a1505d59656b4f9dde8b46efb/thirdparty/google-perftools-1.7/m4/acx_nanosleep.m4\n. From source code of google-perftools 2.4:\n``` shell\nCheck for support for nanosleep.  It's defined in , but on\nsome systems, such as solaris, you need to link in a library to use it.\nWe set acx_nanosleep_ok if nanosleep is supported; in that case,\nNANOSLEEP_LIBS is set to whatever libraries are needed to support\nnanosleep.\nAC_DEFUN([ACX_NANOSLEEP],\n[AC_MSG_CHECKING(if nanosleep requires any libraries)\n AC_LANG_SAVE\n AC_LANG_C\n acx_nanosleep_ok=\"no\"\n NANOSLEEP_LIBS=\n # For most folks, this should just work\n AC_TRY_LINK([#include ],\n             [static struct timespec ts; nanosleep(&ts, NULL);],\n             [acx_nanosleep_ok=yes])\n # For solaris, we may  need -lrt\n if test \"x$acx_nanosleep_ok\" != \"xyes\"; then\n   OLD_LIBS=\"$LIBS\"\n   LIBS=\"-lrt $LIBS\"\n   AC_TRY_LINK([#include ],\n               [static struct timespec ts; nanosleep(&ts, NULL);],\n               [acx_nanosleep_ok=yes])\n   if test \"x$acx_nanosleep_ok\" = \"xyes\"; then\n     NANOSLEEP_LIBS=\"-lrt\"\n   fi\n   LIBS=\"$OLD_LIBS\"\n fi\n if test \"x$acx_nanosleep_ok\" != \"xyes\"; then\n   AC_MSG_ERROR([cannot find the nanosleep function])\n else\n   AC_MSG_RESULT(${NANOSLEEP_LIBS:-no})\n fi\n AC_LANG_RESTORE\n])\n```\n. Sever info:\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=\"Ubuntu 14.04.1 LTS\"\n. Interestingly that command is running very slowing on my machine.\nIt was taking 30 min + and still kept going.\n. I manage to make a manual log using brew install -v boost 2>&1 > log.txt\nLink on my gist here --> https://gist.github.com/LeeBergstrand/038f806c46c7eae20cd3#file-boostfailurelog-txt\n. Ya just checked the log. And it built? It says its built.\nWeird... \nYa so I ran brew install -v boost 2>&1 and it failed.\nWas getting something like this:\n`` shell\ncommon.copy /home/lee2/.linuxbrew/Cellar/boost/1.58.0/lib/libboost_log_setup-mt.so.1.58.0\ncp \"bin.v2/libs/log/build/gcc-4.8/release/log-api-unix/threading-multi/libboost_log_setup-mt.so.1.58.0\"  \"/home/lee2/.linuxbrew/Cellar/boost/1.58.0/lib/libboost_log_setup-mt.so.1.58.0\"\n\nln-UNIX /home/lee2/.linuxbrew/Cellar/boost/1.58.0/lib/libboost_log_setup-mt.so\nln -f -s 'libboost_log_setup-mt.so.1.58.0' '/home/lee2/.linuxbrew/Cellar/boost/1.58.0/lib/libboost_log_setup-mt.so'\n\n...failed updating 16 targets...\n...skipped 6 targets...\n...updated 13314 targets...\n==> Formula\nPath: /home/lee2/.linuxbrew/Library/Formula/boost.rb\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: 56ad5ad48fece63991e514aa4e8de37fdc0aaa44\nLast commit: 20 hours ago\nHOMEBREW_PREFIX: /home/lee2/.linuxbrew\nHOMEBREW_CELLAR: /home/lee2/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: 32-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 1.9.3-p484 => /usr/bin/ruby1.9.1\nPerl: /usr/bin/perl\nPython: /usr/bin/python => /usr/bin/python2.7\nRuby: /usr/bin/ruby => /usr/bin/ruby1.9.1\nJava: 1.7.0_79\n==> ENV\nCC: /usr/bin/gcc-4.8\nCXX: /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc-4.8\nOBJCXX: /usr/bin/g++-4.8\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/lee2/.linuxbrew/include\nLDFLAGS: -L/home/lee2/.linuxbrew/lib -Wl,-rpath,/home/lee2/.linuxbrew/lib\nMAKEFLAGS: -j32\nCMAKE_PREFIX_PATH: /home/lee2/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/lee2/.linuxbrew/lib/pkgconfig:/usr/lib/pkgconfig\nPATH: /home/lee2/.linuxbrew/bin:/home/lee2/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/lee2/.linuxbrew/Library/ENV/scm\nError: boost 1.58.0 did not build\nLogs:\n     /home/lee2/.cache/Homebrew/Logs/boost/01.bootstrap.sh\n     /home/lee2/.cache/Homebrew/Logs/boost/02.b2\nThese open issues may also help:\nbrew install boost --with-mpi --without-single fails (https://github.com/Homebrew/homebrew/issues/40494)\n``\n. so I ranbrew install -v boost 2>&1 > log.txt` and then it worked?\nI'm installing the stuff that requires BOOST now and I'll see if it works.\n. Thanks. Fixed, forgot its was ``` for code block quotes.\nQuick question how long should brew gist-logs boost normally take? It seems really slow for me? Like 10min+ and its would be still running.\n. > \"If brew gist-logs runs extreme slow, it usually means the log file is too large for gist to handle. I noticed > this a while time ago. In this case, it would be better to manually uploading the log files.\"\nI actually think that it is the above. The log file is 4.2mb.\nBrew Doctor runs fairly fast.\n``` Shell\ntime brew doctor\n.....\nreal    0m1.150s\nuser    0m0.304s\nsys 0m0.076s\n```\n1.2 seconds.\n. May be related to: https://github.com/Homebrew/linuxbrew/issues/473\n. I am currently working on a sever with BLAST 2.2.28 already apt-get installed (which people wish to not update through). So I'm basically linux brewing over that.\nshell\nlee2@bm-z820:/lib$ brew list\nboost  bzip2  expat  jpeg  libpng  pcre  tcl-tk  xz\nshell\nlee2@bm-z820:/lib$ ls /lib\napparmor  firmware  init                                  libip4tc.so.0.1.0  libiptc.so.0      libxtables.so.10.0.0  modprobe.d      recovery-mode  terminfo  x86_64-linux-gnu\ncpp       hdparm    klibc-P2s_k-gf23VtrGgO2_4pGkQgwMY.so  libip6tc.so.0      libiptc.so.0.0.0  linux-sound-base      modules-load.d  resolvconf     udev      xtables\ncrda      ifupdown  libip4tc.so.0                         libip6tc.so.0.1.0  libxtables.so.10  lsb                   plymouth        systemd        ufw\n. After brew install zlib new errors occur:\nshell\nbrew install pigz\n==> Downloading http://www.zlib.net/pigz/pigz-2.3.3.tar.gz\nAlready downloaded: /home/leebergstrand/.cache/Homebrew/pigz-2.3.3.tar.gz\n==> make CC=/usr/bin/gcc-4.8 CFLAGS=-Os -w -pipe -march=core2\nLast 15 lines from /home/leebergstrand/.cache/Homebrew/Logs/pigz/01.make:\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o yarn.o yarn.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o try.o try.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/deflate.o z\nopfli/src/zopfli/deflate.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/blocksplitt\ner.o zopfli/src/zopfli/blocksplitter.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/tree.o zopf\nli/src/zopfli/tree.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/lz77.o zopf\nli/src/zopfli/lz77.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/cache.o zop\nfli/src/zopfli/cache.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/hash.o zopf\nli/src/zopfli/hash.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/util.o zopf\nli/src/zopfli/util.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/squeeze.o z\nopfli/src/zopfli/squeeze.c\n/usr/bin/gcc-4.8 -Os -w -pipe -march=core2 -isystem/home/leebergstrand/.linuxbrew/include  -c -o zopfli/src/zopfli/katajainen.\no zopfli/src/zopfli/katajainen.c\n/usr/bin/gcc-4.8 -lz -o pigz pigz.o yarn.o try.o zopfli/src/zopfli/deflate.o zopfli/src/zopfli/blocksplitter.o zopfli/src/zopf\nli/tree.o zopfli/src/zopfli/lz77.o zopfli/src/zopfli/cache.o zopfli/src/zopfli/hash.o zopfli/src/zopfli/util.o zopfli/src/zopf\nli/squeeze.o zopfli/src/zopfli/katajainen.o -lpthread -lm\n/usr/bin/ld: cannot find -lz\ncollect2: error: ld returned 1 exit status\nmake: *** [pigz] Error 1\nBREW LOG:\nhttps://gist.github.com/anonymous/12acf2228ae2c15a2b4c\n. After sudo apt-get install --reinstall zlibc zlib1g zlib1g-dev new errors occur:\nshell\nbrew install pigz                                                                                       \n==> Downloading http://www.zlib.net/pigz/pigz-2.3.3.tar.gz\nAlready downloaded: /home/leebergstrand/.cache/Homebrew/pigz-2.3.3.tar.gz\n==> make CC=/usr/bin/gcc-4.8 CFLAGS=-Os -w -pipe -march=core2\nLast 15 lines from /home/leebergstrand/.cache/Homebrew/Logs/pigz/01.make:\npigz.c:(.text+0x6fa1): undefined reference to `adler32'\npigz.c:(.text+0x6fa8): undefined reference to `crc32'\npigz.c:(.text+0x6fdc): undefined reference to `deflate'\npigz.c:(.text+0x703d): undefined reference to `deflatePending'\npigz.c:(.text+0x706d): undefined reference to `deflate'\npigz.c:(.text+0x70e1): undefined reference to `deflatePrime'\npigz.c:(.text+0x711b): undefined reference to `deflatePending'\npigz.c:(.text+0x7147): undefined reference to `deflate'\npigz.c:(.text+0x71bf): undefined reference to `deflate'\npigz.c:(.text+0x7431): undefined reference to `adler32'\npigz.c:(.text+0x7438): undefined reference to `crc32'\npigz.c:(.text+0x7470): undefined reference to `adler32'\npigz.c:(.text+0x7477): undefined reference to `crc32'\ncollect2: error: ld returned 1 exit status\nmake: *** [pigz] Error 1\nBREW LOGS:\nhttps://gist.github.com/a010b6178d949f3d0375\n. @tseemann  Looks like its having trouble finding zlib even after brew and apt-get installing lib.\n. Did a second gist but ended up having the same issues:\nhttps://gist.github.com/anonymous/e81eba627a6fcef60063\nI basically logged in brew installed and got the following:\n``` shell\nleebergstrand: ~ $ brew install m4\n==> Installing m4 from homebrew/dupes\n==> Downloading http://ftpmirror.gnu.org/m4/m4-1.4.17.tar.xz\nAlready downloaded: /home/leebergstrand/.cache/Homebrew/m4-1.4.17.tar.xz\n==> ./configure --prefix=/home/leebergstrand/.linuxbrew/Cellar/m4/1.4.17\n==> make\nLast 15 lines from /home/leebergstrand/.cache/Homebrew/Logs/m4/02.make:\n2016-03-21 20:21:45 +0000\nmake\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubl\neshooting\nIf reporting this issue please do so at (not Homebrew/homebrew):\n  https://github.com/Homebrew/homebrew-dupes/issues\nThese open issues may also help:\nBuild error GNU M4 https://github.com/Linuxbrew/linuxbrew/issues/947\nsystemd: depends on m4, pkg-config https://github.com/Linuxbrew/linuxbrew/pull/963\nnettle: Depends on m4 for Linuxbrew https://github.com/Linuxbrew/linuxbrew/pull/959\nflex: Depends on m4, bison for Linuxbrew https://github.com/Linuxbrew/linuxbrew/pull/958\nbison: Depends on m4 for Linuxbrew https://github.com/Linuxbrew/linuxbrew/pull/957\nleebergstrand: ~ $ brew gist-logs m4\nhttps://gist.github.com/e81eba627a6fcef60063\n```\nI'm testing some linuxbrew installs using koding.com which runs on Amazon AWS. I'm using the koding's free tier which gives you an amazon t2.nano instance for free. The VM instance has 512 mb RAM, 3 gigs disc, and 1 CPU core. The VM's CPU was pinned at 100% while running Make. \n. Could it be resource starvation? I noticed that the VM locked up (koding disconnected) in the middle of running that Make file.\n. ",
    "reppard": "This change has already been made to Homebrew/homebrew\nhttps://github.com/Homebrew/homebrew/commit/fdac8ecdcb2658881c6ea169b0f9f75735b26c62\n. ",
    "sidaf": "Modifying the system \"make\", \"-s\"... line with the following got it to compile for me, but probably not the most elegant solution:\nsystem \"make\", \"-s\", \"CC=#{ENV.cc}\", \"C_INCLUDE_PATH=#{HOMEBREW_PREFIX}/include\"\n. Using system \"make\", \"CC=#{ENV.cc}\", \"CFLAGS=#{ENV.cflags}\" I get a different compilation error:\nhttps://gist.github.com/sidaf/7c5e0b77272aefe49018\n. Opps, sorry about that! New gist...\nhttps://gist.github.com/sidaf/f7084dddfb937679aa8a\n. Failed, but this time back to original error:\nclipperz_srp_fmt_plug.c:66:17: fatal error: gmp.h: No such file or directory\nhttps://gist.github.com/sidaf/442614f9421e26630268\n. That did the trick, thank you.\n. Fair enough :-)\nThanks or the pointer, have created a fix, please see the following pull request:\nhttps://github.com/Homebrew/linuxbrew/pull/429\n. Yes, this fix worked for me. I have updated the code and commit message as requested.\n. ",
    "slimjim2234": "apparently, it works now.  not too sure what changed within the last 2 months but the installation successfully completed.  Thanks for the followup!\n. ",
    "lpar": "I just got this trying to install neovim:\n==> Installing neovim/neovim/neovim dependency: makedepend\nError: /home/meta/.linuxbrew/opt/pkg-config not present or broken\n. % brew install pkg-config\nError: pkg-config cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n% gcc --version\ngcc (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)\n% which pkg-config\n/usr/bin/pkg-config\n% pkg-config --version\n0.28\n. Is this minimal enough?\n```\n% brew install -v bug264.rb \n==> Installing bug264 dependency: makedepend\nError: /home/meta/.linuxbrew/opt/pkg-config not present or broken\nPlease reinstall pkg-config. Sorry :(\n% cat bug264.rb \nclass Bug264 < Formula\n  homepage \"https://github.com/Homebrew/linuxbrew/pull/264\"\n  url \"https://raw.githubusercontent.com/Homebrew/homebrew/master/README.md\"\n  version \"1.0\"\n  depends_on \"makedepend\" => :build\ndef install\n    puts \"Done.\"\n  end\nend\n```\n...or am I misunderstanding?\n. Creating symlinks doesn't help. Same pkg-config not present or broken error.\nIf you mean you want me to continue and install a whole new GCC and toolchain, that's a bit of a deal-killer.\n. Doesn't seem to be.\n% brew install pkg-config\nError: pkg-config cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n% gcc-4.9 --version\ngcc-4.9 (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)\nCopyright (C) 2014 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n. OK...\n% which -a gcc-4.9\n/usr/local/bin/gcc-4.9\n% ls -la /usr/local/bin/gcc-4.9 \nlrwxrwxrwx. 1 root root 8 2015-06-04 12:15 /usr/local/bin/gcc-4.9 -> /bin/gcc\n% ls -la /bin/gcc\n-rwxr-xr-x. 2 root root 858544 2015-02-12 05:12 /bin/gcc\n% ls -la /usr/bin/gcc\n-rwxr-xr-x. 2 root root 858544 2015-02-12 05:12 /usr/bin/gcc\nI made the links manually. Obviously /usr/local/bin is on my path. /usr/bin/gcc and /bin/gcc are identical according to sha256sum.\nI'm using Fedora 21 if that helps. Also, it occurs to me that I'm running zsh, which might not be the case for anyone else. Ruby version is 2.2.2p95, installed via rbenv and ruby-build.\nbrew tap homebrew/versions doesn't seem to help anything.\n. OK, since it's a Friday I did some debugging, and I've found out why it's not detecting any working compilers.\nIn Library/Homebrew/os/mac.rb, OS::Mac#locate, it attempts to find GCC using File.executable on line 28 -- but it only looks in /usr/bin, it doesn't check any other path. If I move my symlinks to /usr/bin rather than /usr/local/bin then gcc-4.9 is found and I can brew install pkg-config.\n. Yes, it does also check ~/.linuxbrew/bin. However, I think it ought to check the path and not require that the user create symlinks in order to use the distro's standard compiler.\n. I think the actual problem is that md5.so requires libssl.so.1.0.0 according to ldd, but it's not finding that. It's at\n/home/meta/.linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so.1.0.0\n/home/meta/.linuxbrew/lib/libssl.so.1.0.0\nUpdate\nIt was at /home/meta/.linuxbrew/lib/libssl.so.1.0.0 but got deleted from there. It's still at the other location:\n% ls -la /home/meta/.linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so.1.0.0\n-r--r--r--. 1 meta meta 510616 2015-06-05 12:28 /home/meta/.linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so.1.0.0\n. If I symlink .linuxbrew/Cellar/openssl/1.0.2a-1/lib/libssl.so.1.0.0 to /home/meta/.linuxbrew/lib/ then brew upgrade gets a little further, it complains about /home/meta/.linuxbrew/opt/curl/bin/curl: symbol lookup error: /home/meta/.linuxbrew/lib/libssl.so.1.0.0: undefined symbol: EVP_aes_128_cbc_hmac_sha256\nWhich I think means the root problem is #737. brew uninstall --force curl worked around that. Let me know if there's anything I can do to help work out why the openssl upgrade broke everything.\n. ",
    "HorayNarea": "this problem is back with the update to mosh 1.2.5 (at least for me)\nit's fixable by making mosh-client executable\n. i'm sorry, i didn't knew that\n. ",
    "dunn": "Just as a couple data points, neither xubuntu 14.04.2 nor the DigitalOcean distribution of Ubuntu 14.04 have setuptools.\n. Yeah, that would have worked, but I just went ahead and installed brew python.\n. Spoke too soon: just had to sudo apt-get install g++.\nShould I close this, or is this something that linuxbrew can/should check for?\n. Oh gotcha, thanks!  Would it be worth adding a note about dependencies to the end of the install script?  I can open a PR if you think it's a good idea.\n. Sure!  Should it be recommended, or just a regular option? --with-ldap or --without-ldap?\n. Should the option just say \"can cause build errors\"? There's no question anymore of ever merging linuxbrew and homebrew, is there?\n. OK, removed the parenthetical bit.\n. Yeah. Opened Homebrew/homebrew#39012.\n. Upstream is using a separate repository for the install script now, rather than the go branch, so I wasn't sure if it was still a priority to keep the branches in sync.\n. Done.\n. Looks like that part of the manpage hasn't been updated to be Linuxbrew-specific.  Feel free to open a PR!\n. I think at this point the merges are mostly one-way, with Shaun pulling in changes from main Homebrew.\n. Should I open a PR for a linuxbrew version of tcl-tk?\n. Try brew install gwenhywfar --without-cocoa.\n. > What is the issue exactly?\nThe cocoa GUI is only for OS X, so it needs to be turned off when Linuxbrew users install gwenhywfar.\n\nLooks like the project switched to git\n\nFeel like opening a PR to update the head URL? \ud83d\ude03 We'd be very grateful!\n. That's up to @sjackman\u2014I know he doesn't like too many differences between Linuxbrew and Homebrew, because it makes merges changes more difficult.\n. Both Inkscape and GIMP are already in the X11 tap, actually!  But Inkscape might soon be moved to the core Homebrew/homebrew repository, since it doesn't depend on X11 anymore.\n. Building for me on Mac OS 10.10.5. Can you post brew gist-logs binutils?\n. The main Homebrew repo has an updated vim, so once it gets merged into Linuxbrew this will be fixed.\n. Changes in Homebrew are merged into Linuxbrew about once a week, so https://github.com/Homebrew/homebrew/commit/5eed615a12a62de9fa6bea599cb9f28bbef1eb0b will appear shortly!\n. Not currently; allowing that to be configured increases the likelihood of user configuration errors.  Does curl work for you in other contexts?  If you reinstall it, does it work? \n. This was done upstream in https://github.com/Homebrew/homebrew/commit/c02e6dcb92941356c7d0d8f8e07b927f1f8aeb01; it'll be merged into Linuxbrew soon.  If you want to update the Homebrew formula from 0.8 to 0.9, that'd be great!\n. Yeah, we need to figure out how to stop it from trying to write to /usr/lib.\n. Oh, great!\nThe odd thing is that when I add --with-pkg-config-libdir=#{lib}/pkgconfig to the configure arguments, it doesn't actually create that directory and the pkgconfig files. Does it for you?\n. lib is just an alias for prefix/\"lib\".  The Makefile ought to create it if it doesn't exist, but either way the formula currently does: https://github.com/Homebrew/homebrew-dupes/blob/master/ncurses.rb#L29\n. This may be resolved by https://github.com/Homebrew/homebrew-dupes/commit/09d96f4fe3c4bdbd7fc2be5e75468df22b863301; can you try running brew update and trying again?\n. Changes that aren't specific to Linuxbrew are made upstream and marged in about once a week. Once https://github.com/Homebrew/homebrew/pull/44020 is merged, we'll get the fix here too!\n. May be occurring here: https://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/os/linux/hardware.rb#L53\nDoes /proc/cpuinfo exist on your system?\n. Afraid I don't know enough about Linux to help more, gonna have to pass you on to @sjackman \n. Can you post brew gist-logs node, please? Thanks!\n. Can you post the full brew gist-logs node, please? Thanks!\n. I don't think \"+x\" is a valid argument for Ruby's version of chmod.  Try changing line 35 to something like \nruby\n    chmod 0755, [lib/\"ld-#{version}.so\", lib/\"libc-#{version}.so\"]\n. Could you post brew gist-logs mongoose? Thanks!\n. That doctor message might need to be updated for Linuxbrew.\n. Can you post the full brew gist-logs ccze? Thanks!\n. I think this is the same issue we're seeing in https://github.com/Homebrew/linuxbrew/issues/554\n. Linuxbrew usually merges the formula updates from Homebrew once a week, but the primary maintainer is on vacation and so the update cycle is a little slower than usual.  Apologies for the inconvenience!\n. Thanks!\n. Can you post the brew gist-logs libxml2 after each failure?\nIt's also worth noting that Linuxbrew is currently a ways behind Homebrew; it should become up-to-date again this week.\n. > Can I get some confirmation that there is an issue and this shouldn't have happened, since I had already issued brew install zlib?\nI'm not sure; I'm not on the Linuxbrew team.  The primary maintainer will be back this week, though.\n. You can set the environment variable HOMBREW_MAKE_JOBS=1\n. Make sure to preserve whitespace in the inline patches.\n. Homebrew has a method for installing symlinks:\nruby\n(gmp/\"lib\").install_symlink \"#{gmp}/lib/libgmp.so.10.2.0\", \"libgmp.so.3\"\n. ",
    "bukzor": "https://github.com/Homebrew/homebrew/pull/36629\n. I was using 'brew info'.\n. It's brew info that's behaving strangely, and I imagine it's the same for\nall taps. I don't think the issue is about casks per se.\n. Ah, you're right! This works exactly the same in osx.\nMy mistake.\n. That's really what I was complaining about in the OP.\nYou can close this as NOTABUG if you like.\n. Shouldn't we find just the same bug on osx?\nIs this different between clang/gcc?\n. I believe the travis failure wasn't due to my patch.\n. This has failed four times in a row. Is master branch broken?\nI can't see how my patch would have caused that error.\n. @sjackman This still results in breakage, since the python on the $PATH during compilation is (sometimes, and in my case) $BREW/bin/python.  #{which} would give the correct value.\n. Ah, I read it wrong, sorry. You've set it up to be find python using the $PATH under linux. While that fixes my issue (I believe) it's less reliable to pinning to #{which python} during the build, since depending on the exact value of $PATH an incompatible python will be used. This is why homebrew pins the shebang; it just happens to be that /usr/bin/python is invariantly the python they compile with.\n. We don't want /usr/bin/env python in the case of linux either, for the same reason that it's not wanted in machomebrew; it's too often that a entirely different python is on the path than the one we compiled with. We should pin it down to the one that's on the path during build.\n. ",
    "ylluminate": "I wonder if a temporary workaround would be to to install this as one of my admin accounts (not root) as per the normal process and then symlink it over to /opt/linuxbrew and subsequently add this path to user accounts via /etc/profile.d/extrapaths.sh and /etc/zshenv.  Going to fiddle a little here and see what works.\n. So far so good:\nsudo ln -s ~/.linuxbrew /opt/linuxbrew\nsudo nano /etc/profile.d/path.sh\nAdd:\nexport PATH=\"/opt/linuxbrew/bin:$PATH\"\nexport MANPATH=\"/opt/linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"/opt/linuxbrew/share/info:$INFOPATH\"\nThen nano /etc/zshenv and append:\nexport PATH=\"/opt/linuxbrew/bin:$PATH\"\nexport MANPATH=\"/opt/linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"/opt/linuxbrew/share/info:$INFOPATH\"\nThe benefit of this is that it adds this to all users on the system while allowing the original user to maintain it.  I am hopeful that the current umask is satisfactory for this, but will modify I find that it's needed.  At present bins are being created with sufficient permissions.\n. So something is indeed causing this to want to use /tmp still instead of the tmp set via HOMEBREW_TEMP.  When I issued a sudo mount -o remount,exec /tmp and checked the mount points, it was fine and the compilation of ffmpeg proceeded without a hitch.\nWe need to figure out a way to make sure that we are able to use another tmp folder because using /tmp all the time without noexec is just not something I want to have continually running.  The other option might to be to run a check on compilation and warn the user to execute mount -o remount,exec /tmp or even execute that command for the user and then re-execute mount -o remount,noexec /tmp (or rather gather all of the options from fstab and execute the remount to get it back to its original settings).\n. Having the same issue here.  I hadn't updated linuxbrew for quite some time on this server, and then upon update && upgrade, I found that I was hitting walls with a supposed missing gcc.  \nbrew install gcc\n==> Installing dependencies for gcc: zlib, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: zlib\nError: zlib cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\nRunning CentOS / CloudLinux 6.7 here.\n. So, it appears that brew install gcc --cc=gcc resolved the issue, althought I had to step backwards first through some dependencies that were being complained about... and so ultimately providing --cc=gcc each time I hit a wall on a dep got me past that.\n. ",
    "nemith": "You need to compile something that links the python libraries.  I believe for me it was installing weechat with python support. \n. this works.  Thanks!\n. I submitted and maintain libslax/juise for homebrew OS X.  The reason the libedit peices were there is because readline is not included in OS X by default but libedit is (stop another dependency).   This is just reversing that logic for linux. \n. Creating the links worked.  Seems like something that linuxbrew could do, but not important.  I was just confused as it worked before I updated.  I'll leave this open in case you want to continue discussions but feel free to close.\n. Could be related to this change.\nhttps://github.com/Homebrew/homebrew/issues/40516\nhttps://github.com/Homebrew/homebrew/commit/80c83ab43a8f1946c301291985c8f2b1fbf073f9\n. It also seems that readline is not being properly linked either.  \n```\n[bbennett@dev856 /data/users/bbennett] python\nPython 2.7.10 (default, Jun 23 2015, 05:34:38) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport readline\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named readline\n```\n. @iggyvolz \nCentOS 6.4 here.\n\n\n\nReverting that change didn't actually help.  \n@tdsmith Nope.\n```\n[bbennett@dev856 ~] python\nPython 2.7.10 (default, Jun 23 2015, 05:34:38) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport _ssl\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named _ssl\nimport ssl\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/data/users/bbennett/linuxbrew/Cellar/python/2.7.10/lib/python2.7/ssl.py\", line 97, in \n    import _ssl             # if we can't import it, let the error propagate\nImportError: No module named _ssl\n```\n. \n\n\n",
    "Pfeil": "Because brew on mac only provides terminal applications, there is an extension called cask to install sandboxed mac applications. I'm not sure whether cask wants to offer binary applications for other systems. Anyway, on my Mac I can view the formula, and it only provides a .dmg for OSX:\n```\nPfeil ~> brew cask cat virtualbox\ncask :v1 => 'virtualbox' do\n  version '4.3.22-98236'\n  sha256 '886d0e6d17ee09cc1f48d7319257d597ed35428237a4d0d2305a7e03347b717d'\nurl \"http://download.virtualbox.org/virtualbox/#{version.sub(/-.*$/, '')}/VirtualBox-#{version}-OSX.dmg\"\n  name 'VirtualBox'\n  homepage 'http://www.virtualbox.org'\n  license :gpl\n  tags :vendor => 'Oracle'\npkg 'VirtualBox.pkg'\n  binary '/Applications/VirtualBox.app/Contents/MacOS/VBoxManage'\n  binary '/Applications/VirtualBox.app/Contents/MacOS/VBoxHeadless'\nuninstall :script => { :executable => 'VirtualBox_Uninstall.tool', :args => %w[--unattended] },\n            :pkgutil => 'org.virtualbox.pkg.*'\nend\nPfeil ~>\n```\nSee the url string. Casks exist because of the way graphical applications are packaged on OSX (one container (name.app) with the binaries etc inside, doubleclick on container starts application). On Linux they do not make too much sense. You would need to create a formula in the linuxbrew repository to install virtuallbox using brew, I guess.\nI think it would make sense to remove the cask repository for linuxbrew users if possible. The behavior of linuxbrew, though is totally normal. It's the same that homebrew for mac shows. Even on OSX you need to install brew-cask to use the brew cask command.\n. Yes. I have no idea why homebrew and linuxbrew show casks without brew-cask being installed (but I can confirm it), but they are OSX-specific. More information to cask: https://github.com/caskroom/homebrew-cask\n\nHomebrew Cask extends Homebrew and brings its elegance, simplicity, and speed to OS X applications and large binaries alike. (http://caskroom.io/)\n\nI think the only issue here is that brew shows casks by default. Especially on linux.\n. Do you have problems with non-cask repositories? If not, I think this is normal. There is a technical difference between formula and casks. Formulas derive from \"Formula\":\n$ brew cat fish\nclass Fish < Formula\n...\nend\nCasks do not even seem to be a class (I don't know this construct, I'm no ruby programmer):\n$ brew cask cat virtualbox\ncask :v1 => 'virtualbox' do\n...\nend\nAnd since virtualbox is (in this case) no formula, but a cask, brew info does not find any (I guess).\n$ brew info Caskroom/cask/virtualbox\nError: No available formula for virtualbox\n. ",
    "captain-awesome": "Thanks for your reply sjackman.\nI am a newbie at this and am trying to follow the Lynda.com Ruby on Rails Essential DVD but they only cover how to install Rails on Mac and Windows.\nI'm attempting to install Rails on Ubuntu 14.04.\nThe tutorial uses Homebrew, I've install Linuxbrew.\nWhenever I execute \"brew install mysql\" it returns the following:\n\n```\nlucius@localhost:~$ brew install mysql\n==> Installing mysql dependency: cmake\n==> Downloading http://www.cmake.org/files/v3.1/cmake-3.1.2.tar.gz\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake-3.1.2.tar.gz\n==> Downloading https://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.2.3.ta\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake--sphinx-1.2.3.tar.gz\n==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake-OFC\n==> Downloading https://pypi.python.org/packages/source/d/docutils/docutils-0.12\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake--docutils-0.12.tar.gz\n==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake-OFC\n==> Downloading https://pypi.python.org/packages/source/P/Pygments/Pygments-2.0.\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake--pygments-2.0.2.tar.gz\n==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake-OFC\n==> Downloading https://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.7.3.ta\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake--jinja2-2.7.3.tar.gz\n==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake-OFC\n==> Downloading https://pypi.python.org/packages/source/M/MarkupSafe/MarkupSafe-\nAlready downloaded: /home/lucius/.cache/Homebrew/cmake--markupsafe-0.23.tar.gz\n==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake-OFC\n==> ./bootstrap --prefix=/home/lucius/.linuxbrew/Cellar/cmake/3.1.2 --system-lib\n==> make\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcurl.so: undefined reference to `SSL_get_peer_certificate@OPENSSL_1.0.0'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [bin/ccmake] Error 1\nmake[1]: *** [Source/CMakeFiles/ccmake.dir/all] Error 2\nmake: *** [all] Error 2\n```\n\nMy apologies for not including this.\nThanks\n. sjackman, I ran your command.\n```\nCMake Error at cmake/readline.cmake:206 (MESSAGE):\n  Cannot find system editline libraries.\nCall Stack (most recent call first):\n  CMakeLists.txt:406 (MYSQL_CHECK_EDITLINE)\n-- Configuring incomplete, errors occurred!\nSee also \"/tmp/mysql-L9AsL4/mysql-5.6.22/CMakeFiles/CMakeOutput.log\".\nSee also \"/tmp/mysql-L9AsL4/mysql-5.6.22/CMakeFiles/CMakeError.log\".\n```\nPlease see my pastebin post here for full report: http://pastebin.com/y5nFvtCr (I didn't want to clutter this thread)\n. Hi sjackman,\nI received the following:\n```\nlucius@localhost:~$ brew install curl readline cmake mysql\nWarning: curl-7.40.0 already installed\nWarning: readline-6.3.8 already installed\nWarning: cmake-3.1.2 already installed\n==> Downloading http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.22.tar.gz\nAlready downloaded: /home/lucius/.cache/Homebrew/mysql-5.6.22.tar.gz\n==> Downloading https://github.com/mysql/mysql-server/pull/3.diff\nAlready downloaded: /home/lucius/.cache/Homebrew/mysql--patch-6b17a31ee32e373dca                                                      0f257f7c7884ac6dcf8e1f.diff\n==> Patching\npatching file cmake/ssl.cmake\n==> cmake . -DCMAKE_INSTALL_PREFIX=/home/lucius/.linuxbrew/Cellar/mysql/5.6.22 -\n-- Configuring incomplete, errors occurred!\nSee also \"/tmp/mysql-YrTRQW/mysql-5.6.22/CMakeFiles/CMakeOutput.log\".\nSee also \"/tmp/mysql-YrTRQW/mysql-5.6.22/CMakeFiles/CMakeError.log\".\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nmysql-connector-c++ cannot build with mariadb  (https://github.com/Homebrew/homebrew/issues/34578)\nmysql failed to build on 10.10 (https://github.com/Homebrew/homebrew/issues/33448)\nPackages with --with-mysql option not satisfied by mariadb (https://github.com/Homebrew/homebrew/issues/32973)\n```\n. https://gist.github.com/6b279259cceaad4940a2\n. after running that command:\nlucius@localhost:~$ brew install curl libedit cmake mysql\nError: No available formula for libedit\nSearching formulae...\nSearching taps...\nhomebrew/dupes/libedit\n. I received the following:\n```\nlucius@localhost:~$ brew install curl homebrew/dupes/libedit cmake mysql\nWarning: curl-7.40.0 already installed\nWarning: libedit-3.1 already installed\nWarning: cmake-3.1.2 already installed\n==> Downloading http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.22.tar.gz\nAlready downloaded: /home/lucius/.cache/Homebrew/mysql-5.6.22.tar.gz\n==> Downloading https://github.com/mysql/mysql-server/pull/3.diff\nAlready downloaded: /home/lucius/.cache/Homebrew/mysql--patch-6b17a31ee32e373dca0f257f7c7884ac6dcf8e1f.diff\n==> Patching\npatching file cmake/ssl.cmake\n==> cmake . -DCMAKE_INSTALL_PREFIX=/home/lucius/.linuxbrew/Cellar/mysql/5.6.22 -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_VERBOSE_MAKEFILE=ON -DMYSQ\n==> make\n==> make install\n==> Caveats\nA \"/etc/my.cnf\" from another install may interfere with a Homebrew-built\nserver starting up correctly.\nTo connect:\n    mysql -uroot\n==> /home/lucius/.linuxbrew/Cellar/mysql/5.6.22/bin/mysql_install_db --verbose --user=lucius --basedir=/home/lucius/.linuxbrew/Cellar/mysql/5\nInstalling MySQL system tables...2015-03-06 16:11:45 0 [Warning] Using unique option prefix key_buffer instead of key_buffer_size is deprecated and will be removed in a future release. Please use the full name instead.\n2015-03-06 16:11:45 0 [Warning] Ignoring user change to 'lucius' because the user was set to 'mysql' earlier on the command line\n2015-03-06 16:11:45 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).\n2015-03-06 16:11:45 7643 [ERROR] Can't find messagefile '/usr/share/mysql/errmsg.sys'\nWarning: The post-install step did not complete successfully\nYou can try again using brew postinstall mysql\n==> Summary\n/home/lucius/.linuxbrew/Cellar/mysql/5.6.22: 9667 files, 350M, built in 17.3 minutes\nlucius@localhost:~$ mysql -uroot\nmysql: error while loading shared libraries: libedit.so.0: cannot open shared object file: No such file or directory\n```\nThe warning states\"\nWarning: The post-install step did not complete successfully\nYou can try again using `brew postinstall mysql`\nI received the following:\n```\nlucius@localhost:~$ brew postinstall mysql\n==> /home/lucius/.linuxbrew/Cellar/mysql/5.6.22/bin/mysql_install_db --verbose --user=lucius --basedir=/home/lucius/.linuxbrew/Cellar/mysql/5\nInstalling MySQL system tables...2015-03-06 16:16:46 0 [Warning] Using unique option prefix key_buffer instead of key_buffer_size is deprecated and will be removed in a future release. Please use the full name instead.\n2015-03-06 16:16:46 0 [Warning] Ignoring user change to 'lucius' because the user was set to 'mysql' earlier on the command line\n2015-03-06 16:16:46 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).\n2015-03-06 16:16:46 7868 [ERROR] Can't find messagefile '/usr/share/mysql/errmsg.sys'\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nmysql-connector-c++ cannot build with mariadb  (https://github.com/Homebrew/homebrew/issues/34578)\nmysql failed to build on 10.10 (https://github.com/Homebrew/homebrew/issues/33448)\nPackages with --with-mysql option not satisfied by mariadb (https://github.com/Homebrew/homebrew/issues/32973)\n```\n. Thank you for your assistance\n. ",
    "shinux": "@sjackman Nice solution for brew install curl homebrew/dupes/libedit cmake mysql\uff0cthis also worked for mariadb installation error which reproduced in  #34578\nin my enviroment, after installed the curl, libedit, cmake, terminal should be restart for the next step.\n. ",
    "JensErat": "Seems I have to put some additional effort in this. Worked for me, but there seems to be some (new) dependency missing. Will open a new pull request when resolved.\n. I created a new patch upstream, thank you for the explanation.\nIs this already documented anywhere (and I've just been unable to find it)? Otherwise I'd propose some paragraph documenting this workflow, as this is a little bit unexpected to new contributors (or old ones from OS X homebrew).\n. There is another problem, which I'm not sure about what to do:\n\ncc1plus: error: unrecognized command line option \u2018-std=c++11\u2019\n\nI have no issues on my system. Is it possible the rather old GCC 4.6 does not support C++11? If so, how could this be resolved (for Travis)?\n. So should task reference GCC 4.9 as on_build dependency? As far as I know the Formula Cookbook (nor scrolling through it again) we cannot enforce something like \"at least GCC 4.7, otherwise install GCC from homebrew), or is there a better alternative (for users with adequate version of GCC)?\n. I will propose the C++11 patch upstream, thank you for the hint. Is it possible to somehow trigger travis builds without pull requests? I guess we have very similar problems for libuuid, but they're rather hard to replay on my local machine.\nOr some docker container with a \"travis-like\" setup. I see you have added some on the index, are any of these comparable to Travis?\n. ",
    "bnied": "Apologies; I didn't read the instructions clearly enough to see the note about the pull request.\n. I did. I merged the changes from the pull request into the latest linuxbrew package manifests and everything installed successfully.\nThank you for the followup!\n. ",
    "martinwolf": "Hey! Thanks, but not sure what that means:\n```\n\nbrew install ncurses\nError: No available formula for ncurses\n.\nbrew tap homebrew/dupes\n```\n\nThat helped. Awesome, everything's working now, thanks! :)\n. ",
    "foobacca": "doing those two steps fixed it on both Debian and Ubuntu, thank you :)\nlet me know if there are any other things you'd like me to report, otherwise feel free to close the issue.\n. ",
    "ifigueroap": "I confirm that I'm getting the same issue on Ubuntu 14.04.2\n. I'm having the same issue :( \nThe brew gist-log is here https://gist.github.com/baaf98d031eb9594ef74\n. Thanks for looking into the issue. Can you point me to where I should open the issue upstream?\nAny guidance on how to develop a workaround (e.g. patching that particular makefile?)\n. ",
    "esabelhaus": "Hey, how can I help with this?\nI was running my install through Linuxbrew, not sure that the two platforms are apples to apples, but I may be able to find some insight into why it is not compiling properly\nalso, to specify further, I was building nginx rather that apache.\n. ",
    "dpo": "The client-server functionality in Vim has nothing to do with the GUI; it enables other programs to communicate with Vim (e.g., a PDF viewer). For some reason, I was never able to compile Vim with the client-server functionality enabled without also depending on GTK+.\n. Yes, that's exactly what's going on. Vim tries to enable the client-server functionality by default. Technically, it doesn't have anything to do with the gui, but back when I submitted the patch, I couldn't get it to be enabled in the final compiled executable unless vim also found gtk+.\n. @sjackman @tseemann FYI I just had the same issue and gem install minitest resolved it for me on a Red Hat system.\n. Yes there should probably be a dependency on :java. I've never tried installing open-mpi on a fresh Mac, but it could be that our users already have Java installed, including the bot.\n. I am very favorable to adding BLAS/LAPACK support in the form of a :blas dependency. The latter could default to -lblas -llapack. Linux users who install BLAS/LAPACK with apt-get or similar will usually end up with libblas.so and liblapack.so in /usr/lib or another system path. On OSX, linking against libblas.dylib and liblapack.dylib is the same as linking against the Accelerate framework:\nlrwxr-xr-x  1 root  wheel   116B Sep 20  2014 /usr/lib/libblas.dylib -> ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\nlrwxr-xr-x  1 root  wheel   118B Sep 20  2014 /usr/lib/liblapack.dylib -> ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\nOpenBLAS lags behind Accelerate on OSX, at least on certain types of architecture. I opened an issue about that on the OpenBLAS tracker a while ago.\nI'm unsure Homebrew core would accept several such dependencies, such as for example, :blas, :mkl, :acml, :openblas, :gotoblas, etc., though it might be best in the long run.\nA simpler solution in the immediate future might be an option of the form\nruby\noption \"with-blas=\", \"Specify desired BLAS library to link against\"\nand in install:\nruby\nblas = ARGV.value(\"with-blas\") || \"-lblas -llapack\"  # or something of this form\nWe're already using this stanza in formulas that relate to MATLAB, e.g., suite-sparse, because a user might have several versions of Matlab available (I do).\nThe main difficulty is to propagate the BLAS choice to dependencies.\nI'm willing to have a shot at a :blas dependency but it will likely not happen immediately.\n. The MKL, Atlas, and others are also available on the Mac.\n. +1\n. I thought :blas could also apply to OSX.\n. I like :blaslapack, but perhaps :blas is sufficient if we need to keep it short. For example, OpenBLAS contains both BLAS and LAPACK subroutines.\n. @ahundt I don't think ACML is relevant here because Apple computers don't have AMD processors.\n. We haven't had too much success so far. One blocking factor is the time it takes to build stuff (especially gcc and the like). We get kicked out.\n. I'll gladly help as time allows.\nps: congratulations!\n. Is there a way to package Java in the docker images? Look at this \"successful\" build: https://travis-ci.org/Homebrew/homebrew-science/jobs/86294570.\n. About BLAS, there's https://github.com/Homebrew/homebrew-science/pull/2889 that was closed recently. You might want to give it a try and perhaps pick it up? It was also trying to accommodate custom BLAS/LAPACK.\nPerhaps brew doctor in Linuxbrew could warn when BLAS/LAPACK are missing?\nI'd love to have a more reliable BLAS dependency for Linux. For now, we have to resort to logic such as https://github.com/Homebrew/homebrew-science/blob/master/superlu.rb#L47, which works as long as a BLAS/LAPACK is installed.\nI'm also open to a formula for ATLAS with accompanying LAPACK. That's essentially what you get when you install prebuilt binaries from a Linux package manager. The formula would be keg only on OSX, but wouldn't need to be on Linux. It could be part of the BLAS requirement above.\n. I don't think MKL is available for 10.9 unfortunately. It could be supported (via the BLAS requirement) but I don't think it should be the default.\n. @sjackman openblas supplies both BLAS and LAPACK and we already have a formula for it. Usually both are needed at the same time so I don't think we need two requirements; just :blas would probably do.\nATLAS only supplies an optimized BLAS, but it's then a simple matter of building an optimized LAPACK library against it. I propose we go with openblas.\n. > The default_formula of the :blas requirement will be atlas.\n\nThe default_formula of the :lapack requirement wil be openblas.\nopenblas will depends_on :blas => :recommended\nMake sense?\n\nopenblas supplies both BLAS and LAPACK. There's no need to have two requirements because BLAS and LAPACK are used together in 99.99% of cases. \nI'm proposing we only have a :blas requirement with either:\n1) openblas as default_formula, or\n2) atlas as default_formula, which will install ATLAS together with a LAPACK library built against it.\n. When things calm down for me I'll have a shot at an ATLAS formula. One source of trouble with ATLAS is that LAPACK must be built at the same time, so they might have to appear in the same formula, but I'll check.\n\nopenblas depends upon some implementation of BLAS (:recommended) and alternatively uses its own implementation of BLAS.\n\nOpenBLAS provides the BLAS, it can't depend on an external BLAS. It's BLAS and LAPACK packaged into a single libopenblas library.\n. Sorry if this is all a bit fuzzy. There is only one BLAS and there is only one LAPACK. Their source code is available on Netlib and they're usually called the \"standard\" BLAS and the \"standard\" LAPACK. Their mission is to perform common vector and (dense) matrix operations (such as vector addition, matrix-vector product, matrix-matrix product, certain matrix factorizations, etc.) more or less efficiently by taking advantage of cache size or other architectural factors. However, they were written in such a way that many of their subroutines depend on parameters. When people talk about \"optimized\" BLAS and LAPACK, they mean that a certain search procedure has been applied to those parameters so as to produce the lowest possible run time (or Gflops, or throughput, or something else).\nATLAS is a wrapper around BLAS that performs such a search on the local architecture at install time. My understanding (but I should double check) is that if requested at install time, it will also work on parameters exposed in LAPACK.\nOpenBLAS is the same as the standard BLAS and LAPACK with certain parts rewritten in assembly to be closer to the metal. There's probably a parameter search in there too.\nThe Accelerate framework on OSX provides exactly the same thing, except that the search procedure is proprietary to Apple. The MKL is the same, but proprietary to Intel (the MKL also contains other stuff). The ACML is the same, but proprietary to AMD. Etc, etc.\nI hope this clarifies a bit. In almost all applications where the BLAS is needed, LAPACK is also needed. In all applications where LAPACK is needed, the BLAS is needed. That's why it makes some sense to package them together. They go hand in hand.\n. Didn't know about homebrew/dupes/lapack. It's a good starting point but it won't be efficient.\n\nopenblas provides neither libblas.so nor liblapack.so. It provides libopenblas.so. Does that library provide the same interface as (i.e. satisfy) libblas.so and liblapack.so?\n\nIt does.\n\nIf so, perhaps on Linux openblas should create symlinks from libopenblas.so to libblas.so and liblapack.so. What do you think?\n\nThat's a good point. It's easy to amend the formula, but it's keg only because on OSX libblas.dylib and liblapack.dylib point to the Accelerate framework. Perhaps openblas shouldn't be keg_only on Linux?\n\nDo we need ATLAS if we already have two BLAS/LAPACK implementation to choose from?\n\nAccording to the LAPACK README,\nThe distribution tar file [...] also contains the Fortran77\nreference implementation of the Basic Linear Algebra Subprograms\n(the Level 1, 2, and 3 BLAS) needed by LAPACK.  However this code is\nintended for use only if there is no other implementation of the BLAS\nalready available on your machine; the efficiency of LAPACK depends\nvery much on the efficiency of the BLAS.\nBut I suggest we go ahead and I'll work on ATLAS when I get a chance. I just gave it a quick try and it doesn't build out of the box.\n. Let's go with openblas: http://math-atlas.sourceforge.net/atlas_install/node60.html\n. We're already doing depends_on \"openblas\" unless OS.mac? in formulas such as superlu. How would the :blas requirement work? Do nothing on OSX and use openblas on Linux? Frankly we should be using veclibfort on OSX instead of using the buggy Accelerate directly, but that might not fly because it depends_on :fortran.\n. https://github.com/Homebrew/homebrew-science/pull/3570\nhttps://github.com/Homebrew/homebrew-science/pull/3571\n. I don't think that if OS.linux? is necessary since libblas and liblapack are symlinked to Accelerate on osx. \n. ",
    "kiryph": "Thanks for sharing all the details. The gtk+ version works. One minor glitch is that the scroll bar does visually not fit to the theme of the XFCE desktop I am on.\n. ",
    "5hubh4m": "I built vim with --with-client-server on a remote server, however I'm still lost as to how do I launch the GUI. I ssh'ed with the -X option.. There is no gvim in ~/.linuxbrew/bin.. Yes, to be exact, I did brew reinstall vim --with-lua --with-override-system-vi --with-client-server.. I've been trying to install gtk+3, but the systemd build fails. I'll be trying this again soon though.. ",
    "andreabedini": "my 2c, I totally support using $HOME/.linuxbrew. My use case is scientific HPC clusters that often run outdated versions of CentOS. With linuxbrew I am only a brew install away from a usable environment.\n. good stuff guys, I'm loving this. Question, is x86_64_linux going to be enough? shouldn't we include something more specific (like glibc version?) to make it work on all platforms? otherwise we could use a distribution/release scheme like \"CentOS_6_6\", it would include a lot of bottles to build but it would also be rock solid. my 2c :)\n. it makes sense @sjackman, I tried building my own bottles with\ndocker run sjackman/linuxbrew-standalone sh -c 'brew install --build-bottle hello && brew bottle hello\npretty cool stuff!\n. @sjackman what's the plan regarding dependencies? if I do brew install --build-bottle python can I then get bottles of python's dependencies? they get built after all ... If not we need to build a bottle for each dependency prior to building the main package to speed up things and maximum bottling :)\n. happy to give a hand with CI if you need\n. what's the trick to pour bottles? I compiled some bottles as above and copied them on a different machine. I'm trying to do\nbrew install ./doxygen-1.8.9.1.x86_64_linux.bottle.tar.gz\nbut it goes on installing everything from source as I just did brew install doxygen. What am I missing?\n. if it's only a default /usr/local should be ok. As I see it, default means you own your computer and can do chown user /usr/local if needed; while users on a system they don't administer can set HOMEBREW_PREFIX= /home/pi/.linuxbrew. my 2c\n. ouch, I get it now. Very hard choice then :)\n. good point, on OS X this is avoided by keg only formulas right? on gnu/linux distribution everything is more messy. :+1: for .linuxbrew then.\n. I still run into problems with building bottles for dependencies, see this log. libevent should get built as a bottle because it's installed as a dependency of tmux but that doesn't happen. Bug or I am missing something?\n. It's because I'm using linuxbrew-standalone rather than linuxbrew-bottle. It's not clear what's the difference between the two.\n. ",
    "EddieRingle": "That didn't seem to work. Failed at the same spot with the same error:\n``\nrustc: x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc\ncp: x86_64-unknown-linux-gnu/stage1/lib/librustc_driver\nerror: linking withcc` failed: exit code: 1\nnote: \"cc\" \"-Wl,--as-needed\" \"-m64\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-o\" \"x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc\" \"x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc.o\" \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\" \"-Wl,--gc-sections\" \"-pie\" \"-Wl,-O1\" \"-nodefaultlibs\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_driver-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_typeck-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_resolve-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_lint-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_trans-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_privacy-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_borrowck-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lgetopts-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lgraphviz-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_llvm-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lflate-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrbml-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lrustc_back-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lsyntax-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lfmt_macros-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lserialize-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-larena-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lterm-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-llog-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-lstd-4e7c5e5c\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/.rust/lib/x86_64-unknown-linux-gnu\" \"-L\" \"/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/lib/x86_64-unknown-linux-gnu\" \"-Wl,--whole-archive\" \"-Wl,-Bstatic\" \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\" \"-lpthread\" \"-ldl\" \"-lm\" \"-lstdc++\" \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_s\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\nnote: /usr/local/linuxbrew/bin/ld: cannot find Scrt1.o: No such file or directory\ncollect2: error: ld returned 1 exit status\nerror: aborting due to previous error\n/usr/local/linuxbrew/tmp/rust20150318-20028-qmtedq/mk/target.mk:175: recipe for target 'x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc' failed\nmake: *** [x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rustc] Error 101\n==> Formula\nPath: /usr/local/linuxbrew/Library/Formula/rust.rb\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/homebrew/linuxbrew.git\nHEAD: d9a878f890bcbdb5fa64b85f0a0b20b7a76a112b\nLast commit: 7 hours ago\nHOMEBREW_PREFIX: /usr/local/linuxbrew\nHOMEBREW_CELLAR: /usr/local/linuxbrew/Cellar\nCPU: quad-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 2.2.1 => /usr/local/linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nPerl: /usr/local/linuxbrew/bin/perl => /usr/local/linuxbrew/Cellar/perl/5.20.1/bin/perl\nPython: /usr/local/linuxbrew/bin/python => /usr/local/linuxbrew/Cellar/python/2.7.9/bin/python2.7\nRuby: /usr/local/linuxbrew/bin/ruby => /usr/local/linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nJava: N/A\n==> ENV\nCC: /usr/local/linuxbrew/bin/gcc-4.9 => /usr/local/linuxbrew/Cellar/gcc/4.9.2_1/bin/gcc-4.9\nCXX: /usr/local/linuxbrew/bin/g++-4.9 => /usr/local/linuxbrew/Cellar/gcc/4.9.2_1/bin/g++-4.9\nOBJC: /usr/local/linuxbrew/bin/gcc-4.9\nOBJCXX: /usr/local/linuxbrew/bin/g++-4.9\nHOMEBREW_CC: gcc-4.9\nCFLAGS: -Os -w -pipe -B/usr/local/linuxbrew/opt/glibc/lib -march=core2\nCXXFLAGS: -Os -w -pipe -B/usr/local/linuxbrew/opt/glibc/lib -march=core2\nCPPFLAGS: -isystem/usr/local/linuxbrew/include\nLDFLAGS: -L/usr/local/linuxbrew/lib -Wl,--dynamic-linker=/usr/local/linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 -Wl,-rpath,/usr/local/linuxbrew/lib\nMAKEFLAGS: -j4\nCMAKE_PREFIX_PATH: /usr/local/linuxbrew\nPKG_CONFIG_LIBDIR: /usr/local/linuxbrew/lib/pkgconfig\nPATH: /usr/local/linuxbrew/bin:/usr/local/linuxbrew/sbin:/usr/local/linuxbrew/bin:/usr/local/linuxbrew/sbin:/usr/local/linuxbrew/bin:/usr/local/linuxbrew/sbin:/usr/local/bin:/usr/bin:/bin:/opt/bin:/usr/local/linuxbrew/Library/ENV/scm\nError: rust HEAD did not build\nLogs:\n     /home/chronos/user/Library/Logs/Homebrew/rust/02.make\n     /home/chronos/user/Library/Logs/Homebrew/rust/01.configure\nreal    31m7.671s\nuser    72m16.291s\nsys     2m39.924s\n```\nJust curious, are the Chromebook Install steps in the Wiki accurate for preparing a working Linuxbrew setup capable of building this at all?\n. No idea if it'll make a difference, but I'm currently trying to build again after modifying the rust formula with this:\n``` diff\ndiff --git a/Library/Formula/rust.rb b/Library/Formula/rust.rb\nindex 99b3cbf..29bf545 100644\n--- a/Library/Formula/rust.rb\n+++ b/Library/Formula/rust.rb\n@@ -16,7 +16,6 @@ class Rust < Formula\ndef install\n     args = [\"--prefix=#{prefix}\"]\n-    args << \"--disable-rpath\" if build.head?\n     args << \"--enable-clang\" if ENV.compiler == :clang\n     system \"./configure\", *args\n     system \"make\"\n```\n. So, another update. The above patch I posted didn't help. Building Rust Alpha 2 also fails with the same error.\nLuckily, I revisited just patching the prebuilt nightly release with patchelf and that seems to have worked this time around, so I have a working rust install. Hooray!\nThat said, I'll be glad to continue helping diagnosing what's causing this problem.\n. @sjackman That patch didn't work either, unfortunately. If it makes a difference, I don't see any of these flags appearing in the failing build command.\n. ~~Ah, apparently the magic variable is RUSTFLAGS, @sjackman. I'm going to give that one a try.~~\nEDIT: Nevermind, read the documentation incorrectly.\n. ",
    "jasonchaw": "Update Troubleshooting.md to remove references to Apple xcode\n. ",
    "jamesscholeyweb": "@sjackman Shaun, thank you for the quick response. Fix (A) did the trick :) I assume this compiles source using brews curl and openssl instead of system shared version? or am I misunderstanding. Anyway it did the trick. Will I need to do this again after a \"brew upgrade git\" or will brew remember these build options?\nThanks again Shaun, Good man!\n. Neither did I. I think OpenSSL (libssl) is a dependency of git or homebrew.\nEither way it gets installed as a dependency. I assume the same fix should\nwork for you too.\n. Hmm interesting. My git version was 1.9.1 then installed with brew and\nstill 1.9.1 at first I thought it was my path being overridden but which\ngit points to my linuxbrew folder. I've just done a clean install on\nanother machine so will see what happens with that.\nOn Wednesday, January 27, 2016, Maxim Belkin notifications@github.com\nwrote:\n\nLinuxbrew installs git v2.7.0 for me...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Linuxbrew/linuxbrew/issues/757#issuecomment-175739256\n.\n. Thanks Maxim. Not home at moment bit will try this evening.\n\nOn Wednesday, January 27, 2016, Maxim Belkin notifications@github.com\nwrote:\n\nI bet this is due to hash. Try running hash -r after installing git with\nlinuxbrew and see if \"type -a git\" returns linuxbrew's git first (it should\nappear at the top)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Linuxbrew/linuxbrew/issues/757#issuecomment-175747766\n.\n. Nailed it Maxim. Thanks. Resetting hash did the trick. Should have realised.\n. Thanks for the speedy response Shaun. Just looking through the Arch Wiki now. I think the answer lies in here somewhere https://wiki.archlinux.org/index.php/python especially the Dealing with problems in build scripts. But I'm not sure how to implement this in a way specific to brew.\n\nUPDATE: I installed nodejs with brew which installed python 2.7 as a dependency and everything works ok. Now the system is using the brewed python. I assume what i want ideally is for linuxbrew to use the 2.7 brewed python by default and Arch to use 3 for everything else\n. Just a thought Shaun, is a possible solution to install pyenv and set global to 3.5.1 and local on .linuxbrew to 2.7?\n. Thanks Shaun. Yeah it's above my knowledge aswell. My proposed idea\ndefinitely makes things worse.\n. Depends on the dependencies of installed packages I guess. I've actually\njust gone back to using aur and pacman. Tweaking Python environments is not\noutweighed by my aversion to typing sudo on this occasion.\n. ",
    "nhumrich": "I am getting this same warning but for ssh (not git), which is weird because I never installed ssh through brew.\nlinuxbrew/lib/libcrypto.so.1.0.0: no version information available (required by ssh)\n$ brew list\nautoconf  bison  cmake  curl  git  go  gradle  jq  makedepend  openssl  pkg-config  xz\nNo idea how to get rid of it.\n. I already tried the fix with no success.\n. ssh --version returns \"unknown option\", but unsetting LD_LIBRARY_PATH seems to work. What is the purpose of that envvar?\n. Thanks. Already did that, it was just in my bashrc.\n. ",
    "yesimon": "Something like couldn't find header bzlib.h while running ./b2 during boost installation. I think it has something to do with the boost.build build system which I don't really understand, and they even have a page documenting installing without system bzlib.h http://www.boost.org/doc/libs/1_57_0/libs/iostreams/doc/installation.html\nThe standalone installation looks like it could work but seems a bit heavy handed? Is that something you recommend for linuxbrew users without sudo to avoid having too many patches on specific formulae?\n. Yes I still get the error with depends_on \"bzip2\" or with bzip2 installed. I could be totally wrong, but I think the issue is that Boost.Build is a different build system that doesn't really listen to things like CPPFLAGS, which I believe is what brew uses to compile in the standard environment, hence the special env variables BZIP2_....\nPlus I think it's right to give people the option whether to use the system bzip2 or a brewed bzip2? Instead of always using brewed bzip2 if installed on linux.\n. This got bounced back from Homebrew/homebrew#39018\n. This is normal boost formula\nhttps://gist.github.com/yesimon/8c8b89c2bfe85c003d43\n(search for \"bzlib.h\" on 02.b2)\nThis is with the --with-brewed-bzip2 change\nhttps://gist.github.com/yesimon/5a5bceb77e2d44cc51d1\n. Not that I know of. I'll ask the B2 mailing list but otherwise why would they have special vars like BZIP2_INCLUDE and ZLIB_INCLUDE?\n. I've changed it to include the linuxbrew include dir and library dirs by default. Tested and it works, but not sure if it will have any other side effects. PTAL\n. Updated.\n. Updated.\n. It was for any brew install * command. Also not running linux standalone but have gcc-4.9.2 installed through linuxbrew.\nbrew config:\nHOMEBREW_VERSION: 0.9.5\nORIGIN: git@github.com:Homebrew/linuxbrew.git\nHEAD: f765cd358e3608cdd3088b71b16868489b73f94e\nLast commit: 2 days ago\nHOMEBREW_PREFIX: /idi/sabeti-scratch/yesimon/linuxbrew\nHOMEBREW_CELLAR: /idi/sabeti-scratch/yesimon/linuxbrew/Cellar\nCPU: 16-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 2.2.1 => /idi/sabeti-scratch/yesimon/linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nPerl: /idi/sabeti-scratch/yesimon/local/perl5/perls/perl-5.21.10/bin/perl => /idi/sabeti-scratch/yesimon/local/perl5/perls/perl-5.21.10/bin/perl5.21.10\nPython: /idi/sabeti-scratch/yesimon/linuxbrew/bin/python => /idi/sabeti-scratch/yesimon/linuxbrew/Cellar/python/2.7.9/bin/python2.7\nRuby: /idi/sabeti-scratch/yesimon/linuxbrew/bin/ruby => /idi/sabeti-scratch/yesimon/linuxbrew/Cellar/ruby/2.2.1/bin/ruby\nJava: 1.8.0\n. Strange, that works fine, but without --cc=gcc-4.9 it fails, even though I have HOMEBREW_CC=gcc-4.9.\n. Spent some time on this: looks like this isn't just a linuxbrew problem:\nOn Mac:\nsimon@nitrogen ~> env HOMEBREW_CC=gcc-4.9 brew install hello --env=std --build-from-source\nError: undefined method `gcc-4.9_build_version' for OS::Mac:Module\nPlease report this bug:\n    https://git.io/brew-troubleshooting\n/usr/local/Library/Homebrew/compilers.rb:116:in `block in find_compiler'\n/usr/local/Library/Homebrew/compilers.rb:106:in `each'\n/usr/local/Library/Homebrew/compilers.rb:106:in `find_compiler'\n/usr/local/Library/Homebrew/compilers.rb:99:in `compiler'\n/usr/local/Library/Homebrew/compilers.rb:82:in `select_for'\n/usr/local/Library/Homebrew/extend/ENV/shared.rb:119:in `compiler'\n/usr/local/Library/Homebrew/extend/ENV/std.rb:56:in `setup_build_environment'\n/usr/local/Library/Homebrew/build.rb:90:in `install'\n/usr/local/Library/Homebrew/build.rb:179:in `<main>'\nThe cause is Homebrew/homebrew@9c74f42962090c016143744b057e13aa75d9b13e. There have always been different code paths for --cc=gcc-4.9 and env HOMEBREW_CC=gcc-4.9, and only the env var calls into find_compiler which has changed logic. @jacknagel any thoughts on that commit?\n. Also brew config on mac.\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/homebrew.git\nHEAD: cda10dae69712899ce9ec31b4522234e56aacb49\nLast commit: 22 hours ago\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nCPU: quad-core 64-bit sandybridge\nOS X: 10.9.5-x86_64\nXcode: 6.2\nCLT: 6.2.0.0.1.1424975374\nGCC-4.2: build 5666\nClang: 6.0 build 600\nX11: 2.7.7 => /opt/X11\nSystem Ruby: 2.0.0-p481\nPerl: /usr/bin/perl\nPython: /Users/simon/.pyenv/shims/python => /usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/bin/python2.7\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.2.1/bin/ruby\nJava: 1.8.0_31\n. Just randomly browsing this issue, I've always modified the setup.py to examine CFLAGS/LDFLAGS by extending the Mac detection logic in the python formula. See https://github.com/yesimon/linuxbrew/commit/476752c59d995ee26e402617cbeabcd95cd32c52\nAlso putting an ENV['CFLAGS'] = '-g -O2 -I#{HOMEBREW_PREFIX}/include' and possibly ENV LDFLAGS too.\n. I ran into this issue a while back and it looks like the bug has been around for a year or so. http://bugs.python.org/issue21571 The only thing that holding this back look like testing for regressions on many linux distros, which is probably time consuming and error prone :(\n. :+1: \n. I know about the lib64 symlink to lib. The problem is that formulas might install things to $(brew --prefix)/opt/myprogram/lib64/liblibrary.so, which does not get symlinked to $(brew --prefix)/lib/liblibrary.so OR $(brew --prefix)/lib64/liblibrary.so. Therefore my standalone GCC won't link to it because it sets the rpath as $(brew --prefix)/lib\nAlso, creating a lib64 symlink manually is only in the Ubuntu instructions and I'm not using Ubuntu. The symlink from lib64 to lib is actually created in the glibc formula.\n. Please see: Homebrew/homebrew-dupes#573\n. It's not clear to me why travis is failing but I have updated it.\n. Sorry, I do feel bad about this change because it's papering over the problem of the interaction between patches and autotools. I think this is probably still broken on OS X, but this formula probably isn't very popular. Perhaps I should start an issue in the homebrew issue tracker?\n. Some additional comments about linuxbrew standalone. I tried to go full scorched earth standalone, meaning that my PATH only contained linuxbrew bins. Unfortunately, a lot of formula have implicit dependencies, such as bash, perl, diffutils, tar, gzip etc. Honestly I don't think it's realistic to add these deps to formulas because we also need to support the non-standalone case. I don't know how to best manage this but just throwing out my 2 cents. Perhaps nobody is actually running a completely standalone install.\n. As for determining the base system. Would it be reasonable to have some way to test on travis a docker image of linuxbrew standalone, followed by installing the base packages. Then test the installation of every single package separately using this base system? (Each test will be -> start from base system + install the package). Then we can be confident that all implicit and transient dependencies will be satisfied? I'm not sure if this is how the brew test-bot currently works.\n. It might be good to add a little blurb on the homepage/README about subscribing to the Linuxbrew Updates issues to serve as a mailing list. (Didn't want to pollute the issue right now).\n. Thanks for your help!\n. Yeah whoops also have the 2.7 path here.\n. ",
    "aruizca": "Thanks\n. ",
    "aidylewis": "Hi @sjackman \nsh\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)\"\n$ brew doctor\nError: user .linuxbrew doesn't exist\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/aidy/.linuxbrew/Library/Homebrew/utils.rb:203:in `expand_path'\n/home/aidy/.linuxbrew/Library/Homebrew/utils.rb:203:in `block in which'\n/home/aidy/.linuxbrew/Library/Homebrew/utils.rb:202:in `each'\n/home/aidy/.linuxbrew/Library/Homebrew/utils.rb:202:in `which'\n/home/aidy/.linuxbrew/Library/Homebrew/cmd/doctor.rb:1094:in `check_for_bad_python_symlink'\n/home/aidy/.linuxbrew/Library/Homebrew/cmd/doctor.rb:1285:in `block in doctor'\n/home/aidy/.linuxbrew/Library/Homebrew/cmd/doctor.rb:1283:in `each'\n/home/aidy/.linuxbrew/Library/Homebrew/cmd/doctor.rb:1283:in `doctor'\n/home/aidy/.linuxbrew/Library/brew.rb:135:in `<main>'\n. Put ~/.linuxbrew/bin at the beginning of the path and 'brew prune' to fix broken soft links.\n. Many thanks for your work and help. It looks like I had broken soft links.\n. You need a version of git to 'brew install git' \n. Yes, it states in your document that you need a version of git to install git. \n. ",
    "bradp": "Formula has been renamed upstream.\n. ",
    "tdsmith": "Is that documented?\n. Awesome, thanks! \n. The php formula passes --with-ndbm=/usr: https://github.com/Homebrew/homebrew-php/blob/0b56488efe2ef3f03c0319b95aa08adcee58665c/Abstract/abstract-php.rb#L212\nThat probably isn't appropriate for Linuxbrew.\n. To the limited extent that my opinion is useful:\n- I don't know how linux distros package it, but pip is not setuptools. Homebrew/homebrew doesn't ever use pip but it assumes all pythons have setuptools installed\n- It's possible to vendor setuptools if you want to modify PYTHONPATH at build time\n- not building cmake's docs by default is a cromulent option\n. This is one of a few reasons that python can't be built with readline support, I think (it spews this message: *** WARNING: renaming \"readline\" since importing it failed: /home/vagrant/.linuxbrew/lib/libreadline.so.6: undefined symbol: UP)\n. This is probably caused by the changes I made in Homebrew/homebrew to remove env=std support from the python formula. Modifying CFLAGS and LDFLAGS to pick up openssl, sqlite3, and readline is probably necessary.\n. The problem is that you're building against the system openssl headers but linking to the Homebrew library, which is configured differently.\n. pip does not require ssl2.\n\nIs there a way to turn off SSL2 during python configuration?\n\nYes: ensure that python is built with openssl headers that reflect the configuration of the openssl library against which it will be linked. The changes that were made in Homebrew/homebrew were improper for Linuxbrew. The Linuxbrew python formula should be amended to add the brewed openssl include directory to CFLAGS.\n. What distribution are people having trouble with? I'm having trouble reproducing on Ubuntu and OpenSuSE.\n. I just reproduced on CentOS 7, but it occurs to me that it's probably working on Ubuntu because Ubuntu's OpenSSL has SSLv2 disabled by default in Trusty.\n. You could try the fix in #460.\n. I'm willing to spend some time troubleshooting this later this week. It would help if someone knows how Python constructs the path to its site-packages and how to detect where packages will be installed. It looks like pure-Python and compiled extensions behave differently?\n. What Linux distribution are you using, Torsten?\n. Looking at the Python bug tracker, this appears to be a change that certain Linux vendors make to their system Pythons to support mixed 32/64-bit systems. OpenSuSE does this; Ubuntu trusty (afaict, in my hands) does not. Apparently RHEL does. Linuxbrew or pyenv pythons should not.\n. I think adding --install-lib=lib to the string of arguments in setup_install_args in Library/Homebrew/languages/python.rb may fix this.\n. The distutils docs claim that arguments like install-lib are specified relative to prefix but that does not appear to be true; this will have to look like --prefix=~/foo --install-lib=~/foo/lib/python2.7/site-packages. It's really unfortunate that the python version number is embedded in that string, because setup_install_args isn't supposed to know and can't easily find out which python it's supposed to be calling.\n. A ludicrous but effective way to solve this would be to have the ENV path methods detect a python site-packages path and also add its lib64 equivalent.\n. I'd like the fix for this to be using a better Python, built by pyenv or by Homebrew. We could add a doctor check for misbehaving system pythons.\n. No, that's an autotools flag and this is a behavior of some vendors's\nmodified distutils.\n. Can you import _ssl?\n. Ping @sjackman for review; this works, but I don't know much about your preferred style for Linuxbrew changes. Let me know if anything needs tweaking.\n. I just saw your comment about errors, Torsten; I'm guilty of this too, but can you add a new comment instead of editing when the content substantially changes? A new comment triggers an email notification but an edit doesn't.\n\nI can't seem to pip install things that need to compile eg. numpy (needs -dev stuff) and also it seems to be using system BLAS. Is this why I'm mean to use homebrew-python/numpy ?\n\nYes. Our Python configuration exposes a bug in numpy's custom distutils that we need to patch around that yields that error message about headers. The fix has been accepted upstream but not released. :( It's only relevant when building from source, which most OS X users don't do because pypi hosts wheels. As far as which BLAS is used, that's something you have to configure at numpy's build time, which the Homebrew formula takes care of.\n\nDoes compiling Python work out-of-the-box using a Homebrewed gcc?\n\nI haven't tested.\n\nDoes this patch support primarily using the system's /usr/bin/gcc?\n\nYes.\n\nOh, I think I see now. It looks like it's because the python formula is completely overriding the standard Homebrew definition of CPPFLAGS, CFLAGS and LDFLAGS. Is that correct?\n\nIt may actually be doing that now but it was not doing that before; Python's hacky setup.py, which builds the compiled extensions, parses the FLAGS variables to learn search paths for the dependencies of the compiled extension modules.\n\nHomebrew already adds to the command line -I#{HOMEBREW_PREFIX}/include\n\nIf you mean literally that Homebrew is wrapping compiler invocations and appending this to the argument list, that won't help, because setup.py places the discovered include path earlier on the command line.\n. Ah: Homebrew uses -isystem, not -I.\n[vagrant@localhost Python-2.7.10]$ echo $CPPFLAGS\n-isystem/home/vagrant/.linuxbrew/include\nsetup.py ignores -i. Adding -I is sufficient.\nUpdated to just hint the Linuxbrew prefix's include and library paths. Also added a fix for building the _curses module, which I noticed was failing.\nFWIW, I've received some strenuous feedback that prioritizing system search paths ahead of user-specified search paths is undesirable, e.g. here: https://github.com/Homebrew/homebrew/issues/26272#issuecomment-96406197 (though it's hard to accommodate that in Python's distutils in stdenv without fixing up the memorized configuration variables).\n. Using the pyext mode is probably correct on Linux and should let you skip the renaming dance, if you'd rather go that route.\n. > When installing python3 it fails at the end. Setting chmodding pip with +w fixes the issue.\nCan you elaborate wrt which file you modified and how you demonstrated that it helped?\n. The python3 build runs ensurepip by default. For Framework builds, the pip script ends up getting written somewhere in the Framework tree, so it doesn't cause a conflict. Linuxbrew does a non-framework build, which exposes the conflict.\nHomebrew/homebrew#41544 disables running ensurepip and will resolve this issue the next time Shaun merges from Homebrew/homebrew.\n. Thanks for reporting & the detailed reproduction instructions, btw!\n. Please paste the output of brew gist-logs boost.\n. That looks like a successful build.\n. ... albeit a suspiciously fast one\n. gist-logs never runs install.\n. It does run brew doctor, which can be slow.\n. I think this is reasonable on Linux, especially in the absence of bottles. (I would suggest that ucs4 become the default on Linux except that it would break everyone's installed packages, which is probably bad.)\n. Would having Linuxbrew's git formula vendor zlib be a solution?\n. I can't reproduce:\ntim@rocketman:~$ brew unlink python3; brew link python3\nUnlinking /usr/local/Cellar/python3/3.4.3_2... 23 symlinks removed\nLinking /usr/local/Cellar/python3/3.4.3_2... 23 symlinks created\nsite-packages has been linked that way for quite a while. Running brew prune after unlinking should help clean up any stale symlinks.\n. From @yesimon on August 5, 2015 5:23\nI did brew prune and didn't help. To be clear I'm running this on linuxbrew with HOMEBREW_PREFIX != /usr/local.\nI tried it on my mac and works fine, but I poked around and saw\nsimon@nitrogen /u/l/l/p/site-packages> ll /usr/local/opt/python3/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages\nlrwxr-xr-x  1 simon  staff    54B Jul 28 16:02 /usr/local/opt/python3/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages -> ../../../../../../../../../lib/python3.4/site-packages\nI think being a framework build protects it from this issue, although I haven't tried non framework install. That's also a nice relative path haha.\n. From @yesimon on August 5, 2015 5:30\nAlso just realized that there is no --framework option for python anymore and most people install from bottles nowadays...\n. > That's also a nice relative path haha.\nHa, yes.\nHomebrew python3 is always a framework build on OS X; I'll move this issue to the linuxbrew repository.\n. I would be curious to hear some stories about the different kinds of users Linuxbrew is intended to support and how they relate to the packages the base system is expected to provide.\nI think that optionally providing alternative BLAS and LAPACK implementations is not interesting on OS X; openblas is not generally faster than Accelerate, and MKL is expensive and narrowly deployed on OS X clients.\nI think a proper solution here could involve removing all optional openblas dependencies, forcing a build against Accelerate on OS X.\nI'm warm to the idea of a special Linuxbrew-only :blas dependency (used like depends_on :blas if OS.linux?) with reasonable defaults (ideally: system BLAS if it's available, with fallback to a brewed openblas) and which may be overridden by an environment variable. But I probably won't implement it. :)\n. I wouldn't generally like to see a proliferation of --with-blas options, especially because of the dependency propagation issues. I don't think I understand how formulas would use additional BLAS dependency symbols.\nIt's probably not tuned as nicely as MKL but fwiw openblas seems to be much better than Rblas.\nHere is a sample C program we can compile to test for the presence of a system BLAS:\nc\ndouble cblas_ddot(const int, const double*, const int, const double*, const int);\nint main() { double x[] = {1.0, 2.0, 3.0}, y[] = {4.0, 5.0, 6.0}; cblas_ddot(3, x, 1, y, 1); return 0; }\n. > But I probably won't implement it. :)\nI lied; check out https://github.com/Homebrew/linuxbrew/pull/511.\nI don't know what would need to happen to use pgcc or icc with Linuxbrew.\n. Also, do we need separate CFLAGS and FFLAGS?\n. This will be Linuxbrew-only. I was going to let Shaun merge this but I seem to remember he's on vacation.\n. Oh, that's very interesting. If MKL is freely available that makes me think maybe there is real value in making this flexible on OS X.\n. MKL does not actually appear to be available in the community license package yet? https://software.intel.com/en-us/forums/topic/590743 -- https://www.dropbox.com/s/mgtd2cncyqmbpbq/Screenshot%202015-08-31%2014.29.39.png?dl=0 vs https://www.dropbox.com/s/28rkxwlsuo4niin/Screenshot%202015-08-31%2014.30.00.png?dl=0\n. Intel confirmed in that thread that MKL is not available for free as a standalone product on OS X.\n. Do you know on which platforms you see incomplete BLASses?\nWhy would a tap want to affect BLAS selection? I can imagine a way you'd do this in a formula but it'd be super-weird. Handling this per-tap is more complexity than I think is warranted but maybe I don't understand the use case.\n. To answer an earlier point: I agree blas and lapack should be considered together and this PR does that in practice. Is there a name or symbol that's clearer than blas that conveys this? I think linalg is vague and blas_and_or_lapack is clunky. \n. BLAS_LAPACK / :blas_lapack seems reasonable and is clearer.\nThe mechanism for dependencies which may be satisfied from more than one package or from the environment is a Requirement. This PR provides an example of a Requirement implementation. They live in core. The homebrew-php tap has engineered a way to carry Requirements in a tap, but probably does not allow overriding already-defined Requirements in core, which is probably fine.\nWe mostly do not deal with multiple versions of libraries; the most recent release is supported and others are not unless a formula exists for it in homebrew-versions.\n. I'll submit a PR to Homebrew this weekend; I think the case for getting rid of all the optional openblas dependencies in homebrew-science is pretty compelling and maybe we'll see MKL on OS X someday.\n. Great; let us know if we can help with anything else.\n. Can you post the output of brew gist-logs python3 please?\n. Okay, thanks. What distro are you running?\n. Oops; this should be fixed by https://github.com/Homebrew/linuxbrew/pull/460.\n. Try the solution here: https://github.com/Homebrew/linuxbrew/issues/452#issuecomment-115435227\n. This should be redundant with #460.\n. You should be able to work around this by running brew install cmake --without-docs first.\n. It's unfortunately not a dependency resolution issue; Red Hat flavors ship a patched Python that interferes with Linuxbrew's Python handling. --without-docs disables the parts of the cmake build that require python.\n. -- and the standalone image, which will make bottling easier.\n. Docs here: http://docs.travis-ci.com/user/docker/\n. From @tzudot on September 2, 2015 15:17\nBetter report this issue at Homebrew/linuxbrew.\n. Does running that import make a brewed python crash outside of the YouCompleteMe build? Can you provide any more details or a build log (brew gist-logs python)?\n. At least I'm predictable! Homebrew wouldn't contemplate this because cmake doesn't exist on the OS X base system and the number of potential failures and the challenge of debugging them increase sharply if Homebrew doesn't control the dependency tree.\nI think Linuxbrew should reject this because the cmake build isn't very painful and I want to avoid hearing about problems with whatever ancient cmake they ship with CentOS 6 but I'm trying very hard not to become a Linuxbrew maintainer so my opinion probably doesn't matter. ;)\n. I do see two bona fide Linuxbrew bugs here:\n- pkg-config isn't installed automatically\n- Homebrew assumes that there is a system Python with a functioning setuptools so Linuxbrew assumes that as well; it's either a Linuxbrew documentation error that this isn't specified or a Linuxbrew error that the formula doesn't spec a :python dependency.\nI don't think using a system cmake helps.\n. If you can engineer something that will apply on top of the superenv PR and work with the ENV shims, I think that's the best way forward.\n. This is a Linuxbrew documentation issue.\n. Yep!\n. Thinking about this a little, I think the environment variable is an implementation detail that the formula shouldn't have to rely on. Encapsulating that logic in a new Homebrew::BlasLapack class somewhere is probably better engineering.\nI like the simpler configuration of BLASLAPACK_LDFLAGS and BLASLAPACK_CFLAGS; we could add helper methods that extract the library names and paths for the picky formulas that need them, maybe?\n. > but this does not mean that 'libpthread' and 'libm' exist in '/path/to/mkl'. \n\nDoes it matter?\n\nI'd have to experiment; I don't have good advice about an implementation. I'm at a conference for the rest of the week so I may not have time to play with this. @xu-cheng is a much better programmer than I am and might have some thoughts if he thinks this is interesting.\n. Thanks for pushing this forward; I appreciate it.\n. I'm +0 on moving; I don't know that I think any of the pro or con arguments are very urgent.\nI think Linuxbrew and homebrew-science together meet a unique need for home-directory scientific software management on Linux.\nI don't know that arguments about branding matter deeply to users; I do wish that Linuxbrew was more reliable but I doubt that Linuxbrew significantly contributes to Homebrew's reputation (for better or for worse) and I don't think that people adopt Linuxbrew because it is \"a Homebrew project.\" They adopt Linuxbrew because they wanna run a newer version of blast on their cluster. :) And if they're using Apple laptops and are already familiar with Homebrew's syntax and conventions, so much the better. None of that changes based on the repository URL. Linuxbrew will still be brew for Linux.\nI don't think that having Linuxbrew in the Homebrew organization contributes significantly to the Homebrew maintainership burden; I don't think the occasional misfiled ticket is especially annoying to handle. (I'm aware that I haven't exactly been putting my money where my mouth is wrt maintenance duties lately, so weigh my statements accordingly.)\nThe only reason that would be important to me to migrate Linuxbrew out of the Homebrew organization is the potential for more aggressive CI on Travis. I have found it frustrating to support Linuxbrew because the supported environments aren't well-described or well-tested and I end up breaking things on versions of CentOS I have never once cared about. Since the number of simultaneously active Travis workers is capped per organization, if Linuxbrew starts using more Travis workers to cover more platforms through clever (ab)use of docker, that would degrade the Homebrew contribution and maintainership experience unless we complete this migration. (It's possible I could be wrong because e.g. maybe OS X and Linux workers are tallied independently, or because we might be able to get Travis support to smile upon the Homebrew organization.)\n. Your system headers are broken.\n. You can probably remove these three lines (or make them conditional on OS.mac?) and then get rid of the mv below.\n. No, but Python fails to detect whether readline is linked against curses or not, which can cause the _curses module to misbuild.\n. It may; I hadn't appreciated that these formulas aren't keg-only on Linux. I'll try that later.\n. Fixed the style.\n. this is a lot of work to do in each formula; it would be nice if there was a helper method for this or if the requirement did this automatically.\n. ",
    "yeluolei": "ps. this is the error log for brew install -vd gnu-tar : \nAnd I have no rights to write any folder except my home directory.\n/home/users/a/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /home/users/a/.linuxbrew/Library/Formula/gnu-tar.rb\n/home/users/a/.linuxbrew/Library/brew.rb (Formulary::FormulaLoader): loading /home/users/a/.linuxbrew/Library/Formula/glibc.rb\n/home/users/a/.linuxbrew/Library/Homebrew/build.rb (Formulary::FromPathLoader): loading /home/users/a/.linuxbrew/Library/Formula/gnu-tar.rb\n/home/users/a/.linuxbrew/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /home/users/a/.linuxbrew/Library/Formula/glibc.rb\n==> Downloading http://ftpmirror.gnu.org/tar/tar-1.28.tar.gz\nAlready downloaded: /home/users/a/.cache/Homebrew/gnu-tar-1.28.tar.gz\n==> Verifying gnu-tar-1.28.tar.gz checksum\ntar xf /home/users/a/.cache/Homebrew/gnu-tar-1.28.tar.gz\ntar: This does not look like a tar archive\ntar: Skipping to next header\ntar: Archive contains obsolescent base-64 headers\ntar: Read 6323 bytes from /home/users/yerurui/.cache/Homebrew/gnu-tar-1.28.tar.gz\ntar: Error exit delayed from previous errors\nError: Failure while executing: tar xf /home/users/a/.cache/Homebrew/gnu-tar-1.28.tar.gz\n/home/users/a/.linuxbrew/Library/Homebrew/utils.rb:151:in `safe_system'\n/home/users/a/.linuxbrew/Library/Homebrew/download_strategy.rb:187:in `block in stage'\n/home/users/a/.linuxbrew/Library/Homebrew/utils.rb:144:in `with_system_path'\n/home/users/a/.linuxbrew/Library/Homebrew/download_strategy.rb:187:in `stage'\n/home/users/a/.linuxbrew/Library/Homebrew/resource.rb:89:in `block in unpack'\n/home/users/a/.linuxbrew/Library/Homebrew/extend/fileutils.rb:17:in `mktemp'\n/home/users/a/.linuxbrew/Library/Homebrew/resource.rb:88:in `unpack'\n/home/users/a/.linuxbrew/Library/Homebrew/resource.rb:81:in `stage'\n/home/users/a/.linuxbrew/Library/Homebrew/formula.rb:764:in `stage'\n/home/users/a/.linuxbrew/Library/Homebrew/formula.rb:406:in `brew'\n/home/users/a/.linuxbrew/Library/Homebrew/build.rb:114:in `install'\n/home/users/a/.linuxbrew/Library/Homebrew/build.rb:186:in `<main>'\n. my brew config result\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew.git\nHEAD: d9e68a81edcc3717826b4ca6a2a4bffc71b01632\nLast commit: 3 days ago\nHOMEBREW_PREFIX: /home/users/a/.linuxbrew\nHOMEBREW_CELLAR: /home/users/a/.linuxbrew/Cellar\nCPU: 12-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 1.9.3-p385 => /home/users/a/.jumbo/bin/ruby\nPerl: /home/users/a/.jumbo/bin/perl\nPython: /home/users/a/.jumbo/bin/python => /home/users/a/.jumbo/bin/python2.7\nRuby: /home/users/a/.jumbo/bin/ruby\nJava: 1.6.0_45\n. finally fix this by myself, I didn't tar in my /usr/bin fold and I disabled the ENV['path'] replace in the utils.rb file.\n. fix this problem by myself with the information in standalone install document. Thanks!\nln -s $(which gcc) $prefix/bin/gcc-$(gcc -dumpversion |cut -d. -f1,2)\nln -s $(which g++) $prefix/bin/g++-$(g++ -dumpversion |cut -d. -f1,2)\nln -s $(which gfortran) $prefix/bin/gfortran-$(gfortran -dumpversion |cut -d. -f1,2)\n. by the way, I can't install glic with standalone installation with the gist below.\nhttps://gist.github.com/23bf728fe2b3a19a935f\n. thanks for your answer, I have an version of mpfr in my system with gcc-4.8 and I can't modify it. how can I override the include lib when I install this one? or is there any way to ignore this depend relation when I install the new gcc ?\nanother question, what about the glibc install issue?\n. I didn't set the LD_RUN_PATH and I am follow the Standalone Installation instructions and have tried three times.\n. centos 4.3\uff0c sorry for such an old distribution, but I have to work with it. :(\n. ",
    "randomessence": "No unfortunatley, I did try that. If I do this below (and start a new SSH session)\nI added the line puts ENV['PATH'] to see what the result was. The end result (curl not executable) is the same, with or without that line.\ncurl = Pathname.new \"curl\"\n  puts ENV['PATH']\n  raise \"#{curl} is not executable\" unless curl.exist? and curl.executable?\nI get this:\n[server ~] brew install wget\n==> Installing wget dependency: libuuid\n==> Downloading https://downloads.sourceforge.net/project/libuuid/libuuid-1.0.3.tar.gz\n/media/disk/home/username/bin:/media/disk/home/username/.linuxbrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/media/disk/home/username/.linuxbrew/Library/ENV/scm\nError: curl is not executable\nSo it is in my PATH for sure\n[server ~] curl --version\ncurl 7.41.0 (x86_64-unknown-linux-gnu) libcurl/7.41.0 OpenSSL/1.0.1e zlib/1.2.7\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets\nCould it be something to do with this line?:\nhttps://github.com/Homebrew/linuxbrew/blob/master/Library/Homebrew/utils.rb#L143\n. OK, so I tried this $HOMEBREW_PREFIX/bin:$HOME/bin:/usr/local/bin:/usr/bin:/bin and it did not make any difference. So I was wondering why it is basically ignoring all things PATH.\nThen I noticed something when I was messing with stuff and I created a few errors, when I change L166 to:\nFrom curl = Pathname.new '/usr/bin/curl' to curl = Pathname.new \"curl\"\nThe actual result is that the curl is being looked for in the root of the user directory.\nSo effectively utils.rb is doing this:  ~/curl and it cannot find the executable hence the error is: Error: curl is not executable\nSo I created a Symlink to curl in my non root users' home directory:\n[server ~] whereis curl\ncurl: /usr/local/bin/curl /usr/include/curl\n[sever ~] ln -s /usr/local/bin/curl ~/curl\nThen I edit the L166 to this: curl = Pathname.new \"curl\"\nNow it works. Seems currently PATH not involved and the path to curl is a direct one.\nEDIT:\nOk, this worked:\nL166-167\nChange these lines:\ncurl = Pathname.new '/usr/bin/curl'\nraise \"#{curl} is not executable\" unless curl.exist? and curl.executable?\nTo:\ncurl = \"curl\"\nNow it works via the PATH\n. @sjackman your suggestion worked. Will you apply this fix to the main repo?\n. ",
    "vikjam": "I have curl installed in an non-default location and I'm still getting this error. Could I get help troubleshooting this error?. Thanks for setting me in the right direction. I was able to get Homebrew curl working! . ",
    "razcore-art": ":+1: for this! I'm trying to build it on a work machine that has these stupid modules which makes a mess out of everything... and when I saw standalone linuxbrew I thought this is my way out... well not so much since it depends on X11 for which... there is no formula yet...\nedit:\n- @sjackman, your x11_dependency.rb link is broken, here is the one you want.\n- @gitfoxi, can you please give us some more details on how you built the X server yourself? Thanks!\n. Right... except when you don't have administrator permissions things get a little bit crazy... (which is my case)\n. The machine has X11 on it already, the problem was that I wanted a newer version of glibc (they don't do major upgrades too often because it breaks things). And with a new version of glibc... it was a mess specifying where things are so that system libraries don't collide with linuxbrew libraries. Anyway it was way too much work figuring things out so I sopped trying...\n. How is it possible that pyenv is able to build the executables without a problem and the modules, but brew can't? I have the same issue and even though I tried the workaround mentioned above, that is, to copy the _sso.so and _tkinter.so (I also have problem with this with brew) from pyenv but brew keeps telling me that python wasn't installed properly and do a brew postinstall, but when I do that I get some weird segmentation fault things (don't have the logs any more, I stopped trying to fix this and am using the pyenv executables now). This happened to me for Python 2.7, didn't bother trying with for Python 3 with brew...\nedit: This is really strange. I used brew on two different machines, my work machine and my laptop. On the laptop there's no problem with _ssl.so even though it links to the same openssl library, the one from brew! Whereas the one from the work machine just gives the SSLv2 missing error. Look (on my laptop):\nrazvan@laptop:~$ nm .local/lib/libssl.so | grep SSLv2\n000000000002f620 T SSLv23_client_method\n0000000000269ac0 d SSLv23_client_method_data.16666\n000000000002e9c0 T SSLv23_method\n00000000002698c0 d SSLv23_method_data.16601\n000000000002ea20 T SSLv23_server_method\n00000000002699c0 d SSLv23_server_method_data.16664\nrazvan@laptop:~$ ldd .local/lib/python2.7/lib-dynload/_ssl.so \n    linux-vdso.so.1 =>  (0x00007fff5b97c000)\n    libssl.so.1.0.0 => /home/razvan/.local/lib/libssl.so.1.0.0 (0x00007f57b28a1000)\n    libcrypto.so.1.0.0 => /home/razvan/.local/lib/libcrypto.so.1.0.0 (0x00007f57b2447000)\n    libpython2.7.so.1.0 => /home/razvan/.local/lib/libpython2.7.so.1.0 (0x00007f57b203b000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f57b1df9000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f57b1a2f000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f57b182a000)\n    libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f57b1627000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f57b131f000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f57b2d2e000)\nSo basically even though we're talking about linking to the same version of the library and in both cases with missing SSLv2_method... one of them is failing... Not to mention that on my laptop, the build process doesn't complain about _tkinter (it just skips it, it says that it doesn't find the components). On the other machine it tries to build it and fails... Anyway, if you guys would like to know more on how the two of these builds compare let me know cause I don't really know where to look... but if it helps and I'm guided I can make some diffs and comparisons.\n. So for anyone who's interested, I made a little progress, managed to build and install numpy using pip with the following command:\nC_INCLUDE_PATH=build/src.linux-x86_64-3.4/numpy/core/src/private:$HOME/.local/include/python3.4m/:$HOME/.local/include/ LAPACK=$HOME/.local/ BLAS=$HOME/.local/ pip3 install --verbose --user --install-option='--prefix=' nump\nI've been looking a bit more at the gcc's envirnoment variables and I think I'll experiment next with CPATH and LIBRARY_PATH (for building atom that is, cause this particular one wants to build against the system glibc which is why it doesn't work...)\nedit: after trying to install the whole X system I decided it's too much trouble indeed so I dropped everything.\n. ",
    "aiyuchen": "you can try to install gcc 4.9.2\nbrew install gcc\n. @sjackman\n. @sjackman \n. @mistydemeo @adamv @jacknagel @xu-cheng @mikemcquaid @asparagui @tdsmith @mxcl \n. brew info glib\nglib: stable 2.44.0\nhttps://developer.gnome.org/glib/\n/home/levi/.linuxbrew/Cellar/glib/2.44.0 (424 files, 21M) *\n  Built from source\nFrom: https://github.com//homebrew/blob/master/Library/Formula/glib.rb\n==> Dependencies\nBuild: xz \u2714, pkg-config \u2714\nRequired: gettext \u2714, libffi \u2714\n==> Options\n--universal\n    Build a universal binary\n--with-static\n    Build glib with a static archive.\n--with-test\n    Build a debug build and run tests. NOTE: Not all tests succeed yet\nyou can \nbrew install glib\n. ",
    "deevus": "```\n$ brew install gcc\n==> Installing dependencies for gcc: gmp, mpfr, libmpc, pkg-config, isl, cloog\n==> Installing gcc dependency: gmp\n==> Downloading http://ftpmirror.gnu.org/gmp/gmp-6.0.0a.tar.bz2\nAlready downloaded: /var/services/homes/deevus/.cache/Homebrew/gmp-6.0.0a.tar.bz2\n==> ./configure --prefix=/volume1000/homes/deevus/.linuxbrew/Cellar/gmp/6.0.0a --enable-cxx\nchecking ABI=x32\nchecking compiler /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/volume1000/homes/deevus/.linuxbrew/include... no\nchecking ABI=32\nchecking compiler /usr/bin/gcc -Os -w -pipe -march=core2 -isystem/volume1000/homes/deevus/.linuxbrew/include... no\nconfigure: error: could not find a working compiler, see config.log for details\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nGHC 7.10.1 has GMP linking issues (https://github.com/Homebrew/homebrew/issues/38315)\nCabal-install generates error when packages link to gmp (https://github.com/Homebrew/homebrew/issues/35203)\n```\nhttps://gist.github.com/f8e2b3cce76fa7f6d38c\n. @sjackman I'll give that a try next time I have a chance.\n. https://gist.github.com/anonymous/99a089481633f9be4abb\n$ brew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nAlready downloaded: /var/services/homes/deevus/.cache/Homebrew/hello-2.10.tar.gz\n==> ./configure --disable-silent-rules --prefix=/volume1000/homes/deevus/.linuxbrew/Cellar/hello/2.1\n==> make install\nmake[1]: Entering directory `/tmp/hello20150425-3060-1e4pwks/hello-2.10'\nMaking install in po\nmake[1]: *** [install-recursive] Error 1\nmake[1]: Leaving directory `/tmp/hello20150425-3060-1e4pwks/hello-2.10'\nmake: *** [install] Error 2\nIs this a permissions issue?\n. ",
    "Rochvellon": "Error found.\nexport PATH=/package/host/localhost/python-2.7/bin:$PATH will help\n. https://gist.github.com/484418d9f30f5e218295\n. brew install python and using this version solved the problem. \n. ",
    "RWOverdijk": "What's the fix for this? @sjackman his suggestion doesn't work for me.\n~ [ brew reinstall --with-homebrew-curl --with-homebrew-openssl --without-snmp --with-apache php56                                                 ] 11:40 AM\n==> Reinstalling homebrew/php/php56 with --with-homebrew-curl\n==> Downloading https://php.net/get/php-5.6.10.tar.bz2/from/this/mirror\nAlready downloaded: /Library/Caches/Homebrew/php56-5.6.10\nWarning: Backing up all known pear.conf and .pearrc files\nWarning: If you have a pre-existing pear install outside\n         of homebrew-php, or you are using a non-standard\n         pear.conf location, installation may fail.\n==> ./configure --prefix=/usr/local/Cellar/php56/5.6.10 --localstatedir=/usr/local/var --sysconfdir=/usr/local/etc/php/5.6 --with-config-file-path=/usr/local/\nchecking for curl_easy_strerror in -lcurl... yes\nchecking for curl_multi_strerror in -lcurl... yes\nchecking for QDBM support... no\nchecking for GDBM support... no\nconfigure: error: DBA: Could not find necessary header file(s).\n. ",
    "stanley-cheung": "I run into the same issue and here's the output for the above commands:\nhttps://gist.github.com/57be3c49db31cf88abac\nEdit: to provide more info\nI believe I have all the prereqs for php56\n$ brew list\nberkeley-db4  curl  freetype  gettext  icu4c  jpeg  libpng  libxml2  makedepend  ncurses  openssl  pkg-config  readline  unixodbc  xz  zlib\n$ brew install --with-homebrew-curl --with-homebrew-openssl --without-snmp --with-apache php56\n==> Installing php56 from stanley-cheung/homebrew-php\n==> Downloading https://php.net/get/php-5.6.11.tar.bz2/from/this/mirror\nAlready downloaded: /home/stanleycheung/.cache/Homebrew/php56-5.6.11\n==> ./configure --prefix=/home/stanleycheung/.linuxbrew/Cellar/php56/5.6.11_2 --localstatedir=/home/stanleycheung/.linuxbrew/var --sysconfdir=/home/stanle\nchecking for curl_easy_strerror in -lcurl... yes\nchecking for curl_multi_strerror in -lcurl... yes\nchecking for QDBM support... no\nchecking for GDBM support... no\nconfigure: error: DBA: Could not find necessary header file(s).\n. Same error\n```\n$ brew install gdbm\n==> Downloading http://ftpmirror.gnu.org/gdbm/gdbm-1.11.tar.gz\n==> Downloading from http://gnu.opencube.ca/gdbm/gdbm-1.11.tar.gz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/home/stanleycheung/.linuxbrew/Cellar/gdbm/1.11\n==> make install\n==> Caveats\n==> Summary\n/home/stanleycheung/.linuxbrew/Cellar/gdbm/1.11: 27 files, 828K, built in 6 seconds\nstanleycheung@stanleycheung-test:~$ brew install php56\n==> Installing php56 from homebrew/homebrew-php\n==> Downloading https://php.net/get/php-5.6.11.tar.bz2/from/this/mirror\nAlready downloaded: /home/stanleycheung/.cache/Homebrew/php56-5.6.11\n==> ./configure --prefix=/home/stanleycheung/.linuxbrew/Cellar/php56/5.6.11_2 --localstatedir=/home/stanleycheung/.linuxbrew/var --sysconfdir=/home/stanle\nchecking for curl_easy_strerror in -lcurl... yes\nchecking for curl_multi_strerror in -lcurl... yes\nchecking for QDBM support... no\nchecking for GDBM support... no\nconfigure: error: DBA: Could not find necessary header file(s).\n```\nI also already have libgdbm3, libgdbm-dev, libqdbm-dev installed via apt-get\n. Still the same even if I brew install qdbm\n. Thanks for the patch!\nI tried this patch, the install of php56 did get past the original error above, then it failed with this error\nconfigure: error: Cannot find ldap libraries in /usr/lib.\nThen I try brew install --without-ldap php56, which results in\nconfigure: error: Please reinstall libedit - I cannot find readline.h\nI do have both libedit and readline installed\n$ dpkg -l | grep libedit\nii  libedit2:amd64                 3.1-20140620-2               amd64        BSD editline and history libraries\n$ brew list | grep readline\nreadline\nI tried to re-install those, tried a bunch of combination of CFLAGS but cannot get past this error.\nSo I guess homebrew-php just isn't well supported under linuxbrew?\n. For example, the autoconf formula is looking for the glibtoolize binary.\nhttps://github.com/Homebrew/linuxbrew/blob/a5392d6e9562c98b30a6c02ca075572a276abc3e/Library/Formula/autoconf.rb#L22-L24\n. @tbetbetbe FYI\n. The latter suggestion did not work, but the former did work. Asking homebrew-php whether they will consider changing homebrew/dupes/zlib to zlib in Abstract/abstract-php.rb in that line 38\n. ",
    "hannwong": "@stanley-cheung Same here. I reinstalled libedit from brew, and also installed libreadline-dev from apt-get. Still the same error.\nThe part of the error you didn't state is that PHP's configure found libedit (a replacement for readline), and so tries to find the readline.h for libedit.\nFor the record, I have tried all scenarios with readline.h. Whether it is installed through apt-get or through Linuxbrew, and whether it be libedit or plain readline, the same error still comes up.\nThis is taking too long for us to fix. At this point, it is easier to just drop Linuxbrew and go with apt-get. It is also easier to do a compile from source, in which case we could be debugging plain configure scripts rather than trying to trace through Linuxbrew.\nNote to stanley and our own teams: We're deciding to let our Mac users continue to use Homebrew (which works without a hitch), and let our Ubuntu users use apt-get. For those of us who need the latest versions of software, we will help them do a compile from source. (In fact, creating Debian binary packages is easier for us to do than working through Linuxbrew!)\nIn short... apt-get packages are maintained, and so are Homebrew packages. Linuxbrew packages are not even tested to begin with, let alone maintained.\n@sjackman We're willing to help you fix up Linuxbrew if you are willing to help us get started. Tell us where you left off so we know where to get started from. For example, you could tell us which packages are tested, so we know to work on those that are not yet tested (such as homebrew/php/php56).\n. ",
    "steowens": "This is old but I have the same problem.  here is the output of brew install:\n```\nWASE-AM02017840:php-5.6.11 sowens$ brew install berkeley-db4\n==> Downloading https://homebrew.bintray.com/bottles/berkeley-db4-4.8.30.yosemit\n################################################################## 100.0%\n==> Pouring berkeley-db4-4.8.30.yosemite.bottle.tar.gz\n==> Caveats\nThis formula is keg-only, which means it was not symlinked into /usr/local.\nBDB 4.8.30 is provided for software that doesn't compile against newer versions.\nGenerally there are no consequences of this for you. If you build your\nown software and it requires this formula, you'll need to add to your\nbuild variables:\nLDFLAGS:  -L/usr/local/opt/berkeley-db4/lib\nCPPFLAGS: -I/usr/local/opt/berkeley-db4/include\n\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/berkeley-db4/4.8.30: 4591 files, 88M\n```\n. How can we get Configure to look in these locations for the needed header files?\n\nchecking whether to enable ctype functions... yes\nchecking for cURL support... no\nchecking for QDBM support... no\nconfigure: error: DBA: Could not find necessary header file(s).\n\n. ",
    "s172262": "You might have to deploy ndbm.h which is included gdbm-devel.\nThere is ndbm.h in #{MacOS.sdk_path}/usr on OSX. . ",
    "jawshooah": "Tried that, got this:\n```\n$ brew install git --with-brewed-openssl --with-brewed-curl\n==> Installing git dependency: curl\n==> Downloading http://curl.haxx.se/download/curl-7.42.0.tar.bz2\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/var/lib/jenkins/.linuxbrew/Cellar/curl/7.42.0 --with-ssl=/var/lib/jenkins/.linuxbrew/opt/openssl --with-ca-bundle=/var/lib/jenkins/.linuxbrew/etc/openssl/c\n==> make install\n/var/lib/jenkins/.linuxbrew/Cellar/curl/7.42.0: 304 files, 3.2M, built in 75 seconds\n==> Installing git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.3.5.tar.xz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/git-2.3.5.tar.xz\n==> make prefix=/var/lib/jenkins/.linuxbrew/Cellar/git/2.3.5 sysconfdir=/var/lib/jenkins/.linuxbrew/etc CC=/usr/bin/gcc CFLAGS=-Os -w -pipe -march=core2 LDFLAGS=-L/var/lib/jenkins/.linuxbrew/lib -Wl,-rpat\nhttp-push.c:1229: error: expected \u2018;\u2019 before \u2018parser\u2019\nhttp-push.c:1236: error: \u2018parser\u2019 undeclared (first use in this function)\n/usr/bin/gcc -o remote-curl.o -c -MF ./.depend/remote-curl.o.d -MQ remote-curl.o -MMD -MP -isystem/var/lib/jenkins/.linuxbrew/include -Os -w -pipe -march=core2 -I. -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DSHA1_HEADER=''  -DNO_STRLCPY -DNO_MKSTEMPS -DSHELL_PATH='\"/bin/sh\"'  remote-curl.c\nmake:  [http-push.o] Error 1\nmake:  Waiting for unfinished jobs....\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nSandbox breaks Git compile (https://github.com/Homebrew/homebrew/issues/38978)\ngit-annex 5.20150409 (https://github.com/Homebrew/homebrew/pull/38329)\nv8: can't clone gyp.git (with brewed curl --with-openssl or --with-libressl) (https://github.com/Homebrew/homebrew/issues/39094)\nHomebrew installation failed: fatal: Could not switch to '.git': Permission denied Failed during: git init -q (https://github.com/Homebrew/homebrew/issues/36504)\ngit-big-picture: new formula v0.9.0 (https://github.com/Homebrew/homebrew/pull/36812)\n```\n. Linux distro is in the issue title. I'll give your suggestion a go when I\nget a chance.\n. @sjackman Installing expat seems to have fixed that particular issue, but caused yet another one:\n```\n$ brew install expat\n==> Downloading https://downloads.sourceforge.net/project/expat/expat/2.1.0/expat-2.1.0.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/var/lib/jenkins/.linuxbrew/Cellar/expat/2.1.0_1 --mandir=/var/lib/jenkins/.linuxbrew/Cellar/expat/2.1.0_1/share/man\n==> make install\n/var/lib/jenkins/.linuxbrew/Cellar/expat/2.1.0_1: 11 files, 500K, built in 21 seconds\n$ brew install git --with-brewed-openssl --with-brewed-curl\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.3.5.tar.xz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/git-2.3.5.tar.xz\n==> make prefix=/var/lib/jenkins/.linuxbrew/Cellar/git/2.3.5 sysconfdir=/var/lib/jenkins/.linuxbrew/etc CC=/usr/bin/gcc CFLAGS=-Os -w -pipe -march=core2 LDFLAGS=-L/var/lib/jenkins/.linuxbrew/lib -Wl,-rpat\ntclsh po/po2msg.sh --statistics --tcl -l bg -d po/ po/bg.po\nmake[1]: tclsh: Command not found\nmake[1]:  [po/bg.msg] Error 127\nmake[1]: Leaving directory `/tmp/git20150428-1367-n90jnv/git-2.3.5/git-gui'\nmake:  [all] Error 2\n```\nFull logs here.\nCould you reopen this issue, since it has not yet been resolved?\n. Seems CentOS 6.6 doesn't come with a /usr/bin/patch:\n$ brew install homebrew/dupes/tcl-tk\n==> Installing tcl-tk from homebrew/homebrew-dupes\n==> Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.4/tcl8.6.4-src.tar.gz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/tcl-tk-8.6.4.tar.gz\n==> Patching\nError: No such file or directory - patch\nSo I tried again after installing gpatch, and this is the result:\n```\n$ brew install homebrew/dupes/gpatch\n==> Installing gpatch from homebrew/homebrew-dupes\n==> Downloading http://ftpmirror.gnu.org/patch/patch-2.7.5.tar.xz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/gpatch-2.7.5.tar.xz\n==> ./configure --prefix=/var/lib/jenkins/.linuxbrew/Cellar/gpatch/2.7.5\n==> make install\n/var/lib/jenkins/.linuxbrew/Cellar/gpatch/2.7.5: 9 files, 332K, built in 42 seconds\n$ brew install homebrew/dupes/tcl-tk\n==> Installing tcl-tk from homebrew/homebrew-dupes\n==> Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.4/tcl8.6.4-src.tar.gz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/tcl-tk-8.6.4.tar.gz\n==> Patching\ncan't find file to patch at input line 5\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n\n|diff --git a/pkgs/sqlite3.8.7.1/generic/sqlite3.c b/pkgs/sqlite3.8.7.1/generic/sqlite3.c\n|index 5c8e1c1..bb3fdfc 100644\n|--- a/pkgs/sqlite3.8.7.1/generic/sqlite3.c\n|+++ b/pkgs/sqlite3.8.7.1/generic/sqlite3.c\n\nNo file to patch.  Skipping patch.\n3 out of 3 hunks ignored\nError: Failure while executing: patch -g 0 -f -p1\n```\n. Removed the patch line, but now I'm getting a build error:\n```\n$ brew install tcl-tk\n==> Installing tcl-tk from homebrew/homebrew-dupes\n==> Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.4/tcl8.6.4-src.tar.gz\nAlready downloaded: /var/lib/jenkins/.cache/Homebrew/tcl-tk-8.6.4.tar.gz\n==> ./configure --prefix=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4 --mandir=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4/share/man --enable-64bit\n==> make\n==> make install\n==> make install-private-headers\n==> Downloading https://downloads.sourceforge.net/project/tcl/Tcl/8.6.4/tk8.6.4-src.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4 --mandir=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4/share/man --with-tcl=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4/lib -\n==> make TK_LIBRARY=/var/lib/jenkins/.linuxbrew/Cellar/tcl-tk/8.6.4/lib\n/tmp/tcl-tk--tk20150429-18206-gdbqyt/tk8.6.4/unix/../generic/tk3d.c:1372: error: \u2018TkDisplay\u2019 has no member named \u2018borderTable\u2019\n/tmp/tcl-tk--tk20150429-18206-gdbqyt/tk8.6.4/unix/../generic/tk3d.c:1379: error: \u2018TkBorder\u2019 has no member named \u2018nextPtr\u2019\n/tmp/tcl-tk--tk20150429-18206-gdbqyt/tk8.6.4/unix/../generic/tk3d.c:1383: error: \u2018TkBorder\u2019 has no member named \u2018resourceRefCount\u2019\n/tmp/tcl-tk--tk20150429-18206-gdbqyt/tk8.6.4/unix/../generic/tk3d.c:1385: error: \u2018TkBorder\u2019 has no member named \u2018objRefCount\u2019\nmake: *** [tk3d.o] Error 1\n```\nFull logs here. We're getting closer!\n. That worked! And brew install git went off without a hitch once tcl-tk was installed.\n. ",
    "yipeipei": "Thanks, @mirguest !\nYour solution works, by modifying \nruby\nfile.write \"using darwin : : #{ENV.cxx} ;\\n\"\nto \nruby\nif OS.mac?\n  file.write \"using darwin : : #{ENV.cxx} ;\\n\"\nelse\n  file.write \"using gcc : : #{ENV.cxx} ;\\n\"\nend\nI am on CentOS 7, and using the following commands\nshell\nbrew install boost --c++11, --universal\nbrew install boost-python --c++11 --universal --with-python3\n. ",
    "hemedani": "Tanks iggy...\nafter all i installed mongo with apt-get\njust for everyone who read this issue for installing mongo with apt-get don't adding the vivide repo adding the trusty repo \n. ",
    "Anakros": "Oh, sorry. Didn't read it.\n. ",
    "hartzell": "Back in the thread that inspired this one, @sjackman answered a question that \"lh3\" asked by saying\n\n\nCan a user package a bottle by him/herself, or packaging has to go through linux/brew?\n\nYes, a user can bottle any formula, but that bottle can't be uploaded to the official Homebrew Bintray account, which is done only by the BrewTestBot.\n\nI've done a few experiments based on your Dockerfile and have ended up with bottles and bits of ruby.\nI'm not sure what to do with them though.  I'm interested in building a local cache of bottles that I've built (trust issues, etc...) so I can't add the ruby snippets into the Forumula and push them back upstream.\nI supposed that I could merge them into my local repo and just keep on top of it if/when I pull.\nOn the same theme, can I get linuxbrew to use my bottles w/out modifying the formula?\nThanks for all of the work on this!\n. re: temacs and libgpm (got it right that time...).\nJust found the little stinker in /usr/lib64, /usr/lib64/libgpm.so.10.  I'd gone looking for it but...  \nThanks for the details.  I'll play with the various options and see what clicks.  I'm firmly in the isolationist camp.    We need t-shirts....\n. re: ncurses and #811 \nI'm a bit confused that I don't seem to need a dependency on ncurses if I build everything from source.  Am I picking up the dependency on tputs from something in one of the bottles that you've built?\n. Thanks for all the help and the info!\n. I'd like to keep plugging away at this but could use some guidance.\nI've been trying to get things going on real live linux boxes, but that might be too confusing (I have no control of what's installed where when...).\nI'm working on getting the linuxbrew docker images/containers up and running.\n. I'd like to keep plugging away at this but could use some guidance.\nI've been trying to get things going on real live linux boxes, but that might be too confusing (I have no control of what's installed where when...).\nI'm working on getting the linuxbrew docker images/containers up and running.\n. Squashed and pushed.\nBy the way, the squash/rebase instructions were very helpful.  I probably would have screwed around a while and possibly blown it.  Three lines from you made the commit happen easily.  (Although the second line is git, not brew...).\n. Looks like there's a problem around line 1200 of the travis build run,  while it's installing depedencies from bottles:\n/usr/bin/perl ./zsh.pl ../src/curl > _curl\n/tmp/curl20160229-29977-32zwsn/curl-7.47.1/src/.libs/lt-curl: error while loading shared libraries: liblber-2.4.so.2: cannot open shared object file: No such file or directory\ncurl returned 127 with output:\nmake[1]: *** [_curl] Error 127\nmake[1]: Leaving directory `/tmp/curl20160229-29977-32zwsn/curl-7.47.1/scripts'\nmake: *** [install-recursive] Error 1\n. Looks like there's a problem with curl while installing depedencies from bottles:\nmake[1]: Entering directory `/tmp/curl20160229-30060-1n27nc7/curl-7.47.1/scripts'\n/usr/bin/perl ./zsh.pl ../src/curl > _curl\n/tmp/curl20160229-30060-1n27nc7/curl-7.47.1/src/.libs/lt-curl: error while loading shared libraries: liblber-2.4.so.2: cannot open shared object file: No such file or directory\ncurl returned 127 with output:\n. If mercurial depends on Python (in the sense that you need to provide it somehow) shouldn't it depend on it in the Formula?\nCan the formula tell whether a prerequisite has been provided via brew or apt-get/yum/...?  Should it care?\n. I pulled/updated the container and have a different problem, an issue trying to make a hardlink from zipinfo to unzip.  It suspect that I'm mis-using Docker somehow.  Suggestions welcome.\nI've uploaded the commands that I'm running the result I'm seeing into this gist.\nI'm not working with the copy of linuxbrew in ~/.linuxbrew, but cloning my own so that I can make changes to push back to the project.  That might be an unsupported model for using the container.\n. The unzip issue is a virtualbox/vboxfs problem, and here.\nI'll work on this in another setting.\n. Looks like the travis test failed trying to build a bottle, for lack of homebrew-dups not having been tapped.\nWhat's my next move?\n. @DoomHammer -- please take a stab at this if you have the opportunity.  I still have it on my plate but haven't had the time to act on it.\n. I'm not sure which hunk you'd like me to remove.  The patch moves pytz to a different location in the file, the first hunk inserts it into the new location and the second hunk deletes it from the old.\n. Here's the bottom of the install output\n```\n/usr/bin/gcc-4.8 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Os -w -pipe -march=core2 -isystem/root/linuxbrew/include -fPIC -DUSE__THREAD -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python2.7 -c c/_cffi_backend.c -o build/temp.linux-x86_64-2.7/c/_cffi_backend.o\nc/_cffi_backend.c:13:17: fatal error: ffi.h: No such file or directory\n #include \n                 ^\ncompilation terminated.\nerror: command '/usr/bin/gcc-4.8' failed with exit status 1\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\nand here's the gist: https://gist.github.com/efdb86973be7483a4592\n. Digging a bit more.  I've made the change to use unless OS.mac?.  I'm still having trouble.\nI think that the problem is that the libffi formula does not install *ffi.h` into the include directory, so building cffi fails.\nShould the libffi formula copy/link/... ffi.h?\n. ",
    "zbeekman": "How do I get/install gcc from bottle? Or build and post my own gcc bottle? Do I need to build glibc from source first?\n. (To elaborate a little more, I'm  trying my hand at mimicking some of your docker builds using vagrant and ssh with Ubuntu precise... I want an easier way to get GCC 5.3 and 5.4 (once it rolls out) on Travis-CI)\n. OK, great! Actually, amazing! I'm hoping all the prerequisite Ubuntu precise packages are whitelisted... I'll report back on my success or failure with Linux brew using Travis container (Ubuntu Precise) builds.\nThanks!\n. Is there any way to trigger the generation and upload of more bottles? Specifically I'm interested in a recent CMake. I had some trouble installing CMake because I think there is a bzip2 dependency not listed in the formula, and Linuxbrew didn't like installing sphinx so I passed --without-docs but it is really slow to build.\n. Just FYI, Linuxbrew was not happy about bottling CMake on Precise:\ntravis@precise64:~/opencoarrays$ brew postinstall cmake\ntravis@precise64:~/opencoarrays$ brew bottle --rb cmake\n==> Determining cmake bottle revision...\n==> Bottling cmake-3.4.3.x86_64_linux.bottle.1.tar.gz...\nnot an ELF executable\nError: undefined method `write' for nil:NilClass\nPlease report this bug:\n    https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:258:in `block (2 levels) in bottle_formula'\n/home/travis/.linuxbrew/Library/Homebrew/utils.rb:440:in `ignore_interrupts'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:257:in `ensure in block in bottle_formula'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:257:in `block in bottle_formula'\n/home/travis/.linuxbrew/Library/Homebrew/keg.rb:245:in `block in lock'\n/home/travis/.linuxbrew/Library/Homebrew/formula_lock.rb:29:in `with_lock'\n/home/travis/.linuxbrew/Library/Homebrew/keg.rb:241:in `lock'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:193:in `bottle_formula'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:410:in `block in bottle'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:409:in `each'\n/home/travis/.linuxbrew/Library/Homebrew/cmd/bottle.rb:409:in `bottle'\n/home/travis/.linuxbrew/Library/brew.rb:83:in `<main>'\nI hope you have better luck!\nAlso, thanks for the AMAZING project.\n. You, sir are a star! :100: I'm trying to think of other big blocking packages for us... I may post bottle requests here for ubiquitous packages that take forever to build, if you don't mind.\n. I'll take what I can get. Major early dependencies are important to bottle, if possible, to be able to get krufty/exotic systems bootstrapped.\n. OpenSSL? Not relocatable? \n. Also, I think I someone needs to add bzip2 as a dependency to CMake. Right now the bottled version gives me: \nldd ~/.linuxbrew/Cellar/cmake/3.4.3/bin/cmake\n...\nlibbz2.so.1.0 => not found\n. Any chance of a bottled ruby and dependencies?\n. bzip2 added as cmake dep in PR #848\nWhat about a curl bottle (seems to work in my tests) and a openldap bottle?\nI may submit a PR to make openldap a curl dependency (at least when building with ldap support)\n. Bottle request: mpich Tested and seems to work on hashicorp/precise64 VM\n. Hey, with homebrew, in the past, I think I have been able to get a homemade bottle and then brew install my-bottle.tar.gz but I've been having some trouble doing this with linux brew. It seems to just try to do a default source install. I don't know if I've done something wrong or if this is a bug, or intentional. Do you have any insight? Should I open an issue?\n. @outcoldman have you confirmed that this works? I just build ruby from source but didn't install it into a homebrew directory... I guess I'll try symlinking it in there...\n. yes it seems to have worked fine! (Just FYI, I symlinked into bin... perhaps the cleverest way to do this would be to grab a version of ruby older than what's currently available in homebrew and install it in the Cellar, and then brew link it... that way you could upgrade ruby using linuxbrew and then unlink or remove the manual install...\n. Thanks, that's exactly what I ended up doing and it worked like a charm!\n. I too have the dreaded\n==> Verifying git--html-2.7.2.tar.xz checksum\nError: Directory not empty - /home/vagrant/.linuxbrew/Cellar/git/2.7.2/lib/perl/5.14.2\nError. I suspect it comes from rmdir in git.rb:\n```\nvagrant@precise64:~$ grep -A 4 -B 4 'rmdir' .linuxbrew/Library/Formula/git.rb\n      # Remove perllocal.pod, which conflicts with the perl formula.\n      # I don't know why this issue doesn't affect Mac.\n      pod = Pathname.new pod\n      rm pod\n      rmdir [pod.dirname, pod.dirname.dirname]\n    end\n  end\ndef caveats; <<-EOS.undent\n``\n. Thanks for your help.. I think your other comment on #380 has just made my life so much simpler... I was having issues with building glibc but through your guidance and some vagrant testing I think I'm up and running.\n. I too have this issue on a RHEL 5 system.  I actually have access to gcc 4.8.3 (through GNU modules) but can't figure out how to get Linuxbrew to use it... maybe reinstall Linux brew setting CC and CXX to point to 4.8.3?\n. An additional comment: The travis-ci environment is not as virginal as a bare ubuntu installation, so that is likely why the bzip2 dependency was not detected.\n. Seems like there is a bigger issue that is breaking the travis build...\n. Right now on my local (vagrant) machine,brew install --only-dependencies cmake` fails for curl: https://gist.github.com/3355ded791bc80a3e359\n. It also fails with sphinx-doc:\nhttps://gist.github.com/a567e0bb1a76107b9aa0\n. Any thoughts on the sphinx-doc failure?\nAlso, we could default to not building and installing CMake documentation with sphinx which would eliminate the issue\n. > the option is to make openldap a dependency of curl.\nWould you accept a PR to make openldap a dependency of curl?\n. pypy-setuptools or python-setuptools? (Or does it matter?)\nOn Sat, Feb 27, 2016 at 11:05 PM Shaun Jackman notifications@github.com\nwrote:\n\nThe setuptools issue has come up about eleven times before. A brew doctor\ntest or some other solution seems in order.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Linuxbrew/linuxbrew/pull/848#issuecomment-189780989.\n. > Please change this to\ndepends_on \"Homebrew/dupes/openldap\" => :optional unless OS.mac?\nPlease remove\noption \"without-ldap\", \"Build without LDAP support\"\n\nGood suggestions. I'm still getting used to the succinct power or Ruby.\n. Do changes to formulae for Linuxbrew get contributed back upstream, or will they at some point? Just curious because removing the option \"without-ldap\" will remove this option completely from the OS.mac builds.\n. :tada: Thanks again for the awesome project\n. Any hope of a bottled ghc ? This will circumvent the issue, unless installed from source\n. OK, I'll try to remember this for my next PR\n. ",
    "wreed4": "to my knowledge, it is....but I'm not sure.  I know it is possible to build llvm for linux.  Very difficult in my personal experience (hence wanting to use brew) but possible\n. To the formula? Or do you mean the formula has to be edited?\n. ",
    "aportelli": "Hi, I am working and struggling to solve this issue. Has anyone found a working solution yet?\n. Ok thanks!\n. ",
    "mscook": "I'm a formula novice so I'm not sure.\n. ",
    "jszakmeister": "FWIW, people trying to build Neovim via Linuxbrew have been running into this problem too.\n. > I had thought that this issue was already resolved by a previous pull request. It would seem not. I'm on vacation until the new year. Please bump this thread after then. Sorry for the delay.\nNo worries.  I'll try and remember to bump this after the new year.  Enjoy your vacation!\n. ",
    "rob-p": "Any update on this?  I can see it's still affecting @sjackman's ability to build salmon from source and I'm not able to repro the issue --- which is the worst kind of problem :disappointed: .\n. ",
    "jzee": "@sjackman - by any chance, is the filesystem you attempt to untar to FAT32?\n. ",
    "pcottle": "Ah my apologies! I'll wait for the sync and hopefully we can try then\n. ",
    "sternhenri": "Hey Sjackman, reporting on same error:\nbrew gist-logs tcl-tk\nhttps://gist.github.com/29db55bcf71028c1f697\nand\nbrew gist-logs tcl-tk --without-tk\nhttps://gist.github.com/21689cd5d51e1b7c2a8d\nThank you!\n. That did it for me! Thanks so much @sjackman  :dart: !\n. Good idea!\n. ",
    "jwhite007": "What about other packages which require tcl-tk?\n. This happened to be a problem with not linking gcc and g++ to gcc-4.4 and g++-4.4. I finally got binutils to make.\n. Problem solved!\n. I actually had this working long ago and forgot, exactly, what fixed it... sorry, guys. Thanks for the input, though.\n. I'm running into a different, albeit related issue when I try to install packages within R with \"install.packages('')\". I get...\n/toolbox/NGS/.linuxbrew/Cellar/r/3.2.3/lib/R/bin/Rcmd: line 62: exec: INSTALL: not found\nINSTALL is in /toolbox/NGS/.linuxbrew/Cellar/r/3.2.3/lib/R/bin/, the same dir as Rcmd.\nSetting the permissions manually on the R scripts such as INSTALL solves the problem.\n. Thank you, sir, for the quick reply. That worked.\n. \"brew upgrade gcc --cc=gcc-4.4\" seems to have solved it.\n. An upgrade of GCC using \"brew upgrade gcc --cc=gcc-4.4\" is now failing on another server on which I've installed linuxbrew in the same manner (standalone). gcc-4.4 links to /usr/bin/gcc as it does on the server on which the upgrade worked. \"LD_LIBRARY_PATH=$(brew --prefix gcc)/lib brew upgrade gcc --cc=gcc-4.4\" works, but I'm not sure why. I'd like to know, though. I'm far from an expert in c-package builds.\n. Thanks for the response. I'd like to help out with the linuxbrew project; however, I'm a data scientist and my programming skills don't extend beyond Python, R, Javascript, and some Java. Please let me know if I can help out in any way.\n. Thanks for the reply and information. I never knew that about ln. I always assumed it either had to be an absolute path or a path relative to the working directory. That's interesting about the changes to the ncruses formula. Thanks for the link.\n. Thanks for the reply. I got the patch to work after \"brew reinstall gpatch -s\" I've attached files with output from \"brew list\" and \"brew config\" anyway.\nbrew_list.txt\nbrew_config.txt\nI'm now getting build errors, however. The logs are here... https://gist.github.com/anonymous/73220c3c598665e04a42\n. Would you like me to run that on gpatch? I don't have patch installed. Did you mean \"brew install patch\"?\n. brew_reinstall_gpatch.txt\nldd_which_patch.txt\n\"patch --version\"...\npatch: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by patch)\n. I tried the triple-backtick in my comment above. I must be doing something wrong.\nI run brew update before installing anything. I did it again with the same results.\nAs for the final bit... no luck. Same output as above.\n. ```\nbrew patchelf gpatch -v...\n==> Fixing up gpatch...\n/toolbox/NGS/.linuxbrew/Cellar/patchelf/0.8/bin/patchelf --set-rpath /toolbox/NGS/.linuxbrew/lib --set-interpreter /toolbox/NGS/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 /toolbox/NGS/.linuxbrew/Cellar/gpatch/2.7.5/bin/patch\nreadelf -d which patch | head...\nDynamic section at offset 0x21e18 contains 25 entries:\n  Tag        Type                         Name/Value\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x000000000000001d (RUNPATH)            Library runpath: [/toolbox/NGS/.linuxbrew/lib]\n 0x000000000000000c (INIT)               0x401f68\n 0x000000000000000d (FINI)               0x415698\n 0x0000000000000019 (INIT_ARRAY)         0x61ee00\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n 0x000000000000001a (FINI_ARRAY)         0x61ee08\n.\nwhich patch\n/toolbox/NGS/.linuxbrew/bin/patch\n```\nldd `which patch`\n/toolbox/NGS/.linuxbrew/bin/patch: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by /toolbox/NGS/.linuxbrew/bin/patch)\n        linux-vdso.so.1 (0x00007fff1d1d1000)\n        libc.so.6 => /lib64/libc.so.6 (0x000000305fe00000)\n        /toolbox/NGS/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00007f923ada4000)```\npatch --version\npatch: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by patch)\n. echo $LD_LIBRARY_PATH\n/lib:/lib64:/usr/lib:/usr/lib64:/toolbox/NGS/.linuxbrew/lib:/toolbox/NGS/.linuxbrew/lib64:/toolbox/NGS/.linuxbrew/Cellar/lapack/3.6.0/lib64/:/toolbox/NGS/.linuxbrew/Cellar/openblas/0.2.15/lib\n. I think we're getting somewhere...\nldd `which patch`\nlinux-vdso.so.1 (0x00007ffdd7ead000)\n        libc.so.6 => /toolbox/NGS/.linuxbrew/lib/libc.so.6 (0x00007f90c6478000)\n        /toolbox/NGS/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00007f90c67f4000)\n```\npatch --version\nCopyright (C) 2003, 2009-2012 Free Software Foundation, Inc.\nCopyright (C) 1988 Larry Wall\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nWritten by Larry Wall and Paul Eggert\n```\n. Compilation problems...\nhttps://gist.github.com/2753db8191201cd0b706\n. Ok. Thanks.\n. @philippbayer both linuxbrew and @sjackman r0ck!!.. I have ncurses installed; however, the version is 6 and not 5.\nbrew upgrade r\n... is also looking for libncursesw.so.5. This is weird because I previously had installed R without having explicitly installed ncurses 5. I'm pretty confident that the ncurses which I installed via brew initially was version 6.\n. The symlink trick works... no errors issued upon \"brew install ghc.\" What do you think?... Are there any deleterious effects?\nGhc was just a dependency for pandoc wich also installed fine.\n. Yes, I'll work on this. Suffering from the flu at the moment. I'll try to get to it tomorrow.\n. I'm still planning on contributing to this as you, Shaun, suggested above, and I'd like to make the proper edits to the rb; however, my company is in the process of moving right now, and it's been just shy of a shit storm. I've got several impending project deadlines, but after the dust settles, I'll start contributing more to linuxbrew.\n. The developers seem to be changing this file quite a bit. The new sha256 hash is now being reported as \"426ded64b355df4a69d3fa6939b15c34ea20000c4788643193b3d272cac9bf5c\"\n. I'll submit a pull request... reading the tutorial now. A bottle would be great as the build takes forever.\n. I haven't quite gotten to finishing this off. I've been suffering from the flu. I'm going to go home and rest now, but upon...\nbrew tests\ni got...\nTasks: TOP => test\n(See full trace by running task with --trace)\nWarning: File leak is detected\nFormulaLockTests#test_locking_file_with_existing_lock_raises_error\n--- expected\n+++ actual\n@@ -2,6 +2,7 @@\n  \"/cache\",\n  \"/cellar\",\n  \"/formula_cache\",\n+ \"/formula_cache/.nfs0000000000afc86b00000243\",\n  \"/logs\",\n  \"/prefix\",\n  \"/prefix/Library\",\nDependencyExpansionTests#test_expand_keeps_recommendeds_by_default\n--- expected\n+++ actual\n@@ -2,7 +2,6 @@\n  \"/cache\",\n  \"/cellar\",\n  \"/formula_cache\",\n- \"/formula_cache/.nfs0000000000afc86b00000243\",\n  \"/logs\",\n  \"/prefix\",\n  \"/prefix/Library\",\nI'll try to troubleshoot tomorrow.\n. I apologize for the delay on this. I recovered from the flu and then had to play catch-up at work. I'm running into some oddities. I've created a branch to make my changes to texlive. I've named it \"texlive.\" After...\nbrew update\ncd $(brew --prefix)\ngit checkout -b texlive origin/master\nbrew edit texlive\ngit checkout master\nbrew cat texlive\n...I've noticed that my changes are on master. According to my knowledge of git, this shouldn't be the case... correct?\n. Hmmm. Interesting. I thought the branches would be seen by git as different before the commit.\nI may hold off on submitting a pull request until I figure out what's going on with these texlive mirrors. When I edited the texlive rb yesterday, the hash was different than what it is now and both have an update date of the 19th.\nI can't remember, exactly, but I may have downloaded the file early on the 19th and then another update was uploaded later that day. I hadn't checked the time of day on the file that I downloaded. Never the less... I'd like to find out why they seem to update this file so often.\n. I'm a little disturbed as to the activity on this file...\n\nhttp://ctan.mirrors.hoobly.com/systems/texlive/tlnet/\n19-Mar-2016 19:19\n3ca8979e5996397845ec0597c33a9bc8b4c1713aed74e97d62b96024a4aaadfd\nhttp://mirrors.acm.jhu.edu/ctan/systems/texlive/tlnet/\n19-Mar-2016 02:19\neb6b6bb8a885c5b9dfbed30c17ede1c24a74f08facef510231e733be238e84df\nhttp://mirrors.concertpass.com/tex-archive/systems/texlive/tlnet/\nundated\n3ca8979e5996397845ec0597c33a9bc8b4c1713aed74e97d62b96024a4aaadfd\nhttp://ctan.mackichan.com/systems/texlive/tlnet/\n20-Mar-2016 02:19\nad8e5ace82989eb3991f407f549e251c684e73bc656bbeb2f29d1c72557505b8\nhttp://mirrors.ibiblio.org/CTAN/systems/texlive/tlnet/\n2016-Mar-19 22:19:00\n3ca8979e5996397845ec0597c33a9bc8b4c1713aed74e97d62b96024a4aaadfd\n\nThese are all redirects from the link which is provided in texlive.rb. I viewed all of these pages within 5 minutes.\n. I'm working on finding a stable mirror which reports an sha256.\n. I really think something odd is happening with those redirect-mirror tar.gzs. I've found several sites, such as http://ctan.math.washington.edu/tex-archive/systems/texlive/Source/, that show stable tar.gzs for texlive. Is it possible to list several download sites in the rb. I see that the rb for R has the following...\n\nurl \"http://cran.rstudio.com/src/base/R-3/R-3.2.4-revised.tar.gz\"\nmirror \"http://cran.r-project.org/src/base/R-3/R-3.2.4-revised.tar.gz\"\n\nOstensibly if the download from \"url\" fails then a download from \"mirror\" is attempted... correct?\nThere are several sites, such as the UW site above, with stable texlive tar.gzs.\nAlso... When a site offers the tar.gz, but no sha256, how are the rb writers dealing with this? Do they download and hash several times and then publish the sha256 in the rb once they're sure their download is not corrupted? The two sites above for R, for instance, don't offer the hashes.\n. #### Not working:\n$ brew install gd --with-libvpx --with-fontconfig --with-freetype --with-jpeg --with-libpng --with-libtiff\nLogs:\nhttps://gist.github.com/jwhite007/a7e9ad6a8c04427daff4\n. I did close it intentionally. I'm a bit confused as the \"--with\" options are default according to the brew-info output; however, I was getting different output when I stated them explicitly. I then looked at the logs of the install in which I did not explicitly state the \"--with\" options only to see that they are used.\n. On my end...\nHOMEBREW_MAKE_JOBS=1 brew install gd\ndoesn't seem to make a difference over...\nbrew install gd\nThe reason that I'm fooling around with the install of brewed GD is that I'm getting some errors when I try to install the GD module in brewed Perl. It seems that the install of the module finds /usr/include/gd.h and not the brewed GD's gd.h. I guess this isn't really a linuxbrew issue, so you can just ignore it, unless you know what's going on.\nThanks, Shaun.\n. Yes... totally just a Perl issue. For some reason, installing the YAML module fixed the gd.h issue. Computer voodoo.\n. I spoke too soon. The build is still finding /usr/include/gd.h and not the brewed gd's gd.h... back to the drawing board.\n```\n WARNING: found gd.h header file in /usr/include/gd.h, but it is expected at /toolbox/NGS/.linuxbrew/Cellar/gd/2.1.1_2/include/gd.h. This may cause compile errors! \n WARNING: found gd.h header file in /usr/include/gd.h, but it is expected at /toolbox/NGS/.linuxbrew/Cellar/gd/2.1.1_2/include/gd.h. This may cause compile errors! \n Possible problems found \n```\n$ ls /toolbox/NGS/.linuxbrew/Cellar/gd/2.1.1_2/include/\nentities.h  gd_color_map.h  gdfontg.h  gdfontmb.h  gdfontt.h  gd.h     gdpp.h\ngdcache.h   gd_errors.h     gdfontl.h  gdfonts.h   gdfx.h     gd_io.h\nAgain... probably not a linuxbrew issue.\n. $ perl -MCPAN -e shell\ncpan[1]> install GD\n. cpanm GD\nresults in same error, so I decided to...\ncpanm GD --force\nHopefully this doesn't cause any serious problems.\n. $ brew sh <<<\"cpanm GD\"\nYour shell has been configured to use Homebrew's build environment:\nthis should help you build stuff. Notably though, the system versions of\ngem and pip will ignore our configuration and insist on using the\nenvironment they were built under (mostly). Sadly, scons will also\nignore our configuration.\nWhen done, type `exit'.\nGD is up to date. (2.56)\n. ",
    "parisk": "In general sounds okay, but wouldn't it be better if we could handle this easily with an environment variable like LINUXBREW_CELAR? Would you be open to review a pull request for this?\n. ",
    "eugenk": "Oh yes, I forgot to give the output if brew install:\n\u276f brew install uDrawGraph\nError: No available formula for udrawgraph \nSearching formulae...\nuDrawGraph\nSearching taps...\nEdit: I copy-pasted from the console. The output switches it back to lowercase.\n. I just found out: If I rename the formula from uDrawGraph.rb to udrawgraph.rb, linuxbrew finds it. Note that homebrew on OSX has no problems finding it without the renaming.\n. Maybe the filesystem plays a role in this. As far as I know, HFS+ is case insensitive by default, while btrfs (on my arch machine) and ext4 (on ubuntu) are case sensitive, but I'm not 100% sure if this is correct.\n. Alright, will do. Just out of curiosity: Does linuxbrew/homebrew plan to support capitals some day? I can definitely understand if not, but it's always nice to know.\n. ",
    "acityinohio": "I'm also getting this bug when I try to brew upgrade. Here's the error:\n==> Upgrading 3 outdated packages, with result:\ngawk 4.1.2, tmux 2.0, sqlite 3.8.10.1\n==> Upgrading gawk\nError: undefined method `gcc-4.9_build_version' for OS::Mac:Module\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/usr/local/linuxbrew/Library/Homebrew/compilers.rb:119:in `block in find_compiler'\n/usr/local/linuxbrew/Library/Homebrew/compilers.rb:106:in `each'\n/usr/local/linuxbrew/Library/Homebrew/compilers.rb:106:in `find_compiler'\n/usr/local/linuxbrew/Library/Homebrew/compilers.rb:99:in `compiler'\n/usr/local/linuxbrew/Library/Homebrew/compilers.rb:82:in `select_for'\n/usr/local/linuxbrew/Library/Homebrew/extend/ENV/shared.rb:123:in `compiler'\n/usr/local/linuxbrew/Library/Homebrew/extend/ENV/std.rb:74:in `setup_build_environment'\n/usr/local/linuxbrew/Library/Homebrew/build.rb:90:in `install'\n/usr/local/linuxbrew/Library/Homebrew/build.rb:179:in `<main>'\nFollowed by my brew config:\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew.git\nHEAD: f765cd358e3608cdd3088b71b16868489b73f94e\nLast commit: 3 days ago\nHOMEBREW_PREFIX: /usr/local/linuxbrew\nHOMEBREW_CELLAR: /usr/local/linuxbrew/Cellar\nCPU: quad-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 2.2.2 => /usr/local/linuxbrew/Cellar/ruby/2.2.2/bin/ruby\nPerl: /usr/local/linuxbrew/bin/perl => /usr/local/linuxbrew/Cellar/perl/5.20.1/bin/perl\nPython: /usr/local/linuxbrew/bin/python => /usr/local/linuxbrew/Cellar/python/2.7.9/bin/python2.7\nRuby: /usr/local/linuxbrew/bin/ruby => /usr/local/linuxbrew/Cellar/ruby/2.2.2/bin/ruby\nJava: N/A\n. And likewise, installing brew hello fails unless I use the --cc=gcc4.9 flag, even though I have HOMEBREW_CC=gcc-4.9. Really weird!\n. Yup! That did the trick.\n. ",
    "naseer": "I have the same problem - gist -https://gist.github.com/anonymous/dcec5ec575a0dc9348c8\n. After explicitly installing apr and apr-util - moved forward, but new issue with serf\nhttps://gist.github.com/8560a050f22e31c80952\n```\nbrew install subversion\n==> Downloading https://www.apache.org/dyn/closer.cgi?path=subversion/subversion-1.8.13.tar.bz2\nAlready downloaded: /local/mnt/workspace/naseer/.linuxbrew/cache/subversion-1.8.13.tar.bz2\n==> Patching\npatching file configure\nHunk #1 succeeded at 25386 (offset 20 lines).\npatching file subversion/bindings/swig/perl/native/Makefile.PL.in\n==> Downloading https://serf.googlecode.com/svn/src_releases/serf-1.3.8.tar.bz2\nAlready downloaded: /local/mnt/workspace/naseer/.linuxbrew/cache/subversion--serf-1.3.8.tar.bz2\n==> /local/mnt/workspace/naseer/.linuxbrew/opt/scons/bin/scons PREFIX=/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf GSSAPI=/usr CC=/local/mnt/workspace/naseer/.linuxbrew/bin/gcc-4.9 CFLAGS=-Os -w -pipe -march=\n==> /local/mnt/workspace/naseer/.linuxbrew/opt/scons/bin/scons install\n==> ./configure --prefix=/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13 --with-zlib=/usr --with-sqlite=/local/mnt/workspace/naseer/.linuxbrew/opt/sqlite --with-serf=/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1\nAn appropriate version of serf could not be found, so libsvn_ra_serf\nwill not be built.  If you want to build libsvn_ra_serf, please\ninstall serf 1.2.1 or newer.\nconfigure: error: Serf was explicitly enabled but an appropriate version was not found.\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nInstall subversion --with-java failing (https://github.com/Homebrew/homebrew/issues/38133)\nSubversion fails on 10.10 --with-python (https://github.com/Homebrew/homebrew/issues/34119)\n``\n.brew install subversion --without-serf` worked, so maybe that should be the default for linuxbrew ?, plus apr and apr-util dependencies need to be added.\n. I needed serf (to install clang-format) so I tried to debug more.\nFurther debugging revealed my scons binary was somehow bad. I reinstalled scons and it moved ahead, Now I'm stuck at https://gist.github.com/anonymous/c0cedb0cb3a890086bda\n. Resolved with\n``` diff\ndiff --git a/Library/Formula/subversion.rb b/Library/Formula/subversion.rb\nindex c9dc287..cc0d1a2 100644\n--- a/Library/Formula/subversion.rb\n+++ b/Library/Formula/subversion.rb\n@@ -46,6 +46,11 @@ class Subversion < Formula\n   depends_on \"scons\" => :build\n   depends_on \"openssl\"\n\nunless OS.mac?\ndepends_on \"apr\"\ndepends_on \"apr-util\"\nend\n+\n   # Other optional dependencies\n   depends_on \"gpg-agent\" => :optional\n   depends_on :java => :optional\n@@ -70,6 +75,7 @@ class Subversion < Formula\n   end\n\ndef install\n+    ENV.deparallelize\n     serf_prefix = libexec+\"serf\"\n resource(\"serf\").stage do\n\n```\n. @sjackman - I tried with https://github.com/Homebrew/linuxbrew/pull/409/ on a different machine (fresh brew) - svn built fine but when running it - it failed with the error below. \nsvn: error while loading shared libraries: libserf-1.so.1: cannot open shared object file: No such file or directory\n. Logs with https://github.com/Homebrew/linuxbrew/pull/409 are at https://gist.github.com/anonymous/f2ce7f29eb9a1238800e\n. If I do brew install subversion --without-serf - other packages that depend on subversion fail - in my case brew install clang-format that for some reason does an svn checkout.\n. @sjackman  - libserf-1.so.1.3.0 was already symlinked\nInstead, this helped\nln -s /local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so.1.3.0 /local/mnt/workspace/naseer/.linuxbrew/lib/libserf-1.so.1\nHow can I get this established from the build file?\n. ```\nnaseer:/usr2/naseer/.linuxbrew/Library/Formula $ brew list subversion |grep serf\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so.1\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.a\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/pkgconfig/serf-1.pc\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/lib/libserf-1.so.1.3.0\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/include/serf-1/serf.h\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/include/serf-1/serf_bucket_types.h\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/libexec/serf/include/serf-1/serf_bucket_util.h\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib/libsvn_ra_serf-1.so.0.0.0\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib/libsvn_ra_serf-1.so\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib/libserf-1.so\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib/libsvn_ra_serf-1.so.0\n/local/mnt/workspace/naseer/.linuxbrew/Cellar/subversion/1.8.13/lib/libsvn_ra_serf-1.a\nNot found in ldd\nnaseer:/usr2/naseer/.linuxbrew/Library/Formula $ ldd which svn\n    linux-vdso.so.1 =>  (0x00007fffaf5fe000)\n    libsvn_client-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_client-1.so.0 (0x00007f6b3a1ec000)\n    libsvn_wc-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_wc-1.so.0 (0x00007f6b39f53000)\n    libsvn_ra-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_ra-1.so.0 (0x00007f6b39d47000)\n    libsvn_diff-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_diff-1.so.0 (0x00007f6b39b35000)\n    libsvn_ra_local-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_ra_local-1.so.0 (0x00007f6b3992c000)\n    libsvn_repos-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_repos-1.so.0 (0x00007f6b396fd000)\n    libsvn_fs-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_fs-1.so.0 (0x00007f6b394f4000)\n    libsvn_fs_fs-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_fs_fs-1.so.0 (0x00007f6b392c3000)\n    libsvn_fs_util-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_fs_util-1.so.0 (0x00007f6b390c1000)\n    libsvn_ra_svn-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_ra_svn-1.so.0 (0x00007f6b38ea6000)\n    libsasl2.so.2 => /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00007f6b38c71000)\n    libsvn_ra_serf-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_ra_serf-1.so.0 (0x00007f6b38a48000)\n    libserf-1.so.1 => not found\n    libsvn_delta-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_delta-1.so.0 (0x00007f6b38837000)\n    libsvn_subr-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsvn_subr-1.so.0 (0x00007f6b385cf000)\n    libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f6b383b6000)\n    libsqlite3.so.0 => /local/mnt/workspace/naseer/.linuxbrew/lib/libsqlite3.so.0 (0x00007f6b38117000)\n    libaprutil-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/Cellar/apr-util/1.5.4_1/libexec/lib/libaprutil-1.so.0 (0x00007f6b37ef6000)\n    libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f6b37ccc000)\n    libapr-1.so.0 => /local/mnt/workspace/naseer/.linuxbrew/Cellar/apr/1.5.2/libexec/lib/libapr-1.so.0 (0x00007f6b37aa1000)\n    librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f6b37899000)\n    libcrypt.so.1 => /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f6b37660000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f6b37441000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f6b3723d000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6b36e77000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f6b3a446000)\n    libserf-1.so.1 => not found\n    libserf-1.so.1 => not found\n    libserf-1.so.1 => not found\n```\n. > libserf-1.so.1.3.0 was already symlinked\nMy mistake - this was something I did manually, it was not present on a clean install\n. I was able to resolve it with \n``` ruby\n      unless OS.mac?\n        lib.install_symlink \"#{serf_prefix}/lib/libserf-1.so.1\"\n      end\n```\nBut I'm not sure if this is an acceptable solution. I've updated the pull request though\n. Done - thanks for the tip.\n. If you have cpan installed, you could try cpan SVN::Core  - this might be off topic for this bug though\n. Will address these comments, but the issue was actually not resolved properly with this on another colleagues machine. In his case, svn did install but it still complained after installation that it could not find the right version of libserf. We worked around it by removing the brew svn version from the path and using the Ubuntu 12.04 version. We only needed svn to satisfy clang-format. I will post logs when I get to a computer.\n. Thanks for helping me through the patch, Shawn :)\n. The recent merge commit  https://github.com/Homebrew/linuxbrew/commit/85d75ac8d331564b3b9a13c6caf87ee4eca27ea5 seems to have broken this\n. CC @danabrand \n. yeah - not fixed with https://github.com/danabrand/linuxbrew/commit/3bd7bda1b4b45d51f0e2c7487e9206666e57afa2 either\n. Same here\n. Dup of #648 \n. Duplicate of #648 \n. dup #648 \n. Done\n. I couldn't reproduce this issue on OS X\n. ",
    "fraserphysics": "I've been trying to use \"git svn\" to clone a repository on a fairly\nrestricted machine, call it x.  I don't have sudo or root access on x\nand I can't ssh to x from machines that I do administer.  I first\ntried building perl, subversion, git, etc from source and found it\ndifficult, then I discovered linuxbrew.  The error I get now is Can't\nlocate SVN/Core.pm which I guess is due to the failure to install\nsubversion, ie, this issue.  Right?  If there are things a novice\ncould do, let me know.\n. 3 days ago, I posted to this issue and sjackman replied:\n\nPlease report the exact command that you're attempting to run and\n   the full log including the error message. If the log is long, you\n   can use gist to post the log.\n\nThe command was:\n->brew install subversion\nToday after update/upgrade, that works.  Now however, \"git svn clone\"\nfails.  I append a cut and past from a terminal window.  Is this an\nappropriate venue for asking about my new problem? \nafraser@gentoo:~/projects$ git svn clone file:///usr/local/contrib/setup/team/svn-repository/Ingen/branches/2 Igen_gitrb2\nCan't locate SVN/Core.pm in @INC (you may need to install the SVN::Core module) (@INC contains: /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1/x86_64-linux-thread-multi /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1 /home/afraser/.linuxbrew/Cellar/perl/5.20.1/lib/site_perl/5.20.1/x86_64-linux-thread-multi /home/afraser/.linuxbrew/Cellar/perl/5.20.1/lib/site_perl/5.20.1 /home/afraser/.linuxbrew/Cellar/perl/5.20.1/lib/5.20.1/x86_64-linux-thread-multi /home/afraser/.linuxbrew/Cellar/perl/5.20.1/lib/5.20.1 .) at /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1/Git/SVN/Utils.pm line 6.\nBEGIN failed--compilation aborted at /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1/Git/SVN/Utils.pm line 6.\nCompilation failed in require at /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1/Git/SVN.pm line 32.\nBEGIN failed--compilation aborted at /home/afraser/.linuxbrew/Cellar/git/2.4.1/lib/site_perl/5.20.1/Git/SVN.pm line 32.\nCompilation failed in require at /home/afraser/.linuxbrew/Cellar/git/2.4.1/libexec/git-core/git-svn line 21.\nBEGIN failed--compilation aborted at /home/afraser/.linuxbrew/Cellar/git/2.4.1/libexec/git-core/git-svn line 21.\nafraser@gentoo:~/projects$\n. The cpanm dies with the following output:\nafraser@gentoo:~/src$ cpanm SVN::Core\n--> Working on SVN::Core\nFetching http://www.cpan.org/authors/id/M/MS/MSCHWERN/Alien-SVN-v1.8.11.0.tar.gz ... OK\nConfiguring Alien-SVN-v1.8.11.0 ... N/A\nBuilding and testing Alien-SVN-v1.8.11.0 ... FAIL\n! Installing SVN::Core failed. See /home/afraser/.cpanm/work/1432311355.14199/build.log for details. Retry with --force to force install it.\nSome key lines of the log seem to be:\nchecking for doxygen... /usr/bin/doxygen\nchecking for Expat... no\nconfigure: error: Expat not found\nconfiguring SVN failed at inc/My/SVN/Builder.pm line 118.\n    Something went wrong with the Subversion configuration.\n    Please attempt to correct it and re-run Build.PL.\n-> N/A\nChecking dependencies from MYMETA.json ...\n. It is already installed\n. ",
    "josePhoenix": "Correct, no irb installed. I didn't think it was possible to install ruby without irb, but there you go.\nUnfortunately, I can't install packages system-wide... this is what I was hoping to use linuxbrew to avoid. I can't brew install ruby because of the same issue.\nI'll try bugging our systems admins to get irb installed. What versions of ruby does linuxbrew support? Only the 1.8.x branch?\n. Alas, that was not enough. I'll go back to bugging our IT people. Thanks for your help!\n. ",
    "outcoldman": "Btw, if you cannot install ruby with irb you can compile it on your own with, just install it from sources https://www.ruby-lang.org/en/documentation/installation/, see \n\nBy default, this will install Ruby into /usr/local. To change, pass the --prefix=DIR option to the ./configure script.\n\nYou can basically just do\n./configure --prefix=/home/username/.linuxbrew\n. @zbeekman I remember that it worked, have not used linuxbrew for a while\n. ",
    "pramodhegde": "Will take a look at it early next week, if anyone hasn't got into it by then.\n. ",
    "vincentl": "openssl formula configures with 'no-ssl2' and so SSLv2_method is not available in the dynamic library.\nEdit openssl formula ($ brew edit openssl) and delete the 'no-ssl2' line.\n$ brew reinstall openssl\n$ brew reinstall python\nAnd now pip should work.\n. In the 02.make log file, the link line for _ssl.so has\n... -L/path/to/linuxbrew/lib -L/usr/local/lib -L. -lssl ...\nso it is picking up the openssl linuxbrew library and not the system openssl. And it seems that pip requires SSL2, so if you brew openssl with no-ssl2, pip breaks.  \nI tested pip with the modified openssl build, it it works.\nIs there a way to turn off SSL2 during python configuration?\n. ",
    "hkawaji": "I came across exactly the same problem, even with python 2.7.10. In my case, the problem was mainly caused by python formula prerequisite: it requires SSLv2 method supported but the recent formula of openssl decided not to support it for security reason. Here is a dirty patch for the formula of python and openssl:\nhttps://gist.github.com/hkawaji/33746654ea2271573c97\nwhich makes these changes:\n- make openssl to support SSLv2_method (while this is not recommended for security reason; ideally python formula has to be updated not to require this change of openssl)\n- enforce to build gdbm module\n- change to use \".so\" , instead of .dylib  for readline\n. ",
    "armish": "had the same issue on a server running CentOS release 6.6. Removing the no-ssl2line from the openssl formulae and reinstalling both openssl and python did the trick for me.\n. Confirming that this issue is now fixed for me with a fresh brew installation:\n```\n$ cat /etc/centos-release \nCentOS release 6.4 (Final)\n$ brew --version\nHomebrew 0.9.5 (no git repository)\n$ brew list\ngdbm  makedepend  ncurses  openssl  pkg-config  python  python3  readline  sqlite  unzip  xz  zlib\n$ python2\nPython 2.7.11 (default, Jan 19 2016, 12:32:08) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\n\n$ python3\nPython 3.5.1 (default, Jan 19 2016, 12:56:40) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n```\n\n\n\nthanks @sjackman!\n. ",
    "beatorizu": "If you are using GAE, you need add ssl to app.yaml file:\nlibraries:\n- name: ssl\n  version: latest\nI hope this help.\n. ",
    "kilojoules": "@sjackman @xu-cheng  How can I use the 2d1bc4d formula in a brew install command? I am using osx homebrew and also encountered this error. \nThe command which invoked this error was \n$ brew install boost --with-mpi --without-single\n Which resulted in:\n```\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.58.0/boost_1_58_0.tar.bz2\nAlready downloaded: /Library/Caches/Homebrew/boost-1.58.0.tar.bz2\n==> ./bootstrap.sh --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib --without-icu --without-libraries=python\n==> ./b2 --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib -d2 -j4 --layout=tagged --user-config=user-config.jam install t\n    cp \"bin.v2/libs/wave/build/darwin-4.2.1/release/link-static/threading-multi/libboost_wave-mt.a\"  \"/usr/local/Cellar/boost/1.58.0/lib/libboost_wave-mt.a\"\n...failed updating 1 target...\n...skipped 1 target...\n...updated 12594 targets...\n/usr/local/Library/Homebrew/build.rb:181:in dump': can't dump anonymous class #<Module:0x007f9ba992c8f8>::Boost (TypeError)\n    from /usr/local/Library/Homebrew/build.rb:181:inrescue in '\n    from /usr/local/Library/Homebrew/build.rb:167:in `'\nError: Suspicious failure\n```\n. @xu-cheng Can you help me troubleshoot this error? Have I found a bug in the boost formula?\n```\n$ brew install boost --with-mpi --without-single\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.58.0/boost_1_58_0.tar.bz2\nAlready downloaded: /Library/Caches/Homebrew/boost-1.58.0.tar.bz2\n==> ./bootstrap.sh --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib --without-icu --without-libraries=python\n==> ./b2 --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib -d2 -j4 --layout=tagged --user-config=user-config.jam install t\ncp \"bin.v2/libs/wave/build/darwin-4.2.1/release/link-static/threading-multi/libboost_wave-mt.a\"  \"/usr/local/Cellar/boost/1.58.0/lib/libboost_wave-mt.a\"\n\n...failed updating 1 target...\n...skipped 1 target...\n...updated 12594 targets...\nREAD THIS: https://git.io/brew-troubleshooting\n$ brew update\nAlready up-to-date.\n$ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: Setting DYLD_* vars can break dynamic linking.\nSet variables:\n    DYLD_LIBRARY_PATH: :/usr/local/Dakota//bin:/usr/local/Dakota/lib\nWarning: Unbrewed dylibs were found in /usr/local/lib.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\nUnexpected dylibs:\n    /usr/local/lib/libcrypto.0.9.8.dylib\n    /usr/local/lib/libcrypto.dylib\n    /usr/local/lib/libklcskca.dylib\n    /usr/local/lib/libklcsrt.dylib\n    /usr/local/lib/libklcsstd.dylib\n    /usr/local/lib/libklcstr.dylib\n    /usr/local/lib/libklmspack.0.1.0.dylib\n    /usr/local/lib/libklmspack.0.dylib\n    /usr/local/lib/libklmspack.dylib\n    /usr/local/lib/libssl.0.9.8.dylib\n    /usr/local/lib/libssl.dylib\n    /usr/local/lib/libz.1.2.5.dylib\n    /usr/local/lib/libz.1.dylib\n    /usr/local/lib/libz.dylib\nWarning: Some installed formula are missing dependencies.\nYou should brew install the missing dependencies:\nbrew install boost\n\nRun brew missing for more details.\n```\nNote: brew install boost runs without error.\n. @xu-cheng Thanks for your help. I started a new issue here\n. ",
    "aprilwade": "This doesn't build for me. An error occurs when trying to build libcxx: https://gist.github.com/anonymous/0ef08880c408c08c1b07\n. The latest version compiles for me. I tried compiling a couple of formulas using clang and it seems to be working correctly.\n. The workaround I came up with was to symlink /lib64/libnss_sss.so.2 to $(brew --cellar)/glibc/2.19/lib/libnss_sss.so.2.  That fixed the issue for me on Fedora 22.\n. My use case is that I have a vim plugin that builds a Lua C library.  Its build script wants to link against the same liblua.so that vim is linked against.  If linuxbrew doesn't provide a liblua.so, the build script finds the system one and links the library against it.  The library then fails to load at runtime.  Admittedly, this could be fixed by modifying the plugin's build script, but it seemed reasonable to me that linuxbrew should provide a liblua.so.\nThe upstream developers are opposed to including shared library targets because they consider it to be too difficult to do in a portable way. See here.  I know that message is rather old, but given they haven't changed it yet, I doubt I'll be the one to convince them.  Also, many Linux distributions modify Lua's build system to a similar end.  For example: Debian and Arch\n. ",
    "insomnia9527": "Sorry but can any of you explain it clearly? Or the steps? I really don't understand how you solve it.  Because I met this problem too,\n\nmake[5]: Leaving directory /tmp/llvm-20161203-13620-1s9laz1/tools/clang/runtime/compiler-rt-bins'\n[ 78%] Built target RTAsan.x86_64\nmake[5]: Leaving directory/tmp/llvm-20161203-13620-1s9laz1/tools/clang/runtime/compiler-rt-bins'\n[ 78%] Built target RTAsan_dynamic.x86_64\nmake[4]: Leaving directory /tmp/llvm-20161203-13620-1s9laz1/tools/clang/runtime/compiler-rt-bins'\nmake[3]: *** [all] Error 2\nmake[3]: Leaving directory/tmp/llvm-20161203-13620-1s9laz1/tools/clang/runtime/compiler-rt-bins'\nmake[2]:  [tools/clang/runtime/compiler-rt-stamps/compiler-rt-build] Error 2\nmake[2]: Leaving directory /tmp/llvm-20161203-13620-1s9laz1'\nmake[1]: *** [tools/clang/runtime/CMakeFiles/compiler-rt.dir/all] Error 2\nmake[1]: Leaving directory/tmp/llvm-20161203-13620-1s9laz1'\nmake:  [all] Error 2\n. \n",
    "pujaarajan": "\n. \n. Didn't get it to work; however I found another way to install graphviz. I appreciate your help!\n. ",
    "DomT4": "Will be fixed by https://github.com/Homebrew/homebrew/pull/40429. Needs to be applied to Linuxbrew afterwards as well. CC @sjackman.\n. Ah - Sorry about this; OpenSSL pull old tarballs off the main download link, and I pull them off my mirror one release later - It just happened this time the two releases were so close to each other my mirror vanished unusually early.\n. Closed via https://github.com/DomT4/LibreMirror/commit/67a35c4635dbb1137bbe6690bdfa2fc60424bccf.\nShaun will resync Linuxbrew soon I expect. Hopefully Homebrew's OpenSSL will be updated by the end of tonight; We had to wait overnight whilst OpenSSL resolved some accidental API breakage upstream.\n. What's the git issue here? Does the git via apt-get not work nicely with brew?\n. > It's a lot more convenient to install git via linuxbrew than to have to install git in order to install linuxbrew in order to install git.\nSure, agreed. It just lists git as an apt-get requirement on the README, which was my confusion.\nMaybe write up some logic that dictates if you want to install a formula that requires usage of a tap (i.e. from dupes) you must brew install git first? @mistydemeo did something similar in Tigerbrew with sha256 (OpenSSL or the sha2 utility).\n. Heh, fun.\nGiven Linuxbrew only supports 64-bit platforms, theoretically you could vendor a git binary/package in Library/Homebrew/vendor and use that by default for all internal git clones? Unless the tcl-tk usage is runtime?\nA slimmed down vendored git would only be another 27MB or so.\n. This has popped up on Linux as well? :eyes:. We thought it was an OS X exclusive caused by a software update.\nhttps://github.com/Homebrew/homebrew/issues/39170 - Contains solution, as well.\n. @sjackman Given we have an OS X specific fix warning about this in brew doctor you may wish to tweak it on Linux so it reads something like:\nruby\ndef check_tmpdir_sticky_bit\n  world_writable = HOMEBREW_TEMP.stat.mode & 0777 == 0777\n  if world_writable && !HOMEBREW_TEMP.sticky? then <<-EOS.undent\n    #{HOMEBREW_TEMP} is world-writable but does not have the sticky bit set.\n    Please run `sudo chmod +t #{HOMEBREW_TEMP}` in your shell.\n  EOS\n  end\nend\nOr such.\n. You want either brew install homebrew/dupes/zlib or brew tap homebrew/dupes && brew install zlib.\n. As far as I understand it this won't work. See #447 and #435.\n. Just FWIW, you can actually disable that zlib link in OpenSSL.\nI've considered doing so quite a few times because compression can and has led to various security problems of not insignificant note such as the CRIME attack, Apple also tear out the default compression block with a patch in their OpenSSL, and Debian/Ubuntu/Fedora/etc have been passing no-zlib to configure for years.\nThe likelihood is that you'd need to force a rebuild of everything to be certain it doesn't break anything, which is why I haven't moved on it yet.\n. CRIME hasn't been the only compression attack. Compression is useful, especially for less capable hardware, but it is an attack vector of which OpenSSL already has plenty. Neither Debian/Ubuntu enable zlib at compile time or dynamically.\nI'm fairly sure Homebrew has only left it because it was added with the formula in 2009 and nobody has really bothered to look at it since, because OpenSSL compression isn't the most thrilling debate in the world. In an ideal world, it would just go away.\nIt's just something I haven't really wanted to dedicate a huge amount of energy into arguing with people about, so it keeps surviving until some terrible new vulnerability is discovered and everyone rushes to kill it off.\n. OpenSSL stuff tends to get referred back to me a fair bit, but if anyone else wants to comment, CC @Homebrew/owners @dunn.\nIt's not really on my immediate agenda, to be honest - Compression poses a threat in certain situations, but as we see all too often with OpenSSL in particular, outside of certain Linux distros people habitually favour the added functionality, even though that functionality can pose risks.\nTo some extent, package managers and distros have to take initiative on protecting their users. If people want a more vulnerable package they should be compiling it themselves, but winning that argument has never been easy or fun.\nSSLv3's death is my next significantly change, in line with Debian stable's removal of it several months ago now. That will probably be the last API break planned until at least 2016.\n. As an alternative though, if it saves you problems, you could vendor zlib into libexec and instead of dynamically linking against it actually compile OpenSSL against it manually. That would halt the immediate need for a cross-tap dependency on OpenSSL, and although revisioning OpenSSL may be prudent you wouldn't need to revision any of the dependencies.\n. Let us know if you need further help here, thanks!\n. Aye. I think @sjackman is away at the moment, but it should be done reasonably soon. Thanks for the submission though!\n. No worries. It just causes potential merge problems for Shaun when he re-syncs the repos, when merging the two repos is already not a fun task. I'll try and find out if anyone knows when Shaun is expected to be available again.\n. Is there anyone else who regularly helps with Linuxbrew, or has the knowledge & willingness to do so?\n. The formula should now complain if you try to build with an incompatible compiler.\n. From @tdsmith on September 27, 2015 20:36\nIf you're using Linuxbrew you should file against the Linuxbrew repository and include the terminal output you're seeing.\n. @sjackman We merged a fix for this upstream at Homebrew, so can close this whenever the repos are synced :)\n. The formula should now complain if you try to build with an incompatible compiler, which was very likely the problem here.\n. Please let us know if this is still an issue against an up-to-date brew, Thanks!\n. It might be worth trying brew install node --cc=gcc-5. There's known failure against some old GCCs but we haven't yet discovered the limits of that failure. Please do generate a gist-logs first though, per Alex's request.\n. The formula should now complain if you try to build with an incompatible compiler.\n. Should be resolved now, providing your brew is up-to-date.\n. Homebrew already chews up a more than reasonable amount of time that I have left after various chunks of life heh, but I might be able to stick my head in Linuxbrew and help with various simple issues. Dana is also welcome to ping my @ if there's something that needs merging quickly. Enjoy the time away Shaun :)\n. Nobody else has responded here so I took the nervous plunge and merged Dana's master branch into Linuxbrew/master, which brings Linuxbrew up to ~8 days ago in up-to-date-ness.\n\nPlease also push the branch danabrand/homebrew to linuxbrew/homebrew. It's a branch at the point that homebrew/master was merged.\n\nThis does not want to work for me locally, but at least the master is done.\n. Thanks Dana. Feel free to ping if you want to. I was trying to give it a bit to see if anyone who uses Linux on a more frequent basis wanted to handle this, but \u00af\\_(\u30c4)_/\u00af.\nI don't really have time to keep on top of Linuxbrew and I don't want to routinely become the person who gets pinged when something breaks, because most of the time my reaction is going to be a slightly confused look when it comes to Linux specific changes :smile:.\nI can handle occasional merges of branches here though, so if things are ready and tested and such let me know and I'll bite the bullet. Thank you again for the willingness to help out with this sort of thing.\n. How are things going @danabrand? No pressure intended - Know life gets busy and it's apparently just me and you doing Linuxbrew for a while.\n. @sjackman Hope the time away so far has been pleasant! :smiley:. Know getting away from FOSS for a bit can be a weight off one's shoulders.\n@danabrand No worries Dana. Whenever you have time. Things that pay the bills trump things which very much don't.\n. @danabrand Thanks Dana, you're a star. Merged into Linuxbrew and pushed. If anything broke we'll probably see issues and someone can look at it. Thank you again :)\n. Will merge your fork in again now. Apologies for the few hours delay.\n. > However, when testing, I noticed that all formulas using \"unneeded\" for a bottle, failed. At a closer look, the auto-merged formula.rb doesn't contain a \"def bottle_unneeded?\" line.\nIt sounds like the auto-merge dropped that line for some reason, maybe there's a conflict there or something. Can you diff between the merged formula.rb and the homebrew/homebrew formula.rb from the merge point?\n. @danabrand Depending how comfortable you are with it another potential rough hack is to use something like awk or sed to run through the formulae directory and remove any bottle :unneeded or bottle :disable lines temporarily.\n. @danabrand What's the breakage process out of curiosity? Does the entirety of Linuxbrew break if there are bottle :xyz lines detected or only when those specific formulae are invoked in some manner?\n. @danabrand Alright, that's manageable at least - I had in mind that homebrew/versions can be tapped by Linuxbrew users and there's a bunch of bottle :xyz in there these days, but as long as it's only going to die on certain formulae it's not too horrible a UX.\nThe new bottle :xyz DSL was added on October 19th in https://github.com/Homebrew/homebrew/pull/43935.\n. CC @xu-cheng in case he has ideas on why it wouldn't function for Linuxbrew specifically.\n. Yeah, I'll merge you into my VM later today and play with it a bit. May not be till mid-afternoon as have quite a busy day but will get around to it by the evening. Thank you Dana.\nDon't worry about not testing everything; It isn't humanly possible to test everything Homebrew tweaks on a weekly basis, let alone longer, without mainlining caffeine and not moving from your computer for a few days :smile:.\n. Seems to be okay. Merges cleanly, can run a brew update and brew upgrade on an outdated formula. Can run brew cleanup and brew prune to remove old versions without issue. Can execute commands on bottle :unneeded formulae. Can run brew audit and brew audit --strict --online fine. Can execute the brew command itself with no arguments with no errors. brew doctor runs without error. Same with brew config. brew tap works fine.\nThere's a slight merge conflict in test-bot on line 628 of your most recent commit, but I could fix that on pull.\nLooks pretty good to me Dana :).\n. Merged. Did a bit more testing locally, everything seems to work as expected, which probably means there's some edge case breakage we'll suddenly get flooded with :smile_cat:, but fingers crossed all is alright. Thanks again Dana. We owe you a :beer: some day for all the help here.\n. @danabrand We just get pouring rain in the UK :wink:. Hope the injury isn't too painful and you recover soon! \n. Welcome back @sjackman. No offence taken to doing it your way. Things got kind of complicated with merging and then having to revert the merge commits to avoid manually reverting 200+ commits. Linuxbrew has been a bit of a handful. I'm not really sure how you manage to keep on top of it to be honest, given you also contribute to at least the Science tap.\nDana was a complete godsend. Very little would have happened here without her doing the vast majority of the heavy lifting and I'm extraordinarily grateful to her for all the help. Dana, if you ever run into me somewhere, feel free to request a large drink of some description, I more than owe you one.\n. My gut feeling is that at the moment removing Linuxbrew from the Homebrew organisation doesn't solve an immediately glaring problem and to some degree would appear to peel back Linuxbrew's legitimacy; In many ways if we wanted Linuxbrew to be a separate organisation the time for that would have been at creation or very shortly after that point.\nThe situation obviously isn't perfect, we need firmer rules on what stays in Linuxbrew etc and what should be sent upstream, and we need to deal with whatever the Travis situation happens to be, but I'm inclined to try steps to resolve that and see how it pans out before we think big.\nI agree Linuxbrew is still more of a WIP than Homebrew, but that's easily enough explained in the README if there's people actively confused over the situation. Curious to know more on Travis.\n. > Have you considered how splitting off Linuxbrew would affect the other taps?\nExtensively.\n. I'm not even sure it's privately viewable any more to be honest; was in the team chat and it only logs so many messages and I never shut up to the point that I'm often only talking to myself.\nThere was a thorough discussion about taps. It is perhaps worth noting that I don't think there would be much code upheaval; what works now should continue working. My concerns as stated further up in this thread were more the messaging implications in how it would look.\nEither way, nothing's going to happen until Shaun is back and further discussions as needed can happen.\n. I guess I should say something, being both a Homebrew maintainer and the accidental maintainer-face of Linuxbrew for the last few months. I was also only beaten in commits across the entire Homebrew organisation last year by BrewTestBot (which isn't a fair fight), so I see a lot of what goes on.\nLinuxbrew is a useful project. It fills the niche, and there is one, of wanting the very latest and greatest software on Linux but not wanting to run an unstable distro, or not wanting to manually wget and ./configure every project on the planet which however much regular Linux users insist they love doing I'm convinced is just not true :smile_cat:.\nI think Linuxbrew has some real structural issues which need addressing, and I'm not sure how practical it is for Shaun to single-handedly manage that given has his own things in life which have to take priority over an open-source project such as family and education. I am highly sympathetic towards how much work Linuxbrew is, even without starting work on the kind of core changes the project needs going forwards.\nSome of these structural issues are small, like brew config being 50% useless on Linux, which is something that wouldn't necessarily be difficult to fix but nonetheless remains very OS X oriented and looks fairly bad in terms of UX. The more fundamental problem is the amount of code that is wrapped in if OS.mac? or if OS.linux? - Linuxbrew really needs its own core rather than trying to bend Homebrew's core to awkwardly fit, or we need to start working on core PRs to make it a better cross-platform experience by creating or switching to methods that work on both platforms, but without significantly worsening the experience for OS X users who are the primary use-case for Homebrew.\nThis leads me onto my next point, which is that there seems to be a lot of general interest in Linuxbrew but not a lot of interest actually helping maintain this ship and let it rig its own sails. To my knowledge, of everyone who offered to help, nobody who wasn't a core Homebrew maintainer or Dana contributed much in Shaun's absence. As far as I saw, 95% of the time everything was handled by @dunn, myself or Dana. I can understand maintainers elsewhere not having the time to contribute to Linuxbrew, and consequently think very strongly Linuxbrew needs its own team that just does Linuxbrew.\nThere is a lot of confusion as to who is responsible for this project. It does seem to be broadly believed that the core Homebrew team also manages the Linuxbrew project, and we also get a lot of Linux-exclusive issues reported to the core. We also get issues reported to the taps that we don't have the knowledge to fix or the fix is too hacky to merit doing, and it either sits broken or we nudge Shaun to help.\nI agree per the suggestions above it would perhaps be good for Linuxbrew to essentially start with a formula whitelist and slowly re-add formulae that are known to work. I also think it could be an exciting opportunity for Linuxbrew if moved to its own organisation to choose to stop supporting some Homebrew taps and merge that functionality into Linuxbrew core - It doesn't make sense that Linuxbrew needs a fair bit from homebrew/dupes because those things aren't dupes on Linux. That's another minor UX thing that feels unfinished and rough.\nI think any damage to Linuxbrew by moving it would be relatively minimal. There's an automatic redirect courtesy of Github, and we can update the links in the Homebrew core documentation that point to it. There's certainly no suggestion of booting Shaun himself out of the Homebrew organisation via his involvement in Science. I think there's a lot of opportunity here for Linuxbrew, as explored in detail above.\nI understand the desire to remain within Homebrew, but I don't think moving is the worst thing in the world and gives you a lot more freedom in a way to tear up the playbook and not have so many of these external pressures on you that come about as being part of \"official\" Homebrew. The concept of \"official\" Homebrew is a little outdated in the world where taps are so prominent and can be CI tested via Travis using the same brew test-bot command the core uses, to be honest.\nI wrote this over the space of the day on and off, so the tense and \"audience\" is all over the place. Hopefully it somewhat makes sense. I probably won't comment a huge amount beyond this.\n. brew doctor tells you how to fix this.\n. Resolved the libcurl issue. Can you open a new issue for the libuuid problem with some logs on that if still reproducing? Thanks.\n. Welp. This is punishment from somewhere for me not having a Linux box set up at the moment I'm sure. Let me just spin up a VM to check the proposed fix.\n. No dice with purely the proposed fix either. It lets brew be executed but:\nbrew install xz\nError: uninitialized constant Checks::MacOS\n. Will check. If that doesn't work may have to look at reverting the last two merges to buy us some time to actually work on this rather than running around screaming. Maybe it's just me running around screaming :wink:.\n. No dice. You can't actually require \"os/linux\" because it's a directory. Would have to require \"os/linux/hardware\", which doesn't fix the issue apparently.\n. Just checking a hunch first. If the hunch is right, great. If not, will go on a reverting merge commits spree.\n. Revert done. The error is being thrown from the doctor command as noted by @saketkc. Wondering if the error resides in there and chunks of things need to be wrapped in if OS.mac? logic in Linuxbrew :confused:.\n. If brew update doesn't work you'll need to run:\nbash\ngit fetch && git reset --hard origin/master\nInside your Linuxbrew install to get brew functional again. Hopefully not many people updated over the last few hours. Sorry about this folks.\n. No worries. These things happen Dana. Most of the Homebrew maintainers have broken Homebrew dramatically at least once, so you're not alone heh.\n. Should be resolved.\n. If brew update doesn't work you'll need to run:\nbash\ngit fetch && git reset --hard origin/master\nInside your Linuxbrew install to get brew functional again. Hopefully not many people updated over the last few hours. Sorry about this folks.\n. Working on it. Please track https://github.com/Homebrew/linuxbrew/issues/648, Thanks.\n. If brew update doesn't work you'll need to run:\nbash\ngit fetch && git reset --hard origin/master\nInside your Linuxbrew install to get brew functional again. Hopefully not many people updated over the last few hours. Sorry about this folks.\n. Working on it. Please track https://github.com/Homebrew/linuxbrew/issues/648, Thanks.\n. If brew update doesn't work you'll need to run:\nbash\ngit fetch && git reset --hard origin/master\nInside your Linuxbrew install to get brew functional again. Hopefully not many people updated over the last few hours. Sorry about this folks.\n. Working on it. Please track https://github.com/Homebrew/linuxbrew/issues/648, Thanks.\n. If brew update doesn't work you'll need to run:\nbash\ngit fetch && git reset --hard origin/master\nInside your Linuxbrew install to get brew functional again. Hopefully not many people updated over the last few hours. Sorry about this folks.\n. We merged an update the other day containing this, but had to revert because it basically broke Linuxbrew for everyone. I believe Dana is investigating, but yeah, updates are slower than usual at the moment due to Shaun's absence.\n. Linuxbrew essentially needs another (even temporary) maintainer who both uses Linux regularly and is rich enough to spend hours debugging issues on a regular basis for no financial reward. The joys of FOSS :smile_cat:.\nConsidering we have 9 core maintainers to keep on top of everything, and Linuxbrew has Shaun, it's easy to see why things get stretched.\n. Thanks @danabrand, once again. Sorry so much of this has fallen on you exclusively, really do appreciate the amount of pressure that is. I have a Linuxbrew Debian VM set up, so if anyone needs access let me know.\n@tseemann You won't have broken things for users, but Dana may have to resolve a merge conflict on that since it's now a permanent part of the git history. Users will probably appreciate the update since libpng had a security vuln.\n. Has been updated with @tseemann's commit.\n. It should be resolved now with the latest merge from testing. Let us know otherwise, Thanks.\n. We're working on getting the repos synced up again. Shaun, who is Linuxbrew's maintainer, has been away so things have slowed a bit. We have a brilliant volunteer called Dana working on getting a merge done. Just bear with us a little bit longer and we'll have it synced.\n. Apologies, I missed the fact you'd filed a PR for this and committed the fix in https://github.com/Homebrew/linuxbrew/commit/b82c4cf21c9a9e70511babfc8c03dad932fce6c1.\nFeel free to open an issue for the Boost problem. Thanks for doing some debugging on the errors here, appreciate that!\n. Welp. Looks like the stuff we had to revert a couple weeks ago didn't then get dragged in with the new merge @danabrand. Any thoughts on that? Maybe we could try reverting the reverted merges, if we've addressed the os/mac issue we encountered there.\n. Shaun is back now and working on sorting Linuxbrew out. I am thankfully back to \"only\" maintaining Homebrew, heh.\n. Related to this possibly: https://github.com/Homebrew/homebrew/issues/39864\n. I thought keg_only was ignored for Linuxbrew anyway? @sjackman \n. What do you see, specifically? Linux shouldn't even be reading provided_pre_mountain_lion because Mountain Lion is definitely not a Linux distro release :sweat_smile:.\n. Your Linuxbrew seems to be quite out of date. Please try brew update.\n. Was fixed upstream earlier today FWIW :)\n. I'm not strongly involved with Linuxbrew and ultimately this is Shaun's call but I am deeply uncomfortable with anything involving SSLv2 going near OpenSSL in 2016. It was killed from Homebrew for a reason.\n. My feeling is that Homebrew (and its sister fork) should take the same stance as modern Debian distros do and tell people who need a worryingly insecure OpenSSL to build it themselves, but I tend to take a harder line on this than others.\n. My concern is that people will do what people tend to do which is to find suggestions online which say \"Hey, to solve this problem build OpenSSL with-ssl2 in Linuxbrew\" and go \"Huh, sure, sounds good\" without knowing the potential consequences. We've seen plenty of that sort of behaviour be problematic elsewhere.\n. That should land in Homebrew when OpenSSL 1.1.0 does.\nI decided to bundle all the API breaks (OpenSSL 1.1.0, SSLv3 removal, zlib-support removal) into an alarmingly big PR when the time comes because each will require almost everything to be rebuilt, so doing them separately would get annoying for people quickly :smile:.\n. ",
    "haidarvm": "thanks it's almost worked\nnow i got this error \nconfigure: error: in/home/haiarch/tmp/isl20150608-17992-9ml488/isl-0.14.1':\nconfigure: error: C++ preprocessor \"/lib/cpp\" fails sanity check\nSee config.log' for more details\n. ok i did \nhttps://gist.github.com/anonymous/7c4d9bc18fd70cdbbce4\n. now i got this\n^[[6;7~Makefile:20406: recipe for target 'stage1-bubble' failed\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory '/tmp/gcc20150609-24602-11484od/gcc-5.1.0/build'\nMakefile:20726: recipe for target 'bootstrap' failed\nmake: *** [bootstrap] Error 2\n. ",
    "fr4ngus": "Yes, thank you !\n. ",
    "marcelocarmona": "Great!, yes it's the same library that in https://github.com/Homebrew/linuxbrew/issues/288\nreadline is provided by libedit\n  Works !!!\n. ",
    "hughperkins": "But... I think the Formula for mysql should somehow contain the correct dependencies?\n. Hmmm, on my browser, it shows 'libedit', not 'homebrew/dupes/libedit', see screenshot:\n\nAnd, more concretely, installing mysql fails, with error about missing dependency libedit.  I have to brew install homebrew/dupes/libedit by hand, in order for mysql to install correctly.\n. Thanks! :-)\n. Setting HOMEBREW_CC=gcc-4.8 didnt work for me.   Gave me things like 'Invalid value for HOMEBREW_CC: /usr/bin/gcc-4.8'\nWhat I did in the end was insert into line 177 of Library/Homebrew/extend/ENV/shared.rb return 'gcc-4.8'. This works ok :-)\n. $ brew install --cc=gcc-4.8 mysql\nError: Homebrew GCC requested, but formula gcc48 not found!\n. $ HOMEBREW_CC=gcc-4.8 brew install mysql\nError: Homebrew GCC requested, but formula gcc48 not found!\n. Looks like that fixed it!  Thanks! :-)\n. cool. Thanks! :-)\n. ",
    "ddelazerda": "Thanks for the quick response!\n. ",
    "Sterbic": "```\n$ brew list --versions gcc patchelf bwa\ngcc 4.9.2\npatchelf 0.8\nbwa 0.7.12\n$ ldd which bwa\n    linux-vdso.so.1 (0x00007ffeb87fe000)\n    libm.so.6 => /share/linuxbrew/.linuxbrew/lib/libm.so.6 (0x00007f27cebf1000)\n    libz.so.1 => /share/linuxbrew/.linuxbrew/lib/libz.so.1 (0x00007f27ce9de000)\n    libpthread.so.0 => /share/linuxbrew/.linuxbrew/lib/libpthread.so.0 (0x00007f27ce7c2000)\n    librt.so.1 => /share/linuxbrew/.linuxbrew/lib/librt.so.1 (0x00007f27ce5ba000)\n    libc.so.6 => /share/linuxbrew/.linuxbrew/lib/libc.so.6 (0x00007f27ce242000)\n    /share/linuxbrew/.linuxbrew/opt/glibc/lib/ld-linux-x86-64.so.2 (0x00007f27ceee2000)\n$ ls -l brew --prefix/lib/libgcc_s.so.1\nlrwxrwxrwx 1 - - 37 Lip 11 19:55 /share/linuxbrew/.linuxbrew/lib/libgcc_s.so.1 -> ../Cellar/gcc/4.9.2/lib/libgcc_s.so.1\n$ ls -l brew --prefix gcc/lib/libgcc_s.so.1\n-rwxr-xrwx 1 - - 387124 Lip 11 16:48 /share/linuxbrew/.linuxbrew/opt/gcc/lib/libgcc_s.so.1\n```\nInstalling from source did fix the issue.\nI also tried the following:\n1. install gcc-4.9 standalone deps\n2. install gcc-4.9 standalone through the fixes that are still in the pull request #200 \n3. complete standalone installation\n4. checkout master branch\n5. brew pin gcc, as gcc-5 installation fails\n6. brew update and braw tap homebrew/science\n7. brew install bwa\nbrew install bwa\n==> Installing bwa from homebrew/homebrew-science\n==> Downloading https://linuxbrew.bintray.com/bottles-science/bwa-0.7.12.x86_64_\n==> Pouring bwa-0.7.12.x86_64_linux.bottle.tar.gz\nError: undefined method `prepend_path' for #<Object:0x0000000194fee8>\nWarning: Bottle installation failed: building from source.\n==> Downloading https://downloads.sf.net/project/bio-bwa/bwa-0.7.12.tar.bz2\n...\n. It's not listed as a dependency of libpthread.so.0 either.\nbash\n$ ldd /share/linuxbrew/.linuxbrew/lib/libpthread.so.0\n    linux-vdso.so.1 (0x00007ffcc01ab000)\n    libc.so.6 => /share/linuxbrew/.linuxbrew/Cellar/glibc/2.19/lib/libc.so.6 (0x00007f123f0ae000)\n    /share/linuxbrew/.linuxbrew/Cellar/glibc/2.19/lib/ld-linux-x86-64.so.2 (0x00007f123f426000)\nSame result when using readelf. Quite strange...\nbash\n$ readelf -d /share/linuxbrew/.linuxbrew/lib/libpthread.so.0 | grep NEEDED\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n 0x0000000000000001 (NEEDED)             Shared library: [ld-linux-x86-64.so.2]\n. ",
    "benkonrath": "I'm having a similar problem trying to install watchman on Scientific Linux 7 (RHEL 7 clone). I'm actually surprised that I would have to build gcc. Is it just that gcc isn't being found or do I have the wrong version of gcc? \nHere's some debugging information:\n% brew install watchman\n==> Installing dependencies for watchman: xz, homebrew/dupes/m4, autoconf\n==> Installing watchman dependency: xz\nError: xz cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n% brew install gcc     \n==> Installing dependencies for gcc: zlib, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: zlib\nError: zlib cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n% which -a gcc\n/usr/bin/gcc\n/bin/gcc\n% gcc --version\ngcc (GCC) 4.8.3 20140911 (Red Hat 4.8.3-9)\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n% brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: \"config\" scripts exist outside your system or Homebrew directories.\n./configure scripts often look for *-config scripts to determine if\nsoftware packages are installed, and what additional flags to use when\ncompiling and linking.\nHaving additional scripts in your path can confuse software installed via\nHomebrew if the config script overrides a system or Homebrew provided\nscript of the same name. We found the following \"config\" scripts:\n/bin/pkg-config\n  /bin/brltty-config\n  /bin/firewall-config\n  /bin/python-config\n  /bin/python2-config\n  /bin/python2.7-config\n  /bin/libusb-config\n  /bin/gphoto2-config\n  /bin/gphoto2-port-config\n  /bin/pcre-config\n  /bin/curl-config\n  /bin/icu-config\n  /bin/freetype-config\n  /bin/libgnutls-config\n  /bin/libpng-config\n  /bin/libpng15-config\n  /bin/rarian-sk-config\n  /bin/scrollkeeper-config\n  /bin/xml2-config\n  /bin/gpg-error-config\n  /bin/krb5-config\n  /bin/dvdread-config\n  /bin/xslt-config\n  /bin/sdl-config\n  /bin/taglib-config\n  /bin/libgcrypt-config\n  /bin/kde4-config\n  /bin/ncurses5-config\n  /bin/ncursesw5-config\n  /bin/mingw32-pkg-config\n```\n. @sjackman Thanks, I missed that document. It's working now. Maybe it would make sense to install those symlinks automatically during the original install. Just a suggestion though. Thanks again for your help.\n. ",
    "UnsungHero97": "Here's what I got:\nhristo@test:~$ brew install zlib\nError: No available formula for zlib \nSearching formulae...\nlzlib\nSearching taps...\nhomebrew/dupes/zlib\n. nice! that worked. thanks!\n. ",
    "dspstudio": "Now it works. Thanks.\nMy linux box is: Linux localhost.com 3.2.0-23-generic #36-Ubuntu SMP Tue Apr 10 20:39:51 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n. ",
    "adamliter": "I think https://github.com/adamliter/homebrew/commit/0d8131b42be60141b0f33665788fa430096bc589 should fix the problem. I can test it on a virtual Linux machine when I get home later today to make sure. But the code should work.\nShould this be submitted as a pull request to Hombrew/homebrew, though, or to Homebrew/linuxbrew? Like I said, I'm not sure what the policies are with respect to the maintenance of formulas across Homebrew and Linuxbrew.\n. I just tested this on a virtual linux machine (Ubuntu 14.2), and it seems to work.\n. @sjackman Yes, the tarball has been fixed, but the maintainer doesn't want to do a new release just for this fix, and it's unclear when the next version will actually be released. Probably not anytime all that soon.\nAs it stands, if somebody runs brew install bib-tool with Linuxbrew, they will get:\n```\n==> Downloading http://www.gerd-neugebauer.de/software/TeX/BibTool/BibTool-2.60.\n############################################################ 100.0%\ntar: invalid option -- 'q'\nTry 'tar --help' or 'tar --usage' for more information.\nError: Failure while executing: tar xqf /home/USERNAME/.cache/Homebrew/bib-tool-2.60.tar.gz BibTool/doc/bibtool.tex\n```\nThis is my fault for not thinking about this when I fixed the problem with the workaround in https://github.com/Homebrew/homebrew/commit/bab2916f7afe8aede0ae2e188018fcb529f760f2. The workaround there only works with bsdtar, which is why that error is thrown when you try to install with Linuxbrew.\nI agree that this should be fixed by the maintainer, and it's unfortunate that he won't do a new release to fix the tarball, but it might be better to fix the issue now in case anyone does try to install BibTool with Linuxbrew in the meantime while we wait for the next release of BibTool.\nBut, if you still want to wait, I understand.\n. Okay, thanks @sjackman ! So I should move the if statement and then should I submit the pull request to Homebrew/hombrew or Homebrew/linuxbrew? Or were you going to do both of those things?\n. I did what you suggested in https://github.com/adamliter/homebrew/commit/7d298c83ff29ccf5d3c9954a536a7564150a8a7d. Should I open a pull request to Homebrew/homebrew?\n. @sjackman I just opened the pull request. Thanks for the comments and suggestions on the commit.\n. No problem! Sorry that I didn't think of this initially when I opened the pull request with the weird workaround for the problematic tarball.\n. Yes, hopefully it won't be a problem after the next release.\n. ",
    "phorust": "Installing git without tcl-tk support did the trick, and I moved on to the next step of the Standalone Installation, and now I'm having trouble with brew install coreutils:\n``\n==> Downloading http://ftpmirror.gnu.org/coreutils/coreutils-8.23.tar.xz\nAlready downloaded: /home/phorust/.cache/Homebrew/coreutils-8.23.tar.xz\n==> Patching\npatching file Makefile.in\n==> ./configure --prefix=/home/phorust/.linuxbrew/Cellar/coreutils/8.23_1 --program-prefix=g --without-gmp\n==> make install\nmake[2]: *** [man/cp.1] Error 127\nmake[2]: Leaving directory/tmp/coreutils20150701-270170-1ozqv4/coreutils-8.23'\nmake[1]:  [install-recursive] Error 1\nmake[1]: Leaving directory `/tmp/coreutils20150701-270170-1ozqv4/coreutils-8.23'\nmake:  [install] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\n. Similar problems to above where the proxy env vars aren't being used:\n~  \u279c https_proxy=http://proxyout:8080 brew gist-logs coreutils\n22:47:03 libtsocks(540725): Error 101 attempting to connect to SOCKS server (Network is unreachable)\nError: Network is unreachable - connect(2) for \"api.github.com\" port 443\nI have http_proxy, HTTP_PROXY, https_proxy, and HTTPS_PROXY all set to http://proxyout:8080\nI can post gists of ~/.cache/Homebrew/logs/coreutils if you'd like\n. ",
    "bfontaine": "Are you using Linuxbrew?\n. From @rtuider on July 7, 2015 13:7\nYes.\nI followed this instructions: https://github.com/Homebrew/linuxbrew/blob/master/README.md\n. I won\u2019t actively block; I don\u2019t think it\u2019ll harm Linuxbrew to move under its own organization. Homebrew-Cask is under its own and AFAIK they\u2019re doing great. You\u2019ll have more control and will be able to create taps dedicated to Linuxbrew; something that\u2019s hardly possible under the current org without causing confusion. If you want to use Travis you\u2019ll also get more workers because right now you have to share them with all Homebrew repos.\n. ",
    "rtuider": "Awesome... thanks. This works.\n. ",
    "tiikeri": "@Mikaela Added your request to the PR.\n. @xu-cheng This typo was already corrected in homebrew/Homebrew.\n. ",
    "andrewjpage": "It appears to have been introduced 2 days ago by this commit (I did a checkout and install on a clean VM)  https://github.com/Homebrew/linuxbrew/commit/b83eb23d7f177a965a92632da41d699c2371edc9\nI'm new to this codebase so not sure about the cleanest way to fix it.\n. I just set everything to be writable (so not a proper solution at all), then reran the end of the install (which then worked):\nchmod +w /home/vagrant/.linuxbrew/Cellar/python3/3.4.3_1/bin/*\nbrew postinstall python3\nIt occurs on a fresh install of CentOS 6.6 & 7.0, and Ubuntu Trusty.\n. Thanks for getting to the bottom of it so quickly. Andrew\n. The errors are:\nchecking for flex... no\nchecking for lex... no\nconfigure: error: flex not found but required\nand \nchecking for bison... no\nconfigure: error: bison not found but required\n. ",
    "fuzzy76": "I'm guessing this is a duplicate of #230 \n. ",
    "schmurfy": "thanks it worked, for some reason though if I don't use --force-bottle it builds directly from source, is that the intended behavior ?\n. it looks like the environment variable also works, I was doing my tests on two machines and the one I was trying to install on had a recipe without the bottle block, my bad :x\nthe default behavior of not checking for a bottle stills holds though, on mac os x the client seems to check for a bottle before doing anything else and this does not appear to be how linuxbrew works.\nThis is not a big issue but I am curious :p\n. ah ok, so the default in linuxbrew is indeed to go with compilation since binaries may not work on every linux installations, is that it ?\nThis is indeed an annoying problem, for my use I can go with always adding --force-bottle so i should be fine.\nI love this project, I always hated most if not all package managers of linux distributions which make hard if not impossible to work with recent software versions (ubuntu/debian package manager is probably the worst in my opinion), and since the packages are overly complex to build doing yours is also a pain xD\nWe ended up compiling everything from sources and linuxbrew is a painless way to have a really nice package manager (we already use homebrew on our macs) which also allow us to easily create binary package of the software we use.\nThe reason for my initial question is that standard package won't fit the way we setup/install things so I chose to basically remove all the recipes and start for scratch, by extension we also need our own bottle server and it is currently working great.\n(compiling from source is nice with a small number of servers, not so great when the number grows)\n. I want to migrate a \"home brewed\" deployment system to linuxbrew at least for the package management parts, currently the way it works is by running bash commands on the remote host and essentially compiling and installing software the basic way (./configure && make && make install) with a test before that to see if it is already installed and the version is the one we want.\nWhile it works this is not ideal and does not allow easily for binary package creation/install.\nThese are not big diffrences but since linuxbrew/homebrew makes it really easy to use our own recipes I will just selectively add more as we need them and customize them if need be (using the \"official\" recipe as a start).\nHere are some specific needs that I plan to address in our recipes:\n- patches: a few application we use are patched, some patches are being integrated upstream but others very specific will never be and we need to support that.\n- daemons runner: we use daemontools and if I find a clean way the recipes will install the daemons as services which I can probably do via symlinking.\n- version control: i want complete control on which version of what is installed, that's actually one of the grief I have against other package managers, in a perfect world changing a minor revision should be ok but in reality I would never do that in production without making sure it works as expected on a test server.\nI am sure I will find more as I start implementing recipes, I really like the fact that the framework does not make many assumptions and for examples can be installed in any prefix, there are other advantages to the way linuxbrew works for me:\n- no scattered files all around the file system, if I want to uninstall a version a simple rm -rf will get rid of everything\n- no database, they can get corrupted and might be slow to deal with where a simple ls -l on the Cellar folder will tell me what is installed with linuxbrew :p \n- no forest of tools: apt is a great example of this (apt, dpkg, apt-cache, ...), brew has a lot of commands but at least there is only one entry point (and I don't think I ever used more then 3/4 anyway)\nAnd last but not least: no hard dependency on a specific OS (even if it targets OS X and linux primarly), I plan to give it a try on Illumos and OpenBSD see if it can works, having one package manager for all the systems we use would be pretty awesome and greatly simplify things :)\npkgsrc was the only other package management system that was a candidates for our needs but it is nowhere near as easy to use as linuxbrew, ruby really helps there.\ndifferent Oses have their pros and cons and I don't see myself using Linux for everything, if you need complex routing for example OpenBSD with packet filter is really good.\n. For now I am just playing with it see if it fits our needs, while I don't think it makes sense to have the whole repo here I will surely create pull requests for features that may be used by someone else if I have to modify the core files, a good example would be other OS support, is it an area where pull requests would be accepted ? (it is called linuxbrew after all ;) )\nAlso how homebrew/linuxbrew works together, are the two codebase sharing anything ? is there any plan to replace homebrew with linuxbrew since as far a I can tell linuxbrew supports both OS X and Linux ?\n. if a deprecation happens at some point I feel like Homebrew would be the name to keep, Linuxbrew might convey the wrong assumption than it only works for Linux :)\n. That's what I thought before asking but is a there a specific reason for this ?\n. ah ok xD\n. is there a way to inverse the behavior so that by default it uses bottles if available and a flag would force to build from sources ?\n. shall we reopen this one ?^^\n. what was changed in linuxbrew to make \"build from source\" as the default ?\nKnowing that I might be able to reverse it.\n. ok I found my issue, I was impressed that the path where homebrew is installed was not hardcoded which is really helpful in non standard case except that there is still at least one place where it is hardcoded: the default cellar for bottles.\nMy Homebrew is not using /usr/local (I wanted to keep what I install separated from the Ubuntu stuff) and when doing a brew install xxx homebrew checked if the cellar was the default one and stopped there triggering a build from source.\nIf I am the only who ever asked for --force-bottle to be passed to dependencies installs I think this issue can be closed as I no longer need it.\n. I am lost :o \nI don't understand what linuxbrew is trying to do but it is playing against me, with my hack above the result is correctly using the keg only libcurl but if I bottle it, uninstall it and reinstall it from the bottle (on the same machine) the library used is now the system curl and and ldd shows that my custom change is gone :(\nPS: I am using the libc which came with ubuntu (14.04), not glibc.\n. thanks this is what I thought.\n. What I did is add the linuxbrew lib path to my system library paths so there is no need to specifically point to it and then set the rpath to the locations of keg only libraries. For me it does the job pretty well.\n. even with the existing code why not set the rpath to include the linuxbrew lib folder and all the keg_only library paths ?\nI have a working code that does that, if that's something you are interested to merge I can try to make a pull request out of it.\n. I am using them in a similar way to homebrew itself, I take a base ubuntu server os and then our applications on it but I always disliked dependending on what comes with ubuntu since I have little to no control on which versions are available. Until now we simply used what came with the os to build upon, this means things like libcurl which are used by many base packages, but now with linuxbrew I should be able to take full control on what we actually use.\nSince I have the linuxbrew lib folder in the system path I would end up using any library installed there even with system applications which would probably a lot of things.\nI suppose not having the linuxbrew lib path in the system path shield you from that, I have to think why I wanted to add it in the system path I suppose xD\n. ",
    "cojok": "Nope I have the path in ~/.bashrc exactly as it is on the home page as you sad, but nothing changed... do you have any other suggestion?\n. Just reinstalled the linuxbrew and now it works with this path yougave me thnx a lot :)\n. ",
    "toebbel": "I see \"Error: No logs\". Tried to re-run the install but still \"no logs\".\nOn Mon, Jul 13, 2015 at 8:14 PM Shaun Jackman notifications@github.com\nwrote:\n\nPlease report brew gist-logs gcc\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/issues/479#issuecomment-121011154.\n. \n",
    "puppe": "Yeah, that does the trick.\nBy the way, thank you very much for your work on linuxbrew! It certainly makes my life easier at the university computer lab.\n. Duplicate of #482 \n. ",
    "ablyler": "@sjackman is it possible to add absolute formula pathing support to linuxbrew?  I just did a quick search and there are a lot of packages in the homebrew core that also have this type of pathing.\n. ",
    "felixbuenemann": "@DomT4 CRIME can only be used against certain protocols that echo back information injected through a client, so ssl compression is still useful for many protocols like SSH, SMTP or Postgres replication. The better solution is IMHO to disable ssl compression in http servers and clients by default, then to deactivate it for all ssl apps.\n. ",
    "1ne": "Have been struggling with this when using a non-bottled version of curl with the following options. The only workaround I got was to work is to run brew install curl before I run this. It feels like a patchwork, not a solution. \n~ \u276f\u276f\u276f brew install curl --with-c-ares  --with-libmetalink --with-libssh2 --with-nghttp2 --with-rtmpdump\nError: curl contains a recursive dependency on itself:\n  curl depends on cmake\n  cmake depends on curl\n  curl depends on doxygen\n  doxygen depends on curl\n  curl depends on libevent\n  libevent depends on curl\n  curl depends on spdylay\n  spdylay depends on curl\n  curl depends on nghttp2\n  nghttp2 depends on curl. ",
    "amenk": "Thanks. I just found that myself :) And it worked.\nWhat is the issue exactly?\nAnother one: --HEAD is not working. It can not find the SVN URL. Looks like the project switched to git:\nhttp://www2.aquamaniac.de/sites/download/index.php\n. Should I remove the cocoa from the linux brew formular as well?\n. It seems to have a problem with the git url:\n```\n$ brew install --HEAD gwenhywfar\n==> Downloading http://git.aqbanking.de/git/gwenhywfar\ncurl: (22) The requested URL returned error: 404 Not Found\nError: Failed to download resource \"gwenhywfar\"\nDownload failed: http://git.aqbanking.de/git/gwenhywfar\n```\n. Okay, I used a conditional. I made a PR.\n. ",
    "sublimino": "I get exit code 0 from brew audit --strict kubernetes-cli, but the brew tests suite also fails for me before and after this change so it's probably something local. Could you paste the output if I need to see it please?\n. ",
    "johnjohndoe": "I found three files in the folder. They contain multiple FAIL statements and errors. Can you take a look at them please?\n. Can you please point me to the full path where I can find test/test-suite.log, once again?\n. I found the statements 02.make but I could not locate test-suite.log on the server. \n. Thanks. It worked. I needed to copy the file to another folder when the process is paused. After it is removed. Here you can find test-suite.log.\n. Prepending LD_LIBRARY_PATH also fails with the error message I posted initially. Then --without-check finished without errors. But when I try to install PostGIS afterwards this fails again:\n```\n$ brew install postgis\n==> Installing dependencies for postgis: gdal, cmake, bzip2, boost, gmp, mpfr, cgal, sfcgal\n==> Installing postgis dependency: gdal\n==> Downloading http://download.osgeo.org/gdal/1.11.2/gdal-1.11.2.tar.gz\n################################################################## 100,0%\n==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2 \\\n  --mandir=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2/share/man --with-local=/home/styrax\n==> make\n==> make install\n==> python setup.py install --prefix=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2 \\\n  --record=installed.txt --single-version-externally-managed\ncreating build/temp.linux-x86_64-2.6/extensions\n/home/styrax/.linuxbrew/bin/gcc-4.9 -fno-strict-aliasing -O2 -g -pipe \\\n  -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 \\\n  -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe \\\n  -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 \\\n  -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -Os -w -pipe -march=core2 \\\n  -I/home/styrax/.linuxbrew/opt/sqlite/include -arch x86_64 \\\n  -I/home/styrax/.linuxbrew/opt/liblwgeom/include -isystem/home/styrax/.linuxbrew/include \\\n  -fPIC -I../../port -I../../gcore -I../../alg -I../../ogr/ -I/usr/include/python2.6 \\\n  -I. -I/tmp/gdal20150725-6725-15yupz2/gdal-1.11.2/include -c extensions/gdal_wrap.cpp \\\n  -o build/temp.linux-x86_64-2.6/extensions/gdal_wrap.o\ngcc-4.9: error: x86_64: No such file or directory\ngcc-4.9: error: unrecognized command line option \u2018-arch\u2019\nerror: command '/home/styrax/.linuxbrew/bin/gcc-4.9' failed with exit status 1\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\ngdal 1.11.2 on OS X 10.6 (https://github.com/Homebrew/homebrew/issues/42056)\nLatest update to poppler, 0.34.0 breaks gdal --with-complete (https://github.com/Homebrew/homebrew/issues/42031)\ngdal --with-python always installs numpy into prefix (https://github.com/Homebrew/homebrew/issues/36744)\n``\n. I applied your patch to/home/styrax/.linuxbrew/Library/Formula/gdal.rband then executedbrew install gdal. This triggered the installation oflibspatialitewhich **fails** as before.\nIs the modified Formula used by default or do I have to explicitly reference it?\n. Same error. Are you sure aboutend if OS.mac?- you kind of disabling theendfor theelseclause ...\n. Ah thanks for the clarification. - I removed the lines and tried again. [**Same error**](https://github.com/Homebrew/linuxbrew/issues/493#issue-96536375) though.\n.libspatialite` fails. Same error as here.\n. > But when I try to install PostGIS afterwards this fails again\n. Here is what I tried step by step:\n1. Install libspatialite without checks\n```\n   $ brew install libspatialite --without-check\n   ==> Downloading https://www.gaia-gis.it/gaia-sins/libspatialite-4.3.0.tar.gz\n   Already downloaded: /home/styrax/.cache/Homebrew/libspatialite-4.3.0.tar.gz\n   ==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/libspatialite/4.3.0 --with-sysroot=/home/styrax/.linuxbrew --enable-geocallbacks --enable-lwgeom=yes\n   ==> make install\n   ==> Caveats\n==> Summary\n   /home/styrax/.linuxbrew/Cellar/libspatialite/4.3.0: 28 files, 25M, built in 78 seconds\n   ```\n2. Install gdal with the modified Formula\n```\n   $ brew install gdal\n   Warning: Formula file is modified!\n   Building from source because Library/Formula/gdal.rb has local changes\n   To install from a bottle instead, run with --force-bottle\n   ==> Downloading http://download.osgeo.org/gdal/1.11.2/gdal-1.11.2.tar.gz\n   Already downloaded: /home/styrax/.cache/Homebrew/gdal-1.11.2.tar.gz\n   ==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2 --mandir=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2/share/man --with-local=/home/styrax\n   ==> make\n   ==> make install\n   ==> python setup.py install --prefix=/home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2 --record=installed.txt --single-version-externally-managed\n   ==> make install-man\n   ==> Caveats\n==> Summary\n   /home/styrax/.linuxbrew/Cellar/gdal/1.11.2_2: 208 files, 37M, built in 2.9 minutes\n   ```\n3. Install postgis\n```\n   $ brew install postgis\n   ==> Installing dependencies for postgis: cmake, bzip2, boost, gmp, mpfr, cgal, sfcgal\n   ==> Installing postgis dependency: cmake\n   ==> Downloading http://www.cmake.org/files/v3.2/cmake-3.2.3.tar.gz\n   ######################################################################## 100,0%\n   ==> Downloading https://github.com/Kitware/CMake/commit/2ecf168f1909.diff\n   ######################################################################## 100,0%\n   ==> Patching\n   patching file Auxiliary/bash-completion/cmake\n   patching file Auxiliary/bash-completion/cpack\n   patching file Auxiliary/bash-completion/ctest\n   ==> Downloading https://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.2.3.tar.gz\n   ######################################################################## 100,0%\n   ==> python -c import setuptools... --no-user-cfg install --prefix=/tmp/cmake20150730-4965-qushfl/cmake-3.2.3/sphinx --single-version-externally-managed --recor\n      or: -c --help [cmd1 cmd2 ...]\n      or: -c --help-commands\n      or: -c cmd --help\nerror: option --no-user-cfg not recognized\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\n   Bash completion installed from cmake bottle gives errors for new terminal sessions https://github.com/Homebrew/homebrew/issues/39083\n   cmake builds fail on CLT-only with --env=std https://github.com/Homebrew/homebrew/issues/29101\n   ```\nSo now it is cmake which fails.\n. $ cat /etc/redhat-release\nCentOS release 6.6 (Final)\n$ python --version\nPython 2.6.6\n. I successfully installed python via brew:\n$ python --version\nPython 2.7.10\nBut cmake refuses to install:\n``\n$ brew install cmake --without-docs\n==> Downloading http://www.cmake.org/files/v3.2/cmake-3.2.3.tar.gz\nAlready downloaded: /home/styrax/.cache/Homebrew/cmake-3.2.3.tar.gz\n==> Downloading https://github.com/Kitware/CMake/commit/2ecf168f1909.diff\nAlready downloaded: /home/styrax/.cache/Homebrew/cmake--patch-d3f8cd71d0b6ce23a22c55145114012da916f2e42af71cbbad35090d0aeb4f68.diff\n==> Patching\npatching file Auxiliary/bash-completion/cmake\npatching file Auxiliary/bash-completion/cpack\npatching file Auxiliary/bash-completion/ctest\n==> ./bootstrap --prefix=/home/styrax/.linuxbrew/Cellar/cmake/3.2.3 --no-system-libs --parallel=12 --datadir=/share/cmake --docdir=/share/doc/cmake --mandir=/s\n/tmp/cmake20150731-10070-1253tmz/cmake-3.2.3/Bootstrap.cmk/cmake: /usr/lib64/libstdc++.so.6: versionGLIBCXX_3.4.15' not found (required by /tmp/cmake20150731-10070-1253tmz/cmake-3.2.3/Bootstrap.cmk/cmake)\n\nError when bootstrapping CMake:\nProblem while running initial CMake\n\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nBash completion installed from cmake bottle gives errors for new terminal sessions https://github.com/Homebrew/homebrew/issues/39083\ncmake builds fail on CLT-only with --env=std https://github.com/Homebrew/homebrew/issues/29101\n. bash\n$ which -a gcc\n/usr/bin/gcc\n$ brew --prefix/bin/gcc --version\n-bash: /home/styrax/.linuxbrew/bin/gcc: No such file or directory\n.\n$ ls /usr/bin/g++ /usr/local/bin/g++\nls: cannot access /usr/local/bin/g++*: No such file or directory\n/usr/bin/g++\n```\n$ /usr/bin/gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n$ brew install gcc\n==> Installing dependencies for gcc: gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: gmp\n==> Downloading http://ftpmirror.gnu.org/gmp/gmp-6.0.0a.tar.bz2\n==> Downloading from http://mirror.bibleonline.ru/gnu/gmp/gmp-6.0.0a.tar.bz2\n################################################################## 100,0%\n==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/gmp/6.0.0a --enable-cxx\n==> make\n==> make install\n==> Caveats\n==> Summary\n/home/styrax/.linuxbrew/Cellar/gmp/6.0.0a: 15 files, 3,6M, built in 64 seconds\n==> Installing gcc dependency: mpfr\n==> Downloading https://mirrors.kernel.org/debian/pool/main/m/mpfr4/mpfr4_3.1.3.orig.tar.xz\n################################################################## 100,0%\n==> Downloading https://gist.github.com/anonymous/3a7d24cf2c68f21eb940/raw/471e928fcdbfb5c2fa7428cfb496496e6ee469aa/mpfr-3.1.3.diff\n==> Downloading from https://gist.githubusercontent.com/anonymous/3a7d24cf2c68f21eb940/raw/471e928fcdbfb5c2fa7428cfb496496e6ee469aa/mpfr-3.1.3.diff\n################################################################## 100,0%\n==> Patching\npatching file PATCHES\npatching file VERSION\npatching file doc/mpfr.info\npatching file doc/mpfr.texi\npatching file src/lngamma.c\npatching file src/mpfr.h\npatching file src/version.c\npatching file tests/tlngamma.c\npatching file PATCHES\npatching file VERSION\npatching file src/div_2si.c\npatching file src/div_2ui.c\npatching file src/mpfr.h\npatching file src/mul_2si.c\npatching file src/version.c\npatching file tests/tmul_2exp.c\n==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/mpfr/3.1.3\n==> make\n==> make check\n==> make install\n==> Caveats\n==> Summary\n/home/styrax/.linuxbrew/Cellar/mpfr/3.1.3: 24 files, 3,9M, built in 43 seconds\n==> Installing gcc dependency: libmpc\n==> Downloading http://ftpmirror.gnu.org/mpc/mpc-1.0.3.tar.gz\n==> Downloading from http://mirror.yannic-bonenberger.com/gnu/mpc/mpc-1.0.3.tar.gz\n################################################################## 100,0%\n==> ./configure --prefix=/home/styrax/.linuxbrew/Cellar/libmpc/1.0.3 --with-gmp=/home/styrax/.linuxbrew/opt/gmp --with-mpfr=/home/styrax/.linuxbrew/opt/mpfr\n==> make\n==> make check\n==> make install\n==> Caveats\n==> Summary\n/home/styrax/.linuxbrew/Cellar/libmpc/1.0.3: 10 files, 472K, built in 31 seconds\n==> Installing gcc dependency: isl\n==> Downloading http://isl.gforge.inria.fr/isl-0.14.1.tar.xz\n################################################################## 100,0%\n==> ./configure --disable-silent-rules --prefix=/home/styrax/.linuxbrew/Cellar/isl/0.14.1 --with-gmp=system --with-gmp-prefix=/home/styrax/.linuxbrew/opt/gmp\n==> make\n==> make install\n==> Caveats\n==> Summary\n/home/styrax/.linuxbrew/Cellar/isl/0.14.1: 68 files, 4,0M, built in 26 seconds\n==> Installing gcc\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2\n==> Downloading from http://mirror.netcologne.de/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2\n################################################################## 100,0%\n==> ../configure --prefix=/home/styrax/.linuxbrew/Cellar/gcc/5.2.0  --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-5 --with-gmp=/home/styrax/.\n==> make bootstrap\nmake[2]:  [all-stage1-gcc] Error 2\nmake[2]: Leaving directory /tmp/gcc20150731-785-1gxd9uk/gcc-5.2.0/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory/tmp/gcc20150731-785-1gxd9uk/gcc-5.2.0/build'\nmake:  [bootstrap] Error 2\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nFormula needs :openmp causes fallback to gcc-4.2 https://github.com/Homebrew/homebrew/issues/41055\ngcc 4.9.2 fails to produce debugging information https://github.com/Homebrew/homebrew/issues/34976\nObject files deleted during build of gcc needed by gdb https://github.com/Homebrew/homebrew/issues/35734\nMacOS.(gcc|clang|llvm)_version can return nil https://github.com/Homebrew/homebrew/issues/18781\n```\nI received a mail that the provider kill the genattrtab task ...\nI wrote them an email now and wait for an answer.\n. Here are some important lessons learned in the meantime mostly discovered by @ptrv:\nLessons learned on LD_LIBRARY_PATH\nI accidentally prioritized /usr/lib64 in LD_LIBRARY_PATH:\nbash\n$ export LD_LIBRARY_PATH=/usr/lib64:/package/host/localhost/gcc-4/lib64\nThis caused the installation of cmake via linuxbrew to fail:\n/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found\nbecause /usr/lib64 contains an old version of libstdc++.so.6 served with /usr/bin/gcc v.4.4.7.\nYou need to add /package/host/localhost/gcc-4/lib64 to LD_LIBRARY_PATH only if you use gcc-4 in order for gcc to pick up the correct libstdc++.so library.\nLessons learned on gcc symlinks\nI tried the newer gcc version as suggested by Uberspace here:\nbash\n$ export PATH=/package/host/localhost/gcc-4/bin:$PATH\nand here:\nbash\n$ ln -s /package/host/localhost/gcc-4.9/bin/gcc ~/.linuxbrew/bin/gcc-4.9\n$ ln -s /package/host/localhost/gcc-4.9/bin/g++ ~/.linuxbrew/bin/g++-4.9\nWhile trying with different version of gcc I mixed up the versions - the server also provides gcc-5. Symlinks to gcc in ~/.linuxbrew/bin are needed by the brew command. The symlinks have to contain the compiler version, e.g. gcc-4.9 and g++-4.9, otherwise brew won't find them.\nLessons learned on linuxbrew\nI tried to install sfcgal as a dependency of postgis. This depends on cmake. Then cmake depends on boost. I had to modify one line of the sfcgal Formula to get the installer started:\nBefore:\nruby\nsystem \"cmake\",  \".\", *std_cmake_args\nAfter:\nruby\nsystem \"cmake\", \"-DBoost_NO_BOOST_CMAKE=ON\", \".\", *std_cmake_args\nThe compiler flag was mentioned in this answer on StackOverflow.\nOtherwise the installer fails with the following error:\n``` bash\nCMake Error at /usr/lib64/boost/Boost.cmake:536 (message):\n  The imported target \"boost_date_time-static\" references the file\n \"/usr/lib64/lib64/libboost_date_time.a\"\n\nbut this file does not exist.\n```\n-DBoost_NO_BOOST_CMAKE=ON This would be needed by all projects that use boost, not only sfcgal. But since sfcgal is relying in a header, whose path changed since version boost v.1.41.0 we would need a more recent boost version to be able to compile. Or we patch sfcgal to use the old include path, but I am not sure whether it relies on other functionality from more recent version.\n\nUnsolved: Boost version is too old\nThe installation of sfcgal still fails because the Boost version 1.41.0 provided is too old. The version information can be found in /usr/lib64/boost/BoostConfigVersion.cmake. CGAL refers to a least one file which has been moved to another package within the library:\nbash\n/home/styrax/.linuxbrew/include/CGAL/Kd_tree.h:34:37: \n    fatal error: boost/container/deque.hpp: No such file or directory\nThis file can be found in boost/interprocess/containers/container/deque.hpp in Boost v.1.41.0.\nIn the latest version of Boost deque.hpp is located in boost/container/deque.hpp.\n. @rwhogg Sorry, I gave up at some point.. @sjackman Thanks for the hint - however I won't have the time these days to try it out. Bookmarked anyway!. ",
    "cdluminate": "I'm trying to make the linuxbrew Debian package.\nlintian, the Debian package checker found this problem according to Debian policy:\nE: linuxbrew source: source-contains-unsafe-symlink Library/ENV/pkgconfig/fuse/osxfuse.pc\nN: \nN:    The source contains an unsafe symlink. If followed, the link will escape\nN:    the source root. Note that all absolute symlinks are unconditionally\nN:    considered \"unsafe\" in this case (unlike in binary packages).\nN:    \nN:    If it is a part of the package's testsuite, Lintian may have failed to\nN:    recognise it as a test. In that case, please override the tag.\nN:    \nN:    Severity: serious, Certainty: possible\nN:    \nN:    Check: cruft, Type: source\nand https://lists.debian.org/debian-mentors/2015/07/msg00335.html\n. well, the current packaging work is available here\nhttp://anonscm.debian.org/cgit/users/cdluminate-guest/linuxbrew.git\nThe HOMEBREW_PREFIX planed to use\nNo, not the /usr/lib/linuxbrew.  Without any change it's still ${HOME}/.linuxbrew\nBeing able to Install softwares without root premission is an outstanding feature of linuxbrew and I'm not about to break it via changing HOMEBREW_PREFIX to /usr/lib/linuxbrew. Additinally, linuxbrew should\nbe set up for per user, rather than the system wide and common /usr/lib/linuxbrew.  \nUpdating formulas\nDebian's update period is too long compared with linuxbrew/homebrew update period.\nAnd I found it uncomfortable to manage a linuxbrew.git subrepo in the Debian packaging repo,\nespecially when need to patch linuxbrew with quilt.  Maybe shipping a whole repo is bad idea.  \nSince I found that brew update will setup a new git repo under HOMEBREW_PREFIX when there is no .git, I'm thinking, can I just scrach all the core components of linuxbrew into the Debian package, without formula.  I made another wrapper script of linuxbrew [1]  \nThe current wrapper does so:\n- If HOMEBREW_PREFIX/bin/brewexists, simply invoke it\n- if !exists:\n  - init a linuxbrew without git repo under HOMEBREW_PREFIX, with a tarball.  This provides only a basic set of, no-updated formulas. But it will be tricky if BUG emerges from formulas.\n  - init a linuxbrew under HOMEBREW_PREFIX, with linuxbrew's install script  \nSo the convention of linuxbrew won't be changed.\n[1] http://anonscm.debian.org/cgit/users/cdluminate-guest/linuxbrew.git/tree/debian/bin/linuxbrew\n. Anyway users can just setup a linuxbrew at home without apt/dpkg by themselves,\nbut it could be better if a wrapper is provided by debain, for better integration of\nlinuxbrew into distribution.\nThis is my main idea.\n. Yes, so it is.\nAnother reason not restoring many files at  /usr/lib/linuxbrew  is, they'll become useless once the\nuser invoked brew update, afterall a whole new copy of linuxbrew would be cloned into .linuxbrew/ int that way.\nMy current concern is, what component should I ship in the debian package? there are some ideas:\n- [most simple] only wrapper and the install script would be shipped.\n  This will not break any function of linuxbrew, the only problem is user need to wait for some time of git repo to be cloned.\n- [not for sure] wrapper + install + ( linuxbrew - formulas).\n- [issue] wrapper + install + ( linuxbrew (has formulas) - .git repo )\n- [bad] wrapper + install + whole linuxbrew git repo, (so users can init a .linuxbrew directory with .git immediately)\n\nSince I have trouble cloning the whole linuxbrew git repo ( costs so loooong time ),\nmay I suggest that add --depth option to install script [1] ?\nAdding --depth 1 to git clone xxx would significantly decrease the time cost when installing.\nI don't know if other users need the whole git repo including 50K+ commits, but at least I don't need\nthe 50K+ commits, and just squashing 50K+ commits into 1 via --depth 1 is fine to me.  \n[1] https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install \n. @sjackman \nCould you please add copyright declaration in the head of the installscript?\nhttps://github.com/Homebrew/linuxbrew/blob/go/install\nSince the designed debian package ships only that install script from upstream,\nit is better for it to have a integrated copyright declaration.\nSee http://www.gnu.org/licenses/gpl-faq.html#NoticeInSourceFile  \nI'm not the author hence I won't add that by myself even if you confirmed it is bsd-2-clause.\n:-)\n. @albertz Actually Debian packaging script may provide some help for creating new brew formulas in ruby . However the style of Brew formulas are similar to pkgbuild (Archlinux) or ebuild from Gentoo, so one might get more helpful snippets from AUR(archlinux user repo) packaging scripts related to Torch. \n. @albertz You may need to change some CMAKE variables for the Torch CMake files. e.g. appending your brew lib directory to cmake LDFLAGS.\n. ",
    "dennyabraham": "Thanks! Are you still interested in a change to python_requirement.rb?\n. Nevermind, I misread #269. I was hoping the logic in python_requirement.rb was structured to check against the system-installed version.\n. ",
    "tomas": "Cool, thanks.\nShould I fix those issues and push the changes?\n. Done.\n. But of course -- thank you for an amazing package manager. :)\nDo you guys keep a \"want list\" of missing packages that need formulae?\n. I should also note that iotop requires a kernel above 2.6, and a system that provides a /proc/self/io. Is there any way brew can check these things before trying to install?\n. Ok, fixed.\n. I think I'm also curious by your question @iggyvolz. Isn't linuxbrew meant for Linux?\n. Oh, I just realized what you mean. I'm not sure if iotop actually runs on OSX, but the documentation is pretty clear that it requires a Linux 2.6.x kernel or above. Is there a /proc/self/io path on OSX?\n. @iggyvolz Yeah, I do use \"regular\" Homebrew on an old OSX laptop. I didn't know Homebrew formulae was ported to Linuxbrew on a weekly basis, though. \nWhere should I submit a formula for something like GIMP or Inkscape?\n. Cool. Can you point to an example formula for a X11/GTK-based app?\n. ",
    "neil1hart": "I'm having the same problem after following https://github.com/Linuxbrew/linuxbrew/wiki/Standalone-Installation on red hat.  Our work computer doesn't use /etc/passwd but some other authentication.\nwhoami\nwhoami: cannot find name for user ID 11230\n/usr/bin/whoami\nnhart\n. Haven't been back here for a bit.  I followed waedt comment\nsh\nln -s /lib64/libnss_sss.so.2 $(brew --cellar)/glibc/2.19/lib/libnss_sss.so.2\nresolved my issues with whoami, ls -al, groups\n. ",
    "maxim-belkin": "Thanks for the note. It might be that we have to make glibc depend on sssd\n. Fun fact: we need sssd, which needs samba, which is currently compiled --without-ldap ;)\n. return unless OS.mac? stops compilation on Linux at all.\n. Thanks! I've added the proposed change to std.rb and updated my request.\n. Updated my request as requested :)\n. Linuxbrew installs git v2.7.0 for me...\n. I bet this is due to hash. Try running hash -r after installing git with linuxbrew and see if type -a git returns linuxbrew's git first (it should appear at the top)\n. I've updated the request\n. fixed!\n. No problem! I like that this solution uses chomp and split. It looks like, however, it also relies on the dash in the return value of uname -r. Can we do something like:\nuname -r.chomp.split(\"-\")[0].split(\".\")[0,3].join(\".\")\n. I'm not worried about the numbers but also about possible suffixes. For example, my Linux appends .el6.x86_64 suffix. So, if for whatever reason the uname -r returns 1.2.3.el6.x86_64 then the formula will fail.\n. My system returns 2.6.32-504.3.3.el6.x86_64 so it will work on my machine.\nI was just trying to take care about a possible situation when the kernel version contains three numbers without a hyphen and is suffixed by something (e.g. 2.6.32.el6.x86_64) because then the formula is going to fail. However, since neither of us know if there are systems where uname -r returns anything like that, we can leave the formula as you wrote it.\n. I agree. But we (the Linux folks) frequently find ourselves living in a world that is 10 years behind and some software packages need ssl2 support for whatever reason. So, it would have been nice to be able to turn it on with a simple flag instead of brew edit ... \"hassle\".\n. Don't get me wrong: I'm not going to use it myself -- I don't need it. But others might. Yes, I use Standalone installation of Linuxbrew. I think adding a (highly not recommended) note should suffice.\n. irb --version returns 0.9.5\nWhen chmod-ing I also prefer to use just +x but I don't know how to code that in ruby.\n. Ruby version and ... <tons of lines>... are in the failure.txt\n. And here is an attempt to build everything from source: failure_build_from_source.txt\n. I can build Ruby 1.9 from source and report if the error message persists.\n. While I was having fun trying to install Ruby 1.9, I found the following thread and did a brew readall which returned a Stack level too deep error for the gcc formula. After checking out a previous version of gcc.rb, I was able to proceed with the \"usual\" standalone linuxbrew installation... So, it is gcc formula that is broken, not zlib. So, I changed the title of the issue.\n. Presence of symlinks does not help.\n```\n[In the Linuxbrew folder]\n$ git status\nOn branch master\nnothing to commit, working directory clean\n$ ls bin/\nbrew  g++-4.4@  gcc-4.4@  gfortran-4.4@\n$ brew readall\nError: problem in [Linuxbrew folder]/Library/Formula/gcc.rb\nstack level too deep\n$ git checkout d1d40b2 -- ./Library/Formula/gcc.rb\n$ brew readall\n[No output, so gcc.rb passes \"the test\"]\n``\n. Nope:Error: stack level too deepappears. If I checkout the previous version of gcc (git checkout d1d40b2 ./Library/Formula/gcc.rb`), then it works.\nSo, the diff that spoils everything for me is:\n```\ngit diff d1d40b2 cd40a55 ./Library/Formula/gcc.rb\ndiff --git a/Library/Formula/gcc.rb b/Library/Formula/gcc.rb\nindex 8dc8676..17dd83d 100644\n--- a/Library/Formula/gcc.rb\n+++ b/Library/Formula/gcc.rb\n@@ -47,7 +47,8 @@ class Gcc < Formula\ndepends_on \"zlib\" unless OS.mac?\n   depends_on \"binutils\" if build.with? \"glibc\"\n-  depends_on \"glibc\" => :optional\n+  depends_on \"glibc\" => Formula[\"glibc\"].installed? || !GlibcRequirement.new.satisfied? ?\n+    :recommended : :optional\n   depends_on \"gmp\"\n   depends_on \"libmpc\"\n   depends_on \"mpfr\"\n``\n. I think this patch fixes the problem! Great! But something strange happens when I runbrew test hello(see below) -- no output... At the same time, if I manually run[Linuxbrew-folder]/Cellar/hello/2.10/bin/hello --greeting=brew-- it printsbrew` just fine.\n```\n$ git diff\ndiff --git a/Library/Homebrew/requirements/glibc_requirement.rb b/Library/Homebrew/requirements/glibc_requirement.rb\nindex 6439236..58470ac 100644\n--- a/Library/Homebrew/requirements/glibc_requirement.rb\n+++ b/Library/Homebrew/requirements/glibc_requirement.rb\n@@ -10,7 +10,7 @@ class GlibcRequirement < Requirement\n     super\n   end\n\nsatisfy {\nsatisfy(:build_env => false) {\n     next true unless OS.linux?\n     begin\n       next true if to_dependency.installed?\n\n$ brew list\n$ brew install hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nAlready downloaded: [cache-folder]/Homebrew/hello-2.10.tar.gz\n==> ./configure --disable-silent-rules --prefix=[Linuxbrew]/Cellar/hello/2.10\n==> make install\n[Linuxbrew]/Cellar/hello/2.10: 52 files, 228.6K, built in 42 seconds\n$ brew test hello\nTesting hello\n==> [Linuxbrew]/Cellar/hello/2.10/bin/hello --greeting=brew\n$ brew readall\n[no output here, which is great]\n``\n. No problem!\n. It ischown, notchmod. The failure happens when it tries to change thegroupof a temporary folder. @sni  can you make sure that you can change group in the$HOMEBREW_TEMPfolder? Just do:cd $HOMEBREW_TEMP && mkdir delete_me && chown $USER:? Did you by any change installcoreutilsbefore that? I have an issue withcoreutils: after I install it, mywhoamicommand returns numbers and it breaks a lot of things...\n. Confirming: reinstallingbinutilsindeed helps andpatchelfsuccessfully installs. Can this logic be coded in thepatchelf` formula?\nJust to repeat (mostly for myself): if anyone wishes to compile everything from scratch the steps should be:\n```\n[create $LINUXBREW/sbin  $LINUXBREW/lib folders]\n[create a symlink $LINUXBREW/lib64  to $LINUXBREW/lib]\n[create symlinks to gcc-4.4, gfortran-4.4, g++-4.4 in $LINUXBREW/bin]\n[create symlinks to /usr/lib64/libstdc++.so.6 /lib64/libgcc_s.so.1 in $LINUXBREW/lib]\nexport HOMEBREW_BUILD_FROM_SOURCE=1\nbrew install glibc --with-current-kernel\nbrew reinstall binutils\nbrew install patchelf\n```\n. My solution which I recorded a while ago for myself:\n```\npath=$(brew --prefix)\nFixing 'jw':\ncp /usr/bin/jw \"$path\"/sbin/\nsed -e 's|[:space:]|[[:space:]]|g' -e 's|tr\\ [[:space:]]|tr\\ [:space:]|g' /usr/bin/jw > \"$path\"/sbin/jw\nmake sure we have pdfjadetex  ---  texlive  has it (brew install texlive)\nmake sure we have docbook2pdf\necho \"#! /bin/sh\" > \"$path\"/sbin/docbook2pdf\necho \"jw -f docbook -b pdf \\\"\\$@\\\"\" >> $path/sbin/docbook2pdf\nchmod 0755 $path/sbin/docbook2pdf\nHave to remove libbz2.a before installing fontconfig\nrm -f \"$path\"/lib/libbz2.a\nbrew install fontconfig\nln -s \"$(brew --prefix bzip2)\"/lib/libbz2.a \"$path\"/lib/libbz2.a\n```\nThe jw file from /usr/bin is here\nJust remove .txt\n. > Linuxbrew isn't particularly well tested with X11.\nRight, this is exactly why I've started this topic. I want to be able to compile tk on a Linux machine.\nFake keg + pristine tcl-tk formula do not work.\nSo, Linuxbrew's ldd does not see /usr/lib64 and, therefore, does not find libxcb - right?\nThere is no ld.so.conf file in the $(brew --prefix glibc)/etc/ (but there is ld.so.cache).\nI've touched ld.so.conf, then:\n$ ldconfig\n$ ldconfig -v\nldconfig: Path `[linuxbrew-folder]/Cellar/glibc/2.19/lib64' given more than once\nldconfig: Can't stat [linuxbrew-folder]/Cellar/glibc/2.19/libx32: No such file or directory\n[linuxbrew-folder]/Cellar/glibc/2.19/lib:\n    libutil.so.1 -> libutil-2.19.so\n    libnss_compat.so.2 -> libnss_compat-2.19.so\n    libnss_nisplus.so.2 -> libnss_nisplus-2.19.so\n    libnss_nis.so.2 -> libnss_nis-2.19.so\n    libnsl.so.1 -> libnsl-2.19.so\n    libnss_hesiod.so.2 -> libnss_hesiod-2.19.so\n    libnss_db.so.2 -> libnss_db-2.19.so\n    libnss_files.so.2 -> libnss_files-2.19.so\n    libnss_dns.so.2 -> libnss_dns-2.19.so\n    libanl.so.1 -> libanl-2.19.so\n    libresolv.so.2 -> libresolv-2.19.so\n    libcidn.so.1 -> libcidn-2.19.so\n    libpcprofile.so -> libpcprofile.so\n    libSegFault.so -> libSegFault.so\n    librt.so.1 -> librt-2.19.so\n    libpthread.so.0 -> libpthread-2.19.so\n    libcrypt.so.1 -> libcrypt-2.19.so\n    libmemusage.so -> libmemusage.so\n    libdl.so.2 -> libdl-2.19.so\n    libm.so.6 -> libm-2.19.so\n    libc.so.6 -> libc-2.19.so\n    ld-linux-x86-64.so.2 -> ld-2.19.so\n    libthread_db.so.1 -> libthread_db-1.0.so\n    libBrokenLocale.so.1 -> libBrokenLocale-2.19.so\nAny idea why /Cellar/glibc/2.19/lib64 is given more than once?\nI remember seeing a similar thread about tcl-tk but could not find it...\n. I take it back \u2014 fake keg actually works. What happened before was that linking phase was failing while trying to link libxml2 (I've installed libxml2). I assumed that it failed to link just that library, but it turned out all the libraries were not linked. So,  I did brew unlink libxml2 && brew link xorg && brew link --overwrite libxml2 and after that I was able to build tk! \nThanks!\nI think you should create that fake-xorg-keg formula that would execute just those 4 lines of code. People will fix it for their Linux distros. I think fake-xorg should have only the necessary stuff: libX.so*, libxcb.so.1, and so on... \n. So, for true xorg libraries, someone  has to follow the steps from here?\nFor a fake formula, this is the list of header files and libraries that were necessary for tcl-tk to be built on the CentOS 6.6 system that I use:\n# Symlinks in $(brew --cellar)/xorg/7/include/X11/\n/usr/include/X11/cursorfont.h\n/usr/include/X11/keysymdef.h\n/usr/include/X11/keysym.h\n/usr/include/X11/Xatom.h\n/usr/include/X11/Xfuncproto.h\n/usr/include/X11/X.h\n/usr/include/X11/Xlib.h\n/usr/include/X11/Xmd.h\n/usr/include/X11/Xosdefs.h\n/usr/include/X11/Xproto.h\n/usr/include/X11/Xprotostr.h\n/usr/include/X11/Xresource.h\n/usr/include/X11/Xutil.h\n# Symlinks in $(brew --cellar)/xorg/7/lib/\n/usr/lib64/libxcb.so.1\n/usr/lib64/libXau.so.6\n/usr/lib64/libX11.so\n. Ok. Let's keep this issue open. If I find time to work on it, I'll do that.\n. I don't think you need all of them. The way I determined mine was that I started with nothing linked and then ran installation gazzillion times to figure out which libraries are requested. I could debug installation and grep header files from within the installation directory, but smart ideas come last.\n. Just for myself...\n$ ldd ~/.mozilla/plugins/libflashplayer.so\n        linux-vdso.so.1 (0x00007fffbf1c6000)\n        libgthread-2.0.so.0 => not found\n        libX11.so.6 => not found\n        libXext.so.6 => not found\n        libXt.so.6 => not found\n        librt.so.1 => [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib/librt.so.1 (0x00007f0eb8891000)\n        libXcursor.so.1 => not found\n        libXrender.so.1 => not found\n        libssl3.so => not found\n        libsmime3.so => not found\n        libnss3.so => not found\n        libnssutil3.so => not found\n        libplds4.so => not found\n        libplc4.so => not found\n        libnspr4.so => not found\n        libpthread.so.0 => [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib/libpthread.so.0 (0x00007f0eb8671000)\n        libdl.so.2 => [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib/libdl.so.2 (0x00007f0eb846d000)\n        libgtk-x11-2.0.so.0 => not found\n        libgdk-x11-2.0.so.0 => not found\n        libatk-1.0.so.0 => not found\n        libpangoft2-1.0.so.0 => not found\n        libgdk_pixbuf-2.0.so.0 => not found\n        libpangocairo-1.0.so.0 => not found\n        libcairo.so.2 => not found\n        libpango-1.0.so.0 => not found\n        libfreetype.so.6 => not found\n        libfontconfig.so.1 => not found\n        libgobject-2.0.so.0 => not found\n        libgmodule-2.0.so.0 => not found\n        libglib-2.0.so.0 => not found\n        libm.so.6 => [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib/libm.so.6 (0x00007f0eb8176000)\n        libc.so.6 => [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib/libc.so.6 (0x00007f0eb7dfd000)\n        [LINUXBREW-DIRECTORY]/Cellar/glibc/2.19/lib64/ld-linux-x86-64.so.2 (0x00007f0eba00d000)\n. > because most distros use the libuuid provided by util-linux\nI don't get it... Two things that concern me: 1. Installing an entire package just for a single library seems rather absurd. 2. Why do we care about what most distros do if the ultimate goal to be independent of a distro?\nOne of the steps in the Standalone Linuxbrew installation is to install coreutils, not util-linux. So, because of most distros we can no longer do a simple brew install coreutils but have to brew install coreutils && brew link --overwrite coreutils. Why not just continue to use a slim and right-to-the-point libuuid?\n. I believe util-linux is just a collection of utilities/libraries. So different behavior of original libuuid probably meant that util-linux was still packaged with an old version. To me, util-linux seems like a competitor in some sense to coreutils which is just another collection of 3 packages of utilities.\n. I can only confirm that in order to upgrade openssl I have to do the same thing:\nbrew fetch openssl\nbrew upgrade openssl\nIs it possible to fix the behavior of brew upgrade to take these kind of problems into account. That is, when curl is linuxbrew's curl, then it for sure depends on openssl, and then upgrading either one should be done as \"fetch then upgrade\". I'm sure, but maybe \"fetch then upgrade\" might be a good idea in general...\n. I'm not exactly sure how PR work... when I click on the link to my patch (8e5c254) I see just the reported changes. When I go to Files Changed above, then I see 3 files changed (+coreutils formula where I change the url + add a gperf dependency... Not sure why this is happening...\n. I don't see yacc as a dependency of krb5:\nhttps://gist.github.com/anonymous/44aa6779dda952db5e0c\n. gist log for libssh: https://gist.github.com/6ea48ef886e3445540aa\n. I've noticed doxygen dependency in libssh. Doxygen depends on bison.\n. https://gist.github.com/4062531b37355aa51d30\n. Sorry for the delay. I've updated the commit.\n. yesimon, google up Linuxbrew Standalone installation. creating a lib64 symlink to lib is one of the steps there. Good luck.\n. I'm building everything from source. Now I'm struggling with subversion --with-serf...\n. > Do you need --with-serf? What doest it do? The patch #872 for scons, which I've just merged, may be related.\nLet me try that. I've tried adding that in SConstruct file before and it didn't work.\n. Another note about standalone installation:\nit looks like patching binutils is not necessary after installing glibc as all binutils binaries depend on linuxbrew's libraries... \n. And gcc formula needs a fix as well:\n$ brew install gcc --with-glibc -d\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/gcc.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/glibc.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/zlib.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/binutils.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/linux-headers.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/xz.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/gmp.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/libmpc.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/mpfr.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/gpatch.rb\n[Linuxbrew]/Library/brew.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/isl.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FromPathLoader): loading [Linuxbrew]/Library/Formula/gcc.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/glibc.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/zlib.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/gmp.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/libmpc.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/mpfr.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/isl.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/binutils.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/linux-headers.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/xz.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Formula/gpatch.rb\n[Linuxbrew]/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading [Linuxbrew]/Library/Taps/homebrew/homebrew-versions/gcc44.rb\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.3.0/gcc-5.3.0.tar.bz2\nAlready downloaded: [Cache]/Homebrew/gcc-5.3.0.tar.bz2\n/usr/lib/ruby/1.8/pathname.rb:996:in `mkdir'\nErrno::EEXIST: File exists - [Linuxbrew]/Cellar/gcc/5.3.0/lib\nUpdate:\nIssue with gcc was caused by lib.mkdir inside the if build.with? \"glibc\" section. So, it either has to go or be suffixed with smart \"if does not exist\" clause.\n. > It's strange that I didn't run into that issue myself. Either removing the lib.mkdir or changing it to mkdir_p libdir should work. Submit a pull request with a fix, if you like.\nI'm going to check if that was caused by not unsetting HOMEBREW_CC.\nUpdate:\nIt looks like it was indeed caused by set HOMEBREW_CC (see below). Sorry for the wrong report. I will try install gcc again now.\n```\n$ env | grep HOMEBREW\nHOMEBREW_TEMP=/data/server4/mbelkin/linuxbrew/temp\nHOMEBREW_BUILD_FROM_SOURCE=1\nHOMEBREW_GIT=/software/git-1.8.4/bin/git\nHOMEBREW_CC=gcc-4.4\n$ brew config\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew.git\nHEAD: 68a8f94b7e76b66750e491e68f3946694f625704\nLast commit: 33 hours ago\nHOMEBREW_PREFIX: /data/server4/mbelkin/.linuxbrew2\nHOMEBREW_REPOSITORY: /data/server4/mbelkin/.linuxbrew2\nHOMEBREW_CELLAR: /data/server4/mbelkin/.linuxbrew2/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: 16-core 64-bit 0x63e\nKernel: Linux 2.6.32-504.3.3.el6.x86_64 x86_64 GNU/Linux\nOS: Scientific Linux release 6.7 (Carbon)\nCodename: Carbon\nOS glibc: 2.12\nOS gcc: 4.4.7\nLinuxbrew glibc: N/A\nLinuxbrew gcc: N/A\nClang: N/A\nX11: 2.7.8 => /usr\nSystem Ruby: 1.8.7-p374 => /usr/bin/ruby\nPerl: /usr/bin/perl\nPython: /usr/bin/python\nRuby: /usr/bin/ruby\nJava: 1.7.0_95\n$ brew install glibc --with-current-kernel\n==> Installing dependencies for glibc: zlib, binutils, xz, linux-headers\n==> Installing glibc dependency: zlib\nError: Homebrew GCC requested, but formula gcc44 not found!\nYou may need to: brew tap homebrew/versions\n$ unset HOMEBREW_CC\n$ brew install zlib\n==> Downloading http://zlib.net/zlib-1.2.8.tar.gz\nAlready downloaded: /home/mbelkin/.cache/Homebrew/zlib-1.2.8.tar.gz\n==> ./configure --prefix=/data/server4/mbelkin/.linuxbrew2/Cellar/zlib/1.2.8\n==> make install\n/data/server4/mbelkin/.linuxbrew2/Cellar/zlib/1.2.8: 9 files, 364.2K, built in 3 seconds\n``\n.gcc` still has that problem:\nbash\n==> Installing gcc\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.3.0/gcc-5.3.0.tar.bz2\nAlready downloaded: /home/mbelkin/.cache/Homebrew/gcc-5.3.0.tar.bz2\nError: File exists - /data/server4/mbelkin/.linuxbrew2/Cellar/gcc/5.3.0/lib\nAnd mkdir_p does not help:\n``` sh\n$ git diff\ndiff --git a/Library/Formula/gcc.rb b/Library/Formula/gcc.rb\nindex 9765333..9e9c178 100644\n--- a/Library/Formula/gcc.rb\n+++ b/Library/Formula/gcc.rb\n@@ -111,7 +111,7 @@ class Gcc < Formula\n     if build.with? \"glibc\"\n       # Fix for GCC 4.4 and older that do not support -static-libstdc++\n       # gengenrtl: error while loading shared libraries: libstdc++.so.6\n-      lib.mkdir\n+      mkdir_p libdir\n       ln_s [\"/usr/lib64/libstdc++.so.6\", \"/lib64/libgcc_s.so.1\"], lib\n       binutils = Formula[\"binutils\"].prefix/\"x86_64-unknown-linux-gnu/bin\"\n       args += [\n$ brew install gcc --with-glibc\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.3.0/gcc-5.3.0.tar.bz2\nAlready downloaded: /home/mbelkin/.cache/Homebrew/gcc-5.3.0.tar.bz2\n^[Error: undefined local variable or method `libdir' for #\n```\nI think removing this line altogether should work just fine.\nUpdate: Submitted pull request #887 \n. It is needed to make curl understand Kerberos. I'm fine with it being turned off by default. \n. Glad I can help. Choice of libxml2 over expat was random. There should be an option to build either with expat or with libxml2, or with both :)\n. According to the gist log you provided, you are using system's gcc:\nLinuxbrew gcc: N/A\n. Great!\nAll you have to do, is add depends_on \"libxau\" to libxcb\n. I was able to compile all three of your formulas (with the addition of \"libxau\" dependency)\n. Here is a list of dependencies for Xorg library (for copy-pasting into formula):\n(from here)\n``` ruby\n    resource \"libFS\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libFS-1.0.7.tar.bz2\"\n    sha256   \"2e9d4c07026a7401d4fa4ffae86e6ac7fec83f50f3268fa85f52718e479dc4f3\"\n  end\nresource \"libICE\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libICE-1.0.9.tar.bz2\"\n    sha256   \"8f7032f2c1c64352b5423f6b48a8ebdc339cc63064af34d66a6c9aa79759e202\"\n  end\nresource \"libSM\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libSM-1.2.2.tar.bz2\"\n    sha256   \"0baca8c9f5d934450a70896c4ad38d06475521255ca63b717a6510fdb6e287bd\"\n  end\nresource \"libX11\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libX11-1.6.3.tar.bz2\"\n    sha256   \"cf31a7c39f2f52e8ebd0db95640384e63451f9b014eed2bb7f5de03e8adc8111\"\n  end\nresource \"libXScrnSaver\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXScrnSaver-1.2.2.tar.bz2\"\n    sha256   \"8ff1efa7341c7f34bcf9b17c89648d6325ddaae22e3904e091794e0b4426ce1d\"\n  end\nresource \"libXaw\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXaw-1.0.13.tar.bz2\"\n    sha256   \"8ef8067312571292ccc2bbe94c41109dcf022ea5a4ec71656a83d8cce9edb0cd\"\n  end\nresource \"libXcomposite\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXcomposite-0.4.4.tar.bz2\"\n    sha256   \"ede250cd207d8bee4a338265c3007d7a68d5aca791b6ac41af18e9a2aeb34178\"\n  end\nresource \"libXcursor\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXcursor-1.1.14.tar.bz2\"\n    sha256   \"9bc6acb21ca14da51bda5bc912c8955bc6e5e433f0ab00c5e8bef842596c33df\"\n  end\nresource \"libXdamage\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXdamage-1.1.4.tar.bz2\"\n    sha256   \"7c3fe7c657e83547f4822bfde30a90d84524efb56365448768409b77f05355ad\"\n  end\nresource \"libXext\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXext-1.3.3.tar.bz2\"\n    sha256   \"b518d4d332231f313371fdefac59e3776f4f0823bcb23cf7c7305bfb57b16e35\"\n  end\nresource \"libXfixes\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXfixes-5.0.1.tar.bz2\"\n    sha256   \"63bec085084fa3caaee5180490dd871f1eb2020ba9e9b39a30f93693ffc34767\"\n  end\nresource \"libXfont\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXfont-1.5.1.tar.bz2\"\n    sha256   \"b70898527c73f9758f551bbab612af611b8a0962202829568d94f3edf4d86098\"\n  end\nresource \"libXft\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXft-2.3.2.tar.bz2\"\n    sha256   \"f5a3c824761df351ca91827ac221090943ef28b248573486050de89f4bfcdc4c\"\n  end\nresource \"libXi\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXi-1.7.6.tar.bz2\"\n    sha256   \"1f32a552cec0f056c0260bdb32e853cec0673d2f40646ce932ad5a9f0205b7ac\"\n  end\nresource \"libXinerama\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXinerama-1.1.3.tar.bz2\"\n    sha256   \"7a45699f1773095a3f821e491cbd5e10c887c5a5fce5d8d3fced15c2ff7698e2\"\n  end\nresource \"libXmu\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXmu-1.1.2.tar.bz2\"\n    sha256   \"756edc7c383254eef8b4e1b733c3bf1dc061b523c9f9833ac7058378b8349d0b\"\n  end\nresource \"libXpm\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXpm-3.5.11.tar.bz2\"\n    sha256   \"c5bdafa51d1ae30086fac01ab83be8d47fe117b238d3437f8e965434090e041c\"\n  end\nresource \"libXrandr\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXrandr-1.5.0.tar.bz2\"\n    sha256   \"6f864959b7fc35db11754b270d71106ef5b5cf363426aa58589cb8ac8266de58\"\n  end\nresource \"libXrender\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXrender-0.9.9.tar.bz2\"\n    sha256   \"fc2fe57980a14092426dffcd1f2d9de0987b9d40adea663bd70d6342c0e9be1a\"\n  end\nresource \"libXres\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXres-1.0.7.tar.bz2\"\n    sha256   \"26899054aa87f81b17becc68e8645b240f140464cf90c42616ebb263ec5fa0e5\"\n  end\nresource \"libXt\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXt-1.1.5.tar.bz2\"\n    sha256   \"46eeb6be780211fdd98c5109286618f6707712235fdd19df4ce1e6954f349f1a\"\n  end\nresource \"libXtst\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXtst-1.2.2.tar.bz2\"\n    sha256   \"ef0a7ffd577e5f1a25b1663b375679529663a1880151beaa73e9186c8309f6d9\"\n  end\nresource \"libXv\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXv-1.0.10.tar.bz2\"\n    sha256   \"55fe92f8686ce8612e2c1bfaf58c057715534419da700bda8d517b1d97914525\"\n  end\nresource \"libXvMC\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXvMC-1.0.9.tar.bz2\"\n    sha256   \"0703d7dff6ffc184f1735ca5d4eb9dbb402b522e08e008f2f96aee16c40a5756\"\n  end\nresource \"libXxf86dga\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXxf86dga-1.1.4.tar.bz2\"\n    sha256   \"8eecd4b6c1df9a3704c04733c2f4fa93ef469b55028af5510b25818e2456c77e\"\n  end\nresource \"libXxf86vm\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libXxf86vm-1.1.4.tar.bz2\"\n    sha256   \"afee27f93c5f31c0ad582852c0fb36d50e4de7cd585fcf655e278a633d85cd57\"\n  end\nresource \"libdmx\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libdmx-1.1.3.tar.bz2\"\n    sha256   \"c97da36d2e56a2d7b6e4f896241785acc95e97eb9557465fd66ba2a155a7b201\"\n  end\nresource \"libfontenc\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libfontenc-1.1.3.tar.bz2\"\n    sha256   \"70588930e6fc9542ff38e0884778fbc6e6febf21adbab92fd8f524fe60aefd21\"\n  end\nresource \"libpciaccess\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libpciaccess-0.13.4.tar.bz2\"\n    sha256   \"07f864654561e4ac8629a0ef9c8f07fbc1f8592d1b6c418431593e9ba2cf2fcf\"\n  end\nresource \"libxkbfile\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libxkbfile-1.0.9.tar.bz2\"\n    sha256   \"51817e0530961975d9513b773960b4edd275f7d5c72293d5a151ed4f42aeb16a\"\n  end\nresource \"libxshmfence\" do\n    url      \"http://ftp.x.org/pub/individual/lib/libxshmfence-1.2.tar.bz2\"\n    sha256   \"d21b2d1fd78c1efbe1f2c16dae1cb23f8fd231dcf891465b8debe636a9054b0c\"\n  end\nresource \"xtrans\" do\n    url      \"http://ftp.x.org/pub/individual/lib/xtrans-1.3.5.tar.bz2\"\n    sha256   \"adbd3b36932ce4c062cd10f57d78a156ba98d618bdb6f50664da327502bc8301\"\n  end\n``\n. no problem. I will post my thoughts about x11 here (or in #826)\n. Ok, I've looked into that. We need to make all the \"resources\" as actual formulas. The ones you use in your formulas as well...\n. Looks like all the \"xorg\" formulas have to use the SAME prefix. See [here](http://www.linuxfromscratch.org/blfs/view/svn/x/xcb-proto.html) for the example of./configureand [here](http://www.linuxfromscratch.org/blfs/view/svn/x/xorg7.html#xorg-env) for the explanation whatXORG_CONFIGis.\n. In the light that everything has to use the same prefix, it might be necessary to create a singlexorgformula... :(\n. I've created the first version of Xorg libraries formula (see the reference above) -- please try it out and see if it works for you. If it does, then all we have to do is figure out how to fix the mandatory \"url\" issue (Xorg libraries don't have a single url).\n. I'd prefer one virtual package and many individual ones as small packages are easy to update. But the trouble is that there are 60+ of them (of really small ones). We can probably create all the small ones and split them into meta-packages as in LFS and Xorg will use those meta-packages. \n. Interestingly, on OS X the formula usesinstall -c -dto create directories, while on Linux it usesmkdir -p. As a result,xextprotofails to build because of repeating directory creation somewhere...\n. Addingdepends_on \"coreutils\" => :build if OS.mac?` fixes it! \n. I can certainly do that but... the packages in xorg 7.7 are outdated. The following statement can be found on Xorg website\n\nUpdate: Many modules have had new releases since the X11R7.7 katamari - see the individual X.Org releases directory for downloads, and the xorg-announce archives for details on included changes. These updates may be included in a future 7.8 katamari release if one is ever assembled.\n\nSo, do we want to downgrade the packages? We could create a formula xorg-7.7 and xorg-latest...\nThere is still a problem with Mac OS, actually. For whatever reason, binutils on a Mac do not provide ld (as well as as and gprof). Moreover, gcc package on a Mac does not create symlinks gcc -> gcc-5, cpp -> cpp-5 that are created on a Linux. Absence of these cause all sorts of problems later on. I'm sure it is solvable though.\nActually, problems on a Mac appear very close to the very end of compilation and this is where I felt that if we had small packages -- it would have been much faster to troubleshoot. On the other hand, this way it is easier to build packages under different conditions and there is no guarantee that they will play well with each other then.\n. So, it looks like the trouble on OS X is caused by non-GNU ld and cpp. I will try to follow these guides to make it compile.\n. Question: I've compiled binutils on OS X so that they have ld, cpp and gcc. How do I use that cpp instead of a system's one? For cc, I can use --cc=gcc, but what about cpp? I've tried setting it inside of a formula (ENV[\"CPP\"] = \"/path/to/cpp\") and it didn't work.\n. linuxbrew/x11 seems like a good idea to me too. Let's do that. Will you create this tap first? I could then make a PR to it.  I'm not a fan of outdated packages so I vote for having the latest xorg. \n. There is a problem with Mac's cpp, not clang. We can indeed work on it after releasing a version for Linux.\n. Great, I've tapped it. I will start working on the formulas then.\n. Is there a clean way to define arguments shared across multiple formulas?\nIn all small formulas we will be using something like: \nruby\n    args = %W[\n      --prefix=#{HOMEBREW_PREFIX}/Cellar/xorg/latest\n      --sysconfdir=#{HOMEBREW_PREFIX}/Cellar/xorg/latest/etc\n      --localstatedir=#{HOMEBREW_PREFIX}/Cellar/xorg/latest/var\n    ]\n    system \"./configure\", *args\n    system \"make\", \"install\"\nOr do you think we should install formulas into their own folders (--prefix=#{prefix})? LFS guide uses the same prefix for all the formulas. So, if we can't define common arguments in one place -- we have to make sure everything plays well.\n. I will use #{prefix} for now and then will change that if necessary.\n. Quick question: how to avoid \"Error: Empty installation\" in a meta-formula that does not have anything to do inside its def install?\n. I've figured this out. I just need to create a file that is not recognized by Homebrew as unnesessary.\n. I'm almost done with the packages...\n. Looking at Library/Homebrew/metafiles.rb it looks likeREADME.md will be ignored. So I just create an html file in there with different name.\n. Stylistic question:\nWith a single formula for xorg I used --sysconfdir=#{prefix}/etc and --localstatedir=#{prefix}/var which were ending up in \n[linuxbrew]/Cellar/xorg/latest/etc  and    [linuxbrew]/Cellar/xorg/latest/var.\nWith multiple formulas, I can imagine a situation when someone needs just a single formula not the entire set of xorg libraries. Therefore, a question: should I use\n    * #{etc} and #{var} (i.e. global Homebrew folders),   or\n    * #{prefix}/etc and #{prefix}/var (local to each formula),    or\n    *  #{HOMEBREW_PREFIX}/Cellar/xorg/latest/etc and #{HOMEBREW_PREFIX}/Cellar/xorg/latest/var (common for all formulas)?\n. > Finally, I can confirm that linuxbrew is running on an Android-Smartphone (both - armhf/arm64) inside a bootstrapped debian-system deployed with chroot.\nOMG. shorten-64-to-32 is Apple's extension to gcc. First, try a combination of two things: \n1. Shaun's suggestion (comment out a line with Mac.os version)\n2. Add a brute-force inreplace:\nruby\ninreplace \"build/standalone.gypi\", /-Wshorten-64-to-32/, \"\"\nThen it should fail with a message about ld\n. > Edit: Sorry I just noticed this is legacy-linuxbrew, possibly the wrong repository.\nYep\n. Evgeniy, three issues:\n- this is Linuxbrew land\n- this is old Linuxbrew land\n- you've got Homebrew\n. the log clearly says \nchecking for xcb... no\nAfter doing what @rwhogg suggested, try brew install libxcb. my solution was a back up solution in case @rwhogg's didn't work. \nSo, which line exactly worked for you. Weird... I'd suggest you to run the following code:\nsh\ndir=\"$(pwd)\"\ncd \"$(brew --repo)\"\ngit checkout master\ngit reset --hard origin/master\ngit fetch --unshallow\ngit pull origin master\nfor tap in $(brew tap); do\n    cd \"$(brew --repo $tap)\"\n    git checkout master\n    git reset --hard origin/master\n    git fetch --unshallow\n    git pull origin master\ndone\ncd \"$dir\"\nunset dir. LGTM. Now you can try\nbrew remove cairo\nbrew install cairo\nbrew gist-logs cairo\nand report here the url you get in the end. You will be able to repeat brew install --env=std cairo after you do the above steps. I just want to figure out what prevents you from installing cairo in super env.. So.... now you were able to install cairo in superenv, is that right?. superenv -- this is the default env. in Linuxbrew when you don't specify --env=std.\n. You can report that in Linuxbrew/homebrew-core, not here. This is a legacy repo... :). Can you create an issue there and post the url you get after executing the following commands:\nbrew install -vds gtk+\nbrew gist-logs gtk+\n?. I think it should end up in another tap that would depend on linuxbrew/xorg. It will follow once linuxbrew/xorg is more or less finalized (currently, the only issue is documentation, but otherwise it is pretty usable).\n. I think this issue will be resolved one day by creating a statically-linked-git formula following the guides from here.\n. @jameshentai:\n1.  echo is a shell command. (shell is bash or zsh or whatever)\n2. echo command is used to write something to the terminal (so that you can read it).\n3. echo 'something' > file writes something to  file. If file exists, this command overwrites it\n4. echo 'something' >> file appends something to the end of the file. That is, it does not overwrite it.\n5. .bashrc and .bash_profile are special files used by bash shell. Like any other .something file in Linux, these files do not show up by default in programs like nautilus. Use terminal (konsole in KDE, terminal in GNOME) and type ls -a to see ALL files, including these \"hidden\" ones.\n5. .bash_profile on Linux systems is read only once - when you log in. Variables defined in this file will be \"lost\" unless you export them using the export command.\n6. .bashrc is read every time you launch terminal/konsole.\n7. $HOME is an environment variable that is equal to /home/$USER\n8. $USER is your username. Hence, no need to write bluberry (which is your username). Use just $HOME.\nAssuming that you installed linuxbrew in your home directory ($HOME) and used the standard \"hidden\" folder .linuxbrew, open a terminal and type (line by line):\n(\nexport PATH=\"$HOME/.linuxbrew/bin:$PATH\"\nexport MANPATH=\"$HOME/.linuxbrew/share/man:$MANPATH\"\nexport INFOPATH=\"$HOME/.linuxbrew/share/info:$INFOPATH\"\n) >> ~/.bashrc\nIf you do that, you can start using linuxbrew right away. You CAN use .bash_profile instead of .bashrc but remember that in that case you would have to log out (Ctrl + Alt + Backspace) and log back in for changes to take effect.\n. > Can yuo help me?\n\nThx\n\nWhile we are waiting for yuo to help you out, I was wondering if you could run the following code and post the results here\nbrew update && cd \"$(brew --repo)\" && git fetch && git reset --hard origin/master && brew update\nbrew doctor\n. what do you get if you do: cd $(brew --repo) && git remote -v && brew tap?\n. brew gist-logs util-linux and post the url here.\n. So, your problem is:\nmakefile\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/blkid\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/col\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/colcrt\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/colrm\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/column\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/findmnt\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/flock\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/getopt\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/hexdump\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/ipcrm\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/ipcs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/isosize\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/logger\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/look\u2019: Permission denied\n/usr/bin/install: cannot create regular file \u2018/usr/share/bash-completion/completions/lsipc\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/mcookie\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/mkfs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/mkswap\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/namei\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/prlimit\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/readprofile\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/renice\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/rev\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/script\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/scriptreplay\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/setsid\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/tailf\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/whereis\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/wipefs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/fsck\u2019: Permission denied\n/usr/bin/install: cannot create regular file \u2018/usr/share/bash-completion/completions/mkfs.bfs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/fsck.minix\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/mkfs.minix\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/fsck.cramfs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/mkfs.cramfs\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/addpart\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/delpart\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/resizepart\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/partx\u2019: Permission denied\n/usr/bin/install: cannot remove \u2018/usr/share/bash-completion/completions/raw\u2019: Permission denied\n. please report the result of:\nbash\ndirect=\"\"\nfor dir in $(echo \"/usr/share/bash-completion/completions\" | tr \"/\" \" \"); do\n    direct=\"$direct/$dir\";\n    [ ! -d \"$direct\" ] || ls -ld $direct;\ndone\n. Also, you can safely remove Debian's snp-sites because:\n$ brew desc -s snp\nparsnp: Microbial core genome alignment and SNP detection\nsnp-sites: Find SNP sites in a multi FASTA alignment file\nsnpeff: Genetic variant annotation and effect prediction toolbox\n. no, just remove e from ls -led. Basically, run:\nbash\ndirect=\"\"\nfor dir in $(echo \"/usr/share/bash-completion/completions\" | tr \"/\" \" \"); do\n    direct=\"$direct/$dir\";\n    [ ! -d \"$direct\" ] || ls -ld $direct;\ndone\n. > Must I change the permission of the dir /usr/share/bash-completion?\nno, you must not. Give us some time to figure out what is going on.\n. Problems:\nmake\nBash completions:  /usr/share/bash-completion/completions\nSystemd support:   no\n...\nPackage tinfo was not found in the pkg-config search path\nPackage libuser was not found in the pkg-config search path\nPackage libsystemd was not found in the pkg-config search path\nPackage libsystemd-daemon was not found in the pkg-config search path\nPackage libsystemd-journal was not found in the pkg-config search path\nPackage python-2.7 was not found in the pkg-config search path\n. In my installation, I've got:\nBash completions:  ${datarootdir}/bash-completion/completions\nSystemd support:   yes\n. Can you post the result of the following two commands?\ntype -a pkg-config\npkg-config --variable=completionsdir bash-completion\n. can you remove bash-completion that was installed with apt-get?\n. No, you won't have any problems. Just no bash-completions.\nWhat happens is the following: \nDuring the installation of util-linux, pkg-config tries to determine if package bash-completions is installed. This is so in your case, but the location where bash-completions is installed is not writable by you (you did sudo yum install bash-completions). Because of that, installation fails. I think we should come up with a way of avoiding such errors but for now the easiest solution is to remove bash-completions using yum.\n. > and I see that I need git installed.\ndo you mean curl?. 1. This is Linuxbrew, not Homebrew\n2. This is legacy repo. Please use Linuxbrew/brew. Thank you, @keikun17!. Without this change brew audit libffi complains about a call to system's mv command\n. I didn't bother checking if glibc exists in homebrew so added this without any deep thought.\n. I guess, stylistic. Before my \"standalone\" build was finished, line `java -version 2>&1.lines.first.chompwas failing with an error message (which I don't remember exactly) aboutchompmethod being applied to nil:Nilclass object. While troubleshooting the problem, I saw that(which \"\")is more commonly used... so this is the history behind the first change. The rest of the changes were just my attempts to troubleshoot the problem and understand why the same line was working inirbbut failing when I was runningbrew install.... Same thing. So, what is the best course of action now? Should I close this pull request and submit a new one? Or were you going to fix it and merge it without my interference?\n. Not really... when the standalone build completed, this error was gone. I've recorded all the steps I was taking so can repeat them if someone else comes across this error and solution will be needed. \nAnyway, I will remove this hunk and the one forgmp` + fix the glibc formula and update the request.\n. That's one pipe instead of two - that's a plus. It relies on a dash in the kernel version -- that's a minus. From here\n\nIt is easy to tell if you are running a distribution kernel. Unless you downloaded, compiled and installed your own version of kernel from kernel.org, you are running a distribution kernel. To find out the version of your kernel, run uname -r:\n$ uname -r\n3.7.5-201.fc18.x86_64\nIf you see anything at all after the dash, you are running a distribution kernel. Please use the support channels offered by your distribution vendor to obtain kernel support.\n\nSo, relying on a dash in the return value of uname -r we put aside those two and a half enthusiasts who compile Linux kernel themselves. But I'm fine with this version if you insist because if someone compiles a kernel - he or she can figure out how to fix this formula as well.\n. No idea. My understanding was that it still might have something at the end (i.e. 3.7.5.something) but I may be wrong.\n. ok. The only problem is that I have to use the http git url to build HEAD version\n$ brew install coreutils --HEAD\n==> Cloning git://git.sv.gnu.org/coreutils\nUpdating [cache-folder]/Homebrew/coreutils--git\nfatal: read error: Connection reset by peer\nError: Failed to download resource \"coreutils\"\nFailure while executing: git fetch -q origin\n. https://gist.github.com/maxim-belkin/1600f4414a8d0c9f4c99\n. But this part is inside of a head section. Shouldn't it be just depends_on \"homebrew/dupes/gperf\" => :build && !OS.mac?\n. No idea. But gssapi.h (and, therefore, krb5) is definitely necessary to build libssh.\n. Yes, once dependency on krb5 is added change on line 85 is not necessary. My concern is that curl still builds even if it does not find gssapi when --with-gssapi is provided.\n. Here is an exert from ./configure --help for curl:\ntext\n  --with-gssapi-includes=DIR\n                          Specify location of GSS-API headers\n  --with-gssapi-libs=DIR  Specify location of GSS-API libs\n  --with-gssapi=DIR       Where to look for GSS-API\n. Add depends_on \"libxau\" here\n. Agreed. I was trying to make xorg install into 7 subdirectory. \n. Agree. I used this web page because I followed steps from there. \n. could be. I will add it. I'll check where it comes from. \n. Well, the main reason is that I was finishing it up at 5am. \n. I think case is easier to understand in this case because of else.\n. ",
    "andrewyatz": "Also just encountered this same problem on RedHat. @waedt solution worked for me though as @maxim-belkin pointed out we're going to need to compile a lot more to make this work. \n. Ha one PR at a time @sjackman hey ;). \nI'd like to but I'm not sure how much time I have to do this ATMO. I would probably require some help from @maxim-belkin who sounds like they've started down this path and help direct me to a sssd client. All I could find was the sssd distro (https://fedorahosted.org/sssd/) and that seemed to talk more about running daemons vs. clients.\n. I think what happens is that if you compile sssd that will generate the\nrequired lib for libnss_sss and deposits that into the /lib64 dir.\nDepending on the nss file that tells it what plugins to use when performing\nlookups (well that's my guess at least). There's some chatter on the NixOS\nGitHub org suggesting this is correct\nhttps://github.com/NixOS/nixpkgs/issues/1868.\n. Just encountered this same problem on a RHEL7 box. Did not use the bottle because it's being installed to a non-default location. Managed to get it working by adding --disable-docs as you suggested above. What about adding in an optional flag to disable the docs building?\n. Sure thing shouldn't take long to rustle it up\n. Just encountered this on a new build where LANG was set to en_GB.UTF-8. However running the postinstall as described (LC_CTYPE=C brew postinstall glibc) fixed it. Is it worthwhile/correct to embed this into the formula?. Sure thing.\n[ensw]: echo $LC_CTYPE\n[ensw@ebi-006 ~]$ env | egrep 'LANG|LC'\nLANG=en_GB.UTF-8\n[ensw@ebi-006 ~]$ locale\nLANG=en_GB.UTF-8\nLC_CTYPE=\"en_GB.UTF-8\"\nLC_NUMERIC=\"en_GB.UTF-8\"\nLC_TIME=\"en_GB.UTF-8\"\nLC_COLLATE=\"en_GB.UTF-8\"\nLC_MONETARY=\"en_GB.UTF-8\"\nLC_MESSAGES=\"en_GB.UTF-8\"\nLC_PAPER=\"en_GB.UTF-8\"\nLC_NAME=\"en_GB.UTF-8\"\nLC_ADDRESS=\"en_GB.UTF-8\"\nLC_TELEPHONE=\"en_GB.UTF-8\"\nLC_MEASUREMENT=\"en_GB.UTF-8\"\nLC_IDENTIFICATION=\"en_GB.UTF-8\"\nLC_ALL=\nI was running this via Ansible which did do some explicit setting on the LANG ENV variable to en_GB.UTF-8 (only saw that once I turned up the debug). LC_CTYPE=en_GB.UTF-8 loom/RHEL7/linuxbrew/bin/brew postinstall glibc\n==>\n/nfs/software/ensembl/loom/RHEL7/linuxbrew/Cellar/glibc/2.19/bin/localedef\n-i en_GB -f UTF-8 en_GB.UTF-8\n==>\n/nfs/software/ensembl/loom/RHEL7/linuxbrew/Cellar/glibc/2.19/bin/localedef\n-i en_US -f UTF-8 en_US.UTF-8\nOutput looks okay. I'm stumped ...\n. ",
    "danielschranz": "Thanks for the comment, I'll be sure to keep it in mind for next time.\nI created a PR on homebrew for this (https://github.com/Homebrew/homebrew/pull/42429) - therefore closing this PR again.\n. To be fair the option itself and making use of the configure flag is generic to both projects, right? \nOnly the dependency part might be specific to the OS and I think even that probably isn't necessary on Linux; at least on Linux Mint I had libxml2 already installed and I just put it in to make sure the build never breaks because of a missing libxml2 (a result of me not knowing enough about what we expect the user to have installed and what will be provided by other formulas)  \nBut if my PR on homebrew gets merged we will see if linuxbrew users will have issues with this flag on certain distributions and if this formula needs fixing here\n. Thanks, I'll try to update the PR in homebrew with that code so that we don't need to maintain a custom version for linuxbrew (I see that Library/Formula/pypy.rb is already using OS.mac? so I hope they won't object)\n. As you've probably seen on the homebrew PR it has been suggested to have a separate PR to linuxbrew for \nruby\ndepends_on \"libxml2\" unless OS.mac?\nSo the question now is - on MacOS libxml2 we've enabled support for libxml2 by default  (changing the optiont to --without-libxml2) - do we want the same for linuxbrew (only difference being that the brew version of libxml2 will be used) or are we defaulting to only use libxml2 when the user specifies it (--with-libxml2)?\nI am going to wait until the upstream changes arrived in linuxbrew and fix the libxml2 dependency then unless people want me to reopen this PR.\n. Re-opened the PR to add the libxml2 dependency\n. Sorry this took me a few days, hope it's correct now.\n. ",
    "niole": "It's just this header with the first instruction for ruby. The entire\nprocess should be shown in one place and one place only so as not to\nconfuse users regarding the installation process.\n. Don't you agree that that's part of the installation process?\n. Oh, gotcha. Excuse me for using issues like stackoverflow\n. ",
    "Rombur": "\nThe most annoying part of installing deal.II on a new cluster is to link blas and lapack with Trilinos. Usually even after you load the module, cmake cannot find blas and lapack so you need to give the path explicitly. When you want to use MKL, there is the added problem that you need to link to three libraries instead of two and that none of them is called blas or lapack.\nIn candi, the user has to export CC, CXX, FC, and FF to the mpi compiler. We could require something similar with linuxbrew.\nThis would be nice but maybe not necessary. If you want to control each aspect of the compilation you can do it by hand. What could be nice is if for example if I want to compile petsc with some specific flags, I can compile it myself and then tell linuxbrew to use that particular installation of petsc. This would be nice but I can live without it.\n. BLAS implements some simple operations that are extensively used in LAPACK\n. I don't think it is necessary to have different CFLAGS and FFLAGS I can't think of a situation where they would need to be different.\n. I just wanted to add that, since today, MKL is free (https://software.intel.com/en-us/articles/free_mkl). This will probably increased the number of people using different version of BLAS/LAPACK on OSX.\n. Thanks, I have tried that but if I set HOMEBREW_CC=gcc, linuxbrew will always pick the compiler in /usr/bin which is strange because which gcc returns the right compiler.\n. This regex works /([^\\/]*)gcc($|(-(4\\.[3-9]|5)$))/ but it only moves the problem because now when I try to install a package, I get cannot be built with any available compilers.\n. #137 worked. Thanks @davydden \n. I just found this PR and I just want to say that I disagree with @tdsmith about the fact that installing cmake is not painful. I can go on cmake website and get the binary for linux. This is as fast as it can be. However, with linuxbrew, I have to compile openssl! This is painfully slow. \n\nIf you don't like the idea of using cmake from the system, what about using curl from the system? This would speed up installation a lot and I doubt that many people require a specific version of curl. \n. ",
    "jpmurray": "@sjackman any news on your fix? I'm trying here to install composer via homebrew and getting thoses errors from PHP56 install.\n. ",
    "ccopsey": "Hi Shaun,\nA system I'm using (and don't have sudo rights for) doesn't have libz.so (it does have libz.so.1).  I have already successfully built zlib using linuxbrew.\nUsing brew install gcc the build was failing during stage2 because it could not find libz.  By commenting out the option that I mentioned the build succeeded, and because I found confusion in the git logs I assumed that was the problem.\nHowever, whilst building up details of my problem I have discovered that this is actually something else.  By commenting out the above option, gcc was building its own zlib.  Not what I wanted.  What it appears is that LDFLAGS is not passed to stages 2, 3... of the build.  Which is why stage 1 succeeds - it knows about the linuxbrew libraries.\nLine 110 of gcc.rb uses the --with-boot-ldflags argument to pass LDFLAGS through to stages 2, 3..., but only if --with-glibc has been specified as an option to brew.  If I take that line and move it out of the if-clause then my build succeeds.\nSo, should the --with-boot-ldflags be common across all builds to ensure that linuxbrew libraries are used in all stages of the build?\nChris\n. ",
    "gcstang": "I'm trying to install this on an Oracle Linux server that is built upon RedHat Linux I keep getting that gcc is needed and that I need to install it like:\nbrew install gcc\nWhen I do that it tells me I need zlib and zlib tells me it needs gcc... endless circle.\nEverything I tried after that needs gcc.\nIs there a way around this?\nI have gcc installed already on the system, can it use that instead of making me install it using linuxbrew?\nGil\n. Thank you, I found a solution by doing this which I had seen in another thread.\nexport HOMEBREW_CC=gcc\n$ prefix=/usr/local/linuxbrew\nln -s /usr/bin/gcc44 $prefix/bin/gcc-4.4\nln -s /usr/bin/g++44 $prefix/bin/g++-4.4\nln -s /usr/bin/gfortran44 $prefix/bin/gfortran-4.4\nIt worked after these changes.\nThank you, I love it!\n. I submitted this because git is still at 2.5.0 which is quite old it was put out on 27-Jul-2015 and there have been a lot of fixes since (2.5.3 was released recently and most important 2.5.1 had a LOT of fixes).\nThank you for a great project.\n. Ok, sounds great.\nThank you for your reply and help.\nOn Tue, Sep 22, 2015 at 10:51 AM, Dominyk Tiller notifications@github.com\nwrote:\n\nNo worries. It just causes potential merge problems for Shaun when he\nre-syncs the repos, when merging the two repos is already not a fun task.\nI'll try and find out if anyone knows when Shaun is expected to be\navailable again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Homebrew/linuxbrew/pull/564#issuecomment-142331003.\n. \n",
    "tjhei": "I played around with this PR and I would like to give some feedback:\n- I think blas/lapack should be considered together.\n- There is a large number of compatible system blas/lapack libraries: openblas, former gotoblas, fblaslapack, mkl, atlas, ...  and it would be great to detect any of them (automatically? here is a list of libs that we check in deal.II: 1)\n- Even if you find blas, not everything might be exposed and I am not sure how to handle that (here is the check we use in deal.II: 2)\n- Ideally, the additional code would end up in a formula so that it can be modified by tapping a repository and not in the main linuxbrew code. I wonder how difficult it is to introduce a meta package that does not contain any own code, but exports blas/lapack dirs either from a system library or a formula that has been installed.\n. > Do you know on which platforms you see incomplete BLASses?\nI don't, sorry. I assume this is also to make sure we get the BLAS and LAPACK symbols (they are sometimes in separate libs and sometimes in a single lib).\n\nWhy would a tap want to affect BLAS selection? I can imagine a way you'd do this in a formula but it'd be super-weird. Handling this per-tap is more complexity than I think is warranted but maybe I don't understand the use case.\n\nI think there is some value in having the option to develop, improve, test, and easily distribute these meta formulas. Otherwise one would need to distribute a modified linuxbrew itself. \n. > how many of those meta-formulas do you envision to have @tjhei ?\nNot sure. I am still trying to understand linuxbrew and its philosophy and I am probably trying to do wrong things in the process. :-) The idea that different formulas can provide same/similar functionality and a way to express this using dependencies sounds like a reasonable thing to have for a package manager.\nAnother thing I don't understand is how you guys deal with different versions of libraries. It seems that there is version support in dependencies, but old versions in formulas seem to be replaced instead of added.\n. I think the next thing where I will get annoyed is compiling python from scratch.\n. > can share his concerns and issue with not using system's cmake.\nThis is my experience (minimal ubuntu):\n```\n$ brew install cmake\n==> Installing dependencies for cmake: makedepend, zlib, openssl, pkg-config, curl\n==> Installing cmake dependency: makedepend\nError: /home/bob/dealii-brew/linuxbrew/opt/pkg-config not present or broken\nPlease reinstall pkg-config. Sorry :(\n$ brew info cmake\n==> Dependencies\nRequired: curl \u2718\n$ brew info curl\n==> Dependencies\nBuild: pkg-config \u2718\nRequired: openssl \u2718\n$ brew info pkg-config\npkg-config: stable 0.28\nManage compile and link flags for libraries\nhttps://wiki.freedesktop.org/www/Software/pkg-config/\nNot installed\nFrom: https://github.com//homebrew/blob/master/Library/Formula/pkg-config.rb\n$ brew install pkg-config\nok, this worked?!\n$ brew install cmake\n==> Installing cmake dependency: makedepend\n==> Installing cmake dependency: zlib\n==> Installing cmake dependency: openssl\n==> Installing cmake dependency: curl\n==> Installing cmake\nfails (no python installed)\n$ sudo apt-get install python (I don't want to brew install python!!)\n$ brew install cmake\nImportError: No module named setuptools\n$ sudo apt-get install python-setuptools\n$ brew install cmake\nfinally worked.\n```\n. Not 100% sure, but if my cmake binary sits in say /usr/bin/, this will pull that into the path possibly messing with the isolated build environment or not?\n. ",
    "guawoo": "Sorry, I typed error package name. It not LEF, it is LFE\n. ",
    "stepun": "brew gist-logs openssl \nlink: https://gist.github.com/8a1260d0bcd11d9ae5ff\n. System English reinstall\n``\nuser@ubuntu:~$ brew install openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.2d.tar.gz\nAlready downloaded: /home/user/.cache/Homebrew/openssl-1.0.2d.tar.gz\ntar: A lone zero block at 52140\n==> perl ./Configure --prefix=/home/user/.linuxbrew/Cellar/openssl/1.0.2d_1 --openssldir=/home/user/.linuxbrew/etc/openssl no-ssl2 zlib-dynamic shared enable-cms linux-x86_64\n==> make depend\n==> make\n                         ^\ncompilation terminated.\nmake[1]: *** [cryptlib.o] Error 1\nmake[1]: Leaving directory/tmp/openssl20150820-15573-k2jkss/openssl-1.0.2d/crypto'\nmake: *** [build_crypto] Error 1\nREAD THIS: https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\nuser@ubuntu:~$ brew gist-logs openssl\nhttps://gist.github.com/8a1260d0bcd11d9ae5ff\n. I made a symlink (/usr/include/sys) necessary libraries. Everything is working\n. ",
    "dholm": "@sjackman Hmm, that error message shouldn't be printed if you have libunwind installed.\n. I do.  I'll see if it builds.\n. @sjackman configure fails with Clang on OSX due to missing support for the GNU extension Nested Functions:\nconfigure: error: gcc with GNU99 support required\n. @sjackman Done.\n. @sjackman elfutils provides libraries that are used by many other applications, such as perf.\n. I've tried #460 and it seems to solve all the issues that I had.  I'm closing this pull request.\n. ldconfig\nldconfig: Can't create temporary cache file /etc/ld.so.cache~: Permission denied\nproc/module.mk:115: recipe for target 'ldconfig' failed\n. @sjackman It might need depends_on \"homebrew/dupes/ncurses\".  Could you try if that works?\n. Should I still submit this to Homebrew even though the formula shouldn't be used on OSX?\n. @sjackman Sorry, forgot to audit as well.  Fixed now.\n. @sjackman Fixed!\n. I was told to resubmit here?\nhttps://github.com/Homebrew/homebrew/pull/49779\n. checking that generated files are newer than configure... done\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/gperftools/tcmalloc.h\nconfig.status: creating src/windows/gperftools/tcmalloc.h\nconfig.status: creating src/config.h\nconfig.status: executing depfiles commands\nconfig.status: executing libtool commands\nconfigure: error: in `/tmp/google-perftools20151005-508002-4kmgzv/gperftools-2.4':\nconfigure: error: No frame pointers and no libunwind. The compilation will fail\nSee `config.log' for more details\n. checking for __builtin_stack_pointer()... no\nchecking for __builtin_expect()... yes\nchecking for __environ... yes\nchecking for __thread... yes\nchecking if __malloc_hook is declared volatile... no\nchecking if nanosleep requires any libraries... configure: error: cannot find the nanosleep function\n. Fixed!\n. Done!\n. It is hardcoded to install into /sbin, for instance /sbin/mount.fuse.  I can patch it to install them to #{sbin}.\nIt also installs udev rules and init.d scripts which doesn't really make sense from Linuxbrew.\nIn my particular use-case we already had fuse installed on our machines but they neglected to install the dev package and I wanted to build some fuse modules from homebrew/fuse.\n. Oooops, I was in a bit of a rush when I put this together. :)\n. Ah, will add!\n. That explains why I had a vague recollection that it wasn't supposed to work.  :)\nThe only reason I put them into variables was to keep within a line width of 80 characters, I will inline them.\n. From fuse.h:\n* IMPORTANT: you should define FUSE_USE_VERSION before including this\n * header.  To use the newest API define it to 26 (recommended for any\n * new application), to use the old API define it to 21 (default) 22\n * or 25, to use the even older 1.X API define it to 11.\nAs for _FILE_OFFSET_BITS this might be an issue that exists in my environment, I will remove it.\n. ",
    "joshuaswilcox": "Hm, i still get this, and FWIW i get this for gcc\n28-08-15 13:31:12> which gcc\n/usr/bin/gcc\nand gcc version\n28-08-15 13:31:12> gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nalso i did this:\n28-08-15 13:31:12> ls -la ~/.linuxbrew/bin/\ntotal 12\ndrwxrwxr-x 2 jwilcox web 4096 Aug 28 14:26 .\ndrwxrwxr-x 6 jwilcox web 4096 Aug 28 13:00 ..\n-rwxrwxr-x 1 jwilcox web  791 Aug 28 12:59 brew\nlrwxrwxrwx 1 jwilcox web   12 Aug 28 14:19 gcc -> /usr/bin/gcc\n. ",
    "ronanc-raspberrypi": "Hi Shaun,\nI\u2019ll try to build openssl later this evening and give you an update\nr\n. Hi,\nI got to build openssl successfully (with the patch suggested above by sjackman)\ni will include my /proc/cpuinfo in another comment (gotta log of my mac and logon from raspberry), however it looks similar to nstCactus (except the BogoMIPS\nline, which i assume is an overclock setting on nstCactus's cpu ???)\nI also note that it took a 'wet-week' to build (30.5 minutes), but it did build successfully.\nDid you give it time to finish ?\nBecause of the time to build was so long, i first suspected that it was compiling with the wrong flags, or something, so i did a comparison test with apt-get building openssl \napt-get  build-dep openssl -y \napt-get -b source openssl\nOk it's an 'unscientific' test, but broadly speaking apt-get takes approx the same time to build as linuxbrew\nwill logoff now and logon from raspberry to give details of /proc/cpuinfo\nand another brew issue i noticed after patching the hardware.rb file\n. ok back again,\n/proc/cpuinfo on my raspberry pi that successfully built openssl with the sjackman patch to hardware.rb file\n```\nprocessor   : 0\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 1\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 2\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 3\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nHardware    : BCM2709\nRevision    : a01041\nSerial      : 0000000022b29dbb\n```\n. Hi Shaun,\n\u201cCuriouser and curiouser!\u201d Cried Alice, that whole build on raspberry pi thing lead me down a bunch of \u2018rabbit holes\u2019.\nHope i was of some help, but as a newbie, i\u2019m a bit lost. and i don\u2019t want to mess up an excellent home-brew issues forum\nwith my ramblings. \nSo if you have a moment\nFirst i installed linuxbrew with the 'git clone https://github\u2026\u2026\u2026~/.linuxbrew\u201d\nmodified the hardware.rb file and was able to build \u2018ffmpeg' (and subsequently \u2018openssl\u2019)\nnext time i tried to brew doctor/ update i got a warning\n    \"Warning: you have uncommitted modifications to Homebrew\u2026.\u201d\n        \u201cstashing etc\u2026\u201d\n            which resulted in the mods to hardware.rb reverted to original\nSo i re-modified the hardware.rb back to include your suggested mod\n    brew update\n        \u201cStashing your changes\u2026\n            \u2026.\n                \u201cError: Failure while executing: git stash save \u2014include-untracked \u2014quiet\n                    i.e. Homebrew failed to update\nMy guess at this stage is that Git is doing what git is supposed to do, keep track of changes and noticed \na change on my hardware.rb which was not reflected on the git side ?\nTo clarify matters, i uninstalled linuxbrew, and reinstalled using the \nruby -e \u201c$(curl -fsSL https\u2026\u2026/linuxbrew/go/instrall)\n    then i went to modify the hardware.rb file again\n        and \u2018lo and behold\u2019 the modification was already there !!!\nDoes that mean that i should not post my thoughts on how to over come the \n    \"cannot brew doctor / update because i\u2019ve modified the hardware.rb file\u201d\n        i.e. the problem no longer exists, because you\u2019ve committed the mod to your source on Git ?\nsorry for being so pedantic, \n    I\u2019m just not sure if a further contribution by me, on the issue would confuse ? or clarify ?.\ni.e. does the git download issue re stashing (and reverting the hardware.rb file) still exist ???\n    or it magically disappeared with a \u2018git\u2019 commit on your side ?\nRonan\n. That explains it,\nThanks for update, \n. sjackman comment Oct 3, 2015\niv'e just tried it and it works on arm7l (raspberry pi 2),\nsee issue \nhttps://github.com/Homebrew/linuxbrew/issues/581#issuecomment-145368911\nthanks \n. Note on the above, \nafter modifying the hardware.rb file, the next time i 'brew doctor' i get a warning: you have uncommited modifications to Homebrew..........should you later need to do so for some reason.\n    cd /home/pi.linuxbrew/Library && git stash && git clean -d -f\nOk Fair enough, if i read the message carefully i would not have stashed and cleaned. because it reverts the file back to the unmodified version.\n. ps here is the brew config from the above report\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: 844ddc06f2b966d0a202f1f0ec7db35f9bc391e2\nLast commit: 19 hours ago\nHOMEBREW_PREFIX: /home/pi/.linuxbrew\nHOMEBREW_REPOSITORY: /home/pi/.linuxbrew\nHOMEBREW_CELLAR: /home/pi/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/pi/.linuxbrew/Library/Homebrew/os/linux/hardware.rb:53:in flags'\n/home/pi/.linuxbrew/Library/Homebrew/os/linux/hardware.rb:63:inblock (2 levels) in module:LinuxCPUs'\n/home/pi/.linuxbrew/Library/Homebrew/os/linux/hardware.rb:68:in bits'\n/home/pi/.linuxbrew/Library/Homebrew/cmd/config.rb:101:inhardware'\n/home/pi/.linuxbrew/Library/Homebrew/cmd/config.rb:152:in dump_verbose_config'\n/home/pi/.linuxbrew/Library/Homebrew/cmd/config.rb:7:inconfig'\n/home/pi/.linuxbrew/Library/brew.rb:133:in `'\n. I think i found the problem\nhttps://github.com/Homebrew/linuxbrew#dependencies\nclearly says \nRuby 1.8.6 or newer\nGCC 4.2 or newer\n64-bit x86 platform\nand the raspberry pi is arm 32 bit\nhope there is a 32 bit version of linuxbrew, will looks around\n. this issue seems to be related to #563\n. I sorted this one out as follows:\nmodify the hardware.rb file as indicated on https://github\n. Sorted this one out as follows:\nuninstall linuxbrew\nthen \ngit clone https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew\ncd ~/.linuxbrew/Library/Homebrew/os/linux\nedit the hardware.rb file at line 53 as follows\nruby\n def flags\n    #@flags ||= cpuinfo[/^flags.*/, 0].split\n    @flags ||= cpuinfo[/^(flags|Features).*/, 0].split\n end\nsee https://github.com/Homebrew/linuxbrew/issues/563\nthe brew install ffmpeg\n... and it works\n    ... not bad for a newbie noob\n. re patch for ARM7 (sjackman patch to hardware.rb file)\ni installed linuxbrew using the git clone https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew\nas opposed to the\nruby-e \"$(curl -fsSL.........\njust for divilment, i'll uninstall linuxbrew and then re-install with ruby, modify the hardware.rb and then see if i can brew doctor, brew update etc\ni edited the hardware.rb file and halleuja it does build sucessfully,.... except i can no longer brew update.\nI think this may be a git issue, because i cloned, modified (hardware.rb) and now it wants to upload my modifications\nnot sure, 'cos i don't know the ins and outs of GIT, but i know if i stash, save and clean it seems to revert my hardware.rb to the unmodified version\nBelow are the details\n```\npi@novisad ~ $ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: You have uncommitted modifications to Homebrew\nIf this a surprise to you, then you should stash these modifications.\nStashing returns Homebrew to a pristine state but can be undone\nshould you later need to do so for some reason.\n    cd /home/pi/.linuxbrew/Library && git stash && git clean -d -f\nWarning: Your Homebrew is outdated.\nYou haven't updated for at least 24 hours. This is a long time in brewland!\nTo update Homebrew, run brew update.\npi@novisad ~ $ brew update\nStashing your changes:\n M Library/Homebrew/os/linux/hardware.rb\n*** Please tell me who you are.\nRun\ngit config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\nfatal: empty ident name (for pi@novisad.(none)) not allowed\nCannot save the current index state\nError: Failure while executing: git stash save --include-untracked --quiet\npi@novisad ~ $ \n```\n. ",
    "Blue-Dog-Archolite": "Sorted this out. This was due to jruby running and not ruby. New system caused it to die. \n. Great Call. Odd that the dependency resolution can't sort this out. \n. ",
    "meonlol": "I've messed around with trying to build x11 and it's dependencies from source, but I think there is a more general issue here. I already have x11 installed per default but it can not find it for any x11 related formulas. I don't understand it fully, but am I right that the https://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/requirements/x11_requirement.rb class looks for the XQuartz installation only? If that is correct, I don't think building from source will help us much until regular X11 is supported as well.\n. ",
    "lskatz": "Well... it's been reported to both.  No, I have no mac :/\n. https://gist.github.com/aad50b6e961115edabc1\n. ",
    "dky": "Edit to resolve I used \"brew edit vim\" and updated the url to something that existed, ran md5 check on file and updated values. All good. \n. ",
    "zhe": "I had the same 404 problem a while ago. After brew doctor and brew update, Homebrew is updated from ce6d82b7 to d430de47. Then, I run\nbrew install vim --with-lua\nIt works without error now. \nHomebrew downloads Vim from https://github.com/vim/vim/archive/v7.4.889.tar.gz\n. ",
    "guoxiao": "see Homebrew/homebrew#43863\n. CentOS release 6.4\n. I just updated my linuxbrew and brew cannot be run now, with the following error:\n/opt/home/guoxiao/.linuxbrew/Library/Homebrew/global.rb:30:in `<top (required)>': uninitialized constant OS_VERSION (NameError)\n        from /opt/home/guoxiao/.linuxbrew/Cellar/ruby/2.2.3/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from /opt/home/guoxiao/.linuxbrew/Cellar/ruby/2.2.3/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from /opt/home/guoxiao/.linuxbrew/Library/brew.rb:15:in `<main>'\n. No. I test reinstalling openssh just now, and the issue still exists.\n. ",
    "violetcherry": "After checking the curl command,I found curl had some problems that were not related with linuxbrew. \nHere are my solution:\nFirst, loate the bash libimf.so,I got this\n_/opt/intel/composer_xe_2011_sp1.9.293/compiler/lib/intel64/libimf.so\nSecond, Add the command below  to  your ~/.bashrc\n_export LD_LIBRARY_PATH=\"/opt/intel/composer_xe_2011_sp1.9.293/compiler/lib/intel64:$LD_LIBRARY_PATH\"\nThird, source your .bashrc\nit sloved my problem in curl.\nThaks for your advice @dunn  @iggyvolz ,it helped me rebuild my curl.\n. ",
    "brevilo": "I couldn't really test it locally but the URL and the sha256sum are correct...\n. The git log message should be simply jdk 1.8.0-60\nNext time :smile: \n. You're probably right: https://github.com/Homebrew/homebrew/issues/44350\n. ",
    "clozed2u": "Same here. Tested on Ubuntu 14.04.3.\n. ",
    "bosr": "Hi,\nAfter looking into the ncurses source, I found that you can circumvent the problem by adding this to the formula in line 32:\n\"--with-pkg-config-libdir=#{prefix}/pc\",\nThis make ncurses install the package into a brew-managed location (inside your home by default). \nThe caveat is that I made up this path, so I don't expect any pkgconfig installation to find it without help. \nCheers,\nRomain\n. Hi\nActually #{prefix} refers to the installation directory which is already created at this point of time, so if you replace this with #{lib}, I'm not sure what it refers to\nCheers\nRomain\n\nOn 29 Sep 2015, at 03:27, Alex Dunn notifications@github.com wrote:\nOh, great!\nThe odd thing is that when I add --with-pkg-config-libdir=#{lib}/pkgconfig to the configure arguments, it doesn't actually create that directory and the pkgconfig files. Does it for you?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, you must be right. Sorry about that. I guess that's due to our the weird proxy we have at work. I'm surprised though: this never happened with other packages. \n\nThanks for your input. \nRegards,\nRomain\n\nOn 03 Oct 2015, at 21:33, Shaun Jackman notifications@github.com wrote:\nThe SHA1 that you are seeing is of the uncompressed TAR file.\nSee Homebrew/homebrew-dupes#197 and Homebrew/homebrew-php#1102\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "yoaquim": "Having the same issue; I'm on elementary OS 0.3.1, Freya.\nNo update on this? Seems like short-circuiting the install location works, but is this an actual solution?\nAny reason ncurses needs to install to /usr/lib? Where does brew typically install this stuff, under ~/.linuxbrew, correct?\n. ",
    "aftnix": "Its OK :+1: In the mean time I will stick to the  vim from its git repo, though the HEAD of that is randomly crashing in my system. That's why i opted for brew vim. \n. I've forgot to mention, before trying install vim formula, I've edited it...\n``` diff\naftnix@dev:~/.linuxbrew\u27eb git diff\ndiff --git a/Library/Formula/vim.rb b/Library/Formula/vim.rb\nindex df3f13d..297bfa8 100644\n--- a/Library/Formula/vim.rb\n+++ b/Library/Formula/vim.rb\n@@ -92,6 +92,9 @@ class Vim < Formula\n                           \"--enable-cscope\",\n                           \"--with-features=huge\",\n                           \"--with-compiledby=Homebrew\",\n+                          \"--enable-luainterp\",\n+                          \"--enable-pythoninterp\",\n+                          \"--with-luajit\",\n                           *opts\n     system \"make\"\n     # If stripping the binaries is enabled, vim will segfault with\n```\n. ",
    "danabrand": "Try gem install irb and report back.\n. Hi all, great to e-meet. And Shaun, yes, I can merge again into Linuxbrew this week.\n. Thank you! I was just wondering what's happening with that. Ok, I will get onto merging the latest and let you know when it's ready to be pushed again. \n. Hi Dom, this has been on my mind for the last weeks, but the UBC job was indeed very busy. I want to do a commit this weekend, I will let you know as soon as I have it done, I suspect there are a bunch of conflicts to deal with.\n. @DomT4 Finally got around pushing the latest to my branch (danabrand) - would you care to push it to live linuxbrew? I know it's extra work for you, but I don't have permissions to do that. Hopefully the fixes were all correct or at least not breaking current ones:-)\n@sjackman Shaun, I am trying to carry your brew while you away, just a bit swamped here, but hopefully you'll find it up to date enough. when are you back?:-)\n. Looks like I broke it \u2013 see issue 648. I am in transit right now, will get to this only in a few hrs, if anyone can fix it, please go ahead. Thank you!\nFrom: Dominyk Tiller [mailto:notifications@github.com]\nSent: Monday, November 16, 2015 12:55 PM\nTo: Homebrew/linuxbrew\nCc: Brand, Dana\nSubject: Re: [linuxbrew] Linuxbrew team (#600)\n@danabrandhttps://github.com/danabrand Thanks Dana, you're a star. Merged into Linuxbrew and pushed. If anything broke we'll probably see issues and someone can look at it. Thank you again :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Homebrew/linuxbrew/issues/600#issuecomment-157167074.\n. Hello, can someone either apply fix suggested in issue 648 or possibly repush my branch, whatever you think it's better. i don't have access to the main repo. thanks!\n. Hello all, worked on a massive merge today. I did what I could, but I need your help.\nI went through all conflicts (100+) reported by the merge and for better or worse, resolved them. I pushed all these in my branch.\nHowever, when testing, I noticed that all formulas using \"unneeded\" for a bottle, failed. At a closer look, the auto-merged formula.rb doesn't contain a   \"def bottle_unneeded?\" line. \nWhen merging, these were reported auto-merged by git:\nAuto-merging Library/Homebrew/keg.rb\nAuto-merging Library/Homebrew/formula_installer.rb\nAuto-merging Library/Homebrew/formula.rb\nAuto-merging Library/Homebrew/extend/pathname.rb\nAuto-merging Library/Homebrew/extend/ENV/std.rb\nAuto-merging Library/Homebrew/exceptions.rb\nAuto-merging Library/Homebrew/dependency_collector.rb\nAuto-merging Library/Homebrew/cmd/test-bot.rb\nAuto-merging Library/Homebrew/cmd/pull.rb\nAuto-merging Library/Homebrew/cmd/bottle.rb\nAuto-merging Library/Homebrew/cmd/audit.rb\nBut whatever the auto-merging did, brew fails when trying to make sense of an unneeded bottle. This is the error reported when testing on zzz, tomcat, jenkins (all in that boat):\nError: block not supplied\nTesting at random on other modified formulas worked fine. \nAny ideas appreciated. thank you.\n. Hmm, just noticed issue 660 reports this as well, so the error is not necessarily related to this merge. \n. @DomT4 It's a bit more complex than that, the unneeded reference appears in a few more files in Homebrew, while not present in Linuxbrew. \nAlternatively, we could push all new formulas other than the few involving unneeded. It at least brings a bunch of them up to date, while we figure out (or Shaun does when he's back) the underlining mechanism that breaks. What do you guys think?\n. @DomT4 hmm, that's not a bad idea. I see 21 formulas using that, not that many. let me try a few. of course it's a hack and not pretty, but it does the job done for the moment.\n. @DomT4 It seems that only brew installing/updating or otherwise parsing those formulas is affected.  I discovered the behavior in my testing when testing at random brew install on some of the modified formulas in this latest merge. But then I noticed report from issue 660 as well, so I believe this happened a few merges ago. When did you guys introduced bottle unneeded/disable?\n. @DomT4 Ok. good news. Worked on an older branch of Linuxbrew pre Oct 19 and merged with Homebrew just to test the formula.rb and related formulae merging; this time the automerging worked just fine and voila, we have good Homebrew formulae. Tested installs for reported formula in issue 660, as well as a few other that have the bottle:unneeded line, they worked fine. Checked in these formulae into my latest danabrand repo. \nSo theoretically this last commit in danabrand solves the bottle:unneeded line issue, as well as it has the 100+ updated formulae in Library/Formula. I did not test them all, I tested some at random and they worked for me. I really can't test that many, you guys did a lot of upgrades and I haven't kept up, so this is some all-in-one commit and I am sure I slipped somewhere.\nDo you think you have time to test a bit this last commit? Last experience traumatized me:-) and I would want to be more cautious this time, especially with such a large merge. \n. @DomT4 Thank you Dominic. Please go ahead with the conflict resolve and if you feel we can bite the bullet, push the new commit. Fingers crossed.\n. @DomT4  BTW, managed to injure myself this weekend on a first ski trip this winter, so one hand typing now and less computer glued, but will try to watch the issues.  @sjackman  Shaun, come back!!!!!!! :)\n. Hi guys, apologies for dropping off the grid. Still recovering, boy I forget my age... I will try to poke at an up-to-date all-in-one merge this coming week, but most likely I will truly get onto it only on the 22nd. Hope to have it ready for all as Xmas present;) \n. Thanks, noted, I am in transit right now, will look at this in a few hrs, if someone else wants to fix quicker, please go ahead. Thanks!\nFrom: Naseer Ahmed [mailto:notifications@github.com]\nSent: Monday, November 16, 2015 3:23 PM\nTo: Homebrew/linuxbrew\nCc: Brand, Dana\nSubject: Re: [linuxbrew] since update there is an issue with ruby (#648)\nCC @danabrandhttps://github.com/danabrand\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Homebrew/linuxbrew/issues/648#issuecomment-157206582.\n. Hey thanks, i just pushed a fix in my branch (danabrand) on os.rb as I believe that's the source, but if you know this works and if anyone has access to the repo, please go ahead and push through. I actually don't have access to the main repo, just my branch and helping out during main maintainer being away (a.k.a Shaun)\n. @DomT4 Can you please revert as suggested to previous version before this morning's commit? I am back online now. \n. Thank you so much Dominyk. Mistake was mine for not testing more thoroughly. \n. Heh, you guys are fun - I feel part of the team now :-) On a serious note, I will garden through the doctor code and propose a patch that maybe you can test as well before attempting a commit. Or just wait for Shaun to get back, I was only worried about Linuxbrew starting to lag quite a bit behind Homebrew. Thanks again.\n. @xu-cheng Thank you - will do that, test out and push in my branch. After work hours today though, which means about 6 hrs from now.\n. I don't have time, but I will make it... Give me a couple of days. Sorry guys, it got very busy at work and that's why my previous merge was rushed and not fully tested either. Promise to get back in max 48 hrs with a merge.\n. just an update I am working on the merge, but I am looking at 108 conflicts at the moment, not sure what we reverted to or you guys been really active:-) so trolling through them... hope to push something by end of day, PST. \n. @tseemann Just tried the formula that I pushed yesterday in my danabrand repo and it seems to go through fine. This is on Centos 6.x. When installing freetype as a dependency, it used configure  --without-harfbuzz though. \n. @tseemann I can't push myself to the master - if anyone can take it from my repo and push, that will do.\n. @DomT4 Damn I thought the mess was cleaned up. Let me look at it. \n. Thanks for your contribution. Please change this to\nruby\ndepends_on \"libxml2\" unless OS.mac?\n. ",
    "MarcGodard": "After some searching I found a solution, run the following before installing:\nsudo apt-get install --no-install-recommends python-setuptools python-dev\n. Ok, still can't get it installed.\nTested with brew install hello and tested it no problem.\nSteps to install formula on ubuntu 14.04:\nRun (because without it it breaks the pdf2htmlex formula) :\nbash\nsudo apt-get install --no-install-recommends python-setuptools python-dev\nFix a bug in a dependent formula (pico or other editor):\nbash\npico ~/.linuxbrew/Library/Formula/harfbuzz.rb\nchange --with-coretext=yes with --with-coretext=auto in the arguments list\nThen run the formula:\nbash\nbrew install pdf2htmlex\nIf you get this common error:\nbash\nError: /home/ubuntu/.linuxbrew/opt/pkg-config not present or broken\nrun the following and try the formula again:\nbash\nbrew reinstall pkg-config\nlogs:\nhttps://gist.github.com/anonymous/027ad6df5a697747cac5\nerror: configure: error: C compiler cannot create executables but in hello logs everything looks fine.\n. ",
    "mohakshah": "I was facing a samilar issue while trying to install ffmpeg on Linux Mint 17.2 x64 (based off of Ubuntu 14.04). One of the dependencies, sphinx-doc, failed to build and exited with the same error about the setuptools.\nInstalling python setuptools from the distribution's repo worked for me. Simply running:\nsudo apt-get install python-setuptools\nand then installing sphinx-doc from brew\nbrew install spinx-doc\nworks properly.\nSince homebrew itself installs python setuptools on installation of the python formula (per https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md#setuptools-pip-etc), I tried using it to build sphinx-doc.\nsudo apt-get uninstall python-setuptools\nbrew install sphinx-doc                                    // fails to build\nbrew install python\nbrew install sphinx-doc                                    // builds successfully\nIf this works for others, I think python should be added as a dependency of sphinx-doc on the linuxbrew repo. Though I am not sure if it's o.k if the formula is different on linuxbrew and homebrew. \n. ",
    "walchko": "yes, sorry I am not much of a ruby guy, so is this splitting a string or something? I don't see anything in the output below that talks about flags either.\n``` bash\npi@hypnotoad ~ $ more /proc/cpuinfo\nprocessor   : 0\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nvfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 1\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nvfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 2\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nvfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nprocessor   : 3\nmodel name  : ARMv7 Processor rev 5 (v7l)\nBogoMIPS    : 38.40\nFeatures    : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt \nvfpd32 lpae evtstrm \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xc07\nCPU revision    : 5\nHardware    : BCM2709\nRevision    : a21041\nSerial      : 0000000063848a3a\n```\n. I tried changing that line and so far it seems to work on my RPi2 (armv7)\nruby\n  def flags\n    @flags ||= cpuinfo[/^Features.*/, 0].split\n  end\nI double checked on my older RPi(armv6) and it also doesn't have flags either:\n``` bash\npi@calculon ~ $ more /proc/cpuinfo \nprocessor   : 0\nmodel name  : ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS    : 2.00\nFeatures    : half thumb fastmult vfp edsp java tls \nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant : 0x0\nCPU part    : 0xb76\nCPU revision    : 7\nHardware    : BCM2708\nRevision    : 0002\nSerial      : 000000008e0a5a17\n```\n. ",
    "whitej125": "Looks like this is a dupe of https://github.com/Homebrew/homebrew-versions/issues/738... closing.  Will add on there.\n. ",
    "danielecook": "I switched to using pyenv (-; This doesn't affect me anymore. \n. ",
    "niemasd": "I'm having the same issue, any way you can still follow up? I can try using pyenv instead, but it would be nice to have python3 via brew. https://gist.github.com/anonymous/c03a501563ce727327f885d3e9a8e438. Actually, I remember now that I had somewhat hackingly gotten things running by commenting out line 52 of .linuxbrew/Library/Homebrew/os/linux/elf.rb:\nraise ErrorDuringExecution, command unless $?.success?\nI had originally done that because I was getting the following error when installing glibc (a requirement of python3):\nError: Failure while executing: [\"ldd\", \"/scratchfast/a1moshir/.linuxbrew/Cellar/glibc/2.19/lib/libc-2.19.so\"]\nCommenting out that line got me past glibc's installation, and I was able to successfully install other things that depended on glibc, but I'm guessing it broke things down the line. Perhaps I should create a new Issue for that instead? I'm guessing that fixing whatever was causing that error will (hopefully) fix the other issues?\nI reset my environment since posting that because I was going to try from scratch, so it doesn't have python3 anymore. Sorry about that!. ",
    "snaury": "On scaleway /proc/cpuinfo shows this: https://gist.github.com/snaury/8bbe67bf30417ef45abf#file-cpuinfo-txt and these changes have allowed me to brew install ruby with dependencies so far.\n. ",
    "sato-sh": "Any ideas why this might be happening?\n. ",
    "jppelteret": "@davydden I tested this according to your instructions using Ubuntu 14.04 (LTS) in a virtual machine. I configured to separate installations, one using the system BLAS/LAPACK and one using OpenBLAS from linuxbrew. Apart from there being a couple of redundant steps (3,4,6) and it requiring a upgrade of gcc to 5.x in order to install parmetis, everything appears to have worked as expected!\n. ",
    "prohde": "I'm sorry I can't test this at the moment. I would be happy if someone else could do.\n. ",
    "shoaibik": "same here\n. ",
    "vishgala": "Facing the same issue. Any updates ?\n. ",
    "ianml": "I should have some more free time starting next month, would be glad to help out then.\n. ",
    "retokromer": "In my personal opinion, it would make more sense to keep Linxubrew within the Homebrew organisation.\n. I second @mikemcquaid's remark regarding a white-list rather than a black-list for formulae.\nOn the one hand, as said, I would personally prefer having linuxbrew inside homebrew. On the other hand, frankly speaking, I have the impression -- I really hope my impression is wrong! -- that @sjackman is willing to run an one-man-show, despite his calls for help. I fixed myself the \"things\" I need on the company's computers and render-farm, but I gave up to submit the patches to linuxbrew. Sorry!\n. Perhaps this may be useful: on different Linuxes it works fine for me, giving\nhttps://gist.github.com/cc481221830ac4933e8f\n[I experience troubles on Mac, but that's are for sure my attempts to bypass that horrible Xcode.]\n. A workaround for @vol7ron until fixed: When you install first git without brew (sudo apt-get install git), it doesn\u2019t cycle \u2013 and works.\nAn information for @sjackman : Months ago the installation worked well with brew.\n. @vol7ron My remark was just meant as a provisory workaround, which I quickly tested on a test machine, where I can then install all the ca. 12-15 formulas we are using for work without problems. On all our production computers git has been installed by brew months ago, and also updated. There is indeed something broken now!\n. This is funny too: Updated Homebrew with same from reference and to reference:\n\n. OK. Yet on Homebrew ffmpeg 2.8.4 is living since 10 days; on Linuxbrew there it\u2019s still 2.8.2.\n(Caveat: It\u2019s not for me: on all our machines the latest version is running since the 22nd of December. I was just trying to share this here on Linuxbrew. Sorry!)\n. Sorry, I cant't check it on Slackware now, but on Ubuntu I have\nchecking for GC_init in -lgc... yes\nfollowed by\nchecking for zError in -lz... yes\n(Sorry for the delay, it's half past seven in the morning here ;-)\n. Neither on a Slackware test machine I do experience \u00abyour\u00bb error. This part runs well on my side. \u2013 Yet I do not longer have a \u00abpure\u00bb linuxbrew configuration. I\u2019ll try this afternoon to have some inspiration on the issue. (I\u2019m not feeling well those days, therefore no guarantee. I had a stroke five years ago, and since I\u2019m a\u2026 little fragile, as in my picture ;-)\n. Neither on Slackware I can reproduce that error.\nAlso this formula is now working well. Thank you again, @sjackman!\n. After sudo apt-get install python-setuptools this works fine. Thank you!\nNow I will test the also the installation of x265 (this was a dependency).\n. Now I have the cmake issue. I'll delve into the discussion about it.\n. No, false alarm: cmake works well.\n. And x265 as well (and also with ffmpeg, as expected). Thank you very much indeed!\n. Linuxbrew installs git 2.7.0 also on my side.\n. Thank you, Shaun, for the hint!\n. @sjackman: I saw you merged Homebrew into Linuxbrew. Now the installation works fine on my side. Therefore I guess this issue can be closed.\n. Caveat: You may install gawk before installing gcc --with-glibc (dependency). Then it should work fine.\n. Agreed, an exhaustive list of these dependencies would be useful.\n. Sorry, @sjackman, I could not see how to quick squash or rebase from the GitHub web interface. I opened #796.\n. I will. Thank you for the hint!\n. @sjackman You may add before your patch:\nbrew uninstall curl\n. It's the workaround.\n. @rwhogg This would be useful indeed!\n. This worked just perfect on my side. Thank you, @sjackman !\n. @rwhogg Just in case you haven't noticed it, this could also be useful https://github.com/Homebrew/brew/pull/168 which would be a big step forward, in my opinion.\n. ",
    "UniqMartin": "I'm alright with Linuxbrew leaving the Homebrew umbrella. I think it will reduce confusion and will bring more freedom to Linuxbrew, maybe even more visibility and thus new maintainers to the project, without denying its origins and its close ties to Homebrew (that is still evident from its name).\n. ",
    "drbenmorgan": "\nI think Linuxbrew and homebrew-science together meet a unique need for home-directory scientific software management on Linux.\nI don't know that arguments about branding matter deeply to users; I do wish that Linuxbrew was more reliable but I doubt that Linuxbrew significantly contributes to Homebrew's reputation (for better or for worse) and I don't think that people adopt Linuxbrew because it is \"a Homebrew project.\" They adopt Linuxbrew because they wanna run a newer version of blast on their cluster. :) And if they're using Apple laptops and are already familiar with Homebrew's syntax and conventions, so much the better. None of that changes based on the repository URL. Linuxbrew will still be brew for Linux.\n\nPretty much this from my own use cases as well - Homebrew/Linuxbrew have been incredibly helpful (thanks to the team and contributors!) for creating/deploying scientific software stacks across laptops, desktops and clusters with a common system (brew, the Formula DSL, taps, and no root permission requirement). So from this user's perspective, as long as these conventions remain it makes no difference to usability if linuxbrew moves in the short term. \n\nSome of these structural issues are small, like brew config being 50% useless on Linux, which is something that wouldn't necessarily be difficult to fix but nonetheless remains very OS X oriented and looks fairly bad in terms of UX. The more fundamental problem is the amount of code that is wrapped in if OS.mac? or if OS.linux? - Linuxbrew really needs its own core rather than trying to bend Homebrew's core to awkwardly fit, or we need to start working on core PRs to make it a better cross-platform experience by creating or switching to methods that work on both platforms, but without significantly worsening the experience for OS X users who are the primary use-case for Homebrew.\nThis leads me onto my next point, which is that there seems to be a lot of general interest in Linuxbrew but not a lot of interest actually helping maintain this ship and let it rig its own sails. To my knowledge, of everyone who offered to help, nobody who wasn't a core Homebrew maintainer or Dana contributed much in Shaun's absence. As far as I saw, 95% of the time everything was handled by @dunn, myself or Dana. I can understand maintainers elsewhere not having the time to contribute to Linuxbrew, and consequently think very strongly Linuxbrew needs its own team that just does Linuxbrew.\n\nGuilty as charged...  What's the feeling, if any, on Linuxbrew needing its own core versus providing more OS abstraction in Homebrew (in other words, where can contribution be most useful to both projects)? The same goes for the (desired/planned?) feature of the Library/Formula folder becoming a tap - it's noted as a lot of work, but seems useful in the context of maintaining Formulae for both platforms.\n. ",
    "midzer": "Retrying build from scratch now.\nPython headers have to be installed via apt-get install python-dev\n. @rwhogg I reinstalled fresh Linuxbrew with python headers. fontforge still fails to install.\nError message remains the same as in first posts gist in config.log:\n\n/usr/bin/ld: cannot find -lintl\ncollect2: error: ld returned 1 exit status\n. \n",
    "sahilseth": "Facing the same issue:\nbrew install opam --cc=gcc\nWarning: opam-1.2.2_1 already installed\nbrew install zlib\nError: zlib cannot be built with any available compilers.\nTo install this formula, you may need to:\n  brew install gcc\n. ",
    "gregory-nisbet": "@DoomHammer brew install opam --cc=gcc worked for me right out of the box.\nI am a bit surprised aspcud isn't listed as an explicit dependency of opam, since that's the preferred dependency solver for the project. Oh I see, the logic in opam.rb doesn't take Linux into account.\n```\naspcud has a fairly large buildtime dep tree, and uses gringo,\nwhich requires C++11 and is inconvenient to install pre-10.8\nif MacOS.version > 10.7\n  depends_on \"aspcud\" => :recommended\nelse\n  depends_on \"aspcud\" => :optional\nend\n```\nBuilding aspcud from source should work pretty well on most Linuxes though.\nThe aspcud recipe itself is kind of a minefield though. First it chokes on a missing dependency makedepend, and then later it complains about a missing /home/<user>/.linuxbrew/opt/pkg-config. I never created such a file and don't know what it is supposed to do. I'll look into fixing the recipe.\nEdit: just touching the opt/pkg-config file is enough to get the aspcud formula to build correctly.\n@sahilseth What version of gcc and what distribution are you using?\n. ",
    "suhlig": "I had the same issue on RHEL 6.7, and symlinking the existing gcc helped.\n. ",
    "dvbportal": "The message is:\nsrc/ev_kqueue.c:17:23: fatal error: sys/event.h: No such file or directory\n #include <sys/event.h>\n                       ^\ncompilation terminated.\nmake: *** [src/ev_kqueue.o] Error 1\nmake: *** Waiting for unfinished jobs....\nThis is on Ubuntu 14.04 64 bit.\nkqueue is BSD specific. \n[1] https://en.wikipedia.org/wiki/Kqueue\n. That variant gives me this error:\nError: undefined method `mac' for OS:Module\nI also tried:\nargs = %W[\n        TARGET=generic\n        USE_KQUEUE=#{OS.mac? ? \"1\" : \"0\"}\n        USE_POLL=1\n        USE_PCRE=1\n        USE_OPENSSL=1\n        USE_ZLIB=1\n        ADDLIB=-lcrypto\n      ]\nwhich is syntactically correct, but the code does not evaluate USE_KQUEUE=0 and still includes\nkqueue with the error:\nsrc/ev_kqueue.c:17:23: fatal error: sys/event.h: No such file or directory\n #include <sys/event.h>\n                       ^\ncompilation terminated.\nDo you have other ideas? I understand the need to keep the formular as compact as possible.\n. Hi, here it is: https://gist.github.com/7ce0b97129d5deb84223\nThe build option is in place:\n-DBUILD_OPTIONS='\"USE_ZLIB=1 USE_POLL=1 USE_KQUEUE=0 USE_OPENSSL=1 USE_PCRE=1\"'\nBut the compiler is still called with -DENABLE_KQUEUE. I suspect a bug in the make files.\n. No, it produces an empty line.\n```\nLast 15 lines from /home/ubuntu/.cache/Homebrew/Logs/haproxy/01.make:\n2016-01-10 17:29:35 +0100\nmake\nCC=/usr/bin/gcc-4.8\nCFLAGS=-Os -w -pipe -march=core2\nLDFLAGS=-L/home/ubuntu/.linuxbrew/lib -Wl,-rpath,/home/ubuntu/.linuxbrew/lib\nTARGET=generic\nUSE_POLL=1\nUSE_PCRE=1\nUSE_OPENSSL=1\nUSE_ZLIB=1\nADDLIB=-lcrypto\nmake: *** empty string invalid as file name.  Stop.\n```\nIs there any way to supress the empty array entry?\n. Likewise and no worries. The compact does not work as expected though. Still an empty entry.\n```\nLast 15 lines from /home/ubuntu/.cache/Homebrew/Logs/haproxy/01.make:\n2016-01-10 17:51:40 +0100\nmake\nCC=/usr/bin/gcc-4.8\nCFLAGS=-Os -w -pipe -march=core2\nLDFLAGS=-L/home/ubuntu/.linuxbrew/lib -Wl,-rpath,/home/ubuntu/.linuxbrew/lib\nTARGET=generic\nUSE_POLL=1\nUSE_PCRE=1\nUSE_OPENSSL=1\nUSE_ZLIB=1\nADDLIB=-lcrypto\nmake: *** empty string invalid as file name.  Stop.\n```\n. That works, cool.  I would also like to change the target to linux2628 because every linux kernel supports that nowadays and we get better performance. ok?\nargs = %W[\n      TARGET=#{OS.mac? ? \"generic\" : \"linux2628\"}\n      USE_POLL=1\n      USE_PCRE=1\n      USE_OPENSSL=1\n      USE_ZLIB=1\n      ADDLIB=-lcrypto\n    ]\n    args << \"USE_KQUEUE=1\" if OS.mac?\n. Cool. I updated the PR accordingly.\n. ",
    "thriqon": "Shall I request this on Homebrew/homebrew instead?\n. PIE is used for Address Space Layout Randomization. It's used to protect against attacks based on knowledge of the memory layout (buffer overflows etc). AFAIK the position of main is shifted around as well, which makes it impossible to use 'normal' executables.\nI whish you a nice travel! I'll bump it again then...\n. This could be related to a similar bug I ran into a few days ago: #612\nCould you do a file on the executable in question and comment with the result here?\n. OK, this seems to be a similar, albeit not identical problem to mine ;-) It has the same origins though: Homebrew trying to be smarter than it is. Am I right to assume that the config file does not have a shebang? (#!/bin/bash)?\n. ",
    "jrderuiter": "File output is below. I also included an ls to show the permissions of the files. As I previously indicated, doing chmod +x on the files solves the issue. Seems that it may indeed be related to the mentioned issue if permissions are cleaned-up wrongly.\nbash\nj.d.ruiter@steroid:~/.linuxbrew/Cellar/r/3.2.2_1/lib/R/bin$ file *\nBATCH:         ASCII text\nbuild:         ASCII text\ncheck:         ASCII text\nCOMPILE:       ASCII text\nconfig:        ASCII text\nexec:          directory\nf77_f2c:       Bourne-Again shell script, ASCII text executable\nINSTALL:       ASCII text\njavareconf:    ASCII text, with very long lines\nlibtool:       Bourne-Again shell script, ASCII text executable\nLINK:          ASCII text\nmkinstalldirs: Bourne-Again shell script, ASCII text executable\npager:         Bourne-Again shell script, ASCII text executable\nR:             Bourne-Again shell script, ASCII text executable\nRcmd:          Bourne-Again shell script, ASCII text executable\nRd2pdf:        ASCII text\nRdconv:        ASCII text\nRdiff:         ASCII text\nREMOVE:        ASCII text\nRprof:         ASCII text\nRscript:       ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=cfcd6acac2e6ca11847f148e0efcdd3d257e12d5, not stripped\nrtags:         ASCII text\nSHLIB:         ASCII text\nStangle:       ASCII text\nSweave:        ASCII text\nbash\nj.d.ruiter@steroid:~/.linuxbrew/Cellar/r/3.2.2_1/lib/R/bin$ ls -alih\ntotal 1.3M\n4308815652 drwxr-xr-x  3 j.d.ruiter domain users  598 Oct 26 13:24 .\n4308815617 drwxr-xr-x 10 j.d.ruiter domain users  267 Oct 26 13:25 ..\n4308740360 -r--r--r--  1 j.d.ruiter domain users 1.8K Oct 26 13:24 BATCH\n4308815655 -r--r--r--  1 j.d.ruiter domain users  317 Oct 26 13:24 build\n4306613928 -r--r--r--  1 j.d.ruiter domain users  317 Oct 26 13:24 check\n4306924644 -r--r--r--  1 j.d.ruiter domain users 2.2K Oct 26 13:24 COMPILE\n4306924647 -r--r--r--  1 j.d.ruiter domain users 9.3K Oct 26 13:24 config\n4306924669 drwxr-xr-x  2 j.d.ruiter domain users   19 Oct 26 13:24 exec\n4310048686 -r-xr-xr-x  1 j.d.ruiter domain users 3.6K Oct 26 13:24 f77_f2c\n4306613927 -r--r--r--  1 j.d.ruiter domain users  823 Oct 26 13:24 INSTALL\n4306924649 -r--r--r--  1 j.d.ruiter domain users  15K Oct 26 13:24 javareconf\n4303843917 -r-xr-xr-x  1 j.d.ruiter domain users 269K Oct 26 13:24 libtool\n4306924645 -r--r--r--  1 j.d.ruiter domain users 1.4K Oct 26 13:24 LINK\n4303896568 -r-xr-xr-x  1 j.d.ruiter domain users 3.5K Oct 26 13:24 mkinstalldirs\n4306924650 -r-xr-xr-x  1 j.d.ruiter domain users  483 Oct 26 13:24 pager\n4308740363 -r-xr-xr-x  1 j.d.ruiter domain users 9.0K Oct 26 13:24 R\n4306924648 -r-xr-xr-x  1 j.d.ruiter domain users 1.4K Oct 26 13:24 Rcmd\n4308815653 -r--r--r--  1 j.d.ruiter domain users  312 Oct 26 13:24 Rd2pdf\n4308740361 -r--r--r--  1 j.d.ruiter domain users  359 Oct 26 13:24 Rdconv\n4303843916 -r--r--r--  1 j.d.ruiter domain users  258 Oct 26 13:24 Rdiff\n4303843915 -r--r--r--  1 j.d.ruiter domain users  158 Oct 26 13:24 REMOVE\n4308815654 -r--r--r--  1 j.d.ruiter domain users  310 Oct 26 13:24 Rprof\n4308740369 -r-xr-xr-x  1 j.d.ruiter domain users  14K Oct 26 13:24 Rscript\n4306613929 -r--r--r--  1 j.d.ruiter domain users 4.1K Oct 26 13:24 rtags\n4308740362 -r--r--r--  1 j.d.ruiter domain users  155 Oct 26 13:24 SHLIB\n4310048685 -r--r--r--  1 j.d.ruiter domain users  318 Oct 26 13:24 Stangle\n4306924646 -r--r--r--  1 j.d.ruiter domain users  316 Oct 26 13:24 Sweave\n. Jep.\n``` bash\nconfig -- Simple shell script to get the values of basic R configure\nvariables, or the header and library flags necessary for linking\nagainst R.\n\nUsage:\nR CMD config [options] [VAR]\n```\n. ",
    "arunnair411": "I just tried doing that, but I received the message below saying that it already exists.\n```\nln: failed to create symbolic link \u2018/home/arun/.linuxbrew/bin/g++\u2019: File exists\narun@arun-Lenovo-Y50-70:~/Desktop$ ls -alh /home/arun/.linuxbrew/bin/g++\nlrwxrwxrwx 1 arun arun 27 Oct 23 09:42 /home/arun/.linuxbrew/bin/g++ -> ../Cellar/gcc/5.2.0/bin/g++\n```\n. So I got what was wrong. A shared C++ library wasn't being linked correctly, so I ran:\nbrew unlink gcc && brew link gcc\nand voila! CMake installed fine.\n. Any thoughts as to what I can do to get it working?\n. ",
    "bjorncs": "After a reboot Linuxbrew was suddenly able to install vim. I tried to reproduce the issue without success.\n. ",
    "ealgase": "I the same issue.  How do you run disk utility?\n. ",
    "timwangdev": "You could preview the change at http://timwang.me/linuxbrew/\nI could help you enhance and add zh-CN translation for the homepage of Linuxbrew if you guys needed.\n. @sjackman Happy new year! Are you active right new?\n. ",
    "mohdule": "AUR is the solution :) !\n. NP Bro , it's not that urgent take your time .\nBut i find out that AUR is always updated so i think there is no need for me to use LinuxBrew.\n. ",
    "DimitriDokuchaev": "Hey ahundt \nFollowing your issue i see you do have a problem with gawk, i have it installed and it is working correctly\nfurther you posted a script that can't really be applied to my system, since this is a chromebook, so no apt-get install build-essential all that stuff.\nI am actually going through your script and the original chromebook tutorial, trying to realize what separates them and if there is anything in common, i am pretty new to linuxbrew so I am still trying to get around all this, I ll try to update this post, if I go any further.\nThanks ahundt\n. ",
    "PerilousApricot": "FWIW, I'm using homebrew to install some newer versions of packages than what centos provides. Centos6' EOL is in 2020 (!), so having somewhat new development tools is a necessity.\n. ",
    "vzhong": "Actually it seems like I can avoid this problem by using the tl;dr instructions. \n. ",
    "youtux": "Sorry, I assumed that the contributing guidelines were the same as for Homebrew. I was wrong.\n. In that case you wouldn't benefit from the binary version already on Bintray, am I right? Or is that only an homebrew (for Mac OS) thing?\nMaybe the brewed-curl and brewed-openssl options should be the default on Linux, too.\n. ",
    "benjaminfjones": "Update - if I install curl manually, the profanity configure scripts gets further, but fails saying configure: error: libuuid is required for profanity. Now it seems that a dependency 'ossp-uuid' has already been installed and is incompatible with 'libuuid' which looks like it provides the right symbol.\n. Opened #674 for the libuuid problem.\n. ",
    "mkinz": "I am getting the same error as well.\n. ",
    "ryanjafari": "Works thanks guys!\n. ",
    "erictleung": "Appears to be a duplicate of #648 \n. ",
    "aklatzke": "This appears to be related to docbook-utils and not LinuxBrew.\nOn a CentOS environment I ran: \nyum remove docbook-utils\nAnd was able to successfully install something with fontconfig as a dependency.\n. ",
    "mu22le": "Thanks a lot for the help. Unfortunately the reason I'm using homebrew is that I do not have root access on this machine, I cannot remove docbook-utils. Would it even be possible to install a homebrewed version of nsgmls and have fontconfig use that? I've been loking for a homebrew recipe that provides nsgmls. I only found open-sp which provided onsgmls and does not work.\n. @sjackman, thanks anyway!\n@aklatzke could you tell me what recipe homebrew installed to provide nsgmls whaen you removed docbook-utils?\n. ",
    "koheimiya": "I managed the same problem without root access.\nJust brew install fontconfig --without-docs.\nMay be too late, but I hope it helps someone in a similar situation.. ",
    "andrewspielvogel": "Here are the logs\nhttps://gist.github.com/a4ff740aadfc0387c903\n. ",
    "wengs": "I encountered this issue while installing libpng on my Linux server too. I tried the following instead\nbrew install  https://dl.bintray.com/homebrew/mirror/libpng-1.6.19.tar.xz.\nBut I got another error: \nError: /home/tnf_app/.cache/Homebrew/Formula/libpng-1.6.19.tar.xz:1: invalid multibyte char (UTF-8)\nPlease report this bug:\n    https://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:21:in `module_eval'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:21:in `load_formula'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:34:in `load_formula_from_path'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:83:in `load_file'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:138:in `load_file'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:74:in `klass'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:70:in `get_formula'\n/home/tnf_app/.linuxbrew/Library/Homebrew/formulary.rb:205:in `factory'\n/home/tnf_app/.linuxbrew/Library/Homebrew/extend/ARGV.rb:18:in `block in formulae'\n/home/tnf_app/.linuxbrew/Library/Homebrew/extend/ARGV.rb:16:in `map'\n/home/tnf_app/.linuxbrew/Library/Homebrew/extend/ARGV.rb:16:in `formulae'\n/home/tnf_app/.linuxbrew/Library/Homebrew/cmd/install.rb:45:in `install'\n/home/tnf_app/.linuxbrew/Library/brew.rb:145:in `<main>'\n. ",
    "tibaes": "@wengs I replaced the libpng formula from the linuxbrew with the home-brew version and it worked just fine.\n@dunn good to know! Do you prefer that I close the issue?\n. ",
    "aviantask": "The problem has reoccurred now with new version being 6.9.2-8\n. ",
    "kupolak": "+1 I've got the same problem\n``` sh\n==> Downloading http://www.imagemagick.org/download/releases/ImageMagick-6.9.2-6.tar.xz\ncurl: (22) The requested URL returned error: 404 Not Found\nTrying a mirror...\n==> Downloading http://ftp.nluug.nl/ImageMagick/ImageMagick-6.9.2-6.tar.xz\ncurl: (22) The requested URL returned error: 404 Not Found\nError: Failed to download resource \"imagemagick\"\nDownload failed: http://ftp.nluug.nl/ImageMagick/ImageMagick-6.9.2-6.tar.xz'\n```\nCan someone fix the links?\n. ",
    "clayshieh": "Any updates on this issue?\n. ",
    "CoolOmar2020": "https://gist.github.com/anonymous/33b14151949115ff58ae\n. ",
    "peteygao": "@DomT4 or @danabrand Bump.\n. ",
    "eallik": "I'm also experiencing exactly the same problem.\n. ",
    "Rudloff": "Oh, you're right, I needed a token with gist rights. Thanks!\n. I am not sure nethogs works on OSX but I will try to build it.\n. Like I thought, the current nethogs does not work on OSX.\nBut I submitted a patch to add OSX compatibility: https://github.com/raboof/nethogs/pull/20\n. Since I don't really need LDAP, I installed it with --without-apache --without-ldap and it worked.\nHowever, the binary seems to use some libraries from my distribution:\nlinux-vdso.so.1 (0x00007ffc303c6000)\n    libcrypt.so.1 => /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f059a3f6000)\n    libcrypto.so.1.0.0 => /home/pierre/.linuxbrew/lib/libcrypto.so.1.0.0 (0x00007f0599fa1000)\n    libssl.so.1.0.0 => /home/pierre/.linuxbrew/lib/libssl.so.1.0.0 (0x00007f0599d30000)\n    libz.so.1 => /home/pierre/.linuxbrew/lib/libz.so.1 (0x00007f0599b1e000)\n    libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f0599907000)\n    libedit.so.2 => /usr/lib/x86_64-linux-gnu/libedit.so.2 (0x00007f05996ce000)\n    libncursesw.so.6 => /home/pierre/.linuxbrew/lib/libncursesw.so.6 (0x00007f059947a000)\n    librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f0599272000)\n    libpng16.so.16 => /home/pierre/.linuxbrew/lib/libpng16.so.16 (0x00007f0599049000)\n    libjpeg.so.8 => /home/pierre/.linuxbrew/lib/libjpeg.so.8 (0x00007f0598e19000)\n    libcurl.so.4 => /home/pierre/.linuxbrew/lib/libcurl.so.4 (0x00007f0598bc4000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f05988c3000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f05986bf000)\n    libnsl.so.1 => /lib/x86_64-linux-gnu/libnsl.so.1 (0x00007f05984a7000)\n    libxml2.so.2 => /home/pierre/.linuxbrew/lib/libxml2.so.2 (0x00007f0598180000)\n    libfreetype.so.6 => /home/pierre/.linuxbrew/lib/libfreetype.so.6 (0x00007f0597efd000)\n    libodbc.so.2 => /home/pierre/.linuxbrew/opt/unixodbc/lib/libodbc.so.2 (0x00007f0597ca6000)\n    libstdc++.so.6 => /home/pierre/.linuxbrew/lib/libstdc++.so.6 (0x00007f0597972000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f05975c9000)\n    libbsd.so.0 => /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f05973b9000)\n    libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f059718f000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f0596f72000)\n    liblber-2.4.so.2 => /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2 (0x00007f0596d63000)\n    libldap_r-2.4.so.2 => /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2 (0x00007f0596b11000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f059a62d000)\n    libbz2.so.1.0 => /lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007f0596901000)\n    libltdl.so.7 => /usr/lib/x86_64-linux-gnu/libltdl.so.7 (0x00007f05966f7000)\n    libgcc_s.so.1 => /home/pierre/.linuxbrew/lib/libgcc_s.so.1 (0x00007f05964e5000)\n    libsasl2.so.2 => /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00007f05962c9000)\n    libgnutls-deb0.so.28 => /usr/lib/x86_64-linux-gnu/libgnutls-deb0.so.28 (0x00007f0595faa000)\n    libp11-kit.so.0 => /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00007f0595d64000)\n    libtasn1.so.6 => /usr/lib/x86_64-linux-gnu/libtasn1.so.6 (0x00007f0595b50000)\n    libnettle.so.4 => /usr/lib/x86_64-linux-gnu/libnettle.so.4 (0x00007f059591e000)\n    libhogweed.so.2 => /usr/lib/x86_64-linux-gnu/libhogweed.so.2 (0x00007f05956ef000)\n    libgmp.so.10 => /home/pierre/.linuxbrew/lib/libgmp.so.10 (0x00007f059548d000)\n    libffi.so.6 => /usr/lib/x86_64-linux-gnu/libffi.so.6 (0x00007f0595285000)\n. I personally don't mind that it uses system libraries, I just mentioned it in case someone wants to fix the Formula.\n. It seems to work for me too, thanks!\n. The upstream project does not seem to be maintained anymore but the fix would be quite easy to include in the Formula:\n``` diff\ndiff --git a/xar.rb b/xar.rb\nindex eaebb66..94efda1 100644\n--- a/xar.rb\n+++ b/xar.rb\n@@ -20,6 +20,7 @@ class Xar < Formula\n   patch :DATA\ndef install\n+    inreplace \"lib/Makefile.inc.in\", \"$(CC) -shared -Wl,-soname,$(LIBXAR_SNAME) -o $@ $+ @LIBS\", \"$(CC) $(LDFLAGS) -shared -Wl,-soname,$(LIBXAR_SNAME) -o $@ $+ @LIBS\"\n     system \"./configure\", \"--disable-debug\", \"--disable-dependency-tracking\",\n                           \"--prefix=#{prefix}\", \"--mandir=#{man}\"\n     system \"make\"\n``\n. Do you think I should report it to homebrew-dupes ?\n. Yes, the patch I posted does fix the issue for me but I'm not sure why.\n. @sjackman Yes, your smaller patch works too.\n. I don't get any error message. Without my patch, cairo is simply built without xlib support (the option is not available).\nThen I get this kind of error when I try to build formulae like gtk+:No package 'cairo-xlib' found`\n. It is already installed.\n. Here it is: https://gist.github.com/Rudloff/ebd6baa383b0e64de13f\n. Oh, OK.\nIn this case, I do get an error:\nchecking for cairo's XCB surface backend feature... \nchecking for xcb... no\nchecking whether cairo's XCB surface backend feature could be enabled... no (requires xcb >= 1.6 xcb-render >= 1.6 http://xcb.freedesktop.org)\nconfigure: error:  XCB surface backend feature could not be enabled\nHere are the logs: https://gist.github.com/Rudloff/229344610460955b98fd\n. It is already installed (1.10-3+b1).\n. It does not seem to work, I still get the same error:\nhttps://gist.github.com/Rudloff/acc153de4f58907bbf9e\n. ",
    "albertz": "After I did brew install curl, I now get another error: #682 \n. brew doctor still reports this problem. E.g.:\n```\nWarning: Homebrew's bin was not found in your PATH.\nConsider setting the PATH for example like so\n    echo 'export PATH=\"/work/asr2/zeyer/linuxbrew/bin:$PATH\"' >> ~/.zshrc\nWarning: You have a non-Homebrew 'pkg-config' in your PATH:\n  /u/zeyer/.linuxbrew/bin/pkg-config\n```\n/u/zeyer/.linuxbrew is a symlink to /work/asr2/zeyer/linuxbrew.\n. Yes I could but I would like to be able to move it later to some other place, that's why I use the symlink and from everywhere I refer to it as /u/zeyer/.linuxbrew.\nAlso, I think that Homebrew/Linuxbrew should be able to detect such cases. \n. With brew install -vd git:\n==> Verifying git--html-2.6.1.tar.xz checksum\n/usr/lib/ruby/1.8/fileutils.rb:264:in `rmdir'\nErrno::ENOTEMPTY: Directory not empty - /work/asr2/zeyer/linuxbrew/Cellar/git/2.6.1/lib/perl/5.14.2\n1. raise\n2. backtrace\n3. shell\nChoose an action: 2\n/usr/lib/ruby/1.8/fileutils.rb:264:in `rmdir'\n/usr/lib/ruby/1.8/fileutils.rb:264:in `rmdir'\n/usr/lib/ruby/1.8/fileutils.rb:263:in `each'\n/usr/lib/ruby/1.8/fileutils.rb:263:in `rmdir'\n/work/asr2/zeyer/linuxbrew/Library/Formula/git.rb:155:in `install'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/debrew.rb:22:in `install'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/debrew.rb:97:in `debrew'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/debrew.rb:22:in `install'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/build.rb:130:in `install'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/formula.rb:906:in `brew'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/formula.rb:1486:in `stage'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/resource.rb:91:in `unpack'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/extend/fileutils.rb:17:in `mktemp'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/resource.rb:88:in `unpack'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/resource.rb:81:in `stage'\n(__FORWARDABLE__):3:in `__send__'\n(__FORWARDABLE__):3:in `stage'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/formula.rb:1477:in `stage'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/formula.rb:902:in `brew'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/build.rb:108:in `install'\n/work/asr2/zeyer/linuxbrew/Library/Homebrew/build.rb:177\nIn the shell:\nsulfid% ls -la /work/asr2/zeyer/linuxbrew/Cellar/git/2.6.1/lib/perl/5.14.2\ntotal 6\ndrwxrwxr-x 3 zeyer assi 3 Dec 11 15:57 .\ndrwxrwxr-x 3 zeyer assi 3 Dec 11 15:56 ..\ndrwxrwxr-x 3 zeyer assi 3 Dec 11 15:56 auto\nsulfid% ls -la /work/asr2/zeyer/linuxbrew/Cellar/git/2.6.1/lib/perl/5.14.2/auto\ntotal 6\ndrwxrwxr-x 3 zeyer assi 3 Dec 11 15:56 .\ndrwxrwxr-x 3 zeyer assi 3 Dec 11 15:57 ..\ndrwxrwxr-x 2 zeyer assi 3 Dec 11 15:56 Git\nsulfid% ls -la /work/asr2/zeyer/linuxbrew/Cellar/git/2.6.1/lib/perl/5.14.2/auto/Git\ntotal 7\ndrwxrwxr-x  2 zeyer assi    3 Dec 11 15:56 .\ndrwxrwxr-x  3 zeyer assi    3 Dec 11 15:56 ..\n-rw-rw-r--+ 1 zeyer assi 1642 Dec 11 15:56 .packlist\n. I did a brew update and then tried brew install git again. It still fails but maybe that is an unrelated error. It has some more dependencies now and fails on one of them.\n```\n$ brew install git\n==> Installing dependencies for git: binutils, linux-headers, glibc, openssl, pkg-config, curl\n...\n==> Installing git dependency: linux-headers\n==> Downloading https://linuxbrew.bintray.com/bottles/linux-headers-3.15.9.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring linux-headers-3.15.9.x86_64_linux.bottle.tar.gz\n/work/asr2/zeyer/linuxbrew/Cellar/linux-headers/3.15.9: 731 files, 3.3M\n==> Installing git dependency: glibc\n==> Downloading http://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\n==> Downloading from http://www.gutscheinrausch.de/mirror/gnu/glibc/glibc-2.19.tar.bz2\n################################################################## 100.0%\n==> ../configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/work/asr2/zeyer/linuxbrew/Ce\nLast 15 lines from /u/zeyer/.cache/Homebrew/Logs/glibc/01.configure:\nchecking for gmsgfmt... no\nchecking for msgfmt... msgfmt\nchecking version of msgfmt... 0.18.1, ok\nchecking for makeinfo... makeinfo\nchecking version of makeinfo... 4.13, ok\nchecking for sed... sed\nchecking version of sed... 4.2.1, ok\nchecking for gawk... gawk\nchecking version of gawk... 4.0.1, ok\nchecking for nm... nm\nchecking LD_LIBRARY_PATH variable... contains current directory\nconfigure: error: \n LD_LIBRARY_PATH shouldn't contain the current directory when\n building glibc. Please change the environment variable\n*** and run configure again.\n```\nThe error is not because of my env:\n$ echo $LD_LIBRARY_PATH\n/usr/lib32  /usr/local/lib  /usr/local/cuda-6.5/lib64\nI also wonder, a whole new glibc, can't it just use the system glibc?\n. I reported that separately: #807\n. @al-the-x The options suggested (--with-brewed-curl --with-brewed-openssl --without-tcl-tk) will not remove the Glibc dependecy, so those don't help me.\n. brew install -s git worked now for me. I cannot use the bottled version because of #898.\n. @philippbayer My output looks like this because I use Fish. Fish interprets it as an array (separating by \":\") and then prints every item of the array just separated by spaces.\nEdit: Actually, you were right. Fish behaves as I described, however, you miss the fact that there are empty entries. The same in Bash:\n$ echo $LD_LIBRARY_PATH\n/usr/lib32::/usr/local/lib::/usr/local/cuda-6.5/lib64\nBtw., I think Homebrew on MacOSX always unsets LD_LIBRARY_PATH (or even the whole env) before it runs any setup, or does it not? And earlier, I think it did at least do some cleanup/fixing of the env, like in this case, removing empty entries from LD_LIBRARY_PATH. Maybe on Linux we should do the same? Or would that break too much things?\nMaybe I should also just fix my rc-files but who knows where this comes from...\n. Yes, fixing LD_LIBRARY_PATH fixes this error. I guess we can close this? Or is this a bug in Linuxbrew and it should unset itself such stuff?\n. But I need this LD_LIBRARY_PATH so that my environment works properly.\n. There are some custom and proprietary tools installed in /usr/local, also CUDA, and I have some research software which e.g. links to CUDA, and I must work with them all the time, so I have them in my LD_LIBRARY_PATH.\n. Yes, that works.\nBut I wonder, this bug is not really fixed then? Maybe I want to use the newer Glibc via Linuxbrew.\n. I don't have root access so I cannot edit /etc/ld.so.conf.\n. I now tried to reset LD_LIBRARY_PATH but I get the bug even then.\n. I now uninstalled Glibc (brew uninstall glibc) and then, brew install -s lua worked for me.\nzeyer@sulfid ~> ldd .linuxbrew/bin/lua\n        linux-vdso.so.1 =>  (0x00007fffab1fe000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f35fc8df000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f35fc6db000)\n        libreadline.so.6 => /work/asr2/zeyer/linuxbrew/lib/libreadline.so.6 (0x00007f35fc499000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f35fc0da000)\n        /work/asr2/zeyer/linuxbrew/lib/ld.so => /lib64/ld-linux-x86-64.so.2 (0x00007f35fcc0a000)\n        libncursesw.so.5 => /lib/x86_64-linux-gnu/libncursesw.so.5 (0x00007f35fbeac000)\n        libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f35fbc85000)\nI'm not exactly sure what this means.\n. I think actually I was wrong and uCommon includes Common.\n. This fixed it for me:\nrm /work/asr2/zeyer/linuxbrew/opt/curl\nNow it again uses my system Curl which works.\nShouldn't brew unlink curl have also removed that link?\n. Well, rm /work/asr2/zeyer/linuxbrew/opt/curl fixed it already. After that, it uses my system curl and it worked just fine. After reinstalling Linuxbrew openssl and curl, also Linuxbrew curl worked again.\nMaybe Linuxbrew should detect if Curl is broken? It wrongly assumes that the download server is down and tries another mirror.\n. ",
    "vol7ron": "This is the output I get when I do brew install git or brew update\nOutput:\n\n==> Installing git\n==> Installing git\n==> Installing git\nthere's a lot of theses, which I've cut out, but you get the idea\n==> Installing git\n==> Installing git\n==> Installing git\nError: stack level too deep\nPlease report this bug:\nhttps://github.com/Homebrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/usr/lib/ruby/1.9.1/set.rb:221\n:~$ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: Git could not be found in your PATH.\nHomebrew uses Git for several internal functions, and some formulae use Git\ncheckouts instead of stable tarballs. You may want to install Git:\n brew install git\n\nBasically, it seems git cannot be installed via homebrew, or at least linuxbrew.  I'm not sure if this is by design, since I think git is also a dependency, or at least integrated into homebrew in some way.\n. Just git in a new install of VirtualBox Ubuntu instance.\n. @retokromer yes, I can install git manually via apt-get or through the Ubuntu App store, but thought this was worth reporting as an issue.  \nIssue 2\nOnce git is installed (there are no updates from brew update and brew doctor returns nothing), I have tried to install git via homebrew (e.g., brew install git).  This yields another error when trying to make tcl-tk.  I'm guessing the X11 library is not loaded, since it could not find the path.\n```\nIn file included from /tmp/tcl-tk--tk20151231-23694-1sitydr/tk8.6.4/unix/../generic/tkPort.h:21:0,\n                 from /tmp/tcl-tk--tk20151231-23694-1sitydr/tk8.6.4/unix/../generic/tkInt.h:19,\n                 from /tmp/tcl-tk--tk20151231-23694-1sitydr/tk8.6.4/unix/../generic/tkStubLib.c:14:\n/tmp/tcl-tk--tk20151231-23694-1sitydr/tk8.6.4/unix/../generic/tk.h:96:25: fatal error: X11/Xlib.h: No such file or directory\n #   include \n                         ^\ncompilation terminated.\nmake: *** [tkStubLib.o] Error 1\n==> Formula\nTap: homebrew/homebrew-dupes\nPath: ~/.linuxbrew/Library/Taps/homebrew/homebrew-dupes/tcl-tk.rb\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew.git\nHEAD: bb453ad33892df0d5560a177890a94810ecc71af\nLast commit: 3 weeks ago\nHOMEBREW_PREFIX: ~/.linuxbrew\nHOMEBREW_REPOSITORY: ~/.linuxbrew\nHOMEBREW_CELLAR: ~/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: single-core 64-bit 6\nOS X: 0-x86_64\nXcode: N/A\nCLT: N/A\nClang: N/A\nX11: N/A\nSystem Ruby: 1.9.3-p484 => /usr/bin/ruby1.9.1\nPerl: /usr/bin/perl\nPython: /usr/bin/python => /usr/bin/python2.7\nRuby: /usr/bin/ruby => /usr/bin/ruby1.9.1\nJava: N/A\n==> ENV\nCC: /usr/bin/gcc-4.8\nCXX: /usr/bin/g++-4.8\nOBJC: /usr/bin/gcc-4.8\nOBJCXX: /usr/bin/g++-4.8\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/~/.linuxbrew/include\nLDFLAGS: -L/~/.linuxbrew/lib -Wl,-rpath,/~/.linuxbrew/lib\nMAKEFLAGS: -j1\nCMAKE_PREFIX_PATH: ~/.linuxbrew\nPKG_CONFIG_LIBDIR: ~/.linuxbrew/lib/pkgconfig\nPATH: ~/.linuxbrew/Cellar/tcl-tk/8.6.4/bin:~/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:~/.linuxbrew/Library/ENV/scm\nError: homebrew/dupes/tcl-tk 8.6.4 did not build\nLogs:\n     ~/.cache/Homebrew/Logs/tcl-tk/05.configure\n     ~/.cache/Homebrew/Logs/tcl-tk/06.make\n     ~/.cache/Homebrew/Logs/tcl-tk/04.make\n     ~/.cache/Homebrew/Logs/tcl-tk/01.configure\n     ~/.cache/Homebrew/Logs/tcl-tk/02.make\n     ~/.cache/Homebrew/Logs/tcl-tk/03.make\n```\nNote: I replaced all instances of home/<username> and /home/<username> above, with ~\n\nSolution\nIn order to address this, I've tried to brew install x11vnc, which I was hoping would have the necessary libraries.  It did not.  sudo apt-get install xauth also did not work, since it seemed to already be installed.\nThe solution seemed to be installing the x11 dev: sudo apt-get install libx11-dev.  After doing this, linuxbrew failed on another error (curl was not installed).  So, I needed to install curl, which I could do through brew.\nsudo apt-get install libx11-dev\nbrew install curl\nThis is worth mentioning, because it seems there are a lot of dependencies that need to available before git can be installed through linuxbrew and not everyone may have access to sudo, which is needed.  Because git is so prevalent to the homebrew/linuxbrew userbase and Ubuntu is one of the most popular Linux distros, I would think we'd want to have this fixed.\n. @Reto thank you for confirming this. I'm also having issues installing a gcc brew, so I don't know what is up\n. You should be enjoying your vacation and not even checking your mail ;)\n\nOn Jan 1, 2016, at 7:59 PM, Shaun Jackman notifications@github.com wrote:\nThanks for reporting this bug. I'll look into it in a couple of days once I've returned from vacation.\n\u2014\nReply to this email directly or view it on GitHub.\n. @dunn \nhttps://gist.github.com/vol7ron/ee184d5173227e547b42\n. I was able to successfully make/install after I ran the following command:\n\nsudo apt-get zlibc zlib1g zlib1g-dev\nOf note, I had already brew install zlib, so I'm not sure what else apt-get would be retrieving, that wasn't installed with brew.  Worth note, this is linuxbrew and not homebrew (if there is a distinction).\nCan I get some confirmation that there is an issue and this shouldn't have happened, since I had already issued brew install zlib?  I'm trying to set up several VMs with little apt-get intervention.\n. Understood. In general, aside from some installation issues it seems to be working comparable to homebrew.\nI've never tried using it from the start on a vanilla install of Ubuntu LTS. These issues I'm reporting is more of a notification, than a demand to get something patched immediately.\nI imagine linuxbrew has much more complexity, since Macs come installed with certain languages, daemons, and utilities; coupled with the fact that there's only a few number of OSXes, many more versions of Linux. So Linuxbrew is may be harder to maintain for initial setup. \n. The only way I'll be able to test is to spin up another VM and start from scratch again, but let me know if help is needed.  Otherwise, this can be closed from my perspective (and I suppose reopened when someone else encounters the issue if it reappears)\n. I also posted this issue in the Curl forum, soliciting help with tackling this:  https://github.com/bagder/curl/issues/362\n. Just an FYI, I'm not posting this for me, but for other users that may encounter this issue.  My error, which had been resolved.  That was accomplished by simply removing curl and re-installing it:\nbrew remove curl\nbrew install curl\nThis re-downloads the openssl dependency (in this case v1.0.2e) and then reinstalls curl.  What I'd like this issue thread to turn into is a discovery/debuggery of why there was an error in the first place and how it could be resolved in the future (for anyone else that may encounter a similar scenario).\nI'm not sure if there was an issue with the original curl download (corruption, bad installation, etc) and it has since been fixed; or if this is a result of something I did after curl was installed, which I may have forgotten.  It's possible that I may have created a CA on this VM when I was trying to patch OpenVPN on another box.\nRegardless, I'd like to determine if this is something that needs to be investigated before it is closed and dismissed.\n. @tseemann \nIs a version number required, or would it make more sense to use the link(s) devoid of version number: \n- https://archives.eyrie.org/software/perl/podlators.tar.gz\n- https://archives.eyrie.org/software/perl/podlators.tar.xz\n. Sorry I never replied -- either I was in a pinch and had to manually fix this, or the issue resolved itself with the next brew update/upgrade.\n. ",
    "al-the-x": "Did any of this help solve your problem @albertz? I'm having the same problem in my environment: Error: Directory not empty on the Perl install directory. The git package doesn't seem to install after throwing that error...\n. @sjackman Will do. \n. While I'm not proud of the solution, I was able to fake brew into working by editing Library/Homebrew/os/linux/hardware.rb to return a ficticious value for cpuinfo -- \"Intel x86_64\\nflags foo\" -- to fool brew. It's a hack.\n. It may be related to the virtualization container they're running, but that's just a guess. I'll put in a request to support but typically the only answers that come back are links to (unhelpful) docs pages.\n. @albertz You might also consider using direnv to prepend to LD_LIBRARY_PATH when you enter your project directory. When you need to install packages, merely disable the environment and rename when done.\n. ",
    "wittawasw": "master branch's out of date.\nopenssl-1.0.2d.tar.gz is not available anymore, they changed it to openssl-1.0.2e.tar.gz already\nmerging source from homebrew/homebrew will fix this.\n. ",
    "anirudh-ramesh": "I tried updating Linuxbrew earlier today, but I couldn't fix it. So I manually updated the file. Here's the fix to this issue:\nOpen ~/.linuxbrew/Library/Formula/openssl.rb\nReplace url \"https://www.openssl.org/source/openssl-1.0.2d.tar.gz\" with url \"https://www.openssl.org/source/openssl-1.0.2e.tar.gz\"\nReplace sha256 \"671c36487785628a703374c652ad2cebea45fa920ae5681515df25d9f2c9a8c8\"  with sha256 \"e23ccafdb75cfcde782da0151731aa2185195ac745eea3846133f2e05c0e0bff\"\n. ",
    "skylerzhang": "thank DomT4\n. ",
    "jervisfm": "A possible workaround for that is to add symlinks to the gcc compiler under the bin/ sub-directory of linuxbrew . From https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation#to-use-gcc-44-on-centos-5\nsudo yum install gcc44 gcc44-c++\nln -s /usr/bin/gcc `brew --prefix`/bin/gcc-4.4\nln -s /usr/bin/g++ `brew --prefix`/bin/g++-4.4\nln -s /usr/bin/gfortran `brew --prefix`/bin/gfortran-4.4\n. ",
    "typekpb": "fixed.\n@iggyvolz thanks for the hint\n. ",
    "cdonnellytx": "FWIW, I have git 1.7.1 on my system (RHEL 6.5 x64), but it is older than the minimum recommended version.  Attempting to update git with linuxbrew results in a compliation error with homebrew/dupes/tcl-tk, so it sounds like there are multiple issues with tcl-tk being pulled in by git.\nEDIT: Running with @sjackman 's switches got it to build.  Thanks!\n. ",
    "waruqi": "ok, thanks!\n. ",
    "sheenawadhwa": "yes i know but there must be solution to solve this\n. ",
    "dfornika": "Ah, right under my nose. Thanks for the fix.\n. Thanks for the suggestions. I've tried setting up a dummy package. I had to adjust your bash snippet a bit (put pam in the Cellar directory):\nmkdir -p `brew --prefix`/Cellar/pam/1.2.3/{include,lib}\nln -s /usr/include/security `brew --prefix`/Cellar/pam/1.2.3/include\nbrew link pam\nIt got the build a bit further, but it looks like it's still having trouble finding the pam library, and also not finding boost if I'm reading the compile log correctly. Here is an updated gist:\nhttps://gist.github.com/204d1c767f50ad083df1\nIt looks like the rstudio-server formula is in relatively active development so I might get in touch with the maintainers to ask for suggestions or request that they package pam\n. ",
    "pecorade": "Confirmed here on Debian 8\nSolved: just revert before this commit https://github.com/Homebrew/linuxbrew/commit/b85c336836342da723124ced7a0d17f98a9823fe\n. ",
    "jreeder": "Yes that patch fixed the issue for me. \n. No I haven\u2019t reported it anywhere else yet. I\u2019ll report it to the boost\ndevs, but I won\u2019t bother with the homebrew upstream. Unless Apple gets\nserious about multi-core, this will never affect anyone over there.\n. ",
    "Danielflsr": "Indeed, the entire formula is for OSX.\n. Me too, in Ubuntu 14.04.\n. ",
    "chubin": "I have this error message, although I've the patch already:\n47418088124064:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:187:filename(libz.so): libz.so: cannot open shared object file: No such file or directory                                                                                                                          \n47418088124064:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:233:                                                                                                                                                                                                                   \n47418088124064:error:29064065:lib(41):BIO_ZLIB_NEW:zlib not supported:c_zlib.c:463:                                                                                                                                                                                                                                            \n47366714547872:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:187:filename(libz.so): libz.so: cannot open shared object file: No such file or directory                                                                                                                          \n47366714547872:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:233:                                                                                                                                                                                                                   \n47366714547872:error:29064065:lib(41):BIO_ZLIB_NEW:zlib not supported:c_zlib.c:463:\nShould I reopen the Issue?\n. No, it's not.\nWhat I'm running: brew install openssl\n. ",
    "snmsts": "Thank you for your response.\nThis is the log when it could successfuly build.\nhttps://travis-ci.org/roswell/roswell/jobs/103271959#L239\nthe recipe I'm tapping is not having change this week. :(\n. it is old log\n. works fine with the workaround.\nhttps://travis-ci.org/roswell/roswell/jobs/104580886\n. Oh Thanks!\n. ",
    "junwei-wang": "@sjackman  I am working on  centos-release-4-3.2.\nI slightly modified the source code of linuxbrew to use my own tar. However, I still cannot use gcc on my PATH. And I brew edit some-package to use my own cc. But I always get. \n```\nThis file contains any messages produced by compilers while\nrunning configure, to aid debugging if configure makes a mistake.\nIt was created by GNU tar configure 1.28, which was\ngenerated by GNU Autoconf 2.69.  Invocation command line was\n$ ./configure --prefix=/home/users/wangjunwei/.linuxbrew/Cellar/gnu-tar/1.28 --mandir=/home/users/wangjunwei/.linuxbrew/Cellar/gnu-tar/1.28/share/man\n---------\nPlatform.\n---------\nhostname = some.host\nuname -m = x86_64\nuname -r = 2.6.32_1-17-0-0\nuname -s = Linux\nuname -v = #1 SMP Mon Aug 24 11:14:27 CST 2015\n/usr/bin/uname -p = unknown\n/bin/uname -X     = unknown\n/bin/arch              = x86_64\n/usr/bin/arch -k       = unknown\n/usr/convex/getsysinfo = unknown\n/usr/bin/hostinfo      = unknown\n/bin/machine           = unknown\n/usr/bin/oslevel       = unknown\n/bin/universe          = unknown\nPATH: /home/users/wangjunwei/.linuxbrew/bin\nPATH: /home/users/wangjunwei/.jumbo/bin\nPATH: /home/users/wangjunwei/.jumbo/opt/gcc46/bin\nPATH: /home/users/wangjunwei/bin/hadoop-client-nj-entity/hadoop/bin\nPATH: /usr/local/bin\nPATH: /usr/bin\nPATH: /bin\nPATH: /usr/local/sbin\nPATH: /usr/sbin\nPATH: /sbin\nPATH: /home/users/wangjunwei/.linuxbrew/Library/ENV/scm\n-----------\nCore tests.\n-----------\nconfigure:3581: checking for a BSD-compatible install\nconfigure:3649: result: /usr/bin/install -c\nconfigure:3660: checking whether build environment is sane\nconfigure:3715: result: yes\nconfigure:3866: checking for a thread-safe mkdir -p\nconfigure:3905: result: /bin/mkdir -p\nconfigure:3912: checking for gawk\nconfigure:3928: found /usr/bin/gawk\nconfigure:3939: result: gawk\nconfigure:3950: checking whether make sets $(MAKE)\nconfigure:3972: result: yes\nconfigure:4001: checking whether make supports nested variables\nconfigure:4018: result: yes\nconfigure:4107: checking whether UID '30476' is supported by ustar format\nconfigure:4110: result: yes\nconfigure:4117: checking whether GID '30476' is supported by ustar format\nconfigure:4120: result: yes\nconfigure:4128: checking how to create a ustar tar archive\nconfigure:4139: tar --version\ntar (GNU tar) 1.26\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nWritten by John Gilmore and Jay Fenlason.\nconfigure:4142: $? = 0\nconfigure:4182: tardir=conftest.dir && eval tar --format=ustar -chf - \"$tardir\" >conftest.tar\nconfigure:4185: $? = 0\nconfigure:4189: tar -xf - &5\ncc (GCC) 4.6.3\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nconfigure:4688: $? = 0\nconfigure:4677: /home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc -v >&5\nReading specs from /home/users/wangjunwei/.jumbo/opt/gcc46/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/specs\nCOLLECT_GCC=/home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc\nCOLLECT_LTO_WRAPPER=/home/users/wangjunwei/.jumbo/opt/gcc46/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/lto-wrapper\nTarget: x86_64-unknown-linux-gnu\nConfigured with: /home/users/wangjunwei/.jumbo/var/jumbo/tmp/jumbo.Ajad24285/gcc46/src/gcc-4.6.3/configure --prefix=/home/users/wangjunwei/.jumbo/opt/gcc46 --infodir=/home/users/wangjunwei/.jumbo/opt/gcc46/share/info --libdir=/home/users/wangjunwei/.jumbo/opt/gcc46/lib --libexecdir=/home/users/wangjunwei/.jumbo/opt/gcc46/lib --mandir=/home/users/wangjunwei/.jumbo/opt/gcc46/share/man --disable-libssp --disable-libstdcxx-pch --disable-libunwind-exceptions --disable-multilib --disable-werror --enable-__cxa_atexit --enable-checking=release --enable-clocale=gnu --enable-languages=c,c++,fortran --enable-libstdcxx-time --enable-gold --enable-ld=default --enable-linker-build-id --enable-lto --enable-plugin --with-plugin-ld=ld.gold --enable-shared --enable-threads=posix --with-gmp=/home/users/wangjunwei/.jumbo --with-mpc=/home/users/wangjunwei/.jumbo --with-mpfr=/home/users/wangjunwei/.jumbo --with-gnu-as --with-as=/home/users/wangjunwei/.jumbo/opt/binutils/bin/as --with-gnu-ld --with-ld=/home/users/wangjunwei/.jumbo/opt/binutils/bin/ld --with-build-time-tools=/home/users/wangjunwei/.jumbo/opt/binutils/bin --with-boot-ldflags='  -Wl,-rpath=/home/users/wangjunwei/.jumbo/lib -L/home/users/wangjunwei/.jumbo/lib' --with-stage1-ldflags='  -Wl,-rpath=/home/users/wangjunwei/.jumbo/lib -L/home/users/wangjunwei/.jumbo/lib' --with-cloog=no --with-ppl=no --with-system-zlib\nThread model: posix\ngcc version 4.6.3 (GCC)\nconfigure:4688: $? = 0\nconfigure:4677: /home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc -V >&5\ncc: error: unrecognized option '-V'\ncc: fatal error: no input files\ncompilation terminated.\nconfigure:4688: $? = 1\nconfigure:4677: /home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc -qversion >&5\ncc: error: unrecognized option '-qversion'\ncc: fatal error: no input files\ncompilation terminated.\nconfigure:4688: $? = 1\nconfigure:4708: checking whether the C compiler works\nconfigure:4730: /home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc -Os -w -pipe -march=core2 -isystem/home/users/wangjunwei/.linuxbrew/include -L/home/users/wangjunwei/.linuxbrew/lib -Wl,-rpath,/home/users/wangjunwei/.linuxbrew/lib conftest.c  >&5\ncc: fatal error: environment variable 'JUMBO_ROOT' not defined\ncompilation terminated.\nconfigure:4734: $? = 1\nconfigure:4772: result: no\nconfigure: failed program was:\n| / confdefs.h /\n| #define PACKAGE_NAME \"GNU tar\"\n| #define PACKAGE_TARNAME \"tar\"\n| #define PACKAGE_VERSION \"1.28\"\n| #define PACKAGE_STRING \"GNU tar 1.28\"\n| #define PACKAGE_BUGREPORT \"bug-tar@gnu.org\"\n| #define PACKAGE_URL \"http://www.gnu.org/software/tar/\"\n| #define PACKAGE \"tar\"\n| #define VERSION \"1.28\"\n| / end confdefs.h.  /\n|\n| int\n| main ()\n| {\n|\n|   ;\n|   return 0;\n| }\nconfigure:4777: error: in /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28':\nconfigure:4779: error: C compiler cannot create executables\nSeeconfig.log' for more details\n----------------\nCache variables.\n----------------\nac_cv_env_CC_set=set\nac_cv_env_CC_value=/home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc\nac_cv_env_CFLAGS_set=set\nac_cv_env_CFLAGS_value='-Os -w -pipe -march=core2'\nac_cv_env_CPPFLAGS_set=set\nac_cv_env_CPPFLAGS_value=-isystem/home/users/wangjunwei/.linuxbrew/include\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_DEFAULT_ARCHIVE_FORMAT_set=\nac_cv_env_DEFAULT_ARCHIVE_FORMAT_value=\nac_cv_env_DEFAULT_ARCHIVE_set=\nac_cv_env_DEFAULT_ARCHIVE_value=\nac_cv_env_DEFAULT_BLOCKING_set=\nac_cv_env_DEFAULT_BLOCKING_value=\nac_cv_env_DEFAULT_QUOTING_STYLE_set=\nac_cv_env_DEFAULT_QUOTING_STYLE_value=\nac_cv_env_DEFAULT_RMT_DIR_set=\nac_cv_env_DEFAULT_RMT_DIR_value=\nac_cv_env_LDFLAGS_set=set\nac_cv_env_LDFLAGS_value='-L/home/users/wangjunwei/.linuxbrew/lib -Wl,-rpath,/home/users/wangjunwei/.linuxbrew/lib'\nac_cv_env_LIBS_set=\nac_cv_env_LIBS_value=\nac_cv_env_RSH_set=\nac_cv_env_RSH_value=\nac_cv_env_YACC_set=\nac_cv_env_YACC_value=\nac_cv_env_YFLAGS_set=\nac_cv_env_YFLAGS_value=\nac_cv_env_build_alias_set=\nac_cv_env_build_alias_value=\nac_cv_env_host_alias_set=\nac_cv_env_host_alias_value=\nac_cv_env_target_alias_set=\nac_cv_env_target_alias_value=\nac_cv_path_install='/usr/bin/install -c'\nac_cv_path_mkdir=/bin/mkdir\nac_cv_prog_AWK=gawk\nac_cv_prog_ac_ct_CC=/home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc\nac_cv_prog_make_make_set=yes\nam_cv_make_support_nested_variables=yes\nam_cv_prog_tar_ustar=gnutar\n-----------------\nOutput variables.\n-----------------\nACLOCAL='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/missing aclocal-1.14'\nALLOCA=''\nALLOCA_H=''\nAMDEPBACKSLASH='\\'\nAMDEP_FALSE='#'\nAMDEP_TRUE=''\nAMTAR='$${TAR-tar}'\nAM_BACKSLASH='\\'\nAM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nAM_DEFAULT_VERBOSITY='0'\nAM_V='$(V)'\nAPPLE_UNIVERSAL_BUILD=''\nAR=''\nARFLAGS=''\nAUTOCONF='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/missing autoconf'\nAUTOHEADER='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/missing autoheader'\nAUTOM4TE=''\nAUTOMAKE='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/missing automake-1.14'\nAWK='gawk'\nBACKUP_LIBEXEC_SCRIPTS=''\nBACKUP_SBIN_SCRIPTS=''\nBACKUP_SED_COND=''\nBITSIZEOF_PTRDIFF_T=''\nBITSIZEOF_SIG_ATOMIC_T=''\nBITSIZEOF_SIZE_T=''\nBITSIZEOF_WCHAR_T=''\nBITSIZEOF_WINT_T=''\nCC='/home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc'\nCCDEPMODE=''\nCFLAGS='-Os -w -pipe -march=core2'\nCPP=''\nCPPFLAGS='-isystem/home/users/wangjunwei/.linuxbrew/include'\nCYGPATH_W='echo'\nDEFAULT_ARCHIVE=''\nDEFAULT_ARCHIVE_FORMAT=''\nDEFAULT_BLOCKING=''\nDEFAULT_QUOTING_STYLE=''\nDEFAULT_RMT_COMMAND=''\nDEFAULT_RMT_DIR=''\nDEFS=''\nDEPDIR='.deps'\nECHO_C=''\nECHO_N='-n'\nECHO_T=''\nEGREP=''\nEMULTIHOP_HIDDEN=''\nEMULTIHOP_VALUE=''\nENOLINK_HIDDEN=''\nENOLINK_VALUE=''\nEOVERFLOW_HIDDEN=''\nEOVERFLOW_VALUE=''\nERRNO_H=''\nEXEEXT=''\nFLOAT_H=''\nFNMATCH_H=''\nGETOPT_H=''\nGETTEXT_MACRO_VERSION=''\nGLIBC21=''\nGL_COND_LIBTOOL_FALSE=''\nGL_COND_LIBTOOL_TRUE=''\nGL_GENERATE_ALLOCA_H_FALSE=''\nGL_GENERATE_ALLOCA_H_TRUE=''\nGL_GENERATE_ERRNO_H_FALSE=''\nGL_GENERATE_ERRNO_H_TRUE=''\nGL_GENERATE_FLOAT_H_FALSE=''\nGL_GENERATE_FLOAT_H_TRUE=''\nGL_GENERATE_FNMATCH_H_FALSE=''\nGL_GENERATE_FNMATCH_H_TRUE=''\nGL_GENERATE_SELINUX_CONTEXT_H_FALSE=''\nGL_GENERATE_SELINUX_CONTEXT_H_TRUE=''\nGL_GENERATE_STDALIGN_H_FALSE=''\nGL_GENERATE_STDALIGN_H_TRUE=''\nGL_GENERATE_STDARG_H_FALSE=''\nGL_GENERATE_STDARG_H_TRUE=''\nGL_GENERATE_STDBOOL_H_FALSE=''\nGL_GENERATE_STDBOOL_H_TRUE=''\nGL_GENERATE_STDDEF_H_FALSE=''\nGL_GENERATE_STDDEF_H_TRUE=''\nGL_GENERATE_STDINT_H_FALSE=''\nGL_GENERATE_STDINT_H_TRUE=''\nGL_GENERATE_SYSEXITS_H_FALSE=''\nGL_GENERATE_SYSEXITS_H_TRUE=''\nGMSGFMT=''\nGMSGFMT_015=''\nGNULIB_ALPHASORT=''\nGNULIB_ATOLL=''\nGNULIB_BTOWC=''\nGNULIB_CALLOC_POSIX=''\nGNULIB_CANONICALIZE_FILE_NAME=''\nGNULIB_CHDIR=''\nGNULIB_CHOWN=''\nGNULIB_CLOSE=''\nGNULIB_CLOSEDIR=''\nGNULIB_DIRFD=''\nGNULIB_DPRINTF=''\nGNULIB_DUP2=''\nGNULIB_DUP3=''\nGNULIB_DUP=''\nGNULIB_DUPLOCALE=''\nGNULIB_ENVIRON=''\nGNULIB_EUIDACCESS=''\nGNULIB_FACCESSAT=''\nGNULIB_FCHDIR=''\nGNULIB_FCHMODAT=''\nGNULIB_FCHOWNAT=''\nGNULIB_FCLOSE=''\nGNULIB_FCNTL=''\nGNULIB_FDATASYNC=''\nGNULIB_FDOPEN=''\nGNULIB_FDOPENDIR=''\nGNULIB_FFLUSH=''\nGNULIB_FFS=''\nGNULIB_FFSL=''\nGNULIB_FFSLL=''\nGNULIB_FGETC=''\nGNULIB_FGETS=''\nGNULIB_FOPEN=''\nGNULIB_FPRINTF=''\nGNULIB_FPRINTF_POSIX=''\nGNULIB_FPURGE=''\nGNULIB_FPUTC=''\nGNULIB_FPUTS=''\nGNULIB_FREAD=''\nGNULIB_FREOPEN=''\nGNULIB_FSCANF=''\nGNULIB_FSEEK=''\nGNULIB_FSEEKO=''\nGNULIB_FSTAT=''\nGNULIB_FSTATAT=''\nGNULIB_FSYNC=''\nGNULIB_FTELL=''\nGNULIB_FTELLO=''\nGNULIB_FTRUNCATE=''\nGNULIB_FUTIMENS=''\nGNULIB_FWRITE=''\nGNULIB_GETC=''\nGNULIB_GETCHAR=''\nGNULIB_GETCWD=''\nGNULIB_GETDELIM=''\nGNULIB_GETDOMAINNAME=''\nGNULIB_GETDTABLESIZE=''\nGNULIB_GETGROUPS=''\nGNULIB_GETHOSTNAME=''\nGNULIB_GETLINE=''\nGNULIB_GETLOADAVG=''\nGNULIB_GETLOGIN=''\nGNULIB_GETLOGIN_R=''\nGNULIB_GETPAGESIZE=''\nGNULIB_GETSUBOPT=''\nGNULIB_GETTIMEOFDAY=''\nGNULIB_GETUSERSHELL=''\nGNULIB_GL_UNISTD_H_GETOPT=''\nGNULIB_GRANTPT=''\nGNULIB_GROUP_MEMBER=''\nGNULIB_IMAXABS=''\nGNULIB_IMAXDIV=''\nGNULIB_ISATTY=''\nGNULIB_ISWBLANK=''\nGNULIB_ISWCTYPE=''\nGNULIB_LCHMOD=''\nGNULIB_LCHOWN=''\nGNULIB_LINK=''\nGNULIB_LINKAT=''\nGNULIB_LOCALECONV=''\nGNULIB_LSEEK=''\nGNULIB_LSTAT=''\nGNULIB_MALLOC_POSIX=''\nGNULIB_MBRLEN=''\nGNULIB_MBRTOWC=''\nGNULIB_MBSCASECMP=''\nGNULIB_MBSCASESTR=''\nGNULIB_MBSCHR=''\nGNULIB_MBSCSPN=''\nGNULIB_MBSINIT=''\nGNULIB_MBSLEN=''\nGNULIB_MBSNCASECMP=''\nGNULIB_MBSNLEN=''\nGNULIB_MBSNRTOWCS=''\nGNULIB_MBSPBRK=''\nGNULIB_MBSPCASECMP=''\nGNULIB_MBSRCHR=''\nGNULIB_MBSRTOWCS=''\nGNULIB_MBSSEP=''\nGNULIB_MBSSPN=''\nGNULIB_MBSSTR=''\nGNULIB_MBSTOK_R=''\nGNULIB_MBTOWC=''\nGNULIB_MEMCHR=''\nGNULIB_MEMMEM=''\nGNULIB_MEMPCPY=''\nGNULIB_MEMRCHR=''\nGNULIB_MKDIRAT=''\nGNULIB_MKDTEMP=''\nGNULIB_MKFIFO=''\nGNULIB_MKFIFOAT=''\nGNULIB_MKNOD=''\nGNULIB_MKNODAT=''\nGNULIB_MKOSTEMP=''\nGNULIB_MKOSTEMPS=''\nGNULIB_MKSTEMP=''\nGNULIB_MKSTEMPS=''\nGNULIB_MKTIME=''\nGNULIB_NANOSLEEP=''\nGNULIB_NL_LANGINFO=''\nGNULIB_NONBLOCKING=''\nGNULIB_OBSTACK_PRINTF=''\nGNULIB_OBSTACK_PRINTF_POSIX=''\nGNULIB_OPEN=''\nGNULIB_OPENAT=''\nGNULIB_OPENDIR=''\nGNULIB_PCLOSE=''\nGNULIB_PERROR=''\nGNULIB_PIPE2=''\nGNULIB_PIPE=''\nGNULIB_POPEN=''\nGNULIB_POSIX_OPENPT=''\nGNULIB_PREAD=''\nGNULIB_PRINTF=''\nGNULIB_PRINTF_POSIX=''\nGNULIB_PTHREAD_SIGMASK=''\nGNULIB_PTSNAME=''\nGNULIB_PTSNAME_R=''\nGNULIB_PUTC=''\nGNULIB_PUTCHAR=''\nGNULIB_PUTENV=''\nGNULIB_PUTS=''\nGNULIB_PWRITE=''\nGNULIB_RAISE=''\nGNULIB_RANDOM=''\nGNULIB_RANDOM_R=''\nGNULIB_RAWMEMCHR=''\nGNULIB_READ=''\nGNULIB_READDIR=''\nGNULIB_READLINK=''\nGNULIB_READLINKAT=''\nGNULIB_REALLOC_POSIX=''\nGNULIB_REALPATH=''\nGNULIB_REMOVE=''\nGNULIB_RENAME=''\nGNULIB_RENAMEAT=''\nGNULIB_REWINDDIR=''\nGNULIB_RMDIR=''\nGNULIB_RPMATCH=''\nGNULIB_SCANDIR=''\nGNULIB_SCANF=''\nGNULIB_SECURE_GETENV=''\nGNULIB_SETENV=''\nGNULIB_SETHOSTNAME=''\nGNULIB_SETLOCALE=''\nGNULIB_SIGACTION=''\nGNULIB_SIGNAL_H_SIGPIPE=''\nGNULIB_SIGPROCMASK=''\nGNULIB_SLEEP=''\nGNULIB_SNPRINTF=''\nGNULIB_SPRINTF_POSIX=''\nGNULIB_STAT=''\nGNULIB_STDIO_H_NONBLOCKING=''\nGNULIB_STDIO_H_SIGPIPE=''\nGNULIB_STPCPY=''\nGNULIB_STPNCPY=''\nGNULIB_STRCASESTR=''\nGNULIB_STRCHRNUL=''\nGNULIB_STRDUP=''\nGNULIB_STRERROR=''\nGNULIB_STRERROR_R=''\nGNULIB_STRNCAT=''\nGNULIB_STRNDUP=''\nGNULIB_STRNLEN=''\nGNULIB_STRPBRK=''\nGNULIB_STRPTIME=''\nGNULIB_STRSEP=''\nGNULIB_STRSIGNAL=''\nGNULIB_STRSTR=''\nGNULIB_STRTOD=''\nGNULIB_STRTOIMAX=''\nGNULIB_STRTOK_R=''\nGNULIB_STRTOLL=''\nGNULIB_STRTOULL=''\nGNULIB_STRTOUMAX=''\nGNULIB_STRVERSCMP=''\nGNULIB_SYMLINK=''\nGNULIB_SYMLINKAT=''\nGNULIB_SYSTEM_POSIX=''\nGNULIB_TEST_WARN_CFLAGS=''\nGNULIB_TIMEGM=''\nGNULIB_TIME_R=''\nGNULIB_TMPFILE=''\nGNULIB_TOWCTRANS=''\nGNULIB_TTYNAME_R=''\nGNULIB_UNISTD_H_NONBLOCKING=''\nGNULIB_UNISTD_H_SIGPIPE=''\nGNULIB_UNLINK=''\nGNULIB_UNLINKAT=''\nGNULIB_UNLOCKPT=''\nGNULIB_UNSETENV=''\nGNULIB_USLEEP=''\nGNULIB_UTIMENSAT=''\nGNULIB_VASPRINTF=''\nGNULIB_VDPRINTF=''\nGNULIB_VFPRINTF=''\nGNULIB_VFPRINTF_POSIX=''\nGNULIB_VFSCANF=''\nGNULIB_VPRINTF=''\nGNULIB_VPRINTF_POSIX=''\nGNULIB_VSCANF=''\nGNULIB_VSNPRINTF=''\nGNULIB_VSPRINTF_POSIX=''\nGNULIB_WARN_CFLAGS=''\nGNULIB_WCPCPY=''\nGNULIB_WCPNCPY=''\nGNULIB_WCRTOMB=''\nGNULIB_WCSCASECMP=''\nGNULIB_WCSCAT=''\nGNULIB_WCSCHR=''\nGNULIB_WCSCMP=''\nGNULIB_WCSCOLL=''\nGNULIB_WCSCPY=''\nGNULIB_WCSCSPN=''\nGNULIB_WCSDUP=''\nGNULIB_WCSLEN=''\nGNULIB_WCSNCASECMP=''\nGNULIB_WCSNCAT=''\nGNULIB_WCSNCMP=''\nGNULIB_WCSNCPY=''\nGNULIB_WCSNLEN=''\nGNULIB_WCSNRTOMBS=''\nGNULIB_WCSPBRK=''\nGNULIB_WCSRCHR=''\nGNULIB_WCSRTOMBS=''\nGNULIB_WCSSPN=''\nGNULIB_WCSSTR=''\nGNULIB_WCSTOK=''\nGNULIB_WCSWIDTH=''\nGNULIB_WCSXFRM=''\nGNULIB_WCTOB=''\nGNULIB_WCTOMB=''\nGNULIB_WCTRANS=''\nGNULIB_WCTYPE=''\nGNULIB_WCWIDTH=''\nGNULIB_WMEMCHR=''\nGNULIB_WMEMCMP=''\nGNULIB_WMEMCPY=''\nGNULIB_WMEMMOVE=''\nGNULIB_WMEMSET=''\nGNULIB_WRITE=''\nGNULIB__EXIT=''\nGREP=''\nHAVE_ALPHASORT=''\nHAVE_ATOLL=''\nHAVE_BTOWC=''\nHAVE_CANONICALIZE_FILE_NAME=''\nHAVE_CHOWN=''\nHAVE_CLOSEDIR=''\nHAVE_DECL_DIRFD=''\nHAVE_DECL_ENVIRON=''\nHAVE_DECL_FCHDIR=''\nHAVE_DECL_FDATASYNC=''\nHAVE_DECL_FDOPENDIR=''\nHAVE_DECL_FPURGE=''\nHAVE_DECL_FSEEKO=''\nHAVE_DECL_FTELLO=''\nHAVE_DECL_GETDELIM=''\nHAVE_DECL_GETDOMAINNAME=''\nHAVE_DECL_GETLINE=''\nHAVE_DECL_GETLOADAVG=''\nHAVE_DECL_GETLOGIN_R=''\nHAVE_DECL_GETPAGESIZE=''\nHAVE_DECL_GETUSERSHELL=''\nHAVE_DECL_IMAXABS=''\nHAVE_DECL_IMAXDIV=''\nHAVE_DECL_LOCALTIME_R=''\nHAVE_DECL_MEMMEM=''\nHAVE_DECL_MEMRCHR=''\nHAVE_DECL_OBSTACK_PRINTF=''\nHAVE_DECL_SETENV=''\nHAVE_DECL_SETHOSTNAME=''\nHAVE_DECL_SNPRINTF=''\nHAVE_DECL_STRDUP=''\nHAVE_DECL_STRERROR_R=''\nHAVE_DECL_STRNCASECMP=''\nHAVE_DECL_STRNDUP=''\nHAVE_DECL_STRNLEN=''\nHAVE_DECL_STRSIGNAL=''\nHAVE_DECL_STRTOIMAX=''\nHAVE_DECL_STRTOK_R=''\nHAVE_DECL_STRTOUMAX=''\nHAVE_DECL_TTYNAME_R=''\nHAVE_DECL_UNSETENV=''\nHAVE_DECL_VSNPRINTF=''\nHAVE_DECL_WCTOB=''\nHAVE_DECL_WCWIDTH=''\nHAVE_DIRENT_H=''\nHAVE_DPRINTF=''\nHAVE_DUP2=''\nHAVE_DUP3=''\nHAVE_DUPLOCALE=''\nHAVE_EUIDACCESS=''\nHAVE_FACCESSAT=''\nHAVE_FCHDIR=''\nHAVE_FCHMODAT=''\nHAVE_FCHOWNAT=''\nHAVE_FCNTL=''\nHAVE_FDATASYNC=''\nHAVE_FDOPENDIR=''\nHAVE_FEATURES_H=''\nHAVE_FFS=''\nHAVE_FFSL=''\nHAVE_FFSLL=''\nHAVE_FSEEKO=''\nHAVE_FSTATAT=''\nHAVE_FSYNC=''\nHAVE_FTELLO=''\nHAVE_FTRUNCATE=''\nHAVE_FUTIMENS=''\nHAVE_GETDTABLESIZE=''\nHAVE_GETGROUPS=''\nHAVE_GETHOSTNAME=''\nHAVE_GETLOGIN=''\nHAVE_GETOPT_H=''\nHAVE_GETPAGESIZE=''\nHAVE_GETSUBOPT=''\nHAVE_GETTIMEOFDAY=''\nHAVE_GRANTPT=''\nHAVE_GROUP_MEMBER=''\nHAVE_INTTYPES_H=''\nHAVE_ISWBLANK=''\nHAVE_ISWCNTRL=''\nHAVE_LANGINFO_CODESET=''\nHAVE_LANGINFO_ERA=''\nHAVE_LANGINFO_H=''\nHAVE_LANGINFO_T_FMT_AMPM=''\nHAVE_LANGINFO_YESEXPR=''\nHAVE_LCHMOD=''\nHAVE_LCHOWN=''\nHAVE_LINK=''\nHAVE_LINKAT=''\nHAVE_LONG_LONG_INT=''\nHAVE_LSTAT=''\nHAVE_MBRLEN=''\nHAVE_MBRTOWC=''\nHAVE_MBSINIT=''\nHAVE_MBSLEN=''\nHAVE_MBSNRTOWCS=''\nHAVE_MBSRTOWCS=''\nHAVE_MEMCHR=''\nHAVE_MEMPCPY=''\nHAVE_MKDIRAT=''\nHAVE_MKDTEMP=''\nHAVE_MKFIFO=''\nHAVE_MKFIFOAT=''\nHAVE_MKNOD=''\nHAVE_MKNODAT=''\nHAVE_MKOSTEMP=''\nHAVE_MKOSTEMPS=''\nHAVE_MKSTEMP=''\nHAVE_MKSTEMPS=''\nHAVE_MSVC_INVALID_PARAMETER_HANDLER=''\nHAVE_NANOSLEEP=''\nHAVE_NL_LANGINFO=''\nHAVE_OPENAT=''\nHAVE_OPENDIR=''\nHAVE_OS_H=''\nHAVE_PCLOSE=''\nHAVE_PIPE2=''\nHAVE_PIPE=''\nHAVE_POPEN=''\nHAVE_POSIX_OPENPT=''\nHAVE_POSIX_SIGNALBLOCKING=''\nHAVE_PREAD=''\nHAVE_PTHREAD_SIGMASK=''\nHAVE_PTSNAME=''\nHAVE_PTSNAME_R=''\nHAVE_PWRITE=''\nHAVE_RAISE=''\nHAVE_RANDOM=''\nHAVE_RANDOM_H=''\nHAVE_RANDOM_R=''\nHAVE_RAWMEMCHR=''\nHAVE_READDIR=''\nHAVE_READLINK=''\nHAVE_READLINKAT=''\nHAVE_REALPATH=''\nHAVE_RENAMEAT=''\nHAVE_REWINDDIR=''\nHAVE_RPMATCH=''\nHAVE_SCANDIR=''\nHAVE_SECURE_GETENV=''\nHAVE_SETENV=''\nHAVE_SETHOSTNAME=''\nHAVE_SIGACTION=''\nHAVE_SIGHANDLER_T=''\nHAVE_SIGINFO_T=''\nHAVE_SIGNED_SIG_ATOMIC_T=''\nHAVE_SIGNED_WCHAR_T=''\nHAVE_SIGNED_WINT_T=''\nHAVE_SIGSET_T=''\nHAVE_SLEEP=''\nHAVE_STDINT_H=''\nHAVE_STPCPY=''\nHAVE_STPNCPY=''\nHAVE_STRCASECMP=''\nHAVE_STRCASESTR=''\nHAVE_STRCHRNUL=''\nHAVE_STRINGS_H=''\nHAVE_STRPBRK=''\nHAVE_STRPTIME=''\nHAVE_STRSEP=''\nHAVE_STRTOD=''\nHAVE_STRTOLL=''\nHAVE_STRTOULL=''\nHAVE_STRUCT_RANDOM_DATA=''\nHAVE_STRUCT_SIGACTION_SA_SIGACTION=''\nHAVE_STRUCT_TIMEVAL=''\nHAVE_STRVERSCMP=''\nHAVE_SYMLINK=''\nHAVE_SYMLINKAT=''\nHAVE_SYSEXITS_H=''\nHAVE_SYS_BITYPES_H=''\nHAVE_SYS_INTTYPES_H=''\nHAVE_SYS_LOADAVG_H=''\nHAVE_SYS_PARAM_H=''\nHAVE_SYS_TIME_H=''\nHAVE_SYS_TYPES_H=''\nHAVE_TIMEGM=''\nHAVE_TYPE_VOLATILE_SIG_ATOMIC_T=''\nHAVE_UNISTD_H=''\nHAVE_UNLINKAT=''\nHAVE_UNLOCKPT=''\nHAVE_UNSIGNED_LONG_LONG_INT=''\nHAVE_USLEEP=''\nHAVE_UTIMENSAT=''\nHAVE_VASPRINTF=''\nHAVE_VDPRINTF=''\nHAVE_WCHAR_H=''\nHAVE_WCHAR_T=''\nHAVE_WCPCPY=''\nHAVE_WCPNCPY=''\nHAVE_WCRTOMB=''\nHAVE_WCSCASECMP=''\nHAVE_WCSCAT=''\nHAVE_WCSCHR=''\nHAVE_WCSCMP=''\nHAVE_WCSCOLL=''\nHAVE_WCSCPY=''\nHAVE_WCSCSPN=''\nHAVE_WCSDUP=''\nHAVE_WCSLEN=''\nHAVE_WCSNCASECMP=''\nHAVE_WCSNCAT=''\nHAVE_WCSNCMP=''\nHAVE_WCSNCPY=''\nHAVE_WCSNLEN=''\nHAVE_WCSNRTOMBS=''\nHAVE_WCSPBRK=''\nHAVE_WCSRCHR=''\nHAVE_WCSRTOMBS=''\nHAVE_WCSSPN=''\nHAVE_WCSSTR=''\nHAVE_WCSTOK=''\nHAVE_WCSWIDTH=''\nHAVE_WCSXFRM=''\nHAVE_WCTRANS_T=''\nHAVE_WCTYPE_H=''\nHAVE_WCTYPE_T=''\nHAVE_WINSOCK2_H=''\nHAVE_WINT_T=''\nHAVE_WMEMCHR=''\nHAVE_WMEMCMP=''\nHAVE_WMEMCPY=''\nHAVE_WMEMMOVE=''\nHAVE_WMEMSET=''\nHAVE_XLOCALE_H=''\nHAVE__BOOL=''\nHAVE__EXIT=''\nINCLUDE_NEXT=''\nINCLUDE_NEXT_AS_FIRST_DIRECTIVE=''\nINSTALL_DATA='${INSTALL} -m 644'\nINSTALL_PROGRAM='${INSTALL}'\nINSTALL_SCRIPT='${INSTALL}'\nINSTALL_STRIP_PROGRAM='$(install_sh) -c -s'\nINT32_MAX_LT_INTMAX_MAX=''\nINT64_MAX_EQ_LONG_MAX=''\nINTLLIBS=''\nINTL_MACOSX_LIBS=''\nLDFLAGS='-L/home/users/wangjunwei/.linuxbrew/lib -Wl,-rpath,/home/users/wangjunwei/.linuxbrew/lib'\nLIBGNU_LIBDEPS=''\nLIBGNU_LTLIBDEPS=''\nLIBICONV=''\nLIBINTL=''\nLIBOBJS=''\nLIBS=''\nLIBUNISTRING_COMPILE_UNIWIDTH_WIDTH_FALSE=''\nLIBUNISTRING_COMPILE_UNIWIDTH_WIDTH_TRUE=''\nLIBUNISTRING_UNITYPES_H=''\nLIBUNISTRING_UNIWIDTH_H=''\nLIB_ACL=''\nLIB_CLOCK_GETTIME=''\nLIB_EACCESS=''\nLIB_SELINUX=''\nLIB_SETSOCKOPT=''\nLOCALCHARSET_TESTS_ENVIRONMENT=''\nLOCALE_FR=''\nLOCALE_FR_UTF8=''\nLOCALE_JA=''\nLOCALE_ZH_CN=''\nLTLIBICONV=''\nLTLIBINTL=''\nLTLIBOBJS=''\nMAKEINFO='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/missing makeinfo'\nMKDIR_P='/bin/mkdir -p'\nMSGFMT=''\nMSGFMT_015=''\nMSGMERGE=''\nNEXT_AS_FIRST_DIRECTIVE_DIRENT_H=''\nNEXT_AS_FIRST_DIRECTIVE_ERRNO_H=''\nNEXT_AS_FIRST_DIRECTIVE_FCNTL_H=''\nNEXT_AS_FIRST_DIRECTIVE_FLOAT_H=''\nNEXT_AS_FIRST_DIRECTIVE_GETOPT_H=''\nNEXT_AS_FIRST_DIRECTIVE_INTTYPES_H=''\nNEXT_AS_FIRST_DIRECTIVE_LANGINFO_H=''\nNEXT_AS_FIRST_DIRECTIVE_LOCALE_H=''\nNEXT_AS_FIRST_DIRECTIVE_SELINUX_SELINUX_H=''\nNEXT_AS_FIRST_DIRECTIVE_SIGNAL_H=''\nNEXT_AS_FIRST_DIRECTIVE_STDARG_H=''\nNEXT_AS_FIRST_DIRECTIVE_STDDEF_H=''\nNEXT_AS_FIRST_DIRECTIVE_STDINT_H=''\nNEXT_AS_FIRST_DIRECTIVE_STDIO_H=''\nNEXT_AS_FIRST_DIRECTIVE_STDLIB_H=''\nNEXT_AS_FIRST_DIRECTIVE_STRINGS_H=''\nNEXT_AS_FIRST_DIRECTIVE_STRING_H=''\nNEXT_AS_FIRST_DIRECTIVE_SYSEXITS_H=''\nNEXT_AS_FIRST_DIRECTIVE_SYS_STAT_H=''\nNEXT_AS_FIRST_DIRECTIVE_SYS_TIME_H=''\nNEXT_AS_FIRST_DIRECTIVE_SYS_TYPES_H=''\nNEXT_AS_FIRST_DIRECTIVE_TIME_H=''\nNEXT_AS_FIRST_DIRECTIVE_UNISTD_H=''\nNEXT_AS_FIRST_DIRECTIVE_WCHAR_H=''\nNEXT_AS_FIRST_DIRECTIVE_WCTYPE_H=''\nNEXT_DIRENT_H=''\nNEXT_ERRNO_H=''\nNEXT_FCNTL_H=''\nNEXT_FLOAT_H=''\nNEXT_GETOPT_H=''\nNEXT_INTTYPES_H=''\nNEXT_LANGINFO_H=''\nNEXT_LOCALE_H=''\nNEXT_SELINUX_SELINUX_H=''\nNEXT_SIGNAL_H=''\nNEXT_STDARG_H=''\nNEXT_STDDEF_H=''\nNEXT_STDINT_H=''\nNEXT_STDIO_H=''\nNEXT_STDLIB_H=''\nNEXT_STRINGS_H=''\nNEXT_STRING_H=''\nNEXT_SYSEXITS_H=''\nNEXT_SYS_STAT_H=''\nNEXT_SYS_TIME_H=''\nNEXT_SYS_TYPES_H=''\nNEXT_TIME_H=''\nNEXT_UNISTD_H=''\nNEXT_WCHAR_H=''\nNEXT_WCTYPE_H=''\nOBJEXT=''\nPACKAGE='tar'\nPACKAGE_BUGREPORT='bug-tar@gnu.org'\nPACKAGE_NAME='GNU tar'\nPACKAGE_STRING='GNU tar 1.28'\nPACKAGE_TARNAME='tar'\nPACKAGE_URL='http://www.gnu.org/software/tar/'\nPACKAGE_VERSION='1.28'\nPATH_SEPARATOR=':'\nPOSUB=''\nPRAGMA_COLUMNS=''\nPRAGMA_SYSTEM_HEADER=''\nPRIPTR_PREFIX=''\nPRI_MACROS_BROKEN=''\nPTHREAD_H_DEFINES_STRUCT_TIMESPEC=''\nPTRDIFF_T_SUFFIX=''\nPU_RMT_COND_FALSE=''\nPU_RMT_COND_TRUE=''\nPU_RMT_PROG=''\nRANLIB=''\nREPLACE_BTOWC=''\nREPLACE_CALLOC=''\nREPLACE_CANONICALIZE_FILE_NAME=''\nREPLACE_CHOWN=''\nREPLACE_CLOSE=''\nREPLACE_CLOSEDIR=''\nREPLACE_DIRFD=''\nREPLACE_DPRINTF=''\nREPLACE_DUP2=''\nREPLACE_DUP=''\nREPLACE_DUPLOCALE=''\nREPLACE_FCHOWNAT=''\nREPLACE_FCLOSE=''\nREPLACE_FCNTL=''\nREPLACE_FDOPEN=''\nREPLACE_FDOPENDIR=''\nREPLACE_FFLUSH=''\nREPLACE_FOPEN=''\nREPLACE_FPRINTF=''\nREPLACE_FPURGE=''\nREPLACE_FREOPEN=''\nREPLACE_FSEEK=''\nREPLACE_FSEEKO=''\nREPLACE_FSTAT=''\nREPLACE_FSTATAT=''\nREPLACE_FTELL=''\nREPLACE_FTELLO=''\nREPLACE_FTRUNCATE=''\nREPLACE_FUTIMENS=''\nREPLACE_GETCWD=''\nREPLACE_GETDELIM=''\nREPLACE_GETDOMAINNAME=''\nREPLACE_GETDTABLESIZE=''\nREPLACE_GETGROUPS=''\nREPLACE_GETLINE=''\nREPLACE_GETLOGIN_R=''\nREPLACE_GETPAGESIZE=''\nREPLACE_GETTIMEOFDAY=''\nREPLACE_GMTIME=''\nREPLACE_ISATTY=''\nREPLACE_ISWBLANK=''\nREPLACE_ISWCNTRL=''\nREPLACE_ITOLD=''\nREPLACE_LCHOWN=''\nREPLACE_LINK=''\nREPLACE_LINKAT=''\nREPLACE_LOCALECONV=''\nREPLACE_LOCALTIME=''\nREPLACE_LOCALTIME_R=''\nREPLACE_LSEEK=''\nREPLACE_LSTAT=''\nREPLACE_MALLOC=''\nREPLACE_MBRLEN=''\nREPLACE_MBRTOWC=''\nREPLACE_MBSINIT=''\nREPLACE_MBSNRTOWCS=''\nREPLACE_MBSRTOWCS=''\nREPLACE_MBSTATE_T=''\nREPLACE_MBTOWC=''\nREPLACE_MEMCHR=''\nREPLACE_MEMMEM=''\nREPLACE_MKDIR=''\nREPLACE_MKFIFO=''\nREPLACE_MKNOD=''\nREPLACE_MKSTEMP=''\nREPLACE_MKTIME=''\nREPLACE_NANOSLEEP=''\nREPLACE_NL_LANGINFO=''\nREPLACE_NULL=''\nREPLACE_OBSTACK_PRINTF=''\nREPLACE_OPEN=''\nREPLACE_OPENAT=''\nREPLACE_OPENDIR=''\nREPLACE_PERROR=''\nREPLACE_POPEN=''\nREPLACE_PREAD=''\nREPLACE_PRINTF=''\nREPLACE_PTHREAD_SIGMASK=''\nREPLACE_PTSNAME=''\nREPLACE_PTSNAME_R=''\nREPLACE_PUTENV=''\nREPLACE_PWRITE=''\nREPLACE_RAISE=''\nREPLACE_RANDOM_R=''\nREPLACE_READ=''\nREPLACE_READLINK=''\nREPLACE_REALLOC=''\nREPLACE_REALPATH=''\nREPLACE_REMOVE=''\nREPLACE_RENAME=''\nREPLACE_RENAMEAT=''\nREPLACE_RMDIR=''\nREPLACE_SETENV=''\nREPLACE_SETLOCALE=''\nREPLACE_SLEEP=''\nREPLACE_SNPRINTF=''\nREPLACE_SPRINTF=''\nREPLACE_STAT=''\nREPLACE_STDIO_READ_FUNCS=''\nREPLACE_STDIO_WRITE_FUNCS=''\nREPLACE_STPNCPY=''\nREPLACE_STRCASESTR=''\nREPLACE_STRCHRNUL=''\nREPLACE_STRDUP=''\nREPLACE_STRERROR=''\nREPLACE_STRERROR_R=''\nREPLACE_STRNCAT=''\nREPLACE_STRNDUP=''\nREPLACE_STRNLEN=''\nREPLACE_STRSIGNAL=''\nREPLACE_STRSTR=''\nREPLACE_STRTOD=''\nREPLACE_STRTOIMAX=''\nREPLACE_STRTOK_R=''\nREPLACE_STRTOUMAX=''\nREPLACE_STRUCT_LCONV=''\nREPLACE_STRUCT_TIMEVAL=''\nREPLACE_SYMLINK=''\nREPLACE_TIMEGM=''\nREPLACE_TMPFILE=''\nREPLACE_TOWLOWER=''\nREPLACE_TTYNAME_R=''\nREPLACE_UNLINK=''\nREPLACE_UNLINKAT=''\nREPLACE_UNSETENV=''\nREPLACE_USLEEP=''\nREPLACE_UTIMENSAT=''\nREPLACE_VASPRINTF=''\nREPLACE_VDPRINTF=''\nREPLACE_VFPRINTF=''\nREPLACE_VPRINTF=''\nREPLACE_VSNPRINTF=''\nREPLACE_VSPRINTF=''\nREPLACE_WCRTOMB=''\nREPLACE_WCSNRTOMBS=''\nREPLACE_WCSRTOMBS=''\nREPLACE_WCSWIDTH=''\nREPLACE_WCTOB=''\nREPLACE_WCTOMB=''\nREPLACE_WCWIDTH=''\nREPLACE_WRITE=''\nRSH=''\nSED=''\nSELINUX_CONTEXT_H=''\nSET_MAKE=''\nSHELL='/bin/sh'\nSIG_ATOMIC_T_SUFFIX=''\nSIZE_T_SUFFIX=''\nSTDALIGN_H=''\nSTDARG_H=''\nSTDBOOL_H=''\nSTDDEF_H=''\nSTDINT_H=''\nSTRIP=''\nSYSEXITS_H=''\nSYS_TIME_H_DEFINES_STRUCT_TIMESPEC=''\nTAR_COND_GRANTPT_FALSE=''\nTAR_COND_GRANTPT_TRUE=''\nTAR_COND_XATTR_H_FALSE=''\nTAR_COND_XATTR_H_TRUE=''\nTIME_H_DEFINES_STRUCT_TIMESPEC=''\nUINT32_MAX_LT_UINTMAX_MAX=''\nUINT64_MAX_EQ_ULONG_MAX=''\nUNDEFINE_STRTOK_R=''\nUNISTD_H_HAVE_WINSOCK2_H=''\nUNISTD_H_HAVE_WINSOCK2_H_AND_USE_SOCKETS=''\nUSE_ACL=''\nUSE_NLS=''\nVERSION='1.28'\nWARN_CFLAGS=''\nWCHAR_T_SUFFIX=''\nWERROR_CFLAGS=''\nWINDOWS_64_BIT_OFF_T=''\nWINDOWS_64_BIT_ST_SIZE=''\nWINT_T_SUFFIX=''\nXGETTEXT=''\nXGETTEXT_015=''\nXGETTEXT_EXTRA_OPTIONS=''\nYACC=''\nYFLAGS=''\nac_ct_AR=''\nac_ct_CC='/home/users/wangjunwei/.jumbo/opt/gcc46/bin/cc'\nam__EXEEXT_FALSE=''\nam__EXEEXT_TRUE=''\nam__fastdepCC_FALSE=''\nam__fastdepCC_TRUE=''\nam__include='include'\nam__isrc=''\nam__leading_dot='.'\nam__nodep='_no'\nam__quote=''\nam__tar='tar --format=ustar -chf - \"$$tardir\"'\nam__untar='tar -xf -'\nbindir='${exec_prefix}/bin'\nbuild=''\nbuild_alias=''\nbuild_cpu=''\nbuild_os=''\nbuild_vendor=''\ndatadir='${datarootdir}'\ndatarootdir='${prefix}/share'\ndocdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\ndvidir='${docdir}'\nexec_prefix='NONE'\ngl_LIBOBJS=''\ngl_LTLIBOBJS=''\ngltests_LIBOBJS=''\ngltests_LTLIBOBJS=''\ngltests_WITNESS=''\nhost=''\nhost_alias=''\nhost_cpu=''\nhost_os=''\nhost_vendor=''\nhtmldir='${docdir}'\nincludedir='${prefix}/include'\ninfodir='${datarootdir}/info'\ninstall_sh='${SHELL} /tmp/gnu-tar20160128-30632-1rlzcjf/tar-1.28/build-aux/install-sh'\nlibdir='${exec_prefix}/lib'\nlibexecdir='${exec_prefix}/libexec'\nlispdir=''\nlocaledir='${datarootdir}/locale'\nlocalstatedir='${prefix}/var'\nmandir='/home/users/wangjunwei/.linuxbrew/Cellar/gnu-tar/1.28/share/man'\nmkdir_p='$(MKDIR_P)'\noldincludedir='/usr/include'\npdfdir='${docdir}'\npkglibexecdir=''\nprefix='/home/users/wangjunwei/.linuxbrew/Cellar/gnu-tar/1.28'\nprogram_transform_name='s,x,x,'\npsdir='${docdir}'\nrunstatedir=''\nsbindir='${exec_prefix}/sbin'\nsharedstatedir='${prefix}/com'\nsysconfdir='${prefix}/etc'\ntarget_alias=''\n-----------\nconfdefs.h.\n-----------\n/ confdefs.h /\ndefine PACKAGE_NAME \"GNU tar\"\ndefine PACKAGE_TARNAME \"tar\"\ndefine PACKAGE_VERSION \"1.28\"\ndefine PACKAGE_STRING \"GNU tar 1.28\"\ndefine PACKAGE_BUGREPORT \"bug-tar@gnu.org\"\ndefine PACKAGE_URL \"http://www.gnu.org/software/tar/\"\ndefine PACKAGE \"tar\"\ndefine VERSION \"1.28\"\nconfigure: exit 77\n```\n. I am sorry to tell you. It is still does not work.\nThread model: posix\ngcc version 5.3.0 (GCC)\nconfigure:5170: $? = 0\nconfigure:5159: /home/users/wangjunwei/.jumbo/opt/gcc53/bin/gcc -V >&5\ngcc: error: unrecognized command line option '-V'\ngcc: fatal error: no input files\ncompilation terminated.\nconfigure:5170: $? = 1\nconfigure:5159: /home/users/wangjunwei/.jumbo/opt/gcc53/bin/gcc -qversion >&5\ngcc: error: unrecognized command line option '-qversion'\ngcc: fatal error: no input files\ncompilation terminated.\nconfigure:5170: $? = 1\nconfigure:5190: checking whether the C compiler works\nconfigure:5212: /home/users/wangjunwei/.jumbo/opt/gcc53/bin/gcc -Os -w -pipe -march=core2 -isystem/home/users/wangjunwei/.linuxbrew/include -L/home/users/wangjunwei/.linuxbrew/lib -Wl,-rpath,/home/users/wangjunwei/.linuxbrew/lib conftest.c  >&5\ngcc: fatal error: environment variable 'JUMBO_ROOT' not defined\ncompilation terminated.\nconfigure:5216: $? = 1\nconfigure:5254: result: no\nconfigure: failed program was:\n. Thank you very much for you patient.\nI fixed the problem by removing some check in the configuration of package xz.\njumbo is a package management software like Linuxbrew. But it is not as good as Linuxbrew.\nI still have some problems. Anyway, let's close this one.\n. ",
    "C4Phone": "Here is information about my Linux:\n[~]$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: CentOS\nDescription:    CentOS release 6.6 (Final)\nRelease:    6.6\nCodename:   Final\nUsing the old version, brew doctor does not tell any error about tmpdir by default. Yes, with the new version brew doctor does report the information. Thanks!\n. bash\n[~]$ echo '#!/bin/sh' > /tmp/foo\n[~]$ chmod +x /tmp/foo\n[~]$ /tmp/foo\n-bash: /tmp/foo: Permission denied\n[~]$\n. ",
    "athrunsun": "I don't think linuxbrew-cask covers the idea of homebrew-cask since .dmg images don't work on linux.\nThat being said, I started linuxbrew-binary myself. It only got 3 GUI apps included at the moment (shadowsocks-go-local, telegram and sublime-text, both 64bit and 32bit versions), but I'll be very happy to add more stuff like intellij idea, pycharm, datagrip, atom, etc., as well as maintaining this tap.\nSo, @qiuwei can you try installing these formulas by brew install athrunsun/linuxbrew-binary/<formula> to see if they work for you? (BTW you are also Chinese right?)\n@sjackman Please also review the tap. If it is acceptable, can we add it to official linuxbrew organization?\n. @sjackman Sure, I'll merge 64-bit and 32-bit formulas together and keep adding more formulas. Thanks!\n. @sjackman 64-bit and 32-bit is merged together now.\n@qiuwei Unfortunately you have to brew tap athrunsun/linuxbrew-binary https://github.com/athrunsun/linuxbrew-binary before brew install <formula> because of a homebrew limitation, which also exists in linuxbrew.\n\nOn GitHub, your repository must be named homebrew-something in order to use the one-argument form of brew tap. The prefix 'homebrew-' is not optional.\n\nGFW is disrupting cloudfront so it is super slow for me to download intellij-idea. I'll add that formula later on.\n. @sjackman OK, I hope it won't get messed up with this homebrew-binary.\n. Agreed, I'll update mine to homebrew-binary.\n. @sjackman Ah, I've already forked homebrew-binary in my account. Is it OK to rename mine to homebrew-binaries?\n. @sjackman BTW, linuxbrew automatically link all files in /bin and /lib folders during installation, how to override that behaviour in my formula definition? Because there's no need to link them for intellij except only idea.sh.\n. @sjackman It works! Thanks for the suggestion.\n@qiuwei So now you can install intellij (both ultimate and community versions) by\nbrew tap athrunsun/binaries\nbrew update\nbrew install intellij-idea #ultimate\nbrew install intellij-idea-ce #community\n. ",
    "qiuwei": "Great! I will have a look at your packages later.\nThanks for your great work.\n. ",
    "jbcpollak": "We ran into a problem today porting our homebrew-bundle file from Mac to Linux because it has a bunch of Mac-specific casks. This is probably an upstream problem, but it might be useful to have a way to disable or ignore casks that are for the wrong platform.. ",
    "dubnde": "Observed in Ubuntu 14.04.\n. ",
    "eugenesvk": "Hey, @sjackman, thanks for an uber-prompt response.\necho \"#!/bin/sh\" >foo didn't work, I had to use single quotes instead of double quotes.\nBut otherwise the output of your chain of command is 0, foo is created as an executable file with only one line of text.\nAlso, if I add some other command to foo (e.g. echo \"new\"), and then try to execute with ./foo the commands output correctly.\nThe brew install hello package also install just fine and hello -t outputs \"hello, world\"\nP.S.\nI've found the code in the check_tmpdir_executable earlier, but I just don't understand it.\n. Nice! You fixed it faster than I was able to click on the 'Comment' button to submit my comment!\nI've checked on my VM and it works!\nNow my system is ready to brew. (not that the lack of readiness stopped me before :)\n. ",
    "CaptainQuirk": "Thanks @sjackman, the installation works now !\n. ",
    "alecthomas": "This is a bug in https://github.com/alecthomas/devtodo, which is no longer supported. DevTodo2 is written in Go, and should be installable with go get github.com/alecthomas/devtodo2.\n. Also, this was fixed in 2009 but isn't part of a release.\n. ",
    "ddavidebor": "thank you for the tip and the fix\n. I understand.\nWouldn't be easier to just repackage libudev-dev? Installing just that fixes libusb (although not hidapi, but i guess it is just unable to find it) \nThe whole systemd seems a bit excessive.\n. Thank you. running brew install systemd generates the following error:\n```\n==> Installing systemd\n==> Downloading http://www.freedesktop.org/software/systemd/systemd-221.tar.xz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-rootprefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-sysvinit-path=/home/davide/.linuxbrew/\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/systemd/01.configure:\nchecking if /usr/bin/gcc-4.8 supports -c -o file.o... (cached) yes\nchecking whether the /usr/bin/gcc-4.8 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\nchecking whether -lc should be explicitly linked in... no\nchecking dynamic linker characteristics... GNU/Linux ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking whether stripping libraries is possible... yes\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... no\nchecking for intltool-merge... no\nconfigure: WARNING: *** Disabling NLS support because intltool was not found\nchecking whether NLS is requested... no\n./configure: line 12934: intltool-update: command not found\nchecking for intltool >= 0.40.0...  found\nconfigure: error: Your intltool is too old.  You need intltool 0.40.0 or later.\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\nAfter installing intltool through apt-get and re-running the command:\n```\n==> Downloading http://www.freedesktop.org/software/systemd/systemd-221.tar.xz\nAlready downloaded: /home/davide/.cache/Homebrew/systemd-221.tar.xz\n==> ./configure --disable-silent-rules --prefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-rootprefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-sysvinit-path=/home/davide/.linuxbrew/\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/systemd/01.configure:\nchecking for m4... /usr/bin/m4\nchecking for xsltproc... no\nchecking for quotaon... /usr/sbin/quotaon\nchecking for quotacheck... /usr/sbin/quotacheck\nchecking for setcap... /sbin/setcap\nchecking for kill... /bin/kill\nchecking for kmod... /bin/kmod\nchecking for kexec... /usr/sbin/kexec\nchecking for sulogin... /sbin/sulogin\nchecking for mount... /bin/mount\nchecking for umount... /bin/umount\nchecking for objcopy... objcopy\nchecking for strings... strings\nchecking for gperf... no\nconfigure: error: *** gperf not found\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\nafter running brew install homebrew/dupes/gperf \n```\n==> Downloading http://www.freedesktop.org/software/systemd/systemd-221.tar.xz\nAlready downloaded: /home/davide/.cache/Homebrew/systemd-221.tar.xz\n==> ./configure --disable-silent-rules --prefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-rootprefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-sysvinit-path=/home/davide/.linuxbrew/\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/systemd/01.configure:\nchecking whether IFLA_VTI_REMOTE is declared... yes\nchecking whether IFLA_PHYS_PORT_ID is declared... yes\nchecking whether IFLA_BOND_AD_INFO is declared... no\nchecking whether IFLA_VLAN_PROTOCOL is declared... yes\nchecking whether IFLA_VXLAN_REMCSUM_NOPARTIAL is declared... no\nchecking whether IFLA_IPTUN_6RD_RELAY_PREFIXLEN is declared... yes\nchecking whether IFLA_BRIDGE_VLAN_INFO is declared... yes\nchecking whether IFLA_BRPORT_UNICAST_FLOOD is declared... yes\nchecking whether NDA_IFINDEX is declared... yes\nchecking whether IFA_FLAGS is declared... no\nchecking for DBUS... no\nchecking for XKBCOMMON... no\nchecking for BLKID... no\nchecking for MOUNT... no\nconfigure: error: *** libmount support required but libraries not found\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\nAnd i'm afraid from that on i can't build it. installing linux-utils does not appear to fix the problem.\n. When running on a Ubuntu 14.04.3 server 64 (reinstalled from scratch, updated)\n#brew install openocd\n==> Installing open-ocd dependency: libusb-compat\nError: /home/davide/.linuxbrew/opt/libcap not present or broken\nPlease reinstall libcap. Sorry :(\ni ran #brew install libcap , #brew install openocd : \n```\n==> Installing open-ocd dependency: systemd\n==> Downloading http://www.freedesktop.org/software/systemd/systemd-221.tar.xz\n################################################################## 100.0%\n==> ./configure --disable-silent-rules --prefix=/home/davide/.linuxbrew/Cellar/systemd/221 --with-roo\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/systemd/01.configure:\nchecking whether stripping libraries is possible... yes\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... no\nchecking for intltool-merge... yes\nchecking whether NLS is requested... yes\nchecking for intltool >= 0.40.0... 0.51.0 found\nchecking for intltool-update... /home/davide/.linuxbrew/bin/intltool-update\nchecking for intltool-merge... /home/davide/.linuxbrew/bin/intltool-merge\nchecking for intltool-extract... /home/davide/.linuxbrew/bin/intltool-extract\nchecking for xgettext... no\nchecking for msgmerge... no\nchecking for msgfmt... no\nchecking for gmsgfmt... no\nconfigure: error: GNU gettext tools not found; required for intltool\n```\nran #brew install gettext , #brew install openocd:\n```\n==> Installing dependencies for open-ocd: pkg-config, libusb-compat, sphinx-doc, makedepend, zlib, openssl, curl, cmake, \n==> Installing open-ocd dependency: pkg-config\n==> Downloading http://pkgconfig.freedesktop.org/releases/pkg-config-0.29.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/davide/.linuxbrew/Cellar/pkg-config/0.29 --disable-host-tool --with-internal-glib --with-pc-path=\n==> make\n==> make check\n==> make install\n/home/davide/.linuxbrew/Cellar/pkg-config/0.29: 10 files, 630.9K, built in 47 seconds\n==> Installing open-ocd dependency: libusb-compat\nError: /home/davide/.linuxbrew/opt/util-linux not present or broken\nPlease reinstall util-linux. Sorry :(\n```\nran #brew install util-linux, #brew install openocd : \n```\n==> Installing open-ocd dependency: sphinx-doc\n==> Downloading https://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.3.4.tar.gz\n################################################################## 100.0%\n==> Downloading https://pypi.python.org/packages/source/a/alabaster/alabaster-0.7.7.tar.gz\n################################################################## 100.0%\n==> python -c import setuptools... --no-user-cfg install --prefix=/home/davide/.linuxbrew/Cellar/sphinx-doc/1.3.4/libexec/vendor\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/sphinx-doc/01.python:\npython\n-c\nimport setuptools, tokenize\nfile = 'setup.py'\nexec(compile(getattr(tokenize, 'open', open)(file).read()\n  .replace('\\r\\n', '\\n'), file, 'exec'))\n--no-user-cfg\ninstall\n--prefix=/home/davide/.linuxbrew/Cellar/sphinx-doc/1.3.4/libexec/vendor\n--single-version-externally-managed\n--record=installed.txt\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named setuptools\n```\n#sudo apt-get install python-setuptools, brew install openocd\nthen problems on hidapi got a bit more serious: https://gist.github.com/aaaf98d7d7a3b86630eb\n(with --without-hidapi it builds correctly)\n. hidapi fails \n```\n==> Installing open-ocd dependency: hidapi\n==> Downloading https://github.com/signal11/hidapi/archive/hidapi-0.8.0-rc1.tar.\n==> Downloading from https://codeload.github.com/signal11/hidapi/tar.gz/hidapi-0\n################################################################## 100.0%\n==> Downloading https://patch-diff.githubusercontent.com/raw/signal11/hidapi/pul\n################################################################## 100.0%\n==> Patching\n==> Applying 219.diff\npatching file mac/hid.c\n==> ./bootstrap\n==> ./configure --prefix=/home/davide/.linuxbrew/Cellar/hidapi/0.8.0-rc1\n==> make install\nError: No such file or directory - hidtest/.libs/hidtest\n```\nthere are a few interesting errors in the gist:\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) \nconfigure:3365: $? = 0\nconfigure:3354: /usr/bin/gcc-4.8 -V >&5\ngcc-4.8: error: unrecognized command line option '-V'\ngcc-4.8: fatal error: no input files\ncompilation terminated.\nconfigure:3365: $? = 4\nconfigure:3354: /usr/bin/gcc-4.8 -qversion >&5\ngcc-4.8: error: unrecognized command line option '-qversion'\ngcc-4.8: fatal error: no input files\ncompilation terminated.\n. i ran on a (nearly) clear system \nhttps://gist.github.com/62d1ec9ac0d3351903a7\n```\n==> Downloading https://github.com/signal11/hidapi/archive/hidapi-0.8.0-rc1.tar.gz\nAlready downloaded: /home/davide/.cache/Homebrew/hidapi-0.8.0-rc1.tar.gz\n==> Downloading https://patch-diff.githubusercontent.com/raw/signal11/hidapi/pull/219.diff\nAlready downloaded: /home/davide/.cache/Homebrew/hidapi--patch-82631c8a6ec307482c09c133f9da89672c781665704304aa0ef286467b7fe5c2.diff\n==> Patching\n==> Applying 219.diff\npatching file mac/hid.c\n==> ./bootstrap\n==> ./configure --prefix=/home/davide/.linuxbrew/Cellar/hidapi/0.8.0-rc1\nLast 15 lines from /home/davide/.cache/Homebrew/Logs/hidapi/02.configure:\nchecking dynamic linker characteristics... (cached) GNU/Linux ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking whether we are using the GNU Objective C compiler... no\nchecking whether /usr/bin/gcc-4.8 accepts -g... no\nchecking dependency style of /usr/bin/gcc-4.8... gcc3\nchecking for pkg-config... /home/davide/.linuxbrew/bin/pkg-config\nchecking pkg-config is at least version 0.9.0... yes\nchecking whether make supports nested variables... (cached) yes\nchecking operating system... x86_64-unknown-linux-gnu\n (Linux back-end)\nchecking for libudev... no\nLibrary libudev was not found on this system.\n  Please install it and re-run ./configure\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n```\n. ",
    "Neraste": "Well, brew fetch git works fine. Then, brew install git succeeded. That is weird...\n. Fetching the dependencies doesn't work in some cases: diff files cannot be fetched. The download fails due to time out, but again, using the curl command outputed in verbose mode works fine.\nBy instance: readline.\nI am wondering (this is highly hypothetical), is there something special with the curl binary used and its parameters? In some cases, if I do not put location in my curlrc, it doesn't follow HTTP 302 redirection, even if there is the -L parameter. Moreover, I am behind a proxy. brew doctor complains about the curlrc file, but how can I pass the proxy parameter otherwise?\n. OK, I have to export all_proxy with my proxy inside to solve this, even if it is defined in my curlrc file. So, why does not curl read its config file?\n. > Ah, did setting the ALL_PROXY environment variable solve your issue?\nYes. At least, it seems.\nFor the next, I will answer in few days.\n. > I believe that curl does read its config file.\nI don't think so. If I don't export all_proxy=http://myproxy, even if there is a proxy = http://myproxy in my .curlrc, curl isn't able to connect to server.\n@OmeGak Are you behind a proxy?\n. @OmeGak proxy was what blocked my connection\n@sjackman all_proxy should be lowercase, but for curl there is no difference, AFAIK.\nHere the output you wanted:\n$ cat .curlrc\nproxy = http://myproxy\ninsecure\nlocation\n$ curl --version\ncurl 7.47.1 (x86_64-pc-linux-gnu) libcurl/7.47.1 OpenSSL/1.0.2f zlib/1.2.8\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets\n$ echo xyz >>~/.curlrc\n$ curl --version\nWarning: /home/pzehner/.curlrc:4: warning: 'xyz' is unknown\ncurl 7.47.1 (x86_64-pc-linux-gnu) libcurl/7.47.1 OpenSSL/1.0.2f zlib/1.2.8\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets\nBut there is nothing new. I mean, I have no problem using curl from command line. Curl called from command line read its curlrc file. The problem is when called by Brew.\n. Sorry for late reply\nThank you, this did the trick\n. I just installed attr and then gpatch.\n. I have this problem after first updating my Linuxbrew installation. The remote is set to Homebrew repo. If I change it in $HOME/.linuxbrew/.git/config and I brew update, I get errors:\nError: Fetching /home/user/.linuxbrew failed!\nAlready up-to-date.\nWhat to do?\n. ",
    "curufinwe": "It seems I am not the only one who ran into this. But there the fix was to adjust the build flags. As glibc also caused compile failures for other programs I have removed it and moved to an older version of linuxbrew where glibc is not a hard dependency.\n. ",
    "KomodoTech": "Worked like a charm! \nThank you so much for the suggestion and in general for the awesome support that you are providing.\nLike in pull request #605 , I am working on an \"almost bare\" system. It's probably quite obvious to experienced linux brew users that patch/gpatch is a dependency, but since I never had that issue on OS X, I was not aware.\nIn any case,\nThanks again!\n. ",
    "philippbayer": "I had the same error with a malformed LD_LIBRARY_PATH:\n```\n\necho $LD_LIBRARY_PATH\n:/var/spool/torque/lib\n```\n\nIn my case, simply removing that \":\" fixed it (or unset LD_LIBRARY_PATH). In @albertz' case I assume these spaces shouldn't be there, these should be colons (or again, just unset)\n. A year later and a blog post reminded me of this issue - https://joshumax.github.io/general/2017/06/08/how-torch-broke-ls.html\nIt turns out that an empty entry in LD_LIBRARY_PATH is converted into the current directory. Good to know!. I ran into the same issue today on a weird Red Hat system I couldn't update, this issue is the first Google result so I'm putting my workaround here for future searchers.\nEssentially I had to run\nbrew reinstall gpatch -s\n\nBut the problem is that this will download a .tar.xz file, and on this system I could not extract .xz files, as that crashes the same way:\ntar xJvf gpatch-2.7.5.tar.xz\nxz: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by xz)\nxz: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by linuxbrew/lib/liblzma.so.5)\nTo solve this I ran \nbrew edit gpatch\n\nto replace the .xz link by a .gz link (as of today, there is a .gz file in the same folder with the same version, so just replace the x by g). I also had to replace the SHA256 sum in the same file, for http://gnu.uberglobalmirror.com/patch/patch-2.7.5.tar.gz the SHA256 sum is 7436f5a19f93c3ca83153ce9c5cbe4847e97c5d956e57a220121e741f6e7968f. Running brew reinstall gpatch -s worked fine after that so that the output of\nldd `which patch`\n\nactually makes sense, from there I could run  brew install glibc and the rest worked OK.. That's an even better solution. Thank you for your hard work on linuxbrew, it's tremendously useful!. ",
    "njia": "Hi Sjackman\nHOMEBREW_BUILD_FROM_SOURCE=1 worked like magic, I successfully installed all the tools I need except ruby 2.3\nhere are some additional info\n```\ncompiling enc/trans/newline.c\nlinking miniruby\ngenerating encdb.h\n/tmp/ruby20160215-30787-pdcwgc/ruby-2.3.0/lib/erb.rb:359: [BUG] Segmentation fault at 0x00000a6c6c619b\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-linux]\n...\n...\n[NOTE]\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\nBug reports are welcome.\nFor details: http://www.ruby-lang.org/bugreport.html\n```\nThanks so much.\nNan\n. I had similar problem, when I tried to upgrade from linuxbrew git 2.8 to 2.8.2 I got following error\nError: Failure while executing: git config --local --replace-all homebrew.private false\nThe solution for me is to remove git 1.7.1 from CenOS but I am surprised to see this problem as I have linuxbrew git comes first in my $PATH.\n``\n[njia@centos6 Desktop]$ brew outdated\nreadline (6.3.8 < 6.3.8_1)\nvim (7.4.1655 < 7.4.1795)\ngit (2.8.0 < 2.8.2)\nsqlite (3.11.0_1 < 3.12.2)\nansible (2.0.1.0 < 2.0.2.0)\nopenssl (1.0.2g < 1.0.2h)\n[njia@centos6 Desktop]$ brew upgrade git\n==> Upgrading 1 outdated package, with result:\ngit 2.8.2\n==> Upgrading git\n==> Installing dependencies for git: openssl\n==> Installing git dependency: openssl\nerror: unknown optionlocal'\nusage: git config [options]\nConfig file location\n    --global              use global config file\n    --system              use system config file\n    -f, --file      use given config file\nAction\n    --get                 get value: name [value-regex]\n    --get-all             get all values: key [value-regex]\n    --get-regexp          get values for regexp: name-regex [value-regex]\n    --replace-all         replace all matching variables: name value [value_regex]\n    --add                 adds a new variable: name value\n    --unset               removes a variable: name [value-regex]\n    --unset-all           removes all matches: name [value-regex]\n    --rename-section      rename section: old-name new-name\n    --remove-section      remove a section: name\n    -l, --list            list all\n    -e, --edit            opens an editor\n    --get-color     find the color configured: [default]\n    --get-colorbool \n                          find the color setting: [stdout-is-tty]\nType\n    --bool                value is \"true\" or \"false\"\n    --int                 value is decimal number\n    --bool-or-int         value is --bool or --int\n    --path                value is a path (file or directory name)\nOther\n    -z, --null            terminate values with NUL byte\nError: Failure while executing: git config --local --replace-all homebrew.private false\n[njia@centos6 Desktop]$ su -\nPassword: \n[root@centos6 ~]# yum erase git\nLoaded plugins: fastestmirror, refresh-packagekit, security\nSetting up Remove Process\nResolving Dependencies\n--> Running transaction check\n---> Package git.x86_64 0:1.7.1-4.el6_7.1 will be erased\n--> Processing Dependency: git = 1.7.1-4.el6_7.1 for package: perl-Git-1.7.1-4.el6_7.1.noarch\n--> Running transaction check\n---> Package perl-Git.noarch 0:1.7.1-4.el6_7.1 will be erased\n--> Finished Dependency Resolution\nDependencies Resolved\n======================================================================================================================================\n Package                       Arch                        Version                                Repository                     Size\n======================================================================================================================================\nRemoving:\n git                           x86_64                      1.7.1-4.el6_7.1                        @updates                       15 M\nRemoving for dependencies:\n perl-Git                      noarch                      1.7.1-4.el6_7.1                        @updates                       35 k\nTransaction Summary\nRemove        2 Package(s)\nInstalled size: 15 M\nIs this ok [y/N]: y\nDownloading Packages:\nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n  Erasing    : git-1.7.1-4.el6_7.1.x86_64                                                                                         1/2 \n  Erasing    : perl-Git-1.7.1-4.el6_7.1.noarch                                                                                    2/2 \n  Verifying  : perl-Git-1.7.1-4.el6_7.1.noarch                                                                                    1/2 \n  Verifying  : git-1.7.1-4.el6_7.1.x86_64                                                                                         2/2 \nRemoved:\n  git.x86_64 0:1.7.1-4.el6_7.1                                                                                                        \nDependency Removed:\n  perl-Git.noarch 0:1.7.1-4.el6_7.1                                                                                                   \nComplete!\n[root@centos6 ~]# exit\nlogout\n[njia@centos6 Desktop]$ brew upgrade git\n==> Upgrading 1 outdated package, with result:\ngit 2.8.2\n==> Upgrading git\n==> Installing dependencies for git: openssl\n==> Installing git dependency: openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.2h.tar.gz\ncurl: (35) SSL connect error\nTrying a mirror...\n==> Downloading https://dl.bintray.com/homebrew/mirror/openssl-1.0.2h.tar.gz\n################################################################## 100.0%\n==> perl ./Configure --prefix=/home/njia/.linuxbrew/Cellar/openssl/1.0.2h --openssldir=/home/njia/.linuxbrew/etc/openssl no-ssl2 zlib-\n==> make depend\n==> make\n==> make test\n==> make install MANDIR=/home/njia/.linuxbrew/Cellar/openssl/1.0.2h/share/man MANSUFFIX=ssl\n==> Downloading https://curl.haxx.se/ca/cacert-2016-04-20.pem\n################################################################## 100.0%\n==> Caveats\nA CA file has been bootstrapped using certificates from the system\nkeychain. To add additional certificates, place .pem files in\n  /home/njia/.linuxbrew/etc/openssl/certs\nand run\n  /home/njia/.linuxbrew/opt/openssl/bin/c_rehash\n==> Summary\n/home/njia/.linuxbrew/Cellar/openssl/1.0.2h: 1,698 files, 14M, built in 4 minutes\n==> Installing git\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-2.8.2.tar.xz\n################################################################## 100.0%\n==> make install prefix=/home/njia/.linuxbrew/Cellar/git/2.8.2 sysconfdir=/home/njia/.linuxbrew/etc CC=/usr/bin/gcc CFLAGS=-Os -w -pip\n==> make CC=/usr/bin/gcc CFLAGS=-Os -w -pipe -march=core2 LDFLAGS=-L/home/njia/.linuxbrew/lib -Wl,--dynamic-linker=/home/njia/.linuxbr\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-manpages-2.8.2.tar.xz\n################################################################## 100.0%\n==> Downloading https://www.kernel.org/pub/software/scm/git/git-htmldocs-2.8.2.tar.xz\n################################################################## 100.0%\n==> Caveats\nThe OS X keychain credential helper has been installed to:\n  /home/njia/.linuxbrew/bin/git-credential-osxkeychain\nThe \"contrib\" directory has been installed to:\n  /home/njia/.linuxbrew/share/git-core/contrib\nBash completion has been installed to:\n  /home/njia/.linuxbrew/etc/bash_completion.d\nzsh completion has been installed to:\n  /home/njia/.linuxbrew/share/zsh/site-functions\nEmacs Lisp files have been installed to:\n  /home/njia/.linuxbrew/share/emacs/site-lisp/git\n==> Summary\n/home/njia/.linuxbrew/Cellar/git/2.8.2: 1,342 files, 29.1M, built in 1 minute 3 seconds\n```\n. ",
    "rchikhi": "also encountered this issue today (latest linuxbrew) with linuxbrew installing glibc 2.19, and ~~export HOMEBREW_BUILD_FROM_SOURCE=1 solved it~~, I take it back, it didn't solve it.\n. Yep, did a clean install and the problem remained. Clearing LD_LIBRARY_PATH solved it.\nI didn't investigate further.. but for reference, brew config/doctor on the node where everything segfaulted after glibc 2.19 install:\nhttp://pastebin.com/iupX1ek4\nand brew config/doctor on the front node, where it doesn't segfault (they share the same homedir, but different LD_LIBRARY_PATH's, etc):\nhttp://pastebin.com/gvD2MqWA\nThanks for the help!\n. well-noted now, kind of would have ignored it unless it  said \"can break your WHOLE SYSTEM\" :)\n. upon further inspection, my whole system was broken after glibc installation (via a fresh linuxbrew) even when LD_LIBRARY_PATH was set to just \"$HOME/.linuxbrew/lib\"\n. ",
    "sni": "I comment those lines in fileutils.rb and tried to update ruby, but this fails with:\n```\n==> Applying mkconfig.patch\npatching file tool/mkconfig.rb\n==> ./configure --prefix=/home/test/.linuxbrew/Cellar/ruby/2.3.0 --enable-shared --disable-silent-rules --with-sitedir=/home/test/.linuxbrew/l\n==> make\nLast 15 lines from /home/test/.cache/Homebrew/Logs/ruby/02.make:\n[NOTE]\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\nBug reports are welcome.\nFor details: http://www.ruby-lang.org/bugreport.html\nmake:  [encdb.h] Aborted\nmake:  Waiting for unfinished jobs....\n/tmp/ruby20160216-11768-hr5o5p/ruby-2.3.0/lib/fileutils.rb:1155:in rescue in block in touch': uninitialized constant Errno::ENOENT (NameError)\n        from /tmp/ruby20160216-11768-hr5o5p/ruby-2.3.0/lib/fileutils.rb:1153:inblock in touch'\n        from /tmp/ruby20160216-11768-hr5o5p/ruby-2.3.0/lib/fileutils.rb:1151:in each'\n        from /tmp/ruby20160216-11768-hr5o5p/ruby-2.3.0/lib/fileutils.rb:1151:intouch'\n        from ./tool/mkconfig.rb:298:in `'\nrbconfig.rb updated\nmake: *** [.rbconfig.time] Error 1\n```\n. That did not change anything. The error is the same with HOMEBREW_BUILD_FROM_SOURCE set.\nThis is a sles 11 sp1 (64bit)\n. Unfortunatly this doesn't work either:\n~$ brew install gcc --without-glibc\n...\n==> Installing gcc\n==> Downloading http://ftpmirror.gnu.org/gcc/gcc-5.3.0/gcc-5.3.0.tar.bz2\nAlready downloaded: /home/test/.cache/Homebrew/gcc-5.3.0.tar.bz2\n==> ../configure --prefix=/home/test/.linuxbrew/Cellar/gcc/5.3.0  --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-5 --with-gmp=/opt/omd\n==> make bootstrap\nLast 15 lines from /home/test/.cache/Homebrew/Logs/gcc/02.make:\nmake[3]: *** [graphite-blocking.o] Error 1\nmake[3]: *** [graphite-isl-ast-to-gimple.o] Error 1\nmake[3]: *** [graphite-dependences.o] Error 1\nmake[3]: *** [graphite-interchange.o] Error 1\n/bin/sh ../../gcc/../move-if-change tmp-attrtab.c    insn-attrtab.c\n/bin/sh ../../gcc/../move-if-change tmp-dfatab.c     insn-dfatab.c\n/bin/sh ../../gcc/../move-if-change tmp-latencytab.c insn-latencytab.c\necho timestamp > s-attrtab\nrm gcc.pod\nmake[3]: Leaving directory `/tmp/gcc20160217-30409-1yd8s87/gcc-5.3.0/build/gcc'\nmake[2]: *** [all-stage1-gcc] Error 2\nmake[2]: Leaving directory `/tmp/gcc20160217-30409-1yd8s87/gcc-5.3.0/build'\nmake[1]: *** [stage1-bubble] Error 2\nmake[1]: Leaving directory `/tmp/gcc20160217-30409-1yd8s87/gcc-5.3.0/build'\nmake: *** [bootstrap] Error 2\n. Updating gcc from the sles package repository is not an option. Isn't this the hole purpose of linuxbrew? :-)\n. Here it is: https://gist.github.com/anonymous/3fac881b110ce98c8b97\nI fixed that one by removing the trailing comma in .linuxbrew/opt/isl/include/isl/ctx.h line 83\nThen it fails with \"cannot find -lz\" when trying to link. I will continue tomorrow...\nBtw, is there a list of install options like --without-glibc, i was unable to find them in the manpage.\n. ",
    "cancan101": "I am confused by this. I ran HOMEBREW_MAKE_JOBS=1 brew install openssl such that subsequent runs give me:\n$ HOMEBREW_MAKE_JOBS=1 brew install openssl\nWarning: openssl-1.0.2f already installed\nbut when I try to install wine,  I get the same error as above.\nHere is the Gist: https://gist.github.com/anonymous/1997490e3983a84cc350\n. $ export HOMEBREW_MAKE_JOBS=1\n$ brew upgrade openssl\nError: openssl 1.0.2f already installed\n$ brew install wine\n...\n<Error Above>\n. Ok I brew install sane-backends.\n```\n$ export HOMEBREW_MAKE_JOBS=1\n$ brew upgrade openssl\nError: openssl 1.0.2f already installed\n$ brew install wine\n==> Installing dependencies for wine: openssl, sane-backends, libtasn1, gmp, nettle, gnutls\n==> Installing wine dependency: openssl\n==> Downloading https://www.openssl.org/source/openssl-1.0.2f.tar.gz\nAlready downloaded: /home/ubuntu/.cache/Homebrew/openssl-1.0.2f.tar.gz\n==> Downloading https://github.com/openssl/openssl/commit/da7947e8c6915d86616425ecbc4906f079ef122f.diff\nAlready downloaded: /home/ubuntu/.cache/Homebrew/openssl--patch-00bc58f9949baf592fb0caf63cd754f5407453cc4b61a1accb89040fa17b05b9.diff\n==> Downloading https://github.com/openssl/openssl/commit/7107798ae6c5e19f581915928a69073d17cc21ab.diff\nAlready downloaded: /home/ubuntu/.cache/Homebrew/openssl--patch-a13d63f0e5b5bcebe27eca7c20286843e105bc794e9b2bfa5f6e162174a0e135.diff\n==> Downloading https://github.com/openssl/openssl/commit/83ab6e55a1f8de9b3e45d13dcc78eb739dc66dea.diff\nAlready downloaded: /home/ubuntu/.cache/Homebrew/openssl--patch-98443034f57e5c4fd1bd89dbf64e9b150184522d10b6a6f7bb7e67cc397615c2.diff\n==> Patching\n==> Applying da7947e8c6915d86616425ecbc4906f079ef122f.diff\npatching file crypto/bio/bio.h\n==> Applying 7107798ae6c5e19f581915928a69073d17cc21ab.diff\npatching file crypto/dh/dh.h\n==> Applying 83ab6e55a1f8de9b3e45d13dcc78eb739dc66dea.diff\npatching file crypto/dh/dh_check.c\n==> make install MANDIR=/home/ubuntu/.linuxbrew/Cellar/openssl/1.0.2f/share/man MANSUFFIX=ssl\nLast 15 lines from /home/ubuntu/.cache/Homebrew/Logs/openssl/01.make:\n2016-02-16 22:24:24 +0000\nmake\ninstall\nMANDIR=/home/ubuntu/.linuxbrew/Cellar/openssl/1.0.2f/share/man\nMANSUFFIX=ssl\nmaking all in crypto...\nmake[1]: Entering directory '/tmp/openssl20160216-6806-1idzlfo/openssl-1.0.2f/crypto'\n/usr/bin/perl ../util/mkbuildinf.pl \"cc -I. -I.. -I../include  -O\" \"dist\" >buildinf.h\nmake[1]:  No rule to make target '../include/openssl/bio.h', needed by 'cryptlib.o'.  Stop.\nmake[1]: Leaving directory '/tmp/openssl20160216-6806-1idzlfo/openssl-1.0.2f/crypto'\nMakefile:284: recipe for target 'build_crypto' failed\nmake:  [build_crypto] Error 1\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nErlang linked to wrong OpenSSL on OSX 10.6.8 https://github.com/Homebrew/homebrew/issues/47681\nopenssl: add 'enable-ssl-trace' option https://github.com/Homebrew/homebrew/pull/45250\n```\n. That seemed to work. Now I see the following deps:\n$ brew install wine\n==> Installing dependencies for wine: libtasn1, gmp, nettle, gnutls\n==> Installing wine dependency: libtasn1\n...\n. ",
    "erigler-usgs": "Kicking this to let you know others are interested.\nAlso, the fake keg solution allowed me to install qt (and pyqt), in addition to tcl-tk.\n. I haven't seen a new issue opened by @maxim-belkin as requested by @sjackman re. the cURL/openssl upgrade catch22, something I recently ran into (if I missed it, apologies). I opened issue #883 to initiate discussion.\n. The patch works for me with a minor tweak:\n``` diff\ndiff --git a/Library/Homebrew/extend/ENV/std.rb b/Library/Homebrew/extend/ENV/std.rb\nindex ea1b4d8..42b2ec7 100644\n--- a/Library/Homebrew/extend/ENV/std.rb\n+++ b/Library/Homebrew/extend/ENV/std.rb\n@@ -58,6 +58,7 @@ module Stdenv\n if OS.linux? && ![\"glibc\", \"glibc25\"].include?(formula && formula.name)\n   # Add this formula's library directory to the shared library search path.\n\n\n\nFileUtils.mkdir_p formula.lib if formula\n       prepend \"LD_LIBRARY_PATH\", formula.lib, File::PATH_SEPARATOR if formula\n# Set the dynamic linker and library search path.\n```\n\n\nI know this is probably a fairly obscure issue that doesn't even manifest in more up-to-date Linux systems, but it never cropped up until the relatively recent changes to make most/all Linuxbrew packages dependent on a Linuxbrew's glibc, binutils, etc. I hope you will find some way to include this \"fix\", however inelegant you think it might be, to help those of us forced to work on older systems.\n. No, python was installed after glibc, since after several recent failed upgrades, I chose to wipe my Linuxbrew and start over from scratch, following the standalone instructions this time.\n...but here's the requested information anyway:\n1011 <~> readelf -l `which python` | grep interpreter\n      [Requesting program interpreter: /home/erigler/local/opt/glibc/lib/ld-linux-x86-64.so.2]\nAnd  patchelf python didn't change anything. \n. Thanks for the info...you are clearly more practiced than I at tracking down bugs like this.\nAnd prepending a path to an existing, but empty, folder does seem to fix the problem too (in my case, I added a path to an unused /usr/local/lib folder).\nBut, I'm not sure how to guarantee an empty-but-existing folder, except to create it yourself, in which case we're back to the original solution. \n. The empty lib directory is removed after installation, and also if installation is cleanly aborted.\nI installed git with brew install git, with no issues like #797.\nFinally, I get a undefined methodmkdir_p'error if I don't use FileUtils. I am using ruby 2.3.0p0, as presently installed by Linuxbrew.\n. Yes. When I return std.rb to its pristine state, then uninstall git and remove its cached files, I am able to install git with a simplebrew install git`. It freshly downloads git, git-manpages, and git-htmldocs with no problems, then installs them successfully.\n. Thanks, but I think I'll leave this to you. I am quite a novice at Github, and I might totally flub the pull request.\n. Apologies for leaving out so much pertinent info.\n1) this is a fresh \"standalone\" Linuxbrew installation on a Scientific Linux 7 system (basically, CentOS);\n2) I am using Linux-brewed GCC (v5.3.0), with all Linux-brewed glibc, binutils, etc.;\n3) I do use a fake keg to access Xorg-related system libraries (a la #826);\n3) Here is the output from brew config:\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Linuxbrew/linuxbrew.git\nHEAD: 84012dc6ebdace816a086db2c851c8b25b4eefd8\nLast commit: 2 days ago\nHOMEBREW_PREFIX: /home/erigler/local\nHOMEBREW_REPOSITORY: /home/erigler/local/linuxbrew\nHOMEBREW_CELLAR: /home/erigler/local/linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: dual-core 64-bit ivybridge\nKernel: Linux 3.10.0-327.3.1.el7.x86_64 x86_64 GNU/Linux\nOS: Scientific Linux release 7.2 (Nitrogen)\nOS glibc: 2.17\nOS gcc: 4.8.5\nLinuxbrew glibc: 2.19\nLinuxbrew gcc: 5.3.0\nClang: N/A\nX11: 2.7.8 => /usr\nSystem Ruby: 2.3.0 => /home/erigler/local/linuxbrew/Cellar/ruby/2.3.0/bin/ruby\nPerl: /usr/bin/perl\nPython: /home/erigler/local/bin/python => /home/erigler/local/linuxbrew/Cellar/python/2.7.11/bin/python2.7\nRuby: /home/erigler/local/bin/ruby => /home/erigler/local/linuxbrew/Cellar/ruby/2.3.0/bin/ruby\nJava: openjdk version \"1.8.0_71\"\nPerhaps it's already obvious to you, but the configure line generated by Linuxbrew contains the LDFLAGS value for $(brew --prefix)/lib when I set it in python.rb, and it does NOT contain this LDFLAGS value when I do not set it in python.rb. I can't speak to what is or is not picked up from std.rb.\nFinally, I am a real novice at Github. Can you guide me, or point me to some hints, on how to submit a useful PR?\n. I think I successfully submitted a pull request (#886), for a single commit: https://github.com/Linuxbrew/linuxbrew/commit/e7f5829f75263228c610e144dc99faeff851f621\n. ",
    "biocyberman": "Yes, the workaround works for me.\n. ",
    "bkuhn": "Conservancy does take applications from smaller projects, and there is a new program that we hope to launch to provide minimal services to small projects.  Watch our website for that, but in the meantime, can you make sure to carry a patchset in your fork to README.md (and any other relevant file that mentions Conservancy) so it doesn't give the impression that Linuxbrew is already a Conservancy member?  Currently, it seems you must have merged in upstream's README which leaves things a bit confusing.  I'd suggest a patch set that changes all that text about donations to Homebrew, etc. it to something like:\n\"Our upstream, Homebrew, is a member of Software Freedom Conservancy.  See their README.md (with a link) for more info and how to donate to them.\"\n. ",
    "sholladay": "I was about to report the same thing. I am getting the same error.\nHowever, I was able to successfully work around it with brew install bzip2 (I did not try bz2) and then brew reinstall node.\n. FWIW, I believe I did not have to reinstall python.\n. ",
    "eiennohito": "I had the same issue, after installing bzip2 Python worked.\n. Got the same bug when installing mongodb on CentOS 6.7 with brewed python.\nhttps://gist.github.com/anonymous/7e1f2d793dd43cc22e31\n(scons segfaults, but it doesn't get to log)\nFrom debug shell:\nbasil306% /mnt/orange/brew/data/opt/scons/bin/scons install --prefix=/mnt/orange/brew/data/Cellar/mongodb/3.2.3 -j20 CC=/mnt/orange/brew/data/bin/gcc-5 CXX=/mnt/orange/brew/data/bin/g++-5\\ -std=c++11 --use-new-tools\nscons: Reading SConscript files ...\nzsh: segmentation fault  /mnt/orange/brew/data/opt/scons/bin/scons install  -j20   --use-new-tools\nProvided patch does not work for me as well:\n/mnt/orange/brew/data/Library/brew.rb (Formulary::AliasLoader): loading /mnt/orange/brew/data/Library/Formula/mongodb.rb\n/mnt/orange/brew/data/Library/brew.rb (Formulary::FormulaLoader): loading /mnt/orange/brew/data/Library/Formula/go.rb\n/mnt/orange/brew/data/Library/brew.rb (Formulary::FormulaLoader): loading /mnt/orange/brew/data/Library/Formula/scons.rb\n/mnt/orange/brew/data/Library/Homebrew/build.rb (Formulary::FromPathLoader): loading /mnt/orange/brew/data/Library/Formula/mongodb.rb\n/mnt/orange/brew/data/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /mnt/orange/brew/data/Library/Formula/go.rb\n/mnt/orange/brew/data/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /mnt/orange/brew/data/Library/Formula/scons.rb\n/mnt/orange/brew/data/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /mnt/orange/brew/data/Library/Formula/git.rb\nError: undefined local variable or method `lib' for #<Object:0x00000001c99158>\nPlease report this bug:\n    https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/mnt/orange/brew/data/Library/Homebrew/extend/ENV/std.rb:61:in `setup_build_environment'\n/mnt/orange/brew/data/Library/Homebrew/build.rb:91:in `install'\n/mnt/orange/brew/data/Library/Homebrew/build.rb:177:in `<main>'\n. It manifested when using /usr as include directory for zlib.\nBrewed gcc does not have /usr/include in the include path by default and everything goes wild when it is added.\n. Okay, fixed as per comments\n. Quick and dirty patch for scons:\nhttps://github.com/ku-nlp/linuxbrew/commit/f3fbb3a2a28079da4941f596cdca3d795661850a\nWith it, I was able to install mongodb (semi-manually, #841 still is present and gcc 5.3 gives some warnings that have failed build because of https://jira.mongodb.org/browse/SERVER-13724).\nIf you are OK with my patch, I will submit it as a pull-request.\n. Yes, that solution will probably work, but you would have to patch every formula that uses scons.\nAnother option is to patch scons as I have done and I do not really know what is better.\n\nIn the future, please use brew gist-logs mongodb\n\nIt did not upload scons log when I tried.\n. That should probably work the best as homebrew sets the PATH to have everything its need.\nI will submit a pull request when I get to university.\n. I though a bit more about it, and how about a patch for scons that adds \"homebrew\" platform. And selects it when a homebrew variable is set.\nhttps://gist.github.com/eiennohito/bb38a042e8fe4cadfd08\nIt to patch as the initial suggestion, the scons behavior will be completely different from a pristine one.\nWhat do you think?\n. Changed the patch as per comments\n. As a side comment, Intel MKL is free for any use right now (registration is required however).\nhttps://software.intel.com/en-us/articles/free_mkl\nPersonally, I would like to use it as BLAS/LAPACK implementation.\n. Probably should not be a default one, but it should be possible to use it as an implementation. \n. What should I do if I have a grid of machines with different CPU and want to specify the oldest march, native won't work for me.\nLinuxbrew sits on a nfs and is shared between all machines.\n. The ability to override target architecture using an environment variable would be better and less error prone. I definitely will forget about bottles myself some time in future and I would need to teach other people to use that.\n. Is it possible to make Homebrew prefer value of -march in CFLAGS/CXXFLAGS to guessed ones?\n. We have Xeons from Nehalem and up. So core2.\nBy the way, will the --build-bottle flag work with upgrade command?\n. Okay. Should I do it in this repo?\n. -march=native started to make shared installation unusable in our environment :(\n. Doing --verbose --debug install, performing make install by hand and ignoring the error result in a working svn by the way.\n. Otherwise http/https transports of svn do not work making built subversion pretty useless (or am I doing something wroing?)\nSecond invocation of make install finishes correctly. And http transport works in that case.\n. Maybe their local automake&company files are broken. \nI will try to regenerate them using autotools and report what happens when I'll have some time.\n. Great! --with-serf should be made a default option once more, probably.\n. ",
    "purwarshubh10": "Hi,\nI haved faced same issue in centos 6.6 while upgrading vim to latest vim version(vim 8).\nIn my machine it is gcc compiler version problem. My previous gcc version in centos 6.6 is 4.8\nI have resolved it by upgrading my gcc to gcc 5.5. After that it has installed.. ",
    "sherpya": "sorry for delay guys, it works for mee to\n. ",
    "dagolinuxoid": "Sorry, my bad. It requires reboot.\n. ",
    "kimleeng": "Just wanted to add the comment that preforming \nbrew install r --without-x11\nAlso lacks libncursesw.so.5 and symlinking it to libncursesw.so.6  did the trick for me\n. ",
    "gacha": "That worked, but now there is next problem with ncurses\nxgettext failed to run correctly: /home/gatis/.linuxbrew/bin/xgettext:\n  error while loading shared libraries: libncurses.so.5: cannot open shared\n  object file: No such file or directory\nI installed brew install ncurses but nothing changed.\n. Thank you very much, it worked, maybe you can put top 10 fixes in the readme.\n. ",
    "ijkim88": "The workaround @sjackman mentioned in #732 works for me.\n. It's working great now, thanks!\n. ",
    "CameronNicolson": "Reinstalled xz and the issue was fixed. \nbrew reinstall xz\n. ",
    "phime42": "I'm trying brew reinstall openssl right now.\nUpdate: Does stop with the same error message.\nI also do not understand the error messages, but make[1]: *** [test_heartbeat] Speicherzugriffsfehler means ... Memory access error and make: *** [tests] Fehler 2 means ... Error 2.\nI however have no idea what these error messages mean technically.\n. Is there a way to skip the tests in order to get the install working? It's kind of a redneck solution, but atm I'm stuck...\n. That worked for me, but it's not fixing it entirely... I may have to try to run make test on its own and check with upstream, like sjackman suggested.\n. Thank you for your help!\n. ",
    "retrography": "I get similar errors here on Centos 6. Standalone build works. Only Linuxbrew's build fails. Please note that it is the make test that fails. Here is the same set of messages in English:\n==> make test\nLast 15 lines from /home/mszargar/.cache/Homebrew/Logs/openssl/04.make:\nNON-DELEGATED; Root CA -> EE\nResponse verify OK\nDELEGATED; Intermediate CA -> EE\nResponse verify OK\nDELEGATED; Root CA -> Intermediate CA\nResponse verify OK\nDELEGATED; Root CA -> EE\nResponse verify OK\nALL OCSP TESTS SUCCESSFUL\nTest X509v3_check_*\n../util/shlib_wrap.sh ./v3nametest\n../util/shlib_wrap.sh ./heartbeat_test\nmake[1]: *** [test_heartbeat] Segmentation fault\nmake[1]: Leaving directory `/tmp/openssl20160311-13539-13nym8t/openssl-1.0.2g/test'\nmake: *** [tests] Error 2\n. Yes there is a switch for that: \nbrew install --without-test openssl\n. ",
    "AlexisMeza": "Shaun,\nThanks for that push! I'll make a pull request to make the adjustments unless someone else gets to it. Here are my findings:\nglibc_requirement.rb - added \"/lib/arm-linux-gnueabihf/libc.so.6\"\nlibc = [\"/lib/x86_64-linux-gnu/libc.so.6\", \"/lib64/libc.so.6\", \"/lib/arm-linux-gnueabihf/libc.so.6\"].find do |s|\nNext, I focused on that comes up on brew doctor so I searched for it:\ngrep -r \"ld-linux-x86-64.so.2\" ~/.linuxbrew/Library\nI made adjustments to Formula/glibc.rb and Homebrew/cmd/install.rb:~197\ninterpreter = glibc && glibc.installed? ? glibc.lib/\"ld-linux.so.3\" : \"/lib/ld-linux.so.3\"\nObviously, this line removes support for 64-bit. I'll have to look into Linuxbrew to see if there is a check for 64-bit and apply it here. I'm happy to do the legwork sometime this weekend but again, I thought I'd share this here if someone is looking for a solution or if someone has time to make the changes before I get to them.\nBesides this minor issue, I've been using Linuxbrew on the Raspberry Pi without issues since you added support for it last summer.\n. I tested your change and it worked.\n. ",
    "gpotter2": "Hum, this is an old thing, right. Small note:\n\n/lib/libc.so.6\n\nIs on many linux 32bits versions:\n/lib/i386-linux-gnu/libc.so.6\nThat should be taken in account\n. ",
    "PDDStudio": "As because this issue helped me to get the solution for my problem, I thought I'd append this here:\nI had the same error as mentioned above (problems with finding libc and ld) when I was about to install linuxbrew. While validating the paths, I saw that the array you ( @sjackman  ) didn't include locations for my 64bit debian jessy build.\nYou mentioned above that this step is actually required for 32bit devices only, but in my case (I'm running a bootstrapped debian-jessy) it seems like the the system couldn't find the static libraries - even though they're compiled for a 64bit architecture. \nAppending /lib/aarch64-linux-gnu/libc.so.6 in glibc_requirement.rb :\nbash\nlibc = [\"/lib/aarch64-linux-gnu/libc.so.6\", \"/lib/x86_64-linux-gnu/libc.so.6\", \"/lib64/libc.so.6\", \"/lib/libc.so.6\", \"/lib/i386-linux-gnu/libc.so.6\", \"/lib/arm-linux-gnueabihf/libc.so.6\"].find do |s|\nand /lib/aarch64-linux-gnu/ld-2.19.so (the version I installed - can be different) in cmd/install.rb :\nbash\nsys_interpreter = [\"/lib/aarch64-linux-gnu/ld-2.19.so\", \"/lib64/ld-linux-x86-64.so.2\", \"/lib/ld-linux.so.3\", \"/lib/ld-linux.so.2\", \"/lib/ld-linux-armhf.so.3\"].find do |s|\nfinally solved my errors when running brew.\nAnother (maybe important) thing is that linuxbrew itself created an symlink for lib64 -> lib inside .linuxbrew internally, so for me it seems like the bootstrapped image caused this? (Correct me if I'm wrong)\nMaybe this can be respected in future versions of Linuxbrew as well (checking for 'non-default'-64bit distributions as well instead of only 32bit in /lib).\nFor now I just wanted to collect my knowledge somewhere in case someone else runs into the same problems as I did.\nFinally, I can confirm that linuxbrew is running on an Android-Smartphone (both - armhf/arm64) inside a bootstrapped debian-system deployed with chroot.\nRegards. ",
    "mnunes": "I tried to compile with gcc 5.3.0, but still doesn't work. \n. ",
    "kpkrishnamoorthy": "Thanks for the suggestion! I tried that, but with what looks to be the same results...\nOn running brew gist-logs v8, I see that the Linuxbrew GCC version is now 5.3.0 (was previously n/a): https://gist.github.com/37f1cb7c4f0ee3eaeece\nRunning gcc --version on the same shell that I'm attempting the brew installation yields 5.3.0.\nDoes this information help in any way? Thanks a lot for your time!\n``\nkp@kp-VirtualBox:~$ brew install v8\n==> Downloading https://github.com/v8/v8-git-mirror/archive/4.8.271.20.tar.gz\nAlready downloaded: /home/kp/.cache/Homebrew/v8-4.8.271.20.tar.gz\n==> Cloning https://chromium.googlesource.com/external/gyp.git\nUpdating /home/kp/.cache/Homebrew/v8--gyp--git\n==> Checking out revision 2c1e6cced23554ce84806e570acea637f6473afc\n==> Cloning https://chromium.googlesource.com/chromium/deps/icu.git\nUpdating /home/kp/.cache/Homebrew/v8--icu--git\n==> Checking out revision 42c58d4e49f2250039f0e98d43e0b76e8f5ca024\n==> Cloning https://chromium.googlesource.com/chromium/buildtools.git\nUpdating /home/kp/.cache/Homebrew/v8--buildtools--git\n==> Checking out revision 4a95614772d9bcbd8bc197e1d9bd034e088fc740\n==> Cloning https://chromium.googlesource.com/external/swarming.client.git\nUpdating /home/kp/.cache/Homebrew/v8--swarming_client--git\n==> Checking out revision 8fce79620b04bbe5415ace1103db27505bdc4c06\n==> Cloning https://chromium.googlesource.com/external/github.com/google/googletest.git\nUpdating /home/kp/.cache/Homebrew/v8--gtest--git\n==> Checking out revision 6f8a66431cb592dad629028a50b3dd418a408c87\n==> Cloning https://chromium.googlesource.com/external/googlemock.git\nUpdating /home/kp/.cache/Homebrew/v8--gmock--git\n==> Checking out revision 0421b6f358139f02e102c9c332ce19a33faf75be\n==> Cloning https://chromium.googlesource.com/chromium/src/tools/clang.git\nUpdating /home/kp/.cache/Homebrew/v8--clang--git\n==> Checking out revision 66f5328417331216569e8beb244fd887f62e8997\n==> make native library=shared snapshot=on console=readline i18nsupport=off strictaliasing=off\nLast 15 lines from /home/kp/.cache/Homebrew/Logs/v8/01.make:\n  CXX(target) /tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/accessors.o\n  CXX(target) /tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/address-map.o\n  CXX(target) /tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation.o\n  CXX(target) /tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation-site-scopes.o\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\nmake[1]: *** [/tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/address-map.o] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nmake[1]: *** [/tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/accessors.o] Error 1\nmake[1]: *** [/tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation.o] Error 1\nmake[1]: *** [/tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation-site-scopes.o] Error 1\nmake[1]: Leaving directory/tmp/v820160311-1908-7dioe8/v8-4.8.271.20/out'\nmake: *** [native] Error 2\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nv8 formula fails to install on Ubuntu 14.04 https://github.com/Linuxbrew/linuxbrew/issues/917\nkp@kp-VirtualBox:~$ gcc --version\ngcc (Homebrew gcc 5.3.0) 5.3.0\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nkp@kp-VirtualBox:~$ which gcc\n/home/kp/.linuxbrew/bin/gcc\n```\n. I tried that, no difference in behavior.\nEdited install function below:\n```\ndef install\n    # Bully GYP into correctly linking with c++11\n    ENV.cxx11\n    # https://code.google.com/p/v8/issues/detail?id=4511#c3\n    ENV.append \"GYP_DEFINES\", \"v8_use_external_startup_data=0\"\nif build.with? \"icu4c\"\n  ENV.append \"GYP_DEFINES\", \"use_system_icu=1\"\n  i18nsupport = \"i18nsupport=on\"\nelse\n  i18nsupport = \"i18nsupport=off\"\nend\n\n# fix up libv8.dylib install_name\n# https://github.com/Homebrew/homebrew/issues/36571\n# https://code.google.com/p/v8/issues/detail?id=3871\ninreplace \"tools/gyp/v8.gyp\",\n          \"'OTHER_LDFLAGS': ['-dynamiclib', '-all_load']\",\n          \"\\\\0, 'DYLIB_INSTALL_NAME_BASE': '#{opt_lib}'\"\n\n(buildpath/\"build/gyp\").install resource(\"gyp\")\n(buildpath/\"third_party/icu\").install resource(\"icu\")\n(buildpath/\"buildtools\").install resource(\"buildtools\")\n(buildpath/\"tools/swarming_client\").install resource(\"swarming_client\")\n(buildpath/\"testing/gtest\").install resource(\"gtest\")\n(buildpath/\"testing/gmock\").install resource(\"gmock\")\n(buildpath/\"tools/clang\").install resource(\"clang\")\n\nsystem \"make\", \"native\", \"library=shared\", \"snapshot=on\",\n               \"console=readline\", i18nsupport,\n               \"strictaliasing=off\"\n\ninclude.install Dir[\"include/*\"]\n\ncd \"out/native\" do\n  rm [\"libgmock.a\", \"libgtest.a\"]\n  lib.install Dir[\"lib*\"]\n  bin.install \"d8\", \"mksnapshot\", \"process\", \"shell\" => \"v8\"\nend\n\nend\n```\nCommand output below:\n``\nkp@kp-VirtualBox:~$ brew install v8\n==> Downloading https://github.com/v8/v8-git-mirror/archive/4.8.271.20.tar.gz\nAlready downloaded: /home/kp/.cache/Homebrew/v8-4.8.271.20.tar.gz\n==> Cloning https://chromium.googlesource.com/external/gyp.git\nUpdating /home/kp/.cache/Homebrew/v8--gyp--git\n==> Checking out revision 2c1e6cced23554ce84806e570acea637f6473afc\n==> Cloning https://chromium.googlesource.com/chromium/deps/icu.git\nUpdating /home/kp/.cache/Homebrew/v8--icu--git\n==> Checking out revision 42c58d4e49f2250039f0e98d43e0b76e8f5ca024\n==> Cloning https://chromium.googlesource.com/chromium/buildtools.git\nUpdating /home/kp/.cache/Homebrew/v8--buildtools--git\n==> Checking out revision 4a95614772d9bcbd8bc197e1d9bd034e088fc740\n==> Cloning https://chromium.googlesource.com/external/swarming.client.git\nUpdating /home/kp/.cache/Homebrew/v8--swarming_client--git\n==> Checking out revision 8fce79620b04bbe5415ace1103db27505bdc4c06\n==> Cloning https://chromium.googlesource.com/external/github.com/google/googletest.git\nUpdating /home/kp/.cache/Homebrew/v8--gtest--git\n==> Checking out revision 6f8a66431cb592dad629028a50b3dd418a408c87\n==> Cloning https://chromium.googlesource.com/external/googlemock.git\nUpdating /home/kp/.cache/Homebrew/v8--gmock--git\n==> Checking out revision 0421b6f358139f02e102c9c332ce19a33faf75be\n==> Cloning https://chromium.googlesource.com/chromium/src/tools/clang.git\nUpdating /home/kp/.cache/Homebrew/v8--clang--git\n==> Checking out revision 66f5328417331216569e8beb244fd887f62e8997\n==> make native library=shared snapshot=on console=readline i18nsupport=off strictaliasing=off\nLast 15 lines from /home/kp/.cache/Homebrew/Logs/v8/01.make:\n  CXX(target) /tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/accessors.o\n  CXX(target) /tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/address-map.o\n  CXX(target) /tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation.o\n  CXX(target) /tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation-site-scopes.o\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\nmake[1]: *** [/tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/accessors.o] Error 1\nmake[1]: *** Waiting for unfinished jobs....\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\nmake[1]: *** [/tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/address-map.o] Error 1\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\ng++-5: error: unrecognized command line option '-Wshorten-64-to-32'\nmake[1]: *** [/tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation.o] Error 1\nmake[1]: *** [/tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out/native/obj.target/v8_base/src/allocation-site-scopes.o] Error 1\nmake[1]: Leaving directory/tmp/v820160311-10833-1p2pvlo/v8-4.8.271.20/out'\nmake: *** [native] Error 2\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\nv8 formula fails to install on Ubuntu 14.04 https://github.com/Linuxbrew/linuxbrew/issues/917\n```\n. ",
    "18601673727": "Same issue here, please help\n. ",
    "dvolosnykh": "@sjackman, thanks, that  helped.\n$ xz --version\nxz (XZ Utils) 5.2.2\nliblzma 5.2.2\n. ",
    "Luthaf": "```\n$ env |egrep 'LANG|LC'\nLANG=fr_FR.UTF-8\nGDM_LANG=fr_FR.utf8\nLC_CTYPE=fr_FR.utf8\n$ locale\nLANG=fr_FR.UTF-8\nLC_CTYPE=fr_FR.utf8\nLC_NUMERIC=\"fr_FR.UTF-8\"\nLC_TIME=\"fr_FR.UTF-8\"\nLC_COLLATE=\"fr_FR.UTF-8\"\nLC_MONETARY=\"fr_FR.UTF-8\"\nLC_MESSAGES=\"fr_FR.UTF-8\"\nLC_PAPER=\"fr_FR.UTF-8\"\nLC_NAME=\"fr_FR.UTF-8\"\nLC_ADDRESS=\"fr_FR.UTF-8\"\nLC_TELEPHONE=\"fr_FR.UTF-8\"\nLC_MEASUREMENT=\"fr_FR.UTF-8\"\nLC_IDENTIFICATION=\"fr_FR.UTF-8\"\nLC_ALL=\n```\nTo reinstall glibc I had to remove hombrew (cd .linuxbrew && rm -rf* && git reset --hard HEAD) because I was getting errors about brew ld which could not find -lc ...\nAnd then everything works\n$ LC_CTYPE=fr_FR.UTF-8 GDM_LANG=fr_FR.UTF-8 brew install glibc\n==> Installing dependencies for glibc: zlib, binutils, linux-headers\n[...]\n==> Installing glibc\n==> Downloading http://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\nAlready downloaded: ~/.cache/Homebrew/glibc-2.19.tar.bz2\n==> ../configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=~/.linuxbrew/Cellar/glibc/2.19 --enable-obsolete-rpc --without-selinux --with-binutils=~\n==> make\n==> make install\n==> ~/.linuxbrew/Cellar/glibc/2.19/bin/localedef -i fr_FR -f UTF-8 fr_FR.UTF-8\n==> ~/.linuxbrew/Cellar/glibc/2.19/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\n~/.linuxbrew/Cellar/glibc/2.19: 1,367 files, 41.6M, built in 5 minutes 14 seconds\nI'll investigate where does this environment variable come from.\n. Should the glibc formula check for buggy environment variables? Or just having this issue will redirect people with trouble to the fix when the build fails?\n. ",
    "ens-ds23": "Just some more clues, in case this is the missing piece for anyone.\nWe now have a slightly custom linuxbrew glibc in our install, owing to needing 2.25, but with the formula based on the usual linuxbrew glibc formula. Again, a fresh install recreated this issue, but it was fixed by a manual run of localdef, though only after mkdir-ing /Cellar/glibc/2.25/lib/locale first. Without the mkdir the command line fails with a line indicating an ENOENT. Could a required mkdir of this directory be missing from the formula, but required, maybe? If this is a directory that in a non-prefixed install you'd expect to exist as part of the FSSTD, maybe there's no mkdir in the makefile. I'll carry on investigating tomorrow, and see if I can get more info.\ncannot create temporary file: /[...]/Cellar/glibc/2.25/lib/locale/locale-archive.yRe9WM: No such file or directory\n(Same machine/system/setup/tree as @andrewyatz , who's my manager!).. Sadly, in tidying up various apparently unrelated scary things we were doing to bootstrap linuxbrew on RHEL6 box without an installed system compiler (mainly related to dodgy rpaths), this glibc problem unexpectedly went away and, after about a year of us putting up with it, I can't reproduce it any more. :-( So I can't produce a patch. Sorry.. ",
    "alekseysidorov": "Ready\n. The issue is also affected for me.\nbash\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                6\nOn-line CPU(s) list:   0-5\nThread(s) per core:    1\nCore(s) per socket:    6\nSocket(s):             1\nNUMA node(s):          1\nVendor ID:             AuthenticAMD\nCPU family:            16\nModel:                 10\nModel name:            AMD Phenom(tm) II X6 1090T Processor\nStepping:              0\nCPU MHz:               800.000\nCPU max MHz:           3200,0000\nCPU min MHz:           800,0000\nBogoMIPS:              6428.03\nVirtualization:        AMD-V\nL1d cache:             64K\nL1i cache:             64K\nL2 cache:              512K\nL3 cache:              6144K\nNUMA node0 CPU(s):     0-5\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall\nIn my opinion it need to add proper Amd support although Apple does not like this hardware. Phenom processors are not too old and slow.\n. no-zlib does not works for me.\nbash\nAvailable compression methods:\n  NONE\nIllegal instruction\nMakefile:298: \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u0430 \u0434\u043b\u044f \u0446\u0435\u043b\u0438 \u00abtest_ssl\u00bb\nmake[1]: *** [test_ssl] \u041e\u0448\u0438\u0431\u043a\u0430 1\nmake[1]: \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u00ab/tmp/openssl20160415-11542-n9qiy0/openssl-1.0.2g/test\u00bb\nMakefile:460: \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u0430 \u0434\u043b\u044f \u0446\u0435\u043b\u0438 \u00abtests\u00bb\nmake: *** [tests] \u041e\u0448\u0438\u0431\u043a\u0430 2\n==> Formula\nPath: /home/aleksey/.linuxbrew/Library/Formula/openssl.rb\n``` bash\n==> Configuration\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/linuxbrew\nHEAD: 284ee0ef39216b2c7b1e043b5df233c717bbf9a8\nLast commit: 9 \u043c\u0438\u043d\u0443\u0442 \u043d\u0430\u0437\u0430\u0434\nHOMEBREW_PREFIX: /home/aleksey/.linuxbrew\nHOMEBREW_REPOSITORY: /home/aleksey/.linuxbrew\nHOMEBREW_CELLAR: /home/aleksey/.linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: 6-core 64-bit phenom\nKernel: Linux 4.4.0-1-amd64 x86_64 GNU/Linux\nOS: Debian GNU/Linux unstable (sid)\nCodename: sid\nOS glibc: 2.22\nOS gcc: 5.3.1\nLinuxbrew glibc: N/A\nLinuxbrew gcc: N/A\nClang: 3.7 build 0\nX11: 2.7.8 => /usr\nSystem Ruby: 2.3.0 => /usr/bin/ruby2.3\nPerl: /usr/bin/perl\nPython: /usr/bin/python => /usr/bin/python2.7\nRuby: /usr/bin/ruby => /usr/bin/ruby2.3\nJava: Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=gasp\n==> ENV\nCC: /usr/bin/gcc-5\nCXX: /usr/bin/g++-5\nOBJC: /usr/bin/gcc-5\nOBJCXX: /usr/bin/g++-5\nCFLAGS: -Os -w -pipe -march=core2\nCXXFLAGS: -Os -w -pipe -march=core2\nCPPFLAGS: -isystem/home/aleksey/.linuxbrew/include\nLDFLAGS: -L/home/aleksey/.linuxbrew/lib -Wl,--dynamic-linker=/home/aleksey/.linuxbrew/lib/ld.so -Wl,-rpath,/home/aleksey/.linuxbrew/lib\nCMAKE_PREFIX_PATH: /home/aleksey/.linuxbrew\nPKG_CONFIG_LIBDIR: /home/aleksey/.linuxbrew/lib/pkgconfig\nHOMEBREW_BUILD_FROM_SOURCE: 1\nPATH: /home/aleksey/.linuxbrew/bin:/home/aleksey/.cargo/bin:/home/aleksey/.linuxbrew/sbin:/home/aleksey/Applications/Android/sdk/platform-tools:/usr/local/bin:/usr/bin:/bsr/local/games:/usr/games:/home/aleksey/.linuxbrew/Library/ENV/scm\nCPATH: /home/aleksey/.linuxbrew/include\nLD_LIBRARY_PATH: /home/aleksey/.linuxbrew/Cellar/openssl/1.0.2g/lib:/home/aleksey/.linuxbrew/Cellar/openssl/1.0.2g\nLD_RUN_PATH: /home/aleksey/.linuxbrew/lib\nLIBRARY_PATH: /home/aleksey/.linuxbrew/lib\nError: openssl 1.0.2g did not build\n```\nI always thought that mach=core2 is enough for amd k10 family. \n. I did not find the file that causes the fall in openssl tests, but I found illegal instruction in python.\nasm\n0x7ffff6478b36 <strop_maketrans+550>    pshufb %xmm5,%xmm2\nIt seems like k10 does not support SSSE3. \nThis is similar to the bug report\ncore.27879.zip\n. For unknown reasons linuxbrew interprets phenom II as core2 processor family. \nIf I replace \nruby\n:core2 => \"-march=core2\",\nby\nruby\n:core2 => \"-march=native\",\ncompiling is finished without errors.\n. In my opinion the problem is there:\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/extend/ENV/std.rb#L368\nOn 64 bit oldest cpu means core2\nhttps://github.com/Linuxbrew/linuxbrew/blob/master/Library/Homebrew/hardware.rb#L76\n. https://github.com/Linuxbrew/linuxbrew/pull/1094\n. When you are going to cherry-pick this fix?\n. Ready\n. ",
    "dendraya": "what solved the problem in my case was: \nbrew reinstall makedepend -s\nbrew reinstall openssl -s\n. ",
    "mulle-nat": "When I run something on \"Travis-CI\", I always have to compile glibc. There is no bottle.\n==> Installing mulle-kybernetik/software/mulle-build dependency: glibc\nsudo: must be setuid root\n==> Downloading https://ftpmirror.gnu.org/glibc/glibc-2.19.tar.bz2\n==> Downloading from http://gnu.mirror.constant.com/glibc/glibc-2.19.tar.bz2\n==> ../configure --disable-debug --disable-dependency-tracking --disable-silent-\n==> make\n==> make install\nThis makes things very slow and also burdens travis. The same happens with openssl.\nEdit: Sorry I just noticed this is legacy-linuxbrew, possibly the wrong repository.\n. ",
    "infokiller": "Thanks a lot for your quick response and for looking into this!\nYes, this happens consistently every time I run brew update.\nSorry, the directory name in that error message should have actually been /home/infokiller/.git/modules/bin/sources/linuxbrew/. \nI think it will be useful to describe my configuration. I have a git repo in my home directory (/home/infokiller/) that tracks all my dotfiles. This git repo has multiple git submodules located in /home/infokiller/bin/sources. One of them is linuxbrew which is located in /home/infokiller/bin/sources/linuxbrew. Is that what's causing the issue?\nOutput of brew config:\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Linuxbrew/linuxbrew.git\nHEAD: c6d7aad7a118e4242f888bd0d2e526c886f8486c\nLast commit: 14 hours ago\nHOMEBREW_PREFIX: /home/infokiller\nHOMEBREW_REPOSITORY: /home/infokiller/bin/sources/linuxbrew\nHOMEBREW_CELLAR: /home/infokiller/bin/sources/linuxbrew/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://linuxbrew.bintray.com\nCPU: 12-core 64-bit sandybridge\nKernel: Linux 3.13.0-77-generic x86_64 GNU/Linux\nOS: Ubuntu 14.04.1 LTS\nCodename: trusty\nOS glibc: 2.19\nOS gcc: 4.8.4\nLinuxbrew glibc: N/A\nLinuxbrew gcc: N/A\nClang: N/A\nX11: 2.7.8 => /usr\nSystem Ruby: 1.9.3-p484 => /usr/bin/ruby1.9.1\nPerl: /usr/bin/perl\nPython: /usr/bin/python => /usr/bin/python2.7\nRuby: /usr/bin/ruby => /usr/bin/ruby1.9.1\nJava: openjdk version \"1.8.0\"\nOutput of brew doctor.\n. Nope, it's not intentional. How do I set it correctly?\n. Thanks, that did the trick!\nI agree it's better to put the dotfiles outside the root home directory, it's on my task list for some time now :)\n. ",
    "Sailia": "Hey sjackman, I was wondering whether I have the same issue as infokiller as I got the same error, and if you could please help me out on this one!\nbrew config\nHOMEBREW_VERSION: 0.9.9\nORIGIN: https://github.com/Homebrew/brew\nHEAD: a5a930c48bec7bb7bdc6bbf7e0fe7fe5f564a7fe\nLast commit: 25 hours ago\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\nCore tap HEAD: fd4fe97197d76ff4f256fa57a647cfdcd22bfba2\nCore tap last commit: 3 months ago\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_REPOSITORY: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\nCPU: quad-core 64-bit haswell\nHomebrew Ruby: 2.0.0-p648\nClang: 7.3 build 703\nGit: 2.7.4 => /Applications/Xcode.app/Contents/Developer/usr/bin/git\nPerl: /usr/bin/perl\nPython: /usr/bin/python\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.0/bin/ruby\nJava: 1.8.0_77, 1.6.0_65-b14-468\nOS X: 10.11.6-x86_64\nXcode: 7.3.1\nCLT: 7.3.1.0.1.1461711523\nX11: 2.7.8 => /opt/X11\nThank you!\n. Never mind, I looked twice at what you said, and managed to fix it. Thanks!\n. ",
    "evgeniyd": "Could you please help me with the similar issue?\nMy error output:\n$ brew update\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory\nError: update-report should not be called directly!\n..and config:\n$ brew config\nHOMEBREW_VERSION: 0.9.9\nORIGIN: https://github.com/Homebrew/brew.git\nHEAD: 38209aadbfe4fd0c6772467c4bc5c63325d53f6c\nLast commit: 25 hours ago\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\nCore tap HEAD: c195f62500a3e41f9fd4fe48e537e2d41dc359e6\nCore tap last commit: 5 weeks ago\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_REPOSITORY: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\nCPU: quad-core 64-bit haswell\nHomebrew Ruby: 2.0.0-p648\nClang: 7.3 build 703\nGit: 2.7.4 => /Applications/Xcode.app/Contents/Developer/usr/bin/git\nPerl: /usr/bin/perl\nPython: /usr/bin/python\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\nJava: 1.8.0_92\nOS X: 10.12-x86_64\nXcode: 7.3.1\nCLT: N/A\nX11: N/A\n. it did! thank you!\n. ",
    "astro313": "Hi,\nI am experiencing the same issue, could you please let me know how to solve this. Thanks!\n\nbrew update\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\n/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory\nError: update-report should not be called directly!\nbrew config\nHOMEBREW_VERSION: 0.9.9\nORIGIN: https://github.com/Homebrew/brew.git\nHEAD: 295e937f270826aef4e64f0056950a948e3502b1\nLast commit: 16 minutes ago\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\nCore tap HEAD: 0485e5a69b7c771970262d9aa601b255d84ab563\nCore tap last commit: 5 months ago\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_REPOSITORY: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\nCPU: quad-core 64-bit ivybridge\nHomebrew Ruby: 2.0.0-p648 => /usr/local/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/bin/ruby\nClang: 5.1 build 503\nGit: 1.8.5.2 => /Applications/Xcode.app/Contents/Developer/usr/bin/git\nPerl: /usr/bin/perl\nPython: /Users/admin/anaconda/bin/python => /Users/admin/anaconda/bin/python2.7\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.0/bin/ruby\nJava: 1.6.0_65-b14-466.1\nOS X: 10.8.5-x86_64\nXcode: 5.1.1\nCLT: 5.1.0.0.1.1396320587\nX11: 2.7.8 => /opt/X11\n. \n",
    "maleghast": "Is there any chance that someone can merge this..?  I really want to install Elixir on my new work Linux machine, and I would MUCH rather do it with Brew than from scratch, but I can't at the moment because of this bug in the Cairo build, Cairo being a dep for Elixir.\n. Thanks guys :-)  I am still getting the hang of making stuff work on Linux - been on a Mac for work for 14 years...  I ran into another issue to do with wxmac, but thanks for getting me this far.\n. ",
    "7kemZmani": "\nAs Piotr mentioned, but also add --with-x11 to cairo.\nbrew install linuxbrew/xorg/xorg\nbrew install cairo --with-x11\nbrew install elixir\n\n\ndoesn't work :-1:  I'm getting:\nWarning: cairo: this formula has no --with-x11 option so it will be ignored!\n...\nchecking for X11/extensions/shmproto.h... yes\nchecking for X11/extensions/shmstr.h... yes\nchecking whether cairo's Xlib surface backend feature could be enabled... yes\nchecking for cairo's Xlib Xrender surface backend feature... \nchecking for xlib_xrender... no\nchecking for X11/extensions/Xrender.h... yes\nchecking for XRenderCreateSolidFill... yes\nchecking for XRenderCreateLinearGradient... yes\nchecking for XRenderCreateRadialGradient... yes\nchecking for XRenderCreateConicalGradient... yes\nchecking whether cairo's Xlib Xrender surface backend feature could be enabled... yes\nchecking for cairo's XCB surface backend feature... \nchecking for xcb... no\nchecking whether cairo's XCB surface backend feature could be enabled... no (requires xcb >= 1.6 xcb-render >= 1.6 http://xcb.freedesktop.org)\nconfigure: error:  XCB surface backend feature could not be enabled\n. @rwhogg \n\nIf that fails, you can try brew install cairo --env=std.\n\nThis line did it for me, \nThanks!. @maxim-belkin \n\nbrew install libxcb\n\nWarning: linuxbrew/xorg/libxcb-1.12 already installed. @maxim-belkin\n\nSo, which line exactly worked for you\n\nbrew install cairo --env=std. result:\nSwitched to branch 'master'\nHEAD is now at dc9752e Add symlink_host_gcc: Symlink the host's compiler for Linuxbrew (#358)\nremote: Counting objects: 329, done.\nremote: Compressing objects: 100% (153/153), done.\nremote: Total 329 (delta 191), reused 297 (delta 160), pack-reused 0\nReceiving objects: 100% (329/329), 148.56 KiB | 0 bytes/s, done.\nResolving deltas: 100% (191/191), completed with 17 local objects.\nFrom https://github.com/Linuxbrew/brew\n * [new branch]      gh-pages   -> origin/gh-pages\nFrom https://github.com/Linuxbrew/brew\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nAlready on 'master'\nYour branch is up-to-date with 'origin/master'.\nHEAD is now at 49aca39 CONTRIBUTING.md: Fix typos (#12)\nremote: Counting objects: 97, done.\nremote: Compressing objects: 100% (45/45), done.\nremote: Total 97 (delta 59), reused 88 (delta 50), pack-reused 0\nUnpacking objects: 100% (97/97), done.\nFrom https://github.com/Linuxbrew/homebrew-extra\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nAlready on 'master'\nYour branch is up-to-date with 'origin/master'.\nHEAD is now at 576e451 xorg-protocols: fix dependencies and URL\nremote: Counting objects: 2426, done.\nremote: Compressing objects: 100% (607/607), done.\nremote: Total 2426 (delta 1886), reused 2359 (delta 1819), pack-reused 0\nReceiving objects: 100% (2426/2426), 408.08 KiB | 0 bytes/s, done.\nResolving deltas: 100% (1886/1886), completed with 64 local objects.\nFrom https://github.com/Linuxbrew/homebrew-xorg\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nAlready on 'master'\nYour branch is up-to-date with 'origin/master'.\nHEAD is now at ef5061d travis: reconcile with homebrew/science (#2560)\nremote: Counting objects: 356177, done.\nremote: Compressing objects: 100% (146355/146355), done.\nremote: Total 356177 (delta 210878), reused 352305 (delta 207018), pack-reused 0\nReceiving objects: 100% (356177/356177), 121.33 MiB | 3.39 MiB/s, done.\nResolving deltas: 100% (210878/210878), completed with 3678 local objects.\nFrom https://github.com/Linuxbrew/homebrew-core\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.. I'm getting an error when I try:\n\nbrew remove cairo\n..\nbecause it is required by harfbuzz 1.4.6, atk 2.24.0, gdk-pixbuf 2.36.6, gobject-introspection 1.52.0_1, which are currently installed.\nYou can override this and force removal with:\n  brew uninstall --ignore-dependencies cairo\n\nnow I'm afraid that 'brew uninstall --ignore-dependencies cairo' is going to break something else :/\nso, are things going to go back to normal after forcing the removal of the dependencies, and reinstalling cairo?\n. @maxim-belkin \nhttps://gist.github.com/308f50a16f3631424cd57932aea01771\n. good...\nnow that we got 'cairo' to install properly, I'm getting the same problem with 'gtk+' this time.\nthese are all for the sake of:\nbrew install erlang\n(heading back to google). #2564. ",
    "thorerik": "After installing gcc via brew and retrying ncmpcpp without the patch:\nhttps://gist.github.com/anonymous/5f0952bc3662f37536b723cb3d17e181\nWith the patch:\nhttps://gist.github.com/anonymous/88234e5a389bbd22486cc5e3f2e76b2d\n. Yep, that last patch fixed the issue\n. ",
    "ahmedmagds": "@tseemann I have the same problem and I cannot install Nullarbor because of this error\n. Please have a look on my log file\nhttps://gist.github.com/f693b60f8182900468fcf3cb9e962216 \n. the command fixed it, thanks alot\n. ",
    "romainstuder": "Any update for this problem? I am facing exactly the same trouble.\n. ",
    "G-Square": "@apjanke  Need Java 1.8 on CI \nThanks\n. I will create a new PR with if OS.mac? and 1.8+.\nI changed Java version due to Travis constant use of  1.7, line 91-92:Java version: 1.7.0_80, vendor: Oracle Corporation.\nAlthough it seemed highly unlike, I checked to see if extra + was the cause.\nIs Java 1.8.* installed but not triggered on Travis?\nThanks\n. It kinda getting annoying as both homebrew-core and now renamed legacy-homebrew on Jenkins both have errors parsing XML UTF-8 on this update. And now Travis also has issues. \nHonestly for a simple update, I thought this process would be more seamless.\nLet me know it something changes.\nThanks!\n. necessary? No, but does it save some time (ms-2sec) on redirecting? yes\n. So, you don't want the new version?\n. ",
    "apjanke": "\nWhat are the \"errors parsing XML UTF-8\" that you mention? Is it related to this issue, or a more general issue?\n\nThis is more of a brew test-bot bug.\nThis happens on the test bot if the build or test script emits certain UTF-8 characters that aren't allowed in XML, or bytes that aren't valid UTF-8 text. The Jenkins test results are output in an XML file, and if it's invalid, the test run fails. brew test-bot tries to filter them out and ensure valid output, but it's not fully correct yet. There's no open issue for it; Homebrew/legacy-homebrew#50092 was an attempt to fix this. We'll get it soon.\n. ",
    "lparsons": "I'm running into the same issue: output from brew install vim; brew gist-logs vim: https://gist.github.com/8f19eb13e2f018823bef377f0f24c72e\n. Installing perl ran into a separate issue (though perhaps I can just force install and ignore the test error?). brew install perl; brew gist-logs perl: https://gist.github.com/anonymous/c857358d39db38cb1472356d2816d28d\nI'm installing this as a non-root user (with no root privs) so there is no linuxbrew user and thus installing it into ${HOME}/.linuxbrew.\n. OK, was able to get perl installed using the --without-test flags.  However, vim install ended up with the same error: https://gist.github.com/34b11720a23190d2e73da5d91ae201da\n. Will see what I can do, but not really. I've built it from source myself, just thought it would be handy to have linuxbrew do it (manage updates, etc.). I'll poke around, but so far, I've not found much.\nI do see the file in a couple of places in .linuxbrew:\n:~/.linuxbrew$ find . -name \"EXTERN.h\"\n./Cellar/perl/5.24.0_2/lib/perl5/5.24.0/x86_64-linux-thread-multi/CORE/EXTERN.h\n./lib/perl5/5.24.0/x86_64-linux-thread-multi/CORE/EXTERN.h\n. ",
    "cambxh": "I met this error under CentOS 7 and solved with yum -y install perl-devel perl-ExtUtils-Embed before making. ",
    "M0bil3Rulz": "On Centos, I resolved by adding CFLAGS onto \"./configure\" command.\n$ locate EXTERN.h\n/usr/lib64/perl5/CORE/EXTERN.h\n$ CFLAGS=\"-I/usr/lib64/perl5/CORE/\" ./configure --prefix=/opt/vim ...\n(where ... is other options you want configured during compilation). ",
    "channprj": "Thank you for your advice, but it doesn't work. Same errors occur.\nshell\nchannprj@ubt-chann:~ \u00bb brew doctor\nYour system is ready to brew.\nand... my CPU is here.\n``` shell\nprocessor   : 0\nvendor_id   : AuthenticAMD\ncpu family  : 16\nmodel       : 5\nmodel name  : AMD Athlon(tm) II X4 645 Processor\nstepping    : 3\nmicrocode   : 0x10000c8\ncpu MHz     : 3100.000\ncache size  : 512 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 0\ncpu cores   : 4\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 5\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate npt lbrv svm_lock nrip_save vmmcall\nbugs        : tlb_mmatch fxsave_leak sysret_ss_attrs\nbogomips    : 6228.11\nTLB size    : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 48 bits physical, 48 bits virtual\npower management: ts ttp tm stc 100mhzsteps hwpstate\nprocessor   : 1\nvendor_id   : AuthenticAMD\ncpu family  : 16\nmodel       : 5\nmodel name  : AMD Athlon(tm) II X4 645 Processor\nstepping    : 3\nmicrocode   : 0x10000c8\ncpu MHz     : 2400.000\ncache size  : 512 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 1\ncpu cores   : 4\napicid      : 1\ninitial apicid  : 1\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 5\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate npt lbrv svm_lock nrip_save vmmcall\nbugs        : tlb_mmatch fxsave_leak sysret_ss_attrs\nbogomips    : 6228.11\nTLB size    : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 48 bits physical, 48 bits virtual\npower management: ts ttp tm stc 100mhzsteps hwpstate\nprocessor   : 2\nvendor_id   : AuthenticAMD\ncpu family  : 16\nmodel       : 5\nmodel name  : AMD Athlon(tm) II X4 645 Processor\nstepping    : 3\nmicrocode   : 0x10000c8\ncpu MHz     : 800.000\ncache size  : 512 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 2\ncpu cores   : 4\napicid      : 2\ninitial apicid  : 2\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 5\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate npt lbrv svm_lock nrip_save vmmcall\nbugs        : tlb_mmatch fxsave_leak sysret_ss_attrs\nbogomips    : 6228.11\nTLB size    : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 48 bits physical, 48 bits virtual\npower management: ts ttp tm stc 100mhzsteps hwpstate\nprocessor   : 3\nvendor_id   : AuthenticAMD\ncpu family  : 16\nmodel       : 5\nmodel name  : AMD Athlon(tm) II X4 645 Processor\nstepping    : 3\nmicrocode   : 0x10000c8\ncpu MHz     : 800.000\ncache size  : 512 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 3\ncpu cores   : 4\napicid      : 3\ninitial apicid  : 3\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 5\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate npt lbrv svm_lock nrip_save vmmcall\nbugs        : tlb_mmatch fxsave_leak sysret_ss_attrs\nbogomips    : 6228.11\nTLB size    : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 48 bits physical, 48 bits virtual\npower management: ts ttp tm stc 100mhzsteps hwpstate\n```\nThank you for your help.\n. >> See Gist\nrb\n...\n     :core => \"-march=prescott\",\n+    :\"0x1005\" => \"\",\n     :arm => \"\",\n...\nI tested your new patch after $ brew update; brew doctor, but It's same as before.\nI'm going to find the cause of error... :sob:. Thank you for your advise.\n. >> See Gist\nshell\nError: openssl 1.0.2g did not build\n...I do not buy AMD cpu next time.. :disappointed: \n. ",
    "dochang": "brew install lnav --cc=clang reports the same error.\n. brew install llvm --with-clang causes high CPU usage and makes my laptop too hot to install clang by brew.  I install clang by apt-get (Debian sid) instead.\nHere is the gist-log of brew install lnav --cc=clang.\n. I can build with clang after removing libssl-dev.  But building with gcc still fails.\ngist-logs for brew install lnav.\n. I didn't install libpcre3-dev.  There're only runtime libraries:\n$ dpkg -l '*pcre*'\nDesired=Unknown/Install/Remove/Purge/Hold\n| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend\n|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)\n||/ Name                     Version           Architecture      Description\n+++-========================-=================-=================-======================================================\nun  libpcre-ocaml            <none>            <none>            (no description available)\nii  libpcre16-3:amd64        2:8.38-3.1        amd64             Perl 5 Compatible Regular Expression Library - 16 bit \nii  libpcre3:amd64           2:8.38-3.1        amd64             Perl 5 Compatible Regular Expression Library - runtime\nun  libpcre3-dev             <none>            <none>            (no description available)\ngist-logs of brew install pcre lnav:\nCXXLD    lnav-test\nlnav.o: In function `execute_search(lnav_view_t, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\nlnav.cc:(.text+0x240e): undefined reference to `pcrecpp::RE::QuoteMeta[abi:cxx11](pcrecpp::StringPiece const&)'\ncollect2: error: ld returned 1 exit status\nMakefile:745: recipe for target 'lnav' failed\nmake[1]: *** [lnav] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nlnav.o: In function `execute_search(lnav_view_t, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\nlnav.cc:(.text+0x240e): undefined reference to `pcrecpp::RE::QuoteMeta[abi:cxx11](pcrecpp::StringPiece const&)'\ncollect2: error: ld returned 1 exit status\nMakefile:749: recipe for target 'lnav-test' failed\nmake[1]: *** [lnav-test] Error 1\nmake[1]: Leaving directory '/tmp/lnav20160412-7877-1la5erd/lnav-0.8.0/src'\nMakefile:463: recipe for target 'install-recursive' failed\nmake: *** [install-recursive] Error 1\n. Great!  Your patch works!\nbrew remove pcre\nbrew edit pcre     # apply the patch\nbrew install --build-from-source pcre --cxx11\nbrew install lnav\nbrew install gcc is unnecessary.\nNow lnav has been installed!  Thanks for your help!\n. A formula for libgpm has been created.  Please check #1070 .\n. The last build fails on timeout.  Please try it again.\n. All issues are fixed.  Thanks for your help!\n. /usr/bin/gcc-5 -L/home/doc/.linuxbrew/lib -Wl,--dynamic-linker=/home/doc/.linuxbrew/lib/ld.so -Wl,-rpath,/home/doc/.linuxb\nrew/lib -L/tmp/libgpm20160413-3016-1win64j/gpm-1.20.7/src -L/home/doc/.linuxbrew/lib -Wl,--dynamic-linker=/home/doc/.linux\nbrew/lib/ld.so -Wl,-rpath,/home/doc/.linuxbrew/lib -o prog/mouse-test prog/mouse-test.o mice.o twiddler.o synaptics.o prog\n/open_console.o lib/libgpm.so.2   -lm\n/usr/bin/gcc-5 -L/home/doc/.linuxbrew/lib -Wl,--dynamic-linker=/home/doc/.linuxbrew/lib/ld.so -Wl,-rpath,/home/doc/.linuxb\nrew/lib -L/tmp/libgpm20160413-3016-1win64j/gpm-1.20.7/src -L/home/doc/.linuxbrew/lib -Wl,--dynamic-linker=/home/doc/.linux\nbrew/lib/ld.so -Wl,-rpath,/home/doc/.linuxbrew/lib -o prog/disable-paste prog/disable-paste.o lib/libgpm.so.2  \ngcc-5: error: prog/mev.o: No such file or directory\nMakefile:65: recipe for target 'prog/mev' failed\nmake[1]: *** [prog/mev] Error 1\nmake[1]: *** Waiting for unfinished jobs....\ngcc-5: error: prog/hltest.o: No such file or directory\nMakefile:65: recipe for target 'prog/hltest' failed\nmake[1]: *** [prog/hltest] Error 1\ngcc-5: error: prog/disable-paste.o: No such file or directory\nMakefile:65: recipe for target 'prog/disable-paste' failed\nmake[1]: *** [prog/disable-paste] Error 1\nmake[1]: Leaving directory '/tmp/libgpm20160413-3016-1win64j/gpm-1.20.7/src'\nMakefile:77: recipe for target 'do-install' failed\nmake: *** [do-install] Error 1\n. ",
    "mxplusb": "The only one I found was in ~/.linuxbrew/Library/ENV/4.3/. I'm assuming that's the proper one?\nThanks for the quick response. :+1: \n. Ah that's what I was looking for. That fixed it. Where would you like me to document that?\n. ",
    "int03h": "HI thanks for all the help! :) \nI did see https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=807136 but I assumed that it would be \"handled\" by brew since it's installed in the native environment - i.e. it is buildable (somehow)\ndoing a dpkg -l : \nii  go                                     1.6-godeb1                   amd64        Go language compiler and tools (gc)\ntesting : \nbrew reinstall binutils go\n```\n==> Reinstalling binutils\n==> Downloading http://ftpmirror.gnu.org/binutils/binutils-2.26.tar.gz\nAlready downloaded: /root/.cache/Homebrew/binutils-2.26.tar.gz\n==> ./configure  --with-sysroot=/ --prefix=/root/.linuxbrew/Cellar/binutils/2.26\n==> make\n==> make install\n/root/.linuxbrew/Cellar/binutils/2.26: 3,178 files, 192.2M, built in 1 minute 50 seconds\n==> Reinstalling go\n==> Downloading https://storage.googleapis.com/golang/go1.6.src.tar.gz\nAlready downloaded: /root/.cache/Homebrew/go-1.6.tar.gz\n==> Downloading https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\nAlready downloaded: /root/.cache/Homebrew/go--gobootstrap-64.tar.gz\n==> ./make.bash --no-clean\nLast 15 lines from /root/.cache/Homebrew/Logs/go/01.make.bash:\nnet/http/pprof\ncmd/pprof\nnet/rpc\nnet/http/fcgi\nnet/rpc/jsonrpc\ncmd/pprof\n/tmp/go20160408-30952-xu75d5/go/gobootstrap/pkg/linux_amd64/runtime/cgo.a(_all.o): unknown relocation type 42; compiled without -fpic?\n/tmp/go20160408-30952-xu75d5/go/gobootstrap/pkg/linux_amd64/runtime/cgo.a(_all.o): unknown relocation type 42; compiled without -fpic?\nruntime/cgo(.text): unexpected relocation type 298\nruntime/cgo(.text): unexpected relocation type 298\ncmd/go\n/tmp/go20160408-30952-xu75d5/go/gobootstrap/pkg/linux_amd64/runtime/cgo.a(_all.o): unknown relocation type 42; compiled without -fpic?\n/tmp/go20160408-30952-xu75d5/go/gobootstrap/pkg/linux_amd64/runtime/cgo.a(_all.o): unknown relocation type 42; compiled without -fpic?\nruntime/cgo(.text): unexpected relocation type 298\nruntime/cgo(.text): unexpected relocation type 298\n```\ni.e. it throws the same errors.\nroot@crunk:/# /usr/bin/ld --version\nGNU ld (GNU Binutils for Debian) 2.26\nand root@crunk:/# /root/.linuxbrew/bin/ld -v\nGNU ld (GNU Binutils) 2.26.20160125\nThanks!\n. Fixed ! \n``\nroot@crunk:~# CGO_ENABLED=0 brew install go\n==> Downloading https://storage.googleapis.com/golang/go1.6.src.tar.gz\nAlready downloaded: /root/.cache/Homebrew/go-1.6.tar.gz\n==> Downloading https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\nAlready downloaded: /root/.cache/Homebrew/go--gobootstrap-64.tar.gz\n==> ./make.bash --no-clean\n==> ./make.bash --no-clean\n==> /root/.linuxbrew/Cellar/go/1.6/bin/go install -race std\n==> Cloning https://go.googlesource.com/tools.git\nCloning into '/root/.cache/Homebrew/go--gotools--git'...\nremote: Sending approximately 10.68 MiB ...\nremote: Counting objects: 774, done\nremote: Finding sources: 100% (5/5)\nremote: Total 15898 (delta 10660), reused 15896 (delta 10660)\nReceiving objects: 100% (15898/15898), 10.28 MiB | 8.95 MiB/s, done.\nResolving deltas: 100% (10660/10660), done.\nChecking connectivity... done.\n==> Checking out branch release-branch.go1.6\n==> go build\n==> go build\n==> Caveats\nAs of go 1.2, a valid GOPATH is required to use thego get` command:\n  https://golang.org/doc/code.html#GOPATH\nYou may wish to add the GOROOT-based install location to your PATH:\n  export PATH=$PATH:/root/.linuxbrew/opt/go/libexec/bin\n```\nafter setting PATH and logout .. \nroot@crunk:~# which go\n/root/.linuxbrew/bin/go\nroot@crunk:~# go version\ngo version go1.6 linux/amd64\nThanks! \n. deleted everything and did a clean install of just libjson-rpc-cpp ( and the dependencies it pulls ) .. \neth@eth ~ $ brew install libjson-rpc-cpp\n==> Installing dependencies for libjson-rpc-cpp: jsoncpp, libmicrohttpd\n==> Installing libjson-rpc-cpp dependency: jsoncpp\n==> Downloading https://github.com/open-source-parsers/jsoncpp/archive/1.6.5.tar.gz\nAlready downloaded: /home/eth/.cache/Homebrew/jsoncpp-1.6.5.tar.gz\n**Error: The selected compiler doesn't support C++11: gcc**\nnot sure if I fixed it more or broke it less !!?! :) \nhttps://gist.github.com/b2bbfc8c02edac52b74bf1e0cf011ae0\n. when I say I deleted everything .. I mean I did a rm -rf .linuxbrew and did a brand new brew install libjson-rpc-cpp .. and now it's failing on that dependency that previously got installed .. I guess because I had gcc and a bunch of other stuff installed in brew environment. \n. HI .. \nSame machine  - totally different build environment - throws the same error - I started with a brew install gcc --with-glibc as suggested. \nLast 15 lines from /home/eth/.cache/Homebrew/Logs/libjson-rpc-cpp/02.make:\nmake[2]: Leaving directory '/tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0'\n[ 61%] Built target simpleserversample\nmake -f src/examples/CMakeFiles/stubserversample.dir/build.make src/examples/CMakeFiles/stubserversample.dir/depend\nmake[2]: Entering directory '/tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0'\n[ 62%] Generating Server Stubfiles\ncd /tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0/src/examples && ../../bin/jsonrpcstub /tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0/src/examples/spec.json --cpp-server=AbstractStubServer --cpp-server-file=/tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0/gen/abstractstubserver.h\n../../bin/jsonrpcstub: error while loading shared libraries: libjsonrpccpp-stub.so.0: cannot open shared object file: No such file or directory\nsrc/examples/CMakeFiles/stubserversample.dir/build.make:65: recipe for target 'gen/abstractstubserver.h' failed\nmake[2]: *** [gen/abstractstubserver.h] Error 127\nmake[2]: Leaving directory '/tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0'\nCMakeFiles/Makefile2:524: recipe for target 'src/examples/CMakeFiles/stubserversample.dir/all' failed\nmake[1]: *** [src/examples/CMakeFiles/stubserversample.dir/all] Error 2\nmake[1]: Leaving directory '/tmp/libjson-rpc-cpp20160420-24490-19j6w/libjson-rpc-cpp-0.6.0'\nMakefile:163: recipe for target 'all' failed\nmake: *** [all] Error 2\nhttps://gist.github.com/2d827b371572ac3bada5d2ba8bf287e1\n. ",
    "skystrife": "OK, I was able to solve this by using a brewed perl (which takes forever to install because of the make test...).\nDoes git need to depend on a more recent version of perl than 5.14.2?\n. Here's what's in that directory for me when running a shell after a brew install -dv git without first installing perl:\nbash\n$ find /home/meta/.linuxbrew/Cellar/git/2.8.0/lib/perl/5.14.2\n/home/meta/.linuxbrew/Cellar/git/2.8.0/lib/perl/5.14.2\n/home/meta/.linuxbrew/Cellar/git/2.8.0/lib/perl/5.14.2/auto\n/home/meta/.linuxbrew/Cellar/git/2.8.0/lib/perl/5.14.2/auto/Git\n/home/meta/.linuxbrew/Cellar/git/2.8.0/lib/perl/5.14.2/auto/Git/.packlist\nYour patch fixes the problem for me, btw. Can we merge it?\n. I'm away from my machine right now, but it is the exact same error reported here: http://stackoverflow.com/questions/29816529/unsupported-protocol-while-downlod-tar-gz-package\nCMake, when compiled with its own curl, does not enable OpenSSL by default. Using the \"system\" curl (brewed curl) fixes this.\n\nThis patch should probably also need\nruby\ndepends_on \"curl\" unless OS.mac?\n\nThis is already in the formula.\n. The problem is not with file(DOWNLOAD ...), but with ExternalProject_Add(...) as specified in the commit and the starting post for this PR.\nHere is a reproduction on my system:\nbash\ncat >CMakeLists.txt <<EOF\ncmake_minimum_required(VERSION 3.5)\ninclude(ExternalProject)\nExternalProject_Add(bwa\nSOURCE_DIR \".\"\nDOWNLOAD_DIR \".\"\nURL https://github.com/lh3/bwa/releases/download/v0.7.13/bwa-0.7.13.tar.bz2\nURL_HASH \"SHA256=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\nCONFIGURE_COMMAND \"\"\nBUILD_COMMAND \"\"\nINSTALL_COMMAND \"\")\nEOF\ncmake .\nmake\nWhich gives me this:\n```\nScanning dependencies of target bwa\n[ 12%] Creating directories for 'bwa'\n[ 25%] Performing download step (download, verify and extract) for 'bwa'\n-- downloading...\n     src='https://github.com/lh3/bwa/releases/download/v0.7.13/bwa-0.7.13.tar.bz2'\n     dst='/home/meta/derp/bwa-0.7.13.tar.bz2'\n     timeout='none'\nCMake Error at derp/bwa-prefix/src/bwa-stamp/download-bwa.cmake:27 (message):\n  error: downloading\n  'https://github.com/lh3/bwa/releases/download/v0.7.13/bwa-0.7.13.tar.bz2'\n  failed\nstatus_code: 1\nstatus_string: \"Unsupported protocol\"\nlog: Protocol \"https\" not supported or disabled in libcurl\n\nClosing connection -1\nmake[2]:  [bwa-prefix/src/bwa-stamp/bwa-download] Error 1\nmake[1]:  [CMakeFiles/bwa.dir/all] Error 2\nmake: *** [all] Error 2\n```\nNow, why these are different is completely beyond me. But they are, and this problem doesn't occur with the modifications in this PR.\n. Cool!\nRE: revision bump---In that case, people who have the old bottle (without https support in ExternalProject) won't be made aware of the update though, right?\n. > I would like to eventually have more bottles (precompiled binaries) for Linuxbrew.\nWhat are the current blockers for this? Is it mainly issues of formulae not being (or not being known to be) relocatable?\n. ",
    "heinemml": "I just noticed that this is basically the same problem I tried to fix here: https://github.com/Linuxbrew/homebrew-core/pull/383\n. ",
    "DwinGrashof": "Hello,\nYes it was. I am sorry for the trouble.\nRegards,\nDwin Grashof\n. I am sorry, this is the link I got: https://gist.github.com/5ed55a7589a494f032ff82c6dcc9fec3\n. ",
    "MyCookie": "Thanks for replying! I didn't expect any direct help, it's really new and honestly it's a bit of a Frankenstein's monster right now. There are things missing all over the place.\nRight now by default, you run as root, I've tried adding a user and trying again, but everything on the file system is owned by root and that cannot be changed.\nI've done the usual brew install python and here's the output: Error: Invalid argument - (/tmp/pkg-config20160413-3748-101xbpy/pkg-config-0.29.1/AUTHORS, /root/.linuxbrew/Cellar/pkg-config/0.29.1/AUTHORS)\nbrew install pkg-config -dv: https://gist.github.com/anonymous/b5d94b6fdf3e99cf3b70268d03c7e909\nbrew install hello: https://gist.github.com/anonymous/f8ed4cf8d1348c6420beac813f1ee5e6\nLooks like the same issue, now I'm trying after installing ruby2.0.\nbrew install hello -dv: https://gist.github.com/anonymous/19914c11d1b16ba1020b456c815bb2cb\nOh no! It got worse! Looks like it's too hacked-together right now to be of any use, installing ruby2.0 just breaks it even more.\nThanks for the help, but I don't think it'll work anytime soon. I'll keep on trying when I remember and keep things posted here.\n. ~~I won't be able to try out those things for some time, have a paper due tonight that I'm working on. I'll edit this post after I head home, but it's going to be late.~~\nHere's a quick update, really tired so I'll give more info ~~tomorrow~~ later today =)\n\nI wasn't very sure what you meant by choosing traceback, so here's me trying again with -d with ruby2.0.\n\nAnd again with ruby1.9.1.\n\nlibc.so.6 is where it expects it to be, unless it's ignoring the link. Which would make sense since it didn't raise an error stating it couldn't find it: it couldn't find the version.\n. Sorry I didn't post recently. I'm going to have to pull out of this issue, I ran into a bug that caused the system to stop responding on wake from suspend and restarting isn't solving anything. I haven't had time in-between studying for exams to find a fix, and I'm going to have to pull out of the insider builds for some time.\nI'll try again when they push it to the slow ring, don't want to spend time bug fixing :sob: \n. ",
    "whereyoufindthis": "Thank you for the answer! \nI suppose that the only way to install git is installing it from sources\nCause brew uses git to fetch git\n. It is my fault that I did not launch that command\nBut nevertheless it will be great if this information will be on your website!\n``` sh\n$ brew doctor\n...\nWarning: An outdated version of Git was detected in your PATH.\nGit 1.7.10 or newer is required to perform checkouts over HTTPS from GitHub.\nPlease upgrade: brew install git\n...\n```\nAnd my git is really dummy \nsh\n$ brew install git -v\n==> Tapping homebrew/dupes\ngit clone https://github.com/Homebrew/homebrew-dupes /home-local/gratom/satom12/.linuxbrew/Library/Taps/homebrew/homebrew-dupes --config core.autocrlf=false --depth=1\nerror: unknown option `config'\n...\nError: Failure while executing: git clone https://github.com/Homebrew/homebrew-dupes /home-local/gratom/satom12/.linuxbrew/Library/Taps/homebrew/homebrew-dupes --config core.autocrlf=false --depth=1\nThank you very much, you are awesome!\n. $ brew deps git\nError: No available formula with the name \"homebrew/dupes/m4\" \nPlease tap it and then try again: brew tap homebrew/dupes\n$ brew deps --tree git\ngit (required dependencies)\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 xz\n\u251c\u2500\u2500 openssl\n\u2502   \u251c\u2500\u2500 make depend\n\u2502   \u2502   \u2514\u2500\u2500 pig-config\n\u2502   \u251c\u2500\u2500 patch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u251c\u2500\u2500 patch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u2514\u2500\u2500 lib\n\u251c\u2500\u2500 curl\n\u2502   \u251c\u2500\u2500 pig-config\n\u2502   \u251c\u2500\u2500 patch\n\u2502   \u2502   \u2514\u2500\u2500 xz\n\u2502   \u2514\u2500\u2500 openssl\n\u2502       \u251c\u2500\u2500 make depend\n\u2502       \u2502   \u2514\u2500\u2500 pig-config\n\u2502       \u251c\u2500\u2500 patch\n\u2502       \u2502   \u2514\u2500\u2500 xz\n\u2502       \u251c\u2500\u2500 patch\n\u2502       \u2502   \u2514\u2500\u2500 xz\n\u2502       \u2514\u2500\u2500 lib\n\u2514\u2500\u2500 expat\n$ brew install -s git\n==> Tapping homebrew/dupes\nerror: unknown option `config'\n...\n. ",
    "ilovezfs": "@sjackman See https://github.com/Homebrew/legacy-homebrew/issues/50066#issuecomment-199201268\n. ",
    "nabeelomer": "@tseemann That is actually a very good idea.\n. Could you share how you did it?\nTheoretically, Linuxbrew could check if the version installed by the system is the compatible with what the formula requires.\n. Would you be fine with this behavior if Linuxbrew checked whether the version provided by APT or whatever is the same that the formula requires?\n. ",
    "julian45": "I think I figured it out - running that gave an error, so I had RVM get the newest version of Ruby, which warned me about something in my .zshrc not having :$PATH appended. I fixed that and everything works spectacularly. Thank you!\n. ",
    "andrewrynhard": "The #Contributing message mentioned that if I was in doubt, to add PRs to Linuxbrew. Should I move this to Homebrew?\n. Great. I have made the PR.\n. Following the exact same commands in the travis build I get:\nbrew test --verbose fish\nError: cannot load such file -- minitest/unit\nPlease report this bug:\n    https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/usr/share/ruby/test/unit/assertions.rb:1:in `<top (required)>'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/home/vagrant/.linuxbrew/Library/Homebrew/formula_assertions.rb:7:in `rescue in <module:Assertions>'\n/home/vagrant/.linuxbrew/Library/Homebrew/formula_assertions.rb:4:in `<module:Assertions>'\n/home/vagrant/.linuxbrew/Library/Homebrew/formula_assertions.rb:2:in `<module:Homebrew>'\n/home/vagrant/.linuxbrew/Library/Homebrew/formula_assertions.rb:1:in `<top (required)>'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/home/vagrant/.linuxbrew/Library/Homebrew/cmd/test.rb:2:in `<top (required)>'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'\n/home/vagrant/.linuxbrew/Library/brew.rb:21:in `require?'\n/home/vagrant/.linuxbrew/Library/brew.rb:56:in `<main>'\n. I also needed \nsudo yum install epel-release\nsudo yum install python-psutil\n. I did not. Thanks.\n. ",
    "bsmith89": "--without-gpm appears to be the correct flag, but brew install ncurses --without-gpm fails with the same error.\nIt would appear that that flag is not being passed through to the configure script.\n. I am able to build and install ncurses myself with the --without-gpm flag.\n. I was able to solve my issue by adding that flag directly to the formula.  I am curious why the flag wasn't being passed through, though.\n. ",
    "wentaocn": "Yep, something wrong with my git. After fixing the bug:\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/linuxbrew/go/install)\"\n```\n==> This script will install:\n/home/rahn/.linuxbrew/bin/brew\n/home/rahn/.linuxbrew/Library/...\n/home/rahn/.linuxbrew/share/man/man1/brew.1\nPress RETURN to continue or any other key to abort\n==> Downloading and installing Homebrew...\nremote: Counting objects: 353111, done.\nremote: Total 353111 (delta 1), reused 1 (delta 1), pack-reused 353109\nReceiving objects: 100% (353111/353111), 68.22 MiB | 330.00 KiB/s, done.\nResolving deltas: 100% (267095/267095), done.\nFrom https://github.com/Homebrew/linuxbrew\n * [new branch]      master     -> origin/master\nHEAD is now at dc1c2b5 JavaRequirement: Linuxbrew default_formula \"jdk\"\nWarning: /home/rahn/.linuxbrew/bin is not in your PATH.\n==> Installation successful!\n==> Next steps\nInstall the Linuxbrew dependencies:\nDebian, Ubuntu, etc.:\n  sudo apt-get install build-essential\nFedora, Red Hat, CentOS, etc.:\n  sudo yum groupinstall 'Development Tools'\nSee http://brew.sh/linuxbrew/#dependencies for more information.\nRun brew doctor before you install anything\nRun brew help to get started\n```\n$ apt-get install build-essential\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nbuild-essential is already the newest version.\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n$ brew\nbash: brew: command not found\nHow do I do for this?\n. I get zsh: command not found: brew even I'm at directory  /home/rahn/.linuxbrew/bin/\nI don't know why.\nI'm new to Linux, still google on path editing.\n. I append export PATH=\"$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH\" to the end of ~/.bashrc and terminal prompt:\n* (gedit:2990): WARNING *: Set document metadata failed: Setting attribute metadata::gedit-spell-language not supported\n* (gedit:2990): WARNING *: Set document metadata failed: Setting attribute metadata::gedit-encoding not supported\nAfter saving:\n$ which brew\nbrew not found\n. No, it doesn't...\nThe line has been appended to ~/.bashrc\nBut $PATH remain unchanged.\n$ echo $PATH\n/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\n. I don't have a .bash_profile in ~ so gedit create a new one for me.\nStill:\n$ which brew~\nbrew not found\n. It works this time but not after starting a new terminal.\nSo there is something wrong with.bashrc?\n. Found it, It's aboutzsh.\nI edit.zshrcand everything goes.\nI thoughtzshwould inherit config frombash`\n. Thanks, @sjackman @rwhogg \n. @tseemann @sjackman @rwhogg I think you should.\n. ",
    "spaceface777": "Thank you. Unsetting the library path (sort of) worked. The brew command works, but the install fails. This is the terminal log:\n```\nchronos@localhost / $ brew install hello && brew test hello && brew remove hello\n==> Installing dependencies for hello: patchelf\n==> Installing hello dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9.x86_64_linux.bottle.tar.gz\nAlready downloaded: /home/chronos/user/.cache/Homebrew/patchelf-0.9.x86_64_linux.bottle.tar.gz\n==> Pouring patchelf-0.9.x86_64_linux.bottle.tar.gz\nError: No such file or directory - /usr/local/linuxbrew/Cellar/patchelf/0.9/COPYING\nWarning: Bottle installation failed: building from source.\n==> Downloading http://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz\nAlready downloaded: /home/chronos/user/.cache/Homebrew/patchelf-0.9.tar.gz\n==> ./configure --prefix=/usr/local/linuxbrew/Cellar/patchelf/0.9 CXXFLAGS=-static-libgcc -static-libstdc++ --disable-silent-rules\nLast 15 lines from /home/chronos/user/.cache/Homebrew/Logs/patchelf/01.configure:\nconfigure: WARNING: unrecognized options: --disable-debug\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\nchecking for gawk... no\nchecking for mawk... mawk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for style of include used by make... GNU\nchecking for gcc... /usr/local/linuxbrew/bin/gcc-4.8\nchecking whether the C compiler works... no\nconfigure: error: in /usr/local/linuxbrew/tmp/patchelf20160427-16900-11jaycb/patchelf-0.9':\nconfigure: error: C compiler cannot create executables\nSeeconfig.log' for more details\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nThese open issues may also help:\npatchelf: Fails on static executables: cannot find section .interp https://github.com/Linuxbrew/linuxbrew/issues/1005\n```\n. I think that the error is here: \nchecking whether the C compiler works... no\nconfigure: error: in `/usr/local/linuxbrew/tmp/patchelf20160427-16900-11jaycb/patchelf-0.9':\nconfigure: error: C compiler cannot create executables\n. ",
    "minektur": "While the never-ending 'pouring bottle' is sitting there aparently doing nothing, the log files in ~/.cache/Homebrew/Logs/hello/  show that a ./configure was run and seemingly existed OK.  If you poke around with ps and look at the process trees you can see that configure is being run multiple times.  I dont know what I did, but at some point poking around, I made 'brew install hello' get un-hung and it finished.  I tried to repeat it but had no success.  \nForcing the build from source seems to avoid the hang.  And in the chromebook default OS build there is NO file command:\n$ which -a file\nwhich: no file in (.......list of path....)\nIs there a brew package that supplies a file command I could build from source and use?   If not, I can probably track down the source code for 'file' and build one\n. to answer my own question - the libmagic recipie ALMOST builds the file command, but deletes it and just keeps library :)  Let me see if I can get myself a working 'file' and then retry\n. Oh - I see - building now\n. Can confirm  that having a working 'file' command does not help:\nchronos@localhost /usr/local/linuxbrew/Library/Formula $ which file\n/usr/local/linuxbrew/bin/file\nchronos@localhost /usr/local/linuxbrew/Library/Formula $ brew install hello\n==> Downloading https://linuxbrew.bintray.com/bottles/hello-2.10.x86_64_linux.bottle.t\nAlready downloaded: /home/chronos/user/.cache/Homebrew/hello-2.10.x86_64_linux.bottle.tar.gz\n==> Pouring hello-2.10.x86_64_linux.bottle.tar.gz\nhangs \"forever\" - or at least a very long time.  I let it set for an hour last night.  Since this is installing from bottle, it shouldn't be running configure right?\nchronos@localhost ~ $ ps ax | grep configure\n 3302 pts/1    SN+    0:00 /bin/bash ./configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/usr/local/linuxbrew/Cellar/hello/2.10\nalso I can confirm that building from source doesn't seem to have this problem:\n```\nchronos@localhost /usr/local/linuxbrew/Library/Formula $ time brew install --build-from-source hello\n==> Downloading http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz\nAlready downloaded: /home/chronos/user/.cache/Homebrew/hello-2.10.tar.gz\n==> ./configure --disable-silent-rules --prefix=/usr/local/linuxbrew/Cellar/hello/2.10\n==> make install\nWarning: This keg was marked linked already, continuing anyway\n/usr/local/linuxbrew/Cellar/hello/2.10: 52 files, 588.9K, built in 20 seconds\nreal    0m20.701s\nuser    0m14.463s\nsys     0m5.459s\n```\n. will do, on the backticks...  as for linking the file command, it is somewhat problematic on the chromebook.  There are several layers of protections on the chromebook.  One is to go into dev mode (then you can get shell, get root, read anything and have read-write on ~ and /usr/local - but all the OS is still read-only.\nYou can make /usr/bin and /bin rw but it requires remvoing another layer of protection, and disables automatic OS upgrades and a few other nice-to-have things.  \nIn short, I can't easily make the symlink...  Can you tell me which scripts are sensitive to the path of the file command so that I can potentially one-liner-sed-edit them automatically?\n. Is there an environment variable, or config file where I can force --build-from-source on ALL packages? for every install, including dependencies?\n. Also, I've done a search... can't find an open issue complaining about debian and missing /usr/bin/file - where can I go read?\n. This successfully makes installing (at least the one ) bottle pacakge(s) work for me.  Thanks much.\n. ",
    "coreybruce": "Ahh thanks so much, I thought you only had to do that if you did it the second way through git :)\n. Yeah sure issues solved \n. ",
    "alyssais": "I got this error with v5.18.2\n. ",
    "circlespainter": "This installs a lot of stuff (brew's version of many X libs it seems) but it works, thanks\n. ",
    "jameshentai": "summaly, .bashrc or .bash_profile? \n. Can you help me this question; http://superuser.com/questions/1116635/how-can-i-complete-the-tutorial-install-linuxbrew-on-linux, that my question\n. Can you tell me again step by step that part ( my first question ).  Add 3 line to .bashrc or .bash_profoile? why in http://linuxbrew.sh/ , it say : echo 'export PATH=\"$HOME/.linuxbrew/bin:$PATH\"' >>~/.bash_profile ,( not .bashrc) !!?\nIs i edit that 3 line and put \"blueberry\" into, is i'm right? i actually did it. but it don't work. like you see, http://imgur.com/a/BF2YJ.\n. ",
    "timotheecour": "moved to https://github.com/Linuxbrew/homebrew-core/issues/854\n. ",
    "crafy": "usr@D:/home$ file $(which skewer)\n/home/xuye266/.linuxbrew/bin/skewer: symbolic link to `../Cellar/skewer/0.2.2/bin/skewer'\nusr@D:/home$ ldd $(which skewer)\n        linux-vdso.so.1 =>  (0x00007fffde99d000)\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f4b601f0000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f4b5fee0000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4b5fbc0000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f4b5f9a0000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4b5f780000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4b5f3a0000)\n        /home/xuye266/.linuxbrew/lib/ld.so => /lib64/ld-linux-x86-64.so.2 (0x00007f4b60600000)\n. ",
    "Swapnil2095": "```\n$ brew install https://raw.githubusercontent.com/Linuxbrew/homebrew-core/6e4d8edba1f5d3a1aa796559d9bc3d7bdf1024cd/Formula/ghc.rb\n################################################################## 100.0%\n==> Tapping homebrew/dupes\nCloning into '/home/swapnil/.linuxbrew/Library/Taps/homebrew/homebrew-dupes'...\nremote: Counting objects: 42, done.\nremote: Compressing objects: 100% (42/42), done.\nremote: Total 42 (delta 0), reused 4 (delta 0), pack-reused 0\nUnpacking objects: 100% (42/42), done.\nChecking connectivity... done.\nTapped 38 formulae (103 files, 324.7K)\n==> Installing dependencies for ghc: patchelf, pkg-config, homebrew/dupes/ncurses\n==> Installing ghc dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9_1.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring patchelf-0.9_1.x86_64_linux.bottle.tar.gz\n/home/swapnil/.linuxbrew/Cellar/patchelf/0.9_1: 6 files, 1.2M\n==> Installing ghc dependency: pkg-config\n==> Downloading https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.1.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/swapnil/.linuxbrew/Cellar/pkg-config/0.29.1_2 --disable-host-tool --with-internal\n==> make\n==> make check\n==> make install\n/home/swapnil/.linuxbrew/Cellar/pkg-config/0.29.1_2: 10 files, 672.5K, built in 36 seconds\n==> Installing ghc dependency: homebrew/dupes/ncurses\n==> Downloading https://ftpmirror.gnu.org/ncurses/ncurses-6.0.tar.gz\n==> Downloading from http://gnumirror.nkn.in/ncurses/ncurses-6.0.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/swapnil/.linuxbrew/Cellar/ncurses/6.0_2 --enable-pc-files --with-pkg-config-libdi\n==> make\nLast 15 lines from /home/swapnil/.cache/Homebrew/Logs/ncurses/02.make:\n ^\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_panels ../obj_s/demo_panels.o -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -L../lib -lformw -lmenuw -lpanelw -lncursesw    -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_termcap ../obj_s/demo_termcap.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_terminfo ../obj_s/demo_terminfo.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o ditto ../obj_s/ditto.o -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  echo \"-L../lib -lformw -lmenuw -lpanelw -lncursesw   \" | sed -e 's/-lform.*-lpanel[^ ]*//' -lutil -lm \nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee  for instructions.\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o dots ../obj_s/dots.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\nMakefile:808: recipe for target '../obj_s/ncurses.o' failed\nmake[1]:  [../obj_s/ncurses.o] Error 1\nmake[1]:  Waiting for unfinished jobs....\nmake[1]: Leaving directory '/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/test'\nMakefile:113: recipe for target 'all' failed\nmake: *** [all] Error 2\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nIf reporting this issue please do so at (not Homebrew/homebrew):\n  https://github.com/Homebrew/homebrew-dupes/issues\n/usr/lib/ruby/2.3.0/open-uri.rb:359:in open_http': 422 Unprocessable Entity (GitHub::Error)\nValidation Failed\n    from /usr/lib/ruby/2.3.0/open-uri.rb:737:inbuffer_open'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:212:in block in open_loop'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:210:incatch'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:210:in open_loop'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:151:inopen_uri'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:717:in open'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:31:inopen'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:621:in open'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:654:inissues_matching'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:686:in issues_for_formula'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:222:infetch_issues'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:218:in issues'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:263:indump'\n    from /home/swapnil/.linuxbrew/Library/brew.rb:133:in rescue in <main>'\n    from /home/swapnil/.linuxbrew/Library/brew.rb:29:in'\n.\n$ brew install https://raw.githubusercontent.com/Linuxbrew/homebrew-core/6e4d8edba1f5d3a1aa796559d9bc3d7bdf1024cd/Formula/ghc.rb\n################################################################## 100.0%\n==> Tapping homebrew/dupes\nCloning into '/home/swapnil/.linuxbrew/Library/Taps/homebrew/homebrew-dupes'...\nremote: Counting objects: 42, done.\nremote: Compressing objects: 100% (42/42), done.\nremote: Total 42 (delta 0), reused 4 (delta 0), pack-reused 0\nUnpacking objects: 100% (42/42), done.\nChecking connectivity... done.\nTapped 38 formulae (103 files, 324.7K)\n==> Installing dependencies for ghc: patchelf, pkg-config, homebrew/dupes/ncurses\n==> Installing ghc dependency: patchelf\n==> Downloading https://linuxbrew.bintray.com/bottles/patchelf-0.9_1.x86_64_linux.bottle.tar.gz\n################################################################## 100.0%\n==> Pouring patchelf-0.9_1.x86_64_linux.bottle.tar.gz\n/home/swapnil/.linuxbrew/Cellar/patchelf/0.9_1: 6 files, 1.2M\n==> Installing ghc dependency: pkg-config\n==> Downloading https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.1.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/swapnil/.linuxbrew/Cellar/pkg-config/0.29.1_2 --disable-host-tool --with-internal\n==> make\n==> make check\n==> make install\n/home/swapnil/.linuxbrew/Cellar/pkg-config/0.29.1_2: 10 files, 672.5K, built in 36 seconds\n==> Installing ghc dependency: homebrew/dupes/ncurses\n==> Downloading https://ftpmirror.gnu.org/ncurses/ncurses-6.0.tar.gz\n==> Downloading from http://gnumirror.nkn.in/ncurses/ncurses-6.0.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/swapnil/.linuxbrew/Cellar/ncurses/6.0_2 --enable-pc-files --with-pkg-config-libdi\n==> make\nLast 15 lines from /home/swapnil/.cache/Homebrew/Logs/ncurses/02.make:\n ^\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_panels ../obj_s/demo_panels.o -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -L../lib -lformw -lmenuw -lpanelw -lncursesw    -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_termcap ../obj_s/demo_termcap.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o demo_terminfo ../obj_s/demo_terminfo.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o ditto ../obj_s/ditto.o -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  echo \"-L../lib -lformw -lmenuw -lpanelw -lncursesw   \" | sed -e 's/-lform.*-lpanel[^ ]*//' -lutil -lm \nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee  for instructions.\n/usr/bin/gcc-5 -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -o dots ../obj_s/dots.o -L../lib -Wl,-rpath,/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/lib  -L/home/swapnil/.linuxbrew/lib -Wl,--dynamic-linker=/home/swapnil/.linuxbrew/lib/ld.so -Wl,-rpath,/home/swapnil/.linuxbrew/lib -I. -I. -I../test -DHAVE_CONFIG_H -I. -I../include -isystem/home/swapnil/.linuxbrew/include -P -D_GNU_SOURCE -DNDEBUG -Os -w -pipe -march=core2  --param max-inline-insns-single=1200  -fPIC  -lncursesw   -lutil -lm\nMakefile:808: recipe for target '../obj_s/ncurses.o' failed\nmake[1]:  [../obj_s/ncurses.o] Error 1\nmake[1]:  Waiting for unfinished jobs....\nmake[1]: Leaving directory '/tmp/ncurses20161104-25504-1fyxhho/ncurses-6.0/test'\nMakefile:113: recipe for target 'all' failed\nmake: *** [all] Error 2\nREAD THIS: https://github.com/Linuxbrew/linuxbrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\nIf reporting this issue please do so at (not Homebrew/homebrew):\n  https://github.com/Homebrew/homebrew-dupes/issues\n/usr/lib/ruby/2.3.0/open-uri.rb:359:in open_http': 422 Unprocessable Entity (GitHub::Error)\nValidation Failed\n    from /usr/lib/ruby/2.3.0/open-uri.rb:737:inbuffer_open'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:212:in block in open_loop'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:210:incatch'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:210:in open_loop'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:151:inopen_uri'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:717:in open'\n    from /usr/lib/ruby/2.3.0/open-uri.rb:31:inopen'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:621:in open'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:654:inissues_matching'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/utils.rb:686:in issues_for_formula'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:222:infetch_issues'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:218:in issues'\n    from /home/swapnil/.linuxbrew/Library/Homebrew/exceptions.rb:263:indump'\n    from /home/swapnil/.linuxbrew/Library/brew.rb:133:in rescue in <main>'\n    from /home/swapnil/.linuxbrew/Library/brew.rb:29:in'\n.\nswapnil@Gravity:~/Documents/CS422/4$ brew install pandoc\n==> Installing dependencies for pandoc: ghc, gpatch, cabal-install\n==> Installing pandoc dependency: ghc\n==> Downloading https://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-src.tar.xz\nAlready downloaded: /home/swapnil/.cache/Homebrew/ghc-8.0.1.tar.xz\n==> Downloading https://ftpmirror.gnu.org/gmp/gmp-6.1.0.tar.bz2\nAlready downloaded: /home/swapnil/.cache/Homebrew/ghc--gmp-6.1.0.tar.bz2\n==> ./configure --prefix=/home/swapnil/.linuxbrew/Cellar/ghc/8.0.1/libexec/integer-gmp --with-pic --disable-shar\n==> make\n==> make check\n ==> make install\n==> Downloading https://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-x86_64-apple-darwin.tar.xz\n################################################################## 100.0%\n==> ./configure --prefix=/tmp/ghc-20161104-8373-19ewf57/ghc-8.0.1/binary --with-gmp-includes=/home/swapnil/.linu\nLast 15 lines from /home/swapnil/.cache/Homebrew/Logs/ghc/05.configure:\n2016-11-04 20:06:18 +0530\n./configure\n--prefix=/tmp/ghc-20161104-8373-19ewf57/ghc-8.0.1/binary\n--with-gmp-includes=/home/swapnil/.linuxbrew/Cellar/ghc/8.0.1/libexec/integer-gmp/include\n--with-gmp-libraries=/home/swapnil/.linuxbrew/Cellar/ghc/8.0.1/libexec/integer-gmp/lib\n--with-ld=ld\n--with-gcc=gcc\nchecking for path to top of build tree... utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: 12: utils/ghc-pwd/dist-install/build/tmp/ghc-pwd: Syntax error: Unterminated quoted string\nconfigure: error: cannot determine current directory\nREAD THIS: https://github.com/Linuxbrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting\nIf reporting this issue please do so at (not Homebrew/brew):\n  https://github.com/Linuxbrew/homebrew-core/issues\nThese open issues may also help:\nghc: apply 10.12 dynlibdir patch directly to 8.0.1 https://github.com/Homebrew/homebrew-core/pull/6416\nswapnil@Gravity:~/Documents/CS422/4$  ~\n```\n. ",
    "Muflone82": "I ran\nbrew update && cd \"$(brew --repo)\" && git fetch && git reset --hard origin/master && brew update\nand the result was\nbash\nAlready up-to-date.\nremote: Counting objects: 229, done.\nremote: Compressing objects: 100% (106/106), done.\nremote: Total 229 (delta 116), reused 229 (delta 116), pack-reused 0\nReceiving objects: 100% (229/229), 137.23 KiB | 101.00 KiB/s, done.\nResolving deltas: 100% (116/116), done.\nFrom https://github.com/Linuxbrew/brew * [new branch]      gh-pages   -> origin/gh-pages\nHEAD is now at b75ca7b CONTRIBUTING.md: Update Contributing to Linuxbrew\nAlready up-to-date.\nthen I tried to run again brew install util-linux\nThis time I downloaded the module but didn't work the installation :-(\nbash\n==> Downloading https://www.kernel.org/pub/linux/utils/util-linux/v2.27/util-lin\nAlready downloaded: /home/marcelletti/.cache/Homebrew/util-linux-2.27.1.tar.xz\n==> ./configure --disable-silent-rules --prefix=/home/marcelletti/.linuxbrew/Cellar/util-linux/2.27.1_1 --disable-use-tty-group --disable-kill --disab\n==> make install\nLast 15 lines from /home/marcelletti/.cache/Homebrew/Logs/util-linux/02.make:\n     during execution  - add LIBDIR to the LD_RUN_PATH' environment variable\n     during linking - use the -Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to /etc/ld.so.conf\nSee any operating system documentation about shared libraries for more information, such as the ld(1) and ld.so(8) manual pages. ----------------------------------------------------------------------\nmake[3]: Leaving directory /tmp/util-linux-20161110-24695-tl5fbu/util-linux-2.27.1'\nmake[2]: *** [install-am] Error 2\nmake[2]: Leaving directory /tmp/util-linux-20161110-24695-tl5fbu/util-linux-2.27.1'\nmake[1]: *** [install-recursive] Error 1\nmake[1]: Leaving directory /tmp/util-linux-20161110-24695-tl5fbu/util-linux-2.27.1'\nmake: *** [install] Error 2\nREAD THIS: https://github.com/Linuxbrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting\nIf reporting this issue please do so at (not Homebrew/brew):\n  https://github.com/Linuxbrew/homebrew-core/issues\ncurl-7.50.3 already installed\n. I obtain \norigin https://github.com/Linuxbrew/brew (fetch)\norigin https://github.com/Linuxbrew/brew (push)\nhomebrew/dupes\nhomebrew/core\nhomebrew/science\n. The url is:\nhttps://gist.github.com/11cf8582439d2db7109b47e746ff5c0b\n. Why permission denied? Must I be root to run this?\nResult is:\nls: invalid option -- 'e'\nTry 'ls --help' for more information.\nls: invalid option -- 'e'\nTry 'ls --help' for more information.\nls: invalid option -- 'e'\nTry 'ls --help' for more information.\nls: invalid option -- 'e'\nTry 'ls --help' for more `information.\n. drwxr-xr-x. 12 root root 4096 Dec 12  2013 /usr\ndrwxr-xr-x. 296 root root 12288 Nov  9 13:24 /usr/share\ndrwxr-xr-x. 4 root root 4096 Nov 11  2014 /usr/share/bash-completion\ndrwxr-xr-x. 2 root root 20480 Nov  8 13:27 /usr/share/bash-completion/completions\nGrazie :-)\n. Must I change the permission of the dir /usr/share/bash-completion?\nchmod -R 777 /usr/share/bash-completion   ?\n. > Can you post the result of the following two commands?\n\ntype -a pkg-config\npkg-config --variable=completionsdir bash-completion\n\n$ type -a pkg-config\npkg-config is /home/marcelletti/.linuxbrew/bin/pkg-config\npkg-config is /home/marcelletti/.linuxbrew/bin/pkg-config\npkg-config is /usr/bin/pkg-config\npkg-config is /bin/pkg-config\n$ pkg-config --variable=completionsdir bash-completion\n/usr/share/bash-completion/completions\n. > can you remove bash-completion that was installed with apt-get?\nYes, I can; I installed bash-completion with yum because I have Fedora.\nIf I remove bash-completion I will have a problem with another software?\n. Good morning :-)\nWell, I have removed bash completion with yum and the I have installed util-linux without any problems!!!!\n. ",
    "malcook": "I am similarly afflicted while trying to install util-linux and wish not to remove system bash-completion.  Any hope for me?. ",
    "behnam": "On my Ubuntu 16.04.3 LTS machine, brew install watchman fails for some reason and gives me this:\n```\nUpdating Homebrew...\n==> Auto-updated Homebrew!\nUpdated 1 tap (homebrew/core).\n==> Updated Formulae\nconsul-template                  entr                             goocanvas                        systemd\ncoreutils                        etcd                             heroku                           translate-toolkit\ndocker-compose                   exempi                           kubernetes-helm                  vtk\ndocker-compose-completion        firebase-cli                     libu2f-host                      youtube-dl\ndub                              fluent-bit                       rustup-init\nduck                             gitbucket                        sqlmap\n==> Downloading https://github.com/facebook/watchman/archive/v4.9.0.tar.gz\nAlready downloaded: /home/behnam/.cache/Homebrew/watchman-4.9.0.tar.gz\n==> ./autogen.sh\n==> ./configure --prefix=/home/behnam/.linuxbrew/Cellar/watchman/4.9.0 --with-pcre --without-python --enable-statedir=/home/behnam/.\n==> make\n==> make install\n==> python -c import setuptools... --no-user-cfg install --prefix=/home/behnam/.linuxbrew/Cellar/watchman/4.9.0/libexec --single-ver\nLast 15 lines from /home/behnam/.cache/Homebrew/Logs/watchman/05.python:\ncreating build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/capabilities.py -> build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/encoding.py -> build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/load.py -> build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/compat.py -> build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/pybser.py -> build/lib.linux-x86_64-2.7/pywatchman\ncopying pywatchman/init.py -> build/lib.linux-x86_64-2.7/pywatchman\nrunning build_ext\nbuilding 'pywatchman.bser' extension\ncreating build/temp.linux-x86_64-2.7\ncreating build/temp.linux-x86_64-2.7/pywatchman\ngcc-5 -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I/usr/include/python2.7 -c pywatchman/bser.c -o build/temp.linux-x86_64-2.7/pywatchman/bser.o\npywatchman/bser.c:31:20: fatal error: Python.h: No such file or directory\ncompilation terminated.\nerror: command 'gcc-5' failed with exit status 1\nREAD THIS: https://github.com/Linuxbrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting\nPlease do not report this issue to Homebrew/brew or Homebrew/core, which support macOS only.\n```\nUpdate: Oh, wait! This is a correct link! I don't know how I got here, then. :/. ",
    "hasAdamr": "@sjackman \nhttp://blog.teamtreehouse.com/install-node-js-npm-linux. ",
    "mohamedRyanWilz": "found it here\nhttps://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md. ",
    "jolobito": "thank for your help, here the report\n```\nbrew install gcc\n==> Installing dependencies for gcc: glibc, xz, m4, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: glibc\nError: glibc cannot be built with any available compilers.\nInstall Clang or brew install gcc\n```\n. This is a fresh installation. Only, I installed and then brew install gcc \nI tried reinstall following the instruction for CentOS6 without success. \n```\nHOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc\n==> Installing dependencies for gcc: bzip2, zlib, xz, m4, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: bzip2\n==> Downloading http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz\n################################################################## 100.0%\n==> make install PREFIX=/home/pfreitas/.linuxbrew/Cellar/bzip2/1.0.6_1\n==> make -f Makefile-libbz2_so clean\n==> make -f Makefile-libbz2_so\n\ud83c\udf7a  /home/pfreitas/.linuxbrew/Cellar/bzip2/1.0.6_1: 30 files, 1.4MB, built in 14 seconds\n==> Installing gcc dependency: zlib\n==> Downloading https://zlib.net/zlib-1.2.11.tar.gz\n################################################################## 100.0%\n==> ./configure --prefix=/home/pfreitas/.linuxbrew/Cellar/zlib/1.2.11\n==> make install\n\ud83c\udf7a  /home/pfreitas/.linuxbrew/Cellar/zlib/1.2.11: 12 files, 464.9KB, built in 11 seconds\n==> Installing gcc dependency: xz\n==> Downloading https://downloads.sourceforge.net/project/lzmautils/xz-5.2.3.tar.gz\nError: bad URI(is not URI?): https://downloads.sourceforge.net/#!/#!/project/lzmautils/xz-5.2.3.tar.gz\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/generic.rb:1203:in rescue in merge'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/generic.rb:1200:inmerge'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/common.rb:237:in each'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/common.rb:237:ininject'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/common.rb:237:in join'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/lib/ruby/2.0.0/uri/common.rb:785:injoin'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/download_strategy.rb:404:in block in actual_urls'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/download_strategy.rb:403:inmap'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/download_strategy.rb:403:in actual_urls'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/download_strategy.rb:378:in_fetch'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/download_strategy.rb:336:in fetch'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/resource.rb:115:infetch'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/resource.rb:84:in stage'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/formula.rb:1884:instage'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/formula.rb:1088:in brew'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/build.rb:127:inblock in install'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/utils.rb:556:in with_env'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/build.rb:124:ininstall'\n/home/pfreitas/.linuxbrew/Homebrew/Library/Homebrew/build.rb:201:in `'\n```\nAs I said, I had a previous working installation but I used brew uninstall gcc and then when I tried to use brew doesn't work anymore. I uninstalled linuxbrew and did this new installation. \nAfter uninstall and install again linuxbrew the brew config show me glibc and gcc as not installed!\n```\nHost glibc: 2.11\n/usr/bin/gcc: 4.3.4\nglibc: N/A\ngcc: N/A\nxorg: N/A\n```\nThanks. Of course!\n```\nbrew fetch -s xz\n==> Downloading https://downloads.sourceforge.net/project/lzmautils/xz-5.2.3.tar.gz\n==> Downloading from https://downloads.sourceforge.net/#!/project/lzmautils/xz-5.2.3.tar.gz\n################################################################## 100.0%\nDownloaded to: /home/pfreitas/.cache/Homebrew/xz-5.2.3.tar.gz\nSHA256: 7a07d3f7cca5c0b38ca811984ef8da536da32932d68c1a6cce33ec2462b930bf\nWarning: Formula reports different SHA256: 71928b357d0a09a12a4b4c5fafca8c31c19b0e7d3b8ebb19622e96f26dbf28cb\n. I obtained\n==> Installing dependencies for gcc: xz, m4, gmp, mpfr, libmpc, isl\n==> Installing gcc dependency: xz\n==> Downloading https://downloads.sourceforge.net/project/lzmautils/xz-5.2.3.tar.gz\nAlready downloaded: /home/pfreitas/.cache/Homebrew/xz-5.2.3.tar.gz\nError: SHA256 mismatch\nExpected: 71928b357d0a09a12a4b4c5fafca8c31c19b0e7d3b8ebb19622e96f26dbf28cb\nActual: 7a07d3f7cca5c0b38ca811984ef8da536da32932d68c1a6cce33ec2462b930bf\nArchive: /home/pfreitas/.cache/Homebrew/xz-5.2.3.tar.gz\nTo retry an incomplete download, remove the file above.\n```\nI removed the file, and try again, but back to the initial error\n. OK, I will wait for SourceForge back\nhere the result for\nHOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install --ignore-dependencies zlib gmp mpfr libmpc isl gcc --without-glibc\n```\nWarning: zlib 1.2.11 is already installed\nWarning: gmp: this formula has no --without-glibc option so it will be ignored!\n==> Downloading https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz\n################################################################## 100.0%\nError: No such file or directory - /home/pfreitas/.linuxbrew/opt/xz/bin/xz\n```\n. Yes, I have installed xz 5.2.2 installed in my anaconda distro.\nHow can I know if the Sourceforge is come back?. ",
    "sunteya": "You want a solution like this #90 ?\n. ",
    "rjeschmi": "Is there a reason to use xterma here? installing xterm didn't pull in that command (but I tested this pull request and it seems to work otherwise).\n. ",
    "vihangd": "None\n. "
}