{
    "cshold": "\nAdded responsive checkout skin\nGeneral fixes/cleaning of ajax cart plugin\nUpdated readme\n. LGTM. Thanks for the expert tips.\n. LGTM. :ship:'n it\n. Noted. We'll look to add this for a future update.\n. Done and updated the readme. Install with bower install timber\n. @carolineschnapp Added a tiny reference to your currency being identified in liquid and turned off the ajax cart debugging (should have already been off). Look good to you?\n. I ran into the same issue and glad we came to the same conclusion. As of now there is no way to add classes to the forms generated, so I'll add this to the docs shortly. Thanks.\n. Updated on the docs page. Thanks for making the suggestion.\n. Definitely thought I fixed that in a previous release. Will add it to my list. Thanks.\n. Fixed. Will be included in v1.1.1 - https://github.com/Shopify/Timber/commit/bf5652962a391f3f9b6f3895da90e7fffebc340c\n. As of right now we're not planning on adding any glyphs. I say this because we don't want to end up making ecommerce sites look too similar based on what we provide.\n\nThat said, if the demand for features like this continues, we'll look into a custom build tool that allows you to include/exclude pieces of Timber as you'd like. Closing this for now.\n. Looks good to me. Thanks.\n. Looks good, thanks for adding.\n. Definitely. We have plans for a few more accessibility features on top of that too. Hold tight.\n. A bunch of accessibility has been added to the i18n branch. Check that out and let me know if you think it needs any more.\n. That would be a great idea. The reason we didn't include that in the first place, as @sdn90 said, was to avoid additional work for beginners using the framework. If either of you want to take this on and approach it so that it's an optional task, I'd be more than happy to merge it in.\n. I took a stab at this last week but got side tracked. One issue that came up is reading the settings that are parsed into liquid (.scss.liquid) and have them properly convert to the css file. Wonder if grunt can ignore any liquid tags and generate a .css.liquid file - never tried that with grunt before.\n. You can use this Grunt or Gulp script to ease your workflow. Separate your stylesheets in an external folder and have the scripts concatenate them into one that is moved into /assets and uploaded with the theme gem.\nI'm going to close this issue, but it's likely that I use the script as an optional tool in Timber down the road.\n. Definitely a handy app, though Timber's aim is to be focusing on the barebones of Shopify and not having to rely on any third party apps (even if built by Shopify). Closing this, but hopefully other people find it if they're looking for that functionality.\n. Also standardized use of form labels (no more colons)\n. Added, thanks.\n. I write good. Thanks for catching this.\n. Yup, that will be up to you if you decide to use your own code. novalidate is the proper fix.\n. I just implemented it in a test project last night and it was pretty easy. Agreed, it probably doesn't need to be in the framework.\nTo set it up, you can change the formSelector option to a class instead of an ID, and then include the same form as on your product template. Be sure to have the quantity and variant option elements in the form or you receive an error (hiding them is a good option).\nI'll leave this open for any other feedback, but as of now I don't think anything needs to be done for this feature to be available.\n. Deal. Closing this for now, but if more requests come up around this feature we can revisit it.\n. Don't worry about the conditional comments. You can see in your screenshot that the HTML tag doesn't have any class associated with it. The conditional comments are only valid in IE, and therefore only have the class removed from the tag in those browsers.\n. I personally like it, but can see the creepy element to it as well.\n@mpiotrowicz @carolineschnapp @tranhelen Thoughts?\n. LGTM, just looking at any possible issues of migrating to jQuery 1.11 from 1.9. Will merge if everything is working smoothly.\n. Good call, added class js while removing no-js.\n. @carolineschnapp You good with my little changes?\n. +1 usability and good idea on the CSS-first approach.\n. Merged via command line\n. Fixed by #62 \n. This is on the radar and will be made available when a Timber tutorial is made in the next few months. For the time being, you can download this CSV from this tutorial. Import it and you're good to go with a nice selection of dummy products.\n. The CSV linked to above is still the best way to get test products into your store. While we're experimenting with different ways to get more test data for devs/designers, it's a complex and ultimately slow process.\n. This is such a hit and miss bug that it's seemingly impossible to debug. Thanks for the catch.\n. @graygilmore Yes, it's new and actually still in beta - though very nearly final. The approach here will be updated as our back end approach was after I started this. v.1.3.0 is nearly ready, so I'll likely redo the changes on the new version when everything is finalized.\n. This is a duplicate of #55 and #31 and has been fixed in the recent release. Grab a new copy of master if you have any concerns.\nThis bug only occurs once and a while so replicating it is relatively rare. Glad the UTF-8 declaration helped you out too.\n. No luck with that link @tyteen4a03. Any other info you can provide?\n. The theme gem's bootstrap is currently bringing in an old version. We're looking at a fix for that. In the meantime, grab the latest from master here, or v2.0.2\n. Line 95 of index also needs to change from:\nCart (<span id=\"cartCount\">{{ cart.item_count }}</span> {{ cart.item_count | pluralize: 'item', 'items' }} <span id=\"cartCost\">{{ cart.total_price | money }}</span>)\nto\nCart (<span id=\"cartCount\">{{ cart.item_count }} {{ cart.item_count | pluralize: 'item', 'items' }}</span> <span id=\"cartCost\">{{ cart.total_price | money }}</span>)\nThis will prevent from item/items being displayed twice.\n. I'm realizing as I'm building a new theme there is no way to only update the number, and not the following 'item' or 'items' word. It's preferable to do it without another plugin setting so we don't end up with too many. Thoughts appreciated.\n. Great idea. Hadn't thought about the need to append it somewhere else. I'll get on this today and push it with the next release. Thanks.\n. Merged #64. Will be pushing a full release shortly (next day or two) with a number of changes/enhancements.\n. @cam Let me know what issues you are running into and if it's something I can help with.\n. Good catch. Thanks.\n. @carolineschnapp What do you think about this addition? Adds lists based on type and vendor to the collections page sidebar.\nI'm torn because the usability is a bit strange. If you navigate into a type, for example, then click on a vendor, you go to just the vendor page and completely ignore the fact you were in a type before.\n. I think it's handy to have this code in there for reference, as long as the comments make it clear of its limitations and actual functionality. I'll make some slight modifications and merge it in.\n. Going to go with this explanation:\n```\n  Side navigation for the type (category), vendor (brand), and tags\n  in the current collection.\nNote: Although you can list out product types, vendors, and tags, the filtering\n  is somewhat limited. You can filter by multiple tags, but only a single type\n  or vendor at a time.\n    - List all of the shop's types with collections.all.all_types\n    - List the current collection's types with collection.all_types\n    - List all of the shop's vendors with collections.all.all_vendors\n    - List the current collection's vendors with collection.all_vendors\nUse product tags to manage subcategories inside collections.\n  See 'How do I create subcategories of products?' for more documentation.\n    - http://docs.shopify.com/manual/configuration/store-customization/page-specific/collections/subcategories\n```\n. Makes sense to me. The 99% tag stat is likely because many customers have few products, so it would be the ones with a huge inventory that could get use out of that. I'll revert to your recommendation and make a note about the alternate use.\nMy note clearly isn't enough to get the message across, but don't want to get a whole paragraph in there. I'll try and revise it and see what I can come up with based on your notes. Thanks.\n. Definitely should be, and will be in the next version (I'm hoping soon). Thanks for pointing it out.\n. @dominikwilkowski Agreed, it's an unfortunate limitation right now. The only solution at the moment is some sort of concatenation. As mentioned in #25, you can use this grunt or gulp script to concatenate the files locally and then upload them to your store.\nThis obviously doesn't work for Timber since it's one large file right now, but it is in the roadmap to split it up and make better use of (probably) the Grunt script.\n. Brilliant. New code will look like:\n```\n\nYour Name\n\nEmail\n\nPhone Number\n\nMessage\n{% if form.body %}{{ form.body }}{% endif %}\n\n\n```\nThis will be applied to v1.3 shortly. Doesn't look like the same approach works for the log in form, but I'll see what I can do.\n. @graygilmore This looks great. I'm going to incorporate the changes in v1.3.0 as some of the existing code has changed. Appreciate the attention to detail.\n. Look to updated #90 \n. Give user ability to show/hide the cart count element if it equals 0. A class of hidden-count is added\n. Seems to make sense to me too. With the liquid conditionals based on the current template everything checks out while using includes.\n. You're right, the use between pages got inconsistent and there is no solid reasoning. Tracking which uses what like you did is the first step to remedying it, so I really thank you for that.\nI'm going to make a new PR that addresses this and will be released with our next major push in the coming week or so.\n. Sure, @jholl, that would be great. Thanks.\n. Nice catch. This is why open source is great.\n. That's a good idea. I suppose the callback should only fire when the cart drawer/modal is shown, correct?\n. Test this out and look at the console. Pretty standard, passing the string 'visible' when the cart is being shown, and nothing when it's being closed.\nhttps://timber-demo.myshopify.com/products/true-flatlock-mens-tee-1\n```\najaxifyShopify.init({\n  ...\n  onToggleCallback: testFunction\n})\nfunction testFunction(state) {\n  console.log(state); // 'visible' if true, undefined if hidden\n}\n``\n. @mariusa I'm going to create an object to send instead of the single parameter. This will lend itself well to future improvements and will make it possible to senddata.cart_visibleastrue/falserather than a string. Stay tuned.\n. Check out the [docs foronToggleCallback`](http://shopify.github.io/Timber/#ajax-cart).\nLatest ajaxify.js file in master has the changes if you want to start working on it. Let me know if you have any issues.\n. @richgilbank @mpiotrowicz You able to take a quick look at this? The callback returns visible when displaying the drawer/modal, and undefined when hiding it so anyone using it knows if the cart is visible.\n. The markup is defined by the third parties, so customizing it is out of the scope of Timber.\nYour best bet is to use CSS to hide the current images (while maintaining their clickability) and either a background-image or pseudo element to add in your own image.\n. Good catch, that was in one of my changes locally but you beat me to it. Thanks.\n. You're right, the blog tag list becomes useless once you've clicked into a tag.\nI'll update it so it functions the same as the collections sidebar, though without the catch all link at the top. By updating the breadcrumbs to show the tag as well, users will be able to use the breadcrumb or the main nav to get back to the main blog page.\nThanks.\n. Another good catch. Thank you.\n. This will be addressed in an upcoming update with other similar changes. Hang tight.\n. Fixed with #174, and currently lives in master. It will be included in v1.4.0 soon.\n. Currently, no. There are so many ways to approach mobile navigations, and while Timber is opinionated at times, it doesn't aim to handcuff anyone into a one of those approaches.\n. Turns out we added it to the roadmap. https://github.com/Shopify/Timber/pull/338\n. I think it's best to leave pull off by default as it's only useful in rare cases and outputs a fair bit of CSS when enabled. As you mentioned, it's easy to enable if needed.\n. Going to remove text-light shortly.\n. I'm thinking of removing it actually. Helper classes that affect layout, like .hr--small can be helpful, but ones strictly dealing with style are not the point of Timber.\n. Done, added under Misc. Elements\n. Good catch on this, and thanks for the PR. Tested and merged it in.\n. I've used theme settings for this in the past and it works well, but think it's best to leave it out of Timber for simplicity sake. I'd definitely recommend adding that in to the themes your building though.\n. Addressed this with #142. No close button for the cart drawer yet, but adding it to my list of possible additions.\n. Cool, fixed up. Thanks.\n. Yup. The ajax cart file is another story. Thinking about refactoring it with promises if I can find the time, and can do the styleguide fixes at the same time.\n. Fixed in master to avoid conflicts. Thanks.\n. You've confused me. Not sure how something can float left with an absolute position. Do you have a mockup and a live site I can check out?\n. Hah, funny timing. @stevebosworth and I were digging into this today as well. I'll ping you on the PR we'll have ready soon. I wasn't using coffeescript for the Gruntfile, but that sure does look nicer!\n. I'm going to close this for now. We're testing variations of internal development processes using Grunt and will look at including it in Timber in the future. Thanks for all the valuable feedback and pointers.\n. @richgilbank Mind blown. Been doing it the other way for years.\n. Weird, I could recreate it an hour ago, but not now. Maybe the cached list was just a bit delayed? Closing this for now.\n. My only concern with that is there are still three themes to manage and update for every change.\nI've considered adding in a little bit of JS to ajaxify.js that checks for a ?method parameter and overwrites what ever the setting is that it is initialized with. That way the links would all be to the same theme on the same store, but show off each method. What are your thoughts on that?\n. I'd suggest using some CSS for this actually.\n1. Open ajax-cart-template.liquid\n2. Find .ajaxifyCart--qty (there are two instances of it)\n3. Add attribute data-qty=\"{{itemQty}}\"\n4. Open timber.scss.liquid\n5. Add the following\n.ajaxifyCart--qty[data-qty=\"1\"],\n.ajaxifyCart--qty[data-qty=\"1 x\"] {\n  display: none;\n}\nThat way the element still exists, but is conditionally hidden. Increase the CSS's specificity if you only want it to happen on certain pages (i.e. /cart).\nLet me know if that works for you.\n. What site are you working on, taking a look at the code live is always easier for me.\n. Ah I see, with the changed markup the CSS I mentioned before as a fix has no way of knowing what the quantity is.\nChange this line:\n<a href=\"/cart/change?id={{id}}&amp;quantity=0\" class=\"ajaxifyCart--remove minicart\" data-id=\"{{id}}\">{{itemQty}} {{name}}</a>\nTo:\n<a href=\"/cart/change?id={{id}}&amp;quantity=0\" class=\"ajaxifyCart--remove minicart\" data-id=\"{{id}}\"><span class=\"ajaxify-item-qty\" data-qty=\"{{itemQty}}\">{{itemQty}} </span>{{name}}</a>\nThen add CSS to either stylesheet you're using:\n.ajaxify-item-qty[data-qty=\"1\"] {\n  display: none;\n}\nThis is nearly the same approach as before, but this time you have an element wrapping the quantity which you can target directly.\n. To clarify, you want the clicked thumbnail to become the large image, right? That feature is enabled by default, as you can see on the demo shop. You don't have to do anything to the JS to get that working.\nMake sure you have #productPhotoImg, #productThumbs, and .product-photo-thumb on the right elements in product.liquid. If you're still having trouble, please provide a clearer example of what you are trying to accomplish.\n. Closing this issue for now. Let me know if you're still experiencing issues.\n. Hey, it's hard to decipher your issue with the full code you pasted there. Are you able to share your shop's URL? \n. Looks like you were running an old version of the JS and product page. The changes were pretty minimal, but I've updated you to the latest version of each.\nLet me know if you have any other issues.\n. @CWSites Looks like shop.js isn't being loaded. That's Timber's default JS that handles the image switching. Load that after jQuery and that feature will enable itself. \n. Looks to only be an issue in Chrome, and a nasty repaint issue. I'll look into it.\n. You're right, those helper classes shouldn't be there. They're left over from the original grid system that used inline-block rather than floating blocks.\nI'll remove those so they don't confuse anyone else. Thanks.\n. How about we use Timber as the 'real world' example, and the docs page would have the super basic inline JS on the product template?\n. Thumbs up to merge this morning?\n. Hey, I'll take a look at these.\nValidation issues I'll fix:\n- I had no idea pubdate wasn't supported anymore - bummer. I'll strip those out.\n- Bad value for attribute action on element form: Must be non-empty.\n  - The default was empty until the theme setting is set. I'll make the default #\nThe issues I won't update are:\n- Bad X-UA-Compatible attribute http-equiv on element meta\n  - Here are some potential workarounds\n- Attribute autocorrect and autocapitalize not allowed on element input at this point.\n  - This one is silly to me. If you add those values on with JS it validates fine, but since the majority of browsers don't ignore it, it's deemed invalid. It's specifically for mobile devices, so it's up to you if you want to remove it.\n. Fixes are in #179 and will be merged pretty soon.\n. Hey Ryan,\nThis is a strange bug that just popped up lately. Turns out there are two lines that cause this issue:\n- https://github.com/Shopify/Timber/blob/master/snippets/oldIE-js.liquid#L7\n- https://github.com/Shopify/Timber/blob/master/templates/search.liquid#L24\nIn the version you likely downloaded, there are parenthesis in those lines. Simply remove them and you are good to go. Master is updated to the latest so you can grab those files if you wish as well.\nHappy hunting, and let me know if you see this issue pop up anywhere after those changes.\n. Yes, completely honour system. It's already been released in the partners blog so it's public knowledge, but isn't usable unless a beta flag is enabled.\n. @jonasll Could you review the updated en/fr locale files please.\nThe only general form-related string I have left in there is for an error, since it shows up in multiple instances and can't be separated into specific groups per use case.\n. Disabled gift card demo\nAcitve gift card demo\nNote the grey border color is grabbed from the primary colour theme setting.\n. Going to merge this into i18n branch rather than here so we don't have to maintain two branches for i18n.\n. @jonasll Looks like this popped up again. I'll try it out on another theme to see if it's a Timber issue or something more general.\n. @fredryk Have you seen this before? I was under the impression you are automatically redirected to the account page after login, which is what happens when I try creating an account.\n. This is the error I get when trying to sign up with a duplicate email. Looks to just give you the reset email reminder.\nAnyone have a reliable way to recreate the error?\n\n. Going to close this for now as I can't figure out a way to debug it. Open to any suggestions if it continues to come up.\n. Merged into to the i18n branch. Thanks for the update.\n. Fixed with https://github.com/Shopify/Timber/commit/f45668ba9692c2e88afb5eb0440e2a8c026c2ce9\n. While potentially handy, not sure it's necessary for the majority of users. If we go down this path it could open up a lot of other colors/variables to add. Let's aim for simplicity and keep these out for now.\n. Could definitely do that. \n. @mpiotrowicz I'll try a similar approach with actual tables. I try so hard to stay away from them, even when sometimes they're needed. You may be right that they actually simplify the layout a bit.\n. Hm, the only way I can think of making the cart work is with nested tables. The two td in the left red section need to stack on top of the three to the right on smaller screens. The first row is hidden so not an issue.\n\n. You used nested tables I assume, right?\n. With nested tables we could go from this:\n\nto this:\n\nWith pure CSS, we can go from this:\n\nto this:\n\nThe table layout markup is a bit cleaner since you don't have to define widths, but it still has the downside of being a nested table. Thoughts?\n. Leaning on this being the new layout for the cart. Thoughts?\nDemo\ncc/ @stevebosworth @Shopify/fed @garygilmore\n. @mpiotrowicz A floated td won't fill the height of it's parent table, so that won't work. The sub table makes sure all rows in .cart-row fill the same height yet are able to bump to a new line when the first level of td are set to block.\n@richgilbank What did you click/type get NaN? And you're right, the plan is to ajaxify the /cart page too soon, though by default they see the cart in a drawer or modal so this page is very rarely seen.\n. Gotcha. Fixed in 28984ff.\n. What if I just check that in JS? Or is that a makeshift fix that would be averted by just switching to type=\"number\"?\nif ( isNaN(qty) ) {\n  // Not a number, bail and set to 1\n  qtySelector.val(1);\n  return;\n}\n. Choosing the second option seems to be the easiest. While it does add some markup (one div per cell in the product row), the general table layout remains in tact.\nAnimations only change by changing the animating element to the inner wrappers, rather than the table row.\n. Turns out the animation does not work when a td is set to display block inside it like it is on mobile. The height starts to animate, but stops at a (seemingly) random height.\nI think I'm going back to using the grid without a table. Sorry @mpiotrowicz \nBut as Snook says:\n\n. Completely agree. Hope I hit more challenges like this, just maybe not involving tables for a while.\n. Also added _count to items \n. Changing the form element names is fine, but the the contact page uses hidden labels, so the actual label is also the placeholder. This is on purpose to keep the forms nice and simple.\n\n. These are system-generated words, based on the field name.\n@carolineschnapp @fredryk - do you know the best way to approach this for theme authors?\n. Since this gets pretty complex with i18n, we've reverted to server-generated form errors. See the commit here.\n. In short, if a product is hidden any information associated with it is not available to the storefront via Liquid. It's as if the product doesn't even exist.\nIn the admin, the product will appear in any collections it automatically is assigned to, but will have the hidden badge on it.\nThis is not Timber-related so will close this issue, but @carolineschnapp thoughts?\nMight be worth opening this discussion in the Shopify forums instead.\n. @qLb Not sure I know what you mean. By moving to your suggestion you'd have an empty class=\"\" attribute on all elements on page load. Seems unnecessary. \n. Sorry for being unresponsive on this. There's a bit of a code freeze on master right now until i18n fully launches, so there is a bottleneck of changes in the i18n branch. Once that merges, I'll take a closer look at this.\n. We've updated the classes and added some better structure to these loops so going to close this as it's outdated. Feel free to open another PR if you still find it confusing.\n. All text is left-aligned by default by the browser, so not sure the need for that class. I'll remove that from the docs. Thoughts?\n. On second look, there is a .text-left base class. It gets generated when @include device-helper(); is called. That is called once at the top level with no namespace, and once for each breakpoint.\nYou can check the source for confirmation.\n. This adds a separate class for each breakpoint and - in my opinion - will be rarely used. Seeing as it's so easily added, I think it's best to leave this out of Timber.\n. Re: #206 - Unlikely to be useful to most people.\n. I saw in another notification that you fixed this with clearfixes, is that true? Please reopen if you are still having issues.\n. I think it makes sense. It was $185, so it's on sale from that to $92.50. You could also change the text to Compare at or Regular price. Thoughts?\n. Yes, internationalization is currently in a branch here. The current date to merge it in and release the next version of Timber is September 15th.\n. Mailchimp isn't setup on the demo store, so that's expected behaviour. The form's default action value is #, which should be replaced by the Mailchimp action URL. Find out how to get it.\n. Merged into i18n instead.\n. You're right, looks like those can be removed on first and last name. Not sure when they became optional.\nUpdate: I'm looking into if they're supposed to be optional. Checkout requires a name so it would make sense that an account does as well.\n. Yup, looks like just email (and password) are mandatory. I'll remove the error classes in the i18n branch.\n. Hey Ben,\nI'd suggest downloading our Supply theme. It's based off of Timber, and has theme settings defined for showing, hiding, and rearranging collections on the home page.\nLet me know if you run into any issues with it.\n. Not that I know of. I'd suggest implementing Caroline's solution in your own projects. It's a workaround to a potential core feature so I'm going to refrain from putting it in Timber, but will look into it some more.\n. I should have done it earlier, apologies! Once this is flushed out we'll use it as a reference for future themes we create/refactor.\n. While this is a good start to customizing the new checkout, the markup is still being tweaked. Rather than try and match change for change, I'm going to close this and open a new PR when the markup and styles are more stable.\n. These classes will be removed when i18n merges shortly. Hidden is a lazy class and it will not be used anymore. Please rely on the breakpoint-generated classes as mentioned in #205 \n. Let me test this out and make sure it works, thanks for catching it.\n. :+1: \n. @carolineschnapp @fredryk Had never thought of this before. Do you think this is the best way to approach a fix?\n. Great idea. Caro, please keep us posted when the issue is addressed.\n. By taking advantage of the existing variable $min, you would use:\n```\n.social-icons { \n  margin: 30px 0 0 0;\n@include at-query ($min, $small) {\n    margin: 15px 0 -20px 0;\n  } \n}\n```\n$min translates right to min-width, so your code should be working. Try swapping $min there instead.\n. On second thought, your first attempt needed to pass in a string. Check the code examples in the Code tab in the docs.\n. I'm torn on this. Where it breaks down is if:\n- Someone selects a medium sized red shirt.\n- They click the thumbnails, one happens to be green.\n- They click checkout, thinking they're buying a red medium shirt.\n- The cart shows a green medium.\nI've never used a site that toggles options by clicking thumbnails. Thoughts, @carolineschnapp @pauldpritchard \n. Unfortunately it's not on the immediate timeline as a few other things need to be completed and launched in the near future. I'd suggest using Caroline's suggested code for now.\n. This is fixed in i18n branch - https://github.com/Shopify/Timber/blob/i18n/templates/index.liquid#L9\n. It's definitely a useful feature, but I try really hard to not add any additional theme settings if we can avoid it. That said, we don't have an example of adding page content with a theme setting, so that could be a great use case for it.\n@pauldpritchard @stevebosworth Thoughts?\n. That's where our sandbox repo comes in. It's not directly tied to Timber, but offers up reusable components and settings.\nI'd rather not maintain a second branch as it would make future edits (especially larger ones) more difficult and time consuming.\n. Link to internal repo (sorry public people) here - https://github.com/Shopify/theme-sandbox/pull/23\n. The following looks to be the latest version you're talking about, is that right?\n```\n\n\n\nEmail Address \n\n\n\n\n\n real people should not fill this in and expect good things - do not remove this or risk form bot signups\n\n\n\n\n\n\n\n\n```\nThe input with name b_bacc277397ebafe830b8e3403_2df30865c8 is most certainly linked to the associated list, so not sure we can add that in a way users will know to update it properly like we do for the form action.\n. Since we can't get our hands on the custom name value, I don't think there is anything we can do about this. Great tip if you're editing a client's theme though.\n. Really like the approaches taken here, especially around JS strings to avoid any possible errors. Passing in pre-formatted elements (name, date) is also really great so that those changing the values don't have to account for markup.\nI had a minor question about a string name above, but am happy to merge after that.\n. Agreed, Kevin. The closer we can get to full sentences or phrases being translated at once the better. This will improve and evolve over time, I'll see to it.\n@carolineschnapp Are you happy with the state of this? if so, merge away.\n. I should have left a better description. I pulled the JS directly form the option_selection.js file (https://github.com/Shopify/shopify/blob/master/public/shopify/option_selection.js#L135-L183). While it's not formatted perfectly, keeping it identical to the possibly included version makes the most sense to me.\n. Added a note and cleaned up the readability/formatting slightly. In 471ddd0 I also removed unused/duplicate functions. Will test to make sure it doesn't break sites.\n. I'll poke someone about this. Tabs alphabetically makes some sense to me, but the keys doing the same doesn't.\n. Order history and addresses could potentially have a lot to scroll through. Adding pagination is optional, but a nice touch for return customers. \n. The ajax cart loads in after the page initially loads, so you'll have to re-initialize the currency switcher in the callback, onToggleCallback. I've never done it, so you'll have to dig through the repo and possibly the javascript to figure that out.\n. In the latest version of Timber you can bind to an event after the cart markup has loaded. \njQuery('body').on('ajaxCart.afterCartLoad', function(evt, cart) {\n  // Run any JS you need here\n});\nThis can be called from anywhere, giving you the most flexibility to use custom JS with the ajax cart.\n. I'm assuming the issue is that the cart elements haven't loaded on the page for jQuery to get a hold of the proper selectors, so when you switch the currency it does its best to update all prices it knows about \u2014 but missing the recently added ajax cart ones.\nWith the snippet from my last comment, you should re-initialize the currency switcher JS. This will be dependant on your implementation of it so I can't speak with exact details. By reinitializing it, the proper selectors will be read and updated without a page refresh.\n. I've responded on the StackOverflow question as well, but here's a copy of the answer:\n\nIt never really occurred to me that would be desired functionality, but I totally understand. Follow these steps to get the modal cart working as you'd like:\nNote: My line numbers may be off compared to your version as I'm looking at the latest version that will be merged into Timber master soon.\n1. Add cartToggleCallback after cartUpdateCallback under the Private function variable declarations. This is around line 260.\n2. In showModal, change Shopify.getCart(cartUpdateCallback); to Shopify.getCart(cartToggleCallback); This is around line 475.\n3. Make a complete copy of cartUpdateCallback and name the new function cartToggleCallback. This is around line 689.\n4. Comment out buildCart(cart); from case 'modal' in cartUpdateCallback\nThe steps above will create separate callbacks for when a product is added vs when the cart is toggled opened. Let me know if you have any issues!\n. Haven't tested, but try changing:\nshowModal = function (toggle) {\n    $body.addClass('ajaxcart--is-visible');\n    // Build the cart if it isn't already there\n    if ( !cartInit && toggle ) {\n      Shopify.getCart(cartUpdateCallback);\n    } else {\n      sizeModal();\n    }\n  };\nto just\nshowModal = function (toggle) {\n    $body.addClass('ajaxcart--is-visible');\n    Shopify.getCart(cartUpdateCallback);\n  };\nThis will update the cart each time the modal is opened.\n. Will be addressed with a fix for #255\n. The new ajax cart (released with v2.1.0) does not need to be reinitialized. Event listeners will stay active in the cart, and a better callback method for when the cart is loaded into the DOM can be used to handle plugins.\n. Both great calls. I'll give it a look today.\n. A few updates:\n- Moved all theme files into /themes\n  - This way, it's still 100% usable to those not wanting to take advantage of Grunt\n  - The theme gem can still be used as a standalone gem (config.yml lives inside /themes\n- I looked into grunt-contrib-concat, but you have to define what folders to concat from\n  - The current Gulp implementation lets you specify the @import order in a stylesheet, so users have full range of maniuplation without touching the Gruntfile\nI haven't tried including grunt-shopify yet. The reason I'm apprehensive is that it makes it incompatible with the theme gem natively, meaning you must have two config files rather than just config.yml. I still have to set up other tasks like upload and/or download.\n. The more I look at it the more I like this approach. The theme gem can still be used, just from inside the /theme folder if need be. A config-sample.yml file will not be included though, as the ideal approach is to use Grunt.\nThoughts, @stevebosworth?\n. @tylerball While the gem does ignore files, it's nice to visually see what files are 'theme' ones and what are not. By adding a separate folder it distinguishes the two more clearly. Similarly, not everyone will be using the theme gem, so stray files in a zip may break the upload (there is a whitelist there too, but I've heard of issues coming up still).\nAs for Grunt and Gulp, I know it seems strange at first. The Gulp concat task lets you clearly define the order of your stylesheets are imported in via standard @import statements. The grunt tasks I found that were similar only let you define folders and have things included in alphabetical order. Personally, I like more control on the order, but open to thoughts/suggestions.\n@stevenmichaelthomas I don't think improving the theme gem is going to fix development concerns. It's a fairly straight forward tool for syncing files, and no more. Image optimization, building zip files, concatenating files, and eventually style guide checks are outside the scope of it.\nThe good thing about this implementation (with the separate theme/ folder), is that the classic way of using the theme gem can still be used as it was before. \n. While grunt-shopify is great, I'm a little skeptical relying on a third-party tool for this if it's the way we're suggesting to build themes for the foreseeable future. My initial attempt at incorporating grunt used concurrent command line tasks with the theme gem rather than grunt-shopify at all.\nI'm going to chat more with Steve/Steve on this Wednesday. Care to join?\n. Talked more with SteveB about build processes in Grunt and Gulp, and I'm back in favour of using Gulp inside of Grunt (just for CSS concatenation). Hear me out.\nImport Order\nI can't find a way in Grunt to simply look at a CSS file and concatenate the @import statements into a file of the same name in a new destination. All Grunt implementations require that you define the files you want included in the Gruntfile itself \u2014\u00a0especially if you want a specific order rather than the default alphabetical order of each folder:\n'src/stylesheets/global/_variables.scss.liquid',\n'src/stylesheets/global/_helpers.scss',\n'src/stylesheets/partials/*',\n'src/stylesheets/modules/*',\n'src/stylesheets/templates/*'\nIn the above example, _helpers.scss would be included first by default if using src/.../global/*, but would cause an error in Shopify if it uses a variable defined after it in the built stylesheet.\nThis is problematic because if a user creates a new stylesheet (like a checkout override), they'll have to edit the Gruntfile to define the import order of desired modules. I don't think anyone should have to touch the Gruntfile unless adding custom tasks.\nGulp to the rescue\nWith the Gulp we had at first, we see that it acts just like we want. src/stylesheets/timber.scss.liquid is full of @import statements, and is built into a file of the same name with a proper import order in assets/. No Gruntfile management is needed at all.\n. I'd like to move ahead with this implementation.\nOutstanding issue\n\nUse grunt-shopify or Shopify's theme gem?\nI'm leaning toward the theme gem as we maintain and own it. Any final thoughts @stevebosworth @mpiotrowicz \n\nKey features\n\nIncludes all @import lines from files in the root of /src/stylesheets inline\nFiles in the root will be added to the assets/ folder with the same name\nImage compression during each Grunt task\nEasy zip creation with grunt zip\nEasy deployment to shop with grunt deploy\nBuild your files without deployment using grunt build\n\nFuture feature additions (at least potentially)\n\nModularize JS like the current stylesheet implementation\nLivereload\nJS Hint (too restrictive for a wide audience? could be a standalone task)\nSCSS Lint (standalone optional task)\n. I'd like to merge it into master. With a little more documentation, it'll go a long way in easing dev workflows for everyone. Always remember, Grunt is an optional part of this and not necessary for using Timber.\n. We could still do multiple releases with this approach, no?\n. Looks really good. Glad to see it getting a revamp.\n. I have an issue open for the callback firing before it should.\n\nhttps://github.com/Shopify/Timber/issues/244\nIt'll fix the issue you're seeing, and avoid any confusion trying to custom set callbacks. Shopify.getCart for example, doesn't always mean the cart is open so calling Shopify.onCartOpen doesn't necessarily make sense. Keep an eye on the issue above and we should get to a solid solution.\n. Makes sense to me. I'll create a PR.\n. The cart toggle is setup on click, so changing that to hover will be in ajaxify.js or ajaxify.js.liquid depending on your Timber version. You'll want to look for this line in your file and change it to what works for you. hover or mouseover would probably be the best. Remember though, this click toggles the cart open and closed so you may need to do some custom work to make sure it doesn't trigger too often.\nCan you provide a screenshot and/or link to your theme so I can test out the second part of your question?\n. Looks like the issue was the form markup. The error message is appended after the form element on the product page, so it's best to only wrap the variant options, quantity selector, and submit buttons with the form.\n. Ah good to know. My thoughts were this is more of admin text, not storefront. It does make sense for everything to be translatable though. I'll fix that up.\n. Thanks!\n. Thanks!\n. I grabbed the translations from Radiance (I believe it was). @jonasll are you able to give the date formats a quick look?\n. I think you're a bit off, but it did show another issue. You don't need to include btn on the secondary button classes, since the secondary one uses Sass to extend it. That said, the docs should use btn--secondary and not a single hyphen as it is now.\n. Fixed it in 7b99d3f8f8922decb6fd4876dd54ad5446dbd1c3\n. For the product page you mean?\n. assets/icons.json is generated by http://icomoon.io/, and would is only ever needed if being imported back into their app. Indentation rules don't need to apply there.\nThe locales files have changed a bunch lately so this PR is out of date. Are you able to remove the changes to assets/icons.json and rebase from master with the other changes?\n. Did you notice if this happened before the latest update to to the icon font too? I'm unable to recreate the issue in IE8 on XP.\n. I'm getting all icons on IE8 Windows 7 32-bit. Can you recheck https://timber-demo.myshopify.com/ please.\n\n\n. :+1: love it\n. Agreed. This hasn't been implemented because there are a lot of ways to implement mobile menus and we don't want to handcuff anyone on one approach over another. That said, it is on the roadmap to be added.\n. @stevebosworth can you give this a review please. There was a lot of back and forth with so don't worry too much about the comments, just the final code.\nThings we've done\n- Moved all functions into shop.js\n- Set liquid variables in templates that will trigger Timber's JS after it is initialized\n  - This removes nearly all inline JS (addresses.liquid is an outlier here)\n  - Keeps all template-specific JS together (in theme.liquid \n- Cleaned up a lot of unneeded comments, mostly across customer templates\nNew demo page is at https://carson-dev-shop.myshopify.com/\n. Any final comments on this PR @mpiotrowicz @stevebosworth? \n. Absolutely. Create a PR just like this and we can have any needed discussion there. Thanks.\n. Added strings in #309 PR. Closing this one.\n. Moved this to #304 with some minor syntax updates for consistency.\n. hidden-label only visually hides the text using overflow and clipping. All text is fully available to screen readers.\n. The methods we see are usually a lightbox or some sort of zooming action. Both have up and downsides, but the implementation can be pretty similar regardless. I'll give you a quick rundown of our zoom implementation.\nTake a look at this demo from our React theme. When hovering over the product image, a larger one is magnified for you.\nThen take a look at this gist. In the gist I've stripped React's JS file down to just the image zoom related code. The important part starts at line 104, and you can extend it yourself as needed. Note that we have a theme setting that enables/disables this feature too. At this point we have the new image URL (src), and the jQuery object we're updating ($el). By setting the data-zoom and src attributes on our image object, we keep our zoom plugin up to date and reinitialize it each time it changes.\nIf you want to check out that zoom plugin, the version we tend to use is here.\n. If no products exist in the store, the for loop is false and the code directly after else will run, showing onboarding filler content.\n. There is an else for for loops, it's just declared advanced. Check it out here.\n. This isn't specific to Timber, but rather the API's Shopify.changeItem returning successfully after trying to increase the quantity. I'll ping the API team to look into this.\n. @Shopify/api can you look into this?\nShopify.changeItem always returns the cart data even if the quantity of the product being changed isn't available. It leads to an unresponsive ajax experience.\nRecreate it by adding 5 of this product to the cart. Then once in the drawer, try adding to the quantity.\nPossible solutions:\n- Return an error (though it's not an ajax error, so not ideal)\n- Return cart data with additional parameter with error details\n. @Shopify/api ping\n. Still an issue, but not Timber related so closing this. \n. Awaiting word whether the liquid will be fixed to make fix this unnecessary. \n. Rather than remove the check, I've now assigned a new variable using the | size filter rather than .size. As one of our devs mentioned, if size happened to be a line item property we'd run into issues, which is why using the filter makes a lot more sense.\n. Finally got around to testing this out. All looks great with the exception of the .secondary-action link on the collections pages. It points to a non-existant link. Please remove that along with the associated strings.\n. Great testing and really appreciate it. We're in the early stages of redesigning the ajax cart for a more mobile-friendly approach, and for some alignment with a new mobile navigation. Needless to say performance is a huge consideration that will be at the forefront of the code. The html5rocks link you sent over is invaluable and I'd also highly recommend it for anyone working on transitions.\nBecause of the new approach coming soon(ish?), we're not going to modify the existing cart transitions.\n. Looks great. Thoughts on making sure \"Default Title\" is never shown on the variant title? This only happens if there are no variant names.\nprodVariation = cartItem.variant_title.replace('Default Title', '');\n. Love it, great approach. Mergin'\n. This is part of a known issue and is tracked here https://github.com/Shopify/Timber/issues/244\nThe multiple currency javascript doesn't run each time the cart is shown, so you'll have to manually initialize it again. You can do this in the onToggleCallback function provided by Timber's ajax cart (view options).\nBecause of the bug, however, you may need to add a slight setTimeout to make it work as expected. Either way, there will be some manual work you'll have to do.\n. Is there a benefit to including 500+ icons for everyone that uses this framework? I don't think most people will use most of the icons most of the time, so the load alone makes it overkill in my opinion.\n. By using IcoMoon's app, you can import the current set and add, remove, or customize the icons as needed. I found this was the best way to provide the basics, allowing customizability (with a bit of work), and keeping performance in mind.\nAre there any specific icons you think should be included that aren't? Maybe we can bump up the default collection a bit. I am currently standardizing a few of the icons so they are the same weight and style - they'll be available with the next Timber release.\n. Great addition. If you do want to customize the default icon set, import assets/icons.json into IcoMoon's app and edit away.\n. When in doubt, open an issue. We'll take no offence to pointing out our mistakes.\n. @suture definitely, thanks for catching. I've added that in the latest commit.\n. Ping for a :+1: @stevebosworth @mpiotrowicz \n. @pauldpritchard Fixed the cart alignment.\nAs for a load indicator, there are is-adding and is-added classes added to the \"Add to cart\" button, so designers/devs have the freedom to do what they want there. If they'd rather the cart drawer doesn't open immediately, they can remove that from the afterCartLoad callback at the bottom of layout/index.liquid and come up with a custom notification.\n. Would be great to get another set of eyes from @Shopify/fed  on this.\nFor context, this PR drastically simplifies the ajax cart plugin in Timber, along with adding slide out drawers (from marketing assets) and a mobile navigation. More comments at the top.\n. @carolineschnapp are you able to take a look at this too?\n. See my last commit @carolineschnapp @stevebosworth \nInstead of that function being used, you can now bind with:\njQuery('body').on('ajaxCart.afterCartLoad', function(evt, cart) {\n  // Bind to 'ajaxCart.afterCartLoad' to run any javascript after the cart has loaded in the DOM\n});\nI hadn't thought of the straight copy/paste of a snippet, but with that in mind this is definitely the better way to go. What do you think of the implementation?\n. @stevebosworth @mpiotrowicz @carolineschnapp \nCan I get another look over this? I'd like to merge either today or tomorrow if possible. Demo still up at https://carson-dev-shop.myshopify.com/, with the latest PRs from Timber all included (and rebased here)\n. Yes, the formatting is generated by handlebars.js which is why the span comes through as a string. Not sure the best solution for that\n. Oh yea, totally forgot about that. Works on my shop (without currency switcher)\n. Ah, I didn't realize this was a javascript plugin you were trying to add on to.\nYou'll have to see if there is a callback function that plugin makes available after its JS runs. That's when you'll initialize the ajax cart found at the bottom of theme.liquid. I'd suggest reaching out in our forums for some help, as this is outside the scope of Timber.\n. Amazing. Yes, some documentation in the main readme would be great - maybe right under Basic Structure?\n. How about:\ni18n CircleCI Testing\nCircleCI tests make sure there are no missing or extra i18n strings. HTML in locale files is also validated.\nAll PRs must pass the tests before being merged. Check the test status when you open a new PR on GitHub, or locally with the following.\n-  bundle install to install all the dependecies\n- rspec spec to run all the tests\n. The tests will automatically show as pass/fail on PRs though, right? It'd be nice if you didn't have to run them locally too.\n. Ah gotcha. I'd mention that doing the tests locally are optional because they'll happen on Timber PRs automagically. Other than that, :+1: glad to see this getting in here\n. Just noticed IE8 doesn't respect the max-width on .wrapper. When a fixed width is applied, margin: 0 auto doesn't center it. I'll debug soon.\n. Content works and is available in IE8. Layout isn't perfect, but best effort is given for the legacy browser.\n. Nice addition, thanks!\n. If you change the large breakpoint to:\n'large' '(min-width: #{$large}) and (max-width: #{$preXlarge})', it looks to fix the grid-uniform issue. There may be other unintended consequences for that though. I'll see if I can make a more streamlined approach though. Closing for now.\n. Yes, that is the new format for our new theme setting editor. It's just about to be rolled out to 100% one of our shops. When it is, we'll replace it in Timber.\n. push--large--one-third. I'll add some docs for it.\n. Added in https://github.com/Shopify/Timber/commit/75c10841c149e460cd97b016a7191e262c3686d7\n. You can use snippets/ajax-cart-template.liquid for an alternative layout if you'd like. In our next version of the cart we're actually moving to that method as well.\nAt the bottom of your theme.liquid layout file, change the useCartTemplate parameter to false. When true, it'll use your cart.liquid template. When false, it'll use ajax-cart-template.liquid.\n. Hm, what's your shop URL I could take a look. Nothing in default Timber has class=\"money\" in it. I doubt it, but maybe your money format has that hard coded in there? You can check that on your default settings page.\n\n. The fix below is unique to your shop, so this same trick might not work exactly for others. Essentially we're going to change how the money is formatted in JS in two areas so that those spans are not output. It's a hacky solution, but should work for your case.\nAround line 816 of ajaxify.js.liquid, add the following new code:\nvar newPrice = Shopify.formatMoney(cartItem.price, settings.moneyFormat).replace('<span class=\"money\">', '').replace('</span>', '');\nAnd line 827 from price: Shopify.formatMoney(cartItem.price, settings.moneyFormat) to price: newPrice.\nThis will make sure each product's price doesn't have those spans in there.\nWe'll do something similar to adjust the total cart price. After $.each code block, around line 832, add the following:\nvar totalCartPrice = Shopify.formatMoney(cart.total_price, settings.moneyFormat).replace('<span class=\"money\">', '').replace('</span>', '');\nThen on line 836 change totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat), to totalPrice: totalCartPrice,\n. Honestly not sure. It's not the most attractive solution possible, but given what I know about your implementation a good one. Make sure you test it with multiple currencies and on all required browsers.\n. Hey again, turns out there is a much better solution than what I provided. You can undo those \nGo into ajax-cart-template.liquid and change {{ price }} to {{{ price }}} and {{ totalPrice }} to {{{ totalPrice }}}. That lets the html be inserted rather than converted to a string like it was before.\n. :+1: \n. I'll take a look at it. A few other things on my plate today but I'll revisit it soon.\n. Well this totally fell off my radar. Rather than trying to build a non-breakpoint clearfix \u2014 which I've tried in the past and it was awful with this grid setup \u2014 I'd suggest using only breakpoint-specific grid classes, especially in the grid--uniform areas like this.\n. Absolutely. I have a list of others that I want to work on and will come in another PR. This stems from the confusion of where the powered_by link lives in some of our themes so wanted to clear this up first.\n. :+1: merge away\n. I think that's another conversation to be had for sure, but not handled in this PR. Right now it's the best solution I can think of to handle the ordering of settings like that.\n. Using #361 for this now.\n. Looks like a smart way to call the function, and I like that it still works with the long syntax. Let me test it out a bit tomorrow and get back to you.\n. @Shopify/fed Thoughts on this approach to make a more intuitive at-query mixin?\n. Opened #367 to include link to docs and slight syntax update.\n. Nope, no un-snippification, aka no reused code that doesn't live in a snippet. I'll give it another once over to make sure that's the case though.\n. :+1: \n. @haeky Hey, any chance you can disable tests for anything merging into gh-pages? It's our docs page and doesn't act like a theme at all.\n. :+1: thanks!\n. To display them in line with the other base styles, yes. They were missed when changing the default form styles in an earlier PR. For example, the forgot password form:\nBefore:\n\nAfter:\n\n. The above screenshots make more sense when you look at the login form too (which moves the 'forgot password' link below the Sign in button):\n\n. @mpiotrowicz good to go? \n. Yup, with much less opinionated styles and markup.\n. i think if just looks like that because of the indentation. item.price is not inside item.featured_image.\n. Yea that'd be great. I'm working on another theme's search results now and mimicking what's going on here. There may be another commit or two so no rush.\n. Must be an RTE thing. Not happening on my shop https://carson-dev-shop.myshopify.com/search?q=page\n. I'd love to get this JS out of the head as well. Unfortunately right now Shopify themes require some inline JS because of the liquid variables used in some templates. This is most notably seen in the customer templates.\nWe're experimenting with ways to remove that dependency but don't have anything lined up just yet.\njQuery is in the head because a lot of plugins currently rely on it being loaded before their scripts are, which can happen in the head tag. Right now moving it to the footer is on a store-by-store basis, but it's also something we're looking to get a better handle on.\nI'm going to close this for now, but know we're constantly looking to improve the performance from a JS, HTML, and CSS standpoints. Cheers.\n. This is better left to our design forums as it's not related to Timber specifically.\n. That URL isn't a Shopify store so can't help you out here. Feel free to reopen if you can provide the right link.\n. You have some JS errors going on so I can't debug it. I'd suggest fixing those so you can reproduce the error and then duplicating the theme in that state. That way you can keep working on your main theme, but there's a sandbox version I can look at.\nCopy the link address from the preview button and you'll get a URL like this - http://your=shop.myshopify.com/?preview_theme_id=10585188\n\n. The delay is there so the cart can load the contents before opening up. This is fixed in a more recent version of Timber, though the changes are quite drastic. The cart opens in a side drawer instead of the top, and the multiple options (modal, flip, drawer) are removed for simplicity.\nIf you want to get rid of the delay, you could try triggering the cart opening earlier with a loader icon. \n. In assets/ajaxify.js.liquid you'll need to write some custom JS in the loadCartImages function. This function is called when the cart is loaded, but not yet visible or sized. We do this to make sure the images are loaded so we can get the appropriate height of the entire cart and set it's CSS height property.\nBefore the cartImages.on('load') line, you will have to insert your custom JS to show the drawer at a specific height and a loader icon of your choosing. This part is up to you so I can't be much more specific. I'd also suggest removing the loading icon in the sizeDrawer function (which is called after all images have loaded) as you'll no longer need it.\n. Created a PR where I wrap everything in the paginate tags, rather than duplicating that for the JS. Seems to work well. Any issues with it you can see?\n. Vertical scrolling is intentionally disabled when a drawer is open. This makes sure no double scrollbars show up and allows the user to scroll up and down in the drawer (if needed) without losing their place in the page.\n. I'm not sure I follow. If the base font size is 14px, and you want an element set to 18px, using the function would give you nearly 1.3em (like your demo). If the base font size is 18px, and you pass in 18px to the function you're saying \"make this element's text the same size as our base font size,\" which of course is 1em.\nThat's how I'd expect the function to work. What would you expected outcome be in the demo above?\n. This hasn't gone unnoticed, don't worry. It's a lower priority right now, but definitely on the list of things to update.\n. With block the element has a phantom clickable area:\n\nWith inline block:\n\nThat said, if the account links and search bar aren't in the markup, the layout can break. Best to wrap the element in a div so it's in a block, but doesn't have the large click area. \n. That'll be some pretty custom work you'll have to set up yourself, so I can't be too specific with an answer.\nYou can close the cart with timber.RightDrawer.close();. Setup your custom work in a listener like the one below:\n```\njQuery('body').on('ajaxCart.afterCartLoad', function(evt, cart) {\n  // start timer function\n// when timer is triggered:\n  timber.rightDrawer.close();\n});\n``\n. Take a look at the styles on http://carson-dev-shop-2.myshopify.com/. It does exactly what you're looking for. It's a bit too opinionated to be in Timber by default but definitely doable with some adjustments.\n. Unfortunately not*. With any ajax request, there will be some time needed to load the contents. In our case, we grab the cart contents via ajax and only then can we show the contents. \n- If you want, you can do some custom JS to load the cart contents without opening the drawer on page load. We haven't done this because it increases the page weight and load times.\n. Sorry, I did this in #401 after seeing you other PR. Looks like this can still merge so going for it!\n. Yes, the shiv isn't included in our custom build of Modernizr. Certainly could be though, let me look into why it wasn't.\n. You could always replace the function entirely if you want. AnywhereitemAddedCallback` is referenced, call your (global) function instead.\nIf you have myTheme.function that you want to use, change line 225 to ShopifyAPI.addItemFromForm(evt.target, myTheme.function, itemErrorCallback);. \nWhat are you trying to accomplish with the override and why does it have to be outside of ajax-cart.js? My suggestion above might make no sense depending on your answer.\n. Yes, that's probably the easiest way to do it. :+1: on the detailed comment too.\n. Do you have a demo shop I can take a look at?\n. Looks like this was missed because of a partial limitation to /cart/update.js at the time. The remove link doesn't pass in the line parameter, only the product ID - which remains the same when the only difference is a line item property.\nTo update it, follow these steps:\n1. Add data-line=\"{{ forloop.index }}\" to the remove button, right after data-id=\"{{ item.id }}\" in cart.liquid\n2. Add line = el.data('line') || null after line 962 of /assets/ajaxify.js\n3. Below that, update updateQuantity(id, qty); to updateQuantity(id, qty, line);\n4. Immediately following that function, change function updateQuantity(id, qty) to function updateQuantity(id, qty, line)\n5. Inside that function, chance Shopify.changeItem(id, qty, adjustCartCallback); to Shopify.changeItem(id, qty, line, adjustCartCallback);\n6. Up at line 223, add in the line parameter as follows: Shopify.changeItem = function(variant_id, quantity, line, callback)\n7. Lastly, add the line parameter to the data set: data:  'quantity='+quantity+'&id='+variant_id+'&line='+line\nNow the proper line item will be sent when removing the item, rather than all with the same ID.\nThis is a bit of a complex update, so let me know if you find any new errors and I can help you debug it.\n. Ah so we're close! It closes the row based on the variant ID, which doesn't change per line item. We can fix that by adding data-line=\"{{ forloop.index }}\" to cart__row in your cart.liquid template. Now we can target a single row at a time by that attribute.\nNext, in updateQuantity (line 975 of assets/ajaxify.js) change both instances of [data-id=\"' + id + '\"] to [data-line=\"' + line + '\"]. \nThat should be it!\n. Kablam :+1: \n. Agreed, I'll :+1: a PR. I was actually thinking of removing the gradient mixin. It's not used anywhere, and I've very rarely been wanting one while developing.\n. Fixed via #410\n. Good catch, thanks!\n. Nope, not at all. Too early in the morning hah. Let me revise that\n. This certainly gives you more control over what prefixes will be used, but puts the onus on the dev to know which to supply each time the mixin is used. While they're not all necessary, I'd argue a blanket prefix function eases the dev and reduces chances that any required are missed.\n@stevebosworth @mpiotrowicz what do you think? \n. You make a good point. How about we go with your suggestions, and add back in the backface mixin. On animation heavy sites it's great to just use @include backface() and have it do the magic for you (with hidden as the default.\n. This looks great. Last thing I'd ask is for a quick link to the boubon source or docs in the comment. Then let's :ship: \n. Looks great. I'll add this to the next release and update the docs accordingly. Cheers\n. Yup, looks good on my end\n. @stevebosworth you able to make a quick update for that?\n. Yup, absolutely. I'll open a quick fix for it.\n. No, not at the moment. That's really a theme-by-theme decision, while we're trying to offer what most themes need most of the time.\n. This is an internal Shopify URL to show us the details and structure of repodb.yml. There is no public version at this time.\n. Thanks!\n. Right now there's no function available, but we should be able to create one for you easily. In the Drawer.prototype.open method of assets/timber.js, we check if onDrawerOpen is set, and if it's a function run it. Copy this function into the Drawer.prototype.close method with a few changes. Add the following around line 439, after this.drawerIsOpen = false;\n// Run function when draw opens if set\n    if (this.config.onDrawerCLose && typeof(this.config.onDrawerClose) == 'function') {\n      this.config.onDrawerClose();\n    }\nNow it's set up to run a function, but we still have to give it one. Up in timber.drawersInit (line 184), change timber.LeftDrawer = new timber.Drawers('NavDrawer', 'left'); to:\ntimber.LeftDrawer = new timber.Drawers('NavDrawer', 'left', {\n  'onDrawerClose': yourFunctionName\n});\nEnter any function name there and it'll be called each time the drawer is closed.\n. What's your shop URL, I can take a look\n. You don't need to wrap the afterClose function like that. Just put:\nfunction afterClose() {\nalert('Closed');\n}\nRight now, afterClose is undefined according to timber.js. What file did you put afterClose in?\n. I just updated your JS file from 'onDrawerClose': afterClose to 'onDrawerClose': timber.afterClose, and the afterClose function to:\ntimber.afterClose = function() {\n  alert('closed');\n};\nSeems to work as expected now\n. My pleasure!\n. This is a known bug and only happens occasionally. Still have to test if the nth-of-type is a worthwhile fix.\n. Going to close this as it's a pretty rare case of actually causing layout issues for your users. For those that run into this, check out the link I posted above for a fix in your build.\n. :ship: \n. :+1: to \"Twigs for Timber\" @Cam - love it.\nAgreed that Slick is a fantastic resource \u2014 we actually used it on our latest theme, Brooklyn (with some customizations). There are no plans to add modules like sliders in at the moment.\nI'd suggest installing and checking out Brooklyn's source code (or most of our other free themes) for advise on how to set up your theme settings.\n. cc @stevebosworth \n. Totally forgot to merge this. Great addition, and thanks for the :+1: @zackcote \n. Can't argue with that, thanks for the update. One day we can remove the other ones too :)\n. For developers snippets are a huge win. Organization, cleanliness, both great. Not too long ago we in-lined snippets that were only used once (like the header and footer) so merchants would have an easier time finding places to edit or paste code from plugins/apps/docs. Editing markup is already tricky enough, and the added reliance on snippets created more of a hurdle for them.\nUnfortunately we don't have stats on whether or not this is helping and we need to do some UX testing to see if it makes a noticeable difference. For the time being, we're only going to use snippets for code that is used multiple times, though it isn't set in stone forever.\n. Yes, that's all that's controlling the animation. If you want a fade and then a slide, I'd suggest removing the styles associated with is-removed in the CSS and do it only in JS. It's possible to do with CSS keyframe animations as well, but can be tricky to get the timing right.\n. @fredryk any ideas on this?\n. Closing as this isn't Timber-related\n. Yes, Timber currently ships with a single level dropdown on desktop, and a hidden drawer nav with collapsable dropdowns on mobile. Check out the demo at https://timber-demo.myshopify.com/\n. On line 326 of ajax-cart.js.liquid there is a listener for each click on the plus/minus button. This is where you'll need to update to listen for a change on the select element. Something like $body.on('change', '.ajaxcart__qty-num', function() {...}.\nMake sure the select has a data-line attribute so the cart knows which product to update. You can remove the references to $qtySelector and instead use the value of the selected option. It'll take some custom work, so if you need some extended help I'd suggest reaching out in our design forums. \n. .js-drawer-open-right .is-moved-by-drawer's styles, specifically the translateX look to be conflicting with your fixed elements. You've done a lot of custom work so I'm going to close this, not being related to the framework itself.\nYou can use classes js-drawer-open-right and js-drawer-open-left to adjust the styles on the fixed elements. Fair warning, having fixed elements react with a drawer layout like that will be very tricky.\n. Add shopify_common.js to the head, rather than near the bottom of the page. There are some inline JS scripts in the address template that need access to that file before being called. It's not perfect and we're looking at ways to allow all JS to be at the bottom of the page, but for now that's your best fix.\n. Change instances of supports-fontface to what ever your version of modernizer is adding instead. (source). I believe there are just three.\n. Alright. I'll close this for now, but I'd love to hear what's causing the issue.\n. Hadn't even considered that to be a potential issue, but great catch. Thanks!\n. I'd recommend checking out https://cartjs.org for more extensive cart API usage. It's not something we're planning to add to Timber. \n. You should definitely tailor this to your theme, rather than rely on Timber's defaults. You can change that here - https://github.com/Shopify/Timber/blob/master/assets/timber.scss.liquid#L2067\n. The code I mentioned is specifically for inside the drawer. If you want to disable hovers on links outside the drawer, I'd suggest creating a transparent div that covers the entire #PageContainer div. It would need display: none by default, and display: block when .js-drawer-open is on the html tag.\n. Do you see from_text_html in locales/en.default.json? It should be nested under \"products\" and \"general\". Here's the source\n. Fair enough. Never thought about that case but it does seem like it could have unintended consequences. Thanks for the PR.\n. One of the best PRs I've seen. Too often we get bogged down in the code and don't give enough polish to stuff like this. Thanks!\n. Big oversight not having that in there already. I think we assumed that rte containers would be inside a grid__item, but that definitely isn't always the case. Do you want to add a PR and either add it here (https://github.com/Shopify/Timber/blob/master/assets/timber.scss.liquid#L1326) or in the RTE section?\n. Yea, you can replace that. It seemed like a good idea at the time but is not used enough to be in base Timber.\n. :+1: - chances of an image or iframe wanting to be more than the container/screen are so rare that this blanket style is a win.\n. We worked for a while trying to get it working as you expect on iOS, but as mentioned, overflow: hidden doesn't work like it does on the majority of other browsers and devices. Instead of opting to create a workaround that would be hacky at best, we decided to let the iOS scrolling behaviour stick around. It doesn't detract from the user's experience, as at worst they lose their position on a single page.\n. Hey, I just updated the demo shop with what's in master and the URL changes as expected. Here's a demo - https://timber-demo.myshopify.com/products/ricky-straight-super-t-mens-jean?variant=780884073\nDo you have a shop up that I can take a look at?\n. If you keep running into issues, reach out to themesupport [AT] shopify.com and they should be able to point you in the right direction. I'll close this for now but feel free to open it back up if you see fit.\n. Totally agree that's the best way to go if using a grunt/gulp script. Since Timber isn't set up on one, my opinion is to keep !default out of here. It's pretty quick to add in if you're setting up something like shopify-css-import.\n. Good catch. One adjustment that we've been using lately is to not require the px value in the text box. Seems insignificant, but turns out it's enough of a hassle to non-tech people that be worth it. Can you update this to:\n{\n  \"type\": \"text\",\n  \"id\": \"logo_max_width\",\n  \"label\": \"Max logo width\",\n  \"info\": \"Defined in pixels. Do not add the 'px' unit.\"\n}\n. That sounds like a case-by-case need so not needed in the framework itself. Open to reasons it would be valuable to a wider audience though.\n. Agreed, no need to sub-sub-menus in a framework. When done, they have to be very specific to the theme.\n. This would better fit the Shopify Forums or by reaching out to our gurus, since this is specific to your customized theme and not the Timber framework.\nI did a quick test and items are removed from the cart as expected, so not even quite sure where the issue lies.\n. Looks good, thanks for including the fix here too.\n. page_description definitely makes sense. A blog article, for example, currently looks like this:\nog:description\n<meta name=\"og:description\" content=\"What's in this demo Check out the Timber documentation to learn more about using this framework in your own projects. This demo shop has a few things included i\">\ntwitter:description\n```\n<meta name=\"twitter:description\" content=\"What's in this demo\nCheck out the Timber documentation to learn more about using this framework in your own projects.\nThis demo shop has a few things included in it:\nA few demo products\nAn ajax cart enabled\nCustomer accounts enabled\nContact page\nCustom logo (via theme settings)\nWhere's the style?\nTimber has very little style so you can use your CSS chops to create a sweet custom shop. That means you don't have to remove a lot of code to get to a good starting place.\nWhat does a Timber look like blank?\nThings included in this demo are not necessarily enabled by default on brand new Shopify stores. By default, you'll have no products, accounts disabled, no logo, no contact page, among other features disabled.\nCheck out Timber installed on a brand new store\">\n```\nWant to open a PR with the update @paulmason? I'd suggest adding the trancatewords filter though.\n. You can add as many as you'd like now, though only left/right ones are set up. Duplicate the existing menu or cart drawer markup and then initialize a new drawer with this syntax.\nNote that there currently is a bug if you try and close a drawer (via the close button) when multiple ones are open. \n. @christianblais could your changes to shopify_common.js have effected this?\n. A fix is in for shopify_common.js to be more efficient but also backwards compatible.\n. Yup, fixed on my end too. Thanks for being so quck\n. Just tested on master with no issues. Can you show any error messages you got @Cam ?\n. Tests don't work on the gh-pages branch (that houses the docs) so we can ignore them.\n. The current set adds a class to .site-nav--has-dropdown. Using slideDown on that won't do anything because it's already visible. You want to set it on the child inside of that. Do that with $el.find('.site-nav__dropdown').slideDown(1000);\nYou'll have to do the same in the hideDropdown method.\n. CSS is my preferred method too, though depending on how much the dropdown heights will vary it can be challenging. Lately I've found an opacity and translateY have been great in all situations.\n. :+1: \n. Remove the wrapper class from main-content and add it (<div class=\"wrapper\">) when needed as a new wrapper div on a per-template basis.\n. Only assumption is that the JS hasn't initialized yet for some reason and you're following the default href of those thumbnails. Did you see any JS errors?\n. lnkr.js isn't a part of Timber so not sure where you saw it. Closing the issue, but feel free to reopen if you see fit.\n. I agree this is a great approach. Are you able to update the docs to include these as well?\n. Alright, we're almost there.\nLet's remove:\n- beforeSubmit.ajaxCart | duplicate of event in ShopifyAPI.addItemFromForm\n- afterSubmit.ajaxCart | duplicate, same as above\n- itemError.ajaxCart | duplicate, ShopifyAPI.addItemFromForm triggers errorAddItem.ajaxCart regardless if an error callback is sent\n- adjustCart.ajaxCart | duplicate of events triggered in ShopifyAPI.changeItem\n  - My argument with this one is that if ShopifyAPI.changeItem isn't called, the events aren't needed at all. Every other event is tied to an ajax call except this one.\n. Thanks for the updates. Did a bunch of testing and it looks in order. The only duplicate events triggered are afterCartLoad.ajaxCart and afterGetCart.ajaxCart \u2014 but I'm happy to leave both. The second one is in the ShopifyAPI.getCart function itself, firing no matter what callback is sent, while the first one is specific to Timber's drawer implementation. \nWill give the docs a quick review the merge both. Cheers to putting this together.\n. Last ask, could you squash the commits down to one. Here are the steps.\n. No worries, more of a nice to have than anything.\n. Looks good. You can ignore the broken tests, they shouldn't be running on gh-pages - not sure why they are here.\n. Good catch, thanks @suture \n. Will be adding that in another PR shortly\nEdit: this may actually be a bug with the update in core, preventing comments.created_at from being sent to the page after a successful post. Digging in now.\n. I wouldn't suggest taking Timber's icons directly and putting them in Brooklyn as we customized a number of the icons for that theme. Here are some steps to update Brooklyn's icon set:\n1. Grab icons.json from the assets folder of Brooklyn and upload it to https://icomoon.io/app\n2. Upload an SVG for the Amazon Payments. Here is the one we use. Make sure the icon is named amazon_payments before exporting.\n3. Export the fonts (lower right corner of the app). You will get a zip file.\n4. Make sure the files are named icons.extension, move them to your assets folder\n5. Rename selection.json from the zip to icons.json so you have the most up to date versions in case you need to make other changes as well. Place that in your assets folder.\n6. Take the css font mapping from styles.css in the zip and replace what exists in assets/timber.scss.liquid. Look for the \"Icon Mapping\" comment in timber.scss.liquid for where to place the updated code.\n. Could @Shopify/theme-support take a look through Timber's settings and make any changes needed please.\n. Looks great, thanks!\n. We have discussed it before and go back and forth on it. In short, we're not going to do it.\nFor some context, we decided to stay away from it for the sake of merchants that find themselves in their admin trying to adjust a little bit of code. A lot of our docs say \"go into your layout/theme.liquid file and find your footer, then ______\" \u2014 or something along those lines. Asking merchants who are potentially uncomfortable in code to begin with to start hopping between snippet files can make their task at hand seem even more daunting.\nThe themes we build at Shopify are free and used by a lot of merchants so this is a big factor for us. If you're developing something for the theme store we'd suggest sticking to the same approach.\nAll that said, if you want to split them up yourself you absolutely can. It's very quick for a developer to pull elements they want out of theme.liquid and into snippets so we'll leave the onus on them to do that.\n. Want to open up a PR with the fix?\n. Can't find the PR to link to, but the code is in master so closing this.\n. I lied - it's missing the pagination tags. @rubenbristian did you ever open a PR that I missed?\n. I suppose you could, but a lot of the code is specific to the Shopify environment so you'd have to sift through and remove a few things. \n. Looks great. Thanks!\n. This is what we're using on some newer themes:\n{% elsif template contains 'article' %}\n  {% if article.image %}\n      <meta property=\"og:image\" content=\"http:{{ article | img_url: '1024x1024' }}\">\n      <meta property=\"og:image:secure_url\" content=\"https:{{ article | img_url: '1024x1024' }}\">\n    {% endif %}\n.....\nAnyone up for creating a PR?\n. Looks great. Thanks for the updates :+1: \n. I should have added this a while back. Thanks!\n. Why add these? Timber doesn't have the password page view (instead relying on Shopify's default one) so these won't be used.\n. We still fully support IE9 and a few older Android devices for Shopify-built themes so can't make that jump just yet on something so instrumental as the grid.\nWe absolutely value and leverage flexbox when we can on a smaller scale when lack of support is easier to mitigate with sensible fallbacks. \n. Are you able to share the fixes you've implemented?\n2) Mobile sidebar issue: this is an issue with the latest version of Safari on iOS. At this point I haven't found a way to fix that.\n. At this time, splitting out the files and concatenating with a build task is not in our scope. That said, you can use https://github.com/Shopify/shopify-css-import to do so yourself.\n. This didn't fix the issue so I'm not exactly sure what it is. Going to close this as it's pretty stale now.\n. @softlimit Can you test out the demo shop again and see if it's still happening? Hopefully iOS fixed the rendering/layout issue - I know Safari had a number of issues when iOS 8 launched but fixed them quite quickly. A screencast of the issue would be really helpful as well.\n. A link or embed here would be ideal if you can do that, so others can see it in action as well. Cheers.\n. Looks like this was fixed at some point. Feel free to reopen if you see fit.\n. :+1: \n. Is comments_with_count used somewhere else? Not sure why the tests are failing.\nEdit: yup, once on the index template as well.\n. :+1: :+1: \n. Are there any cases where customer_accounts_optional would be used? \n. Thanks for the explanation! Feel free to merge unless there are other changes you want to add.\n. Simple and perfect. Thanks!\n. Boundless wasn't built on Timber. If you're able to recreate this on a fresh install of Timber feel free to reopen the issue.\nFor what it's worth, that issue has since been fixed on Boundless, so thanks for noting it.\n. @jholl yes this will be an alternative for using line or id in the cart. No timeline on this in production yet. It's a pretty big change so we want to be sure it maintains full backward compatibility and doesn't break anything new.\n. :+1: thanks\n. @carolineschnapp could you test this out for me too?\n. Thank you for bringing this up. I'd been searching for a fix but never came across shrink-to-fit somehow.\nFor those wondering exactly what this fixes, see what happens in our Brooklyn theme when you close the navigation drawer (on iOS 9):\n\nWith this fix, you get a nice smooth drawer closing:\n\ncc/ @stevebosworth @t-kelly \n. Chrome gives a little warning, but small price to pay for iOS to be happy.\n\n. Awesome, thanks!\n. @stevebosworth I know you were looking into this on one of our free themes - Solo maybe? \n. The timber.LeftDrawer and timber.RightDrawer names are arbitrary, so you can name a new one anything you'd like. The only important thing is the ID on the drawer (see the left nav drawer as an example), so make sure that one is unique for your new one. Then set left or right for the second parameter to make the drawer start on the appropriate side.\n. Happy to review any PRs that you want to open to fill the gaps. The content guide and other theme requirements were updated not too long ago so haven't been updated here, and are not on our roadmap to update as Slate will be taking Timber's place as our recommended starter kit for building themes.\n. Not just yet, we're still working on a few things and don't have a launch date set.\n. The current setup is only meant to handle one drawer on each the left and right side. In your case when opening a right drawer, both open (based on the js-drawer-open-right class added to <html>).\nWith some finesse in the JS and CSS, you could add an opening class prepended with the ID of the drawer. Instead of adding the generic js-drawer-open-right class (here), add a class with the drawer's ID.\nRemove the styles associated with .js-drawer-open-right .drawer--right - which opens the drawer and instead use the newly created class you used in the JS.\n\nThe inflexibility of these drawers is a common issue and are unlikely to be further supported.\n. Check out the Ajax Cart Callback title in the docs http://shopify.github.io/Timber/#ajax-cart\n. ajaxifyShopify should be ajaxCart. The rest of the code looks good. What's your shop URL?\n. Ah, you're working off of Supply which uses an older version of Timber.\nIn ajaxify.js.liquid find the buildCart method. At the very bottom (below cartInit = true), add $body.trigger('ajaxifyShopify.afterCartLoad', cart);\nThat way the event listener from your code snippet above will work, but use ajaxifyShopify instead of the ajaxCart I said earlier.\n. Didn't realized useCartTemplate was true. Move $body.trigger('ajaxifyShopify.afterCartLoad', cart); to after cartTemplate(cart); and before return (line 757).\nClosing this as it's not an issue with the framework.\n. Perfect. \ud83d\udea2 \n. This happens in every single project I work on, without fail. Thanks.\n. Hey Shoshanna, I wouldn't recommend using a fixed header with a drawer pattern. We've tried it a few times in themes \u2014 even on Shopify.com for a while \u2014 but it caused quite a few headaches trying to get right. Browsers and mobile devices have a tough time with it, the main issue being translating/shifting a fixed element because they are relative to the window.\nMy suggestion would be to turn off the PageContainer translation and simply have the drawer overlap the page content. That way you don't have to try and move the fixed header at the same time. The performance will be smoother and you'll have less trouble getting the fixed header to stay visible.\nYour approach is on the right track though if you do choose to go down this route. You have to move both elements themselves, although differently in the CSS. The PageContainer wrapper an use translate while the fixed header will need to update it's left position, as you can't translate a fixed element with much success. \n. Yup, it looks like those are no longer active yet still show up as available methods in Shopify source. I'll ask around about getting the legacy payment methods fully removed, then update the icon set again once they are.\n. For those that couldn't see the private link above, it was about icon alignment \u2014 specifically with Instagram and Google+. I went through and updated every icon we have to be better aligned and sized.\n\n. money_without_currency will still return the symbol, just not CAD or USD. The docs are a bit confusing - I'll get them updated.\nInstead, you can use content=\"{{ current_variant.price | divided_by: 100 }}\"\ncc @carolineschnapp \n. I may have spoke too soon, hold tight.\n. The problem arises with changing the money format to amount_with_comma_separator. It causes an error in Google structured data testing tool:\n\nInstead, we should use content=\"{{ current_variant.price | divided_by: 100.00 }}. This works with any money format and maintains the decimals.\nAny objections @stevebosworth @m-ux @carolineschnapp?\n. We're in the clear there.\nIf you have say $199.99 defined in CAD or USD then switch to SEK, it's rounded to SEK but still stored as the decimal value. Best explained below:\n\nThat means {{ product.price | divided_by: 100.00 }} would still give you 199.99.\nIf you update the price to 200 even, then {{ product.price | divided_by: 100.00 }} would be 200.0, which is valid to Google:\n\nTo answer your initial question, yes, 200 SEK is 20000 with {{ product.price }}\n. Thanks!\n. Nope, those are the right steps. Make sure you also uploaded all the font files \u2014\u00a0there are four of them. The font names should be icons.svg, icons.ttf, icons.woff, and icons.eot. \nAre the other icons showing on the page?\n. Do you have a demo shop I can look at?\nThe JS won't disable the options in the select, but rather disable the \"Add to cart\" button. See this example http://timber-demo.myshopify.com/products/rattle-indigo-mens-tee?variant=780880205\n. You can certainly swap things out for Caroline's version with no issues. The alternative is to leave the JS as is, but disable the part that tells the drawer to open up.\nRight now, when you open the drawer or add a product from the product page, the same function runs - this one. You'll still want that to run when the drawer is opened from the 'cart' button in the top right, so we'll have to go a slightly different route.\nOn line 264 of ajax-cart.js, change ShopifyAPI.getCart(cartUpdateCallback); to ShopifyAPI.getCart(productAddedCallback);.\nThen create a new function below that like this:\nproductAddedCallback = function (cart) {\n  // Update quantity and price\n  updateCountPrice(cart);\n};\nThis makes sure the cart details are updated (cost and number of items), but doesn't build the cart which in turn would open the drawer. If you try this as is, you'll have a JS error, as the last thing you need to do is add productAddedCallback to line 180. This is needed because the file uses 'use strict';.\n. Not sure the changes to heading tags are needed in most of these cases. They should reflect the importance of the header on the page, meaning an h2 is the second most important thing. \"Recent articles\" and \"Blog categories\" in the sidebar don't fit that, for example.\n. Looks good to me. \ud83d\udea2 anytime \n. Feel free to reopen if you need more feedback.\n. This isn't related to the framework so am closing this issue. Feel free to continue the discussion here or in our forums. \n. \ud83d\udc4d \n. \ud83d\udc4d \n. ajaxify.js was the earliest version we wrote for Timber. When it was updated we renamed the file to ajax-cart.js so we could quickly see it was the 'new' version. The updates you made in the themes (private repo to any of you reading) look good too.\n. \ud83d\udc4d \n. \ud83d\udc4d \n. You're right.. and I gave it two \ud83d\udc4d .. I'll open a fix right now\n. Can you update that link, it's not Timber anymore\n. I opened your Timber demo link in Chrome and the videos played fine. No JS errors or anything. Where can we recreate the problem?\n. My assumption here is that since the JS file hasn't changed it's using an old cached version. As soon as you make a change to that file the values should update.\n. If you add a few extra lines in the JS file and save it you should be good to go as the CDN will serve up the new version.\n. Yup, great idea to move them outside of the main JS bundle to avoid this error. We've started doing the same for an JS-used variables in our new themes too. Best of luck on finishing off the new theme.\n. Thanks for catching. I'll get it updated.\n. Do you have a link to a shop where we can see the issue? What browser(s) did it happen in?\nAdding !important styles like this isn't ideal.\n. \ud83d\udc4d \n. Yes you certainly can, though it's not a part of Timber by default. I would suggest Slick slider for this type of functionality.\n. This is fixed in Canary already so really hoping it's a temporary bug. Removing line-height is the easiest fix, though you can also set a fixed height if the design requires it.\nGoing to leave this issue open and expect Chrome to fix this itself very shortly.\n. We've updated this on some of our other themes and used divided_by: 100.00 \u2014 specifying the decimals will tell it what to round to. Using remove isn't usually a great fix because of how many different currency types there are.\n. Thanks for the PR and the update. \ud83d\udc4d \n. This repo is specifically for the Timber framework, which doesn't sound like part of your issue. Please reach out to Shopify Support\n. Tested and works well. Thank.\n. contact[email] and contact[body] aren't references to the customer name or their message, but rather what the fields are named when the form is submitted. If you change these, the form won't submit properly.\n. Not sure you meant to open this PR here since nothing actually changed. Closing.\n. Great catch on this. Thanks for the PR\n. No, this is not baked into Timber. It looks like that shop uses the code for embedding an iframe as the thumbnail's alt text then uses JS to insert it. Definitely a cool effect for product pages\n. I think you're looking for original_price. Very strange. I'm looking into it and will get back to you when I know more.. Looks like this is the expected behaviour. compare_at_price is not returned in the Liquid line_item (part of the cart object) either - source.\nWhat use case do you have to show off the compare at price in the cart?. That's the only use case I was thinking of too. It would certainly add confusion though when you add in cart discounts. With that, you'd have your original price (compare_at_price), price of the product (price), and then the discounted price (discounted_price). . Thanks for helping me learn more about cart discounts!. Sweet thanks \ud83d\udc4d . These lines in layout/theme.liquid are what open the drawer after a product is added. Remove or comment them out and you should be set.. Can't say this is related to Timber (it only has one version included) so am going to close the comment.\nThat said, you shouldn't need or want three versions. I can't speak to the differences between the versions specifically but you should investigate why they're included \u2014 is an app including its own version, is it included in the theme code multiple times, etc \u2014 and ideally stick to one.. Your code should look like {{ 'general.dvtdefault.header' | t }} \u2014 not the t filter that requests the translatable string. Ideally the text in en.default.json is three levels deep, but should work if only two as well.. I'd suggest putting it under general. It works better in the language editor if anyone decides to change it. Otherwise, you can still use {{ 'dvtdefault.header' | t }}. The only way I've attempted to do this is with ajax via load:\nvar productDiv = productUrl (from href or data attribute) + product div (like `.product-wrapper`)\n$('#Modal').load(productDiv, function(data) {\n  // do stuff\n});. Since this isn't a bug with Timber I'm going to close the issue. I'd recommend creating a post in our design forums for help with a request like this.. @NathanPJF are you able to triage this in core?. Spelling is not my strong suit. Thanks for catching.\n. No need for case 0, if it's not 1 it will go to the default. Remove that and I'll add it in to master. Thanks for the addition.\n. The first + isn't required here. The rest looks good.\n. @mpiotrowicz @richgilbank \nThoughts on this structure for Timber's JS file? Before it was simply a docready call, but I'd prefer to push toward some kind of structure.\n. Yup, just sets the border as transparent to get ready for a CSS transition so it can be ignored for IE8.\n. @mpiotrowicz @richgilbank \nLooks like I lost the line comment after my update, but appreciate the notes. Rich, I assume this is what you meant by splitting the methods up?\nCached elements are more aptly named. Will consider moving other selectors up there too, though I sometimes prefer keeping the relevant ones with their methods.. just preference there.\n. That looks great in JS, but weird in a stylesheet. I'm not sold (for no good reason), but can make the change.\n. @carolineschnapp @fredryk Do the payment types in the if statements look right to you? Not sure where our official list is to check against.\n. Perfect, thanks!\n. Using the icon font allows for flexibility when defining colour, similar to the social icons. Forgot about using case in liquid, I'll switch to using that.\n. On second thought, it makes more sense to define the icons in css with content to keep the generic characters out of the markup.\n. @tobi @mpiotrowicz Moved to a much simpler icon approach with text fallback when font-face isn't supported.\n. @graygilmore Agreed, just tested all three ways and only != blank and size > 0 methods work. Do we use one more often than the other in other themes?\n. I wouldn't say common, though I'm also not very familiar with similar languages. humanize has a nice ring to it though.\n. I'm in favour of giving more flexibility to designers/devs so they can create a coherent experience across all pages, rather than being handcuffed to styling untouchable markup.\nIt goes toward our own flexibility as well. If we fear changes to the markup because of potential breaking changes for our merchants, we'll be less motivated to improve the layouts.\n. @mpiotrowicz Thoughts on this approach for the logo? h1 on the home page, div otherwise. \n. @oksushi can you update this to only use div? It'll reduce code complexity and have very little downside (if any) to SEO and accessibility. The updates to the blog articles look good.\n. Keyboard navigation is on tap for today. Looking at this as a reference, but anything with a bit less JS would be ideal - http://staff.washington.edu/tft/tests/menus/html5/\n. Meta-cache indeed!\n. @mpiotrowicz Should I just extend h1 from .h1 (and so on), rather than duplicate up the selectors here and below? \n. Am I the devil if I keep those extends on one line?\n.h1 { @extend h1; }\n.h2 { @extend h2; }\n.h3 { @extend h3; }\n.h4 { @extend h4; }\n.h5 { @extend h5; }\n.h6 { @extend h6; }\nIt goes against the styleguide, but it's so pretty.\n. This is actually the default gift card template that gets generated for you. It styles everything with IDs from a global asset.\nI'm thinking I'll strip out the global asset and put the styles into timber.scss.liquid as a new section. This will let us have control over almost all naming conventions on the page.\n. Already using a pseudo element on the parent so not sure how else to go about this. I could use another wrapping element, but that's just as cumbersome.\n. Technically I should put a check here against the three valid methods, but the only time someone uses this parameter will be from a direct link. Probably not necessary.\n. Victory! We removed the initial pseudo element so converted both corners to ones instead of having empty elements.\n. This is just for Timber. The global templates could use a discussion, but the impact on live stores makes changes pretty difficult. @vernalkick may be able shed light on what it takes to for updating global assets.\n. Similar to other features and templates in that they are updated here if needed.\n. I'm treating that as it's own element, rather than a strict child. Doubt it would be reused, but as it is now it could be.\n. Great, thanks for the notes too.\n. Ah yes I see what you're saying. I probably will go with giftcard__code then, just to avoid any confusion or over-naming things.\n. My concern with having one label element (for quantity) and two spans (price and total) for those mini labels is that labels could be defined with new styles and it would only affect one of the three.\nOption would be to have .cart-mini-labels extend labels? Or force them all to have similar styles that would overwrite the label defaults.\n. Actually I like the idea of productCache or something. That way I could move the initializing JS back to the product template instead of theme.liquid. On it.\n. @mpiotrowicz Moved them to a new function. Now this function is called at the beginning of timber.productJS, which lets us move the initializing JS back to product.liquid.\n. Nope, they could be inside. Thought that went against our styleguide though. It would actually be my preference in this case.\n. Hah that's already irked me too. Thinking of a better name now.\n. I must be thinking of something else I read, not the guide. Apologies for the confusion.\n. !important is used because placeholder text colour changes for error states. I was testing this out on a dark theme, so it made the placeholder error text the most visible (and seemingly filled in) text on the page. To keep the error state as is, remove !important.\nErrors already have their own borders, error message, and arrow notifying them so this should be a fine compromise.\n. I'm no French wiz, but I think this is the same as English. Any helpers?\n. Does this need to be named _html if no markup is being used in the string?\n. :+1: \n. @carolineschnapp I'm removing this as it's not called anywhere. It's been too long since I included it so I can't remember, but do you know where/when this function would be used elsewhere (not necessarily Timber-related)?\n. Yea good call.\n. Doesn't that seem redundant? I'm thinking js-qty__num and js-qty__adjust are obvious enough what they do, within their context.\n. :+1: \n. Good call. This was getting a little annoying during testing.\n. Above line sets the checkbox with a pre-defined ID, so this label can't use upper camel.\n. :+1: \n. This is a superfluous icon, really. There already is text beside it, so if it loads, great, if not, not a problem.\n\n. It could be placed outside, but I've always been putting them inside (example). Seems to work either way.\n. @jonasll Could I get a translation for \"Grid View\" and \"List View\" please.\n. Ah I see what you mean. Yea, if there is no fallback the wrapper can be\nremoved. The default .icon:before is hidden unless icon fonts are\nsupported. Please open a new issue and I can revisit this.\nOn Wed, Dec 3, 2014 at 9:41 AM, Monika Piotrowicz notifications@github.com\nwrote:\n\nIn layout/theme.liquid:\n\n@@ -104,6 +104,9 @@\n               - Documentation:  http://shopify.com/timber#ajax-cart\n           {% endcomment %}\n           \n-            \n\nah ok, with the comment below as well i see how this is organized. If\nthere's no fallback text required, just wondering if it needs to be wrapped\nin that element at all? I can open a separate issue elsewhere\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/284/files#r21234684.\n\n\nCarson Shold\nFront End Web Developer\n. Thoughts on this approach? This is called from login.liquid before timber.init() so the cached selectors won't exist yet. This checks if they exist (which we assume they don't) and gets them ready.\n. The id? My first thought was this form was auto-generated so it can't be changed. Doesn't look like the case though, so let me double check it works as planned with a different ID.\n. The forms have their IDs generated. The recover password field already have a wrapper div that handled the show/hide, so I've updated the login form to do the same. ID syntax unite!\n. How's this? http://steve-dev.myshopify.com/blogs/news/15892843-first-post?comment=1219083239#Comments\nIt adds a tabindex to the element. Is there a way to keep it from being focused though? I get the classic blue outline and it looks pretty strange.\n. I don't think so. A liquid variable from within the submitted form on the page triggers this.\n. Can you add { } around the if statements. I know they're not needed in this case, but for consistency we try to keep them in there.\n. Take another look at the JS file and this line. I set a global variable inline, and then that is checked in shop.js.\n- Set timber.global object inline (article page for comments and reset password flag)\n  - This can't be a liquid variable instead since they aren't transferred between templates/assets\n- No duplicate calls to cacheSelectors\n- Extend timber.globalVars into timber.global, which may already be set\nAny up/downsides to extending this way? Are the names obvious enough, with a bit of documentation?\nEdit: ignore the above comments. Going with another direction.\n. Up to date example here. Below is what I mean about adding a tabindex to the div.\n\n. Doesn't that run into a similar problem of having all vars on one line during commits, in that adding a longer variable name would have to re-indent all lines? Worth it though eh?\n. timber.globalVars only exists at the top of this file. It is instantly merged into timber.global, which will be used throughout the file. Not sure another way to name them the same thing without risking properties being overwritten.\n. Any reason for going with the span approach rather than title or aria-label on the inputs? With an inner span, any styles on the label element itself will still be applied and affect the layout.\n. forgot to remove it - tried one approach that used options rather than separate JS calls but didn't like it.\n. timber.updateHash = function (hash) {\n  window.location.hash = '#' + hash;\n  $('#' + hash).attr('tabindex', -1).focus();\n};\nKeyboard gets focus on the div but no outline is given. Hitting tab will take the user to the next link or input field, and shift-tab will take them back past this div so it doesn't remain in the tab order.\n. Yup, everything works nicely still. Here's the file if you're curious.\n. It is, though we're going to continue nudging people toward a separate theme JS file rather than directly in shop.js. I'm going to rename it to timber.js so it is more obvious as well.\n. Still the case, but a relatively unhelpful comment here.\n. Didn't mean to include this here, but you're right. I'll update\n. This is only used once, so don't think it needs to be put in a snippet. That folder is getting pretty large as it is. \nSame goes for the other new snippets. Thoughts?\n. Timber follows our internal styleguide, and in it we use PascalCase for IDs. \n. For sure. This was pre-stylguide so thanks for catching.\n. Don't think so. This adds some spacing only if site-header__search follows a set of text links, which is a conditional module.\n. Pulled from marketing assets. It's a class on the html/body tags for handling overflow.\n. This class also is on the html/body elements. They dictate what is happening, so BEM isn't needed.\n. From marketing assets, and isn't a block, element, or modifier. Not sure what the definition of it is actually.\n. This is a step to reduce selector specificity, which I think it accomplishes. It's not perfect, so we'll revisit the reset vs base styles in another PR shortly.\n. Clean cut away from the old version. If bugs pop up around the ajax cart, we'll instantly know if it's v1 or v2.\n. Ah good call, a few are no longer used. Do you think there's any reason to leave ones like Shopify.getProduct and Shopify.addItem in there? They're part of the jQuery API we provide, but not used in the ajax cart.\n. good point. the vast majority of changes are simple removals of functions and options.\n- No more cart sizing (js determined drawer height before)\n- No more scroll to top\n- No more flip/modal/drawer setup (include their handlebar templates)\n- No more dedicated callback function, instead trigger custom ajaxCart.afterCartLoad event\n- You can see cart option changes in doc updates here\n. Encourage, but not make mandatory. It's better than most of the mobile nav solutions we've created so far, but wouldn't fit into every theme's style from my point of view.\n. This just removes the media query around the styles so that elements always use the table layout. Agreed though, will use variation class.\n. You mean to keep the CSS output to a minimum? \n. site-nav--mobile are where the links live that trigger the mobile drawers, mobile-nav is the actual list of elements in the drawer. Thoughts on better names?\n. It gets added to the html/body, so doesn't need to be BEM in my opinion since it's not a modifier of a js-drawer element.\n. They could include the api script itself, but that could cause conflicts here. I should probably rename the Shopify methods to make sure that never happens eh?\n. :+1: \n. One reason is to reduce the need for another HTTP request for the globally hosted api file. The other is for adding functionality to Shopify.addItemFromForm, mainly allowing it to use a form element (evt.target from a submitted form) rather than just an ID, and adding a custom callback if defined.\n. Yea, that's the discrepancy I'd like to avoid. If they include the global api, it'll have conflicts with this. If they expect the ajax cart JS to have it all, but disable the cart, it won't get loaded.\nI'll take a stab at clearing this up in a new PR here.\n. Wow, that's insanely helpful. I generally get the message that a file was renamed, not deleted/added. That obviously didn't translate into this PR. I'll see if I can go back and update that.\n. This commit shows the changes to the same file, but the same isn't shown in the full Files Changed tab. \n. See https://github.com/cshold/Timber/commit/f9c046f83b1572ec4160815c66a5fa43cdddfda3 for the changes between ajax-cart.js and ajaxify.js.\n. :+1: \n. Should definitely have spaces. I'll fix it up.\n. Ah good to know. Any reason to leave just All there, or strip that out too?\n. Good call. I'll go with All for French and Spanish and leave the others intact. Sound good?\n. If responsive tables are default, we'd have to undo all the styles for older IE. This covers all modern browsers since they won't match the :not selector with the least styles defined. Open to suggestions for sure though\n. With respond.js all media queries are processed too. First time it wasn't really wanted.\n. Honestly I thought it would be totally busted in IE8, even with respond.js. This demo proves that wrong. @stevebosworth, can you get a demo shop up with this PR and remove the :not(.lt-ie9) - it may work perfectly already :)\n. Any way/need to add an IE solution to this? I've never really thought about it until now\n. Absolutely, thanks for catching\n. That is smart! @montalvomiguelo are you able to adjust that line and we can merge it in.\n. It's a private Shopify PR so you won't have access to it. Posted it so other Shopifolk would have a reference.\n. Should we add the price right in this string? Some other languages might prefer the price and then savings text?\n. A bit of a nitpick, but can you change this to $(document.body) - it's slightly faster (source).\n. What's the need for this event, rather than just on success? No harm keeping them, but can we update the name so it's more similar to the naming system below \u2014\u00a0beforeUpdateCartNote.ajaxCart\n. Can you revert this name. It's the only breaking change I can see in the PR\n. Scratch that. I'll update the version number differently instead. All good\n. Please update these two lines to the new name afterCartLoad.ajaxCart\n. Last change, switch this to afterGetCart. Realizing the naming issues as I'm writing up some new docs\n. Can remove this. updateQuantity (the function right after this) calls ShopifyAPI.changeItem, which already has triggers fired (before/after/error/complete ChangeItem)\n. Remove this line as well, as per the previous comment.\n. The entire cart reprints, so having the element available won't do much help. Open to a rebuttal though.\n. Does $priceA11y never get turned back to aria-hidden=\"true\"?\n. If it's never aria-hidden=true you don't have to set the attribute at all. Unset is the same as \"false\"\n. Hm, with the form wrapped around this we'll always have the element visible on the page (though empty). I can't think of another way (without JS) so as long as this doesn't effect the layout, \ud83d\udc4d \n. Indent level please \ud83d\udc6e \n. You working on a typewriter? Double space after periods in a few of these .md files. :trollface: . ",
    "carolineschnapp": "@carsonb Hey Carson! @csaunders  took care of removing the bogus gateway from shop.enabled_payment_types (instead of adding a SVG icon for it). This may not be deployed just yet but will be soon. The Bogus Gateway was (may still untill deploy) produce a broken image in the footer.\n. @carsonb  Oops sorry. Yet another 'group' of people at Shopify sharing the same name.\n. Fixed! Thanks @cshold !\n. CC @cshold \n. Okay we're good now!\n. By alignment I mean the button's height is not the same as the input field's.\n. :thumbsup: I like that.\n. @cshold a few changes. Let me know if you have any questions, comments, disagreements, etc.\n. Actually, it occurred to me that by the time the JS toggles the class, it's still too late to fix the flash of content. In practice, we always hide the default select using CSS (I will come to the reasons below) \u2014 we do that in our own themes. We don't wait around for JavaScript to run to hide it.\nHowever, I can see why Timber, as a framework, should emphasize usability \u2014 it is more important to have the add to cart form function without JavaScript, so it's wise to reveal the default select to those odd folks that don't have JavaScript enabled.\nHow about this...\n- add .hidden class to default select, and...\n- use that CSS: .no-js  #productSelect { display: block !important; } to override.\nReasons why we try and fix the flash of content\nThe default select shows pricing information, and a lot of merchants think that something is actually broken when they see prices in the drop-down come and go, as option_selection.js runs.\nThe flash of content happens even with a really fast connection, a good machine and a great browser. I see it all the time using a MacBook Pro latest generation with cable Internet and Google Chrome.\n. It's indeed strange.\nYou cannot stay within a collection, or a product type, when looking at items from a vendor.\nIn the same way, you cannot stay within a collection, or vendor, when looking at items of a product.type.\nIt would seem that Shopify would give you a way to 'drill down' because of collection.all_vendors and collection.all_types but it really doesn't. \n. I agree!\nOn Tue, May 20, 2014 at 9:44 AM, Carson Shold notifications@github.comwrote:\n\nI think it's handy to have this code in there for reference, as long as\nthe comments make it clear of its limitations and actual functionality.\nI'll make some slight modifications and merge it in.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/Timber/pull/69#issuecomment-43626944\n.\n. > You can filter by multiple tags, but only a single type or vendor at a time.\n\nYou cannot actually filter by type or vendor, not the way you filter with a product tag. If you select a vendor, or type, you'll jump out of the collection you are looking at, and go to a special collection page, an automatic one. When you filter with a tag, you do filter: you stay within the current collection and look at products in it that have a specific tag.\nAlso, you would not want to filter \u2014 if you could \u2014 using more than 1 type or 1 vendor \u2014 because a product can only have 1 type and 1 vendor. Filtering in Shopify when using tags uses an exclusive AND, not an inclusive OR.\nNot sure how to properly relay that information ^ but it's important to mention.\nRegarding this:\n{{ tag | link_to_add_tag: tag }}\nFiltering with more than 1 tag may seem like a good idea, but 99% of customers don't like that. They end up quickly with a page with no products because of the exclusive AND business. Over the years, all themes have been modified to not use  link_to_add_tag. This is FYI only. The choice is yours. You may want to add a comment about the alternate.\n. That is wonderful!\n. > If all products with a type are hidden, it still shows up in the for type in collections.all_types list.\nThat's a bug with Shopify. We fixed that, it comes back, we fix it again.\nProducts that are hidden, need to update our cached list of types and vendors for the collection.\nYou need to open an issue in shopify repo, if you are able to reproduce this.\nHidden products should behave as if there are not even in the store.\n. That's right, it can take a little while... still is pretty bad but may not\nbe worth creating a ticket for in 'shopify'.\nWe get many tickets in support about this. Oh well. Same with tags: tags\nstill being listed for deleted or hidden products.\n\u00af(\u30c4)/\u00af\nOn Fri, Jul 25, 2014 at 3:23 PM, Carson Shold notifications@github.com\nwrote:\n\nWeird, I could recreate it an hour ago, but not now. Maybe the cached list\nwas just a bit delayed? Closing this for now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/157#issuecomment-50193507.\n. I think that would be brilliant ^.\nSeriously, I do get that often enough that people want to preview the other 2 methods.\nIt's all about 'demo this' and 'demo that' these days.\n. If you did a 'find in project' for the string img_url you won't have missed any, all deprecated tags end with that. None looks missing to me. Sorry I thought  had responded to that one.\n. @christopherlobay are you referring to timber.switchImage?\n\nWhen we, design gurus, reviewed themes for variant images, we noticed that the best designers (Clean Themes, Out of the Sandbox, Pixel Union) all moved the image swapping to their theme JavaScript file. Timber is not doing anything Timber-like here, it's just a real-world theme, that a) applies the DRY principle, and b) puts as much JavaScript it can in its theme's JS file (separation of CSS / JS / HTML). Thumbnails when clicked update the main image, a very common pattern, and that requires the same JS treatment as the variant image swap. Actually a lot of good designers who deal with Shopify even move their selectCallback function to their JavaScript file.\nI agree this needs to remain simple, but I think what Timber is doing is simple enough and clear enough. \n. #### A few suggestions when making themes translatable\n1. Leave HTML markup out of the translation as much as possible, particularly presentational HTML. See this: https://github.com/Shopify/Timber/commit/591395a1112a8299cf1a77b9bdc0cf79a5d4a76d ( Here I am not saying \u201cdon't use html keys\u201d, I am just saying we should see as little markup as possible on the Translation page in the admin. The HTML is still there, we are not removing any of it, it's just moved over  from the locale file to the Liquid template, the HTML becomes hidden behind the placeholders {{ x }}. Looking at this commit will make things clear: https://github.com/Shopify/Timber/commit/591395a1112a8299cf1a77b9bdc0cf79a5d4a76d. )\n2. Translate whole phrases. Don't be afraid of passing one or more placeholders to a translation. See this: https://github.com/Shopify/Timber/commit/b15d436c813d207007cc1b5d47933a987c55d7b0 This will give translator more freedom. Some languages have a very peculiar syntax (compared to what we are familiar with), where the sentence ends with the predicate, or modifiers follow what they modify.\n3. Don't translate words like \u201cby\u201d, \u201con\u201d, \u201cfor\u201d, by themselves, out of their context. ( The only exception I can think of may be \u201cor\u201d when it is the equivalent of a pipeline, in the context when two stand-alone things are on either side and those can be swapped, like '[LOGIN]' or '[CREATE AN ACCOUNT]. But don't translate \u201cor\u201d on its own when used in such contexts as 'I love apples or bananas. Give me one or the other'.\n4. In JavaScript, use the json filter to escape your translation (in case a translator adds quotes to the translation). See this: https://github.com/Shopify/Timber/commit/76b27e3e660d6eb14d5a41f76dfddb21a2600fc0 and that: https://github.com/Shopify/Timber/commit/3c10aa08332e65b2fd72685ec1f6e86bb95ea8cb\n. @mpiotrowicz Do you know who to show these enhancements to, so that we can improve on the default gift card template that we generate?\n. PS. Please test this quickly. Or ask me to. All the way: using a non-English translation, use the contact form. See what you receive as the merchant. I did when I implemented this in other themes, but did some copy and paste of code here, and so I am second-guessing myself.\n. Let _me test, I will report back. Uploading this branch to a sandbox... I know you won't be in next week @cshold Least I can do. So please wait.\n. Ahhh I see. I have removed that.\nAlmost done testing other stuff.\n. Ran into this while testing, when submitting the contact form:\ntranslation missing: en.contact.post_success\n. Fixed that.\n. Really fixed now.\nExcept I can't apply the French translation in Timber, it contains 'invalid characters' according to our admin. \nI will run its JSON to a validator...\n. For some reason, the fr translation of Timber cannot be applied to my store now. No idea why. When I go into fr-CA.json file and add a space and save it, there's no report of error. But when I switch to it, I get 'invalid characters in the JSON' complaint. And so I just edited my English translation...\nMy name attributes changes take:\n\n. Ready to be merged. Contains a bug fix.\n. ( Seems like I was being anal here because we can't control in what language those strings appear in the email: \"Contact Form Submission\", \"Email\" and \"Body\" anyway. But hey, it's a step. )\n. I think the best way to address this is not in the theme, but by Shopify. Shopify decides what to use as canonical URL since themes use this in their head:\n<link rel=\"canonical\" href=\"{{ canonical_url }}\" />\nSo on a collection page with URL .../collections/handle?view=list, Shopify could set as canonical URL .../collections/handle. \nThe canonical URL tells the search engine: \u201cPlease, have a look at this canonical URL. If it's different than the current URL, please don't index the current one, please go away and index the canonical one.\u201d\nLet's see if we can have this addressed by Shopify, and not by throwing some more code at Timber...?\n. I realize I was being stupid, the mixin can also accept pixel values, not just variables.\nMy eyes were seeing this:\nOptions: $min-width, $max-width, or null\nI realized as soon as I had created the issue.\nAny chance you can add a coding example, though?\n. To myself: \"No, Caroline, you're dumber than dumber.\"\nThe $constraint tells us how to use the second argument. It cannot be a width value in pixels.\nIt appears I have no idea how to use that mixin at all.\nI will go read the code again.\n. Okay let's say I use this:\nheader .social-icons { \n  margin: 30px 0 0 0;\n  @include at-query(min-width, $small) { \n    margin: 15px 0 -20px 0;\n  } \n}\nI want the margin to be like this on tablet and big enough screens:\nmargin: 15px 0 -20px 0;\nAnd like that on mobile phones:\nmargin: 30px 0 0 0;\nMy code does not work.\nWhat code should I use?\n. I can't figure out the mixin, so I am using this for now, which works:\nheader .social-icons { \n  margin: 30px 0 0 0;\n  @media screen and (min-width: $small) {\n    margin: 15px 0 -20px 0;\n  } \n}\n. Oh my. Thanks so much!\n. It's a bit tricky to implement a behavior that goes the other way around (*), I do have some code that I give out to merchants when they asked, and there are a lot of lines of code: https://gist.github.com/carolineschnapp/c4ec6121c7741347e667 \nI get that asked by 2 out of 3 merchants when I update their theme to support variant images. Most of those who ask expect the behavior @pauldpritchard describes. For them, it's not a nice thing to have, it's a must-have.\n( * ) If there is a one-to-one relationship between a variant and its featured image, the relationship is not one-to-one the other way around. One image can be used by several variants. And that complicates things... Say I sell a T-shirt that comes in different sizes and colors. For any given color, I will re-use the same image for Small, Medium and Large. ( Differences in sizes don't need to be illustrated ). And, say, the shopper selects the size Medium in the Size drop-down, and he goes and clicks on the Yellow thumbnail. He doesn't want the Size drop-down to change from Medium to Small.  He just wants the Color drop-down to update to Yellow. He wants the Size drop-down to keep its previously selected size. That's one reason why there is a lot of code here. The other reason is that I needed a ready-baked snippet that merchants can paste inside their product.liquid template, without knowing anything about HTML. \nConclusion: since this is a popular request, maybe Timber can have code in place to activate the behavior to go both ways, but that would need to be toggled on via a theme setting. Then Timber could use clean code, and not what I show here.\n. You will need to contact Pixel Union about this @nisha0123 The piece of code I provide may or may not work for you depending on your theme's HTML. You theme does not use the Timber framework.\n. The decision has been made to not include this feature in any Shopify theme for now @addedlovely. It's not impossible that this changes in the future. \nIt's unfortunate this issue here attracts comments from people who are not using the Timber framework, it's my fault, I should not have added a link to a non-Timber snippet here.\n. With the help of a designer or developer, rest assured that almost everything is possible in Shopify, so this function can surely be added to your theme. I am not able to tell you if my code snippet will work 'as is' in your theme or not, though. \nThis issue is about Timber, so I would invite you again to reach out to Pixel Union who supports your theme. You can also post your questions in the Shopify forums in the Design category: https://ecommerce.shopify.com/c/ecommerce-design \nThanks for keeping this on-topic @nisha0123 ! Just so that you know every time you post a comment here, everyone who's contributed to this issue gets a notification.\n. CC @Shopify/design-gurus @jonasll @kevinfinlayson \n. Just to be clear, Ricky, the author's name is still in bold after this commit, the HTML is the same, it just moved from the locale file to the template. It is hidden behind {{ author }}:\n{% capture author %}<strong>{{ comment.author }}</strong>{% endcapture %}\n... but I hear what you're saying, @suture.\n. Thanks guys! :)\n. This was merged into i18n branch instead of master.\nCan we fix the master branch?\n. Looks perfect to me :+1: \n. So onboarding text will always be in English, not translatable?\n. This is a work of art. Every detail could not make me more happy. Totally nailed it. I can't comment on spanish / german / portuguese translations, but every other line of code is A+ :+1: :100: \n\nSpecific (number) format is used for time's datetime attribute as it should be search engine friendly, not language dependant.\n\nOh yeah, totally.\n. Oops, there is something @cshold \nenableQtySelectors\nI had a case of the dumb.\nA global switch such as this one, that enables / disables in both cart and on product pages is mighty fine.\nNever mind me, and I am really sorry!\n. I think app developers needed the custom event. Good-citizen apps that perform actions on the cart \u201cpage\u201d \u2014 and there are many of those \u2014 are encouraged to use the script_tag API. This means when the app is installed, an externally-hosted JavaScript file is loaded, and when same app is removed, that JS file is no longer loaded. Based on the need to run JavaScript independently from a theme's files \u2014 without modifying a theme's files, the custom event thing gets a +1.  Otherwise you need a lot of code to behave responsibly in your own JavaScript \u2014 you cannot undermine what other people may be doing:\njavascript\nif (typeof afterCartLoad === 'undefined') {\n  var afterCartLoad = function(data) {\n    /* Do something */\n  }\n}\nelse {\n  var original_afterCartLoad = window.afterCartLoad;\n  var afterCartLoad = function(data) {\n    original_afterCartLoad(data);\n    /* Do something */\n  };\n}\nThere are also my own \u201cselfish\u201d reasons: a dozen tutorials in our docs that will be easily revamped to work with all of our newer themes.\nI am scared I may have swayed you in a wrong direction, though @cshold , I am no JavaScript developer, so I am curious what others may think of this.\nCC @Shopify/design-gurus\n. Can you hold off on this a bit?\nI can't get multiple currencies to work in your demo theme.\n. ( My demo shop: http://trantow-goldner4191.myshopify.com/?preview_theme_id=10400877 )\nSomething is off with how money formats are formatted in the cart drawer, any HTML contained within is escaped.\n. \nYou do use .html() when inserting money amounts in the DOM, and your money format is correctly set here:\njavascript\nmoneyFormat: {{ shop.money_format | json }}\nAre you using the Handlebar template in your demo shop?\n. Nah that's fine. Can you use triple curlies then around the price?\n{{{ price }}}\n. Beautiful! Thank you so much!\n. .... and that fixed it. I am able to implement multiples currencies the same way I always have, except I add this code to my code, and voil\u00e0:\njavascript\njQuery('body').on('ajaxCart.afterCartLoad', function(evt, cart) {\n  Currency.convertAll(shopCurrency, jQuery('[name=currencies]').val());\n});\n. Really happy with this! :currency_exchange: :cake: :grey_exclamation: :fireworks:\n. Only on the product page, should we 'fix' this. The code adds a placeholder, it needs to be there if there is any suspicion that a variant has a compare at price greater than its price. There's always the risk of adding the placeholder even if no variant needs it, but that's no big deal. If you really don't want to add it when it is not needed, you need to loop through all variants:\n``` liquid\n{% assign need_placeholder_for_compare_at_price = false %}\n{% for variant in product.variants %}\n  {% if variant.compare_at_price > variant.price %}\n    {% assign need_placeholder_for_compare_at_price = true %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n{% if need_placeholder_for_compare_at_price %}\n{{ product.selected_or_first_available_variant.compare_at_price | money }}\n{% endif %}\n```\nCollection pages are another story.  Usually the price_min is associated to a variant that also has the product's compare_at_price_min, so using price/price_min and compare_at_price/compare_at_price_min makes sense. If you use a price of one variant with the compare at price of another, merchants feel they are being dishonest.\nDo I make any sense?\n. Thank you Carson! \nCC @NathanPJF :)\n. I am in total agreement with the general rule proposed here, and the listed of exceptions provided.\n. Eventually we could make a case that {{ content_for_header }} already contain Open graph tags and Twitter rich snippets, since the likelihood of a merchant editing those files is very low.\n. Another situation where snippets are needed now is when you have theme settings that let you populate a sidebar or a homepage with \u201cwidgets\u201d in the order that you want. \nLike we do in the Solo theme. Perhaps there's another way to handle that fine-grained control that we obtain with snippets then.\nSolo's index template contains this:\n{% if settings.home_section_1 != blank %}\n  {% include settings.home_section_1 %}\n{% endif %}\n. Sorry, not the right place for sure.\n. This adds some welcomed smarts to a function that isn't as intuitive as it could be. \nI can't comment on the actual code edit, I am not an experienced Sassy coder, but I like that we can call the function with a min and max values. :+1: \n. @cshold what do you think?\n. ( Homepage has been used to refer to the main page of a website, rather than 'Home page', as early as July 1993. )\n. Thanks guys, I appreciate!\n. A {% if item.price %} is nested inside an {% if item.featured_image %} so the logic seems flawed. If you have a featured_image for sure you have a price.\n. Oh right I am so sorry: http://take.ms/WYFoe Would you like me to test all this in a sandbox? I can do that if you give me one more hour. Thanks for using a better check for the presence of a product result. We have dropped so many requirements for a product to be a product :) No need for type / vendor / description...\n. When showing the description or content, there's often an indentation:\n\nI think that issue may be with our Liquid filters, OR RTE. I ran into this issue before and can't remember for the life of me what I did to get rid of the space. You, I, will also see that when showing a stripped, truncated article content. No amount of | remove: '&nbsp;' or | trimgets rid of that white space at the beginning.\n. Must be, yes. I will dig from its grave a Github issue I once created for this.\nMoving on!\n. :ship: :ship: :ship: \n. No, that covers it completely.\n. https://docs.shopify.com/manual/configuration/store-customization/page-specific/password-page/can-i-customize-my-password-page\n. @suture \n\nAlso in blog.liquid you need to update the Comments link (in the meta data) which has the old hash #Comments\n\nGood one, thanks so much! We'll fix that.\nWe fixed #comment-form to #comment_form in the above comment. \n. > Are there any cases where customer_accounts_optional would be used?\nMost cases \u2014 setting accounts to be required is a subpar solution. With accounts being optional, you can:\n- Check out without creating a customer account \u2014 you can check out as a guest.\n- While checking out as a guest, you're given the opportunity to create an account anyway, and that's super easy: you check a box at checkout, and then you'll be emailed an account activation link where the only step left for you to create an account is provide a password:\n\n- While checking out as a guest, you're given one last opportunity to log in on the first page of the checkout:\n \nIt's actually more difficult to enumerate cases where you'd prefer customer accounts to be required:\n- You want to limit purchases to 1 or 2 per account. Shoppers can always create multiple accounts using different email addresses, but it hinders that.\nWith required accounts, you stumble on a login screen when checking out as a guest. If you don't have an account, you need to go ahead and create one at /account/register and there's no automatic redirect to the checkout when you are done with that. By the time you're done, you've had plenty of time to change your mind about going through with the order.\n. :tophat: It's good to merge, Carson!\n. :tophat: \n. This pull request isn't related to discount codes as you know them. It is to support automated cart savings which are only available to Plus merchants who use Shopify Scripts: https://www.shopify.com/enterprise/98548614-introducing-shopify-scripts-checkout-api-a-giant-leap-forward-for-hosted-ecommerce.\n. @carsonb  You can check against the filenames here: https://github.com/Shopify/shopify/tree/master/public/global/payment_types\nThere's an exact match between the names of the payment type and what we use in the SVG filenames.\nThat's an indirect method of finding this out. As for the direct method, the actual Liquid file, I am not sure where it is, sorry!\n. @mpiotrowicz can you have a look at the default customer account templates Shopify generates? https://github.com/Shopify/shopify/tree/master/db/default_asset_values/templates/customers\nWe don't want to stray from that too much. We would much more improve things at the source.\nIdeally, a theme will not even provide any customer account templates, just CSS for them. The customer account templates are optional in the theme. And not having them present does not mean that they are not used, it just means they are not physically present in the theme ZIP and in the Template Editor, and that markup generated by Shopify is used. \n. @graygilmore  I prefer  != blank.\nAn empty string will be truthy @Tobi.\n\n. Cela est parfait, mon cher!\n. Yes, I am pretty certain it does. When the placeholder(s) contain(s) any HTML we have to use _html. I remember trying without, and running into escaped HTML because, although the translation itself had no HTML, the placeholder was a link and did have HTML.\n. Yes, you can get rid of that!\n. Can you use triple curlies to allow HTML?\nEven some stores use HTML entities there (in their money formats, by default), which will be escaped. \n. Same idea here, use triple curlies.\n. Coding style question: we do not include spaces in a Liquid output tag when no filters are applied intentionally?\n. We actually got rid of this in our Shopify themes. There are 3 issues with passing the collection title:\n- Grammatical. This will work half the time in French for example, because words have gender there ( same in Spanish ! ). Tous les only works with masculine words.\n- You often end up having a collection which name is 'All Products'. Then you have 'All all products'.\n- To override the automatic /collections/all collection, merchants need to create a collection with handle all and when they do that, they often create a collection which title is All ( to end up with the right handle ) and then you will see All all.\nOn paper this seems like the best idea though! It's just too bad we cannot really make it work. :'(\n. For French it's definitely a show-stopper, so you can safely not reference the passed collection. 50% of times the sentence will read very bad, not just a little bad. So, in French translation use:\n\"all_of_collection\": \"Tout\",\nThat is like All. It is not weird, it just works all the time. Just using this:\n\"all_of_collection\": \"{{ collection }}\",\n... will be confusing imho. How do you un-filter? How do you see all products? What is a sub-category and what is the main category / collection?\n. Yes! Sounds great!\nOn Fri, Mar 20, 2015 at 1:32 PM, Carson Shold notifications@github.com\nwrote:\n\nIn locales/fr.json\nhttps://github.com/Shopify/Timber/pull/375#discussion_r26858962:\n\n@@ -74,6 +74,7 @@\n   },\n   \"collections\": {\n     \"general\": {\n-      \"all_of_collection\": \"Tous les {{ collection }}\",\n\nGood call. I'll go with All for French and Spanish and leave the others\nintact. Sound good?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/375/files#r26858962.\n. This should be removed I think. All Label and Data properties will be ignored by Twitter.\n. \n",
    "carsonb": "I think you mean @cshold :-)\n. ",
    "Chrisedmo": "Very nice - thanks for taking the time to do that. Should speed up my themes!\n. ",
    "terkelg": "I think that's a good idea. We could include a build grunt.js file, which compile into a valid Shopify theme structure. I did this with the Foundation Framework by Zurb.\n. I guess it's a simple Guntfile with https://github.com/gruntjs/grunt-contrib-concat. I can do that in the next week or so.\n. Do you want the grunt file to simply concatenate multiple sass files into one timber.scss.liquid and let Shopify do the rest or do you think it should \u201ccompile\u201d to .css.liquid before it's uploaded?\nI found a hacky solution some time ago to get the SASS compiler to ignore the liquid tags and output a css.liquid file. I'll try to find my old Guntfile tonight. I think I used SASS Interpolation to output the liquid, as was it plain CSS and before that use a find/replace task to automatically add the interpolation tags around the liquid tags.\nHere\u2019s an example from StackOverflow\ncss\n.test {\n    background: url( #{'{{ \"splash-1.jpg\" | asset_url }}'} )\n}\ncompiled to:\ncss\n.test {\n    background: url({{ \"splash-1.jpg\" | asset_url }});\n}\nIt\u2019s the extension is not a problem, you can output to .scss.liquid or .css.liquid withput problems.\n. The best solution is to do the concatenate locally, using tools like Grunt and Gulp. I'm working on this, but I haven't found the perfect solution.\nI wish it were somehow possible to use the scss preprocessor to do the import statements only, and return a concatenated. scss file instead of processed css. The sass @import mechanism extends the CSS @import rule, with some great features like partials, multiple imports and support for imports without file extensions. A lot of frameworks make use of these features.\nhttp://sass-lang.com/documentation/file.SASS_REFERENCE.html#import\nIt could be awesome if it was possible to imitate the scss import mechanism and syntax and use that in a grunt/gulp workflow. \nIn that way you get the best of both worlds. SCSS files with liquid tags, multiple organized files, support for frameworks like Neat, Foundation etc. out the box, and still write perfectly valid SCSS code.\nI tried to imitate the sass import mechanism, but my JS skills are limited. However, I found this great plugin called cssjoin by Suisho \u2013 which is available as a Grunt and Gulp task. \nWe\u2019re almost there, but it doesn\u2019t have support for partials and import statements without file extension \u2013 which we need to support frameworks like Foundation, Bourbon Neat etc. out of the box, without editing all their @import statements. \nSe the issue about sass support here:\nhttps://github.com/suisho/cssjoin/issues/9\nTL;DR\nBy using Gulp/GruntI, I want to preprocess sass, but only do the import statements and return a single concatenated scss/liquid file instead of \u201ccompiled\u201d css. Then upload that, and let Shopify do the scss processing.\n. Thanks @dominikwilkowski. I don't like the \"build\" and \"dev\" directory approach. I think the best approach is to keep the folder structure as close as possible to the Shopify theme structure - but with a few sub-directories inside assets. It's so much faster, since you don't have to copy and process the files every time.\nMy gulpfile.js is located inside my theme directory. From there, it watches for changes.\nMy assets folder contains a \"scss\" subfolder and a main.scss.liquid file with @import statements. When the files changes, the taksrunner process the @import statements (if the scss files was changed), upload the changed files and immediately refreshes the browser with live reload.\nI don't do anything other than scss imports under development.But my gulpfile contains a \"build\" task. This task returns a zip-file with the final theme, compressed images, optimised js, html, auto-prefixing etc. ready for the theme store, or to email the client or whatever you'd like to do with the final build.\nBut the @import is till pretty primitive. I would love if I somehow could mimic the sass import mechanism.\n. yeah, it's not perfect yet. I'm still looking for a way to mimic the SASS @import :smile: \n. I think a 'quick view' feature could be nice touch. It's good UX and often requested by clients. However, It's always hard to decide what to include or not when it comes to frameworks. I haven't used Timber yet, but I'm going to start my first project with it in a week, so I don't have any experience with multiple add to cart buttons yet, but it sounds pretty simple to set up.\n. You're right. I agree, let's keep it simple and un-bloaty.\n. ",
    "dominikwilkowski": ":+1: for this.\nWe are currently using grunt to compile scss from another folder with lots of includes into a style.css.liquid but for this to work we need to use the #{ {{ liquid }}  } hack within our scss...\nAny other ideas are welcome.\nWe were thinking to run the scss files through grunt and automate the wrapping  #{``} before scss runs so the code stays clean and does not cause errors with the scss compiler.\n. @graygilmore: much better idea ;)\nOr as my folks used to say:\n\n\nSometimes you can't see forest 'cause of all those frickn' trees\n. Hey @all\n\n\nWe had a second at work and created a small little grunt file here which is build around timber (although not visibly so).\nThat may help speed things up I hope ;)\n. @terkelg \nWe just put up a sample project with timber here powered by our little grunt project to do just this. Maybe that helps you a bit?\n. awesome. Glad to hear you got it down ;)\n. :+1: \n. Thanks @cshold for the quick merge.\n. :+1: Please add grunt. This can free up all the clutter in the assets folder right now.\nWe had a stab at this too but whatever floats your boat :)\n. Aussies unite :)\n. :+1:\n. ",
    "graygilmore": "@dominikwilkowski \u2013 instead of using Grunt to compile the Sass, simply use it to concatenate your files together and let Shopify do the actual compiling. \n. We've been doing this the ol' JavaScript way by getting users to edit the product image's alt field with the corresponding option that they want to use. For example, if the user wants to match images to color they would enter \"Blue\" as an image's alt tag.\nIs that how you're thinking of changing the images when the customer selects a new variant from the dropdown?\nNever seen this before either, selected_or_first_available_variant \u2013 is that new?\n. Completely agree. Normalize is definitely the way to go and even that is a bit overkill. Using a customized, stripped down version will do the project well.\n. Totally in favour of using Grunt. Our internal skeleton uses it and we don't actually have src and dist directories. Our folder structure looks like this:\n- assets\n- config\n- images\n- layout\n- scripts\n- snippets\n- styles\n- templates\n- - customers\nGruntfile.coffee\npackage.json\nREADME.md\nWe simply have grunt-contrib-concat go from /styles to /assets. We also use Coffeescript and do the same thing, go from /scripts to /assets.\nAs for plugins, our package.json looks like this:\n``` json\n{\n  \"name\": \"theme-name\",\n  \"version\": \"0.0.1\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-coffee-chain\": \"^1.2.5\",\n    \"grunt-contrib-clean\": \"~0.5.0\",\n    \"grunt-contrib-compress\": \"~0.9.1\",\n    \"grunt-contrib-concat\": \"~0.4.0\",\n    \"grunt-contrib-imagemin\": \"^0.7.1\",\n    \"grunt-contrib-sass\": \"~0.7.3\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-notify\": \"~0.3.0\",\n    \"grunt-shopify\": \"~0.5.0\",\n    \"load-grunt-tasks\": \"~0.3.0\"\n  }\n}\n```\nWhile we're now relying on Shopify to do all of our Sass compiling, this unfortunately doesn't work for the Checkout process yet (huge bummer). That's why we're still including grunt-contrib-sass to create a checkout stylesheet with.\n. Forked Timber and Gruntified it: https://github.com/graygilmore/timber-grunt\nI like @dominikwilkowski's approach of just providing the tools. Probably necessary as maintaining a full fork of Timber would be super difficult (looking at you, i18n).\n. @suture \u2013\u00a0you can create a new type of dev shop that has all of the beta features enabled: https://app.shopify.com/services/partners/dev_shops/new_storefront_beta_features\n. Have almost the exact same layout for a current project. I just end up display all of the tds as block elements for the mobile breakpoint.\nTakes you from: http://cl.ly/image/192l2F0i0l2H\nTo: http://cl.ly/image/2f0G162M1I0N\nTook a bit of figuring out, though.\n. No nesting! I can send you a link when I'm back in the office. \n. I think generally we use from when there are multiple prices. So if a product's variants changed the price you'd provide the lowest one and say from $100. I can understand the confusion here since in this particular instance it says from $92.50 right above.\nMaybe instead of saying On Sale from $185 it could say \"On Sale ~~$185~~\"\n. I think these error messages used to exist. We had them in all of our themes but they no longer function. I submitted a ticket about this a while back but never heard back. Might have to double check that it actually went through.\n. Great stuff, @cshold. We went a different way but might just have to tap into some of the things you've done here. \n. The only thing that caused us to not implement this is the fact that you can have some images that aren't tied to a variant at all (detailed product shots) and variants can only have one image (you might have multiple images of each colored shirt, for instance, showing fabric detail).\nThis means that you could have the \"red shirt\" selected and if you click a \"green shirt\" thumbnail that isn't the variant image, nothing will happen. This leads to inconsistencies in the UX which we scrapped.\nThe only scenario in which this works with Shopify is if you have the same amount of images as variants and they are all attached to each other.\n@addedlovely's Carhartt example is great but the first blue color has four variant images, something that Shopify is unable to do at this point in time.\n. Making deadline day really interesting here @kevinfinlayson :grinning: \n. I'm hoping this ends up being a bug. Ordering them alphabetically makes little sense in terms of hierarchy. \n. I'd recommend going back to that first commit and adding the entire node_modules folder to the .gitignore. Developers can simply npm install when they start their project to install all of the dependencies.\n. Should definitely use @wilr's grunt-shopify and could ditch the Gulp inclusion altogether.\n. > ++ to @tylerball's comment about grunt and gulp\nI agree. I still prefer my implementation. I'm going to put together a patch that stops reporting whitelisted files outside of the dirs you've told grunt-shopify to watch.\n. @stevenmichaelthomas haha you're paying for the flight, right?\n. I like the sound of that a lot. Managing the @imports via Grunt has been a pain. Just did a quick check to see if there was a Grunt plugin: https://www.npmjs.org/package/grunt-concat-css\nWe'll definitely be adding that to our internal structure!\n. Follow up: that plugin doesn't do at all what I want it to.\n. Couldn't find one. Going to try writing my own. \n. @stevebosworth @cshold \u2013 I've created a new plugin to suit our very specific needs :smile: https://www.npmjs.org/package/grunt-shopify-sass\nIt still needs some work, right now the main file can't have any Sass in it, imports only, but at least it takes it out of the Gruntfile. Implemented it into a theme we're working on now and all seems swell. Feel free to open up any issues and, of course, any pull request!\n. For what it's worth, we had our themes turned down for not having translatable onboarding text.\n. Looks like this has been taken care of? https://github.com/Shopify/Timber/commit/3ab33cb464f3a8577d70e471587204110f693c85\n. Looks like this issue should be closed.\n. @cshold any thoughts? This is the first thing I do, too. It'd be great if we could have folder structure inside of /snippets, but of course that is well outside the scope of this project.\n. I'd definitely be interested in knowing if customers are using Timber themselves or getting a developer to set it up for them. If a developer sets it up, I'm guessing they're just going to separate into snippets anyways.\nEither way, a good enough reason to close the PR. Would love to hear about any stats you guys learn about, though!\n. @tobi I was under the impression that wouldn't work. We've always been using:\n{% if settings.facebook_link.size > 0 %}\n. We exclusively use size > 0, probably picked it up from @carolineschnapp.\n. ",
    "heymoxie": "Cheers!\n. ",
    "Cam": "This is only an issue if you create your own cart form code. If you get this error, add the 'no validate' tag to your cart and everything should be fine :)\n. It's quite easy to add this yourself. I'm not sure it's needed in a framework theme. Though it would be a nice touch. Perhaps a 'quick view' feature with add to cart would be more a more popular feature?\n. It's so ridiculously simple to add that I doubt it needs to be part of the Timber framework. I may be wrong, but Timber seems more like a true framework to build on rather than a starter theme. Which I think is good. I personally think it's best being kept 'un-bloaty'.\n. I personally agree that it would probably be more ideal for the cart ajax to work elegantly with collection page buttons right out of the box, rather than needing any extra customisation.\n. I've used this on sites before, and I don't think it is in any way creepy. It's just friendly.\n. I'm having the exact same problem today, while editing the Retina theme for a client. Thank you for your sleuthing and solution :)\nNow to just figure out the other strangely hidden conflicts with Retina :/\n. +1. I was just thinking this yesterday.\n. @suture I think you are right. It should be something like \"Original price\"\n. @dpanfili I usually just use Slick by @kenwheeler https://github.com/kenwheeler/slick\nSlick mixed with that markup for settings and html from @thisislawatts and you should have a working solution pretty quickly.\nIf you are interested, I am working on a suite of complementary assets designed to work specifically with Timber. I'll be including a slider in those resources soon. I'm calling it \"Twigs for Timber\". Hilarious, I know :/\n. @kenwheeler If you could add an image zoom feature, you would be making life super easy for a whole load of us Shopify environment devs :dancers: ...not sure that fits with the intentions of Slick though.\n@cshold Thanks Carson! It's a slightly silly name, but it just seemed to fit so nicely :)\n. A good place to start would probably be the product.liquid image functions. It would be great to be able to easily extend the basic image changing features with things like zooming, button triggers, etc. Rather than exchanging the JS for new unnecessarily heavy additional JS.\n. Thanks @stevebosworth. Sounds good.\n. Maybe there should just be a comment about the compare at price, rather than the translation tag. My experience has been that the \"Compare at\" text inevitably gets removed. If it isn't needed, and usually gets removed, it probably doesn't belong in the framework.\n. Good call. I do this right at the beginning, every time I start a new Timber based project. Snippets FTW.\n. That makes total sense from the end client point of view. It's only takes 5 minutes to move various bits into snippets.\n. Check you don't have the form.posted_successfully tag in your header too. If there are 2, it won't work.\n. This seems to happen when adding \"CSS Animations\" to the Moderniser build (leaving everything else as is).\n. Thanks @cshold. We did actually use the same version with the \"supports\" prefix and everything. I'll play around with it though, and see if I can find anything else. But I am starting to suspect this is a Modernizr issue, not a Timber issue.\n. Sounds good. I'll be sure to update you when I have more info.\n. I really really don't think this should be a thing. Sub-sub menus generally aren't any good, and if you are making a \"mega menu\" you would need different options. None of which are universal (so shouldn't be part of a framework). If you want something made that could plug in to Timber that has scope for a third tier, You could sign up at http://twigs.club and harass me to make one ;)\n. @suture No, it is GNU/GPL. Where did you see otherwise? I'm happy to update any licensing if I had missed something :)\n. @suture All good! Though this should be raised not the Twigs Github, so as not to pollute the Timber issues. The licenses specify that you can use the assets freely in commercially distributed themes. You just have to leave the appropriate licences and credits for those components in tact (within the code only).\n. I'm seeing this issue on a new Timber based theme.\n. And here I was, foolishly doing this with CSS :P\n. You've answered your own question :D Literally break the grid outside of the wrapper! If the grid isn't in the wrapper, it will be full width.\n. Awesome. This is exactly what I was talking about a little while back. Thanks heaps @humancopy \ud83d\ude03 \n. Nice. Was just thinking about this last night.\n. @cshold I have a fix for # 2 :) I'll create a PR. @marshall993 It would be great if you could help work on these issues :D\n. @marshall993 see #518 for a fix for your second issue.\n. @cameronroe I don't think it's hard to manage at all. The only issue I have with the long SCSS file method is the long upload time for it via the API. But there are ways around that too.\n. @cameronroe I'm not saying it's perfect. I just don't think it is hard to manage. If you structure your file well, you shouldn't have any issues. You can create a modular setup of your own locally, then just let it compile on-the-fly for uploading to Shopify.\n. @cshold Apple are apparently taking an ideological stand on how viewport overflows should work :/\n. Yeah that seems like a small price to pay. Looks like it will be addressed in Chromium :) https://bugs.chromium.org/p/chromium/issues/detail?id=569649\n. I am not sure it would be a good idea to do that. But you certainly could. You would need to modify the following files to suit: ajax-cart.js.liquid, ajax-cart-template.liquid and modify the script at the bottom of the theme.liquid layout file so that \"timber.RightDrawer.open();\" updates your inline cart instead.\n. Hi @HandHugs. You can do that by tweaking the CSS for the drawers. You might need to tweak the JS a little too (from memory you shouldn't need to).\n. Hi @tomcollom. You'll want to head over to the experts directory or job forums for this question. The isn't a Timber related issue, so shouldn't be posted here ;)\n. It sounds like you are using the ajax cart, so you will likely need to modify the ajax cart javascript too Timber/assets/ajax-cart.js.liquid. ",
    "manu-kapoor": "I implemented this in the Classic theme. The functionality is dead simple to implement, as @cshold mentioned. However, the theme flips buttons on clicking (\"Add to Cart\" to \"Checkout\"), and with this, all buttons flip together on clicking any one of those. It couldn't get around this issue. The best I could do was make separate init calls for each button click instead of a common init. Only the buttons which have been clicked flip now, still a major UI issue. This also results in addition of a It could probably be added as a feature, as a lot of sites now allow adding products on the same page.\n. ",
    "suture": "I think I worked it out. \nIt's meant to remove the \"no-js\" class, but this change is only visible in the computed source not \"View Source\". \nCurrently the computed source looks like this, which I think must be incorrect. \n\nhtml\n<html class>\nPaul Irish suggests re http://www.paulirish.com/2009/avoiding-the-fouc-v3/\nhtml\n<head>\n  <script>(function(H){H.className=H.className.replace(/\\bno-js\\b/,'js')})(document.documentElement)</script>\n. You can use values like this\nhtml\n<label for=\"contactFormName\">Name <span class=\"required\">(required)</span></label>\n<input type=\"text\" id=\"contactFormName\" name=\"contact[name]\" placeholder=\"\" value=\"{% if form.name %}{{ form.name }}{% elsif customer %}{{ customer.name }}{% endif %}\" autocapitalize=\"words\" maxlength=\"80\">\n. Hi Carson\nDo you if it's possible to get a beta flag enabled in my dev shop so that I can start implementing this into the commercial theme that I'm working on, or do we have to wait until after the launch?\n. @graygilmore Many thanks\n. What about things like title tags, do they also need to be translated?\nFor example on Breadcrumbs\n\ntitle=\"Back to the frontpage\"\n. I do something like this, The \"t\" at the end does the job for all of the values.\n\n{{ \n                        field | capitalize | \n                        replace: 'Author', 'contact.form.name' |\n                        replace: 'Email', 'contact.form.email' |\n                        replace: 'Phone', 'contact.form.phone' |\n                        replace: 'Subject', 'contact.form.subject' |\n                        replace: 'Body', 'contact.form.message' | t \n                    }}\n. Yes that's correct\n. I've done a few tests and it looks like the spam trap only works if you use the \"name\" value that they provide.\n. I tend to think it's good to use _html more frequently. We may not want to add any markup, but it gives other users the option. In this case there is bound to be users that want to make the author's name bold. \n. I created a post in the Partner Lounge, hopefully someone will take note.  https://ecommerce.shopify.com/c/partners-lounge/t/language-editor-order-of-key-values-213631\n. This is the translation values I'm using for the storefront password page. I'm not sure if you want to include that page in Timber?\nhttp://docs.shopify.com/themes/theme-development/templates/password-liquid\njson\n  \"storefront\": {\n    \"page\": {\n      \"title\": \"Please Log In\",\n      \"subtext\": \"Will be opening soon...\"\n    },\n    \"form\": {\n      \"label\": \"Enter store using password:\",\n      \"submit\": \"Enter\"\n    },\n    \"footer\": {\n      \"login_link_title\": \"Log in here\",\n      \"settings_link_title\": \"Change your password settings\",\n      \"link_options_html\": \"Are you the store owner?<br />{{ login_link }} or {{ settings_link }}\"\n    },\n    \"credits\": {\n      \"powered_by\": \"This store is powered by\",\n      \"powered_by_title\": \"Create your own online store with Shopify\"\n    }\n  },\n. I noticed this also. I was going to say something but wasn't sure. \n. Should the prices in the search grid be updates also?\n. Is the html5shiv necessary, since you're using modernizr.min.js ?\n. Is it still necessary to use capture in this case?\n. Just looking at the source on this page\nhttps://timber-demo.myshopify.com/products/bjml-mystic-water-clean\n``` html\nRegular price\n$257.40\nSale price\nCompare at $365.99\n```\nThe visually hidden \"Sale price\" is listed with the higher \"Compare at\" price.\nIs that correct? Shouldn't it be the other way round. \nMaybe the terminology is different in different countries, or maybe I misunderstand. But normally from my experience the sale price should be cheaper. \n. Many thanks for that\n. Thanks Steve I've added that change to my own template. \n. I think the sale_price translation is also associated with compare_at_price in the Search template.\n. One option might be to code it without the filter.\n. Yes good point.\nSome nav systems use the same unordered list for both desktop and mobile, which might avoid the problem. But it would be major pain to change it now. \nI will close on that note.\n. I just tested and it does delete the record, even if you change the alert message translation. So I'll close this. \n. With this approach if you delete all collections and hide all products. Onboarding won't display if some of your hidden products have tags.  \nInstead it displays \"Sorry, there are no products in this collection\", which doesn't seem correct if you have no collections. \nThe Brooklyn theme uses this approach, and shows on boarding in the above described scenario.\nhtml\n{% if shop.products_count == 0 %}\n. I personally don't like them either. \nIt seems that they aren't supported in any of the free themes, but they are supported in some of the premium themes that I've tested.\nI'm sure I can work out how to do it myself. Just thinking it would be good if there was a vetted solution.\n. Thanks for the Twigs link. The testimonial carousel looks good. But the licensing is limiting isn't it? \n. @Cam maybe my mistake. Does GNU/GPL allow distribution in commercial themes? Does the commercial theme then fall under the same license? Sorry to push this issue of subject :)\n. It's working in Supply, React and Solo.\nBut also broken in Classic, Brooklyn, Minimal and Timber\n. Just a small detail :)\nIt seems the hash that gets added is #comment_form not #comment-form\n. Also in blog.liquid you need to update the Comments link (in the meta data) which has the old hash #Comments\n. Maybe another problem. If you delete this, we no longer get a success message. \nhtml\n{% if form.posted_successfully? %}\n      {% assign newHash = 'Comments' %}\n {% endif %}\n. Many thanks for following that up.\n. Thanks for this\n. Thanks Paul\n. This hasn't been tested.\n. Resolved #495\n. I think it's because of the full screen modal. \n\n. It's a good idea. I can see the same problem with Timber JS. \nWe end up load stuff that we don't need, or manually hacking it out. \n. Never mind, it looks like it was my error. \n. When does the discount show up on the Cart page?\nI've tested adding a discount promo code on the checkout page, then navigating back to the cart page, but it nothing relating to the discount shows up. \nNo discount title or discounted price. \n. Just a guess. Since the #2953 link above goes to a 404 error page, I assume that it's a fix for a new feature on a private Github page.\n. No not all, but it will set you in the right direction.\nTo give some quick examples.\nIt doesn't include a Password template.\nAlso the admin \"Customizer' section is very minimal as you would expect with a starter theme.\n. Is there a link to slate?\n. Not sure if this is related\nhttps://www.npmjs.com/package/@shopify/slate. https://shopify.github.io/slate/. Haven't Laser, Switch and Solo been killed off now, replaced by Maestro and Visa?\nhttps://en.wikipedia.org/wiki/Solo_%28debit_card%29\nhttps://en.wikipedia.org/wiki/Switch_%28debit_card%29\nhttps://en.wikipedia.org/wiki/Laser_%28debit_card%29\n. Grab a copy of the Debut theme. . It hasn't been made public yet. \nhttps://github.com/Shopify/Timber/issues/524. You can grab the Debut theme now, or get Slate.. https://shopify.github.io/slate/. The repo isn't public yet. A small spelling error \"rendor\" should be \"render\".\n. Should this endif be removed?\n. The link to the PR is broken\n. ",
    "tranhelen": "I don't think this is creepy. I think this is awesome.\n. @cshold: currently working through this but we're missing the default translation on \"Featured Products\"\nWill update as I go along.\n. The reason why I originally filled this was because if you read \"on sale from\" it doesn't make sense (indicates a range at which the sale prices start) because it comes right after a line which uses \"from\" in a different context. In the first line, you're using from to indicate a range of prices. In the second line, you're using from to indicate \"its discounted from.\" Read one right after another, and it's confusing.\nI like the word, \"originally\" or \"was\" or just simply having the original price displayed next to it in brackets like anthropologies does: http://www.anthropologie.com/anthro/category/shoes/shopsale-shoes.jsp?cm_sp=TOPNAV--SHOPSALE--SHOPSALE-SHOES#/\nGold Studded Hinged Bracelet\nFrom $92.50\nOn Sale ($185.00) (with this price in a lighter grey)\nor\nGold Studded Hinged Bracelet\nOn Sale From $92.50 (~~$185.00~~)\nor \nGold Studded Hinged Bracelet\n~~$185.00~~ From $92.50 On Sale\n. Currently going through the colour variables to see if I can better name them. For now, just ignore them.\n. ",
    "mpiotrowicz": "it's potentially creepy, but people can always remove it if they think it is. It's a nice way of showing what's possible. :+1: \n. If the concern is around having a good H1 for the homepage but not \"stealing\" it for inner pages, I'd suggest creating a visibly hidden h1 for the homepage that google can read and keeping the logo as a div throughout. From a dev point of view, it's unexpected to have something like the logo treated differently across pages. \nAll that said, I'm not sure you lose out on anything if you have two h1's on a page if both the logo and a page title are h1\n. Absolutely agree with document outline! I mention the dev implications as things like headers and footers are often included as single files across the site, hence the expectation they be the same across pages. The styling of an h1 or div wouldn't really matter either way.\n. cc @richgilbank \n. are these all the jQuery collections in the file? If so this looks great!\n. works for me!\n. This is great! One thing I'd modify is making use of <thead> and <th> for the title rows (product, price,  quantity, total)\n. actually just noticed the 2nd table with quantity and total - if you float the last 2 cols on mobile and set a width to 50%, I think it can be avoided?\n<tr class=\"cart-row\" data-id=\"780875889\">\n  <td>\n    img cell\n  </td>\n  <td>\n    Vendor and product name cell\n  </td>\n  <td>\n    Price Cell\n  </td>\n  <td style=\"float: left;width: 50%;\" class=\"quantity-cell\">\n    <span class=\"cart-mini-labels\">Quantity</span>\n    <div class=\"js-qty\">\n      <input type=\"text\" class=\"js--num\" value=\"1\" min=\"1\" data-id=\"780875889\" aria-label=\"quantity\" pattern=\"[0-9]*\" name=\"updates[]\" id=\"updates_780875889\">\n      <span class=\"js--qty-adjuster js--add\" data-id=\"780875889\" data-qty=\"11\">+</span>\n      <span class=\"js--qty-adjuster js--minus\" data-id=\"780875889\" data-qty=\"0\">-</span>\n    </div>\n  </td>\n  <td style=\"float: left; width: 50%;\" class=\"total-cell\">\n    <span class=\"cart-mini-labels\">Total</span>\n    <span class=\"h3\">$257.40</span>\n  </td>\n</tr>\n. @cshold sorry should have specified, the floats would only be applied on mobile to achieve the qty and total columns appearing side by side\n. Fair, I still think it was a good exercise and hopefully you do to. Timber will be stronger for having explored alternatives\n. looks good so far, would like to see a bit darker treatment for those placeholders!\n. can you leave a note then about the original? I think if we can make improvements on readability however I think we should, esp given that devs will be looking closely at JS inside of Timber\n. +++ @stevebosworth \n@cshold can we review these changes this week before this merges?\n. nice!\n. cool!\n. :100: \n. good call\n. General note on the size of this PR - the description was super valuable to see what's been updated, but this both touches a lot of files and a lot of functionality was rolled into this single PR. Can these be split up in the future? Will really help with reviews\n. Thanks for moving on this so quickly! Are there any other snippets that appear only once and can be conslidated? Would be interesting to see how moving those affects the size of remaining templates\n. good call, lt's keep this one focused then and the other can be more exploratory\n. I as well, but this is an improvement I think\n. this is great! Were any of the snippets un-snippified twice? (eg snippet contents appear twice now)\n. really good catch! We should be especially mindful of setting these expectations for merchants\n. code looks good, but are these design elements needed to display the forms?\n. does this still provide the basic implementation for pagination? If so, :+1: !\n. this won't work with IE8, assuming that's ok for Timber?\n. remove console.log\n. not sure how verbose you want to be, but for these modifiers I stick with things like .btn--full as just full on its own can be used in a lot of contexts. Same with .small\n. add &:focus\n. add &:focus\n. consider using ProductPhoto instead if you can, current guide specifies UpperCamelCase \n. I like it, only thing is might want to create a more specific var name, TimberShop or something\n. cache $(element)\n. if implementing an icon font, can this be done in a less intrusive way? If the font fails there's no fallback and it's not accessible. Something like the following would be more robust \n<span class=\"icon-fallback-text\">\n    <span class=\"icon icon-visa\" aria-hidden=\"true\"></span>\n    <span class=\"text\">VISA</span>\n</span>\nMore info here under \"Critical Icons with Text Fallback\" - http://filamentgroup.com/lab/bulletproof_icon_fonts.html\n. aria-label copy might as well just be the same as the placeholder text, just for consistency\n. any way to move this to JS and avoid the onclick event? This can also be a <button type=\"button\"> element to avoid having to return false\n. beat me to it! But yeah check out the article above for a really solid implementation\n. ideally then I guess these would be fixed in admin, but not sure it's worth opening that up right now? They haven't been touched in a very long time\n. I'd say it should be consistent across pages, so either h1 all the way or div all the way\n. are you toggling this at any point? What's the purpose here?\n. sorry just want to make sure aria roles are being added with care and proper functionality. If you're adding has-popup then there might need to be a few extra aria attributes added for when the menu is expanded for example, as well as ensuring the menu can be accessed via keyboard alone.\n. yup that's a great example! This one goes through some more detail as well http://terrillthompson.com/blog/474\nThe point is that without keyboard navigation, adding aria roles will only confuse users as it implies they'll be able to do something with that menu, but in its current state they can't. In the future, I suggest adding keyboard functionality first, before ARIA markup. ARIA is meant to describe functionality, so it's better to have that functionality in place already.\nAnything you're adding should also be tested in a few screen readers as well to make sure it's actually helpful and makes sense. This is something I can help you get going with if you're interested. Don't meant to discourage you from looking into a11y stuff, but especially with screen readers, a lot of factors have to come together otherwise it's just noise for users.\n. just a thought, but for instances where you'er referring to the object many times, might be worthwhile to cache timber.cache.navigation - meta cache? too much cache?\n. hmm, I'd probably go as follows:\nh1,h2,h3,h4,h5,h6 {\n  a {\n    font-weight: inherit;\n  }\n}\nand then have all the typography helpers extend the tags, so\n.h1 {\n  @extend h1;\n}\nThat would include the link inside .h1 as well\n. I'd stick with the guide for consistency. This style works but as soon as anything has to change, it would have to move to 2 lines anyway.\n. any reason why this script has to be inline like this?\n. can you stick with PascalCase for ID's? otherwise I think likeThis was being used?\n. any way to avoid these empty elems?\n. alt\n. ah, gotcha, sounds good!\n. Has this change been implemented in the default gift card template or are you modifying Timber's version?\n. How will this template be kept up to date with whatever changes that happen upstream?\n. giftcard__wrap since the above all follows the __ convention\n. giftcard__code?\n. can you add comment around what this script is doing?\n. ok, I've added a few other comments around class names in the meantime if this is something that'll be kept Timber-specific. Thanks!\n. Ok makes sense. It's a little confusing now only because giftcard is the root name both in the parent module as well as this inner module. In cases like this maybe the parent could be more specific like giftcard-container or giftcard-page-layout to separate styles related to the page vs reusable giftcard-specific stuff. What do you think?\n. since you're adding mini-labels on here anyway, it'd be a good idea to just treat these as real <label> tags that are accessibly hidden on desktop and then revealed on mobile. This way you can also get rid of the aria-label on the  field\n. is this still being used anywhere?\n. this removes the label from the quantity input now. Strictly speaking it isn't table related so can be addressed elsewhere, but can this be converted into a label tag for that input?\n. I'd extend labels from .cart-mini-labels in that case\n. or you can apply class=\"cart-mini-label\" to the actual <label> element\n. :anguished: \n. should these be saved to timber.cache? Otherwise, since all are product related, they can also be saved to a single productCache obj or use a product_ naming convention? Not sure any of these are needed, just wondering if they might help distinguish these are being product-specific\n. nice :)\n. knit-pick, but seems redundant to call something \"js\" inside a .js file\n. do these need to be saved outside the productJs function? why not just declare them there?\n. which part of the guide are you referring to? Vars should be declared at the top of a function, but  it doesn't have to happen anywhere in particular other than that?\n. clean up spacing here, can the condition be moved to a new line?\n. new line for condition\n. is this still being used in this version of the formatMoney? It's also a little strange that it's being created outside on its own\n. would help to know what cents and format here are supposed to be or an example of how this would be called\n. there's no copy in this fallback text, is it needed? Fallback should be there if an icon isn't accompanied by any visible text or if the text isn't representative of what the icon shows. eg. if the icon wasn't there, would something still be actionable and would users know what it did? cc @stevebosworth \n. does the icon need to be nested inside the icon-fallback-text element, or can it be placed outside?\n. ah ok, with the comment below as well i see how this is organized. If there's no fallback text required, just wondering if it needs to be wrapped in that element at all? I can open a separate issue elsewhere\n. any way these can be updated to follow the above conventions?\n. when hash is updated, would love to see keyboard focus get updated as well!\n. can it be moved to inside of timber.init ?\n. can it be re-written so that liquid sets a flag to true that init then checks? It's preferable to move all JS to init especially if in this scenario causes an awkward second call to cacheSelectors()\n. one approach is to do something like var theme = window.theme || {}; themeVars.page.newHash = 'Comments' and inside of timber's init:\nif (theme.page.newHash) {\n   timber.updateHash(theme.page.newHash);\n}\nIf we get to the point where this is the last piece of inline JS I think it's worth it if that means we can move all scripts to the bottom of the page\n. can you align these on the right? Realized it's not in our styleguide but it really helps readability (will add to the guide)\n$recoverPasswordLink    : $('#RecoverPassword'),\n$hideRecoverPasswordLink: $('#HideRecoverPasswordLink'),\n$recoverPasswordForm    : $('#RecoverPasswordForm'),\n$customerLoginForm      : $('#CustomerLoginForm'),\n$passwordResetSuccess   : $('#ResetSuccess')\n. there will be a timber.global and timber.globalVars?\n. if the goal is to update the focus on hash change, this can be achieved with tabindex -1, this way it won't be in the tab order afterwards. Flow would be you'd update the tabindex and then focus() on that container\n. i'm not sure that these need to be saved onto the Timber namespace as it's a little unexpected that you'd potentially be defining timber in this little page-script, and I'm not sure what nesting under global gives you, especially since this is very page specific (eg something like the cart is global, available on every page).\n. I'd consider re-naming this to be timber.pageSpecific or something similar, or creating a new global called templateVars and having timber check for that? None of these solutions are particularly great tbh. There's no way for you to set a liquid var here that's evaluated at the bottom of the page where timber can be called directly?\n. I know we've talked labels before, but wondering why you went with this approach over the more robust version where a span inside is given the hidden styles? This way won't work in FF for example - http://juicystudio.com/article/hidden-label-firefox-bug.php\n. it seems really strange that both would be required and I'm not sure how they count as global (eg seems like some of them are page specific like the hash, others are truly global like a breakpoint). If you're overwriting defaults set by global, I'd suggest calling the page-set variable something like pageOptions but global vs globalVars sounds like it's the exact same thing\n. well, potentially, but you'd likely account for that in initially creating the object to begin with, but I think the readability tradeoffs are worth it\n. ah yes I remember that being a concern. A potential benefit of this is that you won't have to include a placeholder fallback JS script for older IE, since you can display the labels in old browsers instead, but otherwise aria-label should have you covered\n. how did you end up handling this case?\n. is this ok at the bottom of the page? Just want to confirm\n. is this no longer the case with shop.js? (ie. the comments above)\n. is this no longer the case?\n. i don't think we should be this opinionated about form input styling by default. There was a good discussion about this in FED slack earlier today, but by styling form elements directly, if you want to create any variation within the theme for those elements, you'd need to undo all of these styles in that variant.\n. does timber as a base even need form styles out of the box? Presumably these are overwritten by each theme anyway?\n. ... i still think this is too opinionated as a default? How would these be overwritten if a variant on an input was required? @cshold \n. so is ajaxify now ajax-cart.js? Why the rename? (out of curiosity)\n. are all of these helpers used by ajax-cart? Why aren't all of them namespaced under Shopify? (curious again!)\n. which parts have changed from ajaxify.js? a little hard to review this one since the whole file got renamed too, in the future, might be a good idea to update the code as a separate PR from the file rename\n. open question, is the mobile drawer a pattern we'd like to encourage for all mobile-ready themes?\ncc @pauldpritchard \n. not sure that this part is necessary? - eg this may change one day so the comment will be out of date\n. this seems like a pretty big change for .grid, if it affects all grids inside of .site-header, what about creating a variant class for the grid in this case? Reading the markup, if there aren't any other clues that the grid changes, I'd be surprised by this behavior. Why is it necessary within the site-header?\n. depending on how many styles .site-nav includes, might be better off doubling up the class on the HTML element? eg - site-nav--mobile site-nav? Could be an interesting discussion for FED talks \n. how does .site-nav--mobile relate to .mobile-nav ?\n. spaces after commas\n. feel free to change the class name if it will bette suit Timber conventions\n. remove space before comma. Since this is used so often, I'd consider putting it inside a var?\n. you'd know better than I, but if they're not used in ajax cart, why include them in here? Is there another way theme devs can access these functions, and are they used by Timber anywhere else?\n. do we document requirements vs encouragements? \n. i'd maybe add that as comments then, it isn't clear on reading the file what does what\n. k, I agree, but if ever you come across scenarios like this again, feel free to do what fits Timber!\n. well, so long as it's clear when you'd use one over the other. Why was any of the API stuff included here vs just including the api script itself?\n. hmm, ok, I guess in the future these decisions need to be weighed as cost vs benefit. Right now it's confusing since it's unclear if you'd ever include the other version of the file and it introduces the possibility of one file overwriting the other. I'd say it probably isn't worth it given that complexity.  It'd be helpful to document the preferred flow here - eg if using Timber, should you never include that api script because its functionality is recreated here? What if you don't have an ajax cart, would you use that script then?\n. can you add HTML comments denoting the start/end to the old snippets? I think it would go a long way in helping ppl navigate this file.\nEg \n// begin mobile nav\n. // end mobile nav\n. there are more IE9 + browsers than not, why position this as the exception?\n. indentation\n. but since they're under a media query these styles wouldn't apply to oldIE anyway?\n. so then why not add the responsive behavior to oldIE?\n. great lesson in never assuming anything :)\n. ",
    "ghost": "Any update on this? Shopify has been a pleasure to work with so far, but the lack of any decent dummy data for developers is disappointing.\n. ",
    "tyteen4a03": "This is still happening. Using 2.0.1.\nhttps://cdn.shopify.com/s/files/1/0751/9403/t/2/assets/timber.scss.css?453\n. ",
    "sdn90": "Just ran bootstrap from the theme gem and got this error again.\n. ",
    "bantros": "Sorry for the mess, first fork...\n. ",
    "oksushi": "Thought behind this is: On the home page, company name gets precedence. On internal pages, the page topic gets precedence. The company name is still reflected in the <title>.\nWe also have the schema markup now telling Google et al that the logo is indeed the representation of the company.\nMaybe this could go in as a theme setting?\n. Until we get the proper document outline in HTML, we\u2019re stuck with one <h1> per page. And this should really reflect the same information as the <title>. \nTypically for e\u2013commerce, the \u201chome\u201d page is all about the store name, whilst internal pages are about the product, collection, article etc.\nFrom a front\u2013end development point of view, either a <div> or an <h1> can be selected the same way, and the only difference is really the default margin and font-size that comes with the <h1> (that can be easily removed).\n. ",
    "jholl": "@cshold, just trying to reconcile this convo with current templates... seems we're using <h1> and <h2> in different templates and I'm wonder if/what the final reasoning for this? IMO all page titles would have <h1> consistent with <title>, and I could personally style or add class=\"h2\" if I wanted them to look different.  Thoughts?\n| Uses <h1> | Uses <h2> |\n| --- | --- |\n| index | page |\n| 404 | page.contact |\n| cart | search |\n| article | blog |\n| collection | product |\n| collection.list |  |\n| Customer/ |  |\n| account |  |\n| activate_account |  |\n| addresses |  |\n| login |  |\n| order |  |\n| register |  |\n| reset_password |  |\n. thank you; let me know if I can help.\n. for that matter, the code tab could probably more accurately reflect the example tab, want me to just take a swing at matching it all up?\n. okie dokie\n. to stay consistent with the other visibility, could look like\ncss\n@media print {\n  .print--hide {\n    display: none !important;\n  }\n}\n. could move it to Typography instead, guess depends where you want to put it in the docs; Helper made more sense to me since it is a mod style not a base style\n. the forloop for collection in collections is looping through collections in alphabetical order - therefore if six collections alpha before 'frontpage' then they will all show up; however we want only five to showup.  In current demo store, believe this 'works' because there are five collections 'collection-1, collection-2 ... etc' that show up before 'frontpage' thus frontpage is the sixth collection in the list.  Add 'collection-6' to the demo store and things should be 'broken'\n. In case anyone comes across, I added\nhtml\n  {% if linklists.featured.links.size > 0 %}\n    {% for link in linklists.featured.links %}\n        {% assign collection = link.object %}\n        {% assign collection_item_width = 'large--one-fifth medium--one-third' %}\n        {% include 'collection-grid-item' with collection %}  \n    {% endfor %}\n  {% else %}\n  ... OTHER LOGIC FOR FEATURED COLLECTIONS OUTPUT ...\n  {% endif %}\nas @cshold points out, you could add to theme settings for more dynamic linklist naming.\n. thanks\n. I think it only occurs when the email exists in an account already in that shop?\n. Making a new PR -- I think the solution is easier; you decide.\n. ..... or am I supposed to add .medium--hide and .large--hide to the element also?  I would prefer that if I add a device size 'show' that we know I want that element to be hidden on all other sizes.  and if I add a device size 'hide' that we know I want that element to be viewable on all other sizes.  Is this not the intention?\n. +1 to @graygilmore or Regular, I lean away from Compare at because it makes me think about third-party references not internal promotions. In my head, it goes like this: when I see \"from\", I first expect it to be relative to current purchasable amounts.  If I only see \"from\" next to \"On Sale\" then I can make the relation to a previous purchase amount.  But seeing them at the same time with two different contexts can be confusing.  I have also seen use of words like Originally in place of \"On Sale\" but I'd prefer to keep the recognizable word \"Sale\" some how. And, I have seen use of words like As low as, Starting at, or like the snippet suggests up to where we use \"from\" with differing variant prices.  However, I think the way a shop phrases sales and pricing variations is, at least a bit, related to their brand and voice -- therefore, in order for Timber to offer a neutral framework, I'd prefer small changes such as \"On Sale ~~$185~~\" , On Sale, regularly $185 , or On Sale, originally $185\n. I recently ran into this with another theme and now I'm conflicted on it.  Required only seems to solve most of the problem since iOS doesn't support and mobile browsing increases.  Therefore, I find myself reaching for a modified version of Caroline's js solution and class names to implement required fields.\nis there a better solution for implementing required fields in Shopify forms?\n. yes, I thought about this more.\nThe difference of rendering a 'large' or 'compact' image on a six item grid appears irrelevant with responsive images (I haven't done a test of load speed, but probably also insignificant); so there's not much argument for varying image size if the only benefit can already be achieved with grid_item_width\nSo far as I'm concerned now, we can close any time.\n. cool..... any idea when we can expect this to be put into production?  Will this be alternative to cart line numbers and the handling of duplicate variant_ids w/in a cart?\n. ",
    "mariusa": "Yes, or include a parameter with the state (shown/hidden), so that we don't have to check manually.\nThanks Carson\n. Great!\n. Good thinking.\n. Thanks!\n. ",
    "cimocimocimo": "Makes perfect sense. Normalizing and then using the reset values as defaults to style declarations further down is a good idea. I've never really seen the point of making all the text identically styled only to style it again later.\n. I'd like to see this. I was thinking of adding in Grunt to merge in icon font exports from Icomoon. \n. ",
    "dan-menard": "Really nice cleanup. :+1: :+1: :+1: \n. ",
    "Atusa": "Sorry, I can see how that was very confusing.. Meanwhile I figured it out, I just misunderstood what the wrapperClass setting did and where it was called. But thank you for your fast reply. Sorry again..\n. Hey again!\nThank you for the reply! I tried to work with this, but it still showed the itemQty when it is 1. I have actually only used the Timber Ajaxified Cart in my design, so my code looks slightly different than the entire timber framework. \nIs there anyway else I can do to hide itemQty == 1? Perhaps in the ajaxify.js file?\nMy ajax-cart-template.liquid looks like this:\n``` javascript\n\n  {% raw %}\n    <form action=\"/cart\" method=\"post\" novalidate>\n      <div class=\"ajaxifyCart--products\">\n        {{#items}}\n        <div class=\"ajaxifyCart--product\">\n          <div class=\"ajaxifyCart--row\" data-id=\"{{id}}\">\n           <a href=\"/cart/change?id={{id}}&amp;quantity=0\" class=\"ajaxifyCart--remove ajaxCart--product-image\" data-id=\"{{id}}\">\n              <button class=\"ajaxifyCart--removeClose\" title=\"Close Cart\">Close Cart</button>\n              <img src=\"{{img}}\" alt=\"\">\n           </a>\n          </div></p>\n<pre><code>        &lt;a href=\"/cart/change?id={{id}}&amp;amp;quantity=0\" class=\"ajaxifyCart--remove minicart\" data-  \n         id=\"{{id}}\"&gt;{{itemQty}} {{name}}&lt;/a&gt;\n        &lt;p class=\"itemprice\"&gt;{{price}} DKK&lt;/p&gt;\n        &lt;/div&gt;     \n    {{/items}}\n\n   &lt;/div&gt;\n  &lt;div class=\"ajaxifyCart--row text-right medium-down--text-center\"&gt;\n    &lt;p class=\"totalword\"&gt;TOTAL&lt;/p&gt; &lt;span class=\"total\"&gt;{{totalPrice}} DKK&lt;/span&gt;\n    &lt;input type=\"submit\" class=\"{{btnClass}} minicart\" name=\"checkout\" value=\"CHECKOUT\"&gt;\n    &lt;a href=\"/cart\"&gt;&lt;p class=\"viewall\"&gt;View entire shopping bag&lt;/p&gt;&lt;/a&gt;\n  &lt;/div&gt;\n</code></pre>\n<p></div>\n    </form>\n  {% endraw %}\n  \n\n  {% raw %}\n    <div id=\"ajaxifyDrawer\">\n      <div id=\"ajaxifyCart\" class=\"ajaxifyCart--content {{wrapperClass}}\"></div>\n    </div>\n    <div class=\"ajaxifyDrawer-caret\"><span></span></div>\n  {% endraw %}\n  \n\n  {% raw %}\n  <div class=\"site-width\">\n    <div id=\"ajaxifyModal\">\n      <div id=\"ajaxifyCart\" class=\"ajaxifyCart--content \"></div>\n    </div>\n</div>\n  {% endraw %}\n  \n\n  {% raw %}\n    <div class=\"ajaxifyCart--qty\" data-qty=\"{{itemQty}}\">\n      <input type=\"text\" class=\"ajaxifyCart--num\" value=\"{{itemQty}}\" min=\"0\" data-id=\"{{id}}\" aria-label=\"quantity\" pattern=\"[0-9]*\">\n      <span class=\"ajaxifyCart--qty-adjuster ajaxifyCart--add\" data-id=\"{{id}}\" data-qty=\"{{itemAdd}}\">+</span>\n      <span class=\"ajaxifyCart--qty-adjuster ajaxifyCart--minus\" data-id=\"{{id}}\" data-qty=\"{{itemMinus}}\">-</span>\n    </div>\n  {% endraw %}\n  \n\n  {% raw %}\n    <div class=\"js-qty\">\n      <input type=\"text\" class=\"js--num\" value=\"{{itemQty}}\" min=\"1\" data-id=\"{{id}}\" aria-label=\"quantity\" pattern=\"[0-9]*\" name=\"{{inputName}}\" id=\"{{inputId}}\">\n      <span class=\"js--qty-adjuster js--add\" data-id=\"{{id}}\" data-qty=\"{{itemAdd}}\">+</span>\n      <span class=\"js--qty-adjuster js--minus\" data-id=\"{{id}}\" data-qty=\"{{itemMinus}}\">-</span>\n    </div>\n  {% endraw %}\n  \n```\nI tried adding the \ncss\n    .ajaxifyCart--qty[data-qty=\"1\"],\n    .ajaxifyCart--qty[data-qty=\"1 x\"] {\n    display: none; }\nTo the ajaxify scss file and my style.css file but it didn't work. \nThank you for your help!\n. Hey Carson\nThe site is www.saks-potts.myshopify.com,\nThanks!\n2014-07-31 15:58 GMT+02:00 Carson Shold notifications@github.com:\n\nWhat site are you working on, taking a look at the code live is always\neasier for me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/issues/159#issuecomment-50761848.\n\n\nVenlig hilsen\nAtusa Zamani\nAsminder\u00f8dgade 14, 2.th\n2200 K\u00f8benhavn N\n. Thanks Carson!\nI just tried this out, and I understand the approach with the data\nattribute - However it seems that {{itemQty}} as the data attribute is not\nrecognized.. I tried just writing \"1\" which worked, it would hide the span.\nI also tried putting in \"cart.item_count\" instead of {{itemQty}} but that\ndidn't work..\nBut this would definitely be the best approach, as I still want the\n\"Shopping bag, 1 item\" to show, before the minicart is opened. So changing\n{{itemQty}} actually wouldn't work.\nYou have any idea as to why data-qty=\"{{itemQty}}\" isn't registered by the\ncss? Or any last idea I could try :-) ?\n2014-07-31 16:44 GMT+02:00 Carson Shold notifications@github.com:\n\nAh I see, with the changed markup the CSS I mentioned before as a fix has\nno way of knowing what the quantity is.\nChange this line:\n{{itemQty}} {{name}}\nTo:\n{{itemQty}} {{name}}\nThen add CSS to either stylesheet you're using:\n.ajaxify-item-qty[data-qty=\"1\"] {\n  display: none;\n}\nThis is nearly the same approach as before, but this time you have an\nelement wrapping the quantity which you can target directly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/issues/159#issuecomment-50768525.\n\n\nVenlig hilsen\nAtusa Zamani\nAsminder\u00f8dgade 14, 2.th\n2200 K\u00f8benhavn N\n. Sorry! I fixed it! Apparently itemQty was putting out an extra space \"1 \".. but now it works! Thank you so much. :-) !! Great solution.\n. ",
    "thisislawatts": "Although I use grunt as part of my own workflow across the few stores I maintain I don't think it should be rolled into an 'up-and-running' style boilerplate. Unlike .scss which is powered via the Shopify platform, it would add an unnecessary complication for people hacking away.\nWhile I think a more workflow orientated template would be really interesting, I see that being outside of this project's scope.\n. @stevebosworth @gavinballard that sounds like a great way to move forward. It's just I have been recently working with a few students, and it really gave me the opportunity to appreciate the learning curve involved with all these CLI tools.\nSo offering up a plug'n'play version is the best way to get people up and running on this brilliant theme. But a workflow orientated branch using Grunt/gulp/broccoli would be a great way of helping people level up in their own time.\n. Hey @dpanfili,\nI tend to only add homepage slideshows to my templates, which are then managed via shopify's theme customize. \nSee here for a sample index.liquid/settings_schema.json\nhttps://gist.github.com/thisislawatts/8859e2fa18ed087a0acb\nWhat resources have you been trying so far?\n. Too quick for me @cshold, I was looking for the original issue where this was being discussed. For reference, gere's one of the commits where footer.liquid was merged back into theme.liquid\nhttps://github.com/Shopify/Timber/commit/d2bd26d318f8096cc8a2ba4d512f02bc7ea0052d\n. ",
    "gavinballard": "I think @thisislawatts has a good point, although personally I can't imagine going back to developing themes without Grunt. The next version of Bootstrap for Shopify is going to ship with two versions - a \"beginner\" and an \"advanced\" version. The \"advanced\" version will include Grunt, custom directory structure, etc., while the beginner version will be the Shopify directory structure ready for direct upload to a store.\n. @stevebosworth @thisislawatts Definitely worthwhile making an effort to avoid scaring away newer developers!\nIf anyone's interested, I started work on this repository the other day - it's designed to be a \"scaffold\" for the Shopify theme development process that one can plug an existing or new theme into. \n@stevebosworth - would be really interested in seeing what you come up with on the Yeoman front. Definitely open to collaboration on a theme-agnostic framework for development.\n. :thumbsup: \n. @dominikwilkowski Nice! Seems like all Aussies feel the need to build these scaffolds :).\n. I think you may have because money_without_currency seems to work fine on the various themes I've used it with :).\n. Are there problems then if the currency doesn't use decimals? For example, here in Sweden all prices are just in SEK, without \u00f6re (cents). Does Shopify store 600 SEK as a price of 60000, or 600?\n. Awesome, just updated the pull request.\n. ",
    "stevebosworth": "@thisislawatts, the approach @gavinballard described is definitely the type of approach we'd like to take incorporating grunt and/or gulp into timber.  A simple downloadable version that's ready for upload to a store out of the box as well as one taking advantage of grunt or gulp and a more advanced workflow.\nWe're also looking at building a Yeoman generator to further automate some tasks like bootstrapping a new theme and creating templates, snippets, etc.\n. @thisislawatts definitely don't want to scare anyone away because of a lack of familiarity with CLI tools!  Also, like you mentioned having both can help people level up as they get more comfortable.\n@gavinballard thanks for sharing that!  Definitely useful to see how people are already using Grunt to optimize theme building.  I'll keep you updated as we move forward with the Yeoman stuff and would appreciate any feedback or help.\n. looks good to me.  much nicer!!\n. I agree that it would be nice to keep things like this as a modular add-on separate from Timber instead of adding them to Timber itself.  \nThis will become even easier once we have a branch of Timber that uses grunt builds and allows for includes and a more modular approach to the JS.\n. Left one comment, otherwise LGTM!\n. :+1: \n. @graygilmore if you're trying to achieve the same thing we are with our @imports, totally in the same boat :-/  Couldn't find a plugin anywhere that does the same as gulp-cssimport\nSo far I've looked into:\n- grunt-contrib-sass\n- grunt-concat-css\n- grunt-contrib-concat\n- grunt-cssjoin\n- grunt-sass-directory-import\nDefinitely post up if you have any luck!!\n. @cshold\nIs the goal to move this into master eventually?  or will this live as it's own branch for kickstarting internal themes?\n. Hmm, I still have some concerns about this approach becoming the default way of using Timber.  My preference would definitely still be towards multiple releases so we can tailor the folder structure to each approach (ie build process vs no build process) instead of having one approach that requires compromises for the other.  \nI don't think that should necessarily keep us from moving forward with this though.\n. ya, definitely.  I'm guess I'm not totally sold on this folder structure with some of the files be built from a src folder and some from root which requires us to be tracking both a compiled version of the scss and an uncompiled through git.  I think this approach makes a lot of sense for our internal theme development but I don't know if it's the best base to build multiple releases off of.\n. I guess I'm just hesitant to merge something this major into master right away without taking it for a spin with a couple themes :-p\n. one small comment/request but other than that LGTM!!  :ship: \n. :clap: :ship: \n. nice!! :+1: :shower: it\n. :+1: \n. I like this approach.  I would add a comment where you define timber.global in shop.js to indicate that this is where we're keeping template specific values generated by liquid before timber inits.\nAlso, just for debates sake, maybe timber.window instead of timber.global?  Might make it a little clearer what the purpose of the global object is?\n. Looking good!  :+1: \n. @mpiotrowicz's comments aside, LGTM :+1: \n. :+1: \n. :+1: \n. lgtm :+1: \n. Looks good :+1: \n. Cool, good to know about using the size property.  :ship: \n. I can live with that :+1: \n. :+1: \n. Looks good to me :+1:\n. Looks good :ship: \n. Looks good :+1: \n. @cshold thanks for explaining the marketing assets stuff. Took another look and looks good to me.  I have some questions about the JS but nothing that needs fixing necessarily. :+1: \n. I like the custom event approach too :+1: \n. :+1: \n. :+1: \n. looks good :+1: \n. I agree with @cshold. I think this would ultimately create more problems and complexity since the onus is on the developer to know which prefixes are required which is something that can change as browsers are updated.\nIf the unnecessary prefixes are causing problems, I would recommend using a prefixer as part of a build process.\n. just waiting on translated strings for i18n but good to go after that?\n. Thanks for the feedback @Cam.  We're currently looking at how we handle JS.  I'll be sure to ping you once we have any updates.  If there's something specific in the meantime, please reach out!\n. Stale PR. Thanks @benknight!  If you want to put this up on a dev shop you can sign up for a partners account here: https://app.shopify.com/services/partners/auth/login \nHere's a doc on creating dev stores once you have a partner's account:\nhttps://docs.shopify.com/themes/theme-development/getting-started/development-environment\n. :+1: \n. :+1: \n. :ship: \n. Other than failing tests LGTM :+1: \n. Yup, still looking into the cause as this only seems to be an issue in Chrome right now (safari and FF seem fine so far).  Will definitely update here when I find a fix.  Thanks for the heads up @admanami\n. This also appears to be a duplicate of floatToString() on line 37?\n. see comment above.  Maybe switch to ajaxify-cart__qty?\n. Good opportunity to update these selectors to follow proper BEM syntax?  .ajaxify-cart__qty-adjuster\n. nitpicking but maybe js-qty__qty-num for consistency with ajaxcart__qty-num?  It's a weird name but maybe makes a bit more sense?\n. ya, was more thinking for readability in a stylesheet.  js-qty__qty-num is maybe more explicit that it is is linked/similar in function to ajaxcart__qty-num?\nI think that either case has pros and cons so probably just go with yours.\n. can we update this to work with the exec task?  I'm a big fan of the notifications when things are done uploading!\n. should we change these to buttons if they're not actually navigating anywhere?\n. ++ I really like the readability\n. :sunglasses: \n. what's options doing here?  necessary?\n. This should probably be .rte__header since it's not really a modifier?\n. I'm a sucker for separate files and includes.  Much easier to read imho.  Easier to remove or turn on and off too.\n. Can you change to use .on('submit', function(evt) to stay current with the styleguide?\n. can this selector be simplified?\n. should probably be a BEM modifier?  .js-drawer--open?\n. BEM modifiers? .js-drawer--open--left\n. should these is-moved type classes be BEM modifiers instead?  --moved-by-drawer indicates state a little better I think\n. nice!  It totally works on ie8 without the conditional\n. ",
    "richgilbank": "Yeah, you need to wait until the DOM is actually ready before querying it. Since you've already got a timber.init function though, I'd personally add another function for caching the DOM, which gets called from timber.init on document ready, as it currently does. i.e.\n``` javascript\ntimber.cacheSelectors = function() {\n  timber.cache = {\n    $body: $('body')\n  }\n}\ntimber.init = function () {\n  // Run on load\n  timber.cacheSelectors();\n  timber.accessibleNav();\n  timber.productImageSwitch();\n}\n...\n$(timber.init)\n```\n. Also, you don't need an anonymous function here: https://github.com/Shopify/Timber/blob/jquery-selectors/assets/shop.js.liquid#L119-L122\njavascript\n$(timber.init)\nis equal to\njavascript\n$(function() {\n  window.timber.init();\n});\n. @cshold not layout related, but can you change the quantity field to a [type=\"number\"]? Right now it's easy to end up here:\n\n. Also unrelated, but do we need the Update Cart button at all? \nI'm also wondering if it's possible to do some testing on these things since it's probably the most emotionally heightened part of a buyer's experience - I think it would be valuable to have some insights and data to back up these decisions. Or maybe I'm just getting carried away with experiments \u00af(\u30c4)/\u00af\n. @cshold enter a non-numeric character (i.e. a letter) into the field and increment it\n. I'd say to make it a number field for semantics and for ease of use on mobile (numeric keypad). As for the JS, I'd say to prevent a NaN rather than recover from one. \ncoffee\n$(quantityInputThing).on 'keypress', ->\n  $(@).val $(@).val().replace(/\\D/g, '')\nDoes that sortakinda make sense?\n. :+1: - a few thoughts, though they're by no means deal breakers:\n- You're creating a global shop object if one doesn't exist, but then you're defining shop (line 3) as a local. If this code was wrapped in an IIFE, you'd be creating two objects which could be potentially tricky to diagnose. One way around this is to initialize the object (window.shop = window.shop || {}) then add properties and functions to it below, like shop.init = function(){...} (no var keyword). Added benefit: no need to use commas to separate properties. Alternatively, you could add properties to the shop's prototype like shop.prototype.init = function(){...}, but that may add unnecessary complexity\n- Personally, I like to reserve el for a single element like Backbone does. That may just be preference though\n- I appreciate the DOM caching - 'tis good practice, though there's a few other selectors throughout. Maybe stuff all of them into your DOM cache object (el currently)?\nAll in all though, I feel this is much more extensible and readable :)\n. Comments are still in the conversation view under \"Show outdated diff\", but yep, that's what I meant! \n:rooster::dash:\n. :+1:\n. ",
    "corbinjensen": "Hi Carson,\nSorry I just looked into the issue and its not resolved: I took a look and\ncould see the id's you were asking for in product.liquid, and followed it\nback to shop.js.liquid\nHere is the code in product.liquid:\n{% comment %}\nRich snippets (itemscope, itemtype, etc.) for products are a theme\nrequirement,\n  and allow search engines to easily understand what the content is.\nFor more information on these Scheme.org tags, visit:\n    - http://schema.org/docs/gs.html\n{% endcomment %}\n\n\n\n  {% include 'breadcrumb' %}\n  \n\n      {% comment %}\n        If we only have one product image, show a large version of it.\n        If we have more than 1, show it then loop through the rest as\nthumbnails.\n      {% endcomment %}\n      {% if product.images.size == 0 %}\n        \n\n\n      {% else %}\n        \n\n\n\n\n        {% comment %}\n          If we have more than one product image, loop through them and\ncreate thumbnails.\n          By default, images will link to their grande size (600x600).\n          Thumbnail swapping is enabled in shop.js.liquid.\n        {% endcomment %}\n        {% if product.images.size > 1 %}\n          \n            {% for image in product.images %}\n              \n\n\n\n\n            {% endfor %}\n          \n        {% endif %}\n      {% endif %}\n    \n\n\n\n\n{{ product.title }}\n\n        {% if product.available %}\n          \n        {% else %}\n          \n        {% endif %}\n        {% comment %}\n          ID addToCartForm is a selector for the ajaxify cart plugin\n        {% endcomment %}\n        \n          {% comment %}\n            Add product variants as a dropdown.\n              - By default, each variant (or combination of variants) will\ndisplay as its own \n              - To separate these into multiple steps, which we suggest,\nuse option_selection.js (see below)\n            You can leverage jQuery to add a callback on page load and each\ntime the select element changes:\n              - Include option_selection.js (as seen at the bottom of this\nfile)\n              - This allows you to use JavaScript anytime the variant\ndropdown changes\n              - This also separates out your variant options (ie. size,\ncolor, etc.) to separate select elements\n            For more information on products with multiple options, visit:\n              -\nhttp://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid\n          {% endcomment %}\n          \n            {% for variant in product.variants %}\n              {% if variant.available %}\n                {% comment %}\n                  Note: if you use option_selection.js, your  tag\nwill be overwritten, meaning what you have inside  will not reflect\nwhat you coded below.\n                {% endcomment %}\n                \n                  {{ variant.title }} - {{ variant.price |\nmoney_with_currency }}\n                \n              {% else %}\n                \n                  {{ variant.title }} - Sold out\n                \n              {% endif %}\n            {% endfor %}\n          \n          {% comment %}\n            Optionally show the 'compare at' or original price of the\nproduct.\n          {% endcomment %}\n          \n            {{ product.price | money }}\n          \n          {% if product.compare_at_price > product.price %}\n            \n              Compare at:\n              {{ product.compare_at_price_max | money }}\n            \n          {% endif %}\n          {% comment %}\n            Quantity selector is optional\n          {% endcomment %}\n          {% if settings.product_quantity %}\n            Quantity\n\n          {% endif %}\n          \n\n\n          {{ product.description }}\n        \n\n      {% comment %}\n        If the user is on a collection product page (ie with\n/collections/collection-handle/products/product-handle)\n        in the URL, we can show next/previous links to other products in\nthe collection.\n      {% endcomment %}\n      {% if collection %}\n        {% if collection.previous_product or collection.next_product %}\n          \n          {% if collection.previous_product %}\n            {% capture prev_url %}{{\ncollection.previous_product}}#content{% endcapture %}\n            \n              {{ '\u2190 Previous Product' | link_to: prev_url }}\n            \n          {% endif %}\n          {% if collection.next_product %}\n            {% capture next_url %}{{ collection.next_product}}#content{%\nendcapture %}\n            \n              {{ 'Next Product \u2192' | link_to: next_url }}\n            \n          {% endif %}\n          \n        {% endif %}\n      {% endif %}\n    \n\n  {% if settings.related_products %}\n    {% assign grid_item_width = 'large--one-fifth medium--one-half' %}\n    {% include 'related-products' %}\n  {% endif %}\n\n{% comment %}\n  To take advantage of a callback on the select dropdown, add\noption_selection.js\n  and customize the JS below as you need. This is only needed on pages where\n  product variants are accessible, so doesn't need to live in theme.liquid.\nCurrently, the code below does:\n    - Hides your  tag from above\n    - Breaks out the product variants into separate product options, if\nmore than one exists\n    - Generates a  tag for each product option\nCallback notes:\n    - Keep the callback available to the global scope\n(window.selectCallback) so that advanced\n      addons can override it.\n      * E.g. multiple currencies\nhttp://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies\n{% endcomment %}\n{{ 'option_selection.js' | shopify_asset_url | script_tag }}\n\nvar selectCallback = function(variant, selector) {\n  var addToCart = $('#addToCart'),\n      productPrice = $('#productPrice'),\n      comparePrice = $('#comparePrice');\n  if (variant) {\n    if (variant.available) {\n      // We have a valid product variant, so enable the submit button\n      addToCart.removeClass('disabled').prop('disabled', false).val('Add to\nCart');\n    } else {\n      // Variant is sold out, disable the submit button\n      addToCart.val('Sold Out').addClass('disabled').prop('disabled', true);\n    }\n    // Regardless of stock, update the product price\n    productPrice.html(Shopify.formatMoney(variant.price, \"{{\nshop.money_format }}\"));\n    // Also update and show the product's compare price if necessary\n    if ( variant.compare_at_price > variant.price ) {\n      comparePrice\n        .html('Compare at: ' +\nShopify.formatMoney(variant.compare_at_price, \"{{ shop.money_format }}\"))\n        .show();\n    } else {\n      comparePrice.hide();\n    }\n  } else {\n    // The variant doesn't exist, disable submit button.\n    // This may be an error or notice that a specific variant is not\navailable.\n    // To only show available variants, implement linked product options:\n    //   -\nhttp://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options\n    addToCart.val('Unavailable').addClass('disabled').prop('disabled',\ntrue);\n  }\n};\njQuery(function($) {\n  new Shopify.OptionSelectors('productSelect', {\n    product: {{ product | json }},\n    onVariantSelected: selectCallback\n  });\n  // Add label if only one product option and it isn't 'Title'. Could be\n'Size'.\n  {% if product.options.size == 1 and product.options.first != 'Title' %}\n    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first\n}}</label>');\n  {% endif %}\n  // Hide selectors if we only have 1 variant and its title contains\n'Default'.\n  {% if product.variants.size == 1 and product.variants.first.title\ncontains 'Default' %}\n    $('.selector-wrapper').hide();\n  {% endif %}\n  // Auto-select first available variant on page load. Otherwise the\nproduct looks sold out.\n  {% assign found_one_in_stock = false %}\n  {% for variant in product.variants %}\n    {% if variant.available and found_one_in_stock == false %}\n      {% assign found_one_in_stock = true %}\n      {% for option in product.options %}\n      $('.single-option-selector:eq({{ forloop.index0 }})').val({{\nvariant.options[forloop.index0] | json }}).trigger('change');\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n});\n\nHere is the Contents of my shop.js.liquid:\nwindow.timber = window.timber || {};\ntimber.cache = {\n  // General\n  html: $('html'),\n  body: $('body'),\n// Product Page\n  mainImage: $('#productPhotoImg'),\n  thumbImages: $('#productThumbs').find('a.product-photo-thumb'),\n  newImage: null\n}\ntimber.init = function () {\n  timber.cache.html.removeClass('no-js').addClass('js');\n// Run on load\n  timber.productImageSwitch();\n}\ntimber.productImageSwitch = function () {\n  if ( !timber.cache.thumbImages.length ) {\n    return;\n  }\n// Switch the main image with one of the thumbnails\n  // Note: this does not change the variant selected, just the image\n  timber.cache.thumbImages.on('click', function(e) {\n    e.preventDefault();\n    timber.cache.newImage = $(this).attr('href');\n    timber.cache.mainImage.attr({ src: timber.cache.newImage });\n  });\n}\n// Initialize Timber's JS on docready\n$(function() {\n  window.timber.init();\n});\nOn Thu, Aug 14, 2014 at 10:15 AM, Carson Shold notifications@github.com\nwrote:\n\nClosing this issue for now. Let me know if you're still experiencing\nissues.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/issues/163#issuecomment-52188465.\n\n\n\nCorbin Jensen\n\nCell/Voicemail: 416 206 3315\nSkype: corblog\n. Can I share a site thats not live yet?\nhttp://anthem-hardware.myshopify.com/\nI will try the code again I think it was a bad paste:\nProduct.liquid\n{% comment %}\nRich snippets (itemscope, itemtype, etc.) for products are a theme\nrequirement,\n  and allow search engines to easily understand what the content is.\nFor more information on these Scheme.org tags, visit:\n    - http://schema.org/docs/gs.html\n{% endcomment %}\n\n\n\n  {% include 'breadcrumb' %}\n  \n\n      {% comment %}\n        If we only have one product image, show a large version of it.\n        If we have more than 1, show it then loop through the rest as\nthumbnails.\n      {% endcomment %}\n      {% if product.images.size == 0 %}\n        \n\n\n      {% else %}\n        \n\n\n\n\n        {% comment %}\n          If we have more than one product image, loop through them and\ncreate thumbnails.\n          By default, images will link to their grande size (600x600).\n          Thumbnail swapping is enabled in shop.js.liquid.\n        {% endcomment %}\n        {% if product.images.size > 1 %}\n          \n            {% for image in product.images %}\n              \n\n\n\n\n            {% endfor %}\n          \n        {% endif %}\n      {% endif %}\n    \n\n\n\n\n{{ product.title }}\n\n        {% if product.available %}\n          \n        {% else %}\n          \n        {% endif %}\n        {% comment %}\n          ID addToCartForm is a selector for the ajaxify cart plugin\n        {% endcomment %}\n        \n          {% comment %}\n            Add product variants as a dropdown.\n              - By default, each variant (or combination of variants) will\ndisplay as its own \n              - To separate these into multiple steps, which we suggest,\nuse option_selection.js (see below)\n            You can leverage jQuery to add a callback on page load and each\ntime the select element changes:\n              - Include option_selection.js (as seen at the bottom of this\nfile)\n              - This allows you to use JavaScript anytime the variant\ndropdown changes\n              - This also separates out your variant options (ie. size,\ncolor, etc.) to separate select elements\n            For more information on products with multiple options, visit:\n              -\nhttp://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid\n          {% endcomment %}\n          \n            {% for variant in product.variants %}\n              {% if variant.available %}\n                {% comment %}\n                  Note: if you use option_selection.js, your  tag\nwill be overwritten, meaning what you have inside  will not reflect\nwhat you coded below.\n                {% endcomment %}\n                \n                  {{ variant.title }} - {{ variant.price |\nmoney_with_currency }}\n                \n              {% else %}\n                \n                  {{ variant.title }} - Sold out\n                \n              {% endif %}\n            {% endfor %}\n          \n          {% comment %}\n            Optionally show the 'compare at' or original price of the\nproduct.\n          {% endcomment %}\n          \n            {{ product.price | money }}\n          \n          {% if product.compare_at_price > product.price %}\n            \n              Compare at:\n              {{ product.compare_at_price_max | money }}\n            \n          {% endif %}\n          {% comment %}\n            Quantity selector is optional\n          {% endcomment %}\n          {% if settings.product_quantity %}\n            Quantity\n\n          {% endif %}\n          \n\n\n          {{ product.description }}\n        \n\n      {% comment %}\n        If the user is on a collection product page (ie with\n/collections/collection-handle/products/product-handle)\n        in the URL, we can show next/previous links to other products in\nthe collection.\n      {% endcomment %}\n      {% if collection %}\n        {% if collection.previous_product or collection.next_product %}\n          \n          {% if collection.previous_product %}\n            {% capture prev_url %}{{\ncollection.previous_product}}#content{% endcapture %}\n            \n              {{ '\u2190 Previous Product' | link_to: prev_url }}\n            \n          {% endif %}\n          {% if collection.next_product %}\n            {% capture next_url %}{{ collection.next_product}}#content{%\nendcapture %}\n            \n              {{ 'Next Product \u2192' | link_to: next_url }}\n            \n          {% endif %}\n          \n        {% endif %}\n      {% endif %}\n    \n\n  {% if settings.related_products %}\n    {% assign grid_item_width = 'large--one-fifth medium--one-half' %}\n    {% include 'related-products' %}\n  {% endif %}\n\n{% comment %}\n  To take advantage of a callback on the select dropdown, add\noption_selection.js\n  and customize the JS below as you need. This is only needed on pages where\n  product variants are accessible, so doesn't need to live in theme.liquid.\nCurrently, the code below does:\n    - Hides your  tag from above\n    - Breaks out the product variants into separate product options, if\nmore than one exists\n    - Generates a  tag for each product option\nCallback notes:\n    - Keep the callback available to the global scope\n(window.selectCallback) so that advanced\n      addons can override it.\n      * E.g. multiple currencies\nhttp://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies\n{% endcomment %}\n{{ 'option_selection.js' | shopify_asset_url | script_tag }}\n</p>\n<p>var selectCallback = function(variant, selector) {</p>\n<p>var addToCart = $('#addToCart'),\n      productPrice = $('#productPrice'),\n      comparePrice = $('#comparePrice');</p>\n<p>if (variant) {\n    if (variant.available) {\n      // We have a valid product variant, so enable the submit button\n      addToCart.removeClass('disabled').prop('disabled', false).val('Add to\nCart');</p>\n<p>```\n} else {\n  // Variant is sold out, disable the submit button\n  addToCart.val('Sold Out').addClass('disabled').prop('disabled', true);\n}</p>\n<p>// Regardless of stock, update the product price\nproductPrice.html(Shopify.formatMoney(variant.price, \"{{\n```</p>\n<p>shop.money_format }}\"));</p>\n<p><code>// Also update and show the product's compare price if necessary\nif ( variant.compare_at_price &gt; variant.price ) {\n  comparePrice\n    .html('Compare at: ' +</code></p>\n<p>Shopify.formatMoney(variant.compare_at_price, \"{{ shop.money_format }}\"))\n        .show();\n    } else {\n      comparePrice.hide();\n    }</p>\n<p>} else {\n    // The variant doesn't exist, disable submit button.\n    // This may be an error or notice that a specific variant is not\navailable.\n    // To only show available variants, implement linked product options:\n    //   -\nhttp://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options\n    addToCart.val('Unavailable').addClass('disabled').prop('disabled',\ntrue);\n  }\n};</p>\n<p>jQuery(function($) {</p>\n<p>new Shopify.OptionSelectors('productSelect', {\n    product: {{ product | json }},\n    onVariantSelected: selectCallback\n  });</p>\n<p>// Add label if only one product option and it isn't 'Title'. Could be\n'Size'.\n  {% if product.options.size == 1 and product.options.first != 'Title' %}\n    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first\n}}</label>');\n  {% endif %}</p>\n<p>// Hide selectors if we only have 1 variant and its title contains\n'Default'.\n  {% if product.variants.size == 1 and product.variants.first.title\ncontains 'Default' %}\n    $('.selector-wrapper').hide();\n  {% endif %}</p>\n<p>// Auto-select first available variant on page load. Otherwise the\nproduct looks sold out.\n  {% assign found_one_in_stock = false %}\n  {% for variant in product.variants %}\n    {% if variant.available and found_one_in_stock == false %}\n      {% assign found_one_in_stock = true %}\n      {% for option in product.options %}\n      $('.single-option-selector:eq({{ forloop.index0 }})').val({{\nvariant.options[forloop.index0] | json }}).trigger('change');\n      {% endfor %}\n    {% endif %}\n  {% endfor %}</p>\n<p>});\n<em>\n----------------------------------------------------------------------------------------\n--------------------------------------------\n-------------------------------\nShop.js.liquid\nwindow.timber = window.timber || {};\ntimber.cache = {\n  // General\n  html: $('html'),\n  body: $('body'),\n// Product Page\n  mainImage: $('#productPhotoImg'),\n  thumbImages: $('#productThumbs').find('a.product-photo-thumb'),\n  newImage: null\n}\ntimber.init = function () {\n  timber.cache.html.removeClass('no-js').addClass('js');\n// Run on load\n  timber.productImageSwitch();\n}\ntimber.productImageSwitch = function () {\n  if ( !timber.cache.thumbImages.length ) {\n    return;\n  }\n// Switch the main image with one of the thumbnails\n  // Note: this does not change the variant selected, just the image\n  timber.cache.thumbImages.on('click', function(e) {\n    e.preventDefault();\n    timber.cache.newImage = $(this).attr('href');\n    timber.cache.mainImage.attr({ src: timber.cache.newImage });\n  });\n}\n// Initialize Timber's JS on docready\n$(function() {\n  window.timber.init();\n});\nOn Mon, Aug 18, 2014 at 4:42 PM, Carson Shold notifications@github.com\nwrote:\n\nHey, it's hard to decipher your issue with the full code you pasted there.\nAre you able to share your shop's URL?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/issues/163#issuecomment-52552009.\n\n\n\nCorbin Jensen\n\nCell/Voicemail: 416 206 3315\nSkype: corblog\n. ",
    "CWSites": "I'm also having the same problem. I compared product to what is in the current release and they are both correct. This is a sample page: http://galilee-of-the-nations.myshopify.com/collections/featured-music/products/who-will-go\n. Thanks!\n. ",
    "meganraddatz": "I'm also having this problem now, but in Firefox. Once I manually set the image height to a px value, the problem stopped for me, but it still seems like a weird issue to be having.\n. ",
    "christopherlobay": "This looks good, but I'm not sure if it's a great example to link to for partners, considering a bunch of functionality is in the shop.js.liquid file which is a very Timber specific thing.\n. Looks good to me!\n. ",
    "tylerball": "@cshold this is a public repo with lots of watchers, is \"quiet\" an honour system thing?\n. ah cool! Just asking.\nOn Wed, Aug 13, 2014 at 2:14 PM, Carson Shold notifications@github.com\nwrote:\n\nYes, completely honour system. It's already been released in the partners\nblog so it's public knowledge, but isn't usable unless a beta flag is\nenabled.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/179#issuecomment-52087885.\n\n\nTyler Ball\nWeb Developer \u2014 Shopify\n. I don't think it's necessary that theme files be nested in a folder, the theme gem ignores any files outside of its whitelist.\nAlso curious as to why you're using grunt and gulp?\n. Okay I'll admit I didn't understand the full scope of this PR. I also didn't know what grunt-shopify is. It's a reimplementation of the theme syncing tool in a grunt task. So are those 'stray files' problems present in the actual theme gem or in this javascript port?\n. Sure! @stevenmichaelthomas might want to jump in too.\n. ",
    "jonasll": "@suture Absolutely, they should be internationalized.\n. Piing @tzaid @vernalkick -> Discussions on improving default gift card template and including CSS as part of theme stylesheet instead of global asset.\n. Only on Timber as far as I can see atm.\n. Can't reliably reproduce, but seems to be appearing on dev shops.\n. Just happened again on my store, nothing specific as error in form:\nhttp://cl.ly/image/211Y0i0V1a0Z\n. This is indeed a bug that will be fixed in the next revision. Tab and key ordering should reflect the order in the default JSON file. Thanks for pointing this out\n. lgtm\n. ## fr\nGrid View: Grille\nList View: Liste\npt\nGrid View: Grelha\nList View: Lista\npt-BR\nGrid View: Grelha\nList View: Lista\nde\nGrid View: Gitteransicht\nList View: Listenansicht\nes\nGrid View: Tabla\nList View: Lista\n. k cool\n. Timber leverages Shopify's translation engine to let any developer or merchant easily create their own theme language. <a href=\"http://docs.shopify.com/themes/theme-development/translations\" class=\"docs-link\">Learn more about theme internationalization</a>.\n. ",
    "fredryk": "You should be redirected, yeah @cshold. I haven't seen this before.\n. This is fantastic dude! We really could have used this a few weeks ago when we first started styling our theme's checkouts.\n. Great catch, @cshold! That will come in handy.\n. cc/ @Shopify/design-gurus\n. Looks great. Thanks, @cshold!\n. Awesome stuff, @cshold. This is just what I wanted.\n. Yuss! thanks, @cshold :)\n. Ten snippets lighter! I'm all for this, and the list of exceptions.\n. Looks good. Nuke it!\n. @Thibaut knows most about this issue. I'm looping him in for some insight.\n. :+1: :ship: \n. This is a bit misleading, @cshold. I think we should say something more along the lines of: \n\n\"Sorry, this collection does not contain any products.\"\n. \n",
    "qLb": "Just a thought about snippets/site-nav.liquid\nat the part that says: {% if link.active %}class=\"site-nav--active\"{% endif %}\ni recomend changing it to class=\"{% if link.active %}site-nav--active{% endif %}\" because it couse improper behavior while adding .site-nav other classes. \n. when u got it your way {% if link.active %}class=\"site-nav--active\"{% endif %} you cannot declare inherited classes for all siblings including the active one. missplaced statement above simply clears all the other classes when it's on if 'link.active'. the solution is to move the statement\ndeclaration into the quotation marks so the statement is valid like this \nclass=\"{% if link.active %}site-nav--active{% endif %} modified-class-1 modified-class-2\"\nhope it helps\n. ",
    "JustinRegterschot": "I am having the same 'problem'. I want to show something on small devices and the class looks like this now to make it work: \"small--show medium--hide large--hide\".. ",
    "shoshanna": "Using clearfixes is an okay workaround, but the grid-uniform class is more convenient.  If anyone has made a mixin to make grid-uniform work with silent classes that would be very useful!\n. I have the same question. I'm not seeing the discount on the cart yet, how is it supposed to work?\n. Aha, in that case just letting it overlap does seem like the best solution. I moved everything back the way it was and removed is-moved-by-drawer from the page content, so this:\n<div id=\"PageContainer\" class=\"is-moved-by-drawer\">\nbecame this:\n<div id=\"PageContainer\">\nI also changed the height on .js-drawer-open because when I opened the menu from the fixed header it was jumping to the top of the page. I changed this:\n.js-drawer-open {\n  height: 100%;\n}\nto this:\n.js-drawer-open {\n  height: auto; \n}\nSo hopefully that's the fix. \nThanks so much for your advice!\n. Great, thanks so much for the detailed answer!\n. Great, thanks for looking at this!\n. ",
    "jessabean": ":heart: :sparkles:\n. ",
    "pauldpritchard": "I lean towards making this work in both directions. The most common flow for a customer to add a product is to interact with the thumbnails first, decide what they like, and then approach the variant/add to cart area, which would already reflect whatever product image they left off on. Going back to interact with the images out of curiousity in the middle of that flow would occur less often.\n. If every one of our themes is going to include frontpage content, frontpage products, frontpage collections and a carousel, it would be ideal to have these all set up in a consistent way for us to build from each time.\nWould it make sense to have a different branch of Timber for our own internal use? That way we could include all our standard features, and smaller tweaks (like vertical image centering) that we'll want on every theme anyways. \nThe outside-facing Timber still makes sense as something that is relatively featureless and open to whatever the dev wants to do with it, but we can speed internal dev and consistency by having our own version/branch of Timber.\n. In that case, page content sounds like it fits more into the sandbox repo than Timber itself.\n. \nThe price isn't quite right-aligned with everything else\nAny particular reason for not having an indicator while the add to cart request is running? If its a matter of keeping assets trim, you could just retitle the button during the request to \"Adding...\"\nOtherwise, all good on my end.\n. ",
    "addedlovely": "A couple of different approaches, both use the images to select variant:\nhttp://shop.carhartt-wip.com/gb/men/sweats/sweatshirts/I015897/hooded-chase-sweatshirt\nhttp://www.amazon.co.uk/Fruit-Loom-Heavy-Cotton-T-Shirt/dp/B0078F87EQ/ref=sr_1_2?ie=UTF8&qid=1411400755&sr=8-2&keywords=tshirt\nIn your use case above, if someone has selected to view the green t-shirt, chances are they want to buy the green tshirt. This is feedback we've had from user testing. \n. In our clients' case, products with variants only have images that are related to a variant. The one or two products that do have additional images are stylistically very different (ie. a detail or crop shot).\nI think this distinction would be ok. It seems the inconsistencies exist in the UX exist either way. But by changing the variant from a thumbnail interaction, I'd suspect, it would be more consistent for most use cases.\n. Any news on the 'clean' / official way to implement this. Be good to have a timeline to feedback to my client.\n. @carolineschnapp why has this been closed, it's still not resolved in Timber?\n. @carolineschnapp thanks for the update! Yeah \"off topics\" must be a right pain.\n. ",
    "mikcole": "Awesome, glad I found this thread. Super easy and clean to implement using a snippet.\nGreat functionality.\nthanks!\n. ",
    "iltempovola": "Hi guys, I have set up my shop about a week ago and this is an issue for me too. I suggest this gets prioritized in Timber. Thanks Caroline for the temp code!\n. ",
    "nisha0123": "Hi guys, I am using that code in GRID Theme ( https://themes.shopify.com/themes/grid/styles/minimal ) but it is not working in this theme. Can you help me for this issue? let me know if you want to site link?\nThanks!\n. You means it is not possible in my site?\n. ",
    "RMKama": "@carolineschnapp THANK YOU! Finding your solution for this has absolutely made my day.\n. ",
    "kevinfinlayson": "Note: have only touched locale files at this point, not the templates.\n. A bit late to the discussion, but I wanted to point out that some phrases may be included in the locale file because the order of their constituent elements differs depending on the languages supported. I'm not sure this is the case with any of the keys here, but it's something to keep in mind.\nAnother consideration is that full phrases in locale files makes themes much more customer-friendly in terms of copyediting. \n. ",
    "plankguy": "If anyone is wondering, I got this working calling the Currency.convertAll() method within a ajaxComplete handler in the currencies.liquid snippet outlined in the above manual entry:\n{% if settings.ajax_cart %}\n    /* Update ajax cart with currency */\n    $(document).ajaxComplete(function() {\n        Currency.convertAll(defaultCurrency, Currency.currentCurrency);\n        if( Currency.currentCurrency !== defaultCurrency ) {\n            jQuery('._currencyNote').show();\n            jQuery('._selectedCurrency').text(Currency.currentCurrency);\n        } else {\n            jQuery('._currencyNote').hide();\n        }\n    });\n{% endif %}\nI'm also show/hiding a currency note/explanation. There's likely a more elegant solution, but this does the job!\n. ",
    "lesterdefreitas": "Having same issue. Would be good to have an all-round solution.\nQuestion: Where exactly should this code be placed in the currencies.liquid file?\n. Thanks Carson,\nWe dealing specifically with the new Brooklyn theme, and can't get this issue solved. The only we have found is to force a page refresh on a currency change so that the AJAX cart also refreshes. A little but rudimentary though, we would like a better solution.\n. Dudes, this is insane, our client had this exact issue, and this is the exact solution. Don't you love it when that happens. :D Thanks Carson!!\n. ",
    "narzero": "@cshold thanks a lot!\n. There's a new, small, issue:\nWhen the cart is empty,\nAnd I add one new product,\nThe cart count and cart get updated (so when I open the cart modal, I see the added product in the list).\nBut when I add a second product,\nThe cart count (top right corner) get's updated,\nBut when I open the cart modal, the second product is not in the list.\nTake a look: http://goo.gl/nx2hh.\nHow could I solve this?\nEdit:\nIt looks like the cart modal stops updating the products added after it's opened and closed manually.\n. @cshold updating to showModal to\nshowModal = function (toggle) {\n    $body.addClass('ajaxcart--is-visible');\n    Shopify.getCart(cartToggleCallback);\n  };\nworked.\nNote: \nUsing Shopify.getCart(cartUpdateCallback); didn't work so I changed it to Shopify.getCart(cartToggleCallback);.\nMight be good to update the SO answer.\nThanks again.\n. I solved this by reinitialising ajaxifyShopify every time the new products finished rendering using infinite-ajax-scroll's rendered event.\nCopy and paste the following code in collection.liquid:\n```\n\nvar ias = jQuery.ias({\n  container:  '#products',\n  item:       '.single-product',\n  pagination: '.pagination-custom',\n  next:       '.next'\n});</p>\n<p>ias.extension(new IASSpinnerExtension({\n  src: '{{ \"spiffygif_36x36.gif\" | asset_url }}'\n}));</p>\n<p>ias.on('rendered', function(data, items) {\n  jQuery(function($) {\n    ajaxifyShopify.init({\n      method: '{{ settings.ajax_cart_method }}',\n      wrapperClass: 'wrapper',\n      formSelector: '#addToCartForm',\n      addToCartSelector: '#addToCart',\n      cartCountSelector: '#cartCount',\n      toggleCartButton: '.cart-toggle',\n      useCartTemplate: true,\n      btnClass: 'btn',\n      moneyFormat: {{ shop.money_format | json }},\n      disableAjaxCart: false,\n      enableQtySelectors: true\n    });\n  });\n})\n \n```\n. The code above solved the problem of not being able to add a product to the cart with ajaxify using the add to cart button, but brought a new issue.\nWhen scrolling down to the 20 new products loaded by infinite-ajax-scroll , ajaxifyShopify get's initialized for the second time on the first 20 products. When adding one of the first 20 products to the cart, they get added twice.\nHow do I unbind ajaxifyShopify from the page?\nI've tried replacing the default ajaxifyShopify initialisation on theme.liquid with:\n```\njQuery(function($) {\n    ajaxifyShopify.init({\n      method: '{{ settings.ajax_cart_method }}',\n      wrapperClass: 'wrapper',\n      formSelector: '#addToCartForm',\n      addToCartSelector: '#addToCart',\n      cartCountSelector: '#cartCount',\n      toggleCartButton: '.cart-toggle',\n      useCartTemplate: true,\n      btnClass: 'btn',\n      moneyFormat: {{ shop.money_format | json }},\n      disableAjaxCart: false,\n      enableQtySelectors: true\n    });\n  });\nconsole.log('ajaxifyShopify initialized for the first time');\nvar ias = jQuery.ias({\n    container:  '#products',\n    item:       '.single-product',\n    pagination: '.pagination-custom',\n    next:       '.next'\n  });\nias.extension(new IASSpinnerExtension({\n    src: '{{ \"spiffygif_36x36.gif\" | asset_url }}'\n  }));\nias.on('rendered', function(data, items) {\n    console.log('ias rendered');\n// Unbind ajaxifyShopify\n$(\"html\").off(\"ajaxifyShopify\");\nconsole.log('ajaxifyShopify off');\n\n// Initialize ajaxifyShopify\njQuery(function($) {\n  ajaxifyShopify.init({\n    method: '{{ settings.ajax_cart_method }}',\n    wrapperClass: 'wrapper',\n    formSelector: '#addToCartForm',\n    addToCartSelector: '#addToCart',\n    cartCountSelector: '#cartCount',\n    toggleCartButton: '.cart-toggle',\n    useCartTemplate: true,\n    btnClass: 'btn',\n    moneyFormat: {{ shop.money_format | json }},\n    disableAjaxCart: false,\n    enableQtySelectors: true\n  });\n\n  console.log('ajaxifyShopify initialized from ias');\n});\n\n})\n```\nBut it doesn't work.\n. ",
    "stevenmichaelthomas": "++ to @tylerball's comment about grunt and gulp\nIs there any concern about this moving away from the theme gem and introducing another workflow, or is there a believe that a node-based workflow makes more sense for theme development? The functionality would be a definite plus, but would it be better to focus on improving the theme gem to handle some of this? \nI'm asking these things as legitimate questions, as I don't know the answer. These are just the things that came to mind when looking at this. \n. Sounds great. @graygilmore want to fly to toronto to join in? :)\n- Steven Thomas\nOn Mon, Oct 27, 2014 at 4:48 PM, Tyler Ball notifications@github.com\nwrote:\n\nSure! @stevenmichaelthomas might want to jump in too.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/Timber/pull/258#issuecomment-60666407\n. Spacing is weird here. \n. \n",
    "humancopy": "It got all mixed up when I merged latest master with the fork ... Let me know if you're interested in this change and I'll make a new pull :)\n. Yes, would be happy to do it. ~~I'll add it to this pull request.~~  Couldn't find where to update the docs. :)\n. I added more triggers and fixed the namespace. I've implemented this in a few projects and it's been working great.\nLet me know what we can do to push this forward, I'm happy to help with anything needed. \nHave a beautiful weekend.\nPeace ;)\n. Removed redundant events. Docs look really good, well done! :)\n. Unfortunately I can't squash because I merged stuff from the Shopify/Timber as I needed to keep it up to date cause I was using it for some projects, sorry. If you have an idea how to resolve this I'm happy to follow... ;)\n. Done, changed it in a couple of other places also ;)\n. I changed all to before / after / error / complete events. The before trigger I didn't use but thought to add it as I was already there. :)\n. Oops, done ;)\n. No worries, done... Let me know if need any help with docs. :)\n. updateQuantity is not always getting triggered which is why I put this one here\n. Another reason is access to the element which isn't available inside updateQuantity\n. I was using it mainly for when the quantity in the cart was changed and then to easily get the id of the variant but that can easily be done using line for the position of the item in the cart and grabbing it from the input ... So I'll remove this, you're right it's just redundant and confusing... :)\n. ",
    "ingueferroque": "Perhaps I am asking the wrong question, basically, I'm trying to figure out what is telling Timber's Ajax Cart plugin to print the feedback near the Add to Cart button. Because for me it puts the feedback text at the bottom of my form. I've tried everything but can't locate what is causing it.\n. ",
    "aphillips8": "No problem.\n. ",
    "haani": "That looks :cool: !\n. Thanks @haeky! :+1: \n. ",
    "nickjj": "It didn't happen before the font update. It was happening on your demo store and my modified theme based on Timber using IE8 under Windows 7 32bit.\n. ",
    "robinbirr": "Thanks, nice to hear it.\n. ",
    "spuddick": "I have been playing around a lot with Timber. I created my own approach to a mobile menu. Take a look at this theme I'm working on (same theme, but different settings):\nhttp://fun-playful-demo.myshopify.com/\nhttps://demo-store-1-21.myshopify.com/\nhttps://elegant-demo.myshopify.com/\nI think this goes along nicely at least with the drawer cart animation (if you haven't noticed from other posts I know the drawer pretty well, hehe). I don't think it will fit very well with the other cart animations though. \n. Ah..looks like I can't push to Timber.git. Well, you can take a look with Chrome inspector/Firebug, etc to see what I've done. \n. Glad you found it useful! \nNot sure if saw my other comment in another issue thread, but I am actually working on my own modification to Ajaxify.js to incorporate a mobile nav (as well as other components). I am working on my Shopify application and getting something ready to show you all :). You can take a look at https://demo-store-1-21.myshopify.com/ and see what I have done so far.\n. ",
    "afshing": "@cshold , is it ok to continue fixing other i18n issues in master branch?\n. There is only a look-and-feel issue with this fix, that I am not sure how Shopify team fix this type of issues.\nIn the \"Check Out\" text, if I switch to French, the padding is not enough. \n\nOne solution can be making the button bigger, or define specific css for each language, or make the size adjustable regarding to the text length.\n. fixed @cshold \n. :+1:\n. ",
    "seeReadCode": "What's the story on this page not being in the Timber repo?\n. I did the same as I imagine a few others have.  That said, it would be nice to have liquid code from their example in the Timber repo.  There are also values that need to be added to the locale file if I remember correctly.\n. ",
    "ccmeyers": "+1\n. If you create a password.liquid file in your templates folder, Shopify will automatically render it. I took the following code from https://docs.shopify.com/themes/development/templates/password-liquid and built on that to customize it.\n```\n{% unless shop.password_message == blank %}\n  {{ shop.password_message }}\n{% endunless %}\n{% form 'storefront_password' %}\n{{ form.errors | default_errors }}\nEnter store using password:\n\n\n{% endform %}\n```\n. I totally agree. And yes, you're right about adding values to the locale file. See pull request #499 \n. This broke for me as well until added these values. I vote merge this pull request (and add the password.liquid template for that matter)\n. ",
    "Woland2k": "It seems like that is a non intended side affect functionality as there is no such tag as \"for/else\" in liquid. There is only \"if/else\".\n. Same error is in collection.list.liquid (there is no \"else\" in for, not sure how your parser doesn't generate any exception):\n```\n  {% for product in collection.products %}\n{% include 'product-list-item' %}\n\n{% else %}\n<div class=\"grid__item\">\n  <p>{{ 'collections.general.no_matches' | t }}</p>\n</div>\n\n{% endfor %}\n```\n. Thanks, I can see it now.\n. ",
    "mfelser": "That can lead to an empty  tag in the cart template. In my store, I check for a default title and use a conditional in the handlebars template.\n. ",
    "dillonbailey": "Fair question. Most people will not utilise more than 10 or so of the icons, but I wonder if the standardisation would offer a better opportunity for folks to extend instead of the current custom icons font that is being used?\nThat also provides a number of icons that someone may or may not use, granted 500 is many more at least these are implemented in a standard fashion across the web.\nNot sure the best way to assess which is best.\n. Great suggestion, I was completely unaware of IcoMoon's app. Definitely agree that's the best solution.\nI placed a note in the timber.scss.liquid and pull request adding the source of the font icons.\nDB\n. ",
    "HandHugs": "fontello has great customizable font options as well. It includes icomoons as well as many other great icon libraries.\n. ",
    "haeky": "ping @cshold \nShould I add documentation?\n. Is that clear enough in your opinion @cshold?\n. I'm not sure if the tests are CircleCI related. If someone fork the project, he doesn't really need CircleCI?\n. ## i18n testing\nTests make sure there are no missing/extra i18n strings or invalid html in your locale liquid files.\nAll PRs must pass the tests before being merged. Check the test status with the following.\n-  bundle install to install all the dependecies\n- rspec spec to run all the tests\n. For this repository yes, but if you fork the project for your own theme, you'll have to setup CircleCI by yourself\n. I'll see what I can do!\n. This one won't probably go away but it should for the next ones.\n. ",
    "sydneykaiserman": "The above-mentioned fix unfortunately brakes the grid on all pages expect for collection pages. I love Timber but the inability to add a breakpoints is a real problem I think. Adding breakpoints is especially important for collection pages which heavily rely on the grid. Is there another solution for adding breakpoints?\n. @Cam, thank you for chiming in! I looked all over the internet for this. Essentially, loading ajax cart on page load (rather than on open cart drawer) allows a user to view the items in the cart without having to click on anything. I am working on a very common implementation that will show the ajaxified cart in a drop down menu that just fades in when hovering the Cart link, rather than clicking on a link to display the cart. The problem I am having is the same as  that the DOM is not populated with the ajaxified cart until the cart button is clicked on. How does one instantiates the ajax cart without the toggle cart button?\n(The suggested workaround shown on this thread: https://github.com/Shopify/Timber/issues/265 seems very simple but I could not make it work - and the link from Carson no longer works.)\n@mdunbavan, where you able to find a way to create the ajaxified cart on load?\n. ",
    "anisval": "I just came out with a workaround that may be useful for your use case. With the idea from @cshold the clearfix problem is gone but the whole helper classes (hide, show, display-table...) will be \"broken\". Everywhere where large--* appears, should be added a xlarge--* and that would be too much work.\nWhat I have done is following:\n```scss\n/============================================================================\n  #Breakpoint and Grid Variables\n==============================================================================/\n$viewportIncrement: 1px;\n$small: 480px;\n$medium: 768px;\n$large: 769px;\n$xlarge: 1110px;\n$postSmall: $small + $viewportIncrement;\n$preMedium: $medium - $viewportIncrement;\n$preLarge: $large - $viewportIncrement;\n$preXLarge: $xlarge - $viewportIncrement;\n/================ The following are dependencies of csswizardry grid ================/\n$breakpoints: (\n  'small' '(max-width: #{$small})',\n  'medium' '(min-width: #{$postSmall}) and (max-width: #{$medium})',\n  'medium-down' '(max-width: #{$medium})',\n  'large' '(min-width: #{$large})',\n  'large-to-xlarge' '(min-width: #{$large}) and (max-width: #{$preXLarge})',\n  'xlarge' '(min-width: #{$xlarge})'\n);\n$breakpoint-has-widths: ('small', 'medium', 'medium-down', 'large', 'large-to-xlarge', 'xlarge');\n$breakpoint-has-push:  ('medium', 'medium-down', 'large', 'large-to-xlarge', 'xlarge');\n$breakpoint-has-pull:  ('medium', 'medium-down', 'large', 'large-to-xlarge', 'xlarge');\n```\nWith this code, large classes will still be working as expected and you would just need following classes in the collection pages\nliquid\nxlarge--one-quarter large-to-xlarge--one-third medium--one-half. ",
    "NathanPJF": ":+1: \n. @cshold I don't have permissions to make a PR for this, so I was hoping you could take look at my suggested fix.\n. No worries, I just did it for a merchant.  It looked good after a quick look through, but we'll see if anything blows up on the site.\n. :cool: \n. If I add it to the \"#Images and Iframes\" section, should I just replace img.auto with img?  Is there a case where you'd need the same declaration for both selectors?\nHaving img.auto gives you some added specificity, so maybe it's useful to have when you need to chain some classes together?\n. Closing this.  Fixed in https://github.com/Shopify/Timber/pull/562\n. Regarding Slate: \n The NPM package is indeed public and the documentation site is live.  This was done awhile ago to help with early test groups.  The original private NPM group and a docs site behind a password was really hurting external testing.\n The plan is to make the repos for Slate public shortly and put clear messaging that the Timber framework and Skeleton theme are no longer being maintained.\n* Everyone is welcome to use Slate from the links above, but keep in mind it is in beta and until the repos are public there's no designated spot to ask questions about it.. LGTM \ud83d\udea2 \n. Small item : {{key}} isn't being passed on the cart page - screenshot here.\nIssue lies in how qtySelectors() is sending data to the id=\"JsQty\" script template.\n. \ud83c\udfa9  - looks great, dude!\n. @weareeight A potential solution is to move your translation strings as data attributes in the HTML wrapping your cart in theme.liquid.  Then your JS asset will read from the DOM, instead of explicit strings in the JS file itself.\nhtml\n<div class=\"cart__container\" data-empty=\"{{ 'general.cart.cart_empty' | t | json }}\" data-checkout=\"{{ 'general.cart.proceed_to_checkout' | t | json }}\">\n  ... \n</div>\n. @cshold Cool, will do.\n@tlandru thanks for bring this up.  I agree Shopify can do something about this render blocking.  Something worth noting about the solutions proposed:\n\nonly include this css file on the cart page.\n\nThese additional checkout buttons can be used in ajax carts which appear on multiple pages.  So we don't want to limit it to /cart.  Doc link: https://help.shopify.com/themes/customization/cart/add-more-checkout-buttons-to-cart-page#show-checkout-buttons-in-a-cart-drawer-popup-or-sidebar\nUpdate: Found out why additional-checkout-buttons.css when no buttons rendered - Safari/Apple Pay.\n\ndo not include this css file if no additional checkout buttons are configured.\n\nThis is the current behaviour.  If you do not have PayPal Express Checkout setup, or other express payment buttons, then additional-checkout-buttons.css will not be requested.  This includes having Apple Wallet enabled under your credit card provider (screenshot).  Even if you're using Chrome which does not support Apple pay, Shopify will request the stylesheet - there's no client detection involved in deciding whether to load this.. Eager beavers!  I promise you when this isn't just a branch/PR that link will work. \ud83d\ude09 . @MatthewKennedy It's the repo that supports that docs site and hosts the src files for Slate.\nI won't be merging this until the linked repo is open.. I know it's a bit late in the game, but I was wondering about the fact this says #QrCode and not #qr-code.\nIn the default template provided by Shopify they're using #qr-code.  Also, in the mark up Kevin asked us to copy from, the id used is #qr-code.\n. That makes a lot of sense to me; I would say this warrants a change.\n. Since this is talking about cartItem.line_price, this can be:\njavascript\noriginalLinePrice: Shopify.formatMoney(cartItem.original_line_price, settings.moneyFormat)\n. This can be:\njavascript\ndiscountsApplied: cartItem.line_price === cartItem.original_line_price ? false : true\n. Based on my comments above, this can be : \nhtml\n<small class=\"ajaxcart-item__price-strikethrough\"><s>{{{originalLinePrice}}}</s></small>\n. Me and Obama. https://www.reddit.com/r/CGPGrey2/comments/5p7p64/til_president_obama_also_uses_double_spaces_after/\n. ",
    "spring-91": "Thanks Carson, that worked a treat. However I'm getting a slight issue with a couple of outputs by doing that. On both the {{price}} and {{totalPrice}} its outputting a span...\n<span class=\"money\">\naround the value in the browser, so what I'm seeing in the actual browser is \nTotal:<span class=\"money\">\u00a360.00</span>\ninstead of just 'Total: \u00a360.00'. Any ideas why this is happening?\n. Ah, thats what it is, so we added a currency switcher using this tutorial which requires putting that  in the currency formatting section in the admin. Is there a way around this so that we can still use the currency switcher and it not output the  as text in the browser? \nMy shop URL is http://hatch-inc-tester-store.myshopify.com - please excuse the mess, we\u2019re focusing on the functionality and structure before styling etc. \nThanks for your help so far, appreciate it. \n\nOn 12 Mar 2015, at 13:18, Carson Shold notifications@github.com wrote:\nHm, what's your shop URL I could take a look. Nothing in default Timber has class=\"money\" in it. I doubt it, but maybe your money format has that hard coded in there? You can check that on your default settings page.\n\u2014\nReply to this email directly or view it on GitHub.\n. This is exactly what we needed so thank you, really helpful!\n\nJust to be sure as we are building this to be a theme for the theme store, will this cause any issues with regards to that?\nThanks again\n\nOn 12 Mar 2015, at 15:43, Carson Shold notifications@github.com wrote:\nThe fix below is unique to your shop, so this same trick might not work exactly for others. Essentially we're going to change how the money is formatted in JS in two areas so that those spans are not output. It's a hacky solution, but should work for your case.\nAround line 816 of ajaxify.js.liquid, add the following new code:\nvar newPrice = Shopify.formatMoney(cartItem.price, settings.moneyFormat).replace('', '').replace('', '');\nAnd line 827 from price: Shopify.formatMoney(cartItem.price, settings.moneyFormat) to price: newPrice.\nThis will make sure each product's price doesn't have those spans in there.\nWe'll do something similar to adjust the total cart price. After $.each code block, around line 832, add the following:\nvar totalCartPrice = Shopify.formatMoney(cart.total_price, settings.moneyFormat).replace('', '').replace('', '');\nThen on line 836 change totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat), to totalPrice: totalCartPrice,\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey Carson, \n\nThats such a better solution, thanks for taking the time improve it for me! \n. Thanks so much, this should help a lot, been stuck on this for a little while!\n. Thanks for getting back to me so quickly.\nI've made the changes and put the following function in below the timber.drawersInit to test to see if it works. I'm getting an alert on page load but then the drawers won't open. Clicking on 'Cart' takes you to the Cart Page.\njQuery(function afterClose() {\n  alert(\"Closed\");\n});\nIs it something I've done? Have I written the function wrong?\nThanks again.\n. Sure its here.\n. Ah perfect thank you, I tried that way originally but got confused, many thanks for helping with this. You're awesome!\n. Great, thanks for confirming that for me. I'll have a go with what you have suggested.\nThanks again!\n. Sorry I've realised I didn't make it clear in my question. I meant any links outside of the drawer still look as though you can click on them because they change colour on hover etc. when the drawer is open. \nWould I still need to edit the code you suggested or is that specifically for links within the drawer? Also apologies for the delay in reply I missed the email.\nThanks for your help.\n. Awesome, i'll implement that now. Thanks Carson!\n. ",
    "jtgrenz": "sorry!!!! @cshold Thought I was merging to my forked repo. \n. @AWaselnuk at-query('100px') wouldn't work in either case. Existing code using strings for the values should work the same since they would be defined with long form of the function or they would be passing in $min or $max to the constraint. Anyone trying to use the short form with a string would trip an error though, but if you forget to add null right now, you also get an error. \nThere is an article on casting string values to numbers but its definitely overkill. \n. Looks good to me. So do the doc updates\n. Doc update looks good to me.\n. Merged \n. ",
    "snookca": "I'm a bigger fan of using named arguments. \n. ",
    "AWaselnuk": "The type-of check seems brittle to me. What if someone does at-query('100px')?\n. Agreed that casting would be a bad idea.\nAs long as an error is thrown for invalid argument type then it should be fine.\n. ",
    "peterblazejewicz": "@cshold Thanks for great explanation!\n. ",
    "gopinathpara": "Hi Chris, I've sorry i pasted wrong url.\nhere is the correct url http://orangegubbi.com/ \nThanks\n. I've fixed the js errors and you can access the preview site here http://sirius-interior.myshopify.com/?preview_theme_id=10955881 \nThanks :)\n. pardon me  , can you be little more specific ?\n\"If you want to get rid of the delay, you could try triggering the cart opening earlier with a loader icon.\"\nThanks\n. ",
    "schaeken": ":+1:  tested it and its perfect :)\n. Awww thanks carson!!!!! :D\n. Found it!\n. What is more important than \"recent articles\" on the blog page. The blog title? That's an h1. The footer headings are h3s. So the \"recent articles\" heading kinda makes sense as an h2 but are we assuming merchants don't use headings in their blog content?\nI really hope the new RTE will have one type of heading or at the most a subheading for the merchant to use. Then they will input all the h2s and h3s in the theme and we can put our headings into lower priority. Maybe we should leave h2s for the merchant?\n. ",
    "benknight": "I think understand the confusion here.  I think what I expected was that abstracting font-size to the em function would allow you to modify just the base font size variable and have all typography on the site scale accordingly.  However, as em is implemented, no matter what $baseFontSize is em will always output a value in em that will cause it to be the exact pixel value passed in as the parameter.\nThen I wonder what is the point of the em function?  Given the browser landscape there is no longer a case for setting all font sizes in em units.  I believe the reason we used to do this was due to inconsistent zoom functionality in browsers, but today all browsers implement \"page zoom\", allowing authors to set hard pixel values for all text.\nAlso, if em is indeed behaving exactly as intended, then I feel like this framework is missing a mechanism through which authors can set one base font size and have all headings, etc scale accordingly.  Specifically, I'm building a site and instead of having a 14px body font I want to use 18px.  When I set $baseFontSize to 18px however, buttons, inputs, headings, etc all stay the same size instead of scaling according to the ratio of 14px/18px.\n. Bump\n. Closing this as invalid, acknowledging that there's actually a strong case still for sizing all text with ems so as not to break a user's font size settings.\n. Thanks @cshold.  After all I would say this:\nThere's no bug here.  In my opinion, em() is functioning as expected.  I had originally confused the purpose of the $baseFontSize / em() system as being so that you would only have to adjust $baseFontSize variable and all other typography would scale up proportionally, but em()'s output stays faithful to its pixel argument regardless of $baseFontSize.  This does make changing font sizes a bit tedious since if you want to maintain Timber's proportions, you have to update every single em() call site.  In my case I wanted my base font size to be 18px, not 14px, and I wanted my headings to get bigger too.\nI think the original intent of using ems was so that you can override the body font-size in a media query and have all text scale accordingly, which is nice.  Using the rem unit here instead would add some sanity, since ems can get nasty when you're overriding a parent's em font size in a child element's styles.\n. Happy to submit a pull request if authors agree. :)\n. Having a \"prefix-all-the-things\" mixin is simple and straightforward solution but not particularly elegant nowadays since the need to prefix anything is quickly disappearing.  Almost nothing requires -moz- or -o- (user-select is the only one that comes to mind and that's because it's non-standard).\nUsing the wrapper pattern like we're doing here for transform will prevent devs from having to memorize which prefixes are needed for commonly-used CSS features.   For less commonly-used features, think of the prefixer as a low-level convenience mixin.  These are the cases where a dev should be taking an extra 10 seconds to check http://caniuse.com and see which prefixes are needed instead of just carpet bombing the stylesheet with all of them, especially since these can be features that are non-standard and have varying behavior across browsers.\n. Assuming backface-visibility is being used to fix screen flicker during animations, I suspect it may no longer be necessary.  Still though, I've added the backface mixin back in the interest of getting this pull request merged.  In a separate pull request I'll submit some suggestions for runtime rendering performance improvements, including using will-change to promote layers to keep the drawer transitions under 60 fps.\n. Hey @cshold, is there anything more you'd like me to do to make this shippable?  Let me know :+1: \n. Alright, I also updated the comment block to match the other ones.  I think we're good to go!\n. Also, if you guys want me to actually put this on a Shopify dev account (let me know what the best way is to do that), I can demonstrate how this code actually does make an improvement to the frame rate of these animations.\n. Thanks for merging.  It had been pending my providing a demo store link but I was ultimately too lazy to bother.  Glad it worked out! :palm_tree: :palm_tree: \n. When it comes to the rendering optimization game IE's pretty much left out of the conversation since, as far as I know, they have never (historically) offered these kind of tools to developers, nor any insight into how their rendering engine actually works.  However, the beauty of the standardized will-change property, as opposed to translateZ, is it's not implementation specific, and so any rendering optimization that IE does build should be based off of this property, making this code \"future-proof\".\n. ",
    "Samlilli": "Aha... \"You can use item.product_title and item.variant_title - a semi-recent and undocumented addition\" - Gavin from TalkShopify\nAlso just realised this is available in the most recent version. My bad!\n. ",
    "davidcornu": "Ping @cshold \n. :tada: \n. ",
    "lukeclifton": "@cshold Thanks for the reply, and sorry for the delay.\nI guess i was trying not to make any changes to the ajax-cart.js file, and just override the itemAddedCallback function in my own theme code.\nThis is my custom itemAddedCallback function, as you can see i'm doing a check based on a hidden input in the form and then redirecting to another page if the input exisits:\n```\n/ ---------------------------------------------\n * Custom itemAddedCallback function\n * ---------------------------------------------\n * This custom function override is needed to handle the option to redirect to the diamond selector page or not.\n * This would be true if a product with a diamond has just been added.\n * The option is set by the existence of a hidden form input named: redirect_to_diamond_selector\n \n * The second 'form' param was also added for this itemAddedCallback function so we can get the extra form params\n */\nitemAddedCallback = function (product, form) {\n    // If the form has a hidden input named 'redirect_to_diamond_selector' then we need to redirect to diamond seletor page\n    if ($(form).find('[name=\"redirect_to_diamond_selector\"]').length) {\n\n        // Get the form params\n        var params = jQuery(form).serialize();\n\n        // Call the diamond selector page\n        window.location.replace('/pages/diamond-selector?' + params);\n\n    // Otherwise a normal product has just been added, so just show the normal ajax cart drawer\n    } else {\n\n        $addToCart.removeClass('is-adding').addClass('is-added');\n\n        ShopifyAPI.getCart(cartUpdateCallback);\n    }\n};\n\n```\nI guess its just nesscessary to edit the ajax-cart.js file, right?\n. OK thanks for the explanation!\nI would argue that it would actually be easier for non savy coders to find which part of code their looking for by having snippets. I've seen themes hacked by non savvy coders and because theres just one big template they start putting bits of code in the wrong places and it all gets very messy. I think best practice should be encourged by the inital theme build.\nBut as you said, developers can always break up theme.liquid if they desire.\nGood to know your reasoning though.\nThanks!\n. We were experiencing a similar issue to what @softlimit has mentioned. The following solution seems to have worked for us:\nAdd a child  .drawer-content div directly inside the .drawer parent div.\nGive the child .drawer-content div the following style: \n.drawer-content {\n    height: 100%;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\nAnd also add position: fixed; to the .drawer class\nThis solution ensures that the drawer always scrolls vertically and the body does not move while the drawer open.\n. ",
    "alrick": "Sure : \nhttp://tdmdev-2.myshopify.com/products/abebalsa-bl\nPassword : merora\n. Thank you!\nI've made the modifications, it's working great except that both disappear with the .slideUp() effect, and then one come back at the refresh : \n\n. Perfect! tyvm\n. Thank you for the fix, that was fast :+1: \n. ",
    "grahambarry": "Here is a changelog to edit ajax-cart.js.liquid and ajax-cart-template.liquid in order to fix the remove all similar items despite them being unique through line item properties.\nWherever it has a minus \"-\" sign at the beginning of a line replace with the plus line beginning with a \"+\" sign directly underneath it. It works for me. :)\nAjax Cart Patch Diff.txt\n. ",
    "gina-gregory": "Yep, seems to work for me.\n. Looks like it does give an alert if the item is sold out and you had added one to your cart previously and then try to increase the quantity. But it does not give an alert/error if there is not enough inventory to increase your cart quantity to.\n. ",
    "kenwheeler": "If you guys need any features or support on my side for a future Slick integration just let me know\n. ",
    "gagankhokhar": "thankyou\n. ",
    "samueldiggins": "I'm trying to replace the default Timber product gallery with Slick, and already have the thumbnail/main image slider syncing working. However,  I'm struggling to update the main image when a new variant is selected in the option dropdown. This seems to be handled within timber.js.liquid:\nif (variant.featured_image) {\nvar newImg = variant.featured_image,\nel = $productImage[0];\nShopify.Image.switchImage(newImg, el, timber.switchImage);\n}\n...but I can't seem to trigger the image to update within Slick. Any ideas, @kenwheeler?\n. ",
    "lukekhamilton": "+1\n. ",
    "cameronroe": "+1 Yes, ideally using bower with a build tool (gulp) would be highly recommended. Even if code needs to be flattened when pushing to Shopify, the src files should be modular and managed with versioned packages. Also, it would be great to support sub-folders in the assets folder in general (js, img, scss), those can also be flattened if needed.\n. This is a shame, without modular partials, the code is messy and difficult to iterate on effectively. Any chance this will be supported in the near future?\n. @Cam Anything monolithic is hard to reason about. Sad to hear that you'd rather keep everything in one file.. doesn't seem modular at all. :/\n. Yeah, I've already created a modular set up for me, but I think it could definitely improve Timber by having partials. You can use cmd+f to search for that section, but it still makes sense to use partials because it helps people see the actual files all in the same place. In the code you have to search around and it's less verbose.\n. ",
    "zackkrida": ":+1:  Been using this for awhile and definitely a performance improvement.\n. ",
    "admanami": "@Cam No, there are no other instances. Ty.\n. ",
    "Thibaut": "This issue is being tracked inside Shopify. It's not a straightforward fix because the address object passed to the form comes from a loop over the customer's addresses, which might be paginated over in different ways. We haven't given up on the bug though.\n. ",
    "akshayshivpuri": "Looking for the same solution. Were you able to implement the solution spring-91?\n. ",
    "zacwasielewski": "This isn't really Timber's fault. Shopify adds an id to the link generated by the customer_login_link filter:\n```\nInput:\n{{ 'Log in' | customer_login_link }}\nOutput:\nLog in\n```\nOn every page, Timber creates two navigation menus (desktop/mobile), each containing a login link. Deleting one of those menus is the only way to solve the problem you reported.\nThe real solution would be for Shopify to change that id to a class:\n<a href=\"/account/login\" class=\"customer_login_link\">Log in</a>\n. That would work \u2013 but if Shopify changes their login link URLs, then all Timber-based themes will break.\nFor some themes, it may be worth hardcoding login links in order to please the validator. That's a tradeoff the theme designer should consider. But Timber should \"do the right thing\" by default and play by Shopify's rules, even if they're a bit broken.\n. ",
    "cmanspeaker": "Ah gotcha, that explains it. Yeah I need to make sure I've got the latest version of this file as my copy only has three items under general. Thank you for your help.\n. ",
    "wardpenney": "Thanks for Timber, btw! I've used it on a couple projects in the last year, and this bug seems new to me.\n. @cshold It looks like it works for me as well with my test shop.\nI will try to figure out what's going on with my client's shop. When I do a Timber theme, with their product data, the issue manifests.\nThanks for looking, and I'll post back when I figure it out. \n. @cshold It turns out I was choosing a variant that did not exist, and not handling the null state for that. Thanks for your help!\n. ",
    "montalvomiguelo": "Yahh You right... I have updated the files :)\n. Ahaaa! I have the cart & hamburger buttons together\n1.- I have clicked the cart icon to show the Sopping Cart right drawer\n2.- Without closing the Shopping Cart I have clicked the hamburger menu to show the navigation in left drawer\nAt this point this this just looks bad but... If You try to click the left drawer you get that error too many times\n\n. It`s getting better but still having the max callstack size exceeded error each time you click the drawers.\n\nAlso before opening a new drawer, other Drawer instances should be closed.\n. Sure\n. ",
    "chrisbo": "Noticed the same issue with the New Standard template yesterday. Raised it with support about 24-hours ago - which was initially like talking to a brick wall. Eventually, the so called guru said he would elevate it. No reply yet though.\n. ",
    "paulmason": "Thanks @cshold, I've created that pull request https://github.com/Shopify/Timber/pull/491\n. ",
    "marshall993": "Also recieving this issue when both carts are open at the same time, javascript error reads \"Maximum call stack size exceeded\" and keeps generating thousands of errors.\n. You da man thanks!\n. Hi Cam,\nThanks for the response please let me clarify the index content is held by this snippet:\n\n {{ content_for_layout }}\n\nBut everything in the index file is held between the wrapper based off the theme.liquid file so I cannot break out of the container seeing as the file is inside of this.\n. Sorry it stripped the code please see attached\n\n\n. Hi Cshold,\nJesus didn't even think of that thanks a million!!\n-Scott\n. @cshold thanks for the update!\n. ",
    "mytram": "I ran into the same issue. The issue seems to disappear when I commented out the following line in timer.js.liquid. \n// this.trapFocus(this.$drawer, 'drawer_focus');\nI haven't dug into it to find the root cause.\nCheers\n. ",
    "JumpLink": "+1\nWe have the same problem, $container.focus() is the bad guy.\nI've fixed that to comment out the following lines:\n```\n  Drawer.prototype.trapFocus = function ($container, eventNamespace) {\n    var eventName = eventNamespace ? 'focusin.' + eventNamespace : 'focusin';\n$container.attr('tabindex', '-1');\n\n// Uncaught RangeError: Maximum call stack size exceeded.\n// $container.focus();\n\n// $(document).on(eventName, function (evt) {\n//   if ($container[0] !== evt.target && !$container.has(evt.target).length) {\n//     $container.focus();\n//   }\n// });\n\n};\n```\n. ",
    "Shine18": "hmmmm, thanks for telling me\nOn Sun, Sep 20, 2015 at 9:53 PM, Carson Shold notifications@github.com\nwrote:\n\nClosed #470 https://github.com/Shopify/Timber/issues/470.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/issues/470#event-414214556.\n\n\nGreat Blessings and Lovings from me.\nKind Regards,\nAakash Ahmed\n. ",
    "christianblais": "Deploying the fix right now.\n. Deployed. Can we confirm it works? Works on my shop, but that's only one theme.\n. ",
    "sinak": "Thanks for fixing this so quickly!\n. ",
    "t-kelly": "^ + :+1: \n. ",
    "tikn": "collection.all_tags bug, not theme bug, i hope Shopify resolve this quickly.\n. ",
    "jellyc0la": "Thanks. Code looks fine, is there any way I can :tophat: ? \n. @blboyle Sorry, a few gotchas\nOne is that the beta flag name was changed from passbook to apple_pass. \nThe other is that non alphanumeric characters other than spaces are currently not allowed for the pass title, and your shop name has an exclamation point. I'll fix that today. \nThe last one is that you button won't download a pass if the shop is password protected. \nI was able to go into your shop, add the new beta flag, enable apple wallet, and get it to appear: \nhttps://checkout.shopify.com/gift_cards/10007292/cd7c26541fb53b0b64b4bc9ce11cc66c \n. ",
    "blboyle": "This seems like it works, but we don't see the Apple wallet button for some reason. \nhttps://checkout.shopify.com/gift_cards/10007292/preview this should show you the example of the new gift card page in my test store.\n. @NathanPJF \nCan you take another look?\n. ",
    "ukk000": "There was some lnkr.js notification that flashed quickly before going to the href, I'll check what it was.\n. ",
    "ScottJr": "@carolineschnapp Yeah I mean that is obvious.  But just like the rest of the framework it comes responsive out of the box.  There is no responsive element to that page.\n. ",
    "rubenbristian": "Sure, i can do that.\n. ",
    "iamkevingreen": "Strange, It wasn't an issue initially, but I moved to another shopify store (for production purposes) and suddenly this became an issue, the shopify default ones were no longer working so I had to set them in this file which resolved my issue. \n. ",
    "panoply": "Timber JS is pretty lean, only contains small logics, so you can get away with that one imo, I believe you could even throw it in a concat/compression stream and just reference its dir location in your gulp/grunt stream.  Here is the SCSS Timber 2.1.5 split into multiple files https://github.com/Panoply/timber-modular/tree/master/src that you can generate using the plugins/hacks in my repo.\n. Fixed headers are a necessity in 2016 and wherever there's a will, there's a way. You will need to tweak your timber file and structure and if you're going to do that begin by splitting up you layout into more manageable sections and logical chunks. In essence, you modularize the layout. I'm using a sticky fixed heading on a current project i'm working on  (+ several other additional components, which include basket.js & jquery-pjax). In mobile, simply turn it off using media queries. \nSome important things to note here. You cannot nest childs within the .is-moved-by-drawer class, if you do, you will have issues like the page scrolling to top when opening the cart  and if you're running chrome  position: fixed;  will fail due to translateZcss3 transition (see here for further reading on that). You can also, if you don't want to break the framework apart and not to concerned about a max-width apply a  position:absolute; to .js-drawer-open + little bit of javascript. \nFor some better reference, see my below theme layout structure:\n```\n\n Drawers :: Include Drawers \n  {% include 'layout--drawer-nav' %}\n  {% include 'layout--drawer-cart' %}\n Container :: Page Container \n\n<!-- Header :: Head Elements -->\n<header role=\"banner\">\n  {% include 'layout--header' %}\n</header>\n\n<!-- Main Menu :: Desktop Navigation -->\n<nav role=\"navigation\">\n  {% include 'layout--navbar' %}\n</nav>\n\n<!-- Main :: Template Content -->\n<main role=\"main\" class=\"is-moved-by-drawer\" data-pjax-container>\n\n  <!-- Data :: Dormant Element  -->\n  <div class=\"wrapper\">\n    {{ content_for_layout }}\n  </div>\n\n  <!-- Pjax Initialise :: PushState + Ajax -->\n  {% include 'js--inline' %}\n</main>\n\n<!-- Footer :: Base Element -->\n<footer>\n  {% include 'layout--footer'%}\n</footer>\n\n\n Cart :: Initialize Ajax Cart (init) \n\n    jQuery(function($) {\n      ajaxCart.init({\n        formSelector: '#AddToCartForm',\n        cartContainer: '#CartContainer',\n        addToCartSelector: '#AddToCart',\n        cartCountSelector: '#CartCount',\n        cartCostSelector: '#CartCost',\n        moneyFormat: {{ shop.money_format | json }}\n      });\n    });\n    jQuery('body').on('ajaxCart.afterCartLoad', function(evt, cart) {\n      timber.RightDrawer.open();\n    });\n  \n Currencies :: Shopify Asset \n\n    basket\n    .require({\n      url: '//cdn.shopify.com/s/javascripts/currencies.js',\n      key: 'cdn.shopify-currencies'\n    },{\n      url: '{{ 'currencies.js' | asset_url  }}',\n      skipCache: true \n    });\n  \n  {% include 'js--cart-template' %}\n\n```\n\n. ",
    "softlimit": "Thanks, @cshold. I can't seem to replicate on demo shop anymore. We adjusted our cart to move the Check Out button to the top to help with the issue... though it still seems to happen occasionally. It definitely has something to do with WHERE the tap to scroll is initiated. Let me see if I can get a screencast together... ok to send that to your email?\n. Thanks, @lukeclifton! That seems to do the trick!\n. ",
    "matcaissy": ":+1: \n. @NathanPJF squashed and updated with price in the locale strings. Mind another :eyes: Thx :)\n. @cshold Please see https://github.com/Shopify/shopify-themes/pull/3347#issuecomment-220394997\n. \ud83d\udc4d  from me\n\n. Thanks for the feedback @cshold @schaeken. I began looking at article.liquid so updating the sidebar headings from h4 to h2 made sense there:\n\nSince it's the same snippet, it has to also work on blog.liquid\n\nHow about changing to a h3? Recent Articles h3 in this example. Looks better when the comments are added:\n\n. Updated: blog sidebar headings to h3\n. @cshold I have updated blog tags and categories to h3 in the blog-sidebar.liquid which makes more sense for Timber. Should we leave collection tags title as h3? For now, we have updated them as h2 in this PR, and as well in Supply - see commit. \n\nLet us know - we can revert to h3 in Supply. cc/ @jeremystephencobb\n. @cshold @ruairiphackett did another fix in this commit: https://github.com/Shopify/Timber/pull/564/commits/124079dabe2d5526e18ce799f3e71b7b843277fb\nUpdated demo: link\n. Sorry folks, here's the demo: link\n. Closing down, will revisit themes a11y in a new project (Q2?). :+1: \n. > If it's never aria-hidden=true you don't have to set the attribute at all. Unset is the same as \"false\"\nAgreed. I missed that out. \n. ",
    "vosters": "I'm having the same issue. I'm using a different id, yet the other drawer still opens and lays on top of the new drawer.. ",
    "danielwilber": "@suture @cshold hey guys, any update on Slate?. ",
    "walidmahade": "@suture @cshold hey guys, any update on Slate?\nEverything on shopify is getting old.. ",
    "henrymilleruk": "When was Slate officially launched ??\nOn 10 March 2017 at 14:05, Ricky Cox notifications@github.com wrote:\n\nhttps://shopify.github.io/slate/\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Shopify/Timber/issues/524#issuecomment-285676834, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ALG1p6eRoPeUdakcTdJKqTVsloqh03_5ks5rkViogaJpZM4H53nS\n.\n. \n",
    "MatthewKennedy": "If anyone is interested I have a drop in Flexbox Grid replacement for the default Slate CSS Grid.\nhttps://github.com/MatthewKennedy/Flexbox-grid-replacment-for-Shopify-Slate\nNothing wrong with the default CSS Grid that comes with the Shopify Slate npm theme, but with the Flexbox Grid you get some of the bonus Flexbox usability baked into the grid.\nMatthew Kennedy\nMatthew Kennedy\n\nOn 10 Mar 2017, at 14:15, henrymilleruk notifications@github.com wrote:\nWhen was Slate officially launched ??\nOn 10 March 2017 at 14:05, Ricky Cox notifications@github.com wrote:\n\nhttps://shopify.github.io/slate/\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Shopify/Timber/issues/524#issuecomment-285676834, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ALG1p6eRoPeUdakcTdJKqTVsloqh03_5ks5rkViogaJpZM4H53nS\n.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. I'm looking to do the same, load cart on page load, any ideas? @sydneykaiserman did you manage to do this and how?. Here is a link to one site with the css fix removed, if you open the menu then open the submit then close the menu you should get a side scroll\nOn 6 Sep 2016, at 16:35, Carson Shold notifications@github.com wrote:\nDo you have a link to a shop where we can see the issue? What browser(s) did it happen in?\nAdding !important styles like this isn't ideal.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/Shopify/Timber/pull/573#issuecomment-244991092, or mute the thread https://github.com/notifications/unsubscribe-auth/ABLuvnxOAMfDgV6s7ysZC3YlG6dRD2ovks5qnYhKgaJpZM4J0h7e.\n. https://tkastore-2.myshopify.com/pages/about-us\nOn 6 Sep 2016, at 21:50, Matthew Kennedy m.kennedy@me.com wrote:\nHere is a link to one site with the css fix removed, if you open the menu then open the submit then close the menu you should get a side scroll\n\nOn 6 Sep 2016, at 16:35, Carson Shold notifications@github.com> wrote:\nDo you have a link to a shop where we can see the issue? What browser(s) did it happen in?\nAdding !important styles like this isn't ideal.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/Shopify/Timber/pull/573#issuecomment-244991092, or mute the thread https://github.com/notifications/unsubscribe-auth/ABLuvnxOAMfDgV6s7ysZC3YlG6dRD2ovks5qnYhKgaJpZM4J0h7e.\n. I think it could be something to do with the jQuery email subscribe modal.\n\nOn 16 Dec 2016, at 21:29, npruzaniec notifications@github.com wrote:\nHaving a lot of trouble tracking down specific causes of this, but the Timber menu button on our site https://agnesbethel.com https://agnesbethel.com/ works when the site first loads, but after clicking on the logo, or choosing an item in the navigation once, or sometimes, 2-3 times, the menu button stops working. This seems to be the case on all desktop and mobile Safari versions I've tested.\nDesktop Safari 10.0.2\niOS 10.1.1 (AppleWebKit 602.2.14)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/Shopify/Timber/issues/605, or mute the thread https://github.com/notifications/unsubscribe-auth/ABLuvm8k4V7RnqaG-L1wSiubsDH518AYks5rIwK3gaJpZM4LPnH-.\n\n\n. Any link to the slate project? \nMatthew Kennedy\n\nOn 22 Dec 2016, at 23:07, hanihsdd notifications@github.com wrote:\nShopify announced a new Theme Kit earlier in the year called Slate, so Timber support is being phased out. I think it was supposed to launch this year, but hopefully it will be around soon.\nFYI \u2013 quite a few of the free Shopify themes have now implemented Sections too such as Brooklyn, Venture, and Boundless etc. It can be useful to view those as well.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Good spot, think this is an area where Shopify could improve how it uses the head content rather than a timber theme issue.. 404 on that Slate link.\n\nMatthew Kennedy\n\nOn 22 Mar 2017, at 05:25, Nathan Ferguson notifications@github.com wrote:\nDeprecation warning that Timber is no longer supported.\nMessaging for developers to use Slate to follow Shopify theme development.\nUpdated info in README about getting support and links to additional resources.\n@Shopify/themes-team\n/cc @cshold\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/Shopify/Timber/pull/620\nCommit Summary\nadd warning, update links, remove out-of-date stuff\nremove support message\nadd issue and pr template\nFile Changes\nA .github/ISSUE_TEMPLATE.md (6)\nA .github/PULL_REQUEST_TEMPLATE.md (6)\nM README.md (41)\nPatch Links:\nhttps://github.com/Shopify/Timber/pull/620.patch\nhttps://github.com/Shopify/Timber/pull/620.diff\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Is it any different to this: https://shopify.github.io/slate/ \n\nMatthew Kennedy\n\nOn 22 Mar 2017, at 12:50, Nathan Ferguson notifications@github.com wrote:\nEager beavers! I promise you when this isn't a branch that link will work. \ud83d\ude09\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "noobcola": "Bump!\n. ",
    "chrbmol": "Hey! \nIt is billig-fitnessdk.myshopify.com\nI have tried that, but still not working \n\nDen 19/04/2016 kl. 15.01 skrev Carson Shold notifications@github.com:\najaxifyShopify should be ajaxCart. The rest of the code looks good. What's your shop URL?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. I have tried it out now - It is not working, and only breaking the cart? \n\nMvh\nChristian M\u00f8ller fra\nwww.billig-fitness.dk http://www.billig-fitness.dk/\nTlf: 42 83 10 33 \nMail: cm@billig-fitness.dk mailto:cm@billig-fitness.dk \n\nDen 19/04/2016 kl. 16.10 skrev Carson Shold notifications@github.com:\najaxifyShopify\n. \n",
    "richgcook": "+1 for this... ideally the cart should still function (and at least keep the error message).\n. Thanks @Cam.\nI believe this is what I am after...\n```\nupdateCountPrice = function (cart) {\n    if ($cartCountSelector) {\n      $cartCountSelector.html(cart.item_count).removeClass('hidden-count');\n  if (cart.item_count === 0) {\n    $cartCountSelector.addClass('hidden-count');\n  }\n}\nif ($cartCostSelector) {\n  $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));\n}\n\n};\n```\nI am unsure where cart.item_count is called from?. Thanks @canardos!. Unfortunately not. original price is showing the new price... not the original price.\n\n\n. @cshold Thanks! I will keep looking too.. Yeah I thought it was strange it wasn't returned. I wonder why it's considering 'less important' for the cart?\nI'd just like to be as clear with visitors as possible... when it's in the cart and shows the discounted price it would be nice to show how much they're saving/original price etc (whereas currently I can only do this with compare_at_price). I would've thought original_price would've worked... strange that all the prices show the discounted price.. Yeah that's a good point. But I see that as a separation between product and cart discount but I think it could still add confusion. Ah well... if it's not part of the API and therefore not possible then ah well but thanks for the replies and explanations.. ",
    "e316": "+1 i am having the same issue \n. ",
    "js42721": "Fixed syntax error in first commit.\n. ",
    "ButsAndCats": "I think this is related to chrome not being able to render position:fixed on elements under a transformation. Therefore a quick fix can be implemented by not transforming the page-container. You want your (s)css to be something like this:\nInput\n```\n /*\n.is-moved-by-drawer {\n  @include promote-layer(); \n  transition: $drawerTransition;\n.js-drawer-open-left & {\n    @include transform(translateX($drawerNavWidth));\n  }\n.js-drawer-open-right & {\n    @include transform(translateX(-$drawerCartWidth));\n  }\n}\n*/\n```\nOutput\n```\n.is-moved-by-drawer {\n    / -webkit-transform: translateZ(0); / Remove this \n    / will-change: transform; / and this\n    transition: all 0.4s cubic-bezier(0.46, 0.01, 0.32, 1);\n}\n.js-drawer-open-right .is-moved-by-drawer {\n    /-ms-transform: translateX(-300px); / and these.\n    / -webkit-transform: translateX(-300px); /\n    / transform: translateX(-300px); /\n}\n```\nOf course doing so will mean that your whole page won't move left on drawer open, as I said though this is a quick fix. Personally I was happy to make this sacrifice. Just increased the z-index of the drawer to ensure it was higher than the fixed header.\n. ",
    "Lisa-Vanderschuit": "Looks good to me on my test shop. The whitelist idea is great \ud83d\udc4d \n. ",
    "jamalsoueidan": "Issue is fixed, I was using Shopify Theme Mac App for auto-uploading the files. \nWhen pasting all four at the same time in the folder Shopify Theme Mac App should have uploaded all four files, but it doesn't! Only the first one and ignored the rest! \n. ",
    "eballeste": "This behavior also can be seen when adding products to the cart in a collections page, the cart drawer is opened and the browser jumps all the way to the top of the page. Kind of an annoying side effect of using the drawers. \n. thanks!\n. ",
    "brysongilbert": "This is consistent with what we do in Marketing Assets as well: https://github.com/Shopify/marketing_assets/blob/af347646becb2675ca10a9e46d37148a1c179d07/app/assets/stylesheets/marketing_assets/modules/_drawer.scss#L173-L174\n\ud83d\udc4d \n. ",
    "chrisberthe": "\ud83d\udc4d \n. It's most likely 404 due to you not having permissions. I can access it fine.. Damn, didn't spot that on my small iPhone \ud83d\ude1b .. ",
    "erindotio": "Thanks, @cshold, that does work as expected for me. Was just curious if disabled options was also supported or if I was missing something. (I get that this pattern is potentially better for something like capturing a user's email for restock notifications, etc, which would be more difficult if the variant was not selectable at all). \nDemo store: https://rd-roth-2.myshopify.com/products/black-knit-sweater\n. ",
    "amandeepsinghvirdi": "Disable these styles from #PageContainer's class \".is-moved-by-drawer\":\nis-moved-by-drawer {\n    -webkit-transform: translateZ(0);\n    will-change: transform;\n   transition: all 0.4s cubic-bezier(0.46, 0.01, 0.32, 1);\n}\nAnd it should work fine.\n. ",
    "heymynameisrob": "Do you want the navbar to stick when as soon as your scroll down? The plug-in is probably causing some issues.\nIf you're using jQuery, use this:\nNB change the 85 to the height of your navbar.\n```\n$(window).scroll(function() {\n    var scroll = $(window).scrollTop();            \nif (scroll >= 85) {        \n  $(\".navbar\").addClass(\"scrolled\");            \n} else {\n  $(\".navbar\").removeClass(\"scrolled\");      \n}\n\n});\n```\n. ",
    "alonsoh": "@MatthewKennedy I was able to do it by calling this in the page load:\najaxCart.load();\n timber.RightDrawer.open()\nHope it helps.. ",
    "gmalette": "Thanks for handling this!\n. ",
    "xuorig": "ping @Krystosterone \n. I'm going to go ahead and merge this unless somebody has last minute objections :)\n. omg how did we miss this :facepalm: thanks for the quick fix @cshold \n. \ud83d\ude4f\n. ",
    "Krystosterone": "\u2764\ufe0f \n. ",
    "rvalyi": "@xuorig If I make no mistake you merged invalid Javascript here. Basically you close a } without opening it before unless I'm crazy here...\n. ",
    "ruairiphackett": "The changes look good @matcaissy \ud83d\udc4d \nI don't think the changes are present on the updated demo link, but I tested them on my own test store and they look good \ud83c\udfa9 \n. Looks good, just wondering about one thing, there's 2 labels on the compare at price on the product page when it is present:\n\n\nApologies for messy gif!\n\n\n![http://recordit.co/GRdNkDKNTd.gif](http://recordit.co/GRdNkDKNTd.gif)\n\nDo we need both the regular_price and compare_at labels here?\n. My understanding is that $priceA11y should never be set to aria-hidden=\"true\" as it should always be 'visible' to the screen reader/VO, is that correct?\nSetting aria-hidden to false may not be needed though, would not setting any value to the aria-hidden attribute have the same effect as setting it to false here?\n. ~~Does this not result in the products.general.sale_price text being beside the product price and below products.general.regular_price is beside the compare at price.~~\n~~This is the wrong way around, unless I'm missing something @matcaissy ?~~\nMy apologies, my brain is slow after the break :) \nThe text being displayed in both places is correct, but the <span> ids are the wrong way around I think. Is that correct @matcaissy ? \nShould id=\"ComparePriceA11y\" and id=\"PriceA11y\" not be switched (on lines 93 and 99)?\n. ",
    "Juli-Brylina": "I checked all the video again. And sometimes only the first video showing ok (I tested the video on Windows and at the Mac OS)\n. ",
    "weareeight": "Hey Carson,\nThe JS being cached seems to be the issue, is there any way of forcing a refresh of the cache?\nI setup this demo store over a week ago, and it still bringing in the old language selection:\nhttps://timber-language-test.myshopify.com/\nYou'll see the site is in French, but the \"Your cart is currently empty.\" in the cart drawer is in English.\n. Yeah, editing the JS works a treat.\nWe're just putting the finishing touches to a new theme, so in the production version of that, we'll need to leave any translation values in the theme.liquid (with the product page values just being pulled in on the product page), as this is refreshed each time the page is loaded.\n. ",
    "3stacks": "It seems to me that there should be a isUserLoggedIn method on the Shopify class so that people can check if admin is logged in without having to rely on a pretty hacky method. Probably an issue for the core Shopify repo imo.\n. ",
    "zqureshi": "LGTM\n. ",
    "drdee": "Unit test fix in https://github.com/Shopify/Timber/pull/576\n. @cshold :ship: or what's the correct way of doing this?\n. ",
    "ttiimmaacc": "Thankyou carson!\n. ",
    "aalfson": "Yeah, this would definitely be a big time saver. \n. ",
    "JamesCropcho": "Hello Aaron ( @aalfson ),\nI learned that even if a Development Store is upgraded to a Plus Store, which must be done manually by a Shopify employee, a Shopify employee must still further allow a custom checkout.liquid. I haven't found this documented publicly anywhere (until now).\nWhen that's completed, a second layout option will appear in the 'new layout' dropdown, allowing the creation of the default checkout.liquid for further customization.\n. ",
    "Jore": "Fair call with different currency types. I have revised the pull request with divided_by: 100.00.\nMuch better solution, thank you.\n. ",
    "ranielpogi": "HELLOW.. just ask... ahmmm  how can i change the EFFECTS the drawer to FADE it and FADE OUT instead of translationX or Y ? and how to put BACKGROUND OPACITY  LIKE the MODAL thnx in advance\n. ",
    "jaylinski": "Ok, thanks for the info.\nWorks for me nevertheless. :smile: \nEdit: nope, only works for the textarea...\n. ",
    "canardos": "Change:\n$cartCountSelector.html(cart.item_count).removeClass('hidden-count');\n\nto:\n$cartCountSelector.html(cart.item_count + (cart.item_count === 1 ? ' item' : ' items')).removeClass('hidden-count');.\n",
    "onomori": "Seem to have fixed this one. Problem was IE was caching ajax requests, I think? It doesn't take any newly added products until I close the browser and open it again. Likewise, removed items stay in the drawer even if the cart is already empty unless I close and open a new window.\nFixed it by adding\n$.ajaxSetup({ cache: false });\nbefore the ajax cart init.\nI'm shooting at the dark here so I don't know if this is proper, but it's currently working so it's cool now.. ",
    "fredrikekelund": "I did, and while it helped me, this is the \"official boilerplate\" and it would be helpful if it had a few examples as well.. ",
    "hanihsdd": "Shopify announced a new Theme Kit earlier in the year called Slate, so Timber support is being phased out. I think it was supposed to launch this year, but hopefully it will be around soon.\nFYI \u2013 quite a few of the free Shopify themes have now implemented Sections too such as Brooklyn, Venture, and Boundless etc. It can be useful to view those as well.. ",
    "jacobedawson": "As someone who has never tried to theme a Shopify shop as a developer, it would be super useful for Shopify to have a single entry point with relevant, up-to-date information. For example, like @fredrikekelund I started with the Timber theme and then a few hours later found out 'Timber doesn't support sections'. That's pretty important information.... @suture yeah thanks I ended up using the Debut theme. \n@devyngregory I mean the fact that 1.) the Shopify documentation / information is very fragmented 2.) The Timber website doesn't mention the fact that sections are not supported. ",
    "devyngregory": "I understand that starting in the world of Shopify can be difficult; however, what areas or \u2018sections\u2019 are difficult?\nFrom: Jacob Edward Dawson [mailto:notifications@github.com] \nSent: Friday, March 17, 2017 2:52 AM\nTo: Shopify/Timber Timber@noreply.github.com\nCc: Subscribed subscribed@noreply.github.com\nSubject: Re: [Shopify/Timber] Theme sections (#606)\nAs someone who has never tried to theme a Shopify shop as a developer, it would be super useful for Shopify to have a single entry point with relevant, up-to-date information. For example, like @fredrikekelund https://github.com/fredrikekelund  I started with the Timber theme and then a few hours later found out 'Timber doesn't support sections'. That's pretty important information...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/Shopify/Timber/issues/606#issuecomment-287280633 , or mute the thread https://github.com/notifications/unsubscribe-auth/AT3Dt5NDG07WszySt-CugJg0l_KFwCBiks5rmi2DgaJpZM4LT0dt .  https://github.com/notifications/beacon/AT3Dt1RyaMtbu0JBAx4ZZ_hM2lF892Vjks5rmi2DgaJpZM4LT0dt.gif \n. ",
    "engrshahabuddin": "my code is not under General.\nIt is another translation part .\n{\n  \"general\": {\n    \"meta\": {\n      \"tags\": \"Tagged \\\"{{ tags }}\\\"\",\n      \"page\": \"Page {{ page }}\"\n    },\n    \"404\": {\n      \"title\": \"404 Page Not Found\",\n      \"subtext_html\": \"The page you requested does not exist. Click <a href=\\\"\\/collections\\/all\\\">here<\\/a> to continue shopping.\"\n    },\n    \"breadcrumbs\": {\n      \"home\": \"Home\",\n      \"home_link_title\": \"Back to the home page\"\n    },\n    \"newsletter_form\": {\n      \"newsletter_email\": \"email@example.com\",\n      \"submit\": \"Subscribe\",\n      \"confirmation\": \"Thanks for subscribing\"\n    },\n    \"search\": {\n      \"no_results_html\": \"Your search for \\\"{{ terms }}\\\" did not yield any results.\",\n      \"results_for_html\": \"Your search for \\\"{{ terms }}\\\" revealed the following:\",\n      \"title\": \"Search for products on our site\",\n      \"placeholder\": \"Search our store\",\n      \"submit\": \"Search\"\n    }\n  },\n  \"dvtdefault\": {\n    \"title\": \"DVT Default\",\n    \"header\": \"404 Page Not Found {{ school }}\"\n  },. ",
    "ajmalafif": "@cshold ah i see, that's very helpful thank you! I'll try that. I am okay if you want to close the issue but I'll be updating it until I found a solution to share!. ",
    "adamseoul": "I have a customer that I have setup mod_pagespeed for just to inline this CSS file. Would be great if Shopify could just inline it... ",
    "Benecke": "I found the solution: ajaxCart.load();. ",
    "jrmyptrs": "was able to figure this out- had to adjust my ajaxify.js.liquid file - I was able to grab the step attribute and store it as a variable that could be passed through via Handlebars for when the quantity input was re-rendered via JS. ",
    "tobi": "why do it this way? also why no case statement? \n. we should just make type.name work instead of relying on magical replace. @markdunkley know someone who could do that?\n. Equivalent to:\n{% if settings.facebook_link %}\n. ah yea right :-(\n- tobi\n  CEO Shopify\nOn Tue, Jun 3, 2014 at 5:48 PM, Caroline notifications@github.com wrote:\n\nIn snippets/footer.liquid:\n\n\n{% if settings.pinterest_link != blank %}p{% endif %}\n{% if settings.google_plus_link != blank %}g{% endif %}\n{% if settings.instagram_link != blank %}i{% endif %}\n{% if settings.tumblr_link != blank %}t{% endif %}\n{% if settings.youtube_link != blank %}y{% endif %}\n{% if settings.vimeo_link != blank %}v{% endif %}\n{% if settings.fancy_link != blank %}F{% endif %}\n{% if settings.twitter_link != blank %}\n\n\n\nTwitter\n\n\n{% endif %}\n{% if settings.facebook_link != blank %}\n\n\n@graygilmore https://github.com/graygilmore I prefer != blank.\nAn empty string will be truthy @Tobi https://github.com/Tobi.\n[image: Alt text]\nhttps://camo.githubusercontent.com/d7dc8078e081dcfdac5f8ecd4574a9bb77a6baba/68747470733a2f2f6d6f6e6f736e61702e636f6d2f696d6167652f79596c337452744230666c433244493641464734594e75616b5a6565776f2e706e67\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/85/files#r13361225.\n. I like humanize as a filter. \n\n-- Tobi\nCEO Shopify\n(mobile)\n\nOn Jun 3, 2014, at 7:05 PM, Carson Shold notifications@github.com wrote:\nIn snippets/footer.liquid:\n\n\n{% if type == \"interac\" %}I{% endif %}\n{% if type == \"visa\" %}V{% endif %}\n{% if type == \"master\" %}M{% endif %}\n{% if type == \"discover\" %}D{% endif %}\n{% if type == \"dk\" %}d{% endif %}\n{% if type == \"american_express\" %}A{% endif %}\n{% if type == \"google\" %}G{% endif %}\n{% if type == \"paypal\" %}P{% endif %}\n{% if type == \"jcb\" %}J{% endif %}\n{% if type == \"cirrus\" %}C{% endif %}\n{% if type == \"stripe\" %}S{% endif %}\n{% if type == \"bitcoin\" %}B{% endif %}\n\n\n\n{{type | replace: '_',' '}}\n  I wouldn't say common, though I'm also not very familiar with similar languages. humanize has a nice ring to it though.\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. hey,\n\nI think Timber should not ship with the optional liquid files for the\ncustomer area.\n- tobi\n  CEO Shopify\nOn Wed, Jun 4, 2014 at 10:05 AM, Monika Piotrowicz <notifications@github.com\n\nwrote:\nIn templates/customers/addresses.liquid:\n\n@@ -92,7 +96,8 @@\n         \n<input type=\"submit\" class=\"btn\" value=\"Add Address\">\n-        or Cancel\n-        or\n-        Cancel\n\nideally then I guess these would be fixed in admin, but not sure it's\nworth opening that up right now? They haven't been touched in a very long\ntime\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/Timber/pull/80/files#r13387295.\n. \n",
    "markdunkley": "@gauravmc thoughts? {{ type | name }}\n. ",
    "gauravmc": "@tobi making {{ type.name }} work will mean making some drop instead of simple type string right?\nIt'll be simple enough to add a filter as @markdunkley's suggesting. We can add a humanize filter that replaces underscores with spaces. @cshold is such operation common?\n. ",
    "obusher": "I assume you did not use any rename functionality (refactoring) provided by your IDE nor used git mv with manual refactoring.\n(git thinks now that you deleted ajaxify.js.liquid and created ajax-cart.js.liquid from scratch)\nOtherwise this compare would show a nice and clean git diff.\n. Ah, i know why now :). \nThe git diff command uses a default similarity index of 50%.\nThe similarity index of those both files has dropped to 44%, so git will not show it as a rename.\nYou can test it with: git diff master -M50 (same as git diff) and git diff master -M30.\n. ",
    "bakura10": "I personally do this in the theme, so even for people including the px, it does not break:\n{{ settings.logo_max_width | default: '450' | remove: 'px' }}px;\n. ",
    "moechaieb": "please remove this, as {% form 'new_comment', article %} will dynamically generate a form with id=\"comment_form\"\n. this will take care of generating the id=\"comment_form\", as explained in the note above :)\n. "
}