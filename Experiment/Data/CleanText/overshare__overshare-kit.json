{
    "jaredsinclair": "I'd love to include a pod spec, but I only know the broad strokes of Cocoa Pods. If you'll baby step me through what I need to do, I'd be happy to oblige.\n. @jhersh I don't understand why there are #ifdefs wrapping Twitter, 1Password, and other activity types. Only the ADN and Pocket activities are dependent upon third-party repositories. None of the other types have dependencies. What are you trying to accomplish?\n. There's already an API for this. Check out the header for OSKActivitiesManager. You set permanent exclusions by activity type: markActivityTypes:alwaysExcluded:\n. Also, those 1Password activities won't appear unless the user actually has the app installed. If somebody has the app, they'd probably want to use it, rather than applying a blanket policy that nobody should see it. :-)\n. Same with OmniFocus, Things, and any other URL schemes yet to come.\n. \"Yup, you're correct. I guess subspecs could be the difference between excluding activities and excluding activities without requiring their dependencies.\" \nI don't understand what you mean. Our intention is to require those dependencies, plain and simple. We'd like to provide the option to either use traditional git submodules, or Cocoa Pods, to manage those dependencies. But we're not keen on peppering the library with #ifdefs to exclude activity types.\n. Ah. Thanks. Sometimes I leave out important ______ in the middle of a thought. Bad habit. \n. @jhersh \n1) So just to confirm, the latest commit at (https://github.com/jhersh/overshare-kit/commit/7f45cb0fab4518fed88506cbc591458ea6aa117e) does not require Xcode project changes? It's just the pod spec file that specifies the required dependencies? \n2) You mean a git tag, correct?\n3) See #2.\n4) Sweet, we appreciate all your time on this.\n. @jhersh I merged your podspec, tagged the up-to-date merge with 1.0.1. If everything looks good to you, we'd appreciate you pushing our spec to the specs repo.\n. Yep. @cheesemaker is right. The plan for now is to provide an official Instagram.app activity that sends an image to the Instagram app via it's public URL scheme.\n. Closing this issue for now, but looking forward to re-opening when Pinterest improves their API.\n. The options parameter passed into the presentActivitySheetForContent:etcetera:options: types of methods on OSKPresentationManager include support for two block types: one called when the user's selected activity completes, and one called when the activity sheet is dismissed. I'd prefer to extend this existing pattern if possible.\n. Hey. I refactored a bunch of completion block stuff on the dev branch tonight. I think you'll find the new code much easier to manage. \n1) The view controller dismissal handler has a new type and dictionary key. The key is OSKPresentationOption_PresentationEndingHandler and the block type is OSKPresentationEndingHandler. This block is called whenever the last remaining OvershareKit view controller is dismissed (it could be an activity sheet, or something else). It includes arguments that will determine whether those views were dismissed via cancellation or via the user selecting an activity. The selected activity is included, too (if any).\n2) The activity completion handler is still the same as before, though it has a new dictionary key: OSKPresentationOption_ActivityCompletionHandler. I don't think that the user dismissing a view controller should count as a \"failed\" activity. If you want to know whether the user dismissed OvershareKit view controllers via cancellation, you can get that info via the OSKPresentationEndingHandler option.\n. Also, the modification made in https://github.com/valheru7/overshare-kit/commit/c17904b4d0b1bb0aa089859968c13468c3acb9d7 isn't necessary: OvershareKit already dismisses the activity sheet in an appropriate manner. The flow controller (now called \"OSKSessionController\") being cancelled doesn't mean the user wants the whole sharing process cancelled. They may simply have tapped Twitter by accident when they wanted to tap Facebook, etc.\n. I like that idea. Facebook stuff should be it's own everything. There's already too much Facebook-specific code mixed into the microblogging APIs, e.g., separate read/write permission requests.\n. You\u2019re welcome to submit pull requests, sure. I can\u2019t promise that we\u2019ll merge the request, though. We\u2019ll happily take a look once it\u2019s submitted.  \n\nJared Sinclair\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Wednesday, January 22, 2014 at 9:05 AM, Fl\u00e1vio Caetano wrote:\n\nI was only able to share a link, but \"smart links\" (where they fetch pictures, title, etc) are processed by Facebook clients. In order to share content, not only link, this content must be created by the app.\nWhat I'm unable to understand is why OvershareKit is not using Facebook (and Twitter) native SDK.\nI need this ASAP, so I'll work on it in my fork and later ask for a pull-request. Is it okay for you guys?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/issues/10#issuecomment-33024786).\n. I'd like to reboot this discussion to decide how we should proceed. \n\nThe specific problem that began the thread was that Facebook link posts (which, I'll admit, I know almost nothing about) aren't supported by OSK without forking and hacking the existing classes.\nThe broader problem surfaced by this issue is that no two OSKActivities have a perfectly-matched set of requirements, even if they both act upon the same content item type. OSKFacebookActivity is in general a microblog post activity like ADN or Twitter, but in practice it needs additional data.\nOne solution to this problem is to just say \"Fuck it\" and break out Facebook into it's own content item subclass. I am not convinced that this is the most prudent solution in the long term.\nThe same general problem applies to activities for text editing apps and services (Drafts, Editorial, Evernote, etc.). They overlap in the core details (text, tags, etc.), but differ widely in the extras. \nI think a more prudent solution might be to follow in the footsteps of the ADN API's \"annotations\" model. \nRather than add a \"url\" property of the microblog content item, I suggest that we add an userInfo NSMutableDictionary to the parent class, OSKShareableContentItem, and let all subclasses (microblogging or otherwise) have a place to put these kinds of data.\nLook at OSKShareableContentItem.h on the dev branch to see what I mean.\nOSK's convenience constructors for OSKShareableContent can be reconfigured to pre-populate userInfo dictionaries with the values it knows the built-in classes need. Apps with bespoke OSKActivity subclasses can also use these dictionaries to provide custom data without having to fork and hack OSK.\nAs OSK matures, we can periodically promote frequently-accessed additional info data types to class-level properties where prudent.\nWhat do you think? \ncc @berg\n. > ...the Facebook UI includes a nice Open Graph post preview...\n@berg Is this a reference to the iOS system-supplied Facebook user interface, or does the Facebook (the company) iOS SDK provide the view controllers you mention?\n. @berg So your recommendation is to eschew both the system supplied UI and the system supplied account management, and link to the Facebook official SDK to provide both?\n. Well, I\u2019m back. Sorry for the long time away. Between launching Unread and dealing with some family emergencies, it's been hectic here.\nWith the benefit of time, I have come to see that @berg's bulleted list of advanced Facebook needs from his comment above are totally right \u2014 and yet they\u2019re mostly outside the scope of an off-the-shelf implementation of OvershareKit. With one exception: links. As @berg mentioned near the start of this thread, users expect that content derived from a shared link will appear in their timeline as a proper link post, not just a normal status update.\nI think the right path is to try to provide a richer link-sharing experience for built-in Facebook sharing. For more advanced needs, I would recommend that developers disable the OSKFacebookActivity type altogether and provide their own app-specific substitute activity type for Facebook (FooAppFacebookActivity or whatever). I don\u2019t think it's prudent for the built-in implementation to rely upon a external dependency for the whole stack, from authentication to UI, not for something as common as Facebook sharing.\nIf someone wants to submit a pull request later on for an optional OSKAdvancedFacebookActivity that's built on the Facebook SDK, I think we\u2019d all welcome it. I just don't think that the default Facebook activity should diverge that far from the other activities.\nMy proposal is that I update OSKFacebookActivity to use the userInfo dictionary of the microblog content item to obtain the necessary contextual info to produce a proper link post.\n. Pushed up Facebook link sharing to the dev branch today:\n\nI ended up adding an OSKFacebookContentItem because the content required more finessing than just adding a single NSURL property. Attached links show a little preview thumbnail, similar to the preview used by the native iOS Facebook share sheet.\n. Done.\n. Done.\n. Closing this one. Image size scaling should be handled on a per-service basis, since upload guidelines are likely to vary widely between services. Also, @cheesemaker is doing a bang-up job solving this issue for OSKTwitterUtility.\n. Can I see your code?\nSent from my iPhone\n\nOn Nov 30, 2013, at 12:27 PM, Felix Krause notifications@github.com wrote:\nMaybe I'm missing something, but the tint color of the email dialog is not passed.\nActual Result with OvershareKit: https://www.dropbox.com/s/wkfuxpgye9jjvri/Screenshot%202013-11-30%2018.26.39.png\nWanted Result: https://www.dropbox.com/s/tccor4scsaioxw7/Screenshot%202013-11-30%2018.26.49.png\nThe app itself has the correct tint color set: https://www.dropbox.com/s/umzvttlvsml2nh7/Screenshot%202013-11-30%2018.26.56.png\n\u2014\nReply to this email directly or view it on GitHub.\n. Checkout OSKPresentationViewControllers.h, one of the delegate protocol hooks into the OSKPresentationManager. Specifically, check out line 41:\n\n- (void)presentationManager:(OSKPresentationManager *)manager\n  willPresentSystemViewController:(UIViewController *)systemViewController\nIf I understand the code you posted, you should be able to place the \u201cwhat\u2019s missing\u201d code in there and tweak the appearance as needed.                    \n\nJared Sinclair\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Sunday, December 1, 2013 at 5:12 AM, Felix Krause wrote:\n\nSetting the tint color\nUIColor tintColor = [UIColor whiteColor]; [[UIWindow appearance] setTintColor:tintColor]; UIColor barTintColor = [UIColor greenColor]; [[UINavigationBar appearance] setBarTintColor:barTintColor]; [[UINavigationBar appearance] setTitleTextAttributes:@{ NSForegroundColorAttributeName:[UIColor whiteColor] }];  \nCalling OvershareKit\nOSKShareableContent *shareSheet = [OSKShareableContent contentFromText:share]; [[OSKPresentationManager sharedInstance] presentActivitySheetForContent:shareSheet presentingViewController:self.navigationController options:nil]  \nWhat's missing:\nMFMailComposeViewController *mailController = [[MFMailComposeViewController alloc] init]; ... [mailController.navigationBar setTintColor:[UIWindow appearance].tintColor];  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/issues/14#issuecomment-29570867).\n. System view controllers (the Mail and Messages ones at least) should use their default navigation bar appearance. Otherwise, it may not be clear to users that they're using a remote instance of a built-in app.\n\nThis is why all non-system modal view controllers in OvershareKit use OSKNavigationController, an otherwise vanilla subclass of UINavigationController. That way you can apply custom appearance changes to that subclass without affecting system-provided navigation bars. \nSent from my iPhone\n\nOn Dec 2, 2013, at 5:38 AM, Felix Krause notifications@github.com wrote:\nThanks, that's working.\nStill, this is an issue of the library: this should happen automatically for system view controllers.\nThis problem occurs every time you set a navigation bar background color and a font color, since only the navigation bar background color is applied to the mail composer sheet.\n\u2014\nReply to this email directly or view it on GitHub.\n. Most iOS 7 applications use the newer recommended approach. Rather than setting the status bar style directly, the recommended approach is for your UIViewController subclasses to return their desired style via the method:\n\n- (UIStatusBarStyle)preferredStatusBarStyle;\nIf you use this approach, the system view controllers update the status bar appearance correctly, provided you leave the plist value for View controller-based status bar appearance set to the default YES.\n. OSKMailComposeViewController doesn't need to implement that method. UIKit handles it automatically, provided you leave the plist value for View controller-based status bar appearance set to the default YES.\n. I\u2019m not aware of a reason why it would be impossible to set that value to YES. On the contrary, Apple\u2019s new approach leads to code that is more resilient to future view controller hierarchy changes.\nI don\u2019t think that it\u2019s wise to add complexity (in the form of numerous if statements checking for that plist value) in order to add support for an approach that is no longer recommended.\n~ Jared\nOn Wednesday, December 18, 2013 at 2:01 PM, Fl\u00e1vio Caetano wrote:\n\nWhat if I can't have that plist value set to YES?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/pull/15#issuecomment-30869880).\n. Thanks for asking. I plan on making a step-by-step guide for setting up credentials with 3rd party services. I've been caught up with some other things lately, but will get to it soon.\n\nEssentially, you'll need to register an app with Facebook and provide that app's ID in an application credential object via the delegate of the OSKActivitiesManager.\n~ Jared\n\nOn Dec 24, 2013, at 1:08 PM, JayZhao notifications@github.com wrote:\nHere's the confusing part: (maybe only I was confused)\n\"Facebook: The iOS authentication requirements for Facebook include passing an application ID. Register your app at http://developers.facebook.com/.\"\nI've registered my Facebook App and got and App Id. However I don't know how to pass this App Id to OvershareKit.\nI've tried change the demo's bundle id to mine, and it doesn't work, showing error like this:\nfacebook remote_app_id does not match stored id.\nMaybe this is more of an ask for help than a bug report, am I doing something wrong?\n\u2014\nReply to this email directly or view it on GitHub.\n. @cheesemaker Here's a request: feel free to decline, but it's an important detail if you could work it in: the current logic doesn't decrement the estimated remaining character count based on whether or not an image has been attached. Does config API return an estimated length that could be cached in a similar manner?\n. That looks great. The other thing that's needed is exposure of the configurationParameter keys in OSKTwitterUtility.h. I'm going to be using this new stuff right away to adjust the remaining character counts when composing a new tweet.\n\nI'm also going to be making the image attachment view tappable so the user can opt to remove the attachment while composing the tweet. Will I risk conflicts with your code if I make start making edits to OSKMicroblogPostViewController and OSKTwitterActivity before we're ready to merge your pull request? \n. The proper way to handle this is to use the new recommended APIs in iOS 7, preferredStatusBarStyle and the other related methods on UIViewController. By setting ViewControllerBasedStatusBarAppearance to YES in your apps plist, the status bar appearance will \"just work\" with OvershareKit views and view controllers.\n. That's an OvershareKit bug. Nice catch. I'll get it fixed.\n. Fixed?\n\n. I'm going to mark this one as closed for now. Quotes respect opening brackets now (on the dev branch, will push to master soon).\nThere are still some edge cases not accounted for that I might tackle later, e.g. abbreviated decades. OSK puts an opening single quote in front of the \u201990s instead of a closing single quote.\n. > The opening single quote for Helvetica should look like this:\nWhoa. My TextExpander snippets for smart opening double and single quotes have been wrong for a long time. \n\nWhat about dash-dash for an em-dash?\n\nOf course. And three periods for an ellipsis.\n. I pushed the fix for the single opening quote to dev and to master. The ellipses and em-dashes will require a little more forethought.\n. Okay, how about this:\n\nI pushed a major refactor to the dev branch. Same smart quote behavior as before, with new additions:\n- Decade abbreviations use closing single quotes.\n- Two dashes followed by anything but a dash turn into an en dash.\n- Three consecutive dashes turn into an em dash.\n- Three consecutive dots turn into an ellipsis.\nAll of this happens as you type. It also only processes the text (roughly) around the area you\u2019re editing, so it should work well with really long documents.\n. That would be a cool improvement. \nOne of the reasons this is so hard on iOS is that NSString \u201cis UTF-16.\u201d In order to look ahead or behind by a specific number of characters I have to parse each character individually with the block enumeration method of NSString.\nIf you want to see how it's working, see the OSKSmartPunctuation utility class on the dev branch. All this stuff is emoji-safe and sensitive to writing direction. The decades correction is tucked into the single-quote method near the bottom of the .m file.\nGod, how I wish Apple would add an \"NSComposedCharacterString\" class or something to that effect. It would simplify so much.\n. Apps to add currently include:\nSunlit\nUnread\nApp.net Passport\nRedd\nThere are others escaping my memory...\n. Crossposted from @irace's fork:\n\nTalked about this with Jared Sinclair and he's keen to build the UI for (at least a basic version of) Tumblr sharing if I provide the networking and authentication bits in the form of a helper class. I admittedly haven't tried using OSK in an app myself yet, nor have gone through enough of the code to get an idea of how authentication is generally implemented across services.\nThe best way to auth with the Tumblr API is using OAuth (xAuth support exists but is whitelisted, generally frowned upon, and not given access to unless absolutely necessary). The Tumblr iOS SDK includes support for both of these so I'm happy to hook up whichever Jared prefers, but please note that the OAuth implementation currently in there requires bouncing out to Safari, which means any app that uses this would need to implement a custom URL protocol to return back to, and OSK would need to be all up in the app delegate's application:openURL:sourceApplication:annotation: business.\nAnother possibly better option would to OAuth via in in-app UIWebView; there's a pull request open to add this to TMTumblrSDK and I'm fine with taking a look at it and either merging or implementing it differently myself, I just haven't gotten around to it yet. OSK integration would be enough impetus to do so however.\nThe Tumblr SDK already has a TMTumblrSDK/Authentication sub spec which could be used to implement this new helper class, though I notice that OSK doesn't currently important any dependencies using CocoaPods \u2013 it instead does so via git submodules would would require importing all of TMTumblrSDK and it's dependencies, so let's opt against that and I'll just copy/paste the pertinent code over.\n. OSK provides four paths for authentication:\n- OSKAuthenticationMethod_SystemAccounts \u2013 Twitter, Facebook \u2013 Where possible, OvershareKit uses accounts managed via iOS' native account frameworks.\n- OSKAuthenticationMethod_ManagedAccounts \u2013 App.net, Instapaper, Etc. \u2013 Third party services that provide a means to have multiple authenticated accounts. Authentication methods include xAuth, oAuth, and Basic Auth, but are not limited to those. App.net, for example, can optionally authenticate via the App.net Passport application. Authentication for built-in OSK activities is a coordinated effort between several classes. More on this below.\n- OSKAuthenticationMethod_Generic \u2013 Pocket \u2013 Third party services that provide only an opaque means of authentication, limited to a boolean check for \"isAuthenticated\" or similar. Generic authentication therefore does not support multiple accounts.\n- OSKAuthenticationMethod_None \u2013 1Password, Safari, Etc. \u2013 No authentication needed.\n\nAuthentication is a coordinated effort between several classes. A given subclass of OSKActivity is the most important component. OSKActivity subclasses must override a number of required methods that return parameters that OSK needs to properly advance the user through authentication and publishing steps. For example, an activity must provide which type of authentication it uses (if any) via the authenticationMethod class method. OSK queries other methods of a given activity to determine whether to show authentication view controllers, and which view controllers to show.\nThe end result of an authentication for activities that use OSKAuthenticationMethod_ManagedAccounts is an instance of OSKManagedAccount. This class is not meant to be subclassed. Existing accounts are accessed through OSKManagedAccountStore, which is also responsible for serializing accounts to disk as needed. OSKManagedAccount stores its credentials (passwords, tokens, etc.) in the Keychain. Items without security requirements are written to disk via NSCoding.\nWhen integrating a new service with OSK, the only \"new\" code that needs to be added, other than an OSKActivity subclass, is code for any utilities or view controllers needed to produce a new instance of OSKManagedAccount. Most of the time, this can be accomplished by the activity subclass itself, perhaps with the help of a utility class. Subclassable view controllers for web-based sign in, and for username/password flows, are already available in OSK.\nFor Tumblr, I think OSKAuthenticationMethod_ManagedAccounts makes the most sense, especially when combined with the web-based flow. OSK already has a subclassable authentication web view controller which is used by OSKAppDotActivity. Other authentication methods would work as well.\nI am happy to wire up Tumblr into OSK's authentication and publishing steps, providing view controllers wherever needed. The part that I'd like you to help with is providing utility classes to serve as an interface between the Tumblr API and OSK. For an example of what I mean, check out OSKAppDotNetUtility.\n. A rough spec for a bare-bones Tumblr utility would include simple methods for creating new posts, e.g.:\n- (void)sendPost:title:text:blah:blah:completion:\nIf we use a web-based flow, Tumblr would also need a subclass of OSKWebViewController. This subclass must also conform to the OSKAuthenticationViewController protocol. This view controller, and any utility classes it might need, should be able to load the web-based starting point for authentication, and finish with the creation of a new OSKManagedAccount. \n. I can see arguments for both. If we use OSKBlogPostContentItem, it will be easy to add/remove properties on the content item without having to rewrite the signatures for the utility methods every time\u2014the blog post item would be the only argument, and it is unlikely that this argument would need to change. On the other hand, explicitly listing the required data as individual method args (title, text, etc.) makes the requirements harder to miss.\nI say we use OSKBlogPostContentItem.\n. Also, we should schedule a time to chat on ADN PMs or something.\n. Done.\n. OSKCopyToPasteboardActivity is only intended for use with text. \n. There are a million file changes in here across six commits, I don't know even where to begin. Can you please provide an extended description of the changes you\u2019ve made?\nAlso, from a quick look over it looks like you've change Twitter/Facebook or both to use the iOS compose view controllers. We're not going to accept a pull request that does that as it goes against the purpose of OvershareKit.\n. Some tips for writing the description of the change you've made: please list the problems you are attempting to solve with these changes. These changes seem to touch way too many files to just be a fix for issue #10. Also, please read my latest post from issue #10 as this issue is likely going to be solved in a more open-ended manner that will affect fewer classes.\n. Thanks for the clarifications. Now that I understand the nature of your changes, it is clear we will not be able to accept this request. OvershareKit's view controllers are a work in progress, but the idea that they are \"hideous\" is frankly a minority opinion. Even if they are not to your liking, OSK provides numerous opportunities to tweak the interface or to provide alternate view controllers altogether. The UI changes in your pull requests are at odds with the intentions of this library.\nAs for issue #10, this issue is important to all of us, but it is not a show-stopper bug. Mission-critical bugs are addressed promptly. Everyone contributing to this project is doing so out of generosity with their time. I assure you that we all have plenty of work vying for limited attention.\nFurthermore, as my recent comment on #10 indicates, the issue is broader than just a patch to a Facebook feature. It is prudent to think through the implications for similar situations affecting other activities before making changes. \nThanks.\n. iOS is likely never going to offer system-provided view controllers for many of the sharing activities that OSK has already or may build:\nApp.net\nTumblr\nWordPress\nEvernote\nTo name just a few. By controlling the full UI stack, we can ensure a consistent user experience while providing rich sharing options.\n. OSKPresentationManager has a delegate property that conforms to the OSKPresentationViewControllers protocol. This protocol includes the following optional method:\n- (UIViewController <OSKAuthenticationViewController> *)osk_authenticationViewControllerForActivity:(OSKActivity *)activity;\nReturn your Evernote authentication view controller from that method (and nil for anything else), and OSK should handle the rest.\n. Keep me posted on your progress. :-)\n. Can you share a sample project? I don't think I understand what's happening here.\n. This looks great! I look forward to trying it out. One thing I noticed: in the following method, beginning on line 135 of OSKGooglePlusActivity:\n- (void)performActivity:(OSKActivityCompletionHandler)completion\nThe completion handler is not called upon success or failure. OSK performs some important cleanup in that handler.\n. Or am I missing where it's called elsewhere?\n. Looks great. I\u2019m going to merge this in a sec. I have a couple of followup questions:\n1. Is there a particular reason the activityCompletionHandler for OSKGooglePlusActivity is in the .h file? Seems like it's just an implementation detail that could be moved into the .m file's @interface.\n2. Why is there an error reported if the user cancels sharing manually?\n3. Is there any way to configure the user interface? The rest of OSK allows customizable colors and fonts. The animations used when presenting the sharing dialog are somewhat jarring. They slide in from left to right. The only modal views in iOS that appear horizontally are certain alert views, like when shaking to undo. It would be helpful to be able to change that transition to resemble a standard cover transition.\n. Also, and most importantly, thanks for taking the time to add all this! I\u2019ve already had some people asking for Google+ support in one of my apps using OSK. They're grateful, too. :-)\n. That configuration is not supported at this time.\n. UIAVC is great for apps that know they\u2019ll never have a need for any of the following:\n1. Never need to integrate with more than one or two third party services.\n2. Never need to tweak the UI for the activity sheet and sharing screens.\n3. Never care to provide separate, media-specific content for each sharing type (email versus SMS, etc.)\n4. Never need to have multiple items such as a Copy Text versus a Copy Link in the same sheet.\n5. Don't mind that all non-system-provided activities get stuck with boring monochromatic icons.\nAlmost every app I work on can't fit into those restrictions, thus I need something like OvershareKit. \nThe most important difference between UIAVC and OSK is in how content is structured. UIAVC uses unstructured arrays of content (which contain one or more of a grab-bag of objects, usually strings, images and URLs). UIAVC lets each UIActivity decide which of these objects, if any, it will act upon and how. The shortcoming of this API design is that activities don't know anything about the context in which the sharing session is taking place. For example, the formatting for an email message generated from an Instagram post should look very different from an email generated from an RSS article. But with UIAVC, there's no easy way to communicate that context. Most crucially, it is impossible to do this using UIAVC without providing substitutes for the system-provided mail activities. \nActivities should not be given that much responsibility over content. The content should be ready to consume before it is handed to an activity. Furthermore, the content should be formatted in a manner that is appropriate to each type of activity.\nThis is why OvershareKit uses an instance of OSKShareableContent that bristles with many flavors of OSKShareableContentItem. This API design allows the part of your app that has knowledge of context to prep all the items of OSKShareableContent before handing it off to OSK. It results in a more satisfying sharing experience for the user, and less overall hassle for the developer. \n. I wish. The difference is the official share sheet uses an animation curve which has not been exposed publicly.\n. I\u2019ve pushed a proof of concept to the dev branch. In OSKPresentationManager.m, change the #define to a 1 for USE_UNDOCUMENTED_ANIMATION_CURVE (line 72). This will use the undocumented UIViewAnimationCurve value of 7 to present the activity sheet. It looks nicer, but it\u2019s not a public value. We should file a Radar.\n. You should be able to do this with the current API, if I understand your setup.\nFor users that have no accounts set up yet: You must do two things. First, provide an object for the OSKPresentationManager's viewControllerDelegate. This object should override the following method:\n- (UIViewController <OSKAuthenticationViewController> *)osk_authenticationViewControllerForActivity:(OSKActivity *)activity\nReturning nil will fall back to the default OSK view controllers. For custom authentication of an OSKManagedAccount, create a view controller that conforms to the <OSKAuthenticationViewController> protocol and return it from the above method.\nFor users that have already authenticated their account with your app, not using OSK: You can seed the OSKManagedAccountStore with accounts on the user's behalf. \n1. Create an OSKManagedAccountCredential with the credentials your app already has stored.\n2. Generate a unique identifier for the account to be created.\n3. Create an OSKManagedAccount with the credential and identifier from steps 1 and 2.\nThe methods you'll need to do this are:\nOSKManagedAccountCredential\ninitWithBlahBlahCredentials:\nOSKManagedAccount\n```\n+ (NSString *)generateNewOvershareAccountIdentifier;\n\n(instancetype)initWithOvershareAccountIdentifier:(NSString )identifier\n                                      activityType:(NSString )activityType\n                                        credential:(OSKManagedAccountCredential *)credential;\n```\n. Your custom authentication view controller should override the following method:\n\n- (void)prepareAuthenticationViewForActivity:(OSKActivity <OSKActivity_ManagedAccounts> *)activity delegate:(id <OSKAuthenticationViewControllerDelegate>)delegate;\nThat method gives your view controller the opportunity it needs to prepare its interface for the given activity, and provides the delegate object that it will notify of success/failure:\n```\n- (void)authenticationViewController:(UIViewController  )viewController\n           didAuthenticateNewAccount:(OSKManagedAccount )account\n                        withActivity:(OSKActivity *)activity;\n\n(void)authenticationViewControllerDidCancel:(UIViewController  )viewController\n                                 withActivity:(OSKActivity  )activity;\n```\n\nAny time after prepareAuthenticationViewForActivity:delegate: is called, your view controller should walk the user through authenticating a new account. Your view controller is responsible to for notifying it's delegate of cancellation. It's also responsible for passing a successfully authenticated account to it's delegate. \n. Looking into this now. The paths to the frameworks & bundle are missing from the podspec (but the files are already there in the main repo).\n. I\u2019ve pushed a potential fix to the podspec in the dev branch of OSK. I don\u2019t use CocoaPods myself, so I\u2019m leaning heavily on my reading of the docs to get it right. Mind taking a look at the formatting there?\nThe issue is the stuff in the Dependencies/GooglePlus/ directory. Two frameworks, and one bundle. I've added them to the podspec on the dev branch but need a proofreader before I feel comfortable submitting a pull request to the official Specs repo.\n. @jacdevos The 'google-plus-ios-sdk\" CocoaPod is not the same code included in OSK. The App.net and Pocket dependencies are git submodules / CocoaPod dependencies, whereas the Google Plus code is included in the main repo, just listed under the Dependencies directory for logical consistency's sake. Isn't the s.dependency declaration in a podspec only for a true CocoaPod dependency?\n. I could be wrong. I didn't contribute that code myself, so I am basing my judgement on the fact that those frameworks/bundle were included by the contributor (a Google iOS engineer) directly in the main repo, not as git submodules. I don't know whether that pod is the same or not. I assume not.\n~ Jared\n\nOn Mar 23, 2014, at 2:05 AM, Jacques de Vos notifications@github.com wrote:\n@jaredsinclair, are you sure it's not the one used by OSK?\nThe 'google-plus-ios-sdk' adds the following frameworks from\ngoogle, referred to in the podspec:\nGoogleOpenSource.framework\nGooglePlus.framework\nas well as the GooglePlus.bundle\nOr is there another pod from google which also contains it?\nOn 23 March 2014 03:34, Jared Sinclair notifications@github.com wrote:\n\n@jacdevos https://github.com/jacdevos The 'google-plus-ios-sdk\"\nCocoaPod is not the same code included in OSK.\n\nReply to this email directly or view it on GitHubhttps://github.com/overshare/overshare-kit/issues/39#issuecomment-38370317\n.\n\n\nJacques de Vos\n+27 72 587 6401 Mobile\n+27 86 669 2757 Fax\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks everyone. I\u2019ve submitted a pull request with the updated spec for 1.1.0.\n. The Google Plus SDK is not included as a submodule, so it's not an external dependency that requires additional work to clone (via Cocoa Pods or otherwise). My README language is a little unclear, but it was intended to be a warning about the two submdodules. \n. I can\u2019t reproduce this bug.\n. Submit a pull request. :-)\n. Nice catch, thanks. Out of curiosity, what\u2019s in your project's Foo-Prefix.pch file?\n. I just version OSK to 1.2 on master. Can you fix the merge conflicts and resubmit a pull request?\n. This looks like a good start, however there is already an OSKPhotoSharingContentItem and an OSKShareableContentItemType_PhotoSharing content item type. I don't think that there should be a separate OSKSaveToCameraRollContentItem content item or OSKShareableContentItemType_SaveToCameraRoll content item type. They're too limited in scope.\n\nPerhaps the documentation is unclear on this point, but more than one OSKActivity subclass can all operate on the same OSKShareableContentItem and content item type. Content types and activities have a one-to-many relationship. For example, both OSKTwitterActivity and OSKAppDotActivity use OSKMicroblogPostContentItem. \nExcept where necessary, I\u2019d prefer if we use existing OSKShareableContentItem subclasses as much as possible. \nMy recommendation is to change OSKSaveToCameraRollActivity to use OSKPhotoSharingContentItem. This should be a minor change. The biggest difference is OSKSaveToCameraRollActivity will need to be updated to use the images array property of OSKPhotoSharingContentItem, instead of a single UIImage.\nOther Notes:\n- In OSKSaveToCameraRollActivity.m, line 43, the text should read \u201cSave to Camera Roll.\u201d You might want to check if OSK is running on a device that doesn't have a camera roll. Some devices use \"Saved Photos\" or something to that effect.\n- In OSKSaveToCameraRollActivity.m, line 51, the image name for the iPad icon begins with two O's. Is that correct?\n- In OSKSaveToCameraRollActivity.m, line 76, the completion block should dispatched to the next runloop. OSK does not expect it to be run on the current loop. It could lead to unexpected behavior. \nobjc\n__weak OSKSaveToCameraRollActivity *weakSelf = self; \ndispatch_async(dispatch_get_main_queue(), ^{ \n    completion(weakSelf, YES, nil);\n });\n. Nice! Thanks for this great contribution.\n. Nice catch. Pushed a fix to master.\n. What fails? Is it OSKSessionController's call to request permissions? Or is it OSKFacebookUtility's renewal of credentials?\n~ Jared\n\nOn Apr 11, 2014, at 7:24 PM, benhirashima notifications@github.com wrote:\nI have also been unable to get Facebook sharing working in my own app. I get the same error dialog as described above. I am passing a valid Facebook app ID and secret.\nStepping through the code, I get this NSError object at line 55 in OSKSystemAccountStore.m:\nError Domain=com.apple.accounts Code=6 \"The operation couldn\u2019t be completed. (com.apple.accounts error 6.)\"\n\u2014\nReply to this email directly or view it on GitHub.\n. Do you have a Facebook account entered in Settings.app -> Facebook?\n. OvershareKit has no relationship with Facebook.app or the Facebook SDK.\n. You're exactly right. That's what I do in Unread, as a matter of fact.\n1. Create your OSKShareableContent.\n2. Get an array of valid activities from the OSKActivitiesManager as you described.\n3. Your app presents some custom UI for selecting an activity.\n4. Begin a sharing session with the selected activity as you described above.\n. I'm closing this until I hear back from the CocoaPods folks about this issue. It may be a bug on their end.\n. Nice catch. \n. Nice!\n. \u2764\ufe0f\n. Love it.\n. Thanks for the great work, but unfortunately I'm closing this without pulling that Tumblr request. OvershareKit is in maintenance and won't be adding new features. Thanks!\n. The Pocket API SDK files do not use ARC. You\u2019ll need to add the -fno-objc-arc flag to those .m files in the Compile Sources Build Phase for your target.\n\n\nJared Sinclair\nOn Tuesday, August 12, 2014 at 8:07 AM, fbara wrote:\n\nI know this was written pre-ARC and I'm getting dozens of errors on 'release', 'retain', and 'autorelease'. I'm also getting a bunch of casting errors that I'm doing my best to fix. I've only been developing in xcode for a few months so this activity is very difficult for me.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/issues/76).\n. I've updated the spec to include a reference to the MediaPlayer framework. Thanks.\n. This is already supported. All OSK navigation controllers are \"OSKNavigationController\" except for system view controllers like Messages and Mail. Just use OSKNavigationController in your appearance customizations and it will behave as you describe.\n\nSent from my iPhone\n\nOn Aug 31, 2014, at 12:39 PM, Jacqudes de Vos notifications@github.com wrote:\nApple requires that emails follow the standard iOS look and feel. When customising your app appearance (together with overshare-kit), it changes the headers and other fields of emails, making it non-standard.\nTo get past this, I had to reset appearance to standards before sharing via email, and set it back afterwards. It took a lot of fiddling to get it right.\nThis issue is not specific to overshare-kit, but I think it would be great to support this behaviour right inside it, since email is usually invoked via sharing.\n\u2014\nReply to this email directly or view it on GitHub.\n. The text view replacement class never becomes the first responder in the first place, so the existing call to the internal text view is the only line needed.\n. There\u2019s a bug in Cocoa Pods that I am unable to find a workaround for at this time (it chokes on embedded frameworks that aren\u2019t actually an external dependency).\n\nFor now you\u2019ll have to use a traditional submodule to avoid that error.  \n\u2013\u2013\nJared Sinclair\niOS Engineer\nBloglovin AB\nOn Friday, September 19, 2014 at 1:01 AM, gmertk wrote:\n\nAfter installing with Cocoapods, is there another step? This is the error I am getting:\nUndefined symbols for architecture x86_64: \"OBJC_CLASS$GPPShare\", referenced from: objc-class-ref in libPods.a(OSKGooglePlusActivity.o) \"_OBJC_CLASS$_GPPSignIn\", referenced from: objc-class-ref in libPods.a(OSKGooglePlusActivity.o) \"_kGTLAuthScopePlusLogin\", referenced from: -[OSKGooglePlusActivity authenticate:] in libPods.a(OSKGooglePlusActivity.o) ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation)  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/issues/83).\n. I'm cool to merge this except one question: has the text field workaround been tested on iOS 7? \n. There is no officially-maintained Cocoa Pod for that SDK, unfortunately. And due to a bug in Cocoa Pods, this bundled framework breaks builds. I recommend using standard submodules as a workaround until this issue gets resolved.\n\n\u2013\u2013\nJared Sinclair\niOS Engineer\nBloglovin AB\nOn Monday, September 22, 2014 at 2:43 PM, csteynberg wrote:\n\nIt's currently impossible to submit to the app store due to validation failures.\nGoogle has updated their API to resolve the issue, but due to the fact that the project includes the source of a much older version of the library it still fails.\nIs there a specific reason that the source for GooglePlus is included in project instead of just relying on cocoa pods to pull it down?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/overshare/overshare-kit/issues/85).\n. Fixed this issue on the master branch.\n. This has already been fixed on master.\n. \n",
    "ghost": "Yes please let's have a podspec for overshare :)\n. oh\u2026 so overshare-kit works with iOS 7 only?\n. awesome :) i can't wait to see overshare-kit in the cocoapods repository. good job :)\n. if you change the required version to iOS 6.0 I can test it in my projects.\nLike this:\npod \"OvershareKit\", :git => \"https://github.com/overshare/overshare-kit.git\", :commit => \"87ce156f97bc726ab749c9f14cef3821f96ff16b\"\nBut I get an error because I am supporting iOS 6.0 in my projects.\n[!] The platform of the target Pods (iOS 6.0) is not compatible with OvershareKit (0.0.1) which has a minimum requirement of iOS 7.0.\n. Thanks man!\n. Got it!!! that is both bad news and good news. building for the future is good ;)\nI suggest that you add that information to the main page so that everyone knows overshare-kit requires iOS 7.\n. ",
    "jhersh": "secksy PR action here: https://github.com/overshare/overshare-kit/issues/2\n. So I went all-out with dynamic subspecs :)\n- Added a Providers folder and moved most of the third-party providers there\n- Podspec file now dynamically generates subspecs for each provider, so you can pick and choose only the providers you're interested in\n- Each subspec defines a macro, e.g. OVERSHARE_POCKET, and I've added flags to some Overshare files to check for the presence of certain providers so they still run if the provider is not present\n- Moved categories into Overshare Kit/Additions\nThis has grown into something of a major change and I understand if you want to take some time to look over it. Another consequence is that, while subspecs make it very easy to use OvershareKit with Cocoapods, you'd need a bit more work to use OvershareKit outside of Cocoapods: a simple header file that defines all macros generated by the subspecs.\n. Not necessarily, I just picked a number based on the screenshot :) @jaredsinclair perhaps can clarify minimum OS\n. Here's a sample project using Overshare with cocoapods. Clone and run cd OKTest && pod install: https://github.com/jhersh/overshare-kit/tree/m.cocoapods-test\n. OK, podspec now using iOS 6\n. Updated podspec to indicate 7, squashed\n. I removed the Additions folder, so that's a good number fewer files impacted. I'll look into further minimizing the impact\n. With this new OvershareKitProviders.h file in non-Cocoapods projects (not included in Cocoapods projects -- this file is not part of the podspec), there shouldn't be any functional difference in OvershareKit with or without cocoapods.\nThere is admittedly still the Providers folder and a bunch of macros. Closer?\n. @jaredsinclair It's less about dependencies and more a means for the developer to pick and choose only the providers she wants to include. For example I sure do love me some 1Password, and included a 1Password search feature in an app of mine, but I don't think anyone ever used it. Nor do I think my users would know the first thing about ADN.\nUltimately the developer should know her users best, and subspecs let her make the judgment call about which to include. The full suite of OvershareKit providers, while very impressive, is too much for some uses.\n. Yup, you're correct. I guess subspecs could be the difference between excluding activities and excluding activities without requiring their dependencies.\n. > Our intention is to require those dependencies, plain and simple.\nThanks, I think that's what I didn't understand until now. I'll take another look at the podspec\n. New podspec now posted with no project changes. It requires the ADNLogin and PocketAPI pods.\nTo do remaining: push a tag, add tag and your emails to the podspec.\n. @Heinemark Pods don't have modules enabled by default. You can either enable modules manually in your Pods project or use the new podspec I just pushed, which enables modules via compiler flag.\n. Bump :) @jaredsinclair \nHere's all you need to do to support cocoapods in OvershareKit:\n- [x] Merge this PR, or one like it\n- [x] Push a tag to OvershareKit\n- [x] Add that tag and your emails to the podspec file\n- [x] Push the spec to the Cocoapods specs repo. I'm happy to do this for you once the spec is merged\n. @jaredsinclair \n1) Correct - the only change to the repo is the addition of this .podspec file.\n2-3) Yes, a git tag. I recommend http://semver.org/ (and therefore a first tag of 0.0.1) but you can pick a naming scheme that works for you\nGive me a minute to squash and rebase on master then you're all set\n. Thanks @jaredsinclair! We're really close. Some minor final bits here: #7\n. Whoops, also worth mentioning that you'll need to delete the 1.0.1 tag and re-apply it to the result of this merge\n. @jaredsinclair We are ready to rock!\nOnce this (https://github.com/CocoaPods/Specs/pull/5508) is merged, a few things will happen more or less immediately:\n- OvershareKit will be available as a Cocoapod\n- You'll get tweeted\n- Unicorns & kittens\n. You can also now use OvershareKit as a pod even before it's merged into the specs repo:\npod 'OvershareKit', :git => 'https://github.com/overshare/overshare-kit.git'\n. OvershareKit is now available as a Cocoapod!\npod 'OvershareKit', '~> 1.0.1'\n. ",
    "brittonmobile": "It won't work in iOS 6. It uses among other things: NSURLComponents, UIButtonTypeSystem, -[NSString stringByAddingPercentEncodingWithAllowedCharacters:], +[NSCharacterSet URLQueryAllowedCharacterSet], -[NSData base64EncodedStringWithOptions:], etc.\n. ",
    "justin": "OvershareKit requires iOS 7. We built it for the future, not the past. \n- j\n\nOn Nov 2, 2013, at 20:21, brittonmobile notifications@github.com wrote:\nIt won't work in iOS 6. It uses among other things: NSURLComponents, UIButtonTypeSystem, -[NSString stringByAddingPercentEncodingWithAllowedCharacters:], +[NSCharacterSet URLQueryAllowedCharacterSet], -[NSData base64EncodedStringWithOptions:], etc.\n\u2014\nReply to this email directly or view it on GitHub.\n. We are OK with having the ability for people to import and use OSK through Cocoapods, but not at the expense of rearranging the entire project and making it heavily dependent on people having to use Cocoapods. Neither Jared nor I use it in our workflows. \n\nIs there a way to do this without having to adjust the existing project implementation?\n. Thanks, @berg! \n. Patches welcome.\n. I haven't looked at the Facebook stuff, but switching to the system Twitter UI implementation isn't something we are interested in pursuing. It doesn't align with our long-term plans for the framework.\n. Awesome! Thanks for taking the time. We'll take a look.\n. ",
    "brianeunilkim": "Looking forward to using Overshare Kit via CocoaPods!\n. ",
    "patoroco": "+1 waiting for Cocoa Pods oficial repo. Meanwhile I copy your podspec to my \"private\" repo: https://github.com/patoroco/personal-specs\nIf you want to use easily this podspec from cocoapods, simply add my repo to your cocoa executing:\npod repo add patoroco-specs git@github.com:patoroco/personal-specs.git\nThanks for your podspec! :)\n. Thanks @jaredsinclair :+1: \n. I remove spec in my personal Cocoa Pods Specs repo. Thanks @jhersh!\n. ",
    "Heinemark": "That's brilliant @patoroco, thanks!\n. Getting quite a lot of errors when importing OvershareKit.h though. Should I do something more than adding the pod?\n\n. @jhersh Thanks! It was the main project that had that setting set to NO. Apparently it's now set to YES by default in projects created in xcode 5 and later.\n. ",
    "calimarkus": "please add official pod support!! :+1:\n. you could cherry-pick a pull request branch for this feature only. I think it would more likely be accepted.\n. 1) go to the latest point, that is identical to the original repo, e.g. git checkout master.\n2) create a new branch e.g., git checkout -b feature/facebookItem\n3) cherry-pick the first related commit. e.g. git cherry-pick 96cc36c (where 96cc36c is the commit hash)\n4) repeat 3) for all related commits\n5) send a PR for that branch\n. ",
    "cheesemaker": "There isn't really a way to implement this in a way that conforms to OSK. Instagram does not provide an API for posting photos directly to their service and the only way that is provided is to use a UIDocumentInteractionController to launch into the Instagram app if it's installed on the device. The UI interaction on this would be quite terrible as UIDocumentInteractionControllers pop up another system \"open in\" sheet which is really what OSK is trying to replace in the first place. \nInstagram needs to provide an API for doing this without having to go through the UIDocumentInteractionController. Until that time, a better implementation/workaround would be for OSK to implement/add an \"Open In\" activity which for PNG and JPG objects would display Instagram as an option if the app was installed on the device.\n. 1. Technically, the completion block should be called on the main thread. Let me patch that up.\n2. On the config API, if I understand what you're asking, you'd like to cache and store short_url_length_https? If so, absolutely, I can add that. How should that be accessed? If we haven't uploaded an image yet, there won't be a value cached. Or do you want me to add a function something like:\n- (void) requestTwitterImageURLLenght:(ACAccount )account completion:(void(^)(NSError error, NSInteger length))completion;\n. Ok, check out what I just pushed and tell me if that's what you need. \n. No conflicts if you start changing those. \n. ",
    "jefflewis": "I'm trying to implement this and am basing the sharing of UIDocumentInteractionController off of DMActivityInstagram. \nAs @brianeunilkim mentioned, Instagram is already listed as a URLScheme type. However, when I crated OSKInstagramActivity and conformed it to OSKURLSchemeActivity, I seem to be unable to get an icon to load in the share sheet. My implementation can be found at this gist.\nWhat step(s) am I missing to get this working?\n. ",
    "carbocation": "Pinterest is my main reason for wanting to use an alternative to UIActivityController. I have photos that I want to submit to Messages, Instagram, Facebook, Twitter, and Pinterest. I can do all of these things except pinterest, which accepts a URL instead of an actual image.\nI have both the image and its URL, so the UIActivityController actually works with all 5 services. However, it puts ugly text (the image URL) into the message area of all of the non-Pinterest services, which is a dealbreaker.\nBecause OvershareKit understands the importance of being able to select the media based on the service (which UIActivityController does not), OvershareKit is actually the perfect tool for adding Pinterest support even though its API is ugly.\nJust wanted to add my $0.02. If I get a working implementation, I'll post around.\n. ",
    "valheru7": "Was kind of a quick way of getting a delegate in. Maybe a better way would be a separate OSKPresentationManagerDelegate protocol.\n. Thanks. Makes sense. \n. Jared mentioned I should simply make my customizationsDelegate something that lives as long as the life of the application instead of in the current context. Makes sense.\n. ",
    "berg": "I started working on this, because I ran into an issue where our shares weren't creating Open Graph stories on Facebook \u2014 but I had put that effort towards hacking it into the microblogging API, as opposed to elevating it to a new content item. You can see that stuff here: https://github.com/berg/overshare-kit/tree/microblog-url\nTruthfully, of all of the additional options that Facebook supports, \"link\" is the most interesting/important one. I think that support for the other options, e.g., tagging, place selection, Open Graph tag overrides, etc., fits best outside the scope of OSK, because it requires significant additional UI.\nWe manually append a \"\u2014 shorturl.example.com\" to the end of the message we share with the microblog content, even when sending to Twitter, App.net, etc., but that functionality might be usefully encapsulated into OSK instead. I think you'd be able to render a nice-looking text post on Facebook, Twitter, and App.net with just \"message\" and \"url\" parameters.\n. I've thought about this a bunch, and IMO, it is best to use a separate OSKShareableContentItem subclass for Facebook content, as well as replace the current OSKFacebookActivity with in-app UI with a stub that punts to the Facebook SDK. This is at odds with my original thinking, but my experience shipping OSK inside of the App.net first-party app has changed my mind.\n- Typically the default content of Facebook posts is different from microblog posts. The default post you create for Twitter and App.net, for example, might be the same, but typically you don't include a URL in the body of a Facebook post; typically it's sent as metadata along with a post. Further, the Facebook terms explicitly forbid you from including canned post text -- you're supposed to include any canned text in the destination link itself as OG tags or as supplemental metadata with the post, but the post text must be supplied by the user.\n- Facebook post metadata is complex. You can send all kinds of different metadata that will override the page's open graph tags if you want, or you can let the page itself fill in the image, icon, etc. If you just include the URL in the post body, as OSK does currently, the resulting shared Facebook post is pretty ugly. It doesn't have an image or any Open Graph data, and the Facebook native deep-linking feature doesn't work. This alone is a reason not to use OSK altogether, if you're a developer and a content publisher.\n- Many users don't have the built-in Facebook account support turned on. With the SDK, you don't even have to authorize Facebook -- you get punted into the FB app then quickly and seamlessly punted back.\n- While the OSK sharing activity UI is gorgeous, the Facebook UI includes a nice Open Graph post preview, etc., and it's really easy to hook up. I did it, very very hackily, in my OSK fork: https://github.com/berg/overshare-kit/commit/3701977b5ccff07e6b07f603c3ad624b4e527d59\n- AFAIK, with the SDK, you can choose to publish to Facebook pages as well as your own timeline, basically for free.\nSo I firmly believe that it's in the best interests of both end-users and content publishers, and therefore in the best interests of the community of developers that use OSK, to implement native Facebook sharing support, both  OSKFacebookContentItem and a new OSKFacebookActivity.\n. @jaredsinclair I believe it's the latter. I don't think the Open Graph post preview exists in the Social.framework view controllers.\n. @jaredsinclair Yes. What OSK has today is already dramatically better than the UI provided by Social.framework, and in my experience, the system account management is configured properly much less often than you'd hope. Facebook-iOS-SDK is better at both of these things.\n. While I agree that building deep support for Open Graph objects into the kit itself is not desirable, users have come to expect certain behavior when posting to their Facebook newsfeeds or pages; the current implementation yields stories which will convert poorly and users may be surprised that no link abstract appears in their feeds. A basic implementation is well worth the effort, IMO.\n. Sounds good to me, Jared. I think that's a very sensible approach; supporting proper link sharing is the most important thing for users.\nI actually think I've already written the OSKAdvancedFacebookActivity that you suggest. Let me see if I can rename it, get it to coexist along the current OSKFacebookActivity, and then I can submit it as a PR.\n. ",
    "fjcaetano": "I was only able to share a link, but \"smart links\" (where they fetch pictures, title, etc) are processed by Facebook clients. In order to share content, not only link, this content must be created by the app.\nWhat I'm unable to understand is why OvershareKit is not using Facebook (and Twitter) native SDK.\nI need this ASAP, so I'll work on it in my fork and later ask for a pull-request. Is it okay for you guys?\n. So, this is the resume of the day:\nFirst, I tried using Apple Social.framework for both Twitter and Facebook. It turns out that the view that is popped when trying to share some content is hideous and doesn't show \"smart links\" for Facebook.\nSo I integrated Facebook's iOS SDK, that requires that the Facebook App ID is registered in the Info.plist (there's an assert just to be sure)\nI'll test some more and when I'm satisfied I'll update the documentation and ask for the pull request.\nIf you guys want to test it first hand, clone my company's fork: https://github.com/ideaismobile/overshare-kit\n. > Houston, we have a problem.\nI was just checking the diff to ask for the pull request when I realised that our fork has \"a little\" more than this issue should cover.\nAside from the new Facebook and Twitter sharing logic, there's also app localization via .strings file and a quickfix we had to made in the status bar.\nI'll ask for the pull request anyway and I'll leave the decision up to you, @jaredsinclair :grin:\n. I have no idea what you are talking about. hauauahuahau\nHow do I do that?\n. I'll see what I can do.\n. In my fork I'm currently able to share content to Facebook using simply a URL. I believe I haven't changed any models.\nTwitter on the other hand is a little different because it doesn't \"treat\" tweets contents. But, it actually created a \"shorted link\" (http://t.co/).\nI have some time today so I'll try to cherry-pick a pull-request as @jaydee3 suggested.\n. But OSKMailComposeViewController doesn't implement that method and I can't customize it without creating a new pull-request.\nI've also tried creating a category of MFMailComposeViewController which did implement it and it was called when the share button was clicked but it didn't solve the issue. The only way I found to fix it was that code in this pull-request.\n. What if I can't have that plist value set to YES?\n. Okay, let's try to go through with this.\n1st Commit 9f167822d7d4243387522e67f1a004f0bc39511b:\n\nMigrated Facebook share using Facebook's SDK. Their app doesn't need to be installed. The only necessary changes to the end developer are the inclusion of an URL type to handle Facebook's callback if needed and the inclusion of the FacebookAppID in the project's Info.plist instead of using the authentication delegate (as stated in the documentation and the README file).\nUsing the Facebook SDK is super simple and much more powerful than the Social.framework, also, it shows the result of the \"smart link\" processing in the sharing view, while Social.framework does not (it shows a \"prompted\" textview for commenting the shared link) as were the main issue to start.\nSince we're now sharing via Facebook SDK, a bunch of methods are now deprecated and, for code sanity, they were deleted, though it has no effect to the end developer. Whole classes such as OSKFacebookAudienceChooserViewController should be removed as they are no longer in use, and they were.\n\n2nd Commit 5201bc73e38aff6d07990e415a5d615d13dbbd17:\n\nMigrated Twitter sharing to use Social.framework. No change by the end developer is required for this to work. We chose to migrate this because the previous implementation of Twitter sharing looked hideous, with all due respect, even by \"customizing\" it through the delegates. For our demanded UX quality, the current way is unacceptable and there needed to be changes and this seemed to be the best option since it looks natural to the end user.\n\nThe following commits, as their messages should imply, are improving and enhancing missed features in the previous commits. They are absolutely required, though none of them can be spared or the end developer will be affected.\n. I understand your reluctance in accepting this huge pull-request. But honestly, issue #10 are now open for over 2 months and it seems that I was the only one that ever touched anything to fix it.\nPlease, if you doubt anything that was done here, I suggest you to clone my fork and run it in your machine so you can personally see the end effects of these commits.\n. I apologize if I offended any of you, but that was the general opinion with the rest of my team. I understand that this may not be the way you see it, but please, understand that this is how we do.\nI'm still unable to understand your roadmap that deviates from vanilla implementation, even though these can be customized. But if you're not even willing to try the pull-request in the simulator as suggested, I guess there's nothing else I can do.\nAbout your latest comment in issue #10 I completely agree with it, but as I said, these commits do not require any of those changes since they work as they are. But, never the less, this is already a start. It's better than nothing and user option dictionaries may be added in the future, but it should be done one thing at a time.\n. ",
    "giffnyc": "Just to provide an alternate voice here, I've been weighing a similar choice about Facebook sharing.   And I've spent  a lot of time with the Facebook SDK for a previous Facebook group manager/client (Roundup for Facebook ).  \nThe kit offers an abstraction for content.  Facebook specific content that is highly detailed is not an abstraction that is useful other than on Facebook .  What else would one do with a OSKFacebookContentItem that is highly detailed, other than exchange it with Facebook? For such specific and detailed content activity with a single provider, I would stick with the native FB SDK.  \nI think the kit should stick to its abstractions, and eschew such detail.  Developers who need FB specific features are never going to be happy with something other than a very detailed content model, and a very detailed posting sequence that is not in line with the model of giving users choice about multiple content destinations.  \nDon't get me wrong - I am basing the model I plan to use for FB on the content model in the kit - I think its great.  But the model I'm building would be of little use to anyone else and of no use to user who wanted to crosspost.  I am also not planning to use the kits posting methods - I'll use the FB API, since I often interact with it anyway - to set privacy in more granular way, for instance.  Also, I will not be showing the activity view to a user for Facebook purposes - elsewhere, such as sharing a single photo, sure, but not in the use case of a detailed FB post.\nI have a feeling the same issue will come up as regard different blogging platforms.\nI try to keep it clear in my mind that the kit is for opening up choice for the user and necessarily must avoid too much detail for a content model.  Even supporting such a detailed content model in the main branch, given FB's penchant for change, would be a negative time suck IMHO.\n. I understand your point and agree with the goal - allow users to share to Facebook in way that meets or exceeds their expectations, and make sure that the FB account management is done properly.  Where I think I disagree is integrating all of that into OSK at the current time.  \nI am more supportive of Jared's extended dictionary approach, which I think could go so far as to address your very real concern that linked content currently delivered as a microblog item does not work very well with the FB format.  There is a cross-platform feature gap of uploading metadata that I do think the kit should address, such as posting to FB as well as blogging platforms, and I think its smart to figure out how to accommodate it.\nBut stepping into a the creation of a content item that also has a different auth path, and a different editing view seems like a side project, not something to address in the main feature set of the kit.  As an example, the sharing dialog you mention above, a feature of the FB-SDK, requires the user to have the FB app installed and configured.  It no longer falls back to web based views as it used to.    For certain cases, such as posting content to another user's wall, FB provides no other option - the action cannot be done with graph API calls, it can only be done my calling the share dialog.  To which  I re-iterate, at this point, what is the role of OSK here?  I am using FB auth and FB  dialogs to deliver a content item that is FB specific.  Why bother even showing the activity view when I have no real equivalence across sharing services at this point?\nPlease don't take my advocacy for a point of view as disrespect - its a healthy dialogue and I, too, kinda wish I had a drop in one stop FB solution.\n. ",
    "klaas": "\n1\n. \n",
    "KrauseFx": "Setting the tint color\n``` ruby\n    UIColor *tintColor = [UIColor whiteColor];\n    [[UIWindow appearance] setTintColor:tintColor];\nUIColor *barTintColor = [UIColor greenColor];\n\n[[UINavigationBar appearance] setBarTintColor:barTintColor];\n[[UINavigationBar appearance] setTitleTextAttributes:@{\n                                                       NSForegroundColorAttributeName:[UIColor whiteColor]\n                                                       }];\n\n```\nCalling OvershareKit\nruby\nOSKShareableContent *shareSheet = [OSKShareableContent contentFromText:share];\n[[OSKPresentationManager sharedInstance] presentActivitySheetForContent:shareSheet\n                                                   presentingViewController:self.navigationController\n                                                                    options:nil]\nWhat's missing:\nruby\nMFMailComposeViewController *mailController = [[MFMailComposeViewController alloc] init];\n...\n[mailController.navigationBar setTintColor:[UIWindow appearance].tintColor];\n. Thanks, that's working.\nStill, this is an issue of the library: this should happen automatically for system view controllers. \nThis problem occurs every time you set a navigation bar background color and a font color, since only the navigation bar background color is applied to the mail composer sheet.\n. ",
    "JayZhao": "Thank you Jared, now it's working, so is share to Readability.\n. ",
    "gruber": "On 22 Jan 2014, at 9:57pm, Jared Sinclair notifications@github.com wrote:\n\nFixed?\n\nI think so. What a weird font though. The opening single quote for Helvetica should look like this:\nOne thing you might find useful is the attached text file. I just opened TextEdit, turned on Cocoa\u2019s smart quotes, and typed a bunch of punctuation characters followed by a quote. Some of these make sense to me, others I can\u2019t figure out. But I suspect there\u2019s a reason for each.\n\u2014J.G.\n. On 23 Jan 2014, at 5:07pm, Jared Sinclair notifications@github.com wrote:\n\nThere are still some edge cases not accounted for that I might tackle later, e.g. abbreviated decades. OSK puts an opening single quote in front of the \u201990s instead of a closing single quote.\nThat\u2019s a tough one. I\u2019m not sure I\u2019ve ever seen a smart quotes engine get that right.\n\nMy SmartyPants algorithm does, but SmartyPants has the advantage of not being an as-you-type engine. It has the whole string to examine, so it can look behind and ahead.\nWhat about dash-dash for an em-dash?\n\u2014J.G.\n. ",
    "jordanekay": "Looks good! Would also be nice to have a list of words in the device\u2019s current language that start with \u2019 (like \u2019em, \u2019tis, etc.) so that \u2018 isn\u2019t used inadvertently.\n. ",
    "irace": "So, your rough method spec there has individual fields for things like \"title\", \"text\", etc., where the ADN utility you pointed me at instead takes an object of type OSKBlogPostContentItem. Which is the right way to go?\n. > Wouldn't be just easier to drop submodules and add dependencies via Cocoapods, so TMTumblrSDK on the Tumblr Utility?\nMost of the complexity is in the UI, considering a user can have multiple blogs, can make posts of seven different types, etc. Based on @jaredsinclair's comments about the future of OvershareKit in the impending iOS 8 extension landscape, it might not be worth it. We plan to expose a share extension from Tumblr.app.\nGlad you're finding TMTumblrSDK enjoyable to use though!\n. > I think we'll try to fork OSK and hack a very simple barebones Tumblr activity (we only need the text post type for our app).\nSounds like a good course of action to me at least.\n. ",
    "rsanchezsaez": "What's the progress on this?\nWouldn't be just easier to drop submodules and add dependencies via Cocoapods, so TMTumblrSDK on the Tumblr Utility?\nI've been using TMTumblrSDK and it's quite simple and convenient.\n. Thanks for the update, that's a good point about iOS 8.\nHowever I think iOS 7 support is relevant at least until iOS 9 is released. I think we'll try to fork OSK and hack a very simple barebones Tumblr activity (we only need the text post type for our app).\n. @irace I've been working on this but I've hit a wall.\nI'm using felixmo's changes to TMTumblrSDK for UIWebView authentication (merged with the latest official TMTumblrSDK head). However, when I try to authenticate via the UIWebView, I get an error:\n\nError Domain=NSURLErrorDomain Code=-1012 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error -1012.)\" UserInfo=0x178267340 {NSErrorFailingURLStringKey=http://www.tumblr.com/oauth/request_token?oauth_callback=overshare%3A%2F%2Ftumblr-authorize, NSUnderlyingError=0x1780514c0 \"The operation couldn\u2019t be completed. (kCFErrorDomainCFNetwork error -1012.)\", NSErrorFailingURLKey=http://www.tumblr.com/oauth/request_token?oauth_callback=overshare%3A%2F%2Ftumblr-authorize}\n\nI think I am setting [TMTumblrAuthenticator sharedInstance].OAuthConsumerKey and [TMTumblrAuthenticator sharedInstance].OAuthConsumerSecret correctly so that should not be the issue.\nCould you give me hand?\nSee my forks here (I ended up adding TMTumblrSDK plus JXHTTP as OvershareKit submodules):\n- https://github.com/rsanchezsaez/overshare-kit/\n- https://github.com/rsanchezsaez/TMTumblrSDK\n. It turns out something was wrong with the app key and secret. I'm using a different one and I'm making progress again. So no worries.\nSorry about that!\nUPDATE: It turns out the error was due to not clearing the tumblr cookies from a failed authorization attempt.\n. I finished the UITumblrActivity implementation. You can check it out on my fork.\nI submitted a pull request just in case you want to add it.\n. Clearing the cookies worked for me. Try to clear them from a OSKWebViewController subclass like this:\n[self clearCookiesForBaseURLs:@[@\"https://tumblr.com\", @\"https://www.tumblr.com\"]];\n. ",
    "gavrix": "@rsanchezsaez \n\nUPDATE: It turns out the error was due to not clearing the tumblr cookies from a failed authorization attempt.\n\nHi. I'm seeing same issue here. Trying to follow your idea of clearing cookies for tumblr.com and www.tumblr.com before starting oAuth but that doesn't seem to help. Can you please give some details on how you solved that problem?\n. @rsanchezsaez that was the first I tried. Didn't work.\nTurned out it's a iOS HTTP framework weirdness. OAuth assumes that initial request for oauth_token and secret is OAuth signed and signature includes initial URL (http://www.tumblr.com/oauth/request_token...). Here's that request from TMTumblrAuthenticator\nNSString *tokenRequestURLString = [NSString stringWithFormat:@\"http://www.tumblr.com/oauth/request_token?oauth_callback=%@/\",\n                                       TMURLEncode([NSString stringWithFormat:@\"%@://tumblr-authorize\", URLScheme])];\nFor some reason, iOS modifies this NSURLRequest somewhere internally and turns it into https://...\nSince url changed, Tumblr's backend fails to match oauth_signature.\nChanging initial request to https:// solves my problem. gonna make pull request into TMTumblrAuthenticator.\n. ",
    "Sashke": "I did it and now i can login from Account Manager, but cant login from Activity Sheet.\nWhen i click on on activity in activity sheet i get this warn \"Warning: Attempt to present  on  whose view is not in the window hierarchy!\"\nCode:\nOSKPresentationManager manager=[OSKPresentationManager sharedInstance];\n[manager setViewControllerDelegate:self];\n    [session authenticateWithViewController:[manager authenticationViewControllerForActivity:self] completionHandler:^(NSError error) {\n- (UIViewController  )osk_authenticationViewControllerForActivity:(OSKActivity )activity\n  {\n  UIViewController *viewController=[[UIViewController alloc] init];\n  return viewController;\n  }\nWhen i set delegate i have error with window hierarchy and other activities not working.\nWhen i dont set delegate i have error from evernote sdk:\nif (!viewController) {\n        // no point continuing without a valid view controller,\n        [self completeAuthenticationWithError:[NSError errorWithDomain:EvernoteSDKErrorDomain \n                                                                  code:EvernoteSDKErrorCode_NO_VIEWCONTROLLER \n                                                              userInfo:nil]];\n        return;\n    }\n. Evernote sdk have method for authentication - -authenticateWithViewController:(_UIViewController) completionHandler:^(NSError *error).\n(_UIViewController) - controller which will present another view Controller(Controller form evernote SDK)\nSo i can login via accountManagementViewController cause i pass (self) as viewController and EvernoteSDK present it successfuly, but i cant do it from activity.\nI have another SDK with almost same authentication - VKontakteSDK. VKSDK have required delegate method :\n-  (void)vkSdkShouldPresentViewController:(UIViewController *)controller {\n    NSLog(@\"should\");\n    [self presentViewController:controller animated:YES completion:nil];\n}\nif i will return\n(UIViewController <OSKAuthenticationViewController> *)osk_authenticationViewControllerForActivity:(OSKActivity *)activity;\nas  view controller then i will have double presenting - overshare present view controller from this delegate and evernote will present its own viewController from presented Overshare delegate controller.\nHow i can do it with one presenting?\nI will share sample project tomorrow .\n. ",
    "peterfriese": "@jaredsinclair and @justin - I updated my code to reflect your suggestions. Can you have another look?\n. ",
    "dkhamsing": ":+1: \n. ",
    "dlo": "@jaredsinclair / @justin -- I'm willing to invest some time into making this happen, just want to get an idea from you for what would be a suitable solution. Looking through the code, OSKManagedAccountCredential seems to be the link between the keychain and the account identifier. If we could provide a delegate to this class and call if it exists & ignore it if it returns nil, other apps could provide their own keychain data in place of OSK's. Thoughts?\n. Awesome, thanks @jaredsinclair! I'm going to give this a shot and will report back.\n. ",
    "stevemoser": "Ideally all the external dependencies would be optional by using something like:\nif __has_include()\nimport \nimport \nendif\n. ",
    "jacdevos": "Hi Jared, Iove the framework, and I saw you're looking at this breaking issue... let me know if you need any help fixing it..\n. Jared, I've tested your fixed .podspec in my local pod repo and the s.ios.vendored_frameworks works fine.\nJust add google google-plus-ios-sdk as an dependency then it's done:\n....\n  s.dependency 'PocketAPI'\n s.dependency 'google-plus-ios-sdk'\nThanks again for your contrib.\n. @jaredsinclair, are you sure it's not the one used by OSK?\nThe 'google-plus-ios-sdk' adds the following frameworks from\ngoogle, referred to in the podspec:\nGoogleOpenSource.framework\nGooglePlus.framework\nas well as the GooglePlus.bundle\nOr is there another pod from google which also contains it?\nOn 23 March 2014 03:34, Jared Sinclair notifications@github.com wrote:\n\n@jacdevos https://github.com/jacdevos The 'google-plus-ios-sdk\"\nCocoaPod is not the same code included in OSK.\n\nReply to this email directly or view it on GitHubhttps://github.com/overshare/overshare-kit/issues/39#issuecomment-38370317\n.\n\n\nJacques de Vos\n+27 72 587 6401  Mobile\n+27 86 669 2757  Fax\n. Ahh I see the whole framework was included (which is the same as\n'google-plus-ios-sdk'), so we should not need the pod.\nNot sure why including 'google-plus-ios-sdk' pod to made it work for me\nthen...\nAnyway, I think you can merge your change, as it fixes the key issue.\nIf other people that use pods still have errors, you can include\n'google-plus-ios-sdk'.\nOn 23 March 2014 08:14, Jared Sinclair notifications@github.com wrote:\n\nI could be wrong. I didn't contribute that code myself, so I am basing my\njudgement on the fact that those frameworks/bundle were included by the\ncontributor (a Google iOS engineer) directly in the main repo, not as git\nsubmodules. I don't know whether that pod is the same or not. I assume not.\n~ Jared\n\nOn Mar 23, 2014, at 2:05 AM, Jacques de Vos notifications@github.com\nwrote:\n@jaredsinclair, are you sure it's not the one used by OSK?\nThe 'google-plus-ios-sdk' adds the following frameworks from\ngoogle, referred to in the podspec:\nGoogleOpenSource.framework\nGooglePlus.framework\nas well as the GooglePlus.bundle\nOr is there another pod from google which also contains it?\nOn 23 March 2014 03:34, Jared Sinclair notifications@github.com\nwrote:\n\n@jacdevos https://github.com/jacdevos The 'google-plus-ios-sdk\"\nCocoaPod is not the same code included in OSK.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/overshare/overshare-kit/issues/39#issuecomment-38370317>\n.\n\n\nJacques de Vos\n+27 72 587 6401 Mobile\n+27 86 669 2757 Fax\nReply to this email directly or view it on GitHub.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/overshare/overshare-kit/issues/39#issuecomment-38375152\n.\n\n\nJacques de Vos\n+27 72 587 6401  Mobile\n+27 86 669 2757  Fax\n. Thanks Jared, work nicely!\nOn 23 March 2014 16:17, Jared Sinclair notifications@github.com wrote:\n\nThanks everyone. I've submitted a pull request with the updated spec for\n1.1.0.\n\nReply to this email directly or view it on GitHubhttps://github.com/overshare/overshare-kit/issues/39#issuecomment-38383663\n.\n\n\nJacques de Vos\n+27 72 587 6401  Mobile\n+27 86 669 2757  Fax\n. ",
    "TosinAF": "Has this been committed into the dev branch yet? Thanks\n. ",
    "sukima": "@jaredsinclair I'm not sure. I don't have a *.pch that I'm aware of because I'm using the \"Stand Alone\" xcodeproj. I attempted to compile OvershareKit.xcodeproj directly:\nopen Projects/Static\\ Library/OvershareKit/OvershareKit.xcodeproj\nIt was then that it complained that types were missing (UIImage). According to SO (forgot link) you had to add UIKit.framework to your Linked list in the project settings. So I did. After that I realized you needed the @import UIKit; line. Then it built.\nThe diff showed several ID changes (presumably MD5s) and my interpretation was that Xcode 5.1 updated UIKit and in turn changed the framework linking the old xcodeproj had in it.\nIf you wish for more info let me know how to extract it and I'll toss it up in a gist.\n. ",
    "DenTelezhkin": "@jaredsinclair Sure, done! I've rebased on your latest master commit, so i think there's no need to resubmit pull request =)\n. ",
    "kukat": "Don't forget MediaPlayer.framework, that's required by Google Plus iOS SDK.\nJust curious, why not use google-plus-ios-sdk pod?\ns.dependency 'google-plus-ios-sdk', '~> 1.5.0'\n. ",
    "samuelclay": "Would love to see this. Got a number of users asking for it: https://getsatisfaction.com/newsblur/topics/adding_evernote_to_ipads_newsblur_app\n. ",
    "kidordinn": "Count me in.\n. ",
    "benhirashima": "I have also been unable to get Facebook sharing working in my own app. I get the same error dialog as described above. I am passing a valid Facebook app ID and secret. \nStepping through the code, I get this NSError object at line 55 in OSKSystemAccountStore.m:\nError Domain=com.apple.accounts Code=6 \"The operation couldn\u2019t be completed. (com.apple.accounts error 6.)\"\n. It's in OSKSessionController's execution of handleFacebookAccountAuthenticationStepForActivity:, which calls OSKSystemAccountStore's requestAccessToAccountsWithAccountTypeIdentifier:, which calls ACAccountStore's requestAccessToAccountsWithType: which then returns the error described above.\n. Yes, I do have a Facebook account set up in the Settings app. However, I get the same error regardless of whether the account is there or not. \nOn Tue, Apr 15, 2014 at 9:19 AM, Jared Sinclair notifications@github.com wrote:Do you have a Facebook account entered in Settings.app -> Facebook?\n\u2014Reply to this email directly or view it on GitHub.\n. ",
    "Kowaio": "Hi guys,\nI jump into your discussion because I recently encountered the same issue. In my case, I use the Overshare kit classes in my app and since I'm just debugging for now, I didn't added the setCustomizationsDelegate for facebook yet.\nHere what happens. When I launch my app and want to share my content and click facebook in the sheet, the message saying \"Couldn't access your accounts\" automatically pops up. \nI think I might have hit the \"Don't allow\" button in the sample app (Overshare), but not in mine. But since it's the same debug key in both of them, I think the device is considering it wants to use the same FB access. I tried to delete, enable/disable facebook sharing in settings privacy for both app too, but nothing happens and I'm still stuck. Do you have any ideas ?\nI know for a fact that when hitting the \"Don't allow\" button in Game Center, there were an issue and we did needed to restore settings for Game Center to work in iOS 7. I'm wondering if it could be the same type of bug here. Here's the link of what I'm talking about: http://stackoverflow.com/questions/19013328/unable-to-sign-in-sandbox-gamecenter-on-ios-7\nI hope you have any ideas to help me. All the best, keep up the good work (y).\nCheers,\n. It seems I found a solution. I added the SetCustomizationsDelegate and fill the applicationCredentialForActivityType in my class. I then entered credentials of a debug test app I created on facebook (don't forget to set the bundle ID in facebook app page) and it works like a charm. Sorry again for commenting but it might help others. Best regards,\n. Hello @PowZone I don't really have an example. You just need to set the following method in your app with your facebook app credentials:\n- (OSKApplicationCredential )applicationCredentialForActivityType:(NSString )activityType\n  {\n  OSKApplicationCredential *appCredential = nil;\nif ([activityType isEqualToString:OSKActivityType_iOS_Facebook]) {\n      appCredential = [[OSKApplicationCredential alloc]\n                       initWithOvershareApplicationKey:@\"facebook_key\"\n                       applicationSecret:@\"facebook_secret\"\n                       appName:@\"facebook_app_name\"];\n  }\nreturn appCredential;\n  }\nIf your facebook app is yours and is in debug mode, you just need to set the correct Bundle Identifier of your iOS app in the settings (of your facebook app). If it's not yours, your team needs to invite you to be a developer to the facebook app in order for it to work. As soon as the app goes live (not in debug mode anymore), it will work for everyone (if the credentials are correct, it goes without saying).\nBest,\n. Hello again @PowZone, \nIt seems like the credentials you entered are still not valid, or that Facebook app (on your iOS device) doesn't allow your app.\nDouble check in General > settings > facebook on your iOS device that your app appears and is allowed.\nThen, go to your facebook app on https://developers.facebook.com/apps/ and double check that you've got the correct facebook App ID and App Secret and that the Bundle ID in the settings is the same you've got on your .plist for your xcodeproj.\nAfter that, it should work. Also, use the same facebook account to register the app on facebook, and to log in to facebook on your iOS device.\nBest,\n. Glad I could help :)\nHave a great day!\n. ",
    "PowZone": "@Kowaio I have the same problem. \nCan you please post a small example?\nThanks ;)\n. Thx @Kowaio, I added this method, the OSKActivityCustomizations protocol and set delegate with setCustomizationsDelegate. Now OSK uses my credentials for facebook and google plus.\n.. but unfortunately still doesn't work :(\nOSK prints this log on Facebook's button tap:\n2014-11-26 14:17:17.850 appT1[1947:60b] __93-[OSKSystemAccountStore requestAccessToAccountsWithAccountTypeIdentifier:options:completion:]_block_invoke_2 [Line 58]\nSystem account access request denied: The operation couldn\u2019t be completed. (com.apple.accounts error 6.)\n2014-11-26 14:17:17.853 appT1[1947:60b] -[OSKSessionController handleSystemAccountAccessFailure:withActivity:] [Line 209]\nAccess request failed for system accounts with account type identifier: com.apple.facebook\nI'm using an iPhone 4S with iOS 7.1.2 with a working Facebook account configured in general settings.\n. Hi @Kowaio,\nThx!! Facebook works ;) \nMy bad.. facebook account was configured only on my other device.\nnote: share works even with facebook secret null.\n. ",
    "jmlw": "Thanks for the info! That helped! Turns out I was doing two things wrong, not using the OSKActivitiesManager and retrieving the appropriate activity from it, and I was not providing Facebook keys to the shared instance of OSKActivitiesManager but rather an alloc init'ed instance which was causing problems. I realized the mistake, and I have a customer share sheet working now. Thanks again! \n. This error appears to only occur on the simulator. It did not occur running directly on an iOS 8 device.\n. ",
    "rounak": "Can this be solved by adding MediaPlayer framework in the podspec?\n. I've solved it by adding MediaPlayer framework\n. ",
    "zigdanis": "I'm getting the same result after adding OvershreKit from Cocoapods...\n. ",
    "PadraigK": "Updated pull request with a few more fixes.\n. Nope. The original issue does not occur there either, so it would be fine to block it out as iOS 8 only.\n. I also don't see it doing any harm on iOS 7, but good to test alright.. I can take a look over the weekend and update you.\n. I just tested this on iOS 7 \u2014\u00a0it works fine.\n. Added the Google Plus fix to this pull request. (I can't see how to make separate requests?!)\nhttp://googledevelopers.blogspot.com.br/2014/09/an-important-announcement-for-ios.html\n. ",
    "caseyoneill": "I'm sure you saw this but it looks like the Google Plus SDK has a Cocoa Pod. Due to the recent app rejections, I also think it would be good to decouple OvershareKit from the SDK if possible. Were you saying that there is a problem with Cocoa Pods and this SDK?\npod 'google-plus-ios-sdk', '~> 1.7'\n. ",
    "donholly": "sorry, meant to do this on my fork :)\n. ",
    "amelakis": "It still complains when you install with Cocoapods though.\n. "
}