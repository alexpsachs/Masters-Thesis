{
    "evilsocket": "The info module is not a spoofer so it shouldn't be in that folder, I can't merge this pull request.\n. that's cool, tnx\n. That's great! tnx, yeah the at least help menu should be available without root, fixing that asap ;)\n. Before I merge, answer here plz https://github.com/samsymons/bettercap/commit/99042b428ff2d4f78d61d03680c7888e08b94131\n. @samsymons you're the man! :D\n. I can't merge, there're conflicts, plz fix them before I can merge your branch.\n. did u actually tested it? this can't work https://github.com/evilsocket/bettercap/pull/17/files#diff-c4f6b0653565fbf06ed134078a9cc474R43\n. yeah but you renamed Shell to shell as long as I see O.o\n. oh I saw the def shell now! :D\n. I'd say, LET'S MERGE! :D\n. great job dude, keep pushing tests!!!!!!! 1000000 TIMES THANK YOU\n. sorry but i won't accept big code refactors for a while, can't merge this. \nOnly fixes and improvements ( not related to code style ) will be accepted right now.\n. You're absolutely right, but I can't accept something you haven't tested:\n\neven though I didn't run it yet actually\n\nEach contribution must be tested from the contributor before I can accept it.\n. again, you're right and @samsymons is working on it, that's why right now i can't trust PR without them being at least manually tested from contributors.\nI don't want to argue about testing&shit, again, I totally agree with you.\n. i'll test it\n. yeah I've noticed this behavior as well, but usually it's able to get the hw address after few seconds ... did u try to just wait?\n. :+1: \n. why?\n. it is, i just want to understand :D is it so it's 1.9 compatible, right?\n. ( I'm not that experienced in ruby )\n. can you point me to some official doc saying that using such style of hash is good practice plz?\n. merged, tnx!\n. :+1: \n. great, thanks! :+1: \n. that's great, tnx! :+1: \n. mmmm u forgot to exit after the check\n. yeah but you're not supposed to exit only if an error occurred, u need to exit always after a version check, that's what i meant\n. cool, great PR, tnx! <3\n. it actually makes a lot of sense, merging\n. no way im gonna merge such major refactor\n. why did u put the get_by_name code somewhere else? closing.\n. way much better! :D tnx\n. did u test it with only 1 spoofer, no spoofers ( -S NONE or --no-spoof ), etc ?\n. tnx! :)\n. I can't accept this parser as it would cause a lot of false positives, please make it more specific and I'll merge it.\nThanks for your efforts!\n. I can't accept this parser as it would cause a lot of false positives, please make it more specific and I'll merge it.\nThanks for your efforts!\n. great! tnx\n. you're the man! :D\n. <3\n. mmm isn't this supposed to be encrypted?\n. cool, do you have a sample pcap file I can use in order to test this?\n. great, tnx! :D\n. thanks for your support and efforts, but this should be implemented as a custom/user module, it's not something i can integrate into the core.\n. thanks for your support and efforts, but this should be implemented as a custom/user module, it's not something i can integrate into the core.\n. thanks for your support and efforts, but this should be implemented as a custom/user module, it's not something i can integrate into the core.\n. my bad, great PR btw :)\n. pull request :)\n. that's great, thanks! :D\n. In this PR you used the {replacement} as an argument, not as a block:\nresponse.body.sub!( '</head>', {replacement} )\nI don't think this is the correct syntax :)\n. sub! only replaces the first occurrence, I need gsub! instead ...\n. you're right, my bad, merging\n. WOW! Thanks :D\n. nice \ud83d\udc4d \n. I was about to reject this PR becase \"OMG another gem dependency just for this?!\", but then I saw you did it the right way, therefore ....... RAINBOWS FOR EVERYONE !!!\n\nBecause reasons.. I guess it kinda makes sense :+1: . I don't. \n. i can't merge this, that's just not the way to do it. Once you have your ruby env setup on mac osx, you just need to \"sudo gem install bettercap\" (plus brew for a few dependencies).. just ... WOW ___ can u make a PoC video in order for me to see that everything's working on IPv6? I can't test it right now .... great job dude, really.. OMFG that's great! and kudos for the Tidus wallpaper :D. Hey @dimriou, why don't you add your packetfu PR as a monkey patch in the meantime? We can remove it after it's merged in the main repo. . Hey @dimriou I did a few fixes to make the IPv6 support work even if no target is specified ( full network spoofing ), but I don't have a way to test it at the moment. Could you please give it a try and see if everything looks ok after my modifications?. Mmmm I guess I'll have to setup an IPv6 network then :) Any ipv6 cabaple router you would suggest? ^^. :+1: . cool! :D tnx. :D. If it works, sure! . dude you should put your name on this stuff, not mine, you're doing a great job :). Don't hate me ... but why not adding a \ud83d\udd12 ( http://www.fileformat.info/info/unicode/char/1f512/index.htm ) to the HTTPS traffic instead? Wouldn't that make much more sense? :). It really depends on the scenario ... and while \u26ab is not very indicative for unencrypted traffic, :lock: is pretty much the standard for the encrypted one :D \nLong story short:\nUsers with  \u26ab : wtf is this thing now?!\nUsers with :lock: : oh, I see, they added the lock to distinguish encrypted traffic, makes sense \n:D. \n. I'm sorry I can't merge this, the protocol is on the right of the destination address if you need it, adding another one would replace the HTTP method which is something useful to see.. I'm sorry I can't merge this, the protocol is on the right of the destination address if you need it, adding another one would replace the HTTP method which is something useful to see.. I mean that replacing the method with the protocol, which is already printed, is redundant and hides other useful information.. Maybe I'm over simplifying here, but there's always the --use-mac AA:BB:CC ... argument, if the user needs to use specific MAC addresses due to network constraints, he can just use that option ... no?\nAnyway, I'm merging this regardless, it'll be up to the end user to decide, after all when you do a MITM attack there's always a chance you're DoS-ing the network :D. WOW I haven't noticed that!!! Congrats @bcoles :D  :tada: :tada: :tada:. /Library/Ruby/Gems/2.0.0/gems/bettercap-1.1.1/lib/bettercap.rb:20:in `<top (required)>': private method `remove_const' called for Object:Class (NoMethodError)\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /Library/Ruby/Gems/2.0.0/gems/bettercap-1.1.1/bin/bettercap:15:in `<top (required)>'\n    from /usr/bin/bettercap:23:in `load'\n    from /usr/bin/bettercap:23:in `<main>'\n. @samsymons ?\n. ",
    "samsymons": "@evilsocket That's just temporary for when I was testing the Logger class \u2013\u00a0I'll push a fix. I'll also add more tests during the day, so don't merge this just yet. :)\n. @evilsocket Making progress on this PR, I think it'll be good to merge once the rest of the parser tests are in (maybe tomorrow). That'll be enough to start with at least.\n. @evilsocket Merge conflicts resolved! This can be merged now \u2013\u00a0there is more to test, but I don't know if I will have time for it this week, so I may submit another PR later with more tests.\n. Yep, the tests all pass. In order to test some of those classes I had to use a MockShell class, so what that part is doing is asking this method for the class to use. Outside of the tests it uses Shell as usual, but inside the tests it will use a MockShell because of this method here which overrides that private method.\n. Yeah, that was my way to get around tests failing when the tests tried to execute shell commands, haha. This way they never get run during test runs, and you can make assertions that they were going to be executed with the MockShell.\n. @evilsocket Very happy to help with such a cool project! I'll keep the tests coming! :D\n. Yep, that's a typo, nice catch. :) That's just with the mock shell at least, that line will only ever get logged rather than executed. I'll push a fix!\n. ",
    "RoxasShadow": "You know that something like this is not optimized, it's hard to evolve/maintain and it's difficulty approachable by contributors, right? Well, your software, your decisions.\n. I made just little changes (git diff with -w to check them properly), it should be fine now anyway. Also you're talking about the tests: bettercap is versioned as stable but I can't see any unit test to check if everything is fine or not. So, in order to merge a PR, you can only trust the contributor or test it manually (that's pretty a pain tho).\nAside this PR, what I would do is making everything safe (with tests and code revisions, even using static code analyzers) before than adding a feature up to another one. Anyway if the goal is having something that at a certain point works and everyone can use this is fine, but for something that evolve through the time and the community probably not. Everything is IMHO of course :)\n. unless?\n. ",
    "sergiopantoja": "Yeah I had tried waiting for at least 5 minutes on one attempt. Sometimes it would get the hw address just fine, other times it wouldn't move past that cap.stream.each at all.\n. ",
    "askl56": "Good practice? Sorry I'll close it if it is of no interest.\n. It's to make it look more like JSON, as far as I know. \nnew_hash = {simon: \"Talek\", lorem: \"Ipsum\"}\n. http://stackoverflow.com/questions/11412242/what-are-the-benefits-of-the-new-hash-syntax-in-ruby-1-9\n. ",
    "dashdanw": "I didn't want to change the regex to ID IPv6 because of the (probably) overwhelming number of test cases it would generate.\n. ",
    "ghost": "Did not :-)\n-    error_policy = lambda { |e|\n-      Logger.error(\"Could not check for udpates: #{e.message}\")\n-      exit\n-    }\nThe control is passed to caller, that's all. This idea came from 'Confident Ruby' actually :-)\n. Oh, okay. I'll make that change :-)\n. Okay, fixed and rebased ;-)\n. All right, so this is more of a question. If you feel it's best to check on github, fair enough, just close the PR ;-)\n. If you actually look at it, it just looks large because of reindentation due to wrapping a BetterCap module to all private classes\n. ",
    "minotaur-0": "I tested\nruby -I lib bin/bettercap -I wlan0 -T 192.168.1.6  -S ARP -D \nruby -I lib bin/bettercap -I wlan0 -T 192.168.1.6  -S NONE -D \nruby -I lib bin/bettercap -I wlan0 -T 192.168.1.6  --no-spoof -D\nI tried to load two at one time \nruby -I lib bin/bettercap -I wlan0 -T 192.168.1.6  -S ARP,DNS -D\nThe following command makes ARP spoofer work\nruby -I lib bin/bettercap -I wlan0 -T 192.168.1.6  -S ARP,NONE -D\n. ",
    "gnlcosta": "Yes. It is. \nThe parses extracts the only thing that isn't encrypted: the App version for example:\niPhone-2.12.13-443\nAndroid-2.12.367\n. Of course.\nFrom an (my) Android phone.\nPCAPs: One from port 443 and the second from port 5222, the two ports used by WA.\nwa.zip\n. ",
    "angelosk": "Yes, with one caveat: pcaprub doesn't cleanly compile because the default bpf.h file in OpenBSD does not have four definitions. I've submitted a pull request to pcaprub, but who knows when that'll take. In the meantime, adding the following to net/bpf.h will make pcaprub compile cleanly:\nif !defined(DLT_IEEE802_11_RADIO_AVS)\ndefine DLT_IEEE802_11_RADIO_AVS 163\nendif\nif !defined(DLT_LINUX_SLL)\ndefine DLT_LINUX_SLL 113\nendif\nif !defined(DLT_PRISM_HEADER)\ndefine DLT_PRISM_HEADER 119\nendif\nif !defined(DLT_AIRONET_HEADER)\ndefine DLT_AIRONET_HEADER 120\nendif\nWith that in place, and with the patch I submitted here, gem install bettercap-1.4.6b.gem installs cleanly on OpenBSD 5.7-snapshot.\nuname -a\nOpenBSD panopticon.home 5.7 GENERIC.MP#767 i386\ngem install bettercap-1.4.6b.gem\n...\nDone installing documentation for pcaprub, packetfu, net-dns, celluloid, celluloid-io, rubydns, bettercap after 394 seconds\n7 gems installed\nIt even starts correctly. Packetfu does not currently have support for OpenBSD, so the whole thing fails to get the IPv4 address correctly. But that's a different pull request, elsewhere :)\nOne correction to the patch: you should change the \"elseif\" to \"elsif\" for consistency.\n. PR?\n. ",
    "esarafianou": "You also used sub!\ngsub! is not needed. We only need to replace  the first occurence of  with our injected script.\nWhy more?\n. ",
    "picatz": "Oh god. My spelling is terrible. I also can totally understand if you don't want this. \nThis is mostly a joke that I'm hoping you're ok with. \nBackup Plans (Butter(c)up Plans)\nOtherwise I can maintain a separate bettercap rainbow fork or something. \nBettercap autocorrects to buttercup for me. I should make my fork called buttercup. . # Making This a Movement\nReferencing this. This is a more pressing issue than I could have ever imagined.\n. \u00af\\_(\u30c4)_/\u00af. I only try to kinda make sense. . \ncoolio. \n. ",
    "dimriou": "It's already uploaded here [ https://www.youtube.com/watch?v=Bzwa53Qr6jc ] :). Sounds good. I'll fix it as soon as I can.. NDP spoofing for the whole subnet doesn't work, but I think it needs more changes since IPv4 and IPv6 \"subnet\" addresses are not the same.\nI checked for single target spoofing with the command I described above and it seems to crash at some point without even getting MAC address from victim. I believe there must be an error somewhere.\nThe first issue needs more work and I don't think I have much free time for that. However I can try to debug the second one if you want as soon as I can.. None that I can think of. But as a workaround, you can use a router that supports both IPv4 and IPv6 ( your home router maybe? ) and make sure that only you and your \"victim\" machine are connected. After that if the victim's browser visits only IPv6 endpoints, I think you can get the results you want (that works for me). :). @evilsocket I managed to isolate the error that occurred with the latest update and fixed it locally/ I also left a comment for that. I'm gonna try some more improvements on IPv6 and make a new PR for everything.. ",
    "bcoles": "Wow that was fast.. Interested in a mDNS spoofer? I may or may not write one.\n. Following up on this, I've reproduced the PacketFu issue without Bettercap, indicating this is in fact an issue with PacketFu. I've created an issue upstream, here: https://github.com/packetfu/packetfu/issues/185. ## Notes\nI have some concerns about the implementation and practicality of this attack, most of which stem from RFC2281 - section 6, MAC Address Considerations :\n```\n   Each HSRP group has an associated well known virtual MAC address.  On\n   token ring networks, these addresses are actually functional\n   addresses.  The three addresses 0xC0 0x00 0x00 0x01 0x00 0x00, 0xC0\n   0x00 0x00 0x02 0x00 0x00, and 0xC0 0x00 0x00 0x04 0x00 0x00\n   correspond to groups 0, 1, and 2 respectively.\nOn other media, the virtual MAC addresses are 0x00 0x00 0x0C 0x07\n   0xAC XX where XX represents the HSRP group number.  Routers which\n   implement HSRP SHOULD use well-known HSRP MAC addresses as the\n   group's virtual MAC address whenever possible.\nThe active router MUST accept and forward traffic that is destined\n   for the group's virtual MAC address.  It MUST stop accepting or\n   forwarding such traffic when the router leaves the Active state.\nIf and only if the router is in the Active state, the router MUST use\n   the group's virtual MAC address as the source MAC address for its\n   Hello messages.  This is necessary in order to allow learning bridges\n   to be able to determine which LAN segment the virtual MAC address\n   currently belongs to.\nFor each group, there is one virtual IP address and one virtual MAC\n   address.  This is a desirable situation, since the ARP table entries\n   in the end stations do not need to change over time as the HSRP\n   active router moves from one router to another.\n[...]\nIn such circumstances, a router MAY use its normal MAC addresses as\n   the virtual MAC address.  This method of operation is strongly\n   discouraged.  In this mode, the virtual IP address will map to a\n   different MAC address over time.  This can create problems for end\n   stations, since ARP tables assume a relatively static mapping between\n   MAC address and IP address.  These ARP tables are normally updated\n   when the end stations receive the gratuitous ARP responses generated\n   by a router that enters the active state.\n```\nVirtual MAC Address\nThe spoofer does not change the interface MAC address nor use a \"well-known HSRP [virtual] MAC\". Instead, the real MAC address of the interface is used as the source MAC address for both HSRP and ARP traffic. This may or may not be a problem, as although the RFC \"strongly discourages\" this behavior, it appears to be somewhat lenient in this regard.\nIt's worth noting that the hsrp utility does not use a virtual MAC address. While the hsrp utility by itself can only be used for denial of service, this indicates that at least providing a valid virtual MAC address is unnecessary for launching a successful coup against the active router.\nForwarding via Gateway\nSection 6 also highlights another potential problem:\nThe active router MUST accept and forward traffic that is destined\n   for the group's virtual MAC address.  It MUST stop accepting or\n   forwarding such traffic when the router leaves the Active state.\nThis is unclear - when a router leaves Active state, must it stop forwarding all traffic on BOTH it's physical and virtual MAC addresses, or only the virtual MAC address?\nIf the router ceases to forward traffic on both interfaces this will be a problem.\nThe spoofer calls update_gateway! during initialisation, which gets the MAC address of the network gateway and stores it in @ctx.gateway.mac. This gateway is used for forwarding intercepted traffic.\nI'm unsure of whether the MAC address will be populated by the virtual MAC address or the physical MAC address of the gateway, by default, in a HSRP environment.\nThis is problematic as after a successful coup, the active router falls back to StandBy mode so we can take it's place as the Active router. As a result, according to the RFC, attempting to forward intercepted traffic through this gateway using the virtual MAC is likely doomed to failure, assuming the router is RFC compliant. This will effectively result in denial of service for packets destined for other networks beyond the gateway.\nAssuming the router stops forwarding on the virtual interface, but continues to forward traffic on the physical interface, one potential workaround would be to ensure the @ctx.gateway.mac is populated with the physical MAC of the gateway.\nThis is complicated by Section 6.3 ICMP Redirect :\nWhile running HSRP, it is important to prevent the host from\n   discovering the primary MAC addresses of the routers in its standby\n   group.  Thus, any protocol that informs a host of a router's primary\n   address should be disabled.  Thus, routers participating in HSRP on\n   an interface MUST NOT send ICMP redirects on that interface.\nThis implies the physical MAC should never be disclosed, but whether that's true in practice seems unlikely.\n. ",
    "yungtravla": "No hate! I guess that makes sense, but I was thinking that unencrypted links were more interesting to find ;) Your idea makes more sense though, I'll submit a new PR. @evilsocket what do you mean with adding a new one?\nI didnt add anything in these PRs, I just changed some colors to increase visibility.. @evilsocket Right I get you now, the protocol is already logged as [destination:protocol].\nI proposed this because I always end up applying these changes to tell http from https really quickly, but I might be the only one ;)\nWhat about the first PR? It's where I changed the color of the ( content-type ) section in logs so it's easier to find.. 1000th commit \ud83c\udf89 . ",
    "olleolleolle": "And, thanks for publishing this tool, it seems nice!. ",
    "holmboe": "Is inconfig perhaps a typo?\n. "
}