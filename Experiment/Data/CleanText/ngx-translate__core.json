{
    "ocombe": "Oh, does it make a file of definitions that will work in a project when you include it ?\nI'll try this tonight but that would be awesome, I didn't liked to publish the generated files either.\nAs for exporting the interface Observable, I'm not sure that's a good idea since there will be an official one in angular 2: https://github.com/angular/angular/blob/b96784756ced8ae5caf8ad9a3a61206372c23baf/modules/angular2/src/core/facade/async.ts#L94 (if @vsavkin doesn't forget to do it :D).\nI just made this one until the official one is available.\n. Ok, I guess it doesn't matter since you only import it if you want & it shouldn't override the official implementation. We'll update the lib when they make it available anyway.\n. So I tried this PR and it doesn't work for me. After installing it, it runs tsc, but in my file typings/tsc.d.ts it links to /// <reference path=\"../node_modules/ng2-translate/index.d.ts\" /> which doesn't exist since you deleted it.\nThen when I try to build my local ts files, I get the following errors:\nsrc\\app\\components\\app.ts(6,32): error TS2307: Cannot find module 'ng2-translate'.\nsrc\\app\\components\\home.ts(5,29): error TS2307: Cannot find module 'ng2-translate'.\nsrc\\app\\components\\params.ts(4,29): error TS2307: Cannot find module 'ng2-translate'.\nsrc\\app\\components\\show.ts(12,29): error TS2307: Cannot find module 'ng2-translate'.\ntypings\\tsd.d.ts(11,1): error TS6053: File 'C:/wamp/www/subNode/node_modules/ng2-translate/index.d.ts' not found.\nAnd the js files are never built, which means that my app tries to load them but cannot and doesn't work.\nAlso the script executes tsc but it's not listed as a dependency, this means that it may not be available.\n. Oh I didn't know npm link, I just installed it using the link to your fork (I think it does the same in the end)\n. So I had tones of error messages about duplicates, I had to remove everything from the tsd.ts file into the ng2-translate file. Then it compiled ok, but I couldn't load my app since it was missing the js files :)\n. I have 1.6.2 too, but on Windows.\nAnyway, Pawel should send me his notes for his talk at Angular Connect next week, I'll see if thee is a good solution for all of this and let you know.\nWorst case, I'll have to wait for his talk next week :)\n. Ahah because this is my computer at home, and I like to play on it as well. Also I can test on IE easily!\nI can link you my app if you wanna try\n. https://github.com/ocombe/subNode/tree/2.0\nbranch 2.0\nYou should be able to start it with gulp dev once npm install is completed\n. Hmm I'm on 4.1.1 & npm 3.3.4\n. It does with release 0.3.0 :)\n. Or not, I installed branch 4.0 to be exact https://github.com/gulpjs/gulp-cli/tree/4.0\n. Well it still tries to load the js files that don't exist\n. I don't think that's the issue here :D\nWith the blog post provided by Brad, we might want to look at the angular repo to see how they include the typescript definitions\n. Nice, so I just need to add the typings parameter into package.json and that should be enough (the rest is already done). I'll try that :)\n. Trying to concurrence @valorkin here ? :D\nI'll check that out tonight if I have the time :)\n. Ok that works ! Just added typescript as a dependency, and changed prepublish to postinstall script in npm package :)\nI still get a warning in the typescript compiler, but it works nonetheless and I get correct auto completion with webstorm.\nKuddos guys, I think that we have a good dev process here.\n. Had to adjust a few things with the new version of angular 2 alpha 42 that integrates typings, it works now (again).\n. Or not.\nThis is driving me nuts :D\n. Yes, I did that. Rob explained to me how prepublish really works, the description on the npm website is just so confusing... :)\n. Ok so I had a hard time trying to figure out what was the problem, and it's just that ng2-play uses an old SystemJS version that has a bug where the defaultExtension doesn't work in subfolders: https://github.com/systemjs/systemjs/issues/805\nAnyway, once I updated this and switched from system-csp-production to system.src (that can load all types of modules, not just systemjs modules), it worked easily: https://github.com/ocombe/ng2-play/tree/ng2-translate-test\n. Good point, thank you, I will change that for the next release!\n. This is fixed in 0.1.5, let me know if that works for you\n. Thanks :)\n. Thanks :)\n. Hello,\nAngular alpha 53 has been released yesterday, I will update the lib tonight or tomorrow (more likely), but feel free to make a pull request if you need it before that.\nAnd thanks for using my lib ! :)\n. This is now available thanks to a PR from @r-park :)\n. Thanks a lot !\n. Hello,\nwhat is your building system: gulp, webpack, ... ?\nDo you use SystemJS ? If so can you give me your config for SystemJS ?\n. Yes I will have to do that eventually, it would help people setup their projects :)\n. That you need to define the default extension for ng2 translate as well: https://github.com/ocombe/ng2-translate#installation\njs\nSystem.config({\n    packages: {\n        \"/ng2-translate\": {\"defaultExtension\": \"js\"}\n    }\n});\n. No other library, just Angular 2 & RxJS (which is required by angular 2 anyway)\n. You can check the 2 examples starters that updated with ng2-translate, maybe that will help you since they both use SystemJS: https://github.com/ocombe/ng2-play/tree/ng2-translate & https://github.com/ocombe/angular2-seed/tree/ng2-translate\n. Ok so that is the problem, you cannot concatenate libraries manually because of the interdependence between modules, you need to use SystemJS builder to do that for you, it will make sure that your references go to the right bundled module.\n. No problem. Are you using beta3? (I haven't tested it yet).\nWhat version of RxJS do you use?\nCan you load RxJS components from within your application?\n. Ok nice!\nIf necessary you can now find a bundle file in the bundles folder.\n. Thanks ! That's why I need to add more tests, probably something that broke during one of the last alphas :)\n. Fixed in 1.2.4, thanks for the report !\n. Yes, it's related to the starter architecture, not ng2-translate.\nIf you want to see my integration of the lib with webpack, check out my starter: https://github.com/ocombe/ng2-webpack\nThe problem in the case of AngularClass/angular2-webpack-starter is that the assets are not copied to your public repository/dev server.\nYou need to add 2 things to your webpack config:\n- the contentBase pointing to your public repository: https://github.com/ocombe/ng2-webpack/blob/master/webpack.config.js#L262\n- the copy webpack plugin for when you're building your files: https://github.com/ocombe/ng2-webpack/blob/master/webpack.config.js#L218\n. Perfect then :-)\n. \\o/\nDon't get too much into ng2-translate, the i18n official library by google for angular 2 looks very promising and they should do it before angular 2 release\n. Well I don't see anything moving on the i18n side, we might have to wait a few months until they release something...\nAs soon as I have more news I'll let you know, but if you need i18n right now you should use ng2-translate because you won't be able to use angular-i18n for at least 2 months (based on the idea that they would start working on it right now, which isn't the case).\nAs I'm learning new things with angular 2 I will keep ng2-translate updated and add a few new features because this lib helps me as well (I use it on my projects).\nAnd if it appears that angular-i18n is too complex for simple use cases, then ng2-translate will not be deprecated and will live as a simpler alternative.\n. Is there a case where the directive would be more useful than the pipe ?\nIf that's the case, I would love a PR for that yes.\n. You could use:\nhtml\n<div [innerHTML]=\"just.another.property | translate\"></div>\nIs it close enough for you ?\n. Closing this for now. Let me know if this wasn't enough for you.\n. There is a PR for a directive already here: https://github.com/ocombe/ng2-translate/pull/31\nWe are waiting for the next RC so that we can use the brand new sanitizer :)\n. It's probably because you need to load the HTTP_PROVIDERS in your bootstrap:\njs\nbootstrap(AppComponent, [\n    HTTP_PROVIDERS,\n    TranslateService\n]);\n. And you use angular 2 beta 1 ?\n. Thanks, could you fix the errors ?\n``` sh\nsrc/translate.service.ts(177,31): error TS7006: Parameter 'keys' implicitly has an 'any' type.\nsrc/translate.service.ts(177,37): error TS7006: Parameter 'interpolateParams' implicitly has an 'any' type.\nsrc/translate.service.ts(181,47): error TS7006: Parameter 'res' implicitly has an 'any' type.\nsrc/translate.service.ts(185,7): error TS7017: Index signature of object type implicitly has an 'any' type.\nsrc/translate.service.ts(194,17): error TS7017: Index signature of object type implicitly has an 'any' type.\nsrc/translate.service.ts(197,20): error TS2304: Cannot find name 'Observable_1'.\n```\n. Almost, you need to change:\njs\npublic getAll = function (keys : Array<string>, interpolateParams?: Object) {\nto\njs\npublic getAll(keys : Array<string>, interpolateParams?: Object) {\nyou can run tsc in your repository to see the typescript errors (or npm run prepublish if you don't have the typescript compiler installed globally).\n. Thanks, the tests work, don't close this I'll check it tonight and merge it then.\nYou could update the README.md to add the new method, or I can do it if you prefer.\n. Ok I changed this a bit, I didn't want to add a new method, so I added the option of the get method to use a single key or an array of keys.\nIt's available in v1.3.0\n. Not yet, but it's just a matter of improving the parser, I'll put it on my todo list :)\n. Both features are available in 1.4.0 !\n. Hmm could you make me a minimal plunkr with the problem please?\n. Thanks a lot for your repository, this bug has been fixed in the latest version (1.3.1), you shouldn't have a problem like this anymore.\nThe main issue with ionic 2 is that you cannot use bootstrap to instantiate HTTP_PROVIDERS, but I used the injector and now it's all right !\n. Hmm as a matter of fact I will revert this change. Using the injector to get HTTP_PROVIDERS is not the right solution.\nThe problems comes from the fact that ng2 translate uses beta 1 and ionic2 is still stuck at beta 0.\nIf you change the package.json version for ng2 translate to 1.2.4 (last version on beta0) then it will work.\nBy using a different version of angular 2, webpack will load 2 different instances of Angular 2, and the one that ng2 translate gets is not the same, which means that the app is not bootstrapped for ng2 translate and the injector is different.\nThe solution for you is to use ng-translate 1.2.4 until ionic 2 moves to angular 2 beta 1.\n. You can use 1.3.1 but I think that you might run into trouble (and loading 2 versions of angular will double your file size!).\nIf you don't need the new features, you can stay on 1.2.4 until then.\nBy the way, there is a Translate service bundled into ionic 2: https://github.com/driftyco/ionic/blob/2.0/ionic/translation/translate.ts\nIt's not documented though.\n. Hmm I know what I could do, I could change the dependency for ng2-translate from \"angular2\": \"~2.0.0-beta.1\" to \"angular2\": \"~2.0.0-beta.0\", this way it would use the beta.0 for you (as defined in your package.json), and beta.1 for others. There was no breaking change in beta.1 for me.\n. Ok you can try version 1.3.2, it should work for you !\n. I changed it to peerDependencies in 1.4.0, it should still work for you :)\n. This looks like a problem of sourcemaps to me.\n. That's what the \"translate\" pipe is for:\n{{ utils.getLocalisedString(\"MONETARY.NO_SENT_TITLE\", { value: mycomponentValue}) }} becomes {{ \"MONETARY.NO_SENT_TITLE\" | translate:{ value: mycomponentValue}) }}.\n. no problem :)\n. Good point, I updated the readme to be more explicit\n. \\o/ this is awesome thanks !\nI'll take a look at it asap.\nAre the changes to package.json necessary?\n. Oh nice a bundler script, I was looking for one!\nI think that typescript 8 will offer the bundle option as well.\n. Ok no prob, just wanted to make sure.\n. Thanks :)\n. Yes, I can code that, but you have to be aware that if your translations haven't been loaded then \"instant\" would return the key (or undefined).\n. Nice thanks!\n. This has been added in 1.8.0 !\n. Hello,\nyou will probably have to add a map to your systemjs config in index.html, like this: https://github.com/ocombe/ng2-play/blob/ng2-translate/index.html#L26\n. Because you include angular as a bundle file in index.html, and not angular2-translate (there is no bundle for the moment).\nAny external lib that you will use without including the script tag in index.html will require a map as well (for example if you decide to include lodash).\n. No problem !\nI would recommend using webpack with Angular 2, it's much better than just systemjs (but more complex, systemjs is better for beginners).\nYou can use my starter for example: https://github.com/ocombe/ng2-webpack\n. You need to use the systemjs builder: https://github.com/systemjs/builder\n. I guess it would be better to use \"set\" yes.\nYou could also name your languages based on the type of access: \"en-a\", \"en-b\" and \"en-c\" and have 3 different json files for each, but I'm not sure that's better.\nYou could write your own loader for that as well and use \"provide\" in bootstrap to provide ng2-translate with your specific static loader, that might work but I haven't test it :)\n. To know the loaded langs you can use getLangs(): Returns an array of currently available langs.\nI'm not sure we want to include all of that in the lib right now. Maybe if there really is other people who request it.\nI'm glad that you managed to do it, I'm closing this then.\n. Yep, that's a good point.\nI don't want to fall into complicated code for this lib because the official i18n lib will come soon and I might deprecate this lib by then (unless their implementation is really too complicated or doesn't fit my needs).\n. That's a good idea! If you can do a PR, go for it :)\n. Closing the issue since this has been merged.\n. Hello,\nbootstrap is the native angular2 function that you have to call to start your application. I will update the readme to add the import for that (it's: import {bootstrap} from 'angular2/platform/browser';).\nAnd then, what do you mean by \"How can you use TranslateService before you import it\" ?\n. Ah yes I see what you mean, I updated the readme which was outdated anyway (wrong imports since beta 1).\nThe doc should be more clear for you now, thanks for noticing that :)\n. You can now use the MissingTranslationHandler to handle these scenarii.\n. That's nice @DanielSchuech, can I use this text for a quick FAQ ?\n. yep, like @DanielSchuech every time you use the property \"providers\" on the component it uses new on the service, you create a new TranslateService() and that's why it isn't configured because each instance is independent.\nIf one of your parent component has already provided an instance for the service, then don't provide a new one and it will use the existing one.\n. Closing this old issue, let me know if I should reopen it.. Yes, the fact is that I need to simplify the configuration of the lib, for the moment you have to call multiple functions and that is not clear/easy.\nI should make it configurable all in one place with parameters that are simple to understand.\n. useStaticFilesLoader is now called by default in the constructor (unless you provide any other TranslateLoader instead), but it will use the default prefix/suffix (which are i18n & .json)\n. Hey thanks, I meant to work on that this week end :-)\nJust a quick question, why do you call tsc 2 times in the npm prepublish script?\ntsc && tsc -d && node make.js\n. tsc does that as well since I defined declaration to true in tsconfig.json: https://github.com/ocombe/ng2-translate/blob/master/tsconfig.json#L9\n. Perfect thanks, I'll test it tonight when I get back home :)\n. This has been merged, and is available in 1.6.1.\nBut when I try to install the lib with the Angular CLI, I get the error:\nsh\nthe `ember generate <entity-name>` command requires an entity name to be specified\nI'm not sure what wrong here :(\n. I just tried and now I have this:\nsh\nng install ng2-translate\nInstalling 3rd party package: ng2-translate...\nRemoving packages which were not recognized as authentic: ng2-translate \nNo package to process. Quitting.\nDone.\n. Maybe the problem is that I export my modules as commonjs and the bundle is systemjs ?\n. I did that already\n. Ok I found it, it fails because of that: https://github.com/angular/angular-cli/blob/b8dfe0c414c4b7eb20397236185f95cac4e7121a/addon/ng2/tasks/lib-install.js#L563\nIt checks that I have a .ts at the root, but I don't push it on npm (because it causes a problem with some IDEs that consider .ts instead of .d.ts files for typings).\n. I publish the .js & .d.ts files, but not the .ts file.\nlib-install should be able to parse the .d.ts file instead if necessary.\n. Ok I just released a new version that doesn't ignore .ts files for npm anymore, and it works now !\nBut, it doesn't import with the correct path:\njs\nimport {TranslateService} from 'ng2-translate';\nshould be \njs\nimport {TranslateService} from 'ng2-translate/ng2-translate';\nAlso it doesn't inject the provider in the bootstrap file even if I say yes...\n. Ok, no problem to add it to the docs, sure :)\n. Hello, thanks for this PR, it's very complete and I like that !\nI'm a bit worried about the fact that it can use the content of the element because of the risks of injection.\nAlso I think that it's not a good idea to use \"nativeElement\" because you cannot use webworkers: https://angular.io/docs/ts/latest/api/core/ElementRef-class.html\n. Well you're using innerHTML, which means that you don't check the content of the element. In angular 1 we had $sce that did that for us.\nLet's say that your element contains the name of your users, one user changes his name to some js or sql code, and then you get the content with innerHTML and you try to use that as a key in the TranslateService & TranslateParser, I have no idea what could happen but it could be a problem somehow.\n. Maybe we could just add a note in the docs saying: \"hey be careful\" and go on with it ?\n. Yeah I think that's a better way to do that. I'll try to merge this tonight\n. Now that I've fixed the OnPush bug with the Pipe, do we still need this directive ?\n. What are the html translations you're talking about ?\n. The official sanitizer is real, we can use this: angular/angular/pull/8453 once it has been merged\n. yes, I don't see why not, this was my only concern\n. You might want to pull the latest changes that I just pushed to make it work with RC2 :)\n. I'd like to see if we can use the i18n directive for this, maybe make a directive that could be provided instead of the existing i18n directive so that users can switch from the current i18n angular implementation to ng2-translate easily, and maybe even use the new ng-xi18n messages extractor\n. I have a question about this, let's say that you have the following html code:\nhtml\n<div translate>\n  Some text\n  <span>some inner text</span>\n</div>\nthen using the innerHTML as a key will receive: \n```\nSome text\n  some inner text\n```\nTwo problems here: the first is that we have the empty lines at the beginning and end which can be removed if you compress your html or use aot, and then it won't work anymore, but you probably won't use that as a key anyway because that'd be insane (so you'll use the translate attribute to specify a key).\nStill, someone who uses:\nhtml\n<div translate>\n  Some text\n</div>\nmight expect the key to be \"Some text\", and that will not be the case.\nAnd the second problem is that angular adds attributes to inner elements, so that means that you can never use inner html elements in your keys because it won't work.\nI won't even start with the innerHTML of elements that use bindings (like *ngIf), it adds comments all over the html...\nThis means that this directive will only work on really simple elements that only contain some text, that's still useful but I would love if it could do more. And to make sure that it works we should trim the content to remove leading/trailing spaces.\nDo you think we could do something like that:\nhtml\n<div translate>\n  Some text\n  <span translate>some inner text</span>\n</div>\nAnd in this case replace only the text at the first level, which would mean that here we have 2 translations: Some text and some inner text ? We replace those and ignore all the inner html?. No problem, I started rewriting it, using some of your work, but transforming it in a directive instead of a component :)\nI've got a working version, I'm gonna beta test it a bit and if I'm ok with it I'll merge it. Let's keep this opened, I'll work from your PR so that you get the credits that you deserve, also this will help me not to forget to merge it :D. Done !\nThanks a lot to all of you and especially @sclausen for this, sorry it took so long !. Hello,\nI was afraid that it might be a problem.\nI did that because it was necessary to make it work with angular cli (/ping @jkuri).\nWhat version of typescript do you use?\nDo you exclude the \"node_modules\" folder in your tsconfig.json ?\n. No, but I will exclude the ts files if necessary, it is angular cli that should work with .d.ts files instead, not the lib that should change for it.\n. Awesome, thanks :)\n. In the mean time I'm curious about your setup @shadow999 because I don't have this problem with my projects, is your code available somewhere for me to investigate why there is a difference ?\nAlso you can use 1.6.3 for now, it's exactly the same version except for the ts files.\n. I'll take a look at it tomorrow, in the mean time can you try version 1.6.3\nplease?\nLe ven. 12 f\u00e9vr. 2016 11:59, Bernard Greenwood notifications@github.com a\n\u00e9crit :\n\nI am using this setup:\nhttps://github.com/AngularClass/angular2-webpack-starter\nWhich uses webpack + tsd.\nI am getting some errors when I try to use ng2-translate. Maybe I am doing\nsomething wrong, so I would appreciate any help [image: :smile:]\nIn my app.ts\nhttps://github.com/AngularClass/angular2-webpack-starter/blob/master/src/app/app.ts\nimport {TranslateService, TranslatePipe} from 'ng2-translate/ng2-translate';\n...\n@Component({\n  selector: 'app',\n  providers: [ ...FORM_PROVIDERS, TranslateService ],\n  directives: [ ...ROUTER_DIRECTIVES, RouterActive ],\n  pipes: [TranslatePipe],\n...\nexport class App {\n  name = 'Foo';\n  constructor(translate: TranslateService) {\n      //translate.setDefaultLang('en');\n      //translate.useStaticFilesLoader('assets/i18n/', '.json');\n  }\n}\nI get the following error in the browser:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/12599965/13004992/43dc0dae-d17f-11e5-997d-5f99de12a45d.png\nWhen I try to configure translationService like this:\nconstructor(translate: TranslateService) {\n      translate.setDefaultLang('en');\n      translate.useStaticFilesLoader('assets/i18n/', '.json');\n  }\nI get these errors:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/12599965/13005068/bf0f1548-d17f-11e5-9c69-127fb7c7157c.png\nMaybe you could have a look at the angular2-webpack-starter and try to\nuse ng2-translate with it?\nI would really appreciate it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/32#issuecomment-183274754\n.\n. I cannot include the *.ts files because it will cause a problem for some build tools.\nI took a look at angular 2 and they inline the sourcemaps (which is the easiest way to do it).\nRxJS seem to have decided to change de source root and to copy source files to a new folder at build time (I don't really like that).\n\nI might switch to inline sourcemaps. Since Angular 2 requires build tools anyway, the size of the lib is not an issue because people can just choose to do whatever they want with the lib after that (the build tools will write new vendor files with or without the sourcemaps, depending on what people choose).\n. I'm not expert enough in Angular 2 to know the right thing to do here. Do you have an article somewhere explaining the different change detection strategies ?\nAnd an example app that uses OnPush ?\n. Thanks, I'll look at them this week end\n. It look like we might need to write a sanitization library for ng2\n. Hey @PascalPrecht any idea on how to make the pipe work with OnPush ?\n. Thanks @PascalPrecht, it turns out that you can inject a ChangeDetectorRef in a pipe (I found out by reading the AsyncPipe source code). It should work now !\n. Thanks, probably a change with beta 6 that wasn't caught by my tests. I'll check this.\n. I cannot reproduce this error, could you make me a plunkr ?\n. Closing this by lack of response, if someone has more info and the same bug, let me know !\n. Hello,\nYou shouldn't use defaultExtension ts since I don't push the ts source files to npm. It should be js.\n. ahah ok, yeah that couldn't end well :)\nnpm only is the default for Angular 2 !\n. Hmm what version of ng2 translate & angular 2 are you using?\n. Can you make me a repo with the problem ? I tried with my webpack starter and it worked without any warning.\nI think that it has to do with sourcemaps.\n. Stupid me, I changed the sourcemaps to inline for forgot to include the source code...\nAnyway, try 1.7.2, it should fix the problem for you :)\n. Yes I'm gonna do that as soon as I'm back from Amsterdam (for ng nl) later\ntoday :-)\n. I now delete the pending observable in the \"onComplete\" handler, this should (hopefully) fix your problem, let me know if that's not the case.\n. Maybe not, I need to do more tests\n. If I don't set this.pending to undefined, since it is an observable based on http, it will request the translation file whenever a translation is needed :(\nLet me find another way to test this.\n. This has been fixed in 1.8.0 ! You shouldn't have a problem with your unit tests anymore :-)\n. The route definitions are in a decorator, and not in the component itself, so I don't think that you can access the provider in the decorator.\nYou could probably create an instance of the TranslateService yourself (without using angular's DI), but then the observable would get in your way. You would have to wait for the new 'instant' translate method that I will add soon.\nAnd even then, I'm not sure if it would work correctly.\n. No idea, maybe tonight or tomorrow.\nYou can test something similar using this: https://github.com/ocombe/ng2-translate/issues/20#issuecomment-187062951\n. > The route definitions are in a decorator, and not in the component itself, so I don't think that you can access the provider in the decorator.\n. Oh nice, I didn't think it was possible that easily :-)\n. Good point. Would you make a PR for that ?\n. This has been added in 1.8.0 !\n. Hello,\nthis has nothing to do with ng2-translate, see: https://github.com/angular/angular/issues/5614\n. Maybe it's a question of version of the libs?\nIf you can make a project with the problem I'll check it out.\n. @qsahmed check the version of ng2-translate that you use :) the last one is 1.11.0\n. You're supposed to use your key, something like that:\njs\n<ion-refresher pullingText=\"{{ 'PULL' | translate }}\">\nAnd then you define the translation in your json file (or you manually) like that: \"PULL\": \"Pull to refresh...\"\nIn this case \"PULL\" is the key, and \"Pull to refresh...\" is your translation.\n. You should either use [title]=\"'HELLO' | translate\" or title=\"{{ 'HELLO' | translate }}\", but [title]=\"{{ 'HELLO' | translate }}\" is not correct Angular. ts\nfetchTranslation(key: string, params = {}) {\n    return this.translate.instant(key, params);\n}\nor you could just use the service:\nhtml\n[title]=\"translate.instant('HELLO')\"\nBut be careful because if you use the change detection OnPush this will not update your view, you should use the pipe or directive for that.. no, it's in the docs: https://github.com/ngx-translate/core#methods. Thanks! Good catch\n. Hmm no reason, it should work with this prefix & suffix :-/\nAre you sure that you're using the same instance of TranslateService ? You need to define it in bootstrap and never define it in the providers property of a component, otherwise it will create a new instance each time.\n. Yes it looks correct.\nI'm gonna try to reproduce it and let you know.\n. Ok good to know !\nI should try to find a way to have a global configuration for all instances, because that's probably a problem that other will have\n. Ah yes, this looks like a corner case that I need to fix, thanks\n. Yes, I think the behavior should be:\nmissing value for this key? --> missing translation handler (which should be able to be sync OR async, I need to improve it) --> still missing ? fallback lang --> still missing ? return the key instead\n. Why is that ?\nIf you don't have a missing translation handler defined it will still just use the fallback language, but if you define a handler it's better to have it first because you might want to do something special before anything else.\n. In the MissingTranslationHandler you can check the keys in any language that you want\n. Closed in 1.9 ! Thanks @ribizli \n. Hmm interesting yes, I'll take a look at this. If you want to do a PR you can :)\n. Well it's nice to have it on github if people need it for plunkr (or something like that).\n. Ahh nice, I didn't know that one.\nWhen I have the time I'll add a plunkr that people can fork for issues, I'll use that, thanks.\n. You can implement an abstract class as well. How is it more flexible with an interface ?\n. Hmm good to know, but can you write an interface that implements the abstract class and then implement this interface ?\n. Yup good points, I'll change that for the next release\n. ah yes good idea, thanks\n. Wow this looks this really nice, thanks a lot !\nI will take a closer look at this asap (but maybe not until this week end).\n. I changed a few things, I renamed NG_TRANSLATE_PROVIDERS to TRANSLATE_PROVIDERS & I kept the methods useLoader & setMissingTranslationHandler because you might want to customize the service for one component only.\n. Hmm how do you do that with DI in just one component?\n. Oh nice, I didn't know that, I have to try :)\nI'll remove the setters in the next version then.\n. You can instantiate a new TranslationService for each component, and use different parameters for the static loader, so yes it is possible. But you will have to setup the service for each component.\n. Hello, thanks for the PR.\nIs there a reason for this change ?\nAlso can you add the type on line 69:\nts\npublic onLangChange = new EventEmitter<LangChangeEvent>();\nto\nts\npublic onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n. Good points ! Thanks !\nI'll merge it with a few other things for the next release.\n. Hello,\nthe methods useStaticFilesLoader & useLoader have been removed, you should configure the loader with provide during bootstrap, or at component level in the providers property.\nHere is how to do it in your case:\nboot.ts:\n``` ts\nimport {provide} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ROUTER_PROVIDERS, LocationStrategy, HashLocationStrategy} from 'angular2/router';\nimport {HTTP_PROVIDERS, Http} from 'angular2/http';\nimport {TranslateService, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {Helper} from './utils/helper';\nimport {BaseHTTP} from './utils/baseHTTP';\nimport {App} from './app';\nbootstrap(App, [\n    ROUTER_PROVIDERS,\n    HTTP_PROVIDERS, \n    provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'src/app/core/languages', '.json'),\n        deps: [Http]\n    }),\n    TranslateService,\n    Helper,\n    BaseHTTP,\n    provide(LocationStrategy, { useClass: HashLocationStrategy })\n]);\n```\napp.ts:\n``` ts\nimport {Component, Injectable, provide} from 'angular2/core';\nimport {RouterOutlet, RouteConfig} from 'angular2/router';\nimport {Http} from 'angular2/http';\nimport {TranslateService, TranslatePipe} from 'ng2-translate/ng2-translate';\n@Injectable()\n@Component({\n    selector: 'main-app',\n    templateUrl: './src/app/app.html',\n    directives: [RouterOutlet],\n    pipes: [TranslatePipe]\n})\nexport class App {\n    constructor(public translate: TranslateService) {\n        this.translationConfig();\n    } \ntranslationConfig() {\n    this.translate.use('en');\n}\n\n}\n```\n. Do you have something like that in your json ?\njson\n{\n  \"footer\": {\n    \"lbl\": {\n      \"title\": \"some value\"\n    }\n  }\n}\n& is your json file loaded (no 404) ?\n. Ok, if you have dots in your keys then it will be interpreted as sub levels in the json. Your file should be like this:\njson\n{\n  \"footer\": {\n    \"lbl\": {\n      \"title\": \"Footer\"\n    }\n  },\n  \"login\": {\n    \"lbl\": {\n      \"email\": \"E-mail\",\n      \"pass\": \"Pass\"\n    },\n    \"btn\": {\n      \"login\": \"Login\"\n    }\n  }\n}\n. Sorry about that, dots in json keys is valid, but the parser doesn't acknowledge that. I'll see if I can fix it for another time.\n. Well there is a changelog here: https://github.com/ocombe/ng2-translate/releases\nBut it doesn't tell people how to upgrade their code, I'll add it.\nFor ionic 2:\n``` ts\nimport {provide} from 'angular2/core';\nimport {TranslateService, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\n@App({\n  templateUrl: '....',\n  config: {},\n  providers: [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'data/locales', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n  ]\n})\n```\nAlso you don't want to bootstrap both TRANSLATE_PROVIDERS and TranslateService because TRANSLATE_PROVIDERS is a preset for all of that: https://github.com/ocombe/ng2-translate/blob/master/ng2-translate.ts#L10-L16\n. I added more info into the release: https://github.com/ocombe/ng2-translate/releases/tag/v1.10.0 :)\n. That would be great :)\n. It depends on your build tool, what do you use ? Webpack ?\n. Well then you should do: ng install ng2-translate and then you might have to fix the bootstrap of your application because I think that the cli doesn't really work for that (check the docs on this part).\n. You're right, I just tested ng install and it doesn't work yet.\nJust so you know, ng cli uses systemjs, if you need to change the systemjs config do to src/index.html.\nIn your case here are the steps:\n- npm install -S ng2-translate\n- open the src/index.html and change the systemjs config to something like that:\nts\nSystem.config({\n        defaultJSExtensions: true,\n        packages: {\n            app: {\n                format: 'register'\n            },\n            map: {\n                'ng2-translate': 'node_modules/ng2-translate',\n                'rxjs': 'node_modules/rxjs'\n            }\n        }\n    });\n- open src/app.ts and add ng2-translate:\n``` ts\nimport {bootstrap} from 'angular2/platform/browser';\nimport {Ng2ProjectApp} from './app/ng2-project';\nimport {ROUTER_PROVIDERS} from 'angular2/router';\nimport {TRANSLATE_PROVIDERS} from 'ng2-translate/ng2-translate';\nbootstrap(Ng2ProjectApp, [\n  ROUTER_PROVIDERS,\n  TRANSLATE_PROVIDERS\n]);\n```\n- and then you can use it, for example in src/app/ng2-project.ts:\n``` ts\nimport {Component} from 'angular2/core';\nimport {RouteConfig, ROUTER_DIRECTIVES} from 'angular2/router';\nimport {TranslateService} from \"ng2-translate/ng2-translate\";\n@Component({\n  selector: 'ng2-project-app',\n  providers: [],\n  templateUrl: 'app/ng2-project.html',\n  directives: [ROUTER_DIRECTIVES],\n  pipes: []\n})\n@RouteConfig([\n])\nexport class Ng2ProjectApp {\n  defaultMeaning: number = 42;\nconstructor(translate: TranslateService) {\n    translate.use('en');\n  }\nmeaningOfLife(meaning?: number) {\n    return The meaning of life is ${meaning || this.defaultMeaning};\n  }\n}\n``\n. Nice, could you just change the commit message from \"feat\" to \"docs\" ? I don't want the merge to trigger a new release for that :P\n. Woops, should have renamed the merged before I did it. I canceled travis to make sure it doesn't release. Commitizen is nice but sometimes it's a pain ;-)\n. Looks good, I'll check it more tonight & merge it\n. Could you update your PR for that case @ribizli ?\n. I agree, mixing keys with dots & nesting doesn't make sense.\n. Merged in https://github.com/ocombe/ng2-translate/commit/7bcd6f5fbd23f4718cc5ca365ae30fda94e22b67 (I don't know why github didn't close the PR)\n. I have no idea, I've never used Meteor. Let's call @Urigo to the rescue and see if he knows :)\n. You just need a system_config.js file ? If that's all then you can make a PR and I'll merge it\n. Ok thanks!\n. yes, you can check the official ionic super starter that uses ng2 translate: https://github.com/driftyco/ionic-starter-super. no sorry, this is an old artefact from the readme, I already removed it on the branch for the next release :). What version of angular / ng2 translate are you using ?. Could you try to remove the import ofHttpModule? I think theIonicModulealready provides it. Hmm no idea then, I'd need a plunkr or a project somewhere to find out the problem. Where did you see an import from'ng2-translate/ng2-translate';` ? We should have cleaned them all from the docs, but if it's still there somewhere, tell me where :). Damn, I'll have to do a PR... They did it with an old version of ng2 translate.\nThanks for letting me know. Are you sure the error is related to ng2-translate? To me it looks more like a problem when upgrading from beta 0 to beta 9.\nAlso check this stackoverflow problem: http://stackoverflow.com/questions/35711569/ng2-translate-translateservice-and-error-cannot-read-property-getoptional-of\n. Ah nice, the bundle file only works if you load it as a script tag in your page.\n. If you want more detailed bug reports you have to load the \"dev\" version of angular 2\n. Not that I know of\n. I've never used the upgradeAdapter, but I think that you should upgrade TranslateService not TRANSLATE_PROVIDERS (which is an array of parameters)\n. Ah you shouldn't use the bundle for that, use the js files from the npm repository (probably src/translate.service.js in your case).\n. Closing this old issue, let me know if I should reopen it.. So I check, the pipes for menu are called (and it's translated), but the pipes for the content are not called until you type in the input.\nThe problem is probably on your side, not on the one of this lib :)\n. Ok, good to know!\n. I'm using it with OnPush at work without any problem, I think I can close this. Let me know if you still have a problem and I'll reopen.. Fixed in https://github.com/ocombe/ng2-translate/releases/tag/v1.10.3. Thanks a lot for the PR.\n. Hello, it looks like an error with the order of your scripts and the version of es6-shim: https://github.com/blacksonic/angular2-es6-starter/issues/1\nYou should update to beta 11 and update the es6-shim as well, and let me know if it works.\n. @guillaumeleone Yes the angular-cli doesn't work with libraries published with typescript definitions (but without typescript sources), @jkuri was supposed to work on that but I have no idea where it stands right now...\n. Closing this old issue, let me know if I should reopen it.. Hello, the api has changed in 1.10, see the release notes: https://github.com/ocombe/ng2-translate/releases/tag/v1.10.0\n. I think the error comes from:\nts\nprovide(AuthHttp, {\n      useFactory: (http) => {\n        let config = new AuthConfig;\n        config.tokenName = 'accessToken';\n        return new AuthHttp(config, http);\n      }\n    }),\nthat should be\nts\nprovide(AuthHttp, {\n      useFactory: (http) => {\n        let config = new AuthConfig;\n        config.tokenName = 'accessToken';\n        return new AuthHttp(config, http);\n      },\n      deps: [Http]\n    }),\n. Hello, thank you for the PR.\nCould you also update the README.md file (required), and add some tests (not required) please?\n. You added the method reset in the readme, but in the code it's resetLang. \nAlso you don't document the method reloadLang.\nOnce that's fixed I'll merge it.\n. Merged in https://github.com/ocombe/ng2-translate/commit/475a1a97\n. Fixed in https://github.com/ocombe/ng2-translate/releases/tag/v1.10.3, Thanks a lot for the PR\n. I'll update the lib tonight or tomorrow. PeerDependencies should be satisfied since ^0.6.4 is technically part of ^0.5.10, but the ways of npm are not the ways of men :D\n. I updated the lib and it should be ok for you now.\n. Hello, you're using the old configuration. It has changed in 1.10.\nFor Ionic 2 here is a complete bootstrap with configuration:\n``` ts\nimport {provide} from 'angular2/core';\nimport {TranslateService, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\n@App({\n  templateUrl: '....',\n  config: {},\n  providers: [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n  ]\n});\n``\n. @beenotung check the super starter from ionic: https://github.com/driftyco/ionic-starter-super\nit includes ng2 translate :). Hello, it's not possible yet, but it shouldn't be too difficult, we just need to add a config param to the parser.\n. Hello, the parser is now injectable and you can create your own custom parser if you need, closing this :). I'm sorry but you will have to be more explicit.\n. Reopen this if you have more details, closing it for now.\n. There is nothing built in, but you can write new loaders, and you can extend the existing file loader for example.\nIf you do anything that store in localstorage, a PR would be nice because that's something that could be interesting to others.\n. Thanks ! :+1: \n. Closing this old issue, let me know if I should reopen it.. What version of node / npm do you use? They fixed the peer dependencies in npm 3 (it was too rigid in npm 2).\nI'm asking for \">= 0.33.3\" which should be ok.\n. Try again with npm 3 then, it should fix your problem :)\n. It should work the exact same way as for angular 2, you include a script tag with the ng2-translate bundle after the script tag for angular 2 and before your systemjs start\n. Do you get a 404 while trying to load the en.json file in your network panel? Or does it work?\n. Well you open your dev tools, and go to the network panel and see if there is a 404 or if it loads en.json fine :)\n. I don't see an import for Http:import {Http} from \"angular2/http\";`\n. Well no idea then, maybe it's the version of angular 2 ?\n. The latest is beta 12 actually :)\nAnd you should upgrade for sure, but I don't know if that would fix this problem.\n. Good to know thanks, I will update the minimal required dependency\n. You can use an array of keys instead of just a string. You will get an\nobject of keys/values as a result.\nLe lun. 28 mars 2016 13:01, OmarHassan25 notifications@github.com a\n\u00e9crit :\n\nHow i can get localized values for a set of string in one step?\nI use this\nthis.translate.get('forgetPassword').subscribe(translatedValue => {\nalert(translatedValue);\n}); to get single value, but i want to get multiple values at once,\nRegards\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/75\n. Thanks !\n. Closing this old issue, let me know if I should reopen it.. No prob :)\n. Do you see it load in your network panel? Can you put a console.log in the result of the data returned by your loader?\n. Oh thanks for finding where the problem is, that will make fixing it easier :)\n. Closing this as it's been resolved, let me know if that's not the case.. Hmm I think that this should work better:\n\nts\n this.translate.get(\"title\").subscribe(res => {\n    this.translatedValue = res;\n    console.log(\"translates : \" + res);\n});\n. Of course it is empty, you are calling the value before the observable returns.\nObservables are asynchronous (like promises).\nIf you want an immediate result you should use the instant method.\n. The instant method will only work if you already have the translations available, which might not be the case if you use an async loader (such as the default loader).\nIf you load the translations async, use async code.\n. Hello, check the version of RxJS that you use, is it beta 2 ?\n. Ok, that's the problem, Angular 2 has a dependency for beta 2, fix the version to that and it should be ok.\n. No problem :)\n. Well I removed the peer dependency to RxJS from ng2-translate (I required angular 2 which require RxJS), so this problem is not on this lib.\n. Thanks, someone reported a problem yesterday but he was using RxJS beta 4 and it worked after he downgraded to beta 2, that's weird that you have this problem on beta 2, I'll check asap.\n. Observable.of is added to Observable by calling import 'rxjs/add/observable/of';.\nI just released a new version that removed most peer dependencies, included the dependency to RxJS. It's still a dependency but since I use the same as Angular 2, I don't need to specify it (I think).\nLet me know if it fixes some of your problems ?\n. Well I don't know what to tell you, but RxJS 5.0.0-beta.2 has rxjs/add/observable/of on npm, just check on npmcdn: https://npmcdn.com/rxjs@5.0.0-beta.2/add/observable/of.js\nAnd I reinstalled it locally after doing npm cache clean just to be sure.\nBut they seem to have forgotten to include it in the root file: https://npmcdn.com/rxjs@5.0.0-beta.2\n. Okay, then can you make a PR to fix it? if it passes the tests I'll merge it :)\n. By the way, I think that just adding this line should make it work for systemjs: https://github.com/ocombe/ng2-play/blob/ng2-translate/index.html#L27\n. Ok, it makes sense then. That's why I like webpack much better, it bundles just what it needs :-)\n. Angular beta 17 now uses RxJS beta 6 ! Does this fixes your problems ?\n. Cool thanks!\n. Hello,\nI'm sorry but I cannot force people to use RxJS beta 4 because the current Angular 2 beta uses RxJS beta 2 :-/\n. Yep, looks like we can close this one :)\n. It's an observable, so you can use it just like any observable.\nI use it in the TranslatePipe if you want to see an implementation: https://github.com/ocombe/ng2-translate/blob/master/src/translate.pipe.ts#L115-L117\n. Hello,\ntranslate.instant is synchronous, if your translations loader is async then you need to wait until the lang files have been loaded to get translations.\nEither use translate.get which return an observable, or observe the onLangChange EventEmitter to know when it's safe to use translate.instant.\n. Does it load your file with translations correctly?\nCan you give me a sample of this file?\nAre you sure the key that you want is lessons_title?\n. Ok, in the providers of your @App, change this:\nts\nproviders : [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService,\n    LessonsData\nTo make sure that LessonsData uses the TranslateService that you just configured.\n. Ok, what about:\njs\nproviders : [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService,\n    provide(LessonsData, {\n      useFactory(translate: TranslateService) => new LessonsData(translate),\n      deps: [TranslateService]\n    })\n]\n. Ok, what if you remove \"LessonsData\" from the providers, and just inject it in your MyApp constructor ?\n. Well then I give up. It's obviously not using the same instance of the translate service, but without the code to debug, it's taking too much time to guess what's wrong, sorry.\n. Ok nice :)\n. It is, but you're outputing the translation as text. If you want html you should do that:\nhtml\n<div class=\"panel-footer\"><small [innerHTML]=\"'contactEMailDescription' | translate:{value:'info'}\"></small></div>\n. Hey, thanks for the report.\nI've noticed that the other day too, gotta fix it but kinda busy until ng conf so this will have to wait 2 weeks until I get back :)\n. Good point, the current code checks the length to determine if it's defined, it should just check if it is defined at all.\n. Yes :)\n. No idea without the code :)\nI'd have to check on my own to see if I have the same problem.\n. Do you use any specific change detection strategy (like OnPush) ?\n. So this is a duplicate of https://github.com/ocombe/ng2-translate/issues/90 (yup you posted it first, but anyway), can you follow up in the other bug please?\n. Damn, yes I can reproduce this, thanks for the report\n. I was able to reproduce the bug yesterday, but today I don't. The only thing that I changed is that I updated to beta 15, can you update as well and try if you still have the problem ?\n. Hello,\nthe bundle file is generated before each commit, editing it won't fix the problem because it will be overwritten next time.\nAre you including the bundle file as a script tag ?\n. I haven't tested the bundle in a while to be honest since I use webpack, let me check that before.\n. Unless you have some time, because I won't be able to take a look at it right now\n. You need to have Firefox & Chrome installed and available in PATH. Do you get an error for the fail ?\n. And you have Angular 2 installed in your node_modules folder ?\n. Well the dev dependencies say: \"rxjs\": \"5.0.0-beta.2\". I just tried a fresh install and I can run npm test with no problem, it installed beta 2 :-/\n. Yes, you would have to write a custom loader for that, it's really easy to do. For example here is my custom loader for server side rendering:\n``` ts\nimport {TranslateLoader} from \"ng2-translate/ng2-translate\";\nimport {Observable} from \"rxjs/Observable\";\nvar fs = require('fs');\nexport class TranslateUniversalLoader implements TranslateLoader {\n    constructor(private prefix: string = 'i18n', private suffix: string = '.json') {}\n/**\n * Gets the translations from the server\n * @param lang\n * @returns {any}\n */\npublic getTranslation(lang: string): Observable<any> {\n    return Observable.create(observer => {\n        observer.next(JSON.parse(fs.readFileSync(`${this.prefix}/${lang}${this.suffix}`, 'utf8')));\n        observer.complete();\n    });\n}\n\n}\n```\nAnd then you change the loader to use in bootstrap: \nts\nbootstrap(App, [\n    ...ROUTER_PROVIDERS,\n    ...HTTP_PROVIDERS,\n    provide(TranslateLoader, {\n      useFactory: () => new TranslateUniversalLoader('assets/i18n', '.json')\n    }),\n    TranslateService\n]);\nIn your case you can reuse all the code from the files loader and just change the part where it parses json for something else. You'll have to transform it so that it returns an object of key/values.\n. I'd rather like it being an external library that people can install when they need it, that's the beauty of modularity.\nAlthough I agree with you that doing it during compilation is nice too.\nOr maybe we could just improve the files loader to be able to understand both json & properties, you could configure it at bootstrap (with default to json).\n. The files loader which is available currently is able to load a new lang without reloading the page.\nAnyway, what is your question?\n. Ok :-)\n. Closing this old issue, let me know if I should reopen it, I think this is resolved in one of the last versions.. Thanks mike ! :)\n. So @ozexpert can you update your PR so that I can merge it ? Just commit the update to the same branch and it should update the PR.\n. Hey! Thanks for the PR!\nLooks like I'll have to update the tests as well. If you have the time to do it, otherwise I'll see if I can make it tonight\n. Thanks a lot !\n. Thanks a lot !\n. yup the last version only works for angular 2 beta 16, I need to update the peer dependencies\n. I just release 2.0 to fix that problem. If you don't use beta 16, stay on v1.11.1\n. Can you try 5.0.0 and let me know if you still have this issue ?. Closing this, let me know if you need it to be reopened.. Yes, v1.11.1 is the last version usable with beta < 16 because of the breaking change in pipes.\nThe \"No provider\" exception means that you don't instantiate the service in bootstrap or one of your parent components, but when I look at the code snippet above it looks fine and should be working :(\n. It's not an issue with the packages, this is an issue with the code but I'm not sure why\n. Hmm [tabTitle]= \"'tab.name' | translate\" should work, I use bindings like this all the time\n. If it shows \"tab.name\" it means that the keys tab.name haven't been found.\n. yes thanks\n. You should definitely generate a bundle of your code when you go into production, don't let it load all the source files separately.\nAs for when you're developing, it shouldn't load all of RxJS, just the few parts required, right ?\n. The cli tools will do bundling for sure, just wait until beta 17 later this week, there should be quite a few updates in this matter :-)\nSystemjs has a bundling tool as well that you can use.\nI like Webpack better, but it's a bit hard to use at first (complicated to start, but really powerful after that)\n. There was a breaking change in angular 2 beta 16 for pipes and I had to update the lib minimal dependency because of that.\nIf you are stuck with beta 15, use v1.11.1 with npm install ng2-translate@1.11.1 --save\n. Closing this as it is a duplicate of https://github.com/ocombe/ng2-translate/issues/119, you can follow the issue there.\n. Oh thanks for the report, I'll look into it next week (this week is ng conf and I'll be busy)\n. This was fixed in one of the lasts releases, let me know if you still have the problem after updating.\n. The karma setup is really complicated right now... you should always take this app as a reference: https://github.com/juliemr/ng2-test-seed\n@juliemr is the lead dev on tests for angular 1 & 2\n. Yup it's on the to-do list once I'm back from ng conf next week\n. Done in v2.1\n. I'm using windows as well and I don't have this problem (tested on different machines), I don't know what it is but I don't think this is related to ng2 translate...\nI'm closing it, reopen it if you think this is really a problem with this lib.\n. Closing this old issue, let me know if I should reopen it.. You cannot inject pipes in translation strings, it's just no possible.\nYou should probably chain the pipes to make it work instead.\n. Thanks a lot, I've merged this PR: https://github.com/ocombe/ng2-translate/pull/117 which was pretty much similar\n. Yes, there's even a PR for that but I need to review it, I'll do it ASAP\nwhen I'm back from ng conf, maybe even on the plane :-)\nLe ven. 6 mai 2016 16:26, fctucker notifications@github.com a \u00e9crit :\n\nis there a plan to update this so it works with the new release candidate?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/116\n. Updated to RC1 in v2.1\n. Thanks a lot !\n. OnLangChange is called for each subscription, maybe you have multiple subscriptions going on? Don't forget that if you subscribe you need to unsubscribe when your component is destroyed otherwise the subscribe keeps firing...\n. Do you still have this issue ? Is there some kind of example plunkr or github/gist repo that I could use to reproduce the bug ?\n. Closing this old issue, let me know if I should reopen it.. TRANSLATE_PROVIDERS is just a preset for a default configuration, but if you use a different path for the static loader, then you need to use the full bootstrap config instead of TRANSLATE_PROVIDERS.\n\nI hope that answer your questions !\n. Good point, looks like a design flow :)\n. Yes, that'd probably be a better idea\n. The lib ng2-translate only supports json file type of traductions for now, it doesn't work with functions and js code, sorry... I don't see that changing any time soon.\n. Since RC0 they use @angular instead of angular2, and that's still the case in RC1. Where did you see them changing it again to angular2?!\nhttps://www.npmjs.com/~angular\n. Okay :)\n. I think you have a problem of encoding on your json file, because I have accents in my translations files and no problems...\n. The license in package.json is \"license\": \"MIT\", since it's a common license, I don't think a license file is necessary ?\n. Ok, I'll add one then :)\n. Thanks :)\n. The methods from lang are not really necessary, I could rewrite the few that I use so that it works for all users. I'll add it to the todo list, thanks for the report.\n. Hello, I can see the appeal, but it's not something that I want to change, it's not necessary and I don't want to make the lib too complicated.\nThis kind of changes will make it harder in the long term to support more interesting features.\nI hope that you understand ! Thanks for the idea though :)\n. The problem is that you need to update ng2-translate, with beta 16 or 17 they changed the parameters for pipes, which means that old version of ng2-translate won't work.\n. This is the same feature requested here: https://github.com/ocombe/ng2-translate/issues/147\nI'll close this one as a duplicate, you can follow in the other issue :)\n. That would be an interesting feature for sure. It's not possible right now, but I'd love a PR with this.\n. This has been implemented, closing the issue\n. Hello, the error message is pretty much self explanatory: you need to instantiate \"TranslateService\" with provide like you did with \"TranslateLoader\"\n. You're providing a translate loader to the translate service, those are not the same things.\nTry with:\nts\nbeforeEachProviders(() => [\n      TestComponentBuilder,\n      ROUTER_PROVIDERS,\n      HTTP_PROVIDERS,\n      provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n        deps: [Http]\n      }),\n      TranslateService,\n      provide(XHRBackend, { useClass: MockBackend }),\n      TestComponent\n    ]);\n. Take a look at the tests of this lib to know how to make your tests work: https://github.com/ocombe/ng2-translate/blob/master/tests/translate.service.spec.ts\nIf you want to test translations with the static translate loader you will have to mock the backend http call\n. I don't think I'm gonna implement XLIFF, but if the angular team decides to document his i18n code and they include something like that, I might use their implementation.\n. Well it means that you have to provide the service @happyvig  :)\n. Closing this old issue, let me know if I should reopen it.. yes, if you're using [ ] to define a property, then don't use {{ }}\n. Yes I need to distribute the loaders separately, I coded a few other loaders that I'd like to add as well (one for server side rendering, and one that stores data in localstorage)\n. yes, but if I externalize the loaders, this will go away\n. That would be a nice feature, it's not really on my todo list but I'd like a PR with this\n. I will do that tonight, in the mean time it works with rc2, it just prints a warning about unmet peer dependencies :)\n. There was a bug when changing the lang that wouldn't update the translations of the translate pipe because the key didn't change. It was catch by the unit tests when I updated to RC2. Let me release a new version and you'll tell me if it fixes your problem.\n. Awesome :)\n. Thanks ! Could you update the readme as well please ?\n. This is something that might be worth adding if the implementation of angular 2 doesn't work for me, but it's not a priority.\nIt would make a nice PR though.\n. Oh yeah thanks, I forgot to update the readme !\n. ionic 2 uses @Component instead of @App now ?\n. That's a good choice that they did here! It was confusing\n. Thanks !\n. Fixed in https://github.com/ocombe/ng2-translate/commit/0bbb8fc85bead2baaa4ec4553777d7c6badfa7c0\n. Yes, the latest version has removed the http dependency. As long as you don't use the current static loader and that you define your own (without http) then you should be ok !\n. Oui je parle fran\u00e7ais.\nLe probl\u00e8me est que dans les versions pr\u00e9c\u00e9dentes $http \u00e9tait une d\u00e9pendance du TranslateService (m\u00eame si il ne servait \u00e0 rien), donc il n'est pas possible d'utiliser une vieille version sans $http... A moins de remplacer $http par une classe inerte dans le bootstrap peut \u00eatre.\nIl faudrait configurer le bootstrap de ton application comme \u00e7a:\nts\nbootstrap(AppComponent, [\n    provide(TranslateLoader, {\n        useFactory: () => new CustomLoader('assets/i18n', '.json')\n    }),\n    provide(TranslateService, {\n        useFactory: (loader: TranslateLoader, http: FakeHttp) => new TranslateService(http, loader),\n        deps: [TranslateLoader, FakeHttp]\n    })\n]);\nEt \u00e0 toi de d\u00e9finir une classe CustomLoader et une classe FakeHttp.\n. Oui c'est tout \u00e0 fait possible.\nTu peux d'ailleurs fournir les traductions manuellement et ignorer totalement le loader (mais bon le d\u00e9couplage des responsabilit\u00e9s c'est mieux)\n. Si tu n'importes pas la classe qui n\u00e9cessite http \u00e7a ne devrait pas poser de probl\u00e8mes.\nQuelles sont les erreurs xhr dont tu parles? Est ce qu'elles mentionnent vraiment $http ?\n. le message indique qu'il essaye de charger \"http://localhost:4200/node_modules/ng2-translate/ng2-translate.js\" mais n'y arrive pas, tu es sur du chemin? je doute que ton dossier node_modules soit en acc\u00e8s direct ?\n. Pas de probl\u00e8me :)\n. Oui. Voici un exemple de loader custom que j'ai fait qui fonctionne server side sans $http:\n``` ts\nimport {TranslateLoader} from \"ng2-translate/ng2-translate\";\nimport {Observable} from \"rxjs/Observable\";\nvar fs = require('fs');\nexport class TranslateUniversalLoader implements TranslateLoader {\n    constructor(private prefix: string = 'i18n', private suffix: string = '.json') {}\n/**\n * Gets the translations from the server\n * @param lang\n * @returns {any}\n */\npublic getTranslation(lang: string): Observable<any> {\n    return Observable.create(observer => {\n        observer.next(JSON.parse(fs.readFileSync(`${this.prefix}/${lang}${this.suffix}`, 'utf8')));\n        observer.complete();\n    });\n}\n\n}\n```\nIl se bootstrap comme \u00e7a:\nts\n{\n    provide: TranslateLoader,\n    useFactory: () => new TranslateUniversalLoader('assets/i18n', '.json')\n}\n. Je sais bien, c'\u00e9tait juste un exemple de custom loader, \u00e0 toi de voir comment tu vas charger tes donn\u00e9es\n. De quoi ?\n. Je ne connais pas tes contraintes ni ton projet, donc je n'en ai aucune id\u00e9e.\nSi tu n'as pas acc\u00e8s \u00e0 $http j'imagine que tu n'as pas xhr non plus, donc \u00e7a exclue de r\u00e9cup\u00e9rer les assets, ce qui veut dire mettre les traductions dans une constante en dur, et les charger directement.\n. oui\n. If you don't provide the translate service at bootstrap, you can have one instance per component, but then the changelang event won't be triggered in all component either... you'd need to make sure it's synchronised.\n. I'm closing it since this is not something that I would implement.\nIf you find a solution don't hesitate to post it here to help other people :)\n. This is usually an error with JSON.stringify, which I don't use anymore, are you using an old version ?\n. Closing this old issue, let me know if I should reopen it.. Yes, you can define your own TranslateLoader for that :-)\n. Just provide an empty class as a TranslateLoader for now :-)\n. Yes I understand what you ask, but it is not possible for the moment.\nI will refactor the loaders when I can find some time, I'll take your request into account then.\n. Wouldn't {{ ('example.translation.key' | translate) || 'Example Text' }} work ?\n. sorry, totally forgot about that, I'll try to check it this week\n. Sorry, my wife gave birth a month ago and I'm just starting to catch up with all my side projects :)\n. Merged in 2.4\n. Good catch, thanks :)\n. You can add it to your PLATFORM_PIPES at bootstrap:\nts\n{provide: PLATFORM_PIPES, useValue: TranslatePipe, multi: true}\nThis way you won't have to add it to the pipes property of your components\n. It does, did you import the TranslateModule ?\nWhere did you import it ? If you import it into a shared module, you need to export the TranslatePipe as well to make sure that it's available in other modules that import your shared module.\n. In RC5 they deprecated PLATFORM_PIPES, you're supposed to use ng modules for that, but I don't know if ionic 2 is already RC5 compatible\n. Closing this old issue because I think that this is fixed now, let me know if I should reopen it.. Closing this old issue, let me know if I should reopen it.\nIf you need help with the setup of ng2 translate for ionic, there's an example in the repo.. What is your systemjs config? Did you update it accordingly for ng2\ntranslate (as explained in the readme)\nLe lun. 11 juil. 2016 14:00, estradamarkie notifications@github.com a\n\u00e9crit :\n\nTried lots of things to try to fix this thing and its either giving me 404\nor annotation of undefined error.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/167#issuecomment-231714614,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAQMoohzdT7iDXo3MIBjfXsTQBo6hlJCks5qUjBVgaJpZM4JJPMy\n.\n. and what is the request that gives you a 404 trying to load? do you have that url ?\n. Hmm I don't know then, I'm not using systemjs anymore, but it looks like a config problem, not a problem with the library.\n. yes probably, if you find the right setup update this issue and I'll update the readme, otherwise it will have to wait until I can check the example repo and update it to the latest RC and version of systemjs\n. I'll add a note about systemjs in the readme. Have you defined the correct base tag in your index file ? <base href=\"/\">. You have to write a custom loader that understands yml files\n. This will be possible once https://github.com/ocombe/ng2-translate/pull/161 has been merged (later today)\n. This is really good work, and a good idea, thanks\n. Merged in 2.4\n. are you using an old npm version? < 3.x\nbecause the peer dependencies ain't handeld well before 3.x\n. it's been at least 6 months since it's been stable :)\n. Yes, just read the docs, you'll have to use the TranslateStaticLoader (which is the loader by default) :)\n. This makes sense, good idea, thanks !\nI changed your code a bit, I just added a new method addLangs, and you can use getLangs to get the list of available langs\n. Merged in 2.4\n. Hello, I am not sure to understand what doesn't work: is this detecting the navigator current language ?\n\nIn which case if you want a true cross browsers detection function, you could use this:\n``` ts\n// get the current UserLang\nif(!userLang) {\n      if(typeof navigator['languages'] !== 'undefined' && navigator['languages'].length > 0) {\n          userLang = navigator['languages'][0].indexOf('-') !== -1 || navigator['languages'].length < 2 ? navigator['languages'][0] : navigator['languages'][1];\n      } else {\n          userLang = navigator['language'] || navigator['browserLanguage'];\n      }\n  userLang = userLang && userLang.length ? userLang.split('-')[0] : ''; // use navigator lang if available\n  userLang = /(fr|en)/gi.test(userLang) ? userLang : 'en'; // change this depending on what you want\n\n}\n```\nI should probably add this to the translate service as a helper.\nIf that's not the problem, then let me know.\n. Hello, for now it isn't possible to change the prefix/suffix of the loader after bootstrap, but you could make a PR to change this :)\n. Hello !\nNo you cannot do that, it only supports variables (like you said), but it doesn't execute code. In Angular 1 there was a parser available that you could use (and that angular-translate used) for transpolations (that's the technical name when you use {{ }}), but there is nothing like that in Angular 2 yet.\nThey are talking about adding this, but for now I had to write my own parser and it's much simpler.\n. no, it isn't available :)\n. Well anything could be an observable, but you'd have to convince me for the necessity of this :)\n. @cortopy you can observe the defaultLangChange event now as well in 5.0.0.. Hello, there is a new method that lets you update the router urls in the router rc1, you could use that to update the urls once the translations have been loaded.\n. I'm not sure, I haven't used it, but I think I saw someone talk about it on an issue on github (on angular/angular)\n. Hey guys, you can try https://github.com/Greentube/localize-router that was just released by @meeroslav :)\n. Hello, sorry the placeholders don't work in ng2-translate, but it would be a nice PR if you have some time to do it :)\n. This is actually a duplicate of https://github.com/ocombe/ng2-translate/issues/147, closing this one, follow the status in the other one.\n. It's easy:\nts\ntranslate.getTranslations('en').subscribe((translations: any) => {\n    console.log(Object.keys(translations));\n});\n. True, it should be set earlier when it is undefined\n. It's simple, in your component's constructor:\nts\nconstructor(viewContainerRef:ViewContainerRef, translate:TranslateService) {\nyou need to define translate as private or public so that you can access it in your other methods.\nts\nconstructor(viewContainerRef:ViewContainerRef, private translate:TranslateService) {\n. If you use XHRBackend then you need to listen to connections and answer with the translations when asked for. You can take a look at the tests for the service: https://github.com/ocombe/ng2-translate/blob/master/tests/translate.service.spec.ts\n. It should show the default yes, if the key exists in the default lang, otherwise it should only show the key.\nBut now that I think about it, I think that it only works if your default lang has been loaded, if you started the app with another lang and it doesn't has the key, and you never loaded the default lang then it probably doesn't work.\n. This should be fixed in 5.0.0, the default lang will be loaded as well (even if it's not the current lang).. Your error is to add providers: [TranslateService, TranslateLoader] to your component. Since you bootstrapped both services, you shouldn't add them as providers of your component, they have already been provided by the bootstrap :)\n. hmm that's really weird...\nIf you update to angular 2 RC5 you can use the new NgModules and import TranslateModule, that should fix the problem for you though\n. yep it's on my todo list, in the mean time you can still make ng2-translate work by using providers in your ng module to provide the lib :)\n. It's simple, previously in RC4 you would define the lib at bootstrap like this:\nts\nbootstrap(AppComponent, [\n    HTTP_PROVIDERS,\n    // not required, but recommended to have 1 unique instance of your service\n    TRANSLATE_PROVIDERS\n]);\nNow in RC5 you must define it in your @NgModule like this:\nts\n@NgModule({\n    declarations: [\n        // global pipes\n        TranslatePipe // optional, just if you want it to be available everywhere\n    ],\n    providers: [\n        TRANSLATE_PROVIDERS\n    ],\n    imports: [\n        BrowserModule,\n        HttpModule\n    ],\n    bootstrap: [App],\n})\nexport class AppModule {\n}\n. Did you change your bootstrap to load your new NgModule like explained here: https://angular.io/docs/ts/latest/cookbook/rc4-to-rc5.html ?\n. It looks fine to me, I don't think the problem comes from ng2 translate, if it was the cause you would get an error about \"No provider\" or \"No FactoryMetadata\"\n. Sorry I haven't had the occasion to do forms in a while, I don't think I can help you on that :)\n. Fixed in v2.3.0 ! You can use the new TranslateModule (cf docs).\n. it's not a problem with the library, there's probably an encoding problem somewhere, either on the server serving the files, or maybe the js code decoding them ?\n. I'm closing this, if you can get a reproducible setup with the error, I'll reopen.\n. yes, I'm working on it, I have the same problem, it should be resolved shortly, it's happening because I upgrade to TS 2.0 and it seem to output the reference to types in my .d.ts generated files (which was not the case before).\nWorking on it, I'll release a new version shortly\n. ok 2.3.1 released, I reverted to typescript 1.8.10 until I can find the source of the issue :)\n. Well it seems that you don't have angular 2 rc5 dependencies installed, which means that this version's peer dependencies are not satisfied.\nI've only updated the minor version because the code in itself still works with rc4, I didn't want to release a new major version just yet as I have some big changes planed and I will release a new major soon.\nDid you get this problem because you use the version number with a ^ at the beginning ?\n. The last version is 2.2.2 :)\nAlso you're probably using npm 2.x, because in 3.x the peer dependencies wouldn't cause an error, just a warning\n. ok :)\n. Did you find the correct ES6 syntax? You could post it here for future reference please ?\n. Are you using angular 2 rc 5 ?\n. Can you show me the code of how you import the TranslateModule, and the content of you package.json file as well please ?\n. If you use RC4 you should use ng2-translate 2.2.2\n. Any of you could give me a plunkr or github repo with this error ?\n. Hello, sorry but beta 21 is not supported by the current version.\nThe last working version for beta 21 was ng2-translate v2.0.0. It has changed a lot since then, but if you need the documentation that was available at that time, you can find it here: https://github.com/ocombe/ng2-translate/blob/38ec3f1a79e3a98652206f037fc837c94d4da954/README.md. Ah yes, it's a feature of typescript 2.0, but I thought that it would transpile to something generic... I'll change that, thanks for the report :)\n. I will release a new version with a fix for this in 5mn, just waiting for travis to finish the build\n. I don't like to make assumptions about how the users want it to work.\nI added a helper to get the browser language in the last version, you can use this at init if you want to get the user lang, but I'd rather let this opt-in.\n. Version 2.2.2\n. You should upgrade npm at the version 3, npm 2 does handle peer dependencies well...\n. Did you install these dependencies ? @angular/common, @angular/compiler, @angular/core & @angular/http ?\nAlso I reduced the dependencies in 2.3\n. The current version only works with angular 2 RC5, that's why it doesn't work for you !\nThe last working version with RC3 should be 2.2.2 or 2.2.1\n. With npm install ng2-translate@2.2.2\n. I just added an example folder with an ionic 2 example, hope this helps !\n. Good call thanks !\n. so you needed to set a provider for HTTP_PROVIDERS ?\n. Ok, this is unfortunate, it's probably because of the TranslateStaticLoader.\nI will remove this loader soon, and put it into its own external lib, so that people can easily import the loader that they want, this should fix this problem at the same time, hopefully\n. Closing this old issue, let me know if I should reopen it.. The method setTranslation has a 3rd parameter \"shouldMerge: boolean\" that you can use if you want to append translations instead of replacing them. You will have to use your own loader for that probably, but it's possible :)\n. Is the loader somewhere public, so that I can add a link to it ?. I'll add this with the new modular system for the next major version, the lib will use scoped modules and you will have multiple loaders to choose from in order to compose your perfect translate library :). Yes that's correct, the beta 1 of the new version (6.0.0-beta.1) is already available. Hey, yes super busy with my new work in the core team (I expected to have more free time once I was freelance, but I'm actually working more).\nTo use a partial loader, someone will have to write one, it should be easy to do but I don't have much time to work on this :-/\nIf someone wants to start working on it, I could help. There is already a synchronous api, you can use translate.instant('key') to retrieve a translation in a synchronous way\n. Yes it's possible, if you want to access to\"ORDERS\" for example, you will use _main.ORDERS as the key:\nhtml\n{{ \"_main.ORDERS\" | translate }}\n. Thanks :)\n. Thanks for providing the answer :)\n. Hello, thanks for letting me know about this!\n. No, but if you can make one that'd be cool !\n. I just added an example folder with an ionic 2 example, hope this helps !\n. @albanx like I answered on stackoverflow:\nIt's not because the pipe is \"impure\" that is has bad performance. The official async pipe is impure as well, and the TranslatePipe is based on it (the original code is almost the same). It has to be impure in order to resolve promises and observables when the lang changes or when it gets remote translations. When that is not necessary it returns immediately and the impact is minimal.\n. Yes they are called but it only does two === tests for each, which is very fast. That's why I said minimal.\nYou can test with an async pipe and it does about the same thing.\nYes, with the lang as a parameter it updates the pipe when the lang changes, but it complicates the templates a lot because you will have to add it everywhere.\n. You should use the OnPush change detection strategy then\n. Ionic 2 is still on angular 2 RC4, and ng2-translate requires RC5 (with the new ng modules).\nYou should fix the version of ng2-translate to 2.2.2 until you can upgrade angular\n. I'll add a note to the readme tomorrow :)\n. I just added an example folder with an ionic 2 example, hope this helps !\n. While this is usually true, all browser behave differently.\nI had to add this check for some version of IE or safari (not sure which one) :)\n. Could you try that:\n``` ts\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {TranslateModule,TranslateLoader,TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport { AppComponent }  from './app.component';\nimport { routing,appRoutingProviders } from './app.routing';\nimport { HomeComponent }    from './home/home.component';\nimport {Http} from '@angular/http';\n@NgModule({\n  imports: [ \n    BrowserModule,\n    TranslateModule.forRoot(),\n    routing  \n  ],\n  declarations: [ \n    AppComponent,\n    HomeComponent\n  ],\n  providers: [\n    appRoutingProviders,\n    { \n          provide: TranslateLoader,\n          useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n          deps: [Http]\n    }\n  ],\n  bootstrap:    [ AppComponent ]\n})\nexport class MyappModule { }`\n```\nBecause what you did was replacing the provided TranslateLoader with an empty one :)\n. To load Http you need to import the new HttpModule instead, you don't need to provider Http anymore\n. You're right, I'll add a note.\nI also have the goal to remove the http dependency soon by exporting the loader to another npm package\n. yes sorry, I will probably merge it, but I need to get my hands on a mac to test safari :)\n. Merged, thanks, and sorry for taking so long\n. I think the simplest way to fix that would be to define translations as static, so that any translate service would have access to them. The problem is that it would prevent some use cases with specific translations just for one view, but is it really necessary now that you can merge translations instead of replacing all of them ?\nWhat do you think ?\n. True :)\nI'll update the docs then\n. That's true, but you can write your own loader based on the current loader, it's hard to satisfy everyone :)\nI'm closing this for now, if you really need this in the core, then submit a PR with the change, thanks !. Hello, as explained in the FAQ, the last compatible version with RC4 is 2.2.2\n. I have never used the InMemoryBackendService, maybe @wardbell could help on this ?\n. Yes because the TranslateStaticLoader uses $http to load translations.\nYou could mock it, but it would not really fix the problem\n. I think that you have to provide the mockbackend instead of http, you can do that in the config of the module. Ok nice !\nCan you post the solution here for other people who have the same problem ?. Cool thanks :). You can already do that with innerHTML:\nhtml\n<div [innerHTML]=\"{{ 'SOME_KEY' | translate }}\"></div>\nwith:\njson\n{\n  \"SOME_KEY\": \"This is <b>bold</b>\"\n}\n. Good point, I'll have to fix that :)\n. sure, that would help, thanks\n. I'm sorry but you don't give enough details.\nWhat nested templates ?\n. What's in child template ?\n. So {{ 'MANAGE-BROKER.CoWorkerName' | translate }} isn't working but {{'Title' | translate}} is ?\nAny chance you could make me a plunkr?\n. Hello, thanks for the report !\nI haven't had the chance to use the AoT compiler because it was not working on windows... it does now with rc6 so I will try and fix this\n. @SamVerschueren can you try your minimal example with forRoot returning a ModuleWithProviders ?\n. Wow thanks for the hard work @SamVerschueren \nHaving to compile all external libs to make them compatible with AoT seems like a really bad design in my opinion, there's no way every lib author knows that he has to do that, and it means that if you want to do AoT you cannot use an external lib that isn't AoT compatible...\nI think it's time to call the A-Team to get a real idea of what's going on: @robwormald @vicb @mhevery @alexeagle @vsavkin any idea on this? How can we make an external lib work with the AoT compiler? Are we on the wrong path here, or should the lib really be pre compiled before distribution?\n. Ok I've got the confirmation from @brandonroberts that if we want the library to be AoT compatible, it should be pre compiled and the metadata files published on npm, I'll work on that and try to make a working release\nHere is an example of a lib with AoT: https://github.com/brandonroberts/aot-library/tree/aot\nAnd the app using the lib: https://github.com/brandonroberts/aot-app/tree/aot\n. Nice, thanks :)\nI already told the docs team to add a note about this in the upcoming AoT guide (the design doc can be found here: https://docs.google.com/document/d/1MwdXSnqBwuresNDcdUklSK7ILSUJtlkIIy_jRURKPVA/edit#heading=h.o0y7rkw1hvru)\n. Not yet, I was too busy with angular connect :(\nI'll do it this week end !\n. yes, I'm on it right now, struggling with the changes to the test API which breaks my tests (the code of the lib is already updated), expect a release soon\n. yeah they really fucked things up :(\ngot a few friends helping me and we cannot get the setup working :D\n. In case you missed it, I've updated the lib to rc6\n. On plunkr we map directly npm to https://unpkg.com/, that's why we use the binding npm:ng2-translate.\nOn your own app you should just use ng2-translate\n. did you import from ng2-translate and not ng2-translate/ng2-translate ?\n. it doesn't work because there is no ng2-translate file in the bundles directory which is where is searches now, I think\n. There are typings in the bundles folder because I forgot to disable typings generation when generating the bundle :D\nWhen you import from ng2-translate/ng2-translate it takes the ng2-translate.js file at the root, which was generated when running ngc, it means that it is not UMD but ES2015 module, and I think that's a problem for systemjs, maybe we should just switch it back to commonjs instead to be sure that it works everywhere (and keep the bundle as umd) ?\n. We should probably add all of this to the readme\n. We can use the wiki here, and link to it from the readme. I gave you collaborators rights on the repo.\nFor webpack it's easier, it just works out of the box, it's systemjs that's complicated because the config is used browser side where it cannot look for modules in node_modules all by itself so you have to define everything manually\n. well yeah it doesn't exist, you're trying to load http://localhost:9876/base/node_modules/ng2-translate.js instead of http://localhost:9876/base/node_modules/ng2-translate/ng2-translate.js or http://localhost:9876/base/node_modules/ng2-translate/bundles/index.js\n. Hello,\nany chance you could make me a plunkr ?\nDo you use systemjs or webpack ? Do you import the bundle or the js files ?\n. @Cuel you should update to 2.4.3, I removed those imports already\n. The missing translations handler needs more love, I would love a pull request improving it because I don't have much time to work on this\n. if you do that, then you'll have to provide it to the TranslateService in the component as well. The way dependency injection works in Angular is that it asks for a dependency in the constructor, but once it's initialized you cannot get a new dependency. Even if you use the injector, you'd have to get this specific component injector in order to get this dependency.\nSo this is not something that I can do in the lib, it's up to you to provide a new instance of the service if you need it, but I personnally don't think that it's a good idea because the translations/lang state won't be shared with the rest of the application and it becomes a mess to handle.. Sorry guys, there's no way to create html content with angular components like this based on a string. Angular was written in a way that you could abstract all the dynamic logic from the templates because the idea is that everyone should use precompilation (AoT) and remove the compiler from the code.\nThis means that there is no \"compile\" function like there was in Angular 1... You can still create components by importing them and appending them to the dom, but it's something that you'll have to do on your own, it would be way too difficult to make a generic version for ng2 translate :(. Hello, you're right, we should cancel the current observable when we call change lang again. I don't understand how it can still call facade on 2.4.3 because there is absolutely no reference to this in any source file now (you can search via github).\nAre you sure that you correctly npm installed it ?\n. No problem, glad you could fix this !\n. it will be difficult with the pipe, but you can do it programmatically with the service in your component\n. You can do something like:\nts\ncodesService.countries$.subscribe(country => {\n     let codes = translate.instant('CODES.COUNTRIES');\n     this.country = codes[country];\n});\nI'm using instant here, but you can use get as well if you're not sure that the translations have been loaded\n. Weeeell, I don't know, I've never used the bundle :D\nI'm using webpack so I never had to use it, if systemjs works without it now I might as well remove it\n. Ah thanks, that's a weird solution, I'll take a look asap to know if it works\n. Yes sorry about that, I'll merge this as I don't see how it can do any harm anyway :)\nThanks for the PR @frederikschubert \n. You can try version 2.4.4 :-)\n. Wow it looks nice, you even added the tests ! Thanks, I'll try to take a look at it soon (but really busy until next week)\n. Sorry, I didn't forget you, I just haven't had much time, I'll check this tomorrow. Could you fix the conflicts in the mean time ?\n. You're right, empty string shouldn't be an error ! Sorry about that, I think it's a regression\n. Did you define import the TranslateModule in your root app module ?\n. if you import it in the shared module, you should add it to the exports of the shared module as well\n. oh you're calling the service from within the module class, and you're calling \"use\" again there, you shouldn't have to do that\n. You should define all of that in the app root component: https://github.com/doxiaodong/darlin-angular2/blob/develop/src/app/app.component.ts\nAnd that's all, not in any of the other sub modules\n. Ok I just checked the problem, this is what I did:\n- import TranslateModule into my SharedModule\n- prepare the translation in my SharedModule:\n``` ts\n@NgModule({\n    imports: [\n        ...MODULES,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateLocalStorageLoader(http, 'assets/i18n', '.json?t=' + (new Date().getTime())),\n            deps: [Http]\n        })\n    ],\n    declarations: [\n        ...COMPONENTS,\n        ...DIRECTIVES,\n        ...PIPES\n    ],\n    providers: [\n        ...PROVIDED_SERVICES\n    ],\n    exports: [\n        ...COMPONENTS,\n        ...DIRECTIVES,\n        ...PIPES,\n    // modules\n    ...MODULES,\n    TranslateModule\n]\n\n})\nexport class SharedModule {\n    constructor(translate: TranslateService) {\n        // get the current UserLang\n        userLang = translate.getBrowserLang();\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\n    translate.use(userLang);\n}\n\n}\n```\nAnd voil\u00e0 ! It works in all my lazy loaded modules, as long as they import the SharedModule\n. ok, I still have a trick in my sleeve if I cannot find a way to fix this, I can make the translations and currentLang static so that you can have multiple instances but they keep the same \"state\", but it means that it won't be possible to have different instances of the service in different states (I don't think it's a good idea, but there may be some use cases).\nI will try to fix it this week end, but I don't know if I'll have the time (because I need to prepare myself for angular connect next week).\n. Ok, static instances it is then, thanks for the info\n. Yes :)\nIf someone wants to update the docs to explain this better that'd be nice\n. Hello, this is an interesting feature, but this requires some big changes in the code :)\nI keep it here, but don't expect this to be added soon unless someone else wants to do a PR\n. This problem happens when your binding change after the lifecycle hook \"AfterViewInit\".\nCan you get the locale without an xhr request ? For example the server could set a cookie when you ask for index.html, and you read this cookie before bootstrap, which mean that you can set the language immediately. This would fix your problem\n. Closing this old issue, let me know if I should reopen it.. @agustincassanioe sorry for not answering to this message earlier.\nThe problem is that karma serves all files from the folder \"/base\", so you probably have to change this:\nts\nuseFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\nto this\nuseFactory: (http: Http) => new TranslateStaticLoader(http, 'base/assets/i18n', '.json'),\n@vikram-kerkar your problem is probably that you don't have to provide the translate service, try to remove this line: providers: [TranslateService ]. The TranslateModule.forRoot method already provides the TranslateService provider. Closing this for now, let me know if it's not working, I'll reopen.. hey, yes it's broken with lazy loading, there's already a bug here: https://github.com/ocombe/ng2-translate/issues/232 that's why I'll close this one, but it's on the \"to fix\" list :)\n. You're trying to load the definition file (that ends with .d.ts).\nThis is just the typings, not the actual code, and it will never work, you're supposed to load the .js file, and typescript will read the type definitions from the .d.ts.\nWhen you import from ng2-translate/ng2-translate, typescript will read the imports all by itself, you should never import from another path than that.\n. Ah this has nothing to do with that :)\nIt's a problem with the module that imports it.\nWhat's your module definition ?\n. We can keep it here, what is in SharedModule ?\n. Wait, are you importing the TranslateModule anywhere in your application ?!\n. Oui, pipes et directives a \u00e9t\u00e9 enlev\u00e9 des meta data des components, il faut utiliser les modules maintenant.\nBref, pour \u00eatre s\u00fbr que \u00e7a marche bien, importe le translate module uniquement dans ton shared module, et exporte le.\n```\nimport {NgModule} from \"@angular/core\";\nimport {HttpModule} from \"@angular/http\";\nimport {CommonModule} from \"@angular/common\";\nimport {TranslateModule} from \"ng2-translate/ng2-translate\";\n/* MyCommon Module: Re-exports BrowserModule and HttpModule /\n@NgModule({\n  imports: [TranslateModule.forRoot()],\n  exports: [CommonModule, HttpModule, TranslateModule],\n})\nexport class SharedModule { }\n``\n. wow, if that is true then it's a bug in Angular, not ng2-translate :)\n. Ok I confirm the bug... could you submit this on angular/angular ? Because this is definitively not something that I can fix here\n. yes, you can usesetTranslation`:\nts\ntranslate.setTranslation('en', {\n    \"HELLO\": \"hello {{value}}\"\n});\n. @hvrz39 if you unit test, you should use MockBackend and MockResponse to emulate the server for http requests: https://github.com/ngx-translate/http-loader/blob/master/tests/http-loader.spec.ts\nIf for some reason you really need the original file, then you should check the url, karma changes the url of the files that it serves, so it wouldn't be /assets/... but probably something like /base/assets/.... I'm closing it as it is a duplicate of https://github.com/ocombe/ng2-translate/issues/218\nthe problem is that the lib is not compatible with AoT yet. I've talked with the angular team a bit these past days (at angular connect and on slack), and if you want a lib to be compatible with AoT you have to precompile it before shipping it on npm.\nI'll do that and then it should work for you\n. I'm closing it as it is a duplicate of https://github.com/ocombe/ng2-translate/issues/218\nthe problem is that the lib is not compatible with AoT yet. I've talked with the angular team a bit these past days (at angular connect and on slack), and if you want a lib to be compatible with AoT you have to precompile it before shipping it on npm.\nI'll do that and then it should work for you\n. Yes, it's definitely on my todo list :)\n. I suppose it should work just like the regular documentation for non ionic apps, just import the module and call forRoot() (with or without parameters, depending on what you need, check for the readme for that)\n. if you're using html5 urls, then you shouldn't use the path './assets/i18n' but '/assets/i18n'\n. yes, it's a good idea and easy to do\n. That'd be nice !\n. Why do you want to change anything ? The peer dependencies are correct:\n\"peerDependencies\": {\n    \"@angular/core\": \"~2.0.0\",\n    \"@angular/http\": \"~2.0.0\"\n}\n. Thanks, I need to update the docs\n. Done: next time you can check out the plunkr which I'll keep updated\n. When I originally created the lib, angular was imported from angular/angular and I mimicked that.\nI should change it so that you can import from index.ts, but it would be a breaking change... I should have done it as the same time as the 3.0.0 release...\nMaybe I can support both for some time by cloning the current ng2-translate.ts into index.ts, I'll put it on my todo list\n. that too :P\n. That'd be great !\n. This makes sense :) I'll merge it at the next release cycle\n. Thanks !\n. Hello, any version above 2.5.0 is compatible with angular 2.0.0 https://github.com/ocombe/ng2-translate/releases/tag/v2.5.0\nThe error says that you're using 2.12.1, you should update the lib\n. What repository are you cloning ?\nedit: my bad the webpack one, I'll check\n. yes I need to update the examples with the new umd format\n. This has been updated, closing it now.. Closing this old issue as @karlhaas provided the solution. Let me know if I should reopen it.. Thanks !\n. thanks :)\n. Yeah npm link doesn't really work with typescript libs :(\nIf you try it before your update, it should still fail right ?\n. Can you try with\nts\nresolve: { \n     modules: [ path.join(__dirname, \"node_modules\") ] \n}\nin your webpack config, apparently it fixes the npm link issue\n. Ok \"good\", then it's not a problem with your changes\n. yeah I think the webpack example is outdated with the last changes from rob\n. yes, also the bundle should probably be git ignored (but not npm ignored), is there any point having it on github ?\n. I was thinking about it and I'm not sure how it would behave with the typings that reference ng2-translate and not ng2-translate.umd\n. This has been fixed, closing the issue.. thanks :)\n. Hello,\nthe current static loader supports any route, you can change the prefix/suffix to point to your backend, but it only works with GET and fixed routes.\nIf you need something more elaborate, you should consider writing your own loader, it's really easy to do (there's a small example in the doc) and you'll be able to do anything you want.\n. This is why I designed the possibility to write custom loaders.\nIt is not possible to take into account all use cases since angular 2 works on so many different environments.\nSo the solution is simple: write your own loader that loads the files as you wish :-)\n. You should just use 'ng2-translate': 'ng2-translate'\n. Or if you really need the full path, you can use 'ng2-translate': 'ng2-translate/bundles/index.js'\n. If you get a traceur error, it's that it tries to load typescript files instead of compiled js files (and since you didn't install traceur it doesn't work).\nI wonder if it's because of the type definition files in the bundles folder ? Maybe systemjs tries to load them at the same time ?\n. @dawud-do please check the other issues, multiple solutions to these problems have been given.\n. It's possible to do it using the shouldMerge option of the setTranslation method, but it's a bit complicated because you'll have to use the MissingTranslationHandler as well to bypass the loader when translations are missing.\nI'll keep this opened as a feature request.\n. Can you change \nimport 'ng2-translate';\nto\nimport 'ng2-translate/ng2-translate';\nand \nimport { TranslateModule } from 'ng2-translate' \nto\nimport { TranslateModule } from 'ng2-translate/ng2-translate' and see if it works?\n. I've been playing around with the different build systems, trying to fix those bugs.\nI think I'm gonna revert the build to commonjs as it was before, and build an additionnal umd package for people who are looking for smaller packages (tree shaking ftw).\n. Ahh perfect @aitboudad I almost had the good setup, all I was missing was libraryTarget: 'umd' in the output config !\nBy the way with your setup you embed all the code of the external rxjs libs instead of just referencing it, my external config is much simpler: externals: [/^\\@angular\\//, /^rxjs\\//] with this the bundle goes from 109ko (with your config) to 35ko (with mine) !\nI'll publish a new version soon, I tested with the angular 2 seed and it works perfectly\n. ok the new build (using webpack instead of systemjs) should be working for you guys, I'm just waiting on travis to pickup the build so that it releases a new version, but it's a bit delayed because of github connections issues today :)\n. Ok version 3.1.3 has been released, let me know if that's ok now\n. Change all 'ng2-translate/ng2-translate' to 'ng2-translate'\n. I ship the source maps within the bundle, it should give you a better sense of where the error comes from if you setup your project to use source maps. Closing this, let me know if you need it to be reopened.. Thanks, it's merged, sorry for taking so long to review this ><\n. Hu, that's weird, I think it's more a bug than a feature.\nA PR would be nice indeed :)\n. The release cycle is automatic, when a PR is merged and the tests pass it is automatically released, you can try it with version 3.1.1\nAbout the directive it will be merged, but I need to find some free time to work on it first, so no ETA yet\n. Thanks ! :)\n. That's a good idea.\nWith webpack 2 it's easy, just add \"lib\": [\"es5\", \"dom\"] to your tsconfig.json file (in compilerOptions)\n. Sorry, I wish I could go but I have other (family) obligations :)\n. Hmm good point, I think this is a problem with the new feature from @SamVerschueren and my new build system. The new exported bundle is now index.js, but the ngc is built based on ng2-translate.ts\n@SamVerschueren any idea ?\n. I think that this should be fixed in 6.0.0 but I'll have to check. It depends what starts the loading of the translations, if it's a pipe then you won't be able to catch that error...\nIf it's use then it returns an observable and you can use catch on it. Same thing for get.. it's a shared observable, internally there's a subscribe to make the request, but if you subscribe as well you should get the returned value.\nMaybe it's because of the share operator that the exceptions aren't propagated? I need to make some tests. Wow that's a very nice PR thanks !\nI feel like we should just call it plural or pluralize, I had to search on google to find what \"declension\" means :)\n. Hello, the file index.js in the bundles directory (the only js file in it) is in umd format: https://unpkg.com/ng2-translate@3.1.3/bundles/index.js\nIt is referenced by the \"main\" property of the package.json file, so linking to ng2-translate will point directly to it\n. ah good point, I have to update the webpack setup then\n. Hello, and thank you for the PR, but I've updated the example with the latest release and it doesn't need to use babel to work, so that's better I think.\n. Change your loader code to { test: /\\.ts$/, include: /ng2-translate/, loader: 'awesome-typescript-loader' },, it will load the d.ts files and the js files as if it was typescript\n. @kristian-b do you still have an error too, or can I close this ?\n. The bundle is now \"index.js\" instead of \"ng2-translate.js\" in the bundles folder\nBut I might change it back to \"ng2-translate.js\" because it seems to generate a few problems with aot\n. Could you update the readme @SamVerschueren ? We need to add a section for AoT describing all of our recent findings, and the same for systemjs\n. Awesome, no pressure, it's not a paid job :D\n. yes please :)\n. Thanks, could you also update the readme to add the description of this new method ?\n. Perfect thanks\n. Thanks !\n. Perfect thanks\n. Could you update it to 4.0.0? the new main file is bundles/ng2-translate.umd.js (the index.js still exists for compatibility)\n. thanks !\n. Damn you're right, sorry about that, I'll release a new major.\nDo you know how to cancel a version on npm?\n. Yes, I deprecated 3.2.0, and released a revert as 3.2.1, it should be ok for you now.\nI'll add a few breaking changes and release 4.0.0 today.\nThanks for warning me about that.\n. I think that when you generate the lib in umd, those root['...'] should be replaced by ng.something, for example in angular/angular: https://github.com/angular/angular/blob/cf269d9ff43b913dbac4ba0ed6932c708ae58512/modules/%40angular/platform-browser-dynamic/rollup.config.js and in ng bootstrap: https://github.com/ng-bootstrap/ng-bootstrap/blob/0dcd02f859bca7219f7b89d9b8af44b0b96950a5/gulpfile.js#L55-L87\n. The same with a webpack config: https://github.com/aitboudad/ng2-formly/blob/8399e9ecb11561f00f343eacec27bd77c8fe92a0/.config/webpack.build.js#L15-L20\nI'll try this and see how it goes, but from my previous experience the problem is that it doubles the bundle size :(\n. Could you change your externals config in webpack with externals: [/^\\@angular\\//, /^rxjs\\//, /^ng2-translate/], ?\n. Closing this old issue, let me know if I should reopen it.. we should ask @amcdnl, he's the only one I know using an hydrib app in production\n. Hello,\nyou didn't link the right plunkr, because it's working on this one (and I think it's the default one).\nAlso I can almost immediately tell you that the problem is that you import from ng2-translate/ng2-translate instead of just ng2-translate\n. there's a WEBPACK FOOTER in his log, I would suspect it's webpack :P\n. Just to know, where did you read the 'ng2-translate/ng2-translate'? did we forget it somewhere in the docs ?\n. I have no idea, old versions of typescript maybe ?\n. Yes, it's updated now !\n. No, it only returns the list of loaded langs (either by using .use, or added via addLangs(langs: Array<string>).\nYour application runs in a browser, it has no idea what is available on the server, and there is no way to know that.\nIf you setup your project, you could pass this list of langs during the build using webpack or something else, but this is on your side, not something I could do in the lib, sorry.\n. There's a good reason for adding the share, otherwise it will request multiple times the json file from the server (or anything else that a custom loader can do) if you have multiple translations on your page. Imagine a page with 10 translated words, then it would make 10 http requests.\nI'll take a look at the problem but removing share is not an option.\n. Thanks a lot for taking the time to find another solution and submitting a PR, I've merged it!\n. Try this: <child-component [label]=\"'start_date' | translate\"></child-component>\n. it makes sense, but this.translate.use('en'); should always be called before any get, the best place is in your module that imports the TranslateModule (modules have constructors in which you can define some logic that is executed before the components).\nIf you don't know which lang to use and you end up calling get without any lang defined, then the scenario is logical. You might want to use the MissingTranslationHandler in this case (where you could for example subscribe to the OnLangChange event): https://github.com/ocombe/ng2-translate#how-to-handle-missing-translations\n. Closing this issue, continuing in https://github.com/ocombe/ng2-translate/issues/330. Awesome thanks, I wanted to do that but I forgot :)\n. This is nice and a good idea!\nI'm gonna fix the conflicts (probably because of the new directive), and rename Parser to TranslateParser please, and then I'll merge it.. Thanks !\n. For two reasons:\n- we don't know if the loader has loaded json files and if the lib is fully initialized at the beginning, using an observable ensures that we only return when it's available\n- users can make custom loaders, and using observables allows for more complex scenarii\nIf you want a sync method, there is one and it's translate.instant, but sometimes it can only returns the key (if the translations are not yet available)\n. Agreed, but I'd rather offer more possibilities than limit them\n. Hello,\nyes you can do that, see the tests: https://github.com/ocombe/ng2-translate/blob/master/tests/translate.pipe.spec.ts#L87\nBut then at the point you might as well use the service which does the same with a lot less of overhead :)\n. I guess that you have to provide it either in your module or in your component (using the providers property), but like I said you really should be using the service instead.\n. You can use \"instant\": this.translateService.instant('countryOfOriginCode'). Be careful, like the pipe transform, this is synchronous so you have to make sure that the translations have been loaded, otherwise it will return the key instead of the translation. Ah good catch thanks!\n. This has been fixed, the parser now checks that the value isn't null or undefined.. Hello,\nkarma serves files from a different route than your application does.\nYou have two options to resolve this problem:\n- use MockBackend to simulate the webserver for the http request that will load the i18n json file, and return it from its real location (using node require)\n- define the correct the assets location (the one that karma will serve) when you define the TranslateLoader in the TranslateModule\nI think that the MockBackend solution is the best, because you don't want to do real requests in unit tests. Your point is not to test the loader but to test that your application works well with it. Also the MockBackend gives you plenty of testing options (such as simulating a delay for the request).\n. That's true. I should add a test with that and it could serve as a documentation.\n. Also you can take a look at this starter that uses this plugin with angular 2: https://github.com/preboot/angular2-webpack\n. Hello,\nWould you like to do a PR for that ?\n. This has been merged, thanks.. Hello,\nchange \nts\nimport {TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nto\nts\nimport {TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate';\nand it should work (notice that I import from ng2-translate instead of ng2-translate/ng2-translate)\n. Sounds like a legit request, adding it to the to do list :-)\n. Nice, thanks\n. Or you could do:\nts\n    this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.breadcrumb.addFriendlyNameForRoute('/users', event.translations['pages']['user']['title']);\n        this.breadcrumb.addFriendlyNameForRoute('/users/edit', event.translations['menus']['user.profile']);\n    });\nA LangChangeEvent is an object with the properties lang: string & translations: any (an object containing your translations).\nBut I understand what you mean, you'd like an observable that would be like get but permanent, I'll see what I can do. Ahhh good point.\nShould I change get behavior in order to not complete automatically, or should I add a new method? Any idea for the new method?. Not yet, but should be in the next major. I'm merging a few other PRs and I'll release a new version. Yes, because \"instant\" takes the current value available or the key if the value is undefined.\nIn the constructor your translations probably haven't been loaded yet.\nEither use get which uses an observable or use instant later (like you did with the set timeout). I agree, this should be the case, and a PR would be awesome. Hmm the example is supposed to work, if that's not the case then it's a bug.\nAnd yes we could add a new simpler example with a string value. Damn it you're right, here is how it should be: http://plnkr.co/edit/yJPzPnuTQ0qnrNCPIjbU?p=preview\nI wonder why you can't use the object directly in the template. Ok I've updated the readme accordingly, thanks a lot for reporting this !. Yes using an object with multiple keys is the way to go for now.\nThe pipes in Angular support multiple parameters, but I'm only using the first one for now: https://github.com/ocombe/ng2-translate/blob/master/src/translate.pipe.ts#L90\nIf you want to make a PR to support more than one, you can :). Ahah yeah, maybe i18n is a bad idea.\nThat being said I might one day make this library in vanilla js with addons for different frameworks (I'm not doing that for now, but that's a possibility).\n@ng-translate is out of the question because it's too much like angular-translate.\n@ng-i18n is a better idea yes.. Yeah :D\nI'm all for a distinct name (like babel - which would be a cool name for this lib by the way), but I haven't been able to find one that I like... naming things is the one of the hardest thing to do :). What about t7e ? i18n means internationalization with 18 the number of letters between i and n in this word (and l10n is the same thing for localization), t7e would be translate, with 7 the number of letters between t and e in the word translate.\nIt's short, good for a namespace on npm and for imports, and it's original (there is no other library by that name). my bad, there is a library by that name, and it's about translations :D https://www.npmjs.com/package/t7e\ndamn it !. Trad (short fort traduction = translation in french)?. Let's make a little summary of the propositions that I like so far (namespace: lib name - module name):\n- @i18n/core: i18n [for Angular] - i18nModule\n- @t7e/core: Translate - TranslateModule\n- @???/core (@trad is taken): Trad - TradModule\n- @polyglot/core: Polyglot - PolyglotModule\nMy favorite so far are the two first. Hey good idea, I like it :). So after a few weeks and 3 twitter polls, I've decided that the new name will either be ngx-i18n or ngx-translate.\nBefore we choose we need to think about how it will affect the directives / pipes as well.\nWith ngx-i18n the directive and pipe will be ngxI18n. I won't use i18n alone because of the official i18n directive. Also it's a pretty common name and that might cause problems. It's nice because it's short, but I really don't like how it comes out in camel-case, the i is hard to differenciate from the letter L...\nWith ngx-translate I can either change them to ngxTranslate or keep using the current translate. It's a bit more text to write, but it's closer (or similar) to the actual implementation, and it's easier to writer/remember I think. ngxTranslate might be a better choice in the end, because translate is an official (experimental) HTML5 attribute, and it's a problem if you want to use it along with this library. Also it causes issues with protractor because protractor expects a boolean value.\nAny preference?. The version is automatically generated on Travis when I push / merge commits (based on the commits messages), that's why it's empty in package.json :). So my review of this PR:\n- We should not set the default language to \"en\" automatically, we just don't know how people want to name it, and maybe for some reason they don't want a default language\n- Is it really necessary to have a DefaultLangChangeEvent ? I don't see any use case, you define the default lang at bootstrap and then you forget about it, it's not really something that you should change\n- If we don't use the DefaultLangChangeEvent, then changeDefaultLang becomes unecessary as well. So in the end, the only thing that you should do in this PR is: get the default lang file when the current translation is missing (if the default lang is missing too). And sorry if I seem a bit blunt here, I'm just making sure that we don't bloat the code too much by adding stuff that isn't necessary. But rest assured that I appreciate the time that you took to do this PR, and it's a good one (clean code and tests!). Ok good, a few last changes and I'll merge it:\n- fix the conflicts (merge master into your branch)\n- update the new directive with the same thing that you did in pipe\n- add documentation about the new event in the README.md. Sorry, been a bit busy, I'll try to do it this week. No problem :). Ok I fixed the bug in the directive, the failing test will pass now.\nI also fixed a few other things at the same time: it sets the default lang to the first lang that receives translations (if the default lang is undefined at that time), and the onTranslationChange event now emits for all setTranslation calls (not just for merges, I don't know why this was just for merge).\nAlso the directive now listens to onTranslationChange events.. All of this is available in the new 5.0.0 release.. Hi ! I've actually started working on it just yesterday :-)\nDon't expect any quick result though, because it's a lot of work. I initially wanted to use the official cli tool (ng-xi18n) for that, but it's not extensible at all, and I don't think I will be able to do what I want with it, so I'll have to work on my own thing, which means that it will be able to do much more, but also that it will take more time.. Oh nice, thanks for the link !. I'll be working on different formats once this tool is working, the first one will be xliff to be compatible with most translation solutions (and with the official ng-xi18n tool that generates xliff files), I could add csv to the list.. Nothing public yet. I will be a nodejs lib that you can call as a cli, or include as a library if you prefer. You'll give it a glob of files to parse (ex: [\"src/*.ts\", \"src/*.html\"]) and it will use regexps to find matches.\nThe tricky part is the find the correct matches and transform them into keys :). Awesome, mine extracts strings from directives (the new one, soon to be merged), which means that if I merge your work with mine we'll have most of the use cases covert !\n@biesbjerg do you mind if I integrate your work? Yours seems more advanced than mine.. Closing this issue now, use @biesbjerg's extractor if you need it ! It works well :). I get what you want, but I don't think it would be really useful for other people.\nIf more were to ask for this feature I would reconsider it, but not until then.\nI'm gonna add new formats soon, and I'm considering adding json5 (in a specific optional loader).\nJson5 has nice features like comments, multiline strings and more :)\nFor example:\n```js\n{\n    foo: 'bar',\n    while: true,\nthis: 'is a \\\n\nmulti-line string',\n// this is an inline comment\nhere: 'is another', // inline comment\n\n/* this is a block comment\n   that continues on another line */\n\nhex: 0xDEADbeef,\nhalf: .5,\ndelta: +10,\nto: Infinity,   // and beyond!\n\nfinally: 'a trailing comma',\noh: [\n    \"we shouldn't forget\",\n    'arrays can have',\n    'trailing commas too',\n],\n\n}\n```\nWriting a loader to support that would be really easy if you want to do it yourself. Just copy the current static loader, import the lib and parse your json with it.. yes, once I've chosen the new name / namespace, it will be easy to release new loaders like that :). Hello,\nYou're mixing stuff here, params are not for keys, they are for translations. This: {{ 'Hello {{ name }}' | translate: { name: 'Kim' } }} will not work and for a good reason, keys are supposed to be static, not dynamic.\nStill you can create dynamic keys like this:\n```ts\n{{ ('Hello' + someVariable) | translate: param }}\n// ...\nparam = { name: 'Kim' };\n```\nBut the name property will not replace the name in the key. I'm currently working on the directive, and it can use the full text of an element as a key by default. But it will take into account the value of variables.\nFor example with the following code:\n```\nHello {{value}}\n//...\nvalue = \"world\";\n```\nThe real key will be Hello world, not Hello {{value}}. The idea behind this is that you will be able to provide dynamic values based on parameters inside your elements.\nAlso once the app is running, we never receive {{value}}, it's always either undefined, null or some value, so there is no way to have a key with {{value}}.. It won't work with the auto extraction obviously, that's why you will be able to define keys manually, for example you could do: <div translate=\"myKey\">Hello {{value}}</div>.\nThe idea is that the tool will detect those cases and warn you (at first), and then once the tool is more sophisticated it will fix your source file by auto generating a key for the translate directive (it could even ask you for that key).\nBut this will be optional, like I said \"Hello {{value}}\" is totally valid, it will just mean that you have to define a key \"Hello world\" for example, and in the end that's up to you to do it.. for the meaning, I'll probably use the same approach as the angular team and use description strings that will be included into xliff files (when the tool is able to extract to xliff).\nIf you have external translators you should use advanced formats (like xliff), and not json because they will probably use a translation application (and not edit json files directly).\nBut I hear your concerns, I need to think about it a bit more to see what's the best approach. I just started the work on this, so there is still time to improve the process. Good catch @onedotover, fixing this immediately. Good, closing this then. Closing this now, let me know if I should reopen it.. Awesome thanks ! I'll add it !. Okay, next time do a PR that's easier to merge :). Good point, thanks :). It's not intentional, I'll fix this ! Thanks for the report. Actually this is already fixed, waiting on the last changes in #336 before I release a new version. I will release a new version now, and I'll release a new one later with #336. Yes, it's available in 4.2.0. It makes sense, I'll add it to the todo list (or you can do a PR!). It's cool that you found a solution :). thanks !. Hmm I'm using this version and it did not generate a dependency injection error in my project, and I haven't changed my imports.\nIf it does then it's bug, but I don't consider adding the TranslateParser a breaking change because it does the same as before (you can just replace it with your own now) and the defaults  should make it backwards compatible. That's a minor update in semver (new feature but backwards compatible).\nCan you show me how you import the TranslateModule into your project ?. That's true, but like you said it's not really likely, if you don't use the service you don't use the lib (in my opinion), this is where all the value of the lib is :)\nAnd you should expect that it could break and not use ^ in your package.json ;). Hi, where is this getCookie method ? It's not in ng2 translate source code. Hmm seems like it's a problem with the HttpModule from Angular, did you use a version not supported by your current angular universal version ?\nLet's ask @patrickjs if he has any advice on this. It works with Universal (old version), I haven't tried with the new universal that is being merged into v4 but it should work too. I removed the HttpModule dependency from the core in 6.0, you can use the main module in the server and in the browser, just load a different TranslateLoader (ex: HttpLoader in the browser, and UniversalLoader in the server). @cristiancamiloperezlopez this project is open source, it's free and we work on it on our free time.\nIf you're not happy with it, either try to improve it, or write your own thing but don't come here to insult us.\nOne more message like this and I'll ban you from this repository. Here is what I used for a project with universal: https://gist.github.com/ocombe/8af9d555ab2da45cd1042ef2ccb0ef6b\nThis is with universal for angular 2.1.2 and ng2-translate 4.1.0, you can migrate it to ngx-translate, it shouldn't be too difficult.\nI haven't tried universal in angular 4 yet, a lot of things have probably changed.. It's not possible with the current directive, and it would probably require a different directive altogether to enable it. But you can have the exact same behavior with the pipe:\nhtml\n<div [innerHTML]=\"'HELLO' | translate\"></div>. Perfect, closing this, let me know if you need it to be reopened.. Hi, you're right it should be translateParams, not sure what happened in the readme, I fixed it.\nHow is it not working as expected (once you've set the correct translateParams). The directive is quite new, so it's possible that it's still buggy in a few use cases that I didn't test correctly.\nI'll check :). Fixed in 6.0.1. Thanks a lot ! :). Can you give me an example ? A plunkr would be the best. Hello, I'm closing & locking this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Good catch, thanks. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Closing this, let me know if you need it to be reopened.. Good to know, thanks !. Hello,\nMake sure that you load UniversalModule before TranslateModule, so that it replaces Http by its own. Another solution is to use this loader (that uses \"fs\" instead of Http) on the server side: https://gist.github.com/ocombe/593d21598d988bf6a8609ba5fc00b67e\nAnd the static loader on the client side. Did you use a different loader (that doesn't use http) for universal like suggested above?. Here are my server files for a project that I did with universal: https://gist.github.com/ocombe/8af9d555ab2da45cd1042ef2ccb0ef6b\nIt's a bit old, but it should help you. You should probably load NativeScriptHttpModule before the TranslateModule, but other than that, I'm not sure how the NativeScriptHttpModule works. Hello,\nI'm not sure I understand why you need to inject the pipe into the component ?\n\nIf injecting the service, values do not update when the language is changed.\n\nYou can subscribe to onLangChange events, isn't it what you need ?. Well the thing is that if you inject the pipe in your component I have no idea if the subscriptions in the pipe are really cleaned up after the component is destroyed (when it's in the template it gets handled by angular with the OnDestroy life cycle hook).. You can use \"instant\":\nts\n    this.translate.get('HOME.TITLE').subscribe((value: string) => {\n      this.myValue = value;\n    });\n    this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n      this.myValue = this.translateService.instant('HOME.TITLE');\n      // or even if you don't use parameters:\n      // this.myValue = event.translations['HOME']['TITLE'];\n    });\nBut I get what you want, some kind of observable that would get the translation immediately and then call the callback when the lang changes as well. It makes sense and would be easier than doing 2 subscriptions. I'll see how to implement that when I get the time.. Follow up this issue in https://github.com/ocombe/ng2-translate/issues/330, closing this one as I believe it's a duplicate (the desired functionality is the same in both cases). Unfortunately if there is no default language, it is automatically set when you call use. I didn't take this use case into account because I didn't expect that someone would actually want the translations not to show up.\nYou could probably abuse this by setting the default lang manually. In 5.x it's not possible because the property is private, but it's public in 6.x (the beta 1 is available).\nIf you set the default lang to a lang that doesn't exists, it should probably work the way you expect it to work:\nts\ntranslateService.defaultLang = \"_no-lang_\";. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Thanks !. Oh good catch, thanks !. Thanks !. If you want to keep the original text with the directive when the translation is missing, don't set the key (or set the key to the content value that you want).\nFor example:\nhtml\n<h1 translate>\u767b\u5f55</h1>\nThis will use the content as a key (in this case \u767b\u5f55), and when the translated value is missing, it will keep the original content until it is available.. Why do you want to git clone the project instead of using npm to install it ?. I think that you can use npm link with relative paths as well: npm link ../../some-folder. Might be a problem with how you define your styles.\nIf you define them in your component then angular will add a special attribute to the css tags (as well as to the dom nodes, this is the css hoisting), but this attribute is not added via ng2 translate.\nTo fix this you can either use /deep/ in your css, or change the view encapsulation property to none: https://angular.io/docs/ts/latest/guide/component-styles.html#!#view-encapsulation. Not yet, but there is something like that in Angular: https://angular.io/docs/ts/latest/api/common/index/I18nPluralPipe-pipe.html\nIt'd be nice to use it or do something similar. Well, you can make a PR to improve the parser, or you can write your own implementation of the parser to use instead of the default one :). Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Sure you can do that with the pipe: {{ (customerId ? 'Edit customer' : 'New customer') | translate }}. Well I was just talking about it with @ceolter.\nI've never worked on RTL support before, so I have no idea what it implies, do you have some experience on the question ?\nI don't mind adding it, it would be a great feature to add.. Hello,\nsorry but the directive was added in version 4.1.0: https://github.com/ocombe/ng2-translate/releases/tag/v4.1.0\nIf you want to use it, just update the library.\nUnless you're talking about 5.0.0 when you say 2.5.0 ?. Closing this, let me know if you need it to be reopened.. Thanks ! Can you fix the error ?. Hi, could you explain what is the idea behind this PR ? Why is it needed, what does it offer ?. oh ok, so this allows you to have a loader for each of your modules, it might be a different type of loader if you want, and each loader has its own translations that it doesn't share with the other modules ?\nI have to think about this, because it's a major change.\nAllowing each module to load its own translations is one thing, but making all of them independent is another, I can already imagine people who will want those translations to be shared among module.. I'm not saying it's a bad idea, it's just that I need to think about it before I merge this, because once it's in there is no going back ;-). Ok so I finally took the time to review this PR (sorry it took me so long).\nAt first I didn't get why you generated uids and why you moved a lot of things into the module loader. The reason is that we want \"one\" instance of the service, so that we keep one list of languages and translations, but we want different loaders. The loader being injected into the service, it couldn't work for sub-modules.\nSo you created a new service that gets registered into the main service, and when the pipe / directive need a translation, it gives the id to the main service so that it uses the local instance that uses the local loader.\nBut I don't like that because it complicates a lot the model, and it changes the signature of all the methods to add a new \"uid\" parameter.\nI searched how we could achieve this modularity without changing the methods, here is what I think would be a better way to do it:\n- forRoot defines a service / loader / directive / pipe and store\n- this store is new, it will be used to share common stuff between each instance of the service\n- forChild defines a service / loader / directive / pipe, but no store, the store is unique to the root module, it will be injected in each instance of the service\n- since the service is local, it will use the local loader, which means that the methods don't change in the pipe / directive and components that use the service\n- the service will call this shared store when it wants global stuff (the list of languages, translations, ...)\n- if you want totally independent modules that don't share the translations/languages/..., you can use forRoot in each independent module, it will create a local instance of the store\nIt would be much simpler, don't you think?. Ok so I tried to implement my method, and wrote a test for it but... it fails.\nI had 2 different modules, each one importing TranslateModule with forChild, and tried to define \"useStore\" to false, but both modules shared the same TranslateService instance, even if forChild provided it twice.\nI asked Rob Wormald why that was the case, and apparently even if you use different modules, the providers get flatten at bootstrap and the last \"provide\" wins.\nObviously that's not the case for lazy loaded modules because they are not defined at bootstrap. They get their own injectors, which means that if you provide a service there, it will be a new instance. But since everything runs inside the same angular application, the new injector inherits from the root injector, and you can still get parent instances (if you don't provide a new one in the lazy loaded module).\nSo the only way to have different loaders / services in different modules will be to lazy load them (or use the providers property in your components, which creates a new injector too).\nIt means that you can do all of that, it will just not be possible to have 2 different instances in 2 different modules that are not lazy loaded.. You don't really have to use forChild if you don't use lazy loaded modules. You're right about the observables (on lang change), it's gonna be messy if the service is a new instance every time.... The store & forChild are available in the ngx-translate branch (along with a bunch of other things).\nThere is an \"isolate\" property that you can set to \"true\" if you want to isolate your service (it only works with lazy loaded modules, or if you use the \"providers\" property in a component).\nI will publish a beta of the new ngx-translate branch soon.. New 6.0.0-beta.1 with forChild: https://github.com/ngx-translate/core/releases/tag/6.0.0-beta.1\nBe careful it is based on the new ngx-translate branch, and a lot of things have changed.. It's available in 6.0.0. Not really but you can take a look at the http loader source code: https://github.com/ngx-translate/http-loader/blob/master/src/http-loader.ts. Duplicate of #355, closing this one. Just import the module into your testbed and it should work. Hi,\nyou just need to import the module into your testbed (like you would for any other module, like HttpModule or RouterModule):\nbeforeEach(() => {\n    TestBed.configureTestingModule({\n        imports: [TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'public/assets/i18n', '.json'),\n            deps: [Http]\n        })],\n        declarations: [SidenavComponent] // declare the test component\n    });\n});. If you use the TranslateStaticLoader then you must resolve the requests before the content can change: https://github.com/ocombe/ng2-translate/blob/master/tests/translate.service.spec.ts#L62\nBut unless you're trying to test that translations work, you should probably mock the TranslateLoader with a custom loader that doesn't use http requests, that will make all you test much easier https://github.com/ocombe/ng2-translate/blob/master/tests/translate.service.spec.ts#L570-L594. You forgot to create the connection in your beforeEach: https://github.com/ocombe/ng2-translate/blob/master/tests/translate.service.spec.ts#L37\nts\n// sets the connection when someone tries to access the backend with an xhr request\nbackend.connections.subscribe((c: MockConnection) => connection = c);. Closing this, let me know if you need it to be reopened.. Hi, I think I have a change like that coming up in the next version that I haven't pushed yet, I'll check when I get back home.. This has been fixed by the way, sorry for not replying before! Closing the issue :). yes, it's a bug, it will be fixed in the next beta (currently fixed on master)\nthe directive doesn't work with empty text content right now, if you cannot wait for the next release, just put anything into the content like <h2 [translate]=\"'HOME.TITLE'\">test</h2>. yes, javascript is not 100% reliable for this, it's usually a good approximation but if you really want to know the language you should detect is server side. I'm sorry but if you really want help, you'll have to give more information.. When you say resource info, you mean translations?. This error seems to be a problem with angular < 2.2.3.\nCan you upgrade to 2.2.3 +?. Awesome :). It works for me but I'm using it in JIT (not AOT). There's a PR for a \"forChild\" method that would work for lazy loaded + AOT modules, I guess it would also work in your case. But it's a big PR that introduces a lot of changes and I haven't had time to review it yet. This is fixed in 6.0.0 with the new forChild method and the updated documentation :). What's the code of you function \"createMyTranslateLoader\"?\nDid you try to add the \"MyStorageProvider\" in the \"providers\" of your main modules, and maybe add it in \"deps\" as well?\nDo you really need the \"MyStorageProvider\" dependency? You can maybe do all of that directly in your \"MyLoader\" class ?. Nice :). I have no idea, I've never had this problem before. Did you try to use catch on the observable to see if it catches anything?. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello,\nthere's a PR on hold for that, it should be coming soon, hopefully this week end I'll try to merge it. You can try 6.0.0 beta 1, it should be possible to define different configs for the loaders of each lazy loaded modules. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, thanks for the loader, it sounds useful.\nBut I'm not adding any more loader into the core, in fact I'll remove the static loader soon to make it an external library. Would you like to make it available on npm and I'll list it in the readme? Or make a gist if you don't want to take the time to publish it. No, you don't have to, if you want to take a look at what it will be, it's here: https://github.com/ngx-translate/http-loader/blob/master/src/http-loader.ts (I renamed it http loader).\nBut I will make a few changes again, because I want to add a new functionality: the format. Right now it only support json, but I want to make it possible to support other formats as well, so I'll probably add a new dependency to a \"format\" library as well.. This is a specific behavior that I prefer to keep separate. Hello, yes it should only send one request. Can you make a plunker with a reproduction of the problem?. Did you load the TranslateModule in multiple ngModules and called .forRoot each time?. I just noticed that I have the same problem on my project now that I implemented lazy loading, I'll see how to fix it and let you know.. Ok so I used to call .forRoot in my shared module, and export TranslateModule from there, and configure the module in the constructor of the shared module. But apparently this was executed for each lazy loaded module that imported this shared module...\nI moved the forRoot to my root module and just imported TranslateModule in my shared module (without calling forRoot), and now it only loads one json file.. and that's why it's in the docs!. Yes, that's a different problem though (but one I need to fix).. Hello,\nIt's pretty self explanatory: you should install @angular/core@^2.0.0 & @angular/http@^2.0.0 by yourself to make the library work.. What do you mean by this is a restriction? 2.2 and 2.4 both satisfy ^2.0.0 (notice the ^ which means superior to). Are you using npm 2.x? It doesn't handle peer dependencies well. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hi, you can already use this cli tool for that: https://www.npmjs.com/package/@biesbjerg/ng2-translate-extract. Closing this issue because it's a duplicate of https://github.com/ngx-translate/core/issues/374. The problem is either that you serve json files badly encoded from your server, or that your index.html file has no charset defined. But I can assure you that it has nothing to do with the lib :). Hello, yes it is the way to do it :-). You can use the intl polyfill to make it work everywhere...\nYes date & numbers are probably going to be in this lib one day, but I don't know when. If you want to make a PR for it, it'd be nice!. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.\nThe new i18n pipes in Angular no longer use the intl API.. Hello, this will be possible in the next release 6.0.0 (there's a beta available) for lazy loaded modules and components using the \"providers\" property (in both cases a new injector is created that allows to create a new instance of the service).\nYou can try the beta 1 if you want.. Yeah I'm not sure about this either. You're supposed to be the master of your translations, you should know that some key contains an object (and use key.childKey).\nAlso some people might want to get an object (with get or instant) in their service and do stuff with it, it could be the intended behavior...\nLike @SamVerschueren said, your change limits those possibilities and introduces a breaking change. An object is not really a missing translation. I understand that what you really want is to be able to go through the missing translations handler (if someone gives you bad translations), but fixing those errors at runtime are probably not the way to go, you should fix them in dev before you ship your code.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.\nIf you need an example with the CLI, see https://github.com/ngx-translate/example. If you're looking to use it with angular universal (server side) then yes it works. You'll have to provide a loader for the server side that works with nodejs, like this one: https://gist.github.com/ocombe/593d21598d988bf6a8609ba5fc00b67e\nAnd use your usual loader client-side. ah that's not possible, it only works if you use Angular Universal on the server side. This PR was for v5, but I changed the package.json in v6 and it no longer uses cp in the npm commands, so I'm closing the PR since it's no longer an issue :). it might indeed be missing in the documentation, also there's a PR to change this behavior in some cases: https://github.com/ngx-translate/core/pull/412\nI haven't had time to take a deep look at this yet. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, you have to call \"forRoot\" when you import the module so that it creates an instance of the service: TranslateModule.forRoot().. You probably need to import it in the two testing modules that you're creating. No idea either then :-/. The HttpModule is no longer part of the core in the version 6.. I did that because of this note in angular/angular 2.3.1:\n\nDue to regression in the 2.3.0 release that was fixed by https://github.com/angular/angular/pull/13464, components that have been compiled using 2.3.0 and published to npm will need to be recompiled and republished.\nThe >=2.3.1 compiler will issue is the following error if it encounters components compiled with 2.3.0: Unsupported metadata version 2 for module ${module}. This module should be compiled with a newer version of ngc.\nWe are adding more tests to our test suite to catch these kinds of problems before we cut a release.\n\nBut after reading the note again, and asking confirmation to the angular team, it just means that you shouldn't use 2.3.0 to compile. Since it has been fixed in 2.3.1 you can compile your lib again and it should work with all versions.\nI'll change the peer dependency back to 2.x / 4.x. Thanks for opening the ticket :)\nI'll publish a new beta later today.. It should be fixed, thanks @fiznool !. It's ok I can squash them when I merge :)\nI'll try to review all the pending PRs this week end, I'll have some time. So I reviewed the PR, and wrote a test for it, and it turns out that it didn't work well with components using OnPush.\nI used the @Input setter instead of ngOnChange (which I don't like to use in a lib since it's triggered by all changes), and referenced the changeDetectorRef like I did in the pipe (which probably fixed a few other bugs at the same time).\nAnyway, thanks a lot for your PR, even if it looks like I didn't merge it, it's just that I'm not that good at git commands (and apparently running the merge squash command line doesn't merge the thing on github), but I used your PR anyway to fix the bug.\nIt will be available in the next release tomorrow.. Can you create a new bug? This one is a PR. Mixing data and translations is not a good idea.\nI've done it in a project, and I can tell you that it ends up being a problem. Other devs didn't understand what I was doing, they changed keys without thinking that it would make things fail. Or they forgot to change it in all the translations (because it worked for them in english).\nAlso it means that your code becomes very tightly tied to the library, if there is a breaking change for some reason, you won't be able to update.\nAnd then the problem is that your app won't be updated until after init (when the translations load), which will probably trigger a weird visual effect, or some delay in the view.\nWhen you have no choice (because the data is on the server) then it's ok, but in this case you already know the structure in the front end, it's just the text that changes.. If you use Angular v6, you have to use ngx translate version >= 10\n. thanks!. Hu that weird, it looks like the import and forRoot definition are correct, I don't know why you get this error :(. I'm not sure why you use two beforeEach ? But other than that it seems correct\nWait, are you using version 6 or 5? The error message let me thinks that you installed version 5 but are using the configuration of version 6?. Nothing except that the documentation is not the same. Use this one: https://github.com/ngx-translate/core/blob/fb02ca5920aae405048ebab50e09db67d5bf12a2/README.md\nAnd especially the import is different for the forRoot method.. yes, you need to initiate the translate service with \"use\" (either in the component, or in the tests) so that it knows which lang to load. ts\nlet injector = getTestBed();\nlet translate = injector.get(TranslateService);\ntranslate.use('en');. How did you import the TranslateModule into your module?\nIs the child component in the same module?. forChild is not available in the 5.x version that he's using.\nJust importing the module (without calling forRoot on it) should work for the pipe/directive.. Yes, this is a duplicate, closing it. Done, I just forgot to update the link in the readme at the beginning, thanks :). Hey, yeah it's a bug because I only test for equality in references.\nThe pipe uses a custom function that I stole from AngularJS source code to compare object: https://github.com/ngx-translate/core/blob/master/src/translate.pipe.ts#L44\nI don't use it in the directive (and I should).\nA PR to fix this would be nice and very easy to do, just use this \"equals\" function here to compare the parameters: https://github.com/ngx-translate/core/blob/master/src/translate.directive.ts#L27. Seems like a bug to me: when the key is forced it doesn't detect changes because the key is always the same...\nWe should always set node.lastKey = null; when forceUpdate is true in the checkNodes method for the directive. Thanks, it was fixed with #445! :). Well at least people won't be able to say that they didn't know :D\nThanks for the docs fix. @richflee could you narrow it down to figure out what's breaking? I only have windows 10 here and it works fine on IE11/IE10. Can you test the function independently and see where it's failing to get the correct lang?\nThis is the code of the function:\n```ts\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if(browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n    }\n\n    if(browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n}\n\n```. There is no cross browser function that I know of to get the browser complete locale id (\"en-AU\" instead of \"en\"), since some old browsers only return the first part, which is why this function only returns \"en\".\nThat being said, the issue for you is that it picks up \"en-AU\" instead of \"es-ES\" or something like that, right?\nI think that IE returns the language from windows instead of the option defined in the browser settings.. After a quick search, this post & its comments explain it well: https://stackoverflow.com/a/2678437/649896\n- languages (non-IE): list of user-preferred languages (defined by the user in browser; note though that navigator.languages[0] might be totally different than navigator.language)\n- language (IE11+ & others: browser install language)\n- browserLanguage (IE, browser install language)\n- userLanguage (IE, user-level OS-wide language setting)\n- systemLanguage (IE, OS installation language)\nIn IE11 navigator.language === navigator.userLanguage. The value of userLanguage can be changed by the user on Windows in Control Panel > Region and Language.\nIn IE11 you simply cannot reliably determine the most preferred and supported language, you have to resort to your server sending back the Accept-Language header (processed or not).. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Thanks you're right, do you want to make a PR on this file https://github.com/ngx-translate/ngx-translate-website/blob/master/src/app/components/app.component.ts ? Or I can make the change otherwise.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. aye, sorry guys, got a lot of stuff on my plate while working for the core team :). Yeah I'll try to work on this tonight after my work :) I've got a few PRs to review. No it doesn't, it manipulates the DOM (which honestly is probably not a very good idea). The pipe is a safer bet.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, thanks for the report but I'm closing it because it is a duplicate of #397. Like its name suggests, getBrowserLang returns the lang of the browser.\nIf you want the lang setup for your application use this.translate.currentLang.. Hello,\ncan you add more context please, like some code?. Thanks!. I'm sorry but this is not possible in Angular because we don't have access to the compiler like we did in AngularJS.... The url for the old package redirects here. The old package doesn't support the new versions of Angular, I'm confident that they will find this one whenever they need to update.. Did you call .use() somewhere in your testing app? (like in a component that's you're testing)\nif not then that's why it's not loading the json. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.\nYou can find an example of unit test with this lib here: https://github.com/ngx-translate/example/blob/master/src/app/app.component.spec.ts\nI'm accepting PRs to add more complex tests.. Hello,\nit can still be used, but it's a bit outdated.\nYou should probably look at this article by Minko Gechev http://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/\nAnd take a look at that starter: https://github.com/preboot/angular-library-seed. It's not a bug, but it's a missing feature yes. By default there is no loader (it's just a function that returns nothing), if you don't add any loader, you can just use setTranslations like you want.\nI don't know how it could make an http request without the loader since it doesn't even import Http.\nMake sure that you don't define any loader and it should be ok.\nHere is the loader that it uses by default: https://github.com/ngx-translate/core/blob/master/src/translate.loader.ts#L12-L16. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.\nYou can find an example of unit test here: https://github.com/ngx-translate/example/blob/master/src/app/app.component.spec.ts. TranslateStaticLoader doesn't exist in version 6.x anymore, it has been replaced by TranslateHttpLoader (you will need to install the npm module @ngx-translate/http-loader): https://github.com/ngx-translate/http-loader. Sure, any doc is always good!. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.\nYou can find an example of unit test (including a spyOn) in https://github.com/ngx-translate/example/blob/master/src/app/app.component.spec.ts. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Yes, open a feature request for that, just check if there isn't another one already (I think there is one). Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. The peer dependency for ngx translate is \"@angular/core\": \">=2.0.0\".\nThe messages that you have don't come from ngx-translate but from angular material and codelyzer (for tslint).\nAngular material will support angular v4 in the next release (I don't know the release date yet).\nBut warning with peer dependencies doesn't stop your application from working if the lib is in fact compatible (unless you're using npm 2, in which case you should upgrade to npm 3 or npm 4).. If you need the current version of material before the release you can use npm install angular/material2-builds --save, it's the nightly build.. Angular material should work. v4 only deprecates things, the worst case scenario will be some warnings in the console that you're using deprecated things.\nngx translate works with v4 for sure (I'm testing the lib on v4).\nYou cannot have both v2 and v4 @angular/core, it would most likely break your build.\nIf you see that material really doesn't work with v4, you should probably install the last build that I linked above and wait for the new release that should come out shortly.. Hello,\nthis is a good question, and as I am working on i18n in the Angular core team I am probably the best to answer this.\nThe idea behind this lib has always been to provide support for i18n until Angular catches up, after that this lib will probably be deprecated. For now, there are still a few differences between Angular i18n and this library:\n- Angular only works with one language at a time, you have to completely reload the application to change the lang. The JIT support only means that it works with JIT, but you still have to provide the translations at bootstrap because it will replace the text in your templates during the compilation whereas this lib uses bindings, which means that you can change the translations at any time. The downside is that bindings take memory, so the Angular way is more performant. But if you use OnPush for your components you will probably never notice the difference\n- Angular only supports using i18n in your templates for now, I'm working on the feature that will allow you to use it in your code, but it's still a work in progress. This lib works both in code and templates\n- Angular supports either XLIFF or XMB (both are XML formats), whereas this lib supports JSON by default but you can write your own loader to support any format that you want (there's a loader for PO files for example)\n- Angular supports ICU expressions (plurals and select), but this library doesn't\n- Angular supports html placeholders including angular code, whereas this library only supports regular html (because it's executed at runtime, and not during compilation, and there is no $compile in Angular like there was in AngularJS)\n- The API of this library is more complete because it is executed at runtime it can offer more things (observables, events, ...) which Angular doesn't have (but doesn't really need given that you can not change the translations). @josersleal that's exactly what they did, the angular team hired me to improve i18n for everyone\nBut there is no way to integrate my lib directly into the core, after working for 3 months for the core team I can tell you that Angular i18n is much more complex and elaborate than my lib. It handles a lot of more complex stuff, and it does it without all the bugs and shortcomings that my lib has.\nI understand that it's frustrating that the core doesn't evolve as fast as what a library can do, but there are reasons for that, and the first one is that you cannot implement something and change it whenever you see that you forgot to include a use case. Everything has to be thoroughly planned and thought.\nStill, you will have most of the things that this lib can do in the core in the future, but it might take a year before we get there unfortunately. The good news is that it's going to be much better than my naive implementation.. Yes it's planned for the 5.x branch probably, not 5.0 though, we have too\nmuch on our plate for that\nLe mer. 2 ao\u00fbt 2017 \u00e0 21:59, aghilesh notifications@github.com a \u00e9crit :\n\n@ocombe https://github.com/ocombe : Is there any plan to add runtime\nlanguage switching feature on i18n+AOT ? Right now application is planned\nto use ngx-translate over i18n because of the run-time switching constraint.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/495#issuecomment-319781455,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQMopxEs3C1QIGT2K4ezy93rJ_ss0s1ks5sUNU4gaJpZM4MxgA4\n.\n. It won't be for 5.0, it should be before 6.0 (so before march 2018). Unfortunately I don't have a more precise date. if you can (meaning if you don't need translations in the code), it's definitively worth it yes. The way it's going, you'll never be able to dynamically change the language in Angular. It's clearly not a priority for Google and they don't think it's a problem if you have to reload the app completely to change the locale.. Yes that's coming soon, we are adding runtime i18n in v6.0 and then code translations right after that (or maybe at the same time). >  In the future, will Angular i18n have possibility to export translates to JSON or PO file.\n\nyes, I'm lobbying hard to get this, and we'll have it one way or another (either we support it ourselves, or we open the API and I'll make a lib for it)\n\nIs there any easy way to read XLIFF or XMB format with some GUI so it can be easily given to translators.\n\nthere are a lot of websites for translators that you can use, some of them have a free tiers\nsome good ones include:\n- poeditor (claims to supports angular)\n- crowdin (free for open source)\n- oneskyapp (unlimited free tiers as long as you translate yourself)\n\nWhat lib to use, what is your advice? Thanks in advance!\n\nif you can use the official implementation, then use that, it's more performant, the limitation is that it's limited to what is offered whereas with ngx translate you can always extend it via plugins, or even fork it if necessary. 80% of the people want JSON (according to the survey I did 2 weeks ago). But it'll probably be an external lib (opening the API) instead of something included by default in Angular just because there is no real spec for JSON translations\nXLIFF would still be the best way to do things because translation tools support that, but if you have a small app and you don't want something as complicated as XLIFF, then JSON would be just fine, and you can edit it in your IDE.. What are you using with angularjs right now? If it's angular-translate then updating to ngx-translate should be super easy. if you're migrating in 1+ year I think that regular Angular i18n will be the best choice by then :). No, never tried it. It should, if not it'll be in 6.1 a month later, you can follow the PR here: https://github.com/angular/angular/pull/22654\nThat being said, it'll be for the new renderer (ivy) only, and I'm not sure if it'll be 100% usable by then. It's in our plans for angular to support library translations so that people can define their own translations for a library that is i18n-compatible. It's been postponed twice already. It's scheduled for v7 now, we needed the new renderer (ivy) to make it possible.. If you need it now go for ngx translate. Ivy won't be stable until next year probably.. no. it's --i18nLocale (cf docs: https://angular.io/guide/i18n#template-translations). 1/ Of course yes\n2/ No, changing the language will require to reload the app, for now and the foreseeable future\n3/ I don't understand the question\n4/ Yes, and yes it's high priority, we've found a replacement for Victor who left the team last summer, and we now have someone working 100% on the compiler part of i18n. I work 100% on the runtime part, and misko is helping us both with the design.. For now this is how it works yes, it replaces the strings in the compiled templates.\nWith runtime i18n (in ivy) you'll load the translations at runtime, which means one bundle for all languages, and you can apply the language that you want when you load the app (but you'll have to reload the app to change the language, because once the templates have been compiled with one language, they are cached). This means that you could potentially apply some logic at runtime to load the language file that you want, as long as it runs before any template is compiled. For performance reasons it would be better to have the language files pre-loaded, otherwise you'll see a blank page until it's loaded.\nI don't know what's the best method to load the files right now, but I'd say that you should probably do some server-side detection based on either browser language / cookies / user preferences in the database / sub-domain / specific url pattern, and then serve the correct file.\nAll of that can work server side with nginx rules (or equivalent, like node express, ..., depending on what you use).\nYou can find an example of an nginx file here: https://github.com/skeletons-projects/angular/blob/master/config/nginx.conf. @amustiere you can use this loader: https://github.com/denniske/ngx-translate-multi-http-loader. @HamzaDevz not in v7, but with ivy yes\n@amustiere hmm it doesn't seem possible if you want separation of concern, at least not easily. To switch the language with Angular i18n you need to reload the app. Not right now, but it should be possible with the new runtime service with ivy if you choose to load the translation files at runtime (and not at build time). You will be able to load multiple translation files. We don't really care about what language they are using, it'll be up to you to load the files that you want to use.. @joannepham2018 not yet no, it'll be available with ivy. I plan to make a \"compatibility\" library that will use ngx-translate syntax while using the new angular service under the hood so that you can migrate at your own rhythm. But since the new runtime service isn't designed yet, I don't know if it'll be possible. There might still be some changes to do (like the config).. you will be able to set the translations at runtime, using an external file that you didn't bundle into your app (so no need to recompile), but you won't be able to change the language without reloading the app (for now at least). The ivy code has been rewritten from scratch :)\nIf some translations are missing, it will use the original template text instead (english for example if you used that in your code).\nYes you will be able to load translations from an API, but it'll delay the bootstrap of your app. If you load the translations during aot compilation, it should replace the strings in the generated bundle, exactly like it works right now. So you can build your app for each language (like right now), or simply load the translations at runtime.\nThe first solution is more optimized in terms of loading time and bundle size, but sometimes it's too complicated to do that because you'll need some kind of server side routing to load the correct bundle for each language.\nYou could also bundle all languages in the same bundle, if you prefer to optimize bootstrap speed over js downloading size (the js bundle will probably be cached after the first visit anyway).. For dynamic translations you'll have to bundle the parser with your app (it should work automatically depending on the format of translations that you use).\nThe parsers for xlf/xlf2/xtb will be provided by us (since we already have the code in the compiler right now).\nBut we are aware that it's a lot of js code to bundle just for that (I think it's at least 10 or 15ko minified for each parser, because XML sucks!).\nWe're thinking about different solutions for that:\n- you can bundle the translations at build time, they will be preparsed/optimized and you won't need the parser at runtime, it should also be more efficient. But that doesn't always work, if you're loading the translations from a database for example\n- you can use a custom parser, including a json parser which should be very small in terms of size. I'm not sure yet if I'll be authorized to write one for core (but I'm optimistic, because there's already an official json format for translations developed by google and called ARB (https://github.com/googlei18n/app-resource-bundle/wiki/ApplicationResourceBundleSpecification), we should be able to reuse that, and it would make sense for us to support that format officially, since it's made by Google!). If not, then I'll write one on my own time anyway, it should be relatively easy and light.. Yes there is nothing yet. We're working on fixing the bugs in ivy before we can work on new features like code translations :). 1/ yes you can do that if you use JIT\n2/ either wait for ivy and the new runtime i18n, or use JIT or use ngx-translate. Using JIT for now will make it easier for you to migrate to runtime i18n when it's released, but you'll loose on performance for a while. the polyfill is independent and should work in both modes, but if you use JIT then it will reuse the JIT config for translations, and if you use AOT then you will have to add that config (that is not needed without the polyfill in AOT). yes exactly, but you'll still need to reload the app if you want to change the locale (once that app has been loaded), because we need to recreate all templates when the language changes. honestly I don't know, every time I try to make an estimation, it's wrong :D\nIt'll be released with ivy, we try our best to target v8 for the beta which will have a lot of bugs, but I'm not sure if all the features will be in it or just backwards compatibility only (meaning not code translations). Everything should hopefully be stable for v9 in September.. Probably not a deprecation, but it will be like it is right now, I won't be updating the lib, except to make it work with new versions of Angular.. You could use https://github.com/ngx-translate/i18n-polyfill with JIT yes, but it's not the \"official\" service, just something that can be used in the mean time (and there are a few bugs/missing cases that I won't fix because I don't want to invest more time in something that's going to be deprecated soon)\nWe will finish the official i18n runtime service once ivy lands for v8 (so it should be merged in one of the minor version between v8 and v9). Most of the pieces are already done, but we need to work on stuff like APIs and such. That being said if you're adventurous and you use ivy, you could use the private exports sooner than that (once v8 is out).. You can use bindings on attributes like this:\n<img src=\"image.jpg\" [attr.alt]=\"'key' | translate\"> or like this:\n<input placeholder=\"{{'key' | translate}}\">\nI recommend the first one which will only set the value once it's available.. You only get currentLang once this.translateService.use has resolved (which means that the lang has really been loaded).. The version number is automatically generated when I push/merge new code,\ndepending on the commit messages, and a new version is released. The\nversion number is present on npm packages when the code is submitted to\nnpm, it's just not present on GitHub. forRoot and forChild are just helpers to automatically configure the module, providers, etc...\nYou can do all of that on your own if you have a very special use case, look at what those functions do: https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/public_api.ts\nThey import the module, and then define a bunch of providers.. You can load multiple keys at the same time with the service, you will receive an array of values. ts\ntranslate.get(['key1', 'key2']).subscribe((res: string[]) => {\n    console.log(res);\n});\nit also work with translate.instant() which is synchronous (but only works when the language has been loaded). Yes, it's optional if you prefer to set the translations yourself.\n@tsvetan-ganev you can do a PR to update the docs if you want :). Hello, you should update to version 6.0.1, it will solve your problem.. I don't see what this has to do with ng2 translate?. You cannot have angular directive / components / pipes / ... in your translations, it's a limitation of angular because you cannot call the compiler after bootstrap (unless you're lazy loading a module, and that's just in JIT).\nI'm sorry but it's not possible with this library. You can do it with angular i18n (the official thing), but not with any external library.. At runtime (when the library runs), the compiler is not available, which means that you cannot compile the templates.\nIf you need a directive / component / pipe, you have to put it outside of your translations (by splitting the translations for example).\nIn the case of You may <a routerLink='/login'> Sign in </a> again you would need to split it in 3: \"You may\", \"Sign in\" and \"again\".\nIt's a pain, I know, but there's no other way.. Yes, there is no alternative to $compile.\nCustom runtime-created templates will be possible with the next renderer (ivy) in Angular 7, but probably not for 7.0, it will just be \"possible\" with the new architecture, which doesn't mean that it'll be available immediately when ivy is released. I have no idea, maybe @samjulien could tell you. You could use this method \"getBrowserLang(): string | undefined: Returns the current browser lang if available, or undefined otherwise\". Yes sorry guys, that's how instant works. If you want you want \"clean\" code but don't mind with the fact that it's async or not, you could try using async/await since it works in typescript 2.3 now. Updated, thanks. The problem here is that the default lang is supposed to be \"set\" once (and can be \"changed\" after that), and it is automatically set by default when you call use. I agree that this is not very clear.\nYou could use changeDefaultLang instead which should do what you expect.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Thanks a lot for this PR, it's merged!. Yes, a custom loader is the way to do that.. This is not an error from the library but from your code.\nuseFactory requires an exported function, not an anonymous inline function.\nLike explained in the documentation:\n```ts\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http);\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [Http]\n            }\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n``. Hmm so what does it change actually? Could I get some tests to make sure that it fixes the problem ?. Once the PR has some tests :). I didn't want to depend on a library, so I copied the content of the deepMerge package inside the util file. Thanks for the PR, it will be available in the next version.. The library works browser side, it has no idea of what is available in your folder server side.\nIf you use webpack, you can provide this quite easily with thewebpack.DefinePlugin` that lets you define global variable for your application (you can get a list of files from the directory and send that to your app this way).. Which is only possible via webpack. Javascript cannot list the files from the directory of a server.. Hello, thanks for the PR, however I don't think that should work like that with isolate = true, that's more a behavior that I would expect from a module that is not isolated.\nFor me, isolated means that it doesn't use anything from the parent...\nI'll take the code from your PR, but change it so that it uses a new config parameter other than isolate.. good catch, thanks. The directive is not a service, it cannot be provided, it is declared when you load the module.\nWhat you can do is copy what the TranslateModule does and customize it like this instead:\n```ts\nimport {TranslateDirective, TranslatePipe, TranslateLoader, TranslateParser, TranslateDefaultParser, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateStore, USE_STORE, TranslateService} from '@ngx-translate/core';\nexport class TranslateLowerDirective extends TranslateDirective {\n     updateValue(key: string, node: any, translations: any) {\n         key = key.toLowerCase();\n         super.updateValue(key, node, translations);\n     }\n}\n@ngModule({\n    ...\n    declarations: [\n        TranslatePipe,\n        TranslateLowerDirective\n    ],\n    imports: [],\n    providers: [\n            {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader), // I have a custom loader declared\n                deps: [Http]\n            },\n            {provide: TranslateParser, useClass: TranslateDefaultParser},\n            {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n            TranslateStore,\n            {provide: USE_STORE, useValue: false},\n            TranslateService\n    ],\n    ...\n})\n``. it's not something that I'll merge sorry, but I was thinking about adding an alias for i18n (the official angular attribute). The translations will only be loaded when you call the.use(lang)method, you can call this anywhere you want.. If you're using systemjs, you should load@ngx-translate/core/bundles/core.umd.jsinstead of index if you don't want a transpiler.. thanks!. The difference is that it doesn't merge arrays ?. That's true :). I've merged it, new release inc, thanks !. thanks !. @lephyrus yes, this would be a too big change for this lib, it should probably be in a separate package. If there's something that's missing in the lib to allow you to do that as an external package, it could be done, but I don't want to pull an external lib as a dependency like that. yes, the compiler part can be merged, it can be useful to other people who want to write extensions as well. Yes sorry I was on holidays :). The library has been renamed ngx-translate, and is now using scopes (@ngx-translate/core, ...).\nng2-translate is no longer updated.. Thanks !. Thanks. It's just how json/objects work. You can use lowercase if you want.. None, you can do it. Hey congratulations with your \"+1\" spam, you made me lock this thread. Thanks, it's fixed. All angular plunkr have been broken somehow, even the official one :). Translations cannot contain any angular specific code, only variables, text and regular html.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please provide a stackblitz of github repo that I can use to reproduce the error.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, this won't work, the file \"src/translate.service.d.ts\" will be overwritten when we build.\nWhy do you feel like you need this change?. Thanks a lot !. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. What makes you think that you couldn't declare it at app level @RoyiNamir ?. Oh yes it makes sense, it's becauseChangeDetectorRefis only available in a component, it's what triggers change detection when the template is updated. This is the same code as what you can find in theAsyncPipe` for example: https://github.com/angular/angular/blob/c8a1a14b87e5907458e8e87021e47f9796cb3257/packages/common/src/pipes/async_pipe.ts#L78\nI don't really understand why you would want to provide inject the TranslatePipe yourself though, it will not work without the TranslateService anyway. Just import the TranslateModule and you will have access to the TranslatePipe in your components. If you need to get access to translations in your service, then use the TranslateService, it'll do the same thing that the TranslatePipe, but it's meant to be used in your code (which is not the case for the pipe that you're supposed to use in a template).\nDo you have a specific use case?. Why not use the translate service instant method instead which is synchronous and doesn't use an observable?\nAnd I replied to your questions, you can't declare it at app level because the pipe uses ChangeDetectorRef which is for components and directives.\nWhat kind of design is this? The one from the Angular team.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. Hello, I'm closing this issue because it's too old.\nIf you have a similar problem with recent version of the library, please open a new issue.. I think that the pipe has better performance advantage, but I don't have any benchmark to support that. Hello, sounds good, could you just update the readme to add info about this new config option please?. Hello, sound good thanks !. If you have all of your 3000 translations visible at the same time, and you don't use OnPush for the change detection strategy of your templates, then yes: for each digest it will check for each translation if it should change it, which will have a major impact on the performance.\nIf you use OnPush, then it will only check when you change a variable/input/... that affect this specific template. I strongly recommend to use OnPush in any case as it gives you a major boost in performance and will work without any change of your code in 90% of the cases (if you don't go against Angular in your code, meaning that you don't use vanillajs or non-angular external libraries to edit your templates).\nWith OnPush at runtime, I don't think that you'll notice a difference. That being said, if you really have 3000 translations visible at the same time, then it you will see an impact at the loading of your application when it loads your templates, even if you use AOT since this library only works at runtime.. thanks :). This is an error from the cli, nothing that I can do from here. The issue has been reported and will be fixed for v5 most likely. Thanks, I've updated it. Thanks. Yes I was more thinking about a custom loader server side that stores in the state transfer service, and a custom loader client side that pulls from the state transfer service, or http if the state service is empty for this lang. Hello, sorry but this example explains how to use a shared module to export those modules everywhere, it's meant to be \"export\".. I have added a test example here if you still need it: https://github.com/ngx-translate/example/blob/master/src/app/app.component.spec.ts\nThe example app uses Angular CLI v6. I've never used ionic, but maybe @danielsogl could help out?. Stop adding +1 messages, it won't change anything.\nIf you want to see this fix, someone will have to work on a PR because I don't have an iOS device and I don't have a mobile app with a webkit view. Thanks, any chance that you could extract this loader somewhere (github repo, or gist) and add a link to it from the readme so that people can find it easily?. Perfect, thanks. not really, you can just use the old version until ionic updates its dependencies. v0.1.0 for the loader\nany version for the core. Ah yes that's my fault, I need to update the dependency and make a breaking change instead, sorry about that I'll fix it with a new release. Fixed in 7.2.2! I'll release the version 8 with the new dependency to Angular 4+. Hello, like always the changelog is included in the releases: https://github.com/ngx-translate/core/releases/tag/v8.0.0. Done. Thanks!. Hello,\nwhere did you find this link? the correct plunkr for the demo (in the docs) is: https://plnkr.co/edit/WccVZSBM0rUgq2sXSUbe?p=preview. Anyway, I just checked, it's a bug in plunkr for the embeded views, all links like \"embed.plnkr.co\" seem to fail, you should use the edit/preview link instead (see above). yes, I've updated it :). If you want something synchronous, use instant, not get, but be aware that it can be undefined if translations have not been loaded yet.. Have you looked at the example app? https://github.com/ngx-translate/example\nIt includes a spec file that you can use as an example: https://github.com/ngx-translate/example/blob/master/src/app/app.component.spec.ts. thanks!. Good idea; thanks. Update the loader, the latest version uses HttpClient. The core has no\nreference to Http, only the loader does\nOn mer. 27 sept. 2017 \u00e0 21:08 Jo\u00e3o Carreira notifications@github.com\nwrote:\n\nI'm submitting a ... (check one with \"x\")\n[ ] bug report => check the FAQ and search github for a similar issue or PR before submitting\n[ ] support request => check the FAQ and search github for a similar issue before submitting\n[ X ] feature request\nCurrent behavior\nngx-translate currently only supports Http from '' but Angular as\ndeprecated Http and moved to HttpClient from '/http'.\nExpected/desired behavior\nMigrate all Http references to HttpClient\nWhat is the motivation / use case for changing the behavior?\nKeep updated with Angular newer version\n-\nngx-translate version: 5.0.0\n   -\nAngular version: 4.4.3\n   -\nBrowser: Chrome 61 (64 bits)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/685, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQMoorbl-4aNr0Wfvdmuysiz8wieDgFks5smpz1gaJpZM4PmQHk\n.\n. You need to switch to @ngx-translate/core because ng2-translate doesn't exist anymore.. can you change it to \"null\" and change the return type of the function from string to string | null please? thanks\nand add a note in the docs saying that if it doesn't find the lang, it will be null. Just being able to list the langs (for a \"change lang\" menu for example). What version are you using? This lib doesn't use \"OpaqueToken\" since v8. Change your dependency to @ngx-translate/core@^8.0.0. Hello, starting with angular 5 you need to register locale data for other locales than \"en\" (unless you use the cli), see: https://angular.io/guide/i18n#i18n-pipes. No there is no easier way for now. But you can make a function to register an array of locales. You'll still need to add the imports.. Follow up on this issue https://github.com/angular/angular/issues/20340 we are currently reviewing our options to come up with a solution.\nIf you could add your use case there, it'd help. Also fyi you can lazy load the locale files, see this issue: https://github.com/angular/angular/issues/20487. Are you using the latest version of the library? (v8.0.0). Then update to 8.0.0 and it'll be fixed.. If you take 5 mn to search the GitHub issues or the list of releases you'll see that you need to install version 8.0.0\nIt's like the 3rd or 4th issue that someone opens for that.... Can you create a minimal project that reproduces the error so that I can take a look at it?. Yes, I was actually thinking about updating the build system (this one is largely outdated), it would also improve the size of the lib.. ok, that's weird, but it's nice that you fixed it!. Did you try to complete it instead of just unsubscribing ? I know that it's not a fix, but it could be a workaround for now. Do you have any kind of reproduction? A repo, a plunkr, a stackblitz? What's your tsconfig, how do you load the lib, .... if you are using the cli, are you using a version >=1.5 ?. And if you think the ngx-translate doc isn't clear on the usage of shared modules, a PR would be nice! :-). go to https://github.com/ngx-translate/core/blob/master/README.md click the edit button at the top, edit the doc, and then it will offer you to create a fork & a pull request. yes please, a PR would be greatly appreciated!. There was a link to this editor on the main website, but not on the docs here, I added it. Try with useFactory: HttpLoaderFactory, instead of factory: (HttpLoaderFactory),, somebody reported that this was throwing an error in another issue.. are you using rxjs 5.5.2 ?. ngx translate v9+ requires Angular 5, as it is explained in the changelog and in the peers dependencies.. The last version compatible with Angular v4 should be v7.2.2.\n\nThe reason why I dropped support for version 4 is simple: this project is not paid and I don't want to bother with supporting multiple versions of the library. I'll keep it working with the current version of Angular.\nIf your company depends on the library and wants to keep it working with v4, you can either do a PR to add a new branch that supports the old versions, or fork the project and release an alternative version, or hire me to do it.. Since there was no code added between both versions (only packaging changes), it should be the same size or less (which was the point of the new build).\nI'm not sure how ionic builds the code, but with the cli there is a significant size reduction, and the umd bundles are a lot smaller too. No problem, if there was a real issue I would have been glad to know about it!. You can pass an array of strings instead of a single key. Thanks, can you fix this one as well please? https://github.com/ngx-translate/core/blob/master/lib/package.json#L20. thanks!. I changed it in the readme not long ago, but forgot the github header. Thanks for the reminder.. done. I don't have any control over this. I guess that It'll be updated at the next release.. I can just add the i18n selector to the existing directive, or I can try to add a new directive that mimics the behavior of angular i18n (meaning that you would use the same syntax to declare the ids), like i18n=\"@@id\".\nThat would probably be better to help with the transition.\nNot sure about how you would use parameter though, because ngx-translate is a bit different right now, it cannot use existing interpolations inside of your text. If I could add the support for that, it would make the transition even better. This is an issue with angular universal I think, they haven't implemented the state transfer yet (with rehydration), which means that when the app bootstraps it will do all the work on top of the existing DOM.\nOnce the state transfer exists, the app should start already bootstrapped and you shouldn't see this glitch.\nA few things that you can try to improve that: use the TransferHttpCacheModule to have an immediate loading of the json files (if you use the http loader) https://github.com/angular/universal/tree/master/modules/common\nTry to implement something like ngx-cache: https://github.com/fulls1z3/ngx-cache I haven't tested it myself, but it seems to do the state transfer. Apparently the state transfer already exists: https://angular.io/api/platform-browser/TransferState\nBut the dom hydration not yet, you can follow the status here: https://github.com/angular/angular/issues/13446. you can probably use the state transfer to transfer the state of ngx translate using getTranslation / setTranslation. That's nice! thanks!. plunkr has issues with its server today, resulting in 503 errors... it should hopefully be resolved soon. @splincode I'd like to use stackblitz, but they don't support loading locale files yet (files that come from the project), which means that I can't make a good demo that use the http loader...\nThat being said I've updated the plunkr this morning, and now it works. Use https://plnkr.co/edit/01UjWY3TKfP6pgwXKuEa?p=preview. Are you trying to import from @ngx-translate/core/src/translate.store instead of @ngx-translate/core ?. That's not the good solution. The solution is to import from @ngx-translate/core instead, everything is exported from there. The other files are just typescript definition files, that's why it doesn't work.. Hmm I just checked and the store is not exported in index.ts, that's why. But you shouldn't need to use it, why do you want to import it?. Probably to clean it, I'm not sure actually, I took that function in the AngularJS codebase :D. Thanks. Hello, thanks for the PR but I don't want to add more dependencies to the library. If there's an issue with ngx-translate-messageformat-compiler it should be fixed in that library, not core.\nI'm sorry to close this, since you put a lot of efforts into this, but I've got to makes choices.. Hmm ok, sounds fair. Can you do that then?. Let's merge this, and see if people start to yell :D. The mistake is to use v7.2.2. This lib is compatible with Angular 5 starting from v8.0.0. It's available, and yes you need to create a custom one, there is no handler by default.. Hu, how did it stay like this for so long? Thanks!. Hello, sorry but a javascript library will never edit a file on your computer/server (unless you're using electron or something like that).\nEdit the json file yourself instead of using setTranslation.. If you remove the take(1) you'll run into memory leaks, and you'll have multiple loading translations observables in memory, triggering multiple times because there is no unsubscribe.. Agreed, but it would be a super breaking change, not sure how we could do that change smoothly. You need to use [innerHTML] to bind html to elements. But it will only work with regular html. There is no \"compile\" function in Angular right now, so it will not work with directives, components and pipes.\nThis might change is such a compile function was to be available in the framework.. It works fine for me, I just checked, are you using an alternate registry?\nAnd it's listed on npm's site: https://www.npmjs.com/package/@ngx-translate/core. Solution 1 is not \"ditching it\", just making sure it still runs on the current Angular and merging PRs that seem interesting or fix bugs. That's how it's been working for the past year.. This is not an option no.. > licensing a Pipe and a Service is a bit too much\nIf you think that it's the only thing that this library offers, sure. Not counting the time it takes to work on issues, edge cases and such. The time it took to research stuff, to create the library, bundle it, distribute it. The time it takes to write the tests, the plugins, to maintain the website, to write the documentation, the examples and to reply to people asking for help.\nAnd my offering was more than just what exists right now, it was helpers for tests, better docs, better examples, taking care of the existing bugs, probably creating a forum for support (because github issues is not ideal for that), adding new functionalities, new tooling, and premium support.\nIf the license was for example 500$, how much time do you think that writing that library + its ecosystem of plugins would take you? Only a day? Maybe a week? How much are you paid for your job? If you work in the US, probably at least 500$/day.\nFor me that's a cheap bargain, you're getting the work done, and support if needed, and in exchange of a small fee you get to focus on the real value of your business instead of spending time reinventing the wheel.\nThe bugs that made you \"loose so much time\" could have been resolved by me instead of your team.. Thanks. I'm not against taking some other maintainers, but from experience people start \"playing\" maintainer but give up really fast when they see the amount of work for no reward.\nIf anyone is interested, let me know and I'll add you to the project.. I'll keep it alive (updating for new versions of Angular) since it'll still be the only way to change the language without reloading the app, and also because a lot of people who are using it probably don't want to refactor their code to replace that lib as long as it works for them.. it's not in 6.x, it'll be with ivy (v7). it's on the roadmap yes. > Is it planned to support different file types or is it still \"up for internal discussion\" like mentioned on of their github issues\nWe won't be adding new file types, but the API will probably be open with the big refactor for ivy, meaning that anyone can write a new parser and use it with Angular i18n (I say probably because we aren't at that part in the refactor yet, and I don't have the final vote on the question). The extraction won't be supported for new formats, but that's also something that can be written externally. I'll try to push for an open API there also because honestly I think that people prefer to be able to do things, even if we do breaking changes from time to time instead of locking everything up.\n\nIs it planned to support loading translation files async over http\n\nyes, the loading part should be let to the user's appreciation (bundle, http, ...), the important thing is that you will need tp have the translations loaded when the app bootstraps\n\nI just have the feeling it does not have a high priority on their roadmap\n\nI agree, Google has its own solution internally (closure) and that's why it's not very important for them... We have limited resources and clearly this is not the top priority.. For one main reason: it's integrated into the framework and it's a lot more efficient (I know the codebase of both, and there's no comparison).\nBut if ngx translate works for you, then it's perfect, don't change something that works. But there are limitations (like lazy loading per module) that will most likely not be fixed.. @fetis my hope is that we'll be able to use any format with angular runtime i18n (with ivy) by using a custom formatter lib. If I can make it happen the way I want, then I'll write a JSON formatter lib.. Yes to both.\nThe team leads had a meeting yesterday to try to accelerate things up by pulling all our resources (including the cli and material teams) onto ivy until it gets released because we've deviated a lot from our initial estimate (which was to have a beta last summer, during the v7 beta) and it's the thing that everyone is waiting for right now (inside and outside google).\nIt's the item named \"Ivy Focus Plan\" that you can see on https://docs.google.com/document/d/1rC5dz7AkCZP813daT_bccbS-20OLmXgBVi50CSKx148/pub . You can probably use different providers for each so that they use different configs for the loader (a different path).\nYou should probably use isolate: true for each instance so that it stays independent. hmm it might be complicated then, but you just said:\n\nBy the way, I'm not using Lazy Loaded modules at this stage yet.. yes, it's always easier to do this kind of things if you're not lazy loading\nwhen you lazy load, you create a new injector and that complicates things a lot. no, just a different config that will use different parameters in each module. hopefully yes :). you probably need to initiate the service in bundle1/2/3 by calling use: https://github.com/ngx-translate/core#2-init-the-translateservice-for-your-application. sorry, I meant in module B. Ah yes that'd be nice please!. Fixed, thanks!. Actually it just need to support rxjs 5.6+, there's a document coming up soon that explains that.\nI'll make the update once ngpackagr is updated to support the new Angular package format, it will probably be updated this weekend. Version 10.0.0 has been released with support for Angular 6 and RxJS 6, can you try and tell me if it works for you?. What versions of angular and ngx translate are you using?. Version 10 is only compatible with angular 6 and rxjs 6, as explained in the changelog and the readme.. @danielsogl can you take a look at the new ionic example repository to check if everything works fine please? https://github.com/ngx-translate/ionic-example. I think that keeping the example separated in another repository is better for now, it means that we can easily sync it with stackblitz and update it independently.\nI might reorganize stuff once the angular cli v6 is released with official library monorepo support :). Hello, it's simply because version 10 is only compatible with Angular v6. Use version 9.x with Angular v5. Yes @Jamaks is right.. As answered in like 5 or 6 other similar issues, and explained in the readme and the changelog: V10 is not compatible with Angular 5, only 6+.. Xplat will generate a CLI project that includes nativescript with ngx-translate, you could check it out: https://nstudio.io/xplat/. There are multiple issues dealing with the way to setup the path to load the assets with CLI projects, a quick search should be enough for you to find the solution.. You can write your own loader for that, copy https://github.com/ngx-translate/http-loader/blob/master/lib/src/http-loader.ts and change it to make it read yaml (you'll probably need to import a library that understand yaml).. Only ngx translate v10 supports rxjs 6, and it's for angular 6, there is no release for v5 and rxjs 6, sorry.. If you want any help with your issue, you need to give more details. You haven't even taken the time to fill the template message correctly.. Do you see the translation files being loaded in the network tab of your browser?. Can you create a repro on stackblitz or github please? It's hard to see what's going on without that.... Ok, here is the code working: https://stackblitz.com/edit/github-kk1mud-zkq6zp?file=src%2Fapp%2Fshared%2Fshared.module.ts\nWhat I changed is that I moved the initialization of the lib to the root module (hence the name forRoot), and then use the SharedModule to share the TranslateModule, as explained in the documentation: https://github.com/ngx-translate/core#sharedmodule. All changes are documented here: https://github.com/ngx-translate/core/releases. yes. Don't use the last version of ngx translate if you're still using angular 5, as explained in the compatibility table: https://github.com/ngx-translate/core#installation\nuse version 9.x. You can use setTranslation to add translations manually without using a loader, the loader will not be called because it'll detect those translations as loaded\nhttps://github.com/ngx-translate/core#3-define-the-translations\n\nin your code, just require the json translations and they will be bundled by webpack. The idea behind provideIn is that you don't define the service in your module, but when you reference it in one of your components it has been automatically provided. It means that if you never import that service, it will be removed from your bundle (it will be tree-shaken away).\nIn our case we need some configuration, and you need to import the TranslateModule and call forRoot or forChild which will make the configuration for you: https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/public_api.ts#L45\nIf I used provideIn: 'root', I could remove the TranslateService from those methods, but I don't see the point, it won't change anything for you.\nBesides, some people don't want to provide the service in root, sometimes they want to use it only in a different module, changing this would force that service to be provided in root.. I'm sorry but you have to provide a reproduction, or at least an example of what is not working for you. You description doesn't really help. True, would mind making a PR for that?. Awesome, thanks! Any chance you could do that for https://github.com/ngx-translate/http-loader as well? :). that's a great PR, thanks!. Available in 11.0.1. Not sure what's the issue. I updated the example on stackblitz to check and everything works fine: https://stackblitz.com/github/ngx-translate/example?file=package.json. thanks!. That looks nice! I don't use visual studio code, so I'm probably not the best one to give you feedback :)\nDo you want to make a PR to add a link to it in the README?. Thanks!. yeah the PR is old and a lot of things have changed and need to be updated :)\n. Could you change it to: \"If you use a custom TranslateLoader and use AoT compiling or Ionic 2\" please ? Thanks\n. change @returns {any} to @returns string\n. change @returns {any} to @returns string\n. I'd rather keep typeof window === 'undefined' because undefined can be defined (yeah, I know :D)\n. this should probably be removed ;-)\n. Hmm not sure about this ? Why did you need to move the tests to the source folder ?\n. Do I really need npm-run-all ? You don't seem to use it, and it's probably a dependency of npm-submodules if your lib needs it ?\n. Oh wait, this is because you added a new package.json file in the src folder ?\n. sure I'm gonna add ng-translate for now, but all of this will be renamed to ng-i18n once the name of the lib changes (soon !). Actually I'll add ng2-translate. Changing the default lang doesn't mean that we're changing the current lang, so it shouldn't trigger a checkNodes. Same thing here, the default lang doesn't mean that it's the current lang. ok then it should call checkNodes without the translations argument, so that it tries to get the values from the current lang and fallback if necessary. Yeah there's a prob for the directive, the tests don't wait for the DOM change for some reason, it works but the test fails. It might have to do with the fact that I change the DOM manually (bad!), I should use the renderer maybe. Yes, you can do that, I'll take a look at that problem when I have the time, because we probably need a better dom management to support nativescript and such. _this is undefined, that's why travis fails. This is a problem, it will define interpolateParams even when there are no params. Why do you need the lang in the custom plural parser ?\nAlso that's the reason why the tests fail. ",
    "valorkin": "@ocombe definitions is fine, I am testing locally npm link + npm install ../ng2-translate\nAs for now, you can not avoid exporting Observable, or you will have:\nbash\nsrc/translate.service.ts(64,28): error TS4055: Return type of public method from exported class has or is using private name 'Observable'.\nsrc/translate.service.ts(85,39): error TS4055: Return type of public method from exported class has or is using private name 'Observable'.\nsrc/translate.service.ts(103,23): error TS4055: Return type of public method from exported class has or is using private name 'Observable'.\n. Did't you forgot to npm link before npm i path/to/ng2-translate from other project?\nbut thing I missed indeed that you are using .d.ts hack in index.d.ts\njs\ndeclare module 'ng2-translate' {\n    import index = require(\"index\");\n    export = index;\n}\n. sec, let me try one thing\n. can you try now?\n. tsc version? I am currently at home on mac, and it works differently then at work in linux\nI have 1.6.2\n. windows >.< WHY? :)\nI have started to writing bash script:)\nI can make docker file for test :)\n. yes please, link me :)\n. node version btw?\n. can not be! gulp-cli doesn't work with node 4 oO\nhttps://github.com/gulpjs/gulp-cli/issues/9\n. ok, I got it\nyou actually compiling node_modules/*/.ts files,\nrecompiling angular2 and all other dependencies may be not the best thing to do\n\n. don't pay attention to duplicates too much\nnpm i ../ng2-translate\ntsd link\ngulp dev\nopen in browser :)\n. windows, what can I say\nlinux\\osx works good >.<\n. you can try to do it docker, I am not lying :)\nand I will check on windows later\nbut yes, we should check ng2 dist\n. @robwormald why sorry? it is awesome if it will work! :)\n. closed in favour of #2 \n. @ocombe  concurrence - no, help - yes\n@robwormald really appreciate your help :)\n. set prepublish back, it works\nit is something wrong with windows tsc or npm\nand in general it works :)\n. Awesome :+1: \n. BTW A lot of files can be removed from project\nDid not touched them for now, let us chat first \n. Root tsconfig can be removed\n. so... how to use it\n1. npm run build (runs ngm build -p src) - and check dist folder\nyou have aot compiled version + umd bundles\n2. npm run build -- -w (or ngm build -p src -w) \n3. ngm publish -p src will run test, e2e, prepublish build and publish...\n. not necessary, I can revert this. just dir structure I get used to\n. need to revert all this changes\n. yep, this is safety\nto not accidentally publish root package.json\n. this is usage of npm-run-all nice cross platform way to run npm scripts in series or parallel\nI had a question about git-cz how to use it\n. https://github.com/ocombe/ng2-translate/pull/326/files/b518e2f0d9e0f859f6d149de2b14ce67d0b61304#r88643127\n. here is npm run all usage\n. ",
    "robwormald": "new resolution stuff works like this:\n- forget about ///ref style stuff\n- forget about tsd \n- compile your .ts source to commonsJS with the --declaration compiler option\n- you want your .d.ts files to live in parallel to your .js files. \neither:\n- reference typings: \"your/lib.d.ts\" in package.json\n- include an index.d.ts file in the published npm distro.\nangular2 is currently shipping the necessary ambient modules (es6-shim and whatnot) and support for that should improve in the next couple of TS releases. \nusers can then consume your library by:\ntypescript\n//this will check in package.json, then for index.d.ts\nimport {AwesomeStuff} from 'ng2-translate'\nor if i want to pull out something deeper\ntypescript\n//this will look for a d.ts file at ng2-translate/deep/thoughts.d.ts\nimport {DeepThoughts} from 'ng2-translate/deep/thoughts`\nand that should be all that's required :tada: \n. see #2 (sorry @valorkin, but TSD is out!) \nre: Observable type - that's my goal this week, to get that fixed before AngularConnect, so i would avoid messing with it too much - it'll be an export from angular2 you can just use. \n. ",
    "meriturva": "Actually the config is quite simple:\n<script>\n        System.config({\n            packages: {\n                'app': { defaultExtension: 'js' }\n            }\n      });\n      System.import('app/app');\n    </script>\nWhat about have a single bundle?\n. ",
    "wokeGit": "Hello, \nI have similar issue. I'm using SystemJS and gulp to build app:\njavascript\n<script>\n        System.config({\n            packages: {\n                app: {\n                    format: 'register',\n                    defaultExtension: 'js'\n                }\n            }\n        });\n        System.import('app/boot').then(null, console.error.bind(console));\n</script>\nI have this error:\n\nUncaught ReferenceError: require is not defined\nGET http://localhost:4000/ng2-translate/ng2-translate 404 (Not Found)\nError: XHR error (404 Not Found) loading http://localhost:4000/ng2-translate/ng2-translate(\u2026)\nGET http://localhost:4000/ng2-translate/ng2-translate 404 (Not Found)\n\nWhat do you think?\n. Thank you for fast respond.\nUnfortunately this not fixed my problem, SystemJS doesn't recognize ng2-translate package when I'm concatenating all libraries to common file. I tried to copy ng2-translate folder to my build version and now not recognize rxjs. So I'm also copying rxjs folder to build version and now works fine. I need to find reason this situation. \nI have one more question, do you base on any other library to translation from angular1 like: angular-translate or something?\n. Yes I know rxjs is required, I'm using it in other components but ng2-translate doesn't recognize it and I have no idea why. Probably there is something wrong with my SystemJS config.\n. Yes I based on them, but you're using node_modules libraries directly and in System.config you are maping ng2-translate and rxjs. I use different approach, I'm concatenate all node_module libraries to one file and load them in one request. And then ng2-translate is not loaded by SystemJS.\nBtw thank you for your help :)\n. ",
    "camwallin": "I may be seeing a similar issue with my deployment of the module, although I am able to reference the ng2-translate files correctly. The issue arises after the package is deployed and referenced correctly, but the following errors are observed:\nGET http://localhost:7000/Application_1/dist/dev/rxjs/add/observable/fromArray.js 404 (Not Found)\nGET http://localhost:7000/Application_1/dist/dev/rxjs/add/operator/share.js 404 (Not Found)\nError: XHR error (404 Not Found) loading http://localhost:7000/Application_1/dist/dev/rxjs/add/observable/fromArray.js(\u2026)  -> SystemJS module load failure\nI have a bit of a strange outlier case where my project looks like this:\nRoot/\n---Application_1/\n------dist/\n---------dev/\n------------app/\n------------boot.js\n------------Index.html\n------app/\n---------Index.html\n---------boot.ts\nnode_modules/\nNode is hosting from the root directory, so the URL to browse my dist is http://localhost:7000/Application_1/dist/dev. Angular 2 is loading perfectly, as is Polymer, but for some reason as soon as I add ng2-translate, it can find the root files but won't load those components of RXJS. \nSorry for the bother, i18n is a major aspect of our software so we need to find a viable solution in Angular 2.\n. My packages are as follows:\n\"angular2\": \"2.0.0-beta.2\"\n\"rxjs\": \"5.0.0-beta.0\"\nI (believe) I can load RxJS components from within the application, I have the angular2-seed working correctly, and have my own custom components all being loaded properly.\n. Works perfectly! Much obliged, we're still getting used to SystemJS\n. ",
    "ignaciolarranaga": "I think this might be a solution:\nSystem.config({\n    packages: {\n        app: {\n            format: 'register',\n            defaultExtension: 'js'\n        },\n        'ng2-translate': {'defaultExtension': 'js'},\n        'rxjs': {'defaultExtension': 'js'}\n    },\n    map: {\n        ng2-translate': 'node_modules/ng2-translate',\n        'rxjs': 'node_modules/rxjs'\n    }\n});\n. @ocombe sure, give me a few hours to publish the package on npm and will get back to you.\nDo you want me to include the static loader as it is now on the library for the future ?. And don't you prefer a pull request with the class to http-loader ?, might have sense ? (I mean instead of a separate plugin on npm). sure, will get back to you as soon as I get npm plugin ready.. @ocombe I did publish it on npm, here is the link: https://www.npmjs.com/package/ng2-translate-localize\nThanks for the advice, comments and suggestions are welcome.. ",
    "robhicks": "Here's a link to my fork: https://github.com/robhicks/ng2-play\n. ",
    "samvloeberghs": "whoot, thx for the superspeedy reply! :+1: I'll get to it \n. works like a charm! \n. I'm adding it as an extension to the starterkit now :)\n. Learning too much too quick today, thx for headsup\n. @ocombe ,are you still in favor of waiting for the official i18n or do you feel things have changed?\n. :+1: \n. @gastonmq as @ocombe said it might have to do with how you save the file.\nTry saving the file as utf-8 enconding\n. ",
    "paulsonnentag": "It's more of a personal preference. In our current 1.x App we always use the translate directive. \n. ",
    "gaetancollaud": "Sorry to dig up this issue, but I find that a component could be a good thing. There is less to write and your html code is more clear.\nWithout component:\nhtml\n<div>{{'just.another.property'|translate}}</div>\n<div [innerHTML]=\"just.another.property | translate\"></div>\nWith component:\nhtml\n<div translate=\"just.another.property\"></div>\nI already coded a dummy implementation for my personal use : https://gist.github.com/gaetancollaud/777f519d551cc35ce60073e902e17a7e\nI can make a PR if you want ? \nPossible improvements: \n- support language change\n- support parameters\n. Sorry, I didn't check the pull request lists. Good to here that.\n. I have the same issue.\nFor the moment, the work around of @KevensPronovost works : \njavascript\nSystem.register('rxjs/add/observable/of', [], function(dummy) { return { setters: [], execute: function() {dummy('default', null); }}});\n. I confirm the issue is solved. I just tested. You can close this issue.\n. Wow, I wasn't expected a response so quickly. Thanks for sharing your code ! In the meantime I find a way to do it directly with gulp. This is even better because the transformation is done during the compilation.\n``` javascript\nvar props2json = require('gulp-props2json');\nvar rename = require('gulp-rename');\ngulp.task('copy:resources', [], function () {\n    return gulp.src('./src/main/resources/lang/*/.properties')\n        .pipe(props2json())\n        .pipe(rename(function (path) {\n            path.basename = path.basename.replace('language_', '');\n        }))\n        .pipe(gulp.dest('src/main/webapp/i18n/'));\n```\nRegardless this two workarounds. Don't you think it could be great to have a PropertiesTranslateLoader directly embedded in ng2-translate ? Since properties files are widely used in backend and standalone applications. \n. ",
    "acivan": "Hi, everything is ok when I switch back to 1.2.4. But it does not work with 1.2.5. HTTP_PROVIDERS is loaded in bootstrap()\n. Yes,I use angular 2 beta 1 .\n. I know the problem \uff0cBecause I will useStaticFilesLoader written in the front.\nThanks for your answer.\n. @SamVerschueren  \ud83d\udc4d . ",
    "NisStrom": "Should be fixed now\n. It is OK now, do i need to close the pull request?\n. ",
    "webprofusion-chrisc": ":+1: I'm currently looking to rebuild an existing app in Ionic2/Angular2 - our translations are created using https://webtranslateit.com/en and the resulting json looks like this: https://github.com/openchargemap/ocm-system/blob/master/Localisation/src/OCM_UI_LocalisationResources.it.json\nWhen the translation for the selected language is null, we fallback (currently to the default text in the app). It would also be great to specify a fallback language in config. So if your app is in English but is mostly translated to Japanese then you could fallback to English.\n. I've had similar trouble, I think the package needs to reference ^5.0.0-beta.2 or ~5.0.0? Otherwise it has a hard dependency on the older beta version.\n. Hi, further to this, for anyone looking to translate tabs etc. Remember to include a reference to the TranslateService in the Tab component:\ntypescript\n@Component({\n    templateUrl: 'build/pages/tabs/tabs.html',\n    pipes: [TranslatePipe]\n})\nThen in your tab you need one-way binding to get the expression to work:\nhtml\n    <ion-tab [root]=\"tabProfile\" [tabTitle]=\"'ocm.navigation.profile.sectionTitle'|translate\" tabIcon=\"person\"></ion-tab>\n. That would be good! However if the translation key is not yet present in the default translation file that outputs as example.translation.key\n. ",
    "powercoder23": "Thank you @ocombe ! you are doing a great job :+1: \n. ",
    "WillGeller": "Still having issues with attempting to use a nested json source for translations.\n<div>{{ 'helloWorld.sayHello' | translate }}</div>\ndisplays [Object object] rather then the translation value . ",
    "lordgreg": "Hi @ocombe,\nsadly, plunker doesn't have the support for alpha/beta version of ionic2. That's why I've created a simple project for you here. To install:\n1. git clone\n2. npm install -g ionic@beta gulp\n3. npm install\n4. ionic serve\n. Firstly, thank you that you took your time and look up in this issue. As you said 1.3.1 was working. However, I thought it has something to do with angular2 versions. Thank you for replying this; hopefully, we'll get new version of Ionic2 out soon with the beta1 dependency of Angular2.\nBest regards! :+1: \n. Translate service will be taken out of Ionic2 (discussed with Mike Hartington from Ionic team yesterday). And, as far as I can tell... your ng2-translate is on its way to get the success of Pascal Precht's Translate for Angular1. Will move to 1.2.4 as per your advice :8ball: \n. @ocombe thank you. it works. :+1: \nYou're doing awesome job, keep up the good work! :)\n. @mebibou why setting breakpoints in webpack created bundle? Enable sourcemaps and make breakpoints in original files. See the ticket here\n. I am aware of that... that's why I'm trying to load my translation config part in @App constructor, and the translate.instant would I the call in @Page controllers/constructor/functions.\nBut... wouldn't something like this be enough to make this work?\ngetInstant(key) {\n    return this.translate.get(key).subscribe(data => {return data});\n  }\n. ",
    "mebibou": "@lordgreg this is not directly related to this problem, but I'm not sure if I should log a bug for this and maybe you already have the solution: I also use ng2-translate in my ionic2 app, and since then the file translate.parser.ts gets picked up by ionic and appears under build/js in Chrome debbuger, and basically it makes debugging impossible because somehow every breakpoint that I try to set on app.bundle.js gives me a breakpoint at the end of the translate.parser.ts file, and I can't figure out why\n. @lordgreg oh thanks never saw this one :)\n. :+1: for this, I'm using ng2-translate in an Ionic app and often I need to get a translation for some services that expect to have a string and not an observable.\n. FYI, I created my own class to do this:\n```\nimport {Injectable} from 'angular2/core';\nimport {Parser, TranslateService} from 'ng2-translate/ng2-translate';\n@Injectable()\nexport class TranslationService {\n  private parser: Parser = new Parser();\nconstructor(public translateService: TranslateService) {}\npublic get(key: string|Array, interpolateParams?: Object): string {\n    if (!key) {\n      throw new Error('Parameter \"key\" required');\n    }\nvar getParsedResult = (translations: any, key: any) => {\n  var res: string;\n\n  if (key instanceof Array) {\n    let result: any = {};\n    for (var k of key) {\n        result[k] = getParsedResult(translations, k);\n    }\n    return result;\n  }\n\n  if (translations) {\n    res = this.parser.interpolate(translations[key], interpolateParams);\n  }\n\n  if (typeof res === 'undefined' && this.translateService.defaultLang && this.translateService.defaultLang !== this.translateService.currentLang) {\n    let translations: any = this.parser.flattenObject(this.translateService.translations[this.translateService.defaultLang]);\n    res = this.parser.interpolate(translations[key], interpolateParams);\n  }\n\n  if (!res && this.translateService.missingTranslationHandler) {\n    this.translateService.missingTranslationHandler.handle(key);\n  }\n\n  return res || key;\n};\n\nlet translations: any;\n\nif (this.translateService.translations[this.translateService.currentLang]) {\n  translations = this.parser.flattenObject(this.translateService.translations[this.translateService.currentLang]);\n}\n\nreturn getParsedResult(translations, key);\n\n}\n}\n``\n. awesome thanks\n. @ocombe I think there should be aCHANGELOGfor that, difficult to upgrade version. Also, do you know how to update when usingionic2`? I tried doing:\nlet injector = Injector.resolveAndCreate([\n  HTTP_PROVIDERS,\n  provide(TranslateLoader, {\n    useFactory: (http: Http) => new TranslateStaticLoader(http, 'data/locales', '.json'),\n    deps: [Http]\n  }),\n  TranslateService\n]);\nthis.translate = injector.get(TranslateService);\nthis.translate.use('en');\nIn the @App, but then I get a No provider for TranslateLoader! error everywhere I try to use the TranslateService in different components or pages\n. oh yeah missed the releases part\nThanks for the code, it works :)\n. @ocombe is forChild still supposed to work in 8.0.0? I tried to use it with a different loader than the one in forRoot, and using isolate: true and isolate: false, but it doesn't load the translations at all. I think the idea of having children load their own translations but listening to lang change on the parent is crucial when using modules. @neolanders your answer does not relate to the question, you are posting the solution explained in the README for SharedModule.\nI'm trying to create a module on top of the TranslateModule where each module could put in his translations, but so far not successful. @Tuizi your solution is a workaround, since you are basically creating TranslateModule in every lazy loaded module, and you need something in between to keep the selected lang synced. The problem we are talking about is that it should work without this workaround that we all have to do for now. @Tuizi no I'm saying that's not the point of the issue here. We want to have lazy loading modules being in sync with the master modules, without having to push the changes of lang from master to slave everytime. It should basically work without needing to use isolate: true and adding some code (your this.store.dispatch and all). I wouldn't mind having to create different translateLoader per module, just without using isolate: true should work, something along:\n```\n// app.module.ts\nexport function HttpLoaderFactory(http: Http) {\n   return new TranslateHttpLoader(http, './assets/i18n/app/', '.json');\n}\n@NgModule({\n    imports: [\n      TranslateModule.forChild({\n        loader: {\n          provide: TranslateLoader,\n           useFactory: HttpLoaderFactory,\n           deps: [Http]\n        }\n     })\n   ]\n})\nexport class AppModule {}\n// in a lazy-loaded page's module\n// pages/home/page.module.ts\nexport function HttpLoaderFactory(http: Http) {\n   return new TranslateHttpLoader(http, './assets/i18n/home/', '.json');\n}\n@NgModule({\n    imports: [\n      TranslateModule.forChild({\n        loader: {\n          provide: TranslateLoader,\n           useFactory: HttpLoaderFactory,\n           deps: [Http]\n        }\n     })\n   ]\n})\nexport class HomePageModule {}\n```. @Tuizi taken from the README:\n\nOtherwise, by default, it will share its data with other instances of the service (but you can still use a different loader/compiler/parser/handler even if you don't isolate the service).\n\nI don't think that is true, when I don't use isolate: true, my custom translate loader (like in example above) does not load the translation at all, nothing happens. I think this would solve #602 , #444 and #425 so seems like an important fix, could this be reviewed and merged?. @ocombe I don't know if it works, but the idea of not having to sync the children modules with the root one is clearly a good one. As said in my comment on another PR, the current forChild doesn't work unless we call use(lang) in every children, then sync lang changes between root and children. It's very hard to maintain and doesn't work out of the box. Actually, a more generic question which comes to the same point: how to use in a \"standalone\" module? let's say I create a new UX Component and I want to provide the user built-in translations for the buttons, how can I use ngx-translate to do this? I could use isolate: true but then the language selected by the user has to be propagated down to the module or it won't work. ",
    "Giegling": "I have same problem just like you @mebibou and that ticket didn't help me @lordgreg . Do you guys have any solution? Here's an example. Thanks\n. ",
    "massimo-pacher-tw": "Mmh, I had some problem with the syntax I guess, cause I've tried to pass in the reference but it didn't work! I got it working finally, thanks and sorry for the issue!\n. BTW, I think I've stupidly followed the syntax example with the quotes for the literal!Not sure if it's worth adding a line. \nThanks again, M.\n. ",
    "jkuri": "Sure, there's need to be added systemjs-builder dev dependency and this script and run it in npm prepublish so it exports script in bundles/ directory where ng install looks for it. Otherwise this commit will do it :+1: \nBtw, good job @ocombe.\n. @ocombe you were right about the bundle option http://blogs.msdn.com/b/typescript/archive/2016/01/28/announcing-typescript-1-8-beta.aspx :+1: nice\n. tsc -d creates correlated .d.ts files.\n. Sorry, I didn't noticed. I removed it.\n. Okay, thanks. Please ping me when (if) you will publish this to npm. \n. Thanks. Will test it right away. Did you use angular-cli master and linked correctly? npm package is a bit outdated at the moment.\n. Please remove bundles/ from .gitignore, push and republish, that's what I did in one of my components today so the bundles/ and correlated script is found by ember-cli npm script. \nNot sure why but when you install with npm install ng2-translate the bundles/ is created correctly, but when use ember-cli npm script for installing the package the bundles/ not comes with it and then package is not recognized as authentic. \nIf you can do that I can test it right away. \nBtw, I re-checked this repository now and I think this is completely compatible with Angular CLI ng install command, but cannot be sure until I see it working.\n. Note for using angular-cli master:\nshell\ngit clone https://github.com/angular/angular-cli.git\ncd angular-cli\nnpm install\nnpm link\nshell\nng new test-project\ncd test-project\nnpm link angular-cli\nng install ng2-translate\nHope this helps.\n. Please try removing bundles/ from .gitignore, then commit and push and then\nrepublish to npm as 1.6.2. I have exact case today and it worked for me.\nOn Sunday, 7 February 2016, Olivier Combe notifications@github.com wrote:\n\nMaybe the problem is that I export my modules as commonjs and the bundle\nis systemjs ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/pull/30#issuecomment-181102940.\n. Then you forgot to git add, not sure how ember-clis npm script is connecting to github or npm registry, but you need to have bundles/ directory and correlated ng2-translate.js in your repository. That worked for me. Also users will have direct access to your bundle.\n. I was just debugging this and found out the same...\n. This is the entry point and should be included in order to work, lib-install.js parses what library provides from this file.\n. Yes, you are right. I will make a fix asap. I never encountered on a problem that main .ts file not being included. Until then, can you just try if it's working with that file included?\n. @ocombe thanks. I just tested it and I can confirm this package is now 100% compatible. \n\ntypescript\nimport {TranslateService} from 'ng2-translate';\nthis is right, please look at https://github.com/ocombe/ng2-translate/blob/master/bundles/ng2-translate.js#L275\nAlso, provider gets injected properly in my case:\n``` typescript\nimport {TranslateService} from 'ng2-translate';\nbootstrap(ProjectApp, [\n  ROUTER_PROVIDERS, \n  TranslateService\n]);\n```\nThanks again. I will notify @NathanWalker who is responsible for documentation about 3rd party libraries to add this library as a real world example on angular-cli docs if you don't mind?\n. Hi. I will make a fix on the angular-cli to work with .d.ts files this weekend.\n. ",
    "NathanWalker": "They were to npm install successfully. Beta.0 and .1 must be locked to reflect-metadata 0.1.2 only. :/\n. @ocombe I updated this PR to fix https://github.com/ocombe/ng2-translate/issues/24\nPlease merge and release a new version when you can!! Pretty please, it's got me stuck at moment on something! :)\n. Thanks @ocombe for the merge and version bump! this fixed the issue I was running into! Hooray!!\n. If what we need is an Angular2 sanitizer to make this directive a reality, then I could make an Angular2 html sanitizer library based off this excellent one:\nhttps://github.com/google/caja/blob/master/src/com/google/caja/plugin/html-sanitizer.js\n?\nTry it out here:\nhttp://codepen.io/devilish/pen/aCJuH\nThere's also this alternative:\nhttps://github.com/punkave/sanitize-html\nIf everyone is in agreement that having one would solve this and then integrating such a library here would allow this PR to be merged, I could create this lib this week.\n. Be careful warning may suffice for time being. I think if a sanitizer is created, we could add a wiki here that described how to use the sanitizer with the library if desired. Maybe just take consideration in how this directive is implemented to allow easy plug/play with a 3rd party sanitizer :+1: \n. @ocombe Awesome! Not sure we do need the directive anymore. @sclausen I like the additional flexibility it adds but may add unneeded complexity at this point since OnPush is now possible?\n. @sclausen Yes! Once the issue with OnPush was solved for me, creating the sanitization library fell to bottom of my list though.\nHere we go though, just created a shell for the lib here:\nhttps://github.com/NathanWalker/ng2-sanitize\nInvited you to collab :+1: \nI'd like to move forward with either of these options for the core sanitizer, lemme know what you think:\nA. https://github.com/punkave/sanitize-html\nor...\nB. Port angular 1.x sanitizer to TypeScript and integrate: https://github.com/angular/angular.js/blob/master/src/ngSanitize/sanitize.js\n. Good to know for future ;) There ya' go!\n. Oh shoot. Ok yeah didn't know it triggered with PR names as well (was thinking only commits) ... \nfacepalm\nSry if that caused you any trouble!\n. Ok just saw the other issue (this is a dup): https://github.com/ocombe/ng2-translate/issues/33\n. Interesting. Thanks for checking! I'll see what I can find.\n. Turned out the root component only needed to use ChangeDetectionStrategy.Default. Every other component now uses OnPush and it works fine. Maybe this is to be expected, not sure, but it doesn't look like the root component can be OnPush; not that it needs to be, but seems like it wouldn't matter if whole tree is OnPush including root. Anyhow, solved. Thanks again.\n. This has cropped back up in the latest 2.2.2 release. I'm going to reopen and try to create a plunkr or repo demonstrating the issue later and will post back with a link so you can see.\nThe workaround does not work with latest release unfortunately.\n. I would be weary of this as this would not work in a native environment like NativeScript for instance. May be a way to let the Renderer handle this?\n. Maybe allow this to go, and then I could make a {N} plugin that would provide a native alternative to this directive that could be provided for at runtime.\nI wouldn't let it hold up a merge.\n. ",
    "byteSamurai": "Wow, U R fast!\nI tried here: https://github.com/fr3dm4n/ng2Quickstart-beta.0/commit/d2ecc22721106d93d440771756c96e21f2e14694\nBut the result is the same, it didnt help\n. UH, i mixed it up.\nI put the map at the wrong location and I had to add angular 2 to the map.\nhttps://github.com/fr3dm4n/ng2Quickstart-beta.0/commit/92e1fdf6e6a4126d151875ca3ae85a9568904c20\nThx for your help. One last Question: Why do i need a map now an before angular was found without one?\n. Ah, I see! So probably its worth to take a look at the SystemJS bundler...\nagain: Thx, have a nice day\n. ",
    "clevegomes": "Dear ocombe\nSystenJS is loading ng2-translate and rxjs files . But if i want to concat all files into one js files for production .How can i do that ? I tried gulp to concat all the files but it does not work . Can you  help me with this ? sorry i am new to system js and rxjs.\n. ",
    "ollwenjones": "Thanks for the library and the feedback\n. I'm fine with separate json files per module, actually prefer that.\nI ended up just using Http to load separate language files for each module's route, and adding definitions using TranslateService.set, so I could hook the loading of the language into a @CanActivate annotation, to prevent the UI loading and then updating.\nA custom loader wouldn't have helped me without also changing what happens inside the TranslateService.getTranslation to append key:values to the existing definitions for a particular language, or adding a method like getAndAppendTranslations. I would also need to add a way to check which modules' language files were already loaded so they wouldn't re-fetch every time that route was loaded.\nIt might be nice to encapsulate all that in this library, but I didn't fork/add it here because I'm not sure how common a use-case that would be?\n. Sounds good for closing/waiting to evaluate interest. There's a key difference in what I was trying to do, versus what this library seems tooled to handle already though, as illustrated in your comment about getLangs()\nThis library seems tooled to switch languages for a particular UI at runtime... which seems like kind of a strange use-case to me. I have no interest in changing language at runtime (maybe not even per deployment), but I do want to support code-splitting. (multiple entry-points for a given language.)\nI suspect that as web-pack code-splitting becomes more and more 'normal' use-case, this will come back up.\nThanks again for your time :+1: \n. makes sense to me\n. @nchutchind oh man... that was so long ago and in a private bitbucket repo. I had the PR out and was basically told \"let's wait until the official Angular 2 i18n is ready, so we only have to do this once.\"\nI can see if that branch is still alive and maybe make a snippet...\n. @nchutchind here is the gist:\nhttps://gist.github.com/ollwenjones/024c16e290637fd23205144f47bd300c\nWarning that that branch was abandoned like beta.3, so there's some workarounds in there you don't need.\n. my pleasure. good luck!\n. ",
    "nchutchind": "@ollwenjones If you have a repo somewhere with an example of what you did to split up language json files for async routes, I would love to have a look at it.\n. @ollwenjones Thank you for that. I was actually in the middle of writing a paragraph describing what I thought would be necessary and asking if I was close. With your gist I can see that I was in the right neighborhood, but it will help me nail it down.\nThank you.\n. ",
    "MartinMuzatko": "Thank you for the quick reply! Yes, I looked into the introduction and looked for it to find if I missed something in the imports.\nThank you!\n. Thanks a lot for the information @DanielSchuech.\nHowever, I think I found a bug then.\nI did a setup of the TranslateService wirthin my app.ts\nSetting up labels, etc.\nI can use the labels anywhere via TranslatePipe, but if I want to make use of the TranslateService in another component, none of the settings persist.\n``` typescript\nimport {Component} from 'angular2/core';\nimport {SubTaskSet, SubTask} from '../../model/index';\nimport {Dialog} from '../../services/index';\nimport {AUI_NG_DIRECTIVES} from '../aui/index';\nimport {FORM_DIRECTIVES} from 'angular2/common';\nimport {TranslatePipe, TranslateService} from 'ng2-translate/ng2-translate';\n@Component({\n    directives: [...AUI_NG_DIRECTIVES],\n    selector: 'editTaskSetDialog',\n    pipes: [TranslatePipe],\n    providers: [TranslateService],\n    template: require('./edit-task-set-dialog.component.html')\n})\nexport class EditTaskSetDialogComponent extends Dialog {\n    private taskSet: SubTaskSet;\n    private newSubTaskSummary: string;\nconstructor(private translate: TranslateService) {\n    super();\n    debugger;\n   console.log(translate); //no properties persist.\n}\n\ninitDialog(input: SubTaskSet) {\n    console.log(this.translate.get('Untitled'));\n    this.taskSet = input ? this.copyTaskSet(input) : new SubTaskSet(this.generateId(), 'Untitled');\n}\n\n}\n```\nBut the pipe works perfectly throughout all templates.\n. ",
    "DanielSchuech": "I\u00b4m not sure if you really have to do an enhancement here @ocombe \nI would think that is is more a problem of understanding how angular 2 works than how you have to use ng2-translate.\nIs it possible to setup the service once and use it in components and subcomponents?\nServices are singletons. They will be initialised once and every component that injects this service will get the same instance. Therefore you need to provide the service to your app. This can be done while the bootstrap process \njs\nbootstrap(AppComponent, [HeroService]);\nmore information about dependency injection here\nThe second way to provide a service is the hierarchical injector. There you can add a provider attribute to your component. Then you can inject your service in this component and lower level\njs\n@Component({\n  selector: 'hero-editor',\n  providers: [RestoreService],\n  ...\n})\nSo the service exists just once. When you configure it one times then it is configured at all places were you inject the service!\nput some of the snippets to a component or service:\nThe translate service needs to be configured before the usage. A service will be initialised when an component is loaded which injects the service. When you maybe inject your service on a very low level it could be too late and some of your translations will not be translated. So a service isn\u00b4t a good way to configure a TranslateService.\nThe service needs to be configured before the first usage of the translations(via pipe or service). So one opportunity would be to do it in your app component but you coud do it also on a lower level.\n. Yes ;)\n. This isn\u00b4t a bug. Thats just how angular 2 works.\nYou configured correctly the translateService in your app.ts. Thats the reason why your pipe is gone work. But on the EditTaskSetDialogComponent your are providing a new TranslateService again. You ve overwritten it through the hierarchical injector on the level of this component and every component with a lower level.\nJust provide the Service ones. You are doing this in the app.ts. So dont do this again on a lower component. Remove providers: [TranslateService], and it should work ;)\n. @ocombe I can just remember 3 commands(useStaticFilesLoader, setDefaultLanguage & use) to configure and i would say that they are essential to stay aplicable for different applications. Correct me if i miss somthing ;)\nIt is unclear if you have to use useStaticFilesLoader in conjunction with getTranslation.\ngetTranslation will deliver the translations of the given language with the current loader. There is currently just one loader available. That should be maybe written to the readme. So you have to use useStaticFilesLoader before you can access getTranslations. Otherwise you will get an error.\nIt is unclear which path is used for the useStaticFilesLoader. Relative to directory of execution? Relative to file? Absolute?\nIts an absoulte path. Here an example (from docu): \njs\nvar prefix = 'assets/i18n/';\nvar suffix = '.json';\ntranslate.useStaticFilesLoader(prefix, suffix);\nyour used lang: en\nGET /assets/i18n/en.json\n. Angular 2 want es6-promise v3.0.2 or higher while ng2-translate requries explicit version 3.0.2\nnpm doesn\u00b4t resolve the problem by itself. \ninstall es6-promise@~3.0.2 first:\nnpm i --save es6-promise@3.0.2\nand then install your app again\n. It doesn't solve my problem.\nI am going to answer the request with the following code\njs\nbackendResponses: string[] = [];\nbackend = injector.get(XHRBackend);\nbackend.connections.subscribe((connection: any) => {\n        connection.mockRespond(\n          new Response(new ResponseOptions({body: backendResponses[0]}))\n        );\n        backendResponses.splice(0, 1);\n      });\nSo the request will be answered directly. this.pending will be deleted immediately and undefined will be     returned in getTranslation. \nI cant do it your way to save the connections and and answering them at the end of the test. I need to nest 2 requests.\nWould there be a problem not to delete pending? I cant remember any problem.\n. Are you sure that routeConfig is available in the constructor. The documentation tells that routeConfig is an decorator. So my tsc displays an error if i try that.\nWhen you are loading the translation via the staticfileloader it isn't possible to get the translation without an observable. The request is async. So you need to wait for the response.\n. Yeah interesting ;) So if that works then it shouldn\u00b4t matter if the translatedKey is an observable or not. Or am I wrong?\nThe behavior of the site could may crazy. In the default routeConfig the current route given by the url does not exists. So the router would navigate to the default route. Then the observable would be executed. The new routes will be apllied and a renavigate will be done. So your now on the correct view. Maybe a little flash ;)\nAre you going to use the staticfilesloader? Because then i am really interesting if the instant translate would work. I can\u00b4t believe that at the moment ;)\n. With Observables you would need collect at first all your translation and call then the route config\n``` js\nlet login: Observable = translateService.get('/login');\nlet logout: Observable = translateService.get('/logout');\nlogin.combineLatest(logout).subscribe((translations: string[]): => {\n  router.config([ \n    {'path': translations[0], component:IndexCmp},\n    {'path': translations[1], component:IndexCmp2}\n  ])\n});\n```\n. I doesn\u00b4t think that the time when route.config is the problem. The constructor needs to be called before any other method otherwise there are missing dependencies and it wouldn\u00b4t be a constructor ^^.\nThe more interesting points is to get the translation in time. A file request via the staticfilesloader needs some time and you need to wait for the response. The other option is to collect the translations directly in the ts(js) file and set them via translateService.setTranslation. But this is not maintainable.\n. @apavillet I think the translation file hasn\u00b4t finished loading. \nPlease check the following: Set a breakpoint to translate.service.js line 199 and have a look to this.translations. Is it  {}?\nYou are requesting a key before the translation file finished loading and that will probably not work.\n. Correct. Http request are always async. Otherwise would the duration for loading a website increase.\nHave you tried you tried my idea with setting the route config after the translation observable has resolved?\n. I am not sure what you mean with local static file in context of webdevelopment. Every file which wil be used from a setup needs to be delivered via http. The static file loader will send a request for the translation file to \nhttp://yourdomain.com/{{prefix}}/lang{{suffix}}\nIf you mean you want to load the translation file from another host then this should also be possible. There you would need to include the url of the host into the prefix.\n. We should maybe discuss about this behaviour. What should happen if a key doesn\u00b4t exist in the currentlang but in the default lang?\n- show translation from default language\n- call Missing Translation Handler\nI would prefer the second option. And then maybe extend the Missing Translation Handler and give the current language as second parameter to the handle function\n. Yes thats what ocombe suggested\n. This could be modelled with an empty missing translation handler which allways returns undefined.\nWith your idea the case that the translation is only missing in a non default language cannot be handled by the developer.\n. Yes you are right ;)\n. I would agree in that case the the interface would be the better choice. I didn\u00b4t thought about this while implementing this feature.\nIs your design maybe to complex? A class should only attend one responsibility to fulfill the Single Responsibility Principle. Maybe it would be better to devide your behabiour into different classes and MissingTranslationHandler inherit from just oneclass. That would be maybe better maintainable. But thats jsut an idee because I don`t know your use cases.\n. @ribizli Yeah. As mentioned I agree with you.\n. ",
    "sclausen": "Yeah, you're totally right about nativeElement, but I didn't found out how to adequately manipulate the content from a Directive or Component. \nCould you explain your concerns regarding injection? Maybe, we can drop this feature because of this security problem alone not digging into the nativeElement issue, although I really like to have my translation keys as innerHTML.\n. @hpop: but your code prevents using html in translations.\n. Apart from questioning html support, everything you wrote is correct. The thing is, I'm pretty certain, html support is essential.\nYou would have to translate every part of longer texts with markup or links separately which is in some languages not possible at all, because of different sentence structures.\n. @NathanWalker That would be great!I had a look into html-sanitizer and unfortunately it has some other dependencies to the caja tool :-/ I hope this is not a showstopper. On the other hand, sanitize-html is browserified and minified still 125K, so maybe resolving those dependencies in cajas html-sanizier would be a good start.\n. I would really enjoy to see my templates more like <td translate>cool_translate_key</td> than <td>{{'cool_translate_key' | translate}}</td>, but I think its just a matter of aesthetics. There is no real 'need' for this and to gain simplicity in code, we should omit this directive.\n. Oh, I totally forgot about the html thing. How can we achieve the rendering of html-translations (e.g. for formatted message bodies) without having the directive?\n. I thought of html translations e.g. for messages with variables.\nThe following could be the translation value:\nhtml\n<p>Dear {{username}},</p>\n<p>Your order \"{{order.name}}\" has been shipped and will arrive est. {{order.estArrive}}</p>\n<p>Sincerly<br />\nYour [cool-company-name] Shipping Team\n</p>\nThis could be the view:\nhtml\n<message-body translate-params=\"{order:order, username: username}\" translate>\n</message-body>\nIf this wouldn't be possible, it would be totally cumbersome to create multiple translation values to compose such a message and furthermore, not every language has the same sentence construction, so the variables are sometimes at a different place in the sentence.\nDo you have a different solution for this problem?\n. @NathanWalker still interested in writing a sanitization lib for angular2?\n. @ocombe angular/angular#8453 has been merged, so we just have to wait for rc2 to be released to :smile: what do you think should be done now? should I continue to work on this pull request and add the new sanitizer?\n. I also messed up the tests :-1: Im currently working on it ;)\n. @ocombe I desperately tried to get a test to work, but testing a directive with the depending translate service is too complicated for me. I tried my directive manually and it works, but I can't put a working test case for my directive together. Do you have any idea, how I can test this?\n. @mchambaud beside the tests, there is still an issue with correct updates when switching the language. You could dig into both issues. Since I started this, angular got further and testing is now very different, so you could basically rewrite the whole test setup.\n. I still have the problem, that \n<p translate>hello_world</p> doesn't update after first language change, but <p translate [translate-values]=\"{value:'my-name'}\">greetings</p> works properly.\nOne strange thing I discovered is, that translate.get doesn't return after the first language change in the first example. Has anybody an idea, why this happens?\n. @deepu105 I don't think there is a need of prefixing the translate attribute-component with ng. When I created this, I had the compatibility to pascal precht's angular-translate in mind.\n. @deepu105 I'm not sure, what you want to tell me with this thread. They discuss prefixing because of a very narrow corner case and don't come to a conclusion to implement this, so angular-translate still works like always and if I want to be compatible, I shouldn't implement prefixing.\nBtw. the in the w3c document mentioned google translate service ignores this flag.\n. @deepu105 that sounds really reasoned, I will add this. For the rest of my problems though I still have no solution. \n. @deepu105 I don't think your wrapper would work for my desired featureset. The wrapper needs to have <span translate=\"key\"></span> so it's not compatible to angular-translate anymore, since it was possible in angular-translate to use it also like this <span translate>key</span> and that <span translate>{{'keys.' + variable}}</span>.\n. @gitnik I still have the problem, that \n<p translate>hello_world</p> doesn't update after first language change, but <p translate [translate-values]=\"{value:'my-name'}\">greetings</p> works properly.\nOne strange thing I discovered is, that translate.get doesn't return after the first language change in the first example. Do you have any idea, why this happens?\n. @SamVerschueren thanks for the remarks. I will fix this minor codestyle change requests along with fixing the faulty functionality. I'm currently a little out of spare time.\n. @ocombe I think your example of\nSome text\n<span _ngcontent-bdn-1046=\"\">some inner text</span>\nas a key is a corner case which shoudln't be handled. Your translation keys are keys in a json file and if someone want's to have something like that as a translation key, I would be curious to hear the explanation why. In your third example, I agree, I would trim al the whitespace, like in angular-translate from @PascalPrecht (translate.js#L167), too.\nI wanted to make this directive compatible to angular-translate and ultimately support all its options, so something like this\nhtml\n<pre translate=\"TRANSLATION_ID\"></pre>\n<pre translate>TRANSLATION_ID</pre>\n<pre translate translate-attr-title=\"TRANSLATION_ID\"></pre>\n<pre translate=\"{{translationId}}\"></pre>\n<pre translate>{{translationId}}</pre>\n<pre translate=\"WITH_VALUES\" translate-values=\"{value: 5}\"></pre>\n<pre translate translate-values=\"{value: 5}\">WITH_VALUES</pre>\n<pre translate=\"WITH_VALUES\" translate-values=\"{{values}}\"></pre>\n<pre translate translate-values=\"{{values}}\">WITH_VALUES</pre>\n<pre translate translate-attr-title=\"WITH_VALUES\" translate-values=\"{{values}}\"></pre>\n<pre translate=\"WITH_CAMEL_CASE_KEY\" translate-value-camel-case-key=\"Hi\"></pre>\n@SamVerschueren that's also the reason I used @Input('translate'), because I didn't wanted to have translate to be the variable name of the key in some cases.\nA lot has happened since I opened the pull request and much work has to be done to finish this directive/component. Currently my focus in angular2 is on other things, and I think I should rewrite this whole pr, but this may take a while.. @ocombe That's great! :+1: . So awesome! Thanks!. @hpop but be aware, that you should be careful with html injection, since no sanitization will be performed.\nI did a little bit of research because of @ocombe s concerns in #31, but I didn't found any lightweight solution for this problem.\n. If someone could help me with the Renderer approach, I would be really glad :D\n. ",
    "hpop": "There is not much documentation about the right way to manipulate the DOM, so I just took a look how the angular native directives do it. (for example ngClass  )\nThis seems to be the right way:\n``` typescript\nconstructor(\n  public translateService: TranslateService,\n  public ref: ElementRef,\n  public renderer:Renderer\n) {\n}\nupdateValue(key: string) {\n  this.translateService.get(key, this.interpolateParams).subscribe((res: string) => {\n    this.renderer.setText(this.ref.nativeElement, res);\n  });\n}\n```\n. Is html output necessary? As far as I understand it, there is no html support in pipes, so ng2-translate does't support html output right now. Or am I missing something?\nBonus: If we are not allowing html in translations, we don't have to build a implementation of $sce. :)\n. Ok. Good point.\n. I am just starting to figure it out as well and the documentation is not very good at this point of time.\nI guess the best articles to start are:\nhttp://victorsavkin.com/post/110170125256/change-detection-in-angular-2\nhttp://victorsavkin.com/post/137821436516/managing-state-in-angular-2-applications\nGive me some time and I will prepare a example for the case.\n. I have a hard time to get this running for an example. Do you have a working jsfiddle or plunker with ng2-translate?\nIn the meantime I tested #31 and it perfectly fixes my issue. If I use directives instead of pipes in my application, everything gets updated perfectly even if OnPush is used.\n. I would just call the MissingTranslationHandler as well. If we are able to set the value there, we still can set the translation from the default language. \n. Same problem here. I hate to ask but is there any update in this? \nIt's a serious problem and an easy fix.\n. ",
    "mchambaud": "It would be great to have this PR finalized.\nIs there anything I can do to help?\n. Wouldn't this solve your issue?\nthis.translate.use('en').subscribe(() => {\n   this.meta.setTag('description', this.translate.instant('META.DESCRIPTION'));\n});\nor \nthis.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n   this.meta.setTag('description', this.translate.instant('META.DESCRIPTION'));\n});. ```\nexport class HomeComponent implements OnInit {\n   constructor(meta: Meta, translate: TranslateService) {}\nngOnInit(): void {\n       this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n           this.meta.setTag('description', this.translate.instant('META.DESCRIPTION'));\n       });\n   }\n}\n``. You can update the content of your tagsonLanguageChange`\nhttps://angular.io/api/platform-browser/Meta\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null. ",
    "deepu105": "@sclausen I know this may be very late but still why not <p translate=\"my.trans.key\"></p> as its the format used in angular-i18n which is very famous for ng1 it would make migrations very easy. Also you might want to consider using a prefix to translate as its a HTML5 attribute and usually ends up having issues when using protractor\n. @sclausen sorry just saw the code, ignore my first comment. Seems you already support key as attribute value. May be you could consider adding a prefix to the translate directive. something like ng-translate may be\n. btw we currently use the below as a workaroud as I didnt want to write a complete directive from scratch. Works perfectly\n``` js\nimport { Component } from '@angular/core';\n@Component({\n    selector: '[jhi-translate],[jhiTranslate]',\n    template: '',\n    inputs: ['key:jhi-translate', 'args:translate-values']\n})\nexport class <%=jhiPrefixCapitalized%>Translate {\nprivate key: string;\nprivate args: any;\n//FIXME add support to pass translate-compile/ directives in translated content doesnt work\n\n}\n```\n. @sclausen take a look at this thread https://github.com/angular-translate/angular-translate/issues/849\n. @sclausen what I'm trying to tell you is that the translate directive doesnt work when you use it in protractor coz protractor treats its as a html5 attribute and expects a boolean and not string as value. So I understand you want to maintain backword compatibility so what say you support both like below\n@Component({\n    selector: '[ng-translate],[translate]',\n    ...\n})\nSo that people who are not bothered by the issue can use translate and we (Jhipster folks, which is a huge user base btw, and others using this with protractor) can use ng-translate\n. @sclausen what do you think of the wrapper directive approach I posted above. It works without any problem for me. But im no ng2 expert so wouldn't know if it has any downfall compared to your original service ? \n. @ocombe we are using angular-i18n for https://jhipster.github.io and now we are migrating to provide ng2 support. we are trying to use ng2-translate here but we are having trouble as we have a lot of partial files for each language and we used the partialLoader from angular-i18n.\nJHipster should bring you a lot users and downloads and it would be highly appreciated if the feature can be provided out of the box\nThe PR for this is https://github.com/jhipster/generator-jhipster/pull/4304\n. Btw we have implemented a custom loader in JHipster for this and works\nquite nice :)\nThanks & Regards,\nDeepu\nOn Fri, Dec 9, 2016 at 1:28 AM, Phu Pham notifications@github.com wrote:\n\n+1 for partial loading support\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/199#issuecomment-265897773,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABDlFxl3vgPSV7QzxDoKjrMGTp_OkXjVks5rGKCtgaJpZM4JlqmZ\n.\n. Yes its on the JHipster repository https://github.com/jhipster/generator-jhipster/blob/master/generators/client/templates/angular/src/main/webapp/app/shared/language/_translate-partial-loader.provider.ts. But it would be even better if its supported out of the box as it would be the most practical use case in real systems. This is a must feature as often in real world apps we would have to embed a routerLink or a click handle to the strings being translated\n. @DethAriel did you find any solution to this?\n. I can do a PR if required\n. when is your next release? also do you think the directive #31 will progress? we would be very interested to have it\n. @ocombe could you please support something other than translate as well? may be ng-translate or something? in JHipster we use translate params in protractor to check stuff regardless of language being used and with latest protractor they treat translate as a boolean due to the fact that its a html5 attribute and hence the test fails for us. \n",
    "gitnik": "So what's left to be done here? I'll be glad to help if some resources are needed\n. I had a similiar issue. Maybe this can help you?\nhttps://github.com/ocombe/ng2-translate/issues/288\n. Alrighty so the issue seems to be that my application and the translation pipe receive different instances of the translateService. Here's how my module loads the TranslateModule\n``` typescript\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpModule,\n        FormsModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, '/app/welcome/translations', '.json'),\n            deps: [Http]\n        })\n    ],\n    declarations: [\n        WelcomePageComponent,  // <--- uses the translate pipe\n    ],\n    exports: [\n        HttpModule,\n        WelcomePageComponent,\n        CommonModule,\n        FormsModule,\n        TranslateModule\n    ]\n})\nexport class SharedModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SharedModule,\n            providers: [LocaleService / <--- uses the translateService /],\n        };\n    }\n}\n```\nI am not able to spot anything that looks off unfortunately, so I hope you guys can help me out\n. Thanks a lot!\n. is there any update on this? Is this expected behaviour that will not be changed or is it something that is under consideration?. ",
    "SamVerschueren": "No problem, we all have busy lives!\n. Are you sure you used a SharedModule which you import in every module? That is the key to success.  Ad don't look at that solution with the provider, it's deprecated since NgModule came in town.. Try setting the language in your root component\n```js\n@Component({\n    ....\n})\nexport class AppComponent implements OnInit {\nconstructor(\n    private translateService: TranslateService\n) { }\n\nngOnInit() {\n    // Configure the TranslateService\n    this.translateService.setDefaultLang('en');\n    this.translateService.use('en');\n}\n\n}\n```\nAlso make sure it downloads the correct JSON file in the network tab of your chrome developer tools. Make sure en.json is not marked in red (couldn't find the file) and is actually downloaded.. Could you change your app.module to this like suggested in the readme.\n```js\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './i18n', '.json');\n}\n@NgModule({\n    imports: [\n        SharedModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nCan you guys update readme again?\n\nNo, because it works. It has to be something on your side. If you are able to replicate this in a plunkr, we would be happy to reconsider if something isn't clear.. @AnnekathrinL \n\nCare to share your config file?\nAre you using the latest version of ng2-translate?\nHow are you importing ng2-translate in your source files?. @roddydairion Share your SystemJS config so we can have a look.. Not sure if it changes anything, but try using paths and point to the js file instead of to the bundles directory.\n\nMaybe changing your ng2-translate entry in map to node_modules/ng2-translate/bundles/ng2-translate.umd.js might be enough. Otherwise, try using this config.\njs\n(function(global) {\n  // map tells the System loader where to look for things\n  var map = {\n    'app':                        'app', // 'dist',\n    '@angular':                   'node_modules/@angular',\n    'angular2-in-memory-web-api': 'node_modules/angular2-in-memory-web-api',\n    'rxjs':                       'node_modules/rxjs'\n  };\n  var paths = {\n    'underscore':                 'node_modules/underscore/underscore.js',\n    'ng2-translate':              'node_modules/ng2-translate/bundles/ng2-translate.umd.js'\n  };\n  // packages tells the System loader how to load when no filename and/or no extension\n  var packages = {\n    'app':                        { main: 'main.js',  defaultExtension: 'js' },\n    'rxjs':                       { defaultExtension: 'js' },\n    'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },\n    'ng2-translate':              { defaultExtension: 'js' }\n  };\n  var ngPackageNames = [\n    'common',\n    'compiler',\n    'core',\n    'forms',\n    'http',\n    'platform-browser',\n    'platform-browser-dynamic',\n    'router',\n    'router-deprecated',\n    'upgrade',\n  ];\n  // Individual files (~300 requests):\n  function packIndex(pkgName) {\n    packages['@angular/'+pkgName] = { main: 'index.js', defaultExtension: 'js' };\n  }\n  // Bundled (~40 requests):\n  function packUmd(pkgName) {\n    packages['@angular/'+pkgName] = { main: '/bundles/' + pkgName + '.umd.js', defaultExtension: 'js' };\n  }\n  // Most environments should use UMD; some (Karma) need the individual index files\n  var setPackageConfig = System.packageWithIndex ? packIndex : packUmd;\n  // Add package entries for angular packages\n  ngPackageNames.forEach(setPackageConfig);\n  var config = {\n    map: map,\n    packages: packages,\n    paths: paths\n  };\n  System.config(config);\n})(this);. @roddydairion Glad it worked :).. @avantika3667 ng2-dnd is unrelated to this module. Forward your question to their repository or use StackOverflow. And also, beta-21 does not use NgModules yet, so that's probably the reason.\n\nWhat @ocombe said.. I think the best way (and the Angular 2 way) is to just change the ng2-translate documentation and make sure people initialize (TranslateModule.forRoot) the module in the AppModule. It doesn't really makes sense to call TranslateModule.forRoot in every feature module, which aren't root modules.\nSo making them static would (probably) work, but I believe that isn't the preferred way of working with modules.\n. This is a bummer. Does anyone have an idea why it's still not working after the previous PR? Let's help each other out. We're all on the same boat :).\n. I basically tried it with a bare minimum example. Just to see what it did:\n``` ts\n@NgModule({})\nexport class TranslateModule {\n    static forRoot() {\n}\n\n}\n```\nIt just doesn't work. It still shows the error\n\nError: Error encountered resolving symbol values statically. Function calls are not supported.\n\n@robwormald Any ideas?\n. Alright, after fiddling around with this I think the issue is that we don't have a metadata.json file which seems to be required for AOT. Basically this means that the library should be compiled with ngc as well. I tried doing that and I got a metadata.json file, but it didn't work yet entirely.\n\nExtra notes.\nWhen using the master branch (don't see any improvement with the npm package though), I managed to get another error.\n\nError: Unexpected value 'TranslateModule' exported by the module 'SharedModule'\n\nAnd Google shows me that it has something to do with the metadata file. \nWhat was I doing wrong in the first place? If you provide a loader yourself, (1) make sure it uses a function as well and (2), it is exported.\n`` ts\n// Theexport` seems to be an important piece of the puzzle\nexport function translateLoaderFactory(http: any) {\n    return new TranslateStaticLoader(http, 'app/shared/i18n', '.json');\n}\n@NgModule({\n    imports: [\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: translateLoaderFactory,\n            deps: [Http]\n        })\n    ]\n})\nexport class AppModule { }\n```\nThis only helped with the code in master, not the one on npm. Not sure if you made any changes since the latest release?\n. Yes, I might be very wrong here. Very new to the AoT stuff.\n. Thanks for looking into this @ocombe !\n. No hurry @ocombe. Take a look whenever you find the time!\n. @peterpeterparker I understand that it might be urgent for some people. But you must know that @ocombe is doing this in his spare time, like most of the open source contributors. If you want this so badly, nothing stops you from contributing and doing a decent PR yourself. Open source is not the same as consultancy for free. And that's what I meant with my comment. @ocombe should solve this when he finds the time to solve it or someone else should jump in and help him out.\n. @Je06610 Make sure your path in the static loader is pointing to the correct location\njs\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n            deps: [Http]\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\nAs you can see, ng2-translate looks for the files in app/membership/i18n/en.json. Are those files really there? Most of the time this is due to the fact that those json files aren't automatically copied over to the dist directory. Not sure how the CLI handles that.. Thanks for jumping on this so quickly!\n. Thanks @ocombe! Works like a charm!\n. Odd, have to dig deeper into this later today. ng2-translate/ng2-translate should still work though but the preferred way of doing this now is ng2-translate.\n. Let me try to explain here. \nFirst of all, I'm not an expert in SystemJS/Webpack at all. I'm pretty noob on those to be honest. BUT, when I take your plunkr, it just works. I can change the language and it changes the interface.\nAs you said before, the config maps 'ng2-translate': 'npm:ng2-translate'. To be clear, this has nothing to do with the UMD bundle whatsoever. More to this later on.\nOpen up app.component.ts which imports ng2-translate/ng2-translate. This is the \"old way\" but still works as ng2-translate just exposes with index.ts exposes. So both can be seen as identical. You could change that line to this\nts\nimport {TranslateService} from 'ng2-translate/index';\nAnd it will still work. This is what they call a Barrel. It's the main entry point for everything inside ng2-translate. If you would use Webpack, you could just write it like this\nts\nimport {TranslateService} from 'ng2-translate';\nBut SystemJS does not support that (currently).\nI agree that importing ng2-translate/index seems weird. But you should use the ng2-translate bundle instead. This is the part where I'm stuck currently with the plunkr so I will have to dig deeper on my local filesystem. Will try to do that later today.\n@ocombe Why does the bundles directory has the type definitions? The UMD bundle has nothing to do with typings. It will not try to load them or whatsoever. If someone imports ng2-translate, TypeScript will resolve the typings as configured in the package.json, being index.d.ts. The bundle is just something that SystemJS/Weback consumes.\nIf you look at how Angular2 ships it\n\nI think we should try to mimick that behavior is much as possible as people are already familiair with that.\n. > There are typings in the bundles folder because I forgot to disable typings generation when generating the bundle :D\nHahah, those things happen :D.\nWill check this today. Eager to know the answer :p.\n. I believe this has nothing to do with CommonJS/UMD. It has everything to do with the configuration of ng2-translate and how you consume it.\nIn the new release (I thought we supported the old notation as well but not sure if everything went well there), you have to import from ng2-translate instead of ng2-translate/ng2-translate.\nBecause SystemJS does the module resolution, you don't have to import from bundles/index or from anywhere else. Just import from ng2-translate, that's the first step in the process.\nAngular 2 suggests you use their UMD bundles in development. You could either choose to do that or not, that's up to you. The only thing you have to change is how SystemJS consumes the library in the configuration.\nIn the plunker you provided, you can either choose to consume the CommonJS files, or the UMD bundle.\nCommonJS\n'ng2-translate': 'npm:ng2-translate/index.js',\nUMD\n'ng2-translate': 'npm:ng2-translate/bundles/index.js',\nThis doesn't change anything on how you import them in your main files. It just tells SystemJS where to look if it sees an import statement for ng2-translate. This does also mean, that if you want to keep import { TranslateService } from 'ng2-translate/ng2-translate';, you can simply change the config to something like this.\n'ng2-translate/ng2-translate': 'npm:ng2-translate/bundles/index.js',\nYou can just rename it to whatever you want.\nI adjusted the plunk for both scenarios, CommonJS and UMD.\nCommonJS: http://plnkr.co/edit/Qs9n2NSqGynEKmQvL5Xy\nUMD: http://plnkr.co/edit/eKVwIDVPBNpEBABd5HcR\nI really hope this helps and gives a better understanding of how things work.\n. @ocombe Yes, was thinking the same. It just follows how Angular does it though, but apparently the Angular docs seems clearer :).\nMaybe we should create a docs directory where we explain how people should configure the module with SystemJS and with Webpack. This way we could keep the main docs in the readme, \"how to use the module\" and the APIs etc. And then we can extract bundle specific stuff to seperate doc files. Let me know what you think, I would be happy to do it for SystemJS. Not much experience with Webpack but I can always take a look. We should also update the examples :).\n. > I gave you collaborators rights on the repo.\nThanks \ud83c\udf89 \n\nWe can use the wiki here\n\n\ud83d\udc4d \n. Nothing to do with this as lodash suffers the same fait. Not that familiair with Karma but either it's a  karma config thing, or a SystemJS config thing when it can't find the correct file in the correct location. If it's working in development, it's probably Karma who can't find the correct file, so that means it's a karma config.\nWhen I open a Karma config file, this is what I see\n``` js\n...\nfiles: [\n    // paths loaded via module imports\n    // Angular itself\n    { pattern: 'node_modules/@angular//*.js', included: false, watched: true },\n    { pattern: 'node_modules/@angular//*.js.map', included: false, watched: false },\n// NgRx\n{ pattern: 'node_modules/@ngrx/**/*.js', included: false, watched: true },\n{ pattern: 'node_modules/@ngrx/**/*.js.map', included: false, watched: false },\n\n// many more\n\n]\n...\n```\nTry to add ng2-translate over there.\n. Like I said, I'm not familiair with Karma so I can't answer that question. The thing I know though is that it's the module bundler (SystemJS or Webpack) that does the module resolution. That's why you need to configure SystemJS that it looks for node_modules/@angular/core/bundles/core.umd.js. How Karma does it? I have no clue, does it use SystemJS? And if so, what config does it pick?\nI don't think this discussion belongs here though and is more like a StackOverflow support question. Like I said, it doesn't find lodash as well so it's definitely a config problem.\n. @3du4 Glad you got it working :)\n. @chpasha Yes, that is the correct way to do this. \nNever ever call .forRoot() of a module in a shared module. It is called forRoot for a reason.\n. Please read this comment https://github.com/ocombe/ng2-translate/issues/219#issuecomment-256256623\n@hantsy nothing to with Angular CLI. Make sure you import TranslateModule in your shared module.\n. Have you manually checked if that file actually is present in your dist directory?\n. @hantsy Thanks for the code. Could you point me to the file where it tries to load a value with a certain key but can't find it?\n. @hantsy I also created a repository that shows how it works with angular-cli. The first commit is just a ng new initialisation, the second commit is where ng2-translate is being configured. It might help.\n. Could you confirm that it does not load both of them? https://github.com/hantsy/angular2-sample/blob/master/vanilla/src/app/app.component.ts#L22-L23\n. @hantsy The docs state:\n\ninstant(key: string|Array, interpolateParams?: Object): string|Object: Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the default file loader is asynchronous. You are responsible for knowing when your translations have been loaded and it is safe to use this method. If you are not sure then you should use the get method instead.\n\nThe language file is not yet loaded when you call translate.instant in the app constructor. If you need a value in the constructor at that point in time, you should use this\njs\nthis.translate.get('posts').subscribe(t => {\n  console.log(t); //=> 'Posts'\n});\nBut most of the time you can do everything with the translate pipe in your view directly. So yes it works, and no it has nothing to do with ng2-translate.\n\nTo come back to your issue regarding the translate pipe not working.\n\nMe: Make sure you import TranslateModule in your shared module.\nYou: Of course, I added TranslateModule.\n\nYes you added TranslateModule, but not to your SharedModule. This should do it\n``` ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from 'ng2-translate';        // <- THIS\nimport { ShowAuthedDirective } from './show-authed.directive';\nimport { NavbarComponent } from './navbar.component';\nimport { FooterComponent } from './footer.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule\n  ],\n  declarations: [\n    ShowAuthedDirective,\n    NavbarComponent,\n    FooterComponent\n  ],\n  exports: [\n    TranslateModule,                // <- THIS\n    ShowAuthedDirective,\n    NavbarComponent,\n    FooterComponent\n  ],\n})\nexport class SharedModule { }\n```\n. > Defining a shared module is not a must, I checked the ng2-translate documentation.\nNope it isn't, if you are not using that approach, make sure to import TranslateModule to every module where you want to use the pipe. But you do have a SharedModule so use it where it's designed for. That's how modules work and ng2-translate is no exception to this. If you don't understand that, I'd suggest reading the module section again.\n\nFor the translate.instant, i hope it works like ng1 translate, always return a value synchronously.\n\nThe docs are clear about this.\n. I'm closing this as the original question was answered.\n. I had the same issue here but if you point to the bundle in SystemJS, make sure you use the correct key.\npaths: {\n    'ng2-translate/ng2-translate': 'node_modules/ng2-translate/bundles/ng2-translate.js'\n}\nIt's important you use ng2-translate/ng2-translate.\nAnother option is to just use ng2-translate but to make sure you import from ng2-translate instead.\njs\nimport { TranslateService } from 'ng2-translate';\nDoes that work?\n. You don't have to clone it, just add this line to index.ts\njs\nexport * from './ng2-translate';\nAnd done :). 100% backwards compatible.\n. If you want I can do a PR when I find some time?\n. Thanks for merging!\n. I use SystemJS so not really an idea how I should test it with Webpack though :p. I can always try to run the example here in this repo.\n. Getting the exact same error when I try to use npm link with master indicating that it can't find ng2-translate.d.ts.\n. I'm now testing it with the webpack example from this repo.\n. Getting an error when I try to run the example directly (not even without npm link). We should look into updating these examples to the latest Angular and ng2-translate.\nFor now, it seems that the only way we can test this is by releasing a new version and see what happens. I think not much can go wrong as the tests are still working and it still support ng2-translate/ng2-translate imports. I know it's playing with fire, but it's sad to say, do we have another choice? :s\n. > For now, it seems that the only way we can test this is by releasing a new version and see what happens.\nJust realised you could also release a beta version first and then we can test with that one.\n. Friendly ping :). No rush if you don't have the time to look into it.\n. > Is there any point having it on github ?\nNot that I know of. It only adds extra noise to commits imo.\n. The typings and the umd bundle are two different things. The typings file is also referenced in package.json so that stays the same. The only difference in renaming this to .umd.js is that instead of referring to ng2-translate.js in your SystemJS config, you will have to name it ng2-translate.umd.js. It's basically just identical to what Angular2 does. It won't change anything to the typings.\n. I don't think this is up to us to fix it. Open an issue in Ionic or WKWebView instead. Or try addinga CSP rule.. Missed this thread. More information in here https://github.com/ocombe/ng2-translate/issues/219#issuecomment-256256623.\n. Thanks for following up on this @biesbjerg! I'm going to close this one because it seems that it's not ng2-translate whose failing.. Could you share your SystemJS config?\n@ocombe Haven't upgraded yet. Let me do that and I'll get back with my findings.\n. Change the import like this. More information on the changes could be read in this post.\nts\nimport { TranslateService } from 'ng2-translate';\n. I created a repository to test this. I never worked with angular-cli so I installed it, created a new project in the first commit and added ng2-translate in the second commit.\nhttps://github.com/SamVerschueren/ng2-translate-aot-test\nI ran the following command and all seem to work\n$ ng serve --prod\nI wasn't sure if this did AoT compilation and couldn't find docs for that, so I also ran it with\n$ ng serve --prod --aot\nI checked the sourcecode and the template was compiled so that worked correctly. So not sure where it goes wrong then.\n. Glad it got resolved.\n@timfogarty1549 Could you check if it works for you with the changes suggested?\n. @Matmo10 So you are just using TranslateModule.forRoot() without any config?\n. Thanks for clarifying, will look into that.\n. The problem is that you aren't subscribing to the observable. But even with subscribing this doesn't work. Don't have time to dive deeper now though.\njs\ntranslate.use('en').subscribe({\n  error: err => {\n    console.log('error', err)\n  }\n});. @urffin What @ocombe said. Also, you're making a new subscription so you have to call subscribe again.. @ocombe Might be because we aren't catching the error at this point. Not sure though.. Ready my comment here. That should solve the problem.\n@ocombe The bundle and the AoT compilation or two different things. The bundle isn't used for AoT. It has everything to do with how the module is configured. This makes me wonder if we should've done a major release instead of a patch.\n. I tried it again in the plunkr and it seems to work with npm:ng2-translate as well. I also tested this on my local machine and it just works.\nhttp://plnkr.co/edit/aDeHGUrodsbBJ1gItv7s\nI'm going to close this as the original problem is resolved.\n. This is a flaw in the documentation and should be updated ASAP. You should never ever call the forRoot() of any module in the SharedModule, or feature module for that matter. There is a reason it is called forRoot, because it should only be called once in the root module, most of the time AppModule.\nSo move that piece of code, TranslateModule.forRoot to your AppModule and change your SharedModule to this\njs\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpModule,\n        FormsModule\n    ],\n    declarations: [\n        WelcomePageComponent,  // <--- uses the translate pipe\n    ],\n    exports: [\n        HttpModule,\n        WelcomePageComponent,\n        CommonModule,\n        FormsModule,\n        TranslateModule\n    ]\n})\nexport class SharedModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SharedModule,\n            providers: [LocaleService /* <--- uses the translateService */],\n        };\n    }\n}\n. Yes, I will take a look when I find some time. Hopefully today, not sure though.\n. Here is the answer https://github.com/ocombe/ng2-translate/issues/219#issuecomment-256256623 :) \n. Someone had an issue with angular-cli as well a couple of days ago so I created a repository for that https://github.com/SamVerschueren/ng2-translate-aot-test.\nThe first commit covers the initial ng new app. So nothing exciting over there. The second commit adds ng2-translate. Works perfectly.\n\nProbably it should be bundled somehow or directories with JSONs should be created.\n\nThis is not up to ng2-translate to take care of that. If the json files aren't part of your build, that's the fault of the Angular cli not copying over the correct files.\n. No problem, glad it's resolved :) :beers:\n. How do you import? SystemJS or Webpack? \n. Make sure you import from 'ng2-translate'; and not from 'ng2-translate/ng2-translate';\n. Have you read my solution? Doesn't it work?\n\nMake sure you import from 'ng2-translate'; and not from 'ng2-translate/ng2-translate';\n. I believe you're right. The examples should get an update. I'll see what I can do in the coming days.\n. Done!\n. Cool! Excited that all these things are being improved step by step :).\n. @ocombe I don't believe that's possible. I think the only way of doing that is checking out the commit right before the breaking change and release a new patch release.\n\nAlso, if we're releasing a new major, we might consider removing the ng2-translate.ts file in the root of the project. But I leave that to you to decide :).\n. Are you adding TranslatePipe to the declarations of your main module?\nIn order to get this working, make sure you use TranslateModule.forRoot() in your main module, probably AppModule. Also import TranslateModule in your ShareModule.\nts\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot()\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\nts\n@NgModule({\n    exports: [\n        CommonModule,\n        TranslateModule\n    ]\n})\nexport class SharedModule { }\nThe pattern here is that you import the ShareModule in every feature module. Because TranslateModule is exported in the ShareModule, the TranslatePipe will be available in that module as well. This is how modules work.\n. No, that's not how modules work.\n. The docs are getting a major refactoring already in #298. Thanks for the suggestions though. \n. What do you mean with global ng and global Rx? Provide as much information as possible because this doesn't seem like a normal use case. For instance, are you developing using JavaScript or TypeScript? If possible, provide a plunkr example or a minmal reproducible repository so we can easily see what goes wrong and how your setup looks like.\n. I have no idea how this works, but would it be possible to inject the rootscope to the main ng2 component.\n``` ts\nclass AppComponent {\n    constructor(\n        @Inject('$rootScope') private rootScope,\n        private translate: TranslateService\n    ) { }\nngOnInit() {\n    this.rootScope.$watch('currentLanguage', language => {\n        this.translate.use(language);\n    });\n}\n\n}\n```\nAlthough not sure if you can inject $rootScope as per this issue https://github.com/angular/angular/issues/10590.\nI'm also not sure if it's a good thing to add stuff to your $rootScope. Instead, it might be better to create a languageService that you use to change the language. Then you can inject that service and listen to changes or better, emit an event when the language has changed.\nJust throwing some ideas out here because as I said before, I have no experience with hybrid angular apps.\n. Also let us know what you're using. SystemJS, Webpack?\n. > Also I can almost immediately tell you that the problem is that you import from ng2-translate/ng2-translate instead of just ng2-translate\nI tested this with SystemJS in the plunkr, and that should work because ng2-translate.ts just exports index.ts. Not sure why Webpack fails on this.\n. Odd, I tested this on my ng2-translate-aot-test repository in this branch with this commit. It just works out of the box, don't have to change anything. So why is everyone experiencing problems with this?\n. You're right, we forgot to update those. Can you do that @ocombe?\nReally makes me wonder why it fails on your system though, as you can see, the plunkr works just fine with ng2-translate/ng2-translate. Tested this on SystemJS and Webpack, should work both. But after all, glad it's resolved.\n. I can confirm this seems like a bug. Have to dive deeper to find the cause.\n. Or remove the square brackets.\n<child-component label=\"{{'start_date' | translate}}\"></child-component>\n. Does it work with only loading 1 key? Seems like it can't find the translations at all.\n. It seems to work perfectly fine in the plunker.\nhttp://plnkr.co/edit/WoIeZeC9h0OVHQsrww6U\nThe result of the observable isn't an array though, it's an object. If you inspect that plunker you will notice that this call\njs\ntranslate.get(['HOME.TITLE', 'HOME.SELECT']).subscribe(res => {\n  console.log(res);\n});\nresults in this object\njson\n{\n  \"HOME.TITLE\": \"Hello Angular 2 with ng2-translate!\",\n  \"HOME.SELECT\": \"Change language\"\n}\n. Closing this as I believe it's just a type issue string[] Vs. {[key: string]: string}. Feel free to post new information if you believe my answer did not solve the problem.\n. What do you mean with \"share the invoice with my client\"? Is that like a URL you share or more like a printed PDF from your component?\nIf it's a URL, I could suggest two things.\n1. Add a lang query param that changes the language of your app/invoice to the one you want\n2. Use the getBrowserLang() API method to retrieve the users browser lang which will auto detect the language of your clients browser. I assume that if the browsers language is english, the invoice could be english as well.\n. Hi @frankspin89. Although I believe this belongs more at StackOverflow, let me try to give you a direction on how I would implement it. First of all, please note that I don't know the exact requirements and I assume quite a lot of things here :).\nChanging the language of your invoice is quite easy. Like I said before, you could get the browser language with the getBrowserLang() API method by default or override it with a query parameter like ?lang=de to hardcode the language. Should be quite easy to do.\nTo render it to a pdf, I would just suggest to use the print method of your browser. If you want to hide or show stuff on the printed page, use the print media query to do that. You could easily add a button to your page calling window.print() which will show a print dialog.\nHope this helps you a little in the right direction.\n\nClosing this as it has not much to do with ng2-translate. If you end up creating a StackOverflow question to get more in depth, don't hesitate to link it here.\n. Could you elaborate? Not sure if I understand your issue.\nDo you mean the observable should emit a new value when the language is changed?\n. Try adding main: 'index.js' to the ng2-translate package in the SystemJs config.\n. I think what you really want is this.\n``` ts\nprivate subscription: Subscription;\nconstructor(\n    public translate: TranslateService\n) {\n    // subscribe to lang service in case language is changed\n    this.subscription = this.translate.onLangChange.subscribe((lang) => {\n        console.log('lang');\n        this._initDataTableColumns();\n    });\n}\nngOnInit() {\n    this._initDataTableColumns();\n}\nngOnDestroy(){\n    this.subscription.unsubscribe();\n}\n```\n. More info could be found in the examples section of the plugin.\n. > Should I change get behavior in order to not complete automatically\nDoes this mean the user would have to unsubscribe manually to prevent memory leaks?\n. Or translate translate to some other language and maybe you come up with a cool name :).\nhttps://translate.google.com/#en/no/translate. Yeah, looks good for me!. For me personally, ngx-translate is the best choice.. Just remove it and push the changes. We can squash commits here.. Have you set the english locale before using the get method?\njs\nthis.translate.use('en');\nthis.translate.get(\"waitmsg\").subscribe(res => {\n     console.log(\"HELLO:\" + res);\n});. It should work in ngOnInit though. It's generally not a good idea to move those things to the constructor as the constructor has to be kept as light as possible.. @ocombe It would be cool if yours was extensible :).. Just add <br> tags in your one line string?. Oh ok, I also thought that you wanted it to resemble in the UI.\nI just don't get why you want to write that in multiple lines. If you softwrap your editor to let's say 80 characters, it will be also be wrapped to multiple lines. In my opinion, you're just making things harder to translate because now it's not a simple key-value anymore. You can't easily copy paste the entire translation you have because you first have to remove the quotes and comma's first.\nIt's up to @ocombe to decide if he wants to support this. But in my opinion, it's not a very good idea to do that.. Jup, writing your own custom loader was also what I was going to suggest.\n@ocombe Wow, that would be nice! Are you going to put this in a separate package?. It should work, although not sure what randomData.nextDate actually returns? A plunkr showing the issue would be nice. You could start from this one if you want.. I might not entirely understand what you want. Could you give an example of what you want? Do you mean that in the translation file, you want to be able to use single quotes or no quotes at all? If that is what you mean, then no. Because that's not valid json. Have a try at http://jsonlint.com/. But if you really want that you could easily create your own custom loader.\nIf you mean something else, please eloborate :).. Could you at least try to use English as communication language. Thanks!. You're right, that is incorrect.. The easiest thing to debug that is looking in the network tab of the developer tools. Most of the time, this is due to the fact that those .json files aren't being copied over to the dist directory.. Could you share the solution? Might be nice for other people experiencing the same thing.. @sajeetharan What issue are you experiencing? Have you read https://github.com/ngx-translate/core/issues/359#issuecomment-267318337?. How did you start the example npm start? I believe this is because of caching. Open devtools, go to Network tab and click Disable cache. As long as your devtools are open, cache is disabled. If you close the devtools, cache will be enabled again.\n\n. I'm just wondering about the use case of this? What are you trying to do that's not possible with using a pipe in the template itself?. Have you tried not setting a default language?. Works perfectly fine. Here's a plunkr that shows what you want http://plnkr.co/edit/84KPA1l7cPCyWo3kEGVp?p=preview.\nSo if you could create a plunkr with a minimalistic example that fails, that would be nice.. Probably because it's mapped incorrectly in your SystemJS config. If you really want to build from source (not sure why though), have a look at npm link. It allows you to symlink a local directory as if it was installed via npm.. That's when you should use npm link instead of trying to git clone inside your repository.\n\nClone repository\nRun npm run build inside the repository\nRun npm link inside the repository\nRun npm link ng2-translate inside your local repository instead of npm install ng2-translate\n\nAlso, I suggest opening a new issue regarding that feature so we can discuss this first (unless you don't want to do a PR). I don't want you to do all the work and then ending up with a feature that's already in there. Explain your use case clearly so we know exactly what you want.. Not sure how webpack works, but it probably has a config file as well? Try using the npm link workflow, it's no different from npm install. It only picks your local version instead of the remote one.. That's how npm link works, by creating a global link first. I don't see any problem in doing that?\n/src/of/ng2-translate <- global/link/to/ng2-translate <- local/link/to/ng2-translate\nThis means that if you change something in /src/of/ng2-translate, the changes will boil down to your local/link/to/ng2-translate in your Angular 2 project. What's wrong with this approach? I use this every day and it works great.. Ok, so either I don't get it or you don't get it :). So let me try to recap everything.\nFirst revert everything and make it work with npm install ng2-translate. Remove the git clone stuff.\nRun your application, works? Alright, continue.\nClone the ng2-translate repository somewhere on your file system. NOT inside your Angular project. Run npm run build and npm link inside your local ng2-translate repository.\nYes, this will create a global symlink, but this has nothing to do with Webpack or whatsoever. That's the beauty of npm link, it doesn't require changes in your configuration as to the application, it looks like it's installed from npm.\nSo far so good?\nGo back to your angular application and first uninstall ng2-translate (npm uninstall ng2-translate). Now, instead of installing from npm, \"install\" from your local file system by running npm link ng2-translate. This will create the ng2-translate directory inside your node_modules folder that actually links to your local ng2-translate clone.\n. Probably not the reason, but try escaping double quotes instead. \"EXLOGIN\": \"Iniciar con <span class=\\\"ex-text-lg\\\">{{value}}</span>\".\nDoes it work if you assign it to a variable inside the controller?\njs\n@Component({\n    template: '<span class=\"ex-login\" [innerHTML]=\"test\"></span>'\n})\nclass MyController {\n    test = '<span class=\"ex-text-lg\">Hello World</span>';\n}. Try this CSS instead\ncss\n@media (max-width: 420px ) {\n    /deep/ .ex-text-lg {\n      display: none !important;\n    }\n}. I totally agree with @ocombe. I think that's the way to go.\nOne remark though is when you have the same keys and different module translation files. For example, if we have this translation file for the root\njson\n{\n    \"foo\": \"bar\"\n}\nAnd for a feature module we have this translation file\njson\n{\n    \"foo\": \"hello world\"\n}\nThe feature module will overwrite the value that we already have in the store and the foo translation key will map to hello world in every other module.\nSo what if we did it like Angular's injector. Create a store per feature module. If someone asks for a translation, it will look for it at the module store where it lives in. If the translation key could not be found it will navigate one up and asks the parent store for the translation and so on. It's just an idea though and not sure if it can be easily implemented. Just wanted to share the idea :).. Creating a sample demo with Angular CLI now and I noticed the same thing @atiertant already described. In a feature module where you configure TranslateModule.forChild with a custom loader, you again have to call .use() and configure the service. I think all the different service should actually share the same TranslateConfig or something. A quick example of that could be something like this\n```js\n@Injectable()\nclass TranslateConfig {\nlang$ = new ReplaySubject<string>();\n\nuse(lang: string) {\n    this.lang$.next(lang);\n}\n\n}\n```\nThat TranslateConfig is only created in the forRoot call so that it is shared between all the TranslateService instances. They can then subscribe to changes on the config object like the lang$ observable. If a service changes the language, all the other service will also respond and load the correct language.\nJust a quick idea :). I created a plunkr which shows that it is working. http://plnkr.co/edit/sR37RHoqxAHLWNViCLPX?p=preview\n@ocombe I used the key as content of the h2 tag which works. But when I use it like this <h2 [translate]=\"'HOME.TITLE'\"></h2> it doesn't show anything. Any ideas?. It uses window.navigator.languages to detect the user language. My chrome is in english, but it returns nl as main language. So apparently those two are not 1:1 coupled.. Do you use a function instead of a fat-arrow? See documentation. This is an error that appears when you try to do AoT while your code isn't compatible.. Cool. Glad it's resolved now!. Are the json translations file being loaded when compiled with AoT? See the network tab.. I just wonder. You told us that adding TranslateModule.forRoot was just for the sake of the example. I just wonder, why? You should call TranslateModule.forRoot(config) in your AppModule and use TranslateModule in the SharedModule.\nSo this makes me wonder, why the title How do you export TranslateStaticLoader from a SharedModule? Shouldn't it be TranslateStaticLoader not working in AoT? Because that seems to be the main issue here as the example is incorrect.\nSo my advice\n1. Make sure you call forRoot in the main AppModule\n2. Import TranslateModule inside the SharedModule\n3. Build for AoT\n4. Check the network tab that the assets are loaded from the correct path. \nMy gut feeling is that it's because the json files aren't where they supposed to be. A lot of issues are being opened here because of that. Make sure your build scripts (whatever you use) copy the assets (json translation files) as well and not only the javascript files.. From the docs\n\nNote: Never call a forRoot static method in the SharedModule. You will end up with multiple different instances of a service in your injector tree.\n\nNot sure if we could clarify it even more? The examples are also showing this.\n\nWhat then, do sub-modules automatically get this pre-configuration if importing TranslationService?\n\nYes. What happens is that the pre-configuration configures the providers. If a sub-module can't find an instance in it's own injector when injecting a service, it will ask the parent if it has an instance for that.. In order to make sure that the plugins are loaded in my Cordova application, I use this self-written service for that.\n```js\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n@Injectable()\nexport class CordovaService {\nprivate ready$: Observable<boolean>;\n\nconstructor() {\n    this.ready$ = new Observable((observer: Observer<boolean>) => {\n        document.addEventListener('deviceready', () => {\n            observer.next(true);\n            observer.complete();\n        }, false);\n    }).share();\n}\n\nready() {\n    return this.ready$;\n}\n\n}\n```\nWorks fine for me.\n```js\n@Injectable()\nexport class MyService {\nconstructor(\n    private cordova: CordovaService\n) { }\n\nfoo() {\n    return this.cordova.ready().map(() => ...);\n}\n\n}\n```\nNot sure if it could help you, but just wanted to share.. Are you sure this is due to ng2-translate? Try removing TranslateModule.forRoot from the AppModule and try again.. Why do you need the lang in the custom plural parser ?. Okay, I see what you're doing. Seems like a valid use case.. See the docs. Exactly, that's why it is called forRoot, because you only have to call it in the root of your project ;).. But then again, who reads that :p?. It tries to load the translation file from i18n instead of from assets/i18n. Make sure you configured the translate loader correctly. See the documentation.\n```js\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```. > provide, useFactory and deps are undefined\nWhat do you mean with this?. Just put Los usuarios de baja visi\u00f3n that as translation value of that key and use a normal translate, not an innerHTML translate. No?. It looks like you are using AoT. Check out the AoT section. You have to use a function instead of a fat-arrow (lambda) function.. Thanks for your effort. But imo this is desired behaviour. If we render [object Object], you can easily detect that you are doing something wrong. For instance, what if we have the following translation file\njson\n{\n    \"Admin\": \"Admin\"\n}\nAnd in the view we have\nhtml\n<h2>{{ 'Admin' | translate }}</h2>\nSo far so good! But if we refactor our translation file to something like this\njson\n{\n    \"Admin\": {\n        \"Admin\": \"Admin\",\n        \"Role\": \"Role\"\n    }\n}\nThe current version will display [object Object] because we forgot to refactor our view. Your version on the other hand will display Admin.\nSo unless @ocombe thinks differently, I only see downsides to this approach.. Oh, I totally forgot about the use case that you sometimes want to get an object back in your JavaScript with multiple translations so you can work with that one instead of getting values one by one.\nBecause of all these downsides, I'm going to close this PR. Feel free to provide other arguments why we should reconsider.. @ocombe Would we be able to inject APP_BASE_HREF somewhere in order to prefix the path with that value?. Why aren't you looking for a node specific solution? Like i18n-node for instance? ngx-translate is, like the name suggests, an Angular library. So as long as you aren't rendering your pdf content with Angular, I don't think this library can be of much help for you.. Not that we're aware of. The most used/famous one in node-land is probably i18n. You might be able to configure it to behave the same way but I'm not sure about it.. Just wondering what the cause of this issue is. Which plugin/dependency uses cp internally? . Can you create a plunkr for that behavior because I'm not seeing it. When using an Array of keys, it should always return an object. Either when using 1, 2, 3 or more values.. Have a look at the docs on how to render html https://github.com/ngx-translate/core#5-use-html-tags. I think what you're trying to do is not a good idea. Why not just do it like this?\njson\n{\n    \"nav\": {\n        \"home\": \"inicio\",\n        \"settings\": \"configuraciones\"\n    }\n}\nhtml\n<nav>\n    <ul>\n        <li><a [routerLink]=\"/home\">{{'nav.home' | translate}}</a></li>\n        <li><a [routerLink]=\"/setting\">{{'nav.settings' | translate}}</a></li>\n    </ul>\n</nav>\nThis (to me) looks much much cleaner then what you're trying to do. I always think like this, it should be able to send the translation file to a translator with no knowledge of the framework or whatsoever. Also, this way all the translations are decoupled from the implementation. If tomorrow you decide that the route should be named /settings instead of /setting, you will have to replace all of those in every translation file you have. That's definitely not what you want.. Going to close this. Let us know if you still want to discuss this.. I have no clue what you're trying to do here. Is that (child)template the template of the (parent) component or is it a separate component?\njs\n@Component({\n    selector: 'child',\n    template: '<h1>{{ title | translate }}</h1>'\n})\nexport class ChildComponent {\n    @Input() title: string;\n}\n```js\n@Component({\n    selector: 'parent',\n    template: ''\n})\nexport class ParentComponent {\n    title: string;\nconstructor() {\n    this.title = 'TITLE';\n}\n\n}\n```. Please let us know what you've tried before asking questions because at this point, the only thing I can say is, read the documentation.. Attaching pipes to the platform pipes like you are trying to do does not work anymore in Angular.\nBecause it is in a separate module, you will probably have to work with a SharedModule. If you don't want to work with a SharedModule (which is best practice though), just make sure you import TranslateModule in the DiscoveryModule.. From the docs\n\nNote: Never call a forRoot static method in the SharedModule. You might end up with different instances of the service in your injector tree. But you can use forChild if necessary.\n\nThus, only import TranslateModule.\nYou can find more about the SharedModule approach on the Angular documentation.. Just keep app module with what you have. It configures ngx-translate and sets up all the services which is fine. And then in your sub-module, just import TranslateModule and it should work.. Yes, by using the translate pipe.. I swear I saw this coming by a week or so ago, so it's a duplicate. Just can't find it for now :). Keeping it open though.. It looks like the tool you are using to build your application doesn't copy your translation files. Make sure the file en-us.json exists in the directory assets/i18n. If not, make sure you copy them over to the dist directory.. So you tried the following as well right?\njs\ntranslateService.get(\"Config.\"+appName+\".\"+settingId+\".Label\").subscribe(result => {\n    console.log(result);\n});\nCan you check the network tab to see if the file is actually loaded?. By injecting the service and use get orinstant https://github.com/ngx-translate/core#4-use-the-service-the-pipe-or-the-directive . ```js\n    constructor(private translate: TranslateService) { }\nsaveGroup() {\n  this._api.send(urlValues.addAdminGroup, 'Post', this.groupForm.value).subscribe(\n    res => {\n      sweetalert('Success', this.translate.instant(res.content.msg), 'success');\n      this._router.navigate(['./administrators']);\n    },\n    err => sweetalert('Error', err.content.msg, 'error')\n  )\n}\n\n```. Yes totally, it's the exact same way.\njs\nsweetalert(this.translate.instant('success'), this.translate.instant(res.content.msg), 'success');. Just wondering why you would want that? That means that if one language is 1MB in size, you will ship 3MB of data to your end-users if you offer 3 different languages.. Also, I noticed that the default example already uses an export function, so not sure if the AoT section still makes sense.. Hahaha, true :D!\nIn Angular-CLI, you always need an export function. The default ng serve doesn't work with a lambda expression either so it's definitely a good thing to just use a consistent example. For people who are using SystemJS or a custom webpack config and think to be a smarty pants by using a lambda, there is still the AoT section for them as well.\nSo let's just keep it like this :).. duplicate https://github.com/ngx-translate/core/issues/397#issuecomment-275368243. No problem :). It's ngClass, not ng-class. You should also quote the class names\nhtml\n<div [ngClass]=\"{'black': browserLang == 'en', 'red': browserLang == 'de'}\" >. Is this correct?\n\nngx-translate version: 3.1.0\n\nWe are currently at 6.0.0. Not sure if the current version works in IE10 though, just wondering if you tried upgrading.. Make sure to import TranslateModule in the module of your component.. It would be very helpful if one of you could create a plunkr to represent this problem.\nAlso make sure to import TranslateModule in your sub modules, not only in your app module.. @insanehong Did you read the answers? Are you 100% sure you added the TranslateModule to the imports array of your submodule as well? Recreate this with a plunkr and I will be happy to help.. > I would suggest adding this to the documentation because it's not obvious that the TranslateModule needs to be included in both arrays\nYes this! And it is documented right here. This is not ngx-translate specific, you have to do it in for everything, that's just how the module system works. If you want to be able to use *ngFor in your templates for example, you have to import CommonModule every single time.. Make sure to import TranslateModule in the module where you define the provider.. Seems like a Visual Studio issue rather then a ngx-translate issue. Can you compile the project? Have you tried turning it off and on again?. Make sure to use service.use ('nl'); somewhere at the start of you application. Then you will get the correct values.. Open developer tools and look in the network tab. Can you see it request the en.json file successfully? If not, make sure the json files are being copied over to the dist folder where the application is being served.. One thing that might be the reason why you think it's not working is because the result is not an array but an object with key-value pairs.\nTry the following things, what does this output?\n```js\nthis.translate.get('LOGIN').subscribe(result => {\n    console.log(result);\n});\nthis.translate.get(['LOGIN','LOADING']).subscribe(result => {\n    console.log(JSON.stringify(result));\n});\nconsole.log(this.translate.instant('LOGIN'));\n``. That's really weird. I have no clue why that's not working. If you're able to setup a basic ionic application withngx-translate` which shows this behaviour and publish it to GitHub, we can have a closer look. I don't see any reason why this shouldn't work.. That has nothing to do with the type definitions. It's because you're probably configuring the module with a fat arrow function. Have a look at the AoT section of the documentation.\nThis is correct\n```js\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [Http]\n            }\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nThis is wrong\n```js\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: http => new TranslateHttpLoader(http, './assets/i18n/', '.json'),\n                deps: [Http]\n            }\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```. What about this?\nhtml\n<select required [(ngModel)]=\"model.type\">\n    <option *ngFor=\"let type of types\" value=\"{{type | translate}}\">{{type | translate}}</option>\n</select>. So what's wrong with this?\nhtml\n<select required [(ngModel)]=\"model.type\">\n    <option *ngFor=\"let type of types\" [value]=\"type\">{{type | translate}}</option>\n</select>\nmodel.type is the type from the database/server with the value TYPES.CARE and will select TYPES.CAR from the option list which will render the translated value, hence the {{type | translate}}.\nIf you have a plunkr example that shows what you want, please share because I don't see any problem right now.. But what I suggested doesn't give you Car in chinese in the database. If gives you TYPES.CAR in the database but renders Bla (Car in chinese ;)) in the dropdown. Might be missing something here though, not sure :p.. Don't see any valid reason to do that. Just repeat the Hi and make it inline. This would just add complexity to the library without a real benefit imo.. That's the thing, don't use the TranslateHttpLoader because as the name implies, it's loading over Http.\nUse the loader defined by @kamok and return the data that you want.\n```js\nexport class TranslationLoaderService implements TranslateLoader {\nconstructor(private http: Http) {\n  }\ngetTranslation(lang: string): Observable {\n    if (lang === 'en') {\n      return Observable.of({\n        HELLO: 'Hi there'\n      });\n    }else {\n      return Observable.of({\n        HELLO: 'Hola'\n      });\n    }\n  }\n}\n```\n. Check in the network tab if the files are loaded correctly. Make sure your i18n files are copied over to the ionic build directory as well.. What do you mean with \"change the language in the constructor\"? Try doing it in ngOnInit.. Like @bedag-moo said, it has nothing to do with this library so open an issue in the Angular repository instead.. I don't think @balr404 already created one. So go ahead and do it yourself :).. Would be happy to look into it if you are able to reproduce this in a GitHub repository.. Because you don't always want to reload your entire application when someone switches the language. Angular i18n forces you to build the application per language.. Try creating a minimal example in plunkr or on GitHub that reproduces this issue.. From the documentation\n\ninstant(key: string|Array<string>, interpolateParams?: Object): string|Object: Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the default file loader is asynchronous. You are responsible for knowing when your translations have been loaded and it is safe to use this method. If you are not sure then you should use the get method instead.\n\nSo because the comp component is initialised immediately, at that point, the translation is not yet loaded so in that case you can only use the get method. Best practice is to use the pipes though, but I agree that sometimes you need the service to load a translation. For instance when you want to show a toast notification etc.. Well yes, see the description of the instant method. Locally this wouldn't cause problems because loading data from your localhost is almost instant. But when you deploy your app, loading the translation file will cause a delay. So I think you will have to subscribe to the get method in order to fix it. Nothing we can do here I'm afraid.. TranslateService.use returns an Observable so I believe you can subscribe on that one and if it completes, the language is loaded.. Make sure to import TranslateModule in your lazy loaded module as well. Or better, add TranslateModule to a SharedModule and import that SharedModule to every feature module.. Have you looked at the AoT section? If yes, provide me with a minimal reproduction case (GitHub repository for instance) and I'll see what I can do. Not much time now to dive into it myself.. Glad it worked out :). No sorry, haven't used ionic that much. This is an ionic issue so please file an issue over there.. I don't agree on this one. The translation might be left blank on purpose.\nI don't see the link with #377.... One example where you might want to have a blank translation is the following (and it happens to be the case in an application of mine).\nA user can track it's health data with the application. This data could be either the weight of the user and the number of steps he did that day. All of the data is dynamic, the only thing that you know is the value and the type. Now you can easily just loop over that list like this\nhtml\n<ul>\n    <li *ngFor=\"let datapoint of datapoints\">\n        {{ datapoint.value }} {{ 'datapoint.' + datapoint.type + '.unit' | translate}}\n    </li>\n</ul>\nIn case of the weight, the list item will be rendered like 76 kg for instance. But steps don't have a unit so that translation will just be empty and my translation will look like this.\njson\n{\n    \"datapoint\": {\n        \"weight\": {\n            \"unit\": \"kg\"\n        },\n        \"steps\": {\n            \"unit\": \"\"\n        }\n    }\n}\nIf the value is set to an empty string, in my opinion this doesn't mean the translation doesn't exist and it should definitely not use a fallback.. You can find more information in this discussion over here https://github.com/ngx-translate/core/issues/505#issuecomment-294913354.\nFrom the documentation\n\ninstant(key: string|Array<string>, interpolateParams?: Object): string|Object: Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the default file loader is asynchronous. You are responsible for knowing when your translations have been loaded and it is safe to use this method. If you are not sure then you should use the get method instead.. Load the translations via .use() in the ngOnInit of your AppComponent. In some cases (slow server response) you might still end up with not translate values. That's why we recommend using the pipe as much as possible. As the docs describe, that's just how instant works. Nothing we can do about it I'm afraid.. Why? That would go passed the reason why we have dependency injection. How would you mock that in tests for instance?. I think it would be best to pull this in a separate package. People who don't need it shouldn't be dependent on messageformat. On mobile now so can't really dig in the code. I'll do my best to take a look in the coming days.. Yes, that's almost always the reason why it fails. Because a SPA always starts from index.html, if the translation files can not be found it just returns the index.html file. So like @tsvetan-ganev suggests, take a look in your chrome devtools to the network tab and make sure the correct path is loaded.. Make sure to import the TranslateModule as described here. If that doesn't work, try setting up a plunkr to reproduce this. Just throwing in component code isn't really helpful as this is most likely a problem with configuring the module.\n\nAlso, there is an issue template for a reason. Because it helps us to identify the problem faster.. I don't see any reason why it shouldn't work. The only way we can debug this decently is if you provide us with a git repository or a plunkr with a minimal application which reproduces this behaviour.. I also noticed that you still run ng2-translate, I'd recommend upgrading to ngx-translate.. Here's a basic plunkr to start from. https://plnkr.co/edit/01UjWY3TKfP6pgwXKuEa?p=preview. It should work. Are you sure the correct languaje.json file is loaded? Check the network tab. \nWhat does {{'HOME' | translate | json }} render?. Like @ocombe mentioned, this will be overwritten and isn't going to be pushed to npm. If you want to do what you're trying to do, you'll have to change this line in the TranslateService to something like this.\n```js\n/*\n * Gets the translated value of a key\n * @param key \n * @param interpolateParams\n * @returns {any} the translated key, or an object of translated keys\n /\npublic get(key: string, interpolateParams?: Object): Observable;\n/*\n * Gets the translated value of an array of keys\n * @param key \n * @param interpolateParams\n * @returns {any} the translated key, or an object of translated keys\n /\npublic get(key: string[], interpolateParams?: Object): Observable;\npublic get(key: string | string[], interpolateParams?: Object): Observable {\n    // Implementation goes here\n}\n```\nThis is how TypeScript implements method overloading. This way, when you type get, it will show 2 options instead of 1. The actual implementation method is hidden from autocompletes.. You can write as many overloads as you want.. @erhimanshugarg The example in the README is clear enough https://github.com/ngx-translate/core#4-use-the-service-the-pipe-or-the-directive.\njson\n{\n    \"HOME\": {\n        \"HELLO\": \"hello {{value}}\"\n    }\n}\njs\ntranslate.get('HELLO', {value: 'world'}).subscribe((res: string) => {\n    console.log(res);\n    //=> 'hello world'\n});. See #495 . Add HttpClientModule to your imports.\n```ts\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n@NgModule({\n    imports: [\n        HttpClientModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient]\n            }\n        })\n    ]\n})\n``. Use@ngx-translate/http-loader0.1.0 or start using@angular/common/httpinstead of@angular/http. The last option however is only possible if you use Angular 4.3+. I told you what you should do in my previous post. Like I said, install@ngx-translate/http-loader` 0.1.0 instead of the latest one.\nSo, instead of running this command, as mentioned by the docs in the very beginning\nnpm install @ngx-translate/core @ngx-translate/http-loader --save\nRun this command\nnpm install @ngx-translate/core @ngx-translate/http-loader@0.1.0 --save. I don't use Ionic myself. If Ionic doesn't work with Angular 4.3+, then the only option is to use http-loader@0.1.0.. C#? This is an Angular module, not a C# library.. Listen for changes with the onLangChange event and send it to your backend with an API to change the user setting or something.. @ocombe maybe we should add a question/note to the template asking if the issue is still present in the latest version. Not sure if it would help though.... Have you imported TranslateModule in you feature module?. Did you add SharedModule to your feature module imports array? Just importing like import { TranslateModule } from '@ngx-translate/core'; is not enough, you need to add it as well to your imports list. Just checking if you did everything :).. Used ngOnInit because it's best practice to keep the constructor as light as possible.\n. You mean browserLang === undefined?\n. I was referring to the browserLang check, it doesn't use typeof. So probably it should be changed to\njs\nif(typeof browserLang === 'undefined') {\n. Add the private modifier and remove the _.\nprivate dispose(): void {\n. single quotes -> changes['interpolationParams']\n. Why the underscores?\n. It's bad practice to rename the bindings like this. Why not @Input() translate: string directly?\n. No unrelated changes\n. Angular <4.3. ",
    "shadow999": "@ocombe I am using tsc with version 1.7.5. And I exclude node_modules folder. Is it possible to put ts files aside d.ts files and make it work with ng-cli as well?\n. @ocombe If ng-cli works with d.ts, it would be great then.\n. root\n   |- app\n     |- modules\n        |- <my ts files/folders>\n   |- node_modules\n   |- tsconfig.json\nInside tsconfig.json, I set root directory to be app/modules. And exclude node_modules in tsconfig. I also use gulp to manage compiled ts files. \nNormally, compiled ts files would not be inside app/modules folder which is following the tsconfig. However, with latest ng2-translate, compiled ts files would be under app/modules, which means tsc considered my project root folder is the root folder for all ts files.\n. ",
    "clouless": "I am using this setup: https://github.com/AngularClass/angular2-webpack-starter\nWhich uses webpack + tsd.\nI am getting some errors when I try to use ng2-translate. Maybe I am doing something wrong, so I would appreciate any help :smile: \nIn my app.ts https://github.com/AngularClass/angular2-webpack-starter/blob/master/src/app/app.ts\nimport {TranslateService, TranslatePipe} from 'ng2-translate/ng2-translate';\n...\n@Component({\n  selector: 'app',\n  providers: [ ...FORM_PROVIDERS, TranslateService ],\n  directives: [ ...ROUTER_DIRECTIVES, RouterActive ],\n  pipes: [TranslatePipe],\n...\nexport class App {\n  name = 'Foo';\n  constructor(translate: TranslateService) {\n      //translate.setDefaultLang('en');\n      //translate.useStaticFilesLoader('assets/i18n/', '.json');\n  }\n}\nI get the following error in the browser:\n\nWhen I try to configure translationService like this:\nconstructor(translate: TranslateService) {\n      translate.setDefaultLang('en');\n      translate.useStaticFilesLoader('assets/i18n/', '.json');\n  }\nI get these errors:\n\nMaybe you could have a look at the angular2-webpack-starter and try to use ng2-translate with it?\nI would really appreciate it.\n. Ok thx. I tried v1.6.3 and get the same errors. I think it is because the webpack build requires the ts files to be named without .d.ts and I don't know where to set \nSystem.config({\n    packages: {\n        \"/ng2-translate\": {\"defaultExtension\": \"js\"}\n    }\n});\nAnd take your time, I am in no rush. I like your plugin very much.\n. ",
    "syrix": "Hi,\nthanks for this awesome library :)\nI am also using this setup: https://github.com/AngularClass/angular2-webpack-starter and get the same warnings as gruenebe.\nThat being said, I can use your library just fine. As reference for gruenebe: I'm not using the StaticFilesLoader and my app.ts has this constructor:\nconstructor(translate: TranslateService) {\n    translate.setDefaultLang('en');\n    translate.setTranslation('en', {\n      \"test\": \"A test string\",\n      \"test2\": \"Another test string\"\n    });\n    var user_lang = 'en';\n    translate.use(user_lang);\n}\nApparently the warnings are caused by source maps that reference non existing files. See this issue for a similar problem with RxJS which is referenced by an issue in angular2-seed.\nThe source maps for ng2-translate, e.g. ng2-translate.js.map, reference typescript files, e.g. ' \"sources\":[\"ng2-translate.ts\"] '. However, those .ts-files are not included in the npm-package which leads to warnings during the build.\nA quick fix for this problem is to just delete the reference to the source maps at the bottom of all .js files in node_modules/ng2-translate, which is a very bad idea for obvious reasons.\nWould it be possible for you to fix the source maps by adding the referenced *.ts files to the npm-package?\nIf that is not possible, could you maybe just exclude the source maps from the package?\nThanks a lot for your work. If you need any more input to resolve this isssue, just let me know :)\n. ",
    "PascalPrecht": "I don't know if there's any event system implemented in ng2-translate yet, but if there's something like a translate service, it could expose an observable which fires when the languages changes. Then the pipe could subscribe to that service and it could use the changedetector ref to mark the path til root to be checked.\n. ",
    "baio": "Honestly ngxtranslate doesn't play well with OnPush change detection, for every component which uses translate pipe you has to write a lot of same boilerplate code, so think twice before use this lib if you want use it alongside with OnPush.\nHas to write some helper pipe to workaround this https://gist.github.com/baio/e1da9826806ae3bad639b194958cbdcc\n. ",
    "jingignoli": "Wooo this was my problem, i have install via github instead of npm !\nThank you for your support.\nJulie.\n. ",
    "Spittal": "\"angular2\": \"2.0.0-beta.3\"\n\"ng2-translate\": \"^1.7.0\"\n. Take a look here\nhttps://github.com/Spittal/ng2-translate-test\nThis is the exact code I'm working with ATM\nit was forked from https://github.com/AngularClass/angular2-webpack-starter\n. Thanks!\n. ",
    "zcsongor": "Thank you!\n. ",
    "apavillet": "It should work if it returns it as a value, not using the decorator but routeConfig in the constructor.\nDo you have a estimate release date for this feature?\nThank you \n. I \"think\" ( please note it's untested ) we could configure routes in constructor\nhttps://github.com/angular/angular/blob/master/modules/angular2/src/router/router.ts#L139\njs\nrouter.config([\n   { 'path': '/', 'component': IndexComp },\n   { 'path': '/user/:id', 'component': UserComp },\n ]);\nAfter all a decorator is only a decorator :)\n. What I planned to do was configuring my routes in the constructor like this (might not be the right syntax):\nrouter.config([\n{'path': _translateService.get('/login'), component:IndexCmp}\n])\nWith the observable (returned by get function) I cannot figure a way to return the value, and it fails. \nMaybe I'm doing it wrong and would be happy to be corrected but I thought that returning it directly would solve half the problem ;)\n. Maybe using ngInit to collect them would help then, I cannot figure out when the constructors is called in that lifecycle\nhttps://angular.io/docs/ts/latest/guide/lifecycle-hooks.html\n. @ocombe \nI'm trying the instant feature and I'm getting an error while doing : this._translateService.instant('LOGIN')\nEXCEPTION: TypeError: Cannot convert undefined or null to object in [null]\nThe error is happening here :\n TypeError: Cannot convert undefined or null to object\n    at Function.keys (native)\n    at step (http://localhost:5555/node_modules/ng2-translate/src/translate.parser.js:37:20)\n    at Parser.flattenObject (http://localhost:5555/node_modules/ng2-translate/src/translate.parser.js:48:9)\n    at TranslateService.getParsedResult (http://localhost:5555/node_modules/ng2-translate/src/translate.service.js:199:46)\n    at TranslateService.instant (http://localhost:5555/node_modules/ng2-translate/src/translate.service.js:248:21)\n    at AppCmp.ngOnInit (http://localhost:5555/app/components/app.js:44:44)\nI'm sure it's has to do with something not being ready yet, do you have any idea what?\n. Yet it is, the translations file are loaded async too I guess ?\n. Ok so for anyone interested I made it work.\nThis is not beautiful and I would love improvements but it does work for now :\n// Subscribe to observable, @all : can it be done somewhere else, or anyway else ?\n    this._translateService.use(userLang).subscribe(\n      data => this.configRoute()\n    );\nUse your function and do something like this :\n{ path: '/:lang/'+this._translateService.instant('LOGIN_URL'), component: LoginFormCmp, as: 'Login' },\nFirst thanks @ocombe for the plugin and as I said I would be happy to hear about any improvement you guys make to this \n. It's working fine for now, only problem I had was with the first child route, I had to define the first one in the decorator, without translations ( which is ok since the path is / )\n@RouteConfig([\n  { path: '/', component: HomeCmp, as: 'Home', useAsDefault: true }\n])\nThe problem is RouterLink in template do not seem to recognize it otherwise, but it might be something I'm doing wrong :)\n. For anyone trying this you might have a problem with your html trying to find routes before they are initiliazed.\nI had to add an *ngIf with a boolean parameter waiting for routes to be loaded.\n@ocombe You can close this if you need or keep it as a tutorial :)\n. ",
    "guillaumeleone": "Same problem.\nI don't understand, because in this post https://github.com/angular/angular/issues/5755, it say there is a problem with es6-shim lib.\nBut in your showcase project, you use this lib.\n. Oh thank you. Here an example with this problem: https://github.com/guillaumeleone/ng2-cli-translate\nIt happened when I added TRANSLATE_PROVIDERS in bootstrap file.\n(The template was generated with angular-cli)\n. Hi, I use angular-cli, and I'm trying to import ng2-translate module, but I've got this same error when I ran my project.\nFurthermore, with angular-cli, for the moment, there is no way to import automatically third party libs\n. ",
    "qsahmed": "I have the same issue, \n```\nimport {HTTP_PROVIDERS} from 'angular2/http';\nimport {TRANSLATE_PROVIDERS} from 'ng2-translate/ng2-translate';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {Application} from './app';\nimport {ReviverService} from \"../service/reviver\";\nbootstrap(Application, [HTTP_PROVIDERS, TRANSLATE_PROVIDERS, ReviverService]);\n```\nng2_translate_1.TRANSLATE_PROVIDERS is undefined. \n. Thanks for the quick reply. \nI am using 1.11.0 \n\"karma-phantomjs-launcher\": \"^0.1.2\",\n    \"ng2-translate\": \"^1.11.0\",\n    \"phantomjs\": \"^1.9.8\",\n. ",
    "kemsky": "This error message is a consequence, original error is that injector could not resolve dependency. Almost impossible to trace unresolved component without putting console.logs into framework code (_constructDependencies).\n. ",
    "be-codified": "I apologise, this was an error triggered by some other issue.\n. @ocombe it also works with hardcoded string.\n. Thank you for the information. I am trying to include it like this:\n```\nimport { TranslateService, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\n@App({\n  templateUrl: 'build/app.html',\n  providers: [\n    HTTP_PROVIDERS,\n    provide(AuthHttp, {\n      useFactory: (http) => {\n        let config = new AuthConfig;\n        config.tokenName = 'accessToken';\n        return new AuthHttp(config, http);\n      }\n    }),\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService, JwtHelper, AuthService, NoticeService, ConversationsService, MessagesService]\n})\n```\nBut getting error Cannot resolve all parameters for 'function (http) {\n'(?). Make sure that all the parameters are decorated with Inject or have valid type annotations and that 'function (http) {\n' is decorated with Injectable.\nI have changed code only in app.ts (using Ionic2), what modifications should I do on pages? Thank you in advance.\n. Thank you.\n. ",
    "elliotwesoff": "What if we have the HTML attribute tied to a component property? For example...\n[title]=\"{{ 'HELLO' | translate }}\"\nOr even using a method like this in the component doesn't work for me.  It just puts undefined in the view:\n[title]=\"fetchTranslation('HELLO')\"\nfetchTranslation(key: string, params = {}) {\n    this.translate.get(key, params).subscribe((res: string) => {\n        return res;\n    });\n}. Got it.  Thanks for the quick reply! :)  any idea how to get the service thing working though? That would really help with keeping the views tidy.. Worked like a charm! Thank you \ud83d\udc4d\n\nBy the way, is there any extra documentation available? Like would I have needed to read the source to find out about that method?. Sorry, I just figured it out.  The InMemoryWebApiModule was intercepting the HTTP loader's request.  Thanks for the quick reply!. @LeHoanVu if you're using the InMemoryWebApiModule for mock network requests, you'll need to remove it.  In my case I ended up writing my own static loader to ensure that everything is loaded before attempting to process translation keys.. Hey @mike1130694 , I unfortunately cannot share any code with you as I'm legally not allowed and the repository is private. I can tell you though that you add a reference to your synchronous loader class in the app module, where you would normally import the TranslateModule. For the synchronous loader class, it's simply an Observable that resolves immediately, and inside you load the translation json file. I'm pretty new to Angular myself so I know how tricky it can be. However, Angular 4 now includes a translation library which may be easier to implement than a synchronous loader for this module.  Check it out here: https://angular.io/guide/i18n. ",
    "cryptoplastic": "I have the above working, but I become stuck when using data-title on tables. \ndata-title=\"{{fetchTranslation('name')}}\"\nfor example does not work. \nIs there a was to get this working with data-title? This is a key property for displaying data on mobile. \n. if you are using the cli, you may need to include it in the paths folder in angular-cli.json. The solution was quite easy in the end: \n[attr.data-title]=\" 'HELLO' | translate\". ",
    "chaimmw": "I had this problem, \n[title]=\"'Location' | translate\" shows a tool-tip\nbut,\n[title]=\"'Historical Development' | translate\" does not show a tool-tip\nsame for\ntitle=\"{{ 'Historical Development' | translate}}\"\nbut when I remove the translate pipe -\ntitle=\"'Historical Development'\"does show a tool-tip. I was able to run tests with configuration mentioned above, but, on one of my test's, when I used the pipe I got this error \"Error: Parameter \"key\" required\" but when I switched to directive it did work?\n// does not work\n        <span class=\"status\" *ngIf=\"status\" [ngClass]=\"{\n          idle: data.status === 'idle',\n          on: data.status === 'on',\n          off: data.status === 'off',\n          disc: data.status === 'disc'\n        }\">\n        {{data.status | translate}}\n      </span>\n// works\n        <span class=\"status\" *ngIf=\"status\" [ngClass]=\"{\n          idle: data.status === 'idle',\n          on: data.status === 'on',\n          off: data.status === 'off',\n          disc: data.status === 'disc'\n        }\" translate>\n        {{data.status}}\n      </span>. ",
    "kbugala": "Thank you Daniel,\nI could not get the resource file I wanted because I assumed (without checking it) that I can set the suffix as an empty string. \nHave a nice day!\n. The module is still trying to get the translation file from http://192.168.2.2:5555/i18n/en.json and that returns 404 despite the fact I specified another location, here is the snippet\nvar prefix = 'http://192.168.2.2:1234/api/v1/localisation/resources';\nvar suffix = '.json';\ntranslate.useStaticFilesLoader(prefix, suffix);\nany ideas why the prefix is being ignored?\nI'm using the latest ng2-translate module - 1.7.3\n. OK, one step closer :)\nThe app makes 2 requests for the en.js , as follows:\nhttp://192.168.2.2:5555/i18n/en.json - 404\nhttp://192.168.2.2:1234/api/v1/localisation/resources/en.json - 200\nI've registered the TranslateService in bootstrap file and then in the root component, as follows:\nmain.ts\n```\nimport {provide, enableProdMode} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ROUTER_PROVIDERS, APP_BASE_HREF} from 'angular2/router';\nimport {HTTP_PROVIDERS} from 'angular2/http';\nimport {AppComponent} from './app/components/app.component';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\nimport 'rxjs/Rx'; // this would import all RxJS operators\nif ('<%= ENV %>' === 'prod') { enableProdMode(); }\nbootstrap(AppComponent, [\n  ROUTER_PROVIDERS,\n  provide(APP_BASE_HREF, { useValue: '<%= APP_BASE %>' }),\n  HTTP_PROVIDERS,\n  TranslateService\n]);\n```\napp.ts\n```\nimport {Component, ViewEncapsulation} from 'angular2/core';\nimport {ROUTER_DIRECTIVES, RouteConfig} from 'angular2/router';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\n@Component({\n  selector: 'sd-app',\n  moduleId: module.id,\n  templateUrl: './app.component.html',\n  encapsulation: ViewEncapsulation.None,\n  directives: [ROUTER_DIRECTIVES]\n})\n@RouteConfig([\n  { path: '/',      name: 'Home',  component: HomeComponent  }\n])\nexport class AppComponent {\n     constructor(public translate: TranslateService) {\n //set the app language\n  var appLang ='en';\n\nvar prefix = 'http://192.168.2.2:1234/api/v1/localisation/resources';\nvar suffix = '.json';\ntranslate.useStaticFilesLoader(prefix, suffix);\n\n var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n    userLang = /(fr|en)/gi.test(userLang) ? userLang : appLang;\n    translate.setDefaultLang('en');\n    translate.use(userLang);\n}\n\n}\n```\n. Hi Olivier\nYou were right, I had another service which was using it, however I was expecting the TranslateService to be injected from DI because it was already registered in main bootstrap file.\n```\nimport {Injectable} from 'angular2/core';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\n@Injectable()\nexport class LanguageService {\n  //private languages = ['en', 'fr'];\n  private currentLang:string;\nconstructor(private translate: TranslateService) {\n        if (localStorage.getItem('lang') !== null) {\n            this.currentLang = JSON.parse(localStorage.getItem('lang'));\n            translate.use(this.currentLang );//transaltion module\n            console.log('Reading Lang from the LocalStorage');\n        } else {\n            //default languages\n            this.currentLang= 'en';\n            localStorage.setItem('lang', this.currentLang);\n            translate.use(this.currentLang );//transaltion module\n            console.log('Lang not found in the LocalStorage, setting a default to: en');\n        }\n  }\nget(): string {\n    return this.currentLang;\n  }\n  set(value: string): void {\n    this.currentLang= value;\n    //save \n    localStorage.setItem('lang', this.currentLang);\n    this.translate.use(value);// I ASSUME THIS LINE IS CREATING ANOTHER INSTANCE OF THE TRANSLATE SERVICE?\n    console.log('Saving cart to LocalStorage');\n  }\n}\n```\nThank you very much for your help!\n. ",
    "ribizli": "This issue is eliminated if my PR #49 will be accepted.\n. The current implementation (state after PR) is: current lang -> default lang -> missing handler + key (the MissingTranslationHandler is called only after the default language fails).\nWouldn't be a useful feature to let the MissingTranslationHandler return a fallback value, too?\n. I prefer (if it matters ;) ) the first fallback to be the default language, and only after it fails the MissingTranslationHandler kicks in, e.g. wrapping the key with ?key?, or similar.\n. There might be some default strings, which are the same in all languages. So first fall back to the default (the only one where it is defined) language for it.\n. But with the 'empty' MissingTranslationHandler how can you handle missing default language keys? Both ways there are some drawbacks.\n. You need to get access to TranslateService for that, don't you? Anyway the handler in the current form has not to many feature. Providing reference to translations would be a good point.\n. During the PR I recognized that the bundles/ng2-translate.js is also checked in. I think it is unneeded, since prepublish creates this file for npm, right?\n. For that there is: https://npmcdn.com/ng2-translate/bundles/ng2-translate.js\n. In a class you can have only one superclass but more implemented\ninterfaces. It's a minor thing, anyway.\nOn Mon, Feb 29, 2016 at 11:23 AM, Olivier Combe notifications@github.com\nwrote:\n\nYou can implement an abstract class as well. How is it more flexible with\nan interface ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/48#issuecomment-190143056\n.\n. I'd replace the abstract class with interface.\n\nOn Mon, Feb 29, 2016 at 11:35 AM, Olivier Combe notifications@github.com\nwrote:\n\nHmm good to know, but can you write an interface that implements the\nabstract class and then implement this interface ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/48#issuecomment-190146645\n.\n. I've just stumbled into this thing when I was reading the source. For me the rule of thumb is to use interface if I don't need to deliver default functionality. Since the abstract class don't have any implemented feature, it could be cleaner to be a simple interface.\n\nThe test implementation shows also, that this abstract class is anyway used as interface only:\ntypescript\nclass Missing implements MissingTranslationHandler\n. I can prepare a PR for this and also create an NG2_TRANSLATE_PROVIDER for the default configuration. This is the proper angular2 way (like HTTP_PROVIDERS).\n. You can (should!) also do that via DI. I'm against the setter version. But\nyou decide.\n. In providers of component you can use the same provide method like in\nbootstrap.\n. @ocombe I can do a PR for the dots in key issue if you like.\n. I think we need here some convention. We cannot cover all the cases. E.g.:\njs\n{\n    a: {\n        b: {\n            c: 'a/b/c'\n        }\n    },\n    'a.b': {\n        c: 'a.b/c'\n    },\n    'a.b.c': 'a.b.c'\n}\nWhich one we return on 'a.b.c'? (The current implementation does the first one)\nActually I like the current implementation, since it prefers the nested version against the dotted keys.\n. ",
    "antoineol": "Hi, I am having an issue which seems to be the same:\n- A key is missing in the current language\n- It tries to fallback to the default language\n- For that, it tries to read the key in the default language translations but the default language translations are not loaded (only the current language).\nIt results in an exception like TypeError: Cannot read property '...' of undefined where ... is the key of the translation I am trying to load.\nVersion: 2.1.0\nWorkaround: manually load the default language translations.\nts\ninitializeTranslateServiceConfig() {\n    this.translate.setDefaultLang(Conf.defaultLang);\n    this.translate.use(Conf.lang);\n    this.translate.getTranslation(Conf.defaultLang).subscribe();\n}\nBut I don't think it is expected, and may fail for early translations (while the app is loading). Any idea about that? Did I miss something in the library recommended usage?\nThanks!\n. ",
    "Svoig": "Are there any plans to support the 'key is missing -> missingTranslationHandler -> defaultLanguage' flow? Or alternatively, to allow the use of a custom TranslatePipe in the TranslateModule configuration? That would allow for the same flexibility.. @MichaelPolla How did you prevent the default TranslatePipe from being loaded?. ",
    "Zuzon": "Thank you for your response!\n. ",
    "sventschui": "It's easier to declare an event handler method (in users code) using handle(event: LangChangeEvent) than handle(event: { lang: string, translations: any }). This will also hint the user on compile time if you change the structure of LangChangeEvent in a future release.\nAdding the type is not necessary since ts will infer the type from the initial assignment.\n. ",
    "Sophia-nguyen": "Thanks @ocombe, It work but when I use <footer>{{ 'footer.lbl.title' | translate }}</footer>, It can not translate, it show footer.lbl.title. How can I do it?\n. This is my json file:\n```\n{\n    \"footer.lbl.title\": \"Footer\",\n\"login.lbl.email\": \"E-mail\",\n\"login.lbl.pass\": \"Pass\",\n\"login.btn.login\": \"Login\",\n\n}\n```\nAnd It loaded successfully.\n. yep, It work well for me, thanks @ocombe.\n. ",
    "doczoidberg": "I use angular-cli which is based on ember-cli\n. I think ng install isn't supported yet\n. thanks very much, I copied the ts-files into my project and added TRANSLATE_PROVIDERS to my bootstrap. Seems to work for now\n. ",
    "Dinistro": "This will not work if there are keys like this:\n'key' : 'value',\n'key.subkey' : 'another value'\n. @ocombe In my case, we only have dots and I think that my example\n'key' : 'value',\n'key.subkey' : 'another value'\nis no redundancy. key.subkey exists and is not undefinied, so it should be translated.\nI understand the convention problem of @ribizli and his solution, but this is not the same as my example. \nNote:\nI know, that its not possible to create something like this with objects, but I think, that this should work (or at least it worked with the angular-translate for angular1). \n. @ocombe I created another Pull Request that solves my Issue. \n. ",
    "Urigo": "@mjwheatley can you post this issue on the Angular2Meteor repo?\n. @mjwheatley now everything is updated and you can use any npm library you want with angular2-meteor.\n@ocombe I think we can close this.\n@mjwheatley if you still have issues, you can open new ones on the angular2-meteor repo\n. ",
    "mjwheatley": "It looks like Meteor 1.3 will be the solution with the addition of the modules package that will allow you to use native npm modules on both client and server.  However, @Urigo has not yet published the angular2-meteor and angular2-meteor-auto-bootstrap node modules for use with Meteor 1.3 as referenced in the Quick Start section of the angular2-meteor package readme.\n. @ocombe would you be willing to publish this as an atmosphere package for Meteor?\nHere is a link to the response I receive from @barbatus on the issue I submitted on the Angular2Meteor repo. \n. @tomitbe I have successfully integrated ng2-translate in my ionic2-meteor-boilerplate project.  Please refer to my project's configuration and see if you can get your's working.\nPlease refer to app/client/imports/app/app.component.ts and app/client/imports/app/app.module.ts for setup and configuration.. @tomitbe did you try this from the ng2-translate README:\nAoT\nIf you want to configure a custom TranslateLoader while using AoT compilation or Ionic 2, you must use an exported function instead of an inline function.\n```\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        })\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nWhy do you want to avoid using the public directory?. The import should be from 'ng2-translateor fromng2-translate/index`\nSee if that makes a difference.\nOn Tue, Jan 3, 2017 at 9:44 AM, tomitbe notifications@github.com wrote:\n\n@mjwheatley https://github.com/mjwheatley yes I did and checked also\nwith the exported function.\nit goes totally wrong soon as I import the TranslateLoader and\nTranslateStaticLoader, with or without using the exported function...\nEven when I just use TranslateModule.forRoot(); it crashes just after\nusing the \"import\" of the modules above:\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from\n'ng2-translate/ng2-translate';\nvery strange\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/57#issuecomment-270143667,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALSmEPNqYWxuY5Joqk1FRk7ek3SlwWWSks5rOmzDgaJpZM4Hu5jM\n.\n. I got the TranslateLoader to work in my application with the following:\n\n```\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { HttpModule, Http } from '@angular/http';\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate';\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n@NgModule({\n//...\nimports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        }),\n        IonicModule.forRoot(AppComponent, {\n            //// http://ionicframework.com/docs/v2/api/config/Config/\n            //mode: Constants.STYLE.MD,\n            //pageTransition: Constants.STYLE.IOS,\n            //swipeBackEnabled: false,\n            //tabbarPlacement: 'top'\n        }),\n    ],\n    // Main Component\n    bootstrap: [IonicApp]\n})\n```. Previously reported on angular-meteor repo https://github.com/Urigo/angular-meteor/issues/1755. In Urigo/angular-meteor#1755 @ardatan comments: \"Actually this is problem of ngx, because they have to make a bundle for commonjs like other Angular libraries ...\"\nWould it be feasible for this module to support integration with MeteorJS by adding support for commonjs?. Would you be able to provide a potentially timeframe for adding this support?. This fix may also close issue https://github.com/ngx-translate/core/issues/681. I updated the packages in my Meteor project and ran it in production mode.  I am no longer getting the reported error \"Unexpected token import\".  Unfortunately I am getting a different error and it is still not working in production.\nNow I am getting ERROR TypeError: e is not a function.  I removed the standard-minifier-js meteor package and the error is ERROR TypeError: factory is not a function.\nmodules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:24351 ERROR TypeError: factory is not a function\n    at _callFactory (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34610)\n    at _createProviderInstance$1 (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34556)\n    at resolveNgModuleDep (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34534)\n    at _createClass (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34592)\n    at _createProviderInstance$1 (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34552)\n    at resolveNgModuleDep (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:34534)\n    at NgModuleRef_.get (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:35961)\n    at resolveDep (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:36594)\n    at createClass (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:36434)\n    at createDirectiveInstance (modules.js?hash=7de06e8ab28fbf2713cf9fea7563fabadcdf9957:formatted:36223)\nOn this line console.error.apply(console, values); in the following method.\n```\n @param {?} console\n * @param {...?} values\n * @return {?}\n /\n                                function defaultErrorLogger(console) {\n                                    var values = [];\n                                    for (var _i = 1; _i < arguments.length; _i++) {\n                                        values[_i - 1] = arguments[_i];\n                                    }\n                                    console.error.apply(console, values);\n                                }\n```\nAny ideas?\nHere are my package versions after updating:\n\"dependencies\": {\n    \"@angular/animations\": \"^5.0.3\",\n    \"@angular/common\": \"^5.0.3\",\n    \"@angular/compiler\": \"^5.0.3\",\n    \"@angular/core\": \"^5.0.3\",\n    \"@angular/forms\": \"^5.0.3\",\n    \"@angular/http\": \"^5.0.3\",\n    \"@angular/platform-browser\": \"^5.0.3\",\n    \"@angular/platform-browser-dynamic\": \"^5.0.3\",\n    \"@angular/router\": \"^5.0.3\",\n    \"@ngx-translate/core\": \"9.0.1\",\n    \"@ngx-translate/http-loader\": \"^2.0.0\",\n    \"babel-runtime\": \"^6.20.0\",\n    \"meteor-node-stubs\": \"~0.3.0\",\n    \"meteor-rxjs\": \"^0.4.8\",\n    \"rxjs\": \"^5.4.2\",\n    \"zone.js\": \"^0.8.16\"\n  }. Would a similar update to the @ngx-translate/http-loader package help you think?. I changed useFactory: (createTranslateLoader) to useFactory: createTranslateLoader, removing the parenthesis around createTranslateLoader and it works now.. ",
    "tomitbe": "Hi ocombe, Urigo, still struggling with integrating ng-translate in ionic2 and Angular2... is this already supported?. Ok thank you, I'll give it a try... there is an issue on ocombe/ng2-translate (bottom page) that says: \"Ionic 2 is still using angular 2 RC4, but ng2-translate uses RC5. You should fix the version of ng2-translate to 2.2.2 until Ionic 2 upgrades to RC5.\", but I would like to use the latest version... not an issue anymore?. Hi Ocombe, I have tried to integrate but for Meteor there is something weird going on.\nWhen I use it in app module like below, it works fine (I need to place the i18n folder in the public folder!)\napp.module.ts:\n```ts\n...\nimport { TranslateModule } from 'ng2-translate';\n...\n// Modules\n  imports: [\n    IonicModule.forRoot(AppComponent),\n    HttpModule,\n    TranslateModule.forRoot()\n  ], \n```\nWhen I try to use the TranslateLoader/translateStaticLoader, it goes totally wrong (my client error is \"Uncaught SyntaxError: Unexpected token export\" in ng2-translate.ts):\nthis is part of my code like I found in your example:\n```ts\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './i18n', '.json');\n}\n```. version 5.0.0. Hi Ocombe, I tried to remove the import but then it says that the HttpModule is not known.. @ocombe this is my Meteor repo: https://github.com/tomitbe/cignos\n@mjwheatley thank you for your advise! I got it also working with i18n folder in public folder, but I try to avoid the situation having the i18n folder in the public... this by using the translateStaticLoader but that is exactly not working.. @mjwheatley yes I did and checked also with the exported function.\nit goes totally wrong soon as I import the TranslateLoader and TranslateStaticLoader, with or without using the exported function...\nEven when I just use  TranslateModule.forRoot(); it crashes just after using the \"import\" of the modules above:\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\nvery strange\n. @mjwheatley yeeesss ... this works... apparently the import was wrong assigned, though I followed the documentation of cocombe... should be import { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate'; indeed... thanks you!!!. Hi Ocombe, it's in the ionic-super-starter:\nhttps://github.com/driftyco/ionic-starter-super/blob/master/src/app/app.module.ts\n. :-) thanks for your support, happy that I can use the ng2-translate module now, works great!. ",
    "kisdaniel": "I am sure because if I remove ng2-language from bootstrap, it works.\n. I found the solution: \n\"angular2-polyfills.js:1243 Error: TypeError: Cannot read property 'getOptional' of \nundefined\" hides the original error: the problem was that the module not loaded properly. \nThe problem was that I use the bundle file, I have tried without bundle than it works.\n. partially it is a bug of angular2 because it hides the original error, you have to spend a lot of time to debug what is the really problem\n. I have used the dev version:\n<script src=\"js/angular2/bundles/angular2.dev.js\"></script>\nis there an other dev option?\n. I have created a bug report to angular2 about hiding the original error:\nhttps://github.com/angular/angular/issues/7610\n. ",
    "iwhp": "thankx ocombe! I have tried with TranslateService, unfortunately, same behavior.\nI had a look at ng2-translate.js and saw that the following statement is used System.registerDynamic. Components form angular2 use System.register (e.g. http.js). I changed this in ng2-translate.js, but did not solve the issue. I am not sure if this could point somewhere...\n. ",
    "egavard": "Hello @ocombe \nI updated the readme file.\nIs anything else required for this pull requests to be merged ?\nThanks\n. My bad, wasn't attentive enough when I did this modification.\nIt should be ok now.\nAlso declared resetLang method public instead of private.\n. As license file is mandatory for any redistribution of your work, it might be useful to put a copy of it in the project root.\nFurthermore, it will prevent people (like me) to ask themselves what license your are using.\n. Here you are.\nI let you adapt the copyright owner name/nickname to match your want.\n. I was about to create the same issue.\nIt would be helpful to get a stacktrace.\nI'll take a look to see if I can fix this.\nEDIT: I'm able to get a bit more context.\nIn my Handler, I console.warn that a key is missing.\nIn the chrome console, I get a complete stacktrace, even with the component html file line.\nImages explaining this. ",
    "spock123": "@ocombe  thank you so much - and 110% agree about npm.. sorry about these inconveniences..... and thank you again - your library is super awesome!\n. I had no issues using RC2... Of course there is a dependencies warning, but my language json files are loaded just fine.\n. Hey guys,\n- could it be because ng2translate uses the http service? \nI'm getting the following error when using the StaticFileLoader: \n\"zone.js:463 Error: Uncaught (in promise): TypeError: this.http.get is not a function(\u2026)\"\nI am configuring translate like this:\nprovide(TranslateLoader, {\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n            deps: [HttpModule]\n })\nAny ideas how to setup StaticLoader in RC5 ?\n. @moh3n9595  I have FormsModule working in RC5.\nYou need to import either the FormsModule or ReactiveFormsModule (or both).\nIf you use FormBuilder, then I believe you'll have to use ReactiveFormsModule. \nTry it.. but it really doesn't belong in the ng2-translate repo :)\n. You need to import CommonModule, not Browsermodule when creating shared\nmodules.\nOn Thu, Aug 11, 2016, 19:11 Jusef Belkasemi notifications@github.com\nwrote:\n\nCan't get this to work. I am trying to use the TranslatePipe in two\nmodules. So I have declared a shared module called TranslateModule:\nimport {NgModule} from \"@angular/core\";\nimport {\n    TranslatePipe, MissingTranslationHandler, TranslateLoader, TranslateStaticLoader,\n    TranslateService\n} from \"ng2-translate\";\nimport {SpMissingTranslationHandler} from \"./utils/missingtranslation.handler\";\nimport {Http, HttpModule} from \"@angular/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\n@NgModule({\n    declarations:[\n        TranslatePipe\n    ],\n    providers:[\n        {\n            provide: MissingTranslationHandler,\n            useClass: SpMissingTranslationHandler\n        },\n        {\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'dist/assets/i18n', '.json'),\n            deps: [Http]\n        },\n        TranslateService\n    ],\n    imports:[\n        BrowserModule,\n        HttpModule\n    ]\n})\nexport class TranslateModule{}\nThis module is then imported in the other two modules. For some reason I\nget a template parse error saying that the TranslatePipe is not available\n\"Error: Template parse errors:\u21b5The pipe 'translate' could not be found \".\nHope someone will be able to help\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/187#issuecomment-239309180,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABNWdNbfxriur4xej-EfIUamfCajOIlUks5qe54FgaJpZM4Jg52H\n.\n. Also, remember to put components and pipes that you want other components\ncan use, into the 'exports' property of your module definition. Otherwise\nyour declarations will be private to the module.\n\nOn Thu, Aug 11, 2016, 19:47 Lars Rye Jeppesen lars@rye-jeppesen.dk wrote:\n\nYou need to import CommonModule, not Browsermodule when creating shared\nmodules.\nOn Thu, Aug 11, 2016, 19:11 Jusef Belkasemi notifications@github.com\nwrote:\n\nCan't get this to work. I am trying to use the TranslatePipe in two\nmodules. So I have declared a shared module called TranslateModule:\nimport {NgModule} from \"@angular/core\";\nimport {\n    TranslatePipe, MissingTranslationHandler, TranslateLoader, TranslateStaticLoader,\n    TranslateService\n} from \"ng2-translate\";\nimport {SpMissingTranslationHandler} from \"./utils/missingtranslation.handler\";\nimport {Http, HttpModule} from \"@angular/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\n@NgModule({\n    declarations:[\n        TranslatePipe\n    ],\n    providers:[\n        {\n            provide: MissingTranslationHandler,\n            useClass: SpMissingTranslationHandler\n        },\n        {\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'dist/assets/i18n', '.json'),\n            deps: [Http]\n        },\n        TranslateService\n    ],\n    imports:[\n        BrowserModule,\n        HttpModule\n    ]\n})\nexport class TranslateModule{}\nThis module is then imported in the other two modules. For some reason I\nget a template parse error saying that the TranslatePipe is not available\n\"Error: Template parse errors:\u21b5The pipe 'translate' could not be found \".\nHope someone will be able to help\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/187#issuecomment-239309180,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABNWdNbfxriur4xej-EfIUamfCajOIlUks5qe54FgaJpZM4Jg52H\n.\n. Cool dude! Glad to help.\n\n\nYear initially it's all very confusing.. you will need to play around a bit\nbefore you find the module structure that suits you best.\nI don't have the count lf how many times I've refactored my app, lmao\nCheers\nOn Thu, Aug 11, 2016, 20:16 Jusef Belkasemi notifications@github.com\nwrote:\n\nYup, \"exports\" did the trick. Thank you very much for such a quick and\ncomprehensive response. The NgModules concept starts finally make sense to\nme\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/187#issuecomment-239321671,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABNWdBZ4D1MwSo_Ed4P6wGlOdD148QJLks5qe60lgaJpZM4Jg52H\n.\n. Hey man, no worries and no hurries, I'm just over-eager lmao.\n\nI'm also using TS2.0, it's a blast!\nCheers\nOn Fri, Aug 12, 2016, 12:38 Olivier Combe notifications@github.com wrote:\n\nyes, I'm working on it, I have the same problem, it should be resolved\nshortly, it's happening because I upgrade to TS 2.0 and it seem to output\nthe reference to types in my .d.ts generated files (which was not the case\nbefore).\nWorking on it, I'll release a new version shortly\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/189#issuecomment-239480411,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABNWdNU7kSJ5Y6nxZYbQ73eMWG5-UzVZks5qfJNegaJpZM4JjM7Z\n.\n. I must admit, in my projects I had to ditch tests because of the testing API changes in ng2... It will be a while before I \"trust\" the testings.. given the discussions on Github..\n\nThank you for your effort, Olivier, it is much appreciated! \n. You are the best!!\n. ",
    "jjrchrds": "@ocombe does this go in app.ts/js?\nThank you\n. ",
    "rklumanlan": "how can i convert this to javascript? i am just new to ionic2 and angular 2.. i am not using typescript.\n\nprovide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n. \n",
    "Mage111": "I have same issue when I upgrade ng2-translate to latest version (5.0.0)\nI have already use the new configuration:\n```ts\nimport {\n    TranslateModule,\n    TranslateService,\n    TranslateLoader,\n    TranslateStaticLoader\n} from 'ng2-translate/ng2-translate';\nfunction translateLoader(http: Http) {\n  return new TranslateStaticLoader(http, 'assets/i18n', '.json');\n}\nproviders: [\n  TranslateService,\n  {\n    provide: TranslateLoader,\n    useFactory: translateLoader,\n    deps: [Http]\n  }\n]\n```\nIt's work fine in previews version. (I need to upgrade for getting metadata file for Aot compilation)\nThanks.\n. The app you have refereed to, use ng2 trranslate version: 4.0.0\nThis version worked for me also. they use it in the same way as me.\nversion 5.0.0 still occurred the above error.. ",
    "beenotung": "re: @ocombe commented on Mar 20\n@App, @angular/core.provide are no longer available, what should I do on the current version? (ionic 2.1.18). close this pull request and target for v6.0.1. I'd messed up the usage of tag and branch, reopening this pull request. just for the sake of type completeness, otherwise, I'll need to cast the result.\nIf it's included in the latest build I'll try to update the version in package.json and try again. Didn't know this feature before, thanks for sharing.\nHowever, your impl cannot restrict the output to be Observable<string> when the key is a string.\nIs it the limitation of the typescript compiler or is it valid to write the annotation with different result type?. ",
    "c1rus": "what about making parser injectable?\n. new plans to merge this?\n. are you using webpack1 or webpack2? i had problem with webpack1, but with webpack2 it is working...\n. ",
    "victormanakkat": "I think, you need to use the translate related providers before the MockBackend related providers, because the MockBackened modifies your default Http and the translation JSON files may not be able to load.\n. ",
    "servonic": "Thanks for your answer.\nFor now (just testing), I just made a small service for storing language (and maybe some other local values) and modified the infitialization code from your example, so nothing for a PR yet. There also is almost no error checking in my code yet, so if there is some \"bad content\" in the local storage it will be used as langauge. However, if anyone interested here is my code:\n```\nimport {Injectable} from \"angular2/core\";\n@Injectable()\nexport class LocalSettingsService{\n    //todo: better error handling!\n    getLanguage():string{\n        if (localStorage){\n            return localStorage['language'] || \"\";\n        }\n        else{\n            return \"\";\n        }\n    }\nsetLanguage(language: string){\n    if (localStorage){\n        localStorage['language'] = language;\n    }\n}\n\n}\n```\nand in my app component, before calling translate.use(userLang); I added these few lines:\n// try to get saved language\nvar storedLang: string = _localSettings.getLanguage();\nif (storedLang !== \"\"){\n    userLang = storedLang;\n}\nwhen changing the language, I just call setLanguage(...) of the service.\nIf I develop something that would fit in your code, I'll do a pull request.\n. ",
    "mbakker96": "@ocombe oops..... npm version: 2.14.12 \n. O that was simple ;) Thanks!. Do you use version ngx-translate 10 with angular 6?. I think that the problem is that you use the old standard for rxjs. rxjs updated to version 6 few months ago and did bring a lot of breaking changes with it. It did cost me a few days to rewrite a lot of code.  \nngx-translate use since version x rxjs 6 (have to look it up in the changelog). This means that there will be errors when you compile your code due to the fact that rxjs does not support v5 code.  \nIf you don't have a few days or not anough coffee, then you can use rxjs-compat to support V5 features with V6. \nFor more information:\nrxjs migration\nwhat changed?. ",
    "allenhwkim": "Closing this, and opeing https://github.com/ocombe/ng2-translate/issues/77 to continue the question.\n. FYI, This is the bundle script that I used\n<script src=\"https://rawgit.com/ocombe/ng2-translate/master/bundles/ng2-translate.js\"></script>\n. ",
    "shmu80": "While I build the ionic 2 project, the console log just prompt me  error message. it doesn't have 404 related error message in the console.\nActually my question is how can I know the system able to load/find en.json?\n. I will check for it.\nBetween, do you know why if I code as suggested below, I failed to deploy, but some other developer has no issue for this code\n```\nimport {TranslateService, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {provide} from 'angular2/core';\n@App({\n  templateUrl: 'build/app.html',\n  config: {}, // http://ionicframework.com/docs/v2/api/config/Config/\n  providers: [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n  ]\n})\n```\nRefer the error code Row 15, Column 23 is belong to (http: Http)\n\nERROR in ./app/app.js\nModule build failed: SyntaxError: C:/Projects/apps/myapp/app/app.js: Unexpected token (15:23)\n  providers: [\n    provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n\nWhen I change my code to below, it has no build error.\n@App({\n  templateUrl: 'build/app.html',\n  config: {}, // http://ionicframework.com/docs/v2/api/config/Config/\n  providers: [\n    provide(TranslateLoader, {\n      useFactory: (**http**) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: **[[Http]]**\n    }),\n    TranslateService\n  ],\n  pipes: [TranslatePipe]\n})\nNote: ** is the changes\n. Yes. the code also include, import {Http} from \"angular2/http\";,  I miss copy to this comment. \n. This is my angular2 version, \"angular2\": \"2.0.0-beta.6\",. Should I upgrade to latest version, beta 11?\n. the issue fixed after I update the angular2 version to beta 12.\nThanks. \n. Thanks for the advice.\nYes, the res = \"Test Title\"\nBut if I code as below, the this.translatedValue is empty\nthis.translate.get(\"title\").subscribe(res => {\n    this.translatedValue = res;\n    console.log(\"translates : \" + res);\n});\nconsole.log(\"translatedValue: \" +  this.translatedValue);\nCan you please advise how can I get the value out of this.translate.get(\"title\").subscribe() method?\n. Can you advise how to use the instant method to get the immediate result?\nI try the code below, but failed to get the value too.\nconsole.log(this.translate.instant(\"title\"))\n. Thanks for the advice.\n. ",
    "OmarHassan25": "Well Done,\n. ",
    "wmaurer": "@ocombe no probs. FYI, this issue is causing my angular2 build with webpack to fail.\n. ",
    "kvgros": "Same issue here.  Renders the library useless as it crashes immediately on this.   Any one else seeing this?\n. ",
    "ksontini": "Hi,\nLocaly when you use npm instead of CDN you still got the same error?\nVia npm I can't reproduce this. Can you reproduce this with Angular2 >= beta15?\n. Hi ,\nI'm getting the same issue. MyMissingTranslationHandler is not called.\nWhen logging the translateService, The handler Class is loaded. (with default TranslateStaticLoader...)\nthe error in my console: EXCEPTION: TypeError: Cannot read property 'LOGIN' of undefined in [{{\"LOGIN\" | translate}} in LoginComponent...\n. This is litle bit random. \nIf I'm right, it's the case when the subscribe inside the getTranslation if fired in inverse ordre. \nI explain:\nIn the first load: \n1. Use default lang => getTranslation('en') => subscribe (line 120)\n2. Use 'fr => getTranslation('fr') => subscribe. \n3. The callback of the 'fr' is fired\n4. The callback of 'en' then.\n5. Get 'en' as translated lang\nBut I don't know why it's only in Firefox\n. As I said it's random.\nAfter updating, I tried and got the same error. It was not from the first load but after serval refresh. [Firefox 45.0.2]\nA tip a get the issue easly:\nStart your instance from a machine, and try to access from an other one.\n. You can use the service.\nTry for example:\ntranslate.getTranslation(lang).subscribe((translationObj) => {\n          console.log(translationObj[key]);\n        });\n. When I try to run tests localy to fix my pull request, npm run test-watch failed to start.\nIs there any special config, except npm install and run test?\n. There are the errors in my console:\n\nng2-translate@ test ...\\ng2-translate\ntsc && karma start\n\nnode_modules/angular2/http/testing.d.ts(1,15): error TS2307: Cannot find module 'angular2/src/http/backends/mock_backend'.\nsrc/translate.pipe.ts(1,91): error TS2307: Cannot find module 'angular2/core'.\nsrc/translate.pipe.ts(3,34): error TS2307: Cannot find module 'angular2/src/facade/lang'.\nsrc/translate.service.ts(1,50): error TS2307: Cannot find module 'angular2/core'.\nsrc/translate.service.ts(2,30): error TS2307: Cannot find module 'angular2/http'.\nng2-translate.ts(1,23): error TS2307: Cannot find module 'angular2/core'.\nng2-translate.ts(2,20): error TS2307: Cannot find module 'angular2/http'.\ntests/translate.pipe.spec.ts(2,43): error TS2307: Cannot find module 'angular2/src/http/backends/mock_backend'.\ntests/translate.pipe.spec.ts(4,69): error TS2307: Cannot find module 'angular2/http'.\ntests/translate.pipe.spec.ts(5,52): error TS2307: Cannot find module 'angular2/core'.\ntests/translate.service.spec.ts(1,18): error TS2307: Cannot find module 'angular2/testing'.\ntests/translate.service.spec.ts(2,33): error TS2307: Cannot find module 'angular2/core'.\ntests/translate.service.spec.ts(3,69): error TS2307: Cannot find module 'angular2/http'.\ntests/translate.service.spec.ts(4,9): error TS2305: Module '\".../ng2-translate/node_modules/angular2/http/testing\"' has no exported member 'MockBackend'.\ntests/translate.service.spec.ts(4,22): error TS2305: Module '\".../ng2-translate/node_modules/angular2/http/testing\"' has no exported member 'MockConnection'.\n. Yes angular2 is installed.\nThe problem is in the npm install:\nnpm ERR! peerinvalid The package rxjs@5.0.0-beta.6 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer angular2@2.0.0-beta.15 wants rxjs@5.0.0-beta.2\n. @ocombe try a new clean install and test, it will fail.\nThis is related to the versions of devDependencies in the package.json \n. Ok I'll check the version of rxjs later :)\nFor the pull request it self, it fix the my problem. If you find any regression, let me know to correct the patch.\n. Well, This is stupid from my part. I'll close this PR as it's not a solution.\nAssuming that a key containing a CR, is not a problem of ng2-translate.\nThe real problem is why CR in the string throw an Exception. A logic behavior is to call an errorHandler.\n. @nadavsinai just asking, why you are adding a js file in src folder?\n. ",
    "gc392": "I am using beta 15 and I have the same problem:\nIn app.ts, TS compiles,\nimport {TRANSLATE_PROVIDERS, TranslateService, TranslatePipe, TranslateLoader,\n   TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nindex.html\n to access via web server ./node_modules/ng2-translate/bundles/ng2-translate.js renamed and moved to \n\nthen in browser I get\nhttp://localhost:4200/ng2-translate/ng2-translate.js 404 (Not Found)\nangular2-polyfills.js:390 Error: Error: XHR error (404 Not Found) loading http://localhost:4200/ng2-translate/ng2-translate.js\n. I could finally make it work. I am using angular cli and had to edit system-config.ts and add\nconst map: any = {\n  'ng2-translate': 'vendor/ng2-translate'\n};\n/* User packages configuration. /\nconst packages: any = {\n  'ng2-translate': {\n    defaultExtension: 'js'\n  }\n}\nand in angular-cli-build.js I added the file in vendorNpmFiles, so it is copied in dist\n      'ng2-translate/*/.js'\n. ",
    "mcwienczek": "I have had similar problem. You are probably missing mapping ng2-translate to node_modules/ng2-translate or other folder where your ng2-translate is located. \nHere is my systemjs.config.js\nLook at my map section.\nhttps://gist.github.com/VsMaX/214688cee7ff58989fab72948fe80b00\n. ",
    "rgajam": "After updating system-config.ts as @gc392 mentioned,\nIn angular-cli-build.js I added the file in vendorNpmFiles:\n'ng2-translate/**/*.js'\n. ",
    "bulentozdil": "this is successful \nthanks @rgajam  and @gc392 \nsystem-config.ts\nconst map: any = {\n  'ng2-translate': 'vendor/ng2-translate'\n};\n/* User packages configuration. /\nconst packages: any = {\n  'ng2-translate': { defaultExtension: 'js' }\n};\nin angular-cli-build.js \n'ng2-translate/*/.js'\n. ",
    "vukasin-nikodijevic": "Ah - it was issue on my side produced by include hell.\nI had some dead include which nor tsc nor intelij didn't report :(\nSorry for producing buzz. \n. ",
    "ftaleman": "Hi Olivier, \nThanks for your reply!\nI've added console.log(JSON.stringify(data)) like this: \npublic getTranslation(lang: string): Observable<any> {\n        console.log(\"Getting translations for language: \" + lang);\n        return this.authHttp.get(this._i18nUrl+'/'+lang)\n            .map((res: Response) => res.json())\n            .do(data => console.log(JSON.stringify(data))) // eyeball results in the console\n            .catch(this.handleError);\n    }\nThis is what's displayed in the console:\n{\"customers\":\"klanten\",\n\"TRAN_VALUESHOULDBE\":\"Waarde moet {p0} zijn dan {p1}\",\n\"TRAN_WIDTH\":\"Breedte\",\n\"hello\":\"Hello {{p0}}\"\n...\n}\nBest regards\nFrederik \n. ",
    "Tiuser4567": "@ksontini , @ftaleman \nAre you guys using a different default lang from the current language?  and case where the default language is not loaded at least once?\ne.g\nthis.translate.setDefaultLang('en');\nthis.translate.use('de');\nAs a workaround, it seems you need to load the default language at least once.\nthis.translate.setDefaultLang('en');\nthis.translate.use('en');  //load\nthis.translate.use('de');\nso that the TranslateService has loaded the default lang (in above case 'en' lang) in the this.translations object.\noffending code is in translate.service.ts#getParsedResult:201, the object this.translations[this.defaultLang] passed to translate.parser.ts#getValue(target, key):35 where target[key] is evaluated. Since target (this.translations[this.defaultLang]) is undefined , the browser throws an error. \n. Duplicate of https://github.com/ocombe/ng2-translate/issues/87\n. ",
    "DavidWiesner": "@Tiuser4567 your workaround is not working if the key is also not defined in the default language and the key is representing a nested object (like: pages.home.title). The PR #140 solved this problem in my case. \n. I've created an build with this pull request to try this out run\nnpm install \"https://github.com/DavidWiesner/ng2-translate/tarball/808d27c5bd66428d58c79aea61bcd7b63dcc0b26\"\n. ",
    "nickkenens": "@Tiuser4567's workaround worked like a charm, thanks for sharing! ;)\n. ",
    "DustinByfuglien": "I use rxjs 5.0.0-beta.4\n. It works well with beta2.\nThank you very much!\n. ",
    "Phatsuo": "This has popped back up. I noticed beta 17 asking for rxjs@5.0.0-beta.6.\nnpm ERR! peerinvalid Peer angular2@2.0.0-beta.17 wants rxjs@5.0.0-beta.6\nAnd when I upgraded, I received this same error.\n. ",
    "IsaacBorrero": "@Phatsuo Did you solve this problem.  I am having the same.  It is not related to ng2-translate.\n. ",
    "VahidN": "The real solution for this problem.\n. ",
    "fuitattila": "I have the same issue. Are there any temporary hotfixes?\n. +1\n. ",
    "KevensPronovost": "Hi, we've encountered the same problem. In my case my app still boots and the translation are done, but I get an error on runtime: Uncaught ReferenceError: require is not defined.\nAs requested by others, I would also like to know if there is a planned fix until angular upgrade RxJS version? Even though it is functionnal, an error is a blocker for prod. Thank you! And thanks for this great library.\nAlright, for now here is a temporary fix I made to make it work (since it never was called):\nin index.html:\nSystem.register('rxjs/add/observable/of', [], function(dummy) { return { setters: [], execute: function() {dummy('default', null); }}});\nIt should simply be removed from ng2-translate.js though, as it is not used (we use the static Observable.of)\nIf I got something wrong feel free to point it out. I'm a backend programmer and a bit new to angular.\nedit for readability\n. As said it the first comment, observable.of is not imported in 5.0.0-beta.2\nI tried removing my ugly patch and fails again on the same error.\nNote that I use Observable.of in my app and it works fine, even with me registering the dummy, so the import must not be the way it is used in beta2.\nIn beta2, in Observable.ts, there's\nstatic of: typeof ArrayObservable.of;\n. It has the functionnality, but is not used. The Observable 'class' already have a static method of. It was changed in beta3. The only thing it means is that you simply don't need to import it, or in your case, require it.\nAnd a quick search in the minimed rxjs beta2 file shows that it is not there. Perhaps they fixed it, without fixing the minified file. I'll do some tests today.\n. I did, but I'm not using /node_modules/rxjs/bundles/Rx.js. I'm using /node_modules/rxjs/bundles/Rx.min.js\n. I created a pull request but closed it. I did test it on my own, and did automated test on my project, but running npm test on the fork of ng2-translate resulted in error TS6053: File 'typings/main.d.ts' not found.\nNot sure what I'm missing, and the checks do not pass...\nI do not understand why it fails, but I'll keep the 'ugly patch' on my side for the moment. Will revisit this problem  once I have some free time left, because we are short some people here and short on time for next delivery.\n. It seems my patch works only because we are not using the part of the code that makes uses of rxjs/add/observable/of. The problem is it is not in the rxjs minified version, so the require fails without the patch. Hopefully, angular will upgrade rxjs version soon enough, so that we can move on to the corrected version too.\n. It should, we'll upgrade today or next monday and tell you the verdict\n. The issues seems to be solved. Patch removed and everything works perfectly. Still need to port the rest of our app to angular, so not in prod yet, but I'd say the issue is fixed.\n. ",
    "clothesptit": "i added patch: System.register('rxjs/add/observable/of', [], function(dummy) { return { setters: [], execute: function() {dummy('default', null); }}}); in index.html\nIt work . But when i change language two time i get error : EXCEPTION: TypeError: Observable_1.Observable.of is not a function\nAnyone help me to fix this issue, please ?\n. ",
    "Yugloocamai": "in my case I was importing JUST Observable \nimport { Observable } from 'rxjs/Observable';\nso I needed to add \"of\"\nimport 'rxjs/add/observable/of';. ",
    "beagleknight": "Hi guys!\nThe angular rc.0 is out and it uses RxJS beta 5 :smile: \nSee https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc0-2016-05-02 for more details.\n. ",
    "koodikindral": "thanks! got it working!\n. Same question :)\n. ",
    "debgoume": "Thanks for quick reply ocombe,\nI have tried to use\ntranslate.get(\"lessons_title\").subscribe((result: string) => {\n        lesson.title = result;\n    });\nbut value is still same as key \"lessons_title\"\nCould you please tell me how to get loader synchronous or observe onChangeLang ?\nWhat's weird is that console.log(translate); display objects with all data \n. Yes it load translations.\nFile is a simple as \n{\n\"lessons_title\"           : \"Le\u00e7ons\",\n\"lesson_1_title\"          : \"Premi\u00e8re Le\u00e7on\",\n\"lesson_1_title_src\"      : \"Erste Lektion\",\n\"lesson_1_desc\"           : \"Salut, comment \u00e7a va ?\",\n\"lesson_1_desc_src\"       : \"Hallo, wie geht\u2019s ?\",\n\"lesson_2_title\"          : \"Deuxi\u00e8me Le\u00e7on\",\n\"lesson_2_title_src\"      : \"Zweite Lektion\",\n\"lesson_2_desc\"           : \"Chez Starphone\",\n\"lesson_2_desc_src\"       : \"Bei Starphone\",\n }\nAttached png of object translate from console \n\n. Yes , key lessons_title, none of the keys works.\n. Done it but not better \n. syntax error , \nI changed to dips : [TranslateService] \nbut still not compiling \n. I think I need to put LessonData in the providers of apps.ts \nI have tried : \nThis work , I get value translated in template with {{\"key\" | translate}}\n@App({\nproviders : [\n      provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService,\n    LessonsData\n   ]\n...\nthis , does not work, blank page \n@App({\nproviders : [\n      provide(TranslateLoader, {\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n   ]\n....\n. ok, thank you for you time.\nI will debug and try to find what going on \n. Hi ocombe,\nI have found a solution by calling translate.instant(\"<key>\") in onLangChange and it works.\nBut I do not know if this is the best way to do this.\n``` typescript\nimport {Injectable} from \"angular2/core\";\nimport {TranslatePipe,TranslateService, LangChangeEvent} from 'ng2-translate/ng2-translate';\nimport {Lesson} from \"../modele/lesson\";\n@Injectable()\nexport class LessonsData {\n    private lessons = [];\nconstructor (private translate : TranslateService){\n     translate.onLangChange.subscribe((event: LangChangeEvent) => {\n\n        let ext = \".png\";\n\n        let lesson  = new Lesson();\n        lesson.number   = 1;\n        lesson.title    =  translate.instant(\"lesson_1_title\");\n        lesson.titleSrc = translate.instant(\"lesson_1_title_src\");\n        lesson.desc     = translate.instant(\"lesson_1_desc\");\n        lesson.descSrc  = translate.instant(\"lesson_1_desc_src\");\n        lesson.imageSmall = \"images/lessonsSmall/lesson_1_small\" + ext;\n        this.lessons.push(lesson);\n\n        lesson  = new Lesson();\n        lesson.number   = 2;\n        lesson.title =  translate.instant(\"lesson_2_title\");\n        lesson.titleSrc = translate.instant(\"lesson_2_title_src\");\n        lesson.desc     = translate.instant(\"lesson_2_desc\");\n        lesson.descSrc  = translate.instant(\"lesson_2_desc_src\");\n        lesson.imageSmall = \"images/lessonsSmall/lesson_2_small\" + ext;\n        this.lessons.push(lesson);\n\n        lesson  = new Lesson();\n        lesson.number   = 3;\n        lesson.title =  translate.instant(\"lesson_3_title\");\n        lesson.titleSrc = translate.instant(\"lesson_3_title_src\");\n        lesson.desc     = translate.instant(\"lesson_3_desc\");\n        lesson.descSrc  = translate.instant(\"lesson_3_desc_src\");\n        lesson.imageSmall = \"images/lessonsSmall/lesson_3_small\" + ext;\n        this.lessons.push(lesson); \n      });\n}\n\n}\n```\nThanks again for your help.\n. ",
    "Priyanka-khadke": "hi all,\nI need to get the translations done based on the browser language.The translations are placed in the js file as key value pairs.Like for example: language_en.js file \n{\n         \"key\":\"globalWelcomeLabel\",\n         \"value\":\"Welcome\",\n         \"description\":\"Welcome label\"\n    }, \nand for language_de.js\n{\n         \"key\":\"globalWelcomeLabel\",\n         \"value\":\"Welkom\",\n         \"description\":\"Welcome label\"\n    },\nI have added the angular-translate.js and also angular-translate-loader-static-files.js in index.html\nin app.js , added 'pascalprecht.translate' in app.module and  $translateProvider in .config\nand the implementation of  $translateProvider as\n$translateProvider.useStaticFilesLoader({\n            prefix: '/translations/language_en',\n            suffix: '.js'\n        })\n        .preferredLanguage('en');\n        $translateProvider.useSanitizeValueStrategy(null);\nnow how do i get the value from the key in an alert .tried with translate.instant('welcomeMessage') but it gives me the same data instead of giving the value welcome /welkom ,in this case welcome as the file loaded is language_en. ",
    "franzisk": "On your app.components.ts inject private translate: TranslateService in the constructor (of course you have to import it before), then still inside the constructor set the language according to the browser/navigator language (in this case if the language is not Portuguese, Germany, Spanish or English it will use English):\nvar lang = this.translate.getBrowserLang();\nlang = /(pt|de|en|es)/gi.test(lang) ? lang : 'en';\nthis.translate.setDefaultLang('en');\nthis.translate.use(lang);. ",
    "SaidMarar": "its too late to answer this, but it will be usefull for anyone facing same probelm.\nyour first code @debgoume is 100% correct but you are missing one thing you are putting the translate code inside the platform ready event, so your translate config will not be available until the platform is ready. the solution is just put the config translate code outside the platform ready function.. ",
    "arunsaibk": "this.translate.get(this.pageTitle).subscribe((text:string) => {\n          this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n            title.setTitle(this.translate.instant(text))\n          });\n        });        . this.translate.get(this.pageTitle).subscribe((text:string) => {\n          this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n            title.setTitle(this.translate.instant(text))\n          });\n        });        . ",
    "hakalb": "I love the angular2 magic. Thanks :+1: \n. It is the same with 0. That is worse since my app sometimes have zero numbers to display.\nWhen do you think this will be fixed?\n. I found a work around for 0. Convert number to string using .toString() - then the text has length 1.\n. ",
    "quzaq": "Hi @ocombe, \nI propose to add information from this thread to documentation page.\nIMHO it's quite common use case and more people (including also me) may have such problem.\nAnyway, great thanks for help! :)\n. I had the same problem with my custom loader but because of passing to http.get(url, options), options with Content-Type header.\nIt was because of following bug in Angular 2.0.0-rc.5: https://github.com/angular/angular/issues/10612. \nFix should be delivered in RC6. \nSome possible workarounds before RC6: not set Content-Type header or set body to ''.\n. ",
    "Samvel1987": "Hi,\n[innerHTML]=\"'HOME.CHANNELS_TEXT' | translate  \"\nHOME.CHANNELS_TEXT = <div class = 'div1' >   **some text**   </div> \nI can't attach css style  from  current.component.css  to .div1, (.div1 { color : lime;}  ) , but if i give it from main style.css its working.  why?. ",
    "pawel-milewski": "\nHi,\n[innerHTML]=\"'HOME.CHANNELS_TEXT' | translate \"\nHOME.CHANNELS_TEXT = <div class = 'div1' > **some text** </div>\nI can't attach css style from current.component.css to .div1, (.div1 { color : lime;} ) , but if i give it from main style.css its working. why?\n\ntry using \n encapsulation: ViewEncapsulation.None,\non the component\nit worked for me. ",
    "Heshyo": "Same here. If you use a missing key, in the default language you'll see the missing key being displayed as is in your view, everything else will translated correctly. In the non default language though, you won't see any translation: all items to translate are blank.\nThe problem seems to be in: \n``` ts\nprivate getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    [...]\nif(typeof res === 'undefined' && this.defaultLang && this.defaultLang !== this.currentLang) {\n    res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n}\n\n[...]\n\n}\n```\nthis.translations only contains the current language and this.translations[this.defaultLang] returns undefined. That code is being executed only if this.defaultLang !== this.currentLang which explains the difference between the default and non default language.\nIt also means that whether or not the default language has the key, it won't work in the non default language.\n. ",
    "Garbanas": "We just noticed the same bug today.\nCalling translate.setDefaultLang(defaultLang) only sets this.defaultLang = lang; in the TranslationService where it should really also do a this.getTranslation(lang); (if lang has not been loaded already or is pending)\n. @brosenberger Or just calling translate.getTranslation(defaultLang); before translate.use(userLang); :)\n. ",
    "brosenberger": "see https://github.com/ocombe/ng2-translate/pull/140 which at least helped in my case\n. @Garbanas not working in the environment i am using it\n. ",
    "cristi-badila": "I think this was fixed in https://github.com/ocombe/ng2-translate/commit/3fb23352\n. ",
    "NicolasDucom": "Thanks for your incredibly quick answer ! :+1: \nOk, in my service I call : this.translate.use(this.CURRENT_LANGUAGE); //translate being the translate service\nIn the translatePipe, I added : \nthis.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n            console.log('pipe lang changed ! event:');\n            console.log(event); //Language here is updated \n            this.updateValue(query, interpolateParams);\n        });\nand : \nupdateValue(key: string, interpolateParams?: Object): void {\n        this.translate.get(key, interpolateParams).subscribe((res: string) => {\n            console.log('update value! key:'+key+' res:'+res); //Translations here are still old ones\n            this.value = res ? res : key;\n            this._ref.markForCheck();\n        });\n    }\nDon't know if that helps in any way ^^\n. No I don't have any change detection strategy, interesting fact, I'm having the problem on a Mac (Chrome), and a colleague is on Windows and doesn't seem to have any issues.\n. ",
    "FrankGoortani": "getTranslation also changes the current language. ",
    "phoude": "\ngetTranslation also changes the current language\n\n\"use\" does but not getTranslation. I faced the same issue and getTranslation did the trick for me. ",
    "Wingzzzzz": "@phoude https://stackoverflow.com/questions/50706158/angular-ngx-translate-gettranslation-issue\nIt mentions the issue from @FrankGoortani . Please team consider applying the changes from angular-translate:\nhttps://github.com/angular-translate/angular-translate/commit/e591462af379150cb1bae29f493137cb825025b1\ncore function: $translate.instant(translationId, interpolateParams, interpolation, forceLanguage);. ",
    "MartinWeindel": "Hello,\nsorry, I missed that the bundle is generated.\nI have no experience with the systemjs-builder, but maybe its configuration is not quite correct?\nAnd, yes the bundle file is included as a script tag in the index.html\n<script src='/assets/lib/angular2/bundles/angular2-polyfills.min.js'></script>\n        <script src='/assets/lib/systemjs/dist/system.src.js'></script>\n        <script src='/assets/lib/typescript/lib/typescript.js'></script>\n        <script src='/assets/lib/rxjs/bundles/Rx.min.js'></script>\n        <script src='/assets/lib/angular2/bundles/angular2.dev.js'></script>\n        <script src='/assets/lib/angular2/bundles/router.dev.js'></script>\n        <script src='/assets/lib/angular2/bundles/http.dev.js'></script>\n        <script src='/assets/lib/ng2-translate/bundles/ng2-translate.js'></script>\nThe usage follows your description very closely (adding provider to bootstrap and configuration in application component).\nShould I try to fix the generation and make another pull request?\n. ",
    "NoNameProvided": "Once if u bootsrapped your app with it: \n``` javascript\nimport { Component } from '@angular/core';\nimport { HTTP_PROVIDERS, Http } from '@angular/http';\nimport { Platform, ionicBootstrap } from 'ionic-angular';\nimport { TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\nexport class MyApp {\n  constructor(private platform: Platform, private translateService: TranslateService, private authService: AuthService) {\nthis.translateService.setDefaultLang('en');\nthis.translateService.use('en');\n\n}\n// ...\n}\nionicBootstrap(MyApp, [\n    HTTP_PROVIDERS,\n    {\n      provide: TranslateLoader,\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'build/shared/i18n', '.json'),\n      deps: [Http]\n    },\n    TranslateService\n  ] , {\n  pageTransitionDelay: 16\n});\n```\nThen u only have to import the pipe in your components like: \n``` javascript\nimport { TranslatePipe } from 'ng2-translate/ng2-translate';\n@Component({\n  // ...\n  templateUrl: 'path/to/my.component.html',\n  pipes: [ TranslatePipe ]\n})\nexport class MyComponent {\n  // ...\n}\n```\nAnd then in your template: \nhtml\n{{ 'keyOfTheTranslation' | translate }}\n. Any update on this? Do we have any way now to use ng2-translate with AOT?\n. Yeah, I did the same as @krizroring. Also if you you use ts.instant you can write a mockup services for that as well. \n. If you use /assets/i18n it will try to load the language files from the root of your app space. You have to put a  dot in the beginning or ommit the slash to loads it from the correct place. So you have to use\nts\nexport function translateLoaderFactory(http: any) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\nif your language files are stored in src/assets/i18n folder.\nMaybe this should have been added to the README.\n. In the meantime I figured. I have to load the english version as well.\nSo it looks like this: \nts\n    this.translateService.setDefaultLang('en');\n    this.translateService.use('en');\n    let language = (navigator.language.indexOf('-') != -1) ? navigator.language.substring(0, navigator.language.indexOf('-')) : navigator.language;\n    this.translateService.use(language);\nThis was not trivial for me. I thought setting the default language also loads than language file. Maybe this should be mentioned in the docs in case someone else has the same problem.\n. Thanks for the quick fix! \n. ",
    "Kobzol": "Thank you, it works now :-)\n. ",
    "andykais": "woops, I just played with the example, I can see this not what you meant. Apologies! You can just close this issue\n. ",
    "psurrey": "I am experiencing the same issue with angular 2.0.0-rc.1 and ng2-translate 2.1.0 in Internet Explorer 9 and 10 (using also router-deprecated 2.0.0-rc.1). If I hit a route with a component that has translations in the template the strings are all blank. If I tab through my input fields the validation kicks in and triggers a change event (to show validation errors). Then the translations are displayed correctly. \nI'm not sure why this happens. When I debug I'm able to see that in TranslatePipe.updateValue the lines this.value = res ? res : key; this._ref.markForCheck(); are executed. this.value is the translated value already. So maybe the change detection is missing because of a timing issue in IE9, IE10?\nI was able to fix this with by injecting NgZone into my AppComponent (top most component) and calling\nsetTimeout(() => zone.run(() => {}), 0);\n. ",
    "Booyanach": "Have the same issue as above, however instead of using an NgZone run went for ChangeDetectorRef.\nie:\n```\n    constructor(private cdr: ChangeDetectorRef) {...}\nngAfterViewInit() {\n    setTimeout(() => this.cdr.detectChanges(), 0);\n}\n\n```\n. ",
    "zpul": "I experienced the same problem. I used the first a TranslatePipe after receiving a response from a web service. This resulted in requesting the translation file afterwards, but in this way I do end up with an empty string. (The inner updateValue observable actually returned the translated value, but the already built DOM object did not get the update).\nI resolved by issuing a fake translate in the main page, so that when the response from the web service cames the translation service has already been inited.\nI think that this is definitely a bug related with how change detection works... is there any information that I can provide to fix it in a better way? Thanks.\n. ",
    "mhartington": "Hi, Mike from ionic here!\nSo there seems to be some confusion. \nThe example here is more for typescript, so the annotation in useFactory: (http: Http) are ok.\nAlso, deps: [[Http]] is not correct either. You're probably getting that from the get parameters() in a JS ionic2 app. This wouldn't be the case here since the example is in Typescript. \n. I can confirm that if you're using ES6 and not Typescript, you can simply use \n@App({\n  template: '<ion-nav [root]=\"rootPage\"></ion-nav>',\n  config: {}, // http://ionicframework.com/docs/v2/api/config/Config/\n    providers: [\n    provide(TranslateLoader, {\n      useFactory: (http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n      deps: [Http]\n    }),\n    TranslateService\n  ]\n})\nIt's the same code, just without the annotation on http\n. Agree with @Meligy on the name of @i18n, maybe @ng-i18n/core instead?\n. ",
    "ozexpert": "Thanks for clarification @mhartington \n. thanks. I'll go with that version. \n. ",
    "nsanitate": "Ok, asap a new pull request.\n. ",
    "chl03ks": "ng2-tanslate 2.0.0 now only works with beta >=16 because of a change in pipe arguments\n38ec3f1a\nmaybe you'll need to update your angular to beta.16 and also zone.js to  0.6.12\n. @rdesimone  i was using v1.11.1 with beta.15 and it was working fine maybe downgrade your npm version of ng2-translate  to ^1.11.1\n. close this ?\n. ",
    "rdesimone": "Thanks, I am supposing this. Is there a way to install a lower version? Asked differently: how to make it work with the latest Ionic 2 Beta 6 which uses angular 15?\n. @gvsdan I installed 1.11.1 but I end with the same exception: EXCEPTION: No provider for TranslateService! \n. @ocombe thanks for reviewing - yes I think the code is following your docs. Any further ideas?\nsee also the installed packages:\n\u251c\u2500\u2500 angular2@2.0.0-beta.15\n\u251c\u2500\u2500 del@2.2.0\n\u251c\u2500\u2500 es6-shim@0.35.0\n\u251c\u2500\u2500 gulp@3.9.1\n\u251c\u2500\u2500 gulp-watch@4.3.5\n\u251c\u2500\u2500 ionic-angular@2.0.0-beta.6\n\u251c\u2500\u2500 ionic-gulp-browserify-typescript@1.1.0\n\u251c\u2500\u2500 ionic-gulp-fonts-copy@1.0.0\n\u251c\u2500\u2500 ionic-gulp-html-copy@1.0.0\n\u251c\u2500\u2500 ionic-gulp-sass-build@1.0.0\n\u251c\u2500\u2500 ionic-gulp-scripts-copy@1.0.1\n\u251c\u2500\u2500 ionic-native@1.1.1\n\u251c\u2500\u2500 ionicons@3.0.0-alpha.3\n\u251c\u2500\u2500 ng2-translate@1.11.1\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY reflect-metadata@0.1.2\n\u251c\u2500\u2500 run-sequence@1.1.5\n\u251c\u2500\u2500 rxjs@5.0.0-beta.2\n\u2514\u2500\u2500 UNMET PEER DEPENDENCY zone.js@^0.6.10\n. OK, thanks - let me know if I can provide further information.\n. @ocombe I noticed that there is a version ng2-translate@1.11.3 now.\nThe described issues disappeared with this new package. However, I am facing problems with Pipes now. See source above for bootstrap.\n```\nen.json:\n{\n  \"Card\" : \"Card\",\n  \"History\" : \"History\",\n  \"Account\" : \"Account\",\n  \"Info\" : \"Info\"\n}\nThe console displays this error:\nEXCEPTION: Error: Uncaught (in promise): Template parse errors:\nUnexpected closing tag \"ion-tab\" (\"s\" (change)=onChange()>\n  <ion-tab [root]=\"tab1Root\" tabTitle={{'Card' | translate}} tabIcon=\"card\">[ERROR ->]</ion-tab>\n. @ocombe I think this is related to a problem with the ion-tab - it seems that pipes cannot be used there.\n. ",
    "saurabhvyas": "Same here unexpected closing tag \n. ",
    "srikanth748": "I was able to implement translate in my Ionic2 app and it works quite well but the issue is I am unable to implement on the tabs components .\nhtml\n<ion-tabs>\n  <ion-tab  *ngFor=\"let tab of tabs\" [root]=\"tab.root\" [tabTitle]= \"tab.name\" [tabIcon]=\"tab.icon\">\n  </ion-tab>\n</ion-tabs>\nI wanted to implemented like this  [tabTitle]= \"tab.name | translate \" .\nI tried few workarounds : [tabTitle]= {{\"tab.name\" | translate }} ,\n[tabTitle]= {{'tab.name' | translate }} ,\n[tabTitle]= 'tab.name' | translate ,\nBut neither of them worked .\nSo i would know if somebody implemented this .Thanq\n. I tried this one too and the result i see on my app is on each tab it shows -- tab.name .Probably it took the whole binding with in double quotes as a string so it didnt work .\n. If so when I dont use translate pipe ,it gives me the right tabs but when i insert the pipe ,it reacts in a different way .\n. Finally this workaround is working for me as of now -- [tabTitle]= \"tab.name | translate\" .\nThanx for your guidance @ocombe \n. ",
    "plaums": "I would guess, that only tue observable stuff would be Importe, yes.\nNot sure if angular cli supports bundling in their build so far. You mean, I should use webpack in production?\n. Great, I'll read more about SystemJS.\nThanks!\n. ",
    "andzhik": "Have you found a solution? I have something similar (issue #119)\n. @matthieubouvierthales , yes, TranslateService is undefined.\n@Shootervm , no, that doesn't help.\n. ",
    "francois-appliware": "I haven't.\nI stopped using this module for now.\n. ",
    "eparini": "Have the same issue using SystemJS Builder.\n. ",
    "robsonke": "You're probably already aware of it, but in beta16 the pipe args isn't an array anymore but now separate arguments:\nhttps://github.com/angular/angular/commit/152a117\n. ",
    "Paladinium": "Confirming the same issue using beta 17.\n. Same here. Thanks @ocombe for your efforts!\n. Sure.\n. ",
    "simon-sharp": "+1\n. ",
    "egidijusj": "I've got it!\nFirstly, I did not properly define ng2-translate paths in karma.config.js. I changed it from\nnode_modules/ng2-translate/bundles/ng2-translate.js\nto\nnode_modules/ng2-translate/**/*.js\nAnd I forgot to add karma's /base prefix to SystemJs config in karma-test-shim.js:\nSystem.config({ packages: packages, map: {'ng2-translate': '/base/node_modules/ng2-translate'} });\n. Sorry man, I've did this long before 2.0.2 and have scraped the project since then.\n. ",
    "Emerceen": "@egidijusj \nI have the same problem with angular 2.0.2, can you show how you configure npm packages to test?\n. @KDusak I didn't solve problem. I have no idea how configure karma for test with ng2-translate. Every attempt did not work.\n. @KDusak \nI was able to configure karma.\nMy karma.conf.js files array:\nvar files = [\n    gulpConfig.tmpTest + 'test-helpers/global/**/*.js',\n    gulpConfig.src + 'systemjs.conf.js',\n    'config/test/karma-test-shim.js',\n    createFilePattern(gulpConfig.tmpApp + '**/*.js', { included: false }),\n    createFilePattern(gulpConfig.tmpTest + 'test-helpers/*.js', { included: false }),\n    createFilePattern(gulpConfig.app + '**/*.html', { included: false }),\n    createFilePattern(gulpConfig.app + '**/*.css', { included: false }),\n    createFilePattern(gulpConfig.app + '**/*.ts', { included: false, watched: false }),\n    createFilePattern(gulpConfig.tmpApp + '**/*.js.map', { included: false, watched: false }),\n    createFilePattern('node_modules/ng2-translate/**/*.js', { included: false, watched: false })\nImport in component:\nimport { TranslateService, TranslateLoader } from 'ng2-translate';\n. +1. ",
    "joaopgrassi": "@egidijusj I followed @egidijusj advice and it worked. I was getting the exact same error when running my gulp build or tests. I think my problem was that in karma-test.shim.js I missed the /base in the path.\nBasically:\nsystemjs.config:\n```\nmap: {\n    application: 'src/app',\n//..more stuff here\n\n'ng2-translate': 'node_modules/ng2-translate'\n\n},\npackages: {\n    ...\n'ng2-translate': {\n    defaultExtension: 'js'\n}\n\n}\n```\nIn karma.config.js inside Files[]:\n{ pattern: 'node_modules/ng2-translate/**/*.js', included: false, watched: false },\nAnd in karma-test.shim.js\n```\nSystem.config({\n    baseURL: '/base',\n//more stuff here\n\nmap: {\n    //more stuff here\n    'ng2-translate': '/base/node_modules/ng2-translate'\n},\n\n});\n```\n. ",
    "KDusak": "@Emerceen Did you solve the problem? I am facing something similar and I am looking for some karma configuration example. I am new to Angular2 and Karma and other stuff and internet is full of weird examples. I will apreciate any help, thank you\n. ",
    "zewa666": "@nadavsinai hey can you update your PR to cover rc1?\n. ",
    "nadavsinai": "oups, sorry I needed these files for direct consumption in my app (without npm publish the repo I was getting from NPM was useless so I modified the gitignore and added the built files for my use untill my PR is merged and  normal package published to NPM. I will now close this PR and open one against a branch that contains only the RC.0 changes, actualy while at it -i'll make it rc.1\n. ",
    "fctucker": "awesome, can't wait!  thanks for the update\n. if you're eager to get something working, you can also use this pull request: https://github.com/ocombe/ng2-translate/pull/115\n. ",
    "aneesa": "Thanks! Turns out I don't need to call translate.use again in the onLangChange function\njavascript\n    this.translate.onLangChange\n      .subscribe((event: LangChangeEvent) => {\n        // REMOVE this line to make it work\n        // this.translate.use(event.lang);\n        this.setLocales();\n    });\n. ",
    "matthieubouvier": "Is your TranslateService provider undefined ?\nIt seems to be the same issue as the #120 ...\n. It seems to be the same issue as me.\nI found a solution (workaround?):\n- Import ng2-translate with script tag:\n<script src=\"angular2/ng2-translate/bundles/ng2-translate.js\"></script>\n- Do not reference ng2-translate in systemjs\n- In main component:\nimport { TranslatePipe, TranslateService, TRANSLATE_PROVIDERS } from 'ng2-translate';\n[...]\n@Component({\n...\nproviders: [..., TRANSLATE_PROVIDERS, ...],\npipes: [TranslatePipe]\n...\n}\n[...]\nexport class AppComponent {\nconstructor(..., private _translateService: TranslateService, ...) {}\n[...]\n}\n. The solution provided by @svenloe worked for me: no more error bootstrapping the application.\nBut I got another error in the application main component constructor: the injected TranslateService is undefined.\nSo the browser console shows:\nEXCEPTION: TypeError: Cannot read property 'query' of null\nbrowser_adapter.js:77 EXCEPTION: TypeError: Cannot read property 'query' of nullBrowserDomAdapter.logError @ browser_adapter.js:77\nbrowser_adapter.js:86 EXCEPTION: Error: Uncaught (in promise): TypeError: Cannot read property 'query' of null\nbrowser_adapter.js:77 EXCEPTION: Error: Uncaught (in promise): TypeError: Cannot read property 'query' of nullBrowserDomAdapter.logError @ browser_adapter.js:77\nbrowser_adapter.js:77 STACKTRACE:BrowserDomAdapter.logError @ browser_adapter.js:77\nbrowser_adapter.js:77 Error: Uncaught (in promise): TypeError: Cannot read property 'query' of null\n    at resolvePromise (zone.js:538)\n    at PromiseCompleter.reject (zone.js:515)\n    at eval (application_ref.js:295)\n    at ZoneDelegate.invoke (zone.js:323)\n    at Object.NgZoneImpl.inner.inner.fork.onInvoke (ng_zone_impl.js:45)\n    at ZoneDelegate.invoke (zone.js:322)\n    at Zone.run (zone.js:216)\n    at zone.js:571\n    at ZoneDelegate.invokeTask (zone.js:356)\n    at Object.NgZoneImpl.inner.inner.fork.onInvokeTask (ng_zone_impl.js:36)BrowserDomAdapter.logError @ browser_adapter.js:77\nzone.js:461 Unhandled Promise rejection: Cannot read property 'query' of null ; Zone: angular ; Task: Promise.then ; Value: TypeError: Cannot read property 'query' of null(\u2026)consoleError @ zone.js:461\nzone.js:463 Error: Uncaught (in promise): TypeError: Cannot read property 'query' of null(\u2026)consoleError @ zone.js:463\nTwo questions:\n- The @svenloe solution is a workaround or the way to use providers ?\n- Am I the only one to have these problems (providers/injection undefined at runtime) since the update to RC1 ?\nThanks in advance !\n. Hello @svenloe,\nThe query is a service property, and the \"null\" service here is the TranslateService (seen with breakpoints).\n. ",
    "vmasek": "@andzhik maybe this will help you https://github.com/ocombe/ng2-translate/issues/120#issuecomment-224127374\n. Possible solution: \nI am at RC1 with angular-cli, had same problem and manged to get translate work. These are code parts that might be useful to locate yours problems.\nSystem config: (notice format: 'cjs' at pacages config, without this option TranslateService was undefined ) \ntypescript\nSystem.config({\n  map: {\n    /* ... */\n    'ng2-translate': 'vendor/ng2-translate',\n    /* ... */\n  },\n  packages: {\n   /* ... */\n   'ng2-translate': {\n      format: 'cjs',\n      defaultExtension: 'js',\n      main: 'ng2-translate'\n    },\n   /* ... */\n  }\n})\nto vendor folder i am copying as 'ng2-translate/**/*.js' so 'ng2-translate/ng2-translate.js' and also 'ng2-translate/src/*.js' are copied\n. ",
    "svenloe": "I found a Solution: \nconst TRANSLATE_PROVIDERS2: any = [\n    provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http),\n        deps: [Http]\n    }),\n    provide(TranslateService, {\n        useFactory: (http: Http, translateLoader: TranslateLoader) => new TranslateService(http, translateLoader, null),\n        deps: [Http, TranslateLoader]})\n];  \nThis constant works for me.\n. Hello @matthieubouvierthales \nfor me ng2-translate works now with RC1. I have my constant in my main.ts and a constructor(private _translate: TranslateService). A Pipe: pipes: [TranslatePipe]. I set the _translate.setDefaultLang('en') and _translate.use('en').\nThen it works for me.\nMy solution is a workaround ng2-translate should fix its constant. \nYour stacktrace complains about 'query'. I do not see a connection to ng2-translate in the stacktrace. Perhaps it is an other part of your app that does not work.\n. I have moved to Angular-Cli and it works fine. \n. ",
    "dvulanov": "I would like a bit of help with this too.  When I try and create the static loader inside app/index.ts:\n```\nimport {TRANSLATE_PROVIDERS,\n  TranslateService,\n  TranslateLoader,\n  TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {provide} from '@angular/core';\nimport {Http} from '@angular/http';\n// Application wide providers\nexport const APP_PROVIDERS = [\n  AppState,\n  provide(TranslateLoader, {\n    useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n    deps: [Http]\n  }),\n  TRANSLATE_PROVIDERS,\n  TranslateService\n];\n```\nit doesn't init TranslateLoader properly.  I get this error in the console:\nzone.js:101 GET http://localhost:3000/i18n/en.json 404 (Not Found)scheduleTask @\nit ignores the 'assets/i18n' configuration and I'm guessing the entire provider initialization.\nIf I simply move my i18n directory to the top level, things work fine.\n. From my original query @sliker noted that you have to ensure your ./i18n is copied into the asset folder, but webpack starter kit already ensures that everything in assets is copied over to dist build.\nhttps://github.com/ocombe/ng2-translate/issues/122 addressed the issue.  Remove TRANSLATE_PROVIDERS from the bootstrap or it will override with a default loader.\nSimply removing this ensures that the translate files are sources properly.\n. @juliovg \nI'm not sure why you need to remove TRANSLATE_PROVIDERS past the explanation that #122 gives.  But it worked for me.  Are you still having issues?  Your setup looks fine to me.  Although, personally I haven't tested my setup using params.\n. ",
    "sliker": "@maxkarpovets @dvulanov I don't use the starter kit but steps are the same.\nIf you have the latest version of the kit you can avoid the step 2.\n1. import in your vendors file import 'ng2-translate';\n2. You need to copy the i18n json files to assets folder using webpack, I use CopyWebpackPlugin\n```\nnew CopyWebpackPlugin([\n    {\n        from: helpers.root('src', 'public', 'i18n'), // replace with your folder\n        to: 'assets/i18n'\n   }\n])\n```\n. ",
    "sanathpathiraja": "https://github.com/akveo/ng2-admin/issues/8\n. use this,\nbootstrap(App, [\n    ...PROVIDERS,\n    HTTP_PROVIDERS,\n    provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n        deps: [Http]\n    }),\n    // use TranslateService here, and not TRANSLATE_PROVIDERS (which will define a default TranslateStaticLoader)\n    TranslateService\n  ])\nand import json files into assets folder. \n. after i used \npipes.ts\nexport const APPLICATION_PIPES = [TranslatePipe];\n. ",
    "juliovg": "Hello everybody, i need your help: @maxkarpovets @dvulanov @sliker @ocombe\nI try to prepare a small example, that you can see on: https://github.com/juliovg/ng2-translate\nI don't know what is wrong, can you help me?\nMy error is something like:\nVM12832:77 TypeError: Cannot read property 'annotations' of undefined\u2028at ReflectionCapabilities.annotations (eval at (vendor.js:237)\nReally thanks\n. Hi @dvulanov I don't understand\ni leave my main.ts like this:\n```\nimport {Http, HTTP_PROVIDERS}               from '@angular/http';\nimport {Component, Injectable, provide}     from '@angular/core';\nimport {TranslateService,\n        TranslatePipe, TranslateLoader,\n        TranslateStaticLoader}              from 'ng2-translate/ng2-translate';\nimport {bootstrap}                          from '@angular/platform-browser-dynamic';\nbootstrap(AppComponent, [\n    HTTP_PROVIDERS,\n    provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n        deps: [Http]\n    }),\n    TranslateService\n]);\n@Component({\n    selector: 'app',\n    template: <div>{{ 'HELLO' | translate:{value: param} }}</div>,\n    pipes: [TranslatePipe]\n})\nexport class AppComponent {\n    param: string = \"world\";\nconstructor(translate: TranslateService) {\n    var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n    userLang = /(fr|en)/gi.test(userLang) ? userLang : 'en';\n\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\n    translate.use(userLang);\n}\n\n}\n```\nbut i don't understand why i should delete TRANSLATE_PROVIDERS ?\nI updeted my repository, can you send the solution ?\nreally thanks\n. ",
    "danielquintero": "@ocombe I have pretty much follow every step and spend 2 days trying to figure out an issue I have. steps I followed are:\n- npm installed ng2-translate\n- import ng2-translate (vendors.ts)\n- TRANSLATE_PROVIDERS (added to APPLICATION_PROVIDERS)\n- provide(TranslateLoader, {\n    useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n    deps: [Http]\n  }),\n  TranslateService (added to bootstrap function)\n- TranslatePipe (added to APPLICATION_PIPES)\n- /i18/en.json - es.json\nMy issue is that the content type for the requested .json file with the translations is set to: \n\nContent-Type:text/html; charset=UTF-8\n\nI'm building a MEAN app with https://github.com/datatypevoid/vulgar which is based on A2 & Webpack startkit. Express is set to be serving static files in asset directory as:\n\napp.use(express.static(__dirname + '/dist'));\n\ni18 directory is succesfully copied into dist/\nplease help me!!\n. Nevermind, must have been too tired and just found out it was a typo in my folder named i18 missing the \"n\"..\n. ",
    "ht89": "@sliker Thank you so much for your help. It took me so much time to find a solution to the problem.\n. You should install Copy Webpack Plugin in this link Copy Webpack Plugin. It's used to copy files from a source to another. I tried it and now angular can find the JSON files.\nThe important lines to notice are these:\nnew CopyWebpackPlugin([\n      {\n        from: 'src/assets/i18n',\n        to: 'assets/i18n'\n      }\n ])\nreplace the from with the folder that stores your JSON files\n. @yogesh51 If you follow the guide of ng2-translate correctly, you will know that you need to put this (the lines in bold below) in app.module.ts to point to the public folder that stores the JSON files. \n@NgModule({\n  imports: [\n    BrowserModule,\n    AuthModule,\n    HomeModule,\n    CoreModule.forRoot(),\n    AppRoutingModule,\n    TranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (http: Http) => new TranslateStaticLoader(http, 'dist/assets/i18n', '.json'),\n      deps: [Http]\n    })\n  ],\n  declarations: [AppComponent, HeaderComponent, FooterComponent, AsideComponent],\n  bootstrap: [AppComponent]\n})\n. ",
    "lohiarahul": "@dvulanov It only works when it is on the top level for me too.\n\"EXCEPTION: Response with status: 404 Not Found for URL: \nhttp://localhost/[mywebsitename]/assets/i18n/fr.json\"\nIt doesnt insert the [distFolderName] between [mywebsitename] and \"assets/i18n/fr.json\"\nIn my app.module.ts\n{\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n            deps: [Http]\n        },\nI looked at #122 too, didnt help. I have used the CopyPlugin as suggested by @sliker and it does copy all the files to the distribution folder. Problem is using the public path to point to the dest folder.. ",
    "AlwaysAbhl001": "This is my app.module.ts\n```\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpModule, Http } from '@angular/http';\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http, \"i18n/\", \".json\");\n}\n@NgModule({\n    bootstrap: [ AppComponent ],\n    declarations: [\n        AppComponent,\n        HomeComponent\n    ],\n    imports: [\n        UniversalModule, FormsModule, TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [Http]\n            }\n          }),// Must be first import. This automatically imports BrowserModule, HttpModule, and JsonpModule too.\n        RouterModule.forRoot([\n            { path: '', redirectTo: 'home', pathMatch: 'full' },\n            { path: 'home', component: HomeComponent },\n            { path: '**', redirectTo: 'home' }\n        ])\n    ]\n})\nexport class AppModule {}\nimported  Translate service in my ts file and rest of the code:\nconstructor(private translate: TranslateService) {\n    translate.addLangs(['en', 'esp']);\n    translate.setDefaultLang('en');\n\n    let browserLang: string = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|esp/) ? browserLang : 'en');\n\n```\ncoming to my template \n```\n{{'Translater' | translate}}\n<select #langSelect (change)=\"translate.use(langSelect.value)\">\n    <option *ngFor=\"let lang of translate.getLangs()\" [value]=\"lang\" [selected]=\"lang === translate.currentLang\">{{ lang }}</option>\n</select>\n\n```\nAnd i18n folder contains en.json fr.json files.\n\"EXCEPTION: Response with status: 404 Not Found for URL: \nWhat was my mistake ?\nFYI: i  installed only ngx-translate. Is there any doc regarding how to use multiple loaders ? . @uberspeck  could you achieve it ? if so, provide link so get know how to use it.. @jlberrocal  let i18n = require(./i18n/${lang}.json); i need to call this at every component ? . This one gave me the solution @premiumwd  thanks for your response.. ",
    "vinodkumartiwari": "Update and add i18n to .angular-cli.json:\ne.g.\n\"apps\": [\n{\n\"root\": \"src\",\n\"outDir\": \"dist\",\n\"assets\": [\n\"assets\",\n\"favicon.ico\",\n\"i18n\"\n],. Edit the .angular-cli.json where we need include the newly created language folder i18n:\n\"apps\": [\n{\n\"assets\": [\n\"i18n\"\n],\n...\nNow you can browse the location http://localhost:4200/i18n/en.json and this will be available and issue will be resolved. Try using the following demo:\nhttps://github.com/vinodkumartiwari/angular2-ngx-translate-demo-angular-cli.git\n. Open .angular-cli.json and add the folder i18n to resolve the error: GET http://localhost:4200/i18n/es.json 404 (Not Found) \nExample:\n\"apps\": [\n{\n\"assets\": [\n\"i18n\"\n],\n...\nTry to browse http://localhost:4200/i18n/en.json. Hope this will help to resolve the 401 issue.\nTry using https://github.com/vinodkumartiwari/angular2-ngx-translate-demo-angular-cli.git. ",
    "vdest": "I'm getting this as well. I'm using the config: new TranslateStaticLoader(http, 'assets/i18n', '.json')\nbut it seem assets gets \"lost\" somewhere as it tries to load my files directly from /i18n.\n. ",
    "jnber5": "Same thing here, but only when I try to run my tests with Karma i get a 404 not found on /i18n/en.json ...\nMy dev and prod builds works fine\n. ",
    "armendshala": "and for production mode .. how to solve it ? \nBecause it calls localhost\nCan anybody help me !. ",
    "OasisLiveForever": "Maybe we need two different methods, one for getting a single string and one for getting multiple strings. When getting multiple strings, we should pass an array of objects for parameters.\nMaybe we can also change the names of methods:\n// Old instant method\ngetString(key: string, interpolateParams?: Object): string\n// Old get method\ngetStringAsync(key: string, interpolateParams?: Object): Observable<string>\n// New method for getting multiple strings\ngetStrings(keys: Array<string>, interpolateParams?: Array<Object>): any\n// New method for getting multiple strings async\ngetStringsAsync(keys: Array<string>, interpolateParams?: Array<Object>): Observable<any>\nWhat do you think?\n. ",
    "Lukec1": "Is it possible now?. ",
    "sabbynair": "Any updates on this? Is this possible in any way now? This would be a really useful feature.. ",
    "revenz": "bump.  im too after this feature.  my use case is \n\"DateRange\": {\n        \"Today\": \"Today\",\n        \"Yesterday\": \"Yesterday\",\n        \"LastDays\": \"Last {num} days\",\n        \"ThisMonth\": \"This Month\",\n        \"LastMonth\": \"Last Month\"\n    },\ntranslate.get(['DateRange.Today', 'DateRange.Yesterday', 'DateRange.LastDays', 'DateRange.LastDays', 'DateRange.ThisMonth', 'DateRange.LastMonth'])\nI want the first \"LastDays\" to be passed 7 and the second one passed \"30\", so my calendar input shows \"Last 7 Days\" and \"Last 30 Days\".  The work around is to you have 2 separate translations, but it would be nice to just have the one and use a variable.. ",
    "VictorCoding": "Aah. Ok can we ignore this post, I had things backwards this morning. I thought I had the latest angular buid, but I was on beta 14. -.-\nApologize for the inconvenience.\n. ",
    "gastonmq": "Than, I solved as follows\n{\n\"CHANGELINES\": \"Cambiar tr\\u00e1mite\",\n}\n. ",
    "StephenLujan": "For now I've just copied that one extra file into place. @angular/core/src/facade/lang.js I haven't seen any other issues.\n. ",
    "mikeumus": "Hey @danielgolub, see: \n- https://github.com/angular/angular/issues/8519\n- https://stackoverflow.com/questions/37165992/angular-2-exception-typeerror-cannot-read-property-isskipself-of-null-brow\nHope it helps. :smile: \n. ",
    "danielgolub": "Well I had a pretty stupid problem, and it's not related to ng2-translate module.\nI had a component with a provider 'ElementRef'..\n@Directive({\n  selector: '[no-internet]' // Attribute selector\n  providers: [ ElementRef ],\n})\nHad to delete the ElementRef provider.\n. On my side it writes:\n[16:58:58]  Error: Module /node_modules/ng2-translate/ng2-translate.js does not export TranslateLoader (imported by /.tmp/app/app.module.js)\nI did the following in app.model.ts:\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\nimports: [\n    BrowserModule,\n    HttpModule,\n    TranslateModule.forRoot({\n        provide: TranslateLoader,\n        useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n        deps: [Http]\n    }),\n    IonicModule.forRoot(MyApp)\n],\nexports: [BrowserModule, HttpModule, TranslateModule],\n. ",
    "supertorpe": "An easy workaround: implement a pipe that inherits from TranslatePipe and takes into account the arrays:\n```typescript\nimport { PipeTransform, Pipe, Injectable } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n@Injectable()\n@Pipe({ name: 'translatext', pure: false })\nexport class TranslatextPipe extends TranslatePipe implements PipeTransform {\n    transform(query: string, ...args: any[]): any {\n        const result = super.transform(query, args);\n        if (result instanceof Array) {\n            return result.join('\\n');\n        } else {\n            return result;\n        }\n    }\n}\n```\n...then in the template:   {{ 'mykey' | translatext }}. An easy workaround: implement a pipe that inherits from TranslatePipe and takes into account the arrays:\n```typescript\nimport { PipeTransform, Pipe, Injectable } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n@Injectable()\n@Pipe({ name: 'translatext', pure: false })\nexport class TranslatextPipe extends TranslatePipe implements PipeTransform {\n    transform(query: string, ...args: any[]): any {\n        const result = super.transform(query, args);\n        if (result instanceof Array) {\n            return result.join('\\n');\n        } else {\n            return result;\n        }\n    }\n}\n```\n...then in the template:   {{ 'mykey' | translatext }}. There is a tool called babeledit that serves exactly what you need. ",
    "thoemmi": "Unfortunately, this workaround doesn't support parameters. E.g. if you have this translation:\njavascript\n{\n    \"HOME\": {\n        \"HELLO\": [ \"hello\", \"{{value}}\" ]\n    }\n}\nhtml\n<div>{{ 'HELLO' | translate:param }}</div>\nthen {{value}} won't be replaced. I guess parameters are handled only in strings, but not string arrays.. ",
    "wulfsolter": "Ionic is now at 2.0.0-beta.25, could be a good time to get up to date.\n. @trentclowater Apologies, you are correct :) too many versions to keep track of, and this weeks upgrade has too often been referred to by Angular's RC1 milestone.\n. ",
    "trentclowater": "Beta 7 is the latest release of the Ionic framework (released just a few days ago). It's the Ionic CLI that is currently at 2.0.0-beta.25.\n. Since you're using Ionic 2, another alternative would be to use Platform.lang().. ",
    "katan": "The same problem here for  2.0.0-beta.6\n. Same issue here using a lazy load modules.. ",
    "danielbertini": "The same problem here for beta7.\n. ",
    "hackSlanger": "Same problem here for beta 7.\n. ",
    "saiy2k": "Upgrading to ng2-translate@2.1.0, fixed this issue :-)\nRef: https://forum.ionicframework.com/t/ocombe-ng2-translate-bug-in-ionic-beta-7-argument-of-type-http-is-not-assignable-to-parameter-of-type-http-132/53023\n. @ocombe Can you please tell how to fix this issue Pipe translate could not be found in ngx-translate@7.x?. ",
    "Dok11": "I have same trouble with last version of ngx-translate ^7.0.0 and Angular 4.3.6\n```\nFailed to compile.\n/data/main/src/app/app.module.ts (116,33): Argument of type 'HttpClient' is not assignable to parameter of type 'Http'.\n  Property '_backend' is missing in type 'HttpClient'.\n```\nMy code:\n```ts\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    ...\n    imports: [\n        ...\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [HttpClient],\n            }\n        }),\n    ],\n```\n\n. Yes, latest version is ok. ",
    "rikoroku": "To: Dok11\nI have the same trouble as you have.\nI fixed that.\nChange package.json :\nfrom\n\"@ngx-translate/core\": \"^9.0.1\",\nto\n\"@ngx-translate/core\": \"^8.0.0\",\nAfter, deleted node_modules directory and executed npm install. ",
    "polfdz": "@Dok11 I had the same problem. I solved with:\nnpm install @ngx-translate/http-loader@latest. ",
    "crebuh": "now it is working ... I didn't get the concept of the pipes in angular2. I thought I only have to use them, if I want to interpolate the translation strings with some variables. \n. @SamVerschueren \naaah big thx, this is usually what I do, but in that case I tought I could directly unsub from the translation service. now it is working :)\n. @peterpeterparker \nI've got the same setup, on the server-side the json-files are loaded correctly but on the client nothing happens. No error nothing, the file is just not loaded ... any Idea?. @peterpeterparker \nweird i had to remove the import of TranslateModule.forChild() in the browser.app-module then it worked. thanks for your detailed instructions!. @peterpeterparker \nyes of course ngx-translate should be initialized on the client-side too. I justed wanted to avoid that I have to fetch the json-file again. Of course when the user switches the language on the client-side (which won't happen that often) the corresponding json-file have to be loaded. so the workflow should look like this\n1) Init ngx-translate on the server side\n2) load json file and put its contents into the body of the side with the http-transfer-state module\n3) when the client kicks in ngx-translate is initialized again\n4) the loader on the client side checks if it can receive data via the http-transfer-state module if so take this data if not make an additional http call\nUpdate\nI got it working now. I had to write an additional loader for the client side\n``\n            import { Observable } from 'rxjs/Observable';\n            import { HttpClient } from '@angular/common/http';\n            import { TranslateLoader } from '@ngx-translate/core';\n            import { StateTransferService } from '@ngx-universal/state-transfer';\n        export class ClientLoader implements TranslateLoader {\n            constructor(\n                private http: HttpClient,\n                private stateTransfer: StateTransferService,\n                private prefix: string = 'i18n',\n                private suffix: string = '.json'\n            ) { }\n\n            public getTranslation(lang: string): Observable<any> {\n                return Observable.create(observer => {\n                    // get transfered translations\n                    let translations = this.stateTransfer.get('translations_' + lang);\n                    // if translations haven't been loaded fetch from server\n                    if (translations === undefined) {\n                        this.http.get(`${this.prefix}/${lang}${this.suffix}`).subscribe((data: any) => {\n                            // store translation, to avoid additional loading if language is changed again\n                            this.stateTransfer.set('translations_' + lang, translations);\n                            this.stateTransfer.inject();\n                            observer.next(data);\n                            observer.complete();\n                        });\n                    } else {\n                        observer.next(translations);\n                        observer.complete();\n                    }\n                });\n            }\n        }\n\n``\nwork like charm now. As said if the data has already been loaded on the server side, I just grab it from the cache if not (in case the language is changed) I fetch it again from the server :). @peterpeterparker \nyes you are right, but I think it will still be faster than fetching with an additional http call ;). ",
    "mobilabgit": "I  removed the mapping in the translate.service.js after which the debugger showed the correct reference. Following the debugger I noticed I was using the incorrect key...\n. ",
    "bmayen": "User error. Closing.\n. Sorry, I can't remember at this point. May 26 feels like it was a year ago :/ \nChecked project commit history, but the only commit at that time is the working version. Not sure what I was doing locally before the commit that was causing the issue. Want to post your source?\n. ",
    "mattvague": "Hi, what was your resolution for this? Having the same issue\n. ",
    "beck24": "Only use double-quotes to format your json\n. That's working for me, I think your problem might be elsewhere\n. @CoDanny I don't suppose you have this working with ionic 3?  There's been some changes and this isn't working as-is, can't seem to get it working correctly. really? It's not working for me on the latest ionic, getting this exact error.  I ended up removing WKWebView last night just so I could move forward but I'd much rather have them both working :/. ok thanks, I wasn't aware there was an ionic fork.  Will give that try.. ",
    "djavrell": "my json is formated like this\n\n{ \"var1\": \"some text\" }\n\nand it's work, but the probleme is in this case \n\n{ \"var2\": \"some test, i'll try something\" }\n. that strange it's work now\n\nsorry for the inconvenience\n. ",
    "matthewrk": "Not sure if I'm understanding correctly but I don't think that solves the issue? I need to pass in a variable translation to a key. E.g. \"{Reference} is a required field\" where the word reference is variable and requires translation, and the rest of the string also requires translation.\nFrom the look of the linked documentation that only allows you to give the same key different namespaces.\n. ",
    "pfrendo": "I'll open a PR for this soon no worries :) !\n. Question, what if I don't want a TranslateLoader :) ?\n. Ok, but that is why I left this issue to see if it makes sense to switch it off, maybe I didn't explain it correctly :) Sorry!\n. Ok dude no worries! Thanks \n. @ocombe any progress :)\n. @ocombe thanks \n. @ocombe ping, would really like to help you improve this as I think it's a really good library but help me help you :+1: \n. @ocombe ping\n. @Sergejack all you do is set the shouldMerge flag to true when using the setTranslation method. ",
    "venkataramkishore": "Hi \nI did as follows but still the same. Any thing else i am missing.\nts\nbeforeEachProviders(() => [\n      TestComponentBuilder,\n      ROUTER_PROVIDERS,\n      HTTP_PROVIDERS,\n      provide(TranslateService, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n        deps: [Http]\n      }),\n      provide(TranslateLoader, {\n        useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n        deps: [Http]\n      }),\n      provide(XHRBackend, { useClass: MockBackend }),\n      TestComponent\n    ]);\n. Hi I have modified as you suggested. Gud news is error is resolved.\nBut Bad news is not able to see expected tranlsation. I have modified as below my test case\nimport {\n  describe,\n  expect,\n  it,\n  inject,\n  async,\n  beforeEachProviders\n} from '@angular/core/testing';\nimport { Component } from '@angular/core';\nimport { provide } from '@angular/core';\nimport { TestComponentBuilder } from '@angular/compiler/testing';\nimport { ROUTER_PROVIDERS } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { HTTP_PROVIDERS, XHRBackend, Http } from '@angular/http';\nimport { MockBackend } from '@angular/http/testing';\nimport { TranslateService, TranslateLoader, TranslateStaticLoader, TranslatePipe } from 'ng2-translate/ng2-translate';\nimport { getDOM } from '@angular/platform-browser/src/dom/dom_adapter';\nimport { ProductService } from '../product/shared/product.service';\nexport function main() {\ndescribe('App component example', () => {\n    let tcb: TestComponentBuilder;\n```\n//setup\nbeforeEachProviders(() => [\n  TestComponentBuilder,\n  ROUTER_PROVIDERS,\n  HTTP_PROVIDERS,\n  provide(TranslateLoader, {\n    useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n    deps: [Http]\n  }),\n  TranslateService,\n  ProductService,\n  provide(XHRBackend, { useClass: MockBackend }),\n  TestComponent\n]);\n//specs\nit('should render Hello World!', async(inject([TestComponentBuilder],\n  (_tcb: TestComponentBuilder) => {\n    tcb = _tcb;\n    tcb.createAsync(TestComponent).then(fixture => {\n  fixture.debugElement.componentInstance.isPanelActive = true;\n  fixture.detectChanges(); //trigger change detection\n\n  let element = fixture.debugElement.children[0].nativeElement;\n\n  //Check for headings\n      expect(getDOM().querySelector(element, '.headingXL').textContent).toEqual('some text in nl');\n      expect(getDOM().querySelector(element, '.headingS').innerText).toEqual('some text in nl');\n    });\n})\n  .catch(e => fail(e));\n\n})));\n```\n});\ndescribe('App Component Tests', () => {\n```\n//setup\nbeforeEachProviders(() => [\n  TestComponentBuilder,\n  ROUTER_PROVIDERS,\n  HTTP_PROVIDERS,\n  provide(TranslateLoader, {\n    useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n    deps: [Http]\n  }),\n  TranslateService,\n  ProductService,\n  provide(XHRBackend, { useClass: MockBackend }),\n  TestComponent\n]);\nit('shows see title and header',\n  inject([TestComponentBuilder],\n    (tcb: TestComponentBuilder) => {\n      return tcb\n        .createAsync(TestComponent)\n        .then((fixture: any) => {\n          //Enable the component first.\n          fixture.debugElement.componentInstance.isPanelActive = true;\n          fixture.detectChanges(); //trigger change detection\n          let element = fixture.debugElement.children[0].nativeElement;\n      //Check for headings\n      expect(getDOM().querySelector(element, '.headingXL').textContent).toEqual('some text in nl');\n      expect(getDOM().querySelector(element, '.headingS').innerText).toEqual('some text in nl');\n    });\n}\n\n));// End of it\n```\n});//End of description\n}//End of main\n@Component({\n  selector: 'test-app-cmp',\n  directives: [AppComponent],\n  template: ''\n})\nclass TestComponent {\n  constructor(translate: TranslateService) {\n        var userLang = 'nl'; //navigator.language.split('-')[0]; // use navigator lang if available\n        translate.setDefaultLang('nl');        translate.use(userLang);\n    }\n}\nFollowing is test case failure:\n App component example\n    \u00d7 should render Hello World!\n      PhantomJS 2.1.1 (Windows 7 0.0.0)\n    Expected '' to equal 'some text in nl'.\n    invoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:323:34\n    onInvoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/async-test.js:76:50\n    invoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:322:43\n    run@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:216:50\n    D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:571:61\n    invokeTask@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:356:43\n    runTask@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:256:58\n    drainMicroTaskQueue@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:474:43\n    F@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:12217\n    H@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:11846\n    when@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:15520\n    run@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:16632\n    _drain@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:3250\n    drain@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:1667\n    Expected '' to equal 'some text in nl'.\n    invoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:323:34\n    onInvoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/async-test.js:76:50\n    invoke@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:322:43\n    run@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:216:50\n    D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:571:61\n    invokeTask@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:356:43\n    runTask@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:256:58\n    drainMicroTaskQueue@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/zone.js/dist/zone.js:474:43\n    F@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:12217\n    H@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:11846\n    when@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:15520\n    run@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:16632\n    _drain@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:3250\n    drain@D:/testingworkspace/oveasy-propositie-app-rc1/node_modules/systemjs/dist/system-polyfills.js:4:1667\n. What is the recommended way to implement translations. \nDo you have plan to adapt XLIFF for translations ? \nAngular 2 has support for XLIFF not yet release i guess. Which one to choose?\nI am still working on your link to implement test case though.\n. Hi I have tried to see test case give in url, but it is beta version code i guess, can the test case be updated to rc1? I was wondering to load currentLoader property than useStaticloader() method.\n. i wrote test case but it worked with static loader but, I want to fetch the text from the ui and validate with translation. I am confused with lot of examples online. Is that possible for you to share some example with seed project.?\n. ",
    "happyvig": "Error that I received, while testing the translation :\nError: No provider for TranslateService! (TranslatePipe -> TranslateService) \nAbout should log ngOnInit FAILED\nError: No provider for TranslateService! (TranslatePipe -> TranslateService) \nin D:/user/angular2-project/config/spec-bundle.js (line 15467)\n. ",
    "amandala": "@knalli referred me to this documentation for escaping html in translate strings which seems to indicate that it cannot be done without opening the app up to XSS attacks. \nIs there no way to easily include html tags in translate strings? The following simply creates an empty paragraph tag.\n\"withSpan\" : \"Here is some text <span>with a span</span> for formatting\"\n<p translate=\"withSpan\"></p> // creates empty p tag\n{{ \"withSpan\" | translate }} // outputs markup as plain text\n. ",
    "Bouzmine": "Try using this\njs\n<p [innerHtml]=\"{{ 'withSpan' | translate }}\"></p>\n. ",
    "phiphou": "If we do \n<p [innerHtml]=\"{{ 'withSpan' | translate }}\"></p>\nwe get an error:\nParser Error: Got interpolation ({{}}) where expression was expected at column 0 in [{{ 'withSpan' | translate }}]\nChange to \n<p [innerHTML]=\"'withSpan' | translate\"></p>\nmake it works ;) \n. ",
    "Habeeb-mohamed": "@phiphou This binding not working in IE 11 :(. ",
    "El-Tee-E": "We have the same issue as @ocombe -  the innerhtml does not work in IE11:\nshows a translated text but with the html as text, not rendered html. Also for some reason it shows the text twice. \nEx.\n```\n\"title\": \"Hello from this world\"\n{{'title' | translate}}\n```\nResult in IE 11: \nHello from this <strong>world</strong>Hello from this <strong>world</strong>\nExpected result (and result in other - not crappy - browsers): \nHello from this world\nWe are experiencing this bug in our ng4.1 project.\nWorse part is that stats show IE 11 is 2nd most used browser by our users.\nWill this issue be addressed  (or is there a workaround)? . ",
    "yoava": "+1 \nI'm using a custom TranslateLoader and have no need for Http, this dependency just bloats my served js.\n. I guess :)\nBut removing the Http dependency will only take 1 minute :) (it's not really used)\nHere's a pull request with the fix - https://github.com/ocombe/ng2-translate/pull/149\n. ",
    "dscheerens": "That is probably also a good idea, but what I was actually referring to is the Http dependency in the constructor of the TranslateService class.\n. ",
    "davidTurczi": "Definite +1 (especially if {{'HELLO'|translate:{value:'@WORLD'} }} would indeed do Hola Mundo in spanish per #141)...\n. ",
    "cronosxfiles": "I guess there's nobody working on this. I've just found myself in the same need as for #141. Have anyone found a workaround for having the key value translated outside the translation pipe so the translated result can be provided as a parameter's key value?. I've tried this and got the error: \"Can't bind to 'translate-value-field' since it isn't a known property of...\". ",
    "eplefreeweb": "hey\nI temporarily solved this problem. ^^;;\nas problem : {{ 'Forms.Validation.Required' | translate : { field: 'Users.Reference' | translate } }}\nto solved :  \nWas it helpful? :). ",
    "acantrell": "@cronosxfiles binding to translateParams accomplishes what #141 asked for.\nExample:\n<div translate=\"FIELD_REQUIRED\" [translateParams]=\"{field: 'FIRST_NAME' | translate}\"></div>\n\"FIELD_REQUIRED\": \"{{field}} is required\"\n\"FIRST_NAME\": \"First Name\"\nresults in\n\nFirst Name is required\n. \n",
    "ibenjelloun": "I made a pipe that can be used like this : \n{{ 'KEY_TO_TRANSLATE' | translate: (values | ParamsTranslate) }}\nHere is the pipe code :\n```\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { first } from 'rxjs/operators/first';\nimport { map } from 'rxjs/operators/map';\n@Pipe({\n    name: 'ParamsTranslate'\n})\nexport class ParamsTranslatePipe implements PipeTransform {\n    constructor(private _translate: TranslateService) {}\ntransform(obj: Object): Object {\n    const newObject = Object.assign({}, obj);\n    Object.keys(obj).forEach(\n        key =>\n            obj[key].length\n                ? this._translate\n                      .get(obj[key])\n                      .pipe(first(), map(value => value))\n                      .subscribe(value => (newObject[key] = value))\n                : undefined\n    );\n    return newObject;\n}\n\n}\n```\nHere is a stackblitz demo : https://stackblitz.com/edit/ngx-translate-params-translate. ",
    "JackPapa0156": "I'm struggling with the same problem as @Bouzmine. Have anyone has found any solution, except modifying the translation file?. ",
    "doxiaodong": "@ocombe , It can not change to 'en' until the 'en.json' is already loaded in RC2.  I work around it by double calling this.translate.use('en'). Please fix it,  thx!\n. Mysite is https://darlin.me,\nI use as follow:\nhttps://github.com/doxiaodong/darlin-angular2/blob/develop/src/main.browser.ts#L27\nhttps://github.com/doxiaodong/darlin-angular2/blob/develop/src/app/footer/footer.component.ts#L64\nplease click right-bottom \u8bed\u8a00\u8bbe\u7f6e(Language)\n. Yep, it was fixed.\n. @ocombe, no, I only import the TranslateModule in the share module.\nI have 4 modules, others are article, user, and root app. How could I do?\n. @ocombe, I aready add it to the exports.https://github.com/doxiaodong/darlin-angular2/blob/develop/src/app/base/index.ts#L55\n. @ocombe, I forgot to tell you that I call 'use' in the root app https://github.com/doxiaodong/darlin-angular2/blob/develop/src/app/footer/footer.component.ts#L45,  and if I do not call in a lazyload module(like article), it will look like as follow. \n. I'm sorry, I do it, but it doesn't work. https://github.com/doxiaodong/darlin-angular2/commit/0ebc0ee7aadc5db05fc5c19b11b067ac8f1c3b48\n. It fetch '*.json' when each NgModule loaded\n. @SamVerschueren nice, and should I close this issue? @ocombe \n. ",
    "cschroeter": "We are using the i18nPluralPipe to solve this. \nHtml\nhtml\n<div>\n  {{ messages.length | i18nPlural: messageMapping | translate :{count: messages.length} }}\n</div>\nTypescript\njavascript\nclass MyApp {\n  messages: any[];\n  messageMapping: any = {\n    '=0': 'msg.none',\n    '=1': 'msg.singular.',\n    'other': 'msg.plural'\n  }\n  // ...\n}\nJson\njson\n{\n  \"msg.none\": \"You have no new messages\",\n  \"msg.singular\": \"You have one new message\",\n  \"msg.plural\": \"You have {{count}} new messages\"\n}\n. ",
    "gjuchault": "@cschroeter This might work for english, french etc. but russian will cause you some troubles\n. There are already well-known libraries that uses ICU : https://github.com/messageformat/messageformat.js (used by angular-translate)\nEdit: not documented but you can use many, few, etc. ",
    "Yimiprod": "Not working anymore since RC4 (https://github.com/angular/angular/issues/9826)\n```\nimport { Component } from '@angular/core';\nimport { NgLocalization } from '@angular/common';\nclass PluralLocalization extends NgLocalization {\n    getPluralCategory(value: any) {\n        if (value > 1) {\n            return 'other';\n        }\n    }\n}\n@Component({\n  templateUrl: 'shows.html',\n  providers: [{ provide: NgLocalization, useClass: PluralLocalization }]\n})\n```\n. ",
    "DethAriel": "While there is no built-in mechanism to do that yet, I came up with my own. If someone finds time to polish the thing, add unit tests, lang-change/translation change events and finally create a pull-request, that would be just awesome :)\n`````` ts\nimport { ChangeDetectorRef, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { I18nPluralPipe, NgLocalization } from '@angular/common';\nimport { TranslateService } from 'ng2-translate';\n/\n * Maps a numeric value to a pluralized translated string.\n \n * ## Usage\n \n * expression | pluralate:'PATH.TO.TRANSLATION.MAPPING'\n \n * ## Example\n \n * ts\n * @Component({\n *   selector: 'my-inbox',\n *   template: `\n *     <div>\n *       {{ messages.length | pluralate:'INBOX.MESSAGES_PLURAL_CATEGORIES' }}\n *     </div>\n *   `,\n * })\n * class MyInbox {\n *   messages: any[];\n *   // ...\n * }\n *\n\n * While the translation file is:\n \n * json\n * // en.json\n * {\n *  \"INBOX\": {\n *    \"INBOX.MESSAGES_PLURAL_ZERO\": \"Your inbox is empty :(\",\n *    \"INBOX.MESSAGES_PLURAL_ONE\": \"You have 1 new message\",\n *    \"INBOX.MESSAGES_PLURAL_OTHER\": \"You have {{ count }} new messages\",\n *\n *    \"MESSAGES_PLURAL_CATEGORIES\": {\n *      \"=0\": \"INBOX.MESSAGES_PLURAL_ZERO\",\n *      \"=1\": \"INBOX.MESSAGES_PLURAL_ONE\",\n *      \"other\": \"INBOX.MESSAGES_PLURAL_OTHER\"\n *    }\n *  }\n * }\n *\n\n * @implements {PipeTransform}\n /\n@Injectable()\n@Pipe({\n  name: 'pluralate',\n  pure: false, // required to update the value when the promise is resolved\n})\nexport class PluralatePipe implements PipeTransform {\n  private value: string = '';\nconstructor(\n    private translate: TranslateService,\n    private changeDetector: ChangeDetectorRef,\n    private localization: NgLocalization\n  ) {\n  }\npublic transform(query: string, pluralizationHolderKey: string): string {\n    let i18npipe: I18nPluralPipe = new I18nPluralPipe(this.localization);\nif (!query || query.length === 0) {\n  return query;\n}\n\nlet queryNum = parseInt(query, 10);\nif (isNaN(queryNum)) {\n  return query;\n}\n\nthis.translate.get(pluralizationHolderKey).subscribe((res: { [key: string]: string }) => {\n  let mapping = res;\n  let pluralCat = i18npipe.transform(queryNum, mapping);\n\n  this.value = this.translate.instant(pluralCat, { count: queryNum });\n  this.changeDetector.markForCheck();\n});\n\nreturn this.value;\n\n}\n}\n``````\n. @engular it's not really duplicated - every language has its own set of pluralization rules. So English only has \"=0\", \"one\", and \"other\", while Russian has \"=0\", \"one\", \"few\", \"many\", \"other\", and Spanish could also have custom rules for \"=2\" for \"ellos/ellas\" forms (depending on the input data). It might be that I misunderstood your duplication concern, though\n. Let me clarify that a bit. Right now, you can specify both a prefix and a suffix, which will result in the following URI:\ntypescript\n`${this.prefix}/${lang}${this.suffix}`\nAre you requesting something like this\ntypescript\n`${this.prefix}${lang}${this.suffix}`\nto be possible? Notice, that there's no / after prefix.\n. For those of you following this in an email, I removed the \"non-breaking\" piece from my previous comment\n. Here's a workaround if someone needs it:\n``` typescript\nimport { Injectable, Injector } from '@angular/core';\nimport { MissingTranslationHandler, TranslateService } from 'ng2-translate';\n@Injectable()\nexport class CustomMissingTranslationHandler extends MissingTranslationHandler {\n  private missingKey: string;\n  private translation: TranslateService;\n  constructor(private injector: Injector) {\n    super();\n  }\n  public handle(key: string) {\n    if (this.translation == null) {\n      this.translation = this.injector.get(TranslateService);\n    }\nif (this.missingKey != null) {\n  // already handling the missing translation, and the '__TRANSLATION_MISSING' part is missing, too.\n  // Return the key itself\n  let previouslyMissingKey = this.missingKey;\n  this.missingKey = null;\n  return previouslyMissingKey;\n}\n\nthis.missingKey = key;\n// do your thing using this.translation:\nlet result = this.translation.instant('__TRANSLATION_MISSING', { key });\nthis.missingKey = null;\nreturn result;\n\n}\n}\n```\n. @deepu105 for now I went with a workaround solution:\nhtml\n<span>\n  {{ 'ALREADY_SIGNED_UP_PREFIX' | translate }}\n  <a routerLink=\"/login\">{{ 'ALREADY_SIGNED_UP_LINK' | translate }}</a>\n  {{ 'ALREADY_SIGNED_UP_SUFFIX' | translate }}\n</span>\nAnd made it really obvious for localizators that these are part of one sentence via the supporting docs.\n. I have my components do this:\nhtml\n<select>\n  <option *ngFor=\"let country of countries\" value=\"{{country.code}}\">\n    {{ 'CODES.COUNTRIES.' + country.code | translate }}\n  </option>\n</select>\nand it works like a charm\n. Here's the fixed plunker.\nI only changed one line in config.js:\njs\nSystem.config({\n  // ...\n  map: {\n    'ng2-translate': 'npm:ng2-translate',\n    // previously it was:\n    // 'ng2-translate/ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.js',\n  },\n  // ...\n});\n. Dunno, @ocombe do you mind to chime in on that?\n. Fixed conflicts by rebasing onto the latest master, opened #275, closing current PR\n. Just performed a rebase to solve the merge conflict. @ocombe , can this PR be merged sometime soon, please?\n. This looks redundant to me - Angular 2 already has i18nPlural pipe, which deals with pluralization, handles locale-specific pluralization categories, and is generally more functional. Plus, it can already be used with ng2-translate like in this plunker. My vote would be to simpify that scenario in favor of reinventing the wheel.\nE.g. one should not have to do this:\n`` ts\n@Component({\n    selector: 'my-inbox',\n    template:\n\n      {{ inboxMsgs.length | i18nPlural:pluralizationMap }}\n    `,\n})\nexport class InboxComponent implements OnInit {\n    inboxMsgs = [];  \n    pluralizationMap = null;\nconstructor(private translate: TranslateService) {}\n\nngOnInit() {\n  this.translate.get('INBOX_MESSAGES_PLURAL')\n    .subscribe(map => this.pluralizationMap = map);\n}\n\n}\n```\nbut instead have ng2-translate do the job internally, something like\nts\n@Component({\n  selector: 'my-inbox',\n  template: `\n    {{ inboxMsgs.length | translatePlural:'INBOX_MESSAGES_PLURAL' }}\n    OR\n    {{ inboxMsgs.length | translatePlural:{ pluralRulesKey: 'INBOX_MESSAGES_PLURAL', otherParams: params } }}\n  `\n})\nexport class InboxComponent {\n  inboxMsgs = [];\n  params: { some: 'param' };\n}\n. ",
    "bisubus": "@ocombe Do we consider using A2 built-in i18n facilities for p11n?\nI'm successfully using translate pipe with NgPlural directive and augmented NgLocaleLocalization (see angular/angular#11921 for details) like:\n<div [ngPlural]=\"n\">\n  <template ngPluralCase=\"=0\">{{ 'N_PLURAL.0' | translate:{ amount: n } }}</template>\n  ...\n  <template ngPluralCase=\"=other\">{{ 'N_PLURAL.OTHER' | translate:{ amount: n } }}</template>\n</div>\nI presume that NgPlural and i18nPlural could be extended or forked to use NgLocalization with ng2-translate translation map and *_PLURAL.* convention seamlessly.\n. ",
    "engular": "@DethAriel \n'pure = false' is not needed, when you are using Observable's as return value, so you get here a better performance. I'm also not sure, to define the pluralization mappings directly in translation file, because it duplicated when you use more then one language!\nI think, that the solution of @cschroeter is really clean! Nevertheless, I've created an own pipe which returns an Observable and it is a little bit cleaner.\n+++ UPDATE +++\n@DethAriel\nYou are right, I forgot to consider the categories for each country! I've updated my solution.\nHere is my solution:\n``` javascript\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from 'ng2-translate';\nimport { Observable } from 'rxjs/Rx';\nimport { NgLocaleLocalization } from '@angular/common/src/localization';\nimport { I18nService } from './i18n.service'; // custom service\n/\n * Maps a numeric value to a pluralized translated object.\n \n * ## Usage\n \n * expression:number | pluralize:'PATH.TO.TRANSLATION.PLURAL.KEY' | async\n \n * ## Example\n \n * @NgModule({\n * imports: [\n *   TranslateModule.forRoot(I18nService.getTranslateLoaderConfig()),\n *   CommonModule,\n * ],\n * declarations: [\n *   I18nPluralizePipe,\n * ],\n * providers: [\n *   I18nService,\n *   TranslateService,\n * ],\n * exports: [\n *   I18nPluralizePipe,\n * ],\n * })\n \n\n * @implements {PipeTransform}\n */\n@Pipe({name: 'pluralize'})\nexport class I18nPluralizePipe implements PipeTransform {\n  // in my case: the locale will be set from outside\n  private localization = new NgLocaleLocalization(I18nService.getLocale());\nconstructor(private translate:TranslateService) {}\npublic transform(expression:number, pluralKey:string):Observable {\n    const category = this.localization.getPluralCategory(expression);\n    const key = pluralKey + '.' + category.toUpperCase();\n    return this.translate.get(key, {count: expression});\n  }\n}\n```\n. ",
    "llwt": "So is the current way to do this with ngx-translate to use the I18nPluralPipe?. ",
    "egel": "@gjuchault I agree with you, messageformat.js might be a good starting point of implementation. Here is some reference with using messageformat library for pluralization from angular-translate plugin (for AngularJS v1).. ",
    "lephyrus": "So I need this for a project that is gradually being migrated from ng1 to ng2+. We used the messageformat syntax with ng-translate and I want us to be able to use the exact same strings with ngx-translate, otherwise the hybrid phase gets really complicated.\nThis is the TranslateParser implementation I came up with:\n```js\nimport { Injectable, Injector } from '@angular/core';\nimport { LangChangeEvent, TranslateParser, TranslateService } from '@ngx-translate/core';\nimport * as _ from 'lodash';\nimport * as MessageFormat from 'messageformat';\nconst getMessageFormat = .memoize((lang: string) => {\n  const mf = new MessageFormat(lang);\n  mf.compile = .memoize(mf.compile);\nreturn mf;\n});\n@Injectable()\nexport class TranslateMessageFormatParser extends TranslateParser {\n  private currentLang: string;\nconstructor(private injector: Injector) {\n    super();\n// FIXME: Acrobatics to avoid a cyclic dependency follow.\n// A clean solution would require a change to TranslateService so\n// TranslateParser gets notified of language changes without having\n// to subscribe.\nsetTimeout(() => {\n  const translate: TranslateService = this.injector.get(TranslateService);\n  translate.onLangChange.subscribe((event: LangChangeEvent) => {\n    this.currentLang = event.lang;\n  });\n});\n\n}\npublic interpolate(expr: string, params?: any): string {\n    if (typeof expr !== 'string' || !params) {\n      return expr;\n    }\nreturn getMessageFormat(this.currentLang).compile(expr)(params);\n\n}\npublic getValue(target: any, key: string): string {\n    return target[key];\n  }\n}\nThis can be used as a drop-in replacement for the `TranslateDefaultParser`:js\nTranslateModule.forRoot({\n  parser: {\n    provide: TranslateParser,\n    useClass: TranslateMessageFormatParser\n  }\n})\n```\nThe following caveats prevent me from making this a pull request:\n- An implementation of interpolate() that uses messageformat needs to know about the currently selected language. This requires subscribing to TranslateService's onLangChange, but injecting TranslateService leads to a dependency cycle, which requires a hackish workaround.\n- I don't know if it's even possible to support \"composed\" translation keys with messageformat.\n- I use lodash's memoize() to provide caching, but I don't know if the maintainers feel comfortable with that dependency.. @chancezeus Nice! I didn't have a close look at the messageformat.js API when I came up with the solution above. This would be much cleaner.\nThe translations object is not in fact flattened with dot-separated keys - it's actually supposed to be a nested object. Luckily, messageformat.js' compile() works with nested object the way we want it to: If messages is a hierarchical structure of such strings, the output of compile() will match that structure, with each string replaced by its corresponding JavaScript function.. It looks to be very straight-forward to transform a nested object of ICU-formatted strings into a nested object of messageformat.js functions while loading translations for ngx-translate. \nAt this point, instead of string values, our translations object has functions as its values - otherwise, everything should work transparently for every part of ngx-translate (except the parser). The parser's getValue() method could work exactly as it does currently, and interpolate() would be very simple - just invoke the passed method with the passed params and return the result.\nThere's one problem I can see: Unfortunately, getValue() is expected to return a string, and interpolate() expects a string as its first argument. These will be functions though. It shouldn't be a problem at runtime, but maybe the maintainers would be open to relax the string requirement here?. I've given this some more thought and I have an idea for what I think is a clean implementation. No promises, but I hope to have a PR up this week.. https://github.com/ngx-translate/core/pull/553\nThanks @chancezeus for setting me on the right path with this. Also, the idea to actually contribute was helped by a conversation with @PascalPrecht at Jazoon.. @OzoTek No idea - it's just a PR of what I think is a decent solution. It may never get merged if the maintainers disagree. If there's still no reaction in a week, I might try to get some attention. For now we should be patient.. I'll leave this here for visibility:\nhttps://www.npmjs.com/package/ngx-translate-messageformat-compiler\nI'll try and prepare a PR to get this mentioned in the README, hopefully soon.. @ocombe  @SamVerschueren Not to appear impatient, but I have implemented what I consider to be a careful solution to an issue that was tagged with \"help wanted\". It's been 3 weeks without feedback - is there still interest in this at all?. @ocombe Thanks for the feedback (and for this library). I've anticipated your concern, which is why I've already outlined in the description above that yes, the TranslateMessageFormatCompiler can be pulled in from a separate package. The first two points (function interpolation, compile step) affect the core, however. Since I've structured the commits accordingly, could you tell me if you'd be willing to merge the first two commits? I could then go about hosting the extra package.. @ocombe Ok, great. I do think the compiler in combination with allowing interpolation functions (not just interpolation strings) has a lot of potential.\nI'll adapt the PR shortly.. @ocombe I have brought the PR up-to-date as per our discussion. I don't have the package for TranslateMessageFormatCompiler ready but I'm hoping you can add a link once it is and this has been released.\nNote that I find type guarantees to be somewhat murky around translations - firstly because translation objects are of the any type, and secondly because getValue() is used both to retrieve translation values as well as translation parameters. Since that's already the way it's documented in the README, I've changed the return type of getValue() to any. Improving type safety would need a more substantial refactoring, in my opinion.\nFinally, I wasn't quite sure where in the README to put the notes about the compiler. Feel free to change the documentation as you see fit.. @alexxxnf From my perspective, the code is ready. But I'm certainly not going to invest the time to set up a separate package for TranslateMessageFormatCompiler unless this is merged. I can't force the maintainers to be responsive, nor do they have to accept contributions. \ud83e\udd37\u200d\u2642\ufe0f . I guess what we can do is ping @ocombe - it's been a while, after all.. @ocombe Well, that was quick. Sorry to hear the holidays are over though... :wink: I'll be in touch once I have a link to the compiler package.. @imfarhadk I won't have time this weekend, but probably next. Let's say within two weeks from now. Knowing that some people want to use this helps, thanks.. I've published the package:\nhttps://www.npmjs.com/package/ngx-translate-messageformat-compiler\nIt's my first NPM package, so let me know if something's wrong. Also, publishing a few lines of code as an Angular library really is insanely more complicated than it should be.... Hey @njulhb, thanks for catching this and bringing it to my attention. Couple of points:\n I think the call to compileTranslations() should be in the onComplete() handler. Where you have it currently, the code assumes that this could still be another observable. So more like this:\nts\n                let onComplete = (res: string | Function) => {\n                    res = this.compiler.compileTranslations(res, this.currentLang);\n                    observer.next(res);\n                    observer.complete();\n                };\n You should use npm run commit to generate the commit message.\n* I am not a maintainer, so I can't merge your request (or my own).. My feedback to you was from one user of ngx-translate to another. I'm not the \"owner\" of anything, I just contributed a little bit of code in my free time. You should do the same and pursue this PR. You've already done the hard work: figuring out what's wrong.. I've had two additional reports of users running into this. Unfortunately it was an oversight when I implemented the compiler support into the core. I did not realize that the TranslateService::get() method does it's own parsing (and should do it's own compiling) if translation loading is pending at the time it's called.\nAny objections to merging this, @ocombe?. @bjorkblom I do not have write access and I'm not a maintainer of this project.\n@njulhb You should resolve the conflict and reduce the changes to a single commit. Then we can try to get attention again.. @ocombe By the way, you may want to close https://github.com/ngx-translate/core/issues/150, even though it's hard to say what the exact expectation was there. But unless supporting more pluralization options is planned, I guess this is as good a time to close as any.. @bjorkblom I think that there's possibly a time window (when async loading of the locale file has started but not been completed) where requesting a translation results in the uncompiled string. Can you check if the proposed fix in this PR solves your problem?\nhttps://github.com/ngx-translate/core/pull/659. @bjorkblom Thanks for verifying the fix.\nSorry, I have no idea why your translations end up like that. You should do some debugging to find out how that happens. I'd start by adding a breakpoint inside this method: https://github.com/ngx-translate/core/blob/b51544d72dd49eb2138922f17b8ba9d3094093d6/src/translate.parser.ts#L28\nIn any case, I don't think this is related to the original issue. If after some investigation you still feel like it's a bug in the library, you should open a new issue with more details.. Bit late, but here's my feedback: We have a fairly large app at work which was written in AngularJS. When we started the migration to Angular 2, internationalization turned out to be a big challenge. We were using angular-translate with JSON files, runtime language switching, in-code translations, and ICU syntax. To make the long (and ongoing) migration to Angular feasible, we need all of this to work seamlessly across our hybrid app, so Angular's official solution was a long way off the mark. The only thing missing from ngx-translate, on the other hand, was the ICU syntax. Talking to Pascal Precht at a conference last year, he encouraged me to contribute to this library to add that feature, which I have done. ngx-translate was and continues to be crucial for the development of our app. Thanks again, @ocombe.\nAbout the future:\n I'd prefer to be on the official track, but the upcoming changes will still not make that realistic.\n It looks to me like the long-term goal should be to make the official solution suit more scenarios, but ngx-translate will remain relevant for some time yet.\n I can't say that paying for a licence would come easy, but it's not out of the question. My feeling is that donations could work out better, but I'm not speaking from experience.\n As the maintainer of ngx-translate-messageformat-compiler, my biggest pain point would be the complicated handling of async translation loading. I love rxjs, but I have a hard time understanding the control flow for all of the edge cases (not that I've invested a ton of time, mind you). Users keep running into timing-related problems, in any case (https://github.com/lephyrus/ngx-translate-messageformat-compiler/issues/21, https://github.com/lephyrus/ngx-translate-messageformat-compiler/issues/20).\n* It's not like you owe anyone anything regarding this library - I'd say concentrate on what's interesting to you.. ",
    "chancezeus": "For a project I need proper support for pluralization, genders and other related translations. I made quite a lot of projects in angular1 but for the new project I wanted to go with angular2 (especially since it depends heavily on forms) and was looking for a translate solution compatible with Ionic and/or at least easier to implement then the standard angular2 i18n (single build instead of a build per language).\nLooking at the module it looks really nice (and familiar) but is (indeed) missing ICU support. I started browsing through the sources and the JSDocs for the MessageFormat js library and I think I have a good solution for everyone using/requiring messageFormat support for their projects.\nThe MessageFormat.prototype.compile function specifies 2 uses:\n1. Compile a single value to a js function\n2. Compile an object into an object of js functions and add a toString function to export the data\nExample from the docs:\nvar fs = require('fs');\nvar mf = new MessageFormat('en').setIntlSupport();\nvar msgSet = {\n  a: 'A {TYPE} example.',\n  b: 'This has {COUNT, plural, one{one member} other{# members}}.',\n  c: 'We have {P, number, percent} code coverage.'\n};\nvar cfStr = mf.compile(msgSet).toString('module.exports');\nfs.writeFileSync('messages.js', cfStr);\n...\nvar messages = require('./messages');\n```\nmessages.a({ TYPE: 'more complex' })\n// 'A more complex example.'\nmessages.b({ COUNT: 3 })\n```\nIf we take (a slightly modified version) of the first part of this code and convert that into a TranslateLoader which actually loads the data from json (and probably flatten the keys into . notation) and then feeds that to messageFormat.compile (which does accept a locale parameter so you can even use a global/class wide messageFormat instance instead of creating a new one).\nThe returned \"translations\" object will now have all the (flattened) keys as message format functions.\nThe third part of this code can then be put into a TranslateParser, getValue can return a /^key(?:\\.|$)/ object/array of matched keys or a translations[key] single value and interpolate just calls each/the returned function with the interpolate params.\nExtra option if somebody knows if this can be done:\nThe second part writes the code to disk (using a string), maybe this can be used to generate precompiled language files during AOT building. @lephyrus Nice for spotting/testing that the compile() will work with nested objects, that was unclear from the docs (to me) and hence I suggested flattening the object.. ",
    "santialbo": "Hi, this has been opened for almost a year. Is there a recommended approach worth mentioning on the README?. Can we get some feedback from the project matainers? This PR is addressing a major concern for many of the library users and no one has said anything in 2 weeks.. @lephyrus is there a way this could be pulled in a separate package somehow?. Did you find any workaround to this @lemoinem?. ",
    "OzoTek": "Hey @lephyrus, thanks for your PR, do you know when will it be merged? . Alright thanks :). ",
    "DavidDomB": "How do I use i18nPluralPipe with ngx-translate?\nI tried adding the code provided by @cschroeter but it shows the mapped key instead of the value in locale file. Do I need to add any other library or configuration?\nI want to use pluralization but I don't want to use the angular native implementation because in my opinion .xlf files maintenance could require a lot of effort.\nI'm new using Angular, any help will be apreciated. . ",
    "atiris": "My solution for plural pipe is, I think, more general (I apologize in advance, but it was not tested in detail). It is based on the format commonly used in angular. But no nested conditions can be applied. In translation file you can use variables as in ngx-translate core and then, with this pipe, select exact part of translated string according to variable. It supports variable comparison using '=' (for string or numbers), '<' and '>' (for numbers) and default value.\nYou can use it in html template after translate applied:\n{{ 'translate key' | translate:{variable:value} | translateSelector:variable }}\nFormat in json:\n\"translate key\": \"=[number | string] {text value if equal} >[number] {text if greather than number} [other | else] {default text}\nText from first condition match (from left) will be applied.\nExample. With translation defined in json:\n\"results\": \"=0 {No results} =1 {One result} >100 {Too many results} >1 {{{count}} results found}\"\nand in component html:\n{{ 'results' | translate:{count:cnt} | translateSelector:cnt }}\nIt show:\n- \"No results\" if cnt = 0\n- \"One result\" if cnt = 1\n- \"17 results found\" if cnt = 17\n- \"Too many result\" if cnt = 157\nExample with strings. Sample json:\n\"mf\": \"=m {male} =f {female} other {unknown}\"\nin component html (example with constant):\n{'mf' | translate | translateSelector:'m'}}\nIt show:\n- \"male\" (based on constant value)\nPipe code\n``` javascript\nimport { Pipe, PipeTransform } from '@angular/core';\n/\n * Usage in translation json files:\n * - en.json (key: value):\n * \"found results\": \"=0 {No results} =1 {One result} >1 {{{count}} results found}\",\n * - sk.json (key: value):\n * \"found results\": \"=0 {\u017diadne v\u00fdsledky} =1 {Jeden v\u00fdsledok} <5 {{{count}} v\u00fdsledky} other {{{count}} n\u00e1jden\u00fdch z\u00e1znamov}\"\n \n * Usage in component:\n * {{'found results' | translate:{count: cnt} | translateSelector:cnt}}\n \n * Results:\n * If cnt = 0: No results (en) \u017diadne v\u00fdsledky (sk)\n * If cnt = 7: 7 results found (en) 7 n\u00e1jden\u00fdch z\u00e1znamov (sk)\n */\n@Pipe({\n  name: 'translateSelector'\n})\nexport class TranslateSelectorPipe implements PipeTransform {\ntransform(text: string, value: string | number): string {\n    const match = text.match(/(([=<>][^}]+|other|else) ?{([^}]+))}/g);\n    if (match) {\n      const ret = match.map(\n        m => m.match(/([=<>oe]) ?([^{]+) ?{([^}]+)}/)\n      ).find(\n        f => this.evalCondition(value, f[1], f[2].trim())\n        );\n      if (ret) { return ret[3]; }\n    }\n    return text;\n  }\nprivate evalCondition(\n    left: number | string,\n    operator: string,\n    right: string): boolean {\nif (['o', 'e'].includes(operator)) { return true; }\n\nconst strings = typeof left === 'string';\nleft = left.toString();\nconst leftNumber: number = Number.parseInt(left);\nconst rightNumber = Number.parseInt(right);\n\nif (strings && ['<', '>'].includes(operator)) {\n  return false;\n} else if (!strings && (Number.isNaN(leftNumber) || Number.isNaN(rightNumber))) {\n  return false;\n}\nswitch (operator) {\n  case '=': return strings ? left === right : leftNumber === rightNumber;\n  case '<': return leftNumber < rightNumber;\n  case '>': return leftNumber > rightNumber;\n}\nreturn false;\n\n}\n}\n```\nI suppose it is not written optimally, please improve it if you know how.\nImport it into your (shared) module and use in module component like in example on top.\njavascript\nimport { TranslateSelectorPipe } from './your-pipes/this-pipe-name.pipe';\n...\ndeclarations: [TranslateSelectorPipe],\n...\nexports: [TranslateSelectorPipe]   // if in shared module\n. ",
    "eddhannay": "I missed this in the last Readme update, sorry for the multiple PRs!\n. Yeah, it was changed in https://github.com/driftyco/ionic/blob/2.0/CHANGELOG.md#steps-to-upgrade-to-beta-8. Also the config property has moved (as per that upgrade guide), so I'll move that out too   - it's unused in the example code anyway!\n. ",
    "doudbanks": "Thanks but I can't use the last version cause i'm using angular 2 RC1 :). How can I define my own without http ?\nDo you speak french ?\n. Super merci beaucoup je vais essayer de me d\u00e9brouiller avec \u00e7a.\n. Salut Olivier,\nAlors j'ai pris la derni\u00e8re version du module. Selon toi, est-ce que je peux \u00e9crire un customLoader tout simple sans utiliser http pour aller chercher mes traductions ? Je ne sais pas trop comment m'y prendre sans utiliser HTTP (c'est une contrainte technique du projet sur lequel je travaille).\nMerci beaucoup.\n. D'accord,\n Je ne suis plus oblig\u00e9 de red\u00e9finir tout \u00e7a ?\nbootstrap(AppComponent, [\n    provide(TranslateLoader, {\n        useFactory: () => new CustomLoader('assets/i18n', '.json')\n    }),\n    provide(TranslateService, {\n        useFactory: (loader: TranslateLoader, http: FakeHttp) => new TranslateService(http, loader),\n        deps: [TranslateLoader, FakeHttp]\n    })\n]);\nJ'ai du mal a comprendre la marche a suivre car lorsque dans mon composant principal je d\u00e9clare le TranslateService j'ai imm\u00e9diatement des erreurs XHR pourtant je n'ai pas pr\u00e9cis\u00e9 que je voulais utiliser HTTP.\nC,est d\u00fb au constructeur ?\nexport declare class TranslateStaticLoader implements TranslateLoader {\n    private http;\n    private prefix;\n    private suffix;\n    constructor(http: Http, prefix?: string, suffix?: string);\n    /*\n     * Gets the translations from the server\n     * @param lang\n     * @returns {any}\n     /\n    getTranslation(lang: string): Observable;\n}\n. Alors j'importe ng2-translate/ng2-translate, jusque la tout va bien, et d\u00e8s que je d\u00e9clare mon TranslateService dans mes providers j'ai cette erreur \n`\nGET http://localhost:4200/node_modules/ng2-translate/ng2-translate.js 404 (Not Found)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:336Zone.scheduleMacroTask @ zone.js:273(anonymous function) @ zone.js:122send @ VM9453:1fetchTextFromURL @ system.src.js:1154(anonymous function) @ system.src.js:1735ZoneAwarePromise @ zone.js:584(anonymous function) @ system.src.js:1734leadingCommentAndMetaRegEx @ system.src.js:2759load.metadata.deps @ system.src.js:3333loader @ system.src.js:3600loader @ system.src.js:3985loader @ system.src.js:4448hookConstructor.meta @ system.src.js:4700(anonymous function) @ system.src.js:406ZoneDelegate.invoke @ zone.js:323Zone.run @ zone.js:216(anonymous function) @ zone.js:571ZoneDelegate.invokeTask @ zone.js:356Zone.runTask @ zone.js:256drainMicroTaskQueue @ zone.js:474ZoneTask.invoke @ zone.js:426\nzone.js:461 Unhandled Promise rejection: Error: XHR error (404 Not Found) loading http://localhost:4200/node_modules/ng2-translate/ng2-translate.js\n        at XMLHttpRequest.desc.set.wrapFn as _onreadystatechange\n        at ZoneDelegate.invokeTask (http://localhost:4200/vendor/zone.js/dist/zone.js:356:38)\n        at Zone.runTask (http://localhost:4200/vendor/zone.js/dist/zone.js:256:48)\n        at XMLHttpRequest.ZoneTask.invoke (http://localhost:4200/vendor/zone.js/dist/zone.js:423:34)\n    Error loading http://localhost:4200/node_modules/ng2-translate/ng2-translate.js as \"ng2-translate/ng2-translate\" from http://localhost:4200/app/guichet-app.component.js ; Zone:  ; Task: Promise.then ; Value: Error: Error: XHR error (404 Not Found) loading http://localhost:4200/node_modules/ng2-translate/ng2-translate.js\n        at XMLHttpRequest.desc.set.wrapFn as _onreadystatechange\n        at ZoneDelegate.invokeTask (http://localhost:4200/vendor/zone.js/dist/zone.js:356:38)\n        at Zone.runTask (http://localhost:4200/vendor/zone.js/dist/zone.js:256:48)\n        at XMLHttpRequest.ZoneTask.invoke (http://localhost:4200/vendor/zone.js/dist/zone.js:423:34)\n    Error loading http://localhost:4200/node_modules/ng2-translate/ng2-translate.js as \"ng2-translate/ng2-translate\" from http://localhost:4200/app/guichet-app.component.js\n`\n. Super j'ai corrig\u00e9 tout \u00e7a je n'avais pas configur\u00e9 correctement mon system-config et angular-cli-build. Je te remercie.\n. Donc maintenant je dois cr\u00e9er un custom loader ?\n. Ok super merci beaucoup, le soucis c'est que c\u00f4t\u00e9 client je ne peux pas communiquer avec le filesystem.\n. D\u00e9sol\u00e9, \u00e7a te para\u00eet faisable ?\n. Charger mes fichiers sans passer c\u00f4t\u00e9 server\n. Arf' d'accord. J'\u00e9tais tomb\u00e9 sur cet exemple sur un site:\n`initializeTranslateServiceConfig() {\n    var prefix = 'assets/i18n/';\n    var suffix = '.json';\n    this.translate.useStaticFilesLoader(prefix, suffix);\n```\nvar userLang = navigator.language.split('-')[0];\nuserLang = /(de|en|hr)/gi.test(userLang) ? userLang : 'en';\nthis.translate.setDefaultLang('en');\nthis.translate.use(userLang);\n```\n}`\nJe suppose que le staticFilesLoader utilise http ?\n. Ok thanks.\n. Thanks a lot it's what I needed.. ",
    "spinundemi": "I don't see an easy way to do that, to make sure changelang is synchronized across all components. in Angular 1, I used to do something like\n$translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'I18N/{part}-{lang}.json'\n        });\nand the translation is done automaticaly!\n. ",
    "ericgrover": "I am using v 8.0.0 and am getting the Converting circular structure to JSON error when I run the app using HTTPS.  If I run it as HTTP it works fine, but I get the error when I enable SSL.. I get the error when it is requesting the https://localhost:44395/assets/i18n/en.json file.. ",
    "yaroslavya": "Can you just write your own loader and just return the data you use to set the translation there?\nAnd then just bootstrap it instead of the static loader. Or if in your case theres a need to just get rid of the static loader just perform the bootstrap with some stub implementation of the TranslateLoader.\nNot an expert in ng2-translate, just using it and it seems one of these ways should work :8ball: \n. ",
    "ross-nordstrom": "I use this pattern a lot in the Angular 1 project I'm porting to Angular 2. It's really useful for gracefully defaulting values.\nFor example if you want to support specific translations, but fallback to a general string\n``` js\n// field = 'name',  collection = 'animals'\nlet generalFieldTitle = new TranslatePipe()\n  .transform(fields.${field});\n//=> 'Name'\nlet specificFieldTitle = new TranslatePipe()\n  .transform(${collection}.fields.${field}, {default: generalFieldTitle});\n//=> 'Animal Name', but it would be 'Name' if collection was 'foobars'\n```\nwith translations like\njs\nen = {\n  fields: {\n    name: 'Name'\n  },\n  animals: {\n    // This may or may not exist\n    name: 'Animal Name'\n  }\n}\n. ",
    "Jensiator": "Often you have an error response from the server. Typical Error{Code:111,Message:'yikes'}\nIn that case: {{ ('example.translation.key' | translate) || 'Example Text' }}  would look something like:\n{{ ('errorsCodes.'+error.Code | translate) || {{error.Message}} }}. Its a fallback to the default Server message. But it does not parse. \nI solved it by: \nhtml:\n {{getTrans(theError)}}\ncomponent method: \n public getTrans(error) {\n        let key = 'errors.' + error.ErrorCode;\n        let translated = this.trans.instant(key);\n        if (translated == key) {\n            return error.Message;\n        } else {\n            return translated;\n        }\n    }\n. Hi, what about some basic names? Ex: \n{\n  \"general:{\n     \"CANCEL\":\"Cancel\"\n      .....\n   }\n}\nand for a view\n\"myView\":{\n   \"TITLE\": \"My view title\",\n   \"CANCEL\":\"@general.CANCEL\"\n  }\nor is it better to just refer to them separately?. I made it work will help from matkarlg. Just add the translate.use in the lazy loaded module's constructor. BUT I rolled it back. Because I could see some problems with sharing translations between the modules. With the isolated;false. the lazy loaded module will get the 'top' translation. So far so good. But how will it work the other way around.  If a module has not yet been loaded (lazy), will it's translations be loaded?  Probably not. So some of the translation will need to stay in the 'top' files. Because they are so general. And they might be needed in achors/menus that navigates to the lazy loaded module. So if you have a module called ex. Fruits, You would end up with a part of the translations in the top translation file and a part of it in the FruitsModule json file. ex en.json and fruits-en.json. I prefer to have all the 'fruits' translation in one place. So I keep all translations i one big file until a better approach comes my way. Nice idea with the prefix. That should work!!\nOn Sat, Sep 2, 2017 at 10:03 AM, Mathias Karlgren notifications@github.com\nwrote:\n\n@Jensiator https://github.com/jensiator The other way I guess is to\nduplicate the translations.\nI ended up like you said, with some translations in the AppModule - We\nprefixed them with \"common\".\nThe translations with the \"common\"-prefix were not part of the\n\"FruitsModule\", but at least they were easy to find. Working with the\ntranslations feels the same as the css, always a few globals.\nTo create a big file. A script could concatenate the translation files.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/602#issuecomment-326729518,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQ5pq2Mf2pEWZYsxVM7-zNKakbJhBNqUks5seQvpgaJpZM4OXbv1\n.\n. \n",
    "Sergejack": "Can somebody provide an example how to achieve this?. ",
    "Dunos": "@pfrendo @ocombe does this mean that if I have a lazy loaded module with its own translation files (one for each language), I have to load those .json manually and then use the setTranslation with that flag? In that case, should I have to manually load the specific .json file every time the user changes the language in the app? \nMaybe I'm missing something here or just mixing things on my head.... @ocombe are you planning to fix/support this any time soon?. ",
    "tuoitrexuquang": "It's work now. Thanks,\n. ",
    "twicejr": "Does not work anymore in 2.4? Or in Rc5 of AngularJs2.\n. Thanks for your reply ocombe, I am using Ionic v2 (thus in combination with AngularJs2).\nThe application is my first Angular / Ionic application, so it's probably my noobishness... and this application does not have any 'Module'\nWith Angular RC4 the following worked to have the TranslatePipe available in any Page:\n`\n```\nimport {TranslateService, TranslatePipe, TRANSLATE_PROVIDERS} from 'ng2-translate/ng2-translate';\nionicBootstrap(MyApp, [TRANSLATE_PROVIDERS,\n{\n    provide: PLATFORM_PIPES,\n    useValue: TranslatePipe,\n    multi: true\n}], {\n    tabsPlacement: \"bottom\"\n});\n```\n`\n. Thanks man. I guess I should have a little patience before upgrading to the bleeding edge..\nI thought, well because I'm just starting at it, better have the latest version of all those beta/rc parts.\n. ",
    "stephengeorgewest": "I got this too. The 'import' statement seemed to be enough. \napp.module.ts (for access in all comonents):\n```\nimport { TranslateModule, TranslatePipe } from 'ng2-translate/ng2-translate';\n@NgModule({\n    imports: [\n        // Modules\n        BrowserModule,\n        FormsModule,\n        routing,\n        HttpModule,\n        TranslateModule.forRoot()],\n...\n```\nor in just the one component.ts that needs it.\nimport { TranslateService, TranslatePipe } from \"ng2-translate/ng2-translate\";\nPutting in both places is not necessary.\n. Putting this here because it took me way too long to find this, and perhaps google will index this and lead other here faster. Here was the error that I saw from this issue. It was fixed by updating to 2.4.3\nERROR in main.js from UglifyJs\nSyntaxError: Unexpected token: keyword (function) [./~/@angular/core/src/facade/lang.js:22,0]\n. Created a pull request. #356 . ",
    "Raph246": "I am using RC5 and also getting this error when trying to use in a specific component other than app.component (The pipe 'translate' could not be found). How exactly can I solve this problem? You mentionned using ng modules.\n. ",
    "hypery2k": "getting this error also\n. ",
    "tabareh": "I'm getting this error in Angular 2 final release!\n. Mine is solved by importing it to the other module that I was using in my app. So this might also be your case where you have more than one module in your app and this should be imported in all of them. The other way is to go with SharedModule solution\n. Guys as I said I didn't use SharedModule, and I just imported it in the new module, like mentioned in the readme page, and that solved the my issue. I believe the instructions for SharedModule on readme page should be valid as well.\n. ",
    "sangecz": "yes, me too on angular 2 final\n. i'm using SharedModule, so where exactly should I import TranslateService/TranslatePipe ? thx\n. @grapemix, @thorsten, @tabareh: I solved the issue by reading readme two times again :)\nAs I'm using SharedModule, which is imported in every other module, I had to import TranslateModule in SharedModule, and also export TranslateModule in SharedModule, the later one was the cause of my problems.\n. @amirduran make sure that you are using missing trans. handler in right module. ",
    "grapemix": "+1. Please clarify. I am using angular2 rc5/ioinc2 rc0\n. sorry to reply so late. I resolved the issue a while ago, but I forget to post the ans back to here because there had so many problems in different plugins and lib and I tried to release our app before the deadline. There had so many problems, but most of them were resolved in ionic2 rc1. ng2-translate is really a small one. Ty @sangecz  @vicknguyen1992 \n. ",
    "thorsten": "Same issue on Angular 2.0.0 final, too.\n. Any note when you'll update the docs? My app is running, but my tests are not due to \"The pipe 'translate' could not be found\"\n. Yes, you are right. Good hint. @ocombe, should I add another PR with this improvement?\n. Yes, sure! Will update the documentation asap.\n. ack\n. ack\n. You're right, it would be more consistent.\n. ",
    "vicknguyen1992": "I solved this issue. Following by this post: https://github.com/ocombe/ng2-translate/issues/209\nNote: The SharedModule should not call TranslateModule.forRoot because this should happen at the AppModule level (at the root).\n. ",
    "namhq1989": "I'm using Angular 2.4.1 and ng2-translate 5.0.0, and after config exactly as README, I still met this error. It can only use in 1 page.\n@ocombe  noted with this:\n\n{provide: PLATFORM_PIPES, useValue: TranslatePipe, multi: true}\n\nbut PLATFORM_PIPES was deprecated in newest angular 2 version, so can someone help me fix this?\nThanks!. @SamVerschueren thanks for noticed, i created SharedModule and imported in every module.\nshared.module.ts\n```\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// Translate\nimport { TranslateModule } from 'ng2-translate';\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule\n  ],\n  exports: [\n    CommonModule,\n    TranslateModule\n  ]\n})\nexport class SharedModule {}\n```\napp.module.ts\n@NgModule({\n  bootstrap: [App],\n  declarations: [\n    ...\n  ],\n  imports: [ // import Angular's modules\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    RouterModule.forRoot(ROUTES, { useHash: true }),\n    TranslateModule.forRoot()\n  ],\n  ...\nIn dashboard.module.ts\n```\nimport { SharedModule }  from '...';\n...\n@NgModule({\n  imports: [ SharedModule, RouterModule.forChild(routes) ],\n  declarations: [ Dashboard, Widget ]\n})\n```\nAnd in html\n<div>{{ 'HELLO' | translate }}</div>\nTranslateService already init in app.component, and i18n folder created.\nThis code run without errors, but it does not show anything on page, I checked DOM and there is an empty div <div></div>. So i guess there's a mistake somewhere I do not know.\nWhat should I do to fix this prolem?\nThanks!. I tried again by import ng2-translate directly in my dashboard module, and everything worked as expected.\nThen I tried with SharedModule and here is my final code:\nshared.module\n```\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// Translate\nimport { TranslateModule } from 'ng2-translate';\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule\n  ],\n  exports: [\n    CommonModule,\n    TranslateModule\n  ]\n})\nexport class SharedModule {}\n```\napp.module\n// Shared module\nimport { SharedModule } from './shared/shared.module';\n// Translate\nimport { TranslateModule } from 'ng2-translate';\n....\n@NgModule({\n  bootstrap: [App],\n  declarations: [\n    ....\n  ],\n  imports: [ // import Angular's modules\n    ....\n    SharedModule,\n    TranslateModule.forRoot()\n  ]\n....\napp.component\n```\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { TranslateService } from 'ng2-translate';\n@Component({\n  selector: 'app',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [\n    './scss/application.scss'\n  ],\n  template: <router-outlet></router-outlet>\n})\nexport class App {\n  constructor(\n    private translateService: TranslateService) {\n}\nngOnInit() {\n    // Configure the TranslateService\n    this.translateService.setDefaultLang('en');\n    this.translateService.use('en');\n  }\n}\n```\ndashboard.module\n```\nimport { SharedModule }  from '../shared/shared.module';\n...\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [Dashboard, Widget]\n})\nexport class DashboardModule {\n  static routes = routes;\n}\n```\ndashboard.template.html\n<div>{{ 'HELLO' | translate }}</div>\nwebpack\nnew CopyWebpackPlugin([{\n  from: 'src/assets',\n  to: 'assets'\n}, {\n  from: 'src/i18n',\n  to: 'i18n'\n}])\nI also checked Network tab and there is no en.json file (it loaded when import directly in dashboard module). So I'm very confuse with this. Can you guys update readme again?\nThanks!. ",
    "TeodorKolev": "Still not working. Not working!. I am using this plugin, and when I add 'Something' | translate in template of plugin not working. Please see my updated comment. Supplied parameters did not match any signatures  of call target. \nprovide, useFactory and deps are undefined\n. It throw me error. provide is not defined. I use this repo: https://github.com/AngularClass/angular2-webpack-starter. Sorry I have missed { }. Not working!. I am using this plugin, and when I add 'Something' | translate in template of plugin not working. Nope, because I don't want in my database selected properties in all languages.\n. Because if it is translate to Chinese I will get some Chinese record as return. I do not want to do that. To get word \"Car\" in Chinese.. But when selected I got for example: \"TYPES.CAR\", I want to get from return not TYPES.CAR but this translated in Enlish, which is \"Car\".. ",
    "bleuscyther": "@TeodorKolev \n you have to import it in all the sub-Modules Where you use it: \nJavascript\n@NgModule({\n  declarations: [\n    NetworkStatusComponent,\n  ],\n  imports: [\n    IonicPageModule.forChild(NetworkStatusComponent), TranslateModule\n  ],\n  exports: [\n    NetworkStatusComponent\n  ]\n})\nexport class NetworkStatusComponentModule {}\n. ionic/angular \nFor anyone that may find this helpful : sometimes  you have to kill the ionic process and run it again. Happens on ionic serve if you install some new package. ",
    "bungbung2": "@namhq1989 \nThank you for your guide. ",
    "noyessie": "You need to import TranslateModule in whatever module you need it.. ",
    "saravanakumargn": "Downgrading to:\n\"@ngx-translate/core\": \"^9.1.1\",\n\"@ngx-translate/http-loader\": \"^2.0.1\",\nand import into TranslateModule into all submodules\nimport { TranslateModule } from \"@ngx-translate/core\";\nimports: [\n    ComponentsModule,\n    CustomComponentsModule,\n    TranslateModule,\n    ...\n]\nThis is working perfectly. Thanks.. Downgrading to:\n\"@ngx-translate/core\": \"^9.1.1\",\n\"@ngx-translate/http-loader\": \"^2.0.1\",\nand import into TranslateModule into submodule\nimport { TranslateModule } from \"@ngx-translate/core\";\nimports: [\n    ComponentsModule,\n    CustomComponentsModule,\n    TranslateModule,\n    ...\n]\nThis is working perfectly. Thanks.. ",
    "hakonamatata": "Found the problem:\nIt should be:\n<script src=\"vendor/ng2-translate/bundles/ng2-translate.js\"></script>\nNot:\n<script src=\"vendor/ng2-translate/ng2-translate.js\"></script>\nMy bad, can close this issue. \n. ",
    "jimmybillings": "I've managed to hack a fix, it's not great but it works. This is the constructor in my service that wraps the Translate service. \nI check to see if I have the language json file already in cache for the language I'm about to select. If I don't have it I use the 'reloadLang' method in ng2-translate to go and get it. Once I have it I use an empty timeout and then call 'translate.use'. There's a timing issue somewhere because If I take out the timeout it doesn't work. \nIf I already have the translation file I'm about to switch to I just use translate.use as normal and all works fine. \nI'm not totally sure what's going on here but it seems to be a mix between using ChangeDetectionStrategy.OnPush and a fresh response from requesting the translation file. \nts\nconstructor(private translate: TranslateService, public store: Store<any>) {\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n    // subscribe to changes\n    store.select('i18n').subscribe((state: MultilingualStateI) => {\n      // update ng2-translate which will cause translations to occur wherever the TranslatePipe is used in the view\n      if (this.translate.getLangs() && (this.translate.getLangs().indexOf(state.lang) > -1)) {\n        this.translate.use(state.lang)\n      } else {\n        this.translate.reloadLang(state.lang).take(1).subscribe(() => {\n          setTimeout(() => this.translate.use(state.lang), 0);\n        });\n      }\n    });\n  }\n. ",
    "SellvakumarSS": "Am also facing the issue.\nPlz update.\n. ",
    "estradamarkie": "Tried lots of things to try to fix  this thing and its either giving me 404 or annotation of undefined error.\n. Yeah I've updated my systemconfig.js, I'm using the standard system.config.js from angular installation guide I've added 'ng2-translate' : 'node_modules/ng2-translate' in the map section. I've also tried copying the systemconfig from the link you've provided and as I mention its either giving me a 404 or annotation of undefined error.\n\n`var map = {\n\n```\n'app':                        'app', // 'dist',\n'@angular':                   'node_modules/@angular',\n'angular2-in-memory-web-api': 'node_modules/angular2-in-memory-web-api',\n'ng2-translate': 'node_modules/ng2-translate',\n'rxjs':                       'node_modules/rxjs'\n```\n};\n  `\n\n`// packages tells the System loader how to load when no filename and/or no extension\n  var packages = {\n\n```\n// 'ng2-translate':              { main: 'ng2-translate.js', defaultExtension: 'js' },\n'ng2-translate': 'node_modules/ng2-translate',\n'app':                        { main: 'main.js',  defaultExtension: 'js' },\n'rxjs':                       { defaultExtension: 'js' },\n'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },\n```\n};`\n. Yeah I'm getting http://localhost:3000/node_modules/ng2-translate/ng2-translate 404 (Not Found). Also made stackoverflow question regarding this issue and no luck fixing it http://stackoverflow.com/questions/38304242/ng2-translate-404-not-found-ive-added-it-in-system-js\n. So everyone who is using systemjs will have the same problem? Well even the step \"systemjs\" in your readme doesn't work and that systemconfig was pretty straightforward.\nAnnotation of undefined error when definingExtension js \nCannot read property 'annotations' of undefined\n. @mpavel \nHi, Yeah that's similar to my systemconf but still giving me an error.\n. ",
    "mpavel": "I encountered the same issue today. I'm using the systemjs.config.js file from angular.io website. \nI had to do the following in this file:\n```\nvar map = {\n    ...\n    'ng2-translate':              'node_modules/ng2-translate'\n  };\nvar packages = {\n    ...\n    'ng2-translate':              { defaultExtension: 'js' },\n  };\n// further down in the same file, they are being used like this\n...\n  var config = {\n    map: map,\n    packages: packages\n  };\n  System.config(config);\n...\n```\n. ",
    "razvanmitre": "Isn't ng2-translate in the dist/vendor folder? \n. ",
    "gsiradze": "faced to same issue? any idea how to fix it?\n. put 'ng2-translate': 'node_modules/ng2-translate/bundles' in system.config.js in the map and 'ng2-translate' : { defaultExtension: 'js' } in packages\nworking example of system.config.js\n. ",
    "3du4": "worked for me as @Giola94 explained. \n. @ocombe This error started showing up after updating to 3.1.3.\nI refered to this plnkr  but the result is the same.  in Systemjs is this the correct way of mapping the library?\n'ng2-translate': 'npm:ng2-translate',\n. I found the issue and it is happening only with this library.\nthe browser is trying to look for ng2-translate.js under bundles directory and it is not there.\nSorry for asking but what would be the correct settings for transpiling the ng2-translate.d.ts file?\nIs there something that is needed to be done in tsconfig.json file?\n. @ocombe sorry for the delay.\nIf I map as below, the following error is thrown from traceur.\n'ng2-translate': 'node_modules/ng2-translate' OR 'ng2-translate': 'npm:ng2-translate'\nerror message: Error loading http://172.16.128.230/node_modules/ng2-translate/ng2-translate.js as \"ng2-translate/ng2-translate\"\nIf I map as below, the following error is thrown\n'ng2-translate': 'node_modules/ng2-translate/ng2-translate',\nerror message: GET node_modules/ng2-translate/ng2-translate/ng2-translate.js 404 (Not Found)\nthe above one is clearly the wrong path.\nNow if I go to my browser and look for ng2-translate.js to path where is mapped I also I get \"Cannot GET /node_modules/ng2-translate/bundles/ng2-translate.js\" from my browser.\nIf I do the same thing with other libraries I can access the JS file. Any ideas of how I could solve this? :( \nI will look at @SamVerschueren approach and see if it works. \n. In my systemjs I ended mapping as below:\n'ng2-translate': 'npm:ng2-translate'\nthen in my components where I import the TranslateService and the TranslateModule I imported as below:\nimport { TranslateModule } from 'ng2-translate/bundles/index';\nimport { TranslateService } from 'ng2-translate/bundles/index';\nAs in my first comment, this problem started when I upgraded to 3.1.3. When I was using 3.1.2\nI was importing as below\nimport { TranslateModule } from 'ng2-translate/ng2-translate';\nimport { TranslateService } from 'ng2-translate/ng2-translate';\nand my systemjs looked like this\n'ng2-translate': 'npm:ng2-translate/bundles'\nI know this is a temporal workaround, @ocombe I would appreciate if you let us know if you decide switching back to commonjs.\n. @SamVerschueren, thank you for explaining. I mapped as you mentioned here fixed my issue. \n. ",
    "jeebb": "I have to map 'ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.umd.js' for it to work.. ",
    "AnnekathrinL": "hi. \ni have the same error. i adjusted everything you have recommended here . \ni have tried to set the mapping to \n- node_modules/ng2-translate\n- node_modules/ng2-translate/bundles\n- node_modules/ng2-translate/bundles/ng2-translate.umd.js\nnone of them worked.\ni still get a 404 \"Cannot GET /ng2-translate\". I wonder, why angular is looking for it in the root-directory and not in the node_modules. \ndo i need to adjust my package.json ? or anything else? \nany help would be appreciated.. thank you for your fast help. \ni had an error in including the correct systemjs as i was working on a test-project. sorry and thank you again.. @roddydairion it is pretty embarrassing to say that i simply included the wrong systemjs in my index.html as i was working on a test-project. :). ",
    "roddydairion": "Do you mind sharing how you fixed it please? I'm facing the same issue and can't figure out what I'm doing wrong.\nThank you.. @SamVerschueren \njs\n(function(global) {\n  // map tells the System loader where to look for things\n  var map = {\n    'app':                        'app', // 'dist',\n    '@angular':                   'node_modules/@angular',\n    'angular2-in-memory-web-api': 'node_modules/angular2-in-memory-web-api',\n    'rxjs':                       'node_modules/rxjs',\n    'underscore':                 'node_modules/underscore/underscore.js',\n    'ng2-translate':              'node_modules/ng2-translate/bundles'\n  };\n  // packages tells the System loader how to load when no filename and/or no extension\n  var packages = {\n    'app':                        { main: 'main.js',  defaultExtension: 'js' },\n    'rxjs':                       { defaultExtension: 'js' },\n    'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },\n    'ng2-translate':              { defaultExtension: 'js' }\n  };\n  var ngPackageNames = [\n    'common',\n    'compiler',\n    'core',\n    'forms',\n    'http',\n    'platform-browser',\n    'platform-browser-dynamic',\n    'router',\n    'router-deprecated',\n    'upgrade',\n  ];\n  // Individual files (~300 requests):\n  function packIndex(pkgName) {\n    packages['@angular/'+pkgName] = { main: 'index.js', defaultExtension: 'js' };\n  }\n  // Bundled (~40 requests):\n  function packUmd(pkgName) {\n    packages['@angular/'+pkgName] = { main: '/bundles/' + pkgName + '.umd.js', defaultExtension: 'js' };\n  }\n  // Most environments should use UMD; some (Karma) need the individual index files\n  var setPackageConfig = System.packageWithIndex ? packIndex : packUmd;\n  // Add package entries for angular packages\n  ngPackageNames.forEach(setPackageConfig);\n  var config = {\n    map: map,\n    packages: packages\n  };\n  System.config(config);\n})(this);\nI've followed exactly the instruction but it fails no matter what I do.. @SamVerschueren \nYou, my friend, are a gem. Thank you very much.. ",
    "rglaspey": "I agree this would be useful. We have different scenario where we want to generate some translations and manually create some others. I guess we could write something to generate a final file based of our mutliple files... Any one have any existing solutions already?\n. ",
    "Inoverse": "Yep, would be nice. Like the PartialLoader in angular-translate.\n. ",
    "seandsky": "from which version? I think your can ref fuel-ui-cli-quickstart\n. ",
    "maciejzasada": "+1\nGenerated a blank project using angular-cli, got the same error after integrating ng2-translate.\n. Ok, for me it was something else. I only added bundles/ng2-translate to vendor. When I added the whole ng2-translate package, everything is working fine. Ignore my comment above then. No issue with a fresh project created using angular-cli and Angular 2 RC4.\n. ",
    "geoHeil": "I get npm ERR! peerinvalid Peer ng2-translate@2.2.2 wants @angular/core@^2.0.0-rc.3\n. Indeed I am using 2.15.8. but I thought that npm3 was still in beta.\n. ",
    "red-0ne": "This should be possible by using a custom TranslateLoader\n. ",
    "ghost": "@ocombe \nThanks for fast reply.\nThats bad, will need to implement temporary workaround.\nWhat about pluralisation? I assume that it ins't implemented too ? :(\ntotal-count: '{total, plural, one{\u0434\u0438\u0437\u0430\u0439\u043d} few{\u0434\u0438\u0437\u0430\u0439\u043d\u0430} many{\u0434\u0438\u0437\u0430\u0439\u043d\u043e\u0432} other{\u0434\u0438\u0437\u0430\u0439\u043d\u043e\u0432}}'\n. I have same problem, should I upgrade to typescript 2.x or downgrade ng2-translate ?\n. client side.\nProblem resolved by CustomTranslateLoader sample.\nTnx\n. ",
    "h3xed": "getLangs method return currently loaded languages. I think that 'en' language isn't correctly loaded. Look up to browser network for xhr request with language json.\nFew days ago i made pull request with setter and getter with available languages list - https://github.com/ocombe/ng2-translate/pull/173\n. ",
    "cortopy": "I've investigated a bit further and I've found what it was. Basically, the ng2-translate service is not available until quite late in the component's lifecycle. I've tried logging with all the hooks and to my surprise the translate service was not available until ngAfterContentChecked. At that moment I get a lot of logging (I guess because Angular 2 does double checking in dev mode).\nTo make matters even more complicated, I can't replicate exactly when the service is available. ngAfterContentChecked doesn't always work. ngAfterViewChecked seems more reliable but that will be running code many times.\nI'm using the translate service as a singleton, and I suppose that's the reason why it's not available earlier on. Is there not a better way of having the translation service as a global singleton and available at init?\n. GOT IT! The solution is an observer pattern. I'm now subscribing to onLangChange and that gives me the time to have my flow within onNgInit.\nI was wondering if info about available languages, default, etc. could be made an observable too\n. ",
    "stevehealy": "For what it's worth, I had the same problem until I added \"private\"...\nconstructor(private translate: TranslateService) {\n...\n}. ",
    "jedmundo": "Hey,\nWas also curious to know a possible solution for this.\n. ",
    "istiti": "@ocombe  what is this new method, can you do plnkr to demonstrate please\n. hm \n. @Ocombe merge it with official one\nCc @meeroslav. ",
    "fulls1z3": "Also check @nglibs/i18n-router, supports lazy routes as well.. Hi @ocombe, @SamVerschueren; I also noticed the same issue @deeg described. When use method is called before setDefaultLang method finishes fetching translations from JSON, then ngx-translate doubles the translation retrieval requests.\nI know it's maybe not among the priorities while there're tons of other job awaiting to be get done. Just want to let you know, I might come up with something useful when I find some time for it.. Any updates, guys? . I agree with @jiayihu, determining if the translations are loaded or not could be very useful.\nIn my case, I'm developing a TranslateLoader for an utility, getting translations using ngx-translate. If there was an injection token (such as TRANSLATIONS_LOADED), I could rather leverate the use of it rather than subscribing to translate.use().. ",
    "amnporter": "Hi @ocombe, \nI've tried both examples below and still receive the same error. Am I doing something other that what u suggested? Please advise. Thanks.\nangular.component.ts v1\n```\nexport class AngularAppComponent {\n  viewContainerRef: ViewContainerRef;\n  title = 'angular works!';\n  public translate: TranslateService;\nconstructor(viewContainerRef:ViewContainerRef, translate:TranslateService) {\n    console.log('App.component');\n    this.viewContainerRef = viewContainerRef;\n    this.translate = translate;\n    this.translationConfig();\n  }\ntranslationConfig() { \n    var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n    userLang = /(de|fr|en)/gi.test(userLang) ? userLang : 'en';\n    this.translate.setDefaultLang('en'); //set default lang\n    this.translate.use(userLang); //use lang if found\n  }\n}\n```\nor angular.component.ts v2\n```\nexport class AngularAppComponent {\n  viewContainerRef: ViewContainerRef;\n  title = 'angular works!';\nconstructor(viewContainerRef:ViewContainerRef, public translate:TranslateService) {\n    console.log('App.component');\n    this.viewContainerRef = viewContainerRef;\n    this.translationConfig();\n  }\ntranslationConfig() { \n    var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n    userLang = /(de|fr|en)/gi.test(userLang) ? userLang : 'en';\n    this.translate.setDefaultLang('en'); //set default lang\n    this.translate.use(userLang); //use lang if found\n  }\n}\n```\n. ",
    "Elrhino": "Problem solved. The provider wasn't properly set in ionicBootstrap() the first time I tried it. It should have been:\nIn app.ts:\nionicBootstrap(MyApp, [\n    PROVIDERS,\n    [\n        {\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\n            deps: [Http]\n        },\n        TranslateService\n    ]\n]);\n. ",
    "thonythony": "@Elrhino Hi, can you tell me what's the import for the keyword PROVIDERS please ?\nEDIT: Ok ! I understand, PROVIDERS refers to your other providers... \n. ",
    "Flood": "Yes, same problem for me. It works if I change language on the site. But going directly to a page that's missing a key it does not fallback to default.\n. ",
    "stevecances": "As a workaround i'm forcing the default lang to be loaded (in the AppComponent constructor) :\ntypescript\nthis.translate.setDefaultLang(this.defaultLang);\nthis.translate.getTranslation(this.defaultLang).subscribe(() => {});\nBut i'm not sure this is safe. Anyway it is not ideal.\n. ",
    "normanwenk": "I have the same issue. The bundle for the default language is not even fetched. \nRight now, the workaround described by Basemasta is doing the job.\n. ",
    "chpasha": "I think the description for the defaultLang is deceiving. I also understand it as that it should return default translation (e.g. english) for all missing translations. But it is stated nowhere that the default translation must be loaded by user first, I think it would be also counter-intuitive to do so. It should be loaded automatically as soon as defaultLang is set.  . Singleton services provided in shared modules are still cloned by all lazy modules which is an expected behaviour, look here https://angular.io/docs/ts/latest/guide/ngmodule.html#!#shared-module\n\nDo not specify app-wide singleton providers in a shared module. A lazy loaded module that imports that shared module will make its own copy of the service\n. > Ok, static instances it is then, thanks for the info\n\nI'm not sure about that. I think the correct behaviour was already proposed here https://github.com/ocombe/ng2-translate/issues/209\nWe just have to configure TranslationModule with forRoot call in AppModule and then import and re-export it in SharedModule. This solution seems to work for me, strings are translated in both main and lazy modules and resource bundles are not loaded more than once \n. the methods getBrowserLang and getBrowserCultureLang have 99% same code or do I miss anything? getBrowserLang should actually reuse getBrowserCultureLang and split result with - or _\n. ",
    "mic0331": "thanks @ocombe for your reply however, if I comment the providers line I got a \n\nORIGINAL EXCEPTION: No provider for TranslateService!\n. \n",
    "ryanki1": "I've added following to app.module.ts, but still getting original getTranslation is not a function error:\n.. \n  imports: [\n    IonicModule.forRoot(MyApp),\n    TranslateModule\n  ],..\nusing following ionic profile:\nGulp version:  CLI version 3.9.0\nIonic Framework Version: 2.0.0-rc.0\nIonic CLI Version: 2.1.0\nIonic App Lib Version: 2.1.0-beta.1\nios-deploy version: Not installed\nios-sim version: 5.0.8 \nOS: Mac OS X El Capitan\nNode Version: v4.5.0\nXcode version: Xcode 8.0 Build version 8A218a \n. @thanikc With the latest versions this shouldn't be a Problem anymore :-). Hi Sam,\nyes translate.get('ERE.BE.A.TRNSLATION_KEY') works fine :-)\nBest regards,\nKieran\n\nFrom: Sam Verschueren notifications@github.com\nSent: Sunday, November 6, 2016 8:58:25 PM\nTo: ocombe/ng2-translate\nCc: Kieran Ryan; Author\nSubject: Re: [ocombe/ng2-translate] translate.get with array of keys returns keys and not translation (#310)\nDoes it work with only loading 1 key? Seems like it can't find the translations at all.\n\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/ocombe/ng2-translate/issues/310#issuecomment-258706154, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AB_CQtbq3lauhlT4OpMBpYvebpcqfxUUks5q7jFhgaJpZM4KqP_s.\n. ",
    "thanikc": "@ryanki1 Have you solved this?. ",
    "oussamaABID": "user TranslateHttpLoader.\n```\n import { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HttpClientModule,\n    TranslateModule.forRoot(), BrowserModule,\n//....\n  ],\n  providers: [{\n    provide: TranslateLoader,\n    useFactory: (http: HttpClient) => new TranslateHttpLoader(http, '/assets/i18n/', '.json'),\n    deps: [HttpClient]\n  }],\n  bootstrap: [AppComponent]\n```. ",
    "gnujeremie": "thanks, that's what i was looking for ^^\n. translation is working for me in rc5. are you sure there are no logs in the browser console ?\n. Not sure if related, but I get \nSyntaxError: import declarations may only appear at top level of a module\nvendor.js:1\nTypeError: ng2_translate_1.TranslateModule is undefined\nwhen updating to 3.1.0\n. ",
    "moh3n9595": "i want to use translator in rc5 but i can't. please explain your  solution step by step ,earlear.because  i have time limitation for Delivery of the project please\n. tnx a lot dear, I tested it! but it does not  work,  i don't get any error in browser and just see \"loading..\" :(\n. yes i checked both. \nmy appModule : \n``` ts\n//some imports..\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HttpModule,\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n     TranslatePipe\n  ],\n  providers: [\n     TRANSLATE_PROVIDERS\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n```\nmy main : \n``` ts\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app.module';\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\nmy appcomponent: \n``` ts\nexport class AppComponent {\nconstructor(private translate: TranslateService ) {\n var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n        userLang = /(fa|en)/gi.test(userLang) ? userLang : 'fa';\n        translate.setDefaultLang('fa');    \n        translate.use(userLang);\n      translate.use('fa');\n}\n```\ndo you have any solution? \n. tnx dear, i check again and if i find any solution i will say it here! :) \n. @ocombe hi again! your code is right. but i have a question about formbuilder from you because i think you know answer! and my question is : what does work formbuilder in rc5 ? (i know it in rc4)\n. ",
    "jusefb": "Can't get this to work. I am trying to use the TranslatePipe in two modules. So I have declared a shared module called TranslateModule:\n```\nimport {NgModule} from \"@angular/core\";\nimport {\n    TranslatePipe, MissingTranslationHandler, TranslateLoader, TranslateStaticLoader,\n    TranslateService\n} from \"ng2-translate\";\nimport {SpMissingTranslationHandler} from \"./utils/missingtranslation.handler\";\nimport {Http, HttpModule} from \"@angular/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\n@NgModule({\n    declarations:[\n        TranslatePipe\n    ],\n    providers:[\n        {\n            provide: MissingTranslationHandler,\n            useClass: SpMissingTranslationHandler\n        },\n        {\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'dist/assets/i18n', '.json'),\n            deps: [Http]\n        },\n        TranslateService\n    ],\n    imports:[\n        BrowserModule,\n        HttpModule\n    ]\n})\nexport class TranslateModule{}\n```\nThis module is then imported in the other two modules. For some reason I get a template parse error saying that the TranslatePipe is not available \"Error: Template parse errors:\u21b5The pipe 'translate' could not be found \".\nHope someone will be able to help\n. Yup, \"exports\" did the trick. Thank you very much for such a quick and comprehensive response. The NgModules concept starts finally make sense to me\n. ",
    "michalstepien": "I have no problem with polish characters.\n. ",
    "Jacob-McKay": "Yeah I'm depending on this: \n\"ng2-translate\": \"^2.2.2\",\nAnd you're right I haven't upgraded to angular 2 rc5.\nI'm trying to find the version of ng2-translate that depends on rc4 by looking on this repo now...\n. Correct again sir!  I'm on npm 2 because that was what came with node 4 LTS (I don't like to live on the bleeding edge all the time :P )\nPeer dependencies are garbage so I'm considering updating to npm 3.  Thank you, looks like there is a resolution to my issue, I wouldn't fight ya if you closed this.\n. ",
    "HamzaLJ": "Sure,\nI just changed this line:\nuseFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json')\nto this:\nuseFactory: (http) => new TranslateStaticLoader(http, 'assets/i18n', '.json')\n. @ocombe yes I am using Angular 2 rc5, how can I solve that?\n. How can I install the version 2.2.2?\n\nOn 15 ao\u00fbt 2016, at 17:09, Olivier Combe notifications@github.com wrote:\nThe current version only works with angular 2 RC5, that's why it doesn't work for you !\nThe last working version with RC3 should be 2.2.2 or 2.2.1\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Same here, it does not while using WKWebView ! Please add its support !!. \n",
    "danielehrhardt": "+1\n. ",
    "DylanMeeus": "I have the exact same error. I am using rc-4. \n{\n  \"name\": \"issue-tracker-client\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"angular-cli\": {},\n  \"scripts\": {\n    \"start\": \"ng serve\",\n    \"postinstall\": \"typings install\",\n    \"lint\": \"tslint \\\"src/**/*.ts\\\"\",\n    \"test\": \"ng test\",\n    \"pree2e\": \"webdriver-manager update\",\n    \"e2e\": \"protractor\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.4\",\n    \"@angular/compiler\": \"2.0.0-rc.4\",\n    \"@angular/core\": \"2.0.0-rc.4\",\n    \"@angular/forms\": \"0.2.0\",\n    \"@angular/http\": \"2.0.0-rc.4\",\n    \"@angular/platform-browser\": \"2.0.0-rc.4\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.4\",\n    \"@angular/router\": \"3.0.0-beta.2\",\n    \"@ngrx/core\": \"^1.0.1\",\n    \"@ngrx/effects\": \"^1.0.1\",\n    \"@ngrx/store\": \"^2.0.1\",\n    \"@ngrx/store-devtools\": \"^2.0.0-beta.1\",\n    \"bootstrap-sass\": \"^3.3.6\",\n    \"broccoli-merge-trees\": \"^1.1.1\",\n    \"broccoli-postcss\": \"^3.0.0\",\n    \"broccoli-sass\": \"^0.7.0\",\n    \"class-transformer\": \"0.1.0-beta.3\",\n    \"cssnano\": \"^3.7.1\",\n    \"es6-shim\": \"0.35.1\",\n    \"glob\": \"^7.0.5\",\n    \"lodash\": \"^4.13.1\",\n    \"moment\": \"^2.13.0\",\n    \"ng2-bootstrap\": \"^1.0.17\",\n    \"ng2-translate\": \"2.4.1\",\n    \"node-sass\": \"^3.8.0\",\n    \"postcss-cssnext\": \"^2.6.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"systemjs\": \"0.19.26\",\n    \"zone.js\": \"0.6.12\"\n  },\n  \"devDependencies\": {\n    \"angular-cli\": \"1.0.0-beta.9\",\n    \"codelyzer\": \"0.0.20\",\n    \"ember-cli-inject-live-reload\": \"1.4.0\",\n    \"jasmine-core\": \"2.4.1\",\n    \"jasmine-spec-reporter\": \"2.5.0\",\n    \"karma\": \"0.13.22\",\n    \"karma-chrome-launcher\": \"0.2.3\",\n    \"karma-jasmine\": \"0.3.8\",\n    \"karma-spec-reporter\": \"0.0.26\",\n    \"protractor\": \"3.3.0\",\n    \"ts-node\": \"0.5.5\",\n    \"tslint\": \"3.11.0\",\n    \"typescript\": \"1.8.10\",\n    \"typings\": \"0.8.1\"\n  }\n}\n- It was working before in this project, but it broke at some point. Though I can't pinpoint at which point. \n. ",
    "nikoshka": "I have the same issue.\nI am trying to upgrade an application from angular 1.5 to angular 2 (rc5).\nSo, in index.html file I have\nSystem.config({\n      map: {\n        'rxjs': 'node_modules/rxjs',\n        '@angular': 'node_modules/@angular',\n        'ng2-translate': 'node_modules/ng2-translate',\n        'app': 'apps/<%= app %>'\n      },\n      packages: {\n        'app': {\n          main: 'main.js',\n          defaultExtension: 'js'\n        },\n        '@angular/core': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/compiler': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/common': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/platform-browser': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/platform-browser-dynamic': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/upgrade': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        '@angular/http': {\n          main: 'index.js',\n          defaultExtension: 'js'\n        },\n        'rxjs': {\n          defaultExtension: 'js'\n        },\n        'ng2-translate': {\n          defaultExtension: 'js'\n        }\n      }\n    });\nAnd day-selector-component.ts\n```\nimport {Component, Input} from '@angular/core';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\n@Component({\n    selector: 'day-selector',\n    templateUrl: 'daySelector.tpl.html'\n})\nexport class DaySelectorComponent {\n    constructor(private translate: TranslateService) {\n        translate.addLangs([\"en\", \"fr\"]);\n        translate.setDefaultLang('en');\n    }\n}\n```\nWhat's am I doing wrong?\n. I use actually rc5 and have this issue :( \n. Actually I already found the solution :)\nIn my case I did bootstraping of two applications: one is written on angular 1 and second is on angular 2:\n```\nimport { upgradeAdapter } from './angular2/upgrade-adapter';\nupgradeAdapter.bootstrap(document.body, ['ng2-app']);\nupgradeAdapter.bootstrap(document.body, ['ng1-app']);\n```\nHere is './angular2/upgrade-adapter' content:\n```\nimport { UpgradeAdapter } from '@angular/upgrade';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, forwardRef } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { TranslateModule } from 'ng2-translate/ng2-translate';\nimport { TranslateService } from 'ng2-translate/ng2-translate';\nvar adapter = new UpgradeAdapter(forwardRef(() => appModule));\nangular.module('ng2-app', []);\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot()\n    ]\n})\nclass appModule {\n    constructor(private translate: TranslateService) {\n        translate.addLangs(['en', 'fr']);\n        translate.setDefaultLang('en');\n        translate.use('en');\n    }\n}\nexport const upgradeAdapter = adapter;\n```\nSo, this works fine for me :)\n. ",
    "kosiakMD": "The same Error if \nimport { MdToolbar } from '@angular2-material/toolbar';\nTried next:\nmeteor npm update -save\nall modules have been updated BUT:\nErrors prevented startup:\nWhile building the application:\nerror: File not found: node_modules/@angular/forms/esm/src/directives/reactive_directives/form_array_name.d.ts\nnode_modules/@angular/..........\nResolved - restart Meteor BUT\nUncaught No provider for PlatformRef!\nResolved by replacing:\nimport {bootstrap} from 'angular2-meteor-auto-bootstrap';\nwith:\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nBUT:\nNgModule DynamicModule uses PartiesListComponent via \"entryComponents\" but it was neither declared nor imported! This warning will become an error after final.\n.... etc...\n. Just do Migration rc4 -> rc5\nhttps://angular.io/docs/ts/latest/cookbook/rc4-to-rc5.html\nBut be careful  - ngModule in app.module.ts and nowhere more\nnew rules for imposrts and for dependences\nit resloved all these problems\n. ",
    "vaurelios": "+1\nSame here.\npackages.json\njson\n{\n  \"name\": \"ng2-brunch\",\n  \"description\": \"Brunch with Angular 2\",\n  \"author\": \"Colin Bate <colin@colinbate.com>\",\n  \"version\": \"0.6.0\",\n  \"scripts\": {\n    \"start\": \"brunch watch --server\",\n    \"postinstall\": \"typings install\",\n    \"build\": \"brunch build\",\n    \"build:prod\": \"brunch build --production\",\n    \"test\": \"tsc --noEmit && tslint app/**/*.ts app/*.ts\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.4\",\n    \"@angular/compiler\": \"2.0.0-rc.4\",\n    \"@angular/core\": \"2.0.0-rc.4\",\n    \"@angular/forms\": \"0.2.0\",\n    \"@angular/http\": \"2.0.0-rc.4\",\n    \"@angular/platform-browser\": \"2.0.0-rc.4\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.4\",\n    \"@angular/router\": \"3.0.0-beta.1\",\n    \"@ng-bootstrap/ng-bootstrap\": \"^1.0.0-alpha.2\",\n    \"angular2-fontawesome\": \"^0.5.1\",\n    \"es6-promise\": \"^3.1.2\",\n    \"es6-shim\": \"^0.35.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"restify\": \"^4.1.1\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"zone.js\": \"^0.6.12\"\n  },\n  \"devDependencies\": {\n    \"auto-reload-brunch\": \"2.7.1\",\n    \"brunch\": \"2.6.0 - 2.8.0 || >2.8.1\",\n    \"brunch-typescript\": \"1.8.1\",\n    \"clean-css-brunch\": \"^2.0.0\",\n    \"codelyzer\": \"0.0.23\",\n    \"environment-brunch\": \"^1.0.0\",\n    \"inline-css-brunch\": \"^2.0.0\",\n    \"javascript-brunch\": \"^2.0.0\",\n    \"tslint\": \"^3.11.0\",\n    \"typescript\": \"^1.8.10\",\n    \"typings\": \"^1.1.0\",\n    \"uglify-js-brunch\": \"^2.0.1\"\n  }\n}\n. Solved my issue, it was the angular version, NgModule was introduced at rc5 i was using rc4.\n. ",
    "robertomaldonado": "Hello, I am using the angular2-google-maps library with the ng2 rc5 version; I get the same error as showed in the above questions...\nI get the problem in zone.js:461 Unhandled Promise rejection more info states: TypeError: _angular_core.NgModule is not a function at Object.eval \n. ",
    "idesignpixels": "Also rc5 with same issue\n. ",
    "aaronleesmith": "@nottinhill I would recommend you follow the upgrade path to RC5. The changes are significant and the Angular team has stated that the RC5 API is very close to the final Angular 2 API.\n. ",
    "swiftyone": "Unfortunately some other frameworks still require RC4, in my case Ionic.\nHope to upgrade soon...\n. ",
    "hyde69x": "I guess you have a caret sign before the ng2-translate version in your package.json and it automatically updated the module version to the newest one:\n\"ng2-translate\": \"^2.2.2\",\n Remove the caret and reinstall the module to bring the version back to 2.2.2\n. ",
    "gtzinos": "@ocombe  2.2.2 version return this error..\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY @angular/common@^2.0.0-rc.3\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY @angular/compiler@^2.0.0-rc.3\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY @angular/core@^2.0.0-rc.3\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY @angular/http@^2.0.0-rc.3\n\u2514\u2500\u2500 ng2-translate@2.2.2 \nnpm WARN ng2-translate@2.2.2 requires a peer of @angular/common@^2.0.0-rc.3 but none was installed.\nnpm WARN ng2-translate@2.2.2 requires a peer of @angular/compiler@^2.0.0-rc.3 but none was installed.\nnpm WARN ng2-translate@2.2.2 requires a peer of @angular/core@^2.0.0-rc.3 but none was installed.\nnpm WARN ng2-translate@2.2.2 requires a peer of @angular/http@^2.0.0-rc.3 but none was installed.\n. My npm version is 3.10.5\n. Yes my friend. but nothing..\n. After a search i found that you can't use HttpClient before angular version 4.3.0 (I am using 4.1.3 on your latest blank template)\nAs a workaround i changed the package code:\nGo to node_modules/@ngx-translate/http-loader/src/http-loader.d.ts\nReplace\nimport { HttpClient } from \"@angular/common/http\";\nimport { TranslateLoader } from \"@ngx-translate/core\";\nimport \"rxjs/add/operator/map\";\nexport declare class TranslateHttpLoader implements TranslateLoader {\n    private http;\n    private prefix;\n    private suffix;\n    constructor(http: HttpClient, prefix?: string, suffix?: string);\n    /**\n     * Gets the translations from the server\n     * @param lang\n     * @returns {any}\n     */\n    getTranslation(lang: string): any;\n}\nWith this\nimport { Http } from \"@angular/http\";\nimport { TranslateLoader } from \"@ngx-translate/core\";\nimport \"rxjs/add/operator/map\";\nexport declare class TranslateHttpLoader implements TranslateLoader {\n    private http;\n    private prefix;\n    private suffix;\n    constructor(http: Http, prefix?: string, suffix?: string);\n    /**\n     * Gets the translations from the server\n     * @param lang\n     * @returns {any}\n     */\n    getTranslation(lang: string): any;\n}\n. ",
    "slicc": "I have managed to fix this with the following initialisation:\n```\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\nimport { routing, appRoutingProviders } from './app.routes';\nimport { HttpModule, Http, HTTP_PROVIDERS } from '@angular/http';\nimport { AppComponent }  from './app.component';\nimport { LocationDetailComponent } from './locationdetail/locationdetail.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { SettingsPageComponent } from './settingspage/settingspage.component';\nimport { LocationListComponent } from './locationlist/locationlist.component';\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\n@NgModule({\n    imports: [\n        BrowserModule, FormsModule, routing, HttpModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n            deps: [Http]\n        })\n    ],\n    providers: [\n        appRoutingProviders, HTTP_PROVIDERS\n    ],\n    declarations: [\n        AppComponent,\n        LocationDetailComponent,\n        HomepageComponent,\n        SettingsPageComponent,\n        LocationListComponent\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n. Yes, that is correct.\nThanks.\n. ",
    "nabeelbukhari": "Are there any plans of providing built-in support for partial loading?\n. I have implemented one for loading multiple files.\n`\n/**/\nimport {TranslateLoader}                from 'ng2-translate/ng2-translate';\nimport {Http, Response}                 from \"@angular/http\";\nimport {Observable}                     from \"rxjs/Observable\";\nimport '../../rxjs-extensions'\nexport class TranslateParitalLoader implements TranslateLoader {\n    constructor(private http: Http, private prefix: Array = [\"i18n\"], private suffix: string = \".json\") {\n    }\n``\n/**\n * Gets the translations from the server\n * @param lang\n * @returns {any}\n */\ngetObservableForHttp(value, combinedObject, lang: string) {\n    return Observable.create(observer => {\n        this.http.get(${value}/${lang}${this.suffix}`)\n        .subscribe((res) => {\n            let responseObj = res.json();\n            Object.keys(responseObj).forEach(key=>{\n                combinedObject[key] = responseObj[key];\n            });\n            console.log(combinedObject);\n            observer.next(combinedObject);\n            //call complete if you want to close this stream (like a promise)\n            observer.complete();\n        });\n    });\n}\npublic getTranslation(lang: string): Observable {\n    var combinedObject = new Object();\n    var oldObsevers;\n    var newObserver;\n    this.prefix.forEach((value) =>{\n        newObserver = this.getObservableForHttp(value, combinedObject, lang);\n        if (oldObsevers == null) {\n            oldObsevers = newObserver;\n        }\n        else {\n            oldObsevers = oldObsevers.merge(newObserver);\n        }\n    });\n    return oldObsevers;\n}\n```\n}`\n. ",
    "ganesh35": "I too run in to this problem.  Highly appreciated if the solution is in-built.\nGanesh\n. ",
    "anphu7492": "+1 for partial loading support. I got the same error. For those who trying to fix it: https://www.npmjs.com/package/@ngx-translate/http-loader. ",
    "Matmo10": "Hi @ocombe, so this next major version will allow you to split up your translations by modules? So lazy loaded modules can also have their translations files lazily loaded? Is that correct?\nAny rough ETA's on that?. Hey @ocombe, I know you're probably super busy these days with your new work on the Angular team, but I was wondering if you could briefly explain how to use the partial loader for translations that only need to be loaded as the modules they belong to are lazily loaded. \nWhen you said you will have multiple loaders to choose from in order to compose your perfect translate library earlier in this thread - are those loaders already available in the master branch? I was digging around the source code and didn't seem to find any.   If they exist, could you point them out so we can at least guesstimate how they should be used? Thanks :). Just to clarify, partial loading isn't supported right now? If not, then consider this a  +1 for this feature request :)\n. AOT doesn't work for me either without explicitly configuring the TranslateModule like @zackarychapple suggested. But it does work once I do that.\n```\nERROR in ./src/compiled/src/app/app.module.ngfactory.ts\nModule not found: Error: Can't resolve '../../../translate.service' in '/Users/me/ng2app/src/compiled/src/app'\n @ ./src/compiled/src/app/app.module.ngfactory.ts 77:15-52\n @ ./src/main.browser.aot.ts\nERROR in [default] /Users/me/ng2app/src/compiled/src/app/app.module.ngfactory.ts:78:26 \nCannot find module '../../../translate.service'.\nERROR in [default] /Users/me/ng2app/src/compiled/src/app/app.module.ngfactory.ts:342:93 \nProperty 'translateLoaderFactory' does not exist on type 'typeof \"/Users/me/ng2app/src/app/app.module\"'.\n```\nmy main.browser.aot.ts is identical to https://github.com/qdouble/angular-webpack2-starter/blob/master/src/main.browser.aot.ts\n. Yes. Just to clarify, I had to use this for AOT to work:\n```\nexport function createTranslateLoader(http: Http) {\n   return new TranslateStaticLoader(http, './i18n', '.json');\n}\n...\nTranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    }),\n```\nWhile just doing this would NOT work for AOT:\nTranslateModule.forRoot()\n. Maybe you could start an OpenCollective or some way for people to donate individually to the project. Maybe something like a Kickstarter where each threshold unlocks a new feature to be implemented or issue to be resolved. I feel like ngx-translate is already 90% done, it just needs a few final touches.\nI'd like to use the official i18n solution, but it simply isn't flexible enough for me yet, and I'll keep using ngx-translate until it is. I don't see that being anytime soon, to be honest. \nI would donate personally. Having to go through a corporate process of purchasing and dealing with licensing though (dealing with procurement teams, legal teams, etc) - I would probably just stay on the current free version rather than deal with that to be honest.. ",
    "Richie765": "Loading separate language files for modules didn't work for me yet. As a workaround I'm using the following Gulp:\n```javascript\nvar gulp = require('gulp');\nvar merge = require('gulp-merge-json');\nvar fs = require('fs');\nvar path = require('path');\nvar languages = 'en,nl,de,es,pt'.split(',');\nvar i18n_source = 'resources/i18n';\nvar i18n_dest = 'src/assets/i18n';\n// Currently unused but could be handy\nfunction getDirs(dir) {\n  return fs.readdirSync(dir).filter(function(file) {\n    return fs.statSync(path.join(dir, file)).isDirectory();\n  });\n}\n// Merge multiple i18n json files together\ngulp.task('i18n', function() {\n  return languages.map(function(lang) {\n    return gulp.src(${ i18n_source }/*/${ lang }.json)\n      .pipe(merge({\n        fileName: ${ lang }.json\n      }))\n      .pipe(gulp.dest(i18n_dest));\n  });\n});\n```\nIt loads files from e.g. resources/*/en.json, merges them and spits them out to src/assets/i18n/en.json. Could you do the same for http-loader? I've now installed @0.0.1 and it seems to work fine, but I'm not sure if that is ideal.. ",
    "elendil-software": "Hi\nI'm a bit lost. Does the 6.0.0 version support multiple file loading ?\nRegards\nJulien. Hi,\nI have the same problem, I get the error GET http://localhost:4200/i18n/en.json 404 (Not Found)\nOne thing I don't understand is why does it try to load /i18n/en.json if I put new TranslateHttpLoader(http, './assets/i18n/', '.json'); in my app.module ?\nMy configuration : \nin app.module.ts\nexport function createTranslateLoader(http: Http) {\nreturn new TranslateHttpLoader(http, './assets/i18n', '.json');\n}\nand\n`imports: [\n\n    TranslateModule.forRoot({\n        loader: {\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        }\n    }),\n]`\n\napp.component.ts \n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n    constructor(translate: TranslateService) {\n        translate.setDefaultLang('en');\n        translate.use('en');\n    }\n}\napp.component.html\n...\n<span class=\"title\">{{ 'HELLO' | translate}}</span>\n...\nNote : If I put the i18n json files in ./i18n/ and not in ./assets/i18n/ I have not the error but the string are not translated\nEnvironment :\nangular-cli : 1.0.0-beta.26\nngx-translate/core : 6.0.0\nngx-translate/http-loader : 0.0.3\nAngular : 2.4.8\nTested with Firefox and Chrome\n. Hi,\nI finally found where was my mistake. I had some imports from the previous version (import { ... } from \"ng2-translate\").\n. ",
    "marko033": "Someone started working on partial loader?. +1. +1\nupdate?. ",
    "megamindbrian": "@ocombe What will they come out with next?\n. Nice work, I'll probably need this momentarily.\nOn Tue, Dec 12, 2017 at 3:03 PM, Alberto Fuentes notifications@github.com\nwrote:\n\n@Willis0826 https://github.com/willis0826 , how do you implement it ?\nin app.module , app.component ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/199#issuecomment-351209778,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AX5XbtINz_iFx5M8uFAzWtQiO_-WDVxLks5s_vgdgaJpZM4JlqmZ\n.\n\n\n-- \n\"I studied engineering\"\nCONFIDENTIALITY NOTICE: The contents of this email message and any\nattachments are intended solely for the addressee(s) and may contain\nconfidential and/or privileged information and may be legally protected\nfrom disclosure. It is then shared with tech companies, bots, hackers,\ngovernment agencies, and marketers.  The security of this message is none,\nand it may be shared on Instagram at anytime.  If you are OK with this,\nplease respond.  There isn't really any security or privacy anywhere.  If\nyou disagree you may want to go camping and talk to people face-to-face\nlike in old times.\n. ",
    "rubenns": "+1 for partial loading support. ",
    "Selupsis": "Thank you @nabeelbukhari for the provided code snippet, loading translations from several folders works for me now.\nHowever, when I use the custom loader, the translate-pipe does not work anymore - it always just returns the key that should be translated. Translations are loaded successfully, and using e.g. the directive translates values correctly. Am I missing something?. ",
    "vincentfierant": "@Selupsis the reason the pipe is not working in @nabeelbukhari 's example is because it is calling observer.next() / observer.complete() too soon. It should call it after ALL paths have been loaded. I fixed this by implementing a counter and only calling .next/.complete after all paths are loaded.\nI'm sure it can be written a lot cleaner or smarter, so happy to see any improvements!\nhttps://gist.github.com/vincentfierant/babfff11a152d4ca8d432b5c938ae2e0. ",
    "nirzamir": "Hi,\nUsing Observable.reduce worked for me for merging two translation files (for the sake of experiment I just concatenated '2' to the file name, but obviously you can refactor it to a loop over multiple prefixes). It works with the pipe - translations from both files are working fine.\n```typescript\nclass CustomLoader implements TranslateLoader {\nconstructor(private http: HttpClient, private prefix: string = \"/assets/i18n/\", private suffix: string = \".json\") {}\npublic getTranslation(lang: string): any {\n  const $firstFile = this.http.get(`${this.prefix}${lang}${this.suffix}`);\n  const $secondFile = this.http.get(`${this.prefix}${lang}2${this.suffix}`);\n  const reducer = (translations, val) => { return Object.assign(translations, val) };\n  return Observable.merge($firstFile, $secondFile)\n          .reduce(reducer, {});\n}\n\n}\n```\n. ",
    "Tuizi": "I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. @mebibou I'm curious about what contributors think about that. For me it's not a workaround has I simply follow what the documentation say (paragraph \"lazy loaded module\"). What would be a real solution?\nI have time to work on a PR and I would like to try to solve this problem, which seems to impact many people.\nWhat do you think of that?\nCore Module\n```typescript\nexport function createTranslateLoader(http: HttpClient) {\n  // We may need a new loader? To define the folder where i18n's files are, and the extension\n  return new LazyTranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nTranslateModule.forRoot({\n  loader: {\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [HttpClient]\n  }\n})\n```\nLazy loaded Module: admin\ntypescript\n  TranslateModule.forChild({lazy: 'admin'})\nWhen admin module is loaded, the file ./assets/i18n/admin/en.json will be requested. \nWhat do you think of that?. Thank you are right. I will check that. I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. @denirun Very good but doesn't work when you change the language?. I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. I wrote a article about how to have 1 json file per lazy loaded module without having to write a new Custom Loader etc... it's quiet simple, only the documentation is not clear in fact:\nhttps://medium.com/@TuiZ/how-to-split-your-i18n-file-per-lazy-loaded-module-with-ngx-translate-3caef57a738f. ",
    "BorisWechselberger": "```\nimport {HttpClient} from '@angular/common/http';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/observable/forkJoin';\nexport function translateLoader(http: HttpClient) {\nreturn new MultiTranslateHttpLoader(http, [\n    {prefix: './assets/i18n/', suffix: '.json'},\n    {prefix: './assets/i18n/countries-', suffix: '.json'}\n  ]);\n}\nexport class MultiTranslateHttpLoader implements TranslateLoader {\nconstructor(private http: HttpClient,\n              public resources: { prefix: string, suffix: string }[] = [{\n                prefix: '/assets/i18n/',\n                suffix: '.json'\n              }]) {}\n/*\n   * Gets the translations from the server\n   * @param lang\n   * @returns {any}\n   /\n  public getTranslation(lang: string): any {\nreturn Observable.forkJoin(this.resources.map(config => {\n  return this.http.get(`${config.prefix}${lang}${config.suffix}`);\n})).map(response => {\n  return response.reduce((a, b) => {\n    return Object.assign(a, b);\n  });\n});\n\n}\n}\n```\nhttps://gist.github.com/BorisWechselberger/08e2424e1267ed27f9b4a046cc3357c8. ",
    "Willis0826": "@BorisWechselberger  I did tried the code you provided above, it works for me!!!\nHere is a problem I have faced, I guessed this problem is caused  by the different package version: \n1. We should ensure the getTranslation() will return Object, not JSON String.\nTo solve this problem, I changed the getTranslation() like this : \npublic getTranslation(lang: string): any {\n    return Observable.forkJoin(this.resources.map(config => {\n        return this.http.get(`${config.prefix}${lang}${config.suffix}`);\n    })).map(response => {\n        return response.reduce((a:any , b:any) => {\n            a._body = JSON.parse(a._body); //parse JSON String to Javascript Object\n            b._body = JSON.parse(b._body); //parse JSON String to Javascript Object\n            let obj:any = Object.assign(a._body, b._body);\n            return obj;\n        });\n    });\n}\nHere to share!! Feel free to feedback.. @yaotzin68 Sorry for my late reply ! Yes, I implement the MultiTranslateHttpLoader class in app.module.. ",
    "yaotzin68": "@Willis0826  , how do you implement it ? in app.module , app.component ?. ",
    "denniske": "I have created a github repository for a ngx translate http loader that can load multiple translation files:\nhttps://github.com/denniske/ngx-translate-multi-http-loader\nSimple example: https://stackblitz.com/edit/ngx-translate-multi-http-loader-sample. ",
    "kourosko": "I edited @Richie765 's comment so it can autodetect languages and I added a watch so it can detect changes in language files.\ncode:\n```\nvar gulp = require('gulp');\nvar merge = require('gulp-merge-json');\nvar i18n_source = 'src/resources/i18n';\nvar i18n_dest = 'src/assets/i18n';\nvar glob = require('glob');\n// Merge multiple i18n json files together\nfunction fixi18n(done) {\n  const langs = [\n    ...new Set(\n      glob\n        .sync(${i18n_source}/**/*.json)\n        .map(x => x.match(/[ \\w-]+?(?=.)/gm)[0])\n    )\n  ];\n  console.log('Fixing languages: ', langs);\n  return langs.map(function(lang) {\n    return gulp\n      .src(${i18n_source}/**/${lang}.json)\n      .pipe(\n        merge({\n          fileName: ${lang}.json\n        })\n      )\n      .pipe(gulp.dest(i18n_dest, { overwrite: true }))\n      .on('end', () => done());\n  });\n}\ngulp.task('i18n', fixi18n);\nfunction watchAppJs(done) {\n  return gulp\n    .watch(${i18n_source}/**/*.*, gulp.series(fixi18n))\n    .on('end', () => done());\n}\ngulp.task('default', gulp.series(fixi18n, watchAppJs));\n```\nInstead of ng serve i run with concurrently eg of package.json\n\"scripts\": {\n    ...\n    \"prebuild\": \"gulp i18n\",\n    \"build\": \"ng build\",\n    \"serve\": \"concurrently --raw --kill-others --kill-others-on-fail  \\\\\"ng serve\\\\\" \\\\\"gulp\\\\\" \"\n..\n}. ",
    "ybarbaria": "Awesome ! Thx ! Your project is wonderful !!\n. ",
    "MaelstromCdn": "Problem solved, info can be found on StackOverflow here: StackOverflow post.\nThanks,\nJason\n. ",
    "albanx": "This is an impure pipe, what I notice that is called on every single component change on the app. Is there any performance benchmark ?\n. @ocombe that is not true. I made some benchmark in a simple app with 4 components, each containing 3 to 4 translation pipes. just clicking on an input fields causes all the pipe to be called at least 10 times each, so there were was 4x4x10=160 calls times just on a single click.\nI solved the i18n problem of my app by changing the pipe to pure, and added  just one parameter to the pipe (in this case was the language). The parameter change trigger the pipe to refresh just once.\nExample: \nFrom {{'Register' | trpipe}}\nto {{'Register' | trpipe:tr.lang}}\ntr.lang will change when the language is changed.\n. I have added the parameter to the translation service as public variable, so yes I have to inject the translationService in all components... But I am a bit stingy :) so I prefer this way for the moment. \n. Using impure pipes can lead to several performance issues, I tested it and leads to huge number calls in the component, and template rendering, specially if we have a lot of strings or change cycles in your app.\nI did a similar solution with a pure pipe, with one more input in order to make it change in the language change:\n{{'Hello' | _:trans.lang}}\nwhere _ is the pipe to call and trans.lang is a public variable of the translate service. In this case the translation will trigger only if the trans.lang changes to another language.. ",
    "yuriwally": "Perfect right! :dancers: \n. ",
    "jpinkster": "Haha yeah man .. probably an IE issue. Just trying to figure out how you were able to determine the current logic makes the most sense. I have updated my logic and tested across all browsers (chrome, safari, firefox, and IE10+) and it is pulling the users default language in perfectly. If you keep your existing logic, it is mistakenly taking the users secondary language, which is inaccurate. \nTo truly encompass all browser support the logic should be: \n```\npublic getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n    }\n    let browserLang: any;\nbrowserLang = window.navigator.languages ? window.navigator.languages[0] : null;\nbrowserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\nif (browserLang.indexOf('-') !== -1)\n    browserLang = browserLang.split('-')[0];\n\nif (browserLang.indexOf('_') !== -1)\n    browserLang = browserLang.split('_')[0];\n\nreturn browserLang;\n\n}\n```\nAnd I could really argue that it should be:\n```\npublic getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n    }\n    let browserLang: any;\nbrowserLang = window.navigator.languages ? window.navigator.languages[0] : null;\nbrowserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\nreturn browserLang;\n\n}\n```\n.. omit the stripping of the location part of the locale, and let the developer utilizing this method determine if they want to strip that off or not... again this is a helper method for us to determine what the users current default language is set to so that we can default to their true setting.\nPlease reconsider merging this change.\n. Hey @ocombe, do you mind getting your eyes on this PR and let me know if it is something you will merge or not so that I can either use this helper method or move on? Thanks man.\n. Any luck testing this @ocombe \n. ",
    "sean-perkins": "@ocombe \nWhile browsers may have different ways to organize languages, it's unlikely that pulling any other index, other than the primary index, would make sense to the user (based on their preferences). \nwindow.navigator.language should equal the same as window.navigator.languages[0]. \nSince this is a helper function, it either should return the preferred user's language choice, or have optional variables to select the specific language index you may want, to alleviate your concern about some version of IE or Safari that caused the initial logic behind the current function. \n. ",
    "bogomips": "Thank you so much for the fast reply.\nWith the change you proposed I got errors but I figured out what was about by reading \nORIGINAL EXCEPTION: No provider for Http! so I added the http provider\nproviders: [\n    appRoutingProviders,\n    Http,\n    { \n          provide: TranslateLoader,\n          useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n          deps: [Http]\n    }\n  ],\nUnfortunately I ran into another error:\nEXCEPTION: Error in ./AppComponent class AppComponent_Host - inline template:0:0\nplatform-browser.umd.js:937 EXCEPTION: Error in ./AppComponent class AppComponent_Host - inline template:0:0BrowserDomAdapter.logError @ platform-browser.umd.js:937BrowserDomAdapter.logGroup @ platform-browser.umd.js:947ExceptionHandler.call @ core.umd.js:4389(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nplatform-browser.umd.js:937 ORIGINAL EXCEPTION: No provider for ConnectionBackend!BrowserDomAdapter.logError @ platform-browser.umd.js:937ExceptionHandler.call @ core.umd.js:4398(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nplatform-browser.umd.js:937 ORIGINAL STACKTRACE:BrowserDomAdapter.logError @ platform-browser.umd.js:937ExceptionHandler.call @ core.umd.js:4401(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nplatform-browser.umd.js:937 Error: DI Exception\n    at NoProviderError.BaseException [as constructor] (core.umd.js:4472)\n    at NoProviderError.AbstractProviderError [as constructor] (core.umd.js:4602)\n    at new NoProviderError (core.umd.js:4638)\n    at ReflectiveInjector_._throwOrNull (core.umd.js:6532)\n    at ReflectiveInjector_._getByKeyDefault (core.umd.js:6560)\n    at ReflectiveInjector_._getByKey (core.umd.js:6523)\n    at ReflectiveInjector_.get (core.umd.js:6332)\n    at NgModuleInjector.get (myappModule.ngfactory.js:114)\n    at NgModuleInjector.get (myappModule.ngfactory.js:119)\n    at NgModuleInjector.get (myappModule.ngfactory.js:124)BrowserDomAdapter.logError @ platform-browser.umd.js:937ExceptionHandler.call @ core.umd.js:4402(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nplatform-browser.umd.js:937 ERROR CONTEXT:BrowserDomAdapter.logError @ platform-browser.umd.js:937ExceptionHandler.call @ core.umd.js:4405(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nplatform-browser.umd.js:937 DebugContext {_view: _View_AppComponent_Host0, _nodeIndex: 0, _tplRow: 0, _tplCol: 0}BrowserDomAdapter.logError @ platform-browser.umd.js:937ExceptionHandler.call @ core.umd.js:4406(anonymous function) @ core.umd.js:9890ZoneDelegate.invoke @ zone.js:332onInvoke @ core.umd.js:9245ZoneDelegate.invoke @ zone.js:331Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365onInvokeTask @ core.umd.js:9236ZoneDelegate.invokeTask @ zone.js:364Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nzone.js:478 Unhandled Promise rejection: EXCEPTION: Error in ./AppComponent class AppComponent_Host - inline template:0:0\nORIGINAL EXCEPTION: No provider for ConnectionBackend!\nORIGINAL STACKTRACE:\nError: DI Exception\n    at NoProviderError.BaseException [as constructor] (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:4472:27)\n    at NoProviderError.AbstractProviderError [as constructor] (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:4602:20)\n    at new NoProviderError (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:4638:20)\n    at ReflectiveInjector_._throwOrNull (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:6532:23)\n    at ReflectiveInjector_._getByKeyDefault (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:6560:29)\n    at ReflectiveInjector_._getByKey (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:6523:29)\n    at ReflectiveInjector_.get (https://mydomain.tld/assets/a2/node_modules/@angular/core//bundles/core.umd.js:6332:25)\n    at NgModuleInjector.get (myappModule.ngfactory.js:114:80)\n    at NgModuleInjector.get (myappModule.ngfactory.js:119:96)\n    at NgModuleInjector.get (myappModule.ngfactory.js:124:108)\nERROR CONTEXT:\n[object Object] ; Zone: <root> ; Task: Promise.then ; Value: ViewWrappedException {_wrapperMessage: \"Error in ./AppComponent class AppComponent_Host - inline template:0:0\", _originalException: NoProviderError, _originalStack: \"Error: DI Exception\u21b5    at NoProviderError.BaseExc\u2026eInjector.get (myappModule.ngfactory.js:124:108)\", _context: DebugContext, _wrapperStack: \"Error: Error in ./AppComponent class AppComponent_\u2026dules/@angular/core//bundles/core.umd.js:9976:31)\"} undefinedconsoleError @ zone.js:478_loop_1 @ zone.js:505drainMicroTaskQueue @ zone.js:509ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571(anonymous function) @ compiler.umd.js:12671DirectiveNormalizer._loadMissingExternalStylesheets @ compiler.umd.js:12671DirectiveNormalizer.normalizeExternalStylesheets @ compiler.umd.js:12653(anonymous function) @ compiler.umd.js:12602ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3XHRImpl.get @ platform-browser-dynamic.umd.js:92DirectiveNormalizer._fetch @ compiler.umd.js:12571DirectiveNormalizer.normalizeTemplateAsync @ compiler.umd.js:12612DirectiveNormalizer.normalizeDirective @ compiler.umd.js:12589RuntimeCompiler._createCompiledTemplate @ compiler.umd.js:15910(anonymous function) @ compiler.umd.js:15849(anonymous function) @ compiler.umd.js:15847RuntimeCompiler._compileComponents @ compiler.umd.js:15846RuntimeCompiler._compileModuleAndComponents @ compiler.umd.js:15769RuntimeCompiler.compileModuleAsync @ compiler.umd.js:15746PlatformRef_._bootstrapModuleWithZone @ core.umd.js:9991PlatformRef_.bootstrapModule @ core.umd.js:9984(anonymous function) @ app.main.ts:13(anonymous function) @ app.main.ts:16(anonymous function) @ app.main.ts:16__exec @ system.src.js:1510entry.execute @ system.src.js:3926linkDynamicModule @ system.src.js:3252link @ system.src.js:3095execute @ system.src.js:3432doDynamicExecute @ system.src.js:798link @ system.src.js:1000doLink @ system.src.js:652updateLinkSetOnLoad @ system.src.js:700(anonymous function) @ system.src.js:512ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435XMLHttpRequest.send (async)scheduleTask @ zone.js:101ZoneDelegate.scheduleTask @ zone.js:345Zone.scheduleMacroTask @ zone.js:282(anonymous function) @ zone.js:122send @ VM1093:3fetchTextFromURL @ system.src.js:1156(anonymous function) @ system.src.js:1739ZoneAwarePromise @ zone.js:602(anonymous function) @ system.src.js:1738(anonymous function) @ system.src.js:2764(anonymous function) @ system.src.js:3338(anonymous function) @ system.src.js:3605(anonymous function) @ system.src.js:3990(anonymous function) @ system.src.js:4453(anonymous function) @ system.src.js:4705(anonymous function) @ system.src.js:408ZoneDelegate.invoke @ zone.js:332Zone.run @ zone.js:225(anonymous function) @ zone.js:586ZoneDelegate.invokeTask @ zone.js:365Zone.runTask @ zone.js:265drainMicroTaskQueue @ zone.js:491ZoneTask.invoke @ zone.js:435\nzone.js:480 Error: Uncaught (in promise): EXCEPTION: Error in ./AppComponent class AppComponent_Host - inline template:0:0(\u2026)\n. It worked.\nI solved it in this way: import { HttpModule,Http } from '@angular/http';\nand by adding HttpModule to the imports array.\nHttp is still required by \nuseFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\nProbably it is because I am a newbie in angular2 ( I am trying to convert a project written in angular1), but maybe the documentation should be improved a little.\nAll the examples I've found were about passing the option obj to forRoot() and never to the providers array.\nSo, I struggled for several hours and in the end I had to ask for your help.\nAnyway, thank you so much as I was stalled and you solved it pretty quickly ;)\n. I am curious, so I tried both to pass the obj { \n          provide: TranslateLoader,\n          useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n          deps: [Http]\n    } to forRoot()  and totally remove it and use the default location /i18n/*json.\nIt always worked, so all of my problems were generated by the missing of HttpModule\nin import { HttpModule,Http } from '@angular/http'; and into the imports array on my module.\nIt seems it is a dependency, so maybe you can modify the examples  on the readme, by adding HttpModule. At the moment it looks like this and I think it is a bit misleading:\n```\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {NgModule} from '@angular/core';\nimport {TranslateModule} from 'ng2-translate/ng2-translate';\n@NgModule({\n    imports: [\n        BrowserModule,\n        TranslateModule.forRoot()\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n. ",
    "bjornharvold": "Thanks for this! #helpful\n. This was an issue with Typescript 2.7.2. Reverting back to 2.6.2 fixed it.. ",
    "exedor": "I suspect this will be a common theme for module authors. Several have mentioned the \"angular2 way\" of doing things, but I don't see any complete suggestions of that and I just went through the this exercise with the ng2-bootstrap author(s). Initially their suggestion was to update their documentation to let everyone know they had to worry about knowing when to calll .forRoot() again on lazy loaded modules since angular2 doesn't seem to give them the same singleton services, but that's poor design.\nThe right way to do this is to implement the .forChild method in the provided module (e.g. in ng2-translate) and there determine if you have your service setup and instantiated and if not, reinitialize. Then app authors can do everything the angular2 way of calling .forRoot() in the root app module and calling .forChild in the feature modules regardless of whether or not they are lazy loaded and it will \"just work.\"\n. ",
    "neolanders": "Since I didn't found any plunker working with ngx-translate librairy and I also add some difficulties to manage to make it work with LoadChildren,\nI've setup a way that work pretty well for me:\nI've created two SharedModules, (one for lazyLoading and one for the other part of my application)\nSharedLazyModule for lazy loading content:\n@NgModule({\n  imports: [\n    HttpModule,\n    CommonModule,\n    TranslateModule.**forChild**({}),\n  ],\n  exports: [\n    CommonModule,\n    TranslateModule\n  ]\n})\nexport class SharedLazyModule {}\nSahredModule for App\n```\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n   return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n      HttpModule,\n      CommonModule,\n      TranslateModule.forRoot({\n           provide: TranslateLoader,\n           useFactory: HttpLoaderFactory,\n           deps: [Http],\n         })\n    ],\n    exports: [\n      CommonModule,\n      TranslateModule\n    ]\n})\nexport class SharedModule {\n constructor(private translate: TranslateService) {\n\n    translate.addLangs([\"en\", \"fr\"]);\n    translate.setDefaultLang('en');\n\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n}\n\n}\n```\nSee Plunker:\nhttps://plnkr.co/LVmIuI1Xw9vFn0IuC2jW\n. Since I didn't found any plunker working with ngx-translate librairy and I also had some difficulties to manage to make it work with LoadChildren,\nI've setup a way that work pretty well for me:\nI've created two SharedModules, (one for lazyLoading and one for the other part of my application)\nSharedLazyModule for lazy loading content:\n@NgModule({\n  imports: [\n    HttpModule,\n    CommonModule,\n    TranslateModule.**forChild**({}),\n  ],\n  exports: [\n    CommonModule,\n    TranslateModule\n  ]\n})\nexport class SharedLazyModule {}\nSahredModule for App\n```\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n   return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n      HttpModule,\n      CommonModule,\n      TranslateModule.forRoot({\n           provide: TranslateLoader,\n           useFactory: HttpLoaderFactory,\n           deps: [Http],\n         })\n    ],\n    exports: [\n      CommonModule,\n      TranslateModule\n    ]\n})\nexport class SharedModule {\n constructor(private translate: TranslateService) {\n\n    translate.addLangs([\"en\", \"fr\"]);\n    translate.setDefaultLang('en');\n\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n}\n\n}\n```\nSee Plunker:\nhttps://plnkr.co/LVmIuI1Xw9vFn0IuC2jW\n. Hi @dancancro, you are totaly right. The SharedModule could be the appModule or any other CoreModule.\nThe only consern should be to use the \"forRoot\" for your modules imports and in your LazyShared Modules should use the \"forChild\" as per the  style guide.. Since I didn't found any plunker working with ngx-translate librairy and I also had some difficulties to manage to make it work with LoadChildren,\nI've setup a way that work pretty well for me:\nI've created two SharedModules, (one for lazyLoading and one for the other part of my application)\nSharedLazyModule for lazy loading content:\n@NgModule({\n  imports: [\n    HttpModule,\n    CommonModule,\n    TranslateModule.forChild({}),\n  ],\n  exports: [\n    CommonModule,\n    TranslateModule\n  ]\n})\nexport class SharedLazyModule {}\nSahredModule for App\n```\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n   return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n      HttpModule,\n      CommonModule,\n      TranslateModule.forRoot({\n           provide: TranslateLoader,\n           useFactory: HttpLoaderFactory,\n           deps: [Http],\n         })\n    ],\n    exports: [\n      CommonModule,\n      TranslateModule\n    ]\n})\nexport class SharedModule {\n constructor(private translate: TranslateService) {\n\n    translate.addLangs([\"en\", \"fr\"]);\n    translate.setDefaultLang('en');\n\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n}\n\n}\n```\nSee Plunker:\nhttps://plnkr.co/LVmIuI1Xw9vFn0IuC2jW\n. ",
    "bobrosoft": "I was getting \"Error: No provider for t\" during AoT compilation and found out that was happening because I had\nconstructor(\n   translate: TranslateService\n  ) {\nin my component, but in the same time pipes were working. I replaced direct injection of TranslateService with\nconstructor(\n    protected injector: Injector\n  ) {\nand \nngOnInit() {\n    this.injector.get(TranslateService).get(...\nin ngOnInit. Now it's working. I hope that will help to somebody. Still not sure why AoT build not working properly when you injecting directly, I think related to when TranslateService created/provided.. Just run into testing of the component which uses ngx-translate. I don't think it matters for unit tests to have correct translation displayed in the component, you're usually testing functionality, not translation itself (which makes no sense almost and can lead to broken tests over time when translation changes). So using only bare TranslateModule.forRoot() in TestBed imports is pretty fine imho.. I was getting \"Error: No provider for t\" during AoT compilation and found out that was happening because I had\nconstructor(\n   translate: TranslateService\n  ) {\nin my component, but in the same time pipes were working. I replaced direct injection of TranslateService with\nconstructor(\n    protected injector: Injector\n  ) {\nand \nngOnInit() {\n    this.injector.get(TranslateService).get(...\nin ngOnInit. Now it's working. I hope that will help to somebody. Still not sure why AoT build not working properly when you injecting directly, I think related to when TranslateService created/provided.. ",
    "morozenkomv": "Here is my solution\n`@NgModule({\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatIconModule,\n        TranslateModule\n    ],\n    declarations: [LanguageSwitcherComponent],\n    exports: [\n        LanguageSwitcherComponent,\n        TranslateModule\n    ]\n})\nexport class LanguagesModule {\n    static forRoot(): ModuleWithProviders {\n        return {          \n            ngModule: LanguagesModule,\n            providers: [\n                TranslateModule.forRoot({ loader: { provide: TranslateLoader, useClass: LanguageLoader } }).providers\n            ]\n        };\n    };\nstatic forChild(): ModuleWithProviders {\n    return {\n        ngModule: LanguagesModule,\n        providers: [\n            LanguagesService,\n            TranslateModule.forChild({ loader: { provide: TranslateLoader, useClass: LanguageLoader } }).providers\n        ]\n    };\n}\n\n}`. ",
    "AlexKhymenko": "The problem was that you cant specify name like i18n/locale-en.json.\nYou can only specify i18n/en-locale.json\nIt's not a problem for me just want to know why restrict choosing name?\n. Is it possible to natively in configuration file of angular cli merge json files?? For example i have a lot of json files in different directories like locale-en-GB.json and i want to merge them into one locale-en-GB.file. So angular 2 translator can use it.. Also found that this problem i found more frequently with disabled buttons,. ",
    "sathyesh": "Ionic2 uses angular RC4 but ng2-translate uses RC5 till then we have to use lower version(2.2.2) it seems\n. ",
    "dtiru": "Just a clarifying note, its the file loading that is the problem, when entering the translations manually, there is not problem.\ntranslate.setTranslation('en', {\n      \"WELCOME\" : \"Welcome\",\n      \"MYPAGES\" : \"my pages\",\n      \"BOO\": \"Boo\"\n    });\n. Mattes83, i have not had time pursuing this as I didn't find a solution and could continue working on other parts of our application and we now are moving to mock services that are not in the app. It would however be very nice to be able to do both internal and external requests.\n. ",
    "Mattes83": "Can you please elaborate a bit? I also need to get it working. \nHas anyone found a workaround?\n. ",
    "codemental": "Hi,\nI have stumbled upon the same problem and have fixed it by writing my own TranslateLoader like this:\n``` typescript\nexport class TranslateLoaderMock implements TranslateLoader {\nconstructor(private http: Http, private basePath: string) {\n  }\ngetTranslation(lang: string): Observable {\n    const languagePath: string = this.basePath + \"/\" + lang + \".json\";\n    return this.http.get(languagePath)\n      .map(response => response.json().data[0]);//don't forget, it's an array\n  }\n}\n```\nand then using it in my app.module.ts\ntypescript\nimports: [HttpModule,\n    TranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (http: Http) => new TranslateLoaderMock(http, '../i18n'),\n      deps: [Http]\n    }),\n    //HTTP mock for the backend, MUST BE DECLARED AFTER the HttpModule\n    InMemoryWebApiModule.forRoot(InMemoryBackendMock, { delay: 100 }),\nNote: I have also tried \"assets/i18n\" as basePath but that didn't work. I don't know why exactly.\nIn case you were wondering how the InMemoryBackendMock looks like:\n``` typescript\nexport class InMemoryBackendMock implements InMemoryDbService {\n  createDb() {\nlet ro = [{\n  \"HEADER\": {\n    \"ADMIN\": \"Admin\",\n    \"LOGOUT\": \"Logout\"\n  }\n}];\n\nreturn {ro};\n\n}\n}\n```\nro is the language code which I use in the TranslateLoaderMock\n. One thing to note here though. You don't need to create a mock for your translations. You can just set passThruUnknownUrl: true like this:\ntypescript\nInMemoryWebApiModule.forRoot(InMemoryBackendMock, {delay: 100, passThruUnknownUrl: true})\nAnd the requests to get the translations will be allowed to go to the actual server.. ",
    "rbcouture-csiflex": "I'm having a similar problem with MockBackend.\nI have created a shared module for ng2-translate and a fake backend provider as a global component (mockbe.ts).\nAs soon as I add the shared module to another module, all the http requests made by the service of this module are being sent directly over http (thus resulting in 404 error) instead of being captured by my fakebackendprovider.\nI don't understand why I'm having this issue. MockBackend should intercepts all the http requests. The http requests ng2-translate make are intercepted but relayed to XHR since I haven't implemented anything to handle those (which is good), but the other modules aren't intercepted\nI'm also fairly new to Angular so it might be something I have overlooked in my configuration.. thanks, I've just found a way to make it work. I have to add mockbackend as provider to my submodule. Might not be the best way but it works fine with ng2-translate, so it will do the job until the backend is developped. I'm working with the angular2 dashboard provided by akveo (ng2-admin)\nso the project structure goes like this\n-src/\n--|-app/\n-----|-(std app files here)\n-----|-mockbackend.ts\n-----|-shared.module.ts\n-----|-pages/\n---------|-(page module, component...)\n---------|-myfirstpage/\n----------------|-(myfirstpage module, component...)\nshared.ts file contains the ng-2translate module. I import the shared module in myfirstpage module (and everyother module that needs translation service)\nmockbackend.ts is a fake backend provider taken from this example:\nhttp://jasonwatmore.com/post/2016/09/29/angular-2-user-registration-and-login-example-tutorial\nSo all the http requests from any module are handled by this file.\nNow in each page module, I have to import the SharedModule and provide the MockBackend like this:\n`import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgaModule } from '../../theme/nga.module';\nimport { Login } from './login.component';\nimport { routing } from './login.routing';\nimport { SharedModule } from '../../shared/shared.module';\n/////// Mock Http API ///////\nimport { fakeBackendProvider } from '../../mockbe';\nimport { MockBackend, MockConnection } from '@angular/http/testing';\nimport { BaseRequestOptions } from '@angular/http';\n////////////////////////////\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NgaModule,\n    routing,\n    SharedModule\n  ],\n  declarations: [\n    Login\n  ],\n  providers: [\n    /////// MockBackend //////\n    fakeBackendProvider,\n    MockBackend,\n    BaseRequestOptions\n    ////////////////////\n  ]\n})\nexport default class LoginModule { }`. ",
    "gunturi": "alternatively you can do below in you fakeBackend.ts file.. \nif (connection.request.url.indexOf('assets')>-1){\n              connection.mockRespond(new Response(\n                        new ResponseOptions({ status: 200 })\n                    ));\n        }.\n",
    "KevinBulme": "Thanks a lot and sorry !\nEdit: A little precision. When using innerHTML you must not put the curly brackets : \n<div [innerHTML]=\" 'SOME_KEY' | translate \"></div>\n. ",
    "rabr2ro": "Thank you. I have a possible implementation for the problem, but it's in my own service that is a wrapper for the TranslationService. If you want, I can put here the code that I have (is TypeScript), you can take a look and you can refine it and included in the TranslationService implementation. Let me know if you would like to see what I have.\n. Ok. So here it is:\n``` javascript\nprivate set(key: string, value: string): void {\n        let translations: any = (this._translationService).translations[this._translationService.currentLang];\n        let path: string[] = key.split('.');\n        this.setDeepValue(translations, value, path);\n    this._translationService.onTranslationChange.emit(<TranslationChangeEvent>{\n        translations: translations,\n        lang: this._translationService.currentLang\n    });\n}\n\nprivate setDeepValue(obj: any, value: any, path: string[]): void {\n        if (path.length > 1) {\n            let fragment: string = path.shift();\n            if (obj[fragment] == null || typeof obj[fragment] !== 'object') {\n                obj[fragment] = {};\n            }\n            this.setDeepValue(obj[fragment], value, path);\n        } else {\n            obj[path[0]] = value;\n        }\n    }\n```\nwhere this is the instance of my wrapper service, which has TranslationService injected as _translationService member. I had to do a cast to any, so that I can address internal translations member, within the service. setDeepValue it's an adaptation of a function that I found on StackOverflow :)\n. ",
    "StefH": "@ocombe\nAny update on this issue ?. @ocombe \nJust double check about your previous comment: while testing this bug, it seems that for both the pipe and also the directive, you still have to refresh/update the full params object.\nJust updating a property like:\njs\nthis.params.field = 'abc';\nthis.translate.use(this.translate.currentLang);\ndoes not work.\nThe code below seems to work:\njs\nthis.params = { field: 'abc' };\nthis.translate.use(this.translate.currentLang);\n. I will double check the version and my code for bugs. I keep you updated.. @Verurteilt I did check the code and I made a small mistake somewhere.\nThe code below works fine:\nts\nthis.params = { field: 'abc' };\nthis.translate.use(this.translate.currentLang);\n\nHowever, it would be nicer if this method:\nts\nthis.translate.use(this.translate.currentLang);\nwas not required, or maybe create a new method called:\nts\nrefresh();\nwhich refreshes the data. ( @ocombe , is this possible? )\n. I'm using latest 7.0.0\nPersonally I like the refresh() method more because I don't want to update the language, just force a refresh.. I'm trying to use the same:\njs\n{\n    \"Generic\": {\n        \"Hello2\": \"Hello {{value}} !\",\n        \"Hello\": \"Hello {{Generic.World | translate}} !\",\n        \"World\": \"W O R L D\"\n    }\n}\nI tried HTML like (which does not work):\nhtml\n<div translate [translateParams]=\"{value: 'Generic.World | translate'}\">Generic.Hello</div>\nor\nhtml\n<div translate [translateParams]=\"{value: {{Generic.World | translate}}}\">Generic.Hello</div>\nWhich throws this error:\n\nParser Error: Got interpolation ({{}}) where expression was expected at column 8 in [{value: {{Generic.World | translate}}}] . @ocombe \nThen how can I do variable substitution ?\n\nOnly way is via:\n\nThis is how you do it with the pipe:\n\nhtml\n<div>{{ 'HELLO' | translate:param }}</div>\n\nAnd in your component define param like this:\njs\nparam = {value: 'world'};. I'm not 100% sure (I'm also new in using this project), but do you maybe also need to add the TranslateModule to the providers list ?. \n",
    "Mwoagh": "Yes, I would also like this fixed.. ",
    "topikus": "Any update on this issue ?. ",
    "florea-g": "Like this:\nts\n@Component({\n    selector: 'parent-template',\n    template: '\n     <p>{{'Title' | translate}}</p>\n    <child-template></child-template>\n    '\n})\nEverything in child template will be displayed like:\n{{'Exemple' | translate}}--> this is displayed on the view and not the traduction\n. Something like this : \nhtml\n        <div class=\"ui-grid-row\">\n            <div class=\"ui-grid-col-4\">\n                <label for=\"Name\">{{ 'MANAGE-BROKER.CoWorkerName' | translate }}</label>\n            </div>\n            <div class=\"ui-grid-col-8\">\n                <input pInputText name=\"Name\" [(ngModel)]=\"newBrokercoworker.Name\" />\n            </div>\n        </div>\n. Yes that is correct.\nI will try to make a plunker :)\n. Here is the plunker:\nplunker\nApparently it works. I don't know whi it doesn't work for me maybe because i use template url.s or becase i am deelaying the component construct because some variables are not initialized. I don't know :(\n. ",
    "dhardtke": "I forked your plunker to reflect changes that are close to my configuration of angular 2 rc.6 and ng2-translate:\nhttp://plnkr.co/edit/FLxhvZUH2jfvHr4ZAoga?p=preview\nAs you can see, the translations are not being loaded / applied in home.component.ts whereas if I put the constructor's code inside the HomeComponent everything works fine.\nThis is not practical since I have ng2-translate's initialization code inside my AppComponent and therefore I think it's a bug.\n. https://github.com/ocombe/ng2-translate/issues/217 is probably related to this. I have a similar setup and it's not working in lazy-loaded sub modules.\n. Well, first of all, thanks for having a look at this, but I noticed this does not completely fix the problem.\nWhat it does fix is that no strings will be translated at all. What it doesn't fix is changing the language (using translate.use(...)) by calling that method in a non-lazy-loaded module won't translate / update any strings in the lazy-loaded module.\nEDIT:\nit works, if you only have one TranslateService used by making the translate property in your SharedModule static. But that is no good option (considering unit testing for example, and it leads to tight coupling).\ntypescript\nexport class SharedModule {\n    public static translate;\n    constructor(translate: TranslateService) {\n        SharedModule.translate = translate;\n        // ...code from above\n    }\n}\ntypescript\nexport class NavbarComponent {\n    private switchLang(lang: string): void {\n        // this.translate.use(lang);\n        SharedModule.translate.use(lang);\n    }\n}\nCould you please have a look at this again? Thank you.\n. Yep, SamVerschueren's proposed solution works perfectly for me.\n. @MadDeveloper: Why did you remove your comment?\nYou were right, this is a duplicate of https://github.com/ocombe/ng2-translate/issues/251 and the proposed fix works.\n. Try to set config.paths in your SystemJS config to this object:\njavascript\npaths:    {\n    \"ng2-translate/ng2-translate\": \"node_modules/ng2-translate/bundles/ng2-translate.js\"\n    }\nSee https://github.com/ocombe/ng2-translate/issues/251\n. You have to listen to onLangChange, see https://github.com/ocombe/ng2-translate#properties to implement a function that listens to whenever the language changes. Especially pay notice to the second property, translations, of the LangChangeEvent, which contains the translations for the new language.\n. We are still having this issue in our app, even though we are running the latest (stable) Angular and ngx-translate version. If I comment out \"setDefaultLang()\" everything is fine, though.. I believe ngx-translate is broken in regards to its \"Lazy loading feature\" and since ocombe is now part of the Angular core team, it will probably never get fixed.\nMost likely, people will have to switch to Angular's i18n functionality once it becomes more rich in regards to its features.. https://github.com/ngx-translate/core/issues/397#issuecomment-275368243. Probably related to #425?. Might be the same issue that I have: https://github.com/ngx-translate/core/issues/425?. Works fine for me with Angular 4.0.1 and ngx-translate 6.0.1 in conjunction with the http-loader.\nCan you post parts of your code, i.e. your modules?. ",
    "bmurali31": "Any updates on this? \n. I still cannot use TranslateModule.forRoot()  with AOT compiler (ngc). Keep getting \"Error encountered resolving symbol values statically\".\nAny help here would be greatly appreciated.\n. ",
    "benjamincombes": "Same issue for me, I keep getting this error even with version 2.5.0 and angular 2.0.0 on macOS.\n. ",
    "frederikschubert": "I tried simplifying the forRoot method but did not have any success yet.\nExamples for working forRoot methods are here and here.\n. Yes it is weird but others have found similar problems/solutions for the AOT compiler.\n. Duplicate of https://github.com/ocombe/ng2-translate/issues/218\n. ",
    "alexeagle": "@robwormard is planning to write docs. Correct that you need to publish\n*.{js,metadata.json,d.ts,js,map} tuples, and also add some integration\ntesting that an app with AoT can actually consume the library.\nFor the latter we are cheating right now, ng2-material should test this on\ntheir own travis, but instead we have a test on angular/angular that npm\ninstall's the material-button and asserts that the example app can be AoT\ncompiled.\nI think angular-team could do more to help the CI story, like give a\nservice that tests components and provides a badge to add on your page.\nDon't think anyone has time to work on that though, maybe we need a\ncommunity contrib.\n. ",
    "isaacplmann": "I wrote up an article with steps to add *.metadata.json files to your library.  I agree that documentation is lacking, and most library authors have no idea this is required.\n. I've written another article that goes through solutions to some of the errors (including the Function calls are not supported error) I've run into updating libraries to be AoT compatible.\n. ",
    "peterpeterparker": "Actually @SamVerschueren, if @ocombe could take a look to that problem that would be much great. If I understand correctly that there is no solution to use ng2-translate with AoT, all people who migrated to Ionic 2 RC since yesterday and who are using ng2-translate are blocked because of that issue :(\n. that's why I wrote \"would be much great\" \n. Work like a charm in Ionic 2 RC.0!\nThx @ocombe <3\n. @apreg @TdyP I noticed that in your example you have a './' before 'assests/i18n' in your function declaration. Don't know if you gonna face the same problem as I did, but in my case, because I had '/' before 'assests/i18n', the translation weren't load on my device when I was running my app 'irl'. \nSo in my case to fix that, the function look like this:\nexport function translateLoaderFactory(http: any) {\n    return new TranslateStaticLoader(http, 'assets/i18n', '.json');\n}\n. @NoNameProvided well then at least not in my case. Was just writing that down because I lost hours just for a point ;)\n. @apreg coolio :) as I say, just wrote it down in case someone face the same issue as I did.\n. @barocsi \n1. Add a ./ before assets (at least in my case it was the way to fix the path)\nexport function exportTranslateStaticLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n\n\nRemove () around createTranslateLoader in your imports section, in my case this work with the code above\n\nTranslateModule.forRoot(\n           {\n               provide: TranslateLoader,\n               useFactory: exportTranslateStaticLoader,\n               deps: [Http]\n           }\n       ),\n. just installed version 3.2.1 with my above code works fine for me (same angular version, ionic 2 rc.2 not 3)\n. could give you a feed in a couple of days when after I'll upgrade to RC.3, but don't think that could be the problem since the angular version doesn't changed\n. Got it, in app.module.ts I should inject HttpClient instead of Http (would be cool to update the README about AoT):\n imports: [\n     HttpClientModule,\n     TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: exportTranslateStaticLoader,\n      deps: [HttpClient]\n    }\n  }\n   )\n \u00a0]. @crebuh I was having the same issue for a while and I finally decided to init ngx-translate differently on both sides, client and server. I'm honestly really not sure if it is correct or not, sounds even a bit incorrect for me but I don't know, therefore I opened following issue:\n\nhttps://github.com/ngx-translate/core/issues/625\nIn this one you will also find a piece of code which helped me to solve, at least temporarily this issue, hope it gonna helps you.\nNote: For me this worked but on a full refresh I still see like a really fast glitch, the text is displayed, a nanosecond nothing is displayed, and then the text is displayed again. @crebuh yes me too, had to remove the TranslateModule.forChild() in the browser.app-module.ts...still don't understand why. I had a look to the app of @premiumwd  where both ngx-translate and angular universal and it looks like that he's initializing ngx-translate on both side\nhttps://github.com/premiumwd/d/blob/master/src/app/app.component.ts. After much thinking about it I think that ngx-translate should be initialized on both side for the simple reason that this let me offer users a dynamic language change on the client side without having to query the server to rebuild the page. for the record, after much much thinking, I should definitely load the translations on the server and browser side, see https://github.com/ngx-translate/core/issues/754 for my solution with loaders. @ocombe you are definitely right, it's way more clean to use custom loaders on both side with the help of transfer-state and http as fallback than my first solution. I have now implemented it and even deployed it in production and it still works like a charm!\nTo reflect this, I have updated all my posts, solution and shared the code of the loaders in https://github.com/ngx-translate/core/issues/754\nthx for your amazing help and support. \nHave a merry Christmas \ud83c\udf84. Should really the translation be passed from the server side to the frontend?\nI thought a bit about it and finally I think it's kind of good to initialize ngx-translate on the client side too. My website is available in four languages and this let me offer my users a dynamic language change/switch without having to query the server, you know what I mean?\n(I opened/closed an issue about this subject https://github.com/ngx-translate/core/issues/625)\nI did the same as you for the server side, furthermore I added a \"standard\" loader in app.module.ts\nLike:\n export function exportTranslateStaticLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './i18n/', '.json');\n}\n...\nimports: [\n    ...\n    ,\n TranslateModule.forRoot({\n     loader: {\n       provide: TranslateLoader,\n       useFactory: exportTranslateStaticLoader,\n       deps: [HttpClient]\n     }\n   }\n ),\n ..... @crebuh cool, good to hear we are on the same page and that you a find a solution which suits you\n\nI just would like to add a notice to your solution. Actually transfer-state add the json content inside the rendered html page. If you have multiple translation files with a lot of translations key, the side effect could be that the html kind of gonna be heavy, maybe that could be a problem in some special situations?. I'm wrong. This size is the size before treeshaking and all other improvements using a --prod build would bring. I compared the size of the vendor.js v8.0.0 vs v9.0.1, it look like it only gained 18kb\n  ionic cordova build ios --prod\n  cd www/build\n  ls -ltr vendor.js\n\nv.8.0.0\n 895408  1 d\u00e9c 07:25 vendor.js\n\nv9.0.1\n  914290  1 d\u00e9c 07:32 vendor.js\n\nI could live with that ;)\n. @ocombe thx for the feedback, understood. \nlike I said, once I had run the build with all option, the size difference wasn't that significant anymore, therefore I closed the issue. Sorry for having open it in the first place and thx again for the great library!. thx a lot @ocombe for the explanation and answer, merci beaucoup\nI have now implemented TransferHttpCacheModule (I should have done it earlier, I was still using the \"old\" transfer-state module). Looks a bit better (glitch is maybe faster) but still glitchy ;)\nDo you know if there is an issue/feature request about state transfer and rehydratation I would be able to follow?\nEven if it's not a ngx-translate issue, is it ok if I let the issue open till solved (it may interest other persons)?. @ocombe yep, exactly, I am now implementing the the state transfer too ;)\nIt's also a bit glitchy (see for example https://fluster.io/item/3P5KpjA7PMSyM73MvnBM) but don't know if it's related to the dom hydration too, let's see\nthx for pointing the issue, I gonna follow it. if you've got other idea regarding this subject, I won't be against of course \ud83d\ude09\net joyeux No\u00ebl \ud83c\udf84\ud83d\ude03. I confirm that it works now like a charm, therefore I gonna summarized here the solution and close my issue.\nPRECONDITION\nThis issue applies if you are using angular universal to build a multilanguage website and if you are facing a glitch while the app is rendered in the browser. \nThe source of the problem is that actually state transfer doesn't implement yet DOM rehydration (see https://github.com/angular/angular/issues/13446).\nTo solve this or to bypass this problem, the solution is to load and use ngx-translate on both server and browser side with custom loaders. The idea is to load the translations on the server side and to pass them to the browser side within the help of the transfer-state.\nHOW TO\n\n\nCache your http request within the use of TransferHttpCacheModule https://github.com/angular/universal/tree/master/modules/common\n\n\nUse transfer-state to pass data from your server to your browser https://angular.io/api/platform-browser/TransferState\n\n\nCreate a loader for the server side translate-server-loader.service.ts\nimport {Observable} from \"rxjs/Observable\";\nimport {TranslateLoader} from '@ngx-translate/core';\n\n declare var require: any;\n import {join} from 'path';\n import {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\n\n const fs = require('fs');\n\n export class TranslateServerLoader implements TranslateLoader {\n\n   constructor(private prefix: string = 'i18n',\n               private suffix: string = '.json',\n               private transferState: TransferState) {\n   }\n\n   public getTranslation(lang: string): Observable<any> {\n\n     return Observable.create(observer => {\n       const assets_folder = join(process.cwd(), 'dist', 'server', this.prefix);\n\n       const jsonData = JSON.parse(fs.readFileSync(`${assets_folder}/${lang}${this.suffix}`, 'utf8'));\n\n       // Here we save the translations in the transfer-state\n       const key: StateKey<number> = makeStateKey<number>('transfer-translate-' + lang);\n       this.transferState.set(key, jsonData);\n\n       observer.next(jsonData);\n       observer.complete();\n     });\n   }\n }\n\n\n\nUse the server loader in your app.server.module.ts\nexport function translateFactory(transferState: TransferState) {\n  return new TranslateServerLoader('/assets/i18n', '.json', transferState);\n}\n\nTranslateModule.forRoot({\n  loader: {\n    provide: TranslateLoader,\n    useFactory: translateFactory,\n    deps: [TransferState]\n  }\n})\n\n\n\nCreate a loader for the browser side translate-browser-loader.service.ts\nimport {Observable} from \"rxjs/Observable\";\nimport {TranslateLoader} from '@ngx-translate/core';\n\nimport {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {HttpClient} from '@angular/common/http';\n\nexport class TranslateBrowserLoader implements TranslateLoader {\n\n  constructor(private prefix: string = 'i18n',\n              private suffix: string = '.json',\n              private transferState: TransferState,\n              private http: HttpClient) {\n\n  }\n\n  public getTranslation(lang: string): Observable<any> {\n\n    const key: StateKey<number> = makeStateKey<number>('transfer-translate-' + lang);\n    const data = this.transferState.get(key, null);\n\n    // First we are looking for the translations in transfer-state, if none found, http load as fallback\n    if (data) {\n      return Observable.create(observer => {\n        observer.next(data);\n        observer.complete();\n      });\n    } else {\n      return new TranslateHttpLoader(this.http, this.prefix, this.suffix).getTranslation(lang);\n    }\n  }\n}\n\n\n\nUse the server loader in your app.browser.module.ts\nexport function exportTranslateStaticLoader(http: HttpClient, transferState: TransferState) {\n   return new TranslateBrowserLoader('/assets/i18n/', '.json', transferState, http);\n}\n\nTranslateModule.forChild({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: exportTranslateStaticLoader,\n      deps: [HttpClient, TransferState]\n    }\n  }\n)\n\n\n\nI've now deployed this solution in production, if you want to have a look, https://fluster.io\nI really would like to thank you @ocombe for your support, I'm so happy, this is so neat without glitch, you are really awesome \ud83d\udc4d. @stephanegg sure I will, just tell me, which config are you interested in? package.json or tsconfig.json or somehing else?. @stephanegg about repo, no magic, I'm just up-to-date with angular universal starter app repo https://github.com/angular/universal-starter\nabout the files, package.json\n \"dependencies\": {\n  ....\n \"@angular/animations\": \"^5.1.1\",\n \"@angular/cdk\": \"^5.0.1\",\n \"@angular/common\": \"^5.1.1\",\n \"@angular/compiler\": \"^5.1.1\",\n  \"@angular/core\": \"^5.1.1\",\n \"@angular/forms\": \"^5.1.1\",\n \"@angular/http\": \"^5.1.1\",\n \"@angular/material\": \"^5.0.1\",\n \"@angular/platform-browser\": \"^5.1.1\",\n \"@angular/platform-browser-dynamic\": \"^5.1.1\",\n \"@angular/platform-server\": \"^5.1.1\",\n \"@angular/router\": \"^5.1.1\",\n \"@nguniversal/common\": \"^5.0.0-beta.5\",\n \"@nguniversal/express-engine\": \"^5.0.0-beta.5\",\n \"@nguniversal/module-map-ngfactory-loader\": \"^5.0.0-beta.5\",\n \"@ngx-translate/core\": \"^9.0.2\",\n \"@ngx-translate/http-loader\": \"^2.0.0\",\n .... \n    \"rxjs\": \"^5.5.5\",\n \"serialize-javascript\": \"^1.4.0\",\n  ...\n \"zone.js\": \"^0.8.18\"\n   },\n   \"devDependencies\": {\n \"@angular/cli\": \"^1.6.1\",\n \"@angular/compiler-cli\": \"^5.1.1\",\n \"@angular/language-service\": \"^5.1.1\",\n \"@types/node\": \"^8.5.1\",\n \"cpy-cli\": \"^1.0.1\",\n \"http-server\": \"^0.10.0\",\n \"reflect-metadata\": \"^0.1.10\",\n \"ts-loader\": \"^3.2.0\",\n \"typescript\": \"^2.6.2\"\n ...\n  }\n\ntsconfig.json\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"outDir\": \"./dist/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"node_modules/@types\"\n    ],\n    \"lib\": [\n      \"es2017\",\n      \"dom\"\n    ]\n  }\n}\n\ntsconfig.app.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../out-tsc/app\",\n    \"baseUrl\": \"./\",\n    \"module\": \"es2015\"\n  },\n  \"exclude\": [\n    \"test.ts\",\n    \"**/*.spec.ts\"\n  ]\n}\n\ntsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../out-tsc/app\",\n    \"baseUrl\": \"./\",\n    // Set the module format to \"commonjs\":\n    \"module\": \"commonjs\"\n  },\n  \"exclude\": [\n    \"test.ts\",\n    \"**/*.spec.ts\"\n  ],\n  // Add \"angularCompilerOptions\" with the AppServerModule you wrote\n  // set as the \"entryModule\".\n  \"angularCompilerOptions\": {\n    \"entryModule\": \"app/app.server.module#AppServerModule\"\n  }\n}\n\nno webpack.config.js but webpack.server.config.js, same as the above mentioned repo\nI hope this help\n. cool @xrobert35 I'm agree with you, it's easier to have only one loader, more handy.\nBut, regarding my original issue, something doesn't work with your code, it doesn't handle the case where the user load the app in a language and decide to change it afterwards dynamically.\nTherefore I have made a small enhancement to your code:\nimport {isPlatformServer} from '@angular/common';\nimport {makeStateKey, StateKey, TransferState} from '@angular/platform-browser'\nimport {HttpClient} from '@angular/common/http';\n\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\n\nimport {Observable} from \"rxjs/Observable\";\n\ndeclare var require: any;\nconst fs = require('fs');\n\nimport {join} from \"path\";\n\nexport function translateFactory(transferState: TransferState, http: HttpClient, plateformId: object) {\n  return new TranslateUniversalLoader(isPlatformServer(plateformId), '/assets/i18n/', '.json', transferState, http);\n}\n\nexport class TranslateUniversalLoader implements TranslateLoader {\n\n  constructor(private isServer: boolean,\n          private prefix: string = 'i18n',\n          private suffix: string = '.json',\n          private transferState: TransferState,\n          private http: HttpClient) {\n  }\n\n  public getTranslation(lang: string): Observable<any> {\n    const key: StateKey<number> = makeStateKey<number>('transfer-translate-' + lang);\n\n    const data = this.transferState.get(key, null);\n\n    if (!data && !this.isServer) {\n      return new TranslateHttpLoader(this.http, this.prefix, this.suffix).getTranslation(lang);\n    } else {\n      return Observable.create(observer => {\n        if (this.isServer) {\n          const assets_folder = join(process.cwd(), 'dist', 'server', this.prefix);\n\n          const jsonData = JSON.parse(fs.readFileSync(`${assets_folder}${lang}${this.suffix}`, 'utf8'));\n\n          this.transferState.set(key, jsonData);\n        }\n\n        observer.next(this.transferState.get(key, null));\n        observer.complete();\n      });\n    }\n  }\n}\n\n. Related to this issue but not to ngx-translate. If like me you notice that your lazy loaded modules in your angular universal app are still glitchy even after having fix your ngx-translate loaders, you might need to add a configuration option { initialNavigation: 'enabled' } to your RouterModule.forRoot\nReference: https://github.com/angular/angular/issues/15716 see the @Owain94 awesome answer. @xrobert35 well, what you describe was my prior solution but I've to say I rather like the current one, a way more user friendly behavior, in my point of view at least\nbut we don't have to be agree, both solution are cool ;)\n. @ceaguilera are you using Angular v5 and ngx-translate v10?\nIf yes, maybe it's the same problem as described in the README of https://github.com/ngx-translate/core. It turns out that the solution I described above isn't compatible with Angular v6 anymore because fs will not be recognize and allowed at compilation time by webpack. Furthermore, since the webpack config couldn't be ejected anymore, there is no way to tell webpack to ignore fs and path\nAnyway, the solution described above by @xuhcc do works like a charm with Angular v6, kudos!\nIt looks like the following then:\n\n\ntranslate-universal-loader.service.ts\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, of} from 'rxjs';\nimport * as translationEn from 'assets/i18n/en.json';\n   import * as translationFr from 'assets/i18n/fr.json';\n   import * as translationDe from 'assets/i18n/de.json';\n   import * as translationIt from 'assets/i18n/it.json';\nconst TRANSLATIONS = {\n     en: translationEn,\n     fr: translationFr,\n     de: translationDe,\n     it: translationIt\n   };\nexport class TranslateUniversalLoader implements TranslateLoader {\n constructor() {\n }\n\n public getTranslation(lang: string): Observable<any> {\n   return of(TRANSLATIONS[lang]);\n }\n}\n\n export function translateFactory() {\n   return new TranslateUniversalLoader();\n }\n\n\n\nmodify the load which call translateFactory to reflect the changes\nloader: {\n  provide: TranslateLoader,\n  useFactory: translateFactory\n}\n\n\n\ncreate a new file called typings.d.ts under src:\n declare module '*.json' {\n   const value: any;\n   export default value;\n }\n\n\n\nin ./tsconfig.json modify typeRoots\n\"typeRoots\": [\n         \"node_modules/@types\", \"./src/typings.d.ts\"\n       ]\n\n\nIMPORTANT NOTE It looks like the assets aren't copied anymore on the server side. In angular.json, the config angular-devkit/build-angular:server even doesn't support assets right now. Therefore you will have to copy your assets language files manually to dist folder. Most probably a duplicate solved in https://github.com/ngx-translate/core/issues/754 \nAlso look at my last post, easier to solve with one loader than with multiple\n. First of all, thx @ocombe for your library and amazing work. I use ngx-translate in every single frontend development project I do, one of the first dependency I inject ;)\nFurthermore to the simplicity of implementation, I use ngx-translate because supporting multi-languages is a must for all my projects. \nMy major concern, because my main app is a Ionic/Cordova app, is having the abilility to have only one bundle and to boot the app in the right language. If that would be possible in the future with i18n, well I might be open to the idea to migrate to it . If that will not be possible, there is no way that I gonna migrate to i18n, I can't boot for example an app in english, then switch to french and restart the mobile app, that would be a crazy user behavior.\nAbout your question itself, I'm not a big company, just a single developper, so I could not tells you if they would be or not be open to a licence fee.\nBut maybe a third option, just throwing that idea out of loud, to the two you listed above would be a donation model or even maybe better to start a kickstarter? Like \"I need xx'xxx euros for the next x years in which I gonna implement these and these features and perform support and bug fixes etc.\". . @ocombe not all heroes wear capes, merci \u2764\ufe0f. @mischkl maybe you will find some inspirations in the following topic for your glitch -> https://github.com/ngx-translate/core/issues/754. @mischkl even my very last post in the topic where json are imported without http loader? . @mischkl makes sense, good luck. thx @gerardcarbo, your solution worked for me too\nif that could help someone else, if you load many languages, like me fr/de/it/en, you have to do the tricks for each of your languages\nFor example:\n```\n    this.translateService.addLangs(['en', 'de', 'fr', 'it']);\n    this.translateService.setDefaultLang('en');\nthis.translateService.setTranslation('en', translationEn.default);\nthis.translateService.setTranslation('fr', translationFr.default);\nthis.translateService.setTranslation('it', translationIt.default);\nthis.translateService.setTranslation('de', translationDe.default);\n\n```. ",
    "krizroring": "I got it working last night. I am using it in an Ionic 2 RC0 project, so i don't know if it will work for everybody.\n1  I build the plugin using the steps described in this article by @isaacplmann \n2  I copied the over the newly generated files over the original files from the NPM repo in my project\n3  I added the following to the to the /node_modules/@ionic/app-scripts/config/rollup.config.js\njavascript\ncommonjs({\n        namedExports: {\n            'node_modules/ng2-translate/ng2-translate.js': [ 'TranslatePipe', 'TranslateLoader', 'TranslateStaticLoader', 'TranslateService' ]\n        }\n    })\nThis was the suggestion of peelfresh on the ionic forum\n4  I added the following code to the @ngModule:\njavascript\n export function translateLoaderFactory(http: any) {\n    return new TranslateStaticLoader(http, 'assets/i18n', '.json');\n}\nimport section: \njavascript\nTranslateModule.forRoot(\n        {\n            provide: TranslateLoader,\n            useFactory: translateLoaderFactory,\n            deps: [Http]\n        }\n    )\n5  For the import statements i used: \njavascript\nimport {TranslateModule} from \"ng2-translate/ng2-translate\";\nimport {TranslateService, TranslateLoader, TranslateStaticLoader} from \"ng2-translate/src/translate.service\";\nI hope this makes sense, because it was a very long day yesterday to get it sort of working\n. I tested it in an Ionic ios app, and mu solution worked. Could be that i\ndid some more thing to get it working, but like i said, it was very late :)\nOn Friday, 30 September 2016, flolovebit notifications@github.com wrote:\n\n@krizroring https://github.com/krizroring this solution works fine in\nbrowser but if you try build a platform app, the compilation fails. In my\napp I use only two languages and I made a easy workaround : I created a\n@Pipe https://github.com/Pipe with same name of @ocombe\nhttps://github.com/ocombe lib when I use a JSON file like a static var.\nIn the future I will have to change the include lib with the new release\nwithout modify the html template\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/218#issuecomment-250700405,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEH4BLwlXQYV4db8sh8XvfPFQK8HcRJeks5qvNXTgaJpZM4Jx_qT\n.\n. \n",
    "flolovebit": "@krizroring  this solution works fine in browser but if you try build  a platform app,  the compilation fails.  In my app   I use only two languages and I made a easy workaround : I created a @Pipe with same name of  @ocombe lib  where I use a JSON file like a static var.  In the future  I will have to change the include lib with the new release without modify the  html template\n. ",
    "chrisbenseler": "@flolovebit could you explain me how to create this pipe, so I can build my app without having to rewrite all my templates, while the ng2-translate does not work with the ionic2' rc?\n. Here it's working fine with 3.0.0 and Ionic 2 rc 0 :-)\n. @ocombe thanks, I didn't know there is an get method. Changed my code, works perfect!. ",
    "tuarrep": "The just pulled version (3.0.0) fix AoT problem for me :tada: \n. @apreg You're right! \n@TdyP It's not a bug from ng2-translate it self, and it's not a bug anymore.\nAngular 2 need to have reference to this function when compiling it. See here (https://github.com/angular/angular/issues/10789#issuecomment-242220591)\n. Sure\n. ",
    "TdyP": "I'm still having issues to get this working in Ionic 2 RC.0.\nI've started over from a fresh app to try to figure it out, but no success.\nI'm using ng2-translate v3.0.0.\nHere's my app.module.ts :\n```\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport { NgModule } from '@angular/core';\nimport {HttpModule} from '@angular/http';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport {TranslateModule} from 'ng2-translate/ng2-translate';\nimport { MyApp } from './app.component';\nimport { AboutPage } from '../pages/about/about';\nimport { ContactPage } from '../pages/contact/contact';\nimport { HomePage } from '../pages/home/home';\nimport { TabsPage } from '../pages/tabs/tabs';\n@NgModule({\n  declarations: [\n    MyApp,\n    AboutPage,\n    ContactPage,\n    HomePage,\n    TabsPage\n  ],\n  imports: [\n    IonicModule.forRoot(MyApp),\n    BrowserModule,\n    HttpModule,\n    TranslateModule.forRoot()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    AboutPage,\n    ContactPage,\n    HomePage,\n    TabsPage\n  ],\n  providers: []\n})\nexport class AppModule {}\n```\napp.component.ts: \n```\nimport { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from 'ionic-native';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\nimport { TabsPage } from '../pages/tabs/tabs';\n@Component({\n  template: <ion-nav [root]=\"rootPage\"></ion-nav>\n})\nexport class MyApp {\n  rootPage = TabsPage;\nconstructor(platform: Platform, translate: TranslateService) {\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n // the lang to use, if the lang isn't available, it will use the current loader to get them\ntranslate.use('en');\n\nplatform.ready().then(() => {\n  // Okay, so the platform is ready and our plugins are available.\n  // Here you can do any higher level native things you might need.\n  StatusBar.styleDefault();\n});\n\n}\n}\n```\nI'm not using ng2-translate anywhere else in my code at the moment.\nHere's the error I have at compilation (ionic run android):\n[12:22:26]  ngc error: Error: Error at /media/data/dev/myApp/.tmp/app/app.module.ngfactory.ts:96:27: Cannot find module '../../src/translate.service'.\nError at /media/data/dev/myApp/.tmp/app/app.module.ngfactory.ts:397:94: Property 'translateLoaderFactory' does not exist on type 'typeof \"/media/data/dev/myApp/.tmp/app/app.module\"'.\n    at check (/media/data/dev/myApp/node_modules/@angular/tsc-wrapped/src/tsc.js:31:15)\n    at Tsc.typeCheck (/media/data/dev/myApp/node_modules/@angular/tsc-wrapped/src/tsc.js:86:9)\n    at /media/data/dev/myApp/node_modules/@angular/tsc-wrapped/src/main.js:33:23\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n    at Function.Module.runMain (module.js:577:11)\n    at startup (node.js:160:18)\n    at node.js:456:3\nI don't see what I'm missing.\nAny Ionic user who could help me out? \nThanks guys!\n. It works like a charm with the exported function, thanks you very much guys! :)\n. ",
    "apreg": "@TdyP I think it is a bug but you can workaround it by defining translateLoaderFactory. This worked for me:\n```\nimport {TranslateModule, TranslateStaticLoader} from \"ng2-translate/ng2-translate\";\nimport {TranslateLoader} from \"ng2-translate\";\nexport function translateLoaderFactory(http: any) {\n  return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n@NgModule({\nimports: [\n    IonicModule.forRoot(MyApp),\n    HttpModule,\n    TranslateModule.forRoot({\n    provide: TranslateLoader,\n       useFactory: translateLoaderFactory,\n       deps: [Http]\n   }),\n```\nIf you change './assets/i18n' to './i18n' you should get the default behaviour I guess. \n. > If you use /assets/i18n it will try to load the language files from the root of your app space.\nThat's what I experienced so I played with the uri till it worked and this was the result.\n. I did not mean it offensive or something don't get me wrong :D\n. Thank you for the workaround. It works in the browser with ionic serve but I  cannot deploy it to a device because angular compiler complains. It does not say too much about the real cause just: \nngc error: Error: Error at lia2/.tmp/app/main.prod.ts:4:36: Cannot find module './app.module.ngfactory'.\nso I run it directly this way: $ \"./node_modules/.bin/ngc.cmd\" and got \nError at lia2/src/app/app.module.ts:16:10: Module ''ng2-translate/ng2-translate'' has no exported member 'TranslateModule'.\n. ",
    "barocsi": "Terribly sorry but \n```\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, 'assets/i18n', '.json');\n}\n@NgModule({\n  imports: [\n    TranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    })\n  ]\n})\n```\nstill yields\nError: Error encountered resolving symbol values statically. Function calls are not supported. Consider\n            replacing the function or lambda with a reference to an exported function (position 72:25 in the original\n            .ts file), resolving symbol AppModule in /app/.tmp/app/app.module.ts\n[19:53:05]  ngc failed\n[19:53:05]  ionic-app-script task: \"build\"\n[19:53:05]  Error: Error\npackage json excerpt:\n\"dependencies\": {\n    \"@angular/common\": \"2.1.1\",\n    \"@angular/compiler\": \"2.1.1\",\n    \"@angular/compiler-cli\": \"2.1.1\",\n    \"@angular/core\": \"2.1.1\",\n    \"@angular/forms\": \"2.1.1\",\n    \"@angular/http\": \"2.1.1\",\n    \"@angular/platform-browser\": \"2.1.1\",\n    \"@angular/platform-browser-dynamic\": \"2.1.1\",\n    \"@angular/platform-server\": \"2.1.1\",\n    \"@ionic/storage\": \"1.1.6\",\n    \"@types/async\": \"^2.0.32\",\n    \"@types/lodash\": \"^4.14.38\",\n    \"@types/underscore\": \"^1.7.33\",\n    \"angular2-jwt\": \"^0.1.25\",\n    \"async\": \"^2.1.2\",\n    \"ionic-angular\": \"2.0.0-rc.3\",\n    \"ionic-native\": \"2.2.3\",\n    \"ionicons\": \"3.0.0\",\n    \"lodash\": \"^4.16.6\",\n    \"ng2-translate\": \"^3.1.3\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"shortid\": \"^2.2.6\",\n    \"underscore\": \"^1.8.3\",\n    \"zone.js\": \"^0.6.26\"\n  },\n  \"devDependencies\": {\n    \"@ionic/app-scripts\": \"^0.0.45\",\n    \"@types/core-js\": \"^0.9.34\",\n    \"@types/shortid\": \"0.0.28\",\n    \"@types/underscore\": \"^1.7.33\",\n    \"shortid\": \"^2.2.6\",\n    \"typescript\": \"2.0.6\",\n    \"underscore\": \"^1.8.3\",\n    \"uuid\": \"^2.0.3\"\n  },\n. no luck :(\n. I am using rc.3 and downgrading is not an option unfortunately\n. It works, thanks. Figured out there were another lambda function within the app.module.ts. @ocombe what was your resolution?\n. Very nice, thanks!\n. +1\n. Thanks, that would work!\nMaking translation available should be dealt with during initialization of the app by the developer.\n. ",
    "Je06610": "Hello\nI'am using angular CLI, i'am able to compile in AOT but when i want to access the web site i have a 404 error like this one:\nzone.js:1561 GET http://localhost/app/membership/i18n/en.json 404 (Not Found)\nIs it because i don't put my translation files into assets ?\nThank you for your feedback\n. @SamVerschueren\nThank you for your advice.\nThe path is correct, it works perfectly without AOT but i don't use the standard path.(assets...)\nI have a i18n folder for each module of my application and i think you are right the files are not copied but i don't know why.... ",
    "VesperDev": "Thanks so much. work very fine. ",
    "dawud-do": "Unsure if it's related but I'm getting \n26 10 2016 08:59:33.116:WARN [web-server]: 404: /base/node_modules/ng2-translate.js\n  26 10 2016 08:59:33.162:WARN [web-server]: 404: /base/node_modules/lodash.js\n  PhantomJS 2.1.1 (Windows 7 0.0.0) ERROR: '(SystemJS) XHR error (404 Not Found) loading http://localhost:9876/base/node_modules/ng2-translate.js\nWhen I run karma test. Those files don't even exist in my node_module directory (under that path) . my app.component.ts imports from ng2-translate.\nAny idea?\n. Adding it to my karma config file doesn't work. This is based off of angular2 seed for what it's worth. If my app.component.ts is importing from ng2-translate (and that's the standard) why would it be looking for non existent files? \n. I get \n26 10 2016 09:14:50.238:WARN [web-server]: 404: /base/node_modules/ng2-translate.js\n 26 10 2016 09:14:50.286:WARN [web-server]: 404: /base/node_modules/lodash.js\n PhantomJS 2.1.1 (Windows 7 0.0.0) ERROR: '(SystemJS) XHR error (404 Not Found) loading http://localhost:9876/base/node_modules/ng2-translate.js\n    Error loading http://localhost:9876/base/node_modules/ng2-translate.js as \"ng2-translate\" from http://localhost:9876/base/dist/dev/app/app.component.js'\nwhen running karma test of an angular2 seed base. the suggestions in here haven't been working for me. for instance if I include path to bundles in my config.ts I just get a new error saying it can't find that. \nmy karma baseURL is set to /base/ and my app.component.ts imports from 'ng2-translate'\nany clue where I might want to look?\n. ",
    "Cuel": "Same here, using webpack.\nThe problem (translate.pipe.js)\nvar lang_1 = require(\"@angular/core/src/facade/lang\");\nIt just takes the content and doesn't transpile it with TS\nAngular-team has said not to import 'deep' internal stuff, only top-level.\n. Thanks, missed that in npm outdated. Guessing OP has the same problem.\n. ",
    "rgarridostratio": "Thanks @ocombe. As @Cuel wrote, I had not updated to 2.4.3. Problem solved.\n. ",
    "joewoodhouse": "The documentation does specifically say you can provide a MissingTranslationHandler at the component level. So are the documents incorrect?. ",
    "bbarry": "I think something like this would be better:\n{\n  \"ALREADY_SIGNED_UP\": \"Already signed up? <a>Log in</a>!\"\n}\nhtml\n<span [merge]=\"{{ 'ALREADY_SIGNED_UP' | translate }}\">\n  <a routerLink=\"/login\"></a>\n</span>\nA merge mixin somewhere would simultaneously walk the span template and the dom of the merging value and add nodes from the value that are not in the template as it is rendering (the point: I don't think this is specifically an ng2-translate issue, more of an advanced templating issue for core somewhere).\n. ",
    "yuristsepaniuk": "Hi folks! I wish to propose our workaround too:\n\nHtml is good, if you have xss filter, but still possible to miss smth, also you can't include angular components in such html, because of reason brought by @ocombe , thx btw!\nWe also don't want html, because we pass text to non technical translators.\nWe want them to read full text, but not 3 or 4 cuts.\n\nSOLUTION: we use single variable with text piped | --> example \"Hello, please click |here| to register\".\nWe implemented custom angular pipe\n@Pipe({ name: 'translateCut' })\nexport class TranslateCut implements PipeTransform {\n  transform(value: string, index: string): string {\n    const cutIndex = Number(index);\n    return value.split('|')[cutIndex];\n  }\n}\nThen we use it just like that:\n<p>\n  {{ 'page.registration' | translate | translateCut:0 }}\n  <a (click)=\"go()\">{{ 'page.registration' | translate | translateCut:1 }}</a>\n  {{ 'page.registration' | translate | translateCut:2 }}\n</p>\nWe are good, no xss, we can use angular components in the middle, we provide single variable to translators.\nThx\n-Yura. ",
    "kasperlauge": "I know this issue is closed, but as it was the hit I got searching for the same problem I would like to present my solution to the problem, implementing a generic solution for ngx-translate. It consist of two directives and a service shared between them.\ntemplate-translate.directive.ts\n```\nimport { Directive, TemplateRef, ViewContainerRef, Input, Host, OnInit, Renderer2, OnDestroy } from \"@angular/core\";\nimport { TemplateTranlateService } from \"./template-translate.service\";\nimport { TranslateService, TranslateDefaultParser } from \"@ngx-translate/core\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { getValue, TEMPLATE_MATCHER } from \"./util/translation.util\";\n@Directive({\n    selector: \"[templateTranslate]\",\n    providers: [TemplateTranlateService],\n})\nexport class TemplateTranslateDirective implements OnInit, OnDestroy {\n    @Input() templateTranslate: string;\n    numberOfDirectChildElements: number;\n    private rawResourceString: string;\n    private refsSubscription: Subscription;\n    private translateSubscription: Subscription;\nconstructor(\n    private viewRef: ViewContainerRef,\n    private renderer: Renderer2,\n    private translateService: TranslateService,\n    private templateTranlateService: TemplateTranlateService,\n) {}\n\nngOnInit(): void {\n    // Atm all the params are HTML insertions using this directive\n    this.rawResourceString = getValue(this.translateService.translations[this.translateService.currentLang], this.templateTranslate);\n    if (!this.rawResourceString) {\n        throw new Error(`[Template translate directive] No resource matching the key '${this.templateTranslate}'`);\n    }\n    this.templateTranlateService.rawResourceString.next(this.rawResourceString);\n    // This makes this directive all or nothing with the HTML insertions\n    this.numberOfDirectChildElements = this.rawResourceString.match(TEMPLATE_MATCHER).length;\n\n    this.refsSubscription = this.templateTranlateService.$refs.subscribe(resources => {\n        // The first resource value is null from the behaviour subject\n        if (resources.length) {\n            // Clear the view and save every HTML insertion needed in the translation string\n            this.viewRef.clear();\n            // Only do anything when all the HTML insertions is received\n            if (resources.length < this.numberOfDirectChildElements) {\n                return;\n            }\n            // Sort them so the leftmost HTML insertion is first and so forth\n            resources.sort((a, b) => a.firstIndex - b.firstIndex);\n            // Find the substrings and replace them with the correct HTML insertions\n            for (let i = 0; i < resources.length; i++) {\n                let firstString;\n                if (i > 0) {\n                    firstString = \"\";\n                } else {\n                    firstString = this.rawResourceString.substring(0, resources[i].firstIndex);\n                }\n                let nextString;\n                if (i < resources.length - 1) {\n                    nextString = this.rawResourceString.substring(resources[i].lastIndex, resources[i + 1].firstIndex);\n                } else {\n                    nextString = this.rawResourceString.substring(resources[i].lastIndex);\n                }\n                const firstStringElement = this.renderer.createText(firstString);\n                const nextStringElement = this.renderer.createText(nextString);\n                const embeddedViewRef = resources[i].viewRef.createEmbeddedView(resources[i].templateRef);\n                this.renderer.appendChild(this.viewRef.element.nativeElement, firstStringElement);\n                this.renderer.appendChild(this.viewRef.element.nativeElement, embeddedViewRef.rootNodes[0]);\n                this.renderer.appendChild(this.viewRef.element.nativeElement, nextStringElement);\n            }\n        }\n    });\n}\n\nngOnDestroy(): void {\n    if (this.refsSubscription) {\n        this.refsSubscription.unsubscribe();\n    }\n    if (this.translateSubscription) {\n        this.translateSubscription.unsubscribe();\n    }\n}\n\n}\n```\ntemplate-translation.directive.ts\n```\n@Directive({\n    selector: \"[templateTranslation]\",\n})\nexport class TemplateTranslationDirective implements OnInit, OnDestroy {\n    @Input() templateTranslation: string;\n    private rawResourceSubscription: Subscription;\nconstructor(\n    private viewRef: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    @Host() private templateTranlateService: TemplateTranlateService,\n) {}\n\nngOnInit(): void {\n    this.rawResourceSubscription = this.templateTranlateService.rawResourceString.subscribe(rawResourceString => {\n        if (rawResourceString) {\n            // Could be replaced with regex\n            const matchString = `{{${this.templateTranslation}}}`;\n\n            const firstIndex = rawResourceString.indexOf(matchString);\n            this.templateTranlateService.templateRefs.push({\n                viewRef: this.viewRef,\n                templateRef: this.templateRef,\n                firstIndex: firstIndex,\n                lastIndex: firstIndex + matchString.length,\n            });\n            this.templateTranlateService.refs.next(null);\n        }\n    });\n}\n\nngOnDestroy(): void {\n    if (this.rawResourceSubscription) {\n        this.rawResourceSubscription.unsubscribe();\n    }\n}\n\n}\n```\ntemplate-translate.service.ts\n```\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\nimport { TemplateRefs } from \"./shared/templateRefs.model\";\nimport { map } from \"rxjs/operators\";\n@Injectable()\nexport class TemplateTranlateService {\n    templateRefs = new Array();\n    public refs = new BehaviorSubject(null);\n    public $refs = this.refs.pipe(map(() => this.templateRefs));\n    public rawResourceString = new BehaviorSubject(null);\n    constructor() {}\n}\ntemplateRefs.model.ts\nimport { ViewContainerRef, TemplateRef } from \"@angular/core\";\nexport class TemplateRefs {\n    viewRef: ViewContainerRef;\n    templateRef: TemplateRef;\n    firstIndex: number;\n    lastIndex: number;\n}\n```\nThe solution works by using the Renderer two moving the right HTML/Angular element in place of the replacement string.\nThe interface for this is quite simple, given resource file: \"SomeScreen\", and resource string:\"someResourceString\", looking like this: \"Replace {{this}} in this sentence\":\n<p [templateTranslate]=\"'someScreen.someResourceString'\">\n            <a *templateTranslation=\"'this'\"\n               [routerLink]=\"['/someLink', data.id]\">\n                {{data.name}}\n            </a>\n</p>\nThe string will then be replaced, where the {{this}} will be replaced with the given HTML/Angular element with the *templateTranslation directive. I know that the directive only handles double curly braces atm. And if it is used, every replacement in the resource string should be replaced with an HTML/Angular element. So the solution could probably be fine tuned a bit. But I would say that this is a start for a generic solution for ngx-translate library. Currently the solution uses three private properties/functions from the ngx-translate library which is:\n```\n// Some of these functions are taken directly from https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/\n// As they dont expose every function in the public API\n// Taken from https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/lib/util.ts\nexport function isDefined(value: any): boolean {\n    return typeof value !== \"undefined\" && value !== null;\n}\n// Taken from https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/lib/translate.parser.ts\nexport const TEMPLATE_MATCHER = /{{\\s?([^{}\\s]*)\\s?}}/g;\nexport function getValue(target: Object, key: string) {\n    const keys = key.split(\".\");\n    key = \"\";\n    do {\n        key += keys.shift();\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === \"object\" || !keys.length)) {\n            target = target[key];\n            key = \"\";\n        } else if (!keys.length) {\n            target = undefined;\n        } else {\n            key += \".\";\n        }\n    } while (keys.length);\nreturn target as string;\n\n}\n```\nThis makes the solution incomplete. It would probably be better if it was implemented natively in ngx-translate, or if the methods was made public in the ngx-translate library.\nFor the developers, would you consider implementing this native in the ngx-translate library? Or maybe open for a potential PR me or another dev could make?\nAnd feel free to address if this solution contains any problems which isn't just fine tuning :). ",
    "pyroflies": "Thanks @yuristsepaniuk for your pipe solution!\nFor those who are using Angular 1.x with filters instead of pipes, here is the matching solution:\n\"POLICY_FOOTER\": \"We use |Cookies|. Here is our |Privacy Policy|\"\n  {{ \"POLICY_FOOTER\" | translate | translateCut : 0 }}\n  <a href=\"https://www.example.com/cookies.html\" target=\"_blank\">{{ \"Cookies\" | translate }}</a>\n  {{ \"POLICY_FOOTER\" | translate | translateCut : 2 }}\n  <a href=\"https://www.example.com/privacy.html\" target=\"_blank\">{{ \"Privacy Policy\" | translate }}</a>\n\n.filter('translateCut', function() {\n    return function(input, cutIndex) {\n      return input.split('|')[cutIndex];\n    }\n  }). ",
    "denu5": "@kasperlauge it looks like rocketscience but from the usage its perfect and super flexible!  thx for your solution kasper.. @SamVerschueren \nyes this worked. thanks. i have taken the solution from your example here:\nhttps://github.com/SamVerschueren/ng2-translate-aot-test/blob/2b3feceee8e288ea6480eaa5bc9ab64906630887/src/app/app.module.ts. ",
    "anshumansworld": "Okay, let me try by cleaning it again.\n. I still don't understand what was the problem, I have cleaned node_mdules earlier as well but this time it's working fine. I was struggling from Friday :( anyway thanks for your time!!\n. @aruns05 I deleted node_modules and run \"npm install\". You may try this.. ",
    "aruns05": "@anshumansworld : I am also facing this issue. Can you please advise how you fixed it . ",
    "Sn3b": "Not sure how...\nWhat would be your approach for such values coming from the database?\n. Thanks @DethAriel, like a charm indeed :)\n. ",
    "woppa684": "Yeah, figured it had to be something like that... But what is the bundle meant for then?\n. Ok! That\"s clear then... Thanks!\n. Tried it in the plnkr now. Unfortunately I have the same results ... The workaround for now is to do a get and manually subscribe/unsubscribe to the onLangChange.. @ocombe Can you make sure ngx-translate compiles with ngcc when Angular 8 is released or do you expect pull requests for this?. ",
    "kbrandwijk": "Please merge this, because other projects are running into the same problems (angular2-seed-advanced for one)...\n. Wow, that was fast :)\n. ",
    "ngehlert": "would you be willing to accept a PR that adds the suggested conditional switch?\nI'd rather have empty values displayed with something like \"[MISSING]: KEY\" then just empty strings. At least this is the way I'm used to it with the old angular-gettext\n@ocombe . @tatsujb what is your error, i don't quite get it. if you don't receive a translation well probably your file is not loaded\n\ninstant(key: string|Array, interpolateParams?: Object): string|Object: Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the default file loader is asynchronous. You are responsible for knowing when your translations have been loaded and it is safe to use this method. If you are not sure then you should use the get method instead.. @ocombe I think both options are valid and I think there would be enough people to buy the license. For this to happen I think you need to clarify the advantages of ngx-translate over angulars solution.\nTo this day there are still a couple of pretty important things missing in angulars i18n\n- still no support for other formats like PO(!) or JSON.\n- The xlf or xmb format is pretty weird to use and looks just like a giant mess\n  - Haven't found a single translator familiar with any of those formats and so far haven't found a proper editor to use to edit translations by myself (for example didn't found an editor that supports ICU expressions)\n  - It is pretty prone to merge conflict errors that result in removing previous translations\n  - Extracted translations are not sorted alphabetically but rather by time they were added to the code\n  - New lines and following spaces are parsed as well in the key, so changing the indentation of your code will actually remove translations (because for angular the key has changed)\n  - Unused translations are immediately removed instead of commented out or flagged as unused\n - Overall pretty complex to get it running\n - Translation files can't be loaded over http\n\nThe list probably goes on. I know couple of things probably are personal preference (or regional differences), but the big dealbreaker for me is the file formats. When I evaluated  i18n possibilities for a big project I'm working on (I used ngx-translate in a couple of private projects before), I decided against ngx-translate and for Angulars i18n because it was not clear if this project will be forever maintained and Angular claimed to add the missing functionality. I didn't want to refactor everything later so I started to use Angulars i18n (also I think if there is a proper native solution it makes sense to use it). Now half a year later, I'm actually considering switching to ngx-translate and refactor everything, because I'm completely unsatisfied with Angulars i18n. So many troubles, problems and issues. And for most of them it is still not in sight that they might get tackled in the future. \nI know that you work on the Angular i18n implementation, maybe you can shed some light on a couple of issues. Is it planned to support different file types or is it still \"up for internal discussion\" like mentioned on of their github issues? Is it planned to support loading translation files async over http? (Or maybe this is already possible and I just didn't found the proper solution)\nThis should be by no mean a rant or critic towards you or your work here or at Angular. I know you are doing a great job over there and i18n has gotten a lot better, it is just nowhere near the state I expect it to be from Angular. And I just have the feeling it does not have a high priority on their roadmap - and that probably is what boggles me the most. To me this is just such a core and important functionality. \nThanks for your great work at this library, and I hope it will continue to being maintained :). thanks for your reply.\n\nWe won't be adding new file types, but the API will probably be open with the big refactor for ivy, meaning that anyone can write a new parser and use it with Angular i18n (I say probably because we aren't at that part in the refactor yet, and I don't have the final vote on the question)\n\nWell but then there is the question what is the advantage of using the Angulars i18n in the first place if you need a separate parser, separate extractor and maybe even a separate loader depending on the prefered behavior. To me it sounds easier to just use one external lib (e.g. ngx-translate) that handles everything instead of plugging couple of external libs into the native behavior.\n. @tatsujb just curios, what feature is missing for you in ngx-translate.\nI would not count on the dealine for the Angular translation feature... I has been postponed a LOT of times already.... @tatsujb well multiple-choice/dynamic translations is not a problem in ngx-translate. afaik there are even plugins e.g. for the angular router so you can swap language based on the url. And i know for sure you can translate input placeholders :)\neh and you don't have to extract them by hand. there is automation for it. have a look here: https://github.com/biesbjerg/ngx-translate-extract\njust have another look. pretty sure ngx-translate will feature all your needs... I'm just still struggling because it is not sure whether this lib is being supported in the future and I highly prefer native ways - but in this case the native way is just not good enough . I don't have a project to test it on right now, but I'm pretty sure you have an error in your syntax. try use the placeholder without the brackets [ and ].\nso instead of [placeholder]=\"{{ 'confirmedDate' | translate }}\"\ndo placeholder=\"{{ 'confirmedDate' | translate }}\"\nor even this one should be possible [placeholder]=\"'confirmedDate' | translate\"\nyou just mixed up different versions of the syntax together.. @anilgr you find everything here https://angular.io/guide/i18n\nno you don't need angular cli for that\nionic 3 is an angular project as it uses angular :) it may not use the angular cli but it is still an angular project. i'm using the native translation in ionic 3 by myself\n. ",
    "JonnyBGod": "Also getting same behaviour/error.\nUsing https://github.com/AngularClass/angular2-webpack-starter and following your sharedModule setup.\nWorks fine for regular components but not for lazy loaded ones.\n. ",
    "krokerke": "I had the same problem.\nusing a module for setting \"translate.use(LANG)\" and import into every lazyload module fixed it for me.\n. ",
    "dancancro": "Hi @neolanders What about putting the second one into a Core module along with all the singletons, per the style guide. Or is this a different animal? I'm trying to get this working in this app that contains many lazy loaded features. Currently only the dashboard needs i18n support.. @neolanders Thanks. Can you take a look at my project and see what I might be doing wrong? It is based on JHipster and so the language services are provided by way of JhiLanguageService in the ng-jhipster library which uses a JhiConfigService to configure ngx-translate without my needing to import and configure the TranslateModule in my app.module. So when I add TranslateModule.forRoot(...) to imports of AppModule, everything breaks and I just see \"translation not found...\" messages everywhere.\nI don't know how to make my lazy-loaded pages use the same translation instances as the eager-loaded part of the app so that changing the language in an eager component of the nav bar affects the language used by the lazy-loaded pages.\nI have also tried this idea but I think it suffers from the same problem that I don't know how to control ngx-translate configuration in a JHipster app. This is probably more a JHipster question but maybe you have some ideas. I'm asking in different places. Such is life when using open source software.. ",
    "mzellho": "@ocombe: Glad you like the idea :-). Not sure if I can really find enough time at the moment, but if I can, I'd be happy to help. Just in case: Would there be any design proposals for the feature from your side?\nA little question about the ways I took to get a rather hacky, but working workaround for the moment...\nI implemented a custom pipe that forwards the key to TranslateService:\n``` typescript\nlet currentLanguage: string = this.translateService.currentLang;\nthis.translateService.currentLang = languageCode;\nlet translation: string = this.translateService.instant(key);\nthis.translateService.currentLang = currentLanguage;\nreturn translation;\n```\nFirst I tried to go with use(lang: string), but I had some strange effects there. But since I wanted to avoid emitting any events in order to avoid performance issues anyway, I switched to above way and noticed, that the second language was missing in the translations object of the TranslateService. So I added all supported languages in the constructor of our component by calling use(lang: string):\ntypescript\ntranslateService.use(\"de\");\ntranslateService.use(\"en\");\ntranslateService.setDefaultLang(\"de\");\ntranslateService.use(userLang);\nNow, this works. But feels a little odd - can you think of some better approach?\n. @ocombe do you think this is gonna be added anytime soon?\nThe workaround I posted last year is still working with @angular:4.4.4 and @ngx-translate:8.0.0, but from time to time I am facing the issue that the application is being loaded in the wrong language which has a slightly annoying impact on the stability of my webtests...\nThanks!. ",
    "alanhg": "It's a great function\u3002I need it.. ",
    "nilebma": "I think this is also discussed in this issue : https://github.com/ngx-translate/core/issues/719\n@MZellhofer thanks for the workaround. But it probably leads to a complete refresh of the UI (?) and also trigger all subscriptions of _ TranslateService.onLangChange_ property right ?. I think this is also discussed in this issue : https://github.com/ngx-translate/core/issues/233. I did not give it a lot of tests, but this seems to do the trick : \n```\nimport { TranslateService, TranslateParser } from '@ngx-translate/core';\nconstructor(public translate:TranslateService, public translateParser:TranslateParser) \n{}\npublic getTranslationInTargetLanguage(key:string, language:string, interpolateParams:Object = null):Observable\n{\n    return this.translate.getTranslation(language)\n               .map( (res) => this.translateParser.interpolate(eval(\"res.\"+key),interpolateParams) ); \n}\n```. ",
    "Supamiu": "I made an implementation for a non-pipe usage (because I didn't need the pipe at this moment), but converting it to a pipe would be pretty easy:\nts\npublic getTranslation(key: string, language: string, interpolationParams?: Object): Observable<string> {\n    return this.translator.getTranslation(language).pipe(\n      map(translations => {\n        return this.translator.getParsedResult(translations, key, interpolationParams);\n      })\n    );\n  }. Just tried, got the same error with this:\nbeforeEach(() => {\n        TestBed.configureTestingModule({\n            imports: [\n                TranslateModule.forRoot()\n            ],\n            providers: [\n                I18nToolsService,\n                TranslateService\n            ]\n        });\n    });. Any updates on that? I really need to be able to test my app and at the moment this is the only thing I'm stuck with.. any updates? Not being able to test the app just because of that is a bommer for my app, please write proper testing documentation if I'm missing anything, even with a TranslateService provided, nothing changed, I tried everything written in the doc.. ",
    "agustincassanioe": "Sorry, I did not mention when is failing. This is the body of my AppComponent:\n```ts\nimport { Component, ViewContainerRef } from '@angular/core';\nimport { TranslateService } from 'ng2-translate/ng2-translate';\nimport { DEFAULT_LANGUAGE, LANGUAGE_STORAGE_KEY, isSupportedLanguage } from './common';\n@Component({\n  selector: 'lp3-app',\n  styles: [require('./app.component.scss')],\n  template: require('./app.component.html')\n})\nexport class AppComponent {\n  constructor(private translate: TranslateService, private viewContainerRef: ViewContainerRef) {\n    console.debug('AppComponent activated');\nvar userLang = localStorage.getItem(LANGUAGE_STORAGE_KEY);\nif (userLang) {\n  console.debug('Restoring language from localStorage');\n} else {\n  console.debug('No stored language!');\n  userLang = navigator.language.split('-')[0]; // use navigator lang if available\n  console.debug('Browser detected language is', userLang);\n}\nuserLang = isSupportedLanguage(userLang) ? userLang : DEFAULT_LANGUAGE;\nconsole.debug('Setting language to:', userLang);\nthis.translate.use(userLang).toPromise().then(() => {\n  console.debug('AppComponent language set to:', this.translate.currentLang);\n});\nlocalStorage.setItem(LANGUAGE_STORAGE_KEY, userLang);\n  }\n}\n```\nI have tried commented it out entirely and uncommented it out section by section. The part that is throwing the error is the following one:\nts\nthis.translate.use(userLang).toPromise().then(() => {\n  console.debug('AppComponent language set to:', this.translate.currentLang);\n});\nThe resto of the code works perfectly.\nThanks!\n. ",
    "vikram-kerkar": "Hi,\nI am running similar test as above with ng2-translate service\nWhen running the tests, I am getting the following error:\n\nAppComponent should create the app FAILED\n  Failed: Can't resolve all parameters for AppComponent\n\nPlease find attached code samples and test error report.\nng2-translate-unit-testing-error.txt\napp.component.spec.ts.txt\napp.component.ts.txt\nng-translate version:4.0.1\nAngular 2 version:2.2.0\nCan you please provide some documentation and code samples on how to run unit tests with ng2-translate?\nYour help would be appreciated\nThanks.\n. I removed the translate service dependency from AppComponent and injected it into the App Module instead. This has fixed the issue. For components that use the translate pipe, I followed your setup from translate.pipe.spec.ts and everything is working fine now.\nThanks \ud83d\udc4d . ",
    "qiluo": "hi @ocombe , I followed your guide, my testing setup looks like\n```\nfunction translateLoader(http: Http) {\n  return new TranslateStaticLoader(http, 'base/assets/i18n', '.json');\n}\ndescribe('MyApp Component', () => {\n  let fixture;\n  let component;\nbeforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [MyApp],\n      imports: [\n        HttpModule,\n        IonicModule.forRoot(MyApp),\n        TranslateModule.forRoot({\n          provide: TranslateLoader,\n          useFactory: (translateLoader),\n          deps: [Http]\n        })\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen\n      ]\n    })\n  }));\n```\nbut I still got error\n11 04 2017 16:39:57.325:INFO [PhantomJS 2.1.1 (Mac OS X 0.0.0)]: Connected on socket Q-ACsrb7Xki-GphLAAAA with id 42310708\n11 04 2017 16:39:58.680:WARN [web-server]: 404: /base/assets/i18n/zh.json\n11 04 2017 16:39:58.749:ERROR [launcher]: PhantomJS crashed.\nI'm on ng2-translate@5.0.0. ",
    "boradakash": "Hi @qiluo\ndid you resolve this 404 /base/assets/i18n/zh.json issue?\nIf yes,\nYour help would be appreciated\nThanks.\n. ",
    "Waitak": "That's exactly what I'm doing, and the pipe is not defined.\n```\nimport { Component, Input, OnInit } from '@angular/core';\nimport { TranslateService, TranslatePipe } from 'ng2-translate/ng2-translate';\n@Component({\n    selector: 'home',\n    template: <h2>{{'HOME.TITLE' | translate}}</h2>\n})\nexport class HomeComponent {\n    constructor(private translate: TranslateService) {\n    }\n}\n```\nConsole:\n```\nThe pipe 'translate' could not be found (\"\n[ERROR ->]{{'HOME.TITLE' | translate}}\n\"): HomeComponent@1:4 ; Zone:  ; Task: Promise.then ; Value: Error: Template parse errors:(\u2026) Error: Template parse errors:\nThe pipe 'translate' could not be found (\"\n[ERROR ->]{{'HOME.TITLE' | translate}}\n\"): HomeComponent@1:4\nThe pipe 'translate' could not be found (\"\n[ERROR ->]{{'HOME.TITLE' | translate}}\n\"): HomeComponent@1:4 ; Zone:  ; Task: Promise.then ; Value: Error: Template parse errors:(\u2026) Error: Template parse errors:\nThe pipe 'translate' could not be found (\"\n[ERROR ->]{{'HOME.TITLE' | translate}}\n\"): HomeComponent@1:4\n```\n. Module definition:\n```\nimport { UIRouterModule } from \"ui-router-ng2\";\nimport { SharedModule } from \"../shared.module\";\nimport { HOME_STATES } from \"./home.states\";\n/* The Home NgModule. /\n@UIRouterModule({\n  imports: [SharedModule],\n  states: HOME_STATES\n})\nexport class HomeModule { }\n```\n(Would you like to move this discussion to my second (hopefully better) question, or leave it here?)\n. ```\nimport {NgModule} from \"@angular/core\";\nimport {HttpModule} from \"@angular/http\";\nimport {CommonModule} from \"@angular/common\";\n/* MyCommon Module: Re-exports BrowserModule and HttpModule /\n@NgModule({\n  exports: [CommonModule, HttpModule],\n})\nexport class SharedModule { }\n```\n(Par parenth\u00e8se, le fran\u00e7ais marcherait egalement bien comme langue commune...)\n. Yes, in app.module.ts:\n@UIRouterModule({\n    imports: [\n        BrowserModule,\n        HomeModule,\n        TranslateModule.forRoot()\n    ],\n...\n. NB: I am unable to pass a pipes parameter to the Component. I mentioned that in the second question I posted. Has that changed with recent RC versions of Angular2?\n. \u00c7a y est! Merci bien pour les responses rapides et claires.\n. Answered in another issue.\n. ",
    "kelvynmarte": "Please mention the issue, in which its solved.\n. ",
    "nevster": "Yeah - a definite possibility.\n. ",
    "rahul0923": "My bad, looks like we don't need to add these libraries to the scripts tag, removing it worked. Sorry for the confusion\n. Thanks very much Oliver!!\nRegards,\nRahul. ",
    "hartjus": "It looks like the bundle just isn't working, which I would call a bug.  I looked at issue #228, noticed it was closed, but I don't think that is correct--not everybody is using webpack.  So, if a bundle is going to be provided, my expectation is that it would be able to be loaded into SystemJS correctly, and minimize the number of HTTP requests for files (aka, there should only be one).\nMy expectation is that this code block should load the ng2-translate bundle correctly, with only one HTTP request.  Is this a wrong assumption/expectation?\nmap: {\n  'ng2-translate': 'libs/ng2-translate/bundles',\n},\npackages: {\n  'ng2-translate': {defaultExtension: 'js', format: 'register'},\n}\n. ",
    "egornoveo": "Thank you, Olivier!\n. ",
    "slinto": "Hi,\nI have one problem, I load some translates from .json file throught TranslateStaticLoader.\nBut I can use setTranslation for some content too, but setTranslation dont work for me..\nI use ionic2-rc-2\nIs this bug or? :) \nThanks.\n. ",
    "juanchavezlive": "Hello @ocombe... Is there any performance cons if we use the method 'setTranslation' instead of the normal load ?. ",
    "maxime1992": "My bad ...\nThis works perefctly and it's in the readme ;)\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        TranslateModule.forRoot({ \n          provide: TranslateLoader,\n          useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n          deps: [Http]\n        })\n    ],\n    exports: [BrowserModule, HttpModule, TranslateModule],\n})\n. @cbeldacap sry I missed the notification ...\nDo you still have this issue ?\n\n@MalliswariKulala I think you should rather do : new TranslateStaticLoader(http, './i18n', '.json'). (notice the dot beofre /i18n.\nPlus, putting your i18n folder at the root of your project is probably not the best option.\nYou should create a folder i18n in assets folder and just do new TranslateStaticLoader(http, './assets/i18n', '.json');\n. ",
    "cbeldacap": "Hello @maxime1992 , I am currently facing the same problem. Using angular-cli as well and having the same in app.module.ts. But even so, .json files are never loaded (none of the in the \"Network\" tab on Chrome DevTools).\nShould I do anything different from the README file?\nthnx so much in advance. @maxime1992 Hi, just solved it. The problem was that I had a http interceptor and was catching every single call to .json files, so no interceptor -> no problem.  Thnx anyway!. @onedotover that Plunker you referenced is not working. Could you finally run it properly?\nthnx in advance. @SamVerschueren thnx for the quick feed-back. But even so, as it appears in README does not work for me. And I'm setting it up in app.module and initializing it in app.component.ts, but I think the app does never load the .json files. What the path here is looking for?\nTranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, 'i18n', '.json'),\n            deps: [Http]\n})\nI have a folder /i18n at the same level of app.component.ts\nthnx in advance\nTo solve the previous thing I've imported ng2-translate in system.config.js as follows:\nmap\n'ng2-translate': 'node_modules/ng2-translate/bundles/ng2-translate.umd.js',\n. I could find no solution. It might be something wrong with my project, so I'm trying so make a trial evolving the example of \"systemjs\".. I've finally discovered what my issue was caused by. I've had a HTTP interceptor to simulate a back-end in my project, so every HTTP operation was passing through it, even those dedicated to extract i18n values from .json files. That is why I could never get results.\nNow it works perfectly and superfast.\nthnx for feed-back and help. Sorry for the lack of feed-back. ng2-translate was perfectly working. The problem was because of a HTTP interceptor I've added to my project, that was catching every call to JSON files.\ncongrats 4 the nice work!. ",
    "MalliswariKulala": "By default, the angular-cli is searching for this path 'http://localhost:4200/i18n/fr.json'. I have placed i18n folder outside the assets folder and the app is working fine.\nIm facing issues with unit test cases.\nThe pipe 'translate' could not be found\n(OR)\n404 file not found error in  \"http://localhost:9876/i18n/fr.json\"...\nMy imports in spec file:\nimports: [TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, '/i18n', '.json'),\n            deps: [Http]\n        })]\nSomeone help me with this... Thanks in advance..... @maxime1992 Thanks Maxime... I placed i18n folder in assets folder and have defined this configuration 'new TranslateStaticLoader(http, './assets/i18n', '.json')' in app.module.ts.\nIt working now :). ",
    "hvrz39": "@MalliswariKulala  did you solve your unit test issue? I'm facing the exact same problem you mentioned. Actually, I already had placed on my root folder the 'assets/i18n/es.json' folder and still having the \n' Response with status: 404 Not Found for URL: http://localhost:9876/assets/i18n/es.json' when running my unit tests. \nThis is my import spect definition:\nimports: [\n        RouterTestingModule, \n        FormsModule,\n        ReactiveFormsModule,\n        HttpModule,\n        TranslateModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, './assets/i18n', '.json'),\n            deps: [Http] \n        }),\nThanks in advance.. @ocombe man! you are right, I should use MockBackend and MockResponse on my unit testing. But let's say I want to perform an integration test, I'm still having the same  404 Not Found for URL: http://localhost:9876/assets/i18n/es.json'  error.. ",
    "amustaine": "Was the same problem, in my case this issue was not related with ng2-translate. Solved after \"angular-in-memory-web-api\" package was removed.. ",
    "pankajsri03": "I am facing same issue but only on production environment. My folder structure looks like assets->i18n -> en.json . And this is how i have registered it in app.module.\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, '/assets/i18n/', '.json');\n}\n. @valburyakov  We were able to solve this by creating a web.config file in our server folder of angular app. Below is the code we used \n\nread more here :\nhttps://stackoverflow.com/questions/19516829/allow-loading-of-json-files-in-visual-studio-express-2013-for-web. ",
    "valburyakov": "@pankajsri03 Hello, did you resolve your issue with loading json on production ? I've faced the same issue, locally it works well, but when we deploy to aws s3 (bucket is used as assets for hosting) and then json is not loaded and i got an 500 error. Seems nginx doesn't allow to load it or it doesn't know where this file is\n. ",
    "zxshinxz": "If you want to make it work for now \ntry to import directly like under\nshould work. \napp.module.ts\n```\nimport { NgModule } from '@angular/core';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { Http, HttpModule } from \"@angular/http\";\nimport { StampPage } from \"../pages/stamp/stamp\";\nimport { CouponPage } from \"../pages/coupon/coupon\";\nimport { MenuPage } from \"../pages/menu/menu\";\nimport { AboutUsPage } from \"../pages/about-us/about-us\";\nimport { PhotoPage } from \"../pages/photo/photo\";\nimport { EventPage } from \"../pages/event/event\";\nimport { SettingPage } from \"../pages/setting/setting\";\nimport { Barcode } from \"../pages/barcode/barcode\";\nimport { BarcodeZoom } from \"../pages/barcode-zoom/barcode-zoom\";\nimport { App } from \"./app.component\";\nimport { TranslateModule} from \"ng2-translate/ng2-translate\";\nimport { TranslateLoader, TranslateStaticLoader } from \"ng2-translate/src/translate.service\";\n\n@NgModule({\n  imports: [\n    IonicModule.forRoot(App),\n    HttpModule,\n    TranslateModule.forRoot(\n      {\n        provide: TranslateLoader,\n        useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n        deps: [Http]\n      }\n    )\n  ],\n  declarations: [\n    App,\n    StampPage,\n    CouponPage,\n    MenuPage,\n    AboutUsPage,\n    PhotoPage,\n    EventPage,\n    SettingPage,\n    Barcode,\n    BarcodeZoom\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    App,\n    StampPage,\n    CouponPage,\n    MenuPage,\n    AboutUsPage,\n    PhotoPage,\n    EventPage,\n    SettingPage,\n    BarcodeZoom\n  ],\n  providers: []\n})\nexport class AppModule {\n}\n\n```\napp.component.ts\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { Platform, Nav } from 'ionic-angular';\nimport { StatusBar } from 'ionic-native';\nimport { StampPage } from \"../pages/stamp/stamp\";\nimport { CouponPage } from \"../pages/coupon/coupon\";\nimport { MenuPage } from \"../pages/menu/menu\";\nimport { AboutUsPage } from \"../pages/about-us/about-us\";\nimport { PhotoPage } from \"../pages/photo/photo\";\nimport { EventPage } from \"../pages/event/event\";\nimport { SettingPage } from \"../pages/setting/setting\";\nimport { TranslateService } from \"ng2-translate/src/translate.service\";\n\n@Component({\n  templateUrl: 'app.component.html'\n})\nexport class App {\n  @ViewChild(Nav) nav: Nav;\n\n  rootPage: any = StampPage;\n  pages: Array<{label: string, component: any}>;\n\n  constructor(private platform: Platform\n    , private translate: TranslateService) {\n    this.initializeApp();\n\n    this.pages = [\n      {label: 'side.stamp', component: StampPage},\n      {label: 'side.coupon', component: CouponPage},\n      {label: 'side.menu', component: MenuPage},\n      {label: 'side.aboutUs', component: AboutUsPage},\n      {label: 'side.photo', component: PhotoPage},\n      {label: 'side.event', component: EventPage},\n      {label: 'side.setting', component: SettingPage}\n    ];\n  }\n\n  initializeApp() {\n\n    this.platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      StatusBar.styleDefault();\n    });\n\n    this.translateConfig();\n  }\n\n  translateConfig() {\n    // var userLang = navigator.language.split('-')[0]; // use navigator lang if available\n    // userLang = /(de|en|es)/gi.test(userLang) ? userLang : 'en';\n    this.translate.setDefaultLang('en');\n    this.translate.use('kr');\n  }\n\n  openPage(page) {\n    // Reset the content nav to have just this page\n    // we wouldn't want the back button to show in this scenario\n    this.nav.setRoot(page.component);\n  }\n}\n\n```\n. ",
    "DreamitMauri": "Any quick tips on how to get it to work with Ionic RC.0?\n. Unfortunately it doesn't work. I get \nngc error: Error: Error encountered resolving symbol values statically. Function calls are not supported. Consider replacing the function or lambda with a reference to an exported function, resolving symbol AppModule in xxx/.tmp/app/app.module.ts, resolving symbol AppModule in xxx/.tmp/app/app.module.ts\nUsing \nimports: [\n        IonicModule.forRoot(MyApp),\n        HttpModule,\n        TranslateModule.forRoot()\n],\n. Ah, so it is. Thank you.\n. ",
    "chiccorusso": "Hi! That's #218 .\n. ",
    "membersheep": "TranslateLoader and TranslateStaticLoader can be imported from 'ng2-translate/src/translate.service', but calling TranslateModule.forRoot() will cause the build process to fail.\n. ",
    "derksacklowski": "dev mode works fine if we include {TranslateLoader , TranslateStaticLoader, TranslateService } from 'ng2-translate/src/translate.service',\n\"ionic build\" fails\nngc error: Error: Error encountered resolving symbol values statically. Function calls are not supported. Consider replacing the function or lambda with a reference to an exported function (position 30:23 in the original .ts file), resolving symbol AppModule in C:/Users/dsc/dev/23_angular__rhenus__information/.tmp/app/app.module.ts\n    at simplifyInContext (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\static_reflector.js:469:23)\n    at StaticReflector.simplify (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\static_reflector.js:472:22)\n    at StaticReflector.annotations (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\static_reflector.js:61:36)\n    at _loop_1 (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\codegen.js:53:54)\n    at CodeGenerator.readFileMetadata (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\codegen.js:66:13)\n    at C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\codegen.js:100:74\n    at Array.map (native)\n    at CodeGenerator.codegen (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\codegen.js:100:35)\n    at codegen (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\compiler-cli\\src\\main.js:7:81)\n    at Object.main (C:\\Users\\dsc\\dev\\23_angular__rhenus__information\\node_modules\\@angular\\tsc-wrapped\\src\\main.js:30:16)\n. https://github.com/ocombe/ng2-translate/issues/218 has some sort of solution\n. ",
    "jafaripur": "Same for me.\nError: Module node_modules/ng2-translate/ng2-translate.js does not export TranslateLoader (imported by /home/SideMenu/.tmp/app/app.module.js)\n. ",
    "Eagleseb": "Be careful, for ionic the configuration should be : \nuseFactory: (http: Http) => new TranslateStaticLoader(http, 'assets/i18n', '.json'),\ninstead of\nuseFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n(mind the slash before assets)\n. ",
    "vincentp": "Hi, I tried to install it today.\nVersion:\n\"@angular/core\": \"2.0.0\",\n\"angular-cli\": \"1.0.0-beta.16\",\n\"ng2-translate\": \"^3.1.0\",\nAdded the following to my module (/app/app.module.ts):\n```\nexport function createTranslateLoader(http: Http) {\n  return new TranslateStaticLoader(http, './', 'locale-en.json');\n}\n@NgModule({\n  imports: [\n    TranslateModule.forRoot({ \n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    })\n  ],\n  exports: [\n    TranslateModule\n  ]\n})\n```\nAnd my homepage component (/app/homepage/homepage.component.ts):\n```\nimport { Component, OnInit } from '@angular/core';\nimport { TranslateService } from 'ng2-translate/ng2-translate';\n@Component({\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.sass']\n})\nexport class HomepageComponent implements OnInit {\nconstructor(translate: TranslateService) {\ntranslate.get('homepage.title').subscribe((res: string) => {\n  console.log('DATA: ' + res);\n});\n\n}\nngOnInit() {\n  }\n}\n```\nMy view: \n<h1>{{ 'homepage.title' | translate }}</h1>\nIt outputs homepage.title (removing the curly brackets), doesn't pick up the translation (no error shown in the console).\n. I didn't dig further, no solution yet\n. ",
    "sarbogast": "@vincentp I have exactly the same thing. Did you find a solution?\n. I think I found the problem. Once I moved my i18n folder under src, everything worked.\n. ",
    "hantsy": "I also encountered a problem when I used Angular CLI, it raised an error.\nThe pipe 'translate' could not be found\n. @SamVerschueren Thanks for your quick response. Of course, I added TranslateModule. Just pushed my sample codes, https://github.com/hantsy/angular2-sample/,  under the vanilla folder.\nhttps://github.com/hantsy/angular2-sample/blob/master/vanilla/src/app/app.module.ts\n. @SamVerschueren I have just tried, get lang value from Component is working.\nI added the following to AppComponent, it print the desired value.\nconsole.log('posts of lang:'+ this.translate.instant('posts'));\nBut I added translate  pipe in to navbar component, it raised the above errors.\nhttps://github.com/hantsy/angular2-sample/blob/master/vanilla/src/app/shared/navbar.component.html\n. @SamVerschueren I found ng2-translate does not find the translation value of the lang key at all. When I added a MyMissingTranslationHandler, it print my formatted key.\nI can see my the content from  http://localhost:4200/assets/i18n/en.json, but what is wrong here.\nuseFactory: (http: Http) => new TranslateStaticLoader(http, './assets/i18n', '.json'),\nI added a standalone module to configure TranslateModule now.\n```\nimport { NgModule } from '@angular/core';\nimport { HttpModule, Http } from '@angular/http';\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader, MissingTranslationHandler } from 'ng2-translate';\nexport class MyMissingTranslationHandler implements MissingTranslationHandler {\n  handle(key: string) {\n      return 'missing key: [' + key + ']';\n  }\n}\n// class CustomLoader implements TranslateLoader {\n//     getTranslation(lang: string): Observable {\n//         return Observable.of({\"KEY\": \"Value\"});\n//     }\n// }\n// TranslateModule.forRoot({ provide: TranslateLoader, useClass: CustomLoader })\n@NgModule({\n  imports: [\n    HttpModule,\n    TranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (http: Http) => new TranslateStaticLoader(http, '/assets/i18n', '.json'),\n      deps: [Http]\n    })\n    ],\n  exports: [TranslateModule],\n  providers: [{ provide: MissingTranslationHandler, useClass: MyMissingTranslationHandler }],\n})\nexport class AppTranslateModule { }\n```\n. @ocombe I have tried both, none of them is working. always printing missing key:[xxx] in codes, and translate pipe still does not work.\n. It seems Angular CLI does not created a dist folder at runtime when in development env.\nAs I said above, I can get the translation content via URL directly,  http://localhost:4200/assets/en.json, if the file is found by ng2-translate, why the translations are not found in this file.\nThe codes is here.\nhttps://github.com/hantsy/angular2-sample/blob/master/vanilla\nTranslations files are in assets/i18n folder.\n. @SamVerschueren \nI was trying to load a vlaue in the AppComponent.\nMy config is almost like, except I use the arrow function instead of explicit function as factory.\nBut it does not work, unfortunately, ng2-translate does not raised helpful exception to indicate where is wrong. \n. @SamVerschueren All printed missing key [xxxx](as my MyMissingTranslationHandler .)\n. @SamVerschueren  Defining a shared module is not a must, I checked the ng2-translate documentation. \nI have read the Angular style guide. I am confused why all of other modules work well, but this module is an exception.\nFor the translate.instant, i hope it works like ng1 translate, always return a value synchronously.\n. Thanks.\n. ",
    "FabienDehopre": "If I have the time this weekend, I would probably do it and make a pull request by the beginning of next week.\n. ",
    "MadDeveloper": "I updated to angular to 2.0.1 and nothing was broken indeed, but update ng2-translate to 3.0.0 has broken the systemjs loader.\n. Ok both solutions work thank you SamVerschueren, I put the alternative for people who did like this:\nIn your jspm config file:\npaths: {\n  'npm:': 'node_modules/'\n}\nmap: {\n    'ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.js'\n  }\nand in your sources files:\nimport { TranslateService } from 'ng2-translate'\n. I thought that after thinking it was off topic because of typescript transpiler\n. ",
    "GoranBlazevic": "I have the same problem, SystemJS reports an error \"Unexpected token <\" when loading module on require(\"ng2-translate/ng2-translate\") inside compiled .js file.\n. ",
    "julb": "Maybe due to the fact that the library isn't distributed in commonjs format ?\n. ",
    "karlhaas": "I had the same issue and was able to fix it by changing\nimport {TranslateLoader, TranslateStaticLoader, TranslateModule} from 'ng2-translate/ng2-translate';\nto\nimport {TranslateLoader, TranslateStaticLoader, TranslateModule} from 'ng2-translate';\n. ",
    "CoDanny": "Would it be possible to use this plugin instead? Maybe detect if the code is running in a phonegap environment and pull from that to read the file.\nhttps://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html\n. My bad @ocombe. For some reason I didn't realize that it was an option. That's a great architecture and approach to solve this problem\n. I used this plugin and implemented a custom loader\n```\nexport class CustomLoader implements TranslateLoader {\n  constructor(\n    private http: Http,\n    private plat: Platform\n  ) { }\ngetTranslation(lang: string): Observable {\n    if (this.plat.is('cordova')) {\n      let promise = new Promise((resolve, reject) => {\n        File.readAsText(cordova.file.applicationDirectory, www/assets/i18n/${lang}.json)\n          .then(\n          data => resolve(JSON.parse(data)),\n          (err) => {\n            console.error(err);\n            reject(err);\n          }\n          );\n      });\n  return Observable.fromPromise(promise);\n} else {\n  return this.http.get(`assets/i18n/${lang}.json`)\n    .map((res: Response) => res.json());\n}\n\n}\n}\n```\nthen use the custom loader like this:\nTranslateModule.forRoot({\n      provide: TranslateLoader,\n      useClass: CustomLoader,\n      deps: [Http, Platform]\n    })\n. I actually went back to the standard setup using Ajax called as the ionic guys fixes the problem accessing local files on WKWebView. 1) If you use the WKWebView plugin from the ionic fork, the default behavior from this software works: https://github.com/driftyco/cordova-plugin-wkwebview-engine\n2) @SamVerschueren is right, you can create a custom loader using this plugin to read the files: https://github.com/apache/cordova-plugin-file. ",
    "luckylooke": "For Ionic 2 project there is another solution I have mentioned here https://github.com/ngx-translate/core/issues/280#issuecomment-310741710. On Ionic2 project. I had a problem to make work wkwebview engine plugin and translations together. Solved by installing ionic fork of the plugin. https://github.com/ionic-team/cordova-plugin-wkwebview-engine. Have same problem.. thanks\nReproduced here: https://plnkr.co/edit/Q5ZcXpWbRpXSZEC4EA5P?p=preview\nsee the console log:\n\n. ",
    "polfernandez": "I am having the same issue, with the new WkWebview from ionic. Any updates? Wkwebview-engine is not a solution. +1. ",
    "carlgik4": "I google a lot and finally got the ngx-translate to work:\nFirst, upgrade cordova and ionic cli to latest version\n`xxx:Tabs u$ cordova -v\n    7.1.0\nxxx:Tabs u$ ionic -v\n    3.16.0\nxxx:Tabs u$ ionic info\ncli packages: (/Users/xxx/NPM/lib/node_modules)\n@ionic/cli-utils  : 1.16.0\nionic (Ionic CLI) : 3.16.0\n\nglobal packages:\ncordova (Cordova CLI) : 7.1.0\n\nlocal packages:\n@ionic/app-scripts : 3.0.1\nCordova Platforms  : ios 4.5.3\nIonic Framework    : ionic-angular 3.8.0\n\nSystem:\nAndroid SDK Tools : 25.3.1\nios-deploy        : 1.9.2 \nios-sim           : 6.1.2 \nNode              : v6.11.5\nnpm               : 3.10.10 \nOS                : macOS Sierra\nXcode             : Xcode 9.0 Build version 9A235\n\nEnvironment Variables:\nANDROID_HOME : /Applications/Android/sdk\n\nMisc:\nbackend : pro`\n\ncreate a brand new project \nionic start Tabs sidemenu\ncd Tabs\nnpm install @ngx-translate/core @ngx-translate/http-loader --save\n\nThe new project will use wkwebview as default, and there are some error with the usage docs:\nhttps://ionicframework.com/docs/developer-resources/ng2-translate/\nwe should use HttpClientModule instead of HttpModule\nFor the app.module.ts\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClientModule, HttpClient } from \"@angular/common/http\";\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    }),\n    IonicModule.forRoot(MyApp),\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    ...\n  ],\n  providers: [\n    ...\n    HttpClient,\n    TranslateService,\n    ...\n  ]\n})\nexport class AppModule {}\n\nFor app.component.ts\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class MyApp {\n  constructor(public platform: Platform, public splashScreen: SplashScreen,\n    translate: TranslateService) {\n    translate.setDefaultLang('en');\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|zh/) ? browserLang : 'en');\n  }\n}\n\nAfter that, create i18n folder in src/assets\ncreate en.json\n    {\n      \"HELLO\" : \"hello\"\n    }\nFor page usage, you can use pipe \n{{'HELLO' | translate}}\n\nor manually:\nexport class HomePage {\n  constructor(public navCtrl: NavController,\n    private translateService: TranslateService) {\n      this.translateService.get('HELLO').subscribe(\n        value => {\n          // value is our translated string\n          let alertTitle = value;\n          console.log(\"translate alert title:\" + alertTitle);\n        }\n      )\n  }\n}\n\nHope you save your life with these code.. I google a lot and finally got the ngx-translate to work:\nFirst, upgrade cordova and ionic cli to latest version\n`xxx:Tabs u$ cordova -v\n    7.1.0\nxxx:Tabs u$ ionic -v\n    3.16.0\nxxx:Tabs u$ ionic info\ncli packages: (/Users/xxx/NPM/lib/node_modules)\n@ionic/cli-utils  : 1.16.0\nionic (Ionic CLI) : 3.16.0\n\nglobal packages:\ncordova (Cordova CLI) : 7.1.0\n\nlocal packages:\n@ionic/app-scripts : 3.0.1\nCordova Platforms  : ios 4.5.3\nIonic Framework    : ionic-angular 3.8.0\n\nSystem:\nAndroid SDK Tools : 25.3.1\nios-deploy        : 1.9.2 \nios-sim           : 6.1.2 \nNode              : v6.11.5\nnpm               : 3.10.10 \nOS                : macOS Sierra\nXcode             : Xcode 9.0 Build version 9A235\n\nEnvironment Variables:\nANDROID_HOME : /Applications/Android/sdk\n\nMisc:\nbackend : pro`\n\ncreate a brand new project \nionic start Tabs sidemenu\ncd Tabs\nnpm install @ngx-translate/core @ngx-translate/http-loader --save\n\nThe new project will use wkwebview as default, and there are some error with the usage docs:\nhttps://ionicframework.com/docs/developer-resources/ng2-translate/\nwe should use HttpClientModule instead of HttpModule\nFor the app.module.ts\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClientModule, HttpClient } from \"@angular/common/http\";\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    }),\n    IonicModule.forRoot(MyApp),\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    ...\n  ],\n  providers: [\n    ...\n    HttpClient,\n    TranslateService,\n    ...\n  ]\n})\nexport class AppModule {}\n\nFor app.component.ts\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class MyApp {\n  constructor(public platform: Platform, public splashScreen: SplashScreen,\n    translate: TranslateService) {\n    translate.setDefaultLang('en');\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|zh/) ? browserLang : 'en');\n  }\n}\n\nAfter that, create i18n folder in src/assets\ncreate en.json\n    {\n      \"HELLO\" : \"hello\"\n    }\nFor page usage, you can use pipe \n{{'HELLO' | translate}}\n\nor manually:\nexport class HomePage {\n  constructor(public navCtrl: NavController,\n    private translateService: TranslateService) {\n      this.translateService.get('HELLO').subscribe(\n        value => {\n          // value is our translated string\n          let alertTitle = value;\n          console.log(\"translate alert title:\" + alertTitle);\n        }\n      )\n  }\n}\n\nHope you save your life with these code.. ",
    "larssn": "This plugin seemed to fix my issues: github.com/oracle/cordova-plugin-wkwebview-file-xhr\nNo loader required\nBasically it allows file:// paths in wkwebview as far as I can understand.. Thanks guys, will check the network tab first.\nWhats the alternative to this PR? Manually configuring every module that needs translations? Just to be clear.\nEDIT\nLooks like the translation files are being loaded.. I think the docs need clarification then. I was under the assumption that forRoot should be run for all importers, and thus the gimmick would be putting it in a Shared Module.\nSo you're saying that forRoot should only be in the root module? What then, do sub-modules automatically get this pre-configuration if importing TranslationService?\nPs. Sorry for increasing your workload with yet another \"issue\", I can understand that ng2-translate has gotten a lot of traffic lately. Just found this particular question of mine hadnt been asked before.. #543 . ",
    "yanglongji": "use remote resource instead and wait for fixes . ",
    "yandreiy": "+1\n. ",
    "yoldar": "@dhardtke You saved my day!\n. ",
    "ivancalva": "I had the same error, thank you!\n. ",
    "MrHOY": "or you can set in SystemJS:\nmap: {\n  'ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.js'\n}\npackages: {\n   'ng2-translate': {\n        defaultExtension: 'js'\n      }\n}\nIt work for me! Thanks all!\n. ",
    "huyaxiong": "@dhardtke You saved my day either!\n. ",
    "unsafePtr": "I have been looking for another issues with the same problem and ways to resolve it, but didn't find a way.\nSo exception is:\n\n(index):29 Error: (SystemJS) XHR error (404 Not Found) loading http://localhost:57462/traceur.js(\u2026)\n\nAnd i was uisng below code in systemjs.config.js:\n\n'ng2-translate': 'npm:ng2-translate'\n\nI am using  v3.1.3 of package and Typescript v.2.0.3.\nThe solution one post above advice to provide another path to file:\n\n'ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.js'\n\nBut in my folder doesn't exist such file. In this folder exists another files: index.js, indexd.ts and ng2-translate.d.ts.\nI'm totally destroyed with the error. Can anyone help me?\n. @ocombe Hi, i fixed it before five minutes:\nIn map section:\n\n'ng2-translate': 'npm:ng2-translate'\n\nIn packages section:\n\n\"ng2-translate\": {\n          main: \"bundles/index.js\",\n          defaultExtension: \"js\"\n      }\n\nFile was successfully uploaded, but error doesn't remain. Seems it was fired by another item/package.\nThanks for very fast answer \ud83d\udc4d Have a nice day. \n. @ortichon @ocombe,\nJust understood now that it doesn't works for me. Traceur error continued, and it is fired by ng2-translate.\nHelped to remove \"catch\" from System.import in index file\n\nSystem.import('appTS/main');\n\nThen i received much more helpful exception.\n\nAnd i didn't know how to proceed now. I already spend about 4 hours for this error and it is not resolved. Hope my experience was helpful for someone.\n. @ocombe I have some installed package which name is ng2-ckeditor. SystemJs successfully upload its js file without any errors. The definition in my config for this package:\n'ng2-ckeditor': 'npm:ng2-ckeditor'\n\"ng2-ckeditor\": {\n          main: \"lib/index.js\",\n          defaultExtension: \"js\",\n      }\nThe folder \"lib\" in ng2-ckeditor contains index.d.ts and index.js too.\nMay be for some reason SystemJs get confused and getting to transiple ng2-translate.js file....\n. Navigate this for information. Just my another thought.\n. Fixed it with changing import path in components from \"ng2-translate/ng2-translate\" to \"ng2-translate\".\n. ",
    "ortichon": "@unsafePtr \nThanks, it works for me.\n. ",
    "duongvu89": "That would be nice! Thanks! ;)\n. ",
    "marsanla": "+100\n. ",
    "gniewkos": "+1. ",
    "darkurse": "+1. This fix would be really welcome. ",
    "yoannjauffroy": "+1\n. +1\n. Hello @LizanLycan , \nI solved the problem by modifying the angular-cli.json file : \n\"assets\": [\n  \"assets\",\n  \"favicon.ico\",\n  \"./app/demo/demo/assets\" // add this line\n ]\nIn my case the json file is here : http://localhost:4200/app/demo/demo/assets/i18n/fr.json. ",
    "linxux": "+1\nAny update?. ",
    "supermarcos": "BTW: I know I can do this: this.btnSaveCaption = this._translate.instant(this.btnSaveCaption_saving); for instance... so instantly I can force to change the caption of a button to be another one and that one will be translated regarding the selected language, but that button will lost from then on the ability of \"observe\" language changes... something like the pipe is not working any more for that particular case.\n. Nice! Thank you, @dhardtke! That was very helpful! Now I got it working just \"observing\" onLangChange!\nGreat!\n. ",
    "gamazeps": "Tried it and it doesn't work infortunately.\nThis gives a hard error:\nng2-translate.js:1Uncaught SyntaxError: Unexpected token import\nbootstrap f8a9cd9\u2026:50Uncaught TypeError: Cannot read property 'call' of undefined\nUsed the 'ng2-translate/ng2-translate' in both the vendor and app.module.\nAnd when only using the ng2-tralate/ng2-transate in app.module.ts there is a hard error, the warning given by webpack is still there and the output in the console is:\n[WDS] Warnings while compiling.\nclient:68./~/ng2-translate/bundles/ng2-translate.js\nCritical dependencies:\n1:2208-2215 require function is used in a way in which dependencies cannot be statically extracted\n1:2254-2261 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/ng2-translate/bundles/ng2-translate.js 1:2208-2215 1:2254-2261\nng2-translate.js:1Uncaught SyntaxError: Unexpected token import\n. Using @fabiotisci  method solves the problem, but this is still very hacky :/\n. ",
    "fabiotisci": "Hi,\nI had the same problem. For some reason webpack doesn't like the package. I tried everything, but I finally solved it forking the project, and including in the packages.json the git path. Then with webpack you can import the ts file directly from node_modules and webpack will take care of everything else.\nLet me know if you find a better solution!\nCheers\nFabio\n. Using Webpack 2.1.0-beta.22\nOn Mon, 10 Oct 2016 at 16:47 Peter Luptak notifications@github.com wrote:\n\nare you using webpack1 or webpack2? i had problem with webpack1, but with\nwebpack2 it is working...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/273#issuecomment-252661303,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADE82kv-jvq28Ug8EQCNKBFwaIZhn9xlks5qyl33gaJpZM4KRFo3\n.\n. not great... in order to make the typings work I have to install oCombe package, then 'typings i npm:ng2-translate' and then remove his package from packages.json and replace it for my git repo. Basically a rubbish hack from my behalf!!\n. I tried with a test project generated with angular-cli and worked perfectly\nwell out of the box, but I can't get it to work with angular universal\nwithout my dirty hack\n\nOn Fri, 14 Oct 2016, 07:54 Morgan, notifications@github.com wrote:\n\nHi, I have the same issue :\nWARNING in ./~/ng2-translate/bundles/ng2-translate.js\nCritical dependencies:\n1:2208-2215 require function is used in a way in which dependencies cannot\nbe statically extracted\n1:2254-2261 require function is used in a way in which dependencies cannot\nbe statically extracted\n@ ./~/ng2-translate/bundles/ng2-translate.js 1:2208-2215 1:2254-2261\nFor me it's not a big problem, my application run perfectly with this\nwarning (angular v2.0.1, webpack 1.13.2, ng2-translate 3.1.0).\nBut this kind of messages are always ugly in compilation logs.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ocombe/ng2-translate/issues/273#issuecomment-253723551,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADE82lEGyidaIW9UnAwu1sg-6k9qCoPGks5qzycQgaJpZM4KRFo3\n.\n. Cool, it solves the problem also in Angular Universal. Thanks @ocombe \n. \n",
    "leemason": "having exact same issue, has anyone found a solution that doesnt require forking and hacking?\n. im using webpack 1.12.14, still same issue\n. @ocombe any ideas?\n. ",
    "fgladisch": "+1\nI can't get ng2-translate 3.x.x to work with webpack, either. I get the same errors and warnings as @gamazeps.\n. Unfortunately, the current example in examples/webpack runs with version 2.4.1 of ng2-translate and doesn't work as stated in issue #258... Maybe someone with a working example can open a pull request? I would do it myself, but I have yet to find a solution...\n. I created the pull request #285, which uses the solution from @Redigast13. I couldn't get it to work with awesome-typescript-loader, like @rlopez4 suggested.\n. Version 3.1.3 is working for me, too. Thanks!\n. ",
    "martinsiden": "I'm also facing these issues. Using ng2-translate 3.1.0 and Webpack 1.13.2. \n. Just wanted you guys to know that it works out-of-the-box using this starter. However, that starter does a lot of things differently to what I have been doing, so I haven't been able to pin down whats the breaking change between them yet though. \n. ",
    "pencilpix": "I have the same issue, any solution ?\n. ",
    "kpudlik": "+1 any non-hacky solution?\n. ",
    "alaycock": "On angular 2.0.2 I tested ng2-translate version 3.0.0 through 3.1.2 (which I tested with angular 2.1.0), with no resolution. The last working version for me is 2.5.0.\n. ",
    "murito": "Same, I was able to work with the 2.5.0,with others i have the same issue\n. ",
    "vulcaryn": "Hi, I have the same issue : \nWARNING in ./~/ng2-translate/bundles/ng2-translate.js\nCritical dependencies:\n1:2208-2215 require function is used in a way in which dependencies cannot be statically extracted\n1:2254-2261 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/ng2-translate/bundles/ng2-translate.js 1:2208-2215 1:2254-2261\nFor me it's not a big problem, my application run perfectly with this warning (angular v2.0.1, webpack 1.13.2, ng2-translate 3.1.0). \nBut this kind of messages are always ugly in compilation logs.\n. ",
    "Redigast13": "I had the same issue. Solution:\n1. Replace all import { ... } from 'ng2-translate'; to import { ... } from 'ng2-translate/ng2-translate';\n2. Add babel loader for js files because node_modules/ng2-translate/ng2-translate.js file has ECMA 6 syntax.\nHere is my webpack loader configuration:\n{\n    test: /\\.js$/,\n    include: /ng2-translate/,           \n    loader: 'babel',\n    query: {\n        presets: ['es2015']\n    }\n}\n. ",
    "rlopez4": "Thanks for the suggestion @Redigast13. I actually just re-used the typescript loader so I wouldn't have to add babel. Here's the loader configuration I added: \njavascript\n      {\n        test: /\\.js$/,\n        include: /ng2-translate/,\n        loader: 'awesome-typescript-loader'\n      },\n. If you are still importing like so from 'ng2-translate/ng2-translate'; than you can just remove the second ng2-translate and it should work. \n. ",
    "flycat52": "Thanks @rlopez4 . It really works!!\n. I upgraded to version 3.1.3, add below code to my webpack.dev.js\n{\n                test: /\\.js$/,\n                include: /ng2-translate/,\n                loader: 'awesome-typescript-loader'\n            },\nI can run the project even with below errors:\nERROR in [default] \nFile 'C:/Projects/.../node_modules/ng2-translate/ng2-translate.js' has unsupported extension. The only supported extensions are '.ts', '.tsx', '.d.ts'.\nERROR in [default] \nFile 'C:/Projects/.../node_modules/ng2-translate/src/translate.parser.js' has unsupported extension. The only supported extensions are '.ts', '.tsx', '.d.ts'.\nERROR in [default] \nFile 'C:/Projects/.../node_modules/ng2-translate/src/translate.pipe.js' has unsupported extension. The only supported extensions are '.ts', '.tsx', '.d.ts'.\nERROR in [default] \nFile 'C:/Projects/.../node_modules/ng2-translate/src/translate.service.js' has unsupported extension. The only supported extensions are '.ts', '.tsx', '.d.ts'.\nAny updates to remove such errors?\n. Thanks @ocombe for the quick reply. I changed to /.ts$/, it was built without error. However, when I run the project, it still gives me \"Unexpected token import\" error.\n\n\nAny other idea?\nThanks!\n. @rlopez4 It's correct!! No build error or running error. Thanks!\n. ",
    "aitboudad": "@ocombe see my fix for ng2-formly https://github.com/formly-js/ng2-formly/pull/126\n. That's good to know. thanks!\n. I want to use https://github.com/messageformat/messageformat.js for pluralization, is that possible?\n. see https://github.com/ocombe/ng2-translate/pull/345 for DefaultParser. ping @ocombe. @SamVerschueren I'm using messageformat, just looks at the provided example and you'll see the use case. now it should be ok. ",
    "bevrard": "Hi,\nI'm still having an issue with version 3.1.3 and webpack 1.13.3:\nUncaught SyntaxError: Unexpected token export\n    at Object.<anonymous> (http://localhost/js/vendor.js:3587:2)\n    at __webpack_require__ (http://localhost/js/polyfills.js:51:30)\n    at eval (eval at <anonymous> (http://localhost/js/vendor.js:3581:2), <anonymous>:10:1)\n    at Object.<anonymous> (http://localhost/js/vendor.js:3581:2)\n    at __webpack_require__ (http://localhost/js/polyfills.js:51:30)\n    at Object.<anonymous> (http://localhost/js/vendor.js:6:19)\n    at __webpack_require__ (http://localhost/js/polyfills.js:51:30)\n    at webpackJsonpCallback (http://localhost/js/polyfills.js:22:20)\n    at http://localhost/js/vendor.js:1:1\nlocalhost/:38 Uncaught TypeError: Cannot read property 'forRoot' of undefined(\u2026)\nIn the NgModule : \n```\nimport {TranslateLoader, TranslateStaticLoader, TranslateModule} from \"ng2-translate/ng2-translate\";\nTranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (http: Http) => new TranslateStaticLoader(http, ResourceService.RESOURCE_URL, '.jsonProperties'),\n            deps: [Http]\n        }),\n```\nin my vendor.ts:\nimport 'ng2-translate/ng2-translate';\nand finally I'm using the translateService in my component:\nimport {TranslateService} from \"ng2-translate\";\nDo you have an idea? \n. Thanks :) \n. ",
    "tim545": "Hey @paulcayon I had the same issue as you, I looked back through the history of the code and saw that the module loader had been switched from \"commonjs\" to \"ES2015\":\nhttps://github.com/ocombe/ng2-translate/commit/ebcf7e83ecb1045cd996fd18029ecf8e002d13ba#diff-e5e546dd2eb0351f813d63d1b39dbc48L4\nI assumed this was done intentionally so there wouldn't be an intention to switch it back (I suppose potentially other projects would break if they did).\nFrom what I've seen the latest beta version of webpack 2 apparently solves this issue, personally I'm still using webpack 1.x because I want to wait for 2 to come out of beta first. So instead for the meantime I just forked the project and changed the tsconfig to use commonjs modules instead until I can update to webpack 2. You can set your package.json to load your forked package from the github tarball, like so:\n\"ng2-translate\": \"https://github.com/tim545/ng2-translate/archive/v3.1.1.tar.gz\"\nThere's just one little caveat, in the ng2-translate package.json you need to add a version property or npm will complain, and then create a release for it in github so you can get a url like the one above.\nIt's not a great solution but it works for now, however I would like to know if it could be switched back...?\n. ",
    "paulcayon": "@tim545 Thanks for answer. I will try to use webpack 2.\nI can't make a dependency with a github link, because I work for a bank, and it don't allow this ... I have to use a Nexus to download dependencies. Thanks to shared your version. I'm sure that it will be useful for some other persons.\n. ",
    "n00dl3": "I sucessfully used webpack 1.13.2 to load the module using babel-loader with this module config :\nshell\nnpm install babel-core babel-loader babel-plugin-transform-es2015-modules-commonjs\njavascript\n    {\n      test: /ng2-translate\\/.*\\.js$/,\n      loader: \"babel-loader\",\n      query:{\n        \"plugins\": [\"transform-es2015-modules-commonjs\"]\n      }\n    }\n@ocombe maybe you could document this in the README.md for webpack users ?\n. Just one question, I've seen you're french , like me (qui ne saute pas, n'est pas Lyonnais ! ^ ^). Will I meet you at ng-europe next week ?\n. hmm... I realize that could be done by removing every translations and using the MissingTranslationHandler..... ",
    "duydao": "@Bouzmine I'm having the same problem. Did you find a workaround?\n. ",
    "biesbjerg": "I think this is a problem with the wkwebview plugin. See https://github.com/driftyco/cordova-plugin-wkwebview-engine/issues/78\n. This should be solved now. Uninstall wkwebview and install it again.. Cool!\nThis could probably be hacked to get something working pretty quickly: https://github.com/bcabanes/gulp-angular-translate-extract/blob/master/modules/extractTranslations.js\nMight give it a shot myself:-). Do you have any work in a public repo? I'm curious too have you're planning to do it. Using gulp? Custom scripts? Something else?. I've started working on something as well. \nAt this time it extracts strings from templates that are using TranslatePipe and from Typescript files when methods get and instant are used.\nIt can save extracted strings to either a json file or a pot file.\nhttps://github.com/biesbjerg/ng2-translate-extract. This is just an initial attempt and I'll probably keep working on it, but go ahead!. I've added a commandline script and published an NPM package, if anyone is interested in trying it out:\nhttps://www.npmjs.com/package/@biesbjerg/ng2-translate-extract. Hi!\nI probably did a poor job at explaining what I'm trying to achieve. I'm not trying to have dynamic keys.\nThis is how you recommend doing translations in the docs with params:\n{\n  \"SOME_KEY\": \"This translations has a param: {{param}}\"\n}\nI don't want to use made up keys, but use the actual english strings. My JSON translation file would look like this (for danish translation):\n{\n  \"This translations has a param: {{param}}\": \"Denne overs\u00e6ttelse indeholder et parameter: {{param}}\"\n}\nAngular template parser trips over this:\n{{ 'This translations has a param: {{param}}' | translate: { param: 'Some value' } }}\n... which is understandable, but also why I'm raising this issue to debate if params should be marked differently to not confuse the parser.\nHope I explained it better this time!\nSidenote: concatenating translatable strings and variables is a bad idea. It will go wrong. Some translations will need to rearrange the words and variables to make sense in that language. Not related to my issue though, just thought I'd mention it :-). A little context:\nI usually work with po-files (Gettext), where msgid is the full untranslated string in the base language. \nWe use a translation service and the translators have never seen our app and wouldn't know what any of my made up keys means, making it impossible to do a proper translation.\nReasons (some subjective?) for using 'real strings' as translation keys in a project:\n- Code is easier to read\n- If you want to change the English text, you just change the english translation.\n- Text in your code is very close, if not identical, to what is shown in your app\n- Possible for an external translators to make sense of the strings and translate it. Can you mock the JSON file for your example to help me understand?\nI don't understand how your example would work with future extraction of strings, if the extracted key is not going to be Hello {{value}}.\nThe solution could be to change interpolation start/end chars from {{value}} to, I dunno, {value}?\nPros:\n- It can be extracted by tools\n- It does not trip up Angular parser\nCons:\n- It's a different syntax for params, but it is possible to add in a backwards compatible way.\n. Can't say I totally agree on the approach (but this is your work, not mine, so please take my words merely as input, not criticism).\nI would prefer if it worked more like gettext:\n\nOriginal string is in base language in the language file\nString is interpolated with params after it is fetched from language file\nMeaning of translation ID is totally clear to external translators because it is the original string, not a made up one like HOME_WELCOME_USER\nAuto extraction will work for all strings\n\nThe approach you describe doesn't solve #3 as far as I can see.. You're right regarding the json format. I actually wrote a KeyValueTranslateLoader, that use a file format that my translation service can work with. Gettext would be optimal though, so might write a loader for po-files, when I find a solution for auto extracting strings.. If you want, you can close this. It's possible to use real strings as base language (with working interpolation) using custom TranslateParser and MissingTranslationHandler, although it's not trivial to do for beginners.\napp/app.module.ts\n```ts\nimport { TranslateModule, TranslateLoader } from 'ng2-translate';\nimport { TRANSLATE_PROVIDERS, translateLoaderFactory } from '../i18n';\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        IonicModule.forRoot(AppComponent),\n        SharedModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: translateLoaderFactory,\n            deps: [Http]\n        })\n    ],\n    bootstrap: [\n        IonicApp\n    ],\n    entryComponents: [\n        AppComponent\n    ],\n    providers: [\n        ...TRANSLATE_PROVIDERS\n    ]\n})\nexport class AppModule {\n}\n```\ni18n/index.ts\n```ts\nimport { Http } from '@angular/http';\nimport {\n    TranslateParser,\n    DefaultTranslateParser,\n    MissingTranslationHandler,\n    MissingTranslationHandlerParams } from 'ng2-translate';\nimport { TranslatePoLoader } from '@biesbjerg/ng2-translate-po-loader';\nexport class InterpolatedTranslateParser extends DefaultTranslateParser {\n    public templateMatcher: RegExp = /{\\s?([^{}\\s]*)\\s?}/g;\n}\nexport class InterpolatedMissingTranslationHandler implements MissingTranslationHandler {\n    public parser: TranslateParser = translateParserFactory();\n    public handle(params: MissingTranslationHandlerParams) {\n        // return params.translateService.parser.interpolate(params.key, params.interpolateParams);\n        // Workaround until this PR is merged: https://github.com/ocombe/ng2-translate/pull/348\n        return this.parser.interpolate(params.key, params.interpolateParams);\n    }\n}\nexport function translateParserFactory() {\n    return new InterpolatedTranslateParser();\n}\nexport function translateLoaderFactory(http: Http) {\n    return new TranslatePoLoader(http, 'assets/i18n');\n}\nexport const TRANSLATE_PROVIDERS = [\n    { provide: TranslateParser, useFactory: translateParserFactory },\n    { provide: MissingTranslationHandler, useClass: InterpolatedMissingTranslationHandler }\n];\n```. Yes, you need to use:\nHello {name}\n(Sorry, I'm on mobile)\n. Thanks!\nI decided to publish under a name namespace instead, can you update the README?\nThe new package location is https://www.npmjs.com/package/@biesbjerg/ng2-translate-po-loader\nSorry for the trouble!. Huh, it seems it is exported as just Parser and no (apparant) way to import DefaultParser.\nIs that intentional? I'd like to extend DefaultParser to change templateMatcher regexp.. Nice :-) And awesome that we'll be able to customize parser - That should solve my issue with wanting to use 'This is a { value\u00a0}' message keys in templates :-). I thought about using the MissingTranslationHandler and interpolate the params there, but the TranslateParser is not exposed in MissingTranslationHandler since it's private so there's no way to access the interpolation method.\nIf parser were changed from private to public something like this would be possible:\nexport class InterpolatedMissingTranslationHandler implements MissingTranslationHandler {\n    public handle(params: MissingTranslationHandlerParams) {\n        return params.translateService.parser.interpolate(params.key, params.interpolateParams);\n    }\n}. Which do you prefer?\n1. Support interpolation in MissingTranslationHandler only\n1.1. Make TranslationService's parser property public, and thus accessible through params.translationService.parser <-- (I think this makes most sense, since loader is already public)\n1.2. Make TranslationParser accessible via params.translationParser (just like params.translationService)\n2. Support interpolation for keys always\n2.1 Always interpolate missing translation keys. Pull request opened: https://github.com/ocombe/ng2-translate/pull/348/files. Yes. Related ticket https://github.com/ocombe/ng2-translate/issues/347. @cvaliere I did. https://github.com/ngx-translate/core/issues/340#issuecomment-265156635. @cvaliere I don't use translateParams so I haven't looked at why it doesn't work. Seems weird that it doesn't!. I have this code in my app without any issues:\n<button ion-item detail-none (click)=\"onLogout()\">\n    <ion-icon name=\"log-out\" item-left></ion-icon>\n    {{\u00a0'Log out ({ email })' |\u00a0translate: { email: (user$ | async)?.email } }}\n</button>. ",
    "timfogarty1549": "SystemJS is not used in AoT\nhere is my tsconfig-aot.js (while there is a tsconfig.js for JiT for development)\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n\"files\": [\n    \"app/appModule.ts\",\n    \"app/main-aot.ts\",\n    \"./typings/index.d.ts\"\n],\n\n\"angularCompilerOptions\": {\n    \"genDir\": \"aot\",\n    \"skipMetadataEmit\" : true\n}\n\n}\n```\nand in package.json\n{\n  \"scripts\": {\n...\n    \"aot\": \"node_modules/.bin/ngc -p tsconfig-aot.json\",\n...\n   }\n}\nhere is main-aot.ts. (while main.ts is configured for JiT for development)\n```\nimport { platformBrowser }    from '@angular/platform-browser';\nimport { AppModuleNgFactory } from '../aot/app/appModule.ngfactory';\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n```\nall followling the angular.io AoT manual\nhttps://angular.io/docs/ts/latest/cookbook/aot-compiler.html\n. ",
    "zackarychapple": "@SamVerschueren using the angular-cli i still have this issue on the latest version.  i'm on 3.1.3 and tried doing the imports as import { TranslateService } from 'ng2-translate'; my import is the standard ngModule import of TranslateModule.forRoot(), @ocombe \n. So as per @SamVerschueren's documentation in the repo it is actually a requirement to use the following even if you are using the standard loader apparently. This did get it working for me.  Thank you! \nTranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    }),\n. @SamVerschueren I was trying to use without the config as well. \n. ",
    "reaction1989": "@SamVerschueren i would suggest you to look into the Router from angular. They use forRoot too\nexport declare class RouterModule {\n    static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders;\n}\nAnd here you just use any. Perhaps changing this will help?\n. ",
    "KarolBuchta": "I am using ngx-translate 7.00, having the same issue. I tried the workaround, and still get an error when compiling with ngc.\nSee here: #578 . Having the exact same issue with ngc, on ngx-translate 7.0.0. Not specifying a config, just calling TranslateModule.forRoot(), with the workaround from the docu it doesn't work as well.\nI am using:\n\"@angular/compiler\": \"4.2.6\",\n    \"@angular/compiler-cli\": \"4.2.6\",\n    \"@ngx-translate/core\": \"7.0.0\",\nStill the same error.\nError encountered resolving symbol values statically. Calling function 'TranslateModule', function calls are not supported. Consider replacing the function or lambda with a reference to an exported function, resolving symbol.... @narendravyas @leNicDev Was one of you able to fix this with a workaround somehow? I am stuck here, and really don't want to postpone this task.. ",
    "un33k": "It took a while to debug a case where the JSON file was invalid.  It would be great if we have a way to catch that scenario as well and raise a meaningful exception.. @Micha-kun why don't you just create a service for fetching via api, then cache it on the first fetch.\n. Yes. Compiled all json files into a single object in a TS file that gets compiled in. Wrote a loader for pulling the ts file instead. . @arturhun you can look at @nwx/i18n which is a wrapper module around ngx-translate. \nThe custom loader for testing is found here.\nCache busting logic is found here\nHope this helps.. ",
    "abennouna": "A workaround approach would be:\n```\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/catch';\n...\npublic translate: TranslateService;\npublic http: Http;\n...\ninitI18n(): Promise {\n  // Set the default language for translation strings.\n  let defaultLanguage = 'en';\n  this.translate.setDefaultLang(defaultLanguage);\n// Detect user language.\n  let browserLang = this.translate.getBrowserLang();\n// Try to load the I18N JSON file for the detected language\n  return new Promise((resolve, reject) => {\n    this.http.get(./assets/i18n/${browserLang}.json)\n      .catch((error: any) => {\n        // I18N File failed to load, fall back to default language\n        this.translate.use(defaultLanguage);\n        resolve(true);\n    return Observable.throw(error);\n  })\n  .subscribe((data) => {\n    // I18N File loaded successfully, we can proceed\n    this.translate.use(browserLang);\n    resolve(true);\n  });\n\n});\n}\n```. ",
    "urffin": "@abennouna, but in this case json file should be loaded manually, just for checking exists.. @ocombe, but you can see in plunkr above, that i not go to catch after use. and not see in console output log. Just unhandled errors.\nSo \n\nIf it's use then it returns an observable and you can use catch on it.\n\nSeems wrong. Or possibly i use catch in wrong way?. @SamVerschueren, but loading started without subscribing, so why we need indeed sbuscribe instead catch?. ",
    "pawwach": "You're right, I changed \"declension\" to \"pluralization\".\n. @aitboudad No, unfortunately not. It's my own solution, pretty simple. But your question inspired me to introduce one more improvement: named pluralization rules. In current solution, you can use one pluralization rule per one language. If named pluralization rules will be added, you will be able to define another rule for pluralization and another for handling ordinal numbers. For example:\nI have {{value}} cat{{@value(|s)}} => I have 1 cat, I have 2 cats etc. (default pluralization rule for English)\nMy {{\"ruleName\"@value(st|nd|rd|th)}} cat is very cute => i.e. My 2nd cat is very cute (named pluralization rule \"ruleName\" for English)\nRules still will have to be defined in code (when ng2-translate is initialized). I think that placing them in JSON files is bad idea.\nOf course syntax is negotiable issue.\n. ",
    "tommueller": "Is the pluralization done by now?\n// Edit: Forget this, I managed to get working the way @DethAriel suggested. Thanks!. I am also wondering about this. Could anyone please share some insight? :+1: . I use a little script build around https://www.npmjs.com/package/merge-json\nIt is very simple, but I can post it tomorrow if you need some inspiration. The pitfall is, that the languages are outsourced to a separate repository, which makes maintaining easy, but requires some additional steps in the workflow to get changes into the actual app .... ",
    "hstarorg": "Got it, very thanks.\n. Also has a question.\njavascript\nroot[\"ng2-translate\"] = factory(root[\"@angular/core\"], root[\"@angular/http\"], root[\"rxjs/Observable\"], root[\"rxjs/add/observable/of\"], root[\"rxjs/add/operator/map\"], root[\"rxjs/add/operator/merge\"], root[\"rxjs/add/operator/share\"], root[\"rxjs/add/operator/toArray\"]);\nIf I don not use amd and cmd loader, it is not work.\nI update it to \njavascript\nroot[\"ng2-translate\"] = factory(root.ng.core, root.ng.http, root.Rx.Observable, root.Rx.Observable['of'], root.Rx.Observable.prototype.map, root.Rx.Observable.prototype.merge, root.Rx.Observable.prototype.share, root.Rx.Observable.prototype.toArray);\nin my project.\n. factory(root.ng.core, root.ng.http, root.Rx.Observable, ...) need update to factory(root.ng.core, root.ng.http, root.Rx, ...)\n. Thank you, I only used the javascript angular2. I used webpack and gulp for build.\nwebpack.conf.js\njavascript\nexternals: {\n    'rxjs': 'Rx',\n    '@angular/common': 'ng.common',\n    '@angular/compiler': 'ng.compiler',\n    '@angular/core': 'ng.core',\n    '@angular/http': 'ng.http',\n    '@angular/platform-browser': 'ng.platformBrowser',\n    '@angular/platform-browser-dynamic': 'ng.platformBrowserDynamic',\n    '@angular/router': 'ng.router',\n    '@angular/forms': 'ng.forms',\n    'ng2-translate': 'window[\"ng2-translate\"]'\n  },\ngulp.js\n``` javascript\ngulp.task('build:vendor.js', () => {\n      return gulp.src([\n        'node_modules/zone.js/dist/zone.js', //min\n        'node_modules/rxjs/bundles/Rx.js', //min\n        'node_modules/reflect-metadata/Reflect.js',\n        'node_modules/@angular/core/bundles/core.umd.js', //min\n        'node_modules/@angular/compiler/bundles/compiler.umd.js', //min\n        'node_modules/@angular/common/bundles/common.umd.js', //min\n        'node_modules/@angular/platform-browser/bundles/platform-browser.umd.js', //min\n        'node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js', //min\n        'node_modules/@angular/router/bundles/router.umd.js', //min\n        'node_modules/@angular/forms/bundles/forms.umd.js', //min\n        'node_modules/@angular/http/bundles/http.umd.js', //min\n    'node_modules/ng2-translate/bundles/ng2-translate.umd.js'\n  ])\n    .pipe(concat('vendor.js'))\n    .pipe(gulp.dest('./dist/assets/js'));\n});\n\n```\nSo it dependency the global Rx and ng\n. I\u2018m sorry, I can not distinguish who should resolve it.\nIn fact, I can use gulp process the ng2-translate.umd.js.\n. @ocombe thanks, I can do this. Only because I use gulp concat all the js libs:\n``` javascript\ngulp.task('build:vendor.js', () => {\n      return gulp.src([\n        'node_modules/zone.js/dist/zone.js', //min\n        'node_modules/rxjs/bundles/Rx.js', //min\n        'node_modules/reflect-metadata/Reflect.js',\n        'node_modules/@angular/core/bundles/core.umd.js', //min\n        'node_modules/@angular/compiler/bundles/compiler.umd.js', //min\n        'node_modules/@angular/common/bundles/common.umd.js', //min\n        'node_modules/@angular/platform-browser/bundles/platform-browser.umd.js', //min\n        'node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js', //min\n        'node_modules/@angular/router/bundles/router.umd.js', //min\n        'node_modules/@angular/forms/bundles/forms.umd.js', //min\n        'node_modules/@angular/http/bundles/http.umd.js', //min\n    'node_modules/ng2-translate/bundles/ng2-translate.umd.js'\n  ])\n    .pipe(concat('vendor.js'))\n    .pipe(gulp.dest('./dist/assets/js'));\n});\n\n```\n. ",
    "kristian-b": "Hello,\nusing the loader config from ocombe and changing the imports from ng2-translate/ng2-translate to ng2-translate was the solution for me too. Now I have a lot of notices but it works.\nThank you, you can close it.\n. ",
    "jnah": "not working for ng2 2.0.0 (systemJS:\n(index):27 Error: (SystemJS) XHR error (404 Not Found) loading http://localhost:3000/traceur(\u2026) \n. ",
    "eisverticker": "I also had some trouble upgrading ng2-translate to the newest version and i also got those systemjs and traceur errors. The only configuration which seems to work for me is the following:\n'ng2-translate':              'npm:ng2-translate/bundles/index.js'\nAll dependencies and angular2 are up to date.\nIn my opinion it would be easier to have a ng2-translate/ng2-translate.js file which satisfies the needs of systemjs and the transpiler so the configuration could be as easy as: 'ng2-translate':              'npm:ng2-translate'. \n. Same problem here, i am just using the forChild method in a SharedModule and thus getting the same runtime error (no provider for TranslateStore). \nI tried all ngx-translate versions but the problem was still there. Currently i am using @RostyslavAH's workaround. ",
    "MetinAgar": "Angular quick start dont work, Dissapointed. ",
    "Mossar": "Okay thank you. At the beginning we've put JSONs into src/app/shared directory (our own directory for shared modules, etc.) so it wasn't added do bundle by angular-cli. Now we put JSONs in  src/assets directory and it of course works well. Sorry for confusion.\n. ",
    "Mohammed9531": "@SamVerschueren  I'm using Webpack.\n. @tejashreeKate @SamVerschueren solution works like a charm.  Closing this issue as resolved. \n. ",
    "tzoratto": "same problem here and solved by @SamVerschueren 's solution, thanks.\n. Thanks for the report as I was struggling with large memory leak issues in a medium-size app for some days now.\nIn fact, because of this memory leak you reported, the component (and ALL its children) subscribing (through async pipe in my case) to the observable from the .stream() call wasn't properly removed from memory (even after a garbage collector).\nIt can cause very large memory leak when you have some big nested components.\nBy the way thanks for the workaround, I have written a simple helper function which I use everywhere I was using .stream() previously :\nexport function streamTranslate(translateService: TranslateService, keys: string | Array<string>, params?: any): Observable<any> {\n    return translateService.onLangChange.pipe(\n        startWith({}),\n        switchMap(() => params ? translateService.get(keys, params) : translateService.get(keys))\n    );\n}. ",
    "tejashreeKate": "I am having the same problem when I am trying to run the app on server.\nCan someone please post the solution?\n. ",
    "pndewit": "Not really sure if I understand your setup correctly, but I think you are missing the key of the translation parameter you are trying to pass along.\nWhen you have the following en.json:\n{\n    \"test1\": \"My value is: {{value}}\"\n}\nEvery time you try to translate the key: test1, you need to specify this key and the value you want {{value}} to be translated with. So a correct call would be:\ntranslateService.get('test1', {value: 'something'}).subscribe(res => {\n   console.log('The result is:', res);\n});\nThe {value: 'something'} is necessary as you could also want to pass along multiple parameters like so:\nen.json:\n{\n    \"test1\": \"My first value is: {{value1}}, my second value is: {{value2}}\"\n}\ncomponent:\ntranslateService.get('test1', {value1: 'something', value2: 'something else'}).subscribe(res => {\n   console.log('The result is:', res);\n});\nI also made a Plunker to demonstrate your desired behaviour: http://plnkr.co/edit/jubRTLSmEryVAUA3xArW?p=preview. I could help with a PR if you like!\nIf anyone faces the same issue. A simple workaround is doing a use for the fallback language before setting it to the initial language (e.g. browser's language):\n```\nTranslateService.setDefaultLang('en');\nTranslateService.use('en');\nlet browserLang = TranslateService.getBrowserLang();\nTranslateService.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n```. What's the status of this PR? Found some time to review it? :). http://plnkr.co/edit/mwE3PCTo7PTlMgH7ljIQ?p=preview\nSee my Plunker (especially the console output ;)). Ahhh! This works for me though, thanks!\nHaven't checked out your code yet, will do so soon!\nLove your app, thanks for all the effort you put into this!. @ocombe Must have been due to another commit. Got to love it when an issue solves itself \ud83d\udc4d \n@aidanmischke The quotes around each param name didn't work for me, but moving them to the entire object did: {{ 'value' | translate: '{ param: param1, otherparam: param2 }' }}. @ocombe Ahhh right, my bad! Shall I revert the commit?. Done. :). @ocombe Thank you for your feedback! No worries, this is the kind of feedback I can use. We all want the same thing, to make it as good as we can! :)\nTo get back on your 3 points of attention:\n1. You are completely right, didn't think of that. Will update the PR!\n2. I see what you mean and I tried to do it without the default lang changed event. The problem is though that I need to inform the component to update all keys when the default language changes (like with a normal use updates all translations as well). I could \"abuse\" the event that is already there for the use to update all translations. But this could lead to some strange behaviour (e.g. waiting for a use to finish, but getting a default lang changed event in between).\nThanks for the compliment btw! :). Removed the default language to be 'en'. Moved the logics that I put into setDefaultLang (which is not really functionality for a setter function) to the getParsedResult function. Also updated the unit tests to reflect the changes.. 1. Conflicts are merged\n2. Updated new directive and added some extra unit tests (also for the new subscription). This made me realise that moving the get default language translations from setDefaultLang to getParsedResult was wrong. Setting the default language should emit an event with the translations for the default language. In theory the setDefaultLang function should work about the same way as the use function. So I moved it back to setDefaultLang (but left out the part from getParsedResult where it set the default lang to 'en' of course).\n3. Added documentation about the new event in the README.md\nThanks for your help!!. @ocombe Updated PR, removed the translations argument from the DefaultLangChange events in the pipe and the directive.. It's ready to be merged. Let me know if I am missing something!. @ocombe Can this be merged?. @ocombe Is this on hold/waiting for something?. No worries, not trying to insult or push you. I was just wondering what the status was.. Nice, great work!. You are right that changing the default lang is not changing the current lang, but it could potentially change any of the values right?\nI mean, we could implement something which only checks the translations that are not translated yet (displaying the translation's key). That would make it more efficient, but would also require some more effort.. Ah, you are so right!! Will update it immediately! Thanks!. FAILED TESTS:\n  TranslateDirective\n    \u2716 should update the DOM when the default lang changes\n      Chrome 54.0.2840 (Mac OS X 10.12.1)\n    Expected 'TEST' to equal 'This is a test'.\n        at Object. (webpack:///tests/translate.directive.spec.ts?f2bc:115:0 <- config/spec-bundle.js:72492:73)\nSeems like it is not updating the keys now any more.. Seems like I forgot to add tests for the pipe as well when the default lang changes. Added those to check if it does work there without the translations appended to the updateValue call and it does work there. Maybe an error in the checkNodes function in the directive?. So what do you suggest? Shall I disable the test for now so that the PR can be merged (as it functionally works) and the tests can be updated after to not change the DOM manually?. ",
    "eemeli": "npm unpublish is the command you're looking for, but that's probably not what you really want. Would recommend reverting 481365d and then re-publishing that as 3.2.1, and then re-publishing 3.2.0 (possibly with other API changes) as 4.0.0.\n. ",
    "maxkarpovets": "Can I import in once to AppModule and use it in all child modules? \n. Thanks! \n. ",
    "amcdnl": "@SamVerschueren - chk this out https://github.com/swimlane/ng1-ng2-webpack-lazy-uirouter\n. ",
    "IonPopescu": "I made it work like this:\nupgradeAdapter.upgradeNg1Provider('$rootScope')\nthen \n```\nexport class AppModule {\nconstructor(\n    private translateService: TranslateService,\n    @Inject('$rootScope') private _rootScope: any\n){ \n    this.translateService.addLangs([\"en\", ...]);\n    this.translateService.setDefaultLang('en');\n    this._rootScope.$watch('currentLanguage', language => {\n        this.translateService.use(\"api/localization/\" + language); \n    });\n}\n\nngDoBootstrap() {}\n\n}\n```\n. ",
    "lionelB": "@IonPopescu Hello, I 'm currently working on a hybrid app. my angularJs (using angular-gettext) and angular(ngx-translate). I'm having  translation problem when I want to downgrade an angular component used in an angularJs component.\nDo you managed to make it work ?\nthanks\n. ",
    "jdcrecur": "Ha ok thanks for the lightning fast response.\nIt was indeed \nimport {TranslateService} from 'ng2-translate/ng2-translate';\nConverting it to worked.\nimport {TranslateService} from 'ng2-translate';\nThanks!\n. Straight from the plunker you link to in your readme.md :)\nhttp://plnkr.co/edit/btpW3l0jr5beJVjohy1Q?p=preview\n```\nimport {Component} from '@angular/core';\nimport {TranslateService} from 'ng2-translate/ng2-translate';\n@Component({\n    selector: 'my-app',\n    template: <div>\n      <h2>{{ 'HOME.TITLE' | translate }}</h2>\n      <label>\n        {{ 'HOME.SELECT' | translate }}\n        <select #langSelect (change)=\"translate.use(langSelect.value)\">\n          <option *ngFor=\"let lang of translate.getLangs()\" [value]=\"lang\" [selected]=\"lang === translate.currentLang\">{{ lang }}</option>\n        </select>\n      </label>\n    </div>,\n})\nexport class AppComponent {\n    constructor(private translate: TranslateService) {\n        translate.addLangs([\"en\", \"fr\"]);\n        translate.setDefaultLang('en');\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n}\n\n}\n```\n. I've inherited this ang2 project and completely fresh to typescript...\nMy guess is the plunker is using ever so slightly different version of something. below is a complete list of the package.json from the project. The webpack in use is the webpackdev server if that helps in any way :)\nThe setup is gulp preps the rel. files, webpack then builds and on dev delivers with webpackdev server.\n```\n\"scripts\": {\n    \"run\": \"concurrently --kill-others 'gulp' 'webpack-dev-server --d --display-reasons --display-modules'\",\n    \"build\": \"webpack --config config/webpack.live.js --profile --bail\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.1.0\",\n    \"@angular/compiler\": \"2.1.0\",\n    \"@angular/core\": \"2.1.0\",\n    \"@angular/forms\": \"2.1.0\",\n    \"@angular/http\": \"2.1.0\",\n    \"@angular/platform-browser\": \"2.1.0\",\n    \"@angular/platform-browser-dynamic\": \"2.1.0\",\n    \"@angular/router\": \"3.1.0\",\n    \"@ngrx/core\": \"1.2.0\",\n    \"@ngrx/store\": \"2.2.1\",\n    \"angular-pipes\": \"^2.0.5\",\n    \"angular2-infinite-scroll\": \"^0.1.92\",\n    \"angular2-moment\": \"^0.8.1\",\n    \"angular2-template-loader\": \"^0.5.0\",\n    \"ckeditor\": \"^4.5.8\",\n    \"core-js\": \"^2.4.0\",\n    \"moment\": \"^2.6.0\",\n    \"moment-timezone\": \"^0.5.6\",\n    \"ng2-bootstrap\": \"1.1.16\",\n    \"ng2-ckeditor\": \"^1.0.3\",\n    \"ng2-dnd\": \"^2.0.1\",\n    \"ng2-file-upload\": \"1.0.3\",\n    \"ng2-page-scroll\": \"3.2.1\",\n    \"ng2-translate\": \"^4.0.0\",\n    \"reflect-metadata\": \"^0.1.3\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"zone.js\": \"^0.6.26\"\n  },\n  \"devDependencies\": {\n    \"@angular/upgrade\": \"2.0.0-rc.4\",\n    \"@ngrx/store-devtools\": \"3.0.2\",\n    \"@ngrx/store-log-monitor\": \"3.0.2\",\n    \"babelify\": \"^6.1\",\n    \"bootstrap\": \"4.0.0-alpha.3\",\n    \"browser-sync\": \"^2.13.0\",\n    \"browserify\": \"^13.0\",\n    \"concurrently\": \"^2.2.0\",\n    \"connect-history-api-fallback\": \"^1.2.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"gulp-jsonminify\": \"1.0.0\",\n    \"gulp-nunjucks-render\": \"^2.0.0\",\n    \"gulp-rename\": \"^1.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-typescript\": \"^3.1.2\",\n    \"gulp-uncss\": \"^1.0.5\",\n    \"json-loader\": \"^0.5.4\",\n    \"merge-stream\": \"^1.0.0\",\n    \"nunjucks\": \"^2.4.2\",\n    \"raw-loader\": \"^0.5.1\",\n    \"ts\": \"0.0.0\",\n    \"ts-loader\": \"^0.8.2\",\n    \"typescript\": \"^2.0.6\",\n    \"typings\": \"^1.5.0\",\n    \"vinyl-source-stream\": \"^1.1\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-merge\": \"^0.14.1\"\n  }\n```\n. ",
    "sstorie": "FWIW I ran into this error message when I was exporting the TranslateModule from a shared module, but forgot to import it into that shared module.. ",
    "imgx64": "I submitted a PR to fix this issue. I used mergeMap instead of Observable.create and it worked. I'm not sure why, but the Observable.create closure was being called with a stopped observer.\n. Ok, I found the root issue. getTranslation was using share() which was creating a hot observable, and then immediately subscribing to it. Once this subscription was done, the pending observable stopped because there are no more subscribers. Any subscribers afterwards were ignored.\n. TranslateService.getTranslation gets called only once the first time a language is used (or if you explicitly call it or call reloadLang). It doesn't get called for every translated word.\nBut even if getTranslation is called multiple times, it would still do multiple HTTP requests even with the share, because it's creating a new observable every time it's called, not reusing the shared observable.\nI don't think share is what you want. share uses refCount, so once all subscriptions are done, the shared observable unsubscribes from the original (http) observable and stops emitting. Any observers that subscribe afterwards simply never get called (neither onNext nor onComplete).\n. Okay. I found the root root root issue!\nIt's a bug in RxJS (https://github.com/ReactiveX/rxjs/issues/2145) that affects hot observables. I've added a PR that fixes this bug without removing the share().\n. Don't merge this. #312 is better\n. Don't merge this, #329 fixes this without removing share().\n. ",
    "prp1": "It worked. Thank you!\n. ",
    "frankspin89": "Hello Sam,\nThanks for your response. I think I need both options you propose. What do you suggest to print a invoice to a pdf from my component? \n. ",
    "luigidallavalle": "I'm having the same issue as well:\nif the language setting\nthis.translate.use('en');\ncomes after a call of\nthis.translate.get(\"captionCode\").subscribe(translated => this.myLocalizedString = translated);\nthe subscribe does not return any translation, it returns the untranslated caption.\nI expect the code inside subscribe it's executed once the translations are ready, but it seems not to do so.\nI had a look at the plunker of @MarcoMonterminiBolla and what is happening is clear to me:\n1. in AppComponent it simulates a delayed this.translate.use('en');\n2. in the testComponent it translate a caption\ndue to the delay, the translation attempt occours before the this.translate.use('en');, and what happen is that the translation doesn't take place.\nI think it's quite a common scenario, in my app the language is taken from a webapi response which could take some time.\n. ",
    "tommydeaks": "Hi Sam, \nI've tried that - I get this:\n\nError loading http://localhost:3000/ng2-translate/index.js \"ng2-translate\" from http://localhost:3000/client/app.module.js\n\nI've tried changing the main to ng2-translate.js too, with the same error.\nSorry, but I'm at a bit of a loss as I really can't see what it is I am doing wrong.  \nThanks a lot for replying!\n. Hi @SamVerschueren \nI've figured what was wrong. \nIn your Plnkr example you have: \npaths: {\n    'npm:': 'https://unpkg.com/'\n  }\nBut in my setup I have:\npaths: {\n      // paths serve as alias\n      'npm:': (isPublic) ? '/' : 'node_modules/'\n    }\nSo what I need to do is this: \n'ng2-translate': {\n        'defaultExtension': 'js',\n        'main': 'bundles/index'\n      }\nCheers!\n. ",
    "BassemMamar": "@SamVerschueren \nmany thanks..\n same issue .. same question .. and you help again :). ",
    "samfrach": "Hello and thank you,\nthe problem not in test, is that the pipe is not available as a provider, so I can't inject it.\nHow am I supposed to get the pipe ?\nthank you\n. ok I follow your advice,\nthank you\n. ",
    "MateuszG": "@ocombe \nUsing as pipe is shorter than making sub. Very useful when creating dynamics forms.\nthis.translatePipe.transform('countryOfOriginCode'),\nPlease add this metod to docs :+1:  or please show me better way.. ",
    "aelmanaa": "Hello ocombe,\nthank you very much for your answer.  Indeed I m not planning to test the loader but I thought that ng2-translate will be supported by the loader.\nYou ve just suggested a nice workaround , I think it should be documented since I m pretty sure that everyone who uses ng2-translate and tries to unit test a component has encountered the same issue\n. Thanks a lot for this library and for your help as well\n. ",
    "CalebVuorinen": "+1 \n. ",
    "mmarimuthu": "Hello, \ncan someone provide an example translate application with unit test (i.e., test the translated values from json).. were you able to resolve the issue ? if so, please explain.\n. ",
    "xmeng1": "+1. https://github.com/ngx-translate/core/issues/471  This method work!!!. @IevhenIkonnykov thanks for your solution, it works. By the way, just be careful the path of the file.\nexport class TranslateCustomLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    if (lang === 'zh-CN') {\n      const zhCN = readJSON('../../assets/i18n/zh-CN.json');\n      return Observable.of(zhCN);\n    }\n    const en = readJSON('../../assets/i18n/EN.json');\n    return Observable.of(en);\n  }\n}\nthis path should be the relative path to file with the class defined.\n. how to load translate JSON file in karma?. ",
    "shravansofts": "When I'm trying to fetch a DOM element string, i'm getting whitespace string like '                   '\nIm using translate pipe for translate. Thanks for the confirmation. . ",
    "protagonist51": "@ht89 How do I use that plugin? I mean where do I mention about that plugin in webpack.config.js?\n. @SamVerschueren @ocombe I tried using copy-webpack plugin and tried to configure in webpack.dev.js in this way\n`var\u00a0webpackMerge = require('webpack-merge');\nvar\u00a0ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar\u00a0commonConfig = require('./webpack.common.js');\nvar\u00a0helpers = require('./helpers');\nvar\u00a0CopyWebpackPlugin\u00a0=\u00a0require('copy-webpack-plugin');\nmodule.exports\u00a0= webpackMerge(commonConfig,\u00a0{\n\u00a0\u00a0\u00a0\u00a0devtool:\u00a0'cheap-module-eval-source-map',\noutput: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: helpers.root('webapp'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0publicPath:\u00a0'http://localhost:8080/',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// publicPath : '/',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filename:\u00a0'[name].js',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chunkFilename:\u00a0'[id].chunk.js'\n\u00a0\u00a0\u00a0\u00a0},\nplugins: [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new\u00a0ExtractTextPlugin('[name].css'),\nnew\u00a0CopyWebpackPlugin([\u00a0{\u00a0from:\u00a0'app/i18n',\u00a0to:\u00a0'dist/assets/i18n'\u00a0}\u00a0])\n\u00a0\u00a0\u00a0\u00a0],\ndevServer: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0contentBase: helpers.root(__dirname,\u00a0'webapp'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0historyApiFallback:\u00a0true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stats:\u00a0'minimal',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noInfo:\u00a0false,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port:\u00a08080,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inline:\u00a0true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0open:\u00a0true\n\u00a0\u00a0\u00a0\u00a0}\n});`\nBut still getting 404 error.  It is not at all recognizing the files. @ocombe Could you please suggest how did u make a reference in webpack.config.js to en & fr json files? How it gonna read those? Please guide me.\n. Thank you Ocombe for your quick response. I added those imports and pipe error got resolved. But I see that content of {{ 'PAGE.HELLO' | translate }} in the spec\nde\u00a0=\u00a0fixture.debugElement.query(By.css('h1'));\nel\u00a0=\u00a0de.nativeElement;\nconsole.log(el.textContent);\nis empty. i.e ' '. Can you please suggest me something?. I tried with that method but I'm getting TypeError: undefined is not an object (evaluating 'connection.mockRespond') in config/karma-test-shim.js error\nThis is my code\n```\nconst\u00a0mockBackendResponse\u00a0=\u00a0(connection:\u00a0MockConnection,\u00a0response:\u00a0string)\u00a0=>\u00a0{\n\u00a0\u00a0\u00a0\u00a0connection.mockRespond(new\u00a0Response(new\u00a0ResponseOptions({body:\u00a0response})));\n};\ndescribe('SideNav Component Test', () => {\n\u00a0\u00a0\u00a0\u00a0let\u00a0translate: TranslateService\n\u00a0\u00a0\u00a0\u00a0let\u00a0connection: MockConnection;\nbeforeEach(()\u00a0=>\u00a0{\n\u00a0\u00a0\u00a0\u00a0TestBed.configureTestingModule({\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [TranslateModule.forRoot({\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0provide: TranslateLoader,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useFactory: (http: Http) =>\u00a0new\u00a0TranslateStaticLoader(http,\u00a0'app/public/assets/i18n',\u00a0'.json'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0deps: [Http]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HttpModule\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations:\u00a0[\u00a0SidenavComponent\u00a0],\u00a0// declare the test component\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TranslateService,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0});\n});\nit('should be able to get translations', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mockBackendResponse(connection,\u00a0'{\"TEST\": \"Allgemein\"}');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0translate.get('TEST2').subscribe((res:\u00a0string) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(res).toEqual('Allgemein');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0});\n});\n```\n. ",
    "walaa118": "hello,\ni already use the import as: \nimport {TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate';\nbut app.bundle.js does not start:  and no errors no views appear .\nin package.json file :  \"ng2-translate\": \"^4.0.0\"\nany help\n. ",
    "sajTempler": "EDIT:\nI use Ionic 2.RC-3\nng2-translate\": \"^4.0.1\"\nI figured it out.\nthe import should be like this \ud83d\udc4d \nin app.modules.ts\nimport {TranslateModule } from 'ng2-translate/ng2-translate';\nimport { TranslateLoader, TranslateStaticLoader } from 'ng2-translate/src/translate.service';\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\nimports: [\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        })\n]\nthan on my page in html \n<h1>{{ \"WELCOME\" | translate }}</h1>\n(if U just use pipe than U don't have to make steps below)\nto change language than:\nimport { TranslateService } from 'ng2-translate/ng2-translate';\nin constructor\nconstructor(\n        public translate: TranslateService\n    ) {\n        this.translate = translate;\n    }\nto switch lang\n```\nchangeToEng() {\n        this.translate.use('en');\n    }\nchangeToPL() {\n    this.translate.use('pl');\n}\n\nhtml\nENG\nPL\n```\n. ",
    "matejamateusz": "@sajTempler Confirmed, your solution works! ;). ",
    "camriera": "+1. ",
    "Iverson": "+1, any updates?. ",
    "llamontagne": "+1. ",
    "GuskiS": "I tried that yesterday(night), but it didn't work on first load, for example, my app loads - I set the language, then I decide to navigate to users page(where that onLangChange is), but the code hasn't been executed, because setting the language happened before the onLangChange was executed. That is why my 2nd example.. I'm not sure, wouldn't it break something if you change the get? Adding new method or giving extra param to get would be amazing. Implementation is up to you as you know the code structure better. :slightly_smiling_face: . @SamVerschueren I assume that would be the same thing as with onLangChange - would require unsubscribing.. @ocombe Any progress on this?. :O Great.. Looking forward to see changelog :). ",
    "Gustorn": "This would drastically simplify a lot of our components and I'll even send a PR for it to - hopefully - get it into a release. Since changing the current get would silently lead to memory leaks I think adding a new function would be less destructive.\nAny ideas for the function name? I'll send the PR in the meantime but will change the name to whatever's suggested here.. You're right: I didn't import TranslateModule into my project directly. I've been wrapping ng2-translate in our own internal representation and the library remained functional after Angular 2's module change so I never added it. This markes the DI question as solved.\nThat being said, this is still a breaking change if someone was setting up their TranslateService manually:\nImagine the following lines in AppModule's providers:\nts\n{ provide: TranslateLoader, useFactory: (http: Http) => new LocalizationLoader(http), deps: [Http] },\n{ provide: MissingTranslationHandler, useClass: MyTranslationHandler },\n{\n    provide: TranslateService,\n    useFactory: (loader: TranslateLoader, handler: MissingTranslationHandler) => new TranslateService(loader, handler),\n    deps: [TranslateLoader, MissingTranslationHandler]\n}\nThis would fail to compile since  TranslateService would expect a TranslateParser as its second argument, but I admit that this is a fairly niche use-case.. Fair enough. The current API deliberately mirrors that of get and instant: translating an array of keys returns an object where the keys are the translation keys you gave and the values are the translated text.\nIf you don't actually need the three observables and you don't like <ng-container> for some reason, you can modify the 3rd example slightly:\n``ts\n@Component({ \n  template:\n{{($translations | async)?.a}}\n{{($translations | async)?.b}}\n{{($translations | async)?.c}}\n  `\n})\nexport class TestComponent implements OnInit {\n  translations$: Observable<{ [key: string]: string }>;\nconstructor(private translate: TranslateService) { }\nngOnInit() {\n    this.translations$ = this.translate.stream(['a', 'b', 'c']);\n  }\n}\n```\nI would argue that the original 3rd example is objectively better than this one:\n It makes it more obvious that you need to handle the case where the translations aren't loaded yet\n It only creates a single subscription. ",
    "RedaZZ": "Would you please write your answer?  how to use get method instead of instant? i have the same issue\nThanks. ",
    "aidanmischke": "This syntax worked fine for me:\n{{ 'value' | translate: { 'param': param1, 'otherparam': param2 } }}. ",
    "Meligy": "For npm, @i18n/ng-translate.\nIf I may make a remark though, I don't feel like it's a good idea to claim @i18n though. Reminds me of the standard package (don't even get me started!).\nSo, maybe @ng-translate/core?. ngxTranslate should work just fine.. ",
    "michaelbromley": "I'd agree with the sentiments re using the plain i18n name. \nTo make the name generic (not coupled to Angular) there are only a few obvious terms - \"i18n\", \"translate\" etc. - BUT another approach could be to come up with a related-yet-distinct name, like what Babel did when renaming from \"6to5\". Plenty of well-known libs have names with no direct reference to the task they perform - moment.js, reveal.js for example.\nAs a side note: remember this: https://github.com/michaelbromley/ng2-pagination/issues/9 ? ;). ",
    "orgbx": "Dropping ng-polyglot there (Something related to the Rosetta Stone would be even cooler \ud83d\ude04 ). I actually did that translate translate to all languages yesterday :)\nHow about transangular (for tranlate angular with a \"transatlantic\" connotation but has a bit of that expertsexchange issue \ud83d\ude1d)?\nThere seems to be a library dot js for every frigging word I think of!. ",
    "codef0rmer": "@ocombe how about angular-locale. ",
    "NicoTuxx": "@ocombe what about something composed with 'Rosetta' ?\nangular-multilingual ?\nEDIT: I just saw that @orgbx proposed the same idea, something with polyglot could be cool too.. Your library is more a multilingual system than a \"translate\" system, so it look obvious that the most logical names in your selection are 'polyglot' and 'i18n'.\nThat would make more sense in my opinion.. ",
    "vai": "How about \"lingua\" ? You'd get to be able to use it as the namespace later then too. (gentle highlight on the 'ng')\ncref. wikitionary. ",
    "HoltMansfield": "lingua++. ",
    "juristr": "ngx-translate I'd say. Altho I don't dislike ngx-i18n as well \ud83d\ude42. @pinpointpanda Yes, here are the official branding guidelines: https://angular.io/presskit.html. ",
    "bgies": "ngx-translate... numbers are more difficult to type... . ",
    "pinpointpanda": "Man, I'm glad I found this thread :) I just spent about half an hour on Google trying to work out what the difference was between ng2-translate and ngx-translate.\nIn my defense, it's been a long day :)\nI guess this kind of thing is becoming more common in libraries now with AngularJS -> Angular 2 -> Angular.\n. ",
    "imenhb": "Hi,\nYes, i already did it.\nBut i resolved the problem it was because i put this lines in ngOnInit() method i move it to the constructor and now it works fine.\n. ",
    "Tekorius": "On a kinda related note, I've written a PHP Symfony command to convert json translation files to one big Excel file and then back again to multiple json translation files. It supports deep objects, comment columns and rows for better context explanation to translators.\nPeople just love to use Excel for translations for some reason.\nI could give you the source if you'll find any use of it.. ",
    "Dyljyn": "@SamVerschueren I think the example text mislead you (i've edited the issue to not mislead anyone else). \nI just meant to be able to write multiple lines in JSON for the same key, which could be done by having an array of strings. Just the result of doing this, at the moment, is that the commas of the array also come with it in the result on the screen. I don't want them to be on multiple lines in the result.. Well my case is that I have an information block in the UI, which is just a whole block of text which can be in any format as the client requires it to be (including h1, p, ul, etc.). So I thought of writing it in the translation itself and have the multiline to keep it a bit structured but I perfectly get your point that this is not part of translations.. Ok I will decide what to do. Thanks for the information. I have a similar problem where I'm using a store that gets filled with translations from an API.\nAdded this piece of code as a quick fix\njs\nthis.store\n    .select(state => state.ui.i18n)\n    .subscribe(() => this.translate.reloadLang(this.translate.currentLang));. ",
    "NBAMj": "What is the status on this issue?\nHave you added json5 support?\nEdit: nvm, I used \\n for new line instead of <br> and it worked. ",
    "Iv3li0s": "Base on supertorpe comment. But no need to create another pipe ( which not include query translate params )\nYou can directly override TranslateParse. \n```\nexport function createTranslateParser() {\n  return new TranslateAppParser();\n}\n@NgModule({\n  declarations: [\n   ...\n  ],\n  imports: [\n  ...\n    // Translate\n    HttpClientModule,\n    TranslateModule.forRoot({\n      parser: { provide: TranslateParser, useFactory: (createTranslateParser)}\n    }),\n...\n\nimport {Injectable} from '@angular/core';\nimport {TranslateDefaultParser} from '@ngx-translate/core';\n@Injectable()\nexport class TranslateAppParser extends TranslateDefaultParser {\ngetValue(target: any, key: string): any {\n    target = super.getValue(target, key);\n    if (target instanceof Array) {\n      target = target.join(' ');\n    }\n    return target;\n  }\n}\n. Convert to string before translate work\n`{{object.enabled.toString() | translate}}\n`\n. Hey,\nSolution here : [ issues 199]( https://github.com/ngx-translate/core/issues/199#issuecomment-339084987)\n. Hey,\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/forkJoin';\nObservable.forkJoin(...)\nfail in error... as if angular can't find Observable import.\nYou can force it via :\nimport Rx from 'rxjs/Rx';\nRx.Observable.forkJoin(...)\n``\n. In plunker the \"root file\" is not as in classic angular app\nYou must add \"src\" {prefix: './assets/i18n/', suffix: '.json'}besome {prefix: './src/assets/i18n/', suffix: '.json'}`. ",
    "jsprds": "@biesbjerg Is it possible to do something like <span translate [translateParams]=\"{'name': name}\">Hello {{name}}</span> with your snippet? \nI updated the .po file with \nmsgid \"Hello {{name}}\"\nmsgstr \"Hallo {{name}}\"\nAnd added the TRANSLATE_PROVIDERS but the string is not translated. \nI updated the snippet to work with v6.0.0, do I miss something? \n```\nimport { Http } from '@angular/http';\nimport {\n    TranslateParser,\n    TranslateDefaultParser,\n    MissingTranslationHandler,\n    MissingTranslationHandlerParams } from '@ngx-translate/core';\nimport { TranslatePoLoader } from '@biesbjerg/ng2-translate-po-loader';\nexport class InterpolatedTranslateParser extends TranslateDefaultParser {\n    public templateMatcher: RegExp = /{\\s?([^{}\\s]*)\\s?}/g;\n}\nexport class InterpolatedMissingTranslationHandler implements MissingTranslationHandler {\n    public parser: TranslateParser = translateParserFactory();\n    public handle(params: MissingTranslationHandlerParams) {\n        return params.translateService.parser.interpolate(params.key, params.interpolateParams);\n        // Workaround until this PR is merged: https://github.com/ocombe/ng2-translate/pull/348\n        // return this.parser.interpolate(params.key, params.interpolateParams);\n    }\n}\nexport function translateParserFactory() {\n    return new InterpolatedTranslateParser();\n}\nexport function translateLoaderFactory(http: Http) {\n    return new TranslatePoLoader(http, 'assets/i18n', '.po');\n}\nexport const TRANSLATE_PROVIDERS = [\n    { provide: TranslateParser, useFactory: translateParserFactory },\n    { provide: MissingTranslationHandler, useClass: InterpolatedMissingTranslationHandler }\n];\n```\n. Ok, thx for the clarification! \n<span>{{ 'Hello { name }' | translate: { name: 'Kim' } }}</span> seems to work, <span translate [translateParams]=\"{name: 'Kim'}\">Hello { name }</span> does not work...\nFair enough for now. . ",
    "onedotover": "Params don't appear to be working. I used the Plunker you referenced above as a quick example. Or am I using the incorrect format?\nhttp://plnkr.co/edit/zD9bVaslAJfP3PVb2xNu?p=preview. Yes thanks! I pulled down your update right after you fixed it and it works great!. ",
    "bulletinmybeard": "That's exactly what I meant. Thanks for the tip with the custom loader. I will try it with that.\ncheers. Thanks @ocombe, it's okay for now. My solution is to use a helper function as middleware to reformat the JSON I grab from a service provider before I pass it through ng2-translate to make sure it's valid. . ",
    "SamanthaAdrichem": "Adding comment to make the search easier for people in finding a working result:\nThough i would expect this to be default behaviour, this works for us:\n```\nimport {LocalizationMissingTranslationsService} from \"./localization/missing-translations.service\";\nimport {MissingTranslationHandler, TranslateModule, TranslateService} from \"@ngx-translate/core\";\n...\n@NgModule({\n    exports: [TranslateModule],\n    imports: [\n        ...\n        TranslateModule.forRoot({\n            missingTranslationHandler: {provide: MissingTranslationHandler, useClass: LocalizationMissingTranslationsService}\n        }),\n        ...\n    ],\n    providers: [...]\n})\nexport class AppModule {\n...\n}\n```\nusing litterally the code from @biesbjerg  in a seperate file\nexport class InterpolatedMissingTranslationHandler implements MissingTranslationHandler {\n    public handle(params: MissingTranslationHandlerParams) {\n        return params.translateService.parser.interpolate(params.key, params.interpolateParams);\n    }\n}. ",
    "alexluecke": "I think member should be protected. Is there a reason you need to call parser outside of the base or derived classes?. ",
    "phatpham9": "@ocombe check this console output\n\n. Angular universal has its own HttpModule so I didn't import it from angular/http. I think this is a problem.. Anyone can help out?. @zwaldeck @gdi2290 thank you so much It works now :). I tried to add .forRoot() but it still does not work.\n\nSame error\n\n. Removed other module but don't know why it's still the same.\n\n. My bad. I forgot to import TranslateModule in its parent testing module. Close this issue.. This is my test spec:\n\nThis is my template:\n\nThis is the error message:\n\nThank you.. @ocombe I'm new to jasmine. Don't know if I miss anything.. @ocombe I'm using ng2-translate 4.2.0 and angular 2.2.3. Anything wrong with it?. Ah it works but it seems the pipe does not work correctly in the template.\n\n\n. @ocombe the pipe does not work in the template. Do I need to provide anything else to the testing module?. @ocombe Could you please guide me how to do it in the tests?. @ocombe thank you so much I did it. Close the topic now.. @NKjoep thanks for your reply. I've read it but still don't know how to do it :(.\nPlease help me to replace this code return this.translateService.get('TEST').subscribe(res => res); with returning new observable. Thanks a lot.. Sorry @NKjoep I didn't see your edit in the previous comment. I just tried and the output still the same.. problem solved. the code is below\n```javascript\n@Pipe({\n    name: 'timeRemaining',\n    pure: false\n})\nexport class TimeRemainingPipe implements PipeTransform {\n    private result;\nconstructor(private translateService: TranslateService) {}\n\ntransform(input: any, args?: any): any {\n    this.translateService.get('TEST').subscribe(res => this.result = res);\n    return this.result;\n}\n\n}\n```\nany thanks @NKjoep :). ",
    "zwaldeck": "+1 I have the problem to. Hi,\nI have the solution,\nIn your browser.module and node.module, add the UniversalModule last in the imports array.\nThis makes sure that Anuglar Universal overrides the HtppModule!. ",
    "PatrickJS": "for anything that depends on HttpModule make sure you include it before UniversalModule. ",
    "martinop": "If i put the UniversalModule at the end of imports array I get this error:\nResponse with status: 404 null for URL: \nthe array is:\nts\n  imports: [\n    FormsModule,\n    RouterModule.forRoot([], { useHash: false }),\n    AppModule,\n    SharedModule.forRoot(),\n    UniversalModule,\n  ]. any update?. Cristian cual es tu problema? creo que puedo ayudarte. @cristiancamiloperezlopez  I dont need to put the universalmodule at the end of the array.. Just do this: \nhttps://github.com/angular/universal-starter/issues/263\nBasically you need to implement your own loader for the server side..\nin the app.browser just import all normally and in the app.node put the ngx translate in the imports arry using your own loader as in the example. I have a similar problem with Angular Universal using this lib, the problem is the server side rendering, If I import this lib inside the module of server i get an alert of Md5 get cookie or something.. because this lib use a own http module and Universal use other. Aswell I import the module using the isBrowser condition but get the error of \"No provider for translate service\" because we import the service but obviously dont have a Module when is Node. Yep, i know that but in the version 6 when import the Translate Module in the Shared Module I get:\nUnexpected value 'TranslateModule' imported by the module 'SharedModule'\n. ",
    "wasteCleaner": "Hello! I have the same problem.\nI move UniversalModule after HttpModule:\nts\nlet imports = [\n  HttpModule,\n  UniversalModule,\n  FormsModule,\n  ReactiveFormsModule,\n  RouterModule,\n  routing,\n  NgbModule.forRoot(),\n  ClickOutsideModule\n];\nThe error in console solved, but app is not works.\nlocalhost:4200 response empty data: http://jmp.sh/diuSLEl. ",
    "OneManMobile": "Any update on this?. ",
    "cristiancpl": "Llevo m\u00e1s de dos semanas tratando de que esto funcione:\nUniversalModule + @ngx-translate + webpack\nQue mierda, est\u00e1s tecnolog\u00edas no las han terminado de inventar.. Hello @ocombe  excuse my English\nI know perfectly well that it is an open source project, but you must understand that it is very frustrating for a developer who for some reason chose this technology for his project and after a month of hard work, study and research can not make a simple Translation of a text works correctly.\nThe insult was never personal, I never said developers or that team suck. I mean it's my personal case and the combination of UniversalModule + @ ngx-translate + webpack that does not work now.\nNow if you want to ban me because of this, I will not end the world if I change technology or if I stop writing in this repository.\n. Hello @martinop  excuse my English\nThe problem is that I'm using UniversalModule + @ ngx-translate + webpack in a project and I have the following situation:\nIn app.module:\nIf in the matrix of imports I leave UniversalModule last I have this error:\nUnexpected token in JSON at position 0\nResource files (i18n / es.json and i18n / en.json) are available from the browser.\nAnd if I leave first, I have this other error:\nThis method is not implemented in Parse5DomAdapter: Parse5DomAdapter # getCookie\nIs there anything I can try? Thank you very much !. @ocombe  and @martinop \nThank you both, problem solved.\nI'm going to cry about happiness, I really was very frustrated by this situation.\n@ocombe  sorry for my bad words, I will be more tolerant of any technology that I am using \ud83d\udc4d . ",
    "renehamburger": "In some cases it may be necessary to sanitize the html content before it's added to the DOM. This may be the case if the interpolation variables contain user-created content or if the translation string itself can be edited by outsiders, e.g., external translators.\nHere's a directive that sanitizes the html\n```ts\nimport { Directive, ElementRef, Input, OnChanges, Sanitizer, SecurityContext,\n  SimpleChanges } from '@angular/core';\n// Sets the element's innerHTML to a sanitized version of [safeHtml]\n@Directive({ selector: '[safeHtml]' })\nexport class HtmlDirective implements OnChanges {\n  @Input() safeHtml: string;\nconstructor(private elementRef: ElementRef, private sanitizer: Sanitizer) {}\nngOnChanges(changes: SimpleChanges): any {\n    if ('safeHtml' in changes) {\n      this.elementRef.nativeElement.innerHTML =\n        this.sanitizer.sanitize(SecurityContext.HTML, this.safeHtml);\n    }\n  }\n}\nto be used exactly the same way as `innerHTML`:html\n  \n```. ",
    "JLIVE101": "When translations is changed the innerHTML isnt re rendered, is there a fix for this?. ",
    "manuman94": "Yes! It was feeling that I was the only one experiencing this issue @JLIVE101. I need the HTML translations to be refreshed when language changes. Is there any way to achieve this?. ",
    "manumqln": "If you assign the language key to the translate directive, it will not work. But if you use simpler method specified in the readme (specifying the language key inside the innerhtml of the element), it will work. I got the same issue in your plunker example too.\nI am not sure if I am doing anything wrong here. Can you please check?\nThanks in advance. Managed to resolve it finally. \nI had to install http-loader for this which was not mentioned in the docs.. ",
    "HereThereBeMonsters": "I just upgraded from 4.0 to 4.2 and I am trying out the directive.\nI can confirm that, regardless if translateParams is present or not, this works:\n<div translate >MY.TEXTKEY</div>\nBut this doesn't:\n<div [translate]=\"MY.TEXTKEY\"></div>\nIn the second case, there is no error in the console, but no text is displayed in the div.. ",
    "ilDon": "Same problem here with:\n\n\"@angular/common\": \"2.2.1\",\n\"ng2-translate\": \"^5.0.0\", \n\nBefore noticing this bug I had opened a SO question: http://stackoverflow.com/questions/41295910/ng2-translate-directive-not-working-while-pipe-is/41296133#41296133. I've already did a PR, see #378.. Done :-). I can confirm that this issue is still present in v. 6.x.x and that the PR I had submitted still fixes it. Do you know if you will be able to merge?. Oh! copy+paste from working file, my bad.... ",
    "boughioul": "Hello same problem here, if you use this : \n<div [translate]=\"'HELLO'\" [translateParams]=\"{value: 'world'}\"></div>\nIt doesn't work but if you put inner text they work\n<div [translate]=\"'HELLO'\" [translateParams]=\"{value: 'world'}\">test</div>\n. ",
    "desaroger": "Same problem here. Using:\n\n\"@angular/common\": \"^2.2.1\"\n\"ng2-translate\": \"^5.0.0\"\n\nThe @boughioul workaround makes it work.. Thanks @ocombe! :D. ",
    "unlight": "http://plnkr.co/edit/GtzZweCGDavJeArRxLtw?p=preview. ",
    "deeg": "This might be related to the PR I just put out #412.\nMy argument would be it should never be returning objects for translations anyways, only keys. In your example now it would just return the key as a missing translation.\n@ocombe, the use case I was running into, is I had a spot which sometimes got passed translation keys and sometimes got passed regular text I wanted to display without translation. In my translation file I had {admin: {list: \"Admin List\"}}.\n{{'admin': translate}} was returning [Object object] when I really wanted it to return 'admin'.\nI don't think objects should ever be returned as a final translation.\n. Shouldn't this already be possible by providing a MissingTranslationHandler?. Is the fix for this to only allow one request to me made a time? I'm happy to work on a PR for this if that is an approach you want to take.\nOr is the user just supposed to know not to call use and setDefaultLang for the same lang at the same time and this can be closed?. Sorry I got busy at the end of last week. I'm hoping to get a fix in for this tomorrow or Monday.. @ocombe @SamVerschueren,\nNo problem if you don't want to take the change, I just want to explain a bit more of the scenario I was in.\nI had a generic facet component where sometimes the value for the facet was a known translation key, and sometimes it was user input which I wanted to display directly as is. \nWithout taking this change, you can never really have a spot which sometimes takes a translation key, and sometimes takes user input to be displayed directly, because there is no way to guarantee it won't clash with the beginning of a translation key.\nIf you guys are fine with that, I'm happy to work around my situation as I already have, by defining if the facet values should be translated or not.\nJust another note, a user would still be able to get the raw translation object with translationService. getTranslation. I'm still not sure why you would ever want instant or the translation pipe to return anything but a string.\nThanks for taking the time to review and talk it out with me.. People are busy with work and life, I'm sure it will be looked at soon.\nCan you please squash your commits to make it easier to accept when people have looked at it?. You could probably already achieve this if you wanted to, although I haven't tried.\nTake a look at the translation service methods for setTranslation.\nYou could probably just get ahold of the JSON file and manually set the translations yourself in JS.\n. Sorry about that, I did try searching too!. I know both of these checks are not needed, but I did it to illustrate what it would have been before fixing the bug. If you want me to remove the not.toEqual check let me know, and I will!. This should probably be hardcoded to a specific version like the other dev dependencies.. If we only care if the translateParams changed, why do a loop through all of the properties in changes? I would instead remove the for loop and just have:\nif (changes.translateParams) {\n    'contents of original if block'\n}. This is throwing a TS compilation error: TS7017: Index signature of object type implicitly has an 'any' type.\nLooking for help on how to get rid of this. .and does not work either.\n@ocombe, do you know how I can get rid of this?. I can use a nested if here to only set it to this.getTranslation() if it is undefined. Let me know if you prefer that.. ",
    "danielang": "The easiest way to solve this issue is to stringify the object to JSON and do the replace operation on that string.\ntranslate.parser.js:19\n```js\nif (typeof expr === 'string' && params) {\n  return expr.replace(this.templateMatcher, function (substring, b) {\n    var r = _this.getValue(params, b);\n    return isDefined(r) ? r : substring;\n  });\n} else if (typeof expr === 'object' && params) {\n  var jsonString = JSON.stringify(expr);\njsonString = jsonString.replace(this.templateMatcher, function (substring, b) {\n    var r = _this.getValue(params, b);\n    return isDefined(r) ? r : substring;\n  });\nreturn JSON.parse(jsonString);\n} else {\n  return expr;\n}\n```\nThe string replace function should be wrapped in his own function to avoid duplicate code.\nShould I create a PR?. ",
    "rsaenen": "I added ng2-translate to Angular Quickstart and had the following error:\nbash\nhome:27 Error: (SystemJS) Unexpected token <\n    SyntaxError: Unexpected token <\n        at eval (<anonymous>)\n        at Object.eval (http://sf-a.dev/app/ui/home/home.component.js:12:23)\n        at eval (http://sf-a.dev/app/ui/home/home.component.js:30:4)\n        at eval (http://sf-a.dev/app/ui/home/home.component.js:31:3)\n        at eval (<anonymous>)\n    Evaluating http://sf-a.dev/node_modules/ng2-translate\nThis was my system.config.js:\nbash\npaths: {\n      // paths serve as alias\n      'npm:': 'node_modules/',\n      'unpkg:': 'https://unpkg.com/'\n    },\n    // map tells the System loader where to look for things\n    map: {\n      // our app is within the app folder\n      app: 'app',\n      'ng2-translate': 'npm:ng2-translate/', (or 'npm:ng2-translate/bundles')\n      ...\nHowever, it work with 'unpkg:ng2-translate'. I changed to ''ng2-translate': 'npm:ng2-translate/bundles/ng2-translate.umd.js' and I had no more error.    \nI hope this will help.. Check your angular cli configuration, I'm pretty sure the mistake comes from here.\nYou can look in apps > prefix and add its value before ./assets/i18n/.\n. You can use you own loader, this one works with SSR too:\n```typescript\nimport { translationFr } from 'assets/i18n/fr';\nimport { of, Observable } from 'rxjs';\nimport { TranslateLoader as NgxTranslateLoader } from '@ngx-translate/core';\nconst TRANSLATIONS = {\n    fr: translationFr\n};\nexport class TranslateLoader implements NgxTranslateLoader {\npublic getTranslation(lang: string): Observable<any> {\n    return of(TRANSLATIONS[lang]);\n}\n\n}\nexport function translateFactory() {\n    return new TranslateLoader();\n}\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { translateFactory } from '@shared/services/translate-loader.service';\nimport { TranslateLoader, TranslateModule as NgxTranslateModule, TranslateService } from '@ngx-translate/core';\n@NgModule({\n    imports: [\n        HttpClientModule,\n        NgxTranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: translateFactory\n            }\n        })\n    ],\n    exports: [ NgxTranslateModule ]\n})\nexport class TranslateModule {\n    constructor(translate: TranslateService, inputFileService: InputFileService) {\n        translate.addLangs(['fr']);\n        translate.setDefaultLang('fr');\n    }\n}\n```\nWhy not use a typescript file instead of json? :)\nExample: src > assets >i18n > fr.ts\ntypescript\nexport const translationFr = {\n // my translations\n};. ",
    "sajeetharan": "@cbeldacap  do you have the link? i am also having the same issue. This is how i have imported\n```\nimport './rxjs-extensions';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UsersModule } from './users/users.module';\nimport { MainModule } from './main/main.module';\nimport { DiscoveryModule } from './discovery/discovery.module';\nimport { AppConfigService } from './services/appconfig.service';\nimport { TranslateModule, TranslateStaticLoader, TranslateLoader } from 'ng2-translate';\nimport { HttpModule, Http } from '@angular/http';\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json');\n}\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpModule,\n        AppRoutingModule,\n        DiscoveryModule,\n        TranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        })\n    ],\ndeclarations: [\n  AppComponent\n],\nproviders: [\n  AuthGuard,\n  AuthService,\n  AppConfigService\n] ,\nbootstrap: [AppComponent]\n\n})\nexport class AppModule {}\n```\nNo child component is in the discovery module. only importing would work or do i have to repeat what i did in the app.module.ts?. @ocombe  @SamVerschueren  how do i change the app module ?\nTranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        }). Ok that worked, i will close this issue with the last question, is there a way we can use translation without adding the pipe |trasnalate in each line? . using translate pipe? my question is same , is there a way without using pipe in each line?\n. ",
    "tsm91": "Sorry, this was a stupid question. I can always inject the pipe and do it programatically.\n<div *ngIf=\"state.hasError('invalidTime')\" class=\"form-control-feedback\" [innerHTML]=\"'FORM.ERR_TIME' | translate:({v: dateFormatP.transform(state.getError('invalidTime').reqMinHour, state.getError('invalidTime').is24Hrs ? 'HH:mm' : 'hh:mmA'), v2: dateFormatP.transform(state.getError('invalidTime').reqMaxHour, state.getError('invalidTime').is24Hrs ? 'HH:mm' : 'hh:mmA')})\"></div>. ",
    "marcalj": "With angular-translate (AngularJS) you could write translation strings with pipes, like: hello {{ value | number }} it isn't possible right now?\nSeems it don't. Issue opened: #468. ",
    "Perezmarc": "when using the universalLoader, it cant find throws me 'no such file or directory, open 'assets/i18n/en.json'' in the server... but in client is working. . ",
    "JohnGalt1717": "I'm still having this with the .NET JavaScriptServices. All HTTP calls come back with: Response with status: 200 Ok for URL: null \nIt doesn't look like a solution here really. How does one get this working?. Well that's great in theory. But it isn't clear if it comes before or after Universal in the module etc.. Thanks! Anyone know if angular 4 solves this properly?. ",
    "Shifs": "@ocombe : I am not using UniversalModule, still it is giving me the same error. @ocombe My code is\n```ts\n imports: [\n        NativeScriptModule,\n        //RadioButtonModule,\n    NativeScriptUIListViewModule,\n    NativeScriptFormsModule,\n    NativeScriptUISideDrawerModule,\n    NativeScriptRouterModule,\n    NativeScriptRouterModule.forRoot(routes),\n    TranslateModule.forRoot({\n        loader: {\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        }\n    }),\n     NativeScriptHttpModule,\n],\n\nand I have a functionts\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n```\nbut I am getting the same error . \n\"@ngx-translate/core\": \"^7.1.0\",\n\"@ngx-translate/http-loader\": \"^0.1.0\",. Now I get the below error\n\nERROR Error: Uncaught (in promise): TypeError: Cannot read property 'get' of undefined\nJS: TypeError: Cannot read property 'get' of undefined\nJS:     at TranslateHttpLoader.module.exports.TranslateHttpLoader.getTranslation (file:///data/data/org.nativescript.sai/files/app/bundle.js:48300:25)\nJS:     at TranslateService.module.exports.TranslateService.getTranslation (file:///data/data/org.nativescript.sai/files/app/bundle.js:305:55)\nJS:     at TranslateService.module.exports.TranslateService.retrieveTranslations (file:///data/data/org.nativescript.sai/files/app/bundle.js:292:87)\nJS:     at TranslateService.module.exports.TranslateService.use (file:///data/data/org.nativescript.sai/files/app/bundle.js:266:28)\nJS:     at new LoginComponent (file:///data/data/org.nativescript.sai/files/app/bundle.js:14038:24)\nJS:     at createClass (file:///data/data/org.nativescript.sai/files/app/vendor.js:11328:26)\nJS:     at createDirectiveInstance (file:///data/data/org.nativescript.sai/files/app/vendor.js:11152:37)\nJS:     at createViewNodes (file:///data/data/org.nativescript.sai/files/app/vendor.js:12501:49)\nJS:     at createRootView (file:///data/data/org.nativescript.sai/files/app/vendor.js:12406:5)\nJS:     at callWithDebugContext (file:///data/data/org.nativescript.sai/files/app/vendor.js:13537:42)\nJS:     at Object.debugCreateRootView [as createRootView] (file:///data/data/org.nativescript.sai/files/app/vendor.js:12998:12)\nJS:     at ComponentFactory_.module.exports.ComponentFactory_.create (file:///data/data/org.nativescript.sai/files/app/vendor.js:10343:46)\nJS:     at ComponentFactoryBoundToModule.module.exports.ComponentFactoryBoundToModule.create (file:///data/data/org.nativescript.sai/files/app/vendor.js:3924:29)\nJS:     at ViewContainerRef_.module.exports.ViewContainerRef_.createComponent (file:///data/data/org.nativescript.sai/files/app/vendor.js:10543:62)\nJS:     at PageRouterOutlet.module.exports.PageRouterOutlet.activateOnGoForward (file:///data/data/org.nativescript.sai/files/app/vendor.js:30208:55)\n. I have updated ng2 translate and now using ng-x- translate but still getting the same issue\n \"@ngx-translate/core\": \"^7.0.0\",\n    \"@ngx-translate/http-loader\": \"^0.1.0\",. @Cayan : Tried that too .. still the error is same. Can you please share your app.module.ts\n. ",
    "nrbbrg-at": "If that's the proper use case then I'm fine with it, but injecting the translate pipe seems cleaner than having to manage that subscription in each component.. So, basically you're left with having to do this (is it correct?):\n    this.translate.get('HOME.TITLE').subscribe((value: string) => {\n      this.myValue = value;\n    });\n    this.translate.onLangChange.subscribe((event: any) => {\n      this.translate.get('HOME.TITLE').subscribe((value: string) => {\n        this.myValue = this.translate.transform('HOME.TITLE');\n      });\n    });\n\nIt's quite a bit of boilerplate, and it gets a lot bigger when using multiple values.. @SamVerschueren I've encountered a few situations where this is useful. Since the one I'm dealing with now is the only one that comes to mind, I'll use that as an example. We have a custom select box plugin that uses ul / li structure. The selected value is set by a callback. I could keep the translation key as the value and then put it in a pipe in the template instead, but the problem is that the selected value is sometimes distances, such as \"100km\", but also the string \"Anywhere\", which must get translated.\n@ocombe Thanks!. ",
    "HopScotch47": "That's what I mean. The MissingTranslationHandler works when I don't have a translation at all, but when I have a translation for something in the default language it uses that instead. (I guess that's what default means). But I would need the behaviour that even when the default translation exists the missingTranslationHandler gives me the option to step in.\n. ",
    "JakeSummers": "Also hitting this issue.  \nI have set:\ntranlsateService.setDefaultLang('en');\ntranslateService.use('fr')\nMy expectation is that when a French String is not found the MissingTranslationHandler would be invoked.  This isn't occurring.  The MissingTranslationHandler is only invoked when there is no translation in French or English.  . ",
    "MichaelPolla": "Since MissingTranslationHelper falls back to the default language translation if there isn't one in the desired language, and also takes empty strings as valid translations (so it results in blank spaces in app), I overload the TranslatePipe like this (same could be done for TranslateProvider) : \ncustom-pipe.ts\nexport class CustomTranslatePipe extends TranslatePipe implements PipeTransform {\n  transform(key: any, args: any[]): string {\n    let result = super.transform(key, args);\n    return (result !== \"\" && result !== key) ? result : \"Missing text (\" + key + \")\";\n  }\n}\napp.module.ts\n@NgModule({\n  declarations: [\n    CustomTranslatePipe\n  ], ...\nThis way, if the translation is left empty in the selected language or if it doesn't exist (no matching key), we get a \"Missing text (KEY)\" message that helps our teammates in charge of translating our app.. ",
    "Almar": "I also hit this issue. We have namespaces in our dictionary and we load the namespaces lazily with a MissingTranslationHandler.\nI solved this problem now by calling both setDefaultLang and use when switching language.\n[edit] just in case anybody is curious:\nWe lazily load our translations but we don't load them per module. Instead we load them per namespace. All our translation keys are prefixed by a namespace. Whenever the MissingTranslationHandler is called we load all the translations of the missing namespace.\nGist with our MissingTranslationHandler\n. If I understand correctly, the OP wants to lazily load translations along with his lazily loaded modules. We did managed to load translations lazily but used a slightly different approach. All our translations are defined in 'namespaces' and every translation key is prefixed with the namespace (for instance 'validations.required'). Our translations are loaded with a MissingTranslationHandler. The MissingTranslationHandler uses the namespace to determine which translation file to load.\nSo, we're not lazily loading our translations per (lazily loaded) module but per translation namespace. By prefixing your translation keys with your module name you could of course get the required effect.\nGist with our MissingTranslationHandler\nHope this can help someone.\n. ",
    "xcuben": "@SamVerschueren : thanks a lot , it s now working fine for me too.\nI think I Just had some wrong configuration in my AppModule\n. @ocombe \ni think because of the fact that we are calling the setDefaultLang method and then calling the use method in the constructor of app.component.ts\n```\ntranslate.setDefaultLang('en');\nlet browserLang: string = translate.getBrowserLang();\ntranslate.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n```\nwhen you comment the setDefaultLang method out, it is loading just one .json file.\nWhat do you think about that ?\n. ",
    "arnoabraham": "368 Created a pull request for it..",
    "fishen": "Thanks! @ocombe. The drective 'translate' solved this problem, but it requires that the key and the text are equal. I think an alias might be more generic while getting the translator from api.  . ",
    "korosakikun": "I want to add a function to TranslateModule like TranslatModule.forChild for load different translate for each module.. Sorry i don't say but i'm use webpack for my application.. okay i will test that. npm link create a global symlink and i don't want use in global, so if you have a another method for compile without create a global symlink. The problem is npm link create a global symbolic link, next it's create a another link from node_module to the first global link create. So i don't know how to do without create a global link.. In my webpack config i create a alias for ng2-translate that links to ng2-translate/bundles/index.js\nSo normaly it's the link i need for my application.\nBut i have this error : Unexpected value 'TranslateModule' imported by the module 'userModule'. ",
    "j-meiring": "I actually resorted to the single quotes after first escaping the double quotes (I thought that was the reason, but I can confirm it's not).\nI've tried assigning it in the controller and the same issue applies.\nPerhaps this an angular issue rather than a translate issue?. I had originally tried :host >>>, which didn't work, but /deep/ seems to have done the trick.\nIncidentally, I think this may help with a colleague's issue.\nThanks for the swift response, even though it turned to not be an issue with translate.. ",
    "Itrulia": "Damn... We have all the translations in message format already :/. Ill see what I can do on the weekend :). ```typescript\nimport {Pipe, PipeTransform, Injectable} from \"@angular/core\";\ndeclare var Translation: any; // our translation object which we get via JSONP, needs to be refactored\ndeclare var MessageFormat: any; // MessageFormat library, didn't find/create any typings yet\n@Injectable()\n@Pipe({name: \"translate\"})\nexport class TranslatePipe implements PipeTransform {\n    private messageformat: any;\nconstructor() {\n    this.messageformat = new MessageFormat(Translation.language);\n}\n\ntransform(value: string, args: Object): string {\n    const data = Translation.data[value] ? Translation.data[value] : value;\n    return this.messageformat.compile(data)(args);\n}\n\n}\n```\nFor reference :)\nThis one works standalone and should be easy to implement in ng2-translate (uses https://messageformat.github.io/). ",
    "kresogalic8": "Okay that works for me. Thanks. Can you please give me an example based on my code?. One more question. How can I translate hard coded values like 'Success'? Can I also use instant? Can you please write me that also? You will help me a lot with this solution? Thanks in advance. Thank you @SamVerschueren. I really appreciate your answer.. ",
    "djabif": "It implies that texts should go from right to left and aligned to the right \ud83d\ude09 \nThere is a html attribute dir that allows the values \"rtl\" or \"ltr\" and aligns its content accordingly.\nI'm working on an Ionic2 app and currently we found a workaround by listening to the onLangChange event from the TranslateService in the app.component.ts and inside that we check if the default Lang is Arabic and then set an attribute to \"rtl\": \n ```\n//this is to determine the text direction depending on the selected language\n      this.translate.onLangChange.subscribe((event: LangChangeEvent) =>\n      {\n        if(event.lang == 'ar')\n        {\n          this.textDir = 'rtl';\n        }\n        else\n        {\n          this.textDir = 'ltr';\n        }\n      });\n```\nThen in the container of the app (app.html file) we set the dir=\"{{textDir}}\":\n<ion-nav [root]=\"rootPage\" dir=\"{{textDir}}\"></ion-nav>\nIt works fine, but it would be great if this awesome library could support this \ud83d\ude03 \nHope I have been of some help.\nPlease let me know if you need more details.. ",
    "emoralesb05": "Just my 2 cents but to me that seems like a proper solution since you can have an array with the rlt languages\n```\nlet rtlLangs = ['ar','morelangs'];\nthis.translate.onLangChange.subscribe((event: LangChangeEvent) => { \n  this.dir = rtlLangs.indexOf(event.lang) > -1 ? 'rtl' : 'lrt';\n});\n```\nThis way ngx-translate stays agnostic of what dir is but you can still use leverage it.. Why dont you use the angular pipes date and number? They follow locale of the language set as LOCALE_ID following the Intl.js lib\nproviders: [{\n  provide: LOCALE_ID, useValue: 'fr',\n}]. ",
    "shangab": "@djabif Thanks for the tips: I modified your solution to cope with Angular 6+ web applications:\nPut the below code in the constructor of app.component.ts:\nthis.translate.onLangChange.subscribe((event) => {\nthis.lang=event.lang;\nif (event.lang == 'ar') {\nthis.ltrrtl = 'rtl';\n}\nelse {\nthis.ltrrtl = 'ltr';\n}\ndocument.getElementsByTagName(\"html\")[0].setAttribute('lang', this.lang);\ndocument.getElementsByTagName(\"body\")[0].setAttribute('dir', this.ltrrtl);\n});\n. ",
    "MedHassona": "thank you very much @djabif this really hilped me and made the way much shorter for this \"Text direction stuff\", god bless you always.. ",
    "nitinkothwal": "I am also stuck with this issue. . ",
    "romrossir": "Hello,\nI think you have to upgrade your dependencies to use ng2-translate 5.0.0.\nMy environment is working with:\nIonic Framework: 2.0.0-rc.4\nAngular Core: 2.2.1\nAngular Compiler CLI: 2.2.1\n. ",
    "ernaneluis": "I'm still getting the same error :( , even with this env:\nIonic Framework: 2.0.0-rc.4\nIonic Native: 2.2.11\nIonic App Scripts: 0.0.48\nAngular Core: 2.2.1\nAngular Compiler CLI: 2.2.1\nNode: 7.2.0\nOS Platform: macOS Sierra\nNavigator Platform: MacIntel\nUser Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 OPR/42.0.2393.94. I fix this issue by running:\nnpm install\nI have forgotten to do this. . ",
    "as02700": "I found it in compiled code { TranslateModule.ctorParameters = function () { return []; }; }, and i compare to @ngrx/store { StoreModule.ctorParameters = []; }.. ",
    "flintcreativestudio": "This is a outdated angularJS issue, I had it when I was using an older version of AngularJS, but updating to the latest version made some other libraries fail, so I had to find a sweet spot.\nFor me, that was AngularJS version 2.2.1\nYou can update your package.json as so, so running npm install will install the required libraries.\n\n\"@angular/common\": \"~2.2.1\",\n    \"@angular/compiler\": \"~2.2.1\",\n    \"@angular/core\": \"~2.2.1\",\n    \"@angular/forms\": \"~2.2.1\",\n    \"@angular/http\": \"~2.2.1\",\n    \"@angular/platform-browser\": \"~2.2.1\",\n    \"@angular/platform-browser-dynamic\": \"~2.2.1\",\n    \"@angular/router\": \"~3.1.0\",. \n",
    "azanebrain": "I've found that this issue is caused by any number of packages expecting the version of Angular Core to be different than what is actually installed.\nI was able to figure out the cause of this issue by looking at the error report from ng build:\nnpm WARN @angular/platform-server@2.4.4 requires a peer of @angular/core@2.4.4 but none was installed.\nThis helped me realize that one of my packages expected Angular to be at v2.4.4, but I'm using v2.0.1. I updated my package.json to have both packages set to my core version like this:\n\"dependencies\": {\n    \"@angular/core\": \"2.0.1\",\n    \"@angular/platform-server\": \"2.0.1\",\n}\nYour issue might not be with @angular/platform-server, but I hope this helps debug it. ",
    "atiertant": "@ocombe oups, sorry I updated my comment. @ocombe that's it, this is the same idea than angular router, this allow lazy-loading...\nhow do you think moduled should share translations? only one big translation object merging new other from child modules (what about performance on large app) ?\n. this could be improved a bit by adding a parent to each module, if there is no translation on it, try its upper parents.... @ocombe why not using multiple instance of service if it's simpler... does service would generate their own id to buid a tree in store or would you like all keys to be merged in a flat object? @SamVerschueren this is exactly what i was thinking.... @ocombe maybe store could have an option mergeChild when active all translations are merged in the same object else every service translations are stored in a tree (if a key does not exist on child, search recursively in parent). @ocombe \nwhy would you like to use forChild without lazy loaded module?\ndo you mean it should call every loaders at the same time when asking for new language?\ncould you publish your code?\nmaybe we could use store instance in .forChild method to register the new loader.\nmy problem with lazy loaded module is to know who is the parent service instance.. @ocombe so what's going on?. @ocombe after some test with the 6.0.0-beta.1 i found some problems with this implementation:\n as there is one instance of translate service by module, we need to reconfigure it in all modules (with use, langs,...), we could move this values in store to fix this.\n with isole: false once a lang has been loaded by an other module, the current module can't load his own translations\n* with isole: true, as there is one instance of store by module, we can't fix first problem and this is not possible to use parent module translations when no translation is defined for the key.(see below)\ni give an sample of what we expect to do:\ni have two module first have 2 translation key in 'en' lang:\n{\n  'title': 'welcome on my site',\n  'section': 'home'\n}\nand the second lazy loaded by first one has only one key:\n{\n  'section': 'contact us'\n}\neach of them show on top page title and section so first on show:\nwelcome on my site\nhome\nand second show:\nwelcome on my site\ncontact us\nsecond module has no translation for title,so higher module's one is used\ni think we should isolate module translations in same store instance. just would like to share the same translations file beetween angular client side and server side. yes but how to instanciate ngx-translate out of angular in node?. is there a node specific module fully compatible with ngx-translate format ?. the problem is that you must reconfigure the service in all lazy loaded modules but if you didn't set isolate to true and the lang has already been loaded by an other module, lang is not reloaded...\nbut if you set isole to true lazy loaded modules are totaly independant so if you would like use translations from parent modules and new others for this modules and its childs only, this is not working.... @jlberrocal think in isolate mode when store has no translation for the key, it should ask his parent using injector.parent recursivly. @jlberrocal have a look at https://github.com/ngx-translate/core/pull/379 @ocombe wouldn't like to change all spec and wanted to have one instance of service by lazy loaded modules to avoid this changes... this is a good idea but not working as expected for now... the problem is service configuration is saved in his instance, so new service instance need reconfigure. the second problem is that store doesn't identify service instance so when the root loader already loaded a lang, new loader isn't called...\n. @jlberrocal you're right.... any ETA?. ",
    "cocaux": "Hi, \nI need this functionality for my devs, do you know when it will be available in npm? \nCan I directly point my package.json to this repo? \nThanks for your help. Thanks for the quick answer :). I found some documentation in the README, but do you have a working example with a CustomLoader doing an http get?. I still have issue... I got a error caused by: No provider for TranslateStore!\nMy current set up is:\n- in my module:\nTranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useClass: CustomLoader,\n        deps: [Http]\n      }, isolate: true\n    }),\n- my loader:\nexport class CustomLoader implements TranslateLoader {\n  constructor(private http: Http) { }\n  getTranslation(lang: string): Observable<any> {\n    return this.http.get('...?language='+lang)\n      .map((res: Response) => res.json());\n  }\n}\n- in my main component in my module: \nconstructor(translate: TranslateService) {\n        translate.setDefaultLang('en');\n        translate.use('en');\n    }\nI am missing something ? Should I do a TranslateModule.forRoot() at the root level ?\nMany thanks for your help. @ocombe, I tried different set up, but I never saw the TranslateService using the CustomLoader set in the Translate.forChild. Is the TranslateService managed the different loaders? for me it looks like it always use the one set in the forRoot.\nMany Thanks\nCoco. ",
    "kirillgroshkov": "I have the same issue. It works when you do this:\n<strong [translate]=\"'HELLO'\">any non empty content here</strong>\nBut doesn't work when the content of the node is empty.\n. Sorry, I used it wrongly, it works as expected, you can delete the issue.. Same here!. ",
    "hectorggp": "Please, answer the question set in the tittle for reference. ",
    "dietergeerts": "Hi, this doesn't seem to be fixed in the 6.0.0 version. Can you please check and release a new version?. ",
    "AlvaroAV": "I have a similar issue with:\n - Ionic 3\n- Angular 5.03\n- ngx-translate 8.00\nI have a template like you suggest:\n<h2 [translate]=\"'WELCOME_HELLO_TEXT'\">test</h2>\nand I have 4 languages (en.json, fr.json, es.json and ga.json)\n\nI save the current language in Storage and load it when the app starts with the initTranslate()function on my app.components.ts\nWhen I change the language, I save the new language to Storage and try to load the new language with translate.use('fr')\nThe new language works if I reload the page (F5)\n\nWhen I debug the app on the browser I found the next problem:\n\n\nIf my current language is English (en) and I change to another one (fr, es or ga) the translation isn't updated on the template until I reload the page (F5). (The template show the untranslated text like WELCOME_HELLO_TEXT)\n\n\nIf my current language is Fran\u00e7ais, Galego or Espa\u00f1ol I can change to English and the template gets updated accordingly but I cannot change these combinations:\n\nfr ->  es, ga \nes -> fr, ga\nga -> fr, es\n\n\n\nFor the last 3 combinations I need to reload the page with F5 because when I change language I see the raw text like WELCOME_HELLO_TEXT\nAny clue what I'm doing wrong ? The thing I cannot understand is why changing to English always works but changing to another language doesn't, and If I reload the page all languages works.\nThis  is my initTranslate() on my app.components.ts:\n```\n  initTranslate() {\n    // Set the default language for translation strings, and the current language.\n    this.translate.setDefaultLang('en');\n    const browserLang = this.translate.getBrowserLang();\nif (this.currentLanguage){\n  this.translate.use(this.currentLanguage);\n}else if (browserLang) {\n  if (browserLang === 'zh') {\n    const browserCultureLang = this.translate.getBrowserCultureLang();\n\n    if (browserCultureLang.match(/-CN|CHS|Hans/i)) {\n      this.translate.use('zh-cmn-Hans');\n    } else if (browserCultureLang.match(/-TW|CHT|Hant/i)) {\n      this.translate.use('zh-cmn-Hant');\n    }\n  } else {\n    this.translate.use(this.translate.getBrowserLang());\n  }\n} else {\n  this.translate.use('en'); // Set your language here\n}\n\nthis.translate.get(['BACK_BUTTON_TEXT']).subscribe(values => {\n  this.config.set('ios', 'backButtonText', values.BACK_BUTTON_TEXT);\n});\n\n}\n```\nand this is how I init ngx-translate on my app.module.ts:\n```\n@NgModule({\n  declarations: [\n    MyApp\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    }),\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot()\n  ],\n ....\n```\n. ",
    "blueromans": "same issue. ",
    "kinguy1": "i have the same issue with: \nAngular 5.22\nngx-translate 9.11. ",
    "FahmiChaar": "@AlvaroAV  just same issue like you\ni use ionic 3\nangular 5.0.3\n\n\"@ngx-translate/core\": \"^9.1.1\",\n\"@ngx-translate/http-loader\": \"^2.0.1\"\n\nthe language change correctly on first app launch in the app.component.ts but after that when i change the language nothing change\nand when i subscribe to onLangChange event it return lang: 'en' correct but translations: {} empty object\ni don't know what is the problem i use this great library on different projects and it work very well\nthanks. @raimaj that how i fixed\nhttps://github.com/ngx-translate/core/issues/829\nhttps://stackoverflow.com/a/44698964/2387051. ok how temporary fix this issue i add the createTranslateLoader function and \nTranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    })\nto the module of the page where i change the language from them\nref to : https://stackoverflow.com/a/44698964/2387051. ",
    "jandouwevonk": "Same config as @FahmiChaar, same problem as @AlvaroAV.\nThe onLangChange returns the correct lang AND filled translations {}\nBut the screen does not update.\n<h2 [translate]=\"'title.login'\"></h2>\nand\n<ion-title>{{ \"title.login\" | translate }}</ion-title>\nboth not working\nI also have the selected language in storage. If storage contains 'en' or is empty the language switch is not working. If the storage contains 'fr' on startup the switch to 'en' works ok!. ",
    "fedme": "same problem here, has it been solved by anyone?. Thank you very much for taking the time to post that link!\nIt contains very nice workarounds that solved my problem!. ",
    "x3r10n": "I know this issue is closed for a long time, but I have a similar problem, it only the translated text of the current component.\nImagine I have navigation.component.html where I have a button to toggle the language, translation here update fine.\nAnd I have contact.component.html to update translation here, I have to refresh the page.\nI am using :\n\"@ngx-translate/core\": \"^10.0.2\",\n\"@ngx-translate/http-loader\": \"^3.0.1\",\n\"@angular/core\": \"^6.1.0\". ",
    "ishan123456789": "I have a nice workaround for the problem \nRequires an service in that service:\n```\n  public selectedLang = new Subject();\n```\nin your root component or app.component.ts subscribe to the above language\nthis.theCreatedServiceHere.selectedLang.subscribe(lang => {\n         this.translate.use(lang);\n    });\nCreated with reference to the comments above. ",
    "Exlord": "Same issue here.\n\"@angular/core\": \"^7.0.0\",\n\"@ngx-translate/core\": \"^11.0.0\",\nI have a simple language selector component : translate.use(lang);\nThe view gets updated if use it like this : \n<h3 class=\"pb-2 mt-4 mb-4\" [translate]=\"'profile.name.title'\"></h3> or <h3 class=\"pb-2 mt-4 mb-4\" translate>profile.name.title</h3>\nBut if I use it like this I have to reload the page so the view gets updated : \n<h3 class=\"pb-2 mt-4 mb-4\" translate>\n    profile.name.title\n  </h3>. ",
    "namerci": "Same issue as @Exlord with \n\"@angular/core\": \"^6.1.8\",\n\"@ngx-translate/core\": \"^10.0.2\",\n\"@ngx-translate/http-loader\": \"^3.0.1\",\n. ",
    "lexigren": "Some blocks with translate directive are getting updated, while others remain in previosly selected language.\nPipe seems to be working correctly though.\n{{'text'|translate}}\n\"@ngx-translate/core\": \"^11.0.1\",\n\"@ngx-translate/http-loader\": \"^4.0.0\",. ",
    "shrujal-shah": "Same issue as @lexigren with\nsh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^11.0.1\"\n\"@ngx-translate/http-loader\": \"^4.0.0\"\nIt's working with \nsh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^10.0.0\"\n\"@ngx-translate/http-loader\": \"^3.0.1\"\nand again not in\nsh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^10.0.1\"\n\"@ngx-translate/http-loader\": \"^3.0.1\"\nLooks like following commit #819 introduced problem. sh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^11.0.1\"\n\"@ngx-translate/http-loader\": \"^4.0.0\"\nIt's working with \nsh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^10.0.0\"\n\"@ngx-translate/http-loader\": \"^3.0.1\"\nand again not in\nsh\n\"@angular/core\": \"~7.1.4\"\n\"@ngx-translate/core\": \"^10.0.1\"\n\"@ngx-translate/http-loader\": \"^3.0.1\"\nLooks like following commit #819 introduced problem. I have similar problem as mentioned in above comment\nRelated bug:\n383\n887\n. ",
    "Robouste": "Ok, from what I learn, their is no way to precisely define the browser language using only javascript. This need to be done serverside since it's in the HTTP request header.\nThank you. ",
    "azzimuth": "I've noticed that it takes the first language in the list in Chome:\nvar browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\nFor example, Chrome is on Norwegian but it's English on top of the list, so getBrowserLang returns English.. ",
    "chandandas": "I have api which would fetch the resource info from server and then send back as key and value pair to angular. My angular code should get this info and bind to labels in angular html view.  I also want  make sure that the resources are fetched and bind to html view once.\nNow my question is where and how should I fetch the info from server and bind to view using ng2-translate?. ok. ",
    "CodeAndWeb": "Closing this issue because requested information is missing and it was not updated for 1 year.. Sorry for not answering this request sooner...\nI am closing this old issue now. Please open a new one if the problem still persists.\n. Loading the translations manually and using setTranslation is the easiest way to get this done.\nYou could also create a custom loader. Load the file once and keep it in memory. Return the sub-object that matches the language when the loader gets asked for it.. Use .stream() instead of .get()\n. 1) You don't have a language set. \n2) You set the default - which gets loaded - and since nothing else is set becomes the visible language\n3) You switch to the browser language - which gets loaded and displayed\nTry switching .use() and .setDefaultLang().. That's not a \"default string\". It's a key that uses nested translations...\n. We currently prefer to keep the api as simple as possible.\nWe might add it if more people request this feautre.. Sorry for not answering... we'll try to do better in the future.\nI'm closing this issue for now. Please open a new issue if this problem still persists.. Your label is missing the distance {{valu}} parameter.\n<div [translate]=\"'HELLO'\" [translateParams]=\"{value: 'world'}\"></div>\n\n. Does this issue still persist? If so can you provide more information?. I am closing this issue for now...\nPlease submit a new issue if the problem still persists.. #790, fixed with 10.0.1. Can you post your app-module.ts ?. We've created a new example here: https://github.com/ngx-translate/ionic-example\n. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI see the point in your feature request and\nand easy solution already exists.\nWe can add the feature if more people ask for it.. ngx-translate requires Angular 6.\nYou have to use ngx-translate 9.x with Angular 5.. Can you put your project on github?. Currently not - sorry. It would require creating a quite complex way of handling the strings. Especially if user input contains {} and triggers other unwanted replacements...\n. Could not reproduce the issue in the current version.\nSorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - please re-open it if the issue still persists or you still need help.\n. You can find a working example here: https://github.com/ngx-translate/ionic-example. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI see the point in your feature request. But as you alredy said: It will break compatiblity and\nand easy solution already exists.\nWe can add the feature if more people ask for it.. Sorry for not answering earlier... I guess you already solved the issue?\nPlease open another issue if the problem still persists.\n. I assume this is an issue for https://github.com/biesbjerg/ngx-translate-extract\nSorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. Adding this information has the disadvantage that it would also be in your production code.\nI think it's better to keep this outside of your source code. \nOne simple solution is to add this information in an external editor. E.g. BabelEdit supports comments.. You can try this loader from here: https://github.com/CodeAndWeb/ngx-translate-demo/blob/master/ngx-translate-demo/src/app/pruning-loader.ts\nIt removes all empty translations.\n. You can use {{ 'demo.greeting' | translate:{'name':'Andreas'} }}- which is not as compact as your suggestion - but close.\n. Sorry for not answering earlier... I guess you already solved the issue?\nHowever it's hard to help you at all with the information you provided...\nPlease open another issue if the problem still persists.. Late answer...\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services\n. Sorry for not answering earlier... I guess you already solved the issue... Anyways...\n.use() should be called with the language code, e.g. .use(\"de\")\n.setTranslation() is meant to be called with the language code and the translations.. Sorry for not answering earlier... I guess you already solved the issue...\nPlease open another issue if the problem still persists.. #769\n. Making it configurable adds a whole layer of complexity to ngx-translate, ngx-translate-extract and tools like BabelEdit for the small convenience of using a \".\" instead of \"-\" or \"_\".\n. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists.. @sebaferreras Any updates on this?  ... I know - it's already old :)\n. I am not sure if the example repo is the best place for it.\n@ocombe I think creating a separate ionic-loader repo (similar to the http-loader)  with the loader and updating the demo to use it would be the better choice.\nWell - put it in the demo repo. We can move it from here later.\nThanks for your time making the updates!. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. We've created a small example project for ionic: It's currently using Angular 5, ngx-translate 9 and Ionic 3: https://github.com/ngx-translate/ionic-example. UTF-8 in your json files should be fine.\nhttps://github.com/CodeAndWeb/ngx-translate-demo uses German \"Umlauts\". \nSorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. Sounds useful but also a completely different scenario from that ngx-translate does.\nWhy not put the directive into a separate package?. Sorry for not answering your request...\nAdding more information and maybe a runnable example might have helped.\nI am closing this old issue now.\nPlease open a new one if the problem still persists.. You can use this modified loader code. It removes empty strings from the files:\n```\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport 'rxjs/add/operator/map';\nexport class PruningTranslationLoader implements TranslateLoader {\n    constructor(private http: HttpClient, private prefix: string = '/assets/i18n/', private suffix: string = '.json') {\n    }\npublic getTranslation(lang: string): any {\n    return this.http.get(`${this.prefix}${lang}${this.suffix}`)\n        .map((res: Object) => this.process(res));\n}\n\nprivate process(object: any) {\n    const newObject = {};\n\n    for (const key in object) {\n        if (object.hasOwnProperty(key)) {\n            if (typeof object[key] === 'object') {\n                newObject[key] = this.process(object[key]);\n            }\n            else if ((typeof object[key] === 'string') && (object[key] === '')) {\n                // do not copy empty strings\n            }\n            else {\n                newObject[key] = object[key];\n            }\n        }\n    }\n\n    return newObject;\n}\n\n}\n``. The loader code I provided here removes the empty translations. ngx-translate now tries to use the translations from the default language (e.gtranslate.setDefaultLang('en');) - if this is not found you should get{Close}`.. See also #830\n. Sorry for not answering earlier...\nIt's hard to help with these issues without knowing your complete configuration.\nI'll close this issue for now. Submit a new one it if the problem still persists.. Sorry for not answering this issue...\nAdding more information would have helped solving it.\nDo you still have the problem? If so, please submit a new issue with more details.. get() is designed to return the translation once it's loaded.\nUse stream() to get notifications about language changes.. Could not reproduce the issue in the current version.\nSorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. Duplicate: #751. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists.. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.\n. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.. Sorry for not answering the issue for such a long time.\nWe try to do better in the future, promised.\nI am closing the issue for now - you can re-open it if the issue still persists or you still need help.. Can you please make example on https://stackblitz.com/github/ngx-translate/example ?\n. 10.0.1 contains a fix for translations with spaces. Maybe this also fixes this issue?\n. Duplicate to #233 . This can easily be solved by\nthis.translate.get('Ui_DisplayName_ArtisanalEffortDTO',{name: ArtisanalFishingAreaName?ArtisanalFishingAreaName:ArtisanalFadName}).toPromise().then((result)=>{\nconsole.log(result)\n})\n. The best place to catch an invalid json file is creating your own TranslateLoader and handle the error there. \nThe default implementation is quite simple: https://github.com/ngx-translate/http-loader/blob/master/src/http-loader.ts\npublic getTranslation(lang: string): any {\n    return this.http.get(`${this.prefix}${lang}${this.suffix}`);\n}\n\n... or make sure to only work with valid json files... BE might help you. ;). Sorry - can't reproduce the issue. The code in this demo app is almost identical.\nCan you try the demo project form here: https://github.com/CodeAndWeb/ngx-translate-demo ?. Related to: https://github.com/ngx-translate/core/issues/751\nIn this case: JSON is invalid.\nI suppose the best position to catch the error is creating a TranslateLoader that handles the failed loading (missing file, invalid json). #474\n630. It's not abandoned. It's just that we don't have the time to reproduce all bugs from zero.\nThis is why we ask for a small project that helps us to reproduce the issues - which you did not provide.\n\nReproduction of the problem\nIf the current behavior is a bug or you can illustrate your feature request better with an example, please provide the steps to reproduce and if possible a minimal demo of the problem via https://plnkr.co or similar. You can use this template as a starting point: http://plnkr.co/edit/tpl:01UjWY3TKfP6pgwXKuEa\n. > If the current behavior is a bug or you can illustrate your feature request better with an example, please provide the steps to reproduce and if possible a minimal demo of the problem via https://plnkr.co OR SIMILAR.\n\nA stripped down project on Github would suffice. At least something that we can use to reproduce the issue.\nSetting up a project from zero to try to reproduce the issue costs time.\nWe are working on this in our spare time - this is why we also need your help to reproduce the issue. \nI've closed this issue because you wrote that you fixed it in your own project.\n. Sorry - for the late answer... but it's really hard to know what's going wrong from looking at your snippets.\nIf the issue still persists: Can you please create a small sample project?\n. I am currently trying to help @ocombe with ngx-translate, getting the issues cleaned up, fixing smaller things. I don't want to see ngx-translate rot and die...\nShot information about me: My name is Andreas L\u00f6w, owner of CodeAndWeb GmbH. We create tools for developers - main focus is game development (TexturePacker) but we've recently created a JSON editor called BabelEdit which works with ngx-translate.\nI'm a developer for quite a long time - started programming when I was 10... which means that I've 34 years of experience ;) My usual work is in C++, PHP for webpages and Javascript/Typescript.\nI've been working on an Angular project for the last year - but I must admit this does not make me an expert. As I said: I have good knowledge in coding - but not about Angular in depth.\n@ocombe Why don't you go to https://www.patreon.com ? It should be easy to setup and collect some money from donations. \n. Confirmed\nhttps://stackblitz.com/edit/github-ad9uqm. resetLang() resets the internal translation caches. It's not a remove language function.. Sorry - for the late answer... but it's really hard to know what's going wrong from looking at your snippets.\nIf the issue still persists: Can you please create a small sample project?. I agree that comments are important for the translator. But I would keep these comments out of the source. They will bloat your code twice times: The comments are part of your templates/code and JSONs.\nWorkaround:\n- You could use an unused language for these comments\n- As you just mentioned BabelEdit: You can add comments there\n\n. You can use getTranslation(lang: string): Observable<any> to get an Observable that resolves your title text.\n. At which time are you setting the language / default language?\nHow are you using the translations?\n. You can set the loader path as 2nd parameter of the TranslateHttpLoader:\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, \"./assets/i18n/\");\n}\nThe default prefix is /assets/i18n/ - this is why they are loaded from the root assets folder.\n. You can create a custom loader and register it with ngx-translate:\nexport class MyLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n      ... your code that returns an Observable containing the translations ....\n  }\n}\nbut this would load all translations at once.\nYou could also load the translations partially and use setTranslation() to add the new translations when you switch to a new view.. Seems to be similar to #806 . Ok - I can reproduce the issue with your demo project.\nI've build and almost identical project with TypeScript and it works. So it seems to be an issue between CoffeeScript and TypeScript...\nThe issue seems to be that the dependency injection can't create the TranslateService.\nI am having a hard time writing CoffeeScript... so I can't give you a solution.\nWhat might work is the following: Create a factory that creates the TranslateService and add it to the providers in app.module.coffee. This should at least give you an idea which parameters don't work.\n. The code is here: https://github.com/CodeAndWeb/ngx-translate-demo in the ngx-translate-demo folder.\nI was already wondering why the error message is [?,?,?,?,?,[object],[object]]. I'd not expect to see [object] where a Boolean is required...\nThis is why I came up with the idea of creating a factory method to manually instantiate TranslationService.\n. I also saw this on the console... \n```\nWARNING in ./node_modules/@angular/core/esm5/core.js\n6558:15-36 Critical dependency: the request of a dependency is an expression\n @ ./node_modules/@angular/core/esm5/core.js\n @ ./app/index.coffee\n @ multi (webpack)-dev-server/client?http://localhost:9090 webpack/hot/dev-server ./app/index.coffee\nWARNING in ./node_modules/@angular/core/esm5/core.js\n6578:15-102 Critical dependency: the request of a dependency is an expression\n @ ./node_modules/@angular/core/esm5/core.js\n @ ./app/index.coffee\n @ multi (webpack)-dev-server/client?http://localhost:9090 webpack/hot/dev-server ./app/index.coffee\nWARNING in ./node_modules/@angular/core/esm5/core.js\nSystem.import() is deprecated and will be removed soon. Use import() instead.\nFor more info visit https://webpack.js.org/guides/code-splitting/\n @ ./app/index.coffee 6558:15-36 9:12-36\n @ multi (webpack)-dev-server/client?http://localhost:9090 webpack/hot/dev-server ./app/index.coffee\nWARNING in ./node_modules/@angular/core/esm5/core.js\nSystem.import() is deprecated and will be removed soon. Use import() instead.\nFor more info visit https://webpack.js.org/guides/code-splitting/\n @ ./app/index.coffee 6578:15-102 9:12-36\n @ multi (webpack)-dev-server/client?http://localhost:9090 webpack/hot/dev-server ./app/index.coffee\n```. Google came up with this: https://github.com/angular/angular/issues/20357 . I am closing this ticket for now. \nSee name issue in #754 - people seem to run in same issue here - but without coffee script.\nMight be easier to find help here.. The problem is in your translation file.\n{\n  \"TITLE\": \"{{value}} foo\"\n}\nSee https://github.com/ngx-translate/core#3-define-the-translations\n. Right. Sorry my fault - missed that you are using message format compiler.... Both should work.\n<div [translate]=\"'TITLE'\" [translateParams]=\"{value: 'world'}\"></div>\n\n. But it's at least interesting that your version avoids the error :). Sorry - I can't reproduce this. I've been working through my tutorial but everything works like it should.\nFrom what you've added here it's hard to tell what's not working in your case...\n. Thanks for your feature request. This is an interesting idea, but I don't see many people who might have a use for it. This makes it hard for us to increase the complexity of the library.\nIn your case would be the easiest way to create a hash from the translations and perform the search manually. Or maybe it's an option to store the keys in the database?. Thanks for your feature request. \nWhat exactly is the use case for this?\nWhy would you treat a \"missing\" differently from \"null\"?\n. A simple solution for you is the following:\nMake your server request. If it comes back with a miss (null/undefined) store the key as translation.. So you have a file with some of the translations? But if the translation is missing in the file you make the request?\nOr are you trying to load all of them on demand?. Sorry - I can't reproduce this.\nThe code looks good (except for the wrong quote marks) - but it's hard to tell without seeing more of your project.\nHere's a simple working demo project: https://github.com/CodeAndWeb/ngx-translate-demo \n. I am not familiar with ionic3... sorry. And it's hard to help you without at least some example code. \nMaybe you should ask in the ionic forum about this.\nThe question is: Why is it trying to access the absolute path with file://? Is there a way around this?\nhttps://github.com/oracle/cordova-plugin-wkwebview-file-xhr might be an option for you.\nYou can also just import the translations and use translate.setTranslation() to set them.. The instant method applies the same set parameter set to all keys. You can't specify a separate set for each key.\nYou can either put all your parameters in 1 object - or call instant multiple times with smaller sets.\n. This example project contains a loader that removes empty translations. See ngx-translate-demo/blob/master/ngx-translate-demo/src/app/pruning-loader.ts \nYou can use the loader instead of the standard TranslateHttpLoader. . Please remove \"ng2-translate\": \"^5.0.0\", from your package.json\u0010.\nng serve does also not work because of missing dependencies.\n. Please\n1) Describe the issues that you have in detail - with error messages, whatever. \"Translation not working in a basic angular-cli based Nativescript project.\" is not helpful\n2) Get the git example in a state where it can be checked out and startable with yarn install and ng serve\n. Tried to install nativescript but can't make it work with the ios simulator... it complains about a missing plist file. Sorry... can't help you here. . You can use the translate pipe:\n<select>\n    <optgroup *ngFor=\"let value of list\" label=\"{{ 'my.translation.id.'+value | translate}}\">\n    </optgroup>\n</select>\n\n. Please provide a simple demo of the problem - e.g. on github.\nWe really don't have the resources to try to reproduce the issue with this vague description.. You have basically 3 choices\n\nIf you are absolutely sure that your translation files are already loaded and you don't want to update the translations automatically if a language changes use translate.instant('ID')\nIf you are not sure about the loading state but you don't need updates on language changes use translate.get('ID'). It gives you an observable that returns the translation once it's loaded and terminates the observable.\nIf you want constant updates (e.g. when a language changes) use translate.stream('ID') - it returns an observable that emits translation updates. Make sure to dispose the observable if you don't need it anymore.\n\nThis assumes that you've injected TranslationService as translate in your component.\nE.g.\nexport class AppComponent {\n    constructor(translate: TranslateService) {\n        translate.get('hello.world').subscribe((text:string) => {console.log(text});\n    }\n}\n\nYou'll have to assign the translation to your data array from within the subscribe\n. You can set the paths in the constructor of the TranslateHttpLoader:\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\n. Seems that this can be done with a script that can read xml files.\nI am closing this request because it does not have anything to do with ngx-translate core.. ",
    "mmathys": "Wow, that was fast! Yes, it worked! Thanks so much!!. can confirm. \ud83d\udc4d  same error. @yamidvo I fixed it. See here: https://github.com/evertonrobertoauler/cli-universal-demo/issues/14#issuecomment-301125219. @AnthonyNahas your link is broken. this one works: https://github.com/ngx-translate/core/issues/581#issuecomment-326256510. ",
    "Fatslug": "amen. \nhere here. \n+1. ",
    "kelvindart": "createMyTranslateLoader is the same as the documented example pretty much:\nTypeScript\nexport function createMyTranslateLoader(storage: MyStorageProvider) {\n  return new MyLoader(storage);\n}\nI haven't (yet) but I will give it a go and report back.\nRegarding the MyStorageProvider dependency, not yet but I added it in a flurry of trial and error steps for debugging. I will try the first step, see how that goes before trying to remove the dependency.\nThanks for the speedy response!. I think that has indeed fixed it - thank you for the speedy response! :). Just in general, is it bad to do it this way? I'm thinking yes, because the Cordova plugins aren't really going to be available at this stage in the boot process.. No worries! Thanks. Ace - thanks @SamVerschueren!. ",
    "tristanmkernan": "i tried the catch operator, but it did not work.\nper http://reactivex.io/documentation/operators/catch.html\n\nThe Catch operator intercepts an onError notification from the source Observable and, instead of passing it through to any observers, replaces it with some other item or sequence of items, potentially allowing the resulting Observable to terminate normally or not to terminate at all.\n\nin a previous version of your code (2.2.2), i had resolved the issue by changing this code\nhttps://github.com/ngx-translate/core/blob/master/src/translate.service.ts#L190\nto include an onError that did nothing. the error was then propagated to my error handler function.\n. ",
    "trumbitta": "@russon77 did you manage to find a workaround for this?. I think you forgot to to add TranslateService to your AppModule's providers array.. ",
    "anand-ma": "@SamVerschueren you are right, i'm getting the same error after removing. But do you have any suggestions on this anyway?. ",
    "lebnic": "I had a similar issue. Fixed it by changing:\n@Inject(forwardRef(() => FrameComponent))\n        private translate: TranslateService,\n        private cookieService: CookieService,\n        private dataService: DataService,\n        public app:FrameComponent) {}\nTo\n@Inject(forwardRef(() => FrameComponent))\n        public app:FrameComponent,\n        private cookieService: CookieService,\n        private translate: TranslateService,\n        private dataService: DataService) {}\nNotice \"translate\" was just after \"@Inject\" .... ",
    "aortmannm": "Very nice, thanks for the quick answer. ",
    "charpeni": "Any news?. ",
    "SamFarrington": "Hey - here is how we do it:\nIn our root component's ngOnInit we have the following logic:\n```typescript\n        const langs = [\n            'en-GB',\n            'de'\n        ];\n    let isSupported = langs.find(supportedLanguage => supportedLanguage === navigator.language);\n\n    if (isSupported) {\n        this.translate.use(navigator.language);\n    }\n    else {\n        this.translate.use('en-GB');\n    }\n\n```. ",
    "andys8": "I'd expect the same behavior to be provided. It seems it isn't available.\n@SamFarrington This won't fall back to the specific language. Think about en-US and de-AT.. ",
    "bardiarastin": "unfortunately this app is for a company so i can not put it on a plunker :(. here is the only ng module i have :\n````\nimport { BrowserModule } from '@angular/platform-browser'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { HttpModule } from '@angular/http'\nimport { Http } from '@angular/http'\n// components \nimport { AppComponent } from './components/root/app.component'\nimport { HeaderComponent } from './components/header/header.component'\nimport { SidebarComponent } from './components/sidebar/sidebar.component'\nimport { FilesComponent } from './components/files/files.component'\nimport { ProgressBarComponent } from './components/progressbar/progressbar.component'\nimport { NotificationComponent } from './components/notification/notification.component'\nimport { ToolbarComponent } from './components/files/toolbar/toolbar.component'\n// pipes\nimport { FileSizePipe } from './pipes/filesize.pipe'\n// services\nimport { LanguageService } from './services/language.service'\nimport { FileService } from './services/file.service'\n// 3rd party modules \nimport { TreeModule } from 'angular2-tree-component'\nimport { DropdownModule } from 'ng2-dropdown'\nimport { TranslateModule, TranslateStaticLoader, TranslateLoader } from 'ng2-translate'\nimport { createTranslateLoader } from './config/language.config'\n@NgModule({\n  declarations: [\n    AppComponent,\n    FileSizePipe,\n    HeaderComponent,\n    SidebarComponent,\n    FilesComponent,\n    ProgressBarComponent,\n    NotificationComponent,\n    ToolbarComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    TreeModule,\n    DropdownModule,\n    TranslateModule.forRoot({\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    })\n  ],\n  providers: [LanguageService, FileService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n````\nlanguage.config.ts\n```import { TranslateModule, TranslateStaticLoader, TranslateLoader } from 'ng2-translate'\nimport { Http } from '@angular/http'\nexport function createTranslateLoader(http: Http) {\n    return new TranslateStaticLoader(http, './assets/i18n', '.json')\n}\nand root component (app.component.ts)\nimport { Component } from '@angular/core'\nimport { TranslateService } from 'ng2-translate'\nimport { LanguageService } from '../../services/language.service'\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(private translate: TranslateService, private lang: LanguageService) {\n    translate.addLangs(['en', 'fa'])\n    translate.setDefaultLang('fa')\n    translate.use('fa')\n    this.lang.getCurrentLang().subscribe(\n      value => {\n        this.translate.use(value)\n      }\n    )\n  }\n}\nlanguage.service.ts\nimport { Injectable } from '@angular/core'\nimport { TranslateService } from 'ng2-translate'\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject'\n@Injectable()\nexport class LanguageService {\nprivate language: BehaviorSubject = new BehaviorSubject('fa')\ngetCurrentLang(): BehaviorSubject {\n    return this.language\n  }\nchangeLang(newLang: string): void {\n    this.language.next(newLang)\n  }\n}\n````\n. @ocombe would  you please make a plunker ? at the moment this plunker is sending 2 requests for en.json. ",
    "dgroh": "Also having this issue. json is called twice when using setDefaultLang and use in AppComponent constructor.. ",
    "CarlosPinedaT": "@dgroh, , could you solve it? as? . OK thanks!. ",
    "nfavaron": "Still having the issue.\nAppModule imports TranslateModule.forRoot() with a TranslateLoader.\nAppComponent calls .setDefaultLang() as well as .use() which triggers a 2nd exact same HTTP call.\nI need .use() in order to subscribe to the observable.\n. ",
    "bautistaaa": "Still having issue as well. Can we re-open this?. bump**. ",
    "andrashatvani": "But this is a restriction as I currently use 2.2 and want to upgrade to 2.4 - any hints?. This is what I assumed, too, but still get this error. Removing node_modules, then npm i, then npm i --save ng2-translate did the trick. @balr404 I think you were in the wrong folder /Users, and not in the project folder.. ",
    "cdparra": "Interesting, I will try that out. Thanks! . ",
    "Chuvisco88": "@cdparra I used the ng2-translate-extract as well, works like a charm. So if this solves your issue, can you close it? :). I have seen, the ngx-translate/http-loader now is working with HttpClient, thanks!. ",
    "rraposo": "Solved it, had to put deps: [TranslationService] on my AppModule.\nCheers. ",
    "datencia": "I've upgraded the Ionic2 example to ngx-translate 6.0.1. ",
    "danielsogl": "@datencia I created a PR to update the example to our latest release 3.3.0.\nI think you can close your PR. I found a solution and updatedt also the Ionic docs.\nHere is the code for all your page.module.ts files\n```\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { HelloPage } from './hello-page';\n@NgModule({\n  declarations: [\n    HelloPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(HelloPage),\n    TranslateModule.forChild()\n  ],\n  exports: [\n    HelloPage\n  ]\n})\nexport class HelloPageModule {}\n```\nI will create also a PR for the Ionic 2 example in this repo. Sure the example is outdated. The example repository provided by @CodeAndWeb looks okay for me. \n@CodeAndWeb can you replace the old example with yours in the PR?. thanks for the hint. ",
    "alienlike": "I have no doubts about the library! My index.html does have charset defined, so I took a closer look at the JSON file encoding. Even thought it was set to UTF-8, I tried changing the encoding from UTF-8 to UTF-8 BOM, and then back again to UTF-8. This resolved the problem, whatever it was.. ",
    "CHOUAIAR": "Thank you @ocombe  :). ",
    "thigrand": "It works, thanks. I tried it before, but apparently i made some mistakes.. ",
    "xiejiabao": "@emoralesb05 but the date pipe only can be used in chrome and opear\n\nof course it is due to the Init API is limited to browser so far. \nAnd we may would like to do the translation using the same way but no using different pipe. \nIs it possible to consider develop localization for date and number in ng2-translate?. ",
    "rdukeshier": "FWIW - the following worked for me for dates.  I assume the number related pipes would be equally trivial:\n```\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\n@Pipe({\n  name: 'localizedDate',\n  pure: false  // required to update the value when currentLang is changed\n})\nexport class LocalizedDatePipe implements PipeTransform {\n  private value: string|null;\n  private lastDate: any;\n  private lastLang: string;\nconstructor(private translate: TranslateService) { }\ntransform(date: any, pattern: string = 'mediumDate'): any {\n    const currentLang = this.translate.currentLang;\n// if we ask another time for the same date & locale, return the last value\nif (date === this.lastDate && currentLang === this.lastLang) {\n  return this.value;\n}\n\nthis.value = new DatePipe(currentLang).transform(date, pattern);\nthis.lastDate = date;\nthis.lastLang = currentLang;\n\nreturn this.value;\n\n}\n}\n```\n. ",
    "sonukapoor": "@rdukeshier keep in mind that setting the pipe pure property to false can create performance issues depending on many date pipes you are using. The pipe will get re-evaluated whenever a change-detection occurs. . @kommad Probably better to ask on StackOverflow. ",
    "uberspeck": "Great, i'll take a look. Thanks!. @AlwaysAbhl001, i've created a simple service to load translations for each module/component...\n/app/shared/services/translation-loader.service.ts\n```typescript\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nexport interface ILocale {\n  lang: string;\n  data: Object;\n}\n@Injectable()\nexport class TranslationLoaderService {\nconstructor(\n    private translate: TranslateService\n  ) { }\npublic loadTranslations(...args: ILocale[]): void {\n    const locales = [...args];\n    locales.forEach( (locale) => {\n      / \n        use setTranslation() with the third argument set to true to append\n        translations instead of replacing them\n      /\n      this.translate.setTranslation(locale.lang, locale.data, true); \n    });\n  }\n}\n```\n...then create the language files. You could use a different shape here if you wish.\n/app/app.en.ts\ntypescript\nexport const locale = {\n  \"lang\": \"en\",\n  \"data\": {\n    \"app\": { // <= namespace for module/component translations\n      \"title\": \"My Big Title\",\n      \"archived\": \"Archived\",\n      \"inactive\": \"Inactive\",\n      \"delete\":\"Delete\",\n      ...\n      }\n    }\n  }\n}\n...I then configure translation in the root module and load the root translation files...\n/app/app.module.ts\n```typescript\n...\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { TranslationLoaderService } from './shared/services/translation-loader.service';\n/ Import language files in each module/component as needed /\nimport { locale as english } from './app.en';\nimport { locale as spanish } from './app.es';\n@NgMoudule({\n  ...,\n  / use forRoot() in the main app module only /\n  imports: [TranslateModule.forRoot(), ...],\n  ...\n});\nexport class AppModule {\n  constructor(\n    private translate: TranslateService,\n    private translationLoader: TranslationLoaderService\n  ) {\n    / Config translation in root module /\n    this.translate.addLangs(['en', 'es']);\n    this.translate.setDefaultLang('en');\n    this.translate.use('en');\n    / Load translations in each module/component as needed /\n    this.translationLoader.loadTranslations(english, spanish);\n  }\n}\n```\n...and set up translation in each feature module/component as necessary...\n/app/feature-module/feature.module.ts\n```typescript\n...\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TranslationLoaderService } from '../shared/services/translation-loader.service';\nimport { locale as english } from './feature.module.en';\nimport { locale as spanish } from './feature.module.es';\n@NgModule({\n  imports: [TranslateModule, ...],\n  ...\n})\nexport class FeatureModule {\nconstructor(\n    private translationLoader: TranslationLoaderService\n  ) {\n    this.translationLoader.loadTranslations(english, spanish);\n  }\n}\n```\n...and finally, in a component...\nhtml\n<h1 translate>app.title</h1>\nI'm sure this solution isn't perfect, but it works for us. If you come up with improvements I'd love to hear them! Something to watch out for. You can't rely on translations from lazy loaded sibling or child modules to be present so make sure any translations needed across lazy loaded modules are available to a parent of those modules. Hope that helps!. I like your solution @jiberrocal, i'll have to play with that. Thx for sharing!. ",
    "jlberrocal": "@ocombe i'm already using the beta-1 but seems that the module is not making the ajax request for load the module translations . @uberspeck i did something similar but using require on each lazy loaded module i have this\n``typescript\nexport class UsersModule {\n    constructor(translate: TranslateService) {\n        let lang = translate.getBrowserLang();\n        let i18n = require(./i18n/${lang}.json`);\n    translate.setTranslation(lang, i18n, true);\n}\n\n}\n```\nBTW for do that i did a PR for allow deep merge of objects. You're welcome :). @jeserkin in the example i provided is just a JSON file, but i use require in order to force webpack to include it as part of the bundle otherwise you'll need to create a loader or a rule for preserve the json files and then request them with lazy loading. Yes is similar, I try your solution but it didn't work for me. what @k-schneider describes is exactly the same that i reported. @atiertant i can't set isolate to true because i'll need the parent translations, i was expecting to be able to add more translations based on my current module (lazy) . will be nice to take advantage of lazy loading even with the translations, so we can add the needed translations for the module without lose the main (root) translations. actually i'm trying with this approach\nexport default class MaintenancesModule {\n    constructor(http: Http, translate: TranslateService) {\n        http.get(`/metro-apps/maintenances/i18n/${translate.currentLang}.json`)\n            .map((resp: Response) => resp.json())\n            .subscribe((i18n: Object) => {\n                translate.setTranslation(translate.currentLang, i18n, true);\n            });\n    }\n}\nbut the instruction for set the new translations is being omited. @atiertant no exactly, because what about keeping the same instance? what the forChild method needs to do is only insert the new translations keeping the same instance of the TranslateService. @sebelga never do the action of a subscription in a do(), you have to use subscribe(). @Ludevik this doesn't work for you?. Yes, you are right @unsafecode the problem is that it seems that @ocombe is far of this project for a time. @ocombe could you please add this feature, i already made the PR actually i'm stuck because of this. wow excellent thanks, i'll really appreciate it  . module forRoot must be used into only in AppModule, not in the shared one. Because they aim to different purposes, for example try to change your application language with a click with the native library of angular. is a totally different structure, however i don't see a possible reason for change ngx-translate for native i18n. What about using a custom loader?. thanks @ocombe after my PR I thought you'd tell me that XD but what you did is the best approach. @atiertant just a quick question why are you using \"self\"? you are using fat arrow functions, so you'll never lose the context. @Toub why you don't use the pipe approach?. yes but is more precise using pipes (having in mind how pipes works) BTW i guess that both are template based so you can't use 2 template based directives in a same component (Angular behavior). @ankit0606 could you provide the error that you are facing?\nand maybe also how the code where you are importing the module. great, nice to hear that. @ocombe any idea of when is this going to be merged? currently i'm needing to much this feature, and i don't want to have the tarball into my project. well it merge it for sure, but JS have some really weird behaviors with the objects taken from JSON files, that is fixed doing the JSON.parse(JSON.stringify())\nBTW this add less code to util. @AlwaysAbhl001 i solved that using require, here an example:\n``typescript\nexport class UsersModule {\n    constructor(translate: TranslateService) {\n        let lang = CONFIG['LANGUAGES'];\n        let i18n = require(./i18n/${lang}.json`);\n    translate.setTranslation(lang, i18n, true);\n}\n\n}\n```\nthe only problem that i had was with the shouldMerge param because object deep merge is mess in JS, however i already made a PR that solves this problem, we need to wait until @ocombe accept it. if you have a different i18n file per component yes, in my case i have that for every lazy loaded module (AKA route). @kyue1005 AFAIK you will need a custom loader, that does not look like an error. you are doing things bad.\nwhy are you doing this ```translateObject.use('new_lang.json').....\nthat method is supposed to be used for change the application language\ntry using this code:\n``typescript\nconstructor(translate: TranslateService) {\n    let lang = CONFIG.DEFAULT_LANGUAGE;\n    let i18n = require(./i18n/${lang}.json`);\ntranslate.setTranslation(lang, i18n, true);\n\n}\n```\nthis is the solution i proposed in #411 and is the one that have been working for me. what you ask make no sense with this library, interpolation will only work with keys, i mean for example\nen.json:\n{\n    //other keys\n    \"max\": \"Maximum amount allowed is {{max}}\"\n}\nthen in typescript:\ntypescript\nlet message = this.translate.instant('max', {max: 35.99});\nconsole.log(message); // this should display \"Maximum amount allowed is 35.99\". i think that what you need is something like:\ntypescript\nlet max = 35.99; // or whatever value you want to set here (even a server response if were the case)\nlet message = `Maximum amount allowed is ${max}`;. @bigbharatjain could you please validate if adding TranslateModule to your FeatureModule fix the issue?. that's because order, if you emit the change before subscribing you might not see the change, but if you change the calling order you should be able to see the new properties. ok, seems that @ocombe set the getTranslation  method to be a one time subscription, so you will no be able to see the changes, if you want to know when a change take place you will have to listen for onTranslationChange event instead, however @ocombe there is an issue because translate pipe is never seeing the change please refer to this plunk. Maybe the main reason for not mention anything in docs is because this is an Angular pattern which is not directly related to this library, as you mention you could unsubscribe for avoid mem leaks, however you should also not be using the get method too much, please try to use always the directive or pipe approach . As far as i know translate directive should not receive the key you are attempting to translate i just change your example to\nhtml\n<span translate [translateParams]=\"{ value: 1337 }\">TITLE</span>\nand error goes. @CodeAndWeb you are right seems i'm a little outdated. problem seems to be related when node is empty and it tries to set the the key, i'll check it when i get some time. ",
    "erhimanshugarg": "I am facing some issue with setTranslation. Can you please help me in this #627. Thanks in advance . Hi, can anyone please tell me what is the second parameter of this get method. I didn't get what is interpolate object. . Any help or suggestions please?? . ++ @SamVerschueren. @jlberrocal i want to merge a new another lang/ json file from same to folder to default lang json file based on some condition. In above example i18n will take the same lang json file what i understood. Please correct me if i am wrong.  . Any suggestions in my issue #627?? . Can anyone suggest on my issue #627. How did you fix??. ",
    "ienemien": "@ocombe You said that it's possible to use the 'providers' property to create a new instance of the TranslateService per module. Do you have an example/documentation on how to do this?. ",
    "jeserkin": "@jlberrocal, @uberspeck do I understand correctly, that main difference in examples is with what typo of storage one uses. In first example translations are in TS file and that requires additional moves, in other it is in plat JSON file? Or am I missing something?. Is it possible with @uberspeck example to use json as storage for translations as well?. ",
    "julianpoemp": "i got this issue, too. How can this be fixed?. in app.module.ts make sure that you use this HttpLoaderFactory function:\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http, \"./assets/i18n/\", \".json\");\n}\nthat fixed this issue for me.. I'm not sure, but did you try just \"en\" instead of \"en-US\"?. what's the output of your web console? Are you sure that you have followed the instructions exactly and the file exists in path \"src/assets/i18n/en.json\"?\nDo you use the translate pipe properly? For example (assuming your en.json contains this):\n{\n \"continue\": \"Continue\",\n\"generals\": {\"test\":\"Test\"}\n}\nyou have to insert this in your template:\n<p>{{\"continue\" |\u00a0translate}}</p>\nor\n<p>{{\"generals.test\" |\u00a0translate}}</p>\nI don't know MockBackend, sorry.. ",
    "raemounz": "May I know how you were able to make it work? For my case, I followed the documentation however nothing happens, no error at all.. i have the following inside my AppModule\nexport function HttpLoaderFactory(http: Http) {\n  return new TranslateHttpLoader(http, \"./assets/i18n/\", \".json\");\n}\n  imports: [\n    BrowserModule,\n    HttpModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [Http]\n      }\n    })\n  ],\ninside app.component.ts, I have the following:\nconstructor(translate: TranslateService) {\n    translate.setDefaultLang('en-US');\n    translate.use('en-US');\n  }\nand i have the file src/assets/i18n/en-US.json\nis there anything I did wrong?. I also tried just \"en\" for both the config and the filename, but still nothing happens.  The MockBackend seems to be the culprit as when I removed it, the translation works.  But I need the MockBackend, any suggestion?. ",
    "angryanatole": "I have the same issue here. I'm not sure why, but it searches files from my domain, not the app folder.\nI'm using it with Angular CLI, if it matters.. ",
    "lchimaru": "I had the same issue, but changing \"assets\": [\n        \"assets\",\n        \"favicon.ico\"\n      ], to \"assets\": [\n        \"assets/\",\n        \"favicon.ico\"\n      ], helped me solved it.. ",
    "ac3ju": "Did you solved it ?. Same issue, but it works in dev and not in prod for me .... ",
    "cikcoh": "HI, i have question, sometimes the server is down and json file failed to fetch. so i have a tryagain() function in components tryin to load whatever needed api again including fetching json file again in that function too. how do i call this function in componets? can anyone help me?\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http, \"./assets/i18n/\", \".json\");\n}. Hi, can i ask in case of internet disconnection or server down issue, how can i call or reload this function again? i want to call it from a tryagain() function in my components file..\nexport function createTranslateLoader(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}. ",
    "tryadelion": "I am unable to reproduce it, might be due to a forced upgrade of almost every plugin i did this morning for a push to prod.Still,  wouldn't it make sense that when providing a collection, the output also be in a collection? anyway, the object with properties return value is not properly documented or i  might have missed it. For sure the angular 1 version returned an array.. Checked again, can't reproduce. \nthe section to perfectionate is 4. , currently only shows default 1-param behaviour.\n\n\nUse the service, the pipe or the directive:\n\nYou can either use the TranslateService, the TranslatePipe or the TranslateDirective to get your translation values.\nWith the service, it looks like this:\ntranslate.get('HELLO', {value: 'world'}).subscribe((res: string) => {\n    console.log(res);\n    //=> 'hello world'\n});. Found the error.\n\nrolled back to  \"@ngx-translate/http-loader\": \"^0.1.0\", and it worked-. Ionic 3.X doesn't run over angular 4.3+ for now, is there any way to,ehm, fix this?. what is the latest version that did work 1'00% fine with 4.1.3 of both core and httpLoader?\n. Thank you very much. ",
    "kontza": "RTFM, I should've read few lines further :)\nThanks for the tip.. ",
    "pmandapuram": "import this one into your spec file import {} from 'jasmine';\n  it resolves the issue\n. ",
    "fiznool": "See https://github.com/ngx-translate/http-loader/pull/1. Could you share your package.json?\nAnother answer to that question suggests that all additional angular\ndependencies should also be pinned to the same version, I'm wondering if\nthat could be the issue?\nhttp://stackoverflow.com/a/41775814\n. That's a lot of dependencies!\nYou could safely update all your angular dependencies to 2.3.1 or higher\nand everything would start to work I think?\n. ",
    "miniplus": "@ocombe \nThe project I'm currently working on is on Angular 2.0.1.\nI'm getting the following error:\nUncaught TypeError: ctorParameters.map is not a function\nApparently this has to do with the Angular compiler (http://stackoverflow.com/a/41444599).\nThe solution seems to be to upgrade to at least 2.3.1 because of changes.\nIf this is truly the case than this has to be reversed I guess?\nThe other possibility is to up the minimum dependency to 2.2.3 as you mentioned here\nCross referencing #386 . \"dependencies\": {\n    \"@angular/common\": \"2.0.1\",\n    \"@angular/compiler\": \"2.0.1\",\n    \"@angular/core\": \"2.0.1\",\n    \"@angular/forms\": \"2.0.1\",\n    \"@angular/http\": \"2.0.1\",\n    \"@angular/platform-browser\": \"2.0.1\",\n    \"@angular/platform-browser-dynamic\": \"2.0.1\",\n    \"@angular/router\": \"3.0.1\",\n    \"@ngx-translate/core\": \"^6.0.0\",\n    \"@ngx-translate/http-loader\": \"0.0.3\",\n    \"X-editable\": \"github:vitalets/x-editable\",\n    \"bootstrap\": \"^3.3.7\",\n    \"bootstrap-colorpicker\": \"^2.3.5\",\n    \"bootstrap-duallistbox\": \"github:istvan-ujjmeszaros/bootstrap-duallistbox\",\n    \"bootstrap-markdown\": \"^2.10.0\",\n    \"bootstrap-progressbar\": \"^0.9.0\",\n    \"bootstrap-slider\": \"^9.1.3\",\n    \"bootstrap-tagsinput\": \"^0.7.1\",\n    \"bootstrap-timepicker\": \"^0.5.2\",\n    \"chart.js\": \"2.3.0\",\n    \"ckeditor\": \"^4.5.10\",\n    \"clockpicker\": \"0.0.7\",\n    \"clone\": \"^1.0.2\",\n    \"core-js\": \"^2.4.1\",\n    \"debounce\": \"^1.0.0\",\n    \"dropzone\": \"^4.3.0\",\n    \"dygraphs\": \"^1.1.1\",\n    \"fuelux\": \"^3.15.8\",\n    \"he\": \"^1.1.0\",\n    \"highcharts\": \"^4.2.7\",\n    \"ion-rangeslider\": \"^2.1.4\",\n    \"jquery\": \"^2.2.4\",\n    \"jquery-color\": \"jquery/jquery-color#2.1.2\",\n    \"jquery-jcrop\": \"^0.9.13\",\n    \"jquery-knob\": \"^1.2.11\",\n    \"jquery-ui-npm\": \"^1.12.0\",\n    \"jquery-validation\": \"^1.15.1\",\n    \"jquery.maskedinput\": \"^1.4.1\",\n    \"jvectormap\": \"^2.0.4\",\n    \"markdown\": \"^0.5.0\",\n    \"morris.js\": \"^0.5.0\",\n    \"ng2-bootstrap\": \"1.1.7\",\n    \"ng2-popover\": \"git+https://github.com/griga/ng2-popover.git\",\n    \"ng2-redux\": \"^4.0.0-beta.0\",\n    \"nouislider\": \"^8.5.1\",\n    \"primeng\": \"^1.0.1\",\n    \"raphael\": \"^2.2.1\",\n    \"redux\": \"^3.6.0\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"scriptjs\": \"^2.5.8\",\n    \"select2\": \"^4.0.3\",\n    \"smartadmin-plugins\": \"^1.0.13\",\n    \"summernote\": \"^0.8.1\",\n    \"to-markdown\": \"^3.0.1\",\n    \"ts-helpers\": \"^1.1.1\",\n    \"zone.js\": \"^0.6.23\"\n  },\n  \"devDependencies\": {\n    \"@types/jasmine\": \"2.5.41\",\n    \"angular-cli\": \"1.0.0-beta.15\",\n    \"angular2-template-loader\": \"^0.6.0\",\n    \"codelyzer\": \"~0.0.26\",\n    \"expose-loader\": \"^0.7.1\",\n    \"imports-loader\": \"^0.6.5\",\n    \"jasmine-core\": \"2.5.1\",\n    \"jasmine-spec-reporter\": \"2.7.0\",\n    \"karma\": \"1.3.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-remap-istanbul\": \"^0.2.1\",\n    \"protractor\": \"4.0.9\",\n    \"script-loader\": \"^0.7.0\",\n    \"ts-node\": \"1.2.1\",\n    \"tslint\": \"3.13.0\",\n    \"typescript\": \"2.0.2\"\n  }\nNo peer deps.. ",
    "markelarizaga": "I'm getting a similar issue. I'm trying to use ngx-translate in Universal Starter but I'm getting:\nUnexpected value '[object Object]' imported by the module 'MainModule'\nIn node.module.ts I import TranslateModule:\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nAnd I add the Module to the imports: \n```\nimport {Observable} from \"rxjs/Observable\";\nlet fs = require('fs');\nexport class TranslateUniversalLoader implements TranslateLoader {\n  public getTranslation(lang: string): Observable {\n    return Observable.create(observer => {\n      observer.next(JSON.parse(fs.readFileSync('i18n/' + lang + '.json', 'utf8')));\n      observer.complete();\n    });\n  }\n}\n@NgModule({\n  bootstrap: [ AppComponent ],\n  imports: [\n    UniversalModule,\n    FormsModule,\n    RouterModule.forRoot([], { useHash: false }),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useClass: TranslateUniversalLoader\n      }\n    }),\n    AppModule\n  ],\n```\nI omit the rest for brevity. If I don't include TranslateModule in the list of imports everything runs fine, but just including it causes the error mentioned above. I have been digging in the internals a bit and I would say that for some reason Angular is not recognizing TranslateModule as en ngModule, but I don't want to talk to loud before having a better understanding of this.\nEnvironment:\n- ngx-translate version: 6.0.0\n- Angular version: 2.4.5\n- Angular 2 universal: 2.1.0-rc.1\nAny clue?. I achieved to make this work finally.\nThe good way for me was to use ng2-translate instead of ngx-translate along with the angular and universal versions I mentioned in my last comment.. @thebarada It worked for me too, thanks!. ",
    "thebarada": "I solve it just add @ngx- to includeClientPackages \nlike in this repo https://github.com/angular/universal-starter/blob/master/webpack.config.ts#L88. ",
    "chriseugenerodriguez": "@markelarizaga cant have service side code for client side render.. @AlwaysAbhl001 can you post your scripts here so I can help you furher? server.ts, app.module.ts, etc.\n. using localize js extenstion of ngx-translate.. https://github.com/angular/universal/issues/748. @SergiusSidorov I got error with build using link per your suggestion.\n```\nH:\\d\\node_modules\\@ngx-translate\\core\\src\\translate.pipe.js:1\n(function (exports, require, module, __filename, __dirname) { import { Pipe, Injectable, ChangeDetectorRef } from '@angular/core';\n                                                              ^^^^^^\nSyntaxError: Unexpected token import\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n    at Module._compile (module.js:533:28)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:503:32)\n    at tryModuleLoad (module.js:466:12)\n    at Function.Module._load (module.js:458:3)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n    at Object. (H:\\d\\dist\\ngfactory\\src\\app\\layout\\pages\\home\\home.component.ngfactory.ts:10:1)\nI added to whitelist and build script using webpage.\n    \"prebuild\": \"ng build --prod --no-sourcemap && ngc && webpack\",\n    \"build\": \"ts-node src/server.ts\",\n```\n```\nconst path = require('path');\nconst nodeExternals = require('webpack-node-externals');\nmodule.exports = {\n  entry: {\n    server: './src/server.ts'\n  },\n  resolve: {\n    extensions: ['.ts', '.js']\n  },\n  target: 'node',\n   externals: [nodeExternals({\n     whitelist: [\n      /^@angular\\/material/,\n      /^@ngx-translate\\/core/,\n      /^@ngx-translate\\/http-loader/\n     ]\n   })],\n  node: {\n    __dirname: true\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  module: {\n    rules: [\n      { test: /.ts$/, loader: 'ts-loader' }\n    ]\n  }\n}\n```. thanks @SergiusSidorov finally got it running, now i got this error when i go to url address.\n```\nH:\\d>npm run build\n\nd@0.0.0 prebuild H:\\d\nng build --prod --no-sourcemap && ngc && webpack\n\nHash: 8fb2d7e301320195c429\nTime: 56974ms\nchunk    {0} polyfills.f1fbb5539ef2b7bbd352.bundle.js (polyfills) 160 kB {5} [initial] [rendered]\nchunk    {1} main.60aac5f92ce9a8072a06.bundle.js (main) 72.9 kB {4} [initial] [rendered]\nchunk    {2} scripts.0aa3d564f58ccf154432.bundle.js (scripts) 127 kB {5} [initial] [rendered]\nchunk    {3} styles.0b26c5aa70ec35c51c47.bundle.css (styles) 175 bytes {5} [initial] [rendered]\nchunk    {4} vendor.ca225b61e86f922d59fe.bundle.js (vendor) 1.47 MB [initial] [rendered]\nchunk    {5} inline.e19e8bf5e70e3ca64a10.bundle.js (inline) 0 bytes [entry] [rendered]\nts-loader: Using typescript@2.3.4 and H:\\d\\tsconfig.json\nHash: 883725545653950b7cd6\nVersion: webpack 3.2.0\nTime: 34270ms\n    Asset    Size  Chunks             Chunk Names\nserver.js  178 kB       0  [emitted]  server\n   [9] ./src/app/layout/pages/testing/compute/compute.component.ts 1.08 kB {0} [built]\n  [14] ./dist/ngfactory/src/app/layout/pages/home/home.component.ngfactory.ts 3.38 kB {0} [built]\n  [17] ./src/app/layout/pages/home/home-routing.module.ts 1.27 kB {0} [built]\n  [18] ./src/app/layout/pages/404/notfound-routing.module.ts 1.34 kB {0} [built]\n  [19] ./src/app/layout/pages/testing/testing-routing.module.ts 1.63 kB {0} [built]\n  [20] ./src/app/layout/pages/testing/history/history.module.ts 1.32 kB {0} [built]\n  [21] ./src/app/layout/pages/testing/compute/compute.module.ts 1.32 kB {0} [built]\n  [22] ./src/app/layout/shared/header/navigation/nav.module.ts 1.45 kB {0} [built]\n  [23] ./dist/ngfactory/src/app/layout/pages/testing/testing.component.ngfactory.ts 1.61 kB {0} [built]\n  [24] ./dist/ngfactory/src/app/layout/pages/testing/compute/compute.component.ngfactory.ts 1.34 kB {0} [built]\n  [25] ./dist/ngfactory/src/app/layout/pages/testing/history/history.component.ngfactory.ts 1.34 kB {0} [built]\n  [26] ./dist/ngfactory/src/app/layout/pages/404/404.component.ngfactory.ts 1.55 kB {0} [built]\n  [43] ./dist/ngfactory/src/app/app.component.ngfactory.ts 2.43 kB {0} [built]\n  [44] ./dist/ngfactory/src/app/app.server.module.ngfactory.ts 10.5 kB {0} [built]\n  [52] ./src/server.ts 1.23 kB {0} [built]\n    + 71 hidden modules\n\nd@0.0.0 build H:\\d\nnode dist/server.js\n\nlistening on http://localhost:4000!\nERROR { TypeError: Cannot read property 'match' of undefined\n    at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n    at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n    at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n    at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n    at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n    at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n    at ComponentFactory_.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n    at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n    at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n    at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81\n  __zone_symbol__currentTask:\n   ZoneTask {\n     zone:\n      Zone {\n        _properties: [Object],\n        _parent: [Object],\n        _name: 'angular',\n        _zoneDelegate: [Object] },\n     runCount: 0,\n     _zoneDelegates: null,\n     _state: 'notScheduled',\n     type: 'microTask',\n     source: 'Promise.then',\n     data: undefined,\n     scheduleFn: undefined,\n     cancelFn: null,\n     callback: [Function],\n     invoke: [Function] } }\nUnhandled Promise rejection: Cannot read property 'match' of undefined ; Zone:  ; Task: Promise.then ; Value: { TypeError: Cannot read property 'match' of undefined\n    at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n    at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n    at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n    at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n    at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n    at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n    at ComponentFactory.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n    at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n    at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n    at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81\n  __zone_symbol__currentTask:\n   ZoneTask {\n     zone:\n      Zone {\n        _properties: {},\n        _parent: null,\n        _name: '',\n        _zoneDelegate: [Object] },\n     runCount: 0,\n     _zoneDelegates: null,\n     _state: 'notScheduled',\n     type: 'microTask',\n     source: 'Promise.then',\n     data: undefined,\n     scheduleFn: undefined,\n     cancelFn: null,\n     callback: [Function],\n     invoke: [Function] } } TypeError: Cannot read property 'match' of undefined\n    at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n    at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n    at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n    at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n    at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n    at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n    at ComponentFactory.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n    at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n    at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n    at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81\n{ Error: Uncaught (in promise): TypeError: Cannot read property 'match' of undefined\nTypeError: Cannot read property 'match' of undefined\n    at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n    at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n    at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n    at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n    at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n    at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n    at ComponentFactory_.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n    at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n    at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n    at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81\n    at resolvePromise (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:770:31)\n    at resolvePromise (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:741:17)\n    at H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:818:17\n    at ZoneDelegate.invokeTask (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:424:31)\n    at Zone.runTask (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:191:47)\n    at drainMicroTaskQueue (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:584:35)\n    at Server.ZoneTask.invoke (H:\\d\\node_modules\\zone.js\\dist\\zone-node.js:490:25)\n    at emitTwo (events.js:106:13)\n    at Server.emit (events.js:191:7)\n    at HTTPParser.parserOnIncoming [as onIncoming] (http_server.js:546:12)\n  rejection:\n   { TypeError: Cannot read property 'match' of undefined\n       at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n       at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n       at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n       at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n       at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n       at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n       at ComponentFactory.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n       at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n       at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n       at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81\n     __zone_symbol__currentTask:\n      ZoneTask {\n        zone: [Object],\n        runCount: 0,\n        _zoneDelegates: null,\n        _state: 'notScheduled',\n        type: 'microTask',\n        source: 'Promise.then',\n        data: undefined,\n        scheduleFn: undefined,\n        cancelFn: null,\n        callback: [Function],\n        invoke: [Function] } },\n  promise:\n   ZoneAwarePromise {\n     __zone_symbol__state: 0,\n     __zone_symbol__value:\n      { TypeError: Cannot read property 'match' of undefined\n          at new AppComponent (H:\\d\\dist\\server.js:1847:27)\n          at createClass (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10943:26)\n          at createDirectiveInstance (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:10774:37)\n          at createViewNodes (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12210:49)\n          at createRootView (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12105:5)\n          at Object.createProdRootView [as createRootView] (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:12790:12)\n          at ComponentFactory.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:9888:46)\n          at ComponentFactoryBoundToModule.create (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:3365:29)\n          at ApplicationRef_.bootstrap (H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4794:57)\n          at H:\\d\\node_modules\\@angular\\core\\bundles\\core.umd.js:4577:81 __zone_symbol__currentTask: [Object] } },\n  zone:\n   Zone {\n     _properties: {},\n     _parent: null,\n     _name: '',\n     _zoneDelegate:\n      ZoneDelegate {\n        _taskCounts: [Object],\n        zone: [Circular],\n        _parentDelegate: null,\n        _forkZS: null,\n        _forkDlgt: null,\n        _forkCurrZone: null,\n        _interceptZS: null,\n        _interceptDlgt: null,\n        _interceptCurrZone: null,\n        _invokeZS: null,\n        _invokeDlgt: null,\n        _invokeCurrZone: null,\n        _handleErrorZS: null,\n        _handleErrorDlgt: null,\n        _handleErrorCurrZone: null,\n        _scheduleTaskZS: null,\n        _scheduleTaskDlgt: null,\n        _scheduleTaskCurrZone: null,\n        _invokeTaskZS: null,\n        _invokeTaskDlgt: null,\n        _invokeTaskCurrZone: null,\n        _cancelTaskZS: null,\n        _cancelTaskDlgt: null,\n        _cancelTaskCurrZone: null,\n        _hasTaskZS: null,\n        _hasTaskDlgt: null,\n        _hasTaskDlgtOwner: null,\n        _hasTaskCurrZone: null } },\n  task:\n   ZoneTask {\n     _zone:\n      Zone {\n        _properties: {},\n        _parent: null,\n        _name: '',\n        _zoneDelegate: [Object] },\n     runCount: 0,\n     _zoneDelegates: null,\n     _state: 'notScheduled',\n     type: 'microTask',\n     source: 'Promise.then',\n     data: undefined,\n     scheduleFn: undefined,\n     cancelFn: null,\n     callback: [Function],\n     invoke: [Function] } }\n```. @mchambaud hey thanks for a response, I actually put this as a string in the class itself. Are you saying put this in json file and do this in class?\n```\nexport class HomeComponent {\n  constructor(meta: Meta, title: Title) {\n      title.setTitle('Phenomenex - META.TITLE');\n  meta.addTags([\n\n    // REGULAR\n    {name: 'description', content: META.DESCRIPTION},\n    {name: 'robots', content: 'index/follow'}\n\n  ]);\n\n}\n}\n```\nMETA: {\n   DESCRIPTION: 'Blah blah blah'\n}. @mchambaud thanks bro!\n```\nexport class HomeComponent implements OnInit {\nconstructor(public meta: Meta, public title: Title, public translate: TranslateService) {}\nngOnInit(): void {\n    this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n     this.meta.addTags([\n        {name: 'description', content: this.translate.instant('META.HOME.DESCRIPTION')}\n      ]);\n      this.title.setTitle(this.translate.instant('META.HOME.TITLE'));\n    });\n  }\n}\n```\n. @mchambaud issue with addTags, \nIn meta description, when I change language it keeps printing meta description.\n. @mchambaud  thanks man\nthis.meta.updateTag(\n        {name: 'description', content: this.translate.instant('META.HOME.DESCRIPTION')}\n      );. Use case here: https://github.com/ngx-translate/core/issues/583, Gist: https://gist.github.com/premiumwd/46b6699c590a4f596f4a18538d8cf5fb. ",
    "Verurteilt": "Any update on this pull request? Would be cool if you check it out. @ocombe  Awesome, thank you, looking forward to update the library. @ocombe  I just tested the same scenario I have with the new release (6.0.0) and it's not working, the initial value of the variable gets rendered, but after i change it it doesn't re render the text.\nI think we should re-open this.. Done. @kamok  No, it doesn't.. @StefH  what version do you have? It seems to be this bug was already fixed, if you still have trouble try using ImmutableJS (http://blog.scottlogic.com/2016/01/05/angular2-with-immutablejs.html).. @StefH  What version of the library do you have?  this.translate.use(this.translate.currentLang);  is used to set the language, that shouldn't be inconvenient when updating a variable.\n. Pretty weird, I think this problem could be related to the checkNodes function inside the directive, anyway, if you change your code to this one, it works:\n<h2 translate>HOME.TITLE</h2>\nPlunker: https://plnkr.co/edit/AKy99ttZz63Rht4tufby?p=preview. Why don't you make an Injectable class that wraps your actual class?\n. Habit, I will change it ASAP. ",
    "pieterdegraeuwe": "any progress on this? is Tuizi's solution is indead a work-around. Anyone found a real solution / fix?. ",
    "gate3": "Seems the best thing you can do right now is use namespacing, with the -f namespaced-json flag. Seems to be the only solution for modularity. The problem i would like to solve now is a way to globally load the pipe once in a lazy loading environment. I have to use a sharedmodule to load 'TranslateModule.forRoot()' in all my modules for it to work right now, not very efficient.. ",
    "Mokto": "@Almar Thanks !! That's a great solution for now.. ",
    "emmano3h": "I tried forchild solution but it is not working. Could we have any plunk working well ?\nngx-translate version: 6.0.0-beta.1\nAngular version: 6.0.3\nBrowser: [Chrome Version 67.0.3396.79 (Official Build) (64-bit)]\nLanguage: [TypeScript 2.7.2]. @ocombe  here my configs:\n\"@ngx-translate/core\": \"^10.0.2\",\n\"@ngx-translate/http-loader\": \"^3.0.1\",. @Tuizi your solution is not working with me.\nIt will be good to have a complete demo source of your article.. ",
    "wilker7ribeiro": "Same here. ",
    "YaroslavLyzlov": "Same here (angular 6.1.3, ngx-translate 10.0.2). ",
    "erperejildo": "don't get this... do we need to keep .forChild and .forRoot together? I get an error if I don't add the second one:\n\nCould not find IonicModule.forRoot call in \"imports\". @pegaltier I got that error but I use lazy loading for all my pages. @BruneXX is going to be used everywhere. Do we really need to modify every single module? Can't it be used as shared module?. Can you share it? I created this shared module and I added there my translation module and I can add different providers or other modules but I need to add this in every module anyway. I tried adding this on app.module but doesn't work. Thanks I got it working yesterday. My only question is: what about if we need a provider also? Do we need to load this provider inside the shared module, inside ModuleWithProviders or inside every component we need this shared module?. @tiberiumihai where do you move this (more info https://ionicframework.com/docs/developer-resources/ng2-translate/#lazy-loading-pages):\nTranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (TranslateLoaderFactory),\n        deps: [HttpClient]\n      }\n    })\n\nAlso, when they say \"DO NOT include providers inside shared modules\" they only mean inside  @NgModule? This doesn't apply to the exported class?. @zim-lee https://ionicframework.com/docs/developer-resources/ng2-translate/#lazy-loading-pages here Ionic suggest using .forChild instead .forRoot in app.module. I'm a bit confused with this tbh.\nWould you need to edit every single module with this shared module then? I know that I'm gonna need these translations across all my components . You shouldn't get any weird issue on a hybrid app. Does this work on desktop?. Maybe worth changing the title to avoid further confusions then.\nIf you're loading it using AngularJS I'm not quite sure. I use it with Angular. \nI suggest you creating a simple demo without anything else on top and just translating something. Feel free to link to Plunker. hmmm not sure. How are you using AngularJS? With TS?\nSend the link to have a look. that sounds more like a different problem. ",
    "cdskill": "Personnaly I still have a issue for getting all my translations... my scenario is : \na main application calling\n    a lazy loaded module\n          where is a container module \n                 where the translation is used.\nEverything works expect the translation :-/\nIf I dont lazy load I get my translations.\nThere is a sample:\napp.module\n```\n// Http loader for ngx-translate.\nexport function createTranslateLoader(http: HttpClient, settings: GlobalAppSettings) {\n  return new TranslationLoader(http, settings);\n}\n@NgModule({\n  declarations: [\n....\n  ],\n  imports: [\n....\n// Other external modules.\nTranslateModule.forRoot({\n  loader: { provide: TranslateLoader, useFactory: (createTranslateLoader), deps: [HttpClient, GlobalAppSettings] }, isolate: true\n\n....\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\napp-routing.module\nimports....\nexport const routes: Routes = [\n...\n    {\n        path: 'unemployment-info',\n        canActivate:[OAuthGuardService],\n        loadChildren: './unemployment.module#UnemploymentModule',\n        data: { id: 4, title:'tabs.eDossier' }\n\n    }\n...\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {preloadingStrategy:\u00a0PreloadAllModules, enableTracing:false})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\nunemployment.module\nexport const routes: Routes = [{ path: '', component: UnemploymentInfoComponent }];\n// Http loader for ngx-translate.\nexport function createTranslateLoader(httpClient: HttpClient, settings: GlobalAppSettings) {\n  return new TranslationLoader(httpClient, settings);\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    EDossierContainerModule,\n    TranslateModule.forChild({\n      loader: { provide: TranslateLoader, useFactory: (createTranslateLoader), deps: [HttpClient, \nGlobalAppSettings] }\n    }),\n  ], exports: [],\n  declarations: [...]\n})\nexport class UnemploymentModule { }\n\ne-dossier-container.module\n```\n// Http loader for ngx-translate.\nexport function createTranslateLoader(httpClient: HttpClient, settings: GlobalAppSettings) {\n  return new TranslationLoader(httpClient, settings);\n}\n@NgModule({\n  imports: [\n    ....\n    // Translate\n    TranslateModule.forChild({\n      loader: { provide: TranslateLoader, useFactory: (createTranslateLoader), deps: [HttpClient, GlobalAppSettings] }\n    }),\n    ....\n  ],\n  declarations: [\n   ....\n  ],\n  exports: [HomeMenuComponent],\n  providers: [\n...\n  ]\n})\nexport class EDossierContainerModule { }\n```\n. ",
    "luiscla27": "It is an issue,\n@ocombe  a couple of days ago i've faced the same issue for another Angular Library (igniteui), \nThe problem can be solved by removing the forRoot() implementation and using the recently introduced providedInproperty of the @Injectable decorator, in short TranslateModule.forRoot() will be deprecated.\nThis would be breaking-change so it requires someone to dedicate at least a full day to migrate the implementation, this is what the Angular 6 documentation says:\n\nBeginning with Angular 6.0, the preferred way to create a singleton services is to specify on the service that it should be provided in the application root. This is done by setting providedIn to root on the service's @Injectable decorator:. this issue is duplicated here \n. this issue is duplicated here . It is an issue,\n\nA couple of days ago i've faced the same issue for another Angular Library (igniteui), \nThe problem can be solved by removing the forRoot() implementation and using the recently introduced providedInproperty of the @Injectable decorator, in short TranslateModule.forRoot() will be deprecated.\nThis would be breaking-change so it requires someone to dedicate at least a full day to migrate the implementation, this is what the Angular 6 documentation says:\n\nBeginning with Angular 6.0, the preferred way to create a singleton services is to specify on the service that it should be provided in the application root. This is done by setting providedIn to root on the service's @Injectable decorator:. this issue is duplicated here . \n",
    "miki995": "Same issue with lazy loading, any signs of progress?\n@ocombe \nUntil they fix this, I have a workaround here . ",
    "dmkdfc": "https://github.com/dmkdfc/IonicMultiLanguage.git. ",
    "HDaghash": "any update on this ?. temp solution works for me \nin your shared module import and export like so \nwithout using forChild or forRoot\nimports: [\n    TranslateModule\n  ],\n  exports: [\n   TranslateModule\n  ],\nin you app module import forRoot\nimports:[\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      },\n      isolate: true\n    })\n]\nthis is was cool for me .. ",
    "shairez": "In case this can help anyone out there-\nI've been struggling with a similar issue.\nI had a lazy loaded module that didn't show any translations.\nAfter (a lot) of debugging, I saw that the TranslateStore was being created twice. \nAt first I thought it was a bug, but after digging into it I saw that the Lazy Loaded module imported a module, which imported a module which had a TranslateModule.forRoot() in its imports.\nIt was hard to trace because it was \"hidden\" inside of a shared library project.\nAnyway, I hope it will save some of you some debugging time, if you're suffering from the same (hidden) cluster fudge \ud83d\ude04 . Thanks @kamok \nI think it's best to add this to the repo Wiki and close this issue.\n@ocombe WDYT ?. By the way, to save you time of mocking manually everything\nyou can use something like this library I wrote - \nhttps://github.com/hirezio/jasmine-auto-spies\nWhere you could do something like - \ntranslateServiceSpy =  createSpyFromClass(TranslateService, null, ['get', 'use', 'anyOtherObservableMethod')\nand get a simple API of - \ntranslateServiceSpy.get.and.nextWith(anyValue)\nIt will also auto mock your sync methods as well (without having to specify them).. ",
    "subhani1249": "appModule.ts\n\nCreate one shared module  translateSharedModule.ts\n\nappComponent.ts\nimport {TranslateService} from '@ngx-translate/core';\n constructor(public translate: TranslateService) {\n      translate.setDefaultLang('en');\n}\nhomeModule.ts   //or any other submodules\nimport { TranslateSharedLazyModule } from '../../Common/translateSharedLazyModule';\nimports        : [      \n        TranslateSharedLazyModule\n    ], ..\n. ",
    "aminemaarouf": "I have one module on my app, and the issue still exist. ",
    "KlaudiaMor": "You should add in child module:\nTranslateModule.forChild({...}). @premiumwd How did you resolve your problem?. ",
    "jcardoz": "For those coming across the pipe translate could not be found, here are the steps you need to do in a nutshell to fix the issue when using in a different module.\n\n\nHave the translate module logic along with translate loader and translateFactory present in the app.module.ts\nTranslateModule.forRoot({ provide: TranslateLoader, useFactory: (http: Http) => new TranslateStaticLoader(http, './assets/i18n', '.json'), deps: [Http] }) ],\n\n\nIn your shared.module.ts (or any other module), import and export the Translate module.\u2028i.e.: Translate module should be a part of both the import and export arrays. Most answers in SO and github mention importing the module but not exporting it.\n\n\n@NgModule({ imports: [ TranslateModule ], exports: [ TranslateModule]. ",
    "LeHoanVu": "how to fix ?. ",
    "mike1130694": "Elliot. Is it possible that you share some more information regarding your static loader? I'm new to angular and found exactly this problem. My application is running perfectly but if I add the InMemoryWebApiModule in the app.module like this \"InMemoryWebApiModule.forRoot(InMemoryDataService),\" i get an error that my json translations files are not found.\nI would truly appreciate your help with this.. ",
    "polanders": "I had the same problem, I found I could resolve it by setting the  in-memory-web-api passThruUnknownUrl config flag to true to pass the request to the real url if a matching db collection name is not found.\nAlternatively custom handling can be provided in your InMemoryDbService implementation.\n. ",
    "diamond-darrell": "You still can use TranslateService to get a dynamic translation. But I agree, it would be simpler if translator pipe could do the same.. ",
    "kamok": "@Verurteilt How are you navigating around this issue? Do what @diamond-darrell said and get a dynamic translation to render on your view?. Sorry to spam, I found a temporary workaround:\nOn every single update on your params do this:\nthis.translate.use(this.translate.currentLang);\nThis forces a reload. Kinda hacky though. . @Verurteilt It's not about in inconvenience, it's about being clear on what a method is doing. Other people working on the codebase would be like \"Why is this dead code here?\". Unless you leave a comment saying that a bug in the ngtranslate requires it to \"refresh\" to translation. Which is why having a refresh() is better. . You need to configure a custom TranslationLoader.\nThen, provide it instead of the standard StaticLoader.\nEx: \nTranslateModule.forRoot({\n          provide: TranslateLoader,\n          useFactory: (createTranslateLoader),\n          deps: [Http]\n        })\nexport function createTranslateLoader(http: Http): TranslationLoaderService {\n    return new TranslationLoaderService(http);\n  }\n```\nHere's an example of how you can do it for the service:\nimport { Http }                                     from '@angular/http';\nimport { TranslateModule, TranslateLoader,\n         TranslateStaticLoader }                    from 'ng2-translate/ng2-translate';\nimport { Observable }                               from 'rxjs/Observable';\n// import 'rxjs/add/operator/map';\nexport class TranslationLoaderService implements TranslateLoader {\nconstructor(private http: Http) {\n  }\ngetTranslation(lang: string): Observable {\n    if (lang === 'en') {\n      return Observable.of({\n        HELLO: 'Hi there'\n      });\n    }else {\n      return Observable.of({\n        HELLO: 'Hola'\n      });\n    }\n  }\n}\n```\nThis really isn't an issue. Please read the docs more. This should be more than enough for you to get started.. @lathonez Thanks, will test later. The way you're doing it is still static loading a .json file. I'm building a custom translation loader which does not use any static assets, so using a proxy wouldn't work. It will work for someone using a StaticLoader. \nBTW, I started migrating to the new ionic-test-example as per your deprecation. I hope it's at least as good as yours =). Hope you'll still be active around these waters. . I managed to mock the storage class that makes async call. I use the Jasmine done and setTimeOut to let the storage mock data load which effectively works. Though, still haven't figured out how to mock the getTranslation method. I'll leave this thread open in case someone needs to do this, though any other ways to load translations such as using HTTP will be easily mockable if they just mock the method call for the service. . ",
    "victorct": "@kamok I don't know what @StefH  is trying to do, all he said was \n\nThis code works well: \n   this.params = { field: 'abc' };\n   this.translate.use(this.translate.currentLang);\n\nI don't know if he is using that variable, updating or even  binding it, that's why I think he has a bug in his code and not necessarily in the library, as you can see the library uses a method to check if two variables are equal (https://github.com/ngx-translate/core/blob/master/src/translate.directive.ts#L27) and if not it updates the translations.\n. ",
    "jongunter": "Should this issue should be re-opened until the docs get fixed?. ",
    "rahul-winner": "thanks @SamVerschueren \nMy bad, I was not using Observable correctly. Now, I'm able to get the translations with get().\nIn my use case, I want to load translation and retrieve translated string in component ngOnInit(). Though I'm able to achieve the task, however that wasn't looking cleaner. By the time translation made available, the ngOnInit() finishes and I got to reload the model again, which is not giving good UI experience. \nWill you be able suggest any sample code for such scenario?\nThanks a lot for prompt response. You may like to the close the issue.\nPS: I'm not able to paste the code due to company security policy. Hope you understand. . ",
    "oskaremil": "@rahul-winner I did this: (populating an array of table headers asychrounously.\nIt is a couple extra code lines but still clean and you don't have to reload the model\n```js\n    this.columns = \n    [\n        { name: 'foo', filtering: { filterString: ''} },\n        { name: 'bar', filtering: { filterString: ''} }\n    ];\n\n    this._translateService.get('Foo').subscribe(x => this.columns.find(y => y.name === 'foo').title = x);\n    this._translateService.get('FooPlaceholder').subscribe(x => this.columns.find(y => y.name === 'foo').filtering.placeholder = x);\n\n    this._translateService.get('Bar').subscribe(x => this.columns.find(y => y.name === 'bar').title = x);\n    this._translateService.get('BarPlaceholder').subscribe(x => this.columns.find(y => y.name === 'bar').filtering.placeholder = x);\n\n```\n. ",
    "stevermeister": "I know about the option\n<h2 translate>HOME.TITLE</h2>\nbut actually the idea, why I want to use exactly directive approach is I still want to keep original text in template, i.e.:\n<span [translate]=\"HELLO'\">Hello Dear User</span>. @xtgrant \nyou probably did not get my point, I have more than space in between:\n<span [translate]=\"'HELLO'\">Hello Dear User</span>\n\nand it still does not work when I change the language. I provided a plunker with exact code, you can check there. Quotes are on their place . yes,  #355 looks similar.\nit should do the check \nhttps://github.com/ngx-translate/core/blob/master/src/translate.directive.ts#L85\nI think I need to dive in code myself, otherwise I'll never get an answer here  :). ideally I would like to have response from @ocombe for this issue. ",
    "xtgrant": "Hi @stevermeister \nI'm having the same issue. When using directive as attribute with value,\n\nwill not work because the checkNodes function only queues elements with text length > 0.\nBecause <span> has no text length, the checkNodes method will not go into the for loop.\nFrom DOM childNodes method documentation::\nWhitespace inside elements is considered as text, and text is considered as nodes. Comments are also considered as nodes\nIf you add a space in the <span> </span>, it will work.\nThe space gives <span> a length of 1 and it goes into the loop.\nThis is in fact a bug. There should be a case where if childNodes length is empty, it should still render text.\n. Oh, if this code sample is from your actual code, then it's your syntax. you are missing single quote before the HELLO.\n<span [translate]=\"'HELLO'\">. Found this:\nhttps://github.com/ngx-translate/core/issues/355\nSo, it's not related. The directive selectors were already given the type @Input.\nMaybe its isolated scope, with that syntax, and only applies once on load.. ",
    "sGerli": "I'm having the same issue with directive, they aren't updating.. ",
    "f1ssl": "Had the same problem, but \n<span [translate]>HELLO</span>\ndid it for me.\nBut i think this is not the total solution. Will there be a bugfix concerning this issue?. ",
    "Laoujin": "Thanks, that's a good solution :). ",
    "elmartino": "I'm working on the migration of the frontend of an application. This is how it's done right now and how the data get's received from the backend. Luckily the data is not 1 MB per language :-). ",
    "picard31": "@elmartino , are there news ?\nI'm in the same situation as you from several days, but can't find an effective solution.. ",
    "dgresko": "@elmartino , Did you find a solution for this?. ",
    "k-schneider": "Just bumped into this as well.\nI wanted my app module to fetch translations from \"/assets/i18n/{lang}.json\" and my lazy loaded modules to fetch from \"/assets/i18n/{feature}/{lang}.json\" but was unable to get this to work.\nThe custom loader configured by forChild(...) was ignored.. ",
    "sebelga": "I am facing the same problem where the lazy loaded forChild loader never being called (unless I set isolate to true). Is there a way around it?\nI tried to call translate.use('en') in my component from the lazy loaded module but it didn't trigger the load.\nthanks!\n. I never managed to do it. So I created my own service to add translations to the root translateModule.\nI have a resolver for the routes accessing the lazyloaded module calling loadTranslationModule() before resolving.\n```js\n@Injectable()\nexport class LocalizationService {\n    private modulesTranslation: any = {};\nconstructor(private http: Http, private translate: TranslateService) { }\n\nloadTranslationModule(module: string): Observable<any> {\n    const lang = this.translate.currentLang || 'en';\n\n    if (this.modulesTranslation[module] && this.modulesTranslation[module][lang]) {\n        return Observable.of(this.modulesTranslation[module][lang]);\n    }\n\n    const uri = `assets/${module}/i18n/${lang}.json`;\n    return this.http.get(uri)\n        .map(res => res.json())\n        .do((i18n: any) => {\n            if (!this.modulesTranslation[module]) {\n                this.modulesTranslation[module] = {};\n            }\n            this.modulesTranslation[module][lang] = i18n;\n            this.translate.setTranslation(lang, i18n, true); // add translation to global translations\n            console.log(`[Localization] lang (${lang}) loaded for module (${module})...`);\n        })\n        .catch((err: any) => {\n            console.log(`[Localization] lang (${lang}) not found for module (${module})`);\n            return Observable.of({});\n        });\n}\n\n}\n```. This is a resolver. It will automatically subscribe. In resolver you don't return 'Subscription'. It's true that it could have been a \"map\" instead but I don't think it matters.. I am seeing the same behavior.\nI first load a \"common\" translation file in my forRoot.\nThen I go to a lazyloaded module that loads its translation file in a forChild.\nBut the \"common\" translation file never get loaded.... ",
    "Hadev-JHH": "Would be really ace if it would no longer be required to set isolate in order to get lazy loading without having to provide 'common' translations in every lazy loaded module. I don't want to use isolate because I really want only 1 instance of TranslateService (hence using the forChildren). . ",
    "avilao": "I also have the same problem as @sebelga . The translate.use('xx'); does not  load the new translations. Any thoughts?. Hi. It doesn't work for me if I try to change the language with translate.use('xx'); inside the lazy loaded module. Any ideas? Thank you. ",
    "chris08002": "@avilao Did you set isolate: true? The seperate translation provider works for me when isolating (and then setting the language again), but it doesn't work when not isolating.\n. ",
    "aguerot": "I worked around this issue with a custom MissingTranslationHandler as the correct currentLoader is set on the lazily loaded module  translate service. \nIn my lazy loaded module\ntypescript\nexport function HttpLoaderFactory(http: Http) {\n  // define custom resolution path for translation\n  return new TranslateHttpLoader(http, './assets/i18n/association/', '.json');\n}\n...\n    TranslateModule.forChild({\n       loader: {\n        provide: TranslateLoader,\n        useFactory: (HttpLoaderFactory),\n        deps: [ Http ]\n      },\n      missingTranslationHandler: {\n        provide: MissingTranslationHandler,\n        useClass: CustomMissingTranslationHandler\n      }\n    })\nand the common missing translation handler:\ntypescript\nexport class CustomMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams) {\n    return params.translateService.currentLoader.getTranslation(params.translateService.currentLang)\n      .map(r => {\n        const trad = r[params.key];\n        if (trad) {\n          return trad;\n        } else {\n          const prefix = (<any>params.translateService.currentLoader).prefix;\n          console.warn(`translation not found for key ${prefix} ${params.key} in ${params.translateService.currentLang}`);\n          return `**${params.key}**`;\n        }\n      });\n }\n}\nand the global loader for common translations\ntypscript\nexport function authServiceBuilder(backend: XHRBackend, options: RequestOptions, authService: AuthenticationService) {\n  return new HttpService(backend, options, authService);\n}\n...\nTranslateModule.forRoot({\n  loader: {\n    provide: TranslateLoader,\n    useFactory: HttpLoaderFactory,\n    deps: [ Http ]\n  },\n  missingTranslationHandler: {\n    provide: MissingTranslationHandler,\n    useClass: CustomMissingTranslationHandler\n  }\n})\n. ",
    "Ludevik": "Having same issue with lazy loaded translations.\n@Tuizi your solution works because you have isolated translation services.\nWhat i was looking for was: load shared translations in root module, add additional translations for each lazy loaded module. Don't make request twice when translations for given module are already loaded (eg. when you navigate from one lazy module to another and back). Actually the same as @sebelga posted.. @jlberrocal it works, but it is just a part of what we need. We don't want to make http request each time we navigate between lazy loaded modules. I currently added some additional module which prevents requesting translations for same module twice.. ",
    "ratidzidziguri": "@sebelga your sollution is actually really good but how would you handle language switching than? i did something like that with resolver but language switching never works for me :(\nWould you please provide any simple repo?. any update on this? solution mentioned here does not work for me as well. it always loads only first translation but never the one defined in lazy loaded module.. @panagulis72 it does not work for me actually even in a child module which is lazy loaded it does not work and never loads language.. if you search around there are some solutions but those do not work, I am also having this problem and so far i can not find any way around it.. ",
    "steven-zou": "Sorry, find the problem, forgot to change \"TranslateModule.forChild\" to \"TranslateModule.forRoot\" in the AppModule. Will close it.. ",
    "jackeykoh": "hi steven,\n      forchild is valid in your project?it can additional JSON files per component / module, i.e. an admin.json for the administration panel. ref issue https://github.com/ngx-translate/core/issues/444. ",
    "gonzoRay": "I get this exact same error when trying to use this library with .forChild in my SharedModule with the latest Ionic 3 lazy loading system. It works great without  the lazy loading stuff. Can't wait until this is supported. Otherwise great work guys! . ",
    "Nexus4me": "Hi, I get this Error when I run karma tests: No provider for TranslateStore! putting TranslateStore to app.module providers list doesn't help. Any suggestions?\nI am using:\n    \"@ngx-translate/core\": \"^6.0.1\",\n    \"@ngx-translate/http-loader\": \"0.0.3\",\n    Angular version: 2.4.7. Get \"No provider for TranslateStore!\" when running karma tests. \n\"@ngx-translate/core\": \"^6.0.1\",\n \"@ngx-translate/http-loader\": \"0.0.3\",\nangular : 2.4.1\nHere is example of the Test\nbeforeEach(async(() => {\n        TestBed.configureTestingModule({\n            imports: [\n                TranslateModule,\n            ],\n            declarations: [\n                LoginPageComponent,\n                NgForm,\n                TranslatePipe,\n            ],\n            providers: [\n                {provide: AuthenticationService, useClass: AuthenticationServiceMock},\n                {provide: Router, useClass: RouterMock},\n                TranslateService,\n                {provide: TranslateHttpLoader, useClass: TranslateLoaderMock},\n            ],\n            schemas: [NO_ERRORS_SCHEMA],\n        });\n        TestBed.compileComponents().then(() => {\n            fixture = TestBed.createComponent<LoginPageComponent>(LoginPageComponent);\n            fixture.detectChanges();\n            compiledLoginPage = fixture.nativeElement;\n            loginPageComponent = fixture.componentInstance;\n        });\n    }));. ",
    "lasimone": "Was a solution ever found?. ",
    "AbdallahBedir": "The solution for me is importing \"TranslateModule.forChild\" in the SharedModule and importing  \"TranslateModule.forRoot\" in the AppModule . ",
    "GirishAd": "@SamVerschueren Sorry for the confusion. We are actually using v 5.0.0 (latest from npm).. ",
    "richflee": "@GirishAd any luck with resolving this one? I'm not having any luck getting ngx-translate to work on Windows 7 (IE11 or IE10) at the moment. I'm using ngx-core@8.0.0. @ocombe Sure. When using getBrowserLang() the language detected is always 'en' despite adding spanish languages (via Internet Options) and making them the top preference. Am I missing something?. @ocombe Cool. I've tested using the function you described. \nbrowserLang = browserLang || window.navigator.language || window.navigator['browserLanguage'] || window.navigator['userLanguage'];\n^ This line picks up the language as 'en-AU'\nAnd then finally returns 'en' (after using browserLang.split etc)\nAny ideas? Am I missing something?\nThis is my package.json\njson\n{\n  \"name\": \"world-watch\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"4.4.6\",\n    \"@angular/common\": \"4.4.6\",\n    \"@angular/compiler\": \"4.4.6\",\n    \"@angular/core\": \"4.4.6\",\n    \"@angular/forms\": \"4.4.6\",\n    \"@angular/http\": \"4.4.6\",\n    \"@angular/platform-browser\": \"4.4.6\",\n    \"@angular/platform-browser-dynamic\": \"4.4.6\",\n    \"@angular/router\": \"4.4.6\",\n    \"@ngrx/core\": \"^1.2.0\",\n    \"@ngrx/effects\": \"^4.1.1\",\n    \"@ngrx/store\": \"^4.1.1\",\n    \"@ngrx/store-devtools\": \"^4.1.1\",\n    \"@ngx-translate/core\": \"^8.0.0\",\n    \"@ngx-translate/http-loader\": \"^2.0.1\",\n    \"core-js\": \"^2.4.1\",\n    \"immutable\": \"^3.8.2\",\n    \"intl\": \"^1.2.5\",\n    \"rxjs\": \"^5.4.2\",\n    \"zone.js\": \"^0.8.14\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"1.4.9\",\n    \"@angular/compiler-cli\": \"4.4.6\",\n    \"@angular/language-service\": \"4.4.6\",\n    \"@types/jasmine\": \"~2.5.53\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"@types/node\": \"~6.0.60\",\n    \"codelyzer\": \"~3.2.0\",\n    \"jasmine-core\": \"~2.6.2\",\n    \"jasmine-spec-reporter\": \"~4.1.0\",\n    \"karma\": \"~1.7.0\",\n    \"karma-chrome-launcher\": \"~2.1.1\",\n    \"karma-cli\": \"~1.0.1\",\n    \"karma-coverage-istanbul-reporter\": \"^1.2.1\",\n    \"karma-jasmine\": \"~1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"protractor\": \"~5.1.2\",\n    \"ts-node\": \"~3.2.0\",\n    \"tslint\": \"~5.7.0\",\n    \"typescript\": \"2.4.1\"\n  }\n}. > That being said, the issue for you is that it picks up \"en-AU\" instead of \"es-ES\" or something like that, right?\nYes, that's correct.\n\nI think that IE returns the language from windows instead of the option defined in the browser settings.\nOh okay. If you change the browser defined settings (in IE) and go to other sites like Google, then the webpage does indeed detect the language change from the browser settings. \n\nFrom research it does appear that you have to change the OS language on Windows 10. But in my reading so far I haven't seen anything to suggest that you had to change OS language on Windows 7. . @ocombe Sorry, just to clarify - so is that the expected behavior on Windows 7? That you have to change the language of the entire OS in order for the browser to pick up a different language? . @vinmontes How does this work with IE (particularly IE11) though? I've added languages to IE11 and shifted them to the top of my preferred languages, yet getBrowserLang() always returns 'en' as the language.. ",
    "chrillewoodz": "Try with something that would actually be a valid json property, like hallo_yeah.. ",
    "Arikael": "I needed the same functionality.\nWhy not just check translateService.store.translations if it's empty or not.. https://github.com/dherges/ng-packagr/issues/259 solved the issue for me. ",
    "enoh-barbu": "no updates on this yet? pretty sad! . only for methods like stream you should unsubscribe!. ",
    "animbalk": "I think this is a must fix to use ngx-translate. Client code need to know if things are loaded or not.. Facing the same issue.  I have even tried exporting TranslateModule as well. \n\nimport { CoreModule } from './core/core.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UpgradeModule } from '@angular/upgrade/static';\nimport { EventPolicyModule } from './policy/event-policy/event-policy.module';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nexport function createTranslateLoader1( http: HttpClient){\n  return new TranslateHttpLoader(http, 'assets/i18n/core/', '.json');\n}\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    UpgradeModule,\nCoreModule,\nEventPolicyModule,\n\nTranslateModule.forRoot({\n  loader : {\n    provide : TranslateLoader, \n    useFactory : (createTranslateLoader1),\n    deps : [HttpClient]\n  }\n})\n\n],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\nimport { AppRoutingModule } from './../app-routing.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule, LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { UrlHandlingStrategy, UrlTree } from '@angular/router';\nimport {  HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nexport class NgAppUrlHandlingStrategy implements UrlHandlingStrategy {\n  // only process the angular url\n  shouldProcessUrl(url: UrlTree) {\n      return url.toString().startsWith('/configuration/impolicies');\n  }\nextract(url: UrlTree) {\n      return url;\n  }\nmerge(url: UrlTree, whole: UrlTree) {\n      return url;\n  }\n}\nexport function createTranslateLoader2( http: HttpClient){\n  return new TranslateHttpLoader(http, 'assets/i18n/core/', '.json');\n}\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule, \n    HttpClientModule,\n    TranslateModule.forChild({\n      loader : {\n        provide : TranslateLoader, \n        useFactory : (createTranslateLoader2),\n        deps : [HttpClient]\n      },\n      isolate : true\n    })\n  ],\n  exports :[TranslateModule ],\n  providers: [\n]\n})\nexport class CoreModule { }\n. ",
    "Juliete": "I check it in this way.\nngOnInit() {\n    if (this.translateService.store.translations[this.translateService.currentLang]) {\n      this.inicializar();\n    } else {\n      this.suscripcionLangChange = this.translateService.onLangChange.subscribe(() => {\n        this.inicializar();\n      });\n    }\n  }. ",
    "unsafecode": "+1 Experienced the same, and it was kind of tricky to debug. Would be nice to support deep merge, since we're talking about plain JSON and not complex JS objects.. This looks nice and tiny enough to be embed, IMHO:\nhttps://github.com/KyleAMathews/deepmerge. ",
    "victorlevasseur": "I think the directive doesn't work with ng-container and ng-template/template tags.. In dev mode, Angular 2 does a double change check to detect potential side-effects (that are often causing troubles). So, it might be why you're seeing multiple calls (not sure tho, but it's a possibility).. ",
    "antoine92190": "Try adding a space after each comma:\n\"Janua, Febru, Mar, Apr, May, June, Jul, Augus, September, October, November, December\". ",
    "sebrojas14": "Someone?. So? what can we do?. ",
    "mikifus": "Hi,\nDespite I am quite new using ionic, I found a solution to this issue, hope it helps someone.\nIn html use:\n[monthNames]=\"months_names\"\nThen in ts:\nthis.months_names = this.translate.instant(\"MONTHS\");\n. ",
    "ZikZakJainy": "Thanks for reply SamVerschueren , In my project different sub modules so, I imported TranslateModule in app module component like :\nTranslateModule.forRoot({\n            provide: TranslateLoader,\n            useFactory: (createTranslateLoader),\n            deps: [Http]\n        }) \nbut still translate pipe not fount. . ",
    "bc3": "i have the same issue, i also have a project with different sub modules and added the translatemodule to that specific component, no resolution ...\nApp.Modile also contains\nTranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [Http]\n            }\n        })\nwhen i remove code from template, it works, and when i try to access the translate service instance it gives me the correct info (chrome debug), i tried to add a translation to the service in code, no problem\ni only have a problem when using the pipe in a template (not inline but with url)\nusing the 6.x version\n. @SamVerschueren , you are indeed correct, but i was adding the translate module into my component and not my sub module :-). ",
    "jbgarr": "I was having this same issue as well. I have my main module (app.module.ts) and it handles the initial configuration. Then I have a shared module that is imported by all my other feature/page modules. In order for this to work for me I had to include the TranslateModule in my shared module's imports array as well as the exports. I would suggest adding this to the documentation because it's not obvious that the TranslateModule needs to be included in both arrays (unless I am doing something wrong here and this is not necessary).. ",
    "insanehong": "I have the same issue.\n\n@angular/core@2.4.6\n@ngx-translate/core@6.0.1\n@ngx-translate/http-loader@0.0.3\n\n```typescript\n// app.module.ts\nimport { \n  TranslateModule, \n  TranslateLoader, \n  MissingTranslationHandler,\n} from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslationHandler } from './app.translation';\n@NgModule({\n  bootstrap: [ AppComponent ],\n  imports: [ \n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [Http]\n      },\n      missingTranslationHandler: { \n        provide: MissingTranslationHandler, useClass: TranslationHandler \n      },\n    }),\n  ]\n});\n```\n```html\n// template.html\n{{ 'CATEGORY.ALL' | translate }}\n```. ",
    "n0daft": "Don't know your state on this but I just ran into the same problem and came up with a temporary solution using a pipe with ternary operator in interpolation params:\n<mat-card-title>{{'your.translation.key' | translate: {number: customer ? customer.number : ''} }}</mat-card-title>\nThis way the translation logic is still only in the template and the ugly braces in case of null value disappear in favor of the empty string.\nHope this helps.. ",
    "justforuse": "@ocombe Sorry, my bad, I didn't notice it and thought it is the same with angular-translate, which use $translate.use() to get current language.\nThanks a lot.. ",
    "guntram": ".getBrowserLang() returns the FIRST default browser language.\nI just changed my chrome from \"de\" to \"en\"...ok...working.\nI wanted to change back to \"de\", but the german language was gone in the chrome settings, so i added it again and set it as the default browser language.\nAfter all of that, the .getBrowserLang() still returns \"en\", because my \"de\" setting was the last of three [\"en-us\", \"en\", \"de\"], and the .getBrowserLang() only returns the first browser language, but NOT the one which is set as the default language.. English please.... ",
    "NiklasA": "Hi,\nI can reproduce the issue described by Guntram. Could anyone please review this issue?\n\n.getBrowserLang() will return english, but my Chrome is configured with german as preferred language.\nThanks in advance.\nNiklas\n. ",
    "vinmontes": "@NiklasA and others.  I had the same issue.  This is how I solve it.  \nLets look at your screen shot, you notice that English is the first language on your list.  Well for some reason even if you select Deutsch as your browser language your  .getBrowserLang(); picks up the first language on that list which is English (see your screenshot) Deutsch is your second on your list.\nYou have to move Deutsch to the top of the list AND also make it your browser language in order for it to work.  . ",
    "rbirkgit": "getBrowserLang() doesn't seem to work with IE11. It always returns 'en' for me.. ",
    "tatsujb": "\nthis.translate.currentLang is always undefined for me.\nwhat's weird it the dropdown works fine to know which language is selected but as soon as you try to use this call ts-side it return undefined : \nconstructor(\n    private transl: TranslateService){\n    this.translate = transl;\n  }\n....\nconsole.log('getting body ',  this.translate.currentLang, this.translate['currentLang'], this.transl.currentLang, this.transl['currentLang'] );\nouputs : \ngetting body  undefined undefined undefined undefined\n\nnvm found out needed to call in response of the subscribable use() method  : https://github.com/ngx-translate/core/issues/497\n. > The way it's going, you'll never be able to dynamically change the language in Angular. It's clearly not a priority for Google and they don't think it's a problem if you have to reload the app completely to change the locale.\nthey have a screw loose then... :/. @amustiere I did exactly what you envision and I ended up using ngx-translate when I had wanted to use Angular's own wip i18n.\nyou can accomplish it with Angular's i18n as well but it isn't as performant and is a headache to setup with how you serve the different compiled frontends, while ngx-translate is a breeze to set up and really responsive.. @amustiere I might not be the right guy for your issue. I'm not entirely sure I understand it. I had a relatively simple setup of ngx-translate for my app even though my app is quite big. \nI struggled with loading the JSON files at first because I'd assumed angular could simply import them like any other file but as it turns out the only possibility is to load them as a REST observable (you make a http get API call to the Json file and you'll in return get it's content back (yes asynchronously, I know, it's annoying but that's how it is.)\nthis.api.getCurrentLocaleJSON(this.store.locale).subscibe((data) => {\n  console.log('hello I am a language file, you should probably put me in a store of some sort  : ', data.json());\n});\nand in you api service : \ngetCurrentLocaleJSON(locale): any{\n    const apiURL = `/assets/${locale}.json`;\n    this.locale =\n      this.http\n        .get(apiURL);\n    return this.locale;\n  }\nnote that I personally don't have \"/assets/\" I have \"${apiURL}assets/\" because it may be slash or not depending on whether or not I'm in dev or prod, so adapt the url to suit your needs.\nalso note that I personally only load the JSON file I presently need but you can, of course, create a separate API for each language and load all of them into separate store variables this way all of them are available at the same time though I don't really see the point?. @sundaramkumar  the above does not work for me : \n(picture of the app displaying the notification with \"notification.login.defaultError.body\" instead of the retrieved value)\n@jmruiz6 your solution is async I need a sync solution. \n@ngehlert, @ocombe  how do I solve this ?\nhere's my code : \nLoginErrorMessage(){\n    const myConf = {...conf};\n    myConf.timeout = 3500;\n    const body = this.translate.instant('notification.login.defaultError.body');\n    const title = this.translate.instant('notification.login.defaultError.title');\n    this.snotifyService.error(body, title, myConf);\n  }\nfr.json :\n{\n\"notifications\" : {\n    \"login\":{\n      \"defaultError\":{\n        \"title\":\"Connexion \u00c9chou\u00e9\",\n        \"body\":\"La connexion a \u00e9chou\u00e9 pour une raison inconnue.\",\n        \"config\":{\n          \"timeout\":null\n        }\n      },\n   }\n}\nI'm using the snotify library for notifications, any ideas?. @ngehlert I'm in exactly the same state you are except for me ngx-translate is really not cutting it.\nAnd I'm stuck being cussed out by my boss because \"i18n being in the state you claim for Angular in 2018 (Q4) is impossible!!!\"\n@ocombe \n\nI agree, Google has its own solution internally (closure) and that's why it's not very important for them... We have limited resources and clearly this is not the top priority.\n\nI can't make heads or tails of such a decision.. @ngehlert I know :( ... I'm just trying to get some multiple-choice/dynamic translations in. I also noticed I can't get certain places translated in this library (such as input placeholders).\nnot that the angular method doesn't have it's fair share of problems and their idea that having to start from scratch on what you were doing on your webapp when changing language (reload the whole page) is acceptable in 2018-19, is ludicrous.\nso far I'm a bit frustrated by how little automation there is as compared to the angular way but am pleased with the use of JSON, which you can organize really really precisely (by page + by view + by component) also I was up and running really REALLY fast. but yeah I'm still only 5% of the way on all my translatable fields after a day it feels sooooooo slow to go get them one by one.\nluckily I only have to search my project by the i18n tag so that saves alot of time.. @ngehlert you're right I was doing something dumb :\n```\n<input\n       [placeholder]=\"{{ 'confirmedDate' | translate }}\"\n\nwhen obviously I was supposed to be doing :\n<input\n       [placeholder]=\"'confirmedDate' | translate\"\n```\n. \n",
    "digaus": "The provider is located in src/provider/http-service.ts\nThis is the code simplified:\n```\nimport { TranslateService } from '@ngx-translate/core'; \n@Injectable()\nexport class HttpService {\n  constructor(public translate: TranslateService) {\n  }\n}\n```\nVisual Studio underlines TranslateService in the constructor and says that it could not find the name... \nThis is my app.module.ts:\n```\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { Http } from '@angular/http';\nimport { MyApp } from './app.component';\nimport { LoginPage } from '../pages/login-page/login-page';\nimport { Page1 } from '../pages/page1/page1';\nimport { Page2 } from '../pages/page2/page2';\nimport { HttpService } from '../providers/http-service';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [\n    MyApp,\n    LoginPage,\n    Page1,\n    Page2\n  ],\n  imports: [\n      IonicModule.forRoot(MyApp),\n      TranslateModule.forRoot({\n          loader: {\n              provide: TranslateLoader,\n              useFactory: (createTranslateLoader),\n              deps: [Http]\n          }\n      })\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    LoginPage,\n    Page1,\n    Page2\n  ],\n  providers: [{provide: ErrorHandler, useClass: IonicErrorHandler}, HttpService]\n})\nexport class AppModule {}\n```\n. Thanks was Visual Studio... still got a problem.\nCan you get the translation data. save it and then use it later? Because this way I just get the name of the values and not the values itself :/\nprivate translationLet: any;\nthis.translate.get(['LOGIN','LOADING','DOWNLOADED','NOCONNECTION']).subscribe((translation: [string]) => {\n        this.translationLet = translation;\n    });. Doing it in the app.component.ts, also added a fallback which works fine in the rest of the app. When I add this.translation.use('en') before this.translation.get() an error occurs... it does not seem to find the translation json :/ \n```\nimport { TranslateService } from '@ngx-translate/core'; \n@Injectable()\nexport class HttpService {\n  private translationLet: any;\n  constructor(public translate: TranslateService) {\n     this.translate.use('en'); //getting error when using, without it texts are just LOGIN, LOADING etc.\n     this.translate.get(['LOGIN','LOADING','DOWNLOADED','NOCONNECTION']).subscribe((translation: [string]) => {\n        this.translationLet = translation;\n    });\n  }\n}\n``. Yes it does... it works well on all Pages but not in the service :/. First one:LOGINSecond one: {\"LOGIN\":\"LOGIN\", \"LOADING\":\"LOADING\"}Third one:LOGIN. Same code run in a component for examplepage1.tsinstead of the providerhttp-service.ts` works fine :/. OK did that and there it worked... now I went back to my main project changed nothing and it works. Very odd..... I have the same odd problem... have en, de and it file, ngx-translate does not find the en file ... when I rename the en file to uk and everything where it is used it just works. All in all pretty odd... also when I start my app I present a loading with a translation.\nthis.platform.ready().then(() => {\n      this.translate.use('uk');\n      this.translate.get(['LOGIN', 'CHECKKEY']).subscribe((translation: {[key: string]: string}) => {\n        this.translationLet = translation;\n        console.log(translation);\n        this.loading = this.loadingCtrl.create({ \n          content: this.translationLet.CHECKKEY, \n          dismissOnPageChange: true,\n          duration: 5000 \n        });\n        this.loading.present();\n      });\nThe translation for CHECKKEY will just show the key itself ...even when I add a timeout the translation will not be correctly shown :/ translation in the template itself works fine thought. ",
    "tomriddle1234": "I got exactly same issue, how did you solve it \uff1f. I solved it by removing node_modules and npm install everything again, was using cnpm, and it was broken. Should use npm.. I am experiencing the same issue with Ionic 3 (Angular 4.0.2\uff09 + ngx 6.0.1, the get method only gives the key  rather than its value, instant gives nothing. Please see https://github.com/ngx-translate/core/issues/464. I solved it by removing node_modules folder and run npm install again. Was using cnpm instead of npm.. Yeah, I got exactly same issue. Please check this issue too, https://github.com/ngx-translate/core/issues/464. Solved it, just remove node_modules and run npm install again fixed it for me. Cause I was using cnpm instead of npm, it was broken.. ",
    "samanmohamadi": "I Have the same issue.. Calling getTranslation before get resolves the issue.. @AlexanderKozhevin Sorry, I don't remember it. Recently I moved the whole project to React. . ",
    "AlexanderKozhevin": "@samanmohamadi Where do you call it?. ",
    "AhmadPayan": "@AlexanderKozhevin \nThis works for me, I have called getTranslation before calling get method:\n```\n  translated: Array<{display: string, target: any}> = [];\nvar tmp = this.translate.getTranslation('fa');\n\nvar keys= ['AppTitle','Home.Register','AboutUs.Title'];\nthis.translate.get(keys).subscribe(\n  value => {\n    var values = _.values(value);\n    for(var key in keys){\n      this.translated.push({display:values[key],target:keys[key]});\n    }\n  });\n\n```\n\nNote that I'm using lodash  plugin to work with arrays. \n",
    "torsorensen": "Calling getTranslation(lang) in the provider before usingthis.translate.get(key)does indeed work.\nHowever, if you want to use the browser's language instead of a fixed string, you would need to have it available in a static context. Unfortunately, this is currently not a feature of ngx-translate (see open ticket here https://github.com/ngx-translate/core/pull/822)\nWhat I did to work around this for now was to copy the non-static function from the ngx-translate source code of how to get the browser's language, and make the following two static functions and a static field in UtilProvider.ts\nUtilsProvider.ts\n```\n     /* \n     * Language\n     /\npublic static defaultLang: string = \"de\";\n\n//The language to use throughout the app\npublic static getLang() {\n    let browserLang = UtilsProvider.getBrowserLang();\n    if (browserLang) {\n        return browserLang;\n    } else {\n        return UtilsProvider.defaultLang;\n    }\n}\n\n//Helper to get the language of the browser in a static context.\npublic static getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n    }\n    var browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || (<any>window.navigator).browserLanguage || (<any>window.navigator).userLanguage;\n    if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n    }\n    if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n    }\n    return browserLang;\n}\n\n```\nThen in the provider that needs to do a translation based on browser's actual language:\nOtherProvider.ts\n```\nprivate initTranslate()\u00a0{\n    //Since this is loaded before app.initTranslate() is executed,\n    //we have to call getTranslation here using a statically available value for the language\n    let lang = UtilsProvider.getLang();\n    this.translate.getTranslation(lang);\n\n    this.translate.get(\"MONTH_NAMES\")\n        .subscribe(values => {\n            this.translatedMonthNames = values;\n        });\n}\n\n```. ",
    "gilhotmail": "for me what worked eventually was wrapping the use(lang) call inside a try catch block, as it does change the language even if it throws an exception, and you get the get method inside the finally block.. ",
    "jogelin": "my module:\n```\n/*\n * Created by JGE on 17/01/2017.\n /\nimport {NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpModule, Http} from '@angular/http';\nimport {SEMissingTranslationHandler} from './missing-translation.handler';\nimport {LocalizationLoader} from './localization.loader';\nimport {LocalizationService} from './localization.service';\nimport {\n    MissingTranslationHandler, TranslateModule, TranslateLoader, TranslatePipe,\n    TranslateDirective\n} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http);\n}\n@NgModule({\n    imports: [\n        HttpModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [Http]\n            },\n            missingTranslationHandler: {provide: MissingTranslationHandler, useClass: SEMissingTranslationHandler},\n    })\n],\nproviders: [\n    LocalizationLoader,\n    LocalizationService\n],\nexports: [\n    TranslatePipe,\n    TranslateDirective\n]\n\n})\nexport class LocalizationModule {\nconstructor(@Optional() @SkipSelf() parentModule: LocalizationModule) {\n    if (parentModule) {\n        throw new Error(\n            'TranslateModule is already loaded. Import it in the AppModule only');\n    }\n}\n\n}\n```. my bad, caused by a wrong rimraf. closed. ",
    "lobnazakaria": "were you able to translate several different text in an array using ngFor ??\ni want to translate several text but i don't know how to use translate pipe \ni would like help please. ",
    "greglockwood": "angular-translate, the popular library for translation in AngularJS, has this feature and calls it \"links\".\nHere is their explanation and justification for it taken from their Guide page:\n\nAnother cool feature that angular-translate provides is the ability to link within your translation table from one translation id to another. Let's say we have the following translation table:\n{\n  \"SOME_NAMESPACE\": {\n    \"OK_TEXT\": \"OK\"\n  },\n  \"ANOTHER_NAMESPACE\": {\n    \"OK_TEXT\": \"OK\"\n  }\n}\nSo, as you can see, we have introduced two namespaces here, but both of them kind of need a text that probably just says \"OK\". This case isn't unusual if you just think about a confirmation button or similar in your app. However, it isn't hard to recognize that we have a redundancy here and we as developers don't like redundancy, right?\nIf there's a translation id that will always have the same concrete text as another one you can just link to it. To link to another translation id, all you have to do is to prefix its contents with an @: sign followed by the full name of the translation id including the namespace you want to link to. So the example above could look like this:\n{\n  \"SOME_NAMESPACE\": {\n    \"OK_TEXT\": \"OK\"\n  },\n  \"ANOTHER_NAMESPACE\": {\n    \"OK_TEXT\": \"@:SOME_NAMESPACE.OK_TEXT\"\n  }\n}\n\nThis was a feature that we used in angular-translate, and would be in favour of adding to this library as well.. ",
    "moshmage": "@SamVerschueren I'll give you a real-life example:\n{\n    \"hello\": \"ol\u00e1\",\n    \"hi:\" \"ol\u00e1\",\n}\nIn my language, both \"hi\" and \"hello\" mean the same. now imagine that there's a whole bunch of other words that mean \"ol\u00e1\", I could just reference them with @:hello and switch it just in one place\nYou can give the counter that 'then, why not just use \"hello\" as the translation key instead where you need \"ol\u00e1\"' and I'll answer to you with another question \"what if 'hello' and 'hi' have different meanings in other languages?\" - using \"hello\" would break the translation.\nNow,\n\nThis would just add complexity to the library without a real benefit imo.\n\nThat's just plain not true. There are benefits to have from a linkable translation, I just presented you with one - and the Chinese would like to speak to you about their intricate word-meaning ;) \nSure, it all boils down to a \"nuance\" problem, but it's a problem nonetheless.\n.. Can I survive without this? Sure. Would it be a cool feature? F* yeah.\n\na \"real world\" example found in the wild:\n\"modal\": {\n      \"option-Orden\": \"Order\",\n      \"option-Venta\": \"Sale\",\n      \"option-PosVenda\": \"After Sale\",\n      \"option-Movil - Prepago\": \"Pre-paid mobile\"\n    },\n    \"selected\": {\n      \"Type-null\": \"Select a Type\",\n      \"SubArea-null\": \"Select a SubType\",\n      \"Area-null\": \"Select a Area\",\n      \"Type-Orden\": \"@:modal.option-Orden\"\n      \"Type-Venta\": \"@:modal.option-Venta\"\n    }. ",
    "pfeigl": "This can be easily implemented via a TranslateCompiler (see ngx-translate documentation on how to register it). We are using this simple implementation:\n```typescript\nexport class TranslationCompiler extends TranslateCompiler {\n    public compile(value: string, lang: string): string {\n        return value;\n    }\npublic compileTranslations(translations: any, lang: string) {\n    for (const key in translations) {\n        if (translations.hasOwnProperty(key)) {\n            translations[key] = this.resolveReferences(translations[key], translations);\n        }\n    }\n    return translations;\n}\n\nprivate resolveReferences(value: string, translations: any) {\n    return value.replace(/@:(\\S+)/, (matches, key) => this.resolveReferences(translations[key], translations));\n}\n\n}\n```\nPlease be aware of the following problems you might face with this very simplistic implementation:\n The compiler does support recursion, but does not check for infinite loops (aka back-and-forth references)\n The compiler does not support nested translations\n The compiler does not work with the compile method, as at this point the translations are no longer known (would require to keep track of all translations based on their language and merge them if multiple setTranslation calls for the same translation would be made)\n Because of obvious syntax restrictions, the compiler can only reference keys which do not contain whitespace-characters. ",
    "AndrewCer": "Thanks for the pointers @pfeigl. Your Compiler helped point me in the right direction. However, it wasn't able to parse my complex en.json file. Based off of your direction, I was able to create a recursive filter that works for our needs.\nHere's what it looks like:\n```\nimport { TranslateCompiler } from '@ngx-translate/core';\nexport class JSONPointerCompiler extends TranslateCompiler {\n/*\n* Needed by ngx-translate\n*/\npublic compile(value: string, lang: string): string {\n    return value;\n}\n\n/*\n* Triggered once from TranslateCompiler\n* Initiates recurive this.parseReferencePointers()\n* Returns modified translations object for ngx-translate to process\n*/\npublic compileTranslations(translations: any, lang: string) {\n    this.parseReferencePointers(translations, translations);\n    return translations;\n}\n\n/*\n * Triggered once from this.compileTranslations()\n * Recursively loops through an object,\n * replacing any property value that has a string starting with \"@APP_CORE.\" with the APP_CORE global string definition.\n * i.e. @APP_CORE.LOCATION.OVERVIEW becomes Location Overview\n */\nprivate parseReferencePointers(currentTranslations, masterLanguageFile) {\n    Object.keys(currentTranslations).forEach((key) => {\n        if (currentTranslations[key] !== null && typeof currentTranslations[key] === 'object') {\n            this.parseReferencePointers(currentTranslations[key], masterLanguageFile);\n            return;\n        }\n        if (typeof currentTranslations[key] === 'string') {\n            if (currentTranslations[key].includes(\"@APP_CORE.\")) {\n                let replacementProperty = this.getDescendantPropertyValue(masterLanguageFile, currentTranslations[key].substring(1));\n                currentTranslations[key] = replacementProperty;\n            }\n        }\n    });\n}\n\n/*\n * Takes a string representation of an objects dot notation\n * i.e. \"APP_CORE.LABEL.LOCATION\"\n * and returns the property value of the input objects property\n */\nprivate getDescendantPropertyValue(obj, desc) {\n    var arr = desc.split(\".\");\n    while(arr.length && (obj = obj[arr.shift()]));\n    return obj;\n}\n\n}\n```. ",
    "AhmedHadjTaieb": "@ocombe Yes, I do this in the first component but not in the same component testing because it will be redundance code when I call other component use ng2-translate , also I think if user change language in the first page and change the route to another page (component) the language will be changed or it's not logical... I search for another solution when the testing component work with here own ng2-translate just for testing...I hope you interstrand me.. @mmarimuthu sorry but problem not resolved \ud83d\ude22 ... If you have any other solution tell me \ud83d\ude03 . ",
    "bankimatglobant": "Please let me know if anyone able to resolve the problem.. ",
    "IevhenIkonnykov": "Hello guys. Perhaps it is too late and not what you really want, but I had a similar problem. I needed to test a component that uses translation, but the TranslateService is used in a parent component. To test my component I had to substitute TranslateHttpLoader by my own like the following:\n1. Inside TestBed.configureTestingModule:\nimports: [\n        TranslateModule.forRoot({\n          loader: {\n            provide: TranslateLoader,\n            useClass: TranslateCustomLoader\n          }\n        })\n      ]\n\nTranslateCustomLoader itself:\n\n```\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {Observable} from \"rxjs\";\ndeclare let readJSON: any;\nexport class TranslateCustomLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    if (lang==\"ru\"){\n      let ru = readJSON('assets/i18n/ru.json');\n      return Observable.of(ru);\n    }\n    let en = readJSON('assets/i18n/en.json');\n    return Observable.of(en);\n  }\n}\n```\n\nreadJSON function (file read-json.js):\n\n```\nvar readJSON = function (url) {\n  url = readJSON.base + url;\nvar xhr = new XMLHttpRequest();\n  var json = null;\nxhr.open(\"GET\", url, false);\nxhr.onload = function (e) {\n    if (xhr.status === 200) {\n      json = JSON.parse(xhr.responseText);\n    }\nelse {\n  console.error('readJSON', url, xhr.statusText);\n}\n\n};\nxhr.onerror = function (e) {\n    console.error('readJSON', url, xhr.statusText);\n  };\nxhr.send(null);\n  return json;\n};\nreadJSON.base = '';\ntry {\n  if (exports) {\n    exports.readJSON = readJSON;\n  }\n}\ncatch (error) {\n  //exports not available so not loaded by require\n}\n```\n\nMake appropriate changes in karma.conf.js (include file with readJSON function and *.json files with translations):\n\nfiles: [\n      './src/assets/scripts/read-json.js',\n      {pattern: './src/test.ts', watched: false},\n      {pattern: './src/assets/i18n/*.json', included: false}\n    ]\n\nInside of descibe declare a service:\n\nlet translateService: TranslateService;\nand inject it before each test:\nbeforeEach(inject([TranslateService], (service) => {\n    translateService = service;\n    translateService.use('en');\n  }));\nthis forces TranslateService to load translations and also you can change language in your test.\nI hope it will be useful for someone. Good luck!. @linux-nerd It seems like you have different matchers that cover the same files. I am not sure, but perhaps it would be right to check you matchers or make them more precise. To be honest I do not have a real solution for your problem. When you fix it would be great to share your solution. Actually I do not have anything like that in my tests. Good luck.. Just checked my tests in Angular 5.2.6 and they work as before. Perhaps there is another problem that you experience.. ",
    "linux-nerd": "@IevhenIkonnykov You are a savior. The solution worked for me!!\nI am getting one Warning while executing the unit test cases - \n\nWARN [watcher]: All files matched by \"F:\\WS\\poc\\src\\assets/**\" were excluded or matched by prior matchers.\n\nHow to supress that?. ",
    "stswoon": "Retest issue and can't reproduce. Sorry for inconvience.. Ngx-translate team please respond at least bug it or not.\nBy the way I've tried to make fix, e.g. make subcription from get be called on every lang change (see link), it works but some test are failed now.. ",
    "moarsel": "I also had this problem. The temporary workaround was to use translate.getTranslation() instead, which doesn't swallow the error.. ",
    "hpawe01": "Hello, I also ran into this problem:\nsee the plunker based on the plunker of @ocombe with the current ngx-translate package (@stswoon: Your plunker uses the older ng2-translate package, that's why I created another one).\nDoes anyone can validate, that this is a bug? Or is it a missing feature? Or do we use it the wrong way?. ",
    "yassern": "any update about this missing feature? . ",
    "ShlomoRosenheimer": "Thanks. Even if I remove the static loading, and use TranslateHttpLoader it is still requesting \nhttp://127.0.0.1:6300/assets/i18n/en.json 404 (Not Found) zone.js\n. Thank you very much everybody. After removing the loader completely it works as expected.\nI also updated \n\"@ngx-translate/core\": \"^6.0.0\",\n \"zone.js\": \"^0.8.5\". ",
    "whyboris": "Thank you for this question and resolution. I wanted to include my translations as part of the application (not loaded over HTTP) so I implemented things thus:\nModule:\nts\nimports: [ ... TranslateModule.forRoot(), ... ]\nen.ts:\nts\nexport const English = {\n  HOME: {\n    TITLE: 'Hello in English!',\n  }\n};\nComponent:\nts\nimport { English } from '../../i18n/en';\n...\n    this.translate.setDefaultLang('en');\n    this.translate.use('en');\n    this.translate.setTranslation('en', English );\nTemplate:\nhtml\n  <span>{{ 'HOME.TITLE' | translate }}</span>. ",
    "lathonez": "@kamok \nNot sure exactly what the issue is, at some point recently we've lost what provider we're missing in these errors.\nFor what it's worth, the following is a working test.ts for ngTranslate on an Ionic app. I do remember it being fiddly to get right.\n```javascript\n// This file is required by karma.conf.js and loads recursively all the .spec and framework files\nimport './polyfills.ts';\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/proxy.js';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/fake-async-test';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { getTestBed, TestBed } from '@angular/core/testing';\nimport { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';\nimport { App, Config, Form, IonicModule, Keyboard, DomController, GestureController, MenuController, NavController, NavParams, Platform } from 'ionic-angular';\nimport { ConfigMock, NavMock, NavParamMock, PlatformMock } from './mocks';\nimport { TranslateModule} from 'ng2-translate/ng2-translate';\nimport { AuthHttpService } from './pages/services/auth-http.services';\nimport { AuthService } from './pages/services/auth.service';\nimport { ApiEndpointService } from './pages/services/api-endpoint.service';\nimport { CategoryService } from './pages/services/category.service';\nimport { ItemService } from './pages/services/item.service';\nimport { MenuService } from './pages/services/menu.service';\nimport { RestaurantService } from './pages/services/restaurant.service';\nimport { LanguageService } from './pages/services/language.service';\nimport { MenuServiceMock } from './pages/services/menu.mock';\nimport { LanguageServiceMock } from './pages/services/language.mock';\nimport { OrderService } from './pages/services/order.service';\n// import { BaseRequestOptions, ConnectionBackend, Http, Response, ResponseOptions } from '@angular/http';\n// import { MockBackend } from '@angular/http/testing';\n// Unfortunately there's no typing for the __karma__ variable. Just declare it as any.\ndeclare var karma: any;\ndeclare var require: any;\n// Prevent Karma from running prematurely.\nkarma.loaded = function (): void {\n  // noop\n};\n// First, initialize the Angular testing environment.\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting(),\n);\n// Then we find all the tests.\nconst context: any = require.context('./', true, /.spec.ts$/);\n// And load the modules.\ncontext.keys().map(context);\n// Finally, start Karma to run the tests.\nkarma.start();\nexport class TestUtils {\npublic static beforeEachCompiler(components: Array): Promise<{fixture: any, instance: any}> {\n    return TestUtils.configureIonicTestingModule(components)\n      .compileComponents().then(() => {\n        let fixture: any = TestBed.createComponent(components[0]);\n        return {\n          fixture: fixture,\n          instance: fixture.debugElement.componentInstance,\n        };\n      });\n  }\npublic static configureIonicTestingModule(components: Array): typeof TestBed { //TODO somewhere i have to add the code of services mock backend stuff\n    return TestBed.configureTestingModule({\n      declarations: [\n        ...components,\n      ],\n      providers: [\n        App, Form, Keyboard, DomController, GestureController, MenuController,\n        {provide: Platform, useClass: PlatformMock},\n        {provide: Config, useClass: ConfigMock},\n        {provide: NavController, useClass: NavMock},\n        {provide: NavParams, useClass: NavParamMock},\n        {provide: MenuService, useClass: MenuServiceMock},\n        {provide: LanguageService, useClass: LanguageServiceMock},\n        AuthService, ApiEndpointService, AuthHttpService,\n        CategoryService, ItemService, RestaurantService, OrderService\n      ],\n      imports: [\n        TranslateModule.forRoot(),\n        FormsModule,\n        IonicModule,\n        ReactiveFormsModule,\n      ],\n    });\n  }\n// http://stackoverflow.com/questions/2705583/how-to-simulate-a-click-with-javascript\n  public static eventFire(el: any, etype: string): void {\n    if (el.fireEvent) {\n      el.fireEvent('on' + etype);\n    } else {\n      let evObj: any = document.createEvent('Events');\n      evObj.initEvent(etype, true, false);\n      el.dispatchEvent(evObj);\n    }\n  }\n}\n```\nInstead of doing your createTranslateLoader, I proxied the translations through karma.conf.js:\njavascript\n    proxies: {\n      '/i18n': '/base/src/assets/languages',\n    }\nHowever, I think the way you have done it looks more correct.\nHope this helps.. > I'm building a custom translation loader which does not use any static assets, so using a proxy wouldn't work.\nMy misunderstanding - sorry. You are probably safe to ignore the above then as it seems likely it wont work for you.. ",
    "jcbowyer": "Translations are also not working for me in cordova\n. Thanks it seems more complex.    It works if I change the language via ux but not if I change the language in the constructor.  I can't figure out why.  Happy Holidays\n. In my app.component.ts this does not work, the pages all load without error but none of the text is translated in cordova app on windows and android.  It works fine in browser.\n``  ngOnInit() {\n    this.translate.setDefaultLang('en');\n    this.translate.use('en');\n    this.defaultLanguage = this.platform.lang();\nthis.storage.get('language').then((value) => {\n  if (value == 'en' || value == 'es') {\n    this.translate.use(value);\n  } else {\n    if (this.defaultLanguage == 'es') {\n      this.translate.use('es');\n      this.storage.set('language', 'es');\n    }\n    else {\n      this.translate.use('en');\n      this.storage.set('language', 'en');\n    }\n  }\n});\n\n}\n``\nThe code in a settings page general.ts that works on changing selection.   After the change is done in the UX, all the pages show the translation.\n```\n  selectLanguage() {\n    this.storage.set('language', this.applicationUser.language);\n    this.translate.setDefaultLang(this.applicationUser.language);\n    this.translate.use(this.applicationUser.language);\n  }\n```\nI can't figure out how to initialize page translations on Android or Windows.  I have not tested IPhone yet.\nI am using lazy loaded pages in ionic.\nMy app.module.ts has this\n``\n@NgModule({\ndeclarations: [\n    MyApp,  AutosizeDirective\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    HttpModule,\n    HttpClientModule,\n    UploadModule,\n    ChartsModule,\n    MomentModule,\n    ImageCropperModule,\n    BrowserAnimationsModule,\n    LazyLoadImageModule,\n    IonicStorageModule.forRoot(),\n    IonicModule.forRoot(MyApp),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp \n  ],`\n```\nMy component module looks like this \n@NgModule({\n  declarations: [GeneralPage],\n  imports: [IonicPageModule.forChild(GeneralPage),\n  TranslateModule.forChild({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: createTranslateLoader,\n      deps: [HttpClient]\n    }\n  })],\n  exports: [\n    GeneralPage\n  ]\n})\nexport class GeneralModule { }. I figured it out,  i had to change my httploader to \nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nThanks. ",
    "RostyslavAH": "Same issue. require fix, because i have to add \nimport { TranslateStore } from \"@ngx-translate/core/src/translate.store\";\nand\nproviders: [\n        TranslateStore\n],\nin AppModule. \nI also use forChild in SharedModule. ",
    "pumano": "+1. Also will be helpful if somebody add to README.md working unit test example (based on generated angular-cli) for main app module with ngx-translate. Try to import TranslateModule in test it should help you guys.. Possible workaround:\n```\nimport { TranslateModule, TranslateService, TranslateLoader, TranslateFakeLoader } from '@ngx-translate/core';\n....\nbeforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        TranslateModule.forRoot({\n          loader: { provide: TranslateLoader, useClass: TranslateFakeLoader }\n        })\n      ],\n      ...\n```. ",
    "fkolar": "The same problem here.. Angular 4.1.0, angular-cli 1.0.3 and ngx-translate  - latest. and I had to provide TranslateStore. ",
    "mryechkin": "Having the same issue as well.. Angular 4.1.3, Angular-CLI 1.0.6, ngx-translate 6.0.1. ",
    "Bjeaurn": "Suggestion by @pumano worked for me.\nAlso noticed that TranslateStore is being exported as ea in core.d.ts in @ngx-translate/core/. Seems like that should be refactored and be part of the main export to permanently fix this.\nThe workaround (and most of the issues in this thread) seem to stem from unittesting.. ",
    "ssmartin": "I also face a similar problem - I can't mock the TranslateStore  anymore because I can't import it properly in my Angular 5 project.  I also think @Bjeaurn recommendation would fix this problem . ",
    "bedag-moo": "ng-xi18n is developed by the angular team, and has nothing to with ngx-translate .... Workarounds include:\n\nreplacing \"\" by null at build or translation load time\n\nnot committing placeholders to version control by reverting the changes done by ngx-translate-extract after sending the file to the translator, and only commit the fully translated files.. As Sam points out in #509, there are valid usecases for empty translations, so I've changed my workflow to revert after sending files for translation.. ... and one way to ensure that the translations are loaded is including them in the bundle, e.g. with webpack:\ntranslateService.setTranslation(\"en\", require(\"../i18n/locale-en.json\"));\ntranslateService.setTranslation(\"de\", require(\"../i18n/locale-de.json\"));\n\n\nObviously you shouldn't do this if you support dozens of languages, but for few languages the impact on bundle size is often negligible.. Sorry, I referenced the wrong issue. It's #487.. Why would a translation be left empty on purpose?. ... which would be bad because it would fall back to showing the key if the default language has an empty translation, too.\nOk, you've convinced me :-)\n. ",
    "glebmachine": "Can't found your issue there, could you share link please?\nI've got exact the same error. ",
    "NKjoep": "@phatpham9  I think you should try to return a new observable which is complete when the translateService has done.\nMore or like you'd do with promises. Look here maybe it helps http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html \nSomething like:\njs\ntransform(input: string) {\n  return Observable.create((observer) => {\n    this.translateService.get(input).subscribe((inputTranslated) => {\n      observer.next(inputTranslated);\n      observer.complete();\n    });\n  });\n}\nedit: sorry I missed the example :) . @phatpham9 have you tried with the example I wrote in the prev comment? :) the full code would be:\n```js\nexport class TimeRemainingPipe implements PipeTransform {\n    constructor(private translateService: TranslateService) {}\n    transform(input: any, args?: any): any {\n        return Observable.create((observer) => {\n              this.translateService.get('TEST').subscribe((inputTranslated) => {\n                    observer.next(inputTranslated);\n                    observer.complete();\n              });\n       });\n    }\n}\n```\n. @reza3vi client-side or server-side? :) . ",
    "NodeJoSe": "@kgaspar im having the same issue, did you find a solution?. just found the solutions on stackoverflow\nThis is how you do it: \ntypescript\nthis.translateService.get([\n    'BatteryWarningAlert.title',\n    'BatteryWarningAlert.message'\n  ], {\n    battery: batteryValue\n  })\n  .subscribe(value => {\n    let alert = this.alertCtrl.create({\n      title: value['BatteryWarningAlert.title'],\n      subTitle: value['BatteryWarningAlert.message'],\n      buttons: ['OK']\n    }).present();\n  });\n    .\n",
    "denirun": "Hi \nI have the same issue in lazy load architecture. Problem that current release don't support partial loading from the box. My solution to handle this problem and to keep standard way of using angular + ngx-translate is next:\nStructure\n/src\n- - /app\n- - /i18n\n- - - - /account\n- - - - - - en.json\naccount/en.json\njson\n{\n  \"hello\": \"world\"\n}\nSharedModule\nimports/exports: TranslateModule\nRoutes\nts\nconst routes: Routes = [\n{\n    path: 'account',\n    loadChildren: './account/account.module#AccountModule',\n    data: {\n      i18n: 'account'\n    },\n    canActivate: [TranslateRouteService],\n    canDeactivate: [TranslateRouteService]\n  }\n];\ndata.i18n - url path to folder of translations .json files\ncanActivate- Trigger preload of translation block by data.i18n property\ncanDeactive - Optional: depends from our business logic: is we need to store or clear\u2013up translation partial block after component destroyed\nTranslateRouteService\n```ts\nimport {Component, Injectable} from '@angular/core';\nimport {Http, Response} from '@angular/http';\nimport {ActivatedRouteSnapshot, CanActivate, CanDeactivate, RouterStateSnapshot} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Observable} from 'rxjs/Observable';\nexport const i18nPrefix = 'i18n/';\nexport const i18nSuffix = '.json';\n@Injectable()\nexport class TranslateRouteService implements CanActivate, CanDeactivate {\n/*\n   * Store keys, that already loaded\n   /\n  private storage: Set;\nconstructor(private i18n: TranslateService, private http: Http) {\n    this.storage = new Set();\n  }\n/*\n   * Partial load block of translation\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   * @returns {Observable}\n   /\n  canActivate(route: ActivatedRouteSnapshot,\n              state: RouterStateSnapshot): Observable\n    | Promise\n    | boolean {\nconst path = route.data['i18n'];\n\n// No i18n data path provided\nif (!path) {\n  return true;\n}\n\n// Already stored\nif (this.storage.has(path)) {\n  return true;\n}\n\nconst url = i18nPrefix + path + '/' + this.i18n.getDefaultLang() + i18nSuffix;\n\nreturn this.http.get(url).map((response: Response) => {\n\n  this.addPartialBlock(path, response.json());\n\n  return true;\n\n}).catch(() => {\n\n  // Http response problem, i18n path file not found\n  return Observable.of(true);\n\n});\n\n}\n/*\n   * Clear partial block of translation\n   * @param {Component} component\n   * @param {ActivatedRouteSnapshot} route\n   * @returns {Observable}\n   /\n  canDeactivate(component: Component, route: ActivatedRouteSnapshot): Observable\n    | Promise\n    | boolean {\nconst path = route.data['i18n'];\n\n// No i18n data path provided\nif (!path) {\n  return true;\n}\n\nthis.removePartialBlock(path);\n\nreturn true;\n\n}\n/*\n   * Append to object\n   * @param {string} key\n   * @param {Object} data\n   /\n  private addPartialBlock(key: string, data?: Object): void {\nthis.i18n.setTranslation(\n  this.i18n.getDefaultLang(),\n  {[key]: data},\n  true\n);\n\nthis.storage.add(key);\n\n}\n/*\n   * Set to undefined block of translation, by key\n   * @param {string} key\n   /\n  private removePartialBlock(key: string): void {\n    this.addPartialBlock(key);\n    this.storage.delete(key);\n  }\n}\n```\naccount.component.html\nhtml\n<span> Hello {{ 'account.hello' | translate }} </span>\nI hope this helps.. @Tuizi you can just call setDefaultLang() method of TranslateService, and your project start using this default lang. But I'm found small problem there: your current values on the screen not refreshed automatically, you need some workaround. To refresh translate filters. \nI personally solve this problem next:\n1. If my project is HUGE: I'm using lazy partial loading with this technique, and make hard\u2013reload of page, when user change locale. Because I'm need to setup {LOCALE_ID}, you can find more info here: \nhttps://github.com/angular/angular-cli/issues/6683\nBut anyway, you can solve without hard-reload, by calling methods from TranslateService resetLang, use, setDefaultLang and don't using standard LOCALE_ID by rewriting your App with custom logic.  \n2. If my project is TINY: I'll using standard angular i18n library . ",
    "2f4f4f": "I modified @denirun's code to allow for multiple json files for one module:\n```javascript\n  canActivate(route: ActivatedRouteSnapshot,\n              state: RouterStateSnapshot): Observable\n    | Promise\n    | boolean {\nconst paths = Array.isArray(route.data['i18n']) ? route.data['i18n'] : [ route.data['i18n'] ];\n\n// No i18n data path provided\nif (!paths || !paths.length) {\n  return true;\n}\n\nlet i18nRequests = paths.map(path => {\n\n  // Already stored\n  if (this.storage.has(path + '/' + this.translate.currentLang)) {\n    return Observable.of(true);\n  }\n\n  let url = i18nPrefix + path + '/' + this.translate.currentLang + i18nSuffix;\n\n  return this.http.get(url).map((response: Response) => {\n    return this.addPartialBlock(path, response.json());\n\n  }).catch(() => {\n\n    // Http response problem, i18n path file not found\n    return Observable.of(true);\n\n  });\n\n});\n\nreturn Observable.forkJoin(i18nRequests).map(res => true);\n\n}\n```\nRouting:\n```\ndata: {\n  i18n: [ 'feature', 'shared' ],\n},\n...\ndata: {\n  i18n: 'feature',\n},\n```\n. ",
    "rafa-as": "@ocombe I think that is a good point to have a method to load partially the keys (for our projects it's a must). If you want I can open another issue, but what do you think about this?. Some news here?. Thanks @ocombe . +1. ",
    "brada1703": "\nWill the library work even with these errors? \nOr would you suggest that I install @angular/core@^2.3.0, @angular/common@^2.3.0, @angular/http@^2.3.0, and tslint@^4.0.0 for the library to work? \nIs it possible to have both @angular/core@^2.3.0 and @angular/core@^4.0.1 as dependencies?\n\nThanks!. Ok, Thanks Olivier! \ud83d\udc4d . Thanks Kanabi!. Okay, I figured it out. Check it out:\nHere is for my header.component.ts: \nexport class HeaderComponent implements OnInit {\n        constructor(private translate: TranslateService) {\n        translate.addLangs([\"en\", \"it\"]);\n        translate.setDefaultLang('en');\n        let browserLang = translate.getBrowserLang();\n        translate.use(browserLang.match(/en|it/) ? browserLang : 'en');\n    }\n        changeLang(lang:string){\n        this.translate.use(lang);\n    }\n        ngOnInit() {\n    }\n}\nThen, here are the links in the header:\n<li class=\"dropdown\" dropdown>\n          <a dropdown-open>Language <span class=\"glyphicon glyphicon-globe\"></span></a>\n          <ul class=\"dropdown-menu\">\n            <li>\n              <a (click)=\"changeLang('en')\">English</a>\n              <a (click)=\"changeLang('it')\">Italiano</a>\n            </li>\n          </ul>\n        </li>. ",
    "k-majick": "This is what worked out for me:\nList\n<ul>\n  <li *ngFor=\"let lang of translate.getLangs()\" >\n    <a #langSelect (click)=\"translate.use(langSelect.rel)\" [rel]=\"lang\" [class.active]=\"lang === translate.currentLang\">{{ lang }}</a>\n  </li>\n</ul>\nButtons\n<button #langSelect *ngFor=\"let lang of translate.getLangs()\" (click)=\"translate.use(langSelect.value)\" [value]=\"lang\" [class.active]=\"lang === translate.currentLang\">{{ lang }}</button>. I also had this issue using webpack 4. It turned out that json files had to be copied to the dist folder along with the rest of the compilation, so I used copy-webpack-plugin for that. In my webpack config:\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n...\n  plugins: [\n    new CopyWebpackPlugin([\n      { from: helpers.root('src'), to: helpers.root('dist') }\n    ]),\n  ],\nIt solved the problem and json files are loaded correctly now. At least when using dev server.... ",
    "Kr0n092": "Have you tried navigator.language ?. ",
    "malounna": "You should try the plugin cordova-plugin-globalization as explained here https://ionicframework.com/docs/native/globalization/. ",
    "louisdoe": "I have tried navigator.language and I get errors.\nIndeed @malounna, I installed the globalization plugin and it seems to work.\n@trentclowater it seems that Platform.lang() returns the languages of the app and not the preferred language of the device, doesn't it ?\n. Thanks @ocombe, that solves the problem.. ",
    "lkmkr": "If you are using @biesbjerg/ngx-translate-extract, try to use the json instead namespaced-json output format.\n--format, -f                Output format\n          [string] [choices: \"json\", \"namespaced-json\", \"pot\"] [default: \"json\"]. ",
    "amineparis": "As mentioned in the official documentation we have the choice between JIT/AOT compilation. Perfect Answser TY !. great TY :). any examples ?. I am using it in the component.ts file. the need that makes me think of instant() instead of get() is the fact that it is much code cleaner since I don't need to embedd blocks to subscription . ",
    "josersleal": "So why dont you at angular call the guys from ngx and integrate ngx instead of reinventing the wheel?\nIns't that the point of open source?. Hi\nSorry I missed that part :)\nKeep up the good work..\nThank you:\nJos\u00e9 R. S. Leal\nOn 15 May 2017 at 14:24, Olivier Combe notifications@github.com wrote:\n\n@josersleal https://github.com/josersleal that's exactly what they did,\nthe angular team hired me to improve i18n for everyone\nBut there is no way to integrate my lib directly into the core, after\nworking for 3 months for the core team I can tell you that Angular i18n is\nmuch more complex and elaborate than my lib. It handles a lot of more\ncomplex stuff, and it does it without all the bugs and shortcomings that my\nlib has.\nI understand that it's frustrating that the core doesn't evolve as fast as\nwhat a library can do, but there are reasons for that, and the first one is\nthat you cannot implement something and change it whenever you see that you\nforgot to include a use case. Everything has to be thoroughly planned and\nthought.\nStill, you will have most of the things that this lib can do in the core\nin the future, but it might take a year before we get there unfortunately.\nThe good news is that it's going to be much better than my naive\nimplementation.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/495#issuecomment-301447941,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC_xuFmBomH56LAVc_V9HpBThjWzEBR4ks5r6DX7gaJpZM4MxgA4\n.\n. \n",
    "jaska45": "Olivier has done a great job. The native Angular I18N has many advantages over all 3rd party I18N libraries.\n\nMinimal impact to templates. You don't have to refactor all elements to use translator pipe but simply mark them with i18n attributes.\nThe original string in in the template an not in resource file such as .json\nExtract tool will extract strings from templates and hopefully soon from .ts too.\nExtract tool extracts source code location and optional description and meaning. Developers can easily add comments that are essential in many cases.\n\nOf course this approach has some limitations:\n- Cannot reuse the same string on multiple places. That would be a nice new features\n- Source code cannot easily use the string defined in the template. Of course code can find the DOM element and get the string from there. Would be a nice to have an easy way to refer a template string from .ts.. Please do not add any new formats! You already have three: XMB, XLIFF 1.2 and XLIFF 2.0. Most other platforms have only one :-)\nAlmost all online translation services claim to support XLIFF. The reality is that XLIFF is very complex format and Angular's extract tool can create pretty complex XLIFF. Especially if you have plurals, genders, links or inline formatting elements.  In addition Angular XLIFF files contain many proprietary properties such as meaning and location. What I have noticed is that a generic XLIFF parser/scanner cannot properly handle Angular's resource files. This is why it is better that the localization tool uses a dedicated Angular parser that can property handle the resource files.\nBut this is perfectly fine. The main task of a localization tools is to scan the source files and in that process extract all information that is needed. I am glad that Angular resources contain all the information needed to fully extract strings and enable continuous localization where translation and development can work independently to each other.. ",
    "aghilesh": "@ocombe : Is there any plan to add runtime language switching feature on i18n+AOT ? Right now application is planned to use ngx-translate over i18n because of the run-time switching constraint. \n. ",
    "imraqes": "How dificult is it to move from ngx-translate to angular i18n, I have already implemented ngx-translate so if I have to change is it too much work around ?. ",
    "neridonk": "Does anyone know when this : Angular only supports using i18n in your templates for now, I'm working on the feature that will allow you to use it in your code, but it's still a work in progress.\nwill happen?\n. ",
    "Derekjohnson277": "@ocombe My application is currently using this library to do the translations, would you recommend switching to the angular i18n to not run into future problems? Would it be worth the time to switch over?. Good to know @ocombe , thanks!. @Diemauerdk if you need to get the translation in your component, just import the TranslateService and assign it in your constructor. Then you can use this.translateService.instant('[insert translation string]') to get the translated string.\n. import { TranslateService } from '@ngx-translate/core';\n. Ah haha my bad, from what I have read in the past Angular i18n doesn't support translations outside of the template, but maybe it has been upgraded to add that feature. The reason I still use ngx-translate is for in component translations.. ",
    "jasonever": "@ocombe \nI need your advice , i'm building a chat application (Web and Mobile app) .. So i'm confused about going ahead with using Angular i18n or Ng-Translator ? especially i saw your comment in github before that in March2018 Angular will release an edition that i18n has more features like dynamic load feature same like NG-Translator ..so i will be able to switch to another language without reloading the app (in realtime) is this correct or what ? i need your advice .. Thanks :). @ocombe While using ngx-translate, I noticed that it loads the JSON file (for the language) in explicit way. \nI'm feeling that it's not good to make my whole application's language visible and combined in one file and easy to be crawled.\nIs there any trick to apply here in order to enhance this matter ? or to split the language files ?. ",
    "denizengin": "@ocombe How about being able to do translations in code, is that likely to arrive soon to Angular i18n? . ",
    "beachjf": "The main problem with the fact that every language has their own app is it's really difficult to make the app share the same session. I'm actually facing this issue with angular 5 app combinnr with identify server. ",
    "ibagaric": "@ocombe  I am in the moment where i need to decide, should I use Angular i18n or ngx-translate.\nIn the future, will Angular i18n have possibility to export translates to JSON or PO file. \nIs there any easy way to read XLIFF or XMB format with some GUI so it can be easily given to translators.\nWhat lib to use, what is your advice? Thanks in advance!. ",
    "daric81": "@ocombe off topic but I'm looking at options for i18n, we have a large angularjs app which we will move to angular 5+ perhaps in 12-18 months time.  There's the angular i18n/ ngx-translate consideration for the future, but just wondering from your experience with all 3 solutions what you'd advise would be the least upgrade headache for angularjs i18n?. @ocombe We aren't using anything, but are using angular 1.6 and cant migrate to angular yet before translation. A concern is having resource files that are compatible as a minimum and the least migration effort.. @ocombe thanks. If that's the case then i might take more of a look at i18next before proceeding. Have you had any experience of i18next?  . @ocombe cheers, appreciate your advice and time :) . ",
    "NVK15": "@ocombe Can i know when this: \n\nAngular only supports using i18n in your templates for now, I'm working on the feature that will allow you to use it in your code, but it's still a work in progress.\n\nwill happen?\nI am currently working on Angular app and would like to start using i18n. I have cases where I have to use i18n extensively in typescript code. So any idea when there would be latest release for i18n with support for i18n in code?\nI just checked the release schedule and it says Angular 6.0 release data as \"2018-04-04\".\nDoes this release address i18n in code?\nI look forward for your reply.\nThanks in advance.\n. ",
    "milanc": "Hi @ocombe, \nI am working on project that has requirement to allow customers to customize labels/messages (usually this is only a small amount of labels) and I ended up using both i18n and ngx.\nWith i18n and AOT application is generated for every supported language, and customers are able to define their own labels that are served from API and \"injected\" on client side using ngx library.\nI did some tweaks to ngx code to skip processing html element if label is not defined in translations JSON (by default it is injecting label key from directive).\nAnyway, not sure if allowing customers to override application labels/messages is common scenario but it would be good if i18n approach could support something like this.\nAs I saw in code generated when using 18n attributes, strings/labels are injected using js code, would it be hard to check for overrides (maybe some translations service dependency) before using pre-compiled strings.\nHope this make sense.\nThank you.. That sounds good, I hope that will come soon.\nThank you.. Hi @ocombe, thank you for still responding to this old conversation.\nI hope that file can also be an API endpoint and it can be loaded on demand from browser.\nAlso that it will not require for all translations to be present.\nAs I've mentioned before, I was using ngx/translate (with small tweaks) to do this partial overrides on runtime.\nWhen looking at current bundling result for i18n sample app I see this\n_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"\u0275ted\"](-1, null, [\" Bonjour i18n !\\n\"]))\nAs I remember from research I've done some time ago  _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"\u0275ted\"] is getText or some similar angular method.\nI was wondering could it be simple as tweaking\ngetText(-1, null, [\" Bonjour i18n !\\n\"]))\n to\ngetText(-1, null, [someInjectedServiceOrState.introductionHeader || \" Bonjour i18n !\\n\"]))\nAs you are probably aware introductionHeader is translation id set in markup as part of i18n attribute.\n. \n\nIf some translations are missing, it will use the original template text instead (english for example if you used that in your code).\n\nIf app has built with en-us and fr-fr resources, I assume that when en-us version is loaded it will use en-us strings, but if app is displayed in fr-fr it would use fr-fr text that was generated during AOT compilation, correct?\nSorry for bothering you and keeping you from working to implement all this new stuff :). I believe I was not explaining the use case correctly.\n1. use i18n tags to prepare for localization\n2. create xlif files for multiple languages with cli\n3. build application with AOT for every supported language\n4. serve language specific app based on user preference\n   - app is bundled with AOT\n5. when app is loaded in browser, code would load overrides for labels (for current language)\n   - for this step I am using ngx-translate in the same places together with i18n tags in step 1\n   - ngx-translate was tweaked to skip modification html node if label id is not in loaded json\n   - this step would not be required if app is not using per customer/user overrides\nSo all steps but the 5th are regular i18n process but I hope that step 5 would be possible without need for workarounds.\n. ",
    "ndr508": "I am working on a project where we have to set up the infrastructure to support internalization on front end. There is no immediate current need to support multiple languages at this time. However, when needed we would like to have the current design support this. The idea is to implement the internalization for English language currently. I am looking at both Angular i18n and ngx-translate features. As it seems from the above discussion threads, even though Angular i18n is lacking some features currently compared to ngx-translate, those would be eventually be added to Angular i18n, correct?\nCan you please suggest whether it is good to with ngx-translate or Angular i18n?\nThank you!. ",
    "SoftwareDevFromLA": "@ocombe - My question is in regards to: add runtime language switching feature on i18n - I noticed that you mentioned it's planned for the 5.x branch, but looking through the i18n doc I dont see anything that references it. Can you please tell me if its implemented and also point me to some sample working code?. ",
    "RezaRahmati": "@ocombe - great work, is this feature Angular only supports using i18n in your templates for now, I'm working on the feature that will allow you to use it in your code, but it's still a work in progress. scheduled for v7 or it's available on v6, also if there is a simple example how it will be?. ",
    "shabinpshams": "@ocombe - I am working on an application which has both web and mobile. Developing application using Angular 5 with i18n. I also wanted to use the same code base to Ionic application and i couldn't find any support on ionic framework for i18n. \nPlease help me to solve this issue.. ",
    "lizzymendivil": "Hi there!\n19 September, 2018\nwhat  is the status for i18n Angular please?\nI need to internationalize my app, need to decide between ngx-translate and i18n built-in tool\n@ocombe \n(using angular 6). Thanks @ocombe so  ngx translate won't be deprecated soon, right?. @Derekjohnson277 yeah, I think the same as you... ngx-translate looks better than Angular i18n\nI really don't like the idea of deploy my app for every language and I prefer json format.. @Diemauerdk ok, but angular i18n looks unstable because ng serve --aot --locale es is not working anymore, I got this error: Unknown option: '--locale'  So, now it is working differently, things are changing. . ",
    "Diemauerdk": "Hi @ocombe \nUsing Angular 6 i18n  - do you know if it is possible to get the translation text using typescript? for example using an id?\nFrom the documentation(https://angular.io/guide/i18n) it seems only to be possible in a template.\nThanks\n. Hi @Derekjohnson277 \nThanks for the reply - cant' find that TranslationService. In what package/module does it come from?. @Derekjohnson277 but my question was how to do it using Angular 6 i18n (https://angular.io/guide/i18n) and not ngx-translate :). @Derekjohnson277 , Thats fine :D. @lizzymendivil Yes at the moment it does look a lot better. But I am to build a large future proof solution so i cannot base it on something that's going to be deprecated.. ",
    "CherryCoder91": "I noticed Ivy is now at 92.47% completion with 11 items pending 3 of which are I18N: translate text literals, rearrange text nodes and ICU.\nI am trying to understand the following:\n\nWill I18N be compatible with AOT in angular with Ivy?\nWill Ivy support real-time text translations when changing language on the fly (i.e. will ivy bake the translations for all languages into the compilation and bind the text literals?)\nIs there a documented / preferred strategy for serving the different compilations of the site based off user/account preference at the moment while there are different compilations per langauge?\nWhen are we likely to see the I18N work completed? Is this now a high priority given it is one of the few remaining major items for Ivy?\n\nAny input on the above would be massively appreciated I am on a huge localisation epic at work with a lot of product managers hammering me!\n. @ocombe Thanks for the super quick reply \ud83d\udc4d \nSorry to be confusing for 3/ let me re-word:\nMy current understanding is that when we compile the app in a specific locale it finds and replaces the strings in the compiled templates during compile time (AOT). This results in a deploy-able version of the site per locale. This is great for optimisation of the size of the app bundle but adds challenges in deployment of the site. In our app we would like the user to store their preferred locale as a setting within the app and then have that locale served out while still accessing the same site domain. i.e app.mycompany.com could return the app in French / German / Spanish / etc based of the users preference. But given the app would have to load to first fetch that information I was wondering if the Angular community has a preferred / documented method for achieving this this as I don't have any previous experience in it? Does Angular have a mechanism for this or would we need to use some server side tech / force the user to use a different domain i.e. de.companyname.com, fr.companyname.com etc.\nSorry if I am asking about something with an obvious answer, just completely inexperienced in this area and want to make sure I am following best practices if we stick with the angular I18N. \n. Thank you :)\nThe work you guys are doing for the community is awesome. we all appreciate it :) \n. ",
    "amustiere": "Hello,\nI have to design an application with Angular 7, and have some i18n issues / questions.\nThe application should work like this :\n- front page with login form and combo to choose language (we can \"hardcode\" the few labels for this page in the different languages)\n- if login succeed (based on a service and back-end call), go to the first \"real\" screen of the application, of course displayed using the selected laguage\nWhat would be your approach to address that kind of scenario?\nCan I go with Angular i18n (would be my first choice) or should I use something else (ngx-translate for example)?\nCan I have only 1 app or should I go with 2?\nIf going with 2 apps, how is it possible to \"share\" infos (login token for example) between the 2 apps?\nThanks in advance for your replies.\n. @tatsujb Thanks for your reply.\nI started a little \"sample app\" with ngx-translate but I am facing some issues.\nThe other parts of the application are lazy-loaded.\nAnd I can't load the JSON files as I want.\nI have a JSON file for the main page (main module), loaded with custom loader and forRoot.\nI also have a JSON file for the secondary page (secondary module), loaded with (another) custom loader and forChild.\nI've tried with \"isolate: true\" and \"isolate: false\", but no luck so far :-(\nAny idea?\nOr sample code?\nThanks in advance for your replies.. Just to explain a little the \"no luck\" in previous comment...\nThe idea is to have some translation in the \"main\" JSON and other in the \"secondary\" JSON.\nAnd when the user navigates to the secondary page (module / component), to load the secondary JSON and add it to the main one.\nIf I use \"isolate: true\", I load the secondary JSON but I lost the \"main\" one.\nIf I use \"isolate: false\", I do not load the secondary JSON so I have only the \"main\" one.\nMy goal is to have both loaded and all translations available.\nIs it even possible?\n. @ocombe I've seen this (multi-http-loader), but that's not want I want to achieve.\nMy idea is to have separate JSON files (say 1 per module) and, at the end, have all the translations available (that is if the user navigates in all the application).\nFor example:\n- in an 'app/en.json' (loaded with the AppModule) I would have shared translations and specific translations for the first screen\n- in an 'xxx/en.json' (loaded with the XXXModule which is lazy-loaded), I would have specific translations for this XXXModule, and be able to use the shared translations\nIs it more clear?. @RobinvanTienhoven I've tried this solution, but doesn't work for my scenario.\nWhen a secondary module is lazy loaded :\n- if \"isolate: true\", I only get the translations for this module, and \"lost\" the main (app) translations \n- if \"isolate: false\", the translations for this module are not loaded\nIf you happen to have make it work, I'm very much interested ;-)\nThanks. @RobinvanTienhoven I've thought of the \"shared service\" approach, but I'm not confortable with it (like you said, it defeats the whole point...).\nThanks anyway!. ",
    "HamzaDevz": "Hi @ocombe,\nWith Angular 7 do we have some news for i18n?. ",
    "RobinvanTienhoven": "@amustiere, is this (lazy loaded translation per module) what you are looking for? \nHe creates seperate translation files for each lazy loaded module and also loads a shared file for shared translations. \nOn topic:\nThe need for Angular I18n to create a build for every language is a real dealbreaker for me. Was hoping the on demand translation switch would be implemented in Angular 7.0. Oh well, back to ngx-translate then... @amustiere, now I look better into it it does make sense that that doesn't work (probably also why there isn't a plunkr included like he said he would do). The only way I can think of is make yet an other service that holds the shared translations an include it in your other components where you need it. But that kind of defeats the whole point of having a separate loader... \nSo sorry, but I guess I don't know the solution either. . ",
    "manzonif": "\n@ocombe I've seen this (multi-http-loader), but that's not want I want to achieve.\nMy idea is to have separate JSON files (say 1 per module) and, at the end, have all the translations available (that is if the user navigates in all the application).\nFor example:\n\nin an 'app/en.json' (loaded with the AppModule) I would have shared translations and specific translations for the first screen\nin an 'xxx/en.json' (loaded with the XXXModule which is lazy-loaded), I would have specific translations for this XXXModule, and be able to use the shared translations\n  Is it more clear?\n\n\n@amustiere \nMy idea is the follow:\n1) include a param resourceFile in the route config of page/lazy-loaded module\n{\n        path: 'login',\n        loadChildren: './main/authentication/login/login.module#UserLoginModule',\n        data: {\n            resourcesFile: 'pages/login'\n        }\n2) Create a page-base.component that get the resourceFile param and load the specific json file\n```\n@Component({\n    template: ''\n})\nexport class PageBaseComponent {\n    protected translateService: TranslateService;\n    protected activatedRoute: ActivatedRoute;\n    protected http: HttpClient;\n    protected router: Router;\n    constructor() {\n        // carico il file di traduzione specifico per la pagina\n        const injector = AppInjector.getInjector();\n        this.translateService = injector.get(TranslateService);\n        this.activatedRoute = injector.get(ActivatedRoute);\n        this.http = injector.get(HttpClient);\n        this.router = injector.get(Router);\n        this.router.events.pipe(\n            filter(event => (event instanceof NavigationEnd)),\n            map(() => {\n                const snapshot = this.activatedRoute.snapshot;\n            let child = snapshot.firstChild;\n            while (child.firstChild !== null) {\n                child = child.firstChild;\n            }\n            return child.data;\n        }))\n        .subscribe((data) => {\n            if (data.resourcesFile) {\n                const t = this.translateService;\n                const loader: TranslateResourceLoader = <TranslateResourceLoader>t.currentLoader;\n                loader.getTranslation(t.currentLang, data.resourcesFile)\n                    .subscribe(obj => {\n                        t.setTranslation(t.currentLang, obj, true);\n                    });\n            }\n        });\n}\n\n}\n```\nHope this helps.\n. @ocombe, thanks for the precious informations.\nIn my scenario I need that the user can switch to another language, but keeping his favorite UI language.\nWith this library I think it's something achievable. What about Angular i18n?\n. > To switch the language with Angular i18n you need to reload the app\nYes, I understood this, but I was wondering if it was possible to load two different languages at the same time, from different files. One related to the app and the other to the User Interface.. Cool! Thanks. \nIs the code you're talking about already available in the Angular repository?. Got it. https://www.youtube.com/watch?v=miG-ghJhFPc. ",
    "joannepham2018": "@ocombe Is Angular's i18n support translation string in typescript for Angular 7?. @ocombe if we need to localize our strings in Angular application now and we need do the translation strings on both template(html) and code(typescript) should be using ngx-translation now.\nLater when Angular's i18n is completed with supporting translation string in typescript then is there any easy way to migrate from ngx-translation to Angular's i18n?\n. ",
    "schankam": "I have to say thanks @ocombe for all of your messages, it's really helping a lot in making a decision between going for the native solution or the library you did. I'm facing the situation where I need my app to be translated, and I kind of feel sad I cannot use the native implementation right now because of what is \"non-sens\" to me (like having to reload the app to switch the language dynamically, or translated text located in my typescript files). Moreover, my app is a PWA and I really wonder how it is going to behave if I am displaying a language switcher in my standalone app (since it's going to load \"an other\" app on language change. But well, the manifest file is supposed to be the same so it should work I guess...) \nI will stick to ngx-translate for now, as long as it's not going to be deprecated in the following months I am happy with it. Also, I believe that serving JSON translation files is not really nowadays with compression and PWA caching... And the \"binding\" speed issue for me kind of goes unnoticed, really... ",
    "lefoulkrod": "@ocombe Just to clarify, Ivy will support swapping the localized content at runtime against a single AOT compiled version of the application?\nA use case that would be nice is to let customers provide their own localizations for languages.  It would be difficult to do this if the application had to be recompiled with these user supplied localization files, considering a product that lives on premise and is not a saas.. ",
    "ls-matheo-jaouen": "Hey I didn't followed this chan since a month but I'm still wondering, how do you plan to make dynamic translation based on xlf files with Angular i18n? I mean, translation are parse/computed on during AOT comp but what for dynamic translations? We gonna always need dynamic translations in a real single page app nop? So, how do I mount xllf files in the browser (I wont make an xml parser x) )? Do you plan to fallback to a json plan? Not sure to understand.. > you can bundle the translations at build time, they will be preparsed/optimized and you won't need the parser at runtime, it should also be more efficient\nI don't understand, how do you that? You mean, converting on build time xlf to json and load it into the app (bundled or not)? Otherwise how do you make a simple key match like translate('string to translate') ? It's done in one or two line to make a pipe with json files but how to deal with xlf files? Thanks.\nEdit: Oh sorry \"We're thinking about different solutions for that:\" well, no solution yet right?. ok, I didn't see anything about that in the official documentation, would be great to add an explicit line I think and to suggest an alternative like your solution nop? It's like a huge lack for a framework.. ",
    "suryab21": "Hi @ocombe, \nI am migrating from ngx-translate to i18n and using Angular v7. I would require translation in .ts file at code level in my component where i have no template file available. \n\nIs the translation in .ts file now available in Angular v7?\nIs it recommended to use i18n when we have some requirement where we need translation in .ts file OR is it good to have the existing ngx-translate in place?\n\nCould you recommend and suggest any approach to do the translation in .ts file as there are some work around available on google but not sure if they are really useful and will not produce any performance issues in future.\nThanks in advance !. > 1/ yes you can do that if you use JIT\n\n2/ either wait for ivy and the new runtime i18n, or use JIT or use ngx-translate. Using JIT for now will make it easier for you to migrate to runtime i18n when it's released, but you'll loose on performance for a while\n\n@ocombe \nThanks for you quick response on this!!!\nDoes this also mean that the polyfill https://github.com/ngx-translate/i18n-polyfill by you can only be used with JIT and not with AOT?\nmany thanks for providing your clarifications on this.. ",
    "Luke-1988": "Olivier, please, just to clarify: \nto today's day and current Angular version (7.1.4) , built-in Angular's feature i18n allows you to translate application into multiple languages only at build time (using AOT). So, if you have for example 3 supported languages (en, fr, de), you must do 3 separate builds and deploy your application into 3 folders:\nwww.MyApplication.com/en (put en build here)\nwww.MyApplication.com/de (put de build here)\nwww.MyApplication.com/fr (put fr build here)\nSwitching language navigates you to different folder.\nThe next release, which will include Ivy renderer, will provide rewritten i18n feature, that will allow you to change language at runtime (using AOT). So, you will have to do just one build.\nAm I right?\nMerci!. Reload is not that big problem as language specific suffix ( /en /de /fr )\nDo you have any release date estimate of this new version? I have an application which is about to be translated, I have began with ngx-translate, bud I found this conversation and question is: If I decide to go with official i18n, how long I will wait for new version.\nThanks again!. Yes, I have noticed during reading this conversation from 2017 :-D However, that is quite common in open source, no blame here.\nSo, Sept 2019 is way too late, I would like to launch my app in Feb 2019 so I will continue with ngx-translate (which is, by the way, totally superb cool \"works-like-a-charm-out-of-the-box\" lib, you have done a amazing job)\n. ",
    "Wildhammer": "have a look at my answer here: \nhttps://stackoverflow.com/a/54293804/2582581. ",
    "VVKot": "@ocombe Can clarify when ngx-translate will be deprecated? What features should be available in OOTB i18n to begin this process?\nIn https://github.com/angular/angular/issues/16477 you mentioned that main pain points(dynamic i18n and code translations) -  will be addressed in v9, should we expect depreciation by the end of the year?. @pathakpradeep22 You can use i18n implementation by core team if you will deploy several version of your app, one for each language. So, you will have en.myapp.com, it.myapp.com, nz.myappcom.\nIf you don't want to do redirects and just update content with one button click - I would recommend going for ngx-translate.. ",
    "Davilink": "@jasonever \n\nWhile using ngx-translate, I noticed that it loads the JSON file (for the language) in explicit way.\n\nIt's because you use the HTTP Loader (https://github.com/ngx-translate/http-loader), but you can create your own loader that will get the translation when requested/needed in the component see https://github.com/ngx-translate/core#write--use-your-own-loader\nHere an another loader (that use firebase): \nhttps://github.com/ngx-translate/core/blob/master/FIREBASE_EXAMPLE.md. ",
    "ccjmne": "@ocombe Hello,\nI understand I should already be able to use the built-in Angular i18n tooling to translate text in my Typescript code too... and be able to leverage all the good stuff that comes with ICU expressions, so long as I use the JIT compiler ('till Ivy is battle-tested \u2014 Angular9).\nIs that correct?\nI Google'd a bit but couldn't find any procedure for marking my TS strings for translation.\nFor example, how would I go doing the equivalent of:\nlang-html\n<h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1>\n... within my TS code: const siteHeader = 'Hello i18n!';?. @ocombe Aaah, alright, I get it. Thank you very much!. ",
    "pathakpradeep22": "I have a quick question, I need to change the language dynamically in the app itself. User will have option to select language. So ngx-translate is the only option as of now? I am using following: \nAngular CLI: 6.0.8\nNode: 8.11.1\nOS: win32 x64\nAngular: 6.1.10\nPlease advise!. @VVKot Thanks for the reply. So in that case  ngx-translate suits to me. I am just concerned about the flickering that may happen during language loads(other than english).. ",
    "saithis": "@pathakpradeep22 Be aware that ngx-translate has no effect on angulars locale_id. So dates, currencies, etc. may be in the wrong locale after changing the translations at runtime. This is what led to us reloading the app even with ngx-translate. . @ocombe Can you please take a look at this? Because of this bug our app is unresponsive for ~5 seconds only compiling the messages over and over again when the initial page the user opens has many keys.. ",
    "Ismaestro": "@saithis Yup, that's exactly our use case.. My solution:\n```\nconst languages = ['es', 'en'];\nthis.translateService.addLangs(languages);\nthis.translateService.setDefaultLang('es');\nfor (const lang of languages) {\n    this.translateService.setTranslation(lang, require('../assets/i18n/' + lang + '.json'));\n}\nconst browserLang = this.translateService.getBrowserLang();\nthis.translateService.use(languages.includes(browserLang) ? browserLang : 'es');\n```\n. ",
    "userisrashmi": "I am working on an app where i have to use i18n. Could you please  provide me the status for i18n in Angular 7. ",
    "tmtron": "we gave up on angular i18n and are currently checking i18next - looks good so far.. ",
    "pfoedermayr": "You could just use 'empty' translations for English (see i18n/en.json in my sample).\nPer default the key is shown if the translation is not found.\nExample: https://plnkr.co/edit/zvfGyIAv7dHIqUhz6eqO?p=preview\n. ",
    "smozhaykin": "@ocombe it's clear that version number is present on the package submitted to npm. But I'm trying to implement this approach on my application. I'm using ngx-translate for localization, but looks like both @ngx-translate packages (or at least @ngx-translate/core) are not supported by closure compiler. So I need to recompile it manually (in the same way as rxjs). I've tried to download source code using npm, but it failed.\nIf version won't be added to the source code, please close this issue.. ",
    "TomDemulierChevret": "I'm experiencing the same issue with a shared library I'm trying to build for some of my apps.\nIf I import TranslateModule.forRoot() both in my AppModule and in my LibraryModule, the translations are not found for the component provided by the library, only for the one inside the App.\nAny ideas ?. ",
    "DenysVuika": "Jan 2018 already and having the same problem. We are also facing this problem. Application provides support for a dozen of languages, with en as a default/fallback. As soon as browser language is set to some other language - the library won't use fallback values and all pipes display just resource keys. . Having similar problem, but for the \"translate.store\"\n<...>/node_modules/@ngx-translate/core/src/translate.store.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,global,jest){import { EventEmitter } from \"@angular/core\";. @nfdevil I had to write my own implementation of the library (https://www.npmjs.com/package/@ngstack/translate) to get the numerous issues sorted out, as this library seems to be abandoned . @CodeAndWeb if the point is to have an empty issue tracker, why not closing all open bugs in the bulk? You ask for steps and immediately close the issue. Do you expect a new one to be opened now?. Would love to see how someone creates a lazy-loading bug reproduction in the plunker.. If anyone interested, I've started working on an alternative solution: https://www.npmjs.com/package/@ngstack/translate. \nNot trying to make a framework out of a library, and keeping things very simple and small. Should cover most of the real-life scenarios as well as addressing the most common issues my team has been struggling with when using ngx-translate/core during the last year.\nLive demos: \n- Angular: https://stackblitz.com/edit/ngstack-translate-angular\n- Ionic: https://stackblitz.com/edit/ngstack-translate-ionic\n. ",
    "valera33": "+1\nit would be nice to be able to import it not only in the root NgModule of the application. I wonder why this restriction came at all?. ",
    "tsvetan-ganev": "@bedag-moo, thank you for providing this valuable information. After reading your comment I saw that this is mentioned in the documentation, but the concrete example uses hardcoding of the translations as a JavaScript object. @ocombe, I think bedag-moo's example should be added alongside the current one, since it depicts a more \"real-world\" scenario.\nIn my case I currently support only two languages and I've been looking for a way to include the translations directly into the bundle. Not only this saved me 2 HTTP requests (with the possibility of them failing on flacky connections), but also removed the text flickering caused by loading the translations on the fly.. @mp3por, this configuration works for me:\njs\n// app.component.ts\nngOnInit() {\n    this.translate.setTranslation('en', require('./../assets/i18n/en.json'));\n   // add other languages here\n}\n```ts\n// app.module.ts\nimport { TranslateModule } from '@ngx-translate/core';\n@NgModule({\n  imports: [\n    // other modules\n    TranslateModule.forRoot()\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n``\nIt seems that there is no need for thecreateTranslateLoaderfactory.\n. Simple string concatenation should do the trick:placeholder=\"{{ ('bike-passport.label' + field.key) | translate }}\". @Abhishek-Kanitkar,placeholder=- this is a HTML attribute'bike-passport.label'- this is a stringfield.key` - this is a variable coming from the component\nThis is the same example written in a clearer context:\nhtml\n<input type=\"text\" placeholder=\"{{ ('bike-passport.label' + field.key) | translate }}\" />. @adammus95, @tea-mo903, I would suggest you check the Network tab in the Chrome DevTools to see if the translations file was loaded correctly. My guess is that instead of the desired .json file the server responds with an HTML file (probably your index.html). That once happened to me when I provided a wrong URL for the translations file.. You can simulate that behavior by using the built-in uppercase or lowercase pipes to normalize your translation keys and then pipe the output into the translate pipe.\nExample:\nsample.component.html\n<p>{{ 'ToolbarTitle' | uppercase | translate }}</p>\nen.json\njson\n{\n  \"TOOLBARTITLE\": \"My app\"\n}\n. ",
    "mp3por": "@bedag-moo hey man where do I put this ? In the AppComponent right? Also do I still need to import the TranslateModule as so :\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [Http]\n      }\n    }),. Me too. This is too troubles right now. Especially if you need to get multiple words. There has to be a way to load the all the translations and them use translate.instant everywhere. . ",
    "starwarslover": "I have the same issue when i subscribe from ngOnInit in my component.. You can try to subscribe for translations in the onLangChange event. It worked for me. ",
    "christophearg": "Sorry i'm just back from holidays. Don't understand why, pipe and directive are well but service does not translate. I tried instant and get methods, both failing. The exact same application was ok on angular 2.6. I'm using the trick for aot which is decribed in the documentation, maybe it helps?. On this plunker the get method is ok but instant is not. The translation is loaded because it appears in the pipe; I don't understand.\nhttps://plnkr.co/edit/IKmp2M80waZUpLWPIYnc. My problem is to change the title of the page. I saw this in the documentation, in my project i could not reproduce the get problem in the plunkr but it appears on my real projects. I stepped into the code and it appears that the translation array is empty when i use get or instant.. Is there a way to know when the translations are ready? An event or something?. Ok I will try this thank you.. ",
    "pegaltier": "Hi, @SamVerschueren thanks for your reply. i have done your idea + idea based inside issue 209 and it work in dev mode (ionic serve) but when i build for android it dosn't work. Have you tested with ionic run android  ?\nhttps://github.com/ngx-translate/core/issues/209. Finally i have solved my problem by adding : \n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nAnd drawing inspiration from : https://github.com/ngx-translate/core/issues/209\nThanks @SamVerschueren . I have experienced new problem with lazy loading using ion-tabs component.\nHave you experienced this component with lazy loading ?\nThanks. Ok i will do this, have a good day!. Finally is ok for the tabs but you must use lazy for all tab inside pager. ",
    "wushuai820": "@pegaltier Do i have the same question that will let me see your code? please. ",
    "arthursp": "I thought the IonicPageModule.forChild() function should resolve this ? \nIf it's loaded in app.module.ts, why should we add it to each page lazy loaded too ? . ",
    "johnpapa": "Actually, this was busted for the old version of ng20translate, but seems to be fine now for this version.\nThe errors are now pointing to the same problem with another ng 3rd party library that is not AOT compatible. \nclosing. ",
    "xmlking": "with Angular 4.1.0 I am getting following error \n```\nERROR in Error encountered resolving symbol values statically. Calling function 'OpaqueToken', \nfunction calls are not supported. Consider replacing the function or lambda with a reference to an \nexported function, resolving symbol USE_STORE in /Developer/Work/iot/hub/node_modules/@ngx-\ntranslate/core/src/translate.service.d.ts, resolving symbol TranslateModule.forRoot in \n/Developer/Work/iot/hub/node_modules/@ngx-translate/core/index.d.ts, resolving symbol \nAppModule in /Developer/Work/iot/hub/src/app/app.module.ts, resolving symbol AppModule in \n/Developer/Work/iot/hub/src/app/app.module.ts\n```. ",
    "do-web": "[translateParams] also not working with [innerHTML]. ",
    "Jotakuun": "I'm having same problem, any update on this?. ",
    "vadost": "import { AfterViewInit, Directive, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core';\nimport { TranslateService } from 'translate-core';\nimport { Router } from '@angular/router';\n@Directive({\n  selector: '[appTranslate]'\n})\nexport class TranslateDirective implements AfterViewInit, OnDestroy {\n  @Input() appTranslate: string;\n  listenClickFunc: Function;\nconstructor(private element: ElementRef,\n              private translate: TranslateService,\n              private router: Router,\n              private renderer: Renderer2) {}\nngAfterViewInit() {\n    this.translate.get(this.appTranslate).subscribe((translateText: string) => {\n      this.element.nativeElement.innerHTML = translateText;\n      // this.cdRef.detectChanges();\n  const navigationElements = Array.prototype.slice.call(this.element.nativeElement.querySelectorAll('a[routerLink]'));\n  navigationElements.forEach(elem => {\n    this.listenClickFunc = this.renderer.listen(elem, 'click', (event) => {\n      event.preventDefault();\n      this.router.navigate([elem.getAttribute('routerLink')]);\n    });\n  });\n});\n\n}\nngOnDestroy() {\n    this.listenClickFunc();\n  }\n}. <div [appTranslate]=\"'MSG'\"></div>. @duall Create your custom directive! An example you can see from above!. ",
    "mrin9": "@vadost thanks for the workaround, I am doing something similar at present.\n. @ocombe, First of all thanks for such an awesome and simple to use framework, we found it much more easier than angular's own i18n.\nThough I cannot fully comprehend how it is a limitation, as I didnt got into the internal workings of it, but  If it is a limitation, was wondering would it be possible to take care of only few special/popular directives to preserve them as is in the final output? . now I see why thats an issue, Thanks for explaining this !. ",
    "duall": "@ocombe That would not work for many languages as they need to shift words in sentence like: \n<a routerLink='/login'> Sign in </a>you may again.\n It's very common to do that in Chinese.. @christarczon  Do you really want to put a blank value before every element in your website ?. ",
    "christarczon": "@duall That's exactly why you split it into 3. Languages that don't need text before the link have a blank value for the first key.. ",
    "jcdsr": "@vadost  Sorry, for angular4 who is \nimport { TranslateService } from 'translate-core';\nI'm trying to apply the directive but something is missing... could you have a plunker??\n. ",
    "voice-technologies": "So, to be clear, does this mean that an existing, working angularJS app that features custom directives inserted by ng-bind-html, then compiled with $compile, cannot be upgraded to angular 2+? And that there isn't even a workaround? Given that for back-compatibilty reasons the inserted HTML content cannot be changed, is the app now stuck with the end-of-life angularJS forever?  I'm sorry, but that seems to be a major hole in angular, which I would hope to see addressed in a release sooner rather than later.. Thanks for your reply. As I have already invested a lot of time in upgrading the static HTML parts of the app (by far the bigger part of it) to angular 5, I was wondering if a workaround along the following lines might be possible to avoid throwing all that work away.\nKeep the angular 5 upgraded components that use static HTML templates. Refactor the angularJS element directive that hosts dynamically added attribute directives, as an angularJS component. So the app now functions as an angular 5/angularJS hybrid, at least until angular 7.x brings runtime template creation.\nMy question is, will an angularJS component in a hybrid app support the use of $compile in the same way that the element directive in a pure angularJS app does?. ",
    "MartinMa": "The workaround proposed by @vadost is not ideal from an accessibility point of view, because the href attribute is missing from the anchor element. Usually the routerLink directive adds the correct href attribute (see router_link.ts). But since custom directives in translation strings are not possible with with library I propose the following workaround using translate parameters.\nHTML\nhtml\n<div [innerHTML]=\"'MSG' | translate:{ path: '#/login' }\"></div>\nTRANSLATION\njson\n\"MSG\": \"You may <a href=\\\"{{ path }}\\\">Sign in</a> again.\"\nBased on the locationStrategy used in your project, the path parameter has preceding hash symbol (like here) or not.. Thanks @ocombe, that worked like a charm.\nAnyone else looking for an example. In this case de is the primary language.\nBefore:\n```TypeScript\nexport class AppComponent {\n  constructor(translate: TranslateService) {\n    translate.addLangs(['de', 'en']);\n    translate.setDefaultLang('de');\nconst browserLang = translate.getBrowserLang();\ntranslate.use(browserLang.match(/de|en/) ? browserLang : 'de');\n\n}\n}\n```\nAfter:\n```TypeScript\nexport class AppComponent {\n  constructor(translate: TranslateService) {\n    translate.addLangs(['de', 'en']);\n    translate.setDefaultLang('de');\ntranslate.setTranslation('de', require('../assets/i18n/de.json'));\n\nconst browserLang = translate.getBrowserLang();\ntranslate.use(browserLang.match(/de|en/) ? browserLang : 'de');\n\n}\n}\n. You can try to call `_changeDetectorRef.detectChanges()` manually to see if it fixes your problem. Like this:TypeScript\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\n@Component({\n  selector: 'foo',\n  templateUrl: 'foo.component.html'\n})\nexport class FooComponent {\n  public currentLang: string;\nconstructor(private _changeDetectorRef: ChangeDetectorRef, public translate: TranslateService) {\n    this.currentLang = translate.currentLang;\ntranslate.onLangChange.subscribe((event: LangChangeEvent) => {\n  this.currentLang = event.lang;\n  // TODO This as a workaround.\n  this._changeDetectorRef.detectChanges();\n});\n\n}\n}\n```\nThis helped me working around a similar issue.\nOn the other hand, it would be helpful if you could provide a working example to reproduce your issue.\nYou can take the official StackBlitz example as a starting point: https://stackblitz.com/github/ngx-translate/example. ",
    "supersinex": "@MTechDE Thank you so much!! I was just looking for a solution to this problem today. I just tried it and can confirm it works great. Awesome!. ",
    "tundak": "you can follow thread https://forum.ionicframework.com/t/ngx-translate-and-ionic-3/87005/24. got any solution ?. ",
    "xtoff": "@SamVerschueren I want the same thing :) \nSomething like in Angular 1: https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate#methods_instant. ",
    "kneefer": "All you need to do (as it was partially mentioned) is to preload translations using .use() method. The problem is the method is async (we should wait for the result). The best way to force the application to wait for \"something\" to finish before it shows up is using APP_INITIALIZER function in your AppModule.\nYou have to add following provider to your AppModule's providers section:\ntypescript\nproviders: [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TranslateService, Injector],\n    multi: true\n  }\n]\nAnd define factory function appInitializerFactory upper in the same file:\n```typescript\nimport { Injector, APP_INITIALIZER } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LOCATION_INITIALIZED } from '@angular/common';\nexport function appInitializerFactory(translate: TranslateService, injector: Injector) {\n  return () => new Promise((resolve: any) => {\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    locationInitialized.then(() => {\n      const langToSet = 'en-GB'\n      translate.setDefaultLang('en-US');\n      translate.use(langToSet).subscribe(() => {\n        console.info(Successfully initialized '${langToSet}' language.');\n      }, err => {\n        console.error(Problem with '${langToSet}' language initialization.');\n      }, () => {\n        resolve(null);\n      });\n    });\n  });\n}\n```\nNow application will wait for translations initialization before it shows up for user.. ",
    "outsideMyBox": "I'm interested in having several languages loaded before using instant(). Does it work if I call use() on each of the languages and then, once everything has been loaded, use use() again to choose the current language for instant()?. ",
    "micobarac": "What happens when you have a multilanguage application and you have an option to switch between languages? How do you preload a new language then (on button click), without showing the translate token instead of actual translation (Angular 1 cloak, if you remember)?. This is still an issue, with 2 Angular versions up and one year later :(. ",
    "xStarman": "Hi,\nI don't know if this is the best solution but worked for me:\nstring \"init\" is any key you want\ntranslate.get('init').subscribe((text:string) => {\n//use instant call here\n});. Mythrim, In my answer I used get('key') just to wait until translation service starts before accessing instant, your calls must be inside the subscribe callback, or you can just call a callback inside it because subscribe are asyncronous.. ",
    "derek90": "\nHi,\nI don't know if this is the best solution but worked for me:\nstring \"init\" is any key you want\ntranslate.get('init').subscribe((text:string) => {\n//use instant call here\n});\n\nYeah, and if you need to set multiple variables, you could subscribe just to one of them, and use anyone you need:\nthis.translateService.get('_back').subscribe(value => {\n      this.config.set('ios', 'backButtonText', value);\n      this.config.set('monthNames', [\n        this.translateService.instant('_january'),\n        this.translateService.instant('_february'),\n        this.translateService.instant('_march'),\n        this.translateService.instant('_april'),\n        this.translateService.instant('_may'),\n        this.translateService.instant('_june'),\n        this.translateService.instant('_july'),\n        this.translateService.instant('_august'),\n        this.translateService.instant('_september'),\n        this.translateService.instant('_october'),\n        this.translateService.instant('_november'),\n        this.translateService.instant('_december')\n      ])\n});;. ",
    "Mythrim": "But I am not able to return value inside this:\ntranslate.get('key').subscribe((text:string) => {\n  return text;\n});\nThis is not returning any text instead returns an observable even after returning response from inside subscriber, Does any one know how to tackle this situation?\n. Hi, I have integrated ngx-translate/core for my angular 6 application. My application contains lazy loaded modules also other than the main application module. I have added translator module config inside the shared module and have imported the shared module in other modules, but still, I need to create an instance translate in each component and use that, Is there an efficient way of adding some default configuration in some place and need not initialize the translation service in each component.\nAny suggestions?. ",
    "bnfrnz": "\nis theire a way to load translations when application starts so that we can safely usetranslate.instant()\n\nIf you want to be sure that the translations are loaded, consider converting the Observable to a Promise and then await that before calling instant():\nawait this.translate.use('en').toPromise<void>();. ",
    "FelipeAmaralRodrigues": "Solved?. ",
    "junaidbinsarfraz": "Also having same issue with @angular/http\n```\nvar link = 'https://mywebsite.com/myws/Login';\n    var data = JSON.stringify({ username: this.username, password: this.password });\nthis.http.post(link, data)\n  .subscribe(data => {\n    console.log(data);\n  }, error => {\n    console.log(\"Oooops!\");\n});\n\n```\nError on chrome\nERROR TypeError: Cannot read property 'getDOM' of undefined\n    at CookieXSRFStrategy.configureRequest (xhr_backend.js:167)\n    at XHRBackend.createConnection (xhr_backend.js:207)\n    at httpRequest (http.js:20)\n    at Http.request (http.js:120)\n    at Http.post (http.js:137)\n    at LoginPage.doLogin (login.ts:37)\n    at Object.eval [as handleEvent] (LoginPage.html:113)\n    at handleEvent (core.es5.js:11892)\n    at callWithDebugContext (core.es5.js:13184)\n    at Object.debugHandleEvent [as handleEvent] (core.es5.js:12772). ",
    "jlcasasg": "solved it? . ",
    "parinita88": "i have same problem.. wondering why this issue is closed without any solution threads??\n. ",
    "parker-mike": "May be there is an option to hold the loading stage on the screen until translations are loaded?\nI mean that when the application starts and not functioning yet, the browser shows the contents of the app root tags, so maybe we can use some hooks to load the translations at this stage, so when the app starts rendering the page and replaces the innerHtml it would have the translations and won't show the keys... Is there any way of doing it?. ",
    "Meldinoor": "I've implemented my own hack to solve this problem for now, but I don't have the time or the know-how to write proper tests and make a pull-request.\nThis is how I solved it:\nIn translate.directive.js, in the updateValue function, I added one line of code:\n_this.setContent(node, _this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                node.parentElement.setAttribute('translated', ''); <-- this is what I added\n                _this._ref.markForCheck();. ",
    "marpereira": "due to typings 2.2.1 and 2.2.2.\ncheck if workplace version is the same as VSCode version. @ocombe What I want to be able to put a translation file on i18n folder and the app recognize it without the need to rebuild the code.. ",
    "eestein": "@marpereira they are, both are 2.2.2.\nThanks.. @yannickadam thank you :). ",
    "yannickadam": "Probably that tsconfig.json needs to be added to .npmignore.\nIn the meantime, deleting the file (tsconfig.json) manually solves the error.\n. ",
    "alcfeoh": "This didn't do the trick for me. Now Angular is complaining that it can't find the translate pipe, though I import TranslateModule in both my main module and my shared module.. After restarting my ng serve a couple of times, it actually works now... Really weird but problem solved, somehow.. ",
    "Massimiliano-Perelli": "It seems to be some typing error, with blocking consequences.. Same issue here!. ",
    "82antu": "any news ???\nseems that the problem is still there...\nset translations(translations: any) {\n        if(this.isolate) {\n            this._currentLang = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\nset translations() method still write on _currentLang property\n. well done !!!. ",
    "markmaynard": "I like the middle example but what about adding this capability?\n[\n  this.a$,\n  this.b$,\n  this.c$\n] = this.translate.stream(['a', 'b', 'c']);\nThat condenses things a little.. ",
    "alkemist": "O_o ah ok, d\u00e9sol\u00e9 je comprenais pas la logique de ce besoin... Merci :). ",
    "nickwinger": "When will this be released ?\nCurrently it doesn't work at all, to merge-load translations with lazy modules\n(of course you can do a workaround with setTranslation, but the recommended way should of course be via the loader...). so, no tests after 14 days, i guess i will stick with the workaround, or provide my own translation service...\nthx. ",
    "xTaz1": "Any updates here ?. Are you sure that the current lang was defined ? . ",
    "rmccabe24": "Guys, are you going to merge this change into the main branch?  We could really use this useful change!. ",
    "dev054": "Hey, @ocombe. I think @marpereira wasn't talking about server-side, but client-side.... ",
    "SebastianSchirmer": "@tsvetan-ganev Awesome, works like a charm, thanks very much!. ",
    "eyerean": "I think this should be added to the documentation. Even though it's more of an Angular thing, it would help a lot newcomers.. ",
    "Abhishek-Kanitkar": "Dear @tsvetan-ganev ,\nAs per your comment above \"Simple string con ...\" placeholder is a component variable which will get assigned to 'placeholder' input field attribute right ?. I am having same issue ! Can anyone please help ?. Dear @dkabul ,\nSeems like you have found a solution to the problem.\nI am also sailing in the same boat. \nI have created a component lib using ng-packagr in which I have ngx-translate.\nI am also trying to 'npm install' this component lib into a angular 4 client app & trying to provide translations in client app.\nBut when I include a component from a feature module in component lib into the client app (which is using ngx-translate as pipe), I get \n```\nERROR Error: StaticInjectorError[TranslateService]: \n  StaticInjectorError[TranslateService]: \n    NullInjectorError: No provider for TranslateService!\n```\nIn my feature module, I have done the forRoot method changes as prescribed by you above. But still get the same error.\nWhat I must be missing ?\nI really need your help in this.\nCan you please post a link to repo where this working ? \nThanks a lot in advance !. Dear @dkabul  & @ocombe ,\nI am also now facing same problem as @ovione . I don't get any translations. Only the translation keys are shown. Can someone please please throw some light on this ?\nReally interested in getting a solution for this. Please help !. Thanks for the efforts @dkabul  !!! But did you actually run the new-playground project to see the translations from de.json ? When I followed all the steps I got some error related to Zone. \nCan you please check once again whether following is true in playground ?\n1) Ngx-translate is used in lib-playground\n2) The components from lib-playground, when rendered in new-playground, render with translations from new-playground.\nCan you please please help in this ? Seems like we are almost close to solution but some small things are missing & blocking us.. @ovione @dkabul @ocombe \nAfter many many trials, it seems that translations simply don't get applied to components from component library that are used in a new application. Only components from new application get translated but not the ones from component library. Very frustrating !!!. @dkabul \nI will let you know exact steps I followed in sometime.\nBut more importantly, you don't seem to have used (any) translations in new-playground project that may override the ones in lib-playground. \nCan you please add that too ?\nThats where the issue is I think !. Dear @dkabul ,\nThanks for your continued support  :+1: \nOk I have got the new-playground running now !  :)\nIn order to have translations in new playground, I will follow same steps, as mentioned on Ngx-translate git page right ?\nAny special steps/ changes I need to do to ensure that I can also translate footer component from new playground ?. @dkabul \nCan you please add translations to new playground that override the footer component translations ?\nActually I am having issue with that. de.json file gets loaded twice & both times it's from lib-playground only.  Sad thing ! Please help !. @dkabul  But the problem I am facing is following\nIf I have same translation key for same language in new-playground (as in lib-playground) still the .json file from new-playground is not loaded & doesn't override translation at all.\nCan you please throw some light on to it ?\nIn your playground git repo, can you please add a translations file & load it to override footer component translation ? That will really help me. I am not looking for comment mentioned by you above.. Dear @dkabul , @ovione , @ocombe ,\nPlease please help me !\nI really like Ngx-translate. But my below requirement is not getting fulfilled properly.\nFollowing is the problem I am facing\n1) I have created a component library using ng-packagr\n2) I am using components from this library into another angular cli application by doing 'npm install' to include my library\n3) My requirement is that components in the library should be internationalization supported.\n4) If I include any translations in my angular cli app, then those should get applied to the components from library.\n5) I really need exact help to achieve this. Please provide exact code to do this.\nPlayground created by @dkabul  is not adding translations in new-playground app that can get applied to footer component. Feeling very low because it's not working !\nPlease please please help me  !!!!!. Dear @ocombe , @dkabul ,\nCan you please help @ovione & me in above mentioned scenario ? \nI will be grateful if you can provide concrete solution to what @ovione & I have mentioned above.\nPlease help us !!!!!!!!. Hi @dkabul ,\nI just now tried to do 'exactly' what you have mentioned above in comment using playground repo.\nBut the en.json file is NOT getting overriden with client en.json file.\nCan you please make it working in playground repo ?\nCan you please add de.json to new-playground in repo & check whether it overrites or not ?\nI think it's not working ! Again feeling sad because of this.\nCan you please help us ? . Opps my bad this time !!!  I forgot to add \"assets\" into assets array of .angular-cli.json.\nThanks a lot @dkabul !\nIt's missing in playground repo too !. @ovione  Please take a note !. Dear @dkabul ,\nOne more questions !\nLets say I have multiple modules such as FooterModule in my lib-playground.\nIn that case how to avoid repeat declaration of forRoot() method for each such module ?\nDo you think Sharedmodule will help here ?. Hey @dkabul\nCan you please help us with this last thing asked above ?\nPlease Please! \n@ovione, @ocombe\n. @dkabul  Please help !. ",
    "LPCmedia": "This does not work in my case when using inside of an ngFor and binding to a component input. \n  <panel-menu-group \n    *ngFor=\"let nav of launcherNav$ | async\"\n    label=\"{{ nav.labelKey | translate }}\"\n    [isSelected]=\"nav.isSelected\"\n    [isDisabled]=\"nav.isDisabled\">\n  </panel-menu-group>\n\n. ",
    "Jahrenski": "Necro posting to answer @LPCmedia  : \nyou can trick it by using this form instead: \n<panel-menu-group \n    *ngFor=\"let nav of launcherNav$ | async\"\n    label=\"{{ '' + nav.labelKey | translate }}\"\n    [isSelected]=\"nav.isSelected\"\n    [isDisabled]=\"nav.isDisabled\">\n  </panel-menu-group>. ",
    "JGeraldoLima": "Just to let anyone who is facing the same problem, @tsvetan-ganev answer also helps when you have \n to define the translate key dynamically, like:\n[placeholder]=\"(simpleRangeMode ? 'TXT_RANGE_METERS_PLACEHOLDER' : 'TXT_RANGE_DECIBELS_PLACEHOLDER') | translate\"\nFor some reason, the expression only works when using parenthesis.. ",
    "chetan096": "\nSimple string concatenation should do the trick:\n`placeholder=\"{{ ('bike-passport.label' + field.key) | translate }}\n\nThanks fo the solution.. ",
    "Toub": "It probably appends with any transclusion directive.. Do you mean?\nhtml\n<a  md-button>{ 'Hello' | translate }</a>\nYes, it is an option, but it is much more verbose than:\nhtml\n<a translate md-button>Hello</a>. Ok, so I guess we can close this one as there is no way to fix it. \nMaybe just mention this behavior in the documentation?. ",
    "yamidvo": "I have the same error. ",
    "robmeredith": "@mmathys I beleive a better solution than using webpack to transpile the package is to build the package according to Angular packaging rules in the first place.. ng-packagr does just this.. I created a fork  of ngx-translate that uses this to build the package and this seems to have solved the problem.. with this I can use ngx-translate with Universal with angular-cli (as described in this story) without the additional webpack phase.\n@ocombe maybe this change to the build could be done to align packaging with Angular standards?. ",
    "AnthonyNahas": "take a look to my solution (only as work around)\nhttps://github.com/ngx-translate/core/issues/581#issuecomment-326256510\n. this usually happens if the internal npm module contains the dir node_modules too ...\ni had a similar issue few minutes ago... I fixed the issue as i move all bundles files to the root of the module!\n--> e.g: \nbefore:\nnode_modules/@ ngrx/core/bundles/\n--> core.umd.js & core.min.umd.js (i have moved these files to -->)\nafter:\n node_modules/@ngrx/ or node_modules/@ ngrx/core (depends on ur import)\n-->--> core.umd.js & core.min.umd.js\nthe same procedure for all umd.js files !\nin my case they should be not nested! They should be in the root of the module or submodule!\nI hope this helps (as workaround). i forked the repo few days ago and i made some updates!\nplease try my version and give me your feedback.\nIf that works your machine, i will make a pull request.\nSo the solution is the following:\n\nremove the npm module vianpm un --save @ngx-translate/core\ninstall my forked module via npm i --save git+ssh://git@github.com:AnthonyNahas/core.git or npm i --save https://github.com/AnthonyNahas/core.git\n\nCheers, no more Unexpected token import error \ud83d\udc83 . @polcham pls post ur npm build script like or tell me which steps are u running to build the app\n@BlankHrt u need to compile the js files to es2015 - commonjs e.g. with babel cli \n. @qubiack please see my full explanation here\nu can do the same procedure for every module that throwing this kind of errors!. I am facing the same problem! The translation is being rendered again on the client side.... im getting the same error. ",
    "laserus": "@ocombe do you know whether this is good approach to rename TranslateDirective and TranslatePipe. I have used to (and I think it is more readable) to have TtDirective and TtPipe so one can do:\n<div tt>Hello</div>\nor\n{{'Hello' | tt}}\ninstead of long name translate which otherwise (repeated 20 times in template) and occupy a lot of visual space).\nIs it worth adding this as feature request, or is it already somewhere implemented?. ",
    "DevJaBo": "Hi Oliver. Thanks for the answer. Yes, i'm using SystemJS. Ok, in the first case i was loading ngx-transplate as a package:\n//Part of old system.config.js\npackages: {\n          [...]\n            '@ngx-translate/core': { main: '/bundles/core.umd.js', defaultExtension: 'js' },\n            '@ngx-translate/http-loader': { main: '/bundles/http-loader.umd.js', defaultExtension: 'js' }\n        }\nNo i'm just mapping it like in your demo-plkr but without transpiler/typescriptOptions.\nHeres my system.config.js:\n```\n//Current system.config.js\n(function (global) {\n    System.config({\n        //transpiler: 'typescript',\n        //typescriptOptions: {\n        //    emitDecoratorMetadata: true\n        //},\n        paths: {\n            // paths serve as alias\n            'npm:': 'node_modules/'\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // our app is within the app folder\n            'app': 'app',\n            '@ngx-translate/core': 'npm:@ngx-translate/core/bundles/core.umd.js',\n            '@ngx-translate/http-loader': 'npm:@ngx-translate/http-loader/bundles/http-loader.umd.js',\n        // angular bundles\n        '@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',\n        '@angular/animations/browser': 'npm:@angular/animations/bundles/animations-browser.umd.js',\n        '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n        '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n        '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n        '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser/animations': 'npm:@angular/platform-browser/bundles/platform-browser-animations.umd.js',\n        '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n        '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n        '@angular/router/upgrade': 'npm:@angular/router/bundles/router-upgrade.umd.js',\n        '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n        '@angular/upgrade': 'npm:@angular/upgrade/bundles/upgrade.umd.js',\n        '@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n\n        // other libraries\n        'rxjs': 'npm:rxjs',\n        'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'\n    },\n    // packages tells the System loader how to load when no filename and/or no extension\n    packages: {\n        app: {\n            defaultExtension: 'js',\n            meta: {\n                './*.js': {\n                    loader: 'systemjs-angular-loader.js'\n                }\n            }\n        },\n        rxjs: {\n            defaultExtension: 'js'\n        }\n   }\n});\n\n})(this);\nIn JiT-Mode the app is loaded without error. In AoT-Mode there is no transpile error any more. But now i'm getting the following error (i think that's why i was loading ngx as a package before):\nUnhandled Promise rejection: (SystemJS) XHR error (404 Not Found) loading http://localhost:26454/node_modules/@ngx-translate/core/bundles/core.umd.js/src/translate.parser\n    Error: XHR error (404 Not Found) loading http://localhost:26454/node_modules/@ngx-translate/core/bundles/core.umd.js/src/translate.parser\n       at wrapFn (http://localhost:26454/node_modules/zone.js/dist/zone.js:1199:17) []\n       at Zone.prototype.runTask (http://localhost:26454/node_modules/zone.js/dist/zone.js:165:21) [ => ]\n       at invoke (http://localhost:26454/node_modules/zone.js/dist/zone.js:460:21) []\n    Error loading http://localhost:26454/node_modules/@ngx-translate/core/bundles/core.umd.js/src/translate.parser as \"@ngx-translate/core/src/translate.parser\" from http://localhost:26454/app/aot/app/modules/app/app.module.ngfactory.js ; Zone:  ; Task: Promise.then ; Value: Error: (SystemJS) XHR error (404 Not Found) loading http://localhost:26454/node_modules/@ngx-translate/core/bundles/core.umd.js/src/translate\n```\n. ",
    "emis44": "The problem is that the file.dataDirectory is null at the moment of the definition of function createTranslateLoader in app.module.ts.\nThe only way i found for this problem is to re-define the loader for translation inside the platform.ready of my app.component.ts and reload the langs\n\nplatform.ready().then(() => {\ntranslate.currentLoader = new TranslateHttpLoader(http, file.dataDirectory+'langs/', '.json');\ntranslate.reloadLang('en');\ntranslate.use('en')\n}\n\nHere the file.dataDirectory is not null. ",
    "ankit0606": "I changed to ng2-translate and that's working fine for me now.\nThanks for the reply. :). ",
    "paulsouche": "Why ?\nAs you don't need a TranslateService to get browser language but a window and a navigator why instanciate it to get the method ? I'm not OK with you to say that would go passed the reason why we have dependency injection. Assume we have 2 instances of the class, this method is the same and does not depend of object state. That is obviously the definition of a static method...\nHow would you mock that in tests for instance ?\nIf getBrowserLang is static, it's only a function after all. You can stub it easily\n```javascript\nimport { TranslateService } from '@ngx-translate/core';\n// jasmine\nspyOn(TranslateService, 'getBrowserLang').and.returnsValue('foo');\n// sinon\nsinon.stub(TranslateService, 'getBrowserLang');\n```\nAnyway this method should not be part of a class but module should export this function as a constant. It's an 'util' function...\n. ",
    "tirnovanuaurel": "Fixed by altering the MissingTranslationHandler.. ",
    "ramuda": "any update on this fix? its failing for angular 5 beta. > I've merged it, new release inc, thanks !\n:+1: . ",
    "alexxxnf": "Any updates on this PR?. @lephyrus I got your point. We'll wait :). ",
    "njulhb": "Hi @lephyrus , I find there is an issue that the strings are not compiled by the compiler when resource files are loaded slowly. I have found the root cause and submit a change in https://github.com/ngx-translate/core/pull/659. Could you please help me review the code change or fix the issue by yourself? \nI really need the fix in ngx-translate. \nBest Regards,\nHaibo. Hi @lephyrus , thank you for your comments. I have closed the PR. So could you please help fix the issue and submit your code change since you're the owner of feature \"TranslateCompiler\"?. Hi @ocombe, could you please help review the fix and give some comments? . Hi @bjorkblom , please merge the fix. ",
    "imfarhadk": "@lephyrus, any timeline to publish the NPM package for TranslateMessageFormatCompiler.\nthanks\nfarhad. ",
    "maximewarnault": "I started over, it works know !\nThank you @trumbitta . ",
    "gautamkrishnar": "I am getting an error only on running ng serve --aot any update on this issue.. ",
    "hegdemahesh": "Used Angular title service. and it worked fine,\ntranslate.get('page_title').subscribe((res: string) => {\n      titleService.setTitle(res);\n    }). ",
    "roger2hk": "The following code will update title on language change event.\njavascript\ntranslate.onLangChange.subscribe((event: LangChangeEvent) => {\n  translate.get('page_title').subscribe((res: string) => {\n    titleService.setTitle(res);\n  });\n});\nThis issue can be closed.. In angular-translate, the official documentation said using directive is better than pipe. I am not sure whether this is true in ngx-translate.\nhttps://angular-translate.github.io/docs/#/guide/05_using-translate-directive. ",
    "ihd2911": "translate.get('page_title').subscribe((res: string) => {\ntitleService.setTitle(res);\n})\nNot working in constructor. Duplicate of #758 . ",
    "tea-mo903": "i have a similar problem.. ",
    "Nasicus": "I would also be interested in this.. ",
    "AndreasBaumgart": "Just for curiosity, what is the reasoning behind enforcing a case-convention at all? And why uppercase in particular? Having so much code screaming at me makes me sort of nervous. . I don't think JSON is case-insensitive. Nor are JS objects. \n```\nJSON.stringify({foo: 1, FOO: 2})\n\n\n\"{\"foo\":1,\"FOO\":2}\"\n```\n\n\nPerhaps I'm missing your point. \nMine is: What's the obstacle of using keys like \"users.userManagementHeadline\"?. Oh damn, just realized I've falled into a caching trap. Sorry, should've checked twice, but this topic lead me into believe that this was actually only working with uppercase letter. \n. ",
    "mattschlitz": "After further examining the ramifications of this change, I think it would take a larger change to make this work so I'm closing the request.. ",
    "haakotsm": "As long as you have a properly formatted json on your backend it is easy enough to do. Write your own translationloader which requests the resource through http. Take a look at how the default one is written. Fairly straight forward. The guide on the front page shows you how to provide a new loader. ",
    "lpalli": "As wokaround it's possible to subscribe to onLangChange in the app.component and modify the DOM via ElementRef.\nMy code:\n```\nimport { Component, ElementRef, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { TranslateService } from '@ngx-translate/core';\n@Component({\n  selector: 'gp-app-root',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n/*\n   * The onLangChange subscription to update the component if the language change.\n   * @type {any}\n   /\n  onLangChange: Subscription = undefined;\n/*\n   * The constructor.\n   * \n   * @param el the current element reference\n   * @param translate the translate service\n   /\n  constructor(public el: ElementRef, public translate: TranslateService) { }\nngOnInit() {\n    this.updateLanguage();\n    this.onLangChange = this.translate.onLangChange.subscribe(() => {\n      this.updateLanguage();\n    });\n  }\nngOnDestroy() {\n    if (this.onLangChange !== undefined) {\n      this.onLangChange.unsubscribe();\n    }\n  }\n/*\n   * Update the language in the lang attribute of the html element.\n   /\n  updateLanguage(): void {\n    const lang = document.createAttribute('lang');\n    lang.value = this.translate.currentLang;\n    this.el.nativeElement.parentElement.parentElement.attributes.setNamedItem(lang);\n  }\n}\n```. ",
    "desfero": "Maybe can be done as a new parameter to the module (what do you think about reflectInHtml). ",
    "yeomann": "+1. friendly reminder: since issue is resolved, this thread should be closed!. ",
    "Roelensdam": "+1. ",
    "bilmiyore": "+1. ",
    "anmoreno": "+1. ",
    "mjoanisse": "+1. ",
    "netsrotr": "+1. ",
    "minawalphonce": "+1\n. ",
    "mtycholaz": "+1. ",
    "ddtch": "+1. ",
    "dimshik100": "+1. ",
    "superCarton": "+1. ",
    "kettunen": "+1. ",
    "RafaelPradoLima": "+1. ",
    "saisaraswathi": "app.component.ts:\nimport { Component } from '@angular/core';\nimport { TranslateService } from 'ng2-translate';\n// import {DashboardComponent} from './dashboard/dashboard.component';\nimport {Subscription } from 'rxjs';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {OnInit, OnDestroy} from '@angular/core';\n@Component({\n    selector: 'pm-app',\n    templateUrl : './app/app.component.html'\n})\nexport class AppComponent { \n   private subscription: Subscription;\nconstructor(private translate: TranslateService, private activatedRoute: ActivatedRoute) {\n        translate.addLangs([\"en\", \"id\"]);\n        translate.setDefaultLang('en');\n    let browserLang = translate.getBrowserLang();\n    translate.use(browserLang.match(/en|id/) ? browserLang : 'en');\n}\n\nchangeLanguage(lang: any){\n    this.translate.use(lang);\n}\n\nngOnInit() {\n// subscribe to router event\nthis.subscription = this.activatedRoute.queryParams.subscribe(\n  (param: any) => {\n    let locale = param['locale'];\n    if (locale !== undefined){\n        this.translate.use(locale);\n    }\n  });\n\n}\nngOnDestroy() {\n    // prevent memory leak by unsubscribing\n    this.subscription.unsubscribe();\n  }\n}\n. can anyone plz help me to resolve this issue?\n. app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule, Http } from '@angular/http';\nimport {RegistrationComponent} from './dashboard/user_registration/user_registration.component';\nimport { AppComponent }  from './app.component';\nimport { routing } from './app.routing';\nimport { TranslateService } from 'ng2-translate';\nimport { TranslateModule, MissingTranslationHandler } from 'ng2-translate';\nimport {DashboardComponent} from './dashboard/dashboard.component';\nimport {DeviceComponent} from './dashboard/device/device.component';\nimport {ResetDeviceComponent} from './dashboard/device/resetDevice/ResetDevice.component';\nimport {LoginComponent} from './login/login.component';\nimport { AuthenticationService} from './services/authentication.service';\nimport { DeviceService } from './services/device.service';\nimport { AlertService } from './services/alert.service';\nimport { MyMissingTranslationHandler } from './missingtemplate.component';\n@NgModule({\n  imports: [ BrowserModule, \n             FormsModule,\n             HttpModule,\n             routing,\n                TranslateModule.forRoot()\n             ],\n  declarations: [ AppComponent ,\n                  LoginComponent,\n                  DashboardComponent,\n                  DeviceComponent,RegistrationComponent,\n                  ResetDeviceComponent],\n  providers: [ AuthenticationService,\n               DeviceService,\n               AlertService,{ provide: MissingTranslationHandler, useClass: MyMissingTranslationHandler}\n              ],\n  exports: [\n        TranslateModule\n    ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\nI imported translate module, can u plz check now?. i am behind corporate proxy unable to upload into github and angular2 files are many so not in plunker. Is there any other to reproduce the code?. i upgraded to ngx-translate. i did exactly what they did in plunker example, still it is saying \"The pipe 'translate' could not be found \". ",
    "phattranky": "I got this problem before, Then i try to import TranslateModule in children module. It's working. ",
    "vixeven": "in my case I have a submodule. I added TranslateModule in my imports and it works.\nThanks @phattranky \ud83d\udc4d . ",
    "rajjaiswalsaumya": "Can someone post full code, i am getting same error . ",
    "bigsnowdrop": "i solved this problem and\nadded \"TranslateModule\" to exports\nand now it works\nmy code:\n`import { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { Select2Module } from 'ng2-select2';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { AppTranslationService, TranslateLanguageLoader } from './services';\n@NgModule({\n    declarations: [],\n    imports: [\n        Select2Module,\n        HttpClientModule,\n        TranslateModule.forRoot({loader: { provide: TranslateLoader, useClass: TranslateLanguageLoader} })\n    ],\n    exports: [TranslateModule],\n    providers: [AppTranslationService]\n})\nexport class SharedModule {}`. ",
    "bigbharatjain": "app.module.ts\n```\n.....\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpModule,\n        NgbModule.forRoot(),\n        CoreModule,\n        AppRoutingModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        SharedModule,\n        HttpClientModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: createTranslateLoader,\n                deps: [HttpClient]\n            }\n        })\n    ],\nproviders: [\n    {provide: BrowserXhr, useClass: BrowserCredentials},\n    {provide: RequestOptions, useClass: GlobalHttpOptions},\n    Title\n],\nbootstrap: [AppComponent],\nexports: []\n\n})\n**app.component.ts**\nimport {Component, OnInit} from '@angular/core';\nimport {Title} from '@angular/platform-browser';\nimport {ConfigurationService} from './shared/services/configuration.service';\nimport { TranslateService } from '@ngx-translate/core';\n@Component({\n    selector: 'cc-root',\n    template: <cc-authentication-loader></cc-authentication-loader>\n        <router-outlet></router-outlet>,\n    styles: []\n})\nexport class AppComponent implements OnInit {\n    constructor(private title: Title, translate: TranslateService) {\n        translate.setDefaultLang('en');\n    }\nngOnInit(): void {\n    this.title.setTitle('Carcare');\n}\n\n}\n``\nIn other component, when I add{{\"Welcome\"|translate}}It gives me the errorThe pipe 'translate' could not be found`\nI am using angular 5. \nPlease help what I am missing ?. Yes I have imported in \nshared.module.ts\n```\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DateDiffPipe} from './pipes/date-diff.pipe';\nimport {BASE_PATH} from '../../api/variables';\nimport {SHARED_APIS} from '../../api/api/api';\nimport {environment} from '../../environments/environment';\nimport {DateReadable} from './pipes/date-readable.pipe';\nimport {IsGrantedDirective} from './directives/is-granted.directive';\nimport {DateCarcareFormat} from './adapters/date-carcare.adapter';\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material';\nimport {MomentDateAdapter} from '@angular/material-moment-adapter';\nimport {ConfigurationService} from './services/configuration.service';\nimport { TranslateModule } from '@ngx-translate/core';\n@NgModule({\n    imports: [\n        CommonModule,\n        TranslateModule\n    ],\n    declarations: [\n        DateDiffPipe,\n        DateReadable,\n        IsGrantedDirective\n    ],\n    providers: [\n        ConfigurationService,\n        SHARED_APIS,\n        {provide: BASE_PATH, useValue: environment.apiUrl},\n        {provide: DateAdapter, useClass: MomentDateAdapter},\n        {provide: MAT_DATE_FORMATS, useValue: DateCarcareFormat},\n        {provide: MAT_DATE_LOCALE, useValue: 'sv-SE'}\n    ],\n    exports: [\n        DateDiffPipe,\n        DateReadable,\n        IsGrantedDirective,\n        TranslateModule\n    ]\n})\nexport class SharedModule {\n}\n``\nand also tried by importing in feature module like thisimport { TranslateModule } from '@ngx-translate/core';. @SamVerschueren Can you please look, what I am missing here?\n. Thanks @SamVerschueren .\nI am having Shared module in my feature module as well and that shared module imports SharedModule.\nI don't know why it didn't work if I import TranslateModule in outer SharedModule instead of my feature module SharedModule as I am importing it in it.\nIt worked when I have imported in my feature module's SharedModule.\n. @jlberrocal  Yes, importingTranslateModule` to FeatureModule fixed the issue.. ",
    "webeagle199066": "\u041f\u0440\u0438\u0432\u0435\u0442\n\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438 TranslateModule \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435, \u0433\u0434\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0448\u044c | translate\ndashboard.module.ts\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild([{\n            path: '',\n            component: DashboardComponent\n        }]),\n        TranslateModule\n    ],\n    declarations: [\n        DashboardComponent\n    ],\n    providers: [\n        {provide: MODULE_CONFIG, useValue: moduleConfig}\n    ]\n})\ndashboard.component.html\n{{ 'dashboard.workStart.text' | translate }}\n\u0418 \u043d\u0438 \u043a\u0430\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a =). ",
    "HonzoBonzo": "Had the same issue, as described above. Couldn't find pipe translate... It happens with the newest versions:     \n\"@ngx-translate/core\": \"^10.0.0\",\n\"@ngx-translate/http-loader\": \"^3.0.1\",\nDowngrading to:\n\"@ngx-translate/core\": \"^9.1.1\",\n\"@ngx-translate/http-loader\": \"^2.0.1\",\nsolved this problem.\nAppModule:\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\nimports: [    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      }\n    })]\n...\ngood luck. ",
    "ishwaryanair": "i did downgrading to:\n\"@ngx-translate/core\": \"^9.1.1\",\n\"@ngx-translate/http-loader\": \"^2.0.1\",\nand import into TranslateModule into submodule is also done. Still i dont see translated text shown. . I got it working by using {{translate.instant('my text')}} but direct translate directive within html tag dint work for me. . ",
    "sagrawal31": "I'm using\n\nIonic 3.20.0\nAngular 5.2.10\n@ngx-translate/core 9.1.1 and\n@ngx-translate/http-loader 2.0.1\n\nIn the app.module.ts\n```ts\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    declarations: [\n        KidsApp\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        SignUpPageModule,\n        LoginPageModule,\n        IonicModule.forRoot(MyApp),\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [HttpClient]\n            }\n        })\n    ]\n})\n```\nBut when I'm using {{'HELLO' | translate }} in one of the view added in the SignUpPageModule, it fails with:\nshell\nUncaught Error: Template parse errors:\nThe pipe 'translate' could not be found (\"c this app with your active subscription, please enter the details of the bill payer.\n            {{[ERROR ->]'HELLO' | translate}}\n        </div>\nI tried killing the ionic process as well but this error still persist. I also went through issue #163 but nothing helped.\nWhen I'm temporarly removing the line {{'HELLO' | translate }}, I end up with the following error:\njavascript\nion-dev.js?v=3.1.9:156 ERROR Error: Uncaught (in promise): TypeError: Cannot read property 'length' of undefined\nTypeError: Cannot read property 'length' of undefined\n    at HttpHeaders.applyUpdate (http.js:322)\n    at http.js:269\n    at Array.forEach (<anonymous>)\n    at HttpHeaders.init (http.js:269)\n    at HttpHeaders.forEach (http.js:368)\n    at Observable._subscribe (http.js:2170)\n    at Observable._trySubscribe (Observable.js:172)\n    at Observable.subscribe (Observable.js:160)\n    at Object.subscribeToResult (subscribeToResult.js:23)\n    at MergeMapSubscriber._innerSub (mergeMap.js:132)\n    at HttpHeaders.applyUpdate (http.js:322)\n    at http.js:269\n    at Array.forEach (<anonymous>)\n    at HttpHeaders.init (http.js:269)\n    at HttpHeaders.forEach (http.js:368)\n    at Observable._subscribe (http.js:2170)\n    at Observable._trySubscribe (Observable.js:172)\n    at Observable.subscribe (Observable.js:160)\n    at Object.subscribeToResult (subscribeToResult.js:23)\n    at MergeMapSubscriber._innerSub (mergeMap.js:132)\n    at c (polyfills.js:3)\n    at polyfills.js:3\n    at t.invokeTask (polyfills.js:3)\n    at Object.onInvokeTask (core.js:4751)\n    at t.invokeTask (polyfills.js:3)\n    at r.runTask (polyfills.js:3)\n    at o (polyfills.js:3)\nWhen I remove the following lines from app.component.ts:\nts\nthis.translateService.setDefaultLang('en');\nthis.translateService.use('en');\nat least the above error removed but the translate pipe error is still there.. ",
    "tiberiumihai": "I've found what happend.\nI had a SharedModule that imported and exported the TranslateModule.\nThen I had this SharedModule imported in AppModule, and in other modules like ComponentsModule, PageModule etc.\nI've fixed this by importing and exporting TranslateModule in SharedModule.\nThen imported this SharedModule only in other modules like ComponentsModule, PagesModule etc.\nAnd I've removed it from AppModule.\nNow everything works fine. Good luck.\napp.module.ts\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  imports: [\n  ...\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [ HttpClient ]\n      }\n    }),\n    // SharedModule <<<<<< REMOVE THIS FROM APP MODULE AND IMPORT IT IN EACH SUB MODULE\n    ComponentsModule,\n    PagesModule\n    ...\n})\nexport class AppModule { }\nshared.module.ts\n@NgModule({\n  imports: [\n     ....\n    TranslateModule\n    ....\n  ],\n  exports: [\n    TranslateModule\n  ]\n})\nexport class SharedModule { }\npages.module.ts\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    SharedModule,\n    ...\n  ]\n})\nexport class PagesModule { }\ncomponents.module.ts\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    SharedModule,\n    ...\n  ]\n})\nexport class ComponentsModule { }\nGOOD LUCK!. @erperejildo Than your SharedModule will look something like this, adding your providers in forRoot().providers array:\nshared.module.ts\n```\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule } from '@angular/forms';\nimport { MyProviderService } from \"./services/my-provider.service.ts\";\n@NgModule({\n  imports: [\n    TranslateModule,\n    FormsModule\n  ],\n  exports: [\n    TranslateModule,\n    FormsModule\n  ]\n})\nexport class SharedModule {\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SharedModule,\n      providers: [\n        MyProviderService\n      ]\n    }\n  }\n}\n```\nAnd use:\nSharedModule.forRoot()\ninstead of \nSharedModule\nin your sub modules import array.. ",
    "BruneXX": "Hey guys I've followed the documentation instructions but using translate in other component than app.component is causing this error, the only solution is to make a downgrade? thanks. FYI: I've found a solution to this, take a look at this: https://github.com/ngx-translate/core/issues/566#issuecomment-323280513. @erperejildo No, we don't, the proper way indeed is to have a shared module as you mentioned. Currently I've managed to use this translate in template and controller and works really well!. Hi @erperejildo That's the way angular works, take a look at this: https://angular.io/guide/sharing-ngmodules\nAFAIK: You must add your SharedModule in the modules that you need to use \"translate\" or \"any\" other module/component.\nLike @tiberiumihai show in his comment https://github.com/ngx-translate/core/issues/566#issuecomment-414062997. ",
    "indianazhao": "I solved this issue by exporting 'TranslatePipe' in the ShareModule.\n```typescript\n// AoT requires an exported function for factories\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, '../assets/i18n/', '.json');\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  declarations: [],\n  exports: [\n    FormsModule,\n    TranslateModule,\n    TranslatePipe, // <-- Export the pipe\n  ]\n})\nexport class ShareModule {\nconstructor(private translate: TranslateService) {\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('zh-tw');\n// the lang to use, if the lang isn't available, it will use the current loader to get them\ntranslate.use('zh-tw');\n\n}\n}\n```. ",
    "cjkumaresh": "This is a valid scenario. Is this possible any other way ?. ",
    "jarodsmk": "Hey @cjkumaresh  - what I managed to achieve in the mean time is recursively translating all the required parameters prior to rendering the final string . So there's no other way to do this then?. @CodeAndWeb  ok cool thanks man, was just wanting to know why :P does make sense though. Similar issue to: https://github.com/ngx-translate/core/issues/199 ?\nEDIT:\nTake a look at the aforementioned issue, @BorisWechselberger has a reasonable solution posted at the bottom of the discussion.. The only solution I can think of at this point is to split the translation strings in your view and use interpolation on your variable between the two, or -\nHide and show the containing component of your single translation string if the values change in some way :/. ",
    "dhilt": "Some times ago (2 months?) I played with that demo and that was ok.... ",
    "gelevanog": "It seems it doesn't work again. ",
    "kolkov": "@gelevanog Slightly adjusted the plunker. https://plnkr.co/edit/O6EYGMBBF2zp2mOOKjBG?p=preview\n. Slightly adjusted the plunker. Perhaps a lot of excess is left, please check.\nhttps://plnkr.co/edit/O6EYGMBBF2zp2mOOKjBG?p=preview. Hi! Will there be support for the translation of libraries in the Angular i18n? Or until it is implemented? And thank you for your work!. ",
    "tibistibi": "i came across the same problem, is it back again?. have the same error, it breaks the page and nothing is translated. on my page it happens sometimes, i guess when it loads to fast or not fast enough. although i have a check that the object is present.. thanks, that will work but i rather stupid.... why is this issue not take care of :disappointed: . ",
    "Emilieczq": "@CodeAndWeb I have the same problem. Could you re-open it ?. ",
    "Writtscher": "Same here:\nJhiTranslateComponent.html:1 ERROR SyntaxError: Wrong parameter in TranslatePipe. Expected a valid Object, received: {name: 'Test [TEXT][XXX:ZZZ]'}\n    at TranslatePipe.transform (translate.pipe.js?ebce:53). ",
    "stephanegg": "Same error with \":\" char. @CodeAndWeb could you please re open the issue? I am using Angular 6.0.9\n and ngx-translate/core 10.0.2. Thank you @peterpeterparker ! Same as @freezy, typescript error with path and process. Could you share with us your config? Cheers. I would say all your config, ie package.json, tsconfig.json, tsconfig.app.json, tsconfig.server.json and webpack.config.js to be sure to spot the difference. Or if it's easier for you, a repo with universal ngx translate working. I am sure, it will help a lot of people.\nThanks again @peterpeterparker . Thank you ! It's working fine now however I had to change TranslateModule.forChild({...}) to TranslateModule.forRoot({...}) in app.browser.module.ts to solve a NullInjectorError: No provider for TranslateStore! issue. \nThis issue should get the FAQ label. Cheers \n. ",
    "MartinWeb": "Had the same problem and i found a workaround until the issue is fixed.\nReplacing the \":\" character that creates the issue with his ASCII representation &#58;\nSo here's the small code that make me able to use the : character\n.replace(\"\\:\",\"&#58;\"). ",
    "webcrack4": "Yeah, I got the same problem.. Good Idea.. ",
    "swftvsn": "I ended up doing it like this:\n```typescript\nimport { Pipe, Injectable, Inject, ChangeDetectorRef } from '@angular/core'\nimport { Http } from '@angular/http'\nimport { TranslatePipe } from '@ngx-translate/core'\nimport { TranslateService, TranslateDefaultParser, MissingTranslationHandler, MissingTranslationHandlerParams } from '@ngx-translate/core'\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\n@Injectable()\n@Pipe({\n    name: 'translatecustom',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslateCustomPipe extends TranslatePipe {\n    constructor(@Inject('customTranslator') private customTranslator: CustomTranslationService, private _theRef: ChangeDetectorRef) {\n        super(customTranslator, _theRef)\n    }\n}\n@Injectable()\nexport class CustomTranslationService extends TranslateService {\n  constructor(http: Http) {\n    super(null, new TranslateHttpLoader(http, '/assets/i18n/custom.', '.json'), new TranslateDefaultParser(), new MyMissingTranslationHandler(), true)\n  }\n}\nexport class MyMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams) {\n    let key = params ? params.key : 'no key!'\n    if (console) {\n      console.log('Custom translation missing for ' + key)\n    }\n    return 'Custom translation missing for ' + key\n  }\n}\n```\nNotice the /assets/i18n/custom. part, that configures the loader to read from /assets/i18n/custom.en.json for an example.\nAnd in your app module:\ntypescript\n@NgModule({\n  declarations: [\n    ...,\n    TranslateCustomPipe\n  ],\n  providers: [\n    CustomTranslationService,\n    { provide: 'customTranslator', useExisting: CustomTranslationService }\n  ]\n})\n...\nAfter this you can {{ 'translationkey' | translatecustom }} in your component, and inject CustomTranslationService to your components to use different language etc.\nNote that you need to adapt this solution if you use different loader + the usual ymmv and code is provided as is and may contain bugs etc.\nIt would be EXTREMELY nice to see proper support for multiple TranslationServices and the option to specify which one is used in pipe / directive etc. Think of named services, where the current is default and used if nothing is specified.\nThe solution given here may break in future releases.. ",
    "momegas": "Nice. Works as intended. ",
    "iturn": "+1. Solved - My issue was using a fake backend that intercepted all http calls, therefore the en.json wasnt loading.. It wasnt the issue of ngx, it was interference from another package. ",
    "zwiepsel": "I think you need to inject the origin url to create absolute path\nexport function createTranslateLoader(http: Http, @Inject('ORIGIN_URL') originUrl: string) {\nreturn new TranslateHttpLoader(http, originUrl + './assets/i18n/', '.json');\n}. ",
    "UrielMhezzek": "Can you post your fake backend? I have the same issue.. ",
    "shamoh19": "@iturn @zwiepsel  can you elaborate your answer with some code? facing same problem. ",
    "zim-lee": "I have the same problem,but it worked when i imported the TranslateModule twice. \napp.module.ts:\n```javascript\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nexport function TranslateLoaderFactory(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [\n    MyApp,\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    IonicModule.forRoot(MyApp),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (TranslateLoaderFactory),\n        deps: [ Http ]\n      }\n    })\n  ],\n  .....\n})\nexport class AppModule {}\n`app.component.ts:`javascript\nconstructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen, private translate: TranslateService) {  \n    this.translate.setDefaultLang('ko');\n    this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n      console.log(\"onLangChange\", event.translations)\n    })\n    this.translate.onDefaultLangChange.subscribe((event: LangChangeEvent) => {\n      console.log(\"onDefaultLangChange\", event.translations)\n    })\n  }\n`shared.module.ts:`javascript\nimport { NgModule } from '@angular/core';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { Http } from '@angular/http';\nimport {TranslateService} from '@ngx-translate/core';\nexport function TranslateLoaderFactory(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  imports: [\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (TranslateLoaderFactory),\n        deps: [ Http ]\n      }\n    })\n  ],\n  exports: [\n    TranslateModule\n  ],\n})\nexport class SharedModule {\n}\n`home.module.ts:`javascript\n@NgModule({\n  declarations: [\n    HomePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(HomePage),\n    SharedModule\n  ],\n  exports: [\n    HomePage\n  ]\n})\nexport class HomeModule {}\n`home.ts:`javascript\nexport class HomePage {\n  currentLang: string;\n  constructor(public navCtrl: NavController, private translate: TranslateService) {  \n    this.currentLang = this.translate.getDefaultLang()\n    console.log(this.currentLang)\n  }\nchooseLang(e) {\n    this.translate.use(this.currentLang)\n  }\n}\n```\ngot any better idea?. ",
    "chrisvanderkooi": "@zim-lee This solve the issue, thanks so much.\nHowever - a few things:\n\n\nOnly the page that is changing the language needs to have the second loader in it:\n(TranslateModule.forChild({...}). All other pages just need TranslateModule.forChild()\n\n\nInstead of having 2 TranslateLoaderFactory... you can just import the factory from your app.module.ts\n\n\nSo in the settings.ts page where I have the control to change the language I have this:\n```\n...\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {createTranslateLoader} from \"../../app/app.module\";\nimport {Http} from \"@angular/http\";\n@NgModule({\n  declarations: [...],\n  imports: [\n    IonicPageModule.forChild(SettingsPage),\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [Http]\n      }\n    })\n  ],\n  exports: [...]\n})\n```\nand then of course the default set up stuff in the app.module and app.component files. (Link to Ionic ngx-translate setup guide). ",
    "leovafme": "```\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { LoginPage } from './login';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport {HttpClientModule, HttpClient} from '@angular/common/http';\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [\n    LoginPage,\n  ],\n  imports: [\n    HttpClientModule,\n    IonicPageModule.forChild(LoginPage),\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    }),\n    // TranslateModule.forChild(),\n  ],\n})\nexport class LoginPageModule {}\n```\n\nRuntime Error\nUncaught (in promise): Error: No provider for InjectionToken DocumentToken! Error: No provider for InjectionToken DocumentToken! at injectionError (http://localhost:8100/build/vendor.js:1590:86) at noProviderError . ",
    "samuelgjabel": "Or for my app is better solution\nCreate translation provider -> there create translationUse(), translationGet() functions... etc.. \nAnd call translation providers when you need it. ",
    "Beni90": "Hi, any answer to this request? I face the same problem:\ntranslate.setDefaultLang('en');\ntranslate.use('en');  // in my eyes useless line but found this as a solution in another thread.\nlet browserLang = translate.getBrowserLang();\ntranslate.use(browserLang);\nbasically I want to read the browsers language and use this language for my translations (this works smoothly!) but as I live in Switzerland a lot of Browsers are set co DE-CH which is not supported by my translation files so the translations will obviously fail. For this I want to set a Fallback language (de or en whatever) which translates all the missing keys.\nthanks for your help. ",
    "BamiGorengo": "Gotnalso the Same Problem. Anyway News Here?. For everyone who have the same problem:\nprivate async getDefaultList(): Promise<any> {\n    return {\n        revenues: [\n            {\n                title: await this.translate.get('defaults.salary_you').toPromise(),\n                sum: '0'\n            }\n        ]\n    };\n}\nThis solves my problem.. ",
    "all43": "I also faced same issue. In my case there was an extra comma in en.json file, which made it invalid. It's always better to clone working example and compare if there error or not. Fallback worked perfectly in example, so I examined my code and found a typo.. Same for all custom elements, don't know is it ngx-translate or angular issue. I'm using translate pipe instead.. ",
    "lalo-mx": "I am facing the same issue. For now i am using the @Beni90 workarund but both languages are not always loaded. Any news in a fix?\n```\n //es.json\n {\n }\n //en.json\n {\n    \"tag-example\": \"Example\"\n }\n\n //Working example\n this.translate.setDefaultLang('en');\n this.translateLoad = forkJoin(\n    this.translate.use('en'),\n    this.translate.use('es')\n  );\n\n   this.translateLoad.subscribe(() => {\n       this.translate.get('tag-example').subscribe( tag =>   console.log(tag));\n   });\n\n //Not working example\n this.translate.setDefaultLang('en');\n this.translate.use('en');\n this.translate.use('es');\n this.translate.get('tag-example').subscribe( tag =>   console.log(tag));\n //Sometimes the result is \"tag-example\" and others \"Example\"\n\n```. ",
    "leNicDev": "Same problem here. I'm even getting this error without specifying a TranslateModuleConfig.\nAngular: 4.2.3\nAngular-CLI: 1.1.3\nMy tsconfig-aot.json:\n```\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"\",\n    \"declaration\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"mapRoot\": \"./\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"../dist/out-tsc\",\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"../node_modules/@types\"\n    ],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n\"files\": [\n    \"app/app.module.ts\",\n    \"main.ts\"\n  ],\n\"angularCompilerOptions\": {\n    \"genDir\": \"aot\",\n    \"skipMetadataEmit\": true\n  }\n}\n```\nThis is how I'm importing the TranslateModule:\n```\nimports: [\n        TranslateModule.forRoot({\n          loader: {\n            provide: TranslateLoader,\n            useFactory: httpLoaderFactory,\n            deps: [Http]\n          }\n        })\n]\nexport function httpLoaderFactory(http: Http) {\n  return new TranslateHttpLoader(http, environment.urls.i18n + '/', '.json');\n}\n```. @KarolBuchta I'm still stuck here too.. ",
    "wcorderolara": "@ocombe,do you have any idea how resolve this issue?, I got this error when was using ng2-translate and for that reason I switched to ngx-translate, but when try to build  or execute my project appears this error, if I delete the lambda function, all works fine, but don't recognize me the location for the \"i18n\" directory and just appears the wildcards. I'm working with Angular 4.3\nError\n\nTemplate without lambda function\n\n. ",
    "broweratcognitecdotcom": "Angular 6.1.4\n@ngx-translate/core 10.0.2\nrxjs 6.2.2\nFunction calls are not supported in decorators but 'TranslateModule' was called. Please reopen this. . This seems like an unfortunate workaround.. I'm not using ng-packagr. I am still getting this error. Please reopen as ng-packagr is probably not the problem. I'm using \"@ngx-translate/core\": \"10.0.2\". I am calling forChild() since this is a lib. I began getting this error upon attempting to upgrade from angular 5 to Angular 6.. ",
    "heihenri": "I'm also trying to achieve something similar, any suggestions?. ",
    "jonathanantoine": "Hello,\nMaybe this will help you. I have a collection of \"TrackerType\" in availableTypes which are integer (0, 1, etc.) and I use the translate attribute which will get the translation which match the content as a key. \n<div *ngFor=\"let type of availableTypes\" [value]=\"type\" translate>TrackerType_{{type}}</div>\nWith this translation files :\n{\n  \"TrackerType_0\": \"Une valeur\"\n  \"TrackerType_1\": \"Deux valeurs\"\n}\n. Maybe using the dot notation works ? Did you try it ?. ",
    "IsDragon": "what if i have multiple object inside an object\n```\n{\n  \"TrackerType_0\": \"Une valeur\",\n  \"TrackerType_1\": \"Deux valeurs\",\n    \"Test1\":{\n          \"TrackerType_0\": \"Une valeur\"\n           \"TrackerType_1\": \"Deux valeurs\"\n     },\n    \"Test2\":{\n          \"TrackerType_0\": \"Une valeur\"\n           \"TrackerType_1\": \"Deux valeurs\"\n     }\n}````\n@jonathanantoine  . ",
    "dnsbbu": "its not fixed. > I made it work with this\n\n<div *ngFor=\"let service of ('service' | translate)\">\n   <span><img  [src]=\"service.imgPath\" alt=\"{{ service.name }}\"/></span>\n  <h4>{{ service.name}}</h4>\n  <p>{{ service.desc }}</p>\n</div>\n\nNot working,\nERROR Error: Cannot find a differ supporting object 'service' of type 'string'. NgFor only supports binding to Iterables such as Arrays.. ",
    "megustalafantabienfria": "I made it work with this\n<div *ngFor=\"let service of ('service' | translate)\">\n   <span><img  [src]=\"service.imgPath\" alt=\"{{ service.name }}\"/></span>\n  <h4>{{ service.name}}</h4>\n  <p>{{ service.desc }}</p>\n</div>. > \n\nNot working,\nERROR Error: Cannot find a differ supporting object 'service' of type 'string'. NgFor only supports binding to Iterables such as Arrays.\n\nThat's weird... because that's how my project is working.\nI'm using it like this\n<div *ngFor=\"let service of ('service' | translate)\">\n    <p>{{service.name}}</p>\n    <p>{{service.desc}}</p>\n</div>\nThe json is structured like this\n{\n  \"service\": [\n    { \"name\" : \"someName1\", \"desc\" : \"someDesc1\"},\n    { \"name\" : \"someName2\", \"desc\" : \"someDesc2\"},\n    { \"name\" : \"someName3\", \"desc\" : \"someDesc3\"}\n  ]\n}. ",
    "cesargomezh": "\n\nNot working,\nERROR Error: Cannot find a differ supporting object 'service' of type 'string'. NgFor only supports binding to Iterables such as Arrays.\n\nThat's weird... because that's how my project is working.\nI'm using it like this\n<div *ngFor=\"let service of ('service' | translate)\">\n  <p>{{service.name}}</p>\n  <p>{{service.desc}}</p>\n</div>\nThe json is structured like this\n{\n  \"service\": [\n    { \"name\" : \"someName1\", \"desc\" : \"someDesc1\"},\n    { \"name\" : \"someName2\", \"desc\" : \"someDesc2\"},\n    { \"name\" : \"someName3\", \"desc\" : \"someDesc3\"}\n  ]\n}\n\nNice hack bro, thank you. You saved my azz.. ",
    "kumaresan-subramani": "i am also having the same problem any solution available?\nhttps://github.com/ngx-translate/core/issues/1011. i am also having the same problem any solution available?\nhttps://github.com/ngx-translate/core/issues/1011. Hi \nAny update on this?\n. Hello,\nis there anybody working on this organization????. ",
    "SergiusSidorov": "Hi! I have the same issue. I prepared an example for reproduce: git@github.com:SergiusSidorov/cli-universal-demo.git. I fixed the issue. The issue was in the build configuration. @ngx-translate module should be transpilled. Can be resolved by specifying @ngx-translate in webpack.config.js.\nMore details in repo: https://github.com/SergiusSidorov/cli-universal-demo. I think, the mistake in build script. You are use \n\"prebuild\": \"ng build --prod --no-sourcemap && ngc && webpack\",\n\"build\": \"ts-node src/server.ts\"\nbut should be\n\"prestart\": \"ng build --prod && gulp before:ngc && ngc && gulp after:ngc && webpack\",\n\"start\": \"node dist/server.js\"\nYou should use the compiled version of the server script.\nThen execute\nnpm run start\n. ",
    "arlamaeen": "@KlaudiaMor how did your application go? do you have fix for this?\n@premiumwd I tried yours but I still have the same error everytime I put something inside the TranslateModule.forRoot(). ",
    "vanaio": "I have the same problem, ejected the webpack config using the CLI and added this: \n\nexternals : [ nodeExternals({\n    whitelist : [\n      /^@ngx-translate\\/core/,\n      /^@ngx-translate\\/http-loader/,\n    ]\n  }) ],\n\nthen running: \n\n\"prestart\": \"npm run build --aot --env=prod --output-hashing && ngc\",\n    \"start\": \"ts-node src/server.ts\"\n\nStill get the original error: \n\n(function (exports, require, module, __filename, __dirname) { import { Pipe, Injectable, ChangeDetectorRef } from '@angular/core';\nSyntaxError: Unexpected token import\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n    at Module._compile (module.js:533:28)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:503:32)\n    at tryModuleLoad (module.js:466:12)\n    at Function.Module._load (module.js:458:3)\n    at Module.require (module.js:513:17)\n    at require (internal/module.js:11:18)\n\n. ",
    "polcham": "Hi @AnthonyNahas, thanks for your work. I am just wondering if by any chance you have any idea on the following AoT Error. The problem is different with unexpected token, but you may have any idea on this matter, since you generally solved the unexpected token import. Appreciate the lead, been trying to solve this for days with no progress.\n\n. @AnthonyNahas I'm using Ionic 3, and calling ionic cordova build android --prod. I opened an issue on it here: https://github.com/ngx-translate/core/issues/666. Thanks so much!. I am able to fix this by setting all the other module imports to TranslateModule.forChild(). The forChild() function should be empty. You shouldn't also use forRoot().. ",
    "BlankHrt": "Hi, I met the same problem when using universal with @ngrx\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n^^^^^^\nSyntaxError: Unexpected token import\n\n. ",
    "qubiack": "@AnthonyNahas  I think you wait on our feedback, so for me your solution work perfectly. Thank you! I had another error but it was connected with wrong json import.. @AnthonyNahas  - can you look help us also with localize-router? I think that it's the same problem. Maybe you can give me a tips how I can manage with this problem?\n/home/xxx/Projects/private/angular4-cli-seed/node_modules/localize-router/src/localize-router.config.js:1\n(function (exports, require, module, __filename, __dirname) { import { Inject, OpaqueToken } from '@angular/core';\n. I have exactly the same error. \nIt's appear when I add Translate.Module.forRoot() in my app.module.ts. ",
    "cherryland": "You should always pass plain objects as your parameter. Checking deeply nested objects for possible changes is not only out of scope of this package, but time-consuming and expensive.\nYou can pass a pointer to the property\njs\n@Input() hero: { friends: [], name: string, foo: { bar: boolean } };\nhtml\n{{\"hello\" | translate:hero.foo.bar}}\nThe equals utility function fails if the first value in an nested object passes the test.\n. ",
    "sergiomilici": "is this a bug or the expected behaviour? Will this change in a future?. ",
    "mouhamadhassan": "hello, i have same issue, nothing is translated. only key of the words are returned and not the translation...\nany idea?. ",
    "DigitalMystery": "Same thing here except I attempted with the translate.get in the component.ts.  I also only ever get the key even if I do not nest.  I do get the correct file if I change between them though @SamVerschueren \ntranslate.get(\"MENU.HOME\").subscribe((home: string) => {\n     //home ends up being MENU.HOME\n});\nionic angular 2.2.0\nngx-translate/core\": \"^7.1.0\"\nngx-translate/http-loader\": \"^0.1.0\". Ok... after watching the debug with the console I saw that my file just had not been loaded before the call to translate.get.  So I wrapped the translate.get with translate.use.  I suppose this is probably only an issue with the first page, but now wondering do I need to wrap everything going forward.\ntranslate.use(\"en\").subscribe((res: any) => {\n     translate.get(\"MENU.HOME\").subscribe((home: string) => {\n          //loads file and is correct now with different languages.\n     });\n});. ",
    "carauzs": "Anyone having this problem, make sure to set the default language:\nconstructor(translate: TranslateService) {\n     translate.setDefaultLang('en');\n}. ",
    "kasienna": "Just tried it, but nothing changed. Thanks anyway!\nOn Wed, Jul 5, 2017 at 5:01 PM, Stef Heyenrath notifications@github.com\nwrote:\n\nI'm not 100% sure (I'm also new in using this project), but do you maybe\nalso need to add the TranslateModule to the providers list ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/590#issuecomment-313129730,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AO2f95bprmN9u7S33VwClm-vx1YjcPcrks5sK6U9gaJpZM4OOavW\n.\n. I solved it. The thing was that my component has been linked through routing and not selector. In that case, you are supposed to provide TranslateModule in the routing module.\n\n```\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { TranslateModule, TranslateService, TranslatePipe, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nconst routes: Routes = [\n{ \n  path: 'auth',\n  component: AuthComponent,\n  children: [\n    { path: 'signin', component: LoginComponent },\n    { path: 'signup', component: RegisterComponent }\n  ]\n}];\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [RouterModule.forChild(routes), RouterModule.forRoot(routes), TranslateModule],\n  exports: [TranslatePipe],\n  providers: [TranslateModule]\n})\nexport class AuthRoutingModule { }\n```. ",
    "malhardeshpande12": "The error that I receive, when I run the plunkr demo link in IE11, is of \"Object doesn't support property or method 'assign'\". This doesn't necessarily point to broken module, but instead, this is an issue of polyfills. Object.assign is part of ES6 and hence, is not supported on IE11.\nThe error will go away, after adding the pollyfill for Object.assign from the MDN wiki.. ",
    "lemoinem": "The workaround I found was to use the two pipes separately. I've not been able to integrate and streamline the two pipes as one.. I'm a bit worried about internal state and clean up...\nThe translate Pipe is storing loads of data (last key, last value). If it's used as a bare service, wouldn't this trigger many useless Detection Change cycles?\nEven when registered at the component level?\nI'm thinking there are still points I don't understand regarding Pipes and DI.... I'm going to close this issue. I have gained a better understanding of how Pipes are managed in Angular2+. For my use case (implicitly calling the TranslatePipe from another Pipe), I arrived at the conclusion that the best solution would be to:\n\nInject the TranslatePipe's dependencies in my own pipe\nInstantiate a new instance of the TranslatePipe in my own pipe's transform\nDestroy the TranslatePipe's instance in my own pipe's onDestroy\n\nNote: Of course, my custom pipe needs to be impure since the TranslatePipe is.\nThe issue being that if the TranslatePipe's dependencies change, I will have to update my custom pipe as well.\nThis issue is not easily solved and would basically required Angular2+ to manage dependencies between pipes themselves.\nI haven't open a feature request for this (nor have I looked if one already existed) as this isn't something that is major problem for me now.\nCreating a normal provider for the TranslatePipe will not work and might have horrible performance implications for your app along, with some translations not changing when the language is changed.\nI still think in the meantime the Pipe should not be marked as Injectable anymore and we should stop advising to inject it in Services or other Pipes.. ",
    "samoilenko": "I've created my own provider for the TranslatePipe\n```ts\nimport { ChangeDetectorRef } from '@angular/core';\nimport { TranslateModule, TranslateLoader, TranslateService, TranslatePipe } from \"@ngx-translate/core\";\nexport let translatePipeProvider = {\n    provide: TranslatePipe,\n        useFactory: (translateService: TranslateService, changeDetectorRef: ChangeDetectorRef) => {\n        return new TranslatePipe(translateService, changeDetectorRef)\n    },\n    deps: [TranslateService, ChangeDetectorRef]\n};\n```\nand then registered it in my component\n```ts\nimport { translatePipeProvider } from 'path/to/provider';\n@Component({\n    selector: '',\n    templateUrl: '',\n    providers: [translatePipeProvider]\n})\n. One more wayts\nimport { TranslatePipe } from \"@ngx-translate/core\";\n@Component({\n    selector: '',\n    templateUrl: '',\n    providers: [TranslatePipe]\n})\n```. ",
    "bentaly": "@samoilenko how do you use your own provider for the pipe? I am having the same issue. ",
    "Paul-Hume": "I'm using Angular 4, if you provide the pipe in the module, you can then import it and use it within another pipe where needed. . ",
    "RoyiNamir": "Why can't we declare this provider at the app level ?\nWhy must I declare it at each component ? What kind of design is that ?. @ocombe  Because I did this : \nin core.module.ts (core (!) - which uploads to the root injector) : \nproviders   : [       ...other...  , translatePipeProvider]\nWhere translatePipeProvider is : (from this thread ^ )\n```\nimport {ChangeDetectorRef}               from '@angular/core';\nimport {TranslatePipe, TranslateService} from \"@ngx-translate/core\";\nexport  const translatePipeProvider = {\n    provide   : TranslatePipe,\n    useFactory: (translateService: TranslateService, changeDetectorRef: ChangeDetectorRef) =>\n    {\n        return new TranslatePipe(translateService, changeDetectorRef);\n    },\n    deps      : [\n        TranslateService,\n        ChangeDetectorRef\n    ]\n};\n```\nThen I inject it to my component :\nexport class PaymentMethodsComponent extends BaseComponent implements OnInit\n    {\n      constructor(,,,  , private _TranslatePipe:TranslatePipe)\n        {    }\nAnd when I test it via : \nconsole.log(this._TranslatePipe.transform(\"Resources.loginSms_lblWeSent\" , null));\nI get : \nERROR  ERROR Error: Uncaught (in promise): Error: StaticInjectorError(AppModule)[TranslatePipe -> ChangeDetectorRef]:\nJS:   StaticInjectorError(Platform: core)[TranslatePipe -> ChangeDetectorRef]:\nJS:     NullInjectorError: No provider for ChangeDetectorRef!\nJS: Error: NullInjectorError: No provider for ChangeDetectorRef!\nJS:     at _NullInjector.get (file:///data/data/com.davidshield.dsapp1/files/app/tns_modules/@angular/core/bundles/core.umd.js:1041:19) [angular]\nHOWEVER \nIf I do this ( adding `providers:[TranslatePipe] at the component level : \n\n\nSo ?\n. @ocombe  Ok -  let me clarify : \nIm talking about TS usages only ( not HTML pipe).\nUntil yesterday I was doing : \nctor : private translateService:TranslateService\nand then  \ntranslateService:TranslateService.get(...).pipe(first()) .subscribe( ....get data)\nAnd it worked.\nHowever - I hate the subscribe mechanism ( just to get a resource  , I don't(!) need) to listen to subscriptions).\nAnd then a colleague told me that I can run the pipe code myself  , as it's in the html. ( without observable)\nSo basically to inject the translatepipe , and run it instead of the observable code.\nThis is what i've tried ^ and asked here in my first question..\nAnyway I've also tried ( what you've said) : \nAt the app.module I load it via : \nSo I load it like this in core module : \nexport const GetTranslateModuleLoaderFORROOT: ModuleWithProviders = TranslateModule.forRoot({\n                                         loader: {\n                                                            provide : TranslateLoader,\n                                                            useClass: MyTranslateLoaderService \n                                                     }\n                                                 });\nAnd this is how I load it in the app.module : \n\nAnd that's it. ( it did load the module and its services to the root injector , right?)\nSo now - my class looks like : \n\nBut now I get , \nJS:  ERROR  ERROR Error: Uncaught (in promise): Error: StaticInjectorError(AppModule)[PaymentMethodsComponent -> TranslatePipe]:\nJS:   StaticInjectorError(Platform: core)[PaymentMethodsComponent -> TranslatePipe]:\nJS:     NullInjectorError: No provider for TranslatePipe!\nJS: Error: NullInjectorError: No provider for TranslatePipe!\nJust like the issue of this thread ^.\nSo How can I use the translatepipe in TS ? (without injecting it to each component)\nWorth to mention  , that If I now inject it as a provider to the component( in the last image ^) - IT DOES WORK..\nSo , now you see why I've asked my question above ^: \n. @ocombe  Sure , I've already  understood your answer about changeDetectorRef.\nI haven't noticed that it uses the changeDetectorRef - hence must be injected at each component.\nSo my question was basically wrong.\nMore - It's the first time I hear about the instant method. (happens, right?  :-))\nI thank you for your answer and knowledge. :)\nThanks again.. @andreimcristof I also thought about this and docs doesnt say nothing about it. I think we should \n use the takeWhile approach.....\n. ",
    "WLun001": "@samoilenko thanks!. ",
    "darpankumar": "This thing is working correctly with below code in angular 7 I am posting this for those who might face this issue in angular 7.\nIn module where you using this pipe\nimport { CommonModule, I18nPluralPipe } from '@angular/common';\nand add  your pipe in providers of that module using \nproviders: [\n    I18nPluralPipe\n],\n\nand in your custom pipe inject the pipe whichever you want to use in my case i am using I18nPluralPipe.\n   constructor(\n        private i18nPluralPipe: I18nPluralPipe\n    ) {}\nand then called transform using\nthis.i18nPluralPipe.transform(value,Plural);. ",
    "acharyaks90": "\nThis thing is working correctly with below code in angular 7 I am posting this for those who might face this issue in angular 7.\nIn module where you using this pipe\nimport { CommonModule, I18nPluralPipe } from '@angular/common';\nand add your pipe in providers of that module using\nproviders: [\nI18nPluralPipe\n],\nand in your custom pipe inject the pipe whichever you want to use in my case i am using I18nPluralPipe.\nconstructor(\nprivate i18nPluralPipe: I18nPluralPipe\n) {}\nand then called transform using\nthis.i18nPluralPipe.transform(value,Plural);\n\nNo this doesn't works with angular7 . ",
    "Rakonda": "This line is not clear \n\nApp is running, user navigates out of the app, launches the settings and changes the language, user returns to the app\n\nWhat Exactly the user changes, the device default language or app language?. ",
    "jaypatel04": "Device default language.\nOn Sep 12, 2017 4:00 PM, \"Badr Largab\" notifications@github.com wrote:\n\nThis line is not clear\nApp is running, user navigates out of the app, launches the settings and\nchanges the language, user returns to the app\nWhat Exactly the user changes, the device default language or app language?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/594#issuecomment-328812116,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEggLte-qWdrjPORVmcZiWahZkv-27WYks5shl1RgaJpZM4OT7Nn\n.\n. \n",
    "mshanak": "i have the same problem \ud83d\udc4d . ",
    "sebastian-man": "Same problem with:\n ngx-translate 8.0.0\n ngx-http-loader 2.0.0\n* angular 4.4.6. ",
    "jevvilla": "I fixed doing this:\n1. Using these version of  ngx-translate (add them in package.json, remove node_modules and install all packages again): \n\"@ngx-translate/core\": \"^8.0.0\", \n\"@ngx-translate/http-loader\": \"0.1.0\"\n\nAdding these lines in app.module.ts (use Http, don't use HttpClient):\n\nimport { Http } from \"@angular/http\";\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n```\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: Http) {\n    return new TranslateHttpLoader(http);\n}\n...\nimports: [\n ...\n   TranslateModule.forRoot({\n    loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [Http]\n    }\n  })\n]\n```\n\nCreate 'assets/i18n' folders inside App folder (inside i18n folder have to add all es.json, en.json ... files).\nInside webpack.config add ( { from: \"assets/**\" } ):\n\nplugins: [\n ...,\n // Copy assets to out dir. Add your own globs as needed.\n            new CopyWebpackPlugin([\n               ...\n                { from: \"assets/**\" },\n               ...\n            ]),\n]\nNote: these are  my dependencies and devdependencies:\n```\n\"dependencies\": {\n    \"@angular/animations\": \"~5.2.0\",\n    \"@angular/common\": \"~5.2.0\",\n    \"@angular/compiler\": \"~5.2.0\",\n    \"@angular/core\": \"~5.2.0\",\n    \"@angular/forms\": \"~5.2.0\",\n    \"@angular/http\": \"~5.2.0\",\n    \"@angular/platform-browser\": \"~5.2.0\",\n    \"@angular/platform-browser-dynamic\": \"~5.2.0\",\n    \"@angular/router\": \"~5.2.0\",\n    \"@ngx-translate/core\": \"^8.0.0\",\n    \"@ngx-translate/http-loader\": \"0.1.0\",\n    \"codelyzer\": \"^4.2.1\",\n    \"nativescript-angular\": \"~5.2.0\",\n    \"nativescript-google-analytics\": \"^0.4.1\",\n    \"nativescript-theme-core\": \"~1.0.4\",\n    \"nativescript-unit-test-runner\": \"^0.3.4\",\n    \"reflect-metadata\": \"~0.1.8\",\n    \"rxjs\": \"~5.5.2\",\n    \"tns-core-modules\": \"~3.4.0\",\n    \"zone.js\": \"~0.8.2\"\n  },\n\"devDependencies\": {\n    \"@angular/compiler-cli\": \"~5.2.0\",\n    \"@ngtools/webpack\": \"~1.9.4\",\n    \"@types/mocha\": \"^2.2.48\",\n    \"babel-traverse\": \"6.26.0\",\n    \"babel-types\": \"6.26.0\",\n    \"babylon\": \"6.18.0\",\n    \"chai\": \"^4.1.2\",\n    \"copy-webpack-plugin\": \"~4.3.0\",\n    \"css-loader\": \"~0.28.7\",\n    \"extract-text-webpack-plugin\": \"~3.0.2\",\n    \"jasmine-core\": \"^3.1.0\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-jasmine\": \"^1.1.1\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-nativescript-launcher\": \"^0.4.0\",\n    \"lazy\": \"1.0.11\",\n    \"nativescript-dev-appium\": \"^3.2.0\",\n    \"nativescript-dev-typescript\": \"~0.6.0\",\n    \"nativescript-dev-webpack\": \"^0.9.2\",\n    \"nativescript-tests-hook\": \"0.0.1\",\n    \"nativescript-worker-loader\": \"~0.8.1\",\n    \"raw-loader\": \"~0.5.1\",\n    \"resolve-url-loader\": \"~2.2.1\",\n    \"tslint\": \"^5.9.1\",\n    \"tslint-angular\": \"^1.1.1\",\n    \"typescript\": \"~2.6.2\",\n    \"uglifyjs-webpack-plugin\": \"~1.1.6\",\n    \"webpack\": \"~3.10.0\",\n    \"webpack-bundle-analyzer\": \"^2.9.1\",\n    \"webpack-sources\": \"~1.1.0\"\n  }\n```\n5. To implement translate do it like this:\n```\n// component.ts\nimport { TranslateService } from '@ngx-translate/core';\nconstructor(\n       ...\n        private translate: TranslateService,\n    ) { \n       ...\n        const language = Platform.device.language.split('-')[0];\n    translate.setDefaultLang('es');\n        translate.use(language);\n       ...\n    }\n```\n<Label class=\"h4\" [text]=\"item.role | translate\"></Label>\nIt worked well for me, I hope it works for you.\n. ",
    "marcoschaule": "This \"official\" documentation is for \"angular-translate\", the AngularJS 1.x translate library.. ",
    "PlugaruT": "so, for better performance, what is better to use? pipe or the directive?. ",
    "tasiek": "One thing I know, is that translate.pipe is an impure pipe.\n\nAngular executes an impure pipe during every component change detection cycle. An impure pipe is called often, as often as every keystroke or mouse-move.\n\nAnd it really does call it 'all the time'. The comment for that is:\n\n// required to update the value when the promise is resolved\n\nGot it, but seems really inefficient.\nI'm not sure how is it with directive, will check that.\n. ",
    "bgBond": "@tasiek, any update?\n@ocombe, do you know if there is a difference between using the translation in html vs using it in the component?\nThanks!. Is there any update? . ",
    "morteza-gho": "@bgBond When use pipe transform show first empty string And when use directive, show first path to translate string. But I don't know which performance is better?!\nI ask this question [here] (https://stackoverflow.com/questions/53156920/which-performance-are-better-ngx-translate-directive-or-pipe). ",
    "AlexFreem": "Subscribing.\nAlso expecting this problem, but with usage of factory based on TranslateHttpLoader.. ",
    "matkarlg": "The GET request is never made because there are no subscribers on the Observable for fetching the child JSON. I assume translate.use() is used in the root to set language, which auto-subscribes and completes for root only Source: translate.use. It does not automatically fetch the JSON for the child.\nMake a test by subscribing to onLangChange() manually in the child module and change the language in code. It should fetch the JSON.. @Jensiator The other way I guess is to duplicate the translations.\nI ended up like you said, with some translations in the AppModule - We prefixed them with \"common\".\nThe translations with the \"common\"-prefix were not part of the \"FruitsModule\", but at least they were easy to find. Working with the translations feels the same as the css, always a few globals. \nTo create a big file. A script could concatenate the translation files.. ",
    "qifanrui": "I also encountered the same problem, who solved it?. It seems like this\n```\nimport { Http } from '@angular/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SettingsAboutLanguagePage } from './settings-about-language';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nexport function createTranslateLoader(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [\n    SettingsAboutLanguagePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SettingsAboutLanguagePage),\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [Http]\n      }\n    })\n  ],\n})\nexport class SettingsAboutLanguagePageModule { }\n```. ",
    "JavanXD": "@matkarlg could you please provide your solution, that would be great because i am at the beginning.\n```\n/ Translation Module /\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { Observable } from \"rxjs/Observable\";\n// AoT requires an exported function for factories\nexport function createTranslateLoader(http: HttpClient) {\n    return new CustomLoader(http);\n}\nexport class CustomLoader implements TranslateLoader {\nprivate commonTranslations: any;\nprivate moduleTranslations: any;\nprivate translations: any;\n\nconstructor(private http: HttpClient) {\n    console.log(\"CustomLoader is initialized...\");\n}\n\ngetTranslation(lang: string): Observable<any> {\n    this.commonTranslations = this.http.get(`./assets/i18n/${lang}/common-values.json`).map((response: JSON) => response);\n    this.moduleTranslations = this.http.get(`./assets/i18n/${lang}/values.json`).map((response: JSON) => response);\n    //console.log(this.moduleTranslations);\n\n    let transStr: string = '[' + JSON.stringify(this.commonTranslations) + ',' + JSON.stringify(this.moduleTranslations) + ']';\n    console.log(transStr);\n\n    this.translations = JSON.parse(transStr);\n    return Observable.of(this.translations);\n}\n\n}\n```. ",
    "panagulis72": "@matkarlg setting the translate.use() it finally works, thank you very very much you saved my day :D. ",
    "macjohnny": "if you agree, i would add the same behavior to the changeLang() method. @ocombe awesome, thanks for the superfast merge and release! . ",
    "anekpattanakij": "It seems like current version of ngx-translate could not use on angular-cli now. It has to use with webpack by adding ngx-translate as a whitelite as below link.\nPlease check https://github.com/evertonrobertoauler/cli-universal-demo/issues/14#issuecomment-301125219. ",
    "mikelsulanjaku": "@kubica Did you ever figure out how to fix this?. @kubica This transpiles for me but then when I try to serve it in a nodejs server I get this:\napp.js?1503412037132:1 Uncaught ReferenceError: require is not defined\n    at app.js?1503412037132:1\n    at app.js?1503412037132:1\nHow do you serve your app after it is done transpiling with the command you used above?\nI tried using gulp server.prod but get the error above.\nAlso how did you configure this in the seed.config.ts and project.config.ts?. ",
    "kubica": "@mikelsulanjaku Unfortunately not but i solved the problem (for my application) by running the aot task in combination with rollup (npm run build.prod.rollup.aot) which unexpectedly works.. @mikelsulanjaku in our application the resulting build is distributed by a nginx server without any gulp- or node-tasks. Good luck!. ",
    "TrueGeek": "Has anyone found a workaround other than using build.prod.rollup.aot? Another package (oidc-client) is preventing rollup from completing in my project.. ",
    "Cayan": "I had a similar issue a few hours ago, if your translation json is inside the folder app/assets/i18n\nadd the next line to your CopyWebpackPlugin\n{ from: \"assets/i18n/*.json\" }. @Shifs the related code from app.module.ts is listed below:\n...\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n...\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http);\n}\n@NgModule({\n    schemas: [NO_ERRORS_SCHEMA],\n    imports: [\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [Http]\n            }\n        }),\n.... ",
    "mozi22": "@Shifs  did you solve this issue ?. Hi, thanks for getting back. The problem still persists. Even after removing the ng2-translate. Could you please point me to a minimum example project where ngx-translate is working ?. What I've noticed is that the problem lies in the ngx-translate/http-loader. If I change the version of it to 0.1.0 than it works fine. but it doesn't work for v2.0.0. Do you have an y idea why this is happening ? \n. Here are the steps I took to generate the problem.\n1) Followed this tutorial to create a basic nativescript + angular app.\n2) Included the following packages in the parent package.json \n\"@ngx-translate/core\": \"9.0.0\",\n\"@ngx-translate/http-loader\": \"2.0.0\",\n3) Add the en.json and de.json file in the app/assets/i18n folder of the project. They look like this.\nde.json\n{\n  \"HELLO\": \"wie gehts\"\n}\nen.json\n```\n{\n  \"HELLO\": \"whats up\"\n}\n``\n4) Add the following label instead of apple image as shown in the tutorial.\n\n`\n5) My app.module.ts looks like this.\n```\nimport { NgModule, NO_ERRORS_SCHEMA } from \"@angular/core\";\nimport { NativeScriptModule } from \"nativescript-angular/nativescript.module\";\nimport { AppComponent } from \"./app.component\";\nimport {HttpClientModule, HttpClient} from '@angular/common/http';\nimport {TranslateModule, TranslateLoader} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  imports: [\n        NativeScriptModule,\n        HttpClientModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (HttpLoaderFactory),\n                deps: [HttpClient]\n            }\n        })\n    ],\n  schemas: [NO_ERRORS_SCHEMA],\n})\nexport class AppModule {}\n```\n6) Run the project using tns run ios after npm i.\nALTERNATIVE:\nAs I've already shared the minimum project with the problem with you. If you clone the repository I shared. I've already followed these steps there. So just go inside the project and run tns run ios ( on a MAC ). This will run the nativescript project on a simulator and it will show an empty screen.  \nThe expected behavior would be that the screen shows a label with text whats up\nNote: The project is in a working state with the problem existing. You don't even have to run yarn install as I commited the node_modules too.\n. no problem thanks.. couldn't find the solution. I had to try a separate way. ",
    "prophetw": "if translate find key with value '' \nshould handle this not just return ''\nangular-translate do like this\nif value is '' it will use fallback language translations as result . ",
    "matthewharwood": "I think this has a problem with new commit https://github.com/angular/angular/pull/18496/commits/5db475c2c28ef1aad8fafe6087e9dab0cccb8dab. What did you change? I'm not seeing the diff?. ",
    "bliitzkrieg": "I am also experiencing this issue. ",
    "cjking-wang": "im getting the same error. ",
    "feloy": "@ocombe I close the issue. ",
    "rbarkhouse": "+1 for this, we are trying to incorporate shrinkwrap into our build process and this error is preventing us.. ",
    "abidmix": "@rbarkhouse . For now, I have  to resorted to using @ngx-translate/core which works well with angular versions 4.X,X . My imports have been changed to\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nfrom\nimport {TranslateModule, TranslateStaticLoader, TranslateLoader } from 'ng2-translate';\nHope this will help you.\n. ",
    "real050280": "Skimming at it, this line has been modified.\nexport function HttpLoaderFactory(http: HttpClient) {\n...\n. ",
    "madoublet": "Thank you!  This worked perfectly.. ",
    "pranaysand": "I had the same issue even after importing all the libraries. this is what fixed mine.\nIn you app.module.ts file you have to mention the service name you have created. \nproviders: [\n  servicename\n  ]. ",
    "harshals13": "@CodeAndWeb Is there a solution to this issue? I'm facing the exact same problem. Thanks.. ",
    "fredroo": "\n. ```\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { MyApp } from './app.component';\nimport { IonicStorageModule, Storage } from '@ionic/storage';\nimport { Globalization } from '@ionic-native/globalization';\nimport { GoogleAnalytics } from '@ionic-native/google-analytics';\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { EmailComposer } from '@ionic-native/email-composer';\nimport { SocialSharing } from '@ionic-native/social-sharing';\nimport { Toast } from '@ionic-native/toast';\nimport { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal';\nimport { HttpModule, Http, XHRBackend } from '@angular/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { JwtClientProvider } from '../providers/jwt-client/jwt-client';\nimport { FormsModule } from '@angular/forms';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { AuthConfig, AuthHttp ,JwtHelper } from \"angular2-jwt\";\nimport { AuthProvider } from '../providers/auth/auth';\nimport { DefaultXHRBackendProvider } from '../providers/default-xhr-backend/default-xhr-backend';\nimport { RedirectorProvider } from '../providers/redirector/redirector';\nimport { Facebook } from '@ionic-native/facebook';\nimport { UserResourceProvider } from '../providers/user-resource/user-resource';\nimport { GooglePlus } from '@ionic-native/google-plus';\nimport { TwitterConnect } from '@ionic-native/twitter-connect';\nimport { Env } from '../models/env';\ndeclare var ENV:Env;\nexport function createTranslateLoader(http: Http) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  declarations: [\n    MyApp\n  ],\n  imports: [\n    FormsModule,\n    TextMaskModule,\n    BrowserModule,\n    HttpModule,\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot({\n        driverOrder: ['localstorage']\n    }),\n    TranslateModule.forRoot({\n      loader: {\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [ Http ]\n    }}\n      )\n  ],\n  exports: [\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp\n  ],\n  providers: [\n      StatusBar,\n      SplashScreen,\n      Globalization,\n      GoogleAnalytics,\n      GooglePlus,\n      TwitterConnect,\n      SocialSharing,\n      EmailComposer,\n      Toast,\n      PayPal,\n      Facebook,\n      Geolocation,\n      JwtHelper,\n      AuthProvider,\n      RedirectorProvider,\n      UserResourceProvider,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    JwtClientProvider,\n    {\n      provide: AuthHttp,\n      deps: [Http, Storage],\n      useFactory(http, storage){\n          let authConfig = new AuthConfig({\n            headerPrefix: 'Bearer',\n            noJwtError: true,\n            noClientCheck: true,\n            tokenGetter: (() => storage.get(ENV.TOKEN_NAME))\n          });\n          return new AuthHttp(authConfig, http);\n      }\n    },\n    {provide: XHRBackend, useClass: DefaultXHRBackendProvider },\n    RedirectorProvider,\n    UserResourceProvider\n  ]\n})\nexport class AppModule {\n  constructor(globalization: Globalization) {\n    globalization.getPreferredLanguage()\n      .then(res => console.log(res))\n      .catch(e => console.log(e));\n    globalization.getLocaleName()\n      .then(res => console.log(res))\n      .catch(e => console.log(e));\n  }\n}\n```. @MateMahinKhan please help me. @SamVerschueren  \ni try with this tutorial but not work\nhttps://ionicframework.com/docs/developer-resources/ng2-translate/\nhow use with ionic 3?. follow this guide https://ionicframework.com/docs/developer-resources/ng2-translate/. follow but not work, only spanish not work. ",
    "muuvmuuv": "Hi @SamVerschueren. I came up with the same problem and already updated to Angular 4.3+ but my Ionic App came up with many errors saying that ionic need 4.1.3. So how did you got that running. Could you post your package.json. So I can compare with mine?\nThanks. ",
    "rroque6428": "Hi. I faced this problem today. Do what @SamVerschueren is saying or follow this example:\n\n$ npm install @ngx-translate/core @ngx-translate/http-loader@0.1.0 --save\n\napp.module.ts\n```\n...\nimport { Http, HttpModule } from '@angular/http';\n...\n// Multilanguage\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n...\nexport function createTranslateLoader(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  ...\n  imports: [\n    BrowserModule,\n    HttpModule,\n    IonicModule.forRoot(MyApp),\n    ...\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [Http]\n      }\n    })\n  ], ...\n})\n**./src/assets/i18n/en.json** (Create the translations files)\n{\n    \"menutitle\": {\n        \"profile\": \"You\",\n        \"config\": \"Config\",\n        \"premium\": \"Upgrade Premium\",\n        \"help\": \"Help\"\n    }  \n}\n**app.component.ts** (Initialize)\n...\nimport { TranslateService } from '@ngx-translate/core';\n...\n@Component({...})\nexport class MyApp {\n  constructor( private translate: TranslateService, private ... ) { \n     this.translate.setDefaultLang('en');\n  }\n}\n**app.html** (Use)\n...\n        \n {{ \"menutitle.help\" | translate }}\n        \n...\n```\nSee the documentation: https://github.com/ngx-translate/core\nMy environ:\n```\n    @ionic/cli-plugin-ionic-angular : 1.4.1\n    @ionic/cli-utils                : 1.7.0\n    ionic (Ionic CLI)               : 3.7.0\nglobal packages:\n    Cordova CLI : 6.5.0\nlocal packages:\n    @ionic/app-scripts        : 2.1.3\n    @ionic/cli-plugin-cordova : 1.4.1\n    Cordova Platforms         : android 6.1.2\n    Ionic Framework           : ionic-angular 3.6.0\nSystem:\n    Android SDK Tools : 25.2.5\n    Node              : v6.9.1\n    OS                : Windows 8.1\n    npm               : 4.1.1\npackage.json\n  \"dependencies\": {\n    \"@angular/common\": \"4.1.3\",\n    \"@angular/compiler\": \"4.1.3\",\n    \"@angular/compiler-cli\": \"4.1.3\",\n    \"@angular/core\": \"4.1.3\",\n    \"@angular/forms\": \"4.1.3\",\n    \"@angular/http\": \"4.1.3\",\n    \"@angular/platform-browser\": \"4.1.3\",\n    \"@angular/platform-browser-dynamic\": \"4.1.3\",\n    \"@ionic-native/core\": \"3.6.1\",\n    ...\n    \"@ionic/storage\": \"2.0.1\",\n    \"@ngx-translate/core\": \"^7.1.0\",\n    \"@ngx-translate/http-loader\": \"^0.1.0\",\n    \"ionic-angular\": \"3.6.0\",\n    \"ionic-native\": \"2.4.1\",\n    ...\n    \"lodash\": \"^4.17.4\",\n    \"moment\": \"^2.17.1\",\n    \"rxjs\": \"5.4.0\",\n    \"sw-toolbox\": \"3.6.0\",\n    \"zone.js\": \"0.8.12\"\n  },\n  \"devDependencies\": {\n    \"@ionic/app-scripts\": \"2.1.3\",\n    \"@ionic/cli-plugin-cordova\": \"1.4.1\",\n    \"@ionic/cli-plugin-ionic-angular\": \"1.4.1\",\n    \"ionic\": \"3.7.0\",\n    \"tslint-ionic-rules\": \"0.0.11\",\n    \"typescript\": \"2.3.4\"\n  }, ...\n```. ",
    "anibalsanchez": "For the record, this is a viable TranslateHttpLoader implementation to replace the current http-loader (tested on the latest angular 4.1 and ionic 3):\nimport { Http, Response } from '@angular/http';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport 'rxjs/add/operator/map';\n\nexport function createTranslateLoader(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\nexport class TranslateHttpLoader implements TranslateLoader {\n\n  constructor(private http: Http, private prefix?: string, private suffix?: string) {\n  }\n\n  /**\n   * Gets the translations from the server\n   * @param lang\n   * @returns {any}\n   */\n  public getTranslation(lang: string): any {\n    let obs = this.http\n      .get(`${this.prefix}${lang}${this.suffix}`)\n      .map((response: Response) => response.json() || {});\n\n    return obs;\n  }\n}\n\n. ",
    "pushpendra-jaypore": "Thanks @SamVerschueren this is working for me ... ",
    "iget-master": "The . character is reserved to nest translations, maybe it's easiest you use an underscore instead: redirect_message. @sgwatgit In my case, the problem is that I use the translation service inside other services, that was injected on App component, and I configure the translation service default language only on App component's constructor, so the service that depends on it was already loaded and trying to use it.\nTo solve it, I've extended the translation service and added the configuration to it constructor:\nThat's my TranslateService:\n```\nimport { Inject, Injectable }                                                                                                      from '@angular/core';\nimport { MissingTranslationHandler, TranslateCompiler, TranslateLoader, TranslateParser, TranslateService as NgxTranslateService } from '@ngx-translate/core';\nimport { TranslateStore }                                                                                                          from '@ngx-translate/core/src/translate.store';\nimport 'rxjs/add/operator/map';\nimport { AppConfig, appConfig }                                                                                                    from '../app/app.config';\n@Injectable()\nexport class TranslateService extends NgxTranslateService {\n    constructor(\n        store: TranslateStore,\n        currentLoader: TranslateLoader,\n        compiler: TranslateCompiler,\n        parser: TranslateParser,\n        missingTranslationHandler: MissingTranslationHandler,\n        @Inject(appConfig) private appConfig: AppConfig,\n    ) {\n        super(store, currentLoader, compiler, parser, missingTranslationHandler, true, false);\n        this.setDefaultLang(this.appConfig.defaultAppLanguage);\n        this.use(navigator.language);\n    }\n}\n```\nThen added this to the providers on my App module:\n{provide: NgxTranslateService, useClass: TranslateService},\n\nThis replaces the NgxTranslateService with my own Translate service that extends it with configurations.. ",
    "cedx": "There should be an option allowing to choose the character used, like nestedObjectDelimeter in ng-translate.. ngx-translate/http-loader v1.x requires the new HttpClient provided by Angular 4.3+.. ",
    "picninim": "Same here for version 4.3.3. It only happens when using production: true for Environment.. ",
    "kartheininger": "Do you want to test your TileComponent or do you want to test the pipe?\nIn our project we go the way to mock the translatepipe:\n```\n@Pipe({\n    name: \"translate\"\n})\nexport class TranslatePipeMock implements PipeTransform {\n    public name: string = \"translate\";\npublic transform(query: string, ...args: any[]): any {\n    return query;\n}\n\n}\n```\nand then use that mock in the testbed:\ndeclarations: [TranslatePipeMock]\n. If you unit test your component, then you should mock the service. \nSo in the spec instead of importing TranslateModule you should add this to your providers:\n{provide: TranslateService, useClass: TranslateServiceStub}\nAnd then do something like this:\n```\nexport class TranslateServiceStub{\npublic get(key: any): any {\n    Observable.of(key);\n}\n\n}\n```\nor you return the key with a suffix, so you know \"the service was called\".\nBecause when you unit test your component, you should rely on that external dependencies (like the translateService) are already tested and they are working. . Have you tried to use the real pipe and the mock i suggested together? I don`t know if thats working, because in our app we mocked both in tests.\nIf you use the pipe too, then i would add a mock for the pipe too. I copied a small example within https://github.com/ngx-translate/core/issues/635\nI personally would just let the mocks return the key a bit modified e.g. with a 1 at the end. So you know the pipe/service was called. I hope i got you right and thats what you wanna test :). If that method in your test is missing, then you need to add it to the Stub :) \nIt should probably return the same type then the real implementation, therefore have a look here: https://github.com/ngx-translate/core/blob/master/src/translate.service.ts\nYou need to mock all the methods you are calling :) \nIn our tests we do not need more methods mocked, as the user cannot change his language without leaving the app and reloading it (user settings are done in a different system :)). ",
    "Ks89": "@kartheininger If I do that I receive this error\nThe pipe 'translate' could not be found\nbecause I'm using both TranslateService and pipe.\nTo be more accurate:\nI don't wanna test ngx-translate, but that it is applying the correct translation. Obviously I don't want to show \"BLABLA.BLALA\" instead of \"Hello\".\nI saw while developing that if you make a stupid error all translations of the page will be broken, so I want to be sure that everything is working in the right way.\nIn fact, I want to test that my component is shown with the right labels also changing the language. So, I'm not testing ngx-translate.. @kartheininger Also, adding both TranslatePipe to my declarations and your mock I get this:\nFailed: this.translate.get(...) is undefined. @kartheininger \nHave you tried to use the real pipe and the mock i suggested together? I don`t know if thats working, because in our app we mocked both in tests.\nyes. Using Service mock and the real pipe I get this error: \"Failed: this.translate.get(...) is undefined\"\nUsing the Pipe mock doesn't change anything. \nMy problem is that I don't wanna use mocks. I can't test that my components are ok, without to know that translations are correct.\nI don't wanna test TranslateService or other, but that they are applying the right translations in my component.\nI want to be sure that all texts are defined in all files and that are applied in the right place. I cannot release a multi language application in production without to now that all label, texts and so on are working very well. \nThat because I use strings to get translations (for instance \"ABOUT.TITLE\") and a simple typo could break translation and my app will show a wrong label. That is a big problem in production.\nI think that this is a use case where mocks are very bad. It should be possibile to apply real translations. Only with real translations I will be sure that everything will be ok in production.\n. I updated your mock because you forgot to add \"return\":\n```\nexport class TranslateServiceStub{\npublic get(key: any): any {\n    return Observable.of(key);\n}\n\n}\n```\nbut now I'm receiving:\nFailed: this.translate.onTranslationChange is undefined\nIt isn't so simple to mock this service.. ",
    "Zhichao-Hong": "@kartheininger Any example mock that you are using in your.  I am having problem with TranslateDirective.  Do I need to mock this too?  It will be nice to include a unit testing example project in your  examples folder.. ",
    "pherris": "I'm just coming up to speed on this stack and was trying to wrap some tests around an Ionic component. I ran across this same problem and solved it by looking at translate.service.spec.ts (https://github.com/ngx-translate/core/blob/master/tests/translate.service.spec.ts) and the comments in this thread. \nEssentially I had to define TranslateModule in imports and provide it a TranslateLoader called FakeLoader which wrapped my manually defined translations (it'd be nice to use the actual file here). Next I had to get the TranslateService instance and set the language to use in my test.\n```\nimport { ComponentFixture, TestBed, getTestBed } from '@angular/core/testing';\nimport {Injector} from \"@angular/core\";\nimport { IonicModule, Platform, NavController } from 'ionic-angular';\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { By }              from '@angular/platform-browser';\nimport { DebugElement }    from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport { CardsPage } from './cards';\nimport {\n  PlatformMock,\n  NavMock,\n} from '../../../test-config/mocks-ionic';\nlet translations: any = {\"CARDS_TITLE\": \"This is a test\"};\nclass FakeLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return Observable.of(translations);\n  }\n}\ndescribe('CardsPage (inline template)', () => {\n  let comp:      CardsPage;\n  let fixture:   ComponentFixture;\n  let de:        DebugElement;\n  let el:        HTMLElement;\n  let translate: TranslateService;\n  let injector:  Injector;\nit('true is true', () => expect(true).toBe(true));\nbeforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [CardsPage],\n      imports: [\n        IonicModule.forRoot(CardsPage),\n        TranslateModule.forRoot({\n          loader: {provide: TranslateLoader, useClass: FakeLoader},\n        })\n      ],\n      providers: [\n        { provide: Platform, useClass: PlatformMock },\n        { provide: NavController, useClass: NavMock },\n      ]\n    });\n    injector = getTestBed();\n    translate = injector.get(TranslateService);\nfixture = TestBed.createComponent(CardsPage);\n\ncomp = fixture.componentInstance;\n\nde = fixture.debugElement.query(By.css('ion-title'));\nel = de.nativeElement;\n\n});\nit('should include the title of the cards page', () => {\n    translate.use('en');\n    fixture.detectChanges();\n    expect(el.textContent).toContain('This is a test')\n  });\n});\n```\nThis seems like a crazy amount of configuration and mocking for every component but I'm new to the Angular stack.... ",
    "ronjoy4": "@pherris Nice work! Spent so much time trying to get that damn translatemodule to work.. @kgish You could probably create a custom object for the testingmodule and import it into each test?\nIf you had anything extra to add to the testing module, you could always extend that object via a class or dynamically.. ",
    "kgish": "This is a crazy amount of extra work and becomes very cumbersome if this has to be included in every test. There must be an easier way, or not?. Yes indeed.\nBased on https://github.com/ngx-translate/core/issues/471, I tried extracting all of the translation-specific stuff into a separate helper module, but was unable to come up with a simple solution.\nAny hints or tips would be greatly appreciated.. Yes, this may work but it is still quite inconvenient to have to include all of this boiler-plate code in every test that depends on ngx-translate. There must be a better option possible?. Same issue, dev ok and prod nok.. ",
    "ap1969": "I've got everything I need mocked out (translate pipe and setDefaultLang) using Jest. I'll see if I can pull together a complete spec with just the translation piece in it (at the moment, it's all mixed-in with project-specific code). ",
    "leemon20": "Thanks to @pherris, @Ks89  and https://stackoverflow.com/a/43833423 one possible solution that checks all supported languages is.\nADVANTAGE: Uses real translation files/contents (json) to validate element contents. In case keys are change inside translation file (json) tests will fail.\nATTENTION: code most probably will not compile. serves as an example what steps are to be done.\n```\nimport { async, TestBed } from '@angular/core/testing';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { NotFoundPageComponent, NotFoundPageModule } from '@app/areas/public';\nimport * as de from '@assets/i18n/de.json';\nimport * as en from '@assets/i18n/en.json';\nimport { NotFoundPagePage } from './not-found-page.po';\nconst TRANSLATIONS = {\n    DE: de,\n    EN: en\n};\nclass JsonTranslationLoader implements TranslateLoader {\n    getTranslation(code: string = ''): Observable {\n        const uppercased = code.toUpperCase();\n    return of(TRANSLATIONS[uppercased]);\n}\n\n}\ndescribe('NotFoundPage:', () => {\n    describe('i18n:', () => {\n        let page: NotFoundPagePage;\n        let component: NotFoundPageComponent;\n        let service: TranslateService;\n    beforeEach(async(() => {\n        TestBed.configureTestingModule({\n            imports: [\n                NoopAnimationsModule,\n                TranslateModule.forRoot({\n                    loader: { provide: TranslateLoader, useClass: JsonTranslationLoader },\n                }),\n                NotFoundPageModule\n            ]\n        });\n\n        service = TestBed.get(TranslateService);\n\n        page = new NotFoundPagePage(TestBed);\n        component = page.component;\n\n        // calls internally \n        // detectChanges() -> whenStable().then(() => detectChanges());\n        return page.waitForCompoentToBecomeStable();\n    }));\n\n    Object.keys(TRANSLATIONS).forEach((k) => {\n        const key = k.toLowerCase();\n\n        describe(`${key}:`, () => {\n            beforeEach(() => {\n                service.use(key);\n\n                page.detectChanges();\n            });\n\n            it('should have translated value as username hint', async () => {\n                service.get('LOGIN_FORM.USERNAME').subscribe((translated) => {\n                    const text = page.getUsernameInputPlaceholderText();\n\n                    expect(text).toBe(translated);\n                });\n            });\n\n            it('should have translated value as password hint', () => {\n                service.get('LOGIN_FORM.PASSWORD').subscribe((translated) => {\n                    const text = page.getPasswordInputPlaceholderText();\n\n                    expect(text).toBe(translated);\n                });\n            });\n        });\n    });\n});\n\n});\n```. ",
    "gclark-sieff": "@ocombe would it be possible to show a test example of app.component.spec.ts in an Ionic 3 project using Karma/Jasmine combination? I get \"The pipe 'translate' could not be found\" errors when using your example.. ",
    "yavin5": "I can verify that Oliver (ocombe)'s test example code worked.  Thanks Oliver!!\n. ",
    "yuezhizizhang": "Can't @kgish more. I don't want to include all of the components into my test file. ",
    "kbirger": "Angular provides a module HttpClientTestingModule for mocking HttpClient. Why not follow the same pattern here and provide this as a first-party module for testability of your project?. ",
    "AndreiShostik": "agree with @kbirger\n@ocombe, please take a look\n``` typescript\nimport { Injectable, NgModule, Pipe, PipeTransform } from '@angular/core';\nimport { TranslateLoader, TranslateModule, TranslatePipe, TranslateService } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nconst translations: any = {};\nclass FakeLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(translations);\n  }\n}\n@Pipe({\n  name: 'translate'\n})\nexport class TranslatePipeMock implements PipeTransform {\n  public name = 'translate';\npublic transform(query: string, ...args: any[]): any {\n    return query;\n  }\n}\n@Injectable()\nexport class TranslateServiceStub {\n  public get(key: T): Observable {\n    return of(key);\n  }\n}\n@NgModule({\n  declarations: [\n    TranslatePipeMock\n  ],\n  providers: [\n    { provide: TranslateService, useClass: TranslateServiceStub },\n    { provide: TranslatePipe, useClass: TranslatePipeMock },\n  ],\n  imports: [\n    TranslateModule.forRoot({\n      loader: { provide: TranslateLoader, useClass: FakeLoader },\n    })\n  ],\n  exports: [\n    TranslatePipeMock,\n    TranslateModule\n  ]\n})\nexport class TranslateTestingModule {\n}\n```. ",
    "Tenmak": "Seems pretty easy to me, simply get your URL parameter from the ActivatedRoute and use the Translate service to use the wanted language.\n. ",
    "mgamsjager": "Came across a similar issue in our Anguar 4 project. I eventually mitigated it by wrapping the get() in setTimeout with a timeout of 0. ",
    "patapron": "Same. ",
    "seangwright": "I'm running into a similar issue, though wrapping in a setTimeout didn't solve my problem.\nI'm putting all my calls to translate.get('Content.Id') in an array and passing that to Observable.forkJoin so that I get all my translations in one call instead of subscribing to get all of them.\nThe data being emitted by forkJoin is an array of all my Content.Id values passed to my get calls.\nObservable.forkJoin([translate.get('Content.Id1'), translates.get('Content.Id2')])\n    .subscribe(data => console.log(data)); //=> ['Content.Id1', 'Content.Id2'];\nEdit ---\nI see - you need to put your calls to get in a setTimeout, not the subscribe calls to the Observables that get returns.\nAs I'm debugging what's going on inside translate.service.js I can see in the call to get this.pending is false but this.translations is an empty object, which is caused by the call to get executing before the call to getTranslation is made.\nWhere can I make my calls to this.translate.setDefaultLang('en-US') and  this.translate.use(this.localeId); so that the translation is loaded into the app before any calls to get are made?. @iget-master That's a really nice pattern!\nI ended up going a different direction. Since my project is using template i18n directives from @angular and the cli to do .xlf file generation, we have separate builds for each language. I removed all calls to get and replaced them with instant.\nI then set the translations by importing the json file (via ES module) to my AppModule and loading them with my own custom loader class. I also set the locale there (in my APP_INITIALIZER fn) by importing the value from a file.\n```\n// AppModule.ts\nimport { locale } from '../i18n/locale';\nimport * as translations from '../i18n/runtime-translations.json';\nexport function appInitializer(\n    translate: TranslateService) {\n    return () => new Promise(resolve => {\n        translate.setDefaultLang('en-US');\n        translate.use(locale);\n    // ... other init code\n});\n\n}\nexport class StaticLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable {\n        return Observable.of(translations);\n    }\n}\nMy import of the `TranslateModule` looks like this\nTranslateModule.forRoot({\n    loader: {\n        provide: TranslateLoader,\n        useClass: StaticLoader\n    }\n})\n``\nI convert my.poto.json` using a build process so that its available at the above path for each build of the app I perform for each language.. ",
    "kleeb": "+1\nng2-translate 5.0.0\nAngular 4.1.3\nIonic 3.6.0\niOS only bug. ",
    "dkarpik": "+1. ",
    "nareeboy": "+1. ",
    "Ben1nBlack": "+1\n. ",
    "sebaferreras": "@ocombe Since the error only happens on iOS and when using the WKWebView, I think the proper way to fix it is by using a custom loader. The following seems to be working properly on:\n\n[x] Android \n[x] iOS (UIWebView and WKWebView)\n[x] Browser (i.e. when using ionic serve)\n\n1) Install the cordova-plugin-file (I'm using Ionic Native, but you could do the same without it):\nionic cordova plugin add cordova-plugin-file\nnpm install --save @ionic-native/file\n2) Add it to the AppModule in the app.module.ts file:\n```\nimport { File } from '@ionic-native/file';\n// ...\n@NgModule({\n    declarations: [/ ... /],\n    imports: [/ ... /],\n    bootstrap: [/ ... /],\n    entryComponents: [/ ... /],\n    providers: [\n        File, // <--- here!\n        // ...\n    ]\n})\nexport class AppModule { }\n```\n3) Create a custom loader that uses the cordova-plugin-file when running on a mobile device (we also handle what to do when working in the browser)\n```\nimport { Observable } from 'rxjs/observable';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { HttpClient } from '@angular/common/http';\nimport { File } from '@ionic-native/file';\n// ...\nexport class CustomLoader implements TranslateLoader {\n    constructor(private http: HttpClient, private platform: Platform, private file: File) { }\ngetTranslation(lang: string): Observable<any> {\n    if (this.platform.is('cordova')) {\n        let readFilePromise = this.file.readAsText(this.file.applicationDirectory, `www/assets/i18n/${lang}.json`);\n        return fromPromise(readFilePromise).map((data: string) => JSON.parse(data));\n    } else {\n        return this.http.get(`./assets/i18n/${lang}.json`);\n    }\n}\n\n}\n```\nNOTE: In the code above I'm using the Lettable operators (rxjs >= 5.5.X). If you're using an older version of rxjs, instead of return fromPromise(readFilePromise)... you'll need to do something like return Observable.fromPromise(readFilePromise)... and also remove the following import: import { fromPromise } from 'rxjs/observable/fromPromise';\n4) Update the AppModule of the app.module.ts file to use our custom loader\n```\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { Platform } from 'ionic-angular';\nimport { File } from '@ionic-native/file';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\n// ... don't forget to import the CustomLoader if it's not in the same file!\n// ...\n@NgModule({\n    declarations: [/ ... /],\n    imports: [\n        HttpClientModule, //  <--- We need to import the HttpClientModule\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useClass: CustomLoader,\n                deps: [HttpClient, Platform, File]\n            }\n        }),\n        // ...\n    ],\n    bootstrap: [/ ... /]],\n    entryComponents: [/ ... /],\n    providers: [/ ... /]\n})\nexport class AppModule { }\n```. @ocombe of course. It'd be great if some other users could give this a try to make sure it works properly on some other devices/OS versions. So if it's ok for you, later today I will create a Github repo with a ready-to-use demo app and will add the link to that repo in every Github issue related to this.\nIn a few days if it seems to be working properly I will create a PR to add the link to that repo in the Additional Framework Support section of the readme.. @CodeAndWeb I'm sorry, I was waiting to see if there were more comments on this issue, but I guess I should make a PR in the ionic-example repo with the changes listed on my comment... Would that be ok?. ",
    "DavidStrausz": "@sebaferreras @ocombe If you are interested I was able to work around that in a similar way, I created a custom TranslateLoader which returns observables of imported .ts constants:\n```typescript\nimport { de } from '../core/translations/de'; // export const de = { [key: string]: value: string, }\nimport { en } from '../core/translations/en';\nimport { sl } from '../core/translations/sl';\nexport class LocalTranslateLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    switch (lang) {\n      case 'de':\n        return of(de);\n      case 'en':\n        return of(en);\n      case 'sl':\n        return of(sl);\n      default:\n        return of(de);\n    }\n  }\n}\n```. ",
    "icehowler": "Hey @dobrinsky I see you managed to make it work with my answer :)\nNow I need your help! I tried to add ngx-translate on asp.net core 2 SPA and I get JsonReaderException: Unexpected character encountered while parsing value: {. Path 'errorMessage', line 1, position 17.\nIf I put the filename like return new TranslateHttpLoader(http, 'http://localhost:50475/assets/i18n/', '.json'); it works though. Any hidden hints?. Thanks a lot! It works :)\n(multam fain). ",
    "dobrinsky": "Hi,\nI found a solution. I\nFrom https://github.com/MarkPieszak/aspnetcore-angular2-universal\nI knew that we should load the files like this:\n``\nexport function createTranslateLoader(http: Http, baseHref) {\n    // Temporary Azure hack\n    if (baseHref === null && typeof window !== 'undefined') {\n        baseHref = window.location.origin;\n    }\n    // i18n files are inwwwroot/assets/return new TranslateHttpLoader(http,${baseHref}/assets/i18n/`, '.json');\n}\n```\nbut is not enough. We also need to change the TranslateModule.forRoot like this:\nTranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient, [ORIGIN_URL]]\n            }\n        })\nwhere \nORIGIN_URL is in another file:\nimport { ORIGIN_URL } from \"./constansts/baseurl.constants\";\nlike this:\n```\nimport { InjectionToken } from '@angular/core';\nexport const ORIGIN_URL = new InjectionToken('ORIGIN_URL');\n```\nwe need to provide ORIGIN_URL  in boot.server.ts like this:\nconst providers = [\n        { provide: INITIAL_CONFIG, useValue: { document: '<app></app>', url: params.url } },\n        { provide: APP_BASE_HREF, useValue: params.baseUrl },\n        { provide: 'BASE_URL', useValue: params.origin + params.baseUrl },\n        { provide: ORIGIN_URL, useValue: params.origin }\n    ];\nAlso, in app.module.browser.ts:\n```\nexport function getOriginUrl() {\n    return window.location.origin;\n}\n@NgModule({\n    bootstrap: [ AppComponent ],\n    imports: [\n        BrowserModule,\n        AppModuleShared\n    ],\n    providers: [\n        {\n            // We need this for our Http calls since they'll be using an ORIGIN_URL provided in main.server\n            // (Also remember the Server requires Absolute URLs)\n            provide: ORIGIN_URL,\n            useFactory: (getOriginUrl)\n        },\n        {\n            provide:\n            'BASE_URL', useFactory: getBaseUrl\n        }\n    ]\n})\nexport class AppModule {\n}\n```\nAnd like this it works for me...\nAgain, my project can be found here: https://github.com/dobrinsky/AngularDefault\n. Yes, I know. How can we get the selected language in backend. I was saying that I am using C#. Thank you very much! Sorry for the late response. ",
    "graphefruit": "Stumpled accross this issue aswell.\nOn my side this worked:\ndeps: [HttpClient,\"BASE_URL\"]\nAnd BASE_URL is provided in the app.browser.module.ts\nproviders: [\n        { provide: 'BASE_URL', useFactory: getBaseUrl }\n    ]\n. ",
    "LeviWadd": "@dobrinsky Thanks for documenting the solution to your issues here and providing repo access. Very useful!. ",
    "petarblazevski": "I am having the same issue. Did you find any solution for this problem?. ",
    "dlarr": "Any luck with this ? I am facing same kind of issue.\nI made a component that I publish into my verdaccio : It's using | translate so I need to include the TranslateModule in it:\n```\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n    imports: [\n      MdTableModule,\n      MdTooltipModule,\n      MdAutocompleteModule,\n      MdPaginatorModule,\n      MdSelectModule,\n      MdSortModule,\n      MdInputModule,\n      MdSelectModule,\n      CdkTableModule,\n  HttpClientModule,\n  ReactiveFormsModule,\n  CommonModule,\n  TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [HttpClient]\n    }\n  }),\n  FormsModule\n],\nexports: [ComplexTableComponent],\ndeclarations: [ComplexTableComponent],\nproviders: [\n\n]\n\n})\nexport class ComplexTableModule { }\n```\nBut then, Translation won't work in the project where I did [npm install myModule]. ",
    "dstanich": "I had a similar issue using npm link and resolved it using the method here:\nhttps://github.com/angular/angular-cli/blob/master/docs/documentation/stories/linked-library.md\nIn the main project's tsconfig.json, I added an entry for @ngx-translate/* which pointed to the main project's version.\n\"@ngx-translate/*\": [\n        \"../node_modules/@ngx-translate/*\"\n      ],. ",
    "Namoshek": "Although it isn't really a solution to your problem as it introduces other issues, have you tried something like <h1 [innerHtml]=\"'your.loca.key' | translate\"></h1>?. ",
    "koyadovic": "News here?. ",
    "06MOHD04": "same here\nwork fine in browser \nbut not in android . I have solved it.\nthe problem is in app.module.ts from:\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n  return new TranslateHttpLoader(httpClient, 'assets/i18n/', '.json');\n}\n'assets/i18n/' and not '../assets/i18n/'\nmake sure when you write an address to assets never use ./ or ../ because it is not going to run on android.\njust write assets and where the file/img/icon is.\nexample:\n<img src=\"assets/imgs/logo.png\" >\nin this case it is going to run on browser + android\nThats it!. ",
    "beyerleinf": "I will close this since the comment by @IevhenIkonnykov in #471 resolved my issue.. ",
    "bjorkblom": "Hi,\nI'm facing the same issue that the translations doesn't compile when reloaded the page described in #710. The reason for this is is exactly what @njulhb has fixed in this PR, but since the this.getParsedResult method needs the compiled translations, the this.compiler.compileTranslations method in the onComplete callback runs to late.\nSo the fix @njulhb did in the first place actually fixes the issue, and then when this PR was updated to run this.compiler.compileTranslations in the onComplete callback it was broke again and all translations prints the actual functions that needs to be interpolated first.. Can this fix be merged?. Hi @njulhb the PR still has a conflict to be resolved and unfortunately I'm not authorized to merge the fix. @lephyrus could you please merge it when the conflict is resolved?. Thanks @ocombe and GJ @njulhb. Thanks for your reply @lephyrus! The timing in the PR is correct. It runs the compileTranslation right in time. The issue now is that since my compileTranslations method returns an function return {HELLO_WORLD: () => 'compiled'}; I now get [object Object] for all translations. If I return just a string it works, but then there's no possibility to use variables nor adding any pluralize functionality. @lephyrus any thoughts on my last comment?. @lephyrus thanks for your guidance, I've posted a comment in the PR of what the problem is.. Remove line. ",
    "dakolech": "Can we merge this one?. ",
    "BlackZork": "A workaround for this is to exclude default language from extraction, i.e.:\nexport class AppComponent {\n      constructor(translate: TranslateService) {\n        translate.setDefaultLang('none');\n        translate.use('pl');\n      }\n    }\nand in package.json:\n\"extract\": \"ngx-translate-extract --input ./src --output ./src/assets/i18n/{en,pl,de,fr}.json --clean --sort --format namespaced-json\"\nThis way you will see untranslated strings from source instead of empty replacements.. ",
    "ffdybuster": "I don't think this very special use case should result in the default being changed. An empty string is a valid value and should not be treated the same as null (which is the correct value for \"not translated\").\nYou could write a parser plugin which replaces empty strings with null/undefined, or something like that.. I don't know why that doesn't work, but this way it should definitely work:\n.ts\nexport function createTranslationLoader(http: HttpClient) {\n  return new PruningTranslationLoader(http); // specify more arguments if you want\n}\nand then\n.ts\nproviders: [\n        {\n          provide: TranslateLoader,\n          useFactory: (createTranslationLoader),\n          deps: [HttpClient],\n        },\n],\n(We're doing this for TranslateLoader.). I just told you how to use the piece of code @CodeAndWeb pasted, since you had trouble with that. In case that code doesn't work for you, you could try debugging it to find out what the problem is.. Now that getBrowserLang() returns a string or null, shouldn't getBrowserCultureLang() also return a string or null as well?. You should make sure that in case browserCultureLang is undefined, null is returned.\n(I.e. do something like return browserCultureLang || null; at the end.) . ",
    "IterationCorp": "I agree with @gemal this is completely killing the fallback feature!\nI you don't want it as standard feature ok, but anyway we should have the choice to filter out empty string. . ",
    "ds-manish": "@CodeAndWeb \nI added the same code provided above and then added \nproviders: [\n        {\n          provide: TranslateLoader,\n          useClass: PruningTranslationLoader,\n        },\n],\ngot this error\nError: Can't resolve all parameters for PruningTranslationLoader: (?, ?, ?).. @ffdybuster \nBut I want to solve the missing translation issue.\nThis does not solve the missing translation issue.\nbefore I have done in this way.\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nproviders: [\n        {\n          provide: TranslateLoader,\n          useFactory: (createTranslationLoader),\n          deps: [HttpClient],\n        },\n],\nI have translation like this\n// en-US.json file\n\"Close\": \"Close\",\n\"Get Started\": \"Get Started\"\n// da-DK.json file\n\"Close\": \"\",\n\"Get Started\": \"\"\nthis does not show the value for Get Started and Close when i choose da-DK as language.\nI want it to show the key if value is empty. @CodeAndWeb \nThanks, it works now.. ",
    "moravcik": "this is exactly what I needed, thanks @CodeAndWeb\njust sharing more functional version of process function for those who are interested\nfunction process(obj) {\n  return Object.keys(obj)\n    .filter(key => obj.hasOwnProperty(key) && obj[key] !== '')\n    .reduce((res, key) => (res[key] = typeof obj[key] === 'object' ? process(obj[key]) : obj[key], res), {});\n}\n\n. ",
    "abbassiddiqi": "Using the code from above comments, following is more cleaner example.\nCreate a new file /src/app/pruning-loader.ts\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { map } from 'rxjs/operators';\n\nexport class PruningTranslationLoader implements TranslateLoader {\n\n  constructor(\n    private http: HttpClient,\n    private prefix: string = '/assets/i18n/',\n    private suffix: string = '.json') {\n  }\n\n  public getTranslation(lang: string): any {\n    return this.http.get(`${this.prefix}${lang}${this.suffix}`)\n    .pipe(map(\n      (result: object) => this.process(result)\n    ));\n  }\n\n  private process(object: object) {\n    return Object.keys(object)\n      .filter(key => object.hasOwnProperty(key) && object[key] !== '')\n      .reduce((result, key) => (result[key] = typeof object[key] === 'object' ? this.process(object[key]) : object[key], result), {});\n  }\n\n}\n\nAnd then in your app.module.ts file, change the following line\nimport { PruningTranslationLoader } from './pruning-loader';\n...\n\n// required for AOT compilation\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new PruningTranslationLoader(http);     // <--- change here\n}\n\nAssuming you have already configured your module imports like this\nimports: [\n  TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: HttpLoaderFactory,\n      deps: [HttpClient]\n    }\n  })\n  ...\n].\n",
    "aguerere": "That link was found in your website a few hours ago. It seems it has been fixed already there as well. Thanks @ocombe ! . ",
    "LizanLycan": "Ok, I will soon prove this and comment on it. Thanks @yoannjauffroy . ",
    "dave0688": "I kind of have a similar issue. It can't find the desired .json language file:\nIt searches in:\nlocalhost:9000/www/i18n\nbut the language file is in:\nlocalhost:9000/www/target/www/i18n\nSo somehow the path is wrong... This bug came with the most recent angular update I assume.\nCan anybody help please?. ",
    "mtshare": "+1. Any solution for this? I can't build my app with --prod flag!. @polcham Thanks! This fixed for me! @flamasweb . ",
    "flamasweb": "+1. @mtshare that fixed, thanks @polcham!. ",
    "Pefou-flo": "My bad, it's kind of my code that did it !! sorry ;D. ",
    "pvilardo": "Yes, absolutely necessary, no need to test translations in my components.. ",
    "mwootendev": "I created the ngx-translate-testing (NPM: https://www.npmjs.com/package/ngx-translate-testing) module to help ease testing. See if that can help you with your testing setup.. I created the ngx-translate-testing (NPM: https://www.npmjs.com/package/ngx-translate-testing) module to help ease testing. See if that can help you with your testing setup.. ",
    "shlomir": "I'm stuck here as well here. Can you git example how to test it with Karma Jasmin. Thanks. ",
    "mciureanu": "Same here. I use Angular4 + systemjs, maybe it is related to that. I'm not sure, but it might be related to the umd bundle webpack produces, or some dependencies that it enforces. I ended up putting the ngx-translate source code in the project in the end, and it worked fine. I'm sure it's not the best solution though.... ",
    "stefan-vm": "Same issue here. I'm using Angular Seed, added ngx-translate later and now can't run tests. . ",
    "1nzer": "You can use the follow syntax:\n<div [innerHTML]=\"'CUSTOM_KEY' | translate:{value: 'world'}\"></div>. ",
    "nowrap": "I am getting the same error for android:\n```\ncli packages: (C:\\Users\\nowrap\\AppData\\Roaming\\npm\\node_modules)\n@ionic/cli-utils  : 1.19.0\nionic (Ionic CLI) : 3.19.0\n\nglobal packages:\ncordova (Cordova CLI) : 7.1.0\n\nlocal packages:\n@ionic/app-scripts : 3.1.2\nCordova Platforms  : android 6.4.0\nIonic Framework    : ionic-angular 3.9.2\n\nSystem:\nNode : v8.6.0\nnpm  : 5.3.0\nOS   : Windows 10\n\nEnvironment Variables:\nANDROID_HOME : not set\n\nMisc:\nbackend : pro\n\n```\nLooking into the chrome remote tools it seems to be a path issue:\nfile:///android_asset/www/assets/fonts/roboto-regular.woff2\nfile:///assets/i18n/de.json. My fault ;(\nIn app.modules.ts i had to make a change (as mentioned in the docs):\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}. ",
    "Hansel03": "It does not work for me, when I make an NG BUILD and I deploy it in AZURE it does not work\nEnvironment:\n\"@ngx-translate/core\": \"^10.0.1\"\n\"@ngx-translate/http-loader\": \"^3.0.1\"\n\"@angular/core\": \"^7.2.2\",\nBrowser: [all ]\n. I have the same problem with the version of angular 6 and 7 if someone knows how to solve them?\nI only have problems with the construction and deployment on the server\nWhen used in my premises everything works correctly. it works for me \nhttps://stackoverflow.com/questions/44756251/json-language-files-are-not-found-ngx-translate-angular-cli/51121032#51121032. ",
    "Gamboster": "Hello @callawey, Did you find the solution for this issue?\nCould you share it? I have the same problem.. Thank you very much for your response.\nDo you know if I can do something like this ?\nlet message = this.translate.instant('Maximum amount allowed is {{max}}', { max: max });\nWhen I run console.log(message); I get  \"Maximum amount allowed is {{max}}\"\ninstead \"Maximum amount allowed is 35.99\"\nI just trying to use it inside a component.. ",
    "callawey": "hi @Gamboster \nI wrote a class for translation service and inside it i use below method to handle translation\ngetTranslationAsync(key: string | Array<string>, interpolateParams?: Object): string | any {\n        var _result;\n        this.translate.get(key, interpolateParams).subscribe(data => { _result = data; }, () => { return _result });\n        return _result;\n    }\nand inside my components, i set it to a variable like this:\n```\nthis.gT = (key: string, interpolateParams?: Object) => this.translationService.getTranslationAsync(key, interpolateParams);\n```\nafter that, this works:\n```\nthis.gT('testing {{name}}', {name: 'some name'})\n```. ",
    "metatypeman": "Thanks you! I just did not notice this method.. ",
    "almgwary": "678 .",
    "Kamilius": "Same thing. In my case, I'm translating some strings using service instead of a pipe, so I need to automatically change this string if language was changed.. ",
    "dennisroters": "Use .stream() instead of .get()\nhttps://github.com/ngx-translate/core#methods. ",
    "alexander-heimbuch": "Any updates on this? Would be great to have it in the next release.. ",
    "rotemx": "This was an issue with NPM v5.3.0 under Windows 10.\nDowngrading to NPM 5.2.0 solved the issue.. ",
    "wilgert": "You have to either add the real TranslateService or a mock to the providers key. See: https://angular.io/guide/testing#services-with-dependencies. ",
    "sandangel": "I can not make it work too. I have followed the ionic example testing config for my angular app but it just not work:\n```ts\nimport {DebugElement, Injector} from '@angular/core';\nimport {of} from 'rxjs/observable/of';\nimport {\n  TranslateCompiler,\n  TranslateFakeCompiler,\n  TranslateLoader,\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {ListNavComponent} from './list-nav.component';\nimport {async, ComponentFixture, getTestBed, TestBed} from '@angular/core/testing';\nimport {MatListModule, MatIconModule} from '@angular/material';\ndescribe('ListNavComponent', () => {\n  let comp: ListNavComponent;\n  let fixture: ComponentFixture;\n  let de: DebugElement;\n  let el: HTMLElement;\n  let translate: TranslateService;\n  let injector: Injector;\nbeforeEach(\n    async(() => {\n      TestBed.configureTestingModule({\n        declarations: [ListNavComponent],\n        imports: [\n          MatListModule,\n          CommonModule,\n          RouterModule.forChild([]),\n          MatIconModule,\n          TranslateModule.forRoot({\n            loader: {provide: TranslateLoader, useClass: FakeLoader},\n            compiler: {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n          }),\n        ],\n      }).compileComponents();\n  injector = getTestBed();\n  translate = injector.get(TranslateService);\n  translate.use('en');\n\n  fixture = TestBed.createComponent(ListNavComponent);\n\n  comp = fixture.componentInstance;\n\n  de = fixture.debugElement;\n  el = de.nativeElement;\n}),\n\n);\nit('true is true', () => {\n    expect(true).toBe(true);\n  });\n});\nconst translations: any = {LOAD: 'This is a test'};\nclass FakeLoader implements TranslateLoader {\n  getTranslation(lang: string) {\n    console.log(lang);\n    return of(translations);\n  }\n}\n```\nERROR:\n\n. this is simple, I think we can submit a PR. ",
    "Lakston": "Same here, some input would be nice since testing is an important part of any serious app; please provide some documentation on testing, thanks !. If you want to set the language for your whole app, in your AppComponent : \nconstructor(translate: TranslateService) {\n    translate.setDefaultLang('en');\n}. You have to change the http to httpclient in your app.module.ts : \nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http)\n}\n@NgModule({\n  imports: [\n    ...\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],. We've been using ngx-translate with angular 5 for a while now and did not encounter any issues if you refactor your code to use httpclient. ",
    "jfmaeck": "Are you importing the es7 reflect polyfill? If not, you could try if adding the following line to the polyfills.ts fixes your issues:\nimport 'core-js/es7/reflect'; // needed for unit testing\nand you might also want to check you tsconfig.json file for \"emitDecoratorMetadata\": true,. ",
    "Albosonic": "Has anyone solved this yet? I have been banging my head on the key board for the last few hours.. ",
    "herinlakdawala": "Still issue persist for unit testing parameterized API.. ",
    "PowerSupply": "Anyone? Having the same problem trying to set up testing with jest + jest-preset-angular.. ",
    "brunano21": "@ocombe any suggestion here?. Same problem here. Works in one project, it doesn't into another :/\nI have SharedModule that exports TranslateModule.. @ocombe any hint on this, please?. Even though I'm using lazy modules?. Ops, sorry, I meant \"NOT\" :-). So, you are saying to use different parsers and loaders coming from different locations (different src path)?. so, in each module I can call \n```\nTranslateModule.forRoot({\n   ...\n})\n```` \nand that's it, correct?. Hey, so I see an issue when doing what you say.\nI have a module, ModuleA which exports the following:\na TranslateLoader:\n```\nexport class BundleLoader implements TranslateLoader {\n  bundlesToLoad = [  'GenericLabels' ];\nconstructor(private http: HttpClient, private bundleService: BundleService, bundleNames: string[]) {\n    bundleNames.forEach(bundleName => {\n      if (this.bundlesToLoad.indexOf(bundleName) < 0) {\n        this.bundlesToLoad.push(bundleName);\n      }\n    });\n  }\ngetTranslation(lang: string): Observable {\n    const bundlesToLoad = this.bundlesToLoad, bundles = {};\n    const observables = map(this.bundlesToLoad, (bundleToLoad: string) => {\n      return this.bundleService.getBundle(bundleToLoad, lang);\n    });\nreturn Observable.zip(...observables, function () {\n  forEach(arguments, (v, i) => {\n    bundles[bundlesToLoad[i]] = v;\n  });\n  return bundles;\n});\n\n}\n}\na **BundleService**:\nexport class BundleService {\n  constructor(private http: HttpClient) { }\ngetBundle(bundle: string, language: string): Observable {\n    return this.http.get(${SharedConstants.translationBundleServiceUrl}/${bundle}/${language}/bundle)\n      .catch(() => Observable.of({}))\n  }\n}\n```\na BundleParser and a MissingTranslationHandler (not shown here).\nIn ModuleB, we have instead:\nModuleB.module.ts\n...\nimport { BundleService, BundleLoader, BundleMissingTranslationHandler, BundleParser } from 'ModuleA';\n...\nexport function BundleLoaderFactory(http: HttpClient, bundleService: BundleService) {\n  return new BundleLoader(http, bundleService, ['BundleB1','BundleB2', 'BundleB3']);\n}\n...\n@NgModule({\n    declarations: [  ... ],\n    imports: [\n        ....\n        TranslateModule.forRoot({\n            loader: {provide: TranslateLoader, useFactory: BundleLoaderFactory, deps: [HttpClient, BundleService]},\n            parser: { provide: TranslateParser, useClass: BundleParser },\n            missingTranslationHandler: {provide: MissingTranslationHandler, useClass: BundleMissingTranslationHandler }\n        })\n       ....\n    ],\n    exports: [ ... ]\n})\nexport class ModuleB{\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ModuleB,\n      providers: [ ... , ServiceA, ServiceB, ... ]\n      ]\n    }\n  }\n}\nFinally, in AppModule I have:\napp.module.ts\n...\nimport { BundleService, BundleLoader, BundleMissingTranslationHandler, BundleParser } from 'ModuleA';\n...\nexport function BundleLoaderFactory(http: HttpClient, bundleService: BundleService) {\n  return new BundleLoader(http, bundleService,  ['AppBundle1','AppBundle2', 'AppBundle3']);\n}\n...\n@NgModule({\n    declarations: [  ... ],\n    imports: [\n        ....\n        TranslateModule.forRoot({\n            loader: {provide: TranslateLoader, useFactory: BundleLoaderFactory, deps: [HttpClient, BundleService]},\n            parser: { provide: TranslateParser, useClass: BundleParser },\n            missingTranslationHandler: {provide: MissingTranslationHandler, useClass: BundleMissingTranslationHandler }\n        })\n       ....\n    ],\n    providers: [ AppService1, AppService2 ]\n})\nexport class AppModule {}\nNow, what's the issue?\nThe issue is that the bundles (which contains the translations) loaded are only AppBundle1, AppBundle2 and AppBundle3. So any translation happening in moduleA will fallback within the BundleMissingTranslationHandler. In this way it's like the moduleB cannot/is not able to retrieve its translation. Indeed, looking to the Chrome DevTools's Network tab, I see requests only for AppBundle1|2|3 and not for Bundle1|2|3.\nWhat's wrong with this setup?\n. I think I'm not following you. Bundle1|2|3 are json resources containing the translations.... alright, I'll give it a try soon, thank you, Oliver.. ",
    "endamaco": "+1 for this. ",
    "jfpcarreira": "OK, I have updated the loader (@ngx-translate/http-loader) and I'm now able to use the HttpClient in stead. But doing this I have 2 minor problems that bother me a bit:\n\nIn order to use the loader I had to also add the dependency with @ngx-translate/core\nI can't remove the @angular/http dependency. If I do it I have the following error: \"ERROR in C:/Pessoal/tvpt2/client/node_modules/ng2-translate/index.d.ts (2,22): Cannot find module '@angular/http'.\". Yes, I know, and that's what I did. But I cannot remove the dependency from my package.json. If I npm uninstall @angular/http --save and then run the app I have the error that I have described before. This means that you can use the ng2-translate with the loader from ngx-translate and do any reference to Http on your code, but your project will still need that dependency.\nIn order to have a cleaner solution ng2-translate should do a new version where they migrate all the Http to HttpClient.. Oh, ok, I didn't realised that ngx-translate was the evolution of ng2-translate. Just migrated and all works just as expected! Thanks! . \n",
    "sancelot": "you can remove @angular/http reference\napp.module.ts \n```javascript\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport {TranslateService, TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nexport function createTranslateLoader(http: HttpClient) {\n        console.log(\"in createTranslateLoader\");\n        return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n@NgModule({\n  imports: [\n    BrowserModule,\n    // Include it under 'imports' in your application module\n    // after BrowserModule.\n    HttpClientModule,\n    NgbModule,\n    TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [HttpClient]\n            }\n        }),\n````. ",
    "davidmartinezros": "Hi @Pomanks,\nI have the same problem.\nI could load some translate json files for translate a part of the web.\nBut the other part of the content comes from a json array file of projects.\nI put all the array in the same file of the other transate texts and I try to execute:\n{{ 'data[0].titol'  | translate }}\nBut it return the value 'data[0].titol'.\nIf I do this code:\n{{ 'data[0].titol'  | translate }}\n...\npublic showAlert() {\n      this.translate.get(\"data\").subscribe(\n        key => {\n          window.alert(key);\n        }\n      );\n}\nIt return an array of objects, so the data is loaded, but I don't know to access it.\nAny solution?\nThanks in advanced,\nDavid. ",
    "ambermishra1988": "{\n\"news\": {\n    \"label\": \"news\"\n  },\n  \"page\": [{\n    \"home\": [{\n      \"menu\": {\n        \"topLevel\": [{\n            \"newsLabel\": \"News\",\n        \"subLevel\": [{\n          \"linkLabel\": \"News Sub level\",\n\n        }, {\n          \"linkLabel\": \"News Sub level\",\n\n        }]\n      },\n      {\n        \"coinsLabel\": \"COINS\",\n        \"coinsUri\": \"https://qoinPro.com/news\",\n        \"subLevel\": [{\n          \"linkLabel\": \"News Sub level\",\n\n        }, {\n          \"linkLabel\": \"News Sub level\",\n\n        }]\n      },\n      {\n        \"atmsLabel\": \"ATMs\",\n\n        \"subLevel\": [{\n          \"linkLabel\": \"News Sub level\",\n\n        }, {\n          \"linkLabel\": \"News Sub level\",\n\n        }]\n      },\n      {\n        \"appLabel\": \"APP\",\n\n        \"subLevel\": [{\n          \"linkLabel\": \"News Sub level\",\n\n        }, {\n          \"linkLabel\": \"News Sub level\",\n\n        }]\n      },\n      {\n        \"aboutusLabel\": \"ABOUT US\",\n\n        \"subLevel\": [{\n          \"linkLabel\": \"News Sub level\",\n\n        }, {\n          \"linkLabel\": \"News Sub level\",\n\n        }]\n      }\n    ]\n  }\n}]\n\n}]\n}\n{{ 'page[0].home[0].menu.topLevel[0].newsLabel' | translate | json }}\nNot able to access value in json array but i am able to access normal nested json. . ",
    "jlopez994": "The parser already works with nested JSON array so this issue can be closed.\nFor whom need to know how, here goes an example:\nJSON FILE:\n{\n  \"key\": [\n    { \"item\": \"value1\" },\n    { \"item\": \"value2\" }\n  ]\n}\nCODE:\n{{ 'key.0.item' | translate }} // Returns value1\n{{ 'key.1.item' | translate }} // Returns value2\nHope it helps :)\n. ",
    "seriana": "@xuko  did you manage to resolve the merge issue?  I have the same problem.\n. ",
    "AlexAlexGoTO": "Same question.... Hi guys. I fix it in my situation but I'm not sure that it help you\n```\nTranslatePipe.prototype.updateValue = function (key, interpolateParams, translations) {\n  var this = this;\n  var onTranslation = function (res) {\n      _this.value = res !== undefined ? res != key ? res: \"\" : key; //_rewrited line\n      _this.lastKey = key;\n      _this._ref.markForCheck();\n  };\n  if (translations) {\n      var res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n          res.subscribe(onTranslation);\n      }\n      else {\n          onTranslation(res);\n      }\n  }\n  this.translate.get(key, interpolateParams).subscribe(onTranslation);\n}\n```\n_this.value = res !== undefined ? res != key ? res: \"\" : key;\nIn my situation I just skip value in pipe if pipe-value == translation key.\nFor example\n{{Labels.Name | translation }}\nin my code if res == Labels.Name i just set empty string - but if value != Labels.Name\nI just set Value.\nSo pipe waiting for value that not equeal translation key Labels.Name\nI add thit prototype in app.module. But i think You can add it anywhere. ",
    "helgus": "may be should make it hidden by default and in ts make listener and in this listener activate this block ?\n. ",
    "MJomaa": "Is there an update on this matter?. @endless-shining @Maryna-Yelakova Not 100% sure if it fixed it for me, but I don't see the keys anymore when I initialize the translation stuff within APP_INITIALIZER.\n. @lazabazsa \nThat's what I do.  (LocalSettingsService= custom service, Store = ngrx store)\nproviders: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: appInitializerFactory,\n      deps: [TranslateService, LocalSettingsService, Store, Injector],\n      multi: true\n    }\n ]\nand\nexport function appInitializerFactory(translateService: TranslateService, localSettingsService: LocalSettingsService, store: Store<AppState>, injector: Injector): () => Promise<any> {\n  return () => new Promise<any>((resolve: any) => {\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    locationInitialized.then(() => {\n      translateService.addLangs(['en', 'de']);\n      translateService.setDefaultLang('en');\n      let selectedLanguage = localSettingsService.getSelectedLanguage();\n      if (!selectedLanguage) {\n        const browserLang = translateService.getBrowserLang();\n        selectedLanguage = browserLang.match(/en|de/) ? browserLang : 'en';\n      }\n      translateService.use(selectedLanguage).pipe(take(1)).subscribe(() => store.dispatch(new HydrateSelectedLanguageAction(selectedLanguage)),\n        err => console.error(err), () => resolve(null));\n    });\n  });\n}. ",
    "lifenautjoe": "This is such a basic thing to have.. Any update on this?. ",
    "endless-shining": "Has anyone found a solution to this issue?. ",
    "Maryna-Yelakova": "Any updates on this?. @MJomaa  it does not  work for me. @ajmccallum I use TranslateHttpLoader and my loader for translation files looks like this:\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './static/dist/browser/assets/i18n/all/', '.json');\n}\nI don't have this kind of imports:  \"import en from en.json\" but still have an issue with translate pipe:\nThe pipe 'translate' could not be found in production mode. @ajmccallum It looks very similar but i got this error after angular upgrade to v7 and only in production mode. Everything worked fine before that. I downgraded angular to 6 version and now everything works. But i would like to have possibility upgrade angular packages. @ajmccallum thank you so much! The problem was because of Ivy. I had   \"enableIvy\": true\nin my tsconfig.json. It's my bad. . ",
    "lazabazsa": "@MJomaa Could you please share your code snippet? I tried it, but couldn't make it work. Thanks!. ",
    "errorstudent": "thanks @MJomaa, it's works . ",
    "odykyi": "@thorsten @wundo FYI. ",
    "nhoctanker": "+1. ",
    "dbaranovsky": "@ocombe , done please check if that's what you expected. getBrowserCultureLang() is now returning string or null to make it consistent. @ocombe, @ffdybuster, could you please review the changes?. @ocombe , when do you think it can be merged?. fixed. ",
    "patrickfav": "How is the status of this PR?. ",
    "thongnx6": "\nCurrently, I'm downloading the translations using an api call, not an static json file.\n\nthat's great, could you teach to me how to implement solution \ud83d\ude4f \n. ",
    "Scipionh": "Cheers mate. ",
    "giorgiopiatti": "@chandansutradhar2 This error happens because in Nativescript you must import the NativeScriptHttpModule in order to use Http . . ",
    "renestalder": "I used the correct NativeScriptHttpModule, also added NativeScriptHttpClientModule. No luck getting it working.\nFollowed the comment here and got it working with version 8.0.0.\nhttps://github.com/ngx-translate/core/issues/595#issuecomment-377226728. Honestly, I don't think switching back one major version is \"resolving the issue\". This problem still exists when used with the latest versions provided in the README.. Did you found a solution, @mozi22? I just wonder, I upgraded from version 5 to version 9 with the migration guide. Everything seems in place, but I only get empty outputs.\nAnd it worked before with version 5.. ",
    "chandansutradhar2": "I am really frustrated with native script.  Ionic with all its short coming\nis much better than ns\nOn Wed, May 23, 2018, 17:03 Ren\u00e9 Stalder notifications@github.com wrote:\n\nHonestly, I don't think switching back one major version is \"resolving the\nissue\". This problem still exists when used with the latest versions\nprovided in the README.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/696#issuecomment-391314675,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMz_nji-MkTqBGfejjpNJezF_MMUunanks5t1UkJgaJpZM4Pu__4\n.\n. \n",
    "jotatoledo": "Isnt that a different lib?. ",
    "mabdelfattah": "Sorry, My mistake, I found that I was using translateService.use() in a pipe by mistake that was overriding the language.. ",
    "beradrian": "I don't think there's any standard way to do this. You can create a UI of your own choice - I think it would be a nice OS project on its own.\nYou have to keep in mind to reload the language after editing, taking into account that you're doing this into the same page/application.. You have this method in TranslateService\npublic use(lang: string): Observable<any> {\n// don't change the language if the language given is already selected\nif (lang === this.currentLang) {\n  return of(this.translations[lang]);\n}\n\nlet pending: Observable<any> = this.retrieveTranslations(lang);\n\nif (typeof pending !== \"undefined\") {\n  // on init set the currentLang immediately\n  if (!this.currentLang) {\n    this.currentLang = lang;\n  }\n\n  pending.pipe(take(1))\n    .subscribe((res: any) => {\n      this.changeLang(lang);\n    });\n\n  return pending;\n} else { // we have this language, return an Observable\n  this.changeLang(lang);\n\n  return of(this.translations[lang]);\n}\n}\n\nI would modify it to \nprivate currentLangSubscription: Subscription;\n\npublic use(lang: string): Observable<any> {\n// don't change the language if the language given is already selected\nif (lang === this.currentLang) {\n  return of(this.translations[lang]);\n}\n\nlet pending: Observable<any> = this.retrieveTranslations(lang);\n\nif (typeof pending !== \"undefined\") {\n  // on init set the currentLang immediately\n  if (!this.currentLang) {\n    this.currentLang = lang;\n  }\n\n  if (this.currentLangSubscription) {\n    this.currentLangSubscription.unsubscribe();\n  }\n\n  this.currentLangSubscription = pending.pipe(take(1))\n    .subscribe((res: any) => {\n      delete this.currentLangSubscription;\n      this.changeLang(lang);\n    });\n\n  return pending;\n} else { // we have this language, return an Observable\n  this.changeLang(lang);\n\n  return of(this.translations[lang]);\n}\n}\n\nSimilarly you can do the same for default language.. Yes, sure I can submit a PR if you want. Just let me know. Thanks!. ",
    "lucasbasquerotto": "@TeodorKolev I think that is more of a syntactic problem, because you can't define an object that way in typescript/javascript. But you can do the following:\ntypescript\nlet myObj = {};\nmyObj[MESSAGES.CHECKED] = '{{value}}';\ntranslate.setTranslation('en', myObj);. ",
    "jgpacheco": "Approved and merged #985  . ",
    "cvaliere": "I'm also using this gettext-ish approach, where the \"key\" is actually a real text, like this:\n<span translate>Level {{level}}</span>\nI'm pretty sure it used to work with previous versions of angular and/or ngx-translate. I noticed it doesn't work only a few days ago.. @mciureanu did you find a way to make it work?\n@biesbjerg it seems to me that you tried to achieve almost the same thing; did you succeed?\nthanks!. ok, so indeed the updated version of the snippet works (https://github.com/ngx-translate/core/issues/340#issuecomment-280601290)\nthough, as also said in that issue,\n<span>{{ 'Hello { name }' | translate: { name: 'Kim' } }}</span> works, but not <span translate [translateParams]=\"{name: 'Kim'}\">Hello { name }</span>\n@biesbjerg did you find a way to make this second syntax also work, or you just go with the 1st one (and it's already great, thank you for this!). angular won't allow something like <span>Hello {name}</span>\nit generates\nERROR Error: Uncaught (in promise): Error: Template parse errors:\nUnexpected character \"EOF\" (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.) (\". yes, this works\nbut\n<button ion-item detail-none (click)=\"onLogout()\">\n    <ion-icon name=\"log-out\" item-left></ion-icon>\n        <span translate [translateParams]=\"{email: (user$ | async)?.email}\">Log out ({email})</span>\n</button>\nwould generate the error above. ",
    "webmutation": "I have the translation working with a translate pipe, changing languages changes the translation. But in the source code (ctrl+u) it still shows up as page.home.title I was expecting the server to do the translation and send it back already rendered with the translation. ",
    "keradus": "Changing the default value of public interface looks like a BC breaker. sure, done. ",
    "FlawaCLV": "@eugensunic I've manage to make it work!\nBut the issue now is that my template doesn't update a second time... {{ 'KEY' | translate }} doesn't change.\n```\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { TranslateLoader } from 'ng2-translate';\nimport { Subject, Observable } from 'rxjs';\nimport 'rxjs/operators/map';\n@Injectable()\nexport class TranslationsLoaderService implements TranslateLoader {\n    private subject = new Subject();\n    private translations = {};\nconstructor(private http: Http) { }\n\ngetTranslation(lang: string) {\n    // To simplify for this issue I've removed all the code that gets the observable\n    // This is where the translations are defined for the 2nd time, but not updating the template...\n    Observable.subscribe((translations) => {\n        this.subject.next(Object.assign(this.translations, translations));\n    });\n\n    this.http.get(`https://www.website.com/translations/${lang}.json`)\n        .map((res) => res.json())\n        .toPromise()\n        .then((translations) => {\n            this.translations = translations;\n            this.subject.next(this.translations);\n        });\n\n    return this.subject.asObservable();\n}\n\n}\n```\n@eugensunic & @CodeAndWeb any idea ?. @CodeAndWeb I managed to make it work. Actually I was using the npm package ng2-translate, once updated to @ngx-translate/core package it worked! My mistake.. ",
    "itcozum": "I'm having the same issues. I'm currently using @ngx-translate/core@^7.2.0\nhow do I fix this problem?\n. ",
    "FatemeFazli": "@ocombe  thanks, you saved my day. this worked for me.. ",
    "ghatfan99": "Hello,\nI am trying to update my project from Angular 4.0.0 to Angular 5.0.0 like in https://update.angular.io/ when I try to serve my project, I have the same issue, you have said to change the dependency of ngx-translate to v 8? did you mean install it? because in my ppackage.json I have not this package?. ",
    "sumegha26": "\nChange your dependency to @ngx-translate/core@^8.0.0\n\n@ocombe , my issue with OpaqueToken not resolved yet. ",
    "Jayanzhou": "Thank for all, this issue is fixed.\nIf you meet the same problem, pls contact me. Hope i can help u.. @erhimanshugarg \nAt the handle function of your missinghandler class which implements MissingTranslationHandler, \nyou should use translateService.parser.interpolate to parser the translate key. code like blow;\n```javascript\nexport class TranslationFailoverHandler implements MissingTranslationHandler {\nprivate commonTranslation = {};\n\nconstructor(private http: Http, @Inject(LOCALE_ID) locale: string) {\n   // some code here\n}\n\nhandle(params: MissingTranslationHandlerParams): string {\n    const result = params.key.split(\".\").reduce((pre, cur) => !!pre ? pre[cur] : null, this.commonTranslation);\n\n// variable result is the translate key\n        return !!result ? params.translateService.parser.interpolate(result, params.interpolateParams) : params.key;\n    }\n}\n```. ",
    "FahadAlbukhari": "Just updated to new version (npm i  @ngx-translate/core --save). ",
    "etiennetalbot": "I can confirm it's still the case with the following:\n\n@ngx-translate/core version: 9.1.1\nAngular version: 5.2.0\nBrowser: all of them\n\nIt might not seem like a big deal, but when you're throwing errors when a translation is missing, well... because of this it keeps firing errors when there shouldn't be any problem.. I found out that it doesn't necessarily needs to be a button to fail...\nThis works: <button translate>SOMETHING</button>\nThis fails: <button translate> SOMETHING </button>\nThis fails:\n<button translate>\n    SOMETHING\n</button>\nEven when using preserveWhitespaces: false in the component.\nI'm also using Angular 6.\nngx-translate/core 10.0.1 and 10.0.2 have this problem, but not 10.0.0\nSo this problem appeared when this was merged: https://github.com/ngx-translate/core/commit/cf45ef5\nI feel like the problem might be that line 82 compares the content variable instead of the trimmedContent variable.... It seems that changing if (content !== node.currentValue) { for if (trimmedContent !== node.currentValue) { in translate.directive.ts at line 82 fixes the problem... But it's practically reverting to 10.0.0: spaces in nodes are not an issue anymore, but spaces in the translate values in the json files are back to being problematic. Surely there's a way to make both work.... Found a fix for both problems. Pull request here: https://github.com/ngx-translate/core/pull/870. ",
    "LucasBrazi06": "Works perfect !\nThanks. ",
    "milenkovic": "@ocombe what if we are using localization just for date formatting? \nWe need to import all locales? And is there any easier from loading one by one?\nimport { registerLocaleData } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\nimport localeDE from '@angular/common/locales/de';\n// other locales...\nregisterLocaleData(localeFr);\nregisterLocaleData(localeDE);\n// .... ",
    "sefo": "This is a huge issue in our project. We need to support hundreds of languages. There is no clean solution to this problem?. ",
    "arsewizz": "\"@ngx-translate/core\": \"^6.0.1\". ",
    "Nitansh44": "since v4.0.0 because it does not support type information, use InjectionToken<?>. ",
    "Overv": "I don't want to change the language for the whole app, just for one specific translation (to show the English word next to the localized word).. ",
    "SurelyPlus": "We need the same feature and are searching for an easy way to do this kind of multiple-langs in a module.\nMaybe you could try this in your component and bind it to the ui:\nvar locale = 'en';\ntranslate.getTranslation(locale).subscribe(value => console.log(value.key));. ",
    "joselee": "Sorry, I had searched on Google for a while, then the issues list as well, but I had incorrect filters on.\nAnyway, I'm not sure what I am doing wrong, but the problem is still occurring for me after updating to the latest versions:\n\"@ngx-translate/core\": \"^8.0.0\",\n\"@ngx-translate/http-loader\": \"^2.0.0\",\nNote: I've cleared my npm cache, deleted node modules, deleted yarn.lock, and re-fetched all dependencies fresh.\n. ",
    "dkabul": "I got the same issue since Im trying to create an external module which uses translation for template. Some of the pipes and service cannot be found.. I tried many variations in the last couple of days. The only thing thats working is to declare TranslateModule.forRoot() in the library you are trying to decouple. \nI didnt get any runtime error but the strings didnt get translated even the translation files is found\nfooter.module.ts\n```\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FooterComponent } from './footer.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {WindowRefService} from '../service/window-ref/window-ref.service';\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule.forRoot()\n  ],\n  declarations: [FooterComponent],\n  providers: [WindowRefService],\n  exports: [FooterComponent]\n})\nexport class FooterModule { }\n```\napp.module.ts\n```\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppComponent} from './app.component';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {TranslateLoader, TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {CommonModule} from '@angular/common';\nimport {FooterModule} from './modules/footer/footer.module';\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/', '.json');\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader) ,\n        deps: [HttpClient],\n      },\n    }),\n    FooterModule\n  ],\n  providers: [TranslateService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n```\nfooter.component.html\n```\nimport {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {WindowRefService} from '../service/window-ref/window-ref.service';\nimport {TranslateService} from '@ngx-translate/core';\n@Component({\n  selector: 'bd-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n  providers: [\n  ],\n})\nexport class FooterComponent implements OnInit {\n  public statistic = 0;\n  private _window: Window;\n  public footermenu1: boolean;\n  public footermenu2: boolean;\nconstructor(windowRef: WindowRefService,\n              private translateService: TranslateService) {\n  }\n_statistic(): boolean {\n    return !!(this.statistic && this.statistic > 0);\n  }\nngOnInit() {\n  }\nscrollToTop() {\n    this._window.scrollTo(0, 0);\n  }\ntoggleFooterMenu1() {\n    return this.footermenu1 = !this.footermenu1\n  }\ntoggleFooterMenu2() {\n    return this.footermenu2 = !this.footermenu2\n  }\nngAfterViewInit() {\n    this.translateService.setDefaultLang('de');\n    this.translateService.use('de');\n}\n}\n```. Hi Ovidio,\nIm still trying to put it on the right way now. Im on the same ship. Ill give you an update if I got it right. Hi Ovidio,\nI really should read the official angular.io docs first. It works now with forRoot() in your shared module which injects your service there. Also you dont need to provide it TranslateService in your parent app since the providers in class export take care of it.\nSo now it looks like this.\nfooter.module.ts\n```\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FooterComponent } from './footer.component';\nimport {TranslateLoader, TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {WindowRefService} from '../service/window-ref/window-ref.service';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {BrowserModule} from '@angular/platform-browser';\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/', '.json');\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader) ,\n        deps: [HttpClient],\n      },\n    }),\n  ],\n  declarations: [FooterComponent],\n  providers: [WindowRefService],\n  exports: [FooterComponent]\n})\nexport class FooterModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: FooterModule,\n      providers: [TranslateService]\n    };\n  }\n}\napp.module.ts\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppComponent} from './app.component';\nimport {FooterModule} from 'lib-playground';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {TranslateModule} from '@ngx-translate/core';\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/', 'json');\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    FooterModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n```\nFor the angular.io docs, which maybe helps: \nhttps://angular.io/guide/ngmodule#why-userservice-isnt-shared\nhttps://angular.io/guide/ngmodule-faq#q-why-bad and onwards. @ocombe would love to help but need your guidance to make one. . @ocombe okay thanks. gonna do it after I finish todays obligations :). Hi @Abhishek-Kanitkar \nin your export module class forRoot() method, you need to put TranslateService as provider. \nexport class FooterModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: FooterModule,\n      providers: [TranslateService]\n    };\n  }\nI havent got the time to build a repo for it. But Ill remind myself to make one.. Hi @ovione \nabout the .json translation file: I still put it on the app side, since the app on runtime still refers /assets into my app. So I suppose the next step is to try the app side loader to point into the node_modules /assets directory. This thing still bothers me.\nother thing is: refering to https://github.com/ngx-translate/http-loader, if you use HttpLoaderFactory, the translation file should be put in the /assets/i18n/en.json. Did you try to put it under /src/assets/i18n/en.json maybe?\nin your client module you dont need to put TranslateModule.forRoot(...) anymore. it should only pull TranslateModule from your TranslateLibModule\n. Hi @Abhishek-Kanitkar @ovione, \nI opened a playground https://github.com/dkabul/translate-packagr-playground. Maybe you would find it useful. @Abhishek-Kanitkar I did try to start it and it renders. It could be that I missed something. \nyes, ngx-translate is used in lib-playground, and the components FooterComponent is the one which have the translated string. \nCan you tell me which step youve done?. @Abhishek-Kanitkar I think that the issue. \nI let the angular-cli pull the translation file from the library module. As soon as a new file in client module exist, the old is being overriden. \nI still dont know how to put together 2 json files over angular cli in assets. The quickest fix is to build a job which puts these two file together and deploy it in your client module under \u00b4assets\\i18n*.json`. \nDo you maybe have an idea?. Hi @Abhishek-Kanitkar about those issue please read comment and refer to this issue\n. @Abhishek-Kanitkar please look into your .angular-cli.json and check if your new-playground assets file is loaded. As soon as putting the right json under 'assets/i18n/de.json and defining assets in your angular-cli, your translation file would be overriden. Hi @Abhishek-Kanitkar @ovione,\nas I said, if you want to put it on the client side (new-playground), the only suggestion I can give right now is to create your translation json file under src -> assets -> i18n on the client side. \nThe next step is to modify the .angular-cli.json in the client side and put this \"assets\" under apps.assets so it will look like this:\n \"apps\": [\n    {\n      \"root\": \"src\",\n      \"outDir\": \"dist\",\n      \"assets\": [\n       \"assets\",\n        { \"glob\": \"**/*\", \"input\": \"../node_modules/lib-playground/src/assets/i18n\", \"output\": \"./assets/i18n/\" },\n        \"favicon.ico\"\n      ],\n]\nThen you need to restart your app.\nThe issue with 2 translation file: e.g. en.json in client and library and merging this file together, you need to write a small script file. Otherwise the en.json from the library is overriden with the client en.json file.. ",
    "mnill": "My solution\n```\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\nimports: [\n    ...\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n   ...\n  ],\n```\nJust add HttpClientModule to your imports. ",
    "nasr18": "I din't do anything. But when i opened my lap next day, it works fine just like it worked on angular4. Don't know why it didn't worked on first day. I'm closing this issue.. ",
    "AlejandroCuevas": "I still have the same issue and I'm very stuck on it... Has anyone any new about that? Great thanks in advance. ",
    "hkashlan": "@dkabul I have same issue, \nmy case was:\n1. I have an angular library based on https://github.com/dherges/ng-packagr\n\nI added it to externals as @ovione commented : https://github.com/dherges/ng-packagr/issues/259. \n",
    "Muralik2": "Issue with ngx-translate 9.1.1 version\nI am using angualar 5\n./node_modules/@ngx-translate/core/fesm5/ngx-translate-core.js\nModule build failed: Error: ENOENT: no such file or directory, open node_modules\\@ngx-translate\\core\\fesm5\\ngx-translate-core.js'. ",
    "mhosman": "Sorry I removed my question, I was just investigating the issue. The problem is when you import the library directly into an interceptor (from constructor). In order to use the library in the interceptor, you must inject it and remove it from the constructor.. Same issue here. I want to detect if a json i18n failed to download.. Thanks for the release!!! I don't know why but since I upgraded I get Http failure response for http://localhost:4200/assets/i18n/en.json: 404 Not Found. Sorry, the 404 Not found is a problem with the Angular-Cli 6 RC01 and RC02, not a problem with this library.. ",
    "ivandatio": "Was my fault, i wasn't returning the results on the \"map\" inside intercept method. So jsons was passing over my interceptor without being exposed. \n```\n@Injectable()\nexport class HttpApiInterceptor implements HttpInterceptor {\nconstructor () {\n}\n\nintercept (req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req)\n        .map(res => {\n            if (res instanceof HttpResponse) {\n                // If response is \"204 Not Content\" then returns an empty array list\n                if (res.status === 204) {\n                    return [];\n                }\n            }\n            return res;  <--- I wasn't returning nothing here\n        });\n}\n\n}\n```\nClosed!. This is my final intercept method:\nintercept (req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(req)\n            .map(res => {\n                if (res instanceof HttpResponse) {\n                    // If response is \"204 Not Content\" then returns an empty array list\n                    if (res.status === 204) {\n                        const result: any = res;\n                        result.body = { data: [] };\n                        return result;\n                    }\n                }\n                return res;\n            })\n}\nAnd I'm seeing that on imports:\nTranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: createTranslateLoader,\n                deps: [Http] <---- It should be HttpClient\n            }\n        }),. ",
    "MerkulovDev": "@ivandatio \n I have same problem. But your solution doesn't helped me. \n```\nimport {Observable} from 'rxjs/Observable';\nimport {Injectable} from '@angular/core';\nimport {HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse, HttpParams, HttpResponse} from '@angular/common/http';\nimport 'rxjs/add/operator/first';\nimport {SessionStorageService} from 'ng2-webstorage';\nimport { ToasterService } from 'angular2-toaster';\nimport {Router} from '@angular/router';\n@Injectable()\nexport class HttpInterceptorService implements HttpInterceptor {\n    private toasterService: ToasterService;\nconstructor(\n    public router: Router,\n    private sessionStorage: SessionStorageService,\n    toasterService: ToasterService\n) {\n    this.toasterService = toasterService;\n}\n\nintercept(req: HttpRequest<any>, next: HttpHandler): any {\n    const url = '';\n    req = req.clone({\n        url: url + req.url,\n        // responseType: 'text',//needed to avoid problem witch shows 201 status as error. don't forget to JSON.parse data\n        headers: req.headers.set('Authorization', this.sessionStorage.retrieve('access_token'))\n    });\n    return next.handle(req)\n        .map(res => {\n            console.log('result', res);\n            if (res instanceof HttpResponse) {\n                // If response is \"204 Not Content\" then returns an empty array list\n                if (res.status === 204) {\n                    return [];\n                }\n            }\n            return res;\n        });\n}\n\n}\napp.module\n...\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n...\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        appRouter,\n        ToasterModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: createTranslateLoader,\n                deps: [Http]\n            }\n        }),\n        AuthorizationModule,\n        Ng2Webstorage,\n        BsDropdownModule.forRoot(),\n        TooltipModule.forRoot(),\n        ModalModule.forRoot(),\n        SidebarModule.forRoot(),\n        BrowserAnimationsModule\n    ],\n    declarations: [\n        AppComponent,\n        ...APP_CONTAINERS,\n        ...APP_COMPONENTS,\n        ...APP_DIRECTIVES\n    ],\n    providers: [\n        {provide: HTTP_INTERCEPTORS, useClass: HttpInterceptorService, multi: true},\n        CardService,\n        TokenService,\n        MainRequestService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```. @aitboudad If I'm trying to use your variant. I get \n\nERROR in http-interceptor.service.ts (16,9): Type 'Observable | H...' is not assignable to type 'Observable>'.\n  Type 'any[] | HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse | HttpUserEven...' is not assignable to type 'HttpEvent'.\n    Type 'any[]' is not assignable to type 'HttpEvent'.\n      Type 'any[]' is not assignable to type 'HttpUserEvent'.\n        Property 'type' is missing in type 'any[]'.\n. oh. my  mistake. i was trying to load translation with old http. and forgot to revert changes,\nthx for fast reply. . \n",
    "virlliNia": "Hello,\nI have a related problem with this topic. HttpLoader has been working well until I add HttpInterceptor service to add header authentication token to my http request. It takes all \"translations request\" but it is not necessary.\nI try to filter http request but it is impossible and it overloads the app. \nAny suggestions, please?\nheaderInterceptorts\n```import { Injectable } from '@angular/core';\nimport {\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { mergeMap } from 'rxjs/operators';\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService) {}\nintercept(\n    request: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\nreturn this.auth.getToken().pipe(\n  mergeMap((token: string) => {\n    if (token) {\n      // clone and modify the request\n      request = request.clone({\n        setHeaders: {\n          FIREBASE_AUTH_TOKEN: token\n        }\n      });\n    }\n    console.log(request);\n    return next.handle(request);\n  })\n);\n\n}\n`} \n```\napp.module.ts\n```\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    MaterialModule,\n   SharedModule.forRoot(),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HeaderInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n. ",
    "PavelFoujeu": "Finally got a solution to make Translation work with HttpInterceptors ..\n1-)  First change the createTranslateLoader wich depends on HttpClient methods in app.modules.ts  to use custom translateHttpLoaderFactory wich depends on HttpBackend .\n=>> relace\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n==> By\nexport function translateHttpLoaderFactory(httpBackend: HttpBackend): TranslateHttpLoader {\n  return new TranslateHttpLoader(new HttpClient(httpBackend));\n}\n2-) in your app.modules inports array use the new TranslateLoder Factory\n=>> replace\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      }\n    })\n==> With\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: translateHttpLoaderFactory,\n        deps: [HttpBackend]\n      }\n    })\nand you are ready to go. \ud83d\udc4d . ",
    "Niavart": "Issue was coming from code push... Silently breaking ngx-translate on device only.... ",
    "lolaswift": "Update: by loading the translate loader on every page seems to have solved my issue\nBut it shouldn't be necessary, is it?\nhttps://forum.ionicframework.com/t/ngx-translate-is-broken-when-used-with-ionic-lazy-loading/112624\nCan you please clarify what should be the right way of fixing the issue.. ",
    "batesy87": "As explained here https://forum.ionicframework.com/t/ngx-translate-is-broken-when-used-with-ionic-lazy-loading/112624/11 this worked for me. The loader is only required on pages that can set the language. ",
    "mcattle": "Prior to the upgrade to ngx-translate 9.0.0 (from 8.0.0), we were getting an exception that was identical to this one at the application startup.. I'm afraid the repo is not publicly accessible.  I'm loading the library in a fairly textbook manner:\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http);\n}\n\nlet imports = [\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n        loader: {\n            provide: TranslateLoader,\n            useFactory: HttpLoaderFactory,\n            deps: [HttpClient]\n        }\n    }),\n    ...\n]\n\n@NgModule({\n    declarations: [\n        ...\n    ],\n    entryComponents: [ ... ],\n    imports: imports,\n    providers: [\n        ...\n    ],\n    bootstrap: [AppComponent]\n})\n\nMy tsconfig is as follows:\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"outDir\": \"./dist/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"node_modules/@types\"\n    ],\n    \"lib\": [\n      \"es2016\",\n      \"dom\"\n    ]\n  },\n  \"angularCompilerOptions\": {\n    \"preserveWhitespaces\": false\n  }\n}\n\n. We're using 1.5.4 of the CLI.. The issue was the inclusion of the following scripts in \"apps\" section of .angular-cli.json:\n\"scripts\": [\n    \"../node_modules/@ngx-translate/core/bundles/core.umd.js\",\n    \"../node_modules/@ngx-translate/http-loader/bundles/http-loader.umd.js\"\n],\n\nRemoving those scripts removed the error.. ",
    "ovione": "hello DKabul\nthanks for trying :)\nI tried with different combinations but without any results.\nLike you also said if in the library I put TranslateModule.forRoot()\nit doesn't throw errors but I can't get the transalations from inside the library.\nThe code is put as is and not translated.\nIts a pitty\ncheers\nOvidio\n. hi \nthis is not working for me as @Abhishek-Kanitkar  proposed  \nI have tried forRoot (like in this example) and forChild and none is givin my the transaltions.\nWhat is given is the key without a translation.\nI also tried providers: [TranslateService, TranslateStore] and providers: [TranslateService] but the same.\nSo its not working\nHere is my library module \n@NgModule({\n    imports: [\n      CommonModule,\n      HttpClientModule,\n      TranslateModule.forRoot({\n        loader: { provide: TranslateLoader, useFactory: HttpLoaderFactory, deps: [ HttpClient ] },\n        missingTranslationHandler: { provide: MissingTranslationHandler, useClass: TranslateMissingTranslationHandler },\n      })\n    ],\n    declarations: [TranslateComponent],\n    exports: [TranslateComponent]\n})\nexport class TranslateLibModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TranslateLibModule,\n      providers: [TranslateService, TranslateStore]\n    };\n  }\n}\nHere is my client module\n@NgModule({\n  imports:      [\n    CommonModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    RouterModule,\n    TranslateModule.forRoot({\n      loader: { provide: TranslateLoader, useFactory: HttpLoaderFactory, deps: [ HttpClient ] },\n      missingTranslationHandler: { provide: MissingTranslationHandler, useClass: TranslateMissingTranslationHandler },\n    }),\nTranslateLibModule.forRoot(),. hi  @dkabul , @ovione , @ocombe ,\nI see have the same problem as @Abhishek-Kanitkar.\nWhen I see the playgound of @dkabul I notice that this is not solving the problem.\nWhy ?\nbecause the assets files are in the library and not in the client application.\nWhy I need that ?\nbecause its up to the client to provide the assets files. (not the library).\nThe library should not contain any assets.\nIf we can solve this problem then the library could be used by multiple clients and each client can decide which languages its provides translations for.\nFor example one client could use the library and translate it to english and french, another client could translate it to german and italian.\nThat means that the assets files should be in the client and not in the library for this to make sense.\nand this is not the case until now.\n:)\n. I have to say that copying assets from the client application to node modules or viceversa is not a solution.\nBasically the fact that we have to use ngx-translate in a library doesn't work yet.\n:)\n. yes I tested it and this this the correct solution :). ",
    "ghiscoding": "@Arikael thanks for sharing, I was also pulling my hair on this one and your solution works :). The only thing I found to bypass this issue was to pass a white space, so if the translation key is incorrect then instead use a white space. Something along this\nts\nconst myKey = '';\nthis.translate.instant(myKey || ' '); // this will use the white space since myKey is null or empty\nThis code avoids lots of problem, but it's too bad that this was never fixed at the source \ud83d\ude3f . ",
    "SaturnTeam": "For Angular v5, please use the 2.0.0 release candidates of ng-packagr. ",
    "alier1226": "https://github.com/ngx-translate/core/issues/641. ",
    "sinedied": "After investigation, it seems that I needed to update my of usage by adding import { of } from 'rxjs/observable/of';.\n@ngx-translate actually revealed the issue that was hidden by the fact that the v8 patched the operators, making my code work \ud83d\ude1d \nSorry for the noise.. It's the same with material, and other component library that encapsulate DOM template: use an extra <span translate>TEXT/span> inside your button or whatever instead of putting the translate directive directly on the library component.. ",
    "EthanYueZhao": "I use this import 'rxjs/add/observable/of';. ",
    "andreas-aeschlimann": "@supertorpe you seriously made my day! We considered developing exactly something like that.. @ocombe thanks, I didn't see that back then. Helps a lot!. ",
    "alexndreazevedo": "It won't reflect the changes from the Observable AngularFireDatabase.object() because it only takes the first emitted value.\nAt lib/src/translate.service.ts:267, the TranslationService.getTranslation() uses take(1) from RxJS.\nPlease, feel free to implement the solution and submit MR.\n  . The documentation says: NB: if you're still on Angular <4.3, please use Http from @angular/http with http-loader@0.1.0..\nWhat is the reason for this sentence if the library no longer supports Angular 4? It's really confusing.\nAlso, there is no backward compatibility with version 4.4, which remains the stable one. The @ngx-translate v8.0.0 was supposed to be compatible with version 4, but the version 8.0.0 still breaking the build. There is no solution if we should stick to version 4 for stability reasons?\nThe Angular dev team plan to release the next stable version only in March/April 2018: RELEASE SCHEDULE - Tentative schedule after september 2017. Until that moment, the LTS version still the version 4, which I'm using for stability reasons.\nHence, I kindly ask you @ocombe, why the support to version 4 was dropped in favor an officially unstable version of Angular?\nNB: Please, don't take me wrong. The library all you have done is really cool. Keep in mind I'm not criticizing what you have done. I'm only arguing about the stability of supported versions.. Thanks for your quick and friendly answer, @ocombe.\nI've suspected that version 7.2.2 would be a proper one. It's completely understandable if you lack contributors. Let's do it together!\nAlthough the company doesn't depend on your library, I would be glad to have you joining the company. Let me know and I refer you to the recruitment process that includes a full relocation package and visa sponsorship.\nCheers,\n. It's linked to https://github.com/ngx-translate/core/issues/764. You may try isolating the services by using isolate: true in all TranslateModule.forChild:\nLazy-loaded Modules:\n\nIn which case the service is a completely isolated instance (for translations, current lang, events, ...). Otherwise, by default, it will share its data with other instances of the service (but you can still use a different loader/compiler/parser/handler even if you don't isolate the service).\n  . AFAIU, you don't need a translation per module, but a translation per user group.\n\n\nThe simplest way is creating different translation flavors, like admin-en.json, user-en.json, moderator-en.json. When selecting the language, you would need only use translateService.use('admin-en')\n\nThe advanced (and organized way) is creating a specific loader. It would organize like this:\n\n/assets/i18n/user/en.json\n/assets/i18n/user/fr.json\n/assets/i18n/admin/en.json\n/assets/i18n/admin/fr.json\n\n```typescript\n@Injectable()\nexport class MyCustomHttpLoader implements TranslateLoader {\n  public prefix: string = '/assets/i18n/';\n  public suffix: string = '.json';\nconstructor(private user: MyUserService, private http: HttpClient) { }\npublic getTranslation(lang: string): any {\n    const group: string = this.user.getUserGroup();  // The secret is here!\n    const filename = ${group}/${lang};\nreturn this.http.get(this.prefix + filename + this.suffix);\n\n}\n}\n```\nand import it into the module like this:\n```typescript\nexport function MyCustomHttpLoaderFactory(myUserService: MyUserService, httpClient: HttpClient) {\n  return new MyCustomHttpLoader(myUserService, httpClient);\n}\n@NgModule({\n  imports: [\n    // ...\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: MyCustomHttpLoaderFactory,\n        deps: [MyUserService, HttpClient]\n      }\n    })\n    // ...\n  ]\n})\nexport class AppModule { }\n```. Have you defined the default language or use any language?\nhttps://github.com/ngx-translate/core/tree/v9.0.2#2-init-the-translateservice-for-your-application. It's hard to debug what is going on. Could you share the repository or use the following template as a starting point? http://plnkr.co/edit/tpl:01UjWY3TKfP6pgwXKuEa. Try this: https://plnkr.co/edit/L2X3To. @rameshmkll are you talking about smartphones?. @rameshmkll this library doesn't detect the browser language automatically. The way to define the language is using the TranslateService to define what language should be used.\nIf you use Cordova's globalization plugin, you should detect the language of the device: https://ionicframework.com/docs/developer-resources/ng2-translate/\nUsing this guide for setting it up, you will load the new language whenever the Cordova's globalization plugin emits a new value.. The declaration of rxjs operators isn't working on the current plunkr example.\nYou may comment the code on config.js:39 or use https://plnkr.co/edit/L2X3To.\ncc: @ocombe . You are missing the import 'rxjs/add/observable/of' at app.module.ts and must define a language on app.component.ts by using translate.use(LANG) or translate.setDefaultLang(LANG).. Please, read the README.md again if you didn't catch it.\nThe translations must have a corresponding language defined by one of those methods:\ntypescript\nthis.translateService.setDefaultLang('<your_lang_here>')\nthis.translateService.use('<your_lang_here>')\nIn addition, your code is missing the method Observable.of.. It only retrieve the language from loader if you run TranslationService.getTranslation(). It doesn't happen automatically. You must use TranslationService.use() or TranslationService.setDefaultLang() it retrieves the language from loaders. \nCheck TranslationService.getTranslation(), TranslationService.use() and TranslationService.setDefaultLang(). If it still unclear, sorry but I can't help you more.\n. You can specify any language: TranslationService.setDefaultLang('yellow submarine')\nThe responsible for matching the language with translations is your loader:\nlib/src/translate.loader.ts:14\ntypescript\nexport class RockBandTranslationsLoader extends TranslateLoader {\n  public getTranslation(lang: string): Observable<any> {\n    switch(lang) {\n      case 'white unicorn':\n        return Observable.of({ 'ROCK_BAND': 'White Unicorn' });\n      case 'yellow submarine':\n        return Observable.of({ 'ROCK_BAND': 'Beatles' });\n  }\n}\nThen you can define the default language and the used language:\ntypescript\nthis.translationService.setDefaultLang('yellow submarine');\nthis.translationService.use('white unicorn');. You are using Http instead HttpClient on TranslateModule.forRoot():\ntypescript\nTranslateModule.forRoot({\n  loader: {\n    provide: TranslateLoader,\n    useFactory: HttpLoaderFactory,\n    deps: [Http] // Here comes HttpClient instead Http\n  }\n}),. Diagnose:\n\nTranslateMessageFormatCompiler.compileTranslations() returns a non-valid JSON, an object notation with functions as value;\nlib/src/translate.service.ts:289 invokes mergeDeep from lib/util.js;\nThe mergeDeep cleans the object notation (non-valid JSON) to an empty object {} at lib/src/util.ts:65;\nThe algorithm keeps merging the empty object with the current translations;\nThe new translations are lost in the algorithm.\n\nPossible solutions:\n\nReimplement the mergeDeep to consider also the non-valid JSON by removing the JSON.parse and JSON.stringify.\nReplace the mergeDeep with lodash, for instance.\n\nNB: Keep into consideration that JSON.parse should return Uncaught SyntaxError if isn't enclosed into a try..catch block.\n. It's a possibility. You may implement the changes and submit the PR. The repo's owner shall evaluate.. Let's just try removing the JSON.parse(JSON.stringify(...)). It seems that the only problem is with this JSON normalization. There is no need to clean up both objects.. IMHO the loader should be the responsible for control when the translations should be loaded, not the core.. What about placing it as a setting disabled by default on TranslateModuleConfig, like:\ntypescript\nenableMultipleLoads?: false\nAdditionally, the ngx-translate/http-loader could return an observable with take(1).. There is no need to the pipe if no operators are set.. ",
    "kkotak": "This is important to fix as there are scenarios where you may wan to load a LocalStorage based default translation before retrieving the one from Firebase, which could have a visible delay. Also applies to PWA scenario.. Indeed. Removed.. ",
    "MKhowaja": "\nIt won't reflect the changes from the Observable AngularFireDatabase.object() because it only takes the first emitted value.\nAt lib/src/translate.service.ts:267, the TranslationService.getTranslation() uses take(1) from RxJS.\nPlease, feel free to implement the solution and submit MR.\n\n@alexndreazevedo I would like this to be in the library as well. I have a slightly less intrusive solution open in a PR right now. It would be great if either the solution that @kkotak implemented (#777) or the one I implemented (#1028) could be merged. With regards to this change being too breaking @ocombe I have a PR here with a different solution that should solve the same problem:\nhttps://github.com/ngx-translate/core/pull/1028\nLet me know what you guys think!. No it did not because its not the language that's changing but the translations when the backend call returns.. Alternatively we could include onTranslationChange in the concat of stream. ",
    "Cypaubr": "UPDATE\nReplacing factory by useFactory seems to fix the type issue but another error is upcoming (@ocombe It works too but this error is thrown):\nError: Cannot find module \"rxjs/operators/share\"\n    at Object.<anonymous> (http://localhost:8100/build/vendor.js:124829:7)\n    at Object.<anonymous> (http://localhost:8100/build/vendor.js:128691:30)\n    at __webpack_require__ (http://localhost:8100/build/vendor.js:55:30)\n    at Object.232 (http://localhost:8100/build/main.js:455:78)\n    at __webpack_require__ (http://localhost:8100/build/vendor.js:55:30)\n    at Object.214 (http://localhost:8100/build/main.js:431:70)\n    at __webpack_require__ (http://localhost:8100/build/vendor.js:55:30)\n    at webpackJsonpCallback (http://localhost:8100/build/vendor.js:26:23)\n    at http://localhost:8100/build/main.js:1:1. Updating libraries and rebuilding fixed the issue.. ",
    "alexdragneel": "I have the same question because i want to display in alertCtrl a message that depends on the language.\nI can get language in the .ts and display the right message but i search another better way.. ",
    "jmruiz6": "this.translateService.get('DASHBOARD_TITLE')\n      .subscribe(value => {\n          this.dashboardTitle = value;\n        }\n      );. ",
    "sundaramkumar": "see this\nhttps://stackoverflow.com/a/50754530/3417228\nTo translate something in your typescript file, do the following\nconstructor(private translate: TranslateService) {}\nthen use like this wherever you need to translate\nthis.translate.instant('my.i18n.key'). ",
    "ncrehman": "\nconst title = this.translate.instant('notification.login.defaultError.title');\n\nThank you, it works for me. ",
    "sam-lex": "Supports all languages, but you need to provide your own translations in lang.json\nfor example:\nen.json\njson\n{\n  \"hello\": \"Hello!\"\n}\nand spanish: es.json:\njson\n{\n  \"hello\": \"Hola!\"\n}. ",
    "ssuperczynski": "If anyone has this error:\nYou need to add TranslateModule to each module where you use translation. ",
    "danigar": "I'm facing the same scenario. Any news about this?. ",
    "greg-witczak": "+1 on it - any news?. ",
    "LosD": "Since the observable is currently completed after a single translation, unsubscribing can be skipped without having leaks (when using TranslateService directly). Wouldn't that change if this suggestion is implemented? That seems like a dangerous change to me, especially since it's rather hard to detect that something is wrong.. ",
    "Slevender": "And the website? http://www.ngx-translate.com/. And the npm site :D ? https://www.npmjs.com/package/@ngx-translate/core. ",
    "bagage": "It looks similar to #224. @beradrian what would be your fix here? . Looking good, thanks for sharing! Maybe it would ease integration if PR was submitted? Would you like to submit it or should I? \n@ocombe any thoughts? . ",
    "stepet80": "nevermind I got it working. ",
    "stevengunneweg": "I would also expect a descriptive error in my console when the JSON is malformed. Currently we get no indication of what goes wrong. A missing comma in our translation file cost us time to debug than we'd like to admit.\nCould be a dev-environment-only log in my opinion. ",
    "sahilpurav": "I'm also looking for this feature. Can someone help?. ",
    "fjlogrono": "I need something similar, but depending on the group to which a user belongs.\nWhen a user logs in, the group is obtained. Then that loads the translation files for that group.\nSo I have some translation files when you logout, and others when you are logged in, and depending on the group to which the user belongs.\nHow could I do something like that? I'm a little lost, all this is new to me.\nThank you. Alexandreazevedo, thank you very much for the response and for your time\nIt has been a great help\n. ",
    "freezy": "This. Took me days to get this to work until I found this issue. Any way those loaders make their way into ngx-translate?\nThere was just one thing I had to change, which was that ES6 imports for path didn't work and I had to require it. Same for process.cwd(), I'm relying on the relative build path now. Maybe a module config I'm missing?\nAnyway, cheers @peterpeterparker for posting this!. ",
    "xrobert35": "Perhaps I missed something but I don't really see the point of using 2 separates loader since we can easily know if we are on client or server side.\nhere is my I18nModule  (imported only by the app.module.ts  since this one is imported by the server module)\n```\nimport { NgModule, InjectionToken, Optional, PLATFORM_ID } from \"@angular/core\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { TranslateModule, TranslateService, TranslateLoader } from \"@ngx-translate/core\";\nimport { TranslateUniversalLoader } from \"./universal.loader\";\nimport { TransferState } from \"@angular/platform-browser\";\nimport { isPlatformServer } from \"@angular/common\";\nconst translateLoader = (transferState: TransferState, plateformId: object) => {\n  return new TranslateUniversalLoader(transferState, isPlatformServer(plateformId));\n};\n@NgModule({\n  imports: [\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: translateLoader,\n        deps: [TransferState, PLATFORM_ID]\n      }\n    }),\n  ],\n  exports: [TranslateModule]\n})\nexport class I18Module {\n  constructor(translate: TranslateService) {\n    translate.setDefaultLang('en');\n  }\n}\n```\nhere is the implementation of the TranslateUniversalLoader who will in the server side load the json and register it in the translateState and use it to translate the rendered html.\nIn the browser side will simply read the value from the transfertState\n```\nimport { TranslateLoader } from \"@ngx-translate/core\";\nimport { Observable } from \"rxjs/Observable\";\nimport * as fs from 'fs';\nimport { makeStateKey, StateKey, TransferState } from '@angular/platform-browser';\nimport { isPlatformServer } from \"@angular/common/src/platform_id\";\nconst key: StateKey = makeStateKey('transfer-translate');\nexport class TranslateUniversalLoader implements TranslateLoader {\nconstructor(private transferState: TransferState, private isServer: boolean) {\n    console.log('server' + isServer);\n  }\npublic getTranslation(lang: string): Observable {\n    return Observable.create(observer => {\n      if (this.isServer) {\n        let json = JSON.parse(fs.readFileSync(assets/i18n/${lang}.json, 'utf8'));\n        this.transferState.set(key, json);\n      }\n      observer.next(this.transferState.get(key, null));\n      observer.complete();\n    });\n  }\n}\n```\nI actually can't see any glitch. Hop it can help . For me you should not use TranslateHttpLoader. \nIf your client want to change the langage, it's the server job to give him the page new in the new langage.\nYour request should contain the langage the client want to use.\nYou could get the language by using Injector : \nAngular side : \nconst request = this.injector.get('request') ||  {};\nconst lang = request.lang;\ntranslate.setDefaultLang(lang);\nNode Side : \n```\nconst beforeRender = (req, res, next) => {\n  //Get the client lang from the request \n  req.lang = getLang(req);\n  next();\n};\napp.get('/views/*', beforeRender,\n  (req, res) => {\n    res.render('index', { req,  res });\n  });\n```. Hi,\nwithout more information about the code it will not be simple. \n\nAre you correctly importing  HttpClientModule ?\nCheck that TranslateBrowserLoader is not an @injectable. @ceaguilera why are you trying to import or provide TranslateHttpLoader ? it's just a simple class not an injectable or a module,  remove those declaration from the modules AppModule and AppServerModule . \n",
    "xuhcc": "I've switched to custom JSON module loader, it solved the problem for my angular 5 app:\n```ts\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport * as translationEn from 'assets/i18n/en.json';\nimport * as translationRu from 'assets/i18n/ru.json';\nconst TRANSLATIONS = {\n    en: translationEn,\n    ru: translationRu,\n};\nclass JSONModuleLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable {\n        return Observable.of(TRANSLATIONS[lang]);\n    }\n}\nexport function JSONModuleLoaderFactory() {\n    return new JSONModuleLoader();\n}\n```\ntypings.d.ts:\nts\ndeclare module '*.json' {\n    const value: any;\n    export default value;\n}. Hi @GudaPraveenKumar \nI also have JSONModuleLoaderFactory applied in the main app module:\njs\n@NgModule({\n    //\n    imports: [\n        //\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: JSONModuleLoaderFactory,\n                deps: []\n            }\n        })\n    ]\n})\nDon't know whether it works with Angular 7 or not.\n. ",
    "ceaguilera": "Hello! i have one problem! help me!\nnpm run build\nERROR in : Can't resolve all parameters for TranslateBrowserLoader in /home/carlos/Proyectos/website/src/app/translate-browser-loader.service.ts: (?, ?, [object Object], [object Object]).\n. hI @xrobert35 I leave you all the settings\nI am configuring ngx-translate as follows:\ntranslate-server-loader.service.ts\n```\nimport {Observable} from \"rxjs/Observable\";\nimport {TranslateLoader} from '@ngx-translate/core';\nimport { Injectable } from '@angular/core';\nimport {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class TranslateBrowserLoader implements TranslateLoader {\n\n  constructor(private prefix: string = 'i18n',\n              private suffix: string = '.json',\n              private transferState: TransferState,\n              private http: HttpClient) {\n\n  }\n\n  public getTranslation(lang: string): Observable<any> {\n\n    const key: StateKey<number> = makeStateKey<number>('transfer-translate-' + lang);\n    const data = this.transferState.get(key, null);\n\n    // First we are looking for the translations in transfer-state, if none found, http load as fallback\n    if (data) {\n      return Observable.create(observer => {\n        observer.next(data);\n        observer.complete();\n      });\n    } else {\n      return new TranslateHttpLoader(this.http, this.prefix, this.suffix).getTranslation(lang);\n    }\n  }\n}\n\n```\nsrc/app/app.server.module.ts\n```\nimport { NgModule } from '@angular/core';\nimport { ServerModule, ServerTransferStateModule } from '@angular/platform-server';\nimport {HttpClientModule, HttpClient} from '@angular/common/http';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\nimport {TranslateServerLoader} from './translate-server-loader.service';\n@NgModule({\n  imports: [\n    AppModule,\n    ServerModule,\n    ServerTransferStateModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: translateFactory,\n        deps: [TransferState]\n      }\n    }),\n    TranslateHttpLoader\n  ],\n  bootstrap: [AppComponent],\n  providers:[TranslateHttpLoader]\n})\nexport class AppServerModule { }\nexport function translateFactory(transferState: TransferState) {\n  return new TranslateServerLoader(transferState);\n}\n```\ntranslate-browser-loader.service.ts\n```\n    import {Observable} from \"rxjs/Observable\";\n    import {TranslateLoader} from '@ngx-translate/core';\n    import { Injectable } from '@angular/core';\n    import {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\n    import {TranslateHttpLoader} from '@ngx-translate/http-loader';\n    import {HttpClient} from '@angular/common/http';\n@Injectable()\nexport class TranslateBrowserLoader implements TranslateLoader {\n\n  constructor(private prefix: string = 'i18n',\n              private suffix: string = '.json',\n              private transferState: TransferState,\n              private http: HttpClient) {\n\n  }\n\n  public getTranslation(lang: string): Observable<any> {\n\n    const key: StateKey<number> = makeStateKey<number>('transfer-translate-' + lang);\n    const data = this.transferState.get(key, null);\n\n    // First we are looking for the translations in transfer-state, if none found, http load as fallback\n    if (data) {\n      return Observable.create(observer => {\n        observer.next(data);\n        observer.complete();\n      });\n    } else {\n      return new TranslateHttpLoader(this.http, this.prefix, this.suffix).getTranslation(lang);\n    }\n  }\n}\n\n```\napp.module.ts\n```\nimport { BrowserModule, BrowserTransferStateModule, TransferState } from '@angular/platform-browser';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { BetsComponent } from './bets/bets.component';\nimport { BetsEventComponent } from './bets-event/bets-event.component';\nimport { CountriesComponent } from './countries/countries.component';\nimport { InformationComponent } from './information/information.component';\nimport { JackpotComponent } from './jackpot/jackpot.component';\nimport { PromotionsComponent } from './promotions/promotions.component';\nimport { ResultComponent } from './result/result.component';\nimport { PromotionDetailsComponent } from './promotion-details/promotion-details.component';\nimport { TopFootballComponent } from './top-football/top-football.component';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { ClipboardModule } from 'ngx-clipboard';\nimport {TooltipModule} from 'primeng/primeng';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport {TranslateBrowserLoader} from './translate-browser-loader.service';\nimport {TranslateServerLoader} from './translate-server-loader.service';\nimport {\n  MenuLeftComponent,\n  FooterComponent,\n  HeaderComponent,\n  BetslipComponent,\n  MenuBottomMobileComponent,\n  SharedModule,\n  FixtureService,\n  BetslipService,\n  TypeBetsService,\n  TicketService,\n  TimeService,\n  PaginationService,\n  TranslateTbet,\n  CompetitionService,\n  ResultService,\n  NumberOnlyDirective\n} from './shared';\nimport {\n  CashierComponent,\n  InPlayComponent,\n  InboxComponent,\n  LoginComponent,\n  ProfileComponent,\n  RegisterComponent,\n  TicketsComponent,\n  TicketWinLoseComponent,\n  BetslipMobileComponent,\n  CheckTicketsComponent,\n  ContactUsComponent,\n  CollapseComponent,\n  CollapseModule,\n} from './collapse';\nimport { CompetitionsComponent } from './competitions/competitions.component';\nconst rootRouting: ModuleWithProviders = RouterModule.forRoot([\n  {path:'',component:HomeComponent},\n  {path:'competitions/:id', component: CompetitionsComponent},\n  {path:'match-bets/:idFixture', component: BetsEventComponent},\n  {path:'results', component: ResultComponent},\n  {path:'results/:nameLeague', component: ResultComponent},\n  {path:'results/:nameLeague/:dateTime', component: ResultComponent},\n  {path:'jackPot', component: JackpotComponent},\n  {path:'promotions', component: PromotionsComponent},\n  {path:'information/:idInformation', component:InformationComponent},\n  {path:'promotionDetails', component: PromotionDetailsComponent},\n  {path:'topFootball', component: TopFootballComponent},\n  {path:'countries', component: CountriesComponent},\n  {path:':id', component: BetsComponent},\n], { useHash: false });\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    BetsComponent,\n    BetsEventComponent,\n    CountriesComponent,\n    InformationComponent,\n    JackpotComponent,\n    PromotionsComponent,\n    ResultComponent,\n    PromotionDetailsComponent,\n    TopFootballComponent,\n    HeaderComponent,\n    FooterComponent,\n    MenuLeftComponent,\n    BetslipComponent,\n    MenuBottomMobileComponent,\n    TicketWinLoseComponent,\n    InPlayComponent,\n    TicketsComponent,\n      CheckTicketsComponent,\n    LoginComponent,\n    InboxComponent,\n    RegisterComponent,\n    CashierComponent,\n    ProfileComponent,\n    ContactUsComponent,\n    BetslipMobileComponent,\n    CollapseComponent,\n    TranslateTbet,\n    NumberOnlyDirective,\n    CompetitionsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    rootRouting,\n    SharedModule,\n    CollapseModule,\n    HttpModule,\n    HttpClientModule,\n    BrowserTransferStateModule,\n    BrowserModule.withServerTransition({\n        appId: 'ng-universal-demystified'\n    }),\n    ClipboardModule,\n    TooltipModule,\n    TranslateModule.forChild({\n        loader: {\n          provide: TranslateLoader,\n          useFactory: exportTranslateStaticLoader,\n          deps: [HttpClient, TransferState]\n        }\n      }\n    )\n  ],\n  providers: [\n    FixtureService,\n    BetslipService,\n    TypeBetsService,\n    TicketService,\n    TimeService,\n    PaginationService,\n    TranslateTbet,\n    NumberOnlyDirective,\n    CompetitionService,\n    ResultService,\n    TransferState,\n    TranslateModule,\n    TranslateBrowserLoader,\n    TranslateServerLoader,\n    TranslateHttpLoader\n],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\nexport function exportTranslateStaticLoader(http: HttpClient, transferState: TransferState) {\n   return new TranslateBrowserLoader(transferState, http);\n}\n```\nafter compiling with the command:\nnpm run build\nAnd it gives the following error:\n**ERROR in : Can't resolve all parameters for TranslateHttpLoader in /home/carlos/Proyectos/website/node_modules/@ngx-translate/http-loader/ngx-translate-http-loader.d.ts: ([object Object], ?, ?).**\nplease help!. Thank @peterpeterparker for response, however the error persists degrading the version of ngx-translate to version 9, I leave my package.json:\n```\n{\n  \"name\": \"universal-demo-v5\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"node dist/server\",\n    \"build\": \"run-s build:client build:aot build:server\",\n    \"build:client\": \"ng build --prod --app 0\",\n    \"build:aot\": \"ng build --aot --app 1\",\n    \"build:server\": \"webpack -p\",\n    \"build:dev\": \"run-p build:dev:client build:dev:aot build:dev:server\",\n    \"build:dev:client\": \"ng build -w --aot --app 0\",\n    \"build:dev:aot\": \"ng build -w --aot --delete-output-path=false --app 1\",\n    \"build:dev:server\": \"webpack -w\",\n    \"nodemon\": \"sleep 25 && nodemon --watch dist/browser/index.html --watch dist/server.js dist/server.js\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\",\n    \"postinstall\": \"npm run build\",\n    \"start:heroku\": \"node dist/server\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular-devkit/schematics\": \"0.0.37\",\n    \"@angular/animations\": \"^5.0.0\",\n    \"@angular/common\": \"^5.0.0\",\n    \"@angular/compiler\": \"^5.0.0\",\n    \"@angular/core\": \"^5.0.0\",\n    \"@angular/forms\": \"^5.0.0\",\n    \"@angular/http\": \"^5.2.8\",\n    \"@angular/platform-browser\": \"^5.0.0\",\n    \"@angular/platform-browser-dynamic\": \"^5.0.0\",\n    \"@angular/platform-server\": \"^5.0.0\",\n    \"@angular/router\": \"^5.0.0\",\n    \"@ngx-translate/core\": \"9.1.1\",\n    \"@ngx-translate/http-loader\": \"^3.0.1\",\n    \"bootstrap\": \"4.0.0-alpha.6\",\n    \"compression\": \"^1.7.2\",\n    \"core-js\": \"^2.5.3\",\n    \"express\": \"^4.16.2\",\n    \"flag-icon-css\": \"^3.0.0\",\n    \"font-awesome\": \"^4.7.0\",\n    \"jquery\": \"^3.3.1\",\n    \"ngx-clipboard\": \"^10.0.0\",\n    \"ngx-window-token\": \"0.0.4\",\n    \"primeng\": \"^5.0.2\",\n    \"primer-tooltips\": \"^1.5.2\",\n    \"rxjs\": \"^5.5.6\",\n    \"tether\": \"^1.2.4\",\n    \"zone.js\": \"^0.8.5\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"1.6.1\",\n    \"@angular/compiler-cli\": \"^5.0.0\",\n    \"@angular/language-service\": \"^5.0.0\",\n    \"@types/jasmine\": \"~2.8.6\",\n    \"@types/jasminewd2\": \"~2.0.3\",\n    \"@types/node\": \"~9.4.6\",\n    \"codelyzer\": \"~4.2.1\",\n    \"jasmine-core\": \"~3.1.0\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~2.0.0\",\n    \"karma-chrome-launcher\": \"~2.2.0\",\n    \"karma-cli\": \"~1.0.1\",\n    \"karma-coverage-istanbul-reporter\": \"^1.4.2\",\n    \"karma-jasmine\": \"~1.1.1\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"nodemon\": \"^1.17.1\",\n    \"npm-run-all\": \"^4.1.2\",\n    \"protractor\": \"~5.3.0\",\n    \"ts-loader\": \"^3.5.0\",\n    \"ts-node\": \"~5.0.1\",\n    \"tslint\": \"~5.9.1\",\n    \"typescript\": \"^2.5.3\",\n    \"webpack-node-externals\": \"^1.6.0\"\n  }\n}\n```\n. ",
    "GudaPraveenKumar": "\nI've switched to custom JSON module loader, it solved the problem for my angular 5 app:\n```ts\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport * as translationEn from 'assets/i18n/en.json';\nimport * as translationRu from 'assets/i18n/ru.json';\nconst TRANSLATIONS = {\n    en: translationEn,\n    ru: translationRu,\n};\nclass JSONModuleLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable {\n        return Observable.of(TRANSLATIONS[lang]);\n    }\n}\nexport function JSONModuleLoaderFactory() {\n    return new JSONModuleLoader();\n}\n```\ntypings.d.ts:\nts\ndeclare module '*.json' {\n    const value: any;\n    export default value;\n}\n\nHello, I followed your instructions and made the necessary changes but still, it is not working. Do I need to add anything else? I integrated your code into my angular 7 application. When viewing the page source I'm not able to see the text from JSON files.. > Hi @GudaPraveenKumar\n\nI also have JSONModuleLoaderFactory applied in the main app module:\njs\n@NgModule({\n    //\n    imports: [\n        //\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: JSONModuleLoaderFactory,\n                deps: []\n            }\n        })\n    ]\n})\nDon't know whether it works with Angular 7 or not.\n\nEven I did the same but still no results :(. > It turns out that the solution I described above isn't compatible with Angular v6 anymore because fs will not be recognize and allowed at compilation time by webpack. Furthermore, since the webpack config couldn't be ejected anymore, there is no way to tell webpack to ignore fs and path\n\nAnyway, the solution described above by @xuhcc do works like a charm with Angular v6, kudos!\nIt looks like the following then:\n\ntranslate-universal-loader.service.ts\n   ```\n   import {TranslateLoader} from '@ngx-translate/core';\n\nimport {Observable, of} from 'rxjs';\nimport * as translationEn from 'assets/i18n/en.json';\n   import * as translationFr from 'assets/i18n/fr.json';\n   import * as translationDe from 'assets/i18n/de.json';\n   import * as translationIt from 'assets/i18n/it.json';\nconst TRANSLATIONS = {\n     en: translationEn,\n     fr: translationFr,\n     de: translationDe,\n     it: translationIt\n   };\nexport class TranslateUniversalLoader implements TranslateLoader {\n constructor() {\n }\n\n public getTranslation(lang: string): Observable<any> {\n   return of(TRANSLATIONS[lang]);\n }\n}\n\n export function translateFactory() {\n   return new TranslateUniversalLoader();\n }\n\n2. modify the load which call `translateFactory` to reflect the changes\n    loader: {\n      provide: TranslateLoader,\n      useFactory: translateFactory\n    }\n   3. create a new file called `typings.d.ts` under src:\n     declare module '*.json' {\n       const value: any;\n       export default value;\n     }\n   4. in `./tsconfig.json` modify `typeRoots`\n   \"typeRoots\": [\n         \"node_modules/@types\", \"./src/typings.d.ts\"\n       ]\n   ```\nIMPORTANT NOTE It looks like the assets aren't copied anymore on the server side. In angular.json, the config angular-devkit/build-angular:server even doesn't support assets right now. Therefore you will have to copy your assets language files manually to dist folder\n\nIt is not working for me I integrated this in angular 7 application. . ",
    "virgil-av": "\nIt is not working for me I integrated this in angular 7 application.\n\nThe way I found it to work in Angular 7:\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useClass: TranslateUniversalLoader\n      }\n}),\n```\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport * as contentEn from './en.json';\nimport * as contentRo from './ro.json';\nconst TRANSLATIONS = {\n  en: contentEn,\n  ro: contentRo\n};\nexport class TranslateUniversalLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(TRANSLATIONS[lang].default);\n  }\n}\n```\nIt looks like the returned object is added under the default key \ntested this in Angular 7  and also tested dynamic change works just fine. The way I found it to work in Angular 7:\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useClass: TranslateUniversalLoader\n      }\n}),\n```\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport * as contentEn from './en.json';\nimport * as contentRo from './ro.json';\nconst TRANSLATIONS = {\n  en: contentEn,\n  ro: contentRo\n};\nexport class TranslateUniversalLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(TRANSLATIONS[lang].default);\n  }\n}\n```\nIt looks like the returned object is added under the default key \ntested this in Angular 7  and also tested dynamic change works just fine. ",
    "jota12x": "\nIt turns out that the solution I described above isn't compatible with Angular v6 anymore because fs will not be recognize and allowed at compilation time by webpack. Furthermore, since the webpack config couldn't be ejected anymore, there is no way to tell webpack to ignore fs and path\nAnyway, the solution described above by @xuhcc do works like a charm with Angular v6, kudos!\nIt looks like the following then:\n1. translate-universal-loader.service.ts\n   ```\n   import {TranslateLoader} from '@ngx-translate/core';\n\n   import {Observable, of} from 'rxjs';\n\n   import * as translationEn from 'assets/i18n/en.json';\n   import * as translationFr from 'assets/i18n/fr.json';\n   import * as translationDe from 'assets/i18n/de.json';\n   import * as translationIt from 'assets/i18n/it.json';\n\n   const TRANSLATIONS = {\n     en: translationEn,\n     fr: translationFr,\n     de: translationDe,\n     it: translationIt\n   };\n\n   export class TranslateUniversalLoader implements TranslateLoader {\n\n     constructor() {\n     }\n\n     public getTranslation(lang: string): Observable<any> {\n       return of(TRANSLATIONS[lang]);\n     }\n    }\n\n     export function translateFactory() {\n       return new TranslateUniversalLoader();\n     }\n   ```\n\n2. modify the load which call `translateFactory` to reflect the changes\n   ```\n    loader: {\n      provide: TranslateLoader,\n      useFactory: translateFactory\n    }\n   ```\n\n3. create a new file called `typings.d.ts` under src:\n   ```\n     declare module '*.json' {\n       const value: any;\n       export default value;\n     }\n   ```\n\n4. in `./tsconfig.json` modify `typeRoots`\n   ```\n   \"typeRoots\": [\n         \"node_modules/@types\", \"./src/typings.d.ts\"\n       ]\n   ```\n\nIMPORTANT NOTE It looks like the assets aren't copied anymore on the server side. In angular.json, the config angular-devkit/build-angular:server even doesn't support assets right now. Therefore you will have to copy your assets language files manually to dist folder\n\nThis solution worked perfectly for my use case. Thank you \ud83d\udc4d . ",
    "mosh-ackosoft": "Thanks to @xuhcc \n```\nimport * as translationEn from '../../../lang-files/en.json';\nimport * as translationBn from '../../../lang-files/bn.json';\nconst TRANSLATIONS = {\n  en: translationEn,\n  bn: translationBn\n};\nexport class CustomTranslateLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(TRANSLATIONS[lang]);\n  }\n}\nTranslateModule.forRoot({\n  loader: {\n    provide: TranslateLoader,\n    useClass: CustomTranslateLoader\n  }\n});\n```\nThis is complete code..\nOne thing to keep in mind use useClass insted of useFactory in loader config as show in last step.. ",
    "DJklimentina": "Does anyone know how it should be done if I need to take the translations from a server? (I don't have them locally). ",
    "nilamben": "@peterpeterparker \nI tried your given solution (posted on Dec 22-2017 )for Angular 6 and ending with the following error. \nDoes anyone has solution for this?\nFYI: I tried both TranslateModule.forRoot and TranslateModule.forChild for browser module.ts\nmain.1f8b2b5261f163bcdf04.js:1 ERROR Error: Uncaught (in promise): Error: StaticInjectorError(Fs)[Lf -> t]: \n  StaticInjectorError(Platform: core)[Lf -> t]: \n    NullInjectorError: No provider for t!\nError: StaticInjectorError(Fs)[Lf -> t]: \n  StaticInjectorError(Platform: core)[Lf -> t]: \n    NullInjectorError: No provider for t!\n    at t.get (main.1f8b2b5261f163bcdf04.js:1)\n    at main.1f8b2b5261f163bcdf04.js:1\n    at t (main.1f8b2b5261f163bcdf04.js:1)\n    at t.get (main.1f8b2b5261f163bcdf04.js:1)\n    at main.1f8b2b5261f163bcdf04.js:1\n    at t (main.1f8b2b5261f163bcdf04.js:1)\n    at t.get (main.1f8b2b5261f163bcdf04.js:1)\n    at Ko (main.1f8b2b5261f163bcdf04.js:1)\n    at main.1f8b2b5261f163bcdf04.js:1\n    at $o (main.1f8b2b5261f163bcdf04.js:1)\n    at j (polyfills.7fb637d055581aa28d51.js:1)\n    at j (polyfills.7fb637d055581aa28d51.js:1)\n    at polyfills.7fb637d055581aa28d51.js:1\n    at e.invokeTask (polyfills.7fb637d055581aa28d51.js:1)\n    at Object.onInvokeTask (main.1f8b2b5261f163bcdf04.js:1)\n    at e.invokeTask (polyfills.7fb637d055581aa28d51.js:1)\n    at t.runTask (polyfills.7fb637d055581aa28d51.js:1)\n    at d (polyfills.7fb637d055581aa28d51.js:1)\nThank you,\nNilam. ",
    "aescarcha": "I'm pasting my solution here, it's similar to @xuhcc 's one, but on the frontend it will use the normal HttpLoader\n```\nimport { TranslateLoader } from '@ngx-translate/core';\nimport * as translationEn from './assets/i18n/en.json';\nimport * as translationEs from './assets/i18n/es.json';\nimport { Observable, of } from 'rxjs/index';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nconst TRANSLATIONS = {\n  en: translationEn,\n  es: translationEs,\n};\nexport class JSONModuleLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(TRANSLATIONS[lang]);\n  }\n}\nexport function JSONModuleLoaderFactory(http: HttpClient, platform) {\n  if (isPlatformBrowser(platform)) {\n    return new TranslateHttpLoader(http);\n  } else {\n    return new JSONModuleLoader();\n  }\n}\n```\nAnd in modules\nimport { PLATFORM_ID } from '@angular/core';\n...\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: JSONModuleLoaderFactory,\n        deps: [HttpClient, PLATFORM_ID]\n      }\n    }),. ",
    "zladuric": "Oh, no problem, I forgot about this issue. I don't remember how I fixed it, but I don't have the problem any more. Thanks.\n. ",
    "antonpegov": "Sorry, now I find it out: \nthis.$translate.getTranslation(this.$translate.currentLang).subscribe(() => { boom! }). ",
    "kevinrigot": "Hi, \nWhen I use your solution I see 2 http requests which is not desirable. \nHowever, if you use \n(this.$translate as any).retrieveTranslations(this.$translate.currentLang).subscribe(() => console.log('Translations ready'));\nit will work. \nThe casting to any is unfortunate; this is because it's private.\nRegards,\nKevin. ",
    "salazar-js": "the solution of @antonpegov works perfectly, but yes, two http requests are made, and the solution of @kevinrigot gives error Cannot read property 'subscribe' of undefined \ud83d\ude1e \nHow bad is it to do something like this? talking about performance.\njavascript\nIntervalObservable.create(10)\n  .takeWhile(() => typeof this._translate.currentLang == 'undefined')\n  .takeLast(1).subscribe(data => {\n    console.log(this._translate.currentLang);\n  });. ",
    "romain10009": "Yes I do, in the constructor of my App Class.\n```\nexport class MyApp {\n  @ViewChild(Nav) nav: Nav;\n  rootPage : any = null;\nconstructor(private platform: Platform,\n              private statusBar: StatusBar,\n              private splashScreen: SplashScreen,\n              private translate: TranslateService,\n              private config : Config,\n              private userService : UserService) {\n    this.initializeApp();\n    this.translate.setDefaultLang('fr');\n  }\n}\n```. The Plunker you provided / the Readme provides is broken, is there on that is working? Could someone fix it, I have no experience with debugging the Plunker.. ",
    "rameshmkll": "hi \ndoes translate automatically translates text if the device language is changed or we have to set translateservice.use(\"lang\").. yes\ni am using it for ionic mobile application. ",
    "MikaelLambert": "I can't get the plunkers to work, but I was able to workaround this issue with the following approach:\nExample built from @luckylooke's plunker https://plnkr.co/edit/Q5ZcXpWbRpXSZEC4EA5P?p=preview\njavascript\nconstructor (\n    public translate: TranslateService,\n    ) {\n                this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n            this.translate.get( this.uiTexts ).subscribe( translations => {\n                console.log('translations', translations)\n            });\n        })\n    }\n. ",
    "Form1ca": "you can use prev version of example\nhttp://prntscr.com/hu7rmm. ",
    "splincode": "I do not understand\n. \nimport 'rxjs/add/observable/of';\nyes, it is being treated by adding imports  . But how does he understand that you need to choose English?\n\n\nIf I can also write nonsense, and it will work\n\nWhat is the meaning of this code?\nthis.translateService.setDefaultLang('<your_lang_here>')\nthis.translateService.use('<your_lang_here>')\n  . I still do not understand how it extracts the language from the loader, if I can specify any language. Add this to the documentation (readme.md). ",
    "brevleq": "As workaround I decided add the git repository as dependency instead of default npm package:\nhttps://stackoverflow.com/questions/48059417/ionic-in-production-field-browser-doesnt-contain-a-valid-alias-configuratio. ",
    "lucasvst": "Maybe is a bug in code generator. I found this on 'core/core.d.ts':\n/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { TranslateStore as \u0275a } from './src/translate.store';\nWorkaround:\nimport { \u0275a as TranslateStore } from '@ngx-translate/core';\nI dont know where this code is generated, sorry :/\n__\nMy env:\n```\n\nnode -v\nv6.11.4\n\nnpm -v\n3.10.10\n\n\"@angular/cli\": \"^1.6.4\",\n\n\"@angular/core\": \"~5.2.1\",\n\n\"@ngx-translate/core\": \"^9.0.0\",\n```. I need to provide it to my SharedModule (the translation is exposed by a sharedModule approach). If not, I receive:\n\nUnhandled Promise rejection: StaticInjectorError(AppModule)[TranslateService -> TranslateStore]: \n  StaticInjectorError(Platform: core)[TranslateService -> TranslateStore]: \n    NullInjectorError: No provider for TranslateStore! ; Zone: <root> ; Task: Promise.then ; Value: Error: StaticInjectorError(AppModule)[TranslateService -> TranslateStore]: \n  StaticInjectorError(Platform: core)[TranslateService -> TranslateStore]: \n    NullInjectorError: No provider for TranslateStore!\nMy shared module:\n```\nexport class i18nModule {\nstatic forRoot(): ModuleWithProviders {\nreturn {\n  ngModule: i18nModule,\n  providers: [\n    {\n      provide: TranslateLoader,\n      useFactory: HttpLoaderFactory,\n      deps: [HttpClient]\n    },\n    TranslateService,\n    TranslateStore\n  ],\n};\n\n}\nstatic forChild(): ModuleWithProviders {\n    return TranslateModule.forChild();\n  }\n}\n```. ",
    "guilhermejcgois": "Some updates about that? We're having trouble too. ",
    "danday74": "unit tests failing because I cant import this\nimport { TranslateStore } from '@ngx-translate/core'\ngives ... no exported member TranslateStore (in WebStorm)\nworked around this by mocking out the service that was using it\nInterestingly, WebStorm tries by default to import from '@ngx-translate/core/src/translate.store'\n. ",
    "jvquarck": "The workaround I found atm is to introduce a step in the component library build that will generate .ts files with the translations, and export those constants as a part of the library. After that I'm just extending the application translations with those ones in the translation loader. Not ideal though.\nI'd be glad to help if this is a bug.. ",
    "EddyNll": "Im actually looking into the same functionality.. ",
    "Sjerd": "+1, also trying to add translations to a component library. ",
    "hanyu-natsu": "@TakuyaAbe thank you for the commit.\nIsn't it better to use 'lodash-es' since it's more in the es6 way to import merge ? Like this:\nimport merge from 'lodash-es/merge';. Since we don't want to add new dependency to the lib, we have to reimplement mergeDeep to handle the case.\nJust want to know why mergeDeep cleans that object notation with\ntarget = JSON.parse(JSON.stringify(target));\nsource = JSON.parse(JSON.stringify(source));\nBy removing that the issue can be solved.. @TakuyaAbe thank you for pointing out !\nI fixed that.. @ocombe surely we can solve the issue by rewriting deepMerge function.\nBut it's not an ngx-translate-messageformat-compiler issue, the bug is in the core and relates to any compiler that compiles translation values into functions.\nAnd if the function value as translation will still be supported, then this issue has to be solved here in the core.. Just removed the JSON clean calls and keep the test.\nSeems dirty but works. . ",
    "kamil-zielinski": "@lippomano How did you solve it?. ",
    "teslim2903": "@lippomano How did you solve it?. @kamil-zielinski i found the issue, you can use suscribe, directly in your function . see exemple \n`async  presentAlertErreur() {\nthis.translateService.get('GENERAL.erreur_generale').subscribe((text:string) => {\n  this.messageErreur = text;\n});\n\nthis.translateService.get('BOUTTON.fermer').subscribe((text:string) => {\n  this.fermer = text;\n});\n\nthis.translateService.get('LOGIN.erreur').subscribe((text:string) => {\n  this.titre = text;\n});\n\nconst alert = await this.alertCtrl.create({\n  header: this.titre,\n  message: this.messageErreur,\n  buttons: [this.fermer]\n});\nreturn await alert.present();\n\n}`. ",
    "TakuyaAbe": "@lihanyu23 Thank you for giving me a comment & creating PR.\nI find one point to fix.\nYou should add lodash-es as dependencies, not devDependencies.\nIf it is devDependencies, an error message as follows will appear when you install @ngx-translate/core & run server.\nERROR in /<PATH_TO_YOUR_ANGULAR_APPLICATION>/node_modules/@ngx-translate/core/src/util.ts (1,19): Cannot find module 'lodash-es/merge'.\nOnly dependencies are installed when we run npm install @ngx-translate/core.\nRefer: https://stackoverflow.com/a/22004559/5977798. ",
    "SirDieter": "Your first StackBlitz does not exist anymore, but with the information I have I think your problem is that you don't provide your TranslateService at the root level of component, so each has its own instance leading to your problem. If you provide it at root level and set the default language once in your app component, it should work just like you want it to.. ",
    "jaybloke": "Also experiencing same issue in an ionic app. The app loads remote translations at start up and is unable to catch a 404 or when there is no internet connectivity.. ",
    "SandeepThomas": "\nRelated to: #751\nIn this case: JSON is invalid.\nI suppose the best position to catch the error is creating a TranslateLoader that handles the failed loading (missing file, invalid json)\n\nCan you provide an example of such a TranslateLoader? Thanks. ",
    "nfdevil": "I'm having the same problem. Is there a solution for this?. ",
    "consigliory": "+1\n. ",
    "dsatpute": "Yes in components I have already defined. It is working with angular 4.3.3 with http but in angular 5.0.0 HttpClient with not working. Ngx-translate using 7.2.2 release.. Any mistakes.. Ocombe by using v8.0.0 language changing the text now for other languages\n thank you.. but I am facing new problem with   custom  localizedDate pipe I have given code above also facing MissingTranslationHandler not worked.. For MissingTranslationHandler functionality already available in  v8.0.0 release or I need to create custom MissingTranslationHandler. ",
    "michastreppel": "In general I think this would be hard to implement as websites all have a different convention of representing the chosen language in the URL. \nYou can do it yourself by subscribing to language change events and then modifying the current url to reflect the chosen language using the Location object in the angular/common package: \ntranslate.onLangChange().subscribe(trans => {\n    const path = this.location.path();\n    const modified_path = change path to reflect chosen language (trans.lang)\n    this.location.replaceState(modified_path);\n}). ",
    "Nikki1993": "Hello there o/ any update on the matter? Recently hit a similar scenario where I wish to pre-cache translations via LocalStorage to reduce the loading times but hit the snag where translations are not updated (by design). . ",
    "romuloctba": "Thank you for your response\nYes I found it listed (I can browse npm and find it) too, but still \nhttps://registry.npmjs.org/@ngx-translate/core\nsays not found, while\nhttps://registry.npmjs.org/jasmine\nseems to work....\nAlso, did you notice it says 0 downloads today?\nStats\n0 downloads in the last day\n71,148 downloads in the last week. My bad, removing the @ from the registry url does work...\nMaybe the daily status is not yet updated\nI still didnt fix the problem, but I believe is internal, so Im sorry for disturbing you. Follow up: Problem solved\nIt was related to my enterprise registry, which was being overriten over the npm registry... For some reason it was not being shown on the logs, but once I removed references to the enterprise registry and also the Auth keys from .npmrc, it solved the issue\nAgain, sorry to disturb, it must have been quite a surprise to see a 404 issue being reported :( . ",
    "KNeela": "Hi, thanks for your answer. I tried this code but i dont really get it to work.\ncan you take a look at my plunker?\nhttps://plnkr.co/edit/K2dZuYAREvOA48sm66N9?p=info. ",
    "cookieksv": "I have the same issue.\nWould be perfect if the \"instant\" method was simply returning the same passed to it empty value (or undefined, or null, etc).. ",
    "bnymncoskuner": "Hello,\nI've been using your library as long as I've been using Angular (4+). Last year, around this time I'd been using AngularJs for a while and since Angular 2 was finally released, I decided to give it a try. It seemed a lot more complicated than AngularJs, and i18n was almost impossible for me to use. At that time, I had other projects to work on so I stopped using Angular 2. \nFew months passed, I had a chance to join the Ng-Conf. At the conference, I found John Papa at a hall and asked him about i18n in Angular. He said there is a built-in solution. I checked it out and it was too complicated. Extracting files, dealing with xml .... Also, we'd been using a tool for i18n, and we've put all of our translations into a json file. So, built in i18n was not an ideal solution for me.\nThen, I kept digging and came across your library (as it was named ng2-translate then). I, immediately, fell in love with it. It was super easy to include, configure and use. And, it used JSON! Since then, I've been using it for all of my angular projects (plus I just started using Ionic, and I included ngx-translate into that project as well).\nYou listed some of the issues with ngx-translate. I think the most important one is that if, somehow, a user cannot download translation file or there is an exception somewhere, you could end up with messed up screen. Other issues, for me, are not so important. \nAlso, another feature of ngx-translate I really like, is code translation. I could use TranslateService within my code to get any translation I want which I always need to do so.\nLong story short, I'd love to see you to keep maintaining this library even if you spend little time on it. I don't think angular built-in i18n solution should be the only one. I think having alternatives is always better. \nFor license, I think companies would stop using it if you start charging new versions or they'll just use an old version which works just fine. It is because, purchasing a licence in a company is a painful process and I think most people would just avoid it and go for other solutions. Also, I have to mention that if a company buys a license, they expect 24/7 pro support. At least, mine does :) So, that would be hard to deal with.\nFor other alternative, you could get funding through donations or at least try it for a while and then go for paid license.. What about proposing to angular team to make this an official alternative to angular i18n? Angular team may offer two different solutions for i18n. Would this not be better?. Then, I think option 1 is the one. People don't expect much out of this library, because, most of the apps just need something as simple as ngx-translate to support i18n. Angular solution may be powerful and better, but often it is overkill and may be harder to manage.. > If you think that it's the only thing that this library offers, sure.\nI don't think he actually sees it that way, but I can see his point of view. Think of this way, consumers of this library are your customers, you are doing a great job and tremendous amount of work in order to deliver it but all they see is a service and a pipe. They don't really see what's going on under the hood. They never see the part of maintaining a library and keeping it stable. That's why people would think this way, and if you start charging for it, they'll just fork the library and make it a part of their project. Since, current version works for almost every app as is, they won't need to add new feature or fix some bugs. I think finding some collaborators and going with slow pace is the best option here.. ",
    "davidefavia": "Hi @ocombe,\nfirst of all thanks for your hard work and for this open discussion.\nI'm fine with option number 1 (few PRs merging, no new features), projects I'm working on don't present any critical issue within your library, so a maintenance mode could be fine.\nThe company I work for could probably afford a paid license but we have a lot of JavaScript stuff (vanilla, jQuery, Vue.js), it could be difficult to justify expenses just for few projects (~5%) using Angular.\nI found difficult to use official i18n solution because of:\n\none bundle per locale,\nimpossibility to switch language at runtime without reloading the app,\nxliff file IDs synchronization,\ncannot translate inside code, only in templates.\n\nIf my personal issues could be addressed by the official i18n solution, I could switch without any problem.. I can see lot of negativity and little respect for the work of @ocombe in this discussion. I really would like to see people saying today \"I'm not gonna pay, I'll fork it\", forking and maintaining their own version of the library, it's just a simple Pipe+Service, right? Please, do it, meanwhile I'm going to buy some popcorn to watch the show. \ud83c\udf7f Probably the only thing people can do is just click on GitHub \"Fork\" button and stop then.\nIf we are not able or comfortable to pay to use his library (as it seems), just suggest to adopt option 1: whenever he will have time to merge PRs he will do it and many many thanks for his hard work in advance. Meanwhile he can concentrate on i18n for Angular core getting paid for it!. ",
    "stefangrossmann": "We started using \u201cngx-translate\u201d at the company because it delivers exactly what we need:\n\nThe JSON format worked out of the box with our professional translation tool, and it is easy to read and to handle.\nSwitching the language during runtime helps our professional translators to find correct translations and to verify them.\nWe use our own Translate-Loader to combine translation sources. This way we for example can allow our customers to provide languages we don\u2019t support by default.\n\u2026\n\nBut if we would need to buy a license, I think we would stop using it. It would be hard to argue to pay for it, if Angular itself has something for free. And I can confirm that the process of purchasing a license in a big company is a painful process.\nI am not sure if you can make your project profitable with a paid license for commercial usage. Other models I know are, that there is a limited free version of a product and a commercial one with support, extended features and extended documentation. But because \u201cngx-translate\u201d is easy to use and does exactly what it should, there is no need for us to pay for additional stuff ;-) :-/.. ",
    "vivainio": "+1 for option 1. In the end everyone wants to be on the official solution, esp. since v6 seems to fix the biggest limitations (and that they wanted to fix those in the first place, i.e. it's not going to pursue \"wrong\" direction forever.. @DenisVuyka The projects is already hosted under ngx-translate github team. There wouldn't need to be \"transfer of ownership\", just assign PR merge rights to some trusted lieutenants.\nTruth be told, resources would still be better assigned as third party improvements to angular-i18n ecosystem (tools, hooks, what have you). That would provide some freedom of innovation outside Angular's strict quality policy while not diverging from the core offering. Seems there is no real documentation for js-driven i18n in Angular 6 docs. What's the best place to look?. ",
    "Bil0": "attract more contributors and leveraging the community would be a good idea for making this lib live longer and keep it maintained,  encouraging others to share ownership of the project can greatly reduce your own workload since you don't have enough time to review all PRs and issues. Maybe it'll take some times to do so but here's my suggestions:\n\nIt's difficult for someone unfamiliar with the codebase of the lib to gauge the difficulty of an issue (Only ~10% of the current 207 open issues are labeled).\nCreating templates for PRs and issues, establish proper contributing guidelines with a clear Code of Conduct.\n\nAbout:\n\nI would need to make this library profitable somehow\n\nI read an interesting article a few weeks ago about Why Funding Open Source is Hard,\nso if you want to make this lib a business, changing the license is often the most suitable approach. Companies that rely only on open source projects and libraries are not willing to pay for a license, they'll seek for alternatives.. ",
    "web-dave": "Love this project, @ocombe keep on maintaining. plz.\nI'm fine with both options, \nbut option 1 would be more community like.\nanyway, great important valuable job. ",
    "Maistho": "I'd prefer it if Angular i18n would work better. I've been using both ngx-translate and official Angular i18n in two different large-scale projects, and in my experience it's actually been somewhat easier to get started with the official plugin. The main drawback has been no code translations, but it's coming soon! :heart: \nIf you feel like you would get more out of working on this project and related offerings I might pay for a license, but it really depends on the cost. If I can spend a couple of hours to convert a project to use Angular i18n instead I might do that instead of paying some monthly license cost. It's difficult to compete with \"free\", sadly.\nIt feels to me like Angular i18n is more geared towards larger more \"enterprisey\" businesses, while ngx-translate is geared more towards smaller projects. And, unfortunately for you, I also think that the larger businesses are more likely to pay for licenses than the smaller ones.\nIt really depends on your extra tooling and such in that case.\nI'd definitely pay for a good tool that integrates really well with our git-based workflow and makes it easier to send off our JSON (or whatever format) translation files to translators.\nLastly, great job on both ngx-translate and Angular i18n. I hope that you'll be happy whichever way you choose.. ",
    "rowdyrabouw": "@Maistho this might be an interesting tool for your translators: https://www.codeandweb.com/babeledit. @ocombe I love what you're doing with this project. \nA big plus is the run-time change of language.\nI use it in NativeScript projects so my users can switch the language easily.\nWith multiple bundles (Angular i18n) I would have to distribute multiple apps to the stores, \"just\" because the language is different.\n. Merci beaucoup @ocombe ! \u2764\ufe0f\ud83d\udc4d\ud83c\udf7e. ",
    "loicsalou": "@ocombe ngx-translate is cool and efficient, it's pragmatic and I really like it.\nIMO companies can pay for the service if they have a guarantee that the library will always be maintained. If you have several applications in production which use a library you don't want to be forced to change a library... unless you facilitate migration from ngx-translate to angular's implementation maybe ? if I know I can easily migrate from ngx-translate to Angular's solution I think I'll keep ngx-translate for some time, because it's perfect for what I'm doing and I know I can switch easily in case the lib disappears.\nIn case of doubt I guess a big company will probably choose \"security\" of a standard, which would in this case be @angular's implementation. As you are working for google it also seems to me that some kind of conflict may help you choose not to maintain the library eternally...\nPersonally after what you wrote above I must admit that Angular team seems to be taking seriously i18n topic for big companies (delegating translations to professional translator is a real concern) though I'm a bit disappointed that switching locale implies reloading the app. OK I do not expect a lot of our users to switch locale several times a day (a user in front office, discussing with end clients, might need this however). \nAs a developer I think I'll use ngx-translate for my personal projects as long as it's maintained. Regarding professional projects I think that, the day Angular's solution with i18n is OK for my needs I'll switch.\nHope this helps. Good luck and thanks for your great work !\n. ",
    "hamzapoly": "Well I have one question, is there a way on Angulari18n for angular 5 to load .json source files ?\nIn my case we don't need to generate neither to extract as all the translations are pre-configured in a json file.\nThanks in advance. ",
    "tnicola": "Hi @ocombe . First of all, congratulations for you success story and the awesome work you've done till now. I think ngx-translate it's a great library and I'd like if you didn't stop to mantain it. My company is thinking to move on and migrate to i18n but we didn't take a decision yet both for the migration effort that will take and for the missing features on i18n like code translation. I would like to ask you if it's worth to change for a big and already started project. If so, is there a guide to facilitate the process? Have you already decided a future for your library, will it be deprecated if i18n will fill the gap with the missing features?. ",
    "admir86": "Hi @ocombe,\nwhat is the final result of this discussion?\nwhat's gonna happening with ngx-translate, once ivy is released and the official i18n is updated with features like translation in code?. @ocombe I think different configuration per module (not lazy loaded) is not possible. Referring to FAQ: What if two modules provide the same service?\nA solution for this problem may be Multi Providers or a own injector?\nWhat do you think?\n. ",
    "jesujcastillom": "Seems like I'm late to the discussion, yet I would like to add that in my case, i18n doesn't cover my company needs, we handle versions of every language by client processes, so they dictate what texts they get to see, we're currently working with angular-translate done we're on angularjs still, but migrating to angular is on our roadmap, and this library would make the migration smoother, yet, I don't see my company paying for a license since we're still a small business.. That's IMO, I would be contributing either with donations or helping maintaining the library (as much as I could, I could be considered a Jr but with a will to help) . ",
    "simonv3": "I'm having the same issue with @vivainio, I'm seeing references here and there to translation in the typescript, but can't see any documentation for it at all. The Angular 6 docs documentation doesn't have anything, and the changelog doesn't seem to mention it for 6.x?. ",
    "mischkl": "I'm a ngx-translate user. For me the things missing for i18n are the flexibility of being able to dynamically switch languages without a full page refresh, and the JSON format. If those things were available I'd switch.\nThe only thing I really miss from ngx-translate is an easy way to avoid the Flash-Of-Content problem on initial load (this is using dynamically-loaded translations). IMHO it makes the initial load seem less professional - but I haven't figured out a good solution. Not sure if ngx-translate itself can help there.. @peterpeterparker unfortunately I'm not using Angular Universal, so it's not that helpful in my case. @peterpeterparker there are a couple of issues with that approach. First, all of the languages must be bundled, which creates a lot of bloat beyond a couple of languages. Second, some (approx half) of our translations are purposefully fetched from the server at runtime rather than being part of the Frontend, since we want to be able to update them in the backend without changing the Frontend. For these reasons simply importing the JSONs is not an option.. ",
    "fetis": "I'm personally waiting for a proper solution from Angular since v4 (it was promised in v5 back days). ~If promises will fail again in v7, I think I'll never trust Angular team in this question.~ Looks like this happend Ivy is not planned to v7, so real i18n solution will come around v8. And the current situation tears me apart. I really like the extraction part of the official implementation, it's the way how it should be. But the unfished state of code translations makes me feel pain.\nI see a lot of complaints about missed JSON format, but XLIFF is an open XML format. Write a converter is probably a 1-2 days task. Probably, your translation tool already does it out of the box.\nRegarding the initial question, I think @ocombe is better to focus on the official solution with some mitigation of current pain like it was done with ngx-translate/i18n-polyfill\n. @ocombe to make it clear, this will happen only after new i18n runtime, which happens only after Ivy official release (after v7 according to this https://github.com/angular/angular/issues/21706#issuecomment-425183461). Correct?. ",
    "ZCatherine": "I want to know if I18N still does not support translation of component library.. > @jameslafferty please provide working version of your repository for 'ng serve' command. Currently, I'm seeing the following - http://prntscr.com/kq7sgr, probably because you've put /dist destination in tsconfig.\n\n@jbarber2016 After putting efforts on finding the best solution for you case, unfortunately (based on the current possibilities) I think you should manually copy your assets folder to the /dist/your-lib-project-name and pack your library afte doing it. Upon completion, you should be able to have your translations available and visible to your app's imports.\nAlso, if nothing happens this way, try with defining and exporting your localizations as .ts files with simple object that contains your translation, so it's:\nexport const engLocaleKeys = {\n  \"my-translation\": \"Hello world!\"\n}\nYour public_api.ts:\nexport * from './lib/localization/index';\nIt should look like:\nhttp://prntscr.com/kq7zd0\nInside of app.component.ts of your main app, or anywhere else where you tell your app the location of translations you use, do the following:\nimport { engLocaleKeys } from 'your-lib-name-inside-of-package.json';\nIt should work with objects instead of .json without single problem.\n\n@ease Can you give a detailed description of this implementation method, I am a newcomer to angular, so I can't understand what you mean, thank you very much.. @ease I am building a Angular 6 application with several libraries .\nwhen I build my application, the assets in library will be thrown away.\nI don't want to copy the assets folder because different teams are responsible for different libraries,so I want to use the second method you proposed,but I am a newcomer to angular and I don't know if I should modify the loader how to modify the following sections.\nThank you.\n\n. @ocombe  I am building Angular 6 application with several libraries \uff0ctoo.\nwhen i build my application, the assets in library will be thrown away\u3002\nCould you please give me a solution\u3002\nsorry\uff0cI am not good at English\u3002. Could you please share the code of the nodejs script  with me?\nthank you very much.. Thank you, this helped me a lot.. ",
    "anilgr": "Can anyone tell how did you translate using native way?, you need angular CLI for that right?.\nIonic 3 project is not even angular project.. ",
    "Gokul-Pulsebeat": "@ocombe Does Angular i18n and/or ngx-translate support AngularJS (version 1.x)? Can these services be downgraded in used in AngualrJS?. ",
    "ali-idrizi": "The JSON files don't actually compile, all you need to do is find them in your assets directory and change them. After you run ng build it should be located at /dist/assets/i18n/en.json.. Nope, still nothing. It doesn't even call the .next() after setTranslation, nothing shows in the console. Here is a Plunker demo. ",
    "javaspeak": "@jarodsmk thank you. ",
    "ezintz": "hello everyone, I also ran into this issue. We're using by default as translation key the \"english version\". I think this should be working exactly as described above, the benefit for doing it like this - at least from our current perspective - is that we can let our clients decide to use a different wording if they want to but also provide to the end user already content, in case translation has not been changed yet.. ",
    "markgoho-EDT": "I'm seeing the same behavior. I've imported it in the shared module and it's still saying pipe not found.. Found the issue. We had a 0 width column header that whose height was expanding based on the naked path of the translation.. ",
    "vov4ik08": "Hello All. This problem reproduced for me too. I use angular 5 cli cleen project. Configure all as documentation, and after start i see error The pipe 'translate' could not be found . Please help. ",
    "evansdianga": "What worked for me was to export the TranslateModule in my SharedModule. I didn't have to import the TranslateModule in a FeatureModule\nI have deleted irrelevant imports, declarations and providers.\n```\nimport { TranslateModule } from '@ngx-translate/core';// Import the TranslateModule\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTooltipModule\n  ],\n  providers: [AppConfigService],\n  declarations: [.....],\nexports: [ TranslateModule]// This is the Key\n})\nexport class SharedModule { }\n```. ",
    "jiagouview": "@jlberrocal Same problem here.thanks you.importing TranslateModule to myModule fixed the issue.. ",
    "martinmicunda": "I have the same issue.. ",
    "rhofer": "That would be very helpful to at least have a two step approach instead of the one step as available today.\nAdditional scenario , which would be most relevant for me, is:\n- Developer define keys and initial values. May call it developer-en.json\n- To release, we may polish this English first, to create a nice en.json\n- What might be enhanced with various more languages fr.json, ... let's call this any-other-lang.json\nThen fallback strategy should be, in case not found: any-other-lang.json --> en.json --> developer-en.json.\nThis would allow to never have empty strings, at least asured by developer-en.json. Potentially with a loss in quality of texts but at least operate-able.. ",
    "liviu-c": "It seems this issue with the spaces (at the begining or at the end) is also available in the last build v11.0.0\nhttps://stackblitz.com/edit/github-ad9uqm-vqauiz\n. This issue is back: https://github.com/ngx-translate/core/issues/790\nTranslatetion fails when translate directive is used and the key has spaces at the begining or at the end.. ",
    "manandkumaar": "Its not required to call unsubscribe as the translate.get() method will automatically completes the observable.\nBelow is the source code for your reference.\n\n. ",
    "scttcper": "I use something like https://github.com/TypeCtrl/ngx-headroom/blob/master/build.ts in my libs. ",
    "leron8": "Having the assets folder directly under the src folder worked for me. Since I wrongly had it nested in an app folder. ",
    "raugaral": "I'm in the same point. Have you found any solution? \nEdit:\nhttps://github.com/ngx-translate/core/blob/master/FIREBASE_EXAMPLE.md. ",
    "avBerenger": "True, excepts that, here, it's not about the TranslateMessageFormat limitness, but it's about the first call made by the translate directive with partial data.. ",
    "dackmin": "Is there a way I can have a look at your TypeScript take on the issue \ud83d\ude04  ?\nI will try with the factory move and provide some feedback as soon as I can.. I used Chrome debugger to try to understand what is going on with TranslateService parameters, and just for informational purposes this is what I got with working @ngx-translate/core@8.x.x :\n\nAnd with non-working ngx-translate/core@9.x.x : \n\nIf you don't use core.umd.js or core.es5.js when using typescript (I'm not very familiar with typescript, as you may have noticed) the problem is probably with any of those two files.\nIf I'm not mistaking, making a full ES5/6 only project should throw the exact same error.\nWill try that on another branch of my issue repository.. here you go : https://github.com/dackmin/ngx-translate-issue/tree/non-working-with-es6\nAngular core warnings have always been there, using v8.x.x or v9.x.x. I was going to link you this issue but you already found it :). ",
    "fxck": "most likely a fault of the core, rather than the plugin, as it works for pipe, doesn't for directive. @CodeAndWeb except it's not the problem.\nSee https://github.com/lephyrus/ngx-translate-messageformat-compiler#usage\nSee also https://github.com/lephyrus/ngx-translate-messageformat-compiler/issues/20\n\n. ",
    "elron": "I solved this by \n{{ 'HELP.STEPS.1.TEXT.1' | translate:\"{siteName: '\" + ('SITE_NAME' | translate) + \"'}\" }}\n`or simply by:\n{{ 'HELP.STEPS.1.TEXT.1' | translate:\"{siteName: 'Your Site Name'}\" }}. ",
    "daniel-mueller-me": "@un33k Have you already found a solution? . ",
    "arturhun": "Assuming by the label Status: Solved, the requested enhancement Documentation on how to setup translation for e2e is available somewhere. Where can one find it? :). ",
    "dnyg": "I have my translations stored in key-value table in a database.\nIf the translation key is missing I would like to perform a web request to my server that adds the key to the table.\nIf it is exists, but the value is null/undefined, I just want to return the translation key.. This is the exact thing I want to avoid - to limit the amount of requests to the server, I only want to make the server request if absolutely necessary (when the translation key doesn't exist). ",
    "alvachien": "Have some issues here. As the the new material2 6.0 beta package requires angular 6.0 rc, and angular 6.0 rc requires rxjs6.0 beta.\nWhen all beta packages installed, the project will failed at compile:\nERROR in node_modules/@ngx-translate/core/src/translate.directive.d.ts(2,10): error TS2305: Module '\"C:/Users/XXX/node_modules/rxjs/Subscription\"' has no exported member 'Subscription'.\nnode_modules/@ngx-translate/core/src/translate.loader.d.ts(1,10): error TS2305: Module '\"C:/Users/XXX/node_modules/rxjs/Observable\"' has no exported member 'Observable'.\nnode_modules/@ngx-translate/core/src/translate.service.d.ts(2,10): error TS2305: Module '\"C:/Users/XXX/node_modules/rxjs/Observable\"' has no exported member 'Observable'.\n. @ocombe Thanks so much for the next release.\nIt works! There is no more error now. Thanks!. ",
    "miteshgodhani": "facing same issue. . thanks, it is working with @ngx-translate/core\": \"9.1.1 as expected with angular 5. ",
    "sysmat": "facing same issue, after upgrade\n```\n \"@angular/common\": \"5.2.9\"\n\"@ngx-translate/core\": \"^9.1.1\" --> ^10.0.0\"\n```. thx, sory, using ncu. ",
    "irustm": "Version 10 is only compatible with angular 6 and rxjs 6, as explained in the changelog and the readme.\nUse ngx-translate 9.1.1. ",
    "bm-software": "@Jamaks Thank you. I really didn't see that in the readme. Sorry for this useless issue.. ",
    "FriOne": "For those who need the old version you need npm i @ngx-translate/core@9.1.1.\nThere is example here.. ",
    "lut2410": "\nhttps://github.com/ngx-translate/core. ",
    "kumaresanperumal5666": "I had been struggling with the issues for two days. after taking a look at it. it worked for me. thx. ",
    "jibinbs": "@lut2410  thanks man its save my time....................... ",
    "aleixsuau": "If you are using http-loader, the compatible version is 2.0.1: \nnpm install @ngx-translate/http-loader@2.0.1 --save  . ",
    "ashrafali-v": "run  npm i @ngx-translate/core@9.1.1 on command prompt working fine for me.. ",
    "mubasshir": "just go with yarn add @ngx-translate/core@9.1.1 for ionic 3. ",
    "lfxsantos": "\nFor those who need the old version you need npm i @ngx-translate/core@9.1.1.\nThere is example here.\n\nThanks!!!!. ",
    "GuoYi1992": "to use 9.1.1 version worked for me,thank u!!!. ",
    "kapilSoni101": "FriOne sir,i have already installed this plugin but again got same error Object(...) is not a function ; Zone:  ?. #ACivilise  sir i have already installed this plugin but not working. Ok sir i agree with you but tell me way to read pdf  data from the url.\nRegards\nKapil soni\nOn Sun, 27 Jan 2019, 9:22 pm Fahd Allebdi, notifications@github.com wrote:\n\nDear, your question not related to this plugin neither issue.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/989#issuecomment-457929355,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AZWOywBS17kxJLk8PoM71BJSDmFCNeZxks5vHctBgaJpZM4Z8w1o\n.\n. \n",
    "princeraizadha": "Resolved .....\nIssue Because of Old and new version i stuck same for FCM and geo Location ...... after 2 day struggle change the version from 5.0.0 to 4.18.0  and tham run npm i  in CMD  \n\n. ",
    "ar53n": "And pipe transform show first empty string but directive show first path to translate string.. ",
    "stephanie-b1n3t": "Yeah ! It works !!!\nMany many thanks !. ",
    "karpawar": "Hi\nI got it done in same way. \nThank You\n<select placeholder=\"State\">\n     <option *ngFor=\"let state of states\" [value]=\"state.code\">\n          {{ 'STATEDROPDOWN.'+state.name | translate}}\n     </option>\n</select>\nStackBlitz for referrence : https://stackblitz.com/edit/trying-ngx-tranlate?file=src%2Fapp%2Fapp.component.html. ",
    "xeii": "Added related question in SO:\nhttps://stackoverflow.com/questions/50015765/ngx-translate-settraslation-missing-translation-in-dynamic-component. @alexzuza Thank you! I never thought they would be overridden that way around.. I found another issue, this time I swapped fr to be the default and used language. Now the translation in dynamic component is not working. Strangely enough, if swap around (as in change the order) the code blocks where translations are set in dynamic component, they start working again. Seems like another race condition.\nI updated the stackblitz: https://stackblitz.com/edit/github-1ujje5-sugj8h\n. ",
    "alexzuza": "It has nothing to do with dynamic component.\nSeems you have to wait till json file is loaded. Otherwise your dynamic translations will be overrided.\nthis.translate.getTranslation('en').pipe(take(1)).subscribe(() => {\n  this.translate.setTranslation('en', {\n    'DYNAMIC': 'I am dynamic component'\n  }, true);\n});\nhttps://stackblitz.com/edit/github-1ujje5-8bya2x?file=src/app/app.component.ts. ",
    "cristianmartinez": "Hi @sarath3940, I think you can use TranslateService.instant('VIEW_KEY') where VIEW_KEY is the token on your translation file. . ",
    "sarath3940": "@cristianmartinez . Thanks for your response. But, I don't understand what I'm suppose to do. Can you please explain what should I do?\n. ",
    "Ahmed-sa3d": "Thanks @CodeAndWeb you saved my time. ",
    "dmotorny": "Thanks a lot! Really helpful!!! \nGreat lib!. ",
    "AlexBrend": "yes language file is being loaded in network and getting key value in response. As response is\n{HOME: {TITLE: \"Hello Angular with ngx-translate!\", SELECT: \"Change language\"}}\n. I am stuck in this since last two days , Please let me correct if i am wrong any where in my code. As same code is working in angular 5.0.1 version and 5.0.3 but not working with angular version 5.1.2 and 5.2.10 . i did that but getting in console as  below  :\ntranslate.get('HOME.TITLE').subscribe(console.log); outputs 'HOME.TITLE' to the console. ",
    "stottle-uk": "I am also experiencing this problem and i can see the translation file loading in the network tab\nAngular CLI: 1.7.3\nNode: 8.9.4\nOS: win32 x64\nAngular: 5.2.9\n... animations, common, compiler, compiler-cli, core, forms\n... http, language-service, platform-browser\n... platform-browser-dynamic, router\n@angular/cdk: 5.2.4\n@angular/cli: 1.7.3\n@angular-devkit/build-optimizer: 0.3.2\n@angular-devkit/core: 0.3.2\n@angular-devkit/schematics: 0.3.2\n@ngtools/json-schema: 1.2.0\n@ngtools/webpack: 1.10.2\n@schematics/angular: 0.3.2\n@schematics/package-update: 0.3.2\ntypescript: 2.5.3\nwebpack: 3.11.0\ntranslate.get('HOME.TITLE').subscribe(console.log); outputs 'Hello Angular with ngx-translate!' to the console when use it in my app.component. But it outputs 'HOME.TITLE' when i use in a lazy loaded module. Hi\nI've created a stackblitz which seems to show the issue - even though it is using Angular 6 (it's a fork of your example)\nhttps://stackblitz.com/edit/github-kk1mud\nApologies if i am missing something obvious\n. ",
    "ansarikhurshid786": "I am also looking for how to bind in component. . what is the error. is there any error or warning log?. is there any error log?. This package is required angular 2+. If you want to use it with angularjs or angular 1.x.x then use https://github.com/angular-translate/angular-translate. . I am also using ionic 3. it is working perfect. \n. Have you check compatible version at https://github.com/ngx-translate/core#installation\n. ",
    "daaain": "What I noticed is that if I call setDefaultLang first then I'll always see a an XHR request (for that language file), but calling setTranslation first there isn't one (as expected). . ",
    "reenezden": "Hi all, Has any one gotten a fix for this?\nThe following syntax fails with no errors\n<div translate>text_to_translate</div> \n<a translate>text_to_translate</a>\nUsing a span works fine\n<span translate works>text_to_translate</span> \nor using the following syntax \n<div> {{ 'text_to_translate' | translate }} </div>\nI'm using angular version 6\nWorks well for ngx-translate/core version\n9.1.1 and 10.0.0\nFails ngx-translate/core version\n10.0.1 and 10.0.2\n. Thanks @etiennetalbot.  I had given more detail about the issue here https://github.com/ngx-translate/core/issues/869.  . ",
    "juri33": "+1 Same issue.\nCant use 10.0.2. Same here. ",
    "taiducnguyen": "Hi,\nI found a solution here to handle error: https://github.com/ngx-translate/core/issues/160\nDo you have any better solution for this one?\nThanks. ",
    "nicholasgcoles": "Hi @taiducnguyen did you manage to solve this without using a function?\nIt would be great if one could parse in default text as an argument to the translate pipe. ",
    "khan990": "Yes, I need it too.. ",
    "Qocotzxin": "@rmartin94 Did you find a solution? This is driving me crazy right now and it seems nobody is posting a good workaround. ",
    "iamruslanbakirov": "Why not add two-way binding for translation params ?. ",
    "raschle": "+1\n. ",
    "VictorComeGuillon": "+1. ",
    "JayaKrishnaNamburu": "@ellenchristine  in your angular-cli the prefix and assets should refer to the paths as shown below.\n\"assets\": [\n        \"assets\",\n        \"favicon.png\"\n      ],\n \"prefix\": \"app\"\nThen refer it like this in your root module \nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}. ",
    "LariscusObscurus": "I had the same problem, the InMemoryDataService intercepts your requests to the real server.\nTo fix this you can set passThruUnknownUrl: true like this:\nInMemoryDataService, {dataEncapsulation: false, passThruUnknownUrl: true}\n. ",
    "NickDerSchlitzerMcGurk": "I have the same Problem. With Angular Version 6.\nBut there isn't a angular-cli.json File. So I add the path in the angualr.json\n\"projects\": {\n    \"navigatorWebClient\": {\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"projectType\": \"application\",\n      \"prefix\": \"gue\",\n      \"schematics\": {\n        \"@schematics/angular:component\": {\n          \"styleext\": \"scss\"\n        }\n      },\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/navigatorWebClient\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [\n              \"src/favicon.ico\",\n              \"src/assets\",\n              \"src/assets/i18n\"\n            ],\n            \"styles\": [\n              \"src/styles.scss\"\n            ],\n            \"scripts\": []\n          },\nBut the Error isn't disappear\nMy ngx-translate-Version is\n\"@ngx-translate/core\": \"^10.0.2\",\n\"@ngx-translate/http-loader\": \"^3.0.1\",\n\nbest regards\nMcGurk. ",
    "packetstracer": "\nI had the same problem, the InMemoryDataService intercepts your requests to the real server.\nTo fix this you can set passThruUnknownUrl: true like this:\nInMemoryDataService, {dataEncapsulation: false, passThruUnknownUrl: true}\n\nWorked for me, if I disabled InMemoryDataService would work but not when enabled so the passThruUnknownUrl config property did the trick.. ",
    "EricSch": "Thanks for answering, I see your point.\nI don't reference your service directly, I reference a wrapper service in the module which is using your service in ngx-translate. I don't get it, why Angular thinks now, ngx-translate isn't used and doesn't compile it.. ",
    "arangates": "after going through docs i found that To translate any component values in the application, for Eg. title of an alert, the TranslateService provides a get observable.\ni have a lang-switch module which does the function of switching language. but is there a way to notify all other modules about the lang-switch ? \nfeature 1.module.ts\npublic getValuesFromDefaultDocument() {\n    const title = i18n.populateDocument;\n    const body = i18n.populateDocumentModalText;\n    this.popupService.showPopup({\n      title: title,\n      body: body,\n      buttons: [\n        {\n          text: i18n.cancel,\n          click: () => {\n          }\n        },\n        {\n          text: i18n.yes,\n          click: () => this.populateDefault(),\n          type: ButtonType.Secondary\n        }\n      ]\n    });\n  }. ",
    "hspier": "@ocombe Sure will create it. ",
    "coingod": "I fixed the issue. It was actually related to this line:\nlet allCountries = COUNTRIES;\nMy COUNTRIES list was being overwritten by the changes in allCountries, replacing all the Translation Keys with translated strings. So the next time it tried to read the keys, they were not there. Silly mistake.\nFixed via Deep Cloning of the array:\nlet allCountries = JSON.parse(JSON.stringify(COUNTRIES));. ",
    "stefdelec": "@lousley what is missing in my PR to be actually merged?. ",
    "lousley": "@stefdelec nothing...i have approved. ",
    "Franki1986": "Closed with stackoverflow. same problem here with Angular version 7.2.5\nSomething new here?. ",
    "mybluedog24": "For translation in component.ts, use translate.stream() or translate.get():\nExample:\nJavascript\nimport {TranslateService} from '@ngx-translate/core';\n...\nmessage: string;\n...\nconstructor(private translateService: TranslateService) {\n    // stream emits new value when language changed. You can use get if only needs it once.\n    translateService.stream(\"message\").subscribe(value => this.message = value);\n}\nDocumetation:\nFrom API -> TranslateService -> Methods section:\nget(key: string|Array, interpolateParams?: Object): Observable: Gets the translated value of a key (or an array of keys) or the key if the value was not found\nstream(key: string|Array, interpolateParams?: Object): Observable: Returns a stream of translated values of a key (or an array of keys) or the key if the value was not found. Without any onLangChange events this returns the same value as get but it will also emit new values whenever the used language changes.\nhttps://github.com/ngx-translate/core\n. ",
    "phsims": "have you tried using a core module instead of shared?. ",
    "meDavid": "The line you are referring to is assigning a subscription of the onTranslationChange in de TranslationService to the local property with the same name in the pipe. There is nothing wrong here.\nThe naming is deceiving and the type defenitions in https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/lib/translate.pipe.ts#L14 incorrect. The onTranslationChange is the TranslateService is an EventEmitter while the  onTranslationChange property in the pipe is a Subscription.. ",
    "wisespace-io": "It seems that it was caused by ng-packagr, I upgraded and now everything works fine. . ",
    "kwiesmueller": "Same here,\nafter the upgrade to Angular6 I get this error and really don't know why.. ",
    "rasmusvhansen": "Same here. I spent a few hours trying to solve with no luck.... ",
    "artemverbo": "+1 to @wisespace-io, I'm upgrading a codebase from Angular 5.x to 6.x and had this error until upgraded ng-packagr from 2.4 to 4.2. ",
    "rwijngaa": "Note, this is jhiTranslate in jhipster\n```\n@Component({\n    selector: '[jhiTranslate]',\n    template: ''\n})\nexport class JhiTranslateComponent {\n@Input() jhiTranslate: string;\n\n@Input() translateValues: any;\n\n}\n```. The problem is here:\nngx-github translate regex voodoo\nI worked around the issue by doing\n<span [innerHTML]=\"descriptionKey | translate:descriptionParams\">\nand let the controller do the magic of returning a descriptionKey() and descriptionParams(). https://jsfiddle.net/phobL65c/4/. ",
    "UrsBeeli": "We have the exact same problem.. ",
    "Yogu": "I think you should just import TranslateModule directly to get access to the directives and pipes, and leave it up to the app to provide the services. Having multiple loaders is not really supported anyway: https://github.com/ngx-translate/core/issues/763\nSee the angular documentation on what to import:\n\nWhat should I import?\nImport NgModules whose public (exported) declarable classes you need to reference in this module's component templates.\n\nNote: nothing mentioned of services\n\nHow do I restrict service scope to a module?\n[...]\nAs a general rule, import modules with providers exactly once, preferably in the application's root module. That's also usually the best place to configure, wrap, and override them.\n\nThey also distinguish between Widget modules and Service modules.\nIf I understand the usage section of the README of ngx-translate correctly, they also recommend importing TranslateModule in shared modules:\n\nNote: Never call a forRoot static method in the SharedModule. You might end up with different instances of the service in your injector tree. But you can use forChild if necessary.\n\nNote that it says use forChild if necessary, not as a general rule for shared modules.\nMaybe we should document this more explicitly in the README.. This is not an ngx-translate issue. Static component properties are not available within templates. As a solution, you could add a getter that returns the value.. ",
    "kshitij-tf": "@matheuscaldasrj - Could you find any approach to achieve this behaviour? I am facing similar issue where language change event on application translate service is not propagating to the library.. ",
    "tlaskowski": "Hi I have similar error. I'm using:\n\"@ngx-translate/core\": \"11.0.0\",\n\"@ngx-translate/http-loader\": \"4.0.0\",\nApp.module.ts:\njavascript \nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: TranslationProviders,\n        deps: [HttpClient],\n      },\n    }),\nMy LazyLoaded module Imports SharedModule which imports and exports TranslateModule. I tried to import TranslateModule with forChild but didn't help.\nAny idea?. ",
    "segux": "Hi, i wrote this ugly solution invoking setTranslation with  TranslateService and appending, all translations are come to be loaded and run everything fine:\nThis is my finally solution\nLibrary code\n```\navailableLanguages.ts\nimport { en } from './en.ts';\nimport { es } from './es.ts';\nexport const languages = { en, es };\ntranslations.service.ts\n@Injectable()\nexport class LibTranslationsService {\n  private availableLanguages = languages;\n  constructor(private translate: TranslateService) {\n  }\ninit(): any {\n    Object.keys(this.availableLanguages).forEach((language) => {\n // Timeout because i need to be async calls after init app\n  setTimeout(() => this.translate.setTranslation(language, this.availableLanguages[language], true));\n});\n\n}\ngetTranslations() {\n    return this.availableLanguages;\n  }\n}\n```\nApp \napp.component.ts\n  ngOnInit() {\n    this.translateUiService.init();\n  }. ",
    "juanjinario": "I dont have problems with Translate module, I have in my app.module\n```\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport { SharedModule } from './shared/shared.module';\nimport { AppRoutingModule } from './app.routing';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    SharedModule,\n    AppRoutingModule,\n    TranslateModule.forRoot({\n        loader: {\n            provide: TranslateLoader,\n            useFactory: HttpLoaderFactory,\n            deps: [HttpClient]\n        }\n    })\n  ],\n  exports: [],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n// required for AOT compilation\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n```\nAnd In my shared.module I have\n```\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MaterialModule } from '../pages/component/material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ToastrModule } from 'ngx-toastr';\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule,\n    MaterialModule,\n    FlexLayoutModule,\n    HttpClientModule,\n    ToastrModule.forRoot(),\n    TranslateModule.forChild({\n      loader: {\n          provide: TranslateLoader,\n          useFactory: HttpLoaderFactory,\n          deps: [HttpClient]\n      }\n    })\n  ],\n  exports: [\n    MaterialModule,\n    FlexLayoutModule,\n    ToastrModule,\n    TranslateModule\n  ]\n})\nexport class SharedModule { }\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n```\nI think that the problem can be that you didnt put the Translate Module in the exports zone of the Shared Module.\n. ",
    "PedenFraHeden": "I just had the same issue today and ran through some of the code for \"set\" and \"setTranslation\" functions. And yes, \"set\" doesn't handle nested translation keys, unfortunately. But it's possible by using the \"setTranslation\" - but you have to create a nested object from your translation key manually. Here's what I did: \nconst key = \"admin.users.Title\";\nconst keyParts = key.split('.');\nconst last = keyParts.pop();\nlet translations = {};\nkeyParts .reduce(function (o, k) { return o[k] = o[k] || {}; }, translations)[last] = \"New title\";\nthis.translate.setTranslation(\"en\", translations, true);\nThis will overwrite the value of admin.users.Title. \n. ",
    "adelloste": "Hi @Vishnu0522 \nas you see in the official doc of ngx-translate, there is this paragraph...if you are using lazy loading and you have a different modules, you can configure different services by using isolate: true.\nWith this approach, the service is a completely isolated instance (for translations, current lang, events, ...).\n. Hi @lordatef \nyou can use another approach to translate the title. In your route, you can set the key that you want to translate:\n{\n    path: '',\n    component: SampleComponent,\n    children: [\n      { \n        path: 'Sample',\n        component: InformationsComponent,\n        data: { \n          title: \"xxxx.yyyy.title\"\n        }\n      }\n    ]\n  }\nafter, as you can see in the angular doc, you can inject the Title service into your component so you can translate the key and set the title. For example, in your component, you can do it:\npublic constructor(\n    private titleService: Title,\n    private route: ActivatedRoute,\n    private translate: TranslateService\n  ) {\n    this.titleService.setTitle(\n      translate.instant(this.route.snapshot.data['title']);\n    );\n}\nRemember that .instant is synchronous, if your loader is async then you need to wait until the lang files have been loaded to get translations. If it's async, you can use .get which return an observable. For example you can do it:\npublic constructor(\n    private titleService: Title,\n    private route: ActivatedRoute,\n    private translate: TranslateService\n  ) {\n    translate.get(this.route.snapshot.data['title']).subscribe(\n      (res: string) => {\n        this.titleService.setTitle(res);\n      }\n    );\n}\n. ",
    "BrianCerasuolo": "@adelloste Using this approach, I run into the issue described here https://github.com/ngx-translate/core/issues/876   \nDo you know a way around this issue?. ",
    "robertbrower-technologies": "How to load translations per module is described in the documentation. If you want to load on a component by component basis you can try something like this:\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nexport const EN_TRANSLATIONS = {\n  'found': 'found',\n  'not found': 'not found'\n};\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\ntranslationsUrl = 'assets/i18n';\nconstructor(private translate: TranslateService, private http: HttpClient) {\n    this.translate.setDefaultLang('en');\n    this.translate.use('de');\n    this.translate.setTranslation('en', EN_TRANSLATIONS);\n  }\nngOnInit() {\n    this.loadTranslations('de');\n  }\nloadTranslations(locale: string) {\n    return this.http.get(${this.translationsUrl}/${this.constructor.name}-${locale}.json).subscribe((data: any) => {\n      this.translate.setTranslation(locale, data);\n    });\n  }\n}\nTested w/ Angular 6. ",
    "paulmfischer": "Having this same behavior on a large scale application after updating to latest.\nI was able to fix this locally by modifying the installed code for the translate directive to maintain the key once it had found it as such:\nif (trimmedContent.length) {\n  // we want to use the content as a key, not the translation value\n  if (content !== node.currentValue) {\n       key = trimmedContent;\n       // the content was changed from the user, we'll use it as a reference if needed\n       node.originalContent = this.getContent(node);\n  } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n      node.lastKey = null;\n      // the current content is the translation, not the key, use the last real content as key\n      key = node.originalContent.trim();\n  }\n}\nthis.key = key; <-- added this to the after the directive searches for they key.\nThis code snippet is from translate.directive.ts line 80-91 - starting if block\nThen subsequent calls to checkNodes had the original key and didn't run the snippet through the missing translation handler.\nThis was a quick and dirty fix to make it work and may not be the best solution but it is a solution that worked.\nIf I have time I would be more than happy to create a PR for this as a fix if it is deemed a proper fix which would in turn save me from a headache of updating all instances of the translate directive in the current app I am working in.. The other option is that the way our application is built is causing the ngAfterViewChecked life cycle hook to run multiple times incorrectly leading to this bad behavior.. ",
    "kazinov": "Having the same issue after updating to \nangular@6.0.9\n@ngx-translate/core@10.0.2\n@ngx-translate/http-loader@3.0.1\nThe problem appears when there is a line break or a space in markup.\nCauses the MissingTranslationHandler call:\n\\<b translate>\n        foo\n\\</b> \nWorks fine:\n\\<b translate>foo\\</b>\nSo it's probably a duplicate of:\nhttps://github.com/ngx-translate/core/issues/906\nMinimal reproduction of the problem:\nhttps://stackblitz.com/edit/github-ngx-translate-904-qmbro2?file=src%2Fapp%2Fapp.component.ts. ",
    "fdj94": "Having a issue after updating to\nangular@6.1.5\n@ngx-translate/core@10.0.2\n@ngx-translate/http-loader@3.0.1\nThe problem appears when i use the translate.use to change the language,It don't work:\n<b translate>\nfoo\n</b>\nWorks fine:\n<b translate>foo</b>\nBut when I use the\n@ngx-translate/core@8.0.0\n@ngx-translate/http-loader@2.0.0,\n<b translate>\nfoo\n</b>\nwas fine\nI don't know, what parameters do I need to configure?. I also have the same problem.\n<p translate>\nlabel\n</p>\nit works in the first in a component, but if then i use the translate.use to change the language(don't change the component), it often  don't work.. ",
    "kykint": "Is there a fixed version or workaround?. There is one more workaround - just downgrade ngx-translate to \"10.0.0\". ",
    "nbijl-worthit": "@kykint yes, there is a workaround, have a look at my initial post:\nWhen I change the code to :\n<div translate=\"translation_key\"></div>\nthen the MissingTranslationHandler is not triggered.. Duplicate of https://github.com/ngx-translate/core/issues/887. ",
    "atakchidi": "The difference between 10.0.0 and 10.0.2 is in those lines:\nlet content = this.getContent(node).trim();\n          if (content.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\nlet content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\ntrimmed value was compared to node.currentValue and now original value is compared but trimmed is the key. It does not work cause only context inside double braces is interpolated. https://github.com/ngx-translate/core#methods-1 . ",
    "vkmi": "Issue closed before because I accidentally opened it before writing the description, reopened now that I fixed that.. ",
    "Robert-Janagap": "Hi\nNo worries, it's already working\nThanks,\nRobert\nOn Mon, Sep 17, 2018, 6:55 PM Khurshid notifications@github.com wrote:\n\nwhat is the error. is there any error or warning log?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/889#issuecomment-421967391,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI1Pxw9jQ-yBqsE1cF4ZDKuWTFTJSU60ks5ub3-rgaJpZM4VMKhb\n.\n. \n",
    "markelor": "1+\n. ",
    "levytskyy": "+1. ",
    "Chetan07j": "+1. ",
    "Alvin-Voo": "Hi guys,\nTry this in your server.js.\nThe getBrowserLang is getting from window.navigator.language which is not available at server side. Just define some value for it ;)\n```\nconst domino = require('domino');\nconst fs = require('fs');\nconst template = fs.readFileSync(path.join(__dirname, '../dist/browser/index.html')).toString();\nconst win = domino.createWindow(template);\nwin.navigator.language='en';\nglobal['window'] = win;\nglobal['document'] = win.document;\n```. Hi @mgutbor you are supposed to put the win.navigator.language before you declare the global window variable.\nwin.navigator.language='en';\nglobal['window'] = win;. ",
    "mgutbor": "I have the same proyect, and after this modification on my server.ts file:\n\nconst domino = require('domino');\nconst fs = require('fs');\nconst path = require('path');\nconst template = fs.readFileSync(path.join(__dirname, '.', 'dist', 'index.html')).toString();\nconst win = domino.createWindow(template);\nconst files = fs.readdirSync(${process.cwd()}/dist-server);\nglobal['window'] = win;\nObject.defineProperty(win.document.body.style, 'transform', {\n  value: () => {\n    return {\n      enumerable: true,\n      configurable: true\n    };\n  },\n});\nglobal['document'] = win.document;\nglobal['CSS'] = null;\nglobal['XMLHttpRequest'] = require('xmlhttprequest').XMLHttpRequest;\nglobal['Prism'] = null;\nwin.navigator.language='en';\n\nI received this error after execute npm run generate:prerender:\n\n\nnode prerender.js\n\nERROR TypeError: Cannot read property 'indexOf' of undefined\n    at TranslateService.getBrowserLang (webpack:///./node_modules/@ngx-translate/core/fesm5/ngx-translate-core.js?:886:25)\n    at new eval (webpack:///./dist-server/main.2354f112b15d37acff04.js?:1:298972)\n    at createClass (webpack:///./node_modules/@angular/core/fesm5/core.js?:9598:20)\n    at createDirectiveInstance (webpack:///./node_modules/@angular/core/fesm5/core.js?:9483:20)\n    at createViewNodes (webpack:///./node_modules/@angular/core/fesm5/core.js?:10703:36)\n    at createRootView (webpack:///./node_modules/@angular/core/fesm5/core.js?:10617:5)\n    at Object.createProdRootView [as createRootView] (webpack:///./node_modules/@angular/core/fesm5/core.js?:11129:12)\n    at ComponentFactory_.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:8963:29)\n    at ComponentFactoryBoundToModule.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:3612:29)\n    at ApplicationRef.bootstrap (webpack:///./node_modules/@angular/core/fesm5/core.js?:4847:40)\nUnhandled Promise rejection: Cannot read property 'indexOf' of undefined ; Zone:  ; Task: Promise.then ; Value: TypeError: Cannot read property 'indexOf' of undefined\n    at TranslateService.getBrowserLang (webpack:///./node_modules/@ngx-translate/core/fesm5/ngx-translate-core.js?:886:25)\n    at new eval (webpack:///./dist-server/main.2354f112b15d37acff04.js?:1:298972)\n    at createClass (webpack:///./node_modules/@angular/core/fesm5/core.js?:9598:20)\n    at createDirectiveInstance (webpack:///./node_modules/@angular/core/fesm5/core.js?:9483:20)\n    at createViewNodes (webpack:///./node_modules/@angular/core/fesm5/core.js?:10703:36)\n    at createRootView (webpack:///./node_modules/@angular/core/fesm5/core.js?:10617:5)\n    at Object.createProdRootView [as createRootView] (webpack:///./node_modules/@angular/core/fesm5/core.js?:11129:12)\n    at ComponentFactory_.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:8963:29)\n    at ComponentFactoryBoundToModule.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:3612:29)\n    at ApplicationRef.bootstrap (webpack:///./node_modules/@angular/core/fesm5/core.js?:4847:40) TypeError: Cannot read property 'indexOf' of undefined\n    at TranslateService.getBrowserLang (webpack:///./node_modules/@ngx-translate/core/fesm5/ngx-translate-core.js?:886:25)\n    at new eval (webpack:///./dist-server/main.2354f112b15d37acff04.js?:1:298972)\n    at createClass (webpack:///./node_modules/@angular/core/fesm5/core.js?:9598:20)\n    at createDirectiveInstance (webpack:///./node_modules/@angular/core/fesm5/core.js?:9483:20)\n    at createViewNodes (webpack:///./node_modules/@angular/core/fesm5/core.js?:10703:36)\n    at createRootView (webpack:///./node_modules/@angular/core/fesm5/core.js?:10617:5)\n    at Object.createProdRootView [as createRootView] (webpack:///./node_modules/@angular/core/fesm5/core.js?:11129:12)\n    at ComponentFactory_.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:8963:29)\n    at ComponentFactoryBoundToModule.create (webpack:///./node_modules/@angular/core/fesm5/core.js?:3612:29)\n    at ApplicationRef.bootstrap (webpack:///./node_modules/@angular/core/fesm5/core.js?:4847:40)\n\ncould anyone hepls me???\nThanks in advance.. @Alvin-Voo It works!!! thanks a lot for your help.. ",
    "faizalluthfi": "Yes, right. ",
    "dolyGD": "Same Issue 'rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__.Observable.of is not a function'..?\nwith angular 6.. ",
    "pairmix": "Same issue:\nTypeError: __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__.Observable.fromPromise is not a function\nTrace de la pile :\nJwtInterceptor.prototype.intercept@http://localhost:8100/build/vendor.js:93181:20\nHttpInterceptorHandler.prototype.handle@http://localhost:8100/build/vendor.js:32056:16\nPendingInterceptorService.prototype.intercept@http://localhost:8100/build/vendor.js:72495:16\nHttpInterceptorHandler.prototype.handle@http://localhost:8100/build/vendor.js:32056:16\nHttpXsrfInterceptor.prototype.intercept@http://localhost:8100/build/vendor.js:32660:20\nHttpInterceptorHandler.prototype.handle@http://localhost:8100/build/vendor.js:32056:16\nHttpInterceptingHandler.prototype.handle@http://localhost:8100/build/vendor.js:32707:16\nHttpClient.prototype.request/events$<@http://localhost:8100/build/vendor.js:31893:172\nMergeMapSubscriber.prototype._tryNext@http://localhost:8100/build/vendor.js:51643:22\nMergeMapSubscriber.prototype._next@http://localhost:8100/build/vendor.js:51633:13\nSubscriber.prototype.next@http://localhost:8100/build/vendor.js:25086:13\nscalar/result<@http://localhost:8100/build/vendor.js:61481:9\nObservable.prototype._trySubscribe@http://localhost:8100/build/vendor.js:25408:20\nObservable.prototype.subscribe@http://localhost:8100/build/vendor.js:25394:17\nMergeMapOperator.prototype.call@http://localhost:8100/build/vendor.js:51611:16\nObservable.prototype.subscribe@http://localhost:8100/build/vendor.js:25389:13\nFilterOperator.prototype.call@http://localhost:8100/build/vendor.js:51769:16\nObservable.prototype.subscribe@http://localhost:8100/build/vendor.js:25389:13\nMapOperator.prototype.call@http://localhost:8100/build/vendor.js:30156:16\nObservable.prototype.subscribe@http://localhost:8100/build/vendor.js:25389:13\n[1003]/CustomTranslateLoader.prototype.getTranslation/<@http://localhost:8100/build/main.js:126:20. I've installed rxjs-compat.\nIt seems error is gone.\n. ",
    "zentoaku": "Same here.\nAngular: 6.1.4\nngx-translate: 10.0.2\nERROR TypeError: rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__.Observable.of is not a function\nUsually this error appears if you use rxjs4/5-compat syntax or operators with rxjs 6 that is required by Angular 6+.\nYou will need to change all occurrences of Observable.of to just \"of\" and use the proper import :). I've just went very carefully through all my code, fixed all code to use proper rxjs6 syntax without compatibility fallbacks and the error is gone.. ",
    "ronaiza-cardoso": "@pairmix this solve my issue. ",
    "shahidneermunda": "npm install rxjs-compat@6.0.0-tactical-rc.1\nhelp to solve my problem. ",
    "Minipada": "angular 6.0.9\nngx-translate: 8.0.0\nI also downgraded to 6.0.0 to make it work. Probably the software with which I work has not been migrated...\n. ",
    "thanhphuocdang": "Update @ngx-translate/core@10.0.2 to resolve that, For me.. ",
    "Nonudeveloper": "npm install rxjs-compat@6.0.0-tactical-rc.1 worked for me\n. ",
    "wklq": "what is titleService?. ",
    "lordatef": "@adelloste it works! thak you for this solution . ",
    "smallg": "@xuelabi123 how to fix it?. ",
    "clegeard": "Any help on that?. ",
    "nkCreation": "Any news ?. ",
    "FiReBlUe45": "any news?. ",
    "j-langlois": "app.module.ts\n```typescript\n// https://angular.io/guide/i18n#i18n-pipes\nimport { registerLocaleData } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\nexport class AppModule {\n    constructor() {\n        registerLocaleData(localeFr, 'fr');\n    }\n}\n```\napp.component.html\nhtml\n<!-- https://angular.io/api/common/DatePipe -->\n<div class=\"date\">{{ articleDate | date: 'MMM d, y':undefined:locale }}</div>\napp.component.ts\n```typescript\nlocale: string;\nconstructor(private _translateService: TranslateService) { }\nngOnInit() {\n        this.locale = this._translateService.currentLang;\n        // don't forget to unsubscribe!\n        this._translateService.onLangChange\n            .subscribe((langChangeEvent: LangChangeEvent) => {\n                this.locale = langChangeEvent.lang;\n            })\n    }\n```. ",
    "1antares1": "I also try to do the same with a dynamic required message.\nExample: The field: '{{value}}' is required, in html.\nBut I already have the ID of the Field in Translations. Why retype it in HTML?\nMaybe there is the possibility and I can not find it (you have to search 2 times).\nUPDATE:\nMeanwhile, I resolved in this way:\nhtml\n<mat-error [translate]=\"'_VALIDATIONS_.REQUIRED'\" [translateParams]=\"{ value: getLocaleString('_ID_.VALUE', null, true) }\"></mat-error>\ncomponent or base.component.ts (that inherits)\ntypescript\npublic getLocaleString(key: string|string[], params?: object, instant?: boolean): Observable<string|object> | any {\n        return (instant) ? this.i18n.instant(key, params) : this.i18n.get(key, params);\n    }\n. ",
    "super-jb": "@1antares1, MUCHAS GRACIAS! THANK YOU SO MUCH!\nActually an easy solution but agree there should be something more straightforward then invoking the translation multiple times. ",
    "werad": "try this: \n. ",
    "githubramakrishnan": "Hi, \nIts working for me after removing the latest @ngx-translate/core & replacing with the older version @ngx-translate/core@9.1.1 . Then after restarted the app.\n. ",
    "Satej7": "Hi, is there any way to convert .resx files into JSON. ",
    "longgt": "@yuezhizizhang Following the link below,\nhttps://netbasal.com/getting-to-know-the-ng-container-directive-in-angular-a97b7a33c8ea\n<ng-container> is a logical container that can be used to group nodes but is not rendered in the DOM tree as a node.\n<ng-container> is rendered as an HTML comment.\nso this is expected result.. @IngAjVillalon You should use useFactory here instead of useValue.\nHow about\n{provide: MatPaginatorIntl, useFactory: getTranslatePaginatorIntl, deps: [TranslateService]}. ",
    "nischi": "I have exactly the same problem. \nIf i use this.\n<p translate>label</p>\nit works, but if i do this\n<p translate>\n  label\n</p>\nit has a strange behavior. It translate the text, but the missing translation trigger is fired.. ",
    "SilvieM": "I have the same problem. For all those keywords that are used like key when they get a line break before or after the key it is bugged: it doesn't change the translation when changing the language. It only translates correctly on reload.\nIt works when using Tabs for Indentation instead of Spaces but can't do that for the whole project.. ",
    "sergiojoker11": "Is this gonna bee addressed at some point? It is annoying having to put the tags in a liner.... @ruizenrmar Exactly, that is the use case.\nI think it is a good design that the translations of the libraries live in the library. Otherwise, the main app will contain translations from code that is not present in that library. Does that make sense to you @ease ?. ",
    "afaneh262": "Where you to able to solve the issue?. ",
    "M-S": "This issue no longer exists, there was a parsing issue in the component that tried to fetch the saved language settings, and returned null instead of string, that is why it tried to load null.json. @benag try as in the following example screenshot\n\nand in your component.ts files, try making additional checks for null or undefined parameters passed to the function that switches the language \n```\ngetLanguage(){\n   let lang = this.cookie.getCookie('language'); //the user language selection\n   if(lang !== 'en'){\n     this.switchLanguage(lang);\n   }else{\n     this.switchLanguage('en')\n   }\n }\n```. ",
    "benag": "Did you solved this? i have the same thing. OK Thanks!!. ",
    "ease": "Could you please specify more information, such as your libraryname's imports and exports?\nIf you're using translate loader, take a look at https://github.com/ngx-translate/core#configuration.. @jameslafferty Do you have the exact same problem jbarber2016 has? If so, please provide that minimal version and I'll do my best to figure out what's the problem. \nBased on the information we have at this moment, there could be multiple reasons why it doesn't work. Waiting for more info. . @jameslafferty please provide working version of your repository for 'ng serve' command. Currently, I'm seeing the following - http://prntscr.com/kq7sgr, probably because you've put /dist destination in tsconfig.\n@jbarber2016 After putting efforts on finding the best solution for you case, unfortunately (based on the current possibilities) I think you should manually copy your assets folder to the /dist/your-lib-project-name and pack your library afte doing it. Upon completion, you should be able to have your translations available and visible to your app's imports.\nAlso, if nothing happens this way, try with defining and exporting your localizations as .ts files with simple object that contains your translation, so it's:\nexport const engLocaleKeys = {\n  \"my-translation\": \"Hello world!\"\n}\nYour public_api.ts:\nexport * from './lib/localization/index';\nIt should look like:\nhttp://prntscr.com/kq7zd0\nInside of app.component.ts of your main app, or anywhere else where you tell your app the location of translations you use, do the following:\nimport { engLocaleKeys } from 'your-lib-name-inside-of-package.json';\nIt should work with objects instead of .json without single problem.. @jameslafferty I've spent couple of hours investigating your problem. \nYour GitHub example freaked me out. Please be careful while providing examples of your code. \nThere's one small, but really important difference, typo:\nYour translation key inside of my-demo app is named:  'my-string' - see here\nBut your translation key inside of my-lib is different: 'my-other-string' - see here so it was the starting point to investigate this issue, because provided translation does not exist.\nAnd guess what, it worked out of the box - http://prntscr.com/krha3w\nJust change my-string to my-other-string inside of en.json to match the key provided in your template, or vice versa.\n@jbarber2016 \nThe way I load translations for main app and library as well is to have library-related translations as an object inside of my library and having them exported, just like mentioned above - https://prnt.sc/kq7zd0. After that, inside of app.component.ts of my main application, I do import library-related translations and also translations located in my main app and use translateService.setTranslation method. \nIf you still need help, please provide GitHub repository so we can run your app.. @ZCatherine What's the certain problem you have? Aforementioned explanation seems enough detailed, but if you need additional help, please provide some information that would be helpful for us to provide you better explanation.. Since the loader currently only supports .json files, you are not able to use the second option - https://prnt.sc/kq7zd0.\nI suggest you to use either translate.setTranslation or manually copying assets folders where your JSONs are. \nI haven't tried loading the translations with TranslateHttpLoader, but I guess you should be able to load .json even from a custom folder under your library's folder.\nI'm writing all of this assuming you're having problem with exporting and using the translation from Angular library.\nPlease provide as much as possible information, if you still have a problem. . You're right @sergiojoker11, but please have in mind that maybe something is set wrong in @ruizenrmar's example, as we don't have the whole repository of his example.\n@ruizenrmar, could you please provide GitHub link of your repository, so I can pull the code and do the test locally? What about your public_api.ts files in your library? Did you expose your localization files in it? Something that I was pointing at in comments above?\n. You should provide an example of your code, so we can investigate the issue. \nPlease provide HTML and TypeScript or live example.. Good, great to hear that you fixed the problem.. ",
    "jameslafferty": "@ease Maybe if there's an example of using ngx-translate inside an Angular 6 library project (not an app project), that'd help? If no such thing exists, I'll try to create a minimal version of what I'm doing and the issues I'm facing. They're similar, at least, to what @jbarber2016 is getting.. Not sure if it's precisely the same thing, but I'll try and get a minimal version of what I'm seeing together this evening (PDT). Thanks for the quick reply!. After putting in a bit of effort, I wasn't able to fully get to my exact issue (our setup has a fair amount of complication). I was, however, also unable to locate a custom loader or missing translation handler provided in my library project to be called when a library component was called in the consuming app. That's really the critical use case for us, and, I suspect, for @jbarber2016 as well.\nThe repo with the example is here: https://github.com/jameslafferty/ngx-translate-example-project. @jbarber2016 Is my reproduction relevant to your issue at all? Or is it totally besides the point. If it's not apropos to this, I'll happily remove it from here and raise a separate issue. :). @ease Since @myscope/my-lib is a library, you need to do ng build @myscope/my-lib before running ng serve.\n\n. @ease That's actually intentional. The issue is that my child missing translation handler and child loader aren't getting called. Yep, if the main app translations are there, it does work. Sorry that the example was a bit ambiguous.. (It's certainly possible, btw, that I'm misunderstanding how the forChild function is supposed to work.). ",
    "jbarber2016": "My issue is a limitation in Angular CLI and libraries.  There is an issue created over at the Angular CLI github, and seems they have hacks to fix.  . @TheBrao Yes, that's right. I have an assets/i18n folder with json files for different languages in my library and if you look at this issue here you will see many people talking about hacks.  I didnt want to use gulp solution because I'm using the CLI to build.  . I think it's appropriate.. ",
    "TheBrao": "I was just trying to make ngx-translate work with Angular 6 libraries, using one i18n folder per library.\nThe architecture I'm trying to replicate is described here.\n- I did not manage to use a specific loader for each lib using forChild and isolate: true in the library module configuration. In the end, it was always the root test application loader that was used. I worked around that by overriding the TranslateService.currentLoader property in the library root component, but that might have some side-effects I'm not seeing yet.\n- Even when using the workaround above, the loader can't locate the i18n folder in the library assets. I found out that, again, it just looks in the root app assets folder. As @jbarber2016 mentioned, it might be a CLI issue, since the CLI doesn't package the library assets folder, if my understanding is right?. ",
    "ruizenrmar": "Hi, I try to integrate a library with the module ngx-translate and associated json files, within a project also with ngx-translate and its associated json files. However i can't see the translations. This is my code in app.module.ts in library:\n```\nexport class Loader implements TranslateLoader {\n  private translations = new Subject();\n  $translations = this.translations.asObservable();\n  getTranslation(lang: string) {\n    return this.$translations;\n  }\n}\nexport class Awol implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams) {\n    return '... and many more';\n  }\n}\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, '../assets/login-lib/i18n/', '.json');\n}\n@NgModule({\n  imports: [\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      },\n      missingTranslationHandler: {\n        provide: MissingTranslationHandler,\n        useClass: Awol\n      }\n    }),\n  ...  ],\n  declarations: [\n   ...  ],\n  exports: [\n    ...,\n    TranslateModule\n  ],\n  entryComponents: [\n   ...\n   ]\n})\nexport class LoginLibModule { }\n```\nand this is my code in app.module in project: \n```\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    .....,\n   TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor(translate: TranslateService) {\n    translate.setDefaultLang('en');\n    translate.use('en');\n  }\n}\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n```. Any idea?\nHow could load ngx-translate of a library in a application?. ",
    "verbeeckjan": "Error during template compile of 'CommonUIModule'\n  Function calls are not supported in decorators but 'TranslateModule' was called.\nThat's the error message. ",
    "usmanahmed061": "@ease below is the HTML and Typescript code\n<div class=\"col-md-6\">\n                                            <div class=\"multi-select-full\" [class.padding-r0]=\"getCurrentLang == 'ar'\" [dir]=\"getCurrentLang == 'ar' ? 'rtl' : 'ltr'\">\n                                                <span class=\"status-dd\">\n                                                    <select #statusFilter id=\"statusFilter\" class=\"multiselect\" multiple=\"multiple\">\n                                                        <option [value]=\"status.Id\" *ngFor=\"let status of statusLookup\">{{status.Name}}</option>\n                                                    </select>\n                                                </span>\n                                            </div>\n                                        </div>\nOnInit hook in Angular\nthis.statusLookup = [];\n            var lookup1 = new LookUp();\n            var lookup2 = new LookUp();\n            lookup1.Id = '0130002';\n            lookup1.Name = 'Open';\n            lookup1.IsChecked = true;\n            lookup2.Id = '0130003';\n            lookup2.Name = 'Closed';\n            this.statusLookup.push(lookup1);\n            this.statusLookup.push(lookup2);\nthan AfterViewInit hook\nlet allTranslatedVal = 'All';\n        $(this.statusFilter.nativeElement).multiselect({\n            numberDisplayed: 1,\n            nonSelectedText: allTranslatedVal,\n            allSelectedText: allTranslatedVal,\n            selectAllNumber: false\n        })\n            .on('change', (e: any) => {\n                this.statusFilterChanged();\n            })\n            .on('blur', (e: any) => {\n                this.statusFilterChanged();\n            });\n        $('#statusFilter').multiselect('select', this.statusLookup[0].Id);\nAbove is the all flow to bind values to Multiselect, Now what i am trying is to change the values that are pushed in statusLookup to what the language is selected for user.\nFor that i have made an Observable which listen to language change.\n` this.userProfileService.getLangObservable.subscribe(\n                val => {\n                this.translate.get('Open').subscribe(\n                    val => {\n                        thisRef.statusLookup.find(x => x.Id == '0130002').Name = val;\n                    }\n                )\n\n                this.translate.get('Closed').subscribe(\n                    val => {\n                        thisRef.statusLookup.find(x => x.Id == '0130003').Name = val;\n                        this.configureStatusDD(); // This function is same as code written in **AfterViewInit**\n                    }\n                )\n            })`\n\nI hope this helps you to understand my issue.\nThanks\n. Sorry my bad , Issue was because of Multiselect not because of ng2 translate. \nThanks. ",
    "RilRil": "@erperejildo hmm when I say hybrid , I mean it's a mix of AngularJs and Angular.  And it's just a web app.. I am loading it in Angular but I downgrade it to be able to use it in the AngularJs app... but it's not working. \nI can downgrade TranslateService though. But I'd need the directive as well. Thx @ansarikhurshid786 but as I said It's an hybrid app. I use angularJS AND Angular in the same time.... ",
    "jonathanlie": "+1 having kinda similar problem here. \nRunning a hybrid ng-upgrade app, using angular-translate for AngularjS rendered templates, and ngx-translate for Angular rendered templates. Couldn't get an Angular rendered template to translate when downgraded.. ",
    "felpel": "Seems like a non-issue in that case, we resolved this issue on our end by removing the static modifier.. ",
    "GeorgeKnap": "I am doing this by having a nodejs script that copy over tranaslation files from libraries to main project. In main project I use multi-http-loader to load all chunks together.\nIt's not the solution I like but the one that works for now.. ```\nconst fs = require('fs');\nconst config = JSON.parse(fs.readFileSync('lib.config.json'));\nconst {ncp} = require('ncp');\n// goes through all library objects\nfor (let library of config.libraries) {\n  // skip to next if i18n paths are not specified\n  if (!(library.i18n_source && library.i18n_destination)) {\n    continue;\n  }\n  // copy i18n folder from library to main project\n  ncp(library.i18n_source, library.i18n_destination, (error) => {\n    if (error) {\n      return console.error(error);\n    }\n    console.log(Successfully copied \"${library.i18n_source}\" to \"${library.i18n_destination}\".)\n  })\n}\ncontrol the locations by following json file:\n{\n  \"libraries\": [\n    {\n      \"name\": \"foo-lib\",\n      \"dir\": \"./projects/foo-lib\",\n      \"i18n_source\": \"./projects/foo-lib/src/assets/i18n\",\n      \"i18n_destination\": \"./src/assets/i18n/foo-lib\"\n    }\n  ]\n}\n```. ",
    "Nurgunkalol": "It works without webpack. Any help?. ",
    "dvlasenko96": "I have the same error. ",
    "skorunka": "Same problem with 0.8.2.. Can confirm @gerardcarbo solution works. Thank you.. ",
    "Dlacreme": "Same problem here. No errors nor warnings.\nv 0.8.2. ",
    "gerardcarbo": "In my case I've solved the problem specifying the default property of the imported json (ie. enUS.default):\n~~~~\nimport * as enUS from '../../../translations/en-US.json';\n....\n@Injectable()\nexport class I18nService {\ndefaultLanguage: string;\n  supportedLanguages: string[];\nconstructor(private translateService: TranslateService) {\n    translateService.setTranslation('en-US', enUS.default);\n    ....\n~~~~. ",
    "JuleSch": "I solved this problem with \n// zone = NgZone from '@angular/core'\nthis.zone.run(() => {\n        this.translate.use(lang);\n    });\nin selectLang.. Hello,\nis there something wrong with the execution or have I forgotten something else?\nOtherwise our app will not be able to do the translations. :-/. ",
    "soorireddy": "constuctor(protected translate: TranslateService,\n    protected store: Store, protected userStore: Store) {\n       this.store.select(state => state.userpref).subscribe(userContext => this.translate.use(userContext[0].prefLang));\n  }\n. ",
    "jagpreetsingh83": "+1. ",
    "Mr-Eluzive": "Can you provide some example code which you use? Maybe some stackblitz will be helpful here. I've already answered here:\nhttps://stackoverflow.com/questions/52595659/how-can-i-translate-text-input-in-angularfire2-firestore-use-ngx-translate/52596303#52596303\nBut also like I've mentioned, I had created a repo here:\nhttps://github.com/Mr-Eluzive/angularfire-ngx-translate-example \nSo if nobody has nothing against it, maybe we should add this piece of information to ngx-translate? firestore-example, like ionic-example. Or maybe I should create PR with FIRESTORE_EXAMPLE.md like it has been done with FIREBASE_EXAMPLE.md.\nWhat do you think guys?. Yeah you can get TranslateService through MissingTranslationHandlerParams.. This should helps you:\nhttps://github.com/ngx-translate/core/issues/565. I have already answered here:\nhttps://stackoverflow.com/questions/52621942/how-can-i-use-two-translators-first-for-json-file-and-second-for-firestore/52681273#52681273\n. Why can't you use it in this way:\nhtml\n<div *ngFor=\"let service of services\">\n  <span><img [src]=\"service.imgPath\" alt=\"{{ service.name }}\"/></span>\n  <h4>{{ service.name | translate}}</h4>\n  <p>{{ service.desc | translate}}</p>\n</div>\nIt should be done like this so what's the problem?. Ok, could you share with my some bigger part of the code please? Maybe on stackblitz. Because I don't even know what is under the service properties etc.. Ymmm... your question is not proper and I think you misunderstand some thinks.\nMissingTranslationHandlerParams is type of parameter in class (which implements MissingTranslationHandler) method - handle. So how do you want to use it for translate anything? For translation is translate pipe which you use on string which you want to translate or directive like here.. @arnaudakotonou97 Can you give some example repo with this code or stackblitz?. Firestore is not for translate anything.\nIf you still use my solution for translations then it's not for this use case. Why can't you just define translations in language document? For what purpose is this array?. Yeah like I said. But also I have asked why did you define this in that way??\nIf you put these labels just into translates collection then it should works just fine.\nIf you really, really want to put these into array to keep things clear in your database you have to modify my solution or extends translate pipe / service / directive. But if I can I would advice you just use some namespace pattern like this:\n\n. Replace string values in your links array will be enough.\nts\nconst links = [\n    { path: 'Home', label: 'LINKS_NAV.HOME' },\n    { path: 'Rent', label: 'LINKS_NAV.FOR_RENT' },\n    { path: 'Sale', label: 'LINKS_NAV.FOR_SALE' },\n    // etc.\n  ];. According to Pipe's guide:  \n\nAngular executes a pure pipe only when it detects a pure change to the input value. A pure change is either a change to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object).\n\nSo in conclusion this pipe could not update value when promise would resolve. Check out that async pipe is also impure.. What exactly do you mean by \"language constants\"?\nThese language shortcuts like 'en', 'ru', 'mx' etc? \nWhat is on the way to do it and why according to you it should be added like an this package extension?\nCan you share some code snippet which is problematic for you right now and requires this feature?. Can you share some stackblitz snippet? Because to be honest I don't really understand neither your code nor problem. For me interpolation works just fine. You can checkout my example on stackblitz right here. What do you mean by translate into two languages? And what's about this \"another component\"?. ",
    "esavelyeva": "For now I'm using this function to apply the prams to the translations:\nexport function applyParamsToTranslation(trans: string, params: Object): string {\n  // TODO add err handling\n  function getTransParamNames(text: string): Array<string> {\n    return text.match(/{{\\s*[\\w\\.]+\\s*}}/g).map(function(bracedParam) {\n      return bracedParam.match(/[\\w\\.]+/)[0];\n    });\n  }\n  const keys = getTransParamNames(trans);\n  for (let i = 0; i < keys.length; i++) {\n    if (params[keys[i]]) {\n      trans = trans.replace(keys[i], params[keys[i]]);\n    }\n  }\n  return trans.replace(/{{|}}/g, '');\n}. ",
    "diegopefm": "Ok, after long time investigating I was able to find a solution and I'll post it here in case it helps anyone else.\nThe problem is I was setting tooltip in onInit (which is fired only once when the component is created) and wasn't setting any tooltip text, just leaving it to pickup the one set with:\n[attr.data-title]=\"'text_to_translate_key' | translate\"\n(the initial text translation) and after changing language tooltip was not refreshing (the text was static with the initial value) but you can use a function with the tooltip \"title\" property this way:\n```\n        $('.tooltipped').tooltip({\n          placement: 'auto',\n          trigger: 'focus',\n          template: '',\n          title: this.setTitle\n        });\n  setTitle() {\n\n    return $(this).attr(\"placeholder\");\n  }\n\n```\nand this function (which has current object reference -this- as an implicit input parameter) acts as a binding which updates the title property continuosly so when placeholder text changes (placeholder does not need to be refreshed after language changes and that's why it works) the tooltip \"title\" property will be updated and as a consequence tooltip text will change and user will see updated text.\n\"The end\" :). ",
    "LeonardoMinatiCrispyBacon": "Just a note: using Angular 6.0.0 makes it work. Seems that the last update has changed something that breaks up ngx-translate when integrated.. ",
    "adeojoemmanuel": "i got an issue stating that translate cant take in object . ",
    "hijoncon": "You can compose in your component example\nlist = ['ROOT.LEVEL', 'ROOT.LEVEL', 'ROOT.LEVEL']\nng iterate that in your ngFor. ",
    "arnaudakotonou97": "I'm dealing with the same issue. I'm using ngx-translate but I'm facing difficulties to acces my json array.\nHere is my json array\n{   \n    \"page\": [\n        {\"title\": \"Shop\", \"component\": \"ShopPage\" },\n        {\"title\": \"About-us\", \"component\": \"AboutUsPage\" },\n        {\"title\": \"Advice\", \"component\": \"AdvicePage\" },\n        {\"title\": \"Tracking\", \"component\": \"TrackingPage\" },\n        {\"title\": \"Cart\", \"component\": \"CartPage\" },\n        {\"title\": \"Channel\", \"component\": \"ChannelPage\" },\n        {\"title\": \"Distributors\", \"component\": \"DistributorsPage\" }\n    ],\n    \"Welcome\": \"Welcome\",\n     \"search_message\": \"Search product\",\n    \"search_not_found_message\": \"No results found !\"  \n}\nHere is how I stored it in my ts file \ntranslate.get('page').subscribe((response: any)=> { \n      this.page = response;\n      console.log(this.page) \n      });\nAnd I display it  with an *ngFor in HTML template like this. This one is in my app.html\n<button  ion-item *ngFor=\"let p of page \" (click)=\"openPage(p)\">\n  <h2>{{ p.title }}</h2>\n  </button>\nThe issue is that the \"p.title\" doesn't translate in my app.html but I pasted the same html code in another html at the same level as my home  template and the translation works well. I'm not really understanding what's  happenning. ",
    "Omar-Qalei": "Your solution don't translate json file arrays. \nsuch as \n\"linksNav\": [\n    { \"item\": \"Home\" },\n    { \"item\": \"For Rent\" },\n    { \"item\": \"For Sale\"},\n    { \"item\": \"Add Ads\"},\n    { \"item\": \"Conatact Us\" },\n    { \"item\": \"Messages\" },\n    { \"item\": \"About Us\"}\n  ],\n. How can I show that in HTML5 ?\nsuch as {{LINKS_NAV.FOR_SALE | translate}} ?\nThis is hard :(. ",
    "alphapilgrim": "@Omar-Qalei this is not an issue, you want to ask on StackOverflow for help.. ",
    "datazen": "No word on this yet?   I am having a similar issue.\nI have an older AngularJS project that uses the older ng-translate that I am updating to newer Angular 7 using ngx-translate however I do not see clearly where I can accomplish the same with the newer version.\nOur app loads venue types on login. I need to be able to load language translations depending on venue type and also load the common core defines. With ng-translate in the AngularJs 1.x app.js, I used:\n```\n    $translateProvider.useLoader('$translatePartialLoader', {\n        urlTemplate: 'translate/{part}/{lang}.json'\n    });\n$translatePartialLoaderProvider.addPart('venue/all');\n\n$translateProvider.preferredLanguage('en');\n$translateProvider.useSanitizeValueStrategy('escape');\n\n```\nI could insert the type through interpolation and this would load the corresponding defines.\nHow to accomplish this with the newer ngx-translate? I tried nesting the defines and accessing via interpolation but since is text, all I get is the raw variable text and not the define.\nFor example I cannot\nvar type = 'restaurant';\n<div>Role: {{ 'type.role' | translate }}</div>\nas this outputs type.role as text instead of the define.\nAny ideas?. Gregor,\nSometimes we work so much we cannot see the simple fix in front of us :)  I should have caught this.  My question may have been out of scope anyway.  I was more referring to language define organization than actual translations.  Thank you for the fast response and the great plugin.  Everything is working as expected.. ",
    "gregor-srdic": "I don't understand what exactly are you trying to achieve, would <div>Role: {{ type + '.role' | translate }}</div> solve your problem?. ",
    "hackerunet": "Simple solution, webpack copy:\nnew CopyWebpackPlugin([\n                {\n                    from: 'app/i18n',\n                    to: `${dist}/i18n`,\n                    context: projectRoot\n                },\n            ]),. ",
    "weijyewang": "@hackerunet did it work after tns build with --bundle --env.uglify --env.aot. Mine is not working for android (i did not test on IOS), the text printed out in the UI is the variables instead of the value of the variables as defined in the json.. ",
    "alereisan": "I got it working following the inputs from this discussion:\nhttps://discourse.nativescript.org/t/ngx-translate-nativescript-angular-application/4096/7\n```\nimport { HttpClient } from \"@angular/common/http\";\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\nimport { NativeScriptHttpClientModule } from \"nativescript-angular/http-client\";\n// Loader for translation files (i.e. en.json)\nexport function createTranslateLoader(http: HttpClient) {\n    console.log(\"translate loader running..\");\nreturn new TranslateHttpLoader(http, \"/assets/i18n/\", \".json\");\n\n}\n@NgModule()\n...\n    imports: [\n        NativeScriptModule,    \n        NativeScriptCommonModule, \n        NativeScriptHttpClientModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (createTranslateLoader),\n                deps: [HttpClient]\n            }\n        })\n    ]\n```. ",
    "alippai": "@ocombe sure! However I'm not familiar with the \"inner\" package.json file, maybe the required Angular 7 version is too strict. Also http-loader depends on ngx-translate/core so it needs some attention upon release.. https://github.com/ngx-translate/http-loader/pull/62 there you go ;). ",
    "ACivilise": "https://github.com/ngx-translate/core/issues/824. Hi,\nYou need to install a compatible version with the angular version  used in your ionic project. \nYou can look in your package.json file to know which version of angular is used. \n\nUninstall the package you installed and then specify the version to install like this : \nnpm install @ngx-translate/core@9.1.1 --save\nnpm install @ngx-translate/http-loader@2.0.1 --save\nRegards.\n. ",
    "abhi901abhi": "export function load(appLoadService: AppLoadService) {\n  return () => appLoadService.load();\n}\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [\n    AppLoadService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: load,\n      deps: [AppLoadService],\n      multi: true\n    }\n  ]\n})\nexport class AppLoadModule {}. ",
    "artuska": "@saithis This is an amazing pull request, thank you! This bug you've fixed ruined my Cordova web app \u2014 everything was fast in my browser on localhost but when i built my app and opened it on mobile phone I've been waiting ~15 seconds for my app to start :). I need this to create my own translate directive so i can use it like before in Angular 1 where all translation strings were put in DOM element as a HTML not as a plain text.\nI hate this:\n<div [innerHTML]=\"'foo.bar.baz' | translate | trustHtml\"></div>\nI want this:\n<div translate=\"foo.bar.baz\"></div>. ",
    "SEVCO": "Angular version: 7.1.1\nnode: v10.4.1. ",
    "tonnguyen": "You should run ngcc build before building the project: ./node_modules/.bin/ivy-ngcc\nBut then it comes to another error: \"Error: TODO.Diagnostic: Class has multiple Angular decorators.\"\nThis is because Translate pipe is decorated with both Pipe and Injectable. I think Injectable should be removed.. ",
    "workfel": "Nobody have this problem ? . ",
    "r7lemieux": "Yes. I want to load the lazy module labels only when the module is loaded. So I define a different prefix:\n'assets/i18n/myLazyModuleName/'. I expect the loader to load the file with the same name en-US.json but from myLazyModuleName directory.  . ",
    "vazgabriel": "I have same problem.... ",
    "Narmor": "Same problem here. \nMy thought that it might be a bug in translate, but downgrading to the old version\n\"@ngx-translate/core\": \"^10.0.2\",\n    \"@ngx-translate/http-loader\": \"^3.0.1\",\ndoesn't help.\nMaybe it's some incompability with other packages?\n\"dependencies\": {\n    \"@angular/animations\": \"^7.0.4\",\n    \"@angular/cdk\": \"^7.0.4\",\n    \"@angular/common\": \"^7.0.4\",\n    \"@angular/compiler\": \"^7.0.4\",\n    \"@angular/core\": \"^7.0.4\",\n    \"@angular/forms\": \"^7.0.4\",\n    \"@angular/http\": \"^7.0.4\",\n    \"@angular/material\": \"^7.0.4\",\n    \"@angular/platform-browser\": \"^7.0.4\",\n    \"@angular/platform-browser-dynamic\": \"^7.0.4\",\n    \"@angular/pwa\": \"^0.10.6\",\n    \"@angular/router\": \"^7.0.4\",\n    \"@angular/service-worker\": \"^7.0.4\",\n    \"@ngx-translate/core\": \"^11.0.1\",\n    \"@ngx-translate/http-loader\": \"^4.0.0\",\n    \"apollo\": \"^2.1.2\",\n    \"apollo-angular\": \"^1.5.0\",\n    \"apollo-angular-link-http\": \"^1.4.0\",\n    \"apollo-cache-inmemory\": \"1.3.10\",\n    \"apollo-client\": \"2.4.6\",\n    \"apollo-link\": \"1.2.3\",\n    \"core-js\": \"^2.5.4\",\n    \"graphql\": \"14.0.2\",\n    \"graphql-tag\": \"2.10.0\",\n    \"ng-pick-datetime\": \"^7.0.0\",\n    \"ngx-image-cropper\": \"^1.2.2\",\n    \"rxjs\": \"^6.3.3\",\n    \"zone.js\": \"^0.8.26\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.10.6\",\n    \"@angular/cli\": \"~7.0.6\",\n    \"@angular/compiler-cli\": \"^7.0.4\",\n    \"@angular/language-service\": \"^7.0.4\",\n    \"@fortawesome/angular-fontawesome\": \"^0.3.0\",\n    \"@fortawesome/fontawesome-svg-core\": \"^1.2.8\",\n    \"@fortawesome/pro-light-svg-icons\": \"^5.5.0\",\n    \"@fortawesome/pro-regular-svg-icons\": \"^5.5.0\",\n    \"@fortawesome/pro-solid-svg-icons\": \"^5.5.0\",\n    \"@types/graphql\": \"14.0.3\",\n    \"@types/jasmine\": \"~3.3.0\",\n    \"@types/jasminewd2\": \"~2.0.6\",\n    \"@types/node\": \"~10.12.9\",\n    \"codelyzer\": \"~4.5.0\",\n    \"jasmine-core\": \"~3.3.0\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~3.1.1\",\n    \"karma-chrome-launcher\": \"~2.2.0\",\n    \"karma-coverage-istanbul-reporter\": \"~2.0.0\",\n    \"karma-jasmine\": \"~2.0.1\",\n    \"karma-jasmine-html-reporter\": \"^1.4.0\",\n    \"protractor\": \"~5.4.1\",\n    \"ts-node\": \"~7.0.1\",\n    \"tslint\": \"~5.11.0\",\n    \"typescript\": \"~3.1.6\"\n  }\n\nIt seems to have something to do with how you initialize your translate file. When you switch a HTTP-loader, it will work again.\n\nold (not working):\nTranslateModule.forRoot({\n    loader: {provide: TranslateLoader, useClass: CustomTranslate}\n}),\nProbably its the import * as de from './de.json'; not working anymore in Angular 7?\n```\nimport {TranslateLoader} from '@ngx-translate/core';\nimport * as de from './de.json';\nimport {Observable, of} from 'rxjs';\nexport class CustomTranslate implements TranslateLoader {\n  getTranslation(_lang: string): Observable {\n    return of(de);\n  }\n}\n```\n\nnew (working):\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n  return new TranslateHttpLoader(httpClient);\n}\n. ",
    "Zefling": "Currently my solution with Angular 7 and\n\"@ngx-translate/core\": \"^10.0.2\",\n\"@ngx-translate/http-loader\": \"^3.0.1\", \nI write a pipe for replace the translate pipe based on it (works with Angular 7, messageformat and the lazy loading on your project)\n```typescript\nimport { Pipe, PipeTransform, ChangeDetectorRef, EventEmitter, OnDestroy, Injectable } from '@angular/core';\nimport { TranslateService, DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent } from '@ngx-translate/core';\nimport { TextsService } from '../services/texts.service';\nconst messageFormat = require('messageformat');\nconst mf = new messageFormat('fr');\n@Pipe({\n    name: 'lang',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class Lang implements PipeTransform, OnDestroy {\nvalue: string = '';\nlastKey: string;\nlastParams: any[];\n\nonTranslationChange: EventEmitter<TranslationChangeEvent>;\nonLangChange: EventEmitter<LangChangeEvent>;\nonDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\nconstructor(\n    private _textsService: TextsService,\n    private _translate: TranslateService,\n    private _ref: ChangeDetectorRef\n) { }\n\nupdateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    const onTranslation = (res: string) => {\n        this.value = this.formatMessage(res, this.lastParams);\n        this.lastKey = key;\n        this._ref.markForCheck();\n    };\n    if (translations) {\n        const res = this._translate.getParsedResult(translations, key, interpolateParams);\n        if (typeof res.subscribe === 'function') {\n            res.subscribe(onTranslation);\n        } else {\n            onTranslation(res);\n        }\n    }\n    this._translate.get(key, interpolateParams).subscribe(onTranslation);\n}\n\ntransform(query: string, params?: any): string {\n    this.lastKey = query;\n    this.lastParams = params;\n    const message = this.formatMessage(this._textsService.getTextInstante(query), params);\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n        this.onTranslationChange = this._translate.onTranslationChange.subscribe(\n            (event: TranslationChangeEvent) => {\n                if (this.lastKey && event.lang === this._translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, params, event.translations);\n                }\n            }\n        );\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n        this.onLangChange = this._translate.onLangChange.subscribe(\n            (event: LangChangeEvent) => {\n                if (this.lastKey) {\n                    this.lastKey = null;\n                    // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, params, event.translations);\n                }\n            }\n        );\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this._translate.onDefaultLangChange.subscribe(() => {\n            if (this.lastKey) {\n                this.lastKey = null;\n                // we want to make sure it doesn't return the same value until it's been updated\n                this.updateValue(query, params);\n            }\n        });\n    }\n\n    return message;\n}\n\n\nformatMessage(message: string, params: any): string {\n    if (message.indexOf('{') > -1 && message.indexOf('}') > -1) {\n        message = mf.compile(message)(params);\n    }\n    return message;\n}\n\nngOnDestroy(): void {\n    this._dispose();\n}\n\n/**\n * Clean any existing subscription to change events\n */\nprivate _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n    }\n}\n\n}\n```\nAnd this service \n```typescript\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subject, Observable } from 'rxjs';\nconst CMP_NAME = 'TextsService';\n@Injectable({\n    providedIn: 'root'\n})\nexport class TextsService {\nreadonly onChange: Subject<void> = new Subject<void>();\n\nget currentTextsIentifier(): string {\n    return this._currentTextsID;\n}\nset currentTextsIentifier(identifier: string) {\n    this._currentTextsID = identifier;\n    this._translate.use(this._currentTextsID);\n\n    this.onChange.next();\n}\nprivate _currentTextsID: string = 'default';\n\nconstructor(\n    private _translate: TranslateService\n) {\n    this._translate.setDefaultLang(this.currentTextsIentifier);\n}\n\ngetTexts(\n    i18n: { [key: string]: string },\n    translations: { [key: string]: string } | string\n): { [key: string]: string } {\n    if (typeof translations === 'object') {\n        Object.keys(translations).forEach(((key: any) => {\n            this._translate.get(key).subscribe(\n                (res: string) => i18n[translations[key]] = res\n            );\n        }).bind(this));\n    } else if (typeof translations === 'string') {\n        this._translate.get(translations).subscribe(\n            (res: string) => i18n[translations] = res\n        );\n    }\n    return i18n;\n}\n\ngetText(key: string): string {\n    let text: string;\n    this._translate.get(key).subscribe(\n        (res: string) => text = res\n    );\n    return text;\n}\n\ngetTextInstante(key: string): string {\n    return this._translate.instant(key);\n}\n\nsetTexts(translations: any): void {\n    if (typeof translations === 'object') {\n        this._translate.setTranslation(this.currentTextsIentifier, translations);\n    } else {\n        this._translate.setTranslation(this.currentTextsIentifier, JSON.parse(translations));\n    }\n    this.onChange.next();\n}\n\nreset(lang?: string): Observable<any> {\n    return this._translate.reloadLang(lang || this.currentTextsIentifier);\n}\n\n}\n```\n. ",
    "Shira16": "I have the same issue. I tried to fix it by following this tutorial: https://www.codeandweb.com/babeledit/tutorials/how-to-translate-your-angular7-app-with-ngx-translate\nMy dependencies:\n    \"@ngx-translate/core\": \"^11.0.1\",\n    \"@ngx-translate/http-loader\": \"^4.0.0\",. ",
    "f22hd": "\nThe way I found it to work in Angular 7:\nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useClass: TranslateUniversalLoader\n      }\n}),\n```\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport * as contentEn from './en.json';\nimport * as contentRo from './ro.json';\nconst TRANSLATIONS = {\n  en: contentEn,\n  ro: contentRo\n};\nexport class TranslateUniversalLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable {\n    return of(TRANSLATIONS[lang].default);\n  }\n}\n```\nIt looks like the returned object is added under the default key\ntested this in Angular 7 and also tested dynamic change works just fine\n\nFinally, it working fine with me. thanks. Dear, your question not related to this plugin neither issue.. ",
    "anishchcenko": "and i have same problem.... ",
    "ajmccallum": "The issue isn't with translate. Typescript/Angular stopped allowing imports without defaults (import * as ...) without wrapping it in a default property. You need to add the following to compiler options in the tsconfig. \n\"allowSyntheticDefaultImports\": true,\n\"esModuleInterop\": true\nAlso, change your imports to \"import en from en.json\" (not * as) or something similar depending on your lint set up. \n. @Maryna-Yelakova I believe that might be a different issue. This might help.\nhttps://github.com/ngx-translate/core/issues/163. @Maryna-Yelakova  are you using Ivy? It removes pipes in production mode for tree shaking?. ",
    "zessu": "Honestly I have found the HTTPTranslateLoader to be a pain in the ass sometimes so I just prefer to use a custom loader like this\nexport class CustomTranslateLoader implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return from(import(`../assets/i18n/${lang}.json`));\n  }\n}\nThen I go ahead and import it like \nTranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useClass: CustomTranslateLoader ,\n      }\n    }),\nimport { Observable, from } from 'rxjs'\nWorks all the time. ",
    "itcanyon": "\n@ajmccallum thank you so much! The problem was because of Ivy. I had \"enableIvy\": true\nin my tsconfig.json. It's my bad.\n\nThat did it for me....Thanks. ",
    "JCKodel": "Nevermind... That's why instant exists \u00ac\u00ac\n. ",
    "15380831711": "\u8bf7\u4f7f\u7528\u82f1\u6587\u3002. ",
    "yitznewton": "The change can be seen here:\nhttps://github.com/ngx-translate/core/blob/v5.0.0/src/translate.service.ts#L86\nvs.\nhttps://github.com/ngx-translate/http-loader/blob/v0.0.2/src/http-loader.ts#L14. ",
    "santoshpatro": "I have created a project with all the details: stackblitz.com/edit/angular-6vlspz . Here I am trying to use the value of MoreText from the moreTextContent() method of test.model.ts file. Any help on this is much appreciated.. ",
    "yaniv1988": "This way it only works if they are static labels. You can use translateService.instant() to get the dynamic values.. ",
    "khobar": "Hi\nYou can just create translation like this : \nen.json:\n{\n\"JET\":\"jet\",\n\"RAINBOW\":\"rainbow'\".\n\"WINTER\":\"winter\",\n...\n}\n\nand then you can translate it right away with pipe:\n<button mat-menu-item *ngFor=\"let type of pattern\">{{type | translate}}</button>\n\nYou can also add some prefix for sake of housekeeping if you like and then\nBasically use translate pipe on string , and translation service  will try to find it \n<button mat-menu-item *ngFor=\"let type of pattern\">{{ (\"my.prefix.\" + type) | translate}}</button>\n\nSame story is if you would like to use service within typescript. ",
    "93Alliance": "thank you. ",
    "nevadascout": "Are you getting an error message? What happens when you serve app and view it in a webpage?. Please provide more information - is there an error message?. ",
    "nachiketsalvi": "When i serve the app it shows error: pipe translate could not be found in header component.. header module is located into app-module. Found Solution so closing this issue.\nSolution is get translation for word in side constructor and the passed it to the component.\ncode(public translation: TranslationService){\nthis.translatin.get(['word']).subscribe(translation=>{\nthis.translatedWord =  translation.word\n})\n} . ",
    "EnricoVogt": "Is your header-component part of a shared-module or its located in the app-module?. ",
    "dsnoeck": "I have it working on Angular 7.2.1. ",
    "EngAhmedShehatah": "Good Morning,\nI hope this mail finds you well and that you have a good time.\nThanks for reaching out and for interest.\nI discovered that the problem was in my nodejs version. So, I removed it\nthen reinstalled bother nodejs and angular cli and the ngx-translate/core\nnow working fine.\nThanks again and happy coding.\nHappy New Year\nBest Wishes & Regards\nAhmed Shehatah\nFront End Web Developer\nengahmedshehatah@gmail.com\n+201005363688\nOn Wed, Jan 23, 2019, 12:18 PM Damien Snoeck notifications@github.com\nwrote:\n\nI have it working on Angular 7.2.1\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ngx-translate/core/issues/988#issuecomment-456746893,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AlsDkKMbbnf4vW1AxePirKoQn9MXAt9Qks5vGDcOgaJpZM4Z7-AW\n.\n. \n",
    "Ben305": "@biesbjerg Would you have a look?. @ocombe It would be nice if this regression could be fixed, has been working with previous versions. ",
    "pavandaga": "Is there a workaround for this issue?. ",
    "ramonsan": "You are using Lazy Loading, and you should load TranslateModule in each page you use translations.\nIn your case, import it in Home.module.ts, and you need import the HttpLoaderFactory also. I recommend you to put it in other file instead the app.module.ts.. ",
    "marcushultgren": "@ramonsan is correct. You can read more about it in the documentation about Lazy loaded modules. Basically just importing TranslateModule into every lazy loaded module would solve your problem.. ",
    "djleonskennedy": "@eldhotkuriakose Dude! are you seriously ?! :) Learn angular first. ",
    "thiagocordeirooo": "Very nice :)\nI will do this.\nThank you.\n\nThat looks nice! I don't use visual studio code, so I'm probably not the best one to give you feedback :)\nDo you want to make a PR to add a link to it in the README?\n\n. ",
    "BADF00D": "I can confirm that this bug exists. I have a similar working example. In my version, the initial binding does work just fine (event with line breaks), but when I change the language at runtime, these values doesn't get updated.\nRender Stackblitz\nEditor Stackblitz\nI also can confirm, that this error is browser independent. Looks the same in Edge (41) and Firefox (64).\n@dpmott When you add this missing translation to the fr.json, your initial binding will be correctly show your English translation (that sounds weird, but it works), but when you change the translations at runtime (via translate.use('fr')) the translations with whitespaces wont be updated.  You can refer to my example.. I can also confirm, that the error is fixed, when applying the fix mentioned by @dpmott . @dpmott I'm no maintainer of the project. I'm just a guy that stumbles upon the same error.\nBut feel free to create a PR, I did it myself but was not yet able to fix the failing test: \u00d7 should update the DOM when the lang changes and the translation ends with space\n. @dpmott Finally I was able to create a PR with no failing tests. But I don't think there will be an bug fix release for 10.X, so I think we have to update to latest angular.. As long as the Pull-Request is not merged, I have use the translate pipe, instead of the translate directive\nInstead of using this \nhtml\n<div translate>\n   MyText\n</div>\nbecomes\nhtml\n<div >\n   {{'MyText' | translate}}\n</div>\nIf you have to translate enums or something else with prefixes, I use this:\nInstead of\nhtml\n<div translate>RunState.{{ details?.infusion.status }}</div>\nhtml\n<div>{{ details?.infusion.status | prefix:'RunState.' | translate}}</div>\nThe prefix pipe is implemented as:\n```typescript\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n  name: 'prefix',\n  pure: true\n})\nexport class PrefixPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    const msg = value;\n    if (value == null) {\n      return null;\n    }\nreturn `${args}${msg}`;\n\n}\n}\n```. > const browserLang = this._translateService.getBrowserLang();\n\nthis._translateService.setDefaultLang(browserLang.match(/en|el|es/) ? browserLang : 'el');\nthis._translateService.use(browserLang.match(/en|el|es/) ? browserLang : 'el');\n\nAs I understand this, you are switching to el, if the browser languages is not one of [en, el, es]. So what is your browser language? If I can guess, its English. \nIf you want to force all users to use greek language this._translateService.use('el') would do the trick.\n. The translation key is shown, when no translation for that key could be found in current and default language. When all translation are missing, maybe they are not loaded yet. \nYou can open your debugging tools (F12 in Chromium) an look in the network tab if the requested translations files are still downloading. On my machine, when opening debugging tools (including console) does not trigger a reload.. By accident, I found out a simpler version to reproduce the problem:\n\n```html\nSex.{{ viewModel?.sex }}\n\n  Overview.Details.InfusionParameter.Sex\n\nSex.{{ viewModel?.sex }}\nOverview.Details.InfusionParameter.Sex\n```\nI had \"Format on Save\" activated and therefore VSCode inserted a LineBreak and some Spaces (see first version). This yields to the same problem with the weird [object Object stuff]. I just added a newer and shorter version with less dependencies on stackblitz: https://stackblitz.com/edit/ngxtranslatebug?file=src/app/app.component.ts. I just made another interesting observation while debugging ngx-translate-core.js. I observed that at some stage during the execution, the currentValue of the node, was set to my Sex-enum, which looks strange to me.\nSo I tried something else.\nMy translations file currently looks like:\njson\n{\n  \"Sex\":{\n     \"Female\": \"Female\",\n     \"Male\": \"Male\",\n     \"Inter\": \"Inter\",\n     \"Unknown\": \"-\"\n  },\n  \"Overview\":{\n    \"Sex\": \"Sex\"\n  }\n}\nSo the the keys are:\nSex.[Female]\nSex.[Male]\nSex.[Inter]\nSex.[Unknown]\nOverview.Sex\nWhen I change my translation files to something like \njson\n{\n  \"SexEnum\":{\n     \"Female\": \"Female\",\n     \"Male\": \"Male\",\n     \"Inter\": \"Inter\",\n     \"Unknown\": \"-\"\n  },\n  \"Overview\":{\n    \"Sex\": \"Sex\"\n  }\n}\nmy problem is gone. So obviously there is a problem, when tail of a key (Overview.Sex) overlaps with another key (Sex). I made a new StackBlitz to confirm this: https://stackblitz.com/edit/ngxtranslatebug-v2\nSo my question is: Is this a known limitation of this library, or a bug?\n. I close my ticket, because I think the basic error that causes this behavior, is already described in #998 . ",
    "dpmott": "@BADFOOD Thanks for your thorough investigation.\nDo you need a PR from me?. ",
    "fsitios": "I have re-installed NPM and now works.. ",
    "ivanastefanoska": "@sarad123,  What is the issue you are facing?. ",
    "maciejcichowski": "Quick fix that will make ngx-translate load new json file every time you refresh page. Not efficient at all but simple and works;)\napp.module.ts:\n```\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json?v=' + Date.now());\n}\n@NgModule({\n  imports: [\n...\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n```. ",
    "Abd-Alrahman": "Append your build version as a query parameter as @maciejcichowski way, so translation files will be requested in every new version.. ",
    "confraria": "I'm not sure if the TranslateLoader can emit more than once but have you tried something in the lines of this:\nts\npublic getTranslation(lang: string, prefix: string = null): Observable<any> {\n  const tenantSpecific = this.appLoadService.tenantIdSubject$$.pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    mergeMap(tenantId => this.db.object(`tenants/${tenantId}/i18n/${lang}`).valueChanges() as Obsevable<any>),\n    first()\n  );\n  const shared = this.http.get(`./translations/${lang}.json`);\n  return forkJoin(shared, tenantSpecific).pipe(\n    map(([shared, tenantSpecific]) => ({...shared, ...tenantSpecific }))\n  );\n}\n. ",
    "cfilipponi": "Another approach would be wrapping everything in a conditional like this:\n```\nif (browserLang) {\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n  if (browserLang.indexOf('_') !== -1) {\n    browserLang = browserLang.split('_')[0];\n  }\n}\n\n```. ",
    "ivanhdzd": "Can resolve it, I have to set current language after set default:\ntypescript\nthis.translate.setDefaultLang('en');\nthis.translate.use('en');. ",
    "roger-gl": "I tested some more stuff and it seems that even the simples example does not work with AOT. I just  have an app module and a component and even that does not work ?. Ok, my mistake. I forgot that IVY was enabled..... ",
    "larscom": "Take a look at this translate loader lib i've created, i think that will solve your problem?\nhttps://github.com/larscom/ngx-translate-module-loader. ",
    "KawtharE": "For any one facing a similare issue i managed to solve the problem finally by using  TranslateService istead of TranslatePipe and this.translate.instance('...') instead of this.translate.transform('...') where this.translate is an instance of TranslateService.. ",
    "ningkexin": "One more layer of DIV. The version I am using\njson\n  \"dependencies\": {\n    \"@ngx-translate/core\": \"^8.0.0\",\n    \"@ngx-translate/http-loader\": \"^2.0.0\"\n  },. ",
    "jrolheiser-va": "Did stream() not handle your use case?. Not sure if it's too hacky, but this works since 1234.length === undefined.. ",
    "XxAdi101xX": "We faced the same issue that @MKhowaja mentioned here and had to make some local fixes by using a wrapper functions to resolve it locally. This change would be super helpful.. ",
    "dalepo": "There's no race condition in Javascript since there is only one main thread. \nYou should only use instant when you know your translations are ready. My advice would be centralize the TranslateService.use() into an injectable and make sure it get's called once with an event emitter, and share (shareReplay) it across your application.\n. ",
    "Airblader": "\nYou should only use instant when you know your translations are ready.\n\nThat's exactly why we call use, which is supposed to only resolve once the translations are loaded. As I have demonstrated, this is not the case if you call it twice in succession*, as then it resolves before the translations are actually loaded (but resolves to an empty dictionary). If use isn't supposed to guarantee this, an API is needed with which can guarantee it. \nMoving the library into another wrapper to account for its shortcomings isn't an acceptable solution in my opinion. Not to mention that EventEmitters are for components and shareReplay wouldn't do the trick since it ref counts. \n*) Whether we call this a race condition boils down to semantics that I'm not interested in discussing. . ",
    "mudcrab": "To listen to changes you can use onLangChange emitter.\nonLangChange.subscribe((event: LangChangeEvent) => {\n  // do something\n});\n. ",
    "gilhanan": "Thanks, amended to specific version. ",
    "Trainmaster": "Should be 4.0.3. "
}