{
    "allenxwang": "After looking at the code, I found that it may not be worthwhile or necessary to covert URL to URI. \nFirst, the code uses the URLs to open connections and get input streams. Here the URLs can be both file or http protocols. JDK can automatically handle file and http URLs. This is very convenient if you want JDK to handle the protocol. But there is no such convenience for URIs.\nSecond, URL and URI have different usage and one cannot completely replace the other, according to URI javadoc:\n\nURIs, URLs, and URNs\nA URI is a uniform resource identifier while a URL is a uniform resource locator. Hence every URL is a URI, abstractly speaking, but not every URI is a URL. This is because there is another subcategory of URIs, uniform resource names (URNs), which name resources but do not specify how to locate them. The mailto, news, and isbn URIs shown above are examples of URNs.\nThe conceptual distinction between URIs and URLs is reflected in the differences between this class and the URL class.\nAn instance of this class represents a URI reference in the syntactic sense defined by RFC 2396. A URI may be either absolute or relative. A URI string is parsed according to the generic syntax without regard to the scheme, if any, that it specifies. No lookup of the host, if any, is performed, and no scheme-dependent stream handler is constructed. Equality, hashing, and comparison are defined strictly in terms of the character content of the instance. In other words, a URI instance is little more than a structured string that supports the syntactic, scheme-independent operations of comparison, normalization, resolution, and relativization.\nAn instance of the URL class, by contrast, represents the syntactic components of a URL together with some of the information required to access the resource that it describes. A URL must be absolute, that is, it must always specify a scheme. A URL string is parsed according to its scheme. A stream handler is always established for a URL, and in fact it is impossible to create a URL instance for a scheme for which no handler is available. Equality and hashing depend upon both the scheme and the Internet address of the host, if any; comparison is not defined. In other words, a URL is a structured string that supports the syntactic operation of resolution as well as the network I/O operations of looking up the host and opening a connection to the specified resource.\n. I can add a null check at DynamicProperty.addCallback().\n. Or throw NullPointerException to fail fast at DynamicProperty.addCallback().\n. checked the Archaius internal usage of addCallback() and it seems there is no null callback installed. fail fast in this case will give us a better clue.\n. I vote for archaius-zookeeper.\n. I vote for archaius-zookeeper.\n. Currently the assumption is if a configuration is installed as a system wide singleton, it should stay that way. No switching at runtime.\nFor junit, you can create a different test for a different configuration installed. Gradle will run each test in different Jvm.\n. Maven build is no longer supported for our OSS projects.\n. I do not recall this has not been discussed before.\nIt seems to me that we have to update DynamicProperty to add byte array support. The underlying configuration itself has to also know which type of data should be treated as byte array, instead of translating them to string. \nIs there a real use case to have byte array as a type of property?\n. Thanks for the contribution!\n. This is on our road map to open source a service that manages properties.\n. tracking this in https://github.com/Netflix/archaius/issues/132\n. Yes, this change is intentional. The current default sub configurations are (most prioritized on top):\n- Dynamic configurations (URL based)\n- System properties\n- Programmatically set properties (container configuration)\nOn top of it, there is also runtime override property which can be set by ConcurrentCompositeConfiguration.setOverrideProperty() as the final value of the property.\nThis change was made to make it consistent with convention at Netflix.\n. Callbacks are invoked in the same thread which updates the underlying configuration. So it is correct to assume that callbacks should be short-lived. In practice, most likely the thread that updates the configuration is a background thread. For example, the built-in DynamicConfiguration in archaius polls the configuration source in a background thread.\nDefining an aggregate property will work if all properties are reset again (via config.setProperty()) when the data source is updated. In this case, the callback will happen on only the aggregate property, assuming that no callbacks are registered for the individual properties. However, if during the change of the property only one of the individual property is explicitly updated, this mechanism may not work. The configuration will show the correct value through config.getProperty() but the callback on the aggregate property  may not be invoked at all, because there is no explicit config.setProperty() invoked on the aggregate property key.\n. The intention of the code is to read system property \"archaius.dynamicPropertyFactory.registerConfigWithJMX\", not a property loaded into Configuration. The reason is that this property is a bootstrap property for archaius.\nAccording to Boolean javadoc:\npublic static boolean getBoolean(String name)\nReturns true if and only if the system property named by the argument exists and is equal to the string \"true\". \nPlease try setting the system property and see if it works for you.\n. Thanks for the contribution. \nDo you think it would be more appropriate if callers can configure this behavior? In some corner cases, getting partial properties may affect integrity of the configuration and some users may prefer fail-fast - give me nothing or all.\n. sounds good. \n. Suggestion on the naming: archaius.urlConfigurationSource.failFast.\n. @SteveWillard, Sorry I did not realize that there has been an update on this pull request. It looks good to me. But can you provide some junit tests for this change?\n. Greg, please merge if this works for you.\n. Check out ZooKeeperConfigurationSource in archaius-zookeeper where it gets configuration changes in a lister model.\n. For configuration based deployment context, it is expected that only one value exist for any attribute. It would be better to separate the configuration for deployment context from other application properties. For example, you can define deployment context in some application start up script as system properties:\n-Darchaius.deployment.environment=prod\n. A section regarding deployment context is added \nhttps://github.com/Netflix/archaius/wiki/Users-Guide\nBasically you want to use deployment context to determine which set of property files to load. It is not designed to load all properties files and then filter based on the deployment context values.\n. Agreed that it would be more useful to be able to load all properties and filter based on deployment context.\nThis is on our road map. We are going to open source a properties service that manages and serves properties of multiple dimensions (which can be attributes of deployment context) and the filtering functionality on client side.\n. An example how it should work is in junit test\nhttps://github.com/Netflix/archaius/blob/master/archaius-core/src/test/java/com/netflix/config/DynamicFileConfigurationTest.java\nand look into testDefaultConfigFile()\n. The current behavior is that the validation does not happen when the property is constructed. It only happens after it is constructed and during update of its value from a dynamic source.\nI can add the validation at construction phase. What would be the expected behavior in this case? Should we throw the ValidationException (a RuntimeException) from the constructor or simply log a warning and let the property take its default value? I tend to think the latter is more reasonable. It is intruding to terminate the application simply because a configuration contains a wrong value, while there is a fallback (default value) we can take.\n. Currently all the dynamic properties constructors require a default value.\nI will add the validation to dynamic properties constructors and log a warning if validation failed and fallback to default value.\n. If a property is mandatory from configuration, I feel dynamic properties are not the right APIs to use. The assumption of dynamic properties is that it can be created ahead of loading of properties. \nYou can use ConfigurationManager.getConfigInstance().getString(name). If that returns null, it means no property is set in the configuration for the named property.\n. This is fixed in pull request #86. Note that if the validator is installed after the initialization of the dynamic property, it won't be effective until the next time the property is changed.\n. Before this issue is resolved, I have to disable DynamoDbConfigurationSourceTest to ensure all tests passing in our build environment.\n. This should be achievable by using the class com.netflix.config.StringDerivedProperty. It takes a Function that converts String to the desired Java type and its getValue() method returns the latest deserialized Java object.\nThe following is an example that parse a string (a long number) into a Date object where getValue() always returns the latest deserialized Date object:\n``` java\n        Date now = new Date();\n        StringDerivedProperty calendarProperty = new StringDerivedProperty(\"myproperty\", now, new Function() {\n            @Override\n            public Date apply(@Nullable String input) {\n                Date d = new Date();\n                try {\n                    d.setTime(Long.parseLong(input));\n                } catch (Exception e) {\n                    return new Date(0);\n                }\n                return d;\n            }          \n        });\n        assertEquals(now, calendarProperty.getValue());\n    Date newTime = new Date();\n    newTime.setTime(now.getTime() + 60000);\n\n    ConfigurationManager.getConfigInstance().setProperty(\"myproperty\", String.valueOf(newTime.getTime()));\n    assertEquals(newTime, calendarProperty.getValue());\n\n```\n. @jeje, @cheddar \nDoes the above resolve your issue? If so, I would like to close this issue.\n. I will add to the wiki page before closing this.\n. The reason it does not work is this line:\nConcurrentMapConfiguration configFromPropertiesFile = new ConcurrentMapConfiguration(dynamicURLConfiguration);\nThe constructor ConcurrentMapConfiguration(Configuration config)  caches the properties from the configuration passed in, and it does not reference the config any more after that. Any changes made in the config will not be reflected in the ConcurrentMapConfiguration.\nThere is no need to wrap the DynamicURLConfiguration with ConcurrentMapConfiguration as the former already extends the later. You can directly add dynamicURLConfiguration instance to finalConfig:\nfinalConfig.addConfiguration(dynamicURLConfiguration)\nBy the way, if DynamicURLConfiguration is the only configuration used by the application, you can specify the URL through a system property \n-Darchaius.configurationSource.additionalUrls=d:/prop.properties\nThe whole program can be simplified as this (running with the above property):\n``` java\n static DynamicLongProperty dynamicLongProperty = DynamicPropertyFactory.getInstance().getLongProperty(\"a.property\", 1010101);\npublic static void main(String[] args) throws MalformedURLException, InterruptedException {\n\n    while (true) {\n        System.out.println(\"++++\" + dynamicLongProperty.get());\n        Thread.sleep(5000);\n    }\n}\n\n```\n. This type of new PropertyWrapper will also be made to understand single textual property value, same as DynamicIntProperty, DynamicBooleanProperty, etc, with a slight performance penalty compared with the latter on single textual value.\n. This enhancement will also provide solutions for Issue #74, since all possible values of the property are encoded as one JSON blob and a predicate can be used to select the most appropriate value.\n. added in 0.5.9.\n. Done, thanks to @garethbowles.\n. Cloudbees build runs into PermGen problem. Second run passed after changing the config.\n\n. I am not an expert on Spring. But I think one way to do it is to create a class which export all properties held by the configuration container ConfigurationManager. Then pass this class to PropertyPlaceholderConfigurer. Some adapter might be needed to make sure that the properties exported from the class always reflects the up-to-date value of the property, i.e., same as ConfigurationManager.getConfigInstance().getProperty(name).\n. I think the confusion is whether config.properties belong to application properties. The intention is NO. config.properties belong to dynamic URL config. The use case is that the this file can be edited and reloaded every 30 seconds, while the application properties are loaded only once at the beginning of ConfigurationManager initialization. The application properties configuration is empty unless you call the appropriate ConfigurationManager API to load properties into it.\nContainer properties which are set by application code also have lower priority than system properties as they are treated as \"base line\".\nLet me know if any junit test is wrong.\n. @gorzell Thanks. It looks good to me.\n. Another solution is to have ConfigurationBasedDeploymentContext add a configuration listener to the underlying config instance, and whenever property related to the deployment context (like \"archaius.deployment.environment\") is changed , the listener is fired off to call the corresponding setter in DeploymentContext and export to the standard macros (\"@region\", etc).\n. Then I think your first proposal should work:\njava\npublic static void setDeploymentContext(DeploymentContext context) {\n        ConfigurationManager.context = context;\n        if (instance == null) {\n            instance = getConfigInstance();\n        }\n        for (DeploymentContext.ContextKey key: DeploymentContext.ContextKey.values()) {\n               String value = context.getValue(key);\n                if (value != null) {\n                    instance.setProperty(key.getKey(), value);\n               }\n        }      \n}\n. Can you check this and see if that's what you expect?\nhttps://netflixoss.ci.cloudbees.com/job/archaius-master/lastSuccessfulBuild/artifact/\n. This is planned but not done\nhttps://github.com/Netflix/archaius/issues/132\n. Thanks for the fix!\n. From Jackon perspective, the only thing required is to add an annotation to DynamicContextualProperty.Value:\n``` java\n        @JsonProperty(\"if\")\n        public final Map> getDimensions() {\n            return dimensions;\n        }\n    @JsonProperty(\"if\")\n    public final void setDimensions(Map<String, Collection<String>> dimensions) {\n        this.dimensions = dimensions;\n    }\n\n```\nI feel \"if\" better conveys the \"if/else\" semantic of how the conditions are evaluated.\n. To support evaluation of json at load time, we need to introduce a flag to Value class to indicate whether the condition should be evaluated at runtime only. For example, if all the scopes defined in a condition are deployment context scopes, then this condition can be evaluated at load time and we can just set the single value for the property in the backing configuration. Otherwise, the condition may depend on some runtime parameters and should only be evaluated at runtime, which means the whole json blob should be kept in the backing configuration.\nBy default , this boolean indicator is false, meaning allowing load time evaluation.\nThis flag will be added my next pull request.\n. For the first question, cached value of dynamic property will be created or refreshed whenever the configuration is changed for the named property. This is done in the  DynamicProperty's configuration listener which is fired off whenever a property value is changed in the backing configuration.\nFor the second question, prop.updateValue should already be called (usually in a background thread that polls the configuration source) in the DynamicProperty listener. propertyChanged() will be invoked as a callback after DynamicProperty gets its updated value in the same updating thread.\nI will write a junit to demonstrate the above.\nFor the third question, the predicate is passed in from the constructor. This is sufficient for Netflix use case as the predicate can statically access the request context which is something similar to ThreadVariable, given that in Tomcat model, there is one thread per request.\n. @gorzell \nPlease look at new test in DynamicContextualPropertyTest in the pull request above that demonstrates my comments to this issue.\n. This method is called in case people have override it in a sub class as a way to get callback whenever the property value is changed. The new junit test has such set up.\n. The default value cannot be null because it is also used as a way to figure out the data type of the property at runtime.\nWill document that.\nThe other possible solution is to add another type parameter using something like TypeToken.\n. Makes sense to me. There might be some challenges as ConfigurationUtils has assumptions that URLs are file based. It also has the assumption that the subsequent  @next URLs have a common URI base. It does not handle absolute URIs.\nFeel free to open a pull request.\n. There are two ways to set the deployment context:\n- Specify the class name of factory name of the DeploymentContext as a system property at start up\n- By default, ConfigurationBasedDeploymentContext will be instantiated and installed as the deployment context. But unless you set the corresponding properties prefixed with \"archaius.deployment\" or explicitly call the setters, the getters will return null. \nI suggest using the first approach since the way to define a deployment context is really application dependent.\n. @jakber I think it is the same issue as \nhttps://github.com/Netflix/archaius/issues/116\nThere was a suggested fix there. I have not been able to get to it. Feel free to send a pull request if you have the bandwidth.\n. @jakber @gorzell \nIn my last pull request, this problem is fixed. However, I made a change to ConfigurationBasedDeploymentContext to have its key names the same as the standard property names in the format of @<name>. For example, the region key for ConfigurationBasedDeploymentContext was used to be archaius.deployment.region, after my change it will be @region. I think this change will resolve confusions about deployment context property names. However, it means that if you have to change the deployment context property name in your application set up. Let me know if this is OK with you.\nThe test DefaultDeploymentContextTest and CascadedPropertiesWithDeploymentContextTest (which was failing previously due to the same issue and was skipped) shows that the problem is fixed.\n. @gorzell In the last commit in the pull request, I restored those \"archaius.*\" properties. Now backward compatibility is ensured. Please take a look.\n. ConfigurationManager should add an API to take a URL and load it as a configuration.\n. I am not sure what you mean by \"someone changes the properties detail from front end\". Does it mean that someone updates the property in the database? \nIf you want to use initialLoad() to force reload, you can extend the AbstractPollingScheduler (or FixedDelayPollingScheduler) and make the API public.\n. This is due to the fact that ConcurrentMapConfiguration extends AbstractConfiguration and has to follow its specification.\nOne workaround is to call this API at system start up or before archaius is initialized:\njava\nAbstractConfiguration.setDefaultListDelimiter((char)0);\nLonger term, we can use a system property to pass this information to ConcurrentMapConfiguration at initialization.\n. @cfregly @Randgalt \nPlease review if you get a chance. \n. Looks good to me. Thanks for the contribution, Howard!\n. Just to clarify: createStringProperty() returns a DynamicStringProperty, which will reflect any property value set in the underlying Configuration. The API does not actually create a property in the underlying configuration. \n. I think it is possible to write a JUnit test that force GC and check that the callback is no longer invoked.\n. We used the following functionalities from commons-configuration:\n1. A key-value pair store that is listenable and fire events on updates. This is the foundation of dynamic properties.\n2. Support data type like Integer, Float, Boolean, etc., for getters.\n3. Support variable interpolation. For example, if foo=1 and bar=${foo}, then bar is also 1.\n4. Support creation of sub configuration based on a prefix of keys.\nSo it seems to me that we can abstract out these requirements into some interfaces and provide a default implementation on ConcurrentHashMap.\nWe may also consider if we should support custom data types and pluggable serialization mechanism.\n. We could potentially enhance the behavior by making DynamicProperty's update capable of interpolation. This requires a change in DynamicProperty.updateValue(Object newValue)\nThis is how it will look like:\njava\n    // return true iff the value actually changed\n    boolean updateValue(Object newValue) {\n        String nv = (newValue == null) ? null : newValue.toString();\n        synchronized (lock) {\n            // Add the following new code\n            if (dynamicPropertySupportImpl != null) {\n                nv = dynamicPropertySupportImpl.getString(propName);\n            }\n            if ((nv == null && stringValue == null)\n               || (nv != null && nv.equals(stringValue))) {\n                return false;\n            }\n            stringValue = nv;\n            cachedStringValue.flush();\n            booleanValue.flush();\n            integerValue.flush();\n            floatValue.flush();\n            classValue.flush();\n            doubleValue.flush();\n            longValue.flush();\n            changedTime = System.currentTimeMillis();\n            return true;\n        }\n    }\nSince AbstractConfiguration.getString(name) is relatively expensive, this may have minor performance impact. However, if we assume that update to the values usually happens in background thread, this may be fine.\n. Missing copyright notices.\n. Missing copyright notices.\n. Missing copyright notices.\n. Missing copyright notices.\n. Missing copyright notices.\n. Missing copyright notices\n. No need to import DynamicIntProperty and DynamicStringProperty from the scala package? Or can we just remove this line?\n. Missing copyright notices\n. Missing copyright notices\n. It seems that we do not have aws-java-sdk-1.3.14 in artifactory yet. This will cause internal build problem.\n. We do not have scala 2.9.1-1 in artifactory. This will cause internal build problem.\n. Can we change it to 2.9.1:1.8 to match artifactory?\n. Internal build will only use whatever available in artifactory.\n. yes, it will be removed.\n. Please add copyright notices.\n. The constructor of DynamicStringProperty is package private. The reason is that we want people to use DynamicPropertyFactory to create instances where DynamicPropertyFactory will lazily install a default configuration source and attach to the dynamic properties, if none is explicitly installed. You might also want to make this constructor package private and provide a factory method in DynamicPropertyFactory. Or, try call DynamicPropertyFactory.getInstance() in a static block at initialization of this class.\n=== update ===\nAfter looking at the constructor of PropertyWrapper, it calls DynamicProperty.getInstance() where DynamicPropertyFactory.getInstance() is called. So the initialization of a configuration source is already taken care so it is not necessary to force it again. The constructor can remain public.\n. what if people override this method and forget to call super.propertyChanged(). Then the derived value will no longer be available. \nYou might want to look at DynamicSetProperty and see if you can use the same trick to avoid that from happening.\n. Now you can add an empty public method propertyChanged() and call it inside propertyChangedInternal() so that users can subclass this method and override this method to get the callback when property changed.\n. I think deriveAndSet() should be called first. Then in propertyChanged(), users can call get to get() the updated derived value.\n. I prefer making constructors package private since we have the static factory methods, which are more intuitive to use than the constructors.\n. this could be just cfg.getDeploymentContext().getKey(contextKey) \nAlso how do you deal with property that applies to all deployment context?\n. Can you use AWS mock for this class? DefaultAWSCredentialsProviderChain will look for environment variables for aws credentials, which some build environments happen to have. Then test will fail due to AWS access permissions, etc., or create the table that is unexpected. \nOr at least can you provide a system property to enable skipping of this test?\n. I thought all non javadoc comments should start with /*, not /**\n. Good question. With the introduction of this JSON format, the sorting logic is embedded in the value itself, with highest matching priority on top. \nFor Netflix internal usage, the dimension sorting will still work and can co-exist with this new approach. And I think for most use cases, people will still prefer the old way, i.e., define property with the matching deployment context dimensions and with only one value, and use this format for request context based attributes or if they want to define their own sorting logic. \n. People can define their own parsing logic by passing in a function into its constructor:\npublic StringDerivedProperty(String propName, T defaultValue, Function<String, T> deriveFunction)\n. I think system properties (-D) should have higher priority than environment variables. Think of it this way: environment variables are applicable to all processes running on the OS, but system properties can override them for a specific JVM process. \n. Application properties have the lowest priority. These are typically properties loaded from configuration file, which should be overridden by its deployment or environment specific properties.  This is the convention we used in Netflix and worked for us.\n. Actually URL should have the highest priority, as it is the most dynamic one, which is backed by a URLConfigurationSource that polls every 30 seconds. These have the same nature as the properties that are served by a service.\nThe default config (config.properties) is just there as a start place. Note that you can define a series of additional URLs loaded by this configuration. We should really treat it as a dynamic configuration source.\n. wrong indention?\n. copyright notice?\n. Would it make sense to throw IllegalArgumentException if conf is containerConfiguration? Otherwise we return containerConfiguration which behaves like the config is indeed removed.\n. I think it is probably ok to break compatibility in this case because removing container configuration should never have worked for the user, even though it is returned at the end of the method. It will make it clearer to future users that this is not allowed.\n. Better to explain the reason of deprecation. In this case this is no-op API.\n. Ah, nice\n. should have another assertion to cover the case if no exception is thrown, like fail(\"exception expected\");\n. You would also need to remove callbacks maintained in this list.\n. Is it necessary to maintain another callback list here? If not, we can just use delegate.unsubscribe() to remove callbacks.\n. Would it be better to name it removeAllCallbacks() to be more explicit?\n. ",
    "gorzell": "Done.\n. Sorry allen, I screwed this up somehow.  The scala stuff isn't done you, this pull request was only supposed to be for the AWS portion, maybe i should have branched?\n. Don't merge this yet, I need to tweak the test a bit more.\n. This should be good to go now.\n. I did a little research and I think the only way this can happen is if a null gets added to the     private CopyOnWriteArraySet callbacks = new CopyOnWriteArraySet();\n. I think a null check both at the add and the read make sense, but I would like to also understand what is causing that to happen in the first place.\n. Isn't it setup as multi module?  Or are sub projects different?\n. If you are introducing dependencies on curator or zookeeper libraries it should be in it's own module, rather than in core.\n. Zookeeper\nOn Nov 29, 2012 10:44 PM, \"Chris Fregly\" notifications@github.com wrote:\n\nok, that's what i was thinking, as well. the refactorings will occur in\narchaius-core/ to support the new curator-based implementation which i'll\nput in either archaius-curator/ or archaius-zookeeper/ -- what's your vote?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/45#issuecomment-10880120.\n. There should be a way to set it in the pom as well, not just on the command\nline.\n\nOn Thu, Nov 29, 2012 at 10:42 PM, Chris Fregly notifications@github.comwrote:\n\nah, gotcha.\nyeah - i figured gradle was running each test in a diff JVM as I just ran\nthe archaius-core tests under maven (using the gradle-generated\npoms/pom-default.xml) and they're failing in the same way as my tests. Here\nare the failures:\ntestInstall(com.netflix.config.ConfigurationManagerTest): A non-default\nconfiguration is already installed\ntestSwitchingToConfiguration(com.netflix.config.DynamicFileConfigurationTest):\nConfigurationManager is already initialized with configuration\ncom.netflix.config.ConcurrentCompositeConfiguration@34f50cahttps://github.com/com.netflix.config.ConcurrentCompositeConfiguration/archaius/commit/34f50caf\ncom.netflix.config.DynamicPropertyTest: ConfigurationManager is already\ninitialized with configuration\ncom.netflix.config.ConcurrentCompositeConfiguration@34f50cahttps://github.com/com.netflix.config.ConcurrentCompositeConfiguration/archaius/commit/34f50caf\ntestCreateProperty(com.netflix.config.InitWithNullConfigTest):\nConfigurationManager is already initialized with configuration\ncom.netflix.config.ConcurrentCompositeConfiguration@34f50cahttps://github.com/com.netflix.config.ConcurrentCompositeConfiguration/archaius/commit/34f50caf\ntestIncrementalPollingSource(com.netflix.config.PollingSourceTest):\nConfigurationManager is already initialized with configuration\ncom.netflix.config.ConcurrentCompositeConfiguration@34f50cahttps://github.com/com.netflix.config.ConcurrentCompositeConfiguration/archaius/commit/34f50caf\ntestSimpleInMemoryJDBCDynamicPropertySource(com.netflix.config.sources.JDBCConfigurationSourceTest):\nConfigurationManager is already initialized with configuration\ncom.netflix.config.ConcurrentCompositeConfiguration@34f50cahttps://github.com/com.netflix.config.ConcurrentCompositeConfiguration/archaius/commit/34f50caf\nunfortunately, we're using maven (along with a lot of others, i'd imagine)\nand it seems that maven runs the tests in the same JVM. it looks like we\ncan specify -DforkMode=always on the mvn command. i re-ran the tests with\nthis flag just now and the errors go away.\ni still this it's reasonable to propose an @VisibleForTesting method to\nclear the source between same-JVM test runs. while we've discovered a\nworkaround, this seems to be a relatively-heavy limitation on the\ntestability of classes using DynamicPropertyFactory.\nwhat do you think, allen?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/46#issuecomment-10880081.\n. LGTM\n. pparth, I am working on something that might more closely address what you are asking about.  Although it is specifically related to loading properties from DynamoDB.\n\nBecause you have to assume that all forms/variants of the properties are in the dynamo table there will be a filtering component that they gets hooked into a cascaded configuration.\nI will take this issue and leave it open until I have a pull request for the related change #77 \nAllen, thanks for the docs, that gives me enough to get started and I will update once I have a solution in place.\n. I am pretty close to done with a nieve approach to this.  I need to add the javadoc and a wiki page, but you can see it in my branch.\n. Pull request for this and some documentation on the wiki are done.  Going to close this issue.\n. https://github.com/Netflix/archaius/wiki/Dynamo-DB-Configuration-Source\n. Good catch, just need to figure out how to best merge this with my big refactor.\n. I think this isn't relevant any more since changes were added in my pull request.  If it is then it needs to up updated before it can be merged.\n. Good idea.  I may have to port it into the tests because I renamed them in another pending pull request.\n. I think this isn't relevant any more since changes were added in my pull request.  If it is then it needs to up updated before it can be merged.\n. I pushed a fix for the case where this is no context for the property.  It does however rely on having a ContextSource with a context of null in your CombinedConfiguration.  you could also have the vanilla source in your combined config, but that would cause double polling.\n. There are some bugs in my push, and I am adding some tests.  It seems that when i get the deployment context from ConfigManager it isn't initialized correctly.\n. In my pending pull request I have the ones that you would have to disable commented out.\n. This is tricky because these class are generated by the scala compiler and findbugs doesn't really play well with scala.\nPossible solutions are to disable findbugs for this sub project, or ignore errors.\n. I am about to go on vacation, so I am not sure when I will have a chance to investigate this in detail.  As a hack, couldn't you set a deployment context that is will always be true and then make sure that config is in the right place in the hierarchy?\n. I talked to @allenxwang about this and we think there might be a better solution based on context based dynamic properties\nhttps://github.com/Netflix/archaius/issues/102\nThis will enable you to persist properties without any fixed dimensions and have all the matching logic done at the client side by a pluggable evaluation engine of dynamic property. The key point is that the value of the property is a JSON blob that includes the filtering logic which will be evaluated at runtime when the property is updated.  This also eliminate the needs of complicated filtering logic in the polled configuration source level.\n. I thought about this some more, and I am fine with your change in general.  However, I would prefer that you did it as an additional implementation, rather than changing the behavior of the existing class.  That way things won't break for existing users and people can use the implementation they prefer.\n. This isn't currently possible, and could be difficult to add.  You would need to have some static code inside the aws sub library that added this as a config on top of the default configuration, making sure this happens in the correct order could be a bit tricky.\n. It's possible to do, but there are a few different versions you would need to support because you end up needing to create a composite configuration with a number of sub configurations (most of which need some constructor args) and then add that to the overall configuration in the same place.\nI would be happy to review a patch if you want to work all this out so that it can be config driven.  There is also a chicken and egg problem in where you get that config info from.\n. I think that @stujapa had a method for doing this in scala, but I don't remember the details so I am not sure it would apply.\nGenerally to work around this in application code, I have just made sure that in the beforeEach methods in the test I reset the properties being used to some default values.  That of course doesn't work if you want to check if the property exists, but in that case you can remove it in that particular test.\nFor the testing configuration loading, it is really something we should come up with a better solution for than the current one, which is starting a new JVM for each test case.  Hopefully @howardyuan and @allenxwang can put this down as another +1 for a reset feature.\n. @howardyuan lets move the discussion about how to implement re-installation or something similar to #155.\n. @cfregly Well, given what is stated in that thread, this unit test should have been failing all the time, because in the end SystemConfig also being the container config is incorrect as it would mean that you could override system properties programmatically (which I actually think is the correct behavior given that the only time people use setProperty is generally unit tests).\nHowever according to that thread the desired behavior is that programatic (application properties) DO NOT override SystemProperties.  So the unit test will need to be changed to reflect this.\n\nThe current default sub configurations are (most prioritized on top):\nDynamic configurations (URL based)\nSystem properties\nProgrammatically set properties (container configuration)\n. DynamicPropertyInitializationTest is incorrect.  A setProperty successfully overrides a System.property.  The asserts in the following block should fail, but don't because SystemConfig is set as the container config rather than AppConfig being set as such.\n\njava\n        System.setProperty(\"xyz\", \"fromSystem\");\n        ConfigurationManager.getConfigInstance().setProperty(\"xyz\", \"override\");\n        assertEquals(\"override\", prop.get());\n        assertEquals(\"override\", lastModified);\nI will fix both the default config and the test so that they reflect the ordering @allenxwang has clarified.\n. Proposed solutions:\n1. Have setContext load the configuration of config == null, much like many of the other calls that check for a null config.\n2. set config = loadConfig inside the static block, before setContext is called\n. Would the configuration listener you propose be early enough in the cycle to that the macro would be set when a property file is loaded from @next?  This is the underlying issue for us, @next is not actually usable given the current loading scheme, even though it is documented as working on the wiki.\nhttps://github.com/Netflix/archaius/wiki/Deployment-context\n. Looks good, could you add a unit test for this?\n. I wouldn't use a java protected word, it will make the mapping more complicated.  Maybe \"when\"?\n. Steps:\n1. Move Value into it's own file.\n2. Create an EvaluateContext class with the following api:\n``` java\npublic class EvaluateContext {\n    private static final Predicate>> defaultPredicate = DefaultContextualPredicate.PROPERTY_BASED;\nprivate final Predicate<Map<String, Collection<String>>> predicate;\nprivate final ObjectMapper mapper = new ObjectMapper();\n\npublic EvaluateContext() {\n    this.predicate = defaultPredicate;\n}\n\npublic EvaluateContext(Predicate<Map<String, Collection<String>>> predicate) {\n    this.predicate = predicate;\n}\n\npublic List<Value<String>> resolveValues(String input) {\n    List<Value<String>> values;\n    try {\n        values = mapper.readValue(input, new TypeReference<List<Value<String>>>() {\n        });\n    } catch (Throwable e) {\n        // this could be that the property is not set up as JSON based multi-dimensional contextual property\n        // and only has one textual value, try to parse this textual value\n        values = Lists.newArrayList();\n        values.add(new Value<String>(input));\n    }\n    return values;\n}\n\npublic String resolveContextualValue(List<Value<String>> values) {\n    if (values != null) {\n        for (Value<String> v : values) {\n            if (v.getDimensions() == null || v.getDimensions().isEmpty()\n                    || predicate.apply(v.getDimensions())) {\n                return v.getValue();\n            }\n        }\n    }\n    return null;\n}\n\n}\n```\n1. Change DynamicContextualProperty to use this API\n. So for 2, propertyChanged(this.getValue()); literally does not do anything.  It's implementation in the super class is empty so it should probably be removed as it is confusing.\n. LGTM\n. @howardyuan I can merge it when ready.\n. @howardyuan it may be to big a change for this issue, but I think we should look at moving away from a model that requires a single configuration per JVM.  Instead I think the ConfigManager should operate on named configuration hierarchy, with perhaps a default name for the base configuration.\nThis would also help us start to pull apart the DynamicProperty APIs and utilities from common-configuration.  Which I think will help with a few other issues that people are having.\n. LGTM\n. @howardyuan Jumped on that pretty quick.  It may still be worth considering the questions I added though.\n. ++\n. @howardyuan #162 is related, could you get it in the same pull request?\n. LGTM, would be cool if you could get #162 into this as well.\n. LGTM\n. LGTM, once it builds I will merge.\n. I promise I will look at this Real Soon Now. ;-)\n. Ha, I started on making that trait too, guess you win.\nOn Tue, Mar 11, 2014 at 5:44 PM, stujapa notifications@github.com wrote:\n\nYou can do that. Or you can wait to review two PRs at once. I'm nearly\nfinished refactoring a DynamicProperty trait under the dynamic properties.\nOne issue with DynamicStringSetProperty and I'm done.\nmatt.....\n__\n\nOn Mar 11, 2014, at 3:31 AM, Greg Orzell notifications@github.com\nwrote:\nI promise I will look at this Real Soon Now. ;-)\n\nReply to this email directly or view it on GitHub.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/pull/173#issuecomment-37326261\n.\n. It looks like #177 pre-empts this, can I close request, or do they both need to go?\n. Looks mostly good.  Does this depend on #173 ?\n. Probably, I just haven't had time to look at it again.  Are you blocked?\n\nOn Sun, Mar 30, 2014 at 7:06 AM, stujapa notifications@github.com wrote:\n\nAny other issues? Or is this good to merge?\n\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/pull/177#issuecomment-39018594\n.\n. I have no release powers.\n. I am pretty sure I was just trying to get caught up to a somewhat current version.  If you need to go back that is probably fine.\n. Well there have been changes to how the scala plugin works.  But I will have to pull it and see the failure to know for sure.\n. I can build locally with gradle 1.6, so I am not sure what the issue is.\n. I think the dependency can be eliminated.  This has been on my list of big things to look at for a long time, however given it's size I haven't had a big enough chunk of time to take a hard look.  This came up in another issue I can try and look up later.\n. Those I haven't thought about at all.  I was really trying to decouple the API from the implementation as a first pass to enable things like #148. The hardest part about making that work is dealing with all the bootstrap logic that is static.\n. @allenxwang I think that might actually be a bit more than Ben really needs.  Especially writing an alternate implementation based on ConcurrentHashMap.  As a first step I think just limiting core to the bare bones functionality that people use, and especially removing the initialization logic is probably enough.  SLF4J is probably a good example of a similar paradigm, where intermediate client libraries can use the core functionality, but allow downstream users to provide the implementation rather than forcing it on them.  @benjchristensen correct me of I am getting this wrong.\n\nFrom a users point of view there are two main portions, initialization and creating/using properties.  I don't think that either of these need to have concrete implementations in core in order to be used by clients, so the main thing is to detach them from any specific implementation.  Providing alternate implementations is a separate exercise.\n. Also as @benjchristensen the current API does have places where it leaks the underlying implementation, which also will need to be closed up.\n. I have been thinking about this a bit.  I think it really depends on which dependency you care the most about.  I don't actually know how guava is being used, I can guess about Jackson.  These can probably be pulled out into sub modules, or surgically removed pretty easily.\nThe dependency on commons-configuration is a much bigger deal and would probably warrant a major version effort, and breaking backwards compatibility.  Some of the key things to think about would be:\n- Separating the API from the implementation\n- How to best plug in/load the correct implementation at runtime\n- The bootstrap process for archaius in general.  Right now it depends on a static block and the class loader.  This would probably need to be changed to something totally different in order to support a more plugable implementation.\nThese are just my initial thoughts, I am sure there are more concerns that I am forgetting.\nPS I need to go back and review @benjchristensen 's feedback in more detail.  So apologies if this is redundant or ill informed.\n. @benjchristensen I took a quick look around the project and didn't see anything relating to Archaius 2.  Is there a design doc or something similar somewhere?  Is it in another repo that I missed?\nI think we can address these issues either way, or both.  Although as mentioned some of them will involve breaking existing APIs/packaging.\n. It would be great to have a chat about the goals of that effort so that we can decide how and where we want to tackle some of these bigger issues with the library.\n. That all sounds like good progress.  I am wondering if you could even pull out the string stuff into another module.  I am also curious if the cost of autoboxing really warrants having specially named classes for all the primitive types (but maybe I have just been in scala land too long).\nWould the stream aspect introduce a dependency of core on Rx?  I understand why Rx integration is important, but I am not sure how much of the community at large would want to have it as a direct dependency.\n. Sounds good.\nOn Feb 27, 2015 1:04 PM, \"elandau\" notifications@github.com wrote:\n\nSorry, I didn't mean to imply this will have a dependency on Rx. I was\njust describing an Rx like API. With that said, I do envision an\narchaius-rxjava subproject that can convert a property value stream to an\nObservable so that the property can be composed into your Rx code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/issues/182#issuecomment-76471461.\n. Looks good other than some minor fixes.  I worry a little bit about the infinite loop and what thread might get blocked.\n\nAlso would be nice if there were some tests, but since it relies on an interaction with the AWS client am a not sure there is a simple way to do that.\n. Why don't you put in a max retries just to be safe.  You can use -1 as infinite.\n. Well it was a fun try, but it turns out this also depends on JDK7, which the build isn't setup to use.  Is that an intentional change?  If so why not just go all the way to 8?\narchaius-core/src/main/java/netflix/archaius/config/EmptyConfig.java:24: cannot find symbol\nsymbol  : method emptyIterator()\nlocation: class java.util.Collections\n        return Collections.emptyIterator();\n. Probably not surprisingly a lot of the test appear to be broken.  But with this PR and a JDK change on the build job everything should at least compile.  I will probably try and clean up the build file a bit more given some of the generalities it contains.\n. Sweet, what did you do about the JVM version?\nOn Fri, Mar 6, 2015 at 8:15 PM, elandau notifications@github.com wrote:\n\nBuild for 2.x succeeds as of #242\nhttps://github.com/Netflix/archaius/pull/242\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/239#issuecomment-77672576.\n. That should be fine, but there is a consequence that you are basically\nforcing 1.x on to java 7 as well.\n\nOn Fri, Mar 6, 2015 at 8:22 PM, elandau notifications@github.com wrote:\n\nModified the cloudbees configuration to java7. We can't go to java8 yet\nbecause most of netflix libraries are still on java7.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/239#issuecomment-77672824.\n. Glad you did this, it was next on my list, but I wasn't sure how people would feel about it.  I like this style a lot more than one giant build file.\n. This seems a bit like a hack.  I realize it's a substantial change, but putting versions in the jar name seems extreme. How common is the case of needing to load both?\n. Looks like this will need to be patched into the 2.x branch as well.\n. That would def be a problem.  I guess I assumed based on the API that it was the other way around, but I can also see how that would be hard.\n\nMy specific case is trying to deal with a YAML config file.  In the short term I was going to hand it by loading into a map, but in the long term it would probably warrant a full plugin.\nI am happy to add the unit tests.\n. I'll take a look at that, it may or may not work because we have multiple maps (one per env) with a configuration in each.\n. I am also not terribly opposed to a decoding behavior where if you asked for something in a type that it isn't you log an error and return the default or throw an exception.\n. I am not exactly sure what you are trying to get at.  The current behavior is that if you call get() without a default you will get an exception.  Which I think is ideal/correct.  Is this separate from that?\n. Looks like they build with java 8.  Is there an option to move that direction before release?\n. I am not sure I am understanding the issue here.  Do you have a use case where you would like to swap out the actual logging binding at runtime based on configuration information?  If so what does that look like?\nOtherwise it seems like having logging in the core is pretty valuable.. It probably wouldn't be that hard to port over, it is a very simple implementation.  Because it is simple it does run into problems if you want to do layering or overrides with it.\n. Given that the source version of the build is set to 1.7 I am pretty sure this isn't going to compile without changing that.  I personally wouldn't mind that change, but it is pretty significant.\nAn alternative would be to make this part of a separate module that requires 1.8.  You could then just implement the Decoder interface or extend the default decoder.\n. @elandau can I get a review on this?\n. @elandau I fixed the conflict, but something seems to have gone sideways with the build, even the stable/previously successful branches no longer build on my laptop or in CI.. I have some ideas and intent here. But not sure when I will get to it.\n\nOn Sep 27, 2016, at 05:05, Nathan notifications@github.com wrote:\nWe love this lib but we also love the scala api, curious if there were plans to port over archaius-scala to archaius2?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @elandau would be great to get this into the next release, it is a pretty significant bug.\n. I will do a separate PR for List support.\n. @elandau can I get a review and merge here?  My other PR too?\n. Have you considered using the typesafe/lightbend module and underlying library?  It should support reading configuration from JSON more or less out of the box.. I am not sure if you are using a 1.x or 2.x version of Archaius.  But I would also encourage you to keep the parsing and loading logic separate.\n\nA 1.x example of loading configuration from S3 can be found in: https://github.com/Netflix/archaius/blob/master/archaius-jclouds/src/main/java/com/netflix/config/sources/BlobStoreConfigurationSource.java and the related interface is https://github.com/Netflix/archaius/blob/master/archaius-core/src/main/java/com/netflix/config/PolledConfigurationSource.java.\nI believe https://github.com/Netflix/archaius/blob/2.x/archaius2-core/src/main/java/com/netflix/archaius/readers/URLConfigReader.java is the relevant example in 2.x. . it's the latest in maven central, doesn't the internal build fall back to that?\n. Done.\n. Isn't gradle supposed to generate these?  Not sure why it didn't, but i can add them.\n. Given the unit tests, are all these main methods really necessary?  If you want to give examples, which i think you should, probably better to do it in the javadoc for the class?\n. I am not comfortable with this because it will override what was already setup in the client that was passed in.  I think the better approach is to create a private setupDbClient method that returns a DBClient and then call this(setupDbCLient(creds) in the two constructors that need this.\nPS. those are sample names ;-)\n. FYI I moved most of this up into an abstract class in a pending pull request, not sure if it would be better to work of that.\n. Sounds good.\n. For now it is just commented out so that it won't trip anyone up.  Adding a system property is a good idea, I will file a separate issue for that.\n. Good catch, I'll fix this.\n. I believe that is correct.  However this was all generated by a task in the build script, not by me.\n. That is generally true, but this was all generated by the gradle license plugin which seems to prefer this format.  It is also consistent with other NFLX OSS projects.\n. I agree.  I thought the last config won (mostly based on the fact that I thought SystemConfig was already the highest priority).  If first win's, should application really have the highest priority?\nIt seems like logically you would want the chain to be from lowest to highest: URLs -> Env -> System.  Since URL is most likely to have defaults or common values while Env and System are likely used for very specific overrides.\n. I agree, but that isn't what seems to be implemented here (even before my change), as URL being first added would have the highest priority.  I think the correct fix is to switch URL and System in this block and leave Env in the middle.\nThe most compelling reason that URL should be lowest is that it tries to load a default config (config.properties) from the classpath.  It would be strange if all other properties didn't take priority over settings in this kind of global default that could be in any jar file.\n. OK, that sounds fine in general, but I am still nervous about something\nfrom the classpath being at the top of the list and therefore not\noverridable.  I will file a follow up issue to move config.properties into\napplication config or something similar.\nOn Jun 25, 2013 12:13 AM, \"allenxwang\" notifications@github.com wrote:\n\nIn\narchaius-core/src/main/java/com/netflix/config/ConfigurationManager.java:\n\nindexForContainerConfig = config.getIndexOfConfiguration(defaultURLConfig);\n     } catch (Throwable e) {\n         logger.warn(\"Failed to create default dynamic configuration\", e);\n     }\n-        if (!Boolean.getBoolean(DynamicPropertyFactory.DISABLE_DEFAULT_SYS_CONFIG)) {\n-            SystemConfiguration sysConfig = new SystemConfiguration();\n-            config.addConfiguration(sysConfig, DynamicPropertyFactory.SYS_CONFIG_NAME);\n-        if (!Boolean.getBoolean(DISABLE_DEFAULT_ENV_CONFIG)) {\n\nActually URL should have the highest priority, as it is the most dynamic\none, which is backed by a URLConfigurationSource that polls every 30\nseconds. These have the same nature as the properties that are served by a\nservice.\nThe default config (config.properties) is just there as a start place.\nNote that you can define a series of additional URLs loaded by this\nconfiguration. We should really treat it as a dynamic configuration source.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/pull/115/files#r4860331\n.\n. I don't think so, it lines up with the end of the param that it goes with (@return)\n. Added.\n. Why backwards compatibility in this one case, but not all of them?  I don't feel strongly either way, but consistency would be good.\n. I see, in that case could you just mark this as deprecated (with the version number) and I think it is good to go.\n. Is it worth considering a deep copy here?  Locking the references is probably defensive enough, but it doesn't guarantee that the default won't change.\n. Should null be allowed at all, or should we force null to be an empty collection?\n. Ya, I forgot how messed up java's clone is.\n. Sure, but we should probably think about how to cue up a set of breaking changes along with a version bump so that the code is more defensive in general.\n. Scaladoc about the differences between get and apply.\n. I think some words were lost in a refactor here.\n. Test case for None.\n. Could this be null?  Would that cause problems?\n. At some point you might want to change this to a fixture since the logic is all the same and only the values/types change.\n. Nit: Formatting seems to have gone astray.\n. Consider renaming this Helpers or something similar?  Test in the name (especially at the end) implies that actual tests happen.\n. Should consider moving to a test fixture since the tests for these are basically the same other than some values and types.  That way you don't have so much copy and pasted the code.\n. Doesn't this need ()?\n. I think this might be better to have in a separate trait?  Thoughts?\n. Why add NULL, why not just NOOP?\n. Should this extend Dynamic Property itself?  It seems to have the same API, although I can see how that might be recursive.\n. Which I think the factory class that previously existed was probably a bit much, I think it is cleaner to have this in an Object level factory (apply) method, rather than the class constructor.  I would even think about making the constructor private and forcing people to use methods on the Object.\n. Missing callback support.\n. As mentioned above I think we should deprecate this whole thing in favor of factory methods on each individual object.\n. Interesting that you didn't switch to the Option callback format you added to some, but not all constructors.  In the end I think this is going away so no need to fix.\n. Sure, it just doesn't feel like part of the core API to me, but I realize that is a bit subjective.\n. For me it's about side affects and trying to keep them out of the constructors.  Also this is one case where I think it is better to have a constructor/apply for each case (with and without a callback) rather than having an option that defaults to none.  Again, because there are side affects and because callbacks can be added after the fact the option becomes meaningless post construction.\n. I meant in the constructor.  This is back to the inconsistency mentioned below.\n. It would be great if you identified the time unit (i.e. ms) in the variable name, or at the very least put in a comment.  I am assuming it is milliseconds.\n. See above.\n. I would also clarify that this is the property name not the property property object.  Notice how the other names are clearly labeled as PropertyName.\n. Since this is an infinite loop I think at least a WARN if not an ERROR is justified here.\n. I would also put the currentBackOff value in the log string.\n. It's only completely unnecessary if you have a monopoly on all of the possible domains. ;-)\n. If you want to maintain the same behavior as before you should probably log this as ERROR since guava is logging it as SEVERE.\n. Thanks for the fix.  Happy to merge it when I see the new patch come by.\n\nOn Fri, Mar 6, 2015 at 7:33 PM, John notifications@github.com wrote:\n\nIn\narchaius-zookeeper/src/main/java/com/netflix/config/source/ZooKeeperConfigurationSource.java\nhttps://github.com/Netflix/archaius/pull/218#discussion_r25992847:\n\n@@ -223,6 +224,10 @@ synchronized void deleteZkProperty(String key) throws Exception {\n     }\npublic void close() {\n-       Closeables.closeQuietly(pathChildrenCache);\n-        try {\n-            Closeables.close(pathChildrenCache, true);\n-        } catch (IOException exc) {\n-            logger.warn(\"IOException should not have been thrown.\", exc);\n\nThat's reasonable. I'll update this patch.\nThough I think the same behavior is inherently altered as it's going to\nSLF4J instead of JUL (and I'd be surprised if most users were importing a\nJUL-SLF4J bridge). But I'm sure nobody wants more JUL!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/218/files#r25992847.\n. I am not sure that this comment/description is still accurate based on the contents of the interface.\n. Having this functionality in ObservableProperty feels conflated to me, as it has basically nothing to with a property being Observable.  Another option would be to put it directly in the Property interface but that seemed like it might be overly strict.\n. I'm not sure that this javadoc is still accurate.\n. It might be worth also having a getOrElse(T else) method so that you could override the general default for a specific call.\n. \n",
    "eciramella": "Annnnnn - I forgot about the markdown.\nThe pom should have this:\n``` xml\n   \n\narchaius-core/src/main/resources\n\n\n\n\narchaius-core/src/test/resources\n\n\n```\n. Ahhhh - it passes!  I kinda figured this was the case.  Probably should remove the pom.xml entirely.  Wish this was set up as a multi-module project :-/\nThanks Justin!\n. Sorry  -   again - basing everything I saw on the pom.xml.  Usually you have a modules block in the top level pom defining sub projects (or should).\nI mistakenly assumed if the pom is there, it is a viable alternative to gradle.\nNow I know, and knowing is half the battle GI JOE!\n. ",
    "quidryan": "Archaius is built with Gradle. The pom.xml is there for historical reasons, and can be ignores. Do the tests fail when you run:\n./gradlew test\n. It is a multi-module project. What makes you think it isn't?\n. Next week I should have a Gradle 1.12 (with patches for Scala) based build\nfor NetflixOSS. What specifically should I test to know if it's working for\nyou?\nOn Mon, Jun 9, 2014 at 9:21 PM, Howard Yuan notifications@github.com\nwrote:\n\nI can do a local build with gradle-1.6.-all.zip, but not\ngradle-1.6-bin.zip. However, Github pull request builds all fail even\nthough with different errors. If you can help narrow down the Github\nbuild,\nthat'll be nice. Once I move back to 1.7, problems go away.\nOn Mon, Jun 9, 2014 at 5:41 PM, Greg Orzell notifications@github.com\nwrote:\n\nI can build locally with gradle 1.6, so I am not sure what the issue is.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45561970.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45572384.\n. This still doesn't address what a good usage of Archaius 2 looks like when making a class that is easily testable.\n. Java 8 method signatures are quite adequate.. Cool, I didn't know about this annotation. \n. \n",
    "cfregly": "ok, that's what i was thinking, as well.  the refactorings will occur in archaius-core/ to support the new curator-based implementation which i'll put in either archaius-curator/ or archaius-zookeeper/ -- what's your vote?\n. check out my fluxcapacitor project:\nhttps://github.com/cfregly/fluxcapacitor\ni wrote archaius-zookeeper specifically for this project.\nlemme know how it goes!\n-chris\nOn Thu, May 30, 2013 at 1:06 PM, grayaii notifications@github.com wrote:\n\nBTW, are there any documentation or examples for using archaius to watch a\nzookeeper node? I'm just getting my feet wet with both archaius (BTW, great\nexamples! I was able to get up and running in no time) and zookeeper (I got\nzookeeper server up and running with a few nodes too), but now I want to\nhave my app detect changes when a specific node in zookeeper changes and\nthis \"archaius-zookeeper\" seems like the right tool for the job.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/45#issuecomment-18704691\n.\n. just added the following wiki info to help you out:\nhttps://github.com/cfregly/fluxcapacitor/wiki/ZooKeeper-Configuration\n\ni'll add javadocs to archaius-zookeeper in the next day or so.  i wanted to\nunblock you sooner than later.\nshoot me an email if you need more assistance:  chris@fregly.com\nthanks!\n-chris\nOn Thu, May 30, 2013 at 1:47 PM, Chris Fregly chris@fregly.com wrote:\n\ncheck out my fluxcapacitor project:\nhttps://github.com/cfregly/fluxcapacitor\ni wrote archaius-zookeeper specifically for this project.\nlemme know how it goes!\n-chris\nOn Thu, May 30, 2013 at 1:06 PM, grayaii notifications@github.com wrote:\n\nBTW, are there any documentation or examples for using archaius to watch\na zookeeper node? I'm just getting my feet wet with both archaius (BTW,\ngreat examples! I was able to get up and running in no time) and zookeeper\n(I got zookeeper server up and running with a few nodes too), but now I\nwant to have my app detect changes when a specific node in zookeeper\nchanges and this \"archaius-zookeeper\" seems like the right tool for the job.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/45#issuecomment-18704691\n.\n. i've also updated the wiki here:  https://github.com/Netflix/archaius/wiki/ZooKeeper-Dynamic-Configuration\n\n\nincluding a link back to Flux Capacitor.\n. exactly.  the same with getZkProperty(String key) and\ndeleteZkProperty(String key).\nthey're package-visible for testing - which is their only purpose at this\npoint.\nthe idea is that the properties would be updated externally - through\nExhibitor, the ZK CLI, etc.\nnot opposed to making these more visible if needed.  just trying to stay\nlean.\nOn Thu, Sep 5, 2013 at 2:45 PM, ssriniva123 notifications@github.comwrote:\n\nHi Chris,\nAny particular reason for not exposing the synchronized void\nsetZkProperty(String key, String value) throws Exception method from\nZooKeeperConfigurationSource. Do you want to just treat it as a source and\nnot\nbe able to update znodes?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/45#issuecomment-23904210\n.\n. ah, gotcha. \n\nyeah - i figured gradle was running each test in a diff JVM as I just ran the archaius-core tests under maven (using the gradle-generated poms/pom-default.xml) and they're failing in the same way as my tests.  Here are the failures:\ntestInstall(com.netflix.config.ConfigurationManagerTest): A non-default configuration is already installed\n  testSwitchingToConfiguration(com.netflix.config.DynamicFileConfigurationTest): ConfigurationManager is already initialized with configuration com.netflix.config.ConcurrentCompositeConfiguration@34f50caf\n  com.netflix.config.DynamicPropertyTest: ConfigurationManager is already initialized with configuration com.netflix.config.ConcurrentCompositeConfiguration@34f50caf\n  testCreateProperty(com.netflix.config.InitWithNullConfigTest): ConfigurationManager is already initialized with configuration com.netflix.config.ConcurrentCompositeConfiguration@34f50caf\n  testIncrementalPollingSource(com.netflix.config.PollingSourceTest): ConfigurationManager is already initialized with configuration com.netflix.config.ConcurrentCompositeConfiguration@34f50caf\n  testSimpleInMemoryJDBCDynamicPropertySource(com.netflix.config.sources.JDBCConfigurationSourceTest): ConfigurationManager is already initialized with configuration com.netflix.config.ConcurrentCompositeConfiguration@34f50caf\nunfortunately, we're using maven (along with a lot of others, i'd imagine) and it seems that maven runs the tests in the same JVM.  it looks like we can specify -DforkMode=always on the mvn command.  i re-ran the tests with this flag just now and the errors go away. \ni still this it's reasonable to propose an @VisibleForTesting method to clear the source between same-JVM test runs.  while we've discovered a workaround, this seems to be a relatively-heavy limitation on the testability of classes using DynamicPropertyFactory.\nwhat do you think, allen?\n. good call, greg.  \ni added the following to my pom.xml (removed my local -DforkMode=always) and my tests are now passing:\nhttp://stackoverflow.com/questions/3506391/maven-surefire-plugin-and-forked-mode\n. closing this as running each test in a separate VM is a suitable workaround.\n. allen-\nany thought to this?  i started down this path first by extending PropertyWrapper, etc, but ran into a few road blocks.\nis this something that has been previously discussed?\nlemme know.\n-chris\n. we worked around this.  closing.\n. gotcha.  i will close this and adjust accordingly.\n. +1\nthis looks to be related to the following issue i created a couple months ago related to junit tests that run in the same VM:  https://github.com/Netflix/archaius/issues/46\n. @docbobo:  thanks for the patch.  i haven't been watching this too closely, but as a current user of the DynamoDB config source, are there any backward-compatibility concerns?  if so, perhaps a repair-on-read migration strategy should be enabled and documented.\nalso, do you have any tests that cover this functionality?  or do the existing tests cover everything?\nthanks again!\n-chris\n. @gorzell -  i was similarly-confused by this change in priority.  here's the discussion from a few months ago:  https://github.com/Netflix/archaius/issues/62\nthe priorities seem to have changed with the first release after archaius-0.5.3.  fwiw - the new priorities seem contrary to my understanding from when you and i were back at Netflix. \n. and while we're on the topic, it's worth a quick reminder from a few months\nago about unit tests in this particular area of the archaius codebase:\nhttps://github.com/Netflix/archaius/issues/46\nOn Tue, Jun 25, 2013 at 11:12 AM, allenxwang notifications@github.comwrote:\n\nI think the confusion is whether config.properties belong to application\nproperties. The intention is NO. config.properties belong to dynamic URL\nconfig. The use case is that the this file can be edited and reloaded every\n30 seconds, while the application properties are loaded only once at the\nbeginning of ConfigurationManager initialization. The application\nproperties configuration is empty unless you call the appropriate\nConfigurationManager API to load properties into it.\nContainer properties which are set by application code also have lower\npriority than system properties as they are treated as \"base line\".\nLet me know if any junit test is wrong.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/pull/115#issuecomment-19995840\n.\n. hey Chris-\n\ngood question.  this is a tricky part of the archaius package.  I've spent quite a bit of time stabilizing - and re-stabilizing - this piece of functionality after i break it during refactorings.\nhere's code from my fluxcapacitor project that shows the DynamicPropertyFactory.ENABLE_JMX system property that needs to be set very early on in the archaius initialization:  https://github.com/cfregly/fluxcapacitor/blob/master/flux-core/src/main/java/com/fluxcapacitor/core/server/FluxApplication.java (line 54).\nthe problem is that if you access DynamicPropertyFactory.getInstance() before this system property is set (as appears to be the case in your IntelliJ project), the ENABLE_JMX property defaults to false and config properties will not be exported to JMX.\nlemme know if that fixes the issue.\nthanks!\n-chris\nOn Jul 28, 2013, at 12:51 PM, chriswhitcombe notifications@github.com wrote:\n\nI wanted to setup Archaius with JMX enabled by default for controlling the configuration, though my config.properties appears to be loading correctly and the values appear set there is no MBean registered and visible with JConsole.\nI have setup an example IntelliJ project for testing this, the logs are in the readme showing its definitely picking up the correct values. That's over here:\nhttps://github.com/chriswhitcombe/ArchaiusTest\nI can programmatically register an MBean and that works ok, its just the defaulting it on that doesn't work.\n\u2014\nReply to this email directly or view it on GitHub.\n. oh, and as I mentioned, you need to be careful that you don't introduce any other references to DynamicPropertyFactory.getInstance() before that property is set - specifically from other Netflix OSS packages that use archaius heavily.  this was the cause of a lot of my post-refactoring re-stabilizations that I mentioned earlier.  references to DynamicPropertyFactory.getInstance( kept creeping up sooner than I could set it in my FluxCapacitor init.\n\nthe safest thing to do is set a system property through your startup script as follows:\n-Darchaius.dynamicPropertyFactory.registerConfigWithJMX=true\nhope that helps.\n-Chris\n. looks good.\n. ",
    "grayaii": "BTW, are there any documentation or examples for using archaius to watch a zookeeper node?  I'm just getting my feet wet with both archaius (BTW, great examples! I was able to get up and running in no time) and zookeeper (I got zookeeper server up and running with a few nodes too), but now I want to have my app detect changes when a specific node in zookeeper changes and this \"archaius-zookeeper\" seems like the right tool for the job.\n. Thanks Chris!!!!  I'll check out that project!\n. ",
    "ssriniva123": "Hi Chris,\nAny particular reason for not exposing the synchronized void setZkProperty(String key, String value) throws Exception  method from ZooKeeperConfigurationSource.  Do you want to just treat it as a source and not \nbe able to update znodes?\n. Yes, Makes sense. Thanks\n. ",
    "nbauernfeind": "Is this really a suitable workaround? Gee, I'd appreciate simple access to a method such as DynamicProperty.updateAllProperties(). Why is it private? Running every test in a separate JVM is extremely expensive; no matter the build tool.\n. ",
    "jpcaruana": "updated link to javadoc: http://google.github.io/guice/api-docs/3.0/javadoc/com/google/inject/name/Names.html\n. thanks for the insight @howardyuan \nin fact I use archaius via hystrix, not directly (for now)\n. ",
    "opuneet": "Yes, this looks good and thanks for splitting the unit test into a separate file. \n. ",
    "jafl": "132 doesn't sound like a UI\n. ",
    "bibhu-biswal": "is this feature completed\n. ",
    "howardyuan": "Currently, there's no timeline to outsource this property service. We'll update the issue when we do.\n. Closing this for now since there has been no traction on this.\n. Closing the issue for now since there has been no traction on this for a while now.\n. Closing this for now since there has been traction on it.\n. Closing this for now since there's no activity for a while now.\n. Closing the issue for now since there has been no activity since.\n. I was poking around this topic some time back. What I wanted to do is to introduce a new interface \"re-install\" which pretty much blows away the existing config and add the new config. This way we maintain the compatibility and provide way to to re-configure. I'll see if I can find some time to get this going.\n. Closing the issue for now since there has been no activity since.\n. Closing this issue for now since we don't use archaius-zookeeper here internally at Netflix. If somebody else reports the issue or submits a fix, we'll update the issue.\n. I'll file a pull request and fix this issue.\n. Closing this issue for now since we haven't seen any traction on the need. \n. @abhimaloo In your case, those multiple property files contain the same properties or some files provide override properties over other files? Either way, I believe you can provide multiple cascaded configurations through ConfigurationManager.loadCascadedPropertiesFromResources and/or ConfigurationManager.loadAppOverrideProperties.\nAs you already pointed out, as of current implementation, polled sources don't support cascading so cascaded resources won't change after load.\nIf you want to combine cascading with polling, you can look at comments above and I think that provides some leads into a possible solution. I'll look around more. I'll update the thread if I can find more.\n. In Netflix, the URLConfigurationSource is another REST endpoint. So adding cascading obviously doesn't make sense here. It has been pretty quiet on this thread over the years.\n. First, just want to confirm that you'r not using any DynamicProperty types? Instead, you use configuration.getProperty or configuration.getString to get the property values? DynamicProperty actually will join the list of Strings back together into a single string property even if the delimiter parsing is set to true. But if you use  DynamicURLConfiguration directly, the default behavior is splitting based on the comma delimiter.\nSecond, I think your idea of separating loading and instance creation is probably the right one in this use case. But there were some issues initially that led to loading in the constructor (Nobody can recall the issues since this was sometime ago). Now since the implementation is already in place, we can't really modify existing constructors.\nOne option is to add a new Constructor to take a flag to decide if to disable delimiter parsing or not. However, there're quite a few flavors of constructors in the inheritance chain. Adding a flag to each one of them seems to be a bit messy.\nI can open a pull request to add a system property to indicate if delimiter parsing is to be disabled. Then in base class Constructor, I can set the delimiterParsingDisabled flag on a per configuration instance level without having to call the static function in AbstractConfiguration. At least this will give you a chance to load correctly the first time. You can always reset the delimiterParsingDisabled flag once you have the configuration instance for future loads.\n. Closing the issue for now for better book keeping. Let me know if you have any other questions.\n. I'll look into Typesafe Config more. If you have ideas on how to do this already, please feel free to file a pull request and we can go from there.\n. @Pablo, first I agree that it's the right thing to separate common behaviors like the listeners things. In fact, there's a long standing feature request to totally decouple with AbstractConfigurations. However, this will take some time, but I think we should get on it sooner than later.\nFor incorporating Typesafe Config in, the right thing to do is the refactor Archaius first to decouple with AbstractConfigurations, then any configuration system like Typesafe can be plugged in the Archaius framework seamlessly.\nLet's use supporting Typesafe as the catalyst to move into that direction.\nIMO, Archaius's core features are two fold, one is Dynamic property support -- Changes can be captured and propagated near real time. The second one is the configuration hierarchy -- There're layers of configurations for the same or different properties with clear priorities among the layers. This provides essential and efficient override support. However, the configuration itself in Archaius is actually pretty straightforward. It's mostly a map of properties.\nUsing the understanding above as my guide, I went through Archaius and can think of one approach to incorporate a new config system like Typesafe.\n1. Utilize DynamicPropertySupport to provide Dynamic Property support. Look at ConfigurationBackedDynamicPropertySupportImpl. We can include a TypesafeConfiguration object as part of a TypesafeDynamicPropertySupportImpl and override getString() to incorporate Tyepsafe's type safety features. We also need to add a member to Dynamic Property Support to retrieve the config source. This can be used when polling the sources.\n2. Implement a new PolledConfigurationSource using Typesafe's support for multiple data formats. Look at DynamoDbConfigurationSource or URLConfigurationSource as some examples.\n3. Use DynamicPropertyFactory to initWithConfigurationSource with the newly implemented TypesafeDynamicPropertySupportImpl to put the Typesafe config into the config hierachy.\n4. Start a scheduler to tie together the Typesafe polling source and the Typesafe configuration and start polling for changes in sources.\nThis completes the cycle and should enhance Archaius with new configuration systems. I think this should work. Only thing I don't like is it's a bit tedious and not straightforward. Takes too much knowledge to add a config system. But we can start with this and improve along the way.\nI'll keep looking into this and thinking about a better solution. You can also look at it and let us know what you think.\n. @fernandezpablo85 . Pablo, I created a GG https://groups.google.com/forum/#!forum/achaius-users or achaius-users@googlegroups.com so we can have discussion threads going. Other people can also chime in.\nWhy don't we start off with that? Please let us know your issues around so far and we can go from there.\n. I'm waiting for CR for the pull request. Would you be able to help?\nOn Thu, Jun 5, 2014 at 12:36 AM, nightwolfzor notifications@github.com\nwrote:\n\n+1 we'd love to see this as we use a lot of the Typesafe ecosystem\nWhat was the conclusion of this? I notice @mnadel\nhttps://github.com/mnadel has an open pull request #180\nhttps://github.com/Netflix/archaius/pull/180\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/issues/148#issuecomment-45189371.\n. Code Review. I was hoping somebody who is familiar with Typesafe can help\nwith code review.\n\nOn Sun, Jun 8, 2014 at 2:19 PM, Michael Nadel notifications@github.com\nwrote:\n\nCR?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/issues/148#issuecomment-45448908.\n. @analytically Have you reviewed the Pull request and gives it a thumbs up?\n. Thanks @analytically @mnadel ! Archaius part was good already. So I'm ready to merge it. Seems like we need a merge first. Let me see if I can find some time to do that today.\n. @fernandezpablo85 The PR was merged way back? You didn't see it?\n. @tnine Can you give us more context on your use cases?\n\nDynamic properties are intended to represent configuration backed properties. You can view them as some kind of proxies to the underneath configuration hierarchy. The property value change is not only seen by your current process, but also by all other (local or remote) processes who create properties backed by the same configuration based property. A setter in property itself is going to be problematic on many fronts.\nThat being said. Setting new values for properties is also a one-liner. But you set the value through the underneath Configuration. For your case, I believe you can just use\nConfigurationManager.getConfigInstance().setProperty(\"test\", \"2\");\nNow all DynamicIntProperties that are based on the name \"test\" would see the new value 2. \nIf this doesn't solve your problem, please let us know your use cases so we can brain storm together.\n. Now I see your context. Indeed, the current design requires a workaround as you presented. We'll think about a better solution to accommodate use cases like yours, but in the meantime trying not to introduce other side effects. \nIf you can think of good ideas, please feel free to chime in and we together make Archaius better.\n. Todd, one of the fundamental issues is that Dynamic properties are meant to work as singletons. We can't even construct property instances. Even if we can provide setter to change the values, for the same property names, other tests will see the same changes. As of now, I couldn't think of a straightforward solution.\nIf you look at DynamicPropertyWrapper, it's probably the only thing thats' half way between a singleton and object instance. The underlying property itself is still a singleton, only the default value is per instance value.\nIf you're only interested in changing the value locally so when you get, you can get the local values first, then we can work with wrappers to store a local copy. However, I assume that you want to trigger configuration listener and call backs when property values change? But once those listener chains are triggered, the singleton instance is also changed. I'll keep thinking about it. Let me know if I miss something here. \n. Todd, first I think what you said makes sense. As long as DP is singleton based, our hands are tied. To change DP to instance based maybe involved though. I, for one, need to dive deeper and understand history and rationales behind the singleton design first. I'll keep everybody posted on what I learn. It may take some time.\n. Closing this issue for now since Archaius V2 should solve the static nature of DP of Archaius V1\n. @Castaglia , TJ, can you get Greg O. to quickly review your pull request so I can merge it in?\n. @gorzell , please do.\n. @yaojiang You're correct. The User Guide is outdated. That method had been renamed to getStringProperty(...). Can you give that a try? In the meantime, I'll update the Wiki to reflect the change.\n. getStringProperty() actually will create one for you if one doesn't exist yet. It's the same functionality as createStringProperty(), just different name. I'm a bit puzzled by the name now as well. There must be some reason behind the name change. I just updated the wiki to reflect the change.\n. I'm not quite sure about what you mean by redis.host = 1111 line, but if you want a code snippet, I just updated User 's guide for this.\nDynamicStringProperty myprop = DynamicPropertyFactory.getInstance().getStringProperty(...);\n. Every time you call getStringProperty, there is a new instance of DynamicStringProperty created for you with the default value as you specified. Here's a unit test I just wrote to reflect this,\nDynamicPropertyFactory dpf = DynamicPropertyFactory.getInstance();\n    DynamicStringProperty dp = dpf.getStringProperty(\"redis.TEST\",\"OKAY\");\n    System.out.println(dpf.getStringProperty(\"redis.TEST\", \"default\").get()); --> prints \"default\" since you just created a new DynamicStringProperty.\n    System.out.println(dp.get()); --> prints \"OKAY\".\nIn essence, DynamicStringProperty is an instance of DynamicProperty wrapper with a default value that you specify. The underlying DynamicProperty itself is a singleton that's tied to your configurations chain. HTH. \n. You're correct in that one scheduler is paired with only one particular source. The purpose of checkpoint is actually to tell the polling source what the client sees from it at the moment. So if polling source chooses to only send delta back, it can do so. So far, no polling source has utilized the check point yet. The relationship between schedulers and sources is a one to one or many to one relationship. Many schedulers can talk to one source, but not the other way around.\n. @siggimoo Correct. You need to have a separate instance of scheduler for each source. For the code part, you can have the same scheduler code but multiple instances. For the Tomcat logging issue, would it be still an issue even if you have one instance except that for multiple instances, you get even more annoyed? Do you have any suggestions on how we should improve on this?\n. Closing this issue for now since we're focusing on Archaius V2 now.\n. @seppyk re-install a configuration should be feasible. Current code base already has sort of supported installing a new customer config. Right now, it just allows for one time installation as you pointed out. But mechanism of installing a new configuration is already there. I'll probably keep the current \"install\" behavior the same and introduce a re-install interface to explicitly telling Archaius to expect new custom configuration.\n. @chandrapersonal Can you clarify your problem? Are you saying that your etcd source is no longer available and you want to use a different source? If so, I think you should be able to create a new polling source instead of re-install the configuration manager as the #113 issue was referring to.\n. @jeffreymyers Thanks for contributing!\n. LGTU. Thanks again for contributing!\n. @gorzell , i updated the pull request with a new inner class LongProperty.\n. @utk4rsh One thing that's hard to change for Archaius V1 is its static nature. I took a stab at trying to make properties GC'able but didn't succeed. I haven't looked at this since. It's one of the primary motivations for us to come up with Archaius V2.\nThat being said, I suspect there maybe some ways that you can improve your usage of properties so you don't exhaust heap. The static nature of properties has been there since beginning and I don't hear people exhaust heap because of it. One thing I can think of is that you create a new DynamicProperty every time. Even though the underneath is still static, there is a wrapper object being created and that will not be GC'ed. A better practice is to go through DynamicPropertyFactory and get the property by name. That way, you can be sure there's one object created per property. Unless you've millions of properties, you won't run into memory issue. Give it a try and let us know how it goes.\n. Moving to WeakReference is premature. Will close this issue for now and regroup later.\n. @krieb Do you mind opening a PR? Appreciate it.\n. @stujapa, I was hoping to wait for some other changes to go with your\nchanges. Let me see where the other changes are at.\nOn Thu, May 29, 2014 at 10:16 AM, Greg Orzell notifications@github.com\nwrote:\n\nI have no release powers.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-44557845.\n. Seems like there aren't any changes coming in. Yes, I'll go ahead release\none next day or two.\n\nOn Tue, Jun 3, 2014 at 3:09 PM, stujapa notifications@github.com wrote:\n\n@howardyuan https://github.com/howardyuan, as there have been no other\nchanges in a couple months and we have been patiently waiting for this,\ncould you please release this? Thanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45027157.\n. @stujapa, @gorzell. Turns out our OSS build process has issues with Gradle\n1.11. But Greg checked into the changes that pins Gradle to 2.11. Is that\nrequired for your changes?\n\nOn Tue, Jun 3, 2014 at 5:37 PM, Howard Yuan yuan.howard@gmail.com wrote:\n\nSeems like there aren't any changes coming in. Yes, I'll go ahead release\none next day or two.\nOn Tue, Jun 3, 2014 at 3:09 PM, stujapa notifications@github.com wrote:\n\n@howardyuan https://github.com/howardyuan, as there have been no other\nchanges in a couple months and we have been patiently waiting for this,\ncould you please release this? Thanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45027157.\n. I guess I would have to do that for now until the OSS build is fixed (ETA\nis end of this month).\n\n\nOn Mon, Jun 9, 2014 at 9:58 AM, Greg Orzell notifications@github.com\nwrote:\n\nI am pretty sure I was just trying to get caught up to a somewhat current\nversion. If you need to go back that is probably fine.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45515035.\n. I'll give a try for 1.7. If not working, I will pin to 1.6. Hopefully,\nit'll do with your changes. Actually, I would be concerned if Archaius\nrequires a certain Gradle version to work. That means our dependency is\ngetting too complex :)\n\nOn Mon, Jun 9, 2014 at 1:20 PM, stujapa notifications@github.com wrote:\n\n@gorzell https://github.com/gorzell @howardyuan\nhttps://github.com/howardyuan we've had good stability with gradle 1.7\nas a stepping stone to later versions including 1.11. Can that version be\npinned so as to get a release out? Failing that, with the OSS work coming\nsoon I don't think temporarily reverting to 1.1 would undermine forward\nprogress all that much.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45538965.\n. @gorzell, @stujapa, I'm stuck now. When I move back to 1.7, Github build is\ngood, but OSS release still fails with the same error as 1.11. So I try to\nmove back further to 1.6, this time, Github fails with archaius-scala test\nerror. Do you know why Gradle version matters here in our Archaius build?\n\nOn Mon, Jun 9, 2014 at 2:21 PM, Howard Yuan yuan.howard@gmail.com wrote:\n\nI'll give a try for 1.7. If not working, I will pin to 1.6. Hopefully,\nit'll do with your changes. Actually, I would be concerned if Archaius\nrequires a certain Gradle version to work. That means our dependency is\ngetting too complex :)\nOn Mon, Jun 9, 2014 at 1:20 PM, stujapa notifications@github.com wrote:\n\n@gorzell https://github.com/gorzell @howardyuan\nhttps://github.com/howardyuan we've had good stability with gradle 1.7\nas a stepping stone to later versions including 1.11. Can that version be\npinned so as to get a release out? Failing that, with the OSS work coming\nsoon I don't think temporarily reverting to 1.1 would undermine forward\nprogress all that much.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45538965.\n. I can do a local build with gradle-1.6.-all.zip, but not\ngradle-1.6-bin.zip. However, Github pull request builds all fail even\nthough with different errors. If you can help narrow down the Github build,\nthat'll be nice. Once I move back to 1.7, problems go away.\n\n\nOn Mon, Jun 9, 2014 at 5:41 PM, Greg Orzell notifications@github.com\nwrote:\n\nI can build locally with gradle 1.6, so I am not sure what the issue is.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45561970.\n. All we need to test is our Jenkins Archaius build can succeed. Now it's\nfailing on SSL connection.\n\nOn Tue, Jun 10, 2014 at 12:41 AM, Justin Ryan notifications@github.com\nwrote:\n\nNext week I should have a Gradle 1.12 (with patches for Scala) based build\nfor NetflixOSS. What specifically should I test to know if it's working\nfor\nyou?\nOn Mon, Jun 9, 2014 at 9:21 PM, Howard Yuan notifications@github.com\nwrote:\n\nI can do a local build with gradle-1.6.-all.zip, but not\ngradle-1.6-bin.zip. However, Github pull request builds all fail even\nthough with different errors. If you can help narrow down the Github\nbuild,\nthat'll be nice. Once I move back to 1.7, problems go away.\nOn Mon, Jun 9, 2014 at 5:41 PM, Greg Orzell notifications@github.com\nwrote:\n\nI can build locally with gradle 1.6, so I am not sure what the issue\nis.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45561970.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45572384.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/177#issuecomment-45582880.\n. @abhimaloo In your case, those multiple property files contain the same properties or some files provide override properties over other files? Either way, I believe you can provide multiple cascaded configurations through ConfigurationManager.loadCascadedPropertiesFromResources and/or ConfigurationManager.loadAppOverrideProperties.\n\nAs you already pointed out, as of current implementation, polled sources don't support cascading so cascaded resources won't change after load.\nIf you want to combine cascading with polling, you can look at comments above and I think that provides some leads into a possible solution. I'll look around more. I'll update the thread if I can find more.\n. If those config files are compiled into the jar, you don't have to worry about polling. Do you mind posting your config.properties and config-dev.properties so I can play with them?\n. Also, if you look at our unit test, you maybe able to figure out yourself. The test is CascadedPropertiesWithDeploymentContextTest.\n. I think I know what what the problem is. By default, Archaius is using the polling for the default config.properties instead of ConfigurationManager.loadCascadedPropertiesFromResources. Polling won't do cascading. It won't even look at @next inside config.properties.\nLet me go through the Wiki document and see if it indeed is misleading and needs an update. In the meantime, please use ConfigurationManager.loadCascadedPropertiesFromResources to load the config files explicitly. That should take care of your problem. \n. I added a note in Dynamic Context section of Users Guide. Let me know if it needs further clarification.\n. @Crystark Thanks for letting us know your findings. I haven't got a chance to verify my thoughts, but here's what I think. By default, Archaius treats config.properties as a dynamic source. That means the same property (key1, key2, key3) in the config.properties will take the precedence over the test.properties you loaded through loadCascadedPropertiesFromResources call. Those are static configurations which are lower in hierarchy. So rule of thumb is that if you define the same property in multiple places, be aware of the hierarchy and precedence rule. Let me know if you think there's a better way to document this and make it clearer to users. \n. LGTM\n. @mnadel First of all, thanks for contributing. Your solution looks neat even though I don't know too much about TypeSafeConfig. From your test cases, I think it works.\nA couple of comments.\n1. Can you send email to the Archaius GG as well so other people who are more familiar with TypeSafeConfig can take a look at the PR as well? I may leave the PR open for a little longer to solicit more comments.\n2. Can you move the Typesafe Config polling source into a different module? A quick reference is archaius-jclouds. This way we have one less dependency in Archaius-core module. It also paves the way for future integration with TypeSafeConfig. \n. @mnadel Since I'm in the middle of some Archaius work in my local repository, it probably take me a bit of time if I want to re-submit your PR. Do you happen to have some time merge it with latest and resubmit the PR? I think the merge should be clean. Let me know.\n. @mnadel Thanks for the contribution! I'll release it in the next couple of days.\n. I'm more at ease with removing Guava and Jackson. It's all matter of internal implementation. I worry more about removing commons-configuration since that might break certain existing usage of Archaius. I know that we (Netflix) also depend on certain things provided by commons-configuration (don't remember what on top of my head). Nonetheless, it's doable. I'll look the issue as well. \n. What I plan to do is breaking up the task into two parts\n1. Part with Guava and Jackson.\n2. Pull out any commons-configuration dependancies into a different module so people who depend on it can resort to it while keeping the archaius-core lean.\nThis might take some time given my current schedule. I'll try to come up with road map first and stick with it. \n. @elandau has put in a lot of thoughts in Archaius V2.0. I'm looping him in so he can share his thoughts. I know that he's planning to write down some doc soon.\n. I believe this is not an Archaius bug. If you don't disable list delimiter parsing, the default Apache Commons delimiter is ','. So when you config is loaded, your property value is actually converted into a list. The leading/trailing spaces for each value are trimmed. At that point, we'll lose the spaces info. When you ask for a String property value back, Archaius will concatenate the list back into a single string, but since the spaces are lost already, you'll not get it back. \nIf the space info is essential, you can disable the list delimiter parsing.\n. @michaeltandy This Pull request LGTM. I'll go ahead and merge. Right now, I'll trying the fix Archaius's Netflix OSS build. Once that's done, I'll release your contribution along with other Scala module changes.\nThanks for the contributions!\n. @vanithadevig Thanks for the contribution! Can you provide Unit test for this? Now we know there's no regression, but it's always better that we have a test to verify the new behavior is not broken down the road.\n. @vanithadevig I think this is on the right track. So I want to clarify a few things here. 1. This fix is not about the original issue you had which is Archaius removed the spaces inside a property? Instead, it's about the configuration update is called every time the dynamic updater is called? 2. If so, I don't see your unit tests checking to see if the updates are being done or not? Instead, I just see you're verifying the properties are there or not which is different from the property update is being done or not. For that, you probably need to register a listener to the property and in tests make sure the listener is not triggered whenever the dynamicpropertyupdater is called. 3. Archaius's DynamicListProperty will trim results (remove leading and trailing spaces) for List properties. I think it makes sense. After you verify that Archaius is indeed calling the updates for the delimited string properties even though the values don't change, you may want to add the trim when constructing new value array. Again, really appreciate the contribution.\n. The URI sometimes can be tricky. If you couldn't figure it out, I'm ok with using the getConfigUrls() which includes the test.properties that you specifies in init() function.\n. @vanithadevig the PR build seems still failing.\n. @vanithadevig Thanks for heads up. I now have to temporarily comment jclouds module until the dependency issues are resolved. Can you pull latest and merge with your branch so a new build for your PR will be kicked off again?\n. I'll try to wait till jclouds situation is resolved before I release one.\n. Seems like there's no progress on the jclouds front, I'll release one\nwithout jclouds still then.\nOn Fri, Aug 15, 2014 at 4:13 PM, Jason Musgrave notifications@github.com\nwrote:\n\nI'd love to see a release with this bug fix.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/191#issuecomment-52372338.\n. @vanithadevig Archaius 0.6.2 has just been released. Thanks again for the contributions!\n. Hmm, don't know why this is closed. Reopen it. \n. Closing the issue for now since there has been no traction.\n. When you say zookeeper, do you mean Archaius's Zookeeper module? The cascading of property files are only supported through local config files, anything Archaius gets through polling resource doesn't support cascading. Feel free to contribute and provide a pull request so Archaius community can benefit from it.\n. Closing the issue for now since there's been no traction.\n. @jbaiera Thanks for the detailed descriptions. Hopefully, this will help other people down the road. Actually, this is Apache Commons AbstractConfiguration behavior. For AbstractConfiguration, if you do getProperty(), you will get the un-interpolated raw string value back. If you want to interpolation, you need to call getString(). Your test program just verifies that behavior. Archaius as of now builds on top of Apache Commons Configuration, therefore, it inherits the same behavior.\n. @jbaiera I agree with your findings here. 1. It's confusing that initialization does the interpolation but later updates don't. The reason is as you pointed out, the initialization goes through a different path than updates later. 2. I think the reason is that in static configuration world, interpolation is a common use case, however, in Dynamic property world, interpolation is not. Since Dynamic properties are built on both static configuration and dynamic properties layers, there's this intrinsic difference. At this point, I prefer not to change the code. Instead, I prefer to add proper Javadoc and Wiki documents to describe the built-in discrepancy and set expectations straight. Please feel free to submit pull requests to update/add documentation as you see fit.\n. @jbaiera I think you raised a valid point about the inconsistency regarding interpolation. Root cause is that Dynamic property is a facade to the underneath layers. So a Dynamic property can just have configuration based property, no dynamic source at all. For those properties, interpolation is expected and also your suggested changes won't make a difference. For those properties that have both configuration and dynamic layers, there's this inconsistency. Since we can't really turn off interpolation for configuration based properties, we thought about adding interpolation for dynamic properties. Problem with that are two folds, one is the cost of doing it. For every update, we need to reevaluate every property to see if the property itself or its interpolated parts have updated or not. For a large system with tens of thousands of properties and frequent update rate, this cost is pretty heavy. There's another more hidden but also more dangerous side effect. Your change not only can affect your immediate property, but also those properties that interpolate your property. It's hard to track and operate. I'd like to hear from you and community on how we should cleanly solve the problem. In the meantime, your understanding on what and when to use is correct. If your properties are static and don't change, you can safely use interpolation by putting them in some static configurations. If you expect to change the property at run time, you shouldn't rely on interpolation. So far, except you, I haven't heard anyone raised this issue. So I guess it satisfies most use cases. \n. Closing this for now since there's been no traction for a while now.\n. @Castaglia If you already look into this, feel free to submit a PR for this. I'll look at this as well.\n. I'll try to do it within next two days. Thanks for contribution! \n. I'm running into some issues downloading aws-jdk-1.9.0 into our local OOS repo. Will take some more time for me to figure out what goes wrong here.\n. The problem I'm having now is the .pom file seems to be missing a lot of things and that's breaking our process. \n. Archaius 0.6.3 was released last week. Since Netflix ecosystem already has aws-jdk 1.9.3, we pinned the archaius-aws module to 1.9.3 instead of 1.9.0. Hope that's fine with you.\n. Let me know if you think this is ready for release.\n. @brharrington Thanks for noticing this issue. This was added recently and I didn't catch it while reviewing the PR. The test is adding to file every time the test runs. @vanithadevig, let's look at this together and see what we can do to fix this.\n. So if I understand you right, you're expecting the app.properties and app-dev.properties to override db properties because they're loaded later? If so, then that behavior is not guaranteed since all those property files belong to the same tier. The loading sequence wouldn't necessarily result in the corresponding overriding sequence.\n. I believe this will do what you want, loadAppOverrideProperties(\"app.properties\"). Let me know if it works.\n. The code paths for the initial load and update are indeed different. We're trying to focus on Archaius V2 now which will be different in initial load. Closing this issue for now since most likely we won't fix the Archaius V1 for this.\n. @nightwolfzor That seems an interesting idea. As long as we keep the dependencies in a separate module, I don't see any particular problems of introducing another data source here. People can chose which modules to include in there projects. Please feel free to submit a PR for this.\n. The release process didn't go through. Looking into recovery steps now.\n. The best way to recover is to release again. The only problem is we lost 0.6.4 along the way. Please use 0.6.5 instead.\n. Do you mind providing a PR for this?\n. Do you mind providing a PR to change the closeQuietly to close(closeable, true)? Netflix internally is still using 14.0 or 15.0 so this hasn't bitten us yet.\n. Thanks for the contribution!\n. For now, we don't have immediate plan to implement push. We'll re-visit this when we see more needs for it.\n. @jpcaruana We'll look into upgrading commons-configuration. In the meantime, Achaius 2.0 is trying to be totally independent of common-configuration. Please check it out if you're interested in a much lighter Archaius.\n. There're two pull-requests builds. One of them was not configured with\nproper Gradle opts so it runs out Permgen. I'll see how to either disable\nthe second one or add proper GRADLE_OPTS.\n\nOn Thu, Jun 11, 2015 at 6:02 PM, Eric Schoonover notifications@github.com\nwrote:\n\nBuild failed because of a JVM error... or maybe a bunch of failing unit\ntests unrelated to the Etcd module.\nUnless I am missing something.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Netflix/archaius/pull/318#issuecomment-111318271.\n. Looks good to me. Will leave the PR open for a few days to see if anybody else have any more comments.\n. LGTM\n. Issue fixed and PR merged.\n. So this issue is caused by the design decision of setting the property update time stamp at the Get time instead of Set time. At Get time, it'll check to see the cache version is updated or not. If so, then change the property update time stamp. I think this is wrong, but still am looking into the proper fix.\n. Since Archaius2 advocates immutable configurations, setProperty is not supported at CompositeConfig level. Thus, update timestamp is an out of place attribute. For this issue, the proper fix would be to remove the access to the update timestamp since it's misleading.\n. Will keep an eye on this to see if there's a need to add update time at SettableConfig level.\n. PR has been merged.\n. The set delimiter should be limited to the scoped to each config implementation instead of Composite Config level.\n. PR has been merged.\n. @brharrington This is for the feature parity of Archaius1 and Archaius2. Archaius 1 inherited from Apache Commons the behavior of treating the string property as list internally. So the list delimiting comes with the core package in Archaius1. \n. @brharrington Thanks for the heads up on the issue of getList. I believe the issue lies in the way of Archaius1 stores the property. It implicitly split up property into list and stores it as a list. Archaius2 only picks up the head. You can see this by just doing config.getString, we would get \"a\" instead of \"a,b\". I think this is a bigger issue than just getList. Whenever the property has listDelimiter in it, it will cause discrepancy between Archaius1 and Archaius2. I'll file an issue and fix it.\nLet's talk about API more. As I said before, this is mostly for parity between Archaius1 and Archaius2. To me, if we provide getList in core API, we need to provide a way to set delimiter as well. Also, if we only provide this method in each config impl, I couldn't think of a consistent and convenient way of doing this in CompositeConfig. I thought of providing a static setDelimiter method is AbstractConfig so we don't have to expose the API, but Archaius2 is avoiding static at all cost, so that's a no-go there. My 2c.\n. @brharrington Thanks again for raising the concerns. I think what we may end up doing is to get rid of the concrete implementations in CompositeConfig and delegate operations like getList etc. to its children in their order. This way, we don't have to expose awkward APIs like setListDelimiter in core config interface.\n. Addressed your comments. Let me know if you have any questions.\n. PR has been merged.\n. @gopircr Thanks for catching this one. I'm surprised that it's only brought up now. Let's think about best solution together. We really don't want to introduce any overhead to getValue(). At this point, I'm leaning toward in updateValue(), we don't flush and change isCached status. Instead, simply update the values for all the cachedValue objects. getValue() may get some old values if another thread is updating at the same time, but it's at least eventual consistent instead of returning null.\n. Fix should be available in next release.. Without the context and code, it's hard to know exactly what went wrong. What do you mean by \"polling the source for 5 to 6 times and suspending the thread\"?\n. I couldn't think of any reason why you will stop by itself? How do you know it did 30 to 35 times? How do know it stops polling? Is that your main thread exiting that's causing this?\n. I meant the polling thread stoping by itself.\n. So you put a break point in stop(), can you figure out the stack trace and who initiated the stop()? I think this is outside of Archaius, but you should be able to debug it and figure it out for sure.\n. LGTM\n. The change is already in place. The labels were added just for clarification purpose.\n. @spencergibb Sorry, I misread the issue and thought you're saying 0.6.5 has the issue. Let me follow up with other teams and see how we want to proceed with this since this same issue happens with other projects as well.\n. As of current Archaius2, the override through any resource can be achieved as following,\n\njava\n@Override\nprotected void configureArchaius() {\n    try {\n        bindApplicationConfigurationOverride().toInstance(\n           DefaultConfigLoader.builder().build().newLoader().load(\"application-override\"));\n    } catch (ConfigException e) {\n         throw new RuntimeException(e);\n    }\n}\n. LGTM\n. We're trying to move away from extending from commons configuration directly in Archaius V2. So probably we won't add support for commons configuration2 in Archaius V1. \n. You want to give it a try and submit a PR?\n. Code LGTM. @costimuraru Is this part of your efforts to support java.time.Duration?\n. Code logic seems straightforward. I'm not familiar with Dynamo configuration source, is there a way that you can add some test cases for this?\n. @matveym The discrepancy that you noted here is due to the difference between how properties are stored in a static configuration and dynamic poller based configuration. In the initial load phase (\"1, 2\" case), the properties are fed to abstract configuration and stored as a list of strings with the space stripped since they're delimited and the way of abstract configuration stores. When you retrieve the property as a single string, it's re-concatenated for you but without the space anymore. However, in the subsequent polling, the properties are treated as strings as is without even being splitted. I guess the rationale is that you control the poller logic and if you want consistent behaviors, you can implement poller logic to strip out spaces and re-concatenated. \n. Can you go through the Wiki pages first and hopefully you will have more targeted questions? Your current questions are too general. \n. @mebigfatguy I don't know much about the archaius-scala module. Is this a real issue?. DynamicURLConfiguration takes precedence over the setProperty() in configuration layers. However, if you really want to override DynamicURLConfiguration, you can use setOverrideProperty(). But remember if you want to be able to change configuration without pushing code, you don't want to override the DynamicURLConfiguration in your code.\n. ConfigurationManager.getConfigInstance().setProperty(key,value); only changes the property in local configuration. But REST service is not part of Archaius. I think you configure DynamicURLConfiguration to point to config.properties? And DynamicURLConfiguration takes precedence over setProperty(). That's why your config.properties always shows up. You can write a simple REST service to host your config.proeprties and point DynamicURLConfiguration to that REST service. That should give you what you want.\n. Are you asking if the property changes are updated through push or poll? Currently, it's through polling at the polling interval.\n. I see. Currently, no. Current polling configuration source will get everything to the client side and then find out difference between the current client state and polled results, then only publish those differences into the configuration. This is to distribute the load between server and client and make server stateless.\n. @opaluchlukasz Since Netflix is not on AWS 1.11.15 yet, we probably can't merge and release your PR yet. You can certainly do that in your fork. We'll upgrade as soon as our ecosystem upgrades to 1.11.15 and above. Thanks for the contribution though!\n. Can you elaborate a bit more on your use case and context? Tracking property usage is indeed useful. However, it can be tricky. For one, many users don't use DynamicProperty to get the properties. Instead, they access the properties through configurations directly. If you plan to use the registry for further actions like removing properties, there can be consequences. Another thing I worry about is that now you're tagging everybody with some extra overhead even if they don't care for the usages. This is actually a big topic so we need to give it more thoughts.\n. @Aloren Tracking the usage at per property level is a big change. At this point, we don't plan to implement it in Archaius 1. But we'll look into this in Archaius 2 and later versions.. I think what you're trying to achieve here is already captured in ALL_PROPS static map in DynamicProperty. Right now there's no accessor. But adding a getter for it is a better solution. However, keep in mind that these two solutions won't capture those properties that aren't accessed at runtime. Different code paths can potentially yield different properties.\n. You need to have a composite config. This composite config (in your case) has two layers. One is config.properties, the other (taking precedence over the first layer) is your s3 configuration source.. @dmydlarz do you have a special use case for a non-string valued property? From the code itself, it definitely will throw exception as you said. But Archaius itself has an assumption that the root property value is always string (follow Java properties convention).. @mukteshkrmishra For example, if you want to the overriding sequence to be D>C>B>A (D will override C and C will override B, etc.), then you can add \"@next=B,C,D\" at the last line of your A property file. Archaius will load A, then B, then C, then D. . @pkwarren Sure, please raise a PR so we can look at it together. Thanks.. At this point, we don't have plan to rewrite URLConfigurationSource. If you want, you can come up with your own configuration source.. @mattnelson Archaius doesn't support multiline key. The complexity of supporting this across all layers of Archaius outweighs the benefit imo.. Returning containerConfiguration is actually the existing behavior. I'm a little wary of throwing an exception now since the javadoc for this particular method doesn't call it out. It may break existing clients who don't expect any exceptions.\n. I agree. If we change to empty list now, we might break some code logic that checks on null.\n. I think this is probably good enough. I don't know how much we can gain if we are not sure how to deep copy T.\n. @vanithadevig everything else looks good to me. Only thing I think we can improve here is to reduce the sleep time. This will add more than 1 minute to build time. I haven't tried this myself, but I think this should work, let's use \nDynamicURLConfiguration config = new DynamicURLConfiguration(0, 1, false, new URLConfigurationSource().getConfigUrls()) instead of default constructor. This way, you can only do Thread.sleep(2000). Let me know how it goes. After that, I can merge. This looks good.\n. I forgot the time unit is mills, so I think something like DynamicURLConfiguration config = new DynamicURLConfiguration(0, 500, false, new URLConfigurationSource().getConfigUrls()) and then do Thread.sleep(1000) would do. 1 milli in delay is bit aggressive. \n. Can the action() return null when it's error?\n. I was a little puzzled by three maps here for a while. For sure, we will get two empty maps and one map with one entry in there? Not really sure if I have a better idea yet, just want to point out.\n. what if it's a delete, then should you remove the entry from the cache?\n. This code path is seldom used. But I'm fine with fixing it here as well. Please consolidate the functionality here and put it in a function inside ConfigurationUtils class so we don't have duplicate code in two places.\n. This is a biggie. I didn't notice this before because we didn't run into any CJK values before. In current code path, the most frequently used file properties loading is through PropertiesConfiguration in Apache Commons Configurations. But I like not depending on that and doing it this way. The only comment I have here is as above. Consolidate the code into a function in ConfigurationUtils so we can re-use.\n. K, just submitted a fix to switch to depth first instead of width first loading. Also adding the check for the infinite chaining.\n. I'm a little wary of calling super here. It's a no-op there at super, so overhead is less of concern. But it maybe confusing for people down the road who might expect if they make the change in super, it would take effect in subclasses as well. \n. So this still incurs the overhead of callbacks both in terms of memory and invocation. Any reason that we don't want to introduce cached properties so people are aware of the cost and can make the choice? I'm concerned people will be surprised by the behavior changes.\n. Makes sense to me.\n. So there's no getter for Application layer and Remote layer? Any reason for that?\n. Does this mean that you always need a bootstrap injector for Archaius module to work right? \n. I'm a bit puzzled by the approach here. So the only way to apply overrides is through this singleton config? So people can't control the overrides through the code?\n. This \"loaded\" layer is added after overrides? Is the sequence reversed?\n. Hmm, what's is this bug? I'm not aware of it?\n. Do you want to check first if sourceKey exists when doing \"Update\"? If not, you can either throws some exception or change to Set? I'm not familiar with etcd module. I'll leave the PR open for now and hopefully @spoon16 can take a look. Also, I probably won't be able to release a new Archaius until mid Jan.\n. For test cases, can you change the initial set value to an unordered list so we can verify the new map, set property actually preserves the \"random\" order?\n. How do we know the second one uses cache and the first one not?\n. so the bug here is that if values are the same before current and cached, the version will not be updated?\n. I'll dig into this later. But this change only covers ConfigProxyFactory case, what about other code paths that needs to interpolate the default value? That's I think it may makes sense to do it in a lower level (inside Config themselves, e.g.?)\n. The new change is essentially the same as the previous logic?\n. I'm a little wary of this. The config has explicit types getters. If we break the type check here, we lose the benefits of property types?\n. I'm really having hard time wrapping my head around all these re-directions. So we're adding a listener here to make sure whoever is depending on CommonsToConfig will have a chance to get notified when underneath config (Archaius1 AbstractConfiguration) changes? Only use case I can think of is one Archaius2 based library being based on another Archaius1 bridged Archaius2 library instead of just directly on the base Archaius1 config? Let me know if I'm wrong, but otherwise, I think we're overloading this bridge. The bridge should just bridge one Archaius1 AbstractConfiguration to another Archaius2 AbstractConfig. \n. what're all these format changes? can we get rid of those format changes only files?\n. Why not calling callbacks.clear() here?. ",
    "nelz9999": "Thanks for the info @allenxwang !\nSo, if my 'homegrown' solution won't work, I'd like to submit this as an Enhancement Request.\nI'd like a way to watch a set of properties.\nI propose an API that looks something like this:\n``` java\nSet propertyNames = new HashSet(Arrays.asList(new String[] { \"myProperty\", \"myProperty2\", \"myProperty5\" }));\nDynamicIntProperty props = \n      DynamicPropertyFactory.getInstance().getPropertySet(propertyNames);\nprops.addCallback(new Runnable() {\n      public void run() {\n          // ...\n      }\n  });\n```\nIdeally, if more than 1 of the properties identified in the set is modified at the same time, only 1 invocation of the callback happens.\n. Hrm... Okay, give me a second. I'm seeing stuff in the code that isn't in the version of the Javadoc that is linked from the wiki. \"DynamicSetProperty\" might answer some of my questions. I'll look at that first.\n. ",
    "seppyk": "I worked around this for a similar problem by serializing a property group as a single property with a JSON property value.   The callback could be added to the single property group in this manner and I just had to handle the serialization. \n. ",
    "imjorge": "Right, my bad.\n. I have created the following:\n``` java\nDynamicStringProperty p = new DynamicStringProperty(\"viva2\", \"test\") {\n    @Override\n    protected void validate(String newValue) {\n        throw new ValidationException(\"yellow world!\");\n    }\n};\nSystem.out.println(p.get());\n```\nwhich does not throw and shows the value of the property I have on config.properties.\nviva2 = doze\nHere is the program output:\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\ndoze\nI am using archaius-core 0.5.4.\nAny ideas on what may be wrong?\n. I may agree with your approach. But what about mandatory properties, for which there is no valid default. How would this be accomplished? Use null or other value marker as an indication of invalid property?\nHow do you do this at Netflix?\n. What would you consider to be the right approach for a mandatory property?\n. ",
    "stevewillard": "Yes, I think that's a good idea.\nHow do you feel about a property:\narchaius.configurationSource.failFast\nwhich defaults to true, and users can set it to false via a -D parameter?\n. ",
    "zwzm85": "thanks\uff0cthis is what i need\n. ",
    "pparth": "Ok, say we go with the command-line approach. But how do i link a deployment context attribute value, say \"environment=prod\" with a specific set of properties? Ideally, i would like all my \"prod\" and \"stage\" and \"dev\" property sets to already be loaded. And using the command-line, to filter accordingly. Do i mark each set with this attribute value? \nE.g. i have two files, prod.config.properties and stage.config.properties which have the same set of properties but with different values and the one has also an entry: archaius.deployment.environment=prod and the other archaius.deployment.environment=stage ?? I'm i correct?\n. Hello Allen,\nThank you for your interest!\nIf the developer is the one to determine the property file to load, then the purpose of the deployment context is only as a utility class that defines a set of context attributes. I mean, i don't really need the use of the -Darchaius.deployment.environment=prod system property if there is not an automatic resolution based on this! I could very well use my own system property called -Dcontext and then in my code say: if context=prod then load this file. Especially, the method setDeploymentContext on the ConfigurationManager class led me to believe there is something more elaborate about it. I guess, i would eventually need and create a deployment context class myself, especially if more than one attribute is involved. And yes, keeping it in the already static ConfigurationManager using the setDeploymentContext method would be perfect. I just never thought the whole concept to be just for simple help.\nIn any case, i don't think that the cascading loading from resource files is helpful. I wouldn't really want the developer to have access to anything more than the \"dev\" deployment context attributes. Everything else should be beyond reach. In fact, we have a number of sensitive, financial \"prod\" properties that only a handful of persons can have access to them.\nSo, i would prefer the way Greg is heading. I would like a single source for all my configuration needs, be it Dynamo DB or (better for me, for now) the Url Configuration Source. I could have 4 urls: one for development to which only development machines can have access, and the same goes for test, stage and prod. This way, the developer does not have access to anything more than the dev set of properties.\nNevertheless, the application should be able to load all property sets. Each property set though, is marked with a number of deployment context attribute values. All property sets are loaded in a CompositeConfiguration. During the application startup, a DeploymentContext having a number of attribute values, is passed to the ConfigurationManager. Then, a property resolution takes place. This can be done as follows:\nAll the properties in all configuration sets, that are marked with an attribute value different from the one defined in the DeploymentContext, are discarded. e.g. if the DeploymentContext has an Environment=prod, all properties in all sets that are marked having an Environment=test are discared.\nAll the properties in all configuration sets, that are marked with an attribute value for which attribute the DeploymentContext HAS NOT defined a value, are also discarded. e.g. if the aforementioned DeploymentContext has not set a value for Region but a property set is marked with a Region=east-coast, then the set should be discarded.\nAll the properties in all configuration sets, that are marked with an attribute value equal to the one defined in the DeploymentContext, are accepted.\nAll the properties in all configuration sets, that do not have a value for an attribute, are accepted regardless if the DeploymentContext has set a value or not, for the same attribute. \nAfter this resolution, if there are duplicate property entries in multiple sets, then the current resolution policy is enforced (last loaded value wins)\nI hope my thoughts are helpful! I'll wait for the next step!\n. Thanks for the info!\n. ",
    "spoon16": "At Netflix if no default value is provided the expectation is that the property value is optional and that the code can operate fine without the property being set.  There are not supposed to be mandatory properties for which a reasonable default is not provided.\nIt's fairly straight forward to write a Required wrapper (say RequiredDynamicProperty) that could throw when no value is available from the active configuration stack.\n. https://github.com/Netflix/archaius/pull/318\n. @nightwolfzor can this be closed?\n. Build failed because of a JVM error... or maybe a bunch of failing unit tests unrelated to the Etcd module.\nUnless I am missing something.\n. @howardyuan, tried to address your feedback with the following changes.\n- fixed bug where delete wouldn't remove the value from the EtcdConfigurationSource\n- added a unit test to validate delete behavior\n- refactored the updateHandler in EtcdConfigurationSource... tried to improve readability by not always instantiating three maps\n. @howardyuan merge?\n. @chandrapersonal I don't think \"compareandswap\" is a type of update notification.  It's part of the Etcd update API and the side effect is that an update notification is emitted, either set or create.\n. indentation\n. why not just call propertyChanged()?  Why even have propertyChangedInternal()?\n. In split you use Guava's Lists.newArrayList but here you do not... how come?\nAlso, the contract here could be more explicit by changing the return type to ImmutableList<T> and last line to return ImmutableList.of( list ); \n. I'll try something a little different, let me know what you think.\n. only if I duplicate the etcd.waitRecursive call on l:89\nIt'd probably be best to capture the wasError condition, throw an exception and have a finally that calls etcd.waitRecursive.  But I'm not sure that really makes things more readable.  I'll just duplicate l:89 and return early.\n. fixed and added a test to validate\n. ",
    "ericdowd": "Indeed is redundant. Closing.\n. Indeed is redundant now. Closing\n. I too had issues with this approach. My initial approach to the problem was to put it in the constructors as you suggested, however a couple of issues pushed me in this direction for the moment. Primarily this is a bigger change than the pull request about IAM role credentials and I didn't want to hold that one up for this. Second, which should take precedence, the hard coded value in the code or the value of the property? I don't know, so I decided to punt and chose the easier one for separating the pull requests.\n. Yeah it would probably be more effective if we're all signing from the same hymn book. I'll see what I can do about fitting the changes into your code\n. ",
    "jeje": "I second that request :)\nI'm mimicking DropWizard behavior in my own project and although I'm using RxJava and Hystrix, it would be nice to be able to fully switch to Archaius for my own configuration objects.\n. So if I were to use it with YAML files instead of properties ones, I'd have to create a StringDerivedProperty per property defined in the YAML right? If so, that might defeat a little bit the use of Jackson.\nIs there another way to add support for other \"properties definitions\" than .properties files?\n. ",
    "cheddar": "That solves it for me, thanks.  Is it documented?  I'll admit that I haven't\nlooked so I'm not sure.\nOn Wednesday, August 7, 2013, allenxwang wrote:\n\n@jeje https://github.com/jeje, @cheddar https://github.com/cheddar\nDoes the above resolve your issue? If so, I would like to close this issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/87#issuecomment-22294547\n.\n. \n",
    "ittaiz": "What's the status of this issue?\nWhat @jeje is asking for is something that interests me as well.\n. ",
    "vijayparashar12": "it's 2017 doesn't it make sense to have YAML file support for configurations. supporting only \".properties\" doesn't make much sense to me.. ",
    "tgmuender": "I would definitely also welcome YAML support. Could be something for version 2?. ",
    "lokee103": "figured out how to do this:\n- construct a DynamicURLConfiguration with a list of URLs for your property files you want to use\n- create a ConcurrentMapConfiguration with the DynamicURLConfiguration\n. Thanks for the quick response. \nIndeed if I removed ConcurrentMapConfiguration then the property update gets reflected in the app.\nI used ConcurrentMapConfiguration because of the example provided under the Features section for 'High throughput and thread-safe configurations'.\n. ",
    "abhishekmahawar": "Hi, I'm facing  a similar issue while directly getting a property from default config file. Following is the code snippet :\nimport com.netflix.config.*;\npublic class TestArchaius {\npublic static void main (String[] args) throws InterruptedException {\n    System.setProperty(\"archaius.dynamicPropertyFactory.registerConfigWithJMX\", \"true\");\n    System.setProperty(\"archaius.fixedDelayPollingScheduler.initialDelayMills\", \"1\");\n    System.setProperty(\"archaius.fixedDelayPollingScheduler.delayMills\", \"100\");\n\n    DynamicLongProperty timeToWait = DynamicPropertyFactory.getInstance().getLongProperty(\"lock.waitTime\", 1000);\n    while (true) {\n        System.out.println(\"++++\" + timeToWait.get());\n        Thread.sleep(5000);\n    }\n    //ConcurrentCompositeConfiguration config = (ConcurrentCompositeConfiguration)DynamicPropertyFactory.getBackingConfigurationSource();\n    //config.setOverrideProperty(\"lock.waitTime\", 500);\n}\n\n}\nI do get the updated property if I update it via JMX bean or using the backing config source. Can you please point me to the issue here ? I've my default config.properties in the classpath of project.. ",
    "docbobo": "I guess that might be a question for @gorzell ...\n. Yes, that would certainly work. I could probably also do a Composite with a regular DynamoDbConfigurationSource and a second table. Was just curious how this is supposed to work.\n. This pull request got replaced by #100 - closing.\n. @gorzell any chance you can look into this as you seem to be back?\n. I am not sure that I really find this solution better for the deployment scenario. Although it makes it more obvious which values apply in which context, it also makes it much easier to corrupt the data. \nAlso the way that I envision my use of that specific feature would allow for some additional access control, which would be a little bit harder to achieve if all dimensions are stored in the same DynamoDB property.\nLast but not least, this pull request fixes something that IMHO currently doesn't work the way that it's documented - at least not based on how I understand the code.\n. ",
    "perbergland": "We found the exact same problem and our solution was to call the static AbstractConfiguration.setDefaultListDelimiter((char)0) since the DynamicURLConfiguration loads its resources in the constructor before you get a chance to call setDelimiterParsingDisabled(true)\n. Yes we only use getProperty and have built a bridge between spring property resolving and a ConcurrentCompositeConfiguration instance with a stack of configurations (system props, file props, zookeeper).\nOur problems started when we introduced a property value with comma (list of hostnames) which triggered a never-ending refresh loop because of issue #101. We aren't really after converting lists to arrays at all, hence the wish to disable the parsing to work around #101.\nMaking it possible to set the default value of delimiterParsingDisabled just like you can for the delimiter itself would be a good enhancement.\nThanks,\nPer\n. ",
    "cloudbees-pull-request-builder": "archaius-pull-requests #1 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #3 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #4 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #5 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #6 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #7 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #8 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #10 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #11 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #12 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #13 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #14 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #15 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #16 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #17 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #19 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #18 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #20 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #21 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #22 ABORTED\n. archaius-pull-requests #24 ABORTED\n. archaius-pull-requests #26 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #27 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #28 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #29 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #30 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #31 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #32 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #33 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #34 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #35 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #36 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #37 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #38 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #39 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #40 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #41 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #42 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #43 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #44 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #45 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #46 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #47 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #48 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #54 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #49 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #50 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #51 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #52 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #53 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #55 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #56 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #58 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #59 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #60 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #61 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #62 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #63 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #64 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #65 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #66 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #67 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #68 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #69 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #70 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #71 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #72 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #73 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #74 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #75 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #76 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #77 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #78 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #79 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #80 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #81 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #82 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #83 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #112 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #84 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #85 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #86 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #87 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #88 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #89 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #90 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #91 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #92 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #93 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #94 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #95 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #96 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #97 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #98 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #99 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #100 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #101 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #104 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #102 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #103 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #105 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #106 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #107 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #108 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #110 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #111 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #113 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #115 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #116 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #117 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #114 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #118 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #119 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #120 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #121 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #122 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #149 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #123 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #124 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #125 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #126 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #127 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #128 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #129 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #130 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #131 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #132 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #133 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #134 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #135 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #136 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #137 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #138 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #139 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #140 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #141 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #142 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #143 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #144 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #145 ABORTED\n. archaius-pull-requests #146 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #147 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #148 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #150 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #151 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #152 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #153 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #154 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #155 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #156 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #157 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #158 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #159 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #160 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #161 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #162 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #163 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #164 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #165 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #176 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #9 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #177 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #178 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #10 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #166 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #167 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #168 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #1 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #169 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #2 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #3 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #170 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #171 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #4 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #172 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #5 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #173 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #6 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #174 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #7 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #180 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #12 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #181 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #13 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #182 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #14 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #183 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #15 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #184 ABORTED\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #16 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #185 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #186 ABORTED\n. archaius-pull-requests #175 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #8 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #179 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #11 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #17 ABORTED\n. archaius-pull-requests #187 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #18 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #19 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #20 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #188 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #189 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #21 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #190 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #191 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #22 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #192 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #23 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #24 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #193 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #194 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #25 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #197 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #28 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #198 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #29 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #195 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #26 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #196 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #27 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #199 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #30 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #200 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #31 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #201 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #32 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #202 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #33 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #203 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #34 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #204 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #35 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #36 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #205 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #206 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #37 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #207 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #38 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #208 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #39 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #209 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #40 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #41 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #210 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #42 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #211 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #212 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #43 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #213 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #44 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #45 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #214 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #46 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #215 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #216 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #47 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #217 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #48 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #218 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #49 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #219 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #50 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #220 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #51 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #221 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #52 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #222 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #53 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #223 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #54 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #224 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #55 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #225 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #56 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #57 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #226 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #227 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #58 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #228 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #59 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #229 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #60 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #230 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #61 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #231 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #62 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #232 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #63 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #64 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #233 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #234 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #65 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #235 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #66 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #236 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #67 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #237 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #68 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #241 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #72 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #238 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #69 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #239 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #70 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #240 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #71 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #242 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #73 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #243 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #74 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #244 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #75 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #245 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #76 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #246 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #77 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #78 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #247 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #248 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #79 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #80 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #249 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #250 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #81 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #251 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #82 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #83 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #252 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #253 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #84 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #85 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #254 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #86 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #255 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #87 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #256 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #257 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #88 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #89 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #258 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #90 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #259 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #91 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #260 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #92 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #261 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #262 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #93 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #263 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #94 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #95 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #264 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #96 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #265 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #97 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #266 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #267 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #98 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #99 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #268 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #100 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #269 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #270 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #101 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #271 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #102 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #272 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #103 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #273 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #104 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #105 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #274 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #275 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #106 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #107 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #276 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #277 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #108 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #278 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #279 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #109 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #110 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #280 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #111 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #281 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #112 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #282 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #113 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #114 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #283 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #284 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #115 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #285 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #116 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #286 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #117 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #118 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #287 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #119 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #288 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #290 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #121 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #289 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #120 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #122 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #291 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #292 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #123 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #293 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #124 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #125 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #294 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #295 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #126 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #296 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #127 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #297 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #128 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #298 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #129 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #299 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #130 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #300 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #131 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #301 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #132 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #133 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #302 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #134 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #303 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #307 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #138 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #135 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #304 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #305 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #136 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #137 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #306 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #308 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #139 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #309 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #140 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #310 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #141 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #311 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #142 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #312 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #143 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #322 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #156 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #157 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #144 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #313 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #314 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #145 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #315 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #148 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #149 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #316 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #150 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #317 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #151 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #152 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #318 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #153 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #319 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #320 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #154 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #321 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #155 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #323 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #158 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #324 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #159 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #325 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #160 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #326 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #161 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #327 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #162 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #329 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #164 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #342 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #176 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #343 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #177 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #328 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #163 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #330 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #165 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #331 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #166 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #335 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #169 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #332 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #167 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #333 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #168 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #334 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #336 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #170 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #339 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #173 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #340 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #174 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #203 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #171 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #337 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #172 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #338 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #341 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #175 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #344 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #178 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #345 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #179 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #346 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #180 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #347 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #181 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #348 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #182 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #183 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #349 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #350 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #184 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #185 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #351 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #186 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #352 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #187 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #353 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #354 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #188 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #189 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #355 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #356 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #190 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #357 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #191 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #192 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #358 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #193 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #359 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #360 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #194 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #361 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #195 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #362 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #196 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #363 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #197 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #364 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #365 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #198 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #366 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #367 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #199 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #368 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #200 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #201 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #369 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #370 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #202 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #205 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #371 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #206 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #372 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #373 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #207 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #208 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #374 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #375 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #209 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #376 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #210 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #377 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #211 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #378 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #212 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #379 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #213 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #214 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #380 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #381 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #215 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #382 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #216 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #383 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #217 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #384 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #218 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #385 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #219 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #386 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #220 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #387 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #221 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #388 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #222 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #223 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #389 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #224 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #390 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #391 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #225 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #392 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #226 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #227 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #393 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #394 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #228 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #395 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #229 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #396 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #230 FAILURE\nLooks like there's a problem with this pull request\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #231 FAILURE\nLooks like there's a problem with this pull request\n. archaius-pull-requests #397 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #398 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #232 SUCCESS\nThis pull request looks good\n. NetflixOSS \u00bb archaius \u00bb archaius-pull-requests #233 SUCCESS\nThis pull request looks good\n. archaius-pull-requests #399 SUCCESS\nThis pull request looks good\n. ",
    "stevenzwu": "Overall, looks good to me. Just have two general questions\n1) how do we handle sorting of the dimension priority?\n2) how do we integrate this concept with UI? especially about the matching order above? \n. very minor. you can use google Preconditions\n. github doesn't wrap the long text line, which makes reading a little difficult. have to scroll left/right\n. how does \"dimension sorting\" apply here? e.g. if both the region and stack match, which one will be selected? in the old world, we hard-code/predefine the matching order.\n- [\n-    {\n-       \"dimensions\":\n-              {\"@environment\":[\"prod\"],\n-               \"@region\":[\"us-east-1\"]\n-              },\n-       \"value\":5\n-    },\n-     {\n-        \"dimensions\":\n-             {\"@environment\":[\"prod\"],\n-               \"@stack\":[\"foo\"]\n-              },\n-        \"value\":10\n-     },\n-    {\n-        \"value\":2\n-    }\n  +]\n. so this is just a post-processor the string value property. why can't user just set the derived property value directly?\nOne thing actually might be useful is attaching/registering a customer Decoder class to PropertyWrapper. right now, we only support well known decoders/types: boolean, int, long, string, etc. This is one major use case of nccp team to use streaming/hermes FastData.\n. ",
    "OskarKjellin": "@gorzell Well, couldn't the core just look in the config for what order to initialize? The logic for this shouldn't belong in the aws-implementation in my opinion. Must pluggable setups use a config that defines the class names of the plugins\n. ",
    "chriswhitcombe": "@mumrah did you ever look into this? I was going to take a look but noticed this post so thought i'd check\n. Cheers David ill take a look, see if i can't get a nice spring binding setup and working.\n. @mumrah I was wondering why you went down the route you did, any reason you couldnt just subclass the configurer and use it as a proxy to archaius, quick gist here:\nhttps://gist.github.com/chriswhitcombe/6510808\nI know this means I loose dynamic properties but spring injects them on load anyway so I dont know of a way to make them dynamic in spring, unless thats what you were going for?\n. Chris,\nYeah that's sorted it. I did step through the code and thought it may be something like that, the system property works great. Ill kill the issue off.\nCheers,\nChris\n. ",
    "mumrah": "@allenxwang @chriswhitcombe,\nHere is what I mangled together to get this working with Camel+Spring: https://gist.github.com/mumrah/6439588\nWe ended up not using Archaius with our Camel/Spring project, so this has not been tested thoroughly. Use at your own risk :)\nBTW, we took out Archaius b/c it was determined that dynamic property loading was not a requirement for the project. The library itself has been great and we're using it on other things.\n-David\n. I did it this way so I could inject the configuration object to get dynamic\nproperties in java\nSent from my phone\nOn Sep 4, 2013, at 9:24 AM, chriswhitcombe notifications@github.com wrote:\n@mumrah https://github.com/mumrah did you ever look into this? I was\ngoing to take a look but noticed this post so thought i'd check\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/Netflix/archaius/issues/113#issuecomment-23803226\n.\n. Opened PR #144 \n. ",
    "siggimoo": "I don't even bother with trying to integrate the two in this manner. I just call Archaius from @Bean methods. For instance:\n@Bean\npublic DatabaseConnection databaseConnection()\n{\n    DynamicStringProperty jdbcUrl = DynamicPropertyFactory.getInstance().getStringProperty(\"databaseConnection\", null);\n    return new DynamicDatabaseConnection(jdbcUrl);\n}\n. @andrewharmellaw You could abstract Archaius out of your testing altogether. Create something like a Configuration interface for which Archaius is but one implementation, and then use another (e.g. mock) for testing.\n. Ok, so to clarify, if I want the same scheduling policy for several sources, I'll need to establish multiple identical schedulers as well as write code to shut them all down? This last part has been an issue in Tomcat environments where the failure to shutdown schedulers results in errors being logged about dangling threads.\n. It would seem to me that specifying a schedule instead of a scheduler (i.e. policy over process) would be more flexible. We do this with our personnel paging system. Limits are placed on when and how often people can be paged, and those limits are enforced by pluggable strategy objects [GoF] that can be shared with any number of pager instances. Each such strategy simply returns a long (date/time in ms) of when to next page someone.\nAs for the logging problem, even a single instance of the message is an issue for us since it triggers the aforementioned paging system. We've taken steps in our code to call the necessary shutdown methods, ensuring all polling threads are terminated, but this seems like something that could be more centralized. Perhaps an uninstall method in ConfigurationManager to act as a counterpart for install.\n. ",
    "andrewharmellaw": "I'm working on a tiny piece of code which takes a great deal of the goodness above and which will be packaged as a jar.  We're also wanting to use it for Camel too.\nI'm currently in the process of writing a load of unit tests to check everything works nicely and am hitting that problem that after we hit DynamicPropertyFactory.initWithConfigurationSource(config) once we can't hit it again (i.e in another test) without getting an error.  This is making testing hard.  Is there a back door to unset the config source in a test teardown? (I had a look around but couldn;t see anything).\n. Cheers for all the input guys.  I've solved my problem for the moment by getting by surefire plugin to fork for every test.  I'd +1 a \"reset\" feature, but it's not essential for us at runtime (as far as I can see for now).\nWe're getting near the point when we'll be able to make this available (mainly docs and tidying up for now, but with some outstanding features which we personally don't need, but which others might find useful.)  When we do, I'll post the repo URL here.  I'll make sure we credit everyone here with their input, with especial thanks to @mumrah and @chriswhitcombe \n. Hey guys, as promised (finally) we've got things tidy enough to want to share our repo with you. Its over at https://github.com/Capgemini/archaius-spring-adapter.  \nWe've name checked this thread, and slightly cheekily said we got permission to release it under Apache v2. @mumrah, if you're not happy with this please shout and we can take it down or change the licence, name you more explicitly or directly or whatever.  You kicked this off so we want to make sure you're credited sufficiently.\nPlease take a look, have a fiddle, comment, fork, fix, contribute however you think is appropriate.  Oh, and please note, we've not got everything working that we want to yet, but it's usable, and stable.\nThanks again.\n. ",
    "stujapa": "+1 for simple stuff. More difficult when testing items like callbacks.\n. (And simple stuff is the 90% case for archaius consumers.)\n. ++\n. Discussed the map() mechanism with @gorzell and @piis3. Greg mentioned intending to duplicate / migrate this mechanism to a future DynamicProperty trait for the scala bindings but it's good to add to ChainedProperty.\n. You can do that.  Or you can wait to review two PRs at once. I'm nearly finished refactoring a DynamicProperty trait under the dynamic properties. One issue with DynamicStringSetProperty and I'm done.  \nmatt.....\n__\n\nOn Mar 11, 2014, at 3:31 AM, Greg Orzell notifications@github.com wrote:\nI promise I will look at this Real Soon Now. ;-)\n\u2014\nReply to this email directly or view it on GitHub.\n. See if it's visible on my branch.  I refactored the classes and now am enhancing tests with a behavior trait.  My motivation was TJ lamenting about inconsistencies in getting the property name (really, difficulties changing the property value from within the service). \n\nHere: https://github.com/stujapa/archaius/blob/scala-dynamic-property-trait/archaius-scala/src/main/scala/com/netflix/config/scala/DynamicProperty.scala\n. If #173 is good it should go in first.  I can revise here if not.\n. Any other issues?  Or is this good to merge?\n. @gorzell - Any other issues? Or is this good to merge?\n. @gorzell @howardyuan any ideas on when the next version of archaius will be released?\n. @gorzell @howardyuan are there any plans for a release including this work?  We could have used it a few times over the last month.  Thanks.\n. @howardyuan, as there have been no other changes in a couple months and we have been patiently waiting for this, could you please release this?  Thanks.\n. @gorzell @howardyuan we've had good stability with gradle 1.7 as a stepping stone to later versions including 1.11.  Can that version be pinned so as to get a release out?  Failing that, with the OSS work coming soon I don't think temporarily reverting to 1.1 would undermine forward progress all that much.\n. Done. c115abb\n. Done. 4b326b5\n. Done. fa43bc5\n. It could be.  Possibly at instantiation we should call nonNull(defaultValue) as a proof that a programmatic (or possibly configuration) error led to a null default value.\n. Corrected. 4034359\n. Try 0f2d1ac.\n. DynamicPropertyLike?\n. Mistake: I had some phantom idea that \"adding\" null would clear the callbacks.  I'll correct that and plumb remove where it's available.\n. Actually to avoid symbol confusion, it has the same mechanisms under sometimes slightly different names.  I could see if this would extend DynamicProperty but I think the renamed attributes will break that.\n. If the major difference in consumer implementation is s/new D/d/ I'm not sure I see the light, but I can do that.  Presently the factory object has functions more similar to the previous invocation so as to preserve some API compatibility.\n. Callback support is in the trait.  (Now with remove too.)\n. Ah, he says, now I see...\n. Inconsistency. I started one way and didn't carry it through.  Fixing it...\n. Revised (heavily) in 9e59b05.\n. In a later update, this constructor should be replaced by factory methods.\n. Captured in factory methods in 9e59b05.\n. Done. 9e59b05\n. Didn't mark the constructors private but did add factory methods in 9e59b05.\n. ",
    "pas256": "Without this, there will be no Archaius playbook and AMI before re:invent... just sayin' is all.\n. Almost.\nIt is my understanding that Archaius has a web component that the clients talk to in order to get the properties, and as such, would have a WAR file to put into Tomcat as one of the artifacts.\nIf this is not the case, then I am missing something... which is entirely possible\n. Ah, I see.\nSo as it stands now, Archaius is a library only, not a service.\nI'll keep an eye on #132 and build an AMI once that has been released and in Cloudbees or GitHub.\nThanks.\n. ",
    "josethomas": "This bug causes the exception below when com.netflix.config.ConfigurationManager class is loaded when the system property archaius.default.deploymentContext.class is set.\nCaused by: java.lang.RuntimeException: Error initializing configuration\n    at com.netflix.config.ConfigurationManager.(ConfigurationManager.java:112)\n    ... 28 more\nCaused by: java.lang.NullPointerException\n    at java.lang.Class.forName0(Native Method)\n    at java.lang.Class.forName(Class.java:188)\n    at com.netflix.config.ConfigurationManager.(ConfigurationManager.java:99)\n    ... 28 more\n. ",
    "hangtwenty": "+1\n. ",
    "martijnburger": "+1\n. ",
    "newdha": "+1. ",
    "abhimaloo": "I am trying to use Archaius out of the box( without programming any Configuration myself) . How can I use Deployment Context and cascaded property files. There are two ways to supply property files to Archaius - One make it default property file which limits to only 1 configuration file(config.properties) other is additional URLs. I tried using additional URL's and supplied property files. Looks like default configuration is not respecting the \"archaius.deployment.environment\" system parameter.\nI know default implementation use URLConfigurationSource.java when you load additional URL'S but it is not cascading the property files. \nI tried calling \"ConfigurationManager.loadCascadedPropertiesFromResources(configName)\" method  which actually did the cascading but when i change any value in source property file it does not pick up the change(polling is not working). \nIs there any easy way to do following things - \na) load more than one property file\nb) cascade property according to the environment while making sure any update to the source property file will sync the in memory version.\nc) it could be a stretch but support @next attribute ..\nIf it requires me creating my own configuration source, can you give any references about the approach ?? \n. ",
    "wendelicious": "Has this consideration seen any traction?  I took URLConfigurationSource and created a similar configuration source I embed in a DynamicConfiguration.  Consider: https://gist.github.com/swps/3015d304a2d04a5f8941\n. ",
    "fiddleatwork": "I ran into this same issue, that is I would like to have dynamic cascaded configuration files.  Is there any news on this issue?  I see the previous poster submitted a NamedConfigurationSource, has anyone used it?\n. ",
    "jakber": "Hi, \nThanks for the clarification. I'm talking specifically about the second case here, using the default ConfigurationBasedDeploymentContext as well as the default and lazily instantiated ConcurrentCompositeConfiguration.\nThe issue is that even when you use the default ConfigurationBasedDeploymentContext and set the properties with the prefixes as VM arguments (like -Darchaius.configuration.environment=test), neither ConfigurationManager.setDeploymentContext nor ConfigurationBasedDeploymentContext.setValueInConfig is called. \nThis means that while ConfigurationManager.getDeploymentContext().getEnvironment() works, ConfigurationManager.getConfigInstance().getString(\"@environment\") does not, even though it should according to: https://github.com/Netflix/archaius/wiki/Deployment-context (at the very bottom of the page). For the same reason properties that reference ${@environment} won't work.\n. ",
    "yogi38inxoriant": "Hello,\nCan we make initialLoad(final PolledConfigurationSource source, final Configuration config) of class AbstractPollingScheduler as public. This could help fire event whenever required.\nthx,\nYogesh \n. Yes. We have a UI through which we can alter any property and it gets updated into database. Netflix scheduler then picks its up after it reloads. We needed to make sure than the property gets reflected at the same time when property is changed through UI and not wait for scheduler to load the properties. \nAs suggested by you we have extended the AbstractPollingScheduler and made the API public. But it called for writing the same code which is present in FixedDelayPollingScheduler and just overridding one more method initialLoad.\nThanks for your help !!!!\n. ",
    "JulianDuniec": "Great, I will try this! \nThanks for the quick reply ^^\n. ",
    "fernandezpablo85": "Hey @howardyuan, after checking the code a bit I think I could create a TypesafeConfiguration class, that extends AbstractConfiguration.\nI guess it would be necessary to extract some common behavior, like the whole listeners things. This would in turn make further config type additions (json files, yaml, other formats) easier.\nWhat do you think?\n. @howardyuan sure thing. My company has become very dependent on Typesafe config (read: playframework, akka, spray, scala in general) and having a seamless integration with archaius would be fantastic. I'm starting to get familiar with archaius source in order to make more sense out of these topics.\n. @howardyuan just by giving the sources a quick look, points 1, 2 and 4 seem feasible.\nPoint 3 on the other hand looks a bit harder since DynamicPropertyFactory seems to be quite dependent on AbstractConfiguration (apache). What do you think?\n. @howardyuan Can't find a good way of doing (1), found some issues along the way. Mind discussing this over email or IM?\n. Sure, will do.\nOn Mon, Dec 16, 2013 at 3:28 PM, Howard Yuan notifications@github.comwrote:\n\n@fernandezpablo85 https://github.com/fernandezpablo85 . Pablo, I\ncreated a GG https://groups.google.com/forum/#!forum/achaius-users or\nachaius-users@googlegroups.com so we can have discussion threads going.\nOther people can also chime in.\nWhy don't we start off with that? Please let us know your issues around so\nfar and we can go from there.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/148#issuecomment-30686118\n.\n. is this ever going to happen?\n. seems I missed it, I was using a fork. will close this issue and go back to the oficial release. thanks.\n. \n",
    "nightwolfzor": "+1 we'd love to see this as we use a lot of the Typesafe ecosystem\nWhat was the conclusion of this? I notice @mnadel has an open pull request #180 \n. Done a CR of from a typesafe config POV and it looks good to me. \n. PR from a typesafe config point of view looks good! \nNot familiar enough with Archaius to comment on that side of the world.\n. Thanks! \n. ",
    "mnadel": "CR?\n. Thanks for the consideration, @howardyuan. I've moved everything to a archaius-typesafe module, and will post to GG to solicit reviews/feedback.\n. Started GG thread @ https://groups.google.com/d/msg/achaius-users/4PJycEJu6i4/wiHOPeN1L6UJ\n. Yeah, I'll re-merge it with the latest this evening. Thanks. \n\nOn Nov 17, 2014, at 12:30 PM, Howard Yuan notifications@github.com wrote:\n@mnadel Since I'm in the middle of some Archaius work in my local repository, it probably take me a bit of time if I want to re-submit your PR. Do you happen to have some time merge it with latest and resubmit the PR? I think the merge should be clean. Let me know.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "analytically": ":+1: \n. @howardyuan no it was just an upvote since this has been quiet for 5 months now - we'd like to see this merged\n. ",
    "tnine": "Thanks for the reply.  I figured out the 1 liner shorty after posting this issue.  The issue I'm having is that I'm forced to give the property a random name that matches the testclass+testname, not the name we use in our standard operational context.  Otherwise, if I change a property in a single test, I then have side effects from this change when executing other tests.  It would be awesome to be able to manipulate the test property instances directly, instead of via the singleton indirection.\nI completely understand that in an operational deployment context there will be a singleton instance that's updated via an external polling mechanism.  This seems like a solid design and implementation to me.  The only issue I  have with the current implementation is that it makes encapsulating state within a single dynamic property difficult, and as a result we get side effects by using the singleton to change the instance of the property.\n. Hey Howard,\n I think the path of least resistance would be to created a protected\nsetter on the parent type.  My tests could then Subclass the runtime class\nand add whatever functionality they need. This would allow them to set the\nproperty in the instance itself which would the trigger the listeners\nwithout updating the singleton context.\nThoughts?\nOn Monday, December 16, 2013, Howard Yuan wrote:\n\nNow I see your context. Indeed, the current design requires a workaround\nas you presented. We'll think about a better solution to accommodate use\ncases like yours, but in the meantime trying not to introduce other side\neffects.\nIf you can think of good ideas, please feel free to chime in and we\ntogether make Archaius better.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/149#issuecomment-30690672\n.\n. Hey Howard,\n  It seems to me that internally, there needs to be a separation of\nconcerns.  The DynamicProperty instances are responsible for their\n\"current\" value.  The configuration (which is a singleton) would need to\nhave all instances register themselves internally via some sort of property\nname-> DynamicProperty instance mapping.\n\nHowever, it should be up to the property instance itself to decide if it's\nvalue has changed, and if it should fire listeners registered for the\nproperty.\nIt seems to me that when a configuration change occurs during a poll\noperation, the configuration singleton should pass every value off to the\nDynamicProperty instance that exists for it's value.  It's then up to the\nDynamicProperty to determine if it's changed or not internally per instance.\nMake sense, or am I way off base?\nOn Mon, Dec 16, 2013 at 5:11 PM, Howard Yuan notifications@github.comwrote:\n\nTodd, one of the fundamental issues is that Dynamic properties are meant\nto work as singletons. We can't even construct property instances. Even if\nwe can provide setter to change the values, for the same property names,\nother tests will see the same changes. As of now, I couldn't think of a\nstraightforward solution.\nIf you look at DynamicPropertyWrapper, it's probably the only thing thats'\nhalf way between a singleton and object instance. The underlying property\nitself is still a singleton, only the default value is per instance value.\nIf you're only interested in changing the value locally so when you get,\nyou can get the local values first, then we can work with wrappers to store\na local copy. However, I assume that you want to trigger configuration\nlistener and call backs when property values change? But once those\nlistener chains are triggered, the singleton instance is also changed. I'll\nkeep thinking about it. Let me know if I miss something here.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/archaius/issues/149#issuecomment-30714866\n.\n. \n",
    "yaochen": "@howardyuan so creating dynamic property is no longer supported?\ngetStringProperty() just gets the proper value right?\nthe part in the wiki im referring to is here:\nhttps://github.com/Netflix/archaius/wiki/Users-Guide#5-create-dynamic-properties-from-comnetflixconfigdynamicpropertyfactory\n. @howardyuan \ncould you provide me a snippet?\nie redis.host = 1111\nThanks!\n. if i understand correctly, getStringProperty will create the property if it doesnt exist!?\nDynamicPropertyFactory dpf = DynamicPropertyFactory.getInstance();\n    dpf.getStringProperty(\"redis.TEST\",\"OKAY\");\n    System.out.println(dpf.getStringProperty(\"redis.TEST\", \"default\").get());\nsee above example.\nim hoping to get \"OKAY\" but im getting \"default\", shouldnt i be getting \"OKAY\"?\n. @howardyuan ah i see. thanks for the tip!\n. ",
    "chandrapersonal": "Any updates on this. re-install a configuration should be feasible. i am useing ETCD as source in archaius  to dynamically update the properties in spring. but my etcd server  connection is timeing out for 5 min. So i have to re-install configuration source. Is there any other way to configure ETCD more than one time.\n. Is there any progress in this. I am doing proof of concept in this. \n.  why there is no case for node action \"compareandswap\" in etcd UpdateHandler. we have node actions create,set and delete action on UpdateHandler . but no  compareandswap. Is there any reason for not having  that action.\n. ",
    "utk4rsh": "Hey Howard,\nWe are using Archaius for configuration management in a batch application which uses Apache Spark. The spark job usually take long duration to execute during which it reads the configuration property whenever needed.  However after certain point of time, there is enormous GC activity because most of the heap is filled by DynamicProperty instances which were never GCed. \nWould like to know your view on this. You mentioned the removeAllCallbacks() method to explicitly remove all callbacks. Could you help us with the guidelines on using it or any other way to avoid this problem?\n. Thanks @howardyuan for the inputs. We would try out what you suggested and post any further findings that could be helpful to all.\n. ",
    "krieb": "Reproduce with the following snippit:\n``` java\nimport com.netflix.config.DynamicStringMapProperty;\nimport java.util.Map;\nimport java.util.HashMap;\npublic class Main {\npublic static void main(String [] args) {\n    Map<String, String> map = new HashMap<>();\n    map.put(\"hello\", \"world\");\n    map.put(\"goodbye\", \"world\");\n\n    DynamicStringMapProperty prop = new DynamicStringMapProperty(\"welcome.message\", map);\n\n    System.out.printf(\"found %d properties:\\n\", prop.getMap().size());\n    for( Map.Entry<String, String> entry : prop.getMap().entrySet() ) {\n        System.out.printf(\"\\t%s ==> %s\\n\", entry.getKey(), entry.getValue());\n    }\n}\n\n}\n```\noutput I got was:\nfound 0 properties:\n. ",
    "piis3": "Not blocked, but I keep running into cases where it'd be nice to use.\n. ",
    "Crystark": "@howardyuan\nI'm having the same troubles here (trying this out of the box and cascading not working).\nI've defined a config.properties file as follow\nkey1 = val1\nkey2 =\nkey3 = val3a\nand a config-dev.properties file as follow\nkey2 = val2\nkey3 = val3b\nI've even tried adding to config.properties \n@next=config-${@environment}.properties\nIt doesn't pick up my specific environment properties.\nDynamicPropertyFactory.getInstance().getStringProperty(\"key2\", \"nothingwasfound\").get(); // #=>  (empty string)\nDynamicPropertyFactory.getInstance().getStringProperty(\"key3\", \"nothingwasfound\").get(); // #=>  val3a\nNote: i've of course set -Darchaius.deployment.environment=dev and it is picked up as ConfigurationManager.getDeploymentContext().getDeploymentEnvironment() == \"dev\"\nI don't really understand your answer here and how i can achieve this simple task. Any pointers ?\nFYI, i'm not interested in the polling of those cascaded files as they serve as a base and are usually compiled into the jar (as is the config.properties file).  However, i will need the polling on the additionalUrls. But if i read you right, that should be working.\n. Yes, the first thing i tried was to use ConfigurationManager.loadCascadedPropertiesFromResources\nHere's what i did:\nstatic {\n        try {\n            ConfigurationManager.loadCascadedPropertiesFromResources(\"config\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        logger.error(ConfigurationManager.getDeploymentContext().getDeploymentEnvironment());\n        logger.error(ConfigurationManager.getLoadedPropertiesURLs().toString());\n        logger.error(DynamicPropertyFactory.getInstance().getStringProperty(\"key1\", \"(nothing was found)\").get());\n        logger.error(DynamicPropertyFactory.getInstance().getStringProperty(\"key2\", \"(nothing was found)\").get());\n        logger.error(DynamicPropertyFactory.getInstance().getStringProperty(\"key3\", \"(nothing was found)\").get());\n    }\nAnd here's the logs output:\n2014-07-11 08:56:44 INFO  URLConfigurationSource:125 - URLs to be used as dynamic configuration source: [file:/data/home/me/my-project/module1/target/classes/config.properties]\n2014-07-11 08:56:44 INFO  ConfigurationUtils:180 - Loaded properties file file:/data/home/me/my-project/module1/target/classes/config.properties\n2014-07-11 08:56:44 INFO  ConfigurationUtils:180 - Loaded properties file file:/data/home/me/my-project/module1/target/classes/config-dev.properties\n2014-07-11 08:56:44 INFO  ConfigurationUtils:162 - Loaded properties file file:/data/home/me/my-project/module1/target/classes/config-user.properties\n2014-07-11 08:56:44 ERROR Config:23 - dev\n2014-07-11 08:56:44 ERROR Config:24 - [file:/data/home/me/my-project/module1/target/classes/config.properties, file:/data/home/me/my-project/module1/target/classes/config-dev.properties, file:/data/home/me/my-project/module1/target/classes/config-user.properties]\n2014-07-11 08:56:44 INFO  DynamicPropertyFactory:281 - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@f57e182\n2014-07-11 08:56:44 ERROR Config:25 -\n2014-07-11 08:56:44 ERROR Config:26 - value2\n2014-07-11 08:56:44 ERROR Config:27 -\nAnd finally here are the config files:\nconfig.properties\nkey1 =\nkey2 = value2\nkey3 =\nconfig-dev.properties\n```\nkey1 = value1\nkey3 =\n@next=config-user.properties\n```\nconfig-user.properties\nkey3 = value3\nShould i be using ConfigurationManager.getConfigInstance().getProperty instead of DynamicPropertyFactory.getInstance().getStringProperty ? Does that mean i get no polling at all ? What if i add additionnalUrls ?\n. Ok i've just tested something. Instead of using config*.properties files i named my files \"test\" i.e.:\ntest.properties\ntest-dev.properties\ntest-user.properties\nAnd i used ConfigurationManager.loadCascadedPropertiesFromResources(\"test\"); to load them, exactly as shown above.\nAnd guess what ? it works. Values are properly loaded and fetched by DynamicPropertyFactory as well as ConfigurationManager. Is there any restrictions with that config file ? Or maybe does it think it's already loaded (using the wrong method) so it won't reload it when i do ConfigurationManager.loadCascadedPropertiesFromResources(\"config\"); ?\nThanks for your feedback. I'm gona test the additionalUrls a bit see how it works.\n. I tried having my test*.properties files alongside the config*.properties files (i had just renamed the files previously) and it doesn't work anymore. It seems that if a config.properties file is found ConfigurationManager.loadCascadedPropertiesFromResources(\"test\"); is ignored even though the output says the test*.properties files were loaded.\nCould this be related to #94 ?\n. So i removed the config*.properties files to have cascading working and tried adding a 4th configuration file using\n-Darchaius.configurationSource.additionalUrls=file:///data/home/me/my-project/module1/target/classes/test-add.properties\nEdit: The additionalUrl is initially loaded and polling seems to work fine.\n. To summarize this, if one wants this to work out of the box, he needs to use\nConfigurationManager.loadCascadedPropertiesFromResources(\"[config_name]\");\nBut be careful, [config_name] cannot be \"config\" and there must not be any config.properties file in the project's classpath.\n@howardyuan I guess you should adapt the changes you made to the wiki.\n. ",
    "benjchristensen": "After writing this I realized there is now also Guava and Jackson ... those are both problematic for a library to depend on as well. What do you think of those?\n. Thanks @howardyuan Please let me know when it's done so I can update Hystrix to the new version.\n. The 3rd party dependencies are the issues I'm trying to solve here as they are what cause the transitive problems.\nSeparating out implementations into separate modules would be great, and if that's how we solve the dependency issue that's fine, but it's not necessarily required for what I'm asking. \nUltimately a library using Archaius needs 2 things:\n1) Ability to implement dynamic properties via interfaces or concrete classes with no dependencies\n2) Allow the application using the library to configure how the backing implementation gets the properties ... but be able to function with defaults if no implementation is given (which means there is some concrete behavior, unlike SL4J).\nHere is the usage of Archaius in Hystrix: https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/strategy/properties/HystrixPropertiesChainedArchaiusProperty.java\nAnd how the defaults are defined: https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandProperties.java#L108\nAs it is currently, it still requires far too much code to use it, as shown by the need to custom implement many types in that class.\nThank you @gorzell and @howardyuan for your involvement on this. It will be great to get Archaius streamlined. \n. Perhaps we can instead just focus on Archaius 2 which we are wanting to do anyways as we move towards async/reactive support alongside Ribbon/RxNetty/Eureka2/etc?\n. No there aren't yet. Just emerging discussions that Archauis v1 doesn't fit the new apps we're building very well.\n. ",
    "mattrjacobs": "@gorzell @howardyuan Any progress on removing Guava/Jackson from the exported set of Archaius dependencies?  I'm combing through Hystrix backlog and ran across Netflix/Hystrix#252 and was curious where this was at.  Thanks! \n. ",
    "spencergibb": ":+1: on changing the way archaius bootstraps.  @gorzell's list is great.  spring-cloud-netflix has to work around the static initializers and general use of static singletons.\n. :+1: looking forward to this.\n. build failed because the gradle-wrapper.jar is not checked in.\n. @elandau Yeah, wouldn't be hard to move to the long, int parsing to the decoder.  Spring has robust conversion framework that would get plugged in spring-cloud-netflix.\n. Since I asked earlier about the package name, why the change back to com.?\n. :-)\n. @elandau will do.  It may be tomorrow or monday.\n. Creating a Decoder that behaves as you stated is possible with the current design.  A sort of composite Decoder.  My initial thought when I created it was being able to plug in Spring's conversion service.  I don't want to have to register each type individually when I have a system that does that already.\n. No composite decoder yet.  In general it might look like this\n```\nclass CompositeDecoder implements Decoder {\n  List decoders;\n  CompositeDecoder(List decoders) {\n    this.decoders = decoders;\n  }\n T decode(Class type, String encoded) {\n    for (MyDecoder decoder : decoders) {\n      if (decoder.canDecode(type)) {\n        return decoder.decode(type, encoded)\n      }\n    }\n    return null; // or throw exception or use default\n  }\n}\n```\nI plug spring into feign here: https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/feign/support/SpringDecoder.java  It's http specific, but there is a generic ConversionService that isn't.\n. Also https://github.com/Netflix/Hystrix/issues/730 and their solution https://github.com/Netflix/Hystrix/pull/944\n. commons-configuration should a compile dependency.\n. I'm a bit confused, marked closed and tagged with enhancement/v1?\n. @howardyuan what version is the change in?\n. It's the standard for Spring, if that matters.\n. This is not the Spring Cloud repository. Curious why the new package structure?  Why drop the com.?\n. Is that the right Nullable?\n. ",
    "elandau": "I'm going to open a bunch of issues regarding Archaius 2.0.  But in the meantime here are some thoughts,\nArchaius will be broken up into the following projects\n- archaius-core   The only dependency will be commons-lang3 for the interpolation code\n- archaius-typesafe  The only dependency will be typesafe config\n- archaius-governator  Will pull in governator and guice and re-implement fabricator to merge configuration with configuration mapping and DI.  This will likely be what's described here, https://github.com/Netflix/governator/issues/182\n- archaius-legacy   Adapters for the legacy API\nThe new API will be designed with a more robust ConfigurationManager.  There will be no static classes so archaius can be easily used in unit tests.  The ConfigurationManager will manage configuration loading via a pluggable ConfigurationLoader SPI.  Multiple ConfigurationLoaders may be added to support various configuration solutions such as Typesafe Config and Commons Configuration, all of which will reside in separate sub-projects so dependencies will be under tight control.  Cascade loading will be specified via a CascadingPolicy interface that converts a single configuration name (basename, filename, URI, etc.) to a priority ordered list of possible permutations to load.  ConfigurationManager will manage configuration in two tiers.  The first is the top level property solution order, such as FastProperties, Application, Library, System, Env.  The second will track cascaded configurations and library configurations in the order in which they are loaded.  This will only be done in the Application and Library order.  The top level configuration will be responsible for resolving the property name as well as interpolating the value.  \nI'm also planning to redo DynamicProperty to treat property value updates as streams of updates with binding to variables and methods as an extension.  This will allow us to maintain a simple property update API.\nFor example,\n``` java\npublic class MyService {\n     private AtomicInteger timeout = new AtomicInteger();\n@Inject\nMyService(ObservablePropertyManager manager) {\n    manager.subscribe(\"myservice.timeout\", Integer.class, 1000, FieldUpdater.create(timeout));\n}\n\nprivate void doSomething() {\n    while (true) {\n           ... timeout.get();\n    }\n}\n\n}\n```\nOr react directly to updates, \njava\npublic class MyService {\n    @Inject\n    MyService(ObservablePropertyManager manager) {\n        manager.subscribe(new PropertyObserver<Integer>() {\n                        public void onChange(Integer newValue) {\n                        }\n                   }, \"myservice.timeout\", Integer.class, 1000, );\n    }\n}\n. I plan to have a prototype ready by end of next week so we can reference the code in this discussion. \n. Sorry, I didn't mean to imply this will have a dependency on Rx.  I was just describing an Rx like API.  With that said, I do envision an archaius-rxjava subproject that can convert a property value stream to an Observable so that the property can be composed into your Rx code.\n. I issued PR #216 for v2 initial implementation.  If you want to review it's best to fork and look at the code locally because the PR changes are painful to look at as they include all the deleted files.\n. This PR is replaced by #216 which uses a proper clean branch\n. Thanks for the PR!  Glad to see others getting involved.  Do you see this being extended to include parsing of all types, getLong, getInt, etc..  I'm currently doing that in AbstractConfig but feel it should be implemented elsewhere.\n. Build for 2.x succeeds as of #242 \n. Modified the cloudbees configuration to java7.  We can't go to java8 yet because most of netflix libraries are still on java7.\n. The move back to com. had to do with making archaius 2.x org and package names compatible with package names in 0.x.   I still like the idea of dropping the com. but I shouldn't have attempted this on a 2.x of an existing project. \n. @spencergibb Can you do a thorough review of the code and API.  I actually built an archaius 2.x rc.1 so people can start trying it out but there's still time to make API changes. \n. 1.  This is mostly for backward compatibility\n2.  Agreed, these should all throw exceptions\n3.  All getXXX(String key) methods should throw a not found exception.\n. Any call to addConfigFirst/Last on AppConfig will load the config into the library layer.  You should be able to load the entire typesafe configuration and add it by calling addConfigFirst.\njava\nappConfig.addConfigLast(new TypesafeConfig(\"name\", ConfigFactory.load()));\n. First, archaius was always doing a toString() so the previous method signature was very misleading.  Also, archaius historically dealt with lists and a single property with delimited values. I'd like to maintain the previous behavior here.\nWith regards to getting Archaius to work with Typesafe's Lists here's one approach,\n1.  getRawString() should be removed from the Config interface and placed in AbstractConfig.  Archaius internal configurations can continue to treat lists as parsed single properties\n2.  CascadingCompositeConfig needs to be modified to delegate all parsing of values to the first child that has the property so it doesn't make any assumptions regarding how the values are stored.\n3.  TypesafeConfig will implement Config directly and return the values as parsed and interpolated by Typesafe Config's implementation.  The tricky part will be to incorporate the string interpolator so that the Tyepsafe Config will be able to replace with property values from archaius.\n. It's probably best to make the composite nature of Decoder plugin an integral part of the core implementation and not a customization of a single Decoder object.  So, we would roll the above CompositeDecoder into the core implementation.    \nRegarding the above implementation would we have each Decoder handle each primitive type (ie. Integer) or would we have one Decoder that can handles all primitive types?  The implementation for one decoder for all primitive types might look ugly because it would have duplicate type checking code in canDecode() and decode() which may be error prone.  I suppose we could use the Decoder contract only for custom decoders and fallback to a single DefaultDecoder. For example,\njava\nfor (Decoder decoder : decoders) {\n    if (decoder.canDecode(type)) {\n        return decoder.decode(type, encoded);\n    }\n}\nreturn defaultDecoder.decode(type, encoded);\nThe defaultDecoder will return null or throw the unsupported type exception.\n. Yes, AbstractConfig will be modified to use Decoder.\n. Thanks for the fix, but... after some offline discussions I'm actually going to return the defaults to the way they are described in the documentation here. \n. Better fix in PR #281\n. @AdoHe I don't understand what you asking for here?  Can you please provide more information about what it is you are asking for.\n. ArchaiusModule should provide a good working set of defaults and not require an additional module to be installed or derived from ArchaiusModule (i.e. DefaultArchaiusModule).  Inheritance in Guice can be very problematic when it comes to dealing with duplicate modules and should be avoided.  It's better to use Guice's built in module override mechanism.    \nSee https://github.com/Netflix/archaius/pull/295\n. Documentation change substantially so this PR is no longer relevant. \n. I modified the Module to force the use of Modules.override in order to provide a different implementation of AppConfig.  This is actually a better use of Guice Modules since modules really shouldn't have any state and passing AppConfig to a module violates that principle. \n. I agree that this is not ideal but is better than any alternative that I can think of.  At Netflix we have a large codebase of libraries and applications and it would be very difficult to replace the code backing the old API with the new API without some changes in expected behavior.  Also, since the old API is very static heavy it does not fit well with the new API which promotes DI best practices.  As a result we are opting to run both configuration versions in parallel and allow application and libraries to migrate code to the new API at their own pace.\n. @brharrington, thanks for the thorough review.  I believe all your comments have been addressed but there is one thing I'm not too happy about.  Should we allow setting an external application layer Config AND try to load the configuration properties files as well.  Currently, when an external application config is provided DefaultAppConfig will silently not load the application properties.  Does it make sense to load both into a composite layer?\n. Persisted2ConfigProvider doesn't force any particular query scope structure so you could set the query scope to anything you like. \nHere's how you can set up a DefaultPersisted2ClientConfig for just 'appId', 'cluster' and 'asg' and no global scope.\njava\nfinal Persisted2ClientConfig config = new DefaultPersisted2ClientConfig()\n            .withQueryScope(\"appId\",    \"app1\")\n            .withQueryScope(\"cluster\", \"cluster1\")\n            .withQueryScope(\"asg\", \"asg1\");\nThis will translate to the following filter,\nfilter=(app='app1') and (cluster='cluster1') and (asg='asg1')\n. I noticed this as well.  I need to modify the 0.x code to allow this.  Currently, once the static block has been called it's impossible to change.\n. I could modify the bridge to not set the archaius 0.x system properties but instead call,\njava\nConfigurationManager.install(this);\nfrom the constructor of the bridge.\n. Fixed in #306 \n. Previously ConfigProxyFactory was an interface but I didn't see much value in that since there would only be one implementation.  The abstraction for different configuration formats (JSON, INI, etc.) is already handled int he Config interface since all configuration formats can ultimately be reduced to a tree structure where a traditional Java property maps to a path through the tree. \nI'll work on subproxy next.\n. One big issue with this is that all value extraction mechanisms assume the value is a String and not some other type (ex. Integer, List etc...).  We would have to modify all parsing code to determine the type of data being stored.  Support for value types other than String and especially collections is a key missing feature from archaius2 and now might be a good time to address that.  Can you add unit tests for storing a value type other than String (ex. Integer) as well as storing a List.  That should at least help illustrate that more work needs to be done.\n. You can load a YAML config file using the Typesafe Config integration.  I do however know that archaius2 has issues with dealing with collections.\n. Yes, you would explicitly have to specify the default value of null or \"\"\n. This change is specific to definition configuration using proxied interfaces (note the Config interface).  The current behavior is to return null for non-primitives.\n. Is there a unit test to show the behavior and confirm the fix?\n. Good catch on the startup case!\n. ArchaiusModule should not be dedupped as it is only used for customizing archaius.  You should be able to install multiple of these, each with different customizations.  This follows the approach used by ServletModule\n. I'll see if I can add support for both but the plain ':' is a much more familiar syntax for specifying defaults, especially to anyone who has used Spring.  \nRegarding the unit tests, they were somehow removed when I was doing some cleanup.  I'll re-add them.\n. @brharrington Thanks for the input.  After take a very short look at supporting both I realized that it really makes no sense to attempt that as it would cause ambiguity when dealing with negative numbers.\n. Solved with #411 \n. LGTM\n. A few nitpicks but otherwise LGTM\n. LGTM\n. @gorzell Sorry for taking so long to look at this.  Can you please fix the conflict and I'll go ahead and merge.. LGTM\n. Thanks for the PR\n. Fixed with #492 . How about we just deprecate all the methods where a default value is not provided.  That path does not throw an exception if the key is not found.. Ah, I was just looking at the getString() case.  In that case let's flip the implementation between getValue and getValueWithDefault so that getValue() throws an exception if the value is null. . Replaced with #526 . Can you provide additional information about the use case here.  Property is normally created by a PropertyRepository and not directly so it feels strange to be creating a static property instance outside of a PropertyRepository.  . I'd be concerned about introducing this given that Archaius is all about dynamic configuration and I don't feel that this is the proper abstraction for introducing 'immutable' configuration.  I'd also recommend not relying on the Property interface directly in your code to avoid coupling your business logic specifically with Archaius.  There are several alternatives to achieving this,\n1.  Property implements Java's Supplier so you can just code to Supplier.  For testing you can easily create an immutable supplier like this, () -> CONSTANT.\n2.  Define a configuration interface that is bound to archaius in the normal case or manually constructed for testing. \n3.  Create an immutable Config for your tests and bind that to a PropertyRepository or a configuration interface as a means to achieve immutable configuration.  . There's a growing trend to remove the com. as it is completely unnecessary.  :)\n. Why do you think we need this abstraction?  I believe the Decoder is better suited for this separation.  The ObservableProperty is more a proxy to making the correct getXXX on Config which in turn should call the Decoder.\n. yes.  good catch.\n. If it's a snapshot update then on onConfigUpdated(Config config) will be called.  It it's an incremental update then onConfigUpdated(String propName, Config config) will be called multiple times but onConfigUpdated(Config config) will not be called.\n. Fixed in #278 \n. no, fixed in #278 \n. Will need to give this some thought.\n. I don't expect a need for a different ConfigMapper implementation.\n. yes\n. Not sure how this happened.  Will fix.\n. Was trying to simplify the knobs.  Will put this back.\n. Agreed.  I'll make it so you can pass in your own Config for the application layer.\n. None.  Will remove. \n. Good catch.  This really should just skip the scope if scope.getValue().isEmpty()\n. None.  I'll remove the string \"null\".\n. Are you sure about this behavior?  I just wrote a test that confirms the opposite. \n. Oh, great!!!  OK.  I'm gonna make the override order in a CompositeConfig configurable. \n. Specifying the order will be a setting for the @LibrariesLayer CompositeConfig that is done in the archaius-guice integration and will therefore be separate from the bridge.  It will be an application decision.  So, for internal Netflix we would set this up with reversed order to match the behavior of NetflixConfiguration.  This will be the case both for the bridge as well as regular use of archaius2.\n. Honestly, I'd rather not even have the libraries layer and keep all libraries fully isolated.  However, unless we start supporting remote overrides with library scope this would make overrides cumbersome and difficult to reason.  Unfortunately we do have to deal with the reality that there are two different override orders in use today.  The default will remain consistent with the previous OSS but I do like at least having the option to control this feature.\n. Regardless of override order there can still be a lot of ambiguity stemming from the order in which classes are instantiated.  Take the following two classes for example,\n``` java\n@ConfigurationSource(\"a\")\npublic class AConfiguration {\n}\n@ConfigurationSource(\"b\")\npublic class BConfiguration {\n}\n```\nSince AConfiguration and BConfiguration have no dependencies between them they can be instantiated in any random order so the override behavior is essentially undefined.  When you have more control over loading the property files it might actually make perfect sense to load into a child CompositeConfig (as you described) where you have full control over the override order.  \nPerhaps we need to come up with a configuration dependency mechanism that could potentially re-order child configurations after they are loaded.  I'm not sure what that would look like though and am open to suggestions.\n. Ya, I don't like PropertyInfo.  However, I envision adding other attributes to this annotation.  Alternatively we can make the decision that PropertyName will only be used for naming and as such cannot have other attributes.  Additional attributes like immutability can be specified using a different annotation such as @Immutable.\n. True.  I was following a pattern from governator.  I need to understand why governator didn't use getMethods().\n. fin can never be null\n. There is a potential bug here when having files nested with @next commands where @next in a nested file will go to the end of the list.  It might be better to use recursion here.  We should also check for circular @next dependencies as well.\n. s/extrapolated/interpolated\n. Due to the excessive use of statics in various libraries (blitz4j) there are some unavoidable situations where the configuration system hasn't been set up yet and it would be impossible to move forward if this code threw an exception.  For now I'm opting to output an error and slowly fix libraries that have these issues.  In most cases the libraries have very reasonable defaults or get reconfigured later on.\n. No need for 'prev' to be a field\n. We can eliminate this extra check, \njava\nString current = next;\nnext = null;\nwhile (iter.hasNext()) {\n    next = iter.next();\n    if (next.startsWith(prefix)) {\n        break;\n    }\n    else {\n         next = null;\n    }\n}\nreturn current;\n. This block of code repeats in next() so let's move it to a function.\n. This should be part of the decoder\n. Can we create a variant of getValue(Class type, String key, T defaultValue) that will handle the NoSuchElementException instead of having to handle the exception in all the getXXX methods?\n. Also add setListDelimiter to postConfigAdded() which is called for any child that is added.  This will address the case where a child is added after setListDelimiter() is called\n. No need to call the decoder if part is already of type 'type'\n. Why the extra code here to handle getString() as a list?  Why not just expect it be a list or convert to a string if the returned object is of type List\n. Whey the duplicate 'type.equals(boolean.class) || type.equals(Boolean.class'?\n. call notFound\n. call notFound instead of returning null\n. Let's move all the tests into core.  Putting this testCompile dependency here actually causes a circular dependency (archaius2-api -> archaius2-core -> archaius2-api) which confuses eclipse.\n. This method returns CompositeConfig because configuration loading is inherently composite due to cascade loading.  Exposing CompositeConfig from the API makes that explicit and also allows for post processing of the response.  With that said, we would need to make CompositeConfig an interface for this to be part of the api package.\n. I suppose it's been deprecated long enough.  I'll delete it.\n. Yes, but there were some static initialization ordering issues with code that was previously invoked as part of archaius2 bootstrapping which triggered the wrong classes being created in archaius1.\n. I felt that this exception may give more details about the root cause than a duplicate binding error.  However, I also agree that it doesn't make sense to throw an exception from equals().  I'll fix this.\n. I'm trying to reduce the API so it only exposes things are should be consumed.  I don't think the @ApplicationLayer is something that should be consumed.\n. No, it's the current injector being injected.  I'll clean this up a bit so we don't inject the injector.\n. You can set overrides in code by injecting \n@RuntimeLayer\nSettableConfig config;\n. this.loaders should be a Set\n. This follows the same approach as ServletModule where sub-classing the module is only done for customization purposes.  Note that InternalArchaiusModule is final and has the proper deduping equals/hashCode.\n. @brharrington Thanks for the input.  I could modify the implementation to consider classpath as well as file system.  Would that work?  \nWhat, in your opinion, should be the expected behavior if there are multiple matching files?  Should it fail with a multiple files exception, should it load all, should it use the first?\n. I'll mess with the order a bit\n. We currently don't.  The API would need to be re-worked to allow visibility into that.  For now I just stepped through it :(\n. There were a few other use cases but essentially yes.  If the value was anything but new the version timestamp never got updated.\n. Yes, it is.\n. The fix for getting non-string types as string has been pushed down to the archaius Config so it can do the interpolation\n. Getters for specific types continue to work as before.  This just ensures that you can get a string representation of a property that is not stored as a string.\n. Now that we're exposing this via configuration let's think of a better name.  How about something 'blockUntilInitialized'?\n. This look looks a bit awkward in how the numRetries update and condition check are disconnected.  This might read better as\njava\ndo {\n   try { \n      callback.run();\n      break;\n   }\n   catch (Exception e) {\n      if (--numRetries == 0) {\n          return Futures.immediateFailure(e); \n      }\n      try {\n          units.sleep(interval);\n      } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          return Futures.immediateFailure(e);\n      }\n   }\n}while (syncInit);\n. Since this is a breaking change let's deprecate this constructor instead and log a warning if syntInit is false.\n. Next should only ever be a string.  It's OK to keep next as a String.\nString next = (String)p.get(INCLUDE_KEY);\n. Let's rename this to ApplicationOverrideResources\n. nitpick.  add a space after the 'if' to be consistent with the existing style.\n. To properly support this I'd need to make more changes than I'm comfortable making in this one PR.  I'd rather just support defaults via default methods and add support for @DefaultValue at a later time.\n. I'm actually creating a LinkedHashSet so the order is preserved (not sorted).  Not sure it's necessary but felt like it would be nice to maintain.   I can change this to a HashSet if you feel that's more appropriate.\n. Other than throwing an exception I'm not sure there's any valid default here.  I doubt anyone is implementing this anyway.\n. Agreed.  A proper fix for this would require much more refactoring than I'm comfortable with with this PR.  Let's merge this as is and fix the Decoder and default value issue restrictions in a separate PR.\n. Yes, we do.  This is used heavily in archaius to merge property sources and provides thread safety guarantees instead of having to externally lock getKeys() and call getProperty() when iterating a PropertySource.. I suppose we don't need this and can add it later if the need should arise. . Yes, this is mostly for backwards compatibility.  Long term I'd like to get rid of Config in favor of a PropertyResolver and PropertySource, similar to what Spring has.  This should ease the migration in the future as well.  Once this has been released I'll be making more changes towards introducing PropertyResolver and PropertySource derived interfaces. . nope. ",
    "vanithadevig": "when a property is added with delimiters and even though they are not changed/updated. \nEg: test.host=12.12.32.1,12.12.12.12 , \",\" comma being the delimiter\nEvery time archaius checks the properties it thinks the property is changed and triggers the property updated flow\ni have separated the new value which is returned as a String to an array like old value which is returned from the config.getProperty\n. @howardyuan there weren't any unit test for the file i changed, and it didn't break the existing test cases. if you could add one for previous functionality i can update the same to show my changes doesn't affect them. \n. @howardyuan  : please find the junit in the new commit 0854e41\n. @howardyuan This PR is the configuration update is called every time the dynamic updater and not for spaces inside a property. I have added the listener in DynamicPropertyUpdater and also the trim while creating the new array. Hope this helps you. \n. @howardyuan : DynamicURLConfiguration config = new DynamicURLConfiguration(0, 500, false, new URLConfigurationSource().getConfigUrls())  - URLConfigurationSource().getConfigUrls() will give me list of urls, so i used the file url itself to create the DynamicURLConfiguration object. hope this is change is ok for you.\n. @howardyuan the PR build is failing due to following error and not related to my commit changes \nFAILURE: Build failed with an exception.\n- What went wrong:\n  Could not resolve all dependencies for configuration ':archaius-jclouds:compile'.\n\nCould not download artifact 'com.google.inject:guice:3.0@jar'\nArtifact 'com.google.inject:guice:3.0@jar' not found.\n\nmight be a gradle problem : http://forums.gradle.org/gradle/topics/gradle_fails_to_download_dependencies_if_not_present_in_mavenlocal\n. @howardyuan any idea when the next release would be?\n. @howardyuan  : any updates yet?\n. @howardyuan i have a fix, the text is appending each time when you run the testcase, after the assert statement , i will revert the changes , so the text appended will be removed. \n. @howardyuan im unable to sync the forked repo from master, this is the fix for the file\npackage com.netflix.config;\nimport com.netflix.config.DynamicURLConfiguration;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport org.apache.commons.configuration.AbstractConfiguration;\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\npublic class DynamicURLConfigurationTestWithFileURL {\n```\n@BeforeClass\npublic static void init() {\n    System.setProperty(\"archaius.configurationSource.defaultFileName\",\n            \"test.properties\");\n}\n@Test\npublic void testFileURL() {\n    DynamicURLConfiguration config = new DynamicURLConfiguration();\n    Assert.assertEquals(\n            5,\n            config.getInt(\"com.netflix.config.samples.SampleApp.SampleBean.numSeeds\"));\n}\n@Test\npublic void testFileURLWithPropertiesUpdatedDynamically()\n        throws IOException, InterruptedException {\nFile file = new File(\"src/test/resources/test.properties\");\npopulateFile(file, \"test.host=12312,123213\", \"test.host1=13212\");\n\nAbstractConfiguration.setDefaultListDelimiter(',');\nDynamicURLConfiguration config = new DynamicURLConfiguration(0, 500,\n        false, file.toURI().toString());\nThread.sleep(1000);\nAssert.assertEquals(13212, config.getInt(\"test.host1\"));\nThread.sleep(1000);\npopulateFile(file, \"test.host=12312,123213\", \"test.host1=13212\");\npopulateFile(file, \"test.host=12312,123213\", \"test.host1=13212\");\nCopyOnWriteArrayList writeList = new CopyOnWriteArrayList();\nwriteList.add(\"12312\");\nwriteList.add(\"123213\");\nconfig.setProperty(\"sample.domain\", \"google,yahoo\");\nAssert.assertEquals(writeList, config.getProperty(\"test.host\"));\nobj.writeToFile(file, obj.readFile(file), false);\n\n}\nprivate void populateFile(File temporary, String prop1, String prop2)\n        throws IOException {\nString s = prop1 + \"\\n\" + prop2 + \"\\n\";\nwriteToFile(temporary, s, true);\n\n}\nprivate String readFile(File temporary) throws IOException {\n    FileReader reader = new FileReader(temporary);\n    StringBuffer str = new StringBuffer();\n    BufferedReader br = new BufferedReader(reader);\n    String s;\n    while ((s = br.readLine()) != null) {\n        if (!(s.equalsIgnoreCase(\"test.host1=13212\") || s\n                .equalsIgnoreCase(\"test.host=12312,123213\"))) {\n            str.append(s + \"\\n\");\n        }\n    }\n    reader.close();\n    System.out.println(str.toString());\n    return str.toString();\n}\nprivate void writeToFile(File temporary, String s, boolean appendToFile)\n        throws IOException {\n    byte data[] = s.getBytes(\"UTF-8\");\n    OutputStream out = null;\n    try {\n        out = new BufferedOutputStream(new FileOutputStream(temporary,\n                appendToFile), 8 * 1024);\n        out.write(data, 0, data.length);\n    } finally {\n        if (null != out) {\n            out.flush();\n            out.close();\n        }\n    }\n}\n```\n}\n. since config.getProperty(name) returns token for string where delimiters are added : like from http://commons.apache.org/proper/commons-configuration/apidocs/org/apache/commons/configuration/PropertiesConfiguration.html, a check is added here and to omit the normal strings\n. ",
    "jsmusgrave": "I'd love to see a release with this bug fix.\n. ",
    "qiangdavidliu": "Hi,\nArchaius does not support setting/changing properties at the configuration source, only at the container level where it is only persisted for the duration of the JVM.\nTo set znodes (in this case your configuration source), you will need to access zookeeper directly, either via Curator or any other method. You can take a look at this test example for some ideas of how to use Curator for this.\n. \ud83d\udc4d \n. \ud83d\udc4d \n. \ud83d\udc4d \n. It would be good to have a test case for this, that also checks and ensures the override behaviour when the same prop is defined in multiple config files.\n. \ud83d\udc4d . Would PropertyName be more intuitive?\n. @ Property is not yet taken. If you want a more uber annotation that allows definition of alternative names and optionally other attributes, how about that?\n. that's eclipse's problem:)\n. delete the \"-\" if there is no longer a trailing counter?\n. Public api removal. Is is safe?\n. This is a private field, so we can just delete it instead of deprecating.\n. Is this the right contract here? If the type is not a string, should the return be value.toString(), or just defaultValue?\n. That's a fair question, I'll have to look into why that's the case.\n. duplicate load of the file?\n. expectation should be for FileNotFoundException\n. ah cool\n. archaius2-core does not have a dependency on Guava\n. Why is the class layer not cleared here?\n. minor nit, naming is not consistent with the other 2 params.\n. \ud83d\udc4d \n. ",
    "vipinvijay": "Thanks for the clarification\n. Yes i was asking about Archaius's Zookeeper module. Thanks for the clarification.\n. ",
    "jbaiera": "Some extra info - I'm currently using archaius-core version 0.6.0, Running from IntelliJ IDEA v. 13.1.4, java 1.6\n. @howardyuan Thanks for commenting so quickly - I am primarily confused that it interpolates the value the first time, but not in updates down the line. Is there a reason for this? It seems slightly counter intuitive to me. Is there currently an alternative to DynamicStringProperty that does do the interpolation consistently? Thanks!\n. @allenxwang I was just thinking about this myself. I think there might be a slight problem with your approach. Correct me if I'm wrong, though. Here is my idea: \nSay that we have two properties, A and B. B is set to be what ever the content of A is (B=${A}). Lets say that we update the A property. In doing so, the raw value for A will be updated in the system, interpolation will be executed on it, and the result will be re-cached upon access. During the update event, the raw un-interpolated value of B has no changes at all.  Because of this, the the interpolated cached value of B in the DynamicProperty object will not be updated. The A property would have an fresh value, but B, a downstream property interpolated from A would remain the same; A stale value for B.\nI think to get something like this to work, you would need to invalidate the caches of all affected DynamicProperties on property update (as any property with a dependent property would need the chance to re-interpolate). This correctness may come at a cost though. I'm not entirely sure how poorly this will affect access times on configuration values that are being repeatedly hit.\nedit: spelling\n. One other thing I was unsure about - Are the Dynamic Property objects supposed to do variable interpolation in the first place? \nI noticed that the ConfigurationBackedDynamicPropertySupportImpl class is calling it's child configuration object's getString(key) and getStringArray(key) methods to get the initial property values. These calls are doing the initial interpolation. The updates that occur thereafter use only the raw property values from the event objects to perform the value updates. \nIf the original intent of the Dynamic Property object family is to act like a call to getProperty(key), then I feel that the calls in ConfigurationBackedDynamicPropertySupportImpl should be converted from the likes of getString(key) to more of getProperty(key). This would avoid the initial interpolation that causes the inconsistent state. This is the point that initially confused me. \nI hacked together a small object to verify my suspicions : \n``` java\nprivate static class ConfigurationBackedDynamicPropertySupportThatUsesPropertiesInsteadOfString implements DynamicPropertySupport {\n        private final AbstractConfiguration config;\n    public ConfigurationBackedDynamicPropertySupportThatUsesPropertiesInsteadOfString(AbstractConfiguration config) {\n        if (config == null) {\n            throw new NullPointerException(\"config is null\");\n        }\n        this.config = config;\n    }\n\n    @Override\n    public String getString(String key) {\n        try {\n            List<String> values = getStringList(key);\n\n            if (values.size() == 0) {\n                return config.getProperty(key).toString();\n            } else if (values.size() == 1) {\n                return values.get(0);\n            }\n\n            return Joiner.on(\",\").join(values);\n\n        } catch (Exception e) {\n            Object v = config.getProperty(key);\n            if (v != null) {\n                return String.valueOf(v);\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public List<String> getStringList(String key) {\n        Object value = config.getProperty(key);\n\n        List<String> output;\n\n        if (value instanceof String) {\n            output = Collections.singletonList(value.toString());\n        } else if (value instanceof List) {\n            output = new ArrayList<String>(((List)value).size());\n            for (Object o : (List<?>) value) {\n                output.add(o.toString());\n            }\n        } else if (value == null) {\n            output = Collections.emptyList();\n        } else {\n            throw new ConversionException('\\'' + key + \"' doesn't map to a String/List object\");\n        }\n        return output;\n    }\n\n    @Override\n    public void addConfigurationListener(PropertyListener expandedConfigListener) {\n        ExpandedConfigurationListenerAdapter nl = new ExpandedConfigurationListenerAdapter(expandedConfigListener);\n        config.addConfigurationListener(nl);\n    }\n\n    public final AbstractConfiguration getConfiguration() {\n        return config;\n    }\n}\n\n```\nThe class is mostly copy pasted from the original, and the getStringArray method is lifted and modified from the AbstractConfiguration object, only I've removed the calls to interpolate(value) and simplified the passing arguments. The program output no longer interpolates the value, and now functions identically to a call to ConfigurationManager.getConfigInstance().getProperty(key). \nDespite this, my original impression was that the DynamicProperty object family would perform interpolation of results. If that's not the case, perhaps a clarifying point in the wiki may be in order.\nFood for thought gentlemen. I appreciate the active responses so far! =) \nedit: cleaned up some of the attached code.\n. @howardyuan I agree that the documentation should be updated, but I also believe that with a code change the dynamic property objects could be reasonably consistent in functionality.\n\nI think the reason is that in static configuration world, interpolation is a common use case, however, in Dynamic property world, interpolation is not\n\nWhat I'm hearing here is that if I want variable interpolation in my properties then I should use the Configuration object to obtain it, but if I'm not looking for just raw updates to the value (no interpolation) then I should use DynamicProperty. Is this a correct assumption?\n. Sorry about disappearing off the map there for two weeks. I finally found some time to get back to this thread.\n@howardyuan Thank you for clearing up the point about the dynamic properties. After re-reading the thread I want to just restate my two proposed solutions:\n1. Interpolate the variable every time it is called\n   OR\n2. Do no interpolation of the variable at the start\nBased on your outlines above, and after some considerable thought, I totally agree that suggestion 1 would not be as performant, would definitely increase completely unneeded complexity of the properties section of the library, and finally, does not seem like it is the intended direction that the Archaius team wants to take the library. I think this is completely reasonable.\nThis brings me back to the second suggestion - Not doing the interpolation in the first place. From what I've seen, the Configuration interface allows for a getString() method and a getProperty() method. The getString() call will do interpolation, but the getProperty() will return the value from the configuration without performing any interpolation. To me it makes sense that instead of initially populating the dynamic property values with results from getString(), you could use getProperty() to avoid the first round interpolation. This would allow dynamic properties to remain just that, the raw property values that are updated dynamically, with no interpolation.\nPrimarily the concern from me around this point is that it feels as if dynamic properties are violating the principle of least astonishment in this regard.\n. ",
    "Castaglia": "Here's an initial pass at a fix:\nhttps://github.com/Netflix/archaius/pull/200\n. This was the only class which had an existing 'val property', thus the 'property' field was accessible.  The other classes did not use 'val', and thus their property name strings were not accessible.\n. Makes sense to me; I'll update the PR to use 1.9.0 specifically.\n. ",
    "avram": "This is working for us after @Castaglia's PR. Do you have a timeline on a release to include this substantial change?\n. The SDK was broken into many parts with this release-- you'll need to pull them all.\n. Update?\n. Great. Can you close this issue accordingly?\n. Do we intend to depend on a non-fixed version? All other dependencies are explicit versions, which strikes me as more correct for a library such as Archaius.\n. ",
    "supriyakoduri": "Yaah. My expectation is app.properties and app-dev.properties to override db properties with out of the box configuration. I am not expecting this because they loaded later, but that is my requirement. \nI am taking \"app\" and \"dev\" values from these  archaius.deployment.applicationId=app and archaius.deployment.environment=dev as I already mentioned. But I only get them when I install SystemConfiguration first, then if i load these properties files, they are taking next level in hierarchy, I want them to be top.\nDoes SystemConfiguration take care of loading these property files if we pass these archaius.deployment.applicationId=app and archaius.deployment.environment=dev ?\nor is there any way I can set my properties files to be top of the hierarchy , just I need to take the names from archius properties.\n. Hi,\n   Yaah, It worked. But I had to add this before adding my dbConfig.\nConcurrentCompositeConfiguration appOverrideConfig = new ConcurrentCompositeConfiguration(); \nfinalConfig.addConfiguration(appOverrideConfig,  ConfigurationManager.APPLICATION_PROPERTIES); \nAnd call  loadAppOverrideProperties(\"app\") after install .\nThanks.\n. ",
    "siminwang": "well... just noticed my post is missing the backslash escape character too.\nOriginal String : \"[^/\\#?]{0,1024}\"\nInitial load and retrieval of the property produces : \"[^/#?]{0,1024}\" (missing )\n. ",
    "tnaroska": "PR: https://github.com/Netflix/archaius/pull/214\n. ",
    "jsmodic": "Sure. I'll set one up soon.\n. That's reasonable. I'll update this patch.\nThough I think the same behavior is inherently altered as it's going to SLF4J instead of JUL (and I'd be surprised if most users were importing a JUL-SLF4J bridge). But I'm sure nobody wants more JUL!\n. ",
    "jakozaur": "Implemented review fixes. Also wonders about infinite loop. Maybe there should be some max ups.\nFor my use case it's fine, we got different part which increase DynamoDB throughput. We just need to be able temporary hold it gracefully. However, that might be not true for other users of this library.\nLet me know if you would like me to do something about it.\n. ",
    "brharrington": "@gorzell  The build was running on a pretty tiny machine. I changed the build to restrict to label hi-speed and the last run took 4 min 54 sec (https://netflixoss.ci.cloudbees.com/job/archaius-master/72/). So at least it should be unblocked for now.\n. How is property file loading supposed to work for a library? For the code I could depend on core, but if I provide a reference.conf with the library for use with typesafe config, it won't get loaded unless the end user happens to choose the typesafe binding. The flexibility with different bindings makes it hard to know what I can count on being supported and working for the end user.\n. Ok, that is a preferable from an API standpoint for me, so I'll close this out. I though you mentioned in one of the other threads that caused some caching issues though? Did you find another workaround for that?\n. This approach will still require using Module.override if something needs to be injected to create the initial AppConfig object. For example, say I wanted to inject DiscoveryClient to lookup the set of platformservice instances.\n. Can it just be a special case of calling withApplicationConfig? In which case if you do both it would be the same as calling withApplicationConfig twice on the same builder. It seems like this is mostly a question of what the builder makes convenient, if a user needs to have a config and load the configuration properties then they could just set the application layer to a composite themselves. \n. It would be nice if this provided more flexibility for the query so it could be configured to have the server filter out global properties. I currently generate a query that requires one of app, cluster, or asg to be set.\n. Right, but that will only match properties with all three fields explicitly set on the server. If I set a property with just the application specified, then it won't match. We currently generate a query that looks like:\n(\n  (asg is null or asg='' or asg='asg1') or\n  ((asg is null or asg='') and (cluster is null or cluster='' or cluster='cluster1')) or\n  ((asg is null or asg='') and (cluster is null or cluster='') and app='app1')\n) and ...\nWithout something like this a user would have to be very careful with how it was entered into platformservice or result to using client side filtering which means thousands of global properties that will get ignored are pulled down on every update.\n. I pulled this into my test app and it seems to be working. It also exposed some issues for properties with @ and typesafe config (#307).\n. I prefer option 1. \nHow are empty values currently handled? Would I have to set a default to @DefaultValue(null) or something similar?\n. Just curious why does archaius core have a concept of list delimiter and parsing at all? Since how a list is structured and parsed would depend on the file format, it seems like that should be left to the config implementations such as archaius2-commons-configuration, archaius2-typesafe, archaius2-json, archaius2-yaml, etc. \n. As a user I would expect the notion of a list to be based on the implementation used. So if I bind it to Apache commons I can set the delimiter using the commons configuration api, e.g.: \n``` java\n    public static void main(String[] args) {\n        Map data = new HashMap<>();\n        data.put(\"foo\", \"a,b\");\n        AbstractConfiguration commonsCfg = new MapConfiguration(data);\n        commonsCfg.setListDelimiter(',');\n        System.out.println(\"  commons:\" + commonsCfg.getList(\"foo\"));\n    Config config = new CommonsToConfig(commonsCfg);\n    System.out.println(\"archaius2:\" +config.getList(\"foo\"));\n}\n\n```\nThen when using the archaius2 api getList would be equivalent to the corresponding call of the underlying implementation. And at least right now that doesn't seem to work: \ncommons:[a, b]\narchaius2:[a]\nIn general setListDelimiter seems odd to me on the core Config interface. To implement Config I have to provide implementations of getList and when creating the instance of the concrete implementation I can parameterize it however I need. So maybe MapConfig should take a list delimiter, but for things like CommonsToConfig, TypesafeConfig, or say a JsonConfig a list delimiter param is not needed and feels out of place.\n. > To me, if we provide getList in core API, we need to provide a way to set delimiter as well.\nIsn't that assuming that a list is always stored as a string with a simple delimiter? Right now there are two sub-libraries providing bindings for commons configuration and typesafe config (see #266). Both of those already provide constructs for the user to get lists. It seems like archaius2 is going the direction of ignoring that and defining a list is always a string with a simple delimiter. This makes it confusing to use because now if I have a config file I have mapped in I need to ignore the docs for those libraries that tell me how to represent a list and realize that archaius2 will always just get a string and try to parse a list out of that itself.\nFurther, as a user it isn't a property I could ever safely use unless I can enforce how every property in my system chooses to encode a list as a string. Suppose I have two libraries one assuming commas and one assuming spaces either using annotations as shown below or in property files: \n``` java\n@Configuration\ninterface ConfigFromLibraryA {\n    @DefaultValue(\"a,b\")\n    List foo();\n}\n@Configuration\ninterface ConfigFromLibraryB {\n    @DefaultValue(\"a b\")\n    List foo();\n}\n// As a side note, it would probably be better to allow the default value to simply be an array if the type\n// is a list. In which case this is another example where the setting isn't needed.\n@Configuration\ninterface ConfigFromLibraryC {\n    @DefaultValue({\"a\" , \"b\"})\n    List foo();\n}\n```\nIn this case at the very least the parameter should be limited to a specific leaf in the config tree and not assumed to be global for everything in the CompositeConfig or that the setting should be blindly propagated to all sub-configs.\nTo me the user of Config knows there is a property with a value that is a list. That user doesn't necessarily know where the property came from or how it was encoded as a list. So having them set a flag for how to parse a list doesn't make sense.\n. Not sure about maven central, but it is in the bintray jcenter repo:\nhttp://jcenter.bintray.com/com/netflix/archaius/archaius-core/0.7.2/\n. That looks like an issue with the container, see this similar issue for guava:\nhttps://code.google.com/p/guava-libraries/issues/detail?id=1433\n. For reference, here are some previous discussions on this for other projects: https://github.com/ReactiveX/RxNetty/issues/292, https://github.com/Netflix/ribbon/issues/206\n. The InterpolationTest added doesn't seem to cover the actual change. If I understand correctly, it is changing ${foo:-DEFAULT} to be ${foo:DEFAULT}.\nWhat is meant by the standard :? Is that syntax used somewhere else? The :- pattern is more familiar to me as it is used by bash for default values as part of parameter expansion:\nhttp://wiki.bash-hackers.org/syntax/pe#use_a_default_value\n. Thanks for the explanation. I'm not opposed to the change, just curious about the motivation. There is no reason to try and support multiple ways of specifying defaults on my account. I think it is better overall to have a single way as it reduces the amount of stuff a user would need to learn.\n. I think it is always assumes a simple delimited string. There is some related discussion in #266 and #360.. My guess is that it is because you are creating many instances of DynamicStringMapProperty. Typically you would create one instance and reuse it.\nhttps://github.com/Netflix/archaius/blob/master/archaius-core/src/main/java/com/netflix/config/DynamicPropertyFactory.java#L26. If you follow that pattern, then there isn't any reason to use DynamicProperty. Just get the value from the config directly. I think you will have a memory leak with the code above because it registers callbacks for each instance of the dynamic property that is created (see the comment).. Not related to the specific change in this PR, but shouldn't this do something like:\njava\nreturn new BigInteger(value);\nSo the value doesn't have to fit within a Long?\n. Same as with getBigInteger, but it seems really strange here to force a conversion to Long first.\n. s/interator/iterator/\n. For a given update is it guaranteed that only one of the onConfigUpdated variants will get called? Is this variant really needed? It seems like listener implementations would need to implement the other variant and not expect to get the propName explicitly anyway. \n. This method behaves differently than the others if there is no value for they key. The others with no default throw NoSuchElementException, this one is treating it as a default of null.\n. Is there any reason the other getXXX methods cannot delegate to the one for the generic class? For example:\njava\n@Override\npublic Short getShort(String key, Short defaultValue) {\n    return get(Short.class, key, defaultValue);\n}\n. Is this intentional?\n. Why does this method ignore null values where the others in this builder throw?\n. What is the rationale having the public constructor that takes an AppConfig and this method?\n. I haven't needed to do it yet, but I'm curious, how often is it expected that the user will  need to customize the ConfigMapper?\n. If I'm reading this correctly this is now the override layer. Can we name the variable override so it is easier to follow the code?\n. There is still a NAME constant with this value, why is the string used directly?\n. Should this be using the NAME or ROOT constant?\n. What is the rationale for not providing the option of leaving out system properties and environment variables? For test cases especially I would prefer to leave these out so I know my test case is isolated.\n. I don't think this actually solves the problem Brent was asking about. He wants to set the Config used for the APPLICATION layer, or at least be able to add a Config to it if it was a composite.\n. Is there any reason to explicitly set to the default?\n. Shouldn't this pass the exception to the logger so the user will know what the failure was?\n. s/INSTNACE/INSTANCE/\nShould this class be final with private constructor?\n. s/Interplotor/Interpolator/\n. EmptyConfig.INSTANCE?\n. If I'm reading this right it would add empty parens if one of the scopes is empty, e.g.:\njson\n{\n  \"scope1\": [\"foo\"],\n  \"scope2\": [],\n  \"scope3\": [\"bar\"]\n}\nWould lead to a query like:\n(scope1='foo') () and (scope3='bar')\n. Is there a reason for using the string null instead of having null mean null?\n. When using archaius1 if I call:\njava\nConfigurationManager.loadPropertiesFromResources(\"a.properties\");\nConfigurationManager.loadPropertiesFromResources(\"b.properties\");\nThe settings from b.properties will override settings from a.properties. This implementation reverses that. In some cases we rely on that ordering for things like account specific overrides.\n. I tried to reproduce in a simple test case using the OSS lib directly and A overrides B. However, if I use NFLifecycleUnitTester so it gets bound to NetflixConfiguration I see B override A.\n. I'm not sure that will help. My goal is to have consistent behavior and make sure the libraries are doing the right thing (or at least what they are expected to do) when using archaius1, archaius1 w/ netflix-configuration, or archaius1 over archaius2. From the perspective of a user the order cannot be relied on because I don't necessarily control how the configuration was setup. \nI'll update my use-cases so I don't make any assumptions about the order. Not sure how much this will impact others, but I'm guessing there are quite a few places where changing the order will break existing apps either intentionally or accidentally. If possible for the bridge it seems like matching the behavior of NetflixConfiguration would probably cause the least surprise.\n. Personally, I would prefer archaius2 have a single order that is always used for a CompositeConfig as it is easier to reason about. Is the reverse order change actually desirable for any reason other than trying to mitigate the pain of migrating from archaius1?\n. > Unfortunately we do have to deal with the reality that there are two different override orders in use today.\nWith the legacy library that is true, but it could be dealt with specific to the bridge rather than making it true when using 2.x directly. To me this seems like a confusing aspect of archaius1. \nIn terms of archaius2, my concern is that as a library author I can't make a lot of assumptions about how an application owner will setup the Config. Before if I had code like:\njava\n@Inject\npublic Foo(@LibraryLayer CompositeConfig config) {\n  config.addConfig(getConfig(\"a.properties\"));\n  config.addConfig(getConfig(\"b.properties\"));\n}\nI could tell that A would override B. Now a library owner can't determine which one will override. I can work around the problem by creating my own composite instance and adding that as a single addition to the library layer. It just seems like this adds a lot of potential for mistakes and confusion when using archaius2.\n. It would be handy to have archaius in the thread name so it is easier to spot at a glance and realize it is an archaius poller and not a poller for something else.\n. Does this change the way the bridge module is supposed to be used? In one of our apps it looks like the bridge isn't working after picking up a more recent RC.\n. s/but but/but it/\n. If the config is broken would it make more sense to throw an exception? The stderr maybe directed somewhere other than the primary log and so it seems like this would be easy to miss. And if the application isn't configured correctly failing outright would probably be better than coming up in an odd state with strange or broken behavior because configuration wasn't working correctly.\n. Just curious, why does this class use logging but StaticAbstractConfiguration is being changed to System.err?\n. What is the rationale for keeping this class around?\n. s/it's/its/\n. s/ that//\n. s/bindger.requriesBinding/binder.requiresBinding/\n. Shouldn't this be done in the bridge?\n. Having equals throw to enforce a singleton module policy seems unintuitive. Does this really add much over the normal duplicate binding for Config error? \n. Why does this take a Set? Since this.loaders is a List multiple calls can still result in duplicates.\n. I thought there was a recommendation to discourage sub-classes and if possible make the module final. In particular, how does the deduping still work if a module is registered along with a subclass of that module?\n. Based on the name, I would expect this to load from the file system rather than a class loader. Perhaps change to fromResource instead?\nIt would also be useful to have a comment indicating the behavior if multiple resources with the provided name are in the classpath. For example, in archaius v1 the helpers would use getResources and load all of the matching property files. In this case it only gets the first one that is found.\n. > I could modify the implementation to consider classpath as well as file system.\nIn most of the APIs I have seen, files vs resources are separate and the user explicitly chooses. So if both are needed I would expect two methods, something like:\n- fromFile\n- fromResources\nExamples from other libraries, guava has both Resources and Files helpers:\nhttp://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Resources.html\nhttp://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Files.html\nTypesafe config has separate methods on the factory:\nhttp://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html\n\nWhat, in your opinion, should be the expected behavior if there are multiple matching files?\n\nThe others I have looked at archaiusv1 and typesafe config both merge. I'm not sure of the override behavior for archaiusv1, but the typesafe config the first encountered has priority. However, there is no guarantee of the order they will be found in scanning the classpath.\nI would probably choose to fail or load all and merge. The main argument for merge is that it seems to be more consistent with other libraries. It is just a helper so the user can always implement their own method to load the properties object if they need custom behavior. I think the most important thing is that the behavior is clearly indicated to the user.\n. Out of curiosity, why does it create a new exception with the expected values just to wrap it? Couldn't the expectation just be appended to the message for the ParseException?\n. The wording no longer matches the header. It might be better to use the ... here like you did on Not using expected bridge!!!.. Minor suggestion, consider calling it something other than static (immutable perhaps). Given the widespread use of static variables with archaius1, my first thought when seeing the PR title was completely different from what is implemented here. I think a different name would help avoid confusion when discussing it.. ",
    "shanman190": "I can get behind not wanting to have to register each type individually. Is there a composite decoder implementation that I missed somewhere or is that a challenge left up to the developer? \nThe Spring conversion service is an interesting concept. Do you have any thoughts on what that would look like?\n. I think that, as far as separation of concerns goes and for consistency, it would be best to have a decoder for each primitive type. However, I think we would need to come up with a mechanism to solve @spencergibb original problem of not wanting to have to register each type individually.\n. ",
    "andrewduckett": "Regarding separation of concerns, I noticed AbstractConfig is also doing some type conversion work when using the type specific gettes.  Is the goal that these methods should take advantage of the provided Decoder? Or are they expected to handle conversion?\n. ",
    "adohe": "@elandau I mean archaius now use poll to fetch configuration information from source, any possibility to implement push?\n. ",
    "NiteshKant": "\n\nHow common is the case of needing to load both?\n\n\nVery very common, unless it is a greenfield development project. Archaius is used in libraries and these libraries use different versions of archaius. If we can only tolerate a single version of archaius in an application, no library with a new archiaus version can be released till every other library move to the new  version, which quiet understandably will be a herculean task :)\nHaving different module names (appending the version) is the path of least resistance from the point of view of build and publish and we are following this model in karyon, eureka and any other project that is changing major versions with incompatible APIs.\n. ",
    "kukgini": "I made pull request for this.\n. I misunderstood behavior of Boolean.getBoolean(). This pull request must be ignored.\n. ",
    "tbak": "This change makes proxy creation much simpler and compact.\nDoes it make sense to have an interface for ConfigProxyFactory? Current implementation is tied to Java-style properties. For JSON configuration files or INI  file format one might wish to provide different mapping mechanism. PropertyFactory has more generic contract, which does not enforce a specific property name formatting.\nThere is a TODO about subproxy. It would be very useful feature, that would allow for hierarchical configuration. Any chance to get it soon? For example Eureka2 has a configuration that is actually a composition of a few different, subsystem specific configurations, but now merged into single class implementing all configuration interfaces.\n. Looks good\n. You can get all methods via Class.getMethods() call.\n. ",
    "killme2008": "@howardyuan @elandau   Updated the PR, please review it again.\n. Thanks for your reviews, i will fix them and update the PR.\n. ",
    "gopircr": "I agree with you that we should not be introducing any overhead in the getValue().   Your solution seems pretty good and will satisfy 99.9% of the use cases where eventual consistency is tolerated.\n. ",
    "jaume-pinyol": "Thanks for your help!! I actually didn't check there, I checked the bintray frontend and it wasn't there so I though it wasn't in the repo. I've solved the issue ;) \nClosing the issue\n. ",
    "pstout": "LGTM\n. LGTM\n. The null check for the prop field is unnecessary.\n. This method could be just the previous body of the get method: return prop.getBoolean(defaultValue).booleanValue().  The boxing and unboxing that will occur when the property value changes will be off the hot-path and a minor overhead for clearer code.\n. nit: false --> zero\n. nit: false --> zero\n. nit: false --> 0.5\n. nit: false --> 0.5\n. Rather than adding this callback here, you could just override either of the propertyChanged methods and then update the PropertyWrapper class to not add this class to the SUBCLASSES_WITH_NO_CALLBACK map.  This would be cleaner and probably result in less overall code.\n. I wasn't suggesting reverting the change to the get method, which is what your new test is effectively doing, but rather to put the old code from the get method into the new chooseValue method.  There it would be execute just once per property value change.\n. Consider adding an assert to verify that the value of cascading is \"type\".  You never actually verify that multiple property values are parsed correctly. :-/\n. Are you intentionally testing that the last property loads when there is no trailing new line?  If so, I would add a comment explaining that fact, otherwise consider adding a newline to get rid of the angry red icons.\n. Looks like the Javadoc has drifted from the actual name of the attribute.\n. I don't understand the value of extracting this method from the public apply method.  Why just mark the parameters of that method final and remove lines 42-45?\n. The finality of arguments is specific to the method implementation.  It does not matter how the interface declares them.\n. Consider omitting the explicit mention of the Config interface, given that SettableConfig extends Config.\n. @Override\n. If you have a three class hierarchy, C extends B extends A, I think that this loop will result in class level annotations being prioritized as C over A over B.  Put another way, I think that you need to process the list by getAllSuperclasses in reverse order.\n. Is it worth holding on to a direct reference to this configuration to avoid the down casts to SettableConfig later in the class?  Alternatively, consider adding a private helper method, getSettableConfig, that localizes the downcast to that method.\n. Could be helpful to trim each of the parts?\n. Consider adding a unit test to verify the fix for the class annotation ordering issue I mentioned earlier.\n. ",
    "sarginm": "Sorry for the limited information.\nI am trying to Poll Consul KV store to update my configuration file. I have implemented the polling using FixedDelayPollingScheduler. Here is  the code snippet.\npublic class ConsulConfigurationSource implements PolledConfigurationSource {\n```\nConsulClient client = new ConsulClient(\"127.0.0.1\");\nKeyValueConsulClient keyvalueclient = new KeyValueConsulClient();\npublic ConsulConfigurationSource(KeyValueConsulClient keyvalueclient) {\n    this.keyvalueclient = keyvalueclient;\n}\n/*\n * Create a full result that represents the complete content of the configuration source.\n * @param  map that contains all the properties\n / \n@Override\npublic PollResult poll(boolean initial, Object checkPoint) throws Exception {\n    //Thread.sleep(200);      \nMap map = load(); \nreturn PollResult.createFull(map);\n}\nsynchronized Map load() throws Exception {    \n    QueryParams queryParams = new QueryParams(\"dc1\");\n    Response> valuesList = keyvalueclient.getKVValues(\"\", queryParams);\n    Map map = new HashMap<>();      \nfor (GetValue item : valuesList.getValue()){\n\n     String Kvalue = item.getValue();\n     String Key = item.getKey();\n     map.put(item.getKey().replace('/', '.'), getDecoded(Kvalue));\n  }\n\nreturn map;\n\n}\n```\n}\nHere, I am Initialising the Scheduler:\nConsulConfigurationSource source = new ConsulConfigurationSource(keyvalueclient);\nAbstractPollingScheduler scheduler = new FixedDelayPollingScheduler(0, 10, false);\nDynamicConfiguration configuration = new DynamicConfiguration(source, scheduler);\nDynamicPropertyFactory.initWithConfigurationSource(configuration);\nThe above code, starts the polling and continuing around 30 to 35 times then automatically stops the polling.I could not find any time limitation in the scheduler.\nPlease help me to understand, why the polling fails.\nThanks in Advance.\n. I had added a counter variable to check the number of times , the poll method is being invoked. After these random number of times,  the scheduler is calling stop() method, which stops the poll execution.\nAnd Yes, the main thread is also getting terminated.\n. I just went through the stack trace and found the archaius-core/src/main/java/com/netflix/config/DynamicConfiguration.java  class is calling stopLoading() method, which in turn calls the scheduler stop() method.\nThanks for your time.\n. ",
    "drtechniko": "@elandau and @howardyuan Tests look good. Please have a look and let me know.\n. Fixed with the new commit.\nIf all else is cool I will merge.\n. ",
    "twicksell": "Resolved in https://github.com/Netflix/archaius/pull/411\n. The build failed because we don't have the travis stuff committed on the 2.x branch. We'll have to cherry pick that commit off of master and merge it to 2.x\n. Overall lgtm, but I feel like there is some javadoc or a wiki page that should be updated to point out the caveat of not using @DefaultValue and a default method. Does @Configuration describe these options?\n. :thumbsup:\n. :thumbsup:\n. :thumbsup:\n. #491 . \ud83d\udc4d . The apply method is coming from the TestRule interface, where unfortunately the parameters are not final. \n. Should also document the PropertyName annotation\n. Too many dots?\n. You are correct, thanks! \n. Added\n. Strange that we should need this. Decoder should have a method supportsType to determine if the decoder implementation you're using supports the type.\n. Bad merge, thanks\n. It gets wrapped up in TestConfigException along the way, but the cause is still FileNotFoundException\n. Maybe I could've said test method, the naming leaves a lot to be desired here, especially when I'm trying not to tie myself to JUnit conventions specifically. But this is intentional. \n. Do we absolutely need this here? It doesn't match up with the Spring one, so just questioning if it really needs to be here or if its good enough on Config or some other sub-interface. Doesn't application-override typically beat remote? . Why do we need to keep this concept around? Is this truly necessary for a new API? . Long-term what happens to the Config interface? Would we even want to keep it? Will we continue to expose bindings for it? (beyond whatever is needed for backwards compatibility). Nevermind, mixed up runtime and application-override in my head.. We need data from InvocationHandler which isn't passed down through the MethodInvoker interface in that map. Doesn't really seem worth refactoring all of that. . ",
    "jhspaybar": ":+1: \n. This should address https://github.com/Netflix/archaius/issues/486 .  We still use exceptions for flow control, but just don't make the stack which is the expensive part.. @elandau the issue is this block \nprotected <T> T getValueWithDefault(Class<T> type, String key, T defaultValue) {\n        try {\n            return getValue(type, key);\n        } catch (NoSuchElementException e) {\n            return defaultValue;\n        }\n    }\nit doesn't bubble an exception outside of archaius, but the throw/catch here to use the default value is actually what causes the excess CPU usage.. Does this need a default implementation so it's backwards compatible?\n. Can we assert order on an unsorted set?  I'd assume not.\n. ",
    "costimuraru": "@howardyuan, yup. I'm going to do it in the 2.x branch if that's ok with you guys.\n. Indeed it is @howardyuan.\nOne issue though: java.time.Duration comes with Java 8. I can see that archaius2 is built with Java 7. As you probably know, Java 7 has reached end of line as of April 2015 [0].\nDo you see a problem with upgrading to Java 8? The alternative for me is to keep the changes on the fork, which is not very practical :-)\n[0] https://java.com/en/download/faq/java_7.xml\nLE: Only the archaius2-typesafe module needs to be upgraded to Java 8\n. Thanks for the feedback, @elandau. Made the suggested change.\n. ",
    "hieurl": "Thanks for the comment @howardyuan \nI created the multiple table test class separately to avoid breaking the other tests since with multiple table, the number of mock scan request is different than single table\n. ",
    "matveym": "@howardyuan Indeed I could strip out spaces myself, thanks a lot for the suggestion.\n. ",
    "kornkreismuster": "You got a slash too much within your Url.\nIMHO you need to configure \"file://Users/rramakrishnan/innovation/innovation-third.properties\"\nI made the same mistake and it took me hours...\n. ",
    "mebigfatguy": "Was it found in the wild? no.. ",
    "alainkr": "Sorry but I don't get it. I have a config.properties file for some basic default for hystrix.\nNow we 'd like a rest service to momentarily change the configuration on the fly.\nHow would I code that ? \nI tought  \nConfigurationManager.getConfigInstance().setProperty(key,value);\nWould do. but it doesn't when using config.properties. If I don't use config.properties it has the behavior I except. What am I missing ? Thanks.\n. ",
    "billyy": "No.  My question is about if archaius can poll only the properties that\nhave been changed.  For example, if I have 100 properties and only 3\nchanges, archaius will only get 3 new values at the next polling interval\ninstead of all 100.\nThanks\nOn Wednesday, July 6, 2016, Howard Yuan notifications@github.com wrote:\n\nAre you asking if the property changes are updated through push or poll?\nCurrently, it's through polling at the polling interval.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Netflix/archaius/issues/425#issuecomment-230916217,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ADHgLABlZyYKQ9lqSvjYPsTru-uhGLQpks5qTCFagaJpZM4JGbs_\n.\n. \n",
    "agentgt": "Not the logging binding but the configuration. For example lets say you are publishing messages to Kafka or RabbitMQ (e.g. an Appender that needs config) you need the configuration of that server information. \nIn some cases we use LogBack and some cases we use legacy Log4J. The most reliable way to configure both of these is through System Properties. Consequently when are apps boots up it loads properties and will set some System Properties before anything else gets loaded (passing system properties on the command line is insecure). And this isn't just for logging as some legacy libraries use System Properties (this is because there isn't  a standard way to get configuration like there is for logging (e.g. SLF4J or java.util.logging).\nSLF4J offers no way to intercept the binding. It is static and allows no hooks. I have ranted about this annoyance for some time (http://mailman.qos.ch/pipermail/logback-user/2016-June/004781.html).\nRegardless even if SLF4J did support interception there are many high performance libraries and applications that prefer not do any initialization of logging but still would like some way to do configuration (otherwise we are back to System.properties). Initialization is so slow for Logback I pushed for Ceki to add a Service Loader implementation (https://github.com/qos-ch/logback/pull/181). \nReinitializing logging is even more detrimental and fairly unreliable (dropwizard has had many issues with this IIRC).\nLuckily the API does zero logging so for now we can just fork archaius2-core.\nOther more sophisticated components (e.g. Hibernate, Spring or even other more complicated archaius components) using SLF4j I acceptable because initialization of core configuration is done by then.. Also Typesafe config does zero logging so clearly a configuration framework can be written with out needing logging.. I figured out a simpler way that requires less code if you want to get the dependency to SLF4j:\n```java\npackage com.netflix.archaius.api.log;\nimport java.util.ServiceLoader;\nimport org.slf4j.ILoggerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.NOPLoggerFactory;\npublic interface LoggerService {\npublic static class InternalLoggerFactory {\n\n    /*\n     * Simply prefix Internal in front of LoggerFactory:\n     * So instead of:\n     * Logger logger = LoggerFactory.getLogger(MyClass.class);\n     * It should be:\n     * Logger logger = InternalLoggerFactory.getLogger(MyClass.class);\n     */\n    public static Logger getLogger(Class<?> clazz) {\n        return getILoggerFactory().getLogger(clazz.getName());\n    }\n\n    public static ILoggerFactory getILoggerFactory() {\n        return LazyHolder.INSTANCE;\n    }\n\n    //We should not load unless we are requested to. This avoids accidental initialization. @agentgt\n    //See https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n    private static class LazyHolder { \n        private static final ILoggerFactory INSTANCE = InternalLoggerFactory.createFactory();\n    }\n\n    private static ILoggerFactory createFactory() {\n        /*\n         * You could also use a system property or static variable for resolution as well.\n         * The following looks for a file located here:\n         *  /META-INF/services/LoggerService.getPackage().getName()\n         * With the name of the class as a single line that implements LoggerService.\n         */\n        ServiceLoader<LoggerService> loader = ServiceLoader.load(LoggerService.class);\n        for (LoggerService ls : loader) {\n            return ls.createLoggerFactory();\n        }\n        return new NOPLoggerFactory();\n    }\n\n}\n\npublic ILoggerFactory createLoggerFactory();\n\n}\n```. ",
    "Aloren": "\nCan you elaborate a bit more on your use case and context?\n\nIn our application there are a lot of libraries that fetch settings in different ways. Sometimes it becomes really difficult to track which settings are actually used by application. \n\nmany users don't use DynamicProperty to get the properties. Instead, they access the properties through configurations directly.\n\nOk, I understand. Maybe there is another point where I can surely know that setting was requested by application?\n\nAnother thing I worry about is that now you're tagging everybody with some extra overhead\n\nThis feature can be optional, by default it will be off.\n. ",
    "Orxcle-xx": "Solved by using Reflection and calling updateProperty directly.\nSince I use it in my test code, I find it as acceptable solution.\nMy issue might be considered closed.\n. ",
    "ViktorStolbovoy": "I had the same issue. It was caused by \"blah: false\" property in bootstrap.yml config file. . ",
    "mblasi": "It would be really interesting tool! Is this WIP?. I'm testing it right now! I'll back with my feedback and questions. Thank you very much!. ",
    "clun": "it's ready and working. Please find here a working sample:\nhttps://github.com/clun/ff4j-samples/tree/master/ff4j-sample-archaius\nFF4J is about 10k download per month from Central and I was surprised with the \"no reaction\" effect of this entry. Any feedbacks are more than welcomed.\n. It's working as expected, test it if you wish, I can close this issue. ",
    "pkwarren": "@howardyuan - Opened #470 with a proposed fix for these issues.. @howardyuan - Have you had a chance to look at this PR?. Since other threads could add new callbacks while removeAllCallbacks is processing, this is just extra protection to prevent removing callbacks from the set that haven't had removeCallback(Runnable) called on them.. ",
    "mattnelson": "Is there documentation on the features where archaius breaks compatibility with commons-config? The configuration manager returns an instance of the commons-config interface so the assumption would be that the implementation is compliant with the interface.\nhttps://github.com/Netflix/archaius/blob/v0.7.5/archaius-core/src/main/java/com/netflix/config/ConfigurationManager.java#L179. Took a stab at implementing this for configuration url sources only. Please consider accepting this change. Turned out to be a pretty strait forward implementation.. ",
    "afrin216": "+1. @elandau Can you merge/prompt someone to merge this? We would really like to integrate this feature into our project. . ",
    "sudr": "We ran into this because commons-configuration brings in commons-lang while commons-configuration2 brings in commons-lang3. We'd prefer to not have to bring in common-lang to steer develops towards commons-lang3 in our application.. ",
    "sachinmaheshwari": "That's exactly what I'm trying now. I noticed that for every instance it is creating a callback handler which is never collected by GC. Hence that could be the reason. \nI have deployed one fix on my servers which is using only one instance. I will update my findings here.. And that works no more memory leak. Thank you. \nClosing the issue.\n. ",
    "eRfO": "Most likely I have implemented in the wrong way PollingResponse class, i will try to rewrite the logic.. ",
    "mmlac-bv": "Pinging @gorzell @elandau. Any feedback or can you merge this? \nScala 2.12 is out for 10 months now and archaius-scala doesn't work on it in it's current state.. ",
    "wuxianInfi": "If we don't use callback, should it works rightly? Or can we use a cache (e.g. ConcurrentHashMap) to store the created PropertyWrapper(DynamicStringProperty) to void the memory leak problem?. ",
    "Helmsdown": "+1. ",
    "ravikancherla": "That is correct. I am actually getting the issue from archaius-core jar which is trying to access all the system properties by instantiating system configuration. ",
    "shengang1978": "By reading the source code, store the source and the scheduler and call the startPolling to refresh all the values. \nDynamicConfiguration cfg = (DynamicConfiguration)DynamicPropertyFactory.getBackingConfigurationSource();\n        if (cfg != null)\n        {\n            if (source != null && scheduler != null)\n                cfg.startPolling(source, scheduler);\n}. ",
    "ernestopin": "Hey, I have a similar problem! Is there any released version having corrections for this? Below is my dependency tree for it:\ncommons-configuration:commons-configuration:1.8\n--- com.netflix.archaius:archaius-core:0.4.1\n     --- com.netflix.hystrix:hystrix-core:1.5.12\n          +--- compileClasspath\n          --- com.netflix.hystrix:hystrix-javanica:1.5.12\n               --- compileClasspath\n. ",
    "davidcarltonsumo": "We're seeing this, too, and my diagnosis (before I found this bug) was the same.  https://stackoverflow.com/questions/4612492/static-initializer-and-static-synchronized-method-locking-issue I think talks a little bit about the locks there (in the second edit to the accepted answer) - even though one of the threads is runnable, it can't make progress because of the internal lock you mentioned.. ",
    "AnthonyClink": "@agarwalsanchit1 how would you handle json object arrays?\n```json\n{\"people\": [\n {\"firstName\": \"Anthony\", \"lastName\": \"Clink\"},\n {\"firstName\": \"Tony\", \"lastName\": \"Blink\"}\n]}\nwould you want people[0].firstName\nwould you want people[1].lastName?\nHow would you represent this?\nRemember that json is an object graph not a flat key value store.. ",
    "agarwalsanchit1": "@AnthonyClink It's achievable. In the case, I would consider each attribute of the index location as a single attribute.\nI would share the implementation within a week.. @gorzell Thanks for suggesting it. I worked on your approach and it did not suit our requirements. \nOur project is based on the JSON-based configuration management system. We require a functionality to reload all the configurations if any changes have been made. There are lots of configurations files and all of them are onto S3 to support externalization.. @gorzell  We are using 2.0 version of Archaius. All the configuration files are placed inside the jar file and some of them are placed individually onto S3 and within the project itself.\nFollowing are the features to be implemented within the Netflix Archaius to support our project requirements:-\n\nTo read JSON and properties based configuration files from JAR file.\nTo read individual JSON config file from S3 and within the project.\n\nI will share the code within a week for reviewing purpose. Is it Okay :). I will fork 2.0 version of the Archaius branch and will commit the added code over there.. ",
    "akhaku": "@twicksell - we discussed adding a method to the Property interface, but I'm not too sure how I feel about adding a factory (default) method to an interface, so I opted to stick with the separate implementation.. Absolutely, so a couple different use cases:\n1. In tests, to test methods that use a Property, it's helpful to pass in a static property instead of mocking or having an overloaded method.\n2. In some non-DI cases (eg static instantiation for local development), we don't have Guice/other DI and so don't have a way of fetching a PropertyRepository. For those cases, it makes sense to have a static property to get the code working, albeit with default values for properties.. Hm, interesting - we've done something similar in our code, where we have an interface that is implemented using an Archaius PropertyRepository. For non-DI (static creation for local development) we don't pass in a RepositoryFactory and instead initialize properties to static values, but we could instead use a DefaultPropertyFactory and have that use a SettableConfig. I'll give that a shot and add you to the PR so you can take a look, if you're curious.. ",
    "jeffreymyers": "Not sure. I was trying to be conservative to avoid making a breaking API change.\n. Do you have a suggestion on how to do a deep copy for an arbitrary type? I don't know of a good way to do it in Java. Hopefully this will mostly be used through the DynamicStringSetProperty subtype, making the inner-values immutable.\n. ",
    "kerumai": "Actually, all of the overhead does seem to be caused by this. I've added another benchmark comparison to the CachedPropertiesPerfTest to illustrate. eg:\nOriginal DynamiceBooleanProperty totalled 7087 ms.\nNew DynamicBooleanProperty totalled 1252 ms.\nNew DynamicBooleanProperty with old get() totalled 7129 ms.\n. Yes that is a much better way of doing it. \n@howardyuan - i've made this change to the PR. Does this satisfy your concerns around my previous usage of the callbacks?\n. Ah I see what you mean now. Sorry for the confusion. I'll do that now, thanks.\n. Although creating alternate cached properties would work, I'm concerned that few teams will make the change to use them. And for large systems with many libraries using the existing properties, it ideally would be the choice of the system owners to change this globally for their systems, rather than have to get each library owner to change it in turn.\nTaking a look at a large system in prod, jmap shows me ~8000 instances of Dynamic(Boolean|Long|Int|Float|Double)PropertyS, which if 1 instance of a callback conservatively adds 32 bytes, would imply a memory increase of only 256 kB. This seems a reasonable overhead increase to me.\nAnd the overhead of invoking the callback only happens when a property value is changed, which does not happen frequently, and does not happen on the critical path.\nSo it's ultimately you call, but I think pro's outweigh the cons for making this change to the existing impls.\n. Yeah thats true. Will change that now.\n. Absolutely.\n. ",
    "tcellucci": "why not?\n.  afaik best practice for apis that return collections is to return an empty list / map / set rather than null; can we do that here?\n. why so specific?  List?. why is the value cached from a supplier versus reading it each time?. can elide prime * result here; value is usually 31 at this point.. casting would be faster.... nit: semantically 'Subscription' isn't a very obvious result from the 'onChange' method; would 'subscribe' work as the method name here?  What is the terminology in RexJava?. doesn't this need to be explicitly public for appropriate visibility?. this will work ok for call low-volume, but a linear search for the methods by names isn't the greatest.  It'd be cleaner to put the Object.equals, .hashCode and .toString Methods into the invokers map with the others and make a lambda implementation of the internal MethodInvoker interface for each Object method. "
}