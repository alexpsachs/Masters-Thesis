{
    "BorisMoore": "Thanks! Fixed in https://github.com/BorisMoore/jsrender/commit/ffa70329349a243ee12d5b703da9f7562d907732.\n. ${foo} should HTML encode, but not URL encode. \nUse {{html foo}} if you don't want any encoding. If you want it to url encode you should write your own URL encoding function, and use {{html myNamespace.myUrlEncode(foo)}}.\nThat said, I don't know what you are doing to end up with encoding of {{if as %7B%7Bif. It looks like you are encoding your template before using it.\n. Yes, you should check the correctness of the template, and ensure it did not get encoded by your 'ajax pipeline'.\n. I don't understand why you are doing tpl = $.tmpl(tpl, AD).html(); or tpl = $(tpl).render(AD); There is not enough context in this issue to know how you are using templates, and where your problem is coming from. \nSo I will close this issue. JsRender does not encode { or }. If you sure that you are seeing a bug in JsRender and not in your app, you would need first to create a very simple test case in JsFiddle, showing how JsRender incorrectly encodes url slashes; - showing that the encoding error is happening within JsRender.\n. a) don't load jquery.render.js and jquery.tmpl.js on the same page. They are not designed to be used together in a page. For a given page, choose one or the other.\nb) To load a template from a string, first compile as a named template, then render the compiled template using $.render( template, data ), not $( template ).render( data ) - which is  designed for the case where the template is declared in a script block, rather than coming from a string:\n$.template( \"myTemplate\", templateString )\nvar rendered = $.render( \"myTemplate\", myData );\nSee the docs here: http://api.jquery.com/category/plugins/templates/ - in particular \nhttp://api.jquery.com/jquery.tmpl/\nhttp://api.jquery.com/jquery.template\nJsRender uses the same design except tmpl() is renamed to render().\n. I'm not sure I understand how this is a JsRender issue? Am I missing something?\n. Yes, I hope to provide that feature at some point...\n. Fixed in https://github.com/BorisMoore/jsrender/commit/df3e1e22a48b13aaf181ae04932467ea12f78d46. \nThe new version always preserves whitespace... (Maybe there will be a 'collapseWhitespace' option in the future...)\nLet me know/reopen if the fix does not work for you...\n. I'll look into that idea. Thanks...\n. It's on its way, with the next major commit...\n. This is no longer a problem, since there is no longer any API collision between jQuery Templates and JsRender\n. This is now supported: {{=my_var undef=\"\"}}\nSet undef to the desired default value to be rendered when the variable is undefined...\n. I wanted to avoid built-in defaulting to \"\" since that would affect perf (on the normal case where values are all defined) by adding a test for undefined in the compiled template. So I proposed an opt-in approach. \nHowever I have now managed to create a fix which does default to \"\" without significant perf impact. So I have removed the \"undef\" feature. The 09_helper-tags.html sample shows how to create a custom tag that allows setting other default values than \"\".\n. Yes, that's right...\n. Yes, it will be licensed under MIT. I'll soon be adding the license info to the files...\n. The info has now been added...\n. Rather than doing $(\"#templates\").render( myArray ), do $(\"#templates\").render( { array: myArray} ), and then in the template, put {{#each array}}.\nDoes that cover it for you?\n. The lack of documentation is because a) none of the APIs are actually documented yet. Just indirectly via the samples.  b) This was only added to the implementation yesterday :) - c) I am not yet sure that this is the right design, so I didn't really want to draw too much attention to it yet...\nStill, your questions were spot on (that scenario was driving both your questions and my design...). \nIt will stay undocumented for the moment until I have had time to settle on whether this design will stay...\n. I am working on a replacement for this, so for the moment it is better just to use custom tags, and not to use the named parameters like eq an lt. I have removed this feature in the latest commit.\nThere are some significant changes likely to come soon on in order to make it easier to support these scenarios. Chained tags will also likely be replaced by a different way of calling helper functions... \n. Fixed in https://github.com/BorisMoore/jsrender/commit/df3e1e22a48b13aaf181ae04932467ea12f78d46. \nYou can do {{#if a===b}} {{#if a=b, c===3, name>\"a\"}}.\nNevertheless, {{=alert()}} will NOT work. No random eval of expressions allowed :). \nLet me know/reopen if the fix does not work for you...\n. I think it will be stable, but the caveat would be if jQuery UI make a strong case for some change. In that case I would need to decide whether to adapt to their request or not... The hope is that JsRender might work both for jQuery UI requirements and scenarios, and for other user scenarios which could be somewhat different...\n. {{if a===b c!==d}}  will work for a===b||c!==d - and you can chain as many as you want.\nBut for a===b&&c!==d you will need to pass to a helper function. \n. Yes, refer to it by name, $.template( \"template1\" , string ) or $(\"#template\").template(  \"template1\" ). \n{{each data _content=\"template1\"}}\n. Note, {{each data _content=\"template1\"}} is now {{each data tmpl=\"template1\"}}\n. This cannot be done right now (other than creating your own tag, like the example that has a {{get }} tag). But it will be possible in a commit which I am working on, coming probably early next week...\n. Fixed in https://github.com/BorisMoore/jsrender/commit/df3e1e22a48b13aaf181ae04932467ea12f78d46. \nLet me know/reopen if the fix does not work for you...\n. No, I don't know what that would correspond to. Are you still getting it? Closing for now, unless you re-open with more data, or can provide a test case on jsfiddle. Thanks...\n. Fixed in https://github.com/BorisMoore/jsrender/commit/df3e1e22a48b13aaf181ae04932467ea12f78d46. Let me know/reopen if the fix does not work for you...\n. It should now be compliant. It does not use 'window'. I'll look at the AMD registration idea, so keeping this issue open.\n. Yes, you are right about the behavior. \nI may not look more closely at AMD until JsViews and JsRender both get to Beta. (And James, yes I'll let you know if I have questions).\n. JsRender is now fully AMD and commonJs compliant - as is JsViews.\nJsRender is available as a Node module. See https://www.npmjs.com/package/jsrender and https://github.com/BorisMoore/jsrender-node-starter\n. Yes, thanks. Fixed in https://github.com/BorisMoore/jsrender/commit/09e5f23eb089f067cc263b95dd1b06294796eec8\n. Yes, thanks. Fixed in https://github.com/BorisMoore/jsrender/commit/09e5f23eb089f067cc263b95dd1b06294796eec8. (Similar to your fix. I had already fixed this locally, but not realized it was breaking IE7... Thanks for pointing it out. Dup of Issue 16) \n. Yes, this is an issue. It may actually make sense to make a syntax change in JsRender to us a different character for $data, $ctx, $view etc. - e.g. #data, #ctx, #view - to avoid this issue of collisions. I'll be considering the alternatives...\n. When JSON is used as an associative array (map), accessing as object[key] then key can be any string. But when accessing as a property: object.propName, then propName cannot include non JavaScript PropertyName characters such as '@'.\nJsRender currently assumes valid property names, so will fail if @ is used. I think this is reasonable, and it allows some optimization in rendered templates. Given that, we should at least avoid collisions with valid property names using $, _ etc.\n. The new version now supports all legal JavaScript name characters including $.\n. Are you using both jsrender.js and jquery.tmpl.js in the same page? jsrender is 'next-generation' jQuery templates, and does not work 'side-by-side with jquery.tmpl. There will be collisions...\n. Seems that was the problem. Closing.\n. Was this the latest version of jsrender? Sounds like https://github.com/BorisMoore/jsrender/issues/17 - which should have been fixed in commit  https://github.com/BorisMoore/jsrender/commit/09e5f23eb089f067cc263b95dd1b06294796eec8. Can you verify whether your issue still happens with that latest bits?\n. For #1, do {{each tmpl='#myTemplate'}}\nFor #2, the following works for me:\n{{#if false}}\n{{else $ctx.not(Languages) tmpl=\"#messageTmpl\"}}\n{{/if}}\nLet me know if this solves it for you?\n. Well you can do {{#each Languages.slice(start,end)}}, or specifically: {{#each Languages.slice(0,x)}}You could also create a custom tag which does {{#myeach Languages from=0 to=x}}. Something like that may end up being added to the built-in each tag. \n. Yes, thanks for finding this. Fixed in https://github.com/BorisMoore/jsrender/commit/ab3fddd0e6661f043a08c9e66416671e768ea9a3 \n. Yes, I agree, and in fact I have switched to a different script type in an upcoming commit. Not quite ready to push to GitHub though, but hopefully soon. \n. $data will get you the current data item. So you can do{{#each myArray}}{{=$data}}{{/each}}` with the above array.\n(Note: see the UPDATE below for current syntax).\nBTW, a tip - for debugging within the compiled template: Set $.views.allowCode = true; and then add {{*debugger;}} within the template, e.g. {{*debugger;}}<li ....\n. I'll close, since there are so many things that still need documentation and demos... :). \nBut stay tuned and reopen, by all means, if you see that it doesn't come when the documentation begins to be more complete...\n. UPDATE: The syntax has changed since the above discussion took place. The {{#each ...}} tag is now {{for }} and {{=...}} is now {{:...}}, or {{>...}} if you want HTML encoded values. $data is `#data'.\nSo the example above is now: {{for myArray}}{{>#data}}{{/for}}\nSee http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html for details.\n. There is already a noConflict feature in the latest JsRender.\nYou should be able to do\n<script type=\"text/javascript\" src=\"zepto.js\"></script>\n<script type=\"text/javascript\" src=\"jsrender.js\"></script>\n<script type=\"text/javascript\">\n    $.noConflict();\n    $.zeptoMethod();...\n    JsViews.jsrenderMethod(...)\n...\n. The $.noConflict has been updated to a simpler approach:\nPreviously JsRender created a global window.$ if jQuery was not loaded, but gave you a $.noConflict() method that told JsRender not to to override window.$, in case another library was using it.\nCurrent JsRender behavior is that it does not redefine $ at all. Instead, if jQuery is loaded it adds methods to $, such as $.render, $.templates, $.views.converters... and if jQuery is NOT loaded, it creates a window.jsviews global, and uses that instead of $ - so you have jsviews.render, jsviews.templates, jsviews.views.converters etc.\nSo for example, if you want to call the render method without knowing whether jQuery is loaded or not, you can write:\n```\nvar $ = window.jsviews || window.jQuery;\n// or window.$ = window.jsviews || window.jQuery;\n$.templates(...);\n$.views.converters(...);\n$.render(...);\n```\nor if you don't want to use $ - in case some library other than jQuery is using it, you can write:\n```\nvar jsviews = window.jsviews || window.jQuery;\n// or window.jsviews = window.jsviews || window.jQuery;\njsviews.templates(...);\njsviews.views.converters(...);\njsviews.render(...);\n```\n. This is not currently supported, (in part because of the design for the behavior discussed in https://github.com/BorisMoore/jsrender/issues/7)\nif you model your data to have an array of objects with properties (which may be undefined), rather than simply an array of strings that may be undefined as in [\"a\",,,\"b\"]) then you can get something close to your scenario:\n```\n{{#each languages}}\n    {{#if name}}\n        {{=name}}\n    {{else}}\n        NO\n    {{/if}}\n{{/each}}\nlanguages: [\n    { name: \"English\" },\n    {},\n    { name: \"French\" }\n]\n```\n. This behavior has been changed, and null or undefined elements in an array are rendered.\nThere are some related unit tests here, and on following lines:\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js#L283\nand also here: https://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js#L198\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html\n. If you provide the tmpl, you should not use #each. (#each is for block tags which would have inline content and a closing tag, {{/each}})\n{{#each elements tmpl=\"#inputTemplate\"}}\nshould be\n{{each elements tmpl=\"#inputTemplate\"}}\n. This is fixed now... Thanks.\n. Yes, that could be a good idea, but it will probably need to wait until v1.0 has shipped.\n. There are are few samples showing different ways of accessing template objects (compiled templates) - depending on whether the template was compiled from a string, or a script block, etc. - under this folder: https://github.com/BorisMoore/jsrender/tree/master/demos/variants. \nLive demos here: https://github.com/BorisMoore/jsrender/tree/master/demos/variants.\nThe simplest is approach is var templateObject = jsviews.templates(\"htmlMarkupForTemplate\");\nThen you can call the render method of the templateObject.\n. @jeffrose: I just made a related comment on Issue 143. Basically, you should be able to put render: $.fn.render to access renderContent)() in the correct context.\nAlso, I notice I missed your question above: \njavascript\n// Access compiled template\nvar myCompiledTemplate = ; // ???\nBut you figured that $.templates(\"a markup string\") returns the compiled template. Named templates show up as 'expandos' on $.templates, such as $.templates.myNamedTemplate.\n. @jeffrose: RenderContent is used as the render method on any template, and also the renderContent of any registered tag, such as {{if}}. So you can get it from jsviews.tags.if.render, for example...\n. Not been able to get to this yet. Sorry, but I think it won't be something I can work out until after completing the current phase of significant updates to JsViews, heading for beta... But I will come back to it... I have some ideas around how to do it, and I agree that it is important.\n. Planned for V1 or V1.1. See also #164\n. Yes, sounds like a great plan...\n. @gtwilliams03: Can you simply wrap jsrender:\n```\n    var engine = {\n            compile: function(template) { return $.templates(template); }\n        };\nvar html = engine.compile(\"Value: {{:value}} ...\").render({value: \"some value \"});\n\n```\nThe template already has a render method...\nADDED LATER\nIn fact, (see http://stackoverflow.com/questions/25237610/how-to-use-twitter-typehead-js-with-jsrender-compile-function), because the templates() method works has no dependency on its context (this pointer), this can be done even more simply:\n```\nvar engine = {\n      compile: $.templates\n   };\n$('.product-typeahead').typeahead({\n   ...\n   engine: engine,\n   local: [\n      ...\n   ]\n}).on('typeahead:selected', function(event, datum) {\n   ...\n});\n```\nOr you can even extend $.templates to make it the engine (make it its own 'compile' method!):\n```\n$.templates.compile = $.templates;\n$('.product-typeahead').typeahead({\n   ...\n   engine: $.templates,\n   local: [\n      ...\n   ]\n}).on('typeahead:selected', function(event, datum) {\n   ...\n});\n```\nYet another alternative would be not to set the engine, but to use a suggestion template as in https://twitter.github.io/typeahead.js/examples/#custom-templates:\nsuggestion: $.templates('<p><strong>{{:value}}</strong> \u2013 {{:year}}</p>')\n. @gtwilliams03: @mikmarkify  I added some updated approaches to using JsRender with Twitter typehead, above.\n. @gtwilliams03: Thanks. What is your jsRender var? It could be defined as follows:\nvar jsRender = {\n      compile: $.templates\n   };\nIs that what you have?\nBTW (FWIW) you could also write:\ntemplate: \n\"{{if hasData}}\\\n    <div style=\\\"font-weight:bold\\\">{{:value}}</div>\\\n{{else}}\\\n    <div style=\\\"font-weight:bold\\\">No records located.</div>\\\n{{/if}}\"\nor\ntemplate:\n \"<div style=\\\"font-weight:bold\\\">\\\n    {{if hasData}}\\\n        {{:value}}\\\n    {{else}}\\\n        No records located.\\\n    {{/if}}\\\n</div>\"\n. Great thanks - I updated the code in your comment higher up to include those changes - so folks don't need to read the whole thread...\n. Browserify transform and {{clientTemplate}} support and full Node JsRender support are now available. \nJsRender is now available natively as a Node module.\nSee https://www.npmjs.com/package/jsrender and https://github.com/BorisMoore/jsrender-node-starter\n. Yes, thanks, I was aware of this issue, and will fix it soon...\n. I'm planning to include a fix for this, but it may have to wait until some bigger changes that are in the pipeline, since it relates to other issues like https://github.com/BorisMoore/jsrender/issues/7 - and to make both that issue and this one satisfied has to be compatible with maintaining current perf optimization. If you have a workaround, then best to stay with that in the meantime...\n. ! do have a fix for this already, but it is part of a major update which I have not committed  because it involves some breaking changes. I don't want to do breaking changes piecemeal - but rather in one significant upgrade which will require some porting to the new syntax. After that I hope to keep things pretty stable. The JsRender update is ready, but it also ripples to some changes in JsViews, and I am working hard now to integrate JsViews changess with this update too. \nSo apologies that this is taking some time, but I think/hope the update will be worth the wait! It should be committed in a couple weeks time... I am targetting Beta for JsRender end of February...\n. Ah, I see. Yes that is a slightly different case than the one I was looking at. I was thinking of the case where you have a data object with a property whose value is 0, or undefined. (e.g. { quantity: 0 } as above) - but this additional scenario is valid too. I have a fix for it, which I'll upload soon...\n. Fixed in https://github.com/BorisMoore/jsrender/commit/5d284cbb17fdfa7f8577c4d979bb166dc61ca236.\nClosing, but please reopen if the fix does not work for you... Thanks...\n. Yes, that's the intention. Actually, undefined, 0, null, true and false are rendered by the strings \"\", \"0\", \"null\", \"true\", \"false\". Would you expect anything different from this design?\nJsRender always renders a string, of course. The return value from render() can never be other than a string. \n. There has been a new issue submitted suggesting null should render as \"\".\nhttps://github.com/BorisMoore/jsrender/issues/87\nI think it does make more sense. Any disagreement?\n. Can you give an example of a template with PHP code, and show the value string that is being tested for an is returning an HTML comment?\n. Yes. This makes sense. I'll include a fix along these lines in the next update.\n. The php/html-comments issues should be resolved now, with commit 25. Can you confirm that it is fixed for you?\n. Closing since I believe this is covered by commit 25. Let me know if that is not the case...\n. It is available: {{=$itemNumber}}. You'll see it used in several samples, such as https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/01_inserting-data.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/01_inserting-data.html \n[But see below for update. Syntax has changed...]\n. https://github.com/BorisMoore/jsrender/issues/34 says it all...\n. For now, you have to call a helper function to do $itemNumber-1, but in Beta bits (coming soon I hope) it will be zero-based, and you will also be able to increment or decrement inline. In fact you will be able to write {{:#index}} for zero-based and {{:#index+1}} for 1-based. But more on that when the update is available... [See below for update]\n. Some changes have been made the design. \nkey corresponds to what was #index, and #index is now the inherited integer index from what the nearest parent view that has an integer index.\nSo #index is now unchanged when you wrap {{:#index}} in an {{if}} block.\n. Further update: To access a zero-based index from an 'item' view, use {{:#index}}. To access the index from nested contexts such as {{if}} blocks, use {{:#getIndex()}}\n. @trifolius: Hi. What is your question? \n. @trifolius: You should be able to create a custom tag to do that. You can use a combination of the approach used for the {{sort}} example, here: http://www.jsviews.com/#samples/jsr/tags/wrap-content and here: http://www.jsviews.com/#samples/jsr/helpers\nand the {{range}} tag shown here: http://www.jsviews.com/#samples/jsr/tags/extend-for and here: http://www.jsviews.com/#samples/tag-controls/range\n. With nested templates, $parent gets you the view object whose data is the array, and $parent.parent gets you the view object of the outer template.\nSo to get the number of items in the array, you could do {{=$parent.data.length}}\nTo get  the foo property of the data item in the outer context you do {{=$parent.parent.data.foo}}\nFor the movie example: {{=$parent.parent.data.Title}}\n. JsRender is pure string-based template rendering, so this issue was not directly due to JsRender. Maybe something to do with the way you were inserting into the DOM? Closing - since not relevant to (or fixable in) JsRender\n. That's a design I actually chose in an early prototype, but the {{#foo}} style has gained some familiarity through Mustache and Handlebars in particular, which was a factor in this choice... \n. {{=foo}} will HTML encode. {{=foo!}} will not encode (see the sample: http://borismoore.github.com/jsrender/demos/step-by-step/03_no-encoding.html).\n{{=foo!none}} is equivalent to {{=foo!}}. \n{{=foo!myEncoding}} will use your custom encoder, if you add it to the encoders.\nSo in your case you need {{=title!}} - which will also win you better perf, since the compiled template is then optimized and does not call the encoding function at all...\n. JsRender does not look for functions declared in global scope, since generally you need to be able to declare functions within a closure. \n{{=foo}} will be interpreted as being a data property, $data.foo, so if you have a dateFormat function as a method on your data, that will work. \nBut the usual pattern would be to make the function available on the context object: {{=$ctx.foo(...) }}.\nOne way to do that is to call $.views.registerHelpers(). See https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/10_helper-functions.html\nAnother way is to pass in functions as context when you call link or render:\n...link( data, template, { dateFormat: function() {...} } ); \nor \n...render( data, template, { dateFormat: function() {...} } );\n. I don't know what this issue would have been about. I have tested 3000 rows, and Chrome takes a fraction of a second. There may have been some other issue in the HTML you were rendering. JsRender is pure string-based rendering, so there should be no effect of this kind...\n. The behavior of {{#each dataExpression}} ... {{/each}} or {{each dataExpression tmpl=\"myTemplate\"}} is to render the content of the template against the data returned by dataExpression. \nIf the data is an array, it iterates for each item - which becomes the current dataItem for that rendered template (view) - and concatenates the result. But if dataExpression returns a single object, then it renders just once, with that object as current data item. \nIf you don't pass any data at all, as in {{each tmpl=\"myTemplate\"}} then it will render the template just once, keeping the current dataItem from the outer scope. \nI am considering changing the name of the tag from each to {{for}} to make less surprising that it does not iterate when you pass it a singleton. \nIt is not a common scenario to render the same template against each of the properties of an object. Usually you know, statically, the properties of the object, and can do \n{{#each propertiesObject }}\n    Created Date: {{=createdDat}} \n    Created By: {{=createdBy}} \n{{/each}}\nIf you want to apply the same template to each property, as an iteration over all the properties, you can provide a helper function to return the array, rather than add a new array to your data, as in {{#each $ctx.propertyArray(properties)}}...{{/each}}\nSee also this comment on my blog\n. See also https://github.com/BorisMoore/jsrender/issues/49\n. I agree there are scenarios where this is useful. I hope to be able to look into supporting it...\n. I may provide built-in support for this in the future, but already it is quite easy to address this scenario using a custom helper function or tag. I have added a sample to show how to do that.  (Code here)\n. OK, makes sense. Reopening as a feature request for built-in support.\n. This feature is now supported, using the new {{props}} tag. \nhttps://github.com/BorisMoore/jsrender/blob/master/demos/scenarios/03_iterating-through-fields-scenario.html\nhttp://borismoore.github.io/jsrender/demos/scenarios/03_iterating-through-fields-scenario.html\n218\n{{props details}}\n        <div>\n                <b>{{>key}}</b>: {{>prop}}\n        </div>\n{{/props}}\n. Of course. (I know about that :). I developed jQuery Templates, and wrote the documentation for it). See the readme wanring - JsRender is not yet Beta, and APIs are likely to change. \nI don't recommend porting from jQuery templates until JsRender reaches Beta. It's your call of course, but you will have to do without documentation and  be prepared for breaking changes. In the meantime no reason to rush away from jQuery Templates. They work as well as they ever did... \n. On the one hand, the jQuery UI team want to warn people that jquery templates will not continue to evolve as such or be supported with bug fixes, and on the other hand JsRender is in alpha, and not yet ready to be used as a replacement for jquery templates on existing sites. \nI personally would have worded the warning less strongly. It is important for people to realize that this does not mean they have to rush to port their sites to something else. I am trying to make JsRender an even better replacement for jquery templates, but of course it can't happen overnight. If I provided documentation already it could encourage people to port their sites already, and then 'get burnt' by subsequent breaking changes. My hope is that folks who want to know where JsRender is heading, or create experimental sites using it, will be able to do so, using the samples. This will provide valuable feedback for the design and development of JsRender and JsViews. But those seeking to port existing sites will, I hope, realize that it is better to wait for Beta (and documentation), Does that make sense?\n. Fixed in latest update. See related issue https://github.com/BorisMoore/jsrender/issues/56\n. This is now supported. The syntax is now {{:~foo().name}}\n. This is now supported. You can write {{:a[\"property.name\"]}} or, for a top-level property, {{:#data[\"property.name\"]}}\n. Fixed in the latest updates.\n. This would be a JsViews issue. Closing here, and creating an issue: https://github.com/BorisMoore/jsviews/issues/54, on JsViews pointing back to here.\n. Yes, you need that event when you have rendered into the DOM. Now since JsRender is pure string-based concatenation, it does not currently provide such and event. \nBut when you use JsViews, and are linking content you rendered into the DOM, you have an onAfterCreate event (after creating a view, which is an instance of a rendered template, whether top-level, or nested, such as from {{each}}). It is for precisely that scenario. \n$( \"#container\" ).link( data, \"#myTemplate\", {\n    onAfterCreate: function(view) {\n        debugger;\n    }\n});\nDetails may change in an upcoming commit, but the feature will be there... (Hopefully samples too).\n. This is a dup of https://github.com/BorisMoore/jsrender/issues/40.\nOf course you can do \n```\n\"GoodStuff\": [\n    \"Chimay\",\n    \"Orval\",\n    \"Westmalle\"\n]\n{{#each GoodStuff}}\n    {{=$itemNumber}}: {{=$data}} \n{{/each}}\n```\n. Can you give me the actual JSON string / JavaScript literal (as it comes over the wire from and AJAX request, for example) that corresponds to the case you are describing? \n. If by an 'enumerated object' you mean simply a JavaScript array, then take a look at these two examples, to see how rendering and object will just render the object using the template, but passing in an array will iterate over the object and concatenate the result of rendering the template against each item.\n{{#each foo}} will behave similarly, depending on whether foo is an object or an array.\nArray: http://borismoore.github.com/jsrender/demos/step-by-step/index.html \nObject: http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/01_render-template.html\n(code at https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/01_inserting-data.html) and https://github.com/BorisMoore/jsviews/blob/master/demos/jQueryConfDemosOct2011/01_render-template.html)\n. Closing, since the scenario is supported. There are also some new layout templates features which allow additional control over rendering arrays. See http://borismoore.github.com/jsrender/demos/step-by-step/12_layout-templates.html.\nAdded update: The layout template design has since been modified. See the example here: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html\n. Not built-in, no. You would need to create a modified implementation of JsRender or would need to convert your XML (e.g. using XSLT) to a JSON string, deserialize/eval to a JavaScript object, and then pass that to JsRender. There is no standard mapping from XML to JSON/JavaScript literals, so you would need to choose a 'mapping protocol'. XML nodes have XML content (text nodes and/or elements), and string-valued attributes (text nodes), whereas JS objects have properties whose values can be any JavaScript type, (strings, numbers, objects (maps), arrays...), and have no special 'content' property...\n. Closing this issue. It is not currently a target feature.\n. Fixed in the latest updates. There is now very full expression support. \nSee some examples here:\nhttp://borismoore.github.com/jsrender/demos/step-by-step/10_comparison-tests.html\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/10_comparison-tests.html\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=%7B%7B%3A%7D%7D%3A%20comparisons\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=%7B%7B%3A%7D%7D%3A%20expressions\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js\n. Yes, you are right. This is fixed in the latest update.\nSee also this new sample, which would have similar problems if this issue had not been resolved.\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_layout-templates.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/12_layout-templates.html\n. Thanks Fred. I'm working on some significant changes in JsRender that will include rewrites of the if and each tags, so I'll make sure to look more closely at this (and also issue #57) when I reach that point...\n. OK - I looked more closely at what you are saying, and I think we are already covered for this. {{each}} will play the role of both render and each. In the new version I am working on for Beta, {{each}} is renamed to {{for}} to help reduce the impression that it only works with arrays. You can do {{for array}} to iterate or {{for object}} to render the template/content once for the object, or {{for}} to render once against the current data (i.e. it defaults to $data).\nSo with the current implementation (named {{each}}) the following works:\n```\n\n...other stuff\n{{each tmpl=\"#menu\"}}\n..other stuff\n\n\n   {{#if categories}}\n       <ul>\n         {{#each categories}}\n            <li><a href=\"#\">{{=name!}}</a>\n               {{each tmpl=\"#menu\"}}\n            </li>\n         {{/each}}\n    </ul>\n  {{/if}}\n\n```\n. Answered on Stack Overflow. http://stackoverflow.com/questions/8622045/jsrender-if-else-using-propname \n. Array access paths are likely to be possible in an upcoming commit - but are not yet available. For now you should be able to register your own functions or tags to support this scenario. \n. There is now some support for array access. There are a lot of examples in the unit tests:\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js\nIn particular these sections:\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=%7B%7B%3A%7D%7D%3A%20paths\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=%7B%7B%3A%7D%7D%3A%20array%20access\nPlease reopen if there are required scenarios that are not covered.\n. If podcats is an array of items, and the item itself is an array, then you can access the item (as always) as #data.\n{{:#data}}\nHowever in this case #data itself is an array, and you can access its members as\n{{:#data[0]}}\nOr, if the members of the array are objects, not primitive types, you can write\n{{:#data[0].someProperty}} \n. Thanks for offering to help. I'll add further comments soon on how I see the community aspect. Hope to add more context for collaboration before too long...\n. Thanks Fred. I'm working on some significant changes in JsRender that will include rewrites of the if and each tags, so I'll make sure to look more closely at this (and also issue #54) when I reach that point...\n. Yes, this is a good issue/scenario.\nThe latest fix and the new behavior around layout templates should cover the requirements of this scenario.\nSee:\nhttp://borismoore.github.com/jsrender/demos/step-by-step/12_layout-templates.html\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_layout-templates.html\n. I understand, from the point of view of simply allowing calling render and passing an array as item, yes, your approach seems simpler. But the layout feature is not being driven only by that requirement but by a number of scenarios, and is intentionally much broader.\nBasically it is about being able to render a template without the rendering being dependent on what the data is - array, null, undefined, false, etc. - in each case the template is rendered, since it is a template which is designed to take complete ownership of how it renders the data. This also needs to work if you do {{for myData tmpl=\"myLayoutTemplate\"/}}. It is also a step towards future work on controls/widgets or components. For example if you have a grid widget with a template gridWidget, you can do {{for items tmpl=\"gridWidget\"/}}. Obviously you want a single gridWidget showing the rows, not multiple gridWidgets, one for each item!\n. Heads up that I have removed the layout feature, and changed the behavior when you render with no data. See commit\nhttps://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0.\nI think this does make more sense... Do let me know if the new design seems better to you too...\nSee sample: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html\n. I have made an update which should cover your scenario. Take a look at the new sample on layout templates.\nYour fix of passing in the data wrapped in an array, in the {{if}}{{else}} tag implementation raises some issues for other scenarios - basically it breaks the view hierarchy - which showed up for example in the JsViews recursive tree view sample. The solution was more complex, around layout templates. Hopefully the new behavior covers required scenarios.\nThanks for pointing me at this issue...\n. Yes this is a bug for regular tags as well as custom tags. For now you need at least a space between open and close tags. Will be fixed in an upcoming commit.\n. This is fixed in the latest version. \nTested in unit tests here:\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js#L49\n. Are you using JsRender templates on elements rendered as content of the dialog? Or simply elsewhere on the same page?\n. Strange. I believe that has been working fine in other apps I have seen. Can you check with a small minimalistic test page and post it here or as a jsfiddle?\n. OK, interesting. What enviroment are you working in?\nWould the following make sense?\n``` javascript\nwindow = window || global || {};\nwindow.JsViews || window.jQuery && window.views || (function (window, undefined) {\nvar $, _$, render, rTag, rTmplString, templates, tags, helpers, encoders, extend,\n    FALSE = false, TRUE = true,\n    jQuery = window.jQuery,\n...\n\n})( window )\n```\n. Right, and we can still call it window within the scope: \n(function (window) {\n...\n})(this);\nIn environments (nodejs...) where global is defined, the this pointer will be 'global', and the above will map it to window within the closure...\n. I'd appreciate if you can check the latest version and see if it is now compatible with your environments. If so, we can close this issue.\n. Closing. Please reopen if this does not work for you with the latest builds.\n. Is the template being declared as content of a hidden div, or similar, or is it provided as a string or a script block? If in a div, then this will break, as Firefox will load the anchor tag will process the 'strange value' of href...\n. This concerns JsViews, not JsRender. Do you want to open an issue for this in the JsViews project - and I will reply there. (In fact this feature is already supported. I'll give the info there.)\n. Yes, that feature already exists. Just use {{each}} for that too. \nHere are details, copied from https://github.com/BorisMoore/jsrender/issues/40:\nThe behavior of {{#each dataExpression}} ... {{/each}} or {{each dataExpression tmpl=\"myTemplate\"}} is to render the content of the template against the data returned by dataExpression. \nIf the data is an array, it iterates for each item - which becomes the current dataItem for that rendered template (view) - and concatenates the result. But if dataExpression returns a single object, then it renders just once, with that object as current data item. \nIf you don't pass any data at all, as in {{each tmpl=\"myTemplate\"}} then it will render the template just once, keeping the current dataItem from the outer scope (so it is in effect simply an include).\nI am considering changing the name of the tag from each to {{for}} to make less surprising that it does not iterate when you pass it a singleton. \n. http://jsfiddle.net/ysAk6/2/\nFor the jsrender script URL, use: http://borismoore.github.com/jsrender/jsrender.js\nAlso you forgot the # in '{{each tmpl=\"#mcFolder\"}}'\n. Closing since feature already supported.\n. This is because you are using the wrong syntax. {{else}} is a tag. There is no 'else if' syntax.\nThe correct syntax is:\n{{#if Sold}}sold{{else Pending}}pending{{else Vacant}}vacant{{/if}\n. It is because {{else if Pending}} will treat 'if' as another data property - so it becomes (in code) else if(data.if || data.Pending). data.if is not supported in IE8 (it requires you to write data[\"if\"] - because if is a key word. In IE9, Chrome, etc. keywords are accepted, so data.if will have a value undefined, but will not throw...\n. There will be a specific error message for this, coming up in the next commit...\n. The best way would be to use a helper function. See the sample https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/10_helper-functions.html\nYou can get the view.itemNumber for the index and the view.parent.data for the array, and return the previous data item from your function: {{=$ctx.previous().someproperty}}\n. It works for me...\nCan you put a sample test page (minimal) on jsfiddle? \n. OK, closing this one, but leaving 69 open for tracking.\n. Yes, this is because the string is interpreted as the name of a named template. See the following comment in the code:\njavascript\n// to $.template( null, templateString ). To ensure a string is treated as a template,\n// include an HTML element, an HTML comment, or a template comment tag.\nThis will change in an upcoming update, in which the $.render API is changed and this scenario is supported. \n. Update on the new bits: Still not completely integrated with JsViews, and therefore not committed, but it is getting close...\n. Fixed in the latest updates. With current syntax the code above becomes:\n``` js\n$.templates(\"boo[foo='222'][gaa={{>test}}]\").render({test: 'xxx'});\n\n\n\n\"boo[foo='222'][gaa=xxx]\"\n```\n\n\n\nClosing this issue.\n. I am now passing in the same jQuery object referenced by the jQuery variable within the jsrender scope. So this should resolve with an upcoming commit. \n. This issue should be fixed in the latest updates. Can you verify?\n. See https://github.com/BorisMoore/jsviews/issues/16 - for the same question...\n. Have you checked out all the samples?\nUse {{=content!}}\nSee https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/03_no-encoding.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/03_no-encoding.html\n. Thanks for this. I have what is close to a beta candidate for JsRender which does already support array accessors. It is not yet committed to GitHub because it has several breaking changes so I am working also on an updated JsViews which works with the new JsRender bits. As soon as the integration work is complete, I will upload both, and you can verify that your scenario is covered.\n. It works for me. You need to do something along these lines:\n```\n\n    <tr>\n        <td>{{=Title}}</td>\n        <td>\n            {{each Languages tmpl=\"columnTemplate\"}}\n        </td>\n        <td>\n            {{each Languages tmpl=tmpl}}\n        </td>\n    </tr>\n\n\n\n    $.template( \"movieTemplate\", document.getElementById( \"movieTemplate\" ).innerHTML );\n    $.template( \"columnTemplate\", document.getElementById( \"columnTemplate\" ).innerHTML );\n    $.template( \"rowTemplate\", document.getElementById( \"rowTemplate\" ).innerHTML );\n...\n    document.getElementById( \"movieList\" ).innerHTML =\n        '<table><tbody class=\"header\"><tr><th>Synopsis</th><th>Fixed Template</th><th>Template specified in data</th></tr></tbody><tbody>'\n        + $.render( movies, \"movieTemplate\" )\n        + \"</tbody></table>\"\n...\n```\n. \"#columnTemplate\" etc are jQuery selectors, and won't work without jQuery. You should be using the name of the template as registered im `$.template( \"columnTemplate\", ...)`. That includes in the data: `tmpl: \"#rowTemplate\"` etc.should be `tmpl: \"rowTemplate\"`. (I didn't show that in my example, but it follows logically from the approach where we are not using selectors to script elements...)\n. Did you use noConflict? See https://github.com/BorisMoore/jsrender/issues/26 for more context...\n. Right, that's it. JsViews is then the global, rather than $, for either JsViews or JsRender APIs.\n\nClosing.\n. The $.noConflict has been updated to a simpler approach:\n\nPreviously JsRender created a global `window.$` if jQuery was not loaded, but gave you a `$.noConflict()` method that told JsRender not to to override `window.$`, in case another library was using it.\n\nCurrent JsRender behavior is that it does not redefine `$` at all. Instead, if jQuery is loaded it adds methods to `$`, such as `$.render`, `$.templates`, `$.views.converters`... and if jQuery is NOT loaded, it creates a `window.jsviews` global, and uses that instead of `$` - so you have `jsviews.render`, `jsviews.templates`, `jsviews.views.converters` etc.\n\nSo for example, if you want to call the render method without knowing whether jQuery is loaded or not, you can write:\n\n```\nvar $ = window.jsviews || window.jQuery;\n// or window.$ = window.jsviews || window.jQuery;\n\n$.templates(...);\n$.views.converters(...);\n$.render(...);\n```\n\nor if you don't want to use `$` - in case some library other than jQuery is using it, you can write:\n\n```\nvar jsviews = window.jsviews || window.jQuery;\n// or window.jsviews = window.jsviews || window.jQuery;\n\njsviews.templates(...);\njsviews.views.converters(...);\njsviews.render(...);\n```\n. Can you give a bit more context? It does not throw that error in regular scenarios that I am aware of. If you have repro, you could post a test case to jsfiddle...\n. Closing since no repro. Please reopen if you still have this issue. Thanks.\n. JsViews does not have 'special knowledge' of select elements, and cannot be reponsible for special semantics that  relate option elements and select elements. It will dynamically insert the rendered HTML, 'as instructed'. If you insert a new list of option elements under a select element, using innerHTML, then the browser may or may not detect consistency or inconsistency between the value of the select and the set of option elements, and may or may not update the underlying properties. But JsView should not attempt to be 'smarter than  the browser'. So if the built-in browser behavior does not suffice, you will need to write extra code...\n. Using {{if}} or {{each}} within attribute markup does not currently work by default, if JsViews is loaded, because JsViews sets a flag for JsRender: `$.views.activeViews = true`, which tells JsRender to insert comment-based annotations for data binding. You can temporarily set `$.views.activeViews = false` before rendering, and then switch back after rendering, and things should work fine.\n\nOtherwise you can do:\n\n```\n{{#if preferred_first != first}}\n <div class=\"runtemplatex\" title=\"{{=first}}({{=preferred_first}}) {{=last}}\">\n{{else}}\n  <div class=\"runtemplatex\" title=\"{{=first}} {{=last}}\">\n{{/if}}           \n```\n\nOr again, you can use data binding, along the lines of:\n\n```\n <div class=\"runtemplatex\" data-getfrom=\"title:$ctx.getTitle([first], [preferred_first])\">\n\n```\n\nI think some of this will change when we reach beta for JsViews, and this problem should no longer arise...\n. With the latest update, you can set `{link:false}` in options that you pass in to render (See https://github.com/BorisMoore/jsrender/issues/86#issuecomment-4434235 for details)\n\n``` js\nvar html =  $(\"#myTemplate\").render(data, {link: false});\n```\n\nor\n\n``` js\nvar html =  $.render.myTemplate(data, {link: false});\n```\n\nBut if you are using JsViews data within your template, you probably don't want to switch off the linking for the whole template. In that case, you can instead set `link=false` on any block tag. \n\n``` html\n <div title=\"{{:first}} {{if preferred_first != first link=false}}({{:preferred_first}}){{/end}} {{:last}}\">\n```\n\nYou can even use one or more {{else}} tags, as long as you put link=false on each of them:\n\n``` html\n<div {{if test link=false}}id=\"yay\"{{else test2 link=false}}class=\"special\"{{else link=false}}id=\"nay\"{{/if}}>\n```\n\nClosing, since this scenario is now supported.\n. Can you try to get a minimal repro on jsfiddle? Difficult to say otherwise...\n. This should become easy with the beta, because expression support within tags will be pretty complete, and you won't have to call helper functions...  \n. This can now be done using the built-in expression support:\n\n```\n    <div class=\"{{:#index%2 ? 'even' : 'odd'}}\"></div>\n```\n. Yes, it should work fine. Are you doing it inside a nested {{if}}? If so you need #getIndex(). See #173\n. When using just JsRender, these scenarios, as rcollette mentions, are not compatible with the 'philosophy' behind JsRender of having no DOM dependency, and being 'pure string-based rendering'. \n\nBut with JsViews it is another story. JsViews is all about DOM integration (as well as observable changes to data, and associated data binding). So if you are using JsViews, you can use the `onAfterLink` event to get to elements after rendering and linking, and you can also get to `this.linkCtx.elem` from within a helper method. The set of demo samples of JsViews should give some ideas. http://borismoore.github.com/jsviews/demos/index.html.\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. Prior to the last update, the syntax was:\n\n```\n{{#each ...}}\n    some block content\n{{/each}}\n```\n\nfor block tags, and: \n\n```\n{{each ...}}\n```\n\nwas the syntax for a self-closing tag.\n\nIn the recent update though, the syntax has changed to be equivalent to the way HTML tags can be self-closing or not.\n\n```\n{{for ...}}\n    some block content\n{{/for}}\n```\n\nis now the syntax for block tags (not just the {{for}} tag, but that is an example of this syntax). \n\n```\n{{for .../}}\n```\n\nis now the syntax for a self-closing tag.\n. Yes, a fix is on its way within a few days I hope...\n. This should be fixed with the latest updates. The syntax above is now\n\n``` js\n$.templates(\"PlayerContentTemplate\", \"<div id=\\\"{{:id}}\\\"><div class=\\\"{{:class}}\\\">{{>content}}</div></div>\");\n```\n\nClosing, but if the issue is not fixed, please reopen. Thanks.\n. In IE8 'class' is a reserved javascript token. \n\nYou can do this\n\n```\n$.templates(\"PlayerContentTemplate\", \"<div id=\\\"{{:id}}\\\"><div class=\\\"{{:#data['class']}}\\\">{{:content}}</div></div>\");\n\nvar str = $.render.PlayerContentTemplate({id:\"12\",'class':\"testClass\", content:\"go\"});\n```\n\nClosing, on the assumption that this was your problem.\n. That is issue #65 and is because if is a reserved word in IE8, so not allowed as the name of a data property. (Same as class above).\n\n`$.templates(\"Test\", \"{{if foo == 'bar'}}Bar{{else #data['if'] foo == 'hello'}}Hello World!{{else}}Fool!{{/if}}\");` should work correctly. That would be if your really want a data property called `if`.\n. How are you declaring your template? Are you getting it from a string or the contents of a script block?\n\nIf not, and you are using a div, for example, with display:none, then the markup will get processed as HTML by the browser, and Firefox will covert the value of the src attribute to a URL encoded string. (Templates should not be declared in this way...)\n. Template markup is not necessarily valid, or even well-formed HTML, so you can develop your templates in a div if you want, to get intellisense, but when you deploy you must not leave them like that, since there is a perf cost and unpredictable browser-dependent errors and side effects that would likely result. You are asking the browser to load as HTML content which is not actually pure HTML markup... \n. If you have JsViews loaded, as well as JsRender, then by default calling `$(\"#template-text\").render();` will produce HTML that includes the HTML comment annotations which JsViews uses for linking the content, producing the view hierarchy, responding to observable changes, etc. \n\nBut you can decide that you don't need to have the view hierarchy etc. available within that content, and tell JsRender not to include those annotations. \n\nThis is new with this last update, and you do it as follows:\n\n``` js\nvar html =  $(\"#template-text\").render({}, {link: false});\n```\n\nYou can also set `link=false` on individual tags. See also https://github.com/BorisMoore/jsrender/issues/77#issuecomment-4436382 for details.\n. Closing since the scenario is covered. Please reopen if this does not work for you...\n. You only get comment tags if you call `link(...)`. Just calling `render(...)` (as well as calling `link(...)` but setting `link=false` on a tag in the template) will not add comments or bindings. \n\nAlso, it is likely that with some work I am doing right now, there will be soon be an update in which no comment tags are inserted at all. \n\nWhen you remove a view, it removes the markup it created (e.g. if you call remove() or refresh()) \n\nYou can also do `$(selector).empty()` and it will remove both the content and the views with their bindings. \n\nYou can also use the `unlink(...)` APIs which are very recent, and so not yet illustrated by samples or docs at all, but which do in fact allow you to incrementally link and unlink. But I am hard at work on key features in all these areas, so will not be providing samples etc. until the code for those features is complete and stable. So for now, if you really need programmatic unlinking, you can play with those APIs and look at the code to learn how to use them. It is basically the same as the corresponding link() call but using unlink() instead. You pass the same parameters, or just some of them if you want to remove more bindings. (A bit like `on()` `off()` or `bind()` `unbind()` in jQuery)\n. Yes, good point, it may be that the null->\"\" design would better match more scenarios. I'll think about that one...\n. This change has been made. null now renders as \"\"\n. Great, thanks. Fixed now.\n. If you are also using JsViews in the page, then you need to set link=false. See this issue for guidance:\nhttps://github.com/BorisMoore/jsrender/issues/77\nLet me know if this covers the issue for you, in which case we can close this as a dup of 77.\n. Nice catch. This is fixed as a result of another fix. But I will also make a related fix:\n\nhasViewPath = hasViewPath || params.indexOf( \"view\" ) > -1; \n-> \nhasViewPath = hasViewPath || hash.indexOf( \"view\" ) > -1; (Note that string content of params is also in hash)\n. I have added an 'informal counter' in the latest commit for now. I may make it more formal in later commits. But note that jQuery and jQuery UI both follow the same approach of not modifying the pre version number on each commit.\n. Thanks. See https://github.com/BorisMoore/jsrender/pull/92 for a response on this. \n. Thanks for this proposal. I have not taken your fix, since I am trying to keep JsRender really small, and I think it should be quickly apparent that you can't load remote templates via a script block. This is already clear from the samples, but will be clearer still when documentation, and tutorials on how to load remote templates are available. See also comment on the combined pull request.\n. Well no, it is supported. See https://github.com/BorisMoore/jsrender/issues/77. You can write\n\n`< tag {{if some condition link=false}}>{{:Field}}{{else link=false}}style=\"display:none;\">{{/if}}< /tag>`\n\nLet me know if this works for you.\n. That should work. Can you put it into a jsfiddle, so I can look at what you might be doing wrong elsewhere - in your data, or your code??. Thanks for letting me know.. #index will be an integer when the view is one of a array of views (a view collection, if you will), which is what you get when you render against a data array, for example within a {{for}} tag: `{{for someArray}}...{{:#index}}...{{/for}}`. \n\nEvery 'block' tag renders its content as a subview of the containing view.\n\nAn {{if}} tag is a block tag, and renders a subview (or child view) of the containing view. That view is _not_ part of a collection, and will _not_ have an integer index.\n\nBut a {{for}} will render either a single child view, if its data is NOT an array, or it will render a view collection, and only in that case will the view(s) have integer indexes.\n\nSo if you put an {{if}} tag inside a {{for}} tag which is rendering an array, then you put {{:#index}} inside that, well, the {{:#index}} will render the index of the view it is in! And that is the view corresponding to the content of the {{if}} tag - which does _not_ have an integer index. It's not an array of views, so why would it...\n\nBut what you _wanted_ was the index of the containing view. Right. Well then step up to the parent view, and get its index. Write `{{:#parent.index}}`\n\n```\nthis view is part of a view collection and has an index. {{if someExpression}} this is the view inside the if {{:#parent.index}} {{/if}}\n```\n\nIn fact, when the data of a view is an array, it has a views property (the child views) which is an array, and each view has an integer index property.\n\nWhen the data of a view is not an array (usually an object, but maybe some other value other than an array), then it has a views property for the various child views it may have (corresponding to nested templates, or block tags which it contains) and its view property is an object, not an array, with key-value pairs, typically `{\"_0\":view1, \")2\":view2 ...}`. Each of those child views has an 'index' property which is the key, \"_1\" etc. \n\nDoes that make sense?\n\nSee also https://github.com/BorisMoore/jsrender/issues/97\n. Reopened for discoverability, to document this design.\n. This issue has now been fixed in the latest commit: (pre beta commit counter: 8). \n#key corresponds to what was #index, and #index is now the inherited integer index from what the nearest parent view that has an integer index.\nSo #index is now unchanged when you wrap {{:#index}} in and {{if}} block.\n. `{{:` is a tag, so you can't break it with a paren. http://www.jsviews.com/#assigntag.\nIt is `{{:expression}}`\n\nIn your case `{{:#index+1<10}}` or  `{{:(#index+1)<10}}`. OK - not sure why you just posted it 15 minutes ago if you had fixed it. Did fixing it \"a while ago\" mean less than 15 minutes ago??. That's OK - no problem.... Yes, but see explanation here: http://www.jsviews.com/#getindex. General comment - if you have an issue, can you try to trim down any test case to something minimal which shows just the problem, reduced to the simplest possible example.\n\n{{:#index}} returns the index of the view it is in. Any block tag renders its content as a new child view, and that includes the {{if}} tag. So {{:#index}} is not finding the index of the same view if it is in the content of the {{if}} tag. {{:#parent.index}} will find you the index of the parent view, outside the {{if}} block.\n\n```\n{{:#index}}\n{{if expression}}\n    {{:#parent.index}}\n{{/if}}\n```\n\nSo what you are seeing is the correct behavior..\n\nSee https://github.com/BorisMoore/jsrender/issues/96 for more details.\n. This issue has now been fixed in the latest commit: (pre beta commit counter: 8). \n#key corresponds to what was #index, and #index is now the inherited integer index from what the nearest parent view that has an integer index.\nSo #index is now unchanged when you wrap {{:#index}} in and {{if}} block.\n. Yes, this is by design. A regular template will render once if you pass an object as data, and once for each item in the array if you pass an array. If you pass null or undefined it will render zero times (the result will be the empty string).\nOTOH if you mark it as a layout template, then it will render once, no matter what data you pass, including undefined (i.e. no data parameter).\n\nSee the unit tests https://github.com/BorisMoore/jsrender/blob/master/test/unit/jsrender-tests-no-jquery.js#L283, and subsequent lines....\n\nSimilarly `{{for layout=true}}...{{/for}}` or `{{for tmpl=\"myLayoutTemplate\"/}}` (where myLayoutTemplate is declared with layout:true) will render once, whatever data you pass, but `{{for}}...{{/for}}` will render nothing if you pass no data, or the data you pass is null or undefined.\n\n_**UPDATE**_ JsRender now has improved support for choosing whether or not to iterate against arrays, and for rendering templates that do not require data to passed in to the render method. (Example: http://jsfiddle.net/hELrh/14/) \n- You can call `{{include someArray}}...{{/include}}` and the block will render with the array as context, but without iteration. \n- `{{include someArray tmpl=.../}}` will insert the referenced template without iteration, against the array as data context. \n- `var html = $('#myTemplate').render()` will render the template just once with the data context `undefined`.\n- `var html = $('#myTemplate').render(someArray)` will render the template against each item in the array (iteration), and concatenate the results.\n- `var html = $('#myTemplate').render(someArray, true)` will render the template just once with the data context `someArray`\n\nSee also the comments and links below https://github.com/BorisMoore/jsrender/issues/98#issuecomment-54587518\n. Note: The layout template design has since been modified. See the example here: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html. You can make an array render just once by wrapping it as an array, `{{for [myArray]...}}` so JsRender will treat the myArray as a single object. This is a similar to how you bind to arrays in jQuery: `$([myArray]).bind(...)`.\n. @thunberg:\n In fact $.render.myTemplate() will render the template once, and #data will be undefined within the template. Here http://jsfiddle.net/hELrh/14/ is the jsfiddle from @Thinkscape (updated to fix an error on the tag markup) which does now work as Thinkscape had requested it to.\n\nAlso, see  Commit 48: https://github.com/BorisMoore/jsrender/commit/6d239191e1e5d4beb512fd05f58596fc5d9b6b61 which does provide the other features Thinkscape was requesting:\n\nNew features and improvements:\n- {{for}} {{include}} {{props}} now support omitting the data path\n  parameter. When omitted, renders current data, - equivalent to\n  {{for #data}} etc. {{for}} iterates if current data is an array\n  {{include tmpl=\u2026/}} renders template for current data, and does not\n  iterate if current data is an array.\n- New support for rendering arrays, without iteration (previously\n  \"layout = true\" mode). Pass in value true for optional 'noIteration'\n  parameter as in:\n  template.render(data, context[, noiteration])\n  tagCtx.render(someArray, context[, noIteration])\n\nYou can still call `{{for [array]}}` but better and simpler is to call `{{include array}}`. I still need to update some samples and docs to leverage this new approach, but you will find a lot of unit tests which use {{include array}} - without iterating, and which call template.render() to render the template once. For example :\n\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-no-jquery.js#L786\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-no-jquery.js#L58\n\nI'm glad you called my attention to this issue and the related discussions, because I realize I did not call out on those threads that related features are indeed now provided in JsRender. My bad...\n\nI'm curious though why you said there is still no clean solution for your $.render.myTemplate() scenario, since it seems to me it works exactly as you are requesting... Did you have a problem?\n. No, it is deliberately made impossible to set globally, since using allowCode=true is not a good idea from a security point of view or a maintenance point of view, and leads to poor separation of concerns. So it is very much opt-in on a per-template basis to be used only if you don't see another way to achieve the scenario. \n\nYou don't need to use an alias. You can do \n\n```\n    $.templates(\"\", {\n        markup: \"#movieTmpl\",\n        allowCode: true\n    });\n\n    $( \"#movieList\" ).html(\n        $(\"#movieTmpl\").render( movie )\n    );\n```\n\nBut $.templates(...) is also good practice, because otherwise you are using template strings and not compiling them in advance, which gives much worse performance, or you are using script blocks, which does automatically cache the compiled template, but it leads to a dependency on the DOM which is does not encourage moving towards reuse across different applications, loading templates remotely etc. (Yes, I know it is perhaps not obvious how to do that, but that is 'the way of the future', and using $.templates for registering and compiling templates is much more in the direction where things will evolve over time... $(\"#myTemplate\") is convenient for demos, but...)\n\nJsRender expression support, and features like helper functions, convert function, custom tags, etc, are all very rich now. Are you sure you still need to use allowCode=true?\n. Yes it is possible to do that using a custom helper function or tag. I have added a [sample](http://borismoore.github.com/jsrender/demos/step-by-step/12_iterating-through-fields-scenario.html) to show how to do that.  ([Code here](https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_iterating-through-fields-scenario.html)).\n\nClosing this issue since it is basically a duplicate of https://github.com/BorisMoore/jsrender/issues/40.\n. Yes, the design changed for how the render method, and the {{for}} tag behave if you pass no data. \nSee https://github.com/BorisMoore/jsrender/issues/98#issuecomment-4633032\n\nYou can do `{{for #data tmpl=\"templateName\"/}}`.\n\nSee also the example here: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html. You can make an array render just once by wrapping it as an array, `{{for [myArray]...}}`, which include the 'layout' feature of passing in an array treated as a single object, by writing {{for [myArray]...}}\n\nClosing this. Please reopen if the scenario does not work for you.\n. Thanks for noticing this. Fixed in last checkin along with some other changes.\n. I agree with you that the  error message when the compiled template has a syntax error was potentially confusing, so I have taken your idea on this, though I have tried to implement it without impacting file size too much. See the latest commit.\n. Thanks Pat. See your combined request too.\n\nCurrently the design is to allow for jagged data (undefined properties) by rendering {{:undefinedProperty}} as the empty string. I think the same should happen for {{:~undefinedHelper}} (Here undefinedHelper is not necessarily a function, so really this is another way of passing in either data values or methods, just as data.undefined may be a missing method or property from the data model.)\n\nSimilarly if foo is a converter {{foo:name}}, or a tag {{foo/}}, we don't throw if they are undefined, but treat them as no-ops, returning the empty string, (or the unchanged value, for a converter).\n. Yes, good catch, thanks. Fixed in last checkin.\n. It's always good to check if an issue has already been submitted! This is a dup of two recent issues. \nhttps://github.com/BorisMoore/jsrender/issues/96\nhttps://github.com/BorisMoore/jsrender/issues/97\n\nTake a look at them for the explanation...\n. Yes, I agree :). I'll try to get to include one when I can...\nThanks...\n. JsRender, unlike jQuery templates, is not designed to run arbitrary code within templates. (For security reasons and to encourage better separation of concerns.)\n\nYou can easily create a helper function, a converter function, or a custom tag, and have it call your regex conversion code. \n. It's up to you to find the balance that works for you, but generally it is better to limit code in templates to direct calls to helper functions etc. \n\nFor example, you can do `{{for myArrayData.splice(3,myArrayData.length-3)}}` etc. etc. and that may be fine. But you could rewrite it as `{{for ~crop(myArrayData, 3)}}` or `{{myFor myArrayData upto=3}}`, and that may be better...\n. This issue has now been fixed in the latest commit: (pre beta commit counter: 8). \n#key corresponds to what was #index, and #index is now the inherited integer index from what the nearest parent view that has an integer index.\nSo #index is now unchanged when you wrap {{:#index}} in and {{if}} block.\n. JsRender does not parse literals (which are in fact object constructors), just as it does not let you give it global variables. ({{for someGlobal}} will not work). This is part of the 'codeless' philosophy, which prevents JsRender executing 'random' code. OTOH expression support is very full, so you can use parens, for example, quite freely in your expressions. And you can use [] as accessors, e.g. {{:phoneNumbers[0]}}. \n\nSo for your scenario, you can create custom tag or helper function to provide that behavior. For example\n\n```\n$.views.helpers({\n    iterate: function(from, to) {\n        var arr = [];\n        for (var i = from; i <= to; i++) {\n            arr.push(i);\n        }\n        return arr;\n    }\n});\n```\n\nAnd use it as in:\n\n```\n{{for ~iterate(1,12)}}\n    {{:#data}}\n{{/for}}\n```\n. Thanks for pointing out the missing closing tag. I noticed the same thing in some other sample pages too. Fixed now. (I didn't directly pull, since you wrapped in a table tag, which was incorrect given that the template was then rendered as content of a table tag..).\n. You can do as follows:\n\n``` html\n<table>\n    <thead><tr><th>Title</th><th>1st Quarter</th><th>2nd Quarter</th><th>3rd Quarter</th><th>4th Quarter</th><th>Total</th></tr></thead>\n    <tbody id=\"movieList\"></tbody>\n</table>\n\n<script id=\"movieTemplate\" type=\"text/x-jsrender\">\n    {{fields #data}}\n        <tr>\n            <td>{{:~key}}</td>\n            <td>{{:quarterlyGross[0]}}</td>\n            <td>{{:quarterlyGross[1]}}</td>\n            <td>{{:quarterlyGross[2]}}</td>\n            <td>{{:quarterlyGross[3]}}</td>\n            <td>{{:quarterlyGross[0] + quarterlyGross[1] + quarterlyGross[2] + quarterlyGross[3]}}</td>\n        </tr>\n    {{/fields}}\n\n\n    var movies = {\n        StarWars: {\n            quarterlyGross: [3.4,4.1,2.3,4.5],\n            totalGross: 14.3\n        },\n        Goonies: {\n            quarterlyGross: [1.5,2.1,3.3,2.5],\n            totalGross: 9.4\n        }\n    }\n\n    $.views.tags({\n        fields: function( object ) {\n            var key, \n                ret = \"\";\n            for ( key in object ) {\n                if ( object.hasOwnProperty( key )) {\n                    // For each property/field, render the content of the {{fields object}} tag, with \"~key\" as template parameter\n                    ret += this.renderContent( object[ key ], { key: key });\n                }   \n            }\n            return ret;\n        }\n    });\n\n    $.templates({\n        movieTmpl : {\n            markup: \"#movieTemplate\",\n            layout: true\n        }\n    });\n\n    $( \"#movieList\" ).html(\n        $.render.movieTmpl( movies )\n    );\n\n```\n. Closing since the above example addresses the requirements...\n. Note: The layout template design has since been modified. See the example here: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html. You can make an array render just once by wrapping it as an array, `{{for [myArray]...}}` so JsRender will treat the myArray as a single object. This is a similar to how you bind to arrays in jQuery: `$([myArray]).bind(...)`.\n. Thanks for pointing this out.\nIn fact your script block is not empty - it has new line. What was happening was with white space only the test for a jQuery selector was throwing in sizzle code. \nThis is fixed in pre-beta #5, and will now render with whatever the content is, including white space... If the template is the empty string, it will render the empty string... \n. The closing {{for}} should be {{/for}}\n. As in the case above, that is likely because you made a mistake matching tags. Check that you have {{foo...}} ... {{/foo}} for any block tags (such as if or for), and {{foo ... tmpl=... /}} for tags using external templates. Also that your HTML is well-formed... If necessary, build up your template step by step to find which construct is leading to the error...\n. Yes at some point both better error handling and some template validation tooling would be very valuable. But the priority is first to get the basic design and features established, and the primary scenarios working. Then we will have an official beta or beta2. Full documentation will be the next thing. Improved error handling after that. And additional developer tools probably after reaching V1.0. So I'm afraid some patience will be required as we move towards those goals... :) \n. Thanks for this. I was keeping these open for tracking, but waiting on fixing them, since I was not sure about throwing for all of these cases. Currently the design is to allow for jagged data (undefined properties) by rendering {{:undefinedProperty}} as the empty string. I think the same should happen for {{:~undefinedHelper}} (Here undefinedHelper is not necessarily a function, so really this is another way of passing in either data values or methods, just as data.undefined may be a missing method or property from the data model.\nSimilarly if foo is a converter {{foo:name}}, or a tag {{foo/}}, we don't throw if they are undefined, but treat them as no-ops, returning the empty string, (or the unchanged value, for a converter).\n\nFor the src property, I have not taken your fix, since I am trying to keep JsRender really small, and I think it should be quickly apparent that you can't load remote templates via a script block. This is already clear from the samples, but will be clearer still when documentation, and tutorials on how to load remote templates are available. \n\nThe combined fixes above actually would have added 6.5% to the minified file size of JsRender.\n\nI agree with you that the  error message when the compiled template has a syntax error was potentially confusing, so I have taken your idea on that one, though I have tried to implement it without impacting file size too much. See the latest commit.\n. Are you using JsViews in the page? \nIf so, then you need to set {{if ... link=false}} when rendering if blocks within attribute markup.\n\nIf not, then \na) when you say it chokes, can you be more specific?\nb) can you provide a stripped down example in which you include only the markup which seems to be the source of the problem. Even better, create a minimal test case on jsfiddle...\n\nThanks...\n. Ah, I tried in IE9. You didn't mention it was IE8.\n\nThe problem is `{{else if ItemID}}`.\nThat's the wrong syntax. It should be {{else ItemID}}\n\nSee https://github.com/BorisMoore/jsrender/issues/65\nand http://borismoore.github.com/jsrender/demos/step-by-step/04_if-else-tag.html\n. Not sure if I understand you, but it sounds as if you are using a template declared in a script block, and that you are then rendering new content into a parent element, so that the script element is removed. If you use templates declared in script blocks, then you should not remove the script block and then call $(\"#scriptBlockId\").render again. You can store the compiled template as shown in these examples http://borismoore.github.com/jsrender/demos/variants/variants.html. \n\nIf you want to update the template and re-render, you can recompile the template from a string, before re-rendering it. You can also have a template that is itself rendered by another template, but in that case you don't need to insert it into a script element. Just keep it as a string, and compile the new template from your updated string.\n\nIf this answer doesn't clarify, can you create a test case on jsfiddle, so I can better understand what you are doing...?\n. JsRender is not based on the DOM. Is this error getting thrown in JsRender code, or elsewhere?\n. Yes, #foo is short for #view.foo, so #parent means #view.parent. OTOH if you just put parent, it is going to look for a data property called parent, i.e. #data.parent where #data is your current data item.\n. You need to understand the way the view hierarchy works. \nSee https://github.com/BorisMoore/jsrender/issues/96, and also the reply I just posted on StackOverflow.http://stackoverflow.com/a/10452828/1054484\n\nThat added {{if}} tag is adding a nested view, but with the same data property as it's containing view. \n. Note: The layout template design has since been modified. See the example here: http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html\n. Thanks, I'll take a look when I can. I'd like to look more closely at those perf tests, too, since the divergence in results seems surprising. Why are the results so different from these:\nhttp://jsperf.com/dom-vs-innerhtml-based-templating/433\n\nAt the end of the day there are only so many ways a template engine can concatenate strings. Of course you pay a price too for additional tests, so the less features (e.g able to deal with jagged data, helper functions, etc.) the less code that needs to run, and so the better the perf, at least in principle. \n\nBut on memory leaks, I have not seen that, but will try to investigate...\n. Yes, that difference in speed of DOM operations and string concatenation is why I personally think doing a 'shoot off' between templating engines showing only the string concatenation is actually a pretty bad idea! Why? Because intelligent people look at those figures, and make business decisions to choose A versus B, 'because A is twice as fast as B'! Now sure, B has twice as many features, but, they ask themselves, is it worth the perf cost for those features if B is twice as slow?. They should be comparing perf with DOM insertion to get some sense of the real relative cost of those features in how they may relate to actual site perf...\n\nAlso, the figures ignore completely how long it takes to compile a template, and how that relates to the time rendering the template. And again, how long it take to HTML encode - since that is what you generally need to do. The final result is that  decisions may end up being made for completely the wrong reasons. \n\nThat's why my own perf test page carefully documents perf on each of these aspects:\nhttp://borismoore.github.com/jsrender/test/perf-compare.html\n\nHere is an example on Chrome:\n\n---\n\nOptimized render to string\nHandlebars: 0.2\nJsRender (optimized .fn() method - for simple templates):   0.3\nJsRender (.render() method - full view-hierarchy features): 2.7\n\n---\n\nRender to string, with HTML encoding\nHandlebars: 5.4\nJsRender (optimized .fn() method):  5.4\n\n---\n\nFull features - view hierarchy etc.\nHandlebars  - inserted in DOM:  89.5\nJsRender full features - inserted in DOM:   92\n\n---\n\nCompile\nHandlebars compile: 250\nJsRender compile:   86\n\n---\n\nCompile plus render plus html encode \nJsRender: 86 + 92 + 2.7 (increment for HTML encode): result 180.7 \nHandlebars: 250 + 89.5 + 5.2 (increment for HTML encode): result: 344.7\n\nBut if you look at just string rendering you have JsRender (for simple templates) 0.3 and Handlebars 0.2. So JsRender (in this case, which is on Chrome, where Handlebars is faster) is \"50% SLOWER!!!\". Yeah. That's .1 milliseconds from a total fo 180 milliseconds! Now you look at the full feature rendering, and JsRender is a lot slower (on Chrome) at 2.7 milliseconds.\nAnd guess what, look at the final comparison, where we are using full feature rendering. Handlebars is nearly twice as slow as JsRender because of compilation time. \n\nNow you will tell me, sure but you can pre-compile, you only compile once, and maybe render thousands of times. But even then, without compilation at all, we have a difference of .1 milliseconds out of a total time of about 95 milliseconds.\n\nRender plus html encode \nJsRender: 92 + 2.7 (increment for HTML encode): result 94.7 \nHandlebars: 89.5 + 5.2 (increment for HTML encode): result: 94.7\n\nWe shouldn't even be thinking about that string rendering figure! The only reason I worked hard on reasonable optimization of that aspect is because of the good/bad publicity effect of perf comparison shootoffs like this one!\n\nOK - that was my rant on perf comparisons :)\n. Ah - forgot to close this! Fixed in https://github.com/BorisMoore/jsrender/commit/27c0bed8bd8f94032b7000f7a538606de761836e, on May 27th;\n. I don't see that. The first unit test here calls nested functions, compiles correctly and calls the functions correctly\n\nhttp://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=api%3A%20helpers\n\nBTW you have {{ instead of {{:\n\nand {/if} instead of {{/if}}\n. a} $.render.test(1) - pass some data, or it will render the empty string\n\nb) {{if foo }} ... {{else}} {{/if}}\nNOT\n{{if foo /}} ... {{else}} {{/if}}\n. Yes I know it is not easy without documentation but the goal is to get to a great library with good documentation, and that can only happen step by step., If is not yet beta. Documention will come. In the meantime the samples attempt to show the basic features. You also  have the unit tests. See http://borismoore.github.com/jsrender/test/unit-tests-no-jquery.html?filter=api%3A%20render for example\n\nYou can set layout=true if you want to render a template independently of data. Otherwise, if you pass an aray it will render once for each item, so whether and how many times it renders absolutely depends on data.\n. I should add that although documentation is limited, there are already some excellent articles and training material available, including these excellent ones from John Papa:\nhttp://msdn.microsoft.com/en-us/magazine/hh975379.aspx\nhttp://www.pluralsight-training.net/microsoft/Courses/TableOfContents?courseName=jsrender-fundamentals\n. Thanks for questions and thoughts. Not able to pick up on the discussion right now, but I hope to follow up on this at some point. \n. Heads up that I have removed the layout feature, and changed the behavior when you render with no data. See commit\nhttps://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0.\nI think this does make more sense...\n. Thanks. I replied to your comment\nhttps://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0#L2R55\n. Yes, I did read it :). I'll respond further in the coming days.\n. @Thinkscape: My apologies - \na) I said I would respond in the coming days, but I never did so, \nb) the features you requested are now available in JsRender - but I didn't remember to call out the update, here on this thread. Doing so now... \n\nSee https://github.com/BorisMoore/jsrender/issues/98#issuecomment-54587518 for some  more context. \n\nAlso https://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0#commitcomment-7670537\n\nAlso - here is an updated version of your jsfiddle above, which works as requested, using current JsRender bits: http://jsfiddle.net/hELrh/14/\n. Yes, thanks but there are already several issues :) on this which are closed as dups and explained here:\n https://github.com/BorisMoore/jsrender/issues/96\n\nI reopened that one, for discoverability and documentation...\n\nClosing this one as dup...\n. This issue has now been fixed in the latest commit: (pre beta commit counter: 8). \n#key corresponds to what was #index, and #index is now the inherited integer index from what the nearest parent view that has an integer index.\nSo #index is now unchanged when you wrap {{:#index}} in and {{if}} block.\n. JsRender does not cache its output. Did you debug your ajax calls and look at the repsonse data before it is rendered by JsRender. E.g. this updated version http://pastebin.com/8MCfwFWf\n. Closing, since this doesn't seem to be a JsRender problem. Please reopen if that is not the case, after your additional tests.\n. I hadn't noticed that you had a data-jsv-tmpl attribute on your script blocks. Are you rendering those script blocks from a another template?  And are you calling link on the whole page, or on some parent element of those script blocks. If so, why? \n\nGenerally if templates are in script blocks, keep them as static content which is never changed or linked. If you want to generate the template from data or from the server, use strings, and call $.templates(...) to compile the strings as templates.\n. You used the wrong URL for jsrender. That was not a url to the code, but to a github page showing the content.\n\nPoint to a raw file, or better, this http://borismoore.github.com/jsrender/jsrender.js which has the correct content, so will work in IE.\n\n{{/for}}, not {{/for people}}\n\nI switched to nowrap(body)\n\nhttp://jsfiddle.net/LcwSK/23/\n. You have two `{{/if}`s which should be `{{/if}}`s (missing closing curly brace)!\nReopen if there is some other issue, but I think that is all it is...\n. The design was changed in a recent commit:\nhttps://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0\n\nThere is a new sample here: See http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html\n\nRather than setting layout=true, or isLayout=true, you simply need to pass your data array wrapped as an array, `{{for [myArray]...}}` so JsRender will treat the myArray as a single object. This is a similar to how you bind to arrays in jQuery: $([myArray]).bind(...).\n\nThis change follows feedback (see issue 118 for example) around the layout template feature.\n\nPlease reopen if this new approach does not enable your scenario... thanks.\n. JsRender is all about pure string based rendering, with no DOM dependency - so is unlikely to have a browser dependency. \n\nIs the string that you are setting as the markup property on the $.templates call (obtained from the AJAX call) the same for each browser? And if so, is the string from $.render.tmplName() the same? Or is the difference ocurring in passing the same string to the $(...).html() method?\n\nYou need to isolate the point at which the browser dependency manifests.\n. Closing since I have no repro on this issue. Assuming it is not a JsRender bug. Please reopen if you have more information.\n. JsRender itself doesn't have any knowledge of DOM tags, so if you look directly at the output of the render() call you should see the correct output. \n\nSome questions to help you narrow it down:\nAre you using server rendering? \nIs the template loaded into the DOM before being passed to JsRender, or are you passing your string (correctly) straight to $.templates()? \nIs this behavior the same in all browsers?\n. Yes, thanks for the suggestion. I agree chaining converters is a relevant scenario. I'll be looking into something along these lines. Not sure whether it will be now, or after beta, but at any rate for V1 I think it would make sense...\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. You are using \"var\" as key in your data object. In IE7 and IE8 that is not allowed. You can rewrite using a different name, or you can put in quotes:\n\n``` javascript\nString.prototype.whatever = function(){}; \n$.views.templates({foo:'whatever with a var {{:#data[\"var\"]}}'}); \nvar result = $.render.foo({'var':'foo'});  \n```\n\nThe above no longer throws. \n\nI don't see any issue arising from the extending of the String.prototype. The template seems to compile fine and give the right result...\n. 'class' is also a keyword. In IE 8 or earlier, you can't use keywords for names of properties on JavaScript objects (keys in hashes, if you will). Change your \"class\" property on the data to 'className', or something else, or write {{:#data['class']}} and it works fine.  \n. No. I don't want to slow down and increase size and complexity of compilation to work around use of keywords, when there are two workarounds available for the user. a) Don't use keywords b) quote the keywords in your templates. No other template engine will even support foo[\"class\"] in a template, let alone compile foo.class to that. foo.class is a javascript error in IE8 and it is more than reasonable for it to be one in JsRender. We are targetting lean and mean.\n\nAlso this issue is talking about extending the String prototype, As such it takes up my time uneccessarily trying to a) understand, b) resolve the issue. Best to investigate issues a bit further before asking me to investigate them!\n. Well, OK, if you feel that is bogus, then can you fork, and create a pull request with this feature? I'd be happy to take a look if it is indeed possible to do this without cost in complexity, perf or file size.\n. Thanks for expressing that... I feel similar, of course.\n. Yes, you can do that, but it required a fix that has just been added in https://github.com/BorisMoore/jsviews/commit/a92f67f7f01b3f6e949295b08e45867429dd65a5. \nSo with the latest version, the above will work.\nHowever, if you are using JsViews, adn the link method (rather than just JsRender and the render method) then you should set link=false on the {{if}} and {{else}} tags:\n`{{if #index == 0 link=false}}{{else link=false}}{{/if}}{{:name}}`\n\nSetting link=false tells JsViews not to insert databinding annotations inside the block tags. See https://github.com/BorisMoore/jsviews/issues/74.\n. You can do that, but use the latest version. There was a bug fix in the last commit which you probably need for the above to work. If you use JsViews and the link method rather than the render method, you will need to set link=false on {{if}} and {{else}}. See https://github.com/BorisMoore/jsrender/issues/129 for more details.\n. You can use `{{:#get(\"array\").data.length}}`. - or `{{:#get(\"array\").data.count}}` if data has a `count` property\n\nThe advantage of this approach which is method-based, rather than relying on adding a `#count` or `#length` property, is that it avoids setting a property on every 'item view' which is going to need to be updated whenever an item is added or removed from the array. In JsViews this would be a significant perf hit. Also, if you are in a child view (e.g. in an {{if}} block) under an item view, you still want to be able to access the same `count` property. So we would have to maintain the extra property on nested views, too, or address the problem that you can't get the count inside a nested context. But the `{{:#get(\"array\").data.length}}` works fine in both item views and nested if blocks etc. (And similarly for index: `{{:#getIndex()}}` will work inside `{{if}}` blocks...).\n\nDoes this address your scenario? \n. Yes, providing #count() should be possible, exactly like #index(), so we could consider adding that API. I'll keep this open to track that proposal...\n. Planned for after V1. Are you not able to use `{{:#get(\"array\").data.length}}` as a workaround for now?\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. The method view.render() is now view.refresh(). See https://github.com/BorisMoore/jsviews/commit/63b23d6a72c61291a4a6c8983949393799c8be95 (2 or 3 weeks ago). Changing to parent.refresh() should fix it. If not, can you reopen this issue? \n. This request has been addressed (or at least much improved) in the latest commit (19). Error handling has been much improved (with better support for clear error messages when you make syntax errors in the template etc.). There is now a custom error type which you can catch in your code, and you can also override that Error type by replacing $.views.Error by a different implementation - in which you can add your own hooks.\n\nYou can set $.views.debugMode to false is you want to suppress the throwing of exceptions on error (and hide error messages from the user).\n\nHowever, some scenarios will not throw - specifically if a data property or helper/template parameter whose value is being rendered is undefined, since JsRender deliberately supports 'jagged data' - and renders the empty string when the value is undefined.\n\nLeaving this open until you have been able to test this design and implementation... \n. Closing, since I didn't hear back.\n. Well within the {{for items}} the data context (current data item) is the item of the items array.\nSo you are testing for the an item with item.ranked == true. But your ranked property is on the object which has the items property, not on the item. Maybe you want  \n\n```\n{{for items}}\n   {{if #parent.parent.data.ranked)}}{{:#index}}{{/if}}\n{{/for}}\n```\n\nAnother approach you can use is to create a template variable which copies the ranked property and makes it accessible to the nested templates via the template context:\n\n```\n{{for items ~isRanked=ranked}}\n   {{if ~isRanked)}}{{:#index}}{{/if}}\n{{/for}}\n```\n\nData properties are not automatically exposed in nested contexts. (There is no `with (data) {}` block in JsRender). But template parameters provides a better way to opt in to exposing variables to nested contexts...\n. @Krish2215: This is for reporting bugs and other issues, not for general help questions. You could try stackoverflow https://stackoverflow.com/questions/tagged/jsrender. But you will need to give much more specific context, and ideally a jsfiddle to show your exact difficulty..... Thanks Roger.\nI'm not seeing this in my test. Did you also try with the latest version (number 17)? Can you test against a simple template (not returning javascript) and see if you get the same issue? It looks like it must be something related to the template you are using, so I can't get the same results without knowing more about the template...\n. Thanks for your repro samples!  This turns out to be an issue with a jQuery regex used for determining if a string is a valid selector. jQuery does not expect things like single curly braces in those strings, (which you are using because your template is producing javascript!). \n\nI have fixed this in the latest commit (19). \n\nLeaving open until you have been able to test... \n. There are pros and cons of both designs, and also changing it now will break a lot of folks. I have a candidate fix, but have not yet decided whether to make this change to the design. \nThe change would add 3.2% to minified file size of JsRender (or 1.35% estimated gzipped), if we went ahead with it.\n. {{else if foo}} contradicts the basic tag syntax {{tagname param1expr param2expr namedparam1=namedparam1expr ...}}\n. I have decided to stay with the current design, based on feedback from a number of users to whom I put the alternative designs. Most preferred the current design.\n. No, not Ruby developers. John Papa, above, for example, is not a Ruby developer. \nPeople generally don't try to write `{{elseif ...}}` they instead guess that the syntax will be `{{else if ...}}` so they would come unstuck on that even if we supported `{{elseif ...}}`. I will be adding error detection on `{{else if ...}}` which will point them to the correct syntax. See discussion [here](https://github.com/BorisMoore/jsrender/issues/148#issuecomment-7881072)\n. There is nothing to stop someone doing `var myObject = { \"if\": ... }`. Neither JavaScript nor any templating language or even JS library like jQuery rejects that, to my knowledge, even if the browser (in some cases) does... So you can indeed have object properties that correspond to key words.\n\n```\nvar myObject = {\"if\": 23};\n$.each(myObject, function(key, value){\n    debugger; // key=\"if\"\n});\n```\n\nThat said, I stated in the [linked comment](https://github.com/BorisMoore/jsrender/issues/148#issuecomment-7881072), above that I was OK with throwing an exception if you write {{else if expr}} since the scenario can reasonably be excluded. I also agree (of course) that {{else if xxx}} would not be the right syntax for the else if semantics, whereas `{{elseif xxx}}` or `{{else xxx}}` are both, in my view, possible syntaxes that can be considered. If you have both an `{{elseif ...}}` and an `{{else ...}}` tag, then you need to define (and implement for) what will be the behavior if you write `{{elseif}}` with no argument, or `{{else}}` with an argument. \n\nIs `{{else expr}}` an error, or is it equivalent to `{{else expr}}`? Is `{{elseif}}` an error, or is it equivalent to `{{else}}`? If they are errors, that requires extra code and error strings, and increases the size of JsRender. If  they are equivalent, that means there are two syntaxes for the same thing, Is one deprecated? What happens when  I copy code with one syntax, and then see the other syntax? It is a source of confusion and unclarity, and complexity in the documentation (assuming it is documented.) Those are some of the reasons I went for the compact unambiguous 'lean and mean' style of `{{else[ expr]}}`. Once we hit Beta and get full documentation, people should discover the `{{else...}}` syntax as soon as they discover `{{if}}`. They already have plenty of examples, such as [step-by-step/04_if-else-tag.html](http://borismoore.github.com/jsrender/demos/step-by-step/04_if-else-tag.html).\n. (BTW commit 24b was not related to this issue: The above message was added automatically by GitHub but was an error...)\n. I'm not sure if I understand your question. If you mean that you want to let the user tap/click on a product in the list, and then show the detail for that product, then it sounds like you need to use JsViews. Take a look at the JsViews samples, including this one: https://github.com/BorisMoore/jsviews/blob/master/demos/step-by-step/04_editable-data.html. \n\nJsViews does data binding, allows you to change data objects and arrays 'observably', so the changes get updated automatically in rendered templates. And it allows you to get from a click event to the corresponding view object and the data item it was rendered against.\n. Closing for now. Please reopen if JsViews data-linking is not what you need, and if you can clarify your request. Thanks!\n. Not sure about \"extremely unhelpful\". At any rate, on reaching beta I will be adding not just a readme but full documentation. \n. Thanks samcov. Yes, John's articles (and also his Pluralsight training) are really good.\nFor Beta, I updated the readme to give a bit of context on that. For JsRender it can be pretty much considered beta now (but see the readme comment). I'm doing a lot of work going on taking JsViews to what it will be for Beta, but making very good progress...\n. Yes, and you can also see the source by browsing under the demos folder here https://github.com/BorisMoore/jsrender, or here for JsViews: https://github.com/BorisMoore/jsviews.\n. There is now a whole documentation site here: http://www.jsviews.com. Closing this issue...\n. Thanks for bringing this up. But I see this as a clear case of putting JavaScript code into template markup which would be better separated out from markup. The intention of JsRender is to make it very easy to achieve good separation of concerns, by separating code into registered converters, tags, helper functions, methods on your data model or view model, etc. Already JsRender needs to know something about JavaScript syntax to able to compile template functions that include expressions. But to require it to also to know and detect the syntax for regular expression literals would a) encourage putting even more code into template, b) add a performance and code-size cost to JsRender.\n\nIn you scenario, why not register a 'nl' converter which replaces newline characters by ``s?\n\n```\n$.views.converters(\"nl\", function(val) {\n    return val.replace(/\\\\n/g, '')\n});\n```\n\nand in your template you put `{{nl:address}}` \n\nClosing, since supporting RegEx literals in template markup is not a goal...\n. The above template works fine for me, as a local template. Not sure what your problem was coming from. There are no unmatched tags in your sample above. Did you try just putting your template locally in a script block to test it?\n. Ah OK. Curious what it was that would lead to that error message - which seems to have not been appropriate. I don't know if you have time to show me a small example of your scenario producing that message... Also what it is (in terms of data) that Handlebars accepts and JsRender doesn't. Mostly I thought JsRender was a superset of Handlebars for features, but I may well be wrong since I haven't really used Handlebars beyond a quick test run...\n. The issue was that you did not have matching tags in the section you did not show in the samples:\n\nYou had\n\n```\n{{for articles}}\n    {{if img === false }}\n        ...\n    {{/if}}\n    {{else}}\n        ...\n    {{/else}}\n{{/for}}\n```\n\ninstead of\n\n```\n{{for articles}}\n    {{if img === false }}\n        ...\n    {{else}}\n         ...\n    {{/if}}\n{{/for}}\n```\n\nSee http://borismoore.github.com/jsrender/demos/step-by-step/04_if-else-tag.html.\n. You are using render to get the rendered html string, right, and then inserting it using $(selector).html()? \n\nYou can run the code that compiles the template and then renders the html string in a script block preceding the rest of the page content, (other than the template declaration script block), or you can try compiling the template from a string, and put the script at the top of the page (first child of body) or try putting it in the head section.\n\nThen immediately below the target container for the rendered content put the `$(\"#target\").html(html);`. That may improve perceived speed.  \n. Did you mean like this?:\n\n```\n{{for list ~outerData=#data}}\n...\n{{if ~outerData.some.path===...}}\n...\n```\n\nSee http://www.jsviews.com/#parentdata\n. Yes, I just [replied](http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html?showComment=1343072525117#c528925128025675429)  on the blog: \n...As they say in that article, \"concatenating is actually slightly more efficient on IE8 and other non-IE browsers such as Chrome\", so while I used to always use the push/join technique, I switched to concatenation in JsRender, considering IE7 a less important target than the other browsers. But I will try to follow up on investigating the real differences in each browser, and consider whether to switch back. I may wait till being ready for beta first though, and then go into some more specific perf optimization work... \n\nI'll keep this issue open to track the possible switch back to concatenation....\n. JsRender templates can be precompiled. Just get the compiled template function, put it in a js file, and point to it.\n\nOther template engines are also using string concat, and likely to hit the same IE7 issue. \n\nTo compare JsRender and Handlebars, run this page: http://borismoore.github.com/jsrender/test/perf-compare.html. Results below running in IE7. \n\nAlso bear in mind that Handlebars is 30.1k minified and JsRender is 8.6k minified! \n\nRender to string \nHandlebars:  6.1 \nJsRender :  5.0 \n\n---\n\nRender to string, with HTML encoding \nHandlebars:  37.1 \nJsRender:  22.6 \n\n---\n\nCompile \nHandlebars compile:  1998 \nJsRender compile:  713 \n. @Jeff: Yes, you are right, I'm sorry, I was oversimplifying the problem of precompilation. It would be good to provide a precompiler tool, but you are on the right track above. For the render function, it is exposed outside the library, as `$.fn.render`, so you should simply be able to write `render: $.fn.render` in place of your inline function above. That should then work, except that if there are nested templates (block tags), you would need to put the precompiled nested template objects, following the same pattern as above, in the `tmpls: []` array. And similarly, recursively if there are two or more levels of nesting. \n\nSimilarly, link expressions from data-link=\"...\"`could (should) be precompiled and inserted in the`links: []` array.\n\nI'll also answer on the linked [issue #30](https://github.com/BorisMoore/jsrender/issues/30). \n. The simplest way is to use HTML character codes:\n\n`{{:xxx}}`\n\nIt is also possible to do \n\n`{{:'{{:xxx}'+'}'}}`\n\nIn fact what you need to avoid in strings etc. is two adjacent }'s since the parser looks for the }} as the end of the tag.\n. Closing, since question answered above...\n. Since that is JavaScript code, and you are passing a javascript string, the following string `\"\\\\\"` contains only one character. \nTry this:\n\n``` javascript\n\"\\\\\".length\n1\n\"\\\".length\nUnterminated string constant\n```\n\nSo JsRender implementation code will see `\"\\t\"` as a string with a tab character, and `\"\\\\\"` as a string with a single backslash. \n\nPutting `\\` characters into a script block or an HTML document used as a template declaration, on the other hand, should lead to those characters being escaped so they are preserved in the rendered output. That is not being done correctly and is a bug. (Thanks for drawing my attention to this, even if it is a bit different to your specific issue!) A fix is on the way for this.\n. This has been fixed in commit 22. Please reopen if the fix does not work for you. Thanks!\n. Yes, expressions are accepted in JsRender tags, allowing you to write things like `{{:#index+1}}` or `{{if a < b}}` etc. so clearly random characters in property names will not be correctly parsed, any more than they will be in a JavaScript expression. If you write `var foo = myObject.iso-code;` the `-` will be treated as a minus sign. So you must either use only valid JavaScript name characters (a-z, A-Z, 0-9, _, $), or you must write `myObject[\"iso-code\"]`. Same thing in a JsRender expression. In this case you can write `{{>#data[\"iso-code\"]}}` or `{{>#data['iso-code']}}`, since `#data` is the current data object.\n. Note that the above reply concerns JsRender, not JsViews. See https://github.com/BorisMoore/jsviews/issues/311 for JsViews aspect.\n. Yes, this is because if foo is undefined, {{for foo}} renders the template once, just as it does if foo is an object. It doesn't know that foo is intended to be an array. {{for false}} {{for null}} {{for 0}} and {[for undefined}} will all render just once. The current #data item will be false, null, 0 and undefined in each case. \n\nHowever if subForms is an an empty array, `[]`, {{for subForms}} will not render anything.\n\nThis has been the design going back several months (and it seems to me your test page behaves in this way going back to this commit of 3 months ago: https://github.com/BorisMoore/jsrender/tree/fc7a28b0b2c670c548f7966bb22bf14038aed4e0)\n\nYou can either set the subForms to the empty array, or you can wrap the {{for subForms}} in an {{if subForms}}, or if you want you can register an emptyArray helper, or pass it in as an option:\n\n```\n$(\"#render\").html($(\"#myTmpl\").render(data, {emptyArray:[]}));\n```\n\nand then do \n\n```\n{{for subForms || ~emptyArray}}\n```\n. You agree that you were using a version at least 3 months old, right? Otherwise, I would not have expected this to change when you went to the latest version. \n\n`$.each` only accepts arrays. If you pass it somethings without a length property, or null, or undefined, etc. it will throw! Pass it an empty array and it will not run, and not throw. Pass `{{for }}` an empty array and it will also not run and not throw!\n\nYou have a lot  of options, including setting the model to have an empty subForms array, when there are no subForms, and not touching your templates at all. You can do the fall back default behavior, with emptyArray as above, which is basically a search and replace in your templates. Yet another alternative is to write a custom tag to use instead of `{{for}}`, with your desired behavior (see following comment)...\n. BTW another reason for the current design is that you can do simple template inclusion as follows:\n\n```\n{{for #data tmpl='myIncludedTemplate'/}}\n```\n\nIf you want to write your own custom tag, here is a possible design:\n\n```\n$.views.tags({\n    \"iterate\": function() {\n        var i,\n            result = \"\",\n            args = arguments,\n            l = args.length;\n        for (i = 0; i < l; i++) {\n            result += (args[i] && args[i].length) ? this.renderContent(args[i]) : \"\";\n        }\n        return result;\n    }\n});\n\n{{iterate subForms}}...{{/iterate}}\n```\n. BTW this comment in issue 151 spells out some use scenarios for {{for}}:\nhttps://github.com/BorisMoore/jsrender/issues/151#issuecomment-7846879\n. Are you using informal pre beta commit counter: 21 version of JsRender? And are you also using JsViews. JsRender doesn't have a DOM dependency, so should not be different in IE7. But IE7 creates global vars e.g. if you have ``. You will then have a foo var which may collide with something else. But that would be the same with earlier versions of JsRender.  \n. Yes - my comment had a `{{>Name}}\n```\n\nIf you don't use JsRender at all and simply do the same using the equivalent string (including the whitespace), then I believe you will still have a problem. So not a JsRender issue... Can you confirm?\n\n```\n  var html = theLongStringWithWhiteSpaceAndNewLInesIncluded;\n  $(\"#tb\").html(html);\n```\n. Yes, I reported it to the IE team, and apparently it is fixed in IE10.\n. You can write:\n\n`{{for people}}...{{/for}}`, or  `{{for people tmpl=.../}}` to include an inline block or external template, iterated over an array, so the current item is the member of the array;\n\nor `{{for address}}...{{/for}}`, or  `{{for address tmpl=.../}}` to include an inline block or external template rendered once, but with current data item being the object;\n\nor `{{for tmpl=.../}}` to include an external template with current data item undefined, \n\nor `{{for #data tmpl=.../}}` to include an external template with current data item the same as the containing template context. \n\nYou can also write `{{for [people] tmpl=.../}}` to include an external template, rendered just once (rather than iterating) for an array, which is used in the following example: [scenarios/05_arrays-plus-headers-and-footers](http://borismoore.github.com/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html)\n. The above comment gives some alternatives for template composition. Does that cover your requirements?\n\nBTW to include markup in a comment on GitHub, you can wrap with 'backtick' characters, as in `` or with triple backtick characters as in \n\n```\n<script>\n```\n\nSee GitHub Flavored Markdown link above, when in edit mode.\n. I was thinking of the following style, which avoids adding too many new tags is, and is consistent with {{if}} {{else}}, and {{for}} {{else}} as well as custom tags such as http://borismoore.github.com/jsviews/demos/tag-controls/tabs-control.html:\n\n```\n{{switch ~getvar('renderType') case=\"email\"}}\n    ...\n    {{else case=\"email2\"}}\n    ...\n    {{else case=\"file\"'}}\n    ...\n{{/switch}}\n```\n\nI am in two minds about requiring \"break\" and defaulting to \"pass-through\". This is declarative markup, not procedural code. Template should run without side-effects, etc. and there is a balance two be hit between logic and logicless. The following would provide the same semantics as your {{break}} example above...\n\n```\n{{switch ~getvar('renderType') case=\"email\" || \"email2\"}}\n    ...\n    {{else case=\"file\"'}}\n    ...\n{{/switch}}\n```\n. Agree, that is the question. But I have already gone down the route which introduces a more declarative style which is concise, flexible, and less 'procedural looking'. But I agree, you don't immediately grock it if you have never seen it before and are expecting procedural markup. I am counting on that pain point being short lived... Otherwise I would have needed {{if}} {{elseif}} {{elseif}} {{else}} {{/if}} as well as {{for}} {{elseifempty}} {{/for}} and so on. And I would have needed to allow/require people to write custom tags like {{tabs}}{tab}}...{{/tab}}{{tab}}...{{/tab}}{{/tabs}}, and provide APIs for implementing those 'companion tags'.\n\nThe approach I have adopted instead is that any block tag can have multiple content blocks instead of one. You simply add {{else}} tags as separators - so it means 'this content _else_ this content _else_ this content'. And when you implement {{foo}} you can implement the semantics you want it to provide for its {{else}} blocks (as in {{foo}}...{{else}}...{{/foo}} ...). \nSee my implementation in jsrender.js of the {{for}} and {{if}} to get the idea:\ntags.https://github.com/BorisMoore/jsrender/blob/master/jsrender.js#L1321 \n. By all means... Thanks Rob...\n. Thanks Rob. This is definitely not for beta, and I am putting the priority on getting the beta finalized and officially released, and documenting that. So I will need to put this 'switch' feature aside until after that. Hope you are Ok with waiting until then before I get back to you with more thoughts/suggestions/responses...\n. Great. Thanks!\n. Sorry, I need to look at your code to answer, but I have been working on urgent beta fixes, so no time yet. Not sure when I will get to it, but I'll  try...\n. Thanks Rob. Finally a first response to your questions.\n\nYou can get tagCtx.args[0] for the value of the first unnamed param, which is the actual value you are testing for. Does that correspond to your questions?\n\nSo that suggests the following update to your code:\n\n``` javascript\nrender: function() {\n    // This function is called once for {{switch}} and once for each {{else case}}.\n    // We will use the tag.rendering object for carrying rendering state across the calls.\n    // If not done (a previous block has not been rendered), look at expression for this block and render the block if expression is truey\n    // Otherwise return \"\"\n    var self = this;\n\n    if (this.tagCtx.index === 0) {\n        // This is the switch tag so get the switch value\n        this.switchValue = this.tagCtx.args[0];\n    }\n\n    // Check if we have a value to switch against\n    if (!this.switchValue) {\n        // No value, return blank string\n        return '';\n    }\n\n    // Get the case evaluation result\n    var ret = self.rendering.done || !this.switchValue || (this.switchValue != this.tagCtx.props.case && (!self.rendering.done && this.tagCtx.params !== 'default'))\n            ? \"\"\n            : (self.rendering.done = true, self.selected = self.tagCtx.index,\n                // Test is satisfied, so render content on current context. We call tagCtx.render() rather than return undefined\n                // (which would also render the tmpl/content on the current context but would iterate if it is an array)\n                self.tagCtx.render());\n    return ret;\n},\n```\n\nI didn't check through your onUpdate...\n\nHow does the above look to you?\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. Yes, that looks like a bug I noticed recently and which should be fixed in an upcoming update I am working on. It's a major update, so may be a few days before I am able to commit it... \n. You probably have to go back at least to [this](https://github.com/BorisMoore/jsrender/commit/6d31cf7eb8a10d63bd4f43872cd8f5ef7557ef44). \nThe error was likely introduced [here](https://github.com/BorisMoore/jsrender/commit/e57b82f34a4fb1a00edc7aeed4be504937c0cc39) (May 25th) \n. This has been fixed in commit 22. Please reopen if the fix does not work for you. Thanks!\n. @king5699: \n\nThere's an example in the unit tests:\n\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-no-jquery.js#L509\n\nFor example:\n\n```\n$.views.settings.delimiters(\"@%\",\"%@\");\n```\n. If you are talking about the number of threads peaking etc. that doesn't sound like it is anything to do with JsRender. JsRender runs in javascript in the browser, which is single threaded. Maybe an IE memory leak, independent of JsRender?\n\nYou have an error in the template, corrected below, since inside the {{if names}} block the _item is not longer the current data context. so {{for names is wrong. You can write: \n\n```\n{{if names}} <ul class=\"j-icon-list\"> {{for #parent.data.names}} <li> <a href=\"javascript:\">{{:#index}}.&nbsp;{{>name}}</a> </li> {{/for}} </ul> {{/if}}\n```\n\nJsRender only does string rendering. To test memory leaks in JsRender, it would be better to just do \n\n```\n  var test = $(\"#userMenuItemTemplate\").render(_item));\n```\n\nrather than \n\n```\n    $(\"#menuMoreUsersInner\").empty().append($(\"#userMenuItemTemplate\").render(_item));\n```\n\nwhich is using jQuery and the DOM heavily (in addition to running JsRender) in ways that are potentially themselves a source of a memory leak.\n\nWith the above changes, can you see if you still have a memory leak problem? \n\nYou can also replace the JsRender code by the following and see if you have a memory leak _without_ using JsRender.\n\n```\n    $(\"#menuMoreUsersInner\").empty().append(\"the same long string that would have been returned by the JsRender render() call\");\n```\n. `{{for #data tmpl=\"#MyTemplate\" /}}` is correct. The `{{for}}` is not a loop tag, but a _\"render content for this data\"_ tag, and is designed also for simple template include scenarios. (Note that the data may or may not be an array.) \n\nThis is discussed in issue #151. See in particular this comment: https://github.com/BorisMoore/jsrender/issues/151#issuecomment-7846879.\n\nI think that once the beta is released and full documentation is available, this will become clear thanks to the docs...\n\nIf there was a specialized `{{include}}` tag, then that would be the first time there was a block tag  that was only used in the form `{{foo tmpl=\"...\"/}}` and never in the form `{{foo}}inline content{{/foo}}` since the latter would need to be a \"no-op\".\n. It is the same as the `render(data)` method, which renders once for an object and loops over the data if it is an array... So `{{for}}` and `render()` are each used both for rendering against an object, and for looping through an array. This is why it is called `{{for}}` and not `{{each}}`.  If we did introduce an `include` it would need to be a tag which does not also accept a data parameter, since otherwise, it gets very similar (almost redundant with) `{{for}}`, except for not iterating. It would still have the oddity that `{{include}}...{{/include}}` would be syntactically valid, but a no-op.\n. Keeping this issue open, for consideration of whether or not to provide a specific `{{include}}` tag...\n(Thanks for the feedback on this...)\n. Yes, there is a similar issue (#138) around `{{else expression}}` versus `{{elseif expression}}` which I am also mulling over...  \n. There is now (commit 22) support for direct inclusion as follows  `{{for tmpl=\"#headerTemplate\"/}}`.\n\nSee sample http://borismoore.github.com/jsrender/demos/step-by-step/06_template-composition.html for usage.\n. Yes, I understand, but I think there are pros and cons to the 'duplicate' tag. So let me give a fairly detailed take on this...\n\nI think there are two aspects. \n\nFirst, the behavior of the `{{for somedata ...}}`: \n`{{for #data tmpl=xxx/}}` does already semantically correspond to inclusion, but it is unintuive syntactically for the scenario. `\n{{for tmpl=xxx/}}` already existed but it did not inherit the data context, which was unintuitive, so that is what I have changed. Now if you don't specify data, you are inheriting the data context. I think that is more intuitive than the previous semantics.\n\nSo now we have `{{for ...}}` meaning: for chosen data and/or template... You can independently choose the data and the template. Data defaults to the current data. template defaults to the content. I think that seems reasonable.\n\nAnd what that means is that semantically, if you choose a template and don't change the data, you are doing template inclusion.\n\nSo if you agree so far, then that leaves the second question:\nShould we provide a second way to do  template inclusion, and make `{{include tmpl=xxx/}}` a synonym for `{{for tmpl=xxx/}}`? \n\nI have some hesitation about the redundancy. We can always add the 'include' tag, but once we have added it we can't remove it. :). So for now, I'm inclined to wait. The fact that some other template languages have an `{{include}}` is an argument, but I am not yet convinced. JsRender tries to be very economical in the number of concepts and constructs. \n\nFor example we could change `{{else}}` to `{{elseif}}` but that would prevent us from providing a generic support for any tag (custom or otherwise) of an `{{else}}` tag. For example we can support:\n\n```\n{{for ...}}\n    item template\n{{else}}\n    no items template\n{{/for}}\n```\n\nwhich also exists in some other languages. \n\nFor custom tags we can allow:\n\n```\n{{myAccordion label=\"a\"}}\n    First section\n{{else label=\"b\"}}\n    Second section\n{{else label=\"c\"}}\n    Third section\n{{/myAccordion}}\n```\n\nSo my preference is to let a small number of tags support a powerful set of scenarios. Does that make sense?\n. Update: With commit 27 there is now an `{{include tmpl=.../}}` tag, for simple template composition, without navigation through data, or iteration over arrays. \n. The thread above caused slight confusion to some :). So to give a bit of context to the outcome: I mulled over the pros and cons, and reached the conclusion that adding the {{include}} tag does help initial discoverability of how to do simple composition - and reduces possible confusion as to how composition, navigation and iteration interrelate. (Though at the cost of an additional tag). Hence the final design...\n. Thanks for letting me know. The issue is `(['\"]).*\\8)` - which looks back to capture #8, which does not exist. (It used to be #8, and should have been changed to #7 since there are less captures now.). But it is all a non-issue for JsRender, since that captured back reference was no longer needed in the code at all, (which is why the error didn't cause a bug) and that whole captured group has been removed from the regex on the current version which will be uploaded soon.  I'll close this issue when the new version is uploaded...\n. This has been fixed in commit 22.\n. Thanks for raising this, and yes, I hear you. Looking at providing access to props and args. (BTW Issues here, rather than my blog, is probably better for discussion. Sometimes I won't reply rapidly to issues, but I always get back to them if they are still open...)\n. This is now enabled in commit 22. \n\nFor example, `this.tagCtx.props.foo`, or `this.tagCtx.args[2]`\n\nSee sample http://borismoore.github.com/jsrender/demos/step-by-step/03_converters-and-encoding.html. \n. Thanks!\n. Thanks for your careful analysis! First, you are correct that the comment in the code is not accurate. That was the original behavior, but now the correct way to get the compiled template is \n\n``` javascript\n$.templates( \"personTmpl\", \"#personTmpl\" );\n\nvar thisIsTheTemplate = $.templates.personTmpl;\n```\n\nThe call to `$.templates(somestring)` is equivalent to `$.templates(null, somestring)` and will treat somestring as markup and return a compiled template (not registered by name). \n\n(The out-of-date comment is not in the upcoming update, to be committed fairly soon.)\n\nFor your scenario, with the current design, won't the following work for you?\n\n``` javascript\n<!--====== Template ======-->\n<script id=\"personTmpl\" type=\"text/x-jsrender\">\n    <tr>\n        <td>{{for #data tmpl='mytmpl'/}}</td>\n        <td><input value=\"{{:firstName}}\" /></td>\n    </tr>\n\n====== Script ======\n\n\nvar people = [\n    {\n        firstName: \"Jeff\"\n    },\n    {\n        firstName: \"Rebecca\"\n    }\n];\n\n// Register initial template\n$.templates( \"personTmpl\", \"#personTmpl\" );\n\nvar thisIsTheTemplate = $.templates.personTmpl;\n\n// get external template and compile it.\n$.templates( \"mytmpl\", \" my external template: Name: {{:firstName}}\");\n\nvar thisIsTheExternalTemplate = $.templates.mytmpl;\n\n// Render with external template referenced from initial template\n$( \"#details\" ).html(\n    $.render.personTmpl( people )\n);\n\n\n```\n\nIf not, can you clarify what the problem is?\n\nThanks...   \n. Sounds good. BTW, about the 'messy examples online' - are you referring to my demo samples, here on GitHub? If so, I'd love to know which ones you were seeing as being messy... Maybe some of them can be brought up-to-date, using current APIs that may not have been available. when they were first written...\n. I am deliberately postponing any 'build' and 'packaging' decisions to after beta. \n\nThere is certainly a case for your suggestion, (the idea would be jsrender.js and jquery.render.js).\n\nAlso, for jsviews, to provide jquery.views.js as a single file that includes jquery.render.js and jquery.observable.js. (And ultimately a jsviews.js that does not depend on jquery). \n\nAlso of course, minified versions of files. \n\nSo for V1, this implies making multiple flavors (build targets) available... \n\nKeeping this open to track all that...  \n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. Yes, I agree. Very nice. Thanks Sebastien. I like your style of showing the code in a way that is self-explanatory, without a lot of text. I appreciate your making this effort towards providing documentation. \n\nThere are a couple of questions around the final plan for docs. Currently the gh-pages branch is a direct link to demo samples, not documentation. My plan is to replace that with a full site, (which will be at www.jsviews.com) that includes docs, samples, tutorials etc. and a link to a forum as well. I plan to use JsViews and JsRender to build that site (of course). And my hope is to start working to build the site some time after the beta is released, which should be end of October. So a direct merge of your docs doesn't make sense, since the structure will be quite different. (Currently the gh-pages and main branch are deliberately identical).\n\nSo I will follow any additions you make with interest (and appreciation), and treat your work as a kind of test run for future documentation, which may influence the final design and content. Does that work for you? I don't want to make any false promises about to what degree your work will remain as the final documentation. But I will try to reach a situation where contributions can be made to the final documentation. There have been a few people who have expressed interest in contributing both to design and content. Hopefully we can create a situation where some of those people can engage collaboratively. \n\nWhat do you think?\n. Great, thanks Sebastien...\n. Thanks for pointing this out. A modified fix is included in commit 22. Please reopen if the fix does not work for you. Thanks.\n. You can use `{{:#get(\"array\").data.length}}`. \n\nThe advantage of this approach which is method-based, rather than relying on adding a `#count` or `#length` property, is that it avoids setting a property on every 'item view' which is going to need to be updated whenever an item is added or removed from the array. In JsViews this would be a significant perf hit. Also, if you are in a child view (e.g. in an {{if}} block) under an item view, you still want to be able to access the same `count` property. So we would have to maintain the extra property on nested views, too, or address the problem that you can't get the count inside a nested context. But the `{{:#get(\"array\").data.length}}` works fine in both item views and nested if blocks etc. (And similarly for index: `{{:#getIndex()}}` will work inside `{{if}}` blocks) . See also #131.\n\nDoes this address your scenario?\n. Closing, since if we have support for this it will be #count(). See #131\n. @itechnology: \n\nNot sure what you meant by _Forget the count ? :)_ - there is an issue tracking that #131, triaged as a candidate feature for after V1. As you can see below, there are a few ways to address it with current syntax: \n\nGiven this for jquery.tmpl: \n\n```\n\n    {{each users}}\n        {{if users.length > 1 && ($index === 2 || $index === users.length-1)}}\n            some text\n        {{/if}}\n    {{/each}}\n\n```\n\nyou can do this in JsRender:\n\n```\n\n    {{for users ~len=users.length}}\n        {{if ~len > 1 && (#index === 2 || #index === ~len-1)}}\n            some text\n        {{/if}}\n    {{/for}}\n\n```\n\nand here are some alternatives which will will also work:\n\n```\n\n    {{for users}}\n        {{if ~root.users.length > 1 && (#index === 2 || #index === ~root.users.length-1)}}\n            some text\n        {{/if}}\n    {{/for}}\n\n```\n\n```\n\n    {{for users}}\n        {{if #get(\"array\").data.length > 1 && (#index === 2 || #index === #get(\"array\").data.length-1)}}\n            some text\n        {{/if}}\n    {{/for}}\n\n```\n\n```\n\n    {{for users}}\n        {{if #get(\"array\").data.length > 1 && (#getIndex() === 2 || #getIndex() === #get(\"array\").data.length-1)}}\n            some text\n        {{/if}}\n    {{/for}}\n\n```\n\nYour version above is a more verbose form of the last one.\n. Thanks Jeremy - I'll look into ways to address this when I can, maybe after beta.\n. I'm certainly very interested in thoughts, concerns, suggestions, on this. But right now I have to stay heads down on shipping beta, so I don't think I am going to be unable to get to this very rapidly... \n\nBTW I am making lots of progress on beta, but it is not visible since I still have to get my current pre beta bits to Github. There are a number of breaking changes on advanced scenarios, plus new features, so I'm planning a single initial update for this. After that I have one or two incomplete features to fix, and some final stabilization, before confirming the beta... \n\nAnd after that... certainly I will try to look at this issue... Meantime, as I say, I will be attentive to any preliminary  thoughts and suggestions...\n. Yes, absolutely. Getting to that stable (and well-designed) beta is very important...\n. Planned for V1 or V1.1\n. See also #30\n. @jeremychone: Thanks Jeremy. Yes, that sounds like a great idea. When I get to working on this I'll hook up with you, if I may, to discuss in more detail...\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. You should be able to create a helper function `function getTemplate(...) { ... return theTemplate; }` which may or may not take parameters. \n\nYou can then register it\n- globally (`$.views.helpers( \"getTmpl\", getTemplate )`)\n- or as a resource on your outer template (by including it in that template's helpers, when you register that template)\n- or pass it in with the render or link call (`render(data, { getTmpl: getTemplate });`) \n\nand then you can write `{{for Responses tmpl=~getTmpl(...)/}}`.\n. Closing, since the request is covered as suggested above.\n. Yes, that's right. It's a common issue that comes up...\n. Yes... So specifically, if you have a data property name that is a reserved word, and you are accessing it in a template, such as `{{:myobject.class}}` you should either rename it or change the template to  `{{:myobject[\"class\"]}}`. If you have just the leaf name, (so myobject is the current data item, and you have `{{:class}}`) then you can change it to `{{:#data[\"class\"]}}`.\n. You should be able to go into IE8 (or IE9 or IE10 in compat mode or IE8 Browser mode...) using F12 debugging tools, and see where the exception is getting thrown, and what the error message is. If it is due to a key word, you can also see from syntax highlighting which are the tokens that IE8 considers as key words. (\n. If you drop that compiled script into a js editor you will see that there is a problem with data.if.\n\nAre you using the syntax {{else if ...}}?\n\nThat is not the correct syntax. It is {{else ...}} (See the demo examples for if else...)\n\nWhat is your actuall template markup?\n. Closing since the issue is resolved.\n. Can you provide a simple repro sample - ideally on jsfiddle? Difficult to say otherwise what the issue is...\n. Closing, since I don't have repro, and likely not a JsRender issue.\n. OK great. Thanks for getting back on this...\n. The first thing to do is check that everything is well-formed. Looks like `` is inside a td, and that your are also missing `` at the end of your template\n. Ok, I thought it was still not well-formed, but you have if else around the opening div, then a big table, section, and then the closing div. Can you try to remove sections of the template until you have a simple repro that I can look at. The smaller the repro the better, to narrow down what is the actual issuel\n. `{{:Title}`\n\nAnother kind of ill-formed markup. Always triple-check and gradually remove the good part until you see the bad part! Usually you can find it on your own...\n. Yes, fair enough. Adding this to upcoming bits:\n\n```\nif (!$.views) {\n    // JsRender is not loaded.\n    throw \"requires JsRender\"; // JsRender must be loaded before JsViews\n}\n```\n. Small, but hey :)\n. This is a JsViews bug, not a JsRender bug, Fix coming in JsViews update 22.\n. Done, in update 22.\n. Yes, thanks, you are right. This is a bug. I'll try to fix it once I have completed the major update which I am working on right now. (It is taking a long time because of some very difficult conflicting browser-specific issues which are forcing me to use a 'dual implementation' for data-binding - based on content model detection.)\n. This should be fixed in commit 23. Can you test that it works for you, and if so, close this issue? Thanks.\n. JsRender follows a 'logicless' (or rather, codeless) approach, which does not allow you to access global javascript functions, vars or objects from template markup expressions. (Unless you set allowCode to be true, but it is better from a security and code encapsulation point of view not to use that approach).\n\nYou need to provide access to your formInputTemplate function either as a helper function, as in this example: http://borismoore.github.com/jsrender/demos/step-by-step/09_helper-functions.html,  or by passing it in as a template parameter, as in this example. http://borismoore.github.com/jsrender/demos/step-by-step/12_passing-in-context.html. \n. Closing, since information provided above...\n. Yes, you have the choice. See \"Using {{: }} or {{> }} to render data values with optional conversion or HTML encoding\" - http://borismoore.github.com/jsrender/demos/step-by-step/03_converters-and-encoding.html. \n. It's always best to look carefully through all the demos and samples (on JsRender and/or JsViews - depending on what you are using), before posting an issue. You can also look through existing issues, or on Stack OverFlow, to see  and check whether the question is already answered. Issues is for bugs, feature requests, suggestions. Only as a last resort for simple HowTo questions... But if all else fails :)...\n. Yes, I agree, and have always planned to create a group, or equivalent, once we hit beta. Can we wait until then? At that point I want to make documentation and discoverability of APIs really easy, since there will be no more breaking changes expected... I know it is difficult for early adopters, though...\n. Unfortunately, if you are using JsViews (link method) and you have  `...`  and you use data-link attributes or {^{...}} tags on or within that content, then behavior can be unpredictable, since browsers may or may not dynamically insert a body tag. So the nesting depth of elements and the results of stepping through will be different at the time of linking than it was at the time of rendering.\n\nIf you are using the render method - not doing data-linking, you will not get the error message. But if you are linking, you will - and this validation does need to be done by JsViews, not just by the browser... \n. That said, I will consider changing the code for the next update, so that by setting `$.views.settings.noValidate = true;` you can opt out of this validation. But in that case, depending on how you use data-linking within the invalid content, you may or not get other bugs occuring. \n. @larjohn: I have included this in the latest update. By setting $.views.settings.noValidate = true; you can opt out of the  validation.\n. Yes this is mentioned in the commit notes: \n\n> View now has a type property, e.g. type=\"item\"\n> Only \"item\" views have index properties, but to get the index from a nested\n> view use `view.get(\"item\").index`.\n\nI updated your jsfiddle:\nhttp://jsfiddle.net/a8WDG/4/\n\nYou can write `{{:#get('item').index}}` from a nested template at any depth...\n\nYou can pass in the `type` of ancestor view you want: `view.get(type)` - allowed values: `\"item\" | \"array\" | \"data\" | \"root\" | \"top\"`\nDefault is `\"root\"` (The top level view with data, under the \"top\" view). \n\nHence `view.get(\"item\").index` to get the index, `view.get(\"array\").data` to get the array data, `view.get(\"root\").data` to get the root data, etc... \n. The issue is that previously #index was getting updated on the \"item\" view when you used JsViews and inserted or removed an item from an observable collection. But the view.index property on child views, such as a nested if block was not getting updated. (And to do so would have been expensive in perf and code complexity). Hence the current design of not having a #index (which is short for view.index) on the non-item views such as the if block.\n\nBut the alternative of a 'getter' to get the index on the ancestor \"item\" view resolves that problem.\n\nCurrently the getter is view.get(type), which addresses this and a few other scenarios.\n\nNow we could also add a specialized view.index() just for getting the view index, which would be equivalent to view.get(\"index\").index. That would already help with making the template markup cleaner, right? But I wanted to let the get() API \"settle\" first, before deciding whether to add index()...\n\nDoes that make sense. I'm open to adding it sooner... not sure whether we need to yet...\n. Yes, the best we could do for a shortcut would be `#index()` - which is the declarative form of the `view.index()` shortcut I suggest above... \n\n`#index` (without parens) is not possible\n. In commit 23 there is now a #getIndex() function which you can use when in a nested block, to get to the item index. It is actually a computed observable, so it will update if the index of the item changes (as a result of adding or removing sibling items). It is better to use #index when you are not in a nested template  (e.g. {{if}} or {{for}}) since that will be better for perf...\nProgrammatically you can also do view.getIndex()\n. @mehtatejas: Sorry I never replied to this.\n\nBasically you just have to ensure that the closing script tag that you inject is not treated as closing script tag for the script block where you declare the template, or (2nd approach below) your own javascript script block.\n\nA couple of ways would be:\n\nYour approach, but reduced:\n\n```\n\n  <script>\n      alert('1');\n  {{:\"<\"}}/script>\n\n```\n\n`var html = $.templates(\"#window_tmpl\").render(...);`\n\nor don't declare your template in script block, but as a string:\n\n `var html = $.templates(\"alert('2');<\" + \"/script>\").render(...)`\n. The span element is not an empty element, and the self-closing syntax is not valid. Similarly for `<div>` `<td>` etc. If you change `<span style='display:none' class='left o-icon o-icon-note'/>` to `<span style='display:none' class='left o-icon o-icon-note'></span>` it should work correctly. The issue is with the DOM parser in the browser, - which treats your markup as an opening tag, that's all. If it was XHTML that would be different. The previous implementation of JsRender/JsViews was managing to do databinding in spite of the error, but the new one requires the valid markup. \n\n`\n. JsViews does not allow you to create structures where you put block tags around HTML content either within an element tag (as in `<div {{if ...}}...{{/if}} ...>` or in a way that is not well-formed from JsViews point of view, when the template tag hierarchy (tree) and the element hierarchy don't coincide. For example `{{if ...)<div>{{else}}<div ...>}} ...</div>` . Note that in this case the template is not well-formed considered as HTML point of view, since there are two div open tags... \n\nGenerally you can achieve most scenarios without needing the above, by using element-based linking e.g. `<div data-link=\"title{:testExpr ? expr1 : expr2}\" ...>` which will set the title attribute to different values based on the value of the test experession. BTW This is a JsViews issue, not a JsRender issue. The above templates are fine in JsRender if you are not doing data-linking with JsViews on the same template...\n. Thanks - nice catch. JsRender is not correctly doing the automatic caching of compiled templates when declared as script blocks. So your template is being compiled every time. \n\nFix coming soon, but meantime you can compile explicitly, (which is always a good practice) - following one of these patterns:\n\n``` javascript\n       $(function () {\n           $.templates(\"formTemplate\", \"#formTmpl\");\n           ... \n               $(\"#target\").html($.render.formTemplate(data));\n               // or $(\"#target\").html($.templates.formTemplate.render(data));\n            ...\n      });\n```\n\nor\n\n``` javascript\n       $(function () {\n           var tmpl = $.templates(\"#formTmpl\");\n           ... \n              $(\"#target\").html(tmpl.render(data));\n            ...\n      });\n```\n\nCan you verify whether this does fix the memory issue?\n. Going back to blowsie's original question, \"How do I go about pre-compiling nested templates?\" there are several examples of different ways of naming/compiling/accessing templates here http://borismoore.github.com/jsrender/demos/variants/variants.html, including as nested templates.\n\nThe latest version of JsRender has an additional feature that allows you to compile a template as a resource 'owned' by another template `$.templates(..., parentTemplate). See many permutations of this (and other template resources) in this test page http://borismoore.github.com/jsrender/test/test-pages/nested-template-resources.html.\n. This has been fixed in commit 24. Can you verify whether this corrects the memory leak you were seeing? Thanks!\n. Closing. Please reopen if you still see the issue... Thanks...\n. With the changes, compiled templates accessed as selectors pointing to script elements don't need to be cached by your helper, since they are now correctly cached along with the script element. Your helper is also caching templates which you pass as a string. That part is not done by JsRender, so depends whether that is a scenario for you. The 'best practice' for JsRender with compiling from strings is either to compile by name, or to hold on to the compiled template objects, and call the render method on that. \n\nDidn't realize the 'creator' of an issue couldn't reopen it! But in response to a request to reopen, I will do so :),\n. In my view that is not possible. Whitespace is significant in templates. (See #178 for a related discussion). Tabs, newlines, space characters, can all be used as significant white space, such as a space-separated list of text nodes, or of spans, etc. One could consider doing `markup.replace(/\\s+/g, ' ')` - but that would mean JsRender is assuming HTML semantics for the output, and even if the output is being used as HTML markup inserted into a DOM, this will clearly be incorrect within TEXTAREAs, PREs, and often in string literals, attribute values etc. \n\nCurrent implementation of JsViews does actually strip whitespace in the case of element-only content. For example if you have `hello <table> <tbody> <tr> <td> <span> foo` it will get inserted into the DOM as `hello <table><tbody><tr><td> <span> foo`. So it is smart about not removing whitespace inside the `<td>` or outside the `<table>`. But JsRender on its own is 'pure string-based concatenation' and has no knowledge of context or content-model, or what the rendered output will be used for. \n. Leaving this as a request, since we could consider (partial) removal of whitespace as an optional (opt in) switch in the templates() method or on a template compiler utility tool.\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. The php/html-comments issues should be resolved now, with commit 25. Can you confirm that it is fixed for you?\n. Closing since I believe this is covered by commit 25. Let me know if that is not the case... \n. You mean jQuery UI 1.9, right? I'm not sure what the issue is you are having. At any rate JsRender has to be faithful in rendered significant white space. It is legitimate to have a template with leading or trailing which space, such as `\"{{:name}} \"`, which as a template rendered against an array will produce a white-space separated list of names. Also, JsRender has no jQuery dependency, so $.trim cannot be used.\n\nPerhaps you can provide some details as to how you are using JsRender along with jQuery UI that requires templates to be automatically trimmed by JsRender? You can trim your own template markup, before passing it to JsRender to create a compiled template....\n\nOn the extra comma, yes that's correct - good catch...\n. Ah OK. Well the normal usage is to insert the rendered HTML into the DOM using `$(\"#container\").html(( '#loaderTmpl' ).render({}));` or equivalent. If you need to create DOM elements with the rendered content, without inserting them into the DOM, then you can either \n- eliminate unwanted space characters by writing `<script ...><div class=\"loading\">...</div>`  without any whitespace, (possible issue with older versions of IE though)\n- or you can compile the template from the trimmed string you get from the innerHTML of the script element,\n- or you can trim the rendered output before passing it to the jQuery constructor\n- or you can compile your template directly from a string.\n\nAt any rate, you own the whitespace of the template. JsRender cannot strip the whitespace since it does not know whether that whitespace was intended or not. In many scenarios there is deliberate required leading or trailing whitespace.\n. OK. Closing this issue, then...\n. Yes, thanks. That is a bug, and it is fixed in the next update coming soon.\n. Well it is the partcular case of creating a variable ~foo=xxx and the xxx evaluating to 0 or \"\" (falsey value) and then being accessed in a nested context - where it shows as undefined rather than 0. Not that common/basic I would say, but anyway a fix will be coming soon. In the particular case above a workaround would be to use a 1-based 'index' variable in the data, (or just on the variable such as by writing `~itemNumber = #index + 1`). \n. Good. Yes, other values should be fine. \n\nI'm trying to wrap up some fairly difficult changes that are to do with the new tag control features, and as soon as I can get that completed I'll commit the changes. The fix for this bug is already in my code, so it will come along with those changes as soon as I can get them out...\n. Well given the time my major update is taking, I have pulled out the fix for this issue, and committed it - so this is fixed in commit 24b. (Didn't want to keep folks waiting any longer! :))\n. Closing - fixed in 24b\n. If you include a path `a.b` (such as `details.key` above) in  an expression in a template, then this corresponds to javascript accessing the property `key` of the object `details` (actually `#data.details` where `#data` is the current data item). So of course if `details` is missing from your data, that will raise a javascript error, since you are trying to access the property `key` of an undefined object (`details`).\n\nSo it is not a bug. \n\nIf you want your `details` on your data to be optional, and still want to access `details.key` in the template, then you have two options:\n\na) include a null check:\n\n``` html\n{{>details&&details.key || \"no key\"}}\n```\n\nb) if you want this to render by default as the empty string, and not to create an error message, then there is now support for that. You can add `noerror=true` to the tag where that path occurs to suppress the error message. But this will not allow you to default to \"no key\". In your example you should write:  \n\n``` html\n{{>details.key noerror=true}}\n```\n\nSee http://borismoore.github.com/jsviews/demos/features/observability/observing-paths.html for an example of this approach.\n. Sure, not a problem. Yes I understand, concerning the 'powers that be'. My current expectation for both JsRender and JsViews is Beta in February, release candidate end of March, V1.0 release in May...  \n. Update:  Beta in April. Still hoping to release V1.0 by end of May.\n. Thanks for you understanding! Yes it has indeed got pushed out. Unfortunately my time available to take this forward has been radically reduced, and this has inevitably slowed things down. I am working on getting some real time during the month of October. Currently I have a lot of new updates for JsViews (two-way binding on custom tag controls, integration with jQuery UI widgets, validation...) which are nearly complete, but not yet committed to the public repo. They'll be coming soon, followed by work on documentation for JsViews and JsObservable. \n\nThe current code of JsRender will not move from beta to V1 until after I have got the JsViews updates (referred to above) into JsViews repo, and the docs for JsViews complete, so I can call it official beta, too. There is a lot to document so that will take a good part of October, and then I will start working on moving to official V1.0 for both JsRender and JsViews. I prefer not to commit to a specific date for that, given uncertainties around how much time I will be able to have available for this after the end of October. \n\nBut I can say with certainty that we will get there. I believe strongly in this project!\n. jQuery templates will of course continue to work as they have up to now. So you can continue to use them until moving to JsRender - that should not be a problem. \n\nJsRender is already very stable and robust. So you can also decide to move to JsRender now. I don't expect significant breaking changes in moving to V1.0. JsViews is also robust, and should not have breaking changes for simple scenarios. But there may be some breaking changes in some advanced JsViews scenarios.\n\nSo if you are only using JsRender, you can port to JsRender from jQuery templates as soon as you want. Same thing for basic JsViews scenarios. But if you expect to use advanced JsViews features you might choose to stay with jQuery templates a bit longer, and move to JsViews and JsRender after the official beta of JsViews. If you prefer the 'guarantee' of a V1.0 product, you can of course stay with jQuery templates until JsRender/JsViews hit V1.0.\n\nHandlebars will not replace JsViews - only JsRender, and JsRender is definitely a superset of Handlebars, so I would encourage you to target JsRender if that is all you need.\n. Getting very close to V1.0 now. The last commit was a release candidate: https://github.com/BorisMoore/jsrender/commit/7facd628ff2b858c38e453edcd9613ff1d0246cc\n. Closing, but putting under #251 - for notification of release\n. If we supported that it would be making the template markup very procedural and stateful. Of course you can have a helper `peopleStillStanding()` which returns an array of people up to and including your lastMan. And then do `{{for ~peopleStanding()}}`\n\nI'm not a big fan of setVar and getVar, for the same reason. I prefer to keep stateful and procedural aspects in code, and out of the template, which is \"codeless\" as far as any code that can have side effects is concerned.\n. Closing, for reasons given above...\n. You don't have to use parent. See the second example hereL http://borismoore.github.com/jsrender/demos/step-by-step/11_accessing-parent-data.html. You can set ~dataObject=#data and then access in nested context as ({:~dataObject.myvalue}}\n\nAlso in the latest commit you now have `~root` which is available from any nested context to reach the top-level data.\n. Best to look through all the samples and demos; many of your questions will be answered...\n\nhttp://borismoore.github.com/jsrender/demos/scenarios/03_iterating-through-fields-scenario.html\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/scenarios/03_iterating-through-fields-scenario.html\n. I changed the title, to make it clearer for others. I assume the examples above do address your second question (looping through properties on an object). If not, let me know. Meantime, closing this issue.\n. Serious work on improved error handling and debug options will be certainly after beta, and more likely after V1. But this issue is good for tracking that too. At the same time I try to improve iteratively as I go, so specific examples (e.g. jsfiddle) of difficult application bugs to track can be helpful. For example, on `view._hlp(...) is not a function.` was that just that you had put parens on a helper ~foo() that was not a function?\n\nDoing `tmplOptions.debug ? tmplOptions.debug : \"\"` (or `tmplOptions.debug || \"\"`) would mean that a) putting it to true would fail, with a javascript error, and b) it becomes a generic `tmplOptions.codeBefore` with nothing to tie it to the debugger scenario, and no hint or automatic fallback to get the \"debugger;\" statement. Logically one would also expect a matching  `tmplOptions.codeAfter` - as a kind of closure. So I think it all needs a bit more design study, but it is a valid direction to consider.\n\nAnd yes, what the TODOs are around include somthing along the lines of those generic hooks, but also the ability to have a JsRender tag (or JsViews tag control) provide a specific error handling callback that it owns, so errors can be scoped to the tag instance. \n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. `#parent.parent.data` will take you to the data of the parent view (since you are in a nested view, with the if block). If you don't know the depth of parents, you can do `#get('item').data`. See also the second example here http://borismoore.github.com/jsrender/demos/step-by-step/11_accessing-parent-data.html. for another approach.\n. If you are using JsRender and not using JsViews, then the render() method just produces an html string. After that you are using regular jQuery or DOM APIs to insert that HTML into the DOM and then attach event handlers etc. - and the usual rules apply, independently of JsRender. See the examples and demos for inserting the html into the DOM using the jQuery html() method. Of course you must do the event binding after you have inserted the html into the DOM. \n. This is a JsViews issue, not a JsRender issue. I'll try to clone it over to JsViews, so I can track it. Did you look at related issues and samples in JsViews? Or perhaps you could create an issue there and close this one...? \n. @tomo666 \nReopening here, just to check with you on this.\nI think you want something like the following:\n\n``` html\n\n    {{for language_list}}\n        {{>name}}\n    {{/for}}\n\n\n```\n\n``` javascript\nvar myData = [\n    {\n        selected: \"1\",\n        nick_name: \"test user1\",\n        language_id: \"0\",\n        language_list: [\n            { val: \"0\", name: \"EN-US\" },\n            { val: \"1\", name: \"JAPANESE\" }\n        ]\n    },\n];\n```\n\nDoing `` didn't make sense to me, and nor did data-link=\"value{>val}\" - which would imply you want to change the value associated with an option, later on. I think that once an option is rendered you don't want then  to change the value dynamically since that will get out of sync with the data-bound value (select) on the select element.\n\nDoes the above cover your scenario, and work for you?\n. I think this is covered by discussions we had... http://borismoore.github.io/jsviews/demos/features/observability/observing-paths.html\nClosing for that reason. Let me know if I am mistaken...\n. The new {{include}} tag is intended for simple template composition. But you can write a custom tag and use it as a block tag `{{myTag ...}}inline content{{/myTag}}` with inline content. Then you can make the tag render the inline content, wrapped in some way. \n\n``` html\n\n    {{myTag}}inline content{{/myTag}}\n\n```\n\nI have actually made a small fix to the implementation, in commit 28, to make this easier to do when the custom tag declares its own template. The declared tag template now takes precedence over inline (block) content, but can access the inline content using {{include tmpl=#content/}}, or programmatically as tagCtx.content.\n\nSee the new sample content showing alternative approaches to custom tags wrapping their inline content here:\nhttp://borismoore.github.com/jsrender/demos/step-by-step/08_custom-tags.html.\n\nSee also JsViews sample: http://borismoore.github.com/jsviews/demos/tag-controls/tabs-control.html\n\nDoes this address what you are looking for?\n. If you want to pass a string that includes `}}` you can either break up that character sequence as in:\n`format=\"{{>firstName}\" + \"} {{>lastName}\" + \"}\"`,\nor use character entity encoding as in\n`format=\"{{>firstName}} {{>lastName}}\"`\n. Yes, it is much better than using strings. Also using eval on the data string is not great :).\nWe'll close this issue, right?\n. Hi Sebastien. \n\nGood question, but yes there is, though really it is the same API, except for some convenience shortcuts that leverage jQuery. I'll try to include the following info in the documentation which I plan to start creating moving forward...\n\nIf you have jQuery then `$` is an alias for the top-level jQuery namespace object `jQuery`.\n\nRather than creating another top-level global, JsRender adds to `$` the `$.views` member which becomes the JsRender/JsViews namespace. Otherwise it instead create a toplevel `jsviews` namespace for itself.\n\nSo with jQuery, JsRender and JsViews methods and objects are then `$.views.foo`. However for convenience, some shortcuts are provided: `$.render`, `$.templates`, and - with JsViews - `$.link`, and `$.view` are also added to `$`.\n\nIn addition, two 'instance' methods are added which leverage jQuery semantics: `$.fn.render` and with JsViews, `$.fn.view`.\n\nSee this code:\n\n``` javascript\nif (jQuery) {\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // jQuery is loaded, so make $ the jQuery object\n    $ = jQuery;\n    $.render = $render;\n    $.views = $views;\n    $.templates = $templates = $views.templates;\n    $.fn.render = renderContent;\n\n} else {\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // jQuery is not loaded.\n\n    $ = global.jsviews = $views;\n    ...\n}\n```\n\nIf you want your code to be identical in both scenarios, just set `var $views = jQuery ? jQuery.views : jsviews;`\n\nThen use `$views.render..,` for example rather than `$.render...` \nAvoid the special jQuery shortcuts and use the above style, and everything will work the same whether jQuery is present or not. \n. Yes, interesting. What do you think would be right design, bearing in mind that we still want $(selector).render(data) to work if you have jQuery running? And I don't want to add a billion methods to jQuery, for advanced things, like $.converters(...). I instead put them under the 'namespaced' $,views.converters().\n\nNow we could add the jsviews global anyway as you mentions, so jsviews.render(data), for example, will always work. But $.render() is nicer. So we need to document $.render() too. And with JsViews I want $.link, not jsviews.link, since it supports passing in a selector, etc. and in fact JsViews does require jQuery (at the moment at least).\n\nIn my view, we do indeed simply have to document it. So I will treat jQuery users as the primary users, (indeed the only users when it comes to JsViews and observable), and document for them, and provide the additional info that if you only use JsRender, without jQuery, just write jsviews in place of $.views... That was my plan at least... \n. Well I don't want to take over $, or to risk colliding with members of $ for some other library which is already using it. \n\nBut here is a thought:\n\nI could change jsrender.js as follows:\n\n``` javascript\n    if (jQuery) {\n        ////////////////////////////////////////////////////////////////////////////////////////////////\n        // jQuery is loaded, so make $ the jQuery object\n        $ = jQuery;\n        $.fn.render = renderContent;\n\n    } else {\n        ////////////////////////////////////////////////////////////////////////////////////////////////\n        // jQuery is not loaded.\n\n        $ = global.jsviews = {};\n\n        $.isArray = Array && Array.isArray || function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n    }\n\n    $.render = $render;\n    $.views = $views;\n    $.templates = $templates = $views.templates;\n```\n\nAnd then I could write documentation based on the following:\n\nIf you are using jQuery, then I will assume in documentation that you have mapped jQuery to $ (either as a global, or through a closure `(function($) { ... })(jQuery); ...)`. \n\nIf you are not using jQuery, I will assume you have done the same thing to map jsviews: (either set `document.$ = jsviews`, or `(function($) { ... })(jsviews);` ...)\n\nNow any sample will work in either scenario, as long as you don't use `$.fn`, or other jQuery methods like .html().\n\nI would change this sample too:\n\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/20_without-jquery.html\n\nas follows:\n\n```\n(function($) {\n    $.views.tags({\n\n        sort: function( array ){\n            ...\n        }\n\n    });\n    ...\n\n    $.templates({\n        ...\n    });\n\n    document.getElementById( \"movieList\" ).innerHTML =\n        \"TitleOriginal orderReverse order\" + jsviews.render.movieTemplate( movies ) + \"\";\n})(jsviews);\n```\n\nThis means that even without jQuery I am now putting converters, settings, etc. etc. on `$.views`, aka `jsviews.views` rather than directly on `jsviews`. That is the one oddity that I see in this approach...\n. Yup. I'll mull it over. Breaking change on 30 which was already beta candidate... :(\n. This got closed automatically as a merge because I mentioned this issue in the commit notes. The fact is that though commit 31 does not merge this code, it does address this issue. See the notes on commit 31 for details. https://github.com/BorisMoore/jsrender/commit/7479f45a56294ecbbc26485edf029e9be91e171e \n. Notes copied over (with corrections) from the commit 31:\n\nThe JsRender API for with and without jQuery is identical except that\n- with jQuery: `window.jQuery` is the global namespace object for jQuery, typically mapped to `var $` and `window.jQuery.views` is the namespace for JsViews\n- without jQuery, `window.jsviews` is the global namespace object for `JsViews` which can optionally be mapped to `var $`.\n\nFollowing the above convention (and mappings to `$`), the API for both scenarios is identical. A single documentation and samples set will be provided  for both scenarios:\n\n`$.views` provides access to the full JsRender (and JsViews) APIs e.g. `$.views.converters`. But in addition, some important APIs (`$.templates` and `$.render`) are also made available directly from $...\n. Yes, you are correct. Thanks for calling this out.\n\nThe {{for tag no longer supports implicit concatenation of arrays across multiple arguments. I'll update the sample in the next commit. The fix is to provide a helper to concatenate arrays.\nAlso the parent change is shallower in the {{else}} since there is no intermediate \"array\" view:\n\n``` javascript\n    $.views.helpers({\n        combine: function( arr1, arr2 ) {\n            return arr1 && arr2 ? arr1.concat(arr2) : arr1 || arr2;\n        }\n    });\n```\n\n``` html\n{{for ~combine(phones, cells)}}\n    {{>#data}} ({{>#parent.parent.data.firstName}}'s)\n{{else}}\n    {{>#parent.data.firstName}} has no phones or cells\n{{/for}}\n```\n. Fixed in commit 34\n. It's not clear to me what you mean. If you are suggesting not having helpers ~a.b.c or ~foo() etc. then no, I would not want to force you to put everything on your data objects/view model.\n. Yes, there is a configuration API you can use to choose any delimiter characters you want:\n\n`$.views.settings.delimiters(\"@%\",\"%@\");`\n\nThere are examples of usage in the unit tests too...\n\nIt will work for JsRender and/or JsViews.\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. Are you using the latest version of JsRender? That line does not occur in recent versions.\n. Thanks Rob. That'sgreat. I'll look more closely and get back to you. (A couple of days probably...)\n. JsRender is now available natively as a Node module.\n\nSee https://www.npmjs.com/package/jsrender and https://github.com/BorisMoore/jsrender-node-starter\n. There is a new sample which shows one approach you could use: http://www.jsviews.com/#samples/jsr/tags/extend-for\nIt shows how to define a custom tag-control, {{for_range ...}}  derived from the standard {{for}} - which allows you to set start and end integers. \n. @coolbloke1324, @balexandre: There is a new version of the {{range}} tag that might interest you:  http://www.jsviews.com/#samples/tag-controls/range. \n. See also #195.\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. Closing as dup of #203\n. Do you have a table with tr's directly under the table tag? You need to have a tbody tag. See https://github.com/BorisMoore/jsviews/issues/157#issuecomment-15809010 and also http://stackoverflow.com/questions/15764115/possible-jsviews-bug-with-if/15776198#15776198.\n. Yes, the child template has ``s which are being inserted under . If you are using JsViews, then you should use a ``\n\n```\n\n{{for SomeObject tmpl='#ChildTemplate' /}}\n\n```\n\nSee the links above.\n. @Greg101: Thanks. (BTW issues that relate to JsViews should be on the JsViews Issues, rather than here).\n\nJsRender won't complain about the above, but JsViews will insert templated content into the DOM and bind to DOM element, so _requires that the resulting HTML be valid_. The validation built in is minimalistic right now - and would ideally ultimately be replaced by design-time tooling. See https://github.com/BorisMoore/jsviews/issues/54.\n\nYou are inserting an input under a table, which is or course invalid, and will likely fail during JsViews binding or element disposal.\n. See #201 for other links.\n. @smoloye: Is this a duplicate of #200?\n\nJsRender doesn't use the DOM. It renders a string. You presumably used jQuery to insert it into the DOM - and you can can use jQuery to access the resulting DOM elements. \nHere is an example which does just that: https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_passing-in-context.html#L111.\n\nJsViews on the other hand is all about integration between JsRender and the DOM - and binding dom elements and data, etc. There are many-many examples in the JsViews demos. https://github.com/BorisMoore/jsviews/tree/master/demos, http://borismoore.github.com/jsviews/demos/index.html.\n\nSee also on  http://www.jsviews.com, such as this topic: http://www.jsviews.com/#jsvplaying, or these samples: http://www.jsviews.com/#samples/editable.\n. Well for me to know if it is a JsRender issue, you would need to narrow it down and try to find a minimal test case that you can share which shows the exception happening. That line 859 just tells me it was thrown somewhere during rendering... As darkrain says, it could be that you are using a javascript reserved word as a data key. You can make sure to put quotes around your keys in that case as in {\"class\": ...} rather than {class: foo}. See also  #128 - if you are using a keyword in a path in your template....\n. There is a new sample which shows one approach you could use: http://www.jsviews.com/#samples/jsr/tags/extend-for\nIt shows how to define a custom tag-control, {{for_range ...}}  derived from the standard {{for}} - which allows you to set start and end integers. \n. You are saying the error is with a particular template? Can you narrow down what it is in the template that triggers the issue, and then post a stripped down template here? \n. Can you provide a copy of the callstack at the point when it throws?\n. It seems like the item object that you have in that line is not an object. It is probably a string. Can you put a break point there, and see what it is? It should be an compiled template object, with a string property item.markup. If it is a string, then you need to step through from your call and see how it becomes a string...\n. @ChrisHB: Let me know if you can determine what the type of the item is - and if a string - at what point it got assigned a string value?\n. @ChrisHB: Ah, but then your callstack was not correct, right? You are telling me you hit this during the call to $.views.helpers(...), not during the call to  $(\"#itemElement\").render(...). \n\nBut your attached images above show the callstack to render()...\n\nSo now I understand the problem. I'll have a fix posted soon.\n. @ChrisHB; OK - but better to check carefully the information, before I start investigating. :). Still, thanks very much for calling out the problem, since I am not testing Safari 6 on Mac at the moment, and would not have known about it...\n\nAs to using the helpers correctly, that is a strange way to do it, because you are registering a global helper and then changing it dynamically. In this case you only need the helper during that call, so better to do \n\n```\ntoSee = $(\"#itemElement\").render(toRender, { arrIndex: itemIndex });\n```\n\nThat will also prevent you from hitting this issue in Safari.\n\nSee http://www.jsviews.com/#helpers()\n. @ChrisHB : This has been fixed in Commit 40. Can you verify if it works for you? Thanks...!\n. Good. Closing.\n. @djangosdk:\n\nThis looks like a duplicate of #203. Is that what you are asking?\n\n(Always best to search existing issues first...)\n. There is often required leading or trailing white space. JsRender cannot remove it since it cannot know whether it was intended/required. See https://github.com/BorisMoore/jsrender/pull/180#issuecomment-11668829 \n. Well that question is really not to do with JsRender. You may need to convert from string to object/array, for whatever purpose, not necessarily for JsRender. \n\nLooks like you should read up about JSON - and in particular JSON.stringify() JSON.parse. \n\nYou can consider \n\n```\nvar myObjectOrArray = JSON.parse(myString)\n```\n\nor\n\n```\nvar myObjectOrArray;\neval(\"myObjectOrArray = \" + myString);\n```\n. @Pieeeeeee: Did you look at http://www.jsviews.com/#includetag?\n\nWith `{{include}}` you have access to the same data as the outer template. It's as if they were the same template. So you can just put `{{:Id}}`, for example. You can also define special parameters using `{{include ~myparam=... tmpl=.../}}` and access them as in `{{:~myparam}}`.\n. `{{include ~myparam=anyexpressionorpath tmpl=\"#FieldButtonsTemplate\" /}}`\n\ne.g. \n\n`{{include ~myparam=Username tmpl=\"#FieldButtonsTemplate\" /}}`\n\nI advise you to study all the topics and samples on www.jsviews.com documentation site, and learn about paths and expressions etc... \n\nAlso: \nthe [demos](https://github.com/BorisMoore/jsrender/tree/master/demos) folder of the GitHub JsRender repository - available [here](http://borismoore.github.io/jsrender/demos/index.html) as live samples.\nthe [demos](https://github.com/BorisMoore/jsviews/tree/master/demos) folder of the GitHub JsViews repository -  available [here](http://borismoore.github.io/jsrender/demos/index.html) as live samples.\n. Yes - see http://www.jsviews.com/#tmplrender: \n\"Passing an array to the .render() method.\n\u2014 The template is rendered once for each item in the array\"\n\nAlternatively use this approach:\nhttp://borismoore.github.io/jsrender/demos/scenarios/05_arrays-plus-headers-and-footers.html\n. @michael-lang: Thanks michael. In principal, yes, though of course I would need take a look before deciding - and right now my priority is getting the official beta out for JsViews. \n\nBut definitely after the beta, moving to V1, I had planned anyway to add Nuget packages for both JsRender and JsViews. \n\nSo if you want to already set up a package, as a pull request, that would be great. I would need to get up to speed on Nuget, to validate the pull request before going ahead with it, So I can't promise how soon or whether I will pull in the package, but hopefully it will make sense to do so, and I will....\n. Planned for V1.\n. Also, provide typescript definition: See https://www.nuget.org/packages/jsrender.TypeScript.DefinitelyTyped/0.1.8\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jsrender/index.d.ts\n\nhttps://github.com/BorisMoore/jsviews/issues/175\n\nAnd create a wepack loader to templates, like browserify tmplify. https://webpack.github.io/docs/loaders.html\n. JsViews and JsRender have both been released as v1.0.0 (https://www.jsviews.com/#download) - including TypeScript definitions [here](https://www.jsviews.com/#typescript).\n\nI will look into NuGet deployment. @michael-lang - we could collaborate on that if you are interested.... See also https://github.com/BorisMoore/jsrender/pull/232 (composer). They can be found via links on this page \"https://www.jsviews.com/#typescript\":\n\nhttps://www.jsviews.com/download/typescript/jsrender/index.d.ts\nhttps://www.jsviews.com/download/typescript/jsviews/index.d.ts\n\nDon't do `npm install @types/jsrender`. They are not yet published there, on DefinitelyTyped.. @Jogai: Like [it says](https://www.jsviews.com/#typescript): \"Both will be published to DefinitelyTyped\". I am working on that, and will publish when ready.\n\nIncluding in the main package is not recommended except for packages written in TypeScript. See https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html. You can set font-weight to bold in the same way as you did for the other two styles. But is this an issue with JsRender? If so can you clarify whether you are asking for a bug fix, or a feature which is no currently available? \n\n```\n    style3: {\n            class: \".minimal1\",\n            list:[\n            {proporties:\"background\", value:\"#000\"},\n            {proporties:\"color\", value:\"#fff\"},\n            {proporties:\"font-weight\", value:\"bold\"}\n            ]}\n```\n. @dimachen: I didn't hear back from you, so I will close the issue for now. \n. Do you get it with the samples etc.? Or just with your own page. In that case you would need to give more context. How are you declaring your template? How are you calling the render() method?\n. Hi - yes, `null` is a valid value and will be rendered as a {{for}} block - so you could do, for example: \n\n```\n{{for address}}\n    {{if #data===null}}\n        NULL\n    {{/if}}\n{{/for}}\n```\n\nBut if address is `undefined`, then the {{else}} block will render rather than the {{for}} block:\n\nSo the following:\n\n```\n\n    {{for items}}\n        \n            {{:#index}}:\n            {{for address}}\n                {{:#data}}\n                {{if #data===null}}\n                    NULL\n                {{/if}}\n            {{else}}\n                else\n            {{/for}}\n        \n    {{/for}}\n\n```\n\nwith this data:\n\n```\nitems: [\n    {address: 11}, \n    {address:null}, \n    {},\n    {address:false},\n     3\n]\n```\n\ngives this result:\n\n```\n\u2022 0: 11  \n\u2022 1:  NULL   \n\u2022 2: else  \n\u2022 3: false  \n\u2022 4: else \n```\n\nSee also this test page - \nhttps://github.com/BorisMoore/jsviews/blob/master/test/test-pages/for-else.html#L66\nhttp://borismoore.github.io/jsviews/test/test-pages/for-else.html\n\nNote that for your scenario you can also do:\n\n```\n{{for customer}}\n    {{if address}}\n        {{for address}}\n            address details\n        {{/for}}\n    {{else}}\n        no address\n    {{/if}}\n{{/for}}\n```\n. @jimmy-chung: - can you confirm that the above works for you, then we can close this issue... \n. Closing now, since no answer.\n. Yes, I plan to answer some time soon, but I have been swamped. About to commit some important updates and samples, this coming weekend. I won't get to this until after that...\n. It is supported. Here is an example: http://jsfiddle.net/BorisMoore/5XY6K/\n\nHere is the complete sample. I used `{{include}}` rather than `{{for}}` - but either will work. \n\n```\n\n\n  <p>\n    {{:description}}<br />\n    <small {{include tmpl=\"usage\"/}}>\n      hover for details\n    </small><br />\n    <span id=\"Key_{{:key}}\" style=\"display:none\">\n      {{:usage}}\n    </span>\n  </p>\n\n\n  onmouseover=\"$('#Key_{{:key}}').show();\" onmouseout=\"$('#Key_{{:key}}').hide();\"\n\n\n\n  $.templates({ \n    page: \"#pageTmpl\",\n    usage: \"#usageTmpl\"\n  });\n\n  $(\"#pageList\").html($.templates.page.render([\n    {\n      key: 1,\n      description:\"this is the <b>first</b> kind\",\n      usage: \"Use once\"\n    },\n    {\n      key: \"foo\", \n      description:\"and this is the <b>later</b> kind\", \n      usage: \"Use as much as you want\"\n    }\n  ]));\n\n\n```\n. @mrssheep: There are some new topics on the jsviews.com site that provide documentation, samples and tutorials concerning how JsRender tags relate to HTML tags, and how you can then move to a data-linked version of the same, with JsViews. \nhttp://www.jsviews.com/#samples/data-link\nhttp://www.jsviews.com/#samples/data-link/from-render-to-link\nhttp://www.jsviews.com/#samples/data-link\n\nI'll close this issue...\n. Yes, I'll look at doing that.- but probably only when we hit V1.\n. JsViews and JsRender have both been released as v1.0.0 (https://www.jsviews.com/#download).\n\nI plan to look at a webjars deployment. How long ago was the previous version you were using?. You are looking at #index inside an {{if}}. Your code above would not have worked with versions going back about 2 years!\n\nSee #96 and #97 \n\nYou can do \n\n`{{> ~Category.Columns[#index].Width ? ~Category.Columns[#index].Width + 'px;' : 'auto;'}}`\n\nor \n\n```\n{{if ~Category.Columns[#index].Width > 0 ~index=#index}}\n    {{> ~Category.Columns[~index].Width}}px;\n{{else}}\n    auto;  \n{{/if}}\n\n```\n. @niramber - let me know if that works for you now, and I will close this issue...\n.  The template variables you define are visible at all level of nesting from there down, so you can just do:\n\n```\n   {{ if x>y ~index=#index}}\n        {{ if j>k}}\n            {{ if l>m}}\n                {{:~index}}\n```\n\nThe {{for}} tag can be used like a while. See http://www.jsviews.com/#fortag\nand also http://www.jsviews.com/#samples/jsr/tags/extend-for and http://www.jsviews.com/#samples/editable/tags.\n\nFor debugging, JsRender usually outputs error messages for things like syntax errors. You can step through the code too, but it may not always be easy to understand how it works. You can add extra things like {{:someExpression}} to output temporary debugging information within your template at different places... You can also add a custom converter, and put a break ;point in the converter, to break during template rendering at that point:\n\n`{{myDebugConverter:someExpression}}`.\n\nSee http://www.jsviews.com/#converters()\n. Closing this issue...\n. Using {{>#data}} within the {{if}} block will look like this, and would be valid:\n\n```\n{^{if ~mediaType(#data)==\"youtube\"}}\n  {{>#data}} \n{{/if}}\n```\nIs that your question?\n. This has now been implemented. See this sample: https://github.com/BorisMoore/jsrender/blob/master/demos/scenarios/03_iterating-through-fields-scenario.html\nhttp://borismoore.github.io/jsrender/demos/scenarios/03_iterating-through-fields-scenario.html\n. Take a look at #96, #97, or  #217 - all of which concern the same thing as described in your issue, and which explain it - and provide some patterns you can use to make your scenario above work correctly.. \n\n(Always a good tip to search existing issues - since often your issue will already be answered).\n. Yes, this is a duplicate of the very last issue, at #219, and of several others (#96, #97, or #217). Take a look at them for responses.\n\n(It's always best to look at existing issues before creating new ones...)\n\n`#foo` is equivalent to `#view.foo`, and is a property on the current view. A view is an rendered template block. The current block you are in is the `{{if}}` block, so necessarily `#index` means something different in different blocks. But there are other ways to get properties from higher up in the hierarchy of views, as described in some of the other issues linked above...   \n\nYet another one is \n\n```\n{{if ...}}\n    {{:#getIndex()}}\n{{/if}}\n```\n\n`#getIndex()` is available on any view and finds the index on the first parent view it finds on which an `#index`property is defined...\n. Yes see my updated reply just above. That exists - it is `#getIndex()`...!\n\nI agree a lot of folks hit this, but honestly I don't know how to avoid this issue, other than special casing `#index` as a syntax. I don't really want to create that kind of inconsistency...\n. sure, np\n. Closing.\n. @mrssheep: Thanks for calling this out. It relates to https://github.com/BorisMoore/jsviews/issues/158. The problem is that path expressions in templates which include arrays were inconsistent in whether or not they triggered a refresh of that tag when the array changes. (For example {^{:...}} was refreshing but {^{if...}} was not, when your array term updated.) \nThis behavior has been changed in commit 48. The current goal is consistency, and now arrayChange on array terms in paths will not trigger automatic refresh. Instead, that behavior is opt-in - so for example the {^{for items}} tag specifically does update but the {^{include items} tag does not.\n\nA solution to the above example would be:\n\n```\n{^{: ~root._OpenIds.length && ~root._OpenIds.indexOf(MyId) !== -1}}\n{^{if ~root._OpenIds.length && ~root._OpenIds.indexOf(MyId) !== -1}}\n    hello world!\n{{/if}}\n```\n\nThis works because array.length automatically raises a propertyChange, and the tags do listen to propertyChange, not to arrayChange events...\n\nSee the commit 48 notes:\n\nBREAKING CHANGES:\n- Data linking to arrays is simplified and more consistent. Now tags\n  DO NOT automatically bind to arrays, and refresh when the array updates.\n  {^{myTag path.to.array/}} will now update when the to.array property is\n  update (property change) but not when the to.array itself changes\n  observably. (array change). A tag should opt in to arraybinding either\n  by deriving from the \"for\" tag - as in the 'range' sample:\n  http://www.jsviews.com/#samples/tag-controls/range, or by following\n  the using onAfterLink and onDispose to add/remove the onArrayChange\n  handler, as in the {^{myWidget .../}} sample in the JsViews unit tests.\n  This change relates to https://github.com/BorisMoore/jsviews/issues/158\n. This simplified version of the above works for me:\n\n```\n\n<div class=\"inline-block\" data-link=\"\n    css-font-weight{:(~root.locids.length && ~contains(~root.locids, Key)) ? 600 : null}\n    {on ~root.insert}\"\n>\n    abc\n</div>\n\n\n\nvar myTmpl = $.templates(\"#myTmpl\"),\n    model = {\n        Key: \"foo\",\n        locids: [\"yes\", \"no\"],\n        insert: function() {\n            $.observable(model.locids).insert(\"foo\")\n        } \n    };\n\nmyTmpl.link(\"#page\", model, {contains: function(a, b){\n    var val = $.inArray(b, a) > 0;\n    return val;\n}});\n\n```\n. @mrssheep: Does the above work for you? If so we can close this issue.\n. Closing since no answer...\n. JsViews works with `object graphs` (objects, arrays, properties) and paths - like `person.name.address`. While you can return any key you want in JSON data, if that data is 'evaled' into object, then the keys need to be valid Javascript names. \n\nThat said, if you really need to allow things like `\"@ddre%s\"` as a key, then you have to write \n\n`person[\"@ddre%s\"].name`\n\nSo if you have data like that, you will need to use that syntax in JsRender. `#data` is the current object, so you can write \n\n`{{>#data[\"@Value\"]}}`  \n. I haven't seen that issue. Can you create a jsfiddle or a complete example of what you are doing? Thanks.\n. Yes, JsViews validates for badly formed HTML such as ``\n. @BurnedToast: Thanks for calling this out.\n\nThis has been fixed in commit 48: \n\nCommit notes:\nBREAKING CHANGES:\n- Whenever the value null is returned from tag, the result is now\n  consistently to render nothing (empty string). Previously {{:nullValue}}\n  returned the empty string, but {^{:nullValue}}, {{attr:nullValue}} and\n  {converterReturningNull:foo}} did not. This is a fix for\n  #224.\n. Closing\n. Thanks - I hope to include this for V1.0\n. I hear you! Working hard on the final V1.0 features, and the next update will bring us very close to V1. It will include full Node.js integration with npm install, and Express and Browserify support. I will include Bower either in that update or the following one.\n. @timgluz, @zetorama, @rafaelsales:  \nBower support for both JsRender is now included, since commit 65. \n\nhttp://bower.io/search/?q=jsrender\nhttps://github.com/BorisMoore/jsrender/releases/tag/v1.0.0-rc.65\nhttps://github.com/BorisMoore/jsviews/releases/tag/v1.0.0-beta.65\n. Yes thanks, and sample 2b lower down has the same issue. JsRender correctly renders the template and the custom tag, but the issue is that nesting a `` inside a `` is incorrect HTML, so when it gets inserted in the DOM the resulting markup is unexpected. I'll fix it by using this as content:\n\n```\n{{boldp}}\n  This is inside our block content:\n{{:title}}\n{{/boldp}}\n```\n\nwhich is what I had intended to do (as shown in the text above) but the samples instead had a nested `` tag.\n. @Zsnd: This has been fixed in commit 48. Thanks for calling it out.\n. @gw128: Yes, thanks. In fact I had a fix for this already, which has just been checked in, in commit 48.\nThanks for calling it out. So it should now be working correctly.\n. With commit 50, you can now get the full path from the root object you are doing observeAll on, to the changed object/property. See for example the last sample here: http://www.jsviews.com/#observeAll.\n\nYou can observe both array changes and property changes...\n\n```\n$.observable(person).observeAll(changeHandler);\n\nfunction changeHandler(ev, eventArgs) {\n  var message = \"\";\n  if (ev.data.observeAll) {\n    message += \"observeAll path: \" + ev.data.observeAll.path() + \"\"\n  }\n  for (var key in eventArgs) {\n    message += \"\" + key + \": \" + JSON.stringify(eventArgs[key]) + \"\";\n  }\n  $(\".messages\").append(\"\" + message + \"\");\n}\n```\n\n![image](https://f.cloud.github.com/assets/202658/1970002/1e3ae1e6-82fe-11e3-8fe0-690646875896.png)\n. Thanks. I'll look into this as a possible feature - but may have to wait until after V1.0.\n. @jcttrll: This scenario is now covered by the onError feature. For example `{{>something.anotherThing.value onError=''}}` or `{{>something.anotherThing.value onError=null}}` will both render the empty string if `something`, or `something.anotherThing` are undefined. See commit 54: https://github.com/BorisMoore/jsviews/commit/5f815bc76cc14fb62ce297391e45dfef71596445   \n. You closed this... Did you resolve your issue?\n. @o-rey: That said, it should throw with an error saying \"...requires jQuery\" rather than this not very comprehensible error. I'll fix it so it throws correctly, in the next update...\n. @o-rey: The error message issue has been fixed in commit 52:  https://github.com/BorisMoore/jsviews/commit/fe24e43a00b89489a4759b72a4d161a527ee4356\n. Thanks. I'll keep this open, and hope to include it for V1.0.\n. Are you using JsViews, or just JsRender?\n\nIf just JsRender, then you can put {{if}} blocks within element markup - but clearly you have to deal with using appropriate string delimiters, ' or \".\n\nSo at at least change to ' and avoid newlines to avoid incorrectly terminating your string within the xxx string for href=\"xxx\"\n\n```\n {{:pageNumber}}\n```\n\nYou can also use ternary expressions:\n\n```\n {{:pageNumber}}\n```\n\nIf using JsViews, you cannot nest JsViews tags like `{{if ...}}` within attribute markup. Use `data-link=\"href{:...}\"`. Take a look at the tutorial sequence, http://www.jsviews.com/#samples/data-link - and in particular: http://www.jsviews.com/#samples/data-link/attributes. \n\nAlso generally it is better to encapsulate complex logic in helper functions, like: \n\n```\n {{:pageNumber}}\n```\n. I reopened. (You wanted it to stay open, right?) I'll look into this during this weekend...\n. The index property on the view will have a numeric value on any view that is an indexed view (type \"item\"), e.g. the views that correspond to the iterated content of a {{for someArray}} block. But a view that corresponding to the content of an {{if}} block, for example, will have the standard warning string as value. That is so that if you write {{:#index}} within that view, it will output the warning telling you to instead write {{:#getIndex()}} - which will actually step up through parent views and find the first view of type \"item\" and output that index.\n\nSo the question is what is the element to which you attached your delete handler. (The 'this' within the handler). It it has non numeric index then it is in a nested view, not in an item view. But you can do  view.getIndex() to find what the index of the nearest parent item view is.\n\nBTW using non-self-closing markup for `` or `` can lead to errors. You need `` and ``\n\nThe following returns a view with and index as expected:\n\n```\n\n    <fieldset><legend>Interfaces</legend>\n        {^{for interfaces}}\n            <fieldset><legend>{{:name}}</legend>\n                <fieldset>\n                    <legend>\n                        Addresses\n                    </legend>\n                    {^{for addresses ~interface_index=#index}}\n                        <p>\n                            <input type=\"text\" spellcheck=\"false\" placeholder=\"network name\" />\n                            <img class=\"action-delete\" src=\"/images/remove-button.png\" title=\"Delete address\" />\n                        </p>\n                    {{/for}}\n                </fieldset>\n            </fieldset>\n        {{/for}}\n    </fieldset>\n\n\n\nvar myTmpl = $.templates(\"#myTmpl\"),\n    model = {\n        interfaces: [\n            {\n                addresses: [\n                    {}\n                ]\n            }\n        ]\n    };\n\nmyTmpl.link(\"#page\", model);\n\n$(\".action-delete\").on(\"click\", function () {\n    var view = $.view(this);\n    //...\n});\n```\n. Yes, that is fair. To add a couple of details/clarifications, the context you are referring to is called a view, and is an instance of the rendered content of a block tag. {{for}} tags against array iterate against the array, and create a view for each item. Those views are 'item' views and have index properties.\n. Closing - since this was a question, now answered, not an issue.\n. Can you explain the scenario you have where you load the jsrender.js or jsviews.js and have `jQuery !== this.jQuery` at file scope? Generally `jQuery === this.jQuery` and `this === window`.\n. Yes, it is clear. I understand how you obtain references to the different versions of jQuery - and I see the need to load jsrender with your myjq version. Just curious though about how you are loading jsrender within the closure:\n\n```\n(function(jQuery) {\n   // load jsrender here\n})(myjq);\n```\n\nIf you load it as a script file in the browser it will be at global scope - not within your closure. Is this loading on the server? What is the mechanism used to load jsrender.js? Is there some kind of module composition mechanism which allows jsrender.js code to be somehow inserted - concatenated between `(function(jQuery) {` and `})(myjq);` ?:\n. So of course you can work around the issue by writing\n\n```\n(function(jQuery) {\n  var outerjQuery = window.jQuery;\n  window.jQuery = jQuery;   \n  // load jsrender here\n  window.jQuery = outerjQuery;\n})(myjq);\n```\n\nBut I could change jsrender to pass in `jQuery` rather than `this.jQuery`. I'm ready to make that change, but my one concern is whether that might break other users' scenarios., In particular will NodeJS users have a problem since currently `this.jQuery` is equivalent to `global.jQuery` for them. In Node, will the local `jQuery` default to `this.jQuery`. \n@coolbloke1324 (Rob Evans): Rob -  do you have a view on this one?\n. @jblandry; @coolbloke1324: \nUnfortunately there is an issue. JsRender can be used without jQuery. Passing in `(function($) { ... })(jQuery);` if jQuery is not defined causes most browsers (IE, Safari and Firefox) to throw (\"'jQuery' is undefined\"), whereas passing in `(function($) { ... })(this.jQuery);` treats `this.jQuery` as `undefined` without throwing.\n\nThere is a fix - to write:\n\n```\ntry {\n    jQuery = jQuery;\n} catch(e) {\n    jQuery = undefined;\n}  \n(function($) { ... })(jQuery);\n```\n\nbut I am a bit reluctant to add that code. The alternative is for folks who are concatenating files to write a wrapper:\n\n```\n(function(jQuery) {\n  var outerjQuery = window.jQuery;\n  window.jQuery = jQuery;   \n  // load jsrender here\n  window.jQuery = outerjQuery;\n})(myjq);\n```\n\nSo for the next update (53) at least, I will not make the change stay with `(function($) { ... })(this.jQuery);`... \n\nComments?\n. OK, sounds good - I'll close this issue. \n. Thanks Justin. Good catch. \n\nI'll include this in the next update - not only in JsRender but also in jsviews.js on https://github.com/BorisMoore/jsviews and https://github.com/BorisMoore/jsviews.com. I won't trigger a pull request directly since that will cause a new version which will be out of sync with the other versions on the other two JsViews projects...\n. @FallSe7en: Thanks again for this, Justin. It has been included in commit 53 (https://github.com/BorisMoore/jsviews.com/commit/7902aee71e5736ab5d58ffa50a358ee0a22e1606 and https://github.com/BorisMoore/jsviews/commit/d03575bf810610437bfd2337b319266b9ad18433 and https://github.com/BorisMoore/jsrender/commit/3a43f89a42b0346f0b67bc2ee992386b5323c203)\n. @ewolfman: Thanks for asking this. I hope to reply in a couple of days time...\n. Oh - sorry - I forgot to follow up on this.\n\nThe original memory leak referred to in this issue related the fact that JsRender was holding on to  a ref to the HTML script element used to define a template, and that was preventing garbage collection/disposal of that element if it was deleted. Your issue is rather that you want to remove the reference to the compiled template on the $.templates object, if the script element is deleted. It seems to me that this is less important than releasing the element itself. (In fact I don't think many people are deleting template script elements dynamically.) \n\nWhat is your scenario? Are you repeatedly creating temporary script elements to declare templates 'on the fly' - then removing the elements? You know of course that you can compile templates from the markup string, without inserting that markup into the DOM at all... \n\nTo allow deleting the template references automatically, we need to be notified when the script elements are deleted. In the case of using JsRender without jQuery, there is no reliable way of obtaining notifications. And with jQuery, adding this support would require either caching the compiled templates differently when jQuery is available (using $.data()...) or overriding $.cleanData, which is something we are already doing in JsViews, but it is rather 'heavyweight' (with perf cost too). \n\nSo I don't currently see a simple way of doing automatic deletion - that works with or without jQuery. It may actually make more sense for the app developer to determine when they are removing the script elements, and doing the deletion themselves, as you have been doing - if they are really dealing with large numbers (and sizes) of temporarily inserted template script elements. \n\nDo you have any other thoughts or suggestions as to how to achieve this?\n. Hi @ewolfman,\n\nI am working on a possible fix. It would be very helpful if you could test it in your environment, to verify that the fix works in your scenario.\n\nIf you are able to do that, maybe you can email me (at borismoore@gmail.com), and I will email back to you with a copy of JsRender or JsViews including the fix.\n\nBTW are you using JsViews, or just JsRender? I assume you are using jQuery....\n\nI have created a new issue for this, here: https://github.com/BorisMoore/jsrender/issues/264\n. Yes, it is already committed, so available to test in your context... Let me know if it resolves your issue...\n. Good to hear. Yes that fix seemed to be the best way... Let me know if you see any further issues.\n. For the first issue JsHint does not complain about that. Changing to $tag[\"for\"] adds 3 characters to minified size :). I used to write to $tag[\"for\"] but changed to the more compact form, since it is compatible with current standards. So I think I will keep the compact form. Is that a problem for you?\n\nFor the second issue, thanks, yes I had missed that. Fixing for next update.\n. It turns out that `$tag.for` is a problem for IE8 (https://github.com/BorisMoore/jsviews/issues/267) - so I will indeed also change to `$tag[\"for\"]` and `$tag[\"if\"]`\n. @csharbel: This has been fixed in Commit 56.\n. @nKognito: Thanks. I could do as you suggest, but I would prefer to avoid making that change as it adds code and makes for a slightly more complex and confusing user experience for people using `{{dbg/}}` or `{{dbg: ...}}}` to debug their apps.\n\nIt seems that this is really a YUI bug, and it should not be necessary to 'hide' the debugger; statement - which is a valid statement. Other minifiers work fine with that line of code.\n\nIt looks like that YUI ticket is a duplicate of 2129938. But I can't access 2129938. Also those tickets are YUI2 - which is now deprecated in favor of YUI3. Can you give status as to whether this issue remains with YU3 and if so is there an active bug open addressing this?\n\nThanks.\n. @nKognito: I didn't hear back on my questions above. I assume this should be treated as a YUI bug, so resolving this issue for now.\n. @nKognito: I decided I would fix this, nevertheless. Fixed in commit 64\n. It works fine for me:\n\n``` html\n<script id=\"theTmpl\" type=\"text/x-jsrender\">\n    {{if media_type == 'video' }} OK {{/if}}\n\n```\n\n``` javascript\nvar data = {\n    media_type: 'video'\n};\nvar html = $.templates(\"#theTmpl\").render(data);\n    $(\"#result\").html(html);\n```\n. Yes, you can use that syntax. So does response.data correspond to `var data = { media_type: 'video' };`?\n\nIt works correctly for me. Replace your response data with the above simple data example. If you still have a problem, can you create a jsfiddle example?\n. OK - I am resolving as not a JsRender issue - since it works correctly for me and looks like it is an error in your code.\n. But did you simply try replacing:\n\n```\n$('.photo-feed').append(\n    $('#templateMediaThumb').render( response.data )\n);\n```\n\nwith \n\n```\nvar data = [\n{\n    ...\n    media_type: 'video'\n},\n...\n];\n\n$('.photo-feed').append(\n    $('#templateMediaThumb').render( data )\n);\n```\n\n???\n\nIf that works correctly then you need to look at what was different in your `response.data,`\n. Thanks - I was aware of this and have a fix coming - but did not realize it broke IE8. See also https://github.com/BorisMoore/jsviews/pull/275. I will try to get the update submitted within a couple of days.\n. This has been fixed in commit 57.\n. Certainly, the above does not look optimal. I haven't had time to look at it very closely. But I notice things like\n\n```\n        {{if SummaryInfos.Property2}}\n          {{>SummaryInfos.Property2}}\n        {{else}}\n          {{>SummaryInfos.Property3}}\n        {{/if}}\n```\n\nwhich you should be able to replace with \n\n```\n{{>SummaryInfos.Property2 || SummaryInfos.Property3}}\n```\n\nand \n\n```\n       \n          {{include tmpl='#siteTitleTemplate' /}}\n        \n```\n\ncould be replaced by something like:\n\n```\n\n  {{if !SiteName && !SiteAddressL1 && !SiteAddressL2 && !SiteAddressL3 && !SiteAddressL4 && !SiteAddressL5 && !SiteAddressL6}}\n    non disponible\n  {{else}}\n    {{>SiteName != SiteAddressL1 && SiteName}}\n    {{>SiteAddressL1}}\n    {{>SiteAddressL2}}\n    {{>SiteAddressL3}}\n    {{>SiteAddressL4}}\n    {{>SiteAddressL5}}\n    {{>SiteAddressL6}}\n  {{/if}}\n\n```\n\nBTW for your syntax for helpers such as `{{if #view.hlp('isListView')()}}` I'm not sure why you didn't write `{{if ~isListView()}}`.\n\nIt seems you are calling this particular helper many times: `{{if #view.hlp('isListView')()}}`. - You may be better off using a completely different columnTemplate for the case when isListView() is true and the case when it is false - rather than including those smarts within the template.\n\nThere could well be some perf issues around that fact that your grid is re-rendering completely as the user types. You could make it update only once they have finished typing?\n\nUsing JsViews data-linking rather than JsRender can allow incremental updates, rather than re-rendering the whole grid, but that would probably require not using the Infragistics grid at all, or working on integration between the Infragistics grid and data-linking.\n. That seems strange - that it should be faster when you use {{include ...}}. Maybe Infragistics are retriggering the compiling of the template every time. \n\nWould it be possible for you to create a couple of jsfiddle samples showing the two cases - preferably simplified as much as possible just to show the performance hit difference when you don't use {{include}} and when you do? If you can do that I will then try to debug what is happening...\n. @Bnesme: I didn't hear back from you, so I will close this issue. Let me know if you want to re-open, or if you are able to create jsfiddle examples for additional investigation. Thanks...\n. Oh - great. We'll re open this as appropriate, once we have looked at the example...\n. How are you passing in  the object?\n\nIf you are passing in as $.render.address(App), then  you need to put\n\n`{{props estados}} ...`\n\nJust like the samples here http://www.jsviews.com/#propstag\n\n```\n{{props address}}\n  {{>key}}: {{>prop}}\n{{/props}}\n```\n\n (Not `{{props 'estados'}}`)\n. JsRender does not let you access global variables directly (partly for security and clean encapsulation). You can render against the data, and you can pass in contextual helpers. In each case you only pass the variables once. `...render(data, context)`. Take a look at the samples - you should find what you need there... http://www.jsviews.com/index.html#helpers,  http://www.jsviews.com/index.html#samples/jsr/helpers, etc.\n. This has already been fixed in commit 56: https://github.com/BorisMoore/jsrender/commit/b54a3230f6b8aec350cf087cba0f8b5e0bf9a573\n. This is a JsViews issue, not a JsRender issue. Could you re-create this issue on JsViews? I'll reply to the new issue once you have created. Thanks! (BTW see this related issue on JsViews https://github.com/BorisMoore/jsviews/issues/158, and this related discussion on StackOverflow: http://stackoverflow.com/questions/25721180/summary-value-calculation-with-jsviews). \n. You can use `{{:#data[\"foo.bar\"]}}`\n\nhttp://www.jsviews.com/#assigntag explains what `#data` is.\n. Can you show the actual markup you are using in the template, with `~getCountByEntityType()`? I assume you mean you are writing `~getCountByEntityType([...])` - so you are wanting to pass in an array literal. Is that right?\n\nIn fact you can pass an array or an object to a helper, but you cannot use javascript literals, `[...]` or `{...}`.\n\nThe array you pass must come from data or from another helper.\n\nFor example, all of the following are possible\n\n```\n{{:~getArrayLength(myArrayData)}}\n{{:~getArrayLength(aaa.bbb.someArray)}}\n{{:~getArrayLength(~myArrayHelper)}}\n{{:~getArrayLength(~myHelpers.someArray)}}\n{{:~getArrayLength(~myHelperThatReturnsAnArray())}}\n```\n\nFor the issue about passing in literals, see https://github.com/BorisMoore/jsrender/issues/195.\n. Closing this, as duplicate of #195 (since I didn't hear back from @sharbel-clearfood. )\n. JsRender doesn't \"know anything about the DOM\" - divs etc. It simply renders the template against the data to produce a string. \n\nIt is your code that is then inserting that string into the DOM - e.g. by using $(...).html(renderedString) - or maybe by rendering the string from the server. So you will need to look into your own implementation of those aspects to determine what is going on. \n\nHow are you using JsRender on the server?\n. Closing since did not hear back on this.\n. The problem is arising from this line in the infragistics code:\n\n`return this._tmplWrappers[this.id()+\"_\"+col.key](d,col.template)`\n\nThis corresponds to calling the render method of JsRender, with parameters: render(data, context) where the data parameter is correct but the context parameter is being passed a string - namely col.template. (The markup string of the template).\n\nThe context parameter of the JsRender render() method, if passed, should be an object, not a string. (generally an object with named helpers or contextual parameters: `{someHelper: ...}`)\n\nThe JsRender line of code `(context = context || {}).root = data;` then throws in Chrome when in strict mode.\n\nApparently that context parameter is not being used, and does not need to be passed in at all. In non-strict mode it is simply ignored.\n\nSo an obvious fix would be for them not to pass in that string parameter:\n\n `return this._tmplWrappers[this.id()+\"_\"+col.key](d)`\n\nDo they need it for other template engines for some reason? If the templateEngine is \"jsrender\" they should not pass it in...\n\nA hack fix is to remove the \"use strict\" - which is what they are doing in their version.\n\nBTW the usual - and simpler - syntax for helpers would be `{{>~toFullName(Name)}}` rather than `{{>#view.hlp('toFullName')(Name)}}`.\n. @Bnesme: Hi Benoit - any update on this for your side or Infragistics? Can we close this issue, or is there something needed on jsrender side of things? I am considering adding a line of code to prevent people passing in a context variable of type string. But if I make that an error condition then if Infragistics don't fix their code it will actually make the code fail (with an error message thrown by JsRender) even if the don't have 'use strict'. Either way, it will remove there context string that they passed in... \n\n```\nif (typeof context !== objectStr) {\n    context = undefined; // context must be a boolean (noIteration) or a plain object\n}\n```\n. OK - good. To be clear, can you specify what their fix is? My hope is that they are no longer passing in a context of type string, and they are no longer removing the 'use strict'. Is that correct? \n. If JsRender is used without JQuery, then it does not create a global variable `$`. Instead it creates a global variable `jsviews` - so you need to use `jsviews.templates`, not `$.templates`.\n\nBut if you want to use the same code as in the samples which use jQuery, you can simply alias the `jsviews` variable as `$`.\n\n`var $ = window.jsviews;`\n\nHere are some alternative styles for doing the same thing:\n\n`var $ = window.jsviews || window.jQuery;`\n\nlike here: http://stackoverflow.com/questions/27088543/jsrender-noconflict - which will work whether or not you have jQuery loaded before or after you code.\n\nOr else, as in the example you point to, pass `window.jsviews` or `this.jsviews` into a self-executing function, to alias as `$`:\n\n```\n(function($) {\n    ...\n    $.templates({\n        movieTemplate: document.getElementById( \"movieTemplate\" ).innerHTML,\n        ...\n   });\n\n    document.getElementById( \"movieList\" ).innerHTML = $.render.movieTemplate( movies );\n\n})(this.jsviews);\n```\n. JsRender and JsViews both now have complete documentation at https://www.jsviews.com.\n\n(New topics added [here](https://www.jsviews.com/#escapetag) and [here](https://www.jsviews.com/#nullcheck), concerning above stackoverflow questions). I think you meant to write\n\n```\n   \n   {{props categories}}\n      {{:key}}\n\n      \n   {{/props}}\n   \n```\n\nUsing `{{:key}}` or `{{>key}}` should work, but writing `{{key}}` makes it into a custom tag. Custom tags need to be written `{{mytag/}}` or `{{mytag}}...{{/mytag}}`. So here the parser is expecting to continue  and find more content within the `{{key}}` block, followed by the closing tag for `{{/key}}` and then for `{{/props}}`. Instead it finds what it thinks is an isolated unmatched `{{/props}}`.\n\nOf course it could have said: \"Missing closing tag or closing slash for {{key}}{{/key}} or {{key/}}\". But there are different possible interpretations of what was intended when there is a syntax error, so the message is just a hint as to where/what the issue is.\n. It is one pass parsing, so is too soon to know if the parent `{{key}}` is missing its closing tag. It just hasn't been encountered yet. (Indeed, looking up the stack of parent tags, they at that point will _all_ be missing their closing tags!)\n\nIf your code was \n\n```\n   \n   {{props categories}}\n        {{key}}\n              {{/props}}\n        {{/key}}\n    {{/props}}\n   \n```\n\nthen on reaching the `{{/props}}` it would be wrong to say \"no closing {{/key}}\". (And if it did, a user would complain :) )\n\nAs I said, in a one pass situation, without creating additional two-pass analysis (with perf and file size    implications), there is more than one possible interpretation, so the message indicates the location of the issue (the `{{/props}}`) and the fact that (given the nested `{{key}}` tag), it doesn't match an opening `{{props}}`.  From there it is for the user to check their syntax around that area and find their error.\n. @ittayd - I did manage to improve the detection and error message associated with this scenario. (Similar to you suggestion). Fixed in commit 64.\n. Maybe bower is not loading a recent version. You should look at which version it is loading. See https://github.com/BorisMoore/jsrender/issues/225. Full bower support is planned for V1.0. Can you  load jsrender directly? (http://www.jsviews.com/#download)\n. It looks like this is a problem with the processing model of PHP and how that integrates with JsRender in your environment. It's not a JsRender issue as such, and is not possible to answer here, since there are too many unknowns about the order of processing etc. between PHP and the JsRender render() call.\n. Use ``\n\nI'm not sure what you mean by using 1.0. JsRender is beta.\n\nIf you use recent versions, and if you include quotes around your attribute: `` you should have got \n\n`foo`\n\nwhich documents the fact that in nested views, you should use `` rather than ``\n\nSee: https://github.com/BorisMoore/jsrender/issues/173#issuecomment-11216255\n\n(BTW it is always best to search previous issues for dups - there are several that address #index in nested {{if}} etc...)\n. NP!\n. Thanks for your question and thoughts.\n\nSo here are some responses:\n\nIf you compare `{{for}}` with `for (...) {}` in programming languages, yes in JsRender parent scopes are not visible in the same way. But this is not a programming language, it is a templating language, and so there are a lot of differences. Other templating languages mostly do not expose outer scopes like that. If they do then they are a) probably using nested `with()` in the imlementation, which is a significant perf hit, b) following a philosophy which is far from the 'logicless' idea preferred by many. More specifically, if a template language is used in the context of  MVVM or similar, or following that kind of philosophy, then there is a goal of separating Model and View, and maintaining appropriate encapsulation. \n\nIn JsRender we try to strike a balance: we provide a lot of the flexibility and power obtained by not adhering to strict 'logicless' ideas, and providing an expression language within template markup, but still providing some guarantees around encapsulation - which incidentally also provides better security as well as better maintainability. For that reason you cannot write `{{:globalJavascriptVariableFoo}}`. But you can pass in that variable as a helper, and then write`{{:~helperVariableFoo}}`.\n\nIn JsRender you can also set `allowCode: true` on your template and then include `{{* ret += globalJavascriptVariableFoo; }}` in the template... - but you have to opt in to those semantics.\n\nAbout: _\"it's not like using an external template, which would be more akin to a new function with new local scope\"_, they really need to be the same. Writing this\n\n```\n{{for baz}}{{:foo}}{{/for}}\n```\n\nshould be equivalent to writing\n\n```\n{{for baz tmpl='getFoo'/}}\n```\n\nand then\n\n```\n$.templates(\"getFoo\", \" {{:foo}}\");\n```\n\nSo you need encapsulation. You have no idea whether getFoo template will actually be used in a nested context which includes a foo property. 'getFoo' is designed to work on a model that has a foo property, not a view which happens to be nested in another view which uses a model with a foo property. View/Model separation needs to be respected.\n\nAnd even if we did try to implement your suggestion, it would mean that we have to create a contextual data object that is a merged object with all the properties of the models of the parent views. But if now you switch to JsViews, and you want data-linking then if a parent model gets an observable property change, we would have to ensure that all the nested contextual data objects are listening to that change so that the cloned properties are also  changed observably. That sounds like a lot of code, bad performance, and a probably source of bugs and maintenance issues...\n\nFinally it would be a big semantic change to introduce so late after beta. I am heading to V1.0 so I am trying to avoid breaking changes.\n. Concerning templating languages that _simply expose the \"receiver\" of the block as a named variable, e.g. something like {{for baz ~thebazitem}}_, can you point me to an example of that? I'm not sure I understand how it is supposed to work.\n\nAlso, I am curious when you talk about having tried four other frameworks - are you using JsViews, or just JsRender. What other frameworks did you explore? \n. OK - thanks - so  in each case (Closure and doT) you have to specify the 'variable' for the inner context - '$slide' or 'value' and then access the properties using that reference - '$slide.url' 'value.url'. JsRender instead has an implicit inner variable '#data' and lets you get {{:url}} directly. This makes things more compact:\n\n```\n  {foreach $slide in $slideList}\n    {$slide.url}\n  {/foreach}\n```\n\nbecomes \n\n```\n  {{for slideList}}\n    {{:url}}\n  {{/for}}\n```\n\nAdvantage - more succinct, and I can use and external template without needing to tell it the name of the reference variable 'slide':\n\n```\n  {{for slideList tmpl='inner'/}}\n```\n\ninner:\n\n```\n    {{:url}}\n```\n\nSo what if I want to get the array.length:\n\n```\n  {foreach $slide in $slideList}\n    {$slide.url} in {$slideList.length}\n  {/foreach}\n```\n\nbecomes\n\n```\n  {{for slideList ~list=#data}}\n    {{:url}} in {{:~list.length}}\n  {{/for}}\n```\n\nwhich is still more compact than Closure. But now the inner template and caller will need to agree on the name of the array variable '~list'\n\n```\n  {{for slideList tmpl='inner' ~list=#data/}}\n```\n\ninner:\n\n```\n    {{:url}} in {{:~list.length}}\n```\n\nTo avoid needing to share the array name, we can write\n\ninner:\n\n```\n    {{:url}} in {{:#parent.parent.data.length}}\n```\n\nbut that is certainly less friendly. \n\nSo maybe an easy improvement would be to expose the stack of data objects from the outer scopes as a built-in contextual variable, like we do already for '~root' - which is the outermost one.\n\nWe could call it '~dataStack' or 'contexts' or 'roots' ?? - so you would write:\n\n```\n  {{for slideList tmpl='inner'/}}\n```\n\ninner:\n\n```\n    {{:url}} in {{:~roots[0].length}}\n```\n\nThoughts?\n\nBTW - about your syntax `{{for baz ~thebazitem}}` - that would not work, since it corresponds to the existing syntax which allows you to pass multiple unnamed parameters to a tag, so here we have two - baz and ~thebazitem which we are passing to {{for}} - but of course ~thebazitem is undefined.\n\nWhat you are really suggesting is semantically equivalent to what you can write today as `{{for baz ~thebazitem=#data}}`. But as I say above that still means that for an external template you need to agree on the '~thebazitem' variable name. The `~roots` suggestion above avoids that...\n. @oserra: Thanks for your comments. BTW I would love to write a plugin for Eclipse - but of course, as you can imagine, I neither have the time nor the knowledge to do so :). Maybe you or someone in the Eclipse community would be interested in doing so :). It could work for any Mustache-like template. \n. The whole approach in JsRender is that there is a current data context in each block. If `slide` is an object, `{{for slide}}` moves the context to `slide` - which is referenced by #data. (Like 'this'). \nOne reason for that is so that any block in a template can at any time be converted to an external template, without change, (a 'partial') and so the original template can be 'modularised' and its component parts can also be reused.\n\nHandlebars and Mustache do the same as JsRender, and do not allow the nested context to see the outer one. \n\n```\n{{#each person}}\n    {{name}}\n    {{#each phones}}\n        {{number}} \n        {{!-- in this block, the contextual {{this}} is a phone. {{name}} will not work here --}}\n    {{/each}}\n{{/each}}\n```\n\ndoT and Closure do not have that approach. They have a single context, and expose additional variables in nested blocks.\n\nSo when you say _\"I am suggesting leaving the current context as it is and passing in a variable for what is currently the inner context.\"_ that means changing from the Mustache/Handlebars/JsRender approach to the doT/Closure approach which would of course be a big breaking change.\n\nYou would have to write: \n\n```\n{{for slides &slide}}\n  {{:~slide.url}}\n{{/for}}\n```\n\nand the following which works today, and is equivalent, would no longer work:\n\n```\n{{for slides}}\n  {{:url}}\n{{/for}}\n```\n\nBTW you generally don't need to alias each variable since they are properties of the current #data context, so rather than\n\n```\n{{for slides ~slides=slides ~viewMode=viewMode ~selectedURL=selectedURL}}\n  {{:~slides.length}}\n  {{if ~viewMode == 'all'}} {{!-- do something --}}\n  {{:name}}\n{{/for}}\n```\n\nyou can write\n\n```\n{{for slides ~outerOb=#data }}\n  {{:~outerOb.slides.length}}\n  {{if ~outerOb.viewMode == 'all'}} {{!-- do something --}}\n  {{:name}}\n{{/for}}\n```\n. Quick reply: \n\nJsRender already has context that is visible to all levels of nesting - `~foo` is either a helper (which is added to context at the top-level, or a contextual variable `~foo=someExpression` which is added at some level of the nested blocks. Either way, once added to context they are visible to all levels of additional nesting. (Blocks inherit the parent context).\n\nSo you don't need to do \n\n```\n{{for items ~outerData=#data}}\n  {{for fields ~outerData=~outerData ~outerInnerData=#data}}\n    {{:name}} {{~outerData.someModifier}}\n  {{/for}}\n{{/for}} \n```\n\nYou can just do\n\n```\n{{for items ~outerData=#data}}\n  {{for fields ~outerInnerData=#data}}\n    {{:name}} {{~outerData.someModifier}} {{!-- this is visible from here too --}}\n  {{/for}}\n{{/for}}\n```\n\nSo that is pretty simple. \n\nJavascript plain objects are hashes, or course. So when you say you pass in a hash, yes, but sometimes it is hierarchical data. You can access the hierarchy using paths `a.b.c` or you can use `{{for a.b}}` to step in to the level of hash `c`. Either way you can access the values of the hash, by key, directly. From nested contexts if the case of hierarchical data, you can still do `~root.a.b.c` so your top-level hash is always available.\n\nArrays of strings is a secondary scenario. The primary target scenario is arrays of objects (hashes if you will). So usually you don't need to reference #data directly. But if you do, it is no more rocket science than accessing `this` or `this.bar` - it is a this pointer... \n\nSo for an array of objects you will generally have:\n\n```\n{{for someList}}\n  {{:someProperty}}\n{{/for}\n```\n\nIn your notation that becomes \n\n```\n{{for someList &object}}\n  {{:object.someProperty}}\n{{/for}\n```\n\nwhich is much less succinct and intuitive IMO.\n\nSo here are your _Advantages of proposed way:_ with some responses to some of them...:\n- No requirement to pass contexts down the path - they are always available _You don't need to pass them down. Just define them once, same as in the proposal_\n- Recognizes that most often the one or two new variables introduced by the loop are not important enough to justify changing the entire scope and losing immediate access to other important data\n- Consistency in referring to attributes - it is always attr and not ~someContext.attr or ~attr _No, it will be myVariable.attr - if we have an array of objects, not strings_\n- Gives the template writer full control over the names of all their variables _They already have that. Usually they don't refer to #data, but if they do it is exactly equivalent to 'this` and if they want to expose it as inherited context, they can do so and they choose the name they want for that variable._ \n- Feels more natural from a programming perspective\n. That's right. You can use helpers for all that...\nTake a look at http://www.jsviews.com/#helpers  \n\nFor view paths, `#foo` is short for `#view.foo`, so `#parent` means `#view.parent`, `#data` means `#view.data`.\n\nSee:\nhttp://www.jsviews.com/#samples/jsr/paths\nhttps://msdn.microsoft.com/en-us/magazine/hh975379.aspx\nhttp://stackoverflow.com/questions/20900963/jsrender-jsviews-how-to-loop-a-selected-object-list/20914994#20914994\n\nAnd yes, getting better docs will help a lot - it is part of getting to V1.0\n\nSo `#parent.parent...` steps up through parent views, and each view has its data context, `view.data`.\n\nBut it is not always `#parent.parent.data` you need:\n- In `{{for object}}` there is an outer view and a nested item view, so `#parent.data` is the outer data.\n- In `{{for array}}` there is an outer view, a nested \"array\" view, and `n` nested \"item\" views. So from the block content (an \"item\" view) `#data` is the item data, `#parent.data` is the array and `#parent.parent.data` is the outer data. \n\nI am exploring an idea to provide something related to your request. I'll keep you posted.\n. I have created an update, here https://raw.githubusercontent.com/BorisMoore/jsviews.com/itemVar/download/jsviews.js, and a sample here: http://jsfiddle.net/BorisMoore/zgr90L3s/ - with an added feature you can use on any tag to get a context variable (which is visible in nested contents) for the data item(s)  \"#data\" of the block:\n\n```\n{{for people itemVar='~person'}}\n    {{:~person.name}}\n    {{:name}} {{!-- this still works --}}\n    {{for ~person.address itemVar='~address'}}\n        {{:person.name}} lives in {{:~address.street}}\n...\n```\n\nSee also the unit tests here:\nhttps://github.com/BorisMoore/jsviews.com/blob/itemVar/test/unit-tests/tests-jsrender-no-jquery.js#L463\n\nSo this makes it easier to get an alias for the block data which can be used at all nested levels. But it does not modify the fact that a {{for x}} block will move the data context to x (if x is not an array - or to the array items if it is).\n\nI did explore additional behavior of keeping the outer data context, but it led to a number of complexities and it was not clear that the advantages/scenarios where it was actually useful were sufficient to justify that complexity - and the potential confusion it could create for people who are trying to understand how JsRender and JsViews templates work. Simpler is better. \n\nSo my plan is to merge this into master and gh-pages branches. You are welcome to test it out, in the meantime.\n. Good, thanks!\n\nOn the parentData question, well, we have `#parent.data` or `#parent.parent.data` - or you can provide it by writing:\n\n```\n{{for myArray ~parentData=#data}}\n   {{:~parentData.length}}\n```\n\nI'm not sure we gain much by adding another way to do that, such as : \n\n```\n{{for myArray parentDataVar='~parentData'}}\n   {{:~parentData.length}}\n```\n. As mentioned higher up, \n- In `{{for object}}` there is an outer view and a nested item view, so `#parent.data` is the outer data.\n- In `{{for array}}` there is an outer view, a nested \"array\" view, and `n` nested \"item\" views. So from the block content (an \"item\" view) `#data` is the item data, `#parent.data` is the array and `#parent.parent.data` is the outer data. \n\nBut anyway, with itemArg you don't even need to use #parent. Suppose you have this data:\n\n```\nvar model = {\n    o: {\n        op: \"...\",\n        oo: {...}\n    },\n    a: [\n        {ip: \"i1\", io: {...}},\n        {ip: \"i2\", io: {...}}\n    ]\n}\n```\n\nand this template:\n\n```\nCTX1\n    {{for o}}\n        CTX11\n        {{for oo}}\n            CTX111\n        {{/for}}\n    {{/for}}\n    {{for a}}\n        CTX12\n        {{for io}}\n            CTX121\n        {{/for}}\n    {{/for}}``\n```\n\nLet's say you want to be able to get to all parent contexts from all scopes.\n\nRewrite your template like this:\n\n```\nCTX1\n    {{for o itemArg=\"~o\"}}\n        CTX11\n        {{for oo itemArg=\"~oo\"}}\n            CTX111\n        {{/for}}\n    {{/for}}\n    {{for a itemArg=\"~ai\"}}\n        CTX12\n        {{for io itemArg=\"~aio\"}}\n            CTX121\n        {{/for}}\n    {{/for}}\n```\n\nSo for example, from CTX121 you can get to CTX12 (~ai) and CTX1 (~root) which is all the parent scopes\n. The itemVar feature has been implemented in commit 63. I'll close this issue now...\n. There are already some users who are using the same template on the server, with JsRender render() and then on the client using JsViews link(). So at least part of the above scenarios is already possible.\n\nCurrently you can use a template like\n\n`{^{for people}}...{^{:firstName}} ...  ... {{/for}}`\n\non the server, and it will render exactly  the same as \n\n`{{for people}}...{{:firstName}} ...  ... {{/for}}`.\n\nSo then on the client you would need to re-render it using link() and the result would be that the user might see a 'flash' as the lastName gets rendered.  \n\nAnd yes, you could create the data, or part of it, as part of the initial rendering from the server.\n\nFor V1.0, there will be some Node.js integration, along with the above behavior. For more extensive built-in support and features concerning these scenarios - that will be a feature request for after V1.0\n\nSee also https://github.com/BorisMoore/jsviews/issues/69\n. Closing \"After V1.0\" issues for now - to reopen as appropriate.\n. JsRender let's you change the delimiters, like this:\n\n```\n$.views.settings.delimiters(\"<%\", \"%>\");\n```\n\nSo then you would write `<%: name %>`.\n\nIf you use JsViews, you can also set the binding character `^` in `{^{` - by writing:\n\n```\n$.views.settings.delimiters(\"<%\", \"%>\", \"*\");\n```\n\nthen using `<*%: name %>`.\n. Well clearly you need to follow the JsRender syntax. Start with a working template, then substitute the characters. It is {{for ...}}...{{/for}}, not {{ for ... }}...{{ /for }}.\n\nSee http://www.jsviews.com/#jsrtags for tag syntax.\n\nI added a working snippet: \nhttp://stackoverflow.com/a/29497325/1054484\n. @wzup - did you check out my working sample on stack overflow? It would be great if you could accept my answer and remove the part of your question where you say it doesn't work. A lot of people use StackOverflow for documentation, and you question can help them to discover how to change delimiters. But right now it is pretty confusing for them...\n\nThanks!\n\n(BTW I can then also remove my comments from the StackOverflow thread, since they would no longer apply...)\n\nLet me know here, if anything still does not seem to work. Otherwise, we can then close this issue...\n. When you say people may have the same issue, do you mean that when changing the delimiters, they might also incorrectly add whitespace, as you did? Well yes - but isn't that quite independent of whether they change the delimiters? They  might incorrectly write `{{ for items }}` instead of `{{for items}}` even with the original delimiters...\n\nDid everything work correctly for you when you took a working template and simply replaced `\"{{\"` with `\"<%\"` etc.?\n. Closing, but putting under https://github.com/BorisMoore/jsrender/issues/251\n. There is minimal documentation here: http://www.jsviews.com/#tagsyntax\n\nMore detail to come when I add docs for settings.delimiters, settings. debugMode() etc. \n. Sorry, but that sounds like a question that is not actually dependent on JsRender. If would be the same no matter what process you are setting up the busy indicator to wait for. I can't answer general coding questions here... The JsRender issues list is only for JsRender-specific problems, bug reports or questions.\n. But the rendering is synchronous. You don't need a callback.\n\nvar html = $.render.myTemplate(data, ...);\n_**// Now the rendering is done. (Rendered to string)**_\n$(\"#container\").html(html);\n_**// Now the rendered string is inserted in the DOM.**_\n\nThat's if you are using JsRender, not JsViews.\n\nWith JsViews it would be:\nmyTemplate.render(\"#container\", data, ...);\n_**// Now the rendered string is inserted in the DOM.**_\n. http://jsfiddle.net/7dLnmuq7/2/\n. When you set the tmpl reference it can be either a static value - template name - or an expression which returns either a template name or even an actual compiled template.\n\nFor example: `{{include tmpl=nameOrExpr /}}` : http://www.jsviews.com/#includetag\n\nhttp://www.jsviews.com/#samples/jsr/composition\n\nSome of the samples use variables or expressions -  e.g. http://www.jsviews.com/#samples/jsr/composition/tmpl-objects `{{for languages tmpl=~columnTemplate/}}`\n\nAs to having template composition respond dynamically to data changes - JsViews is all that: about binding to 'observable' data and responding to changes: http://www.jsviews.com/#jsviews\n\nFor example this line https://github.com/BorisMoore/jsviews.com/blob/gh-pages/resources/tags/built-in-tags.js#L57 in the code for the tabs tag-control has the tmpl dynamically change based on user selection.\n\nThere are quite a few examples too in the unit tests:\n\ne.g. https://github.com/BorisMoore/jsviews.com/blob/gh-pages/test/unit-tests/tests-jsviews.js#L1192, or https://github.com/BorisMoore/jsviews.com/blob/gh-pages/test/unit-tests/tests-jsviews.js#L8970 ... \n. I'll close this for now. `tmpl=someExpression` should work fine for returning different templates based on data. \n\nLet me know if you have further issues...\n. You can access nested properties - i.e. properties of properties, using the simple syntax a.b.c - for example `{{:person.address.street}}` or `{{for person.phones}}...{{/for}}`. See for example http://www.jsviews.com/#assigntag, http://www.jsviews.com/#samples/jsr/paths\n. Hello - sorry, I missed this earlier. \n\nMy tests with require js are working correctly. Can you provide a jsfiddle showing the problem, or more information about your error scenario? I don't have any repro for the above error message - so I can't investigate further.\n\nThanks!\n. Closing, since no feedback received...\n. Thanks Nariman - but that is strange, I have not seen that. Can you create a jsfiddle example which shows it. And can you use the non-minified version of JsRender? Thanks very much.\n. OK - thanks.\n\nIn commit 63, $(\"...\").render({}) goes through the code:\n\n```\nfunction $fastRender(data, context, noIteration) {\n    var tmplElem = this.jquery && (this[0] || error('Unknown template: \"' + this.selector + '\"')),\n        tmpl = tmplElem.getAttribute(tmplAttr);\n\n    return fastRender.call(tmpl ? $templates[tmpl] : $templates(tmplElem), data, context, noIteration);\n}\n```\n\nIn commit 64 it goes through the code:\n\n```\n$.fn.render = function(data, context, noIteration) {\n    var tmplElem = this.jquery && (this[0] || error('Unknown template: \"' + this.selector + '\"')),\n        tmpl = tmplElem.getAttribute(tmplAttr);\n\n    return renderContent.call(tmpl ? $templates[tmpl] : $templates(tmplElem), data, context, noIteration);\n};\n```\n\nSo essentially the same code. But the  error you are getting might occur if `tmpl ? $templates[tmpl] : $templates(tmplElem)` is in fact null or undefined. In fact on the first call, `tmplElem.getAttribute(tmplAttr);` will return null, and the `$templates(tmplElem)` will therefore compile the template. On the second call, tmpl will be a string, and `$templates[tmpl]` should be the cached compiled template. It sounds as if on the second call the `$templates[tmpl]` does not in fact contain the cached template. Are you doing anything that might delete that cached template? Can you try and debug with breakpoints or console logging and try to see if there is an issue showing up in the above code? What does you lazy loading do, and does it affect this scenario somehow?\n\nOtherwise I would need repro in some form (html files etc.) so I can debug this...\n. Yes, that makes sense. In version 63 and previous, JsRender detected that a copy of JsRender had already been loaded, and in that case aborted the loading of a second instance. But with commit 64 support was added for AMD script loaders - which do not play well with trying to magically avoid loading a second instance, so now if you choose to load a new instance, then the new instance will indeed be loaded as expected...\n\nIf you are not using jQuery then commit 64 provides a noConfict() method to optionally keep global references for the previous instance. But if jQuery is loaded, then the second instance will replace $.templates, $.render etc. so you will lose your previous template registration.\n\nSo you need to choose whether to load a new instance and clear the previously registered templates, or not to load.\n\nThe next update (65) will use a different approach to caching  templates from script blocks, so in fact your scenario above will actually work even though a new JsRender instance will be loaded. But you will still probably not want to reload if you have registered named templates, since those registrations will be removed.\n\nUpdate: The new version (65) changes behavior on reloading - and does not remove registered named templates. So that plus the new caching approach will both help your scenarios...\n. This has been fixed in commit 65\n. This has been fixed with commit 65.\n. Yes, it is planned for V1 - see https://github.com/BorisMoore/jsrender/issues/211. So I'll close this issue as a dup.\n. Thanks, you are right, and indeed there are quite a few APIs that are either undocumented or only documented indirectly via samples, and in some case via answers to question on the issues db (here) or on StackOverflow. I will be working on adding that content to the documentation very soon. My priority has been to get the code and APIs stabilized for the V1 release - which should be completed in the upcoming commit - then to work on docs before declaring the official V1.\n\ngetIndex() and get() are on my list...\n. Closing, but putting under #251\n. Added to docs here: http://jsviews.com/#viewobject@getIndex\n. Your question isn't clear to me. Can you show me an example of the data, and what you want to render from it? Or create a jsfiddle example?\n. I have no idea what EventLocation is, or what you want to do with it. You have shown your template, but EventLocation is not even in there...\n\nAlso this Issues database is for calling out bugs and missing functionality in JsRender, not for requesting help with your own apps. So I will need to close this unless you have a _really specific_ simple question, and can make it _really obvious_ with a jsfiddle example what your problem is...\n. Yes, it has been moved, some time back...\n\nMany samples that were originally on the JsViews and JsRender GitHub demos folders have been updated and moved to http://www.jsviews.com/#samples.\n\nThe tree view ones are here: http://www.jsviews.com/#samples/tag-controls/tree\n. Closing this issue. (@sadfuzzy: I didn't hear back from you - so I assume you picked this up...) \n. If you are just using JsRender, then you can page your data using your own code, and simply pass the paged arrays to the render method. But if you are using JsViews, you can leverage JsViews, use custom tags etc. as in the following sample (three variants using the same basic design):\n\nhttp://jsfiddle.net/BorisMoore/zgr90L3s/\nhttp://jsfiddle.net/BorisMoore/dg7x8mrc/\nhttp://jsfiddle.net/BorisMoore/uu7opr3z/\n\nThe sample is not yet on jsviews.com - but I hope to add it there at some point.\n. It looks like you ended up by understanding how the view hierarchy works, and the fact that your {{if}} test is itself adding a child view, so you need an extra level of parent.parent...\n\nIf not, let me know...\n. Thanks for catching this...\n. You can use the current APIs together with async jQuery APIs like in the samples here:\nhttp://www.jsviews.com/#samples/jsr/composition/remote-tmpl and here http://www.jsviews.com/#compiletmpl.\n\nFor example - as a simple approach:\n\n```\n$.get(\"...person.txt\", function(value) {\n  personTemplate = $.templates(value);\n  var html = personTemplate.render(people);\n  $(\"#peopleList\").html(html);\n});\n```\n\nIs there a reason why this is not sufficient, without needing to create new async APIs within JsRender?\n\nAs for having an asynchronous tag like `{{load data url=\"/my-templates/another-remote-template\"  /}}` - the problem is that that could not be used within a template that is being rendered synchronously - it would ONLY be able to be used when rendering using some (yet to be implemented/defined) API. \n\nOn the other hand, with JsViews, one could design a tag which was async, but only when using a data-bound form: `{^{load data url=\"/my-templates/another-remote-template\"  /}}`.\n\nThere are already a lot of features available with JsViews or JsRender when associated with JsRender on the server, as described here:\n\nhttp://www.jsviews.com/#node/filetmpls and http://www.jsviews.com/#node/server-browser.\n\nSo I don't think we need to add more at this point. (If you feel these features are insufficient, then let me know how you would like them to be improved. But it would need to be for a later release after V1.0 has been released.) \n. @RedJabber - didn't hear back from you. Closing this issue for now...\n. Yes, totally agree, a search feature would help a lot - and is planned.\n\nActually that is an issue for the https://github.com/BorisMoore/jsviews.com project, and indeed there is already that issue filed: here https://github.com/BorisMoore/jsviews.com/issues/2.\n\nI'm not sure how soon I'll be able to add the search, since priority now is getting the basic docs complete, then publishing the official V1 of both JsRender and JsViews.\n\nClosing this issue.\n. www.jsviews.com does now have a powerful search feature.\n\nHere is an example: http://www.jsviews.com/#search?s=%24.templates(\n. Yes, you can do that in a few ways. For example see [this sample](http://jsfiddle.net/BorisMoore/8d49e3ad/) - in response to your [Stack Overflow question](https://stackoverflow.com/a/33112105/1054484)\n. Thanks for this. I came across some issues and details - see line comments... I hope to merge and include your request at some point... I have all the above fixes now in my local version...\n. Hi Dario. \n\nI have included Hogan and Dust in the perf comparison: http://borismoore.github.io/jsrender/test/perf-compare.html. I'll close this pull request for now. Let me know if you want to propose pulling something different from what is currently on JsRender test site. Thanks.\n\nBoris\n. That is strange. It looks like you are getting this https://github.com/defunctzombie/node-jsrender/blob/master/package.json - rather than this: https://github.com/BorisMoore/jsrender/releases\n\nThe jsrender name was originally associated with the https://github.com/defunctzombie/node-jsrender repo, and was subsequently moved to https://github.com/BorisMoore/jsrender. \n\nWhen I do a test install npm install jsrender does install the rc70 version, for me... Is there anything in your environment that could be pointing it to the earlier version? Are you starting from a clean folder with no package.json?\n. @ianw89 - Hi Ian, I don't have any repro of your issue. As mentioned above, it sounds like it must be something specific to your environment - or at least I hope so :). Can you confirm whether you are installing into an directory with no package.json, and that you have not in the past installed an earlier version of jsrender node module? \n. I did finally get information from the npm support team - and the  explanation is apparently as follows:\n\n> Current npm versions will, if you say \"npm install jsrender\" use the value of the latest tag and install v1.0.0-rc.70. By current versions, I mean npm@3.4.1 or later.\n> \n> https://github.com/npm/npm/blob/master/CHANGELOG.md#v341-2015-11-12\n> Earlier npm versions would look for the first version that matched *, which is 0.0.3, due to prereleases not matching ranges.\n\nSo the fix will be to use version numbers like 0.9.71 rather than 1.0.0-rc.71.\n\nI will switch to the 0.9.71 style from the next update onwards.\n. In fact they now consider the previous behavior (where prereleases where not installed) to be a bug (design bug if you will) and they have fixed it in the later npm.\n. Clearly the problem is that template in the browser showing only the ``. How are you creating the browser HTML? Are you rendering the page on the server? Is livereload playing a role, rerendering the HTML? It doesn't look like a JsRender issue... \n\nDid you start by following one of the patterns on the https://github.com/BorisMoore/jsrender-node-starter for server rendering etc.?\n. OK - well the problem is you are trying to use JsRender both for rendering on the server and in the browser.\n\nSee \nhttp://www.jsviews.com/#jsr-node-quickstart\nhttp://www.jsviews.com/#node/filetmpls\nand http://www.jsviews.com/#node/server-browser\n\nabout different ways of rendering file-based templates in the browser.\n\nYou are not using those patterns for rendering the peopleTmpl in the browser, but instead you are rendering it directly in the server rendered content\n\n```\nHello: \"{{:hello}}\"\n\n...\n\n    <ul>\n        {{for people}}\n            <li> Name: {{:name}} </li>\n        {{/for}}\n...\n```\n\nAll of those tags ({{:hello}} and {{for ...}} are in your server-rendered template, so are being rendered there on the server. On the server, `people` is undefined, so the `{{for people}}` renders no content.\n\nIf you want to include a client template in the server-rendered template, you have either to use {{clientTemplate}} or browserify, etc. as in the jsr-node-quickstart, or you can choose to use different template delimiters on the server and the client. E.g call jsrender.views.settings.delimiters(\"<%\", \"%>\"); on the server and then use:  \n\n```\n<%include tmpl='./templates/_includes/helloworld.html'/%>\n```\n\nand\n\n```\n<h2>Hello: \"<%:hello%>\"</h2>\n\n...\n<script id=\"peopleTmpl\" type=\"text/x-jsrender\">\n    <ul>\n        {{for people}}\n            <li> Name: {{:name}} </li>\n        {{/for}}\n...\n```\n\nNow the {{for }} tags will not be recognized as server jsrender tags, and will get rendered directly to the browser, where they will get recognize as tags by the client jsrender engine.\n\nI changed the title of this issue, to help others who may have the same difficulty...\n. Well the jsrender-node-starter (with its samples and [readme](https://github.com/BorisMoore/jsrender-node-starter#jsrender-node-starter)), along with the node.js topics on jsviews.com (http://www.jsviews.com/#jsrnode), is all about showing how to do _Single Page Apps with initial rendering on server_ - with alternative ways do to that. I can't do other than suggest choosing between the approaches described there.\n. On the starter I address initial server rendering using the same template as subsequent client-side SPA rendering - e.g.\n\n```\n<tbody id=\"movieList\" data-link=\"{include tmpl='./templates/movie-list.html'}\">\n    {{include tmpl='./templates/movie-list.html'/}}\n</tbody>\n```\n\nbut I don't do shared server-side/client-side routing. The initial rendering is on the 'home page' of the SPA only.\n\nBut you should be able to use the URL hash to switch 'pages' client-side - like I do on the www.jsviews.com site - and then have the server also render a different page based on the hash - complete with initial rendering of included templates.\n. I don't use any external libraries other than jsviews and jquery. The code is all here: https://github.com/BorisMoore/jsviews.com. I'm not actually using push state. No it is not rendered server-side. Just index.html for the initial page. \n\nSearch engines seem now to be able to search SPA's - with javascript on, without depending on server rendered content. Not sure how they do it! But manifestly it works.\n. Closing\n. That is a deliberate assignment. The code is equivalent to:\n\n```\ntag = this.tag;\nif (tag) {\n    ...\n```\n\nCan you show a complete example of what you are doing, or else create a jsfiddle that shows the issue? \n\nClearly all the test cases and the samples (such as http://www.jsviews.com/#samples/jsr and http://www.jsviews.com/test/index.html) are working without hitting that error, so there must be something different in what you are doing... Thanks.\n. Sure - let me know if there is a real bug hiding there!\n. Ok - but alternatively you can use choose different delimiters, such as `<%...%>` using `$.views.settings.delimiters(\"<%\", \"%>\")`.\n\nSee: https://github.com/BorisMoore/jsrender/issues/258\n. Unfortunately there is a bug in npm prior to 3.4.1 that installs a very very old version rather than the latest. See https://github.com/BorisMoore/jsrender/issues/278. So until now you will have been missing a huge number of JsRender features.\n. @iguerrero84 - I didn't understand you there. Were you getting the JsRender version 0.0.3 as a result of having a version of npm prior to 3.4.1? In that case you need to update npm then re-install JsRender.\n\nOr was your error with a recent version of JsRender? (In which case can you explain where the require was missing - I don't follow.)\n. Hi,\n\nThanks for these suggestions. But I am seeing some issues with your proposal - and your pull request:\n\nFor the test using `path.resolve('.test/templates/name-template.html')` - that doesn't work for me because (in Windows) it produces a path which starts with  `\"C:\\\"` or similar, and has a : - so of course fails your regex  `/^[^\\\\:*?\"<>]*$/`.\n\nIn fact the design to require paths to follow the canonical pattern starting with \"./\" was deliberate. It avoids the perf hit of having an unnecessary readFileSync call when you are in fact passing in a template string: `jsRender.templates(\"my template content\")`. Many of those template strings are likely to pass your modified regex test and trigger the file access, whereas with the \"./\" design they did not. \n\nAlso your design means that there is more than one way to write the path for the same template, so the caching of compiled templates against the name can lead to clones using different lookup keys.\n\n```\n// If the template is not named, use \"./some/file.html\" as name.`\nif (tmpl = $templates[name = name || value]) {\n```\n\nSimilarly in scenarios with browserify, the canonical path in my design is also used as a lookup, client-side - see the code in jsrender.js: https://github.com/BorisMoore/jsrender/blob/master/jsrender.js#L773-L781.\n\nWith the change, it would lead to different 'spellings' for that id lookup in the browser, and possible duplicates of the client code for the compiled template.\n\nSo for the above reasons, I chose to impose the constraint that if you have a path `local.htm` you have to prepend a \"./\" (which seems to me to be fairly easy to do...)\n\nBTW for the test where you get `console.log(out3 == 'value\\n3\\n');` I am not getting those newlines. Are you sure you didn't have a newline at the end of your relative.html file?\n. OK - thanks for digging in further. I have just committed some changes including adding to the docs re: relative path syntax: http://www.jsviews.com/#node/filetmpls.\n\nI'll close this issue.\n. See discussion here: https://github.com/BorisMoore/jsrender/issues/283\n. Thank you for working in this!\n. Thanks. In fact just today I committed a new update - v0.9.71 - which supersedes 1.0.0-rc.70. It has just been uploaded to npm too. It should fix the autoupdate issue, since I will no longer use version numbers with -rc*.\n\nWould you be able to update to v0.9.71 on cdnjs? Then I will add the info to the JsRender readme.\n\nAlso, would you be able to make JsViews available on cdnjs too? https://github.com/BorisMoore/jsviews\n. Excellent! Thank you very much!\n. Added to Readme. Thanks again!\n. jsrender.js is already an AMD-enabled script, (and it does not require jQuery - so it will not in itself force loading of jQuery as a dependency). So I believe your shim will not work - as implied by this:\n\nhttp://requirejs.org/docs/api.html#config-shim:\n\n```\nrequirejs.config({\n    //Remember: only use shim config for non-AMD scripts,\n    //scripts that do not already call define(). The shim\n    //config will not work correctly if used on AMD scripts,\n    //in particular, the exports and init config will not\n    //be triggered, and the deps config will be confusing\n    //for those cases.\n```\n\nFor examples of loading JsRender with requirejs, see:\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests-amd-scriptloader.html.\nand https://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-amd-scriptloader.js\n\nIf you want to force loading of jQuery before JsRender, you can always use this approach:\n\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-amd-scriptloader.js#L63-L73\n\nYou have also the option of using JsRender without requiring jQuery as in:\n\n```\nrequirejs( ['js/config'] , function(config){\n    require(['jsrender'], function(jsrender){\n        var tmpl = jsrender.templates(document.getElementById(\"id\"));\n        tmpl.render({a:'a'});\n    });\n});\n```\n. Good. Closing this now.\n. I'm not seeing that problem. When I run the page below, it works:\n\nCan you test it? If it doesn't work for you, check your version of jsrender. And/or create a jsfiddle I can look at...\n\n```\n<div id=\"result\">..loading</div>\n\n<script id=\"myTmpl\" type=\"text/x-jsrender\">\n<div class='col-sm-{{:colWidth}} col-sm-offset-{{:colOffset}} resize-group' id='{{:id}}' data-del-target='{{:id}}' data-handles='e' is-active='{{:isActive}}' style='{{:style}}'>what</div>\n\n\nvar tmpl = $.templates(\"#myTmpl\");\n\nvar html = tmpl.render({id: \"fg-b36-64a\", colWidth: \"12\", colOffset: \"0\", isActive: \"false\", style: \"display: none;\"}); \n\n$(\"#result\").html(html);\n\nvar test = $(\"#result\").html(); // gives: '<div class=\"col-sm-12 col-sm-offset-0 resize-group\" id=\"fg-b36-64a\" style=\"display: none;\" is-active=\"false\" data-handles=\"e\" data-del-target=\"fg-b36-64a\">what</div>'\n\ndebugger;\n\n```\n. Yes, you can write:\n\n```\n{{for components}}\n    {{include tmpl=\"#tpl-\" + type /}}\n{{/for}}\n```\n. Yes, tmpl=... works like any other named property on a tag. You can do things like `{{include tmpl=~getTemplate(...)` too.\n. About the async question:\n\nIt is certainly possible, if you are using JsViews, to do an async template include, as illustrated by the following sample prototype (where you can replace the `setTimeout()` by an async ajax call). Hiding and showing the section illustrates how the second time the rendering is synchronous and immediate.\n\n```\nShow: \n\n{^{if show}}\na {^{include tmpl=\"First\" /}} b {^{include tmpl=~getTmpl(\"Second\", #view) /}} {^{include tmpl=\"Third\" /}} b {^{include tmpl=~getTmpl(\"Fourth\", #view) /}} c\n{{/if}}\n\n\n\n\n\nvar tmpl = $.templates(\"#pageTmpl\"); // Compile template\n\ntmpl.link(\"#page\", {show: true}, {\n  getTmpl: function(val) {\n    if (!$.templates.hasOwnProperty(val)) {\n      setTimeout(function() {\n        var vw = $.view(\"#_jsv_\" + val);\n        if (vw) {\n          vw.tmpl = $.templates(val, \"remoteTemplate:\" + val);\n          vw.refresh();\n        }\n      }, 1000);\n      return \"<script id='_jsv_\" + val + \"'><\" + \"/script>\";\n    }\n    return val;\n  }\n});\n\n\n```\n. The prototype sample I gave was not a real working proposal. Just a proof of concept of a possible direction. I have created a linked issue on the JsViews GitHub project to suggest support for async template inclusion and composition: https://github.com/BorisMoore/jsviews/issues/364. Closed for now, but I'll consider researching it further for a future feature, but it would be post V1.0 or V1.1.\n\nMeantime:\n\nInserting script nodes in places such as between an ul and an li is risky, because the content model there is not phrasing content so does not allow  generic text content etc. Some browsers support script nodes there, but some will do unpredictable things like move the script node up as sibling to the ul. That is one reason why the above sample is not a serious or complete proposal.\n\nA better approach will be not to insert nodes and use DOM lookup.\n\nThere is a viewStore and views have ids (viewl._.id). See http://www.jsviews.com/#search?s=_jsv for exposing the view store as window._jsv.views.\n\nAlso you can provide a helper ~onAfterCreate() to be notified when new views are created. (The notification happens after the initial rendering).\n\nMeantime I have added another very preliminary POC for a different approach on the other issue.\n\nI won't be able to work more on it at this point though, but of course you are welcome to explore the direction, and report back if you wish, on the other linked issue.\n\n . I updated the POC at https://github.com/BorisMoore/jsviews/issues/364. The new one has more features and flexibility. You can set the wait text to `\"\"` - or can have tag content be rendered while waiting for the async rendering.. Thanks for picking up on this. I'll make sure it is fixed in the next update. Really the fix needs to be here: https://github.com/BorisMoore/jsviews.com/blob/gh-pages/_src/jsrender.js#L336 - since that is the build environment I use. So I may not actually pull your PR - unless I can easily do so without complicating my build process...\n. The change is part of update v0.9.72 - but I also then did a merge of your PR so as to have you show up as contributor :)\n. This is due to a bug in the AjaxMinifier. See https://github.com/madskristensen/BundlerMinifier/issues/63? Unfortunately this issue has been open for a long time and has still not been resolved.  Can you add a request for a fix there - on their issue? (You can also link back this this issue.) \n\nAs for using the already minified version, https://www.jsviews.com/download/jsrender.min.js or https://cdnjs.cloudflare.com/ajax/libs/jsrender/0.9.72/jsrender.min.js - it should work correctly - with $.templates correctly defined.\n\nIf you are using JsRender alone, you don't need jquery.views.js - you should use jsrender.js (or jsrender.min.js) - which is for use _either with or without jQuery_. \n\nIn fact both jquery.views.js and jquery.observable.js are used for JsViews (templates plus data-binding and 'observable' data) when jsrender is already loaded. (Generally though, for JsViews, people use the single file version: jsviews.js, which combines jsrender.js, jquery.observable.js and jquery.views.js as a single file). \n\nBut is sounds like you are only intending to use JsRender. \n\nSee also http://www.jsviews.com/#download, http://www.jsviews.com/#jsr-quickstart and http://www.jsviews.com/#jsv-quickstart.  \n. @MisterY: Well for JsRender you should have used `$ bower install jsrender` - which would have given you bower_components/jsrender/jsrender.js etc. (not jquery.views.js or the others).  See http://www.jsviews.com/#jsr-quickstart.\n\nOTOH if you used `$ bower install jsviews`, then you would have got both the separate files: jsrender, jquery.observable and jquery.views, _and_ the combined file jsviews.js - all in bower_components/jsviews.\n\nLet me know if the above is not the case!\n. @MisterY:\n\nWell that's strange. \n\nI just did a fresh `bower install jsrender`, and then created a page with\n\n```\n\n\n\n\n\n\n\n{{:name}}\n\n\nvar tmpl = $.templates(\"#myTmpl\");\n\nconsole.log(tmpl.render({name: \"Jo\"}));\n\n\n\n```\n\nIt worked correctly and output \"Jo\" to the console. \n\nCan you do the same? Do you see something different? \n\nThanks.\n\nBoris\n. Closing for now, since I didn't hear back. Please let me know if this does not work for you now...\n. OK thanks - I'm going to assume there is no issue here, then - since that's what my testing says. Or else I had misunderstood what you were doing... \n. The error you have is a syntax error:\n\n`{{include tmpl='./_includes/footer.html'}}` (Missing the closing slash)\n\nshould be\n\n`{{include tmpl='./_includes/footer.html' /}}` \n\nWen running in Node, if JsRender throws, Node will catch the exception and pass it to your render callback, and you have to deal with it there.\n\n```\nres.render('layout', appData, function(err, html) {\n    res.send(html);\n}); callback:\n```\n\nFor example you can have it render the error by writing:\n\n```\nres.render(..., function(err, html) {\n    res.send(err ? jsrender.views.converters.html(err.message) : html); // HTML encode message\n});\n```\n\nYou can also run node in debug mode, and catch the errors with breakpoints. (Using node-debug ...)\n\nYes the setting for debugMode(true) is `jsrender.views.settings.debugMode(true);` - and that will work for rendering out any rendering errors - instead of throwing exceptions. But syntax errors in the template will still throw, since they occur during template compilation, not during rendering...\n. I changed the title of this issue, to correspond to the  scenario we are concerned with here.\n. \"./...\" paths are relative paths - they are relative to the calling script - in your case app.js. They are nothing to do with Express.\n\nYou need to write `{{include tmpl='./templates/test.html' /}}`\n\nOTOH if you use Hapi or Express, you can define the templates directory location, and then write `res.render('_includes/footer', ...` where you are using an Express API - hence the path is relative to the templates folder you set up for Express, and you are omitting the .html extension, since you set that up too for express.\n\nJsRender './...' paths work equally well whether you use Express, Hapi, or neither.\n\nAll that is shown in the samples here https://github.com/BorisMoore/jsrender-node-starter, and the docs here http://www.jsviews.com/#node/filetmpls. \n\nDid you start from those samples? If so you should have been starting from the correct `./...` relative paths...\n. Right - it didn't explain the calling script, but in fact that is standard to node, the paths are just used with standard semantics. When new to node it is sometimes confusing. But the examples in the docs show `./templates/...` so suggest that the origin is higher up than the template folder (if one is assigned).\n. Sure!\n. As far as JsRender is concerned, if it detects a syntax error, it throws a corresponding error exception. \n\nWhat happens to the exception is then up to you, and the environment you are running in. You can write to console or render to the browser, as you wish - by setting up the appropriate error handler to catch the error and do that.\n\nIf you mean on the server in Express, well again, it's up to you to catch the error, or set up error handling as you want, or use the other available middleware etc. http://expressjs.com/en/guide/error-handling.html.\n\nIf you have set debugMode(true) or similar, then if the error was during rendering, JsRender will not throw, but will include the error message in the output. Best keep debugMode to false, if you want to catch exceptions. Then you can use standard Express without additional middleware, and write, for example:\n\n```\napp.get('/', function(req, res) { // Express template\n  res.render('layout-movies', appData, function(err, html) {\n    if (err) {\n      console.log(\"Error: \" + err.message);\n    }\n    res.send(html)\n  });\n});\n\n\n```\n. `tmpl=anyExpression` - it does not have to be the statically-defined name or selector string...\n\nhttp://www.jsviews.com/#samples/jsr/composition/tmpl-objects\n\nhttp://stackoverflow.com/questions/35627356/dynamically-assigning-different-templates-based-on-data-using-helper-or-custom\n. Is this issue a real one (if not can you close it)? \n\nYou seem to have `` here https://github.com/daslicht/jsviews-includes/blob/master/app/layout.html#L18 - which should work fine.\n\nWhy would you write `{{:client_bundle}}`? \n. OK - yes you need to define what is a top-level page - which will need jQuery (if loaded separately) and the initial clientbundle (which may include jQuery) loaded immediately (through script tags, not getScript(). But then if you load other 'sub-pages' (partials) as in  a single page app - you can define distinct client bundles for them too (definitely not including jQuery) and load them async with getScript.\n\nIt all depends on your chosen architecture....\n. It looks as if this may be a bug in my tmplify code. I'll look into it. Meantime you should be able to include jQuery in the client bundle, and it should work OK.\n. If you want to try a local fix for this issue, you can go into the node_modules/jsrender folder and change the last line of jsrender.js:\n\nhttps://github.com/daslicht/jsviews-includes/blob/master/node_modules/jsrender/jsrender.js#L2068\n\nto \n\n```\nreturn $ || jsr;\n}, window || this));\n```\n. Interesting. In fact this bug arose because previously I had the code `var global = (0, eval)('this')` - which worked fine also in the context of browserify. But I was forced to change that because of https://github.com/BorisMoore/jsviews/issues/323. So I switched to passing in the global parameter, from `this` - https://github.com/BorisMoore/jsrender/blob/master/jsrender.js#L2068.\n(See https://github.com/BorisMoore/jsrender/commit/f984e139deb0a7648d5b543860ec652c21f6dcf6#diff-79437e7f72c977b74a2d2d5d75ca518cL16.)\n\nThat works in most scenarios, but browserify calls that line of code from a 'compiled function' which has   `this` set to `{}`. I don't know if I can make browserify use the global context `this` which will be `window`, when that code runs in the browser... My fix of `window||this` is in effect a workaround for this problem...\n. This has been fixed with commit 75. (v0.9.75)\n. Did you find the documentation?\n- http://www.jsviews.com/#node/filetmpls - see nested calls to file-based templates. \n\nAlso \n- https://github.com/BorisMoore/jsrender-node-starter/blob/master/templates/layout-movies.html#L33\n- https://github.com/BorisMoore/jsrender-node-starter/blob/master/templates/layout-movies.html#L38\n\nand many others on the https://github.com/BorisMoore/jsrender-node-starter site.\n. You don't need to do `require(\"imports?this=>window!jsrender\");` since you have already got the line `let jsrender = require('jsrender');`. The import loader is an alternative way of doing the same thing...\n\nIf jQuery is loaded globally (as a script file) then this will work:\n\n```\nrequire('jsrender');\n$(function() {\n    let container = $('#container');\n    let data = {name: 'chan'};\n    let tmpl = $.templates('{{:name}}');\n    let html = tmpl.render(data);\n\n    container.append(html);\n});\n```\n\nbecause `require('jsrender');` will load JsRender and attach it to the global `$` (`window.jQuery`) as a plugin.\n\nBut if you are loading jQuery as a module, with webpack, then `window.jQuery` is not defined. You need to pass your local copy of jQuery to JsRender, by writing `require('jsrender')($);`. So you can do it like this:\n\n```\nlet $ = require('jquery');\nrequire('jsrender')($);\n$(function() {\n    let container = $('#container');\n    let data = {name: 'chan'};\n    let tmpl = $.templates('{{:name}}');\n    let html = tmpl.render(data);\n\n    container.append(html);\n});\n```\n\nSee the Browserify documentation: http://www.jsviews.com/#node/browserify@clientscript\n. So jQuery is loaded as a module - which means that `require('jsrender');` is incorrect.\n\nEven if jQuery is loaded via config, you still need to get a reference to `$` and pass it as a parameter when you require 'jsrender':\n\n```\nvar $ = require('jquery');\nrequire('jsrender')($);\n```\n. If you use the correct syntax shown above, with the $ passed as parameter, this will work correctly. Closing this issue for now.\n\nAlso, there will be additional documentation on using webpack, in the next update.\n. There is now a topic on webpack: http://www.jsviews.com/#node/webpack\n. I don't know how to do that. One way might be to write a  special loader: 'jsrender-loader'. \n\nAnother might be to add a build step which writes the rendered template to file (as an html file) then use the html-loader to load that file - at which point the html-loader will be able to do its usual magic of 'requiring' the images, using the usual regex test for .png, .jpg etc. and using whatever loaders or rules you have set up for those paths... \n\nIf you don't have the data statically at the time you compile with webpack, then  you won't be able to require the file paths. But  if you just point to the image urls, then you may not need to run require at all on the images, and just use `` - or use a converter just to point to the public URL path...\n\nI have not used webpack enough to help much more at this point. But if you do make progress on solving the scenario, I would be very interested to hear, and I could potentially then provide more documentation on jsviews.com based on the results... Let me know.... I just returned from 3 weeks travelling. Sorry not to be able to  reply until now. \n\nYes, you are correct. It is actually a documentation error, which I will fix soon. In fact to use webpack to load JsRender without jQuery, you do indeed need to use the syntax: \n\n```\nvar jsr = require('jsrender')();\nvar myTmpl = jsr.templates(...);\nvar html = myTmpl.render(myData);\n...\n```\n\nIt's actually the same pattern as with  Browserify: http://www.jsviews.com/#node/browserify\n\nThanks for investigating!. Documentation has been updated in commit 89.. When using Browserify, the relative paths are relative to your calling script. It is mentioned here: http://www.jsviews.com/#node/filetmpls:\n\n_**Note:** The ./... paths are always interpreted as relative paths relative to the **location of your calling script**. Declaring a templates folder for Express or Hapi does not change the origin of these relative paths._\n\nI'll try to call it out more clearly also in the Browserify topic. http://www.jsviews.com/#node/browserify\n\nSee also the examples in https://github.com/BorisMoore/jsrender-node-starter.\n\nIn your case you probably need to write `{{include tmpl=\"./src/modules/productlist/productlist-general.html\" /}}` - it looks like you are running your browserify transform script from the the parent folder of src?\n\nLet me know if that works for you...\n. It's a relative path, from the current folder (i.e. the folder with the calling script that does require('jsrender') - in this case Browserify that is creating the bundle).\n\nIt is not relative to the layout template. That's because the nested templates are registered and cached based on the path `./path/relative/to/current/folder/mytemplate.html`. Different templates in different folders might invoke the same nested template. But the registered path needs to be the same. And that path is used by the calling template to load the template. \n. In the last update I added a note on relative paths, here: http://www.jsviews.com/#node/browserify:\n\n**Note on relative paths...**\n. A `` has to be inside a `` and should only have `` elements as children. Your HTML with a `` as child of a `` is not valid HTML. \n. ES6 is not yet supported in browsers or on Node.js. I haven't studied how it will work, once it is broadly available.  But right now we are concerned with Browserify and Node.js which both use require().\n\nI don't know on ES6 import how one will be able to pass an instance of jquery to the imported jsrender.\n\nBrowserify-shim  creates globals, right? I want people to be able to use jQuery/JsRender/JsViews without  creating globals.\n\nIf you call  `require('jsrender')` when there is a `window.jQuery` global it will return `$`. If you call it when there is no global, it returns a function to which you must provide the local `$` as parameter.\n\nSo if you call browserify-shim and it adds a global jQuery then any subsequent calls to `require('jsrender')` will not return a function but `$`. Does that explain the exceptions being thrown (that you mention)? If not, can you provide a repro?\n. The problem with that approach is that now `require('jsviews')` (and `require('jsrender')` if the same pattern is used for that) will always return a function, so if `window.jQuery` is defined, and you write:\n\n```\nvar jsrender = require('jsrender');\njsrender.templates(...); // This will fail\n```\n\nor\n\n```\nvar $ = require('jsviews');\n$(\"#foo\")...; // This will fail\n```\n\n-- both will both fail - since jsrender and $ will have been set to the function.\n\nPeople would have to write:\n\n```\nvar jsrender = require('jsrender')();\n```\n\nor\n\n```\nvar $ = require('jsviews')();\n```\n\nThis is actually the most common scenario, so I think requiring those extra parens is going to confuse a lot of people...\n. Closing\n. Thanks all, for the explanations...\n\nThe information about script blocks is in a few places in the docs: http://www.jsviews.com/#search?s=script%20block. (@ba1dr - I'm not sure which  topics you had seen). \n. The MDN article you link to is for the non-standard  `RegEx.lastMatch()` API, which is a programmatic way of accessing the last match. But JsRender is not using that API.\n\nIn fact JsRender is using `\"$&\"` as a replacement pattern in a replacement string, in the `someString.replace(regex, replacementstring)` call - which is standard usage in JavaScript RegEx scenarios.\n\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace, where it says:\n\n> The replacement string can include the following special replacement patterns: ... $& Inserts the matched substring.\n\nThe regex in that line of code is rEscapeQuotes, which is declared as   `rEscapeQuotes = /['\"\\\\]/g` - and is a valid JavaScript regex.\n\nThat line is looking for `'` `\"` or`\\` and replacing them with the same character preceded by `\\`. \n\nIncidentally you should not be trying to run the same regex expressions used in JsRender as if they were Java regex expressions, since in Java the rules and validity of regex expressions can be quite different. JsRender of course runs in a JavaScript environment - the browser, or Node.js on the server...\n\nClosing this, since it does not appear to me to be a JsRender bug.\n. Did you see the overview here: http://www.jsviews.com/#helpers?\n\n`$.views.helpers(\"myHlp\", myhelper)` will register your `myhelper` helper under the name `\"myHlp\"`, so that **in a template** you can access it as in `{{:~myHlp}}`.\n\nIncidentally - though you probably don't need it - you can get your registered helper back by:\n\n```\nvar theHelper  = $.views.helpers.myHlp;\n// or var theHelper  = $.views.helpers[\"myHlp\"];\n```\n\nAlternatively you can pass in your helper just for a given render call. using `myTemplate.render(data, {myHlp: helper})` - and again you can access it as `~myHlp` in the template.\n. Can you create a jsfiddle with what you are trying to do? But I will be away travelling for the next two weeks, so will not be able to follow up with help until after Sept 10th. \n. I am back from travelling. If you still have a problem/question, can you create a jsfiddle so I can understand what you mean by  a dummy layer added to the object tree, etc. and see more clearly what you are trying to do, and how you are setting it up.\n\nOtherwise, we should close this issue... \n. Yes, thanks for calling this out! I'll fix it in the next update.\n. This has been fixed in commit v0.9.83\n. The issues data base is either for bug reports or for feature requests. \n\nAlso, it is not really possible to reply to your question since I have no idea what approach you tried to use for using JsRender templates, and what went wrong. In addition, I  am not an Angular expert, so cannot provide specific help on this at this point...\n\nYou could try and get help on Stack Overflow, but you will need to give much more information, or create a jsfiddle to show what you tried to do...\n. Good.\n\nBTW there are a couple of places on jsviews.com which show async fetching of templates:\n\nhttp://www.jsviews.com/#compiletmpl\nhttp://www.jsviews.com/#samples/jsr/composition/remote-tmpl\n\nBut an additional goal addressed here: http://www.jsviews.com/#node/server-browser and in samples here: https://github.com/BorisMoore/jsrender-node-starter is to do initial rendering on the server with the same template. so there is no 'flicker' if the same template is then rendered in the browser. Also this allows the browser to then use data-linking (JsViews) and have client-side interactivity, with items being added and removed from dynamic lists, for example, without having to re-fetch the updated content, or even re-render the whole page in the browser. Just smart incremental rendering.\n\nI haven't looked at the AMP proposals. The declared target is static pages, but it may be possible (and even more powerful and performant) to combine AMP optimisations with JsViews dynamic data=driven view interactivity in the browser...\n\nKeep my posted with your findings, if you can. Thanks.... Hi Vic,\nSure, I'll reply via email, so you'll have my email.\n\nBoris. The two parameters: `jsrender` and `$` are in fact both the jQuery object. (Your console.log is showing it in minified form).\n\nSo you can simply write:\n\n    define(['jquery', 'jsrender'], function($){\n      $.views.settings.allowCode(true);\n      ...\n    });\n\nThe effect of requiring `'jsrender'` as a dependency is that JsRender is loaded as a jQuery  plugin, so the `$` object includes the corresponding methods and objects, such as `$.views` and `$.render`.\n\nBTW, there are some examples here, but using require, rather than defining new modules:\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-amd-scriptloader.js\n\nI see you posted to stackoverflow. I'll wait for your response here before copying this response over to there.... If you debug your code, you should be able to see (with a break point) what your $ and jsrender objects are. Are they the same ($===jsrender). Do they have a $.views or jrender.views object? Has JsRender been loaded. (Look at Network).\n\nHere is a working sample:\n\n[requirejs.zip](https://github.com/BorisMoore/jsrender/files/761493/requirejs.zip)\n\nBTW you can try either alternative in global.js:\n\n```\ndefine(['jquery', 'jsrender'], function($, jsrender){\n    $.views.settings.allowCode(true);\n    ...\n});\n```\n```\ndefine(['jquery'], function($) {\n    require(['jsrender'], function($jsr) {\n        $.views.settings.allowcode(true);\n        ...\n    });\n});\n```\n\nOn defer: 'defer' is for loading using script tags. RequireJs being a script loader, will let you defer to when you call require(). You decide when that is in relation to document load.  \n\n. Can you give more information on what you are doing? Are you using JsRender with jQuery or without? How are you declaring your template? Can you show your code where you call $.templates(...)?. What kind of element is being used (with id \"major-tmpl\") to declare the template. It is not a good idea to use elements other than script blocks as containers for registering templates. Otherwise best to use a string. https://www.jsviews.com/#compiletmpl.\n\nIf you do use a container element, then JsRender caches the compiled template. If you then re-access the template by a second call to $.templates(\"#major-tmpl\"), the cached version will be used. But in your case it looks as if the cached copy or the container element have been corrupted. For example the following code will simulate the error condition you are hitting:\n\n```\nvar tmpl = $.templates(\"#major-tmpl\"); // Compile template\n\nvar html = tmpl.render(data); \n\n$(\"#major-tmpl\").data(\"jsvTmpl\", null); // Remove the cached compile template, to provoke error scenario\n\nvar tmpl2 = $.templates(\"#major-tmpl\"); // Try to reaccess and reuse compiled template (Error)\n\nvar html2 = tmpl2.render(data); \n```\n\nIs there anything you are doing which might corrupt or modify the element, or  the cached copy of the template?\n\nThe following version of JsRender includes a defensive fix for the above scenario. You can test it to see if it successfully resolves your issue. \n[jsrender.zip](https://github.com/BorisMoore/jsrender/files/780941/jsrender.zip)\n. Did you figure out why or how that element, or its JsRender data is getting modified/corrupted? What element type are you using as container for the template? With that patch it may be working, but it means you are recompiling the template every time you use it (or every time the cached copy is lost/corrupted), which is not good for perf.... OK - thanks for the update. Closing this issue.. I just edited the post above so the code renders correctly, and cleaned it up slightly for legibility.\n\nBTW the syntax `{^{else ... }}` is incorrect/unnecessary. See http://www.jsviews.com/#jsvelsetag.\n\nAnd yes, as Paul says, you can replace `{^{if` by `{{if` and `{^{for` by `{{for` for all cases where the data will not change. . Some details:\n\nNo need to put parens around expressions, in general, such as  `{^{if (IsXIdle)}} ... {^{else (IsIdle)}} ...`.  It will be more efficient to write `{^{if IsXIdle}} ... {{else IsIdle}} ... `. Better, if IsXIdle and IsIdle don't change dynamically, write {{if IsXIdle}} ... {{else IsIdl}} ...`. \n\nWherever you can, replace `{^{: ... }}` by `{{: ... }}`.\n\nWherever you can, remove `data-link=\"...\"` expressions. For example can you replace `\n  {^{for assets}}\n    \n\n\n          {^{:Registration}}\n        \n        {^{:FriendlyNameShort}}\n\n\n\n  {{/for}}\n\n\n\n\nvar assetList = [\n  {\n    \"AssetID\": \"0001\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"\", \"Registration\": \"Tank 1 \", \"FriendlyNameShort\": \"Toronto\",\n    \"FuelLevel\": \"93.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\":  \"1.4\u00b0C\",\"BatteryValue\" :\" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \" 7365 Litres\", \"OdometerRounded\": \"7365 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\" : \"AAA\",\"VehicleStatusXIdle\":\"XXX\", \"IconColor\": \"green\" },\n  {\n    \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 2\", \"FriendlyNameShort\": \"Edmonton \",\n    \"FuelLevel\": \"96.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\",  \"BatteryValue\" :\" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \" 3930   Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"green\"\n  },\n  {\n    \"AssetID\": \"0003\", \"AssetIcon\": \"TankMarkers/Indicator_yellow.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 3\", \"FriendlyNameShort\": \"Edmonton\",\n    \"FuelLevel\": \"96.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/yellowContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\", \"BatteryValue\" :\" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"3400 Litres\", \"OdometerRounded\": \"3400 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"yellow\"\n  },\n  {\n    \"AssetID\": \"0004\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 4\", \"FriendlyNameShort\": \"Vancouver\",\n    \"FuelLevel\": \"46.0\", \"Heading\": 229,  \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"30290 Litres\", \"OdometerRounded\": \"30290 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  },\n  {\n    \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 5\", \"FriendlyNameShort\": \"Quebec City\",\n    \"FuelLevel\": \"30\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"3930 Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"green\"\n  },\n  {\n    \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 6\", \"FriendlyNameShort\": \"Ottawa\",\n    \"FuelLevel\": \"10\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": \"4500 Litres\", \"Odometer\": \"4500 Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  },\n  {\n    \"AssetID\": \"00012\", \"AssetIcon\": \"TankMarkers/Indicator_yellow.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 7\", \"FriendlyNameShort\": \"Victoria\",\n    \"FuelLevel\": \"5.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/yellowContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C \", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": \"5000 Litres\", \"Odometer\": \"5000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  },\n  {\n    \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 8\", \"FriendlyNameShort\": \"Banff\",\n    \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": \"5000 Litres\", \"Odometer\": \"5000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  },\n  {\n    \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 9\", \"FriendlyNameShort\": \"Calgary\",\n    \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": \"6000 Litres\", \"Odometer\": \"6000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  },\n  {\n    \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 10\", \"FriendlyNameShort\": \"Whistler\",\n    \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"10000 Litres\", \"OdometerRounded\": \"10000 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"10000 Litres\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  }\n];\n\nfor (var i=0; i<3000;i++){\n  assetList.push({\n    \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n    \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 10\", \"FriendlyNameShort\": \"Whistler\",\n    \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n    \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n    \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n    \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n    \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"10000 Litres\", \"OdometerRounded\": \"10000 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n    \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n    \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"10000 Litres\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n    \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n  });\n}\n\n$(document).ready(function () {\n  var template = $.templates(\"#assetTmpl\");\n  template.link(\"#assetdiv\", { assets: assetList });\n})\n\n```\n\n. The first thing would be make the various fixes and changes Paul and I have already suggested, such as here https://github.com/BorisMoore/jsrender/issues/311#issuecomment-280562732.. In Chrome the reduced template takes 1918ms to render and link.\n\nThe following version following our suggestions takes  244ms\n\n```\n{^{for assets}}\n  \n\n\n        {{:Registration}}\n      \n      {{:FriendlyNameShort}}\n\n\n\n{{/for}}\n```\n\nClosing this issue for now.... Hi Mark,\n\nCan you provide some sample data, or better, create a jsfiddle using this template?\n\nI assume you are only using data-link or {^{... data binding in places where your data is going to be modified observably, right? \n\nBTW it might be better to create a JsViews issue to replace this one, since the perf is going to include the initially data-linking, not just the rendering... so it may relate more to JsViews.. Closing all post V1 issues for now.. Hi Andrew - can you create a minimalist jsfiddle to show the issue?  . It really looks like you were not passing in the data object to the render method. It shows data as undefined in the trace above.\n\nBTW in your jsfiddle you have `var tpl = $.template(tplText);` - it should be `$.templates`.\n\nOf course you could have written more simply: \n\n```\nvar tpl = $.templates(\"#tpl\");\nvar html = tpl.render(data);\n\n```\n\n. Closing this. Seems like it was not an actual issue.... I will be adding a few documentation topics soon for creating custom tags, both in JsRender and JsViews, including 'contentCtx'.\n\nMeantime, there are several unit tests available showing examples of its use:\n\nhttps://github.com/BorisMoore/jsrender/blob/master/test/unit-tests/tests-jsrender-no-jquery.js#L2162-L2264. Documention was added for this some time back. http://www.jsviews.com/#tagsapi@contentctx.  (See \"Specifying data context within tag content: the contentCtx option\"). The methods here http://www.jsviews.com/#parentdata and here http://borismoore.github.io/jsrender/demos/step-by-step/11_accessing-parent-data.html\nboth work fine. It does not need to be looping objects. The `#parent` gets the parent view, not the parent of the data. For example:\n\n```\n{{range start=1 end=10 ~outerData=#data}}\n      {{:#parent.parent.data.someProperty}}\n      {{:~outerData.someProperty}}\n{{/range}}\n```  \n\nSpecifically, say...:\n\n```\n{{range start=1 end=10 ~outerData=#data}}\n      {{:#parent.parent.data.start}}\n      {{:~outerData.end}}\n{{/range}}\n```\n. I don't know - it could be due to your code, so I would need to have more context. Can you create a jsfiddle which reproduces the issue? Otherwise, at a minimum you need to debug - break on all exceptions, or on uncaught exceptions, and show the stack trace. And also show your own code calling JsRender. Are you using the render method (JsRender) or the link method (JsViews)?. And what is the template markup in your js_template?. There are two unmatched `` closing tags. (after ``).\n\nIf fixing that doesn't solve the issue, I would need a stack trace... I'm not sure what you mean by reloading the page and updating the page. What is the difference between those actions? How are you reloading/updating?. OK - well you'll need to open a debugger (F12 in chrome, for example) and do some testing, to get more information and understanding, and a stack trace... Also, clear the browser cache completely and see if it still happens.... I wonder if you (or your system) are doing something to modify the jQuery cached data on the feedbackTemplate element. See issue, https://github.com/BorisMoore/jsrender/issues/310, which could be related.\n\nIf the jQuery cached template `$.data(feedbackTemplateScriptElement ).jsvTmpl` is getting removed, it can cause that error you are seeing.\n\nCan you try loading this patched version of jsrender, [jsrender.zip](https://github.com/BorisMoore/jsrender/files/917674/jsrender.zip) and let me know if it fixes the issue, for you? (But still it is better not to ever clear the cached template, since it will have better performance to use the cached copy).. The defensive code against corrupted jQuery cached template on the script container element is included in commit 85. Closing this issue.. Thanks for pointing this out. It seems like there are some markdown rendering bugs on GitHub. I used `` tags etc. rather than `## ` markdown equivalents, because the same content needed to render on https://www.npmjs.com/package/jsrender - and there were differences in rendering markdown in the two contexts. That said you point out some bugs that show up in both places. It looks like they can be fixed by ensuring that `` tags are followed by a blank line (rather than switching to markdown, though that can also work.) So I will not take your pull request and go for the safer approach of adding blank lines in all cases, after headers... It will be included in the next update...\n\nThanks again.. Thanks for this. I'm busy on some other changes which I need to finish before looking at your PR. But I'll look at your changes when I can... See also https://github.com/BorisMoore/jsrender/pull/319#issuecomment-297515010. This is a duplicate of https://github.com/BorisMoore/jsrender/issues/281.\n\nYou can use `$.views.settings.delimiters(...)` (http://www.jsviews.com/#settings/delimiters) to set different delimiters. . Basically JsRender functionality is a superset of Handlebars functionality. It is more flexible and powerful in its support/treatment of expressions in templates.  (And at the same time it is secure against using templates to create side effects or to inappropriately access globals). \n\nFrom a point of view of performance, it is similar to Handlebars for rendering templates, and faster for compiling templates.\n\nThe Mustache-inspired template syntax is similar, thought JsRender syntax is slightly more flexible and complete. \n\nI cannot currently provide a more detailed comparison and study of detailed differences or equivalences, but hope to do so at some point, after publishing the official  JsRender and JsViews V1.0 (which is currently my priority).. Closing this issue.... It seems like JsRender is functioning correctly, and your issue is not coming from JsRender at all. \n\nIt looks like you are using other technologies for generating content - some kind of server rendering with templates? I don't know what the `{%  %}` and `[% %]` markup relates to.\n\nIf changing a class makes the options show up, then your issue involves CSS styles - presumably a CSS stylesheet containing \"chosen-select\" - and associated with the \"HTML template you bought\".  Again, the issue would be with this rather than with  JsRender.. I'll close this as not being a JsRender issue or bug. Please add comments if you have further questions that do concern JsRender usage directly... Thanks.... This seems to be an issue with Chrome. In other browsers it renders without error. In Chrome it errors if you put `while (i<900)`, but if you put `while (i<400)` (or less) it works without error.\n\nYour way of creating the template has 900 * 4 = 3600 `{{: ...}}` tags in a single template. Chrome throws an error while compiling that template - because of some kind of limit they have on JavaScript expressions of the form `ret=\"...\" +((v=...)!=null?v:\"\") + \"...\" +((v=...)!=null?v:\"\") + \"...\" +((v=...)!=null?v:\"\")...` (where you have >7200 such terms added together to produce a single string variable).\n\nI'd suggest you instead use a template along the lines of\n\n```\n\n  {{for cols}}\n    {{:_value}}\n  {{/for}}\n\n```\n\nThen you can render the template with data which has a cols array of 900 items for the columns:\n\n```\nvar data = {\n  height: 220,\n  rowidx: \"a\",\n  ...\n  cols: [\n    {_value: \"AVal\", _className: \"AClass\",  ...},\n    {_value: \"BVal\", _className: \"BClass\", ...}\n    ...\n  ]\n};\n. Closing - since this is not a JsRender bug (really a Chrome bug), and there is a workaround proposed.... Your problem is not with JsRender - which is rendering what you ask it to. You can rewrite as:\n\n    var html = $.render[\"obj\"]([{},{}]);\n    $(\"#TemplateData\").append(html);\n\nThe problem is simply with inserting invalid HTML, on the second line. The browser will try to guess what you mean. \n\nYou probably want to write: \n\n    htmlStr += \" <less than \";\n\nhttps://developer.mozilla.org/en-US/docs/Glossary/Entity\nhttps://www.w3schools.com/html/html_entities.asp\n\nYou can also use\n\n    htmlStr += \"  {{>'<'}} than \";\n\nhttp://www.jsviews.com/#htmltag\n. You can also do\n\n    var escapeHtml = $.views.converters.html;\n    var i = 0, htmlStr =  \"\" , templates = {obj:\"\"};\n      while (i < 10) {\n        htmlStr += \"\" + escapeHtml('\";\n           i++;\n        }\n        ...\n\n https://jsfiddle.net/BorisMoore/z8fqs1yb/8/. I think this can be closed.... I'm travelling at the moment so can't reply until after returning on the 20th. The built-in converters are\n- `{{html:...}}` or `{{>...}}`\n- `{{attr:...}}`\n- `{{url:...}}`\n\nhttp://www.jsviews.com/#convertersapi@html\n\nYou should be able to override them by declaring your own, as in:\n\n```\n$.views.converters(\"html\", myConverterFunction);\n$.views.converters(\"attr\", myConverterFunction);\n$.views.converters(\"url\", myConverterFunction);\n```\n\nHowever the first one   does not work with the current implementation. I'll fix it in the next update. As a  temporary workaround (which will no longer work after the fix) you can instead write:\n\n`$.views.sub._html =  myConverterFunction;`\n\n. This has been fixed in commit 89. You are right, having error messages rendered at the individual tag level, rather than the template/block level, would make for easier debugging, and would conserve more of the correct about from the template rendering. Historically the debugMode(true) was originally at the template block level, and the tag-level onError overrides were not yet implemented. But now that tag-level code is there it is actually possible to change the default debugMode(true) behavior to be at the tag level. I have made that change in my current working version of the next JsViews/JsRender update. It is technically a breaking change, but I think I prefer to change the default behavior rather than introduce an additional new alternative debug mode.\n\nI have attached the working copies of jsrender.js and  jsviews.js. Can you test out whether the change works for you, and let me know if there are any issues?\n\n[jsrender.js.txt](https://github.com/BorisMoore/jsrender/files/1346905/jsrender.js.txt)\n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/1346906/jsviews.js.txt)\n\nThanks.. Excellent. Thanks for testing it!. This feature change has been made in commit 89. You need to specify two-way data binding - with the `:}`\n\n    \n\nThere is a similar example lower in the page:\n\n    \n\nNote that adding explicit targets such a size{} or value{} is only used for one-way binding. So the following is incorrect:\n\n    \n\nI'll add a syntax error message for that.... Syntax error for this included in commit 89. `{{!-- xxx --}}` is correct but `{^{!-- xxx --}}` is indeed a syntax error. Did you think that should be valid syntax?. Ah - well in my thinking, a comment tag is a different tag altogether, and it is not a question of 'commenting out' some other tag. I guess your idea is that you can take any tag such as `{^{:foo}}` and temporarily change it to `{^{!--:foo--}}` by adding `!--` and `--` at the beginning and end.\n\nIn my process I would wrap the whole thing (one or more tags, or other markup) like this: `{{!-- {^{:foo}} --}}`, rather than converting individual tags to a 'commented out' form.\n\nNot sure I want to support `{^{!-- ... --}}` since it means there are two different syntaxes for a comment tag and/or there is a concept of a 'data-linked' comment tag (as opposed to an un-data-linked comment tag) - but in fact comment tags cannot be data-linked. If they could it would imply an instance of a data-linked comment tag, and a life-cycle of events, including dispose... Comment tags are simply removed from the rendered output. They are no longer there when the data-linking phase happens.. There should not be any conflict between JsRender and Angular 2.\n\nI don't work with Angular myself, nor with Typescript. You should be able to use the many JavaScript examples. If you need to convert to Typescript, you'll need to that yourself. \n\nI have not yet created typescript type definitions for JsRender (https://github.com/BorisMoore/jsrender/issues/211) but this may help: https://www.nuget.org/packages/jsrender.TypeScript.DefinitelyTyped/0.1.6. Closing.. Paul's approach is fine as long as you don't need to mix the two levels - as in:\n\n```\nname\nurl\nname\n```\n\nIf you do, then take a look at [Accessing parent data](http://www.jsviews.com/#parentdata) for alternatives, such as:\n\n```\n{{for audio.datas ~url=audio.url}}\n  {{:name}}\n  {{:~url}}\n  {{:name}}\n{{/for}}\n```\nor\n\n```\n{{for audio.datas ~audio=audio}}\n  {{:name}}\n  {{:~audio.url}}\n  {{:name}}\n{{/for}}\n```. Closing this - since the question is answered.. Ah - yes - there is special perf optimization code that was not used in the v1.0.0-beta - and you have revealed a rather obscure bug in that code, due to your unusual mix of declarative and programmatic rendering. Thanks for letting me know...\n\nI will fix the bug in the next update, but there is a workaround you can use immediately which is to set:\n\n    $.views.settings.advanced({useViews: true});\n\nSee  http://www.jsviews.com/#settings/advanced\n\nWith that setting, you should be able to move to any recent version...\nv1.0.0-beta . This has been fixed in release v0.9.90.\n\nIf you still see any issues, let me know.\n\nIt is probably a good idea in your scenario to set useViews to true (`$.views.settings.advanced({useViews: true});` - though with the fix it should still work correctly even if you don't.\n. JsRender is extremely stable, and has been for quite a while.\n\nHowever, if you are referring to the official V1.0 (non beta) release, it is planned to happen concurrently with the V1.0 release of JsViews. Until then, there may be additional bug fixes, but no breaking changes are expected.\n\nJsViews is also very stable. However there are a few APIs and features that do not you have full documentation. They are in the process of being documented - ([here](http://www.jsviews.com/#jsvtagcontrols), for example) - and at the same time these features/APIs are receiving more intensive testing. This is unlikely to lead to any breaking changes for *any previously documented aspects of JsViews*. However there could be some small changes in the new  APIs themselves, as they become fully documented.\n\nJsViews features are very rich/powerful, so providing full documentation and samples does take time. I can't say precisely when this process will be completed - and the two V1.0 releases published, but hopefully in the next 2 or 3 months. The work is progressing well!. JsViews and JsRender have both been released as v1.0.0 (https://www.jsviews.com/#download) - and will shortly be published to npm and to CDN at https://cdnjs.com/libraries/jsrender and https://cdnjs.com/libraries/jsviews. You have the choice between making your client-side data strings encode some characters - and specifically `<`, `>`, `&` - or not. If you decide to encode those characters then you have the separate question of whether to encode them also on the server (and if not, then you will need to unencode when sending to the server, and encode again when fetching).\n\nOn the client if you provide user editing of strings through data-linked inputs etc. then the choice is:\n\n- Don't encode, but never use `{^{:someValue}}` to display strings. Instead use `{^{>someValue}}` or ``, or for two-way: ``, for example...\n- Encode, and use `{^{:someValue}}`  or ``, etc.\n\nThe converters can be the following:\n\n```\n$.views.converters({\n  encode: function dataEncode(text) {\n    // Encode just < > and & - intended for 'safe data' along with {{:}} rather than {{>}}\n    return text != undefined ? text.replace(/[&<>]/g, function(token) { \n      return encodeEnts[token]; \n    }) : \"\";\n  },\n\n  unencode: function(text) {\n  // Unencode just < > and & - intended for 'safe data' along with {{:}} rather than {{>}}\n  return text != undefined ? text.replace(/&(amp|gt|lt);/g, function(match, token) { \n    return unencodeEnts[token]; \n  }) : \"\";\n  }\n});\n```\n\nYour post here made me look more closely at encoding and related XSS or other security issue when users can enter markup strings... I will post back here with an update on this...\n\nNote that the setting of content on a textarea or input is either through markup - in which case encoding of `>` etc. is __*required:*__  ``  or programmatic in which case you are not within HTML markup, so setting input.value = \">\" is correct, and using the HTML character entity is **incorrect**.\n. The next update will include the above encode and unencode converters, to facilitate secure approaches to inserting and removing HTML data from users/the server. Marking this as feature request.. This has been fixed in [release v0.9.91](https://github.com/BorisMoore/jsviews.com/commit/f59020fca27090c7e1d948fc82101ad99d662958).. I will need to work on adding this as a new feature. I'm not sure yet whether to add it to the V1.0 version that is planned soon, or whether to make it post V1.0. But I have a prototype implementation that you could test, and let me know your thoughts.\n\nHere is the prototype (based on my current working version so has some other changes since V0.9.90): \n[jsrender_precompilation_candidate.js.txt](https://github.com/BorisMoore/jsrender/files/1913568/jsrender_precompilation_candidate.js.txt)\n\nHere is how it works.\n\nNew API:\n\n    var preCompiled = $.views.preCompile(...);\n\nwhich does pre-compilation, with eval/new Function calls, with same signature options as $.templates(...): markupString / name, markupString / hash of markupStrings for named templates. \n\nIt returns an object or a hash of *'precompiled template'* objects, which are plain javascript objects, with properties: \n- markup: Markup string, \n- fn: compiled Template function\n- tmplName: Name string\n- template: Hash of *'precompiled template'* objects for subtemplates\n\nYou can also run it without parameters, in a page that has already got any number of registered templates, and it will return the precompiled objects for that page. \n\nYou can run it on the server or in a different time frame, and store the precompiled template objects.\n\nThen at runtime in the browser you can pass exactly the returned object/hash/tree of objects to the normal $.templates method in order to establish the normal template registration, but this will use the pre-compiled functions and will not need to do eval. It will also be faster, and can run on  a page with a a lightweight jsrender.runtime.js with no compilation code, if we make that available. \n\n    $.templates(preCompiled);\n\nOf course you can hand-optimize the compiled functions, `precompiledOb.fn` that you pass to `$.templates(...)`.\n\nUsage example:\n\n```\nvar data = {name: \"Jo\", address: {street: \"1st Ave.\", zip: \"120300\"}};\n\n$.templates({\n    personTmpl: \"Name: {{:name}} {{include address tmpl='addressTmpl'/}}\",\n    addressTmpl: {\n        markup: \"Street: {{:street}} {{include tmpl='zipCode'/}}\",\n        templates: {zipCode: \"Zip code: {{:zip}}\"}\n    }\n});\n\nvar preCompiled = $.views.preCompile();\n//preCompiled.personTmpl.fn = newPersonTmplFn; // Could replace a function by an optimized version\n$.templates({personTmpl: null, addressTmpl: null}); // For  test purposes, unregister templates\n$.templates(preCompiled); // Register templates using precompiled objects\nvar html = $.templates.personTmpl(data);\n```. Yes, you are right - the implementation was incomplete. (It was more of a proof of concept).\n\nHere is an update that should work for a range of scenarios: [jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/1917785/jsviews.js.txt).\n\nIt will work with both JsRender and with JsViews. So even in JsViews, all calls to new Function can be avoided by precompiling.\n\nOne technique for obtaining the compiled object hierarchy that you need to server-render into the page's javascript (or add statically to the HTML page) is to include [`{{jsonview/}}`](http://www.jsviews.com/#samples/tag-controls/jsonview) in a page to render the complete precompiled object hierarchy:\n\n    $.templates(\"{{jsonview/}}\").link(\"body\", $.views.preCompile(tmpl2)); \n\nYou will need this updated jsonview.js, though: [jsonview.js.txt](https://github.com/BorisMoore/jsrender/files/1918186/jsonview.js.txt)\n\nThen  you simply select and copy-paste the rendered object hierarchy to your HTML page and pass is to $.templates() to register the templates:\n\n    $.templates({...});\n\n. Yes, it was skipping all properties of type function (per previous scenarios it was used for).\nSo here is an updated jsonview.js and jsonview.css which should render functions too. \n\n[jsonview.js.txt](https://github.com/BorisMoore/jsrender/files/1922705/jsonview.js.txt)\n[jsonview.css.txt](https://github.com/BorisMoore/jsrender/files/1922616/jsonview.css.txt)\n\nBut it will need to be used with the corresponding updated jsviews.js, which is here:\n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/1922708/jsviews.js.txt)\n\nWith this version you can still opt in to the previous behavior by setting `{{jsonview ... noFunctions=true .../}}`\n. Hi Robbert, just to let you know that I am working more on this potential feature. Current code is of course not yet working completely (the jsviews.js.txt above) but I will keep you posted here of progress..... Unfortunately, I've decided against moving ahead with this feature. It looked promising, but:\n\n- I thought it might provide significant performance gains from elimination of running the full template compilation code in the browser - but it turns out that performance in JsRender for template compilation is not so bad (significantly faster than handlebars compilation) - so the gain is not such a big deal,\n- There are many ways in which on-the-fly compilation can occur after the initial compilation of the top-level templates. This is especially so in JsViews, but even in JsRender, you can for example dynamically set the template for a custom  tag to some string, in its init() event. If you are running code using that tag, then you will need the full jsrender.js (with compilation), not just the 'runtime' - and new Function will get called the first time you render the tag. You could even change the string for every instance, in non-static ways..... I'll try to look into alternatives as some point, but probably not until after getting out the next update (which is overdue).... I'll keep this open now, to track that.... Closing for now, but added an After V1? label. I'll consider reopening at some point. (But no promises :) ...). The syntax for `{{if}}` is `{{if ~PanelSize}} .... {{else}} ... {{if}}`\n\nhttp://www.jsviews.com/#iftag\n\nSo in your case  it would be\n\n```\n\n```\nOr better, perhaps:\n\n```\n\n```\n\nAlternatively you can use ternary expressions:\n\n```\n\n```\n\nor even simpler with a `||`\n\n```\n\n```\n\nIf you are using JsViews data-linking, you can instead use a data-linked expression:\n\n```\n\n```\n. You can access the iterator from within nested blocks using [#getIndex()](http://jsviews.com/#viewobject@getindex). See also http://jsviews.com/#views@itemview (and the rest of that documentation topic).\n\nIn the next update you will be able to do\n\n```\n{{for someStuff start=1 end=5}}\n   true\n{{/for}}\n```\n\nbut it looks as if you need something like:\n\n```\n{{for someStuff}}\n  {{if #getIndex() < 6}}\n    true\n  {else}}\n    false\n  {{/if}}\n{{/for}}\n```\n. Not sure why you put `~Average` - (with a `~`). Is it in the data or is it a helper? You don't show your  data or JSON so I have no idea where Average is defined. I suppose it is higher up in the data object graph, in which case you need to read this:  [Accessing parent data](http://jsviews.com/#parentdata)\n\nMaybe:\n\n```\n{{range start=1 end=5 ~Average=Average}}\n  {{if ~Average >= #getIndex()}}\n    \n  {{else}}\n    \n  {{/if}}\n{{/range}}\n```\n. If `my_variable` is a property of your contextual data object, then you can pass it to a helper like this\n\n    {{:~GetLabel('label_key', my_variable)}}\n\nYou never need to nest `{{:...}}` inside itself. The ... is where you put a code expression such as `myProp + 'x'`, or `~GetLabel(1, 33, 'somestring', some.object.path)`.\n\nBut GetLabel() needs to return its result synchronously, so your ajax fetch result won't be returned correctly. You need to do the ajax fetch before rendering the template.... - or else use  JsViews data-linking to dynamically update the label once your done() returns....\n. Can you give both the full stack - (or show a screen shot that has the call stack displayed) and the actual error **_message_** that is thrown `throw new $sub.Err(message);`. All you are saying above is that an error is thrown after you call `require('jsrender')`. Thanks.\n\nDid you call `npm install` to install the version v0.9.91?. Strange - it should be possible for you to see the actual message string. Can you try to debug where the exception is actually getting thrown, and with what error message - or create some kind of simple repro that I can run...? . All your closing tags for `{{if}}` have been written `{{/fi}}`. It should be `{{/if}}`, of course, to match the opening tag.\n\nFor example: \n\n    {{if optional}}\n        // c\n    {{else}}\n        // d\n    {{/if}}\n\nSurprising that you did not get the same syntax error with v0.9.90. Ah yes, I remember I found a bug in v0.9.90 which would have prevented the syntax error from being thrown in some cases, and which I fixed in v0.9.91.  That would be why you weren't previously getting the error.... You have\n\n    (Hello {{:nickname\"}})\n\n(extra `\"`) instead of\n\n    (Hello {{:nickname}})\n\nI assume that is the problem. . It looks like providing generic support for unicode property names would be difficult without significant perf / file size cost, at least judging by this https://mothereff.in/js-variables#%E0%B2%A0_%E0%B2%A0, and the code behind it.\n\nProviding extensibility is possible, so people can add specific unicode characters they want to support, like you did, via\n\n    $.views.settings.advanced({addJsNameChars: \"\\\\u00E4\\\\u00E5\\\\u00F6\\\\u00C4\\\\u00C5\\\\u00D6\");\n\nor similar.\n\nBut given the fact that you can do `{{:myObj[\"some\u00c5prop\u00c4erty\"]}}`, as you say, I'm not sure about adding the setting... It still requires setting charactars manually, character by character.... Yes, I am in two minds about doing this, given the test matrix, need to document etc. but FWIW the feature would be like this:\n\nAdditional code at line 164\n\n    var uW = value && value.addedJsNameChars;\n    if (uW) {\n        uW = \"[\\\\w\" + uW + \"$\";\n        rPath = new RegExp(\"^(!*?)(?:null|true|false|\\\\d[\\\\d.]*|(\" + uW + \"]+|\\\\.|~(\" + uW + \"]+)|#(view|(\" + uW + \"]+))?)(\" + uW + \".^]*?)(?:[.[^](\" + uW + \"]+)\\\\]?)?)$\", \"g\");\n        rParams = new RegExp(\"(\\\\()(?=\\\\s*\\\\()|(?:([([])\\\\s*)?(?:(\\\\^?)(~?\" + uW + \".^]+)?\\\\s*((\\\\+\\\\+|--)|\\\\+|-|~(?!\" + uW + \"_])|&&|\\\\|\\\\||===|!==|==|!=|<=|>=|[<>%*:?\\\\/]|(=))\\\\s*|(!*?(@)?[#~]?\" + uW + \".^]+)([([])?)|(,\\\\s*)|(\\\\(?)\\\\\\\\?(?:(')|(\\\"))|(?:\\\\s*(([)\\\\]])(?=[.^]|\\\\s*$|[^([])|[)\\\\]])([([]?))|(\\\\s+)\", \"g\");\n    }\n    return value\n\n(Here it is: [jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/2641304/jsviews.js.txt))\n\nUsage:\n\n    $.views.settings.advanced({addedJsNameChars: \"\\\\u00E4\\\\u00E5\\\\u00F6\\\\u00C4\\\\u00C5\\\\u00D6\"});\n    var data = {foo.some\u00c5prop\u00c4erty:444};\n    ...\n\n. Ah, I had missed your comment [above](https://github.com/BorisMoore/jsrender/issues/342#issuecomment-443857654) (the page had not been refreshed when I wrote my response above.)\n\nYes, I hear you... I'll let it mature a bit before deciding. Meantime, if you can test fully with the update I included above that would be helpful. Let me know if you see any issues/bugs.\n\n\n. I have an alternative which I am looking at. I'll probably send you a new patch to test, in the coming days, rather than testing the  version above.... Here is an update: \n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/2651092/jsviews.js.txt)\n\nI managed to figure out a way of allowing all unicode chars, without needing to specifically specify the character codes. The default is not to support unicode chars in names, but you can write\n\n    $.views.settings.advanced({unicodeChars: true}); // support all unicode chars in JavaScript names\n\nor else limit to specific ones:\n\n    $.views.settings.advanced({unicodeChars: \"\\\\u00E4\\\\u00E5\\\\u00F6\\\\u00C4\\\\u00C5\\\\u00D6\"});\n\nYou can't have unicode characters on helpers, or helper properties, tag names or tag properties, etc. Only on properties of data passed in to the link() or render() method.\n\nThe generic unicode version, passing true, is done basically by replacing\n\n    /[\\w]*/\n\nby \n\n    /[^\\s~/\\x00-\\x23\\x25-\\x2D\\x3A-\\x40[\\]\\\\`{}|]*/\n\nso word characters are any characters other than the specified ones.\n\nIt adds 1% to the filesize (of jsrender.min.js), which I hesitate about, but at least the usage is easy now. (Assuming it works correctly!) \n\nSo if you are able to test it , it would be helpful, particularly to make sure it does indeed cover all unicode characters as expected (or at least test with a good range of characters...). \n\nI am still considering whether or not to publish this feature... \n\n. Excellent. That is very  helpful!\n\nI did some testing with that, and all the characters seem to work. There was still an error from JsViews because of `{{:a\u2e2fa}}` still being in the template markup. So I removed it.\n\nAlso, of course you need the line:\n\n    $.views.settings.advanced({unicodeChars: true});\n\nbefore calling `$.templates(...)`\n\nI also had  some issues when using a file that did not have the BOM (with UTF-8 encoding).\n\nBut with those changes, the template rendered completely.... Here is an updated jsviews.js and jsrender.js and a copy of my version of your test page:\n\n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/2656016/jsviews.js.txt)\n[jsrender.js.txt](https://github.com/BorisMoore/jsrender/files/2656017/jsrender.js.txt)\n[testUnicode.html.txt](https://github.com/BorisMoore/jsrender/files/2656026/testUnicode.html.txt)\n\nThe test page works for me in Chrome and in Firefox, but not in IE, Edge, Safari... It seems that some of the unicode characters trigger javascript errors in those browsers. With a reduced set of unicode characters it works in all those browsers.\n\n. Yes, I agree with your analysis.\n\nOption 2 is probably my preference.\n\nOption 3 makes me nervous about possible bugs, especially doing it just after releasing v1.0.0 which is hopefully stable.\n\nSo option2 is a more conservative approach, given that this feature is unlikely to be used/needed by many users...\n\nI'll post a version of approach 2 soon.. \nHere is an update where you load the jsrender-unicode.js file after jsrender.js/jsviews.js, before calling `$.templates(...)` to compile any templates that have unicode characters in them.\n\nLet me know if it works as expected. Thanks!\n\n[jsrender-unicode.js.txt](https://github.com/BorisMoore/jsrender/files/2660933/jsrender-unicode.js.txt)\n[jsrender.js.txt](https://github.com/BorisMoore/jsrender/files/2660923/jsrender.js.txt)\n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/2660924/jsviews.js.txt)\n\n. Ah - sorry, I must have accidentally uploaded an intermediate version. Thanks for pointing out the stale code/comments, too!\n\nSo hopefully this is correct now. The regEx expressions are close to yours, but not quite identical. Let me know if you have any concerns, or see any issues.\n\n[jsrender-unicode.js.txt](https://github.com/BorisMoore/jsrender/files/2664498/jsrender-unicode.js.txt)\n[testUnicode.html.txt](https://github.com/BorisMoore/jsrender/files/2664499/testUnicode.html.txt)\n[jsviews.js.txt](https://github.com/BorisMoore/jsrender/files/2664502/jsviews.js.txt)\n[jsrender.js.txt](https://github.com/BorisMoore/jsrender/files/2664503/jsrender.js.txt). I'll include this in the next update  (v1.0.1). Fixed in commit v1.0.1. Can you show the code you used to create an array with the index not starting with 0?\nBetter, can you create a code sample using JsRender which shows what you are doing? The screenshot of the array is not enough...\n. JsRender works in the client with javascript objects and arrays. A javascript array, such as [a, b, c] starts with index 0, and has a length attribute. Otherwise it is not an array.\n\nWhatever you have on the backend, it must lead to specific javascript objects and arrays in the browser. This is not a valid JsRender issue unless you can provide a simple javascript repro of your problem... . Just curious - Are you using JsRender templates on the server on yii2? If so, how? Did you use a yii2 extension or asset that integrates JsRender? . http://joxi.ru/krDqVQXsEQ1QPm - this is returning an array `[{id=1, ....}, {id=2, ....}, ...]`\nhttp://joxi.ru/DrlzYW4tvYM9b2 - this is returning an object (a hash) `{1: {id=1, ....}, 2: {id=2, ....}, ...}`\n\nYou can render using `{{props items}}` to iterate over the keys of an `items` object (hash)\nYou can render using `{{for items}}` to iterate over the keys of an `items` array.\n\nSee https://www.jsviews.com/#propstag@iterate-hash.. Good to know.... I assume that your scenario is not with Node.js on the server, but in the browser (since you talk about globally defined $). Are you using Webpack, or Browserify? If not, then I am not sure where the require() API is coming from. \n\nIn Webpack or Browserify, then what you describe is by design. You should use `require('jsrender')` if $ is defined globally, or  `require('jsrender')($)` if it is not.\n\nSee https://www.jsviews.com/#node/browserify@jsrender and https://www.jsviews.com/#node/webpack@jsrender\n\nIf you have a local copy of jQuery, $, but there is also a global one, and you want to use the local one rather than the global one, you can temporarily hide the global one, as is done in this unit test, for example:\n\nhttps://github.com/BorisMoore/jsrender/blob/master/test/browserify/2-unit-tests.js#L14\n\nBTW did you see a change in behavior between v1.0.2 and previous versions v1.0.1 or v1.0.0?. If jQuery is defined globally, then require('jsrender') returns the global jQuery object. If not then it returns a function to which you can pass a local jQuery object, or call without parameter to use jsrender without jQuery, (in which case it returns the jsrender object).\n\nSo if you call require('jsrender')($) and $ is actually global, then you are calling $($). I can't intercept that code. It does not return $,  so you can't use the return value - but $.templates() etc will all work correctly, and nothing has been broken. jsRender does in fact still work....\n\nThe APIs were designed to optimize the most common case, which is to  simply call require('jsrender'), when $ is global. But if in your case you don't know whether $ is global, then you have to use the more complicated require('jsrender')(...) in some cases..... No problem.... A `` tag does not render but its contents are supposed to be valid HTML markup, and are parsed and validated by the browser. That means that for both `` and `` tags, the browser may modify the contents (to try to make valid HTML), and so when the jsrender code calls `innerHTML` to get the template string, the result may be quite incorrect.\n\nTry commenting out the  line 1112 in jsrender.js, and use the following template:\n\n```\n\n\n{{>myHTMLstring}}\n\n```\nOnly `",
    "mesetar": "sorry, it was a simple solution\n. this happens on other occasions too!\nhtml\n<a href=\"/classifieds/favorite.html?id=${id}\" class=\"favstar tipsyn\" rel=\"${id}\" title=\"Dodaj med priljubljene\"></a>\noutputs\nhtml\n<a title=\"Dodaj med priljubljene\" rel=\"518\" class=\"favstar tipsyn\" href=\"/classifieds/favorite.html?id=$%7Bid%7D\"></a>\n. but in my case the {{ doesn't get processed.... maybe cause I am fetching the html from json response\n. strange thing is, that it is working well with jquery's (yours) tmpl...\nif I replace\njavascript\ntpl = $(tpl).render(AD);\nwith\njavascript\ntpl = $.tmpl(tpl, AD).html();\nworks perfectly\nthe problem is...that is 2/3 slower! instead of ~70ms i get ~170ms\n. lol, thees git buttons... confusing at times [:D]\nnow:\nI checked the HTML string I get from ajax response and it is OK...I even tried unescape it...\nhere is my tpl string\nhtml\n<span> <li id=\"c_${id}\" class=\"tiles ${sponsored} ${region} ${area_id} ${mine}\"> <div class=\"ad_wrapper\"> <div class=\"mine corner_sticker\"></div> <div class=\"chk_classified_box ccol\"> <input class=\"optmenu_chk\" type=\"checkbox\" name=\"chk_classified\" value=\"${id}\" /> <a href=\"/classifieds/favorite.html?id=${id}\" class=\"favstar tipsyn\" rel=\"${id}\" title=\"Dodaj med priljubljene\"></a> {{if mine !== ''}}<a href=\"/oglas/${slug}.html?edit=true\" class=\"edit_ad tipsyn\" rel=\"${id}\" title=\"Popravi oglas\"></a>{{/if}} </div> <div class=\"photo_box ccol\"><a href=\"/oglas/${slug}.html\" title=\"${title}\" rel=\"${slug}\" class=\"appad\"><img src=\"{{if photo}}html ${photo}{{else}}/media/no_photo.png{{/if}}\" class=\"photo\" alt=\"${slashes_title}\" /></a></div> <div class=\"data ccol\"> <p class=\"carea\">${area}</p><span class=\"small when\" title=\"Oddano: ${created}\">${tpl_days_ago()}</span> <h3><a href=\"/oglas/${slug}.html\" class=\"title appad\" title=\"${title}\" rel=\"${slug}\">${title}</a></h3> <p><span class=\"summary gray\">${summary}</span></p> <div class=\"usr_data\"> <a href=\"/oglasi/uporabnik/${OWNER.id}.html\" class=\"tipsyn appclassifieds\" title=\"Prika\u017ei vse oglase uporabnika\" >${OWNER.name}</a><br /> <span class=\"small\">${OWNER.address} - ${OWNER.postal} ${OWNER.city} <small class=\"distance\">(<a title=\"Zra\u010dna razdalja\" class=\"set_location distance tipsyn\">${tpl_distance()}</a>)</small></span> </div> <span class=\"cviews\"><i>\u0160tevilo prikazov: </i><b class=\"tipdata\">${views}</b></span> </div> <dl class=\"ccol\"> <dt>Podro\u010dje</dt><dd>${area}</dd> <dt>Prodajalec</dt><dd>${OWNER.name}</dd> <dt>Lokacija</dt><dd><span title=\"<small>Zra\u010dna razdalja:</small> <b class='distance'>${tpl_distance()}</b>\" class=\"tipsyn\">${OWNER.city}</span></dd> <dt>Cena</dt><dd><b>${f_price}</b></b></dd> </dl> <div class=\"price_box ccol\"><h4>${f_price}</h4></div> <div class=\"clear\"></div> </div> </li> </span>\n. you might be right that the problem is on my part... but how is that (in my case) tmpl is working OK and render is not?\nI tried to make a testcase that behaves the same way as my app, but it works on js fiddle\nhttp://jsfiddle.net/cKW4U/11/\nand just to give you context more accuarate version\nhttp://jsfiddle.net/R4k9u/\n. Great! thank you! You are the man!\nprecompiling did herlp a lot! instead of 70ms I get now <20ms! Plus the photos work too ;)\nThanks again!\n. ",
    "dvdotsenko": "Looks like one of [user, action, old, new, reason] property names (i am guessing \"new\") cannot be read as object.property. changed all property reads to object[\"property\"] and all renders well.\nFalse alarm.\n. ",
    "roystone": "I am having same issue in wordpress where i m trying to use \n$(\"#foo\").carouFredSel({\n    scroll      : {\n        onBefore    : function( data ) {\n            data.items.old.removeClass( \"active\" );\n        },\n        onAfter     : function( data ) {\n            data.items.new.addClass( \"active\" );\n        },\n        onEnd       : function() {\n            $(this).addClass( \"at-end\" );\n        }\n    }\n});\nbut the data.items.new.addClass( \"active\" ); new having issues in ie8 its perfectly working in IE9 IE10 and FF Safari etc, any help much appreciated.\n. ",
    "bradintheusa": "I spent a similar hour so +1 vote\n. ",
    "defunctzombie": "I do realize a custom helper tag could be used but I figured a special case for undefined might be nice.\n. Would it not be useful to make it default behavior that undefined === \"\" ? Seeing the word undefined seems a bit out of place.\n. Awesome! Yea, I was using a custom helper tag before to just check for undef. Having empty string be the default is much preferred :) Thanks for the quick response.\n. @danlevan I think @BorisMoore said that he has a fix for this and it will be released soon.\n. I think the examples are fine and much better than out of date documentation. Like @BorisMoore said, he isn't ready yet so I don't see what opening an issue on the matter will do. It is an open project that you are free to document if you want. Open source != meet your every whim and fancy :)\nI appreciate that the project continues to exist at all after jquery templates was deemed \"deprecated\".\n. Can't you accomplish this with css pseudo elements?\n. ",
    "8lueberry": "Great for undefined but when {{my_var}} is int 0, it displays an empty string.\n. ",
    "jeffrose": "I had considered that approach but was hoping to avoid introducing the logic of when to wrap an array and when not. I can make it work though. Thanks.\n. Yup, totally overlooked it. Thanks.\n. Follow-up question... In that example the template is being referenced by element id. Is it possible to reference a template that has already been compiled using $.template?\n. Thanks!\n. Along the same line, it would be nice if JsRender exposed itself as an AMD module so asynchronous loaders like RequireJS and curl.js can use it. jQuery now registers itself as an AMD module as of version 1.7.\n. Glancing through the code, it looks like if jQuery is present, methods are attached to $, otherwise they're attached to a custom object. I would think in order to do AMD registration, methods would need to be attached to the custom object under both circumstances and that object would be the one returned.\njavascript\nrequire( [ 'jsrender' ], function( jsrender ){\njsrender.render[ 'myTemplate' ]( myData );\n} );\n. Is the compiled template available somewhere? In Rhino, you could do something like this:\n``` javascript\n// Load jsrender\nload( \"jsrender.js\" );\n// Read template file\nvar template = readFile( \"myTemplate.jsrender\" );\n// Compile template\njsviews.templates( \"myTemplate\", template );\n// Access compiled template\nvar myCompiledTemplate = ; // ???\n// Write compiled template to file\nserialize( myCompiledTemplate, \"myCompiledTemplate.js\" );\n```\n. I was a bit hasty with my previous example, but having said that this should work for anyone who is interested:\n``` javascript\n// Load jsrender\nload( \"jsrender.js\" );\nvar\n    // Read template file\n    template = readFile( arguments[ 0 ] ),\n// Compile template\ncompiled = jsviews.templates( template ),\n\n// Uneval compiled template to string\ncode = uneval( compiled ),\n\n// Create file for compiled template code\nout = new java.io.FileWriter( arguments[ 1 ] );\n\nout.write( code, 0, code.length );\nout.flush();\nout.close();\nquit();\n```\nAssuming you name this code precompile.js you would run it in Rhino by executing:\njava -cp js.jar org.mozilla.javascript.tools.shell.Main precompile.js myTemplate.jsrender myTemplate.js\n. Even with my updated example, there are a couple changes that need to happen for the code to run.\nThere are references to variables that no longer exist within renderContent() once the compiled template is separated from the rest of the code. Namely...\n- TRUE\n- FALSE\n- View\nTRUE and FALSE should obviously be true and false. View requires that jsv be recreated as it could either be window.jsviews or $.views. Then View can be extracted from it.\nIf those references were updated, this issue would be one step closer to a resolution.\nThe only other munging I've had to do deals with quirks in Rhino that someone using Node would not have.\n. @BorisMoore I am trying to avoid tying our use of JsRender to jQuery. That being said, I notice you're setting a self variable in renderContent() to this. What are the expected values of this?\nIt looks $.fn is one expected value since you're checking for a .jquery property (correct me if I am wrong). What is the expected value if jQuery is not present?\n. Agreed. The ability to hook into the jsrender error handling would be useful.\n. Thanks. I will try this out next week and let you know.\n. @stonecourier I feel your pain. I work for a large banking firm and IE7 is still the most popular browser that visits our sites, followed closely by IE8. While we like to avoid adding code to polyfill feature gaps in older browsers, performance is still a concern.\n. @wookiehangover @stonecourier The Handlebars pre-compiler is not that complex. You could easily use it as a guide to create a pre-compiler for virtually any templating library. \n. @BorisMoore Unless I've misunderstood, it's not entirely true you can \"just get the compiled template function, put it in a js file, and point to it.\" Using the code I mention in #30, the resulting file looks like this once beautified:\njavascript\n({\n    markup: \"<div class=\\\"foo\\\" />\",\n    tmpls: [],\n    links: [],\n    // renderContent\n    render: function (data, context, parentView, key, isLayout, path, onRender) {\n        var i, l, dataItem, newView, itemResult, parentContext, tmpl, props, swapContent, mergedCtx, dynCtx, hasContext, self = this,\n            result = \"\";\n        if (key === TRUE) {\n            swapContent = TRUE;\n            key = 0;\n        }\n        if (self.tagName) {\n            tmpl = self.tmpl;\n            if (context || self.ctx) {\n                mergedCtx = {};\n                if (self.ctx) {\n                    $extend(mergedCtx, self.ctx);\n                }\n                if (context) {\n                    $extend(mergedCtx, context);\n                }\n            }\n            context = mergedCtx;\n            props = self.props;\n            if (props && props.link === FALSE) {\n                context = context || {};\n                context.link = FALSE;\n            }\n            parentView = parentView || self.view;\n            path = path || self.path;\n            key = key || self.key;\n            onRender = parentView && parentView._onRender;\n        } else {\n            tmpl = self.jquery && (self[0] || error(\"Unknown template: \\\"\" + self.selector + \"\\\"\")) || self;\n            onRender = onRender || parentView && parentView._onRender;\n        }\n        if (tmpl) {\n            if (parentView) {\n                parentContext = parentView.ctx;\n                dynCtx = parentView.dynCtx;\n                if (data === parentView) {\n                    data = parentView.data;\n                    isLayout = TRUE;\n                }\n            } else {\n                parentContext = $viewsHelpers;\n            }\n            hasContext = (context && context !== parentContext);\n            if (dynCtx || hasContext) {\n                parentContext = $extend({}, parentContext);\n                if (hasContext) {\n                    $extend(parentContext, context);\n                }\n                if (dynCtx) {\n                    $extend(parentContext, dynCtx);\n                }\n            }\n            context = parentContext;\n            if (!tmpl.fn) {\n                tmpl = $templates[tmpl] || $templates(tmpl);\n            }\n            if (tmpl) {\n                onRender = context.link !== FALSE && onRender;\n                if ($.isArray(data) && !isLayout) {\n                    newView = swapContent ? parentView : (key !== undefined && parentView) || View(context, path, parentView, data, tmpl, key, onRender, TRUE);\n                    for (i = 0, l = data.length; i < l; i++) {\n                        dataItem = data[i];\n                        itemResult = tmpl.fn(dataItem, View(context, path, newView, dataItem, tmpl, (key || 0) + i, onRender), $views);\n                        result += onRender ? onRender(itemResult, tmpl, props) : itemResult;\n                    }\n                } else {\n                    newView = swapContent ? parentView : View(context, path, parentView, data, tmpl, key, onRender);\n                    newView._onRender = onRender;\n                    result += tmpl.fn(data, newView, $views, returnVal);\n                }\n                return onRender ? onRender(result, tmpl, props, newView.key, path) : result;\n            }\n        }\n        error(\"No template found\");\n        return \"\";\n    },\n    name: undefined,\n    is: \"tmpl\",\n    fn: (function (data, view, j, b, u) {\n        var j = j || jsviews,\n            ret;\n        try {\n            return \"<div class=\\\"foo\\\" />\";\n        } catch (e) {\n            return j._err(e);\n        }\n    })\n})\nEven with the latest version of jsrender, there are variable references in the code, namely in renderContent(), that no longer exist once this file is separated from the library. For example, TRUE, FALSE, View, $viewhelpers, etc. If renderContent() re-declared jsv inside of it and then referenced what it needed from there, that would likely solve the problem. Currently though, there is some post-compilation munging that needs to take place.\n. ",
    "dswitzer": "If not clear, this syntax would not require setting the $.views.allowCode to true.\n. I should have done this first, but it actually looks like that functionality is basically there:\n<div class=\"base{{#if varName eq='None')}} none{{/if}}\">{{=varName}}</div>\nThis really needs to be documented (along with the other values (ne, lt, gt, le, ge.) Also, it would be more intuitive if the \"=\" sign wasn't needed, but that would probably complicate the hash parsing engine too much.\nAlso, I think \"lte\" and \"gte\" would be better names than \"ge\" and \"le\". The vernacular \"lte\" and \"gte\" seemed to be more common in other languages I've seen. \n. @BorisMoore:\nWould you consider this syntax \"stable?\" I just want to know whether I need to dictate in my code whether or not this syntax could change in the official release.\n. @BorisMoore:\nThanks for the update!\n. ",
    "madaz": "Not sure if best place but I am converting from tmpl to render \nI am trying to do a number eq without having to write a custom tag as there seems to be a bug as its trying to compare a number to a string\n(Using jsRender version as at 24-Oct-2011)\nWhen passing a number to the eq function the internal hash.eq does not contain the number passed in\n{{#if $itemNumber eq=1}}First{{/if}}\nIf you pass a number in quotes, internally hash.eq contains value but as a string, so the condition is never equal.\n{{#if $itemNumber eq='1'}}First{{/if}}\n. Thanks, Just had to write some unit tests around jsrender to catch all your refactring.\nAll my tests pass. I can also now also do {{#if arr.length > 0}} which I had to do before with a custom helper.\nHow do you do multiple conditions without nesting? {{#if}}  e.g. {{#if a===b && c !== d}}\n. ",
    "jfmoy": "You can already do it, and it is documented: http://borismoore.github.com/jsrender/demos/step-by-step/06_template-composition.html\n. ",
    "DL1CB": "Cool Bananas...\n. ",
    "jrburke": "If you have questions on how to pull in the AMD registration, feel free to let me know. Here is a umdjs example that may be applicable here: https://github.com/umdjs/umd/blob/master/returnExports.js\n. ",
    "Redsandro": "\nI may not look more closely at AMD until JsViews and JsRender both get to Beta.\n\nAny new developments on this?\n. This is a very nice example. Thank you. :+1: \n. ",
    "perosb": "same issue when attributes contain @\nf.ex. when using json.net to convert a xml structure it adds @ to all attributes\n. ",
    "Ridermansb": "Hello, I just send you an email.\nI was using jQuery templates, but removed my project and started to use the\nJsRender.\nOn Thu, Nov 10, 2011 at 4:03 PM, Boris Moore \nreply@reply.github.comwrote:\n\nAre you using both jsrender.js and jquery.tmpl.js in the same page?\njsrender is 'next-generation' jQuery templates, and does not work\n'side-by-side with jquery.tmpl. There will be collisions...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/19#issuecomment-2698703\n. \n",
    "kevb": "Quite right, it seems the version we are using was from before those fixes...\nThanks!\n. ",
    "sterlingkoch": "Worked.  Thanks, Boris!  I think most of this is just my inability to transfer some minor syntax changes from jquery templates to jsrender.\n. ",
    "ryanttb": "Great to hear! I don't really see a reason to keep this issue around so I'll close it now.\n. ",
    "pamelafox": "Thanks! You can close this issue, or perhaps leave it as a reminder to document that/make a demo of it.\n. Ah, got it, now I understand what that code was doing. That change works. Thanks!\n. Thanks for confirming that. I'll go through and change my data/templates accordingly.\n. ",
    "gcornejo": "Ok, thanks!! my bad\n. ",
    "lagosr": "With the latest release of Chrome for windows, they are forcing manifiest version 2 now, which means template pre-compilation is needed (barring use of an iframe, and use of a sandbox) \nhttp://developer.chrome.com/extensions/manifestVersion.html\nBorris, any chance of speeding up the availability of a pre-compilation tool?\n. The best solution is to provide a pre-compilation tool so that we can still get the perf benefit for of the compilation. \nWith the release of Chrome 23 for windows, manifest version 2 is now required. \nAny chance of getting a tool build quickly to solve this Borris?\n. ",
    "bkimmel": "You can totally use jsRender to do templates in Node...I've been doing it using just one simple trick;  instead of running it as is, declare an empty object and shim it in jsRender's anonymous function like so; \nvar jsR = {};\n(\n  //all the jsRender.js code.\n)(jsR, null);\nNow you can render templates in Node with this awesome library all night long\nvar msg = {\"greeting\" : \"helloworld\"}\njsR.jsviews.templates({\n        exampleTemplate: \"span {{:greeting}} /span\"\n});\nconsole.log( jsR.jsviews.render.exampleTemplate( msg ) ) //logs: span helloworld /span\nNow you get to use jsRender in Node. game, set, match...if there is really enough demand, I would be happy to try and set this up as an npm package or something so you can just require() and shoot, let me know.\n. ",
    "jeremychone": "+1 on this. I did a little lesscss and handlebars compiler (http://britesnow.com/html5/jcruncher) and would be happy to add jsrender support. \nAlso, we would need a jsrender-runtime.js, very small, with just the \"runtime\" similar to handlebars-...runtime...js. (handlebars runtime is 3KB). \n. Ok, make sense if it has become standard notation.\n. Ok, but {{for ... /}} is also use for loop no? \nyes, I have seen #151 and this is where I got the {{for #data...}} but it still look odd to look {{for ...}} as it looks to be use for loop/each as well. \nAm I missing something? \n. Cool, either way  is fine with me now that I know the {{for #data ... /}} is the right way of doing it. \nI understand the language consistency issue, however, for outside developers the lack of {{include ... /}} might be more distracting than the lack of consistency between the tags. \nBut I agree, not a easy problem to takle, and taking time to think about this one is good.\n. I think the confusion came from the fact to use \"for\" to do \"include\" I think it would much clearer to provide at least an alias like \"{{include tmpl='#headerTeamplate'}}\"\n. Great.\n. Thanks, this would be great. \nWe have done some experiments with the sandboxing approach and it works, but it is extremely inconvenient to setup and use. I also think it has pretty bad performance and architecture implications as the data and result HTML needs to cross sandbox boundaries, and .render needs to be async. It also probably brakes the whole JSView binding side of things.  \nIf JSRender could work in a \"non-eval\" mode it will a great differentiator for JSRender at least for Chrome Extension and Apps where robust templating engine is really a must, and well worth the non-eval performance impact (that should be relatively minor and much lower than the sandbox alternative anyway). \nFeel free to ping me if you need any more info. Let me know if there is anything we can do to help. \n. The problem of pre-compilation is that it really slowdown the workflow, in our case, for a negligible performance benefits. \n. Make sense. We, at http://britesnow.com/brite are looking forward to the official beta. Right now, it is hard to push for JSRender as it has not reached a real release state yet. So, yet, a solid beta is the top priority for us, we can precompile JSRender if needs be. \n. Great, I have done a little executable .jar, jcruncherEx.jar (http://britesnow.com/html5/jcruncher) which compiles .less and handlebars using Rhino. I would be happy to add jsrender support. \nThe great thing about this little executable, is that it can be used in command line with the \"-i\" interactive mode, or in the build ant or maven as well. And both can use either the full instruction in the command line, or take the jcruncher.cfg file. Anyway, very convenient and team/build/repository friendly, and I would be happy to add jsrender support. \nSo, one thing that would be good, would be to have a jsrender-runtime.js (similar to handlebars-...runtime...js) which just have the runtime side of the jsrender.\n. Great, ping me anytime. \nFYI: The precompile steps have become the standard way we run our template now. It allows us to simplify and optimize the deployment, and with the little tool it is transparent.\n. ",
    "gtwilliams03": "I think this would also be helpful for using jsRender with the Twitter https://github.com/twitter/typeahead.js/ plugin.  It requires a precompiled template (\"template\" property) and a templating \"engine\" (see ENGINE below).  I would love to use JsRender for this - but I might need to use Hogan in parallel since I can't figure out how to get the jsRender templating engine to work with this.\nTemplate Engine Compatibility\nAny template engine will work with typeahead.js as long as it adheres to the following API:\n// engine has a compile function that returns a compiled template\nvar compiledTemplate = ENGINE.compile(template);\n// compiled template has a render function that returns the rendered template\n// render function expects the context to be first argument passed to it\nvar html = compiledTemplate.render(context);\nCheck out Hogan.js if you're looking for a compatible mustache templating engine.\n. Boris:  Simple and elegant - just like your whole jsRender system.  It worked like a charm and now I am using jsRender with the Twitter typehead.js plugin.\n. @BorisMoore Thank you for your endless efforts to help us all out!  I am copying in a sample of what I am using with Twitter typeahead.js which has worked very will and implements jsRender directly (I tried to slim down lots of stuff that was specific to my project to make this a pretty generic example):\n[This code updated by BorisMoore based on discussion below]\n``` javascript\nvar jsRender = {\n    compile: $.templates\n};\n$(\"#txtTypeahead\").typeahead({\n    limit: 15,\n    remote: {\n        url: \"/Home/Lookup?term=%QUERY\",\n        maxParallelRequests: 2,\n        beforeSend: function (jqXhr, settings)\n        {\n            var temp = String($(\"#txtTypeahead\").val());\n            if (temp.length > 3)\n            {\n                $(\"#txtTypeahead\").addClass(\"LoadingBackground\");\n                return true;\n            } else\n            {\n                return false;\n            }\n        },\n        complete: function ()\n        {\n        },\n        filter: function (data)\n        {\n            $(\"#txtTypeahead\").removeClass(\"LoadingBackground\");\n            // filter the returned data\n            var ret = [];\n            if (data != null && data.length > 0)\n            {\n                for (var i = 0; i <= data.length - 1; i++)\n                {\n                    var item = data[i];\n                    ret.push({\n                        value: item.Matter,\n                        data: [item.Matter, item.Title],\n                        hasData: item.Matter != null || item.Title != null\n                    });\n                }\n            } else\n            {\n                ret.push({ value: \"\", data: [], hasData: false });\n            }\n            return ret;\n        },\n        cache: true,\n    },\n    template:\n        \"\"\n            + \"{{if hasData}}{{:value}}{{else}}No records located.{{/if}}\"\n        + \"\",\n    engine: jsRender\n});\n```\n. @BorisMoore Here is what I had in my project:\njavascript\nvar jsRender = {\n    compile: function (template) { return $.templates(template); }\n};\nAnd thank you for the simplified template format! (Of course, I should have known that...)\n. @BorisMoore I changed the statement above to your suggestion, and it worked just fine:\njavascript\nvar jsRender = {\n    compile: $.templates\n};\n. I have the same issue with #index+1 (or just #index for that matter...) rendering with an underscore (and a much different value) in an {{if}}{{/if}} statement.\nThis:\n<tr rownumber=\"{{#index+1}}\">{{:SomeData}}</tr>\n{{if SomeMoreData != \"\"}}\n<tr samerownumber=\"{{#index+1}}\">{{:SomeMoreData}}</tr>\n{{/if}}\nrenders to:\n<tr rownumber=\"1\">data....</tr>\n<tr samerownumber=\"_261\">some more data...</tr>\nHelp?  Shouldn't #index+1 render to the same value each time you use it?\n. Sorry I meant {{:#index}} and {{:#index+1}} in my example above \n. @BorisMoore Thank you for the well-reasoned explanation.  I changed my in-view references to #parent.index and all is well.  Many thanks for this extremely valuable project.  I am using jsrender pretty extensively on a couple of sites and the performance and ease of use is readily apparent!\n. I was not getting a result using {{:#get(\"array\").data.length}} - I needed to write a helper function to return the length of my array:\n$.views.helpers({\n        BoxCount: function ()\n        {\n            return ResponseData != null && ResponseData.length > 0 ? ResponseData.length : 0;\n        }\n    });\n. I would start by removing the space between the {{ and \"if\" in your template so that the \"if\" is immediately adjacent to the curly brackets (i.e., {{if x == y}}{{:ftype}}{{/if}}).  The browser is converting your \"if\" to property of a tag if=\"\"\n. ",
    "madantamang": "i need help \nhttp://stackoverflow.com/questions/25237610/how-to-use-twitter-typehead-js-with-jsrender-compile-function\n. ",
    "ghost": "I have same problem any luck with this issue?\nRight now I can only use the code like: {{=$itemNumber-1 undef 0}}\n. Thanks for your help, it turns out I was using  a div container, and I have change that.  It would be nice however, to be able to use divs to declare content data.\n-----Original Message-----\nFrom: Boris Moore [mailto:reply@reply.github.com]\nSent: Thursday, March 08, 2012 6:13 PM\nTo: Jason Mei\nSubject: Re: [jsrender]  src attribute bug with Firefox (#85)\nHow are you declaring your template? Are you getting it from a string or the contents of a script block?\nIf not, and you are using a div, for example, with display:none, then the markup will get processed as HTML by the browser, and Firefox will covert the value of the src attribute to a URL encoded string.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/85#issuecomment-4406163\n\nThis email and any attachments contain information from Baker & Taylor which may be confidential, privileged and/or protected by other legal rules. If you are not the intended recipient, you are hereby advised that any disclosure, copying, distribution or use of the contents of this email is prohibited. If you have received the email in error, please notify us by reply email immediately and then delete the email and your reply from your email system.\nNOTE: Baker & Taylor accepts no liability for the contents of this email. This email shall not operate to bind Baker & Taylor to any contract, order or other obligation.\n. ",
    "Davepar": "+1, but workaround does work\n. ",
    "Arakade": "+1 but couldn't get workaround to work with an encoder (new workaround using a function below).\nPre-workaround, I started with {{=shopping.change.amount!currency}} where \"currency\" is a custom formatter (encoder) registered with...\njavascript\n  $.views.encoders[\"currency\"] = function currency(number) {\n    //alert(\"typeof \"+ number +\": \"+ typeof number);\n    try {\n      return number.toFixed(2);\n    } catch(e) {\n      // supplied something other than a number\n      return number +\"(NaN)\";\n    }\n  }\n... so my unformatted workaround became {{=shopping.change.amount undef 0}} which works but has no formatting.\nI then tried adding the encoder as {{=shopping.change.amount undef 0!currency}} but it gave same results as no workaround (value if non-zero; else blank).\nI then went and read the source but can't adequately-grok-in-sensible-time how to use a formatter with the workaround (thattmpl + compile code is kind'a heavy! :-O ).  Guessing didn't work either ;-)\nIn case it's relevant, I'm using this with JQuery loaded.\nAlternative workaround (that allows formatting)\nInstead, I switched to using a function...\njavascript\n  $.views.registerHelpers({\n    currency: function(number) {\n      // alert(\"typeof \"+ number +\": \"+ typeof number);\n      try {\n        return number.toFixed(2);\n      } catch(e) {\n        // supplied something other than a number\n        return number +\"(NaN)\";\n      }\n    }\n  });\n... and my template obviously now has {{=$ctx.currency(shopping.change.amount)}}.\nZero and all other values render correctly.  HTH other zero formatters!\n. ",
    "josher19": "Doing\n$.template(\"Quantity: {{=quantity}}\")\ngenerates  ... result = \"\" + \"Quantity: \" + html($data.quantity || \"\"); \nwhere it should be ... result = \"\" + \"Quantity: \" + html($data.quantity); \nand $.views.encoders.html should become:\nfunction (text) { \n   if (null == text) return \"\"; // skip null and undefined elements.\n   return String(text).replace(htmlSpecialChar, replacerForHtml); \n}\nPS: \n(null == text) is true for undefined and null elements, but false for 0 and false,\nwhereas (text || \"\") will evaluate to \"\" for null, undefined, false, and 0.\nAnother inline optimization possibility is (null == text ? \"\" : text) instead of (text || \"\")\nwhich should have good performance and certainly shorter than\n(\"undefined\" === typeof text || null === text ? \"\" : text).\n. Looks like this problem comes from the paramsOrEmptyString optimization.\nI have branch (https://github.com/josher19/jsviews/blob/master/jsrender.js) with a commit (josher19/jsviews@338755b5ebc5195fd9312b01eb3682cb985cdd7b) which gets rid of the optimization and puts a similar one in the html encoder. HTML encoded text using {{= item }} will return blank ('') for undefined or null values but not for 0 or false, but using the ! will show 'undefined' and 'null' values:\n{{= item !}}\nExample usage:\n\n$.template(\"HTML\", \"Qty: {{=Qty}}, null:{{=nil}}, notset:{{=blank}}, bool:{{=bool}}\")(falsy={\"Qty\":0,\"nil\":null,\"bool\":false})\n// Expected output: Qty: 0, null:, notset:, bool:false\n// Old output: Qty:, null:, undefined:, bool:\n\n$.template(\"NONE\", \"Qty: {{=Qty!}}, null:{{=nil!}}, notset:{{=blank!}}, bool:{{=bool!}}\")(falsy={\"Qty\":0,\"nil\":null,\"bool\":false})\n// Expected output: Qty: 0, null:null, notset:undefined, bool:false\n// Old output: Qty:, null:, notset:, bool:\n\n. @patridge : fixed in my fork of the code so now your results render correctly with 0's included in the output.\nTechnical details: changed render to do\ncontent = null != dataItem ? tmpl( dataItem, new View( context, path, arrayView, dataItem, tmpl, this )) : \"\";\ninstead of\ncontent = dataItem ? tmpl( dataItem, new View( context, path, arrayView, dataItem, tmpl, this )) : \"\";\nso now it will render the template for each line unless that line is null or undefined\n(before it would skip rendering if the dataItem was falsy, meaning 0, false, \"\", null, or undefined).\nThanks for posting the example. It indirectly makes a strong argument for TDD.\n@BorisMoore: feel free to pull these small changes and merge them with your changes to see if it fixes or breaks anything. Also let me know if you would like help setting up a test suite for new JsRender beta.\nPS: Now 0 and false will show up whether or not you use ! when rendering:\n```\n$.template('qq', 'Quantity: {{=quantity!}}, Boolean: {{=bool!}}')({quantity:0, bool:false})\n// \"Quantity: 0, Boolean: false\"\n$.template('qq', 'Quantity: {{=quantity}}, Boolean: {{=bool}}')({quantity:0, bool:false})\n// \"Quantity: 0, Boolean: false\"\n```\n. I forked your \" breaking example\" JsFiddle and added a couple more tests.\nRed (failing):\nhttp://jsfiddle.net/yUfyH/1/\nGreen (passing):\nhttp://jsfiddle.net/mW7Fs/\n. Hi Boris, \nUpdated the original example to use your new code:\nhtml\n<ul id=\"results\"></ul>\n<script id=\"x\" type=\"text/x-jquery-tmpl\">\n    <li>{{: #data }}</li>\n</script>\njavascript\n/*global $ */\n$(function() {\n    \"use strict\";\n    $(\"#results\").html($(\"#x\").render([-1, 0, 1, 2, 3, 4,\n                                  '-- booleans --',\n                                  false, true,\n                                  '-- null & undefined --',\n                                  null, undefined,\n                                  '-- strings --',\n                                  \"\", \"string\"]));\n});\u200b\nNow get '[object Object]' for the \"falsy\" values of 0, \"\", null, undefined, and false.\nhttp://jsfiddle.net/Vaxd6/1/\nCheers,\n->> Josh <<-\n. Yes, that seems to work pretty well:\nNow undefined is replaced with \"\" (a blank string) and null is replaced with the String \"null\", while 0 and false remain unchanged.\nhttp://jsfiddle.net/Vaxd6/2/\n. No, I think \"\" for undefined and \"null\" for null works well -- issue closed! \nYou might include in the documentation how to change that back to the old way (delete \"falsy\" values) or how to change \"null\" to \"\" using a helper function.\n. I agree. Might include in the docs how to customize what is displayed using helper functions, because displaying \"null\" can be useful for debugging, but not so useful for displaying in final HTML produced by render.\n. ",
    "patridge": "Seeing this open for a year doesn't give me hope I could offer a fix myself, so I hate to simply post a breaking example in both the current jsrender and @josher19's version. I'm still going to take a look at the jsrender source when I get the chance, but there is definitely still an issue when $data is 0. Here's the gist of the example:\n<ul id=\"results\"></ul>\n<script id=\"x\" type=\"text/x-jquery-tmpl\">\n    <li>{{=$data!}}</li>\n</script>\n<script type='text/javascript'>\n    $(\"#results\").html($(\"#x\").render([0, 1, 0, 2, 0]));\n</script>\nResults in: \"<ul id=\"results\"><li>1</li><li>2</li></ul>\"\nIt doesn't even appear to attempt to step into the template to render the zero-value elements of that array. This seems to make workarounds like the custom tag, custom encoder, and helper function ideas fail too.\n. This definitely fixed that sample jsFiddle (once I updated the syntax: original). I would think an empty string for null/undefined ought to be just fine. I have only had one use-case where I wanted to display \"null\" for null values and that was an oddball usage. I put together the start of a simple demo using a helper function to display such values for anyone else that runs into a need to do so; it's not elegant, but it should be easily tweaked for someone's debugging needs.\n. ",
    "Gvozd": "Sorry for my English\nIf I use some PHP code as template, i have validation conflicts - jsrender try use php code as jQuery selector, but actually jQuery(value)[0] is Html Comment, and has no any attributes\nTo fix this i think is best way replace code\n// If value is a string and does not contain HTML or tag content, then test as selector\n                        && jQuery && jQuery(value)[0];\nto this code\n// If value is a string and does not contain HTML or tag content, then test as selector\n                        && jQuery && jQuery(document).find(value)[0];\nif value is not correct selector jQuery(value) parsed him as HTML, but jQuery(document).find(value) can parse only as selector\n. $.templates('<?php\\necho \"qwe\";\\n?>').render();\nIn result exception TypeError: Object # has no method 'getAttribute'\nNewline symbol is critical, before in rTmplString /<.*>|([^\\]|^)[{}]|)/ first subpattern matched only one line tag, not my multiline PHP code\nAlso, I think is good idea to use regexp from jQuery.fn.init() for matching no-selector strings.\n/^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/\nBut this is not full solution in case parsing template to jQuery object, and I highly recommended  my previous  proposition to fix this trouble.\njQuery(document).find(value) better than jQuery(value) to getting object only by selector, not creating from string\n. ",
    "cyburk": "hi boris,\nthank you for your attention. i had a close look at your examples (just to\navoid my current position).\ni haven't noticed the $, that's how i thought that itemNumber, Name, and\nReleaseYear all came from data:\n{{=$itemNumber}}: {{=Name}} ({{=ReleaseYear}})\nmaybe {{=$ctx.index}} might be clearer, but the functionality is there, the\nrest is personal taste.\nthank you very much.\nburk\nOn Wed, Dec 7, 2011 at 12:24 AM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nIt is available: {{=$itemNumber}}. You'll see it used in several samples,\nsuch as\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/01_inserting-data.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/01_inserting-data.html\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/33#issuecomment-3040683\n. \n",
    "kanejoe": "Hi Boris\n<li><a href=\"#\">{{=page}}</a></li>\n{{#each arrPages}}\n    <li<a href=\"#\">{{=page}}: {{=$itemNumber}}</a></li>             \n{{/each}}\nI can't access the {{=page}} within the each loop.  Is this possible?\nthanks, Joe.\n. brilliant, thanks\n. ",
    "CRHain88": "Is there a way to print a zero-based index?\nI'm looking for something like \nhtml\n{{#each}}\n    <div id=\"myBlock_{{=$zeroIndex}}\">\n{{/each}}\n. Thanks! much appreciated.\n\nChristian Hain\nOn Feb 22, 2012, at 8:37 PM, Boris Moore wrote:\n\nFor now, you have to call a helper function to do $itemNumber-1, but in Beta bits (coming soon I hope) it will be zero-based, and you will also be able to increment or decrement inline. In fact you will be able to write {{:#index}} for zero-based and {{:#index+1}} for 1-based. But more on that when the update is available...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/33#issuecomment-4129040\n. \n",
    "trifolius": "hey @BorisMoore  have a range o for but decreasing...\nfor example \n\"{^{range members ^start=10 ^end=1}}\"+\n                \"{^{:#index}}\"+\n\"{{/range}}\"+\n. ",
    "rkoberg": "Perfect, thanks! Great job on the template engine! Missed that as an example (perhaps put 'no encoding' in the link text?).\n. ",
    "Krisa": "thank you for your reply. It was an old issue related on the browser itself rather than on jsrender. Approx. one week later of this issue, Chrome got an update which fixed automatically this problem.\n. ",
    "quasipickle": "My apologies for necro-posting, but I wanted to provide an example of why someone might want to iterate through the properties of an object.\nIn a nutshell, for the purposes of data-linking, an array/collection does not allow (or very easily allow) for changing just one property of one entry.\nTake this data:\ninout = {\n    joe:{\n        name:  'Joe',\n        status: 'out'},\n    jane:{\n        name: 'Jane',\n        status:'in'},\n    jill:{\n        name:'Jill',\n        status:'away'}\n}\nAnd I render it like so:\n$(\"#domElement\").link(inout,\"#templateID\");\nI could then update a particular person like\n$.observable(inout).setProperty({joe:{status:'in'}});\nI think - I haven't tested this, but looking through the source, I'm guessing this is how it works\nBy only being able to iterate over arrays, I either need to \n1. Re-generate the entire array server side (assuming the change is triggering an ajax request to save in a DB or something), or\n2. Convert the inout object to an array, and keep a mapping of people to array index, so I can update the property like so:\nvar index = nameToNameMap['joe'];\n$.observable(inout).setProperty({index:{status:'in'}});\nIs there another way to approach this?\n. ",
    "RobinDaugherty": "Can we reopen this issue then please? It's definitely necessary, and the original poster closed the ticket for some reason.\n. That looks perfect. Thanks!\n. Sorry about this. I'm going to take this back and let you know when I have it working fully.\n. ",
    "stewartlord": "Any chance of reopening this issue? It took me a while to figure out hashes are not supported by {{for}}. Cool that you can do it via custom helpers, but this seems rather fundamental.\n. ",
    "Raynos": "\nThey work as well as they ever did...\n\nYet there is a large warning which I interpret as \"jQuery templates are deprecated go use jsRender instead\".\nThis might be a project style thing but personally I document my alphas and prototypes even though I know APIs are likely to change. I have a few libraries which are well documented that I'm going to completely redesign and change their API completely.\nWhat I'm trying to say is that there's no good reason not to document alphas. Documenting an API has nothing to do with that API being frozen or stable.\n. > If I provided documentation already it could encourage people to port their sites already, and then 'get burnt' by subsequent breaking changes\nThat kind of mentality annoys people who accept that the API will change but want to start using the project. Your basically saying if people are given documentation and a warning they can't make the \"right decision\" as to use jsRender for their project themself.\nWhat's wrong with writing the documentation and having a warning at the top saying \"API is not frozen, use at own risk or wait for beta\".\nSure I can start using it from the examples you've given, it would just be a nicer and smoother experience if there was documentation.\nHowever I can defiantly see what your saying\n. ",
    "jspopisno1": "I think you should use .append() instead of .appendTo() in this case.\n. ",
    "jsgoupil": "same thing is happening when not adding \n. ",
    "jeffrey-vella": "Cheers Boris, i appreciate your quick and thorough response to this and my other issues. \n. ",
    "rodryquintero": "Thanks for the reply, but I am not sure how to do that.\nOn Sun, Dec 18, 2011 at 3:35 PM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nCan you give me the actual JSON string / JavaScript literal (as it comes\nover the wire from and AJAX request, for example) that corresponds to the\ncase you are describing?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/50#issuecomment-3196747\n\n\n**** Ivan Quintero\n. In fact, that is what I am using, but whenever I get a rather complex XML\nstructure (multiple subitems or xml attributes) the JSON i get comes with\nthese indexes.\nHas it happened to you?\nOn Mon, Dec 19, 2011 at 1:54 PM, Bill Forney <\nreply@reply.github.com\n\nwrote:\nYou can try this: http://www.fyneworks.com/jquery/xml-to-json/#\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/51#issuecomment-3210288\n\n\n**** Ivan Quintero\n. ",
    "wforney": "You can try this: http://www.fyneworks.com/jquery/xml-to-json/#\n. ",
    "kktos": "Boris,\ndo you plan to add it, if you please, Monsieur ?\nbecause it's becoming a nightmare for me....\nsometimes, I can deal with simple add or sub to replace the && and ||.\nbut sometimes I'm stuck.....\ncheers,\n/k\n. ah ! got it at last !\nit works...but under certain condition, surely because of the parser regex ;)\nThis won't work:\n$.template(null,'<_#if name==\"\" && age>18 >NEW<_/if>');\nfunction () {\n            return viewsNs.err( e );\n        }\nBut this will:\n$.template(null,'<_#if name==\"\"&&age>18 >NEW<_/if>');\nfunction anonymous($data, $view) {\ntry{var views=jQuery.views,tag=views.renderTag,enc=views.encode,html=views.encoders.html,$ctx=$view && $view.ctx,result=\"\"+\ntag(\"if\",$view,\"\",1,{_path:'$data.name==\"\"&&$data.age>18'},$data.name==\"\"&&$data.age>18);return result;\n}catch(e){return views.err(e);}\n}\nno space between subexpressions ! ;)\n. I had a problem a bit related to yours as I wished to iterate through a hash (associative array).\nBut each won't allow it (a $.isArray() in render is part of the problem).\nSo before hacking jsrender, I did a search and found your post which gave me an idea:\n$.views.registerTags({\n    foreach: function( list ){\n        var ret = \"\";\n        var tmpl= this.tmpl;\n        $.each(list, function(idx,val){\n            ret += $.render( val, tmpl );\n        });\n        return ret;\n    }\n});\nso now I'm able to iterate either on arrays or hashes.\n;)\n. ",
    "jaakkom": "Thank you very much!\n\nJaakko Mantila | J\u00e4rjestelm\u00e4kehitt\u00e4j\u00e4 | Forenom\n| GSM 044 2106859 | jaakko.mantila@forenom.fi \nmailto:jaakko.mantila@forenom.fi\n| M\u00e4kel\u00e4nkatu 58-60 | 00510 Helsinki | forenom.fi http://www.forenom.fi\nForenom - for easy housing\nOn 03/12/2012 02:13 AM, Boris Moore wrote:\n\nYes, you are right. This is fixed in the latest update.\nSee also this new sample, which would have similar problems if this issue had not been resolved.\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_layout-templates.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/12_layout-templates.html\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/53#issuecomment-4443700\n. \n",
    "ThorbenJ": "Thank you for the tip.\nI tried:\n\n    $.views.registerTags({\n        element: function(i){\n            return this._view.data[i];\n        },\n        each_in: function(i){\n            return $.render(this._view.data[i], this.tmpl);\n        },\n    });\n\neach_in is when the array element is itself an array. I don't yet have to deal with hashes in arrays.\nOne problem though: If the string in the array element has something that looks like html it get interpreted as such.\nIf I do: return escape(this._view.data[i]);  The escaped entities are not getting interpreted, they're displayed verbatim.\nSo either nothing appears (but visible in source) or lots of %##; junk.\nNot strictly a bug in your code, but help would be appreciated. I would like to excape anything that could be interpreted as html, but still have it display properly. In this case its email addresses with angled brackets around the email part.\n. ",
    "kojilab": "I went through the tests but can't figure out how to refer to an item in the loop as an array\nfor example:\n{{for podcats}}\n   {{:array_item[0]}}\n{{:array_item[1]}}\n  {{/for}}\nWhat should I replace array_item with?\nThanks\n. Thanks. I'll try that.\nIf you need help for documenting everything, let me know. I'd be interested in helping setting up a more thorough website for JSRender/JSViews because I think it's really good.\n. ",
    "fredyang": "HI Boris,\nThe layout concept is a little odd to me, but I understand what you want to\nachieve here. From a user's perspective, you are introducing more noise to\nme.\nI guess you are trying to solve my issue that using an array as an item.\nMy original proposal is that, always require user to give me a data source\nas as array.\nSo if you want to render a single item ,\nif the item is object or simple type, user should supply data source as [\n{name: \"john\"} ], or [ \"john\" ]\nif the item is an array, user should supply data source as [ [\"one\", \"two\"]\n]\nWe could do this, because we explicitly tell user our expectation, a list\nof items.\nThe intention of \"layout\" is bump in user's understanding.\nOn Sun, Mar 11, 2012 at 8:11 PM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nYes, this is a good issue/scenario.\nThe latest fix and the new behavior around layout templates should cover\nthe requirements of this scenario.\nSee:\nhttp://borismoore.github.com/jsrender/demos/step-by-step/12_layout-templates.html\nhttps://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/12_layout-templates.html\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/57#issuecomment-4443683\n. Hi Boris,\n\nYes, I understand your intention, \"render template by ignoring the shape of\nthe data\", that is my understanding.\nHere is a template\n\n<table>\n{{for #data}}\n<tr>\n<td>\n{{:firstName}}\n</td>\n<td>\n{{:lastName}}\n</td>\n</tr>\n{{/for}}\n</table>\n\nYou want to write code $.render.allContacts([ { firstName: \"x\", lastName:\n\"y\"}, {firstName: \"x2\", lastName: \"y2\"}])\nallContacts is an layout, only one table with two row will be generated,\n instead of two table of one row each.\nIs my understading correct?\nHere is user's normal expectation : content = data + template, different\ncontent = different data + same template.\nNow you change the user's expectation. I am not sure whether user will\naccept that.\nOf course you can say different content = same data + different template,\nbut if the template is semantically correct,\nwhy change it.\nMy understanding is that\nYou are flexible about user's data shape in the first place, if user's\ninput is an array, you render as array,\nif user's input is not array, you take that as an item in array,\nessentially you wrap it as an array.\nYou can enforce a rule, data must be an array, like [null], [ {} ], [ 0 ],\nbut it has to be array, otherwise throw\nexception. User will be educated and follow your rule. There is no\nambiguous. User will achieve that they want\nby changing the shape of the data, instead of changing the rendering\nmechanism.\nBecause of your flexibility, you have to invent concept layout, to correct\nyour flexibility. This is essentially\nchanging the rendering mechanism. If I don't make mistake in the first\nplace, I don't need to correct mistake.\nI think you should enforce the rule.\nBy the way, I found that I can not specify debug, allowCode using the\nfollowing\n$( \"#movieList\" ).html(\n$( \"#movieTemplate\" ).render( movies )\n);\nI have to compile it first like $.templates(\"xxx\", { markup: \"#xxx\",\nallowCode: true, debug: true });\nI hope I can add the compile options via attribute.\n\n<div>\n{{:#index+1}}: <b>{{:name}}</b> ({{:releaseYear}})\n</div>\n\nThanks\nOn Mon, Mar 12, 2012 at 4:20 PM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nI understand, from the point of view of simply allowing calling render and\npassing an array as item, yes, your approach seems simpler. But the layout\nfeature is not being driven only by that requirement but by a number of\nscenarios, and is intentionally much broader.\nBasically it is about being able to render a template without the\nrendering being dependent on what the data is - array, null, undefined,\nfalse, etc. - in each case the template is rendered, since it is a template\nwhich is designed to take complete ownership of how it renders the data.\nThis also needs to work if you do {{for myData\ntmpl=\"myLayoutTemplate\"/}}. It is also a step towards future work on\ncontrols/widgets or components. For example if you have a grid widget with\na template gridWidget, you can do {{for items tmpl=\"gridWidget\"/}}.\nObviously you want a single gridWidget showing the rows, not multiple\ngridWidgets, one for each item!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/57#issuecomment-4460741\n. \n",
    "decitrig": "Elsewhere on the same page.\n. Working on that right now.\n. Could not reproduce with minimal test case; must be me. Damned if I know what's going wrong, though.\n. ",
    "cesarcb": "I am using Jurassic Javascript compiler (source avaliable at at codeplex)\n. ",
    "tifosiblack": "May be it would be better to use \"this\" instead of \"window\" ?\njavascript\n(function (global) {\n...\n})(this);\n. About isArray, we can simply write :\njavascript\nisArray: (Array || {}).isArray || function (obj)\nBut it's weird to not have Array class no ?\n. Hum if I remember, in NodeJs environnement, it would use \"exports\", to expose data using the require statement.\n. ",
    "sarxos": "I'm not 100% sure, but for node.js it would have to be \"process\" not \"global\", but still it can be called \"window\" in the function scope. Solution using \"this\" as the argument is commonly used by other frameworks (e.g. backbone.js)\n. Yes, \"exports\" will expose module structure for those who used require(module) statement. E.g. module like that:\n\nvar someModuleFunction = function() {\n    // some code here ...\n};\nexports.someModuleFunction = someModuleFunction;\n\nWill be available thru require statement:\n\nvar module = require('someModule');\nmodule.someModuleFunction();\n\n. Thank you Boris! \nI wanted to use it in such a way because I wanted to include model variable in the string which is actually CSS selector used to bind event to DOM element, e.g:\n\ninput[type='text'][name='{{= attributes.name !}}']\n\nI'm very interested in new API changes since we are integrating jsRender in our product and making it work together with backbone.js. I've read on your blog that jsRender will become beta in the nearest time, so I will keep my finger crossed to make everyone use stable version asap :)\n. Thank you Boris!\n. Thank you Boris for the clarification and your notes about performance. I didn't know that templates are compiled and stored in cache.\nWe have tons of templates and need to use allowCode=true only in few of them, but I was just thinking that the best option to relieve developers from using $.templates(..) is to simply set this flag globally.\nWhy we are using JavaScript inside templates? We are operating on backbone models and we somehow had to show or hide some parts of templates on the base of some \"global configuration\" available in the JavaScript context. We had two options - make our models contaminated by site settings or add conditional statements in templates. We chose to change templates since we wanted to keep models transport layer as clean as it possible (due to validation stuffs).\nLooking thru the prism of your notes I admit that it is not the best choice to use JavaScript inside templates so I will have to redesign some parts of our code.\nThank you!\n. ",
    "stringfellow": "Sorry - turns out this is to do with something else (possibly django or jquery, when converting).\n. ",
    "nmorse": "I am not able to make my simplified test work...\nhttp://jsfiddle.net/ysAk6/\nI'm not sure: What am I doing wrong?\nOn Mon, Jan 23, 2012 at 12:14 PM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nYes, that feature already exists. Just use {{each}} for that too.\nHere are details, copied from\nhttps://github.com/BorisMoore/jsrender/issues/40:\nThe behavior of {{#each dataExpression}} ... {{/each}} or {{each\ndataExpression tmpl=\"myTemplate\"}} is to render the content of the\ntemplate against the data returned by dataExpression.\nIf the data is an array, it iterates for each item - which becomes the\ncurrent dataItem for that rendered template (view) - and concatenates the\nresult. But if dataExpression returns a single object, then it renders just\nonce, with that object as current data item.\nIf you don't pass any data at all, as in {{each tmpl=\"myTemplate\"}} then\nit will render the template just once, keeping the current dataItem from\nthe outer scope (so it is in effect simply an include).\nI am considering changing the name of the tag from each to {{for}} to make\nless surprising that it does not iterate when you pass it a singleton.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/64#issuecomment-3617647\n. Thank you very much, for spotting my # omission...\n\nOn Mon, Jan 23, 2012 at 2:21 PM, Boris Moore <\nreply@reply.github.com\n\nwrote:\nhttp://jsfiddle.net/ysAk6/2/\nFor the jsrender script URL, use:\nhttp://borismoore.github.com/jsrender/jsrender.js\nAlso you forgot the # in '{{each tmpl=\"#mcFolder\"}}'\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/64#issuecomment-3619935\n. I may be naive, but I tried\n<script src=\"http://mydomain.org/tmpl/myTemplate.tmpl\" id=\"myTemplate\" type=\"text/html\"></script>\nand \n<script src=\"http://mydomain.org/tmpl/myTemplate.tmpl\" id=\"myTemplate\" type=\"text/x-jquery-tmpl\"></script>\nwithout success ( due to: I'm doing something wrong, OR there is no chance without \"text/javascript\", not sure). \nUnfortunatly with $.get() or $.load(): I would be up against \"same domain\" restrictions... so I will look into JSONP etc.\n. \n",
    "sandord": "Thanks, my bad. It's strange though that only IE8 bails out on that code, not IE9, FF9 or Chrome...\n. Ah, that makes a lot of sense. Thanks for explaining.\n. ",
    "jmealo": "I believe this is related to Issue #69 I just posted.\n. That should work. I'll be happy to test it when you commit and close the issue if it works.\n. ",
    "worraps": "Please accept my apologies!  I am constantly telling folks the same thing!    \nI swear I looked through all the samples :(\nDOH! I feel like a user.\nTodd\n----- Original Message -----\nFrom: \"Boris Moore\" reply@reply.github.com\nTo: \"worraps\" github@sparrowmail.net\nSent: Thursday, February 9, 2012 1:41:16 PM\nSubject: Re: [jsrender] Rendering html embedded in JSON (#71)\nHave you checked out all the samples?\nUse {{=content!}}\nSee https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/03_no-encoding.html\nhttp://borismoore.github.com/jsrender/demos/step-by-step/03_no-encoding.html\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/71#issuecomment-3892962\n. ",
    "rbiggs": "Not sure what's wrong. Everything renders except the template referenced by the data. Here's what I have:\n```\n<!DOCTYPE html>\n\n\n\n\n<link href=\"../resources/movielist.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\nHome\nUsing {{each}} to render hierarchical data - external template.\n\n    <tr>\n        <td>{{=Title}}</td>\n        <td>\n            {{each Languages tmpl=\"columnTemplate\"}}\n        </td>\n        <td>\n            {{each Languages tmpl=tmpl}}\n        </td>\n    </tr>\n\n\n    <div>\n        <em>{{=Name}}</em>\n    </div>\n\n\n    <span>\n        <b>{{=Name}}</b>\n    </span>\n\n\n\n    var movies = [\n        {\n            Title: \"Meet Joe Black\",\n            Languages: [\n                { Name: \"English\" },\n                { Name: \"French\" }\n            ],\n            tmpl: \"#columnTemplate\"\n        },\n        {\n            Title: \"Eyes Wide Shut\",\n            Languages: [\n                { Name: \"French\" },\n                { Name: \"German\" },\n                { Name: \"Spanish\" }\n            ],\n            tmpl: \"#rowTemplate\"\n        },\n        {\n            Title: \"The Inheritance\",\n            Languages: [\n                { Name: \"English\" },\n                { Name: \"German\" }\n            ],\n            tmpl: \"#columnTemplate\"\n        }\n    ];\n\n    $.template( \"movieTemplate\", document.getElementById( \"movieTemplate\" ).innerHTML );\n    $.template( \"columnTemplate\", document.getElementById( \"columnTemplate\" ).innerHTML );\n    $.template( \"rowTemplate\", document.getElementById( \"rowTemplate\" ).innerHTML );\n\n    document.getElementById( \"movieList\" ).innerHTML =\n        '<table><tbody class=\"header\"><tr><th>Synopsis</th><th>Fixed Template</th><th>Template specified in data</th></tr></tbody><tbody>'\n        + $.render( movies, \"movieTemplate\" )\n        + \"</tbody></table>\"\n\n\n\n```\nAnd here's what it is outputting:\n```\n        SynopsisFixed TemplateTemplate specified in data\n\nMeet Joe Black\n\n        <div>\n            <em>English</em>\n        </div>\n\n        <div>\n            <em>French</em>\n        </div>\n\n            </td>\n            <td>\n                #columnTemplate#columnTemplate\n            </td>\n        </tr>\n\n        <tr>\n            <td>Eyes Wide Shut</td>\n            <td>\n\n        <div>\n            <em>French</em>\n        </div>\n\n        <div>\n            <em>German</em>\n        </div>\n\n        <div>\n            <em>Spanish</em>\n        </div>\n\n            </td>\n            <td>\n                #rowTemplate#rowTemplate#rowTemplate\n            </td>\n        </tr>\n\n        <tr>\n            <td>The Inheritance</td>\n            <td>\n\n        <div>\n            <em>English</em>\n        </div>\n\n        <div>\n            <em>German</em>\n        </div>\n\n            </td>\n            <td>\n                #columnTemplate#columnTemplate\n            </td>\n        </tr>\n    </tbody></table></div>\n\n```\n. Here's the code that worked. You might want to include this as and example of template composition without jQuery. If this is your alpha, I'm really looking forward to the beta.\n```\n<!DOCTYPE html>\n\n\n\n\n<link href=\"../resources/movielist.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\nHome\nUsing {{each}} to render hierarchical data - external template.\n\n    <tr>\n        <td>{{=Title}}</td>\n        <td>\n            {{each Languages tmpl=\"columnTemplate\"}}\n        </td>\n        <td>\n            {{each Languages tmpl=tmpl}}\n        </td>\n    </tr>\n\n\n    <div>\n        <em>{{=Name}}</em>\n    </div>\n\n\n    <span>\n        <b>{{=Name}}</b>\n    </span>\n\n\n\n\n    var columnTemplate = document.getElementById('columnTemplate');\n    var rowTemplate = document.getElementById('rowTemplate');\n\n    var movies = [\n        {\n            Title: \"Meet Joe Black\",\n            Languages: [\n                { Name: \"English\" },\n                { Name: \"French\" }\n            ],\n            tmpl: \"columnTemplate\"\n        },\n        {\n            Title: \"Eyes Wide Shut\",\n            Languages: [\n                { Name: \"French\" },\n                { Name: \"German\" },\n                { Name: \"Spanish\" }\n            ],\n            tmpl: \"rowTemplate\"\n        },\n        {\n            Title: \"The Inheritance\",\n            Languages: [\n                { Name: \"English\" },\n                { Name: \"German\" }\n            ],\n            tmpl: \"columnTemplate\"\n        }\n    ];\n\n    $.template( \"movieTemplate\", document.getElementById( \"movieTemplate\" ).innerHTML );\n    $.template( \"columnTemplate\", document.getElementById( \"columnTemplate\" ).innerHTML );\n    $.template( \"rowTemplate\", document.getElementById( \"rowTemplate\" ).innerHTML );\n\n    document.getElementById( \"movieList\" ).innerHTML =\n        '<table><tbody class=\"header\"><tr><th>Synopsis</th><th>Fixed Template</th><th>Template specified in data</th></tr></tbody><tbody>'\n        + $.render( movies, \"movieTemplate\" )\n        + \"</tbody></table>\"\n\n\n\n```\n. Yup, I got it working with $.noConflict(). But the important part is switch the template call process around using JsViews instead of $, etc. : JsViews.render( movies, \"movieTemplate\"). Doing that I am able to use Zepto or ChocolateChip with jsRender.\n. ",
    "matsondawson": "Cool.  I thought that the jsrender rendered and inserted the template as html, and then went through and applied values.\nI was thinking just after it did  el.value = something; the next line could check el.value == something, and change the data if the value didn't match.  It wouldn't be special knowledge of any inputs other than what jsrender already knows.\n. ",
    "conder": "I was able to make this work using a view helper.  Should I be able to use that syntax however inside an attribute?\n. ",
    "hanswurscht": "Is this still working (using the version from today)?\nIn my tests it always assigns the odd class.\n. Thanks!\nI was using #index, by using getIndex() it's working now again.\n. ",
    "tianxu0836": "This is helpful!\n. ",
    "iyangyuan": "That's good!\n. ",
    "rcollette": "Perhaps you have a more complex use case in mind but for the specific example you are showing, a data attribute in the template would suffice.\n<div data-jsRenderedElement=\"true\" id=\"{{=someId}}\"\">.....</div>\n. Oddly enough, I find myself with the same need now.  I want to store an array of values along with a rendered element.  Would you mind providing further details on how you stored the data?\n. OK.  Got it now.  This is forcing you slightly back into the method of how you would build the page if you were not using jsRender.    I started looking at using a helper function but there doesn't appear to be  a way to get a handle to the element being rendered to be able to associate anything with it.  That makes sense when you consider that jsRender only renders as text.  For me, I think this is going to be one of the limitations of jsRender.  There doesn't appear to be the same capability as using an object model.\n. remove the hash in front of the each.  It works then.\n. BTW.  The way to realize that something was wrong with the jsTag (element or handlebar, not sure what you call it) was that it was rendering in the output. \n. ",
    "jgauffin": "I would like to store the entire object to be able to show a dialog (without using an ajax request to fetch the exactly same information again).\nI solved it by templating one row at a time to be able to manually store the data on it.\n. I traverse the JSON array manually, something like:\n```\n$.each(jsonResult, function(index, item) {\n    var row = $('#table-template').render(item);\n    var $row = $(row);\n$row.data('my-plugin-data', item);\n$row.appendTo($('#myTable tbody'));\n\n});\n```\nWhich allows me to get the JSON object later:\n$('#myTable tbody tr').click(function() {\n    alert($(this).data('my-plugin-data').FirstName);\n});\n. jsRender already uses the data function in jQuery if you look at the source code. It would be easy to do another check to see if jQuery is available and just attach the JSON object to the current node.\nI'm creating a table plugin for jQuery which checks if either jsRender or the tmpl function is available. It can default to manual rendering if none of those are included. So it's not really hard to support multiple rendering techniques. You can check my source code at: https://github.com/jgauffin/Griffin.Table/blob/master/Source/js/Plugin/jQuery.griffinTable.js, line 426-488\n. ",
    "georgesaliba": "Great, thanks! Out of curiosity, what's the difference between #each and each? I pulled the #each out of one of the demo files.\n. ",
    "KaineVarley": "That's fabulous. Thx Boris.\n. Hi Boris,\nIt looks like I'm still having the \"Expected Identifier\" problem in IE8. This time it is on line 501, the code segment is below:\nLine 501:\ncode =  new Function( \"data, view, j, b, u\", fnDeclStr\n    + (getsValue ? \"v,\" : \"\")\n    + (hasTag ? \"t=j.tag,\" : \"\")\n    + (hasConverter ? \"c=j.convert,\" : \"\")\n    + (hasEncoder ? \"e=j.converters.html,\" : \"\")\n    + \"ret; try{\\n\\n\"\n    + (tmplOptions.debug ? \"debugger;\" : \"\")\n    + (allowCode ? 'ret=' : 'return ')\n    + code.slice( 0, -1 ) + \";\\n\\n\"\n    + (allowCode ? \"return ret;\" : \"\")\n    + \"}catch(e){return j.err(e);}\"\n);\nCause of error:\n$.templates(\"PlayerContentTemplate\", \"<div id=\\\"{{:id}}\\\"><div class=\\\"{{:class}}\\\">{{:content}}</div></div>\");\n$.templates(\"PlayerLinkTemplate\", \"<a href=\\\"#\\\" onclick=\\\"ShowPlayerProfile('#{{:id}}'); return false;\\\" class=\\\"player-profile\\\" title=\\\"{{:tooltip}}\\\">{{>text}}</a>\");\nHope that is clear. Please let me know if you'd like me to do any quick tests for you. Hope you're able to look into this soon, or provide a work around.\nKind regards,\nKaine\n. P.S. I was unable to reopen this as I don't have enough permission.\n. Hi Boris,\nThanks for your feedback. I suspected as much. A simpler workaround was to rename class to classNames. \nCheers,\nKaine\n. That's great Boris, thx.\nKeep up the good work, it's mightily appreciated.\nKaine\n. ",
    "kginstructor": "The snippet:\n$.templates(\"Test\", \"{{if foo == 'bar'}}Bar{{else if foo == 'hello'}}Hello World!{{else}}Fool!{{/if}}\");\nstill fails in IE8 with the Expected Identifier. Seems it can't understand that data.if is referring to a property on an object, not the end of a malformed 'if' statement. Maybe one day, people will stop using IE8... \n. ",
    "blowsie": "Turns out this markup is allowed i had an error elsewhere in my code, sorry\n. whilst on the discussion of performance. Render time is not everything. Memory usage is also very important. See my issue here. https://github.com/BorisMoore/jsrender/issues/177\n. Ouch, this requires changing hundreds of templates. I wonder if there is a more global solution?\nI would have thought using {{for}} would behave much like $.each( which doesn't run if it is empty.\nhttp://jsfiddle.net/blowsie/2Cd2h/3/\n. Thanks for this useful tag and various workarounds. \nI can see why it is written this way now, for a more generic solution, which will cover more scenarios. \n. Yes Im using version 21, without JsViews.\nIs there some text missing from your previous comment?\nI don't understand this part. if you have . You will then have a foo var which may collide with something else\n. It seems my issue was i was writing {{else if foo == bar}} rather than {{else foo == bar}}, the main problem here for me was that the code wasn't throwing any usefull errors or hints as to what the issue was\n. Im using VS2010 as my IDE and found that using Tabify Selected lines (on all lines) fixes this issue.\n\n. I personally find .length ideal. I never use count in javascript only ever.length. Just my two cents.\n. Hi Boris, \nThanks for the swift reply, this helps but unfortunately does not solve the issue.\nI wonder if it is because all of the #data, #parent and #view type objects don't get cleaned up?\n\n. ### Update\nSome good news.\nYou will be pleased to know I was using a slightly older version of jsrender, after updating I can see much better results.\n\n. How do I go about pre-compiling nested templates?\n. I don't quite understand what you are suggesting?\nSo when I'm inside a template...\n{{for data tmpl='how-do-i-use-precomplied-templates-here?' /}\n. In the code above, At what point are you actually Compiling the template?\n. Thank you for sharing your code. \nTo me, it seems like alot of function calls to actually render something?\nAlso with this approach you have to write both JavaScript and the template for every template you create.\nWould it not be an idea to cache the compliled template in your my.utils.renderExtTemplate?\n\nThis approach in my templates would lead to an insane amount of code and it would be very difficult to manage.\nI think id rather use the following kind of approach\n{{for data tmpl='~childTemplate('#tmplName')' /}\nAnd then create the helper to both compile and cache the template.\nThis approach infact is similar to this issue i just found answered by Boris\nhttps://github.com/BorisMoore/jsrender/issues/165\n. I had resolved this myself by writing my own helper.\ngetTmpl: function (tmpl){\n        if (!tmplCache[tmpl]) {\n            tmplCache[tmpl] = $.templates(tmpl);\n        }\n        return tmplCache[tmpl];\n    },\nLooking at your changes, I should no longer require this?\nPs. I cant re-open issues :P\n. ",
    "mattiasrunge": "Thank you very much, that worked perfectly!\n. ",
    "eirikhm": "Followup on this, is there any way to remove the rendered content along with the tags? I'm working on a mobile site which renders all pages via templates, and removes them when the page is no longer in focus. After some browsing the DOM is littered with comments. Setting link:false will improve it quite a bit, but some templates also use linking.\n. ",
    "alexmoon": "The change correctly renders literal nulls as the empty string, but still renders null values as \"null\":\nhttp://jsfiddle.net/VZ2nB/\nI think line 492 in tmplFn() needs to change from:\njavascript\n: (getsValue = TRUE, \"((v=\" + params + ')!==u?v:\"\"')\nto:\njavascript\n: (getsValue = TRUE, \"((v=\" + params + ')!=u?v:\"\"')\nThe return statements in renderTag() and the html converter may also need to change.\n. ",
    "bdkzero": "Updated, sorry for bad formatting\n. Ok it works very well. Thank you,\nBind\n. ",
    "patmoore": "I would try to add support for getting the template from the src file, however I haven't found how to retrieve the referenced file's body :-(\n. thanks for this fix!\n. ",
    "Cellivar": "Had a typo! Thought I had triple-checked everything before posting here. Definitely liking the new framework, thanks!\n. ",
    "govis": "Found it here http://stackoverflow.com/questions/9721339/how-to-get-the-current-item\nWhen using template.link(container, data) instead of template.render(data) then $.view(this).data gives the data item behind markup element.\nThanks\n. I guess this is a repeat of issue #77 \nhttps://github.com/BorisMoore/jsrender/issues/77\nSeems this is not supported\n. Sorry my bad, did not read all the way till the end before posting. Yes it works great when I add \"link = false\" to {{if}} and {{else}} instructions. Thanks for adding support for it in this version, it's definitely useful. \nI still don't fully understand what those <!--tmpl(,_xx)> notations are for when there're no data-link instructions present, my templates seem to work just fine when I set link = false. Is this property required to support data linking only or there is some other functionality that depends on it, for example should I still expect to get $view(elem).data on a markup element that was generated with link = false?\nOne suggestion though, I'd recommend that the link property, when explicitly set get automatically inherited by child tags.\nAnyways, as always, great work Boris. \n. Thanks Boris, I will give it a try. \nRendering or user interaction that is conditional or dependant upon the the item's index is probably going to be a very common use case and occur in most of the templates. What do you think of putting the logic of finding the closest item inside the #index itself to allow for the templates to be a bit cleaner?\nThanks\n. Yes, makes total sense. I'm sure that the logic of propagating the item index down to all of it's child views would have been unnecessary complex and tedious to maintain.\nI was thinking more along the lines of having a shortcut that would check if the current view is an item view then return it's index and otherwise simply forward the call to view.get(\"item\").index. This would allow for consistent way of accessing the item\u2019s index anywhere in the item's template.\nThanks.\n. I think that #index() syntax should be good enough.\nindex could be doable by using Object.defineProperty, but given the headaches that IE8 or below would give in that case, probably not worth it.\nhttp://webreflection.blogspot.ca/2011/02/btw-getters-setters-for-ie-6-7-and-8.html\nPlease feel free to close the issue.\nThanks.\n. ",
    "mattparishdev": "@BorisMoore or @govis ,\nWould it be possible for you to provide a specific example for showing how to conditionally set the checked attribute on an input tag of type \"checkbox\"? I can't seem to get this to work with {{if}} statements...\nHere is the code I am trying to use:\n<input type=\"checkbox\" {{if ObjectOptionCode == true}}checked{{/if}} disabled=\"disabled\" />\nThanks in advance for your help!. Boris,\nMy apologies for not getting back to you sooner. After going through some\nmore testing, it appears that this did, indeed, work. The thing that was\ntroubling me was that Visual Studio intellisense does not like the syntax\nwhen mixed with ASP.NET MVC Razor views, so there are consistent \"errors\"\nshown that aren't actually errors.\nThanks for your response!\nMatt Parish https://www.linkedin.com/in/mattparishdev/\nGame Developer & Designer, Software Developer\n816.462.7847\nOn Thu, Feb 22, 2018 at 7:57 PM, Boris Moore notifications@github.com\nwrote:\n\nThat should work. Can you put it into a jsfiddle, so I can look at what\nyou might be doing wrong elsewhere - in your data, or your code??\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/95#issuecomment-367874594,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFB5SbbEavShaTvEsoUNwYMZ6r-0dTzhks5tXgzpgaJpZM4SQKOx\n.\n. \n",
    "francissalvamantePTX": "I'm using {{:#index}} to get current index of a data in the iteration {{for}}...{{/for}}. But every time that I try to compare it, [e.g. {{(:#index+1)<10}}] it has an error. Am I doing things incorrectly? Or :#index doesn't support comparison. I fixed it a while ago already. I just used #getIndex(). So my loop looks something like this\n{{for  ~index=#getIndex() ... }}\n{{if ~index<ops}}\n{{/if}}\n{{/for}}\nI fixed it by going through jsviews.com :). Oh sorry sir. It was just that I was trying to fix it as well while waiting for your response. Thank you so much for your response and time sir . Quick question, is the output of {{:#index}} and {{:#getIndex()}} equal?. ",
    "thunberg": "Can this be reopened? There is still no clean solution for $.render.myTemplate()\nThere is discussion here: https://github.com/BorisMoore/jsrender/issues/118\nAnd on this commit: https://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0\nThere you mention \"You can call {{for tmpl='myTmpl'/}} or $.render.myTmpl(), and the template will be rendered once, with current data item 'undefined'.\"\nThat appears to no longer be the case.\nApologies if I've missed something, and thank you for your hard work on this fantastically useful project.\n. ",
    "pbcomm": "My bad. As this seems to be a popular subject maybe a demo is in order.\n. Before I make an ass of myself again a file another invalid bug, maybe you\ncan help with an issue:\nMy tag:\n{{>name.replace(/\\W/g, '-').toUpperCase()}}\nReports:\nError: Invalid flags supplied to RegExp constructor 'data'.\nIs this something known or just not supported yet? I know it worked in\n$.tmpl\nOn 4/7/12 9:07 PM, \"Boris Moore\"\nreply+i-4012048-019e36573b3659bb8b9b9110d41007136eedec04-134033@reply.gith\nub.com wrote:\n\nYes, I agree :). I'll try to get to include one when I can...\nThanks...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/107#issuecomment-5012689\n. Thank you for the quick response.\nI guess that means I should try to avoid any native functionality in my\ntemplates including functions like .upperCase().\n\nOn 4/7/12 9:23 PM, \"Boris Moore\"\nreply+i-4012048-019e36573b3659bb8b9b9110d41007136eedec04-134033@reply.gith\nub.com wrote:\n\nJsRender, unlike jQuery templates, is not designed to run arbitrary code\nwithin templates. (For security reasons and to encourage better\nseparation of concerns.)\nYou can easily create a helper function, a converter function, or a\ncustom tag, and have it call your regex conversion code.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/107#issuecomment-5012749\n. It's not UI, it's jQuery which is in beta right now (1.9b1). The parsing of html that has text nodes has been moved to $.renderHTML() and $() only accepts string of markup that start with <. The template i have is a simple one in a script tag which when rendered has a space before and after the template which makes it unusable with $(). \nExample:\n\n\n        <div class=\"loading\">\n            <span class=\"loading-bar\"></span>\n            <span class=\"ajax-error\">\n                Oops something happened that we weren't expecting, please try again later\n            </span>\n        </div>\n\n$($( '#loaderTmpl' ).render({}))\n. Seems logical, I will trim the whitespaces on my end and figure out why we are using them that way, looks like a bad way to go.\n. ",
    "rdogmartin": "Thanks - your change works as expected.\n. Just ran into a scenario where this would be useful, so I wanted to add my support for it. Cheers!\n. I spent some time trying to find the smallest possible repro and then posted fast and slow versions here:\nhttp://www.galleryserverpro.com/_tmp_jsrender_issue137_fast.html\nhttp://www.galleryserverpro.com/_tmp_jsrender_issue137_slow.html\nIn IE9 on my PC, the javascript in the first link takes 145ms; the second takes 2,360ms. The only difference between the two is that the template was changed slightly: the text \"ReloadPage\" inside the slow page was changed to \"Reload\", which is enough to suddenly make it fast. Both pages use the latest #17 version.\nAdd'l notes:\n- You don't have to click anything on the test page to experience the issue. It occurs during page load.\n- After simplifying the sample, even #13 runs slow, so my initial assertion that #14 introduced a breaking change may not be accurate. I didn't dig into this, though, considering that I could still produce fast and slow versions with the latest code.\n- Making just about any kind of change to the template is enough to suddenly make it fast. For example, you can remove the 'e' function parameter.\n. I can confirm that using the latest commit on my repro samples fixes the issue. Thanks! Really appreciate your help in tracking this down.\n. ",
    "waratah": "The same basic issue  markup.replace is not a function   line 461 on zip downloaded today.\nThe replace function is hitting a pure number and therefore replace is not defined and the template crashed.\n. A few strange things happened number disappeared in html. \u00a0the html was poorly formed as you suggested.\ni placed a guard condition on the logic. To get further if(markup.replace) in two places.\nI found i was using {{name}} without the : and the whole chunk disappeared.\nI also tried a helper for formatting numbers. Could not get that right ended up formatting input rather than work it out.\nIs it worth writing a separate Verification of the the template? \u00a0for developer usability?\nKen Foskey\n-------- Original message --------\nSubject: Re: [jsrender] fail to compile template {for} (#112) \nFrom: Boris Moore reply@reply.github.com \nTo: waratah kfoskey@tpg.com.au \nCC:  \nAs in the case above, that is likely because you made a mistake matching tags. Check that you have {{foo...}} ... {{/foo}} for any block tags (such as if or for), and {{foo ... tmpl=... /}} for tags using external templates. Also that your HTML is well-formed...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/BorisMoore/jsrender/issues/112#issuecomment-5877956\n. ",
    "mbadler": "http://jsfiddle.net/ZbeQU/1/\nAlso it only \"chokes\" on IE8 - it does process correctly on IE9\n. ",
    "saravananmra": "$.templates() is not working on Firfox (V20). FF throws error as elem.getAttribute is not a function. My code is below,\n```\nrenderTemplate : function (tmplName, targetSelector, data) { //param1 - template file name, param2 - target id, data - > Object\n        var file = 'file:///C:/widget-demo/templates/_' + tmplName+ '.tmpl.html';\n        $.get(file, null, function (template) { \n            var tmpl = $.templates(template);\n            var htmlString = tmpl.render(data);\n            if (targetSelector) {\n                $(targetSelector).html(htmlString);\n            secbus.widgets.createTab(targetSelector); \n            } \n            return htmlString;\n        });\n},\n```\n. Please let me know the fix for this\n. Hi,\nThanks for your response.\nI missed out the content type in jquery function ($.get()), hence $.templates() was taking the parameter as empty. So, jsrender.js plugin was throwing error i.e elem.getAttribute is not a fucntion.\nAgain, thanks for your response.\nRegards,\nM.Saravana Kumar\nPh: +91-9886956547\nAccenture Services India Pvt Ltd,\nIBC knowledge Park,\nBhannerghatta Road,\nBangalore.\n\nFrom: Boris Moore [notifications@github.com]\nSent: Tuesday, May 14, 2013 11:30 AM\nTo: BorisMoore/jsrender\nCc: M Kumar, Saravana A.\nSubject: Re: [jsrender] Rerendering a template works in some versions of firefox, but not all? (#115)\nJsRender is not based on the DOM. Is this error getting thrown in JsRender code, or elsewhere?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/BorisMoore/jsrender/issues/115#issuecomment-17887877.\n\nThis message is for the designated recipient only and may contain privileged, proprietary, or otherwise confidential information. If you have received it in error, please notify the sender immediately and delete the original. Any other use of the e-mail by you is prohibited.\nWhere allowed by local law, electronic communications with Accenture and its affiliates, including e-mail and instant messaging (including content), may be scanned by our systems for the purposes of information security and assessment of internal compliance with Accenture policy.\n\nwww.accenture.com\n. ",
    "StrouMfios": "I had tried {{:#parent.data.Room1Label}} but no {{:#parent.parent.data.Room1Label}}\nSo, the correct one is {{:#parent.parent.data.Room1Label}}\nSorry, but I find it right after my post.\nThanks anyway\n. Well, I managed to get the parent data by using {{:#parent.parent.data.Room1Label}}\nbut now I am facing the same problem while I am in a layout loop\n{{for #data}}\n   {{:#parent.parent.data.Room1Label}}\n{{//for}}\nIt does not return the property value. If I do the same outside the loop, works fine.\nAlso, the weird thing is (please have a look at the following code)\nIn \"Master template\" I have nested  template but it doesn't return any data\n{{for Room1  tmpl=\"#RoomTmpl\" layout=true  /}}\n//RoomTmpl\n< s cript id=\"RoomTmpl\" type=\"text/x-jsrender\">\n       {{:#parent.parent.data.NumberOfRoomsSearched}}\n< / script>\nBUT!\nIf I use it like the following, It worked as I excpected.\nIn \"Master template\"\n{{if NumberOfRoomsSearched>=1}}\n  {{for Room1  tmpl=\"#RoomTmpl\" layout=true  /}}\n{{/if}}\nAm I doing something wrong?\nThanks again Boris\n. Thanks a lot Boris. I liked the trick by using template variables. \n. Thanks a lot Boris!!\n. ",
    "kirbysayshi": "You're absolutely right regarding concatenating strings. \nThe results are so different from the other test you posted because that one is actually doing several DOM operations. Because DOM operations are so much slower than concatenating strings, you're actually just measuring the DOM operation, not the template execution. \nEither way, I'm curious if you discover something about the shootoff that causes the memory usage. I imagine it's one of the most intense jsperf tests, so maybe there is some bug or such that comes from a long test.\n. ",
    "Thinkscape": "This example is just an illustration. I'll try to narrow it down though.\n. It might be a problem of helper functions inside {{if}} tag.\nHere is an example: http://jsfiddle.net/hELrh/1/\n. Ad a) It is a bug then. If there is no data, I should be able to render a template regardless. Not all templates need data, nor always data will be available (i.e. empty set). There is no point of passing a dummy 1 or {} ?\nAd b) I debug a lot and try to work my way around your project, given there is 0 documentation for it (just random demos to fiddle with). Thanks for pointing out the slash. I guess your parser mimics xhtml there, so you use /}} for short tags.\n. Hmm... it might be a good idea to link those on demo/description page. \nWell, I spend a lot of time in debugger anyways, so I've already kinda disected jsrender. My feedback might be useful for beta, so future api changes are minimal. \nThe layout logic in jsrender is weird to me. I'm working with templates and layouts on server-side, but your usage of these terms is not clear to me. The primary goal of \"rendering a template without data\" is trivial: I might use jsrender to create an html skeleton of the whole page which I render client-side via javascript. In this context it means rendering a static page without any mutable data inside. \nCompare that to any server-side templating engine. Now recall the most basic, \"hello world\" example which would  probably be something like templatingEngine.render(\"some-template.data\") with a file some-template.data holding \"Hello world!\". It's the simplest use-case for a templating engine, yet it's forbidden in jsrender (because there is no data supplied), which might be an eyebrow riser for novice users (once jsrender \"ships\").\nHere is how it currently works in jsrender\njs\n    $.templates({  foo:' <h1>hello world!</h1> '  });\n    console.log($.render.foo()); // \"\" ???\nLayouts on the other hand are also a well-established term in server-side templating engines. I've never met a definition of a layout worded as \"a template without data\". If awaken in the middle of the night I'd recite that a layout is a template wrapping another template, used often for building graphical layouts of web pages. There is also \"template inheritance\" which is somewhat different than \"template layouts\", but often used for the same thing.\nThoughts ?\n. n/p. Let me know and I'll help you conceptually or with some PRs. You might reopen the issue so you have it handy. \nHave a nice weekend!\n. As I use jsrender as submodule, I appreciate the info. \nI've attached a comment on your commit.\n. @BorisMoore please read https://github.com/BorisMoore/jsrender/commit/fc7a28b0b2c670c548f7966bb22bf14038aed4e0#commitcomment-1360359 from last week.\n. Thanks mate :+1: \nSadly, I've migrated away from jsrender due to that, and a few other limitations/quirks I couldn't wait to be resolved (I was under time pressure back then). Though, I wish you all the best and good luck with the project! :-)\n. Here's how it looks like in Twig: http://twig.sensiolabs.org/doc/templates.html#filters\n. Great. Thanks!\n. let me test. The example was created for illustration, but my templates still don't compile. I need to narrow it down...\n. It throws here (line #521):\njs\n        try {\n            code = new Function(\"data, view, j, b, u\", code);\n        } catch (e) {\n            syntaxError(\"Error in compiled template code:\\n\" + code, e);\n        }\nThe code contains:\njs\n\"var j=j||jQuery.views,v,c=j._convert,ret; try{\\n\\nreturn \\\"<div class=\\\\\\\"message notice \\\"+((v=data.class)!=u?v:\\\"\\\")+\\\"\\\\\\\"><div class=\\\\\\\"text\\\\\\\">\\\"+c(\\\"showChatText\\\",view,this,data.text)+\\\"</div></div>\\\";\\n\\n}catch(e){return j._err(e);}\"\nAnd the original template is:\njs\n\"<div class=\\\"message notice {{:class}}\\\"><div class=\\\"text\\\">{{showChatText:text}}</div></div>\"\nWorks in IE9+ and all other normal browsers.\nHow it looks like in IE7 debugger:\n\n. That concludes it's a jsrender compiler bug. \nI'm not using js class keyword, merely a variable named \"class\" inside jsrender template. Compiler should escape/quote all offending keywords.\n. solution: (v=data.class) should read (v=data[\"class\"]) after compilation.\n. Your arguments are bogus:\n- It doesn't have anything to do with string prototype at the end of the day (it doesn't help nor break anything)\n- It doesn't slow compilation.\n- It doesn't increase complexity.\nThere is a distinct difference in accessing object  properties with [] versus a dot. It's been since first ECMAScript and ms jscript. I have never found any benchmark that would hint that dot is faster for accessing properties.\nYour solutions:\nAd a) I don't use keywords. I know at least 5 different meanings for the word class and it's a perfectly valid property name. In JS it's always advised and a common practice to use [] when accessing variable properties in an object (i.e in a loop or function).\nAd b) How do I quote a variable in jsrender ? Do you mean {{:#data['class']}} ? It looks more like a hack than a solution. It's not a problem with my template, but the compiler.\n. Being able to contribute and/or having time for it does not have anything\nto do with being thankful.\nThere was more issues with the project than I've reported so ultimatelly,\ninstead of trying patching it or arguing with @BorisMoore, I've switched to\nmore mature js-rendering project. Nothing more, nothing less. There's a lot\nof work put into jsrender and I'm grateful for it, which I've expressed by\nactively using the software, debugging and reporting my findings. The final\nword will always be of the (sole) maintainer with whom I might, or might\nnot, agree. I might not like the style of curation Boris excercises here,\nbut again, nothing to do with being thankful or not.\nCheers.\n. #parent.data.length will only work with arrays.\n. I get the reasoning, but the syntax contains too much boilerplate for my taste. I doubt a newbie would get that far. The rest of us would need to look it up in the manual each time.\nWould it be possible to wrap it in something like #count() ? Presumably it would take the closest loop variable and then try to determine its size.\n. It's not even beta, so now is the time to break it. The least there should be is js-compatible syntax, which is else if. Of course it wouldn't hurt to support all 2 or all 3 of them. If we went with common standards, else must not accept any parameter (a.k.a. last option)\n. You're right...  if elseif else makes the most sense then.\n. @johncrenshaw +1\nAs described in the ticket. That discussion and the case for if variable is exactly why so many C-like languages support elseif construct. ECMAScript omits it, but also defines if as a keyword, so no @BorisMoore. It is not expected to have a variable named if inside a template language built on top of javascript.\n. ",
    "linudaar": "Hi, \nI modified the file, check it out here: http://pastebin.com/x3wpRgs0\nAs you can see, I log the response (as you asked me to) but I also log the output of the render() method.\nI screenshotted the output in the browser (firefox):\nhttp://picpaste.com/pics/Capture1-hWOmRvZU.1336980070.PNG\nEven though the two render functions are supposed to render two different templates (tpl1 containing the <h1>, tpl2 containing the <h2>) according to the logs the render function renders both times tpl2 (<h2>), returning two times the response.UserName value rendered into tpl2. \nBut this is not a consistent behaviour though. If I refresh the page a few times, I sometimes get the expected output (tpl1 with response.Created and tpl2 with response.UserName). \nJust to make it clear: the response received via AJAX is expected to be the same. We call the same url two times. But that shouldn't be the problem...\nThanks, BR, \nstefan. \n. Looks like if I remove the attribute data-jsv-tmpl=\"..\" or I change it to something else thant \"_0\" and \"_1\" the rendering works as epxected! I'll let you know if this turns out to be the workaround/solution...\n. ",
    "aureliogomez": "Found the fix!\nhttp://forum.jquery.com/topic/dynamically-generated-listview\nIt\u00b4s not a JsRender issue but a trick you must do in jQuery Mobile when lists are created dynamically. It\u00b4s as simple as using the method .listview(\"refresh\") on the list you are adding elements to.\n. ",
    "atliadal": "Thanx for the quick response I totally missed that\n. ",
    "lbasov": "Finally solved this issue! You were right, problem was in my code, not JsRender.\nIn jQuery $.getcall i dont set desired type of content.\nPassing 'text' as fourth param in $.get call solved the problem.\njavascript\n$.get(file, null, function (template) {...},'text');\nBrowser dependency in this case were in returned value of AJAX callback (in Safari and Firefox return value was document object, not just string)\nNote: More info about accepted values are here: http://api.jquery.com/jQuery.ajax/ (in dataType section)\n. ",
    "codewithpassion": "Hi Boris,\nThanks for your answer. I found the issue, and of course, it has nothing to do with JsRender.\nMy example was vastly simplified and didn't mention that I use Joomla.\nAs I found out today, joomla in its wisdom, parses my template string, sees the href in there and adds the subpath to the page.\nThanks anyway! \n. ",
    "danieljsinclair": "+1\n. ",
    "syska": "I like when people suggest things ... says it does not add complexity, says that the facts are there and complains about a free open source project.\nWhen the creator @BorisMoore says @Thinkscape can just make a pull request to fix this simple problem the conversation dies.\nNot all people is thankful for free stuff. They could just as well ask people for money without giving anything in return.\nBtw ... I'm love jsrender\n. ",
    "Wancieho": "Ye im bringing this back from the land of the dead but @Thinkscape you need to tell me who your dealer is cause u are/were on some serious sh1t. Who even uses reserved words/syntax in their code besides its real purpose and then still complains? Maybe since posting this you realised the ridiculousness in your argument.. ",
    "takezoe": "You can use #parent.data.length to get length of the array.\nHowever I also want to alias to it such as #count or #length. It will make possible to write more intuitive and readable template.\n. ",
    "techseed": "BorisMoore, Thanks for this wonderful asset, Any progress for this #count, much needed :)\n. I think i did use something as a workaround, May be i was confusing my logic with {{:#get(\"array\").data.length}} . Will try hard this, next time.\n. ",
    "maxsdw": "I think this also apply on the case I want to get how many properties are inside an object, for instance, I have and array of objects which I'm iterating on using {{ for }}, and inside each iteration I need to know the length of the object being looped:\n{{for options}}\n  <option {{if #count() < 1 }}disabled{{/if}}>...</option>\n{{/for}}\n. ",
    "zzal": "My problem. Forgive me.\nStill, I wonder if there is a better way to integrate jsrender with backbone.js \u2026\n. ",
    "matthewbuchanan": "Bah, sorry, my error. The logic was calling a template that didn\u2019t exist.\n. ",
    "Krish2215": "I have a jquery datatable where I'm displaying child rows using js render. For both the columns on the table the data is coming from 2 different arrays. So how should I break the data into 2 separate rows which is currently displaying as comma separated list. ",
    "johnpapa": "I actually prefer just having if and else, where the latter works as an else or an elseif. Yeah, its different, but no so much as to be difficult to grasp. I think its cleaner ... but that's just my 2 cents.\n. Its not a readme, but you can check out my 2 articles on JsRender here: http://msdn.microsoft.com/en-us/magazine/hh882454.aspx and http://msdn.microsoft.com/en-us/magazine/hh975379.aspx\n. ",
    "johncrenshaw": "For real? \"Most preferred the current design\"? Who were you asking? Ruby developers? Leave {{else condition}} for backwards compatibility if you like, but please, for sanity, recognize {{elseif ...}}.\n. I actually anticipated that {{else if ...}} wouldn't work, due to the general syntax structure. {{elseif ...}} was my first guess, and when it didn't work, I was shocked, and wondered if elseif support had been omitted entirely.\nThis is about more than just whether it works or not. To a new developer, {{else foo}} doesn't look right at all. It looks like a syntax error. It is a syntax error in basically every other language. If some developers want to write it this way, that's fine, but IMO that syntax is just way too obtuse. I think both should be supported (one for backwards compatibility, the other for readability and because it is consistent with normal expectations).\n. Yup, I 100% agree that {[else if ...}} would be a bad syntax.\nIn terms of simplicity, I'm sure implementation would be trivial if else and elseif were identical in meaning, and the only reason to use one or the other is semantics.\nFor backwards compatibility I think you have to continue to support {{else foo}}, otherwise the ideal would be to require a parameter on elseif, and no parameter on else. That said, if you support {{else foo}}, I'm not sure how much benefit there really is to failing on {{elseif}} (with no parameter.) Library size may be more important at that point.\n. ",
    "njprrogers": "Hi Boris,\nThanks for your help on this. \nMy question was around accessing multiple JSON objects within the templates.\nRather than manipulating the JSON in the template, I chose to concatenate the JSON arrays which the jsrender templates can access with ease.\nThanks,\nNick\n. ",
    "samcov": "Wow, Wookies can be very offensive, LOL!\n@johnpapa - Both of those articles were fantastic, and very helpful to me, I'm using jsrender a lot, but Knockout over jsviews right now.\n@BorisMoore - The primary reason I looked at this thread was in a quest to see how close to Beta you were, and it sounds like you're very close. That's good news... thanks!\n. ",
    "pedz": "Note to others about the sample demos: you need to \"view source\" so that you can see the code.  Also, I've found the best way to grok them is to scroll to the bottom and work your way back up.  Usually the end will be the main driving part which will call a template, which calls --- etc.\nHTH\n. Ugghh!!  This is very disappointing.  This is a really basic part of jsrender.\n. Ah.  I didn't know it was just 0 (in my case).  I can work around that (for now).\nOn Dec 30, 2012, at 2:24 PM, Boris Moore wrote:\n\nWell it is the partcular case of creating an variable ~foo=xxx and the xxx evaluating to 0 or \"\" (falsey value) and then being accessed in a nested context - where it shows as undefined rather than 0. Not that common/basic I would say, but anyway a fix will be coming soon. In the particular case above a workaround would be to use a 1-based 'index' variable in the data, (or just on the variable such as by writing ~itemNumber = #index + 1).\n\u2014\nReply to this email directly or view it on GitHub.\n. My mistake is sorta complex but in essence I had no helper by the name I was trying to use.  I did but then that helper got renamed.  I'm generating helpers automatically to match the routes in my rails project and my routes changed but the.  Anyhow,  if the message had told me the name of the missing helper, I would have gone \"Ah ha!\" but instead I was stumped for a while.  I don't know if the \"...\" of what I saw had the name or not.\n\nAlso, I can't figure how a productive way to use firebug in these cases.\n. ",
    "lastnico": "You are right, and this converter solution is definitely even better! \nThanks! By the way, on which JQuery version JsRender is planned to be integrated?\n. ",
    "AMKohn": "Nevermind, I gave up and switched to Handlebars\n. I worked on it for a while and came to the conclusion that it was my array, it was objects all the way through instead of arrays inside of objects. I never fixed it and ended up switching to Handlebars.\n. I posted more code and demos on Stack Overflow: http://stackoverflow.com/questions/11563042/nested-for-issue-jsrender\nI am still not sure exactly what the problem was - I seemed to have matched the working demo perfectly structure-wise - and I don't know what the difference was data-wise. It's a news webapp so the array is big, it has complete articles etc.\nI don't know why Handlebars works and not jsRender, all I did was change the variable formatting.\n. Oops and thank you. I put it in and it is much faster than Handlebars.\nOn a sidenote, is there a better/faster way to insert the template other than via an append? I know that it's still the same speed if it inserts directly, but it renders \"live\" so the user see's the page loading and it seems to load faster.\n. ",
    "kanji-keraliya": "How can handle if condition of outside's variable of for loop?. ",
    "stonecourier": "I have spent some time looking at your code. You are doing a lot of catenation of strings. This causes lots of problems in IE7 (see https://developers.google.com/speed/articles/optimizing-javascript)\nSwapped around the code a bit so it uses arrays and the join method. This doesn't seem to have any impact on performance for the later browsers, and cuts the render time on IE7 down to 7 seconds.\nhttp://www.petermessenger.com/JsRenderDemo2.htm\n. Thanks for that. Unfortunately, for the medical application I am writing a lot of the government hospitals here are still using IE7 (enough of them that it is quite a problem at least). For templates with long strings, using push as compared to catenation can cut the rendering time down by more than half. So I am looking at whether my app can use two different versions of the rendering engine depending on the browser or something similar. \n. In the end to get the performance I wanted in IE7, it wrote custom functions, much like the precompiled versions, to generate the HTML (as a seperate javascript file). Yeah, it is a terrible solution, basically having HTML in the javascript, but the performance is streets ahead of doing it with any rendering engine and the likelihood of change in the future is low. Similarly, may have to look at removing need for KnockoutJS, as performance in IE7 isn't that great either.\n. ",
    "wookiehangover": "@stonecourier I think your best option is to choose another templating lib, especially one that can benefit from pre-compilation such as Handlebars or Underscore templates\n. ",
    "pvencill": "Nevermind, found it in this example: https://github.com/BorisMoore/jsrender/blob/master/demos/step-by-step/03_converters-and-encoding.html after a bit of additional searching. \n. ",
    "GrafRaf": "it looks like it's really a problem of IE, and only version 9\nand thank you for a fine framework :-)\n. ",
    "blanchak": "Using tabify fixed the issue for me as well (VS2010)\n. ",
    "tinybyte": "I think there seems to have a way around, using {{for /}} even for a single loop. that way just import the template in to the other template, I don't know if it's the right way to do this, but I'll close the issue, since I've managed to get my problem solved.\n. ",
    "Irrelon": "I agree this would be useful but keep in mind that most languages allow a \"pass-through\" in their switches, so we should support that too, meaning there must also be support for {{break}}, something like this:\n{{switch ~getvar('renderType')}}\n    {{case 'email'}}\n    {{case 'email2'}}\n        code\n        {{break}}\n    {{case 'file'}}\n        code\n        {{break}}\n{{/switch}}\nI'll take a look at the source and see how difficult it would be to extend jsRender to allow this. I've never looked at the source before but I'll give it a shot!\n. @BorisMoore Hmm that makes sense but I wonder if it is more readable than my example... for me it is not, but it's a matter of taste rather than functionality etc.\nThe way you've laid it out lends itself more to an if-then-else style of code I think... and if you're going down that route there's not much difference between the two? I guess the only diff would be that you don't evaluate the subject of the \"if\" on each \"else\" since it's value has already been evaluated and stored during the \"switch\" statement tag.\nThere's also an argument for programmers understanding the layout of the tags instinctively vs having to read a doc to know how to do it. Everyone knows the switch-case-break layout but your way is asking the dev to learn a new flow (sort-of). They'd definitely have to look it up.\nI'm not really married to the idea one way or the other, just pushing my thoughts up here for discussion.\n. @BorisMoore Agreed, you've already gone down a path and it makes sense to stick to that style. :)\nDo you mind if I give it a shot to add this functionality and create a pull request off the latest code?\n. So I got a basic system working:\nWasn't sure about how exactly to do this so I simply improvised what I needed.\nHere is the switch tag handler:\n```\n\"switch\": {\n    render: function() {\n        // This function is called once for {{switch}} and once for each {{else case}}.\n        // We will use the tag.rendering object for carrying rendering state across the calls.\n        // If not done (a previous block has not been rendered), look at expression for this block and render the block if expression is truey\n        // Otherwise return \"\"\n        var self = this;\n    function getDataValue (data, lookupArr) {\n        var objectKey = lookupArr.shift();\n\n        if (lookupArr.length) {\n            return getDataValue(data[objectKey], lookupArr);\n        } else {\n            return data[objectKey];\n        }\n    }\n\n    if (this.tagCtx.index === 0) {\n        // This is the switch tag so get the switch value\n        var switchData = this.tagCtx.params.match(/^(.*?)\\s/)[1];\n\n        if (switchData) {\n            // Get the data for the switch value from the data passed by the user\n            this.switchValue = getDataValue(this.ctx.root, switchData.split('.'));\n        }\n    }\n\n    // Check if we have a value to switch against\n    if (!this.switchValue) {\n        // No value, return blank string\n        return '';\n    }\n\n    // Get the case evaluation result \n    var ret = (self.rendering.done || !this.switchValue) || this.switchValue != this.tagCtx.props.case\n            ? \"\"\n            : (self.rendering.done = true, self.selected = self.tagCtx.index,\n                // Test is satisfied, so render content on current context. We call tagCtx.render() rather than return undefined\n                // (which would also render the tmpl/content on the current context but would iterate if it is an array)\n                self.tagCtx.render());\n    return ret;\n},\nonUpdate: function(ev, eventArgs, tagCtxs) {\n    var tci, prevArg, different;\n    for (tci = 0; (prevArg = this.tagCtxs[tci]) && prevArg.args.length; tci++) {\n        prevArg = prevArg.args[0];\n        different = !prevArg !== !tagCtxs[tci].args[0];\n        if (!!prevArg || different) {\n            return different;\n            // If newArg and prevArg are both truey, return false to cancel update. (Even if values on later elses are different, we still don't want to update, since rendered output would be unchanged)\n            // If newArg and prevArg are different, return true, to update\n            // If newArg and prevArg are both falsey, move to the next {{else ...}}\n        }\n    }\n    // Boolean value of all args are unchanged (falsey), so return false to cancel update\n    return false;\n},\nflow: true\n\n},\n```\nI used it against a test template:\n{{switch profile.PROFILE_TYPE case=\"business\"}}\n<div class=\"business\"></div>\n{{else case=\"student\"}}\n<div class=\"student\"></div>\n{{else case=\"individual\"}}\n<div class=\"individual\"></div>\n{{/switch}}\nIt works nicely for single cases, no pass-through yet but perhaps you could shed some light on how best to handle that?\nCheers!\nRob\nPS. If you are happy with the code I'll do a pull request with it. The getDataValue() method should be declared once somewhere rather than redeclared each iteration, not sure where I was supposed to put that so I left it there. Don't want to mess up your code :)\n. Also, I think there needs to be a handler for \"default\" to do a catch-all-others type. I'll add that in now...\n. Yeah sure no worries!!\nI understand what it is like maintaining a large complex code base all by myself (I'm the dev over at http://www.isogenicengine.com). I'm sure I've probably made some mistakes in the way I've implemented the switch tag, or at least replicated stuff that jsrender already does :)\nWhen you get a chance to glance over it I'd be happy to get your feedback and patch accordingly. Always happy to help out another dev when I can.\nCheers buddy! :)\n. Hey @BorisMoore can I pick your brain for a few q's?\nQuestion 1\nMy implementation \"works\" but doesn't work for some types of switch data. For instance if you do:\nExample 1\n{{switch ~someFunc(someData.someProperty) case=\"someValue\"}}\nThis will fail, however...\nExample 2\n{{switch someData.someProperty case=\"someValue\"}}\nThis works fine.\nThis is because I wrote a method to split the params (which in the case above looks like 'someData.someProperty case=\"someValue\"') by a whitespace to produce:\na[0] = 'someData.someProperty'\na[1] = 'case=\"someValue\"'\nThen I split a[0] by a period to get:\nb[0] = 'someData'\nb[1] = 'someProperty'\nThen I used this.tagCtx.view.data[b[0]][b[1]] to grab the data value.\nMy question is, how do I go about getting the value via existing jsRender code for Example 1? I  could parse it all myself with more regex'ing and then call the relevant function to get the value etc but I'm sure you're already doing this somewhere otherwise basic ~someFunc(hello) wouldn't work.\nI did a pretty extensive read of the code but it's a bit complex to divine the flow without stepping through the whole lot (which I also started to do) and figured it would be easier to ask :)\nQuestion 2\nIt's pretty easy for me to take the (tagCtx.props.case == switch value from Question 1) and then call tagCtx.render() for the correct section of the switch but based on the way that you're passing in the val parameter to the \"if\" tag, I wonder if it can be easily patched so that the val parameter gets correctly passed to the \"switch\" tag as well? Any pointers on how to achieve that would be awesome :)\n. PS, for those who are interested in getting access to my code as it stands (with basic working switch) you can grab it here:\nhttps://github.com/coolbloke1324/jsrender\n. For those experiencing similar issues always check for reserved keyword use in your templates!\nExamples that will fail:\n{{:someObject.class}}\n{{:someObject.if}}\n{{:someObject.var}}\n.class is gotcha as it will not throw on Chrome but will on IE (and we all dev on Chrome first right? :))\n. Hey again,\nSo I've pushed some revisions to the wrapper that I created based on your feedback and some changes I already had in my local version. I'm using this wrapper in a live site so it's been battle tested :)\n. Hey just a follow-up, I've published my NPM module for jsrender: https://npmjs.org/package/node-jsrender and will be actively maintaining it.\nYou can get the source from https://github.com/coolbloke1324/node-jsrender\n. @balexandre Thanks. That is what I'm doing at the moment, albeit via a helper method with a number passed to generate an array of variable size.\n. @BorisMoore Thanks those are v useful :)\nBy the way, I've been working on a client-side database with similar CRUD methods to MongoDB. It would be cool to be able to tie this directly into jsViews by providing a find query on the element, making it simple to do data-binding against a database! Check it out at https://github.com/coolbloke1324/ForerunnerDB\nThere is already a rudimentary data binding system in there but supporting jsViews would be better. Just something to think about for the future, I know you are busy with this project :)\n. Hey ya, that won't affect the node version AFAIK. Certainly can work around it if something pops up so gets my vote. Thanks for asking :)\n. ",
    "iboware": "I'm supporting this idea.\n. In this condition, tags between {{if}} {{/if}} blocks are not working too. Are there any temprorary solution to fix that problem except declaring tags in the global context? \nEdit: It's ok I carried \"if \" statement into the tag function. :)\nhtml\n{{if EntityType!=0}} {{RelatedEntity EntityID EntityType}} {{/RelatedEntity}} {{/if}}\n. Yes, this is fixed but there is another issue which appeared right after this update. I don't know if it is a bug, but I'll open a new ticket for it.\nThank you. :+1:\n. Yes, I managed that with the way you advice. Now, I have lots of issues to fix regarding to this valid markup requirement. This is not a bug but a small breaking change maybe. Thus, I'm closing the issue. Thank you.\n. Is it possible to do same thing for jsViews? I'm a newbie in Node.js, just wondered about it.\n. ",
    "AlexeyUzhva": "Thank you for so fast response!\nSo I'm looking forward for this release and staying with old version for now:)\n. ",
    "Niels-R": "Any idea which is the last version where the custom delimiters aren't broken?\nI'm using jsRender in my MVC templates which already use the {{ }} delimiters for server-side rendering.\nI'm currently using a very old version where {{for ...}} is still {{#each ...}} and integers with value 0 are rendered as empty strings...\n. ",
    "king5699": "I'm using django too.The delimiter ''{{'',\"{%\" are reserved characters in django.How can I replace them with \"<<\",\"<%\" in the current version? I read JsRender API,but I still don't how to customize the delimiters, not to customize tags.\n. I got it.Thanks very much.\n. ",
    "ranmee": "I've checked it again without running jsRender, and it appears you are right. The memory growth has something to do with IE vs the DOM manipulations with jQuery 1.7. I got the same results again with running jsRender.\nThe other leak I mentioned was due to another issue we found.\nThanks for the answer.\n. ",
    "marduke182": "Not sure, but maybe doesn't exists.\nInstead, jsRender offer custom tags you can make something like this:\njQuery.views.tag({\n      include: function( data ) {\n      var ret = \"\";\n      if( this.props.tmpl) {\n          ret =  jQuery(this.props.tmpl).render(data)\n       }\nreturn ret;\n}\n})\n. Yes, the issues is solve.\nIn commit 22, you fixed. I can't reply the error in that version.\n. Ty\n. ",
    "krues8dr": "I've actually been thinking about this issue for a couple of weeks myself, and I just ran aground on it again this morning.  \nI would suggest that in the current methodology of the {{for}} tag, rolling in the template behavior with it is a bit heavy-handed - it's doing two jobs instead of one.  The lack of a standard assignment for the iterated local data as {{each}} used to provide is also notable.  \nTo wit, if I'm composing a template in any other language, I'm likely to do something like (Jinja or pure PHP style):\n<ul>\n{{ for i, profile in profilelist }}\n    <li>{{ include('profiletemplate', {'profile':profile}) }}</li>\n{{ endfor }}\n</ul>\nThe benefit here is that I can have a wrapper around my included template (via the lis). I can also pass in local data as I need it with a reference that I have assigned, rather than exploding my data into the current space with no container 'handle'.  I think this also means that if I'm looping over an associative array or object, I can't get access to the key of the row I'm in - unless I've missed that in the docs and source somewhere.  I could be wrong on that.\nAs I understand it, in JsRender currently, I either must include the li in the sub template and use a single for loop, or something like this:\n{{for profilelist}}\n    <li>\n        {{for #data tmpl=\"#profile-template\" /}}\n    </li>\n{{/for}}\nWhich is, arguably, a bit confusing, and less flexible.  Just a thought.  Thanks for the awesome project!\n. ",
    "stevenmhunt": "Your example worked perfectly. For some reason, I was having problems with the external template referenced in the other template on my code, but I popped in the original version of jsRender and it started working. Go figure :) Anyways, that clears up what was going on with that; there are some messy examples online that take advantage of the weirdness in the template function so it wasn't completely clear I could just do that. It is a much more eloquent way of accessing the compiled templates. I'm going to go ahead and close this since that function of the code is in the process of changing. I had a good time today digging into this code and getting to know it a bit. I should also note that I've built some handy code to load templates from external files with jsRender, and I will be rolling that into a js library here shortly; I would appreciate any feedback on it if you have a chance. Thanks!\nSteven Hunt\n. No, I enjoyed your demos and found them to be very useful. I was referring specifically to one I saw on MSDN. However, I will take another look at them and see if I can think of anything to add; I've been really getting into jsRender recently since it's a whole lot easier than piecing together strings in javascript :) Fyi, just pushed rendertmpl to github if you're interested, used jsRender as the example templating engine. I've been having some fun today seeing what I can do with rendering templates and cleaning up some projects we've been working on here.\n. ",
    "wschalle": "Very nice work -- please keep going!\n. ",
    "spape": "This sounds good, if more people can contribute, even better. \nI will continue writing/updating documentation on my branch. \nPlease notify if you are ready to start documentation on jsviews.com so that I can contribute.\nThanks!\n. Thank you for your fast answer. But still I've doubts if it makes sense to provide two different entry points to the API (jsviews / jQuery.views) from the jsrender point of view. Who do you address when writing documentations? People using jQuery or the others? Seems like a potential source of frustration for other developers that wants to give jsrender a try. \nI'm currently maintaining a RubyGem for Rails called jsrender-rails, due to the fact that jsrender is beta now and the latest changes.\nThe Gem is providing/registering jsrender-templates to be automatically available on the client side by adding them to the Rails-Asset-Pipeline. Anyway, I'dont know if the projects that are using my Gem in the future are using either jQuery or not, I just want to make jsrender-templates available. And the fact that I've to build in the switch var $views = jQuery ? jQuery.views : jsviews; make things harder.\nBy the way, making global.jsviews = $views; also available global even when there is jQuery present could fix that same problem. A single point of entry for the jsrender API.\nI think that I will not be the only one in the future that runs into the same problem.\nWhatever, I will still go on using jsrender because I like it ;), just keep an eye on that \u2013 what I think could be a problem.\n. It seems that in general u like using shortcuts like $.link etc. using the $ namespace and for sure it makes sense NOT polluting the main jQuery namespace to much and it's a correct decision that e.g. the converters() going under $.views.converters(), totally agree.\nBut it in the case that $ (jQuery or different framework that is using that) is not present, why not using it?\n``` javascript\nif (jQuery) {\n    ...\n} else {\nif(!global.$){global.$ = {};}\n$.render = $render;\n$.views = $views;\n$.templates = $templates = $views.templates;\n\n...\n\n}\n```\nIn the case that the $ is not used in the global namespace u create it. If there is something else that is already using it (but not jQuery) we are just extending the $. The only thing that for sure we can not use without jQuery is the $.fn.render = renderContent;.\nAfter that u can use jsrender the same way with/without jQuery. And documentations describing $.render[\"my_template_name]({data: value}) addressing both: people using and people not using jQuery.\nSo far I dont see a disadvantage. What do you think?\n. or in my case:\njavascript\n(function($) {\n  $.views;\n})(jQuery ? jQuery : jsviews);\nsounds like a good idea ;)\n. But if you mention it in the documentation anyhow:\njavascript\n(function($) {\n  $.views;\n})((typeof jQuery !== \"undefined\" && jQuery !== null) ? jQuery : {views: jsviews});\nshould already work for the existing code. The code before is not working when jQuery is not defined I guess.\n. ",
    "itechnology": "Forget the count ? :)\nAlso i'm currently converting from jQuery.Tmpl to jsRender ..most of the syntax is pretty good, but other things are quite horrible to implement. For example\n```\n// jQuery.Tmpl\n{{each Users}}\n    ${Pseudo}\n{{if Photos.length > 0}}    \n    {{each(i, photo) Photos}}\n        <img src=\"${getUrl(photo.Id)}\" />\n    {{/each}}\n{{/if}}\n\n{{/each}}\n// jsRender (Nicer!)\n{{for Users}}\n    {{>Pseudo}}\n{{for Photos}}\n    <img src=\"{{>~getUrl(Id)}}\" />\n{{/for}}\n\n{{/for}}    \n// jQuery.Tmpl\n{{each Users}}\n    ${Pseudo}\n    {{if Users.length > 1 && ($index === 2 || ($index === (Users.length-1) && imm.features.phone))}}\n        some text\n    {{/if}}\n{{/each}}\n// jsRender (Arggg!)\n{{for Users}}\n    {{>Pseudo}}\n    {{if (#get(\"array\").data.length > 1 && (#view.getIndex() === 2 || (#view.getIndex() === (#get(\"array\").data.length-1) && ~imm.features.phone)))}}\n        some text\n    {{/if}}\n{{/for}}  \n```\nThings like #get(\"array\").data.length and #view.getIndex()  just dont feel natural or right\n. Having a wrapper to the current object like #data wouldn't shock me, example\n{{for Users}}\n    {{>Pseudo}}\n    {{if (#data.length > 1 && (#index === 2 || (#index === (#data.length-1) && ~imm.features.phone)))}}\n        <li>some text</li>\n    {{/if}}\n{{/for}}\nIn Jquery.Tmpl inside the loop we could still access Users.length, in jsRender it seems like the object is hidden now, having a quick access like via #data would have been nice ..maybe i missed something ?\n. Hey thanks for the reply !\nThe above code looks quite better, any chance you could add some kind of reference section to these kinds of internal functions #data, #index, #parent, #getIndex(), ~root, etc to the jsviews.com website ? I actually tried #root cause i came across some posts here but don't remember a mention of the ~tilde, and ended up using #parent.parent.data which felt quite quirky but worked.\nAnyways, i managed to convert all 30 or so templates of our site to jsRender today thanks to the docs on the jsviews site & various comments around here, so that's a relief !\nJust hope it's just as or almost as fast as jQuery.Tmpl (i was using the join() trick to get a speed improvement), since this is just a first pass migration, and my templates where heavily using function/variable comparisons outside of the collection i pass to render(). I'm now actually passing in a huge object to the wrapper i made around render() that's almost as fat as jQuery itself ..but haven't seen any slowdowns for now, not that i would expect any.\nRemark about #count was about your last post, it made it seem like it would be added by now since the post was 3 months ago.\nIn any case i'm glad to see jsRender approaching final ..i've been hawkeyeing the project for 2 years now, not that jQuery.Tmpl is bad, it's great, i just feel much more comfortable using something that's maintained !\nGreat work on the project so far, and hope jQuery team will officialize it this time around\n. ",
    "andreipfeiffer": "I also have this issue, and still bangin' my head to figure out what is the conflict.\n. Well, I think I have figured out the problem:\nI was testing an object like this {{if default===true}}. The problem is the earlier versions of IE will throw errors if you use objects named: default, class, super, value, etc, because they are reserved words.\nWhen using them in defining objects, you need to wrap them in quotes:\n{\n    \"value\": true\n}\nI have just renamed my object, and it's working now.\n. You should check the objects that you are passing to the template. You should put the reserved words between commas (\"\"), or rename the objects.\nSee here a list of reserved words:\nhttps://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words\n. There is http://www.jslint.com/, an online tool to check the quality of your JS code, but I see that it doesn't track reserved words. I don't know of any other idea.\n. ... and to add to what Boris said, from my personal experience, the actual error line is 1 above the number displayed by  IE's debugger.\n. ",
    "koniczynek": "So this is related not to jsrender.js where it occurs but to my templates, which use \"banned\" names? And if so, what is the easiest way of identifying place I need to check?\n. Thanks, will look into it tomorrow.\n. Is there an easy way of finding which data property name causes this? I checked my templates and it seems that I do not have reserved words in them...\n. I use IE Tester suit under Windows 8 - I do not have access to native IE8 with debugging tools. The error thrown is the same as in the first post: \"exception thrown and not caught\" with line number which is line 669 in jsrender.js, here is a code snippet:\njavascript\ntry {\n    code = new Function(\"data, view, j, b, u\", \n} catch (e) {\n    syntaxError(\"Compiled template code:\\n\\n\" + code, e);\n}\n669 is the line with catch expression.\n. Sorry for missing your point Boris, I enabled compat mode in IE10 and I see in the console that error is thrown here:\njavascript\n    function error(message) {\n        if ($views.debugMode) {\n            throw new $views.Error(message);\n        }\n    }\nThere seems to be an exception in throw new $views.Error(message);\n. I managed to extract error message that should be thrown in this code:\n```\nSyntax error\nCompiled template code:\nvar j=j||jQuery.views,t=j._tag,ret; try{\nreturn \"\\n                \"+t(\"if\",view,this,1,{data: data},\"type\"==\"mail\")+t(\"else\",view,this,2,{data: data},data.if,\"type\"==\"friend\")+t(\"else\",view,this,3,{data: data})+\"\\n            \";\n}catch(e){return j._err(e);}\n```\nI tried replacing {{:type}} with {{:#data[\"type\"]}} and {{if type == 'friend'}} with {{if \"type\" == 'friend' }} but to no avail. Any suggestions?\n. You are right about the {{else if ...}} thing, what's surprising is that it worked in Firefox/Chrome/Opera/Safari and IE10 like a charm... After correcting this there is no longer an error. Thank you for your help.\nps: I tried putting this code into the editor but somehow missed on the data.if part.\n. And what about the error not being visible in IE8, I inserted simple alert(message) into the script in order to see this error. throw that is there by default gives this weird error: exception thrown and not caught\n. ",
    "BenSwitzer": "i've updated the template, but am still having the same issue.\nhttp://jsfiddle.net/f9sw7/11/\n. i put a thead around the tblCaseDocuments header area, thinking that may be it, but still no success.  \nhttp://jsfiddle.net/f9sw7/13/\n. Yep, no problem...I've created as simple as I think it should be.  I've used jsrender successfully several times, but this is my first attempt at using the for.\nhttp://jsfiddle.net/f9sw7/16/\n. I guess there is something wrong with the template.  I took a template of yours and applied it without issues.\n. sorry for the trouble...Thanks for the help\n. ",
    "toddb": "Cheers. It is such a small thing!\n. Nice. Thanks\n. ",
    "mmartinez0": "Boris,\nI appreciate your prompt response. Is this the best way to post questions\nlike this one? Is not really a issue, though.\nGreat plugin!\nOn Tue, Dec 4, 2012 at 12:03 PM, Boris Moore notifications@github.comwrote:\n\nYes, you have the choice. See \"Using {{: }} or {{> }} to render data\nvalues with optional conversion or HTML encoding\" -\nhttp://borismoore.github.com/jsrender/demos/step-by-step/03_converters-and-encoding.html.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/BorisMoore/jsrender/issues/172#issuecomment-11007809.\n\n\nThank you,\nMiguel Martinez\nWeb Developer\n713-443-3220 (Mobile)\nhttp://www.miguelmartinez.com\n. ",
    "webwurst": "Stack-OverFlow is nice, but maybe we could use something like Google-Groups for this kind for HowTo questions?\n. ",
    "larjohn": "I am trying to render a report generated by dynamicreports (a Java reporting library)\nThis line \nerror('Parent of  must be ')\ncauses the rendering to stop. I can't really modify dynamicreports in order to include tbody tags. \nIs there a way to avoid validation and let the browser be responsible for it? \n. ",
    "balexandre": "Hi blowsie,\nI use nested templates a lot, and all you have to do is the exact same thing, just have an id and render it with your data... it's the same process and the first template.\n. I don't do that, I render it externally and call the data (witch normally comes from other call) and I get both the file and data externally, as I have pointed out in a stackoverflow answer\nthen I do something like:\n``` javascript\nvar item = {\n    callUrl: '/' + client + '/Winners/GetAllPossibleWinners',\n    controller: 'winners',\n    name: 'winnerselection',\n    args: {\n        prizeId: $(this).attr(\"data-prize-id\"),\n        prizeDay: $(this).attr(\"data-prize-day\"),\n        winnerId: $(this).attr(\"data-winner-id\"),\n        dayFrom: $(this).attr(\"data-day-from\"),\n        dayTo: $(this).attr(\"data-day-to\"),\n        page: 0\n    },\n    selector: '#tbl-winners'\n};\nmy.data.loadTemplate(item, function (args, data) {\n    // big list\n    my.data.loadTemplate({\n        callUrl: '/' + client + '/Winners/GetAllPossibleWinnersList',\n        controller: 'winners',\n        name: 'winnerselection.list',\n        args: {\n            prizeId: args.prizeId,\n            prizeDay: args.prizeDay,\n            winnerId: args.winnerId,\n            dayFrom: args.dayFrom,\n            dayTo: args.dayTo,\n            page: 0\n        },\n        selector: '#winners-selection-list'\n    }, function (args, data) {\n        // random list\n        $(\".winner-selection-wrapper\").find(\".loading\").show();\n        my.data.loadTemplate({\n            callUrl: '/' + client + '/Winners/GetRandomPossibleWinners',\n            controller: 'winners',\n            name: 'winnerselection.randomwinners',\n            args: {\n                prizeId: args.prizeId,\n                prizeDay: args.prizeDay,\n                winnerId: args.winnerId,\n                dayFrom: args.dayFrom,\n                dayTo: args.dayTo,\n                page: 0,\n                totalPages: data.possibleWinnerResult.TotalCount,\n                nrWinnersToDraw: data.prize.NrWinnersToDraw\n                // decimal prizeId, int? dayFrom, int? dayTo, int totalPages, int nrWinnersToDraw\n            },\n            selector: '#winners-selection-random'\n        });\n    $('html, body').animate({ scrollTop: $(document).height() }, 'slow');\n    $(\"#winners-selection-list\").hide();\n});\n\n});\n```\nhere's my current loadTemplate method\n``` javascript\n    loadTemplate = function (item, callback) {\n        //my.utils.renderExtTemplate(item);\n    $(item.selector).empty();\n    $(item.selector).prev().find(\".loading\").show();\n\n    $.ajax({\n        url: item.callUrl,\n        cache: false,\n        data: item.args,\n        success: function (data) {\n            item.data = data;\n\n            if (data.error.length > 0) {\n                my.utils.renderExtTemplate({\n                    controller: 'common',\n                    name: 'error',\n                    data: data.error,\n                    selector: item.selector\n                });\n            }\n            else {\n                my.utils.renderExtTemplate({\n                    controller: item.controller,\n                    name: item.name,\n                    data: data,\n                    selector: item.selector\n                });\n            }\n\n            $(item.selector).fadeIn();\n        },\n        error: function (xhr) {\n            //this.showError(xhr);\n\n            my.utils.renderExtTemplate({\n                controller: 'common',\n                name: 'error',\n                data: '<h4>' + xhr.statusText + '<h4><p>' + xhr.responseText + '</p>',\n                selector: item.selector\n            });\n        },\n        complete: function () {\n            $(\".loading\").hide();\n            if (callback) callback(item.args, item.data);\n        }\n    });\n\n\n    return false;\n},\n\n``\n. in themy.utils.renderExtTemplate`\n``` javascript\n    renderExtTemplate = function (item) {\n        var file = getPath(item.controller, item.name);\n    // log\n    this.logMessage('loading: ' + file);\n\n    // get and load template\n    $.when($.get(file))\n     .done(function (tmplData) {\n         $.templates({ tmpl: tmplData });\n         $(item.selector).html($.render.tmpl(item.data));\n\n         // Tooltips\n         $(\"[rel='tooltip']\").tooltip();\n     })\n    .fail(function (result) {\n        //this.logMessage('Loading template has failed: ' + result.statusText);\n        alert('Loading template has failed: ' + result.statusText);\n    });\n}\n\n``\n. this are global methods, and I do render a lot, so I simple call myloadTemplate` and it will get an external file, plus call the API and get all information to be bind into the external template.\nfor something like this:\n{{for data tmpl='~childTemplate('#tmplName')' /}\nyou need to pass the data in the first call as well, and I do not want that, as each template get's their own data from an API call.\n. You will learn all this in John Papas Puralsight Videos\nhttp://pluralsight.com/training/courses/TableOfContents?courseName=jsrender-fundamentals\nYou can get free trial, and if you're a member of Website Spark you will get 90 days trial\n. can you please indent your code 4 spaces or use the link below to correctly format your message?\n\n. {{for}} requires an array and 5 is a number ... but if you have:\nvar myVar  = [\"1\", \"2\", \"3\", \"4\", \"5\"]; it will work for {{for myVar}}\n. ",
    "IDisposable": "The simplest fix, when doing things with jsrender or similar rendering tools (given the following):\nhtml\n<script id=\"newImageTemplate\" type=\"text/x-jsrender\">\n    <div class=\"upload-image\">\n        <div>\n            <div class=\"input-group\">\n                <label>Click to upload an image.</label>\n            </div>\n        </div>\n    </div>\n</script>\njavascript\n$imageBox.replaceWith( $('#newImageTemplate').render());\nChange the code to look like this...\njavascript\nvar newImage = $('#newImageTemplate').render();\nnewImage = $.trim(newImage );\n$imageBox.replaceWith(newImage );\nThe issue is simply that the template has leading white-space (newlines and blanks/tabs) which trip up the replaceWith because it is expecting a sizzle selector, and as of 1.9.0 this breaks because to be interpreted as HTML the first character has to be <\n. ",
    "liuyh": "html\n<table>\n    <thead><tr><th>Title</th><th>Languages (+specialMessage)</th></tr></thead>\n    <tbody id=\"movieList2\"></tbody>\n  </table>\nhtml\n    {{for movies ~theater=theater ~index=index}\n        <tr>\n            <td>'{{>title}}': showing at the '{{>~theater}}'  idx{{:~index}}</td>  //bug index has value\n            <td>\n                {{for languages ~title=title}}\n                    {{>#data}}{{>~specialMessage(#data, ~title)}}<br/>\n                {{/for}}\n            </td>\n        </tr>\n    {{/for}}\n``` javascript\n var model = {\n        theater: \"Rialto\",\n                 index:0,\n        movies: [\n            {\n                title: \"Meet Joe Black\",\n                languages: [\n                    \"English\",\n                    \"French\"\n                ]\n            },\n            {\n                title: \"City Hunter\",\n                languages: [\n                    \"Mandarin\",\n                    \"French\",\n                    \"Chinese\"\n                ]\n            }\n        ]\n    };\n$( \"#movieList2\" ).html(\n    $( \"#movieTemplate2\" ).render( model )\n);\n\n```\n. I've edited a problem\n. thank you for your reply, I understand\n. ",
    "dondmcg": "Boris really excited about the future of jsRender and jsViews!  Where is the project at as far as reaching V1.0.  Even the best laid plans get pushed out but is this still on track?  In discussions with my powers that be.\nThnx\nDon\n. Boris,\nThank you so much for your response.  I feel terrible asking the next question simply as it sounds like your plate is full enough, however I feel the answer may help others in planning how they handle updates to existing jQuery templates implementations, so here goes.\nDo you know if jQuery templates will be safe to stay with until this project moves to V1 so clients can then port to the new jsRender suite.\nOR\nDo you suggest temporarily porting to something else such as handlebars (other) until jsRender suite is stable and released? \nIf confidence is low on staying with jQuery templates, what would you suggest as a temp solution for clients who would otherwise port to jsViews.\nthank you and I believe many others believe strongly as well.\n. THANK YOU BORIS.\nYou are a credit to this profession. In a nutshell U ROCK\n. ",
    "darkrain": "Oh. thanks! i have one more question. How i can use loop for with object instead of an array?\n. You can  use debug.\nadd helper:\n$.views.helpers({ 'logs': console.log });\nand replace \"WANT TO ACCESS PARENT FROM HERE\" on {{:~logs(#data, 'mydebug')}}\nand them see console, try to log #parent.data e.t.c \n. I had this problem, when i used in object key \"class\", ie\n{\"class\":\"foo\"}\nI used this object in my template\n. ",
    "bdelaney": "Thanks for being helpful Boris. I was totally off here. I had to grok jQuery delegation of events, navigating hierarchy of elements, and filtering selectors. Then I cleared it all up. Plus, I had to poke the elements with Chrome devtools to realize that everything was right there in front of me. My bad for jumping to the conclusion that JsRender had anything to do with it. It's a great tool! With or without JsViews.\nIn a separate Issue, I will document another little caveat I came across while using JsRender to create a table of links from data. More testing though and a jsFiddle before I 'cry wolf' again.\nThanks again for your attention to these wonderful tools.\n. ",
    "tomo666": "Sorry, it was in deed. data-bindings were for JsViews.\nAt the time this post was submitted there were no solutions on the forums (and online), but it seems like a similar issue was posted few days after this thread was created. Issue no.148 https://github.com/BorisMoore/jsviews/issues/148 in the JsViews issue list seems like what I am looking for an answer. I will watch no.148 instead and close this issue.\nThanks for the reply, and for the great library, as always :)\n. Hi Boris. Sorry for not making it clear enough.\nWhat I really wanted to achieve is having a drop down item in an array (i.e. language_list) which is also binded to a data (i.e. myData).\nSo if a selection in the drop down changes, then the item in the data will change via obserbale.\nI thought using {{for}} might be the solution, as described in my previous post, but believe there should be an easier way to do this.\nHTML\njavascript\n<select id=\"containerLocale\"></select>\n<script id=\"tpl_containerLocale\" type=\"text/x-jsrender\">\n    <option data-link=\"value{>lcid} {>name}\"></option>\n</script>\nJS\njavascript\n<script>\n    // These data are retrieved via prior ajax call in json format\n    var myData = [\n        { \"user_id\":0, nick_name: \"test user1\", language_id: \"en-us\"},\n        { \"user_id\":1, nick_name: \"test user2\", language_id: \"en-us\"}\n    ];\n    var language_list = [\n        { \"lcid\": \"en-us\", \"name\": \"EN-US\" },\n        { \"lcid\": \"ja\", \"name\": \"JAPANESE\" }\n    ];\n    // Assign and bind template & data\n    var template = $.templates(\"#tpl_containerLocale\");\n    $(\"#containerLocale\").link(template, language_list);\n</script>\nSo the question is, how could I link myData?\nNote that the drop down items needs to be generated prior to linking myData.\nI've been using nested templates, iterations (using {{for}}) but cannot seem to achieve it.\nCurrently as a quick solution, I am just generating the language_list with a simple JS instead of using JSRender/JSViews, and then using data-link to link myData.\ne.g.\nHTML\njavascript\n<div id=\"containerLocale\"></div>\n<script id=\"tpl_containerLocale\" type=\"text/x-jsrender\">\n    <select id=\"cmbLocale\" data-link=\"language_id\"></select>\n</script>\n<input type=\"button\" onClick=\"alert(myData[0].language_id);\" value=\"test\"/>\nJS\n``` javascript\n\n    // These data are retrieved via prior ajax call in json format\n    var myData = [\n        { \"user_id\":0, nick_name: \"test user1\", language_id: \"en-us\"},\n        { \"user_id\":1, nick_name: \"test user2\", language_id: \"en-us\"}\n    ];\n    var language_list = {\n        \"en-us\":\"English (U.S.)\",\n        \"ja\":\"Japanese\",\n    };</p>\n<pre><code>// Assign and bind template &amp; data\nvar template = $.templates(\"#tpl_containerLocale\");\n$(\"#containerLocale\").link(template, myData[0]);\n\nfunction generateDropDownItems(obj, itemArray, defaultIndex) {\n    $.each(itemArray, function(key, val) {\n        obj.append($(\"&lt;option&gt;\", { value : key }).text(val));\n    });\n    // Select the chosen index\n    if(defaultIndex != -1) $(obj).val(defaultIndex);\n}\n\ngenerateDropDownItems($(\"#cmbLocale\"), language_list, myData[0].language_id);\n</code></pre>\n<p>\n```\nIf anything unclear, please let me know, thanks.\ntomo.\n. ",
    "badiezadegan": "Yes. This is what I am looking for but I want it to be passed as a property.\nNow I write the list tag as follows and it works excellent:\n{{list items=\"[{firstName:'Amin', lastName:'Badiezadegan'}]\"}}\n{{format}} {{>firstName}} {{>lastName}} {{/format}}\n{{/list}}\nthe items property is evaluated to an array using eval() (if it is not an array) and the format tag sets its parent format property as follows:\nthis.tagCtx.view.tag.tagCtx.props.format = this.tagCtx.content;\nthen I use it in the list tag as follows:\n<ul>\n     {{for items}}\n    {{if #parent.parent.data.format}}\n    <li>{{include tmpl=#parent.parent.parent.data.format /}}</li>\n    {{else}}\n    <li>{{>#data}}</li>\n    {{/if}}\n    {{/for}}\n</ul>\nEverything is OK but I am looking for a way to pass the format as a string which is not eligible.\n{{list items=\"[{firstName:'Amin', lastName:'Badiezadegan'}]\" format=\"{{>firstName}} {{>lastName}}\" /}}\n. Thanks a lot. I'll use the block syntax. It seems more readable.\n. I use eval for passing functions as strings. In some cases I need functions to be declared and passed to templates inline not as the part of options which is passed to render function. But it may be for another issue. Thanks again.\n. Thanks.\n. ",
    "SeriousSamP": "Thanks for the quick response and sorry for not finding it myself.\n. ",
    "jxlanxin": "I have found I solution at this page,it's not very convenience,anyhow,it can do the job.\n. ",
    "vineet": "fwiw, it maybe a corner case with the way i'm using things -- your demos work fine in IE8.\n. Thanks a lot guys!  It actually turned out to be a typo in one of the many templates that get dynamically loaded.  On a close for loop I had {{>for}} instead of {{/for}} -- for some reason it didn't cause a problem in any of the other browsers...\n. ",
    "ChrisHB": "Its not with a particular template. I just meant that it correctly fills out and renders two different templates without any problems. When I try to render more then one of either template it fails saying that the 'item._is' is a read only value when it was clearly being assigned to before.\nThis page works fine on chrome, firefox, IE, and safari 5.1. All other jsrender implementations work in safari 6.0 except this page. The only thing I can think of that is different is how I do the rendering. I grab information from a database via ajax. When the ajax call returns I call the render function on a template passing the information in, get the resulting html, and display it to the page. Then I make another ajax call getting more information and repeating the process until all information has been loaded. The other implementations I get all information and make one render call instead of multiple. I am not sure if that makes a difference. \n. Sorry here is the template\n```\n\n\n\n\n{{>Value}} \n\n\n\n\n\nIcons\n\n\n\n\n        </td>\n        <td>\n            <div id=\"divItems_{{:~arrIndex}}\">\n                <table id=\"tbItem_{{:~arrIndex}}\">\n\n                </table>\n            </div>\n        </td>\n    </tr>\n\n```\n. Unfortunately I cannot. I am using the safari 6.0 browser development tool to help me debug and step through the java-script.  It does have a very simple call stack but with no way, that I know, of copying the contents. I attached pictures showing the call stack. The call stack that they show is: My call for rendering the template(image 1), the function renderContent being called(image 2), then theStore function being called(image 3)\nImage 1: \nImage 2: \nImage 3: \n. I do not think the type of the object was being changed. It was not the rendering of the template that caused the error but this line: $.views.helpers({ arrIndex: itemIndex }); I had a for loop that made ajax calls to retrieve information. When the call returned i would pass the index to be used in the template and then increment it after it rendered. When the next ajax call returned it would again execute the code to add the index to be used in the template. It would always break at this line. I changed my implementation around so it does not need the index and that all information is gathered before any render call is made. You can see an example of my call made in image 1 from my previous post. That implementation worked fine on  all other browsers including safari 5.1. Was I using the helpers function incorrectly? Sorry for the delayed response!\n. Yea the call stack must have been wrong. I am not a big fan of the new GUI they have for 6.0. Thank you very much for your help, and patience in this situation!\nSincerely,\nChris\n. Yes the issue has been fixed. Thank you very much!\n. ",
    "mafar": "Ok I figure out a way from http://msdn.microsoft.com/en-us/magazine/hh882454.aspx but I am getting an error.\nI can not convert htmlString to jquery object which is needed for isotope appended function.\nKindly help.\nWhen i try to convert htmlString to jquery object , I get \"Error: Syntax error, unrecognized expression: <div class=\"panel\" >\njava\nvar htmlString = $(\"#panelTemplate\").render(json) ;\n$('#container').append(htmlString);\n// convert htmlString to jquery object and append to isotope\nvar $newElems = $(htmlString);\n$('#container').isotope('appended', $newElems);\n. Ok solved it. Problem was with jquery 1.9, and htmlString  had to be free of leading white space to convert it into jquery object. I think this should be handled/fixed in jsrender too ???\nTurns out string starting with a newline (or anything other than \"<\") is not considered HTML string in jQuery 1.9\nSo to fix it ..\njava\nvar htmlString =  $(\"#panelTemplate\").render(json).trim();\n. yes. ofcourse the othe way around would be to convert string list into array either via server or with js but it would be cool if jsrender have it built in.\n. ",
    "Pieeeeeee": "Thanks, I tried that, and it works when I use a string, like so: {{include ~myparam=\"test\" tmpl=\"#FieldButtonsTemplate\" /}}\nBut it doesn't when I try this ~myparam=\"{{:Username}}\". The template doesn't render at all with this line.\n//edit\nI know it's pretty useless when you can access {{:Username}} in the nested template. I found a workaround.\n. ",
    "michael-lang": "There is this jsRender related package on NuGet.  It would be good to have a pure jsRender package however, instead of it being bundled with all of HotGlue.\nhttp://www.nuget.org/packages/HotGlue.Template.JsRender/\n. ",
    "Jogai": "I cant seem to find the correct type packages. I have @types/jsrender, but those are made by Kensuke Matsuzaki @zakki. Ok, but this is non-standard, and having one package on the registry makes it more confusing. I'll rather have it like momenjs does, just distribute it along in the main package.. Sorry, you're right. I'm using another component which depends on jsrender so I should check better where the issue originates.\nMy test case for the interested: https://codepen.io/jogai/pen/NJYrZB. ",
    "demiro": "Hello,\nthanks for responding so fast.\nThe template can be found here:\nhttp://jsfiddle.net/Rmzwr/1/\nit is put in the bottom of the page, before \nand I define the JS portion in my main.js part that is declared before this template inside jquery block\nIt is working fine on all other browsers... ie8 though is giving me the error\n. Solved the problem.\nFor some reason script element (the one with the template) was (nmost of the time) not defined.\nIf I put the template script in the header section, it works all the time!\n. ",
    "niramber": "Thanks Borris, your way is a much more elegant inline way of doing it.\nHow would you pass it though it If there where multiple nested if statements ie:\n{{ if x>y ~index=#index}}\n     {{ if j>k ~index=#index}}\n          {{ if l>m ~index=#index}}\nand 2 last questions:\nwhats the best way to debug or view the template\nis there a while loop statement\n. ",
    "ralegria": "Sorry, what if I want to use {{>#data}} within {{if}} block, see example below:\n{^{if ~mediaType(#data)==\"youtube\"}}\nThe #data is where I want to use the {{>#data}} block.\nThanks\n. ",
    "DilipK01": "Thanks, Boris! I should have searched the site first. I did search on Google though, and could not find anything!\n. ",
    "jbblanchet": "By the way I'm aware that I can access the index through #parent.index, but it seems counterintuitive that index would refer to the {{if}} in that context, and not the {{for}}.\n. Hi, \nThanks for the (very) quick response. I looked at open issues before posting, but I must admit I didn't search the closed ones. My bad, sorry for the duplicate. We've been using jsrender for over a year and we love it.\nBut the number of duplicates seems to indicate I'm not the only one expecting the index property to refer to the for. I understand that it refers to the current view context (that's why I used parent.index), but maybe you could consider making un-indexed views either inherit the index from their parent, or crawl back the tree to the nearest indexed view. It's just a suggestion, but as a user that's the behaviour I'd expect.\n. Yeah, I left my reply open to answer the phone and replied to your original comment, not the updated one :).\n. ",
    "neopostmodern": "So I tried adapting some code to that now, but this appearantly doesn't update:\n<div class=\"inline-block\" data-link=\"\n         css-font-weight{:(~root.LocalizationProjects[~root.CurrentLocalizationProjectIndex].LocaleIds.length && ~contains(~root.LocalizationProjects[~root.CurrentLocalizationProjectIndex].LocaleIds, Key)) ? 600 : null}\n         {on 'click' ~root._ChangeLocaleStatusForProject}\n         \">\n        {^{:Name}}\n(~contains is just a short (...).indexOf(...) !== -1)\nIs there another way to tell the CSS-data-link to update? \n        \n. ",
    "ctoicqtao": "thanks so much, i will try it.\n. it works, thank you so much.\n. ",
    "nfplee": "I've just played around with this and realized my safe html format function was converting <p></p> to <p />. I re-produced the problem with jsfiddle:\nhttp://jsfiddle.net/7Yxg4/\nHowever on review I don't consider this to be a bug with jsRender but with my html sanitizer. Therefore I have closed the issue.\n. ",
    "zetorama": "Boris,\nCan you at least make releases a bit more often? Even while in beta. As bower looks through tags in repositories, so when I set up jsrender as a dependency, it's impossible to install a fresh version.\nP.S. By the way, thank you for your job. We can't wait when jsrender become 1.0\n. ",
    "rafaelsales": "+1\n. ",
    "Mytia": "Thanks a lot! It works for me! I think it's closed.\n. ",
    "jcttrll": "Thanks! I still think the operator form would be handy, but this mechanism is obviously more flexible and satisfies my need, and I appreciate the update.\n. ",
    "CatsMuvva": "I think so. I'm not sufficiently certain that I have a true problem. If \nI do, I'll present you with a complete usage case.\nThanks for the mail.\nRegards\nNicole\nOn 30/01/14 17:36, Boris Moore wrote:\n\nYou closed this... Did you resolve your issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/230#issuecomment-33711763.\n. Hi, again, Boris,\n\nGrrrr. Javascript... spelling mistake that wasn't picked up. I looked at \nthe code for two days before posting a question. So, even though it \nwasn't ultimately necessary, it helped me find the spelling mistake.\nThank you for your time.\nNicole\nOn 30/01/14 17:36, Boris Moore wrote:\n\nYou closed this... Did you resolve your issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/230#issuecomment-33711763.\n. I'm shooting in the dark ere. I updated the above template by replacing all the references to \"#index# with \"getIndex()\". The error message remains the same. I'm baffled. The message talks of using #index where there is no such reference.\n. Whoops. Wrong button. This is not closed.\n. Yes. Thank you. Don't kill yourself. Work/life balance is important.\n\nWarmests\nNicole\nOn 15/02/14 17:29, Boris Moore wrote:\n\nI reopened. (You wanted it to stay open, right?) I'll look into this\nduring this weekend...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/234#issuecomment-35161896.\n. Thank you, Boris, for working on this over your weekend.\n\nAs I understand it what your saying could be summarised as follows:\n1. For my purposes we say that a block starts with a template directive {{something}} or one of its derivatives such as {{^something}}. The block is terminated with a {{/something}}.\n2. For each block a new context is created describing the environment of the script at that moment such as the \"for\" index and the data on which the block is operating.\n3. Each context is chained to that of the containing block through its parent member.\n4. If there is no index for a given script block, the corresponding context member contains the text \"Error: #index in nested view: use #getIndex()\".\n5. The getIndex function walks the chain of contexts from the current one, upwards through their parent members, until it reaches one that has a numeric index member. It returns this value.\nIs that a fair summary?\n. My apologies to those who, like me, care about grammar. I used \"your\" in the above post when it should have been \"you're\".\n. ",
    "o-rey": "Oops, my bad, sorry. Jquery must me included before jsviews.\n. ",
    "fuhry": "It might be wise to conform to the Components specification for Composer. This will allow the javascript files to be installed in a configurable directory for cases when the vendor directory might be outside of the document root.\nI wrote a composer.json file that conforms to this spec. The one in my master branch points at my own repo, the one under the components branch points at @BorisMoore's parent repository.\n. ",
    "sheillendra": "@fuhry ya right, I realized that each composer users using different configuration.\n. yes I understand, sorry, but it is very annoying when use jsrender. At function \n$.render [TEMPLATE_NAME] (params);\ncould we add a callback as second params which will be executed before or after the rendering is complete?.\n. Could see my example at http://jsfiddle.net/sheillendra/7dLnmuq7/1/\nwhen the \"start\" button is pressed, the text in the target element should be replaced with the word \"busy .. rendering is begins\" before rendering starts, but what happens is the text \"busy .. rendering begin\" will appear in conjunction with the completion of the rendering process.\nI've been using setTimeout, Promise, deferred, when, but still the indicators can not appear first.\n. wow, thank you very much @BorisMoore , it turns out there is something wrong on my setTimeout yesterday.\n. use helpers to load nested template\n. ",
    "jblandry": "For example with certain Drupal plugins, I have to keep the global jQuery version (which Drupal uses) to a fixed outdated version (ex:1.7). So I load another jQuery (more recent ex: 2.1) which I isolate via jQuery.noConflict(true) into a variable. I then do all my custom stuff inside a anonymous function where jQuery is my new version.\n```\n// Drupal loads jQuery (window.jQuery = 1.7)\n// I load jQuery (window.jQuery = 2.1)\n// I isolate my jQuery\nvar myjq = window.jQuery.noConflict(true); // myjq = 2.1, window.jQuery = 1.7\n// then I work my custom stuff with my jQuery\n(function(jQuery) {\n   // load jsrender here\n})(myjq);\n```\nI normally don't have any problem with this pattern because plugins usually use jQuery instead of window.jQuery\nI hope this is clear.\n. It is inserted via a build workflow with Grunt, so every file I use is concatenated into one file. :)\n. :+1: \n. Not a problem I'll change my inclusion. Thanks\n. ",
    "ewolfman": "Hi,\nI am using commit 60 and I am experiencing the same leak.\nScanning the jsrender.js I could not find where the template is released once the DOM script template is removed. \nIs there a way to manually clean an obsolete entry?\nThanks.\n. Hi,\nI currently worked around this leak by manually deleting the compiled functions like so:\n```\n    $(\"script[data-jsv-tmpl][type='text/x-jsrender']\").each(function (index, element) {\n    var id = $(element).attr(\"data-jsv-tmpl\");\n    delete $.templates[id];\n    delete $.render[id];\n\n});\n\n```\nIt seems to be working well in a single page application. Is there a better or built-in solution?\nThanks.\n. Hi Boris,\nAny update on this matter?\nThanks.\n. Hi Boris,\nI'll try to briefly describe the scenario. This is a Single Page Application. Depending on what the user does, the application is loading and unloading different pages. Each page has several jsrender templates. When the page unloads, including its jsrender script nodes, I would like the jsrender templates to be released too.\nIn a way, this is similar to jQuery cleaning events and data when DOM elements are removed using .remove() - http://api.jquery.com/remove.\nRegarding suggestions on how to do this, I have a couple of suggestions:\n1. I never used it myself, but you can try to use MutationObservers to detect the removed scripts. If the browser does not support it (before IE11), then you can fallback to DOMNodeRemoved. Here's a relevant thread discussing both methods: http://stackoverflow.com/questions/20156453/how-to-detect-element-being-added-removed-from-dom-element.\n2. Provide a public method for custom cleanup. The code I am currently using is \"too manual\" for my taste. I have no assurance that the cleanup is full, correct and complete.\nRegardless, we are using jsrender heavily in our app and thank you for it.\nThanks.\n. Hi Boris,\nSorry for this late response. I have missed your reply.\nWe're only using jsrender (+jQuery). \nYes, I will be happy to tryout the fix. I have seen in https://github.com/BorisMoore/jsrender/issues/264 that you have already committed a fix - is this safe to try?\nThanks.\n. Hi Boris,\nI performed some tests and it seems like the latest commit (69) indeed solves the problem, which is great news.\nI will test it further when I actually incorporate it into our solution in the next release.\nMany thanks!\nBTW: I noticed your comment on the fix (https://github.com/BorisMoore/jsrender/issues/264), choosing the $.data over $.templates and I like it better than the cleanup methods I had suggested earlier. Very clever.\n. ",
    "loppp": "\n<tr>\n<td>{{:name}}</td>\n</tr>\n\n. ",
    "csharbel": "Thanks :+1: \n. ",
    "MarQuisKnox": "Is there anything wrong w/ doing it this way? \nI did not use the $.templates function. \nThis is the only code used:\njavascript\n<!-- JsRender Template -->\n<script id=\"templateMediaThumb\" type=\"text/x-jsrender\">\n   ...\n   {{if media_type == 'video' }}\n    ...                             \n   {{/if}}\n</script>\njavascript\n$('.photo-feed').append(\n    $('#templateMediaThumb').render( response.data )\n);\n. Actually, I resolved it by manually creating the mediaType variable via a for loop. I will double & triple check to make sure that it's not an error on my part. \nThanks for your assistance!\n. Alright, I just built a workaround anyway. If it occurs again then I'll post here. \nThanks.\n. I will check it out. I'm almost 100% sure that the 'media_type' variable is present in the source. However, for whatever reason it didn't function properly. I will check it out & report back.\nThanks for your help!\n. ",
    "Bnesme": "Thanks for your reply and hints.\nI didn't know the syntax for {{~myFunc()}} and {{>SummaryInfos.Property2 || SummaryInfos.Property3}}.\nWith IE11 profiler I could see that all cpu time was spent in jsRender.$extend.\nRedrawing all cells (20x3 cells) was taking 500ms on a I7 4770K.\nI found a workaround that reduce the redrawing time to about nothing :\nIf I move the \"template code\" inside a subtemplate and include this subtemplate in the parent template, the slowdowns disappear.\nFor instance : \nhtml\n<script id=\"column0Template\" type=\"text/x-jsrender\">\n  {{include tmpl='#siteTemplate' /}}\n</script>\n<script id=\"siteTemplate\" type=\"text/x-jsrender\">\n  ... here all my templated properties ...\n</script>\ninstead of \nhtml\n<script id=\"column0Template\" type=\"text/x-jsrender\">\n  ... here all my templated properties ...\n</script>\nI suspect there is a precompilation stage in jsRender that will reuse the templates from the {{include ...}} whereas defining the template directly inside the column templates needed by Infragistics won't benefit from the precompilation stage. \nBut I didn't look enough in JsRender and Infragistics internals to be sure of this.\n. @BorisMoore: a jsfiddle example is on the way, I didn't have time to finish it yet.\n. Hi Boris,\nInfragistics have already made a fix that will be available in their next service releases scheduled in december. Your fix seems right to me, better to ensure data types are valid.\nBenoit\n. I don't have access to the source code. I was just told it was fixed, I can post here when I know more.\n. ",
    "sergiorighi": "Thank you, Boris. I was not passing App anyway. My fault.\nBut there is a way to load external variables directly? This could be an improve. Why I have to pass it if the variable is already there?\n. Ok, thank you. And as collegeman said, JsRender is awesome! Great job!\n. ",
    "BurnedToast": "Here is a simple jsFiddle showing my problem http://jsfiddle.net/jvwfmpya/6/\nthe sum is getting updated on \"add\" but not when changing the distance\n. here is the link for the reopened issue: https://github.com/BorisMoore/jsviews/issues/280\n. ",
    "moczolaszlo": "Hello @Ginhing,\nCheck the props tag:\nhttp://www.jsviews.com/#propstag\nL\n. ",
    "kilnan": "ok, I've been very sloppy in understanding the example.\nThis is exactly what I needed to know, thanks!\n. ",
    "ittayd": "Well, it is an unmatched {{/props}}, not a missing one and indeed, it would have been easier to spot the problem (missing :) if the message said 'no closing {{/key}}. That is, when seeing a closing tag, search if the stack of tags contains it and then error on the ones on top of it\n. The best message would have been '{{/params}} encountered in {{key}} block with no open {{params}}' \n. ",
    "Paul-Martin": "Yes.  The version pulled from bower is to an older commit.  Easiest to just use the following dependency:\n\"jsrender\": \"git://github.com/BorisMoore/jsrender#master\"\nThis will pull from the head.\nOn Feb 3, 2015, at 12:20 PM, Boris Moore notifications@github.com wrote:\n\nMaybe bower is not loading a recent version. You should look at which version it is loading. See #225. Full bower support is planned for V1.0. Can you load jsrender directly? (http://www.jsviews.com/#download)\n\u2014\nReply to this email directly or view it on GitHub.\n. Appears you might be missing either : or > depending on your encoding (or not) preference\n\n[%:~svc.id%]\nOn Oct 16, 2015, at 4:18 PM, jmichaelterenin notifications@github.com wrote:\n\nI'm attempting to access parent data inside a props tag, and the only way that it works is if I'm using a function or helper. See below:\n[%for services ~faddons=addons %]\n    [%props accommodation ~svc=#data %]\n        [%addons ~svc.id ~faddons ~svc.addons /%]  [%!-- Works --%]\n        [%avail ~svc.available /%] [%!-- Works --%]\n        [%for ~getFields(~svc.available)%] [%!-- Works --%]\n            [%:#index+1%]\n        [%/for%]\n        [%~svc.id%] [%!-- doesn't recognize it as a jsrender tag, outputs it as '[%~svc.id%] --%]\n    [%/props%]\n[%/for%]\nI'm using a different delimiter because it's inside a laravel blade template, which also uses double brackets.\n\u2014\nReply to this email directly or view it on GitHub.\n. If you are doing this in a browser then your template should be in a script tag.  And then you need to call render and insert the resulting string in to the dom.\n\nJSRender does not somehow make the browser dom understand it's {{tag}} notation.  You place the template in script tag so that the browser will ignore it.\nThen you use javascript to render the template and insert it into the dom where you would like.\n\n    <span>{{>hello }}</span>\n\nvar model = {\n    hello: 'world'\n};\nvar rendered = $.template('#helloworld').render(model);\n$('body').html(rendered);\nOn May 27, 2016, at 11:55 AM, Alexey Kolyanov notifications@github.com wrote:\n\nReally? Have you ever tried to do this in jsfiddle?\nI get these lines:\n<option value=\"ft1\" {{=\"\" if=\"\" ftype=\"=\" fieldtype=\"\" }}selected{{=\"\" if}}=\"\">ft1</option>\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Broadly speaking you might consider pre-rendering on the server if that is possible or incremental rendering on the client if that is possible, or some combination of each. Unfortunately the template you posted is incomplete (odd icons appear) and isn't formatted well and is missing a sample of the data set so it is hard to infer exactly what you are doing.  More helpful would be to setup a jsfiddle that could be executed.\n\nA few other things to consider - you have data-linked every if / for statement.  Are all those links necessary?  e.g. does the data actually change?  If not, you are incurring overhead for no reason.  . url is a property of audio, whereas the context in the loop is audio.datas.\nTry\n{{for audios}}\n  {{for datas}}\n    {{:name}}\n  {{/for}}\n  {{:url}}\n{{/for}}. ",
    "Edorka": "We have recovered our previous copy but I thought it would be important to advice others.\nThanks for your great job.\n. ",
    "omelhoro": "Thanks, I guess that was a beginners error not to look for previous issues))\n. ",
    "dorner": "I can definitely see the issues involved with it (particularly that it's late in the game now). I just don't really agree that\n{{for baz}} ... {{/for}}\nand\n{{for baz tmpl=\"#external-template\" /}}\nshould be equivalent. In one you are explicitly calling an external template; in the other it's a simple block in the existing template. A few other templating languages will simply expose the \"receiver\" of the block as a named variable, e.g. something like\n{{for baz ~thebazitem}}\nand allow you to reference ~thebazitem while not changing the existing scope at all. (On reflection this makes a hell of a lot more sense than what I wrote above.) I have a feeling that this is the most common use case.\nDepending on how complex the implementation is, this may even be a non-breaking change you can introduce, since this syntax is not used right now - you could theoretically keep the existing, scope-changing syntax while introducing the new one to allow non-scope-changing.\nJust something to think about, I guess, because this is really the only negative I've found about using this framework - I've tried four others and this is definitely the best in all other aspects for what I need.\n. I'm just using JsRender, not JsViews. I'm currently in a project that has an existing paradigm that doesn't involve a full MVC solution - I'm only interested in the templating part. 8-)\nThe other frameworks I've tried are Google Closure Templates, doT, Handlebars and EJS. Nunjucks also looked really interesting but it seems like it's aimed exclusively at Node.js (the docs specifically say that rendering fully client-side is really slow). The main things I'm interested in are:\n- Fully client-side solution (no compilation required)\n- Ability to call other templates with parameters (it's surprising how many templating libraries don't support this)\n- Syntax which is concise (not a lot of extra characters) but readable (I didn't like doT's use of ? instead of if, for example)\n- Easy to add tags or helper methods (this is the reason I had to move away from Closure Templates)\n- Not \"logic-less\" - I find these sorts of libraries to be nowhere near powerful enough to build even simple single-page web apps\nSo like I said, JsRender hits all the right buttons except for this one nitpick. 8-)\nAn example of the thing I'm discussing in Closure Templates:\n{foreach $slide in $slideList}\n    {$slide.url} in {$slideList.length}\n  {/foreach}\nIn doT:\n{{~ myArray :value}}\n  {{=value}} in {{=myArray.length}}\n{{~}}\nIn both examples you have access to both the iterated variable and the original scope.\n. My main concern is that when the inner block needs to use multiple variables from the outer block, the existing syntax gets more and more unwieldy:\n{{for slides ~slideList=slideList ~viewMode=viewMode ~selectedURL=selectedURL}}\n  {{if viewMode == 'all'}} {{!-- do something }}\n  <option {{if url == selectedURL}}selected{{/if}} value=\"{{:id}}\">{{:name}}\n{{/for}}\nversus\n{{for slides ~slide}}\n  {{if viewMode == 'all'}} {{!-- do something }}\n  <option {{if ~slide.url == selectedURL}}selected{{/if}} value=\"{{:~slide.id}}\">{{:name}}\n{{/for}}\nI'm fine with the \"inner and outer blocks having to agree on the name of the array variable\" because they are in the same template.\nThe main advantage of my suggestion is that instead of having to pass every single scope variable you are interested in into the inner loop, you'd be passing just a single variable (the one newly introduced by the loop) and continuing to have access to all the existing ones. The disadvantage is the extra reference to ~slide, but in my opinion it's far more natural than having to remember each variable you intend to use and manually pass it into what's essentially an inner block.\nI'm not a big fan of exposing data scope that way you suggest (with ~roots) - we have scope for a reason, we should just be designing the scope so it makes sense. 8-) And it's very unnatural to access it that way - the writer should generally be able to write a variable name, with some minor decoration (~) and access it naturally.\nI don't think my suggestion is equivalent to {{for baz ~thebazitem=#data}} - because #data at that point is the outer context; I am suggesting leaving the current context as it is and passing in a variable for what is currently the inner context. \nRe syntax, we could just use a different symbol, like : or & :\n{{for slide &slide}}\n  {{~slide.url}}\n{{/for}}\n. OK, I have a better understanding of this now. I'm still not convinced that the \"change context entirely\" is the correct approach. Handlebars is a \"logic-less\" template, and revolves around the whole idea that the data you're passing in is relatively simple, having done all your computation already. I find that approach to be difficult to work with, which is precisely why I tried to find something more powerful.\nSince JsRender does allow you to do more complex things, I think it makes sense to have it think more like a programming language and less like a somewhat \"dumb\" template.\nIt's true that this is a philosophical change, but that doesn't necessarily mean that it technically needs to be a breaking one, at least for now. & variables and ~ ones can be made to be mutually exclusive, so if you use & variables you are indicating that you want the scope to stay as is, and if you use ~ ones you want it to change. This would give the user the best of both worlds, at least IMO.\nA few more arguments in favor of the change:\n1) Nested loops. If I want to reference an outer variable, I'd have to keep passing in into all the nested tags:\n{{for items ~outerData=#data}}\n  {{for fields ~outerData=~outerData ~outerInnerData=#data}}\n    {{:name}} {{~outerData.someModifier}}\n  {{/for}}\n{{/for}}\n2) Simple loops don't gain much by the current way of doing things:\n{{for someStringList}}\n  {{: #data}}\n{{/for}\nvs.\n{{for someStringList &string}}\n  {{:string}}\n{{/for}}\nand at least this way the writer gets to define the variable themselves as something that's self-documenting, instead of using the rather generic #data.\n3) The whole idea of having to reference the \"current context\" explicitly doesn't sit right with me. The way I generally call templates is by passing a hash of key -> values to it. That hash has no semantic significance; it's just a way for me to give the template a set of different data pieces. Having to keep references to it and use them manually seems unwieldy to me.\nHere's my rundown of what I think the pros/cons are to the different approaches:\nAdvantages of the current way:\n- Consistency between logic of nested blocks and external ones\n- Succinctness - assuming your current context is meaningful and you are working on attributes rather than the value itself\n- Simplicity of implementation - only need to program one kind of parsing for {{for loops\nAdvantages of proposed way:\n- No requirement to pass contexts down the path - they are always available\n- Recognizes that most often the one or two new variables introduced by the loop are not important enough to justify changing the entire scope and losing immediate access to other important data\n- Consistency in referring to attributes - it is always attr and not ~someContext.attr or ~attr\n- Gives the template writer full control over the names of all their variables\n- Feels more natural from a programming perspective\nSorry, I really don't mean to drone on here or write walls of text (I don't usually do this). I'd just really like this already awesome library to be a bit more natural and intuitive. 8-)\n. Hmm... I wasn't aware about the inheritance of helpers throughout parent contexts, so thanks for clueing me on this. I'm getting a much better feel for the framework here.\nAnd I took another look at the render() call - since you can pass in helpers directly, this mitigates some of the pain because I can basically use the helpers hash instead of the data hash for properties that I need access to throughout all contexts. In fact, I could just pass an empty hash into the data and put all my current objects into helpers and it would basically act the way I want in the first place. 8-) In fact I just tried it and it works wonderfully.\nI think \"helpers\" is a misnomer - it is really a hash of things that are always in scope. It sounds like \"data\" is information and \"helpers\" are functions (this is how things work in e.g. Rails) but that's not the case; \"data\" can include functions and \"helpers\" can include data. Data is really \"current context\" and helpers are \"globals\". I'd consider renaming them appropriately.\nOne thing I think would mitigate some of the edge cases is to give the user one extra view helper, #parentData, which would be the equivalent of calling #parent.parent.data. It's a lot more succinct and it may be useful in these sorts of situations. I also think using something like #self instead of #data in general is more accurate, but I'm not sure you would want to make that change now.\nI do think the documentation needs a lot of work; I'll be adding another ticket for that.\nThanks for your patience throughout this thread. I'm really happy with the framework now that I understand it better.\n. Awesome. Yeah, basically just a unified, concise way to get to the context just outside the current scope.\nI understand about the view paths - I just think that the most common usage of anything involving the current view will be to get the current data, so even adding an alias of #self to #data would make it clearer what's being referred to.\n. Yep, I agree that as long as the ease of access is there we don't need to change the whole paradigm. I'd still like to see a shortcut like ~parentData for immediate access of the parent context - that would close the entire loop. I'll try to test this over the next few days. Thanks!\n. Ah, can #parent.data work? All the examples I saw had it as #parent.parent.data. #parent.data is succinct enough if it works. Otherwise, what I had in mind was a sort of \"global helper\" that was always available to access parent data, i.e. ~parentData() would always be the equivalent of #parent.parent.data.\n. Good point! And that gives the programmer better control and visibility into which object is which. I like this approach. 8-)\nI think we had a great discussion here - all that's left is to get some rock solid documentation to explain these quite common tasks in a better way. I know you said you were going to be working on that. I'm not sure how much time I can contribute but let me know once you have a new documentation framework and maybe I can help out.\n. ",
    "oserra": "Great conversation guys!\nI really agree with dorner that the sintax {{for baz ~thebazitem}} is great\nand it is a non-breaking change, backwards compatible.\nI also think jsRender and jsViews are really good. I think that this\nframework lacks of popularity... it's great but not many people knows about\nit (that's what I perceive).\nI'd also love a plugin for eclipse that syntax-checks&colour the code\nwithin template scripts :-)\n. ",
    "wzup": "It seems it doesn't work for control flow tags like for. How to use for, if, else, comments, etc with my custom tags?\nHere is a template:\n<script id=\"myTmpl\" type=\"text/x-jsrender\">\n        <%!-- This is a copmment %>\n        <% for data %>\n            <%:key%>\n        <% /for %>\n    </script>\nHere is js code:\nvar template = $.templates(\"#myTmpl\");\n    var htmlOutput = template.render(data);\n    $(\".div\").html(htmlOutput);\nHere is a rendered result:\n<%!-- This is a copmment %> <% for data %> <% /for %>\n. I have accepted your answer on Stackoverflow.\nI think it is better not to remove the part about conditional tags. Some people may happen in the same issue. I adjust the text.\n. ",
    "yiakwy": "Yes but nested tempalte could consist different components.\nThat means a variable template should be adopted. I resolve this by using\ncodes to trigger javascirpt to do resemlbe and return it as JsRender codes.\nBut I wish I could have such syntax:\nfor currContext tmpl=$currContext.tmpl\nwhile\n{tmpl:}\nwithin the data define how should it be interpreted.\nIn short, I wish template engine can deduce from data how template is\ngenerated not by programmer. Otherwise the code could be very ugly.\n2015-06-16 20:01 GMT+08:00 suryana notifications@github.com:\n\nuse helpers to load nested template\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/260#issuecomment-112401012\n.\n. Your solution doesn't resolve my qeustion because $.render(data, template, {heplers:...}) does not touch data. I wish there is a machinism that template will be dynamic according to data.\n\nI want data has some dynamic hints where template can adapt itself according to these hints.\nFor example tmpl=#x where x should be a variable. However I have test this can not go through with JsRender. \n. @BorisMoore Thanks your response ^ ^!!!.  I initially did some experiments in the website repl inputting panel. But it seems that {{include tmpl=nameOrExpr}}, name can not be variable name indicated by data.\nI will check all these materials carefully. Big Big thanks!!! \n. @BorisMoore I am inspecting your source for builtin tags for better understanding! Thanks for all you have done!\n. ",
    "nariman-haghighi": "We're not able to reproduce it in a jsfiddle yet but this is the exact line that generates the error on the non-minified version:\nif (tag = this.tag) {\n            // This is a call from renderTag or tagCtx.render(...)\n            tagCtx = this;\n            tmpl = tag._.tmpl || tagCtx.tmpl;\n            view = view || tagCtx.view;\n            if (!arguments.length) {\n                data = view;\n            }\n        } else {\n            // This is a template.render(...) call\n            tmpl = this;\n        }\nSome additional context, the call to $(\"...\").render({}) works on the initial page load, but subsequent calls involving the same tag context generate the error above (after the document has fully loaded). The jsrender.js is lazy loaded and likely the reason why it works on initial page load but fails later on in response to user actions that trigger $(\"...\").render({}).\nOur code-base has been stable and works on all previous versions except the latest. \n. We've isolated the behaviour here: https://jsfiddle.net/4rpqyk0g/1/\nOur solution reloaded jsrender.js in between invocations, that's what causes the change between 63 and 64. We can work around this by avoiding reload if the following is true:\ntypeof $.templates != \"undefined\" || typeof jsviews != \"undefined\"\n. ",
    "vman92": "```\n    \n\n                {{for dcn[0]._recordSet ~dcn=dcn[0] ~dcn1=dcn[1] ~webAbsoluteUrl=_xData[\"webAbsoluteUrl\"]}}\n                    \n\n{{convertDateIn:EventDate dateFormat=\"datefmt_month\"}}\n{{convertDateIn:EventDate dateFormat=\"datefmt_0date\"}}\n\n\n                            {{if ~Permission.canEditListItems(~dcn1)}}\n                                \n                            {{/if}}\n                                {{:Title}}\n{{:url}}\n{{>#index}}{{:Contact}}\nTesting Now!\n                                {{if ~areDatesEqual(EventDate, EndDate, false) == false}}\n                                    <div>\n                                        <span class=\"time\" title=\"{{getDateTime:EventDate}}\">Multi-Day Event</span>\n                                    </div>\n                                {{else fAllDayEvent == true}}\n                                    <div>\n                                        <span class=\"time\" title=\"{{getDateTime:EventDate}}\">All Day Event</span>\n                                    </div>\n                                {{else}}\n                                    <div>\n                                        <span class=\"time\" title=\"{{getDateTime:EventDate}}\">{{convertDateIn:EventDate dateFormat=\"datefmt_time\"}}</span> - <span class=\"time\" title=\"{{getDateTime:EndDate}}\">{{convertDateIn:EndDate dateFormat=\"datefmt_time\"}}</span>\n                                    </div>\n                                {{/if}}             \n                    </div>\n            {{if #getIndex() == (~dcn._recordSet.length - 1)}}\n                <a class=\"viewallevent\" href=\"Events.aspx\">View All</a>\n            {{/if}}\n                </div>\n            {{/for}}\n            {{if ~Permission.canAddListItems(dcn[1])}}\n                <div id=\"NewItem\"><a class=\"addevent\" href=\"#\">New Item</a></div> \n            {{/if}}\n        </div>\n</div>\n\n```\n. ",
    "agrinei": "Actually, #parent.getIndex() returns the current index (not the parent). In the case above it's 0 (zero).\n. http://jsfiddle.net/6zLu7mmd/4/\n. Just found this \nhttp://stackoverflow.com/questions/17747111/jsrender-cannot-access-parent-variable-inside-if-condition\n. Yes, now I understand! :-)\nThank you for taking your time to answer, and also for the awesome lib!\nBest wishes,\nAgrinei\nOn Wed, Oct 7, 2015 at 1:56 AM, Boris Moore notifications@github.com\nwrote:\n\nIt looks like you ended up by understanding how the view hierarchy works,\nand the fact that our {{if}} test is itself adding a child view, so you\nneed an extra level of parent.parent...\nIf not, let me know...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/270#issuecomment-146077603\n.\n. \n",
    "RedJabber": "Hi, Boris!\n  Sorry for being away for so long. I've found workaroud as load and register required inline templates directly before render close to the way you wrote.\nAsync autoload for included templates is not good idea.\nThe other case async auto load can be used:\n1. register loader\n2. request for included templates on complilation of template prototype(without data)\n. ",
    "jagandecapri": "Thanks for the clarification @BorisMoore :+1: \n. Awesome!!!\nOn 12/21/2015 10:07 AM, Boris Moore wrote:\n\nwww.jsviews.com http://www.jsviews.com does now have a powerful \nsearch feature.\nHere is an example: http://www.jsviews.com/#search?s=%24.templates( \nhttp://www.jsviews.com/#search?s=%24.templates%28\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/BorisMoore/jsrender/issues/274#issuecomment-166175180.\n. \n",
    "jmichaelterenin": "Thank you very much, exactly the issue. Staring at this stuff for too long does that to me : )\n. ",
    "druellan": "\nI think loadSource should be considered part of compiling, so we can remove this test - and include loadSource in the compilation test...\n\nWell, yes, but you can precompile the template. In that case loadSource becomes part of the rendering, but you still can preload the templates at init time to avoid a lag on the render. Thats why I thought that two separate tests where useful. AFAIK\n. Thanks Boris!\nNo, this is perfect. I'm already running it on a OperaTV emulator (presto) on some restricted hardware (1core 32bits Atom) to peek some numbers.\nThanks again.\n. ",
    "ianw89": "Yeah, this makes sense. Prerelease tags should generally just be used for, well,\nprereleases that most people wont adopt unless they are specifically trying to\n(to try a new beta feature or whatever).\n. Cool.\n. ",
    "daslicht": "Yeah my solution is based on those patterns : \nhttps://github.com/daslicht/hello-hapi-jsviews\n. Thank you for your reply !\nI got it now by using the {{clientTemplate \"./templates/_includes/clientTemplate.html\" /}}\nhttps://github.com/daslicht/hello-hapi-jsviews/blob/master/templates/layout.html#L7\nThe Last Paragraph here is what I like to create:\nSingle Page Apps with initial rendering on server\nhttp://www.jsviews.com/#node/server-browser\nWhat is the simplest approach to do this?\nSharing a router would be needed as well, hm.\n. Ok looks like I oversaw the routing part, I will read it again.\n. Sounds interesting , which router do you use ? That should also work with push state no?\nwww.jsviews.com is not rendered server-side? If I disable JS I just see the navigation.\nHow does search engines index your www.jsviews.com ?\n. yeah its mysterious, even the hash routes seam to get indexed :) \nAt least by google\n. Here is the generated package json:\n```\n{\n  \"name\": \"isomorphic\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.14.1\",\n    \"express\": \"^4.13.3\",\n    \"jquery\": \"^2.1.4\",\n    \"jsrender\": \"0.0.3\",\n    \"serve-favicon\": \"^2.3.0\"\n  }\n}\n```\nMy node version:\n```\nnode -v\nv4.2.2\nnvm --version\n0.29.0\nnpm --version\n2.14.7\n```\nI installed all dependencies like the following:\nnpm init\nnpm install body-parser --save\nnpm install jsrender --save \n...\n. with the latest jsrender i no longer have that issue\n. I have now added teh errorhandler to my Express app like this:\napp.use('development', function(){\n            app.use(errorhandler());\n        });\nI will document my experience here for anyone in future..\n\u2013\u2013\u2013\nI get Errors now !\n{Error: ENOENT: no such file or directory, open './_includes/footer.html'}\n```\n\"start\": \" tsc -w & export NODE_ENV=development nodemon & app.js\"\nconsole.log('env:',process.env.NODE_ENV); // env: development\n```\nI tried removing the dot of the path but then I get : \ntest _includes/footer.html\nThat is my views config: \napp.set('views', __dirname + '/app');\nconsole.log('js views debug mode: ', jsrender.views.settings.debugMode() ); // returns true\n. Strange,\nThis properly renders the footer : \nres.render('_includes/footer', appData, function(err, html) {\n                res.send(err ? jsrender.views.converters.html(err.message) : html); \n            });\nIf I include the footer into the layout like this : \n{{include tmpl='_includes/footer' /}}\nI just get the following displayed:\n_includes/footer\n. I created a simple test project here to test the include : \nhere\nBut instead of rendering the included files, it just outputs the include filename ?\n. Thank you that works !\nI studied the /jsrender-node-starter,  but its wasn't clear to me that its relative to the calling script and I cant remember that I read it in the manual. It just says that it is relative but not from the calling script. But now its clear !\n. I assumed (wrong) that after registering it as View Engine the imports behave as Express.\n. Thank You Boris !\n. Is there  a way to get errors for syntax errors? \n. Thank you and Happy Eastern :dancers: \n. Ok I found a solution myself: \n```\napp.get('/', function (req, res) {\n    var tmpl = jsrender.templates(\"./app/home/index.html\")\n    var html = tmpl.render();\n    var context = { hello: \"world\", template: html};\n\n    res.render('app/layout', context, function(err, html) {\n        res.send(err ? jsrender.views.converters.html(err.message) : html); // HTML encode message\n    });\n\n});\n```\n```\nI am the Layout, next line is an include: \n\n {{include tmpl='./app/home/index.html' /}} <br> \n{{:hello}}\n{{>template}} \n\n{{include tmpl='./app/_include/footer.html' /}}\n```\nAre there any downsides of this solution ?\n. is there a way to include a template with context ?\n. Thank you !\n. Related:\nhttp://stackoverflow.com/questions/24639335/javascript-console-log-causes-error-synchronous-xmlhttprequest-on-the-main-thr\n. So it is because I load my browserify bundle like the following and jQuery tries to load it async?:\n<script src={{:client_bundle}}></script>\n. I am trying to have a browserify bundle for each 'page' separated and one shared bundle.\nBy now I troed to include it like this:\n./home/index.html\n{{:client_bundle}}\nThis works but I get that xhr warning\nIf I try to include it with jQuery , I get $ is not defined:\n$.getScript({{:client_bundle}});\n. This seams to work, I think when I am ready with this project I am prepaired to write a blog about my experience... :\n```\n           $.getScript( '/bundle.js' )\n                .done(function( script, textStatus ) {\n                    console.log( textStatus  );\n                })\n                .fail(function( jqxhr, settings, exception ) {\n                    console.log(  jqxhr, settings, exception );\n                });\n\n                let detailTmpl = require(`./home/index.html`)($);\n\n                let context = {\n                    hello: \"Brave New\"\n\n                };\n\n```\nBut now I have the issue that when the page is rendered the first time I wont get the client bundle :D \nThis solves it : \n./home/index.html:\n<script src='{{:client_bundle}}'></script>\nBut what happens if I now run the client side routing, would the script get loaded twice or overwritten ?\n. > \n\nwould only allow one bundle for all pages\nWhy would you write {{:client_bundle}}?\nBecause I wanted to have a dynamic bundle for each page \n\nstill not sure how to handle it , and I am confused how to include jquery just once.\n. ok\n. ",
    "justinnichols": "If it's a deliberate statement, then for now I'll assume it's my issue and close this.  I'll open a new one if I can recreate it effectively with an example (I'm too heavily into my task for work to try to come up with it at this time).\nThanks a bunch!\n. ",
    "nasht00": "I found my workaround:\n{% raw %}{{:name}}{% endraw %}\n. ",
    "iguerrero84": "This error happended to me and i realized that it was missing a \"require\" for ('consolidate') \n. ",
    "jandrieu": "Thanks for checking out my edits.  Some further thoughts:\nFirst, you were correct about the newline. I had to use hexdump and apply two different customizations to turn it off, but uknown to me, emacs was appending a newline to the template. Bad emacs.\nAbout the regex and filecheck hit, that's a good argument. I ran some benchmarks, and sadly, I'm not sure it gave me much guidance.\nBasically, I ran several functions that could be involved in dealing with variations on the filename format, including the RegEx you use currently, fs.exists, using path functions to coerce from relative to absolute and the reverse, and finally, the cost of checking to see if the value is already in the templates object. I ran the benchmarks against a local file, a relative file, an absolute file, some missing files, some bad files, and a few (in-line) templates.\nI've attached my benchmark code as a txt file in case you want to try it yourself.\nHere's what I found:\nlocal.html  ./relative    /home/joe/. {{template\ncompiled JSRenderRx     0.054 us     0.070 us     0.050 us     0.051 us\noriginal JSRenderRx     0.062 us     0.081 us     0.059 us     0.060 us\nfs.exists               7.753 us     7.789 us     8.290 us    25.09 us\ntemplateLookup          0.101 us     0.093 us     0.129 us     0.098 us\nvalidFileRx             0.067 us     0.054 us     0.051 us     0.051 us\ntemplateRx              0.071 us     0.074 us     0.095 us     0.054 us\ncoerceRelative         11.15 us     14.04 us     12.60 us     18.14 us\ncoerceAbsolute          3.690 us     5.462 us     3.889 us     6.985 us\nSo... you are correct that the regex dominates fs.exists, which is 100x slower. And if you compile it before hand, you'll get another small bump.\nHowever, coercing every path to the relative format you ask for is actually WORSE than fs.exists on my machine. For my use case, my users will be providing arbitrary paths to directories containing collections of templates. That means I'm going to be forced into coercing one way or the other. However, after playing with this, the fastest option is going to be using process.chdir to the directory and using your code as is.\nThat said--and on a purely academic note--I'm not sure that performance gives us much guidance here. I doubt the template creation is the vital bottleneck, compared to rendering. I know you've thoughts of supporting async methods. That will definitely reshape how the flow works. Also, the possibility of remote templates would be intriguing as well.\nIt isn't in the version I've already attached, but I added a test for the chdir and that takes .7us, so that is easily the faster option: chdir then rely on your regex approach, prepending './' to all of the files.\nAnyway, this was an intriguing exercise.  I think my only request would be to update the docs to clarify that the \"./\" prefix is required for file-based templates.\ncheckFileTest.js.txt\n. ",
    "maruilian11": "i have sent the PR to add npm auto-update. thank you very much!\nhttps://github.com/cdnjs/cdnjs/pull/6531\n. ",
    "abdulhannanali": "The cdnjs issue is here https://github.com/cdnjs/cdnjs/issues/6350 \n. @BorisMoore I can request on the cdnjs issue to update it to v0.9.71. also jsviews can be made available by opening another issue on the cdnjs repo.\n. ",
    "Rhain": "@BorisMoore  Thanks very much ,you really help me out!\n. ",
    "billysmt": "Hmm, Alright well looking into it a little deeper looks like the template is rendering correctly but I'm losing the style attribute after the fact somewhere in my JQuery.  Sorry for the trouble.  It's been a long couple days.  Thanks for the help.\n. ",
    "martinkutter": "Too simple to imagine :)\nThank you very much.\n. ",
    "kashirin-alex": "Hello, back to the subject,\nI thought to check on the subject of async for the {^{ include tmpl=named}}\nin my case everything works just good, while there is a place to improve by moving out of synchronous template request to async \n{^{include tmpl=~set_tmpl('datatypes_'+data.datatype_tmpl) /}}\nmy include currently set the template name as it is ready for rendering.\n```\njsViewsApp.set_tmpl =  function(n){\n    if ($.render.hasOwnProperty(n)) return n;\n$.ajax({async: false,cache:true, dataType: \"html\",url: \"/static/jsviews/templates/\"+n.split(\"_\").join(\"/\")+\"/\"+n+\".tmpl\"}).done(function(d, textStatus, jqXHR) {\n    $( \"<div></div>\" ).html(d).find(\"script[type='text/x-jsrender']\").each(function(){$.templates($(this).attr('id'), $(this).html());});\n});\nreturn n;\n\n};\n\njsViewsApp.get_render = function(n,conf){\n    jsViewsApp.set_tmpl(n,conf);\n    if ($.render.hasOwnProperty(n)) return $.render[n];\n    else {$.templates(n, \" NO TEMPLATE \"+n+\"\");return $.render[n];}\n}\nYou are welcome to consider adding the grouped template load method to the http://www.jsviews.com/#search?s=lazy&l=samples/jsr/composition/remote-tmpl@1\n the templates at /static/jsviews/templates/ ,in this case, one is the main named one(file and the script id) and the rest are available as well, it is all good as long unique templates names/ids are used.\nwhile the render's link is called as follow:\njsViewsApp.get_render(tmpl).link(\"#\" + d_target, form_data, {'hdlr':changeHandler });\n$.observable(form_data).observeAll(changeHandler.formInputs);\n```\nRegarding the async, Could it be possible, To have the include with an aync flag and to inject the rendered context as ready, while, of-course the $.render[n].link() to be executed over the promise?\nYou are welcome to check on the working app , it is the ([https://Thither.Direct])\njs-app: http://thither.direct/static/jsviews/app3.js\nThank You,\nKashirin Alex\n. Does the #view  object has it's unique id?\nIt is preferred to use an unique id for the ;\n in case there are several includes of the same template name.\nso far, it is working:\n(link arg is just act as call type for now)\n```\nvar unique_id = 0;\nvar async_c = 0;\njsViewsApp.set_tmpl =  function(n, link){\n    if ($.render.hasOwnProperty(n)) return n;\nif(link==true){\n    $.ajax({async:false,cache:true, dataType: \"html\",url: \"/static/jsviews/templates/\"+n.split(\"_\").join(\"/\")+\"/\"+n+\".tmpl\"}).done(function(d, textStatus, jqXHR) {\n        $(\"<div></div>\").html(d).find(\"script[type='text/x-jsrender']\").each(function(){$.templates($(this).attr('id'), $(this).html());});\n    });\n    return n;\n}\n\nunique_id++;\nasync_c++;\nvar jsv_async = \"_jsv_async_\" + unique_id;\n$.ajax({async:true,cache:true, dataType: \"html\",url: \"/static/jsviews/templates/\"+n.split(\"_\").join(\"/\")+\"/\"+n+\".tmpl\"}).done(function(d, textStatus, jqXHR) {\n    $(\"<div></div>\").html(d).find(\"script[type='text/x-jsrender']\").each(function(){$.templates($(this).attr('id'), $(this).html());});\n    var vw = $.view('#'+jsv_async);\n    if (vw) {\n      vw.tmpl = $.render[n];\n      vw.refresh();\n    }\n    console.log('async_tmpl: '+n+' id: '+jsv_async);\n}).fail(function(d, textStatus, jqXHR) {\n    var vw = $.view('#'+jsv_async);\n    if (vw) {\n      vw.tmpl = $.templates(n, \"<div> NO TEMPLATE \"+n+\"</div>\");\n      vw.refresh();\n    }\n}).always(function(d, textStatus, jqXHR) {\n    async_c--;\n    if(async_c==0)$(document).trigger( \"async_tmpls\" );\n    console.log('async_c:'+async_c+' always > async_tmpl: '+n+' id: '+jsv_async);\n\n});\n\nif ($.render.hasOwnProperty(n)) return n;\nreturn \"<script id='\"+jsv_async+\"'><\" + \"/script>\";\n\n};\n```\nhttps://thither.direct/\nthe console.log is:\n2  app3.js:18 async: menus_menu_itemsurlbased\n    app3.js:18 async: menus_menu_itemsurlbased\n    app3.js:38 async_c:11 > async_tmpl: components_panel_default_actions_top id: _jsv_async_1\n    app3.js:38 async_c:10 > async_tmpl: datatypes_catalogue_panels id: _jsv_async_2\n4  app3.js:18 async: menus_side_menu\n    app3.js:38 async_c:13 > async_tmpl: menus_side_category id: _jsv_async_3\nI'll need to do now my part with the app suit the possible.\nThank You,\nKashirin Alex. an issue I'm unable to figure out,\nwhen the (",
    "MisterY": "Oh, thanks for pointing out the underlying issue.\nI used the Bower package for v0.9.72 and I believe that by default it includes jsviews in the jsrender.js file. You are right that at the moment I'd use only jsrender to start replacing the previous jQuery Templates code.\nI'll cast my vote at the minifier project and will also look into specifying an alternate (i.e. YUI Compressor) as the minifying engine when building bundles. Thanks!\n. Well, I've used bower install jsrender and that contains only\n- jsrender-node.js\n- jsrender.js\n- jsrender.min.js\nand a few accompanying files (bower, index, license). Hence, I've tried including jsrender & the minified version but the results were as listed above.\n. No problem. Sorry, I did not have the time to try this. I used a workaround for the original problem due to the timeframe available for a solution.\n. ",
    "chan15": "I tried require('jsrender'); alone too, still not work, and I load jQuery by webpack.config.js like:\n``` js\nvar webpack = require('webpack');\nmodule.exports = {\n    entry: './entry.js',\n    output: {\n        path: __dirname + '/assets/js/build',\n        filename: 'bundle.js'\n    },\n    plugins: [\n        new webpack.ProvidePlugin({\n            $: \"jquery\",\n            jQuery: \"jquery\"\n        }),\n        new webpack.optimize.UglifyJsPlugin({\n            compress: {\n                warnings: false\n            }\n        })\n    ],\n    module: {\n        loaders: [\n            {test: /.js$/, exclude: /node_modules/, loader: \"babel\", query: {presets: ['es2015']}}\n        ],\n    },\n};\n```\ntherefore the jQuery is auto loaded everytime, but still get the error message\n. ",
    "adriancmiranda": "@BorisMoore How can I require(from webpack) images in html views?\nI try put in the jsrender.views.helpers like:\nmain.js\nfunction loadAsset(assetPath) {\n  return require(assetPath);\n}\njsrender.views.helpers({\n  asset: loadAsset,\n});\npartial.html\nhtml\n<img src=\"{{:~asset(Image)}}\" alt=\"{{:Titulo}}\"/>\nand another tries, like:\n<img src=\"${require(`{{:Image}}`)}\" alt=\"{{:Titulo}}\"/>\nI have no success yet.\nP.S.: I\u00b4m using html-loader to load html files.\n. ",
    "dbauszus-glx": "Should it be possible to use jsrender in webpack without jQuery?\nI currently load jsrender from my public js files like so:\n<script type=\"application/javascript\" src=\"js/jsrender.js\"></script>\nAnd then call the methods in my webpack modules from the window:\nwindow.jsrender.templates(xhr.responseText).render()\nThis works well.\nWhat I would like to do is to require jsrender from the node_modules which I use in the backend.\nconst jsr = require('jsrender');\njsr.templates(xhr.responseText).render()\nI also tried to just require the jsrender-src from my public directory in the hope that this would bind jsrender to the window object, but this did not work.\nrequire('./jsrender-src');\n. I fussed it out...\nconst jsr = require('jsrender')();\nWithout the empty brackets the module did not execute with Webpack3.\n\nCompared with:\n\nAnd thereafter I am good to use\ndocument.querySelector('.myTmplContainer').innerHTML = jsr.templates(myTmpl).render();\nIt might be worth ammending the documentation as this example did not work with Webpack3.\n\nIf using JsRender without jQuery, or with jQuery loaded globally (as a script tag) this is done by calling:\nvar $ = require('jsrender'); // Without jQuery, or if jQuery is loaded globally. \n",
    "ViktorHofer": "Hey Boris,\nyeah thanks, it worked perfectly!! This was indeed the solution. Just for interest, why hast the path to be absolute? normally when you do require/import in js it's always the realtive path, so this seems a bit uncommon. (But it's not such a big issue!)\nThanks a lot! \ud83d\udc4d \n. Great improvement! Thank you for that :+1: \n. I will create a sample repo to reproduce the error. Just give me some days :+1: \nThanks for your time!\n. Okay I found the reason.\nWhen jQuery is globally available (e.g. browserify-shim) but you require jsviews like that\nconst $ = require('jquery');\nrequire('jsviews')($);\nthan jsviews will pick the global one. I think that jsviews should pick the argument if one is passed and if not then it should use the global one. The code changes would be these:\n```\nif (typeof exports === \"object\") { // CommonJS e.g. Browserify\n        module.exports = function($) { // If no global jQuery, take jQuery passed as parameter: require(\"jsviews\")(jQuery)\n            $ = $ || global.jQuery;\n        return factory(global, $);\n    };\n}\n\n```\nBut this is just something i noticed while searching for the issue. This isn't the root cause of the problem. The errors only happen when jQuery is globally available. I changed an existing library which needed to have jquery globally available to the modern approach and removed browserify-shim completely. Now the errors are gone...\nMaybe that error description might help you... I don't now ...\nThanks so much for your effort! :+1: \n. ",
    "hunters1094": "yes, thanks. \n. ",
    "grma1": "You need to call .render with the data you need on the template.\n``` javascript\nfielddesc_tpl = $.templates('#tpl_fieldtype');\nvar tpl_data = {\n  fieldname: 'test',\n  allfieldtypes: [\n    {ftype: 'ft1'},\n    {ftype: 'ft2'},\n    {ftype: 'ft3'},\n    {ftype: 'ft4'}\n  ]\n}\nconsole.log(fielddesc_tpl.render(tpl_data));\n```\nKind regards.\n. the main problem was, that the code block is parsed by the html engine.\ntry the following:\nhtml\n<div id=\"alltemplates\" class=\"hidden\">\n    <script type=\"text/x-jsrender\" id=\"tpl_fieldtype\">\n        <div class=\"form-group\">\n            <label>{{:fieldname}}</label>\n            <select class=\"fieldtype form-control\" data-name=\"{{:fieldname}}\">\n                {{for allfieldtypes}}\n                <option value=\"{{:ftype}}\" {{if ftype === fieldtype}}selected{{/if}}>{{:ftype}}</option>\n                {{/for}}\n            </select>\n        </div>\n    </script>\n</div>\n. ",
    "ba1dr": "Really? Have you ever tried to do this in jsfiddle?\nI get these lines:\n<option value=\"ft1\" {{=\"\" if=\"\" ftype=\"=\" fieldtype=\"\" }}selected{{=\"\" if}}=\"\">ft1</option>\n. Thanks everybody! The issue is solved, in fact I used <code> instead of <script> tag.. Isn't html became too complex? :)\nThe note about <script> tag should be mentioned in RED BOLD FONT on each page.\n. ",
    "enexusde": "By the way, the target of the replace-function is random but the value is \\\\$& i guess it is this line:\n// Compile to AST and then to compiled function\n        tmplFn(tmplOrMarkup.replace(rEscapeQuotes, \"\\\\$&\"), tmpl);\nI think it is a bug because \nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\nsais its non-standard to use $&\n. For your information, i created a bug-report at https://bugs.openjdk.java.net/browse/JDK-8162831 for supporting $& in regex.\n. ",
    "mosquito1994": "Thank you for the answer that I didn't understand the instructions very clearly. \n. ",
    "Drvanon": "Excuse me, the problem was more specific to my code then I tough.. ",
    "cekvenich": "view-source:https://www.masons-foundation.org/post/amp/\nIt works great as such! thx again for this project.. Hi Boris.\nI will keep you posted. Works great front end and server side: 100% \nreuse. I plan to write an article, I will let you know.\nAnd I have a meetup in Feb in NYC, one topic will be jsRender. If you \ncan post that someplace please, for people to RSVP here. It is free, \nopen source, no products will be pitched.\nAlso, do you have private email plz?\nCheers,\nVic\n(vicmasons (at) gmail.com)\nOn 1/19/17 1:18 PM, Boris Moore wrote:\n\nGood.\nBTW there are a couple of places on jsviews.com which show async\nfetching of templates:\nhttp://www.jsviews.com/#compiletmpl\nhttp://www.jsviews.com/#samples/jsr/composition/remote-tmpl\nBut an additional goal addressed here:\nhttp://www.jsviews.com/#node/server-browser and in samples here:\nhttps://github.com/BorisMoore/jsrender-node-starter is to do initial\nrendering on the server with the same template. so there is no 'flicker'\nif the same template is then rendered in the browser. Also this allows\nthe browser to then use data-linking (JsViews) and have client-side\ninteractivity, with items being added and removed from dynamic lists,\nfor example, without having to re-fetch the updated content, or even\nre-render the whole page in the browser. Just smart incremental rendering.\nI haven't looked at the AMP proposals. The declared target is static\npages, but it may be possible (and even more powerful and performant) to\ncombine AMP optimisations with JsViews dynamic data=driven view\ninteractivity in the browser...\nKeep my posted with your findings, if you can. Thanks...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/BorisMoore/jsrender/issues/308#issuecomment-273854805,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVN9pjJSEKcDJl2Rj38EXgrBzPn2SRkvks5rT6jbgaJpZM4LmSAG.\n. \n",
    "AndreaM16": "Hi Boris, thank you for your reply. When I'll be back at work I'll try and let you know. Have a good weekend.. Hi Boris, I tried what you said $.views.settings.allowCode(true); but I still get Cannot read property 'settings' of undefined. I think this is cause by the fact that the developer who gave me the project imported scripts with defer attribute ",
    "minias": "ok. \nWe're using jquery together.\n\nThe following functions are reproduced and reused as follows :\n\nCall up the .inject function here.\n\nDo you need more information?. @BorisMoore \nI changed the file. So no further errors occur.\nThanks for the patch version.  \ud83d\udc4d . @BorisMoore\nIn my opinion, existing developers seem to be unfamiliar with the use of jsrender.\nThe problem seems to be reusing the cache in the AJAX, as you have guessed.\nEven though we should not use the cache intentionally, the previous developers ignored it and applied it to the template. \nI am currently improving the system we use. \nOur final goal will be to remove all libraries that prevent real-time elements from our systems. \nNevertheless, I am grateful to you for correcting the current issue.. ",
    "hoshoo21": "Hi Paul and Boris,\nI have implemented reduced version of template, but still it freezing , here is code \n## Reduced template\n<script id=\"assetTmpl\" type=\"text/x-jsrender\">\n      {^{for assets}}\n       <div data-link=\"class{:IsSelected?'asset colored':'asset'}rid{:AssetID}name{:FriendlyName}reg{:Registration}time{:TimeTicks}\" onclick=\"colorMe(this);\">\n            <div class=\"asset-header\">\n                <div style=\"width: 135px; display: inline-block;\">\n                    {^{:Registration}}\n                </div>\n            {^{:FriendlyNameShort}}<br />\n                <div style=\"width: 135px; display: inline-block;\"></div>\n            </div>\n        </div>\n      {{/for}}\n</script>\nJS Code # \n```\nvar assetList = [];\n        var tankAsset = {\n            \"AssetID\": \"0001\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n            \"FriendlyName\": \"\", \"Registration\": \"Tank 1 \", \"FriendlyNameShort\": \"Toronto\",\n            \"FuelLevel\": \"93.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n            \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n            \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n            \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\":  \"1.4\u00b0C\",\"BatteryValue\" :\" 26.3V \",\n            \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \" 7365 Litres\", \"OdometerRounded\": \"7365 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n            \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n            \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n            \"VehicleStatusParked\" : \"AAA\",\"VehicleStatusXIdle\":\"XXX\", \"IconColor\": \"green\" }\n        assetList.push(tankAsset);\n    tankAsset = {\n        \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 2\", \"FriendlyNameShort\": \"Edmonton \",\n        \"FuelLevel\": \"96.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\",  \"BatteryValue\" :\" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \" 3930   Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"green\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0003\", \"AssetIcon\": \"TankMarkers/Indicator_yellow.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 3\", \"FriendlyNameShort\": \"Edmonton\",\n        \"FuelLevel\": \"96.6\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/yellowContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\", \"BatteryValue\" :\" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"3400 Litres\", \"OdometerRounded\": \"3400 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"yellow\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0004\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 4\", \"FriendlyNameShort\": \"Vancouver\",\n        \"FuelLevel\": \"46.0\", \"Heading\": 229,  \"HeadingImage\": \"TankMarkers/redContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"30290 Litres\", \"OdometerRounded\": \"30290 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_green.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 5\", \"FriendlyNameShort\": \"Quebec City\",\n        \"FuelLevel\": \"30\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/greenContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"3930 Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"green\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0002\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 6\", \"FriendlyNameShort\": \"Ottawa\",\n        \"FuelLevel\": \"10\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": \"4500 Litres\", \"Odometer\": \"4500 Litres\", \"OdometerRounded\": \"3930 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"00012\", \"AssetIcon\": \"TankMarkers/Indicator_yellow.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 7\", \"FriendlyNameShort\": \"Victoria\",\n        \"FuelLevel\": \"5.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/yellowContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \" 1.4\u00b0C \", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": \"5000 Litres\", \"Odometer\": \"5000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 8\", \"FriendlyNameShort\": \"Banff\",\n        \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": \"5000 Litres\", \"Odometer\": \"5000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n\n    tankAsset = {\n        \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 9\", \"FriendlyNameShort\": \"Calgary\",\n        \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": \"6000 Litres\", \"Odometer\": \"6000 Litres\", \"OdometerRounded\": 0, \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"mph\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n    tankAsset = {\n        \"AssetID\": \"0011\", \"AssetIcon\": \"TankMarkers/Indicator_red.png\", \"AssetType\": \"VEH\", \"Camera_PanicEvent\": false, \"Camera_SDCardError\": false,\n        \"FriendlyName\": \"   Milton Keynes\", \"Registration\": \"Tank 10\", \"FriendlyNameShort\": \"Whistler\",\n        \"FuelLevel\": \"45.0\", \"Heading\": 229, \"HeadingImage\": \"TankMarkers/redContainer.png\",\n        \"IsBodyVisible\": true, \"IsDetailVisible\": false, \"IsIdle\": false,\n        \"IsInJourney\": false, \"IsSelected\": false, \"IsXIdle\": false, \"LastUpdate\": \"/Date(1484828454000)/\", \"LastUpdateString\": \"19/01/2017 17:20:54\",\n        \"Latitude\": \"0\", \"LatitudeValid\": 0, \"Location\": \"   1.4\u00b0C\", \"BatteryValue\": \" 26.3V \",\n        \"Longitude\": \"0\", \"LongitudeValid\": 0, \"Odometer\": \"10000 Litres\", \"OdometerRounded\": \"10000 Litres\", \"RemainingDrive\": 0, \"RoadMaxSpeed\": 0, \"SVehicleAdmin\": true,\n        \"Speed\": 0, \"SpeedRounded\": 0, \"Tacho430Alert\": \"\", \"TachoDriverName\": \"\", \"TachoDriverNameShort\": \"\", \"TachoWorkState\": \"\",\n        \"TachoWorkStateDesc\": \"\", \"TimeTicks\": 636204432540000000, \"Units\": \"10000 Litres\", \"VehicleStatusDriving\": \"XXXX\", \"VehicleStatusIdle\": \"XXXX\",\n        \"VehicleStatusParked\": \"AAA\", \"VehicleStatusXIdle\": \"XXX\", \"IconColor\": \"red\"\n    }\n    assetList.push(tankAsset);\n    for (var i=0; i<3000;i++){\n        assetList.push(tankAsset);\n    }\n\n$(document).ready(function () {\n        var template = $.templates(\"#assetTmpl\");\n        template.link(\"#assetdiv\", { assets: assetList });\n})\n```\n. Ok , i have replicated scenario in my simplified version, but in the real code i am doing like this \nassetsArray = data.d; //data.d fetched as asset list\n$(assetsArray).each(function (index, item) {\n                    item.OdometerDistance = USER_odometerDistance;\n                });\n\ntemplate.link(\"#asset-div\", { assets: assetsArray  });  // assetsArray got same structure that i have shared           already . it is ajax request and array is already coming from server side. . still freezing ,\n\nEven though, i tried to bind the empty array with template and then insert records one by one \nsomething like below but still no luck \n                    obsverableAssets.assetArray = [];\n                    template.link(\"#asset-div\", { assets: obsverableAssets.assetArray });\n                    for (var x = counter; x < currentblock; x++) {\n                                    $.observable(obsverableAssets.assetArray).insert(assetsArray[x]);\n                     }\n   . Ok, \nIt works for reduced template,, but when i am introducing original template. Same issue \nHow should i redesign my template, so dom manipulation should take less CPU usage?  \nOR \nHow should i breakup my template into two parts, so that during loading it will show only header inforamtion (like reduced template) and then when user click on it header it will drill down detail template ? (how would i append subtemplate into main template)? \nNote : Till drill down event, no detail of that particular item will included in dom. i will include it ON FLY\nCan you guide me through this? \nFor sake of memory refresher, I am re-sharing template  code \n`",
    "markibanez": "Closing this and creating an issue in JsViews. ",
    "andrevinsky": "It is very strange. As I started creating a Fiddle, problem seemed to vanish. First, I couldn't repro it there, then, in my code.\nThe issue was real, I swear, the screenshots (above) don't lie (generally). \nAnyway, here is the fiddle: https://jsfiddle.net/andrevinsky/h6g1bLbb/ - for reference. It is working now without errors. . ",
    "airsakarya": "Thanks for answer. I just trying to understand jsrender at all. I don't know what difference but both example  working now. OuterData example is simple for nested arrays.\nSometimes need to take a break and don't think about the code.. ",
    "martrix78": "I run the renderer like this:\n$('#someId .js-feedback').html(\n        $( '#feedbackTemplate ).render( data));\n. ```\n\n    <li  id=\"faq-{{:id}}\" data-tree-id='' class=\"comments__item\">\n        <div class=\"comments__body\">\n            <div class=\"comments__head\">\n                <div class=\"comments__user\">\n                    <div class=\"userbox userbox_comment\">\n                        <div class=\"userbox__item\">\n                            <div class=\"userbox__icon\">\n                                <a href=\"{{:author.link}}\"><img src=\"{{:author.avatar}}\"></a>\n                            </div>\n                        </div>\n                        <div class=\"userbox__item\">\n                            <div class=\"userbox__sub\"><a href=\"#\" class=\"userbox__link\">{{:author.name}}</a>\n                                <time class=\"userbox__time hidden-xs\">{{:date}}</time>\n                            </div>\n                            <div class=\"userbox__sup js-hide-on-edit\" id=\"no-edit-label-{{:id}}\">{{:from}}</div>\n                            <div id=\"edit-label-{{:id}}\" class=\"userbox__sup js-show-on-edit\" style=\"display: none;\" >\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u0430</div>\n                        </div>\n                        <div class=\"userbox__item hidden-xs js-hide-on-edit\">\n                            {{if status == 1 &amp;&amp; userIsOwner}}<div class=\"status status_moderate\">\u041d\u0430 \u043c\u043e\u0434\u0435\u0440\u0430\u0446\u0438\u0438</div> {{/if}}\n                            {{if status == 3 &amp;&amp; userIsOwner}}<div class=\"status status_publish\">\u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d</div> {{/if}}\n                        </div>\n                    </div>\n                    <time class=\"comments__time visible-xs\">{{:date}}</time></p>\n<pre><code>            &lt;/div&gt;\n            &lt;div class=\"comments__action\"&gt;\n                &lt;div class=\"comment-button\"&gt;\n                    {{if userIsOwner &amp;&amp; !read_only}}\n                    &lt;a href=\"#\" data-comment-id=\"{{:id}}\" class=\"js-action-link comment-button__icon comment-button__icon_edit js-action-link js-faq-link-edit js-comment-link-edit\"&gt;\n                        &lt;svg&gt;&lt;use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/_source/assets/images/icon.svg#icon_edit-post\"&gt;&lt;/use&gt;&lt;/svg&gt;\n                    &lt;/a&gt;\n                    &lt;a href=\"#\" data-url=\"/api/comment/delete/?id={{:id}}&amp;type=faq\" data-id=\"{{:id}}\" class=\"js-action-link js-feedback-del comment-button__icon comment-button__icon_delete js-faq-link-delete\"&gt;\n                        &lt;svg&gt;&lt;use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/_source/assets/images/icon.svg#icon_delete-post\"&gt;&lt;/use&gt;&lt;/svg&gt;\n                    &lt;/a&gt;\n                    {{/if}}\n                    {{if userIsConsultant &amp;&amp; !read_only}}\n                        &lt;a href=\"javascript:void(0);\" onClick=\"reply({{:id}});\" class=\"js-action-link comments__do-replay js-action-link \"&gt;\u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c&lt;/a&gt;\n                    {{/if}}\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"comments__status visible-xs js-hide-on-edit\"&gt;\n                {{if status == 1}}&lt;div class=\"status status_moderate\"&gt;\u041d\u0430 \u043c\u043e\u0434\u0435\u0440\u0430\u0446\u0438\u0438&lt;/div&gt; {{/if}}\n                {{if status == 3 &amp;&amp; userIsOwner}}&lt;div class=\"status status_publish\"&gt;\u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d&lt;/div&gt; {{/if}}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"comments__text js-hide-on-edit js-faq-content\"&gt;\n            {{:content}}\n        &lt;/div&gt;\n        {{if userIsOwner &amp;&amp; !read_only}}\n        &lt;div class=\"comments__text js-show-on-edit\" style=\"display: none;\" id ='comments-form-{{:id}}'&gt;\n                 &lt;form id=\"commentform-{{:id}}\" class=\"edit-comment\" action=\"/api/comment/update-comment/?id={{:id}}&amp;entity={{:entity}}&amp;type=faq\" method=\"post\" data-id=\"{{:id}}\"&gt;\n                     &lt;input id=\"comment-user_id-{{:id}}\" class=\"form-control\" name=\"ConsultationQuestion[user_id]\" value=\"{{:author.id}}\" type=\"hidden\"&gt;\n                     &lt;textarea id=\"comment-content-{{:id}}\" class=\"textarea-control comments__textarea-ctrl\" name=\"ConsultationQuestion[question]\" rows=\"3\" placeholder=\"\" data-comment=\"content\" data-emojiable=\"true\"  &gt;{{:contentToEdit}}&lt;/textarea&gt;\n\n                    &lt;div class=\"comments__buttons\"&gt;\n                        &lt;a href=\"javascript:void(0)\" onclick=\"cancelEditComment('{{:id}}')\" class=\"js-action-link  btn-cancel-comment button button_as-link\" title=\"\"&gt;\n                            \u041e\u0442\u043c\u0435\u043d\u0430\n                        &lt;/a&gt;\n                        &lt;a href=\"javascript:void(0)\" onclick=\"submitForm('commentform-{{:id}}')\" class=\"js-action-link button  btn-send-edit-comment edit-comment send-comment button button_save-comment\" title=\"\"&gt;\n                            \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\n                        &lt;/a&gt;\n                    &lt;/div&gt;\n                 &lt;/form&gt;\n                &lt;/div&gt;\n        &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/li&gt;\n&lt;li id=\"faq-answer-{{:id}}\"  class=\"comments__item comments__item_child\" {{if !answer.content}} style=\"display:none;\"{{/if}}&gt;\n    &lt;div class=\"comments__body\"&gt;\n        &lt;div class=\"comments__head\"&gt;\n            &lt;div class=\"comments__user\"&gt;\n                &lt;div class=\"userbox userbox_comment\"&gt;\n                    &lt;div class=\"userbox__item\"&gt;\n                        &lt;div class=\"userbox__icon\"&gt;\n                            &lt;a href=\"{{:answer.author.link}}\"&gt;&lt;img src=\"{{:answer.author.avatar}}\"&gt;&lt;/a&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"userbox__item\"&gt;\n                        &lt;div class=\"userbox__sub\"&gt;&lt;a href=\"#\" class=\"userbox__link\"&gt;{{:answer.author.name}}&lt;/a&gt;\n                            &lt;time class=\"userbox__time hidden-xs\"&gt;{{:answer.date}}&lt;/time&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"userbox__sup js-hide-on-edit\" id=\"no-edit-label-{{:id}}\"&gt;\u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442&lt;/div&gt;\n                        &lt;div id=\"edit-label-{{:id}}\" class=\"userbox__sup js-show-on-edit\" style=\"display: none;\" &gt;\u041e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e {{:author.name}}&lt;/div&gt;\n                    &lt;/div&gt;\n\n                &lt;/div&gt;\n                &lt;time class=\"comments__time visible-xs\"&gt;{{:answer.date}}&lt;/time&gt;\n\n            &lt;/div&gt;\n            &lt;div class=\"comments__action\"&gt;\n                &lt;div class=\"comment-button\"&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"comments__status visible-xs js-hide-on-edit\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"comments__text js-hide-on-edit js-faq-content\"&gt;\n            {{:answer.content}}\n        &lt;/div&gt;\n        {{if !read_only }}\n        &lt;div class=\"comments__text js-show-on-edit\" style=\"display: none;\" id ='comments-form-{{:id}}'&gt;\n                 &lt;form id=\"replyform-{{:id}}\" class=\"edit-comment\" action=\"/api/comment/create/?entity={{:entity}}&amp;type=faq-reply\" method=\"post\" data-id=\"{{:id}}\"&gt;\n                     &lt;input id=\"comment-user_id-{{:id}}\" class=\"form-control\" name=\"ConsultationReply[consultation_question_id]\" value=\"{{:id}}\" type=\"hidden\"&gt;\n                     &lt;textarea id=\"comment-content-{{:id}}\" class=\"textarea-control comments__textarea-ctrl\" name=\"ConsultationReply[reply]\" rows=\"3\" placeholder=\"\" data-comment=\"content\" data-emojiable=\"true\"  &gt;{{:answer.reply}}&lt;/textarea&gt;\n\n                    &lt;div class=\"comments__buttons\"&gt;\n                        &lt;a href=\"javascript:void(0)\" onclick=\"$('#faq-answer-{{:id}}').hide();\" class=\"js-action-link  btn-cancel-comment button button_as-link\" title=\"\"&gt;\n                            \u041e\u0442\u043c\u0435\u043d\u0430\n                        &lt;/a&gt;\n                        &lt;a href=\"javascript:void(0)\" onclick=\"submitForm('replyform-{{:id}}')\" class=\"js-action-link button  btn-send-edit-comment edit-comment send-comment button button_save-comment\" title=\"\"&gt;\n                            \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\n                        &lt;/a&gt;\n                    &lt;/div&gt;\n                 &lt;/form&gt;\n                &lt;/div&gt;\n        &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/li&gt;\n</code></pre>\n<p>\n``.`. First, I open the page by reference, if an error occurs, then press f5.\nI understand that this sounds stupid, but with the same raw data, the error sometimes appears that disappears.. I was sent such a screenshot\nhttp://joxi.ru/RmzYkKwU9pnVrO. ",
    "samstrat": "figured it out. ",
    "tiesont": "Ah. Did not see that (to be honest, I don't remember looking at the issues list or existing pull-requests). If it's simply a matter of reverting the heading markup, I can do that.. ",
    "yedduprasasd": "Boris, The {%  %} is for Django based server side interpolation. Thank you for the revert.\nMy issues is sorted out.\nFrom: Boris Moore [mailto:notifications@github.com] \nSent: Saturday, June 17, 2017 11:32 PM\nTo: BorisMoore/jsrender jsrender@noreply.github.com\nCc: yedduprasasd yeddu.prasad@yahoo.com; Author author@noreply.github.com\nSubject: Re: [BorisMoore/jsrender] jsrender does not show data in select - options (#324)\nIt seems like JsRender is functioning correctly, and your issue is not coming from JsRender at all.\nIt looks like you are using other technologies for generating content - some kind of server rendering with templates? I don't know what the {% %} and [% %] markup relates to.\nIf changing a class makes the options show up, then your issue involves CSS styles - presumably a CSS stylesheet containing \"chosen-select\" - and associated with the \"HTML template you bought\". Again, the issue would be with this rather than with JsRender.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/BorisMoore/jsrender/issues/324#issuecomment-309230612 , or mute the thread https://github.com/notifications/unsubscribe-auth/AStjm1sgUW6IjqX6n0QW_I_dBzIdWixAks5sFBS0gaJpZM4N7LmN .  https://github.com/notifications/beacon/AStjmwbuYMrTy1TqvimuWsIX1EqatblZks5sFBS0gaJpZM4N7LmN.gif \n. ",
    "robbertbrak": "It seems to work pretty well, thanks!\nI briefly tested various settings of debugMode, such as  debugMode(true), debugMode(false), debugMode('foo'), debugMode('') and debugMode(myErrorFunc), with and without onError overrides at the tag level. Both jsrender.js and jsviews.js behave exactly as I would expect.. That looks very promising, thanks! Since this is not a breaking API change, it would be great if you could put it in the V1 release. But of course, I leave that decision up to you.\nI tried the prototype. It works well with toplevel templates, but it seems to break on subtemplates introduced by {{for}} and {{if}} tags. For example, the following does not render the addresses:\n```\nvar data = {name: \"Jo\", addresses: [{street: \"1st Ave.\", zip: \"120300\"}, {street: \"2nd Ave.\", zip: '450600'}]};\n$.templates({\n  personTmpl: \"Name: {{:name}} {{for addresses}}Street: {{:street}}{{/for}}\"\n});\nvar preCompiled = $.views.preCompile();\n//preCompiled.personTmpl.fn = newPersonTmplFn; // Could replace a function by an optimized version\n$.templates({personTmpl: null, addressTmpl: null}); // For  test purposes, unregister templates\n$.templates(preCompiled); // Register templates using precompiled objects\nvar html = $.templates.personTmpl(data);\n```. Great! That updated version indeed works quite well. \nI looks like that modified version of jsonview.js does not output the fn attribute. Based on that idea, though, it was easy to implement a simple serializer that produces workable (copy-pastable) output:\n```\nfunction stringifyJsRender(obj) {\n  var str = '{\\n';\n['markup', 'tmplName', 'bnds', '_is'].forEach(function(prop) {\n    str += prop + ': ' + JSON.stringify(obj[prop]) + ',\\n';\n  });\nstr += 'fn: ' + obj.fn.toString() + ',\\n';\n  str += 'tmpls: [';\n  str += obj.tmpls.map(stringifyJsRender).join(',\\n');\n  str += ']\\n}';\n  return str;\n};\nfunction renderPrecompiledTmpl(tmpl) {\n  document.body.innerHTML = '';\n  document.body.setAttribute('style', 'white-space:pre;overflow:auto;');\n  document.body.textContent = stringifyJsRender(tmpl);\n};\nrenderPrecompiledTmpl($.views.preCompile('#my-tmpl'));\n```. I'm happy to hear that. Thank you again for the effort you're putting into this!. That's too bad, but I understand your decision, now that it turns out to be unfeasible to make it work in the general case. For me personally, however, I think that the special cases in which it does work are sufficient, as I'm only using JsRender and (probably) don't do any of the things that require on-the-fly compilation.\nComing back to my original purpose, which is getting rid of unsafe-eval in our Content Security Policy, is there still some way to get there, even if it means that I cannot use the full strength of JsViews / JsRender? For example: exposing just enough of the compilation API to be able to build my own precompilation?\n. ",
    "alnico2001": "Ah ha, I think I forgot about the \"Abbreviated syntax and full syntax for data-link\" as specified on this page.\nhttp://www.jsviews.com/#link2way\nI knew that full syntax was needed for multiple targets, but forgot that data-link=\"name\" is the shortcut for data-link=\"{:name:}\". I won't forget again ;-)  ...and a syntax error would be great.\nWorks perfect now, thank you!\n. Sorry. Yes, if I can comment out  {{!-- then why not {^{!--\nOne of the same to me.. Ah yes, the more I think about it...I agree, they are different.\nAnd indeed I do wrap {{!-- {^{:foo}} --}} as you've suggested.\nIt is such a minor thing anyway; so I am completely fine the way it is.\nThanks.\nGreat library by the way!\n. Update to my previous post. I have decided to never encode html when storing in db, as this affects length and makes queries more difficult.  But, I thought x&lt;y would render the same using data-link like a plain input/textarea element...x<y...I guess we would need something like data-link=\"{{>data}}\" for it to render that way.\nThanks,. Thanks Boris, that will be much more convenient. . ",
    "earshinov": "Let me put the code here for convenience:\n```html\n\n  {{:a.getHtml()}}\n  {{if true}}{{:b}}{{/if}}\n\n\n  1\n\n```\n```javascript\nfunction renderTemplate(templateId, data) {\n  if (!$.render[templateId])\n    $.templates(templateId, \"#\" + templateId);\n  return $.rendertemplateId;\n}\nclass InnerView {\n  getHtml() { return renderTemplate(\"tpl-inner\", this); }\n}\nclass OuterView {\n  constructor(a, b) { this.a = a; this.b = b; }\n  getHtml() { return renderTemplate(\"tpl-outer\", this); }\n}\nvar a = new InnerView();\nvar b = 2;\nvar outer = new OuterView(a, b);\nalert(outer.getHtml());\n```. Thank you for the clarification. I think we will wait for the next update.. ",
    "sharepointmike": "Thanks a lot Boris!!. ",
    "kiebor": "Thanks, Boris. Below works for me to get the iterator in the range/for loop\n{{range start=1 end=5}}\n  {{if #getIndex() < 4 }}\n    <span>true</span>\n  {{/if}}\n{{/range}}\nbut what I wanted was to be able to validate the iterator against someNumber. In this loop my data value someNumber equates to null, or is inaccessible.\nIdeally I was hoping to achieve something like:\njs\nfor (i = 1; i < 6; i++) {\n  if(someNumber > i){\n     //true\n  }\n}\nI'll add some context. I'm using JsRender/JsViews to template a set of product cards:\n```\n\u00a0\n{{for Cards}}\n  \n\n\n\n\n\n\n\n\n\n\n\n  <div class=\"img-container with-grow\">\n    <img src=\"{{>PhotoURL}}\" class=\"img-responsive\" />\n  </div>\n\n  <div class=\"product-rating\">\n    {{range start=1 end=5}}\n      {{if ~Average >= #getIndex()}}\n        <span class=\"glyphicon glyphicon-star rated\"></span>\n      {{else}}\n        <span class=\"glyphicon glyphicon-star unrated\"></span>\n      {{/if}}\n    {{/range}}\n  </div>\n\n  <div class=\"card-main-text\">\n    <p class=\"detail-block-text\">\n      <strong class=\"text-concat\">\n        <a class=\"carbon-text\" href=\"{{>ProductNameUrl}}/{{>GUID}}\">{{>ProductName}}</a>\n      </strong>          \n    </p>\n\n    <p class=\"catalogue-reference\">\n      <span class=\"fontsize\">\n        {{>CatRef}}\n      </span>\n    </p>\n    {{if StockLevel > 0}}\n        <span><span class=\"available-stock\">&bull;&nbsp;</span>{{>StockLevel}}</span>\n    {{else}}\n        <span><span class=\"nostock-text\">&bull;&nbsp;</span>Out Of Stock</span>\n    {{/if}}\n    <p class=\"price-block\">\n        <span>\n            <span class=\"availableprice-text\">{{>MRRP.Symbol}}{{>MRRP.Value / Precision}}</span>\n        </span>\n    </p>\n\n  </div>\n\n<footer class=\"card-footer\">\n  {{if StockLevel > 0}}\n  <a class=\"btn btn-basket-add block-tall with-ripple\">\n    <i class=\"icon-add_shopping_cart\"></i>\n  </a>\n  {{else}}\n  <a class=\"btn btn-basket-add block-tall is-disabled\" disabled>\n    <i class=\"icon-add_shopping_cart\"></i>\n  </a>\n  {{/if}}\n</footer>\n\n  </div>\n\n\n{{/for}}\n```\nFor the better part, this renders nicely, but there is only 1 place that I stumble:\n * the product-rating block | the value of Average is unknown (despite being in the json)\n. ",
    "ronkpunk": "Sure that GetLabel returns results synchronously. \nIt works perfectly!\nThank you. ",
    "akatsukle": "Yes jsrender was installed through npm install.\nThe actual message does actually only contains the stack:\n```\n[2018-09-25 13:23:07.497] [INFO] generate-input-sanitize - Sanitize functions for client.Command generated at C:...\\sanitize\\clientCommand.autogen.js\n[2018-09-25 13:23:07.526] [INFO] generate-input-sanitize - Sanitize functions for debug.Command generated at C:...\\sanitize\\debugCommand.autogen.js\nC:...\\node_modules\\jsrender\\jsrender-node.js:1722\n        throw new $sub.Err(message);\n        ^\nError\n    at C:...\\node_modules\\jsrender\\jsrender-node.js:223:27\n    at Object. (C:...\\node_modules\\jsrender\\jsrender-node.js:2753:2)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (C:...\\tools\\protobuf\\generate_jsdoc.js:9:16)\n```\nI tried to reproduce with a simple new project, but the error does not pop up for some reason.... Ok, I did not notice that the actual error message was not logged.\nI got the following error: \njsrender got error Syntax error\n{{else}} block has {{/fi}} without {{fi}}, in template:\n{{for fields}}\n    {{if notImplemented}}\n        // a\n    {{else}}\n        {{if obsolete}}\n            // b\n        {{else}}\n            {{if field.is_array}}\n                {{if optional}}\n                    // c\n                {{else}}\n                    // d\n                {{/fi}}\n            {{else}}\n                {{if optional}}\n                    // e\n                {{else}}\n                    // f\n                {{/fi}}\n            {{/fi}}\n        {{/fi}}\n    {{/fi}}\n{{/for}}\nThe template looks correct to me, but I'm not too confident here.. I thought I read somewhere that either {{/fi}} or {{/if}} could be used but that may be a misrecollection.\nv0.9.90, actually works fine with the fi, and would apparently actually accept anything as closing tag.\nThanks for your time.\nI'll close it now, feel free to reopen in case its needed.\n. ",
    "ilovetogetspamed": "Wow, not my day.  Sorry.  It works great now!  Thanks for all hard work on jsrender.. ",
    "johan-ohrn": "I forgot to mention this is on version 0.9.91 but the code is identical in version 1.0.0.. I think a setting would be valuable for people in this situation. I agree that it's clumsy to have to individually add support for each character but at least it's a one time configuration.\nIn this particular case the offending property names are auto generated resource keys. We have a resource object like this:\nresources: {\n  f\u00f6r_l\u00e5gt_antal_angivet: 'Entered quantity is to low',\n  ...\n}\nIn our view models we write code such as\ndisplayError(resources.f\u00f6r_l\u00e5gt_antal_angivet)\nand in our templates we do the same:\n{{if quantity < 4}}\n  {{:~resources.f\u00f6r_l\u00e5gt_antal_angivet}}\n{{/if}}\nHaving to use one syntax in the javascript files and an other in the template (sometimes) is unintuitive.\nAlso developers are more comfortable with the dot notation instead of the index notation to access properties.\nWhat's worse is when we need to change a resource. A developer would just copy/paste the new resource key in the template without considering that a property with non english characters need to be typed using the index notation. And because the change is so small it's also likely that it's not tested. It's just expected to work. In this contrived example there is an {{if}} surrounding the expression making it even more likely that this particular code path is not tested.\nMy 2 cents is that even though there is a viable workaround for the issue a setting would make this kind of code less error prone since you don't have to remember a special rule and more consistent with how you write code in the javascript viewmodel.\nAlso a setting like in the example you gave would allow for a small plugin/extension such as jsrender.latin1.js or whatever pre defined charset such that users wouldn't have to manually configure this.. Thanks. I'll try it out and will keep an eye out on this thread to see where it ends up.. Sounds good. In the meantime I use this quick fix.. I was able to create a test html page. Download here (sorry about the adds and wait time to download)\nI extracted every character from the regex.\nThe only character that appears to be invalid in fact in chrome is \"\u2e2f\" which I have commented out in the html file.\nI tested this with the jsviews version you provided. It throws an error.\nI will test some more to see if I can isolate which characters are the culprit.. I was at the end of my shift and had been messing back and forth with this test page so I missed the obvious $.views.settings.advanced(...) call :)\nGood that you made it work!\nSo we confirmed that the regex does indeed cover all unicode characters.\nThe fact that it covers more than some browsers doesn't really matter I think.\nAlso since the regex does cover all unicode characters I don't see the need for a user to explicitly allow specific characters. Unicode on or off is sufficient. This should also result in a lower footprint for the feature.\nIf the option is to allow unicode or not then I see two possible implementations, well three.\n1) Making unicode opt-in via $.views.settings.advanced({unicodeChars: true});\nThis alternative should ensure that no existing templates are broken by an unexpected bug in the new regex. Also adds more bytes to the final js file.\n2) Somehow allow setting the full rPath and rParams regexes from outside jsviews.js. This would allow you to make unicode support opt-in from a jsviews-unicode.js file moving the overhead completely from jsviews.js itself.\n3) Skip the option alltogether and just change the regex thus making unicode supported out of the box.\nWhat's your take on these ideas?. I gave it a try but run into some issues with jsrender-unicode.js\nThe regexes in jsrender-unicode.js is not the same as those we used here\nIs this intentional?\nModifying jsrender-unicode.js to use those regexes seem to work (comments left out for abbrevity):\n$.views.sub.rPath =\n    /^(!*?)(?:null|true|false|\\d[\\d.]*|([^.^\\s~/\\x00-\\x23\\x25-\\x2D\\x3A-\\x40[\\]\\\\`{}|]+|\\.|~([\\w$]+)|#(view|([\\w$]+))?)([^\\s~/\\x00-\\x23\\x25-\\x2D\\x3A-\\x40[\\]\\\\`{}|]*?)(?:[.[^]([^.^\\s~/\\x00-\\x23\\x25-\\x2D\\x3A-\\x40[\\]\\\\`{}|]+)\\]?)?)$/g;\n$.views.sub.rPrm =\n  /(\\()(?=\\s*\\()|(?:([([])\\s*)?(?:(\\^?)(~?[\\w$.^]+)?\\s*((\\+\\+|--)|\\+|-|~(?![\\w$])|&&|\\|\\||===|!==|==|!=|<=|>=|[<>%*:?/]|(=))\\s*|(!*?(@)?[#~]?[^\\s~/\\x00-\\x23\\x25-\\x2D\\x3A-\\x40[\\]\\\\`{}|]+)([([])?)|(,\\s*)|(\\(?)\\\\?(?:(')|(\\\"))|(?:\\s*(([)\\]])(?=[.^]|\\s*$|[^([])|[)\\]])([([]?))|(\\s+)/g;\nI also found some left over code and double comments (line numbers from jsrender.js):\nline 114:\n// subscription, e.g. JsViews integration\nline 161:\nvar unicodeChars = value && value.unicodeChars;\n                if (unicodeChars) {\n                    setPathRegEx(unicodeChars);\n                }\nYou might want to double check any changes related to this issue.. I finally got to implement the fix in our code. Works perfectly so far!\nI'll test it some more and see if anything turns up.. Glad to hear.\nNo problems so far.. ",
    "paulvales": "I create array on the backend Yii2 (replaced index array with id item of row in db), i think  problem with missing length attribute in array. yes, I got it, Thanks!. Backend on the Yii2, return JSON array, on frontend used JsRender for render this JSON array. When i reindex array, on backend, index keys replaced id items from db. \"props\"  helped, thank you very much!. ",
    "btsvennes": "Not my strong side, but I believe we're using Node.js to build the bundle.js-file in a Gulp-task.\nI've now added a check to see if there is a global jQuery. If not I call the result of require('jsrender') with jQuery as parameter.\nThere was no change in behavior between v1.0.2 and v1.0.0 (I actually upgraded to v1.0.2 to check if the \"error\" disappeared).\nAs a conclusion; I need to check if there is a global jQuery or not and take actions accordingly. Would be nice if the jsrender-library handled this (for instance by ignoring the call with jQuery as parameter if a global jQuery existed).\nForgot to mention; cudos for a great template-library. Thank you very much.. I see. Then this is not an error. Sorry for troubling you.. ",
    "sp00n": "Yeah, I stumbled across the {{>varName}} as well and wondered why it wouldn't parse the data correctly. Bummer.. Still I do wonder why this shouldn't trigger an {{else}} clause. Wasn't that specifically introduced to catch such cases? At least from a user's point of view this seemed like the intended purpose.\nAnd since an empty object does trigger the else clause, this also feels a bit inconsistent.. "
}