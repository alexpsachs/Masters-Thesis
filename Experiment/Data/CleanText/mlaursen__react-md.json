{
    "mlaursen": "The tooltip position is also not calculated correctly for table columns or things that have bigger widths than their inner content. Not sure how to handle that yet.\n. This should be fixed in @react-md/tooltip@2.0.0-alpha-1 with the MagicTooltip and RelativeTooltip components. . This is technically doable in v1.0.0 by passing the Tabs as the toolbarChildren prop, absolutely positioning the tabs, and enabling toolbarProminent. It does not allow for the TabsContainer and  the swiping though.\n. Right now, I don't have it targeted for any release. But here is how it was implemented for my website:\nhttps://github.com/mlaursen/react-md/blob/9f0136abb7b286b1dccbabb91b2c207ef19f4d35/docs/src/components/DocumentationTabs/_styles.scss. Thanks! I'm still trying to work out a good API since the content and styling is quite dynamic for this component. It will be the next component I implement after the Expansion Panels.\n. This hasn't been worked on too much yet. I have a couple of ideas floating around, but they don't seem low-level/customizable enough for the different use cases yet.. @cdvv7788 I will be working on implementing this after I finish the 1.2.0 release (hopefully by end of next week), but I still welcome PRs if it is something you'd like to work on.. They are still unable to have a min and max range spanning from negative to positive or fractional steps greater than 1. It is however a huge accuracy boost and behaves a lot nicer at this point.\n. Forgot to create a ticket for the one line fix. Was pushed to master, Whoops.\n. That sounds reasonable to me. It looks like I am also missing some other key events which should be fixed as well. It looks like in one of my ListItem updates, I accidentally removed the tabIndex from these items so you can't even tab through the items.\nSo the things needed to fix this would be:\n- Select an option when a letter key is pressed\n- Enable tabbing through items\n- Autofocusing first element or selected item when select field is open (undecided)\n- Enable the up/down arrows to navigate through items\n. There is different behavior on the html select tag between browsers and OS. Great stuff. After playing around, I do agree that tab should not be used to navigate through items.\nI think that the behavior should be as follows:\n- User tabs focus onto the unopened select field\n  - User can press the down key to select the next item in the menuItems (if it exists)\n  - User can press the up key to select the previous item in the menuItems (if it exists)\n  - The menu is not opened for these two events\n- User presses enter or space to open the menu\n  - Currently selected item has focus\n  - Same up and down key press logic.\n  - User can press enter or space to select a current item which closes the menu and adds focus back to the unopened text field\n  - User can press tab to select the current item which closes the menu and adds focus to the next focusable page element.\nI am not entirely sure if the ListItem component itself should have a tabstop prop or if the component using the ListItem should handle the onKeyUp listener for preventing a next tab key.  I am leaning a bit towards having the component using the ListItem to manage the onKeyUp listener because I think the general behavior of the List/ListItem component would be that you can tab through them. I am not sure where the correct place for that logic would be yet.\n. I believe the documentation should specify that the props are added onto the input component instead of the field container so that any event handlers can be passed down correctly. That should be a documentation update.\nAfter looking through the code, I believe that the style should actually be applied to the container instead of the inout/textarea tag since it would be much more likely to want inline styling on the container. \n. That sounds good to me. Will be a few lines shorter to implement :)\n. I think there was some miscommunication on my part; I'm sorry about that!  The real files we want to edit are in the src dir instead of the lib dir. The lib dir is for the babel transpiled files from the src dir.\nThe file you should have updated was src/js/TextFields/TextField.js\nI'll be updating the README to make this more clear and updating the section about contributing. Sorry again!\n. I think that is a fantastic idea.\nI hadn't actually set anything up yet (real work flow, groups, contributing info) because I hadn't thought anyone was using this library since I haven't done a real release. I guess this is a good time as any to get everything rolling since the v0.1.0 real release is coming close.\nI thought I knew what I was doing and created a group at https://react-md.slack.com, but not entirely sure how to create a public group yet. I'll check back on it later (or if you know how).\n. I like the idea for the slack-invite-automation. I will set that up later this week and get that rolling!\n. I went with creating a gitter instead.\nhttps://gitter.im/mlaursen/react-md\nOnce I update the documentation website with a link to here, I will mark this ticket as done.\n. This looks good to me.\nI will go ahead and update the documentation tonight since a friend designed some new images for it.\n. I think this might be a good time to start working on tests. Hopefully they would have caught something like this. Can test that style and className are getting applied to the correct components. I haven't worked much with front end testing though, so I'm a bit uncertain.\n. I think the best idea will be to create a ticket for each component so we can see the progress of implementing tests.\nI currently have 2 simple tests running with Jest, so I think that will be a step in the right direction.\n. This is moot since the Sidebar has been deprecated in favor of the Drawer instead.\n. I think this is a good idea. I am a little iffy about the naming. I had gone with fullWidth before because it was how it was named in the Material Design docs. However, I do believe block is a better name describing how it looks and feels.\nI think this will be a good change for 0.2.0. I will add some deprecation warnings for 0.1.3 about the switch.\nLooking at the commit, you will probably fail lint. Would you like comments on that commit, or once you have opened the pull request?\n. https://travis-ci.org/mlaursen/react-md/builds/128899752#L349\nAre you able to see the travis logs?  It looks like you are failing some rules for scss lint.\n. Ok, once I get some time, I'll roll out the 0.1.3 release to add deprecation warnings and then this ticket in 0.2.0\n. Versions 0.1.3 and 0.2.0 have been published. Marking this as done.\n. Looks good. I'll merge tomorrow morning \n. This should solve #49 \nIt also fixes:\n- The onChange function was not being called correctly.\n- Did not allow null value\n- Did not allow Date object as value\n. I can look into the umd build. I haven't actually worked with umd before, but it does look like there are a few tools out there for it so it might be relatively painless.\n. Versions 0.3.1 and up should now support UMD. I have published 0.3.1 today. Let me know if you run into any problems.\n. If i am understanding UMD correctly, it is just a way to allow AMD and RequireJS. Here are some examples for AMD, RequireJS, and es6 module imports. I am assuming you can use ES6 in your project though.\n``` js\n// AMD\nrequire(['react', 'react-dom', 'react-md/lib/Cards'], function(React, ReactDOM, Cards) {\n  const { Card, CardText } = Cards;\nReactDOM.render(\n    \nThis is some text for a card\n,\n    document.getElementById('app')\n  );\n});\n```\n``` js\n// RequireJS\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst Cards = require('react-md/lib/Cards');\nconst { Card, CardText } = Cards;\nReactDOM.render(\n  \nThis is some text for a card\n,\n  document.getElementById('app')\n);\n```\n``` js\n// ES6 Modules\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Card, CardText } from 'react-md/lib/Cards';\nReactDOM.render(\n  \nThis is some text for a card\n,\n  document.getElementById('app')\n);\n```\nI am honestly guessing on the AMD implementation though. There aren't too many examples I can use to base that off of.I just know that my compiled sources in lib reflect this article: http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/#umd-universal-module-definition\n. Ahh ok. I didn't understand the ticket then. I'll reopen and set that up!\n. Ok, my latest pull request (and release 0.3.2+) will work in the browser or through the normal amd/requirejs/es modules imports.\nI am not sure what version of babel you are using since 6+ removed the browser support.. but i got it working using the babel-standalone.\nSo here was the index.html I used.\n`` html\n<!DOCTYPE html>\n<html>\n  <head><link href=\"node_modules/react-md/dist/react-md.css\" rel=\"stylesheet\"></head>\n  <body>\n  <div id=\"app\"></div>\n  <script src=\"node_modules/react/dist/react-with-addons.js\"></script>\n  <script src=\"node_modules/react-dom/dist/react-dom.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.7.7/babel.min.js\"></script>\n  <script src=\"node_modules/react-md/dist/react-md.js\"></script>\n  <script type=\"text/javascript\">\n    const input =\nconst { Card, CardText } = ReactMD;\nclass App extends React.Component {\n  render() {\n    return (\n      \nHello, world!\n\n    );\n  }\n}\nReactDOM.render(, document.querySelector(\"#app\"));\n`;\neval(Babel.transform(input, { presets: ['es2015', 'react', 'stage-0'] }).code);\n  \n\n```\nSo every component is now accessible through the global ReactMD and you need to make sure to use the react-with-addons instead of react since this project relies on those peer dependencies.\n. I looked into the Noto fonts, and it might be a little bit harder since it is still in early access. So the ways you can use this font depend on how the fonts will be hosted and what languages you will be supporting. The two cases I see are: locally hosted and google fonts hosted. For each case, you will probably need to determine the user's language and then update the fonts to use that font name.\nLocally Hosted\nThe idea would be to download all the Noto fonts with their languages you would be supporting. There is a nice font mixin that you can use to create the font-faces. Then the basic idea would be to check your user's language using your server or javascript and load the correct font. Once you have all of that set up, you could add a class to the html for the correct language.\nSo for example loading Sundanese:\nscss\nhtml.noto-sundanese {\n   font-family: 'Noto Sans Sundanese', sans-serif;\n}\nGoogle Fonts Hosted\nThis would follow the same idea of detecting the user's language and setting the correct language. https://www.google.com/fonts/earlyaccess has a list of all the imports available. You could also try to use the webfontloader which would automatically load the fonts and update the html class name with the font library loaded.\nBut to recap:\n1. Determine user's locale from server or javascript\n2. Load correct Noto font library for that locale\n3. Update html with a class name that will change the font family to the correct Noto font family\n. I might need a bit more context on that resolve-url-loader problem. I do know that depending on how you are using the css @import url statements, you might need to disable url handling from the css-loader since \n\n@import and url(...) are interpreted like require().\n\nCSS Loader Usage\nThe only examples I have right now are from my documentation website.\nUsage in the theme switcher\nWebpack Base Config\nWebpack Dev Config\nWebpack Prod Config\n. Could you merge this into 0.3.x instead of master? I forgot to update Readme for branch merges.\n. Nevermind, fails all tests for some reason.\n. Oops. Thanks!\n. Handling forms is usually a pain because of all the validation that needs to happen for them. You could try using formsy-react to handle that for you.\nIt is best from a user's experience to not have errors appear only when they submit, so it is best to have validation occurring on blur or change. You can attach it to each input, or on the global <form>. But you are right, text field's do not currently support the name prop (accidental removal), so the global one would be hard. I'll fix that for the 0.3.3 release.\nThe only things I have found with forms in material design is the Errors -Pattern. Not sure if that will help you  much though.\n. Ahh sorry about that. I didn't want to have all of the other code visible to try to keep it small and I hacked that card a bit.. Doesn't work with all file types :). My demo website has it's own github. It's really a lazy way of testing my project as a separate dependency.\nThe UploadedFileCard is defined here and he only thing the CSSTransitionGroup is doing is added a small scaleY animation when a file is added or removed so you can skip over that. Let me know if there are any more questions; I'll try to help out.\n. Thanks! I thought I fixed it with this commit, but it looks like it still fails on server side rendering. Bleh.\nWould you mind merging this into release/0.3.x instead of master?\n. Doing 1 and 3 didn't really improve the performance on mobile. Might have to implement 2. Bleh. It could also be how I implemented the nav items or how the drawer has to be created each time it opens.\n. The current fix right now has been to always render the navigation drawer on mobile and just move when opening vs rendering and transitioning with CSSTransitionGroup on desktop.\n. Thanks, I will fix this for version 0.3.4. Hopefully it will be released later tonight.\n. Release 0.3.4 has been released with this fix.\n. I currently have a branch for fixing the custom prop types in multiple components, but I have not had time to push it up yet. This should be fixed by the 0.3.5.\n. This should be fixed now. Thank you.\n. I published the fix this morning. Sorry about that. I forgot I still have the sass in the src folder.\n. This problem occurs because the input is inside the label. It can be fixed by moving it outside. Odd.\n. Should be live now.\n. I can update the PropTypes to allow a single element. I didn't see a use case for a single tab when setting it up, so I enforced at least 2.\n. This has been fixed for the v1.0.0 release. I will close this issue once the alpha has been released.\n. This should be fixed once I finish up my refactoring branch. I've made the form controls behave a bit more like bootstrap out of the box -- full width text fields by default and removed the weird padding on text fields. I also implemented the material design grid system, so that should help as well.\nI hadn't thought about the label size for the selection controls since the design docs only specified different label sizes for text fields. I'll make sure to update that\nWould you mind explaining more about the right margins?\n. Ok, so I have gotten farther and nearing the end of the v1.0.0 release. Currently a form with both selection controls and text/select fields looks like this:\n\nIf you want to have the text fields and other content aligned with a selection control, you just need to add padding-left: 12px to those elements.\nI could either supply the styles:\nscss\n.md-selection-control-container ~ *:not(.md-selection-control-container) {\n  padding-left: 12px;\n}\nor\nscss\n.md-selelection-control-relative {\n  padding-left: 12px;\n}\nThe first one would work pretty well if your grid is set up nicely, but might cause too many problems. The second one would be a lot safer, but you would have to apply it to each element.\n\nHow would you feel about the second solution?\n. I actually don't think this is worth implementing as part of the base library since it is such a small style change after all the styling changes and the grid addition.\n. This is the result of me being lazy and trying to reuse as much code as possible. It is really just a simple combination of the Menu and TextField components which is why the label is always the value. I will update this to how I usually make custom selects: a hidden input containing the value and a current label. This will allow the document.getElementById('something').value to work as well. \nI also think that the component should do the heavy lifting to figure out which label to display based on the value given instead of having a developer figure it out each time they use the component. \n. This has been implemented in the v1.0.0 release. Going to close.\n. This one is going to take some time for me to figure out. A quickfix would be to make it so that the window scrolls so that the toggle component is at the top of the screen. This would be similar to how mobile devices handle the initial keyboard open (scrolls text field to top of page and then displays keyboard). I feel this is a dirty hack and won't be reliable when there are many scrollable areas. However, this might be necessary for autocompletes since it would be weird to have the menu appear above the text field.\nAnother possibility would be to have the menu be a fixed element on the page instead of wrapping the menu in a small container (to position relatively). This is how I believe material-ui implemented their menus. The only thing I do not like about this is that it seems sluggish if the user scrolls with a menu open.\nI'll think about this some more.\n. Here is a video of the current status of keeping items in viewport (looks like gif was cut short, full video here):\n\nIt isn't 100% perfect yet since it is supposed to attempt to swap vertical/horizontal positions when it reaches the viewport (it did actually swap it, but it still closed for some reason), and it does not attempt to swap positions when inside a scrolling container that is not the window.. Thanks! I am mainly going to be working on testing, documentation, code cleanup, and figuring out why eslint changed so much before I do the v1.0.0 release. Hopefully it will be a game changer :)\n. Could you do me a favor and add\n<style type=\"text/css\">\n  @import url('https://fonts.googleapis.com/css?family=Montserrat');\n</style>\nTo the readme.svg in defs ? It'll allow the Monserrat font on github :) But I can always do it after I merge as well..\n. Since I don't know anything about the Next.js project, it might be a little hard for me to debug. But I have a couple of questions that might be able to help.\n1. Does this work?\n``` js\nimport React form 'react';\nimport TransitionGroup from 'react-addons-transition-group';\nclass Test extends React.Component {\n  componentWillEnter(done) {\n    done();\n  }\n  componentWillLeave(done) {\n    done();\n  }\nrender() {\n    return  console.log(woop)} />;\n  }\n}\nexport default class App extends React.Component {\n  render() {\n    return \n\n\n\n\n\n\n console.log(test)} />\n      \n\n  }\n}\n``\n1. Does this problem still occur if you add anonClickhandler to theCardcomponent?\n2. If the following does not, what happens if you add aref` ?\nI can look into this more deeply once I finish my v1.0.0 release.\n. Sorry that's my bad. I couldn't figure out how to use the npm dist-tag correctly so the UMD for react-md.css no longer exists. With the v1.0.0 release, there are now 255? (18 * 15) precompiled themes available.\nYou can either link by:\n- specifying the pre v1.0.0 release: https://unpkg.com/react-md@0.3.7/dist/react-md.css (this is how it was working until this alpha)\n- or by continue using the latest https://unpkg.com/react-md/dist/react-md.PRIMARY-SECONDARY.min.css\nSo if you want teal and cyan as your colors, you could link with https://unpkg.com/react-md/dist/react-md.teal-cyan.min.css\n. I'm actually going to do a quick patch to add the pre-v1.0.0 files back so existing projects aren't destroyed..\n. I don't know how long it'll take for unpkg to refresh the latest tag from npm, but it should eventually update and the original https://unpkg.com/react-md/dist/react-md.css should redirect to https://unpkg.com/react-md@1.0.0-alpha.1/dist/react-md.css\n. It looks like I messed something up with the UMD build (I'm new to the UMD World). Using ReactMD.default works instead of just ReactMD. I'm not sure why it isn't working anymore since it is the same build as before. I'll look into it and get that fixed. Here is the example I used for the v1.0.0-alpha version.\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/react-md@1.0.0-alpha.1/dist/react-md.deep-purple-pink.min.css\">\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons|Roboto:400,500,700\">\n  </head>\n  <body>\n    <div id=\"app\"></div>\n        <script src=\"https://unpkg.com/react/dist/react-with-addons.min.js\"></script>\n    <script src=\"https://unpkg.com/react-dom/dist/react-dom.min.js\"></script>\n    <script src=\"https://unpkg.com/react-md@1.0.0-alpha.1/dist/react-md.min.js\"></script>\n    <script>\nconst MyAwesomeComponent = React.createClass({\n  render() {\n    return React.createElement(ReactMD.default.Button, { label: 'Hello', flat: true });\n  }\n});\nReactDOM.render(React.createElement(MyAwesomeComponent), document.getElementById('app'))\n    </script>\n  </body>\n</html>\n. No worries! I'm glad someone else is interested in my lib, it's gotten to be a bit hard to find every bug by myself so this is helpful. UMD had been an afterthought :/\n. Ok, it should all be fixed now. I published v1.0.0-alpha.2. So once unpkg refreshes, you should be able to use the UMD build without the .default.\n. Oof. Thanks! I'll push up some changes later tonight that will include that.\n. Nevermind. It is a lot more accessible to use Checkboxes instead of a multi-select field.\nhttp://webaim.org/techniques/forms/controls#select\n. Darn. I think this is a problem when I merged the new documentation site into the docs folder. It's lowercase on my filesystem so I never ran into a problem and there are sometimes bugs where file name case isn't enforced. I'll look into fixing it today. \n. This should be fixed now. Going to close.\n. This one is actually going to be pretty hard to fix. I keep pushing it back in priority. The CSS spec doesn't really have anyway to prevent a single child from inheriting the transform property. The previous versions of react-md didn't actually use the rotate transition with the code blocks so it didn't appear before.\nI'll try thinking about this some more to see if there is a fix. It might just be to prevent the flip transition if there is a tooltip :/ Don't really like that though.\n. This should be fixed now (if you use tooltips in the md-collapser and md-collapser--flipped). Unfortunately, this isn't a fix-all solution if the rotation happens outside of this use case. The code can just be duplicated in the referenced commit though.\nI am going to mark this as closed.. Could you give me the current react-md version this is happening in? It has been fixed in v1.0.0 and depending on how old it is, I might not patch it.\n. Ok, that isn't far aback at all. I'll look into patching that for v0.3.8. What version of React is this for as well? I am unable to reproduce this with the following examples:\n```js\nfunction handleClick(e) {\n  console.log('Clicked!', e.target);\n}\nclass Tests extends Component {\n  _handleClick(e) {\n    console.log('Clicked!', e.target);\n  },\nrender() {\n    return (\n      \nfavorite\n { console.log('Clicked!', e.target); }}>favorite\nfavorite\n\n    );\n  }\n}\n```\nAll of these tests did not print anything in the console when clicked.\nHowever, I can reproduce if I pass an href to the IconButton. I can quickly fix the rendering the IconButton as a link part.\njs\nconst Test = () => (\n  <IconButton href=\"#\" disabled onClick={e => { console.log('Clicked!', e.target); }}>favorite</IconButton>\n);\nIs this happening for you as the default IconButton?. Ahh. There isn't actually much I can do about this actually. This is how the event pooling/bubbling (I forgot what the real term is) works. The click event is actually bound to the button element and not the i. It just depends on where the user clicks on the button.\nVideo example. You can always remove this behavior by adding the following css:\nscss\n.md-btn * {\n  pointer-events: none;\n}\nHowever, I do not think this should be a part of the base library since it is valid to check what child in the button is clicked.. This was actually just a problem with my demo hacking.. With 1.1.0 changes of Portal is opt-in. I think this is moot now.. I lied. I already fixed it. I forgot to remove the pre-compiled themes from server again.. This might be related to #498 . This should now be fixed with @react-md/states@2.0.0-alpha-1. I'll close this once it has been released. . Since I am still not fully up-to-date with typescript, wouldn't it still require the definition files? The flow I was guessing is that the react-md build process would still compile the components from typescript. This would allow for faster development times since you wouldn't need to compile these components as well in your apps?. Ok, well I'm sold :)\nI think the Autocomplete would be a good starting example since it is one of the more complicated and has class and ref functions.\nA couple more questions:\n- How do React PropTypes work when mixed with the typescript interfaces? Does it automatically transform/compile/transpile the prop declaration into the corresponding PropTypes?\n- Would I need to switch my documentation server to using jsdoc instead of react-docgen for prop documentation?. So the branch I made in December is basically done. I just need to change the basic Event types to the ReactXEvent<target> thing and do some more testing in a repo someone made for me since I don't use typescript. It would be nice for someone to code review the types for me since I am guessing on everything :man_shrugging: \nI had originally planned on releasing this with the 1.1.0 release to follow SemVer. I could cheat and do 1.0.2 though.\nI haven't heard anything else about the Typescript rewrite, so I'm guessing it is too much effort.. That would be fantastic, thanks! I can do the event changes by Thursday and hopefully open up the pull request then. I'll try to decide if I want to cheat or not for the versioning. If I don't cheat, it might be awhile before this gets supported since the #197 will take a while to finish and is targeted for 1.1.0 as well.. @maxcan I checked the output and it is fairly accurate. The main concerns I have are that the callback function props aren't typed correctly --it just defaults to (...args: any[]) => any and it doesn't document any of the static or ref accessible functions.\nI would love to be lazy and have this tool do it for me instead of manually updating it, but I feel like you're losing the benefits of Typescript when they aren't as accurate as possible. I'm not sure if that is true, I personally prefer the typelessness of javascript. Let me know what you think.. Ok, I'll see how much I can programatically fix the output of using the react-to-typescript-definitions since a lot of fixes follow a typical pattern and compare the results to my other branch. I do like that the docgen comments are copied with the tool, so it can hopefully be picked up by your editors as well.\nBut as a side note... Would you happen to know how to correctly type a FileReader? The last thing I need to do in my branch is type the props here. (I guess I could default to any, Error, and Event?). Sorry, I haven't been actively doing this since I get distracted too much. I have a local commit for that existing branch that I can push up that does a few more fixes and might be okay to merge. It has fallen behind though since I added more components and did bugfixes since then.\nI also have another branch were I was working on using that react to typescript generator that I can push up. I really don't know which is better. (Probably first branch... I'm doing some amazing regex replaces in the other branch to get more accurate typing).\nI can push both of these up right now if that helps.. Hmm... That is weird. What version of node are you using? It shouldn't really matter though.\nBut just a side note about that branch.. I haven't finished it yet, so it isn't actually writing the definitions out to files. Defining each component as a module through me off a bit and I was going for the bit more accurate definitions in this one.. Ok, cool. I think for 1.1.0, I'll stick with the feature/Typescript-Support branch -- the automation will come later. My goal is to release my react-md@next tag by Wednesday for a 1.1.0 preview with typescript support. I'll merge in the couple of fixes I see on your branch.\nUntil it is out, I'll also try to publish the documentation site at https://react-md.mlaursen.com/next or something.. Ahh, just a side note... Once I merge it in, most of the work is going to be back in the release/1.1.0 branch instead of the feature/Typescript-Support. I ended up adding more features/components since I started the typescript branch, and it'll be easier to maintain in that branch. If anyone is looking at the progress of this issue... the typescript support is in a beta state and available under the react-md@next tag. It also includes some of the changes for v1.1.0\nUntil v1.1.0 has been released, there is a temporary and incomplete documentation site available at\nhttp://react-md.next.mlaursen.com that should hopefully be of some use.. Ahh ok. It looks like I goofed. I need to copy the definitions into the lib folder as well.\nI wasn't sure how to do that with typescript definitions. It should be giving you a prop type validation error though.. Thanks, I'm glad you think so!\nI just released react-md@1.1.0-alpha-4 which should address most of the type issues. If any other types are invalid, feel free to join in on the typescript channel in Slack. Oh yeah. It looks like I ran out of free heroku hours for this month. So you can wait for tomorrow, or I can send you an invite manually if you'd like (you can send an email to my gmail and use that for your account).\nI'll try to see what's up with the MobileDrawerTypesType. I'm still unsure of everything that should be exported from these modules. My very simple typescript definitions tests passed, so might be better to figure  out additional ways to test.. It looks like initial support is mostly here. I'll just need to learn typescript a bit more to figure out how to correctly export component enums for usage. I'd definitely welcome any PRs to fix or show how to do that. . Thanks a bunch! I'll be doing a patch today with the the fixes you and some people in Slack have suggested.. It might be a bit easier to have some sorta of <ReactMDContainer> that you can wrap your app in that can define some global configuration changes -- font icon library, which components can use ink, etc. Gets a bit complicated though. It would be a lot nicer to have:\n<ReactMDContainer inkDisabled>\n  <App />\n</ReactMDContainer>\ninstead of\n<App>\n  <TabsContainer>\n    <Tabs>\n     <Tab inkDisabled>...</Tab>\n     ...\n  </TabsContainer>\n  ...\n  <List>\n    <ListItem primaryText=\"A\" inkDisabled />\n    ...\n  </List>\n</App>. Meh. So for 1.1.0, ink will be disable-able via props or context. The interactions will also be disable-able via props or context. Props will take priority over context.\nExample:\n```\nexport default class App {\n  static childContextTypes = {\n    inkDisabled: PropTypes.bool,\n    inkDisabledInteractions: PropTypes.arrayOf(PropTypes.one(['keyboard', 'mouse', 'touch'])),\n  };\ngetChildContext() {\n    // No components use ink\n    return { inkDisabled: true };\n    // or disable only click\n    // return { inkDisabledInteractions: ['mouse'] }\n  }\n  ...\n}\n```\nSo the components that will need the inkDisabled and disabledInteractions exposed are Autocomplete, SelectField, Slider, BottomNavigation, and Tab.\nFor convenience, the List, TabsContainer, and Tabs will also expose those two props but convert it into context so it doesn't need to be passed to each component manually.\nExample:\n```\n// No ink in list items\n\n\n\n\n// only disable mouse inks for the Tab.\n\n\n\n\n\n\n\n``. I ended up going with only providing a way to disable ink with context instead of every single component that could possibly use ink. It would be too much work and testing to make sure everything works if I exposed all those props. The main use case of disabling ink is on an application level anyways.. This is really because I am using WebFontLoader to load the material-icons and Roboto fonts instead of just putting the CDN link in the`, so links are only added after initial page load. Also since my styles are split by webpack, some page's CSS is dynamically loaded after the initial render.\nI am currently working on updating my documentation server to fix these errors to optimize the CSS delivery. I came from a JEE environment, so SSR is still a bit hazy for me.. Ok, it has been fixed and the website was updated.\nIt wasn't actually the full issue I had described above. It was really that I misunderstood how the ExtractTextWebpackPlugin worked for styles on dynamic requires. I updated it to allChunks: true which solved the problem and moved the font links to the <head>. Thanks, I've updated the website with these changes.. A different solution for the TimePicker could be a single SelectField with all the available times. The user could define an interval (default: 15) for the times and disable certain times. If there is no default value, the value with the closest time to the current time would be focused by default when opened.\n\nI kind of like this a bit more since it would require less work for me.\n. I don't like this idea anymore.. That is because I wanted the switch to be toggle-able by both clicking on its track and having keyboard accessibility to press the enter key when focusing the button. However, I forgot about event propagation if you touch or click the button itself.\nI have a fix that I can push up later this weekend.. I added some more tests to verify the changes. Should be good for the v1.0.1 release when it is finished.. @daturon  would you mind merging this into release/1.0.x instead of master? Otherwise, looks good! \nI'll look into adding github templates to help remind in the future. . I think the host-material-icons mixin is what you are looking for? Lemme know if I misunderstood . I am unfamiliar with the :global selector, is that when using CSS Modules? But I think this is actually a problem with the react-md-grids mixin.. I consider this a problem with the postcss-modules-local-by-default/css-modules instead of a problem with react-md. There is a good discussion/fix here.. Fantastic, thanks! . Oof. Thanks. I forgot to add // to my link :). Should be correct and up on the documentation website now.. Sorry, would you mind merging this into release/1.0.x instead of master? I haven't had time to update the github templates to show that yet.\nYou can also fix the scss-lint errors by removing the unneeded whitespace and adding\n// scss-lint:disable NestingDepth\n&.md-cell--right {\nI consider this nesting depth valid. Looks good, thanks!. Yeah, I didn't plan out what the active interactions should be when tab-navigating times well since the material design docs really have little information on Date and Time pickers. So at this point, tabbing actually selects the next time. This was a stupid choice in hindsight. I guess at this point I could make the time picker interactions be:\n- Currently selected time: as is (the Clock hand pointing to the time and the primary color circle surrounding the active time)\n- Currently focused time: primary color and increased font size (similar to the Year picker)\n- Enter now selects time instead of tab\nEven though the date picker can be navigated fully with the keyboard, I wouldn't say it is a good UX or the right solution for keyboard primary navigation. I think #180 is the end fix here.. Ooh. That might be a problem with my AccessibleFakeButton which is used for the ListItem and SelectField. I might just need to prevent default behavior when I simulate the button enter or space interaction so it isn't submitted as well.. > Probably worth mentioning if it's related: selecting the text in an Autocomplete and pressing Delete has no affect.\nCould you expand on that? From my tests, I have been able to remove text for the Autocomplete's text field by pressing delete or backspace.. It seems to be working for me? \n\n. Ok, so I can update the Autocomplete so that it only submits a form when pressing enter on the text field. However, it looks like pressing enter on the SelectField will not be able to submit the form because it opens the menu on enter.\nI am not sure if I should update the SelectField to only be opened on click/touch or the up/down keys. I kind of like the enter to open it.. but might be best to emulate the real html select.. Going to close this for now. When I decide what to do about the SelectField, I will reference this issue in the newly created issue.. The extra padding actually comes from the fact that when it is a plain data table, it assumes it will just be text. I might need to fix that. Basically all .md-table-column--data get these styles applied. Eliminating the padding on your checkbox columns should fix the sizing issue.\nI guess what I should do is add a new prop selectable || injectCheckboxes? (or some better name) that is true by default for legacy support. The checkboxes would only be added to tables if the table is: !plain && selectable. Depending on how I see this, it might have to be delayed until v1.1.0 if following SemVer. I could either see it as a new feature which requires a MINOR bump, or a bugfix which could be a PATCH bump. Not sure yet. I would prefer to put it in the v1.0.1 patch if possible since 1.1.0 is going to be a bit down the road.\nSoo, your vote: Feature or bugfix? :). ## Feature Request Information:\nCurrently, the only way to create a table without the insertion of a checkbox is to pass the plain prop. However, a plain table is really used for not enforcing the height limits and the white-space: nowrap enforced in a data table. This ruins the styling of any selection controls, edit dialog columns, and select field columns that appears in the plain table.\nSuggested Solution\nThe DataTable component should be updated to have a new prop: selectableRows that defaults to true. When rendering a row, the TableRow component will only inject the checkbox when !this.context.plain && this.context.selectableRows.\nThis will allow for the data table's styles to still be in effect.\nSuggested Solution - Alt\nSince there is a .md-table-column--plain class name created, it might be better to remove the the styles that force the .md-table-column--data to look like a plain column when in a .md-data-table--plain. Referenced Code. The TableColumn could then have a plain prop and context that would automatically apply the plain class name. The props would have a higher precedent over context -- if props.plain is defined, use whatever value over context.plain.\ncn({ 'md-table-column--plain': getField(this.props, this.context, 'plain') });\nThis would allow all columns to automatically be set to plain when in a plain table, and allow the developer to disable the plain styles on specific columns.\nOr maybe both of these solutions should be included. :man_shrugging: . Thank you, glad you like it!\nNice site! I'll get started on making the Showcases page and have this on there with the release of 1.0.12. Sure thing! I just triggered a build with the change, so it should be live within 10 minutes or so.. @phlare Thanks! I'll tag you in a PR this weekend to add this to the showcases.. I had looked into implementing a fixed header/footer for DataTables. Last time I checked, it makes the EditDialogColumn, SelectFieldColumn, and TablePagination components (well, anything that relies on position: absolute) unreliably positioned and messes up the row hover color.\nI do think this is a feature that should be implemented at some point; or at least allow styles to easily be applied to existing solutions.. Thank you. I'll use this as a reference when I start working on this feature. Might be a bit though :). Is there a reason you can't do:\nrender() {\n  const icon = <FontIcon iconClassName={null}><svg ..... /></FontIcon>;\n  return <Avatar icon={icon} />;\n}\nor\nrender() {\n  return <Avatar src={svgPath} alt=\"Alt describing icon\" />;\n}\n?\nI do think that it is still ok to update the PropTypes to allow more than just string for the children prop.. Fortunately, the title will still correctly wrap. I had forgotten that the subtitle uses the h3 tag which should not wrap lines according to the typography specs. Is it better to allow line wrapping for the subtitle or to have any text overflow as ellipsis?. I think I will go with this:\nNo Avatar - title and subtitle can line-wrap\nWith Avatar title and subtitle can not line-wrap and overflow is ellipsis-ed\nI'm personally not a fan of the line-wrap prevention most of the time. Keep having to override it :/. Sorry, I'm on vacation until Jan 1st. I'll check this pull request when I get back!. I think this is a good first step! I am going to mess with it a bit more to see if I can work around the position: relative bugs and see if I can get more static toolbars(it bothers me a little that the vertical scrollbar scrolls with the table. It would be fantastic if it would stay fixed, but might not be possible).\nI'll keep this PR open for a while and make some comments for ideas -- I also need to create the release/1.1.x branch for this to eventually be merged into.. @frol No worries! The comments were also reminders to myself. I'm trying to finish up v1.0.1 in the next few days and will begin work on v1.1.0.  I'll be using the work here to finish up the feature request; I'm still thinking about verbiage/props to enable this or if this should be the default case. I played around with this today and found a different solution. I'll list it here so I can compare to the CSS only solution.\n\n\nCreate a fixed header wrapper.\n    scss\n    .md-data-table--fixed-header` {\n      @if $md-data-table-fixed-header-height { // enforce ALL fixed tables to have the one height\n        height: $md-data-table-fixed-header-height;\n      }\n      overflow-y: auto;\n    }\n\n\nAdd a fixed header row style\n    scss\n    .md-table-row--fixed {\n      position: absolute;\n      z-index: 1;\n    }\n\n\nWhen the TableHeader is created, create a duplicate of the header row to be used as a shadow. The duplicate row is used to keep the spacing of columns and the height. If there is a checkbox in this column, it will need to be disabled for keyboard users.\n\n\nUpdate the original row to now use the fixed styles and directly set the column width for each th (for correct positioning), set the row's width to the md-data-table--fixed-header's width, and either add md-background or md-background--card depending on if the table is in a card. (this allows for the tbody to pass under correctly)\n\n\nModify both the SelectFieldColumn and EditDialogColumn to correctly calculate the top value in their table keeping scrollY in mind. (Currently there is no work done to calculate top, all handled by browser)\n    > This will need to be done in either solution\n\n\nIf I go this route, all the other components will work correctly except for any tooltips that appear in the fixed header.\nPros\n\nless markup for additional divs\nless styling required\nscrollbar sticks with table correctly\n\nCons\n\nwill need to recalculate the column's widths manually each time the window resizes or the table's container resizes\ntooltips still don't work correctly\ndoesn't work with horizontal scrolling yet because fixed header expands past container (might work to manually update scroll for this)\n\n\n. Ahh sorry, I didn't show it in this gif, but it works when there is horizontal scroll. I just messed up my header's mask so the headers aren't sized correctly and don't scroll.\n\nThis was mostly me seeing if I could reuse the idea from the TablePagination for the header (create a mask and add some positioning). It doesn't have the ability to scroll horizontally yet either. If the solution you proposed works better, I am going to update the TablePagination to follow suit.\nI haven't started the heavy testing of either one yet to see what works better; mine is still POC and not actually coded anywhere.. Sorry this is taking awhile... I'm leaning towards doing the CSS approach you have stated here. It looks like the other solutions aren't as accessible:\n- create multiple tables. one for header, one for body, one for footer\n- add transform: translate3d ( ... positions ) to the columns in the header/footer that are fixed. (I do like this one pretty much, but it doesn't look as pretty since the style updates might take 100ms to repaint)\n- give up on tables and position with divs with aria- attributes and roles\nBut I need to finish #145 before this can be done because that will eliminate all of the overflow/positioning issues that occur with the select fields, edit dialogs, ... everything.. @frol closing this in favor of #318. Thanks for the initial pull request. I brought most of what you provided here into that pull request.. I haven't worked with redux-form yet, so I am not too sure what it does. Does the re-render cause a blur event to be triggered or completely remount the TextField? That is the only way looking through the TextField code that the active and floating state are set to false is with the blur.\nWhen I finish some of the other tickets, I can try doing a react-form demo and debug with the TextField source to figure out what is happening.. I actually had some time today, but I am unable to reproduce at the moment. Here is the gist I created to test it. It might be that it is just too simple. Would you happen to have any code examples I could use?\n\"react\": \"^15.4.1\",\n    \"react-addons-css-transition-group\": \"^15.4.1\",\n    \"react-addons-transition-group\": \"^15.4.1\",\n    \"react-dom\": \"^15.4.1\",\n    \"react-redux\": \"^5.0.1\",\n    \"react-router\": \"^3.0.0\",\n    \"react-router-redux\": \"^4.0.6\",\n    \"redux\": \"^3.6.0\",\n    \"redux-form\": \"^6.4.3\",\n    \"redux-thunk\": \"^2.1.0\",\n\n. Yeah, I think I will add a swipeableViewsProps prop to the component so that you can add any other props from the SwipeableViews API. . This was fixed after my documentation server rewrite.  Publishing later today.. I have no way of natively testing this.. But I am guessing it is because the iOS does not focus a text field if you click the label? I'll mark this as Help Wanted.. The documentation website has been updated with the new changes. It should be working now for iOS since I no longer rely on the focus event to toggle the search. Please let me know if it still does not work.. This was a bug on my end. I forgot about the autoclose prop. They do the same thing. I'll deprecate closeOnNavItemClick.. This should already be implemented since all remaining props are passed to the input/textarea tags.\nYou just need to make sure to camel case the attributes when working with React:\njs\n<TextField\n  id=\"attributeTest\"\n  label=\"Additional Attributes\"\n  autoComplete=\"off\"\n  autoCorrect=\"off\"\n  autoCapitalize=\"off\"\n  spellCheck=\"off\"\n/>. No worries!. Hmmm. Ok. So it looks like this happens here.\nThis can be undone multiple ways:\n- setting both $md-toolbar-include-text-fields and $md-toolbar-include-autocompletes to false before @include react-md-everything. However, you might need to add these styles back.\n- setting singleColor to false on your toolbar (This would require you to specifically set the color of the .md-btn--icon and md-title--toolbar to $md-white-base)\n- creating a new style\n    .md-toolbar--text-white .md-text-field.md-text-field {\n      color: get-color('text', true);\n    }. Sounds like a good idea to me. I wish I had named the current component prop as tileComponent since that is really what it is... I think I will go with a listComponent prop that defaults to 'li' so it can be rendered as any html element or React component.. Hmm. Should null be a valid value? I think it would just like typeof item[itemValueKey] !== 'undefined' ? item[itemValueKey] : item[itemLabelKey]. I think null, 0, or the empty string '' should be valid values to reset a select field (unselected state). You are more than welcome to submit a PR to my release/1.0.x branch, or I will do one later today. Thanks :). You're right that null shouldn't really be a valid value. But is '' really invalid? <option value=\"\"></option> technically works, not sure if you should do that though. And yeah, 0 shouldn't reset the field, it is a valid value.\nI was actually planning on releasing 1.0.1 today, I'm writing up a change log at the moment and figuring out if I missed any small bugs that could be added to this patch.. Looks good. Thanks!. Yeah, this should be added. Has a lot of touch points.. I personally prefer the pluralization instead of singularity. It makes logical groupings of related components and future-proofs components down the road if more related components are added to the spec. I also like the consistency; when you import from a pluralization, you have access to all the components:\nimport { Tabs, TabsContainer, Tab } from 'react-md/lib/Tabs';\nbut if you specifically choose a singular, you only have access to a single component.\nimport Tab from 'react-md/lib/Tabs/Tab';\nI know it is a lot of typing for import x from 'react-md/lib/Xs', but this is completely optional and only required if you aren't using every component in your app.\nimport { Button, Tabs, TabsContainer, Tab } from 'react-md';\nis completely valid (which probably is what you should do if you want to use the CDN for prod).\nThe only reason you need to specify import Button from 'react-md/lib/Buttons/Button'; at this time is for the few people that were using this before my major rehaul and 1.0.0 release. import Button from 'react-md/lib/Buttons'; does the same thing, but it still bundles the deprecated IconButton, FlatButton, RaisedButton, and FloatingButton components. In the next major release, those components will be removed so you no longer need to only import 'react-md/lib/Buttons/Button';\nThis could all be moot too if you use webpack2's tree shaking and #205 gets completed.\nI do think it might be good to rename the Tabs component to TabsBar or something else. It isn't really a self-describing name at the moment.. Something I was attempting for this project was naming consistency and the pluralization felt better to me. If the overall consensus is for singularity, I would be happy to move over to that.\nThe other touch points would be the fine name for every component's styles to be singular as well as update and deprecate every variable, function, and mixin for components to be be singular.. There isn't one at the moment. My main concern is making it look good with large digit numbers and figuring out what the largest digit number should be supported. I think 2 digits might be reasonable. If it is more than that, I might truncate to display 99+.\nJust curious, does the bubble surrounding the number always have to be a circle, or does it stretch into an oval?. I haven't started working on it yet, I've only done some in-browser hacking for this with an Icon Button. I'm currently working on finishing up the fixed table headers/footers, so feel free to make a PR for this :). Yea, right now the forceIconSize (Button) and forceSize (FontIcon) are really used for setting the width and height of icons because other font icon libraries like FontAwesome and some weather icons do not have consistent square shapes.\nI guess I could update the forceSize to also update the fontSize so the resulting styles are { width: size, height: size, fontSize: size }, but I haven't checked the results of other font icon libraries yet.\nI'll think about this a bit more, but I think it is reasonable to either update the font size via the style prop: style={{ fontSize: 16 }} (FontIcon) or with your custom className (Button) like you are doing. . This is a bug -- related to #172 \nInk is triggered on the focus event instead of onKeyUp so that it can be triggered without direct access to an inked component. This is mainly used the the SelectField, Autocomplete, and Dialog components so that the UP/DOWN arrow keys trigger the ink correctly in the appearing list, and when a dialog closes, the element that triggered the dialog gets focus again (and displays the ink).\nI  do need a better solution for this though.. I'm actually using box-sizing: border-box instead of content-box. The main reason for calc in the grid is because of the material design spec for margins between cells. I don't really know a better way to get correct width sizing without doing calc for that. When using .md-grid--no-spacing, calc is not involved. I would be happy to hear other solutions for the margins.. It is included with the react-md-typography mixin (which is probably a bad place to put it), so if you aren't including that, it would not appear. It appears to be in the CDN dist as well.. Can you link to a code snippet or gist to show where it is failing?. Sure, that seems reasonable.. It seems to work. Not sure what happened.. Thanks!. Yeah, this should be fixed in the library. I'll think about how I want to fix it. It is really a problem with using the Portal component for dialogs -- I should either update the Pickers to pass the renderNode and lastChild props correctly to the dialog, or update the z-index for .md-dialog.md-dialog--picker to be higher, or update the Portal component to optionally NOT render as a subtree (eventual feature that should be added).. As a side note.. Thanks for following the template I added a a few days ago! It is actually a lot more helpful than I thought it would be in figuring out bugs. Wish I had added it earlier.. For right now, the lastChild and renderNode prop additions will suffice until the Portal updates.. I don't feel like the current patch is good enough before 1.1.0, so I am going to implement an automatic way to have it work without requiring lastChild and renderNode.. With the latest fix, you will no longer have to do any work yourself. If any component that uses the Portal component appears within the children of the Dialog, it will automatically render as a child in the dialog instead of rendering in the document.body by default.\njs\n<Dialog id=\"full-page\" visible={fullPageVisible} onHide={this.hideFullPage}>\n  <DatePicker id=\"birthdate\" />\n  <TimePicker id=\"appointment-time\" />\n  <Drawer id=\"nested-drawer\" { ... } />\n  <Snackbar { ... } />\n  <Dialog { ... } />\n</Dialog>\nThe date picker, time picker, snackbar, drawer, and dialog should now be rendered inside of the full page dialog.. The first fix for this was using context to set the render node, but when you use PureComponent, it doesn't pass it to the sub-portal. I think I'll have to modify it so that the portal itself will check if it is in position: fixed and set the renderNode related to that.. This is a good feature, I am going to play around with it a bit as well :). Welp. It might be time to research how to do #145 since this is really a problem with Menus. If that gets completed, the struggles for #197 might also be eliminated.\nThe way I fixed this issue with data tables is by wrapping the dialog or select field components with another div that absolutely positioned itself so it would correctly ignore the overflow-y: auto styles.. Thanks, I'm glad you are liking it so far! Here are my thoughts about the suggestions:\nSelectField\nI personally do not like passing things as children that should not be directly rendered in the component. What I normally consider valid are string, number, element, or arrayOf those types. What is the reason you'd prefer the menuItems as children?\nAll Inputs\nI actually haven't done much work with stateless components, but I do agree, it would be much nicer to be able to say this.refs.select.value. So the components that would need to be updated are:\n- Autocomplete\n- SelectionControl (SelectionControlGroup)?\n  - these should probably also expose the checked value.\n- SelectField\n- TextField\nSvgIcon\nI have been thinking about doing SvgIcons for awhile, but I haven't worked with them too much so I don't know their full behavior. I am normally not a fan of doing InlineSvgs since they are not cacheable or reusable. I think the <use x:path> (can't remember fully what it is) might be the solution to that. However, I believe you can no longer style the SVG that way? I'd be happy for suggestions here.\nButton\nYeah, I understand the concerns here. I set it up this way because I considered the main use case of the button is some label string to be applied. The icons were the biggest thing because I don't know how many users use different font icon libraries. And since it is still possible to render SVGs in the FontIcon component, I thought it would be better to have all that in the children instead of an iconChildren prop.\nIt does seem a lot more semantic to say <Button primary raised>My Button</Button> instead of <Button primary raised label=\"My Button\" /> since it is closer to the native <button> usage. The migration for this might be a bit tricky.. ### Button\nI am thinking that the label will be replaced as children and the current children will be replaced as iconChildren. My reasoning is that I still think there should be a nice way to use the IconSeparator that exists in the Button when there is both a label and an icon; but it is still optional. This would allow:\n```js\nClose Me!\n// and\nClose Me! close\n// Could still use the IconSeparator manually here as well if you want.\n```\nI think I have a decent idea for handling migration on this now, the main problem is the support of text buttons and the icon/floating buttons since they are all the same component.\nSelectField / inputs\n\nAs you can probably tell most of my suggestions are related to making the components act how a normal html element or React element would work.\n\nYeah, I think that is a good idea. If the menuItems were a list of option or ListItem, I think passing them as children would be the way to go. I think I should probably update the select field to allow the children as a list of option and convert those into the ListItem component. Does seem a bit roundabout though.. Everything except for the SelectField changes should now be in 1.1.0 so going to close this for now. The proposed SelectField changes have been added to the #493 to be added at a later time.. Definitely a bugfix, thanks!. Just to remind myself when I fix this.. This is a bug because of the simple implementation of SSR for the Portal component. When a Portal is visible from the server, it automatically renders it inline, but when it makes it to the client, it isn't expecting it to be rendered inline and creates a new portal of the child. Either need to update the portal to have some way to detect if it was initially visible from the server and render inline again, or add a way to make the portal optional. It is seeming more and more worthless as a SSR component. Can't remember why I implemented it.... Actually, I think this is a bit more of a problem with not setting the defaultMedia correctly on the NavigationDrawer. Is there any way to do something like this with next.js? When the defaultMedia is set correctly from SSR, that message doesn't appear.. Darn, ok. I'll look into it deeper then. I am still thinking I should make the Portal optional. Might solve a few problems :). This has been fixed with #230 . Sadly, not yet. It might be a week before it is in a more stable state for a \"beta\". I believe there is currently an alpha out that has this fix in it, but upgrading to alpha might be a bad idea :)\nI'm about 2-3 days away from finishing #145 which will be one of the last more \"app-changer\" tickets since it modified menus and components that used menus so much. I'll do some more issue pruning/thoughts and figure out if anything might be terrible for migrating and publish a beta then. The SVGIcon (#253) and Fixed Table Header/Footer (#197)  might be considered an app changer which might delay the beta. Otherwise, it seems like the other issues are more behind-the-scenes/no-changes-required/new-features sort of things.. Hopefully these are related and fixed with a good solution:\n- #232\n- #197 \n- #157 (super hopeful :D). This should now be fixed with the MagicTooltip component in @react-md/tooltip@2.0.0-alpha-1. I'll close this once it is released . I forgot to reference this ticket in the commit: 9ffe441. Oh awesome! I think it was related to 53130fa. Thanks, I was able to figure it out! Just to make sure I am testing the right use case... This is what we are expecting:\n\nThe value of the DatePicker changes from an external source (Redux, Mobx, ... state management)\nThe calendar's selected date should reflect those changes\n\nI don't think it should be hooked up to the defaultValue prop (personally) since that should just be the default for initial setup. It should be a controlled component if it will keep changing.. Just to make sure, you would like something like this:\n?\n. Ahh ok. So anything that isn't listed in the react-md/lib namespace is stuff that is stuff that I created only for the documentation site. If you would like to see the code for files that are not fully listed in the examples, you can search here. I tried to keep the examples more related to used components and hiding some of the boilerplate/custom stuff.. I had been looking into react-virtualized, but the main problems I have with it is that their table is not actually a <table>, it is a grid of <div> and because of this, there is basically 0 accessibility at this time (might be able to manually do it with aria- attributes, but feels like a lot more effort). It also relies on very specific height and width which I am not a giant fan of, but it completely makes sense. I could try looking into their docs a bit more to see if I could manipulate it to be a real table, but it is more on the back-burner for now.. Yeah, I would personally prefer the usage of an svg sprite map over inline solution. I'll make sure both ways are implemented.. See also #250 \nFeel free to continue posting in this one or the other issue. I'll keep both open until support has been directly added into react-md. \n. Would you mind merging this into release/1.1.x instead of master? You might end up having some merge conflicts.\n\nHow to lint project sass files?\n\nRight now it can only be done with the Ruby Sass and scss_lint. I didn't feel like learning the js versions of Sass linting tools and I didn't like the default rules :/\n```bash\nI believe it was\n$ gem install sass scss_lint\n```\n\nAre there any plans to use Enzyme for tests?\n\nYeah. I'd really like to add it and some snapshot testing some point. A lot of my tests are pretty old and haven't been updated along with the never versions of Jest/ReactTestUtils. I'd need to learn up a bit more on Enzyme before I could add it myself.\nAbout the tests.. are you using npm to install the dependencies or yarn? It might be a version difference. I'll check into it!\nA somewhat related ticket down the road.. #254 . > Do you plan migrating to Node-based linter?\nI do at some point, it isn't a very high priority to me right now though. It is mostly because the last time I checked into Node-based Sass inters, there wasn't any way to manually disable rules in files like I could with scss-lint.. Closed in favor of #261 . When there is only a single child, it assumes that the child is the List component, and does some additional prop injections. I went with this assumption because I didn't think a single item list was very helpful. I needed this for some behind-the-scenes work for components that use the Menu. I could expose a new prop menuProps or something else at some point so this isn't needed, but I think right now you should either manually wrap your single ListItem with a List, or in an array.. I'll make sure to get this ether documented better or update my internal usage. Looks good, thanks!. Since the menuItems get mapped into ListItem, you can define your menu item shape to include ListItem props.\nconst menuItems = [{\n  label: 'Item With a Picture',\n  value: 'item-1',\n  leftAvatar: <Avatar src={image1} alt=\"A description of image 1\" />,\n}];\nif the ListItem component doesn't suit all your needs, you can also go with the custom component implementation of the ListItem\nmenuItems = [{\n  label: 'Item with a Picture,\n  value: 'item-1',\n  component: ListItemPicture,\n  ... any ListItemPicture related props ...\n}];\nAs long as your custom component doesn't share the same props as ListItem, it should work.. Ahh sorry. Anything that is not documented on the website is actually not something that should be used. Components/utils not in the react-md namespace are only included for the documentation website as well. But you can see the code here:\n- randomAvatars.js\n- RandomAvatar.jsx. No worries, it is the bane of us all :)\nIf there are any existing issues that you feel like you could fix, feel free to pick them up. Otherwise, let me know if documentation or anything is lacking!. Thanks for the rundown! I have a general idea about what is going on now.. Yeah, thanks for your time! I'll hopefully release the next tag and documentation website update by end of day tomorrow. I haven't started writing the migration guide, so it might not be a plug-in-and-go type of thing. Going to keep validating things before the full release.. This might work. I might need to update the documentation a bit and hopefully give some better migration warnings. The current ListItem looks like this.\nIt might be that a new prop itemProps is added instead. One of the main reasons for passing all the remaining props to the AccessibleFakeInkedButton is so that the following is possible:\n```\nimport { Link } from 'react-router';\n...\n\n```\nAnother possibility is to just extract any of the event listeners and apply them to the ItemComponent instead of the AccessibleFakeButton. I think it'll just take some testing.. Ahh, one thing I would like to mention is that I would like to go with a more functional approach here with composition instead of inheritance. I would like these to be higher order components. Facebook did a good write up about the reasoning for HOC here.. The first fix of this issue would be to expose props correctly to the surrounding li component like you first mentioned in this ticket. It is really a problem with my library that needs to be addressed before the draggable enhancement can be done. I'm going to close this one in favor of #439. Yeah, so the reasoning behind the setting of the tab content height is because of how the SwipeableViews was implemented. Without the setting of the height, the scrollbar will always be set to the max height of any of the content so there can be some content that has a lot of extra white-space on the bottom.\nBehind the scenes, you get something like this: (NOTE: terrible artwork incoming!)\n\nSo in this case, the scrollbar would always be the height of Content 1.  Right now, I do not know of a better way to listen to content changes to re-update the height. It can only be done manually at this point by doing tabsRef.forceUpdate() once new data has come :/\nI would be happy to hear suggestions on alternatives, or make it so it is possible to disable the height setting if you are ok with the scrolling issue I described.\n. Sorry, I haven't had time to think about this one yet with all the other things I need to complete for 1.1.0. I had been thinking about going with the ResizeObserver/polyfill approach once I start this ticket though. It sounds like the best solution.. In this case, you would want to update your code to be this:\njs\n<TableHeader>\n  <TableRow autoAdjust={false}>\n    <TableColumn>File Name</TableColumn>\n    <TableColumn>File Type</TableColumn>\n    <TableColumn>Last Modified</TableColumn>\n  </TableRow>\n</TableColumn>\nThe autoAdjust is defaulted to true. But in the next version of react-md, this auto adjust functionality will be removed. See #252 . This should be fixed now in 1.1.0. Going to close this in favor of #274 . Awesome. Thanks!. Thanks! I think I will also bring this commit back into the 1.0.x branch and release it in 1.0.7 -- I am still a month or two away from the 1.1.0 release and there were a couple of other bugs I found that I need to be fixed immediately.. I haven't actually been able to reproduce this.. So I am going to close until now. Yeah, the same thing can be accomplished by providing floating to your text field; it will make the label float. However, this might be something that should be handled by my component.\nI have a couple of questions about the current flow:\n- When you set the value to undefined, are you setting it by the value prop or something else?\n- Have you tried setting the value to the empty string or 0 instead of undefined? (I think that might work out of the box). Ok, cool! I think I'll be implementing better text field number support in an upcoming release after the feedback I've gotten. The native input type=\"number\" is pretty terrible, so it'll be good to update my component to fix some of those issues.. Thank you. This is one of the problems when trying to manually keep 2 files in sync :/. Just a reminder to when someone (or me) picks this up.. The main problem with a custom formatted is needing the ability to extract the year, weekday, and date from the time. See DatePickerHeader and CalendarHeader.. Oof. Ok, I see what I did wrong.. \nTo make my life a little bit easier, I am going to make the assumption that if visible or defaultVisible is true on initial mount for the NavigationDrawer or Drawer, you have done some calculations yourself to make sure you really do want it visible until a resize event. It will still do any media type changes, just keep the visibility as-is until resize.. Sure thing! My initial logic fix was so bad that I thought I should get it out before Monday where more people might upgrade. I think I will provide two props:\n\ndisabledRows which will be a list of indexes for rows that should be disabled\ndisableAllRows which will be a boolean if all the rows should have the checkbox disabled\n. It might be helpful to also expose disableSelection || disableRow || disableCheckbox? (names hard) on the TableRow itself as well.. Yeah, this can be fixed temporarily by also providing tabletType={Drawer.DrawerTypes.TEMPORARY} desktopType={Drawer.DrawerTypes.TEMPORARY}.\n\nThis bug is coming from the fact that the type prop is really to make it up to the programmer instead of my drawer figure out which of the 7 types to use. So it defaults to visible because the current media drawer type of the drawer matches to full-height (which means the drawer should be open).\nI can fix this bug by providing an extra prop constantType which defaults to true. If the type prop is defined and one of the temporary types and the constantType prop is true, I will use the type prop for determining the current media's drawer type instead of the mobileType, tabletType, and drawerType.. It looks like I did not correctly pass that on to the Drawer from the NavigationDrawer. I will add that. Hmm, actually it looks like I didn't document it on the NavigationDrawer.\nYou should be able to do this:\n```\nconst { TEMPORARY } = NavigationDrawer.DrawerTypes;\n\n```. I think this is a good idea. One of the changes of the next release is to allow constant sizes between all media devices instead of changing size (some components change size based on media), so this would be a good addition as well.. Yeah, I understand slightly why the material design guidelines change sizes based on device size, but now that I have been using it more... it is actually pretty annoying.\nRight now, the components that change based on media are Button (kind of, they have invisible size changes for easier touch accessibility), ListItem, TextField, and Toolbar.\nI'm glad that you have been enjoying it! :). This one will actually take awhile to fix since I hadn't thought about dynamic rows when making this (huge mistake). I am going to push it back to either 1.0.10 or 1.1.0 since I need to get the drawer fixes out. . Just a note to myself when I start this ticket.. This should probably update the list of selected state from the componentWillMount and componentWillUnmount on the TableCheckbox component which would solve most of the problems here instead of manually initializing it by counting the number of rows in the table. Not sure why I did it that way in the first place... Great! Glad to hear.. The fixes for #299 also fixed the bug for this issue.. This might be related to #291 . I'll check it out. It was only sort of related. I needed to update the Drawer to do an initial fix for temporary types on desktop screens to make sure the overlay is invisible.. This actually was a problem with the SelectField component itself. When the menuItems are declared in the render, the === check in componentWillReceiveProps fails and it attempts to find the label again. However, I forgot to do the check for controlled vs uncontrolled SelectFields so it chose the wrong current value.. Hmm. You are correct. I actually tested this use case locally as well before closing it. I'll reopen to see what's wrong. . Looks like I only got half of the fix correct. I should have done the change in componentWillUpdate instead of componentWillReceiveProps since componentWillReceiveProps comes before the initial activeLabel state update.. It looks like I got it working correctly this time (in the pen as well). The only change required in the pen is to change the defaultValue from type to one of the menuItems and it displays correctly.. Thanks for the heads up!. Closing in favor of #325 . Yeah, sorry about that. For most of my examples I am making the assumption you are not a beginner. I think #290 might help with that in the future though..\nSo a believe the most basic rendering of the NavigationDrawer can be done like so:\n```\nimport React, { Component } from 'react';\nimport NavigationDrawer from 'react-md/lib/NavigationDrawers';\nexport default class App extends Component {\n  render() {\n    return ;\n  }\n}\n```\nYou could try messing around with this codepen as well. I have it set up with a very simple NavigationDrawer.. Since the format is based on the browser locale, can you show what window.navigator.userLanguage || window.navigator.language is for both browsers?. Alrighty, I'll try to incorporate that as well.. Thanks! My next release should be removing that waitForInkTransition thing. It was something I thought flowed nicer, but that delay is killer from a UX perspective. It should hopefully be resolved by then.. Cool. Looks like this was fixed in #210 after testing this case again. . It looks like this is because the fieldset actually disables all input in it if you provide disabled to it. I updated this so that if the SelectionControlGroup gets the disabled prop, it also disables any controls inside to get the disabled styles.. Thanks. It looked like it was a bug about always creating a \"swap\" timer incorrectly. This sounds interesting. So this would basically allow you to define your own input or textarea for the TextField to get the desired behavior?. Could you provide a snippet/gist/codepen for this? I tried it out here and it seems to work correctly.. This actually appears to be a problem with the html input as well. Once the type is changed to number on focus, it immediately triggers the blur event which causes it to go back to text and prevents the input from being intractable. Quite odd.. I have a general idea about what is causing this, but I am going to think a little bit about if this should go into v1.0.12 or wait until 1.1.0 (just so I can actually finish that release...). Would you mind merging this to release/1.0.x?. Oh, looks like I can do it too. Thanks for the fix!. I think this looks good. Thanks!. This might actually be fixable by updating the full page dialog to have styles:\nscss\nbottom: 0;\nleft: 0;\nright: 0;\nleft: 0;\ninstead of having\nscss\nheight: 100vh;\nwidth: 100vw;. This apparently also happens for any temporary \"material\" that spans the entire viewport. (So right drawer on mobile devices). This might also just be the fact that vh isn't calculated as thought.\nMaybe use viewport-units-buggyfill which doesn't work with media queries?. My fix for right now is to stop using vh and instead rely on top, right, bottom, left and position: fixed where I applicable. This solved 90% of the problems.\nThe only things remaining are when text fields are the last item in a drawer or a full page dialog and the keyboard becomes visible on android devices. The keyboard will cover the text field, but the user can (now) scroll the page to make it fully visible. Not sure of a solution for that yet.\nThe other problem is the navigation drawer content setting the min-height or height to be the some calculation between 100vh and the current toolbar height. This is still a bit incorrect for mobile devices, but there is no easy fix for this. I might drop support for enforcing height/min-height instead.\n. To make things easier for me, when the rowsPerPage changes, the page and start will be reset to 1 and 0 respectively.. Yeah, sorry. This issue started from a Slack message so I didn't put too much info in it. It basically messes up the \"bullet\" only when zeroed.. Mind explaining the reason for this mlpull request?. Yeah, I'm a little unsure about how to handle this migration. I'll need to wait for react-motion to update and also figure out what the new convention for the prop-types is. Is this another peerDependency like react/react-dom, or is it more static so I can just use it as a local devDependency?\n. Right now, I am unable to merge due to this bug in the new react-transition-group. Once it has been fixed, I'll do a patch with this changes as well. So hopefully really soon!. I think the #462 pull request completes this issue. So I'll be closing it for now.. I think that should probably be using the classnames module? and switched to\n<Button icon className={classnames({ hidden: !isOver }}>reply</Button>. It's just missing an EOL character for the test. I can fix that real quick. Thanks!. I think this was fixed with the release of 1.1.0. This problem arose because my autocomplete component set the visibility to false for the menu, and after it finally fetched the data from spotify, it set it back to true. But this all happened so fast, that it gets that jumpy animation.\nMy fix was to make it so that if there is no filter prop (so using some ajax filter/search), the visibility will not be changed after each change in the input. Instead, the visibility will be changed when the data prop has been changed.. Unfortunately, the autoclose can not work if your main menu component is always set to isOpen. The autoclose only works for the entire menu, not for closing some nested items.\nYou could update your ListItem to have this feature though. Closing in favor of 306. Is this a windows only bug? I tried testing it on Mac, but the Chrome, Safari, and Firefox dialogs all appeared the same to me. I can try testing it later on windows as well.\nI thought I had fixed this awhile back by using translate3d instead of translate, but I guess it might still be off.. Oof. Darn. I'll try and debug this a bit more. I have noticed if I changed the -webkit-font-smoothing: antialiased; to -webkit-font-smoothing: subpixel-antialiased; on the body it worked, but I've read a lot of articles saying you should stop messing with font-smoothing. This has now been added as a new opt-in feature until the next major release where it will be enabled by default.\nSetting $md-dialog-use-flex-positioning: true will now use flex-based centered instead of the old left/top + translate3d hack.. I wrote wrong ticket in commit.. should be fixed here: 24821e4. Thanks for the fix!. I think this is a duplicate of #306. Closing in favor of that one.. This should be fixed now with the latest commit. I don't think I published it with alpha-8 though.. Yeah, that is how the menu components work starting 1.1.0. I'm still working on migrating the tooltips over to being fixed as well. 1.1.0 Preview. No worries!. Right now it isn't possible since the only use case was for tables when I made it. I might be able to extract parts of it so it can be used outside of the table, but I'm not entirely sure yet. You might be able to just do <table><TablePagination {...props} /></table> which is probably the closest you can get to using it \"without a full table\".\n. After some more debugging, this issue seems related to the window's scroll position before a dialog is opened. If the TimePicker is opened when the user hasn't scrolled at all, it calculates correctly. If the user scrolled the page at least 50 pixels, the calculates stop working. Quite odd.. You can update your dialog to have focusOnMount={false} and it won't do any of the focusing logic. . I will go with this behavior.. If the picker is readOnly, the value will be unchangeable and the picker will never appear. It will only display a formatted date in the text field.\nI will also apply the same logic for TimePickers.. I've also been working on a new DatePicker since my work started needing/using date and time pickers and the current DatePicker fails most user testing and discoverability. Unfortunately it no longer really follows the material design spec, so I'm not sure if it should be applied to this library. I think it will be ok since I believe that most users of react-md are looking for usability and customization over just following the material design spec. We'll see when it's closer to finished.\nThis is what I currently have: https://gfycat.com/gifs/detail/MerryLivelyBluetonguelizard\nIt's getting close, but there is still a bit more polishing to go into it and some more user testing.\n. I can do the first part of this in 1.0.14 (allow pickers to be opened by spacebar), but the second part will have to be in 1.1.0 since that is more of a feature request.. I'll make it so that in 1.0.14 will prevent the enter keypress from opening the picker if the picker is inside of a form. If the picker is not in a form, the enter keypress will work as before. In next release, the enter keypress listener can be fully removed via a prop.\nThis should probably also affect the other form inputs: SelectField, SelectionControl. I think the first approach would be best just since the keydown (tab) listener also calls the blur function and might trigger 2 blur events? If it doesn't, I like the second approach better.\nI'd welcome a pull request if you have the time!. I actually had time today and implemented your second suggestion. Thanks!. This might have been fixed with my dialog changes in 1.0.14. I'm working on merging the changes forward to find out.. Interesting. It appears to only happen if you click the overlay instead of one of the items. Since this fix was small, I think I'll bring this commit back from 1.1.x to 1.0.17. Darn. I should've tested more heavily. My bad. . I ended up adding the second half today. The start index won't change if the page prop is defined until the page prop changes so it will stay in-sync.. @dgollub I honestly know nothing about css modules. Are you saying I can do something like this?\nscss\n@mixin react-md-keyframes($using-css-modules: $md-using-css-modules) {\n  @if $using-css-modules {\n    :global {\n      @keyframes {\n        @content;\n      }\n    }\n  @else {\n    @keyframes {\n      @content;\n    }\n  }\n}\n?\nI'll be happy to try something like that. They are actually still passed to the Drawer from the NavigationDrawer, it looks like I just didn't document them correctly (All undocumented/remaining props are passed to the Drawer). I'll update that.. You're right. it looks like it is being incorrectly passed to the div container instead of the input. I'll fix that. Yeah, I think this was 2 things:\n\nThe defaultValue should be set to the min value instead of 0. In your example above, it should have been complaining about that with prop type validation. This is what caused the initial wrong calculations.\nThe discrete slider's value was not keeping the scale in mind when determining if the value was \"on\", so it was invisible.\n\nThe fixes I added for this was to make the defaultValue prop optional and set itself to the min value if undefined. It will still warn you if you manually set a defaultValue that is not within the min and max and I consider that part a developer bug instead of this lib's bug.\nThe second fix will be to correctly make the slider's thumb \"on\" when the min value was set.\n. Oh. I missed the sliding part of this. I'll reopen. Looks like the second problem was with my calculateValueDistance function. I wasn't offsetting the value while dragging with the min value (only on drag end or click). I might rename it to nestedBefore to match some of the other Components' prop types that do something similar, but I'm not sure yet.\nLooks good, thanks!. Hmm. I didn't think I had anything preventing pull requests... Not sure what caused that :/. Hmm. Doesn't look like it linked correctly, but this should be fixed in 8b4b553.. I'll go ahead and close it. Thanks!. Great. Thanks!. It actually looks like the readonly attribute is not available for select tags so I'm not sure if I'll implement it here. I think doing disabled instead would be preferred. I might add it in a later release though.\n\nother: html form readonly SELECT. This might be because  of my lazy addition of the Intl polyfill. I'll check it out. I think this is fixed with my server rewrite at https://react-md.next.mlaursen.com, but I'm not really sure. I only have an iPad mini that appears to work for both sites. I ended up adding some hooks for both the Drawer and NavigationDrawer. The Dialog should have this available by using the style and className props already (the overlay is the top level component).. I'll go ahead and close this as well. Thanks!. Ok cool. Looks like I actually added the min-width: 100% in the select field styles. Looks good. Thanks!. So md-cell--middle actually only places it in the middle of the container vertically. To center it horizontally, you just need to add margin-left: auto; margin-right: auto to the cell. I guess I could make an additional class md-cell--center that would do the horizontal centering. So if you wanted an absolute centered element, you could provide \"md-cell md-cell--center md-cell--middle\". I'm going to target this for the 1.1.0 release since I did a rehaul of the menus/dialogs and this problem is solved there.\n\nhttp://react-md.next.mlaursen.com/components/data-tables. Not really. I'm about 1/2 of the way with rewriting my server for the 1.1.0 release with a lot more documentation, but I'm not sure how to bring the API changes back easily. Part of the problem is that my ajax examples rely heavily on the returned data structure to display and do other logic so I have to remake them from the ground up :/. This should be fixed now at https://react-md.next.mlaursen.com Sadly I can't bring this back since this was my server re-write and isn't backwards compatible for older versions of react-md.. Oh, you should be able to do react-md@next in your dependencies to get that working. I've been publishing each of the alpha releases on the next tag. I'm hoping for a final release at the start of September, but that's only if I can fix the final major issues with my Layover component. Hmm. Doesn't look like it linked correctly, but this should be fixed in 8b4b553.. I believe this is the same issue as #365 . I think part of this problem was my bad implementation of the table formatting. I relied on padding and height to align things in the center instead of just vertical-align: middle. I think changing to that and removing my plain styles will allow for easier height adjustment.. When I updated the css link to be:\nhttps://unpkg.com/react-md@1.0/dist/react-md.light_blue-pink.min.css\ninstead of\nhttps://unpkg.com/react-md/dist/react-md.light_blue-pink.min.css\nit appears to work correctly in Firefox. It might be because of me accidentally publishing a 1.1.0-alpha to latest instead of next. I'll do some more debugging locally to see if It is a problem. Ahh. That's probably my bad in my documentation; I only have a very small and non-descriptive note about specifying the versions on my installation page.\nI definitely recommend always specifying https://unpkg.com/react-md@VERSION when precompiled css or the UMD build since I'll be trying to keep everything backwards compatible, but when a major version change happens, all apps might break (major will be no backwards compatibility or just huge underlying changes).. Hmm. Doesn't look like it linked correctly, but this should be fixed in 8b4b553.. I ended up increasing the zIndex for the first pass. I'm not sure how I feel about indenting it.. If the disabled prop is enabled, the button should not be tab-focusable just like the native button. I have been unable to reproduce it being untabbable if disabled={false} is provided to the button. Do you have an example for that?. I am going to close this since this is desired behavior.. I ended up fixing this by making sure that the target is still within the Autocomplete's container, so that any parent nodes will not be traversed as well.. I have some ideas to make a bit more customizable; I'll try to get back to you soon!. Would you mind explaining what the problem is? (It might be a problem with my documentation) The rows prop is supposed to be the number of rows in your dataset so that the pagination knows it can get the next set. The rowsPerPage prop is for displaying a certain number of rows at a time.. Ahh thanks! That clears it up a bit more. Thanks!. Hmm. You should be able to just do:\n```\n@import '~react-md/src/scss/react-md';\n$md-primary-color: $md-teal-500;\n$md-secondary-color: $md-pink-a-400;\n@include react-md-everything;\n```\nThe examples folder has a few use cases of using create-react-app or a custom webpack config file and overriding the theme there. Hopefully that might be of some use?. I am going to close this in favor of #450 . I ended up bringing back some of my work with the ResizeObserver to the 1.0.x branch and that included a reusable component for it. I am going to defer the findDOMNode part to #427 . Ahh, I think this is actually because the mini drawer should always be visible. When it mounts in the browser, it correctly updates to visible and you get the diff. I'll update this correctly. Do you have the dense icons disabled for this to happen? It looks like it is displaying correctly at https://react-md.next.mlaursen.com/components/buttons#floating-buttons. The url posted above uses 1.1.x and I don't think I updated any button styles between 7 and 8.\nI'm mostly trying to figure out if it is a css import order type thing that I need to try to fix on my end or document better. So any additional info you can provide me will help :). I could update the styles to something like this:\nscss\n@media #{$md-desktop-media} {\n  .md-icon.material-icons {\n    font-size: 20px;\n  }\n}\nwhich would work for these cases. It would just be harder to manually update the size of icons anywhere else. Maybe this isn't too bad since there is the forceSize prop on the FontIcon? I'll either update the documentation to tell the import order, or add this. I'll close once I decide or if anyone else has opinions. Oh. Right now there isn't. In 1.1.x there will be just checkboxRef.value checkboxRef.checked which will be accessible.\nIn this case, you could always do\njs\nconst checkboxes = document.querySelectorAll('input[name=\"checkboxes-for-submit\"]');\nconst values = [...checkboxes].map(({ value }) => value);\n// or\nconst selectedBoxes = document.querySelectorAll('input[name=\"checkboxes-for-submit\"]:checked');\nconst selectedValues = [...selectedBoxes].map(({ value }) => value);\n. Hey, sorry about not responding to this one. I ended up bringing back the solution i have in my documentation server re-write that used the ResizeObserver polyfill. I tested this solution out briefly and saw we got some React DOM validation errors about placing a div in a <tfoot> is invalid. I appreciate the first pass through!. I think this is a good idea. I can simply add the current dataValue as the forth param for now. Ideally the order should be (label, value, index, matches), but it's a bit hard for backwards compatibility. This one will probably be much later down the road. I have a Testing Guide that goes into some more detail about how you solve the snapshot problems until a real solution has been figured out and implemented.. After looking at some other autocompletes, it looks like my implementation might be bad. They normally don't focus the other elements in the autocomplete list; just apply a highlight color and keep the focus on the text field at all times.\nThe only reason I did the focus immediately afterwards was for keyboard support, but it looks like not doing this manual focus still focuses the next element correctly with tab and focuses the text field again with shift+tab. I think the first patch will be just to make this focus disableable, and maybe rework like other autocompletes to not focus the list items.. It looks like I documented it on the prop types, but never implemented it.. Whoops. I'll make sure to add it in. You should actually be able to get scrollable content by doing:\n.md-dialog--centered {\n  overflow: auto;\n}\nhttps://codepen.io/mlaursen03/pen/vZbNJv\nHowever, this does not fix the title and footer. You could fix that by updating the styles with:\n```\n.md-dialog {\n  height: 100%;\n}\n.md-dialog-content {\n  overflow: auto;\n  max-height: calc(100% - 72px - 52px); // 72px is height of title and 52px for height of footer\n}\n```\nhttps://codepen.io/mlaursen03/pen/VWgvrE\nA third option is updating the title and footer to be fixing the title and footer, but it is the most styles.\nhttps://codepen.io/mlaursen03/pen/BZMoVy\nI didn't include these in my library by default because I didn't know what the best solution would be. The problems that arise from these are the fact that it relies on setting the height of the dialog to 100% so the scrolling is available. So on larger screens or on dialogs that have very little content, there will be a great deal of white space.\nI'll try to think of a better solution that can actually be added that will work for both small and large content. Or just add a prop that flags for large content?. I linked the wrong ticket in the commit message, but this should be fixed after 80360aa.\n. Thanks for all the research for this one! I think I am actually going to remove the manual blur event on mobile devices instead of switching it to touchend. I tried out a couple of other frameworks and the native inputs, and the behavior appeared to be:\niOS\n~The only way to dismiss the keyboard is to hit the \"Done\" button on it. Scrolling anywhere on the page and touch anywhere on the page did not actually dismiss your keyboard.~\nedit: behaves same as android\nAndroid (Samsung Galaxy S7)\nScrolling anywhere on the page did not trigger the keyboard to close. However, touching anywhere else on the page that was not an input or textarea closed the input.\nI will go with this same behavior with my library.. I added a comment here that might get things working a bit nicer until I can think of a real fix.. Closing this one in favor of #467 . I am going to update the logic a bit for this one. The clock will remember the last time as long as the text field has no value. If the text field has a value, it will use that instead.\nSo this means:\n- User opens the TimePicker\n- User selects some new time\n- User closes the time picker by clicking the overlay or the cancel button\n- User opens the TimePicker again\nThe TimePicker will remember their last selected time and display that.\n\nTimePicker has a value set (either by value prop or since they have already selected a value in the picker)\nUser opens TimePicker\nThe current value is displayed as the selected time\nUser selects another time but closes the time picker by any action other than hitting the \"Ok\" button\nUser opens the time picker again\nThe user's last selected time is not selected. It will display the current value of the select field\n\nIf the value is nulled or emptied from an external source after this flow, it will repeat the logic in the first list.. When I upgrade to the next major release (who knows when?) I am planning on making the remaining props apply to the <li> instead of the AccessibleFakeButton. Until then, I'll introduce the props: itemProps, tileProps, and a temporary migration helper prop passPropsToItem.\nBy default, the remaining props and the tileProps will be provided to the AccessibleFakeButton while the itemProps will be provided to the <li>. When the passPropsToItem prop is enabled, the remaining props will be passed to the <li> node instead.. Ahh whoops.. Thanks!. After more debugging, it looks like any component that uses z-index: -1 will cause the rendering to break in mobile safari. So all the classes that should be fixed are:\n.md-file-input,\n  .md-slider-input,\n  .md-slider-thumb--mask,\n  .md-text-field--multiline-mask,\n  .md-selection-control-input {\n    z-index: auto;\n  }. I'll bring forward the changes from 1.0.x as a quick patch since I fixed it there: b13f316. This should be fixed in the alpha-8 patch. This is a pretty hard one to solve. It will apply to any Menu that appears here. The fix would be to make the List use the Portal component to render itself outside of the tab container to bypass the overflow rules. \nI'm not entirely sure if I will tackle this one, but I'll keep it open as a reminder.. Closing this one in favor of #613 . Sounds good. Basically all the times not in the range will be disabled?. Yeah, this is definitely a bug. I'll target it for next patch.. This fix also added a simple utility function to style placeholders since autoprefixer doesn't seem to do them correctly.\nreact-md-style-placeholders. This one is hopefully related to #345 . This one might be fixed now. I haven't released this in the latest patch though. I'll close this once it has been released.. This isn't working because the id prop is required for switches to work (there is even a PropType warning about it). With the change in 1.0.15, the switch's track/ball was moved inside of the label so the correct onClick event would be triggered. Without an id, clicking/selecting/touching the ball does not trigger the hidden input change event.\nhttps://codepen.io/mlaursen03/pen/OgeMLo (forked and just added the id prop). Yeah, this is because of how I handled scroll behavior. Right now the navItems List gets updated with a new className md-list--drawer that sets the max-height: calc(100% - $current-toolbar-height) so that it is scrollable.. I should probably update it so that there is just an additional container that handles the scroll instead.\nSadly I can't set the drawer to be scrollable since it breaks the fixed headers for some reason. Might be able to debug it more though.. The reason I went with the current words was to support some mobile devices since they overflow oddly. I think I'll go with what you proposed, but update the scroll behavior or line wrapping on mobile. It is supposed to be a documentation site, so the easier it is to get information; the better.. I added what you suggested and did a fix for mobile devices. Thanks!. I'm personally fine with the additional scroll bars on mobile. I just don't want the page layout the break while on mobile. When there is visible overflow, it breaks the fixed header and other things. It isn't super ideal though. . Ahh. I see what you mean by the scrollbars now. I'll update it so they overflow is hidden only on mobile devices. Whoops. This is because of my cheap isEmpty check in text fields. I think I fixed this in 1.1.x, but I'll bring it back to 1.0.18. (This might also apply to select fields). This looks like a good addition to me, thanks!. You are correct, I fixed the behavior so that helpOnFocus only hides the helpText.. Thanks for the initial write-up. I ended up fixing the cloneElement part so that it accesses the already existing key (which is located on component.key instead of component.props.key). It should only inject the index key if you did not provide a key to the action yourself.. You're right. That might have been some weird legacy thing? I removed the e.target.click() and everything is working as expected in Safari, Firefox, IE/Edge, and Chrome.\nI'll patch it into 1.0.18. Darn. This one is kinda tough. To support iOS, I ended up switching the height calculations to be calc(100% - 16px) instead of calc(100vh - 16px) since it doesn't include the toolbars in its calculations. Another problem is that the overlay is \"fixed\" within the parent dialog...\nUntil I can think of a better solution, you can always go with:\n```\n.md-dialog--centered {\n  .md-dialog {\n    max-height: auto;\n    max-width: auto;\n@media (max-device-width: 320px) {\n  // iphone 5 is 320x500 with toolbars included.\n\n  max-height: 500px - 16px;\n  max-width: 320px - 16px;\n}\n\n// and any other devices less than 340x530\n\n}\n.md-overlay {\n    bottom: -50vh;\n    left: -50vw;\n    right: -50vw;\n    top: -50vh;\n  }\n}\n```\nAnother problem you might run into is if you don't provide disableScrollLocking to your DatePickers since it'll move the parent dialog to top: 0 and hide overflow.. After the last release (1.2.3), it is now possible to have these nested as expected if you provide portal, lastChild renderNode and disableScrollLocking. However, this isn't super ideal yet.\n```jsx\n  <DialogContainer\n    id=\"simple-action-dialog\"\n    visible={visible}\n    onHide={this.hide}\n    actions={actions}\n    title=\"Change something?\"\n\n<DatePicker\n  id=\"some-date\"\n  label=\"Choose a date\"\n  placeholder=\"12/12/2013\"\n  portal\n  lastChild\n  renderNode={null}\n  disableScrollLocking\n/>\n\n\n```\n\nTo explain why this works and the additional props.\nportal,  renderNode, and lastChild\nThis will move the dialog out of the parent dialog so it doesn't need to be constrained with the max width and height limits. The renderNode={null} is required in addition with portal because there is built-in functionality to help portals before the 1.1.0 release that changed portals to be opt-in. The lastChild is used to render this as the last child in the body. This will allow the child dialog to display over the currently opened dialog. Another possibility would be to update the z-index of the child dialog to be above the default dialog z-index.\ndisableScrollLocking\nThis is applied because we don't actually want to add this functionality since the parent dialog should be handling it.\nDemo: https://codepen.io/mlaursen03/pen/VMGQNB. Looks good to me, thanks!. This is very vague. Can you provide any other information or screenshots to help me figure out what you mean? In 1.0.16, the SelectionControl was rewritten a bit for double click events being triggered, so if there were any custom styles applied before it might be a bit off.\nSee #390 for some more info. So I don't think there is anything built into the theming for that right now. It might work to just apply md-text to your tabs container to get it working. I'd probably need to see some more code to help more.. I normally just use the md-text-container as my centered grids, but I do think another configurable one might be helpful. \nIf you can make something that will allow the breakpoints and widths to be dynamic/configurable, I'll be happy for a PR! (I'd also prefer the name md-grid--container to go with the other naming schemes if possible) . Oooh. This looks good! This will basically allow you to use either the injectTooltip or TooltipContainer to add tooltips? \nI'll check it out more when I get back to a computer.. Looks good to me, thanks!. Marking this a duplicate of #486 even though your issue was created first (I saw the other one first).\nExplanation is here.. Would you mind updating the examples page with the examples you posted here? Hopefully the Contributing section gives enough information about that. (Sorry this is a bit newer and haven't finished the documentation yet). Otherwise I think this looks good. Ahh, I'm guessing that happens after the addition of SVG icons.. I'll update the README to include that! (Also thanks for fixing my spelling errors). This is a duplicate of #429 (I documented it but forgot to implement it). I believe I fixed this in 1.1.0 (only in alpha though) since I ran into this as well. I updated some of the logic so that it would automatically truncate for smaller devices. Check out the Complex Example on a mobile device. I can see about bringing this back to 1.0.19, but I'm not entirely sure if I can. The TEMPORARY one can be resolved by using the new prop that was introduced (constantDrawerType). The persistent one is a bit more difficult since it is \"invalid\" to use a persistent type on mobile devices. If you also provide the desktopDrawerType={NavigationDrawer.DrawerTypes.PERSISTENT} this problem doesn't occur.\nWhat is really happening behind the scenes is that it is respecting the defaultVisible prop, but once it mounts it calculates that it is a FULL-HEIGHT drawer since it matches the desktop media and the desktopDrawerType hasn't been updated and must be visible. I think this is fine as is with the available props.. You're probably right. It feels like a lot of additional logic to add to the component which is why I am a bit hesitant to add it when an existing prop can be used to solve the issue. I'm also nervous about bugs that might appear if the user sets the drawerType to PERSISTENT but don't update it after it turns to mobile and everything displays incorrectly.\n\nExample of your pen with using constantDrawerType for temporary - codepen\nExample of your pen using desktopDrawerType for persistent - codepen\n\nI'll reopen this and think about adding the logic into my component, I personally don't think it is a high priority though :/. Thank you! I am really glad you are enjoying it and it's always great having some positive feedback about the experience to keep me motivated to work on it :). I've mostly been trying to be responsive, give feed back, and document well since it was what was missing for the other libraries (for me).\nSo thanks again for the feedback!. There isn't anything built-in for that, but it should be able to be done with custom styles. Whoops, I made a duplicate #491 Should be available in next patch. Looks good to me. Thanks!. This is mostly because I don't actually support\n- color\n- date\n- datetime-local\n- image\n- month\n- range\n- time\n- week\nas they were not a part of the material design spec (or the TimePicker/DatePicker/Slider/FileInput should be used instead)\nI can always update the PropTypes to include these, but I don't really want to have to support bugfixes for any display bugs (or the fact they need to be polyfilled for some browsers) that might happen for them. You can always ignore the prop type warnings since they will be removed in production anyways.\nI'll think about it a bit more.. Looks good to me, thanks!. In 1.1.x, I have some styling in place to truncate labels and hide things so it can display better on smaller devices. I'll try it out on some bigger datasets to see if it still displays correctly.\nDemo. I'm hoping for Sept 2, but I am going back on vacation next week so I'm not sure if I'll be able to get everything in... I'm running into a few outstanding bugs for Tabs and Menus in fixed elements. :/ I know how to do some of the work for the Menus, but the tabs will take a bit since I don't use them much (personally).. Looks like this was a copy/paste fail. I'll update both this and the date picker since it has the same problem.. Oooh. I hadn't thought about that. I would welcome a PR that adds more examples.\nAdding it to my 1.1.x branch might be easiest since it has a better README about how to contribute and the server was simplified, but you can choose 1.0.x if the examples should be added sooner.. It looks like you read the message while creating pull requests to choose the correct target branch and kept the PR concise.  \ud83d\udc4d\nLooks good to me, thanks for the fix!. I hadn't thought about it, but my first attempt to recreate took about 2 min. So making it configurable shouldn't be bad -- I'll add it 1.2.0. Well... That's interesting. I guess Safari doesn't trigger the blur event and focus when browser tabs change. Might be a \"bug\" with Snackbars not restarting their timeouts when the browser loses focus. Not entirely sure though... I can't seem to reproduce it in 1.1.0+, so I think this has been fixed?. Thanks! . This should be implemented already for 1.0.17. See #439 \nFor some more information about this... The reason the activeClassName is not passed to the component is that the ListItem itself uses active and activeClassName. So with the current implementation, you would use tileProps instead of componentProps. I do like componentProps as a name better though.... Looks good to me, thanks! . Looks good, thanks!\nI think I explained the TableCheckbox part a bit badly. I was trying to say that the the TableCheckbox component was an example where the label prop wouldn't be required and it would use the aria-label instead since having labels with each of the checkboxes would look cluttered. So it wasn't actually a reference for another .d.ts file. I ended up doing this: d8247db and it seemed to work correctly when running the with-typescript example of react-md. Any better suggestions?. Ohh OK. I misunderstood the type Name = { ...keys... } declaration. Your examples clear it up. I'll try adding ol what you've suggested, thanks! . I think I would prefer a PR if you have the time. It'll be more of a\nlearning process instead of a bugfix if I implement it.\nI'll probably be able to understand and learn from a PR quicker\nOn Tue, Sep 12, 2017, 5:42 AM Alexander Olsson notifications@github.com\nwrote:\n\nCool!\nI was just thinking about creating a PR for this, unless you want to do it\nyourself?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/512#issuecomment-328827411,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADvT0lFcTlzA8eogw8UGYSRUE1Ld8nq2ks5shm4zgaJpZM4PSr_Z\n.\n. Thanks!. That makes sense. I'll update all the references to be DialogContainer instead since it is the default export.. Should be fixed now. I forgot GitHub uses different markdown generation than my documentation website.. Yeah it should be. I managed to patch that yesterday: 065d84b (I'll do a patch in an hour or 2 with all these fixes). This error ends up happening if you created a custom Menu component without having valid child element as a click target. I wasn't sure how to get a better warning message about a related component for this or some more context. When using the Menu, you need to make sure that the toggle prop is a button, .md-text-field-container, *[role=\"button\"] or *[role=\"listbox\"].\n\nFor example if you created a custom menu component like this:\n```\n    const toggle = [\n      {firstLetter},\n      \n\n,\n    ];\nreturn (\n  <Menu\n    id=\"account-options-menu\"\n    isOpen={visible}\n    onClose={this.close}\n    toggle={toggle}\n    position={Menu.Positions.BELOW}\n    component={AccessibleFakeButton}\n    onClick={this.toggle}\n  >\n    {..list items..}\n  </Menu>\n\n);\n```\nYou could fix it by either making the toggle component:\nconst toggle = (\n  <AccessibleFakeButton>\n    <Avatar key=\"avatar\" className=\"account-options-avatar\">{firstLetter}</Avatar>\n    <IconSeparator label={username} key=\"username\">\n      <SVGIcon icon={SVGIcon.Icons.MENU_ARROW_DOWN} />\n    </IconSeparator>\n  </AccessibleFakeButton>\n);\nor cheating and update the IconSeparator to have role=\"button\"\nYou might be able to set a breakpoint in the _setContainer function on the Layover component to get some more context as well.. So this is something I've been struggling to \"fix\" for awhile now.  This falls into the same bug that is described in the Autocomplete with \"Smart\" Menus example. It is basically very hard to fix because of how iOS and Android determine viewport height and the fact that Android triggers a resize event while iOS does not. It is actually the resize event on Android that causes it to immediately close.\nThere are a bunch of different hacks I could try to get it to work wonderfully across all mobile devices, but it would be a huge effort and large edit dialogs would still pose a huge issue.\nThis isn't the best solution right now, but if you want to use the EditDialogColumn, I would suggest using the inline view on mobile devices or going for a row editor view.. Thanks for the PR! release/1.1.x for the future. I normally only update master when I have published a patch or a release.\nWould you mind also fixing the travis build? Here was the log of the error:\n```\n\nreact-md@1.1.1 tsd /home/travis/build/mlaursen/react-md\ncpx \"./src/js/*/.d.ts\" ./lib\nlib/NavigationDrawers/NavigationDrawer.d.ts(4,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'DrawerTypes'.\nlib/NavigationDrawers/NavigationDrawer.d.ts(5,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'DrawerTypesType'.\nlib/NavigationDrawers/NavigationDrawer.d.ts(6,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'MobileDrawerTypes'.\nlib/NavigationDrawers/NavigationDrawer.d.ts(7,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'MobileDrawerTypesType'.\nlib/NavigationDrawers/NavigationDrawer.d.ts(8,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'DrawerPositions'.\nlib/NavigationDrawers/NavigationDrawer.d.ts(9,3): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'MediaTypes'.\nindex.d.ts(35,42): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'MobileDrawerTypes'.\nindex.d.ts(35,61): error TS2305: Module '\"/home/travis/build/mlaursen/react-md/lib/Drawers/index\"' has no exported member 'DrawerTypes'.\n``. Great, thank you! I don't have any applications using this except for my smallwith-typescriptexample so I don't get all the use cases fully tested with it.. Great, thank you!. This is a feature only available in 1.1.0+, if you are still on 1.0.* this error will appear. . Thanks!. Could you give an example? If you are manually setting the width of theSelectFieldwith a.md-cell` or other styles, it will appear to do nothing.\n\nThis codepen shows the differences of just basic fullWidth={false} and fullWidth={true}. Oh ok. That is probably my documentation mistake. I'll update the documentation to give a bit more detail and link them together. To get the desired affect, you should also apply sameWidth.\nhttps://codepen.io/mlaursen03/pen/RLrzWE. Looks good, thanks!. If it is the same as UMD, it should be ReactMD. I haven't worked with the google closure compiler yet so I'm not too sure.. You can fully control the visibility by using:\n - visible\n - onVisibilityChange. Here is a working example:\nhttps://codepen.io/mlaursen03/pen/RLKgGp. I'm going to wait a little bit before I merge this one. I had tested on the last 16-RC and there were one or two warnings that needed to be fixed. I can also probably update the Portal component to hook into the new ReactDOM.createPortal API.. So this might actually be a decent change since I'll also need to wait for react-swipeable-views and react-motion to support react@16 to remove those messages. I'll probably also have to do the migration from react-transition-group@1.1.2 -> react-transition-group@2 which is a decent rewrite. I can always do a half solution which patches the SVGIcon warning and implement the Portal component so it works for react@15 and react@16.\nI could just skip some releases and jump to 2.0.0 which drops support below react@16 and does some code cleanup but this kind of ruins my release schedule.. or attempt at a release schedule.. That's good to know! I am planning on doing the \"full\" react@16 support for the 1.2.0 release. I'm finishing up the Portal testing and the Grid components. Hopefully by the end of next week this will be good to go!. I am going to close this one if favor of #576. I ended up finding a couple of bugs that had to be fixed while upgrading and I detailed them in that PR.. Thanks!. I can patch something in for this, but I personally think tables look better if you use the existing styling props to solve this issue.\nhttps://codepen.io/mlaursen03/pen/XeMwOY?editors=0110\nI'll probably do the display: block suggestion.. Looks good to me, thanks!. If you add the portal prop, it will render correctly. This is one of those overflow issues that can only be solved by using portals. However, it does look like the DatePicker and TimePicker are not passing the disableScrollLocking prop correctly to their dialogs.\nhttps://codepen.io/mlaursen03/pen/KXmpbm?editors=0010\nRelated to #444. Closing this one in favor of #613 . Check out this codepen: https://codepen.io/mlaursen03/pen/NajExd?editors=0110\nSo to give some more explanations here are the changes and the reason why I did them.\nProp Type warning\nThe way to get rid of this is to use the deleteKeys prop. The Autocomplete will pass the entire data object into the ListItem component so you can add any additional functionality to each ListItem. Since all my components always forward all undocumented props down to the element, you will get this warning. The deleteKeys will remove the specified keys from the object before passing it to the ListItem\nonAutocomplete Callback\nBy default the onAutocomplete provides the data[dataValue] so that's why you get undefined since the default dataValue (value) key does not exist in your object. Switching to autocompleteWithLabel will then provide the string as expected. There is an issue #425 about returning the whole object as the first param.\nanchoring\nThis is probably something I need to document a bit more, but this isn't working as expected for multiple reasons. To have full backwards-compatibility I ended up making it so that if the position prop is set to BELOW, it overrides the anchor positions. I probably should update it to only do that if simplifiedMenu is still false though. Also, the anchor prop will not be used if the simplifiedMenu is false (defaulted to false).\nHopefully this was somewhat helpful. I'll try and add some more documentation. That part is a bug with the Layover. It doesn't know how to correctly position in elements that have a transform style applied to them. The dialog has transform: translate3d(-50%, -50%, 0); left: 50%; top: 50%; to center it in the page. I've been meeting to update the calculations for that, but I'm not too sure where to start yet.. I'm going to close this one and reference the ticket about the positioning. #580 . Looks good to me. Thanks!. Sadly these will take awhile to fix. I'll need to update the DataTable to use unique keys for each row instead of just array index order. I do need to redo most of the DataTable anyways to make it simpler.. The biggest difference between these two libraries is the styling methodology. I haven't really kept up with material-ui's development process, but the first version of material-ui was created with inline styles and now it appears to have transitioned to JSS. All the styling in this project is done via Sass/SCSS and an opt-in mixin based approach of including styles. I personally prefer having styles in a separate file which is the main reason for this to begin with though. A majority of the styles can be overridden by setting variables before including the styles and then props for exposing style and className have been integrated into each component as well to help with additional custom styling.\nThe next biggest difference is that I have been trying to keep components up-to-date with accessibility standards and conventions to help with screen readers, keyboard users, and other disabilities. It does look like the next version of material-ui has started implementing this as well, so it might not be a big selling point any more.\nI also think my documentation is a bit easier to navigate and see live examples but that might be because I made it.\nFinally, I'd choose one of these two based on how quickly you'd like updates to appear. I am the only main maintainer for this, so my releases and newer features might come a bit slower compared to material-ui. I normally try to answer questions and PRs as quickly as possible, but some times other things come in the way.\nHopefully this was informative and helps you and people in the future choose one of these :). I think the base README should cover all this information now. Closing. Looks good to me, thanks! I might change a few things to add some default styling to the outer dates once I play with it a bit.. Hmm. I don't recall that message in the docs about componentWillUpdate and I've done it in a couple of places. I should probably fix it at some point to do it at componentWillReceiveProps and right before the setState that would have caused the update as well... This one should fix #559. I'll add a couple of tests to make sure as well. Thanks!. To help debug this, could you provide the version of jest and node you are using?. Thanks!. Thanks for looking into this so deeply @Ardhimas. I haven't really been able to debug it much since it wasn't happening for me. I'm curious if it has to do anything with this bug for snapshot testing. The Layover component defaults to setting the fixedTo: window which could be causing problems. It might work with mount because it does a full render? No idea.\nIf you have a test case that is guaranteed to fail each time, I would like to see it so I can debug a bit more. I think it would also be helpful to let me know what version of React and enzyme you are using.. It appears so. Setting the fixedTo prop in the Menu to {} allows the tests to work as expected. Ideally the bug I posted above will get fixed soon, but I can always update the default props for fixedTo to be typeof window !== 'undefined' && (typeof global === 'undefined' || window !== global) ? window : {} which would solve it for now.\n. Nevermind, doesn't look like that will work either. global === window is still true in the browser so layovers stop working. Might just have to wait :/. This one is actually just because React 16 started displaying these warnings. You can get around it with two ways.\n\nCreate a Component instance instead of a Stateless function\n```\n\nclass TooltipClock extends Component {\n  render() {\n    const { time, diameter, tooltip } = this.props;\n    return (\n      \n        {tooltip}\n      \n    );\n  }\n}\nexport default injectTooltip(TooltipClock);\n```\n\nUsing the newer Tooltipped component.\nconst TooltipClock = ({ time, diameter, className, label }) => (\n  <Tooltipped setPosition label={label}>\n    <Clock time={time} diameter={diameter} className=\"inline-rel-container\" />\n  </Tooltipped>. Oof. Yeah, it's supposed to be optional. I'll do a quick patch to include this fix. . Whoops. I referenced the wrong issue in the commit. It should be commit f8f4096.. This one should be possible after the 1.1.7 release and commit: 124272b\n\nThis should be a good example of usage.. I'll change this to be a feature request for vertical sliders. I'll need to update the code to handle up/down movements instead of only left/right. Interesting, I thought my logic broke when that happens. I'll remove that warning.. @williegroovy I will happily accept a PR if you have the time!. It looks like I need to update the styles a bit for this..\nTo fix the buttons, I'll need to add overflow: visible so the tooltips appear outside of the button.\nTo fix the other ones, I'll need to update the tooltip to be display: block; height: auto; padding: $some-variable-padding;.. Looks good to me, thanks!. This one is a bit hard to fix because the smooth scrolling is opt-in for iOS. Most of the problems occurs from using a full page Dialog in the examples. I can update the full page dialogs to use the md-ios-scroll-momentum mixin, but if there are any fixed toolbars on the page, they render slowly and badly when the user scrolls. You can \"fix\" this by manually setting the height of the scrollable content and using the mixin above, but it is a bit too hard to include in this library at the moment since there are a lot of different setups and positioning of elements.. Can you provide a code sample and some other information like React and react-md versions? This is not something I can reproduce.\nhttps://codepen.io/mlaursen03/pen/boYZQG. Looks good to me, thanks!. Whoops. Yeah, looks like I can't read. I'll do a small patch with this.. Closing this one in favor of #551. I'll update it with some more information as well.. Would you be able to provide a stack trace to get some more context? I am not entirely sure if I will tackle this though since I'm really supporting IE11+ right now :/. PRs are always welcome if the contributing guidelines are followed!\n\nContributing 1\nContributing 2 \nContributing 3 \n\nI have been meaning to consolidate them.. . This seems to be working as expected with 1.3+ now. Live example: https://codepen.io/mlaursen03/pen/vjzjEo?editors=0110\nNot sure when I fixed it though. Going to close for now.. Yeah, I'm not sure what to do. I have an update where my build is similar to react-router's, but it still looks like the unused code is being bundled for both. /shrug. Looks good to me, thanks!. Oof. Thanks for the fix!. If you enable the disableScrollLocking it should work as expected. I haven't come up with a nice way to automatically disable it when inside dialogs yet though.. It isn't fully required since the while goes until el is defined. It could stop one more call of node.parentNode though if the break is added.. It looks like I forgot to provide the style prop to the Grid when the children is not a callback function. Should be an easy fix.\nI'll need to know more about your build environment and how you are importing react-md components to help with the bundle size issue.. Ahh yeah, sorry. The huge jump in size is the fact that you are now importing two versions of the react-md library: rollup and just pure babel transforms. I actually did not fully implement module support since it looks like creating an es module bundle with rollup did not work as expected: #587\nTo reduce it back to your normal size, you'd still have to do \nimport Grid from 'react-md/lib/Grids/Grid';\nimport Cell from 'react-md/lib/Grids/Cell';\nOr change all of your imports to be import { Component } from 'react-md'. It still imports the entire library, but it'll actually be smaller on large scale applications with a lot of code-splitting since the rollup bundle is a lot more optimized than the pure babel transforms in the react-md/lib namespace.\nI hope this made sense.... I think this has to deal more with using array index as keys instead of unique ids for each list item. If you check out this codepen you can see the differences between using unique keys and just array index keys. It works as expected when using unique keys, but fails when using array index keys.. Going to close this since I think it was resolved.. I think an easier solution might be to change the DialogContainer to no longer position the Dialog in the center using:\nscss\nleft: 50%;\ntop: 50%;\ntransform: translate3d(-50%, -50%, 0);\nsince I am having to do additional checks and fixes for this weird translation. It would be easier to center by just using:\nalign-items: center;\ndisplay: flex;\njustify-content: center;\nThis just means that any custom positioning of the Dialog would have to be changed to using margin instead of left or top.\nI'll think about it some more.. This has now been added as a new opt-in feature until the next major release where it will be enabled by default.\nSetting $md-dialog-use-flex-positioning: true will now use flex-based centered instead of the old left/top + translate3d hack.. Would you be able to provide any additional code or a reproducible example? I haven't encountered it yet, so some additional context would be helpful in debugging!. @zerowaitstate That was the problem. Thanks!. This looks good to me and thanks for updating a few of my tests to use enzyme! I've been meaning to migrate more of them over but never get the time.. Ahh ok. That makes sense. Thanks!. This can be solved pretty easily by adding\n.md-list--menu .md-subheader {\n  white-space: nowrap;\n}\nI'll test to see if there are any negative side-effects of this before adding it to the base library styles.. This is probably a documentation problem on my end since the visibleOnFocus prop is really only for keyboard focus behavior. When the user tab-focuses the column, it will either automatically open up the text dialog or just show the focus outline requiring the user to press enter or space to open the dialog.\nIt appears that all browsers are following the expected behavior to me from both the codepen and the documentation website example.. Looks like it was a problem with how the react-test-renderer builds the tree for snapshotting since it works in browsers and other renderers. Removing a <span /> in the TransitionGroup's children fixes the rendering issue.. I accidentally did an unsafe React.cloneElement without checking if the icon was defined. Should be fixed now.. Not anything new yet, sorry! This isn't an issue yet for me in work since we don't use tabs and all the other cases where it might be an issue, the components can be portal-ed to fix.. Whoops, you're right. I forgot to add an extra --. Would you mind updating it to be\ndiff\n     \"build-css\": \"node-sass-chokidar --include-path ./node_modules src/ -o src/\",\n-    \"watch-css\": \"npm run build-css && npm run build-css --watch --recursive\",\n+    \"watch-css\": \"npm run build-css && npm run build-css -- --watch --recursive\",\ninstead?. Closing this one in favor of #626. Thanks for letting me know of the problem!. If you are using react-router v3, you should check out the with-react-router-v3 example. It shows how you can set up a NavigationDrawer and get the different routes to animate in with the default transition.. Aha. Thanks!. Looks good to me, thanks! I'm starting to wish that I renamed the activeClassName to activeTextClassName instead these could be named activeStyle and activeClassName instead.. I ended up adding activeClassName and inactiveClassName to the Tab component as well as activeTabClassName and inactiveTabClassName to the Tabs component to solve this. It became a bit too hard to guess when different colors should be applied.. Whoops.. Thanks! Should be fixed now. It is actually preferred to use unitless line heights when you can and I can't actually remember why I manually set the line-heights to px for these. I'll need to update most of my styles at some point to use rem and em instead as well :/. This should be fixed in @react-md/typography@v2.0.0-alpha-1\nI'll comment on this issue again when v2 is released . This should be fixed in @react-md/typography@v2.0.0-alpha-1\nI'll comment on this issue again when v2 is released . I actually started thinking about this recently and it's going to be a huge change with some problems. But to answer your question... it is currently not possible to translate any parts of the website since there is nothing set up for it.\nSome of the problems with the translations is that almost all text within the website is put through a markdown converter since I'm lazy, so rolling with an already built solution like react-intl won't really work. I'm not entirely sure where to start with it :/. The main reason is a bit of laziness but it's also so that you can add a lot of customizability to the items. When you use an object, it can allow you to create a pretty complicated item like:\n{\n  label: 'This is the item label',\n  value: 'value',\n  leftIcon: <Checkbox id=\"some-id\" checked={isChecked('some-id')} name=\"multi-select\" onChange={this.handleMultiSelect} />,\n  secondaryText: 'Some additional context',\n  ... any other props ...\n}\nand since the ListItem is still using an old component paradigm, I can't safely remove all keys that can't be provided to the ListItem since this is also valid:\n{\n  label: 'This is the item label',\n  value: 'value',\n  component: CustomItem,\n  customProp1: 'something',\n  customProp2: 'something else',\n  ... other props ...\n}. Sorry, took me awhile to respond. You can always try to use the deleteKeys prop to remove those additional keys that are not needed.. Thanks! Should be good after next deploy.. Great, looks good to me. Thanks!. I think this looks good. Thanks! I'm going to wait a little bit before merging since I'm trying to decide which release to put it in.. I think this will be fine in 1.2.9 even though it is a \"new feature\". I think this might be related to this fix.. Here's a little update for this issue:\nI had to make a different DatePicker for work that has solved most of the date problems that we are seeing here and are finishing QA on them by next Thursday. Once it is done with QA, I'll start working on moving the correct logic into here. I'm hoping I can get the date fixes into a patch instead of a major/minor release, but if it can't I'll put them in the 1.3.0 release. In 2.0.0 or 1.3.0 I'll also be adding some newer Date, Time, and DateTime pickers that will allow for text input as well. . Sorry, still doing heavy QA, and I'm a bit burnt out so it's hard to apply the fixes after work. I'm hoping to include the fixes by this or next Friday in the 1.2.12 release. Sorry about the delay! . For anyone watching this thread.. I have a PR up #680 with the new logic. I'm going to be testing a bit more to make sure I applied it correctly since there were different features between the date pickers, but it is looking good in the first few timezone tests I ran.\nThis should hopefully be released in 1.2.12 by Friday Feb 9.\nEDIT: The changes should now be live at https://react-md.mlaursen.com/components/pickers/date and react-md@1.2.12-beta if you'd like to check as well.. Glad it works for you! I think I am going to do something terrible and release this as 1.2.12 today even though I messed up the backwards compatibility if using the timeZone prop. I don't know how to keep the newer \"correct\" date logic as well as supporting the timeZone, so I would not update to 1.2.12 if you were using that.\nHopefully this isn't too bad since now there are yarn.lock and package.lock files so it won't automatically be pulled the next time the modules are installed. I just really need to release a new fix or else I'll keep being stagnant at 1.2.11\nI still think the eventual fix for this will be the new date and time picker implementations that I've started in #677 that'll have to be in my next major release since it changes a lot. Sorry for any bugs or inconveniences this might cause, but hopefully it will just fix the weird display errors for the majority of users.. Yeah, this looks like a duplicate of #595. I'll add an example of nested dialogs to the documentation site that might help showcase this bug and fix.. Yeah, it isn't the best solution though. Your inner dialogs should have portal, disableScrollLocking, and lastChild enabled as well as setting the renderNode={document.body}\nSee this codepen for a working example. I might be able to simplify it a bit and remove some of the pre-1.1.0 portal fixes that will make it so you don't need to do renderNode={document.body}.\nI'll add some more notes later about why this works when I get some time.. Here's an explanation about why it works and why each of these props need to be added.\nDue to each browser calculating view height and view-width differently, the dialog's size is based on fixing the dialog to a parent element (max-height: calc(100% - $padding); max-width: calc(100% - $padding);). In most cases this will be the full window size and work as expected, however some browsers treat position: fixed as a new relative container for nested position: fixed elements. This means that a nested dialog would have a max height and width of the parent dialog instead of the full page size.\nTo get around this, we enable the portal prop and set the renderNode to the document.body or some other element so that it is now setting size based on window size. The only reason the renderNode needs to be set right now is that some logic pre-1.1.0 was created so that renderNodes are set to parent dialogs or parent drawers to help with nested portals. It'll probably be better from now on only to set the renderNode automatically if it is in a full page dialog instead so it will have correct z-indexing.\nThe next problem is now that we portal-ed the inner dialogs out, they will appear underneath the parent dialogs since they were rendered as the first element which has a lower z-index by default. Enabling lastChild now makes it have the highest z-index and will appear over the parent dialog.\nHopefully that wasn't too confusing.. I ended up adding 6 new props:\n- miniDrawerId\n- miniDrawerStyle\n- miniDrawerClassName\n- miniNavItemsId\n- miniNavStyle\n- miniNavClassName\nto help with styling and add some missing ids.. Right now it isn't possible mostly because of mobile real estate. It changes to a \"shifting\" bottom navigation because there isn't enough real estate on most mobile devices to show more than 3 labels at once. It would be nice to add this feature for devices that have the real estate though.. I've been rewriting the components in react-md with Typescript and using the new context API, so when I get to the Bottom Navigation component again I'll make try a few different scenarios to add this feature. It definitely is a nice feature to have. Looks good, thanks!. Right now the main process is:\ncompile scss to css -> create stylesheet -> apply class names to elements\nAll of the styles within react-md will be prefixed with md- and the class names are following BEM (somewhat) so that should hopefully fix some of the global namespace issues.\nIt could be that you can use CSS Modules (or any of the other frameworks/naming conventions out there) for custom styles applied on top of react-md to help even more with namespace issues.\nAnd sorry about heroku being down! I am not on the paid tier so it stops working after 550 hours for the month. You should really only need to go to the heroku url if you are not a memeber of the Slack channel yet, otherwise you can just go to https://react-md.slack.com. That makes sense. I think it will be a good addition.. Do you have any additional styles set? I copy/pasted your example into a codepen but it seems to be working as expected? This might also be related to the #645 with nested panels?. Ahh ok. I think this issue is coming from these lines then. I might be able to fix it by changing the query selectors from \nthis._container.querySelectorAll('.md-panel-header')\nrow.querySelectorAll('.md-panel-column')\n to \nthis._container.querySelectorAll('> .md-panel-header')\nrow.querySelectorAll('> .md-panel-column')\nbut I haven't done much with Expansion lists yet personally so I'm not sure. Yeah, not too sure yet. I think it should be okay since the tree looks like:\n```\n.md-expansion-panel-list\n  .md-panel-header\n    .md-panel-column\n    .md-panel-column\n  .md-panel-header\n    .md-panel-column\n... etc ...\n``\nand since theExpansionPanelhas to be a direct descendant of theExpansionPanel` to get some cloned props, it hopefully shouldn't break existing layouts.\nI'm still not too sure though since I haven't used ExpansionLists and ExpansionPanels outside of the simple examples. Hopefully these comments will help when someone starts digging into it a bit more.. My documentation site is going with the second approach, but I haven't noticed the direct url input issue. It might be because my component calls the updateLocation when it mounts?\n\ncomponents/App/History.jsx\nstate/routing.js. So maybe a higher order component kinda like this?\n\n```\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport getDisplayName from '../utils/StringUtils/getDisplayName';\nimport CircularProgress from '../Progress/CircularProgress';\nexport default function withLoader(Component, loadingPropName, a11yPropName) {\n  return class ComponentWithLoader extends PureComponent {\n    static displayName = getDisplayName(Component, 'Loader');\n    static propTypes = {\n      id: PropTypes.string, // recommended/required\n      loadingId: PropTypes.string,\n      loading: PropTypes.bool,\n      loadingChildren: PropTypes.node,\n      loadingInjection: PropTypes.oneOf(['prepend', 'append', 'replace']).isRequired,\n    };\nstatic defaultProps = {\n  loadingInjection: 'replace',\n  loadingChildren: <CircularProgress centered />,\n};\n\nrender() {\n  const {\n    loading,\n    loadingInjection,\n    loadingId: propLoadingId,\n    loadingChildren: propLoadingChildren,\n    ...props\n  } = this.props;\n  const { id } = this.props;\n\n  if (loading) {\n    const loadingId = propLoadingId || (id ? `${id}-loading` : null);\n    const prepend = loadingInjection === 'prepend';\n    const append = loadingInjection === 'append';\n    let loadingChildren = propLoadingChildren;\n    let loadingProp = this.props[loadingPropName];\n    if (loadingId && React.isValidElement(loadingChildren)) {\n      loadingChildren = React.Children.only(loadingProp);\n      loadingChildren = React.cloneElement(loadingProp, { id: loadingId, key: loadingId });\n    }\n\n    if (append || prepend) {\n      loadingProp = loadingProp ? React.Children.toArray(loadingProp) : [];\n      if (append) {\n        loadingProp.push(loadingChildren);\n      } else {\n        loadingProp.unshift(loadingChildren);\n      }\n    } else {\n      loadingProp = [loadingChildren];\n    }\n\n    props[loadingPropName] = loadingProp;\n\n    // Inject the accessibility either into props or a custom object prop\n    const a11yProp = a11yPropName ? props[a11yPropName] || {} : props;\n    a11yProp['aria-busy'] = true;\n\n    if (loadingId) {\n      a11yProp['aria-describedby'] = loadingId;\n    }\n\n    if (a11yProp !== props) {\n      props[a11yPropName] = a11yProp;\n    }\n  }\n\n  return <Component {...props} />;\n}\n\n};\n}\n```\nUsage\n```\nconst LoadingSelectField = withLoader(SelectField , 'menuItems', 'listProps');\nconst LoadingMenuButton = withLoader(DropdownMenu, 'children', 'listProps');\n...\nrender() {\n  const { loadingSelect, loadingMenu, selectItems, menuItems } = this.props;\n  return [\n    ,\n    ,\n    ,\n    {menuItems},\n  ];\n}\n```\nSo when the loading prop is true:\n- select1 would inject the loading indicator as the first item in the menu items list\n- select2 would inject the loading indicator as the last item in the menu items list\n- select3 would replace the entire menu items list with the loading indicator.\nIn these cases, the accessibility props would also be injected when needed as well.\nThis should theoretically work except for the fact that the SelectField needs to be updated to handle the listProps like the other menu variations, but I haven't actually tried it.. Cool; I'll target it for the 1.3.0 release. I've been planning on adding a couple more HOCs to this library, so it would probably be a good time to start adding them.. Interesting. Might be something I clone into the children... I'll check into it. Oh, thanks! I'm actually wondering why I did 0 or a boolean for those.... I've also realized that my logic doesn't really account for nested ExpansionPanels. Does it still display as expected?. Going to close this one now since the main PropType warning is fixed. The remaining fixes will go into #642 . Looks good to me, thanks!. Oof. Thanks a bunch!\nI'll actually target this one back for 1.2.10 instead of 1.3.0 since I'm nowhere near ready to release that and this is a bugfix. Yeah, it should now only remove the keydown listener when unmounting or the visible prop changes to false.. The new documentation should now be live. https://react-md.mlaursen.com/customization/themes#creating-a-theme-without-material-design-colors\nHopefully that explains it a bit more.. Looks good to me, thanks! I'll actually change this to 1.2.x and you can ignore the Travis Build failing. Looks like my Sass linting rules might have changed recently so it's my fault it's broken.. The onresize is good enough for this use case. The ResizeObserver is really only used when small parts of the page have to listen to resizes. Since this example takes up the full page, we're good!. Can you give a code example? You can use this codepen if that helps. I'm not entirely sure what the bug/feature request is here.. I'm not too sure yet how to fix this. It also happens in IE11 sadly (which is supported :( ). I'll probably dig into this more soon since we are going through heavy QA right now and this might come up.. I'll try this out and see if it is ok and target this again for the 1.2.12 release.. It seems to work as expected in Edge with the above suggestion. Closing.. Nevermind. Applying these fixes makes Mobile Safari flash.. Yeah, but it won't be for awhile :(. I am going to be fixing it when I change how dialogs are positioned on the page (no longer transforms) and the flow for rendering when visible is changed to true (fixing portal api and rendering elements order).\nIf someone has a better idea before then, I'll happily accept a PR though.. Looks good to me, thanks! You can ignore the scss lint stuff. It's something that got changed ad I forgot to fix it. I'll do it after the merge. Darn. I fixed this bug once before for iOS devices. I'll try to dig into why IE/Edge are doing it now.. I can't seem to reproduce this. What versions of Edge and IE? I tried with:\n- Microsoft Edge 41.16299.15.0\n- Internet Explorer 11: 11.192.162299.0. It appears to work correctly on Edge 38 (what I have on my VM). I'll try debugging the newer versions and IE11 again.. Yeah, I think this is a bug. The height should also include margins for these panels. @zgavin1 I don't think much is necessary for this one. If you really want to go the extra mile, you could write tests to mock the different attributes and show that it includes margin and padding. I do think it is overkill for this one. Thanks in advance for submitting a PR!. Would you happen to have a code sample for this? I don't seem to see this behavior on my documentation site. The only thing that I can think of is that one of your menuItems has an attribute: className: 'undefined' but that doesn't seem likely :/. Whoops, I lied. I see it now. It is a bug and should be fixed.. Oof. That was one of the side-affects I didn't think about after that change. I'll patch it back and see if I can come up with a better way to fix IE11/Edge dialogs flashing. You can update each item in the list to have inkDisabled: true if you want to completely get rid of the ink affect. So something like:\n```\nconst menuItems = someArray.map(item = >({ ...item, inkDisabled: true });\n\n```\nThis won't really work with keyboards until #666 is released though.. Would you mind giving some more context to the reason for this PR? I'm a little hesitant to remove all click event bubbling since some of my advanced components rely on it. I'm leaning a bit more towards having to manually preventPropagation on child click event listeners if the bubbling is not desired. It's a little more work for the developer, but it seems safer to me.. This might have been fixed in one of the versions in between 1.2.9 and 1.2.11. I can't seem to reproduce the error. Is there a specific browser or device that broke for you?. You can probably fix this by doing:\n```\nconst App = () => (\n  <NavigationDrawer\n    id=\"main-drawer\"\n    type={NavigationDrawer.DrawerTypes.TEMPORARY}\n    visible={this.state.drawerVisibily}\n    position=\"left\"\n    onVisibilityChange={this.toggleDrawerActive}\n    navItems={this.buildMenuItems}\n\n<Switch>\n  {this.routes()}\n</Switch>\n\n\n);\n\nexport default withRouter(App);\n...\n\n\n\n\n\n\n\n\n\n```\nCheck out the react-router docs about blocking updates. The commit that I just added (2da6876) fixed the documentation site examples which I'll be deploying once I figure out why the custom themes stopped working with my recent server changes.. Do you have a reproducible code sample by chance? I'm not seeing this in React 16.0 or when I upgraded to React 16.2.\nI'll still update the code so that the ref will be null/undefined or the function instead of boolean or the function.. Looks good to me. Thanks! . Thanks a bunch!. Think updating it to look like the disabled raised buttons would be a good default? I was debating making it look like the other flat buttons, but I think shifting from no background to a background might look weird.\n\nThe 2 disabled buttons in the Themi Swapped Examples are the new ones showing the disabled styles\n\n\n. Hey, this actually has to do with some Sass variable default problems. For some of the more complex variables that rely on others, the only way you can get around it is by setting the overrides before you import react-md.\nSo for example:\n```scss\n$md-light-theme: true;\n$md-primary-color: #1E88E5;\n$md-secondary-color: #EF5350;\n$md-light-theme-text-color: rgba(255, 255, 255, 0.7);\n$md-light-theme-secondary-text-color: rgba(255, 255, 255, 0.45);\n$md-light-theme-icon-text-color: rgba(255, 255, 255, 0.6);\n@import '../../node_modules/react-md/src/scss/react-md';\n@include react-md-everything;\n```\nshould be more what you are looking for. I need to do some more documentation and some changes to make this not happen though.. Yeah, this has to do with the fact that my layovers haven't been able to adjust themselves yet when they are in a container with transform: translate .... yet.. Sorry, right now I haven't implemented a good way to use mini drawers without the NavigationDrawer :/\nIn reality, providing PERSISTENT_MINI or TEMPORARY_MINI to a Drawer doesn't really do anything other than set the size to be smaller.. That's a good idea, I was running into this problem as well when there isn't enough space for text button.. I think I will be a bit slow to fix this one since the changes in FontAwesome after 4.6 lost my interest and I prefer using SVGIcons or material icons personally. I wonder if you would be able to do something like:\n<SVGIcon className={classnames('fab fa-stumbleupon logo-offline-icon', { active })} />\n if it is an svg problem.  I haven't tested or really looked into this yet though.. Let me know if I should re-open if it still doesn't work.. Oof. That isn't something I thought about. I'll think about some better ways to apply base colors and work with the different md-[COLOR]-[VALUE]--[TYPE] classes. This has now been added as a new opt-in feature until the next major release where it will be enabled by default.\nSetting $md-dialog-use-flex-positioning: true will now use flex-based centered instead of the old left/top + translate3d hack.. Yeah, I've been thinking of stopping SVG animation for the circular progress since it is apparently deprecated (or being deprecated). I'll try to figure out a better way to have these rendered.. This is actually because of how the icons are created and gain \"state\". It works for FontIcon and SVGIcon because those were the intended use-cases but you can get around this error by just creating a wrapper that removes the icon specific props that are passed to the button.\nconst IconButton = ({ primary, error, className, ...props }) => (\n  <Button\n    {...props}\n    icon\n    primary={primary && !error}\n    className={cn({ 'md-text--error': error }, className)}\n  />\n);\nOne of the biggest \"features\" in react-md is being able to pass any prop to any component and have it applied, but it does cause weird problems like this. I could also update Buttons so that they have the ability to be rendered with error states.. Luckily it looks like this is a simple fix to make sure that the fullPage is enabled instead of just not errored.. Oof. Thanks!. Thanks!. This one is going to be decently hard to fix. This is due to Safari being one of the only browsers that does not render position: fixed or position: absolute that appear in a container that has overflow set. So this could be fixed by either updating menus to portal the cascading menus out or making it so that the overflow is set to visible on the parent list when a cascading menu is opened (this would also prevent scrolling on that parent list while a sub menu is open).\nI think updating menus and lists to support portals would be the best fix since there are other issues (#613) that have this same bug.. @kanso-michael Sorry, not yet. There is a big problem with how I am determining which elements can be visible since I actually remove them from the DOM and never add them back or do recalculations after a resize.\nThis bug isn't a huge priority for me though since I personally don't use Tabs in work or fun projects much. Right now I am working on fixing the behavior, styles, bugs, and ES6 imports for my components in almost this order (I've already completed some of these):\n- Typography\n- Portal\n- Accessibility\n  - FakeAccessibleButton\n  - FocusContainer\n- ResizeObserver (and new ResizeListener)\n- Link (also with better react-router support)\n- Grid/GridList/Cell\n- Divider\n- Subheader\n- FontIcon/SVGIcon/IconSeparator\n- Button\n- Avatar\n- Badge\n- Chip\n- Forms (v1)\n  - Label\n  - Error\n  - Message\n  - TextField\n  - TextArea\n- Layover\n- Menu/DropdownMenu/MenuButton (with portal support)\n- Table (v1)\n  - Table\n  - TableHeader\n  - TableFooter\n  - TableBody\n  - TableRow\n  - TableCell (instead of TableColumn)\n- Media\n- List/ListItem/ListItemControl\n- Dialog\n- Transitions\n  - Collapse\n  - Others\n- Toolbar\n- Drawer\n- NavigationDrawer/Layout\n- Tooltip\n- Ripple/Ink\n- Card (and all parts)\n- Progress (Linear and Circular)\n- ExpansionPanel\n- Forms (v2)\n  - SelectField\n  - Slider\n  - FileInput\n  - Checkbox\n  - Radio\n  - Switch\n  - Autocomplete\n- DatePicker/TimePicker\n- Tabs/Tab/TabContainer\n- Table (v2)\n  - include the wrapper components for form elements and menus\n  - TableCheckbox\n  - DataTable - component for managing checkbox state if using built-in, and other niceties\n- BottomNavigation\n- Stepper\n- Paper (this is one of the least useful components to me)\nThis is my priority list right now, but I am going to be writing an issue within the next few days with an updated roadmap of what I am planning on doing and how to make this project not stagnate while I'm working on stuff. It'll also be a good time for any other input from users/contributors of this library to give feedback about priorities. I think one of the biggest problems I'm running into right now is that I am working off of my own priority list instead of the community's (and I haven't made this project super contributor friendly yet) as well as feeling a bit of a burnout with the amount of work that needs to be done + full time job. So if there are things that are a lot more important than the fixes I want to do, the order might change a bit and do more patches until it's at a good state.. Thanks :). I'm leaning towards supporting more autocomplete options, but I'll think about it a bit more.. Makes sense. I'll update the prop-types for this one to just be PropTypes.string and update the documentation to point to valid options of 'on', 'off' and link to the disabling autocompletion MDN docs. You should always be able to see the changelog for each release here on github or the What's new page on the documentation website.. Oof, thanks!. I believe this was just fixed a few minutes before this PR in #712. Thanks for the PR though!. Hmmm darn. I thought I fixed this with the belowAnchor prop, but that doesn't work as expected either. I'll look into fixing it. This should be fixed and published now.. Is there a reason the fixed and fixedPosition don't work for you? It could also be that during some of my documentation site changes, I forgot to add an example back for fixed floating buttons.. Going to close since it exists as the secondary prop.. The Radio Example talks about this, but maybe I didn't put enough information there. With the rewrite work I am doing, I am going to see if I can make the radio component not rely on the SelectionControlGroup (it only needs it right now because of how I am rendering the icons). I ended up reviewing initially at 1.2.x and switching to the 1.3.x release since it changed some styles and added a new feature.\nThanks for the contribution, it looks good to me!. I did have an example of how you can implement this (poorly) before the 1.1.0 release. If anyone is looking for examples, you can check out the code:\n- FlexibleSpaceExample.jsx\n- AliConnorContact.jsx\n- _flexible.scss\nI'll look into how the material components web ended up implementing their flexible space examples and go from there!. It looks like it works to me: https://codepen.io/mlaursen03/pen/LmGjWo?editors=0010#0\nDo you have a live example where it does not work?. Looks good to me, thanks! I might rename it to controlComponent, selectionControlComponent, or {{SOMETHING}}Component to keep with my naming convention before releasing 1.3.0. This is something that can only be automatically fixed when setting the scss variables before compilation. You could do:\n```scss\n$md-toolbar-prominent-height: 250px;\n@include 'react-md/src/react-md';\n@include react-md-everything;\n```\nwhich will automatically update the .md-toolbar-relative--prominent className to correctly do a margin-top: 250px;. Thanks for adding the className! . I think this will be related to and fixed with #370, but I'll keep this open as well for a reminder.. This becomes really hard since dialogs can be created anywhere in the app at any time and the dialogs aren't guaranteed to be children of each other. This is a nice feature to add but will be difficult to make work out of the box. This can currently be fixed by adding some code yourself when the child dialogs appear, you set closeOnEsc={false} on all dialogs that are not \"at the top\".\nSo for the Nested Dialogs example, you would update the MainDialog to apply closeOnEsc={false} when the InnerDialog is visible.\nI can keep this in mind for later though to see if it could automatically be built-in.. The issue that @c0b41 linked is normally the root cause of icons not appearing, but you can also follow all the steps in the with-create-react-app example and apply the same logic to your project as needed. \nThe most helpful section might be:\n\nNow that all the styles have been included, let's add the Roboto font and material-icons using the webfontloader. First install webfontloader:\nsh\n$ yarn add webfontloader\nNext, update src/index.js to use the webfontloader to load the fonts:\n```diff\n import React from 'react';\n import ReactDOM from 'react-dom';\n import './index.css';\n import App from './App';\n import registerServiceWorker from './registerServiceWorker';\n+import WebFontLoader from 'webfontloader';\n+\n+WebFontLoader.load({\n+  google: {\n+    families: ['Roboto:300,400,500,700', 'Material Icons'],\n+  },\n+});\nReactDOM.render(, document.getElementById('root'));\n registerServiceWorker();\n```\n. Looks good to me, thanks! I'll release 1.3.1 with this fix tonight or tomorrow. Please see the documentation notes\nThe Snackbar component is used for displaying a concise and small message to the user about an operation performed.\nThe main component for the Snackbar is actually named the SnackbarContainer, so you need to make sure the import is react-md/lib/Snackbars or react-md/lib/Snackbars/SnackbarContainer. The first import is preferable.. I think this really depends on your use case, so I'll link some of the related documentation, how I did it for the documentation site, and another small example.\n\nThe base information for additional theming is\n- Updating/Modifying Theme\n- mixin react-md-theme-everything\nIn my documentation site, I make it so each user can have their own theme applied after viewing the ThemeBuilder, making a change, and having the \"Save for future visits\" checkbox checked. The way the theme builder works is to create an additional link tag with the current theme as a filename. So setting primary-color: teal, seconary-color: pink, hue: 200 from that page would create a link like:\n<link id=\"custom-theme-styles\" rel=\"stylesheet\" href=\"/themes/teal-pink-200.css\">\nwhich would then compile using this route handler which will compile a new stylesheet with the provided theme variables. Here is how it is compiled. In dev mode, it will always re-compile each time the route is hit while in production it will return the css file with express.static (or nginx) if it exists, otherwise compile the css, create the new css file, and then send the css file.\nFrom there, I add a class to the html tag named \"custom-theme\" so that the custom theme will override all the defaults.\nMy use case is probably a bit easier than multiple themes on the same page, but you should be able to use the same idea with the react-md-theme-everything mixin's 4th argument for class names, so you could try doing something like:\nscss\n@include react-md-theme-everything($md-teal-500, $md-pink-a-200, false, 'theme-1');\n@include react-md-theme-everything($md-orange-500, $md-purple-a-400, false, 'theme-2');\n// ... any others\njsx\n<div>\n  <section className=\"theme-1\">\n    {... elements ...}\n  </section>\n  <section className=\"theme-2\">\n    {... elements ...}\n  </section>\n</div>\nEverything in the theme-1 section should have the a teal and pink theme while everything in the theme-2 section will be orange/purple.\nHowever, you might not need to theme every component, so it is useful to check out all the react-md-theme-COMPONENT_NAME mixins on the Themes SassDoc page. It's the only way that I know of right now. You could also try using css variables, but it'll basically be the same I think.. I think I'll update it so that setting the passwordIcon to null will no longer render the show password button.. Setting the passwordIcon to null will now correctly remove the password toggle button.. This one is a bit tricky since I personally think it should be invalid to have nested routes when using a mini drawer, but it's annoying to have a rule like that. It is currently possible to render whatever you want in the mini drawer right now to fix this weirdness by using the extractMini and miniDrawerChildren props.\nHere is a live example using these 2 props together to create a \"nicer\" mini drawer experience. Since this might not be what users want all the time, you'll probably want to update the custom rendering a bit.. Hmm, I could've sworn I patched that fix in.. Must've removed it during some of my date fixes that were implemented. Here is a function I've used in the past to remove the invisible characters that IE inserts into text fields:\njs\n/**\n * This will remove the invisible characters that IE inserts into text field values.\n * This makes it so that string.split('') will correctly do each character in the string\n * instead of including these hidden characters.\n */\nexport default function stripInvisibleCharacters(s) {\n  return s.replace(/\\u200e/g, '');\n}\nI'll look into patching this in though.. Oof. Thanks! Should be fixed now.. Oof, that's right. I think I'll add a paginationFormat prop (still thinking of a name) that will be a function that'll be:\nts\ndeclare function paginationFormat({ start: number, pageSize: number, total: number }): string\nso that you can manually create that string on your own. It'll have a default implementation of what it is now.. Unfortunately this is not allowed: https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type%3Dhidden)\nThis will most likely be fixed when I switch to a normal text input instead of a hidden one down the road. Right now this is intended behavior. The inline version is really just meant to be one of the permanent types without switching visibility. https://github.com/mlaursen/react-md/blob/a411c9f4a7be2b61fb3b17250d05654aa0a2471a/src/js/Drawers/Drawer.js#L765-L775\nI'll think about adding visibility changes to the inline version. Sorry, I'm doing the free version that only allows 550 hours uptime per month. So near the end of the month it might go down. If you have already created and signed up for the slack channel, you can always just go directly to slack instead at https://react-md.slack.com since the herokuapp is really only for automating invites.. Ahh. This is because The DataTable applies all remaining props onto the div or table element inside. The cards were the only components that were expected to have the expandable props used, so they were correctly removed before passing to the dom element. You can get around this error by doing:\ndiff\n+const Table = () => (\n+  <DataTable baseId=\"recipes-table\" indeterminate>\n+    <TableHeader>\n+      <TableRow>\n+        <TableColumn grow>Name</TableColumn>\n+        <TableColumn>Quantity</TableColumn>\n+      </TableRow>\n+    </TableHeader>\n+    <TableBody>\n+      <TableRow>\n+        <TableColumn>Test</TableColumn>\n+        <TableColumn>Test</TableColumn>\n+      </TableRow>\n+    </TableBody>\n+  </DataTable>\n+);\n+\n const Example = () => (\n   <Card tableCard>\n     <CardTitle title=\"Example\" />\n     <CardActions expander />\n+    <Table expandable />\n-    <DataTable baseId=\"recipes-table\" indeterminate expandable>\n-      <TableHeader>\n-        <TableRow>\n-          <TableColumn grow>Name</TableColumn>\n-          <TableColumn>Quantity</TableColumn>\n-        </TableRow>\n-      </TableHeader>\n-      <TableBody>\n-        <TableRow>\n-          <TableColumn>Test</TableColumn>\n-          <TableColumn>Test</TableColumn>\n-        </TableRow>\n-      </TableBody>\n-    </DataTable>\n     <CardActions expandable>\n       <Button secondary flat>\n         Delete Selected\n       </Button>\n     </CardActions>\n   </Card>\nso that the expandable prop isn't passed down to the DataTable component\n. This should be fixed now.. Oops. That's my bad. It should really be:\nMinimal Setup\ndiff\n mlaursen @ ~/code/react-md\n $ yarn\n+$ yarn build\n $ cd docs\n mlaursen @ ~/code/react-md/docs\n $ yarn\n $ cp .env.example .env\n $ cd ..\n mlaursen @ ~/code/react-md\n $ yarn dev\nI forgot that you need the es and lib folders built before the first time the server is run for the \"creating documentation\" scripts to be successful.. Should be updated now. Sorry about that!. Oof. I'll patch this some time tomorrow with what I have in my \"next\" branch.\ndiff\n-const hrefables = ['a', 'area'].map(tag => `${tag}[href],`).join('');\n-const disableables = ['button', 'input', 'textarea', 'select'].map(tag => `${tag}:not([disabled]),`).join('');\n-const FOCUSABLE_QUERY = `${hrefables}${disableables}*[tabIndex]`;\n+const BASE_FOCUSABLE_ELEMENTS = '[href],[tabindex]:not([tabindex=\"-1\"]),input:not([disabled]):not([type=\"hidden\"])';\n+const FOCUSABLE_QUERY = ['button', 'textarea', 'select']\n+  .reduce((queryString, element) => `${queryString},${element}:not([disabled])`, BASE_FOCUSABLE_ELEMENTS);\nwhich is a bit closer to what it should be for \"natural\" browser tab behavior.\nI'm a bit iffy about if I want to support filtering items out via class names, I think it would be better to disable or remove the tab index from other items. It probably doesn't hurt to add the css-filter feature in though. I'll think a bit more about it.. Sorry, ended up being a day late. Should be fixed and published now.\nRight now I did not add a filter ability, but I think in the next minor release I will make it so that you can provide a focusQuery yourself which will do what we want.. Right now, it is normally up to the developer to remove the .md-drawer-relative and .md-toolbar-relative class names as needed since the toolbars and drawers can appear anywhere on the page and might cause issues if some defaults were set. I think it's a good idea to add a built-in solution to automatically handle this though.. Thanks for the fix!. Thanks!. Thanks! I'll release this patch later today.. Should be released now. Sure thing, glad it fixed a bunch! I'm trying to update my release strategy so that PRs or bugfixes that I fix will go out the same day (or within 24 hours). I realized that there was no real benefit to waiting for a few bugs to be grouped together.\nBut this is mostly so that react-md doesn't go stagnant while I'm working on my internal fixes for v2.0.0. You can do something like this:\n```jsx\nimport React from 'react';\nimport { SelectField, GridList, DialogContainer } from 'react-md';\nconst ITEMS = ['', 'Book', 'Movie', 'TV', 'Music', 'Audiobook'];\nexport default class ConfirmationSelectField extends React.Component {\n  state = {\n    value: '',\n    tempValue: '',\n    confirmVisible: false,\n  };\nhandleFieldChange = (value) => {\n    // Set the \"tempValue\" to the previous state value so it can be reverted if the user presses cancel\n    // in the confirmation dialog\n    this.setState({ value, tempValue: this.state.value, confirmVisible: true });\n  };\nconfirm = () => {\n    // \"save\" the value by just making the \"tempValue\" equal to the state value\n    this.setState({ tempValue: this.state.value, confirmVisible: false });\n  };\ncancel = () => {\n    // revert to the last value of \"tempValue\"\n    this.setState({ value: this.state.tempValue, confirmVisible: false });\n  }\nrender() {\n    const { value, tempValue, confirmVisible } = this.state;\n    return (\n      \n\n\n\n\n          {Are you sure you want to change from \"${tempValue}\" to \"${value}\"?}\n        \n\n    );\n  }\n}\n```\nYou have to immediately set the value prop so that it can be \"reverted\" after the user hits cancel. Theres a \"bug\" that the select field's display label is set immediately when the change event handler is called instead of waiting for value prop changes. So I'll look into that.. I think I will implement this when I update the Date and Time pickers so that users can type the date/time as well instead of only using the picker.. Please see #733.. I think this is really a bug in IE11 and Edge < 14\n- https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8090208/\n- https://stackoverflow.com/a/18646112\nI think it would be best to make sure that the non-focusable elements are not focused before opening a dialog by using the method linked above since it will break the built-in keyboard support, but the Dialog also shouldn't be breaking your app. And there are probably use-cases that are only available for mouse/touch users.\nI'll merge this in, but might add a warning message in dev mode about this fix as well.. This should now be released as 1.4.1. I ended up not adding an additional message since I think I'll update the dialog to have better focus fallbacks at some point.. Yeah, that seems to be correct. It could probably change the undefined to iconEl.props.disabled, iconEl.props.primary, ...etc to fix that.. There should now be a prop exposed in the Tabs component to fix this named indicatorHeight which defaults to 2.. Hey! Sorry, I am going to think about this one a bit more before merging. This feels more like something that should be implemented within your code instead of react-md since it isn't part of the material design spec (at least from what I searched). I don't think it'll hurt to add it since there isn't really a nice way to have an additional separate clickable element in a ListItem right now, but I'd prefer if it was something I could find within the spec.\nThis could be solved in a different way by adding a new prop that will allow the children to be rendered outside of the AccessibleFakeButton so that stuff like this can be created more easily and wouldn't rely on the spec.\nAlso, here is a quick example of how you could make this feature with 22 lines of scss + and ~12 lines of JS/React.\nLet me think about this some more, but I think I will allow it to be merged since it doesn't hurt anything.. Great! I'm leaning a bit more towards the prop that will allow the children to be rendered before, inside, or after the fake button. Would you mind updating the PR for that? . You should be able to just run npm run lint for see these errors. But it looks like you might just need to import Divider and then add children back at line 570 to fix them. Great, thanks! I'll update the documentation a bit once it's merged, but I'll target this for 1.5 and try to release by Wednesday. Hmm, let me look into that. They should definitely be supported. This seems to be working to me: https://codepen.io/mlaursen03/pen/eLJddP?editors=0010. Thanks! This looks good to me. I'll release this in the next few days when I have a bit more stable internet connection (on vacation) . I didn't name anything a Popover, but the Layover or Menu should be an equivalent.. Ha, thanks :) Spelling is hard...\nI think merging into v1.4.x is good, I'll just immediately update master as well with these changes since it doesn't require a npm publish.. Unfortunately this isn't something I know a good way to fix and the documentation site warns that edit dialogs are a desktop interface.. Let me look into why travis is pulling from the next branch, but it looks good to me. Ahh ok, I see why now. Can you branch off of 1.4.x instead of 2.0.x and target 1.4.x?. Nevermind, this is a breaking change.. I have to redo my branches to get this merged.. Ok, so instead of targeting v2, would you mind targeting v1.5.x and then adding:\n```\nstatic propTypes = {\n  ...\n  indexOnClick: PropTypes.bool,\n  ..\n};\nstatic defaultProps = {\n  ..\n  indexOnClick: false,\n  ..\n};\nconst handleOnClick = (tabIndex, id, tabControlsId, tabChildren, event) => {\n    if (tab.props.onClick) {\n      tab.props.onClick(this.props.indexOnClick ? tabIndex : tabId, id, tabControlsId, tabChildren, event);\n    }\n}\n``\ninstead? It isn't super ideal, but it would allow the fix to be applied without needing to upgrade to v2 and would be fully backwards compatible. Otherwise I'll look into remaking my v2 branch in a few days since it is a dead branch right now and we can merge it into there instead.. Sorry, this was closed because I deleted and moved the release/2.0.x branch to be abandoned/release/2.0.x and created a new release/2.0.x branch.. This looks like it might be happening because you are using an icon that is not from react-md. I need to change this down the road to be a bit more configurable, but theButtoncomponent will clone aninheritprop into the icon to correctly inherit disabled styles as needed. So you could update your icon component to just be something like:const Icon = () => ;orconst Icon = ({ inherit, ...props }) => ;so that theinheritprop isn't passed down to the`.. Would it be possible to link to a codepen or any demo website that shows this issue?. Thank you, this looks great!\nYeah, I forgot to remove the dead branch of release/2.0.x since I am doing the new work in next, so I think the release/1.5.x branch is a good target.\nJust to make this \"fully backwards compatible\", would you mind adding a prop called swapToCalendar (or something better, naming is hard) that defaults to false. When it is enabled, it will add the new functionality that selecting a year will immediately swap to the calendar view in the date picker.. Looks good to me, thanks. I'll see if I can have this release out by end of day tomorrow . I think this would be a great addition, especially since I think it was referenced before (but I can't find the issue right now).\nI would happily accept a PR for this since I'm spending most of my time working on my rewrite and next branch, but otherwise I can try to get this out by the end of next week.. Oh, I think I ran into this problem before with my documentation server tests. I ended up using a setup script to mock this since some testing environments don't have matchMedia.\nhttps://github.com/mlaursen/react-md/blob/caeab56ea71be2ce446f30403b1e97020c931be3/docs/src/beforeTest.js#L12-L14\nhttps://github.com/mlaursen/react-md/blob/caeab56ea71be2ce446f30403b1e97020c931be3/src/js/Drawers/tests/Drawer.js\nI can update the testing page on the documentation site to add these cases.. See #555. I'll update the Readme to include this comparison as well. Looks good to me, thanks!. Looks good to me, thanks!. Looks good to me, thanks!. Hmm, I haven't worked with preact before, but this might be because I use ReactDOM.findDOMNode to set the containers which looks like returns null instead of the element in preact.. Thanks for looking into this!\nI'm not entirely sure if I want to apply a patch to fix this just for preact since I have mainly been focusing on just React itself and wanting to keep the scope low since I'm the only main developer. If this is an extreme blocker and can't wait until I finish the v2 branch, I can try adding the suggested setTimeout fix above. Otherwise I think I would like to hold off \"fixing\" this until the v2 branch where I stopped doing HOCs (and some hacky DOM node finding) for Inks and Tooltips.\n. Sorry, I actually think it's unreasonable for me to say wait for v2 branch now that I think about it.. It's probably a good few months away :( (first pass should be near the end of this month though).\nSo I'll look into doing the suggested fix above and your repo to see if that fixes it.. I haven't seen any problems by adding the setTimeout workaround for my existing react apps as well as the preact demo, so I'll release a patch with this change tonight. There ended up being some additional conflicts that I didn't find in my testing so I reverted the workaround until it can be resolved.. Looks good to me, thanks! I'll release this as 1.5.1. This looks good, thanks! I actually ended up fixing the docs/src/components/App/Footer/Contribute.jsx whitespace issue with the 1.5.1 released I just published since I noticed it there.\nAs for the inconsistencies.. \nMy initial thought was that if you set the filter prop to null, you will have a different service or something else that does the filtering and sorting. So when the input is focused for the first time, your data set should really be an empty list since you haven't typed anything. Once you start typing, the autocomplete data would start populating and be shown. If the user removes all text from the autocomplete, the data result should be empty now and no results should be shown.\nIf all this logic seems confusing as a user of this library, I think it would be better to make it consistent with the showUnfilteredData logic or I can try to update the documentation a bit to help clear up the reasoning for it. What do you think?. That makes sense. It's actually faulty logic in that example since I don't cancel the api calls when removing characters (deleting all characters at once does what I was hoping). Since my example doesn't even follow the flow, I agree it should be reworked.\nI'm a bit unsure of how to resolve the filter={null} stuff right now since I'd like to make it backwards compatible as well. Would you be good with me merging this PR and opening another issue to fix the filter={null} flows? I agree that the focus and blur behavior should be the same between filterable and unfilterable data.. I'm still a bit unsure of the best flow for this but I'll look into it some more since it really feels like an example coding problem instead of an Autocomplete problem. However, I think that in my v2 branch I'll update the Autocomplete so that it is possible to control the visibility of the menu so that problems like this can be worked-around (and hopefully not appear). Sorry about the Slack channel being down -- I'm running the auto-inviter on a Heroku instance that only gets 550 hours per-month. If you have already signed up, you can go directly to https://react-md.slack.com otherwise it should be back on the September 1st.\nIf you want to follow the docs, the way you can get the value from the text field is by using a React ref. So you could update your Dialog component to look something like this:\n```diff\n class Example extends React.Component {\n   constructor(props) {\n     super(props); \n\nthis.inputField = React.createRef();\n   }\n\nsave = () => {\n+    let value = '';\n+    if (this.inputField.current) {\n+     value = this.inputField.current.value;\n+    }\n // ... do logic\n\n}\nrender() {\n     return (\n       \n\n\n     );\n   }\n }\n```\nHowever, depending on how complex your form might be, it might be better to store the value in state and use the onChange prop with value instead\n```diff\n class Example extends React.Component {\n   constructor(props) {\n     super(props); \n\nthis.inputField = React.createRef();\n   }\n\nsave = () => {\n-   let value = '';\n-   if (this.inputField.current) {\n-    value = this.inputField.current.value;\n-   }\n+   const { value } = this.state;\n // ... do logic\n\n}\n\nhandleChange = (value) => {\nthis.setState({ value });\n}\n\nrender() {\n     return (\n       \n\n\n     );\n   }\n }\n```. Good catch, yeah I will add this.. Looks good to me, thanks!. Sorry, I had meant to do this last night but got caught up doing something else. Thanks for the fix!. This should be fixed with #797 . Thanks, looks good to me! I'll release this patch within the next 20 min.. Hey, sorry for taking a bit to respond. I think this looks great! I would definitely accept a PR for this feature since it'll help make it more customizable.\nI think I would like dateRenderer and getDateClassName instead of renderDate and calendarDateClassNameProvider just to be more in-sync with my naming paradigm in v2. The main documentation should auto-generate with the prop jsdoc you added, so otherwise it would just need to be updated to include the Typescript definition updates and ideally another example showcasing using the dateRenderer prop (can also use the other 3 new props as well if they tie in nicely).\nLet me know if you run into any problems with the dev environment or running the documentation server locally and I'll try to help!\n. Looks good to me, thanks! I'll release 1.7.0 tonight with these changes.. Looks like I didn't test the preact workaround enough. Sorry. \nSince it looks like I would have to do a few more workarounds to get preact working, so I think I'll revert that workaround and re-open #788 to find a better solution.. 1.7.1 should now be released with the Preact workaround removed (and SelectFields working again). Yeah, this was because the material design specs when I created this component required the counter to go past 20. I think it'll be good to add a new prop that will show the counter and pass the maxLength prop down. In v2, i'll make it so the counter isn't directly tied to the maxLength prop and instead a separate component or another prop.. Good call. I'll add this in today or tomorrow.\nDo you think it would be better to just update the functionality so that if the closeOnEsc prop is enabled, the escape key will always close the dialog or modal OR introduce a new prop closeModalOnEsc which would be a workaround for modals? I'm leaning more towards the first one.. Sorry for taking awhile to get to this PR. I think this is a good start, but there are some additional flows that should be added to help with the Snackbar hiding for keyboard users. I haven't looked too much into this part yet, but I'm guessing that it should use the same flow as the dialog role.\n\nthe focus will move into the Snackbar alert automatically if there is a button\nthe focus should return to the last focused element if the user presses escape (unsure about this part) or if the user doesn't press the button and the Snackbar auto-hides\n\nI'll think about the flows a bit more before merging to see where I want to go with it.. Yeah, I think an additional X button or something would be good for those situations but I don't think it should occur for every toast since it is possible just to have text only alerts. This might be something I fix fully in v2 with some of my component API changes/fixes to make it easier to render any element within this snackbar, but have a workaround until then.. Ok, so I'm thinking that until v2 we can do something like this.\nCan you update the SnackbarContainer to have a new prop autoFocusAction which will default to true and pass it down into the Snackbar as and apply it to the btnProps as autoFocus like you have above? This way we can have the autoFocus ability and the dev can add custom focus logic as needed when the action is pressed. Then add docgen to autoFocusAction to something like:\n\nWhen a toast has an action, it will automatically be focused when this prop is enabled. This will require your action onClick handler to correctly focus an element on the page once the toast is hidden. If this prop is disabled, it is recommended to add custom focus logic so that keyboard users can interact with the snackbar.\n?. My initial thought is updating the Snackbar and SnackbarContainer components to use the children prop as well as adding a children key to each toast so that the Snackbar would look like:\n\ndiff\n const {\n   className,\n   toast,\n   multiline,\n   id: propId,\n   fab,\n   autohide,\n   autohideTimeout,\n   leaveTimeout,\n   onDismiss,\n+  children: propChildren,\n   ...props\n } = this.props;\n-let { text, action } = toast;\n+let { text, action, children } = toast;\n```diff\n <Component\n   {...props}\n   id={id}\n   role={role}\n   className={cn('md-snackbar', {\n     'md-snackbar--multiline': multiline,\n     'md-snackbar--toast': !action,\n   }, className)}\n\n{text}\n   {action}\n   // this way you can specifically override default children prop on the SnackbarContainer by creating a toast with the children set to null\n+  {children !== null && (children || propChildren)}\n \n```\n\nThis way you can create a \"constant\" dismiss button in the snackbar by doing something like:\n```\nimport { Snackbar, Button } from 'react-md';\nconst Messages = props => (\n  \nclose\n\n);\n```\nor only add the dismiss button as needed by creating a toast like:\nconst toast = {\n  text: <span>This is some text.</span>\n  children: <Button icon onClick={onDismiss}><FontIcon>close</FontIcon></Button>,\n}\nI haven't tested how the base snackbar styles affects this yet though. Going to close this one in favor of #810 though. Sorry for the delay!\nThat's interesting. I think updating this to be PropTypes.object will be a good workaround then. I'd be happy to accept a PR. This should now be fixed in v1.7.2. This should now be fixed in v1.7.2. Hmm. I forgot what causes that. Have you run yarn build from the root directory before running docgen in the docs directory? However, this looks good to me; thanks!. Looks good to me, thanks! I'll merge this one after work since there seems to be some github service issues the last few hours and some people reported lost merges/branches. Yeah, I can update the demo to have some spacing. I think I accidentally removed it at some point.. Whoops. You should be able to fix that error by adding the activeElementFocus within this code block: https://github.com/mlaursen/react-md/blob/master/src/js/Dialogs/DialogContainer.js#L565-L582\nI normally do a ...props pattern due to laziness, so extracting it should fix it by not applying it directly to the Dialog component underneath.. Looks good to me, thanks! And yeah, I don't think this one requires tests\nI'll try to release this tonight after work . Yeap! Sorry about that; should be released now in v1.9.1. Looks good to me, thanks!\nIt's pretty interesting blur isn't triggered for non-inputs but focus still is. Learned something new :). Sorry for the delay -- looks good to me, thanks!. Thanks for the heads up! I think I might target this with my v2 release I'm working on instead of trying to fix it pre-v2. The newer lifecycle methods aren't that great IMO and have caused more issues when switching over; at least my experience at my work. I'm hoping the v2 release will fix the other underlying issues in this project as well, the only downside is the timeline :/. Yeah, I'm working on this for the v2 release here: SimpleListItem\nBut in the meantime, you can probably work around this by doing:\njsx\nconst SimpleListItem = props => (\n  <ListItem\n    {...props}\n    inkDisabled\n    role={null}\n    tabIndex={null}\n    activeClassName=\"\"\n    activeBoxClassName=\"\"\n  />\n);\nUnfortunately it won't remove the event listeners on the AccessibleFakeButton in the list item, but it should resemble a non-interactive item with that since it should no longer apply a hover class name, remove the button role, remove the tabIndex, and disable the ink effect.. Hey @startupgurukul . Unfortunately... not yet :( I'm hoping to release the alpha within 2-3 weeks which will release all the packages in this folder minus the forms, dev-utils, and documentation but with a layout package (current similar component is NavigationDrawer).\nI've been struggling getting \"useful\" documentation out of typescript, so generating my documentation site like I had before isn't really working which caused me to waste a lot of time trying different ways to generate it. So I'm going to try releasing these base packages (in alpha) without a documentation site and relying on documentation through IDEs since it's all with Typedoc right now. Once thats out there, I'll start working on the remaining packages and figure out how to create the documentation site from typedoc. I'll also update the #732 ticket with more info once I get closer to the first alpha release and some more detailed notes. Check out #358 or #733 - - this is normally the problem when font icons aren't appearing. Make sure to update line 219 as well:\njs\nlet areaStyle = style ? Object.assign({}, style) : {};\nThat style should be the inputStyle. Looks good otherwise!\n. this line should just be 'full-width': fullWidth The way it is now is always truthy\n. Lines 41-46 can be merged with lines 91-93 which will also solve the scss lint error\n. I think instead of extracting the width and height from the style prop, I think it might be better to go with something like:\n```\n  fixed: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number.isRequired,\n    }),\n  ]),\n/ render() /\n  let height;\n  let width;\n  if (typeof fixed !== 'boolean') {\n    height = fixed.height;\n    width = fixed.width;\n  }\n```\nMy reasoning is that I would like style to be consistent -- it will always apply all styles to the same thing. It also allows for the width and height to be specified in CSS instead of inline styles (the 56 from the height - 56 is really coming from $md-data-table-header-height).\nIt also is a bit more self-documenting specifying that you would like to have a fixed table.. I'd also like the fixed prop for this as well. I think it should be valid to have a responsive table but not fixed with the additional divs.\nThe DataTable component would also pass down a fixed context boolean for the TableCheckbox and TableColumn components to then render the additional divs as well.. I think I would prefer to have this extracted into a mixin as well eventually: react-md-data-tables-fixed or something.. Would you mind making this required and updating the ClockFace tests to include this prop? Or do an if-exists check before calling it?. Whoops... I thought I fixed all of them after you mentioned that about the TableColumn. Thanks! The link and example definitely clears up why it is not ideal.. Add documentation notes. Also closes #264 . Setting this back to an arrow function should fix the failed tests. Might've been an accidental change? . I think it would be better to do\nbtnProps = Object.assign(btnProps, action, {\n  className: cn(btnProps.className, action.className),\n  onClick: this._handleClick,\n});\ninstead of this. The main reason for merging them together was so that you could override any of the default props for the button. Maybe this should be min-width: 100% instead? When taking this away, do SelectField buttons still display correctly? (Span at least the full width of the toggle component). Where does the elementResizeDetector come from? Should it be the _resizeObserver instead?. Sorry for taking so long to get back to you.. How about doing:\n```\nlet childrenLeft;\nlet childrenRight;\n...\nif (action) {\n  Component = 'section';\n  text = {text};\nlet btnProps = {\n    flat: true,\n    onClick: this._handleClick,\n    label: action,\n    secondary: true,\n    className: 'md-btn--snackbar',\n  };\nif (typeof action !== 'string') {\n    const { childrenLeft: left, childrenRight: right, ...actionProps } = action;\n    childrenLeft = left;\n    childrenRight = right;\nbtnProps = { ...btnProps, ...actionProps, ...{ className: cn(btnProps.className, action.className), onClick: this._handleClick };\n}\n\n}\n...\n{childrenLeft}\n{text}\n{action}\n{childrenRight}\n```\ninstead? This would give a lot more control than just placing a button, but it wouldn't automatically bind the close action to the onClick.\nLet me know if that makes sense... Can you change this to optional and to React.ReactNode? One of the recent changes that have been added to selection controls is that either the label or the aria-label are required since there are some cases where a label shouldn't be displayed. A great example is the DataTable checkboxes. This is something that I need to make a better flow for.. You'd need to run docgen or the docgen:create commands again from the /docs folder to see those updates. I currently don't have hot-reloading set up for server code.. @dave-hillier Could you update the DropdownMenuComponent type to be exported as well? There was a PR a few patches ago to export all the component definitions. This PR looks good to me otherwise. Thanks!. The onBlur, onFocus and onKeyDown props should be redundant since they are inherited from Props (-> SharedLayoverProps -> BaseMenuProps).\nIt also looks like there commas instead of semi-colons for these two which broke the build:\nlib/Autocompletes/Autocomplete.d.ts(42,69): error TS1131: Property or signature expected.\nWould you mind fixing that and make the toolbar prop optional? . Would you mind updating this comment to be something like:\n\nBoolean if the active element should be focused after closing the dialog. It is generally recommended to keep this enabled so that keyboard users do not lose their place within the application after a dialog is closed. When this is set to false, you should implement your own focus logic\n\nJust so the side-effect is mentioned that you might lose keyboard focus. ",
    "daniel5151": "Any update on this?\nAlso, if not, can you give an example of the absolute positioning SCSS needed to get it kind of working?. ",
    "praneybehl": "I really love the elements you've designed. Great work!\n+1 for a stepper\n. Currently, the zDepth prop for the Paper element is validated like:\n``\nzDepth: (props, propName, component) => {\n      let err = PropTypes.number.isRequired(props, propName, component);\n      if(err) {\n        return err;\n      }\n      if(!isBetween(props[propName], 0, 5)) {\n        return new Error(The zDepth of 'Paper' must be a number between 0 and 5 but '${props[propName]}' was given.`);\n      }\n    },\n```\nFollowing the link in the error and further research suggests that the validation function needs to be chained:\n// You can chain any of the above with isRequired to make sure a warning\n    // is shown if the prop isn't provided.\n   requiredFunc: React.PropTypes.func.isRequired\nhttps://facebook.github.io/react/docs/reusable-components.html\n. Cheers mate!\n. Thanks mate\n. ",
    "stunaz": "Looking forward for this. ",
    "cdvv7788": "What's the status of this?. This one https://github.com/ahlechandre/mdl-stepper could work as a basis.. @mlaursen I could give it a try using the above suggestion as a basis, but I am just getting started with react.. ",
    "neorman": "Any updates on this component? I could really use this in our project, we recently moved from material-ui to react-md but I realized there is no stepper in react-md so I am looking for a third-party solution  @mlaursen . ",
    "Laurelin67": "+1. You're welcome. ",
    "tomasescamez": "+1. Oh, fixed! Thanks @c0b41 . ",
    "carlosforero": "This issue should be in the documentation repository: https://github.com/mlaursen/react-md-docs.\nThe new one https://github.com/mlaursen/react-md-docs/issues/1\n. About:\n- Enable tabbing through items\nI think the navigation through the items should be only with up/down arrows. Because the Tab key is to navigate through entire Field controls, and the List Items belongs to the entire SelectField control. Therefore the Tab key in SelectField should be as an Enter key but navigating to the next entire control in the form.\nI know that the list of items is rendering with a Menu and ListItem controls inside, so when the ListItem is for the purpose of a static menu, pressing the tab should capture the focus of the menu item. So, I think the solution could be a true/false property in ListItem, called for example: \"tabstop\".\n. Currently there are className which applies to the Input and containerClassName which applies to the container.\nI think should be similar with style. Making explicit the style property for the Input and adding a containerStyle property. What do you think?\n. Good, I can prepare a PR tomorrow (sunday) night.\n. That's ok. Let me fix it and send a PR again.\n. I thought Slack allowed to create a public group, but only is possible to create a solution using the Slack API. There is an app https://github.com/outsideris/slack-invite-automation, but needs hosting and configuration.\nAn alternative is to send Slack invitations to active contributors. Other alternative is https://fleep.io which allows to create a chat group with a public url.\n. Yes, I think is a great idea to start working with tests. I've not worked with Jest, but I think is a good idea since it is used by the React team https://facebook.github.io/react/docs/test-utils.html.\nDo you think is good idea to add a ticket for each component test, or is better, from now on, to create tests for each code modified or created?\n. @mlaursen I've opened the PR https://github.com/mlaursen/react-md/pull/77.\nThe Travis Build failed, but I think the problem is not related to the new code.\n. @mlaursen Fixed.\n. @mlaursen I didn't see your comments. Let me fix it.\n. @mlaursen everything is ok now.\n. Commit fixed:\nonFocus was alphabetically sorted in line 206.\nFixed other issues in lines 219 and 242.\n. ",
    "gutenye": "@mlaursen :+1: \n. Can you provide an example: how to use it?\n. Actually, I want to use it in browser, for testing and learning purpose without create a whole new project.\nFor example, use React in a single html file.\n``` html\n<!DOCTYPE html>\n\n\n\n\n\n\n\n    class App extends React.Component {\n      render() {\n        return <div>hello</div>\n      }\n    }</p>\n<pre><code>ReactDOM.render(&lt;App /&gt;, document.querySelector(\"#app\"))\n</code></pre>\n<p>\n\n```\nI think react use webpack to generate one single umd dist file.\n. It's working. Thank you very much.\nI use babel 5, and they have discussed about supporting 'text/babel' type in babel-standalone\n. @mlaursen\nThanks, the docs are very helpful.\nI've made it working by remove resolve-url-loader, now my config is \n{\n  module:  {\n    loaders: [\n      { test: /\\.scss$/, loader: 'style!css!sass' }\n    ]\n  }\n}\n. Thanks, I'll look into them.\n. ",
    "joeblew99": "Thanks , that's really thorough.\nI can try this out myself from the sounds of it. I will be amazed if, for example, the date time picker  works in diff locales.\n. ",
    "grimunit": "I've been using both formsy-react and formsy-material-ui for forms and it seems to be working pretty good so far. Tons of hooks into all the different validation use cases with really good documentation.\n. Awesome I got everything working now, knowing about that repo is super helpful thank you.\n. ",
    "jrop": "For sure, created PR #118 that applies this change to release/0.3.x. I'll close this PR in favor of that one.\n. ",
    "vinaypuppal": "Checkout here:\n https://github.com/mlaursen/react-md/blob/3f8330b978f8b796f5bd60f2624c331614e70cde/src/scss/components/_cards.scss#L11-L13\n. ",
    "albenik": "@mlaursen I my case tabs represents sections which config loads dynamicaly, so it is possible to recieve only single section in some cases.\nOf course I can add some code and won't use tabs if only one section recieved. But it will be nice if I can avoid it.\n. @mlaursen Sorry, my mistake: LEFT margins wrong, not right.\n\n. One more example\nFor example I have already loaded menuItems\njsx\nredner() {\n    return (\n        <SelectField\n            value={this.state.selected_value}\n            itemLabel=\"name\"\n            menuItems={[\n                {value: 1, name: 'One'},\n                {value: 2, name: 'Two'}\n            ]}\n        />\n    )\n}\nThen I recieved by ajax \njson\n{\n    \"select_field_value\": 2\n}\nHow can I set appropriate selection in SelectField?\nNow as I understood I have to traverse menuItems to find the name of menu item with value = 2 and then setState with found item name.\nBecause if I simple call setState({selected_value: 2}) I will have wrong result.\n. ",
    "aleksey-mukho": "Good Look. Thank for you job!)\n. ",
    "jdhodges27": "If you do not like these logos we can of course redo :) \n. ",
    "frol": "Travis was broken before my PR:\n$ gem install sass scss_lint\nFetching: sass-3.4.22.gem (100%)\nSuccessfully installed sass-3.4.22\nFetching: scss_lint-0.50.3.gem (100%)\nERROR:  Error installing scss_lint:\n    scss_lint requires Ruby version >= 2.\n1 gem installed\nThe command \"gem install sass scss_lint\" failed and exited with 1 during .\n. Your example with no changes (actually I have fixed a typo in import .. form .., which should have been from, and removed the Head) reproduces the issue; here is the console log:\nWarning: getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\nWarning: getInitialState was defined on ReactTransitionGroup, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\n<div data-reactid=\"4\"></div>\nUncaught Error: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded\n. @mlaursen Thank you for your help! I think, it is not React-MD bug, so I will close this issue, but if you have an idea of what and how this can be fixed, you are welcome to the new bug I have opened on Next.js: https://github.com/zeit/next.js/issues/204\n. Yes, it is updated now! Thank you!\n. I am new to this whole new JS world, so I appreciate your help, and I hope I don't bother you too much.\n. Yep, it is working now!\nHeads up: Please, fix the UMD example in the docs to include the closing </script> for the last chunk of code.\n. Thank you!. That makes sense to me. I will be happy with any solution you come up with, I trust you!. I think, it is a feature, even though it is small (yet very useful for me). I am just prototyping my app, so I can wait for a proper fix released with the next update. Thank you!). I have succeeded in hacking this in pure HTML and CSS using React-MD CSS and React-MD HTML with minor changes and I believe it doesn't break anything!\nqq.html.zip\nI took the generated HTML from React-MD documentation examples using Chrome inspector and did the following changes:\n\nadded  3 div wrappers:\nhorizontal scrolling wrapper\ncontainer helper with padding-top placeholder for the header\nvertical scrolling wrapper\nadded <div>'s to the <th></th> copying the titles (i.e. <th>Title</th> -> <th>Title <div>Title</div></th>)\nadded some CSS\n\nNOTE: I have also patched the <td class=\"md-table-checkbox\"> in <thead> as I believe it should be <th> (not td).\nNOTE: Most of the CSS and HTML patches are originated from the stackoverflow answer I posted in my first message.. This is implemented in #318, so I am closing this.. @mlaursen I agree with all your comments, but I fear I won't be able to move this further as I feel like I introduce bad practices here (I am still more on the backend side of things).\n\nit bothers me a little that the vertical scrollbar scrolls with the table\n\nYeah, it is annoying, but I don't know any workaround to this but a custom scrollbar.. > Pros\n\n\nscrollbar sticks with table correctly\n\n\nIf you compare to my solution, then I must say that the vertical scrollbar works just fine when there is no horizontal overflow.. FYI, There is react-scroll-sync. It is not an ideal solution, but it is worth keeping it in mind.. There are some related projects which might be used as a source of ideas:\n\nhttps://github.com/nteract/nteract/pull/1534\n  \nhttps://bvaughn.github.io/react-virtualized/#/components/MultiGrid\nhttps://github.com/schrodinger/fixed-data-table-2. I have tried setting it to 'desktop' before I submitted this issue. It didn't help :(. @mlaursen Great news! Thank you!\n\nBy the way, what is the current state of 1.1.x? Is it stable enough to be published as \"beta\"?. Yay! Thank you for your great work! Reach-MD is the best!. I just want to confirm that the fix works like a charm using the latest release/1.0.x branch. Thank you!. Does the documentation site use React-MD 1.1.x? The FAB works fine with 1.0.x, but behaves like presented on the screenshot with React-MD 1.1.0-alpha-7 (I don't have an opportunity to check it with the latest alpha release now, but alpha-7 was the latest at the time of reporting). OK, I figured the root cause: I include material-icons-fontface.css AFTER the React-MD style sheets, and .material-icons class overrides the font-size. If I swap the <link> tags so Material icons style sheets are included BEFORE the React-MD ones, the issue goes away.\nReact-MD 1.0.x doesn't change the size of the FAB button based on the screen size, which is why it works fine there.\nI am not sure I like the idea of importing fonts before React-MD styles, but I can live with it. Feel free to close the issue if there is nothing you can do about it.. 56 is the height of the header... I have no idea on how to avoid this hardcoding.. ",
    "ofallante": "https://react-md.mlaursen.com/components/chips. ",
    "GeorgeLolos": "I see. The version is 0.3.7. Ok so the React version is 15.4.0\nThere's no href on the button and I just noticed that on my first comment the markdown of github messed it up. What I tried to say is that the onClick event is bound to the \" < i >\" element rather than the button element\nand this is my output \n```\nClicked! favorite\nClicked! favorite\nClicked! favorite\n```. Great, thanks a lot! Keep it up \ud83d\ude03 . ",
    "tcrognon": "@mlaursen Instead of adding and maintaining a definition file, if you're open to having this project refactored to TypeScript, I'm willing to do it. Let me know what you think and I'll fork and refactor one of the components as an example.. That's correct, react-md build process compiles from typescript to javascript. There's a compilation flag called \"declaration\" for automatically generating a .d.ts file. So there's still a declaration file, you just don't have to create and maintain it manually.\nAlso, typescript support jsdoc, and that gets put in the declaration file as well. Would be great to see all the thorough documentation you've made for react-md props in my VS Code intellisense without anyone having to do any work to duplicate it and keep it up to date.. Hm good questions.\n1) Interfaces don't get transformed to PropTypes. You don't get runtime PropTypes checking with typescript. This is fine for typescript consumers of react-md because you get compile-time checking, but not for js consumers. I'll see if I can find a solution, otherwise we'd have to have both an interface and PropTypes for each component.\n2) Probably. Maybe there's a bridge out there, I'll look into it.\nI'll fork and start with Autocomplete to see how much of an undertaking this will be.. ",
    "maxcan": "Whats the status of this? I see a branch from december.  I'd really love to switch from material-ui to react-md and this is a huge part of that decision.. I'm happy to review a PR if you'd like. I haven't used react-md yet but\nbeen writing typescript for a while\nOn Tue, Jan 24, 2017 at 13:04 Mikkel Laursen notifications@github.com\nwrote:\n\nSo the branch I made in December is basically done. I just need to\nchange the basic Event types to the ReactXEvent thing and do some\nmore testing in a repo someone made for me since I don't use typescript. It\nwould be nice for someone to code review the types for me since I am\nguessing on everything \ud83e\udd37\u200d\u2642\ufe0f\nI had originally planned on releasing this with the 1.1.0 release to\nfollow SemVer. I could cheat and do 1.0.2 though.\nI haven't heard anything else about the Typescript rewrite, so I'm\nguessing it is too much effort.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/175#issuecomment-274938186,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAneTP2cdLkGzdoLrGgX-oFV2p6hkYkcks5rVmd6gaJpZM4LOh3E\n.\n. @mlaursen I just found this tool: https://www.npmjs.com/package/react-to-typescript-definitions and it seemed to work when I dumped every component in react-md.. I'll check the output.  If you're \nreact-md.d.ts.zip\n. Well, the other beauty of typescript is incremental typing so if this is something that gives 80% of the value for 5% of the effort, it could be worth it.  Can also use this as a starting point and edit as necessary.. @mlaursen  sorry for the slow reply.  I think thats basically correct, looking at the diff around these lines: https://github.com/mlaursen/react-md/compare/feature/TypeScript-Support#diff-f6a7a428afd2f7f3a28207a5f00f6334R28 .  Do you think that branch is good to merge?  It will be easier to spot issues once I'm using it. \n\nIf its not ready but you do want to get it merged eventually, i can start using that branch.  I just hate to do that if its not going to get merged.. @mlaursen got the original feature/Typescript-support branch working yesterday and it looks pretty good.  The only issue is that for things like TableRow the children property should be optional due to a typescript limitation.  I just saw that you put up two new branches today. I'll experiment with them.. FYI, I can't get the feature/Typescript-Support-Automation branch to build.  The npm run ts-defs command just outputs js.  When I add the -e flag to run babel-node -e --presets=es2015,react --plugins=syntax-async-functions,transform-regenerator ./src/scripts/makeTSDefs.js I get this:\n```\n\nbabel-node -e --presets=es2015,react --plugins=syntax-async-functions,transform-regenerator ./src/scripts/makeTSDefs.js\n\n/Users/max/development/github/react-md/node_modules/babel-cli/lib/_babel-node.js:94\n  code = code.trim();\n             ^\nTypeError: Cannot read property 'trim' of undefined\n    at _eval (/Users/max/development/github/react-md/node_modules/babel-cli/lib/_babel-node.js:94:14)\n    at Object. (/Users/max/development/github/react-md/node_modules/babel-cli/lib/_babel-node.js:123:16)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\n    at Module.runMain (module.js:605:10)\n    at run (bootstrap_node.js:422:7)\n    at startup (bootstrap_node.js:143:9)\n```. I'm back to using a fork of the original branch: https://github.com/maxcan/react-md/tree/feature/TypeScript-Support  I made some fixes here and there but also added the build products to the repo as it just made life much much easier.. also, node 7.6.0. Great! If that's the branch you're using I'll start writing PRs and issues\nagainst it.\nOn Mon, Feb 27, 2017 at 08:57 Mikkel Laursen notifications@github.com\nwrote:\n\nOk, cool. I think for 1.1.0, I'll stick with the\nfeature/Typescript-Support branch -- the automation will come later. My\ngoal is to release my react-md@next tag by Wednesday for a 1.1.0 preview\nwith typescript support. I'll merge in the couple of fixes I see on your\nbranch.\nUntil it is out, I'll also try to publish the documentation site at\nhttps://react-md.mlaursen.com/next or something.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/175#issuecomment-282780329,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAneTN3edUKa3Z-ULk0KE-V1-n4jBqKNks5rgwCJgaJpZM4LOh3E\n.\n. Awesome. I'll wait for the merge then work against the 110 branch. Having\nsaid that, it's a busy week so I might not get to do much at all\nOn Tue, Feb 28, 2017 at 09:57 Mikkel Laursen notifications@github.com\nwrote:\nAhh, just a side note... Once I merge it in, most of the work is going to\nbe back in the release/1.1.0 branch instead of the\nfeature/Typescript-Support. I ended up adding more features/components\nsince I started the typescript branch, and it'll be easier to maintain in\nthat branch\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/175#issuecomment-283115185,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAneTNE2pD-FSfPht36Qvf-als2qWr6zks5rhF_rgaJpZM4LOh3E\n.\n. but as i said, untested, it looks good though. May want to hold off on this.. I may be looking at the wrong version of the docs. Value prop. Can try empty string\nOn Tue, Mar 7, 2017 at 06:06 Mikkel Laursen notifications@github.com\nwrote:\nYeah, the same thing can be accomplished by providing floating to your\ntext field; it will make the label float. However, this might be something\nthat should be handled by my component.\nI have a couple of questions about the current flow:\n\nWhen you set the value to undefined, are you setting it by the value\n   prop or something else?\nHave you tried setting the value to the empty string or 0 instead of\n   undefined? (I think that might work out of the box)\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/280#issuecomment-284729394,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAneTNchXmQw2MXKkqaWWSCua64lWEKlks5rjWOggaJpZM4MVHc-\n.\n. The empty string approach worked. Its a bit hacky since it's a numeric field, but definitely fine for now.. I know its suboptimal for fields which require children, but this should be optional: children?: React.ReactNode.\n\nsee: https://github.com/Microsoft/TypeScript/issues/6471\notherwise you have to do something like:\njsx\n   <TableHeader children={null as any}>\n        <TableRow children={null as any}>\n            <TableColumn numeric>x</TableColumn>\n            <TableColumn numeric>y</TableColumn>\n        </TableRow>\n    </TableHeader>. see https://github.com/mlaursen/react-md/pull/267/files#diff-caa6a24748e2aef9acb285b4e88c3f13R8. https://github.com/mlaursen/react-md/pull/267/files#diff-caa6a24748e2aef9acb285b4e88c3f13R8. see https://github.com/mlaursen/react-md/pull/267/files#diff-caa6a24748e2aef9acb285b4e88c3f13R8. see https://github.com/mlaursen/react-md/pull/267/files#diff-caa6a24748e2aef9acb285b4e88c3f13R8. Can use Function for now, but at some point we should fill out the specific function type signature.  I would say to leave as is and improve in a future PR.. ",
    "seivan": "@mlaursen I tried it yesterday and it didn't quite work. I am sorry I can't give more feedback as of now.\nTslint couldn't find anything under import Button from 'react-md/lib/Buttons/Button'. ",
    "whodidthis": "Tried it and everything seems to work very nicely, at least using import { Button } from \"react-md\".\nNot sure if you can require use of some props but could be useful if buttons required either flat={true} or raised={true} or whatever else there is, since without it they look weird.. You were right, it does print an error in the console \ud83d\udc4d, I was just wondering if it could be a Typescript compiler error.\nOther than that this lib is great and by far the best out of React material libs \ud83e\udd47, it just looks like there are a few recent changes that haven't made it into typings yet, like ListItem prop visible.. Cool, tested it out.\nThis is an error that happens when typescript noImplicitAny is set to true:\nFailed to compile.\nError in node_modules\\react-md\\lib\\NavigationDrawers\\NavigationDrawer.d.ts\n(81,42): error TS7008: Member 'MobileDrawerTypesType' implicitly has an 'any' type.\nAnother thing I noted is ListItem's visible or isOpen being of type boolean. It's difficult to not pass a prop conditionally with react so maybe boolean | null could be better.\nThe slack invite page thingie is also broken (Application error).. ",
    "HyperMassive": "I am running into this too.\n\nError in node_modules/react-md/lib/NavigationDrawers/NavigationDrawer.d.ts\n(81,42): error TS7008: Member 'MobileDrawerTypesType' implicitly has an 'any' type.\n\nChanging line 81 of NavigationDrawer.d.ts:\nmobileDrawerType: MobileDrawerTypes, MobileDrawerTypesType, to:\nmobileDrawerType: MobileDrawerTypes | MobileDrawerTypesType,\nfixes the issue for me. else I have to set skipLibCheck to true in tsconfig.\nI'd be happy to raise a PR, if what i'm saying is correct. I am fairly new to typescript.\n. I also seem to be be having difficulty in using some props which reference a key.\neg: I am currently messing about with the DropdownMenu:\nwhenever I add a position prop of any Positions value: position={DropdownMenu.Positions.BELOW} like in the docs, I get the tsc error:\n\nType '\"below\"' is not assignable to type 'LayoverPositions | undefined'.\n\nHowever position={DropdownMenu.Positions} satisifes tsc, but that does not accomplish anything useful.\nI can change the LayoutPostions type of Layover.d.ts to:\nexport type LayoverPositions =   'tl' | 'tr' | 'bl' | 'br' | 'below';\nand it works, however I lose the key-value alias prop style (TOP_LEFT is 'tl',TOP_RIGHT is 'tr'... )\nHow do I use these restricted props in typescript?\n. ",
    "jrestall": "I'm also running into the issue with LayoutPositions above.\nTo fix a separate issue where MenuButton didn't support icons I had to change MenuButton.d.ts to allow Button properties on the MenuButton component.\nexport interface MenuButtonProps extends DropdownMenuProps {\nchanged to\nexport interface MenuButtonProps extends DropdownMenuProps, ButtonProps {\n. ",
    "noseglid": "Thanks so much for adding this. I've migrated mostly of our project to this version and created issues/PRs for everything we found!\nThanks again for your work on this!. I think the DrawerComponent should really take DrawerTypesType rather than DrawerTypes in its definition.. I don't think this is the full solution.\nFrom my understanding, I think what you've done there is to just declare that\n\nanything that implements e.g. the AutocompleteComponent interface, will have an object Positions, where the key TOP_LEFT will be tl\nThis is correct (e.g. Autocomplete has a Positions fields which holds all the layover position.\n\nBut the component doesn't expect an object as an argument, it expects a string.\nSo the type the component should accept should look something like this\nts\nexport type PositionsType = 'tl' | 'tr' | 'bl' | 'br' | 'below';\nwhich means \"one of these strings\".\nBecause as it is now\nts\nexport type LayoverPositions =  {\n  TOP_LEFT: 'tl',\n  TOP_RIGHT: 'tr',\n  BOTTOM_LEFT: 'bl',\n  BOTTOM_RIGHT: 'br',\n  BELOW: 'below'\n}\nmeans I must pass an object (which is that exact structure).\nThis doesn't work:\n\nBut this does:\n\nBut obviously the PropTypes validation will reject this object, so it doesn't really work.. Cool!\nI was just thinking about creating a PR for this, unless you want to do it yourself?. Also, I'm uncertain if you want this PR to master or release/1.1.x ?. No problem! I'm very happy that you decided to included Typescript typings, and will gladly help you out with any issues we find. We use react-md heavily and write all our applications in TypeScript, thus benefit greatly from this.. For the record, we've upgraded to react@16 with react-md@1.1.x and haven't seen any issues so far!. SGTM \ud83d\udc4d . Awesome \ud83d\udc4d . Thank's for the very quick turnaround on this! Fixed a lot of red squiggly lines in my editor :). ",
    "socmag": "It's awesome - way better.  Definitely thanks all round!. ",
    "timworx": "Hey @JustasPolis - Those are FontAwesome icons, not material-icons. material-icons are used with this syntax <FontIcon>home</FontIcon> (source)\nFor that sake of testing/verifying toss this in your index.html:\nhtml\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\">. Glad I could help! \nI also responded to your post on Gitter about create react app (I'm using it as well). Probably worth mentioning if it's related: selecting the text in an Autocomplete and pressing Delete has no affect. . Sorry, I mean selecting / highlighting all of the text in the field and then pressing delete does not delete all the text in it. While delete of a single character at a time does work.. Well, that one is on me for not checking in the examples first. It isn't working in my implementation, I'll have to go back and see why that is now.. ",
    "JustasPolis": "@timworx  Thanks ! Somehow missed that. . ",
    "daturon": "This happens because 1 % 0.01 = 0.00999999999999998. Pull request for fixing it https://github.com/mlaursen/react-md/pull/188. @CombatCode I would not trust such things ;). @mlaursen oh, sure! I have created a new one.. You are welcome!. On my iPhone 6S default as tap a text box or a label is not taken into focus. Such things make software for example in Swift.. ",
    "nbolten": "As of version 1.0.14, I'm getting a floating point warning for a discrete slider with these settings:\n<Slider\n  discrete\n  discreteTicks={0.5}\n  id='test'\n  label='Test'\n  defaultValue={8}\n  max={10}\n  step={0.5}\n  valuePrecision={1}\n/>\n\nThis is the warning I'm getting:\nwarning.js:36 Warning: Failed prop type: The 'defaultValue' prop on 'Slider' should be a number divisible by the 'step' prop. The current value is '7.000000000000001' and the 'step' is '0.5'.\nTo reproduce, I load the component and drag the slider around.. This issue is affecting me on v1.0.15. I set an app-level state for drawer visibility, pass it to Drawer as the visible prop, and set onVisibilityToggle to a method that sets state to whatever the visible value is.\nTo replicate: https://codepen.io/anon/pen/eWwdYP\nI'm not totally sure what is supposed to be done with onVisibilityToggle, but it's required if you set the visible prop. If I set it to a function that does nothing, everything appears to behave as expected - no default visibility, toggling still works, etc.\nAm I using the wrong pattern for onVisibilityToggle, or should the issue be reopened?. This issue is still occurring in v1.0.15. Reproducible example: https://codepen.io/anon/pen/PmrGpj\nEssentially, the whole slider seems to be 'shifted' by whatever the value of min is while being dragged, but then registers the accurate value after the drag stops. Specifically:\nWhile dragging:\n\nWhile the max is set to 10, the maximum value reported on the thumb is 8 (i.e. offset by the min, which is 2). This is the actual value passed to onChange, as well.\nThe min is set to 2, and the entire region from ~0% to ~20% of the slider is always 2, despite the fact that it should be increasing over that interval.\n\nAfter stopping dragging:\n\nThe reported value (both on the thumb and via onChange) jumps to the expected number. If the thumb is dropped at the rightmost point, onChange suddenly reports 10 and upon clicking the thumb again (without dragging), the thumb shows 10.\nIn the region between 0% and ~20%, dropping the thumb generates accurate values.. \n",
    "CombatCode": "Just curious, Number.EPSILON can be used there as a corrector? . Sure, hope is Ok now. ",
    "geohuz": "Yeah, It's indeed a problem with the react-md-grids. And if I even tried organize my import as below without any issue:\n```\n@import '~react-md/src/scss/react-md';\n@include react-md-transitions;\n@include react-md-buttons;\n@include react-md-file-inputs;\n@include react-md-grid;\n@include react-md-icons;\n@include react-md-text-fields;\n@include react-md-pickers;\n@include react-md-helpers-everything;\n@include react-md-colors;\n```. ",
    "gotrecillo": "Sorry for posting in a closed issue.\nThere is some info about this ?\nCan we help with anything ?. ",
    "fkhadra": "Hello,\nFirst of all thank you for your amazing work on that framework.\n\nProject Name : Les Passions de Peronnes\nAuthor : me\nLink : Les passions de peronnes\nDescription : Wine reseller. The work is still in progress, but you can already get an idea. All the others part of the application will be migrated to react-md.\n\n\nAll the back office is built using react-md. I can host a demo version if you are interested as well.\n. Hello @mlaursen,\nNow everything is built using react-md. Could you update the link https://bredariol.be/ instead of https://bredariol.be/product.\nThe old one redirects to the JSON API.\nThe app use mobx, react-router. I could check if I can open source the code. . Thanks appreciate !. You will also notice using the sample above that you need to click twice on previous.. That was an easy one, you  gave the solution :grin: !. @mlaursen the text-align property only affect the position of the bullet in my case.. Thanks for the input. Hi,\nI think this is due to the next react upgrade. React.PropTypes will be deprecated and replaced by a standalone package prop-types.\nYou can find the deprecation notice on the react documentation page.\n\nTo sum up \n```\nimport { PropTypes } from 'react';\n//need to be replaced by\nimport PropTypes  from 'prop-types';\n```\n. Hello,\nDid you include the material design icon font ?\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n. Hey @mikeni,\nI'm migrating the old code base written in Phpto react-md. It will be released this month. \nThe home page for the new version:\n\nWhat do you mean by fixed with container? Centered layout ?\n. Indeed. I created a simple container class for that:\n```css\n.container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n    box-sizing: border-box;\n}\n@media (min-width: 400px) {\n    .container {\n        width: 85%;\n        padding: 0;\n    }\n}\n@media (min-width: 550px) {\n    .container {\n        width: 80%;\n    }\n}\n```\nI did the following:\n```javascript\n\n\n\n\n\n\nUne D\u00e9couverte\n      <p className=\"md-font-light\">\n        Les Passions de P\u00e9ronnes proposent de vous faire d\u00e9couvrir des vins\n        de terroirs, des vins de vignerons. Ceux-ci \u00e9tant, pour la plupart,\n        rencontr\u00e9s lors de p\u00e9riples oeno-touristiques, nous racontant leurs\n        vins, leurs espoirs quelques fois tr\u00e8s fous.\n      </p>\n    </div>\n  </div>\n  <div className=\"md-cell md-cell--4\">\n    <div>\n      <div className=\"md-text-center home__icon\">\n        <FontIcon iconClassName=\"fa fa-group\"/>\n      </div>\n      <h2 className=\"md-text-center\">Une Exp\u00e9rience Partag\u00e9e</h2>\n      <p className=\"md-font-light\">\n        Choisir son vin pour la bonne occasion, une joie pour certains, un\n        casse-t\u00eate pour d\u2019autres. Nous vous conseillerons donc pour vos\n        accords \u201cmets et vins\u201d, mais aussi en fonction de vos go\u00fbts et de\n        votre palais.\n      </p>\n    </div>\n  </div>\n  <div className=\"md-cell md-cell--4\">\n    <div>\n      <div className=\"md-text-center home__icon\">\n        <FontIcon iconClassName=\"fa fa-thumbs-o-up\"/>\n      </div>\n      <h2 className=\"md-text-center\">Un commerce Equitable</h2>\n      <p className=\"md-font-light\">Nous trouvons un compromis ( le juste\n        prix ) entre le vigneron\n        devant vivre de sa production de vins et le client \u0153nophile voulant\n        acqu\u00e9rir \u201cson vin\u201d \u00e0 un prix raisonnable aupr\u00e8s du n\u00e9gociant.</p>\n    </div>\n  </div>\n</div>\n\n. I don't know too. \n@mlaursen what do you think if react-md had something likecss\n.md-grid--centered{\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n    box-sizing: border-box;\n}\n@media (min-width: 400px) {\n    .md-grid--centered{\n        width: 85%;\n        padding: 0;\n    }\n}\n@media (min-width: 550px) {\n    .md-grid--centered{\n        width: 80%;\n    }\n}\n```\nmd-grid--centered will act as a modifier for md-grid.\njavascript\n<div className=\"md-grid md-grid--centered\">\n//component\n</div>\nJust an idea. \nEdit: I can work on a PR is you want.\n. I forgot about md-text-container !\nThanks for the input. I'll start to think how to implement it.\n. ",
    "phlare": "Hi!   we've been super happy with react-md  and I'm looking to get into contributing a bit as well.   We've built our full product using it quite extensively on top of an Elixir/Phoenix API.\nnote: the marketing site that you see at the root of hostfully.com is NOT using react-md (yet) but the product demo at https://v2.hostfully.com/california-dreaming is.\nthanks again for all your work on this framwork. \n(we're also working on building an attributions page and would like to link back to you as well)\nProject Name:  Hostfully.com\nAuthor/Organization:  Hostfully\nLink: https://hostfully.com   (product demo: https://v2.hostfully.com/california-dreaming)\nDescription:  Hostfully is a content generation and guest communications platform built for vacation rental management companies. Using Hostfully, managers upload property-specific content and local recommendations that travelers can use while they are at the destination. Companies also use Hostfully as a channel for guest communication \u2013 instead of overloading guests with too many details about the property, managers direct their guests to well-structured content in each property\u2019s customized online guidebook \u2013 accessible on mobile, desktop, and in print.\n\n. unfortunately I'm using create-react-app so I can't seem to use the babel build.\nmaybe i should just go back to the individual import lines for now.. alas I can't figure out how to get it to work with my own setup, but in case anyone else is using hisapy's setup i put together a (i think) complete version of that switch statement:\n```javascript\nmodule.exports = function transformImports(importName) {\n  const reactMD = \"react-md/lib\";\nswitch (importName) {\n    // Autocompletes\n    case \"Autocomplete\":\n      return ${reactMD}/Autocompletes/${importName};\n    // Avatars\n    case \"Avatar\":\n      return ${reactMD}/Avatars/${importName};\n    // Badges\n    case \"Badge\":\n      return ${reactMD}/Badges/${importName};\n    // Bottom Navigations\n    case \"BottomNav\":\n    case \"BottomNavigation\":\n      return ${reactMD}/BottomNavigations/${importName};\n    // Buttons\n    case \"Button\":\n    case \"FlatButton\":\n    case \"FloatingButton\":\n    case \"IconButton\":\n    case \"RaisedButton\":\n      return ${reactMD}/Buttons/${importName};\n    // Cards\n    case \"Card\":\n    case \"CardActionOverlay\":\n    case \"CardActions\":\n    case \"CardExpander\":\n    case \"CardMedia\":\n    case \"CardText\":\n    case \"CardTitle\":\n    case \"CardTitleBlock\":\n      return ${reactMD}/Cards/${importName};\n    // Chips\n    case \"Chip\":\n      return ${reactMD}/Chips/${importName};\n    // DataTables\n    case \"DataTable\":\n    case \"DropdownMenuColumn\":\n    case \"EditDialog\":\n    case \"EditDialogColumn\":\n    case \"MenuButtonColumn\":\n    case \"SelectFieldColumn\":\n    case \"TableBody\":\n    case \"TableCardHeader\":\n    case \"TableCheckbox\":\n    case \"TableColumn\":\n    case \"TableFooter\":\n    case \"TableHeader\":\n    case \"TablePagination\":\n    case \"TableRow\":\n      return ${reactMD}/DataTables/${importName};\n    // Dialogs\n    case \"Dialog\":\n    case \"DialogContainer\":\n    case \"DialogFooter\":\n    case \"DialogTitle\":\n      return ${reactMD}/Dialogs/${importName};\n    // Dividers\n    case \"Divider\":\n      return ${reactMD}/Dividers/${importName};\n    // Drawers\n    case \"Drawer\":\n    case \"DrawerTypes\":\n    case \"Overlay\":\n      return ${reactMD}/Drawers/${importName};\n    // ExpansionPanels\n    case \"ExpansionList\":\n    case \"ExpansionPanel\":\n    case \"PanelContent\":\n      return ${reactMD}/ExpansionPanels/${importName};\n    // FABTransitions\n    case \"SpeedDial\":\n      return ${reactMD}/FABTransitions/${importName};\n    // File Inputs\n    case \"FileInput\":\n    case \"FileUpload\":\n      return ${reactMD}/FileInputs/${importName};\n    // Font Icons\n    case \"FontIcon\":\n      return ${reactMD}/FontIcons/${importName};\n    // Grids\n    case \"Cell\":\n    case \"Grid\":\n    case \"GridList\":\n      return ${reactMD}/Grids/${importName};\n    // Helpers\n    case \"AccessibleFakeButton\":\n    case \"AccessibleFakeInkedButton\":\n    case \"Collapse\":\n    case \"FocusContainer\":\n    case \"HorizontalAnchors\":\n    case \"IconSeperator\":\n    case \"Layover\":\n    case \"Portal\":\n    case \"Positions\":\n    case \"ResizeObserver\":\n    case \"VerticalAnchors\":\n    case \"anchorShape\":\n    case \"fixedToShape\":\n    case \"positionShape\":\n      return ${reactMD}/Helpers/${importName};\n    // Inks\n    case \"Ink\":\n    case \"InkContainer\":\n    case \"injectInk\":\n      return ${reactMD}/Inks/${importName};\n    // Lists\n    case \"List\":\n    case \"ListItem\":\n    case \"ListItemControl\":\n    case \"ListItemText\":\n    case \"TileAddon\":\n      return ${reactMD}/Lists/${importName};\n    // Media\n    case \"Media\":\n    case \"MediaOverlay\":\n      return ${reactMD}/Media/${importName};\n    // Menus\n    case \"DropdownMenu\":\n    case \"Menu\":\n    case \"MenuButton\":\n      return ${reactMD}/Menus/${importName};\n    // Navigation Drawers\n    case \"CloseButton\":\n    case \"JumpToContentLink\":\n    case \"MiniListItem\":\n    case \"NavigationDrawer\":\n      return ${reactMD}/NavigationDrawers/${importName};\n    // Papers\n    case \"Paper\":\n      return ${reactMD}/Papers/${importName};\n    // Pickers\n    case \"CalendarDate\":\n    case \"CalendarHeader\":\n    case \"CalendarMonth\":\n    case \"ClockFace\":\n    case \"ClockHand\":\n    case \"ClockTime\":\n    case \"DatePicker\":\n    case \"DatePickerCalendar\":\n    case \"DatePickerContainer\":\n    case \"DatePickerHeader\":\n    case \"PickerControl\":\n    case \"PickerFooter\":\n    case \"TimePeriods\":\n    case \"TimePicker\":\n    case \"TimePickerContainer\":\n    case \"TimePickerHeader\":\n    case \"Year\":\n    case \"YearPicker\":\n      return ${reactMD}/Pickers/${importName};\n    // Progress\n    case \"CircularProgress\":\n    case \"LinearProgress\":\n      return ${reactMD}/Progress/${importName};\n    // Select Fields\n    case \"SelectField\":\n    case \"SelectFieldInput\":\n    case \"SelectFieldToggle\":\n      return ${reactMD}/SelectFields/${importName};\n    // SelectionControls\n    case \"Checkbox\":\n    case \"Radio\":\n    case \"RadioGroup\":\n    case \"SelectionControl\":\n    case \"SelectionControlGroup\":\n    case \"Switch\":\n    case \"SwitchThumb\":\n    case \"SwitchTrack\":\n      return ${reactMD}/SelectionControls/${importName};\n    // Sidebars\n    case \"Sidebar\":\n      return ${reactMD}/Sidebars/${importName};\n    // Sliders\n    case \"DiscreteValue\":\n    case \"Slider\":\n    case \"SliderLabel\":\n    case \"Thumb\":\n    case \"ThumbMask\":\n    case \"Track\":\n    case \"TrackFill\":\n      return ${reactMD}/Sliders/${importName};\n    // Snackbars\n    case \"Snackbar\":\n    case \"SnackbarContainer\":\n      return ${reactMD}/Snackbars/${importName};\n    // Subheaders\n    case \"Subheader\":\n      return ${reactMD}/Subheaders/${importName};\n    // SVG Icons\n    case \"SVGIcon\":\n      return ${reactMD}/SVGIcons/${importName};\n    // Tabs\n    case \"MenuTab\":\n    case \"Tab\":\n    case \"TabIndicator\":\n    case \"TabOverflowButton\":\n    case \"TabPanel\":\n    case \"Tabs\":\n    case \"TabsContainer\":\n      return ${reactMD}/Tabs/${importName};\n    // Text Fields\n    case \"FloatingLabel\":\n    case \"InputField\":\n    case \"Message\":\n    case \"PasswordButton\":\n    case \"TextArea\":\n    case \"TextField\":\n    case \"TextFieldDivider\":\n    case \"TextFieldMessage\":\n      return ${reactMD}/TextFields/${importName};\n    // Toolbars\n    case \"Toolbar\":\n    case \"ToolbarTitle\":\n      return ${reactMD}/Toolbars/${importName};\n    // Tooltips\n    case \"Tooltip\":\n    case \"TooltipContainer\":\n    case \"Tooltipped\":\n    case \"injectTooltip\":\n      return ${reactMD}/Tooltips/${importName};\n    // constants\n    case \"CSSTransitionGroupTick\":\n    case \"additionalInkTriggerKeys\":\n    case \"keyCodes\":\n    case \"media\":\n      return ${reactMD}/constants/${importName};\n    default:\n      return ${reactMD}/${importName}s/${importName};\n  }\n};\n``. i think some of my issues described in #707 probably overlap with this. Looks great! Thanks. This issue was first discovered in developing our guidebook product at [hostfully](https://v2.hostfully.com/california-dreaming),  but I've worked around it by forcing the tabs into mobile mode 100% of the time using themobile` property of the Tabs component and adding some extra css to make the mobile version of the tabs work inside a container that isn't 100vw.  and some javascript love to bounce the slider a bit so it's obvious that there are more tabs.\nI'm actually pretty happy with my workaround and like it better than the paginated version anyway, so this certainly isn't a showstopper bug for me or anything, but I just wanted to get this issue raised properly.\ncheers. You can just use secondary prop. Related to #707\n\nOn Oct 22, 2018, at 7:09 AM, kaYcee notifications@github.com wrote:\nHi @mlaursen! I think I have found the source of this bug. in Tabs/Tabs.js, Line 307 it is checked whether the mobile property is set or not. When it is set, the overflowAtIndex-variable is computed. With the second tab active and the phone first rotated and then re-rotated, the resize event seems to be called numerous times, causing this bug. As a temporary solution I've applied mobile={true} to all my usages and this seems to circumvent the issue.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "lwansbrough": "@mlaursen Yup that might also be a solution!. @mlaursen Well I'm biased because wrapping solves my problem. :) Generally it's probably safe to follow specs, though from a design perspective - in my opinion - if you don't have an Avatar to the left of your title, then wrapping the subtitle seems good.. Great solution, didn't think you could control at that granularity. Thanks!. ",
    "jnaous": "Additionally, using UMD:\n```\n<!DOCTYPE html>\n\n\n\nTitle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  class App extends React.Component {\n    render() {\n      const { MenuButton, ListItem } = ReactMD;\n      return (\n        <MenuButton\n          id=\"vert-menu\"\n          icon\n          buttonChildren=\"more_vert\"\n          className=\"menu-example\"\n          tooltipLabel=\"Open some menu\"\n        >\n          <ListItem primaryText=\"Item One\" />\n          <ListItem primaryText=\"Item Two\" />\n          <ListItem primaryText=\"Item Three\" />\n          <ListItem primaryText=\"Item Four\" />\n        </MenuButton>\n      );\n    }\n  }</p>\n<p>ReactDOM.render(<App/>, document.getElementById('app'));\n\n\n\n```\nFails with:\nUncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\n    at invariant (react-dom.js:17870)\n    at ReactCompositeComponentWrapper.instantiateReactComponent [as _instantiateReactComponent] (react-dom.js:16018)\n    at ReactCompositeComponentWrapper.performInitialMount (react-dom.js:4833)\n    at ReactCompositeComponentWrapper.mountComponent (react-dom.js:4724)\n    at Object.mountComponent (react-dom.js:11532)\n    at ReactCompositeComponentWrapper.performInitialMount (react-dom.js:4837)\n    at ReactCompositeComponentWrapper.mountComponent (react-dom.js:4724)\n    at Object.mountComponent (react-dom.js:11532)\n    at mountComponentIntoNode (react-dom.js:9747)\n    at ReactReconcileTransaction.perform (react-dom.js:14714)\n. Doh, had to simulate a click.... ",
    "tvalletta": "Indeed it is. My bad. Thanks so much!. ",
    "jasonallen": "Thanks - I was able to make it work with the singleColor suggestion.. ",
    "irvinlim": "I think that 0 should be a valid form value, instead of using it to reset the field's value, as compared to null and ''. Besides, null and '' shouldn't be valid options when passing to menuItems either.\nJust created the PR as well. Could I also kindly check when would the 1.0.x branch be released on npm, together with quite a number of bugfixes?\nThank you! \ud83d\ude04 . Okay. Is it better to check the type of the child node if it matches List, if it is a single child? Because right now it is not immediately clear to users that a single child should be a List, and instead it looks pretty buggy when I first encountered it.\nOtherwise, perhaps we should update the docs first to inform users of this behaviour, until you find a better way around it.. ",
    "shashwattt-Pretlist": "The screen-shot attached is from a library called material-ui, the customization there is in form of style object, I guess we can change the shape accordingly.\nAnd yes, 2 digits is reasonable.\nI am still halfway getting acquainted react-md properties and customization, will try to create a PR with notification component as soon as I get my hands-on or are you already working ?? @mlaursen . ",
    "davidagee": "Ah, ok. It seems like there's a bug, how are you globally applying border-box? When I inspect any react-md components in Chrome, the calculated box-sizing value is content-box. When I apply a global override of html * { box-sizing: border-box; } the components are not rendered correctly (eg. buttons). I will take a look this evening to make sure it is not something related to my application and close this issue if that's the case.\n\n\n. ",
    "demj1206170": "https://react-md.mlaursen.com/components/data-tables  -> Table Pagination Example\nin this example ,and does data tables can save and restore item's selection state?. ",
    "adhesivewombat": "An inline picker could be a workaround.  Also it looks like there are some sass variables in the dialogue component $md-dialog-overlay-z-index and $md-dialog-full-page-z-index that might could be changed to be below the index of the picker.. Aha! I think you've already fixed this.  I updated to react-md 1.0.5 and it works as intended.  Nice!. So I think I might have found another edge case.  It looks like this has been fixed on the initial load of the component, but after updating the value or defaultValue prop, the states' calendarDate (and I think calendarTempDate too) doesn't update.  \nIt's very strange but it seems it doesn't work using this code \n<DatePicker\n    id=\"campaign-start-date\"\n    label=\"Start Date\"\n    onChange={(dateString) => onStartDateChange(dateString)}\n    minDate={new Date()}\n    maxDate={new Date(new Date(endDate).getTime() - MILLISECONDS_PER_DAY)}\n    defaultValue={startDate}\n    initialCalendarDate={startDate}\n    errorText={validateDateRange(startDate, endDate).message}\n    error={validateDateRange(startDate, endDate).error}\n/>\nbut it does work with this code\n<DatePicker\n    id=\"campaign-end-date\"\n    label=\"End Date\"\n    className=\"mw-campaign-date-picker mw-react-md-inline\"\n    onChange={(dateString) => onEndDateChange(dateString)}\n    minDate={new Date(new Date(startDate).getTime() + MILLISECONDS_PER_DAY)}\n    initialCalendarDate={endDate}\n    defaultValue={endDate}\n/>. Yep! That's the case. Good to know, I will make sure to use the value prop when I need control.. ",
    "8bitjoey": "Yeah, I think that could work (and we are going to use inline picker for now), but I'd still expect that the library works correctly out of the box.. I'm not very familiar with the internal structure of react-md, but renderNode and lastChild solution sounds good. What if we have a dialog in dialog (which is not something rare) and the latter one has a DatePicker? Thanks for the response!. ",
    "bsunderhus": "I'm having troubles with components that use Portal in react-md@1.0.13 when using with react-redux connect method @mlaursen .\nactually, for what I've tested, this issue is happening with any PureComponent that I use inside a Portal  component and that contains another Portal component. It seens that it's rendering into the body the nested Portal component that is inside a PureComponent.\nYou can easily test this by just adding react-redux connect method to a DatePicker inside a Dialog \n```javascript\nconst ConnectedDatePicker = connect()(() => )\nconst DialogTest = () => (\n  \n\n\n)\n```\nOr by creating a dummy PureCompoent\njavascript\nclass PurePicker extends PureComponent {\n  render () { return <DatePicker id=\"date\" label=\"Select date\"/> }\n}\nconst DialogTest = () => (\n  <Dialog visible modal aria-label=\"new-dialog\" id=\"new-dialog\">\n      <PurePicker/>\n  </Dialog>\n). Is this really solved in the v1.0.18 @mlaursen? I'm getting an invalid checksum also in a really similar problem involving NavigationDrawer with MINI.\n\n(client) Title<!-- react-empty: 8 -\n (server) Title<span data-reactid=\"8\n\n```jsx\nimport React, {PureComponent} from 'react'\nimport NavigationDrawer from 'react-md/lib/NavigationDrawers'\nclass Root extends PureComponent {\n  render () {\n    return \n\n\n  }\n}\n```. ",
    "MrXyfir": "SelectField / inputs\n\nI personally do not like passing things as children that should not be directly rendered in the component. \n\nI figured this was the case. The reason I would prefer this is because it would be similar to how the native select and option elements work. As you can probably tell most of my suggestions are related to making the components act how a normal html element or React element would work.\nSvgIcon\nWhen it comes to SVG icons, I actually don't know too much about them either. Up until now I've always used font icons but after reading an article somewhere about the benefits of SVG icons over font icons and how GitHub uses only SVG icons, it has been on my radar and my next project will probably utilize them. Once I get some experience with them I'll be able to give some proper suggestions.\nFrom what I know, I assume <symbol> with <use> is probably the best way to go. The symbols could be created elsewhere and be loaded in its own file while the component takes the symbol name <SvgIcon icon=\"icon-name\" />  as most likely its only required property.\nButton\nAs much as I'd like to see label moved to children, I understand that it would be a breaking change. As for icons, maybe the button could also accept those as children? This would obviously require even more changes.\njsx\n<Button raised primary>\n    <FontIcon ... />Submit<SvgIcon ... />\n</Button>\nThis is similar to how I would normally use an icon in a button with a normal button element.\njsx\n<button>\n    <i class=\"icon-submit\" />Submit\n</button>. # Button\nI like that idea.\nSelectField\nI also like that idea. I don't think it's necessary (although I don't think it'd be bad) to accept option elements and convert them to ListItems, so long as SelectField can accept menuItems as children.. I think it'd be nice to have support for both passing the SVG data in directly and also for using an existing SVG symbol.\nMaybe if a use or similar prop is there it'll use that value for a <use> element's xlink:href attribute.\njsx\nrender() {\n  return (\n    <svg ...>\n      <use xlink:href={this.props.use} ... />\n    </svg>\n  )\n}\nFor passing the data directly you can look into how Material-UI does it:\n\nhttp://www.material-ui.com/#/components/svg-icon\nhttps://github.com/callemall/material-ui/blob/master/src/SvgIcon/SvgIcon.js. Wrap it in an array.\n\njsx\n<Menu isOpen id=\"test-1\" onClose={ () => {} }>\n  {[<ListItem primaryText=\"Undo\" />]}\n</Menu>. That makes sense. I looked around the docs but must've missed forceUpdate().\nSo after some light searching I've found some things that might be useful in implementing dynamic sizing:\n\nDOMSubtreeModified Not a perfect solution, but probably the most simple for now.\ncss-element-queries' ResizeSensor class. I didn't look too deeply into this so I'm not sure if it'll work here.\nResizeObserver for the future once it's fully implemented in enough browsers.\nMore resources here.. \n",
    "stickfigure": "FWIW, I'd be perfectly happy with a compact data table that didn't support select fields and edit dialog columns. I just need information density for tabular data.. We experience this on OSX, latest Chrome, react-md 1.0.11. Here's a screenshot:\nhttp://take.ms/U6zeX. Ah, I had tried adding a div and it didn't work... but now I realize there was an extra div in between. Yep, duplicate.. Ah hah! This fixes my problem with SelectFields displaying very poorly (they look corrupted, missing most of the menu style). I've pinned the stylesheet in my app, but I would say this is a critical problem that will have subtle bad effects for pretty much every app built with react-md 1.0 :-(. I think you overestimate how quickly material-ui advances.... Do I understand this correctly: If I switch all my import { List } from 'react-md'; lines to import List from 'react-md/Lists/List' (which is what IntelliJ tries to import in typescript), I might be able to cut down on the bundle size and the time webpack takes to compile my app?\nThese 30s developer webpack builds are killing me. It used to be fast, but around the time react-md switched to rollup the build time went haywire.. Thanks everyone! I replaced all the \"react-md\" imports with specific file imports and my build went from 30+s to sub 10s, sometimes even 5s. MUCH better. It was tedious to do by hand in a large project but the IDE did most of the work.. This didn't seem to stop the active highlight but I overrode it (and the cursor) with CSS so I have something shippable now. I'll look forward to 2.0!  Thanks.. With some more experimentation, it seems to work fine as long as I force the dialog to be wide enough to accommodate the tab text. Maybe this is not a major issue.. ",
    "thaithcock": "Yes, that is right, something like that.. ",
    "absolutebica": "I am trying to use your example on the Nagivation drawer and my 'npm start' ends up failling on these\nimport LoremIpsum from 'components/LoremIpsum';\nimport inboxListItems from 'constants/inboxListItems'; \nIt tells me the module is not found.  . Ok. So I had installed react-md with NPM. Do I need to either git clone or download the package off github in order to access the docs?. Where should that \"shared\" folder be placed? I copied the shared folder into the react-md directory inside node_modules..because placing it at the root of the project, and changing the path reference in the IMPORT statement didn't work. \nNow I get an error that says\nError in ./~/react-md/src/shared/components/LoremIpsum.jsx\nModule parse failed: C:\\Users\\myname\\home\\www\\sandbox\\react-app\\node_modules\\react-md\\src\\shared\\components\\LoremIpsum.jsx Unexpected token (16:19)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (16:19)\n @ ./src/MyAwesomeComponent.js 39:18-70\n. Perfect, thanks!. ",
    "carlgieringer": "Hi @absolutebica, if you want to use these files for testing around, maybe just copy-paste their content into your project.  E.g., create a file named 'LoremIpsum.jsx' next to the file you want to use it in, and then use import LoremIpsum from './LoremIpsum'.  The leading ./ in the import statement should tell your transpiler to look in the same directory as the current file.. Is this related?  I am trying to conditionally hide a button until a user hovers over a card:\n<Button icon className={{hidden: !isOver}} >reply</Button>\nEven though this works, I get this warning (react-md@1.0.11):\nwarning.js?8a56:36 Warning: Failed prop type: Invalid prop `className` of type `object` supplied to `Button`, expected `string`.\n    in Button (created by ButtonTooltiped). Oh, right you are.  Thank you very much, Mikkel.. Good catch.  This would actually go away since the resize is handled inside _updateMultilineHeight.  Moot point now.  Sorry for missing this comment earlier.. ",
    "MichalWadowski": "Maybe for performance concerns helps library https://github.com/bvaughn/react-virtualized/ ?. Currently it's impossible to add some icons to action buttons. It would be nice if we could use own buttons - own components, not only parameters like primary/secondary or labels. Also it will be more flexible if we could define different number of action buttons.. If I provide own version of InputField / HTML input wrapper then yes, I can handle desired behavior, because componentDidUpdate() is called immediate after HTML tag update (after input render() call). Method componentDidUpdate() of TextField is called after own render(), but before InputField() render() and I can't fully controll behavior of input from TextField methods.\nI think that defining own sub-components for use by main components will provide more flexibility. In general, not only TextField. For example, another react library https://react-bootstrap.github.io/components.html allow to overwrite almost every default sub-component (by componentClass prop). If I need extra some feature not provided by default sub-component, then I can create own component provides this feature and replace defaults.. There is link with code example that shows the problem: http://codepen.io/MichalWadowski/pen/LWqMLp. I noticed, that problem exists on Firefox, desktop and mobile versions. On Chrome both mobile and desktop works correctly.. Yes, it looks fine now. Thanks!. Its looks like issue https://github.com/mlaursen/react-md/issues/306. There is my propose: https://github.com/MichalWadowski/react-md/commit/6fdca291268bcff7df962021a65f36464987338f. For now on desktop md-display-4 has extra scrolls. I see that new text doesn't fit into .md-text-container. Maybe for @media desktop the .md-display-4 should has overflow: visible?. ",
    "gamtiq": "\nWould you mind merging this into release/1.1.x instead of master?\n\nOk, I'll do it. I was unsure which branch should be used as a base (release/1.0.x or release/1.1.x) so I made changes in master.\n\nRight now it can only be done with the Ruby Sass and scss_lint.\n\nDo you plan migrating to Node-based linter?\n\nAbout the tests.. are you using npm to install the dependencies or yarn?\n\nI use npm.. I haven't used it but it seems that sass-lint has ability to disable or enable rules in source files.. Unfortunately current version of ECMAScript Internationalization API Specification (Ecma-402) does not have means to determine first day of week for a specified locale: see tc39/ecma402#6.. I've created weekstart library that contains function to get first day of week depending on locale. It can be used with firstDayOfWeek property until corresponding Ecma-402 API is not ready.. Ok, I will try to update the examples page.. I've added examples for Tooltipped component.\nBy the way it should be noted somewhere in docs/README.md that yarn build:dev should be run before yarn dev.. ",
    "ferpintado": "Thanks for your response.\nIt worked nicely.\n. ",
    "wdiechmann": "my bad 'cause you know:\ncopy/paste is every programmer's sword, and his curse ;)\nbut hey - thx for the js/template\nif you reckon there is anything I can assist with - do not hesitate to come forward! This monumental task you've taken upon you is quite an endeavour! . i'll be happy to bend over - testing it :)\nperhaps ListItem could be a base - and AccisslbleFakeInkButton and Draggable et al could be all children?\nbut I do see the predicament!. hmmm - I see that most components extends the PureComponent -\nAnother way out might be extending whatever components, where some event makes sense, from EventedComponent (which then itself would extend PureComponent - and add special properties to that component - something like\n```\n// this class does all kinds of crazy stuff like binding etc\nexport default class MDBaseComponent extends PureComponent {\n  _bind(...methods) {\n    methods.forEach((method) => this[method] = this[method].bind(this));\n  }\n}\nexport default class EventedComponent extends MDBaseComponent {\nconstructor(props) {\n  super(props);\n  this._bind('onDragStart','onDragEnd','onDragOver'); // and on and on and on :)\n}\n\nonDragStart = (e) => { this.props.onDragStart(e) }\nonDragEnd = (e) =>{ this.props.onDragEnd(e) }\nonDragOver = (e) =>{ this.props.onDragOver(e) }\n//\n// actually - every event could be 'assigned' ready for some \n// 'up the three' class to exploit it :)\n\n}\nexport default class ListItem extends EventedComponent {}\nexport default class OtherComponentLikeCardPerhaps extends EventedComponent {}\n```. I fail to see how the HOC will be able to output \n<li draggable=true onDragStart=something etc>\nwithout rewriting the ListItem component (which is advised against in the Facebook post ?\n. from http://materializecss.com/forms.html#input I remember that it is a \"CSS-thing\" - whether you could fix it that easy with react-md is beyond me (yet) :). ",
    "arnthor3": "First off, wonderful work on the project.\nSecond, is there any news on this issue? \nWould it make sense to use the resize observer polyfill? Found here \n. ",
    "hisapy": "I had a similar problem... <Tab /> content is fetched in after rendering the tabs container. The solution I found is just \njsx\n<TabsContainer slideStyle={{height: 'auto'}} >\n  // tabs and tab and other stuff here\n</TabsContainer>\nBefore fetching the data the size is just of the CircularProgress but as soon as I get the data the panel height adjusts automatically. Thanks @mlaursen. \nEDIT: I agree with you on that the picker shouldn't appear.\n. @davosolo I'd do it by opening the DatePicker only when clicking on the icon and add a text mask to interact with the TextField. \nFor the mask you might want to check https://github.com/text-mask/text-mask. I'm using it in a CurrencyField which is basically a react-md TextField.. No problem for me  ... The open with ENTER is something I wrote just in case of backward compatibility.\n:). The problem with ENTER is just when you're in a form, and usually on Desktops UI used by people that needs to quickly navigate/populate the form using the usual keys.. No problem then @mlaursen ... I understand and agree with the decision following the DOM behavior. I'm going to render a different component for my readOnly state. \nI believe you can close this issue.\nThanks.. I noticed that this is happening while helpOnFocus is true. So I believe the errorText is affected by the helpText behavior.. Hey guys, I'm struggling with my bundle size too. A temporary solution I found is to use babel-plugin-transform-imports ... that way you can use the namespaced imports and the plugin will take care of transforming them to deep imports considerably reducing the bundle size.\nFor my current components I'm using the following transform function which you might like to extend according to your needs:\n```javascript\nmodule.exports = function transformImports(importName) {\n  const reactMD = \"react-md/lib\";\nswitch (importName) {\n    // Cards\n    case \"CardActions\":\n    case \"CardText\":\n    case \"CardTitle\":\n      return ${reactMD}/Cards/${importName};\n// DataTables\ncase \"TableHeader\":\ncase \"TableCardHeader\":\ncase \"TableBody\":\ncase \"TableRow\":\ncase \"TableColumn\":\n  return `${reactMD}/DataTables/${importName}`;\n\n// Inks\ncase \"injectInk\":\n  return `${reactMD}/Inks/${importName}`;\n\n// Tabs\ncase \"TabsContainer\":\ncase \"Tabs\":\ncase \"Tab\":\n  return `${reactMD}/Tabs/${importName}`;\n\n// Lists\ncase \"ListItem\":\n  return `${reactMD}/Lists/${importName}`;\n\n// ExpansionPanels\ncase \"ExpansionList\":\n  return `${reactMD}/ExpansionPanels/${importName}`;\n\n// Dialogs\ncase \"DialogContainer\":\n  return `${reactMD}/Dialogs/${importName}`;\n\n// Pickers\ncase \"DatePicker\":\n  return `${reactMD}/Pickers/${importName}`;\n\n// Progress\ncase \"CircularProgress\":\n  return `${reactMD}/Progress/${importName}`;\n\n// SelectionControls\ncase \"Checkbox\":\n  return `${reactMD}/SelectionControls/${importName}`;\n\ndefault:\n  return `${reactMD}/${importName}s/${importName}`;\n\n}\n};\n``. I got to a point where waiting for re-compiling and reloading the page was a PITA due to large bundles. Now I'm back on track ... the good stuff about this is that once the tree-shaking stuff is fixed we can simply remove the plugin from our webpack config. yes @stickfigure. That trick with thebabel-plugin-transform-imports` and of course a good code splitting. In my case, in development my bundle size was ~8.5 MB due to source maps. Besides those large bundles I had some app modules inside them so every time I saved a file the bundle was compiled.\nls -lh node_modules/react-md/es/react-md.js gives me \n-rw-r--r--  1 hisa  staff   1.4M Dec  4 13:47 node_modules/react-md/es/react-md.js\nI think the react-md build should be an index file that exports each of the components and not a bundle containing all the lib's modules.\nA library with tree-shaking working ok is \"react-router\": \"^3.2.0\",. \njavascript\nimport { Route, IndexRoute } from \"react-router\";\nresults in a smaller bundle size than \njavascript\nimport Route from 'react-router/lib/Route';\nimport IndexRoute from 'react-router/lib/IndexRoute';\nWith the tricks mentioned my vendor-base.js bundle is now 5.91MB ... it is the largest in my output but it only contains vendor code so it doesn't need to be updated each time a save a file in my app.. IMHO I think that transforming imports is not actually tree-shaking, but overall, your lib looks good @Kaishiyoku . Cool @stickfigure ... I was doing that but since I'm a lazy developer I looked for a pluggable solution (like babel-plugin-lodash) so then I started writing my first babel plugin. Luckily, after some researching/reading I found the babel-plugin-transform-imports. Also, I remembered how tedious was rewriting the deep imports to namespaced imports when upgraded react-md to the version with tree-shaking\nI'd suggest you try the https://github.com/Kaishiyoku/webpack-react-md-import-transformer created by @Kaishiyoku . In the future, when the tree-shaking gets fixed you'll just have to unplug the the plugin to try tree-shaking again.. Hey devs .. \nI just wanted to post an update with perhaps valid info regarding this issue\n\nThe screenshot is from an app I've just created with:\n\nCRA 1.3.0\nreact-scripts 2.1.1\nreact-md 1.9.0\n\nThe only import from react-md is \njavascript\nimport { NavigationDrawer } from \"react-md\";\nSo we can confirm that the tree-shaking is still not working. Following are the stats of react-md in the bundle:\n\nStat size: 1.28 MB\nParsed size: 485.95 KB\nGzipped size: 97.05 KB\n\nLooking at this stats, imagine the reduction with can achieve with dead code elimination.\nSee webpack-bundle-analyzer Size definitions for more info. \n. No problem, thanks for letting me change those tests ... It would've taken me more time trying to write those tests without enzyme. By the way, I also believe that tests run faster using enzyme than with the react-dom/test-utils.. We're working on this error in https://github.com/mlaursen/react-md/issues/634 ... thanks for the screenshot and your timezone info . Hi @gyurist ... \n1. Is the DatePicker docs page working OK for you in the timezone where you found the bug? ... \n2. Is the bug appearing only when you set defaultValue ?, what about value?\nI might have introduced this bug in the fix mentioned by @mlaursen \n\ud83d\ude13 . Hello again @gyurist \nI tried to reproduce the bug in the Docs page as well as in my localhost but couldn't. I'm on GMT-3. I'll see if I can setup an environment on GMT+1 to reproduce it hopefully this weekend.\nIn the meantime, could you please provide us with some screenshots of the component and your react console?. I didn't have the time to fix this for timezones > 0.00 ... Hopefully, I'd be able to work on this next week after some deadlines I have to meet. \nAnyway, what happens if you manually provide the prop formatOptions={timeZone: 'UTC'} to your DatePicker ?. Please close this issue as is a duplicate of #634 . Duplicate of #634 ... can you please close it?. Hey devs,\nI've just found a recipe that you might want to try to test your SelectFields' onChange handlers, with enzyme. \nGiven that the signature of SelectField's onChange  is onChange(value, index, event, { id, name, value }),  we can't rely on enzyme's simulate(eventName, event), so instead of simulating the event, just call the handler directly:\n``javascript\n          wrapper.find(SelectField#the_select`).prop(\"onChange\")(\n            testValue, // a variable holding your test value\n            2, // the index of the option\n            {}, // the event, \n            { id: \"the_select\", value: testValue }\n          );\n      // update wrapper with change\n      wrapper.update()\n\n      // Now expect/assert that something changed !\n      expect(\n        wrapper.find(FORM_SELECTOR).state('the_select')\n      ).toEqual(testValue)\n\n```\nHave a nice year\n. This one is explained in the commit message. . I removed this because noticed that the prop wasn't actually used in the implementation. Could not make this appear in the PROP TYPES section of the Date Pickers docs. Please help with some guidance or instructions.. I think I tried all possible commands/scripts from the root dir and docs dir but I'm not sure. I'll take this into account for the next time :). ",
    "c0b41": "Set slideHeightProp and working wery well\njs\nslideHeightProp={'height'}. @mlaursen  https://www.useloom.com/share/b4c7e1abc10c4300a6d89a3622fb8937. @mlaursen no problem, i see ResizeObserver branch :). \ud83c\udf89 . already opened  this issue #344. @mim-Armand already support see v1.1.0-alpha-8 wait for next minor release. @turnerniles add this \nhtml \n<link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700%7CMaterial+Icons\" rel=\"stylesheet\">. @mlaursen Thanks :+1: . Yeah same problem, quick monkey patch\n.md-table-checkbox .md-selection-control-label{\n  display:block !important;\n}. Ref https://github.com/mlaursen/react-md/pull/546#issuecomment-332392070. https://github.com/mlaursen/react-md/issues/551#issuecomment-332653789. @mlaursen any status? or any tips?. @mlaursen this line never called, maybe it helps you https://github.com/mlaursen/react-md/blob/1c21aef83ab3a991dd30450e78109d5b49437566/src/js/DataTables/TablePagination.js#L362. Actualy this is not bug, firefox not support search icon. @dnyaneshbhalerao same. #358. @StarAzure  use this https://github.com/FormidableLabs/nuka-carousel. ",
    "artemukolov": "And what I must do now? That's weird behaviour. AmI right?. ",
    "jbetancur": "Just verified this is fixed. Thanks for the quick turnaround!. Thanks @mlaursen - just confirmed and works perfectly!. I am having the same issue but when using TextField with redux-form. Interestingly though, if I pull out maxLength this issues goes away\nconst InputField = ({ input, meta: { touched, error }, maxLength, ...others }) => (\n  <TextField\n    id={input.name}\n    error={touched && !!error}\n    errorText={error}\n    {...input}\n    {...others}\n  />\n);\n  . ## Redux-Form Workaround\nThis one has been a doozy, but I figured out a workaround for this when using redux-form. Hopefully, this helps folks that have this same issue.\nNote this only happens when using maxLength on a TextField and it does not happen on a textarea input (i.e. TextField with rows)\n```\nimport React, { PureComponent } from 'react';\nimport { TextField } from 'react-md';\n/ eslint-disable react/prop-types /\nclass InputField extends PureComponent {\n  constructor(props) {\n    super(props);\nthis.state = {\n  value: props.input.value,\n};\n\n}\nhandleInputChange = (value) => {\n    const { input: { onChange } } = this.props;\nthis.setState({ value });\n\nif (onChange) {\n  onChange(event);\n}\n\n}\nrender() {\n    const { input: { value, onChange, ...input }, meta: { touched, error }, ...others } = this.props;\nreturn (\n  <TextField\n    id={input.name}\n    error={touched && !!error}\n    errorText={error}\n    onChange={this.handleInputChange}\n    value={this.state.value}\n    {...input}\n    {...others}\n  />\n);\n\n}\n}\nexport default InputField;\n```\n. Yea, I really like the idea of wrapping it with an HOC. Seems like this would be flexible for most any use case.\n. ",
    "jmealo": "Great teamwork here guys. Quite the community. I feel even better about giving react-md a try.. ",
    "cia48621793": "Thank you, it's working now.. ",
    "rodgobbi": "This is really good, I always have doubt if a component will change size based on the media, with this option to make its size responsive I can know for sure, and style it personally if I want. And it is good to have in the documentation all the breakpoints of these responsive components, thus I can style personally the ones I want and they  will behave equally as the default responsive ones.\nThanks for the support, I'm really enjoying to use react-md.. ",
    "jlabarbera11": "Thanks for getting to this so quick. The codepen still seems broken though, the result that's shown doesn't match what was clicked. Also, it's still empty in the first render.. ",
    "pig800509": "same issue +1\n. ",
    "Rajat421": "@mlaursen thank you , there is problem with locales , now i have specified it explicitly ,working fine. ",
    "mkimberlin": "Thanks for the quick fix!. Thanks for the direction, @mlaursen.  I think that there is still a bit of an issue here, or maybe I'm misunderstanding the situation.  If no drawerType, mobileDrawerType or desktopDrawerType are defined then then shouldn't it behave the same way as if mobileDrawerType=TEMPORARY and desktopDrawerType=PERSISTENT?  Because, what I am seeing is that it completely respects defaultVisible=true if I set mobile and desktop drawer types to those defaults...but if I don't set them at all, or just set drawerType, then it ignores defaultVisible.. I will throw together another couple of codepens in a little while...headed into a meeting in just a sec.. Yeah, I agree.  It's not high priority.  I can totally get around it.\nBTW, I want to say thank you for this library.  It's easily the most complete and configurable MD component library that I've come across.  I've been extremely happy using it and I really appreciate all the work you've clearly put into it.  Further, the couple of times that I've run across an issue, you've been more responsive than I ever would have expected for someone working on this on their own.  My hat is off to you...great work.. ",
    "folivi": "hi,\nfrom what I see in devtools console, the errors seem to come from Card.js and Motion.js in the md package. @leedstyh just spent some time playing with the components. They seem to be working fine\n. ",
    "leedstyh": "We can simply wait for @mlaursen to fix it.\nThe warning is not serious right now, your app will work fine.. ",
    "joseds": "Hi, when will these changed be merged with the main branch? Currently my Jest snapshot tests are not working because of this. \nPlease take your time, I don't mean to be impatient, it's just for planning ahead. :smile: . Thanks for the information! . ",
    "strues": "Sorry! Must've been eslint auto fixing\nOn April 11, 2017 at 7:57:44 PM, Mikkel Laursen (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@mlaursen commented on this pull request.\nIn src/js/Autocompletes/Autocomplete.js(https://github.com/mlaursen/react-md/pull/328#discussion_r111051910):\n\n@@ -868,15 +869,15 @@ export default class Autocomplete extends PureComponent { } }; - _setField = (field) => { + _setField(field) {  \n\nSetting this back to an arrow function should fix the failed tests. Might've been an accidental change?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub(https://github.com/mlaursen/react-md/pull/328#pullrequestreview-32268073), or mute the thread(https://github.com/notifications/unsubscribe-auth/AF7kZXjNA51cZ2XawwCbNwLAEMywSrCdks5rvC-YgaJpZM4M62gL).\n\n. ",
    "jhealey5": "This fixed the error:\nERROR in ./~/react-addons-transition-group/index.js\nModule not found: Error: Can't resolve 'react/lib/ReactTransitionGroup' in...\nI followed the react-md installation page with no luck until I used this pull.. ",
    "mctep": "Hello! After that fix ajax autocomplete stops work after item select. Only refocus helps.\n\n. ",
    "fellmann": "This can be fixed by using \n.md-dialog.md-dialog--centered {\n  transform: translate(-50%, -50%);\n}\ninstead of transform: translate3d(-50%, -50%, 0).\nIs this a valid fix to include in all dialogs?\nThe problem is that for dialogs with height not divisable by 2, the top: 50% is calculated as .5 and subpixel rendering kicks in.\n. Sorry - not fixed, not it toggles between blurry and not blurry when you click or select text in the dialog.. ",
    "johnsoncode": "I get this issue as well. Any ideas when this will be fixed?. I guess I understand that. Do you have a suggestion to compress the warnings in the console or is there a different way I should be constructing my SelectField implementation? I think if I put a loop within the SelectField and return the items as children, I get an entirely different error, so not sure what's the best approach.. ",
    "solvemon": "I was struggling with this issue as well. \nReplacing the top/left + transform with flex alignments worked for me and removed all the blurriness:\n(My fix with SCSS)\n```scss\nmy-app {\n.md-dialog-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .md-dialog--centered {\n      transform: none;\n      left: unset;\n      top: unset;\n    }\n  }\n}\n```. ",
    "cfilipov": "This is happening for me as well when I use NavigationDrawer.DrawerTypes.PERSISTENT. Problem also goes away when switching to the default full drawer. This should easily reproducible since I'm basically using the react-router-v4 example code with the aforementioned drawerType.\nVersion\n\nReact 15.5.4\nReact-md 1.0.13\nReact-router 4.1.1. \n",
    "MaryCaroline": "I'm facing the same. Is there a solution or workaround for this issue? . ",
    "lext-7": "+1.\nWhy not render the menu components outside the buttons and make them position fixed ?. ",
    "idepp": "Still unable to pass Boolean in Checkbox Selection Controls. After a little bit of lookup, I found \nvalue?: number | string; in SelectionControl.d.ts file. I think this should be value?: number | string | boolean; for accepting boolean values to work. ",
    "benhunt29": "I found my problem, turns out I hadn't wrapped my overall content div in an \"md-cell\". Sorry for the non-issue!. I can confirm this happens with me for the TimePicker as well. @mlaursen yep, that's what I had in mind. @mlaursen great, thanks!. @mlaursen FYI this also goes the other way, if the initial time is set to AM, selecting a new time in PM results in Date with the date set to the previous day.\nDisplay Time: 1:15 AM, Date Obj: Thu Jul 14 2017 13:15:00 GMT-0500 (CDT)\nDisplay Time: 5:30 PM, Date Obj: Fri Jul 13 2017 17:30:00 GMT-0500 (CDT). @mlaursen looks perfect! Any idea on when that release will happen?. @mlaursen no problem, sounds good!. ",
    "mmmoli": "@daturon I dropped BEM thinking tbh when I started using this lib. I've found that it's not really necessary, and when it is, you can get away with StyledComponents instead. Here's a snippet from some code we have:\n```\nimport React from \"react\";\nimport {Link} from \"react-router\";\nimport styled from \"styled-components\";\nconst StyledLink = styled(Link)`\n    color: inherit;\n    text-decoration: none;\n&:hover {\n  text-decoration: underline;\n}\n\n`;\nconst Heading = styled.h2margin: 2em 0 0 !important;\nclass GroupHeading extends React.PureComponent {\n  render() {\n    return (\n      \n\n          {this.props.children}\n        \n\n    )\n  }\n}\nexport default GroupHeading\n```\nThere's not really much react-md about it, but where necessesary you can use this method to override styles. Here's another snippet:\nconst OkrPaper = styled(Paper)`\n  position: relative;\n  min-height: 60px;\n`. ",
    "intermundos": "@sniphpet thank you! Thats the missing piece :)\n. ",
    "baxford": "This is probably a different issue, but if I open the time picker example from the URL above in an ipad 2, I don't see any of the selection options when I click in a field. I also don't see any error output in the browser console. Is Ipad2 supported by react-md?. ",
    "Edgargmc": "I have the same error. You have an example of assigning an INITIALFOCUS, please. How I can use this option? thks... ",
    "yoshi415": "@Edgargmc Hey Edgar, sorry for the late reply. It's literally just adding an initialFocus prop with the id of whatever element you want to focus on.\n<Dialog\n  initialFocus=\"some-element-id\"\n/>. ",
    "luisrudge": "It's also unnecessary. I have a dialog that doesn't have any inputs, only text. Ideally, I shouldn't need to have to use initialFocus at all. Can we fix this? . Thanks \u2764\ufe0f . found the issue here: https://github.com/facebook/prop-types/issues/200\nit's because of the forwardRef thing.. it kinda messes up the component type.. @mlaursen what do you want to do with this? can I send a PR that adds PropTypes.object to the proptypes definition for those props?. I didn\u2019t. Thanks for merging . ",
    "TifaJ11": "yeah, the focusing logic was slowing down my dialog by a lot. mine also just had text, thanks for bringing that up. . ",
    "davosolo": "@mlaursen What if I want to give my users the alternative of manually enter the date/time? Is there a way to do that in the component?. Ok, I guess I'll try with @hisapy suggestion for now and see if I get it working with react-md correctly. Although I'm not sure on how to decouple the input text from the DatePicker component.\n@mlaursen Looks great what you have so far... seems very functional. Keep it up.\nThanks both of you for the answers!. @jojo-tutor No, they haven't. What I did was to create an onKeyDown callback for the SelectField to prevent that the item was populated with the selected item using the keyboard arrows or letters. That way the user shouldn't expect that when you go out of focus, the item should be selected.\nThis is obviously not a solution but I didn't have too much time to spend on it.. @jojo-tutor It might not be the best solution, but it looks like a great fix, I'll definitely have to give it a try. And I'm sure it can help others with the same problem as well. Thanks for sharing.. ",
    "fabiozaffani": "Hi @mlaursen , sorry by the delay, just saw your response but you fixed it already :)\nBtw, you are doing an amazing job with this library, having already used the react material ui library, google-md (now discontinued), react-toolbox and implementend my own I can confidently say that yours are, by far the best one around.\nYou even have deprecated notices in the documentation! Never saw that before in a one man only open source library.\nOnce again, congratz! . ",
    "Wolvereness": "I wouldn't feel bad about missing it. We encountered both problems, and only explained one. I assumed the fix would've been using the property instead of state when controlled (fixing both issues). Your solution was actually a very clever and direct for the particular problem described.. ",
    "amirburbea": "Actually can someone share a webpack config where they've used css-modules and allowed react-md to work (which is as far as I can tell incompatible with css-modules)\nI've tried\njs\ntest: /\\.scss$/,\nloader: ExtractTextPlugin.extract({\n  fallback: 'style-loader',\n  use: [\n    'css-loader?importLoaders=1&modules&localIdentName=[path]___[name]__[local]___[hash:base64:5]',\n    {\n      loader: 'postcss-loader',\n      options: {\n        plugins: [autoprefixer],\n        sourceMap: true,\n      },\n    },\n    'sass-loader',\n  ]\n}),\nbut then my configuration seems to screw up react-md\nif i avoid css-modules it of course works but I really wanted to use them.  Any help would be appreciated. is there an update? any simple ajax example would be neat. That's great - the sample works for me.\nWhen is 1.1 going official on npm? I'm constantly pulling new versions of\nyour package from GitHub, building them myself and running npm pack on\nthem. I need at least 1.1 because I'm using TypeScript\nOn Wed, Aug 2, 2017, 10:56 AM Mikkel Laursen notifications@github.com\nwrote:\n\nThis should be fixed now at https://react-md.next.mlaursen.com Sadly I\ncan't bring this back since this was my server re-write and isn't backwards\ncompatible for older versions of react-md.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/395#issuecomment-319716530,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACBnijpsbQUCnCi_g0XUHAjRY6_EtuhEks5sUJxIgaJpZM4Ntrip\n.\n. \n",
    "ikovic": "This is interesting to me to. I could not find an ideal (fully working and clean solution), but so far I managed to work with react-md and CSS modules by importing each module separately, like in docs.\nSolution from the first post also worked for me, but only after I removed that declaration from the :global scope in which I included all the react-md partials.. ",
    "dgollub": "Running into the same issue. We use zeit/next.js (version 6.0.3) with the @zeit/next-sass plugin to compile our SCSS into CSS. So far we have no good solution to fix this.\nNext.js uses webpack 3.10 (will likely upgrade to v4 soon) under the hood, and we use webpack's css-loader plugin with the zeit/next-sass plugin, which has an open issue regarding this as well: https://github.com/webpack-contrib/css-loader/issues/243. Just as an idea: maybe react-md could provide a mixin that outputs the @keyframe animations with and without the :global prefix. Wouldn't that work?. @mlaursen That looks like it should work, but I am actually not sure it will. We would need to test that.\nThe thing is that we include react-md's SCSS like this\n```\nhtml {\n  :global {\n    @import '~react-md/src/scss/react-md';\n$md-primary-color: $md-light-blue-500;\n$md-secondary-color: $md-light-blue-a-200;\n\n@include react-md-everything;\n\n@include react-md-theme-everything($md-blue-200, $md-blue-a-400, $md-light-theme, 'demo');\n // ....\n\n}\n}\n```\nAs you can see, that already has a :global { ... } wrapper around the react-md styles, therefore it should compile the @keyframes correctly, but it doesn't (hashes are appended to the keyframe names when they shouldn't).\nHowever, this little \"hack\" works and compiles correctly to a global @keyframe in the final CSS file: \n@keyframes :global(my-keyframe-name) { ... }\nSince this approach works I used it to copy all the @keyframes from react-md and included them that way in order to fix this short term for the project my team is working on. But it has the obvious downside of code duplication.\nA slightly better short term solution, which switched to shortly after, is this \n```\nhtml {\n  :global {\n    @import '~react-md/src/scss/react-md';\n$md-primary-color: $md-light-blue-500;\n$md-secondary-color: $md-light-blue-a-200;\n\n@include react-md-everything;\n\n@include react-md-theme-everything($md-blue-200, $md-blue-a-400, $md-light-theme, 'demo');\n // ....\n\n/*\n  @keyframes and animations are not properly compiled when :global is involved\n  There are open issues for this on\n\n  * react-md: https://github.com/mlaursen/react-md/issues/376\n  * webpack-contrib/css-loader: https://github.com/webpack-contrib/css-loader/issues/243\n\n  However, this :local workaround makes things work again. It is a bit of code duplication\n  effort, but unfortunately the best we can do right now until either of the issues above\n  are fixed.\n*/\n/* stylelint-disable selector-pseudo-class-no-unknown */\n.md-progress--circular-indeterminate :local {\n  animation-name: md-circular-progress;\n}\n\n.md-circular-progress-path--animated :local {\n  animation-name: md-circular-progress-dash;\n}\n\n.md-progress--linear-indeterminate :local ::before {\n  animation-name: md-linear-indeterminate;\n}\n\n.md-progress--linear-indeterminate :local ::after {\n  animation-name: md-linear-indeterminate-short;\n}\n\n.md-ink--pulsing :local {\n  animation-name: md-ink-pulse;\n}\n/* stylelint-enable selector-pseudo-class-no-unknown */\n\n}\n}\n```\nThis has the upside that it is less code duplication; there is still some, but at least I don't have to duplicate the actual keyframes any longer.\n. ",
    "Skysplit": "Thanks for lighting fast response! Nice to hear that.\nGreat job with this library!. @Ardhimas @mlaursen Most probably this bug is caused in combination with jest-environment-jsdom. Because by default fixedTo provides full window object, generating snapshot fails due to its size (component serialization to snapshot fails miserably).. It seems that update is on its way\nhttps://github.com/facebook/jest/pull/4750. I'm nowhere near to be good at CSS, but using flexbox sounds really good :D. ",
    "francesco-carrella": "Same issue here. ",
    "makslevental": "should i close this?. so you can see the classname directly \n\n. should i close this?. done. i don't know if it should be min-width: 100% (i don't know what the implication is) but SelectFields do still work fine. \n\n(pardon the gif compression). ",
    "ivmarcos": "I think is a good idea, considering how often this may be used. Till then, I'll make as suggested. Tks @mlaursen!. ",
    "marlomajor": "@mlaursen I can't get datepicker centered with the page and none of the above helps. Any idea what's going on?. ",
    "mvuherer": "Basically the calculation for the margin happens too early, maybe rethink all of the calculations that happen based on current view and usage, and move to positioning by parents or component its self. Thanks for the update!. ",
    "turnerniles": "@fabiozaffani I am confused how to change the right positioned drawer's width on mobile (don't want fullscreen at 1024px, would perfer 768px). Do you know how to override the width of the drawer on mobile without using !important?. @c0b41 thank you!!. ",
    "operolim": "Any updates?. ",
    "enugentdt": "Would it fit into this issue to request to be able to specify the exact width of the column (percent, px, etc.)? I.e. so we can have a super wide column, and then a tiny little one?. ",
    "chase": "I setup this little patched wrapper for when I use DatePicker to get around this issue:\n``` javascript\nimport React, { Component } from 'react';\nimport DatePicker from 'react-md/lib/Pickers/DatePickerContainer';\nimport isDateEqual from 'react-md/lib/utils/DateUtils/isDateEqual';\nclass DatePickerWrapper class Component {\n    constructor(props) {\n        super(props);\n        this.injectContainer = this.injectContainer.bind(this);\n    }\ninjectContainer(container) {\n    if (!container) return;\n    function componentWillReceiveProps(nextProps) {\n        let { value } = nextProps;\n        const { defaultValue } = this.props;\n        const { minDate, maxDate, initialCalendarDate } = nextProps;\n        const minEqual = isDateEqual(this.props.minDate, minDate);\n        const maxEqual = isDateEqual(this.props.maxDate, maxDate);\n        if (this.props.value !== value || !minEqual || !maxEqual) {\n            let { calendarDate } = this.state;\n            if (!!value) {\n                calendarDate = typeof value === 'string' ? new Date(value) : value;\n            } else if (defaultValue) {\n                calendarDate = typeof defaultValue === 'string' ? new Date(defaultValue) : defaultValue;\n                value = typeof defaultValue === 'string'\n                    ? defaultValue\n                    : DateTimeFormat(locales, formatOptions).format(defaultValue);\n            } else {\n                calendarDate = new Date();\n            }\n\n            calendarDate = this._validateDateRange(calendarDate, minDate, maxDate);\n\n            let calendarTempDate = calendarDate;\n            if (typeof initialCalendarDate !== 'undefined' && !value && !defaultValue) {\n                calendarTempDate = typeof initialCalendarDate === 'string'\n                    ? new Date(initialCalendarDate)\n                    : initialCalendarDate;\n                calendarDate = calendarTempDate;\n            } else if (calendarTempDate === null) {\n                calendarTempDate = new Date();\n                calendarDate = new Date();\n            }\n\n            if (!isDateEqual(this.state.calendarDate, calendarDate)) {\n                this.setState({ calendarDate, calendarTempDate });\n            }\n        }\n    }\n    this.dateContainer.componentWillReceiveProps = componentWillReceiveProps.bind(this.dateContainer);\n}\nrender() (\n    <DatePicker\n        {...this.props}\n        ref={this.injectContainer}\n    />\n);\n\n}\n```\nThis could be made into a proper patch, but the code is a bit ugly. Essentially, I took what was in the constructor and replaced the similar parts of componentWillReceiveProps in DatePickerContainer. I'm sure the correct thing to do would be to pull the common behavior out into a function and call it in both.. Thank you! I tend to ignore PropType warnings in really large codebases with legacy code, so I suppose that's on me. I'll be sure to pay attention in the future, even if it is just for accessibility features.. ",
    "spalladino": "Note that using a ListItemControl instead of a regular ListItem works, though a console error is logged:\nAutocomplete.js:145 Uncaught TypeError: Cannot read property \u2018toLowerCase\u2019 of undefined\n    at caseInsensitiveFilter. We have fixed the console error by inheriting from Autocomplete and patching the _handleClick method line 639 with the following condition:\nif (target.classList.contains('md-list-item') && target.parentNode.classList.contains('md-autocomplete-list')). ",
    "rosunshrestha": "I have the same problem. When I put rows props, pagination does not work. @mlaursen . ",
    "shrupa": "I have a similar requirement, I need to change the color of text in tabs but not able to do so. I'm unable to find anything similar in examples provided on github. Please advise.. ",
    "williegroovy": "Not sure if this would be considered hacky or not, but if you haven't already figured out how to make this work, allow me to share.\nconst navList = [\n   {\n      to: '/dashboard',\n      label: 'Home',\n      icon: 'home',\n      exact: true\n   },\n   {\n      to: '/dashboard/tables',\n      label: 'Tables',\n      icon: 'line_style',\n   },\n   {\n      to: '/dashboard/media',\n      label: 'Media',\n      icon: 'theaters',\n   }\n];\nNext I map over drawerNavItems like so:\n<NavigationDrawer\n        toolbarProminentTitle\n        toolbarTitle=\"Richardson Demo\"\n        navItems={navList.map(item => \n           <NavLink {...item} location={props.location} key={item.to} />))\nThat allows me to access location.pathname for use in comparing against the Links 'to' prop.\n```\nconst NavLink = (props) => {\n  let leftIcon;\n  if (props.icon) {\n    leftIcon = {props.icon};\n  }\nreturn (\n    \n)\n};\nexport default NavLink;\n```\n. Just poking through the slider component, it seems like the \"active\" slice of state is being toggled to false only when click click even occurs elsewhere. Not sure if loss of focus is the only time you want the thumb to lose the \"--active\" class. \nI also noticed that the \"maskedInk\" state is not being toggled true when dragging start, and then to false when it ends. I think it might be nice to set both the \"active\" and \"maskedInk\" slice of state when dragging starts, and possibly when the user clicks on a location to \"jump to a location\" quickly. \nProposed change would be:\nAs the thumb moves (drag or jump) it gains focus and should have \"active\" and \"maskedInk\" states toggled true. When the thumb stops moving (drag or jump) the \"active\" and \"maskedInk\" states toggle to false, and the slider goes back to its inactive state.\nhttps://material.io/guidelines/components/sliders.html#\n@mlaursen If that sounds like something you'd entertain for a pull-request, let me know. I'd be happy to help out with that.. After exploring this a little more, it appears to me that the slider is behaving as it should. Currently, when you select a sliders \"thumb\" it gains focus, then allows the user to use their arrow keys to change the value. Another important aspect to point out is using tab to or shift+tab to navigate through a grouping of sliders.\nWhat if we called setState({ active: false, maskedInk: false }); in the _handleDragEnd()\nTo me that feels like the functionality that @kladdad wanted without compromising the users ability to make adjustments with the arrow keys.\nYou can still tab through everything, but if you choose to drag the thumb, when the drag ends, the thumb shrinks. . ",
    "gpascale": "Thanks for this. I'm glad to hear it will be addressed in 1.1!. ",
    "JCofman": "answer copied from slack channel by mlaursen ->\nIt depends, do the subheaders need to be considered autocomplete items?\nYou can do either (I think)\nconst data = [{\n  primaryText: 'Some Text',\n  subheader: true,\n}, <Subheader primaryText=\"Some text2\" key=\"subheader\" />,\n];\nThe first one would only work if I used one of my utility functions behind the scenes to generate list items from a list of props/components. The second one would always work, but the subheader would not be selectable as an autocomplete item.. hi @mlaursen thank you for your answer and sorry for my late response. I actually don't get a big stack trace. The only thing i get is the following message SCRIPT5007: Unable to get property 'initiallyOpen' of undefined or null reference \nbundle.js, line 44204 character 11 and it refers to this part of the code:\n``` javascript\nvar ListItem = function (_PureComponent) {\n  inherits(ListItem, _PureComponent);\nfunction ListItem(props) {\n    classCallCheck(this, ListItem);\nvar _this = possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));\n\n_initialiseProps$1.call(_this);\n\n_this.state = { active: false };\n\nif (typeof props.isOpen === 'undefined' && typeof props.visible === 'undefined') {\n  var defined = function defined(v) {\n    return typeof v !== 'undefined';\n  };\n  var _this$props = _this.props,\n      initiallyOpen = _this$props.initiallyOpen,\n      defaultOpen = _this$props.defaultOpen,\n      defaultVisible = _this$props.defaultVisible;\n\n  var visible = defined(initiallyOpen) ? initiallyOpen : defaultVisible;\n  visible = defined(defaultOpen) ? defaultOpen : visible;\n  visible = !!visible;\n\n  _this.state.visible = visible;\n}\nreturn _this;\n\n}\n```. ",
    "Ardhimas": "Any idea when this would be worked on? No pressure, I simply ran into the findDOMNode problem with snapshot testing.. I love this project so I'll make the PR, but give me a week to get to it. Thanks again for all your hard work @mlaursen .. Thank you very much for the speedy response, I'll report back on my findings once I attempt to implement the solution.. This issue is fixed, but I ran into a separate issue while fixing this that I'll document in another post.. jest: 20.0.4\nnode: 8.2.1. Thank you for the help! Let me know if there is anything else I could do to help you.\n. @mlaursen I spent a few hours attacking this issue today and I've come to a few definitive conclusions\n- The Layover component is the culprit causing memory issues, and it was something introduced in the 1.1.0 release.\n- The issue is reproducible reliably when running snapshot tests generated using shallow from enzyme, or the default export from react-test-renderer. Rendering any test containing the Layover component - even if it's nested within SelectField or Menu - either throws an error when attempting to render, or it passes until you add the line expect(wrapper).toMatchSnapshot() and fails after that.\n- When using react-test-renderer, the issue appears to come from within the _setContainer method of the Layover component, and I'm thinking it may be to do with a null argument.\nThe solution I came up with is using render from enzyme instead of shallow for snapshot tests, which for some reason works. The only downside is that if you have any wrapped child components, you have to make sure those can render as well, for example when using Link from react-router-dom you need to add context using MemoryRouter.\nI'm going ahead with my solution for now, but the actual issue with Layover may manifest itself in a different way in the future. If it does, feel free to contact me and I may be able to help.. @mlaursen https://github.com/Ardhimas/react-sandbox\nGo ahead and run npm install and then npm test and you should see an error like this:\n\n. I think updating the defaultProps is a pretty nice and succinct solution, even if it doesn't tackle the core problem at hand.. Awesome. It just got merged 18 minutes ago, just gotta wait for the next Jest release.. @johan-lejdung An easy hotfix for now is to add style={{ display: 'block' }} to the TablePagination component, which for some reason causes the reposition to occur.. ",
    "gniquil": "Here's my work around. See if this works for you:\nAfter include everything in the scss, put in the following snippet:\n```scss\n.md-dialog--scrollable {\n  .md-dialog {\n    display: flex;\n    flex-direction: column;\n.md-title--dialog {\n  flex-shrink: 0;\n  border-bottom: solid 1px get-color('divider', true);\n}\n.md-dialog-content {\n  flex-grow: 1;\n}\n.md-dialog-footer {\n  flex-shrink: 0;\n  border-top: solid 1px get-color('divider', true);\n}\n\n}\n}\n```\nThen add md-dialog--scrollable to the Dialog component.. ",
    "mgolus": "I did some further research and believe I have found the issue. In TextField, listeners are attached to touchstart and mousedown for the handleOutsideClick:\nfn('mousedown', this._handleOutsideClick);\n      fn('touchstart', this._handleOutsideClick);\nOn the TextField itself though, the onClick event is being used to handleContainerClick:\nonClick={this._handleContainerClick}\nThis means that when the user starts the touch on the mobile device the keyboard starts to slide down. Whatever is under the users finger once they complete the tap (or click) is what gets handled as the click event target.. Playing with standard form controls, it seems that mobile behaves different than desktop in that mousedown on desktop triggers a blur on the input elements but it takes a touchend to trigger the blur on mobile devices. Changing the line:\nfn('touchstart', this._handleOutsideClick);\nto\nfn('touchend', this._handleOutsideClick);\nand changing the appropriate line in componentWillUnmount seems to resolve the problem.. ",
    "ostrebler": "Seems like, yes. The problem occurs when I click fastly on the button, but sometimes also when I click normally.. Thank you for that helpful answer. I was able to fix the first two issues.\nFor the anchoring, I don't get it. I tried several things and I'm not able to put the suggestion list above the text field. Here's is what I tried : \n<Autocomplete\n    id={ 'autocomplete-member-' + key }\n    anchor={{ x: SelectField.HorizontalAnchors.LEFT, y: SelectField.VerticalAnchors.TOP }}\n    position={ Autocomplete.Positions.BOTTOM_LEFT }\n    simplifiedMenu={ true }\n    ...\n/>\nI tried with different HorizontalAnchors and positions, I doesn't seem to do the trick. With the config you put in codepen, I got a weird thing : \n\nThe suggestion list appears on the right of the screen.\nAny advice ?. https://codepen.io/anon/pen/Lzyapa?editors=0110\nType for example the letter 'n' and try to navigate through the suggestions with key pad.. Awesome, thank you.. I found a solution. I'll explain the whole thing here, maybe this can save some people's time.\nThe problem of seeing the cursor jump to the end actually happens each time a controlled input gets its new value asynchronously. To sumup some of my researchs, here is what happens : \nExplanation\nWhen the input is controlled synchronously (cursor doesn't jump) : \n- input.value is 'Hello' (cursor in the middle)\n- You type 'X'\n- input.value is 'HelXlo' (cursor in the middle)\n- Call of setState({ value: 'HelXlo' })\n- The virtual dom says the input value should be 'HelXlo'\n- input.value is actually 'HelXlo'\n- No action is taken, cursor stays in the middle\nWhen the input is controlled asynchronously (cursor jumps) : \n- input.value is 'Hello' (cursor in the middle)\n- You type 'X'\n- input.value is 'HelXlo' (cursor in the middle)\n- You don't call setState but call your async onChange('HelXlo')\n- The virtual dom says the input value should be 'Hello' (last known prop)\n- React sets input.value to 'Hello'\n- Cursor jumps to the end (side-effect of setting input.value). By the way, this is why the cursor jumps to the end when you provide a value prop without any onChange prop.\n- ...\n- Then later, when onChange is done : \n- Call of componentWillReceiveProps({ value: 'HelXlo' })\n- Call of setState({ value: 'HelXlo' })\n- The virtual dom says the input value should be 'HelXlo'\n- React sets input.value to 'HelXlo'\n- Cursor re-jumps to the end (side-effect of setting input.value)\nSolution\nThe solution is to do both sync and async control in a little wrapper. You call prop onChange (for async control) only when the setState (sync control) is done. This gives you the following scenario : \n\ninput.value is 'Hello' (cursor in the middle)\nYou type 'X'\ninput.value is 'HelXlo' (cursor in the middle)\nCall of setState({ value: 'HelXlo' }), then call of onChange('HelXlo')\nThe virtual dom says the input value should be 'HelXlo'\ninput.value is actually 'HelXlo'\nNo action is taken, cursor stays in the middle\n...\nThen later, when onChange is done : \nCall of componentWillReceiveProps({ value: 'HelXlo' })\nCall of setState({ value: 'HelXlo' })\nThe virtual dom says the input value should be 'HelXlo'\ninput.value is actually 'HelXlo'\nNo action is taken, cursor stays in the middle\n\nAnd here is the wrapper :\n```\nclass AsyncTextField extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = { value: this.props.value }\n    }\ncomponentWillReceiveProps(newProps) {\n    this.setState({ value: newProps.value });\n}\n\nonChange(value) {\n    this.setState({ value }, () => this.props.onChange(value));\n}\n\nrender() {\n    let { value, onChange, ...props } = this.props;\n    return (\n        <TextField value={ this.state.value } onChange={ ::this.onChange } { ...props }/>\n    );\n}\n\n}\n```\nThis can be easily adapted to other input components.\nIt can also be used for concurrent editing of the same TextField. The only limit in that case is that when A types, B sees his cursor jumping to the end. At least, A's cursor doesn't jump anymore. There's pretty much nothing you can do about this issue without controlling the cursor manually.\nHope this will help.. I import them like import TextField from 'react-md/lib/TextFields'\nFor the Grid system, I just copied the doc with import { Grid, Cell } from 'react-md'. Does that import the whole library ?\nHere is my webpack config : \n```\nvar debug = process.env.NODE_ENV !== \"production\";\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\n  devtool: debug ? \"inline-sourcemap\" : false,\n  entry: \"./client/js/Finder.js\",\n  module: {\n    loaders: [\n      {\n        test: /.jsx?$/,\n        exclude: /(node_modules|bower_components)/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react', 'env', 'stage-0'],\n          plugins: ['react-html-attrs', 'transform-class-properties', 'transform-decorators-legacy'],\n        }\n      }\n    ]\n  },\n  output: {\n    path: __dirname + \"/client/\",\n    filename: \"finder.min.js\"\n  },\n  plugins: debug ? [] : [\n    new webpack.DefinePlugin({ 'process.env': { NODE_ENV: JSON.stringify('production') }}),\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.optimize.UglifyJsPlugin()\n  ],\n};\n. Very clear answer, thank you.. Mmmh not really. I mean, yes, disableScrollLocking prevents from jumping to the top, but it doesn't actually create a new overlay. That is problematic in my case where I would expect only the second dialog to close when clicking one time outside the zone. Moreover, the second dialog is \"fit\" in the first one. In my case, the second is higher than the first. I would like to show the nested dialog above everything else, including the first one as if it didn't exist. Any way to do that ?. Aaaaaand it works perfectly ! Thank you.. I don't know what are your motivations to remove renderNode, but it helped a lot in my case. My CSS styles are applied according to the #id of a child node of document.body. In my case, I used :\nrenderNode={ $('#workspace-content')[0] }\n```\nin order to get my styles applied in the nested dialog.. That's very clear, thank you for the explanation.. Yes it might have come from some inherited styles. The real issue with these nested expansion lists I think is #645 . Doesn't that generate backward compatibiliy issues when using transitions between the ExpansionList and its ExpansionPanels ? I guess it adds some spans / divs in between. I solved it by changing isOverflown in ExpansionList. It returned 0, I just changed it to 'false'.. No, it also didn't display as expected. The panel header used to overflow its box on first expand. Like this : \n\nThe min-width was set too high. I added a headerClassName to the panels to set min-width: 0 !important and it fixed the issue.\nPS : \"Seach\" is an ExpansionPanel, and contains the patent panels in a nested ExpansionList.. I also noticed on the DatePicker : \n\n\nWhen using date strings with value and onChange props, the internal default formats for both are not the same, causing the day given by onChange to be interpreted by the value prop as the month. And vice versa for the month becoming the day.\n\n\nWhen using date objects with value and onChange props, onChange always sends the date of the next day. For example if I select February 2, I get a date object for February 3. The value prop seems to work the other way : given February 3, it will render February 2. This is transparent (because of the compensation) if you don't manually check out the returned date...\n\n\nHope it will help. Good luck !. Thank you, that helped.. Yep, I missed that part. It might do the job, I'll give it a try.. Thanks for your quick reply. It works fine now !. ",
    "prasad83": "npm run build - failed without this fix.. ",
    "CalvinChhour": "Currently running into this, @yairodesu any tips on how you worked around the bug?. ",
    "marcopolo25": "I'm also running into this issue. If the drawer content's height is greater than the screens view port, the content is not visible and I can't scroll to view the rest of the content. Please post a work around for this issue.. ",
    "mim-Armand": "Awesome! That's great, Thank you Ayhan. :+1:. ",
    "jackielii": "Thanks, that make sense.\nOn 2 Aug 2017 19:56, \"Mikkel Laursen\" notifications@github.com wrote:\n\nThanks for the initial write-up. I ended up fixing the cloneElement part\nso that it accesses the already existing key (which is located on\ncomponent.key instead of component.props.key). It should only inject\nthe index key if you did not provide a key to the action yourself.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/465#issuecomment-319765451,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAWCF1iBn_p_rD0lRbfHd0SX5OYkoIugks5sUMZkgaJpZM4OpvQG\n.\n. Thanks, that make sense\n\nOn 21 Aug 2017 8:50 am, \"Mikkel Laursen\" notifications@github.com wrote:\n\nThis is mostly because I don't actually support\n\ncolor\ndate\ndatetime-local\nimage\nmonth\nrange\ntime\nweek\n\nas they were not a part of the material design spec (or the TimePicker/\nDatePicker/Slider/FileInput should be used instead)\nI can always update the PropTypes to include these, but I don't really\nwant to have to support bugfixes for any display bugs (or the fact they\nneed to be polyfilled for some browsers) that might happen for them. You\ncan always ignore the prop type warnings since they will be removed in\nproduction anyways.\nI'll think about it a bit more.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/486#issuecomment-323671812,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAWCF80pcH2ksRUiJyTRaSZ4DiHwlt33ks5saTa_gaJpZM4O6cku\n.\n. @mlaursen yes, tried that. Didn't work, debugged it, and realise the disableScrollLocking needs to be set on the Date Picker!\n\nAh, yes, your link is to Date picker! Thanks for the info.. Just out of curiosity, I didn't do a proper reading. Shouldn't we have a break; after el = node;\n```\n      while (node && node.classList && !el) {\n        if (node.classList.contains('md-dialog')) {\n          el = node;\n        }\n    node = node.parentNode;\n  }\n\n```. ",
    "viggyfresh": "Thanks a bunch for the insanely quick response! Will await 1.0.18.. ",
    "madc0der": "Not able to pass null for typescript version. Workaround: \nrenderNode={document.getElementById('root');} or some other root for react app.. Thank you! Will do!. ",
    "mikeni": "there is a max width for container at certain responsive widths, kinda like the picture you posted, you see how the 3 columns are part of a container that has a max width?\nbasically fixed layout. ah ok, I'm wondering why material frameworks usually don't have this, most are mobile focused.  Material-ui, react-md, etc don't have it, but older frameworks like semantic-ui and bootstrap do. ",
    "GerardStelt": "I have the same issue with Safari with tabs using mouse.\n\nMouse-select certain tab\nNavigate to other browser tag\nReturn back\nMouse-select different tab\n\nSame result: Ink stays 'on' on previous tab. ",
    "peteboothroyd": "Done! I couldn't see exactly what you meant with the TableCheckbox, that file doesn't have an associated .d.ts file?. ",
    "asanzdj": "When I read about fullWidth prop I thinked about this: https://codepen.io/anon/pen/KXVxRx?editors=0110. Ok, I will use it.. ",
    "sachiner": "visible is not working after once if given a value \nlam using like this \nthis.visible_dropdown1 = true\n{\n                  this.visible_dropdown1 = false;\n                  this.submitDropDown(newValue, newActiveIndex)}}\n                menuItems={this.collectionAmountOptions}/>. Thanks @mlaursen . ",
    "laduke": "Warning: Received `false` for non-boolean attribute `focusable`. If this is expected, cast the value to a string.\n    in svg (created by SVGIcon)\n    in SVGIcon (at layout.js:42) \nis the one I'm seeing. . ",
    "lepirlouit": "The same bug occurs with pagination.. probably need to add the location as key in your switch\n\n. look at the code for \"React Router Example\" by clicking the <> upper right\nhttps://react-md.mlaursen.com/components/navigation-drawers. I just notice, perhaps I could use your ResizeObserver ?. Thanks for the fix.. ok for me.. fixed this by adding \nsimplifiedMenu={true}. My current workaround is to remove the TabsContainer which is as explained in the docs optional. And did like on the documentation website to handle the tabs switching. ",
    "MikeLimeRocket": "Thanks Mikkel for the background. Last time I checked React-MD was a small\nbuild size and seem to perform better on mobile (based on my tests) so\nthere is also that selling point.\nCheers, Mike.\nFounder & CEO - BuzzyTV \nConnect on LinkedIN https://au.linkedin.com/in/mrmikeg\nCreate & Play Kits now available for your School Library.\nhttp://buzzytv.com/for/schools\nhttp://buzzytv.com/for/schools\nTwitter https://twitter.com/buzzytvgames | Facebook\nhttps://www.facebook.com/buzzytv/ | Instagram\nhttps://www.instagram.com/buzzytv/ | Snapchat\nhttps://www.snapchat.com/add/buzzytv\nOn Wed, Oct 4, 2017 at 9:02 AM, Mikkel Laursen notifications@github.com\nwrote:\n\nThe biggest difference between these two libraries is the styling\nmethodology. I haven't really kept up with material-ui's development\nprocess, but the first version of material-ui was created with inline\nstyles and now it appears to have transitioned to JSS\nhttps://github.com/cssinjs/jss. All the styling in this project is done\nvia Sass/SCSS and an opt-in mixin based approach of including styles. I\npersonally prefer having styles in a separate file which is the main reason\nfor this to begin with though. A majority of the styles can be overridden\nby setting variables before including the styles and then props for\nexposing style and className have been integrated into each component as\nwell to help with additional custom styling.\nThe next biggest difference is that I have been trying to keep components\nup-to-date with accessibility standards and conventions to help with screen\nreaders, keyboard users, and other disabilities. It does look like the next\nversion of material-ui has started implementing this as well, so it might\nnot be a big selling point any more.\nI also think my documentation is a bit easier to navigate and see live\nexamples but that might be because I made it.\nFinally, I'd choose one of these two based on how quickly you'd like\nupdates to appear. I am the only main maintainer for this, so my releases\nand newer features might come a bit slower compared to material-ui. I\nnormally try to answer questions and PRs as quickly as possible, but some\ntimes other things come in the way.\nHopefully this was informative and helps you and people in the future\nchoose one of these :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/issues/555#issuecomment-333992425,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABxCEmNoYPu4KpDx0MV3QQ_MZInjoXoeks5soq8FgaJpZM4PoWuS\n.\n. \n",
    "deadcoder0904": "\nI also think my documentation is a bit easier to navigate and see live examples but that might be because I made it.\n\nNope. It is easier & concise.\nThank you for your hard work @mlaursen \u2764\ufe0f \nThe explanation was crystal clear.\nIts so good that I didn't knew which one to choose of the two \ud83d\ude02\nI'll leave this open if anyone wonders. Close it if u want.. ",
    "dandv": "Also,\n This library implements autocompletes, while Material-UI requires using 3rd party autocomplete libraries.\n This library implements editable tables, tables with dynamic content, and tables with menus. Material-ui does not.\n* This library has a demo for an app bar with search field, while Material-UI does not.\nOn the other hand, Material-UI has a monetization strategy with Patreon backers and premium themes.. Thanks!. Turns out findDOMNode returning null had recently been fixed in preact-compat 3.18.3, yet my reproduction repo still shows the issue when using 3.8.14. Any other ideas?. > If this is an extreme blocker and can't wait until I finish the v2 branch\nThis is as extreme as a blocker can be, since it means react-md can't be used with Preact at all :) Is there a timeline for the v2 branch?. ",
    "nebrelbug": "I love how react-md is way simpler. With material-ui, you have to export withStyles() everything and it seems like nothing works without tons of extra styling.. ",
    "elis": "It's supported already - I named the prop incorrectly in a custom component.... ",
    "ManuSevenval": "I am also looking for a solution to this problem. Maybe someone has an idea!. ",
    "Kaishiyoku": "@hisapy I stumbled across the same thing today but didn't investigate any further but also wanted to build a custom import transformer for react-md. Will grab your code and extend it further to my needs, thanks!\nCurrently react-md is the largest dependency regarding bundle size (~1.25MB).. I've created a small package with a transformer for most components: https://github.com/Kaishiyoku/webpack-react-md-import-transformer\nPlease read the installation instructions carefully.. @hisapy You're right! I updated the README.. That would be better. I recently stumbled across this and had issues working with the min-sizes of the Drawer on the one hand and CSS-Media-Queries on the other because the default values were different.. @Pranjali14 the codepen expired for non-pro users. Same here. I'm getting this specific error message:\n\nHere the toast -sub-object is undefined.\n. That worked, thank you.. @mlaursen Your recommendation sounds good - a more generic children approach would be more satisfiable. I could adjust my merge request to this.. Of course. Will update the PR next week.. Ok it seems like there went something wrong with the last travis build. The log says there are lint warnings on lines 567 and 773 at the ListItem.js but that can't be true. How can I rerun the checks other than by pushing a new commit?. Update: my bad, will push a fix soon. @mlaursen pushed the changes. @StarAzure A carousel is not a base component of the Material Design guidelines.. What does that fact has to do with which components are in an UI framework? This project is mainly maintained by a single person with the intention to cover up most of the Google Material guidelines.\nAntd has nothing to do with these guidelines.\n@mlaursen Noticed several times that components not mainly inside the guidelines would be considered a nice-to-have. Someone could build a slider outside of this repo of course. You're free to start - I could take a look at it, too and help you out a bit \ud83d\ude03 . @StarAzure You're always welcome to contribute to react-md. ",
    "doug2k1": "It looks like adding sideEffects to the package.json will make tree shaking work with Webpack, according to https://webpack.js.org/guides/tree-shaking#mark-the-file-as-side-effect-free and to some tests I made.\nI'm not sure though if react-md has some \"effectful\" files that need to be excluded.. ",
    "GuerkanDemirci": "my fault. sorry. forgot to use wrap it inside TableColumn. ",
    "vtr": "Indeed, thanks for taking a look. I hadn't thought of that because I'm generally using the object id as the key, but in this case, the code was still relying on array index.. ",
    "johan-lejdung": "Thanks! Great to know :). Can confirm that @Ardhimas fix did not work in my project!. ",
    "jccrofty30": "Actually trying to narrow that down...testing on codesandbox with only react, react-dom, and react-md...it works.\nStill trying to identify what we have that is so different to produce the error...I can confirm that is is emitting from Tabs.. We've resolved the issue. Completely on our end.\nWe've got a rather 'unique' situation that has us crossing projects and the react versions were colliding.\nApologies for the bother.. ",
    "zerowaitstate": "The problem is here (line 156 of src/js/DataTables/EditDialogColumn.js):\nvalue: controlled(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\nThe controlled() function takes a second parameter which is the name of the callback property that must be bound.  Because the parameter is missing, the controlled() function is looking for an undefined key and generating a warning.  It should be this, I think:\nvalue: controlled(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'onChange'),\nI was going to send a pull request, but I've had trouble getting the code to build under npm locally when pointed at a fork rather than the NPM repo, so I can't test.. ",
    "johc": "Hi,\nI noticed that the day of the week headers are incorrect in the calendar - it's shifted forward by a day. My timezone is GMT+13.\n\n. ",
    "cayasso": "Thank you!. Actually I think the className would need to be passed here https://github.com/mlaursen/react-md/blob/master/src/js/NavigationDrawers/NavigationDrawer.js#L977. Thank you!. ",
    "lipt0n": "in what switch? \ni have only \n<NavigationDrawer>\n{this.props.children}\n</NavigationDrawer>\nand children are provided by react-router v3. [EDIT]\nit was my div ;)\nsory for that.  it is working now, thx !\n\nthx for help!\nI changed it to \n    { children ? React.cloneElement(children, {key: pathname}) : null }\nAnd I can see in react inspector what it got the key, but don't see any transition (also I dont see any in example: https://react-md.mlaursen.com/discover-more/routing-examples/navigation-drawers/drafts )\nMay this be because it looks like this:\n\nand there is some div with key 0.1 always before my children ?\nnot sure, I't is not my div anyway :)\n. ",
    "dave-hillier": "Still seems a little strange to me, but it has changed with a newer version. It still doesnt seem to be the correct typing. For example, the Positions is a Union type, see: https://github.com/mlaursen/react-md/blob/release/1.2.x/src/js/Helpers/Layover.d.ts#L21\nAnd on the layover object looks like this: https://github.com/mlaursen/react-md/blob/release/1.2.x/src/js/Helpers/Layover.d.ts#L71\nWhereas on the drop down its declared as a single field: https://github.com/mlaursen/react-md/blob/release/1.2.x/src/js/Menus/DropdownMenu.d.ts#L23\nThe later looks incorrect, I would have expected an object with the corresponding strings. \nWhat's the correct way to do this? . ",
    "L-David": "Maybe we can start by giving a translation for the examples folder, or start working on some translations if you decide that it's worth making the change. \nI think the translations make life a little easier for those of us who started but does not add much more. If the change is huge it may not be worth it and instead, we could help with more examples.\nI do not know, just ideas ;). ",
    "TJSomething": "@mlaursen: Per your recommendations, I removed those props that I put those commas on, since they were redundant anyway, and made toolbar optional.. ",
    "danielmoraes": "up. ",
    "francoserio": "Up, excellent feature.. ",
    "gyurist": "Hey @hisapy,\n\nNo, I forgot to mention it in the description but the issue is reproducible on the documentation page\nThe bug appears both for the value and defaultValue properties\n\nThank's for looking into it!\nI'll dig into the source code as well if I have some free time on my hands.. Hey @hisapy,\nI'll make some screenshots but if you have access to BrowserStack Live - they have a 30 minute free trial - you can quickly check it, they seem to be in the same timezone so the error is reproducible on the docs page.. ",
    "lukedarmanin": "Hi guys, \nI have experienced this problem too. \nScenario 1: When the page loads\nPlease see screen shot attached. When the page initially loads the intended date is Friday 8th December 2017 which appears in the text area, however when opening the date modal Thursday 7th December 2017 is displayed.\n\nScenario 2: Changing the date after the page has loaded\nThis is similar behavior to scenario 1 that occurs when changing the date. For example, if i change the date to Tuesday 12th December, Monday 11th December will appear in the text area. \nInterestingly, scenario 1 will always happen. Scenario 2 is intermittent - it will happen about 90% of time - the other 10% of the time it will work as expected.\n\nHas there been any progress on this matter? Happy to provide further info as needed.\nThanks. ",
    "tanmay-gp91": "This is still existent even on the demo page (GMT + 5.30)\n\n\nUPDATE: Goes off when reverted to v1.2.4. @mlaursen any update on this one?. ",
    "M-Blobby": "Hi,\nJust tried with your last beta (1.2.12-beta.2) and now the Datepicker works like a charm! (at least I don't see the bugs like before)\nThanks a lot @mlaursen . ",
    "DaVinciLord": "I think this is the same issue as #595. \nBasically, use the disableScrollLocking prop in the child dialog if I'm correct and everything should be fine.. ",
    "idlecat": "First of all, thanks for the great library! \nI feel the shifting effect quite unpleasant. Plus, a lot of apps, including \"Google Photos\", \"Google Newsstand\", Quora, Pintest, have 4 or 5 bottom links and they are all fixed. Real eastate shouldn't be an issue for 5 links. Anyway, it's better to give user a choice instead of magically switching to shifting mode for >3 links.\nRegards,\n. ",
    "pietrofxq": "Is there a easy way to use css modules with this library? I would like to use it, but I have a full setup with css modules + postscss and wouldn't want to introduce SASS to the project.. ",
    "hrmoller": "I like the idea as we're having quite the same use case as @jbetancur but in our case we're using DropDownMenus.\nI don't know how much (if anything at all) DropDownMenus and SelectFields are having in common but if the idea of a pending prop  (etc.) could be lifted to allow for broader use than just on the SelecField I think that would be ideal. Eventually I might be able to help implement the solution other places.. ",
    "randy-r": "For network calls, it could be helpful, but for rendering not really if you would like that smooth, continuous, native-like transition between tab content.\nIf you want to ditch the transition, the documentation site is a good working example.\nhttps://react-md.mlaursen.com/components/tabs#custom-usage. ",
    "anagrath": "Better to have the option and not need it than to need the option and not have it.  The react-lazyload libraries out there do not work with the tabs for whatever reason and I am beginning to feel like I am writing a lot of code for something that should be a built-in option\u2026  I mean, it is just an if statement around the children after all to only load it if it is the active tab and lazyload is on.\n\nOn Dec 30, 2017, at 7:33 AM, randy-r notifications@github.com wrote:\nFor network calls, it could be helpful, but for rendering not really if you would like that smooth, continuous, native-like transition between tab content.\nIf you want to ditch the transition, the documentation site is a good working example.\nhttps://react-md.mlaursen.com/components/tabs#custom-usage https://react-md.mlaursen.com/components/tabs#custom-usage\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/mlaursen/react-md/issues/654#issuecomment-354549206, or mute the thread https://github.com/notifications/unsubscribe-auth/ACtupITdHREIpkakyLRAjOMfuZXcK1mYks5tFkm4gaJpZM4ROAUM.\n\n\n. ",
    "thezefs": "Do you have any idea when it could be fixed?\nCould you consider temporary fix by bringing back your reverted change (1fc5b0b), and just making so md-overlay depends on component visibility?\nExample:\nline 615 'md-overlay--active': !fullPage && active && visible\nI think it would be good enough solution - it would fix animation issues.. Is there a plan to fix this issue?. It looks like it jumps only if your zoom level is different from 100%. On zoom >100% it jumps towards down-right, on zoom  <100% upper-left.\nTry different zoom in your MS Edge 38. ",
    "erkkaha": "scss lint fails in travis, not sure why.... ",
    "justincobb": "I didn't see that one. Thanks.. ",
    "zgavin1": "Hi @mlaursen. I'm interested in submitting a PR to fix this bug. I've followed the steps you outlined to getting the environment set up. Are there any other processes you would prefer for me to follow for addressing a small fix like this?. OK if you think it would be overkill, I'll just go ahead an submit the PR. ",
    "davidhiguita": "@mlaursen great, this worked. Thanks. ",
    "willdunlop": "\nThis might have been fixed in one of the versions in between 1.2.9 and 1.2.11. I can't seem to reproduce the error. Is there a specific browser or device that broke for you?\n\nThis happens for me in the Chrome browser. I've been able to reproduce this error for any date that is the 13th or higher and I believe it comes down to the locales settings not being considered while the component is being controlled. I imagine this wouldn't be an issue for anyone testing with an en-US setting. ",
    "jojo-tutor": "@davosolo , I'm having the same issue, is this already fixed?. @davosolo , I've fixed this issue by wrapping the SelectField component to my custom Component, here is the example component:\nCheck this demo on Codepen: https://codepen.io/jojo-tutor/pen/GQwjvj?editors=0010\n```\nimport React, { PureComponent } from 'react'\nimport { SelectField } from 'react-md'\nimport PropTypes from 'prop-types'\nclass AdvanceSelectField extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.ref = null\n  }\n  handleBlur() {\n    const { id, onChange, value: propsValue } = this.props\n    const { state, props } = this.ref\n    const { activeIndex } = state\n    const { menuItems, itemValue } = props\n    const isObject = menuItems.length && typeof menuItems[0] === 'object'\n    const value = (activeIndex > -1)\n      ? isObject ? menuItems[activeIndex][itemValue] : menuItems[activeIndex]\n      : null\nif (value && propsValue !== value) {\n  props.value = value\n  onChange(value)\n}\n\n}\n  render() {\n    return (\n       this.ref = ref}\n        onBlur={() => this.handleBlur()}\n        {...this.props}\n      />\n    )\n  }\n}\nAdvanceSelectField.defaultProps = {\n  onChange: () => {}\n}\nAdvanceSelectField.propTypes = {\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func\n}\nexport default AdvanceSelectField\n```\nSo, instead of using:\n<SelectField\n    key='role'\n    id='role'\n    label='Select role: (menu as array of string)'\n    menuItems={roles}\n    className='md-cell md-cell--12 dropdown_menu blank-left-icon'\n    position={SelectField.Positions.BELOW}\n    value={role}\n    onChange={this.handleChange.bind(this, 'role')}\n/>\nJust use this:\n<AdvanceSelectField\n    key='role'\n    id='role'\n    label='Select role: (menu as array of string)'\n    menuItems={roles}\n    className='md-cell md-cell--12 dropdown_menu blank-left-icon'\n    position={SelectField.Positions.BELOW}\n    value={role}\n    onChange={this.handleChange.bind(this, 'role')}\n/>\nLet me know if this solves the issue or not. \"A simple thanks is appreciated\".\nP.s. I think this is not the best solution though.. ",
    "luyc": "When collapsed is false, or style.height is null, will return this error.  But the style.height will calculate before rendering. I think !collapsed && _this2._setHeight will return true or false, so should not assign to ref. \nAdditional permis\uff1a \n     This Component is a individual component libraries.\nerror code:\n```\n// Demo.jsx\nexport default class Demo extends React.PureComponent {\n    render() {\n      const {collapsed}  =  this.props\n      return Hello\n    }\n}\n// Main.jsx\nexport default class Main extends React.PureComponent {\n    render() {\n      const {collapsed}  =  this.props\n      return Hello\n    }\n}\nI resolved this  error:\n// Demo.jsx\nexport default class Demo extends React.PureComponent {\n    render() {\n      const {collapsed}  =  this.props\n      return Hello\n    }\n}\n// Main.jsx\nexport default class Main extends React.PureComponent {\n    render() {\n      const {collapsed}  =  this.state\n      return Hello\n    }\n}\n```\nSo it's very interesting\n. ",
    "dnyaneshbhalerao": "@c0b41 No it is not about the search icon. It's the reset icon (x) I am talking about.. ",
    "iuliux": "Is there any update or timeline on this one?\nTrying to figure out if I should work around it or just have a little patience.. ",
    "alaney": "We're seeing this behavior as well. Sometimes the arrow button to scroll to the hidden tabs is not present and thus all the tabs are not accessible.. Awesome!. ",
    "zenaway": "@mlaursen too bad. :(\nmaterial-ui did not want to slow down\nWe should wait or make it look different.\nBut thank you for always making it hard! I'm writing this library for most of the projects I do.. ",
    "Jared-Dev": "How are you importing FontAwesome? The implementation you are describing is their JS based version, but you may be better off using their CSS based option when using this library.\nSpecifically, you can check the \"next\" section and my assumption is that you are referencing the /js/all.js while the /css/all.css may not have the issues you are describing. They actually recommend using their React library or the CSS solution when using React.\n...or you could be using their React library and none of what I've said could apply to your situation!. @mlaursen I'm guessing this one can be closed.. ",
    "asartalo": "I see. I think I'll use your approach then. Thanks for the response!. ",
    "mssodhi": "Found another issue causing the bug on my end. Closing issue.. ",
    "kanso-michael": "@mlaursen Any sign of fixes/workarounds/resolutions to these issues?. ",
    "alhaag": "Is there any other outline option to prevent Chrome from autocomplete?. ",
    "ochtec": "Wanted to add to this one as well. I don't think we're necessarily looking for more autocomplete support, but a way around the fact that Chrome ignored autocomplete=\"off\". So we can do autocomplete=somerandomstring and Chrome won't attempt to autocomplete, but we get a proptype error that the component only accepts ['on', 'off'], which is useless for chrome since off is ignored.. ",
    "icflorescu": "Thanks for merging and keep up the good work! I know you already know this, but react-md is probably the best Material Design implementation for React ;-). Thanks for releasing on npm!. ",
    "Pranjali14": "@Kaishiyoku updated the codepen link.. ",
    "Elemecca": "This issue can be worked around by adding this SCSS snippet after including react-md:\nscss\n/* the default .md-cell--center selector isn't specific enough\n * when any of the width media queries are active and changing the margins\n * see <https://github.com/mlaursen/react-md/issues/721>\n */\n.md-cell.md-cell--center {\n  @extend .md-cell--center;\n}. ",
    "jkanczler": "There's an ugly workaround.\nclassName={ `.${Cell.getClassName({ size: 6, position: \"center\" })}`\nUse a string interpolation and put a . right away before the class names. So the md-cell class won't be applied.. ",
    "atuckner": "Awesome, thanks so much!. ",
    "bioslife": "Sorry, it was my fault. \nClosing issue.. Yes, it makes sense. I thought about naming, when was looking at other props, but didn't decide what name would be the better for your project.\nI will be wait the new release. Thanks!. ",
    "EyalIsr": "@mlaursen I'm not sure I followed: \nWhere're those variables should be declared?\nThanks. ",
    "tb": "@mlaursen Than you for all the great work with React MD!\nI have been researching the topic of material-components-web today, the https://github.com/material-components/material-components-web-react is very small. Much more complete is unofficial implementation https://github.com/jamesmfriedman/rmwc The author has described the projects goals at https://jamesmfriedman.github.io/rmwc/methodology. ",
    "jairusd": "Going typescript sounds great. Have you heard of flow types?\nhttps://flow.org/en/\nhttps://github.com/flowtype/flow-typed/blob/master/README.md. Thanks, I resolved the issue by instead of showing nested routes, i just flattened the list when minimized into icons, example:\nhome\nabout\n  -- company\n  -- myself\nwould be translated into:\nhome\ncompany\nmyself. ",
    "wenq1": "thank you for making react-md possible in the first place. ",
    "oliviertassinari": "@mlaursen This is a great read!\nI \ud83d\udcaf% agree with you on how important customizability and accessibility \u267f\ufe0f are. If you want to keep having fun while learning, you are welcome on Material-UI side.. ",
    "riazi": "@c0b41  i added  material design icon font in poroject and show correctly in my system but when   remote in my system dont show icon or in some system when run poroje dont show icon . ",
    "manhnt9": "Doesn't work for me.\nFor importing with react-md/lib/Snackbars:\n``\nWarning: Failed prop type: The proptoastis marked as required inSnackbar, but its value isundefined`.\nWarning: Failed prop type: The prop leaveTimeout is marked as required in Snackbar, but its value is undefined\nTypeError: _props.toast is undefined\n```\nFor importing with react-md/lib/Snackbars/SnackbarContainer:\n```\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in. Check the render method\nError: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in. Check the render method\n```. Solved, I was importing with {}. Removing them corrects the problem.\nThank you very much!. ",
    "pinokkkio": "So, if I want to overwrite some properties using custom class (my-card-text for component Card) me need to write something like that:\nscss\n.theme-1, .theme-2 {\n    .my-card-text {\n         font-size: 10px;\n    }\n}\nIs this only way?. ",
    "chmiiller": "I'm having the same.\nIf I set passwordIcon to null it will hide the icon indeed but it would still be clickable =/\n\n. thanks!. ",
    "jooleeunc": "Thanks for looking into this. Definitely love the work that you're doing with react-md.  Thanks!. ",
    "ntt2k": "@mlaursen \nThank you for the quick reply, please update document ... it will help devs that want to start to contribute.. ",
    "garrettn": "Works great! Thank you!. ",
    "nielswh": "I'm also having the same issue. There looks to be inline style for the height in TabIndicator.  Anyway this could read in the value for md-tab-indicator-height instead of defaulting to 2?\n. ",
    "StarAzure": "@Kaishiyoku Then why does Antd have it ? I decided to go with antd as it is the second popular framework after material.... @Kaishiyoku I do not agree with you as it makes no sense. If single person is a limitation its a shame as others can help. Antd also has components. carousel is a very basic component in Bootstrap etc. We just have different perceptions/views about this. . ",
    "rakibulalam": "Hi mlaursen, I am using your library it's really nice. \nWe used Popovers in Bootstrap library. \nex:https://getbootstrap.com/docs/4.1/components/popovers/\nBut right now I am missing the component in your react-md. \nIt will be nice if you add the component.   . ",
    "yosrReact": "Hi,\nI have this code\nwifi} primaryText=\"Inbox\"  component={Link} to=\"some-route\"/>\nThe problem is that the icon appears in one line and the primaryText appears in another line. I don't know why. ",
    "leahjlou": "@mlaursen Thanks for the quick review and feedback! I've added a prop closeYearOnSelect. Naming is hard \ud83e\udd37\u200d\u2642\ufe0f  Let me know your thoughts.. ",
    "Xuecnahc": "Thank you a lot for your reply. I will provide the Pull Request when I will be able to work on it.\nAs it is my first Pull Request on the repository it will probably take a bit more time for the review. However it will be helpful for future ones.. My concern is the following:\nDescription\nThe present data are not shown when present on focus even when the same unfiltered data were shown on change.\nSetup\n\nBackend (or mock) returning data on change even for empty value\nAutocomplete without filter\n\nThe documentation GitHub Ajax Example is a good example to reproduce the behavior.\nStep\n\nFocus the input\nNo data are shown\nInput some text to filter the search\nData are shown\nRemove all the text\nData are shown\nBlur the input\nFocus the input again\nNo data are shown\n\nThe behavior with onChange is not the same as with onFocus using the same data.\nI would be in favor of having the same behavior for both the function.\n\nAlways show present data\nNever show present data for unfiltered data and document the showUnfilteredData prop under the filter prop-type.\n\nThe second point would be the best in my humble opinion.\nNot sure if it makes sense? I may be missing a point in my logic.. Thank you a lot for your reply. I opened https://github.com/mlaursen/react-md/issues/791 to resolve the null filter issue.\nLet me merge this Pull Request.. Hum... Obviously I can not merge it. Please nevermind the second part of my comment.. ",
    "kaYcee": "Hi @mlaursen! I think I have found the source of this bug. in Tabs/Tabs.js, Line 307 it is checked whether the mobile property is set or not. When it is set, the overflowAtIndex-variable is computed. With the second tab active and the phone first rotated and then re-rotated, the resize event seems to be called numerous times, causing this bug. As a temporary solution I've applied mobile={true} to all my usages and this seems to circumvent the issue.. Thx @phlare! Didn't notice the relation beforehand. Will monitor #707 then.. ",
    "clenondavis": "Hi @mlaursen, how you doing man?\nThanks for your quick answer.\nYes, I see know. Inspecting the Drawer.js code i get to find out that. As how you mention, It's a good  idea to add this scenarios as a test case.\nThanks for the solution you shared with me, I have not received any more this bug.\nI appreciate your help man.\nThanks,\nBest regards.. ",
    "billneff79": "I believe the issue is with preact itself, not with preact-compat or its findDOMNode implementation.  The problem arises in that react-md's InkContainer component is a High Order Component (e.g. a proxy to another component) component with no real html root node itself (it just turns around and renders another component TransitionGroup:\nhttps://github.com/mlaursen/react-md/blob/62976901aa42cbe98b5bc5c088baa7f83962b114/src/js/Inks/InkContainer.js#L411-L416\nFor some reason that I am unaware of, preact calls the ref callback function before rendering the Higher Order Component, and thus base on the component rendered by a Higher Order Component is not set immediately when the ref callback is called\nhttps://github.com/developit/preact/blob/8aa7ec9e87e34596d0ec292d12fb9f79135e382f/src/vdom/component.js#L127-L143\nhttps://github.com/developit/preact/blob/62c04e0e373c24e0e2b329457b85f233753b2aa3/src/vdom/component.js#L46-L55\nIn this scenario, the renderMode is NO_RENDER for a Higher Order Component because it's top-level child is a function/component, not a regular DOM node.  \nWhat this all means is that HOCs in preact need to put a delay around their children's refs callbacks to make sure this.base will resolve.  Here is a simple reproduction jsfiddle (look at the console output):\nhttp://jsfiddle.net/billneff79/es9xuL65/\nI don't know if this is a bug or a feature in preact, but I know you could easily work around it in react-md by modifying the ref callback in InkContainer here:\nhttps://github.com/mlaursen/react-md/blob/62976901aa42cbe98b5bc5c088baa7f83962b114/src/js/Inks/InkContainer.js#L180\nwith a setTimeout wrapper, like this:\n```js\n_setContainers = (group) => { \n    if (group !== null) {\n      setTimeout(() => {\n        this._inkContainer = findDOMNode(group);\n        this._container = this._inkContainer.parentElement;\n    if (this._container) {\n      this._initOrRemoveEvents(this.props);\n    }\n  });\n}\n\n}\n```. ",
    "marvinhagemeister": "Disclaimer: I'm part of the preact team\n@billneff79 That is an issue with how refs are applied in current preact. Our issue to track that is https://github.com/developit/preact/issues/1177 .. ",
    "fieldse": "Awesome! Thanks for the response Mikkel!. ",
    "roderik": "Never mind, baseId needs to go on the DataTable. ",
    "jwillia": "I agree, the first sounds preferable.. ",
    "bingomanatee": "arg. I found out that adding a unit will work better: \n````\n$md-font-size-base: 20;\n$mobile-scale: 0.8;\n$md-list-primary-font-size: $md-font-size-base;\n$md-list-secondary-font-size: $md-font-size-base * $mobile-scale;\n$md-list-desktop-height: 4rem;\n$md-list-mobile-height: 3rem;\n$md-body-desktop-font-size: $md-font-size-base + 0px;\n$md-body-mobile-font-size: $md-font-size-base * $mobile-scale + 0px;\n$md-btn-desktop-font-size: $md-font-size-base * 0.9 + 0px;\n$md-btn-mobile-font-size: $md-font-size-base * $mobile-scale * 0.9 + 0px;\n$md-btn-desktop-height: $md-font-size-base * 2 + 0px;\n$md-btn-mobile-height: $md-font-size-base * $mobile-scale * 2 + 0px;\n$md-text-field-desktop-font-size: $md-font-size-base + 0px;\n$md-text-field-mobile-font-size: $md-font-size-base * $mobile-scale + 0px;\n$md-line-height: 1.5;\n$md-body-1-line-height: 125%;\n$md-body-2-line-height: 125%;\n````\n . ",
    "kldavis4": "thanks :) both of those make sense to me. One other thing is that it feels like there should also always be a dismiss button on the snackbar and that should have the default selection. Otherwise the user will be stuck on the Undo button and have to wait for it to dismiss itself, right?. Sure, I'll give that a shot\nOn Tue, Oct 16, 2018, 9:53 AM Mikkel Laursen notifications@github.com\nwrote:\n\nOk, so I'm thinking that until v2 we can do something like this.\nCan you update the SnackbarContainer to have a new prop autoFocusAction\nwhich will default to true and pass it down into the Snackbar as and\napply it to the btnProps as autoFocus like you have above? This way we\ncan have the autoFocus ability and the dev can add custom focus logic as\nneeded when the action is pressed. Then add docgen to autoFocusAction to\nsomething like:\nWhen a toast has an action, it will automatically be focused when this prop is enabled. This will require your action onClick handler to correctly focus an element on the page once the toast is hidden. If this prop is disabled, it is recommended to add custom focus logic so that keyboard users can interact with the snackbar.\n?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mlaursen/react-md/pull/806#issuecomment-430245859,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAWpCxDUfTXURDT5D-wDkPLOwT8R6YABks5uleTCgaJpZM4XJAW_\n.\n. Please see https://github.com/mlaursen/react-md/pull/810 for this.\n\nI still feel like the snackbar needs a way to provide additional actions in order to allow a dismiss button (ex. undo + dismiss). Would like to know if you have thoughts on how to approach that.. ",
    "lawnboyy": "It looks like the build passed, but I'm getting the warning below. There may be something about the architecture that I'm not aware of regarding parent/child prop relationships. Please provide some guidance on how to address this. Thanks!\nWarning: React does not recognize the activeElementFocus prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase activeelementfocus instead. If you accidentally passed it from a parent component, remove it from the DOM element.\n          in div (created by FocusContainer)\n          in FocusContainer (created by Paper)\n          in Paper (created by Dialog)\n          in Dialog (created by DialogContainer)\n          in CSSTransitionGroupChild (created by TransitionGroup)\n          in span (created by TransitionGroup)\n          in TransitionGroup (created by CSSTransitionGroup)\n          in CSSTransitionGroup (created by DialogContainer)\n          in DialogContainer (created by WrapperComponent)\n          in WrapperComponent. Great! Thanks for the prompt response!. Any chance you could publish this in the next day or so? We are pushing a release Tuesday December 4th, and would like to put this in if we can. Thanks so much for your help!. No problem, thank you!. done.. ",
    "ryanmurakami": "Yeah! I didn't know it either. The mdn documents don't mention it either: https://developer.mozilla.org/en-US/docs/Web/Events/focusout. ",
    "startupgurukul": "Hi  Mikkel, \nThanks for the great library, any ETA on v2.0. Looking forward. . ",
    "mckincy": "Great! Thanks for your help. :). "
}