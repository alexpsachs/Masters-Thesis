{
    "fgnass": "I see what you mean. Animating the z-index would flicker. Using translate3d(0,0,z) with transform-style: preserve-3d on the parent element could be used to achieve the desired effect, though I can't think of a cross-browser (i.e. VML) solution.\n. Here is a quick hack: https://gist.github.com/1153642\n. I'll close this issue for now, as I don't see a way to implement this (flicker-free) for all browsers. So officially overlapping lines are currently not supported by spin.js. I'll revisit this issue when I experiment with the different animation techniques outlined in #12.\n. Well, actually the minified version already uses combined var statements.\nI personally prefer to let uglify.js do that job, as having one var statement per variable makes it easier to merge changes. \nThis way adding a new variable is just a matter of a inserting a new line (from a Git point of view) while the surrounding lines stay untouched (as you never need to convert a semicolon into a comma). So you'll less likely get a conflict when two people add variables to the same function.\nI think the resulting file-size after running uglify spin.js > spin.min.js should be about the same. Let me know if you find a way to squeeze more bytes out of the minified version, though!\n. That's strange, works for me in IE 6.0.2900 SP2:\n\nWhich version are you using?\n. Thanks, fixed it.\n. I also considered that option but decided to go for the singe-file solution as stripping the VML part only saves about 380 bytes after gzipping. And since it adds an extra request for the browsers which are already the slowest ones, I thought having a single file would offer the best trade-off.\n. With only one throbber and shadows turned off things already look much better.\nIt would probably make sense to reduce the number of animations. One approach would be to use a rotation instead of opacity animations. I did this in a jQuery plugin I wrote about a year ago: http://neteye.github.com/activity-indicator.html\nThe page contains 5 throbbers and uses much less CPU.\nThe problem is that the rotation sometimes becomes eccentric when you zoom in on iOS. Also it doesn't look that smooth with a small number of lines.\nAnother alternative could be using canvas, like Thijs van der Vossen did here:\nhttp://stuff.vandervossen.net/temporary/spinner.html\n. On my machine (a MacBook Pro) all tested IE versions perform unexpectedly well, indeed they even outperform Chrome.\nIE6, IE8, IE9 (running inside VirtualBox): Very smooth animation, 0-2% CPU\nAmong the WebKit browsers, Safari currently wins:\n- Chrome 14: 8-10% (Google Chrome Renderer)\n- Safari 5.1: 4-5%\nThe only two browsers that currently suck (CPU-wise) are Firefox and Opera:\n- Opera 11: ~20%\n- Firefox 6: ~41%, even up to 77% with shadows turned on (!)\nThe animation runs smoothly on an iPad 1, but I have no idea how to measure the CPU impact there.\nI'll leave this issue open so that others can post their performance stats here, too.\n. When forced into using a setTimeout()-based animation with 16fps, the CPU usage drops to ~20% in both Opera and Firefox. This might be an option, but I'd really like to get around UA-sniffing somehow ...\n. @glennfu In my earlier tests requestAnimationFrame() resulted in even higher CPU usage due to the increased frame rate.\n. BTW, when I view a GIF on http://ajaxload.info/ in Firefox, CPU load is at ~16%. Maybe this is related to one of these bugs: 595671, 645761, 484793. I'll try to reset my profile and check CPU usage on other platforms and in older FF versions.\n. Under Windows XP Firefox 6.0.2 only uses 0-3% CPU so this seems indeed to be a MacOS-only issue.\n. I also thought about that (the color matching) but decided to leave this up to the glue code in favor of a minimal footprint. I've updated the jQuery integration example on the project homepage to read the color from the CSS.\n. There already is an opacity option which defines the the minimum opacity. The opacity is animated from that minimum to the maximum, which currently is always 1. Is this what you had in mind or would you like to control the maximum value instead? \n. @optixx Let me know if this fix works for you.\n. I agree with Dimitry that the box2d API sucks, but I'd really like to keep the file-size below 3000 bytes. Implementing this feature would add another 28 bytes (minified) which I'd prefer to save for something more useful.\n. Theoretically (according to caniuse.com) it should even work in iOS 3.2 but I have no such device to test it, which is why the list says iOS 4.\nAs it works perfectly on an iPhone 4, I'll close this issue for now. Feel free to re-open it you find out how to reproduce the error.\n. Weird indeed. The demo now uses the minified version and seems to work fine.\n. I'll close this issue for now, as uglify, closure-compiler and jsmin produce working results.\nIf it still doesn't work for you, please post a link to your minified code, as well as the name/version of the compressor being used.\n. Create a DIV and center it on the screen manually. Then use this DIV as target:\n<body>\n  <div id =\"center\" style=\"position:fixed;top:50%;left:50%\"></div>\n  <script>\n    new Spinner().spin(document.getElementById('center'));\n  </script> \n</body>\n. Do you see the outline of your div when you inspect it with firebug? Maybe its positioned offscreen or the content is hidden due to an overflow:hidden rule?\n. If you post your code at http://jsfiddle.net/ (or somewhere else) I'll take a look.\n. The DIV element doesn't exist yet when your code is executed. Either place your script block behind the DIV or execute the code onload. Here's a working example:\nhttp://jsfiddle.net/fgnass/UwdxJ/\n. No problem, you're welcome.\n. Looks as if VML elements can't be re-used, once they have been removed from the DOM.\n. Yes, now it is ;)\n. Could you verify if this indeed fixes the issue? (Since upgrading to Lion, my iPhone Simulator refuses to run older SDKs). But according to https://bugs.webkit.org/show_bug.cgi?id=26150 this should do the trick.\n. Hm, does that particular Webkit support -webkit-animation-delay at all? What does\njavascript:alert(typeof document.body.style.WebkitAnimationDelay) say?\n. If it says string, do these red squares rotate in sync? https://bugs.webkit.org/attachment.cgi?id=44350\n. Good to know, thanks for testing!\nI updated the animation code (once again) to fix that annoying  glowing jellyfish issue (#12). It now doesn't use animation-delay at all anymore. Could you check if spin.js still works on your device?\nThanks again,\n-Felix\n. Unfortunately rgba() colors are not supported in VML and (in contrast to opacity changes) color animations are not hardware-accelerated in current browsers. Anyway, I'll keep your feature request in mind for the next version. In the meantime: What about using {shadow: true, color: '#fff'} as workaround?\n. That's a bug. Wait a sec ...\n. Fixed by 16b004c16a3a24bb1ceb9cd04221baa052d34033\n. I'm really sorry that I have to reject this pull request. One of the project's goals is to be as compact as possible, so we have to keep the number of features to the absolute minimum.\nAs with #10, a feature like this is much easier to implement when you have an abstraction layer like jQuery at your disposal: \nvar el = $(new Spinner().spin().el).css('position', 'absolute').appendTo('body');\n$(document).mousemove(function(e) {\n  el.css('top', e.clientY).css('left', e.clientX);\n});\nMaybe you find an elegant way to bake this into the spin.js jQuery plugin?\n. Hm, works for me in Chrome 15.0.874.7 ... Have you tried the latest canary build?\n. It works for me in Chrome 15.0.874.15 dev, which is the version you currently get when you install the Chrome Dev Channel on Linux (Ubuntu 11.04). Please let me know if the issue also occurs in a stable Chrome build, as otherwise it's probably more likely a temporary Chrome issue.\n. Cool, thanks for testing!\n. Spin.js is now a UMD module and can be loaded with AMD or CommonJS loaders to keep the global namespace clean.\n. Hm, a minOpacity setting would be much easier to implement than a second color. Would that work for you too?\n. You're right, the opacity setting already does exactly that. Unfortunately\nthe feature you're looking for can't be done in spin.js as one of our main\ndesign goals is to deliver the same visual result, no matter if rendered\nvia VML or DIVs. The amount of code needed to interpolate rgba colors and\nmap them back to #rrggbb + opacity for VML would conflict with our second\ngoal: to have a file size not larger than an animated gif.\nThis would better fit into a project that offers a CSS-only solution. Such\na project could also offer to output static CSS/Sass code. Not sure if a\ntool like this already exists \u2013 if you find one, please post the link here\nso that we can refer to it whenever people ask for similar features.\nBart Nagel notifications@github.com schrieb am Do., 1. Okt. 2015 um 08:55:\n\nIsn't the existing opacity option actually a minopacity?\nNo, it wouldn't do the trick in my case. I want to fade from opaque red to\nmostly transparent white. Having \"active\" and \"inactive\" colours would do\nit, if they can be specified in rgba format. Spin.js would just interpolate\nbetween the two, or leave that up to a CSS transition if practical.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/fgnass/spin.js/issues/30#issuecomment-144638017.\n. Could you please post a screenshot? I've opened the page in two different IE9s as well as on browserstack and didn't see any errors.\n. This happens because in IE the animation is done using setTimeout() whereas Firefox uses a CSS animation. While the CSS-based animation is rendered by a separate thread, timeouts are processed by the same thread that performs your calculation.\n\nA possible solution would be to split up your calculation into several smaller steps which invoke each other using setTimeout(..., 0). This way the whole UI would become more responsive as this would allow IE to update the screen while your script is busy.\n. You can check the el property:\nvar spinner = new Spinner().spin();\nif(spinner.el) {\n   // It's spinning ...\n}\n. There are now new config options in 1.2.4: zIndex, className, top and left.\n. Can you send me a link to an example?\nIs the content of your iframe loaded from the same domain as spin.js?\n. Hm, I wonder if inserting <style type=\"text/css\">/* CSS rules here */</style> would make any difference.\n. Hi everyone! Could you please try this again with the current HEAD? It contains a fix for issue #39 which is probably related to this error.\nI noticed that in FF documents.styleSheets[documents.styleSheets.length-1] always is the Firebug CSS (if installed), which might also explain the security error. If that's the case, the patch for issue #39 should fix this, too.\n. Unfortunately I still can't reproduce this issue. Viewing example.html (from the master branch) works in Safari (5.1.1) even if I load spin.js from another domain (raw.github.com vs. localhost) or include an external stylesheet. @phishbot Any chance you could post a link to a non-working example?\n. I pushed another version to the master branch which uses the sheet or styleSheet property of the inserted style element. Still needs some more cross-browser testing. Let me know whether this works for you.\n. Actually the sample code in the usage section is already coupled to the sliders. Perhaps I should add a hint, since this gem isn't very obvious.\n. Awesome, thank you for looking into this! I wonder if this also fixes #36?\n. Fix is here: https://github.com/bpm/bpm/issues/89#issuecomment-2818783\n. Sure, but that's outside of the scope of this project. You could use one of these CSS3-based solutions or Lightbox_me or you could build it yourself following this tutorial.\n. I'd say so.\n. I think this should be fixed in v1.2.4 since it doesn't use negative margins anymore. At least a very similar issue in IE6 no longer exists.\n. Cool, thanks for testing!\n. Sounds like an issue caused by hardware acceleration. You could try to comment out this line and see if it's still flickering. If that helps we can start looking for work-arounds that fix the flashing but continue to use the hardware accelerated renderer.\nBTW I did't succeed to reproduce the issue, so maybe its caused by a certain combination/interference with the CSS of the surrounding page? I tried it on the spin.js homepage and on this plain example page with Chrome 16.0.912.63 on OS X.\n. If I understand this correctly, it causes problems in browsers that do support 3D transforms, so testing the availability of this feature wouldn't help. I think making it configurable is the best option we currently have. I'm just wondering if we should disable hardware acceleration by default?\n. Could you please fork this Fiddle and modify the test-case so that the issue occurs after pressing the Remove/Insert buttons? Also please add a note in which browser(s) this happens.\n. Sorry for not pulling this, but there are so many module/component/registry things out there that I don't want to start listing them all. I'm sure Rails users will find that gem anyway ;)\n. Which would do what?\n. No, no, not dumb at all. Having the possibility to render a semi-transparent VML rounded-rect as background would be a nice feature for sure. This would require some additional config options though. Something like:\nbackground: {\n  color: '#000',\n  opacity: 0.7,\n  padding: 20,\n  radius: 20\n}\n. Yeah, but that wouldn't work in oldIEs. For now, the easiest solution would probably be to use PNG as background image on your surrounding DIV. I'll keep this issue open as feature request for spin.js 2.0.\n. In modern browsers you can already select the outer DIV using div[aria-role=progressbar]. But as you'll see, just adding a class won't be enough, since that DIV 0px high, as wide as its offsetParent, and the spinner is positioned outside of it!\nIn order to achieve what you want, spin.js would have to create yet another container. The complex part about that is the calculation of the correct top/left offsets. It's certainly doable, but not that trivial.\nBut for now I'd say it's much easier to add that wrapper div within your project's jQuery glue-code instead of implementing a generic mechanism that works in all situations.\n. May I kindly ask you to post a link to a non-working example, preferably on jsfiddle? The spin.js homepage works perfectly for me in IE8 and below, so it would be interesting to find out under which circumstances the issue appears.\n. @Jayflux Have you tried the new version I pushed earlier today?\n. I see, but appending will only work if the container is position:relative or position:absolute, too. Otherwise the spinner won't be centered correctly.\n. You can now specify a z-index in v1.2.4. The default is a very high value (2e9) which fixes the issue.\n. The defaults already get merged into the provided options object inside the Spinner constructor:\nhttps://github.com/fgnass/spin.js/blob/gh-pages/spin.js#L142\nThe jQuery plugin only calls $.exdend in order to fill in the runtime-color in case no color value has been explicitly specified.\n. I'm not sure what you mean. Here's an example that uses the jQuery plugin from the spin.js homepage: http://fgnass.github.com/spin.js/example/jquery.html\nIt works also when no options are passed at all. What problem exactly are you experiencing?\n. You're welcome. I'll leave this issue open so that you can come back and post your test case.\n. While I totally understand this feature wish, I want to keep the core library as simple as possible. The basic idea is to put all layout/positioning stuff into a separate jQuery plugin and let spin.js only do the actual rendering. The main purpose of the built-in absolute positioning is to normalize the differences between the CSS and VML variant.\n. I haven't used ender myself but I would accept pull request.\n. First, you only need to reference one JavaScript file. Either spin.js or spin.min.js, not both.\nSecond, your last line is not needed and causes the error. Just remove that spin(); call and everything should work.\n. In browsers supporting position:fixed you could do just that, wrap the spinner in a DIV with a fixed position. In other browsers you have to center the element using JavaScript. See this stackoverflow question for some options.\n. There is no jQuery plugin called .stop(). That's a method of the pure JS API. With jQuery you have to use .spin(false) in order to stop the spinner.\n. In that case some example code (at http://jsfiddle.net or similar) would be really appreciated.\n. I think what you are trying to achieve is simply not possible in most browsers. You could submit your form into an Iframe or post it using AJAX instead. Leaving a page (even by submitting a form) will usually stop the browser's UI from updating.\n. The idea is that the jQuery plugin reads the runtime text color of the container, i.e. the parent of the .spinner element. You can either modify your selector accordingly or pass the color as option to the .spin() method. Please note that the automatic CSS color matching only works with the jQuery plugin, the pure JavaScript API does not provide that feature.\n. Does your site use Omniture for tracking? In that case it could be the same issue described here: https://groups.google.com/forum/?fromgroups#!topic/cufon/3GYxTiCZF7A%5B1-25%5D\n. ... or maybe a PNG fix (like DDbelatedPNG or Unity PNG fix)?\nThey both seem to cause this error when other VML elements are present:\nhttp://brainof-dave.blogspot.de/2011/03/attribute-only-valid-on-vimage.html\nhttp://www.mediadog.ca/blog/post.cfm/cufon-javascript-error-v-image\n. The \"50%22px\" case is now addressed by 6c7c60798d03db24c3c0fa3742b7e52c8165aa7e. I'll update the documentation to state more clearly that only numeric pixel values and auto are valid options, but not arbitrary CSS units.\n. You can re-use a Spinner instance but you always have to pass the target element to the spin() method.\n. @daniel http://fgnass.github.io/spin.js does use v1.3.2. The fact that the script is included with a ?v=1.2.8 parameter might be a little bit confusing though. This was just a cache-buster to prevent 1.2.7 from being served back than.\n. Do you guys have any toolbars or browser extensions installed? It works for me both in BrowserStack as well as in the IE7/8 VMs available at http://www.modern.ie/en-us/virtualization-tools\n. ... or some Windows group policies or IE's compatibility mode?\n. Here is screenshot of my IE7 VM. How does your's look like?\n\n. Any idea why? Has it to with with what site you visited before? Please let me know if you find a way to reproduce it!\n. Does it go away if you set hwaccel to false?\n. Closing this issue as such a feature is out of the project's scope. To disable a form element you can set its disabled property to true: http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#enabling-and-disabling-form-controls:-the-disabled-attribute\n. Using a ! usually serves a different purpose, i.e. turning the function statement into an expression. If you concatenate this file\n!function() { alert('bar') }()\nand this one ... \n!function(){ alert('bar') }()\n... without a new line (or semicolon) in between, you'll still get a SyntaxError: Unexpected token !.\nI'd say that any concatenation tool that doesn't insert a new line or semicolon is seriously broken, since a lot of popular libraries (including jQuery, bootstrap or prefixfree) don't come with a leading semicolon.\nAnyway, I think I'll change the IIFE pattern from parens to a leading bang since it saves one byte.\n. This is a dynamically created stylesheet (see https://github.com/fgnass/spin.js/blob/gh-pages/spin.js#L38) which appears to be empty but does in fact contain rules. You can inspect the element in your console:\n```\n\n$('style:eq(1)').prop('sheet').rules[0].cssText\n\"@-webkit-keyframes opacity-60-25-12-13 { \n  0% { opacity: 0.9039711538461539; }\n  92.3177% { opacity: 0.25; }\n  92.3277% { opacity: 1; }\n  52.3177% { opacity: 0.25; }\n  100% { opacity: 0.9039711538461539; }\n}\"\n``\n. No problem, you're welcome.\n. Have you seen http://rubygems.org/gems/spinjs-rails?\n. Thanks for your take on issue #35! I'd love to accept this pull request, but in order to get included it has to work with VML too, as this is the core idea of spin.js -- a consistent look across all platforms. Offset, blur and opacity could be easily set via the blur filter in [line 284](https://github.com/fgnass/spin.js/blob/gh-pages/spin.js#L284). Changing the color would probably be a bit harder (if possible at all). I could imagine that omittingmakeShadow=1` and rendering the segments in the shadow color could do the trick.\n. Another possible route would be to create a spin.js spin-off (so to say) that drops oldIE support completely. Then again it would be advisable to some performance tests in order to decide if CSS is still the most suitable rendering technology. I could imagine that a canvas-based solution would provide better results on some platforms.\n. I just tested the shadow settings in WebKit and it still looks a little bit buggy:\n\n\n1) The individual segments have a solid (non-blurry) outline in shadow color.\n2) The transform-origin of the shadow seems to be in the center rather than the lower left corner. Hence the rotation does not match.\nI used the following settings:\n{length: 16, color: '#ff0000', shadow: {top: '-10px', color: '#fff'}}\nIn terms of VML testing: The easiest way to test different IE versions is to use http://www.browserstack.com/ (it's fee).\nJust create a copy of one of the example pages (e.g. positioning.html) and add some test cases.\nYou can test your own fork by opening http://umbraengineering.github.com/spin.js/example/settings.html inside a browserstack window.\nIf you prefer local testing, the easiest way to install various IE versions is http://xdissent.github.com/ievms/\n. VML aside, I just noticed two other oddities in the CSS version:\nFirst, there's a z-index issue, where the green shadow at two o'clock is over the 3 o'clock element.\nAnd second, with greater offsets it looks very unnatural that some shadows are cast to the right while others are cast to the left.\nThe only solution I can think of to solve both problems would be to draw two distinct layers (just as in the VML version), the lower one containing the shadow, the upper one containing the actual element. But I guess that doubling the amount of elements could have a performance impact. \n. Okay, that's strange. FWIW on http://fgnass.github.com/spin.js/example/settings.html the 1st element (at 3 o'clock) is blinking, but the others aren't. The keyframe animation that makes it blink is created dynamically. The first one works:\n@-o-keyframes opacity-60-25-0-12 { 0% { opacity: 0.25 } 0.009999999776482582% { opacity: 0.25 } 0.019999999552965164% { opacity: 1 } 60.009998321533196% { opacity: 0.25 } 100% { opacity: 0.25 } }\n... while the second doesn't:\n@-o-keyframes opacity-60-25-1-12 { 0% { opacity: 0.25 } 8.34333324432373% { opacity: 0.25 } 8.353333473205566% { opacity: 1 } 68.34333038330078% { opacity: 0.25 } 100% { opacity: 0.25 } }\n. I'm afraid that's out of the scope of this library. Mostly because it doesn't require any cross-browser abstraction but also because I want to keep spin.js as lightweight as possible.\nBesides that, if a countdown can be displayed, a progress bar would probably be a better choice. To quote the iOS Human Interface Guidelines:\n\nUse an activity indicator [...] to show that processing is occurring, without suggesting when it will finish.\n. That happens if the value is specified as string rather than as number. I'll add a parseInt to accept also strings in the next release.\n. If you use the jQuery plugin you can stop all spinners like this:\n\n$('.spinner').parent().spin(false)\n. Sorry, perhaps you might want to take a closer look. It's a client-side only form on a static page that isn't posted anywhere.\n. Could you please elaborate a bit? Was that link supposed to contain malicious code? In that case it might have gotten filtered by the GitHub comment system. I just see a plain link to a static page. It would be helpful if you could describe the attack vector you are concerned about with some more details.\n. I'd say this is the expected behavior. Spin's style tag always has an empty innerHTML as its rules are created programmatically.Hence, $('style:first').html() will return an empty string! So if you set a new innerHTML the animations get overwritten.\n. There's a trailing semicolon now.\n. Could you provide a little more detail please? This page http://fgnass.github.com/spin.js/example/positioning.html (which uses the non-minified version) works perfectly well for me in IE7.\nLike every browser IE7 supports automatic semicolon insertion, so whatever causes trouble is most likely not caused my missing semicolons.\n. Fix landed in v2.0.0\n. I hand-picked some of your changes, thanks.\n. I initially thought about this too, but unfortunately it won't work for the VML fallback. My rule of thumb for this project: only include features that look the same in all supported browsers.\n. This is the opacity attribute of the VML fill-element:\nhttp://msdn.microsoft.com/en-us/library/bb229612(v=vs.85).aspx\nIf it doesn't work for you it's probably because of\na) some other conflicting library on your page or\nb) a browser plugin interfering with it.\nTo verify please view the spin.js homepage in a vanilla IE, for example on http://browserstack.com.\n. If you want any of these topics to be tracked please file an individual issue. Also, please search the existing issues (including the closed ones) before opening a new one.\n. This happens when the page uses require.js (or another AMD module loader). In that case spin.js exports itself as AMD module instead of polluting the global namespace. Your options in this case:\n- Load spin.js via AMD\n- or (temporarily) set define.amd to false\n. Yes, you need to pass the DOM element, not the jQuery instance: http://jsfiddle.net/v7czA/1/\n. Sorry, this is out of scope of this project.\n. Sorry, no. This would require a different drawing algorithm.\n. Hm strange, can you post a screenshot? Works flawlessly for me in Aurora 20:\n\n. Hm, this would require switching all ancestors with display:none to display: block; visibility: hidden; position: absolute before measuring the dimensions and then switching them back. Probably quite a lot of code to add \u2026\nApart from that even a hidden spinner eats CPU cycles (at least in browsers that don't use CSS animations) so the best solution would probably be to call spin() right after showing the hidden DIV rather than before.\nAs a compromise we could allow passing targetWidth and targetHeight as option values. This way we could leverage the jQuery measuring functions without duplicating code:\njavascript\nnew Spinner({targetWidth: $(el).width(), targetHeight: $(el).height()}).spin(el)\n. v2.0.0 now absolutely positions the element at top: 50%; left: 50% instead of calculating the position.\n. Unfortunately styling the elements via CSS won't work for the VML fallback (see #107).\n. v2.0.0 now absolutely positions the element at top: 50%; left: 50% instead of calculating the position which should fix this issue.\n. There's now a semver tag for the latests release (1.2.8).\n. To use spin.js with the Dojo Toolkit you have to load it as AMD module:\nhttp://jsfiddle.net/fgnass/ACTTY/\n. No, that's not possible. Sorry for the late answer, I somehow missed the issue notification. \n. No sorry, I'm currently not working on this project so there won't be any new features in the near future.\n. That's strange, the re-initialization shouldn't take that long as all it does it to create a bunch of DOM elements. Please keep in mind that if you don't call stop() spin.js will continue to use the CPU on browsers that don't support CSS animations as it falls back to a setTimeout-based approach in that case.\n. I'm closing this as I can't reproduce the described behavior. Please provide an example on JsFiddle/JsBin/... and re-open the issue.\n. The repository now includes a jQuery plugin: http://fgnass.github.com/spin.js/jquery.spin.js\n. I'm no AMD expert, but the RequireJS docs suggest not to use self-assigned module names, but to let the RequireJS optimizer do the job: http://requirejs.org/docs/api.html#modulename\nHere is a working example that loads spin.js as well as jquery.spin.js, which are both anonymous AMD modules.\n. The repository now contains http://fgnass.github.com/spin.js/jquery.spin.js which supports AMD and CommonJS module loaders.\n. When used as AMD module the global Spinner variable isn't exposed to prevent namspace pollution. The example directory contains a demo that shows how to use require.js to load jquery.spin.js. You can view the resulting html here: http://fgnass.github.io/spin.js/example/amd.html\nTo use the vanilla Spinner constructor without the bundled jQuery plugin you have to add it to the argument list:\njs\nrequire(['jquery', 'spin'], function($, Spinner) { // <= here!\n  var el = document.getElementById('login_spin');\n  new Spinner().spin(el)\n});\n. No, this option only exists for debugging and performance profiling reasons and should always be enabled.\n. Thanks, good point. I added the following sentence: \n\nSpin.js dynamically creates spinning activity indicators that can be used as resolution-independent replacement for AJAX loading GIFs.\n. I suppose you want to pass a jQuery object as target? The spin() method expects a single DOM element, hence if you want to do something like you wrote above you would either have to write\n\njs\nnew Spinner().spin($('h3').get(0));\n\u2026 to target the first H3 element or:\njs\n$('h3').each(function() {\n  new Spinner().spin(this);\n});\n\u2026 to display a spinner for all matched elements. Alternatively you can also use the jQuery plugin in which case the above can written as:\njs\n$('h3').spin()\n. You have to manually un-center the spinner and position it absolutely:\nhttp://jsfiddle.net/TSJGZ/\n. I'm sorry that you find it hard to read the spin.js source code, but it strictly follows the npm style guide which is designed to reduce visual clutter and is currently my preferred coding style.\nPlease understand that I won't include any jQuery code since spin.js is library-agnostic by purpose. I would accept a pull-request with a Gruntfile though that merges spin.js and the jQuery plugin into one minified file.\nI'm ok with \"use strict\" and the UMD pattern and would happily accept a separate pull-request as long as it respects the spin.js coding style.\n. Fixed. Thanks for reporting!\n. The spinner is appended to the given target and since input elements can't have child elements this doesn't work. To achieve the desired effect you have to use a little CSS: http://jsfiddle.net/gyu67/\n. Hm, there has never been such a method in the official spin.js plugin, only in the Spinner object. To stop a spinner via jQuery you have to call $('#el').spin(false).\n. Strange, maybe you were using a 3rd party plugin? The official one only exists since yesterday and hasn't changed since the first commit: https://github.com/fgnass/spin.js/commits/gh-pages/jquery.spin.js\nBTW, you can invoke the underlying stop() method like this:\njs\n$('#test').data('spinner').stop();\n. If you put that code into a Fiddle I promise to take a look.\n. Fixed.\n. Here is a working example: http://jsfiddle.net/fgnass/xSDGx/\nPlease free to edit the Fiddle in order to illustrate your issue, then come back here and re-open.\n. Here is an example: http://jsfiddle.net/DSNqe/3/\n. Here is an updated version of the demo that works with 2.x: http://jsfiddle.net/fgnass/dytg7k17/\n. Very strange, #default#VML refers to a built-in DHML behavior and shouldn't result in a HTTP request. The behavior must be set in order to turn the element into a VML element.\n. Some tool is messing up the URLs in your all.js bundle. It contains the String behavior:\"url(../bundles/boatbureauboat/js/#default#VML)\" which should read as behaviour:url(#default#VML) instead.\n. I'm sorry, I appreciate your work, but this out of scope of this library. I want to to keep the codebase as small as possible since it has to compete with an animated GIF in terms of file-size. And this is something that can be easily done externally with just a little CSS: http://jsfiddle.net/DSNqe/3/\n. You have to set the container to something other than display:none before you invoke spin() since otherwise the script can't measure the dimensions. Here is a working example: http://jsfiddle.net/fgnass/JKHCJ/\nAlternatively you could place #overlay_center outside of #overlay. This has the additional benefit that the spinner itself is fully opaque (instead of opacity: 0.5): http://jsfiddle.net/fgnass/EKWbw/\nIn that case the order of calling show() and spin() doesn't matter.\n. If you use the official jQuery Plugin you can stop it by calling $('.spinner').spin(false).\n. This can be done using the jQuery plugin.\n. Could you please provide a little more detail on what exactly you are trying to do? Here is an example that shows how to modify a built-in preset if this is what you want: http://jsfiddle.net/fgnass/R2Ve4/\nIf not, please feel free to modify the fiddle to illustrate what you are trying to achieve.\n. Thanks al lot for your effort, I really appreciate your work. That being said I'd really prefer to have Testling-CI tests for spin.js as this would allow true cross-browser testing. You know, Travis is a great platform and I use it for most of my Node projects, but I think Testling is a better option for client-side code.\n. Did you add the commit-hook?\n. Oh damn, you are absolutely right, it looks as if there's no way to test other branches. I think the best option would be to add a master branch and use it for integration tests and rebase to gh-pages to do releases.\n. I haven't used any of them for CI tests yet, only for manual testing so I can't really say how they compare to Testling-CI. Sauce Labs now also provides status badges which is quite cool.\nAnother problem I came across while looking at your test cases is that the expected DOM structure varies from browser to browser. The test that look for DIVs will fail in old IEs where VML nodes are used instead and test for animation names like opacity-50-25-0-12 will fail in all browsers that use setTimeout() based animations.\n. I just checked the spin.js homepage as well as the examples in Opera 12.15 (Build 1748) and they all work as expected. Please post an example of your code on jsfiddle so that I can take a look.\nRegarding em instead of px: With the current implementation this wouldn't work as spin.js performs calculations with given values and Element.offsetHeight to perform the vertical centering. Maybe a future version will use a different method to center the element which would allow different units to be used.\n. Spin.js creates CSS rules dynamically and adds them to the document in which the script is loaded. To make this work you have to load spin.js inside the iframe rather than the parent window.\n. You could probably clone the created rules but this sounds really painful. If you control the iframe's content why not load the script a second time? It will be served from the browser's cache anyway.\n. Hm, is there anything special on your system? It works for me in a vanilla IE 9: https://dl.dropboxusercontent.com/u/176169/Screenshots/spin.js-ie9.mov\n. Still no artefacts here: https://dl.dropboxusercontent.com/u/176169/Screenshots/spin.js-ie9-2.mov\nMy guess is that this is an issue caused by the VM and its video drivers.\n. v2.0.0 now absolutely positions the element at top: 50%; left: 50% instead of calculating the position which should fix this issue.\n. Sorry, we can't do that. Why don't you just set window.define and window.require to undefined then? You could also save the original references and restore them once spin.js is loaded.\n. Sorry, can't do that \u2013 the conditionals are there on purpose. You can read more about this pattern at https://github.com/umdjs/umd\n. I'm afraid there's nothing we can do to further improve the performance. Even in modern browsers it's a good idea to use only one spinner at the time. If you really, really need more indicators I would recommend to use GIFs instead.\n. Since v2.0.0 the spinner is absolutely positioned at top: 50%; left: 50% of its offset parent which should make this a lot easier.\n. http://jsfiddle.net/fgnass/EKWbw/\n. While overlays and spinners are certainly somehow related I don't want this to be part of this library.\nNumber one reason for this: spin.js supports IE6 and other ancient browsers while the overlay feature doesn't (it requires opacity and position:fixed). Also to block interactions one might want to do even more (like preventing scrolling and keyboard input) which is out of scope of this project.\n. Please include a link to JsFiddle/JsBin with a simplified example that triggers the bug.\n. Uh, why not?\n. If you say recent build of Chrome, do you mean Canary?\n. Sure, I'll take a look if you send it to fgnass@gmail.com.\n. I think it would be a good idea to change the spin.js code in such a way that the returned element has the exact size of the visual bounding box instead of 0x0 as it is today. One could then easily set a background image via CSS. I would also remove the whole positioning code from the core library and leave it up to the user (or the jQuery plugin) to do the actual positioning/centering. What do you think of this approach?\n. I just remembered that the package.json already contains a component section. Does it make sense to have both?\n. Hm, probably for discoverability I guess?\n. Sorry, I can't reproduce this. If this is still an issue please re-open with a jsfiddle/jsbin link attached.\n. Support for percentage values landed in v2.0.0.\n. Works for me in both Desktop and Mobile Safari: \n\n\n. We now have a master branch and a Gruntfile to update the gh-pages branch. And there's a 1.3.3 release which now should be properly tagged.\n. Sorry, I forgot to push the tag. It's there now.\n. Hm, strange. Here is a working example that loads spin.js via Dojo's module loader: http://jsfiddle.net/fgnass/ACTTY/\n. v2.0.0 now has proper support for percentage values.\n. You have to use a different class-name for your target element since .spinner is used internally by spin.js. Alternatively you can change the className option to some other value.\n. I won't include any build artefacts in the master branch, sorry. The minified version would diverge from the unminified one and could potentially cause a lot of confusion. Re-building the minified version manually on each commit/push is not an option. In fact im considering to drop the minified version altogether. If you care about performance you'll have a local build-step anyways which is the perfect place to bundle & minify all your scripts. Also, if the raw sources are concatenated first and then minified in one go the name mangling will allow a much better gzip compression ratio.\n. To use spin.js together with dojo you have to load it as AMD module like this:\nhttp://jsfiddle.net/fgnass/ACTTY/\n. I'm not sure if I understand your question correctly. There is no option called duration. The amount of time for which the spinner is visible is controlled by the application using it:\n``` js\nvar s = new Spinner().spin(target);\n// stop it after 10s\nsetTimeout(function() { s.stop() }, 10000); \n// ... then change your mind and stop it after 3s\nsetTimeout(function() { s.stop() }, 3000);\n``\n. Thanks, merged.\n. Thanks, fixed it.\n. Looks as if there was a \".spinner\" rule in the CSS that adds padding-bottom. I suppose this shall target the spinner's container. But since \"spinner\" is also the internal classname spin.js assigns to its dynamically created element, this leads to an unwanted side effect.\n. In that case you might want to update to spin.js v2.0.0 which no longer does the maths but uses pure CSS values (like 50%) for positioning.\n. This would have to be an automated process. See #199 for why this is not an option.\n. The parent must be set toposition:relative(or absolute). That's all:\nhttp://jsfiddle.net/fgnass/LJU9s/\n. Here is a version with with min/max dimensions that works fine for me: http://jsfiddle.net/fgnass/LJU9s/3/\n. @tstar since version 2.0.0 the container element must be set toposition:relative(or fixed).\n. Can you post an example on JsFiddle or JS Bin?\n. Did you inspect the green element in the dev-tools to double check that the position property doesn't get overwritten accidentally by another CSS rule?\n. JqueryUI sets thedisplayproperty of the container totable-cellwhich doesn't support relative positioning. Wrap your spinner in another DIV and you shall be fine.\n. landed in 2.0.1\n. Can you post a screenshot? Looks good to me in Chrome (stable) on OS X.\n. This is how it looks on OS X:\n![screen shot 2014-04-24 at 22 06 03](https://cloud.githubusercontent.com/assets/89450/2794384/0495e362-cbec-11e3-8e17-5e3b0d661b4d.png)\n. Sorry for not coming back to you on this earlier. I was wondering: Since the purpose of the-webkit-backface-visibility: hidden;trick is to force the browser into using hardware acceleration, spin's{ hwaccel: true }` option should theoretically have the same effect. I noticed that the Hwaccel checkbox in your screenshots was unchecked \u2013\u00a0have you tried if activating it has the same effect as your patch?\nFYI: The wiggling does not happen under OS X, seems to be a Windows-only issue.\n. Works for me in a vanilla IE8 running under Windows XP:\n\nAre there any plugins installed or Windows group policies in place?\n. Since spin.js dynamically creates a stylesheet, the JavaScript must be loaded from the same domain as the document. You can verify that it works in FF by opening the project's homepage via HTTPS: https://fgnass.github.io/spin.js/\nAs there is nothing we can do about it I would suggest to close this issue.\n. Oops sorry, I forgot to push it.\n. Hi, can you elaborate a bit why adding the typeof check makes any difference? Also, what about AMD implementations where require.amd is just true?\n. I'm hesitating a little as changing this will possible break other tools like deamdify that look explicitly for the umd/AmdWeb pattern.\nOn the other hand the AMD spec defines that the property has to be an object so I guess the check in deamdify should be more lenient anyway and I can forget about my initial concern. \nMaybe you should send a PR to the https://github.com/umdjs/umd too, since otherwise this pattern will keep popping up all around the net. But given the fact that UMD is quite a de-facto standard, fixing the require.js optimizer might be an easier solution.\nBottom line: I think it's a good idea to change the test condition in spin.js ;)\nBefore I merge this PR I'd like to check if we can drop the last condition (&& define.amd) as this is totally redundant, since an object will always be truthy (... well okay, except for document.all but hey). Could you verify if require.js still works without that last part? \n. Here is an example that stops the spinner after 10 seconds or when the button is clicked (whatever comes first): http://jsfiddle.net/fgnass/Ewvmr/\n. You have to add position:relative to your DIVs. Otherwise the the spinners are positioned relative to the body and the second one is placed exactly on top of the first one: http://jsfiddle.net/fgnass/W6dAz/\n. Position absolute means that element is positioned relative to its closest positioned ancestor. Hence if you set the parent's position to either relative, absolute or fixed it will be used as offset root instead of the document's body. You can learn more about how CSS positioning works in this tutorial: http://learnlayout.com/position.html\n. Spin.js itself does not depend on jQuery, hence it's neither listed in bower.json nor package.json.\n. Well, there is a jQuery plugin hosted in this repo too, which of course does depend on jQuery. If you want to use spin.js via bower or npm you have to use the vanilla API.\n. It might be a good idea to move the jQuery plugin into a separate repo with its own package/bower files. I just don't have the time to maintain it at the moment.\n. You can tell if a spinner is spinning by testing for the el property since calling stop() will reset it to undefined:\nvar spinner = new Spinner();\nvar isSpinning = !!spinner.el;\n. No, because this wouldn't work for the VML fallback.\n. The API is $('.spin').spin(false)\n. You can't pass jQuery objects when using the plain JavaScript API. Your options are:\n1.) to unwrap the underlying DOM node:\njs\nvar spinner = new Spinner(opts).spin(item.get(0));\n2.) to use the spin.js jQuery plugin:\njs\n$('<div>').appendTo(element).spin(opts);\n. If you use the project's .jshintrc everything will be fine. Spin.js is written npm-style which doesn't use semicolons.\n. The .append() method does not return the appended node but leaves the chain as it is. Hence the spinner is added to #test in your example. You can fix this by using .appendTo() instead: http://jsfiddle.net/x84ycuuu/\n. Did you look at http://jsfiddle.net/x84ycuuu/? It does exactly that. \n. Well, this is out of the scope of this library, but you could probably use something like http://malsup.com/jquery/block to achieve this.\n. That's the expected behaviour since spin.js requires a DOM. It's published as npm module so that you can use it with tools like browserify.\n. Spin.js itself doesn't provide any angular integration. I guess you are referring to some 3rd party library?\n. Hm, that code will also match <style> and <script> nodes ... that could probably cause an issue like this.\n. The use of dots is explicitly allowed in https://github.com/bower/bower.json-spec#name so even it might be uncommon or a bad practice it's still a perfectly valid package name. Please understand that I won't rename the package because of a buggy grunt plugin.\n. Here is an example with two instances: http://jsfiddle.net/fgnass/fgfcrc3a/\nWhat exactly doesn't work for you?\n. I'm sorry, but build artefacts don't belong in the master branch, this is not how git is supposed to work. If you care about performance you'll have a local build-step anyways which is the perfect place to bundle & minify all your scripts.\n. Here is an idea: There ist already a grunt task that updates the /site directory and publishes it to the gh-pages branch. The artefacts created by this step are currently .gitignore'd. Instead of ignoring them the task could commit them to master instead (it would probably make sense to rename /site to /dist then).\nI guess the main field in bower.json should then point to /dist/spin.js too rather than /spin.js? But I'm no bower user so I can't really tell if that would be idiomatic. I'm also wondering if main should be an array instead that contains both spin.js and jquery.spin.js?\n. If you use jQuery.ajax() provide a timeout and stop the spinner in the error callback. See http://stackoverflow.com/questions/5225597/set-timeout-for-ajax-jquery\n. published as 2.0.2\n. Sorry, but this can be easily done outside the library. One of the Spin.js design goals is to keep the code as small as possible \u2013\u00a0just enough to provide a cross-browser alternative to animated GIFs.\n. I'm looking for a maintainter to help me stuff like this as I'm currently very busy with other OSS projects. Ping me if you're interested, any help would be highly appreciated!\n. @TimothyGu awesome! I added you as collaborator to the repository.\n. You are actually passing undefined to the Spinner constructor, this inside an object literal does not refer to the object being created.\n. Thanks, fixed it!\n. The offset parent ist the closest ancestor that has position: relative / absolute / fixed; which isn't necessarily the element's parent element. You can fix your issue by adding position: relative to the div.centered rule.\n. I'm sorry, but this won't happen for the same reason we don't provide Ruby gems, Python PIP packages or Maven files. If you want to manage frontend dependencies in your PHP project please use npm or bower.\n. This looks like a viable solution too: https://github.com/composer/composer/issues/524#issuecomment-4912681\n. It already validates, you just have to use the project's local .jshintrc file.\n. I'm not religious about a particular coding style, but would prefer to keep this project as it is. It by the way uses the same style as npm which also roughly equals feross' JavaScript Standard Style.\n. I'm currently not near any computer (and won't be so for the next week) but maybe @TimothyGu can cut a new release?\n. See #209\n. Spin.js expects a raw DOM element as target, not a jQuery or Angular wrapper. Use new Spinner().spin(angularElement[0]) instead of new Spinner().spin(angularElement) and you should be fine. insertBefore btw is the DOM API, not jQuery in this case: https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n. The latest stable version is 2.3.2. The source of that version can be found here: https://github.com/fgnass/spin.js/blob/2.3.2/spin.js \u2013\u00a0Could you elaborate what you mean by \"does not add top and left attributes to the spinner className option\"?\n. Oh alright, you're looking at the wrong package. It's spin.js not spin. \n. The position has to be absolute, fixed or relative since the child elements (the lines) are absolutely positioned. Wouldn't { position: 'relative' } work too in your case?\n. It's a config option.\nMartin notifications@github.com schrieb am Fr., 13. Nov. 2015 um 15:21:\n\nyes, position: relative would probably work as well. how can I set it to\nrelative?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/fgnass/spin.js/issues/307#issuecomment-156445055.\n. Can you post your complete webpack config? This shouldn't be an issue if node_modules is excluded.\n. Cool, thanks! Do you use spin.js from npm or do you have a copy of spin.js in your app? And what error message do you get from webpack?\n. Strange. If spin.js is installed via npm the exclude pattern should match (since spin.js will then be located under the node_modules folder) and the loader should be skipped.\n. I just cloned the angular-webpack repo, did a npm i -S spin.js, added import spin from 'spin.js'; to the app.js file and run npm run build without any errors. Could you provide a recipe to reproduce the error?\n. The spinner can be stopped like this: $('#spinner').spin(false). \ud83d\udcaf Thank you very much, your help is highly appreciated! I added you as collaborator to this repo. Feel free to modify whatever you feel is necessary.. Done.. \n",
    "cwholt": "yeah that is much more seamless.\n. ",
    "Olical": "Ah yeah, makes sense. I do have one idea. You could use the closure compiler. I swear by it.\nThere is also an online version.\nHere is the output of when I ran the script through it. I have no idea if it is smaller or not.\n. @voidfiles Well on the GitHub page it has a link to a pre uglified version. So I don't think you need to worry about compressing it yourself.\n@fgnass Take a look at my EventEmitter's repository. I have a makefile and a build folder that contains everything I need to validate and compress all of my JavaScript in one command.\nMaybe you could copy it across and utilise it here. My building tools use Closure Compiler as the compressor.\nI really do recommend running it though jsHint too. My makefile does this, it helps you speed up your application and fix errors with ease.\n. @nilbus When uncompressed yes. But when minified those spaces will be removed. I did not realise uglify remove and combined the var statements automatically. So I basically did what uglify would do to the uncompressed version.\nNow this is turning into a debate about JavaScript compressors though :3\n. ",
    "voidfiles": "What about everyone who doesn't use uglify.js? \n. @Wolfy87 its  fgnass's project and his prerogative to do what he wants. I was just referring to the fact that if you don't use uglify.js you would need to go and replace all the var's your self.  It may not be so easy to just switch out your compressor to uglify for one script. \n. ",
    "nilbus": "Um, wouldn't this actually have the same number of bytes, since you're just replacing var with spaces and ; with ,? Correct me if I'm wrong.\n. Ah, I see :-)\n. ",
    "jdalton": "The IE version is:\n\n. Something is wrong with VML on my IE6. It appears to be all VML.\n. ",
    "alanhogan": "I have seen both in actual usage, but on a technical level, \"throbber\" is less overloaded and less ambiguous.\nNot a big deal though, right?\n. ",
    "xmuskrat": "Not a big deal at all.\n. ",
    "dlikhten": "I was thinking more of having two files: ie.js and non-ie.js\nUsing ie conditional comment fun we guarantee that only one of the two requests is made. Ie will request ie.js and everyone else non-ie.js. This way 1 request, bytes saved, everyone is happy. Potentially some code could be avoided as well because we are guaranteed to be in IE vs not.\n. Whopse closed issue.\n. Good point...\n. Hmm, perhaps disable some options like shadow on firefox/opera until a fix is available?\n. ~20% is better but still bad. Can we do better? I mean I would argue that above a few % max is already too much. A regular spinner image which can easily be generated and uses very little CPU, it would be wrong to have this \"feature\" and murder the CPU all in the name of a few bytes transferred.\nI would say implement the setTimeout methodology for now, but I can't in good conscience ship this code to prod until the cpu utilization is super low.\nhttp://neteye.github.com/activity-indicator.html\nThe demo page has 5 indicators and uses a fraction of the CPU as a single-indicator spin.js. BTW spin.js did not load in my FF beta for demo page so thats bad, no comparisons possible. Chrome's utilization was < 1% for the 5x activity-indicator vs 3% for spin.js on windows 7 x64.\nThough even the other site has about 20% utilization of a single core when running 5x spinners. Which I assume would be about 5% on one spinner.\n. ",
    "aseemk": "Just a thought experiment: how many extra bytes are needed for the conditional comment code? =D\n. ",
    "teddyzetterlund": "Not worth it. The conditionals themselves would add at least 110+ bytes (so we'd save maybe ~270 bytes) and four extra lines of ugly code compared to one clean script tag. My opinion is that it's enough that modern browsers skips the parsing of the IE specific bit.\n. ",
    "stephanerangaya": "FYI The animation works fine in every browsers but it's very slow on IE 7 to 9.\n. ",
    "SeanJA": "@stephanerangaya This is probably not the place for this discussion, but perhaps it is your computer? It works fine on IE9 here, I am not about to go and install a bunch of other versions of it to test though.\n. ",
    "glennfu": "I read in the jQuery 1.6 patch notes this line: \"Additionally jQuery is now using the new requestAnimationFrame method provided by browsers to make our animations even smoother. We can use this functionality to avoid calling timers and instead depend upon the browser to provide the best possible animation experience.\"  Is that something that can be taken advantage of here? https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame is the link to the specific feature.  Sorry if this is irrelevant, just hoping to help!\n. With shadow, it just looks blurry and then lags like crazy.  However, I figured since I'm already manually choosing whether or not to use my dark or light .gif files, I thought I'd just see what it takes to make this work for me.\nhttp://s241.photobucket.com/albums/ff255/Malohkan/Private/?action=view&current=spinners.jpg\nYou can see that by passing in white or black color at the right time, I can perfectly replicate the effect of the images I'm used to.  The only downside is on non-white-or-black backgrounds, but to be honest, for those it's not about replicating the .gif look, because those always looked a bit funny the way they are.  So now I think with a bit of tinkering and some input from my design peeps, I might get a nice effect.  Just for kicks, I tried white and black with the opposition black and white 1px borders.  Not a bad look!\nI'm hopeful I'll be able to get this working in a happy way all over my site soon.  I'll give it my best shot :)  If color animations can't be hardware accelerated, it's probably not even worth bothering considering how much these spinners already tax the CPU.  Sure my test has 8 of them running at the same time, and hopefully I'll only ever at most use 2 on a  page at once, but still it's a noticeable difference so to lose any more performance might not be worth the bother.\n. Can't you just use CSS for this yourself outside the javascript plugin?\n. In css:\n.spinner {\n    color: black;\n    display: inline-block;\n    height: 44px;\n    width: 44px;\n}\n.spinner.someclass {\n    color: white;\n}\nIn html:\n<div class=\"spinner\"></div>\n<div class=\"spinner someclass\"></div>\nIn js:\n$(\".spinner\").spin();\nThis works on my spinners!\n. I still don't see the issue personally.  Assuming you're using a selector to find the elements you want to attach the spinner to, then you can use the same selector in CSS.  If you're not using a selector and instead are manually targeting every place you want to apply the spinner in your javascript, then I personally think that's poor form and you'll find it gets really annoying later on as the project grows and you use it in more places.\nOn the other hand, if you don't like my idea, then I prefer ozike's method of adding a global classname to all the spinners.\n. ",
    "BYK": "@fgnass requestAnimationFrame has a second optional argument for WebKit based browsers where you give the bounding element for the animation which usually helps with performance. Have you tried using that? The behavior is documented on the related MDN page.\n. ",
    "alexduncan": "Hello,\nThanks for your response, I actually overcame the problem by setting the opacity using CSS.\nIf you're interested you can see my site here:\nhttp://www.madetofitme.co.uk/#invite/d2c699bad7164fa7b143ef79e0d71926\nThanks for your awesome plugin.\nAlex\n. ",
    "optixx": "Yep, works fine for me. Thx.\n. ",
    "LinusU": "I think that this would be really good and easy to implement, +1\n. ",
    "jfbon": "Oh, maybe he is using iOS 3, which isn't supported according to the list.\n. ",
    "tj": "probably similar to this issue with uglify\n. ",
    "shazdeh": "Any idea how to fix it? :)\nRight now I used JS minifier to minify the code, it's 4.58 KB which is great, but the 2k code is much lovelier!\nIt would be absolutely fantastic. Spin.js rocks!\n. No idea?\n. Are you using the minified version? Use the spin.js not spin.min.js and see if it fixes the problem.\nAlso copy the console messages here to take a look.\n. ",
    "haswalt": "Sorry to post on a closed bug but I found this issue and to fix it all that was required was to add the missing \";\" to the end. So you would end up with:\njavascript\n...a.Spinner=o})(window,document);\n. ",
    "toovs": "can confirm I also had this problem and adding the semicolon fixed it. Thanks haswalt!\n. ",
    "ponmani": "Hi fgness,\nYour answer is better solution. Thank you\n. ",
    "mrded": "You can do it this way:\n<div style=\"text-align: center;\">\n  <div class=\"mdl-spinner mdl-js-spinner is-active\" style=\"margin: 20px;\"></div>\n</div>\n. ",
    "Gennady-G": "\nCreate a DIV and center it on the screen manually. Then use this DIV as target:\n\n\n\n    new Spinner().spin(document.getElementById('center'));\n  \n\n\nThank You much fgnass!\nBest regards,   \nGennady. ",
    "RaphaelBarzic": "Thank you for this quick answer!\nI use the spin.js, not minified.\nWith firebug, there's no JavaScript error...\nI still wonder what's wrong.\n. I posted my HTML code at http://jsfiddle.net/RaphaelBarzic/u9Qqt/\nThere's no CSS rules and the div is empty...\n. Oh yes, it works now! It's a beginner's mistake, sorry...\nThank you very much!\n. ",
    "zerok": "Thank you, works now :-) Is testing for spinner.el the \"official\" method to determine if the spinner is active?\n. ",
    "darrylhebbes": "I am not testing with the iOS simulator, I have the iPhone 3G running ver 3.1.3 of the OS. I retested and the problem persists. What I see is a throbbing effect when all arms fade from in and out at the same time, not in sequence... the effect is that of a pulsing light. So no clockwise motion.\n. I tested and it is working now, smooth with no problems. \n. No problem, happy to test. I have tested today's version and all is working, shadows, zooming... all good. It seems smoother somehow... maybe removing \"animation-delay\" was a good idea.\nHave you considered a \"loading... \" progress bar as the next ;-)\nDarryl.\n. ",
    "RickardPettersson": "Thanks its works good!\n. ",
    "indeyets": "nope. I'm using dev-channel and saw this problem for several builds, at least.\nI'll try to do some debugging later today\n. ",
    "iynaix": "The same issue occurs for me on 15.0.865.0 (Developer Build 98568 Linux) Ubuntu 11.04 as well. Works in fine in Firefox Aurora and Opera 11.51 though.\n. Yep, it works for me in Chrome 14.0.835.163 on Ubuntu 11.04. As you said, probably a fleeting dev chrome issue.\n. ",
    "iangilman": "Wow, quick turn around! Awesome :)\n. ",
    "ay8s": "Would also like to see this added to spin.js. \n. ",
    "tremby": "I was looking for this too.\n. Isn't the existing opacity option actually a minopacity?\nNo, it wouldn't do the trick in my case. I want to fade from opaque red to mostly transparent white. Having \"active\" and \"inactive\" colours would do it, if they can be specified in rgba format. Spin.js would just interpolate between the two, or leave that up to a CSS transition if practical.\n. ",
    "theodorejb": "It is now possible to specify a fadeColor option in spin.js v3.1.0.\nFor example, using a fade color of \"violet\" with a light blue line color produces an effect like this:\n. At first I thought it would be easy to directly apply a box-shadow to the spinner lines. The problem with this is that the shadow is rotated along with the lines, which doesn't look natural:\n\nThe current code avoids this by generating another element for each line, coloring it black and applying a black box-shadow, and then positioning it down a couple pixels beneath the line. Unfortunately, this makes it difficult to customize the shadow position and color, and as far as I can tell impossible to support inset shadows, or multiple blended shadows with different positions.\nThankfully, I've discovered a better solution. Users could pass a standard box-shadow value in the spinner options, and it would be parsed to determine the x/y offsets. Then trigonometry can be used to correct the shadow coordinates for each line based on its degrees of rotation, so the shadows appear to be caused by the same light source:\n\nI have a working implementation of this in pull request #346.. Superseded by #346.. Please reopen with a reproducible example if this is still an issue in spin.js v3.0.. I'm not sure how you expect it to work if it's blocked by an infinite loop. Do you have any suggestions?. @ximet That demo doesn't support IE 9, though, and the animation rules are hard-coded (in spin.js they are configurable via JavaScript). Previous versions of spin.js used keyframe animations in modern browsers, but in order to do so it had to inject a new stylesheet into the DOM, which violated strict CSP (issue #115).\nMaybe in the next major version we could drop IE 9 support, but we'd still need a way to support strict CSP.. Please reopen this issue if it is still a problem in spin.js v3.0.. Please reopen with a reproducible example if this is still a problem with the latest version of spin.js.. Closing since this has a lot of conflicts now and seems to have been superseded by #154 anyway.. @igorlima I really appreciate all the work that you put into this. Unfortunately it looks like most of these tests would be broken now since they were implementation dependent, and spin.js has changed a lot internally in the past couple of major versions.\nIt would be great if spin.js had a robust automated test suite, but I think such tests should be written to test public API behavior, rather than implementation details. In other words, they should check that the spinner looks/behaves as expected for users, rather than checking for the existence of particular DOM elements/styles (which makes it hard to change how the library works).\nAt some point I would like to add unit tests for business logic like parsing and normalizing box shadows. These functions aren't part of the public spin.js API, though, so it might be better to move them to a separate package before doing this.. Closing since this browser is no longer supported.. Closing since the jQuery plugin is no longer supported.. Closing since IE 8 is no longer supported anyway.. Closing since the jQuery plugin has been phased out in spin.js v3.0.. I think it would be better to ask this question on Stack Overflow. It's not an actual issue in spin.js.. Closing since IE 6/7/8 are no longer supported.. I still don't see a tag or release for v1.3.3\n. If this is still a problem in spin.js v3.0, please reopen the issue with a reproducible example.. This should be fixed in spin.js v3.0.. Opera 12 is no longer a supported browser. If you are still having issues in the latest version of Opera, please file a new issue with steps to reproduce.. This is an interesting idea, but I'm not actually sure it would help performance. If you have a single-page app that uses many spinners, it would likely slow things down to have to load all the DOM/CSS for them even when they aren't being used.. I'm not sure this feature is necessary. Instead of a callback, just make a wrapper function that runs whatever code you want in addition to calling start/stop.. spin.js v3.0 no longer injects a CSS sheet into the document head, so this should no longer be an issue.. I agree that this would be a handy feature, but it shouldn't be part of the core library. Feel free to implement your own wrapper library offering this functionality.. I believe this is a duplicate of issue #205.. This should be fixed in spin.js v3.0.. If we were to specifically support right positioning, to be consistent we would also need to support bottom positioning.\n@dorian-marchal Is there anything preventing you from using CSS to accomplish this? For example:\njavascript\nvar spinner = new Spinner({className: 'right-spinner', left: 'auto'});\nAnd your CSS could contain something like this:\ncss\n.right-spinner {\n    right: 30px;\n}. Duplicate of #330.. Closing since the jQuery plugin has been removed in spin.js v3.0.. This should be fixed in spin.js v3.0.. spin.js does allow passing an array to the color option, but it ends up just alternating the colors on each line:\n\nThe issue here is that spin.js relies on opacity, rather than a color for the spin effect.. I think this may be a duplicate of issue #30.. This should be fixed in spin.js v3.0.. Closing since these browsers are no longer supported in the latest version of spin.js.. Closing since IE8 is no longer supported.. It sounds like #316 was caused by a beta version of Angular.. Closing since the script isn't meant to be directly loaded from spin.js.org. It is recommended to install from npm instead, and use a module bundler to create your production build.. Please reopen with a reproducible example if this is still an issue with spin.js v3.0.. This would likely be a useful feature, but I don't think it makes sense to be part of the core spin.js library. Feel free to create a new wrapper module that implements it.. spin.js v3.0 should fix this issue.. As I mentioned in #275, if an option is added for right positioning, to be consistent an option would also have to be added for bottom positioning. However, I'm not sure either option is needed since a custom CSS class could be used to accomplish this.. I don't have a Mac to test Safari with, but my guess is that it's loading the entire state of the previous page when you press the back button. Perhaps you could work around this by stopping the spinner after a period of time, instead of setting it to spin indefinitely.. This issue has been fixed in spin.js v3.0.. Not enough info to reproduce.. @IvanYurchenko Thanks for the contribution!. This should also fix #309.. You can test the new version here: https://theodorejb.github.io/spin.js/. @fgnass Thanks! Can you also add me as a collaborator on npm so I can publish releases? My username is theodorejb.\nhttps://www.npmjs.com/package/spin.js/access. I updated the website to clarify that spin.js shouldn't be loaded from a <script> tag directly referencing the official website, as this is likely to break your app whenever a major new version is released.. If you are using spin.js v3, you'll need to use a module bundler like Rollup or Webpack to support Firefox and IE, since they don't support native ES6 modules.. That error doesn't have anything to do with spin.js. If you have issues with Rollup and TypeScript, I'd recommend searching for a tutorial on how to use them together, or asking on Stack Overflow.. Here are examples of how several standard box-shadow values will be rendered:\n\n\ninset 2px -2px 3px #000\n\n\n\n-2px 3px 3px 1px indigo\n\n\n\n-5px 5px 3px #ff6347, 5px 3px 4px indigo\n. This pull request can be tested here: https://theodorejb.github.io/spin.js/.\n\n\nThe only serious blocker I know of is that Microsoft Edge doesn't use the correct duration for fading out the spinner lines. I filed an issue for this here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14931071/.. The Microsoft Edge bug is fixed in the Windows 10 April update, so there's nothing blocking this anymore.. Perhaps you can stick with spin.js 2.x until your build tools support ES6. They'll have to support it eventually since more and more libraries are starting to use it!. Why would you need to support a Chrome version that is almost 4 years old (Chrome 35 was released in May 2014)? Anyone using such an old version is likely exposing themselves to all sorts of security vulnerabilities.\nIf you need support for really old browsers, it might be better to stick with spin.js 2.x.. @congjiujiu Chrome is quite different from old IE versions, though, since it has always auto-updated. Old versions of Chrome have minuscule usage compared to old versions of Internet Explorer.. Closing since spin.js v4 drops support for IE 9 (and thus the vendor function has been removed). Again, if you need to support these very old browsers I would recommend sticking with spin.js 2.x.. Thank you! It's nice to hear when your work helps to inspire someone else.. Yes, you could do this by setting the position option to \"fixed\", or by placing the spinner inside an element with a fixed position.. Thanks for the report. It looks like the two screenshots are using different settings (number of lines, length, radius, etc.), which makes it harder to compare them. Can you share the settings used for both screenshots? Also, what browser is this from? Do you notice pixelation in other browsers too?. I don't have a Mac to test with, but I noticed that rendering the lines with a transparent shadow seems to help in Chrome on Windows. Try setting shadow: '0 0 1px transparent' and see if it makes a difference.. What's giving you that error? Are you trying to load the file in a browser that doesn't support ES6 modules? You'll need to use a module bundler such as Webpack or Rollup for this to work.. @tolu More and more libraries are moving to ES6, though, and at some point your tests will have to work with these files. The way I currently work around the lack of Node/IE support is to use ES6 imports in my tests, and then create a test bundle file with Rollup before running it with Mocha.. What \"blackduck vulnerability\" are you referring to? spin.js 3.x is written in TypeScript, so the compiled JavaScript files are intentionally excluded from the repository. You can clone and build this repository to get a compiled JavaScript file, or else install it from npm.\nDid you read the installation instructions on http://spin.js.org? spin.js is not pre-minified, but if you are using the Webpack or Rollup module bundler as recommended, you can fairly easily minify your entire bundle for production.. To clear up confusion, there's not any XSS vulnerability in spin.js 2.3.2 itself that I'm aware of. It's true that v2.3.2 isn't compatible with the style-src 'self' Content Security Policy (issue #115), but that just means that spin.js 2.x doesn't work if that policy is enabled. The potential security risk is in not having a strict Content Security Policy, not from a flaw in the spin.js 2.x script.. @mayatron Thanks for the contribution!. @himdel Thanks for reporting this! I updated the readme and installation instructions to make the CSS requirement clearer.. I don't understand the question. Presumably by \"span.js\" you mean \"spin.js\". But what is formbridge? What do you mean by \"get the element events above formbridge to bind to span.js\"? Have you read the documentation on https://spin.js.org?. Does the issue occur with spin.js 3.1? Versions 2.x and 4.0 use CSS keyframe animations, while 3.x uses requestAnimationFrame.\nYou could also try adding your own infinite CSS animation and see if that exhibits the same issue. If so, this is likely a limitation/bug in iOS or Cordova rather than a problem specific to spin.js.. Thanks for the feedback!\n\nIt was an intentional decision to not include a minified file in the package since this would bloat the size with a file that not everyone needs. The npm package does include a pre-compiled JavaScript module which can be used natively in any modern browser. If you still need to support IE 11, I recommend using Rollup or Webpack to create a bundle which you can then minify.\nspin.js includes methods to start and stop the spinner whenever you want. If you want to start it after a delay, feel free to do so!\nYou should be able to do this already by putting the spinner in an element with a click event listener that stops the spinner.\n\nThe basic philosophy behind spin.js is to provide a lightweight module with simple API for controlling the low-level functionality. Extra features can then be easily added on top in other packages (Ladda, for example).. I don't want to bloat the npm package with code for legacy module formats that not everyone needs.\nIf for some reason you aren't able to use ES6 modules yet, I'd recommend sticking with the 2.x release of spin.js, or creating a UMD file yourself using Rollup:\nnpm install spin.js\nnpm install rollup --save-dev\nnpx rollup node_modules/spin.js/spin.js --file spin.umd.js --format umd --name \"Spin\"\nThe spin.js file on the site actually does not pollute the global scope, since it is an ES6 module. This file is useful for anyone targeting modern browsers with support for <script type=module>.. ",
    "arjes": "I can confirm I am getting an opacity error as well. The error is on this line:\n        el.firstChild.childNodes[i+o].firstChild.firstChild.opacity = val;\nand IE only says \"Object Required\".  I'm going to see if i I can debug it and I'll report back if I find anything. The link provided earlier didn't generate the error for me either.\nEDIT: Debugging in IE blows, but the issue is that el has no children. I'm not sure what element el is, but the same code works in FF\n. ",
    "nverwer": "I run into the same issue. Just before the spinner disappears, when I load different content in a div, there is a problem in line 211:\nel.childNodes[i].style.opacity = val;\nThe problem is that el.childNodes is empty.\nI can see two possibilities here:\n1. Remove the spinner before I load different content in the div.\n2. Add this just before line 211: if (i < el.childNodes.length)\nMaybe it would be safe to incorporate this in spin.js?\n. ",
    "xavierelopez": "Thank you very much. I will try to split my process into various calls to see if that helps. Cheers.\n. ",
    "howlowck": "oh ok. thank you very much for all your hard work!\n. ",
    "lencioni": "I don't believe there is a very good way to select the spinner.\n. Sure that works, but I shouldn't need to add extra markup to use the spinner.\n. Just adding a class to the spinner automatically would be helpful, then I could target it in my CSS.\n. Thanks Felix!\n. ",
    "okize": "I added this to Spinner.defaults:\nclassName: 'spinner',\nAnd this:\nel.setAttribute('class', self.opts.className);\nRight before \nel.setAttribute('aria-role', 'progressbar');\nThat adds a class of 'spinner' to the outermost div, which you can use to select and set z-index & positioning (will need to use !important for 'top' and 'left' to override inline style.\n. ",
    "andyburke": "Love this spinner, but I wanted to put in an upvote on this issue as well.  I have some really tall elements that I'd like to be able to spin on, and instead of centering vertically, I'd like to just be able to set a vertical offset from the top of the element.\nMaybe if the option 'vertical-offset' were set to something it could override the vertical centering?\n. Created a pull request to address this issue: https://github.com/fgnass/spin.js/pull/55\n. I agree with the rename to top/left (vs. the topOffset/leftOffset from my patch), but I feel like they should just take valid CSS settings and not add the px.  So, for instance, I should be able to do:\ntop: '50%'\n. ",
    "etuan": "top: '50%' would be awesome.\n. ",
    "jbetances": "Is there a way to both have the spinner going and at the same time be able click at other elements within the page?\n. ",
    "DrunkenCyclist": "I second that motion!\nAlthough this is an awesome script. I was trying to think of a way to make a loading .gif that looked good against any color background and stumbled upon this script.\nMuch nicer than the dithering issues with an animated .gif and lightweight to boot!\nThe shadow is a bit harsh though and it would be nice to have an opacity / color parameter in the configuration array.\n. ",
    "kbjr": "+1\nIs there any work being done on this?\n. I don't have a copy of IE available to me for testing at the moment, but maybe this is close to what you were thinking?\n. The first one was easy, I just made that shadow line transparent. The second one is a little harder; I don't know why the positioning is off, I will have to look into that...\n. okay, those rendering bugs are fixed, moving on to IE testing...\n. IE is partial (and I mean, very partial). The colors are off - darker, kind of hazy. The blur radius is larger and the positioning doesn't seem to be working, but at least its in color I guess...\nCompare:\n\nTo:\nhttp://umbraengineering.github.com/spin.js/example/shadow.html\nI don't know that its going to get much better than that.\n. The second problem could be fixed by offering an option for how you want the shadows cast. The first version (before I fixed the first rendering bugs you noticed) was working in the other way where each line cast in the same direction, so it wouldn't be too hard for me to change that. I don't know what to do about the first issue, but I haven't had any issues with it myself in my personal use case as I am using fairly small shadows, and I think most people will be as well.\n. ",
    "dhaval2025": "Hey I am sorry but I don't have a public link yet, but I can tell you that the iframe url is www.Adomain.com, \nbut all the markup, scripts and stylesheets within the iFrame load from www.Bdomain.com.\nAlso this works great on chrome and  ie7+ \n. Update::\nHi, \nJust wanted to give you an update that It hasn't been working on any firefox, Till now I was just trying on 7.0.x but I just tried on other Firefox versions and haven been getting the same security error on Line 64 of spin.js\nThanks \nDhaval\n. ",
    "runtalan": "I'm also having the same issue.  \nI think this is happening on Line 58 for me -- with respect to \"sheet.insertRule\"\nIt looks like a Cross-Domain issue.  In my specific case, my JS/CSS are hosted on CDN (different domain).\n. While it fixes the error in Firefox, this creates a new issue in Safari.\n. line: 61\n . message: \"'undefined' is not an object (evaluating 'sheet.insertRule')\"\n . sourceId: 4743268672\n . sourceURL: \"http://localhost/lib/Javascript/spin.js\"\n. This is still an issue for me in Firefox 7.0;  it works fine in Firefox 3.6 , Chrome, and Safari.  \nYou can see it broken here:\nhttp://beta.tumblecloud.com/cloudpage/?cloud=438\n. One note : it works if you have Firebug up, but is broken without it.\n. here is another test link which is more accurate \nhttp://unstable.dev.tumblecloud.com/cloudpage/?cloud=4705&\n. woops! it looks like it did fix all our issues with it.  Thanks eych!\n. ",
    "eych": "One more idea how this can be fixed \u2014\u00a0https://github.com/fgnass/spin.js/commit/974cdd33719f2121bbbbfd6dbd16797fd94df98b#commitcomment-681824\n. @phishbot http://unstable.dev.tumblecloud.com/lib/Javascript/spin.js doesn't seem to contain the fix from 930bae7ad845f8e0f2aa8395c22bea276c927669\n. ",
    "christianhaller": "thx\n. yes, it works now out of the box in ie7. thank you\n. it's probably related to this chromium bug\nhttp://code.google.com/p/chromium/issues/detail?id=77126\n. Nice idea :+1: \n. ",
    "mjphaynes": "Fixed in 974cdd33719f2121bbbbfd6dbd16797fd94df98b\n. No problem :) \nIt probably is the same issue so hopefully this will fix that - if not would have to see exactly the code/ domains they're using.\n. ",
    "royst": "Please ignore, I found a workaround.\n. ",
    "lucasmg": "What did you do ?\n. ",
    "antris": "Should this issue be closed, then?\n. ",
    "JustinTulloss": "@fgnass Yeah, that's the line that's causing it. I think it is related to the bug that @christianhaller is referring to.\n. Would making 3d transforms an option passed to the constructor be acceptable?\n. What would it check for?\n. @fgnass i think it probably should be disabled by default for the time being, at least until the bugs are worked out and released in chrome and safari.\n. ",
    "vkovalskiy": "The line @fgnass pointed out to crashes Chrome every time for me. Using Fedora 16 with Chrome 15.\nAfter commenting out this line everything works fine. Waiting minified version of spin with this problem fixed natively.\n. I think option parameter is a workaround as spinner should better check this automatically.\n. Check whether transfrom3d is available on current browser or not. Otherwise, we would always set transform3d to false to make sure end-users won't have browser hang up.\nModernizr can detect this.\n. +1 for disabling by default. Especially for spin.js web - page: my Chrome hangs up on opening. Happily, I've managed to know this great script before hangings began :) But new users won't appreciate it.\n. ",
    "techouse": "Has this been fixed yet? I'm still getting a strobe/flash effect on the first usage of a spin.js function (the following usages do not produce it) in Chrome 16.0.912.77 m on Windows 7 SP-1 x64.\nAs pointed out by fngass, commenting out line 208\nseems to hotfix the problem.\n. Yea... As far as IE8 and lower go, spin.js just keeps popping out JS errors. :/ None of the fixes mentioned above worked for me.\n. Sorry, totally forgot about this... Thing is i already fixed the thing to using images and updating them every 100 miliseconds (since animateed gifs and IE don't go hand in hand) and the site is in production so I can't really use that site as an example :/ I was using it together with jQuery 1.7.1 and the jQuery plugin found here: https://gist.github.com/1290439 Maybe that's of some help to you. Maybe the jQuery plugin is broken for IE8 and down... dunno\n. ",
    "plutrono": "I was seeing this issue too but assumed it was related to my port of spin.js to closure.  Your fix works great for me too but I wanted to share a work-around I found which leaves the hardware acceleration intact in case it's helpful.  When I create the el in the spin function, I set visibility:hidden.  Before I return from that function, I make the element visible again, using a setTimeout with 0 delay.  No idea why that works, but it seems to.  :)\nsetTimeout(function() {\n  self.el.style.visibility = 'visible';\n},0);\n. ",
    "amsul": "I believe I figured it out. It seems to be a problem with Google Canary. Works fine on the stable build.\n. ",
    "dnagir": "I though that there's a background div created for the spinner. So I imagined it would be possible to set the background and it's opacity.\nBut now I kind of see it's a bit tricky...\nSorry for the dumb \"issue\".\nSo do I have to wrap it in my own div and position to have the transparent background?\nI hoped there's an easier way...\n. The config does make sense to me.\nIn my particular case I need to apply shadow, rounded corner, small border, background color and transparency... You know, to match the pixel-perfect design :)\nMaybe it would be easier to provide ability style it via CSS instead? But I guess it would be relatively big change then.\n. I think it would be ok not to support old IEs as long as person using this feature understands it.\nI personally would really prefer CSS styling. And yeah, PNG won't work well in IE 6 unless transparency trick is applied.\nSo it's pretty much the same.\n. So maybe option like: wrapperClassForModernBrowser: \"spinner\" would do the job :)\n. Yeah, it indeed looks like wrapping in a custom div and positioning it manually is the best way to go for now.\n. ",
    "killthekitten": "I'm also looking for this functionality. I'm using spin.js with jquery, so it can look like $('.some_div').spin({ background: {color: 'white', opacity: '0.5'} }). So, is it a problem to position wrapper at the top: 0, left: 0 of .some_div, with dimensions of .some_div? Or it will do the trick?\n. Just an example of using in our project:\ncoffeescript\n$.fn.preloader = (mode = true) ->\n  block = $(this)\n  if mode\n    block.addClass 'preloader'\n    block.css 'opacity', '0.5'\n    block.spin\n      color: '#f18b00'\n  else\n    block.spin false\n    block.removeClass 'preloader'\n    block.css 'opacity', '1'\n. ",
    "PlippiePlop": "To place animation  in center off the spinner container that fills the page with a overlay is easy to do:\nChange line 152 to:\n , el = self.el = css(createEl(0, {className: o.className}), {position: o.position, width: '100%', zIndex: o.zIndex})\nChange loop code from Line: 218 to \nfor (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute',\n    top: '50%', \n    left: '50%',\n          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',\n          opacity: o.opacity,\n          animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'\n        })\nThen change you spinner class to:\n.spinner{\nleft:0;\ntop:0;\nheight:100%;\nbackground:rgba(255,255,255,.6);\n}\n. Found a solution for the mobile safari caching issue on browser back button:\n//Because Apple ... you know what.. \nwindow.addEventListener('unload', UnloadHandler, false);\nfunction UnloadHandler() {\n       $(\"body\").data('spinner').stop();\n    window.removeEventListener('unload', UnloadHandler, false);\n}\n. ",
    "vjpr": "+1\n. ",
    "nicooga": "Little workaound I'm using right now:\n``` coffee\n$e.addClass 'opaque'\n$e.spin()\nStop spin\n$e.removeClass 'opaque'\n$e.spin false\n```\ncss\n.opaque > *:not(.spinner) { opacity: 0.1 }\n. ",
    "vaibhavpandeyvpz": "+1 @nicooga, you are awesome :) your code did it simply & beautifully\n. ",
    "wanashi874": "You can also do with pure javascript\n(required IE10+ )\n```\nvar spinner = new Spinner(opts).spin(target);\ntarget.classList.add(\"opaque\");\nStop Spin\ntarget.classList.remove(\"opaque\");\nspinner.stop()\n```\nhttps://developer.mozilla.org/en/docs/Web/API/Element/classList\n. ",
    "debreczeni": "I am too having the same issue\n@marqsm off: you can insert html if you indent the code with 4 spaces and leave a line break before the code block\n<roundrect style=\"FILTER: progId:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3); WIDTH: 11px; HEIGHT: 4px; TOP: -2px; LEFT: 10px\" arcsize=\"1\"></roundrect>\nchild1\n<fill opacity=\"0.25\" color=\"#FFFFFF\"></fill>\nchild2\n<stroke opacity=\"0\"></stroke>\n. ",
    "marqsm": "I managed to fix this by adding some code. This is not the optimal way to do it as checking elements like this isn't all that fast. There's probably a better way & place to fix this problem, but that would require a more in-depth look into the component. Hopefully I'll have the time to take that look sometime later, as I like the component and it would be nice to help it evolve. As a temporary fix for someone having the same problem this might work.\nAdd this utility function (from http://stackoverflow.com/questions/2234979/how-to-check-in-javascript-if-one-element-is-a-child-of-another )\nfunction isDescendant(parent, child) {\n    var node = child.parentNode;\n    while (node != null) {\n        if (node == parent) {\n            return true;\n         }\n         node = node.parentNode;\n    }\n    return false;\n}\nand changing this function\nfunction ins(parent, child1, child2) {\n   if(child2 && !child2.parentNode) ins(parent, child2);\n   parent.insertBefore(child1, child2||null);\n   return parent;\n}\nto \nfunction ins(parent, child1, child2) {\n  if (child2) {\n    if (!child2.parentNode) {\n        ins(parent, child2);\n    } else if (child2.parentNode && !isDescendant(parent, child2)){\n        child2 = null;\n    }    \n  }\n  parent.insertBefore(child1, child2||null);        \n  return parent;\n}\nOpacity seems to get weird values sometimes. Hardcoding the opacity seems to fix the problem, but obviously is not a great permanent solution... \ncreateEl('fill', {color: o.color, opacity: o.opacity}),\nto\ncreateEl('fill', {color: o.color, opacity: 0.25}),\n. ",
    "beardChamp": "@marqsm I was seeing exactly the same issues with the same mysterious onset after past successful passes through QA. I applied your code and was happy to see spinners again. Thanks for posting your solutions. You just saved me hours!\n. ",
    "aterris": "I just wanted to chime in and say that I am also having this issue on IE8 (havent tested any other IE's)\nFor my purposes, I have simply removed spin.js and will have to move forward without using it so I don't have any additional solutions, but still wanted to mention that I am seeing that issue as well\n. @techouse mentioned that he was using the jQuery plugin.  I am no longer using it so I also don't have a broken example, but we were seeing the issue while using the standalone library not the jQuery plugin, so that does not seem to be the differentiation\n. ",
    "jasonwilliams": "Although a great idea, Im guessing this plugin wasn't properly tested with IE.\nI can say though that marqsm's fix works for me for now.  I'm not entirely sure what the problem is with this but someone should look at it and maybe give it high priority as without IE support its going to be pretty pointless to use on any production site.\nMy 2 cents\n. Sorry I couldnt have been help with the spinner our site is behind a login\nwall so its not possible for me to show you and I wouldnt know how to\nre-create the issue either.\nIts screwing ie8 and ie7 about pretty bad so (using jQuery) I've disabled\nit for those browsers until this is sorted.\nJason\n. Yeah I tryed it an hour ago\nIe 8 was still giving me errors in the console.\nI will try it again later on at home and give you some feedback\n. Sorry not had chance to check\nI will reply when i do though \nj\n. ",
    "kossnocorp": "@marqsm :+1:\n. ",
    "nzbluefish": "Experience this problem with my current project. This fixed worked for me.\nCheers, Innes\n. I will see if I can replicate it. I applied the fix as suggested and it sorted it out for me, but I can recall where I got the original error. I'll back out the fix to see if I can repeat it. \n. Managed to repeat the issue by reverting back to the original spin.min.js I was using. I am running it on an IE8 (8.0.7601.17154) version. Error occurs at: Line 2, Character 849 - Invalid Argument. Let me know what I can provide to help figure this out. The website is currently in preproduction. Cheers, Innes.\n. ",
    "ProtectedVoid": "I am also having this issue in IE8, or, more specifically, IE9 using the Developer Tools to force IE8 standards mode.  Our application is an HTML5 application, but because we have to support IE8, we are using HTML5shiv.js to add HTML5 capability to IE8.\nFor me, if I remove HTML5shiv.js or use the spin.min.js on a page that does not contain HTML5shiv.js, the problem goes away, and the spinners work as expected.  IE9 is unaffected...it works regardless of whether HTML5shiv.js is included on the page or not.\nHopefully, that will help you some.  I'd love to post a working (/ broken) example for you, but I'm running development locally.\n. ",
    "camilonova": "@Jayflux did you test on your home?\n. ",
    "vesan": "I tried the new version and it fixed my problem. From my point of view this ticket can be marked fixed.\n. ",
    "neardark": "The latest version fixed this for me as well.\n. ",
    "kjcochran": "No Bug: Firefox caching issue.\n. ",
    "bluescrubbie": "sho nuff.  Perhaps sniffing the parent's positioning for pre/append choice is a solution.  Or computing the highest z-index of children.  Or perhaps having an optional z-index option that will let the user specify it for their particular case.\nExcellent work by the way - thanks!\n. splendid.  Thanks!\n. Perhaps for the time being, a new helpful feature with a known limitation is superior to no helpful feature at all?\n. ",
    "matthusby": "After taking a look at this I think I am just going to make those changes in the jquery part of my code as we can stay upto date with the vanilla spin.js\n. ",
    "kristerkari": "I can also confirm that this is happening for IE6, IE7 and IE8. \nSpin.js does not work with html5shiv 3.4, but works fine without it.\n. Nice to see this get fixed, thanks!\n. ",
    "Takazudo": "cool ;)\n. ",
    "bung": "I love the net some days. Found your plugin after seeing it in the credits of some HTML5 photoshop clone, wanted to use it on a new project that I have to demo tomorrow and found this bug in the wee hours last night. Was disappointed and then mere hours later its fixed already, pretty lucky for me :) Thanks!\n. ",
    "rexcfnghk": "I am using Modernizr 2.6.2 and the issue still exists for IE8. I am using spin.js 1.3.2\n. ",
    "jblotus": "the issue is that that jquery plugin featured on the spin.js demo page wont\nrun unless you provide defaults explicitly.\nOn Wed, Mar 21, 2012 at 10:50 AM, Felix Gnass <\nreply@reply.github.com\n\nwrote:\nThe defaults already get merged into the provided options object inside\nthe Spinner constructor:\nhttps://github.com/fgnass/spin.js/blob/gh-pages/spin.js#L142\nThe jQuery plugin only calls $.exdend in order to fill in the\nruntime-color in case no color value has been explicitly specified.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/59#issuecomment-4618794\n. the issue is that that jquery plugin featured on the spin.js demo page wont run unless you provide defaults explicitly.\n\nif (opts !== false) {\n  data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);\n}\n. i didn't realize the spin.js merged in options already. still there is a problem with the jquery plugin. it could be rewritten like so:\n``` javascript\n$.fn.spin = function(opts) {\nthis.each(function() {\n    var $this = $(this),\n        data = $this.data();\nif (data.spinner) {\n  data.spinner.stop();\n  delete data.spinner;\n}\n\ndata.spinner = new Spinner($.extend({color: $this.css('color')}, opts || {})).spin(this);\n\n});\n  return this;\n};\n```\n. your example clearly works. we were having trouble with it on our project. i will let you know what happened as soon as i can put together a test case.\nthanks!\n. I have just tried to reconstruct the issue but I have failed. Looking more closely at the code, opts === false will still run if opts is undefined. \nI think this was a red herring. Sorry to waste your time!\n. ",
    "rrevi": "Thank you.\n. ",
    "mackuba": "Ok, thanks!\n. ",
    "Fredyy90": "i would like to see this feature too.\n. ",
    "dwaddell": "I'd like to see this as well but I think something more than just below would be nice, like above, left of, right of spinner.\n. ",
    "photostu": "would love to see this as well.\n. my weak ass attempt to add text:\ninside spin func:\nself.lines(el, self.opts);\nself.text(el, self.opts); // new line\n...\ntext: function (el, o) {\n            var textEl = css(createEl(), { top: -9 + 'px', left: 20 + 'px', position:'absolute', color:'#eee' });\n            textEl.innerHTML = o.text;\n            ins(el, textEl);\n        },\nThis is hard coded to position text to the right of the spinner.\n. ",
    "Strandedpirate": "+1 for attaching the contents of a specified dom element and positioning it north, south, east, or west of the spinner.\n. ",
    "pythagoras1357": "I was able to do this by adding the css to the div I'm adding the spinner to:\n``` css\npageSpinner {\nwidth: 100%;\nheight: 100%;\nbackground-color: rgba(0, 0, 0, .6);\ndisplay: flex !important;\nalign-items: center;\njustify-content: center;\nposition: fixed;\nz-index: 1000;\ntop: 0;\n\n}\npage-spinner-copy{\ncolor:#ffffff;\nmargin-top:100px;\n\n}\n```\nhtml\n<div id=\"pageSpinner\"><div id=\"page-spinner-copy\">loading...</div></div>\n. ",
    "ryanspeakman": "Thanks for getting back to me so quickly!\nOkay, I did what you suggested...  And the spinner is appearing on the page when I want it to.  Thanks!\nStill one issue for me:  The user can invoke the \"SaveChanges()\" function from several different places on a fairly long page, which means that with a fixed-position spinner, the user may not see it (I didn't see it when I first tried it just now)...  Any idea how I might be able to make the spinner appear in the exact center of the browser screen, regardless of where the user is on the page?\nThanks so much for your help...\nRyan\n-----Original Message-----\nFrom: Felix Gnass [mailto:reply@reply.github.com] \nSent: Wednesday, April 11, 2012 9:19 AM\nTo: ryanspeakman\nSubject: Re: [spin.js] Why does spin.js work for everyone else and not me?? (#64)\nFirst, you only need to reference one JavaScript file. Either spin.js or spin.min.js, not both.\nSecond, your last line is not needed and causes the error. Just remove that spin(); call and everything should work.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/64#issuecomment-5072648\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2012.0.1913 / Virus Database: 2411/4927 - Release Date: 04/10/12\n. Thanks for getting back to me so quickly!\nOkay, I did what you suggested...  And the spinner is appearing on the page when I want it to.  Thanks!\nStill one issue for me:  The user can invoke the \"SaveChanges()\" function from several different places on a fairly long page, which means that with a fixed-position spinner, the user may not see it (I didn't see it when I first tried it just now)...  Any idea how I might be able to make the spinner appear in the exact center of the browser screen, regardless of where the user is on the page?\nThanks so much for your help...\n. ",
    "Lukargo": "Wow, it truly was caused by my noobish coding abilities.  I forgot an \"a\" in \"type=\"text/javascript\".  It works like a charm now.  Hides face in embarrassment \n. ",
    "ankur20us": "thanks\nso in order to make it spin again should I have to use \n                $('#uploadPhoto #loadingBar').spin(defaults);\n. thanks\nso in order to make it spin again should I have to use \n$('#uploadPhoto #loadingBar').spin(defaults);\n. ",
    "sdebeaubien": "Um, neglected to mention that it will not spin after hitting \"Submit.\"  I just checked your demo page, and it appears to work there, but again, not after hitting submit and making a \"Hidden\" div appear.\n. No worries, I will try to get some for you today.  The submit has to take a long time, but I think it can be simulated with an alert popped up after you press the submit, but prior to the javascript actually submitting the page.  Let me try that and get back to you.\nThanks,\n-Scotty\n\nDate: Fri, 20 Apr 2012 00:50:02 -0700\nFrom: reply@reply.github.com\nTo: sdebeaubien@hotmail.com\nSubject: Re: [spin.js] Spinner not spinning Opera 11.62 (#68)\nIn that case some example code (at http://jsfiddle.net or similar) would be really appreciated.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/68#issuecomment-5239322\n. Hmmm... Don't have an account at JSFiddle, or similar, but I'll send you the sample here (attached).  Just drop in the latest spin.js in the same folder as this HTML and then run it in the latest of each browser.  It should run in each, although I'm using IE9 and the left positioning is off a bit too, don't have IE10 (or 11?) around anywhere.  It works though in the others I've tested (Safari, Chrome, Firefox)\n\nThanks,\n-Scotty\nPS. If that HTML file does not come through, I'll just paste it in here later.  It's not large, 111 lines, mostly CSS and some Javascript to activate the spinner.\n\nDate: Fri, 20 Apr 2012 00:50:02 -0700\nFrom: reply@reply.github.com\nTo: sdebeaubien@hotmail.com\nSubject: Re: [spin.js] Spinner not spinning Opera 11.62 (#68)\nIn that case some example code (at http://jsfiddle.net or similar) would be really appreciated.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/68#issuecomment-5239322\n. HTML to test this issue, never mind trying to cut-n-paste it.  I uploaded it to a test folder on one of our sites.  \n\nhttp://www.primetimeshuttle.com/ScottyTesting/SpinnerTest.html\nAnd verified that it fails in Opera 11.62\n. Interesting - the problem I'm trying to solve only existed in IE when I set out to \"Solve\" it.  If you have a submit for a page that you want to disable all buttons while the user is waiting, the only way to do it is to put up a hidden  that greys out (obscures / covers) everything, and to be nice, I wanted to show a \"Progress Bar\" type gizmo, only I like the spinning gizmos better than progress bars.  In IE, when you put up an animated GIF, it stops being animated, because of the condition you are describing below.  So, I went searching for solutions that would not stop spinning while it was in the \"Submitted\" stated and I found spin.js.\nSpin.js works with IE (IE9 and probably others I hope).  The thread on which the javascript is running is able to continuously update the UI in the foreground and keep the gizmo spinning.  And, it works in Firefox, Chrome, and Safari.  But I had no trouble with those before anyhow.  Now, however, I have trouble with Opera - the gizmo stops, exactly the same problem I was having in IE9.  I think I'll report it as a bug to the Opera folks, since what we're trying to do here is reasonable, and it works on \"most\" other browsers.  The sample I wrote, with your code (spin.js) should be enough for them to figure it out as well.\nThanks!\n-Scotty\n\nDate: Sun, 22 Apr 2012 02:10:22 -0700\nFrom: reply@reply.github.com\nTo: sdebeaubien@hotmail.com\nSubject: Re: [spin.js] Spinner not spinning Opera 11.62 (#68)\nI think what you are trying to achieve is simply not possible in most browsers. You could submit your form into an Iframe or post it using AJAX instead. Leaving a page (even by submitting a form) will usually stop the browser's UI from updating.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/68#issuecomment-5266551\n. \n",
    "siju78": "Not a bug. It was related to my usage. I was trying to use spinner with BlockUI. \n. ",
    "akiander": "I discovered that google maps experienced this same issue \nhttps://groups.google.com/group/Google-Maps-Troubleshooting/browse_thread/thread/983b843c513d46c5\n...and it was caused by piclens. I downloaded the latest version of this software (which apparently is no longer called piclens) and was not able to reproduce it because this product no longer supports IE 7 or 8. \n. Any thoughts on a fix for this issue? \n. ",
    "CydeWeys": "I get the same error on the return statement (line 43) of this function:\njavascript\n  var sheet = function() {\n    var el = createEl('style');\n    ins(document.getElementsByTagName('head')[0], el);\n    return el.sheet || el.styleSheet;\n  }();\n. My pull request addresses this issue too: https://github.com/fgnass/spin.js/pull/77\n. Sorry, this fix wasn't good.  Looking for another one.\n. Thanks!\n. ",
    "codesoda": "I am getting the same issue in IE8, line 93 \"invalid argument\"\n. The issue is because the prop[n] part of the function is getting an invalid value.  e.g. \"50%22px\" and its probably trying to apply that to the top of the element.\nel.style[vendor(el, n)||n] = prop[n]\nI've just removed any positioning that I was passing in and the spinner now appears centered in the container with no errors under IE.\n. ",
    "riddla": "The following hotfix worked for me:\njavascript\n// sets the width of the spin element according to the generated canvas elements\nvar spin_element = $('.spinner');\nif (spin_element.length) {\n    total_width = 0;\n    spin_element.find('div').each(function() {\n        total_width += $(this).outerWidth();\n    });\n    spin_element.css('width', total_width);\n}\n(Probably needs some refinement / check for canvas element existence etc.) \n. ",
    "sjanofsky": "Worked perfectly... thanks!\nOn Wed, Jun 6, 2012 at 9:13 AM, riddla wrote:\n\nThe following hotfix worked for me:\njavascript\n// sets the width of the spin element according to the generated \ncanvas elements\nvar spin_element = $('.spinner');\nif (spin_element.length) {\n  total_width = 0;\n  spin_element.find('div').each(function() {\n      total_width += $(this).outerWidth();\n  });\n  spin_element.css('width', total_width);\n}\n(Probably needs some refinement / check for canvas element existence \netc.)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/fgnass/spin.js/issues/74#issuecomment-6150181\n. \n",
    "kumaroswal": "in Spin.js\nReplace this\nvar el = createEl('style');\nwith this\nvar el = createEl('style', {type : 'text/css'});\nThat solved my similar problem\n. ",
    "jeffbaun": "Having the same issue. Running IE8\n. ",
    "dmr": "In my IE8, http://fgnass.github.com/spin.js/ works like a charm :)\n. From my experience\nvar Spinner = function(0) {\nshould work.\n. ",
    "luwes": "var Spinner = function Spinner(o) {\nThat line was causing issues for me in IE8, after uglifying the code...\nIt's also a bit redundant I think, just use \nfunction Spinner(o) {\n. ",
    "kraftwer1": "Same here, even though I'm using 1.3.\n. ",
    "daniel": "1.3.2 doesn't work for me in IE7. I get a \"Object expected\" error.\nNote that http://fgnass.github.io/spin.js still uses 1.2.8. There I get \"'Spinner' is undefined\".\n. No, I use a freshly installed IE7/Vista VM from that site.\n. I tried all versions of spin.js from here on my site (without loading any other javascript), but couldn't get any version to work!\n. \n. \n. It worked after restarting IE!\n. No, I have no idea why. I can't reproduce it now.\n. ",
    "dominic-p": "As an update. I'm pretty much only seeing this in Firefox. I've been testing on FF 12 on Windows 7.\n. I went to test the effect of hwaccel and strangely enough, the problem seems to have disappeared. I wonder if it was a Firefox bug that got fixed in an update. Either way, we don't need to worry about this one anymore. Thanks.\n. ",
    "chrisnicola": "Have you tried using hwaccel: true? Had the same issue with an absolutely positioned parent and it looked odd, turning that on fixed the issue.\n. ",
    "ilvalle": "Same problem here when the spin is inside an element with position: fixed. In that situation the spin lines are not routed correctly, actually are all horizontal.\n. ",
    "TimothyGu": "Nope, the container has to be relatively positioned. Clarified in 7ea6aa9, #292.\n. If you are still having this problem, please provide a sample, standalone HTML file so that I can test and try to fix it. Thanks!\n. This is probably fixed a long time ago. If you still encounter this issue please provide a stand-alone test case.\n. Thanks!\n. The direction option is designed for this. As for variable speed, it might be possible to use a cubic-bezier. That would be fun :)\n. If anybody can provide a standalone example I will take a look at it.\n. I'll reopen this if there are further debugging information.\n. Please provide more information, like a sample HTML page demonstrating the issue.\n. The property is already there.\n. Unfortunately I don't think this should be part of Spin.js. Controlling timeouts is not part of what a CSS spinner is about.\n. First, unfortunately I can no longer read the JSON file as Chrome complains about it being \"old format.\"\nI have noticed the performance problem, since we are animating multiple lines as different objects. It might be more feasible to just animate the entire spinner as a whole. Let's move this discussion to #215 since this issue affects many devices and browsers than just LG-P700 with Chrome.\n. See http://spin.js.org/.\nThe stop() function is only on a Spinner object, not on the dojo.spin object.\n. Unfortunately the nuget package is published by an unknown third party (@itmeze I believe). I'll contact him about this issue, and let's see what we can do.\n. Unfortunately I can't see the issue you are describing here on my Windows 8.1 Chrome 43.0.2357.81 installation. #221 doesn't seem to make a difference either. Closing this and #221 unless there are further comments.\n. See https://saucelabs.com/tests/c976894765e949db8dffa7be479e00ad\nIt works.\n. Dup of #223.\n. Can someone post a full, standalone example?\nI'll be reopening once someone comments.\n. Duplicate of #35.\n. There isn't such a comment in spin.js, so I'd prefer not to include this change.\n. I don't think this is our problem. http://requirejs.org/docs/errors.html#mismatch says:\n\nTo avoid the error:\n- Be sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load scripts that have define() calls in them.\n- If you manually code an HTML script tag, be sure it only includes named modules, and that an anonymous module that will have the same name as one of the modules in that file is not loaded.\n- If the problem is the use of loader plugins or anonymous modules but the RequireJS optimizer is not used for file bundling, use the RequireJS optimizer.\n- If the problem is the var define lint approach, use /*global define */ (no space before \"global\") comment style instead.\n. To be honest this doesn't look optimal, since the loading cursor only shows on the lines. Therefore closing.\n. Fixed in #286.\n. -webkit-transform: translate3d(0, 0, 0) is enabled by the hwaccel option, which has many other bugs and thus disabled by default: #41, #47.\n. spin.js generates a spinner. I think that while a modal would be helpful, it should not be in the core. I'll try to make an example that will be checked into the repo, for this feature.\n. Unfortunately you cannot change the opts while it is spinning currently. I'll keep this ticket open for a hotReload function that maybe can change the non-critical options on-the-fly.\n. What timer are you referring to?\n\nYou can remove the spinner by doing spinner.stop().\n. Thanks!\n. @jronimo, thanks for your insights. It'll be great if you can give a stand-alone sample HTML file for me to test. Disabling useCssAnimations means that a very inefficient setTimeout() mechanism is used, which might offer better compatibility. Spin.js does do some funky things like appending styles to <head> when CSS animations are used, so that might be a reason for this bug.\n. @jronimo okay no problem. I just picked up the maintainership of this project a few days ago so just trying to clean up rotting bug reports, pull requests, et cetera.\n. @ErrolSayre, can you provide a sample HTML?\n. > Could another option (rather than setTimeout) be to use requestAnimationFrame()?\nYes I would think so.\n. I can't reproduce this issue, either with http://spin.js.org/ or with a simple test file.\nI'm just gonna close for now, and if there is any new developments I'll reopen this.\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n</head>\n<body>\n  <div id=\"foo\">\n    <p>Ayy</p>\n  </div>\n  <script src=\"site/spin.min.js\"></script>\n  <script>\n    var opts = {\n      lines: 13, // The number of lines to draw\n      length: 20, // The length of each line\n      width: 10, // The line thickness\n      radius: 30, // The radius of the inner circle\n      scale: 1, // Scales overall size of the spinner\n      corners: 1, // Corner roundness (0..1)\n      rotate: 0, // The rotation offset\n      direction: 1, // 1: clockwise, -1: counterclockwise\n      color: '#000', // #rgb or #rrggbb or array of colors\n      speed: 1, // Rounds per second\n      trail: 60, // Afterglow percentage\n      shadow: false, // Whether to render a shadow\n      hwaccel: false, // Whether to use hardware acceleration\n      className: 'spinner', // The CSS class to assign to the spinner\n      zIndex: 2e9, // The z-index (defaults to 2000000000)\n      top: '50%', // Top position relative to parent\n      left: '50%' // Left position relative to parent\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n  </script>\n</body>\n</html>\n\nInternet Explorer 11\nVersion: 11.0.9600.17126\nUpdate Version: 11.0.9 (KB2957689)  \n\n\n. The SO post has an answer. Comment here if you still are having issues.\n. Dup of #264.\n. Unfortunately no, not at this moment. We are not using SVG to render it, but rather \"primitive\" border-radius. And we are not planning on changing this soon.\n. This would complicate positioning (i.e. if both left and right are specified which one would you use?), and it's easy enough on your side, so closing.\n``` js\nright = '60%'\nleft = (100 - (+(right.slice(0, -1)))) + '%'\n// '40%'\nright = 60\nleft = (100 - right) + '%'\n// '40%'\n```\n. Hwaccel is known to be buggy, and therefore not enabled by default. Closing.\n. 2.1.0 was properly released so closing.\n. Hey @fgnass, I'd be happy to take over the maintainership of this package. It's true that I don't have any contributions here (yet), but I hate to see a popular package like this with > 7000 stars being neglected. Feel free to check out my GitHub profile and you can email me if you have any questions. Thanks!\n. @fgnass Cool! I'll start cleaning everything up\n. Bower works now:\n```\ntimothy_gu@tgdo:~$ bower info spin.js\nbower not-cached    git://github.com/fgnass/spin.js.git#\nbower resolve       git://github.com/fgnass/spin.js.git#\nbower download      https://github.com/fgnass/spin.js/archive/2.1.0.tar.gz\nbower extract       spin.js#* archive.tar.gz\nbower resolved      git://github.com/fgnass/spin.js.git#2.1.0\n{\n  name: 'spin.js',\n  version: '2.1.0',\n  main: 'spin.js',\n  dependencies: {},\n  readme: 'README.md',\n  repository: {\n    type: 'git',\n    url: 'git://github.com/fgnass/spin.js.git'\n  },\n  ignore: [\n    'Gruntfile.js',\n    'site',\n    'bower.json',\n    'component.json',\n    'package.json'\n  ],\n  homepage: 'https://github.com/fgnass/spin.js'\n}\nAvailable versions:\n  - 2.1.0\n  - 2.0.2\n  - 2.0.1\n  - 2.0.0\n  - 1.3.3\n  - 1.3.2\n  - 1.3.1\n  - 1.3.0\n  - 1.2.8\n``\n. Duplicate of #195.\n. Timeout. Closing.\n. Can you make a small test sample? I'll reopen this issue once you do.\n. Thanks!\n. Actually I'm having second thoughts about this. As @fgnass already said in #243, one can simply checkspinner.elto see if it's spinning. Reverting then.\n. You can use the.stop()` API to stop spinning. Changing text is not related to spin.js.\n. Fixed in master. Will be deployed in the next release.\n. This bug is the exact bug we fixed in 2.0.0: https://github.com/fgnass/spin.js/blob/master/site/index.html#L185-L188\n\nThe Spinner is now absolutely positioned at top: 50% left: 50% by default.\n. Thank you for this explanation, and I totally understand your frustration. It is kind of late to submit a patch for a branch that is basically closed (or never exists) more than a year ago however.\n\nHowever, there is another thing that precludes me from just branching off a 1.x. Semantic version specifies that any behavior change would need a major bump. This is not possible anymore as we already have a 2.0. Who knows who's going to depend on this behavior?\nSo, sadly, it is not possible for me to make another release now. If the patch works for you, good! It might help other people, whom I honestly hope to not be a large population ;)\n. Thanks! It was my fault.\n. We officially publish the module as spin.js. Not sure about the other one.\n. A pull request would surely be welcome for this.\n. @mikesherov, done. Sorry about the wait.\n. Duplicate of #209. Do you know how to publish it on nuget? i.e. what are the commands for it? I don't really use windows that much these days so I'm kinda out-of-date on nuget\u2026\n. Unfortunately I don't understand this question. What are the \"examples\" you are referring to?\n\nDesafortunadamente no comprendo este pregunta. \u00bfQu\u00e9 son los \u00abejemplos\u00bb?\nY, se habla espa\u00f1ol :)\n. Ah, \u00bflos archivos en site/? Tienes que copiar los scripts al site/. Puedes usar grunt:\nsh\nnpm i -g grunt-cli # instalar grunt. es posible que tienes que usar `sudo` para este\nnpm i              # instalar los dependientes locales para grunt\ngrunt\nAhora debes poder abrir site/index.html :)\n. Thanks!\n. Check your browser console:\nUncaught ReferenceError: Spinner is not defined\n    at (index):84\nThe <script> tags in the HTML box of the fiddle is executed before the JavaScript box, so Spinner isn't defined when HTML <script> tags are executed.\n. Not really. This can only change if the browser changes, which is not possible.\n. See?\n. Just MIT is fine.\n. ",
    "kriswallsmith": "I've also seen ! used for this purpose.\n. ",
    "ninjatyler": "Thank you! Sorry to bug ya. I should've checked the source first.\n. ",
    "matthewrobertson": "Nope I did not. That looks like what I was talking about exactly.\n. ",
    "thehappycoder": "Looking forward to have this ability to change color of shadow. Currently the shadow is too contrast with the light color I chose for my website.\n. ",
    "hydr": "Thank you for the fix! I tested it and it works perfect :)\n. ",
    "echarish": "I dont know how and why it started working on Safari... :D\n. ",
    "willyfc": "@jamesmoss you can't modify with the options, you can try modifying the var defaults, at line 127 of spin.js, set the radius to 0 and send 0 in the options.\n. ",
    "jamesmoss": "Yep, that's what I did in the end but I thought it'd be nice to allow users control over this via the options so they don't have to use their own hacked version of spin.js.\n. ",
    "ralphsmith80": "Also just to be clear I'm not trying to wipe out and currently existing style. For example the following will still break it.\n$('style').html( $('style').html() + \"something\") \n. I created a small animation test and added to the existing html with the same code from above. It works but the animation apear to get reset. I'm looking into that further not, but the bottom line at this point is that it is an issue with spin.js. Also this does not happen in IE meaning it works in IE.\n. It's definitely an issue with the css animation. If you change the below line to always be true then it works.\nhttps://github.com/fgnass/spin.js/blob/gh-pages/spin.js#L169\n. @fgnass you're right about the behavior but what I would argue as a fault or at least an undocumented limitation is that you're currently unable to modify the style sheet from the style tags. \nIn my use case I was programmatically adding style rules for a part of my application that was not associated to spin.js. Since I was doing this will my application was in a disabled state the spin animation would stop. My work around was to use the DOM api to add my styles. \nSo just as a heads up to future users this should probably be noted in the README or somewhere that it can be found easily.\n. ",
    "Romiko": "Fixed in ce1230c3c7710e2c763cabcbe5c5859c255e81f8\n. ",
    "XhmikosR": ":+1: \n. ",
    "adrianlee44": "There seems to be a missing semicolon at the end of the script when the function is getting called.\nCurrent code at the end.\n}(window, document)\nAdding a semicolon to the end fixed my problem.\n. ",
    "bamiaux": "I have the same bug when showing/hiding dynamic spinner buttons\nWith chrome 20.0.1132.57: It works fine\nWith chrome 22.0.1229.79: it freezes\n. This issue disappears when setting hwaccel to false\n. ",
    "evgenig": "I tried (before to report the bug) but the result is the same, even now hwaccel is set to false...\nI'm with chrome:  22.0.1229.79 \n. ",
    "kumarharsh": "From what I've experienced, this bug is in Chrome, not in spinner itself. The versions 22-24/25 were not rendering properly for many sites, especially my own webpages, even when there was no js involved.\nWith chrome 28 (now), I don't run in these issues.\nI suppose this issue can be closed. If I find some conclusive proof about this buggy chrome builds, I'll make sure to post it here.\n. ",
    "ghiculescu": "Might be easiest to centre it on-screen: https://github.com/fgnass/spin.js/issues/17\n. ",
    "ignaciogiri": "You can do all this with CSS without hacking the plugin. Just add left: 50% to the class that spin.js gives you and add that class to a previous container that you have already aligned with CSS.\n. ",
    "RDDavies": "I wouldn't really call this an \"issue\", so might be the wrong place to be posting this.\nThe answer, is yes, that'd be fine, but I don't think the full answer is in-scope for here. I'd really check out something like ##javascript on Freenode IRC for this.\n. ",
    "MarkKharitonov": "I have the same problem.\n. ",
    "crazym": "same here, anyone worked it out?\n. ",
    "ken92": "I also have this problem. It'd be great if someone had a solution\n. ",
    "jmwolfe": "I found that hwaccel: true resolves the issue in Chrome, but IE9 still freezes up when the DOM is getting loaded.  IE does not have disable hardware acceleration checked in the options. It looks like if you have a lot of elements you are loading dynamically on the page, you are just out of luck when it comes to an animated solution. I am about to open an IE9 specific issue.\n. ",
    "pdjenera": "I also have a problem with this in Firefox and IE not Chrome.\n. +1 I am experiencing this in Firefox as well \n. ",
    "rudresh-ajgaonkar": "I am facing the same issue. Is there any solution yet?\n. ",
    "ximet": "I have the same problem. For example: I run your demo and after in console write infinity cycle.. @theodorejb Yes, I think you may use css spinner for example this demo: http://tobiasahlin.com/spinkit/. If I use the same infinity cycle, I don't have any problem with spinner . ",
    "epeli": "Ah, ok. That's a solid counter argument.\n. ",
    "toots": "Ok, thanks for the response!\nI think my IE is pristine (it's a barebone VM install) but I will test further..\n. ",
    "alexcastillo": "+1\n. +1\n. ",
    "jonahaaron": "+1\n. ",
    "UsgsMonkey": "Greetings,\nI'm rather new to the world of modules and dependency injection and am currently working an implementation using CommonJS where I appear to be running into the same problem described above with Spin.js.  Is there a comparable example implementation using CommonJS or guidance you can provide on how using this alternate approach to construct a module implementing Spin.js?. Nevermind.  I figured it out finally through trial-and-error...\nvar Spinner = require('spin.js');\nvar pSpinner = new Spinner().spin(document.body);. ",
    "tzengerink": "No need to use jQuery: http://jsfiddle.net/8szJD/\n$(\"#test\") returns an array of elements, $(\"#tests\")[0] should work aswell:\nvar spinner = new Spinner(opts).spin($(\"#test\")[0]);\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n. ",
    "adius": "Good to know. ^^\nThanks a lot!\nBut why didn't spin.js throw an error. I had no clue what to do...\n. ",
    "jagin": "+1\n. ",
    "emilos": "+1\n. ",
    "xandaro": "+1. This is the only reason preventing us from using spin.js\n. ",
    "joaoritter": "+1. Do fix this.\n. ",
    "dcc635": "+1. We are moving away from spin.js until this XSS security vulnerability is fixed. I would also recommend changing the title to mention this as a security vulnerability.\n. ",
    "johannesnagl": "+1\n. sorry, my info was outdated. just tested it with the latest beta of 19, and it works again.\n. ",
    "catearcher": "How strange, I had the same problem in Firefox 19 just a few days ago and today it works fine.\nFirefox Ninja update?\n. ",
    "julen": "Yeah, this is working again on my Aurora too, so might have been something on the Firefox side. Closing for now, feel free to open it if you see similar behaviors.\n. ",
    "chovy": "Has this been implemented? I'm getting position problems as well with auto positioning.\n. ",
    "alexeypetrushin": "Hmm, ok then, I personally don't need to support old browsers, but probably other may need it, closing it.\n. ",
    "peritus": ":heart: \n. ",
    "craue": "/ping @fgnass\n. And it won't be possible sometime soon? This can be considered a feature request. ;)\n. /ping @fgnass again\n. It's working in native IE >=6. Try it with http://netrenderer.de. Are you using some kind of emulation?\n. Strange. Doing the same actually works for me.\n. The package should be registered on https://packagist.org as well.\n. /ping @fgnass\n. Just trying again... :smirk:\n/ping @fgnass\n. ",
    "MeoMix": "Hey,\nI am not running under any emulation. I am using Internet Explorer version 9.0.8112.16421. I go to \"F12 -> Developer Tools\" and set my document modes to IE8.\nHere's a short video: http://screencast.com/t/87VuHRbqziD\n. OK. I can't reproduce my issue inside of a VM. There's something cached somewhere... not sure how/what could cache that would make this not work. Hard refreshing doesn't fix anything, either. Weird!\nIt might actually be conflicting with a Google Chrome Frame plugin, but I don't think I have that installed.\n. ",
    "gsklee": "Hi @fgnass, just curious about what's going on with all the pending pull requests. If it's something about improving our commits or some lines not adhering to the coding style, please do let us know so we can improve them and benefit the project. Thanks!\n. @mherodev tried to reproduce it in both Mac and Ubuntu but failed; could you provide a code snippet?\n. Tested using the code above in Chrome v25 under Win7/Ubuntu and both looked fine.\nDid the flickering happen to you only after Chrome went from 24 to 25? Is there the same issue with Firefox or Safari?\n. ",
    "mreinstein": "@fgnass  referring specifically to this: https://gist.github.com/its-florida/1290439\n. very nice! \n. ",
    "bigmihail": ":+1: It is very good jQuery plugin. I use it. Thank @fgnass for Spinner, and @mreinstein for this issue.\n. ",
    "mherodev": "block {\nwidth: 100px;\nheight: 100px;\nmargin: 5px;\nbackground-color: blue;\n\n}\nvar opts = {\n    lines: 13, // The number of lines to draw\n    length: 7, // The length of each line\n    width: 4, // The line thickness\n    radius: 10, // The radius of the inner circle\n    corners: 1, // Corner roundness (0..1)\n    rotate: 0, // The rotation offset\n    color: '#000', // #rgb or #rrggbb\n    speed: 1, // Rounds per second\n    trail: 60, // Afterglow percentage\n    shadow: false, // Whether to render a shadow\n    hwaccel: false, // Whether to use hardware acceleration\n    className: 'spinner', // The CSS class to assign to the spinner\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\n    top: 'auto', // Top position relative to parent in px\n    left: 'auto' // Left position relative to parent in px\n};\n$(document).ready(function () {\n    var element = $('#block');\n    startLoadingAnimation(element);\n});\nfunction startLoadingAnimation(element) {\n    element.find('input, select').prop('disabled', true);\n    element.fadeTo('fast', 0.5, function() {});\n    var target = document.getElementById(element.attr('id'));\n    var spinner = new Spinner(opts).spin(target);\n}\n\n\n\n\n\n\n\n\n\n\n\n\nSeparate files out of habit, my apologies! Flickering is in Windows 7, Chrome running in VMware Fusion. I haven't been able to test it outside of my VM, but I will check it out tomorrow to verify the issue. \n. It works fine both in IE and in Firefox. I can't comment on whether or not\nthis issue existed in specific, previous versions of Chrome. I wish I could\nbe of more help.\nOn Mon, Feb 25, 2013 at 9:45 PM, Gias Kay Lee notifications@github.comwrote:\n\nTested using the code above in Chrome v25 under Win7/Ubuntu and both\nlooked fine.\nDid the flickering happen to you only after Chrome went from 24 to 25? Is\nthere the same issue with Firefox or Safari?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/fgnass/spin.js/issues/128#issuecomment-14090943\n.\n. It also appears to work in the most recent version of Safari. Just getting\ncrazy flickering in Chrome. Very odd.\n\nOn Mon, Feb 25, 2013 at 9:50 PM, Michael Herold digitallimit0@gmail.comwrote:\n\nIt works fine both in IE and in Firefox. I can't comment on whether or not\nthis issue existed in specific, previous versions of Chrome. I wish I could\nbe of more help.\nOn Mon, Feb 25, 2013 at 9:45 PM, Gias Kay Lee notifications@github.comwrote:\n\nTested using the code above in Chrome v25 under Win7/Ubuntu and both\nlooked fine.\nDid the flickering happen to you only after Chrome went from 24 to 25? Is\nthere the same issue with Firefox or Safari?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/fgnass/spin.js/issues/128#issuecomment-14090943\n.\n. \n\n",
    "mfrye": "I just tried integrating this and I'm getting a flicker as well. I'm in Chrome 28 and it seems to flicker once every spin cycle. Does anyone else have this?\n. ",
    "lastboy": "I have similar issue.\nMy logic switches opacity from 0.5 to 1 (I tried other numbers, still occurs)\nBut, only when my page exists with an IFrame.\nMy version:  33.0.1750.154 \nEdit: I noticed that when the range is less than 1 (e.g. 0.2-0.8) the issue occurs only one time at starter\n. ",
    "corpulent": "@unity I am just shimming it,  not sure if its the best way to go.\n. ",
    "kabasakalis": "+1\n. ",
    "wildebeast": "+1\n. ",
    "keyadams": "+1\n. ",
    "paulclark": "+1\n. Working for me now. Thanks!\n. ",
    "ttelang": "I would like to stop this spinner in a different module. How can I do this ?\n. ",
    "dentarg": "Default options at http://fgnass.github.io/spin.js/ is hwaccel: false, though.\n. ",
    "n8felton": "Awesome, thank you.\n. On your primary site, it states:\nHiding the spinner\nTo hide the spinner, invoke the stop() method, which removes the UI elements from the DOM and stops the animation. Stopped spinners may be reused by calling spin() again.\nThis may just be a regular function, not necessarily a jQuery function. Regardless, it was working with test code yesterday, and now the stop() function appears to not work anymore. I will use the method you described however, as that appears to work.\n. ",
    "mjrichards91": "It seems the fiddle is no longer working right, even after updating the external resources. Has something changed since then?\n. ",
    "drfunk2458": "I can't seem to stop your spinner either...  Here is my code...\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\n\nSpin Test\n\n\n\n</p>\n<p>```\n      $(document).ready(function () {\n            var opts = {\n              lines: 12 // The number of lines to draw\n            , length: 14 // The length of each line\n            , width: 6 // The line thickness\n            , radius: 16 // The radius of the inner circle\n            , scale: 1 // Scales overall size of the spinner\n            , corners: 1 // Corner roundness (0..1)\n            , color: '#000' // #rgb or #rrggbb or array of colors\n            , opacity: 0.25 // Opacity of the lines\n            , rotate: 0 // The rotation offset\n            , direction: 1 // 1: clockwise, -1: counterclockwise\n            , speed: 1 // Rounds per second\n            , trail: 60 // Afterglow percentage\n            , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\n            , zIndex: 2e9 // The z-index (defaults to 2000000000)\n            , className: 'spinner' // The CSS class to assign to the spinner\n            , top: '50%' // Top position relative to parent\n            , left: '50%' // Left position relative to parent\n            , shadow: false // Whether to render a shadow\n            , hwaccel: false // Whether to use hardware acceleration\n            , position: 'absolute' // Element positioning\n            }\n            var target = document.getElementById('spinner')\n            var spinner = new Spinner(opts).spin(target);\n     });\n    \n\n\n\n //do something important here..............\n   $('#spinner').spin('hide'); \n\n```\n\nother options I tried:\n $('#spinner').spin('stop'); \n $('#spinner').spin.stop(); \n $('#spinner').stop(); \n. ",
    "dallf44": "After debug enabling and disabling third libraries and styles in my page, I realized the error was using spin.js along with jquery easy ui, the line:\nclassName: 'spinner', // The CSS class to assign to the spinner\nmakes the spin.js fail showing the animation, because jquery easy ui has a control called spinner, which acts like a slider and for that control the definition of its styles override css of spin,js causing the issue.\nSo if you're using jquery easy ui along with spin.js be sure to set className property to any different from spinner !!!\nclassName: 'mySpin', // The CSS class to assign to the spinner\nthe last line make spin.js work like expected. \n. ",
    "ProLoser": "Please tag this version as it's breaking bower.\n. ",
    "mdibaiee": "https://github.com/fgnass/spin.js/pull/145\n. OK. I recommend to close the out of scope feature requests then, thanks.\n. ",
    "photoman": "This demo is not longer working. :(\n. ",
    "1000i1": "Yes, that's exactly what I thought, it's very weird.\nI attach an image of explorer's dev tool so you can see for yourself\n\n. You're so right, I didn't see that one. Sorry for wasting your time.\n. ",
    "nileshkale": "Hi\n    This has not really solved my problem. The component works very\n    good on FF but fails on Chrome and IE10 - no error, but the\n    overlay does not display!\n    I debugged with chrome and while debugging breakpoints it does\n    show the spin wheel ! \n  Regards\nNilesh Kale\nMobile: +91 9923 484 590\nY!: nileshkale\n      On 14-05-2013 15:59, Felix Gnass wrote:\nYou have to set the container to something other than display:none\n    before you invoke spin() since otherwise the\n    script can't measure the dimensions. Here is a working example:\n    http://jsfiddle.net/fgnass/JKHCJ/\n  Alternatively you could place #overlay_center\n    outside of #overlay. This has the additional\n    benefit that the spinner itself is fully opaque (instead of\n    opacity: 0.5): http://jsfiddle.net/fgnass/EKWbw/\n    In that case the order of calling show() and spin()\n    doesn't matter.\n  \u2014\n    Reply to this email directly or view\n      it on GitHub.\n. ",
    "asl677": "Thanks Felix!\nI figured it out! Thanks for the help.\nOn Sun, May 26, 2013 at 7:53 AM, Felix Gnass notifications@github.comwrote:\n\nCould you please provide a little more detail on what exactly you are\ntrying to do? Here is an example that shows how to modify a built-in preset\nif this is what you want: http://jsfiddle.net/fgnass/R2Ve4/\nIf not, please feel free to modify the fiddle to illustrate what you are\ntrying to achieve.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/fgnass/spin.js/issues/152#issuecomment-18464185\n.\n\n\nBest,\nAlex S. Lakas\nm.3014671026\nalexlakas.com\ndribbble.com/alex2pt0\n. ",
    "igorlima": "I didn't know about Testling CI. It's new for me. I'll take a look on this great tool.\n. hi @fgnass, I'm trying to use CI Testling on test/ci branch.\nCould you give a hint why I'm not able to see the tests running on CI Tesling.\nAm I missing something?\nThanks.\n. Yep, I did. But it seems work just if there is a commit in master branch.\n. What you think about SauceLabs or BrowserStack?\nSeems to be a good option.\n. Hey I'm facing some issues to integrate our tests with SauceLabs. One of the reasons is to use secure environment variables. I did a pull request on saucelauncher, suggesting a way to use that.\nI'm trying to use testem. It seems great. On testem repo, there is a link showing how to do SauceLabs integration. But, as I told, I couldn't use secure environment variables. \nWhat I did by now is located on test/ci branch. Probably you can give me a hint how to do this integration.\nThanks.\n. ",
    "davidmatas": "So it is not possible load the spin.js from outside the iframe and show it inside the iframe? I control the content of the iframe so I could call the CSS rules statically if it is needed.\n. ",
    "andreyvolokitin": "And a quick fix:\ncss\n.spinner > div > div {\n    overflow: hidden;\n    }\nThis seems to be solving issue in IE9. Did not check it in other browsers, so better be applied with IE-specific css-hack...\n. Try to uncheck 'Shadow' checkbox. Or reduce 'Lines' to minimum. With showed settings I am also not seeing artefacts. I`m viewing it on Mac through virtual Win 7 with native IE9.\n. Yeah, seems thats it - checked it on Browserstack and no issue there. Very strange - never faced any VM-issues before. Sad that VM is not reliable enough...\n. ",
    "bbodenmiller": "Demo?\n. http://fgnass.github.io/spin.js/ is working for me all the way down in IE7 mode.\n. ",
    "angryobject": "http://angryobject.github.io/spin.js/\nCheck \"enabled\" in the Progress settings.\nUPD. Direct link with enabled progress tracking http://angryobject.github.io/spin.js/#?lines=13&length=20&width=10&radius=30&corners=1.0&rotate=0&trail=60&speed=1.0&direction=1&progress=on&progressTop=0&progressLeft=0\n. ",
    "alvipeo": "+1\n. Well, this solves just part of the problem. The Spinner is still not centered properly when the page is long (when the scrolling is enabled).\n. ",
    "iappwebdev": "You can combine spin.js with blockUI. See a working fiddle here: http://jsfiddle.net/8Mcr6/1/.\n. Well then I suggest you to block the whole page. See it in action: http://jsfiddle.net/8Mcr6/2/\nOtherwise you will have to detect the height of the element to block, its offset and then calculate the desired position. I prefer to block the whole page in this case.\n. You included an outdated script source, you're getting network errors on both fiddles. See http://jsfiddle.net/8Mcr6/186/ and http://jsfiddle.net/8Mcr6/185/ for working examples.\n. ",
    "fprosper": "Hi, I know this is closed, old and outside the scope of spin.js development, but I can't see the spinner showing in both http://jsfiddle.net/8Mcr6/1/ or http://jsfiddle.net/8Mcr6/2. If you have the chance, could you tell me whether it's just me, or there is something wrong there? I would really to implement that solution. Thank you in advance. \n. That's great thanks!\n. ",
    "jmalonzo": "It looks like this is a regression in Chrome Canary. See [1] for more details.\n[1] https://code.google.com/p/chromium/issues/detail?id=276086\n. ",
    "lynndylanhurley": "Is there a quick workaround for this?\n. That works, thx @aaron-lord!\n. ",
    "aaronlord": "For now, I just removed the CSS3 animation.\nFile: spin.js @ line 350~\n``` js\n  if (!vendor(probe, 'transform') && probe.adj) initVML()\n  else useCssAnimations = false //vendor(probe, 'animation')\nreturn Spinner\n}));\n```\n. ",
    "vovanbo": "This issue can be solved by properly determine of keyframes prefix. In latest Chrome Canary \"animation\" and \"animationName\" used without prefix, but keyframes still use \"-webkit-\" prefix. CSS rule inserted in DOM stylesheet throw error because for keyframes used prefix for \"animation\" determined in following code (here):\njs\nelse useCssAnimations = vendor(probe, 'animation')\nI write some function for proper determination prefix for keyframes (tested only in Chrome Canary, Firefox Nightly, Opera 12.16):\n``` js\nfunction get_keyframes_prefix() {\n  var tmp_el, tmp_sheet, rule, parent,\n      prefixes = [\"\", \"-webkit-\", \"-moz-\", \"-o-\", \"-ms-\"],\n      success = false;\ntmp_el = document.createElement(\"style\");\n  tmp_el['type'] = \"text/css\";\n  parent = document.getElementsByTagName('head')[0];\n  parent.appendChild(tmp_el);\n  tmp_sheet = tmp_el.sheet || tmp_el.styleSheet;\nfor (var prefix in prefixes) {\n    rule = \"@\" + prefixes[prefix] + \"keyframes name{}\";\n    try {\n      tmp_sheet.insertRule(rule, 0);\n      success = true;\n      break;\n    }\n    catch (e) {\n    }\n  }\n  parent.removeChild(tmp_el);\n  return success === true ? prefixes[prefix] : false;\n}\n```\nIt can be used in addAnimation() function like this (here):\njs\npre = get_keyframes_prefix();\nIt worked for me, but without wide testing.\n. ",
    "KOTRET": "what about a spinner-related attribute prefix? i can imagine data-length is very common...\nAlso: why not loop through spinner.defaults?\n. why not wrap the image in a container and place the spinner in it? there is no need for this extension...\n. be cool, that was just a suggestion.\nFurthermore its not my code! :D\nimagine, the next one wants to show a video or any other stuff in the middle of the spinner.\nSo for me this has nothing to do with the spinner itself anymore.\njust my 2 cents :)\n. ",
    "MikeMayer": "I agree completely about the prefix part. That should definitely be done.\nI didn't want to expose spinner.defaults to a different scope even if that makes more sense, I guess I could expose it enough to make the jQuery plugin work.\n. ",
    "hikalkan": "Please merge this if it works since it's really a needed feature.\n. ",
    "stevensacks": "I can't give you a simplified example but I can privately give you a link where you can see it happening.\n. No I mean Chrome. The release version that everyone has. I'm totally willing to show it to you in action but it's behind a password protected wall so I don't want to post the link publicly. I think you'll find it interesting to see the behavior. I did a lot of digging when it was happening, before I knew it was spin.js. I watched the DOM to see if any divs were being set to hidden and they weren't. I had spin.js working in a previous version of my site where I was using li tags but in this new version I'm using relative positioned divs with float:left and now, only in Chrome, it causes parent divs to disappear. I've isolated it to spin.js. The parent containers (all the way up) all disappear, but you can still see the spinner.\n. I was hoping you'd see the behavior and be able to provide some insight based on your intimate knowledge of your own code.\n. I can email you the link with the password or DM it to you on Twitter if you follow me. It's 1am here (I'm on Pacific Time) and I'm about to go to bed. I can give you access prior to going to sleep so you can look at it when you have time and maybe by the time I wake up you'll have an idea of what might be causing it. I can hope, can't I? :)\n. ",
    "bendoh": "Also experiencing this. Second level container has to be positioned. ([positioned] > [positioned] > [spinner])\nDoesn't matter if the container is position: relative, static or absolute. Doesn't seem to happen when immediate container is position: fixed.\nMaking outer container statically positioned seems to fix it.\n. ",
    "boustanihani": "having same issue here :(\nMaking the outer container statically positioned does not seem to solve the problem...\nP.S. I am having this issue only on Chrome for Android\n. ",
    "kelko": "Real-World example. This is the spin.js configuration:\njavascript\nvar opts = {\n    innerImage: { \n        url: 'img/logo.png',\n        width: 58,\n        height: 58\n    },\n    lines: 12, // The number of lines to draw\n    length: 2, // The length of each line\n    width: 8, // The line thickness\n    radius: 34, // The radius of the inner circle\n    corners: 0, // Corner roundness (0..1)\n    rotate: 0, // The rotation offset\n    direction: 1, // 1: clockwise, -1: counterclockwise\n    color: '#000', // #rgb or #rrggbb or array of colors\n    speed: 1, // Rounds per second\n    trail: 60, // Afterglow percentage\n    shadow: false, // Whether to render a shadow\n    hwaccel: true, // Whether to use hardware acceleration\n    className: 'spinner', // The CSS class to assign to the spinner\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\n    top: 'auto', // Top position relative to parent in px\n    left: 'auto' // Left position relative to parent in px\n};\nThis is the result:\n\n. Do as you please, it's your code.\nBut IMHO putting the spinner in a wrapper which includes the image I want to be shown in the spinner sounds like an unpleasant hack.\nThe way I see it: I want the spinner to display an image of my liking so I tell the spinner to display that image.\n. a) Sorry if it sounded \"pouting\". Was not intended. But (see b. below) I mistook you and I don't see a sense in \"battling\" over if this or that extension has a sense or not. The owner of the code decides and I'm OK with it. So: I'm cool, really.\nb) I mistook you for fgnass as I read the comment on my pad as I had other things on my mind in that moment. So I closed it too fast. Sorry.\nAbout your objection:\nYes, I understand. But still that person want the video or what-ever to be (visibly) part of the spinner. So in my opinion the spinner should be the part I hook it into, not a div on the outside of the spinner which does some positioning magic to place it on the correct position.\nMaybe the spinner could then offer an attribute to pass an HTML element which is then shown in the middle of the spinner. This way the spinner does not care what it is that is shown but the spinner does all the positioning of the inner part.\n. I like the idea.\nBut I wouldn't drop the calculation code too fast. If you already have a working code for that why require the users to calculate it from now on on their own? Maybe make it optional:\npositioning: 'inherit'\nAs default to not calculate the position inside spin.js but let another component decide (CSS, jQuery, some code of my own)\npositioning: 'calculate'\nThe current way of setting the absolute position inside the target yourself. (Feel free to find more suitable names.)\nBut that would only help to set an image into the spinner, but taking KOTRET's objection into account (I know he wrote that for another purpose. But still that might be a valid point): How about adding the possibility to hook another div into the middle of the created spinner.js div? That way the users are completely free to put into the spinner whatever they like. (videos, images, SVGs, ...)\n. ",
    "domachine": "No the section in the package.json is deprecated.\nFelix Gnass notifications@github.com schrieb:\n\nHm, probably for discoverability I guess?\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. \n",
    "chaselee": "Occurs in Firefox 24 as well but only when using with Angular.\n. ",
    "f4d": "I'm searching for a new solution and landed here because the current pace.js script I'm using hangs at 99% in ie8 only. Any news as to getting this to work in ie8 or what the general issue is, if any? \n. ",
    "hflaisher": "no, never got it to work, nor found solution.  it didnt hang, but we just\nget a black rectangle where the spinner should be.\ngood luck, if you find a solution, would apprec hearing it.\n--Harvey\nOn Wed, Jan 29, 2014 at 12:06 PM, graph-io notifications@github.com wrote:\n\nI'm searching for a new solution and landed here because the current\npace.js script I'm using hangs at 99% in ie8 only. Any news as to getting\nthis to work in ie8 or what the general issue is, if any?\n\nReply to this email directly or view it on GitHubhttps://github.com/fgnass/spin.js/issues/186#issuecomment-33605333\n.\n. \n",
    "sammydigits": "For me, http://fgnass.github.io/spin.js/ does not work in IE7/8\n. ",
    "stephenmh": "I wanted to provide an update. When I ran the page from the server on my iPad, the page worked as expected however its demonstrating different behaviors within IE 10 depending if its running locally or from the web server.  \nI modified an example that was provided on this site and although it works locally, when I run the code below on the server, I receive this error: \"Unable to get property 'spin' of undefined or null reference\" at Spinner({.....\nDoes anyone have any suggestions? \nSpinner({radius: 60, length: 0, width: 30, color: '#C40000', trail: 40}).spin(document.getElementById('target'));\n. I resolved my issue with IE 10. I needed to add \nmeta http-equiv=X-UA-Compatible content=IE=edge\n. ",
    "bjornstar": "176 was closed instead of merging it and the '1.3.2' tag was not updated to include the component.json so we still can't use this as a component. If you had a master branch we could use that, but that doesn't exist either. We'd love to use your library as a component, but we can't do it yet. Please add a master branch at the very least.\n. ",
    "freddyheppell": "You should be hosting it somewhere else but a quick google search brought up this\n//cdnjs.cloudflare.com/ajax/libs/spin.js/1.3.2/spin.min.js\nThat is guaranteed to be up (you may need to replace // with http://)\n. ",
    "magwo": "I was seeing something similar sporadically (!)... and I fiddled around with some brackets and semicolons in the spin.js code, and it went away. When I changed back, however, I was not able to reproduce anymore. I think it might be that browsers (chrome) and/or minfiers get confused by the lack of brackets and semicolons in the if statements around the AMD parts of the code.\n. ",
    "jbmonroe": "I'm not having a problem running it with Zepto.\n. Concur--and the use of import rather than require breaks using this in Electron.  Not in a position to use either webpack or Rollup--this build is already complicated enough.. ",
    "tablatronix": "Yeah I don't understand how you resize it either.\ni guess you have to drop the radius and widths\n. I think we were both assuming this would auto scale to fit inside the target.\nCan probably close this as invalid, as scaling does not seem to be a feature.\n. updated the fiddle\nseems to be a chrome bug of sorts, or rounding issue,  relating to position absolute and percentages.\nexamples added to fiddle.\n. \n. I am still trying to narrow it down, I can manipulate it in the fiddle, but in my real world use, it is always larger. Must be some deeper inheritance offset render issue.\n. Do they match the example link ?\nThis is chrome, IE10, FF win7\n\nYours all look like my broken fiddle also.\n. I just found out that this behavior changes as you resize the browser, so that will probably lead me to the issue here or a known issue.\n. Turns out to be the old opacity animation position wiggle problem.\nNo clue what the official chromium bug is for this, but this solution fixes my issue, and is posted as a solution for several browsers around the web. \n-webkit-backface-visibility: hidden;\n( it is directly related to animating opacity and transform offsets on subpixel calculations from my tests, so usually an issue on auto margins or other subpixel container issues )\nFor example, This can be reproduced on the example page by removing the.\n#preview {\n/* position: relative; */\n. I would also be curious if this fixes the issue on mac chrome as your screenshot was showing the issue on all elements, might be a different issue though there.\n. Yeah seems to have resolved now, I know several versions of chrome and canary had major rendering issues for a while as i kept an eye on it. Seems fine now.\n. ",
    "ghost": "+1\n. +1 in IE 11 \nthe spinner via angularjs isn't working correctly\n. ",
    "Dansen0603": "+1, this seems to happen in all IE versions\n. +1\n. ",
    "FordyTech": "I had a similar issue in IE11, but found that it only happened when the trail setting was set to 100. Moving the trail setting to 99 solved it.\n. ",
    "a-v-l": "Same issue. Config was as following:\njs\nopts = {\n    lines: 9,\n    length: 0,\n    width: 4,\n    radius: 7,\n    corners: 1,\n    color: '#006faa',\n    opacity: 0\n},\nI use the spinner inside a button.\nScreenshot:\n. ",
    "DaAwesomeP": "Yes, this would be very helpful to me too. It would also be nice if spin.min.jswas in the master tree and not only be assessable from the master tree. It is a tested asset, so it should be included there anyways. Different minifiers can cause different problems in some scripts or even corrupt them entirely.\n. Did you try the Hardware Acceleration option? You could make some simple JavaScript to automatically enable it in Firefox/Gecko based browsers.\n. I figured it out! It would seem that calling the spinner on an element with min-height but not height causes this problem. It's probably the same with the width. I simply added a child with a fixed height, but this problem should be fixed.\n. Huh. I'm stumped.\n. I got a similar error in one of my own scripts a while ago. Make sure that you are not loading an HTTP script on a HTTPS page.\n. Would you mind copying/pasting your code (or parts of it) into the issue? It's a lot easier to read, alter, and test that way. You can encase it in Markdown Code Tags as described herehttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code-and-syntax-highlighting.\n. ",
    "xpagesbeast": "Yes that worked.  It loaded without error when used as a AMD Module.  Now I cannot figure out how to call the stop and start functions.  I tried looking for dojo.spin.stop() for example.\n. ",
    "tmundt": "Sorry I edited my question.\nIf a spinner is stopped after 10 seconds how can it be stopped again after\n3 seconds? Will the timeout be overwritten?\nThank you for a great js-tool!\nYours Thomas\n2014-03-14 13:28 GMT+01:00 Felix Gnass notifications@github.com:\n\nI'm not sure if I understand your question correctly. There is no option\ncalled duration. The amount of time for which the spinner is visible is\ncontrolled by the application using it:\nvar s = new Spinner().spin(target);\n// stop it after 10ssetTimeout(function() { s.stop() }, 10000);\n// ... then change your mind and stop it after 3ssetTimeout(function() { s.stop() }, 3000);\n\nReply to this email directly or view it on GitHubhttps://github.com/fgnass/spin.js/issues/205#issuecomment-37641895\n.\n. \n",
    "roadsunknown": "Demos and samples can be found on the projects main page as well as in the repository.\nhttp://fgnass.github.io/spin.js/\nhttps://github.com/fgnass/spin.js/tree/master/site/example\n. ",
    "dittodhole": "+1\n. ",
    "evilaliv3": "thank you so much @fgnass \nfor the fast response. by the way the bug is an other one.\nyou make math for positioning supposing css \"direction: ltr\" but when direction is set as rtl the   arithmeti is not correct.\nthe fix i see is to enforece diection: rtl inside the spinner box.\nhere is the evidence of the solution:\n\n. allright, i'm going to do a try (i was using 1.3.3). i will let you know\n. @fgnass sorry to re-disturb you but i can confirm that also using the 2.0.0 you still need to enforce the direction: ltr in order to get a proper alignment.\nhere are two screenshots of http://fgnass.github.io/spin.js/ showing the issue:\n\n\n. ",
    "sroe": "You could use https://github.com/urish/angular-spinner\n. :-1: this would add a dependency to angular, better use a project which depends on spin.js like https://github.com/urish/angular-spinner\n. No problem on IE11.\n. ",
    "LeoAJ": "+1, need this one! Thanks.\n. ",
    "iann": "+1\n. +1\n. ",
    "vlady88": "Enabled it and still no difference :-(\n. ",
    "neesonqk": "I think I found the salutation #140\n. ",
    "tstar": "I have the same problem with version 2.0.x, when trying to put spinner into jquery dialog. Version 1.3.3 work fine in this scenario.\nSee screenshots. Green box - a placeholder div for spinner.\n1.3.3 version\n\n2.0.1 version\n\n. I know about this. But it does not work in this scenario. It does not work even if I marked all of the elements of dialogue as position:relative attribute.\n. This is my first job with JsFiddle http://jsfiddle.net/tstar/g0wu3hkr/\nVery strange, it all works on JsFiddle, but not on my site. I can not find a difference. In this scenario, I comment out the line with the top and left  parameters for version 2.0.1, but on my site it does not helps. I'm confused.\n. Hm... It does not work in IE11, but in Chrome and FF works well.\n. My sample from JsFiddle doesn't work in IE11 too.\n. ",
    "ITBOE": "Hi,\nI reinstalled IE8 (this is on an XP machine, by the way) and was able to see it working. However, I then installed some Windows updates, and it stopped working again. Here are the steps to recreate:\nUninstalled IE8\nTested IE6 (v6.0.2900.5512.xpsp_sp3_qfe.130704-0421CO - works\nInstalled Security Update for Windows XP (KB2909212) - still works\nInstalled Security Update for Internet Explorer 6 for Windows XP (KB2964358) - still works\nInstalled Cumulative Security Update for Internet Explorer 6 for Windows XP (KB2936068) - still works\nInstalled IE8 without updates (v8.0.6001.18702CO) - still works\nInstalled available updates:\n\nStill works\nInstalled Update for Windows XP and Windows Server 2003 (KB2728973) \u2013 NO LONGER WORKS\n. ",
    "PeacefullyDisturbed": "Had the same issue on my work machine after I unregistered the vgx.dll due to the recent IE security issues.  I'm guessing you did the same as this dll seems to handle VML for IE which is what would cause this issue.\nIf you did unregister the vgx.dll then just make sure you have the proper security patch for IE (MS did release one for XP versions of IE too), then re-register the dll:\nregsvr32 \"%CommonProgramFiles%\\Microsoft Shared\\VGX\\vgx.dll\"\n. Check my comment on the other thread about IE8 to see if it helps.\nhttps://github.com/fgnass/spin.js/issues/223#issuecomment-43176757\n. ",
    "ulukaya": "all the scripts including spin.js are coming from https.\n. and it works fine in Chrome, Safari and IE, but not FF.\n. it actually happens in line 67, when you are inserting a rule into stylesheet.\n. Seems like FF blocks cross domain inserting rules. \nhttp://stackoverflow.com/questions/15229330/attempt-to-add-a-rule-to-a-css-stylesheet-gives-the-operation-is-insecure-in-f\n. Thanks for the clarification.\n. ",
    "theshortcut": "Sorry for the delayed response on this. I did a similar PR on FastClick which was having the same issue with namespaced require.js builds that provides more background: https://github.com/ftlabs/fastclick/pull/250#issuecomment-43956082\n. ",
    "Troon": "That is the intended behaviour.\nUsually, these images (whether images or dynamically-generated shapes like this) are inserted into a page after clicking a link or submitting a form, where the next page is likely to take a while to generate. They then stay on screen whilst the browser is waiting for the server to send the next page data, and get removed when that data arrives and the new page is drawn.\n. ",
    "intelicision": "thank you so much\n. ",
    "MetalArend": "Check out the fix I wrote: https://github.com/fgnass/spin.js/pull/234\n. I realise I changed the position of a few things, as it was a pain to get around some stuff. Hope it is all clear (also tried to keep your coding style), but if there are some things I did completely wrong, let me know.\n. You should look at the update. I changed the animations name cache. I had a bug, where the spinner would stop working when the front document was reloaded, without reloading the background document. The update looks at the animations names for the spinner, and removes them from the global Spinner names array, so they will be readded when a new Spinner is created.\n. This variable was only used in the spin function, when declaring a new Spinner. Depending on the document you load it in, this could change, so you can better check it when initialising the instance, not when loading the code.\n. Added a context to create the file in. Therefor I also added on line 30 an extra if, to be able to nullify the prop argument.\n. This is the property I added. It defaults to the current document, the same document as where the javascript was loaded.\n. I moved the lines and opacity methods inside the spin method. They should not be exposed to the outside world, and it should check the possibility to use animation or not depending on the options that are provided. So having the initVML and the initialisation of the sheet and stuff like that outside the scope of the spin method, is a way to create scope problems.\n. Completely moved this function to the spin method. This is Spinner instance dependant, not javascript context dependant.\n. Creating a new sheet when spinning up a spinner, and giving it along as a parameter to functions that rely on it, provides each spinner, independant of their document, with a sheet. That way you can create a spinner from a background or the foreground page, and they both will work.\n. ",
    "donhill": "This also happens on android, I am using jquerymobile 1.3.2 and phonegap 3.6 which probably uses chrome browser for the webview. I am using this for ajax calls \n$(\"#loading\").spin(opts).hide();\n$(document).ajaxStart(function(){ $('#loading').fadeIn(200); });\n$(document).ajaxComplete(function(){ $('#loading').fadeOut(200); });\n. ",
    "Montcomery": "Ah yeah, I forgot to set the positioning on the parent element. Shame on me. Thanks for the clearification\n. ",
    "dinhviethoa": "I need to give it a try.\n. Tested! It just works as expected!\n@MetalArend Could you create the minified version too?\n@fgnass Can you look into merging it?\n. ",
    "steveoh": "I guess I will need to look why it didn't work when I didn't have jquery in my project then. sorry!\n. bower.json has \"spinjs\": \"~2.0\" and i'm defining my package like\n{\n  name: 'spin',\n  location: 'spinjs',\n  main: 'spin'\n}\nI'll have to give it a try again.\n. I think it is fine to have both in the same repo.\n. ",
    "avenwu": "oops, I didn't see the radius\n. ",
    "c0r3yz": "Since no one else seems to have addressed this, and I was looking for similar functionality, I thought I would take a stab at it.  Here's my approach: \nIn Spin.js, add an isSpinning property to the Spinner Prototype.  Find this line:\nmerge(Spinner.prototype, {\n...then add: \nisSpinning: false,\nInside the Spin function, you need to set isSpinning to true, like so:\nspin: function (target) {\n        this.stop()\n        this.isSpinning = true;\n....\nand inside the Stop function, you set it to false:\nstop: function () {\n        var el = this.el\n        if (el) {\n            clearTimeout(this.timeout)\n            if (el.parentNode) el.parentNode.removeChild(el)\n            this.el = undefined\n        }\n        this.isSpinning = false;\n        return this\n    },\nThen in your code you reference it like so:\nIf(mySpinner.isSpinning) {\n    ....\n}\nI hope that helps!\n. Update your code to start the spinner when you are toggling the spinner's visibility:\ndocument.getElementById('hide_spinner').onclick = function(){\n    container.className = container.className == '' ? 'hidden' : '';\n    spinner.spin(target);\n};\n. ",
    "vikyd": "@fgnass , I works for me!\nBut why not add this usage to document page ?. +1. But how can I use spin.js V3 without Webpack or Rollup?. ",
    "nicolomonili": "the spin is not added to test div. \ni must dynamically create a new div and spin it !\n. yes i look , but i solved in this way : http://jsfiddle.net/5y0tkt2s/1/\nthanks :D\n. ",
    "slopetown": "+1\n. ",
    "mearns": "Tried again with latest node, node v0.10.32, and the same results.\n. Ok, thanks. I'm new to using node and the rest, so I assumed that having a npm module means that it's supposed to work with node from the command line. Thanks for clarifying!\n. ",
    "deizel": "Just ran into this issue too (Chrome, not Firefox) but found some leads:\n- https://github.com/chinchang/hint.css/issues/60#issuecomment-31032152\n- https://github.com/jquery/jquery-mobile/issues/5508#issuecomment-12760254\nFiddle: http://jsfiddle.net/fgx3jyjh/2/ (see CSS comments)\n. ",
    "mflorence99": "Brilliant Chris -- thank you so much!\nOn Sat, Oct 18, 2014 at 12:15 AM, Chris Burke notifications@github.com\nwrote:\n\nJust ran into this issue too (Chrome, not Firefox) but found a fix here: chinchang/hint.css#60\n(comment)\nhttps://github.com/chinchang/hint.css/issues/60#issuecomment-31032152\nDemo: http://jsfiddle.net/fgx3jyjh/1/ (Remove the /* fix chrome */ line\nfrom CSS to see the problem)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/fgnass/spin.js/issues/252#issuecomment-59598476.\n. \n",
    "RamaMuthukrishnan": "This is very helpful for me. i faced some problem to set the icon in the column split list .For example I mouse over the icon in one list then next list is selected.this problem only reproduced in chrome.Thanks\ndeizel\n. ",
    "Kepro": "och sorry i have open two githubs ( https://github.com/urish/angular-spinner )\n. ",
    "ermalmino": "I'd like this feature too, semitransparent background that covers the parent element of the spinner. Thank you.\n. ",
    "dhoeric": "Instead of adding a feature on the package, this example may helps you.\nhttp://jsfiddle.net/fgnass/EKWbw/\n. ",
    "code-smith": "a much better and practical use case\n. ",
    "jegjessing": "Hmm no updates on this? I really would like this feature\n. ",
    "ngottlieb": "Yeah, that makes sense. Thanks.\n. ",
    "ascheucher": "Here as additional argument the naming specs for bower packages.\nGreets,\nAndreas\n. I see. I think, I mixed that up with the specifications of package names of npm. There for sure, a dot is not allowed.\nSorry for the confusion.\n. ",
    "MagicIndustries": "I came here to post the same issue :) I resolved it by renaming everything to spinjs, so definitely +1 for the idea of renaming the package without a dot, for the sake of being able to keep it in my angular builds.\n. ",
    "brandon-arnold": "I also came upon rev crashing because it was trying to parse spin.js/, the FOLDER not the FILE. \n. ",
    "Seb2nim": "Nothing ;-P ! Sorry, one  of my target wasnt relative.\nReally cool in addition to jquery plugin. Nice Job, congrats ! - I close. \n. ",
    "DaveStein": "And just as an FYI for people to search in the future, the user agent here was actually:\nMozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\nWe had thought it was webview since our parsed version gave Mozilla version 0.\nGonna close this since I don't think anyone cares if a spider is causing such an error. Reopen if you disagree!\n. ",
    "ccfontes": "Not sure if completely related, but also doesn't work here with Safari 7.0.5.\nI cannot find any code that may be responsible for the issue.\nThe website with the issue: kanasubs.com\n. ",
    "jronimo": "I have experienced a similar, but not identical, issue to the one cited by the OP - although, I think there's a chance the issues are related. \nThe following relates to,\nspin.js             2.0.1,\nChrome      39.0.2171.95,\nIE          11.0.9600.17416,\nFirefox         34.0.5\nUnless specifically highlighted, the description below applies to all of the above.\nI am using spin.js to provide a 'wait-animation' on a glass pane (an opaque div, which I call the 'wait-screen') that is shown after submitting a form. I am developing a single page application that shows numerous screens, including the wait-screen. To be clear, the wait-screen, contains a wait-display (the element passed to spin.js), which contains the wait-animation provided by spin.js.\nThe first versions of my single page application statically included CSS files via <link> elements hard-coded into the page. I then converted the application such that the single page did not include the bulk of the CSS via <link>  elements. Instead, it appended the contents of CSS files to the document after the document had completed its load (as signified by the document's onload event).\nPrior to the conversion, the wait-animation worked as expected. After the conversion, the wait-display showed up, but the wait-animation did not animate - i.e. no spinning. \nThe wait-screen and the wait-display elements are in a hierarchy of document elements citing CSS class names cited in the dynamically included CSS. As part of working my way through this issue, I added to the body of the same page the element <div id=\"myDiv\"> and styled the div with the following so that I could see it,\nmyDiv {\nposition: absolute; left: 100px, top: 100px, width: 100px, height: 100px; background-color: white;\n\n}\nI specified this CSS in either of the following locations, and the results were the same for both locations: (i) in a CSS file statically included in the document via a <link> element hardcoded in the page, and (ii) in a CSS file whose contents were dynamically added to the document after document load.\nAfter page load, I passed myDiv to spin.js, specifying the same options instance as used for the wait-screen. The animation in myDiv worked perfectly, while the animation on the wait-screen continued to be displayed but not spinning - I was able to view both simultaneously. Both display in the way specified by the options passed to spin.js but only myDiv shows the spinning animation. (Note: In Firefox, myDiv did not animate, and it did not matter where I put the CSS for myDiv. However, Chrome and IE worked as described.)\nAs a work-around, I was able to get the animation working in my wait-screen by commenting out the following (in spin.js), thus ensuring useCssAnimations was undefined.\n/*\nif(!vendor(probe, 'transform') && probe.adj) initVML();\nelse useCssAnimations = vendor(probe, 'animation');\n*/\nThe wait-animation worked as expected in all browsers with these lines commented out.\nMoving forward, I'll just run with the commented out code as a solution, so I'm good to go. But I'll keep an eye on this thread for your comments.\nThanks for putting together this great little plugin.\nHere is how I'm dynamically adding CSS to the document,\n```\nfunction addDocumentCss(cssText) {\nvar head = window.document.head || window.document.getElementsByTagName('head')[0];\nvar style = document.createElement('style');\n\nstyle.setAttribute('type', 'text/css');\nstyle.setAttribute('media', 'screen');\nstyle.textContent = cssText;        // We're targeting IE10+, so this is ok.\n\nhead.appendChild(style);\n\n}\n```\nCheers.\n. Hi\nThanks for getting back to me on this. My original message was a few months ago and I'm not in a position to give you a standalone page immediately, but I will definitely try to get that to you in the next week or so as I'm still interested in an outcome.\nThanks again for replying.\nCheers.\n. ",
    "ErrolSayre": "I'm encountering this issue in a page bundled within an iOS app used within a UIWebView. I was able to utilize the same hack to solve my problem but wanted to check-in to see if this could be solved?\nCould another option (rather than setTimeout) be to use requestAnimationFrame()?\n. @TimothyGu I'll see if I can. I do know that I never have had the problem in my HTML file within Safari on the Mac while developing it. I specifically encountered the issue on iOS in my app within a UIWebView. It'll be a couple weeks before I could do this though as I can't take effort away from getting the app out and on the store.\nSuffice to say, removing the support for CSS Animations did resolve my problem and I haven't noticed any issues with my app's performance during that small time when the indicator is animating.\n. ",
    "allansli": "Any update on this?\n. ",
    "scoutkirkolson": "+1\n. ",
    "chukcha14": "Same problem here. \nI tried to replace the spinner with a completely different spinner and run into the same problem.\nIt looks like there is a problem in IE rendering engine itself. When the spinner get's stuck, the whole UI is unresponsive too. You can't click on anything. \nI'm going to look for some sort of IE patch from Microsoft.\nDid anyone find a solution? Thanks in advance.\n. ",
    "varoonverma": "+1 in IE 10\nthe spinner on the site http://fgnass.github.io/spin.js/ works in IE 10\nHowever, using a spinner via angularjs.code (ng-show on a div) doesn't spin in IE10. \n. ",
    "jarredkeuch": "I appreciate your time and I see your point. I would tend to agree.\nBut\nI've used bower to install angular, angular-route, bootstrap, jquery, etc. and this was the first I've come across that doesn't have the minified js. Usually the minified versions are contained in a \"dist\" directory. I guess it's just a bit more convenient.\nThought\nBower needs some standards. Sometimes the source is included... sometimes it isn't. Sometimes there's a dist directory... sometimes there isn't. It'd be nice if bower packages were split into src and dist packages and had some pre-defined structure.\nThanks again,\nJarred\n. I agree. Looks like main can be an array. See here.\nI'll see what I can do and submit another pull request if you don't mind. Need to level up on grunt anyways.\nThanks again,\nJarred\n. ",
    "piu": "Hi \nI have made some Changes in Spin.js and Typescript file for same in order to fix it in my Application. \nIntroduced new Parameters: \n  1) stopTimer?: number;\n   2) autoStop?: boolean;\nAnd handled the same in Spin.js you can find changes in my repository (https://github.com/piu/SpinJSWithAutoStop ) \n. Yes I agree, its pretty convenient to do so if using jquery.ajax() but in my case we are using Signalr.\n. Ok no problem :) I had seen few other issues to to cancel/ stop spinner hence thought could be helpful change if control itself has this feature. Anyways thanks!!\n. ",
    "PapillonUK": "I have to agree - I don't think stopping the spinner after a certain amount\nof time is a common requirement.\nOn Saturday, 20 December 2014, Felix Gnass notifications@github.com wrote:\n\nIf you use jQuery.ajax() provide a timeout and stop the spinner in the\nerror callback. See\nhttp://stackoverflow.com/questions/5225597/set-timeout-for-ajax-jquery\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/fgnass/spin.js/issues/268#issuecomment-67751670.\n. \n",
    "evanhobbs": "Any chance of updating the npm package? Everytime I run npm update or install I have to go in and fix it manually again... (or maybe there's a better way)\n. Great - thanks!\n. ",
    "efkan": "OK! I've learned to use :)\nmy global spinner into my layout.ejs\n<div id=\"spinner\"></div>\n<script src=\"js/spin.js\"></script>\n<script type=\"text/javascript\">\n    var spinner = new Spinner();\n</script>\nWe don't need any css file like top:50%;left:50%; because spinner.js is included these values. \nAnd my another ejs file;\n$.ajax({\n    url: '/login',\n    data: formData, \n    beforeSend: function() {\n       spinner.spin(document.getElementById('spinner'));\n    },\n    complete: function() {\n       spinner.stop();\n    },\n    success: function (result) {\n       alert(\"successful\");\n    }\n});\nThank you @fgnass again. Keep your good works!\n. ",
    "Oreip": "Ok, I found a fix !\nI close this topic, thank you for reading\nPiero\n. ",
    "dorian-marchal": "This fix doesn't work if I want to position the spinner 30px from the right without knowing the element width (on a button, for example).\n. ",
    "gokimax80": "Hi, do you fix that issue?\n. ",
    "re1naldo": "I just noticed this issue happened when I set modal dialog content dynamically:\n$('#car-modal .modal-body').html($('#indicator').html());\nWhere indicator div contains spinner component. Does anyone know why this didn't work in Opera? Is there an alternative way to set dialog content with spinner?\n. Just upgraded my Opera (to version 27) and the spinner worked fine.\n. ",
    "mlawson1986": "I totally missed that. My mistake. Thanks!\n. ",
    "max-tubecorporate": "Thank you.\n. ",
    "EricG-Personal": "The reason why I was expecting the spinner to be inside of the red box is because the documentation says:\n\"Since version 2.0.0 the spinner is absolutely positioned at 50% of its offset parent. You may specify a top and left option to position the spinner manually.\"\nand the comments for the opts parameters say:\ntop: '20%', // Top position relative to parent\n   left: '20%' // Left position relative to parent\nThey both say the position should be relative to the parent. Is not the red div the parent of the spinner?\nSo, in my case, the spinner should be offset from the top, left of the red div by 20% of the size of the red div.\nWhat am I missing? Or have I done something wrong?\n. Confirmed. Thank you. You may want to find some nice way of explaining this in the documentation for those like me who are not necessarily experts in CSS layouts.\n. ",
    "PhuongXmaster": "I can't open the PR to 1.3.3. Probably spin.js don't want to support the release 1.3.x version anymore.\n. @TimothyGu I'm aware that since 2.0.0, spinner is positioned absolutely in center. However, it requires the container to be positioned relative. This breaks many places in our customer code, not just our code. We're not ready for this upgrade yet.\nThis is the fix that targets to 1.3.x only.\n. ",
    "frontalnugity": "No worries - I would be happy for everything to be referenced and synced without hooking up them the front-end portion of code.\nI'll look at the link as well - looks promising.  My understanding was all that was necessary was to add the json file with a few properties and that would be sufficient - but I'm still unsure of the full requirements and support overhead if any.\nThanks anyways!\n. ",
    "tjgupta": "Ah I see. I don't think most people would agree that the \"relaxing\" options in the .jshitrc are a good thing. I'd suggest removing those and still taking most of these changes. For example not requiring semicolons seems really sloppy and error-prone to me (not to mention inconsistent, as some particular places they are still required to make the code do what you need it to do).\nI'd be happy to try to adjust this PR with that change to the .jshintrc and all the JS, but I won't bother if you think using ASI is a good thing and don't want to change that. Let me know.\n. ",
    "tirsen": "+1\n. ",
    "jsw0528": "330 > 299\nhehe. Fixed.\n. Fixed.\n. ",
    "mikesherov": "That would be fantastic! I appreciate the quick movement here. \n. No worries! Thanks for the bump and helping out!\n. Incorrect comment. \n. Incorrect comment. \n. ",
    "RussNelson": "Is this the same as #305?\n. It's definitely creating three spinners, all in the same div, which is not the div I named. Instead, they're all going into spinner0. Here is how the divs are created:\nhtml\n<div class=\"prepend-3\" id=\"spinner%(rthsno)d\" style=\"width:600px; background-color:#d0edf7\"></div>\n. Even simpler example: http://rths.us/spinner.html\n. Yep, that'll do it!\n. ",
    "ReneMuetti": "I can not say exactly...\nMore likely is that the plugin is not fully developed as a module.\nThen kan such behavior occur.\n. ",
    "viniciusllima": "The problem happened to me when I set my target using document.getElementsByClassName and not document.getElementById instead.\nI solved my problem using getElementById to set the target.. ",
    "MattMcMurray": "@viniciusllima I had the same issue when selecting by class name. The difference is that getElementsByClassName() is returning an array, whereas getElementById() returns a single element. Solve this problem by using document.getElemensByClassName()[0]. ",
    "izdi": "Sorry, first of all I meant about updating package in npm repository;\n```\n$ npm install spin\nnpm http GET https://registry.npmjs.org/spin\nnpm http 200 https://registry.npmjs.org/spin\nspin@0.0.1 node_modules/spin\n$ head -1 node_modules/spin/spin.js \n//fgnass.github.com/spin.js#v1.2.5\n```\nThe npm's package version for some reason is not adding top and left attributes specified in options, i.e (version of spin is 1.2.5)\n```\nspinnerOptions: {\n        lines: 15, // The number of lines to draw\n        length: 11, // The length of each line\n        width: 4, // The line thickness\n        radius: 9, // The radius of the inner circle\n        corners: 1, // Corner roundness (0..1)\n        rotate: 0, // The rotation offset\n        direction: 1, // 1: clockwise, -1: counterclockwise\n        color: '#606060', // #rgb or #rrggbb or array of colors\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        className: 'spinner', // The CSS class to assign to the spinner\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        top: '50%', // Top position relative to parent\n        left: '50%' // Left position relative to parent\n    },\nspinner = new Spinner(this.spinnerOptions).spin(target);\ntarget.appendChild(spinner.el);\n```\nAfter rendering the spinner class spinner does not have style attributes top and left, which leads to wrong position of the spiner block\n. ",
    "donfusilli": "@izdi cheers, I had the same confusion - pretty misleading. ",
    "mazing": "yes, position: relative would probably work as well. how can I set it to relative?\n. Sorry. Just found it in https://github.com/fgnass/spin.js/blob/master/spin.js. Thanks\n. ",
    "JuanVqz": "gracias TimothyGU los ejemplos que vienen cuando se clona el spin, ya lo hice en css gracias.\n. gracias TimothyGu!! muy amable\n. ",
    "gkrizek": "I'm experiencing this as well. Seems to happen randomly.\n. I used this issue to get a work around in place:\nhttps://github.com/fgnass/spin.js/issues/262\n. ",
    "flowip": "I've posted my fix/workaround as a pull request.\n. ",
    "jfreynik": "From your example above, It looks like if you set the \"#rths0\", \"#rths1\", \"#rths2\" div position's to \"relative\" the spinners align properly on the page.\n. ",
    "rupesx26": "This work for me!\nhttps://gist.github.com/rupesx26/241b3b7f1c907b226914990b02d35097. ",
    "szabyg": "It turned out this is a problem with a beta version of angular 2.0.0.\n. ",
    "Vannsl": "The spinner could be stopped by invoking the stop() method -->  spinner.stop()\n. ",
    "pnikolov": "Latest commit sorts out the license name, also adds a homepage and more keywords.\n. Yes, I've minted this in #319 \nSubmit URL:\nhttps://packagist.org/packages/submit\n. ",
    "Jimadine": "Yes the SSL certificate is broken. From Chrome Devtools:\n\nCertificate Error\nThere are issues with the site's certificate chain (net::ERR_CERT_COMMON_NAME_INVALID).\n\nQuick fix for me was use a CDN e.g. https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js\n. ",
    "phra": "hi,\nit's basically a copy of this one.\ni'm a maintainer of that starter kit.\nthanks for your time.\n. it's not finding the module because spin.js triggers the regex: (or at least i think because aliases solved the problem)\nloaders: [{\n      // JS LOADER\n      // Reference: https://github.com/babel/babel-loader\n      // Transpile .js files using babel-loader\n      // Compiles ES6 and ES7 into ES5 code\n      test: /\\.js$/,\n      loader: 'babel',\n      exclude: /node_modules/\n    }\n. it doesn't find spin.js beacuse it's stripping the .js and looking for a spin module instead.\nmy alias restores the intended behavior.\n. really strange. i will look into it.. thanks for the feedback.\n. me too i'm using angular-spinner. let's open a ticket to them and reference it here.\n. ",
    "moravcik": "I have a related problem with angular-spinner which depends on spin.js. My app is using webpack and it seems webpack uses AMD as standard module specification. The angular-spinner AMD definition is:\ndefine(['angular', 'spin'], factory);\nSo the webpack is looking for module spin, instead of spin.js. The workaround from @phra helped to make it working.\nThis might be the problem of angular-spiner rather than spin.js, just to note that.\n. ",
    "calcio1096": "Check out this tutorial. Good way to add a loading message.\nhttp://jigneshpatel-dotnet.blogspot.com/2013/03/waiting-spinner-for-long-running-form.html\n. ",
    "neyanderson": "I've the same issue, but using IE8 .. ",
    "IvanYurchenko": "Not sure if it helps but I did it like this and it worked:\n```\n    function showSpinner() {\n        // Spinner configuration\n        var opts = { lines: 13, length: 26, width: 12, radius: 36, scale: 0.5 };\n        var target = document.getElementById('spinner');\n        var spinner = new Spinner(opts).spin(target);\n    return function() {\n        spinner.stop();\n    };\n}\n\n// Show spinner and store function that stops it\nvar stopSpinner = showSpinner();\n\n...\n// Call the function to stop the spinner\nstopSpinner();\n\n```. ",
    "in2lag": "@fgnass can you merge this?. ",
    "usenetCoder": "I'm experiencing this same problem too with version 2.3.2. When using spin.js to redirect the user to a new page, if the back button is used in Firefox the spinner shows until the page is refreshed. This doesn't happen in Chrome or Edge.. Any update on this?. This worked for me. <script>window.onunload = function () { };</script>. ",
    "elcolie": "RUN npm install npm@latest -g. ",
    "xsynaptic": "The class is configurable, read the docs: http://spin.js.org/\n```js\nimport {Spinner} from 'spin.js';\nvar opts = {\n  className: 'spinner', // The CSS class to assign to the spinner\n};\nvar target = document.getElementById('foo');\nvar spinner = new Spinner(opts).spin(target);\n```. Check the release notes and #343; the project was upgraded to ES6. I'm guessing you should probably stick with the version 2 branch if you're not transpiling your code and bundling modules with Babel/Webpack.. ",
    "thumbsized": "I have the same issue, seems this is the cause, still, https://github.com/fgnass/spin.js/issues/323\nI had to use window.Spinner = require('../node_modules/spin.js/spin.js'); but in my case it is for leaflet spinner in vue app.. ",
    "KooYH": "same as me.\nhttp://fgnass.github.io/spin.js/spin.min.js\nthis link is broken.\nfirst, changed url to http://spin.js.org/spin.js\nand then delete line 112 : export { Spinner };\nit's temporarily solution\n. ",
    "shahrukhx01": "yes I already copied the code locally and then did that change, worked for me too. Thanks!. ",
    "Chi1985": "I'm getting the following error when i try to to bundle my main.ts file using rollup\nsrc/main.ts \u2192 build/js/main.min.ts...\n[!] Error: Could not resolve './app/app.module' from src\\main.ts\nError: Could not resolve './app/app.module' from src\\main.ts\n    at error (C:\\Users\\3094\\AppData\\Roaming\\npm\\node_modules\\rollup\\dist\\rollup.js:185:14)\n    at then.resolvedId (C:\\Users\\3094\\AppData\\Roaming\\npm\\node_modules\\rollup\\dist\\rollup.js:16011:8)\n    at process._tickCallback (internal/process/next_tick.js:109:7)\n    at Module.runMain (module.js:606:11)\n    at run (bootstrap_node.js:383:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:496:3\n\nmy rollup.config.js \nexport default {\n  entry: 'src/main.ts',\n  dest: 'build/js/main.min.ts',\n  format: 'iife',\n  sourceMap: 'inline',\n};\n\ncopy of my main.ts file\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport{Spinner} from 'spin.js';\nif (environment.production) {\n  enableProdMode();\n}\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\"import { AppModule } from './app/app.module';\"  corresponds to   ./app/app.module.ts file\nIt would be great if somebody can tell me how to bundle' ts ' file or any workaround for this?\nor should i use 'spin.js' as entry in my rolllup.config.js file? if so what should be the full path for spin.js. ",
    "davidlmorris": "I'm getting this when uglifing a bundle:\n[07:05:20] 'minify-js' errored after 958 ms\n[07:05:20] GulpUglifyError: unable to minify JavaScript\nCaused by: SyntaxError: Unexpected token: punc ({)\nFile: C:\\Work\\Quoxient\\Source\\QSoar\\QSoar\\js\\qt_bundle_charting.js\nLine: 42780\n...which corresponds to line 113/114 in the dist of version 3.10.0.. Given that ES6 support is patchy, it would seem that an ES5 distribution would make more sense at the moment.. ",
    "chrishearn": "Same issue with Meteor JS. Meteor's build tool doesn't transpile code in node_modules directory so the browser throws this error as it doesn't understand the ES6 module syntax.. @theodorejb Thanks for the suggestion - that's exactly what I'm doing for the moment :) I've just discovered that transpiling of node_modules is on the roadmap for the next Meteor release (v1.6.2) so that should solve it properly (for Meteor users at least).. ",
    "moretti": "Getting the same error and had to downgrade to v2.\nIn webpack you typically exclude node_module from babel-loader, as it's a common convention to publish transpiled modules to npm, so this module won't work with create-react-app for example.. @MMP3AC3 you can run yarn upgrade spin.js@^2.0.0 or npm install spin.js@^2.0.0. ",
    "MMP3AC3": "How do you downgrade to v2?. @moretti I downgraded to v2, but it's still not working...not sure if I'm doing this right\n. ",
    "thehig": "Is it the typo inport should be import?. Same as #356 . I'm having this same issue, (unexpected token export) although not with webpack which is working fine, but within my jest tests (scaffolded through create-react-app)\n\nSample repo that demonstrates the problem: https://github.com/thehig/spinjs-unexpectedtokenimport\nEdit: My guess is something's not being babelified\nEdit: The 'jest' way to get the tooling to process modules is to use transformIgnorePatterns as outlined below, however this doesn't work in Create-React-App (https://github.com/facebook/create-react-app/issues/2537) without ejecting. (Obviously not your problem, but a pain in the ass nonetheless)\npackage.json\njson\n{\n  ....\n  \"jest\": {\n    \"transformIgnorePatterns\": [\"/node_modules/(?!(spin.js\\\\.js$))\"]\n  }\n}. This seems like an effective strategy to alienate users. ",
    "congjiujiu": "Demo is here demo\nand you can open this site on Chrome 35 or before. @theodorejb  Oh\uff0cthere are still so many people using IE 6 in my country... So many of our projects must support old version browsers. And there are some codes for IE 9 in spin.js , so I think maybe we could add supports just for transform properties so that I can use spin.js in my project.. @theodorejb Fine, but the users from Chinese banks, or government department are prevented from upgrading their browsers, they are stuck with older version of Chrome. And I believe that they need spin.js.. ",
    "paulsmirnov": "@davidlmorris Right, that was another concern deserving a separate issue. Even if one distributes ES6 module, it is usually done in addition to ES5 one. The \"main\" field of package.json should still point to a CommonJS or UMD module, as there is a special \"module\" field for ES6 module distribution. They both still use ES5 syntax though. That's what I've seen in most other projects. . As for the original issue, there's a way to switch rollup warnings off (rollup/rollup#794) but it is not quite usable because:\n\nturning off all such warnings is a bad idea, they often point to bugs (e.g. rollup/rollup#847),\nturning them off just for spin.js is possible with additional IFs but still we loose the default behavior for all other warnings (rollup/rollup#1245).\n\nSo I'm still looking for a better way to resolve the issue.. @VladShcherbin really? It didn't work for me, as warn === undefined. Probably, an issue with different versions. I thought the PR was not fully implemented/merged yet. Thanks for pointing this out, I should double check this solution.. @VladShcherbin thanks again, rollup 0.55.1 did the trick so I switched the warning off just for spin.js. I think I'll close this issue then, as the project doesn't seem to be maintained in a timely manner \u2639\ufe0f . ",
    "vladshcherbin": "@paulsmirnov hey, I'm also experiencing rollup + ts pain points. Here's what I found:\n\nturning them off just for spin.js is possible with additional IFs but still we loose the default behavior for all other warnings (rollup/rollup#1245).\n\nThis solution works for me like mentined in this PR:\n```js\nonwarn: (warning, warn) => {\n  if (warning.code === 'THIS_IS_UNDEFINED') {\n    return\n  }\nwarn(warning)\n}\n```\nAlthough it doesn't solve the source of this warnings, but it's a workaround for now. Would be great to find a way to solve this warnings completely, without this hacks.. ",
    "nifflerco": "Same problem for me, it breaks on export { Spinner }; . ",
    "quakedc": "Have you tried commenting out that line?. ",
    "magicbruno": "Commenting out the line worked for me.. ",
    "yaddly": "Thank you very much for the update on this issue. ",
    "shllg": "Before it looked like that:\n\n. Yes the settings are slightly different, but changing them doesn't fix the problem (changed the settings and made a new screenshot - see below).\nSystem: MacOS - Chrome / Firefox / Safari all with the same issue\n\nSettings:\ncoffeescript\nlines: 11             # The number of lines to draw\nlength: 12            # The length of each line\nwidth: 2              # The line thickness\nradius: 8             # The radius of the inner circle\nscale: 1              # Scales overall size of the spinner\ncorners: 1            # Corner roundness (0..1)\ncolor: '#000'         # #rgb or #rrggbb or array of colors\nopacity: 0.25         # Opacity of the lines\nrotate: 0             # The rotation offset\ndirection: 1          # 1: clockwise, -1: counterclockwise\nspeed: 1              # Rounds per second\ntrail: 60             # Afterglow percentage\nfps: 20               # Frames per second when using setTimeout() as a fallback for CSS\nzIndex: 2e9           # The z-index (defaults to 2000000000)\nclassName: 'spinner'  # The CSS class to assign to the spinner\ntop: '50%'            # Top position relative to parent\nleft: '50%'           # Left position relative to parent\nshadow: false         # Whether to render a shadow\nhwaccel: false        # Whether to use hardware acceleration\nposition: 'absolute'  # Element positioning . Not i just blurs the edges a little bit. But the problem itself is still there. \n\n(Again different settings but i think you can still see the issue). Okay, i'm sorry - seems like i were wrong. I ran some comparison with the versions:\n\nSame settings except of the last one with you recommended shadow setting.. ",
    "tolu": "I'm having the same issue in my tests, using mocha with typescript (actually ts-node). The same issue will continue to be around (in node and ts-node) since even experimental module support requires the use of *.mjs file extensions at this time.\nAfter some time spent reading up on the issue and the solutions it seems to me that it is premature to publish esnext/mjs/esm only...\nThis is from Rollup's readme\n\nThat (adding a module-field to package.json) seems like a solution that would work for the issues reported here as well as the original case #341.\nI'll try to get a PR going along those lines in the weekend.. @theodorejb one important fact here is that when ES6 modules can be understood by Node without the --experimental-modules flag, even the solution implemented here in spin.js wont work as the files referenced are not postfixed with *.mjs.\nA relatively simple solution seems to be to publish something that everyone can consume, and that includes everyone who has opted in for ES6.\nBut if you are not interested in a PR, I wont bother and keep using v2.3.2 that \"just works\" \ud83d\ude09 \nComprehensive article on the subject:\nhttps://medium.com/@kelin2025/so-you-wanna-use-es6-modules-714f48b3a953. An updated recommendation now that modules are supported in all major browsers:\nFrom: https://developers.google.com/web/fundamentals/primers/modules\n\nA note on file extensions\nYou may have noticed we\u2019re using the .mjs file extension for modules. On the Web, the file extension doesn\u2019t really matter, as long as the file is served with the JavaScript MIME type text/javascript. The browser knows it\u2019s a module because of the type attribute on the script element.\nStill, we recommend using the .mjs extension for modules, for two reasons:\n\nDuring development, it makes it crystal clear that the file is a module as opposed to a regular script. (It\u2019s not always possible to tell just by looking at the code.) As mentioned before, modules are treated differently than regular scripts, so the difference is hugely important!\nIt\u2019s consistent with Node.js, where the experimental modules implementation only supports files with the .mjs extension.. \n\n",
    "adonespitogo": "A browser-only library that needs nodejs package mechanism to in order to work. Great.. ",
    "MegaphoneCA": "https://github.com/fgnass/spin.js/issues/364#issuecomment-430523732. ",
    "vthakre83": "Thanks Theodorejb,\nI will try to get the files through the steps mentioned.\nBelow is the description XSS vulnerability on version 2.3.2 detected by\nBlackduck scan.\nspin.js contains a flaw that allows a cross-site scripting (XSS) attack.\nThis flaw exists because the interaction between the script and a Content\nSecurity Policy (CSP) does not validate input before returning it to users.\nThis may allow an attacker to create a specially crafted request that will\nexecute arbitrary script code in a user's browser session within the trust\nrelationship between their browser and the server.\nOn Thu, Mar 29, 2018 at 11:59 AM, Theodore Brown notifications@github.com\nwrote:\n\nWhat \"blackduck vulnerability\" are you referring to? spin.js 3.x is\nwritten in TypeScript, so the compiled JavaScript files are intentionally\nexcluded from the repository. You can clone and build this repository to\nget a compiled JavaScript file, or else install it from npm.\nDid you read the installation instructions on http://spin.js.org/?\nspin.js is not pre-minified, but if you are using the Webpack or Rollup\nmodule bundler as recommended, you can fairly easily minify your entire\nbundle for production.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/fgnass/spin.js/issues/357#issuecomment-377320734, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AdKlNmuWFPL7DjP66C0dWdLir78brc28ks5tjSEdgaJpZM4TAt9_\n.\n\n\n-- \nVIkrant\n. ",
    "anterokarttunen": "I found workaround, removed line 114\nexport { Spinner };\n. ",
    "himdel": "...ah, found it, 4.0.0 introduced a css requirement, but doesn't mention it in the docs anywhere (almost).\nFix:\ndiff\n import {Spinner} from 'spin.js';\n+import 'spin.js/spin.css';\n window.Spinner = Spinner;\nLeaving this open since this is not mentioned in the README.md at all,  and no examples on the site mention it either.\n(I do see that \"Unless you plan to replace the preset opacity animations, load the spin.css file.\" now, but that's nowhere near \"You need to do this for animation to work\".). Thanks @theodorejb :) Much clearer now :). ",
    "ovdncids": "I fixed it on temporary.\n/node_modules/spin.js/spin.js at line 79\nexport { Spinner }; -> module.exports = Spinner;\nI hope to fix it next version.. ",
    "benmcmaster": "I am having this issue as well using wkwebview on iOS 12.1.2 . I noticed that when I quit my cordova app fully and then bring it back, it will rotate normally. However, if I put the app into the background, and then bring it back, the spinner won't rotate. You just see the background of the spinner doing nothing... Really weird. I just upgraded to the latest and still the same bug. Same issue with and without hwaccel. Any ideas of what we can try?. ",
    "elandTong": "Yes, I am using the 3.x version. After the app is switched back from the background to the foreground in wkwebview, the animation will not rotate. However, I solved the problem after rewriting the rotation animation myself; the following is my code:\ncss :\n@keyframes lds-spinner {\n0% {\nopacity: 1;\n}\n100% {\nopacity: 0;\n}\n}\n@-webkit-keyframes lds-spinner {\n0% {\nopacity: 1;\n}\n100% {\nopacity: 0;\n}\n}\nfunction Spinner(opts) {\n    var obj = null;\n    var optsObj = opts;\n    var defOpts = {\n        color: \"#FFFFFF\", \n        petalRadius: 5, \n        internalRadius: 14, \n        petalSum: 10, \n    };\n    this.spin = spin;\n    this.stop = stop;\n    function spin(target) {\n        stop();\n        if (target == null) { return; }\n        var color;\n        var petalRadius;\n        var internalRadius;\n        var petalSum;\n        if (optsObj != null) {\n            color = optsObj[\"color\"];\n            if (color == null) { colro = \"#FFFFFF\"; }\n            petalRadius = optsObj[\"petalRadius\"];\n            if (petalRadius == null || isNaN(petalRadius)) { petalRadius = 5; }\n            internalRadius = optsObj[\"internalRadius\"];\n            if (internalRadius == null || isNaN(internalRadius)) { internalRadius = 14; }\n            petalSum = optsObj[\"petalSum\"];\n            if (petalSum == null || isNaN(petalSum)) { petalSum = 10; }\n        } else {\n            color = defOpts[\"color\"];\n            petalRadius = defOpts[\"petalRadius\"];\n            internalRadius = defOpts[\"internalRadius\"];\n            petalSum = defOpts[\"petalSum\"];\n        }\n        var id = $(target).attr(\"id\"); console.log(\"spin target id:\" + id);\n        var root = \"[content]\";\n        var run = \"[content]\";\n        var viewPetal = \"\";\n        var viewPetals = \"\";\n        for (var i = 0; i < petalSum; i++) {\n            viewPetals += viewPetal;\n        }\n        run = run.replace(\"[content]\", viewPetals);\n        root = root.replace(\"[content]\", run);\n        $(target).html(root);\n        obj = $(\"#\" + id + \"_spin_root\");\n        obj.css({\n            \"display\": \"flex\",\n            \"justify-content\": \"center\",\n            \"align-items\": \"center\",\n            \"width\": \"100%\",\n            \"height\": \"auto\",\n            \"box-sizing\": \"border-box\"\n        });\n        var rW = (petalRadius * 2 + internalRadius) * 2;\n        var rH = (petalRadius * 2 + internalRadius) * 2;\n        var pW = petalRadius * 2;\n        var pH = petalRadius * 2;\n        var pTop = (rH - pH) / 2;\n        var xOffset = (rW / 2);\n        var yOffset = (rH / 2) - pTop;\n        var originTran = xOffset + \"px \" + yOffset + \"px\";\n        console.log(\"originTran:\" + originTran);\n        console.log(\"rW:\" + rW + \",rH:\" + rH + \",pW:\" + pW + \",pH:\" + pH + \",pTop:\" + pTop + \",xOffset:\" + xOffset + \",yOffset:\" + yOffset);\n        $(\".lds-spinner\").css({\n            \"position\": \"relative\",\n            \"width\": rW + \"px\",\n            \"height\": rH + \"px\"\n        });\n        $(\".lds-spinner div\").css({\n            \"left\": \"0px\",\n            \"top\": pTop + \"px\",\n            \"position\": \"absolute\",\n            \"width\": pW + \"px\",\n            \"height\": pH + \"px\",\n            \"border-radius\": \"50%\",\n            \"background\": color,\n            \"transform-origin\": originTran,\n            \"-webkit-transform-origin\": originTran\n        });\n        var rotateIncrement = 360 / petalSum;\n        console.log(\"spin rotateIncrement:\" + rotateIncrement);\n        var timeIncrement = 1 / petalSum;\n        console.log(\"spin timeIncrement:\" + timeIncrement);\n        for (var i = 0; i < petalSum; i++) {\n            var index = i + 1;\n            var deg = (rotateIncrement * index) - rotateIncrement;\n            var time = (timeIncrement * index) - 1; time = time.toFixed(2);\n            console.log(\"deg:\" + deg + \",deg time:\" + time);\n            $(\".lds-spinner div:nth-child(\" + index + \")\").css({\n                \"transform\": \"rotate(\" + deg + \"deg)\",\n                \"-webkit-transform\": \"rotate(\" + deg + \"deg)\",\n                \"animation\": \"lds-spinner linear 1s infinite\",\n                \"-webkit-animation\": \"lds-spinner linear 1s infinite\",\n                \"animation-delay\": time + \"s\",\n                \"-webkit-animation-delay\": time + \"s\"\n            });\n        }\n    }\n    function stop() {\n        if (obj != null) {\n            obj.remove();\n            obj = null;\n            console.log(\"spinLoading stop\");\n        }\n    }\n}\n. ",
    "andreynering": "@theodorejb Saw that you added it now: http://spin.js.org/spin.umd.js\nThanks!\nAnd yeah, it's definitely not needed to publish it on the NPM package.. "
}