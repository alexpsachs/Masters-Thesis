{
    "n1k0": "The debug messages have been added, thanks!\n. Oh, just as a side note, I switched the order of the arguments from your initial proposition :)\n. Thanks, great & classy patch :) I've updated the docs accordingly.\n. Let me rather add an onScriptTimeout option to Casper instead. After all, there can be several use cases and this behavior should be overridable any case.\n. The feature has been implemented. The option has been named onTimeout, and the default behavior on script execution timeout has been set to die() as suggested\u00a0:)\n. Unfortunately I cannot tie the timeout callback handling to the context of the Casper.start() method.\nThough you can get the current requested document location by using the requestUrl property, as well as some other contextual informations: \njavascript\nvar casper = new phantom.Casper({\n    timeout: 10000,\n    onTimeout: function(self) {\n        self.die('timeout exceeded. context: ' + JSON.stringify({\n            currentUrl: self.getCurrentUrl(),\n            currentHTTPStatus: self.currentHTTPStatus,\n            requestUrl: self.requestUrl,\n            // ...\n        }));\n    }\n})\n. Yes it works, but the location you get is the one passed to start(). What if the timeout is reached after, say, 10 thenOpen() other steps?\n. To get a field value, have a look at ClientUtils.getFieldValue():\njs\ncasper.then(function() {\n    this.echo(this.evaluate(function() {\n        return __utils__.getFieldValue('foo[]');\n    }));\n});\nIt will return multiple values in case of a checkbox or radio group.\n. For the records I've just added Casper.getFormValues() in db638037de2ad908a07033fe41e46db1af153eeb to ease retrieving form values.\n. Great stuff, thanks!\n. The patch looks great but it makes the test suite fail on the waitFor() test\u00a0:/\nCould you please have a look and fix what is making that test actually fails? Thanks!\n. I may be due to your use of setTimeout instead of setInterval\u2026\n. Sounds awesome :) don't hesitate to write as many tests as you can, and eventually to update the docs in the gh-pages branch as well :)\n. Just great! I'm in the process of splitting the code of casper.js into smaller \"modules\" in the modularization branch, I will also split tests so don't expect a merge really soon, I'll try to push the whole new thing in the next few days :)\n. The feature has been merged into master, as well as the modularization branch. Many thanks for your great work!\n. It is\u2026 well\u2026 very verbose ^^'\nI'll try to add something like \"custom formats\" for you to add your own custom log levels, with a callback to format the message string against the resource and other stuff :)\n. So after having thinking a bit of implementing the feature, I finally found that it was quite easily doable by the developer \u2014 I provided a sample to highlight how to do exactly what your patch does\u00a0:)\n. Happy to help :)\n. Thanks!\n. Interesting feature, but could you please fix the indentation and coding standard issues before I merge it? Thanks.\n. Thanks for this PR! definitely a neat idea. I'll work out the small cyclic dependency issue and merge the feature soon, stay tuned :)\n. Don't tell anybody.\n. Should be a bit more clear with a README =)\n. No worry for the merge with upstream, I did it by my side :) I merged your patch, thanks for contributing.\n. No problem at all, I'm probably a bit too much picky about this :)\n. Sorry I came with a rather simpler solution :)\nI dropped your tests because none were passing on my box. I'll be working on mocking the results provided by the fs API if I get some times :/\n. Could you please commit the generated html as well? will ease review :)\n. Hmmm. Could you please use just one PR, with a dedicated branch on your own fork? That would ease a lot merging the whole featureset\u00a0:)\n. fixed with ae2beef3f7\n. PS: thank you so much for this, I really appreciate.\n. Merged, thanks for contributing.\n. Nice! May I eventually ask you to provide some unit tests and some documentation for these changes? :)\nThanks!\n. Oh it's you, okay. Don't worry, I'll take care of the unit tests. \nBut could you please just add some documentation? Everything is explained on the gh-pages branch README :) https://github.com/n1k0/casperjs/tree/gh-pages#readme\n. No problem, thanks :)\n. 2 months later, what's the status of this PR?\u00a0:)\n. Merged, thanks a lot for contributing\u00a0:)\n. Yay, pretty cool enhancement, thanks for contributing :)\n. Thanks!\n. Thanks.\n. Okay thanks a lot for this work, it's great. I commented a bit some changes which might be discussed though.\nThanks again :)\n. Yeah, sorry for the latency.\nActually when I stated I wanted /**/ comment blocks, that was for multiline ones\u2026 So for single line comments, I'd prefer keeping the // form.\nAlso, I'm not really happy with the var declarations with no assignment, so instead of:\njavascript\nvar casper;\ncasper = require('casper').create();\nI'd rather prefer the old form:\njavascript\nvar casper = require('casper').create();\nSorry I've not been clear enough :/\n. Poke :)\n. Ping :/\n. No problem, mothers first ;)\n. Can you please review the whole diff, I can see places where all the changes have not been applied\u00a0:)\nThanks a lot for your work!\n. I'm so sorry being so painful\u2026 feel free to hate me\u00a0;)\n. Merci :)\n. Merged.\n. Commited (don't pay attention to latest commit)\n. Thanks for contributing.\n. Ah yes, silly me, thanks!\n. I'm revamping the docs right now, the fix will be applied.\n. Fixed in new docs.\n. fixed by 1a23e9eb2f48eed5319fb9276c658ceeabc8a015 :)\n. Just to be sure, is it now working for you with this change? Does it solve #154? Wasn't it working using the event object?\n. Great stuff, thanks! Could you eventually try to add some tests for these new events please? \nFor example by trying to submit a form triggering a keyCode = 13 event\nMerci :)\n. Well, the more test coverage we have, the more we'll be sure that it works as one can expect.\nI'll try to add more test cases if I can find some time, and create a dedicated remote branch.\nAnyway, we could possibly merge the feature for 1.0 with strong warnings about its limitation. \n. I had to revert changes erroneously commited to master, sorry for the noise.\n. After playing a bit with the feature, looks like it's indeed failing at many other use cases. I'll keep the keyboard branch to investigate a bit more about these.\n. In the meanwhile, let's all star this issue in order to make it coming in future phantomjs releases http://code.google.com/p/phantomjs/issues/detail?id=492&q=keyboard\n. I've just started a discussion in ariya/phantomjs#287\n. There's a fine PR awaiting to be merged upstream https://github.com/ariya/phantomjs/pull/290\n. It will be released this week with phantomjs 1.7 :)\n. @ysangkok here you go https://github.com/ariya/phantomjs/commit/1b2a84df9c56a2f22c2f4449fd2113e8c696a05c#src/phantom.cpp\n. @ysangkok right now and as we're still compatible with phantomjs 1.6, you have to use this feature by yourself.\nI might drop phantomjs 1.6 support when phantomjs 1.8 comes out in December, then I'll be able to refactor fill().\n. @mpalmerlee this patch was merged then removed as phantomjs has gained native keyboard events in the meanwhile. But as I say in the comment preceding yours, it will be released when support for 1.6 will be dropped.\n. I've just created #302 to keep track of this.\n. Great stuff, thanks for contributing.\n. Thank you!\n. I'm sorry, this one won't make it to master.\n. Nice. This PR and the PUT requests you perform in your tests highlights the real limitations of using the filesystem for HTTP related tests.\nI'm in the process of moving to a full HTTP server solution for testing requests/responses (eg. what's have been done for this test), I think I'll merge this one when I'm done with it.\nAs always, thanks for contributing.\n. Merged. Thanks for contributing :)\n. Merci mec :)\n. I'm not sure for the getCurrentHeader* names, mostly because it's not obvious if we're talking about response or request ones.\nAlso, I'm thinking a neat API would be something more like:\njavascript\nvar accept = casper.currentResponse.headers.get('Content-Length');\nWhat do you think?\n. Now, I'm wondering if I shouldn't pass the response object to the step callback:\njavascript\ncasper.start('http://google.com/', function(response) {\n    if (/json/.test(response.headers.get('Content-Type'))) {\n        this.echo('JSON spotted');\n    }\n});\nThat would break any old codebase relying on the deprecated self argument passed as a first parameter though\u2026\nThoughts?\n. Very nice, things are shaping up nicely.\nRegarding my comment about passing the response as an argument of the step callback, any thought?\n. Merged\n. @doni documentation is here http://casperjs.org/api.html#casper.then.callbacks\n. Merged, thanks for contributing.\n. Thanks, very useful. I'll be merging this, just take care of the few typos I commented on :)\n. Yes, looks fine :) I'll be merging these soon, I'm a bit over busy right now\n. Merged. Thanks for contributing.\n. One more time, thanks for contributing.\n. I don't really want to support all possible exotic use cases. Those should be handled manually by the developer.\n. Thanks for contributing.\n. Thanks for contributing.\n. Thanks for contributing :)\n. Wow, thank you! I'll be merging this after some testing as soon as I'll get a windows vm running :)\n. Merged, thanks for contributing.\nPS: dunno why github hasn't closed this one automatically.\n. @AndiDog @Reinboom if you have 5 minutes, could you just describe basique installation (if any) & usage of this new tool? Write it here in markdown, I'll add it to the docs myself.\n. @Reinboom: thanks!\n. Thanks for contributing.\n. Indeed :) Thanks for contributing.\n. YAY, WINDOWS USER! Thanks for the PR, but could you please test PR #234 which provides the same feature but it's entirely written in a .batfile?\nI don't have any Windows box at hand, so any help would be warmly welcome\u00a0:)\n. I'm not very comfortable with the proposed API.\nAt least, I'd like options being passed as an object:\njavascript\ncasper.click('#foo a.bar', {\n    blockEvents: [\"loadInProgress\", \"navigationRequested\"]\n});\nYes it's a bit more verbose but we will be able to add more option easily while keeping everything BC.\nOther than that, very helpful feature.\n. > Meanwhile, I notice you used the term \"blockEvents\" instead of \"blockStep\" -- why a more general term?  I was specifically aiming at steps... rather than more general events that are all over the place.\nYou're right, I don't like that name as well, and it may be confusing for end users. I wonder if we couldn't find something even more meaningful though.\n\nAlso, what does \"BC\" mean?\n\nBackward Compatible :)\n\nFinally... I wonder how I can \"update\" a pull request to reference a different commit.\n\nJust keep committing and pushing on the very same branch on your fork :)\nPS: as a side note it's generally preferable to create a branch dedicated to implementing a given feature before sending PRs.\n. I'm starting wondering if those blocking events shouldn't be configurable casper options\u2026 So you could define these at start time then switching using this holdOn method:\n``` javascript\nvar casper = require('casper').create({\n    holdOn: {\n        navigationRequested: true,\n        pendingWait: true,\n        loadInProgress: false\n    }\n});\ncasper.start('http://foo.com/', function() {\n    // stuff\n    this.click('#link'); // defaults blocking events are used\n});\ncasper.holdOn({loadInProgress: true}); // we should only update that new different value\ncasper.then(function() {\n    this.click('#newlink'); // new global blocking events are used\n    // or\u2026\n    this.click('#newlink', {\n        holdOn: {\n            // per click specific bocking events specified here\n        }\n    }); // specific blocking events are used\n});\n```\nWhat do you think?\n. What's the status of this PR?\n. > are we itching to get this feature integrated real soon?\nNot necessarily, I was just triaging tickets & PRs, hence this poke\u00a0:) I'll be reading the whole thread again in the following days to act some decision about this.\n. > that's something that really ought to be documented at the least\nThat's a good idea. Would you mind creating a docs PR for this?\n. Thanks :)\n. My knowledge of Batch and the Windows platform being nearly zero, I hereby invoke @Reinboom for some advice and validation.\n. > I'll try and knock one together that maintains the phantom arguments\nThat would be just great, thanks!\n. Just had the opportunity to finally play with this patch on a Windows VM:\n```\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nC:\\local\\casperjs\\batchbin>casperjs.bat ../samples/cliplay.js --plop=2 foo bar 'bar foo'\nCasper CLI passed args:\n[\n    \"foo\",\n    \"bar\",\n    \"bar foo\"\n]\nCasper CLI passed options:\n{\n    \"plop\": 2\n}\n```\nWorks (enough) for me.\n. thanks\n. .\n. sorry for the noise, my mistake was because you have to modify the sources, not the resulting html ;)\n. Already implemented, see #283\n. Thanks! For the records, you're the first person submitting a doc patch while actually building the pages. Thank you\u00a0:')\n. Neat, thanks for contributing!\n. Hmm, looks like you've committed your work on test suites on the wrong branch\u2026 could you please create a new PR for the test related stuff?\u00a0:)\nThanks\nNote on initial PR: still no windows box nor working VM to test any windows-related PRs, that's why it takes so long.\n. Thanks for contributing :)\n. Great patch!\n\nI noticed a couple semantic mistakes in the findOne() / findAll() tests. Should I commit the changes I made to fix them?\n\nSure!\n. Thanks for contributing \n. Yep!\n. I dunno if I want to merge this as is anyway reading the description. \n\ndamn it all and write a teenie tiny .NET app that will handle it all nicely?\n\n@owenmartin that would be the best option for sure, but up to you as I don't have a clue how to do it myself ;)\n. Ah, probably instructions for contributing documentation aren't clear enough, but you shouldn't modify the HTML pages, only the sources.\n. Merged in 12272eae4edbfd3e5519b67e9883fcd32e3b7046. I took the liberty to adapt the code a bit.\n. Sure, I totally support the idea. Now if you could add tests and patch the docs, it would be really cool :)\nThanks for contributing.\n. You did it right :)\n. > You should wait for the 1.1 for pushing this\nI'm thinking the same.\n. Merged the feature into the 1.1-dev  branch\n. I'm closing this one has the feature development will now occur in the 1.1 branch.\n. Damn, you're right.\n. Could you please update the sources and build the docs from there? Explanations for contributing to docs are here :)\nThank you\n. Merged, thanks for contributing.\nNote: the feature is only available in 1.1-DEV (current master branch) only.\n. For some reason it was never merged. I'm getting old.\n. documentation has been added here http://docs.casperjs.org/en/latest/modules/casper.html#waitforselectortextchange (new docsite)\n. Haha, \"Merge with caution\" :D\nNice one, cheers!\n. Thanks for contributing!\n. Merci :)\n. Could you please eventually add test cases to cover the ones this patch fixes? thanks.\n. Merged. Thanks for contributing.\n. I'm afraid it's not really XUnit compliant, but I've never been able to find any official spec\u2026 Question is, would it break consumption by mainstream CI softwares like Jenkins?\n. Build fails. Also, I'm not sure we want to derive from standard XUnit.\n. Merged. Thanks for contributing.\n. Merged, thanks for contributing.\n. Thanks\n. Thanks for contributing.\n. done in 20ff461\n. fixed in 55b648e883e27b4e72e9b3b54b1835c3f614f8de\n. sure, never claimed it was\n. Because it actually was https://github.com/n1k0/casperjs/commit/55b648e883e27b4e72e9b3b54b1835c3f614f8de#L0L735\n(I'm loving this thread, let's keep going on)\n. Finally merged. Thanks for contributing!\n. I don't really like the thenSkip* methods as they're coupling back the tester to the casper instance. Other than that, it's a pretty cool patch!\n. Looks nice. I'll be playing with the patch to see how it goes.\n. I'm not sure we should have this dedicated purple bar for when tests have been skipped in a suite. Right now with the patch the whole casper suite finishes being purple, which is not really what's expected here\u00a0:)\nI think skipping tests is okay and should not affect the build status. Also, having the number of skipped tests in the status bar is informative enough.\n. I've pushed a skip branch, please try to keep in sync with it for further development.\n. Also, I'm finding the two skip concepts very confusing\u2026 I suggest renaming Casper#skip() to Casper#bypass() instead.\n. I've refactored tes tests and renamed Casper#skip to Casper#bypass. Now I'm realizing the Tester#skip implementation just relies on step bypass. That's no good, as one may want to skip tests not relying on navigation steps. I'll have to change the implementation as well. \n. > In fact I find test.skip irrevelant.\nSample use:\njs\ncasper.test.begin('foo', 4, function(test) {\n    test.assert(true);\n    test.assert(true);\n    test.skip(2);\n    test.done();\n});\nOther use case, compat:\njs\ncasper.test.begin('foo', 4, function(test) {\n    if (phantom.version.major < 2) {\n        test.skip(2);\n    } else {\n        test.assert(true);\n        test.assert(true);\n    }\n    test.done();\n});\n. Partially merged and adapted, thanks for your contribution!\n. Thanks for contributing.\n. My main concern with this is its maintenance; I've already made the mistake accepting a ruby executable which is no more maintained by the original contributor, so I think I won't do the same mistake twice.\nPython is perfectly fine for the time being. \n. Thanks!\n. Thanks for the quick fix. \nWill looking back at the whole cli code, I think I'm gonna refactor it though\u00a0:)\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. hmm why did you close this?\n. Oh indeed, I didn't notice. This is weird as the diff is quite clean. \nCan you please try to investigate what's going on? The feature is interesting.\n. Thanks for contributing.\n. Thanks!\n. Looks fine. Can you please update the docs in docs/modules/clientutils.rst? Thank you!\n. Wow, I'm sorry. I'm getting old.\n. thanks :)\n. Looks nice, I'm a bit busy for the next few days but expect a review next week :) thanks\n. Reviewed, please take care of the several issues I raised in the diff, thank you!\n. The more I review this one, the more I think the filling methods (by name, by ids or by xpath, possibly) should sit in ClientUtils and should only be called accordingly through evaluate in their corresponding methods in Casper.\nRight now the code is hard to read, follow and grasp as it declares functions in the casper prototype to be executed within the page env\u2026 I'd like a bit more of separation of concerns here.\nLet me try to pick your branch and send you a PR accordingly.\n. Finally merged by myself, thank you!\n. @cabhishek this feature will not land in the 1.0.x branch, only in 1.1 (which is pretty stable actually).\nI'm considering releasing 1.1 (at least a RC) in the next few weeks, but I cruelly lack time :/\n. Merged, thanks for contributing!\n. Looks good, please take care of the minor coding style issues and I'll merge this\n. Thanks!\n. Looks very good despite some minor remarks which should be addressed though. Thanks!\n. Also, I'd like some documentation updates as well, if possible. Thanks!\n. Landed! Cheers :)\n. @quanghoc The docs says New in version 1.1. Please upgrade to 1.1-beta1 if you plan to use this feature.\n. Closing as travis is unable to run tests for this PR anymore for some very obscure reason. Will open a new one.\n. Woookay, travis seems unable to run tests for this PR as well, merging so I'll work with master directly.\n. Great stuff. I'll review the patch but it's looking good already.\nI'll merge this as soon as the tests are green though.\n. Please sync with latest master. Also, the rubybin/casperjs script should also reflect the changes made in bin/casperjs (poke @hannyu)\n. @laurentj me neither nor I want to.\nIf nobody wants to maintain the ruby exec, I'll probably get rid of it. I'll create an issue about this.\n. I can't express how happy I am with the great work you achieved here. Thank you so much.\n. Thanks!\n. Please take care of these jshint issues https://travis-ci.org/n1k0/casperjs/jobs/7536304#L1482 :)\n. Damn you're right :)\n. Thanks!\n. > Will there be support for --no-color option?\nThere is, please use latest master.\n. Thanks dude.\n. @laurentj while there's still some work regarding coding style and implementation, I'm still not convinced by the feature, as I can see cumbersome support requests coming to the mailing-list already\u00a0:) I'd personally rather see this being implemented by developers, or by a third-party project.\nBut I need to take some time reviewing it thoroughly and think about it.\n. Also, this PR badly needs tests & documentation, of course.\n. refs #462\n. @theefer will merge this one and publish the casperjs package to npm once 1.1 stable will be tagged.\n. I hope I'll be able to release it before the end of the summer.\n. Thanks for contributing!\n. I'm in holidays using a crappy edge connection, maybe @laurentj could have a look? Also, AFAICS tests are failing.\n. Poke.\n. No pb take your time:)\nLe 12 ao\u00fbt 2013 17:34, \"Nicolas\" notifications@github.com a \u00e9crit :\n\nI was in holidays.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/526#issuecomment-22501981\n.\n. The patch looks good, though some minor CS issues to be addressed. Also, please ensure to rebase on top of latest master.\n\n(Sorry for the latency, I've been quite busy with other fronts these last months)\n. Maybe we want to be sure this is part of the maintained public API of phantom, so it's not likely to break in the future.\n. I'll take care of writing the docs\n. Thanks, you're on fire today, that's plain cool ;)\n. Thanks!\n. Just close this PR and cherry pick the commits you need on a new branch and send a new PR :)\n. Thanks! :)\n. Looks good. Thanks!\n. Can anybody with a Windows box confirm that this patch addresses the mentioned issue and doesn't break backward compatibility?\n. #604 deprecates casperjs.bat, so I'm closing this one.\n. I'm against this change. I find it useful to be sure the test file being run is the one you expect, even if the information may be redundant for some.\n. Thanks!\n. Don't pay attention to test failure, we got random ones for some reason we still need to investigate. Thanks.\n. Thanks!\n. Sry for being nitpicky\u00a0;)\n. Looks good ;) Thanks!\n. Thanks :)\n. Thanks :)\n. Looks like the tests are failing :)\n. Well, testing for constructors is usually hard, and I'm expecting to receive lots of questions and bug reports for this one. Still unsure we should land this one.\nUsually, people can test for this kind of stuff themselves very easily, and it keeps under their control and responsibility:\njs\ntest.assert(foo instanceof Cow, \"foo is a Cow\");\nCan't really see much added value with a dedicated API\u2026 hints?\n. Awesome work, thanks.\nHave you seen the error on Travis?\n$ make compile\nmcs -out:./bin/casperjs.exe ./src/casperjs.cs\n./src/casperjs.cs(111,60): error CS0122: `System.IO.Path.Combine(string, string, string)' is inaccessible due to its protection level\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\n./src/casperjs.cs(111,43): error CS1502: The best overloaded method match for `System.IO.Path.GetFullPath(string)' has some invalid arguments\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\n./src/casperjs.cs(111,43): error CS1503: Argument `#1' cannot convert `object' expression to type `string'\n./src/casperjs.cs(146,30): error CS0122: `System.IO.Path.Combine(string, string, string)' is inaccessible due to its protection level\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\nCompilation failed: 4 error(s), 0 warnings\n. Cool. I suspect running casperjs.exe selftest runs OK on your Windows machine?\nNow I think of it, wouldn't adding a new travis matrix for running the tests using that new executable be a good idea?\n. What are the failures mostly related to? Possible to gist the output?\n. Way cool. Can you commit that? Also, if it's phantomjs related, maybe we should just skip failing tests when the detected platform is Windows, what do you think?\n. Scratch that, I'm silly, you can't commit anything as it would likely break casper. I'd love having a green build using this .NET version, could you imagine investigating a bit more to see what's happening here and why?\n. Nice. Thanks for your efforts, I really appreciate.\n. Thank you! Could you eventually update the docs to mention the new executable? Thanks\n. Very cool, thank you! :)\n. Great :)\n. Thanks!\n. Thanks!\n. Good work, while some raised issues are to be addressed.\n. Thanks!\n. Adding support for this in sendKeys() is fine with me, though I'd expect some bits of documentation added along this patch\u00a0:)\nThanks\n. Great patch, thanks for contributing!\n. Thanks!\n. Thanks\n. Thanks!\n. Have you considered implementing something like TestSuiteResult#toJSON?\n. @mickaelandrieu I think I'm ready to drop support for 1.8.2 for this to land. Also, we would be able to get rid of some conditionals dedicated to supporting this version.\n. +1 for using an event; I'd even like to deprecate the on* listeners in the future (2.0)\n@brandon-bethke-neudesic could you please rebase on latest master and implement the feature as an event only?\n. I wonder if we shouldn't update createStep to accept a name as its first agument?\n. Sounds good, let's do that.\n. Have to interupt my review because of some conference call, I'll continue tonight. Good work.\n. Sorry for the lag, I'm over busy and cruelly lack time.\nStill some remarks to be addressed. Also:\n- the build fails, please consider fixing it\n- coalesce needs some unit test love :)\n. Now I think about it, the way we use coalesce is usually this way:\njs\nvar step = this.createStep(utils.coalesce(then && then.name, \"_foo\"), then);\nWhich could actually be written this way:\njs\nvar step = this.createStep(then && then.name || \"_foo\", then);\nHonestly, the more I think about it, the less I see real use cases for coalesce :)\n. Thanks!\n. Dunno if you've seen them, but jshint errors were encountered in the build:\nmodules/utils.js: line 644, col 37, Blocks are nested too deeply. (4)\nmodules/utils.js: line 646, col 24, Blocks are nested too deeply. (4)\nmodules/utils.js: line 683, col 37, Blocks are nested too deeply. (4)\nmodules/utils.js: line 685, col 24, Blocks are nested too deeply. (4)\ntests/suites/utils.js: line 376, col 32, Expected '===' and instead saw '=='.\ntests/suites/utils.js: line 379, col 27, Expected '===' and instead saw '=='.\nBtw I think we should start the jshint validation before any other test to fail quickly and avoid wasting travis resources.\n. Looks good until minor bits are addressed and jshint not complains anymore so the build turns green\u00a0:)\n. Sure! \n. Yeah, we definitely want these features, just clean the diff and rebase on top of latest master :)\n. Actually it was because PhantomJS was already providing a --verbose option I didn't want to override. Well, too late. Anyway, I'm easy with replacing it after all.\nThough as we just broke backward compatibility, I think we need to continue supporting the --direct option in some way. I'll create an issue for that.\n. You mean --verbose I suppose. Oddly, I can't find trace of --verbose in phantomjs anymore. Did I dream? Anyway, ensuring BC is P1.\n. Docs issue to be fixed, you can safely merge this once addressed.\n. @mduvall @hexid sounds good, let's do this.\n. I think we need assertFieldSelector, assertFieldName and assertFieldXPath to match what we have in fill*; also, default behavior of assertField should be kept BC and be aliased to assertFieldName.\n. @mduvall yeah, SemVer is the goal\n. Still not sure about this change. I was more expecting adding inputName arg inspection capability to assertField:\nhtml\n<form>\n  <input id=\"my_id\" name=\"my_name\" value=\"plop\">\n</form>\nTests\njs\ntest.assertField(\"my_name\", \"plop\");\ntest.assertField({type: \"name\", path: \"my_name\"}, \"plop\");\ntest.assertField({type: \"css\", path: \"input[name=my_name]\"}, \"plop\");\ntest.assertField({type: \"xpath\", path: \"//input[@name=my_name]\"}, \"plop\");\nWith new methods for asserts:\njs\ntest.assertFieldName(\"my_name\", \"plop\");\ntest.assertFieldSelector(\"input[name=my_name]\", \"plop\");\ntest.assertFieldXPath(\"//input[@name=my_name]\", \"plop\");\nAnd assertField would obviously just use test.assertFieldName by default.\n. Poke\n. Thanks.\n\nbecause the tests are self tests, it's not possible to do these failure tests\n\nMaybe a python cli test would be smart to write here?\n. Sure.\n\nI would guess that the on('fail') code needs to not fail twice.\n\nWell, maybe just using once('fail') would solve the issue?\n. Double AssertionError issue has been reported in #558 already.\n. Can you please rebase on latest master? Thanks.\n. Thank you!\n. doh, thank you\n. Thanks for contributing.\n. Please keep the duration attribute for backward compatibility. Please also update tests accordingly.\n. Yep, tested and approved. Thanks for contributing.\n. Do you know if it's possible to publish to npm using tagged versions of the repo? I'd like to provide a package for 1.1-beta2 (and possibly 1.0.4 once it's released, 1.0.3 has a problem with its version number atm)\n. Ok, will investigate tomorrow. Anyway, thanks for the update, merging :)\n. Yes, I'd like to see some tests added. Maybe just with a popup opening a popup. \n. @jefleponot poke, could you please take care of adding tests to this PR? If you can't or doesn't want to, please tell us, we'll take care of it.\n. Poke\n. Poke.\n. Please rather add this to the CasperJS samples & snippets wiki page.\n. @mickaelandrieu I'll review that one.\n. Thanks for contributing.\n. @nathanboktae actually I had pretty much nothing to say, and I'm usually not the easy guy\u00a0:) So, would you like to join the casperjs team?\n. From the git docs:\n\nWhen text=auto normalization is enabled in an existing repository, any text files containing CRLFs should be normalized. If they are not they will be normalized the next time someone tries to change them, causing unfortunate misattribution. From a clean working directory:\n\n$ echo \"* text=auto\" >>.gitattributes\n$ rm .git/index     # Remove the index to force git to\n$ git reset         # re-scan the working directory\n$ git status        # Show files that will be normalized\n$ git add -u\n$ git add .gitattributes\n$ git commit -m \"Introduce end-of-line normalization\"\nHave you made this check and related operations? If not, could you please update the PR? Thanks!\n. I'll take care of writing these, no worry\n. Fixed by df1eef5db914643864728c6733d4ad47f0ec7440\n. thanks for contributing!\n. Hold on, let me review this first.\n. > I like events, so I added a frame.changed event.To be consistent, maybe should I also encapsulate switchToParentFrame and switchToMainFrame, to also emit this event ?\nSounds like a good idea indeed\n. Poke\n. Woops been really busy lately, will check the new diff this week.\n. Great work! Minor nits to be addressed, and a jshint issue to fix for the build to turn green:\nmodules/tester.js: line 455, col 12, Possible strict violation.\nThanks!\n. Great stuff, cheers!\n. Much simpler than the previous version. Thank you!\n. Definitely need to add Slimer to the travis build matrix, just so we know about regressions/incompatibilities - refs #594 \n. In the meanwhile, could you please fix the minor jshint issues so the build turns green? :)\nmodules/casper.js: line 928, col 36, Expected '===' and instead saw '=='.\nmodules/casper.js: line 935, col 42, Expected '===' and instead saw '=='.\nmodules/casper.js: line 936, col 53, Expected '===' and instead saw '=='.\nmodules/casper.js: line 937, col 42, Expected '===' and instead saw '=='.\ntests/suites/http_status.js: line 31, col 13, Bad line breaking before '||'.\ntests/suites/http_status.js: line 32, col 13, Bad line breaking before '||'.\nYou can run jshint checks using make jshint.\n. Also, you may want to rebase over latest master which now properly runs tests against slimer\u00a0:)\n. Poke\u00a0:)\n. Thanks @clochix! \n. Thanks!\n. Thanks!\n. @icoloma sure, will add it to the description as well\n. Suddenly test suites take ~10mn to complete, is this a temporary travis issue or could it be possibly related to this change?\n. New test runs are fast again, so it was temporarily due to some Travis overload or something. Merging, thanks!\n. Poke. Any problem?\n. No problem :)\n. heh, thanks\n. This method is available in latest beta version of casperjs, please upgrade.\n. Strangely it always fails when using the .NET executable\u2026 No idea why. Also, I think we should add a python cli test to check for the resulting XML file creation.\n. @hexid no pb\n. @hexid indeed! that's really weird.\n@laurentj could you please update your PR according to @hexid's suggested changes? Also, please rebase to get rid of the oups commit ;)\n. Will update the PR, see #759 \n. Thanks\n. Thanks!\nNote: don't pay attention with the failed build, see #762 \n. Thanks!\n. Hmm that's most likely to break scripts relying on the current behavior\u2026 I'd rather see a new prependListener method\n. (also, tests to be added)\n. I'm sorry, what do you call a \"tag\"?\n\nIf prependListener is correct, should I rename addListener to appendListener ? \n\nDon't rename anything for BC purpose, just add a new prependListener method, thanks :)\n. Re: the changeset: please don't change anything to the current addListener method, just add a new prependListener one (no supplementary arg to be passed, as a third one is usually associated to passing a context object in other frameworks/libs); on shouldn't be altered as well.\nDevs wanting to prepend a listener to the current stack will do explicitely by themselves. We'll obviously document this thoroughly.\nThanks\n. Thanks, I'll review the patch later tonight :)\n. Yeah please help, I'm overbusy these days\n. @mickaelandrieu I think @hexid is working on #768 \n. @mickaelandrieu I'm busy these days, but will have a look next week\u00a0:)\n. I swear I'll give it a look soon, but this one is big & impacting enough to take the required time for an appropriate review.\n. Thanks!\n. Thanks!\n. Easy fix: add a /*jshint maxstatements:99*/ directive in your function. Longer one: refactor so the function nb of statements decrease\u00a0:) Up to you, I'm fine with both ways.\n. Sorry, I've been far from casper lately. The patch looks good, merging.\n. @hexid yeah I'm aware of this silly situation, unfortunately I'm overbusy these days and to be honest was expecting anyone from the team to take over the issue :)\nSo right now I can't tell when I'll be capable of handling this in a near future.\n. Thanks!\n. Thanks a bunch, man\n. Wait, why is that change? The previous version was working perfectly. Reverting.\n. Reverted by 4d94b84a3c2ce78b95a5464f7044cab5464a742d\n. Thanks\nNote: skipped travis build because this is docs patch\n. Thanks. Could you please add docs and a test please?\n. Looks like an improvement. How about renaming newPage to reset though?\n. > What other resources within Phantom, aside from the page, could be leaking?\nThe casper instance stores a bunch of logs, history, resource objects and so on; it might be interesting to check these and provide a way to purge the data they contain.\n. Thanks.\n. batchbin stuff is deprecated; other issues have been addressed in other PRs :)\n. Is JSON encoding parameters the default behavior we want when using application/json? Shouldn't we just add documentation for such a case, so people may use JSON.stringify explicitely?\n. Hmm, you're kinda right :) Merging.\n. Thanks for contributing.\n. Thanks mate :)\n. Thanks!\n. The patch looks good, though for some reason Travis is not providing build status. Could you please rebase your two commits (possibly with a more meaningful message) so we get a chance to have a green status? Thanks.\n. Thanks for contributing!\n. > variable username and password are always empty\n``` js\n\n\n\nvar loc = \"http://user:pass@host.com/\"\nundefined\nloc.match(/^https?:\\/\\/(.+):(.+)@/i)\nArray [ \"http://user:pass@\", \"user\", \"pass\" ]\n```\n\n\n\nI don't get it. Closing.\n. Oh, sorry, I'm not awake yet. Reopening.\n. Thanks :)\n. Thanks a bunch.\n. @hexid could you please take care of reviewing this? thanks!\n. @hexid good question, I didn't notice actually; needs investigation (I'm still superbusy atm, so any help is welcome)\n. The build failed because of npm issues, restarted it manually (@hexid, you should be able to do so by login with your github account into travis).\n. Thanks. Adding a test would be really nice :)\n. No worries. The build has failed because of jshint issues:\ntests/suites/clientutils.js: line 211, col 14, 'info' is already defined.\ntests/suites/clientutils.js: line 215, col 14, 'info' is already defined.\ntests/suites/clientutils.js: line 219, col 14, 'info' is already defined.\nCould you please take care of fixing these and rebase your work into a single commit? Thanks!\n. Sure, that's probably the only case where push -f is safe\u00a0:)\n. Thanks!\n. The patch looks generally very good. Minor nits to be addressed mostly about coding style though.\nThanks for contributing :)\n. > jshint still returns cyclomatic complexity of 8 for the clientutils.getFieldValue\nYeah, this method is getting bloated as we keep adding stuff in there. Though I think this shouldn't really be addressed by this PR. Let's fight this bit of technical debt in a next one.\n. os.execvp is used for a very good reason, see #96:\n\nmake python launcher use os.execvp() instead of subprocess.Popen()\nThis fixes a bug where casperjs' python launcher process won't pass along kill\nsignals to the phantomjs subprocess. This patch works by using an exec system\ncall which causes the phantomjs subprocess to completely replace the casperjs\nparent process (while maintaining the same pid). This patch also has the added\nbenefit of saving 10 megs or so of memory.\n\nI'm highly reluctant to add a switch case targetting Windows specifically.\n. @mickaelandrieu we'd need to ensure this wouldn't break with untested cases (and write new ones accordingly); could you please take care of that?\n. > As for the code in this pull request, you can see that the entries.map call already outputs the absolute paths of each of the files\nIndeed, merging.\n. Thanks for contributing (and keep it up with trifle)\u00a0:)\n. Thanks :)\n. Hmm that's right.\n. Nice work, thanks! Nits to be addressed, and I really want unit tests for the config parsing/mapping logic. Extracting this part and moving it to a dedicated function in the cli module seems like the way to go to achieve just that.\n. Ah, also, documentation should be added as well ;)\n. @mickaelandrieu wonderful\n. Sounds like something we don't really want. Closing.\n. Poke.\n. We should add a section describing the license used for these assets.\n. I just want the licensing information being mentioned in the patch for these assets.\n. Thanks mate\n. This is very cool, thank you\u00a0:)\n. Nope, I have comments I need to put down here once I get time.\n. I'd like we had a test for this\u2026\n. Well, I wish we could find a way to avoid coupling the events module (which is a port of nodejs' one) with casper test specifics, but:\n- this module has been modified already (filters)\n- it's not kept updated against latest changes from node\n- this patch actually fixes the issue\nAlso, as you may have suspected I don't have much time to maintain the project lately, so I'll just merge this as it's useful to people\u00a0:)\nThanks!\n. @mickaelandrieu sure please do (side note, reload is done)\nedit 20/05/2013 from mickaelandrieu: true :) it's back & forward that we need to refactor\n. Hmm, Travis build is showing intermittent failures with a totally unrelated test. This is no good.\n. Would you mind adding a test for this? We didn't have anyone before, it's missing.\n. Ah no it's cool :)\n. refs #916 & #919\n. refs #916 & #919\n. Looks good, merging. Thanks for contributing!\n. Somehow I missed this PR. Very interesting approach, I'll review this soon\u00a0:)\n. If we want to support Phantom2, we need to add it to the Travis build matrix.\n. Yeah\u2026 I guess this is blocked until we get proper builds to download and test against, then. I don't really want to start claiming support for Phantom2 while it's possibly not fully supported.\n. Hey, what we can do is allowing using phantom2 with casper but logging a supplementary warning for probable bugs and no official support until a stable version is released. Thoughts?\n. You can add a commit and rebase after when you're done :)\n. I suspect we don't really want to search up to the fs root, for security reason.\nAlso, could you please ensure that builds are green? Thanks.\n. Nice, thanks. Do you think you could write a test? Typically one in https://github.com/n1k0/casperjs/blob/master/tests/clitests/runtests.py\nThat would help preventing further regressions.\n. Hmm I don't have a windows box at hand, but last time I did tests were running just fine. What errors do you get?\n. Sounds like Python/Windows things, a land where I'm kinda clueless :( \nPoking @hexid and @laurentj here in case they have ideas.\n. Thanks a bunch, I truly appreciate. In the meanwhile, I filed issue #996 to track broken tests on Windows.\n. This is good, thanks a lot! :)\n. Thanks :)\n. Too much code duplication between the new touch-related methods and the click ones. This patch needs refactoring.\n. Thanks :)\n. Thanks.\n. Thanks.\n. Fixed by #1029.\n. Thanks!\n. TBH I don't clearly see the added value of having this while we could simply rely on some simple xpath expression; that's what we do with clickLabel, and //a[text()=\"blah\" seems to work just fine\u2026\n. While I could see how this feature could be interesting for, say, 1% of the casperjs userbase, I'm definitely uncomfortable landing this in its current shape. \nThe patch does far too much, misses tests and docs. Most importantly, as I can't really project myself into maintaining all this when you possibly leave, I'm not gonna land it.\n. > ok, bye\nSounds like I made the right decision.\n\nFYI, the \"link Text\" feature via Casper (hacked) is used by more than 54 people in my team to oversee the government's web applications\n\nHow does this decision prevent you to keep using this feature within your team? You can always extend the casper prototype and keep using it, right?\n. Thanks.\n. Thanks.\n. @mickaelandrieu:\n\ndo we need to keep the \"coffee support\" ? I never see anyone contribute to this files.\n\nProblem is backward compatibility. If it was just me, I'd discard its support, but we need to avoid breaking existing usage.\n. > it exists on mac os x, and there is no rocket science in build from source ;) It's about ~15-30 minutes :)\nSo while you seem quite comfortable doing this, thanks for sending a PR with the travis.yml file tweaked so we can build Phantom2 there and run the unit test suite. Thanks again, we truly appreciate.\n. IRC is good enough.\n. Thanks\n. Damn, that was fast. Thanks!\nPS: Finland and Arto Paasilinna ftw.\n. Ah, my bad I was unclear; you need to add a new entry for PhantomJS 2 to the Travis build matrix (basically after this line), so we can ensure that everything is fine.\n. > there are no binary files for linux packed for PhantomJS 2\nWat. Damn, that sucks. So forget about it, I guess. Grmbl, snap.\nIn other news, the build is green, which makes me confident we can safely merge that. We can always revert later if people complain\u00a0;)\n. Looks really good. Could you please rebase your commits into a single one, so I can land the patch? Thanks again.\n. Thanks for contributing.\n. Thanks for contributing\u00a0:)\n. Thanks\n. Wow, the finally/return thing was so odd, thanks for fixing.\n. LGTM, thanks for contributing.\n. Correct usage:\njs\nvar x = require('casper').selectXPath;\n\u2026\nvar info = casper.getElementInfo(x('//*[@class=\"plop\"]'));\n. LGTM, thanks for contributing.\n. Nice. Could you please add documentation to your patch, and possibly a test?\n. Thanks.\n. Thanks.\n. I have no objection.\n. > SlimerJS appears to be stalling on the CoffeeScript tests (preexisting?)\nWhich version are you using?\n\nLaucher needs to be fixed so SlimerJS actually gets tested on Travis\n\nYeah, it's been bringing false positives for too long. While you're at it, could you handle this as well?\nThanks for your help.\n. > I'm leaning towards the first option because it would make the feature available outside of our testing.\nMakes sense, go for it.\n. > Would you like me to revert the changes that I made in b042eba?\nNo that's useful, so we know the executable env configuration.\n. > With these versions being more than 2 years old, it may be time to remove support for them. Thoughts?\nDefinitely.\n. Thank you :)\n. Thanks!\n. Great patch, thanks.\n. @istr that's amazing, thanks a bunch for the effort.\n@hexid I'd like your opinion on all this, probably a review as well as I'm unlikely to have the appropriate time myself\u00a0:/\n\nRestarted those two failing tests related to dotNet and PhantomJS 2.0.0 and 2.0.1....\n\n@paazmaya what were the failures? intermittent aren't good...\n. >  failing tests were related to some popup test which could not find nor close the popup\nOkay, I think I've encountered these a few times already, so that's not introduced by this patch. We should probably file an issue about it though.\n. @hexid awesome, thanks. \n. > I can go ahead and merge this if you guys think it's ready.\nThis looks terrific, thanks everybody involved! Some comments I'd really like to see addressed before landing.\nThanks again.\n. > Here is my proposal for an engine specific test skip function in modules/tester.js\nYou could also user a min, maxVersion and utils.cmpVersion; sample api:\njs\ntest.skipIfEngine(nb, {name: \"phantomjs\", {min: \"*\", max: \"1.9.0\"}})\n. Thanks to everybody involved in achieving this and for the huge help provided. The project owes you many beers.\n. Looks good, r+ with comments addressed.\n. LGTM.\n. Build failure is due to an intermittent we have sometimes with phantomjs 2.0.1. Merging, thank you!\n. Looks good, thanks.\n. Ping @hexid; could you please have a look at this and possibly merge it if it's okay for you? Thanks a bunch.\n. Thank you :)\n. Looks good. Not sure about reusing the function-bind stuff, but we may want to add more polyfills in the future. r+\n. Indeed, much clearer.\n. @istr added you as a npm collaborator for casperjs on npm :) \n. The changes look good to me.\n. A bunch of thanks @istr for having taken care of this, you rock :)\n. I know I'm not a maintainer of this project anymore but can't help myself: \n- could you amend the docs with more elaborate contextualization of intended use cases? this could start by writing a complete description of your intents with the patch in the PR description field\n- do you think removing all the popup tests is a good idea?\n- did you notice we're using 4 spaces indentations, not tabs?\n- could you spend 2 minutes fixing the English sentences here and there in the patch?\nThanks\n. I have no problem with this patch. If people want to use phantom 2 and phantom 2 doesn't support something, they shouldn't be too much surprised we don't support it either. \n. In theory they're rebuilt and published every time master is updated. I can probably give you access to their admin console, let me see.\n. @istr @BIGjuevos could you please give me your readthedocs.org username (or create one) so I can add you to the list of maintainers? Thanks. \n. You've been both added as well as @mickaelandrieu.\n. You have all my trust to make the release. Just ping me when you want to migrate everything to the org, which was the initial plan IIRC.\n. > I volunteer to help out with the required changes.\nThat's good to hear as I've lost track of what's needed, and don't have much time to handle this. I can press buttons when asked to, though\u00a0:)\n. > as Nicolas Perriault in CasperJS\nBecause at the time ES2015 didn't exist, and CoffeeScript was a much welcome improvement over ES5. Now ES2015 is out and rather widely supported (starting with Babel), promoting CS in any way doesn't make much sense to me.\n. This is great and I love that new green. r+ from me\n. I'm just wondering if we couldn't get colored syntax... and probably using a better monospace font like Consolas, Ubuntu Mono and/or Monaco by default.\n. Also we should probably talk about that ugly Paypal button at some point. What should I do with these twelve dollars?\nJust kidding, had about $600 in 4y, but at some point I'd love reinjecting this money for community things, so if you have ideas and are willing to take care of it, just ask.\n. I was actually more thinking of server costs, domain names (I realize I'm paying the .org), maybe goodies, things like that. But keep ideas coming :)\n. Yeah, looks great @BIGjuevos. We should land this.\n. I don't think those should be versioned in the official repo :)\n. s/to/too\n. Should then be:\njavascript\nvar check = function check(){}\n:)\n. If we're using double-quotes (\") to enclose strings everywhere, then this one should use it as well :)\n. Why is this removed?\n. I really prefer variables being declared on top of scripts or functions\u00a0:)\n. What's the exact added value proceeding so? I mean starting string concatenation operations with an empty one\u2026\u00a0:)\n. Should probably be removed.\n. For block comments in JS files, I'm rather preferring this form:\njavascript\n/**\n * Comment contents.\n *\n */\nEspecially when it's the form already used in all casperjs modules\u00a0:)\n. Always name closures (or unanonymize them if you prefer), it eases a lot debugging\u00a0:)\n. Yes, I'm not really fond of some ways stuff is generated by CS, like this particular one\u00a0:)\n. You're right, so I'm fine with the change :)\n. still some things to make up :)\n. rather use // for one line comments (please)\n. please\u2026\n. did you mean casper? ;)\n. Couldn't you read the current version from the package.json file? I'd like to keep version management into one single place of possible\u00a0:)\n. Hmm. What does Semver.org say about that?\n\nA pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.\n\nSo I'll stick with using a dash, and rubygem guys should update their version numbering strategy\u00a0;)\nCan't you replace the dash by a dot using a regexp? I know it's a far-from-perfect solution, but I'd really like to keep the version number into a single place.\n. Why not using forEachhere (or maybe more appropriately filter)?\n. Maybe we should perform a test-insensitive case instead?\nEdit: I mean in the method implementation, not in the test.\n. Ah ok, now I understand it better ;)\n. What about putting this in a dedicated http module?\n. :D\n. Just this.currentResponse would suffice\n. s/assertSelectorHasText/assertSelectorDoesntHaveText maybe :)\n. Look at the f() format function for an easier way to deal with string concatenation :)\n. I guess some code should be factorized here =)\n. I'd personally rather prefer something like this.includes = {pre: [], post: []}, what do you think?\n. yeah sorry, I meant something more along this.includes = {all: [], pre: [], post: []}\n. I'd rather prefer we use forEach and avoid switch statements for now:\njavascript\nCasper.prototype.holdOn = function holdOn(blockers) {\n    blockers = utils.isArray(blockers) ? blockers : [blockers];\n    var validBlockers = ['navigationRequested', 'loadInProgress', 'pendingWait'];\n    blockers.forEach(function(blocker) {\n        if (validBlockers.indexOf(blocker) === -1) {\n            throw new CasperError(f(\"Invalid blocking event `%s`\", blocker));\n        }\n        this[blocker] = true;\n    }.bind(this)); // note the `this` context binding\n    return this;\n}\nedit: moving the discussion into PR main thread\n. You can use Array.prototype.reduce() to achieve the same result :)\njs\n[1, 2, 3].reduce(function(a, b){ return a + b; }) // 6\n. Maybe rename frameNameOrNumber to frameInfo \n. capser, really? :)\n. actually there's casper.removeAllListeners('page.confirm') for that :)\n. Watch out the indentation\n. > there currently is no casper method for removing filters\nright, that would be some neat addition btw\n. Nice. May I suggest something like:\njs\n['change', 'input'].forEach(function(name) {\n    var event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(name, true, true);\n    field.dispatchEvent(event); \n});\n. Maybe update the jsdoc accordingly?\n. I'm more and more trying to use an object to store options, eg.:\njs\nthis.getFieldValue = function getFieldValue(inputName, options) {\n     var form = options && options.form;\n};\nThis allows a more legible use:\njs\nvar value = __utils__.getFieldValue('foo', {\n    form: __utils__.findOne('form#other')\n});\nSo we'll be able to add more options more easily in the future, eventually.\nAlso, I'm wondering if we shouldn't allow for a selector being passed to resolve the form instead of a node element:\njs\nvar value = __utils__.getFieldValue('foo', {\n    form: 'form#other'\n});\nLast, in any case we have to check for a valid <form> element being passed.\n. I can do both, though if you can take care of rebasing, it's cool :)\n. please set the capser context to ease using the condition function, eg. with condition.call(this)\n. The Tester.skip() tests should probably resides in tests/suites/tester/skip.js\n. Please watch out with indentation and coding standards :)\n. Maybe we should handle the case the step function is anonymous:\njs\nstepInfo = f(\"Step %s %d/%d\", step.name || \"anonymous\", this.step, this.steps.length),\n. Maybe this loop could be rewritten a more functional way:\njs\nreturn elems.some(function(elem) {\n    var comp = window.getComputedStyle(elem, null);\n    return comp.visibility !== 'hidden' && \n           comp.display !== 'none' && \n           elem.offsetHeight > 0 && \n           elem.offsetWidth > 0;\n});\n(untested, might need to be adapted)\n. You should probably test for settings.method before processing further\n. Instead of passing a casper arg to your fillForm function, rather .call() it:\njs\nreturn fillForm.call(this, formSelector, etc.)\nAlso, I'd prefer fillForm being part of Casper.prototype so we can use it from an instance and keep the this context.\n. A good practice is to test for a var to be an object before processing its properties:\njs\nselectorFunction = options && options.selectorFunction;\n. Same remark as above, please don't pass the instance as the first arg but rather .call() the function to set the casper scope:\njs\nselectorFunction: function (selector, form) { \u2026 }\nThen later, from a prototype method:\njs\nselectorFunction.call(this, etc.)\n. Hmm ok I see you pass the selectorFunction to the page DOM env through evaluate()\u2026 though it shouldn't work as you can't pass a complex object like a casper instance through evaluate()\u2026\n. Please take care of code indentation. Also, what does self refers to here? A casper instance won't be passed here.\n. s/consisitent/consistent\n. unnecessary whitespace\n. s/consisitent/consistent\n. please add a space after if\n. Poke.\n. [].map.call maybe\n. I think we should keep the original case here\n. tiny refactoring needed in order to have a ClientUtils#elementVisible(element) method so we can have visibility information for each node\nEdit: or maybe just update ClientUtils#visible() to accept an element as its first argument\n. I'd like the test message to be on next line\n. I'd like tests to be added for the first element as well\n. js\nattributes[attr.name] = attr.value;\n. ah. woops. it's probably safe to reuse the same pattern, so.\n. Maybe:\njs\nreturn [].some.call(this.findAll(selector), this.elementVisible);\nbut I'm not sure\n. I'd prefer if we set the page html contents again\n. Poke.\n. I'd also prefer \njs\nif ((fs.isWindows() || !env['ANSICON']) || !(styleName in styles)) {\n. Please use 4 spaces indentation, and add spaces around operand (>)\n. Indentation problem here\n. The code is getting too complex here, hence the test failure regarding jshint code cyclomatic complexity check, possibly. You need to split these logical blocks into individual functions.\n. Interesting option indeed.\n. hmm?\n. beautiful :)\n. s/call/require, and possibly a link to npm for \"nodejs modules\"\n. I'd actually show the process in reverse order; first install underscore through npm, then write a script to require and use it.\nAlso, the example script should be copyable/pasteable so people will actually see something printed to their console and believe it's actually working :)\n``` js\n// npm-underscore-test.js\nvar _ = require('underscore');\nvar casper = require('casper').create();\nvar urls = _.uniq([\n  'http://google.com/',\n  'http://yahoo.com/',\n  'http://google.com/'\n]));\ncasper.start().eachThen(urls, function() {\n  this.echo(this.getTitle());\n});\ncasper.run();\n```\nOr something approaching/less dumb, be creative :)\nLast, show the sample cli invokation, eg \n$ casperjs npm-underscore-test.js\nGoogle\nYahoo!\n. ``` js\n// npm-underscore-test.js\nvar casper = require('casper').create();\nvar _ = require('underscore');\nvar urls = _.uniq([\n  'http://google.com/',\n  'http://yahoo.com/',\n  'http://google.com/'\n]);\ncasper.start().eachThen(urls, function(res) {\n  this.thenOpen(res.data, function() {\n    this.echo(casper.getTitle());\n  });\n});\ncasper.run();\n```\n$ npm install underscore\n$ casperjs npm-underscore-test.js\nGoogle\nYahoo! France\n\nAlso, node_module must be collocated to the script, it's a big limitation\n\nNope, I won't deal with nodejs installation path on people machines\u00a0:x\n\n(is it the same for phantomjs ?)\n\nYes.\n. Sure, a notice or a warning may help us avoiding many support requests or bug reports :)\n. I'd prefer having fixed version numbering, here 1.1\n. Like PhantomJS, CasperJS allows using nodejs modules installed through npm.\n. _As an example, let's install the underscore library: <- note that in English, there's no space before punctuation :)\n. _Then, require it like you would with any other nodejs compliant module::\n. Hmm, instanceof doesn't work that way, you can't test for a class name as a string, you have o pass the actual constructor.\n. Correct planned test numbers should be 2 here\n. You can actually write:\njs\nreturn this.assert(subject instanceof constructor, message, {\n. The problem here is you will see the toString output for the passed constructor (which is a function), so you'll probably see something like {} in PhantomJS (to be verified)\n. capital F por favor Function constructor\n. Let me suggest Asserts that the provided subject has the provided constructor in its prototype hierarchy.\n. cap F for the Function type\n. I'm not sure of the className name here; why not using constructor?\n. s/able to/capable of\n\"Provides a better instanceof operator, capable of checking against the full object prototype hierarchy.\"\n. Why not using betterTypeof here?\n. Same remark as above.\n. It's possibly important to keep object != null as in MDN snippet here. Sometimes, weak equality testing is useful, especially in JavaScript. There's probably a local jshint rule to set to disable specific linting.\n. Would you mind adding a test for XMLDocument?\n. s/able to/capable of\n. please move this rule locally, eg. within the function where you want to temporarily disable it. Syntax is /*jshint eqnull:true */\n. You can get one using document.implementation.createDocument(\"<y>\", \"x\")\n. yep\n. Well I wonder why we have implemented betterTypeOf in the first place then ;)\nPlease update.\n. You have to put this one in the test, not here.\n. Please take care of the indentation\n. You may want to use Array#map instead of forEach here. Also, you can bind the context using the second argument:\njs\n[1, 2, 3].map(function(x) {console.log(this)}, 42) // 42, 42, 42\n. Just test for isArray as an array is already an object\n. maybe var paths = utils.isArray(file.path) && file.path.length > 1 ? file.path : [file.path];\n. This doesn't feel to match the jsdoc\n. You can write fn.options = fn.options || {};\n. Please keep brackets on their own lines to keep coding style consistent across the project :)\n. There's an utils.merge function we may want to use here\n. We may want to keep the old \"_step\" default name in case users were possibly relying on it (we should document this change in the next release changelog as well)\n. I could see a small helper to avoid duplication of then && then.name ? then.name : \"_reload\" here and there, eg. utils.stepName(then, \"_reload\")\n. We may want to ensure that step.options is always an object as runStep is part of the public prototype and users may be using it in ways we don't suspect\nEdit: scratch that, didn't see we use createStep above\n. There may be a new rule to enforce in jshint configuration to check for these\n. You'll have to set /* jshint eqeqeq:false */ locally here to avoid jshint to complain.\n. Use <code></code> tags for inline code citation:\nAdd ``opts.keepReferences``\u2026\n. Please take care of the indentation\n. indentation\n. I'd rather see saveType within an options object, to ease further adding of more options\n. indentation\n. unnecessary whitespace + indentation\n. indentation should be 4 spaces + please remove the comment about strict mode -> hint https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n. This is code duplication, should be moved in utils to allow reuse\n. this block and followings should be indented \n. I think saveResults() should rather accept an options object for defining the type of save\n. || undefined is unnecessary; also, you may want to try splitting this long line into several statements\n. please use camelCase, eg. jsonReporter\n. To be removed\n. To be removed\n. To be removed\n. No ;) just this commented line\n. Just install jshint & run make jshint at the root of repository\n. becomes\nMay I suggest the --direct option has been renamed to --verbose, though --direct will still works, while is to be considered deprecated\n. Could be written that way:\njs\nfunction coalesce() {\n  var value = undefined;\n  [].slice.call(arguments).some(function(x) {\n    return !!(value = x);\n  });\n  return value;\n}\n. Are you sure about this && this.name? ;)\n. Why not using coalesce here?\n. Could you please update .jshintrc to set asi to false then?\n. Why not using coalesce here?\n. Let me suggest baseFieldAssert.call(this, inputName, expected, actual, message); here (and so we can get rid of the last parameter in baseFieldAssert\n. Please put version info on top of method description (just after signature, like everywhere else in the docs). Also, please specify the beta version, here it will be 1.1-beta3.\n. Please split this line across several ones to increase legibility\n. For this method we shouldn't keep the first argument, as devs will use the XPath selector to target the element directly\n. Hmm, .. index:: adds an entry to the thesaurus; does it make really sense here?\n. Could possibly be rewritten this way:\n``` js\nif (utils.isNumber(frameInfo) && frameInfo > this.page.framesCount - 1) {\n    throw new CasperError(f('Frame number \"%d\" is out of bounds.', frameInfo));\n}\nif (this.page.framesName.indexOf(frameInfo) === -1) {\n    throw new CasperError(f('No frame named \"%s\" was found.', frameInfo));\n}\n```\n. Please add docs for this new public method\n. Or rather:\n``` js\nif (utils.isString(frameInfo) && this.page.childFramesName().indexOf(frameInfo) === -1) {\n    throw new CasperError(f('No frame named \"%s\" was found.', frameInfo));\n}\nif (utils.isNumber(frameInfo) && frameInfo > this.page.childFramesCount() - 1) {\n    throw new CasperError(f('Frame number \"%d\" is out of bounds.', frameInfo));\n}\n``\n. Please take care of indenting with 4 spaces\n. nit: unnecessary CR here\n. Maybe throw an error if type is unsupported here?\n. Please setup your editor to add an empty line at the end of a file on save\n.Object(cap O)\n. Also, maybe add a link to the selector section for describing what the selector object is\n./jshint validthis:true /. Maybe these two different tests for Phantom and Slimer should sit in their own dedicated function to ease further maintainability, what do you think?\n. Please pass themapfunction inline:paths.map(function(filePath)\u2026; also, use camel case var/method naming\n. This has nothing to do in theCasperpublic prototype; please create an anonymous function withinfillForm. Also, maybe throw an error if the provided selector type is not supported.\n.assertEvalwould work best here\n. Please remove these comments\n. One white space afterifand one before{to be added\n. Please use the modern way of passing args to theevaluatefunction as well as standard inline formatting; also, use the built-ingetTitle()` method:\njs\nCasper.prototype.waitForTitle = function(title, then, onTimeout, timeout) {\n    \"use strict\";\n    return this.waitFor(function() {\n        return this.getTitle() === title;\n    }, then, onTimeout, timeout);\n};\n. Nope, just @return :)\n. It actually returns Casper\n. Still not convinced we should leave these here\n. Now I think about it, tag = tag || \"*\" is both shorter and more idiomatic in JavaScript\n. Maybe adding a code example would help here.\n. Maybe adding a code example would help here too.\n. Maybe adding a code example would help here as well.\n. Maybe we should also test when a wait operation is timed out as well?\n. Hmm, we test for waitForTitle but call waitForLabel here\n. Please put the message in some far to avoid code duplication\n. Hmm, are you sure of this xpath selector?\n. This block could be conveniently rewritten as \njs\nfield.options[i].selected = value.indexOf(field.options[i].value) !== -1;\nOr a bit more clearly:\njs\nvar option = field.options[i];\noption.selected = value.indexOf(option.value) !== -1;\nAlso, maybe using forEach would be a bit more clean:\njs\n[].forEach.call(field.options, function(option) {\n    option.selected = value.indexOf(option.value) !== -1;\n});\n. Maybe a filter/map combination would be easier to read and maintain (at least for me ;)):\njs\nreturn [].filter.call(input.options, function(option) {\n    return !!option.selected;\n}).map(function(option) {\n    return option.value;\n});\nMatter of taste, obviously.\n. nit: missing semicolons\n. I don't see the point of having a method; testing for just if (this.options.pageSettings.javascriptEnabled) basically does the very same job.\nIf it's just matter of concision, we should rather add a get method to the options object.\n. > but this also proves to be a helper of some sort, for other functions to use in future (probably this helper method can itself be overgrown with additional logic)\nYou Ain't Gonna Need It\u2122\nSo my gut would be not to implement a new method until we really need to.\n. I'm sorry, where does that name property come from?\n. Please set the link relative to the docs.\n. nit: getArg instead\n. nit: missing CR at EOF\n. We need a test for this, add it in tests/suites/utils.js\n. nit: cliArgs\n. nit: unaryArg\n. How about moving this logic to the cli module? The code would be more lightweight, and we could add unit tests for it more easily.\n. nit: wrap statement within curly brackets\n. nit: missing CR at EOF\n. Line is too long, split\n. Chances ar high that this.textContent refers to nothing here.\n. I don't like textContent, I'd rather see description, or longdesc.\n. Nice catch :)\n. \u201cand isn't capable of using a vast majority of NodeJS modules out there. Experiment and use your best judgement.\u201d\n. Damn, seems so obvious\u2026 how could we miss that -_-\n. Sounds like so. Unfortunately I don't have a clue how to build this thing.\n. Ah, there's a compile-dotNET command in the Makefile, fortunately.\n. PhantomJS'  evaluate() accepts a string containing a function declaration as a first arg. This part of the code is to ensure we support this use case.\n. Good catch.\n. >  it's just my \"jshint\" test that forces to me that lines\nSo please remove it from this patch.\n. Also, I still don't get how is this new file related to the current patch.\n. Why would we want this file.\n. We don't want these files, please remove them from the patch.\n. This patch definitely does too much, please keep it focused on the feature you're actually trying to implement.\n. This isn't what the code does.\n. Why only a tags? What about <span onclick=\"fn()\">text</span>, <button onclick\u2026> and friends?\n. Do we need that plural form version? Sample real-world use case please.\n. How is this section related to this method?\n. What is that version number refering to?\n. Please add documentation for this.\n. Please add documentation for this.\n. docs?\n. Why did you add this? It doesn't seem to be used in this patch.\n. docs? also, we'd want tests for this.\n. jshint provides rules to alter this limit. Use these instead.\n. Nit: \".coffee\" in require.extensions\n. Nit:\njs\nvar valid = Object.keys(require.extensions).map(function(ext) {\n    return ext.replace(/^\\./, '');\n}).filter(function(ext) {\n    return ext === \"json\";\n});\n. Also, as there's a single specific test here it's probably worth moving that if statement around the casper.test call itself, as it's been done elsewhere already. Adding a comment to explain why we're excluding coffee files might be worthwhile too.\n. That's probably worth adding a line in the docs about this.\n. This can be safely removed I guess.\n. I'd rather prefer this not printed out to the console by default. Maybe add a dedicated option or command if you want to keep providing that feature.\n. How about factoring out these print/sys.exit generic calls into a exit_casper(message, status) function?\n. Nit: TimeoutError or TimeoutException\n. Nit: RetcodeError or RetcodeException\n. I remember of performance issues using subprocess.Popen instead of os.execvp; what's the reasoning behind this change?\nEdit: Bah, using threads we're probably safe. This is beyond my knowledge and proper understanding of all this anyway :) Though that's be probably useful to have some benchmarks to ensure there's no significant perf regression here.\nEdit2: Now I had a third mug of coffee, I realize we're in the test runner. Scratch all my previous crap.\n. All this can probably be refactored using a map, eg. {json: {type: \"application/json\", binMode: false}, etc...}\n. Ouch. I'm surprised this ever worked :(\n. I wonder if we couldn't have some skipTestIfEngine(test, engine, version, msg) reusable helper to avoid duplicating code for these. \nEdit: I see we already have skipPhantom200, it's really worth having a single reusable helper I guess.\n. Nit: A link to the slimerjs issue here would be neat.\n. See my previous comment for a more generic test skip helper.\n. Out of curiosity, why is this needed? adding a comment might be helpful.\n. Really, we should factorize these out, as I suggested above. \n. Nit: code formatting.\n. \".coffee\" in require.extensions\n. Not much, it's just more concise.\n. This last sentence - which I wholeheartedly agree with - is probably unnecessary.\n. We should probably drop this. Never had feedback at all in two years, neither from the platform not users.\n. It's mostly that this specific one hasn't got in touch for over two years now. Feels a little odd. Your call.\n. ",
    "nautilebleu": "Yep, that's exactly what I was looking for! My solution was just a poor version of yours (especially as it allows to customize the behavior on timeout instead of relying on the generic onDie behavior.) \n. Thanks! You will probably think I abuse but it'd be great to also have the location passed to the callback like this:\nif (isType(self.options.onTimeout, \"function\")) {\n    self.options.onTimeout(self, location);\n}\n. Ok I'll do this way but in my fork I've simply add the location and it works (or seems to, in my use case.)\n. Yes I understand. The problem also occurs if the location has done a redirection that doesn't respond. \n. ",
    "mren": "how can i use this?\ni tried\n``` coffeescript\ncasper.then -> @fill 'form', {\n    'foo[]': true\n}\nand\ncasper.then -> @fill 'form', {\n    'foo[]': [true, true, true]\n}\n```\nbut without success.\ni couldn't find this in the documentation, either.\ncheers mark\n. i know this pull request is a year old and casper changed a lot during this time.\nis this feature still available or do I need to use a workaround for this?\nmy method to check just one checkbox is\ncoffeescript\ncasper.then ->\n    document.querySelector('input[name=\"foo[]\"]').setAttribute('checked', true)\nbut my tests with querySelectorAll and forEach did not work out.\n. thanks for your help,\ni also found out that you can use jquery in thenEvaluate\ncoffeescript\ncasper.thenEvaluate -> $('input[name=\"foo[]\"]').prop('checked', true)\nworks great and is readable\ncheers :)\n. ",
    "naltatis": "I'll have a look at this ...\n. I changed the ways waits behaves. I just pushed a version that fixes your test. I've also committed another test that contains nested waits. This test currently doesn't pass completely, but I'm working on it :)\n. All tests are running again. I've changed way steps that are dynamically created at runtime are handled.\nNow these steps are inserted before the next step and not at the end of the queue. \n. Thanks! Looking forward to the modularized casper.\n. ",
    "muhammadshahbazc": "can we use waitForSelector in tester module ??? it giving this error.\n```\nFAIL Wait timeout occured (5000ms)\ntype: uncaughtError\nfile: testfinal.js:231\nerror: Wait timeout occured (5000ms)\nTimedOutError: Wait timeout occured (5000ms)\nat test_onWaitTimeout (C:/casperjs/modules/tester.js:231)\nat _check (C:/casperjs/modules/casper.js:2029)\nstack: not provided\n```\n. ",
    "marchugon": "Like it, thanks\nIt's been helpful for me (not being sure if something was loading before having the error message from phantom)\n. ",
    "jasonlfunk": "Sorry that the indenting is messed up. :(\n. That should do it. Thanks for considering merging. I have found it a needed feature in order to do what I need to do with Casper. \n. ",
    "mpeltonen": "Ok, thanks!\n. ",
    "cwinters": "Sorry for the extra spacing, still getting the hang of clean pull requests!\n. That's great, I look forward to seeing it.\nIt's weird none of the tests were passing. Were there assumptions baked in about the root directory or something? I figured it was a decent exercise to use the module to read the tests from casper's test directory and validate that all parent files were returned (and sorted) before any child file.\n. ",
    "magopian": "failed the Markdown format... will start over, just forget this one\n. How can I do that? It's not the docs that I modified, it's the README.md. You can have a look at the result on my fork:\nhttps://github.com/magopian/casperjs/tree/gh-pages#readme\n. I don't think it's possible to have just one PR with a commit from master and one from a submodule, that's why there's two commits (this one for casperjs, and #71 for the docs submodule).\nTo have a look at the resulting README.md, check my fork https://github.com/magopian/casperjs#readme\n. ",
    "emarthinsen": "My pleasure\n. ",
    "nrabinowitz": "Sure, but see my earlier email to the list - I have a Windows machine, and the way the tests are currently set up, none of the paths work for Windows, so I haven't been able to successfully run the tests. I'll see if there's a reasonable way to get is running on my machine, and then I'm happy to write tests. \n. Okay, I got the tests running (for some reason, probably due to Window's forward slashes, the file:// urls weren't working). And it looks like this set of changes introduced some issues in the .click() edge cases - so please hold off on the pull, and I will fix and add some commits and tests.\n. OK, I fixed the issue and added some unit tests. I can add documentation too, but I won't be able to do it right away. There's a slight issue here, noted in the tests, that there's a mismatch between the mouse event types you can dispatch synthetically on the client and the PhantomJS-supported events. I added a PhantomJS feature request to support this, but as it stands, if you send a mouseover or mouseout event and it fails (or preventDefault() is called), there's no native fallback. I put a comment to this effect in my tests.\nI'm also seeing failing tests on the formfill.js suite, because this.click('input[type=\"submit\"]'); isn't working. This test suite fails for me on the master branch as well, though, so if it's a problem I don't think it's one I caused.\n. Should still be valid. The mismatch between synthetic events and PhantomJS events is unavoidable until they update PhantomJS, but at least adding the synthetic events gives a wider range of testing possibilities.\nAs I noted, I'm not sure whether the error in the unit tests is due to anything in my commits. So if the tests run green for you, this should be good to pull.\n. ",
    "jart": "Thank you for making this lovely project\n. ",
    "brikou": "@n1k0 ok I've moved var declaration to the top of scripts, I think my PR is now mergeable, what do you think of it ;)\n. ping @n1k0 \n. ok @n1k0 I'll revise this PR tomorrow :) cheer\n. Sorry, I won't have time before next week... Because of mu work and\nmother's day... Cheer\n. @n1k0 mother's day is over ;) ... can yoiu check my latest changes and accept this PR ;)\n. @n1k0 I don't hate you (for now ;) ) I think now it is mergeable (hope so)\ncheer buddy\n. Tu es le bienvenue :)\n. @n1k0 removed because not part of *.coffee and not used because init to default value\nupTo = ~~casper.cli.get(0) || 10  # max 10 links\n. this is just the way coffeescript convert js to be sure that type is string, of course I can remove first quote if you want\n. ok, I've changed\nvar wathever = function() {\nto \nvar wathever = function wathever() {\nhere and everywhere too\n. ok i've removed this everywhere... ;)\n. ok now it is done\n. ok so as the coffescript converter natural behaviour... I'll try to do it\n. @n1k0 done\n. ",
    "nh2": "Yes, with this change, it is working and solves #154, it didn't work before. event is undefined at that place.\n. ",
    "clochix": "Here are some tests, but, in fact initKeyboardEvent seems buggy in Webkit. My patch works for me but may fail for other use cases, so I don't know if pulling this is a good idea.\n. Yep, this was enough for my needs but seems really buggy. It triggers the event listeners, but with lots of side effects. I have no time to look deeper, so I will keep the patch as a local extends in my tests files.\nFor the record, here's a related Webkit bug\u00a0: https://bugs.webkit.org/show_bug.cgi?id=16735\n. Any news on this\u00a0?\n. Sorry, cut and paste between two computers just before pushing as killed me :(\n. ",
    "alekseykulikov": "How is this feature going? I'm looking forward to handle keyboard events with casperJS. \n. @n1k0 you rock, thanks!\n. Hey! :+1: \nNo need to do something special and release to npm, in order to get casper in node. With this pull request we can do:\n\"casperjs\": \"git://github.com/n1k0/casperjs\",\nand use casperjs right now. Current package.json is simply broken, and this 2 lines will help. Looking forward to have this merge.\n. Thank you @n1k0 !!\nIt was so fast!\n. ",
    "mosch": "I think https://github.com/ariya/phantomjs/pull/290 is merged. \nHow is this feature going?\n. ",
    "ysangkok": "I can't find the commit adding support for this, @n1k0 . I'd appreciate a link. Thanks in advance.\n. @n1k0 : Is there going to be Casper.js usage of this too? For example, fill() is not triggering onkeyup AFAIK. Will there be an option to use events to enter the data instead? Thanks.\n. ",
    "mpalmerlee": "I don't see the keyboardEvent method in RC4 of casper.  I see it has been merged to master though. When can we expect to see this in a release?\n. ",
    "johan": "Just an update for others trying to look up phantomjs native keyboard events: <-- it's here now.\n. Sorry; I migrated all my tests to testium and stopped using casperjs \u2013\u00a0I'll close this issue.\n. ",
    "serkanserttop": "I figured out how to turn this into a module, I will re-submit when I convert the code. I will keep the pull request here meanwhile in case if it is useful to anyone.\n. I took out the creator script, I thought it may cause unnecessary load on your servers.\nAs a result of modularization, the example became a lot shorter and clear.\n. ",
    "andrewdeandrade": "I added the tests to open.js, but feel free to move them to thenopen.js.\nPS, I only ran tests for open.js and not the entire test suite because when I did so after a fresh pull from the master branch, 367 passed and 66 failed. I saw that the entire test suite is passing per travis.ci. Any idea why so many would be failing in my environment?\nHere's a gist of the failing tests:\nhttps://gist.github.com/3063591\n. Sorry, I'm an idiot. I just saw that I accidentally deleted text from another file. Going to close this pull request, fix what I messed up and resubmit it.\n. No prob. Thank you for casper.js. It's been super useful.\nI did get thenOpen to work for posting the results of a test back to my node server, so I reckon that together with the built-in web server in phantomjs we now have full two way communication that isn't dependent on stdio. \nIt'd be nice if we could get access to get qt's require() method to fallback to npm() when it cannot find the built in ones that phantom comes with.\nit should look first for a qt require, then fallback to npm, then fallback to ./node_modules then fallback to a relative path string (e.g. require('../lib/underscore.js');)\n. ",
    "oncletom": "Yay, it would be even easier. And shorter to write. And less ambiguous than retrieving casper.currentResponse.\n. Okay, pushed a cleaner API and case-insensitive retrieval.\n. Yep indeed. I may do that in another PR, especially as I've not digged too much in steps and it seems there are some subtle stuff with history etc.\n. Finally put the response in the step.\nAs expected, browsing back and forward does not match with currentResponse values.\nIt would imply to save the whole response state (status etc.)\n. Do you need anything more for this PR?\n. As soon as it's pushed into the npm registry it will be possible to do a npm install -g casperjs and use it globally as a binary.\n. British summer or French summer?\n. npm publish --tag beta\nnpm publish is assuming npm publish --tag latest (and npm install casperjs as npm install casperjs@latest).\nJust learned that thanks to your question :-)\n. What npm publish does is when you do npm publish [--tag latest], it links the version described in the package.json with the latest + <pkg.version> tag. It's not relying on the Git tag at all. Except if you install the module over the git protocol (like git install https://github.com/n1k0/casperjs.git@1.1.0-DEV) \n. Backward compatibility unless you release it as a 2.0.0 branch and drop the support of Phantom 1 as well.\n. Yes, I thought about it. I just wanted to have a first valid draft before doing that.\n. Because some stops the loop on the first true value returned during iterations.\nBut I forgot the return true 2 lines below :-D\nThe advantage is to stop the loop as soon as the header is found.\n. Yep why not. I don't know your plans for this module, as request headers are just a plain object.\n. ",
    "donl": "How do you access the response headers with the latest pull request?\n. ",
    "starlocke": "Oh. Amended my email address + force-pushed my branch... Seems like github understood it and I didn't need to re-create the pull request. Please pull 26a85b0 for the right history. Next time I'll know that I won't have to write an issue before making the patch :)\n. Here are my minimum tester files (3 items):\nsleepy_page.html\nNOTE -- depending on your environment, you might need to tweak the sleep time in order for premature_execution.js to actually produce the badly timed execution.\nhtml\n<!DOCTYPE HTML>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <title>Sleepy Page</title>\n        <script type=\"text/javascript\">\n          function sleep(milliseconds) {\n            var start = new Date().getTime();\n            while ((new Date().getTime() - start) < milliseconds){\n              // Do nothing\n            }\n          }\n        </script>\n    </head>\n    <body>\n      <form method=\"get\">\n        <input type=\"text\" name=\"hello\" />\n        <input type=\"submit\" id=\"my_form_submit\" onclick=\"sleep(250); return true;\"/>\n      </form>\n    </body>\n</html>\npremature_execution.js\nNOTE -- fill-out casper.start() with a better URL\njavascript\nvar casper = require('casper').create({\n  viewportSize: {width: 1280, height: 768}\n  //, verbose: true\n  , logLevel: 'debug'\n});\ncasper.start('http://www.example.com/sleepy_page.html');\ncasper.then(function (){\n  this.test.info('home');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'world'\n  }, false);\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=world');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'foobar'\n  }, false);\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=foobar');\n  this.test.info(this.getCurrentUrl() + '\\n');\n});\ncasper.run();\nimproved_step_by_step.js\nNOTE -- fill-out casper.start() with a better URL\njavascript\nvar casper = require('casper').create({\n  viewportSize: {width: 1280, height: 768}\n  //, verbose: true\n  , logLevel: 'debug'\n});\ncasper.start('http://www.example.com/sleepy_page.html');\ncasper.then(function (){\n  this.test.info('home');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'world'\n  }, false);\n  this.click('#my_form_submit', 'loadInProgress');\n});\ncasper.then(function (){\n  this.test.info('should be hello=world');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'foobar'\n  }, false);\n  this.click('#my_form_submit', ['loadInProgress', 'navigationRequested']);\n});\ncasper.then(function (){\n  this.test.info('should be hello=foobar');\n  this.test.info(this.getCurrentUrl() + '\\n');\n});\ncasper.run();\n. Oh, yeah! I'd like to implement the \"pass an object\" way of doing this.\nMeanwhile, I notice you used the term \"blockEvents\" instead of \"blockStep\" -- why a more general term?  I was specifically aiming at steps... rather than more general events that are all over the place.\nAlso, what does \"BC\" mean?\nFinally... I wonder how I can \"update\" a pull request to reference a different commit.\n. Hm... Maybe something involving \"hint\" (too vague by itself). How about \"expect\" (too vague)? \"waitOn\"? \"waitFor\"? \"flagUp\"? \"holdOn\"? \"holdFor\"? \"holdUp\" (oh! we're robbing stuff now!)?\nI'm leaning towards \"holdOn\" since it's the shortest between \"holdOn / holdFor\", and it avoids getting confused with the \"wait-family\" methods.\nOr... would you want to just stick to \"blockStep\"?\nPS: Totally agree on using topic branches, for instance, this is getting worked on in the blockable_clicks branch :)\n. Refactored. We now two flavours of setting the click options available:\nI prefer the simplified version, as it doesn't introduce new names and doesn't even require the holdOn() method anymore, previously called blockStep().  It may even be a good idea to remove holdOn() and the associated elaborate version... since I didn't feel great using those string options to begin with.\njavascript\n// An elaborate version\ncasper.click('#foo a.bar', {holdOn: [\"loadInProgress\", \"navigationRequested\"]});\n// A simplified version\ncasper.click('#foo a.bar', {loadInProgress:true, navigationRequested:true});\nI also thought that maybe we'd prefer having something like this, if we keep the holdOn option:\njavascript\ncasper.click('#foo a.bar',\n    {holdOn: {loadInProgress:true, navigationRequested:true}}\n);\nOf course, keeping holdOn as a separate method seems counter to the \"don't repeat yourself\" principle.\nThoughts?\n. Absolutely not.  They must not be global options that are set at the start.  Here's why:\nIt is a very likely scenario that one test script will click many elements on a page, for many different reasons that do not involve \"navigation\" or \"loading\".  An couple of easy examples would be: click on the radio button to select a different option; click on the tab to show a new tab (think: jQuery tabs).\n[I changed my mind in the next comment... entertaining the idea that it might be nice to have a global CasperJS default behaviour set in place].\nOptions:\n- Use \"human intelligence\" to give CasperJS testing scripts the necessary hints indicating certain click actions as \"load\" and/or \"navigation\", thus minimizing the changes needed to our precious HTML pages.\n  - Augment click() -- its current behaviour is actually broken and unexpected.\n  - Introduce a new kind of click(), perhaps called follow() for navigationRequred blocking, and fetch() for loadInProgress blocking.\n- Use \"human intelligence\" to give clickable elements class attributes navigationRequred or loadInProgress, such that CasperJS's click() will analyze the selected element, and raise a step-blocking flag; this kind of hinting should be discouraged, in my opinion.  It seems pretty counter-productive to go through every single clickable element in my website, tagging them specifically for CasperJS's testing.\n- Give CasperJS gains a hardcore parser that fully analyzes (a) basic html hints that indicate load/navigation (b) all add-on script and systems [javascript, java, activeX, etc] that may override basic html hints -- in order to have a smarter version of click() that will automatically know whether or not it should raise a step-blocking flag.\nSo far, we covered the first option using the \"augment click()\" sub-option.\n. Basically, for each click action, someone needs to make a judgement call on whether or not the next step should be blocked.\njavascript\ncasper.then(function (){\n   // casper needs to know whether or not to block the next step\n   this.click('#something');\n   // this is one way of doing it.\n   this.holdOn('navigationRequested');\n});\ncasper.then(function (){\n  // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\njavascript\ncasper.then(function (){\n   // giving the hint before clicking is fine, too\n   this.holdOn('navigationRequested');\n   // casper needs to know whether or not to block the next step\n   this.click('#something');\n});\ncasper.then(function (){\n   // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\njavascript\ncasper.then(function (){\n   // this is easiest to read and write.\n   // worst-case: go read the documentation that talks about \"click options\"\n   this.click('#something', {navigationRequested: true});\n});\ncasper.then(function (){\n   // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\nLet's see... How about I entertain the idea of \"global setting\"?  Let's say it's a good idea to always block clicks() as if they were always going to navigate to another page.  In that case, we would want the following to be possible:\njavascript\nvar casper = require('casper').create({\n    holdOn: {\n        navigationRequested: true,\n        pendingWait: false,\n        loadInProgress: true\n    }\n});\ncasper.start(...); // load something sensible\ncasper.then(function (){\n   this.click('#something', {navigationRequested: false});\n   this. waitUntilVisible('#awesome');\n});\ncasper.then(function (){\n   // we're waiting on an invisible item to turn visible\n   this.test.assert( ... );\n});\nAnd... we absolutely won't be able to use a simple array of strings.  It would always have to be a \"block-flag-name: true|false\" collection of object-properties.\n. I noticed that casper.open() also stands to benefit from having a navigationRequested hint.  Any ideas whether or not it should be permanently built-in, or if it should be optional, like what we're going for with casper.click()?  I ask this because while most web URLs are HTML pages, there exists those which are resources like binary files (PDFs, for example)...\nCurrently investigating... (starts pondering test scripts to provide groundwork hypotheses)\n. Uhh.... on my side it's \"on ice\" -- I was planning on simply pushing out\nthe following features for it...\n- \"by default\"\n- \"by config option array-thing\"\n- \"by config before calling the function(s) -- a natural extension of by\n  default\"\nI just haven't had time to commit to bashing out that code... are we\nitching to get this feature integrated real soon?  I could get motivated to\ndo so, if you ask for it to be pushed up in my scheduling.\n// Victor\n. @danielnitsche Well, in my opinion, we're faced with a bug that should permanently be fixed.  However, it's plausible that others have already \"worked around\" this bug, and would prefer \"old school / buggy\" style, maybe even to the point of requiring the buggy style by default.  Also consider that my solution is effectively a new functionality, so it's probably best to segregate it into its own function and add a few calls to it, as needed.  Make sense so far?\nThe next aspect that's curious to me is that I didn't include the option to block on a mere \"wait\", probably because it only matters that we block when a load is initiated.\n. Nothing officially merge-worthy, but, the old patch / concepts can be used\nas-is with a private merge/patch/rebase operation -- unless casperjs has\ndiverged THAT much since I last saw it.\nThere's an infinitely small amount of interest to hash out further\ndevelopment~  The main issue is in the debate about what style of\nimplementation to follow.  Unclear.  I was probably gonna go for \"why not\nboth?\" (options array/object + default configs available).\n// Victor, the time-constraint\nOn Tue, Jun 4, 2013 at 8:58 PM, Pavel Puchkin notifications@github.comwrote:\n\nAny news on this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18949379\n.\n. There exists occasions where \"if the flag was not raised, then, depending\non random execution ordering decided by the JavaScript or browser or\nprocessor, there is a chance that program execution will misbehave\". (ie:\nthe next assertions randomly pass/fail - making unreliable automated test\nscripts). Even if you tried adding tons of \"wait\" time, there is still a\nchance to fail in making the correct assertion. It's bad on two levels:\nartificial wait time slows down time-to-results, and, random pass/fails\nmeans you couldn't rely on the automated testing for test-driven\ndevelopment.\n\nCommonly, it's a problem that occurs when \"clicking causes something like\nan Ajax request\"; the order of operations is messed up... like the async\nnature of Ajax tends to wreck havoc... that has been my observation so far.\n(I thought I already mentioned all this once before...)\n\nSo, in order to fix this : we have to think \"backwards compatible old/buggy\noption\" + \"improved default wait flag raising\" + \"documentation\".\n// Victor, via phone\nOn Jun 5, 2013 1:56 AM, \"bjabes\" notifications@github.com wrote:\n\nI've been setting the flag after the call to click/fill, I don't think it\nmakes a difference but is there a race condition possible?\nOn Tue, Jun 4, 2013 at 9:32 PM, Pavel Puchkin notifications@github.comwrote:\n\nOk. Currently I use raising loadInProgress flag before calling click,\nfillwith submit and other as a workaround.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18955081>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18956980\n.\n. This pull request is currently in limbo, but, you're welcome to either take up the where I left off, getting it up to date with the latest CasperJS, or, simply replicate the little changes that I was trying to introduce.\n\nWhy is it in limbo? It's because I haven't yet continued tweaking the \"parameterization / configuration\" aspects to a form that respects @n1k0's liking. Why I haven't I done so yet? That's because I haven't been actively using CasperJS since I initial discovered and reported this; and thus, motivation to continue improving and fixing this has dropped to near-zero levels.\nSomething like a workaround hint can be found here, it addresses CasperJS 1.0.0-RC4, but, if you can confirm whether or not my observations still apply in CasperJS 1.1 and/or the latest versions, that would probably be helpful for the world -- http://stackoverflow.com/q/11604611/508823.\n\nAs of CasperJS 1.0.0-RC4, a flaw exists, where, under certain time-based\ncircumstances, the \"try to do next step\" method will be triggered before\nCasperJS had the time to raise either one of the loadInProgress or\nnavigationRequested flags. The solution is to raise one of those flags before\nleaving any step where those flags are expected to be raised\n(ie: casper.click()).\n. Hello @brettjonesdev this is indeed in limbo right now owing to my lack of time working with CasperJS. You mentioned \"littering your code with wait()\"? Have you tried littering your code with my proposed workaround, though -- namely... \"[...] a developer would typically be better just directly setting Casper.navigationRequested, or Casper.loadInProgress, or Casper.pendingWait.\"?\n\nTypical use case: Set one of those flags to \"true\" before doing a click(), or clickLabel(), or any other navigation or AJAX-ish thing - pick the one whose name sounds the most like what you're doing. You can dig into the Casper source code to choose the most appropriate one.\nI used to try using wait(), but that is not at all the correct workaround due to the real nature of the \"then()\" function as explained in the StackOverflow Q&A -- thus inducing me to dig deep, figure it out, and finally to produce this pull request.\n. This pull request is simply a convenience that improves the API.  The baseline workaround can still be invoked without this pull request ever going into production -- just set \"true\" to one of the appropriate CasperJS flags: Casper.navigationRequested, or Casper.loadInProgress, or Casper.pendingWait\n. @brettjonesdev - A minimal change is to simply raise the appropriate flag(s) before your calling click(). My test case code first raised loadInProgress alone, then it raised that plus navigationRequest. One or the other is sufficient, if memory serves me right. If you're going to do a JavaScript asynchronous effect, then, maybe you'll be raising the flag for pendingWait just before calling some kind of wait() method.\nI added \"FLAG\" as a comment to mark manually raised flags. Raising flags is exactly what this pull request fulfills as a utility function.\nJavaScript\nvar casper = require('casper').create({\n  viewportSize: {width: 1280, height: 768}\n  //, verbose: true\n  , logLevel: 'debug'\n});\ncasper.start('http://www.example.com/sleepy_page.html');\ncasper.then(function (){\n  this.test.info('home');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'world'\n  }, false);\n  this.loadInProgress = true; // FLAG ONE -- equivalent to doing Casper.blockStep(), or using an augmented click() [neither of those yet implemented officially]\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=world');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'foobar'\n  }, false);\n  this.loadInProgress = true; // FLAG ONE -- equivalent to doing Casper.blockStep(), or using an augmented click() [neither of those yet implemented officially]\n  this.navigationRequest = true; // FLAG ANOTHER -- equivalent to doing Casper.blockStep(), or using an augmented click() [neither of those yet implemented officially]\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=foobar');\n  this.test.info(this.getCurrentUrl() + '\\n');\n});\ncasper.run();\n. Woah there.  As cool as French is, think about the contributors who don't know French, and barely understand English!  Let's stick to English, please.  Also, the \"emoji\" only works on github.  It appears as a blank box within e-mails.\n. ",
    "andrewchilds": "@n1k0 Good points, will do.\n. code updated! :+1: :-1: :question:\n. @twinturbo: you can already use assertTextExists if you don't care about the selector: http://casperjs.org/api.html#tester.assertTextExists\n. ",
    "ahawkins": "+1 for assert Text. Can you add one that's simply \"Assert Text?\" Sometimes you don't care about the selector.\n. ",
    "travisbot": "This pull request passes (merged dbb3dc02 into 5ed461e8).\n. This pull request fails (merged f75cabbd into 5ed461e8).\n. This pull request passes (merged 24e0708b into 5ed461e8).\n. This pull request fails (merged 9211f91f into 5ed461e8).\n. This pull request passes (merged d6c11e45 into 5ed461e8).\n. This pull request passes (merged 52e6132d into 5ed461e8).\n. ",
    "kevinold": "+1 for this functionality.\n. ",
    "AndiDog": "I can confirm this is working, should be better than my simple script because it also handles phantomjs arguments. @n1k0: Please pull this one, I will close my request.\n. ",
    "Reinboom": "Phantomjs installation additions\n- Windows users: Append \";C:\\phantomjs\" to your PATH environment variable. Modify this path appropriately if you installed PhantomJS to a different location.\nCasperjs installation additions\n- Windows users: Append \";C:\\casperjs\\batchbin\" to your PATH environment variable. Modify this path appropriately if you installed CasperJS to a different location.\n. ",
    "danielnitsche": "Would it be better to move this functionality into waitFor? I'm just trying to understand the advantages of this approach.\n. ",
    "neoascetic": "Any news on this?\n. Ok. Currently I use raising loadInProgress flag before calling click, fill with submit and other as a workaround.\n. ",
    "bjabes": "I've been setting the flag after the call to click/fill, I don't think it\nmakes a difference but is there a race condition possible?\nOn Tue, Jun 4, 2013 at 9:32 PM, Pavel Puchkin notifications@github.comwrote:\n\nOk. Currently I use raising loadInProgress flag before calling click, fillwith submit and other as a workaround.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18955081\n.\n. \n",
    "statico": "(FWIW, I discovered this pull request after trying to figure out why my CasperJS tests were failing on CircleCI but passing locally. CircleCI's VMs are slower, but putting in a casper.wait() didn't seem right, of course. After seeing this PR I have inserted casper. loadInProgress = true after all my casper.click()s and everything works fine on CircleCI. I support this change as it would be a more compact syntax for what I've done.)\n. ",
    "brice": "Hi,\nI have issue with casper 1.1 when i click to submit a form. So what's the correct workaround and what the current status of this issue?\n. ",
    "brettjonesdev": "Hey folks, so is this still just in limbo?  I've run into these issues and spent a lot of time pulling my hair out over the non-deterministic failures I bump into when testing an Ajax-heavy application.  \nI have for a long time littered my tests with casper.wait() calls, opting more recently for casper.waitUntilVisible where possible, but even now I still get random errors.\nIs the hangup here just that we can't decide on a style for the feature @starlocke has proposed?  I'm a big fan of the tool and hope to use it for a long time to come, but having random failures like I am right now is a real productivity killer and prevents me from integrating my test suite into our CI setup.  \nIs there at least a definitive workaround for now?\n. Thanks a lot, @starlocke!   I'll give that a shot for sure.  It would be nice if the Casper docs mentioned this issue somewhere, explaining the need to tell Casper that a click triggers asynchronous events and explaining how flags ought to be used.  I couldn't find documentation for those flags anywhere in the docs.  \nI'll give your suggestion with the flags a shot, but if this really is the only way to avoid this behavior, that's something that really ought to be documented at the least.  Eh, @n1k0 ?\n. I'd be happy to help document this, but I'm pretty ignorant of how these flags work right now, so let me make sure I understand how to use them if you don't mind.  \nLet's say I have something like the following, a link click which triggers an Ajax call (say) and then causes an element to show:\njavascript\ncasper.click(\"#loadModal\");\n// casper.loadInProgress = true ???\ncasper.waitUntilVisible(\"#modal\");\ncasper.then(function() {\n   console.log(\"Modal visible\");\n})\nDoes it matter which of the 3 flags I set?  Also, if I set one of those flags after a click which does NOT result in asynchronous DOM changes in the browser, will that mess things up?  I'm thinking of writing a wrapper for click() in my utils class which will always just set one of those flags, wondering what the consequences of that approach would be.\n. Thanks, guys.  Interestingly, I haven't seen this kind of issue crop up again in several days and dozens of test runs... Once it starts to bite me again I'll try your suggestion with raising flags.  \nThe only question I had about that, though, was if I set loadInProgress (say), won't that flag stay set indefinitely, potentially causing problems?  I.e. wouldn't I need to set it to false in my .then() callback?  \nI.e. something like this:\ncasper.loadInProgress = true;\ncasper.click('#button');\ncasper.then(function() {\n   casper.loadInProgress = false;\n   //do something\n});\nDoes that make sense?  I'm just wondering if that flag would stay set indefinitely, which might not be a good thing, eh?\n. ",
    "BIGjuevos": "Do we want to keep this issue in the 1.1 release @istr @mickaelandrieu? I vote to move to a new milestone 1.2.\nI feel like this would be good for a 1.2 considering our focus on squashing bugs for 1.1.\n. Do we want to keep this issue in the 1.1 release @istr @mickaelandrieu? I vote to move to a new milestone 1.2.\nI feel like this would be good for a 1.2 considering our focus on squashing bugs for 1.1.  This is something I'd be happy to pick up in the future.  Feel free to assign to me.\n. @istr @paazmaya I've got this rebase on top of current master at: #1507\n. I'm OK to merge this.  We just need to get the conflicts resolved.\n. Agreed, self assigned unless @mickaelandrieu wants it.\n. Do we want to keep this issue in the 1.1 release @istr @mickaelandrieu? I vote to move to a new milestone 1.2.\nI feel like this would be good for a 1.2 considering our focus on squashing bugs for 1.1.  This is something I'd be happy to pick up in the future.  Feel free to assign to me.\n. @mickaelandrieu @istr Is this clear to be merged in?\n. I like this.  Thanks for solving the problem @jefleponot :+1: \n. Looks good to me.  Thanks for the addition @jefleponot \n. @mickaelandrieu @istr - This looks good to pull in to me.\n. I concur with @n1k0.  As long as we annotate it in the docs.\n. I tested this in phantomjs 1.9.18 and phantomjs 2.1.1.\n. First CI build succeeded, 2nd one failed after fixing a typo in the comments.  The build hung.  It can safely be ignored.\n. @mickaelandrieu squashed.  Sorry about that.\n. No objections to the code overall, just some minor style updates and it get's my :+1:\nThanks for your hard work @mepard \n. CI build due to S3 being silly.\nI'm giving this a :+1: and pinging @istr and @mickaelandrieu for their input\n. I've commented about coffeescript support with #1510.\nI think we can merge just this in now as it is just updating the URL.\n. CI Errors are amazon S3 issuing 403s.\n. @istr Job passed this time.\nYeah, I say we file this against Travis CI.\n. @istr, Out of curiosity, can we just \"host our own copy\" through a github branch that is just used to hold on to the gzip files?  Just pull them down raw rather than have to rely on someone's S3 account>\n. @istr @mickaelandrieu Anything you guys need form me in order to get this merged.  Really want to help you get this 1.1 stable out into the world.\n. @istr I have no problem doing so.  I'll get it setup and update this thread.\n. @istr - before I pull in the builds, would something like: https://github.com/BIGjuevos/phantomjs-builds/releases work?  I'd do one for slimerjs as well.  I'm doing it as releases rather than just raw because of the GitHub release policy.\n. 1.9.7 (the first one from bitbucket has been put into a release at.  the targz file direct link\n. @istr - Should I put up a PR with the travis yml changes as well to test?\n. I have a fix for the issue in PR already: #1506 \n. CI build is common failure.\n:+1: \nLooks good to me @istr \n. @istr @mickaelandrieu Builds are now pulling from a github release.  Also updated travis config to support both bz2 and gz compress tar files for future use.\n. @istr any objections to merging this?  I think this should go in before anything else so we can stabilize the builds.\n. Is it worth putting this as a sub section under the FAQ docs?  Or just converting this into FAQ style questions?\nThough, putting it under FAQ feels like shoving a square peg into a round hole to me. \n. QuickStart or Installation?\n. @mickaelandrieu After looking in the docs, I decided to update it in quick start as well as introduction.  Since I think both are valid points of entry and one or the other may be skipped.\n. :+1:\n. Looks good. You beat me to the punch on this. Was planning on doing so next week. \n. Ok. I'll finish it up once he approves. \n. We do have 4 open issues in the milestone.  I'll bump to 1.1 and move the remaining issues out to 1.2.\nAny objections for me to add myself to the team list on the homepage while doing this as well?\n. We can un-publish the release.  This is git, everything is reversible.  \nIf we are going to stick with -beta6, did we want to bring in the issue to fix the windows regression?\n. @n1k0 - Same username as here on GitHub: BIGjuevos\n. @n1k0 - thanks!  It looks like we can publish specific versions straight from the admin panel.\nAm I all clear to move the remaining issues out of the 1.1 milestone?\n. > It seems that we\n\njust need to tag the \"latest\" version appropriately so it is rebuilt automatically\nthe other versions to be published need to be selected manually from the admin panel\n\nLooks like that has already been done looking at the panel.\n\n\nAm I all clear to move the remaining issues out of the 1.1 milestone?\n\nYes, the vote was clear. :-)\n\nWanted to make sure we weren't duplicating work and stepping on each others feet. :)  Things have been happening in parallel.\n. > You have all my trust to make the release. Just ping me when you want to migrate everything to the org, which was the initial plan IIRC.\nIs after this release a good time to do the migration?  I volunteer to help out with the required changes.\n. It's a matter of un-ticking a box in the release.  @istr volunteered to mash the buttons after it was merged.\n. Is it the combination of the non-english and english characters adjacent to each other?\nIt could also be a false positive if you copy-pasted from github into the test and the CSV from the same source rather than natively generating the characters from within code.  Character encoding is strange in my experience, and tends to behave when copy pasting.\n. > I did :p any idea on how I can generate this kind of characters within code ?\nOn mac, go into keyboard preferences and add another keyboard layout that is a troublesome layout, and mash some keys to get it directly inputted.\n. Looks good. Merging.\n. Looks perfect to me.  I'll merge once all checks pass.\n. I like it.  Merging.\n. Is it worth copy-pasting the coffee-script.js?\nCan we not include this as a npm dependency?\n. Unless @jefleponot wants to, I'll put together a PR for the cookbook.\n. Yeah. I'll add a check. \n. Looks perfectly valid to me. :+1:\n. @istr I've wondered about the four eyes principle.  Does that include or exclude the original author of the code?\nAlso, merging this.\n. Closing at the request of @jefleponot \n. @istr, that't funny.  I had the exact same opposite thought.  \"Why copy paste it when we have a link to a really nice gist with comments.\"\nI'll pull it in as well, and reference the gist since it has lots of comments.\n. @istr - Updated.\n. > Hi, it's nice ! I don't like green but It's totaly personal ahaha ^^\nTotally understand.  I tried to find the least offensive green possible.  My thoughts were, everything else is blue (we don't need another blue thing), red makes people angry, and when tests pass they are green.\nSo I went with it.  Seems to work out.\n\nMaybe, instead of the large twitter button:\n\nThe space felt like it was missing something, so I put the twitter button there.  Your idea feels much more appropriate.\n. > I'm just wondering if we couldn't get colored syntax... and probably using a better monospace font like Consolas or Monaco by default.\nEasy Enough\nRemaining items before pushing this thing live:\n- [x] Colored Syntax\n- [x] Better monospace font\n- [x] Swap out twitter button with download button and addition git info below.\n. > Just kidding, had about $600 in 4y, but at some point I'd love reinjecting this money for community things, so if you have ideas and are willing to take care of it, just ask.\n\n. > I just forgot we already have CasperJS logo assets :)\n\nhttp://docs.casperjs.org/en/latest/credits.html#logo\n\nI'm all on board for things like stickers, pins, t-shirts, little ghost plushes.\n. I'm going to give a few day grace period before I clobber the existing gh-pages branch and replace with this for any last minute feedback.  Pinging for awareness: @istr @mickaelandrieu @paazmaya @n1k0 \nDesktop:\n\nMobile:\n\n. OK, no major objections were brought up, and it's not like we can't change it in the future.  Merging.\n. @istr It only took a few beers and a late night dose of boredom. \ud83d\ude00 \n. Simple docs update.  Merging.\n. If we are going to take away some samples that are incorrect, can we add some in that are correct instead?\n. It makes sense to me even without the accompanying HTML.\nI'll let @mickaelandrieu voice his opinion and merge.\n. I'm alright with just adding 0.10 for now.  Can we leave the commented 0.9.6 in there as a TODO?\n. I'm OK with this.  :+1: Want to stick to 4 eyes rule.  @istr and @mickaelandrieu \n. It was suggested that we not even crawl the almighty Google for this front page example.\nHowever, this is a marked improvement over the current.  Merging.\n@entrptaher If you would like to rewrite the section so that it demonstrates the same feature without encouraging people to scrape Google, it would be really appreciated.\n. Looks dandy to me. \n. I love how meta this is. Looks good.\nThanks for another good one @entrptaher \n. Should this be done for the windows client as well?\n. @mickaelandrieu There anything special for the windows client?\n. I've restarted the build.  If it fails again we'll look into mitigating slimerjs archives like we did with phantomjs.\n. I've restarted the build.  Let's see how it does this time.\n. I'm convinced by @istr and concur.\nMerging.\n. Looks good to me. \n. I like this idea too.\nIf it passes, I'll merge it in.\n. Fastest PR EVAR!\n. If the operation is going to be async.  The code should be self-documenting and include async or withCallback somewhere in the function name.\n. 2 legit 2 quit :+1:\n. looks good :+1:\n. Not you, phantomjs 1.9.1 is no longer found at it's old location.  I'll need to put it up into our repository.\nYour code is fine, the build is messed up.\nI'll fix and re-run.\n. > Do you mean \"What functionality would we lose by getting rid of config.test\"? The suggested change does not remove config.test. The only thing that is changed is that the \"test suite passed output\" is generated after test.done is called and not when the config.test function returns.\nThanks for explaining it! I wasn't extremely familiar with this bit of code and wanted to make sure we weren't accidentally overlooking something.\n:+1: I am OK to merge this.\n. Docs only, merging.\nThanks @dritter \n. If we break BC, this would have to be the start of the 2.0 branch.\nI really like the concept of this PR, and would like to see it make it in. If we could make it BC compat, I'd be onboard with this change.\n. Hoist your variables?\n. the variable in the docs docs does not match the var in the function definition\n. If we are going to do this, I'd rather be explicit.\n'js' || 'coffee'\n. ",
    "mickaelandrieu": "Agree\n. Well, I'm (very) late. Would you mind to add tests ?\n. A good idea, with all tests green I think @n1k0 will be more interested :+1: \n. ping ?\n. @albuquerque can you apply the update in a new pull request and submit it ?\n@istr is (mostly) the only active maintainer (no offense, others: you are all great :).\nIt's the best chance to get this feature accepted atm :+1: \n. Can I have a test case ? I can run an Windows 8 with phantomjs 1.9.1 and casperJS (master branch).\n. Full of beauty isn't beautiful ^_^\n. Add documentation, in reference of closed ticket https://github.com/n1k0/casperjs/pull/587\n. Curious, I have no problem with the casperjs selftest command ... I'll update this pull request tomorrow\nedit: i'm a noob, I launched tests from my casperjs and no from my PR. It's now fixed.\n. good for merge or definetively a bad idea ? :)\n. I wanted an API more complete, something like PHPUnit for example, which provide http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions.assertInstanceOf.\nThat's why I wanted String as first parameter on my first commit.\nedit: I will improve this, pass a String (a className) is definitively what users need.\nWhat do you think about https://gist.github.com/mickaelandrieu/6371509 ? \nedit from 30/08 : I'll write more tests this week, specially for inheritance and all known Objects.\n. hum, IMO the api should be modified.\nexample --format=xunit/json\nWhat did you think @n1k0 ?\n. @mduvall yeah, I like it :+1\n. can you rebase master please ?\nAlso, is it ok for you @n1k0 ?\n. To avoid merge conflicts, you need to rebase master branch on your branch :)\n. Yes, and be sure you don't break tests.\nAlso, I worked on https://github.com/n1k0/casperjs/pull/767\nDo you think we can be ported your exported to a more generic system ?\n. hum, it is not accepted yet.\nBut, the exporters should be called by using casperjs test --format=[xunit|html|json|exporterName...] --file=[filepath] you need at list to rename your exporter filename with the name passed. For instance, with jsonReporter.js you should call --format=jsonReporter and the method to render the file should be called render() I can help you ;)\n. Not good yet. can you please fix travis build ? :)\n. what did you think @n1k0, it's a big BC (no more phantomjs <1.9.x)...\n. :+1:  sounds great !\n. do we need documentation for this ? I wonder\n. Thanks for this, it sounds good. But wait @n1k0 before merge PR (and also close related issues)\n. Actualy not good, can you rebase the master branch ?\nRegards,\n. I didn't know about phantomjs --verbose, I'll ensure backward compatibility ASAP. (edit: yes)\n. I saw in casperjs module a way to emit a deprecated but this event is not dispatched correctly in logs, maybe am i to log a warning ?\n. Done.\n. I've edited commit label, also it's good for me (when some tests are added as @n1k0 said) \n. Hi,\nnot good for now, can you please correct tests suites ?\nSincerely,\n. What did you think @n1k0 ? Good for me.\n. :+1: \n. Hi,\nthanks for your report and your pull request.\nCan you please add a test for this ?\nRegards,\n. Hi,\nthanks for your pull request.\n:+1:  for me :) \nwhat did you think @n1k0 ? \n. Hello clochix,\nsounds good. Maybe you can also add new frame.change event to the documentation ?\n. Thank you, for me good to be merged :+1: \n. poke @n1k0 ? merge sounds good.\n. Robust code as it has already green since 8 months :+1: \nping @n1k0 Clochix deserves it \n. Thank you :)\n. :+1: \n. @laurentj ok, thx to have fixed it :+1: \n. Hi,\ncan you try this ? npm install casperjs@dev-master\nRegards,\n. aw we should tag new 1.1.x release, what do you think @n1k0 ?\nFor now, you should probably install master branch from git.\n. Hi,\nthank you :+1: \n. Thanks ! very boring issue :+1: \n. :dancer:  thanks !!\n. hum... I think a tag can be usefull to maintain the current api, and let the developper choose the correct order of the events dispatched.\nBy the way, maybe can we add another tag \"OVERRIDE\" in case of we want to avoid totaly the event declared before.\nIf prependListener is correct, should I rename addListener to appendListener ? \nPS: I will clean my commits :)\n. Ok, I work on it now :) (* I'm on fire ^^ *)\n. What did you think @n1k0 ? Good for merge after clean my commits ?\n. @n1k0 : good for you ? \n. @n1k0 can we merge it ? I'm working on eventListener improvement and this PR may be first step ;)\n.  @n1k0 need time/help to validate PR ? cc @mduvall @hexid @laurentj . I need a review :+1: \n. Ok, I will take a look to issues/pr tonight, but I can't review my own pr(s) ^^ \n. ty @hexid \n. humm, I've a weird issue with dotNet and phantomjs 1.9.2, can you take a look @hexid ? :)\n. No pb you have time, it's a WIP :)\n. oh ? good ! :D need @n1k0 for discuss or/and review\n. @n1k0 I need to work again on UI improvement, and eventually found a way to edit a HTML template ...\n. @n1k0 it's now done for me. Would you mind to take a look ? :)\n. @nicolashefti the PR is actually done, and could be merged.\nBut @n1k0 want to make a complete review before :)\n. Closed.\nFeel free to get the code if needed.\n. Now this is done, good for merge isn't it ?\n. @hexid I'm busy too, I try to take a look on it the next week end...\n. Hi,\nthank you for your contribution. Can you fix some broken tests please ?\nRegards,\n. @kirs : ping ?\n. You can get a look to Travis report :) \nlet me know if you need help.\n. All tests pass ... a good idea :)\n@n1k0 , @hexid , @mduvall what did you think about this ? I can review this PR.\n. @brandon-bethke-neudesic ca you please fix the tests ?\n. poke ? if you can't please talk, I will.\n. Thank you !\n. poke ? \n. @robcolburn I'm just wondering if you have find a way to do it. Sorry for spam.\n. For now I use this tip to reduce RAM and CPU used by my own scripts.\nYou can use event to send a KILL signal to phantomjs:\njs\ncasper.on('run.complete', function() {\n    casper.die('kill phantom', 1);\n});\n. @cptX can you post your ask in mailing list ? \n. @cptX https://groups.google.com/forum/#!forum/casperjs\n. @n1k0 can you take a look at this ? I will try to reviews others waiting PR \n. @n1k0 @paazmaya for me it's :+1: \n. @istr and my students will enjoy this new version as well :)  Thank you! \n. Hi @sqren \nCan you please add a test for your specific case ?\nRegards,\n. For me :+1: when you will fix some typos.\nLet's wait @n1k0 review  ;)\n. Thank you :+1: \n. @n1k0 Can You please close all related issues too, good to see you home :)\n. hi,\ncan you add a test for this ? \nIf you don't have time, I will add docs myself :)\n. :+1:  ping @n1k0 \n. what did you think  @n1k0 , can i merge it ? \n. poke @n1k0 :)\n. :coffee: ? \n. Hi,\nfood for me.\nping @n1k0\n. @kbdaitch maybe you just need to use casper.echo ? \nhttps://github.com/n1k0/casperjs/blob/master/modules/clientutils.js#L140\nIf you need more, please ask for help on the casperjs mailing list :)\n. ping @n1k0 \nfor me it's +1 \n. I really want to see TrifleJS support on casperJs, what do you think @n1k0 ?\nI'm note sure of the impact of this suggest ...\n. @n1k0 this don't broke actual tests, any suggests for \"untested cases\" ?\nI will check for actual test tonight :+1: \n. @n1k0 fs functions are very well tested : https://github.com/n1k0/casperjs/blob/master/tests/suites/fs.js\nDid you see another use case ?\n. Thanks !\n. Sold !\n. Thanks :+1: \n. Hi,\ncan you please squash your comits ?\nI'll merge it.\n. Thanks, you rock !\n. Hi\nplease add tests, I'll review this tomorrow.\nYou're on fire :+1\n. Ok, can't wait for it :+1: \n. poke @r8k \n. poke @r8k I'm on fire ^^\n. pb take your time (in fact, I can't wait to test this new feature :D )\n. @r8k only need a squash and to be reviewed by @n1k0 to be merged in master.\nThanks a lot it's a nice feature :+1: \n. nope ! let's wait for @n1k0 review\n. I can't merge without @n1k0 agreement :) poke @n1k0\n. I can carry on the docs, trust me ;)\n. @r8k ok ! I'll document this when the PR will be merged ;)\n. I'll review this soon ;) ty @r8k\n. Is the work finished ? Can i merge it ? ping @r8k @n1k0 \n. @r8k did you have time to finish this ?\n. Agree,  let's focus on release asap :) \n. Hi,\nplease correct the tests :+1: \nRegards,\n. Hi @mucsi96 ,\nthanks for your contribution.\nMaybe this tests can help you ? https://github.com/mucsi96/casperjs/blob/master/tests/suites/casper/events.js#L31\n. These assets are under MIT licence, should we have to apply a more specific licence ?\n. This is now good ;)\n. Nice contribution, I like it !\nping @n1k0 we need this ;)\n. Tommorow I will document this too ;)\nedit 20/05/2014: already documented here http://casperjs.readthedocs.org/en/latest/modules/casper.html?highlight=zoom#zoom\n. Thank you for this first step, sounds good to me.\nWould you mind to fix some lint issues ? You can check travis report to help you.\nRegards,\n. +1 for me. ping @n1k0 for review :)\nCan you squash your commits ? \nGood job !\n. thank you, @n1k0 can I merge it ?\nI will add docs ;)\n. Sorry, @n1k0 is very busy :)\n. ?\nCan I help you ?\n. maybe in fail-fast test suite ? Need a hit to finish this if needed\n. As the tests pass, we can merge this one. ping @n1k0 \n. Wow! Such amazing :dancer: \nI can finish this if you don't have time for reload & forward methods.\n. can you please \"fixup\" your commits ?\nI'll take a look soon :)\n. Yup. This is not green. I can't merge this one :/\n. @davidlinse you're right :)\n. history.js test the back() method, isn't enough ?\n. Tests for forward() are already done in history.js\n. Interesting, can you please squash your commits as I can review this one ?\n. I mean merge your commits into one.\nSee http://git-scm.com/book/en/Git-Tools-Rewriting-History#Squashing-Commits, let me know if you need help :)\n. A good idea, but I don't have time (for now) to review.\nping @n1k0\n. @n1k0 I may need this one, do you have enough time this week for this ?\n@botandrose I'll add docs for this ;)\n. ping @n1k0 can I merge it or do you want to review this one before ?\n. @n1k0 did you have time to take a look ?\n@botandrose can you rebase master and squash your commits please ? If @n1k0 is unavailable I'll merge this one soon.\n. Thanks @botandrose \n. Hi,\ncan you please add docs, and maybe a test ?\nRegards, \n. I do :)\nping @n1k0 can you review this please ?\n. Hi,\ncan you rebase your commits ? I'll merge this cc/ @n1k0\n. Can you squash your commits too? I swear it's my last request :D\n. Thank you @davidlinse !\n. thank you denis !\n. I can't merge this one, we need @n1k0's review\n. true, @Xenik007 can you add phantomjs 2 to the .travis.yml file ?\n. It's not :)\nmerging.\nThank you !\n. This is an known issue :)\nThanks !\n. Hi, I don't see a real explanation on how the special keys works. Maybe a minimal example can help CasperJS users ?\n. Please re open, we are only 2 actives maintainers and need time to review each contribution.. \n. Ok,  sorry for delay we need more hands :/\nThank you for contributing \n. Thanks :+1: \n. Are you sure? The folder doesn't exists in 1.1.x :)\n. Interesting but how can we test it ? \n. Hi,\nmaybe the Mouse API can be improved this way ? /c  @n1k0\n. I think we need @n1k0 review for this.\n. I'm not sure this should be added in API, that's why I need @n1k0 review :)\n. Sorry, I don't have time to review your suggest ... maybe @n1k0 ?\nFor now, can you \"fixup\" your commits into only one ?\n. \"Hi houston, we have a bug\", I need to investigate a little bit on this.\n. @n1k0 can you take a look to this ?\n. ping @n1k0 I don't know well python, can you take a look ?\nThank you for your contribution @crocket.\n. well, is it possible for an HTTP request to \"not\" have a Content-Type ? \n. Thanks ;)\n. hmm, are you sure the initial orthograph is uncorrect ?\n. You're right :)\nThanks for your contribution.\n. Hi,\nclientutils already have findOne and findAll methods, we don't need more here.\nIf you need some sugar in your project, you can easely extends Casper object to add them.\nRegards,\n. @Ajnasz would you mind to rebase master branch please ? \nSounds good, but unmergeable.\n. I relaunch the build, ping /c @paazmaya can you review this one too ?\nI'll merge with your :+1: \n. OK\njshint .\nmodules/tester.js: line 1031, col 40, This function has too many statements. (18)\nthis is related.\n. Ok. Squash your commits and I'll merge it: we shouldn't waste \"too much\" time to please js(h/l)int...\n. Merged, thank you @Ajnasz !\n. Hi.\nI don't realy understand what is the purpose of this contribution. Can you explain me ?\nRegards,\n. Hi, can you please squash your commits? I Will make a review on monday /c @paazmaya\n. There is too much things unrelated to your feature, you need to remove this stuff and rebase from master branch.\n. \"Houston, we got a problem\".\nThis is not good, you need to rebase master branch of casperjs official repository.\nAssuming you are working on your fork, this is a common way to do:\n``` bash\n// add a remote for n1k0/casperjs repository\ngit remote add upstream https://github.com/n1k0/casperjs.git\n// then update your \"local\" master branch\ngit checkout master\ngit fetch -a\ngit rebase -i upstream/master (you will probably need to fix some bugs)\ngit push origin master\n// then go on the \"feature\" branch\ngit checkout origin linkText\ngit rebase -i origin/master (you will probably need to fix some bugs)\n// so at this point, your master branch is the same as our master branch and only the feature should be in your commits\ngit push -f origin linkText\n```\nfrom Syncing a fork\nLet me know when it's done (and don't give up, I want linkText() to be part of casperjs API :+1:  )\n. Yes, mono seems unreachable... I relaunch the build.\nping @n1k0 @paazmaya : can you take a look to this pull request ? for me it's :+1: \n. @jefleponot this need to be rebased.\n@n1k0 so ... do you (finaly) agree on this or not ? If not, it's better to close this one instead of ask to  @jefleponot to work more on it...\n. this means I need a decision from @n1k0.\n. @jefleponot you can extends CasperJS without any hack: http://casperjs.readthedocs.org/en/latest/extending.html\nI consider this topic closed.\nRegards,\n. @jefleponot merry Christmas !. I'd like to see your contribution merged asap, only few comments.. thanks again for what you do for CasperJS :). mick advice => wow ... :D would you mind to use a better commit label ? Something like Improved warning message about SlimerJS limitations :) . thank you @jefleponot . thank you @keathley \n. I'm not sure that the webkit version used by phantomjs handle this kind of css property.\nThis need more investigation on webkit4 (phantomjs 1.x) and webkit 5.\n. @rdpanek how about official 2.0 ? https://github.com/ariya/phantomjs/tree/2.0\nedit: powned !!! Yata phantomjs 2 is alive ! <3\n. @n1k0 do we need to keep the \"coffee support\" ? I never see anyone contribute to this files.\n. @n1k0 you are right, but can we plan the next \"next\" release will drop coffee support ? The easy way will be to release 1.1 without this pull request and then a 1.2 with phantomjs 2 support.\nAnd finally, deprecate 1.0 (the legacy branch will be at least the 1.1). What do you think ?\n@rdpanek can you rebase master branch please, and your tests will pass :+1: \n. :+1: \n. @oncletom :+1: this may be the best solution.\n. @n1k0 can I create 2.0 branch?\n. @xescoder do someone at Yandex actualy use CasperJS ? o_O\n. @rdpanek can you rebase, fix the tests and propose a pull request into \"phantomjs-2\" branch ?\nif @n1k0 agree, I'll rename this branch 2.0. For now, when this new \"phantomjs2\" branch is all green I will release it as 2.x-alpha.\n. ping @n1k0 can we consider that phantomjs 2 and (so on) coffee support discard is the start of CasperJS 2 ?\n. @mitar we can't because phantomjs2 has dropped CoffeeScript support.\n. @rdpanek can you make this PR against phantomjs-2 branch please ?\n@sbmaxx as there is no \"official\" gnu/linux build for now, it's hard to test and hard to accept: be patient :)\n. I'm not sure ... I agree to get a gitter but I think this kind of decision is more up to @n1k0.\n. Hi,\nyou are right in case there is enough active contributors to take review and merge.\nAs you may now, CasperJS build is broken since months and as stated in link in my PR, the workaround is known and already used in some others tools from phantomjs family.\nAfaik only @n1k0 and I can merge and he is busy since and for months.\nI will make a PR for future contribution, I'm glad to see new active contributors :+1: \n. ping @paazmaya, @n1k0 \n. :+1: \nthank you @paazmaya \n. @paazmaya  for now the build seems broken.\n. @paazmaya I agree to switch too, and \"turn down\" for now lint configuration (with a technical debt issue, of course)\n. can you squash your commits ? I merge :)\nThank you for this contribution @paazmaya \n. thank you @paazmaya :)\n. this concerns phantomjs2 and phantomjs2 support is planned into casperjs2\n. @istr ok to me (sorry, I'm realy busy with PrestaShop and I dont use CasperJS :/ )\n. Hi @petetnt, can you squash your commits please ?\n. thank you for this contribution :)\n. Ok to me, thank you @Rykus0 for feature and @istr for review :)\n. @BIGjuevos go for it, I'm too busy until the next release of PrestaShop :cat: \n. :+1:  /c @n1k0 \n. @jefleponot also, would you mind to rename your commit label ? something like \"add mouse event on hidden elements\" ? Also, we have a logger and in my opinion we should notify user that he try to handle a mouse event on hidden elements, isn't it ?\n. Thank you @jefleponot \n. @jefleponot as this part of casperjs is actualy disabled, I don't see the value of this contribution (for now).\nWhat do you think ? Could be vey interesting if we can re enable this part, and then enjoy your enhancement.\nMicka\u00ebl\n. @soundyogi would you mind to squash your commits ? Or I can do it\n. :+1: thank you @soundyogi :) \n@istr thanks for review \n. Hi,\nyou are right.\nThank you @Dudemullet \nPS: tests fails cause we have moved casperjs repositoru to his own organization.\n. ping @paazmaya I don't know why but eslint configuration is totaly broken, can you help me ? \n. I will make a new PR, this one is totaly broken :)\n. :+1: this make sense\n. @istr it's OK,  I'm not very active ;) \n. Can be a CasperJS 2.x but if no one maintain... \n. ping @n1k0 / @hexid  what do you think ? the build is full green, this cant be possible -_-\nI'm not sure we should merge this one because people will think that casperjs 1.1-x is compatible with phantomjs 2 and we know this is not true...\n. :+1:  ma pull request is totaly useless then, I keep the branch from my own for the record :)\nBy the way, thank you for your pull request !\n. :+1: always happy to see new useful tests :)\n. Thank you @n1k0\n. @jefleponot great contribution ! some comments to address then. But I'm :+1: to merge this feature :)\n. @istr sounds OK to me :+1: \n. Humm ok for 1.2, how many issues are blocking the release of 1.1 according to the actual milestone? \n. @jefleponot sadly, your last merged pull request have been merged and so on you need to rebase this one :dancer: \n@casperjs/contributors so, are we agree to merge this one? my vote is :+1: \n. @jefleponot @istr I agree with Jef, and we need to keep the old api.\nCould be better for now to create new functions instead of improve the existing one (and this may be a good start for 2.0 api :) )\n. Thanks @mepard for contribution & @hexid for testing :+1: \n. :+1:  thank you @mikemaccana \n. @istr yup I clearly don't know how to fix it /c @n1k0 \nI'd would like to keep your unofficial build because you test 2.0.1 and the PhantomJS team didnt (yet) publish an official build for this release :)\n. @istr sorry for delay, it's now done and I've checked it works with phantomjs 2.1.1 (my actual version).\nAlso, I've cleaned the .travis.yml file.\nMicka\u00ebl\n. @istr are we ready for beta 4 ? :) I think you've empowered me to a real come back into CasperJS project ^^\n. I agree, and I prefer to see you (and @n1k0) be in charge ;) \n. :+1:\n. Yes...  except for the Commit label. Can you rename your Commit @jefleponot? I swear I will merge it ;) \n. @jefleponot interesting feedback...  So you suggest closing this one in favor of #1417? \n. Hmm, make sense ... @istr what do you think ?\n. @ethaizone I'm not sure we need a new method, it's better to improve the download function with new tests regarding the specific use cases you've met.\n. Hi @istr I don't think we need a dedicated branch for this beta, imo we should release 1.1.0 stable as soon as possible.\nedit: mono is probably missing :)\n. @istr :+1:  yup! let me know when you want me to merge :)\n. All green ! Do you want to clean your commit history before merge ?\n. thank you very much  @istr !\n. @istr no tag for 1.1-beta4 ? \n. @istr :+1: and now let's work on 1.1 stable :D CasperJS is not dead! \n. It's good to me :) \n. > copy paste in not always a good thing :eyes:\ncopy/paste is never a good thing ;)\n. Merged, big thanks @jefleponot ! \n. Yes, why not.. this remind me we had some issues with test reporter output :/\nThank you @kellyjosephprice  and @istr for review\n. Hi,\n\nI know I'm not a maintainer of this project anymore but\n\nWow. It's not because you are no so active that you lose rights to ... anything ! It's your spiritual son ;) Thanks to be there.\n@jefleponot agree with @n1k0 comments. You \"MUST\" not remove tests, and respect your coding guidelines (https://github.com/n1k0/casperjs/blob/master/CONTRIBUTING.md). Also, to help us review your contribution it's very important to add meaningful examples.\nMicka\u00ebl\n. Hi,\nthank you for your contribution. Would you mind to squash your commits into one with a meaningful label - like \"added support for multiple file input\" for instance ?\nMicka\u00ebl\n. Not realy :D, try this:\n1) let's rebase this for real\nbash\ngit rebase -i 40213c2c // your very first commit\n2) and replace every \"pick\" by \"s\" in the  open window except for the first commit (\"Added support for multiple file uploads\").\n3) then you need to push force the branch\nbash\ngit commit --allow-empty && git push -f origin refs-525-HTML5-multiple-file-input-support\nMicka\u00ebl\n. Yes, because your repository is not synced with n1k0's one.\ngit remote add casperjs https://github.com/n1k0/casperjs.git\ngit fetch casperjs\ngit checkout refs-525-HTML5-multiple-file-input-support\ngit rebase -i casperjs/master\ngit push -f origin refs-525-HTML5-multiple-file-input-support\nMicka\u00ebl\n. damn, tests are now broken :/\nI don't realy know why to be honest /c @istr \n. @istr implementation sounds good to me. :+1: \n. @istr for sure it's not documented even in Casper or in phantomJS docs :)\n. :+1: \n. ok to me :)\n. Hi,\nthank you for pointing this issue. Let's wait for the tests build.\nMaybe a specific test should/could be written to demonstrate this bug ?\nMicka\u00ebl\n. @istr looks good to me too, regarding your last comment.\nexplicit bug + explicit test to reveal it + explicit clean fix == merge (and love :D)\nThanks @DrCuriosity !\n. I'm not against it, but still don't have time to review it, sorry :(\n. I need time to look at it,  @BIGjuevos? \n. Thanks for review @istr and @jefleponot for contribution. @istr more, we should think about appveyor asap. I dont have any experience with, but this is the only way to cover windows builds :)\n. > SlimerJS ends me with errors - same as origin/master - so I ignered them.\nSeems to be good now :)\nCan be useful :+1: \nPlease add docs.\n. @istr my bad ! didnt saw you didnt agree with this feature and I've already merged docs ... go or no go ?\n. :+1:  as you like ;)\n. Yes, I'm still convinced by the benefit of this contribution.\nCan you address the comments @Macek007 ?\nThank you \n. @istr can I assign myself on it ? should be merged as the docs are already online (http://docs.casperjs.org/en/latest/modules/clientutils.html?highlight=setfieldvalue#setfieldvalue)\nShould I remove the docs now, to reflect the real API ?\n. @jefleponot go for it (thanks ! Realy sorry I'm so busy :/)\n. @Macek007 no, thank you for your contribution, shipped with 1.1 ;)\n. thanks @Macek007 and @BIGjuevos for review\n. Thank you @restlessdesign for contributing and @istr for review \n. @istr thanks for review and @jefleponot for contribution of course :)\n. @istr to be honest, I don't see any \"elegant\" workaround :/ I feel bad about this patch, and I feel bad about a specific function too: this only move the crap :/\n@n1k0 what do you think ? what could be the \"best\" way to handle deprecations from phantomjs ?\n. @BIGjuevos I add a notice in installation docs asap. \n. thanks for review @istr :) I update also the docs today to inform users about this lack in phantomjs 2 and the workaround (compile into js first, then launch casperjs)\n. :+1v thanks @BIGjuevos and Jef for the solution :) \n. Also, would you mind to squash your commits? \n. thanks ! :)\n. Ok to me too :) thank you @wskorodecki  and @istr for review\n. :+1:  ok too :)\nregarding your last comment @istr, I agree, let's see how this pattern evolve and we will refactor when required, what do you think ?\n. Sorry for this (late) review, but I dont understand well what is done in this pull request, so I can't realy vote for or against this ^^\n. I'd like to see a note to inform user that coffee script is not supported with phantomjs 2+ and slimerjs :) \n. Sure :) thank you @mishari\n. Thanks and sorry for delay \n. Sounds good to me :) thank you !\n@istr ok for merge ?\n. :+1: \n. Good idea :) \n. :+1:  what do you think  @istr ? I fear a possible duplicate with faq section ?\n. Finaly, thinking about it make me feel it's a bad idea to put it in FAQ section.\nCan you add a link to faq in the installation section ?\n. thanks @BIGjuevos \n. @BIGjuevos would you mind to add a note in installation section about coffeescript support ? :)\n. Maybe after the pre requisites => http://docs.casperjs.org/en/latest/installation.html#prerequisites\n. thank you @BIGjuevos !\n. :+1: \n. :+1: to be honest, why beta-6 and not the stable release ?\nExcept if I'm wrong, we dont have any blocker, let's just do it :)\nPS: we can address the Windows issue on 1.1.1 for instance, if someone is able to reproduce, fix and build casperjs.exe ping  @hexid \n. => https://github.com/n1k0/casperjs/pull/1518\nI assign myself to https://github.com/n1k0/casperjs/issues/777, let's do it, let's release 1.1 ASAP !\nhttps://www.youtube.com/watch?v=ZXsQAXx_ao0\n. @istr I do agree with you, this is why I take one of the last issues we have to help the final release, I'm not against beta-6 :)\nI think we can finish the last issues and move on to 1.1: my concern is more \"should we publish now beta6 and wait for 1.1, or wait for 1.1 that is coming very soon ? \"\n. @istr of course I didn't say we have to publish now :)\n. @istr 1.1.0 remains a \"pre release\" ? https://github.com/n1k0/casperjs/releases/tag/1.1\n. @istr hmmm my tests pass ... how to fix  #777 ? :-) \n. > It could also be a false positive if you copy-pasted from github into the test and the CSV from the same source rather than natively generating the characters from within code. \nI did :p any idea on how I can generate this kind of characters within code ? \n. @jefleponot we try to cover some edge errors but the test don't cover all the cases, according to @BIGjuevos comments :/\n. Note I have never reproduced this issue, so it's hard for me to write an efficient test :)\n. I can't validate my own pull requests :cat: . Yes ! :+1: . :+1:  sounds OK for the page and the zip on my computer is OK regarding the selftest command :) \n. :+1: \n. @jefleponot would you mind to use a more explicit label ? Something like \"rebased setFieldValue/setFieldValueName/setFieldValueLabel functions from #1459\"\n. @jefleponot ok, don't forget to use \"relevant\" commit labels, this help us understand what is going on.\n\n. @istr mainly because we have merged docs for this before ... :D this contribution is valuable :+1: \n. Any chance to see this as an extension of core, and installable using npm ? I want to keep CasperJs as simple as possible.\n. @jefleponot the thing is I don't see why all CasperJS users should \"load\" this extension since phantomJS 2 doesn't supports it natively. With the rise of ES6, is Coffeescript still relevant ?\nMore, this could be worth to investigate on a way to plug extensions to CasperJs instead of complete the api: CasperJS is already too big, and should stay a thin layer on top of P\u1e27antomJS.\nI do agree with the old dream of @n1k0 to remove the tester api and made it optional: if we can do it, we can probably plug another testing frameworks, another reporters, another communities and made the CasperJS community grown :)\nTell me what do you think, and if you have some ideas on how to do it \"smoothly\".\nPS: I appreciate a lot your contributions, I also try to made this software the easier to maintain for all of us, something like NightmareJS https://github.com/segmentio/nightmare\n. @istr by the way we should keep this contribution somewhere for all who need to keep CoffeeScript. Perfect usecase for a cookbook article, right ?\n. :+1:  thank you @BIGjuevos \n. Thank you @BIGjuevos\n. We probably need to setup a jenkins to check ? I'm very busy theses days :/ \nAbout this contribution, this is better cause we use getXML() function again :)\n. Thank you @laurentj  :) can we add slimerjs 0.10 to our testing matrix ?\n. Humm,  as tests sounds good I merge.  I don't use python too :D\n. BTW thanks @BIGjuevos \n. Hi, it's nice ! I don't like green but It's totaly personal ahaha ^^ \n. @n1k0 we may probably contact Jeremy Forveille ? I can participate to have \"corporate\" assets (logo, fonts, etc...) and new design proposal. What do you think ?\n. @n1k0 I want also buy some stickers but im my dreaming plans, you keep the money and we ask some companies to pay for xD\n. @BIGjuevos I just forgot we already have CasperJS logo assets :) http://docs.casperjs.org/en/latest/credits.html#logo\n. @BIGjuevos it's really great! \n. @BIGjuevos yup we shouldn't remove samples that do not work anymore but fix them. \n:-1: for me\n. I've suggested him to share some cookbooks,  @ebrehault is author of an ebook about testing using CasperJS. \n:+1:\nPs: you don't need my voice to decide,  I mean I trust the double eyes strategy of @istr :) \nPs2: my students have discovered CasperJS today...  and they like it <3 \n. BTW thanks @ebrehault for sharing,  don't hesitate to contribute again, we love contributions! \n. Ahaha it's ok  @jefleponot, we are all here to learn :) \nLet's see what happens with your build now :cat2: \n. Thank you @jefleponot for contribution and  @BIGjuevos for review :+1: \n. Was already OK,  just forgot to say it!  Thanks @jefleponot and @istr\n. Ok for me, thank you @entrptaher \nps: we use to wait 2 maintainers agreements before merge ;)\n. @istr better: thanks to the new Squash option of github, I merge and squash it for @entrptaher :)\nThanks for contribution and for review !\nPS: @entrptaher would you mind to do a pull request to document this new function ?\n. @BIGjuevos afaik no,  @n1k0 / @hexid ? would you mind to explain and/or document the way we could maintain the Windows build ? :)\n. Hi @BIGjuevos ,\n\nIs there anything else I need to update for the windows client ?\n\nfor sure we need to compile the Csharp file to executable, can you do it ? I will test it on my windows 10.\nThank you, Micka\u00ebl\n. @ironcamel would you consider a pull request on your pull request ? I will try to build an executable asap :)\n. @casperjs/contributors I merge it, if someone is realy against it we can revert but we need to react faster on contributions.\n. @istr regarding the build, a rebase is enough to make the tests pass.\nOk to me too, big thanks to @andreportela  and @istr for review\n. I'll take a final look tomorrow. Thank you @andreportela !\n. the biggest issue here, is that some tests are commented: all tests need to pass :/\n. Thank you @andreportela \n. @Marshevskyy would you mind to reword the last commit label ?\n. @Marshevskyy the commit named \"dummy PR\" doesnt help anyone to understand what is going on.\nAlso I saw you didnt rebase from master but pull, and you just create a merge commit... please rebase and remove this merge commit.\nThank you \n. @Marshevskyy Thank you :) \n. Good to me, thank you @istr \n. @betalb would you mind to rebase your pull request ? Thank you\n. @betalb thanks!\n@casperjs/contributors it's Ok to me, we need another :+1: here ;)\n. Thank you @jefleponot  (sorry for delay)\n. Hi, good idea!\nOk for me \n. Wow ! 2 maintainers active at same time oO :D\n. Indeed. :+1:\n. Thank you @guillaumeboiret :)\n. I'm in favor of it.\nSadly I no longer use casperjs, so I'm not the good person to decide on this I guess :/\nMicka\u00ebl\n. Hum, I'm not sure that slimer variable exists the only engine variable is phantom and you should refers to it.\nI think, we should rename phantom to engine but it's a lot of works for no big gain.\n. Make sense then, but what is the value of phantom.version when slimerjs is used as the engine ?\n. o_O wow.\n:+1:  to me, thank you @jefleponot for hint this bug !\nping @casperjs/contributors for merge please :)\nMicka\u00ebl\n. Thank you @cpius \n. \ud83d\udc4d ping @casperjs/contributors for one more vote :)\n. @paazmaya I'd like to keep all contributions pushed from a fork, just noticed it was a branch from official repository if you don't mind :)\n. @paazmaya no, if we all agree on this behavior, maybe can we add a note in wiki ? What do you think ?\n. If @jefleponot agree with, he is now able to merge :)\n. Thank you @ashkulz \n. @jefleponot ok for me :). Thank you @camjc \n. Thank you @jefleponot \n. I need to review this in source code first.\n. Ok for me too (https://github.com/casperjs/casperjs/blob/master/modules/casper.js#L166)\nThank you for review and for contributions guys ;)\n. Hi @childen,\nthank you for your contribution.\n@jefleponot  what do you think ?\nMicka\u00ebl\n. @jefleponot @BIGjuevos do you agree to merge this  one? :)\n. Thank you @childen and my mates for review :)\n. :+1:  go for it @jefleponot !\n. Thank you @dritter \n. \ud83d\udc4d go for it!\n. Hello @dritter, \nI don't have time yet to review this (sorry).\nIs it a BC from a \"code\" point of view, or does it change the actual behavior?\nI'm not really easy to bump 2.0 now, we don't have active maintainers (except @jefleponot).\nMicka\u00ebl\n. I'll be available after 10th of december.\nI'm thinking... we should encourage modules creation over new core contributions: what do you think @jefleponot  ?. @jefleponot depends ... is it supported by phantomjs 1.9.8 and slimerjs 0.9.6? Or is it fine to use Web workers only if they are available ?. Hello, looks good for me too :)\nThank you @bughit for contribution and @jefleponot for review\n. Thank you @jefleponot ;). :+1:  this probably deserve a new release :). @jefleponot I have no idea, I've never released this project /c @istr maybe share a doc I guess :). Thank you @goganchic . thanks!. @jefleponot why do you want me to rebase? Also, I need more time to review this contribution.\nMicka\u00ebl. Do you want me to squash commits on merge? :). ok I can do it :+1:. Sorry, misrode your comment . @bguerin it's not enough, we need to build or deprecate casperjs.exe first or Windows user will still stay in 1.1.2 because we already forgot them the last release.\nAlso, I wonder if @jefleponot have access to npm casperjs account in order to declare the new release in node :) . If we compile the script using mono and test the .exe, I think it's enough for me.\nAlso, we need rights on npm to declare the new release, isn't it? (I don't use node, I'm an ashamed PHP developer :p ). ping @rhwy would you mind to take a quick look? this is probably nothing but this will be great to keep a Windows exe :)\nThank you !. @rhwy sadly CasperJs is not a node module, it's only - as you say - a simple wrapper to make CasperJs available for Windows .\nThank you for enclosejs, this is probably what we need and this may works even if it's not a node module :). @jefleponot I'll try to compile it in my own computer monday, let's keep this .exe file for this release and open an issue to remove it.\nimho, we should allow only 1 way to install and use CasperJs : npm install -g casperjs and let Windows users deal with their \"PATH\" issues on their own.. thank you !. Nice catch :). \ud83d\udc4d . @jefleponot sounds interesting, what are the improvements of Phantomjs 2.5 vs Phantomjs 2.2.\nAlso, phantomjs is quite abandonned right now: I think we may(should?) use slimerjs as main engine for the next releases of CasperJS, what do you think?. > I will definitely move project as not maintained one.\nYes, I think it's time: thanks for all the work you have done on this project.\nBefore making this project unmaintained, you should add yourself to the list of maintainers in the README.\nFor me, \ud83d\udc4d on making this project unmaintained: there are better solutions for everything we can do with CasperJS right now, so let's move on :). this sample did'nt work :/ and I don't know why ^^\nAlso, node_module must be collocated to  the script, it's a big limitation (is it the same for phantomjs ?). \n. Aaaaaah, I've already correct my commit ^^\nI wonder if we have to say \"node_modules have to be collocated to the script\" \n. For me a constructor is a function, not a String.\nI modified for constructor: constructor.name: maybe constructorName is better ?\n. IMO, when it's not necessary, we try to avoid create dependencies between functions.\nI'm sure of native typeof implementation, but if betterTypeOf change or be moved betterIstanceOf will be impacted :/\n. done\n. done\n. done\n. done\n. done\n. I'ts not so easy (for me): can you give me some hints ?\n. done, but jshint don't support XMLDocument: I've done a PR\n. Finaly, done.\nNow, I know how to do :)\nGood for merge ? \n. Sure, i will modify both on cli.rst and testing.rst \n. +1\nif you're here, I let you do boss ^_^\n. return this.get('javascriptEnabled') is more on the opinion of @n1k0 as far as I understand but not related to this pull request.\nYour second proposal (for now) have my +1 ;)\n. yes sir ;)\n. didn't exists AFAIK ^^, and revealed by tests. \n. I want to, but I don't know how to do.\nedit 21h45: ok. \n. indentation here.\n. indentation here,\nimo should be \njs\ntextContent : typeof this.textContent !== 'undefined' ? this.textContent : message\n. indentation here\n. for consistency with reload() function @n1k0 have done.\n. How this will \"react\" if the label doesn't have for attribute ?\n. May be >= 1 or >0 isn't it ?\n. maybe you can dispatch an error here ?\n. use multi-lines comment please : \n/* foo bar */ \n. so, we are not sure that this feature works with slimerjs, right ?\nping @laurentj : is there a way to test this behaviour with slimerjs ?\n. else{} notation please\n. Multi-lines comment here too please \n. We need this to work, what is the issue with slimerjs at this point ?\n. :+1: , CasperJS will be the first and only tool to support triffleJS, phantomJS (1&2) and slimerJS.\n. For consistency, I agree.\nThen, let's go for merge (I will probably update docs) \n. nope.\nYou need to refactor your code to be compliant with our standards.\n. can you make a distinct PR for this update ? we will merge it before this one.\n. I don't understand why do you need this here, in this PR I mean.\n. this update is already available on master branch ...\n. same here.\n. maybe link_text instead of link text ?\n. why do you need this file ? \n. I'm ok for add some tests, but they are not related to your feature.\n. :+1:\n. nope.\nwaitUntilVisible and waitWhileVisible don't have the same behavior.\n. can you remove this unused lines ?\n. PhantomJS instead please :)\n. I'd like to directly set async to true if phantomjs is > 2 instead of throw an error.\n. js\nvar dl = {},\n    dls = ...\n. hmm I don't like the use of async as variable name, this could become a reserved keyword later...\nhow about asynchronous instead of async ?\n. same here, let's limit obvious errors, and help users when we can :)\n. remove uncommented code please\n. why do you need to console.log here ?\n. @istr is there something to do to make this command choose 1.1.0-beta4 ? I dont know how node package manager work.\n. to be removed\n. imo you should add a new \"versionadded\" section, and talk about phantomjs <= 1.9.8 limitations\n. indentation issue here \n. pseudo instead of speudo and bad comment indentation.\n/**\n *\n */\ninstead of:\n/**\n*\n*/\n. pseudoClass instead of speudoclass\n. same here for the comment indentation\n. same here for indentation and speudo/pseudo\n. same :)\n. same :)\n. Parameter\n. Transparently\n. converted into? \n. can be\n. I'd like to see explicit variable names like \"now\" or \"time\".\nThis could be difficult to maintain, so the more explicit and easy to understand what is done is better :)\n. Let's keep official HTTP error message for that \"Request Time-out\"\n. Same here please :)\n. Does it means resource.timeout event is not yet available for PhantomJS ? My question sounds stupid, but I want to be sure before consider merging :)\n. I mean, the correct message is \"Request Timeout\" :-)\n. aliases instead, no ? My english is damn bad :)\n. you can remove (need not to be set)\n. remove the extra tabulation please :)\n. 1.1.0, we are always in beta state, no ?\n. can you use a more explicit variable name ? Are we ok this is a kind a stack of listeners atm ?\n. it may be logic, but I dont like a repetition of code, can we improve it ?\n. please remove commented code :)\n. as a note for myself: should be var i = 0;\n. ~~shouldn't be var timeout = ~~timeout || ~~defaultTimeout; ?~~ nope.\n. how about this todo ?\n@casperjs/contributors would you mind to take a look ? :+1: \n. didnt saw the commented line, we should remove or fix the test, but not comment it :+1: \n. Hmm but before your pull request, this test just works as expected right ?\nAlso, we are still compatible with phantomjs 1.9.8 and so on we need to excecute coffee tests in this case. \n.  @jefleponot can you remove the commented lines ? I'll merge :)\n. void ? . is it intended ? Why not remove the line instead ?. It's a BC, you should keep findByURL function and deprecate it.. Maybe you can use the same check when you add a \"warn\" before, wdyt?. Older browser engines :). Same here: I prefer remove commented lines : is it a BC? What happens if we close the page here?. is it intended ? do we lose some events here and why ?. diff\n- Casper.waitForPopup() - SLIMERJS don t known who to update windowName\n+ Casper.waitForPopup() - SLIMERJS don\\'t known how to update window name. Have to be updated on all lines :+1: . you need to build a new version of casperjs.exe too. this if statement should be outside of skipPhantom200 check, isn't it?. hmm... I guess it's a known issue on phantomjs /c @Vitallium. Thank you :) . diff\n- function(coords )\n+ function(coords). if this function is about to return a boolean, how about prefix it by \"is\"? something like is_image_different sounds better to me :). diff\n- this.formatMessage(description)\n+ this.formatMessage(message)\nprobably ?. ",
    "kensoh": "Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Bumping up this thread :). Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Thanks @pieplu copying @jefleponot CasperJS maintainer.. @jefleponot this looks cool! I've tagged the open issues that can benefit from the new events in this PR.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Thanks @jefleponot! The PR looks like enabling CasperJS support for PhantomJS v2.5 engine built by @nkovacs plus some improvements not related to v2.5. Will enabling cause more issues for users who use it because v2.5 has lesser compatibility score than v2.1.1 from above link? (https://github.com/nkovacs/selenium-standalone-phantomjs/commit/11420aaf2174428b56086673232365c820f98a42)\nI'm not technically familiar with CasperJS code base to comment, maybe CasperJS previous maintainers can have a look to comment. Below are some notes from my limited knowledge of CasperJS's internals - \n\n~~there are a few references to utils.gteVersion which has a small typo instead of utils.getVersion. also, this method does not exist currently in utils.js.~~\nthere are some special handling for v2.2.0, and v2.x.x, I assume they are meant to address special situations for both and combined into the PR.\nthere is a reference to a webpage on localhost server in multiple-popups.html but not in any other files in that folder. also, in suites only http_status.js creates a local webserver. not sure if that test will work or if it already takes care of creating a local webserver to serve that page.\n\nEDIT - please ignore first point, I realised there is really a function gteVersion and probably by design to make a comparison of 'Greater Than or Equal' for the version. Thanks @jefleponot I guess users who choose to use PhantomJS v2.5 have to know that it has many compatibility issues and not really in a usable state. They might still want to use v2.5 engine for some specific features but the pros / cons have to be considered by them before using.. I have 8-9 sample scripts that test a number of CasperJS functionalities, but only a small subset of all CasperJS methods. I tried running PhantomJS v2.5 from https://github.com/casperjs/phantomjs-builds/releases/tag/v2.5.0 and CasperJS from https://github.com/jefleponot/casperjs/tree/phantom2.5 but get below error on my CentOS 6 Linux server.\nerror while loading shared libraries: libjpeg.so.8: cannot open shared object file: No such file or directory\nI know that this PhantomJS build is for Linux and there isn't one for macOS or Windows. The error looks like the build is somehow not self-contained / compatible with at least the Linux version I'm using (CentOS 6). EDIT - looked around, didn't find any viable way to install libjpeg.so.8 on CentOS. Hi @jefleponot and @mickaelandrieu for me I haven't found something better than PhantomJS + CasperJS framework. The beauty is you can simply unzip and run, without having other developer environments and dependencies such as Node.js or other language frameworks. This alone is a huge win in many organizations where users do not have admin access to their laptops to install software.\nThat is why I continue to build a free RPA tool on top of this stack - https://github.com/kelaberetiv/TagUI\nThe tool now is being maintained by my non-profit organization funded by Singapore government. I'll hope to have CasperJS and PhantomJS having compiled versions for operating systems in future. And if that sort of effort requires payment, it is really worthwhile to pay for such newer compiled versions.. Adding on, the AI representative body for Singapore government (AI Singapore) will be meeting the AI representative body for France soon. There is likely some agreement of collaboration between our countries. I'll be sure to tell my bosses of the good work that @n1k0 and you guys did, and hopefully keep the project alive. PhantomJS and CasperJS were created in an era before the tech giants took over the open-source world, and even today you see new stars and users every day for CasperJS. That shows that the software foundation, design, and documentation is still relevant today.. Archiving PR using ARCHIVE label as CasperJS, like PhantomJS, is not actively maintained for now. These PRs are from 1-5 years ago but there just hasn't been maintainers to continue the work.. Hi @jefleponot I've made an edit to sub-branch but somehow the tests fail. Although the original edit pass. I wasn't able to edit on my fork as it doesn't show up correctly when doing diff.. Committing now as the tests now pass.. Hi @jefleponot this PR is only documentation update, not sure why master branch is failing. Copying you to see if there is anything I can follow-up with.. ",
    "owenmartin": "This fix will work, however it will not allow us to pass in any parameters directly to PhantomJS.  This would be good functionality to keep.\nIt appears that batch files have crippled themselves to a degree by treating arguments linked with an = sign to be separate arguments.  One way around this is to encase it in quotes (e.g. '--xunit=output.xml') but this doesn't seem natural, and doesn't work in casper anyway!\nOne alternative may be to use a powershell script, rather than a batch script to start casper.  It's a bit more modern, and anyone developing on windows should be capable of running powershell scripts.  I'll try and knock one together that maintains the phantom arguments\n. PR for the powershell script at #303\n. No worries, please close this PR, and I'll instigate a new one from a branch.\nI still have some stuff to do for the test suite branch, I'll create a PR when it is slightly more stable ;)\n. Well look at that, I can close things ;)\n. ",
    "jblanche": "Je suis perdu :) je me suis relu 3x avant de poster le patch pour \u00eatre sur de ne pas faire de boulette mais c'est bien blanc sur fond vert, on est d'accord, par contre je n'avais pas corrig\u00e9 au bon endroit c'est \u00e7a ? \nEdit : burned \n. I wanted to change the code for the new twitter design but I guess I have to do this in both the coffee and JS, so I closed that PR and will open it again with both files. \n. ",
    "kastiglione": "I noticed a couple semantic mistakes in the findOne() / findAll() tests. Should I commit the changes I made to fix them?\ndiff\ndiff --git a/tests/suites/clientutils.js b/tests/suites/clientutils.js\nindex 20c558d..2b80472 100644\n--- a/tests/suites/clientutils.js\n+++ b/tests/suites/clientutils.js\n@@ -52,6 +52,7 @@ function fakeDocument(html) {\n     // scoped\n     var scope = clientutils.findOne('ul');\n     casper.test.assertType(clientutils.findAll('li', scope), 'nodelist', 'ClientUtils.findAll() can\n+    casper.test.assertEquals(clientutils.findAll('li', scope).length, 2, 'ClientUtils.findAll() can\n     casper.test.assertType(clientutils.findAll(x('//li'), scope), 'array', 'ClientUtils.findAll() c\n     fakeDocument(null);\n })(casper);\n@@ -64,8 +65,7 @@ function fakeDocument(html) {\n     casper.test.assertNot(clientutils.findOne('ol'), 'ClientUtils.findOne() can find a matching DOM\n     // scoped\n     var scope = clientutils.findOne('ul');\n-    casper.test.assertType(clientutils.findAll('li', scope), 'nodelist', 'ClientUtils.findAll() can\n-    casper.test.assertEquals(clientutils.findAll('li', scope).length, 2, 'ClientUtils.findAll() can\n+    casper.test.assertType(clientutils.findOne('li', scope), 'htmllielement', 'ClientUtils.findOne(\n     casper.test.assertType(clientutils.findOne(x('//li'), scope), 'htmllielement', 'ClientUtils.fin\n     fakeDocument(null);\n })(casper);\n. Thanks for making an awesome project.\n. ",
    "cable729": "Shouldn't this be closed?\n. Sorry, I saw merged and I quickly thought it was this PR that was merged. What exactly is wrong with parameter parsing the way it is? Also, doesn't Casper depend on Python? If so, we could just write a python parser program.\n. ",
    "hexid": "From what I can tell, this PR was never actually merged...\nThe file batchbin/casperjs.ps1 doesn't exist in master or any of the other branches.\n. This seems to already be possible with the .NET executable.\nIt will require that you have the .NET framework on your Windows machine, but it will also have much more functionality than this script.\nI tested it by running (export PHANTOMJS_EXECUTABLE=../../phantomjs.exe && casperjs.exe --version) from inside the casperjs/bin directory in Git bash\n. Since Python is cross-platform, I feel as though it should remain the default, with the option to use this on unix-based systems.\nWith that, I feel as though this would be better placed in a bashbin folder instead of bin.\nThis way, it will conform more to how the Windows batch script is used, being in batchbin.\n. Ok, I think I got everything this time around.\n. What version of CasperJS are you running?\n. Cleared up this issue here\n. You need to upgrade PhantomJS to 1.9.1 in order to use CasperJS 1.1.0+ on Windows.\n. I'll make a new PR without the unnecessary commits.\nSorry about that.\n. Yea I have. I believe that it may be because of an older version of Mono.\nI have limited access to an Ubuntu machine, so I will try to figure it out.\n. I'm getting quite a few errors on my windows machine, but I am getting the exact same output running casperjs.exe selftest as I am running python casperjs selftest and casperjs.bat selftest.\nI'll try running it on a different machine later on to see if it is just my machine acting up.\n. Ok, it looks like it might be a PhantomJS issue.\nI'm getting 45 failures when I run Phantom's test suite.\n. Here's a gist of the output I received.\nThe first is the output from running with CasperJS-master and the second is with CasperJS-1.1-beta\nI'll try finding where along the line this started to happen.\n. I think I finally found the issue.\nIt looks as though removing the two lines that were added to modules/casper.js in https://github.com/n1k0/casperjs/commit/76b7f73fc098892c31d3df15181d3710b857d573 produces the same output as 1.1-beta.\n```\nFAIL 834 tests executed in 203.976s, 828 passed, 6 failed, 2 dubious, 106 skipped.\nDetails for the 8 failed tests:\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/encode.js:10\n  base64encode() and download() tests\n    assertEquals: Casper.base64encode() can retrieve base64 contents\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/logging.js:38\n  logging tests\n    assertEquals: Casper.log() logged messages\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/wait.js:112\n  waitForSelectorTextChange() tests\n    fail: Casper.waitForSelectorTextChange() can wait for text on a selector to change\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/xpath.js:10\n  XPath tests\n    assertExists: XPath selector can find an element\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/xpath.js:1323\n  XPath tests\n    uncaughtError: Cannot dispatch mousedown event on nonexistent selector: xpath selector: /html/body/a[2]\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/tester/setup-teardown-async.js\n  tearDown() tests\n    dubious: tearDown() tests: 1 tests planned, 0 tests executed\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/tester/skip.js\n  Skip tests (asynchronous)\n    dubious: Skip tests (asynchronous): 1 tests planned, 0 tests executed\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/utils.js:348\n  quoteXPathAttributeString() tests\n    assertExists: Xpath selector \"//a[text()=concat(\"Label with double \", '\"', \"quotes\", '\"', \"\")]\" is found on \"tests/site/click.html\" page\n```\n. Sounds good.\nI'll also work on getting Travis to run selftests with the .NET application.\n. I believe this is ready to be merged.\nI compressed everything down to just a few commits and I have added the selftests for the dotNET app to travis.\nThe failures are still occuring on Windows, but that is also true with the Python and Batch scripts, so I think that should be dealt with in a different issue.\n. Sounds good! Just glad to be able to help.\n. Sorry that it took so long, but I updated the docs to show that casperjs.exe should be used on Windows instead of the old casperjs.bat.\n48cea0865ecfb6b73fc47bd84d22048d75ba855c\nb092f84d96b3d815b1b10235ba1bed5492441781\n. Looks like it is also failing for the Phantom 1.9.x series as well.\njshint .\nmodules/casper.js: line 100, col 35, Trailing whitespace.\ntests/suites/casper/hooks.js: line 61, col 27, Expected '!==' and instead saw '!='.\ntests/suites/casper/hooks.js: line 62, col 37, Expected '===' and instead saw '=='.\n3 errors\nmake: *** [jshint] Error 2\nThose should be fairly easy to fix.\n. jshint .\nmodules/casper.js: line 1496, col 44, This function has too many statements. (21)\nmodules/casper.js: line 1496, col 44, This function's cyclomatic complexity is too high. (9)\nmodules/casper.js: line 1705, col 38, This function has too many statements. (17)\n3 errors\nmake: *** [jshint] Error 2\n. Looks like it is working, but the PHANTOMJS_SHORT_VERSION environment variable isn't getting set.\nSince there is only one version of PhantomJS on each build, this isn't a problem.\nI can remove this if everyone thinks that it can go, but on the other hand, I could just add the following to the beginning of before_install: and take out the global environment variables\nexport PHANTOMJS_VERSION_SHORT=$(echo $PHANTOMJS_VERSION | tr -cd '[[:digit:]]')\n export PHANTOMJS_EXECUTABLE=\"bin/phantomjs$(echo $PHANTOMJS_SHORT_VERSION) --local-to-remote-url-access=yes --ignore-ssl-errors=yes\"\n. Ok, I've changed the configuration so that now it will use ENGINE and ENGINE_VERSION environment variables to determine what should be downloaded and used.\nThe engine is now downloaded to engine.tar.bz2 and extracted (ignoring the top directory of the archive) to the engine/ directory.\nThis will remove the need for calculating where the binary files should be located.\nI've also kept two global environment variables PHANTOMJS_EXECUTABLE and SLIMERJS_EXECUTABLE since they won't conflict with each other and they should be the same for any tested version of that engine.\n. I'll take a look at this tomorrow to see if it's an issue with the .NET launcher\nSorry I've been kind of inactive lately, but I've been pretty busy with school this past month.\n. Ok, I found the issue. If you check the travis builds, the builds that passed do in fact have the failed tests.\nI got it working by changing the lines in tests/suites/xunit.js from:\ncasper.start().setContent(xunit.getXML());\nto:\ncasper.start().setContent(xunit.getSerializedXML());\n. This also brings up an issue about the test suite not returning the correct exit code when using the python launcher.\n. Everything looks good to me. :+1:\n. I restarted that job to see if it's just an anomaly.\n. Ok, looks like it's still failing. I'll try to take a look at it tonight.\n. This should be good to go. The first time it failed, it was failing on casper.back() and the second was on casper.forward().\nIt appears to just be a coincidence that they happened back to back of each other.\n. @n1k0 How would you want me to go about fixing the jslint error?\n. This fails because I forgot to make the call after Mono had been installed.\nBut, it still proves my point that the Travis tests are always being run against PhantomJS 1.9.2 and not the versions downloaded.\n. It appears as though there is an issue with PhantomJS 1.8.2 that was overlooked because of this issue.\nAlso, some adjustments need to be made so that SlimerJS can be run in a headless environment\n. @n1k0 @mickaelandrieu \nAny chance this could get some attention? It is failing on purpose because the current Travis builds are all using the same engine (PhantomJS 1.9.2)\nFor example (https://travis-ci.org/n1k0/casperjs/jobs/15739147) should be running on SlimerJS v0.8.5, but if you expand line 111 of the log, it is using PhantomJS v1.9.2\n. If I remember correctly, CasperJS v1.1.0 is supposed to remove PhantomJS support below v1.9.x, so removing that version from the build file would fix that issue.\nApart from that, everything appears to be working in way of Phantom, while Slimer has yet to become headless.\nIt looks like this may be a solution for Slimer for now. I'll try to take a look into a solution this weekend.\n. This PR has been superseded by PR #1310 \n. My only issue with this is that it no longer works on Unix-based systems because the backslash is hard-coded in.\nChanging the first line to this fixes that problem:\n@\"\"\"\" + Path.Combine(Path.Combine(CASPER_PATH, \"bin\"), \"bootstrap.js\") + @\"\"\"\",\n@n1k0 Is there any reason why Travis isn't testing pull requests anymore?\n. Closing/Reopening to trigger a Travis build.\n. It looks as though the issue is that we are compiling with dotNET 3.0, which does not have support for:\nPath.Combine(String, String, String);\nHere is the workaround that I have been using:\nPath.Combine(Path.Combine(str1, str2), str3);\nBy taking this approach, we don't need to require dotNET 4.0, which is only shipped by default with Windows 8.\n. Awesome. Thanks!\n. @istr This PR should have been closed a while back in favor of #1310.\nThat PR has support for 2.0.1 as well as the 1.9.x series.\nIt was brought up a while back that SlimerJS wasn't being tested #776 (should be fixed by my other PR).\nI've been pretty busy lately, but I'll try to get some issues created over on the SlimerJS project so that the remainder of the tests can be fixed.\n. > Which version are you using?\n$ slimerjs --version\nInnophi SlimerJS 0.9.6, Copyright 2012-2015 Laurent Jouanneau & Innophi\nI can check into why this is happening, but i may not get to it until this weekend.\n\nRight now Travis is using the ENGINE_EXECUTABLE environment variable, which isn't being used by either the python or the dotNet launchers.\nSome options that I'm considering are to:\n- Update both launchers to use this env variable in addition to the PHANTOMJS_EXECUTABLE and SLIMERJS_EXECUTABLE (I'm assuming that these variables should override the generic ENGINE_EXECUTABLE if they are present)\n- Update the Travis config to set the correct env variable\nThe second option may actually end up being more work in the long run, but I'll investigate both.\n\nWith either of those options, we will need to either update both launchers to use a CASPERJS_ENGINE env variable as an alternative to the --engine= argument or allow the makefile to take arguments so that the engine can be specified.\nI'm leaning towards the first option because it would make the feature available outside of our testing.\nIt shouldn't be much more than changing line 86 of the python launcher to:\npython\nENGINE = os.environ.get('CASPERJS_ENGINE', 'phantomjs');\n. I forgot that the ENGINE_FLAGS variable is appended to ENGINE_EXECUTABLE \nENGINE_FLAGS=\"--local-to-remote-url-access=yes --ignore-ssl-errors=yes\"'\n...\nexport ENGINE_EXECUTABLE=\"$ENGINE_EXECUTABLE $ENGINE_FLAGS\"\nI'll look into this and hopefully get a patch out tonight.\n\nAlso, this patch should replace #776\n. My last commit was just a hunch and it looks like I was right; the ENGINE_EXECUTABLE variable is out of scope of the script section in the Travis tests.\nI'll try exporting the variables, so the lines would look like:\nif [[ $ENGINE == 'phantomjs' ]]; then\n  export ENGINE_EXECUTABLE=\"engine/bin/phantomjs\";\nelif [[ $ENGINE == 'slimerjs' ]]; then\n  export ENGINE_EXECUTABLE=\"engine/slimerjs\";\n@n1k0 Would you like me to revert the changes that I made in b042eba?\n. @n1k0 @mickaelandrieu \nI've been looking into the failing tests and it appears as though the PhantomJS v1.8.2 tests are failing due to the page.onResourceError event not having been implemented until v1.9.0 (https://github.com/ariya/phantomjs/issues/10954). Support was also not added to SlimerJS until v0.9.0 (https://github.com/laurentj/slimerjs/issues/92).\nWith these versions being more than 2 years old, it may be time to remove support for them. Thoughts?\n```\nTest file: /home/travis/build/n1k0/casperjs/tests/suites/casper/resources.js    \nBasic resources tests\nPASS Basic resources tests (5 tests)\nPASS only one resource found\nPASS two resources found\nPASS phantom image found via test RegExp\nPASS phantom image found via test Function\nPASS phantom image found via test String\n\"resource.error\" event\nPASS \"resource.error\" event (3 tests)\nTest server url not found: /tests/site/non-existant.html (file: /home/travis/build/n1k0/casperjs//tests/site/non-existant.html) warning\n\u26a0  \"resource.error\" event: 3 tests planned, 0 tests executed\n```\n. @mickaelandrieu Can you take a look at the last build for #1310?\nThat build should be testing against the correct engine versions, however there is still some work to be done to get all of those versions passing.\nI'm working on getting SlimerJS v1.8.4 and v1.8.5 working at the moment, and hope to have them ready by the end of the week.\n. @n1k0 I'll try to do a full review today, but so far it looks pretty good.\n@istr Thanks for all the work you've done to get this ready.\n. I commented on a bit of code that may have been left in by mistake, but please correct me if I'm wrong.\n\nAlso, the request.abort() tests are still being skipped on the PhantomJS tests.\nJust as an example, the results for PhantomJS v1.9.2 Python has the following lines:\nTest file: /home/travis/build/n1k0/casperjs/tests/suites/casper/request.coffee  \nSKIP request.abort() test is broken for slimerjs\nThe following changes could be made to to fix this:\n``` diff\ndiff --git a/tests/suites/casper/request.coffee b/tests/suites/casper/request.coffee\nindex c56f06d..9f463f8 100644\n--- a/tests/suites/casper/request.coffee\n+++ b/tests/suites/casper/request.coffee\n@@ -2,11 +2,8 @@\nutils = require \"utils\"\n-if utils.ltVersion(phantom.version, '1.9.0')\n-  casper.test.skip(6, 'PhantomJS version <1.9.0 does not implement request.abort()')\n-  casper.test.done()\n # FIXME: abort test does not work for slimerjs, either -- disable\n-else if true\n+if phantom.casperEngine == 'slimerjs'\n   casper.test.skip(6, 'request.abort() test is broken for slimerjs')\n   casper.test.done()\n else\n```\nThis removes the PhantomJS 1.9.0 check since we no longer support any versions of Phantom under 1.9.1.\nIt also adds a better check for SlimerJS so that we don't skip the check on Phantom\n\nApart from that, everything looks good. :+1: \n. Everything looks good to me now.\n@n1k0 @paazmaya I can go ahead and merge this if you guys think it's ready.\n. It looks like everything @n1k0 mentioned was fixed.\nI'm busy at the moment, but I should be able to look it over in about an hour.\n. Everything looks good to me.\nI couldn't find an issue that documents that the SlimerJS clitests are being skipped.\nI'll go ahead and create one and then merge this PR.\n. Merging\n. Looks good to me.\n@mepard Thanks for the fix\n. Was able to borrow a friend's Window box to test this and everything looks good.\n@mepard Thanks for the contribution!\n. What do you mean by the original case?\n. getElementInfo() already used\nattributes[attr.name.toLowerCase()] = attr.value;\n. There's an explanation here\nAnd the documentation here\n. This is currently skipping the tests on both PhantomJS and SlimerJS\n. These lines could be removed if you make this change\n. It actually worked in PhantomJS due to an implicit event variable in Webkit (a125fd1).\nThe issue was in SlimerJS where Gecko uses the function definition to determine the variable name.\n. ",
    "dkinzer": "Ah. I'm so sorry about that.  I'm closing this pull request and doing it the right way.\n. ",
    "ewatch": "That's totally fine with me. Thanks for you tip. I also saw that you also used the concat method which I also wanted to introduce now to the code. Nice, that I could contribute something to the project. I am looking forward to push other things forward as well.\n. ",
    "fwebdev": "I added a pullrequest to change the attribute \"duration\" to \"time\". Otherwise Jenkins will not read the File properly.\nhttps://github.com/n1k0/casperjs/pull/681\n. I can not keep duration for compatibility here. Because Jenkins will not accept XMLs with duration in Tag \"testsuite\".\nI don't know how to handle this issue then.\n. ",
    "rbarreca": "@n1k0 I added a super basic test and a PR for docs at https://github.com/n1k0/casperjs/pull/326. Let me know if you'd like anything else.\n. ",
    "tylerritchie": "Yeah, I am ashamed. I had the selftest working and thought my non-typo was committed, but... I was wrong...\n. @n1k0 deleting the event handler and adding a new one was the first thought that came to mind for testing both accepting and canceling a confirmation dialog.\n. @n1k0 my terminology in the ticket regarding testing the 'page.confirm' event handler was incorrect, it's a filter not an event handler, and there currently is no casper method for removing filters\n. ",
    "yannickcr": "Great feature ! (minus a little issue #330)\nBut I think you should wait for the 1.1 for pushing this, adding some new features during the validation of a release candidate is not a recommended behavior ;)\n. ",
    "christiantakle": ":+1: \n. ",
    "lukeasrodgers": "Okay, made the changes discussed, rebased and pushed.\n. I didn't realize getFieldValue was part of the public API, my bad, in which case, yes it seems like passing a selector rather than an actual HTMLFormElement is preferable, although passing the form element makes it easy to pass it on as scope to findAll.\nPassing a selector rather than HTMLFormElement also obviates the need to check for a valid form, I think.\nI'll refactor accordingly. \n. Would you prefer that I rebase my work so this all stays in one commit, or will you squash them when you merge? Or no preference?\n. ",
    "mduvall": "Hi @jfparadis, thanks for this commit. Could we maybe add this to bin under casperjs.sh as a shell script? I tested this with Cygwin, assuming you did it on Git bash this looks good to me!\n. Great change @MisterY. Do you mind adding test coverage and documentation in docs/modules/casper.rst? Much appreciated!\n. @n1k0 Definitely, sorry about leaving that out initially. I pushed the documentation under 1.1 and listed explicitly the types of elements that sendKeys will send the keyboard events to.\n. @mickaelandrieu I agree and have seen a lot of JS tools follow this convention (--reporter in JSHint and --format in ESLint). It reduces the ambiguity in specifying multiple formats at the same time (casperjs --reporter-json --reporter-xunit).\n. Tests and documentation changes incoming.\n. @n1k0 Have you seen this behavior? All tests seem to be passing on TravisCI but showing up as failures here?\n. @n1k0 Updated the linting checks, thanks for letting me know about that. Will add a follow up commit to update the CONTRIBUTING.md as well!\n. @n1k0 This look good to go?\n. Cool, I think that --verbose is more inline with other unix tools. Merging.\n. Taking out the glob vars may be more maintainable in the long run, what do you think @n1k0?\n. @hexid Awesome this looks good! Merging.\n. @n1k0 I added in support for assertField but was wondering if we should add a method assertFieldBySelector or deprecate the current API for the function prototype assertField(finder, expected, message) where finder is a defined object that can either support CSS selectors, XPath selectors, or specifying the format by the name of the input as it is now during deprecation. Thoughts?\n. @n1k0 That sounds good, keeping the two interfaces consistent is probably better than overloading assertField in the commit. I'll update the code and docs. The alias makes sense and supporting BC will be good. What's the stance in casper on deprecation? SemVer?\n. @n1k0 Conformed to the fill* API for the assertField* methods, docs incoming.\n. Build was red due to linting error, 54490e9 should amend\n. @n1k0 Ah this fell off the dashboard! Must look at the pending PR dashboards more often.\nI agree with the format of assertField taking the object here, I will go with that in a separate PR and close this one.\n. Good to know, added it to the function scope!\n. Nice catch, updated docs\n. You could remove these two log lines.\n. @returns here for consistency?\n. Sure, added a test as well.\n. Sure thing thanks for catching that!\n. Woo!\n. Good point, added to the documentation.\n. ",
    "paazmaya": "As @mduvall mentions, please place the script under bin directory, since batchbin no longer exists, and name it casperjs.sh.\nAny documentation additions needed, perhaps telling briefly about this script and stating that it is PhantomJS specific?\n. @alonisser any updates on this PR?\n. @jpz any updates on this PR?\n. @n1k0 next merge candidate?\n. > We can\u2019t automatically merge this pull request. \n. Let's do this\n. Would assume this coming out in the next beta.... couple weeks.\nThe actual 1.1 hopefully before Summer\n. @r8k any updates on making the changes requested by @n1k0 ?\nThis could be then merged...\n. Thanks!\n. Might be, with a broken server or with a mockup data...\n. @bcbcb any changes of making the requested changes?\n. Could you provide a link to the (archived) mailing list thread mentioned?\n. @DarrenCook any updates on the mailing list thread?\n. Could you update this PR on top of current master ?\n. Not exactly sure how concise is supposed to affect the tests, but since by default it is false the given changes looks legitimate.\n. Looks good, so all I can say is :+1: \n. Looks legitimate\n. Can you please create another pull request in which you have the TrifleJS related changes?\n. Umm... have you taken a look at the \"Files changed\" tab?\n. Great that you fixed many of the linting errors.\nThere seems to be plenty of whitespace inconsistencies, mainly between the next word and comma.\nCan you please fix those?\n. Also the \"versionadded\" in all of the new methods\n. Yes, in the documentation\n. Most likely due to update PhantomJS 1.9.8, which has an issue https://github.com/n1k0/casperjs/issues/1068\n. Thank you for cleaning white space, now much easier to read differences and comment on them. Sorry for the slow process...\n. Looks good\n. Have I added enough commits on this.... ?\n:neckbeard: will be creating a new PR\n. Ok, this will would be merged right after releasing 1.1 ?\n. Perhaps this PR should be made against the phantomjs-2 branch...\n. Perhaps this can be re-evaluated when the project moved under casperjs organisation?\n. @mickaelandrieu should there be a comment in the new code stating that it is needed only for the given workaround?\nAlso, I don't quite understand why there was a PR which was very soon merged by the same person. Please correct me if I am wrong, but wouldn't the point of having a PR is for possible comments and someone else to merge it?\n. @n1k0 @mickaelandrieu any comments on this?\nIf nothing major, feel free to merge, as it is easier to continue adjusting the rules once the new tool in taken in use.\n. @mickaelandrieu due to 38 linting errors found by ESLint. I could either fix those (and create conflicts for many other PRs) or tune down the lint configuration so they appear as warnings (and fix them later...).\n. @mickaelandrieu green light acquired!\n. @mickaelandrieu now is in single :bride_with_veil: \n. @46bit could you update this PR against https://github.com/n1k0/casperjs/tree/phantomjs-2 ?\n. Can you provide possibly a test case where this happens and include in the PR?\n. After checking the tests/selftest.js, I agree with @istr. Thank you for pointing that out.\n. @istr Would it be possible that the fixes you are making for SlimerJS test would be in a separate PR?\nIt would make it easier to review and merge\n. Perhaps the documentation could contain a link to the relevant section of npm-install and have first command example without the version, while the second would be beta-3.\n. Kicked :walking: \n. Thank you sir!\nStrange that it has been like this for some time...\nI am merging this for the sake of having visibility for SlimerJS support.\n. Please update ESLint as well if the configuration changes are related to the recent version, like 1.9.0,\nhttps://github.com/n1k0/casperjs/blob/master/.travis.yml#L30\n. @n1k0 @hexid any comments on this?\nI would be happy just to merge, as this is something that has been long coming and waited for. \n. Restarted those two failing tests related to dotNet and PhantomJS 2.0.0 and 2.0.1....\n. All green! Thank you @istr for the effort!\n. @n1k0 the failing tests were related to some popup test which could not find nor close the popup.\nOnce ran them again, they passed...\n. Again two tests failing, both on fill() & fillNames() tests, other one dotNet, other one \"regular\"...\n. @istr would you consider possible that CasperJS v1.0.x is supporting only up to PhantomJS v.1.9.x, and CasperJS v2.0.0 starts the support for for PhantomJS >=v2.0.1 (while also keeping v1.9.x supported)?\nSee discussion #1177\n. @istr very well argumented. Let's make 1.1!\n. @hexid may you do the honour?\n. :grapes: and :wine_glass: !\n. All PhantomJS related tests seem to fail...\n. This is great news! and great achievement, thank you @istr !\n. Thank you!\n. Thank you for the syntax changes, but for the possible added functionality I would like to hear others opinions before merging\n. In order to be backwards compatible, check that if the headers argument is boolean, then it would in fact be the async, etc\n. Could you include the complete working code in the example?\n. @mickaelandrieu sure thing.\nIs this documented yet anywhere?\n. Sure\n. ... and it is not capable of using native NodeJS modules.\n. It would make it a bit clearer if the wording would be versions before and versions since\n. Missing trailing semicolon\n. Tabs?\n. Tabs to spaces, please, in order to keep consistency\n. :rainbow: \n. @jcaron23 any comments or possibility to change this?\n. @snow01 Could you add a link to the relevant API documentation?\n. Perhaps curly brackets could be used here, as it seems to be the case with the rest of the file, but then again, they were not there before....\n. I think the merge could be done now, and the curly brackets consistency added later.\n. Braces for everything would seem to be the future approach.\n. It is about the given file having too many statements.\nI am currently working on #1133 which touches this, so you can leave it as it is.\n. Good catch, as the fn is documented to be a function, this should be safe\n. Perhaps all there \"versionadded\" parts should have unified version number in them and the way it would seem to be now, it is 1.1.\n. One space after comma\n. I agree with using link_text instead of link text.\n. One extra space\n. space after comma\n. Indentation seems to have been misplaced\n. Ok, perhaps we should open an issue. Would you @istr be willing to do that, as you have the best current knowledge about the subject?\n. Setting bounties for issues and such seems good to me\n. When file.path is array with one or zero items, the paths will be an array containing an array.\n. White space missing after colon\n. How about using typeof check against undefined?\n. This would give the impression that the third parameter is required when the second is given.\nPerhaps (String url [, String method [, Object data, Boolean async ] ] )\n. Are these commented lines needed for something?\n. ",
    "istr": "Like @hexid pointed out there is sufficient support by means of the mono builds. Closing.\n. While passing global serializable objects through JSON.stringify and JSON.parse is kind of a kludge, this hack to pass non-serializable objects is an even uglier kludge imho.\nClosing. Any collaborator: feel free to re-open / or continue discussion.\n. Abandoned. Closing in favor of #1425 that is about to be merged.\n. @clochix Could you do us a favor and merge back current master to your PR?\n. @brandon-bethke-neudesic Could you please try and merge current master to this PR? Thanks.\n. This duplicates https://github.com/n1k0/casperjs/pull/928 that could be merged without conflicts. Closing as duplicate in favor of that one. Feel free to re-open when having it rebased against master and tests pass.\n. Looks ok to me, too. @n1k0 @paazmaya @mickaelandrieu @hexid any reason to still keep this open?\n. I'll try to review the change-set against beta 5 and publish beta 6 next weekend.\n. @NghiemDuongHung Please open a new issue with your finding. Thanks.\n. Ok, I created 1.2 and moved all non-bug issues previously in 1.1 there.\n. The tests are too old to be restarted. But I guess we have a good idea why intermittent failures occur from time to time.\nIt would be great if you could just re-base this PR against current master. This seems to be a very low hanging fruit to resolve an open issue. :-)\n. ping @BIGjuevos: a candidate for \"re-PR\". \n. Merging. Fine-Tuning along the lines @paazmaya proposed will be done in the branch to prepare 1.1.0-beta4.\n. Looks good, but I would drop the additional echo / INFO messages.\n. Closing in favor of rebased merged PR #1507.\n. Please rebase against master.\n. @paazmaya Please rebase against current master so we can see if your test passes for the supported engines in master.\n. Closed with PR 1310 and PR 1352.\n. We will retain BC for 1.1 and 2.0 will probably not come up in the near future. Please create a new PR against the 2.0 branch and update like @paazmaya advised. Thanks a lot. \n. Lots of discussions down the road meanwhile.\nI am :+1: to merge this now. @46bit Would you mind rebasing it?\n@mickaelandrieu @BIGjuevos I would \"just do this\" now.\n. @mickaelandrieu similar situation over here... But wanted to keep my promise and get back to CasperJS \"somewhere mid June\"... :-)\n. My 2.0.0 PR fixes this issue, too. Probably setting the function name to some  dummy name was a fix that addressed some phantomjs pre 1.9.1 issue.\n. Closed with PR 1352.\n. A test for this would be great.\n. I find the use-case plausible and this feature useful. The PR is feature-complete, has docs and tests.\n:+1: to merge this. @mickaelandrieu @BIGjuevos \n. @jefleponot Why did you close this one?\n. Looks good. Complete PR including test -- obviously read CONTRIBUTING.md (and thanks for fixing the glitch in it).\nHowever, might be better not to create a second server but to integrate the special redirected URL handling into the already existing, custom testing server tests/selftest.js.\nYour opinion @paazmaya, @hexid?\n. Good candidate for cloned PR imho @BIGjuevos @mickaelandrieu\n. Seems to be a 1:1 duplicate of https://github.com/n1k0/casperjs/pull/1235. Please correct me and re-open if I missed something.\n. Makes totally sense. :+1: to merge this.\n@jefleponot would you mind rebasing this? @mickaelandrieu @BIGjuevos \n. Please rebase your PR against current master. Build failures seem to be spurious eslint problems and a \"chainable\" fillForm is nice to have.\n. There are lots of good pointers how to do this, e.g.\n- https://help.github.com/articles/syncing-a-fork/\n- https://robots.thoughtbot.com/keeping-a-github-fork-updated\n- http://stackoverflow.com/questions/7244321/how-to-update-a-github-forked-repository\n- https://2buntu.com/articles/1459/keeping-your-forked-repo-synced-with-the-upstream-source/\n. This was addressed and clarified in 679c93a3452117115f1e2e136b194199057b5e4f. Closing.\n. Please rebase your PR against the current master. Failing tests were due to spurious eslint issues. Thanks.\n. Merged. The change is trivial and won't break anything.\n. Would you mind adding a simple test to tests/suites/casper/formfill.js that references the original issue #1275?\nI will merge this when there's a test included demonstrating that this issue is resolved by this PR (even though the fix itself is trivial).\nThanks.\n(This points to a general problem with \"type safety\" in setField and and thus fill. More tests and more robust \"convert to string\" policy would be nice to have.)\n. @paazmaya,  @hexid Please have a short look. I would like to merge this.\n. @mickaelandrieu Ok, thank you. Sorry that I missed to address you personally, too.\n. My 2.0.0 PR addresses / fixes this issue, too.\nSee this commit.\n. Closed with PR 1352.\n. @hexid do you happen to remember the commit that breaks slimerjs? I am halfway through with 2.0.0 / 2.0.1 support, but currently running into the very same issue with slimerjs.\n. Ok, thanks for the clue. Some of the failing tests are not issues with slimerjs but with the test suite itself. I am trying to fix as much as I can in my feature branch within the next few days, because I need 2.0 support in a current project and can take the time to address these issues.\n. Yes, of course... Will split into two feature branches.\n. Submitted in PR https://github.com/n1k0/casperjs/pull/1351.\n. @hexid @n1k0 Are you ok with removing the stale branches phantomjs2 and phantomjs-2 now?\n. Great! Thanks for the fundamental work to prepare phantomjs2 support. :+1: \n. @JZL I think there still is the need to point out how to install a specific, older (not the latest) version. So this PR is still valid and relevant.\n. Merging. Further updates to this document will follow in a dedicated 1.1.0-beta4 branch.\n. Ok, let me try to resolve the conflicts.\n. Regressions wrt eslint/jshint fixed, build passes. Please review and pull.\n. Updated eslint, adjusted some settings (e.g. comment markers).\n. This is superseded by version 2.0.0 support PR.\n. This is the first successful build for phantomjs 2.0.0 support.\n. If you have a closer look at the builds you'll notice that some tests took longer than could be expected; watching them showed that travisCI had even trouble to install some npm modules (took over 3 minutes in some cases). So I guess it was just slow travis infrastructure -- but I will re-check again and maybe it would be a good idea to add some non-functional changes (e.g. to reduce lint warnings) and see a sequence of passing builds w/o intermittent failures.\n. It seems that there are still some tests that are susceptible to timing issues (apart from the popup functionality, see some of the latest failing builds). I will try to tweak / correct these tests and then add commits that fix linting issues to trigger more builds for this PR.\n. > Again two tests failing, both on fill() & fillNames() tests, other one dotNet, other one \"regular\"...\nYes, see my comment above. This is closely related to this stale PR wanting to introduce block conditions for then() calls. Currently calling then() immediately after thenClick() or evaluating a condition directly within thenClick() callback might fail due to timing issues in any case.\n. > Thanks for all the work you've done to get this ready.\n@hexid Thank you, too. In fact you kicked it off and did at least 50% of the work to get there (see commit log, all the helpful pointers and hints in your issues / PRs, and showing how to properly package travis-ready versions of phantomjs pre-releases).\n. @hexid Thanks for your thorough review. I will try to apply your proposed changes, check them locally and commit them later today.\n. @hexid Applied your proposed changes, improved engine detection in tests/clitests/runtests.py and build passes.\n. Ok, will add the proposed changes / amendments.\n. Here is my proposal for an engine specific test skip function in modules/tester.js\njavascript\n/**\n * Skip `nb` test on specific engine(s).\n *\n * A skip specifier is an object of the form:\n * {\n *     name: 'casperjs' | 'phantomjs',\n *     version: {\n *         major: Number,\n *         minor: Number,\n *         patch: String | Number\n *     },\n *     message: String\n * }\n * \n * The version is matched up to given specificity. All parts of the\n * version (including version entry itself) are optional, but you need\n * to specify minor if patch is given and major if minor is given.\n *\n * @param  Integer  nb        Number of tests to skip\n * @param  Mixed    skipSpec  a single skip specifier object or \n *                            an Array of skip specifier objects\n * @return Object\n */\nTester.prototype.skipIfEngine = function (nb, skipSpec) {\n...\n};\n. Hopefully addressed all changes @n1k0 mentioned.\nIntroduced test.skipIfEngine and utils.matchEngine. Tests for this new functionality are still missing but I would like to address those in a subsequent feature branch to get 2.0.0 support landed.\n(Edit: ...and at least issue a 1.1-beta4 that contains 2.0.0 support to allow for broader testing.)\nPlease review (build passes).\n. @paazmaya To be honest I don't really care much about versioning policy. From what I gather in the old issues marked milestone 2.0.0 and marked milestone 1.1 and from the discussion threads I read, the current setup is as follows:\n- 2.0 marked issues may contain substantial changes to the API and might break BC\n- 1.1 marked issues do not contain any changes that break 1.0 / current master API and/or basic behavior, try too keep BC as much as possible, but affect support of the underlying engines\nThat is from my understanding:\n- 1.0.* supports phantomjs up to 1.8.* (< 1.9.0) and is marked obsolete / stable\n- 1.1.* supports phantomjs 1.9.1 and later as well as slimerjs (experimental)\n- 2.0.* will support phantomjs 2 and later and possibly breaks API with 1.* versions\nIn short: I don't see that the CasperJS jump from major 1.* to major 2.* has to be coupled to phantomjs2 support, but should reflect a major change within CasperJS itself (which phantomjs2 support definitely isn't).\nSo to not slow down things I would prefer to proceed along these lines:\n- get 1.1 ready (after some two or more beta cycles for bugfixing only) with complete BC and as much engine support we could currently get (this PR)\n- schedule, sort and discuss 2.0 feature set (with possible API changes and possibly breaking BC) thereafter\nThe only thing that matters for me (and possibly most others waiting for phantomjs2 support) is to get out a next publicly available beta ready for testing as fast as possible.\n. @paazmaya @hexid Any chance you could do a last review and merge this PR? Even though I could do it on my own now, I would dislike to merge in this large change-set without approval (\"four-eyes principle\").\n. @hexid Nice, thanks a lot! Will close the issues PRs that are superseded now. Let's see how to proceed with the next beta and what open 1.1 issues to include.\n. Cancelled useless travis build for this PR.\n. @mickaelandrieu If this test is ok for you, please merge it. Even though I could, I try not to merge my own change-sets (four-eyes principle).\n. > Build failure is due to an intermittent we have sometimes with phantomjs 2.0.1.\nAha, I see. This is not intermittent, but a change that was dropped from my PR (because I could not recall why the fix I made was there: https://github.com/n1k0/casperjs/pull/1352#discussion-diff-45838428).\nI will re-add these changes in a separate PR that make things work for 2.0.1 again.\nEDIT: I am not sure why that occurs in 2.0.1, maybe there is a problem with the global setting (enable js) copied over to the instance?!\n. It is good that you present test cases. Please include them in your PR, so we can just pull your branch and inspect what is stilling missing to make your bug-fix fully functional.\n. @jefleponot Thanks a lot for this PR :+1: .\nIt seems that you have a regression with form selects in your patch. Some builds fail for receipt of JSON content.\nPlease:\n- have a look into what causes the regression(s) and fix it\n- lint the code (some builds fail due to linting)\nI would never silently change the API behavior due to the engine version in use, though.\nCould you re-work your PR along my proposal and\n- just keep behavior for the sync functions\n- mark them obsolete / not recommended in the doc and give a hint to use the new waitFor... functions instead?\n- maybe throw an error within the non-recommended functions when used with an engine that does not support them?\nI would really like to integrate this PR into 1.1 because it is a major improvement.\n. Nice! Thanks a lot. Restarted the failing job (known intermittent popup bug).\nWill review, ask a second collaborator for opinion and then merge.\n. @jefleponot  Sounds good. Maybe it would be best to create separate feature branches to help make the different change-sets small.\nAny improvement is welcome. Especially those that help to close the numerous open issues.\nThanks for your support.\n. @mickaelandrieu thanks for quick review. :) Maybe let's discuss the question:\n- silently change API behavior based on engine in use\nvs.\n- warn the user she's trying to do something that won't be supported in the future\napproach with @n1k0, @hexid, and @paazmaya...\nEDIT (see also discussion at #1342)\n. I would prefer not to break the API in this way:\n- do not introduce boolean parameters\n- especially do not introduce boolean parameters that change the previous \"default\" behaviour\n- do not make the default behaviour / value dependent on the engine version in use\nSee https://github.com/casperjs/casperjs/issues/1342#issuecomment-207848750 what I would like to see in this PR instead:\n- mark the current (broken) API functions obsolete and add a \"broken\" comment to the docs\n- add a warning to those functions that say: \"this is broken and will not work; it is obsolete and will be removed\"\n- create a new set of functions that implements what this PR achieves\n. Trivial change, checks pass. No need to add documentation for that, because there already is an example how to pass engine options in cli.rst. Merging.\n. Looks good; better than to arbitrarily merge in the CasperJS root path imho.\n@paazmaya, @hexid, @mickaelandrieu, @n1k0 please give a second opinion and/or merge.\nMerge this before https://github.com/n1k0/casperjs/pull/1388 and https://github.com/n1k0/casperjs/pull/1389.\n. Looks good; however this could actually only be tested on a windows platform (so no chance to check the difference in CI, see https://github.com/travis-ci/travis-ci/issues/216).\n. Contains the change set of https://github.com/n1k0/casperjs/pull/1387.\n. Looks ok; @paazmaya, @hexid, @mickaelandrieu, @n1k0 please give a second opinion and/or merge.\nMerge this before https://github.com/n1k0/casperjs/pull/1389.\n. The failed jobs are known (but unresolved) issues that tend to occur when travis is under high load. After a restart all jobs passed.\n. Contains the change sets of https://github.com/n1k0/casperjs/pull/1387 and https://github.com/n1k0/casperjs/pull/1388.\n. Looks ok; @paazmaya, @hexid, @mickaelandrieu, @n1k0 please give a second opinion and/or merge.\nMerge this after https://github.com/n1k0/casperjs/pull/1388.\n. Ping. Anybody having the chance to test this on windows? Sorry that I did not make it yet -- would like to accept this bug-fix being the last in a series of three.\n. Yes. Sorry, but I am kind of running out of time right now... Don't expect me to check this before start of next week -- feel free to nag any of the other collaborators / maintainers about it... :-)\n. Great! Thank you!\n. @hexid, @paazmaya, @mickaelandrieu, @n1k0  Please review.\n. Nice -- thank you. Could you adjust indentation to the other code examples in the page?\nApart from that :+1: to merge.\nA hint (how) to put this into tearDown like in tests/suites/casper/request.js or tests/suites/casper/open.js would be nice, too. :-)\n. Thanks a lot.\n. Great! Could you please replace the link to my inofficial build with the link to the official release in this PR?\nThank you.\n. Ok, I restarted the failing tests. The new engine still fails two of the client tests. This needs investigation.\n. Ok, then let's keep the unofficial 2.0.1 but add the official 2.0.0, too.\nI will try to see what happens in the failing tests.\nEDIT: currently the tested 2.0.0 build is an unofficial build provided by @hexid.\n. Please find attached a patch that fixes the clitest for 2.1.1. It seems that this build (version?) neither reports line numbers nor code fragments in the stack trace. I am not yet sure why, but remember similar situations where removing the reported line number fixed the test for 2.0.0 and 2.0.1.\nEDIT: works for me using phantomjs 1.9.1, too.\npatch\ndiff --git a/tests/clitests/runtests.py b/tests/clitests/runtests.py\nindex 20823d0..0f1ae27 100644\n--- a/tests/clitests/runtests.py\n+++ b/tests/clitests/runtests.py\n@@ -347,8 +347,7 @@ class TestCommandOutputTest(CasperExecTestBase):\n             '# true',\n             'FAIL Subject is strictly true',\n             '#    type: assert',\n-            '#    file: %s:3' % script_path,\n-            '#    code: test.assert(false);',\n+            '#    file: %s' % script_path,\n             '#    subject: false',\n             'FAIL 1 test executed',\n             '0 passed',\n@@ -365,7 +364,7 @@ class TestCommandOutputTest(CasperExecTestBase):\n             '# step throws',\n             'FAIL Error: oops!',\n             '#    type: uncaughtError',\n-            '#    file: %s:5' % script_path,\n+            '#    file: %s' % script_path,\n             '#    error: oops!',\n             'FAIL 1 test executed',\n             '0 passed',\n@@ -444,8 +443,7 @@ class TestCommandOutputTest(CasperExecTestBase):\n             '# true',\n             'FAIL Subject is strictly true',\n             '#    type: assert',\n-            '#    file: %s:3' % failing_script,\n-            '#    code: test.assert(false);',\n+            '#    file: %s' % failing_script,\n             '#    subject: false',\n             'Test file: %s' % mytest_script,\n             'PASS ok1',\n. @mickaelandrieu ping... Would you mind integrating my patch in your PR to see if it works? Thank you.\n. @mickaelandrieu Thank you! :+1: Merging. No need for excuses though -- everybody should be happy and thankful for your support. :-)\n. From my point of view we could publish master as beta 4.\nWe would need @n1k0  to npm owner add <user> casperjs at least one of us, so we are allowed to push a new version. My npm user is istr.\n. Thank you! Apart from a consistent typo in the jsdoc this looks good and complete to me.\nI would like a second opinion, but :+1: to merge after slight corrections (I will place commit comments).\n. Closing in favor of merged #1417 like @jefleponot proposed. If you think that this PR has any relevant use cases not covered by #1417 feel free to re-open.\n. Basically it could be a good idea -- however test cases and updated documentation is missing.\n. @mickaelandrieu Ok, agreed. Maybe open an issue to collect which bugs to fix and create a 1.1.0 branch for the few remaining steps?\n. Rebased / merged. @mickaelandrieu If you are happy with this, feel free to merge.\nI will then tag the merged master appropriately and prepare the packaging of it this evening.\n. @mickaelandrieu See https://github.com/n1k0/casperjs/releases when logged in. Preparing the entry and change log there as a draft. I could push that tag now, if you like -- but it could be done automatically by means of publishing the release entry... :-)\n. @mickaelandrieu Yes, indeed. Could you please have a short look at \nhttps://github.com/n1k0/casperjs/releases/tag/untagged-316151748ff029cd4245 before I publish it?\nThank you. :-)\nThe npm release will follow tomorrow, I am getting too tired and do not want to make avoidable mistakes there.\n. Ok. Published. npm packages follow soon.\n. Thanks... It was a pleasure for me. :-)\nLet's see if/how we can re-gain some traction on this invaluable project.\nBTW I bumped the \"hipstered\" version to 1.1-beta4 recently.\n. @jefleponot You introduced some linting errors. See commit comments.\n. Ok, wrt the comments in #1413 I totally agree with @jefleponot. This one is a real bug-fix I would like to merge after some cleanup; see code comments.\n. Great! Apart from some very minor tweaks to the docs and some tiny questions I am ok to merge this. See code comments.\n. @jefleponot Would you mind addressing the eslint issue I mentioned? I would like to merge this.\n. You might need to\n- update eslint (npm -g update eslint)\n- use the following rule \"quote-props\": [1, \"as-needed\", {\"keywords\": true}],\nThe rule did not work for me with eslint 1.7.* and showed your error message, but works with\n$ eslint --version\nv2.7.0\n. Great. I marked (hopefully all) lines that need to be reverted.\n. Thank you so much, @jefleponot. I am now :+1: to merge this. @mickaelandrieu, @BIGjuevos your turn.\n. I am :+1: to merge this. @mickaelandrieu @BIGjuevos \n. Agreed with all comments regarding coding style and documentation quality. @n1k0 : your supervision (be it as a \"quality control angel\" only) is invaluable and a substantial part of maintenance imho. Thanks so much for keeping an eye on your \"ghostly baby\". :-)\n. > damn, tests are now broken :/\nThat is an intermittent error (popup problem #1354), we'll hopefully have fixed very soon (root cause found by @jefleponot).\n. @mickaelandrieu Seems complete, :+1: to merge. Could you please check if the PhantomJS 2.0.0 specific form  regression https://github.com/ariya/phantomjs/issues/12506 is documented somewhere in CasperJS?\n. Ok. Opened a new issue for engine quirks documentation. Merging this one.\n. I am merging this as a hotfix without consultation because @mepard confirmed that the binary basically works.\n. Please have a look into https://github.com/n1k0/casperjs/blob/master/CONTRIBUTING.md.\nWe expect at least\n- documentation\n- tests\n- passing travis builds\n  to accept PRs (your PR currently breaks the test suite due to your changes).\nThanks for understanding.\n. Ok, thank you. I am :+1: to merge this. @mickaelandrieu, @hexid, @paazmaya, @n1k0 ?\n. @maerten Thanks for your contribution!\n. This breaks all SlimerJS tests, even after a restart.\n. > That's strange, with my ubuntu 14.4 and slimerjs 0.9.6 it works to me.\nIf you have a short look into https://github.com/n1k0/casperjs/blob/master/.travis.yml or inspect the build on travis you will see that the test suite checks for SlimerJS 0.8.4, 0.8.5, and 0.9.5, but not 0.9.6 (because it broke coffeescript support in the test suite some time ago).\n. No, fails for me, too.\nUsing SlimerJS 0.9.5 on Ubuntu 14.04.3 and your eslint branch hangs at the same point in the test suite like in travis (betterInstanceOf is the last passing test).\nENGINE_EXECUTABLE=~/bin/slimerjs make selftest is the command to run the tests.\n. > Oups : test failed but green is displayed\nGood finding. This is either because the return code is not passed through by xvfb-run or because the cli tests are skipped for SlimerJS. This is one of the issues why SlimerJS support is still deemed \"experimental\".\n. > why \"make\" in the command ?\nBecause bin/casperjs selftest won't show you any version information, while bin/casperjs --help does. The make command calls both. :-)\n. Looks good to me. Passes after restarting tests failing due to intermittent errors (known bug). I am ok to merge this. @mickaelandrieu ?\n. Looks OK, but don't have time to review it thoroughly.\nI don't understand\n\nOnly one exception : page.settings.resourceTimeout mustn't be under 100 milliseconds. \nBecause of no sense.\n\nCould you explain what that means?\nAny idea how to add SlimerJS support for that?\n. > I'm not against it, but still don't have time to review it, sorry :(\nSame here, probably until mid of June. @BIGjuevos? \n. Apart from some typos I am :+1: to merge this; see commit comments. @BIGjuevos @mickaelandrieu \n. Nice. :+1: to merge this. @mickaelandrieu, @hexid, @paazmaya, @n1k0 ?\n. @mickaelandrieu, @paazmaya, @hexid, @n1k0: I would like to merge this, even though it does not contain a test case.\nIt is a trivial fix for a flaw introduced lately.\n@mepard Do you think that you could add a simple test along the lines of https://github.com/n1k0/casperjs/issues/1448#issuecomment-187331213 for that? That would be great!\n. Merged #1449. Please rebase this PR against current master. Thanks.\n. @mickaelandrieu No problem at all. I think this feature is very useful; the only thing I know @n1k0 might definitely raise an eyebrow about is the switch construct in the code. I would tend to merge it, but give me a chance for a thorough review of the code this evening.\n. @mickaelandrieu Apart from some very minor questions / remarks I am ok to merge this. You decide.\n. > @istr can I assign myself on it ? should be merged as the docs are already online\nYes, of course. Maybe just clone the PR and rebase it, if @Macek007 does not react on this ping?\n. :+1: to merge this. Thank you.\n. Thank you.\n. I don't like the idea to fix this with a platform check, because the bug description and your explanation in #1479 suggest that this is simply a logical bug in the bootstrap / require logic.\nCould you refactor this into a real bug-fix that corrects the order of require and phantom.casperScriptBaseDir to prevent this loop on all platforms?\n. This one looks good. :-D :+1: to merge.\n. @mickaelandrieu Please have a quick look and merge. I would like to stick with the \"four eyes\" principle.\n. Maybe something like https://github.com/n1k0/casperjs/blob/master/tests/suites/casper/formfill.js#L47, but only the other way around and with a coffescript? Have to think this over, too... ;-)\n. @mickaelandrieu \n\nto be honest, I don't see any \"elegant\" workaround\n\nNo problem -- better to bail out and warn users in an \"inelegant way\" rather than letting users run into unexpected trouble.  :+1: to merge this, maybe this could be replaced with an \"elegant\" solution later on. Life is imperfect.\n. Looks OK. No code change involved, so merged without 2nd opinion.\n. @wskorodecki Thanks for contributing.\n. As far as I can see the clean method is not part of the public / documented API anyway. So :+1: to merge. Ping @mickaelandrieu for 2nd opinion.\n. Very useful. :+1: to merge this. As this is basically internal (refactoring) only, I do not see the need to update tests and/or documentation here. @mickaelandrieu @BIGjuevos \n. @mickaelandrieu @BIGjuevos I would like to merge this. Please have a look. Thank you.\n. We should keep this in mind and maybe put that code snippet in a helper function. This pattern occurs in other places, see e.g. #1417.\n. @mickaelandrieu \n\nregarding your last comment @istr, I agree, let's see how this pattern evolve and we will refactor when required\n\nAbsolutely. Let us land this now and refactor when necessary.\n. Merging because it fixes a real bug and has a very useful test-case. Postpone linting / refactoring.\n. > CI build due to S3 being silly.\n@BIGjuevos Yes, there seems to be a throttling in place with no exemption for travis build servers.\nI restarted the build.\n. > I'd like to see a note to inform user that coffee script is not supported with phantomjs 2+ and slimerjs :)\nYes. Let us keep in mind to drop mention of coffeescript completely for CasperJS 2.0 (that might drop PhantomJS < 2.0.0 support).\n. @mishari You could make a lot of people happy if you added some comment about the engines supporting coffeescript at all, right at the beginning of the document. See #1470.\n. > CI Errors are amazon S3 issuing 403s.\nYes, very nasty. Seems to happen regularly now. Any idea to work around the throttling? File an issue against travis CI?\nI restarted the jobs.\n. > Yeah, I say we file this against Travis CI.\nTheir response via support@travis-ci.com: tl;dr: \"host your own copy\"\n\nThanks for getting in touch. We've received a few similar reports from other PhantomJS users and have opened a ticket with Bitbucket to see what we can do. \nA workaround if you are interested is to host your own PhantomJS on S3 and manually install it in\nyour .travis.yml:\nbefore_install:\n- mkdir travis-phantomjs\n- wget {{$S3_URL}}/phantomjs-2.1.1-linux-x86_64.tar.bz2 -O $PWD/travis-phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2\n- tar -xvf $PWD/travis-phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2 -C $PWD/travis-phantomjs\n- export PATH=$PWD/travis-phantomjs/phantomjs-2.1.1-linux-x86_64/bin:$PATH\n- echo \"Building with phantomjs $(phantomjs --version)\"\nI realize this isn't ideal. I'll follow up with an update when Atlassian gets back to me. :)\n. @mickaelandrieu thanks for merging. :-)\n@BIGjuevos \ncan we just \"host our own copy\" through a github branch that is just used to hold on to the gzip files?\n\nThis is nearly what I would have proposed, but rather create a transient dedicated mirror repo on github for that purpose rather than a branch. Could you do that? I would then try to adapt the travis config and make a PR for that.\n. Let's give it a try with a single release that is affected before you dig into the work of replicating the full set. So let us start with e.g. 1.9.8 first. Note that 1.9.1 is not fetched from bitbucket, so should not be problematic: https://github.com/n1k0/casperjs/blob/master/.travis.yml#L43\n. > CI build is common failure.\nYes. Anybody with collaborator access to this repo could just restart the jobs (log in at travis with github and click restart on the failing job after a quick look). I think it is a good habit to do this before merging, but this is only necessary for \"real\" changes (those that touch more than documentation).\n. Ok, thank you. Merging this now (sorry, but always try to work from past to current).\n. Thanks for the rebase. Merging in favor of  identical, outdated #1082.\n. > I fear a possible duplicate with faq section ?\nIMHO duplication would hurt less than omission. I am not sure, though, if it is worth duplicating what is already tracked in github tickets. Maybe we stick with the policy to document only \"known issues\" there that we deem largely unresolvable (i.e. we cannot solve by means of a bug-fix or work-around), like the one @BIGjuevos started with.\ntl;dr -- :+1: to merge this.\n. Ok, thanks for feedback. Hint: you may now use the \"Add your reaction\" feature to get rid of empty \"+1\" comments. ;-)\n\n. @BIGjuevos Feel free to actually merge this PR, grab the draft and publish it yourself if @mickaelandrieu approves it. :-)\nMaybe I am offline tomorrow.\n. > We do have 4 open issues in the milestone. I'll bump to 1.1\nWhy the sudden haste? A released version should have at least a package.json that is in sync with the version published at github, so we may publish the npm 1:1 from the same commit.\nAny valid reason you published 1.1 without bumping the version? This PR was exactly in place to achieve this -- it should have been replaced with a similar PR before tagging the commit 1.1.\n:-/\nI know that -beta6 sounds not that \"sexy\", but it indicates clearly that we have known bugs (and even regressions against -beta3 for Windows) we would like to address to say it is \"production ready\".\nIf it could be done, I'd rather \"un-publish\" this release and at least amend the bumped version so we have the same commit for the .tar.gz / .zip and the npm.\nEDIT: If we opt to release this as a \"non-beta\" I would at least add the open issues to a \"known issues\" list in the release info.\n. > my concern is more \"should we publish now beta6 and wait for 1.1, or wait for 1.1 that is coming very soon ? \"\nMy concern is: let us publish anything asap, but let's keep consistency. :-)\nI am ok with opting for 1.1 now, but if so -- please let us just\n1. cleanly move the open issues to the next milestone\n2. adjust the package.json to the release number we agree upon\n3. release that version number here\n4. create the npm from the same commit\nin that order.\nEDIT: \n5. update the gh-pages branch and the \"latest\" tags\n. @mickaelandrieu I would like to publish what we have now (today or tomorrow the latest), mainly to update the \"latest\" public docs we have online at http://docs.casperjs.org/en/latest/.\nHowever, it seems that this did not happen for the other beta-versions anyway (if you have a look at the docs, you'll see that \"latest\" does not contain the updated quickstart document http://docs.casperjs.org/en/latest/quickstart.html).\nLet us vote on the version -- I will then update this PR and the published revision number accordingly.\n. Vote here (+1 reaction) for 1.1.\n. Vote here (+1 reaction) for 1.1-beta6\n. @n1k0 @mickaelandrieu @hexid @BIGjuevos any idea / hint how to trigger an update of the \"read the docs\" documentation?\n. @n1k0 - Same username as here on GitHub: istr\n:-)\n. > Am I all clear to move the remaining issues out of the 1.1 milestone?\nYes, the vote was clear. :-)\n. @n1k0 Thank you!\nIt seems that we\n- just need to tag the \"latest\" version appropriately so it is rebuilt automatically\n- the other versions to be published need to be selected manually from the admin panel\n. @BIGjuevos @mickaelandrieu Could you please merge this? I will then update the released commit, the git tags (1.1 and latest) and prepare the npm packaging / releases. Thanks.\n. @mickaelandrieu Strange, indeed. But the test is nice; I would like to merge this. @BIGjuevos any idea why this test does not reveal the problem in #777?\n. @mickaelandrieu @BIGjuevos Please check + pull. Thank you.\n. I would merge this -- @BIGjuevos could you do a second review and merge it if ok? @mickaelandrieu wants this for quite a while...\n. Thanks @jefleponot for the work and @BIGjuevos for merging. :-)\n. > Do I have to use another PR\nAnother PR, please. Thank you.\n. > promoting CS in any way doesn't make much sense to me.\nI agree. Let us just drop coffeescript support for the 2.0 target. \n. It seems that none of our tests check that --xunit actually includes the test results in the output.\n@BIGjuevos could you add a simple test to the client util test script ./tests/clitests/runtests.py ?\n. > We probably need to setup a jenkins to check?\nNo, we just need\n- a simple test case with e.g. two suites (one passes, one fails)\n- a reference output.xml that includes the outcome of these\n- a diff / expect for the clientutil suites\n\nI'm very busy theses days :/\n\nMe too... * sigh *\n. I manually checked this regression fix. Let us publish this now and hand in a cli test case later. Lots of people seem to rely on the xunit output.\n. @BIGjuevos @mickaelandrieu If you are ok with it, please merge it. Let us try to stick with the convention \"don't merge your own PRs\" (if it is not an urgent hot-fix or documentation only)... \nThis would help to retain / achieve some minimal QA level (\"four eyes principle\").\nThank you.\n. > Does that include or exclude the original author of the code?\nHehe... Good point. * g *\nDon't take it too dogmatic -- just gives me a better feeling if at least two team members are involved in merging in new code. ;-)\n. @entrptaher Thank you. Merging without 2nd opinion because documentation-only and obviously OK.\n. > Thank you @laurentj :) can we add slimerjs 0.10 to our testing matrice ?\n:-) This was exactly what I was about to write... Please add 0.10 to the matrix in .travis.yml for this PR.\n. Great. Merging.\n. Nice. :-)\n. imho it is better not to reference gists but to copy the gist into https://github.com/casperjs/casperjs/tree/master/samples and reference that instead.\ngists tend to disappear at some point in the future leaving broken references that may stay unnoticed for a long time.\n. > I'll pull it in as well, and reference the gist since it has lots of comments.\n:+1: I am angry at broken gist links very often, so I'd always prefer to keep a copy. Merging.\n. oh yes -- python. sigh\n. @mickaelandrieu I would merge this. Please do so if you like this PR. Thank you.\n. :+1: Maybe, instead of the large twitter button:\n- de-emphasize twitter (is it that significant?)\n- re-add the download button / link the latest tarball\nSomething along the lines of\n\n. > I tried to find the least offensive green possible.\nSuccess! I don't care that much about the color (it is ok), but the improvement on the overall structure is great -- so let us try to get this out if nobody has major objections. Ping @n1k0 @hexid @paazmaya.\n. Yes, very nice. @BIGjuevos Thanks a lot. :-)\n. Nice... :clap: Thank you, @BIGjuevos \nVery busy time over here, so happy that you tackled that.\n. There is already a settings argument. No need to change the signature, just pass headers as sub-object / property of the settings and check for them.\n. @Sayalic0 This PR is a good start, even if you qualify yourself as \"a beginner for JavaScript.\" (#1560). Just integrate the supposed change, add a test case and documentation and this PR is very likely to be accepted.\nThanks for your contribution. :-)\n. @Sayalic0 Thanks for your effort. Please be patient, I do not have the time to give a good advice before next weekend. Thanks for understanding.\n. Agree with @mickaelandrieu and @BIGjuevos.\n. I think the sample is clear, even without the html that it tests. It would be necessary for a test-case, but for the cookbook it sufficiently demonstrates the case (imho). @BIGjuevos @mickaelandrieu ?\n. > If you have any idea about adding slimerJS 0.9.6 ... (trouble with coffee script)\nYes, that is a known issue. Thanks @laurentj for SlimerJS 0.10 and the advertising and @jefleponot for the test suite support. :heart: \n\n. Looks good at first sight, please give me time over next weekend to review properly.\n. I am ok to merge this, tests pass and this improves the code of a recently added functionality.\nPing @mickaelandrieu @paazmaya @BIGjuevos.\n. Nice. :+1: to merge this. ping @BIGjuevos @mickaelandrieu \n. :+1: to merge this. @mickaelandrieu @BIGjuevos \n. Yes, nice... However, I would prefer a test that fetches the plain text from the test server, preferably without the Content-Type header set. This way we could actually test what went wrong in #178.\nSo in tests/selftest.js:\nAdd a bogus notype entry to contentTypes that matches the file extension .notype and set the type to null:\njs\nvar contentTypes = {\n    html: {type: 'text/html', binMode: false},\n    js: {type: 'application/javascript', binMode: false},\n    json: {type: 'application/json', binMode: false},\n    txt: {type: 'text/plain', binMode: false},\n    png: {type: 'image/png', binMode: true},\n    notype: {type: null, binMode: false},\n    _default: {type: 'application/octet-stream', binMode: true}\n};\nonly add the header if its type is set:\njs\nif (contentType.type) {\n    headers['Content-Type'] = contentType.type;\n}\nThen add a file tests/site/plaintext.notype with the contents to be checked, fetch this in your test case and see if you get the raw text contents like expected.\nThis would cover all the weirdness discussed in #178.\nEDIT: and this would prepare what we need to test an implementation of #1584.\n. I am ok to merge this. @entrptaher Could you please squash this PR?\n. Ping @entrptaher: please squash the commits. If you're unsure how to do this, please add a comment here.\nPing @BIGjuevos @mickaelandrieu : if you are ok to merge without squash, please feel free to do so.\n:-)\n. I like it, too. Please add a test that demonstrates #1592 and shows that this PR fixes it. Thank you.\n. I am ok to merge this. @BIGjuevos ?\n. Looks basically good to me.\nPls adjust the missing space and the comments with references to the spec at MDN.\n. Thanks for the update. Note that you might have to wait for #1634 / #1635 to be merged before your build passes and that you need to update the PR again after #1635 was merged.\n. :+1: to merge this when build passes. @BIGjuevos @mickaelandrieu \n. Why did you close this one? Would you mind re-opening and rebasing against current master?\n. @BIGjuevos seems like we need to do this... :-(\n. @BIGjuevos would you mind moving your repo https://github.com/BIGjuevos/phantomjs-builds to https://github.com/casperjs/phantomjs-builds ? I created https://github.com/casperjs/slimerjs-builds and will populate it now.\n. Sorry, builds are failing due to broken upstream package handling. We are catering for that and restart your build when it is fixed.\n. I would like to propose to merge this without rebase and without passing test. It is trivial and does not touch any code, whatsoever. The probability for the merged build to succeed is about 99% imho.\n. Ping @BIGjuevos @mickaelandrieu .\nPlease have a look at this. Thank you.\n:-)\n. Ok, thanks for merging this. I will now notify all other PR owners with failing tests that they need to rebase their PRs.\n. Basically ok to document the separate functions. However, assertField marshals, so the description is not wrong. Please add blocks to the documentation that show usage of assertField, too, for each type of selector so we don't lose the information how assertField marshals, and demonstrate that we could explicitly marshal on our own. Note, that the assertFieldName function does not exist in master yet.\n. Sorry... Misunderstanding. This PR is welcome, but I think it needs an update: just do not replace the existing doc but amend it. Please re-open if you are willing to adapt it. Thank you.\n. Thank you! Added some comments.\n. Fixed in 90f2f77713a77e627259e0061e1ba69f28711053.\n. Yes -- fully aware of that... :-)\n- phantomjs 1.9 and below could not pass (no support for abort)\n- phantomjs 2.x could not pass (no support for coffee)\n- slimerjs obviously never passed\n- but there is a slight chance that slimerjs might pass after tweaking, so left it in with FIXME instead of removing the test altogether\n. Never mind -- having a clean test runner is a good idea.\nI changed these things to have output from tests failing due to timeouts. The brute-force timeout mechanism that was in place before (without watching the output of a pipe) prevented inspection of timed-out test output -- no chance to see what went wrong due to a timeout.\n. Good idea. Will refactor this.\n. I couldn't find any within their tracker, just a FIXME in their code base.\n. Took that part from @hexid. What's the issue with that?\n. Spurious; as far as I remember this triggered a different problem (recursive error / warn calls).\n. @paazmaya https://github.com/laurentj/slimerjs/issues/405\n. Just copied it over from CONTRIBUTING.md... :-)\n. Ok, so drop mentioning professional support for a while until there is a reliable place where it is actually offered? Or try to point to something else, e.g. https://www.bountysource.com/ ? I would be very reluctant to recommend to contact the maintainers directly.\n. Please re-enable this line in your PR, because we want to address this issue with casperjs@1.1.0-beta4.\n. Could you please refactor this block into tests/selftest.js...\n. ...and use the standard self-test server here?\n. Would be nice to check for status code and redirection target, too.\n. I would never ever change the API behavior (i.e. default values) depending on the engine in use.\nMark this \"obsolete / not recommended\" in doc, throw a warning to the output when used and advise to use the newly created \"waitForDownload\" instead.\nBetter throw an error if used with an engine that does not support it than silently changing behavior here.\n. I strongly disagree, see my comments to this PR. Implicitly changing behavior due to different engine in use is evil imho. Better to explicitly tell the user that what was planned is obsolete / unsupported right away.\n. Same here: let's tell the users \"don't do this, use the way (async) that will be supported down the road\". :)\n. I am not sure if we really want to add the INFO echo messages contained in this PR. @n1k0, @hexid, @paazmaya ?\n. Probably this change is why all phantomjs tests fail. Maybe you should instead just drop the \"max\" value and test with 2.1.1 as well.\n. Adds a ~~speudo~~ pseudo class to simulate css hover style and other pseudo class es.\nNeeds a global s/speudo/pseudo/\n. removePseudoClassFromElement()\n. Lint error. Use !== instead of !=\n. Lint error. Use === instead of ==.\n. Lint error. Use === instead of ==.\n. This change breaks the SlimerJS test. This kind of regression is exactly why I proposed to\n- make lint changes only (no functional change whatsoever)\n- make one PR per linted file\nhere: https://github.com/n1k0/casperjs/issues/1430#issuecomment-180319741.\nSome of the problems could be solved by adjusting the .eslintrc -- e.g. having strictly quoted keys in Objects is not a good thing to have; so I would personally still prefer\njs\n        type: \"assertUrlMatch\",\n        standard: \"Current url matches the provided pattern\",\n        values: {\n            currentUrl: currentUrl,\n            pattern: pattern.toString()\nover\njs\n        \"type\": \"assertUrlMatch\",\n        \"standard\": \"Current url matches the provided pattern\",\n        \"values\": {\n            \"currentUrl\": currentUrl,\n            \"pattern\": pattern.toString()\n. Maybe add a test.assertExists('testsuites'); to point out that we expect the element, but not the attribute.\n. 1.1\n. ...\"has been catched\".\n. To ~~remember~~ display what ~~the~~ native PhantomJS cli options are available, ...\n. . Fullstop. ;-)\n. Please put this block of code in a helper function and call it rather than copying it around.\n. This documentation does not match the function signature.\n. Don't do this. Please fix the linting rule instead if this produces a warning.\n. ...with specific engines supporting it (that is, PhantomJS before 2.0.0).\n. whitespace / lint\n. \"The list of supported events depends on the version of the engine in use. Older engines only provide partial support. For best support use recent builds of PhantomJS or SlimerJS.\"\n. \"Force the engine to use another target instead of the one provided. Very useful to limit the number of open windows and reduce memory consumption.\"\n. Is this global variable necessary for the example? Could you make it local to the start() function?\n. Where is this used?\n. Please check if this still works with PhantomJS 2.1.0, see #1495.\n. No, please set\n\"quote-props\": [\"as-needed\", { \"keywords\": true }] in .eslintrc instead. This has the effect to reduce the change-set in this PR and probably the nice side-effect to get rid of lots of lint warnings in one go.\nEDIT: see http://eslint.org/docs/rules/quote-props\n. one step left\n. Please stick with one variable declaration per var (no comma separated variable lists). What is the reason to change it to floor here?\nEDIT: I am asking the latter because these kind of changes may very subtly break working test suites for unsuspecting users.\n. \"...or by its name...\" (its -> pronoun, it's -> it is / it has)\n. What is the reason to replace this mapable construct with a switch? (see below)\n. If the only reason for the switch is the singular alias, you might as well add it in the object-style as seen in the existing code, i.e.\njs\nvar finders = {\n...\nlabels: ...\n};\nfinders.label = finders.labels;\n. Please try to avoid single letter variable names, even in test suites.\n. Totally ok to factor out the var finders = {... logic into makeSelector if you need to re-use it. But I would prefer to stick with the existing \"object switch\" method among other things to keep the change-set small.\n. Ok, never mind. :-) This is just a personal preference (it is easier to e.g. grep for variables with more than one letter). You decide.\n. revert\n. revert\n. revert\n. revert quoting\n. revert quoting\n. revert quoting\n. revert quoting\n. revert quoting this and following two lines\n. revert\n. revert quoting this and following three lines\n. revert quoting this and following three lines\n. revert quoting this and following nine lines\n. revert quoting this and following nine lines\n. revert quoting this and following two lines\n. Do not change the signature, pass it within settings.\n. js\nif (settings && settings.headers) {\n  for (var header in settings.headers) {\n...\n. ~~for~~\n. For security reasons, you may not set any header you like here.\nSee: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\nhttps://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\nhttps://developer.mozilla.org/en-US/docs/Glossary/Forbidden_response_header_name\n. This is not \"strangely\" but as per specification:\nhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\nIf the header was already set, the value will be augmented.\n. for (...\n. longRunningScript functionality\n. longRunningScript functionality\n. longRunningScript\n. keep this line\n. prefix with\n// TODO: \n. keep this line\n. prefix with\n// TODO:\n. set test number from 1 to 2\n. keep this line\n. set test number from 1 to 2\n. keep this line\n. ",
    "p": "Tests are now fixed.\n. It actually was not.\n. Why did you close the pull request then?\n. That was the 4th occurrence that you added after this PR was made.\n. ",
    "laurentj": "Thanks for your patch :-)\n. Tests are green. Travis CI fails only because of jshint that is not happy because I added two \"if\" statements, and because I added a line break on a line of code on an assignement. I can fix this last \"issue\", but should I really to refactorize the entire code of bootstrap.js just because of these two if???\n. Ok, no refactoring is needed, I just increased jshint parameters :)\n. Sorry, I never used Ruby and I don't have time to learn a new language ...\n. This could be interesting. Please, could you update the documentation? Tests are welcomed too.\n. Why not. I let @n1k0 to give his opinion about this improvement. \nHowever, you should at least fix some tests. Your change breaks some tests in cli tests. see Travis results\n. Thanks for your patch :-)\n. Thanks for your patch :-)\n. This commit was also integrated into the slimerjs-2 branch that has just been merged. This pull-request is now useless.\n. you should add a test in the test suite, testing the issue you found.\n. Sorry, your patch still breaks 66 tests. see https://travis-ci.org/n1k0/casperjs/jobs/8841601. please launch tests on your computer (bin/casper  selftest) before to commit. And write an additionnal test to test the issue.\n. Thanks for your contribution :)\n. @n1k0 are you ok for this feature?\n. Many things are missing from the API documentation, even many of them are often used I guess. At least I implemented this parameter in SlimerJS. For me this \"hidden\" parameter makes sens.\n. Strange, all cli tests pass for me... And unfortunately, output of runtest.py is not really useful. I'm going to improve it to see the real error.\n. Note that some other tests are still red. But no time to fix them now. I'll propose later some other patches.\n. I hate jshint the idiot dictator :-p \nI will fix that. I reinstalled my laptop system last week and so I need to re-install jshint.\n. @mickaelandrieu I added return equals(inputToTest.constructor.name, constructor.name) to fallback to the behavior before the implementation of your betterInstanceOf() function. And I need the original value of the input parameter. And because you changed this value in the loop, I use an intermediate variable for the loop\n. There are some other few tests that fail with 0.10, but which need to be fixed in the SlimerJS 0.10 side. So I will add it later in travis.yml in an other PR...\n. The parameter name is bad. It should be str according the following lines of code. Did you test it? ;-) This issue breaks many tests (see travis results in the pull request)\n. Instead of using this forEach with an exception, a try catch etc, you should use the some() method instead\n. indentation is bad here\n. The filter() method is more appropriate here. the parameter \"currTag\" has not a good name. This is not a tag the function receives, but an element.\n. fix this name\n. this bracket should be on the previous line\n. many indentation issues and coding style issues with brackets, in this file\n. well, we are inside a function called by evaluate. I don't know where you could set these potential functions.. I added comments\n. ",
    "sradu": "Please merge this. Having abort() in casper would be awesome.\n. ",
    "Redsandro": "I want to abort a pending request to see how the server handles that. But I cannot do this:\n``` javascript\ncasper.on('page.resource.requested', function(requestData, request) {\n    var request = request;\n// Doesn't seem to work\nthis.wait(200, function(request) {\n    casper.echo('Aborting request');\n    request.abort();\n}.bind(this, request));\n\n/*\nsetTimeout(function() {\n    casper.echo('Aborting request');\n    request.abort();\n}, 200);\n*/\n\n})\n```\nOutput:\nAborting request\nTypeError: 'undefined' is not a function (evaluating 'request.abort()')\nSame without binding:\njavascript\n    this.wait(200, function(request) {\n        casper.echo('Aborting request');\n        request.abort();\n    });\nWithout the wait() or setTimeout it works. But I need to abort a bit later.\n. ",
    "themouette": "Well, me neither, so I had a though about it.\nWe do skip steps, not assertions. I've got this feeling that skip api belongs to Casper object more that Tester.\nLast change behavior is as follow: Casper.skip does skip n steps while Tester.skip now delegates to Casper.skip and add a skipped assertion.\nWhat do you reckon ?\n. In fact I find test.skip irrevelant.\nMaybe a markAsSkipped that add n skipped test can fit better in Tester.\nSkip remains about navigation wereas markAsSkipped would only deal with\nexpected tests.\n. Indeed, be able to mark tests as skipped is mandatory feature.\nOne don't actually skip tests, just mark them as skipped (or add skipped tests) so test.markAsSkipped or test.addSkipped seemed relevant, but it's only my 2 cents.\n``` js\ncasper.test.begin('foo', 2, function(test) {\n    caspr.start().\n    thenSkipUnless(phantom.version.major < 2, 1).\n    then(function () {\n        test.markAsSkipped(2);\n    }).\n\n    thenSkipIf(phantom.version.major < 2, 1).\n    then(function () {\n        test.assert(true);\n        test.assert(true)\n    }).\ncasper.run(function () {test.done(); });\n\n});\n```\nThanks for your work !\n. ",
    "sreeix": "Makes sense. Updated Issue with another commit.(copying your code)\n. ",
    "jfparadis": "Tests failed on tour ci server. I'm puzzled as to why. My fork was probably out of date. Apologies. \n. Ok, solved! My update to form.html added a field which broke two tests in formfill.js. \nI probably ran casperjs selftest instead of ./bin/casperjs selftest which meant I rested the version of casperjs installed by homebrew (currenlty at 1.0.2) instead of the version of casperjs located in the current directory where bash was located. Since the test appeared to be green, I submitted the pull request.\n. ",
    "RockLi": "Hi, In this PR, I have updated the doc docs/modules/clientutils.rst, please see the Files Changed Tab. :)\n. For backward compatible, I set override default to true.  \nUsers can pass in {overrideMimeType: false} to disable the override feature, but this need the users could found their unexpected result was caused by this in some scenarios first. \n. Thanks for reminding, I updated the document. Actually, we can not always override the mimeType by using the default one. \n. ",
    "MattCBowman": "Just noticed I put this on main. I will create feature and then re-submit\n. Great. There are probably some ways you might like to change it - just let me know. I tried to keep the discussion on #307 in mind while writing it.\n. Thanks for your comments and improvement suggestions. I believe I have resolved all of the issues you raised.\n. Sure. I originally hid this method due to concern that users might not use it correctly (requiring more exception checking). I'll expose it in the prototype.\n. Good catch. I'll add the check.\n. It's somewhat confusing what I ended up doing here - in this case, self will eventually refer to ClientUtils so we have access to the findAll function.\nI'll make the change to remove the self parameters from the functions. Removing that cruft is a good idea.\n. Don't know how that one got away from me. This will be resolved.\n. ",
    "cabhishek": "@n1k0 Is there any plan to release #449 ? Current stable release v1.0.2 doesn't have fillSelectors functionality. \n. thanks. that would be very helpful :) \n. ",
    "EndangeredMassa": "Updated.\n. Thanks for poking! Glad to see this in.\n. Woopse. I'll fix that.\n. ",
    "quanghoc": "Sample code here doesn't work on Windows (casperjs 1.0.2)\nhttp://docs.casperjs.org/en/latest/modules/casper.html#getelementsattribute\n```\nvar casper = require('casper').create();\ncasper.start('http://www.google.fr/', function() {\n    require('utils').dump(this.getElementsAttribute('div[title=\"Google\"]', 'title')); // \"['Google']\"\n});\ncasper.run();\n```\nI got this error\nTypeError: 'undefined' is not a function (evaluating 'this.getElementsAttribute(\n'div[title=\"Google\"]', 'title')')\n  C:/test.js:26\n  C:/:1335 in runStep\n  C:/:332 in checkStep\n. Oops! Misread that part. Will wait then. There is problem with using require for .json in 1.1.\n. ",
    "codecowboy": "I am also getting the error TypeError: 'undefined' is not a function (evaluating 'this.getElementsAttribute(path,'href')'). What is the status of this issue?\n. 1.1.0-beta3\n. thanks. I also added a small follow up question :-/\n. ",
    "damienalexandre": "Awesome feature :+1: \n\n. ",
    "nhoizey": "\\o/\nThank you both!\n. ",
    "bastnic": "So nice! Thanks @laurentj & @n1k0 \n. ",
    "renatodarrigo": "The line must have the AND checking, because it checks for Windows AND not having an env varibale ANSICON OR not having styleName in styles.\njs\nif ((fs.isWindows() && !env['ANSICON']) || !(styleName in styles))\n. ",
    "mallim": ":thumbsup: \n. Will there be support for --no-color option?\n. ",
    "Claud": "\u043e\u043a\n. @laurentj I can not run test in my computer. This bin/casper selftest not work in my windows.\n\n. My tests seem to be working? :)\n. ",
    "UlysseM": "@n1k0 I agree on the fact that the 'regex selector' is not a standard (and both to CSS3 and XPath are). However, I made this patch because there was no way to do a regex match directly.\nThe closest thing to it would have been to extract every element from the webpage's DOM (using the CSS selector to get the tag), and do the matching manually. Not to mention the pain it would have been to use it with the click() method.\n. @vasilakisfil The pull request has not been accepted yet, but you can get it from my fork if you want to try/use it.\n. I tried the some() method a while ago, but even though it works fine with my browser, it failed in CasperJS (the NodeList does not have the 'each' method).\nI found out that it was because 'allTags' was a NodeList, and not an Array. I could either transform the NodeList into an array with [].slice, or use the forEach method and throw an exception. I chose the second option for performance sake.\nIf you have any other solutions in minds,  feel free to post them.\n. It appears filter() needs an 'each' method in order to work and the NodeList has none. Like I say above, I could convert the NodeList into an Array, and use the filter method, or just do like this for better performances.\n. ",
    "vasilakisfil": "Hey! Has this feature been implemented ?\nThanks!\n. ",
    "smlgbl": "That issue addresses publishing casperjs as a proper npm package, which probably requires some changes, as outlined in there. My suggestion is only to enable npm to be used as an \"installation agent\", so that e.g. grunt can be used to run the tests, without the need for another manual installation routine and/or test runner.\n. ",
    "alanctkc": "+1 for npm-friendliness/this pull request. We could use it in the above referenced passup.js tool https://github.com/alanctkc/passup.js/pull/21.\n. Nice!! Thanks so much @ask11 and @n1k0! Really happy to see this. :)\n. ",
    "thomasw": "This would be magical. The travis configuration could also be updated to use npm to get phantomjs instead of the tar download stuff it is doing now.\n. ",
    "theefer": "Are there still pending issues with this pull request? I've been using this branch and would really love for it to get merged. Happy to contribute if there is anything left to do.\nThanks!\n. OK great thanks for the quick feedback!\nAny ETA for 1.1 stable?\n. ",
    "henvic": "This would be a nice addition.\nAny updates on it yet?\n. ",
    "nikrou": "I was in holidays.\n. I fix indentation and simplify a bit code in modules/casper.js\nAll tests are ok.\n. Ok\n. Ok. Fixed.\n. Ok. Fixed.\n. Thanks for advice. Applied.\n. Fixed.\n. Don't know jsdoc. What's the problem ?\n. ",
    "albuquerque": "I came across this when trying to upload multiple files to an HTML5 file type input element. Applying the changes in casper.prototype.fillForm and the new function casper.prototype.getFileFieldSelector makes the functionality work. I understand that there are some minor coding standard issue. I am not sure if @nikrou has any plans to submit and update especially since it's more than 2 years old. Could the issues be fixed and merged please?\n. Will do @mickaelandrieu. I didn't touch the tests. Will update it and submit.\n. Can #526 be closed as this is derived from the same code as it? \nI have made the requested changes and the tests are now passing. \n. Closing this pull request as this was created on master branch.\n. Hi @mickaelandrieu \nSquashed as requested. I hope it is right as I am doing this for the first time.\nRegards,\nSam\n. HI @mickaelandrieu,\nFollowed your instructions. I had to use git commit --amend --allow-empty as it was throwing an \"Aborting commit due to empty commit message\" error. \nHowever, it's now showing three additional files that are not part of my changes.\nsrc/casperjs.cs\ntests/clitests/runtests.py\ntests/clitests/scripts/options.js\n- Sam\n. Thanks for clearing that up @istr.\nThanks for the help with the commits @mickaelandrieu \n. Reverted this change. I have left max in there. The getFormValues() fakepath bug seems to  affect only 2.0.0. So now we skip the test for \"file multiple\" in 2.0.0 similar to other file tests.\n. ",
    "Ivanca": "Like you probably know undefined is the equivalent of \"not-existing\" in Javascript for all practical purposes so this change can't by definition, break anything else.\n** The only exception is when using the arguments object in a function scope but this is not the case in the functions modified by this commit.\n. ",
    "MisterY": "I added a couple of shortcuts that make translating Selenium tests much smoother.\n. Thanks! Will do. This was a quick job during tests transfer from Selenium, hence these calls for compatibility.\n. I now know I should have done this on a separate branch. Is there a way to discontinue adding commits to this issue?\nI could redo the changes on a fresh fork.\n. Cool. That's better. Thank you!\n. I won't have access to a development environment for the next couple of days. It will have to wait a bit longer. Sorry!\n. ",
    "QWp6t": "@n1k0 Actually, it turns out that the issue this references is a non-issue. I was using custom batch file (or maybe an older batch file?) which had a trailing slash. CasperJS doesn't actually have a trailing slash there.\nEven still, this pull request should be accepted since fs.absolute (used in bin/bootstrap.js:~151) converts \\ to / anyway, and since backslashes still do, in fact, escape closing quotes around command line parameters.\nIf you're wondering about the %VAR:find=replace% syntax on line 3; that has been supported since at least Windows 2000.\n. This is the one I posted in the Issue that this pull request references (#562).\ntest.js\nvar fs = require('fs');\nconsole.log([phantom.version.major, phantom.version.minor, phantom.version.patch].join('.'));\nconsole.log(phantom.args);\nconsole.log(fs.separator);\nconsole.log(fs.absolute('..\\temp'));\nconsole.log(fs.absolute('..\\\\temp'));\nphantom.exit(0);\nNow run it...\nD:\\temp>phantomjs test.js x=a y=\"foo\\bar\\\" z=\"true\"\n1.9.1\nx=a,y=foo\\bar\" z=true\n\\\nD:/temp/..      emp\nD:/temp\nAs you can see, fs.absolute() converts the backslashes to forward slashes (despite fs.separator being a backslash) only if they're escaped, otherwise the backslashes are interpreted as escape characters. Additionally, the trailing backslash in y=\"foo\\bar\\\" acts as an escape character for the final quote, causing PhantomJS to interpret the value of y to be foo\\bar\" z=true (in other words, there is no longer a z option being passed).\nI mentioned in the issue that this references is a PhantomJS issue, not a CasperJS one. My recommendation is to simply take it easy on PhantomJS and always give it forward slashes because fs.absolute() will convert all backslashes to forward slashes anyway. In other words, there is simply no benefit to using backslashes and PhantomJS has an obvious preference for forward slashes. Get it?\n. This could also be changed to if not defined CASPER_PATH set CASPER_PATH=%~dp0.. if we want to give users the option to set this variable on their own.\n. ",
    "shekyan": "Example of changing user-agent on fly doesn't work since calls to change user-agent are executed before run().\n. ",
    "bp323": ":+1: \n. ",
    "gopikrishnaA": "(Boolean) reset:\nWhen set to true, this option will first empty the current field value. By default, it\u2019s set to false and sendKeys() will just append string to the current field value.\nI am using following command for content-editable='true' edit box\nthis.sendKeys('form#event-form div.nicEdit-main', 'gopi', {reset: true ,keepFocus: true});\nThe issue was it is not clearing the current field value.But it is appending the current field value.Please tell me how to clear the current content.\n. ",
    "jameydeorio": "My pleasure :)\n. ",
    "alonisser": "OK, I Think I can do that, but lets wait for @n1k0 for input about this\nsugggestion.\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Mon, Oct 7, 2013 at 9:53 PM, Matt DuVall notifications@github.comwrote:\n\n@mickaelandrieu https://github.com/mickaelandrieu I agree and have seen\na lot of JS tools follow this convention (--reporter in JSHint and\n--format in ESLint). It reduces the ambiguity in specifying multiple\nformats at the same time (casperjs --reporter-json --reporter-xunit).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/647#issuecomment-25834847\n.\n. Just missed that I could probably build the Json with just `utils.dumpwhat do you think?\n. I don't think I understood your meaning with this: TestSuiteResult#toJSON . Did you mean that instead of building the JSON I could probabely just utils.dump(results)? just thought about it, but not sure I'll get the tests duration from that. or did you mean something else?\n. @mickaelandrieu could you be more specific what to rebase and how?\n. Not great at rebasing. you mean pull master and merge on my branch and then\ndo a pull request again?\n\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Fri, Nov 8, 2013 at 12:36 PM, Micka\u00ebl Andrieu\nnotifications@github.comwrote:\n\nTo avoid merge conflicts, you need to rebase master branch on your branch\n:)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/647#issuecomment-28054007\n.\n. Sure, this is the correct approach. how can I help?\n. Whats the coding standard here for indentation and whitespace so I can fix\n. Didn't understand the \"to be removed\" part? should I remove the whole jsonReporter test suite?\n. OK.\n. changed so saveResults() would get a config object.\n. Done, Also saveResulsToJson is redudant with saveResults, just changed both xunit and jsonreporter return data method to getDataFormat() instead of `getJSONandgetXML``. and fixec the function to handle the various cases\n. \n",
    "kb19": "What's the status of this? I'm looking to add html / json functionality and am willing to pick up where everything was left off at.\n. ",
    "brandon-bethke-neudesic": "The tests are failing for phantom 1.8.x because onResourceError is a phantom 1.9.x feature. So this enhancement would require phantom 1.9.x\n\"onResourceError\nIntroduced: PhantomJS 1.9 This callback is invoked when a web page was unable to load resource. The only argument to the callback is the resourceError metadata object.\"\n. Fixed jshint errors and now the 190, 191, and 192 builds are now passing.\n. As mentioned previously, the feature is only compatible with phantomjs 1.9.x. The travis build is only failing, as expected, on the 1.8.x run.\n. Forgive me, I have been busy at work. I am not currently setup to investigate this. If you have the time to investigate, I would appreciate that.\n. ",
    "nathanboktae": "Shouldn't we be favoring the event pattern over a hook/callback pattern? Only one hook can exist but any number of event listeners can, as well as filtering on events. At least keep parity by having an event.\n. Ah didn't see those. Test added! However, I found another bug :( due to that same #547 change, now casper reports 2 failures from the same exception. This should report just 1 exception, correct? I would guess that the on('fail') code needs to not fail twice.\nThoughts?\n. np, done.\n. A test and a better PR title would be nice, otherwise it looks good!\n. Everything is passing now. I was just running clitests locally at first. I moved tester's wait for timeout handling back to the callback due to the churn on the other tests. The event handling vs hook handling issue can be saved for later.\n. Great! Thanks for reviewing my pull request.\n. ",
    "jpz": "Yes, it sounds reasonable.  Basically it infers we don't have anonymous steps, if it's a non-optional parameter.\nRather than having name inference at the runStep() - we could have it concretely defined in all cases whenever at step was created, we'd modify the calls to this.then() in all cases to use this.createStep()\nMaybe also to improve readability a little, de-nest this stuff, even if it is at a cost of a bit of conciseness:\nvar _step = this.createStep(\"name\", fn, options);\nthis.then(_step);\nI would choose that approach actually.\nLet me know your thoughts\n. Actually, this only works for internal calls to then().  Of course, external calls (as then() is a defined part of the API) may have anonymous functions.\nThis would make createStep() only electively used where we are not passing a user function as the parameter, internally.\nHowever, then() could resolve the function name up-front, rather than deferring it to runStep(), by determining if there's an options property on the function parameter.\n. travis build failure - it seems to be unrelated to this change set, something to do with the dotNET build returning a bad error code.\n. aha - many thanks.  Just installing rhino, jshint and XCode command line tools (for make) to run this myself.\n. Ok, this is green and I'm fairly happy with it.  Had to learn about travis, the right version of jshint and installing node, but I'm up to speed now :)\nSquashed up the commits on my branch also.\nkind regards\n. Maybe not documentation, as info log output is not generally a formally documented part of an API.\nHowever, unit testing the info messages may be worthwhile, as there's sufficient complexity in this one that it's worth testing for invariance (which I have not presently done.)\n. Hi Nicolas, still a worthwhile change?  \nIf you are worried about backwards compatibility, do we not protect against this by versioned releases where we describe what the variations in behaviour happen to be?\nThis change is a sensible tidy-up of some less-than-optimal logging that crept in, which arose in my own code, as a starting user.\nthanks\n. No worries, thanks very much for your time and the review.  I just have a spot of time off work (I have an opposite problem) and rather enthusiastic to do a spot of coding :)\n. Thanks, I took pause, just to do some deeper reading on JavaScript here.  Just been through Crockford's book.\nThere's a bit of style I'm not 100% happy with...\njs\nvar step = this.createStep(\"_thenOpen\", function () {\n    this.open(location, settings);\n});\nthis.then(step);\nIt just doesn't read as nicely as the previous code, which read more nicely left to right:\njs\nthis.then(function _thenOpen() {\n    this.open(location, settings);\n}));\nI'm not sure what the solution is, \"createStep\" is probably better described as \"addStepMetadata\":\njs\nthis.then(this.addStepMetadata(name, \n      function () {\n       ...\n}));\nI got rid of the nesting initially because I thought I was improving readability - but with a temporary var step variable it's not as concise and has much less of a functional programming feel.\nDeleted all the coalesce() stuff btw, I agreed entirely with your observation...\n. Yes, it did cross my mind.  In SQL the function is called \"coalesce\" - I can add something lke this to utils, to take an array.\n. Just for this function?  \nNote that the logging for (for example) waitFor will emit (under this implementation _waitFor.  I can back it all out if on balance the change is disruptive, or perhaps we should get some consensus on the mailing list?\n. Ta, will do.  I did look through utils for something, but must have missed it.\n. Of course, my bad :)\n. There is a check inside this.createStep(), this is why I removed some of the checking - I was trying to reduce the cyclomatic complexity number to solve a jshint problem actually!\nI admit that createStep() is now partially a validator, and partially a builder function - not perfect I know.  I attempted to comment this adquequately inline.\n. The jshint option \"asi\" : \"true\" option is suppressing it.  My editor (Webstorm) was suggesting to fix these.\n. Shouldbe then && then.name - there are 3 instances of this error.  I thought I had fixed them all, embarrassing.\n. Thanks - very educational.\n. Yep, the check for fn is not undefined is unnecessary in this instance, it lends itself to this function.  I became fatigued after editing this several times.  I must say the branch commit review is very useful for code review workflow.\n. ",
    "jefleponot": "ok n1k0.\nBut what is a PR ?\na Pull Request I guest ?\nDo I need rigths ?\nI'm a beginer in Git (svn is my vcs)\n. this PR was replaced by  Update popup feature #1118 \n. @clochix \nfews years later, we have integrated your code on the PR #1802 .\nhttp://docs.casperjs.org/en/latest/modules/casper.html#switchtoframe  \nThanks a lot.\n. No more bug :+1: \n. @hver\nThank you - another PR solve the probleme. ok\nI will rebase the 2 PR. \n@mickaelandrieu , do you agree ?. There is no TrifleJS changes in my PR. It was a mistake in my first push name.\n. I made a new fix for tabs :-)\n. Hi Mickael,\nCasper is a great tools for scripting but it miss features.\nCss and xpath selector are usefuls but not very user-friendly so anothers shortcuts selectors have been inserted in all web testing frameworks :\n\"Link Text\" and \"Partial Link Text\" and of course \"Tag Name\" and \"Name Attribute\" (I forget \"Id Attibute\")\njust have a look to :\nhttp://webdriver-plus.readthedocs.org/en/0.0.2/selectors.html\nhttp://webdriver.io/guide/usage/selectors.html\nAnother argument for this contribution : Links, in web page, changed less often than html skeleton so it is better for tests maintenance to chose this kind of selector.\nWith current selectors in Casper, it's not evident to find a link (main navigation element) transformed by css styles (capitalize...), if you add this contribution it will be very simple.\nand ... many navigation captures tools have implemented these selectors (seleniumBuilder...)\nBest Regards,\njef\nplease add contribution :-p\n. squash with visible test done.\nselftest at home : ok \njshint at home : ok\npush done\nanother note ?\nCasper integrator seems to be down...\n. :+1:  French : C'est ma premi\u00e8re CONTRIBUTION!!! Hourra \nEnglish: It's my first iNSERT Pull Request!!! hurray\n. Hi nicolas,\nping @n1k0 @paazmaya :\nAdding this feature is a quite important thing beacause :\n- In html tags, texts are always written differently, using xpath pattern to match text is not obviusly, example :\n<a>Hello</a>\n<a>         Hello         </a>\n<a>&nbsp; \u00a0\u00a0&nbsp;Hello  \u00a0\u00a0\u00a0</a>\n<a><span>H<span><span>ello</span></a>\n<a>  Hello \n</a>\n<a style=\"text-transform:capitalize\">hello</a>\n<a style=\"display:none\">Hello</a>\nwitch pattern do you need : //a[text()=\"Hello\"] OR //a[normalize-text(text())=\"Hello\"] OR //a[contains(text(),\"Hello\")] OR //a[string()=\"Hello\"] ... or a mixture ...\nAND no one in all of them will works if css style is applied like \"text-transform: Capitalize\"\nSo an help is required : link text\nWith a link text selector, you just call functions with the text you have read in the page \"Match what you watch :-)\" . Do you known sikuli ?\nPlease just have a look to previous links.\nPs: why do you need a \"ClickLabel\" Method ? we have yet a click method with selector or xpath arg.\n. thank you @paazmaya\nIs everything ok for you ? :+1:  :-1:  ?\n. ok \nversion 1.1\nin doc files ?\n. done\nI'm waiting for @n1k0 comments\n. COUCOU\n. Hi Mickael, what does that means  [HOLD ] ?\njef\n. ok, bye\nWhat a pity..\nFYI, the \"link Text\" feature via Casper (hacked) is used by more than 54 people in my team to oversee the government's web applications\n. Thanks @mickaelandrieu for all.\nTo @n1k0 :\nHi Nicolas,\nI'm pretty disappointed, on the one hand I have my government that refuses any contribution of its officials to the community as it gets the job full contributor like yours. On the other hand, contributors themselves who do not even realize how their work is used in all their possibilities.\nYour project has been corrected, adapted and merged with several others to create a very complex tool used for behavioral tests, SLA, d\u00e9facing intrusions, supervision, performance tests, transfer auditors ...\nYour programmer vision like mine does not cover the full extent of the mink writers (scenaristes) and that's why I do not insist.\nTake Care,\n. Thanks a lot  paazmaya .\nDo you know why Travis Ci build failed ?\nHow can I merge your changes ?\n. okay, je comprends (I understand)\n. Bug Fix : when popup window is created many events was ignored. So data requests and reponses coud'nt be gotten for analysing. This trouble work recursively on many popup windows. \nPopups wasn't consider as true pages.\n. Hi @istr, I re-base against master but i'm not really pleased about popup management because we haven't a constant identifier. Url popup and Title popup can changed,  window name is rarely filled...\n. Hi @istr, sorry for delay of rebasing.\n. it solves many issues troubles : #1460  #1711 #1665 #1662 #1595 .\nEnhancement : Find popup by windowName or title\nFix : events are now catch in popups (ResouceRequest, ...)\nFix: userAgent parameter is used in Popups (only for PhantomJS > 2 and SlimerJS > 0.9)\n@mickaelandrieu , merry Christmas . Hi  @mickaelandrieu , (meilleurs voeux 2017)\nthank you for this brilliant review :-) \nI will make the required corrections.\njef\n. @mickaelandrieu ,\nI find a  solution that works with all browser Engines.. Hi everybody,\nI think this PR is welcome for all popup's troubles.\n\n\nNow recursive popup processing access to events management. \nCould you please review it now ?\n\n\nI will not add enhancements :-) \nRegards JEF\n@n1k0 @mickaelandrieu @BIGjuevos @paazmaya @TitanNitWeb  @luqmansungkar  @JiaxiangZheng @LuckyLillia @miguelmota .... Hello Everybody,\nHere is the score on my repository casperjs :\n- With eslint have got \u2716 11104 problems (11104 errors, 0 warnings)- Strings must use doublequote lol\n- With jshint have got \u2716 20 errors  (This function's cyclomatic complexity is too high)\nRegards :-p\n. great\nAnd my LinkText PR .................please\n. @mickaelandrieu : update done\n. you are welcome @mickaelandrieu \n. your are totaly right. You would never ever change the API behavior (i.e. default values) depending on the engine in use. The code will now throw an error.\nI find my regression trouble with meld diff-tools.\nI will do my best to make a PR soon.\nThanks for all your brillant analyses.\n. partial PR done. CU next time\ncould you help me @istr ? Only one test can't success.\nThanks in advance\nSorry it works now :-)\nThat is really curious\n. I have done a lot of improvements of CasperJS for my web service supervision job, that I newer commit. if you are interested in lots of PR, it will valid them.\n. Another issue for you @istr : casperJS has never used \"window.callPhantom\" method before this PR.\nIt could be better to normalize this remote operation.\n\"window.callPhantom\" is similar to the \"window.postMessage\" function : postMessage(data, targetDomain)\nSo it could be great to use the same object attributes \nThe special propertys of a message event are:\n\ndata\n    The first argument of postMessage\norigin\n    The source domain\nsource\n    The reference to sending window if it is possible to \nrespond by calling event.source.postMessage\n\nchrome extensions has yet normalize communications with the \"message passing\" : \nhttps://developer.chrome.com/extensions/messaging\nMessage Passing is really useful to communicate between web page and \"background page\" (one to one) And also between many pages. It avoid to fall victim to cross-site scripting.\nIn the modules/casper.js file a senMessage method could be add like the chrome.tabs.sendMessage  : sendMessage(integer tabId, any message, object options, function responseCallback)\nThanks for yours advices\n. Hi @eloitay \nCould you send me you code ? I could help you more\nOr you can do a PR with an example.\n. test ok - PhantomJS 1.9.7 -> 2.1.1\ntest ok - SlimmerJS 0.8.4 -> 0.9.6\nresult : 6748 octets\n\ncode :\n``` js\nvar casper = require(\"casper\").create();\ncasper.start(\"http://www.google.fr/\", function() {\n    this.download(\"http://www.google.fr/images/srpr/logo3w.png\", \"logo.png\",'GET',{},true);\n});\ncasper.then(function(){\n    this.waitForDownload(\"http://www.google.fr/images/srpr/logo3w.png\",function(){\n        console.log('download sucess');\n    }, function(){\n        console.log('download failed');\n    });\n});\ncasper.run();\n```\nIt is fully functional , works in production since January 2016 with phantomJS 2.1.1 because old download method can't be used\n. @mickaelandrieu : update done\n. @istr,\nThanks for your explanation.\nyou are right, this PR don't suit for many reasons.\nJavaScript programming is now moving towards a purely asynchronous programming. \n\nSynchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/.\n\nWith PhantomJS and SlimerJS, on the opposite, methods are mixed synchronous or asynchronous : \n- open(url, callback) - asynchronous\n- evaluateAsync(function, [delayMillis, arg1, arg2, ...]) - asynchronous\n-  ==> page.evaluate(function, arg1, arg2, ...) - synchronous\n- ==> page.render (filename [, {format, quality}]) - synchronous\n- ==> page.renderBase64(format) - synchronous\nIf you look for an equivalent approach like chrome.tabs, every methods are fully asynchronous : \n- executeScript(integer tabId, object details, function callback)\n- captureVisibleTab(integer windowId, object options, function callback)\n  (https://developer.chrome.com/extensions/tabs)\nCasperJS has same trouble as PhantomJS and SlimerJS : mix synchronous and asynchronous fct.\nwait(), waitFor(), waitForAlert(), waitForPopup() ...  - asynchronous\nwithFrame(), withPopup() - asynchronous\ndownload() - synchronous\nevaluate() - synchronous\nThe use of Synchronous mode, although it eases writing limits treatments.\n@istr, could we propose a new set of asynchronous functions what could lead CasperJS to good javascript practices  ?\n. corrections applied\nnew bug -> popup  #1354\n. done\n. Done.\nIn my opinion, this PR is not really useful for CasperJS . In fact, I coded it for The \"SeBuilder\" Project because it can only use synthetic DOM events. But with phantomJS and SlimerJS is better to use real events instead of changing (inserting) css styles into DOM : it can impact navigation. That was I fixed troubles with real events on #1417.\nit's like you feel it.\n. \"limitation events\" PR is just a workaround.\nDo you ever success to use functions of mouse.js ?\nit is full of bugs because depend on view-port and many restrictions.\nI regret that casperJS projet doesn't have a directory where you can push tests that failed... a kind of TDD (test driven development). It could show us bugs to resolve.\n. Travis command is out ?\n. thanks you. I do it right now :-)\n. copy paste in not always a good thing :eyes: \n. Hi @istr , I merged with the eslint issue you mentioned but it doesn't works\n/usr/local/lib/node_modules/eslint/lib/config/config-validator.js:102\n        throw new Error(message.join(\"\"));\n              ^\nError: /casperjs/.eslintrc:\n    Configuration for rule \"quote-props\" is invalid:\n    Value \"as-needed,[object Object]\" no schemas match\nDo you know why ?\n. Perfect! Everything works! Good job @istr! :+1: \n. /home/jef/dev/casperjs/modules/clientutils.js\n   33:1   warning  Rule 'no-empty-label' was removed and replaced by: no-labels                 no-empty-label\n   33:1   warning  Rule 'space-return-throw-case' was removed and replaced by: keyword-spacing  space-return-throw-case\n   33:1   warning  Rule 'space-after-keywords' was removed and replaced by: keyword-spacing     space-after-keywords\n   75:17  warning  Expected no return value                                                     consistent-return\n   78:17  warning  Expected no return value                                                     consistent-return\n  280:25  warning  Expected to return a value at the end of this function                       consistent-return\n  311:25  warning  Blocks are nested too deeply (4)                                             max-depth\n  338:33  warning  Expected to return a value at the end of this function                       consistent-return\n  359:33  warning  Expected to return a value at the end of this function                       consistent-return\n  466:42  warning  Expected to return a value at the end of this function                       consistent-return\n  491:43  warning  Expected to return a value at the end of this function                       consistent-return\n  546:53  warning  Too many nested callbacks (2). Maximum allowed is 1                          max-nested-callbacks\n  571:43  warning  Expected to return a value at the end of this function                       consistent-return\n  626:74  warning  Unexpected use of undefined                                                  no-undefined\n  630:46  warning  Expected to return a value at the end of this function                       consistent-return\n  664:32  warning  Unexpected use of undefined                                                  no-undefined\n  844:25  warning  Blocks are nested too deeply (4)                                             max-depth\n  905:33  warning  Blocks are nested too deeply (4)                                             max-depth\n  923:33  warning  Blocks are nested too deeply (4)                                             max-depth\n. You are welcome\n. my second contribution :-) Hip Hip Hip Houra\n. Hi everybody ( @n1k0 @istr @mickaelandrieu ) ,\n1.    could you amend the docs with more elaborate contextualization of intended use cases? this could start by writing a complete description of your intents with the patch in the PR description field\nSorry :-1:  I thought that title was enough but you are right\nThis path adds 2 methods to Casper Object : \n- stop : stops running loop and execute onCompete callback\n- abort : stops running loop and but do not execute onCompete callback\n1.    do you think removing all the popup tests is a good idea?\n- I don't want to do that. I have just too many branchs and it's not easy to maintain all of them (30). So it's just a mistake that if will resolve soon.\n1.    did you notice we're using 4 spaces indentations, not tabs?\n- NO -> thanks for notices\n  it's different to other project whose I try to contribute\n1.   could you spend 2 minutes fixing the English sentences here and there in the patch?\n   ???? I don't understand !! what does that mean ?\nRegards\njef\n. that's ok ?\n. Hello @istr,\nThat's strange, with my ubuntu 14.4 and slimerjs 0.9.6 it works to me.\nI will check with older slimerjs versions\n800 warnings => 74 warnings\n. I try slimerjs 0.8.4 , 0.8.5 and 0.9.5 with my ubuntu and it works. Could you check on your side not with travis ci ?\n. I totally agree with you. it is not a real PR but more a test to find how to optimize alerts.\nthat's why there is no merge or rebase :-)\n. test passed\nwhy \"make\" in the command ?\nSLIMERJS_EXECUTABLE=/home/jef/dev/slimerjs-0.8.4/slimerjs bin/casperjs selftest\nSLIMERJS_EXECUTABLE=/home/jef/dev/slimerjs-0.8.5/slimerjs bin/casperjs selftest\nSLIMERJS_EXECUTABLE=/home/jef/dev/slimerjs-0.9.5/slimerjs bin/casperjs selftest\nSLIMERJS_EXECUTABLE=/home/jef/dev/slimerjs-0.9.6/slimerjs bin/casperjs selftest\nDo you agree on 13 PR for each js files ?\nRegards\nJef\n. Oups : test failed but green is displayed :-1: \nwith slimerjs  we have 2 failures \n```\nFAIL betterInstanceOf() detects expected constructor \"undefined\"\ntype: assertEquals\nfile: /home/travis/build/n1k0/casperjs/tests/suites/utils.js\nsubject: false\nexpected: true\nutils.cleanUrl() tests\n```\n```\nFAIL Casper.getPageContent() retrieves application/json content\ntype: assertEquals\nfile: /home/travis/build/n1k0/casperjs/tests/suites/casper/content.js\nsubject: null\nexpected: \"{\\\"dummy\\\":\\\"json\\\"}\\n\"\n```\nI need to investigate\n. Hi @istr ,\npage.settings.resourceTimeout is a delay to abort request\nif you want to abort request before 100 milliseconds, it could be better to not send request : \ncasper.on('resource.request', function(requestData, networkRequest){\n    networkRequest.abort();\n});\nThat is that I try to explain because browsers never timeout resource before 10 seconds (by default it more than 5 minutes)\nDo you know if we can trace responses for big data resource file ?\nAnother question : do you think that CasperJS could fix a default value for resource.timeout ?\n. Laurent Jouanneau @laurentj has added Support of webpage.onResourceTimeout\n(Commits on Mar 31, 2016) for SLIMERJS 0.9.7. And it works :-)\nSo I will redo PR when CasperJS will add in Travis Test the next SlimerJS stable version.\nMaybe it's better to fix the bug from browser versions that address the event requestTimeout.\nany idea @istr , @BIGjuevos, @mickaelandrieu ?\n. new version of PR...\n. @BIGjuevos , @mickaelandrieu, @istr, @paazmaya , @n1k0 \nCould we merge this PR ?\nThis PR is quite important, casperJS can now manage slow requests for recent version of phantomJS and SlimerJS.\n. Never mind @mickaelandrieu, \nIs somebody else could validate this PR ?\n. Thanks @istr for code review. I mix more and more English and French words :cry: \n. you are welcome. thank for merging. I can do it if you want @mickaelandrieu \n. @istr \nI don't know what is a \"real bug-fix\" \nIs it a  git command ?\nPlease, explain me\n. I just test on Windows 7, there is no loop at all, native fs.absolute works perfectly.\n\nabsolute('c:/..') = absolute('c://..') = absolute('c://../..') = absolute('c:/../..') ===>   'c:/'\nloop is break because  \"baseDir === prevBaseDir\"\n\nI will propose you another solution that could suit you, let's commit a new PR.\n. Hi @mickaelandrieu or @istr \n\nTest server url not found: /tests/site/non-existant.html (file: /home/travis/build/n1k0/casperjs//tests/site/non-existant.html) warning\n\non one test\nCould you please relaunch travis integration ?\n. :smiley: Hey men ! This is my first accepted PR in casperJS project (1/10)\nAlleluia \nto thanks collaborators, I will develop now a really cool feature :+1: \n. Hi @paazmaya , thanks to come back to life one of my old PR.\n. @istr , @BIGjuevos , @paazmaya , could we merge it now ?\n. Hi @mickaelandrieu,\n1. The module file \"events.js\" is the only one that is without comment.\n   To my mind, it looks like a copy paste from https://github.com/asyncly/EventEmitter2/blob/master/lib/eventemitter2.js or its forefather. (with 2 functions added)\n2. This PR considers that filters can also trigger events. (1 line : have a look above)\n3. To conclude, I tried to reduce eslint warnings when it was doable.\nRegards\n\"EventEmitter library\" is important to be imported into the CasperJS project, maybe you have another solution to do it than creating a mix file (EventEmitter + filtering management).\n. @mickaelandrieu , please merge or close this feature\n. @istr , @BIGjuevos any opinion ?\n. Re\n. it is quite strange to me to add this kind of test but code seems ok.\nagree to merge\n. @mickaelandrieu , are you ok to merge this PR ?. lol, I'm ok for this PR. I just want to know if you still want that I add your PR.. Hi @mickaelandrieu ,\nI'm quite sorry, I can't manage to keep the same PR number (#1459)\nAnd I don't like duplicated code on clientutils.js so I would like to improve that.\n:racehorse: \n. Hi @BIGjuevos , @istr , @mickaelandrieu \nyou were too fast for merging. I had to refactor fews functions to simplify them and make them more readable before to go on holiday. but I lacked time.\nCould I commit on the same branch ? or Do I have to use another PR ?\njef\n. lol, as you wish @BIGjuevos - this js file is minify so I had to ignore eslint scheduling\ncould you help me ? I don't use node.js and npm dependency\n. Lol @mickaelandrieu ,\nit's really hard to find a solution to backward compatibility without making concessions.\n. @mickaelandrieu , I don't understand why Ariya Hidayat (PhantomJS) and Laurent Jouanneau (SlimerJS) have chosen to support coffeeScripts at first (as Nicolas Perriault in CasperJS).\nAs they decided to stop using coffeeScripts, I understand now that many users are disappointed and very frustrated.\nMy programs are only written in javascript so I am not affected by this decision.\nSo as we talked previously of BC with Ingo Stuck @istr , I just write 6 lines of code :paperclip: to show everyone how keeping coffeescript cost. \n3 proposals : \n- write a doc to explain how to do without coffeescript (and clean code)\n- write the doc how to hack casperJS to use coffeescript\n- provide coffeescript support instead of browsers\nPS: I appreciate a lot yours advices and all your work,  I think software is easy to maintain if functions are small and well documented.\nMy dream to test web site : a free user friendly interface like https://ghostinspector.com/ (no more program for testers)\n. Hi Everybody,\n\nUnless @jefleponot wants to, I'll put together a PR for the cookbook.\n\nnice idea.\nIn my opinion, Backward Compatibility is important but in that case, Coffee-script launching must be outsourced.\nSo it could be good to add a single hook in bootstrap.js for support JavaScript compilers extensions (online or direct) .Not only for coffee-script developers\nJust have a look to : \nhttps://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS\nthere are more than 380 ways to generate or interpret JavaScript code.\nSome github projects are run after the changes in CasperJS library. : \n- \"ClojureScript\" https://github.com/cncommerce/beetlejuice / \n  https://github.com/BrightNorth/casperjs-cljs-test-example\n- \"elm-lang\" ...\n- \"purescript\" ...\n- \"coffeescript\" ...\n  ...\nRegards\n. @istr , @BIGjuevos , @mickaelandrieu   @laurentj, could you please close this issue ?\n. very good job :clap: \n. Hi @mickaelandrieu,\nI can't manage adding slimerJS 0.9.6 but slimerJS 0.10.0 works perfectly with @laurentj advices  (#1550).\nIf you have any idea about adding slimerJS 0.9.6 ... (trouble with coffee script)\n@istr , @BIGjuevos : Agree to merge ?\n. yes of course,\ndone\n. Hi @istr, @mickaelandrieu @paazmaya @BIGjuevos ,\nEverything looks OK , could you please have a look ?\n. @istr, do you have any objection for merging ?\n. @BIGjuevos , @mickaelandrieu , we need your agreement for merge this PR.\n. it lacks the \"getPlainText\" documentation method ... snifffff. Very good job @imdmitrykravchenko \n. @imdmitrykravchenko , could you please add a test and rebase\nRegards\n. Please merge\n. @mickaelandrieu , it needs rebasing , isn't it?\n. please rebase PR for merge proc\u00e9dure.\n\ngit rebase -i master\nwith squash details\n. @mickaelandrieu another PR to merge, ok ?\n. @jonataswalker , do you still want to merge your PR ?. @mickaelandrieu ok for me\n. @mickaelandrieu \n\nany suggestion about this PR ?\n. Hi @BIGjuevos ,\nI concur that function name must be self evident :\nprototype function xxx (function evaluate,args...object, function callback)\nHave you a proposal ?\nFor example, here is a list of names used by other asynchronous libraries :\nexecuteScript <= chrome webextensions \nrunJavaScript <= Qt 5\nexecuteAsync <= Webdriver.io \nI can't understand that you mean with including  \"withCallback\" .\n. what do you prefer 1 or 2?\n1. using callCasper\njs\ncasper.runScript(function(text) {\n    document.addEventListener('click',function(){\n        callCasper(document.title);\n    });\n   return \"ignored\";\n}, function(title) {\n    this.echo(title);\n});\n1. using function passed in parameter\njs\ncasper.runScript(function(text, done) {\n    document.addEventListener('click',function(){\n        done(document.title);\n    });\n   return \"ignored\";\n}, function(title) {\n    this.echo(title);\n});\nit is also possible to mix 1 and 2.\n. Hi @mickaelandrieu , @istr , @BIGjuevos \nAnother way to proceed,\nkeep all the casper functions and only work on the \"then\" function.\nHave a sample : \nNow (synchronous mode)\njs\ncasper.then(function(){\n    var title = casper.evaluate(function() {\n        return document.title;\n    });\n});\nSuggestion ( Asynchronous programming mode ) :\n``` js\ncasper.then(function(){\n    casper.evaluate(function() {\n        return document.title;\n    });\n}).then(function(title){\n  casper.echo(title);\n});\n```\n\nanother sample \nNow\n``` js\ncasper.on('remote.callback', function(title){\n   casper.echo(title);\n});\n...\ncasper.then(function(){\n    casper.evaluate(function() {\n        setTimeout(function(){\n           window.callPhantom(document.title);\n       }, 3000});\n    });\n});\n```\nSuggestion :\njs\ncasper.then(function(){\n    casper.evaluate(function() {\n        setTimeout(function(){\n        callCasper(document.title);\n       ,3000});\n    });\n}).then( function(title){\n  casper.echo(title);\n});\nI think it could be a coherent way to improve CasperJS while maintaining its simplicity.\nto compare CasperJS method to Webdriver commands\nCasperJS is easiest 83 methods vs 196 webdriver commands  :smile: \n. @BIGjuevos, could I propose a PR for one of this evolution ?\n@istr , any idea ?\n. you are wrong.\nhttps://docs.slimerjs.org/current/api/slimer.html\nwith slimerJS the variable phantom.version contains the version of PhantomJS to which SlimerJS is compatible (read-only)\nSo ((phantom.casperEngine === 'slimerjs' &&  utils.ltVersion(phantom.version, '0.10.0'))\nis totaly no sense \n. slimerjs-0.8.4 => phantom.version equivalent to {\"major\":1,\"minor\":9,\"patch\":0}\nslimerjs-0.8.5 => phantom.version equivalent to {\"major\":1,\"minor\":9,\"patch\":0}\nslimerjs-0.9.6 => phantom.version equivalent to {\"major\":1,\"minor\":9,\"patch\":2}\nslimerjs-0.10.0 => phantom.version equivalent to {\"major\":1,\"minor\":9,\"patch\":8}\n((phantom.casperEngine === 'slimerjs' && utils.ltVersion(slimer.version, '0.10.0'))\nequivalent to\nSo ((phantom.casperEngine === 'slimerjs' && utils.ltVersion(phantom.version, '1.9.8'))\n. Hi @ashkulz,\nyour PR seems OK\nI can't merge it because I'm not yet a core team member\n. Hi @mickaelandrieu , @ashkulz \nI agree, everything seems ok\n. @mickaelandrieu @BIGjuevos could we click on \"rebase and merge\" to add this PR ?. Tank you @sishen \n. Thanks for contribution\n@mickaelandrieu , agree to merge ?\n. all is okay for me\n. nice cosmetic change\nthanks for your contribution.\n. Thanks for contribution\n@mickaelandrieu, do you agree to rebase ?\n. ETA ?. ??? it is not correct\n. I'm sorry but you contribution has no sense\nJavascript doesn't require as first parameter the caller so ... i don't understand your work.\nCould you please add explanations ? \n. @zzanzare,\nThanks you for all yours explanations, I haven't understood that your are talking about casper.options.\nYou are totally right. Very goof job.\nWhat do you think about the \"onAlert\" documentation ?\nif you can fix it too as you would be nice :smile: \nRegards (before merge)\nCould you please, after squash all commits and re-base for merging branch.\n. @zzanzare , great job,\n@mickaelandrieu @BIGjuevos ready to merge ?\n. very good job, but BC is a good thing\n@mickaelandrieu @BIGjuevos what do you think ?\n. Thanks @mlalpho \nEverything seems to be ok, could anyone review my code ?\n@mickaelandrieu , I will write a more examples in documentation, if you are interested by this feature.. I would like to add this feature in next version of CasperJS, could someone take time to review the code ?\n@mickaelandrieu , @mlalpho , @BIGjuevos . @mickaelandrieu \nCasperjs is a project full of possibilities (web application tests, supervision, data scraping ...). \nIt needs to evolve and renew itself. But there is less and less contributions.\nHow to encourage contributions ? \nPerhaps, in proposing, some features that similar projects can't do. it is the goal of this PR.\nAs I'm not yet using NodeJS and all its environment so it's difficult for me to split CasperJS features into different modules.\nIt could be clever to converge towards a full asynchronous running (like @dritter proposals) to prepare the future versions of PhantomJS (latest full asynchronous webkit engine) => CasperJS 2.0.0\nFriendly\njef. @mathiasm74 , thanks for your proposal, could you please tell me the PR you would merge ?. Hi @mickaelandrieu,\nI have time today to works on CasperJS.\nI have passed my mono compilation at last.\nI have also rewrite this PR but I don't commit yet. It is now more mature.\nOnly one issue\ntemplate matching need a lot of resources so it could be nice to not freeze client page.\nAre you bothered if I code it with \"Web Workers\" calls ?\nRegards\n. @mickaelandrieu could you please merge this minor fix bugs code ?. Ok to merge\n@mickaelandrieu \n@bughit , could you please rename the commit comment ?. In fact, everything is ok. good job.\nready to merge. Every codes that Improve test coverage are important.. @mickaelandrieu, can you list all actions that we have to do to create a release ?. @mickaelandrieu, :laughing: \nnice idea release 1.1.4 : could we add it the \"waitForRender\" method ?. fixed visibility check . Hi @zaz ,\nCould you explain me what is \"phantomjs-prebuilt\" and what is dependency ?\nI don't know how does node module works .... Yes but CasperJS can also work with slimerJS , is there any dependencies for slimerJS ?. @zaz, thank for your explanations.\nI hope that CasperJS could be also compatible with web extensions (Chrome and Firefox). @mickaelandrieu ,@bguerin, @mlalpho \nTo conclude with popup bugs, here is a last PR that gives an optimize and readable code.\nThank for review. @mickaelandrieu , to me mind this PR is mature and successful.\nit will be very useful for phantomJS engines < 2.1.1\nDo you agree to rebase ?\nNow I will work on casperjs.exe compilation :+1: \nAnd also try to insert phantomjs 2.5.0 beta into travis CI .. It is nice to show in a first commit the tests code (that run with errors)\nand with a second commit to show how it can be solved :-) \nAfter we can merge or squash before merging ... . I think this PR is really mature and very useful so I merge it. \nThanks for all notices. Add nodeJS script to launch casperJS and update python+exe+doc. @mickaelandrieu , you are wrong : bootstrap.js read the version number from package.json\nTry to change the file, you will see ...\nThe real trouble is that we have add new parameters in the python script (for linux) and not in casper.exe (for windows)\nIs anybody known how to build a portable executable ? Is there a documentation ?\nHave you got an idea to create an universal launcher (without any compilation) ?. Hi @bguerin, \nDo you known how to compile casperjs.exe \nmono / Visual C# ... ?. Hi @bguerin \nThe makefile use \"Mono\" to test c# program but when I try to compile under windows 7 x86 : a nice error appears : System.MissinfMethodException System.Array.Empty()\nMono version 4.6.2\n.NET 4\ndo you have any idea ?. Hi @rhwy,\nI add a new launcher file in nodejs (compatible with phantomjs) called \"casperjs.js\" in the PR #1754\nBut when I use enclosejs a message is displayed : \"version evaluation please ...\"\nIs \"enclosejs\" free to use ? could we see code source ? is there any solution to compile js code for windows ?. Hi @rhwy, Do you know an alternative tools to compile node js ?. @mickaelandrieu, do you agree to merge ?. remove alpha versions of PhantomJS  2.0.0 - 2.0.1\nadd SlimerJS 0.10.2\nupgrade distribution to Ubuntu trusty (Firefox 45 ESR). Nice PR but it seems that you have forgotten to declare a variable called \"description\". @hlr1983 \nHave you find a documentation for that or just do reverse engineering ? .  @hlr1983 \nYou are right, good job.\nAn issue, why do you want to clean Memory for all new pages ?. @hlr1983 \nI was looking for the existence of the newPage method. In fact, it was created when page.close event is called so navigation become impossible.\nClearing Cache could be really useful but it will be better to create a new casper's method : \nCasper.clearCache () , do you agree ?. Very good feedback....I will test your 2 cases ... Thanks a lot\n. @hlr1983 \nCould ypu please do this test for me : \nadd this line in the casper/tests/selftest.js line 54\njs\nresponse.setEncoding(\"binary\");\ntest the file casper/tests/suite/casper/loadImage.js\n```js\n/eslint strict:0/\ncasper.test.begin(\"load Images tests\", 4, function(test) {\n    casper.on(\"resource.received\", function(resource) {\n        if (resource.stage === \"start\") return;\n        //console.log(JSON.stringify(resource,null,4));\n    });\ncasper.start().then(function(){\n    casper.page.settings.loadImages = false;\n    casper.thenOpen(\"tests/site/index.html\", {},function() {\n    test.assertEquals(this.resources.length, 1, \"one resource found\");\n        this.wait(200, function() {\n            this.capture('page0.png');\n        });\n    })\n}).then(function(){\n    casper.page.settings.loadImages = true;\n    casper.thenOpen(\"tests/site/index.html\", {}, function() {\n        test.assertNotEquals(this.resources.length, 1, \"not only one found\");\n        this.wait(200, function() {\n            this.capture('page1.png');\n        });\n    });\n}).then(function(){\n    casper.page.settings.loadImages = false;\n    casper.thenOpen(\"tests/site/index.html\", {},function() {\n        test.assertEquals(this.resources.length, 1, \"one resource found\");\n        this.wait(200, function() {\n            this.capture('page2.png');\n        });\n    })\n}).then(function(){\n    casper.page.settings.loadImages = true;\n    casper.thenOpen(\"tests/site/index.html\", {}, function() {\n        test.assertNotEquals(this.resources.length, 1, \"not only one resource found\");\n        this.wait(200, function() {\n            this.capture('page3.png');\n        });\n    });\n});\n\ncasper.run(function() {\n    test.done();\n});\n\n});\n```\nyou will have 4 captures 2 with the ghost, 2 without any ghost.. @hlr1983 \nI success to reproduce the bug with your example\nbut that is strange that bug appears only onto local css \"file:///\" resources.\nWhen I try on a website or with http://localhost:5321/....css, no bug appears.\nBecause css is reloaded ... no more cache. We can redefined page.settings.loadImages \n```js\n    Object.defineProperty(page.settings,'loadImages', {\n        get : function() { return page.loadImagesValue; },\n        set : function(newValue) {\n            page.loadImagesValue = newValue;\n            if (typeof page.clearMemoryCache !== \"undefined\") {\n                page.clearMemoryCache();\n            }\n        }\n    });\n\n````\nWhat do you think ?. Hi @hlr1983 \nCould you tell me when you think I could review your code :-). @hlr1983 \ncommits need to be squash because PR must have only \n- 1 commit : code + tests + docs\nor 2 commits : tests , code + docs\nor 3 commits : tests, docs, code \n:-) the second is better\nplease : git rebase -i master\nand squash all commits into a single one. @hlr1983 \nEverything looks good for merging\nDo you plan to add the test_mem.js into tests/suites/caperjs directory ?. @tarjei \nWhat do you think of http://docs.casperjs.org/en/latest/cli.html ?. a new PR is welcome :smile: . Casper is extended by EventEmitter (an old version) and it has never been documented ... :cry: . an example of casperjs/tests/suites/casper/newpage.js\nit allows the Test Driving Development.\njs\n/*global casper*/\n/*jshint strict:false*/\ncasper.test.begin('newPage() tests', 5, function(test) {\n    casper.start('tests/site/index.html', function() {\n        test.assertTitle('CasperJS test index', 'Casper.start() opened the first page');\n        test.assertEval(function() {\n            return typeof(__utils__) === \"object\";\n        }, 'Casper.start() injects ClientUtils instance within remote DOM');\n    }).then(function(){\n        casper.newPage();\n        casper.thenOpen('tests/site/page1.html', function(){\n            test.assertTitle('CasperJS test page 1', 'casper.newPage() created a new page object');\n            test.assertEval(function() {\n                return typeof(__utils__) === \"object\";\n            }, 'Casper.newPage() injects ClientUtils instance within remote DOM');\n           });\n    }).run(function() {\n        test.done();\n    });\n    test.assert(casper.started, 'Casper.start() started');\n});\nyou can easily transform your previous code test into TTD :-) \n. @hlr1983 \nWhy don't you have reuse the waitFor method ?\nAny Test is planned ?. @hlr1983 \nCould you squash and rebase he PR ?\n\ngit rebase -i master\n\npick first message\nsquash second\nsquash third\nsquash fourth .... @hlr1983\n\nCould you squash and rebase he PR ?\ngit rebase -i master\n\npick first message\nsquash second\nsquash third\nsquash fourth ...\n. Issue : Why on test pid == 0 ?\nDo you try to use it on SlimerJS with addons-sdk ?. @hlr1983 \nyou are really efficient.\nWhat do you think to become a new core team member ? \nyou are good and we need fresh blood.\n. @hlr1983 \nI'm ready to merge your PR. Do you agree ? Nothing else to add ??\nRegards. update README.txt. @hlr1983\nCould you review my code, please ... ?\n. @hlr1983 \nThanks a lot :smile: . @hlr1983 \nCould you please review this PR ?. @hlr1983 \nThat seams better .... @chipironcin \nVery Good job. @chipironcin \nIt is done for casperjs.js :+1: \nand for casperjs.exe : Do you code in mono Csharp ?. @djwales \nVery good job\nCould you please rebase your PR from master and recommit it ?\n$  git rebase -i master . @djwales\n\nEverything you have done is ok\nTravis Tests has failed because of a new travis configuration ... it will be a nice thing to stop testing the  oldest versions of SlimerJs.\nNow do you know how to rebase all your PR ?. @djwales \nokay\nPlease create a branch\n git checkout -b FixmemoryLeak\n git checkout master\n git reset --hard\n git checkout FixmemoryLeak\n git rebase -i master\n git push djwales FixmemoryLeak --force. you have to type\n\ngit checkout master\ngit reset a30162945d79cce7a664b17b576a5271ef1d7d9f\n\n. @djwales \nYou are totally right\nWith git, it is better to work always on a new branch to create a feature. When your code is stable and tests are all passed, you have just to merge all the commits of the branch (rebase mode) and propose a PR to project.\nClosing your all PR and opening another one, is exactly the good way. @Llorx very good job\nplease rebase your PR before  merged it.. Fix reset \"content-editables=true\"  fields on \"casper.sendKeys\" calls.. Hi @timabbott \nHave you test the master code ? If there are no trouble I will create a new release 1.1.4-2, okay ?\njef. @timabbott \nThanks a lot. @kensoh \nDo you agree with this PR ?. @kensoh \nWhen I try to integrate PhantomJS 2.5.0, I found bugs with PhantomJS 2.X.X so that explains second point of your comment.\nmultiple-popups.html occurs trouble usually because of opened port so I searched a way to fix this trouble.\nv2.5 has lesser compatibility score than v2.1.1 just because it is compiled without some video and audio libraries. In reality, there are for features bring with Webkit 5.7\n. @mickaelandrieu @BIGjuevos @n1k0 @kensoh @CodersBrothers @RichardJECooke @mlalpho\nIs somebody interested in using Promises with CasperJS thougth PhantomJS 2.5.0 ?\nPlease Help me in reviewing .... @kensoh \nI tested PhantomJS 2.5 standalone and I found some bugs that CasperJS has easily workaround.\nit is now fully usable with CasperJS.\nDo you think you could test it with yours scripts ?. @kensoh \nYou are right. The standalone linux version just works with ubuntu 16.XX. Hi @mickaelandrieu,\nIt's been a long time that you have post issue. \nYou always works for Prestashop ?\nThese PR just fix some PhantomJS 2.5 bugs (fileFieldSelector ...)\nSlimerJS is really nice now because it can work in normal mode or headless mode.\nI had changed job last september, so I haven't no more time to animate and to improve CasperJS.\nI will definitely move project as not maintained one.. Hi @mickaelandrieu \nYou are right, \n@kensoh  Do you agree to make this project unmaintained ?. Add The new version 1.0.0 of slimerJS. i don't know\nit's as you want\nif you think it's better\n. No need at all.\nit's just my \"jshint\" test that forces to me that lines\n. When I have used  \"jshint\" (thanks to Juga Paazmaya) a lot of errors appears.\nSo I try to do everything to pass them.\nerasing blank chars, count functions, add comments ...\n. :-)\n. there is a bug code in the test command and it will be better to add anotther test\n. ok\n:-)\n. ok\n. 2 votes for \"link_text\" (paazmaya+mickaelandrieu)\n1 vote for \"link text\"\n0 vote for \"linkText\" \n:+1: \n. done\n. done\n. Hi Natim, \nThanks for be interested in my feature\n\n\nDo you mean test.fail here?\n\n\nIt never fails because of casper.abort is called before it could happen\n\n\nWhy should it pass if it should not be executed?\n\n\nthese comment is a mistake  of copy paste , \"This test should be executed\" is that I planned to write.\n. in the abort call of course because casper.run main loop is never used.\n. Integration of SlimerJS is done for resource.timeout\n. Hi @mickaelandrieu \nThanks you for reading code.\nPhantomJS use its resource.timeout event directly : \npage.onResourceTimeout = function onResourceTimeout(request) {\n        casper.emit('resource.timeout', request);\n    };\n. I just copy paste the phantomjs error message : \"Network timeout on resource.\" Are you sure to want a so long error text ?\n. ok\n. thanks\n. this only line has been added :\n   this.emit(Array.prototype.slice.call(arguments, 0).concat([res]));\n. I'm idiot :tongue: \ndone\n. is it ok ?\n. in mouse.js\n. it makes failed all self tests\nDoes all contributors agree to clear all coffee reference in a PR ?\n. you are right. I will do more tesst integration to understand what it couldn't success . Could you please in the same time answer to my issue on #1639\nRegards\n. @mickaelandrieu do you know how we process for a roll back ?\nI will create a new PR meantime .\n. done\n. no, just for info\n. what do you think about that ?\njs\nthis.xpathNamespaceResolver = function xpathNamespaceResolver(prefix) { {\n  var ns = {\n    'svg':  'http://www.w3.org/2000/svg'\n  };\n  return ns[prefix] || null;\n}\n. I had let this line because CasperJS doesn't close webPage correctly.\nI will propose a PR to fix this bug but you are right I have to clean this line for now.. ???. I made a copy paste from page.onUrlChanged : but navigationRequested flag is not adapted to popups.. Please don't erase these lines : \njs\nvar style;\ntry {\n    style = window.getComputedStyle(elem, null);\n} catch (e) {\n    return false;\n}. Please, could you remove comments ?. Please, could you remove comments ?. events are all defined . Few events are identical and only 4 events are redefined.. I remove this code because try and catch options slow down main loop. this code was never used : I had to remove it. add a test when page had been yet closed. checks if popup is being used when closing. casperJS can't run without any page. adds an uniq id for popups. @mickaelandrieu , I found the error... thanks. . Do you think it is normal that the \"setFieldValue\"  method doesn't work on input[type=\"file\"] ?. Instead of go up to the parent frame, it is better to climb to the top and test if frames still exist.\nit avoids to \"shoot oneself in the foot\" because webpage.switchToParentFrame() crashes when frame does not exist anymore :). force jumping on main Frame to avoid \"cutting the frame on you are sitting\" . After loading a frame or a main page , try to return to the focus frame. need semicolon. \n    uncaughtError: TypeError: 'undefined' is not a function (evaluating 'this.page.clearMemoryCache()').  Expected space or tab after \"//\" in comment. Missing semicolon . Missing semicolon . Missing semicolon . Missing semicolon . Expected space or tab after \"/*\" in comment . error    Missing semicolon. I prefer \"waitForExec\" name. no : you mustn't redefined page.settings.loadImages. Casper Methods are sorted alphabetically - waiForExec must be between waitForAlert and waitForPopup\nParams will be better with\n/\n * Waits until an program is executed (kills it if timeout), \n * to process a next step.\n * Take care with programs that calls another processes, as it seems to kill only the child.pid\n \n * @param  String     command   The command to run, with space-separated arguments\n * @param  Array      parameters   array of parameters to be send to program\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n /\nCasper.prototype.waitForExec = function waitForExec(command, parameters, then, onTimeout, timeout) {. you forgot \"Function then\"  :smile_cat: \nwaitForExec(command, parameters[,Function then, Function onTimeout, Number timeout]). ",
    "jcollum-hcg": "No changes. But local settings can influence line-ending behavior so it seems possible that someone else will see changes. I'm unsure how to proceed here. \n. > PASS 865 tests executed in 21.196s, 865 passed, 0 failed, 0 dubious, 107 skipped.\n. ",
    "halfdan": "@mickaelandrieu For sure - can you point me to where I would put those tests? I can't seem to find an existing test for getPageContent.\n. ",
    "icoloma": "It's worth mentioning the error message Fatal: you can't override the preconfigured casper instance in a test environment.. Otherwise using Google to find this PR is tricky :)\n. ",
    "bluemsn": "Hi, I used waitForAlert has a error, but i don't know why? \ncoffeescript\ncasper  = require('casper')\ndump = require('utils').dump\ncasper\n  .create()\n  .start('http://localhost:3000') \ncasper.waitForAlert (response) ->\n  @.echo \"Alert received: \" + response.data \ncasper.run()\nTypeError: 'undefined' is not a function (evaluating 'casper.waitForAlert(function(response) {\n  return this.echo(\"Alert received: \"  );\n})')\n. ",
    "HerringtonDarkholme": "Is this only available in git installation? Both homebrew and npm ship 1.1-beta3.\n. sorry, but npm complains valid install targets: [\"1.1.0-beta2\",\"1.1.0-beta3\"]\n. ",
    "jonataswalker": "Any progress on npm installation? waitForAlert still unavailable 1.1.0-beta3.\n. Well ok, closing then.\n. Reopened @istr, let me know what to do from here.\n. Hey @istr sorry the delay.\nI also added some comments.\n. Yes @jefleponot . Isn't it assertFieldName description method?\n. Also here, isn't it assertFieldName usage example?\n. Sorry, but where is the second test?\n. Also here, isn't it assertFieldCSS usage example?\n. Same here, there's just a single assert.\n. And here is assertFieldXPath usage example.\n. ",
    "nicolashefti": "Hello @mickaelandrieu, @n1k0. Do you have any update on this PR? It seems like the work on exporter (like #647) is a bit frozen. Can I give a hand anywhere?\n. ",
    "kirs": "This is my first contribution to JS project and I'll need some time to get how the tests work\n. ",
    "intel352": "Any chance this will be revisited at some point to come up with a stable solution?\n. ",
    "robcolburn": "Hey @mickaelandrieu, wassup?\nfyi: I haven't worked with casper in several months, so I may be a bit behind.\n. With Casper? Didn't dig too deep in Casper's internals. I ended up, just writing in Node to control Phantom threads. I left behind my progress on that front (except proprietary parts) in tarantula if you're interested. The effort I was working toward was replaced by some off-the-shelf stuff, so my interest dwindled. ;-)\n. ",
    "mlb5000": "Ya, I don't think this is quite all the way there, or I'm possibly using it wrong.  I just integrated this into 1.1-beta3 as a test with the code from #803 and get this error:\nError: cannot access member `customHeaders' of deleted QObject\n. @ilangv Digging a little deeper and looking at casper.start it looks like there is some additional initialization that must happen on the page object after it is created.  However, even after bringing everything relevant to page initialization into the newPage function it still doesn't want to cooperate.\n. @ilangv I take that back, I messed up my test structure (different function prototypes between thenOpen and open), but there are still a couple things required in newPage.  I got it to work as I want using:\n```\nvar links = ['http://www.google.com', 'http://www.yahoo.com'];\nvar casper = require('casper').create({\n    logging: 'error',\n    pageSettings: {\n        webSecurityEnabled: false\n    }\n});\ncasper.start('http://www.amazon.com', function () {\n    this.echo(this.getTitle());\n});\ncasper.eachThen(links, function(item) {\n    var url = item.data;\n    this.open(url).then(function (){\n        this.echo(this.getTitle());\n    }).then(function () {\n        casper.page.close();\n        casper.newPage();\n    });\n});\ncasper.run(function (){\n    this.echo('Done');\n    casper.exit();\n});\n```\ncombined with this (obviously a copy/paste, but a simple extract method refactoring should take care of it):\nCasper.prototype.newPage = function newPage() {\n    \"use strict\";\n    this.checkStarted();\n    //copied from casper.start()\n    this.page = this.mainPage = createPage(this);\n    this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n    if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    return this.page;\n};\n. Would it also be worth it to check the deleted status of the current WebPage object to either throw an error or call close() on it for the caller?  As it stands, calling newPage without first calling close() would result in a memory leak, so we might was well protect from that within casper.\n. Unfortunately something still isn't getting cleaned up.  After this patch I'm still getting this error after my eachThen runs for a while, even with newPage called each time around.\nQEventDispatcherUNIXPrivate(): Unable to create thread pipe: Too many open files\n2014-02-13T21:18:06 [FATAL] QEventDispatcherUNIXPrivate(): Can not continue without a thread pipe\nAbort trap: 6\n. It's worth noting that without this it grows by about 10MB per page load, and grows much slower with it.  It still gets to over 2GB memory usage after a few hundred iterations though...\n. @n1k0 Are you talking in the sense of calling start again?  Start clears all steps and history as well as resetting the page.  This would be counterproductive in my use case, and is why I don't use it.\n@ilangv That's a little concerning.  I'm calling casper.newPage() as the last step of my eachThen callback and still it's definitely still leaking.  What other resources within Phantom, aside from the page, could be leaking?\n. @cptX I do the same as you to manage the ever growing memory consumption; manage an external queue of URLs to process and execute Casper from another program in a loop.  Unfortunately my own experiments came to the same unstable conclusion as your own so I just decided not to trust it altogether and continue on with looping from an outside program.\n. @mickaelandrieu Thanks for the tip, I'll have to try that.  I have noticed that if I'm running in a loop for a long time I'll start to accumulate a lot of orphaned PhantomJS instances (from times when something crashes).  Maybe this would fix that.\n. ",
    "ilangv": "@mlb5000 :+1: Valid point\n. I think this should solve it. \nCalling a page.close() explicitly should do the job \njs\nCasper.prototype.newPage = function newPage() {\n        \"use strict\";\n        this.checkStarted();\n        //Close the existing page object. Does not harm anything even if close() is called twice\n        this.page.close();\n        //copied from casper.start()\n        this.page = this.mainPage = createPage(this);\n        this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n        if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    return this.page;\n};\n. @n1k0 Will add tests and update docs shortly. Thanks\n. @n1k0 casper.reset() sounds misleading. Tends me to think of it as a master reset to the entire casper object rather than just the page. Don't you think so?\n. @mlb5000 Don't see this happening in my case. I am currently running the crawler code https://github.com/seethroughtrees/casperjs-spider with the above change and all is well so far. Am I missing something?\n. At last :+1: \n. ",
    "stefan--": "@mlb5000 any update on this issue? I am facing the same issue... thanks\n. ",
    "cptX": "Hi to all, I have written several scripts with casperjs to scrap webpages the last couple of years. I'm using casperjs in Linux. The problem with the increased need in resources (CPU, RAM) was always a big pain for all these scripts and imagine some of them are running standalone in a vps without my supervision. To manage the increase in ram I was automatically restarting the scripts through bash scripts.\nYesterday I came across this thread and I was amazed by the idea to close my headless page in order to reallocate resources and keep the RAM consumption stable and not rising.\nI tested it yesterday by adding the following code after a casper.thenOpen inside a loop of several iterations (target was 1000 iterations).\ncasper.then(function() {\n    casper.page.close();\n    casper.newPage();\n    this.wait(2000, function() {\n    });\n});\nInitially I tested it with no wait and it failed completely. The program was hanging in casper.newPage() for ever. Then I added a wait of 1000ms and it managed to do some iterations (~5) but again it hanged. Then I increased it to 2000ms and it managed to do 80-100 iterations before hanging. I repeated the test with my pc restarted (so all other resources were relatively free) and the script has hanged in the 270th iteration... After a while (~30secs) by it's own started working again.\nDuring all these iterations the RAM is kept relatively stable and increasing only very slowly. The difference is huge compared to the same code without page.close().\nThe reasons I'm posting here are the following:\n1. I want to say this is a must and we definitely should find a way to close pages at the end of every iteration.\n2. I see some instability on the above code. I don't understand why we need so much time to wait. 2000ms is too much for 1000 iterations. I could live with it if at least was stable. I don't understand why it hangs every now and then.\n3. I want to ask if it's possible to make the casper.newPage() blocking until the new Page is ready. That way we don't need to put an unreliable wait() for it.\n. This promise of closing every page is too good to reject it so soon! I definitely want to stay with it! I saw so much memory impact difference that for sure can change everything in my implementations...\nIf we focus on finding the problems of the instabilities?\nWhy is the delay necessary? What happens behind? How can we make it blocking until the new page is ready?\n. @mickaelandrieu Is it possible to use your script in a loop and if yes do we have to start a new phantom instance somehow after that? How?\n. Hi mickaelandrieu, as I'm new here I don't understand what you mean to post in the mailing list.\n. OK I opened an issue here: https://groups.google.com/forum/#!topic/casperjs/h-KyQWYXFfY\n. ",
    "diwu1989": "I just hit the memory issue on a scraper, would definitely love to see this merged in :+1: \n. ",
    "ssmulders": "Please add this - it just fixed a major bug for me and would love to have it in the main branch :dancers: :+1: \n. ",
    "robin-obrien": "@istr, Any estimation when can it be released, I wish I could start using it as it seems to be critical numerous memory issues\n. Thanks for the update, I am facing fatal memory issues running on Windows (BTW: On Mac, it is much more stable) and I am very eager having this fix. I would very grateful if you can guide me how to implement the fix in my code. Can I do it in my program or should I download the latest CasperJS code and compile it to a program?\n. @istr I really appreciate this\n. ",
    "zarkerus": "@ilangv @cptX When I try to use function newPage(), task manager show there are too many TCP Connection and the application got hanged, not sure why but that might be the reason\n`casper.start();\nvar json = require('list.json');\ncasper.then(function() {\n    var current = 0\n    var end = json.length;\n    for (;current < end;) {\n        (function(cntr) {\n            casper.thenOpen(json[cntr].url, function() {\n                console.log(json[cntr].id);\n                var data = this.evaluate(function() {\n                    return $(\"title\");\n                });\n            }).then(function() {\n                casper.page.close();\n                casper.newPage();\n            });;\n        })(current);\n        current++;\n    }\n});\ncasper.run();`\n. ",
    "sqren": "This should fix #196 \nI've run casperjs selftest and everything is green :)\n. Added a test.\n. Thanks for the comments. I've fixed the style issues and squashed everything into a single commit. \n. The most important thing is, that we don't run qs.encode on the body if the Content-Type is application/json.\nI'm not sure why someone would want to send data with a Content-Type of application/json but not encode with JSON.stringify, which is why I think it makes sense to add it.\n. ",
    "kangax": "+1. Ran into this as well.\n. ",
    "r8k": "@n1k0 @mickaelandrieu your thoughts on this please?\n. @n1k0 thank you for politely asking me to correct my commit message (i wont submit a half baked pull request again) :smile: \ntravis thinks the pull request is :green_heart: now ..\n. somehow, lost this notification. i will add tests, and push it to this branch, sometime today.\n. somehow, the commits are looking ugly, and travis does not like this. will be closing this, and creating a fresh one.\n. @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\n. @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\n. @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\n. @mickaelandrieu done. please review.\n. @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\nP.S: I can add tests, if you think the patch looks good.\n. i'm adding tests, probably will be done by tomorrow.\n. @mickaelandrieu pushing these today. :beers: \n. @mickaelandrieu sorry for the delay, i was unwell. now fixing couple of tests which are failing. will certainly fix and push these by today.\n. @mickaelandrieu how does this look now? :violin: \n. @mickaelandrieu i think that commit is a dangling one .. i can't find it, to squash it. i see only one way left now. do you want me to close this pull req, and submit a new one with the changes ?\n. ping @mickaelandrieu \n. oh yea, that was a typo ping .. :smile: \nping @n1k0 :flags: \n. @n1k0 @mickaelandrieu many thanks for the review. i will address the nitpicks, and push the changes. :smile: \n. am reorganizing the code a bit, per n1k0's review comments. taking a bit longer than usual.\n. @mickaelandrieu just been busy, and couldn't push my changes. i'll be pushing them today. be ready for it :smile: \n. @n1k0 yes, i thought about the same; regarding: having a method; testing for just if\nbut this also proves to be a helper of some sort, for other functions to use in future (probably this helper method can itself be overgrown with additional logic)\ni agree, with your point of having a getter for the options object, though. your thoughts?\n. also, i thought about making the method itself, concise - with the below:\njs\nCasper.prototype.javascriptEnabled = function javascriptEnabled() {\n    \"use strict\";\n    return this.options.pageSettings.javascriptEnabled;\n};\nbut left this in the present state, for readability. again, your thoughts? :smile: \n. > Your second proposal (for now) have my +1 ;)\n@mickaelandrieu do you mean, this?\n\nCasper.prototype.javascriptEnabled = function javascriptEnabled() {\n    \"use strict\";\n    return this.options.pageSettings.javascriptEnabled;\n};\n. @n1k0 made these changes, and pushed the commit. thanks for your review .. :smile: \n. \n",
    "franck34": "I would like to make a unit test for that, but got a leak regarding casperjs unit test, should be great if i can speak to somebody in french, in particular @montpellier ;)\n. ",
    "tohann": "Added a test for the click emit.  I'm not sure what docs to change?  It looks like there is already documentation for the click event.  I found the docs first and when I tried to use the event I realized it wasn't being emit()'ed.  If you could point me to the docs to change I'd be happy to update them.\n. Added!  Apologies for missing the tests the first time around.\n. I'm having some issues rebasing since I already pushed the prior changes.  Would you recommend doing a force push in this instance?\n. Ok, that's what I figured but wanted to run it by you first. :)  Force pushed!\n. ",
    "austin-rasmussen": "@hexid Sorry about that!  Not used to considering both OSes.  I just pushed a new commit that should take out the hard-coded separator.\n. Fair enough, wasn't aware of that.  Looks like that fixed the build.\n. ",
    "charandas": "Working on tests. Sorry for the premature PR.\nWill rebase once done. Thanks.\n. @mickaelandrieu Quick question for you: how to console.log in tests? clientutils have a log method defined but I didn't have much success using it. Is stdout being redirected by casper?\n. @mickaelandrieu Thanks. Actually, the issue was with evaluate. I need to remember using casper.on('remote.message') ;)\nAnyhow, I have added tests and they are passing.\njshint still returns cyclomatic complexity of 8 for the clientutils.getFieldValue. I would welcome any suggestions to improve it. I am currently checking for type to detect select-multiple as opposed to getAttribute(type) which returns null for such elements as per spec.\n. Sounds good @n1k0. I am kinda new to idiomatic JS, will address the nits. Happy to make a PR.\n. @n1k0 I made suggested changes as well as rebased. Let me know if anything remains.\n. The third option seems like the best as far as following functional programming styles (less variables). Will update. Thanks!\n. Absolutely. I was trying a map on input but it was only Array-like. This seems like a perfect replacement. Will update this in a following commit with rebase.\n. Good catch.\n. ",
    "ProdigySim": "I was having issues integrating casperjs with my Windows-based testing environment because running casperjs would seem to return immediately, forking the main phantom process to the background. \nThis simple change fixed the issue for me, and I imagine it will be useful for others. I'm not readily able to test on other platforms, but from what I've read about subprocess.call I don't think there should be any issues.\n. ",
    "maxgalbu": "+1, at least for windows\nrunning casperjs on windows is the same as running a process in the background, it does not wait for the end of the process and the output is a bit unreadable\n. Hm i just found out subprocess.call does the exact same thing (background-like process), it must have something to do with the way i installed casperjs (via npm), I'll keep testing\n. ok, if you replace the contents of the installed (by npm) file casperjs.cmd:\n@IF EXIST \"%~dp0\\python.exe\" (\n  \"%~dp0\\python.exe\"  \"%~dp0\\node_modules\\casperjs\\bin\\casperjs\" %*\n) ELSE (\n  python  \"%~dp0\\node_modules\\casperjs\\bin\\casperjs\" %*\n)\nwith:\n@ECHO OFF\ncall \"%~dp0\\node_modules\\casperjs\\batchbin\\casperjs.bat\" %*\nIt doesn't go in the background anymore, and i'm guessing you don't have to install python - i've read somewhere that it's embedded in the casperjs folder...\nBut has it been deprecated? @n1k0 help :)\n. ",
    "mattbasta": "It'll be a long time before TrifleJS actually happens. I've spent three work days so far trying to make it play nicely with CasperJS, but it's slow going. Only about 40% of the tests pass when running selftest (with this pull request) because of lack of support for the proper APIs.\nFor instance, document.createElement is not implemented. In Phantom and Slimer, this exists because you're running in what's essentially a browser context at all times. TrifleJS is not a browser context with APIs to control the browser, it's a JavaScript engine (V8) with some very thin APIs to control a separate browser instance. This means that there's no concept of DOM, XHR, etc. implemented in TrifleJS so far. And of course you can't just expose .Net's HtmlDocument class, since all of the member names AreCapitalized (and MSXML's DOM class--while having the correct capitalization on names--only supports XML).\nThe library that Trifle uses to embed V8 is pretty unfriendly, too. It doesn't let you pass functions or closures into the JS context, which means require has to be implemented completely in JS.\nAs for the code in this pull request, you can see that the entries.map call already outputs the absolute paths of each of the files. The reason the tests weren't currently failing is the way JS files are tested (looking at the extension without accessing the actual file). The current code generates paths like this: /Users/mbasta/src/test//Users/mbasta/src/test/foo.js. TrifleJS actually does a lookup when you use the path functions in fs (probably not the best), which causes it to fail.\n. ",
    "Fanch-": "Hum... still not updated:\nhttp://docs.casperjs.org/en/1.1-beta3/modules/tester.html#getfailures\nSee the Note below getFailures() :\n\"In CasperJS 1.1, you can store test successes by recording them listening to the tester pass event:\"  -> should be test failures and 'fail' event\nAnd for test.success, below getPasses():\nIt should be success x2 instead of 'pass'.\n. Done :)\n. Squashed.\n. It doesn't manage some useful errors ( Timeout for wait() family). I'll look at it again.\n. Up.\n. Relevant to #912 and PR #920 \n. ",
    "ry5n": "I\u2019m glad I could help. Thanks all round!\n. ",
    "tdd": "Finally got around to adding the test. How does that scan?\nBest,\n. ",
    "davidlinse": "Done, sir! .. \nUpdate:\nWhops.. Some SlimerJS related self test is failing in travis-ci.. !?\n. Any news on this ?\n. @mickaelandrieu \nThanks for your reply. \nOk, then probably the 'contribution-guide' should be updated from:\n\nRun CasperJS' test suite to see you didn't break something:\n$ casperjs selftest\nThe result status bar must be green before sending your PR\n\nto something like:\n\nRun CasperJS' test suite to see you didn't break something:\n$ casper selftest AND $ casper selftest --engine=slimerjs\n\nbecause tha latter also fails on latest HEAD of master ?!\nkind regards\n~david\n. @mickaelandrieu are you ok with this ?\nUpdate: It looks like travis is failing for other reasons.. \n. Any news on this ?\n. @mickaelandrieu i rebased to lastest master.. \n. Completed.. \n. Thanks for merge.. :beers: \n. ",
    "abelnation": "@mickaelandrieu hi there, sorry for the delay. @reply me to make sure i get the email notification.  \nWhat do you mean by \"squash\" my commits?\n. @mickaelandrieu closing this PR and opened a squashed version here:\nhttps://github.com/n1k0/casperjs/pull/1026\nhad a little bit of trouble w/ the rebasing, but I think i figured it out.  let me know if you see issues\n. @mickaelandrieu \n. ",
    "botandrose": "What do you guys think? Any feedback on this?\n. :thumbsup: Thanks! I've been using it for the last month or so, and its really improved the feel of our acceptance tests.\n. Thanks for the review, @mickaelandrieu! @n1k0 let me know if there's anything additional I can do to help this get merged.\n. @mickaelandrieu Done. Thanks for stewarding this PR along!\n. In this case, we're differentiating between one and many. If the radio buttons have been selected by \"name\" attribute, there will be many. If they have been selected by label text, there will only be one.\n. Good eye. It currently will not work with labels that are simply wrapping inputs, only labels that use the for attribute. If this PR gets merged, I will push an additional PR in the future to add this functionality.\n. ",
    "denis-sokolov": "Oh, damn, there were two typos in that test. :)\nNow updated.\n. I have no idea why the Github Markdown engine does not parse the link.\nI tried with other engines, the link works.\nAll in all, it's important to at least note this, it took me a while to figure it out myself.\n. I have added a minimal example.\n. Seems this will never be merged.\n. I can\u2019t, I deleted the fork. The diff still shows my suggestions if you choose to include them in the project.\nNo hard feelings, I was cleaning up my forks. :)\n. ",
    "AdamAbonyi": "I took a look at the yml file. I am not sure where to find the binaries of the new phantomJs version. I don't have access to phantoms google code to look there for the files and they aren't published on their website yet. Only source code is available. \n. Sounds reasonable. They have stated that they still have bugs present and its not ready for public release, but their master branch on github is v2. I will try to do it as soon as it will be possible. If anyone needs to use phantom2 with websockets like we did at least they can find the edited file here in the mean time. \n. Sounds good. I'll try to do it tomorrow. Is it possible to add the checkin to this PR or must i submit a new PR? \n. I don't understand why the Travis build is failing with slimerJS. Any advice?\n. my guess is that you don't have your casperJS enviroment property set up correctly. Try to check that. \n. ",
    "cpanato": "I made this change locally and got this:\nCouldn't find nor compute phantom.casperPath, exiting.\nany advice?\n. @Xenik007 if I use just the current without this change it works, if apply this stop working\nthx\n. ",
    "jazzzz": "\nI suspect we don't really want to search up to the fs root, for security reason.\n\nThat's what node.js does: http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\nI'm trying to understand why the test fails on Travis...\n. I fixed the test.\n. I'll try to write a test.\n. I'm currently on Windows, and it seems the tests do not work on this platform, is it a known issue?\n. Many failures trying to use SIGALRM like that:\n```\nERROR: test_help (main.BasicCommandsTest)\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 31, in f2\n    old_handler = signal.signal(signal.SIGALRM, timeout_handler)\nAttributeError: 'module' object has no attribute 'SIGALRM'\n```\nthen these errors:\n```\nERROR: test_xunit_report_failing (main.XUnitReportTest)\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 436, in test_xunit_report_failing\n    self.runCommand(command, failing=True)\n  File \"tests/clitests/runtests.py\", line 54, in runCommand\n    return subprocess.check_output(cmd_args).strip().decode('utf-8')\n  File \"c:\\Python27\\lib\\subprocess.py\", line 568, in check_output\n    process = Popen(stdout=PIPE, popenargs, *kwargs)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 711, in init\n    errread, errwrite)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 948, in _execute_child\n    startupinfo)\nWindowsError: [Error 193] %1 is not a valid Win32 application\n======================================================================\nERROR: test_xunit_report_passing (main.XUnitReportTest)\n\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 430, in test_xunit_report_passing\n    self.runCommand(command, failing=False)\n  File \"tests/clitests/runtests.py\", line 54, in runCommand\n    return subprocess.check_output(cmd_args).strip().decode('utf-8')\n  File \"c:\\Python27\\lib\\subprocess.py\", line 568, in check_output\n    process = Popen(stdout=PIPE, popenargs, *kwargs)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 711, in init\n    errread, errwrite)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 948, in _execute_child\n    startupinfo)\nWindowsError: [Error 193] %1 is not a valid Win32 application\n\n```\n. I'm trying to setup a Linux VM to run the tests.\n. I implemented one test.\n. ",
    "maciejjankowski": "linked with #193 \n. ",
    "jcaron23": "Indeed, things have changed in 1.1beta3. But as the current \"last stable version\" is still using the old path, it is necessary to give it (as following the current instructions with the stable version doesn't work). I have provided an updated version which lists both options. This can be changed again once the stable version uses the new path. \n. ",
    "zezhou": "@mickaelandrieu  Generally, You need to set ua to ios/android and then test mobile-only site. More details and examples can be seen in tests and docs I added at this time. \n. poke @mickaelandrieu \n. @andypeker \nnot every casper user have ability to use 'evaluate trigger' emulating the touch event.\npoke @mickaelandrieu . your suggestions is done \n. poke @mickaelandrieu @n1k0 \n. ",
    "andypeker": "Just use API this.evaluate trigger event by page itself, casperjs need not to support it!\n. ",
    "ciokan": "Any news on this one being merged?\n. ",
    "hver": "Hi guys, two monats passed since this PR was created, but no one commented on it. \nShould I rewrite it? This PR solves an actual error in casperJS and also provides unit tests to test for this error.\n Ping @n1k0, @mickaelandrieu \n. Merged commits and rebased the fix branch using latest master.\n. ",
    "mlalpho": "Can this be re-based/merged?. Can this be merged (minus debug output) ?. Test might need to be updated for this one\n. I don't really know what's going on with Travis:\n. ```\nResolving download.slimerjs.org (download.slimerjs.org)... 176.31.242.138\nConnecting to download.slimerjs.org (download.slimerjs.org)|176.31.242.138|:80... connected.\nHTTP request sent, awaiting response... 403 Forbidden\n2016-06-13 13:34:55 ERROR 403: Forbidden.\n```\n. I honestly don't know enough about the setup to say one way or another. Might be possible if you or a team member signs in to Travis using github.. from what i can see there's no 'Rebuild' button\n. @BIGjuevos is on the case!  #1620 Thank ya\n. @Marshevskyy this should be able to get mereged as #1620 is now closed. Please rebase and/or resend this PR so that Travis will pick it up :) :+1: \n. Ping @BIGjuevos @istr @mickaelandrieu  can one of you look these changes over?\n. @the872, you'll need to at least merge the .travis.yml, but I'd recommended rebasing and merging your changes with the current master before resending the PR\n. @the872: judging from the travis ci build log, it's still reading in the old links to the slimerjs download repo, whereas, in the new ci configuration it should be reading from casperjs/slimerjs-builds. see #1635 -- after you've made those changes travis ci builds should pass and then someone from the casperjs team will take it from there :+1: \n. Excellent feature! Great job @jefleponot. @jefleponot, I'd be willing to contribute some more time here. I think modularity is key to allowing diverse extensibility. \nThere are still a few unknowns for me when it comes to contributing and I think it would be helpful for others too to know what all it takes to get things built and released properly. The less friction there is to get contributions accepted and released, the more willing someone would be to contribute. \nThis project does have immense possibilities and I look forward to its future.\nUltimately, communication and consistency are key. We need to identify and eliminate the barriers that are stifling the potential for innovation of this project.. xpath tests failing consistently for a few dotnet build (not sure the connection there) while others pass. can't tell yet whether it's a problem with the test or the enhancement.... thanks @jefleponot \ud83d\udc4d yay passing tests!. ",
    "sklyukin": "@crocket I have tried your fork in Ubuntu. Still having \nNo such file or directory; did you install phantomjs even with local phantomjs installed.\nAfter this in the shell casperjs can find phantomjs\nexport PATH=$PATH:/www/crawlers/node_modules/phantomjs/bin\ncasperjs is called from /www/crawlers/node_modules/casperjs/bin/casperjs\n. I've tried, it works for me with some excuse\nIt is using path:\n/www/crawlers/node_modules/casperjs/node_modules/phantomjs\nBut in my case casperjs hasn't installed phantomjs dependency by default, because phantomjs already was installed here - /www/crawlers/node_modules/phantomjs \nSo it seems casperjs need to look at top-level node_modules directory too. \n. ",
    "crocket": "You're correct. I'll submit new commits to this pull request tomorrow.\n. Please check the latest commit on this pull request. It works for me at least.\n. It now works with phantomjs installed as a peer dependency.\n. ",
    "petetnt": "Hello, \ndumb question but should this fix the problem if I install casperjs globally via npm (Windows 8.1.).\nI tried to nuking everything related to phantomjs/casperjs and then installing casperjs from crocket's repo with the fix\nnpm install -g git+https://github.com/crocket/casperjs.git\nWhich installs it to C:/Users/petetnt/AppData/Roaming/npm/node_modules/casperjs.\nI have set C:/Users/petetnt/AppData/Roaming/npm/ to my PATH-variable, so I can run casperjs anywhere. However, when I try to run casperjs some_test.js it prompts me the same did you install phantomjs?, despite it being in C:/Users/petetnt/AppData/Roaming/npm/node_modules/casperjs/node_modules/phantomjs/bin.\nInstalling phantomjs with npm install -g phantomjs enables phantomjs being run globally with phantomjs, but the same error is prompted anyway (which might be related to #872). Am I missing something obvious?\n. :+1: \n. Sure @mickaelandrieu , it's done now!\n. ",
    "corford": "We were getting... \n\"TypeError: undefined is not an object (evaluating 'settings.headers[\"Content-Type\"].match')\"\n...when POSTing to a certain site (using the master branch of casper and phantomjs-2.0.1).\nI know phantomjs2 isn't officially supported yet but FYI this patch fixed the issue.\n. ",
    "DarrenCook": "https://groups.google.com/forum/#!topic/casperjs/BMvdJ0kYPok\n(first hit on google ;-)\n. ",
    "RasmusWL": "I'm not an english language expert, but haven't been able to find anything on the other way of spelling it.\nTo back me up, here is a couple of links http://www.thefreedictionary.com/explicit, http://dictionary.reference.com/browse/explicit, http://dictionary.cambridge.org/dictionary/british/explicit\n. ",
    "Ajnasz": "I rebased and force pushed it, but one build failed. I'm not sure, the issue is related. What could that be?\n. I reverted most of the braces I added, because the jshint version looks buggy for me, see the commit message in 27ac95e346edb\n. Squashed it.\n. Well, I can add braces, but this file has some other if statements without braces.\nWhat is your current styleguide? Braces for every if statement?\n. I added the braces, but now jshint breaks the build :)\nShould I go through on those errors?\n. ",
    "TitanNitWeb": "Hi everyone,\nis it possible to make an event-listener for a popup?\nI am trying to listen on window.alert and everything works fine for the direct access, but if the popup opens a alert-window the listener will not work.\nvar alertMessage;\nfunction alertListener(message) {\n    casper.echo(message);\n    casper.test.assertMatch(message, alertMessage);\n}\ncasper.test.begin('Casper recorded test', function(test) {\n    casper.start('http://localhost/test/');\n\n    casper.then(function() {\n        // temporarily registering listener\n        casper.on('remote.alert', alertListener);\n    });\n\np.s. I know that popup and alerts are deprecated, but I have to test the old web-application from my client. ",
    "rdpanek": "I have problem with build officialy branch 2.0, I work on it.\n. @mickaelandrieu we love of coffee - it's very useful, but I understand the reason https://github.com/ariya/phantomjs/issues/12410\n. @mickaelandrieu I tried rebase my changes on casperjs/master (88c59f8)\nPASS 1022 tests executed in 25.426s, 1022 passed, 0 failed, 0 dubious, 5 skipped.\n. @mickaelandrieu sorry, maybe I not understand, but what now? waiting for the milestone, or even on me?\n. @ohenak I don't know, because, I haven't windows environment. so I do not know the status of\n. @mickaelandrieu @oncletom :+1: \n. I prepared docker images with functional versions of casperjs and phantomjs2.0\nhttps://registry.hub.docker.com/u/rdpanek/casperjs/ and how to use: \ndocker run --rm -v `pwd`:/mnt/test rdpanek/casperjs:latest /usr/bin/casperjs test /mnt/test/example.js\n. +1\n. In this point was problem with bug in Phantom, not Slimer. The code is not removed, because I need your opinion.\nAfter this edit, test passed in both engines.\n. :+1: \n. ",
    "sbmaxx": ":+1: for support phantomjs 2.0 in casperjs\n. Hey. Maybe it's time to merge this PR? ;)\n. I didn't see any progress for a long time. This makes me sad.\n. @mickaelandrieu it exists on mac os x, and there is no rocket science in build from source ;) It's about ~15-30 minutes :)\nI'll wait..\n. ",
    "pskucherov": ":+1:  for subj\n. ",
    "peter-mouland": "+1\n. ",
    "ohenak": ":+1: I can't wait to see this happen!\n. @rdpanek I guess casperjs.exe has to be fixed too? since build failed due to tests for .NET not able to run? Or it is always expected?\n. ",
    "mokcrimea": ":+1: \n. ",
    "Klimanso": ":+1:\n. ",
    "timonstr": ":+1: \n. ",
    "xescoder": ":+1: \n. ",
    "a-x-": ":+1: \n. ",
    "yurich": ":+1: \n. ",
    "nbauma109": ":+1: \n. ",
    "DimitryDushkin": ":+1: from yandex)\n. ",
    "mattpacura": ":thumbsup:\n. ",
    "cosmo0920": ":+1: \n. ",
    "Surgo": ":+1: \n. ",
    "kevin-smets": ":+1: \n. ",
    "mitar": "+1 for keeping the CoffeeScript support.\n. ",
    "pilavdzic": "I can contribute updated install docs if this would be helpful?\nSee stack overflow answer by pilavdzice for the state of installing on windows:\nhttp://stackoverflow.com/questions/14894311/casperjs-windows-installation-how-is-it-done-the-correct-way-please/29152104#29152104\n+1 to remove coffeescript dependency - those who love coffeescript can get the latest version themselves and use that, but it should be optional, having more dependencies is a disadvantage and makes installation more of a barrier to folks who want to just simply start to use casperjs for something simple. This is a very useful tool because it makes things simpler. Phantomjs folks are smart too and did not think it was worth it to have more dependence, so I think it would be good to follow that example.\nCan we support coffescript without making it a required dependency? \n. ",
    "jchoi18": "Any update on this branch? I'd love to be able to use the window.performance feature in Phantom2.0 with casperjs\n. ",
    "slang800": ":-1: - Gitter has no place in FOSS development. The last thing we need is another proprietary chat network, especially since we already have ubiquitous IRC support.\n. ",
    "goggelz": "Actually, I do not really know how to work with Travis, there is the little problem, that still there are no binary files for linux packed for PhantomJS 2.\nCan you tell me how to do that?\n. Great :)\n. ",
    "msankhala": "Please update the same for beta so one can install with brew.\n. ",
    "kaiye": "I just install from brew, met the problem, and solved by overwrite the file : /usr/local/Cellar/casperjs/1.1-beta3/libexec/bin/bootstrap.js, thanks a lot :+1: \n. ",
    "badriub": "Creating a separate pull request at https://github.com/n1k0/casperjs/pull/1169 with rebase.\n. Rebased changes into single commit. Please merge.\n. ",
    "46bit": "Hi @istr. Fun to see this getting picked up after so long. I've rebased to the master branch. \nI grepped the docs for remaining mentions of CoffeeScript. There are a few warnings about 2.0.0 dropping support which is great to see. Then there are two remaining sections on using CoffeeScript:\n- http://docs.casperjs.org/en/latest/extending.html#using-coffeescript\n- The warning on http://docs.casperjs.org/en/latest/writing_modules.html\nBoth might be relevant to people writing in CoffeeScript but I'm not sure they still belong in CasperJS docs. If anyone more aware of the project would like to suggest what I do with those I'll add that in. Else we're set.\nCheers!\n. ",
    "jsherin": "ya, I thought the behaviour was a javascript bug when a found it but the last example kind of mentions it in: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n. ",
    "davidwhthomas": "Please refer to the pull request for the phantomjs-2 branch at #1196 instead. \n. Closing pending further tests, looks like this issue may already have been resolved upstream. Thanks!\n. ",
    "soundyogi": "Hi,\nso this is my first ever attempt to rebase a PR so perhaps you could have a quick look if this makes sense:\nI cloned the casper repo\nI added my fork with the patch-1 branch as remote\nI checked out the patch-1 branch\nnow, I was detached so:\ngit checkout -b fillFormPatch\nWhat can I do now to update the PR? I have read something about forcepushing.\nThank You for your help with this very tiny PR :)\n. Perfect, thank you I just could not find anything useful\n(keywords: \"github pull request rebase\")\nI will read those and hopefully I will manage.\nThanks\n. Hope this is correct :_D\n. @mickaelandrieu \nsorry for responding so late\nI had to learn how to squash commits first ._.\nAgain, I hope everything is correct :)\n. No thank you! I learned very much about contirbuting to an Open Source Project.\nThanks for your patience - as this PR was really small - laughable even.\n:)\n. ",
    "rippo": "I think this slightly makes more sense\n\"nor does it require native NodeJS modules\"\n. ",
    "dxuehu": "updated\n. ",
    "alexgibson": "Pull #1298 fixes the eslint breakage.\n. If you rebate this branch against master the eslint issue should now be fixed :+1: \n. This fixed one error, but looks like there are more. I'll see if I can update shortly.\n. Ok, worked out there are some inline eslint comments in the Casper code that look to be invalid. I can work through these next week, as well as tidy up these commits.\n. Should probably also tell Travis to only install a specific version of eslint to prevent future breakages happening again.\n. Ok this now fixes the Travis build errors - @n1k0 can you please merge this?\n. @n1k0 - happy to help, thank you!\n. ",
    "Lucas-C": "Done !\n. ",
    "alexbiehl": "Closing this, didn't realize, that then is ment in a promise composing way. \n. ",
    "brunowego": ":+1: \n. ",
    "JZL": "I agree that would work; really I thing anything will. I just feel like the current documentation is confusing (I know it took me a few minutes to fix it) and the first install is the point where new users are most likely to quit\n. @istr OK, does the newest commit solve this then?\n. @istr I do not understand. If I understand your PR correctly for 1.1.0-beta4 (#1365) npm install -g casperjs should work as expected/be addressed. So there is no need for my PR?\n. ",
    "andy-g": "From what I can see that last Travis result is an error (Couldn't resolve host 'github.com') as opposed to the previous eslint failure. Would someone be able to kick off this run again? Thanks\n. Thanks\n. ",
    "davidosomething": ":clap: :fireworks: \n. ",
    "jlfwong": "This doesn't quite work yet, because it doesn't reset state on a timeout (i.e. if a wait is still pending from a previous test, it doesn't reset that start at the beginning of the next).\nAlthough perhaps that's a different, since a timeout of one suites can cause a timeout in the next, even with phantom? Here's a more complete test script:\n```\ncasper.options.timeout = 1000;\ncasper.options.stepTimeout = 100;\ncasper.options.waitTimeout = 10;\ncasper.test.begin(\"should timeout after 1000ms\", function(test) {\n  casper.start();\n});\ncasper.test.begin(\"should timeout after 100ms\", function(test) {\n  casper.start();\n  casper.then(function() {\n    casper.waitStart();\n  });\n  casper.run();\n});\ncasper.test.begin(\"should timeout after 10ms\", function(test) {\n  casper.start();\n  casper.waitFor(function() { return false; });\n  casper.run();\n});\ncasper.test.begin(\"should pass\", function(test) {\n  casper.start();\n  casper.then(function() {\n    test.assertTrue(true);\n  });\n  casper.run();\n});\n```\n. Hi @istr! I wasn't sure how to write tests in the style of the other tests I found in the repository, because none of the others seem to expect timeouts, and wrapping these failures with an assertThrows or whatever the casper equivalent would complicate the test case quite a lot, because it would alter the queueing order of the tests.\n. ",
    "eloitay": "@jefleponot I tried patching this change into the source code myself and notice that it still produce zero byte files. So I am wondering if the way the script is written need to be changed as well in order for the bug to be fixed.\n. ",
    "sairoko12": "Someone what happened with this request?. ",
    "mepard": "Any idea why this caused failures in tests/suites/casper/popup.js in only one configuration? I'm baffled.\n. I have tested it on actual Windows 10, but the mono approach seems to work, too. The CL option problem I found failed on both and is now fixed on both.\n. Why did two jobs fail? In particular, why did a non-dot-net test fail, when it succeeded in my previous PR and this change only affected casperjs.cs? Suggestions are welcome.\n(I'm new to Travis CI, BTW)\n. Thanks.\n. I verified this on Windows, but it's my PR, so it would be great if someone else would check it as well.\nIt'd be great to get it merged. It fixes a nasty and mysterious problem when you run into it. Some custom command line options work fine on other platforms, but get \"Error: Unknown option\" on Windows and it's not clear why or which ones.\n. @mickaelandrieu You're welcome and thanks for testing it.\n. I'll take a look. \n. @istr I improved the options tests in #1452, which causes the Travis CI build to fail because the improved clitest-dotNET now fails. Merging both #1449 and #1452 should cause the tests to succeed.\n. The failing tests are the clitest-dotNET tests. #1449 should cause them to succeed.\n. Okay, I think I have it rebased. One should never tackle rebase before coffee.\n. Looks like this only happens with phantomjs 2.2.1.\n. It turns out the \"success\" when changing the url order was not real. The encoded url gets derailed in Casper.prototype.handleReceivedResource on the line \nif (utils.decodeUrl(resource.url) !== this.requestUrl)\nThe page.resource.received event does't get emitted and casper.currentResponse doesn't get updated.\n. Here are results with both url orders for phantomjs 2.0.0 and 2.2.0 (dev).\nencoded url results.txt\n. Here are results with both url orders for phantomjs 2.0.0 and 2.2.0 (dev).\nencoded url results.txt\n. This might be a good solution. Another might be to conditionally encode this.requestUrl when it is assigned. \n. It turns out the page.resource.requested event wasn't emitted for encoded urls with phantomjs prior to 2.1.\n. ",
    "SimonChong": "No worries. Thank you for maintaining CasperJS! \n. ",
    "addedjacky": "use phantomjs 2.1.1. ",
    "ethaizone": "If this pull request is not good, you can close it but I hope we can have better solution for it.\n. @mickaelandrieu I think same as you but I don't know another solution so I want to tell that I found this problem too. I hope we can have better download function. I look into test case and found base64 encode is good for multi-media files too. \nI think if we can improve download(), it will better but at currently I don't have any idea.\nPS. Today is first day for me to try write js testcase. Travis tell failed but it's fun. lol\n. I test again and found this implement broke xlsx files so I will close this pull request.\n. ",
    "kellyjosephprice": "Thanks all!\nOn Thu, Jun 30, 2016, 13:04 Micka\u00ebl Andrieu notifications@github.com\nwrote:\n\nMerged #1419 https://github.com/casperjs/casperjs/pull/1419.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/casperjs/casperjs/pull/1419#event-709677857, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAbjoG_X1WG3N4-AbiS6fTE90jPayrw9ks5qRCFngaJpZM4HRrBp\n.\n. \n",
    "maerten": "Thanks, will fix this.\n. @istr could you check if this PR is alright now?\nThanks!\n. @istr thanks for accepting the change!\n. ok, fixed version number in aa7ca5e\n. ",
    "DrCuriosity": "Test written and verified with bin/casperjs selftest --engine=slimerjs.\nLocally, the test FAILs as expected before the patch is applied, and PASSes afterwards. Here's hoping it does the same for everyone else.\n. ",
    "yoannmoinet": "Would it be better to create a PR on this branch and I'll merge it?\nSo this one will have both.\nWhat do you think @istr?\n. ",
    "Macek007": "Doc was added in separate PR.\n. Hi, sorry I couldn't react earlier to this PR... it seems that @jefleponot has finished it. Do you want something else with this PR?\n. The reason was that fill() did a lot of things and I needed similar functionality for my methods - that's why I isolated of making selector (makeSelector method). \n\"Finders\" needed more parameters, in all cases is findAll() called etc. On other hand makeSelector() is simple method with clear interface.\nI think using switch in this case is OK but I'll would rewrite it if you want.\n(btw. I think in method setField() is bad example of using mega switch with a lot of logic)\n. I thought that it is recommended pattern for XPath expressions according this example http://docs.casperjs.org/en/latest/selectors.html#index-2 \n. ",
    "Sayalic0": "Thanks for kind reply of you guys. I will check your advice carefully and refine my PR.\n. @istr I refined my code and wrote docs about the my new feature. Now I get stuck in writing test. I just have no idea about how to write a proper unit test for sendAJAX. Should I start a web server in a unit test, then send a request to that web server and check the header?\n. @istr No hurry. Take your time and thanks for your reply.\n. ",
    "ianchanning": "@BIGjuevos @mickaelandrieu I looked at fixing the script with all the examples but you have to add in manual back events, then it becomes a large unwieldy script that is hard to understand. \nIt's then showing three ways of doing exactly the same thing with slightly different arguments. \nThe example I chose used all the arguments of the method so that they can be seen in action. But at the same time it's easy to understand what it is doing.\nSurely to help first time users you don't want to show them all the possibilities, just the best simple example that they can run?\n. ",
    "ebrehault": "Do you mean the code located in the codepen page?\n. @mickaelandrieu I planned to push more examples but there are broken (they target public sites like Gmail or Yahoo! Weather, and the markup changed a lot since I wrote those examples).\n. ",
    "entrptaher": "Ah, I deleted the fork by mistake. (Actually, I deleted that on purpose, but forgot about the result of this pull request.)\n. @BIGjuevos What happened to this pull request?\n. ",
    "ironcamel": "Probably. How do you update/build the ./bin/casperjs.exe file?\n. I have updated src/casperjs.cs. Is there anything else I need to update for the windows client?\n. @mickaelandrieu sorry, I do not have access to a windows machine. Can we consider this patch as a linux fix and build the windows binary in a separate commit?\n. @mickaelandrieu sure, feel free to push your commit directly to this branch.\n. @marckubischta me too :)\n. ",
    "marckubischta": "Is there something still holding this up? I would love to get this merged.\n. ",
    "andreportela": "Here you can see the experiment:\nWebserver (must run first) will lock the console waiting for requests:\n$ bin/casperjs sendAjaxDemoWebServer.js\nClient CasperJS which will make the sendAJAX() request (run on another console):\n$ bin/casperjs sendAjaxDemoClient.js --web-security=no\nBam! Request is received instantly by the server.\nI have no idea why the test version takes ~30s to make the same request.\n. Thanks @istr !\n. Sorry for taking so long guys. Hope we can finally merge this =)\n. Hi @mickaelandrieu! Are you talking about this test?\n. ",
    "ideayuye": "Because \"The Travis CI build failed\". Perhaps because there are three test cases did not pass.\n. ",
    "Marshevskyy": "yep, strange tests error\n\nThe command \"if [[ $ENGINE_ARCHIVE_URL == .tar.bz2 ]]; then wget $ENGINE_ARCHIVE_URL --output-document=engine.tar.bz2; bunzip2 engine.tar.bz2; elif [[ $ENGINE_ARCHIVE_URL == .tar.gz ]]; then wget $ENGINE_ARCHIVE_URL --output-document=engine.tar.gz; gunzip engine.tar.gz; elif [[ $ENGINE_ARCHIVE_URL == *.zip ]]; then wget $ENGINE_ARCHIVE_URL --output-document=engine.zip; else echo \"Unsupported compression type for url $ENGINE_ARCHIVE_URL\"; fi\" failed and exited with 2 during .\n. is there any comment command, to run tests without \"git push\". I mean something like \"travis retest this please\" ?\n. could anybody from casperjs team look into issue with failed build?\n. @mlalpho thanks.\n. hey @mickaelandrieu. what do you mean? what is wrong with commit label? \n. @mickaelandrieu.  ah gotcha. done\n. \n",
    "the872": "make sure to [ci skip] on merge \n. @mlalpho, but there are no conflicts?\n. ",
    "betalb": "@mickaelandrieu rebased, ci is green now\n. ",
    "TheGrandPackard": "Woot! This is a really great suite for testing (and automating some really pesky web forms). Thanks for taking time to look at the PR and get it done!\n. ",
    "ashkulz": "Any feedback?\n. Can someone from the core team chime in? I see that @mickaelandrieu has merged some changes recently...\n. ",
    "nchase": "I just changed a line in the documentation, not sure why the build is failing.\n. ",
    "childen": "Do you mean \"What functionality would we lose by getting rid of config.test\"? The suggested change does not remove config.test. The only thing that is changed is that the \"test suite passed output\" is generated after test.done is called and not when the config.test function returns.\n. ",
    "mirzazeyrek": "Any ETA for adding it into npm ?. Sorry may be it's not a proper usage \"estimated time of arrival\" :) \nI meant when it will be possible to update npm version :)\n. ",
    "ghost": "in which sense?\nIf it's about the travis failure, I believe my commit could not have possibly caused this error: The command \"npm install -g eslint@v1.10.1\" failed and exited with 1 - can we somehow re-trigger the travis build?\n. well i was playing with casper, following the documentation here: http://docs.casperjs.org/en/latest/modules/casper.html#onresourcereceived and I needed to use these event handlers. And by dumping the function arguments I found out they are receiving the Casper object as the first argument, contrary to what the documentation said. So I fixed the documentation according to the actual behavior. See the tickets, they describe the problems quite clearly. It's just doc fix, no code change\n. @jefleponot ok I added also onAlert, and rebased\n. ",
    "dritter": "Hi all!\n@jefleponot I agree, BC break is bad. But, as said, there is a way around it. But I am not a fan of lets check every argument and guess what we should do with it (like testing for function and execute it; what the BC way would look like).\n@mickaelandrieu This PR indeed contains two changes regarding the usage:\nFirst, for asynchronous setUp/tearDown, instead of calling \nJavaScript\ncasper.test.setUp(function(done) { ... });\none must provide the callback function as third parameter. This is the obvious BC break.\nJavaScript\ncasper.test.setUp(function(test, globalCasper, done) { ... });\nSecondly, as far as I can see, it is possible to define two tearDown functions. A local and a global one, which would be executed both. With this PR this is not possible any more. Either have a local or a global tearDown function.\nSo, there is no real change in behaviour.\n. ",
    "mathiasm74": "@jefleponot wrote:\n\nHow to encourage contributions?\n\nIf you want to encourage contributions then surely the first step is to make sure you don't have 40+ pull requests just sitting there, no? Am i naive?\n. ",
    "bughit": "@jefleponot Was it just the missing \"in\" or did you have something else in mind?. I use void for immediate functions, there's less visual noise, there is only one void rather than two parens far apart, and it's actually more meaningful, it conveys that you're invoking a function and discarding the return.  If you require parens then you should have just said so.. ",
    "zacharysierakowski": ":+1: I spent some time yesterday with an issue related to these parameters! A release for this would be great.. ",
    "zaz": "@jefleponot: CasperJS doesn't work without PhantomJS. This PR ensures that PhantomJS is installed automatically when CasperJS is installed.. @jefleponot: This PR doesn't add any dependencies for SlimerJS.\nIf that is the case, then this PR is inappropriate and an alternative method should be considered for ensuring the user installs PhantomJS or SlimerJS.  This could either be a message displayed to the user after install, or two new packages, CasperJS_Phantom and CasperJS_Slimer that wrap this package and the respective dependency.. ",
    "bguerin": "@mickaelandrieu yes I remember this problem of the exe wrapper having the bad version. So I did a grep 1.1 in the whole source tree and found nothing but the package.json. Make me curious so I looked at the code, and I think @jefleponot is right, this is exactly what I saw.\nBut I am always a little bit suspicious with Microsoft compiled code, resource files and all the dark magic behind each line the Microsoft compiler toolchain prints .... However, at least a markdown file listing all that must be done for a release would be a good thing to have. Even better, a script which automate the stuff. I would love to help writing this :). https://github.com/casperjs/casperjs/blob/master/Makefile#L17. No sorry ... I never code in C# :(. ",
    "rhwy": "@mickaelandrieu I just tested compile+exec on your casperjs.cs file and i works, didn't have the same error messages. It's ugly but it works ;-)\nbut from what I saw on your csharp code, it's only a wrapper doing a shell call to something else, right? what's the purpose of that exe? why not using something like enclosejs to build an exe if the point is to have an exe instead of maintaining this cs file that not everybody understands?. Hi @jefleponot,\nsorry for the misunderstanding, my idea with enclosejs was only to say that you should look in that direction instead of maintaining the c# wrapper, not to use it directly. As you said, it's a paid product and you should avoid that ;-). ",
    "Resin01": "Sorry yes. Should be this.formatMessage(this.currentSuite.name). ",
    "hlr1983": "I've read about it in phantomjs changelog (https://github.com/ariya/phantomjs/blob/master/ChangeLog):\n2015-01-23: Version 2.0.0\nNew features\n\n  * Switched to Qt 5 and updated WebKit (issue 10448)\n  * Implemented clearing of memory cache (issue 10357)\n  * Added support for HTTP header change for every request (issue 11299)\n\nAnd issue 10357 (https://github.com/ariya/phantomjs/issues/10357) says\n\"ariya added a commit that referenced this issue on Sep 25, 2014\n @ariya Implement clearMemoryCache() on a web page to clear the cache.  \u2026\"\n(https://github.com/ariya/phantomjs/commit/5768b705a019da719fa356fdbf370f3ea72b4c93). Yes, I agree with creating the Casper.clearCache ().\nI have not used this for address memory consumption issues.\nI use casperjs for doing automation of tasks, and I had two situations where I had the behavior I wanted after adding a clearMemoryCache():\nThe following code, which only worked after adding a clearMemoryCache():\n...\ncasper.then( function () { this.page.clearMemoryCache(); });\ncasper.thenOpen(my_url, function () {\n    this.waitFor(\n        function teste6() {\n            return ( (this.exists(x(\"id('selSerie')/option[text()='Instru\u00e7\u00e3o'][@selected='selected']\"))) && (this.exists(x(\"id('txtNumero')\"))) && (this.exists(x(\"id('txtDataElaboracao')\"))) && (this.exists(x(\"id('optPublico')\"))) && (this.exists(x(\"id('btnSalvar')\"))) )\n        }, function sucesso6() {\n            console.log(\"PREENCHENDO RESTANTE DO FORMULARIO E SALVANDO.\");\n            this.sendKeys(x(\"id('txtNumero')\"), 'PROCESSUAL CADA', {keepFocus: true});\n            this.sendKeys(x(\"id('txtDataElaboracao')\"), data, {keepFocus: true});\n            this.click(x(\"id('optPublico')\"));\n            this.click(x(\"id('btnSalvar')\"));\n            this.waitFor(\n                function teste7() {\n                    if ( (this.exists(x(\"//a/span[@class='infraArvoreNoSelecionado']\"))) && (this.getElementsInfo(x(\"//a/span[@class='infraArvoreNoSelecionado']\")).length == 1) ) {\n                        return (/Instru\u00e7\u00e3o PROCESSUAL CADA \\(\\d{1,10}\\)/.test(this.getElementInfo(x(\"//a/span[@class='infraArvoreNoSelecionado']\")).text));\n                    } else {\n                        return false;\n                    };\n                }, function sucesso7() {\n...\nthe html code for XPath \"id('btnSalvar')\" is \n<button tabindex=\"451\" type=\"button\" onclick=\"confirmarDados()\" accesskey=\"C\" name=\"btnSalvar\" id=\"btnSalvar\" value=\"Confirmar Dados\" class=\"infraButton\"><span class=\"infraTeclaAtalho\">C</span>onfirmar Dados</button>\nI think it could be a misbehavior of confirmarDados() in phantomJS, because it works well when in chrome and firefox.\nThe other situation was when rendering a page that has the following html code:\n<table cellspacing=\"0\" cellpadding=\"0\" height=\"23\" border=\"1\" width=\"599\">\n    <tbody><tr> \n        <td class=\"tableTitle1\" align=\"center\" width=\"599\">Resultado da Consulta</td>\n    </tr>\n </tbody></table>\nTableTitle1 is defined in a CSS file as\n.tableTitle1\n{\n    border:1px solid #6D6C6C; background-color: #FFFFFF;\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 10px;    \n    font-weight : bold; \n    color: #ffffff;   \n    text-decoration: none;\n    text-transform: uppercase;\n    height : 18px;\n    padding-left : 0px;\n    padding-top : 1px;  \n    background-image: url('../images/frmshadow_txtfield1-on.jpg');\n}\nIf I do something like\ncasper.then(function () { this.page.settings.loadImages=false; )};\ncasper.then(function () { this.open('A PAGE THAT LOADS THE CSS FILE AND USES TableTitle1'); )};\ncasper.then(function () { this.page.settings.loadImages=true; )};\ncasper.then(function () { this.open('THE PAGE I WANT TO RENDER THAT USES THE CSS TableTitle1'); )};\ncasper.then(function () { this.capture('page.png'); )};\nThe \"background-image: url('../images/frmshadow_txtfield1-on.jpg');\" is not shown in page.png\nBut if I do something like\ncasper.then(function () { this.page.settings.loadImages=false; )};\ncasper.then(function () { this.open('A PAGE THAT LOADS THE CSS FILE AND USES TableTitle1'); )};\ncasper.then(function () { this.page.clearMemoryCache(); )};\ncasper.then(function () { this.page.settings.loadImages=true; )};\ncasper.then(function () { this.open('THE PAGE I WANT TO RENDER THAT USES THE CSS TableTitle1'); )};\ncasper.then(function () { this.capture('page.png'); )};\nThe \"background-image: url('../images/frmshadow_txtfield1-on.jpg');\" is shown in page.png\nI'm using phantomJS 2.1.1 in Linux x64, and the CasperJS 1.1.4\n. I did a small script with offline files which reproduce the second case.\ntest.tar.gz\n```\nhenrique@usb-azul:~/test2$ rm *.png ; echo $PATH ; echo \"MY TEST SCRIPT:\" ; cat ./test.js ; ./phantomjs/phantomjs --version ; PATH=./phantomjs:$PATH ./casperjs/bin/casperjs ./test.js\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\nMY TEST SCRIPT:\nvar casper = require(\"casper\").create({\n    verbose: true,\n    logLevel: \"debug\",\n});\nvar fs = require(\"fs\");\ncasper.start(\"\");\ncasper.then(function () { this.page.settings.loadImages=false; });\ncasper.then(function () { this.open(\"file:///\" + fs.workingDirectory + \"/www.site.com/multa/teste.html\"); });\ncasper.then(function () { this.capture(\"page1.png\"); });\ncasper.then(function () { this.page.settings.loadImages=true; });\ncasper.then(function () { this.open(\"file:///\" + fs.workingDirectory + \"/www.site.com/multa/teste.html\"); });\ncasper.then(function () { this.capture(\"page2.png\"); });\ncasper.then(function () { this.open(\"file:///\" + fs.workingDirectory + \"/www.site.com/multa/teste.html\"); });\ncasper.then(function () { this.capture(\"page3.png\"); });\ncasper.then(function () { this.page.clearMemoryCache() });\ncasper.then(function () { this.open(\"file:///\" + fs.workingDirectory + \"/www.site.com/multa/teste.html\"); });\ncasper.then(function () { this.capture(\"page4.png\"); });\ncasper.run();\n2.1.1\n[info] [phantom] Starting...\n[info] [phantom] Running suite: 11 steps\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 1/11: done in 27ms.\n[debug] [phantom] opening url: file:////home/henrique/test2/www.site.com/multa/teste.html, HTTP GET\n[debug] [phantom] Navigation requested: url=file:////home/henrique/test2/www.site.com/multa/teste.html, type=Other, willNavigate=true, isMainFrame=true\n[info] [phantom] Step anonymous 2/11: done in 45ms.\n[debug] [phantom] url changed to \"file:////home/henrique/test2/www.site.com/multa/teste.html\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[debug] [phantom] Capturing page to /home/henrique/test2/page1.png\n[info] [phantom] Capture saved to /home/henrique/test2/page1.png\n[info] [phantom] Step anonymous 3/11: done in 125ms.\n[info] [phantom] Step anonymous 4/11: done in 125ms.\n[debug] [phantom] opening url: file:////home/henrique/test2/www.site.com/multa/teste.html, HTTP GET\n[debug] [phantom] Navigation requested: url=file:////home/henrique/test2/www.site.com/multa/teste.html, type=Other, willNavigate=true, isMainFrame=true\n[info] [phantom] Step anonymous 5/11: done in 146ms.\n[debug] [phantom] url changed to \"file:////home/henrique/test2/www.site.com/multa/teste.html\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[debug] [phantom] Capturing page to /home/henrique/test2/page2.png\n[info] [phantom] Capture saved to /home/henrique/test2/page2.png\n[info] [phantom] Step anonymous 6/11: done in 192ms.\n[debug] [phantom] opening url: file:////home/henrique/test2/www.site.com/multa/teste.html, HTTP GET\n[debug] [phantom] Navigation requested: url=file:////home/henrique/test2/www.site.com/multa/teste.html, type=Other, willNavigate=true, isMainFrame=true\n[info] [phantom] Step anonymous 7/11: done in 193ms.\n[debug] [phantom] url changed to \"file:////home/henrique/test2/www.site.com/multa/teste.html\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[debug] [phantom] Capturing page to /home/henrique/test2/page3.png\n[info] [phantom] Capture saved to /home/henrique/test2/page3.png\n[info] [phantom] Step anonymous 8/11: done in 238ms.\n[info] [phantom] Step anonymous 9/11: done in 240ms.\n[debug] [phantom] opening url: file:////home/henrique/test2/www.site.com/multa/teste.html, HTTP GET\n[debug] [phantom] Navigation requested: url=file:////home/henrique/test2/www.site.com/multa/teste.html, type=Other, willNavigate=true, isMainFrame=true\n[info] [phantom] Step anonymous 10/11: done in 260ms.\n[debug] [phantom] url changed to \"file:////home/henrique/test2/www.site.com/multa/teste.html\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[debug] [phantom] Capturing page to /home/henrique/test2/page4.png\n[info] [phantom] Capture saved to /home/henrique/test2/page4.png\n[info] [phantom] Step anonymous 11/11: done in 310ms.\n[info] [phantom] Done 11 steps in 310ms\n[debug] [phantom] Navigation requested: url=about:blank, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"about:blank\"\nhenrique@usb-azul:~/test2$ \n``. @jefleponot \nIt worked when I addedresponse.setEncoding(\"binary\");!\nBut withoutresponse.setEncoding(\"binary\");` the test also said passed, but the rendered pngs didn't show the ghost image.\ntest.tar.gz\n. @jefleponot \nIt's ok.\n\nWe can redefined page.settings.loadImages\n    Object.defineProperty(page.settings,'loadImages', {\n        get : function() { return page.loadImagesValue; },\n        set : function(newValue) {\n            page.loadImagesValue = newValue;\n            if (typeof page.clearMemoryCache !== \"undefined\") {\n                page.clearMemoryCache();\n            }\n        }\n    });\n\nWhat do you think ?. Some tests failed:\n\nWithout redefined page.settings.loadImages:\nPASS 1204 tests executed in 36.463s, 1204 passed, 0 failed, 0 dubious, 5 skipped.\nWith it:\nFAIL 1184 tests executed in 38.033s, 1179 passed, 5 failed, 4 dubious, 5 skipped.\nDetails for the 9 failed tests:\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/hooks.js\n  onResourceRequested() & onResourceReceived() hook tests\n    assert: onResourceRequested() receives image requests\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/viewport.js\n  viewport() asynchronous tests\n    assertEquals: Casper.viewport() changes width asynchronously\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/visible.js\n  visibility tests\n    assert: Casper.visible() can detect if an element is visible\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/wait.js\n  waitForResource() tests\n    fail: Casper.waitForResource() waits for a resource\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/wait.js\n  waitForExec() tests\n    dubious: waitForExec() tests: 3 tests planned, 2 tests executed\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/casper/xpath.js\n  XPath tests\n    dubious: XPath tests: 6 tests planned, 7 tests executed\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/tester/assert.js\n  Common assertions tests\n    assertVisible: Tester.assertVisible() works as expected\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/tester/setup-teardown-async.js\n  tearDown() tests\n    dubious: tearDown() tests: 1 tests planned, 0 tests executed\nIn /home/henrique/test5/SISTEMA/casperjs/tests/suites/tester/skip.js\n  Skip tests (asynchronous)\n    dubious: Skip tests (asynchronous): 1 tests planned, 0 tests executed. @jefleponot \nNow it's ready for review! :-)\nI'm learning how to use GitHub. I did a draft of a test in test_mem.zip, but I don't know how to deal with some issues:\n1) It uses a very big file - doesn't make sense add a file of this size to do a test, and if the file is not big enough the test may fail, as memory usage is always changing a little.\n2) It uses external command ps (windows don't have one, it may behave be different on linux, osx an BSD's systems). @jefleponot \nMaybe latter I add the test_mem.js. I'm looking for a way of creating a huge image file using js, for loading in page content.\nWhat do you think about suggesting to the engines' mantainers (phantomJS and slimerJS) to have something like a system.memory variable in the System Module, to show the memory usage?. Finally did the git rebase -i master :-). @jefleponot \n\nBecause 0 is the value child.pid assumes when the process ends (by itself or being killed) or has not started (for example, file is not executable). It's the last child.pid value, passed by __details(), so it should be 0.\nI also don't think it's a good idea to pass the real PID of child as a parameter, because waiForExec() should only call Function then or Function onTimeout when the child is no more present (which is assured by the test !child.pid).\nIt might be a little paranoid, but another process could be called and assume the PID that belonged to child, so the use of the waiForExec() can do a mess if the real PID is passed and used for something in Function then or Function onTimeout.\n\n\nI did it into the new commits, now the pid is the real PID child used and created the isChildNotFinished.\n\nMaybe we change the property name, from pid to another (isChildNotFinished ? So when it is 0 == false, it says the child is finished?). I don't see much use for the real PID (perhaps use it to kill the childs of the child, spawnning a shell script with pgrep, ps, kill, etc?) but we can try to send it as a parameter too.\n\nIssue : Why on test pid == 0 ?\n\nNo, I haven't tried.\n\nDo you try to use it on SlimerJS with addons-sdk ?\n\nthanks for the feedback.. @jefleponot \n\nYes. Thank you! :-)\n\nI'm ready to merge your PR. Do you agree ? Nothing else to add ??\nRegards. @jefleponot \n\nI'm very thankfull for this, but I don't know if I will be heavly using CasperJS for the next six months... For now, I would prefer to keep colaborating in the current way.\nregards\n\nyou are really efficient.\nWhat do you think to become a new core team member ?\nyou are good and we need fresh blood.. I think it should not be merged, as SlimerJS docs says:\nNote that even if settings and phantom.defaultPageSettings are usable, only few settings are taken account by webpage objects: javascriptEnabled, loadImages and userAgent.\n\nI've done a small test and window.open() works when javascriptCanOpenWindows is false. So, I'm closing this PR.. @jefleponot \nIt's ready, I think. :-). It worked for me, running in Linux/Ubuntu/Xenial, with phantomjs 1.98, 2.1.1 and 2.5:\nhenrique@usb-azul:~/test_casper$ lsb_release -a ; PATH=$PATH:./phantomjs/ ; echo \"casper.js with this.page.clearMemoryCache():\" ; grep -B16 -A3 MemoryCache ./casperjs/modules/casper.js ; echo \"My test script\" ; cat ./test.js ; cp phantomjs/phantomjs-250 phantomjs/phantomjs ; phantomjs --version ; ./casperjs/bin/casperjs ./test.js ; cp phantomjs/phantomjs-211 phantomjs/phantomjs ; phantomjs --version ; ./casperjs/bin/casperjs ./test.js ; cp phantomjs/phantomjs-198 phantomjs/phantomjs ; phantomjs --version ; ./casperjs/bin/casperjs ./test.js \nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.2 LTS\nRelease:    16.04\nCodename:   xenial\ncasper.js with this.page.clearMemoryCache():\n Allow user to create a new page object after calling a casper.page.close()\n @return WebPage\n*/\nCasper.prototype.newPage = function newPage() {\n    \"use strict\";\n    this.checkStarted();\n    this.page.close();\n    this.page = this.mainPage = createPage(this);\n    this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n    if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    this.page.clearMemoryCache()\n    return this.page;\n};\nMy test script\nvar casper = require('casper').create({\n    verbose: true,\n    logLevel: \"debug\",\n});\ncasper.start(\"\");\ncasper.thenOpen(\"http://www.google.com/\", function () { this.capture(\"test1.png\"); });\ncasper.then( function () { this.page = this.newPage(); });\ncasper.thenOpen(\"http://www.yahoo.com\", function () { this.capture(\"test2.png\"); });\ncasper.run();\n2.5.0-development\n[info] [phantom] Starting...\n[info] [phantom] Running suite: 5 steps\n[debug] [phantom] opening url: http://www.google.com/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.google.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://www.google.com/\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 2/5 http://www.google.com/ (HTTP 0)\n[debug] [phantom] Capturing page to /home/henrique/test_casper/test1.png\n[info] [phantom] Capture saved to /home/henrique/test_casper/test1.png\n[info] [phantom] Step anonymous 2/5: done in 3403ms.\n[info] [phantom] Step anonymous 3/5 http://www.google.com/ (HTTP 0)\n[info] [phantom] Step anonymous 3/5: done in 3421ms.\n[debug] [phantom] opening url: http://www.yahoo.com/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.yahoo.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://www.yahoo.com/\"\n[debug] [phantom] Navigation requested: url=https://s.yimg.com/os/mit/media/m/base/images/transparent-95031.png, type=Other, willNavigate=true, isMainFrame=false\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 5/5 http://www.yahoo.com/ (HTTP 0)\n[debug] [phantom] Capturing page to /home/henrique/test_casper/test2.png\n[info] [phantom] Capture saved to /home/henrique/test_casper/test2.png\n[info] [phantom] Step anonymous 5/5: done in 7298ms.\n[info] [phantom] Done 5 steps in 7366ms\n[debug] [phantom] Navigation requested: url=about:blank, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"about:blank\"\n2.1.1\n[info] [phantom] Starting...\n[info] [phantom] Running suite: 5 steps\n[debug] [phantom] opening url: http://www.google.com/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.google.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=http://www.google.com.br/?gws_rd=cr&ei=veHHWO3fEMa-wATeyLTgAw, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://www.google.com.br/?gws_rd=cr&ei=veHHWO3fEMa-wATeyLTgAw\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 2/5 http://www.google.com.br/?gws_rd=cr&ei=veHHWO3fEMa-wATeyLTgAw (HTTP 200)\n[debug] [phantom] Capturing page to /home/henrique/test_casper/test1.png\n[info] [phantom] Capture saved to /home/henrique/test_casper/test1.png\n[info] [phantom] Step anonymous 2/5: done in 1622ms.\n[info] [phantom] Step anonymous 3/5 http://www.google.com.br/?gws_rd=cr&ei=veHHWO3fEMa-wATeyLTgAw (HTTP 200)\n[info] [phantom] Step anonymous 3/5: done in 1628ms.\n[debug] [phantom] opening url: http://www.yahoo.com/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.yahoo.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=https://www.yahoo.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=https://br.yahoo.com/?p=us, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"https://br.yahoo.com/?p=us\"\n[debug] [phantom] Navigation requested: url=https://s.yimg.com/os/mit/media/m/base/images/transparent-95031.png, type=Other, willNavigate=true, isMainFrame=false\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 5/5 https://br.yahoo.com/?p=us (HTTP 200)\n[debug] [phantom] Capturing page to /home/henrique/test_casper/test2.png\n[info] [phantom] Capture saved to /home/henrique/test_casper/test2.png\n[info] [phantom] Step anonymous 5/5: done in 4424ms.\n[info] [phantom] Done 5 steps in 4485ms\n[debug] [phantom] Navigation requested: url=about:blank, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"about:blank\"\n1.9.8\n[info] [phantom] Starting...\n[info] [phantom] Running suite: 5 steps\n[debug] [phantom] opening url: http://www.google.com/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.google.com/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=http://www.google.com.br/?gws_rd=cr&ei=wuHHWJDIAoajwAT-toTYBg, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://www.google.com.br/?gws_rd=cr&ei=wuHHWJDIAoajwAT-toTYBg\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 2/5 http://www.google.com.br/?gws_rd=cr&ei=wuHHWJDIAoajwAT-toTYBg (HTTP 200)\n[debug] [phantom] Capturing page to /home/henrique/test_casper/test1.png\n[info] [phantom] Capture saved to /home/henrique/test_casper/test1.png\n[info] [phantom] Step anonymous 2/5: done in 1519ms.\n[info] [phantom] Step anonymous 3/5 http://www.google.com.br/?gws_rd=cr&ei=wuHHWJDIAoajwAT-toTYBg (HTTP 200)\nUnsafe JavaScript attempt to access frame with URL about:blank from frame with URL file:///home/henrique/test_casper/casperjs/bin/bootstrap.js. Domains, protocols and ports must match.\n. Add a @param page\nAlso change the docs.. Should add a this.page.frameLevel--; to switchToParentFrame() ?\nAnd this.page.frameLevel = 0; to switchToMainFrame() ?. What do you think? Should we use wait() or waitFor() here?\nWhat about add a new param killTimeout (so the method will be waitForExec(command, then, onTimeout, timeout, killTimeout)), for waiting killTimeout ms after child SIGTERM, and before the child SIGKILL,  for a more \"polite\" exit?\nSo it could be (with waitFor()):\nkillTimeout = ~~killTimeout || ~~this.options.waitTimeout;\n// killTimeout = getTimeoutAndCheckNextStepFunction(killTimeout, then, 'waitForExec', this.options.waitTimeout, false);\n// killTimeout = getTimeoutAndCheckNextStepFunction(killTimeout, then, 'killAndCallOnWaitTimeout', this.options.waitTimeout, false);\n(function killAndCallOnWaitTimeout() {\n    // I don't know if it should return\n    // return this.waitFor(function isProgramKilled() { // HAVE TO ADD waitFor() TO MAKE child.on(\"exit\"... UPDATES exitCode AND TO child.pid BE UPDATED\n    this.waitFor(function isProgramKilled() { // HAVE TO ADD waitFor() TO MAKE child.on(\"exit\"... UPDATES exitCode AND TO child.pid BE UPDATED\n        return !child.pid;\n    }, function onProgramKilled() { \n            this.log(f(\"waitForExec() has killed %s (PID %d) with %s\", details.data.command.program, details.data.pid, signalToKill), \"info\");\n            // this.then(this.createStep(__onWaitTimeout, timeout, __details()));\n            __onWaitTimeout.call(this, timeout, __details());\n    }, function onProgramNotKilled() {\n            this.log(f(\"waitForExec() has not killed %s (PID %d) with %s\", details.data.command.program, details.data.pid, signalToKill), \"warning\");\n            signalToKill = (require('system').os.name !== \"windows\") ? \"SIGKILL\" : \"WM_QUIT\"; // \"WM_QUIT\" SEEMS TO BE THE WINDOWS EQUIVALENT TO UNIX SIGKILL\n            // Change killTimeout to 0, because the process must be killed after SIGKILL, I don't think it makes sense to let it be another value\n            killTimeout = 0\n            child.kill(signalToKill);\n            killAndCallOnWaitTimeout.call(this);\n    }, killTimeout);\n}).call(this);\nOr (with wait()):\nkillTimeout = ~~killTimeout || ~~this.options.waitTimeout;\n// killTimeout = getTimeoutAndCheckNextStepFunction(killTimeout, then, 'waitForExec', this.options.waitTimeout, false);\n// killTimeout = getTimeoutAndCheckNextStepFunction(killTimeout, then, 'killAndCallOnWaitTimeout', this.options.waitTimeout, false);\n(function killAndCallOnWaitTimeout() {\n    // I don't know if it should return\n    // return this.wait(killTimeout, function() { // HAVE TO ADD wait() TO MAKE child.on(\"exit\"... UPDATES exitCode AND TO child.pid BE UPDATED\n    this.wait(killTimeout, function() { // HAVE TO ADD wait() TO MAKE child.on(\"exit\"... UPDATES exitCode AND TO child.pid BE UPDATED\n        if (!child.pid) {\n            this.log(f(\"waitForExec() has killed %s (PID %d) with %s\", details.data.command.program, details.data.pid, signalToKill), \"info\");\n            __onWaitTimeout.call(this, timeout, __details());\n        } else {\n            this.log(f(\"waitForExec() has not killed %s (PID %d) with %s\", details.data.command.program, details.data.pid, signalToKill), \"warning\");\n            signalToKill = (require('system').os.name !== \"windows\") ? \"SIGKILL\" : \"WM_QUIT\"; // \"WM_QUIT\" SEEMS TO BE THE WINDOWS EQUIVALENT TO UNIX SIGKILL\n            // Change killTimeout to 0, because the process must be killed after SIGKILL, I don't think it makes sense to let it be another value\n            killTimeout = 0\n            child.kill(signalToKill);\n            killAndCallOnWaitTimeout.call(this);\n        };\n    });\n}).call(this);\nI've done the the tests for both, and worked.\nIf we add the killTimeout, remember to change the doc.. Ok. I'll also do one more change, add a response.data.elapsedTime.. Must be inside a then. Otherwise the elapsedTime will be the sum of other tests an this test.\nWith then, elapsedTime is something like 1600, 1700ms\nWithout then it's is something like 4000ms (remember first test usually takes 2000, this 1600, so we have 3600ms plus the other tests.. Is it a bug??? Should open an issue for it?. ",
    "tarjei": "Looks good - but I didn't find that text when looking :) Maybe I should add a link in the cookbook text?. Updated.. Also - why isn't casper.once() documented?. Ah :). ",
    "chipironcin": "What about \n\nAdvice requested for casperjs.js and casperjs.exe\n\nShould we also apply these changes to those files?. nope \ud83d\ude02 . ",
    "Rykus0": "I just didn't realize the original had changed from when I first started this.  I'm going to close this one and submit another.. ",
    "djwales": "@jefleponot \nI have added another commit because I noticed a typo in the online documentation. The PR is running through Travis again. \nIs there a problem with the Slimer tests? I noticed that they are a bit sporadic when I run them on my machine, sometimes they all pass and on other runs I get some random test failures. I noticed that my original PR failed in travis due to slimer tests. The tests that failed had nothing to do with the changes that I had made.\nMy updated PR has failed on Slimer tests. Am I doing something wrong?. No, sorry. I tried running \ngit rebase -i master\nBut the message just said noop and it didn't list any commits. I created a fork of the casper repo and made my changes on master in my fork. I then created a pull request from my fork back to the casper repo. . @jefleponot \nI had to do it slightly differently. This is what I did (in my forked repo):\ngit checkout -b FixMemoryLeak\ngit checkout master\ngit reset --hard HEAD~3\ngit checkout FixMemoryLeak\ngit rebase -i master\n# I then saved the rebase file without modifying it. \ngit push --set-upstream origin FixMemoryLeak\ngit checkout master\ngit push --force\nI now have a branch in my forked repo called FixMemoryLeak with my three commits in it. My commits are no longer present on my master branch in my forked repo. Is this what you wanted?\nI tried doing git reset --hard as you suggested by it didn't remove anything and when I tried to rebase the FixMemoryLeak branch it said noop again. I assumed you wanted me to remove my commits from master and put them onto a branch. . @jefleponot \nI have done that but nothing has changed as far as I can see. Sorry if I am making a mess of this, this is my first open source PR so I am not 100% sure of the steps. I appreciate your help so far.\nMy forked repo has two branches - master & FixMemoryLeak. The head of master is currently:\n\na30162945d79cce7a664b17b576a5271ef1d7d9f - jefleponot - visible element can't be critical for click trigger\n\nThe head of FixMemoryLeak is currently: \n\n2f19e75509a26f3aa1182929b0373ea20336f77b - David - Fixed a typo in the online documentation - refs #1844\n\nMy FixMEmoryLeak branch contains my three commits whilst master is in sync with the main casperjs/casperjs repo.\nWhen you asked me to Rebase my PR from master and recommit it, did I need to do anything else or just move my changes onto a branch?\nI have noticed that the PR is now closed which I am assuming is because I have moved the commits from master onto a branch. Do I now need to create a new Pull Request from my branch? Am I right in assuming that my pull request should be from FixMemoryLeak branch in djwales/casperjs to master branch in casperjs/casperjs?. Thanks @jefleponot.\nI have created a new PR from my branch - #1848 . @jefleponot \nTravis has randomly failed again on the SlimerJS tests. What should I do now?. ",
    "Llorx": "This is weird. .11 fails in a lot of different tests that I've not touched :-/. Well, sorry if this is a dumb question, but seems that my path-1 branch is created from the last casperjs branch, so don't know what you say about rebase.\nI've created the branch and modified the files via web. Don't know if I have to do something with a git client.. ",
    "timabbott": "Any idea when this fix will make it into a release?  We're running into this problem with the Zulip project, and I'd love to be able to just upgrade.. Yep!  It passes all of Zulip's tests (after I fixed one bug in our tests that was apparent only with the new version).\n. ",
    "hannyu": "Yes, I can read it, and I have thought about it..\nBut the only problem is the version in Gem can only accept like 1.0.0.RC1 in this format. If I use 1.0.0-RC1 or 1.0.0_RC1, it will prompt error.\nSo to keep the version number separated by dots, may be a good idea. In that case, I can successfully modified to read from package.json file.\n. Okay, I will try it :)\n. ",
    "materazu": "I'm think includes is different than pre/post files.\nIn my experience, includes contains lib, functions, vars and pre/post files who start/stop my test or make some things before/after\n. Ok, i working that this week-end ;)\n. ",
    "leebyrd": "Yeah I guess I was a little lazy on that one. Much better thanks. I'll make\nthat change.\nOn Sat, Jan 19, 2013 at 3:45 PM, Nicolas Perriault <notifications@github.com\n\nwrote:\nIn modules/clientutils.js:\n\n@@ -694,10 +694,17 @@\n                     out = 'Unsupported field type: ' + nodeName;\n                     break;\n             }\n+\n             // firing the change event\n\nNice. May I suggest something like:\n['change', 'input'].forEach(function(name) {\n    var event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(name, true, true);\n    field.dispatchEvent(event); });\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/357/files#r2705964.\n. \n",
    "nabriski": "Sorry about that, partly bad .vimrc and partly me ... amended my commit, hope I nailed it this time.\n. ",
    "rigoleto": "I like this suggestion.  I didn't think I could use such methods on\nNodeList, but it's possible using the array prototype methods directly.\nEdited the pull request.\nOn Sat, Mar 23, 2013 at 10:38 AM, Nicolas Perriault \nnotifications@github.com wrote:\n\nIn modules/clientutils.js:\n\n\nif (el) {\nfor(var i = 0; i < elems.length; i++)\n\n\nMaybe this code can be rewritten a more function way:\nreturn elems.some(function(elem) {\n    var comp = window.getComputedStyle(elem, null);\n    return comp.visibility !== 'hidden' &&\n           comp.display !== 'none' &&\n           elem.offsetHeight > 0 &&\n           elem.offsetWidth > 0;});\n(untested, might need to be adapted)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/432/files#r3501424\n.\n. \n",
    "T0RAT0RA": "Right, it doesn't exist.\nWhy the testcase name is \"success.message || success.standard\" and not just \"success.standard\"?\nThe problem is success.message can by a very long string. (In my case it's rather failure.message that contains a long string).\n. ",
    "philoozushi": "I'm not a Windows guy, but it should be the same for the win exe (src/casperjs.cs, line 145), and maybe solve issue #269?\n. ",
    "Natim": "Do you mean test.fail here?\nWhy should it pass if it should not be executed?\n. Where is the call to test.done?\n. ",
    "sishen": "@jefleponot Good point! Will make the change and test with other namespaces too. Thank you.\n. @jefleponot Made the changes, please review. Thanks!\n. ",
    "amberv0": "ok, will do that. Though I wrote those tests in case of future implementation will handle the case of a parent with visibility: hidden. ",
    "Vitallium": "@mickaelandrieu this should be fixed in 2.5 version.. "
}